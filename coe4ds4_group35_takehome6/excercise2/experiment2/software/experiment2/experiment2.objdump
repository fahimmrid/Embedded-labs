
experiment2.elf:     file format elf32-littlenios2
experiment2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00019890 memsz 0x00019890 flags r-x
    LOAD off    0x0001a8b0 vaddr 0x000998b0 paddr 0x0009b3c4 align 2**12
         filesz 0x00001b14 memsz 0x00001b14 flags rw-
    LOAD off    0x0001ced8 vaddr 0x0009ced8 paddr 0x0009ced8 align 2**12
         filesz 0x00000000 memsz 0x0000f7a0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000189a0  000801bc  000801bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000d54  00098b5c  00098b5c  00019b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b14  000998b0  0009b3c4  0001a8b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000f7a0  0009ced8  0009ced8  0001ced8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0001c3c4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000f58  00000000  00000000  0001c3e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000254b  00000000  00000000  0001d340  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000360af  00000000  00000000  0001f88b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a305  00000000  00000000  0005593a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001dc1c  00000000  00000000  0005fc3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000029f4  00000000  00000000  0007d85c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000278c  00000000  00000000  00080250  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000db09  00000000  00000000  000829dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000904e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009f8  00000000  00000000  000904f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  00095d71  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00095d77  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00095d7c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00095d7d  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00095d7e  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00095d89  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00095d94  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00095d9f  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000024  00000000  00000000  00095daa  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0004b6b5  00000000  00000000  00095dce  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801bc l    d  .text	00000000 .text
00098b5c l    d  .rodata	00000000 .rodata
000998b0 l    d  .rwdata	00000000 .rwdata
0009ced8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000801f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 PB_button.c
00000000 l    df *ABS*	00000000 alt_ucosii_simple_error_check.c
00000000 l    df *ABS*	00000000 experiment2.c
00000000 l    df *ABS*	00000000 tasks.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000829b8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
000998b0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00082ebc l     F .text	00000058 __sprint_r
000994a6 l     O .rodata	00000010 blanks.3452
00099496 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00084f38 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00086960 l     F .text	00000058 std
00086a6c l     F .text	00000008 __fp_lock
00086a74 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0009b314 l     O .rwdata	00000004 charset
000994d8 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00099620 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0008af44 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0008c704 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0008c764 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0008c868 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0008cb4c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0008cc2c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008cd8c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0008d270 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0009b33c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0008d528 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0009b340 l     O .rwdata	00000004 lockid
0009cf08 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0009b344 l     O .rwdata	00000004 lockid
0009cf10 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0008ef60 l     F .text	00000044 OS_InitMisc
0008efa4 l     F .text	0000006c OS_InitRdyList
0008f108 l     F .text	000000e0 OS_InitTCBList
0008ee84 l     F .text	000000dc OS_InitEventList
0008f010 l     F .text	0000007c OS_InitTaskIdle
0008f08c l     F .text	0000007c OS_InitTaskStat
0008f37c l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0009129c l     F .text	00000110 OS_FlagTaskRdy
00090ff4 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0009a26c l     O .rwdata	0000106c jtag_uart_0
0009b2d8 l     O .rwdata	0000002c character_lcd_0
00095c0c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00095ec4 l     F .text	000002c4 altera_avalon_jtag_uart_irq
00096188 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000969a0 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000971f4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00097698 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000977e8 l     F .text	000000f8 alt_file_locked
00097a6c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000988cc l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00098a80 l     F .text	00000040 alt_sim_halt
00088750 g     F .text	00000094 _mprec_log10
0009b392 g     O .rwdata	00000002 OSTaskNameSize
0008883c g     F .text	00000088 __any_on
00089ff4 g     F .text	00000070 _isatty_r
000995f8 g     O .rodata	00000028 __mprec_tinytens
0008cdec g     F .text	000000c8 alt_main
00082d00 g     F .text	000000a0 _puts_r
000ac3e8 g     O .bss	00000100 alt_irq
0008a064 g     F .text	00000078 _lseek_r
00091b90 g     F .text	000000d4 OS_MemInit
0009b3c4 g       *ABS*	00000000 __flash_rwdata_start
00095af0 g     F .text	00000064 OSTimeSet
00096b1c g     F .text	00000034 alt_up_character_lcd_send_cmd
0008ba64 g     F .text	00000088 __eqdf2
0008dadc g     F .text	000006b4 OSEventPendMulti
000ac678 g       *ABS*	00000000 __alt_heap_start
00098074 g     F .text	00000020 OSTaskCreateHook
0009cf98 g     O .bss	00002000 custom_scheduler_stk
00082c88 g     F .text	00000044 printf
0009b36a g     O .rwdata	00000002 OSMboxEn
0008e1e4 g     F .text	0000007c OSIntEnter
00089aac g     F .text	00000068 __sseek
000869c8 g     F .text	000000a4 __sinit
0009864c g     F .text	00000130 __swbuf_r
0009b37a g     O .rwdata	00000002 OSQEn
000876d4 g     F .text	00000084 _setlocale_r
00086ac8 g     F .text	0000009c __sfmoreglue
0008d798 g     F .text	000000d0 __malloc_unlock
000980d0 g     F .text	0000001c OSTaskStatHook
0009cf18 g     O .bss	00000001 OSLockNesting
000802c4 g     F .text	00000044 KEY3_Pressed
0009b3b8 g     O .rwdata	00000002 OSDataSize
0009cf19 g     O .bss	00000001 OSRunning
000881cc g     F .text	000000e0 memmove
00098108 g     F .text	0000001c OSInitHookBegin
0009b3b0 g     O .rwdata	00000002 OSTmrSize
00086ab8 g     F .text	00000010 _cleanup
000888c4 g     F .text	000000bc _Balloc
0009cf1c g     O .bss	00000004 OSIdleCtr
0008bb74 g     F .text	00000088 __gtdf2
00097d40 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
00096aa0 g     F .text	0000007c get_DDRAM_addr
0008f6b0 g     F .text	000002e0 OS_TCBInit
00080000 g     F .entry	0000000c __reset
0009b3b6 g     O .rwdata	00000002 OSTmrWheelTblSize
00080020 g       *ABS*	00000000 __flash_exceptions_start
0009b356 g     O .rwdata	00000002 OSEventSize
0009cf20 g     O .bss	00000001 OSPrioHighRdy
00089f80 g     F .text	00000074 _fstat_r
00098094 g     F .text	00000020 OSTaskDelHook
0009cef0 g     O .bss	00000004 errno
00097d20 g       .text	00000000 OSStartHighRdy
000942a8 g     F .text	00000200 OSTaskCreateExt
00080958 g     F .text	0000003c initialize_task
00090b10 g     F .text	00000068 OSFlagPendGetFlagsRdy
0009b396 g     O .rwdata	00000002 OSTaskStatStkSize
0008fb1c g     F .text	00000334 OSFlagAccept
000922cc g     F .text	000000c8 OSQFlush
00091c64 g     F .text	00000154 OSQAccept
0009cf00 g     O .bss	00000004 alt_argv
000a3304 g       *ABS*	00000000 _gp
000940d4 g     F .text	000001d4 OSTaskCreate
00093b60 g     F .text	00000574 OSTaskChangePrio
0009cf14 g     O .bss	00000004 alt_heapsem
0008f990 g     F .text	0000018c OSDebugInit
000944a8 g     F .text	0000040c OSTaskDel
00080e5c g     F .text	00000cfc custom_scheduler
0009a0ec g     O .rwdata	00000180 alt_fd_list
000a91c4 g     O .bss	00000370 OSFlagTbl
00082948 g     F .text	00000070 custom_delay
0008ec60 g     F .text	000000b8 OS_EventTaskRemove
0009731c g     F .text	00000094 alt_find_dev
0008812c g     F .text	000000a0 memcpy
0009b380 g     O .rwdata	00000002 OSRdyTblSize
00096cb4 g     F .text	0000004c alt_up_character_lcd_write_fd
00086aac g     F .text	0000000c _cleanup_r
0008bd0c g     F .text	000000f8 __floatsidf
00097770 g     F .text	00000078 alt_io_redirect
0008bc84 g     F .text	00000088 __ltdf2
00098b5c g       *ABS*	00000000 __DTOR_END__
00080b0c g     F .text	00000084 init_OS_data_structs
00082da0 g     F .text	00000014 puts
0008d868 g     F .text	00000130 OSEventNameGet
0009b364 g     O .rwdata	00000002 OSFlagMax
000886a0 g     F .text	000000b0 __ratio
0008e260 g     F .text	00000100 OSIntExit
0009b39e g     O .rwdata	00000002 OSTCBSize
0009cf21 g     O .bss	00000001 OSPrioCur
00096404 g     F .text	000002c0 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00082ccc g     F .text	00000034 _printf_r
00082af4 g     F .text	00000008 __udivsi3
0008ca88 g     F .text	000000c4 isatty
0009ef98 g     O .bss	00008000 periodic_task_stk
0009b384 g     O .rwdata	00000002 OSStkWidth
00099508 g     O .rodata	000000c8 __mprec_tens
0009b378 g     O .rwdata	00000002 OSPtrSize
000876b0 g     F .text	00000008 __locale_charset
0009b358 g     O .rwdata	00000002 OSEventTblSize
00097c94 g       .text	00000000 OSCtxSw
0009cee4 g     O .bss	00000004 __malloc_top_pad
0009cf24 g     O .bss	00000004 OSTCBList
0009cef4 g     O .bss	00000004 alt_fd_list_lock
0009b310 g     O .rwdata	00000004 __mb_cur_max
000876b8 g     F .text	0000000c _localeconv_r
00089028 g     F .text	0000003c __i2b
00087094 g     F .text	0000049c __sfvwrite_r
000a9534 g     O .bss	00000c30 OSMemTbl
0009cf28 g     O .bss	00000001 OSTickStepState
00089a34 g     F .text	00000070 _sbrk_r
0009b37c g     O .rwdata	00000002 OSQMax
000aa164 g     O .bss	00000800 OSTaskStatStk
00091778 g     F .text	0000010c OSMemNameGet
0009b35c g     O .rwdata	00000002 OSFlagEn
0008a0dc g     F .text	00000078 _read_r
0009b3a2 g     O .rwdata	00000002 OSTimeTickHookEn
00092830 g     F .text	00000180 OSQPost
000913ac g     F .text	000000ac OS_FlagUnlink
00099cb0 g     O .rwdata	0000000c __lc_ctype
0009b330 g     O .rwdata	00000004 alt_max_fd
0008f23c g     F .text	0000006c OS_MemCopy
0008f2a8 g     F .text	000000d4 OS_Sched
0008c404 g     F .text	00000138 __unpack_d
00089e5c g     F .text	00000110 _fclose_r
00091674 g     F .text	00000104 OSMemGet
00094bdc g     F .text	000001c4 OSTaskNameSet
0008692c g     F .text	00000034 fflush
0009cee8 g     O .bss	00000004 __malloc_max_sbrked_mem
0009cf2c g     O .bss	00000004 OSCtxSwCtr
000980ec g     F .text	0000001c OSTimeTickHook
0008c8c8 g     F .text	000001c0 alt_irq_register
0009b366 g     O .rwdata	00000002 OSFlagNameSize
0008ed18 g     F .text	00000104 OS_EventTaskRemoveMulti
0008b3d4 g     F .text	00000074 __adddf3
0008eb0c g     F .text	00000154 OS_EventTaskWaitMulti
00088580 g     F .text	00000120 __b2d
0009b37e g     O .rwdata	00000002 OSQSize
0008a8e4 g     F .text	00000660 __umoddi3
0008cc98 g     F .text	000000f4 lseek
0009340c g     F .text	0000027c OSSemPend
0009b30c g     O .rwdata	00000004 _global_impure_ptr
000a6f98 g     O .bss	00000010 PBSemaphore
000893d0 g     F .text	000005f4 _realloc_r
0009b368 g     O .rwdata	00000002 OSLowestPrio
000ac678 g       *ABS*	00000000 __bss_end
000975a0 g     F .text	000000f8 alt_iic_isr_register
0009815c g     F .text	00000020 OSTCBInitHook
0009b3ae g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00097b64 g     F .text	00000110 alt_tick
000a6fa8 g     O .bss	0000006c custom_scheduler_tcb
0008a278 g     F .text	0000066c __udivdi3
0009b350 g     O .rwdata	00000002 OSEventEn
000995d0 g     O .rodata	00000028 __mprec_bigtens
000892b0 g     F .text	00000120 __s2b
0009b3aa g     O .rwdata	00000002 OSTmrCfgNameSize
0008bedc g     F .text	00000194 __floatunsidf
000884a0 g     F .text	00000060 __mcmp
00086a94 g     F .text	00000018 __fp_lock_all
00097558 g     F .text	00000048 alt_ic_irq_enabled
000911b8 g     F .text	000000e4 OS_FlagInit
00097acc g     F .text	00000098 alt_alarm_stop
0009b38c g     O .rwdata	00000002 OSTaskIdleStkSize
0009cef8 g     O .bss	00000004 alt_irq_active
00092f98 g     F .text	000000c0 OSSemAccept
000919a4 g     F .text	000000f0 OSMemPut
00091458 g     F .text	0000021c OSMemCreate
0009cf30 g     O .bss	00000004 OSIdleCtrMax
000800ec g     F .exceptions	000000d0 alt_irq_handler
0009a0c4 g     O .rwdata	00000028 alt_dev_null
0009b3a0 g     O .rwdata	00000002 OSTicksPerSec
00080280 g     F .text	00000044 KEY2_Pressed
00096f9c g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00097c94 g       .text	00000000 OSIntCtxSw
00097124 g     F .text	0000001c alt_dcache_flush_all
0008836c g     F .text	00000070 __hi0bits
000a7014 g     O .bss	000001b0 periodic_task_tcb
0008be04 g     F .text	000000d8 __fixdfsi
0009cf34 g     O .bss	00000004 OSTCBFreeList
0009b3c4 g       *ABS*	00000000 __ram_rwdata_end
00093688 g     F .text	0000017c OSSemPendAbort
0009b328 g     O .rwdata	00000008 alt_dev_list
0008d404 g     F .text	00000124 write
00098564 g     F .text	000000e8 _putc_r
0009b3a4 g     O .rwdata	00000002 OSVersionNbr
000998b0 g       *ABS*	00000000 __ram_rodata_end
0008c790 g     F .text	000000d8 fstat
00082b3c g     F .text	0000002c fprintf
0009b34c g     O .rwdata	00000004 OSEndiannessTest
00089190 g     F .text	00000120 __pow5mult
0009ced8 g     O .bss	00000004 __nlocale_changed
00082afc g     F .text	00000008 __umodsi3
0009b35e g     O .rwdata	00000002 OSFlagGrpSize
000ac678 g       *ABS*	00000000 end
00095d8c g     F .text	00000138 altera_avalon_jtag_uart_init
0008f520 g     F .text	000000c8 OS_TaskStat
00098b58 g       *ABS*	00000000 __CTOR_LIST__
00100000 g       *ABS*	00000000 __alt_stack_pointer
00096a10 g     F .text	00000090 alt_avalon_timer_sc_init
0008c070 g     F .text	00000080 __clzsi2
000966c4 g     F .text	000002dc altera_avalon_jtag_uart_write
000869b8 g     F .text	00000004 __sfp_lock_acquire
00088048 g     F .text	000000e4 memchr
0008f1e8 g     F .text	00000054 OS_MemClr
00096bc4 g     F .text	00000078 alt_up_character_lcd_write
00082f14 g     F .text	00001ec4 ___vfprintf_internal_r
00097d64 g     F .text	00000310 OSTaskStkInit
00086d80 g     F .text	00000314 _free_r
0008ceb4 g     F .text	00000258 alt_printf
0008e868 g     F .text	00000194 OS_EventTaskRdy
000988d0 g     F .text	000001b0 __call_exitprocs
0009cf38 g     O .bss	00000001 OSCPUUsage
0009cedc g     O .bss	00000004 __mlocale_changed
0009b31c g     O .rwdata	00000004 __malloc_sbrk_base
000801bc g     F .text	0000003c _start
0009cf68 g     O .bss	00000004 _alt_tick_rate
00092394 g     F .text	00000320 OSQPend
000955a0 g     F .text	0000014c OSTimeDly
00082dd0 g     F .text	00000078 rand
00088c88 g     F .text	0000014c __lshift
0009cf6c g     O .bss	00000004 _alt_nticks
0008d14c g     F .text	00000124 read
00095b88 g     F .text	00000084 alt_sys_init
00096e28 g     F .text	000000b0 alt_up_character_lcd_shift_display
00098798 g     F .text	00000134 __register_exitproc
0009cf39 g     O .bss	00000001 OSTaskCtr
00080cac g     F .text	00000090 periodic_task1
000956ec g     F .text	00000190 OSTimeDlyHMSM
00088dd4 g     F .text	00000254 __multiply
00096ed8 g     F .text	00000090 alt_up_character_lcd_erase_pos
0009629c g     F .text	00000074 altera_avalon_jtag_uart_close
00082b04 g     F .text	00000038 __mulsi3
000998b0 g       *ABS*	00000000 __ram_rwdata_start
00098b5c g       *ABS*	00000000 __ram_rodata_start
0009cf70 g     O .bss	00000028 __malloc_current_mallinfo
0009b352 g     O .rwdata	00000002 OSEventMax
00088980 g     F .text	0000017c __d2b
00093804 g     F .text	00000128 OSSemPost
0008023c g     F .text	00000044 KEY1_Pressed
0008e3ec g     F .text	000000e4 OSSchedUnlock
00095c44 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0009829c g     F .text	00000104 alt_get_fd
0009cf3c g     O .bss	00000004 OSMemFreeList
0008e540 g     F .text	000000ac OSStatInit
00090f20 g     F .text	000000d4 OSFlagQuery
0008c53c g     F .text	000000c8 __fpcmp_parts_d
0009b388 g     O .rwdata	00000002 OSTaskCreateExtEn
00089dec g     F .text	00000070 _close_r
000983ec g     F .text	00000074 memcmp
0008e84c g     F .text	0000001c OS_Dummy
00095cf4 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
000ac678 g       *ABS*	00000000 __alt_stack_base
00095d3c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00082b9c g     F .text	000000ac _fwrite_r
00084dfc g     F .text	0000013c __swsetup_r
000aa964 g     O .bss	000001e0 OSQTbl
0008b80c g     F .text	00000258 __divdf3
00086b64 g     F .text	000000f0 __sfp
000887e4 g     F .text	00000058 __copybits
00099cbc g     O .rwdata	00000408 __malloc_av_
000869c4 g     F .text	00000004 __sinit_lock_release
0009cf40 g     O .bss	00000004 OSTCBHighRdy
0008b448 g     F .text	000003c4 __muldf3
00089b90 g     F .text	00000060 __sread
0009cf44 g     O .bss	00000004 OSQFreeList
0009817c g     F .text	00000120 alt_find_file
00097140 g     F .text	000000b4 alt_dev_llist_insert
0008d690 g     F .text	00000108 __malloc_lock
00082b68 g     F .text	00000034 _fprintf_r
0008d348 g     F .text	000000bc sbrk
0008d998 g     F .text	00000144 OSEventNameSet
00086730 g     F .text	000001fc _fflush_r
00081dbc g     F .text	00000b8c custom_task_create
00089d24 g     F .text	000000c8 _calloc_r
0009cf48 g     O .bss	00000001 OSRdyGrp
0009ced8 g       *ABS*	00000000 __bss_start
000882ac g     F .text	00000098 memset
00080994 g     F .text	00000178 main
0009cf04 g     O .bss	00000004 alt_envp
0009ceec g     O .bss	00000004 __malloc_max_total_mem
00095c9c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0009877c g     F .text	0000001c __swbuf
00082db4 g     F .text	0000001c srand
00099760 g     O .rodata	00000100 OSUnMapTbl
0009b382 g     O .rwdata	00000002 OSSemEn
00096d78 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
00090b78 g     F .text	000003a8 OSFlagPost
00089aa4 g     F .text	00000008 __sclose
00080474 g     F .text	000004e4 alt_ucosii_simple_error_handler
00100000 g       *ABS*	00000000 __alt_heap_limit
00089f6c g     F .text	00000014 fclose
0008e9fc g     F .text	00000110 OS_EventTaskWait
0008f5e8 g     F .text	000000c8 OS_TaskStatStkChk
000ac4e8 g     O .bss	00000190 _atexit0
000948b4 g     F .text	00000170 OSTaskDelReq
0008517c g     F .text	000015b4 _dtoa_r
00087908 g     F .text	00000740 _malloc_r
0009b334 g     O .rwdata	00000004 alt_errno
0008e4d0 g     F .text	00000070 OSStart
0008d634 g     F .text	0000005c __env_unlock
000875f8 g     F .text	000000b8 _fwalk
00094da0 g     F .text	00000218 OSTaskResume
00091a94 g     F .text	000000fc OSMemQuery
0009b394 g     O .rwdata	00000002 OSTaskStatEn
0009b36e g     O .rwdata	00000002 OSMemMax
000929b0 g     F .text	00000188 OSQPostFront
00098460 g     F .text	00000104 putc
00082a34 g     F .text	00000060 __divsi3
0009cf49 g     O .bss	00000003 OSRdyTbl
0009b348 g     O .rwdata	00000002 OSDebugEn
0009962c g     O .rodata	00000014 __thenan_df
00096b84 g     F .text	00000040 alt_up_character_lcd_open_dev
00086c54 g     F .text	0000012c _malloc_trim_r
00098b5c g       *ABS*	00000000 __CTOR_END__
0009b360 g     O .rwdata	00000002 OSFlagNodeSize
0009b3a8 g     O .rwdata	00000002 OSTmrCfgMax
00096b50 g     F .text	00000034 alt_up_character_lcd_init
00089bf0 g     F .text	000000bc strcmp
00091db8 g     F .text	00000214 OSQCreate
00094a24 g     F .text	000001b8 OSTaskNameGet
00098b5c g       *ABS*	00000000 __flash_rodata_start
00092b38 g     F .text	00000234 OSQPostOpt
0008e5ec g     F .text	00000240 OSTimeTick
0009b390 g     O .rwdata	00000002 OSTaskMax
00098b5c g       *ABS*	00000000 __DTOR_LIST__
00093058 g     F .text	00000114 OSSemCreate
0009b3b4 g     O .rwdata	00000002 OSTmrWheelSize
0008baec g     F .text	00000088 __nedf2
0009b38a g     O .rwdata	00000002 OSTaskDelEn
00080000 g       *ABS*	00000000 __alt_mem_sram_0
0009392c g     F .text	00000130 OSSemQuery
00091fcc g     F .text	00000300 OSQDel
000926b4 g     F .text	0000017c OSQPendAbort
00095b54 g     F .text	00000034 alt_irq_init
0008d2d0 g     F .text	00000078 alt_release_fd
000803dc g     F .text	00000054 init_button_irq
00096f68 g     F .text	00000034 alt_up_character_lcd_cursor_off
00099640 g     O .rodata	00000100 __clz_tab
0009cee0 g     O .bss	00000004 _PathLocale
000983a0 g     F .text	00000014 atexit
00089cac g     F .text	00000078 _write_r
0008e360 g     F .text	0000008c OSSchedLock
00087758 g     F .text	0000001c setlocale
0008fe50 g     F .text	0000013c OSFlagCreate
00080b90 g     F .text	0000008c init_create_tasks
0009b308 g     O .rwdata	00000004 _impure_ptr
0009cefc g     O .bss	00000004 alt_argc
000972b8 g     F .text	00000064 _do_dtors
0009b35a g     O .rwdata	00000002 OSEventMultiEn
0008ff8c g     F .text	000002a8 OSFlagDel
0009cf4c g     O .bss	00000004 OSEventFreeList
00080020 g       .exceptions	00000000 alt_irq_entry
00088500 g     F .text	00000080 __ulp
000899c4 g     F .text	00000040 __isinfd
000904cc g     F .text	00000644 OSFlagPend
0009b3a6 g     O .rwdata	00000002 OSTmrEn
00086a7c g     F .text	00000018 __fp_unlock_all
00081b58 g     F .text	00000264 custom_task_del
00080dcc g     F .text	00000090 periodic_task3
0009b320 g     O .rwdata	00000008 alt_fs_list
00080430 g     F .text	00000044 alt_ucosii_check_return_code
0008f3ec g     F .text	00000080 OS_StrCopy
0009b370 g     O .rwdata	00000002 OSMemNameSize
00098124 g     F .text	0000001c OSInitHookEnd
00080020 g       *ABS*	00000000 __ram_exceptions_start
0009b39c g     O .rwdata	00000002 OSTCBPrioTblMax
000876c4 g     F .text	00000010 localeconv
0009b398 g     O .rwdata	00000002 OSTaskStatStkChkEn
000973cc g     F .text	00000050 alt_ic_isr_register
0009b36c g     O .rwdata	00000002 OSMemEn
00082c48 g     F .text	00000040 fwrite
0009b376 g     O .rwdata	00000002 OSMutexEn
0009b3c4 g       *ABS*	00000000 _edata
000801f8 g     F .text	00000044 KEY0_Pressed
000ac678 g       *ABS*	00000000 _end
0009cf50 g     O .bss	00000001 OSIntNesting
000801bc g       *ABS*	00000000 __ram_exceptions_end
00096310 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0009587c g     F .text	00000210 OSTimeDlyResume
00090378 g     F .text	00000154 OSFlagNameSet
00080d3c g     F .text	00000090 periodic_task2
00094fb8 g     F .text	000001fc OSTaskStkChk
000974b8 g     F .text	000000a0 alt_ic_irq_disable
0009b372 g     O .rwdata	00000002 OSMemSize
00089b14 g     F .text	0000007c __swrite
0009b318 g     O .rwdata	00000004 __malloc_trim_threshold
00097c74 g     F .text	00000020 altera_nios2_qsys_irq_init
0009cf54 g     O .bss	00000004 OSTCBCur
000983b4 g     F .text	00000038 exit
0009b374 g     O .rwdata	00000002 OSMemTblSize
00087530 g     F .text	000000c8 _fwalk_reent
00088afc g     F .text	0000018c __mdiff
00082a94 g     F .text	00000060 __modsi3
00100000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
000869bc g     F .text	00000004 __sfp_lock_release
0008e190 g     F .text	00000054 OSInit
000953e0 g     F .text	00000144 OSTaskQuery
00096c3c g     F .text	00000078 alt_up_character_lcd_string
00092eec g     F .text	000000ac OS_QInit
0008f46c g     F .text	00000058 OS_StrLen
00091884 g     F .text	00000120 OSMemNameSet
0009b304 g     O .rwdata	00000004 performance_name
0009b38e g     O .rwdata	00000002 OSTaskProfileEn
0009cf58 g     O .bss	00000004 OSTime
000a71c4 g     O .bss	00002000 initialize_task_stk
000aab44 g     O .bss	00000800 OSTaskIdleStk
00098ac0 g     F .text	0000002c _exit
00089a04 g     F .text	00000030 __isnand
00096fd0 g     F .text	00000154 alt_alarm_start
00090234 g     F .text	00000144 OSFlagNameGet
00095a8c g     F .text	00000064 OSTimeGet
0008a154 g     F .text	00000124 __muldi3
00087774 g     F .text	00000194 __smakebuf_r
00082e48 g     F .text	00000074 strlen
000980b4 g     F .text	0000001c OSTaskSwHook
000978e0 g     F .text	0000018c open
000ab344 g     O .bss	00000b40 OSEventTbl
0008bbfc g     F .text	00000088 __gedf2
0008d10c g     F .text	00000040 alt_putchar
000abe84 g     O .bss	00000510 OSTCBTbl
00093a5c g     F .text	00000104 OSSemSet
000973b0 g     F .text	0000001c alt_icache_flush_all
00096d00 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0009b338 g     O .rwdata	00000004 alt_priority_mask
0009316c g     F .text	000002a0 OSSemDel
0009cf5c g     O .bss	00000004 OSFlagFreeList
0009741c g     F .text	0000009c alt_ic_irq_enable
0009b354 g     O .rwdata	00000002 OSEventNameSize
00084dd8 g     F .text	00000024 __vfprintf_internal
0009cf60 g     O .bss	00000001 OSStatRdy
000ac394 g     O .bss	00000054 OSTCBPrioTbl
0008d588 g     F .text	000000ac __env_lock
0009b39a g     O .rwdata	00000002 OSTaskSwHookEn
0008b354 g     F .text	00000080 __subdf3
000883dc g     F .text	000000c4 __lo0bits
0009b3bc g     O .rwdata	00000008 alt_alarm_list
0009b362 g     O .rwdata	00000002 OSFlagWidth
00097254 g     F .text	00000064 _do_ctors
00080308 g     F .text	000000d4 handle_button_interrupts
0008c604 g     F .text	00000100 close
0009cf0c g     O .bss	00000004 alt_envsem
0009cf64 g     O .bss	00000004 OSIdleCtrRun
0008e82c g     F .text	00000020 OSVersion
0009b3ac g     O .rwdata	00000002 OSTmrCfgWheelSize
0008cbac g     F .text	00000080 alt_load
00095524 g     F .text	0000007c OS_TaskStkClr
0008c0f0 g     F .text	00000314 __pack_d
0009b386 g     O .rwdata	00000002 OSTaskCreateEn
0008ee1c g     F .text	00000068 OS_EventWaitListInit
00098140 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
000869c0 g     F .text	00000004 __sinit_lock_acquire
00089064 g     F .text	0000012c __multadd
00080c1c g     F .text	00000090 periodic_task0
000951b4 g     F .text	0000022c OSTaskSuspend
00088344 g     F .text	00000028 _Bfree
0008f4c4 g     F .text	0000005c OS_TaskIdle
0009b3b2 g     O .rwdata	00000002 OSTmrTblSize
00092d6c g     F .text	00000180 OSQQuery



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08406f14 	ori	at,at,444
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   800fc:	008e1e40 	call	8e1e4 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80100:	0005313a 	rdctl	r2,ipending
   80104:	e0bffc15 	stw	r2,-16(fp)

  return active;
   80108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8010c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   80110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80114:	00800044 	movi	r2,1
   80118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8011c:	e0ffff17 	ldw	r3,-4(fp)
   80120:	e0bffe17 	ldw	r2,-8(fp)
   80124:	1884703a 	and	r2,r3,r2
   80128:	1005003a 	cmpeq	r2,r2,zero
   8012c:	1000161e 	bne	r2,zero,80188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   80130:	e0bffd17 	ldw	r2,-12(fp)
   80134:	00c002f4 	movhi	r3,11
   80138:	18f0fa04 	addi	r3,r3,-15384
   8013c:	100490fa 	slli	r2,r2,3
   80140:	10c5883a 	add	r2,r2,r3
   80144:	11400017 	ldw	r5,0(r2)
   80148:	e0bffd17 	ldw	r2,-12(fp)
   8014c:	00c002f4 	movhi	r3,11
   80150:	18f0fa04 	addi	r3,r3,-15384
   80154:	100490fa 	slli	r2,r2,3
   80158:	10c5883a 	add	r2,r2,r3
   8015c:	10800104 	addi	r2,r2,4
   80160:	11000017 	ldw	r4,0(r2)
   80164:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80168:	0005313a 	rdctl	r2,ipending
   8016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
   80170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   80178:	e0bfff17 	ldw	r2,-4(fp)
   8017c:	1004c03a 	cmpne	r2,r2,zero
   80180:	103fe31e 	bne	r2,zero,80110 <alt_irq_handler+0x24>
   80184:	00000706 	br	801a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80188:	e0bffe17 	ldw	r2,-8(fp)
   8018c:	1085883a 	add	r2,r2,r2
   80190:	e0bffe15 	stw	r2,-8(fp)
      i++;
   80194:	e0bffd17 	ldw	r2,-12(fp)
   80198:	10800044 	addi	r2,r2,1
   8019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a0:	003fde06 	br	8011c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801a4:	008e2600 	call	8e260 <OSIntExit>
}
   801a8:	e037883a 	mov	sp,fp
   801ac:	dfc00117 	ldw	ra,4(sp)
   801b0:	df000017 	ldw	fp,0(sp)
   801b4:	dec00204 	addi	sp,sp,8
   801b8:	f800283a 	ret

Disassembly of section .text:

000801bc <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801bc:	06c00434 	movhi	sp,16
    ori sp, sp, %lo(__alt_stack_pointer)
   801c0:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   801c4:	068002b4 	movhi	gp,10
    ori gp, gp, %lo(_gp)
   801c8:	d68cc114 	ori	gp,gp,13060
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801cc:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   801d0:	10b3b614 	ori	r2,r2,52952

    movhi r3, %hi(__bss_end)
   801d4:	00c002b4 	movhi	r3,10
    ori r3, r3, %lo(__bss_end)
   801d8:	18f19e14 	ori	r3,r3,50808

    beq r2, r3, 1f
   801dc:	10c00326 	beq	r2,r3,801ec <_start+0x30>

0:
    stw zero, (r2)
   801e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801e8:	10fffd36 	bltu	r2,r3,801e0 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801ec:	008cbac0 	call	8cbac <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801f0:	008cdec0 	call	8cdec <alt_main>

000801f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801f4:	003fff06 	br	801f4 <alt_after_alt_main>

000801f8 <KEY0_Pressed>:

// Semaphore from uCOS
extern OS_EVENT *PBSemaphore[];

// Function for post semaphore when PB0 is pressed
void KEY0_Pressed() {
   801f8:	defffd04 	addi	sp,sp,-12
   801fc:	dfc00215 	stw	ra,8(sp)
   80200:	df000115 	stw	fp,4(sp)
   80204:	df000104 	addi	fp,sp,4
	INT8U return_code = OS_NO_ERR;
   80208:	e03fff05 	stb	zero,-4(fp)

	return_code = OSSemPost(PBSemaphore[0]);
   8020c:	008002b4 	movhi	r2,10
   80210:	109be604 	addi	r2,r2,28568
   80214:	11000017 	ldw	r4,0(r2)
   80218:	00938040 	call	93804 <OSSemPost>
   8021c:	e0bfff05 	stb	r2,-4(fp)
  	alt_ucosii_check_return_code(return_code);
   80220:	e13fff03 	ldbu	r4,-4(fp)
   80224:	00804300 	call	80430 <alt_ucosii_check_return_code>
}
   80228:	e037883a 	mov	sp,fp
   8022c:	dfc00117 	ldw	ra,4(sp)
   80230:	df000017 	ldw	fp,0(sp)
   80234:	dec00204 	addi	sp,sp,8
   80238:	f800283a 	ret

0008023c <KEY1_Pressed>:

// Function for post semaphore when PB1 is pressed
void KEY1_Pressed() {
   8023c:	defffd04 	addi	sp,sp,-12
   80240:	dfc00215 	stw	ra,8(sp)
   80244:	df000115 	stw	fp,4(sp)
   80248:	df000104 	addi	fp,sp,4
	INT8U return_code = OS_NO_ERR;
   8024c:	e03fff05 	stb	zero,-4(fp)

	return_code = OSSemPost(PBSemaphore[1]);
   80250:	008002b4 	movhi	r2,10
   80254:	109be604 	addi	r2,r2,28568
   80258:	11000117 	ldw	r4,4(r2)
   8025c:	00938040 	call	93804 <OSSemPost>
   80260:	e0bfff05 	stb	r2,-4(fp)
  	alt_ucosii_check_return_code(return_code);
   80264:	e13fff03 	ldbu	r4,-4(fp)
   80268:	00804300 	call	80430 <alt_ucosii_check_return_code>
}
   8026c:	e037883a 	mov	sp,fp
   80270:	dfc00117 	ldw	ra,4(sp)
   80274:	df000017 	ldw	fp,0(sp)
   80278:	dec00204 	addi	sp,sp,8
   8027c:	f800283a 	ret

00080280 <KEY2_Pressed>:

// Function for post semaphore when PB2 is pressed
void KEY2_Pressed() {
   80280:	defffd04 	addi	sp,sp,-12
   80284:	dfc00215 	stw	ra,8(sp)
   80288:	df000115 	stw	fp,4(sp)
   8028c:	df000104 	addi	fp,sp,4
	INT8U return_code = OS_NO_ERR;
   80290:	e03fff05 	stb	zero,-4(fp)

	return_code = OSSemPost(PBSemaphore[2]);
   80294:	008002b4 	movhi	r2,10
   80298:	109be604 	addi	r2,r2,28568
   8029c:	11000217 	ldw	r4,8(r2)
   802a0:	00938040 	call	93804 <OSSemPost>
   802a4:	e0bfff05 	stb	r2,-4(fp)
  	alt_ucosii_check_return_code(return_code);
   802a8:	e13fff03 	ldbu	r4,-4(fp)
   802ac:	00804300 	call	80430 <alt_ucosii_check_return_code>
}
   802b0:	e037883a 	mov	sp,fp
   802b4:	dfc00117 	ldw	ra,4(sp)
   802b8:	df000017 	ldw	fp,0(sp)
   802bc:	dec00204 	addi	sp,sp,8
   802c0:	f800283a 	ret

000802c4 <KEY3_Pressed>:

// Function for post semaphore when PB3 is pressed
void KEY3_Pressed() {
   802c4:	defffd04 	addi	sp,sp,-12
   802c8:	dfc00215 	stw	ra,8(sp)
   802cc:	df000115 	stw	fp,4(sp)
   802d0:	df000104 	addi	fp,sp,4
	INT8U return_code = OS_NO_ERR;
   802d4:	e03fff05 	stb	zero,-4(fp)

	return_code = OSSemPost(PBSemaphore[3]);
   802d8:	008002b4 	movhi	r2,10
   802dc:	109be604 	addi	r2,r2,28568
   802e0:	11000317 	ldw	r4,12(r2)
   802e4:	00938040 	call	93804 <OSSemPost>
   802e8:	e0bfff05 	stb	r2,-4(fp)
  	alt_ucosii_check_return_code(return_code);
   802ec:	e13fff03 	ldbu	r4,-4(fp)
   802f0:	00804300 	call	80430 <alt_ucosii_check_return_code>
}
   802f4:	e037883a 	mov	sp,fp
   802f8:	dfc00117 	ldw	ra,4(sp)
   802fc:	df000017 	ldw	fp,0(sp)
   80300:	dec00204 	addi	sp,sp,8
   80304:	f800283a 	ret

00080308 <handle_button_interrupts>:
// ISR when any PB is pressed
void handle_button_interrupts()
{
   80308:	defffd04 	addi	sp,sp,-12
   8030c:	dfc00215 	stw	ra,8(sp)
   80310:	df000115 	stw	fp,4(sp)
   80314:	df000104 	addi	fp,sp,4
	OSIntEnter();
   80318:	008e1e40 	call	8e1e4 <OSIntEnter>

    outport(LED_GREEN_O_BASE,get_pio_edge_cap(PUSH_BUTTON_I_BASE)*get_pio_edge_cap(PUSH_BUTTON_I_BASE));
   8031c:	00800434 	movhi	r2,16
   80320:	10841f04 	addi	r2,r2,4220
   80324:	11000037 	ldwio	r4,0(r2)
   80328:	00800434 	movhi	r2,16
   8032c:	10841f04 	addi	r2,r2,4220
   80330:	11400037 	ldwio	r5,0(r2)
   80334:	0082b040 	call	82b04 <__mulsi3>
   80338:	1007883a 	mov	r3,r2
   8033c:	00800434 	movhi	r2,16
   80340:	10842404 	addi	r2,r2,4240
   80344:	10c00035 	stwio	r3,0(r2)
    switch(get_pio_edge_cap(PUSH_BUTTON_I_BASE)) {
   80348:	00800434 	movhi	r2,16
   8034c:	10841f04 	addi	r2,r2,4220
   80350:	10800037 	ldwio	r2,0(r2)
   80354:	e0bfff15 	stw	r2,-4(fp)
   80358:	e0ffff17 	ldw	r3,-4(fp)
   8035c:	188000a0 	cmpeqi	r2,r3,2
   80360:	1000101e 	bne	r2,zero,803a4 <handle_button_interrupts+0x9c>
   80364:	e0ffff17 	ldw	r3,-4(fp)
   80368:	188000c8 	cmpgei	r2,r3,3
   8036c:	1000041e 	bne	r2,zero,80380 <handle_button_interrupts+0x78>
   80370:	e0ffff17 	ldw	r3,-4(fp)
   80374:	18800060 	cmpeqi	r2,r3,1
   80378:	1000081e 	bne	r2,zero,8039c <handle_button_interrupts+0x94>
   8037c:	00000e06 	br	803b8 <handle_button_interrupts+0xb0>
   80380:	e0ffff17 	ldw	r3,-4(fp)
   80384:	18800120 	cmpeqi	r2,r3,4
   80388:	1000081e 	bne	r2,zero,803ac <handle_button_interrupts+0xa4>
   8038c:	e0ffff17 	ldw	r3,-4(fp)
   80390:	18800220 	cmpeqi	r2,r3,8
   80394:	1000071e 	bne	r2,zero,803b4 <handle_button_interrupts+0xac>
   80398:	00000706 	br	803b8 <handle_button_interrupts+0xb0>
    case 1: KEY0_Pressed(); break;
   8039c:	00801f80 	call	801f8 <KEY0_Pressed>
   803a0:	00000506 	br	803b8 <handle_button_interrupts+0xb0>
    case 2: KEY1_Pressed(); break;
   803a4:	008023c0 	call	8023c <KEY1_Pressed>
   803a8:	00000306 	br	803b8 <handle_button_interrupts+0xb0>
    case 4: KEY2_Pressed(); break;
   803ac:	00802800 	call	80280 <KEY2_Pressed>
   803b0:	00000106 	br	803b8 <handle_button_interrupts+0xb0>
    case 8: KEY3_Pressed(); break;
   803b4:	00802c40 	call	802c4 <KEY3_Pressed>
    }
    set_pio_edge_cap(PUSH_BUTTON_I_BASE,0x0);
   803b8:	00800434 	movhi	r2,16
   803bc:	10841f04 	addi	r2,r2,4220
   803c0:	10000035 	stwio	zero,0(r2)

	OSIntExit();
   803c4:	008e2600 	call	8e260 <OSIntExit>
}
   803c8:	e037883a 	mov	sp,fp
   803cc:	dfc00117 	ldw	ra,4(sp)
   803d0:	df000017 	ldw	fp,0(sp)
   803d4:	dec00204 	addi	sp,sp,8
   803d8:	f800283a 	ret

000803dc <init_button_irq>:

// Function for initializing the ISR of the PBs
// The PBs are setup to generate interrupt on falling edge,
// and the interrupt is captured when the edge comes
void init_button_irq() {
   803dc:	defffe04 	addi	sp,sp,-8
   803e0:	dfc00115 	stw	ra,4(sp)
   803e4:	df000015 	stw	fp,0(sp)
   803e8:	d839883a 	mov	fp,sp
  // Enable all 4 button interrupts
  set_pio_irq_mask(PUSH_BUTTON_I_BASE, BUTTON_INT_MASK);
   803ec:	00800434 	movhi	r2,16
   803f0:	10841e04 	addi	r2,r2,4216
   803f4:	00c003c4 	movi	r3,15
   803f8:	10c00035 	stwio	r3,0(r2)

  // Reset the edge capture register
  set_pio_edge_cap(PUSH_BUTTON_I_BASE, 0x0);
   803fc:	00800434 	movhi	r2,16
   80400:	10841f04 	addi	r2,r2,4220
   80404:	10000035 	stwio	zero,0(r2)

  // Register the interrupt handler
  alt_irq_register( PUSH_BUTTON_I_IRQ, NULL, (void*)handle_button_interrupts );
   80408:	01000084 	movi	r4,2
   8040c:	000b883a 	mov	r5,zero
   80410:	01800234 	movhi	r6,8
   80414:	3180c204 	addi	r6,r6,776
   80418:	008c8c80 	call	8c8c8 <alt_irq_register>
}
   8041c:	e037883a 	mov	sp,fp
   80420:	dfc00117 	ldw	ra,4(sp)
   80424:	df000017 	ldw	fp,0(sp)
   80428:	dec00204 	addi	sp,sp,8
   8042c:	f800283a 	ret

00080430 <alt_ucosii_check_return_code>:
 */
 

 
void alt_ucosii_check_return_code(INT8U return_code)
{
   80430:	defffd04 	addi	sp,sp,-12
   80434:	dfc00215 	stw	ra,8(sp)
   80438:	df000115 	stw	fp,4(sp)
   8043c:	df000104 	addi	fp,sp,4
   80440:	e13fff05 	stb	r4,-4(fp)
  if(return_code != OS_NO_ERR)
   80444:	e0bfff03 	ldbu	r2,-4(fp)
   80448:	1005003a 	cmpeq	r2,r2,zero
   8044c:	1000041e 	bne	r2,zero,80460 <alt_ucosii_check_return_code+0x30>
  {
    OSSchedLock();  /* Disable Task Switching but still service other IRQs */
   80450:	008e3600 	call	8e360 <OSSchedLock>
    alt_ucosii_simple_error_handler(return_code);
   80454:	e13fff03 	ldbu	r4,-4(fp)
   80458:	00804740 	call	80474 <alt_ucosii_simple_error_handler>
    OSSchedUnlock(); /* Enable Task Switching */
   8045c:	008e3ec0 	call	8e3ec <OSSchedUnlock>
  }
}
   80460:	e037883a 	mov	sp,fp
   80464:	dfc00117 	ldw	ra,4(sp)
   80468:	df000017 	ldw	fp,0(sp)
   8046c:	dec00204 	addi	sp,sp,8
   80470:	f800283a 	ret

00080474 <alt_ucosii_simple_error_handler>:
 * controls the flow that is taken from different errors occurring at different 
 * locations in the application code.
 */

void alt_ucosii_simple_error_handler(INT8U return_code)
{
   80474:	defffc04 	addi	sp,sp,-16
   80478:	dfc00315 	stw	ra,12(sp)
   8047c:	df000215 	stw	fp,8(sp)
   80480:	df000204 	addi	fp,sp,8
   80484:	e13ffe05 	stb	r4,-8(fp)
  printf("[Program Error]: See STDERR\n");
   80488:	010002b4 	movhi	r4,10
   8048c:	2122d704 	addi	r4,r4,-29860
   80490:	0082da00 	call	82da0 <puts>
  switch (return_code) {
   80494:	e0bffe03 	ldbu	r2,-8(fp)
   80498:	e0bfff15 	stw	r2,-4(fp)
   8049c:	e0ffff17 	ldw	r3,-4(fp)
   804a0:	18801968 	cmpgeui	r2,r3,101
   804a4:	10011e1e 	bne	r2,zero,80920 <alt_ucosii_simple_error_handler+0x4ac>
   804a8:	e13fff17 	ldw	r4,-4(fp)
   804ac:	e13fff17 	ldw	r4,-4(fp)
   804b0:	2105883a 	add	r2,r4,r4
   804b4:	1087883a 	add	r3,r2,r2
   804b8:	00800234 	movhi	r2,8
   804bc:	10813304 	addi	r2,r2,1228
   804c0:	1885883a 	add	r2,r3,r2
   804c4:	10800017 	ldw	r2,0(r2)
   804c8:	1000683a 	jmp	r2
   804cc:	00080920 	cmpeqi	zero,zero,8228
   804d0:	00080740 	call	8074 <OSCtxSw_SWITCH_PC+0x8034>
   804d4:	000807e0 	cmpeqi	zero,zero,8223
   804d8:	00080790 	cmplti	zero,zero,8222
   804dc:	00080768 	cmpgeui	zero,zero,8221
   804e0:	00080920 	cmpeqi	zero,zero,8228
   804e4:	00080920 	cmpeqi	zero,zero,8228
   804e8:	00080920 	cmpeqi	zero,zero,8228
   804ec:	00080920 	cmpeqi	zero,zero,8228
   804f0:	00080920 	cmpeqi	zero,zero,8228
   804f4:	000807b8 	rdprs	zero,zero,8222
   804f8:	00080920 	cmpeqi	zero,zero,8228
   804fc:	00080920 	cmpeqi	zero,zero,8228
   80500:	00080920 	cmpeqi	zero,zero,8228
   80504:	00080920 	cmpeqi	zero,zero,8228
   80508:	00080920 	cmpeqi	zero,zero,8228
   8050c:	00080920 	cmpeqi	zero,zero,8228
   80510:	00080920 	cmpeqi	zero,zero,8228
   80514:	00080920 	cmpeqi	zero,zero,8228
   80518:	00080920 	cmpeqi	zero,zero,8228
   8051c:	00080718 	cmpnei	zero,zero,8220
   80520:	00080920 	cmpeqi	zero,zero,8228
   80524:	00080920 	cmpeqi	zero,zero,8228
   80528:	00080920 	cmpeqi	zero,zero,8228
   8052c:	00080920 	cmpeqi	zero,zero,8228
   80530:	00080920 	cmpeqi	zero,zero,8228
   80534:	00080920 	cmpeqi	zero,zero,8228
   80538:	00080920 	cmpeqi	zero,zero,8228
   8053c:	00080920 	cmpeqi	zero,zero,8228
   80540:	00080920 	cmpeqi	zero,zero,8228
   80544:	00080880 	call	8088 <OSCtxSw_SWITCH_PC+0x8048>
   80548:	00080920 	cmpeqi	zero,zero,8228
   8054c:	00080920 	cmpeqi	zero,zero,8228
   80550:	00080920 	cmpeqi	zero,zero,8228
   80554:	00080920 	cmpeqi	zero,zero,8228
   80558:	00080920 	cmpeqi	zero,zero,8228
   8055c:	00080920 	cmpeqi	zero,zero,8228
   80560:	00080920 	cmpeqi	zero,zero,8228
   80564:	00080920 	cmpeqi	zero,zero,8228
   80568:	00080920 	cmpeqi	zero,zero,8228
   8056c:	00080660 	cmpeqi	zero,zero,8217
   80570:	00080920 	cmpeqi	zero,zero,8228
   80574:	00080688 	cmpgei	zero,zero,8218
   80578:	00080920 	cmpeqi	zero,zero,8228
   8057c:	00080920 	cmpeqi	zero,zero,8228
   80580:	00080920 	cmpeqi	zero,zero,8228
   80584:	00080920 	cmpeqi	zero,zero,8228
   80588:	00080920 	cmpeqi	zero,zero,8228
   8058c:	00080920 	cmpeqi	zero,zero,8228
   80590:	00080920 	cmpeqi	zero,zero,8228
   80594:	00080920 	cmpeqi	zero,zero,8228
   80598:	00080920 	cmpeqi	zero,zero,8228
   8059c:	00080920 	cmpeqi	zero,zero,8228
   805a0:	00080920 	cmpeqi	zero,zero,8228
   805a4:	00080920 	cmpeqi	zero,zero,8228
   805a8:	00080920 	cmpeqi	zero,zero,8228
   805ac:	00080920 	cmpeqi	zero,zero,8228
   805b0:	00080920 	cmpeqi	zero,zero,8228
   805b4:	00080920 	cmpeqi	zero,zero,8228
   805b8:	00080920 	cmpeqi	zero,zero,8228
   805bc:	00080920 	cmpeqi	zero,zero,8228
   805c0:	00080830 	cmpltui	zero,zero,8224
   805c4:	00080808 	cmpgei	zero,zero,8224
   805c8:	00080920 	cmpeqi	zero,zero,8228
   805cc:	00080858 	cmpnei	zero,zero,8225
   805d0:	00080920 	cmpeqi	zero,zero,8228
   805d4:	000806d0 	cmplti	zero,zero,8219
   805d8:	00080920 	cmpeqi	zero,zero,8228
   805dc:	00080920 	cmpeqi	zero,zero,8228
   805e0:	00080920 	cmpeqi	zero,zero,8228
   805e4:	00080920 	cmpeqi	zero,zero,8228
   805e8:	00080920 	cmpeqi	zero,zero,8228
   805ec:	00080920 	cmpeqi	zero,zero,8228
   805f0:	00080920 	cmpeqi	zero,zero,8228
   805f4:	00080920 	cmpeqi	zero,zero,8228
   805f8:	00080920 	cmpeqi	zero,zero,8228
   805fc:	00080920 	cmpeqi	zero,zero,8228
   80600:	00080920 	cmpeqi	zero,zero,8228
   80604:	00080920 	cmpeqi	zero,zero,8228
   80608:	00080920 	cmpeqi	zero,zero,8228
   8060c:	00080920 	cmpeqi	zero,zero,8228
   80610:	00080920 	cmpeqi	zero,zero,8228
   80614:	00080920 	cmpeqi	zero,zero,8228
   80618:	00080920 	cmpeqi	zero,zero,8228
   8061c:	00080920 	cmpeqi	zero,zero,8228
   80620:	00080920 	cmpeqi	zero,zero,8228
   80624:	00080920 	cmpeqi	zero,zero,8228
   80628:	00080920 	cmpeqi	zero,zero,8228
   8062c:	00080920 	cmpeqi	zero,zero,8228
   80630:	00080920 	cmpeqi	zero,zero,8228
   80634:	00080920 	cmpeqi	zero,zero,8228
   80638:	00080920 	cmpeqi	zero,zero,8228
   8063c:	00080920 	cmpeqi	zero,zero,8228
   80640:	000808d0 	cmplti	zero,zero,8227
   80644:	00080920 	cmpeqi	zero,zero,8228
   80648:	00080920 	cmpeqi	zero,zero,8228
   8064c:	000808f8 	rdprs	zero,zero,8227
   80650:	00080920 	cmpeqi	zero,zero,8228
   80654:	00080920 	cmpeqi	zero,zero,8228
   80658:	00080920 	cmpeqi	zero,zero,8228
   8065c:	000808a8 	cmpgeui	zero,zero,8226
    case OS_PRIO_EXIST:
      fprintf(stderr, "Attempted to assign a task priority that is aready in use.\n");
   80660:	008002b4 	movhi	r2,10
   80664:	10acc204 	addi	r2,r2,-19704
   80668:	10800017 	ldw	r2,0(r2)
   8066c:	11c00317 	ldw	r7,12(r2)
   80670:	010002b4 	movhi	r4,10
   80674:	2122de04 	addi	r4,r4,-29832
   80678:	01400044 	movi	r5,1
   8067c:	01800ec4 	movi	r6,59
   80680:	0082c480 	call	82c48 <fwrite>
      break;
   80684:	0000af06 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_PRIO_INVALID:
      fprintf(stderr, "Specified a task priority higher than the allowed maximum.\n");
   80688:	008002b4 	movhi	r2,10
   8068c:	10acc204 	addi	r2,r2,-19704
   80690:	10800017 	ldw	r2,0(r2)
   80694:	11c00317 	ldw	r7,12(r2)
   80698:	010002b4 	movhi	r4,10
   8069c:	2122ed04 	addi	r4,r4,-29772
   806a0:	01400044 	movi	r5,1
   806a4:	01800ec4 	movi	r6,59
   806a8:	0082c480 	call	82c48 <fwrite>
      fprintf(stderr, "Task can not be assigned a priority higher than %d\n",OS_LOWEST_PRIO);
   806ac:	008002b4 	movhi	r2,10
   806b0:	10acc204 	addi	r2,r2,-19704
   806b4:	10800017 	ldw	r2,0(r2)
   806b8:	11000317 	ldw	r4,12(r2)
   806bc:	014002b4 	movhi	r5,10
   806c0:	2962fc04 	addi	r5,r5,-29712
   806c4:	01800504 	movi	r6,20
   806c8:	0082b3c0 	call	82b3c <fprintf>
      break;
   806cc:	00009d06 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_NO_MORE_TCB:
      fprintf(stderr, "Task Control Blocks have been exhausted\n");
   806d0:	008002b4 	movhi	r2,10
   806d4:	10acc204 	addi	r2,r2,-19704
   806d8:	10800017 	ldw	r2,0(r2)
   806dc:	11c00317 	ldw	r7,12(r2)
   806e0:	010002b4 	movhi	r4,10
   806e4:	21230904 	addi	r4,r4,-29660
   806e8:	01400044 	movi	r5,1
   806ec:	01800a04 	movi	r6,40
   806f0:	0082c480 	call	82c48 <fwrite>
      fprintf(stderr, "The current max number of task is %d\n",OS_MAX_TASKS);
   806f4:	008002b4 	movhi	r2,10
   806f8:	10acc204 	addi	r2,r2,-19704
   806fc:	10800017 	ldw	r2,0(r2)
   80700:	11000317 	ldw	r4,12(r2)
   80704:	014002b4 	movhi	r5,10
   80708:	29631404 	addi	r5,r5,-29616
   8070c:	01800284 	movi	r6,10
   80710:	0082b3c0 	call	82b3c <fprintf>
      break;
   80714:	00008b06 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_MBOX_FULL:
      fprintf(stderr, "Attempted a Post to a Mailbox that already contains a message\n");
   80718:	008002b4 	movhi	r2,10
   8071c:	10acc204 	addi	r2,r2,-19704
   80720:	10800017 	ldw	r2,0(r2)
   80724:	11c00317 	ldw	r7,12(r2)
   80728:	010002b4 	movhi	r4,10
   8072c:	21231e04 	addi	r4,r4,-29576
   80730:	01400044 	movi	r5,1
   80734:	01800f84 	movi	r6,62
   80738:	0082c480 	call	82c48 <fwrite>
      break;
   8073c:	00008106 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_ERR_EVENT_TYPE:
      fprintf(stderr, "Attempted to access a resource that doesn't match the required data type\n");
   80740:	008002b4 	movhi	r2,10
   80744:	10acc204 	addi	r2,r2,-19704
   80748:	10800017 	ldw	r2,0(r2)
   8074c:	11c00317 	ldw	r7,12(r2)
   80750:	010002b4 	movhi	r4,10
   80754:	21232e04 	addi	r4,r4,-29512
   80758:	01400044 	movi	r5,1
   8075c:	01801244 	movi	r6,73
   80760:	0082c480 	call	82c48 <fwrite>
      break;
   80764:	00007706 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_ERR_PEVENT_NULL:
      fprintf(stderr, "Attempting access a resource that is pointing to NULL\n");
   80768:	008002b4 	movhi	r2,10
   8076c:	10acc204 	addi	r2,r2,-19704
   80770:	10800017 	ldw	r2,0(r2)
   80774:	11c00317 	ldw	r7,12(r2)
   80778:	010002b4 	movhi	r4,10
   8077c:	21234104 	addi	r4,r4,-29436
   80780:	01400044 	movi	r5,1
   80784:	01800d84 	movi	r6,54
   80788:	0082c480 	call	82c48 <fwrite>
      break;
   8078c:	00006d06 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_ERR_POST_NULL_PTR:
      fprintf(stderr, "Attempted to Post a NULL to a resource. \n");
   80790:	008002b4 	movhi	r2,10
   80794:	10acc204 	addi	r2,r2,-19704
   80798:	10800017 	ldw	r2,0(r2)
   8079c:	11c00317 	ldw	r7,12(r2)
   807a0:	010002b4 	movhi	r4,10
   807a4:	21234f04 	addi	r4,r4,-29380
   807a8:	01400044 	movi	r5,1
   807ac:	01800a44 	movi	r6,41
   807b0:	0082c480 	call	82c48 <fwrite>
      break;
   807b4:	00006306 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_TIMEOUT:
      fprintf(stderr, "Resource not received in specified time\n");
   807b8:	008002b4 	movhi	r2,10
   807bc:	10acc204 	addi	r2,r2,-19704
   807c0:	10800017 	ldw	r2,0(r2)
   807c4:	11c00317 	ldw	r7,12(r2)
   807c8:	010002b4 	movhi	r4,10
   807cc:	21235a04 	addi	r4,r4,-29336
   807d0:	01400044 	movi	r5,1
   807d4:	01800a04 	movi	r6,40
   807d8:	0082c480 	call	82c48 <fwrite>
      break;
   807dc:	00005906 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_ERR_PEND_ISR:
      fprintf(stderr, "Attempting to pending for a resource in an ISR\n");
   807e0:	008002b4 	movhi	r2,10
   807e4:	10acc204 	addi	r2,r2,-19704
   807e8:	10800017 	ldw	r2,0(r2)
   807ec:	11c00317 	ldw	r7,12(r2)
   807f0:	010002b4 	movhi	r4,10
   807f4:	21236504 	addi	r4,r4,-29292
   807f8:	01400044 	movi	r5,1
   807fc:	01800bc4 	movi	r6,47
   80800:	0082c480 	call	82c48 <fwrite>
      break;
   80804:	00004f06 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_TASK_DEL_IDLE:
      fprintf(stderr, "Attempted to delete the IDLE task\n");
   80808:	008002b4 	movhi	r2,10
   8080c:	10acc204 	addi	r2,r2,-19704
   80810:	10800017 	ldw	r2,0(r2)
   80814:	11c00317 	ldw	r7,12(r2)
   80818:	010002b4 	movhi	r4,10
   8081c:	21237104 	addi	r4,r4,-29244
   80820:	01400044 	movi	r5,1
   80824:	01800884 	movi	r6,34
   80828:	0082c480 	call	82c48 <fwrite>
      break;
   8082c:	00004506 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_TASK_DEL_ERR:
      fprintf(stderr, "Attempted to delete a task that does not exist\n");
   80830:	008002b4 	movhi	r2,10
   80834:	10acc204 	addi	r2,r2,-19704
   80838:	10800017 	ldw	r2,0(r2)
   8083c:	11c00317 	ldw	r7,12(r2)
   80840:	010002b4 	movhi	r4,10
   80844:	21237a04 	addi	r4,r4,-29208
   80848:	01400044 	movi	r5,1
   8084c:	01800bc4 	movi	r6,47
   80850:	0082c480 	call	82c48 <fwrite>
      break;
   80854:	00003b06 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_TASK_DEL_ISR:
      fprintf(stderr, "Attempted to delete a task from an ISR\n");
   80858:	008002b4 	movhi	r2,10
   8085c:	10acc204 	addi	r2,r2,-19704
   80860:	10800017 	ldw	r2,0(r2)
   80864:	11c00317 	ldw	r7,12(r2)
   80868:	010002b4 	movhi	r4,10
   8086c:	21238604 	addi	r4,r4,-29160
   80870:	01400044 	movi	r5,1
   80874:	018009c4 	movi	r6,39
   80878:	0082c480 	call	82c48 <fwrite>
      break;
   8087c:	00003106 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_Q_FULL:
      fprintf(stderr, "Attempted to post to a full message queue\n");
   80880:	008002b4 	movhi	r2,10
   80884:	10acc204 	addi	r2,r2,-19704
   80888:	10800017 	ldw	r2,0(r2)
   8088c:	11c00317 	ldw	r7,12(r2)
   80890:	010002b4 	movhi	r4,10
   80894:	21239004 	addi	r4,r4,-29120
   80898:	01400044 	movi	r5,1
   8089c:	01800a84 	movi	r6,42
   808a0:	0082c480 	call	82c48 <fwrite>
      break;
   808a4:	00002706 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_ERR_NOT_MUTEX_OWNER:
      fprintf(stderr, "Attempted to post a mutex that is not owned by the task\n");
   808a8:	008002b4 	movhi	r2,10
   808ac:	10acc204 	addi	r2,r2,-19704
   808b0:	10800017 	ldw	r2,0(r2)
   808b4:	11c00317 	ldw	r7,12(r2)
   808b8:	010002b4 	movhi	r4,10
   808bc:	21239b04 	addi	r4,r4,-29076
   808c0:	01400044 	movi	r5,1
   808c4:	01800e04 	movi	r6,56
   808c8:	0082c480 	call	82c48 <fwrite>
      break;
   808cc:	00001d06 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_MEM_NO_FREE_BLKS:
      fprintf(stderr, "the memory partition doesnt contain any more memory blocks to allocate\n");
   808d0:	008002b4 	movhi	r2,10
   808d4:	10acc204 	addi	r2,r2,-19704
   808d8:	10800017 	ldw	r2,0(r2)
   808dc:	11c00317 	ldw	r7,12(r2)
   808e0:	010002b4 	movhi	r4,10
   808e4:	2123aa04 	addi	r4,r4,-29016
   808e8:	01400044 	movi	r5,1
   808ec:	018011c4 	movi	r6,71
   808f0:	0082c480 	call	82c48 <fwrite>
      break;
   808f4:	00001306 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_MEM_INVALID_PMEM:
      fprintf(stderr, "pmem is a NULL pointer\n");
   808f8:	008002b4 	movhi	r2,10
   808fc:	10acc204 	addi	r2,r2,-19704
   80900:	10800017 	ldw	r2,0(r2)
   80904:	11c00317 	ldw	r7,12(r2)
   80908:	010002b4 	movhi	r4,10
   8090c:	2123bc04 	addi	r4,r4,-28944
   80910:	01400044 	movi	r5,1
   80914:	018005c4 	movi	r6,23
   80918:	0082c480 	call	82c48 <fwrite>
      break;
   8091c:	00000906 	br	80944 <alt_ucosii_simple_error_handler+0x4d0>
    default:
      fprintf(stderr, "Unknown Error\n");
   80920:	008002b4 	movhi	r2,10
   80924:	10acc204 	addi	r2,r2,-19704
   80928:	10800017 	ldw	r2,0(r2)
   8092c:	11c00317 	ldw	r7,12(r2)
   80930:	010002b4 	movhi	r4,10
   80934:	2123c204 	addi	r4,r4,-28920
   80938:	01400044 	movi	r5,1
   8093c:	01800384 	movi	r6,14
   80940:	0082c480 	call	82c48 <fwrite>
      break;
  }
//  fprintf(stderr, "Program is terminating.\n");
//  exit(0);
}
   80944:	e037883a 	mov	sp,fp
   80948:	dfc00117 	ldw	ra,4(sp)
   8094c:	df000017 	ldw	fp,0(sp)
   80950:	dec00204 	addi	sp,sp,8
   80954:	f800283a 	ret

00080958 <initialize_task>:
// Local function prototypes
int init_OS_data_structs(void);
int init_create_tasks(void);

// Initialization task for uCOS
void initialize_task(void* pdata) {
   80958:	defffc04 	addi	sp,sp,-16
   8095c:	dfc00315 	stw	ra,12(sp)
   80960:	df000215 	stw	fp,8(sp)
   80964:	df000204 	addi	fp,sp,8
   80968:	e13fff15 	stw	r4,-4(fp)
	INT8U return_code = OS_NO_ERR;
   8096c:	e03ffe05 	stb	zero,-8(fp)

	// Initialize statistic counters in OS
	OSStatInit();
   80970:	008e5400 	call	8e540 <OSStatInit>

	// create os data structures
	init_OS_data_structs();
   80974:	0080b0c0 	call	80b0c <init_OS_data_structs>

	// create the tasks
	init_create_tasks();
   80978:	0080b900 	call	80b90 <init_create_tasks>

	// This task is deleted because there is no need for it to run again
	return_code = OSTaskDel(OS_PRIO_SELF);
   8097c:	01003fc4 	movi	r4,255
   80980:	00944a80 	call	944a8 <OSTaskDel>
   80984:	e0bffe05 	stb	r2,-8(fp)
	alt_ucosii_check_return_code(return_code);
   80988:	e13ffe03 	ldbu	r4,-8(fp)
   8098c:	00804300 	call	80430 <alt_ucosii_check_return_code>

	while (1);
   80990:	003fff06 	br	80990 <initialize_task+0x38>

00080994 <main>:
}

// The main function, it initializes the hardware, and create the initialization task,
// then it starts uCOS, and never returns
int main(void) {
   80994:	defff704 	addi	sp,sp,-36
   80998:	dfc00815 	stw	ra,32(sp)
   8099c:	df000715 	stw	fp,28(sp)
   809a0:	df000704 	addi	fp,sp,28
  	INT8U return_code = OS_NO_ERR;
   809a4:	e03fff05 	stb	zero,-4(fp)
    alt_up_character_lcd_dev *lcd_0;

	printf("Start main...\n");
   809a8:	010002b4 	movhi	r4,10
   809ac:	2123c604 	addi	r4,r4,-28904
   809b0:	0082da00 	call	82da0 <puts>

	init_button_irq();
   809b4:	00803dc0 	call	803dc <init_button_irq>
	printf("PB initialized...\n");
   809b8:	010002b4 	movhi	r4,10
   809bc:	2123ca04 	addi	r4,r4,-28888
   809c0:	0082da00 	call	82da0 <puts>

	seg7_show(SEG7_DISPLAY_0_BASE,SEG7_VALUE);
   809c4:	00c00434 	movhi	r3,16
   809c8:	18c42a04 	addi	r3,r3,4264
   809cc:	00844474 	movhi	r2,4369
   809d0:	10844444 	addi	r2,r2,4369
   809d4:	18800035 	stwio	r2,0(r3)
	printf("SEG7 initialized...\n");
   809d8:	010002b4 	movhi	r4,10
   809dc:	2123cf04 	addi	r4,r4,-28868
   809e0:	0082da00 	call	82da0 <puts>

   	lcd_0 = alt_up_character_lcd_open_dev(CHARACTER_LCD_0_NAME);
   809e4:	010002b4 	movhi	r4,10
   809e8:	2123d404 	addi	r4,r4,-28848
   809ec:	0096b840 	call	96b84 <alt_up_character_lcd_open_dev>
   809f0:	e0bffe15 	stw	r2,-8(fp)
    
    if (lcd_0 == NULL) alt_printf("Error opening LCD device\n");
   809f4:	e0bffe17 	ldw	r2,-8(fp)
   809f8:	1004c03a 	cmpne	r2,r2,zero
   809fc:	1000041e 	bne	r2,zero,80a10 <main+0x7c>
   80a00:	010002b4 	movhi	r4,10
   80a04:	2123da04 	addi	r4,r4,-28824
   80a08:	008ceb40 	call	8ceb4 <alt_printf>
   80a0c:	00000306 	br	80a1c <main+0x88>
    else alt_printf("LCD device opened.\n");
   80a10:	010002b4 	movhi	r4,10
   80a14:	2123e104 	addi	r4,r4,-28796
   80a18:	008ceb40 	call	8ceb4 <alt_printf>
    
    alt_up_character_lcd_init(lcd_0);
   80a1c:	e13ffe17 	ldw	r4,-8(fp)
   80a20:	0096b500 	call	96b50 <alt_up_character_lcd_init>
    
    alt_up_character_lcd_string(lcd_0, "COE4DS4 Winter18");
   80a24:	e13ffe17 	ldw	r4,-8(fp)
   80a28:	014002b4 	movhi	r5,10
   80a2c:	2963e604 	addi	r5,r5,-28776
   80a30:	0096c3c0 	call	96c3c <alt_up_character_lcd_string>
    
    alt_up_character_lcd_set_cursor_pos(lcd_0, 0, 1);
   80a34:	e13ffe17 	ldw	r4,-8(fp)
   80a38:	000b883a 	mov	r5,zero
   80a3c:	01800044 	movi	r6,1
   80a40:	0096d000 	call	96d00 <alt_up_character_lcd_set_cursor_pos>
    
    alt_up_character_lcd_string(lcd_0, "Lab6      exp. 2");
   80a44:	e13ffe17 	ldw	r4,-8(fp)
   80a48:	014002b4 	movhi	r5,10
   80a4c:	2963eb04 	addi	r5,r5,-28756
   80a50:	0096c3c0 	call	96c3c <alt_up_character_lcd_string>
    
    printf("Character LCD initialized...\n");
   80a54:	010002b4 	movhi	r4,10
   80a58:	2123f004 	addi	r4,r4,-28736
   80a5c:	0082da00 	call	82da0 <puts>


	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
   80a60:	00c00434 	movhi	r3,16
   80a64:	18c40004 	addi	r3,r3,4096
   80a68:	00800044 	movi	r2,1
   80a6c:	18800035 	stwio	r2,0(r3)
	printf("Reset performance counter...\n");
   80a70:	010002b4 	movhi	r4,10
   80a74:	2123f804 	addi	r4,r4,-28704
   80a78:	0082da00 	call	82da0 <puts>

    srand(IORD(SWITCH_I_BASE, 0));
   80a7c:	00800434 	movhi	r2,16
   80a80:	10841804 	addi	r2,r2,4192
   80a84:	10800037 	ldwio	r2,0(r2)
   80a88:	1009883a 	mov	r4,r2
   80a8c:	0082db40 	call	82db4 <srand>

	OSInit();
   80a90:	008e1900 	call	8e190 <OSInit>

	return_code = OSTaskCreateExt(initialize_task,
   80a94:	018002f4 	movhi	r6,11
   80a98:	31a47104 	addi	r6,r6,-28220
   80a9c:	00800184 	movi	r2,6
   80aa0:	d8800015 	stw	r2,0(sp)
   80aa4:	008002b4 	movhi	r2,10
   80aa8:	109c7104 	addi	r2,r2,29124
   80aac:	d8800115 	stw	r2,4(sp)
   80ab0:	00820004 	movi	r2,2048
   80ab4:	d8800215 	stw	r2,8(sp)
   80ab8:	d8000315 	stw	zero,12(sp)
   80abc:	008000c4 	movi	r2,3
   80ac0:	d8800415 	stw	r2,16(sp)
   80ac4:	01000234 	movhi	r4,8
   80ac8:	21025604 	addi	r4,r4,2392
   80acc:	000b883a 	mov	r5,zero
   80ad0:	01c00184 	movi	r7,6
   80ad4:	00942a80 	call	942a8 <OSTaskCreateExt>
   80ad8:	e0bfff05 	stb	r2,-4(fp)
					INITIALIZE_TASK_PRIORITY,
					initialize_task_stk,
					TASK_STACKSIZE,
					NULL,
					OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);
	alt_ucosii_check_return_code(return_code);
   80adc:	e13fff03 	ldbu	r4,-4(fp)
   80ae0:	00804300 	call	80430 <alt_ucosii_check_return_code>
	printf("Starting uCOS...\n");
   80ae4:	010002b4 	movhi	r4,10
   80ae8:	21240004 	addi	r4,r4,-28672
   80aec:	0082da00 	call	82da0 <puts>

	OSStart();
   80af0:	008e4d00 	call	8e4d0 <OSStart>
	return 0;
   80af4:	0005883a 	mov	r2,zero
}
   80af8:	e037883a 	mov	sp,fp
   80afc:	dfc00117 	ldw	ra,4(sp)
   80b00:	df000017 	ldw	fp,0(sp)
   80b04:	dec00204 	addi	sp,sp,8
   80b08:	f800283a 	ret

00080b0c <init_OS_data_structs>:

// This function creates the data structures for uCOS
int init_OS_data_structs(void) {
   80b0c:	defffc04 	addi	sp,sp,-16
   80b10:	dfc00315 	stw	ra,12(sp)
   80b14:	df000215 	stw	fp,8(sp)
   80b18:	dc000115 	stw	r16,4(sp)
   80b1c:	df000104 	addi	fp,sp,4
	int i;

	printf("Init data structs...\n");
   80b20:	010002b4 	movhi	r4,10
   80b24:	21240504 	addi	r4,r4,-28652
   80b28:	0082da00 	call	82da0 <puts>

	for (i = 0; i < NUM_PB_BUTTON; i++)
   80b2c:	e03fff15 	stw	zero,-4(fp)
   80b30:	00000d06 	br	80b68 <init_OS_data_structs+0x5c>
		PBSemaphore[i] = OSSemCreate(0);
   80b34:	e43fff17 	ldw	r16,-4(fp)
   80b38:	0009883a 	mov	r4,zero
   80b3c:	00930580 	call	93058 <OSSemCreate>
   80b40:	1009883a 	mov	r4,r2
   80b44:	00c002b4 	movhi	r3,10
   80b48:	18dbe604 	addi	r3,r3,28568
   80b4c:	8405883a 	add	r2,r16,r16
   80b50:	1085883a 	add	r2,r2,r2
   80b54:	10c5883a 	add	r2,r2,r3
   80b58:	11000015 	stw	r4,0(r2)
int init_OS_data_structs(void) {
	int i;

	printf("Init data structs...\n");

	for (i = 0; i < NUM_PB_BUTTON; i++)
   80b5c:	e0bfff17 	ldw	r2,-4(fp)
   80b60:	10800044 	addi	r2,r2,1
   80b64:	e0bfff15 	stw	r2,-4(fp)
   80b68:	e0bfff17 	ldw	r2,-4(fp)
   80b6c:	10800110 	cmplti	r2,r2,4
   80b70:	103ff01e 	bne	r2,zero,80b34 <init_OS_data_structs+0x28>
		PBSemaphore[i] = OSSemCreate(0);

	return 0;
   80b74:	0005883a 	mov	r2,zero
}
   80b78:	e037883a 	mov	sp,fp
   80b7c:	dfc00217 	ldw	ra,8(sp)
   80b80:	df000117 	ldw	fp,4(sp)
   80b84:	dc000017 	ldw	r16,0(sp)
   80b88:	dec00304 	addi	sp,sp,12
   80b8c:	f800283a 	ret

00080b90 <init_create_tasks>:

// This function creates the first task in uCOS
int init_create_tasks(void) {
   80b90:	defff804 	addi	sp,sp,-32
   80b94:	dfc00715 	stw	ra,28(sp)
   80b98:	df000615 	stw	fp,24(sp)
   80b9c:	df000604 	addi	fp,sp,24
	INT8U return_code = OS_NO_ERR;
   80ba0:	e03fff05 	stb	zero,-4(fp)

	printf("Creating custom_scheduler...\n");
   80ba4:	010002b4 	movhi	r4,10
   80ba8:	21240b04 	addi	r4,r4,-28628
   80bac:	0082da00 	call	82da0 <puts>
	return_code = OSTaskCreateExt(custom_scheduler,
   80bb0:	018002b4 	movhi	r6,10
   80bb4:	31bbe604 	addi	r6,r6,-4200
   80bb8:	00800244 	movi	r2,9
   80bbc:	d8800015 	stw	r2,0(sp)
   80bc0:	008002b4 	movhi	r2,10
   80bc4:	10b3e604 	addi	r2,r2,-12392
   80bc8:	d8800115 	stw	r2,4(sp)
   80bcc:	00820004 	movi	r2,2048
   80bd0:	d8800215 	stw	r2,8(sp)
   80bd4:	008002b4 	movhi	r2,10
   80bd8:	109bea04 	addi	r2,r2,28584
   80bdc:	d8800315 	stw	r2,12(sp)
   80be0:	d8000415 	stw	zero,16(sp)
   80be4:	01000234 	movhi	r4,8
   80be8:	21039704 	addi	r4,r4,3676
   80bec:	000b883a 	mov	r5,zero
   80bf0:	01c00244 	movi	r7,9
   80bf4:	00942a80 	call	942a8 <OSTaskCreateExt>
   80bf8:	e0bfff05 	stb	r2,-4(fp)
					CUSTOM_SCHEDULER_PRIORITY,
					custom_scheduler_stk,
                    TASK_STACKSIZE,
					&custom_scheduler_tcb,
					0);
	alt_ucosii_check_return_code(return_code);
   80bfc:	e13fff03 	ldbu	r4,-4(fp)
   80c00:	00804300 	call	80430 <alt_ucosii_check_return_code>

	return 0;
   80c04:	0005883a 	mov	r2,zero
}
   80c08:	e037883a 	mov	sp,fp
   80c0c:	dfc00117 	ldw	ra,4(sp)
   80c10:	df000017 	ldw	fp,0(sp)
   80c14:	dec00204 	addi	sp,sp,8
   80c18:	f800283a 	ret

00080c1c <periodic_task0>:
int custom_task_create(int [], int, scheduler_info_struct [], task_info_struct []);

// Periodic task 0
// It periodically uses a custom delay to occupy the CPU
// Then it suspends itself for a specified period of time
void periodic_task0(void* pdata) {
   80c1c:	defffc04 	addi	sp,sp,-16
   80c20:	dfc00315 	stw	ra,12(sp)
   80c24:	df000215 	stw	fp,8(sp)
   80c28:	df000204 	addi	fp,sp,8
   80c2c:	e13fff15 	stw	r4,-4(fp)
	task_info_struct *task_info_ptr;

	task_info_ptr = (task_info_struct *)pdata;
   80c30:	e0bfff17 	ldw	r2,-4(fp)
   80c34:	e0bffe15 	stw	r2,-8(fp)
	while (1) {
		printf("Start periodic_task0 (%4d ms) (%1d s) (%d priority)\n", task_info_ptr->execution_time, task_info_ptr->os_delay, task_info_ptr->priority);
   80c38:	e0bffe17 	ldw	r2,-8(fp)
   80c3c:	11400117 	ldw	r5,4(r2)
   80c40:	e0bffe17 	ldw	r2,-8(fp)
   80c44:	11800217 	ldw	r6,8(r2)
   80c48:	e0bffe17 	ldw	r2,-8(fp)
   80c4c:	11c00017 	ldw	r7,0(r2)
   80c50:	010002b4 	movhi	r4,10
   80c54:	21241304 	addi	r4,r4,-28596
   80c58:	0082c880 	call	82c88 <printf>
		custom_delay(task_info_ptr->execution_time);
   80c5c:	e0bffe17 	ldw	r2,-8(fp)
   80c60:	11000117 	ldw	r4,4(r2)
   80c64:	00829480 	call	82948 <custom_delay>
		printf("End	  periodic_task0 (%4d ms) (%1d s) (%d priority)\n", task_info_ptr->execution_time, task_info_ptr->os_delay, task_info_ptr->priority);
   80c68:	e0bffe17 	ldw	r2,-8(fp)
   80c6c:	11400117 	ldw	r5,4(r2)
   80c70:	e0bffe17 	ldw	r2,-8(fp)
   80c74:	11800217 	ldw	r6,8(r2)
   80c78:	e0bffe17 	ldw	r2,-8(fp)
   80c7c:	11c00017 	ldw	r7,0(r2)
   80c80:	010002b4 	movhi	r4,10
   80c84:	21242104 	addi	r4,r4,-28540
   80c88:	0082c880 	call	82c88 <printf>
		OSTimeDlyHMSM(0, 0, task_info_ptr->os_delay, 0);
   80c8c:	e0bffe17 	ldw	r2,-8(fp)
   80c90:	10800217 	ldw	r2,8(r2)
   80c94:	11803fcc 	andi	r6,r2,255
   80c98:	0009883a 	mov	r4,zero
   80c9c:	000b883a 	mov	r5,zero
   80ca0:	000f883a 	mov	r7,zero
   80ca4:	00956ec0 	call	956ec <OSTimeDlyHMSM>
	}
   80ca8:	003fe306 	br	80c38 <periodic_task0+0x1c>

00080cac <periodic_task1>:
}

// Periodic task 1
// It periodically uses a custom delay to occupy the CPU
// Then it suspends itself for a specified period of time
void periodic_task1(void* pdata) {
   80cac:	defffc04 	addi	sp,sp,-16
   80cb0:	dfc00315 	stw	ra,12(sp)
   80cb4:	df000215 	stw	fp,8(sp)
   80cb8:	df000204 	addi	fp,sp,8
   80cbc:	e13fff15 	stw	r4,-4(fp)
	task_info_struct *task_info_ptr;

	task_info_ptr = (task_info_struct *)pdata;
   80cc0:	e0bfff17 	ldw	r2,-4(fp)
   80cc4:	e0bffe15 	stw	r2,-8(fp)
	while (1) {
		printf("Start periodic_task1 (%4d ms) (%1d s) (%d priority)\n", task_info_ptr->execution_time, task_info_ptr->os_delay, task_info_ptr->priority);
   80cc8:	e0bffe17 	ldw	r2,-8(fp)
   80ccc:	11400117 	ldw	r5,4(r2)
   80cd0:	e0bffe17 	ldw	r2,-8(fp)
   80cd4:	11800217 	ldw	r6,8(r2)
   80cd8:	e0bffe17 	ldw	r2,-8(fp)
   80cdc:	11c00017 	ldw	r7,0(r2)
   80ce0:	010002b4 	movhi	r4,10
   80ce4:	21242f04 	addi	r4,r4,-28484
   80ce8:	0082c880 	call	82c88 <printf>
		custom_delay(task_info_ptr->execution_time);
   80cec:	e0bffe17 	ldw	r2,-8(fp)
   80cf0:	11000117 	ldw	r4,4(r2)
   80cf4:	00829480 	call	82948 <custom_delay>
		printf("End	  periodic_task1 (%4d ms) (%1d s) (%d priority)\n", task_info_ptr->execution_time, task_info_ptr->os_delay, task_info_ptr->priority);
   80cf8:	e0bffe17 	ldw	r2,-8(fp)
   80cfc:	11400117 	ldw	r5,4(r2)
   80d00:	e0bffe17 	ldw	r2,-8(fp)
   80d04:	11800217 	ldw	r6,8(r2)
   80d08:	e0bffe17 	ldw	r2,-8(fp)
   80d0c:	11c00017 	ldw	r7,0(r2)
   80d10:	010002b4 	movhi	r4,10
   80d14:	21243d04 	addi	r4,r4,-28428
   80d18:	0082c880 	call	82c88 <printf>
		OSTimeDlyHMSM(0, 0, task_info_ptr->os_delay, 0);
   80d1c:	e0bffe17 	ldw	r2,-8(fp)
   80d20:	10800217 	ldw	r2,8(r2)
   80d24:	11803fcc 	andi	r6,r2,255
   80d28:	0009883a 	mov	r4,zero
   80d2c:	000b883a 	mov	r5,zero
   80d30:	000f883a 	mov	r7,zero
   80d34:	00956ec0 	call	956ec <OSTimeDlyHMSM>
	}
   80d38:	003fe306 	br	80cc8 <periodic_task1+0x1c>

00080d3c <periodic_task2>:
}

// Periodic task 2
// It periodically uses a custom delay to occupy the CPU
// Then it suspends itself for a specified period of time
void periodic_task2(void* pdata) {
   80d3c:	defffc04 	addi	sp,sp,-16
   80d40:	dfc00315 	stw	ra,12(sp)
   80d44:	df000215 	stw	fp,8(sp)
   80d48:	df000204 	addi	fp,sp,8
   80d4c:	e13fff15 	stw	r4,-4(fp)
	task_info_struct *task_info_ptr;

	task_info_ptr = (task_info_struct *)pdata;
   80d50:	e0bfff17 	ldw	r2,-4(fp)
   80d54:	e0bffe15 	stw	r2,-8(fp)
	while (1) {
		printf("Start periodic_task2 (%4d ms) (%1d s) (%d priority)\n", task_info_ptr->execution_time, task_info_ptr->os_delay, task_info_ptr->priority);
   80d58:	e0bffe17 	ldw	r2,-8(fp)
   80d5c:	11400117 	ldw	r5,4(r2)
   80d60:	e0bffe17 	ldw	r2,-8(fp)
   80d64:	11800217 	ldw	r6,8(r2)
   80d68:	e0bffe17 	ldw	r2,-8(fp)
   80d6c:	11c00017 	ldw	r7,0(r2)
   80d70:	010002b4 	movhi	r4,10
   80d74:	21244b04 	addi	r4,r4,-28372
   80d78:	0082c880 	call	82c88 <printf>
		custom_delay(task_info_ptr->execution_time);
   80d7c:	e0bffe17 	ldw	r2,-8(fp)
   80d80:	11000117 	ldw	r4,4(r2)
   80d84:	00829480 	call	82948 <custom_delay>
		printf("End	  periodic_task2 (%4d ms) (%1d s) (%d priority)\n", task_info_ptr->execution_time, task_info_ptr->os_delay, task_info_ptr->priority);
   80d88:	e0bffe17 	ldw	r2,-8(fp)
   80d8c:	11400117 	ldw	r5,4(r2)
   80d90:	e0bffe17 	ldw	r2,-8(fp)
   80d94:	11800217 	ldw	r6,8(r2)
   80d98:	e0bffe17 	ldw	r2,-8(fp)
   80d9c:	11c00017 	ldw	r7,0(r2)
   80da0:	010002b4 	movhi	r4,10
   80da4:	21245904 	addi	r4,r4,-28316
   80da8:	0082c880 	call	82c88 <printf>
		OSTimeDlyHMSM(0, 0, task_info_ptr->os_delay, 0);
   80dac:	e0bffe17 	ldw	r2,-8(fp)
   80db0:	10800217 	ldw	r2,8(r2)
   80db4:	11803fcc 	andi	r6,r2,255
   80db8:	0009883a 	mov	r4,zero
   80dbc:	000b883a 	mov	r5,zero
   80dc0:	000f883a 	mov	r7,zero
   80dc4:	00956ec0 	call	956ec <OSTimeDlyHMSM>
	}
   80dc8:	003fe306 	br	80d58 <periodic_task2+0x1c>

00080dcc <periodic_task3>:
}

// Periodic task 3
// It periodically uses a custom delay to occupy the CPU
// Then it suspends itself for a specified period of time
void periodic_task3(void* pdata) {
   80dcc:	defffc04 	addi	sp,sp,-16
   80dd0:	dfc00315 	stw	ra,12(sp)
   80dd4:	df000215 	stw	fp,8(sp)
   80dd8:	df000204 	addi	fp,sp,8
   80ddc:	e13fff15 	stw	r4,-4(fp)
	task_info_struct *task_info_ptr;

	task_info_ptr = (task_info_struct *)pdata;
   80de0:	e0bfff17 	ldw	r2,-4(fp)
   80de4:	e0bffe15 	stw	r2,-8(fp)
	while (1) {
		printf("Start periodic_task3 (%4d ms) (%1d s) (%d priority)\n", task_info_ptr->execution_time, task_info_ptr->os_delay, task_info_ptr->priority);
   80de8:	e0bffe17 	ldw	r2,-8(fp)
   80dec:	11400117 	ldw	r5,4(r2)
   80df0:	e0bffe17 	ldw	r2,-8(fp)
   80df4:	11800217 	ldw	r6,8(r2)
   80df8:	e0bffe17 	ldw	r2,-8(fp)
   80dfc:	11c00017 	ldw	r7,0(r2)
   80e00:	010002b4 	movhi	r4,10
   80e04:	21246704 	addi	r4,r4,-28260
   80e08:	0082c880 	call	82c88 <printf>
		custom_delay(task_info_ptr->execution_time);
   80e0c:	e0bffe17 	ldw	r2,-8(fp)
   80e10:	11000117 	ldw	r4,4(r2)
   80e14:	00829480 	call	82948 <custom_delay>
		printf("End	  periodic_task3 (%4d ms) (%1d s) (%d priority)\n", task_info_ptr->execution_time, task_info_ptr->os_delay, task_info_ptr->priority);
   80e18:	e0bffe17 	ldw	r2,-8(fp)
   80e1c:	11400117 	ldw	r5,4(r2)
   80e20:	e0bffe17 	ldw	r2,-8(fp)
   80e24:	11800217 	ldw	r6,8(r2)
   80e28:	e0bffe17 	ldw	r2,-8(fp)
   80e2c:	11c00017 	ldw	r7,0(r2)
   80e30:	010002b4 	movhi	r4,10
   80e34:	21247504 	addi	r4,r4,-28204
   80e38:	0082c880 	call	82c88 <printf>
		OSTimeDlyHMSM(0, 0, task_info_ptr->os_delay, 0);
   80e3c:	e0bffe17 	ldw	r2,-8(fp)
   80e40:	10800217 	ldw	r2,8(r2)
   80e44:	11803fcc 	andi	r6,r2,255
   80e48:	0009883a 	mov	r4,zero
   80e4c:	000b883a 	mov	r5,zero
   80e50:	000f883a 	mov	r7,zero
   80e54:	00956ec0 	call	956ec <OSTimeDlyHMSM>
	}
   80e58:	003fe306 	br	80de8 <periodic_task3+0x1c>

00080e5c <custom_scheduler>:
// The custom_scheduler
// It has the highest priority
// It checks the PBs every 500ms
// It a button has been pressed, it creates/deletes the corresponding task in the OS
// When creating a task, it will assign the new task with the lowest priority among the running tasks
void custom_scheduler(void *pdata) {
   80e5c:	deffc704 	addi	sp,sp,-228
   80e60:	dfc03815 	stw	ra,224(sp)
   80e64:	df003715 	stw	fp,220(sp)
   80e68:	dd003615 	stw	r20,216(sp)
   80e6c:	dcc03515 	stw	r19,212(sp)
   80e70:	dc803415 	stw	r18,208(sp)
   80e74:	dc403315 	stw	r17,204(sp)
   80e78:	dc003215 	stw	r16,200(sp)
   80e7c:	df003204 	addi	fp,sp,200
   80e80:	e13ffe15 	stw	r4,-8(fp)
	INT8U return_code = OS_NO_ERR;
   80e84:	e03fd905 	stb	zero,-156(fp)
	int num_active_task;	
	// Array of task_info
	task_info_struct task_info[NUM_TASK];
	scheduler_info_struct scheduler_info[NUM_TASK];

	printf("Starting custom scheduler...\n");
   80e88:	010002b4 	movhi	r4,10
   80e8c:	21248304 	addi	r4,r4,-28148
   80e90:	0082da00 	call	82da0 <puts>

	num_active_task = 0;
   80e94:	e03fd315 	stw	zero,-180(fp)

	for (i = 0; i < NUM_TASK; i++) {
   80e98:	e03fd815 	stw	zero,-160(fp)
   80e9c:	00006a06 	br	81048 <custom_scheduler+0x1ec>
		// Creating periodic task 0 with random execution time and delay time for periodic arrival
		task_info[i].execution_time = rand() % EXECUTION_TIME_LIMIT + 1;
   80ea0:	e43fd817 	ldw	r16,-160(fp)
   80ea4:	0082dd00 	call	82dd0 <rand>
   80ea8:	1009883a 	mov	r4,r2
   80eac:	0144e204 	movi	r5,5000
   80eb0:	0082a940 	call	82a94 <__modsi3>
   80eb4:	14400044 	addi	r17,r2,1
   80eb8:	8009883a 	mov	r4,r16
   80ebc:	01400304 	movi	r5,12
   80ec0:	0082b040 	call	82b04 <__mulsi3>
   80ec4:	e0ffd304 	addi	r3,fp,-180
   80ec8:	10c5883a 	add	r2,r2,r3
   80ecc:	10801404 	addi	r2,r2,80
   80ed0:	14400015 	stw	r17,0(r2)
		task_info[i].os_delay = rand() % OS_DELAY_LIMIT + 1;
   80ed4:	e43fd817 	ldw	r16,-160(fp)
   80ed8:	0082dd00 	call	82dd0 <rand>
   80edc:	1009883a 	mov	r4,r2
   80ee0:	01400144 	movi	r5,5
   80ee4:	0082a940 	call	82a94 <__modsi3>
   80ee8:	14400044 	addi	r17,r2,1
   80eec:	8009883a 	mov	r4,r16
   80ef0:	01400304 	movi	r5,12
   80ef4:	0082b040 	call	82b04 <__mulsi3>
   80ef8:	e13fd304 	addi	r4,fp,-180
   80efc:	1105883a 	add	r2,r2,r4
   80f00:	10801504 	addi	r2,r2,84
   80f04:	14400015 	stw	r17,0(r2)
		task_info[i].priority = i;
   80f08:	e13fd817 	ldw	r4,-160(fp)
   80f0c:	01400304 	movi	r5,12
   80f10:	0082b040 	call	82b04 <__mulsi3>
   80f14:	e0ffd304 	addi	r3,fp,-180
   80f18:	10c5883a 	add	r2,r2,r3
   80f1c:	10c01304 	addi	r3,r2,76
   80f20:	e0bfd817 	ldw	r2,-160(fp)
   80f24:	18800015 	stw	r2,0(r3)

		scheduler_info[i].valid = 1;
   80f28:	e13fd817 	ldw	r4,-160(fp)
   80f2c:	01400304 	movi	r5,12
   80f30:	0082b040 	call	82b04 <__mulsi3>
   80f34:	e13fd304 	addi	r4,fp,-180
   80f38:	1105883a 	add	r2,r2,r4
   80f3c:	10c01f04 	addi	r3,r2,124
   80f40:	00800044 	movi	r2,1
   80f44:	18800015 	stw	r2,0(r3)
		scheduler_info[i].id = i;
   80f48:	e13fd817 	ldw	r4,-160(fp)
   80f4c:	01400304 	movi	r5,12
   80f50:	0082b040 	call	82b04 <__mulsi3>
   80f54:	e0ffd304 	addi	r3,fp,-180
   80f58:	10c5883a 	add	r2,r2,r3
   80f5c:	10c02004 	addi	r3,r2,128
   80f60:	e0bfd817 	ldw	r2,-160(fp)
   80f64:	18800015 	stw	r2,0(r3)
		scheduler_info[i].period = task_info[i].execution_time + task_info[i].os_delay * 1000;
   80f68:	e47fd817 	ldw	r17,-160(fp)
   80f6c:	e13fd817 	ldw	r4,-160(fp)
   80f70:	01400304 	movi	r5,12
   80f74:	0082b040 	call	82b04 <__mulsi3>
   80f78:	e13fd304 	addi	r4,fp,-180
   80f7c:	1105883a 	add	r2,r2,r4
   80f80:	10801404 	addi	r2,r2,80
   80f84:	14000017 	ldw	r16,0(r2)
   80f88:	e13fd817 	ldw	r4,-160(fp)
   80f8c:	01400304 	movi	r5,12
   80f90:	0082b040 	call	82b04 <__mulsi3>
   80f94:	e0ffd304 	addi	r3,fp,-180
   80f98:	10c5883a 	add	r2,r2,r3
   80f9c:	10801504 	addi	r2,r2,84
   80fa0:	11000017 	ldw	r4,0(r2)
   80fa4:	0140fa04 	movi	r5,1000
   80fa8:	0082b040 	call	82b04 <__mulsi3>
   80fac:	80a1883a 	add	r16,r16,r2
   80fb0:	8809883a 	mov	r4,r17
   80fb4:	01400304 	movi	r5,12
   80fb8:	0082b040 	call	82b04 <__mulsi3>
   80fbc:	e13fd304 	addi	r4,fp,-180
   80fc0:	1105883a 	add	r2,r2,r4
   80fc4:	10802104 	addi	r2,r2,132
   80fc8:	14000015 	stw	r16,0(r2)

		temp_p[i] =scheduler_info[i].period;
   80fcc:	e43fd817 	ldw	r16,-160(fp)
   80fd0:	e13fd817 	ldw	r4,-160(fp)
   80fd4:	01400304 	movi	r5,12
   80fd8:	0082b040 	call	82b04 <__mulsi3>
   80fdc:	e0ffd304 	addi	r3,fp,-180
   80fe0:	10c5883a 	add	r2,r2,r3
   80fe4:	10802104 	addi	r2,r2,132
   80fe8:	10c00017 	ldw	r3,0(r2)
   80fec:	8405883a 	add	r2,r16,r16
   80ff0:	1085883a 	add	r2,r2,r2
   80ff4:	e13fd304 	addi	r4,fp,-180
   80ff8:	1105883a 	add	r2,r2,r4
   80ffc:	10800b04 	addi	r2,r2,44
   81000:	10c00015 	stw	r3,0(r2)
		temp_pri[i]=task_info[i].priority;
   81004:	e43fd817 	ldw	r16,-160(fp)
   81008:	e13fd817 	ldw	r4,-160(fp)
   8100c:	01400304 	movi	r5,12
   81010:	0082b040 	call	82b04 <__mulsi3>
   81014:	e0ffd304 	addi	r3,fp,-180
   81018:	10c5883a 	add	r2,r2,r3
   8101c:	10801304 	addi	r2,r2,76
   81020:	10c00017 	ldw	r3,0(r2)
   81024:	8405883a 	add	r2,r16,r16
   81028:	1085883a 	add	r2,r2,r2
   8102c:	e13fd304 	addi	r4,fp,-180
   81030:	1105883a 	add	r2,r2,r4
   81034:	10800f04 	addi	r2,r2,60
   81038:	10c00015 	stw	r3,0(r2)

	printf("Starting custom scheduler...\n");

	num_active_task = 0;

	for (i = 0; i < NUM_TASK; i++) {
   8103c:	e0bfd817 	ldw	r2,-160(fp)
   81040:	10800044 	addi	r2,r2,1
   81044:	e0bfd815 	stw	r2,-160(fp)
   81048:	e0bfd817 	ldw	r2,-160(fp)
   8104c:	10800110 	cmplti	r2,r2,4
   81050:	103f931e 	bne	r2,zero,80ea0 <custom_scheduler+0x44>


	}

	//sorting
	for (i = 0; i < NUM_TASK-1; i++) {
   81054:	e03fd815 	stw	zero,-160(fp)
   81058:	00005d06 	br	811d0 <custom_scheduler+0x374>
		for (x = 0; x < NUM_TASK-i-1; x++) {
   8105c:	e03fd515 	stw	zero,-172(fp)
   81060:	00005306 	br	811b0 <custom_scheduler+0x354>
			if (temp_p[x] > temp_p[x+1]) {
   81064:	e0bfd517 	ldw	r2,-172(fp)
   81068:	1085883a 	add	r2,r2,r2
   8106c:	1085883a 	add	r2,r2,r2
   81070:	e0ffd304 	addi	r3,fp,-180
   81074:	10c5883a 	add	r2,r2,r3
   81078:	10800b04 	addi	r2,r2,44
   8107c:	10c00017 	ldw	r3,0(r2)
   81080:	e0bfd517 	ldw	r2,-172(fp)
   81084:	10800044 	addi	r2,r2,1
   81088:	1085883a 	add	r2,r2,r2
   8108c:	1085883a 	add	r2,r2,r2
   81090:	e13fd304 	addi	r4,fp,-180
   81094:	1105883a 	add	r2,r2,r4
   81098:	10800b04 	addi	r2,r2,44
   8109c:	10800017 	ldw	r2,0(r2)
   810a0:	10c0400e 	bge	r2,r3,811a4 <custom_scheduler+0x348>
				temp = temp_p[x];
   810a4:	e0bfd517 	ldw	r2,-172(fp)
   810a8:	1085883a 	add	r2,r2,r2
   810ac:	1085883a 	add	r2,r2,r2
   810b0:	e0ffd304 	addi	r3,fp,-180
   810b4:	10c5883a 	add	r2,r2,r3
   810b8:	10800b04 	addi	r2,r2,44
   810bc:	10800017 	ldw	r2,0(r2)
   810c0:	e0bfd415 	stw	r2,-176(fp)
				temp_p[x] = temp_p[x+1];
   810c4:	e13fd517 	ldw	r4,-172(fp)
   810c8:	e0bfd517 	ldw	r2,-172(fp)
   810cc:	10800044 	addi	r2,r2,1
   810d0:	1085883a 	add	r2,r2,r2
   810d4:	1085883a 	add	r2,r2,r2
   810d8:	e0ffd304 	addi	r3,fp,-180
   810dc:	10c5883a 	add	r2,r2,r3
   810e0:	10800b04 	addi	r2,r2,44
   810e4:	10c00017 	ldw	r3,0(r2)
   810e8:	2105883a 	add	r2,r4,r4
   810ec:	1085883a 	add	r2,r2,r2
   810f0:	e13fd304 	addi	r4,fp,-180
   810f4:	1105883a 	add	r2,r2,r4
   810f8:	10800b04 	addi	r2,r2,44
   810fc:	10c00015 	stw	r3,0(r2)
				temp_p[x+1] = temp;
   81100:	e0bfd517 	ldw	r2,-172(fp)
   81104:	10800044 	addi	r2,r2,1
   81108:	1085883a 	add	r2,r2,r2
   8110c:	1085883a 	add	r2,r2,r2
   81110:	e0ffd304 	addi	r3,fp,-180
   81114:	10c5883a 	add	r2,r2,r3
   81118:	10c00b04 	addi	r3,r2,44
   8111c:	e0bfd417 	ldw	r2,-176(fp)
   81120:	18800015 	stw	r2,0(r3)
                temp = temp_pri[x];
   81124:	e0bfd517 	ldw	r2,-172(fp)
   81128:	1085883a 	add	r2,r2,r2
   8112c:	1085883a 	add	r2,r2,r2
   81130:	e13fd304 	addi	r4,fp,-180
   81134:	1105883a 	add	r2,r2,r4
   81138:	10800f04 	addi	r2,r2,60
   8113c:	10800017 	ldw	r2,0(r2)
   81140:	e0bfd415 	stw	r2,-176(fp)
				temp_pri[x] = temp_pri[x+1];
   81144:	e13fd517 	ldw	r4,-172(fp)
   81148:	e0bfd517 	ldw	r2,-172(fp)
   8114c:	10800044 	addi	r2,r2,1
   81150:	1085883a 	add	r2,r2,r2
   81154:	1085883a 	add	r2,r2,r2
   81158:	e0ffd304 	addi	r3,fp,-180
   8115c:	10c5883a 	add	r2,r2,r3
   81160:	10800f04 	addi	r2,r2,60
   81164:	10c00017 	ldw	r3,0(r2)
   81168:	2105883a 	add	r2,r4,r4
   8116c:	1085883a 	add	r2,r2,r2
   81170:	e13fd304 	addi	r4,fp,-180
   81174:	1105883a 	add	r2,r2,r4
   81178:	10800f04 	addi	r2,r2,60
   8117c:	10c00015 	stw	r3,0(r2)
				temp_pri[x+1] = temp;
   81180:	e0bfd517 	ldw	r2,-172(fp)
   81184:	10800044 	addi	r2,r2,1
   81188:	1085883a 	add	r2,r2,r2
   8118c:	1085883a 	add	r2,r2,r2
   81190:	e0ffd304 	addi	r3,fp,-180
   81194:	10c5883a 	add	r2,r2,r3
   81198:	10c00f04 	addi	r3,r2,60
   8119c:	e0bfd417 	ldw	r2,-176(fp)
   811a0:	18800015 	stw	r2,0(r3)

	}

	//sorting
	for (i = 0; i < NUM_TASK-1; i++) {
		for (x = 0; x < NUM_TASK-i-1; x++) {
   811a4:	e0bfd517 	ldw	r2,-172(fp)
   811a8:	10800044 	addi	r2,r2,1
   811ac:	e0bfd515 	stw	r2,-172(fp)
   811b0:	00c000c4 	movi	r3,3
   811b4:	e0bfd817 	ldw	r2,-160(fp)
   811b8:	1887c83a 	sub	r3,r3,r2
   811bc:	e0bfd517 	ldw	r2,-172(fp)
   811c0:	10ffa816 	blt	r2,r3,81064 <custom_scheduler+0x208>


	}

	//sorting
	for (i = 0; i < NUM_TASK-1; i++) {
   811c4:	e0bfd817 	ldw	r2,-160(fp)
   811c8:	10800044 	addi	r2,r2,1
   811cc:	e0bfd815 	stw	r2,-160(fp)
   811d0:	e0bfd817 	ldw	r2,-160(fp)
   811d4:	108000d0 	cmplti	r2,r2,3
   811d8:	103fa01e 	bne	r2,zero,8105c <custom_scheduler+0x200>
				temp_pri[x+1] = temp;
			}
		}
	}

    for (i = 0; i < NUM_TASK; i++) {
   811dc:	e03fd815 	stw	zero,-160(fp)
   811e0:	00003506 	br	812b8 <custom_scheduler+0x45c>
    	scheduler_info[i].valid = 1;
   811e4:	e13fd817 	ldw	r4,-160(fp)
   811e8:	01400304 	movi	r5,12
   811ec:	0082b040 	call	82b04 <__mulsi3>
   811f0:	e13fd304 	addi	r4,fp,-180
   811f4:	1105883a 	add	r2,r2,r4
   811f8:	10c01f04 	addi	r3,r2,124
   811fc:	00800044 	movi	r2,1
   81200:	18800015 	stw	r2,0(r3)
		scheduler_info[i].id = temp_pri[i];
   81204:	e13fd817 	ldw	r4,-160(fp)
   81208:	e0bfd817 	ldw	r2,-160(fp)
   8120c:	1085883a 	add	r2,r2,r2
   81210:	1085883a 	add	r2,r2,r2
   81214:	e0ffd304 	addi	r3,fp,-180
   81218:	10c5883a 	add	r2,r2,r3
   8121c:	10800f04 	addi	r2,r2,60
   81220:	14000017 	ldw	r16,0(r2)
   81224:	01400304 	movi	r5,12
   81228:	0082b040 	call	82b04 <__mulsi3>
   8122c:	e13fd304 	addi	r4,fp,-180
   81230:	1105883a 	add	r2,r2,r4
   81234:	10802004 	addi	r2,r2,128
   81238:	14000015 	stw	r16,0(r2)
		scheduler_info[i].period = temp_p[i];
   8123c:	e13fd817 	ldw	r4,-160(fp)
   81240:	e0bfd817 	ldw	r2,-160(fp)
   81244:	1085883a 	add	r2,r2,r2
   81248:	1085883a 	add	r2,r2,r2
   8124c:	e0ffd304 	addi	r3,fp,-180
   81250:	10c5883a 	add	r2,r2,r3
   81254:	10800b04 	addi	r2,r2,44
   81258:	14000017 	ldw	r16,0(r2)
   8125c:	01400304 	movi	r5,12
   81260:	0082b040 	call	82b04 <__mulsi3>
   81264:	e13fd304 	addi	r4,fp,-180
   81268:	1105883a 	add	r2,r2,r4
   8126c:	10802104 	addi	r2,r2,132
   81270:	14000015 	stw	r16,0(r2)
		task_info[i].priority = temp_pri[i];
   81274:	e13fd817 	ldw	r4,-160(fp)
   81278:	e0bfd817 	ldw	r2,-160(fp)
   8127c:	1085883a 	add	r2,r2,r2
   81280:	1085883a 	add	r2,r2,r2
   81284:	e0ffd304 	addi	r3,fp,-180
   81288:	10c5883a 	add	r2,r2,r3
   8128c:	10800f04 	addi	r2,r2,60
   81290:	14000017 	ldw	r16,0(r2)
   81294:	01400304 	movi	r5,12
   81298:	0082b040 	call	82b04 <__mulsi3>
   8129c:	e13fd304 	addi	r4,fp,-180
   812a0:	1105883a 	add	r2,r2,r4
   812a4:	10801304 	addi	r2,r2,76
   812a8:	14000015 	stw	r16,0(r2)
				temp_pri[x+1] = temp;
			}
		}
	}

    for (i = 0; i < NUM_TASK; i++) {
   812ac:	e0bfd817 	ldw	r2,-160(fp)
   812b0:	10800044 	addi	r2,r2,1
   812b4:	e0bfd815 	stw	r2,-160(fp)
   812b8:	e0bfd817 	ldw	r2,-160(fp)
   812bc:	10800110 	cmplti	r2,r2,4
   812c0:	103fc81e 	bne	r2,zero,811e4 <custom_scheduler+0x388>
		scheduler_info[i].id = temp_pri[i];
		scheduler_info[i].period = temp_p[i];
		task_info[i].priority = temp_pri[i];
    }

    for (i = 0; i < NUM_TASK; i++) {
   812c4:	e03fd815 	stw	zero,-160(fp)
   812c8:	0000f206 	br	81694 <custom_scheduler+0x838>
    	printf("-Creating periodic_task%d: execution_time_tick = %d, os_delay_time = %d\n",
   812cc:	e13fd817 	ldw	r4,-160(fp)
   812d0:	01400304 	movi	r5,12
   812d4:	0082b040 	call	82b04 <__mulsi3>
   812d8:	e0ffd304 	addi	r3,fp,-180
   812dc:	10c5883a 	add	r2,r2,r3
   812e0:	10801404 	addi	r2,r2,80
   812e4:	14000017 	ldw	r16,0(r2)
   812e8:	e13fd817 	ldw	r4,-160(fp)
   812ec:	01400304 	movi	r5,12
   812f0:	0082b040 	call	82b04 <__mulsi3>
   812f4:	e13fd304 	addi	r4,fp,-180
   812f8:	1105883a 	add	r2,r2,r4
   812fc:	10801504 	addi	r2,r2,84
   81300:	11c00017 	ldw	r7,0(r2)
   81304:	010002b4 	movhi	r4,10
   81308:	21248b04 	addi	r4,r4,-28116
   8130c:	e17fd817 	ldw	r5,-160(fp)
   81310:	800d883a 	mov	r6,r16
   81314:	0082c880 	call	82c88 <printf>
    			i,
    			task_info[i].execution_time,
    			task_info[i].os_delay);

    		switch (i) {
   81318:	e0bfd817 	ldw	r2,-160(fp)
   8131c:	e0bfff15 	stw	r2,-4(fp)
   81320:	e0ffff17 	ldw	r3,-4(fp)
   81324:	18800060 	cmpeqi	r2,r3,1
   81328:	10003a1e 	bne	r2,zero,81414 <custom_scheduler+0x5b8>
   8132c:	e13fff17 	ldw	r4,-4(fp)
   81330:	208000a0 	cmpeqi	r2,r4,2
   81334:	10006a1e 	bne	r2,zero,814e0 <custom_scheduler+0x684>
   81338:	e0ffff17 	ldw	r3,-4(fp)
   8133c:	1805003a 	cmpeq	r2,r3,zero
   81340:	1000011e 	bne	r2,zero,81348 <custom_scheduler+0x4ec>
   81344:	00009906 	br	815ac <custom_scheduler+0x750>
    			case 0:
    				return_code = OSTaskCreateExt(periodic_task0,
   81348:	e13fd817 	ldw	r4,-160(fp)
   8134c:	01400304 	movi	r5,12
   81350:	0082b040 	call	82b04 <__mulsi3>
   81354:	e43fe604 	addi	r16,fp,-104
   81358:	80a1883a 	add	r16,r16,r2
   8135c:	e0bfd317 	ldw	r2,-180(fp)
   81360:	1004937a 	slli	r2,r2,13
   81364:	1007883a 	mov	r3,r2
   81368:	008002b4 	movhi	r2,10
   8136c:	10bbe604 	addi	r2,r2,-4200
   81370:	1087ff04 	addi	r2,r2,8188
   81374:	18a3883a 	add	r17,r3,r2
   81378:	e13fd817 	ldw	r4,-160(fp)
   8137c:	01400304 	movi	r5,12
   81380:	0082b040 	call	82b04 <__mulsi3>
   81384:	e13fd304 	addi	r4,fp,-180
   81388:	1105883a 	add	r2,r2,r4
   8138c:	10801304 	addi	r2,r2,76
   81390:	10800017 	ldw	r2,0(r2)
   81394:	10800284 	addi	r2,r2,10
   81398:	14803fcc 	andi	r18,r2,255
   8139c:	e0bfd317 	ldw	r2,-180(fp)
   813a0:	14ffffcc 	andi	r19,r2,65535
   813a4:	e0bfd317 	ldw	r2,-180(fp)
   813a8:	1004937a 	slli	r2,r2,13
   813ac:	1007883a 	mov	r3,r2
   813b0:	008002b4 	movhi	r2,10
   813b4:	10bbe604 	addi	r2,r2,-4200
   813b8:	1885883a 	add	r2,r3,r2
   813bc:	1029883a 	mov	r20,r2
   813c0:	e13fd317 	ldw	r4,-180(fp)
   813c4:	01401b04 	movi	r5,108
   813c8:	0082b040 	call	82b04 <__mulsi3>
   813cc:	1007883a 	mov	r3,r2
   813d0:	008002b4 	movhi	r2,10
   813d4:	109c0504 	addi	r2,r2,28692
   813d8:	1887883a 	add	r3,r3,r2
   813dc:	dcc00015 	stw	r19,0(sp)
   813e0:	dd000115 	stw	r20,4(sp)
   813e4:	00820004 	movi	r2,2048
   813e8:	d8800215 	stw	r2,8(sp)
   813ec:	d8c00315 	stw	r3,12(sp)
   813f0:	d8000415 	stw	zero,16(sp)
   813f4:	01000234 	movhi	r4,8
   813f8:	21030704 	addi	r4,r4,3100
   813fc:	800b883a 	mov	r5,r16
   81400:	880d883a 	mov	r6,r17
   81404:	900f883a 	mov	r7,r18
   81408:	00942a80 	call	942a8 <OSTaskCreateExt>
   8140c:	e0bfd905 	stb	r2,-156(fp)
    								 num_active_task,
    								 &periodic_task_stk[num_active_task][0],
    								 TASK_STACKSIZE,
    								 &periodic_task_tcb[num_active_task],
    								 0);
    			break;
   81410:	00009806 	br	81674 <custom_scheduler+0x818>
    			case 1:
    				return_code = OSTaskCreateExt(periodic_task1,
   81414:	e13fd817 	ldw	r4,-160(fp)
   81418:	01400304 	movi	r5,12
   8141c:	0082b040 	call	82b04 <__mulsi3>
   81420:	e43fe604 	addi	r16,fp,-104
   81424:	80a1883a 	add	r16,r16,r2
   81428:	e0bfd317 	ldw	r2,-180(fp)
   8142c:	1004937a 	slli	r2,r2,13
   81430:	1007883a 	mov	r3,r2
   81434:	008002b4 	movhi	r2,10
   81438:	10bbe604 	addi	r2,r2,-4200
   8143c:	1087ff04 	addi	r2,r2,8188
   81440:	18a3883a 	add	r17,r3,r2
   81444:	e13fd817 	ldw	r4,-160(fp)
   81448:	01400304 	movi	r5,12
   8144c:	0082b040 	call	82b04 <__mulsi3>
   81450:	e0ffd304 	addi	r3,fp,-180
   81454:	10c5883a 	add	r2,r2,r3
   81458:	10801304 	addi	r2,r2,76
   8145c:	10800017 	ldw	r2,0(r2)
   81460:	10800284 	addi	r2,r2,10
   81464:	14803fcc 	andi	r18,r2,255
   81468:	e0bfd317 	ldw	r2,-180(fp)
   8146c:	14ffffcc 	andi	r19,r2,65535
   81470:	e0bfd317 	ldw	r2,-180(fp)
   81474:	1004937a 	slli	r2,r2,13
   81478:	1007883a 	mov	r3,r2
   8147c:	008002b4 	movhi	r2,10
   81480:	10bbe604 	addi	r2,r2,-4200
   81484:	1885883a 	add	r2,r3,r2
   81488:	1029883a 	mov	r20,r2
   8148c:	e13fd317 	ldw	r4,-180(fp)
   81490:	01401b04 	movi	r5,108
   81494:	0082b040 	call	82b04 <__mulsi3>
   81498:	1007883a 	mov	r3,r2
   8149c:	008002b4 	movhi	r2,10
   814a0:	109c0504 	addi	r2,r2,28692
   814a4:	1887883a 	add	r3,r3,r2
   814a8:	dcc00015 	stw	r19,0(sp)
   814ac:	dd000115 	stw	r20,4(sp)
   814b0:	00820004 	movi	r2,2048
   814b4:	d8800215 	stw	r2,8(sp)
   814b8:	d8c00315 	stw	r3,12(sp)
   814bc:	d8000415 	stw	zero,16(sp)
   814c0:	01000234 	movhi	r4,8
   814c4:	21032b04 	addi	r4,r4,3244
   814c8:	800b883a 	mov	r5,r16
   814cc:	880d883a 	mov	r6,r17
   814d0:	900f883a 	mov	r7,r18
   814d4:	00942a80 	call	942a8 <OSTaskCreateExt>
   814d8:	e0bfd905 	stb	r2,-156(fp)
    								 num_active_task,
    								 &periodic_task_stk[num_active_task][0],
    								 TASK_STACKSIZE,
    								 &periodic_task_tcb[num_active_task],
    								 0);
    			break;
   814dc:	00006506 	br	81674 <custom_scheduler+0x818>
    			case 2:
    				return_code = OSTaskCreateExt(periodic_task2,
   814e0:	e13fd817 	ldw	r4,-160(fp)
   814e4:	01400304 	movi	r5,12
   814e8:	0082b040 	call	82b04 <__mulsi3>
   814ec:	e43fe604 	addi	r16,fp,-104
   814f0:	80a1883a 	add	r16,r16,r2
   814f4:	e0bfd317 	ldw	r2,-180(fp)
   814f8:	1004937a 	slli	r2,r2,13
   814fc:	1007883a 	mov	r3,r2
   81500:	008002b4 	movhi	r2,10
   81504:	10bbe604 	addi	r2,r2,-4200
   81508:	1087ff04 	addi	r2,r2,8188
   8150c:	18a3883a 	add	r17,r3,r2
   81510:	e13fd817 	ldw	r4,-160(fp)
   81514:	01400304 	movi	r5,12
   81518:	0082b040 	call	82b04 <__mulsi3>
   8151c:	e13fd304 	addi	r4,fp,-180
   81520:	1105883a 	add	r2,r2,r4
   81524:	10801304 	addi	r2,r2,76
   81528:	10800017 	ldw	r2,0(r2)
   8152c:	10800284 	addi	r2,r2,10
   81530:	14803fcc 	andi	r18,r2,255
   81534:	e0bfd317 	ldw	r2,-180(fp)
   81538:	14ffffcc 	andi	r19,r2,65535
   8153c:	e0bfd317 	ldw	r2,-180(fp)
   81540:	1004937a 	slli	r2,r2,13
   81544:	1007883a 	mov	r3,r2
   81548:	008002b4 	movhi	r2,10
   8154c:	10bbe604 	addi	r2,r2,-4200
   81550:	1885883a 	add	r2,r3,r2
   81554:	1029883a 	mov	r20,r2
   81558:	e13fd317 	ldw	r4,-180(fp)
   8155c:	01401b04 	movi	r5,108
   81560:	0082b040 	call	82b04 <__mulsi3>
   81564:	1007883a 	mov	r3,r2
   81568:	008002b4 	movhi	r2,10
   8156c:	109c0504 	addi	r2,r2,28692
   81570:	1887883a 	add	r3,r3,r2
   81574:	dcc00015 	stw	r19,0(sp)
   81578:	dd000115 	stw	r20,4(sp)
   8157c:	00820004 	movi	r2,2048
   81580:	d8800215 	stw	r2,8(sp)
   81584:	d8c00315 	stw	r3,12(sp)
   81588:	d8000415 	stw	zero,16(sp)
   8158c:	01000234 	movhi	r4,8
   81590:	21034f04 	addi	r4,r4,3388
   81594:	800b883a 	mov	r5,r16
   81598:	880d883a 	mov	r6,r17
   8159c:	900f883a 	mov	r7,r18
   815a0:	00942a80 	call	942a8 <OSTaskCreateExt>
   815a4:	e0bfd905 	stb	r2,-156(fp)
    								 num_active_task,
    								 &periodic_task_stk[num_active_task][0],
    								 TASK_STACKSIZE,
    								 &periodic_task_tcb[num_active_task],
    								 0);
    			break;
   815a8:	00003206 	br	81674 <custom_scheduler+0x818>
    			default:
    				return_code = OSTaskCreateExt(periodic_task3,
   815ac:	e13fd817 	ldw	r4,-160(fp)
   815b0:	01400304 	movi	r5,12
   815b4:	0082b040 	call	82b04 <__mulsi3>
   815b8:	e43fe604 	addi	r16,fp,-104
   815bc:	80a1883a 	add	r16,r16,r2
   815c0:	e0bfd317 	ldw	r2,-180(fp)
   815c4:	1004937a 	slli	r2,r2,13
   815c8:	1007883a 	mov	r3,r2
   815cc:	008002b4 	movhi	r2,10
   815d0:	10bbe604 	addi	r2,r2,-4200
   815d4:	1087ff04 	addi	r2,r2,8188
   815d8:	18a3883a 	add	r17,r3,r2
   815dc:	e13fd817 	ldw	r4,-160(fp)
   815e0:	01400304 	movi	r5,12
   815e4:	0082b040 	call	82b04 <__mulsi3>
   815e8:	e0ffd304 	addi	r3,fp,-180
   815ec:	10c5883a 	add	r2,r2,r3
   815f0:	10801304 	addi	r2,r2,76
   815f4:	10800017 	ldw	r2,0(r2)
   815f8:	10800284 	addi	r2,r2,10
   815fc:	14803fcc 	andi	r18,r2,255
   81600:	e0bfd317 	ldw	r2,-180(fp)
   81604:	14ffffcc 	andi	r19,r2,65535
   81608:	e0bfd317 	ldw	r2,-180(fp)
   8160c:	1004937a 	slli	r2,r2,13
   81610:	1007883a 	mov	r3,r2
   81614:	008002b4 	movhi	r2,10
   81618:	10bbe604 	addi	r2,r2,-4200
   8161c:	1885883a 	add	r2,r3,r2
   81620:	1029883a 	mov	r20,r2
   81624:	e13fd317 	ldw	r4,-180(fp)
   81628:	01401b04 	movi	r5,108
   8162c:	0082b040 	call	82b04 <__mulsi3>
   81630:	1007883a 	mov	r3,r2
   81634:	008002b4 	movhi	r2,10
   81638:	109c0504 	addi	r2,r2,28692
   8163c:	1887883a 	add	r3,r3,r2
   81640:	dcc00015 	stw	r19,0(sp)
   81644:	dd000115 	stw	r20,4(sp)
   81648:	00820004 	movi	r2,2048
   8164c:	d8800215 	stw	r2,8(sp)
   81650:	d8c00315 	stw	r3,12(sp)
   81654:	d8000415 	stw	zero,16(sp)
   81658:	01000234 	movhi	r4,8
   8165c:	21037304 	addi	r4,r4,3532
   81660:	800b883a 	mov	r5,r16
   81664:	880d883a 	mov	r6,r17
   81668:	900f883a 	mov	r7,r18
   8166c:	00942a80 	call	942a8 <OSTaskCreateExt>
   81670:	e0bfd905 	stb	r2,-156(fp)
    								 TASK_STACKSIZE,
    								 &periodic_task_tcb[num_active_task],
    								 0);
    			break;
    		}
    		alt_ucosii_check_return_code(return_code);
   81674:	e13fd903 	ldbu	r4,-156(fp)
   81678:	00804300 	call	80430 <alt_ucosii_check_return_code>

    		num_active_task++;
   8167c:	e0bfd317 	ldw	r2,-180(fp)
   81680:	10800044 	addi	r2,r2,1
   81684:	e0bfd315 	stw	r2,-180(fp)
		scheduler_info[i].id = temp_pri[i];
		scheduler_info[i].period = temp_p[i];
		task_info[i].priority = temp_pri[i];
    }

    for (i = 0; i < NUM_TASK; i++) {
   81688:	e0bfd817 	ldw	r2,-160(fp)
   8168c:	10800044 	addi	r2,r2,1
   81690:	e0bfd815 	stw	r2,-160(fp)
   81694:	e0bfd817 	ldw	r2,-160(fp)
   81698:	10800110 	cmplti	r2,r2,4
   8169c:	103f0b1e 	bne	r2,zero,812cc <custom_scheduler+0x470>
    		}
    		alt_ucosii_check_return_code(return_code);

    		num_active_task++;
    	}
    	printf("Finish creating initial tasks...\n");
   816a0:	010002b4 	movhi	r4,10
   816a4:	21249e04 	addi	r4,r4,-28040
   816a8:	0082da00 	call	82da0 <puts>

    	printf("Printing task info:\n");
   816ac:	010002b4 	movhi	r4,10
   816b0:	2124a704 	addi	r4,r4,-28004
   816b4:	0082da00 	call	82da0 <puts>
    	for (i = 0; i < num_active_task; i++) {
   816b8:	e03fd815 	stw	zero,-160(fp)
   816bc:	00004906 	br	817e4 <custom_scheduler+0x988>
    		printf("Priority %d: valid=%d, task_id=%d, period=%d, exec_time=%d, os_delay=%d, pri=%d\n",
   816c0:	e13fd817 	ldw	r4,-160(fp)
   816c4:	01400304 	movi	r5,12
   816c8:	0082b040 	call	82b04 <__mulsi3>
   816cc:	e13fd304 	addi	r4,fp,-180
   816d0:	1105883a 	add	r2,r2,r4
   816d4:	10801f04 	addi	r2,r2,124
   816d8:	14000017 	ldw	r16,0(r2)
   816dc:	e13fd817 	ldw	r4,-160(fp)
   816e0:	01400304 	movi	r5,12
   816e4:	0082b040 	call	82b04 <__mulsi3>
   816e8:	e0ffd304 	addi	r3,fp,-180
   816ec:	10c5883a 	add	r2,r2,r3
   816f0:	10802004 	addi	r2,r2,128
   816f4:	14400017 	ldw	r17,0(r2)
   816f8:	e13fd817 	ldw	r4,-160(fp)
   816fc:	01400304 	movi	r5,12
   81700:	0082b040 	call	82b04 <__mulsi3>
   81704:	e13fd304 	addi	r4,fp,-180
   81708:	1105883a 	add	r2,r2,r4
   8170c:	10802104 	addi	r2,r2,132
   81710:	14800017 	ldw	r18,0(r2)
   81714:	e13fd817 	ldw	r4,-160(fp)
   81718:	01400304 	movi	r5,12
   8171c:	0082b040 	call	82b04 <__mulsi3>
   81720:	e0ffd304 	addi	r3,fp,-180
   81724:	10c5883a 	add	r2,r2,r3
   81728:	10802004 	addi	r2,r2,128
   8172c:	11000017 	ldw	r4,0(r2)
   81730:	01400304 	movi	r5,12
   81734:	0082b040 	call	82b04 <__mulsi3>
   81738:	e13fd304 	addi	r4,fp,-180
   8173c:	1105883a 	add	r2,r2,r4
   81740:	10801404 	addi	r2,r2,80
   81744:	14c00017 	ldw	r19,0(r2)
   81748:	e13fd817 	ldw	r4,-160(fp)
   8174c:	01400304 	movi	r5,12
   81750:	0082b040 	call	82b04 <__mulsi3>
   81754:	e0ffd304 	addi	r3,fp,-180
   81758:	10c5883a 	add	r2,r2,r3
   8175c:	10802004 	addi	r2,r2,128
   81760:	11000017 	ldw	r4,0(r2)
   81764:	01400304 	movi	r5,12
   81768:	0082b040 	call	82b04 <__mulsi3>
   8176c:	e13fd304 	addi	r4,fp,-180
   81770:	1105883a 	add	r2,r2,r4
   81774:	10801504 	addi	r2,r2,84
   81778:	15000017 	ldw	r20,0(r2)
   8177c:	e13fd817 	ldw	r4,-160(fp)
   81780:	01400304 	movi	r5,12
   81784:	0082b040 	call	82b04 <__mulsi3>
   81788:	e0ffd304 	addi	r3,fp,-180
   8178c:	10c5883a 	add	r2,r2,r3
   81790:	10802004 	addi	r2,r2,128
   81794:	11000017 	ldw	r4,0(r2)
   81798:	01400304 	movi	r5,12
   8179c:	0082b040 	call	82b04 <__mulsi3>
   817a0:	e13fd304 	addi	r4,fp,-180
   817a4:	1105883a 	add	r2,r2,r4
   817a8:	10801304 	addi	r2,r2,76
   817ac:	10800017 	ldw	r2,0(r2)
   817b0:	dc800015 	stw	r18,0(sp)
   817b4:	dcc00115 	stw	r19,4(sp)
   817b8:	dd000215 	stw	r20,8(sp)
   817bc:	d8800315 	stw	r2,12(sp)
   817c0:	010002b4 	movhi	r4,10
   817c4:	2124ac04 	addi	r4,r4,-27984
   817c8:	e17fd817 	ldw	r5,-160(fp)
   817cc:	800d883a 	mov	r6,r16
   817d0:	880f883a 	mov	r7,r17
   817d4:	0082c880 	call	82c88 <printf>
    		num_active_task++;
    	}
    	printf("Finish creating initial tasks...\n");

    	printf("Printing task info:\n");
    	for (i = 0; i < num_active_task; i++) {
   817d8:	e0bfd817 	ldw	r2,-160(fp)
   817dc:	10800044 	addi	r2,r2,1
   817e0:	e0bfd815 	stw	r2,-160(fp)
   817e4:	e0ffd817 	ldw	r3,-160(fp)
   817e8:	e0bfd317 	ldw	r2,-180(fp)
   817ec:	18bfb416 	blt	r3,r2,816c0 <custom_scheduler+0x864>
    			task_info[scheduler_info[i].id].priority);
    	}

    	// Scheduler never returns
    	while (1) {
    		new_pressed = 0;
   817f0:	e03fd615 	stw	zero,-168(fp)
    	    // Check for PBs
    		for (i = 0; i < NUM_PB_BUTTON; i++) {
   817f4:	e03fd815 	stw	zero,-160(fp)
   817f8:	00002106 	br	81880 <custom_scheduler+0xa24>
    			PB_pressed[i] = 0;
   817fc:	e0bfd817 	ldw	r2,-160(fp)
   81800:	1085883a 	add	r2,r2,r2
   81804:	1085883a 	add	r2,r2,r2
   81808:	e0ffd304 	addi	r3,fp,-180
   8180c:	10c5883a 	add	r2,r2,r3
   81810:	10800704 	addi	r2,r2,28
   81814:	10000015 	stw	zero,0(r2)
    			sem_value = OSSemAccept(PBSemaphore[i]);
   81818:	e0bfd817 	ldw	r2,-160(fp)
   8181c:	00c002b4 	movhi	r3,10
   81820:	18dbe604 	addi	r3,r3,28568
   81824:	1085883a 	add	r2,r2,r2
   81828:	1085883a 	add	r2,r2,r2
   8182c:	10c5883a 	add	r2,r2,r3
   81830:	11000017 	ldw	r4,0(r2)
   81834:	0092f980 	call	92f98 <OSSemAccept>
   81838:	10bfffcc 	andi	r2,r2,65535
   8183c:	e0bfd715 	stw	r2,-164(fp)
    			if (sem_value != 0) {
   81840:	e0bfd717 	ldw	r2,-164(fp)
   81844:	1005003a 	cmpeq	r2,r2,zero
   81848:	10000a1e 	bne	r2,zero,81874 <custom_scheduler+0xa18>
    				PB_pressed[i] = 1;
   8184c:	e0bfd817 	ldw	r2,-160(fp)
   81850:	1085883a 	add	r2,r2,r2
   81854:	1085883a 	add	r2,r2,r2
   81858:	e13fd304 	addi	r4,fp,-180
   8185c:	1105883a 	add	r2,r2,r4
   81860:	10c00704 	addi	r3,r2,28
   81864:	00800044 	movi	r2,1
   81868:	18800015 	stw	r2,0(r3)
    				new_pressed = 1;
   8186c:	00800044 	movi	r2,1
   81870:	e0bfd615 	stw	r2,-168(fp)

    	// Scheduler never returns
    	while (1) {
    		new_pressed = 0;
    	    // Check for PBs
    		for (i = 0; i < NUM_PB_BUTTON; i++) {
   81874:	e0bfd817 	ldw	r2,-160(fp)
   81878:	10800044 	addi	r2,r2,1
   8187c:	e0bfd815 	stw	r2,-160(fp)
   81880:	e0bfd817 	ldw	r2,-160(fp)
   81884:	10800110 	cmplti	r2,r2,4
   81888:	103fdc1e 	bne	r2,zero,817fc <custom_scheduler+0x9a0>
    			if (sem_value != 0) {
    				PB_pressed[i] = 1;
    				new_pressed = 1;
    			}
    		}
    		if (new_pressed != 0) {
   8188c:	e0bfd617 	ldw	r2,-168(fp)
   81890:	1005003a 	cmpeq	r2,r2,zero
   81894:	1000aa1e 	bne	r2,zero,81b40 <custom_scheduler+0xce4>
    			printf("Locking OS scheduler for new scheduling\n");
   81898:	010002b4 	movhi	r4,10
   8189c:	2124c104 	addi	r4,r4,-27900
   818a0:	0082da00 	call	82da0 <puts>
    			OSSchedLock();
   818a4:	008e3600 	call	8e360 <OSSchedLock>

    			for (i = 0; i < num_active_task; i++) {
   818a8:	e03fd815 	stw	zero,-160(fp)
   818ac:	00003b06 	br	8199c <custom_scheduler+0xb40>
    				// check for task to delete if PB is pressed
    				if (scheduler_info[i].valid == 1 && PB_pressed[scheduler_info[i].id] == 1) {
   818b0:	e13fd817 	ldw	r4,-160(fp)
   818b4:	01400304 	movi	r5,12
   818b8:	0082b040 	call	82b04 <__mulsi3>
   818bc:	e0ffd304 	addi	r3,fp,-180
   818c0:	10c5883a 	add	r2,r2,r3
   818c4:	10801f04 	addi	r2,r2,124
   818c8:	10800017 	ldw	r2,0(r2)
   818cc:	10800058 	cmpnei	r2,r2,1
   818d0:	10002f1e 	bne	r2,zero,81990 <custom_scheduler+0xb34>
   818d4:	e13fd817 	ldw	r4,-160(fp)
   818d8:	01400304 	movi	r5,12
   818dc:	0082b040 	call	82b04 <__mulsi3>
   818e0:	e13fd304 	addi	r4,fp,-180
   818e4:	1105883a 	add	r2,r2,r4
   818e8:	10802004 	addi	r2,r2,128
   818ec:	10800017 	ldw	r2,0(r2)
   818f0:	1085883a 	add	r2,r2,r2
   818f4:	1085883a 	add	r2,r2,r2
   818f8:	e0ffd304 	addi	r3,fp,-180
   818fc:	10c5883a 	add	r2,r2,r3
   81900:	10800704 	addi	r2,r2,28
   81904:	10800017 	ldw	r2,0(r2)
   81908:	10800058 	cmpnei	r2,r2,1
   8190c:	1000201e 	bne	r2,zero,81990 <custom_scheduler+0xb34>
    					// task is valid, mark it for deletion
    					printf("-Marking task with id (%d) and priority (%d) for deletion\n", scheduler_info[i].id, i);
   81910:	e13fd817 	ldw	r4,-160(fp)
   81914:	01400304 	movi	r5,12
   81918:	0082b040 	call	82b04 <__mulsi3>
   8191c:	e13fd304 	addi	r4,fp,-180
   81920:	1105883a 	add	r2,r2,r4
   81924:	10802004 	addi	r2,r2,128
   81928:	11400017 	ldw	r5,0(r2)
   8192c:	010002b4 	movhi	r4,10
   81930:	2124cb04 	addi	r4,r4,-27860
   81934:	e1bfd817 	ldw	r6,-160(fp)
   81938:	0082c880 	call	82c88 <printf>
    					scheduler_info[i].valid = -1;
   8193c:	e13fd817 	ldw	r4,-160(fp)
   81940:	01400304 	movi	r5,12
   81944:	0082b040 	call	82b04 <__mulsi3>
   81948:	e0ffd304 	addi	r3,fp,-180
   8194c:	10c5883a 	add	r2,r2,r3
   81950:	10c01f04 	addi	r3,r2,124
   81954:	00bfffc4 	movi	r2,-1
   81958:	18800015 	stw	r2,0(r3)
    					PB_pressed[scheduler_info[i].id] = 0;
   8195c:	e13fd817 	ldw	r4,-160(fp)
   81960:	01400304 	movi	r5,12
   81964:	0082b040 	call	82b04 <__mulsi3>
   81968:	e13fd304 	addi	r4,fp,-180
   8196c:	1105883a 	add	r2,r2,r4
   81970:	10802004 	addi	r2,r2,128
   81974:	10800017 	ldw	r2,0(r2)
   81978:	1085883a 	add	r2,r2,r2
   8197c:	1085883a 	add	r2,r2,r2
   81980:	e0ffd304 	addi	r3,fp,-180
   81984:	10c5883a 	add	r2,r2,r3
   81988:	10800704 	addi	r2,r2,28
   8198c:	10000015 	stw	zero,0(r2)
    		}
    		if (new_pressed != 0) {
    			printf("Locking OS scheduler for new scheduling\n");
    			OSSchedLock();

    			for (i = 0; i < num_active_task; i++) {
   81990:	e0bfd817 	ldw	r2,-160(fp)
   81994:	10800044 	addi	r2,r2,1
   81998:	e0bfd815 	stw	r2,-160(fp)
   8199c:	e0ffd817 	ldw	r3,-160(fp)
   819a0:	e0bfd317 	ldw	r2,-180(fp)
   819a4:	18bfc216 	blt	r3,r2,818b0 <custom_scheduler+0xa54>
    				}
    			}


    		// Delete the corresponding task first
    		num_active_task -= custom_task_del(num_active_task, scheduler_info, task_info);
   819a8:	e17ff204 	addi	r5,fp,-56
   819ac:	e1bfe604 	addi	r6,fp,-104
   819b0:	e13fd317 	ldw	r4,-180(fp)
   819b4:	0081b580 	call	81b58 <custom_task_del>
   819b8:	1007883a 	mov	r3,r2
   819bc:	e0bfd317 	ldw	r2,-180(fp)
   819c0:	10c5c83a 	sub	r2,r2,r3
   819c4:	e0bfd315 	stw	r2,-180(fp)
    		// Create the new task if available
    		num_active_task += custom_task_create(PB_pressed, num_active_task, scheduler_info, task_info);
   819c8:	e13fda04 	addi	r4,fp,-152
   819cc:	e1bff204 	addi	r6,fp,-56
   819d0:	e1ffe604 	addi	r7,fp,-104
   819d4:	e17fd317 	ldw	r5,-180(fp)
   819d8:	0081dbc0 	call	81dbc <custom_task_create>
   819dc:	1007883a 	mov	r3,r2
   819e0:	e0bfd317 	ldw	r2,-180(fp)
   819e4:	10c5883a 	add	r2,r2,r3
   819e8:	e0bfd315 	stw	r2,-180(fp)

    		printf("Printing task info:\n");
   819ec:	010002b4 	movhi	r4,10
   819f0:	2124a704 	addi	r4,r4,-28004
   819f4:	0082da00 	call	82da0 <puts>
    		for (i = 0; i < num_active_task; i++) {
   819f8:	e03fd815 	stw	zero,-160(fp)
   819fc:	00004906 	br	81b24 <custom_scheduler+0xcc8>
    			printf("Priority %d: valid=%d, task_id=%d, period=%d, exec_time=%d, os_delay=%d, pri=%d\n",
   81a00:	e13fd817 	ldw	r4,-160(fp)
   81a04:	01400304 	movi	r5,12
   81a08:	0082b040 	call	82b04 <__mulsi3>
   81a0c:	e13fd304 	addi	r4,fp,-180
   81a10:	1105883a 	add	r2,r2,r4
   81a14:	10801f04 	addi	r2,r2,124
   81a18:	14000017 	ldw	r16,0(r2)
   81a1c:	e13fd817 	ldw	r4,-160(fp)
   81a20:	01400304 	movi	r5,12
   81a24:	0082b040 	call	82b04 <__mulsi3>
   81a28:	e0ffd304 	addi	r3,fp,-180
   81a2c:	10c5883a 	add	r2,r2,r3
   81a30:	10802004 	addi	r2,r2,128
   81a34:	14400017 	ldw	r17,0(r2)
   81a38:	e13fd817 	ldw	r4,-160(fp)
   81a3c:	01400304 	movi	r5,12
   81a40:	0082b040 	call	82b04 <__mulsi3>
   81a44:	e13fd304 	addi	r4,fp,-180
   81a48:	1105883a 	add	r2,r2,r4
   81a4c:	10802104 	addi	r2,r2,132
   81a50:	14800017 	ldw	r18,0(r2)
   81a54:	e13fd817 	ldw	r4,-160(fp)
   81a58:	01400304 	movi	r5,12
   81a5c:	0082b040 	call	82b04 <__mulsi3>
   81a60:	e0ffd304 	addi	r3,fp,-180
   81a64:	10c5883a 	add	r2,r2,r3
   81a68:	10802004 	addi	r2,r2,128
   81a6c:	11000017 	ldw	r4,0(r2)
   81a70:	01400304 	movi	r5,12
   81a74:	0082b040 	call	82b04 <__mulsi3>
   81a78:	e13fd304 	addi	r4,fp,-180
   81a7c:	1105883a 	add	r2,r2,r4
   81a80:	10801404 	addi	r2,r2,80
   81a84:	14c00017 	ldw	r19,0(r2)
   81a88:	e13fd817 	ldw	r4,-160(fp)
   81a8c:	01400304 	movi	r5,12
   81a90:	0082b040 	call	82b04 <__mulsi3>
   81a94:	e0ffd304 	addi	r3,fp,-180
   81a98:	10c5883a 	add	r2,r2,r3
   81a9c:	10802004 	addi	r2,r2,128
   81aa0:	11000017 	ldw	r4,0(r2)
   81aa4:	01400304 	movi	r5,12
   81aa8:	0082b040 	call	82b04 <__mulsi3>
   81aac:	e13fd304 	addi	r4,fp,-180
   81ab0:	1105883a 	add	r2,r2,r4
   81ab4:	10801504 	addi	r2,r2,84
   81ab8:	15000017 	ldw	r20,0(r2)
   81abc:	e13fd817 	ldw	r4,-160(fp)
   81ac0:	01400304 	movi	r5,12
   81ac4:	0082b040 	call	82b04 <__mulsi3>
   81ac8:	e0ffd304 	addi	r3,fp,-180
   81acc:	10c5883a 	add	r2,r2,r3
   81ad0:	10802004 	addi	r2,r2,128
   81ad4:	11000017 	ldw	r4,0(r2)
   81ad8:	01400304 	movi	r5,12
   81adc:	0082b040 	call	82b04 <__mulsi3>
   81ae0:	e13fd304 	addi	r4,fp,-180
   81ae4:	1105883a 	add	r2,r2,r4
   81ae8:	10801304 	addi	r2,r2,76
   81aec:	10800017 	ldw	r2,0(r2)
   81af0:	dc800015 	stw	r18,0(sp)
   81af4:	dcc00115 	stw	r19,4(sp)
   81af8:	dd000215 	stw	r20,8(sp)
   81afc:	d8800315 	stw	r2,12(sp)
   81b00:	010002b4 	movhi	r4,10
   81b04:	2124ac04 	addi	r4,r4,-27984
   81b08:	e17fd817 	ldw	r5,-160(fp)
   81b0c:	800d883a 	mov	r6,r16
   81b10:	880f883a 	mov	r7,r17
   81b14:	0082c880 	call	82c88 <printf>
    		num_active_task -= custom_task_del(num_active_task, scheduler_info, task_info);
    		// Create the new task if available
    		num_active_task += custom_task_create(PB_pressed, num_active_task, scheduler_info, task_info);

    		printf("Printing task info:\n");
    		for (i = 0; i < num_active_task; i++) {
   81b18:	e0bfd817 	ldw	r2,-160(fp)
   81b1c:	10800044 	addi	r2,r2,1
   81b20:	e0bfd815 	stw	r2,-160(fp)
   81b24:	e0ffd817 	ldw	r3,-160(fp)
   81b28:	e0bfd317 	ldw	r2,-180(fp)
   81b2c:	18bfb416 	blt	r3,r2,81a00 <custom_scheduler+0xba4>
    				task_info[scheduler_info[i].id].execution_time,
    				task_info[scheduler_info[i].id].os_delay,
    				task_info[scheduler_info[i].id].priority);
    		}

    		printf("Unlocking OS scheduler\n");
   81b30:	010002b4 	movhi	r4,10
   81b34:	2124da04 	addi	r4,r4,-27800
   81b38:	0082da00 	call	82da0 <puts>
    		OSSchedUnlock();
   81b3c:	008e3ec0 	call	8e3ec <OSSchedUnlock>
    		}


    		OSTimeDlyHMSM(0, 0, 3, 0);
   81b40:	0009883a 	mov	r4,zero
   81b44:	000b883a 	mov	r5,zero
   81b48:	018000c4 	movi	r6,3
   81b4c:	000f883a 	mov	r7,zero
   81b50:	00956ec0 	call	956ec <OSTimeDlyHMSM>
    	}
   81b54:	003f2606 	br	817f0 <custom_scheduler+0x994>

00081b58 <custom_task_del>:
    }

// Function for deleting a task from the OS, and from the data structure task_info
int custom_task_del(int num_active_task, scheduler_info_struct scheduler_info[], task_info_struct task_info[]) {
   81b58:	defff704 	addi	sp,sp,-36
   81b5c:	dfc00815 	stw	ra,32(sp)
   81b60:	df000715 	stw	fp,28(sp)
   81b64:	dc000615 	stw	r16,24(sp)
   81b68:	df000604 	addi	fp,sp,24
   81b6c:	e13ffd15 	stw	r4,-12(fp)
   81b70:	e17ffe15 	stw	r5,-8(fp)
   81b74:	e1bfff15 	stw	r6,-4(fp)

	int i, total_task_del = 0;
   81b78:	e03ffb15 	stw	zero,-20(fp)
	INT8U return_code = OS_NO_ERR;
   81b7c:	e03ffa05 	stb	zero,-24(fp)

	printf("Deleting task(s) from the OS ...\n");
   81b80:	010002b4 	movhi	r4,10
   81b84:	2124e004 	addi	r4,r4,-27776
   81b88:	0082da00 	call	82da0 <puts>
	for (i = 0; i < num_active_task; i++) {
   81b8c:	e03ffc15 	stw	zero,-16(fp)
   81b90:	00006e06 	br	81d4c <custom_task_del+0x1f4>
		if (scheduler_info[i].valid == -1) {
   81b94:	e13ffc17 	ldw	r4,-16(fp)
   81b98:	01400304 	movi	r5,12
   81b9c:	0082b040 	call	82b04 <__mulsi3>
   81ba0:	1007883a 	mov	r3,r2
   81ba4:	e0bffe17 	ldw	r2,-8(fp)
   81ba8:	1885883a 	add	r2,r3,r2
   81bac:	10800017 	ldw	r2,0(r2)
   81bb0:	10bfffd8 	cmpnei	r2,r2,-1
   81bb4:	10000b1e 	bne	r2,zero,81be4 <custom_task_del+0x8c>
			// delete tasks that were marked for deletion
			return_code = OSTaskDel(TASK_START_PRIORITY+i);
   81bb8:	e0bffc17 	ldw	r2,-16(fp)
   81bbc:	10800284 	addi	r2,r2,10
   81bc0:	11003fcc 	andi	r4,r2,255
   81bc4:	00944a80 	call	944a8 <OSTaskDel>
   81bc8:	e0bffa05 	stb	r2,-24(fp)
			alt_ucosii_check_return_code(return_code);
   81bcc:	e13ffa03 	ldbu	r4,-24(fp)
   81bd0:	00804300 	call	80430 <alt_ucosii_check_return_code>
			total_task_del++;
   81bd4:	e0bffb17 	ldw	r2,-20(fp)
   81bd8:	10800044 	addi	r2,r2,1
   81bdc:	e0bffb15 	stw	r2,-20(fp)
   81be0:	00005706 	br	81d40 <custom_task_del+0x1e8>
		}
		else {
			// active tasks will upgrade their priority
			if (total_task_del != 0) {
   81be4:	e0bffb17 	ldw	r2,-20(fp)
   81be8:	1005003a 	cmpeq	r2,r2,zero
   81bec:	1000541e 	bne	r2,zero,81d40 <custom_task_del+0x1e8>
				return_code = OSTaskChangePrio(TASK_START_PRIORITY+i, TASK_START_PRIORITY+i-total_task_del);
   81bf0:	e0bffc17 	ldw	r2,-16(fp)
   81bf4:	10800284 	addi	r2,r2,10
   81bf8:	11003fcc 	andi	r4,r2,255
   81bfc:	e0bffc17 	ldw	r2,-16(fp)
   81c00:	1007883a 	mov	r3,r2
   81c04:	e0bffb17 	ldw	r2,-20(fp)
   81c08:	1885c83a 	sub	r2,r3,r2
   81c0c:	10800284 	addi	r2,r2,10
   81c10:	11403fcc 	andi	r5,r2,255
   81c14:	0093b600 	call	93b60 <OSTaskChangePrio>
   81c18:	e0bffa05 	stb	r2,-24(fp)
				alt_ucosii_check_return_code(return_code);
   81c1c:	e13ffa03 	ldbu	r4,-24(fp)
   81c20:	00804300 	call	80430 <alt_ucosii_check_return_code>
				scheduler_info[i-total_task_del].valid = scheduler_info[i].valid;
   81c24:	e0fffc17 	ldw	r3,-16(fp)
   81c28:	e0bffb17 	ldw	r2,-20(fp)
   81c2c:	1885c83a 	sub	r2,r3,r2
   81c30:	1009883a 	mov	r4,r2
   81c34:	01400304 	movi	r5,12
   81c38:	0082b040 	call	82b04 <__mulsi3>
   81c3c:	1007883a 	mov	r3,r2
   81c40:	e0bffe17 	ldw	r2,-8(fp)
   81c44:	18a1883a 	add	r16,r3,r2
   81c48:	e13ffc17 	ldw	r4,-16(fp)
   81c4c:	01400304 	movi	r5,12
   81c50:	0082b040 	call	82b04 <__mulsi3>
   81c54:	1007883a 	mov	r3,r2
   81c58:	e0bffe17 	ldw	r2,-8(fp)
   81c5c:	1885883a 	add	r2,r3,r2
   81c60:	10800017 	ldw	r2,0(r2)
   81c64:	80800015 	stw	r2,0(r16)
				scheduler_info[i-total_task_del].id = scheduler_info[i].id;
   81c68:	e0fffc17 	ldw	r3,-16(fp)
   81c6c:	e0bffb17 	ldw	r2,-20(fp)
   81c70:	1885c83a 	sub	r2,r3,r2
   81c74:	1009883a 	mov	r4,r2
   81c78:	01400304 	movi	r5,12
   81c7c:	0082b040 	call	82b04 <__mulsi3>
   81c80:	1007883a 	mov	r3,r2
   81c84:	e0bffe17 	ldw	r2,-8(fp)
   81c88:	18a1883a 	add	r16,r3,r2
   81c8c:	e13ffc17 	ldw	r4,-16(fp)
   81c90:	01400304 	movi	r5,12
   81c94:	0082b040 	call	82b04 <__mulsi3>
   81c98:	1007883a 	mov	r3,r2
   81c9c:	e0bffe17 	ldw	r2,-8(fp)
   81ca0:	1885883a 	add	r2,r3,r2
   81ca4:	10800117 	ldw	r2,4(r2)
   81ca8:	80800115 	stw	r2,4(r16)
				scheduler_info[i-total_task_del].period = scheduler_info[i].period;
   81cac:	e0fffc17 	ldw	r3,-16(fp)
   81cb0:	e0bffb17 	ldw	r2,-20(fp)
   81cb4:	1885c83a 	sub	r2,r3,r2
   81cb8:	1009883a 	mov	r4,r2
   81cbc:	01400304 	movi	r5,12
   81cc0:	0082b040 	call	82b04 <__mulsi3>
   81cc4:	1007883a 	mov	r3,r2
   81cc8:	e0bffe17 	ldw	r2,-8(fp)
   81ccc:	18a1883a 	add	r16,r3,r2
   81cd0:	e13ffc17 	ldw	r4,-16(fp)
   81cd4:	01400304 	movi	r5,12
   81cd8:	0082b040 	call	82b04 <__mulsi3>
   81cdc:	1007883a 	mov	r3,r2
   81ce0:	e0bffe17 	ldw	r2,-8(fp)
   81ce4:	1885883a 	add	r2,r3,r2
   81ce8:	10800217 	ldw	r2,8(r2)
   81cec:	80800215 	stw	r2,8(r16)
				task_info[scheduler_info[i-total_task_del].id].priority = i-total_task_del;
   81cf0:	e0fffc17 	ldw	r3,-16(fp)
   81cf4:	e0bffb17 	ldw	r2,-20(fp)
   81cf8:	1885c83a 	sub	r2,r3,r2
   81cfc:	1009883a 	mov	r4,r2
   81d00:	01400304 	movi	r5,12
   81d04:	0082b040 	call	82b04 <__mulsi3>
   81d08:	1007883a 	mov	r3,r2
   81d0c:	e0bffe17 	ldw	r2,-8(fp)
   81d10:	1885883a 	add	r2,r3,r2
   81d14:	10800117 	ldw	r2,4(r2)
   81d18:	1009883a 	mov	r4,r2
   81d1c:	01400304 	movi	r5,12
   81d20:	0082b040 	call	82b04 <__mulsi3>
   81d24:	1007883a 	mov	r3,r2
   81d28:	e0bfff17 	ldw	r2,-4(fp)
   81d2c:	1889883a 	add	r4,r3,r2
   81d30:	e0fffc17 	ldw	r3,-16(fp)
   81d34:	e0bffb17 	ldw	r2,-20(fp)
   81d38:	1885c83a 	sub	r2,r3,r2
   81d3c:	20800015 	stw	r2,0(r4)

	int i, total_task_del = 0;
	INT8U return_code = OS_NO_ERR;

	printf("Deleting task(s) from the OS ...\n");
	for (i = 0; i < num_active_task; i++) {
   81d40:	e0bffc17 	ldw	r2,-16(fp)
   81d44:	10800044 	addi	r2,r2,1
   81d48:	e0bffc15 	stw	r2,-16(fp)
   81d4c:	e0fffc17 	ldw	r3,-16(fp)
   81d50:	e0bffd17 	ldw	r2,-12(fp)
   81d54:	18bf8f16 	blt	r3,r2,81b94 <custom_task_del+0x3c>
			}
		}
	}

	// clear the valid flag for all the inactive tasks
	for (i = num_active_task - total_task_del; i < num_active_task; i++)
   81d58:	e0bffd17 	ldw	r2,-12(fp)
   81d5c:	e0fffb17 	ldw	r3,-20(fp)
   81d60:	10c5c83a 	sub	r2,r2,r3
   81d64:	e0bffc15 	stw	r2,-16(fp)
   81d68:	00000a06 	br	81d94 <custom_task_del+0x23c>
			scheduler_info[i].valid = 0;
   81d6c:	e13ffc17 	ldw	r4,-16(fp)
   81d70:	01400304 	movi	r5,12
   81d74:	0082b040 	call	82b04 <__mulsi3>
   81d78:	1007883a 	mov	r3,r2
   81d7c:	e0bffe17 	ldw	r2,-8(fp)
   81d80:	1885883a 	add	r2,r3,r2
   81d84:	10000015 	stw	zero,0(r2)
			}
		}
	}

	// clear the valid flag for all the inactive tasks
	for (i = num_active_task - total_task_del; i < num_active_task; i++)
   81d88:	e0bffc17 	ldw	r2,-16(fp)
   81d8c:	10800044 	addi	r2,r2,1
   81d90:	e0bffc15 	stw	r2,-16(fp)
   81d94:	e0fffc17 	ldw	r3,-16(fp)
   81d98:	e0bffd17 	ldw	r2,-12(fp)
   81d9c:	18bff316 	blt	r3,r2,81d6c <custom_task_del+0x214>
			scheduler_info[i].valid = 0;

	return total_task_del;
   81da0:	e0bffb17 	ldw	r2,-20(fp)
}
   81da4:	e037883a 	mov	sp,fp
   81da8:	dfc00217 	ldw	ra,8(sp)
   81dac:	df000117 	ldw	fp,4(sp)
   81db0:	dc000017 	ldw	r16,0(sp)
   81db4:	dec00304 	addi	sp,sp,12
   81db8:	f800283a 	ret

00081dbc <custom_task_create>:

// Function for creating a task in the OS, and update the data structure task_info
// The new task has the lowest priority among the existing tasks
int custom_task_create(int PB_pressed[], int num_active_task, scheduler_info_struct scheduler_info[], task_info_struct task_info[]) {
   81dbc:	deffdd04 	addi	sp,sp,-140
   81dc0:	dfc02215 	stw	ra,136(sp)
   81dc4:	df002115 	stw	fp,132(sp)
   81dc8:	dd002015 	stw	r20,128(sp)
   81dcc:	dcc01f15 	stw	r19,124(sp)
   81dd0:	dc801e15 	stw	r18,120(sp)
   81dd4:	dc401d15 	stw	r17,116(sp)
   81dd8:	dc001c15 	stw	r16,112(sp)
   81ddc:	df001c04 	addi	fp,sp,112
   81de0:	e13ffb15 	stw	r4,-20(fp)
   81de4:	e17ffc15 	stw	r5,-16(fp)
   81de8:	e1bffd15 	stw	r6,-12(fp)
   81dec:	e1fffe15 	stw	r7,-8(fp)
	int i;
	int num_task_created;
	INT8U return_code = OS_NO_ERR;
   81df0:	e03fec05 	stb	zero,-80(fp)
	int temp;
	int temp_p[NUM_TASK];
	int temp_pri[NUM_TASK];
	int temp_id[NUM_TASK];
	int y;
	y=0;
   81df4:	e03fe915 	stw	zero,-92(fp)

	num_task_created = 0;
   81df8:	e03fed15 	stw	zero,-76(fp)
	printf("Creating task(s) in the OS ...\n");
   81dfc:	010002b4 	movhi	r4,10
   81e00:	2124e904 	addi	r4,r4,-27740
   81e04:	0082da00 	call	82da0 <puts>

	for (i = 0; i < NUM_PB_BUTTON; i++) {
   81e08:	e03fee15 	stw	zero,-72(fp)
   81e0c:	00006406 	br	81fa0 <custom_task_create+0x1e4>
		if (PB_pressed[i] == 1) {
   81e10:	e0bfee17 	ldw	r2,-72(fp)
   81e14:	1085883a 	add	r2,r2,r2
   81e18:	1085883a 	add	r2,r2,r2
   81e1c:	1007883a 	mov	r3,r2
   81e20:	e0bffb17 	ldw	r2,-20(fp)
   81e24:	1885883a 	add	r2,r3,r2
   81e28:	10800017 	ldw	r2,0(r2)
   81e2c:	10800058 	cmpnei	r2,r2,1
   81e30:	1000581e 	bne	r2,zero,81f94 <custom_task_create+0x1d8>
			//printf("update priorities 1 ...\n");
			y=1;
   81e34:	00800044 	movi	r2,1
   81e38:	e0bfe915 	stw	r2,-92(fp)
			task_info[i].execution_time = rand() % EXECUTION_TIME_LIMIT + 1;
   81e3c:	e13fee17 	ldw	r4,-72(fp)
   81e40:	01400304 	movi	r5,12
   81e44:	0082b040 	call	82b04 <__mulsi3>
   81e48:	1007883a 	mov	r3,r2
   81e4c:	e0bffe17 	ldw	r2,-8(fp)
   81e50:	18a1883a 	add	r16,r3,r2
   81e54:	0082dd00 	call	82dd0 <rand>
   81e58:	1009883a 	mov	r4,r2
   81e5c:	0144e204 	movi	r5,5000
   81e60:	0082a940 	call	82a94 <__modsi3>
   81e64:	10800044 	addi	r2,r2,1
   81e68:	80800115 	stw	r2,4(r16)
			task_info[i].os_delay = rand() % OS_DELAY_LIMIT + 1;
   81e6c:	e13fee17 	ldw	r4,-72(fp)
   81e70:	01400304 	movi	r5,12
   81e74:	0082b040 	call	82b04 <__mulsi3>
   81e78:	1007883a 	mov	r3,r2
   81e7c:	e0bffe17 	ldw	r2,-8(fp)
   81e80:	18a1883a 	add	r16,r3,r2
   81e84:	0082dd00 	call	82dd0 <rand>
   81e88:	1009883a 	mov	r4,r2
   81e8c:	01400144 	movi	r5,5
   81e90:	0082a940 	call	82a94 <__modsi3>
   81e94:	10800044 	addi	r2,r2,1
   81e98:	80800215 	stw	r2,8(r16)
			task_info[i].priority = num_active_task + num_task_created;
   81e9c:	e13fee17 	ldw	r4,-72(fp)
   81ea0:	01400304 	movi	r5,12
   81ea4:	0082b040 	call	82b04 <__mulsi3>
   81ea8:	1007883a 	mov	r3,r2
   81eac:	e0bffe17 	ldw	r2,-8(fp)
   81eb0:	1889883a 	add	r4,r3,r2
   81eb4:	e0fffc17 	ldw	r3,-16(fp)
   81eb8:	e0bfed17 	ldw	r2,-76(fp)
   81ebc:	1885883a 	add	r2,r3,r2
   81ec0:	20800015 	stw	r2,0(r4)
			
            scheduler_info[num_active_task + num_task_created].valid = 1;
   81ec4:	e0fffc17 	ldw	r3,-16(fp)
   81ec8:	e0bfed17 	ldw	r2,-76(fp)
   81ecc:	1885883a 	add	r2,r3,r2
   81ed0:	1009883a 	mov	r4,r2
   81ed4:	01400304 	movi	r5,12
   81ed8:	0082b040 	call	82b04 <__mulsi3>
   81edc:	1007883a 	mov	r3,r2
   81ee0:	e0bffd17 	ldw	r2,-12(fp)
   81ee4:	1887883a 	add	r3,r3,r2
   81ee8:	00800044 	movi	r2,1
   81eec:	18800015 	stw	r2,0(r3)
            scheduler_info[num_active_task + num_task_created].period = task_info[i].execution_time + task_info[i].os_delay * 1000;
   81ef0:	e0fffc17 	ldw	r3,-16(fp)
   81ef4:	e0bfed17 	ldw	r2,-76(fp)
   81ef8:	1885883a 	add	r2,r3,r2
   81efc:	1009883a 	mov	r4,r2
   81f00:	01400304 	movi	r5,12
   81f04:	0082b040 	call	82b04 <__mulsi3>
   81f08:	1007883a 	mov	r3,r2
   81f0c:	e0bffd17 	ldw	r2,-12(fp)
   81f10:	18a1883a 	add	r16,r3,r2
   81f14:	e13fee17 	ldw	r4,-72(fp)
   81f18:	01400304 	movi	r5,12
   81f1c:	0082b040 	call	82b04 <__mulsi3>
   81f20:	1007883a 	mov	r3,r2
   81f24:	e0bffe17 	ldw	r2,-8(fp)
   81f28:	1885883a 	add	r2,r3,r2
   81f2c:	14400117 	ldw	r17,4(r2)
   81f30:	e13fee17 	ldw	r4,-72(fp)
   81f34:	01400304 	movi	r5,12
   81f38:	0082b040 	call	82b04 <__mulsi3>
   81f3c:	1007883a 	mov	r3,r2
   81f40:	e0bffe17 	ldw	r2,-8(fp)
   81f44:	1885883a 	add	r2,r3,r2
   81f48:	11000217 	ldw	r4,8(r2)
   81f4c:	0140fa04 	movi	r5,1000
   81f50:	0082b040 	call	82b04 <__mulsi3>
   81f54:	8885883a 	add	r2,r17,r2
   81f58:	80800215 	stw	r2,8(r16)
            scheduler_info[num_active_task + num_task_created].id = i;
   81f5c:	e0fffc17 	ldw	r3,-16(fp)
   81f60:	e0bfed17 	ldw	r2,-76(fp)
   81f64:	1885883a 	add	r2,r3,r2
   81f68:	1009883a 	mov	r4,r2
   81f6c:	01400304 	movi	r5,12
   81f70:	0082b040 	call	82b04 <__mulsi3>
   81f74:	1007883a 	mov	r3,r2
   81f78:	e0bffd17 	ldw	r2,-12(fp)
   81f7c:	1887883a 	add	r3,r3,r2
   81f80:	e0bfee17 	ldw	r2,-72(fp)
   81f84:	18800115 	stw	r2,4(r3)

            num_task_created++;
   81f88:	e0bfed17 	ldw	r2,-76(fp)
   81f8c:	10800044 	addi	r2,r2,1
   81f90:	e0bfed15 	stw	r2,-76(fp)
	y=0;

	num_task_created = 0;
	printf("Creating task(s) in the OS ...\n");

	for (i = 0; i < NUM_PB_BUTTON; i++) {
   81f94:	e0bfee17 	ldw	r2,-72(fp)
   81f98:	10800044 	addi	r2,r2,1
   81f9c:	e0bfee15 	stw	r2,-72(fp)
   81fa0:	e0bfee17 	ldw	r2,-72(fp)
   81fa4:	10800110 	cmplti	r2,r2,4
   81fa8:	103f991e 	bne	r2,zero,81e10 <custom_task_create+0x54>
            num_task_created++;
		}
	}


	if (y == 1) {
   81fac:	e0bfe917 	ldw	r2,-92(fp)
   81fb0:	10800058 	cmpnei	r2,r2,1
   81fb4:	1001451e 	bne	r2,zero,824cc <custom_task_create+0x710>
		//printf("update priorities ...\n");
		for (i = 0; i < num_active_task+num_task_created; i++) {
   81fb8:	e03fee15 	stw	zero,-72(fp)
   81fbc:	00003406 	br	82090 <custom_task_create+0x2d4>
			temp_pri[i] = task_info[scheduler_info[i].id].priority;
   81fc0:	e43fee17 	ldw	r16,-72(fp)
   81fc4:	e13fee17 	ldw	r4,-72(fp)
   81fc8:	01400304 	movi	r5,12
   81fcc:	0082b040 	call	82b04 <__mulsi3>
   81fd0:	1007883a 	mov	r3,r2
   81fd4:	e0bffd17 	ldw	r2,-12(fp)
   81fd8:	1885883a 	add	r2,r3,r2
   81fdc:	10800117 	ldw	r2,4(r2)
   81fe0:	1009883a 	mov	r4,r2
   81fe4:	01400304 	movi	r5,12
   81fe8:	0082b040 	call	82b04 <__mulsi3>
   81fec:	1007883a 	mov	r3,r2
   81ff0:	e0bffe17 	ldw	r2,-8(fp)
   81ff4:	1885883a 	add	r2,r3,r2
   81ff8:	10c00017 	ldw	r3,0(r2)
   81ffc:	8405883a 	add	r2,r16,r16
   82000:	1085883a 	add	r2,r2,r2
   82004:	e13fe904 	addi	r4,fp,-92
   82008:	1105883a 	add	r2,r2,r4
   8200c:	10800a04 	addi	r2,r2,40
   82010:	10c00015 	stw	r3,0(r2)
			temp_p[i] = scheduler_info[i].period;
   82014:	e43fee17 	ldw	r16,-72(fp)
   82018:	e13fee17 	ldw	r4,-72(fp)
   8201c:	01400304 	movi	r5,12
   82020:	0082b040 	call	82b04 <__mulsi3>
   82024:	1007883a 	mov	r3,r2
   82028:	e0bffd17 	ldw	r2,-12(fp)
   8202c:	1885883a 	add	r2,r3,r2
   82030:	10c00217 	ldw	r3,8(r2)
   82034:	8405883a 	add	r2,r16,r16
   82038:	1085883a 	add	r2,r2,r2
   8203c:	e13fe904 	addi	r4,fp,-92
   82040:	1105883a 	add	r2,r2,r4
   82044:	10800604 	addi	r2,r2,24
   82048:	10c00015 	stw	r3,0(r2)
			temp_id[i] = scheduler_info[i].id;
   8204c:	e43fee17 	ldw	r16,-72(fp)
   82050:	e13fee17 	ldw	r4,-72(fp)
   82054:	01400304 	movi	r5,12
   82058:	0082b040 	call	82b04 <__mulsi3>
   8205c:	1007883a 	mov	r3,r2
   82060:	e0bffd17 	ldw	r2,-12(fp)
   82064:	1885883a 	add	r2,r3,r2
   82068:	10c00117 	ldw	r3,4(r2)
   8206c:	8405883a 	add	r2,r16,r16
   82070:	1085883a 	add	r2,r2,r2
   82074:	e13fe904 	addi	r4,fp,-92
   82078:	1105883a 	add	r2,r2,r4
   8207c:	10800e04 	addi	r2,r2,56
   82080:	10c00015 	stw	r3,0(r2)
	}


	if (y == 1) {
		//printf("update priorities ...\n");
		for (i = 0; i < num_active_task+num_task_created; i++) {
   82084:	e0bfee17 	ldw	r2,-72(fp)
   82088:	10800044 	addi	r2,r2,1
   8208c:	e0bfee15 	stw	r2,-72(fp)
   82090:	e0fffc17 	ldw	r3,-16(fp)
   82094:	e0bfed17 	ldw	r2,-76(fp)
   82098:	1887883a 	add	r3,r3,r2
   8209c:	e0bfee17 	ldw	r2,-72(fp)
   820a0:	10ffc716 	blt	r2,r3,81fc0 <custom_task_create+0x204>
			temp_pri[i] = task_info[scheduler_info[i].id].priority;
			temp_p[i] = scheduler_info[i].period;
			temp_id[i] = scheduler_info[i].id;
		}
		for (i = 0; i < num_active_task+num_task_created-1; i++) {
   820a4:	e03fee15 	stw	zero,-72(fp)
   820a8:	00006006 	br	8222c <custom_task_create+0x470>
			for (x = 0; x < num_active_task+num_task_created-i-1; x++) {
   820ac:	e03feb15 	stw	zero,-84(fp)
   820b0:	00005306 	br	82200 <custom_task_create+0x444>
				if (temp_p[x] > temp_p[x+1]) {
   820b4:	e0bfeb17 	ldw	r2,-84(fp)
   820b8:	1085883a 	add	r2,r2,r2
   820bc:	1085883a 	add	r2,r2,r2
   820c0:	e0ffe904 	addi	r3,fp,-92
   820c4:	10c5883a 	add	r2,r2,r3
   820c8:	10800604 	addi	r2,r2,24
   820cc:	10c00017 	ldw	r3,0(r2)
   820d0:	e0bfeb17 	ldw	r2,-84(fp)
   820d4:	10800044 	addi	r2,r2,1
   820d8:	1085883a 	add	r2,r2,r2
   820dc:	1085883a 	add	r2,r2,r2
   820e0:	e13fe904 	addi	r4,fp,-92
   820e4:	1105883a 	add	r2,r2,r4
   820e8:	10800604 	addi	r2,r2,24
   820ec:	10800017 	ldw	r2,0(r2)
   820f0:	10c0400e 	bge	r2,r3,821f4 <custom_task_create+0x438>
					temp = temp_p[x];
   820f4:	e0bfeb17 	ldw	r2,-84(fp)
   820f8:	1085883a 	add	r2,r2,r2
   820fc:	1085883a 	add	r2,r2,r2
   82100:	e0ffe904 	addi	r3,fp,-92
   82104:	10c5883a 	add	r2,r2,r3
   82108:	10800604 	addi	r2,r2,24
   8210c:	10800017 	ldw	r2,0(r2)
   82110:	e0bfea15 	stw	r2,-88(fp)
					temp_p[x] = temp_p[x+1];
   82114:	e13feb17 	ldw	r4,-84(fp)
   82118:	e0bfeb17 	ldw	r2,-84(fp)
   8211c:	10800044 	addi	r2,r2,1
   82120:	1085883a 	add	r2,r2,r2
   82124:	1085883a 	add	r2,r2,r2
   82128:	e0ffe904 	addi	r3,fp,-92
   8212c:	10c5883a 	add	r2,r2,r3
   82130:	10800604 	addi	r2,r2,24
   82134:	10c00017 	ldw	r3,0(r2)
   82138:	2105883a 	add	r2,r4,r4
   8213c:	1085883a 	add	r2,r2,r2
   82140:	e13fe904 	addi	r4,fp,-92
   82144:	1105883a 	add	r2,r2,r4
   82148:	10800604 	addi	r2,r2,24
   8214c:	10c00015 	stw	r3,0(r2)
					temp_p[x+1] = temp;
   82150:	e0bfeb17 	ldw	r2,-84(fp)
   82154:	10800044 	addi	r2,r2,1
   82158:	1085883a 	add	r2,r2,r2
   8215c:	1085883a 	add	r2,r2,r2
   82160:	e0ffe904 	addi	r3,fp,-92
   82164:	10c5883a 	add	r2,r2,r3
   82168:	10c00604 	addi	r3,r2,24
   8216c:	e0bfea17 	ldw	r2,-88(fp)
   82170:	18800015 	stw	r2,0(r3)
					temp = temp_id[x];
   82174:	e0bfeb17 	ldw	r2,-84(fp)
   82178:	1085883a 	add	r2,r2,r2
   8217c:	1085883a 	add	r2,r2,r2
   82180:	e13fe904 	addi	r4,fp,-92
   82184:	1105883a 	add	r2,r2,r4
   82188:	10800e04 	addi	r2,r2,56
   8218c:	10800017 	ldw	r2,0(r2)
   82190:	e0bfea15 	stw	r2,-88(fp)
					temp_id[x] = temp_id[x+1];
   82194:	e13feb17 	ldw	r4,-84(fp)
   82198:	e0bfeb17 	ldw	r2,-84(fp)
   8219c:	10800044 	addi	r2,r2,1
   821a0:	1085883a 	add	r2,r2,r2
   821a4:	1085883a 	add	r2,r2,r2
   821a8:	e0ffe904 	addi	r3,fp,-92
   821ac:	10c5883a 	add	r2,r2,r3
   821b0:	10800e04 	addi	r2,r2,56
   821b4:	10c00017 	ldw	r3,0(r2)
   821b8:	2105883a 	add	r2,r4,r4
   821bc:	1085883a 	add	r2,r2,r2
   821c0:	e13fe904 	addi	r4,fp,-92
   821c4:	1105883a 	add	r2,r2,r4
   821c8:	10800e04 	addi	r2,r2,56
   821cc:	10c00015 	stw	r3,0(r2)
					temp_id[x+1] = temp;
   821d0:	e0bfeb17 	ldw	r2,-84(fp)
   821d4:	10800044 	addi	r2,r2,1
   821d8:	1085883a 	add	r2,r2,r2
   821dc:	1085883a 	add	r2,r2,r2
   821e0:	e0ffe904 	addi	r3,fp,-92
   821e4:	10c5883a 	add	r2,r2,r3
   821e8:	10c00e04 	addi	r3,r2,56
   821ec:	e0bfea17 	ldw	r2,-88(fp)
   821f0:	18800015 	stw	r2,0(r3)
			temp_pri[i] = task_info[scheduler_info[i].id].priority;
			temp_p[i] = scheduler_info[i].period;
			temp_id[i] = scheduler_info[i].id;
		}
		for (i = 0; i < num_active_task+num_task_created-1; i++) {
			for (x = 0; x < num_active_task+num_task_created-i-1; x++) {
   821f4:	e0bfeb17 	ldw	r2,-84(fp)
   821f8:	10800044 	addi	r2,r2,1
   821fc:	e0bfeb15 	stw	r2,-84(fp)
   82200:	e0fffc17 	ldw	r3,-16(fp)
   82204:	e0bfed17 	ldw	r2,-76(fp)
   82208:	1887883a 	add	r3,r3,r2
   8220c:	e0bfee17 	ldw	r2,-72(fp)
   82210:	1885c83a 	sub	r2,r3,r2
   82214:	10ffffc4 	addi	r3,r2,-1
   82218:	e0bfeb17 	ldw	r2,-84(fp)
   8221c:	10ffa516 	blt	r2,r3,820b4 <custom_task_create+0x2f8>
		for (i = 0; i < num_active_task+num_task_created; i++) {
			temp_pri[i] = task_info[scheduler_info[i].id].priority;
			temp_p[i] = scheduler_info[i].period;
			temp_id[i] = scheduler_info[i].id;
		}
		for (i = 0; i < num_active_task+num_task_created-1; i++) {
   82220:	e0bfee17 	ldw	r2,-72(fp)
   82224:	10800044 	addi	r2,r2,1
   82228:	e0bfee15 	stw	r2,-72(fp)
   8222c:	e0fffc17 	ldw	r3,-16(fp)
   82230:	e0bfed17 	ldw	r2,-76(fp)
   82234:	1885883a 	add	r2,r3,r2
   82238:	10ffffc4 	addi	r3,r2,-1
   8223c:	e0bfee17 	ldw	r2,-72(fp)
   82240:	10ff9a16 	blt	r2,r3,820ac <custom_task_create+0x2f0>
					temp_id[x+1] = temp;
				}
			}
		}

		for (i = 0; i < num_active_task; i++) {
   82244:	e03fee15 	stw	zero,-72(fp)
   82248:	00002806 	br	822ec <custom_task_create+0x530>
			return_code = OSTaskChangePrio(TASK_START_PRIORITY+task_info[scheduler_info[i].id].priority, TASK_START_PRIORITY+task_info[scheduler_info[i].id].priority+4);
   8224c:	e13fee17 	ldw	r4,-72(fp)
   82250:	01400304 	movi	r5,12
   82254:	0082b040 	call	82b04 <__mulsi3>
   82258:	1007883a 	mov	r3,r2
   8225c:	e0bffd17 	ldw	r2,-12(fp)
   82260:	1885883a 	add	r2,r3,r2
   82264:	10800117 	ldw	r2,4(r2)
   82268:	1009883a 	mov	r4,r2
   8226c:	01400304 	movi	r5,12
   82270:	0082b040 	call	82b04 <__mulsi3>
   82274:	1007883a 	mov	r3,r2
   82278:	e0bffe17 	ldw	r2,-8(fp)
   8227c:	1885883a 	add	r2,r3,r2
   82280:	10800017 	ldw	r2,0(r2)
   82284:	10800284 	addi	r2,r2,10
   82288:	14003fcc 	andi	r16,r2,255
   8228c:	e13fee17 	ldw	r4,-72(fp)
   82290:	01400304 	movi	r5,12
   82294:	0082b040 	call	82b04 <__mulsi3>
   82298:	1007883a 	mov	r3,r2
   8229c:	e0bffd17 	ldw	r2,-12(fp)
   822a0:	1885883a 	add	r2,r3,r2
   822a4:	10800117 	ldw	r2,4(r2)
   822a8:	1009883a 	mov	r4,r2
   822ac:	01400304 	movi	r5,12
   822b0:	0082b040 	call	82b04 <__mulsi3>
   822b4:	1007883a 	mov	r3,r2
   822b8:	e0bffe17 	ldw	r2,-8(fp)
   822bc:	1885883a 	add	r2,r3,r2
   822c0:	10800017 	ldw	r2,0(r2)
   822c4:	10800384 	addi	r2,r2,14
   822c8:	11403fcc 	andi	r5,r2,255
   822cc:	8009883a 	mov	r4,r16
   822d0:	0093b600 	call	93b60 <OSTaskChangePrio>
   822d4:	e0bfec05 	stb	r2,-80(fp)
			alt_ucosii_check_return_code(return_code);
   822d8:	e13fec03 	ldbu	r4,-80(fp)
   822dc:	00804300 	call	80430 <alt_ucosii_check_return_code>
					temp_id[x+1] = temp;
				}
			}
		}

		for (i = 0; i < num_active_task; i++) {
   822e0:	e0bfee17 	ldw	r2,-72(fp)
   822e4:	10800044 	addi	r2,r2,1
   822e8:	e0bfee15 	stw	r2,-72(fp)
   822ec:	e0ffee17 	ldw	r3,-72(fp)
   822f0:	e0bffc17 	ldw	r2,-16(fp)
   822f4:	18bfd516 	blt	r3,r2,8224c <custom_task_create+0x490>
			return_code = OSTaskChangePrio(TASK_START_PRIORITY+task_info[scheduler_info[i].id].priority, TASK_START_PRIORITY+task_info[scheduler_info[i].id].priority+4);
			alt_ucosii_check_return_code(return_code);
		}

		for (i = 0; i < NUM_TASK; i++) {
   822f8:	e03fee15 	stw	zero,-72(fp)
   822fc:	00007006 	br	824c0 <custom_task_create+0x704>
			if (i < num_active_task) {
   82300:	e0ffee17 	ldw	r3,-72(fp)
   82304:	e0bffc17 	ldw	r2,-16(fp)
   82308:	1880310e 	bge	r3,r2,823d0 <custom_task_create+0x614>
				for (x = 0; temp_id[x] != scheduler_info[i].id; x++);
   8230c:	e03feb15 	stw	zero,-84(fp)
   82310:	00000306 	br	82320 <custom_task_create+0x564>
   82314:	e0bfeb17 	ldw	r2,-84(fp)
   82318:	10800044 	addi	r2,r2,1
   8231c:	e0bfeb15 	stw	r2,-84(fp)
   82320:	e0bfeb17 	ldw	r2,-84(fp)
   82324:	1085883a 	add	r2,r2,r2
   82328:	1085883a 	add	r2,r2,r2
   8232c:	e13fe904 	addi	r4,fp,-92
   82330:	1105883a 	add	r2,r2,r4
   82334:	10800e04 	addi	r2,r2,56
   82338:	14000017 	ldw	r16,0(r2)
   8233c:	e13fee17 	ldw	r4,-72(fp)
   82340:	01400304 	movi	r5,12
   82344:	0082b040 	call	82b04 <__mulsi3>
   82348:	1007883a 	mov	r3,r2
   8234c:	e0bffd17 	ldw	r2,-12(fp)
   82350:	1885883a 	add	r2,r3,r2
   82354:	10800117 	ldw	r2,4(r2)
   82358:	80bfee1e 	bne	r16,r2,82314 <custom_task_create+0x558>
				return_code = OSTaskChangePrio(TASK_START_PRIORITY+task_info[scheduler_info[i].id].priority+4, TASK_START_PRIORITY+temp_pri[x]);
   8235c:	e13fee17 	ldw	r4,-72(fp)
   82360:	01400304 	movi	r5,12
   82364:	0082b040 	call	82b04 <__mulsi3>
   82368:	1007883a 	mov	r3,r2
   8236c:	e0bffd17 	ldw	r2,-12(fp)
   82370:	1885883a 	add	r2,r3,r2
   82374:	10800117 	ldw	r2,4(r2)
   82378:	1009883a 	mov	r4,r2
   8237c:	01400304 	movi	r5,12
   82380:	0082b040 	call	82b04 <__mulsi3>
   82384:	1007883a 	mov	r3,r2
   82388:	e0bffe17 	ldw	r2,-8(fp)
   8238c:	1885883a 	add	r2,r3,r2
   82390:	10800017 	ldw	r2,0(r2)
   82394:	10800384 	addi	r2,r2,14
   82398:	11003fcc 	andi	r4,r2,255
   8239c:	e0bfeb17 	ldw	r2,-84(fp)
   823a0:	1085883a 	add	r2,r2,r2
   823a4:	1085883a 	add	r2,r2,r2
   823a8:	e0ffe904 	addi	r3,fp,-92
   823ac:	10c5883a 	add	r2,r2,r3
   823b0:	10800a04 	addi	r2,r2,40
   823b4:	10800017 	ldw	r2,0(r2)
   823b8:	10800284 	addi	r2,r2,10
   823bc:	11403fcc 	andi	r5,r2,255
   823c0:	0093b600 	call	93b60 <OSTaskChangePrio>
   823c4:	e0bfec05 	stb	r2,-80(fp)
				alt_ucosii_check_return_code(return_code);
   823c8:	e13fec03 	ldbu	r4,-80(fp)
   823cc:	00804300 	call	80430 <alt_ucosii_check_return_code>
			}
			scheduler_info[i].valid = 1;
   823d0:	e13fee17 	ldw	r4,-72(fp)
   823d4:	01400304 	movi	r5,12
   823d8:	0082b040 	call	82b04 <__mulsi3>
   823dc:	1007883a 	mov	r3,r2
   823e0:	e0bffd17 	ldw	r2,-12(fp)
   823e4:	1887883a 	add	r3,r3,r2
   823e8:	00800044 	movi	r2,1
   823ec:	18800015 	stw	r2,0(r3)
			scheduler_info[i].id = temp_id[i];
   823f0:	e13fee17 	ldw	r4,-72(fp)
   823f4:	01400304 	movi	r5,12
   823f8:	0082b040 	call	82b04 <__mulsi3>
   823fc:	1007883a 	mov	r3,r2
   82400:	e0bffd17 	ldw	r2,-12(fp)
   82404:	1887883a 	add	r3,r3,r2
   82408:	e0bfee17 	ldw	r2,-72(fp)
   8240c:	1085883a 	add	r2,r2,r2
   82410:	1085883a 	add	r2,r2,r2
   82414:	e13fe904 	addi	r4,fp,-92
   82418:	1105883a 	add	r2,r2,r4
   8241c:	10800e04 	addi	r2,r2,56
   82420:	10800017 	ldw	r2,0(r2)
   82424:	18800115 	stw	r2,4(r3)
			scheduler_info[i].period = temp_p[i];
   82428:	e13fee17 	ldw	r4,-72(fp)
   8242c:	01400304 	movi	r5,12
   82430:	0082b040 	call	82b04 <__mulsi3>
   82434:	1007883a 	mov	r3,r2
   82438:	e0bffd17 	ldw	r2,-12(fp)
   8243c:	1887883a 	add	r3,r3,r2
   82440:	e0bfee17 	ldw	r2,-72(fp)
   82444:	1085883a 	add	r2,r2,r2
   82448:	1085883a 	add	r2,r2,r2
   8244c:	e13fe904 	addi	r4,fp,-92
   82450:	1105883a 	add	r2,r2,r4
   82454:	10800604 	addi	r2,r2,24
   82458:	10800017 	ldw	r2,0(r2)
   8245c:	18800215 	stw	r2,8(r3)
			task_info[scheduler_info[i].id].priority = temp_pri[i];
   82460:	e13fee17 	ldw	r4,-72(fp)
   82464:	01400304 	movi	r5,12
   82468:	0082b040 	call	82b04 <__mulsi3>
   8246c:	1007883a 	mov	r3,r2
   82470:	e0bffd17 	ldw	r2,-12(fp)
   82474:	1885883a 	add	r2,r3,r2
   82478:	10800117 	ldw	r2,4(r2)
   8247c:	1009883a 	mov	r4,r2
   82480:	01400304 	movi	r5,12
   82484:	0082b040 	call	82b04 <__mulsi3>
   82488:	1007883a 	mov	r3,r2
   8248c:	e0bffe17 	ldw	r2,-8(fp)
   82490:	1887883a 	add	r3,r3,r2
   82494:	e0bfee17 	ldw	r2,-72(fp)
   82498:	1085883a 	add	r2,r2,r2
   8249c:	1085883a 	add	r2,r2,r2
   824a0:	e13fe904 	addi	r4,fp,-92
   824a4:	1105883a 	add	r2,r2,r4
   824a8:	10800a04 	addi	r2,r2,40
   824ac:	10800017 	ldw	r2,0(r2)
   824b0:	18800015 	stw	r2,0(r3)
		for (i = 0; i < num_active_task; i++) {
			return_code = OSTaskChangePrio(TASK_START_PRIORITY+task_info[scheduler_info[i].id].priority, TASK_START_PRIORITY+task_info[scheduler_info[i].id].priority+4);
			alt_ucosii_check_return_code(return_code);
		}

		for (i = 0; i < NUM_TASK; i++) {
   824b4:	e0bfee17 	ldw	r2,-72(fp)
   824b8:	10800044 	addi	r2,r2,1
   824bc:	e0bfee15 	stw	r2,-72(fp)
   824c0:	e0bfee17 	ldw	r2,-72(fp)
   824c4:	10800110 	cmplti	r2,r2,4
   824c8:	103f8d1e 	bne	r2,zero,82300 <custom_task_create+0x544>
					//task_info[scheduler_info[i].id].priority);
		}
	}


	for (i = 0; i < NUM_PB_BUTTON; i++) {
   824cc:	e03fee15 	stw	zero,-72(fp)
   824d0:	00010b06 	br	82900 <custom_task_create+0xb44>
		if (PB_pressed[i] == 1) {
   824d4:	e0bfee17 	ldw	r2,-72(fp)
   824d8:	1085883a 	add	r2,r2,r2
   824dc:	1085883a 	add	r2,r2,r2
   824e0:	1007883a 	mov	r3,r2
   824e4:	e0bffb17 	ldw	r2,-20(fp)
   824e8:	1885883a 	add	r2,r3,r2
   824ec:	10800017 	ldw	r2,0(r2)
   824f0:	10800058 	cmpnei	r2,r2,1
   824f4:	1000ff1e 	bne	r2,zero,828f4 <custom_task_create+0xb38>
            printf("-Creating periodic_task%d: execution_time_tick = %d, os_delay_time = %d: priority (%d)\n",
   824f8:	e13fee17 	ldw	r4,-72(fp)
   824fc:	01400304 	movi	r5,12
   82500:	0082b040 	call	82b04 <__mulsi3>
   82504:	1007883a 	mov	r3,r2
   82508:	e0bffe17 	ldw	r2,-8(fp)
   8250c:	1885883a 	add	r2,r3,r2
   82510:	14000117 	ldw	r16,4(r2)
   82514:	e13fee17 	ldw	r4,-72(fp)
   82518:	01400304 	movi	r5,12
   8251c:	0082b040 	call	82b04 <__mulsi3>
   82520:	1007883a 	mov	r3,r2
   82524:	e0bffe17 	ldw	r2,-8(fp)
   82528:	1885883a 	add	r2,r3,r2
   8252c:	14400217 	ldw	r17,8(r2)
   82530:	e13fee17 	ldw	r4,-72(fp)
   82534:	01400304 	movi	r5,12
   82538:	0082b040 	call	82b04 <__mulsi3>
   8253c:	1007883a 	mov	r3,r2
   82540:	e0bffe17 	ldw	r2,-8(fp)
   82544:	1885883a 	add	r2,r3,r2
   82548:	10800017 	ldw	r2,0(r2)
   8254c:	d8800015 	stw	r2,0(sp)
   82550:	010002b4 	movhi	r4,10
   82554:	2124f104 	addi	r4,r4,-27708
   82558:	e17fee17 	ldw	r5,-72(fp)
   8255c:	800d883a 	mov	r6,r16
   82560:	880f883a 	mov	r7,r17
   82564:	0082c880 	call	82c88 <printf>
            		task_info[i].execution_time,
            		task_info[i].os_delay,
            		task_info[i].priority
                );
            // Create the task in the OS
			switch(i) {
   82568:	e0bfee17 	ldw	r2,-72(fp)
   8256c:	e0bfff15 	stw	r2,-4(fp)
   82570:	e0ffff17 	ldw	r3,-4(fp)
   82574:	18800060 	cmpeqi	r2,r3,1
   82578:	10003d1e 	bne	r2,zero,82670 <custom_task_create+0x8b4>
   8257c:	e13fff17 	ldw	r4,-4(fp)
   82580:	208000a0 	cmpeqi	r2,r4,2
   82584:	1000701e 	bne	r2,zero,82748 <custom_task_create+0x98c>
   82588:	e0ffff17 	ldw	r3,-4(fp)
   8258c:	1805003a 	cmpeq	r2,r3,zero
   82590:	1000011e 	bne	r2,zero,82598 <custom_task_create+0x7dc>
   82594:	0000a206 	br	82820 <custom_task_create+0xa64>
				case 0:
					return_code = OSTaskCreateExt(periodic_task0,
   82598:	e13fee17 	ldw	r4,-72(fp)
   8259c:	01400304 	movi	r5,12
   825a0:	0082b040 	call	82b04 <__mulsi3>
   825a4:	1007883a 	mov	r3,r2
   825a8:	e0bffe17 	ldw	r2,-8(fp)
   825ac:	18a1883a 	add	r16,r3,r2
   825b0:	e0bfee17 	ldw	r2,-72(fp)
   825b4:	1004937a 	slli	r2,r2,13
   825b8:	1007883a 	mov	r3,r2
   825bc:	008002b4 	movhi	r2,10
   825c0:	10bbe604 	addi	r2,r2,-4200
   825c4:	1087ff04 	addi	r2,r2,8188
   825c8:	18a3883a 	add	r17,r3,r2
   825cc:	e13fee17 	ldw	r4,-72(fp)
   825d0:	01400304 	movi	r5,12
   825d4:	0082b040 	call	82b04 <__mulsi3>
   825d8:	1007883a 	mov	r3,r2
   825dc:	e0bffe17 	ldw	r2,-8(fp)
   825e0:	1885883a 	add	r2,r3,r2
   825e4:	10800017 	ldw	r2,0(r2)
   825e8:	10800284 	addi	r2,r2,10
   825ec:	14803fcc 	andi	r18,r2,255
   825f0:	e0bfee17 	ldw	r2,-72(fp)
   825f4:	14ffffcc 	andi	r19,r2,65535
   825f8:	e0bfee17 	ldw	r2,-72(fp)
   825fc:	1004937a 	slli	r2,r2,13
   82600:	1007883a 	mov	r3,r2
   82604:	008002b4 	movhi	r2,10
   82608:	10bbe604 	addi	r2,r2,-4200
   8260c:	1885883a 	add	r2,r3,r2
   82610:	1029883a 	mov	r20,r2
   82614:	e13fee17 	ldw	r4,-72(fp)
   82618:	01401b04 	movi	r5,108
   8261c:	0082b040 	call	82b04 <__mulsi3>
   82620:	1007883a 	mov	r3,r2
   82624:	008002b4 	movhi	r2,10
   82628:	109c0504 	addi	r2,r2,28692
   8262c:	1887883a 	add	r3,r3,r2
   82630:	dcc00015 	stw	r19,0(sp)
   82634:	dd000115 	stw	r20,4(sp)
   82638:	00820004 	movi	r2,2048
   8263c:	d8800215 	stw	r2,8(sp)
   82640:	d8c00315 	stw	r3,12(sp)
   82644:	d8000415 	stw	zero,16(sp)
   82648:	01000234 	movhi	r4,8
   8264c:	21030704 	addi	r4,r4,3100
   82650:	800b883a 	mov	r5,r16
   82654:	880d883a 	mov	r6,r17
   82658:	900f883a 	mov	r7,r18
   8265c:	00942a80 	call	942a8 <OSTaskCreateExt>
   82660:	e0bfec05 	stb	r2,-80(fp)
											 i,
											 &periodic_task_stk[i][0],
											 TASK_STACKSIZE,
											 &periodic_task_tcb[i],
											 0);
					alt_ucosii_check_return_code(return_code);
   82664:	e13fec03 	ldbu	r4,-80(fp)
   82668:	00804300 	call	80430 <alt_ucosii_check_return_code>
				break;
   8266c:	0000a106 	br	828f4 <custom_task_create+0xb38>
				case 1:
					return_code = OSTaskCreateExt(periodic_task1,
   82670:	e13fee17 	ldw	r4,-72(fp)
   82674:	01400304 	movi	r5,12
   82678:	0082b040 	call	82b04 <__mulsi3>
   8267c:	1007883a 	mov	r3,r2
   82680:	e0bffe17 	ldw	r2,-8(fp)
   82684:	18a1883a 	add	r16,r3,r2
   82688:	e0bfee17 	ldw	r2,-72(fp)
   8268c:	1004937a 	slli	r2,r2,13
   82690:	1007883a 	mov	r3,r2
   82694:	008002b4 	movhi	r2,10
   82698:	10bbe604 	addi	r2,r2,-4200
   8269c:	1087ff04 	addi	r2,r2,8188
   826a0:	18a3883a 	add	r17,r3,r2
   826a4:	e13fee17 	ldw	r4,-72(fp)
   826a8:	01400304 	movi	r5,12
   826ac:	0082b040 	call	82b04 <__mulsi3>
   826b0:	1007883a 	mov	r3,r2
   826b4:	e0bffe17 	ldw	r2,-8(fp)
   826b8:	1885883a 	add	r2,r3,r2
   826bc:	10800017 	ldw	r2,0(r2)
   826c0:	10800284 	addi	r2,r2,10
   826c4:	14803fcc 	andi	r18,r2,255
   826c8:	e0bfee17 	ldw	r2,-72(fp)
   826cc:	14ffffcc 	andi	r19,r2,65535
   826d0:	e0bfee17 	ldw	r2,-72(fp)
   826d4:	1004937a 	slli	r2,r2,13
   826d8:	1007883a 	mov	r3,r2
   826dc:	008002b4 	movhi	r2,10
   826e0:	10bbe604 	addi	r2,r2,-4200
   826e4:	1885883a 	add	r2,r3,r2
   826e8:	1029883a 	mov	r20,r2
   826ec:	e13fee17 	ldw	r4,-72(fp)
   826f0:	01401b04 	movi	r5,108
   826f4:	0082b040 	call	82b04 <__mulsi3>
   826f8:	1007883a 	mov	r3,r2
   826fc:	008002b4 	movhi	r2,10
   82700:	109c0504 	addi	r2,r2,28692
   82704:	1887883a 	add	r3,r3,r2
   82708:	dcc00015 	stw	r19,0(sp)
   8270c:	dd000115 	stw	r20,4(sp)
   82710:	00820004 	movi	r2,2048
   82714:	d8800215 	stw	r2,8(sp)
   82718:	d8c00315 	stw	r3,12(sp)
   8271c:	d8000415 	stw	zero,16(sp)
   82720:	01000234 	movhi	r4,8
   82724:	21032b04 	addi	r4,r4,3244
   82728:	800b883a 	mov	r5,r16
   8272c:	880d883a 	mov	r6,r17
   82730:	900f883a 	mov	r7,r18
   82734:	00942a80 	call	942a8 <OSTaskCreateExt>
   82738:	e0bfec05 	stb	r2,-80(fp)
											 i,
											 &periodic_task_stk[i][0],
											 TASK_STACKSIZE,
											 &periodic_task_tcb[i],
											 0);
					alt_ucosii_check_return_code(return_code);
   8273c:	e13fec03 	ldbu	r4,-80(fp)
   82740:	00804300 	call	80430 <alt_ucosii_check_return_code>
				break;
   82744:	00006b06 	br	828f4 <custom_task_create+0xb38>
				case 2:
					return_code = OSTaskCreateExt(periodic_task2,
   82748:	e13fee17 	ldw	r4,-72(fp)
   8274c:	01400304 	movi	r5,12
   82750:	0082b040 	call	82b04 <__mulsi3>
   82754:	1007883a 	mov	r3,r2
   82758:	e0bffe17 	ldw	r2,-8(fp)
   8275c:	18a1883a 	add	r16,r3,r2
   82760:	e0bfee17 	ldw	r2,-72(fp)
   82764:	1004937a 	slli	r2,r2,13
   82768:	1007883a 	mov	r3,r2
   8276c:	008002b4 	movhi	r2,10
   82770:	10bbe604 	addi	r2,r2,-4200
   82774:	1087ff04 	addi	r2,r2,8188
   82778:	18a3883a 	add	r17,r3,r2
   8277c:	e13fee17 	ldw	r4,-72(fp)
   82780:	01400304 	movi	r5,12
   82784:	0082b040 	call	82b04 <__mulsi3>
   82788:	1007883a 	mov	r3,r2
   8278c:	e0bffe17 	ldw	r2,-8(fp)
   82790:	1885883a 	add	r2,r3,r2
   82794:	10800017 	ldw	r2,0(r2)
   82798:	10800284 	addi	r2,r2,10
   8279c:	14803fcc 	andi	r18,r2,255
   827a0:	e0bfee17 	ldw	r2,-72(fp)
   827a4:	14ffffcc 	andi	r19,r2,65535
   827a8:	e0bfee17 	ldw	r2,-72(fp)
   827ac:	1004937a 	slli	r2,r2,13
   827b0:	1007883a 	mov	r3,r2
   827b4:	008002b4 	movhi	r2,10
   827b8:	10bbe604 	addi	r2,r2,-4200
   827bc:	1885883a 	add	r2,r3,r2
   827c0:	1029883a 	mov	r20,r2
   827c4:	e13fee17 	ldw	r4,-72(fp)
   827c8:	01401b04 	movi	r5,108
   827cc:	0082b040 	call	82b04 <__mulsi3>
   827d0:	1007883a 	mov	r3,r2
   827d4:	008002b4 	movhi	r2,10
   827d8:	109c0504 	addi	r2,r2,28692
   827dc:	1887883a 	add	r3,r3,r2
   827e0:	dcc00015 	stw	r19,0(sp)
   827e4:	dd000115 	stw	r20,4(sp)
   827e8:	00820004 	movi	r2,2048
   827ec:	d8800215 	stw	r2,8(sp)
   827f0:	d8c00315 	stw	r3,12(sp)
   827f4:	d8000415 	stw	zero,16(sp)
   827f8:	01000234 	movhi	r4,8
   827fc:	21034f04 	addi	r4,r4,3388
   82800:	800b883a 	mov	r5,r16
   82804:	880d883a 	mov	r6,r17
   82808:	900f883a 	mov	r7,r18
   8280c:	00942a80 	call	942a8 <OSTaskCreateExt>
   82810:	e0bfec05 	stb	r2,-80(fp)
											 i,
											 &periodic_task_stk[i][0],
											 TASK_STACKSIZE,
											 &periodic_task_tcb[i],
											 0);
					alt_ucosii_check_return_code(return_code);
   82814:	e13fec03 	ldbu	r4,-80(fp)
   82818:	00804300 	call	80430 <alt_ucosii_check_return_code>
				break;
   8281c:	00003506 	br	828f4 <custom_task_create+0xb38>
				default:
					return_code = OSTaskCreateExt(periodic_task3,
   82820:	e13fee17 	ldw	r4,-72(fp)
   82824:	01400304 	movi	r5,12
   82828:	0082b040 	call	82b04 <__mulsi3>
   8282c:	1007883a 	mov	r3,r2
   82830:	e0bffe17 	ldw	r2,-8(fp)
   82834:	18a1883a 	add	r16,r3,r2
   82838:	e0bfee17 	ldw	r2,-72(fp)
   8283c:	1004937a 	slli	r2,r2,13
   82840:	1007883a 	mov	r3,r2
   82844:	008002b4 	movhi	r2,10
   82848:	10bbe604 	addi	r2,r2,-4200
   8284c:	1087ff04 	addi	r2,r2,8188
   82850:	18a3883a 	add	r17,r3,r2
   82854:	e13fee17 	ldw	r4,-72(fp)
   82858:	01400304 	movi	r5,12
   8285c:	0082b040 	call	82b04 <__mulsi3>
   82860:	1007883a 	mov	r3,r2
   82864:	e0bffe17 	ldw	r2,-8(fp)
   82868:	1885883a 	add	r2,r3,r2
   8286c:	10800017 	ldw	r2,0(r2)
   82870:	10800284 	addi	r2,r2,10
   82874:	14803fcc 	andi	r18,r2,255
   82878:	e0bfee17 	ldw	r2,-72(fp)
   8287c:	14ffffcc 	andi	r19,r2,65535
   82880:	e0bfee17 	ldw	r2,-72(fp)
   82884:	1004937a 	slli	r2,r2,13
   82888:	1007883a 	mov	r3,r2
   8288c:	008002b4 	movhi	r2,10
   82890:	10bbe604 	addi	r2,r2,-4200
   82894:	1885883a 	add	r2,r3,r2
   82898:	1029883a 	mov	r20,r2
   8289c:	e13fee17 	ldw	r4,-72(fp)
   828a0:	01401b04 	movi	r5,108
   828a4:	0082b040 	call	82b04 <__mulsi3>
   828a8:	1007883a 	mov	r3,r2
   828ac:	008002b4 	movhi	r2,10
   828b0:	109c0504 	addi	r2,r2,28692
   828b4:	1887883a 	add	r3,r3,r2
   828b8:	dcc00015 	stw	r19,0(sp)
   828bc:	dd000115 	stw	r20,4(sp)
   828c0:	00820004 	movi	r2,2048
   828c4:	d8800215 	stw	r2,8(sp)
   828c8:	d8c00315 	stw	r3,12(sp)
   828cc:	d8000415 	stw	zero,16(sp)
   828d0:	01000234 	movhi	r4,8
   828d4:	21037304 	addi	r4,r4,3532
   828d8:	800b883a 	mov	r5,r16
   828dc:	880d883a 	mov	r6,r17
   828e0:	900f883a 	mov	r7,r18
   828e4:	00942a80 	call	942a8 <OSTaskCreateExt>
   828e8:	e0bfec05 	stb	r2,-80(fp)
											 i,
											 &periodic_task_stk[i][0],
											 TASK_STACKSIZE,
											 &periodic_task_tcb[i],
											 0);
					alt_ucosii_check_return_code(return_code);
   828ec:	e13fec03 	ldbu	r4,-80(fp)
   828f0:	00804300 	call	80430 <alt_ucosii_check_return_code>
					//task_info[scheduler_info[i].id].priority);
		}
	}


	for (i = 0; i < NUM_PB_BUTTON; i++) {
   828f4:	e0bfee17 	ldw	r2,-72(fp)
   828f8:	10800044 	addi	r2,r2,1
   828fc:	e0bfee15 	stw	r2,-72(fp)
   82900:	e0bfee17 	ldw	r2,-72(fp)
   82904:	10800110 	cmplti	r2,r2,4
   82908:	103ef21e 	bne	r2,zero,824d4 <custom_task_create+0x718>
				break;
			}
		}
	}
	//num_task_created++;
	printf("%d task created...\n", num_task_created);
   8290c:	010002b4 	movhi	r4,10
   82910:	21250704 	addi	r4,r4,-27620
   82914:	e17fed17 	ldw	r5,-76(fp)
   82918:	0082c880 	call	82c88 <printf>
	return num_task_created;
   8291c:	e0bfed17 	ldw	r2,-76(fp)
}
   82920:	e037883a 	mov	sp,fp
   82924:	dfc00617 	ldw	ra,24(sp)
   82928:	df000517 	ldw	fp,20(sp)
   8292c:	dd000417 	ldw	r20,16(sp)
   82930:	dcc00317 	ldw	r19,12(sp)
   82934:	dc800217 	ldw	r18,8(sp)
   82938:	dc400117 	ldw	r17,4(sp)
   8293c:	dc000017 	ldw	r16,0(sp)
   82940:	dec00704 	addi	sp,sp,28
   82944:	f800283a 	ret

00082948 <custom_delay>:

// Function for occupying the processor for the specified number of clock ticks
// to simulate custom delay while keeping the task in the processor
void custom_delay(int ticks) {
   82948:	defffc04 	addi	sp,sp,-16
   8294c:	dfc00315 	stw	ra,12(sp)
   82950:	df000215 	stw	fp,8(sp)
   82954:	df000204 	addi	fp,sp,8
   82958:	e13fff15 	stw	r4,-4(fp)
    INT32U cur_tick;
    ticks--;
   8295c:	e0bfff17 	ldw	r2,-4(fp)
   82960:	10bfffc4 	addi	r2,r2,-1
   82964:	e0bfff15 	stw	r2,-4(fp)
    cur_tick = OSTimeGet();
   82968:	0095a8c0 	call	95a8c <OSTimeGet>
   8296c:	e0bffe15 	stw	r2,-8(fp)
    while (ticks > 0) {
   82970:	00000906 	br	82998 <custom_delay+0x50>
         if (OSTimeGet() > cur_tick) {
   82974:	0095a8c0 	call	95a8c <OSTimeGet>
   82978:	1007883a 	mov	r3,r2
   8297c:	e0bffe17 	ldw	r2,-8(fp)
   82980:	10c0052e 	bgeu	r2,r3,82998 <custom_delay+0x50>
            ticks--;
   82984:	e0bfff17 	ldw	r2,-4(fp)
   82988:	10bfffc4 	addi	r2,r2,-1
   8298c:	e0bfff15 	stw	r2,-4(fp)
            cur_tick = OSTimeGet();
   82990:	0095a8c0 	call	95a8c <OSTimeGet>
   82994:	e0bffe15 	stw	r2,-8(fp)
// to simulate custom delay while keeping the task in the processor
void custom_delay(int ticks) {
    INT32U cur_tick;
    ticks--;
    cur_tick = OSTimeGet();
    while (ticks > 0) {
   82998:	e0bfff17 	ldw	r2,-4(fp)
   8299c:	10800048 	cmpgei	r2,r2,1
   829a0:	103ff41e 	bne	r2,zero,82974 <custom_delay+0x2c>
         if (OSTimeGet() > cur_tick) {
            ticks--;
            cur_tick = OSTimeGet();
         }  
    }
}
   829a4:	e037883a 	mov	sp,fp
   829a8:	dfc00117 	ldw	ra,4(sp)
   829ac:	df000017 	ldw	fp,0(sp)
   829b0:	dec00204 	addi	sp,sp,8
   829b4:	f800283a 	ret

000829b8 <udivmodsi4>:
   829b8:	29001b2e 	bgeu	r5,r4,82a28 <udivmodsi4+0x70>
   829bc:	28001a16 	blt	r5,zero,82a28 <udivmodsi4+0x70>
   829c0:	00800044 	movi	r2,1
   829c4:	0007883a 	mov	r3,zero
   829c8:	01c007c4 	movi	r7,31
   829cc:	00000306 	br	829dc <udivmodsi4+0x24>
   829d0:	19c01326 	beq	r3,r7,82a20 <udivmodsi4+0x68>
   829d4:	18c00044 	addi	r3,r3,1
   829d8:	28000416 	blt	r5,zero,829ec <udivmodsi4+0x34>
   829dc:	294b883a 	add	r5,r5,r5
   829e0:	1085883a 	add	r2,r2,r2
   829e4:	293ffa36 	bltu	r5,r4,829d0 <udivmodsi4+0x18>
   829e8:	10000d26 	beq	r2,zero,82a20 <udivmodsi4+0x68>
   829ec:	0007883a 	mov	r3,zero
   829f0:	21400236 	bltu	r4,r5,829fc <udivmodsi4+0x44>
   829f4:	2149c83a 	sub	r4,r4,r5
   829f8:	1886b03a 	or	r3,r3,r2
   829fc:	1004d07a 	srli	r2,r2,1
   82a00:	280ad07a 	srli	r5,r5,1
   82a04:	103ffa1e 	bne	r2,zero,829f0 <udivmodsi4+0x38>
   82a08:	30000226 	beq	r6,zero,82a14 <udivmodsi4+0x5c>
   82a0c:	2005883a 	mov	r2,r4
   82a10:	f800283a 	ret
   82a14:	1809883a 	mov	r4,r3
   82a18:	2005883a 	mov	r2,r4
   82a1c:	f800283a 	ret
   82a20:	0007883a 	mov	r3,zero
   82a24:	003ff806 	br	82a08 <udivmodsi4+0x50>
   82a28:	00800044 	movi	r2,1
   82a2c:	0007883a 	mov	r3,zero
   82a30:	003fef06 	br	829f0 <udivmodsi4+0x38>

00082a34 <__divsi3>:
   82a34:	defffe04 	addi	sp,sp,-8
   82a38:	dc000015 	stw	r16,0(sp)
   82a3c:	dfc00115 	stw	ra,4(sp)
   82a40:	0021883a 	mov	r16,zero
   82a44:	20000c16 	blt	r4,zero,82a78 <__divsi3+0x44>
   82a48:	000d883a 	mov	r6,zero
   82a4c:	28000e16 	blt	r5,zero,82a88 <__divsi3+0x54>
   82a50:	00829b80 	call	829b8 <udivmodsi4>
   82a54:	1007883a 	mov	r3,r2
   82a58:	8005003a 	cmpeq	r2,r16,zero
   82a5c:	1000011e 	bne	r2,zero,82a64 <__divsi3+0x30>
   82a60:	00c7c83a 	sub	r3,zero,r3
   82a64:	1805883a 	mov	r2,r3
   82a68:	dfc00117 	ldw	ra,4(sp)
   82a6c:	dc000017 	ldw	r16,0(sp)
   82a70:	dec00204 	addi	sp,sp,8
   82a74:	f800283a 	ret
   82a78:	0109c83a 	sub	r4,zero,r4
   82a7c:	04000044 	movi	r16,1
   82a80:	000d883a 	mov	r6,zero
   82a84:	283ff20e 	bge	r5,zero,82a50 <__divsi3+0x1c>
   82a88:	014bc83a 	sub	r5,zero,r5
   82a8c:	8021003a 	cmpeq	r16,r16,zero
   82a90:	003fef06 	br	82a50 <__divsi3+0x1c>

00082a94 <__modsi3>:
   82a94:	deffff04 	addi	sp,sp,-4
   82a98:	dfc00015 	stw	ra,0(sp)
   82a9c:	01800044 	movi	r6,1
   82aa0:	2807883a 	mov	r3,r5
   82aa4:	20000416 	blt	r4,zero,82ab8 <__modsi3+0x24>
   82aa8:	28000c16 	blt	r5,zero,82adc <__modsi3+0x48>
   82aac:	dfc00017 	ldw	ra,0(sp)
   82ab0:	dec00104 	addi	sp,sp,4
   82ab4:	00829b81 	jmpi	829b8 <udivmodsi4>
   82ab8:	0109c83a 	sub	r4,zero,r4
   82abc:	28000b16 	blt	r5,zero,82aec <__modsi3+0x58>
   82ac0:	180b883a 	mov	r5,r3
   82ac4:	01800044 	movi	r6,1
   82ac8:	00829b80 	call	829b8 <udivmodsi4>
   82acc:	0085c83a 	sub	r2,zero,r2
   82ad0:	dfc00017 	ldw	ra,0(sp)
   82ad4:	dec00104 	addi	sp,sp,4
   82ad8:	f800283a 	ret
   82adc:	014bc83a 	sub	r5,zero,r5
   82ae0:	dfc00017 	ldw	ra,0(sp)
   82ae4:	dec00104 	addi	sp,sp,4
   82ae8:	00829b81 	jmpi	829b8 <udivmodsi4>
   82aec:	0147c83a 	sub	r3,zero,r5
   82af0:	003ff306 	br	82ac0 <__modsi3+0x2c>

00082af4 <__udivsi3>:
   82af4:	000d883a 	mov	r6,zero
   82af8:	00829b81 	jmpi	829b8 <udivmodsi4>

00082afc <__umodsi3>:
   82afc:	01800044 	movi	r6,1
   82b00:	00829b81 	jmpi	829b8 <udivmodsi4>

00082b04 <__mulsi3>:
   82b04:	20000a26 	beq	r4,zero,82b30 <__mulsi3+0x2c>
   82b08:	0007883a 	mov	r3,zero
   82b0c:	2080004c 	andi	r2,r4,1
   82b10:	1005003a 	cmpeq	r2,r2,zero
   82b14:	2008d07a 	srli	r4,r4,1
   82b18:	1000011e 	bne	r2,zero,82b20 <__mulsi3+0x1c>
   82b1c:	1947883a 	add	r3,r3,r5
   82b20:	294b883a 	add	r5,r5,r5
   82b24:	203ff91e 	bne	r4,zero,82b0c <__mulsi3+0x8>
   82b28:	1805883a 	mov	r2,r3
   82b2c:	f800283a 	ret
   82b30:	0007883a 	mov	r3,zero
   82b34:	1805883a 	mov	r2,r3
   82b38:	f800283a 	ret

00082b3c <fprintf>:
   82b3c:	defffc04 	addi	sp,sp,-16
   82b40:	dfc00115 	stw	ra,4(sp)
   82b44:	d9800215 	stw	r6,8(sp)
   82b48:	d9c00315 	stw	r7,12(sp)
   82b4c:	d8800204 	addi	r2,sp,8
   82b50:	100d883a 	mov	r6,r2
   82b54:	d8800015 	stw	r2,0(sp)
   82b58:	0084dd80 	call	84dd8 <__vfprintf_internal>
   82b5c:	dfc00117 	ldw	ra,4(sp)
   82b60:	dec00404 	addi	sp,sp,16
   82b64:	f800283a 	ret

00082b68 <_fprintf_r>:
   82b68:	defffd04 	addi	sp,sp,-12
   82b6c:	2807883a 	mov	r3,r5
   82b70:	dfc00115 	stw	ra,4(sp)
   82b74:	d9c00215 	stw	r7,8(sp)
   82b78:	d8800204 	addi	r2,sp,8
   82b7c:	300b883a 	mov	r5,r6
   82b80:	1809883a 	mov	r4,r3
   82b84:	100d883a 	mov	r6,r2
   82b88:	d8800015 	stw	r2,0(sp)
   82b8c:	0084dd80 	call	84dd8 <__vfprintf_internal>
   82b90:	dfc00117 	ldw	ra,4(sp)
   82b94:	dec00304 	addi	sp,sp,12
   82b98:	f800283a 	ret

00082b9c <_fwrite_r>:
   82b9c:	defff604 	addi	sp,sp,-40
   82ba0:	dc000515 	stw	r16,20(sp)
   82ba4:	d9400015 	stw	r5,0(sp)
   82ba8:	2021883a 	mov	r16,r4
   82bac:	300b883a 	mov	r5,r6
   82bb0:	3809883a 	mov	r4,r7
   82bb4:	dcc00815 	stw	r19,32(sp)
   82bb8:	dc800715 	stw	r18,28(sp)
   82bbc:	dc400615 	stw	r17,24(sp)
   82bc0:	dfc00915 	stw	ra,36(sp)
   82bc4:	3825883a 	mov	r18,r7
   82bc8:	3027883a 	mov	r19,r6
   82bcc:	0082b040 	call	82b04 <__mulsi3>
   82bd0:	1023883a 	mov	r17,r2
   82bd4:	00800044 	movi	r2,1
   82bd8:	d8800315 	stw	r2,12(sp)
   82bdc:	dc400115 	stw	r17,4(sp)
   82be0:	dc400415 	stw	r17,16(sp)
   82be4:	dec00215 	stw	sp,8(sp)
   82be8:	80000326 	beq	r16,zero,82bf8 <_fwrite_r+0x5c>
   82bec:	80800e17 	ldw	r2,56(r16)
   82bf0:	8009883a 	mov	r4,r16
   82bf4:	10001226 	beq	r2,zero,82c40 <_fwrite_r+0xa4>
   82bf8:	d9400a17 	ldw	r5,40(sp)
   82bfc:	8009883a 	mov	r4,r16
   82c00:	d9800204 	addi	r6,sp,8
   82c04:	00870940 	call	87094 <__sfvwrite_r>
   82c08:	980b883a 	mov	r5,r19
   82c0c:	10000426 	beq	r2,zero,82c20 <_fwrite_r+0x84>
   82c10:	d9000417 	ldw	r4,16(sp)
   82c14:	8909c83a 	sub	r4,r17,r4
   82c18:	0082af40 	call	82af4 <__udivsi3>
   82c1c:	1025883a 	mov	r18,r2
   82c20:	9005883a 	mov	r2,r18
   82c24:	dfc00917 	ldw	ra,36(sp)
   82c28:	dcc00817 	ldw	r19,32(sp)
   82c2c:	dc800717 	ldw	r18,28(sp)
   82c30:	dc400617 	ldw	r17,24(sp)
   82c34:	dc000517 	ldw	r16,20(sp)
   82c38:	dec00a04 	addi	sp,sp,40
   82c3c:	f800283a 	ret
   82c40:	00869c80 	call	869c8 <__sinit>
   82c44:	003fec06 	br	82bf8 <_fwrite_r+0x5c>

00082c48 <fwrite>:
   82c48:	008002b4 	movhi	r2,10
   82c4c:	10acc204 	addi	r2,r2,-19704
   82c50:	2017883a 	mov	r11,r4
   82c54:	11000017 	ldw	r4,0(r2)
   82c58:	defffe04 	addi	sp,sp,-8
   82c5c:	3013883a 	mov	r9,r6
   82c60:	2805883a 	mov	r2,r5
   82c64:	d9c00015 	stw	r7,0(sp)
   82c68:	580b883a 	mov	r5,r11
   82c6c:	100d883a 	mov	r6,r2
   82c70:	480f883a 	mov	r7,r9
   82c74:	dfc00115 	stw	ra,4(sp)
   82c78:	0082b9c0 	call	82b9c <_fwrite_r>
   82c7c:	dfc00117 	ldw	ra,4(sp)
   82c80:	dec00204 	addi	sp,sp,8
   82c84:	f800283a 	ret

00082c88 <printf>:
   82c88:	defffb04 	addi	sp,sp,-20
   82c8c:	dfc00115 	stw	ra,4(sp)
   82c90:	d9400215 	stw	r5,8(sp)
   82c94:	d9800315 	stw	r6,12(sp)
   82c98:	d9c00415 	stw	r7,16(sp)
   82c9c:	008002b4 	movhi	r2,10
   82ca0:	10acc204 	addi	r2,r2,-19704
   82ca4:	10c00017 	ldw	r3,0(r2)
   82ca8:	200b883a 	mov	r5,r4
   82cac:	d8800204 	addi	r2,sp,8
   82cb0:	19000217 	ldw	r4,8(r3)
   82cb4:	100d883a 	mov	r6,r2
   82cb8:	d8800015 	stw	r2,0(sp)
   82cbc:	0084dd80 	call	84dd8 <__vfprintf_internal>
   82cc0:	dfc00117 	ldw	ra,4(sp)
   82cc4:	dec00504 	addi	sp,sp,20
   82cc8:	f800283a 	ret

00082ccc <_printf_r>:
   82ccc:	defffc04 	addi	sp,sp,-16
   82cd0:	dfc00115 	stw	ra,4(sp)
   82cd4:	d9800215 	stw	r6,8(sp)
   82cd8:	d9c00315 	stw	r7,12(sp)
   82cdc:	280d883a 	mov	r6,r5
   82ce0:	21400217 	ldw	r5,8(r4)
   82ce4:	d8c00204 	addi	r3,sp,8
   82ce8:	180f883a 	mov	r7,r3
   82cec:	d8c00015 	stw	r3,0(sp)
   82cf0:	0082f140 	call	82f14 <___vfprintf_internal_r>
   82cf4:	dfc00117 	ldw	ra,4(sp)
   82cf8:	dec00404 	addi	sp,sp,16
   82cfc:	f800283a 	ret

00082d00 <_puts_r>:
   82d00:	defff604 	addi	sp,sp,-40
   82d04:	dc400715 	stw	r17,28(sp)
   82d08:	2023883a 	mov	r17,r4
   82d0c:	2809883a 	mov	r4,r5
   82d10:	dfc00915 	stw	ra,36(sp)
   82d14:	dcc00815 	stw	r19,32(sp)
   82d18:	2827883a 	mov	r19,r5
   82d1c:	0082e480 	call	82e48 <strlen>
   82d20:	89400217 	ldw	r5,8(r17)
   82d24:	00c002b4 	movhi	r3,10
   82d28:	18e50d04 	addi	r3,r3,-27596
   82d2c:	01c00044 	movi	r7,1
   82d30:	12000044 	addi	r8,r2,1
   82d34:	d8c00515 	stw	r3,20(sp)
   82d38:	d9c00615 	stw	r7,24(sp)
   82d3c:	d8c00304 	addi	r3,sp,12
   82d40:	01c00084 	movi	r7,2
   82d44:	8809883a 	mov	r4,r17
   82d48:	d80d883a 	mov	r6,sp
   82d4c:	d8c00015 	stw	r3,0(sp)
   82d50:	dcc00315 	stw	r19,12(sp)
   82d54:	da000215 	stw	r8,8(sp)
   82d58:	d9c00115 	stw	r7,4(sp)
   82d5c:	d8800415 	stw	r2,16(sp)
   82d60:	00870940 	call	87094 <__sfvwrite_r>
   82d64:	00ffffc4 	movi	r3,-1
   82d68:	10000626 	beq	r2,zero,82d84 <_puts_r+0x84>
   82d6c:	1805883a 	mov	r2,r3
   82d70:	dfc00917 	ldw	ra,36(sp)
   82d74:	dcc00817 	ldw	r19,32(sp)
   82d78:	dc400717 	ldw	r17,28(sp)
   82d7c:	dec00a04 	addi	sp,sp,40
   82d80:	f800283a 	ret
   82d84:	00c00284 	movi	r3,10
   82d88:	1805883a 	mov	r2,r3
   82d8c:	dfc00917 	ldw	ra,36(sp)
   82d90:	dcc00817 	ldw	r19,32(sp)
   82d94:	dc400717 	ldw	r17,28(sp)
   82d98:	dec00a04 	addi	sp,sp,40
   82d9c:	f800283a 	ret

00082da0 <puts>:
   82da0:	008002b4 	movhi	r2,10
   82da4:	10acc204 	addi	r2,r2,-19704
   82da8:	200b883a 	mov	r5,r4
   82dac:	11000017 	ldw	r4,0(r2)
   82db0:	0082d001 	jmpi	82d00 <_puts_r>

00082db4 <srand>:
   82db4:	008002b4 	movhi	r2,10
   82db8:	10acc204 	addi	r2,r2,-19704
   82dbc:	11400017 	ldw	r5,0(r2)
   82dc0:	0007883a 	mov	r3,zero
   82dc4:	28c02a15 	stw	r3,168(r5)
   82dc8:	29002915 	stw	r4,164(r5)
   82dcc:	f800283a 	ret

00082dd0 <rand>:
   82dd0:	defffe04 	addi	sp,sp,-8
   82dd4:	008002b4 	movhi	r2,10
   82dd8:	10acc204 	addi	r2,r2,-19704
   82ddc:	dc000015 	stw	r16,0(sp)
   82de0:	14000017 	ldw	r16,0(r2)
   82de4:	dfc00115 	stw	ra,4(sp)
   82de8:	00932574 	movhi	r2,19605
   82dec:	109fcb44 	addi	r2,r2,32557
   82df0:	82002917 	ldw	r8,164(r16)
   82df4:	82402a17 	ldw	r9,168(r16)
   82df8:	00d614b4 	movhi	r3,22610
   82dfc:	18fd0b44 	addi	r3,r3,-3027
   82e00:	4009883a 	mov	r4,r8
   82e04:	180f883a 	mov	r7,r3
   82e08:	100d883a 	mov	r6,r2
   82e0c:	480b883a 	mov	r5,r9
   82e10:	008a1540 	call	8a154 <__muldi3>
   82e14:	02000044 	movi	r8,1
   82e18:	1209883a 	add	r4,r2,r8
   82e1c:	2095803a 	cmpltu	r10,r4,r2
   82e20:	50d5883a 	add	r10,r10,r3
   82e24:	81002915 	stw	r4,164(r16)
   82e28:	01200034 	movhi	r4,32768
   82e2c:	213fffc4 	addi	r4,r4,-1
   82e30:	2284703a 	and	r2,r4,r10
   82e34:	82802a15 	stw	r10,168(r16)
   82e38:	dfc00117 	ldw	ra,4(sp)
   82e3c:	dc000017 	ldw	r16,0(sp)
   82e40:	dec00204 	addi	sp,sp,8
   82e44:	f800283a 	ret

00082e48 <strlen>:
   82e48:	208000cc 	andi	r2,r4,3
   82e4c:	2011883a 	mov	r8,r4
   82e50:	1000161e 	bne	r2,zero,82eac <strlen+0x64>
   82e54:	20c00017 	ldw	r3,0(r4)
   82e58:	017fbff4 	movhi	r5,65279
   82e5c:	297fbfc4 	addi	r5,r5,-257
   82e60:	01e02074 	movhi	r7,32897
   82e64:	39e02004 	addi	r7,r7,-32640
   82e68:	1945883a 	add	r2,r3,r5
   82e6c:	11c4703a 	and	r2,r2,r7
   82e70:	00c6303a 	nor	r3,zero,r3
   82e74:	1886703a 	and	r3,r3,r2
   82e78:	18000c1e 	bne	r3,zero,82eac <strlen+0x64>
   82e7c:	280d883a 	mov	r6,r5
   82e80:	380b883a 	mov	r5,r7
   82e84:	21000104 	addi	r4,r4,4
   82e88:	20800017 	ldw	r2,0(r4)
   82e8c:	1187883a 	add	r3,r2,r6
   82e90:	1946703a 	and	r3,r3,r5
   82e94:	0084303a 	nor	r2,zero,r2
   82e98:	10c4703a 	and	r2,r2,r3
   82e9c:	103ff926 	beq	r2,zero,82e84 <strlen+0x3c>
   82ea0:	20800007 	ldb	r2,0(r4)
   82ea4:	10000326 	beq	r2,zero,82eb4 <strlen+0x6c>
   82ea8:	21000044 	addi	r4,r4,1
   82eac:	20800007 	ldb	r2,0(r4)
   82eb0:	103ffd1e 	bne	r2,zero,82ea8 <strlen+0x60>
   82eb4:	2205c83a 	sub	r2,r4,r8
   82eb8:	f800283a 	ret

00082ebc <__sprint_r>:
   82ebc:	30800217 	ldw	r2,8(r6)
   82ec0:	defffe04 	addi	sp,sp,-8
   82ec4:	dc000015 	stw	r16,0(sp)
   82ec8:	dfc00115 	stw	ra,4(sp)
   82ecc:	3021883a 	mov	r16,r6
   82ed0:	0007883a 	mov	r3,zero
   82ed4:	1000061e 	bne	r2,zero,82ef0 <__sprint_r+0x34>
   82ed8:	1805883a 	mov	r2,r3
   82edc:	30000115 	stw	zero,4(r6)
   82ee0:	dfc00117 	ldw	ra,4(sp)
   82ee4:	dc000017 	ldw	r16,0(sp)
   82ee8:	dec00204 	addi	sp,sp,8
   82eec:	f800283a 	ret
   82ef0:	00870940 	call	87094 <__sfvwrite_r>
   82ef4:	1007883a 	mov	r3,r2
   82ef8:	1805883a 	mov	r2,r3
   82efc:	80000115 	stw	zero,4(r16)
   82f00:	80000215 	stw	zero,8(r16)
   82f04:	dfc00117 	ldw	ra,4(sp)
   82f08:	dc000017 	ldw	r16,0(sp)
   82f0c:	dec00204 	addi	sp,sp,8
   82f10:	f800283a 	ret

00082f14 <___vfprintf_internal_r>:
   82f14:	defea404 	addi	sp,sp,-1392
   82f18:	dd815815 	stw	r22,1376(sp)
   82f1c:	dc015215 	stw	r16,1352(sp)
   82f20:	d9c15115 	stw	r7,1348(sp)
   82f24:	dfc15b15 	stw	ra,1388(sp)
   82f28:	df015a15 	stw	fp,1384(sp)
   82f2c:	ddc15915 	stw	r23,1380(sp)
   82f30:	dd415715 	stw	r21,1372(sp)
   82f34:	dd015615 	stw	r20,1368(sp)
   82f38:	dcc15515 	stw	r19,1364(sp)
   82f3c:	dc815415 	stw	r18,1360(sp)
   82f40:	dc415315 	stw	r17,1356(sp)
   82f44:	282d883a 	mov	r22,r5
   82f48:	3021883a 	mov	r16,r6
   82f4c:	d9014f15 	stw	r4,1340(sp)
   82f50:	00876b80 	call	876b8 <_localeconv_r>
   82f54:	10800017 	ldw	r2,0(r2)
   82f58:	d9c15117 	ldw	r7,1348(sp)
   82f5c:	d8814915 	stw	r2,1316(sp)
   82f60:	d8814f17 	ldw	r2,1340(sp)
   82f64:	10000226 	beq	r2,zero,82f70 <___vfprintf_internal_r+0x5c>
   82f68:	10800e17 	ldw	r2,56(r2)
   82f6c:	10020d26 	beq	r2,zero,837a4 <___vfprintf_internal_r+0x890>
   82f70:	b080030b 	ldhu	r2,12(r22)
   82f74:	1080020c 	andi	r2,r2,8
   82f78:	10020e26 	beq	r2,zero,837b4 <___vfprintf_internal_r+0x8a0>
   82f7c:	b0800417 	ldw	r2,16(r22)
   82f80:	10020c26 	beq	r2,zero,837b4 <___vfprintf_internal_r+0x8a0>
   82f84:	b200030b 	ldhu	r8,12(r22)
   82f88:	00800284 	movi	r2,10
   82f8c:	40c0068c 	andi	r3,r8,26
   82f90:	18802f1e 	bne	r3,r2,83050 <___vfprintf_internal_r+0x13c>
   82f94:	b080038f 	ldh	r2,14(r22)
   82f98:	10002d16 	blt	r2,zero,83050 <___vfprintf_internal_r+0x13c>
   82f9c:	b240038b 	ldhu	r9,14(r22)
   82fa0:	b2800717 	ldw	r10,28(r22)
   82fa4:	b2c00917 	ldw	r11,36(r22)
   82fa8:	d9014f17 	ldw	r4,1340(sp)
   82fac:	dc402904 	addi	r17,sp,164
   82fb0:	d8804004 	addi	r2,sp,256
   82fb4:	00c10004 	movi	r3,1024
   82fb8:	423fff4c 	andi	r8,r8,65533
   82fbc:	800d883a 	mov	r6,r16
   82fc0:	880b883a 	mov	r5,r17
   82fc4:	da002c0d 	sth	r8,176(sp)
   82fc8:	da402c8d 	sth	r9,178(sp)
   82fcc:	da803015 	stw	r10,192(sp)
   82fd0:	dac03215 	stw	r11,200(sp)
   82fd4:	d8802d15 	stw	r2,180(sp)
   82fd8:	d8c02e15 	stw	r3,184(sp)
   82fdc:	d8802915 	stw	r2,164(sp)
   82fe0:	d8c02b15 	stw	r3,172(sp)
   82fe4:	d8002f15 	stw	zero,188(sp)
   82fe8:	0082f140 	call	82f14 <___vfprintf_internal_r>
   82fec:	d8814b15 	stw	r2,1324(sp)
   82ff0:	10000416 	blt	r2,zero,83004 <___vfprintf_internal_r+0xf0>
   82ff4:	d9014f17 	ldw	r4,1340(sp)
   82ff8:	880b883a 	mov	r5,r17
   82ffc:	00867300 	call	86730 <_fflush_r>
   83000:	1002321e 	bne	r2,zero,838cc <___vfprintf_internal_r+0x9b8>
   83004:	d8802c0b 	ldhu	r2,176(sp)
   83008:	1080100c 	andi	r2,r2,64
   8300c:	10000326 	beq	r2,zero,8301c <___vfprintf_internal_r+0x108>
   83010:	b080030b 	ldhu	r2,12(r22)
   83014:	10801014 	ori	r2,r2,64
   83018:	b080030d 	sth	r2,12(r22)
   8301c:	d8814b17 	ldw	r2,1324(sp)
   83020:	dfc15b17 	ldw	ra,1388(sp)
   83024:	df015a17 	ldw	fp,1384(sp)
   83028:	ddc15917 	ldw	r23,1380(sp)
   8302c:	dd815817 	ldw	r22,1376(sp)
   83030:	dd415717 	ldw	r21,1372(sp)
   83034:	dd015617 	ldw	r20,1368(sp)
   83038:	dcc15517 	ldw	r19,1364(sp)
   8303c:	dc815417 	ldw	r18,1360(sp)
   83040:	dc415317 	ldw	r17,1356(sp)
   83044:	dc015217 	ldw	r16,1352(sp)
   83048:	dec15c04 	addi	sp,sp,1392
   8304c:	f800283a 	ret
   83050:	0005883a 	mov	r2,zero
   83054:	0007883a 	mov	r3,zero
   83058:	dd401904 	addi	r21,sp,100
   8305c:	d8814215 	stw	r2,1288(sp)
   83060:	802f883a 	mov	r23,r16
   83064:	d8c14315 	stw	r3,1292(sp)
   83068:	d8014b15 	stw	zero,1324(sp)
   8306c:	d8014815 	stw	zero,1312(sp)
   83070:	d8014415 	stw	zero,1296(sp)
   83074:	d8014715 	stw	zero,1308(sp)
   83078:	dd400c15 	stw	r21,48(sp)
   8307c:	d8000e15 	stw	zero,56(sp)
   83080:	d8000d15 	stw	zero,52(sp)
   83084:	b8800007 	ldb	r2,0(r23)
   83088:	10001926 	beq	r2,zero,830f0 <___vfprintf_internal_r+0x1dc>
   8308c:	00c00944 	movi	r3,37
   83090:	10c01726 	beq	r2,r3,830f0 <___vfprintf_internal_r+0x1dc>
   83094:	b821883a 	mov	r16,r23
   83098:	00000106 	br	830a0 <___vfprintf_internal_r+0x18c>
   8309c:	10c00326 	beq	r2,r3,830ac <___vfprintf_internal_r+0x198>
   830a0:	84000044 	addi	r16,r16,1
   830a4:	80800007 	ldb	r2,0(r16)
   830a8:	103ffc1e 	bne	r2,zero,8309c <___vfprintf_internal_r+0x188>
   830ac:	85e7c83a 	sub	r19,r16,r23
   830b0:	98000e26 	beq	r19,zero,830ec <___vfprintf_internal_r+0x1d8>
   830b4:	dc800e17 	ldw	r18,56(sp)
   830b8:	dc400d17 	ldw	r17,52(sp)
   830bc:	008001c4 	movi	r2,7
   830c0:	94e5883a 	add	r18,r18,r19
   830c4:	8c400044 	addi	r17,r17,1
   830c8:	adc00015 	stw	r23,0(r21)
   830cc:	dc800e15 	stw	r18,56(sp)
   830d0:	acc00115 	stw	r19,4(r21)
   830d4:	dc400d15 	stw	r17,52(sp)
   830d8:	14428b16 	blt	r2,r17,83b08 <___vfprintf_internal_r+0xbf4>
   830dc:	ad400204 	addi	r21,r21,8
   830e0:	d9014b17 	ldw	r4,1324(sp)
   830e4:	24c9883a 	add	r4,r4,r19
   830e8:	d9014b15 	stw	r4,1324(sp)
   830ec:	802f883a 	mov	r23,r16
   830f0:	b8800007 	ldb	r2,0(r23)
   830f4:	10013c26 	beq	r2,zero,835e8 <___vfprintf_internal_r+0x6d4>
   830f8:	bdc00044 	addi	r23,r23,1
   830fc:	d8000405 	stb	zero,16(sp)
   83100:	b8c00007 	ldb	r3,0(r23)
   83104:	04ffffc4 	movi	r19,-1
   83108:	d8014c15 	stw	zero,1328(sp)
   8310c:	d8014a15 	stw	zero,1320(sp)
   83110:	d8c14d15 	stw	r3,1332(sp)
   83114:	bdc00044 	addi	r23,r23,1
   83118:	d9414d17 	ldw	r5,1332(sp)
   8311c:	00801604 	movi	r2,88
   83120:	28fff804 	addi	r3,r5,-32
   83124:	10c06036 	bltu	r2,r3,832a8 <___vfprintf_internal_r+0x394>
   83128:	18c5883a 	add	r2,r3,r3
   8312c:	1085883a 	add	r2,r2,r2
   83130:	00c00234 	movhi	r3,8
   83134:	18cc5104 	addi	r3,r3,12612
   83138:	10c5883a 	add	r2,r2,r3
   8313c:	11000017 	ldw	r4,0(r2)
   83140:	2000683a 	jmp	r4
   83144:	000840b8 	rdprs	zero,zero,8450
   83148:	000832a8 	cmpgeui	zero,zero,8394
   8314c:	000832a8 	cmpgeui	zero,zero,8394
   83150:	000840a4 	muli	zero,zero,8450
   83154:	000832a8 	cmpgeui	zero,zero,8394
   83158:	000832a8 	cmpgeui	zero,zero,8394
   8315c:	000832a8 	cmpgeui	zero,zero,8394
   83160:	000832a8 	cmpgeui	zero,zero,8394
   83164:	000832a8 	cmpgeui	zero,zero,8394
   83168:	000832a8 	cmpgeui	zero,zero,8394
   8316c:	00083e84 	movi	zero,8442
   83170:	00084094 	movui	zero,8450
   83174:	000832a8 	cmpgeui	zero,zero,8394
   83178:	00083e9c 	xori	zero,zero,8442
   8317c:	0008413c 	xorhi	zero,zero,8452
   83180:	000832a8 	cmpgeui	zero,zero,8394
   83184:	00084128 	cmpgeui	zero,zero,8452
   83188:	000840e4 	muli	zero,zero,8451
   8318c:	000840e4 	muli	zero,zero,8451
   83190:	000840e4 	muli	zero,zero,8451
   83194:	000840e4 	muli	zero,zero,8451
   83198:	000840e4 	muli	zero,zero,8451
   8319c:	000840e4 	muli	zero,zero,8451
   831a0:	000840e4 	muli	zero,zero,8451
   831a4:	000840e4 	muli	zero,zero,8451
   831a8:	000840e4 	muli	zero,zero,8451
   831ac:	000832a8 	cmpgeui	zero,zero,8394
   831b0:	000832a8 	cmpgeui	zero,zero,8394
   831b4:	000832a8 	cmpgeui	zero,zero,8394
   831b8:	000832a8 	cmpgeui	zero,zero,8394
   831bc:	000832a8 	cmpgeui	zero,zero,8394
   831c0:	000832a8 	cmpgeui	zero,zero,8394
   831c4:	000832a8 	cmpgeui	zero,zero,8394
   831c8:	000832a8 	cmpgeui	zero,zero,8394
   831cc:	000832a8 	cmpgeui	zero,zero,8394
   831d0:	000832a8 	cmpgeui	zero,zero,8394
   831d4:	00083900 	call	8390 <OSCtxSw_SWITCH_PC+0x8350>
   831d8:	00083f6c 	andhi	zero,zero,8445
   831dc:	000832a8 	cmpgeui	zero,zero,8394
   831e0:	00083f6c 	andhi	zero,zero,8445
   831e4:	000832a8 	cmpgeui	zero,zero,8394
   831e8:	000832a8 	cmpgeui	zero,zero,8394
   831ec:	000832a8 	cmpgeui	zero,zero,8394
   831f0:	000832a8 	cmpgeui	zero,zero,8394
   831f4:	000840d0 	cmplti	zero,zero,8451
   831f8:	000832a8 	cmpgeui	zero,zero,8394
   831fc:	000832a8 	cmpgeui	zero,zero,8394
   83200:	000839b4 	movhi	zero,8422
   83204:	000832a8 	cmpgeui	zero,zero,8394
   83208:	000832a8 	cmpgeui	zero,zero,8394
   8320c:	000832a8 	cmpgeui	zero,zero,8394
   83210:	000832a8 	cmpgeui	zero,zero,8394
   83214:	000832a8 	cmpgeui	zero,zero,8394
   83218:	00083a00 	call	83a0 <OSCtxSw_SWITCH_PC+0x8360>
   8321c:	000832a8 	cmpgeui	zero,zero,8394
   83220:	000832a8 	cmpgeui	zero,zero,8394
   83224:	00084020 	cmpeqi	zero,zero,8448
   83228:	000832a8 	cmpgeui	zero,zero,8394
   8322c:	000832a8 	cmpgeui	zero,zero,8394
   83230:	000832a8 	cmpgeui	zero,zero,8394
   83234:	000832a8 	cmpgeui	zero,zero,8394
   83238:	000832a8 	cmpgeui	zero,zero,8394
   8323c:	000832a8 	cmpgeui	zero,zero,8394
   83240:	000832a8 	cmpgeui	zero,zero,8394
   83244:	000832a8 	cmpgeui	zero,zero,8394
   83248:	000832a8 	cmpgeui	zero,zero,8394
   8324c:	000832a8 	cmpgeui	zero,zero,8394
   83250:	00083ff4 	movhi	zero,8447
   83254:	0008390c 	andi	zero,zero,8420
   83258:	00083f6c 	andhi	zero,zero,8445
   8325c:	00083f6c 	andhi	zero,zero,8445
   83260:	00083f6c 	andhi	zero,zero,8445
   83264:	00083f58 	cmpnei	zero,zero,8445
   83268:	0008390c 	andi	zero,zero,8420
   8326c:	000832a8 	cmpgeui	zero,zero,8394
   83270:	000832a8 	cmpgeui	zero,zero,8394
   83274:	00083ee0 	cmpeqi	zero,zero,8443
   83278:	000832a8 	cmpgeui	zero,zero,8394
   8327c:	00083eb0 	cmpltui	zero,zero,8442
   83280:	000839c0 	call	839c <OSCtxSw_SWITCH_PC+0x835c>
   83284:	00083f10 	cmplti	zero,zero,8444
   83288:	00083efc 	xorhi	zero,zero,8443
   8328c:	000832a8 	cmpgeui	zero,zero,8394
   83290:	000841a4 	muli	zero,zero,8454
   83294:	000832a8 	cmpgeui	zero,zero,8394
   83298:	00083a0c 	andi	zero,zero,8424
   8329c:	000832a8 	cmpgeui	zero,zero,8394
   832a0:	000832a8 	cmpgeui	zero,zero,8394
   832a4:	00084084 	movi	zero,8450
   832a8:	d9014d17 	ldw	r4,1332(sp)
   832ac:	2000ce26 	beq	r4,zero,835e8 <___vfprintf_internal_r+0x6d4>
   832b0:	01400044 	movi	r5,1
   832b4:	d9800f04 	addi	r6,sp,60
   832b8:	d9c14015 	stw	r7,1280(sp)
   832bc:	d9414515 	stw	r5,1300(sp)
   832c0:	d9814115 	stw	r6,1284(sp)
   832c4:	280f883a 	mov	r7,r5
   832c8:	d9000f05 	stb	r4,60(sp)
   832cc:	d8000405 	stb	zero,16(sp)
   832d0:	d8014615 	stw	zero,1304(sp)
   832d4:	d8c14c17 	ldw	r3,1328(sp)
   832d8:	1880008c 	andi	r2,r3,2
   832dc:	1005003a 	cmpeq	r2,r2,zero
   832e0:	d8815015 	stw	r2,1344(sp)
   832e4:	1000031e 	bne	r2,zero,832f4 <___vfprintf_internal_r+0x3e0>
   832e8:	d9014517 	ldw	r4,1300(sp)
   832ec:	21000084 	addi	r4,r4,2
   832f0:	d9014515 	stw	r4,1300(sp)
   832f4:	d9414c17 	ldw	r5,1328(sp)
   832f8:	2940210c 	andi	r5,r5,132
   832fc:	d9414e15 	stw	r5,1336(sp)
   83300:	28002d1e 	bne	r5,zero,833b8 <___vfprintf_internal_r+0x4a4>
   83304:	d9814a17 	ldw	r6,1320(sp)
   83308:	d8814517 	ldw	r2,1300(sp)
   8330c:	30a1c83a 	sub	r16,r6,r2
   83310:	0400290e 	bge	zero,r16,833b8 <___vfprintf_internal_r+0x4a4>
   83314:	00800404 	movi	r2,16
   83318:	14045e0e 	bge	r2,r16,84494 <___vfprintf_internal_r+0x1580>
   8331c:	dc800e17 	ldw	r18,56(sp)
   83320:	dc400d17 	ldw	r17,52(sp)
   83324:	1027883a 	mov	r19,r2
   83328:	070002b4 	movhi	fp,10
   8332c:	e7252984 	addi	fp,fp,-27482
   83330:	050001c4 	movi	r20,7
   83334:	00000306 	br	83344 <___vfprintf_internal_r+0x430>
   83338:	843ffc04 	addi	r16,r16,-16
   8333c:	ad400204 	addi	r21,r21,8
   83340:	9c00130e 	bge	r19,r16,83390 <___vfprintf_internal_r+0x47c>
   83344:	94800404 	addi	r18,r18,16
   83348:	8c400044 	addi	r17,r17,1
   8334c:	af000015 	stw	fp,0(r21)
   83350:	acc00115 	stw	r19,4(r21)
   83354:	dc800e15 	stw	r18,56(sp)
   83358:	dc400d15 	stw	r17,52(sp)
   8335c:	a47ff60e 	bge	r20,r17,83338 <___vfprintf_internal_r+0x424>
   83360:	d9014f17 	ldw	r4,1340(sp)
   83364:	b00b883a 	mov	r5,r22
   83368:	d9800c04 	addi	r6,sp,48
   8336c:	d9c15115 	stw	r7,1348(sp)
   83370:	0082ebc0 	call	82ebc <__sprint_r>
   83374:	d9c15117 	ldw	r7,1348(sp)
   83378:	10009e1e 	bne	r2,zero,835f4 <___vfprintf_internal_r+0x6e0>
   8337c:	843ffc04 	addi	r16,r16,-16
   83380:	dc800e17 	ldw	r18,56(sp)
   83384:	dc400d17 	ldw	r17,52(sp)
   83388:	dd401904 	addi	r21,sp,100
   8338c:	9c3fed16 	blt	r19,r16,83344 <___vfprintf_internal_r+0x430>
   83390:	9425883a 	add	r18,r18,r16
   83394:	8c400044 	addi	r17,r17,1
   83398:	008001c4 	movi	r2,7
   8339c:	af000015 	stw	fp,0(r21)
   833a0:	ac000115 	stw	r16,4(r21)
   833a4:	dc800e15 	stw	r18,56(sp)
   833a8:	dc400d15 	stw	r17,52(sp)
   833ac:	1441f516 	blt	r2,r17,83b84 <___vfprintf_internal_r+0xc70>
   833b0:	ad400204 	addi	r21,r21,8
   833b4:	00000206 	br	833c0 <___vfprintf_internal_r+0x4ac>
   833b8:	dc800e17 	ldw	r18,56(sp)
   833bc:	dc400d17 	ldw	r17,52(sp)
   833c0:	d8800407 	ldb	r2,16(sp)
   833c4:	10000b26 	beq	r2,zero,833f4 <___vfprintf_internal_r+0x4e0>
   833c8:	00800044 	movi	r2,1
   833cc:	94800044 	addi	r18,r18,1
   833d0:	8c400044 	addi	r17,r17,1
   833d4:	a8800115 	stw	r2,4(r21)
   833d8:	d8c00404 	addi	r3,sp,16
   833dc:	008001c4 	movi	r2,7
   833e0:	a8c00015 	stw	r3,0(r21)
   833e4:	dc800e15 	stw	r18,56(sp)
   833e8:	dc400d15 	stw	r17,52(sp)
   833ec:	1441da16 	blt	r2,r17,83b58 <___vfprintf_internal_r+0xc44>
   833f0:	ad400204 	addi	r21,r21,8
   833f4:	d9015017 	ldw	r4,1344(sp)
   833f8:	20000b1e 	bne	r4,zero,83428 <___vfprintf_internal_r+0x514>
   833fc:	d8800444 	addi	r2,sp,17
   83400:	94800084 	addi	r18,r18,2
   83404:	8c400044 	addi	r17,r17,1
   83408:	a8800015 	stw	r2,0(r21)
   8340c:	00c00084 	movi	r3,2
   83410:	008001c4 	movi	r2,7
   83414:	a8c00115 	stw	r3,4(r21)
   83418:	dc800e15 	stw	r18,56(sp)
   8341c:	dc400d15 	stw	r17,52(sp)
   83420:	1441c216 	blt	r2,r17,83b2c <___vfprintf_internal_r+0xc18>
   83424:	ad400204 	addi	r21,r21,8
   83428:	d9414e17 	ldw	r5,1336(sp)
   8342c:	00802004 	movi	r2,128
   83430:	2880b126 	beq	r5,r2,836f8 <___vfprintf_internal_r+0x7e4>
   83434:	d8c14617 	ldw	r3,1304(sp)
   83438:	19e1c83a 	sub	r16,r3,r7
   8343c:	0400260e 	bge	zero,r16,834d8 <___vfprintf_internal_r+0x5c4>
   83440:	00800404 	movi	r2,16
   83444:	1403cf0e 	bge	r2,r16,84384 <___vfprintf_internal_r+0x1470>
   83448:	1027883a 	mov	r19,r2
   8344c:	070002b4 	movhi	fp,10
   83450:	e7252584 	addi	fp,fp,-27498
   83454:	050001c4 	movi	r20,7
   83458:	00000306 	br	83468 <___vfprintf_internal_r+0x554>
   8345c:	843ffc04 	addi	r16,r16,-16
   83460:	ad400204 	addi	r21,r21,8
   83464:	9c00130e 	bge	r19,r16,834b4 <___vfprintf_internal_r+0x5a0>
   83468:	94800404 	addi	r18,r18,16
   8346c:	8c400044 	addi	r17,r17,1
   83470:	af000015 	stw	fp,0(r21)
   83474:	acc00115 	stw	r19,4(r21)
   83478:	dc800e15 	stw	r18,56(sp)
   8347c:	dc400d15 	stw	r17,52(sp)
   83480:	a47ff60e 	bge	r20,r17,8345c <___vfprintf_internal_r+0x548>
   83484:	d9014f17 	ldw	r4,1340(sp)
   83488:	b00b883a 	mov	r5,r22
   8348c:	d9800c04 	addi	r6,sp,48
   83490:	d9c15115 	stw	r7,1348(sp)
   83494:	0082ebc0 	call	82ebc <__sprint_r>
   83498:	d9c15117 	ldw	r7,1348(sp)
   8349c:	1000551e 	bne	r2,zero,835f4 <___vfprintf_internal_r+0x6e0>
   834a0:	843ffc04 	addi	r16,r16,-16
   834a4:	dc800e17 	ldw	r18,56(sp)
   834a8:	dc400d17 	ldw	r17,52(sp)
   834ac:	dd401904 	addi	r21,sp,100
   834b0:	9c3fed16 	blt	r19,r16,83468 <___vfprintf_internal_r+0x554>
   834b4:	9425883a 	add	r18,r18,r16
   834b8:	8c400044 	addi	r17,r17,1
   834bc:	008001c4 	movi	r2,7
   834c0:	af000015 	stw	fp,0(r21)
   834c4:	ac000115 	stw	r16,4(r21)
   834c8:	dc800e15 	stw	r18,56(sp)
   834cc:	dc400d15 	stw	r17,52(sp)
   834d0:	14418216 	blt	r2,r17,83adc <___vfprintf_internal_r+0xbc8>
   834d4:	ad400204 	addi	r21,r21,8
   834d8:	d9014c17 	ldw	r4,1328(sp)
   834dc:	2080400c 	andi	r2,r4,256
   834e0:	10004a1e 	bne	r2,zero,8360c <___vfprintf_internal_r+0x6f8>
   834e4:	d9414117 	ldw	r5,1284(sp)
   834e8:	91e5883a 	add	r18,r18,r7
   834ec:	8c400044 	addi	r17,r17,1
   834f0:	008001c4 	movi	r2,7
   834f4:	a9400015 	stw	r5,0(r21)
   834f8:	a9c00115 	stw	r7,4(r21)
   834fc:	dc800e15 	stw	r18,56(sp)
   83500:	dc400d15 	stw	r17,52(sp)
   83504:	14416716 	blt	r2,r17,83aa4 <___vfprintf_internal_r+0xb90>
   83508:	a8c00204 	addi	r3,r21,8
   8350c:	d9814c17 	ldw	r6,1328(sp)
   83510:	3080010c 	andi	r2,r6,4
   83514:	10002826 	beq	r2,zero,835b8 <___vfprintf_internal_r+0x6a4>
   83518:	d8814a17 	ldw	r2,1320(sp)
   8351c:	d9014517 	ldw	r4,1300(sp)
   83520:	1121c83a 	sub	r16,r2,r4
   83524:	0400240e 	bge	zero,r16,835b8 <___vfprintf_internal_r+0x6a4>
   83528:	00800404 	movi	r2,16
   8352c:	1404550e 	bge	r2,r16,84684 <___vfprintf_internal_r+0x1770>
   83530:	dc400d17 	ldw	r17,52(sp)
   83534:	1027883a 	mov	r19,r2
   83538:	070002b4 	movhi	fp,10
   8353c:	e7252984 	addi	fp,fp,-27482
   83540:	050001c4 	movi	r20,7
   83544:	00000306 	br	83554 <___vfprintf_internal_r+0x640>
   83548:	843ffc04 	addi	r16,r16,-16
   8354c:	18c00204 	addi	r3,r3,8
   83550:	9c00110e 	bge	r19,r16,83598 <___vfprintf_internal_r+0x684>
   83554:	94800404 	addi	r18,r18,16
   83558:	8c400044 	addi	r17,r17,1
   8355c:	1f000015 	stw	fp,0(r3)
   83560:	1cc00115 	stw	r19,4(r3)
   83564:	dc800e15 	stw	r18,56(sp)
   83568:	dc400d15 	stw	r17,52(sp)
   8356c:	a47ff60e 	bge	r20,r17,83548 <___vfprintf_internal_r+0x634>
   83570:	d9014f17 	ldw	r4,1340(sp)
   83574:	b00b883a 	mov	r5,r22
   83578:	d9800c04 	addi	r6,sp,48
   8357c:	0082ebc0 	call	82ebc <__sprint_r>
   83580:	10001c1e 	bne	r2,zero,835f4 <___vfprintf_internal_r+0x6e0>
   83584:	843ffc04 	addi	r16,r16,-16
   83588:	dc800e17 	ldw	r18,56(sp)
   8358c:	dc400d17 	ldw	r17,52(sp)
   83590:	d8c01904 	addi	r3,sp,100
   83594:	9c3fef16 	blt	r19,r16,83554 <___vfprintf_internal_r+0x640>
   83598:	9425883a 	add	r18,r18,r16
   8359c:	8c400044 	addi	r17,r17,1
   835a0:	008001c4 	movi	r2,7
   835a4:	1f000015 	stw	fp,0(r3)
   835a8:	1c000115 	stw	r16,4(r3)
   835ac:	dc800e15 	stw	r18,56(sp)
   835b0:	dc400d15 	stw	r17,52(sp)
   835b4:	1440cb16 	blt	r2,r17,838e4 <___vfprintf_internal_r+0x9d0>
   835b8:	d8814a17 	ldw	r2,1320(sp)
   835bc:	d9414517 	ldw	r5,1300(sp)
   835c0:	1140010e 	bge	r2,r5,835c8 <___vfprintf_internal_r+0x6b4>
   835c4:	2805883a 	mov	r2,r5
   835c8:	d9814b17 	ldw	r6,1324(sp)
   835cc:	308d883a 	add	r6,r6,r2
   835d0:	d9814b15 	stw	r6,1324(sp)
   835d4:	90013b1e 	bne	r18,zero,83ac4 <___vfprintf_internal_r+0xbb0>
   835d8:	d9c14017 	ldw	r7,1280(sp)
   835dc:	dd401904 	addi	r21,sp,100
   835e0:	d8000d15 	stw	zero,52(sp)
   835e4:	003ea706 	br	83084 <___vfprintf_internal_r+0x170>
   835e8:	d8800e17 	ldw	r2,56(sp)
   835ec:	1005451e 	bne	r2,zero,84b04 <___vfprintf_internal_r+0x1bf0>
   835f0:	d8000d15 	stw	zero,52(sp)
   835f4:	b080030b 	ldhu	r2,12(r22)
   835f8:	1080100c 	andi	r2,r2,64
   835fc:	103e8726 	beq	r2,zero,8301c <___vfprintf_internal_r+0x108>
   83600:	00bfffc4 	movi	r2,-1
   83604:	d8814b15 	stw	r2,1324(sp)
   83608:	003e8406 	br	8301c <___vfprintf_internal_r+0x108>
   8360c:	d9814d17 	ldw	r6,1332(sp)
   83610:	00801944 	movi	r2,101
   83614:	11806e16 	blt	r2,r6,837d0 <___vfprintf_internal_r+0x8bc>
   83618:	d9414717 	ldw	r5,1308(sp)
   8361c:	00c00044 	movi	r3,1
   83620:	1943490e 	bge	r3,r5,84348 <___vfprintf_internal_r+0x1434>
   83624:	d8814117 	ldw	r2,1284(sp)
   83628:	94800044 	addi	r18,r18,1
   8362c:	8c400044 	addi	r17,r17,1
   83630:	a8800015 	stw	r2,0(r21)
   83634:	008001c4 	movi	r2,7
   83638:	a8c00115 	stw	r3,4(r21)
   8363c:	dc800e15 	stw	r18,56(sp)
   83640:	dc400d15 	stw	r17,52(sp)
   83644:	1441ca16 	blt	r2,r17,83d70 <___vfprintf_internal_r+0xe5c>
   83648:	a8c00204 	addi	r3,r21,8
   8364c:	d9014917 	ldw	r4,1316(sp)
   83650:	00800044 	movi	r2,1
   83654:	94800044 	addi	r18,r18,1
   83658:	8c400044 	addi	r17,r17,1
   8365c:	18800115 	stw	r2,4(r3)
   83660:	008001c4 	movi	r2,7
   83664:	19000015 	stw	r4,0(r3)
   83668:	dc800e15 	stw	r18,56(sp)
   8366c:	dc400d15 	stw	r17,52(sp)
   83670:	1441b616 	blt	r2,r17,83d4c <___vfprintf_internal_r+0xe38>
   83674:	1cc00204 	addi	r19,r3,8
   83678:	d9014217 	ldw	r4,1288(sp)
   8367c:	d9414317 	ldw	r5,1292(sp)
   83680:	000d883a 	mov	r6,zero
   83684:	000f883a 	mov	r7,zero
   83688:	008baec0 	call	8baec <__nedf2>
   8368c:	10017426 	beq	r2,zero,83c60 <___vfprintf_internal_r+0xd4c>
   83690:	d9414717 	ldw	r5,1308(sp)
   83694:	d9814117 	ldw	r6,1284(sp)
   83698:	8c400044 	addi	r17,r17,1
   8369c:	2c85883a 	add	r2,r5,r18
   836a0:	14bfffc4 	addi	r18,r2,-1
   836a4:	28bfffc4 	addi	r2,r5,-1
   836a8:	30c00044 	addi	r3,r6,1
   836ac:	98800115 	stw	r2,4(r19)
   836b0:	008001c4 	movi	r2,7
   836b4:	98c00015 	stw	r3,0(r19)
   836b8:	dc800e15 	stw	r18,56(sp)
   836bc:	dc400d15 	stw	r17,52(sp)
   836c0:	14418e16 	blt	r2,r17,83cfc <___vfprintf_internal_r+0xde8>
   836c4:	9cc00204 	addi	r19,r19,8
   836c8:	d9414817 	ldw	r5,1312(sp)
   836cc:	d8800804 	addi	r2,sp,32
   836d0:	8c400044 	addi	r17,r17,1
   836d4:	9165883a 	add	r18,r18,r5
   836d8:	98800015 	stw	r2,0(r19)
   836dc:	008001c4 	movi	r2,7
   836e0:	99400115 	stw	r5,4(r19)
   836e4:	dc800e15 	stw	r18,56(sp)
   836e8:	dc400d15 	stw	r17,52(sp)
   836ec:	1440ed16 	blt	r2,r17,83aa4 <___vfprintf_internal_r+0xb90>
   836f0:	98c00204 	addi	r3,r19,8
   836f4:	003f8506 	br	8350c <___vfprintf_internal_r+0x5f8>
   836f8:	d9814a17 	ldw	r6,1320(sp)
   836fc:	d8814517 	ldw	r2,1300(sp)
   83700:	30a1c83a 	sub	r16,r6,r2
   83704:	043f4b0e 	bge	zero,r16,83434 <___vfprintf_internal_r+0x520>
   83708:	00800404 	movi	r2,16
   8370c:	14043a0e 	bge	r2,r16,847f8 <___vfprintf_internal_r+0x18e4>
   83710:	1027883a 	mov	r19,r2
   83714:	070002b4 	movhi	fp,10
   83718:	e7252584 	addi	fp,fp,-27498
   8371c:	050001c4 	movi	r20,7
   83720:	00000306 	br	83730 <___vfprintf_internal_r+0x81c>
   83724:	843ffc04 	addi	r16,r16,-16
   83728:	ad400204 	addi	r21,r21,8
   8372c:	9c00130e 	bge	r19,r16,8377c <___vfprintf_internal_r+0x868>
   83730:	94800404 	addi	r18,r18,16
   83734:	8c400044 	addi	r17,r17,1
   83738:	af000015 	stw	fp,0(r21)
   8373c:	acc00115 	stw	r19,4(r21)
   83740:	dc800e15 	stw	r18,56(sp)
   83744:	dc400d15 	stw	r17,52(sp)
   83748:	a47ff60e 	bge	r20,r17,83724 <___vfprintf_internal_r+0x810>
   8374c:	d9014f17 	ldw	r4,1340(sp)
   83750:	b00b883a 	mov	r5,r22
   83754:	d9800c04 	addi	r6,sp,48
   83758:	d9c15115 	stw	r7,1348(sp)
   8375c:	0082ebc0 	call	82ebc <__sprint_r>
   83760:	d9c15117 	ldw	r7,1348(sp)
   83764:	103fa31e 	bne	r2,zero,835f4 <___vfprintf_internal_r+0x6e0>
   83768:	843ffc04 	addi	r16,r16,-16
   8376c:	dc800e17 	ldw	r18,56(sp)
   83770:	dc400d17 	ldw	r17,52(sp)
   83774:	dd401904 	addi	r21,sp,100
   83778:	9c3fed16 	blt	r19,r16,83730 <___vfprintf_internal_r+0x81c>
   8377c:	9425883a 	add	r18,r18,r16
   83780:	8c400044 	addi	r17,r17,1
   83784:	008001c4 	movi	r2,7
   83788:	af000015 	stw	fp,0(r21)
   8378c:	ac000115 	stw	r16,4(r21)
   83790:	dc800e15 	stw	r18,56(sp)
   83794:	dc400d15 	stw	r17,52(sp)
   83798:	14416116 	blt	r2,r17,83d20 <___vfprintf_internal_r+0xe0c>
   8379c:	ad400204 	addi	r21,r21,8
   837a0:	003f2406 	br	83434 <___vfprintf_internal_r+0x520>
   837a4:	d9014f17 	ldw	r4,1340(sp)
   837a8:	00869c80 	call	869c8 <__sinit>
   837ac:	d9c15117 	ldw	r7,1348(sp)
   837b0:	003def06 	br	82f70 <___vfprintf_internal_r+0x5c>
   837b4:	d9014f17 	ldw	r4,1340(sp)
   837b8:	b00b883a 	mov	r5,r22
   837bc:	d9c15115 	stw	r7,1348(sp)
   837c0:	0084dfc0 	call	84dfc <__swsetup_r>
   837c4:	d9c15117 	ldw	r7,1348(sp)
   837c8:	103dee26 	beq	r2,zero,82f84 <___vfprintf_internal_r+0x70>
   837cc:	003f8c06 	br	83600 <___vfprintf_internal_r+0x6ec>
   837d0:	d9014217 	ldw	r4,1288(sp)
   837d4:	d9414317 	ldw	r5,1292(sp)
   837d8:	000d883a 	mov	r6,zero
   837dc:	000f883a 	mov	r7,zero
   837e0:	008ba640 	call	8ba64 <__eqdf2>
   837e4:	1000f21e 	bne	r2,zero,83bb0 <___vfprintf_internal_r+0xc9c>
   837e8:	008002b4 	movhi	r2,10
   837ec:	10a52504 	addi	r2,r2,-27500
   837f0:	94800044 	addi	r18,r18,1
   837f4:	8c400044 	addi	r17,r17,1
   837f8:	a8800015 	stw	r2,0(r21)
   837fc:	00c00044 	movi	r3,1
   83800:	008001c4 	movi	r2,7
   83804:	a8c00115 	stw	r3,4(r21)
   83808:	dc800e15 	stw	r18,56(sp)
   8380c:	dc400d15 	stw	r17,52(sp)
   83810:	14430016 	blt	r2,r17,84414 <___vfprintf_internal_r+0x1500>
   83814:	a8c00204 	addi	r3,r21,8
   83818:	d8800517 	ldw	r2,20(sp)
   8381c:	d9014717 	ldw	r4,1308(sp)
   83820:	11015c0e 	bge	r2,r4,83d94 <___vfprintf_internal_r+0xe80>
   83824:	dc400d17 	ldw	r17,52(sp)
   83828:	d9814917 	ldw	r6,1316(sp)
   8382c:	00800044 	movi	r2,1
   83830:	94800044 	addi	r18,r18,1
   83834:	8c400044 	addi	r17,r17,1
   83838:	18800115 	stw	r2,4(r3)
   8383c:	008001c4 	movi	r2,7
   83840:	19800015 	stw	r6,0(r3)
   83844:	dc800e15 	stw	r18,56(sp)
   83848:	dc400d15 	stw	r17,52(sp)
   8384c:	14431616 	blt	r2,r17,844a8 <___vfprintf_internal_r+0x1594>
   83850:	18c00204 	addi	r3,r3,8
   83854:	d8814717 	ldw	r2,1308(sp)
   83858:	143fffc4 	addi	r16,r2,-1
   8385c:	043f2b0e 	bge	zero,r16,8350c <___vfprintf_internal_r+0x5f8>
   83860:	00800404 	movi	r2,16
   83864:	1402a80e 	bge	r2,r16,84308 <___vfprintf_internal_r+0x13f4>
   83868:	dc400d17 	ldw	r17,52(sp)
   8386c:	1027883a 	mov	r19,r2
   83870:	070002b4 	movhi	fp,10
   83874:	e7252584 	addi	fp,fp,-27498
   83878:	050001c4 	movi	r20,7
   8387c:	00000306 	br	8388c <___vfprintf_internal_r+0x978>
   83880:	18c00204 	addi	r3,r3,8
   83884:	843ffc04 	addi	r16,r16,-16
   83888:	9c02a20e 	bge	r19,r16,84314 <___vfprintf_internal_r+0x1400>
   8388c:	94800404 	addi	r18,r18,16
   83890:	8c400044 	addi	r17,r17,1
   83894:	1f000015 	stw	fp,0(r3)
   83898:	1cc00115 	stw	r19,4(r3)
   8389c:	dc800e15 	stw	r18,56(sp)
   838a0:	dc400d15 	stw	r17,52(sp)
   838a4:	a47ff60e 	bge	r20,r17,83880 <___vfprintf_internal_r+0x96c>
   838a8:	d9014f17 	ldw	r4,1340(sp)
   838ac:	b00b883a 	mov	r5,r22
   838b0:	d9800c04 	addi	r6,sp,48
   838b4:	0082ebc0 	call	82ebc <__sprint_r>
   838b8:	103f4e1e 	bne	r2,zero,835f4 <___vfprintf_internal_r+0x6e0>
   838bc:	dc800e17 	ldw	r18,56(sp)
   838c0:	dc400d17 	ldw	r17,52(sp)
   838c4:	d8c01904 	addi	r3,sp,100
   838c8:	003fee06 	br	83884 <___vfprintf_internal_r+0x970>
   838cc:	d8802c0b 	ldhu	r2,176(sp)
   838d0:	00ffffc4 	movi	r3,-1
   838d4:	d8c14b15 	stw	r3,1324(sp)
   838d8:	1080100c 	andi	r2,r2,64
   838dc:	103dcc1e 	bne	r2,zero,83010 <___vfprintf_internal_r+0xfc>
   838e0:	003dce06 	br	8301c <___vfprintf_internal_r+0x108>
   838e4:	d9014f17 	ldw	r4,1340(sp)
   838e8:	b00b883a 	mov	r5,r22
   838ec:	d9800c04 	addi	r6,sp,48
   838f0:	0082ebc0 	call	82ebc <__sprint_r>
   838f4:	103f3f1e 	bne	r2,zero,835f4 <___vfprintf_internal_r+0x6e0>
   838f8:	dc800e17 	ldw	r18,56(sp)
   838fc:	003f2e06 	br	835b8 <___vfprintf_internal_r+0x6a4>
   83900:	d9414c17 	ldw	r5,1328(sp)
   83904:	29400414 	ori	r5,r5,16
   83908:	d9414c15 	stw	r5,1328(sp)
   8390c:	d9814c17 	ldw	r6,1328(sp)
   83910:	3080080c 	andi	r2,r6,32
   83914:	10014f1e 	bne	r2,zero,83e54 <___vfprintf_internal_r+0xf40>
   83918:	d8c14c17 	ldw	r3,1328(sp)
   8391c:	1880040c 	andi	r2,r3,16
   83920:	1002f01e 	bne	r2,zero,844e4 <___vfprintf_internal_r+0x15d0>
   83924:	d9014c17 	ldw	r4,1328(sp)
   83928:	2080100c 	andi	r2,r4,64
   8392c:	1002ed26 	beq	r2,zero,844e4 <___vfprintf_internal_r+0x15d0>
   83930:	3880000f 	ldh	r2,0(r7)
   83934:	39c00104 	addi	r7,r7,4
   83938:	d9c14015 	stw	r7,1280(sp)
   8393c:	1023d7fa 	srai	r17,r2,31
   83940:	1021883a 	mov	r16,r2
   83944:	88037816 	blt	r17,zero,84728 <___vfprintf_internal_r+0x1814>
   83948:	01000044 	movi	r4,1
   8394c:	98000416 	blt	r19,zero,83960 <___vfprintf_internal_r+0xa4c>
   83950:	d8c14c17 	ldw	r3,1328(sp)
   83954:	00bfdfc4 	movi	r2,-129
   83958:	1886703a 	and	r3,r3,r2
   8395c:	d8c14c15 	stw	r3,1328(sp)
   83960:	8444b03a 	or	r2,r16,r17
   83964:	10022c1e 	bne	r2,zero,84218 <___vfprintf_internal_r+0x1304>
   83968:	98022b1e 	bne	r19,zero,84218 <___vfprintf_internal_r+0x1304>
   8396c:	20803fcc 	andi	r2,r4,255
   83970:	1002a126 	beq	r2,zero,843f8 <___vfprintf_internal_r+0x14e4>
   83974:	d8c01904 	addi	r3,sp,100
   83978:	dd000f04 	addi	r20,sp,60
   8397c:	d8c14115 	stw	r3,1284(sp)
   83980:	d8c14117 	ldw	r3,1284(sp)
   83984:	dcc14515 	stw	r19,1300(sp)
   83988:	a0c5c83a 	sub	r2,r20,r3
   8398c:	11c00a04 	addi	r7,r2,40
   83990:	99c0010e 	bge	r19,r7,83998 <___vfprintf_internal_r+0xa84>
   83994:	d9c14515 	stw	r7,1300(sp)
   83998:	dcc14615 	stw	r19,1304(sp)
   8399c:	d8800407 	ldb	r2,16(sp)
   839a0:	103e4c26 	beq	r2,zero,832d4 <___vfprintf_internal_r+0x3c0>
   839a4:	d8814517 	ldw	r2,1300(sp)
   839a8:	10800044 	addi	r2,r2,1
   839ac:	d8814515 	stw	r2,1300(sp)
   839b0:	003e4806 	br	832d4 <___vfprintf_internal_r+0x3c0>
   839b4:	d9814c17 	ldw	r6,1328(sp)
   839b8:	31800414 	ori	r6,r6,16
   839bc:	d9814c15 	stw	r6,1328(sp)
   839c0:	d8c14c17 	ldw	r3,1328(sp)
   839c4:	1880080c 	andi	r2,r3,32
   839c8:	1001271e 	bne	r2,zero,83e68 <___vfprintf_internal_r+0xf54>
   839cc:	d9414c17 	ldw	r5,1328(sp)
   839d0:	2880040c 	andi	r2,r5,16
   839d4:	1002bc1e 	bne	r2,zero,844c8 <___vfprintf_internal_r+0x15b4>
   839d8:	d9814c17 	ldw	r6,1328(sp)
   839dc:	3080100c 	andi	r2,r6,64
   839e0:	1002b926 	beq	r2,zero,844c8 <___vfprintf_internal_r+0x15b4>
   839e4:	3c00000b 	ldhu	r16,0(r7)
   839e8:	0009883a 	mov	r4,zero
   839ec:	39c00104 	addi	r7,r7,4
   839f0:	0023883a 	mov	r17,zero
   839f4:	d9c14015 	stw	r7,1280(sp)
   839f8:	d8000405 	stb	zero,16(sp)
   839fc:	003fd306 	br	8394c <___vfprintf_internal_r+0xa38>
   83a00:	d9014c17 	ldw	r4,1328(sp)
   83a04:	21000414 	ori	r4,r4,16
   83a08:	d9014c15 	stw	r4,1328(sp)
   83a0c:	d9414c17 	ldw	r5,1328(sp)
   83a10:	2880080c 	andi	r2,r5,32
   83a14:	1001081e 	bne	r2,zero,83e38 <___vfprintf_internal_r+0xf24>
   83a18:	d8c14c17 	ldw	r3,1328(sp)
   83a1c:	1880040c 	andi	r2,r3,16
   83a20:	1002b61e 	bne	r2,zero,844fc <___vfprintf_internal_r+0x15e8>
   83a24:	d9014c17 	ldw	r4,1328(sp)
   83a28:	2080100c 	andi	r2,r4,64
   83a2c:	1002b326 	beq	r2,zero,844fc <___vfprintf_internal_r+0x15e8>
   83a30:	3c00000b 	ldhu	r16,0(r7)
   83a34:	01000044 	movi	r4,1
   83a38:	39c00104 	addi	r7,r7,4
   83a3c:	0023883a 	mov	r17,zero
   83a40:	d9c14015 	stw	r7,1280(sp)
   83a44:	d8000405 	stb	zero,16(sp)
   83a48:	003fc006 	br	8394c <___vfprintf_internal_r+0xa38>
   83a4c:	d9014f17 	ldw	r4,1340(sp)
   83a50:	b00b883a 	mov	r5,r22
   83a54:	d9800c04 	addi	r6,sp,48
   83a58:	0082ebc0 	call	82ebc <__sprint_r>
   83a5c:	103ee51e 	bne	r2,zero,835f4 <___vfprintf_internal_r+0x6e0>
   83a60:	dc800e17 	ldw	r18,56(sp)
   83a64:	d8c01904 	addi	r3,sp,100
   83a68:	d9814c17 	ldw	r6,1328(sp)
   83a6c:	3080004c 	andi	r2,r6,1
   83a70:	1005003a 	cmpeq	r2,r2,zero
   83a74:	103ea51e 	bne	r2,zero,8350c <___vfprintf_internal_r+0x5f8>
   83a78:	00800044 	movi	r2,1
   83a7c:	dc400d17 	ldw	r17,52(sp)
   83a80:	18800115 	stw	r2,4(r3)
   83a84:	d8814917 	ldw	r2,1316(sp)
   83a88:	94800044 	addi	r18,r18,1
   83a8c:	8c400044 	addi	r17,r17,1
   83a90:	18800015 	stw	r2,0(r3)
   83a94:	008001c4 	movi	r2,7
   83a98:	dc800e15 	stw	r18,56(sp)
   83a9c:	dc400d15 	stw	r17,52(sp)
   83aa0:	1442240e 	bge	r2,r17,84334 <___vfprintf_internal_r+0x1420>
   83aa4:	d9014f17 	ldw	r4,1340(sp)
   83aa8:	b00b883a 	mov	r5,r22
   83aac:	d9800c04 	addi	r6,sp,48
   83ab0:	0082ebc0 	call	82ebc <__sprint_r>
   83ab4:	103ecf1e 	bne	r2,zero,835f4 <___vfprintf_internal_r+0x6e0>
   83ab8:	dc800e17 	ldw	r18,56(sp)
   83abc:	d8c01904 	addi	r3,sp,100
   83ac0:	003e9206 	br	8350c <___vfprintf_internal_r+0x5f8>
   83ac4:	d9014f17 	ldw	r4,1340(sp)
   83ac8:	b00b883a 	mov	r5,r22
   83acc:	d9800c04 	addi	r6,sp,48
   83ad0:	0082ebc0 	call	82ebc <__sprint_r>
   83ad4:	103ec026 	beq	r2,zero,835d8 <___vfprintf_internal_r+0x6c4>
   83ad8:	003ec606 	br	835f4 <___vfprintf_internal_r+0x6e0>
   83adc:	d9014f17 	ldw	r4,1340(sp)
   83ae0:	b00b883a 	mov	r5,r22
   83ae4:	d9800c04 	addi	r6,sp,48
   83ae8:	d9c15115 	stw	r7,1348(sp)
   83aec:	0082ebc0 	call	82ebc <__sprint_r>
   83af0:	d9c15117 	ldw	r7,1348(sp)
   83af4:	103ebf1e 	bne	r2,zero,835f4 <___vfprintf_internal_r+0x6e0>
   83af8:	dc800e17 	ldw	r18,56(sp)
   83afc:	dc400d17 	ldw	r17,52(sp)
   83b00:	dd401904 	addi	r21,sp,100
   83b04:	003e7406 	br	834d8 <___vfprintf_internal_r+0x5c4>
   83b08:	d9014f17 	ldw	r4,1340(sp)
   83b0c:	b00b883a 	mov	r5,r22
   83b10:	d9800c04 	addi	r6,sp,48
   83b14:	d9c15115 	stw	r7,1348(sp)
   83b18:	0082ebc0 	call	82ebc <__sprint_r>
   83b1c:	d9c15117 	ldw	r7,1348(sp)
   83b20:	103eb41e 	bne	r2,zero,835f4 <___vfprintf_internal_r+0x6e0>
   83b24:	dd401904 	addi	r21,sp,100
   83b28:	003d6d06 	br	830e0 <___vfprintf_internal_r+0x1cc>
   83b2c:	d9014f17 	ldw	r4,1340(sp)
   83b30:	b00b883a 	mov	r5,r22
   83b34:	d9800c04 	addi	r6,sp,48
   83b38:	d9c15115 	stw	r7,1348(sp)
   83b3c:	0082ebc0 	call	82ebc <__sprint_r>
   83b40:	d9c15117 	ldw	r7,1348(sp)
   83b44:	103eab1e 	bne	r2,zero,835f4 <___vfprintf_internal_r+0x6e0>
   83b48:	dc800e17 	ldw	r18,56(sp)
   83b4c:	dc400d17 	ldw	r17,52(sp)
   83b50:	dd401904 	addi	r21,sp,100
   83b54:	003e3406 	br	83428 <___vfprintf_internal_r+0x514>
   83b58:	d9014f17 	ldw	r4,1340(sp)
   83b5c:	b00b883a 	mov	r5,r22
   83b60:	d9800c04 	addi	r6,sp,48
   83b64:	d9c15115 	stw	r7,1348(sp)
   83b68:	0082ebc0 	call	82ebc <__sprint_r>
   83b6c:	d9c15117 	ldw	r7,1348(sp)
   83b70:	103ea01e 	bne	r2,zero,835f4 <___vfprintf_internal_r+0x6e0>
   83b74:	dc800e17 	ldw	r18,56(sp)
   83b78:	dc400d17 	ldw	r17,52(sp)
   83b7c:	dd401904 	addi	r21,sp,100
   83b80:	003e1c06 	br	833f4 <___vfprintf_internal_r+0x4e0>
   83b84:	d9014f17 	ldw	r4,1340(sp)
   83b88:	b00b883a 	mov	r5,r22
   83b8c:	d9800c04 	addi	r6,sp,48
   83b90:	d9c15115 	stw	r7,1348(sp)
   83b94:	0082ebc0 	call	82ebc <__sprint_r>
   83b98:	d9c15117 	ldw	r7,1348(sp)
   83b9c:	103e951e 	bne	r2,zero,835f4 <___vfprintf_internal_r+0x6e0>
   83ba0:	dc800e17 	ldw	r18,56(sp)
   83ba4:	dc400d17 	ldw	r17,52(sp)
   83ba8:	dd401904 	addi	r21,sp,100
   83bac:	003e0406 	br	833c0 <___vfprintf_internal_r+0x4ac>
   83bb0:	d9000517 	ldw	r4,20(sp)
   83bb4:	0102580e 	bge	zero,r4,84518 <___vfprintf_internal_r+0x1604>
   83bb8:	d9814717 	ldw	r6,1308(sp)
   83bbc:	21807a16 	blt	r4,r6,83da8 <___vfprintf_internal_r+0xe94>
   83bc0:	d8814117 	ldw	r2,1284(sp)
   83bc4:	91a5883a 	add	r18,r18,r6
   83bc8:	8c400044 	addi	r17,r17,1
   83bcc:	a8800015 	stw	r2,0(r21)
   83bd0:	008001c4 	movi	r2,7
   83bd4:	a9800115 	stw	r6,4(r21)
   83bd8:	dc800e15 	stw	r18,56(sp)
   83bdc:	dc400d15 	stw	r17,52(sp)
   83be0:	1442fc16 	blt	r2,r17,847d4 <___vfprintf_internal_r+0x18c0>
   83be4:	a8c00204 	addi	r3,r21,8
   83be8:	d9414717 	ldw	r5,1308(sp)
   83bec:	2161c83a 	sub	r16,r4,r5
   83bf0:	043f9d0e 	bge	zero,r16,83a68 <___vfprintf_internal_r+0xb54>
   83bf4:	00800404 	movi	r2,16
   83bf8:	1402190e 	bge	r2,r16,84460 <___vfprintf_internal_r+0x154c>
   83bfc:	dc400d17 	ldw	r17,52(sp)
   83c00:	1027883a 	mov	r19,r2
   83c04:	070002b4 	movhi	fp,10
   83c08:	e7252584 	addi	fp,fp,-27498
   83c0c:	050001c4 	movi	r20,7
   83c10:	00000306 	br	83c20 <___vfprintf_internal_r+0xd0c>
   83c14:	18c00204 	addi	r3,r3,8
   83c18:	843ffc04 	addi	r16,r16,-16
   83c1c:	9c02130e 	bge	r19,r16,8446c <___vfprintf_internal_r+0x1558>
   83c20:	94800404 	addi	r18,r18,16
   83c24:	8c400044 	addi	r17,r17,1
   83c28:	1f000015 	stw	fp,0(r3)
   83c2c:	1cc00115 	stw	r19,4(r3)
   83c30:	dc800e15 	stw	r18,56(sp)
   83c34:	dc400d15 	stw	r17,52(sp)
   83c38:	a47ff60e 	bge	r20,r17,83c14 <___vfprintf_internal_r+0xd00>
   83c3c:	d9014f17 	ldw	r4,1340(sp)
   83c40:	b00b883a 	mov	r5,r22
   83c44:	d9800c04 	addi	r6,sp,48
   83c48:	0082ebc0 	call	82ebc <__sprint_r>
   83c4c:	103e691e 	bne	r2,zero,835f4 <___vfprintf_internal_r+0x6e0>
   83c50:	dc800e17 	ldw	r18,56(sp)
   83c54:	dc400d17 	ldw	r17,52(sp)
   83c58:	d8c01904 	addi	r3,sp,100
   83c5c:	003fee06 	br	83c18 <___vfprintf_internal_r+0xd04>
   83c60:	d8814717 	ldw	r2,1308(sp)
   83c64:	143fffc4 	addi	r16,r2,-1
   83c68:	043e970e 	bge	zero,r16,836c8 <___vfprintf_internal_r+0x7b4>
   83c6c:	00800404 	movi	r2,16
   83c70:	1400180e 	bge	r2,r16,83cd4 <___vfprintf_internal_r+0xdc0>
   83c74:	1029883a 	mov	r20,r2
   83c78:	070002b4 	movhi	fp,10
   83c7c:	e7252584 	addi	fp,fp,-27498
   83c80:	054001c4 	movi	r21,7
   83c84:	00000306 	br	83c94 <___vfprintf_internal_r+0xd80>
   83c88:	9cc00204 	addi	r19,r19,8
   83c8c:	843ffc04 	addi	r16,r16,-16
   83c90:	a400120e 	bge	r20,r16,83cdc <___vfprintf_internal_r+0xdc8>
   83c94:	94800404 	addi	r18,r18,16
   83c98:	8c400044 	addi	r17,r17,1
   83c9c:	9f000015 	stw	fp,0(r19)
   83ca0:	9d000115 	stw	r20,4(r19)
   83ca4:	dc800e15 	stw	r18,56(sp)
   83ca8:	dc400d15 	stw	r17,52(sp)
   83cac:	ac7ff60e 	bge	r21,r17,83c88 <___vfprintf_internal_r+0xd74>
   83cb0:	d9014f17 	ldw	r4,1340(sp)
   83cb4:	b00b883a 	mov	r5,r22
   83cb8:	d9800c04 	addi	r6,sp,48
   83cbc:	0082ebc0 	call	82ebc <__sprint_r>
   83cc0:	103e4c1e 	bne	r2,zero,835f4 <___vfprintf_internal_r+0x6e0>
   83cc4:	dc800e17 	ldw	r18,56(sp)
   83cc8:	dc400d17 	ldw	r17,52(sp)
   83ccc:	dcc01904 	addi	r19,sp,100
   83cd0:	003fee06 	br	83c8c <___vfprintf_internal_r+0xd78>
   83cd4:	070002b4 	movhi	fp,10
   83cd8:	e7252584 	addi	fp,fp,-27498
   83cdc:	9425883a 	add	r18,r18,r16
   83ce0:	8c400044 	addi	r17,r17,1
   83ce4:	008001c4 	movi	r2,7
   83ce8:	9f000015 	stw	fp,0(r19)
   83cec:	9c000115 	stw	r16,4(r19)
   83cf0:	dc800e15 	stw	r18,56(sp)
   83cf4:	dc400d15 	stw	r17,52(sp)
   83cf8:	147e720e 	bge	r2,r17,836c4 <___vfprintf_internal_r+0x7b0>
   83cfc:	d9014f17 	ldw	r4,1340(sp)
   83d00:	b00b883a 	mov	r5,r22
   83d04:	d9800c04 	addi	r6,sp,48
   83d08:	0082ebc0 	call	82ebc <__sprint_r>
   83d0c:	103e391e 	bne	r2,zero,835f4 <___vfprintf_internal_r+0x6e0>
   83d10:	dc800e17 	ldw	r18,56(sp)
   83d14:	dc400d17 	ldw	r17,52(sp)
   83d18:	dcc01904 	addi	r19,sp,100
   83d1c:	003e6a06 	br	836c8 <___vfprintf_internal_r+0x7b4>
   83d20:	d9014f17 	ldw	r4,1340(sp)
   83d24:	b00b883a 	mov	r5,r22
   83d28:	d9800c04 	addi	r6,sp,48
   83d2c:	d9c15115 	stw	r7,1348(sp)
   83d30:	0082ebc0 	call	82ebc <__sprint_r>
   83d34:	d9c15117 	ldw	r7,1348(sp)
   83d38:	103e2e1e 	bne	r2,zero,835f4 <___vfprintf_internal_r+0x6e0>
   83d3c:	dc800e17 	ldw	r18,56(sp)
   83d40:	dc400d17 	ldw	r17,52(sp)
   83d44:	dd401904 	addi	r21,sp,100
   83d48:	003dba06 	br	83434 <___vfprintf_internal_r+0x520>
   83d4c:	d9014f17 	ldw	r4,1340(sp)
   83d50:	b00b883a 	mov	r5,r22
   83d54:	d9800c04 	addi	r6,sp,48
   83d58:	0082ebc0 	call	82ebc <__sprint_r>
   83d5c:	103e251e 	bne	r2,zero,835f4 <___vfprintf_internal_r+0x6e0>
   83d60:	dc800e17 	ldw	r18,56(sp)
   83d64:	dc400d17 	ldw	r17,52(sp)
   83d68:	dcc01904 	addi	r19,sp,100
   83d6c:	003e4206 	br	83678 <___vfprintf_internal_r+0x764>
   83d70:	d9014f17 	ldw	r4,1340(sp)
   83d74:	b00b883a 	mov	r5,r22
   83d78:	d9800c04 	addi	r6,sp,48
   83d7c:	0082ebc0 	call	82ebc <__sprint_r>
   83d80:	103e1c1e 	bne	r2,zero,835f4 <___vfprintf_internal_r+0x6e0>
   83d84:	dc800e17 	ldw	r18,56(sp)
   83d88:	dc400d17 	ldw	r17,52(sp)
   83d8c:	d8c01904 	addi	r3,sp,100
   83d90:	003e2e06 	br	8364c <___vfprintf_internal_r+0x738>
   83d94:	d9414c17 	ldw	r5,1328(sp)
   83d98:	2880004c 	andi	r2,r5,1
   83d9c:	1005003a 	cmpeq	r2,r2,zero
   83da0:	103dda1e 	bne	r2,zero,8350c <___vfprintf_internal_r+0x5f8>
   83da4:	003e9f06 	br	83824 <___vfprintf_internal_r+0x910>
   83da8:	d8c14117 	ldw	r3,1284(sp)
   83dac:	9125883a 	add	r18,r18,r4
   83db0:	8c400044 	addi	r17,r17,1
   83db4:	008001c4 	movi	r2,7
   83db8:	a8c00015 	stw	r3,0(r21)
   83dbc:	a9000115 	stw	r4,4(r21)
   83dc0:	dc800e15 	stw	r18,56(sp)
   83dc4:	dc400d15 	stw	r17,52(sp)
   83dc8:	14426c16 	blt	r2,r17,8477c <___vfprintf_internal_r+0x1868>
   83dcc:	a8c00204 	addi	r3,r21,8
   83dd0:	d9414917 	ldw	r5,1316(sp)
   83dd4:	00800044 	movi	r2,1
   83dd8:	94800044 	addi	r18,r18,1
   83ddc:	8c400044 	addi	r17,r17,1
   83de0:	18800115 	stw	r2,4(r3)
   83de4:	008001c4 	movi	r2,7
   83de8:	19400015 	stw	r5,0(r3)
   83dec:	dc800e15 	stw	r18,56(sp)
   83df0:	dc400d15 	stw	r17,52(sp)
   83df4:	2021883a 	mov	r16,r4
   83df8:	14425616 	blt	r2,r17,84754 <___vfprintf_internal_r+0x1840>
   83dfc:	19400204 	addi	r5,r3,8
   83e00:	d9814717 	ldw	r6,1308(sp)
   83e04:	8c400044 	addi	r17,r17,1
   83e08:	dc400d15 	stw	r17,52(sp)
   83e0c:	3107c83a 	sub	r3,r6,r4
   83e10:	d9014117 	ldw	r4,1284(sp)
   83e14:	90e5883a 	add	r18,r18,r3
   83e18:	28c00115 	stw	r3,4(r5)
   83e1c:	8105883a 	add	r2,r16,r4
   83e20:	28800015 	stw	r2,0(r5)
   83e24:	008001c4 	movi	r2,7
   83e28:	dc800e15 	stw	r18,56(sp)
   83e2c:	147f1d16 	blt	r2,r17,83aa4 <___vfprintf_internal_r+0xb90>
   83e30:	28c00204 	addi	r3,r5,8
   83e34:	003db506 	br	8350c <___vfprintf_internal_r+0x5f8>
   83e38:	3c000017 	ldw	r16,0(r7)
   83e3c:	3c400117 	ldw	r17,4(r7)
   83e40:	39800204 	addi	r6,r7,8
   83e44:	01000044 	movi	r4,1
   83e48:	d9814015 	stw	r6,1280(sp)
   83e4c:	d8000405 	stb	zero,16(sp)
   83e50:	003ebe06 	br	8394c <___vfprintf_internal_r+0xa38>
   83e54:	3c000017 	ldw	r16,0(r7)
   83e58:	3c400117 	ldw	r17,4(r7)
   83e5c:	38800204 	addi	r2,r7,8
   83e60:	d8814015 	stw	r2,1280(sp)
   83e64:	003eb706 	br	83944 <___vfprintf_internal_r+0xa30>
   83e68:	3c000017 	ldw	r16,0(r7)
   83e6c:	3c400117 	ldw	r17,4(r7)
   83e70:	39000204 	addi	r4,r7,8
   83e74:	d9014015 	stw	r4,1280(sp)
   83e78:	0009883a 	mov	r4,zero
   83e7c:	d8000405 	stb	zero,16(sp)
   83e80:	003eb206 	br	8394c <___vfprintf_internal_r+0xa38>
   83e84:	38c00017 	ldw	r3,0(r7)
   83e88:	39c00104 	addi	r7,r7,4
   83e8c:	d8c14a15 	stw	r3,1320(sp)
   83e90:	1800d70e 	bge	r3,zero,841f0 <___vfprintf_internal_r+0x12dc>
   83e94:	00c7c83a 	sub	r3,zero,r3
   83e98:	d8c14a15 	stw	r3,1320(sp)
   83e9c:	d9014c17 	ldw	r4,1328(sp)
   83ea0:	b8c00007 	ldb	r3,0(r23)
   83ea4:	21000114 	ori	r4,r4,4
   83ea8:	d9014c15 	stw	r4,1328(sp)
   83eac:	003c9806 	br	83110 <___vfprintf_internal_r+0x1fc>
   83eb0:	d9814c17 	ldw	r6,1328(sp)
   83eb4:	3080080c 	andi	r2,r6,32
   83eb8:	1001f626 	beq	r2,zero,84694 <___vfprintf_internal_r+0x1780>
   83ebc:	d9014b17 	ldw	r4,1324(sp)
   83ec0:	38800017 	ldw	r2,0(r7)
   83ec4:	39c00104 	addi	r7,r7,4
   83ec8:	d9c14015 	stw	r7,1280(sp)
   83ecc:	2007d7fa 	srai	r3,r4,31
   83ed0:	d9c14017 	ldw	r7,1280(sp)
   83ed4:	11000015 	stw	r4,0(r2)
   83ed8:	10c00115 	stw	r3,4(r2)
   83edc:	003c6906 	br	83084 <___vfprintf_internal_r+0x170>
   83ee0:	b8c00007 	ldb	r3,0(r23)
   83ee4:	00801b04 	movi	r2,108
   83ee8:	18825526 	beq	r3,r2,84840 <___vfprintf_internal_r+0x192c>
   83eec:	d9414c17 	ldw	r5,1328(sp)
   83ef0:	29400414 	ori	r5,r5,16
   83ef4:	d9414c15 	stw	r5,1328(sp)
   83ef8:	003c8506 	br	83110 <___vfprintf_internal_r+0x1fc>
   83efc:	d9814c17 	ldw	r6,1328(sp)
   83f00:	b8c00007 	ldb	r3,0(r23)
   83f04:	31800814 	ori	r6,r6,32
   83f08:	d9814c15 	stw	r6,1328(sp)
   83f0c:	003c8006 	br	83110 <___vfprintf_internal_r+0x1fc>
   83f10:	d8814c17 	ldw	r2,1328(sp)
   83f14:	3c000017 	ldw	r16,0(r7)
   83f18:	00c01e04 	movi	r3,120
   83f1c:	10800094 	ori	r2,r2,2
   83f20:	d8814c15 	stw	r2,1328(sp)
   83f24:	39c00104 	addi	r7,r7,4
   83f28:	014002b4 	movhi	r5,10
   83f2c:	29650e04 	addi	r5,r5,-27592
   83f30:	00800c04 	movi	r2,48
   83f34:	0023883a 	mov	r17,zero
   83f38:	01000084 	movi	r4,2
   83f3c:	d9c14015 	stw	r7,1280(sp)
   83f40:	d8c14d15 	stw	r3,1332(sp)
   83f44:	d9414415 	stw	r5,1296(sp)
   83f48:	d8800445 	stb	r2,17(sp)
   83f4c:	d8c00485 	stb	r3,18(sp)
   83f50:	d8000405 	stb	zero,16(sp)
   83f54:	003e7d06 	br	8394c <___vfprintf_internal_r+0xa38>
   83f58:	d8814c17 	ldw	r2,1328(sp)
   83f5c:	b8c00007 	ldb	r3,0(r23)
   83f60:	10801014 	ori	r2,r2,64
   83f64:	d8814c15 	stw	r2,1328(sp)
   83f68:	003c6906 	br	83110 <___vfprintf_internal_r+0x1fc>
   83f6c:	d9414c17 	ldw	r5,1328(sp)
   83f70:	2880020c 	andi	r2,r5,8
   83f74:	1001e526 	beq	r2,zero,8470c <___vfprintf_internal_r+0x17f8>
   83f78:	39800017 	ldw	r6,0(r7)
   83f7c:	38800204 	addi	r2,r7,8
   83f80:	d8814015 	stw	r2,1280(sp)
   83f84:	d9814215 	stw	r6,1288(sp)
   83f88:	39c00117 	ldw	r7,4(r7)
   83f8c:	d9c14315 	stw	r7,1292(sp)
   83f90:	d9014217 	ldw	r4,1288(sp)
   83f94:	d9414317 	ldw	r5,1292(sp)
   83f98:	00899c40 	call	899c4 <__isinfd>
   83f9c:	10021d26 	beq	r2,zero,84814 <___vfprintf_internal_r+0x1900>
   83fa0:	d9014217 	ldw	r4,1288(sp)
   83fa4:	d9414317 	ldw	r5,1292(sp)
   83fa8:	000d883a 	mov	r6,zero
   83fac:	000f883a 	mov	r7,zero
   83fb0:	008bc840 	call	8bc84 <__ltdf2>
   83fb4:	1002d016 	blt	r2,zero,84af8 <___vfprintf_internal_r+0x1be4>
   83fb8:	d9414d17 	ldw	r5,1332(sp)
   83fbc:	008011c4 	movi	r2,71
   83fc0:	11421016 	blt	r2,r5,84804 <___vfprintf_internal_r+0x18f0>
   83fc4:	018002b4 	movhi	r6,10
   83fc8:	31a51304 	addi	r6,r6,-27572
   83fcc:	d9814115 	stw	r6,1284(sp)
   83fd0:	d9014c17 	ldw	r4,1328(sp)
   83fd4:	00c000c4 	movi	r3,3
   83fd8:	00bfdfc4 	movi	r2,-129
   83fdc:	2088703a 	and	r4,r4,r2
   83fe0:	180f883a 	mov	r7,r3
   83fe4:	d8c14515 	stw	r3,1300(sp)
   83fe8:	d9014c15 	stw	r4,1328(sp)
   83fec:	d8014615 	stw	zero,1304(sp)
   83ff0:	003e6a06 	br	8399c <___vfprintf_internal_r+0xa88>
   83ff4:	38800017 	ldw	r2,0(r7)
   83ff8:	00c00044 	movi	r3,1
   83ffc:	39c00104 	addi	r7,r7,4
   84000:	d9c14015 	stw	r7,1280(sp)
   84004:	d9000f04 	addi	r4,sp,60
   84008:	180f883a 	mov	r7,r3
   8400c:	d8c14515 	stw	r3,1300(sp)
   84010:	d9014115 	stw	r4,1284(sp)
   84014:	d8800f05 	stb	r2,60(sp)
   84018:	d8000405 	stb	zero,16(sp)
   8401c:	003cac06 	br	832d0 <___vfprintf_internal_r+0x3bc>
   84020:	014002b4 	movhi	r5,10
   84024:	29651904 	addi	r5,r5,-27548
   84028:	d9414415 	stw	r5,1296(sp)
   8402c:	d9814c17 	ldw	r6,1328(sp)
   84030:	3080080c 	andi	r2,r6,32
   84034:	1000ff26 	beq	r2,zero,84434 <___vfprintf_internal_r+0x1520>
   84038:	3c000017 	ldw	r16,0(r7)
   8403c:	3c400117 	ldw	r17,4(r7)
   84040:	38800204 	addi	r2,r7,8
   84044:	d8814015 	stw	r2,1280(sp)
   84048:	d9414c17 	ldw	r5,1328(sp)
   8404c:	2880004c 	andi	r2,r5,1
   84050:	1005003a 	cmpeq	r2,r2,zero
   84054:	1000b91e 	bne	r2,zero,8433c <___vfprintf_internal_r+0x1428>
   84058:	8444b03a 	or	r2,r16,r17
   8405c:	1000b726 	beq	r2,zero,8433c <___vfprintf_internal_r+0x1428>
   84060:	d9814d17 	ldw	r6,1332(sp)
   84064:	29400094 	ori	r5,r5,2
   84068:	00800c04 	movi	r2,48
   8406c:	01000084 	movi	r4,2
   84070:	d9414c15 	stw	r5,1328(sp)
   84074:	d8800445 	stb	r2,17(sp)
   84078:	d9800485 	stb	r6,18(sp)
   8407c:	d8000405 	stb	zero,16(sp)
   84080:	003e3206 	br	8394c <___vfprintf_internal_r+0xa38>
   84084:	018002b4 	movhi	r6,10
   84088:	31a50e04 	addi	r6,r6,-27592
   8408c:	d9814415 	stw	r6,1296(sp)
   84090:	003fe606 	br	8402c <___vfprintf_internal_r+0x1118>
   84094:	00800ac4 	movi	r2,43
   84098:	d8800405 	stb	r2,16(sp)
   8409c:	b8c00007 	ldb	r3,0(r23)
   840a0:	003c1b06 	br	83110 <___vfprintf_internal_r+0x1fc>
   840a4:	d8814c17 	ldw	r2,1328(sp)
   840a8:	b8c00007 	ldb	r3,0(r23)
   840ac:	10800054 	ori	r2,r2,1
   840b0:	d8814c15 	stw	r2,1328(sp)
   840b4:	003c1606 	br	83110 <___vfprintf_internal_r+0x1fc>
   840b8:	d8800407 	ldb	r2,16(sp)
   840bc:	10004c1e 	bne	r2,zero,841f0 <___vfprintf_internal_r+0x12dc>
   840c0:	00800804 	movi	r2,32
   840c4:	d8800405 	stb	r2,16(sp)
   840c8:	b8c00007 	ldb	r3,0(r23)
   840cc:	003c1006 	br	83110 <___vfprintf_internal_r+0x1fc>
   840d0:	d9814c17 	ldw	r6,1328(sp)
   840d4:	b8c00007 	ldb	r3,0(r23)
   840d8:	31800214 	ori	r6,r6,8
   840dc:	d9814c15 	stw	r6,1328(sp)
   840e0:	003c0b06 	br	83110 <___vfprintf_internal_r+0x1fc>
   840e4:	0009883a 	mov	r4,zero
   840e8:	04000244 	movi	r16,9
   840ec:	01400284 	movi	r5,10
   840f0:	d9c15115 	stw	r7,1348(sp)
   840f4:	0082b040 	call	82b04 <__mulsi3>
   840f8:	b9000007 	ldb	r4,0(r23)
   840fc:	d8c14d17 	ldw	r3,1332(sp)
   84100:	bdc00044 	addi	r23,r23,1
   84104:	d9014d15 	stw	r4,1332(sp)
   84108:	d9414d17 	ldw	r5,1332(sp)
   8410c:	1885883a 	add	r2,r3,r2
   84110:	113ff404 	addi	r4,r2,-48
   84114:	28bff404 	addi	r2,r5,-48
   84118:	d9c15117 	ldw	r7,1348(sp)
   8411c:	80bff32e 	bgeu	r16,r2,840ec <___vfprintf_internal_r+0x11d8>
   84120:	d9014a15 	stw	r4,1320(sp)
   84124:	003bfc06 	br	83118 <___vfprintf_internal_r+0x204>
   84128:	d8814c17 	ldw	r2,1328(sp)
   8412c:	b8c00007 	ldb	r3,0(r23)
   84130:	10802014 	ori	r2,r2,128
   84134:	d8814c15 	stw	r2,1328(sp)
   84138:	003bf506 	br	83110 <___vfprintf_internal_r+0x1fc>
   8413c:	b8c00007 	ldb	r3,0(r23)
   84140:	00800a84 	movi	r2,42
   84144:	bdc00044 	addi	r23,r23,1
   84148:	18831826 	beq	r3,r2,84dac <___vfprintf_internal_r+0x1e98>
   8414c:	d8c14d15 	stw	r3,1332(sp)
   84150:	18bff404 	addi	r2,r3,-48
   84154:	00c00244 	movi	r3,9
   84158:	18827b36 	bltu	r3,r2,84b48 <___vfprintf_internal_r+0x1c34>
   8415c:	1821883a 	mov	r16,r3
   84160:	0009883a 	mov	r4,zero
   84164:	01400284 	movi	r5,10
   84168:	d9c15115 	stw	r7,1348(sp)
   8416c:	0082b040 	call	82b04 <__mulsi3>
   84170:	d9414d17 	ldw	r5,1332(sp)
   84174:	b9800007 	ldb	r6,0(r23)
   84178:	d9c15117 	ldw	r7,1348(sp)
   8417c:	1145883a 	add	r2,r2,r5
   84180:	113ff404 	addi	r4,r2,-48
   84184:	30bff404 	addi	r2,r6,-48
   84188:	d9814d15 	stw	r6,1332(sp)
   8418c:	bdc00044 	addi	r23,r23,1
   84190:	80bff42e 	bgeu	r16,r2,84164 <___vfprintf_internal_r+0x1250>
   84194:	2027883a 	mov	r19,r4
   84198:	203bdf0e 	bge	r4,zero,83118 <___vfprintf_internal_r+0x204>
   8419c:	04ffffc4 	movi	r19,-1
   841a0:	003bdd06 	br	83118 <___vfprintf_internal_r+0x204>
   841a4:	d8000405 	stb	zero,16(sp)
   841a8:	39800017 	ldw	r6,0(r7)
   841ac:	39c00104 	addi	r7,r7,4
   841b0:	d9c14015 	stw	r7,1280(sp)
   841b4:	d9814115 	stw	r6,1284(sp)
   841b8:	3001c926 	beq	r6,zero,848e0 <___vfprintf_internal_r+0x19cc>
   841bc:	98000e16 	blt	r19,zero,841f8 <___vfprintf_internal_r+0x12e4>
   841c0:	d9014117 	ldw	r4,1284(sp)
   841c4:	000b883a 	mov	r5,zero
   841c8:	980d883a 	mov	r6,r19
   841cc:	00880480 	call	88048 <memchr>
   841d0:	10025926 	beq	r2,zero,84b38 <___vfprintf_internal_r+0x1c24>
   841d4:	d8c14117 	ldw	r3,1284(sp)
   841d8:	10cfc83a 	sub	r7,r2,r3
   841dc:	99c19e16 	blt	r19,r7,84858 <___vfprintf_internal_r+0x1944>
   841e0:	d9c14515 	stw	r7,1300(sp)
   841e4:	38000916 	blt	r7,zero,8420c <___vfprintf_internal_r+0x12f8>
   841e8:	d8014615 	stw	zero,1304(sp)
   841ec:	003deb06 	br	8399c <___vfprintf_internal_r+0xa88>
   841f0:	b8c00007 	ldb	r3,0(r23)
   841f4:	003bc606 	br	83110 <___vfprintf_internal_r+0x1fc>
   841f8:	d9014117 	ldw	r4,1284(sp)
   841fc:	0082e480 	call	82e48 <strlen>
   84200:	d8814515 	stw	r2,1300(sp)
   84204:	100f883a 	mov	r7,r2
   84208:	103ff70e 	bge	r2,zero,841e8 <___vfprintf_internal_r+0x12d4>
   8420c:	d8014515 	stw	zero,1300(sp)
   84210:	d8014615 	stw	zero,1304(sp)
   84214:	003de106 	br	8399c <___vfprintf_internal_r+0xa88>
   84218:	20c03fcc 	andi	r3,r4,255
   8421c:	00800044 	movi	r2,1
   84220:	18802d26 	beq	r3,r2,842d8 <___vfprintf_internal_r+0x13c4>
   84224:	18800e36 	bltu	r3,r2,84260 <___vfprintf_internal_r+0x134c>
   84228:	00800084 	movi	r2,2
   8422c:	1880fa26 	beq	r3,r2,84618 <___vfprintf_internal_r+0x1704>
   84230:	010002b4 	movhi	r4,10
   84234:	21251e04 	addi	r4,r4,-27528
   84238:	0082e480 	call	82e48 <strlen>
   8423c:	100f883a 	mov	r7,r2
   84240:	dcc14515 	stw	r19,1300(sp)
   84244:	9880010e 	bge	r19,r2,8424c <___vfprintf_internal_r+0x1338>
   84248:	d8814515 	stw	r2,1300(sp)
   8424c:	008002b4 	movhi	r2,10
   84250:	10a51e04 	addi	r2,r2,-27528
   84254:	dcc14615 	stw	r19,1304(sp)
   84258:	d8814115 	stw	r2,1284(sp)
   8425c:	003dcf06 	br	8399c <___vfprintf_internal_r+0xa88>
   84260:	d9401904 	addi	r5,sp,100
   84264:	dd000f04 	addi	r20,sp,60
   84268:	d9414115 	stw	r5,1284(sp)
   8426c:	880a977a 	slli	r5,r17,29
   84270:	d9814117 	ldw	r6,1284(sp)
   84274:	8004d0fa 	srli	r2,r16,3
   84278:	8806d0fa 	srli	r3,r17,3
   8427c:	810001cc 	andi	r4,r16,7
   84280:	2884b03a 	or	r2,r5,r2
   84284:	31bfffc4 	addi	r6,r6,-1
   84288:	21000c04 	addi	r4,r4,48
   8428c:	d9814115 	stw	r6,1284(sp)
   84290:	10cab03a 	or	r5,r2,r3
   84294:	31000005 	stb	r4,0(r6)
   84298:	1021883a 	mov	r16,r2
   8429c:	1823883a 	mov	r17,r3
   842a0:	283ff21e 	bne	r5,zero,8426c <___vfprintf_internal_r+0x1358>
   842a4:	d8c14c17 	ldw	r3,1328(sp)
   842a8:	1880004c 	andi	r2,r3,1
   842ac:	1005003a 	cmpeq	r2,r2,zero
   842b0:	103db31e 	bne	r2,zero,83980 <___vfprintf_internal_r+0xa6c>
   842b4:	20803fcc 	andi	r2,r4,255
   842b8:	1080201c 	xori	r2,r2,128
   842bc:	10bfe004 	addi	r2,r2,-128
   842c0:	00c00c04 	movi	r3,48
   842c4:	10fdae26 	beq	r2,r3,83980 <___vfprintf_internal_r+0xa6c>
   842c8:	31bfffc4 	addi	r6,r6,-1
   842cc:	d9814115 	stw	r6,1284(sp)
   842d0:	30c00005 	stb	r3,0(r6)
   842d4:	003daa06 	br	83980 <___vfprintf_internal_r+0xa6c>
   842d8:	88800068 	cmpgeui	r2,r17,1
   842dc:	10002c1e 	bne	r2,zero,84390 <___vfprintf_internal_r+0x147c>
   842e0:	8800021e 	bne	r17,zero,842ec <___vfprintf_internal_r+0x13d8>
   842e4:	00800244 	movi	r2,9
   842e8:	14002936 	bltu	r2,r16,84390 <___vfprintf_internal_r+0x147c>
   842ec:	d90018c4 	addi	r4,sp,99
   842f0:	dd000f04 	addi	r20,sp,60
   842f4:	d9014115 	stw	r4,1284(sp)
   842f8:	d9014117 	ldw	r4,1284(sp)
   842fc:	80800c04 	addi	r2,r16,48
   84300:	20800005 	stb	r2,0(r4)
   84304:	003d9e06 	br	83980 <___vfprintf_internal_r+0xa6c>
   84308:	dc400d17 	ldw	r17,52(sp)
   8430c:	070002b4 	movhi	fp,10
   84310:	e7252584 	addi	fp,fp,-27498
   84314:	9425883a 	add	r18,r18,r16
   84318:	8c400044 	addi	r17,r17,1
   8431c:	008001c4 	movi	r2,7
   84320:	1f000015 	stw	fp,0(r3)
   84324:	1c000115 	stw	r16,4(r3)
   84328:	dc800e15 	stw	r18,56(sp)
   8432c:	dc400d15 	stw	r17,52(sp)
   84330:	147ddc16 	blt	r2,r17,83aa4 <___vfprintf_internal_r+0xb90>
   84334:	18c00204 	addi	r3,r3,8
   84338:	003c7406 	br	8350c <___vfprintf_internal_r+0x5f8>
   8433c:	01000084 	movi	r4,2
   84340:	d8000405 	stb	zero,16(sp)
   84344:	003d8106 	br	8394c <___vfprintf_internal_r+0xa38>
   84348:	d9814c17 	ldw	r6,1328(sp)
   8434c:	30c4703a 	and	r2,r6,r3
   84350:	1005003a 	cmpeq	r2,r2,zero
   84354:	103cb326 	beq	r2,zero,83624 <___vfprintf_internal_r+0x710>
   84358:	d9014117 	ldw	r4,1284(sp)
   8435c:	94800044 	addi	r18,r18,1
   84360:	8c400044 	addi	r17,r17,1
   84364:	008001c4 	movi	r2,7
   84368:	a9000015 	stw	r4,0(r21)
   8436c:	a8c00115 	stw	r3,4(r21)
   84370:	dc800e15 	stw	r18,56(sp)
   84374:	dc400d15 	stw	r17,52(sp)
   84378:	147e6016 	blt	r2,r17,83cfc <___vfprintf_internal_r+0xde8>
   8437c:	acc00204 	addi	r19,r21,8
   84380:	003cd106 	br	836c8 <___vfprintf_internal_r+0x7b4>
   84384:	070002b4 	movhi	fp,10
   84388:	e7252584 	addi	fp,fp,-27498
   8438c:	003c4906 	br	834b4 <___vfprintf_internal_r+0x5a0>
   84390:	dd000f04 	addi	r20,sp,60
   84394:	dc801904 	addi	r18,sp,100
   84398:	8009883a 	mov	r4,r16
   8439c:	880b883a 	mov	r5,r17
   843a0:	01800284 	movi	r6,10
   843a4:	000f883a 	mov	r7,zero
   843a8:	008a8e40 	call	8a8e4 <__umoddi3>
   843ac:	12000c04 	addi	r8,r2,48
   843b0:	94bfffc4 	addi	r18,r18,-1
   843b4:	8009883a 	mov	r4,r16
   843b8:	880b883a 	mov	r5,r17
   843bc:	01800284 	movi	r6,10
   843c0:	000f883a 	mov	r7,zero
   843c4:	92000005 	stb	r8,0(r18)
   843c8:	008a2780 	call	8a278 <__udivdi3>
   843cc:	1009883a 	mov	r4,r2
   843d0:	1021883a 	mov	r16,r2
   843d4:	18800068 	cmpgeui	r2,r3,1
   843d8:	1823883a 	mov	r17,r3
   843dc:	103fee1e 	bne	r2,zero,84398 <___vfprintf_internal_r+0x1484>
   843e0:	1800021e 	bne	r3,zero,843ec <___vfprintf_internal_r+0x14d8>
   843e4:	00800244 	movi	r2,9
   843e8:	113feb36 	bltu	r2,r4,84398 <___vfprintf_internal_r+0x1484>
   843ec:	94bfffc4 	addi	r18,r18,-1
   843f0:	dc814115 	stw	r18,1284(sp)
   843f4:	003fc006 	br	842f8 <___vfprintf_internal_r+0x13e4>
   843f8:	d9014c17 	ldw	r4,1328(sp)
   843fc:	2080004c 	andi	r2,r4,1
   84400:	10009a1e 	bne	r2,zero,8466c <___vfprintf_internal_r+0x1758>
   84404:	d9401904 	addi	r5,sp,100
   84408:	dd000f04 	addi	r20,sp,60
   8440c:	d9414115 	stw	r5,1284(sp)
   84410:	003d5b06 	br	83980 <___vfprintf_internal_r+0xa6c>
   84414:	d9014f17 	ldw	r4,1340(sp)
   84418:	b00b883a 	mov	r5,r22
   8441c:	d9800c04 	addi	r6,sp,48
   84420:	0082ebc0 	call	82ebc <__sprint_r>
   84424:	103c731e 	bne	r2,zero,835f4 <___vfprintf_internal_r+0x6e0>
   84428:	dc800e17 	ldw	r18,56(sp)
   8442c:	d8c01904 	addi	r3,sp,100
   84430:	003cf906 	br	83818 <___vfprintf_internal_r+0x904>
   84434:	d8c14c17 	ldw	r3,1328(sp)
   84438:	1880040c 	andi	r2,r3,16
   8443c:	1000711e 	bne	r2,zero,84604 <___vfprintf_internal_r+0x16f0>
   84440:	d9014c17 	ldw	r4,1328(sp)
   84444:	2080100c 	andi	r2,r4,64
   84448:	10006e26 	beq	r2,zero,84604 <___vfprintf_internal_r+0x16f0>
   8444c:	3c00000b 	ldhu	r16,0(r7)
   84450:	0023883a 	mov	r17,zero
   84454:	39c00104 	addi	r7,r7,4
   84458:	d9c14015 	stw	r7,1280(sp)
   8445c:	003efa06 	br	84048 <___vfprintf_internal_r+0x1134>
   84460:	dc400d17 	ldw	r17,52(sp)
   84464:	070002b4 	movhi	fp,10
   84468:	e7252584 	addi	fp,fp,-27498
   8446c:	9425883a 	add	r18,r18,r16
   84470:	8c400044 	addi	r17,r17,1
   84474:	008001c4 	movi	r2,7
   84478:	1f000015 	stw	fp,0(r3)
   8447c:	1c000115 	stw	r16,4(r3)
   84480:	dc800e15 	stw	r18,56(sp)
   84484:	dc400d15 	stw	r17,52(sp)
   84488:	147d7016 	blt	r2,r17,83a4c <___vfprintf_internal_r+0xb38>
   8448c:	18c00204 	addi	r3,r3,8
   84490:	003d7506 	br	83a68 <___vfprintf_internal_r+0xb54>
   84494:	dc800e17 	ldw	r18,56(sp)
   84498:	dc400d17 	ldw	r17,52(sp)
   8449c:	070002b4 	movhi	fp,10
   844a0:	e7252984 	addi	fp,fp,-27482
   844a4:	003bba06 	br	83390 <___vfprintf_internal_r+0x47c>
   844a8:	d9014f17 	ldw	r4,1340(sp)
   844ac:	b00b883a 	mov	r5,r22
   844b0:	d9800c04 	addi	r6,sp,48
   844b4:	0082ebc0 	call	82ebc <__sprint_r>
   844b8:	103c4e1e 	bne	r2,zero,835f4 <___vfprintf_internal_r+0x6e0>
   844bc:	dc800e17 	ldw	r18,56(sp)
   844c0:	d8c01904 	addi	r3,sp,100
   844c4:	003ce306 	br	83854 <___vfprintf_internal_r+0x940>
   844c8:	3c000017 	ldw	r16,0(r7)
   844cc:	0009883a 	mov	r4,zero
   844d0:	39c00104 	addi	r7,r7,4
   844d4:	0023883a 	mov	r17,zero
   844d8:	d9c14015 	stw	r7,1280(sp)
   844dc:	d8000405 	stb	zero,16(sp)
   844e0:	003d1a06 	br	8394c <___vfprintf_internal_r+0xa38>
   844e4:	38800017 	ldw	r2,0(r7)
   844e8:	39c00104 	addi	r7,r7,4
   844ec:	d9c14015 	stw	r7,1280(sp)
   844f0:	1023d7fa 	srai	r17,r2,31
   844f4:	1021883a 	mov	r16,r2
   844f8:	003d1206 	br	83944 <___vfprintf_internal_r+0xa30>
   844fc:	3c000017 	ldw	r16,0(r7)
   84500:	01000044 	movi	r4,1
   84504:	39c00104 	addi	r7,r7,4
   84508:	0023883a 	mov	r17,zero
   8450c:	d9c14015 	stw	r7,1280(sp)
   84510:	d8000405 	stb	zero,16(sp)
   84514:	003d0d06 	br	8394c <___vfprintf_internal_r+0xa38>
   84518:	008002b4 	movhi	r2,10
   8451c:	10a52504 	addi	r2,r2,-27500
   84520:	94800044 	addi	r18,r18,1
   84524:	8c400044 	addi	r17,r17,1
   84528:	a8800015 	stw	r2,0(r21)
   8452c:	00c00044 	movi	r3,1
   84530:	008001c4 	movi	r2,7
   84534:	a8c00115 	stw	r3,4(r21)
   84538:	dc800e15 	stw	r18,56(sp)
   8453c:	dc400d15 	stw	r17,52(sp)
   84540:	1440ca16 	blt	r2,r17,8486c <___vfprintf_internal_r+0x1958>
   84544:	a8c00204 	addi	r3,r21,8
   84548:	2000061e 	bne	r4,zero,84564 <___vfprintf_internal_r+0x1650>
   8454c:	d9414717 	ldw	r5,1308(sp)
   84550:	2800041e 	bne	r5,zero,84564 <___vfprintf_internal_r+0x1650>
   84554:	d9814c17 	ldw	r6,1328(sp)
   84558:	3080004c 	andi	r2,r6,1
   8455c:	1005003a 	cmpeq	r2,r2,zero
   84560:	103bea1e 	bne	r2,zero,8350c <___vfprintf_internal_r+0x5f8>
   84564:	00800044 	movi	r2,1
   84568:	dc400d17 	ldw	r17,52(sp)
   8456c:	18800115 	stw	r2,4(r3)
   84570:	d8814917 	ldw	r2,1316(sp)
   84574:	94800044 	addi	r18,r18,1
   84578:	8c400044 	addi	r17,r17,1
   8457c:	18800015 	stw	r2,0(r3)
   84580:	008001c4 	movi	r2,7
   84584:	dc800e15 	stw	r18,56(sp)
   84588:	dc400d15 	stw	r17,52(sp)
   8458c:	1440ca16 	blt	r2,r17,848b8 <___vfprintf_internal_r+0x19a4>
   84590:	18c00204 	addi	r3,r3,8
   84594:	0121c83a 	sub	r16,zero,r4
   84598:	0400500e 	bge	zero,r16,846dc <___vfprintf_internal_r+0x17c8>
   8459c:	00800404 	movi	r2,16
   845a0:	1400800e 	bge	r2,r16,847a4 <___vfprintf_internal_r+0x1890>
   845a4:	1027883a 	mov	r19,r2
   845a8:	070002b4 	movhi	fp,10
   845ac:	e7252584 	addi	fp,fp,-27498
   845b0:	050001c4 	movi	r20,7
   845b4:	00000306 	br	845c4 <___vfprintf_internal_r+0x16b0>
   845b8:	18c00204 	addi	r3,r3,8
   845bc:	843ffc04 	addi	r16,r16,-16
   845c0:	9c007a0e 	bge	r19,r16,847ac <___vfprintf_internal_r+0x1898>
   845c4:	94800404 	addi	r18,r18,16
   845c8:	8c400044 	addi	r17,r17,1
   845cc:	1f000015 	stw	fp,0(r3)
   845d0:	1cc00115 	stw	r19,4(r3)
   845d4:	dc800e15 	stw	r18,56(sp)
   845d8:	dc400d15 	stw	r17,52(sp)
   845dc:	a47ff60e 	bge	r20,r17,845b8 <___vfprintf_internal_r+0x16a4>
   845e0:	d9014f17 	ldw	r4,1340(sp)
   845e4:	b00b883a 	mov	r5,r22
   845e8:	d9800c04 	addi	r6,sp,48
   845ec:	0082ebc0 	call	82ebc <__sprint_r>
   845f0:	103c001e 	bne	r2,zero,835f4 <___vfprintf_internal_r+0x6e0>
   845f4:	dc800e17 	ldw	r18,56(sp)
   845f8:	dc400d17 	ldw	r17,52(sp)
   845fc:	d8c01904 	addi	r3,sp,100
   84600:	003fee06 	br	845bc <___vfprintf_internal_r+0x16a8>
   84604:	3c000017 	ldw	r16,0(r7)
   84608:	0023883a 	mov	r17,zero
   8460c:	39c00104 	addi	r7,r7,4
   84610:	d9c14015 	stw	r7,1280(sp)
   84614:	003e8c06 	br	84048 <___vfprintf_internal_r+0x1134>
   84618:	d9401904 	addi	r5,sp,100
   8461c:	dd000f04 	addi	r20,sp,60
   84620:	d9414115 	stw	r5,1284(sp)
   84624:	d9814417 	ldw	r6,1296(sp)
   84628:	880a973a 	slli	r5,r17,28
   8462c:	8004d13a 	srli	r2,r16,4
   84630:	810003cc 	andi	r4,r16,15
   84634:	3109883a 	add	r4,r6,r4
   84638:	2884b03a 	or	r2,r5,r2
   8463c:	21400003 	ldbu	r5,0(r4)
   84640:	d9014117 	ldw	r4,1284(sp)
   84644:	8806d13a 	srli	r3,r17,4
   84648:	1021883a 	mov	r16,r2
   8464c:	213fffc4 	addi	r4,r4,-1
   84650:	d9014115 	stw	r4,1284(sp)
   84654:	d9814117 	ldw	r6,1284(sp)
   84658:	10c8b03a 	or	r4,r2,r3
   8465c:	1823883a 	mov	r17,r3
   84660:	31400005 	stb	r5,0(r6)
   84664:	203fef1e 	bne	r4,zero,84624 <___vfprintf_internal_r+0x1710>
   84668:	003cc506 	br	83980 <___vfprintf_internal_r+0xa6c>
   8466c:	00800c04 	movi	r2,48
   84670:	d98018c4 	addi	r6,sp,99
   84674:	dd000f04 	addi	r20,sp,60
   84678:	d88018c5 	stb	r2,99(sp)
   8467c:	d9814115 	stw	r6,1284(sp)
   84680:	003cbf06 	br	83980 <___vfprintf_internal_r+0xa6c>
   84684:	dc400d17 	ldw	r17,52(sp)
   84688:	070002b4 	movhi	fp,10
   8468c:	e7252984 	addi	fp,fp,-27482
   84690:	003bc106 	br	83598 <___vfprintf_internal_r+0x684>
   84694:	d9414c17 	ldw	r5,1328(sp)
   84698:	2880040c 	andi	r2,r5,16
   8469c:	10007c26 	beq	r2,zero,84890 <___vfprintf_internal_r+0x197c>
   846a0:	38800017 	ldw	r2,0(r7)
   846a4:	39c00104 	addi	r7,r7,4
   846a8:	d9c14015 	stw	r7,1280(sp)
   846ac:	d9814b17 	ldw	r6,1324(sp)
   846b0:	d9c14017 	ldw	r7,1280(sp)
   846b4:	11800015 	stw	r6,0(r2)
   846b8:	003a7206 	br	83084 <___vfprintf_internal_r+0x170>
   846bc:	d9014f17 	ldw	r4,1340(sp)
   846c0:	b00b883a 	mov	r5,r22
   846c4:	d9800c04 	addi	r6,sp,48
   846c8:	0082ebc0 	call	82ebc <__sprint_r>
   846cc:	103bc91e 	bne	r2,zero,835f4 <___vfprintf_internal_r+0x6e0>
   846d0:	dc800e17 	ldw	r18,56(sp)
   846d4:	dc400d17 	ldw	r17,52(sp)
   846d8:	d8c01904 	addi	r3,sp,100
   846dc:	d9014717 	ldw	r4,1308(sp)
   846e0:	d9414117 	ldw	r5,1284(sp)
   846e4:	8c400044 	addi	r17,r17,1
   846e8:	9125883a 	add	r18,r18,r4
   846ec:	008001c4 	movi	r2,7
   846f0:	19400015 	stw	r5,0(r3)
   846f4:	19000115 	stw	r4,4(r3)
   846f8:	dc800e15 	stw	r18,56(sp)
   846fc:	dc400d15 	stw	r17,52(sp)
   84700:	147ce816 	blt	r2,r17,83aa4 <___vfprintf_internal_r+0xb90>
   84704:	18c00204 	addi	r3,r3,8
   84708:	003b8006 	br	8350c <___vfprintf_internal_r+0x5f8>
   8470c:	38c00017 	ldw	r3,0(r7)
   84710:	39000204 	addi	r4,r7,8
   84714:	d9014015 	stw	r4,1280(sp)
   84718:	d8c14215 	stw	r3,1288(sp)
   8471c:	39c00117 	ldw	r7,4(r7)
   84720:	d9c14315 	stw	r7,1292(sp)
   84724:	003e1a06 	br	83f90 <___vfprintf_internal_r+0x107c>
   84728:	0005883a 	mov	r2,zero
   8472c:	1409c83a 	sub	r4,r2,r16
   84730:	1105803a 	cmpltu	r2,r2,r4
   84734:	044bc83a 	sub	r5,zero,r17
   84738:	2885c83a 	sub	r2,r5,r2
   8473c:	2021883a 	mov	r16,r4
   84740:	1023883a 	mov	r17,r2
   84744:	01000044 	movi	r4,1
   84748:	00800b44 	movi	r2,45
   8474c:	d8800405 	stb	r2,16(sp)
   84750:	003c7e06 	br	8394c <___vfprintf_internal_r+0xa38>
   84754:	d9014f17 	ldw	r4,1340(sp)
   84758:	b00b883a 	mov	r5,r22
   8475c:	d9800c04 	addi	r6,sp,48
   84760:	0082ebc0 	call	82ebc <__sprint_r>
   84764:	103ba31e 	bne	r2,zero,835f4 <___vfprintf_internal_r+0x6e0>
   84768:	dc800e17 	ldw	r18,56(sp)
   8476c:	dc400d17 	ldw	r17,52(sp)
   84770:	d9000517 	ldw	r4,20(sp)
   84774:	d9401904 	addi	r5,sp,100
   84778:	003da106 	br	83e00 <___vfprintf_internal_r+0xeec>
   8477c:	d9014f17 	ldw	r4,1340(sp)
   84780:	b00b883a 	mov	r5,r22
   84784:	d9800c04 	addi	r6,sp,48
   84788:	0082ebc0 	call	82ebc <__sprint_r>
   8478c:	103b991e 	bne	r2,zero,835f4 <___vfprintf_internal_r+0x6e0>
   84790:	dc800e17 	ldw	r18,56(sp)
   84794:	dc400d17 	ldw	r17,52(sp)
   84798:	d9000517 	ldw	r4,20(sp)
   8479c:	d8c01904 	addi	r3,sp,100
   847a0:	003d8b06 	br	83dd0 <___vfprintf_internal_r+0xebc>
   847a4:	070002b4 	movhi	fp,10
   847a8:	e7252584 	addi	fp,fp,-27498
   847ac:	9425883a 	add	r18,r18,r16
   847b0:	8c400044 	addi	r17,r17,1
   847b4:	008001c4 	movi	r2,7
   847b8:	1f000015 	stw	fp,0(r3)
   847bc:	1c000115 	stw	r16,4(r3)
   847c0:	dc800e15 	stw	r18,56(sp)
   847c4:	dc400d15 	stw	r17,52(sp)
   847c8:	147fbc16 	blt	r2,r17,846bc <___vfprintf_internal_r+0x17a8>
   847cc:	18c00204 	addi	r3,r3,8
   847d0:	003fc206 	br	846dc <___vfprintf_internal_r+0x17c8>
   847d4:	d9014f17 	ldw	r4,1340(sp)
   847d8:	b00b883a 	mov	r5,r22
   847dc:	d9800c04 	addi	r6,sp,48
   847e0:	0082ebc0 	call	82ebc <__sprint_r>
   847e4:	103b831e 	bne	r2,zero,835f4 <___vfprintf_internal_r+0x6e0>
   847e8:	dc800e17 	ldw	r18,56(sp)
   847ec:	d9000517 	ldw	r4,20(sp)
   847f0:	d8c01904 	addi	r3,sp,100
   847f4:	003cfc06 	br	83be8 <___vfprintf_internal_r+0xcd4>
   847f8:	070002b4 	movhi	fp,10
   847fc:	e7252584 	addi	fp,fp,-27498
   84800:	003bde06 	br	8377c <___vfprintf_internal_r+0x868>
   84804:	008002b4 	movhi	r2,10
   84808:	10a51404 	addi	r2,r2,-27568
   8480c:	d8814115 	stw	r2,1284(sp)
   84810:	003def06 	br	83fd0 <___vfprintf_internal_r+0x10bc>
   84814:	d9014217 	ldw	r4,1288(sp)
   84818:	d9414317 	ldw	r5,1292(sp)
   8481c:	0089a040 	call	89a04 <__isnand>
   84820:	10003926 	beq	r2,zero,84908 <___vfprintf_internal_r+0x19f4>
   84824:	d9414d17 	ldw	r5,1332(sp)
   84828:	008011c4 	movi	r2,71
   8482c:	1140ce16 	blt	r2,r5,84b68 <___vfprintf_internal_r+0x1c54>
   84830:	018002b4 	movhi	r6,10
   84834:	31a51504 	addi	r6,r6,-27564
   84838:	d9814115 	stw	r6,1284(sp)
   8483c:	003de406 	br	83fd0 <___vfprintf_internal_r+0x10bc>
   84840:	d9014c17 	ldw	r4,1328(sp)
   84844:	bdc00044 	addi	r23,r23,1
   84848:	b8c00007 	ldb	r3,0(r23)
   8484c:	21000814 	ori	r4,r4,32
   84850:	d9014c15 	stw	r4,1328(sp)
   84854:	003a2e06 	br	83110 <___vfprintf_internal_r+0x1fc>
   84858:	dcc14515 	stw	r19,1300(sp)
   8485c:	98011016 	blt	r19,zero,84ca0 <___vfprintf_internal_r+0x1d8c>
   84860:	980f883a 	mov	r7,r19
   84864:	d8014615 	stw	zero,1304(sp)
   84868:	003c4c06 	br	8399c <___vfprintf_internal_r+0xa88>
   8486c:	d9014f17 	ldw	r4,1340(sp)
   84870:	b00b883a 	mov	r5,r22
   84874:	d9800c04 	addi	r6,sp,48
   84878:	0082ebc0 	call	82ebc <__sprint_r>
   8487c:	103b5d1e 	bne	r2,zero,835f4 <___vfprintf_internal_r+0x6e0>
   84880:	dc800e17 	ldw	r18,56(sp)
   84884:	d9000517 	ldw	r4,20(sp)
   84888:	d8c01904 	addi	r3,sp,100
   8488c:	003f2e06 	br	84548 <___vfprintf_internal_r+0x1634>
   84890:	d8c14c17 	ldw	r3,1328(sp)
   84894:	1880100c 	andi	r2,r3,64
   84898:	1000a026 	beq	r2,zero,84b1c <___vfprintf_internal_r+0x1c08>
   8489c:	38800017 	ldw	r2,0(r7)
   848a0:	39c00104 	addi	r7,r7,4
   848a4:	d9c14015 	stw	r7,1280(sp)
   848a8:	d9014b17 	ldw	r4,1324(sp)
   848ac:	d9c14017 	ldw	r7,1280(sp)
   848b0:	1100000d 	sth	r4,0(r2)
   848b4:	0039f306 	br	83084 <___vfprintf_internal_r+0x170>
   848b8:	d9014f17 	ldw	r4,1340(sp)
   848bc:	b00b883a 	mov	r5,r22
   848c0:	d9800c04 	addi	r6,sp,48
   848c4:	0082ebc0 	call	82ebc <__sprint_r>
   848c8:	103b4a1e 	bne	r2,zero,835f4 <___vfprintf_internal_r+0x6e0>
   848cc:	dc800e17 	ldw	r18,56(sp)
   848d0:	dc400d17 	ldw	r17,52(sp)
   848d4:	d9000517 	ldw	r4,20(sp)
   848d8:	d8c01904 	addi	r3,sp,100
   848dc:	003f2d06 	br	84594 <___vfprintf_internal_r+0x1680>
   848e0:	00800184 	movi	r2,6
   848e4:	14c09a36 	bltu	r2,r19,84b50 <___vfprintf_internal_r+0x1c3c>
   848e8:	dcc14515 	stw	r19,1300(sp)
   848ec:	9800010e 	bge	r19,zero,848f4 <___vfprintf_internal_r+0x19e0>
   848f0:	d8014515 	stw	zero,1300(sp)
   848f4:	008002b4 	movhi	r2,10
   848f8:	10a51704 	addi	r2,r2,-27556
   848fc:	980f883a 	mov	r7,r19
   84900:	d8814115 	stw	r2,1284(sp)
   84904:	003a7206 	br	832d0 <___vfprintf_internal_r+0x3bc>
   84908:	00bfffc4 	movi	r2,-1
   8490c:	9880e226 	beq	r19,r2,84c98 <___vfprintf_internal_r+0x1d84>
   84910:	d9414d17 	ldw	r5,1332(sp)
   84914:	008019c4 	movi	r2,103
   84918:	2880dc26 	beq	r5,r2,84c8c <___vfprintf_internal_r+0x1d78>
   8491c:	008011c4 	movi	r2,71
   84920:	2880da26 	beq	r5,r2,84c8c <___vfprintf_internal_r+0x1d78>
   84924:	d9414c17 	ldw	r5,1328(sp)
   84928:	d9014317 	ldw	r4,1292(sp)
   8492c:	d9814217 	ldw	r6,1288(sp)
   84930:	29404014 	ori	r5,r5,256
   84934:	d9414c15 	stw	r5,1328(sp)
   84938:	2000cc16 	blt	r4,zero,84c6c <___vfprintf_internal_r+0x1d58>
   8493c:	3021883a 	mov	r16,r6
   84940:	2023883a 	mov	r17,r4
   84944:	0039883a 	mov	fp,zero
   84948:	d9414d17 	ldw	r5,1332(sp)
   8494c:	00801984 	movi	r2,102
   84950:	2880b726 	beq	r5,r2,84c30 <___vfprintf_internal_r+0x1d1c>
   84954:	00801184 	movi	r2,70
   84958:	2880b526 	beq	r5,r2,84c30 <___vfprintf_internal_r+0x1d1c>
   8495c:	00801944 	movi	r2,101
   84960:	2880c826 	beq	r5,r2,84c84 <___vfprintf_internal_r+0x1d70>
   84964:	00801144 	movi	r2,69
   84968:	2880c626 	beq	r5,r2,84c84 <___vfprintf_internal_r+0x1d70>
   8496c:	9829883a 	mov	r20,r19
   84970:	d9014f17 	ldw	r4,1340(sp)
   84974:	d8800504 	addi	r2,sp,20
   84978:	880d883a 	mov	r6,r17
   8497c:	d8800115 	stw	r2,4(sp)
   84980:	d8c00604 	addi	r3,sp,24
   84984:	d8800704 	addi	r2,sp,28
   84988:	800b883a 	mov	r5,r16
   8498c:	01c00084 	movi	r7,2
   84990:	d8c00215 	stw	r3,8(sp)
   84994:	d8800315 	stw	r2,12(sp)
   84998:	dd000015 	stw	r20,0(sp)
   8499c:	008517c0 	call	8517c <_dtoa_r>
   849a0:	d9814d17 	ldw	r6,1332(sp)
   849a4:	d8814115 	stw	r2,1284(sp)
   849a8:	008019c4 	movi	r2,103
   849ac:	30809526 	beq	r6,r2,84c04 <___vfprintf_internal_r+0x1cf0>
   849b0:	d8c14d17 	ldw	r3,1332(sp)
   849b4:	008011c4 	movi	r2,71
   849b8:	18809226 	beq	r3,r2,84c04 <___vfprintf_internal_r+0x1cf0>
   849bc:	d9414117 	ldw	r5,1284(sp)
   849c0:	d9814d17 	ldw	r6,1332(sp)
   849c4:	00801984 	movi	r2,102
   849c8:	2d25883a 	add	r18,r5,r20
   849cc:	30808626 	beq	r6,r2,84be8 <___vfprintf_internal_r+0x1cd4>
   849d0:	00801184 	movi	r2,70
   849d4:	30808426 	beq	r6,r2,84be8 <___vfprintf_internal_r+0x1cd4>
   849d8:	000d883a 	mov	r6,zero
   849dc:	000f883a 	mov	r7,zero
   849e0:	880b883a 	mov	r5,r17
   849e4:	8009883a 	mov	r4,r16
   849e8:	008ba640 	call	8ba64 <__eqdf2>
   849ec:	1000751e 	bne	r2,zero,84bc4 <___vfprintf_internal_r+0x1cb0>
   849f0:	9005883a 	mov	r2,r18
   849f4:	dc800715 	stw	r18,28(sp)
   849f8:	d9014117 	ldw	r4,1284(sp)
   849fc:	d9414d17 	ldw	r5,1332(sp)
   84a00:	00c019c4 	movi	r3,103
   84a04:	1125c83a 	sub	r18,r2,r4
   84a08:	28c06826 	beq	r5,r3,84bac <___vfprintf_internal_r+0x1c98>
   84a0c:	008011c4 	movi	r2,71
   84a10:	28806626 	beq	r5,r2,84bac <___vfprintf_internal_r+0x1c98>
   84a14:	d9000517 	ldw	r4,20(sp)
   84a18:	d8c14d17 	ldw	r3,1332(sp)
   84a1c:	00801944 	movi	r2,101
   84a20:	10c05516 	blt	r2,r3,84b78 <___vfprintf_internal_r+0x1c64>
   84a24:	213fffc4 	addi	r4,r4,-1
   84a28:	d9000515 	stw	r4,20(sp)
   84a2c:	d8c00805 	stb	r3,32(sp)
   84a30:	2021883a 	mov	r16,r4
   84a34:	2000c116 	blt	r4,zero,84d3c <___vfprintf_internal_r+0x1e28>
   84a38:	00800ac4 	movi	r2,43
   84a3c:	d8800845 	stb	r2,33(sp)
   84a40:	00800244 	movi	r2,9
   84a44:	1400af0e 	bge	r2,r16,84d04 <___vfprintf_internal_r+0x1df0>
   84a48:	1027883a 	mov	r19,r2
   84a4c:	dc400b84 	addi	r17,sp,46
   84a50:	8009883a 	mov	r4,r16
   84a54:	01400284 	movi	r5,10
   84a58:	0082a940 	call	82a94 <__modsi3>
   84a5c:	10800c04 	addi	r2,r2,48
   84a60:	8c7fffc4 	addi	r17,r17,-1
   84a64:	8009883a 	mov	r4,r16
   84a68:	01400284 	movi	r5,10
   84a6c:	88800005 	stb	r2,0(r17)
   84a70:	0082a340 	call	82a34 <__divsi3>
   84a74:	1021883a 	mov	r16,r2
   84a78:	98bff516 	blt	r19,r2,84a50 <___vfprintf_internal_r+0x1b3c>
   84a7c:	10c00c04 	addi	r3,r2,48
   84a80:	d88009c4 	addi	r2,sp,39
   84a84:	108001c4 	addi	r2,r2,7
   84a88:	897fffc4 	addi	r5,r17,-1
   84a8c:	88ffffc5 	stb	r3,-1(r17)
   84a90:	2880a72e 	bgeu	r5,r2,84d30 <___vfprintf_internal_r+0x1e1c>
   84a94:	1009883a 	mov	r4,r2
   84a98:	d9800804 	addi	r6,sp,32
   84a9c:	d8c00884 	addi	r3,sp,34
   84aa0:	28800003 	ldbu	r2,0(r5)
   84aa4:	29400044 	addi	r5,r5,1
   84aa8:	18800005 	stb	r2,0(r3)
   84aac:	18c00044 	addi	r3,r3,1
   84ab0:	293ffb36 	bltu	r5,r4,84aa0 <___vfprintf_internal_r+0x1b8c>
   84ab4:	1987c83a 	sub	r3,r3,r6
   84ab8:	00800044 	movi	r2,1
   84abc:	d8c14815 	stw	r3,1312(sp)
   84ac0:	90cf883a 	add	r7,r18,r3
   84ac4:	1480960e 	bge	r2,r18,84d20 <___vfprintf_internal_r+0x1e0c>
   84ac8:	39c00044 	addi	r7,r7,1
   84acc:	d9c14515 	stw	r7,1300(sp)
   84ad0:	38003416 	blt	r7,zero,84ba4 <___vfprintf_internal_r+0x1c90>
   84ad4:	e0803fcc 	andi	r2,fp,255
   84ad8:	1080201c 	xori	r2,r2,128
   84adc:	10bfe004 	addi	r2,r2,-128
   84ae0:	10004e26 	beq	r2,zero,84c1c <___vfprintf_internal_r+0x1d08>
   84ae4:	00800b44 	movi	r2,45
   84ae8:	dc814715 	stw	r18,1308(sp)
   84aec:	d8014615 	stw	zero,1304(sp)
   84af0:	d8800405 	stb	r2,16(sp)
   84af4:	003bab06 	br	839a4 <___vfprintf_internal_r+0xa90>
   84af8:	00800b44 	movi	r2,45
   84afc:	d8800405 	stb	r2,16(sp)
   84b00:	003d2d06 	br	83fb8 <___vfprintf_internal_r+0x10a4>
   84b04:	d9014f17 	ldw	r4,1340(sp)
   84b08:	b00b883a 	mov	r5,r22
   84b0c:	d9800c04 	addi	r6,sp,48
   84b10:	0082ebc0 	call	82ebc <__sprint_r>
   84b14:	103ab71e 	bne	r2,zero,835f4 <___vfprintf_internal_r+0x6e0>
   84b18:	003ab506 	br	835f0 <___vfprintf_internal_r+0x6dc>
   84b1c:	38800017 	ldw	r2,0(r7)
   84b20:	39c00104 	addi	r7,r7,4
   84b24:	d9c14015 	stw	r7,1280(sp)
   84b28:	d9414b17 	ldw	r5,1324(sp)
   84b2c:	d9c14017 	ldw	r7,1280(sp)
   84b30:	11400015 	stw	r5,0(r2)
   84b34:	00395306 	br	83084 <___vfprintf_internal_r+0x170>
   84b38:	980f883a 	mov	r7,r19
   84b3c:	dcc14515 	stw	r19,1300(sp)
   84b40:	d8014615 	stw	zero,1304(sp)
   84b44:	003b9506 	br	8399c <___vfprintf_internal_r+0xa88>
   84b48:	0027883a 	mov	r19,zero
   84b4c:	00397206 	br	83118 <___vfprintf_internal_r+0x204>
   84b50:	00c002b4 	movhi	r3,10
   84b54:	18e51704 	addi	r3,r3,-27556
   84b58:	100f883a 	mov	r7,r2
   84b5c:	d8814515 	stw	r2,1300(sp)
   84b60:	d8c14115 	stw	r3,1284(sp)
   84b64:	0039da06 	br	832d0 <___vfprintf_internal_r+0x3bc>
   84b68:	008002b4 	movhi	r2,10
   84b6c:	10a51604 	addi	r2,r2,-27560
   84b70:	d8814115 	stw	r2,1284(sp)
   84b74:	003d1606 	br	83fd0 <___vfprintf_internal_r+0x10bc>
   84b78:	d9414d17 	ldw	r5,1332(sp)
   84b7c:	00801984 	movi	r2,102
   84b80:	28804926 	beq	r5,r2,84ca8 <___vfprintf_internal_r+0x1d94>
   84b84:	200f883a 	mov	r7,r4
   84b88:	24805716 	blt	r4,r18,84ce8 <___vfprintf_internal_r+0x1dd4>
   84b8c:	d9414c17 	ldw	r5,1328(sp)
   84b90:	2880004c 	andi	r2,r5,1
   84b94:	10000126 	beq	r2,zero,84b9c <___vfprintf_internal_r+0x1c88>
   84b98:	21c00044 	addi	r7,r4,1
   84b9c:	d9c14515 	stw	r7,1300(sp)
   84ba0:	383fcc0e 	bge	r7,zero,84ad4 <___vfprintf_internal_r+0x1bc0>
   84ba4:	d8014515 	stw	zero,1300(sp)
   84ba8:	003fca06 	br	84ad4 <___vfprintf_internal_r+0x1bc0>
   84bac:	d9000517 	ldw	r4,20(sp)
   84bb0:	00bfff04 	movi	r2,-4
   84bb4:	1100480e 	bge	r2,r4,84cd8 <___vfprintf_internal_r+0x1dc4>
   84bb8:	99004716 	blt	r19,r4,84cd8 <___vfprintf_internal_r+0x1dc4>
   84bbc:	d8c14d15 	stw	r3,1332(sp)
   84bc0:	003ff006 	br	84b84 <___vfprintf_internal_r+0x1c70>
   84bc4:	d8800717 	ldw	r2,28(sp)
   84bc8:	14bf8b2e 	bgeu	r2,r18,849f8 <___vfprintf_internal_r+0x1ae4>
   84bcc:	9007883a 	mov	r3,r18
   84bd0:	01000c04 	movi	r4,48
   84bd4:	11000005 	stb	r4,0(r2)
   84bd8:	10800044 	addi	r2,r2,1
   84bdc:	d8800715 	stw	r2,28(sp)
   84be0:	18bffc1e 	bne	r3,r2,84bd4 <___vfprintf_internal_r+0x1cc0>
   84be4:	003f8406 	br	849f8 <___vfprintf_internal_r+0x1ae4>
   84be8:	d8814117 	ldw	r2,1284(sp)
   84bec:	10c00007 	ldb	r3,0(r2)
   84bf0:	00800c04 	movi	r2,48
   84bf4:	18805b26 	beq	r3,r2,84d64 <___vfprintf_internal_r+0x1e50>
   84bf8:	d9000517 	ldw	r4,20(sp)
   84bfc:	9125883a 	add	r18,r18,r4
   84c00:	003f7506 	br	849d8 <___vfprintf_internal_r+0x1ac4>
   84c04:	d9014c17 	ldw	r4,1328(sp)
   84c08:	2080004c 	andi	r2,r4,1
   84c0c:	1005003a 	cmpeq	r2,r2,zero
   84c10:	103f6a26 	beq	r2,zero,849bc <___vfprintf_internal_r+0x1aa8>
   84c14:	d8800717 	ldw	r2,28(sp)
   84c18:	003f7706 	br	849f8 <___vfprintf_internal_r+0x1ae4>
   84c1c:	d9c14515 	stw	r7,1300(sp)
   84c20:	38004d16 	blt	r7,zero,84d58 <___vfprintf_internal_r+0x1e44>
   84c24:	dc814715 	stw	r18,1308(sp)
   84c28:	d8014615 	stw	zero,1304(sp)
   84c2c:	003b5b06 	br	8399c <___vfprintf_internal_r+0xa88>
   84c30:	d9014f17 	ldw	r4,1340(sp)
   84c34:	d8800504 	addi	r2,sp,20
   84c38:	d8800115 	stw	r2,4(sp)
   84c3c:	d8c00604 	addi	r3,sp,24
   84c40:	d8800704 	addi	r2,sp,28
   84c44:	800b883a 	mov	r5,r16
   84c48:	880d883a 	mov	r6,r17
   84c4c:	01c000c4 	movi	r7,3
   84c50:	d8c00215 	stw	r3,8(sp)
   84c54:	d8800315 	stw	r2,12(sp)
   84c58:	dcc00015 	stw	r19,0(sp)
   84c5c:	9829883a 	mov	r20,r19
   84c60:	008517c0 	call	8517c <_dtoa_r>
   84c64:	d8814115 	stw	r2,1284(sp)
   84c68:	003f5106 	br	849b0 <___vfprintf_internal_r+0x1a9c>
   84c6c:	d8c14217 	ldw	r3,1288(sp)
   84c70:	d9014317 	ldw	r4,1292(sp)
   84c74:	07000b44 	movi	fp,45
   84c78:	1821883a 	mov	r16,r3
   84c7c:	2460003c 	xorhi	r17,r4,32768
   84c80:	003f3106 	br	84948 <___vfprintf_internal_r+0x1a34>
   84c84:	9d000044 	addi	r20,r19,1
   84c88:	003f3906 	br	84970 <___vfprintf_internal_r+0x1a5c>
   84c8c:	983f251e 	bne	r19,zero,84924 <___vfprintf_internal_r+0x1a10>
   84c90:	04c00044 	movi	r19,1
   84c94:	003f2306 	br	84924 <___vfprintf_internal_r+0x1a10>
   84c98:	04c00184 	movi	r19,6
   84c9c:	003f2106 	br	84924 <___vfprintf_internal_r+0x1a10>
   84ca0:	d8014515 	stw	zero,1300(sp)
   84ca4:	003eee06 	br	84860 <___vfprintf_internal_r+0x194c>
   84ca8:	200f883a 	mov	r7,r4
   84cac:	0100370e 	bge	zero,r4,84d8c <___vfprintf_internal_r+0x1e78>
   84cb0:	9800031e 	bne	r19,zero,84cc0 <___vfprintf_internal_r+0x1dac>
   84cb4:	d9814c17 	ldw	r6,1328(sp)
   84cb8:	3080004c 	andi	r2,r6,1
   84cbc:	103fb726 	beq	r2,zero,84b9c <___vfprintf_internal_r+0x1c88>
   84cc0:	20800044 	addi	r2,r4,1
   84cc4:	98a7883a 	add	r19,r19,r2
   84cc8:	dcc14515 	stw	r19,1300(sp)
   84ccc:	980f883a 	mov	r7,r19
   84cd0:	983f800e 	bge	r19,zero,84ad4 <___vfprintf_internal_r+0x1bc0>
   84cd4:	003fb306 	br	84ba4 <___vfprintf_internal_r+0x1c90>
   84cd8:	d9814d17 	ldw	r6,1332(sp)
   84cdc:	31bfff84 	addi	r6,r6,-2
   84ce0:	d9814d15 	stw	r6,1332(sp)
   84ce4:	003f4c06 	br	84a18 <___vfprintf_internal_r+0x1b04>
   84ce8:	0100180e 	bge	zero,r4,84d4c <___vfprintf_internal_r+0x1e38>
   84cec:	00800044 	movi	r2,1
   84cf0:	1485883a 	add	r2,r2,r18
   84cf4:	d8814515 	stw	r2,1300(sp)
   84cf8:	100f883a 	mov	r7,r2
   84cfc:	103f750e 	bge	r2,zero,84ad4 <___vfprintf_internal_r+0x1bc0>
   84d00:	003fa806 	br	84ba4 <___vfprintf_internal_r+0x1c90>
   84d04:	80c00c04 	addi	r3,r16,48
   84d08:	00800c04 	movi	r2,48
   84d0c:	d8c008c5 	stb	r3,35(sp)
   84d10:	d9800804 	addi	r6,sp,32
   84d14:	d8c00904 	addi	r3,sp,36
   84d18:	d8800885 	stb	r2,34(sp)
   84d1c:	003f6506 	br	84ab4 <___vfprintf_internal_r+0x1ba0>
   84d20:	d9014c17 	ldw	r4,1328(sp)
   84d24:	2084703a 	and	r2,r4,r2
   84d28:	103f9c26 	beq	r2,zero,84b9c <___vfprintf_internal_r+0x1c88>
   84d2c:	003f6606 	br	84ac8 <___vfprintf_internal_r+0x1bb4>
   84d30:	d9800804 	addi	r6,sp,32
   84d34:	d8c00884 	addi	r3,sp,34
   84d38:	003f5e06 	br	84ab4 <___vfprintf_internal_r+0x1ba0>
   84d3c:	00800b44 	movi	r2,45
   84d40:	0121c83a 	sub	r16,zero,r4
   84d44:	d8800845 	stb	r2,33(sp)
   84d48:	003f3d06 	br	84a40 <___vfprintf_internal_r+0x1b2c>
   84d4c:	00800084 	movi	r2,2
   84d50:	1105c83a 	sub	r2,r2,r4
   84d54:	003fe606 	br	84cf0 <___vfprintf_internal_r+0x1ddc>
   84d58:	d8014515 	stw	zero,1300(sp)
   84d5c:	dc814715 	stw	r18,1308(sp)
   84d60:	003fb106 	br	84c28 <___vfprintf_internal_r+0x1d14>
   84d64:	000d883a 	mov	r6,zero
   84d68:	000f883a 	mov	r7,zero
   84d6c:	8009883a 	mov	r4,r16
   84d70:	880b883a 	mov	r5,r17
   84d74:	008baec0 	call	8baec <__nedf2>
   84d78:	103f9f26 	beq	r2,zero,84bf8 <___vfprintf_internal_r+0x1ce4>
   84d7c:	00800044 	movi	r2,1
   84d80:	1509c83a 	sub	r4,r2,r20
   84d84:	d9000515 	stw	r4,20(sp)
   84d88:	003f9b06 	br	84bf8 <___vfprintf_internal_r+0x1ce4>
   84d8c:	98000d1e 	bne	r19,zero,84dc4 <___vfprintf_internal_r+0x1eb0>
   84d90:	d8c14c17 	ldw	r3,1328(sp)
   84d94:	1880004c 	andi	r2,r3,1
   84d98:	10000a1e 	bne	r2,zero,84dc4 <___vfprintf_internal_r+0x1eb0>
   84d9c:	01000044 	movi	r4,1
   84da0:	200f883a 	mov	r7,r4
   84da4:	d9014515 	stw	r4,1300(sp)
   84da8:	003f4a06 	br	84ad4 <___vfprintf_internal_r+0x1bc0>
   84dac:	3cc00017 	ldw	r19,0(r7)
   84db0:	39c00104 	addi	r7,r7,4
   84db4:	983d0e0e 	bge	r19,zero,841f0 <___vfprintf_internal_r+0x12dc>
   84db8:	b8c00007 	ldb	r3,0(r23)
   84dbc:	04ffffc4 	movi	r19,-1
   84dc0:	0038d306 	br	83110 <___vfprintf_internal_r+0x1fc>
   84dc4:	9cc00084 	addi	r19,r19,2
   84dc8:	dcc14515 	stw	r19,1300(sp)
   84dcc:	980f883a 	mov	r7,r19
   84dd0:	983f400e 	bge	r19,zero,84ad4 <___vfprintf_internal_r+0x1bc0>
   84dd4:	003f7306 	br	84ba4 <___vfprintf_internal_r+0x1c90>

00084dd8 <__vfprintf_internal>:
   84dd8:	008002b4 	movhi	r2,10
   84ddc:	10acc204 	addi	r2,r2,-19704
   84de0:	2013883a 	mov	r9,r4
   84de4:	11000017 	ldw	r4,0(r2)
   84de8:	2805883a 	mov	r2,r5
   84dec:	300f883a 	mov	r7,r6
   84df0:	480b883a 	mov	r5,r9
   84df4:	100d883a 	mov	r6,r2
   84df8:	0082f141 	jmpi	82f14 <___vfprintf_internal_r>

00084dfc <__swsetup_r>:
   84dfc:	008002b4 	movhi	r2,10
   84e00:	10acc204 	addi	r2,r2,-19704
   84e04:	10c00017 	ldw	r3,0(r2)
   84e08:	defffd04 	addi	sp,sp,-12
   84e0c:	dc400115 	stw	r17,4(sp)
   84e10:	dc000015 	stw	r16,0(sp)
   84e14:	dfc00215 	stw	ra,8(sp)
   84e18:	2023883a 	mov	r17,r4
   84e1c:	2821883a 	mov	r16,r5
   84e20:	18000226 	beq	r3,zero,84e2c <__swsetup_r+0x30>
   84e24:	18800e17 	ldw	r2,56(r3)
   84e28:	10001f26 	beq	r2,zero,84ea8 <__swsetup_r+0xac>
   84e2c:	8100030b 	ldhu	r4,12(r16)
   84e30:	2080020c 	andi	r2,r4,8
   84e34:	10002826 	beq	r2,zero,84ed8 <__swsetup_r+0xdc>
   84e38:	81400417 	ldw	r5,16(r16)
   84e3c:	28001d26 	beq	r5,zero,84eb4 <__swsetup_r+0xb8>
   84e40:	2080004c 	andi	r2,r4,1
   84e44:	1005003a 	cmpeq	r2,r2,zero
   84e48:	10000b26 	beq	r2,zero,84e78 <__swsetup_r+0x7c>
   84e4c:	2080008c 	andi	r2,r4,2
   84e50:	10001226 	beq	r2,zero,84e9c <__swsetup_r+0xa0>
   84e54:	0005883a 	mov	r2,zero
   84e58:	80800215 	stw	r2,8(r16)
   84e5c:	28000b26 	beq	r5,zero,84e8c <__swsetup_r+0x90>
   84e60:	0005883a 	mov	r2,zero
   84e64:	dfc00217 	ldw	ra,8(sp)
   84e68:	dc400117 	ldw	r17,4(sp)
   84e6c:	dc000017 	ldw	r16,0(sp)
   84e70:	dec00304 	addi	sp,sp,12
   84e74:	f800283a 	ret
   84e78:	80800517 	ldw	r2,20(r16)
   84e7c:	80000215 	stw	zero,8(r16)
   84e80:	0085c83a 	sub	r2,zero,r2
   84e84:	80800615 	stw	r2,24(r16)
   84e88:	283ff51e 	bne	r5,zero,84e60 <__swsetup_r+0x64>
   84e8c:	2080200c 	andi	r2,r4,128
   84e90:	103ff326 	beq	r2,zero,84e60 <__swsetup_r+0x64>
   84e94:	00bfffc4 	movi	r2,-1
   84e98:	003ff206 	br	84e64 <__swsetup_r+0x68>
   84e9c:	80800517 	ldw	r2,20(r16)
   84ea0:	80800215 	stw	r2,8(r16)
   84ea4:	003fed06 	br	84e5c <__swsetup_r+0x60>
   84ea8:	1809883a 	mov	r4,r3
   84eac:	00869c80 	call	869c8 <__sinit>
   84eb0:	003fde06 	br	84e2c <__swsetup_r+0x30>
   84eb4:	20c0a00c 	andi	r3,r4,640
   84eb8:	00808004 	movi	r2,512
   84ebc:	18bfe026 	beq	r3,r2,84e40 <__swsetup_r+0x44>
   84ec0:	8809883a 	mov	r4,r17
   84ec4:	800b883a 	mov	r5,r16
   84ec8:	00877740 	call	87774 <__smakebuf_r>
   84ecc:	8100030b 	ldhu	r4,12(r16)
   84ed0:	81400417 	ldw	r5,16(r16)
   84ed4:	003fda06 	br	84e40 <__swsetup_r+0x44>
   84ed8:	2080040c 	andi	r2,r4,16
   84edc:	103fed26 	beq	r2,zero,84e94 <__swsetup_r+0x98>
   84ee0:	2080010c 	andi	r2,r4,4
   84ee4:	10001226 	beq	r2,zero,84f30 <__swsetup_r+0x134>
   84ee8:	81400c17 	ldw	r5,48(r16)
   84eec:	28000526 	beq	r5,zero,84f04 <__swsetup_r+0x108>
   84ef0:	80801004 	addi	r2,r16,64
   84ef4:	28800226 	beq	r5,r2,84f00 <__swsetup_r+0x104>
   84ef8:	8809883a 	mov	r4,r17
   84efc:	0086d800 	call	86d80 <_free_r>
   84f00:	80000c15 	stw	zero,48(r16)
   84f04:	8080030b 	ldhu	r2,12(r16)
   84f08:	81400417 	ldw	r5,16(r16)
   84f0c:	80000115 	stw	zero,4(r16)
   84f10:	10bff6cc 	andi	r2,r2,65499
   84f14:	8080030d 	sth	r2,12(r16)
   84f18:	81400015 	stw	r5,0(r16)
   84f1c:	8080030b 	ldhu	r2,12(r16)
   84f20:	10800214 	ori	r2,r2,8
   84f24:	113fffcc 	andi	r4,r2,65535
   84f28:	8080030d 	sth	r2,12(r16)
   84f2c:	003fc306 	br	84e3c <__swsetup_r+0x40>
   84f30:	81400417 	ldw	r5,16(r16)
   84f34:	003ff906 	br	84f1c <__swsetup_r+0x120>

00084f38 <quorem>:
   84f38:	28c00417 	ldw	r3,16(r5)
   84f3c:	20800417 	ldw	r2,16(r4)
   84f40:	defff104 	addi	sp,sp,-60
   84f44:	dfc00e15 	stw	ra,56(sp)
   84f48:	df000d15 	stw	fp,52(sp)
   84f4c:	ddc00c15 	stw	r23,48(sp)
   84f50:	dd800b15 	stw	r22,44(sp)
   84f54:	dd400a15 	stw	r21,40(sp)
   84f58:	dd000915 	stw	r20,36(sp)
   84f5c:	dcc00815 	stw	r19,32(sp)
   84f60:	dc800715 	stw	r18,28(sp)
   84f64:	dc400615 	stw	r17,24(sp)
   84f68:	dc000515 	stw	r16,20(sp)
   84f6c:	d9000315 	stw	r4,12(sp)
   84f70:	d9400415 	stw	r5,16(sp)
   84f74:	10c07f16 	blt	r2,r3,85174 <quorem+0x23c>
   84f78:	1d3fffc4 	addi	r20,r3,-1
   84f7c:	d8c00417 	ldw	r3,16(sp)
   84f80:	d9000317 	ldw	r4,12(sp)
   84f84:	a505883a 	add	r2,r20,r20
   84f88:	1085883a 	add	r2,r2,r2
   84f8c:	1cc00504 	addi	r19,r3,20
   84f90:	25c00504 	addi	r23,r4,20
   84f94:	98ad883a 	add	r22,r19,r2
   84f98:	15c7883a 	add	r3,r2,r23
   84f9c:	b1400017 	ldw	r5,0(r22)
   84fa0:	19000017 	ldw	r4,0(r3)
   84fa4:	d8c00015 	stw	r3,0(sp)
   84fa8:	29400044 	addi	r5,r5,1
   84fac:	d9000215 	stw	r4,8(sp)
   84fb0:	0082af40 	call	82af4 <__udivsi3>
   84fb4:	1039883a 	mov	fp,r2
   84fb8:	10003d1e 	bne	r2,zero,850b0 <quorem+0x178>
   84fbc:	d9400417 	ldw	r5,16(sp)
   84fc0:	d9000317 	ldw	r4,12(sp)
   84fc4:	00884a00 	call	884a0 <__mcmp>
   84fc8:	10002c16 	blt	r2,zero,8507c <quorem+0x144>
   84fcc:	e7000044 	addi	fp,fp,1
   84fd0:	b80f883a 	mov	r7,r23
   84fd4:	0011883a 	mov	r8,zero
   84fd8:	0009883a 	mov	r4,zero
   84fdc:	99400017 	ldw	r5,0(r19)
   84fe0:	38c00017 	ldw	r3,0(r7)
   84fe4:	9cc00104 	addi	r19,r19,4
   84fe8:	28bfffcc 	andi	r2,r5,65535
   84fec:	2085883a 	add	r2,r4,r2
   84ff0:	11bfffcc 	andi	r6,r2,65535
   84ff4:	193fffcc 	andi	r4,r3,65535
   84ff8:	1004d43a 	srli	r2,r2,16
   84ffc:	280ad43a 	srli	r5,r5,16
   85000:	2189c83a 	sub	r4,r4,r6
   85004:	2209883a 	add	r4,r4,r8
   85008:	1806d43a 	srli	r3,r3,16
   8500c:	288b883a 	add	r5,r5,r2
   85010:	200dd43a 	srai	r6,r4,16
   85014:	28bfffcc 	andi	r2,r5,65535
   85018:	1887c83a 	sub	r3,r3,r2
   8501c:	1987883a 	add	r3,r3,r6
   85020:	3900000d 	sth	r4,0(r7)
   85024:	38c0008d 	sth	r3,2(r7)
   85028:	2808d43a 	srli	r4,r5,16
   8502c:	39c00104 	addi	r7,r7,4
   85030:	1811d43a 	srai	r8,r3,16
   85034:	b4ffe92e 	bgeu	r22,r19,84fdc <quorem+0xa4>
   85038:	a505883a 	add	r2,r20,r20
   8503c:	1085883a 	add	r2,r2,r2
   85040:	b885883a 	add	r2,r23,r2
   85044:	10c00017 	ldw	r3,0(r2)
   85048:	18000c1e 	bne	r3,zero,8507c <quorem+0x144>
   8504c:	113fff04 	addi	r4,r2,-4
   85050:	b900082e 	bgeu	r23,r4,85074 <quorem+0x13c>
   85054:	10bfff17 	ldw	r2,-4(r2)
   85058:	10000326 	beq	r2,zero,85068 <quorem+0x130>
   8505c:	00000506 	br	85074 <quorem+0x13c>
   85060:	20800017 	ldw	r2,0(r4)
   85064:	1000031e 	bne	r2,zero,85074 <quorem+0x13c>
   85068:	213fff04 	addi	r4,r4,-4
   8506c:	a53fffc4 	addi	r20,r20,-1
   85070:	b93ffb36 	bltu	r23,r4,85060 <quorem+0x128>
   85074:	d9000317 	ldw	r4,12(sp)
   85078:	25000415 	stw	r20,16(r4)
   8507c:	e005883a 	mov	r2,fp
   85080:	dfc00e17 	ldw	ra,56(sp)
   85084:	df000d17 	ldw	fp,52(sp)
   85088:	ddc00c17 	ldw	r23,48(sp)
   8508c:	dd800b17 	ldw	r22,44(sp)
   85090:	dd400a17 	ldw	r21,40(sp)
   85094:	dd000917 	ldw	r20,36(sp)
   85098:	dcc00817 	ldw	r19,32(sp)
   8509c:	dc800717 	ldw	r18,28(sp)
   850a0:	dc400617 	ldw	r17,24(sp)
   850a4:	dc000517 	ldw	r16,20(sp)
   850a8:	dec00f04 	addi	sp,sp,60
   850ac:	f800283a 	ret
   850b0:	b823883a 	mov	r17,r23
   850b4:	9825883a 	mov	r18,r19
   850b8:	d8000115 	stw	zero,4(sp)
   850bc:	002b883a 	mov	r21,zero
   850c0:	94000017 	ldw	r16,0(r18)
   850c4:	e009883a 	mov	r4,fp
   850c8:	94800104 	addi	r18,r18,4
   850cc:	817fffcc 	andi	r5,r16,65535
   850d0:	0082b040 	call	82b04 <__mulsi3>
   850d4:	800ad43a 	srli	r5,r16,16
   850d8:	e009883a 	mov	r4,fp
   850dc:	a8a1883a 	add	r16,r21,r2
   850e0:	0082b040 	call	82b04 <__mulsi3>
   850e4:	89000017 	ldw	r4,0(r17)
   850e8:	80ffffcc 	andi	r3,r16,65535
   850ec:	8020d43a 	srli	r16,r16,16
   850f0:	217fffcc 	andi	r5,r4,65535
   850f4:	28cbc83a 	sub	r5,r5,r3
   850f8:	d8c00117 	ldw	r3,4(sp)
   850fc:	2008d43a 	srli	r4,r4,16
   85100:	1405883a 	add	r2,r2,r16
   85104:	28cb883a 	add	r5,r5,r3
   85108:	280dd43a 	srai	r6,r5,16
   8510c:	10ffffcc 	andi	r3,r2,65535
   85110:	20c9c83a 	sub	r4,r4,r3
   85114:	2189883a 	add	r4,r4,r6
   85118:	8900008d 	sth	r4,2(r17)
   8511c:	2009d43a 	srai	r4,r4,16
   85120:	8940000d 	sth	r5,0(r17)
   85124:	102ad43a 	srli	r21,r2,16
   85128:	8c400104 	addi	r17,r17,4
   8512c:	d9000115 	stw	r4,4(sp)
   85130:	b4bfe32e 	bgeu	r22,r18,850c0 <quorem+0x188>
   85134:	d9000217 	ldw	r4,8(sp)
   85138:	203fa01e 	bne	r4,zero,84fbc <quorem+0x84>
   8513c:	d8800017 	ldw	r2,0(sp)
   85140:	10ffff04 	addi	r3,r2,-4
   85144:	b8c0082e 	bgeu	r23,r3,85168 <quorem+0x230>
   85148:	10bfff17 	ldw	r2,-4(r2)
   8514c:	10000326 	beq	r2,zero,8515c <quorem+0x224>
   85150:	00000506 	br	85168 <quorem+0x230>
   85154:	18800017 	ldw	r2,0(r3)
   85158:	1000031e 	bne	r2,zero,85168 <quorem+0x230>
   8515c:	18ffff04 	addi	r3,r3,-4
   85160:	a53fffc4 	addi	r20,r20,-1
   85164:	b8fffb36 	bltu	r23,r3,85154 <quorem+0x21c>
   85168:	d8c00317 	ldw	r3,12(sp)
   8516c:	1d000415 	stw	r20,16(r3)
   85170:	003f9206 	br	84fbc <quorem+0x84>
   85174:	0005883a 	mov	r2,zero
   85178:	003fc106 	br	85080 <quorem+0x148>

0008517c <_dtoa_r>:
   8517c:	22001017 	ldw	r8,64(r4)
   85180:	deffda04 	addi	sp,sp,-152
   85184:	dd402115 	stw	r21,132(sp)
   85188:	dd002015 	stw	r20,128(sp)
   8518c:	dc801e15 	stw	r18,120(sp)
   85190:	dc401d15 	stw	r17,116(sp)
   85194:	dfc02515 	stw	ra,148(sp)
   85198:	df002415 	stw	fp,144(sp)
   8519c:	ddc02315 	stw	r23,140(sp)
   851a0:	dd802215 	stw	r22,136(sp)
   851a4:	dcc01f15 	stw	r19,124(sp)
   851a8:	dc001c15 	stw	r16,112(sp)
   851ac:	d9001615 	stw	r4,88(sp)
   851b0:	3023883a 	mov	r17,r6
   851b4:	2829883a 	mov	r20,r5
   851b8:	d9c01715 	stw	r7,92(sp)
   851bc:	dc802817 	ldw	r18,160(sp)
   851c0:	302b883a 	mov	r21,r6
   851c4:	40000a26 	beq	r8,zero,851f0 <_dtoa_r+0x74>
   851c8:	20801117 	ldw	r2,68(r4)
   851cc:	400b883a 	mov	r5,r8
   851d0:	40800115 	stw	r2,4(r8)
   851d4:	20c01117 	ldw	r3,68(r4)
   851d8:	00800044 	movi	r2,1
   851dc:	10c4983a 	sll	r2,r2,r3
   851e0:	40800215 	stw	r2,8(r8)
   851e4:	00883440 	call	88344 <_Bfree>
   851e8:	d8c01617 	ldw	r3,88(sp)
   851ec:	18001015 	stw	zero,64(r3)
   851f0:	8800a316 	blt	r17,zero,85480 <_dtoa_r+0x304>
   851f4:	90000015 	stw	zero,0(r18)
   851f8:	a8dffc2c 	andhi	r3,r21,32752
   851fc:	009ffc34 	movhi	r2,32752
   85200:	18809126 	beq	r3,r2,85448 <_dtoa_r+0x2cc>
   85204:	000d883a 	mov	r6,zero
   85208:	000f883a 	mov	r7,zero
   8520c:	a009883a 	mov	r4,r20
   85210:	a80b883a 	mov	r5,r21
   85214:	dd001215 	stw	r20,72(sp)
   85218:	dd401315 	stw	r21,76(sp)
   8521c:	008baec0 	call	8baec <__nedf2>
   85220:	1000171e 	bne	r2,zero,85280 <_dtoa_r+0x104>
   85224:	d9802717 	ldw	r6,156(sp)
   85228:	00800044 	movi	r2,1
   8522c:	30800015 	stw	r2,0(r6)
   85230:	d8802917 	ldw	r2,164(sp)
   85234:	10029b26 	beq	r2,zero,85ca4 <_dtoa_r+0xb28>
   85238:	d9002917 	ldw	r4,164(sp)
   8523c:	008002b4 	movhi	r2,10
   85240:	10a52544 	addi	r2,r2,-27499
   85244:	10ffffc4 	addi	r3,r2,-1
   85248:	20800015 	stw	r2,0(r4)
   8524c:	1805883a 	mov	r2,r3
   85250:	dfc02517 	ldw	ra,148(sp)
   85254:	df002417 	ldw	fp,144(sp)
   85258:	ddc02317 	ldw	r23,140(sp)
   8525c:	dd802217 	ldw	r22,136(sp)
   85260:	dd402117 	ldw	r21,132(sp)
   85264:	dd002017 	ldw	r20,128(sp)
   85268:	dcc01f17 	ldw	r19,124(sp)
   8526c:	dc801e17 	ldw	r18,120(sp)
   85270:	dc401d17 	ldw	r17,116(sp)
   85274:	dc001c17 	ldw	r16,112(sp)
   85278:	dec02604 	addi	sp,sp,152
   8527c:	f800283a 	ret
   85280:	d9001617 	ldw	r4,88(sp)
   85284:	d9401217 	ldw	r5,72(sp)
   85288:	d8800104 	addi	r2,sp,4
   8528c:	a80d883a 	mov	r6,r21
   85290:	d9c00204 	addi	r7,sp,8
   85294:	d8800015 	stw	r2,0(sp)
   85298:	00889800 	call	88980 <__d2b>
   8529c:	d8800715 	stw	r2,28(sp)
   852a0:	a804d53a 	srli	r2,r21,20
   852a4:	1101ffcc 	andi	r4,r2,2047
   852a8:	20008626 	beq	r4,zero,854c4 <_dtoa_r+0x348>
   852ac:	d8c01217 	ldw	r3,72(sp)
   852b0:	00800434 	movhi	r2,16
   852b4:	10bfffc4 	addi	r2,r2,-1
   852b8:	ddc00117 	ldw	r23,4(sp)
   852bc:	a884703a 	and	r2,r21,r2
   852c0:	1811883a 	mov	r8,r3
   852c4:	124ffc34 	orhi	r9,r2,16368
   852c8:	25bf0044 	addi	r22,r4,-1023
   852cc:	d8000815 	stw	zero,32(sp)
   852d0:	0005883a 	mov	r2,zero
   852d4:	00cffe34 	movhi	r3,16376
   852d8:	480b883a 	mov	r5,r9
   852dc:	4009883a 	mov	r4,r8
   852e0:	180f883a 	mov	r7,r3
   852e4:	100d883a 	mov	r6,r2
   852e8:	008b3540 	call	8b354 <__subdf3>
   852ec:	0218dbf4 	movhi	r8,25455
   852f0:	4210d844 	addi	r8,r8,17249
   852f4:	024ff4f4 	movhi	r9,16339
   852f8:	4a61e9c4 	addi	r9,r9,-30809
   852fc:	480f883a 	mov	r7,r9
   85300:	400d883a 	mov	r6,r8
   85304:	180b883a 	mov	r5,r3
   85308:	1009883a 	mov	r4,r2
   8530c:	008b4480 	call	8b448 <__muldf3>
   85310:	0222d874 	movhi	r8,35681
   85314:	42322cc4 	addi	r8,r8,-14157
   85318:	024ff1f4 	movhi	r9,16327
   8531c:	4a628a04 	addi	r9,r9,-30168
   85320:	480f883a 	mov	r7,r9
   85324:	400d883a 	mov	r6,r8
   85328:	180b883a 	mov	r5,r3
   8532c:	1009883a 	mov	r4,r2
   85330:	008b3d40 	call	8b3d4 <__adddf3>
   85334:	b009883a 	mov	r4,r22
   85338:	1021883a 	mov	r16,r2
   8533c:	1823883a 	mov	r17,r3
   85340:	008bd0c0 	call	8bd0c <__floatsidf>
   85344:	021427f4 	movhi	r8,20639
   85348:	421e7ec4 	addi	r8,r8,31227
   8534c:	024ff4f4 	movhi	r9,16339
   85350:	4a5104c4 	addi	r9,r9,17427
   85354:	480f883a 	mov	r7,r9
   85358:	400d883a 	mov	r6,r8
   8535c:	180b883a 	mov	r5,r3
   85360:	1009883a 	mov	r4,r2
   85364:	008b4480 	call	8b448 <__muldf3>
   85368:	180f883a 	mov	r7,r3
   8536c:	880b883a 	mov	r5,r17
   85370:	100d883a 	mov	r6,r2
   85374:	8009883a 	mov	r4,r16
   85378:	008b3d40 	call	8b3d4 <__adddf3>
   8537c:	1009883a 	mov	r4,r2
   85380:	180b883a 	mov	r5,r3
   85384:	1021883a 	mov	r16,r2
   85388:	1823883a 	mov	r17,r3
   8538c:	008be040 	call	8be04 <__fixdfsi>
   85390:	000d883a 	mov	r6,zero
   85394:	000f883a 	mov	r7,zero
   85398:	8009883a 	mov	r4,r16
   8539c:	880b883a 	mov	r5,r17
   853a0:	d8800d15 	stw	r2,52(sp)
   853a4:	008bc840 	call	8bc84 <__ltdf2>
   853a8:	10031716 	blt	r2,zero,86008 <_dtoa_r+0xe8c>
   853ac:	d8c00d17 	ldw	r3,52(sp)
   853b0:	00800584 	movi	r2,22
   853b4:	10c1482e 	bgeu	r2,r3,858d8 <_dtoa_r+0x75c>
   853b8:	01000044 	movi	r4,1
   853bc:	d9000c15 	stw	r4,48(sp)
   853c0:	bd85c83a 	sub	r2,r23,r22
   853c4:	11bfffc4 	addi	r6,r2,-1
   853c8:	30030b16 	blt	r6,zero,85ff8 <_dtoa_r+0xe7c>
   853cc:	d9800a15 	stw	r6,40(sp)
   853d0:	d8001115 	stw	zero,68(sp)
   853d4:	d8c00d17 	ldw	r3,52(sp)
   853d8:	1802ff16 	blt	r3,zero,85fd8 <_dtoa_r+0xe5c>
   853dc:	d9000a17 	ldw	r4,40(sp)
   853e0:	d8c00915 	stw	r3,36(sp)
   853e4:	d8001015 	stw	zero,64(sp)
   853e8:	20c9883a 	add	r4,r4,r3
   853ec:	d9000a15 	stw	r4,40(sp)
   853f0:	d9001717 	ldw	r4,92(sp)
   853f4:	00800244 	movi	r2,9
   853f8:	11004636 	bltu	r2,r4,85514 <_dtoa_r+0x398>
   853fc:	00800144 	movi	r2,5
   85400:	11020416 	blt	r2,r4,85c14 <_dtoa_r+0xa98>
   85404:	04400044 	movi	r17,1
   85408:	d8c01717 	ldw	r3,92(sp)
   8540c:	00800144 	movi	r2,5
   85410:	10c1ed36 	bltu	r2,r3,85bc8 <_dtoa_r+0xa4c>
   85414:	18c5883a 	add	r2,r3,r3
   85418:	1085883a 	add	r2,r2,r2
   8541c:	00c00234 	movhi	r3,8
   85420:	18d50c04 	addi	r3,r3,21552
   85424:	10c5883a 	add	r2,r2,r3
   85428:	11000017 	ldw	r4,0(r2)
   8542c:	2000683a 	jmp	r4
   85430:	0008551c 	xori	zero,zero,8532
   85434:	0008551c 	xori	zero,zero,8532
   85438:	00085f1c 	xori	zero,zero,8572
   8543c:	00085ef4 	movhi	zero,8571
   85440:	00085f38 	rdprs	zero,zero,8572
   85444:	00085f44 	movi	zero,8573
   85448:	d9002717 	ldw	r4,156(sp)
   8544c:	0089c3c4 	movi	r2,9999
   85450:	20800015 	stw	r2,0(r4)
   85454:	a0001026 	beq	r20,zero,85498 <_dtoa_r+0x31c>
   85458:	00c002b4 	movhi	r3,10
   8545c:	18e53104 	addi	r3,r3,-27452
   85460:	d9802917 	ldw	r6,164(sp)
   85464:	303f7926 	beq	r6,zero,8524c <_dtoa_r+0xd0>
   85468:	188000c7 	ldb	r2,3(r3)
   8546c:	190000c4 	addi	r4,r3,3
   85470:	1000101e 	bne	r2,zero,854b4 <_dtoa_r+0x338>
   85474:	d8802917 	ldw	r2,164(sp)
   85478:	11000015 	stw	r4,0(r2)
   8547c:	003f7306 	br	8524c <_dtoa_r+0xd0>
   85480:	00a00034 	movhi	r2,32768
   85484:	10bfffc4 	addi	r2,r2,-1
   85488:	00c00044 	movi	r3,1
   8548c:	88aa703a 	and	r21,r17,r2
   85490:	90c00015 	stw	r3,0(r18)
   85494:	003f5806 	br	851f8 <_dtoa_r+0x7c>
   85498:	00800434 	movhi	r2,16
   8549c:	10bfffc4 	addi	r2,r2,-1
   854a0:	a884703a 	and	r2,r21,r2
   854a4:	103fec1e 	bne	r2,zero,85458 <_dtoa_r+0x2dc>
   854a8:	00c002b4 	movhi	r3,10
   854ac:	18e52e04 	addi	r3,r3,-27464
   854b0:	003feb06 	br	85460 <_dtoa_r+0x2e4>
   854b4:	d8802917 	ldw	r2,164(sp)
   854b8:	19000204 	addi	r4,r3,8
   854bc:	11000015 	stw	r4,0(r2)
   854c0:	003f6206 	br	8524c <_dtoa_r+0xd0>
   854c4:	ddc00117 	ldw	r23,4(sp)
   854c8:	d8800217 	ldw	r2,8(sp)
   854cc:	01000804 	movi	r4,32
   854d0:	b8c10c84 	addi	r3,r23,1074
   854d4:	18a3883a 	add	r17,r3,r2
   854d8:	2441b80e 	bge	r4,r17,85bbc <_dtoa_r+0xa40>
   854dc:	00c01004 	movi	r3,64
   854e0:	1c47c83a 	sub	r3,r3,r17
   854e4:	88bff804 	addi	r2,r17,-32
   854e8:	a8c6983a 	sll	r3,r21,r3
   854ec:	a084d83a 	srl	r2,r20,r2
   854f0:	1888b03a 	or	r4,r3,r2
   854f4:	008bedc0 	call	8bedc <__floatunsidf>
   854f8:	1011883a 	mov	r8,r2
   854fc:	00bf8434 	movhi	r2,65040
   85500:	01000044 	movi	r4,1
   85504:	10d3883a 	add	r9,r2,r3
   85508:	8dbef344 	addi	r22,r17,-1075
   8550c:	d9000815 	stw	r4,32(sp)
   85510:	003f6f06 	br	852d0 <_dtoa_r+0x154>
   85514:	d8001715 	stw	zero,92(sp)
   85518:	04400044 	movi	r17,1
   8551c:	00bfffc4 	movi	r2,-1
   85520:	00c00044 	movi	r3,1
   85524:	d8800e15 	stw	r2,56(sp)
   85528:	d8002615 	stw	zero,152(sp)
   8552c:	d8800f15 	stw	r2,60(sp)
   85530:	d8c00b15 	stw	r3,44(sp)
   85534:	1021883a 	mov	r16,r2
   85538:	d8801617 	ldw	r2,88(sp)
   8553c:	10001115 	stw	zero,68(r2)
   85540:	d8801617 	ldw	r2,88(sp)
   85544:	11401117 	ldw	r5,68(r2)
   85548:	1009883a 	mov	r4,r2
   8554c:	00888c40 	call	888c4 <_Balloc>
   85550:	d8c01617 	ldw	r3,88(sp)
   85554:	d8800515 	stw	r2,20(sp)
   85558:	18801015 	stw	r2,64(r3)
   8555c:	00800384 	movi	r2,14
   85560:	14006836 	bltu	r2,r16,85704 <_dtoa_r+0x588>
   85564:	8805003a 	cmpeq	r2,r17,zero
   85568:	1000661e 	bne	r2,zero,85704 <_dtoa_r+0x588>
   8556c:	d9000d17 	ldw	r4,52(sp)
   85570:	0102300e 	bge	zero,r4,85e34 <_dtoa_r+0xcb8>
   85574:	208003cc 	andi	r2,r4,15
   85578:	100490fa 	slli	r2,r2,3
   8557c:	2025d13a 	srai	r18,r4,4
   85580:	00c002b4 	movhi	r3,10
   85584:	18e54204 	addi	r3,r3,-27384
   85588:	10c5883a 	add	r2,r2,r3
   8558c:	90c0040c 	andi	r3,r18,16
   85590:	14000017 	ldw	r16,0(r2)
   85594:	14400117 	ldw	r17,4(r2)
   85598:	18036a1e 	bne	r3,zero,86344 <_dtoa_r+0x11c8>
   8559c:	05800084 	movi	r22,2
   855a0:	90001026 	beq	r18,zero,855e4 <_dtoa_r+0x468>
   855a4:	04c002b4 	movhi	r19,10
   855a8:	9ce57404 	addi	r19,r19,-27184
   855ac:	9080004c 	andi	r2,r18,1
   855b0:	1005003a 	cmpeq	r2,r2,zero
   855b4:	1000081e 	bne	r2,zero,855d8 <_dtoa_r+0x45c>
   855b8:	99800017 	ldw	r6,0(r19)
   855bc:	99c00117 	ldw	r7,4(r19)
   855c0:	880b883a 	mov	r5,r17
   855c4:	8009883a 	mov	r4,r16
   855c8:	008b4480 	call	8b448 <__muldf3>
   855cc:	1021883a 	mov	r16,r2
   855d0:	b5800044 	addi	r22,r22,1
   855d4:	1823883a 	mov	r17,r3
   855d8:	9025d07a 	srai	r18,r18,1
   855dc:	9cc00204 	addi	r19,r19,8
   855e0:	903ff21e 	bne	r18,zero,855ac <_dtoa_r+0x430>
   855e4:	a80b883a 	mov	r5,r21
   855e8:	a009883a 	mov	r4,r20
   855ec:	880f883a 	mov	r7,r17
   855f0:	800d883a 	mov	r6,r16
   855f4:	008b80c0 	call	8b80c <__divdf3>
   855f8:	1029883a 	mov	r20,r2
   855fc:	182b883a 	mov	r21,r3
   85600:	d8c00c17 	ldw	r3,48(sp)
   85604:	1805003a 	cmpeq	r2,r3,zero
   85608:	1000081e 	bne	r2,zero,8562c <_dtoa_r+0x4b0>
   8560c:	0005883a 	mov	r2,zero
   85610:	00cffc34 	movhi	r3,16368
   85614:	180f883a 	mov	r7,r3
   85618:	a009883a 	mov	r4,r20
   8561c:	a80b883a 	mov	r5,r21
   85620:	100d883a 	mov	r6,r2
   85624:	008bc840 	call	8bc84 <__ltdf2>
   85628:	1003fe16 	blt	r2,zero,86624 <_dtoa_r+0x14a8>
   8562c:	b009883a 	mov	r4,r22
   85630:	008bd0c0 	call	8bd0c <__floatsidf>
   85634:	180b883a 	mov	r5,r3
   85638:	1009883a 	mov	r4,r2
   8563c:	a00d883a 	mov	r6,r20
   85640:	a80f883a 	mov	r7,r21
   85644:	008b4480 	call	8b448 <__muldf3>
   85648:	0011883a 	mov	r8,zero
   8564c:	02500734 	movhi	r9,16412
   85650:	1009883a 	mov	r4,r2
   85654:	180b883a 	mov	r5,r3
   85658:	480f883a 	mov	r7,r9
   8565c:	400d883a 	mov	r6,r8
   85660:	008b3d40 	call	8b3d4 <__adddf3>
   85664:	d9000f17 	ldw	r4,60(sp)
   85668:	102d883a 	mov	r22,r2
   8566c:	00bf3034 	movhi	r2,64704
   85670:	18b9883a 	add	fp,r3,r2
   85674:	e02f883a 	mov	r23,fp
   85678:	20028f1e 	bne	r4,zero,860b8 <_dtoa_r+0xf3c>
   8567c:	0005883a 	mov	r2,zero
   85680:	00d00534 	movhi	r3,16404
   85684:	a009883a 	mov	r4,r20
   85688:	a80b883a 	mov	r5,r21
   8568c:	180f883a 	mov	r7,r3
   85690:	100d883a 	mov	r6,r2
   85694:	008b3540 	call	8b354 <__subdf3>
   85698:	1009883a 	mov	r4,r2
   8569c:	e00f883a 	mov	r7,fp
   856a0:	180b883a 	mov	r5,r3
   856a4:	b00d883a 	mov	r6,r22
   856a8:	1025883a 	mov	r18,r2
   856ac:	1827883a 	mov	r19,r3
   856b0:	008bb740 	call	8bb74 <__gtdf2>
   856b4:	00834f16 	blt	zero,r2,863f4 <_dtoa_r+0x1278>
   856b8:	e0e0003c 	xorhi	r3,fp,32768
   856bc:	9009883a 	mov	r4,r18
   856c0:	980b883a 	mov	r5,r19
   856c4:	180f883a 	mov	r7,r3
   856c8:	b00d883a 	mov	r6,r22
   856cc:	008bc840 	call	8bc84 <__ltdf2>
   856d0:	1000080e 	bge	r2,zero,856f4 <_dtoa_r+0x578>
   856d4:	0027883a 	mov	r19,zero
   856d8:	0025883a 	mov	r18,zero
   856dc:	d8802617 	ldw	r2,152(sp)
   856e0:	df000517 	ldw	fp,20(sp)
   856e4:	d8000615 	stw	zero,24(sp)
   856e8:	0084303a 	nor	r2,zero,r2
   856ec:	d8800d15 	stw	r2,52(sp)
   856f0:	00019b06 	br	85d60 <_dtoa_r+0xbe4>
   856f4:	d9801217 	ldw	r6,72(sp)
   856f8:	d8801317 	ldw	r2,76(sp)
   856fc:	3029883a 	mov	r20,r6
   85700:	102b883a 	mov	r21,r2
   85704:	d8c00217 	ldw	r3,8(sp)
   85708:	18008516 	blt	r3,zero,85920 <_dtoa_r+0x7a4>
   8570c:	d9000d17 	ldw	r4,52(sp)
   85710:	00800384 	movi	r2,14
   85714:	11008216 	blt	r2,r4,85920 <_dtoa_r+0x7a4>
   85718:	200490fa 	slli	r2,r4,3
   8571c:	d9802617 	ldw	r6,152(sp)
   85720:	00c002b4 	movhi	r3,10
   85724:	18e54204 	addi	r3,r3,-27384
   85728:	10c5883a 	add	r2,r2,r3
   8572c:	14800017 	ldw	r18,0(r2)
   85730:	14c00117 	ldw	r19,4(r2)
   85734:	30031e16 	blt	r6,zero,863b0 <_dtoa_r+0x1234>
   85738:	d9000517 	ldw	r4,20(sp)
   8573c:	d8c00f17 	ldw	r3,60(sp)
   85740:	a823883a 	mov	r17,r21
   85744:	a021883a 	mov	r16,r20
   85748:	192b883a 	add	r21,r3,r4
   8574c:	2039883a 	mov	fp,r4
   85750:	00000f06 	br	85790 <_dtoa_r+0x614>
   85754:	0005883a 	mov	r2,zero
   85758:	00d00934 	movhi	r3,16420
   8575c:	5009883a 	mov	r4,r10
   85760:	580b883a 	mov	r5,r11
   85764:	180f883a 	mov	r7,r3
   85768:	100d883a 	mov	r6,r2
   8576c:	008b4480 	call	8b448 <__muldf3>
   85770:	180b883a 	mov	r5,r3
   85774:	000d883a 	mov	r6,zero
   85778:	000f883a 	mov	r7,zero
   8577c:	1009883a 	mov	r4,r2
   85780:	1021883a 	mov	r16,r2
   85784:	1823883a 	mov	r17,r3
   85788:	008baec0 	call	8baec <__nedf2>
   8578c:	10004526 	beq	r2,zero,858a4 <_dtoa_r+0x728>
   85790:	900d883a 	mov	r6,r18
   85794:	980f883a 	mov	r7,r19
   85798:	8009883a 	mov	r4,r16
   8579c:	880b883a 	mov	r5,r17
   857a0:	008b80c0 	call	8b80c <__divdf3>
   857a4:	180b883a 	mov	r5,r3
   857a8:	1009883a 	mov	r4,r2
   857ac:	008be040 	call	8be04 <__fixdfsi>
   857b0:	1009883a 	mov	r4,r2
   857b4:	1029883a 	mov	r20,r2
   857b8:	008bd0c0 	call	8bd0c <__floatsidf>
   857bc:	180f883a 	mov	r7,r3
   857c0:	9009883a 	mov	r4,r18
   857c4:	980b883a 	mov	r5,r19
   857c8:	100d883a 	mov	r6,r2
   857cc:	008b4480 	call	8b448 <__muldf3>
   857d0:	180f883a 	mov	r7,r3
   857d4:	880b883a 	mov	r5,r17
   857d8:	8009883a 	mov	r4,r16
   857dc:	100d883a 	mov	r6,r2
   857e0:	008b3540 	call	8b354 <__subdf3>
   857e4:	1015883a 	mov	r10,r2
   857e8:	a0800c04 	addi	r2,r20,48
   857ec:	e0800005 	stb	r2,0(fp)
   857f0:	e7000044 	addi	fp,fp,1
   857f4:	1817883a 	mov	r11,r3
   857f8:	e57fd61e 	bne	fp,r21,85754 <_dtoa_r+0x5d8>
   857fc:	500d883a 	mov	r6,r10
   85800:	180f883a 	mov	r7,r3
   85804:	5009883a 	mov	r4,r10
   85808:	180b883a 	mov	r5,r3
   8580c:	008b3d40 	call	8b3d4 <__adddf3>
   85810:	100d883a 	mov	r6,r2
   85814:	9009883a 	mov	r4,r18
   85818:	980b883a 	mov	r5,r19
   8581c:	180f883a 	mov	r7,r3
   85820:	1021883a 	mov	r16,r2
   85824:	1823883a 	mov	r17,r3
   85828:	008bc840 	call	8bc84 <__ltdf2>
   8582c:	10000816 	blt	r2,zero,85850 <_dtoa_r+0x6d4>
   85830:	980b883a 	mov	r5,r19
   85834:	800d883a 	mov	r6,r16
   85838:	880f883a 	mov	r7,r17
   8583c:	9009883a 	mov	r4,r18
   85840:	008ba640 	call	8ba64 <__eqdf2>
   85844:	1000171e 	bne	r2,zero,858a4 <_dtoa_r+0x728>
   85848:	a080004c 	andi	r2,r20,1
   8584c:	10001526 	beq	r2,zero,858a4 <_dtoa_r+0x728>
   85850:	d8800d17 	ldw	r2,52(sp)
   85854:	d8800415 	stw	r2,16(sp)
   85858:	e009883a 	mov	r4,fp
   8585c:	213fffc4 	addi	r4,r4,-1
   85860:	20c00007 	ldb	r3,0(r4)
   85864:	00800e44 	movi	r2,57
   85868:	1880081e 	bne	r3,r2,8588c <_dtoa_r+0x710>
   8586c:	d8800517 	ldw	r2,20(sp)
   85870:	113ffa1e 	bne	r2,r4,8585c <_dtoa_r+0x6e0>
   85874:	d8c00417 	ldw	r3,16(sp)
   85878:	d9800517 	ldw	r6,20(sp)
   8587c:	00800c04 	movi	r2,48
   85880:	18c00044 	addi	r3,r3,1
   85884:	d8c00415 	stw	r3,16(sp)
   85888:	30800005 	stb	r2,0(r6)
   8588c:	20800003 	ldbu	r2,0(r4)
   85890:	d8c00417 	ldw	r3,16(sp)
   85894:	27000044 	addi	fp,r4,1
   85898:	10800044 	addi	r2,r2,1
   8589c:	d8c00d15 	stw	r3,52(sp)
   858a0:	20800005 	stb	r2,0(r4)
   858a4:	d9001617 	ldw	r4,88(sp)
   858a8:	d9400717 	ldw	r5,28(sp)
   858ac:	00883440 	call	88344 <_Bfree>
   858b0:	e0000005 	stb	zero,0(fp)
   858b4:	d9800d17 	ldw	r6,52(sp)
   858b8:	d8c02717 	ldw	r3,156(sp)
   858bc:	d9002917 	ldw	r4,164(sp)
   858c0:	30800044 	addi	r2,r6,1
   858c4:	18800015 	stw	r2,0(r3)
   858c8:	20029c26 	beq	r4,zero,8633c <_dtoa_r+0x11c0>
   858cc:	d8c00517 	ldw	r3,20(sp)
   858d0:	27000015 	stw	fp,0(r4)
   858d4:	003e5d06 	br	8524c <_dtoa_r+0xd0>
   858d8:	d9800d17 	ldw	r6,52(sp)
   858dc:	00c002b4 	movhi	r3,10
   858e0:	18e54204 	addi	r3,r3,-27384
   858e4:	d9001217 	ldw	r4,72(sp)
   858e8:	300490fa 	slli	r2,r6,3
   858ec:	d9401317 	ldw	r5,76(sp)
   858f0:	10c5883a 	add	r2,r2,r3
   858f4:	12000017 	ldw	r8,0(r2)
   858f8:	12400117 	ldw	r9,4(r2)
   858fc:	400d883a 	mov	r6,r8
   85900:	480f883a 	mov	r7,r9
   85904:	008bc840 	call	8bc84 <__ltdf2>
   85908:	1000030e 	bge	r2,zero,85918 <_dtoa_r+0x79c>
   8590c:	d8800d17 	ldw	r2,52(sp)
   85910:	10bfffc4 	addi	r2,r2,-1
   85914:	d8800d15 	stw	r2,52(sp)
   85918:	d8000c15 	stw	zero,48(sp)
   8591c:	003ea806 	br	853c0 <_dtoa_r+0x244>
   85920:	d9000b17 	ldw	r4,44(sp)
   85924:	202cc03a 	cmpne	r22,r4,zero
   85928:	b000c71e 	bne	r22,zero,85c48 <_dtoa_r+0xacc>
   8592c:	dc001117 	ldw	r16,68(sp)
   85930:	dc801017 	ldw	r18,64(sp)
   85934:	0027883a 	mov	r19,zero
   85938:	04000b0e 	bge	zero,r16,85968 <_dtoa_r+0x7ec>
   8593c:	d8c00a17 	ldw	r3,40(sp)
   85940:	00c0090e 	bge	zero,r3,85968 <_dtoa_r+0x7ec>
   85944:	8005883a 	mov	r2,r16
   85948:	1c011316 	blt	r3,r16,85d98 <_dtoa_r+0xc1c>
   8594c:	d9000a17 	ldw	r4,40(sp)
   85950:	d9801117 	ldw	r6,68(sp)
   85954:	80a1c83a 	sub	r16,r16,r2
   85958:	2089c83a 	sub	r4,r4,r2
   8595c:	308dc83a 	sub	r6,r6,r2
   85960:	d9000a15 	stw	r4,40(sp)
   85964:	d9801115 	stw	r6,68(sp)
   85968:	d8801017 	ldw	r2,64(sp)
   8596c:	0080150e 	bge	zero,r2,859c4 <_dtoa_r+0x848>
   85970:	d8c00b17 	ldw	r3,44(sp)
   85974:	1805003a 	cmpeq	r2,r3,zero
   85978:	1001c91e 	bne	r2,zero,860a0 <_dtoa_r+0xf24>
   8597c:	04800e0e 	bge	zero,r18,859b8 <_dtoa_r+0x83c>
   85980:	d9001617 	ldw	r4,88(sp)
   85984:	980b883a 	mov	r5,r19
   85988:	900d883a 	mov	r6,r18
   8598c:	00891900 	call	89190 <__pow5mult>
   85990:	d9001617 	ldw	r4,88(sp)
   85994:	d9800717 	ldw	r6,28(sp)
   85998:	100b883a 	mov	r5,r2
   8599c:	1027883a 	mov	r19,r2
   859a0:	0088dd40 	call	88dd4 <__multiply>
   859a4:	d9001617 	ldw	r4,88(sp)
   859a8:	d9400717 	ldw	r5,28(sp)
   859ac:	1023883a 	mov	r17,r2
   859b0:	00883440 	call	88344 <_Bfree>
   859b4:	dc400715 	stw	r17,28(sp)
   859b8:	d9001017 	ldw	r4,64(sp)
   859bc:	248dc83a 	sub	r6,r4,r18
   859c0:	30010e1e 	bne	r6,zero,85dfc <_dtoa_r+0xc80>
   859c4:	d9001617 	ldw	r4,88(sp)
   859c8:	04400044 	movi	r17,1
   859cc:	880b883a 	mov	r5,r17
   859d0:	00890280 	call	89028 <__i2b>
   859d4:	d9800917 	ldw	r6,36(sp)
   859d8:	1025883a 	mov	r18,r2
   859dc:	0180040e 	bge	zero,r6,859f0 <_dtoa_r+0x874>
   859e0:	d9001617 	ldw	r4,88(sp)
   859e4:	100b883a 	mov	r5,r2
   859e8:	00891900 	call	89190 <__pow5mult>
   859ec:	1025883a 	mov	r18,r2
   859f0:	d8801717 	ldw	r2,92(sp)
   859f4:	8880f30e 	bge	r17,r2,85dc4 <_dtoa_r+0xc48>
   859f8:	0023883a 	mov	r17,zero
   859fc:	d9800917 	ldw	r6,36(sp)
   85a00:	30019e1e 	bne	r6,zero,8607c <_dtoa_r+0xf00>
   85a04:	00c00044 	movi	r3,1
   85a08:	d9000a17 	ldw	r4,40(sp)
   85a0c:	20c5883a 	add	r2,r4,r3
   85a10:	10c007cc 	andi	r3,r2,31
   85a14:	1800841e 	bne	r3,zero,85c28 <_dtoa_r+0xaac>
   85a18:	00800704 	movi	r2,28
   85a1c:	d9000a17 	ldw	r4,40(sp)
   85a20:	d9801117 	ldw	r6,68(sp)
   85a24:	80a1883a 	add	r16,r16,r2
   85a28:	2089883a 	add	r4,r4,r2
   85a2c:	308d883a 	add	r6,r6,r2
   85a30:	d9000a15 	stw	r4,40(sp)
   85a34:	d9801115 	stw	r6,68(sp)
   85a38:	d8801117 	ldw	r2,68(sp)
   85a3c:	0080050e 	bge	zero,r2,85a54 <_dtoa_r+0x8d8>
   85a40:	d9400717 	ldw	r5,28(sp)
   85a44:	d9001617 	ldw	r4,88(sp)
   85a48:	100d883a 	mov	r6,r2
   85a4c:	0088c880 	call	88c88 <__lshift>
   85a50:	d8800715 	stw	r2,28(sp)
   85a54:	d8c00a17 	ldw	r3,40(sp)
   85a58:	00c0050e 	bge	zero,r3,85a70 <_dtoa_r+0x8f4>
   85a5c:	d9001617 	ldw	r4,88(sp)
   85a60:	900b883a 	mov	r5,r18
   85a64:	180d883a 	mov	r6,r3
   85a68:	0088c880 	call	88c88 <__lshift>
   85a6c:	1025883a 	mov	r18,r2
   85a70:	d9000c17 	ldw	r4,48(sp)
   85a74:	2005003a 	cmpeq	r2,r4,zero
   85a78:	10016f26 	beq	r2,zero,86038 <_dtoa_r+0xebc>
   85a7c:	d9000f17 	ldw	r4,60(sp)
   85a80:	0102170e 	bge	zero,r4,862e0 <_dtoa_r+0x1164>
   85a84:	d9800b17 	ldw	r6,44(sp)
   85a88:	3005003a 	cmpeq	r2,r6,zero
   85a8c:	1000881e 	bne	r2,zero,85cb0 <_dtoa_r+0xb34>
   85a90:	0400050e 	bge	zero,r16,85aa8 <_dtoa_r+0x92c>
   85a94:	d9001617 	ldw	r4,88(sp)
   85a98:	980b883a 	mov	r5,r19
   85a9c:	800d883a 	mov	r6,r16
   85aa0:	0088c880 	call	88c88 <__lshift>
   85aa4:	1027883a 	mov	r19,r2
   85aa8:	8804c03a 	cmpne	r2,r17,zero
   85aac:	1002541e 	bne	r2,zero,86400 <_dtoa_r+0x1284>
   85ab0:	980b883a 	mov	r5,r19
   85ab4:	dd800517 	ldw	r22,20(sp)
   85ab8:	dcc00615 	stw	r19,24(sp)
   85abc:	a700004c 	andi	fp,r20,1
   85ac0:	2827883a 	mov	r19,r5
   85ac4:	d9000717 	ldw	r4,28(sp)
   85ac8:	900b883a 	mov	r5,r18
   85acc:	0084f380 	call	84f38 <quorem>
   85ad0:	d9000717 	ldw	r4,28(sp)
   85ad4:	d9400617 	ldw	r5,24(sp)
   85ad8:	1023883a 	mov	r17,r2
   85adc:	8dc00c04 	addi	r23,r17,48
   85ae0:	00884a00 	call	884a0 <__mcmp>
   85ae4:	d9001617 	ldw	r4,88(sp)
   85ae8:	900b883a 	mov	r5,r18
   85aec:	980d883a 	mov	r6,r19
   85af0:	1029883a 	mov	r20,r2
   85af4:	0088afc0 	call	88afc <__mdiff>
   85af8:	102b883a 	mov	r21,r2
   85afc:	10800317 	ldw	r2,12(r2)
   85b00:	1001281e 	bne	r2,zero,85fa4 <_dtoa_r+0xe28>
   85b04:	d9000717 	ldw	r4,28(sp)
   85b08:	a80b883a 	mov	r5,r21
   85b0c:	00884a00 	call	884a0 <__mcmp>
   85b10:	d9001617 	ldw	r4,88(sp)
   85b14:	1021883a 	mov	r16,r2
   85b18:	a80b883a 	mov	r5,r21
   85b1c:	00883440 	call	88344 <_Bfree>
   85b20:	8000041e 	bne	r16,zero,85b34 <_dtoa_r+0x9b8>
   85b24:	d8801717 	ldw	r2,92(sp)
   85b28:	1000021e 	bne	r2,zero,85b34 <_dtoa_r+0x9b8>
   85b2c:	e004c03a 	cmpne	r2,fp,zero
   85b30:	10011726 	beq	r2,zero,85f90 <_dtoa_r+0xe14>
   85b34:	a0010616 	blt	r20,zero,85f50 <_dtoa_r+0xdd4>
   85b38:	a000041e 	bne	r20,zero,85b4c <_dtoa_r+0x9d0>
   85b3c:	d8c01717 	ldw	r3,92(sp)
   85b40:	1800021e 	bne	r3,zero,85b4c <_dtoa_r+0x9d0>
   85b44:	e004c03a 	cmpne	r2,fp,zero
   85b48:	10010126 	beq	r2,zero,85f50 <_dtoa_r+0xdd4>
   85b4c:	04023d16 	blt	zero,r16,86444 <_dtoa_r+0x12c8>
   85b50:	b5c00005 	stb	r23,0(r22)
   85b54:	d9800517 	ldw	r6,20(sp)
   85b58:	d9000f17 	ldw	r4,60(sp)
   85b5c:	b5800044 	addi	r22,r22,1
   85b60:	3105883a 	add	r2,r6,r4
   85b64:	b0806526 	beq	r22,r2,85cfc <_dtoa_r+0xb80>
   85b68:	d9400717 	ldw	r5,28(sp)
   85b6c:	d9001617 	ldw	r4,88(sp)
   85b70:	01800284 	movi	r6,10
   85b74:	000f883a 	mov	r7,zero
   85b78:	00890640 	call	89064 <__multadd>
   85b7c:	d8800715 	stw	r2,28(sp)
   85b80:	d8800617 	ldw	r2,24(sp)
   85b84:	14c10c26 	beq	r2,r19,85fb8 <_dtoa_r+0xe3c>
   85b88:	d9400617 	ldw	r5,24(sp)
   85b8c:	d9001617 	ldw	r4,88(sp)
   85b90:	01800284 	movi	r6,10
   85b94:	000f883a 	mov	r7,zero
   85b98:	00890640 	call	89064 <__multadd>
   85b9c:	d9001617 	ldw	r4,88(sp)
   85ba0:	980b883a 	mov	r5,r19
   85ba4:	01800284 	movi	r6,10
   85ba8:	000f883a 	mov	r7,zero
   85bac:	d8800615 	stw	r2,24(sp)
   85bb0:	00890640 	call	89064 <__multadd>
   85bb4:	1027883a 	mov	r19,r2
   85bb8:	003fc206 	br	85ac4 <_dtoa_r+0x948>
   85bbc:	2445c83a 	sub	r2,r4,r17
   85bc0:	a088983a 	sll	r4,r20,r2
   85bc4:	003e4b06 	br	854f4 <_dtoa_r+0x378>
   85bc8:	01bfffc4 	movi	r6,-1
   85bcc:	00800044 	movi	r2,1
   85bd0:	d9800e15 	stw	r6,56(sp)
   85bd4:	d9800f15 	stw	r6,60(sp)
   85bd8:	d8800b15 	stw	r2,44(sp)
   85bdc:	d8c01617 	ldw	r3,88(sp)
   85be0:	008005c4 	movi	r2,23
   85be4:	18001115 	stw	zero,68(r3)
   85be8:	1580082e 	bgeu	r2,r22,85c0c <_dtoa_r+0xa90>
   85bec:	00c00104 	movi	r3,4
   85bf0:	0009883a 	mov	r4,zero
   85bf4:	18c7883a 	add	r3,r3,r3
   85bf8:	18800504 	addi	r2,r3,20
   85bfc:	21000044 	addi	r4,r4,1
   85c00:	b0bffc2e 	bgeu	r22,r2,85bf4 <_dtoa_r+0xa78>
   85c04:	d9801617 	ldw	r6,88(sp)
   85c08:	31001115 	stw	r4,68(r6)
   85c0c:	dc000f17 	ldw	r16,60(sp)
   85c10:	003e4b06 	br	85540 <_dtoa_r+0x3c4>
   85c14:	d9801717 	ldw	r6,92(sp)
   85c18:	0023883a 	mov	r17,zero
   85c1c:	31bfff04 	addi	r6,r6,-4
   85c20:	d9801715 	stw	r6,92(sp)
   85c24:	003df806 	br	85408 <_dtoa_r+0x28c>
   85c28:	00800804 	movi	r2,32
   85c2c:	10c9c83a 	sub	r4,r2,r3
   85c30:	00c00104 	movi	r3,4
   85c34:	19005a16 	blt	r3,r4,85da0 <_dtoa_r+0xc24>
   85c38:	008000c4 	movi	r2,3
   85c3c:	113f7e16 	blt	r2,r4,85a38 <_dtoa_r+0x8bc>
   85c40:	20800704 	addi	r2,r4,28
   85c44:	003f7506 	br	85a1c <_dtoa_r+0x8a0>
   85c48:	d9801717 	ldw	r6,92(sp)
   85c4c:	00800044 	movi	r2,1
   85c50:	1180a10e 	bge	r2,r6,85ed8 <_dtoa_r+0xd5c>
   85c54:	d9800f17 	ldw	r6,60(sp)
   85c58:	d8c01017 	ldw	r3,64(sp)
   85c5c:	30bfffc4 	addi	r2,r6,-1
   85c60:	1881c616 	blt	r3,r2,8637c <_dtoa_r+0x1200>
   85c64:	18a5c83a 	sub	r18,r3,r2
   85c68:	d8800f17 	ldw	r2,60(sp)
   85c6c:	10026216 	blt	r2,zero,865f8 <_dtoa_r+0x147c>
   85c70:	dc001117 	ldw	r16,68(sp)
   85c74:	1007883a 	mov	r3,r2
   85c78:	d9800a17 	ldw	r6,40(sp)
   85c7c:	d8801117 	ldw	r2,68(sp)
   85c80:	d9001617 	ldw	r4,88(sp)
   85c84:	30cd883a 	add	r6,r6,r3
   85c88:	10c5883a 	add	r2,r2,r3
   85c8c:	01400044 	movi	r5,1
   85c90:	d9800a15 	stw	r6,40(sp)
   85c94:	d8801115 	stw	r2,68(sp)
   85c98:	00890280 	call	89028 <__i2b>
   85c9c:	1027883a 	mov	r19,r2
   85ca0:	003f2506 	br	85938 <_dtoa_r+0x7bc>
   85ca4:	00c002b4 	movhi	r3,10
   85ca8:	18e52504 	addi	r3,r3,-27500
   85cac:	003d6706 	br	8524c <_dtoa_r+0xd0>
   85cb0:	dd800517 	ldw	r22,20(sp)
   85cb4:	04000044 	movi	r16,1
   85cb8:	00000706 	br	85cd8 <_dtoa_r+0xb5c>
   85cbc:	d9400717 	ldw	r5,28(sp)
   85cc0:	d9001617 	ldw	r4,88(sp)
   85cc4:	01800284 	movi	r6,10
   85cc8:	000f883a 	mov	r7,zero
   85ccc:	00890640 	call	89064 <__multadd>
   85cd0:	d8800715 	stw	r2,28(sp)
   85cd4:	84000044 	addi	r16,r16,1
   85cd8:	d9000717 	ldw	r4,28(sp)
   85cdc:	900b883a 	mov	r5,r18
   85ce0:	0084f380 	call	84f38 <quorem>
   85ce4:	15c00c04 	addi	r23,r2,48
   85ce8:	b5c00005 	stb	r23,0(r22)
   85cec:	d8c00f17 	ldw	r3,60(sp)
   85cf0:	b5800044 	addi	r22,r22,1
   85cf4:	80fff116 	blt	r16,r3,85cbc <_dtoa_r+0xb40>
   85cf8:	d8000615 	stw	zero,24(sp)
   85cfc:	d9400717 	ldw	r5,28(sp)
   85d00:	d9001617 	ldw	r4,88(sp)
   85d04:	01800044 	movi	r6,1
   85d08:	0088c880 	call	88c88 <__lshift>
   85d0c:	1009883a 	mov	r4,r2
   85d10:	900b883a 	mov	r5,r18
   85d14:	d8800715 	stw	r2,28(sp)
   85d18:	00884a00 	call	884a0 <__mcmp>
   85d1c:	00803c0e 	bge	zero,r2,85e10 <_dtoa_r+0xc94>
   85d20:	b009883a 	mov	r4,r22
   85d24:	213fffc4 	addi	r4,r4,-1
   85d28:	21400003 	ldbu	r5,0(r4)
   85d2c:	00800e44 	movi	r2,57
   85d30:	28c03fcc 	andi	r3,r5,255
   85d34:	18c0201c 	xori	r3,r3,128
   85d38:	18ffe004 	addi	r3,r3,-128
   85d3c:	1881981e 	bne	r3,r2,863a0 <_dtoa_r+0x1224>
   85d40:	d9800517 	ldw	r6,20(sp)
   85d44:	21bff71e 	bne	r4,r6,85d24 <_dtoa_r+0xba8>
   85d48:	d8800d17 	ldw	r2,52(sp)
   85d4c:	37000044 	addi	fp,r6,1
   85d50:	10800044 	addi	r2,r2,1
   85d54:	d8800d15 	stw	r2,52(sp)
   85d58:	00800c44 	movi	r2,49
   85d5c:	30800005 	stb	r2,0(r6)
   85d60:	d9001617 	ldw	r4,88(sp)
   85d64:	900b883a 	mov	r5,r18
   85d68:	00883440 	call	88344 <_Bfree>
   85d6c:	983ecd26 	beq	r19,zero,858a4 <_dtoa_r+0x728>
   85d70:	d8c00617 	ldw	r3,24(sp)
   85d74:	18000426 	beq	r3,zero,85d88 <_dtoa_r+0xc0c>
   85d78:	1cc00326 	beq	r3,r19,85d88 <_dtoa_r+0xc0c>
   85d7c:	d9001617 	ldw	r4,88(sp)
   85d80:	180b883a 	mov	r5,r3
   85d84:	00883440 	call	88344 <_Bfree>
   85d88:	d9001617 	ldw	r4,88(sp)
   85d8c:	980b883a 	mov	r5,r19
   85d90:	00883440 	call	88344 <_Bfree>
   85d94:	003ec306 	br	858a4 <_dtoa_r+0x728>
   85d98:	1805883a 	mov	r2,r3
   85d9c:	003eeb06 	br	8594c <_dtoa_r+0x7d0>
   85da0:	d9800a17 	ldw	r6,40(sp)
   85da4:	d8c01117 	ldw	r3,68(sp)
   85da8:	20bfff04 	addi	r2,r4,-4
   85dac:	308d883a 	add	r6,r6,r2
   85db0:	1887883a 	add	r3,r3,r2
   85db4:	80a1883a 	add	r16,r16,r2
   85db8:	d9800a15 	stw	r6,40(sp)
   85dbc:	d8c01115 	stw	r3,68(sp)
   85dc0:	003f1d06 	br	85a38 <_dtoa_r+0x8bc>
   85dc4:	a03f0c1e 	bne	r20,zero,859f8 <_dtoa_r+0x87c>
   85dc8:	00800434 	movhi	r2,16
   85dcc:	10bfffc4 	addi	r2,r2,-1
   85dd0:	a884703a 	and	r2,r21,r2
   85dd4:	103f081e 	bne	r2,zero,859f8 <_dtoa_r+0x87c>
   85dd8:	a89ffc2c 	andhi	r2,r21,32752
   85ddc:	103f0626 	beq	r2,zero,859f8 <_dtoa_r+0x87c>
   85de0:	d8c01117 	ldw	r3,68(sp)
   85de4:	d9000a17 	ldw	r4,40(sp)
   85de8:	18c00044 	addi	r3,r3,1
   85dec:	21000044 	addi	r4,r4,1
   85df0:	d8c01115 	stw	r3,68(sp)
   85df4:	d9000a15 	stw	r4,40(sp)
   85df8:	003f0006 	br	859fc <_dtoa_r+0x880>
   85dfc:	d9400717 	ldw	r5,28(sp)
   85e00:	d9001617 	ldw	r4,88(sp)
   85e04:	00891900 	call	89190 <__pow5mult>
   85e08:	d8800715 	stw	r2,28(sp)
   85e0c:	003eed06 	br	859c4 <_dtoa_r+0x848>
   85e10:	1000021e 	bne	r2,zero,85e1c <_dtoa_r+0xca0>
   85e14:	b880004c 	andi	r2,r23,1
   85e18:	103fc11e 	bne	r2,zero,85d20 <_dtoa_r+0xba4>
   85e1c:	b5bfffc4 	addi	r22,r22,-1
   85e20:	b0c00007 	ldb	r3,0(r22)
   85e24:	00800c04 	movi	r2,48
   85e28:	18bffc26 	beq	r3,r2,85e1c <_dtoa_r+0xca0>
   85e2c:	b7000044 	addi	fp,r22,1
   85e30:	003fcb06 	br	85d60 <_dtoa_r+0xbe4>
   85e34:	d9800d17 	ldw	r6,52(sp)
   85e38:	018fc83a 	sub	r7,zero,r6
   85e3c:	3801f726 	beq	r7,zero,8661c <_dtoa_r+0x14a0>
   85e40:	398003cc 	andi	r6,r7,15
   85e44:	300c90fa 	slli	r6,r6,3
   85e48:	014002b4 	movhi	r5,10
   85e4c:	29654204 	addi	r5,r5,-27384
   85e50:	d9001217 	ldw	r4,72(sp)
   85e54:	314d883a 	add	r6,r6,r5
   85e58:	30c00117 	ldw	r3,4(r6)
   85e5c:	30800017 	ldw	r2,0(r6)
   85e60:	d9401317 	ldw	r5,76(sp)
   85e64:	3821d13a 	srai	r16,r7,4
   85e68:	100d883a 	mov	r6,r2
   85e6c:	180f883a 	mov	r7,r3
   85e70:	008b4480 	call	8b448 <__muldf3>
   85e74:	1011883a 	mov	r8,r2
   85e78:	1813883a 	mov	r9,r3
   85e7c:	1029883a 	mov	r20,r2
   85e80:	182b883a 	mov	r21,r3
   85e84:	8001e526 	beq	r16,zero,8661c <_dtoa_r+0x14a0>
   85e88:	05800084 	movi	r22,2
   85e8c:	044002b4 	movhi	r17,10
   85e90:	8c657404 	addi	r17,r17,-27184
   85e94:	8080004c 	andi	r2,r16,1
   85e98:	1005003a 	cmpeq	r2,r2,zero
   85e9c:	1000081e 	bne	r2,zero,85ec0 <_dtoa_r+0xd44>
   85ea0:	89800017 	ldw	r6,0(r17)
   85ea4:	89c00117 	ldw	r7,4(r17)
   85ea8:	480b883a 	mov	r5,r9
   85eac:	4009883a 	mov	r4,r8
   85eb0:	008b4480 	call	8b448 <__muldf3>
   85eb4:	1011883a 	mov	r8,r2
   85eb8:	b5800044 	addi	r22,r22,1
   85ebc:	1813883a 	mov	r9,r3
   85ec0:	8021d07a 	srai	r16,r16,1
   85ec4:	8c400204 	addi	r17,r17,8
   85ec8:	803ff21e 	bne	r16,zero,85e94 <_dtoa_r+0xd18>
   85ecc:	4029883a 	mov	r20,r8
   85ed0:	482b883a 	mov	r21,r9
   85ed4:	003dca06 	br	85600 <_dtoa_r+0x484>
   85ed8:	d9000817 	ldw	r4,32(sp)
   85edc:	2005003a 	cmpeq	r2,r4,zero
   85ee0:	1001f61e 	bne	r2,zero,866bc <_dtoa_r+0x1540>
   85ee4:	dc001117 	ldw	r16,68(sp)
   85ee8:	dc801017 	ldw	r18,64(sp)
   85eec:	18c10cc4 	addi	r3,r3,1075
   85ef0:	003f6106 	br	85c78 <_dtoa_r+0xafc>
   85ef4:	d8000b15 	stw	zero,44(sp)
   85ef8:	d9802617 	ldw	r6,152(sp)
   85efc:	d8c00d17 	ldw	r3,52(sp)
   85f00:	30800044 	addi	r2,r6,1
   85f04:	18ad883a 	add	r22,r3,r2
   85f08:	b13fffc4 	addi	r4,r22,-1
   85f0c:	d9000e15 	stw	r4,56(sp)
   85f10:	0581f60e 	bge	zero,r22,866ec <_dtoa_r+0x1570>
   85f14:	dd800f15 	stw	r22,60(sp)
   85f18:	003f3006 	br	85bdc <_dtoa_r+0xa60>
   85f1c:	d8000b15 	stw	zero,44(sp)
   85f20:	d9002617 	ldw	r4,152(sp)
   85f24:	0101eb0e 	bge	zero,r4,866d4 <_dtoa_r+0x1558>
   85f28:	202d883a 	mov	r22,r4
   85f2c:	d9000e15 	stw	r4,56(sp)
   85f30:	d9000f15 	stw	r4,60(sp)
   85f34:	003f2906 	br	85bdc <_dtoa_r+0xa60>
   85f38:	01800044 	movi	r6,1
   85f3c:	d9800b15 	stw	r6,44(sp)
   85f40:	003ff706 	br	85f20 <_dtoa_r+0xda4>
   85f44:	01000044 	movi	r4,1
   85f48:	d9000b15 	stw	r4,44(sp)
   85f4c:	003fea06 	br	85ef8 <_dtoa_r+0xd7c>
   85f50:	04000c0e 	bge	zero,r16,85f84 <_dtoa_r+0xe08>
   85f54:	d9400717 	ldw	r5,28(sp)
   85f58:	d9001617 	ldw	r4,88(sp)
   85f5c:	01800044 	movi	r6,1
   85f60:	0088c880 	call	88c88 <__lshift>
   85f64:	1009883a 	mov	r4,r2
   85f68:	900b883a 	mov	r5,r18
   85f6c:	d8800715 	stw	r2,28(sp)
   85f70:	00884a00 	call	884a0 <__mcmp>
   85f74:	0081e00e 	bge	zero,r2,866f8 <_dtoa_r+0x157c>
   85f78:	bdc00044 	addi	r23,r23,1
   85f7c:	00800e84 	movi	r2,58
   85f80:	b881a226 	beq	r23,r2,8660c <_dtoa_r+0x1490>
   85f84:	b7000044 	addi	fp,r22,1
   85f88:	b5c00005 	stb	r23,0(r22)
   85f8c:	003f7406 	br	85d60 <_dtoa_r+0xbe4>
   85f90:	00800e44 	movi	r2,57
   85f94:	b8819d26 	beq	r23,r2,8660c <_dtoa_r+0x1490>
   85f98:	053ffa0e 	bge	zero,r20,85f84 <_dtoa_r+0xe08>
   85f9c:	8dc00c44 	addi	r23,r17,49
   85fa0:	003ff806 	br	85f84 <_dtoa_r+0xe08>
   85fa4:	d9001617 	ldw	r4,88(sp)
   85fa8:	a80b883a 	mov	r5,r21
   85fac:	04000044 	movi	r16,1
   85fb0:	00883440 	call	88344 <_Bfree>
   85fb4:	003edf06 	br	85b34 <_dtoa_r+0x9b8>
   85fb8:	d9001617 	ldw	r4,88(sp)
   85fbc:	980b883a 	mov	r5,r19
   85fc0:	01800284 	movi	r6,10
   85fc4:	000f883a 	mov	r7,zero
   85fc8:	00890640 	call	89064 <__multadd>
   85fcc:	1027883a 	mov	r19,r2
   85fd0:	d8800615 	stw	r2,24(sp)
   85fd4:	003ebb06 	br	85ac4 <_dtoa_r+0x948>
   85fd8:	d9801117 	ldw	r6,68(sp)
   85fdc:	d8800d17 	ldw	r2,52(sp)
   85fe0:	d8000915 	stw	zero,36(sp)
   85fe4:	308dc83a 	sub	r6,r6,r2
   85fe8:	0087c83a 	sub	r3,zero,r2
   85fec:	d9801115 	stw	r6,68(sp)
   85ff0:	d8c01015 	stw	r3,64(sp)
   85ff4:	003cfe06 	br	853f0 <_dtoa_r+0x274>
   85ff8:	018dc83a 	sub	r6,zero,r6
   85ffc:	d9801115 	stw	r6,68(sp)
   86000:	d8000a15 	stw	zero,40(sp)
   86004:	003cf306 	br	853d4 <_dtoa_r+0x258>
   86008:	d9000d17 	ldw	r4,52(sp)
   8600c:	008bd0c0 	call	8bd0c <__floatsidf>
   86010:	880b883a 	mov	r5,r17
   86014:	8009883a 	mov	r4,r16
   86018:	180f883a 	mov	r7,r3
   8601c:	100d883a 	mov	r6,r2
   86020:	008baec0 	call	8baec <__nedf2>
   86024:	103ce126 	beq	r2,zero,853ac <_dtoa_r+0x230>
   86028:	d9800d17 	ldw	r6,52(sp)
   8602c:	31bfffc4 	addi	r6,r6,-1
   86030:	d9800d15 	stw	r6,52(sp)
   86034:	003cdd06 	br	853ac <_dtoa_r+0x230>
   86038:	d9000717 	ldw	r4,28(sp)
   8603c:	900b883a 	mov	r5,r18
   86040:	00884a00 	call	884a0 <__mcmp>
   86044:	103e8d0e 	bge	r2,zero,85a7c <_dtoa_r+0x900>
   86048:	d9400717 	ldw	r5,28(sp)
   8604c:	d9001617 	ldw	r4,88(sp)
   86050:	01800284 	movi	r6,10
   86054:	000f883a 	mov	r7,zero
   86058:	00890640 	call	89064 <__multadd>
   8605c:	d9800d17 	ldw	r6,52(sp)
   86060:	d8800715 	stw	r2,28(sp)
   86064:	31bfffc4 	addi	r6,r6,-1
   86068:	d9800d15 	stw	r6,52(sp)
   8606c:	b001a71e 	bne	r22,zero,8670c <_dtoa_r+0x1590>
   86070:	d8800e17 	ldw	r2,56(sp)
   86074:	d8800f15 	stw	r2,60(sp)
   86078:	003e8006 	br	85a7c <_dtoa_r+0x900>
   8607c:	90800417 	ldw	r2,16(r18)
   86080:	1085883a 	add	r2,r2,r2
   86084:	1085883a 	add	r2,r2,r2
   86088:	1485883a 	add	r2,r2,r18
   8608c:	11000417 	ldw	r4,16(r2)
   86090:	008836c0 	call	8836c <__hi0bits>
   86094:	00c00804 	movi	r3,32
   86098:	1887c83a 	sub	r3,r3,r2
   8609c:	003e5a06 	br	85a08 <_dtoa_r+0x88c>
   860a0:	d9400717 	ldw	r5,28(sp)
   860a4:	d9801017 	ldw	r6,64(sp)
   860a8:	d9001617 	ldw	r4,88(sp)
   860ac:	00891900 	call	89190 <__pow5mult>
   860b0:	d8800715 	stw	r2,28(sp)
   860b4:	003e4306 	br	859c4 <_dtoa_r+0x848>
   860b8:	d9800f17 	ldw	r6,60(sp)
   860bc:	d8800d17 	ldw	r2,52(sp)
   860c0:	d9800315 	stw	r6,12(sp)
   860c4:	d8800415 	stw	r2,16(sp)
   860c8:	d8c00b17 	ldw	r3,44(sp)
   860cc:	1805003a 	cmpeq	r2,r3,zero
   860d0:	1000e21e 	bne	r2,zero,8645c <_dtoa_r+0x12e0>
   860d4:	d9000317 	ldw	r4,12(sp)
   860d8:	0005883a 	mov	r2,zero
   860dc:	00cff834 	movhi	r3,16352
   860e0:	200c90fa 	slli	r6,r4,3
   860e4:	010002b4 	movhi	r4,10
   860e8:	21254204 	addi	r4,r4,-27384
   860ec:	180b883a 	mov	r5,r3
   860f0:	310d883a 	add	r6,r6,r4
   860f4:	327fff17 	ldw	r9,-4(r6)
   860f8:	323ffe17 	ldw	r8,-8(r6)
   860fc:	1009883a 	mov	r4,r2
   86100:	480f883a 	mov	r7,r9
   86104:	400d883a 	mov	r6,r8
   86108:	008b80c0 	call	8b80c <__divdf3>
   8610c:	180b883a 	mov	r5,r3
   86110:	b00d883a 	mov	r6,r22
   86114:	b80f883a 	mov	r7,r23
   86118:	1009883a 	mov	r4,r2
   8611c:	008b3540 	call	8b354 <__subdf3>
   86120:	a80b883a 	mov	r5,r21
   86124:	a009883a 	mov	r4,r20
   86128:	d8c01915 	stw	r3,100(sp)
   8612c:	d8801815 	stw	r2,96(sp)
   86130:	008be040 	call	8be04 <__fixdfsi>
   86134:	1009883a 	mov	r4,r2
   86138:	1027883a 	mov	r19,r2
   8613c:	008bd0c0 	call	8bd0c <__floatsidf>
   86140:	a80b883a 	mov	r5,r21
   86144:	a009883a 	mov	r4,r20
   86148:	180f883a 	mov	r7,r3
   8614c:	100d883a 	mov	r6,r2
   86150:	008b3540 	call	8b354 <__subdf3>
   86154:	d9801817 	ldw	r6,96(sp)
   86158:	1823883a 	mov	r17,r3
   8615c:	d8801415 	stw	r2,80(sp)
   86160:	302d883a 	mov	r22,r6
   86164:	d9800517 	ldw	r6,20(sp)
   86168:	9cc00c04 	addi	r19,r19,48
   8616c:	dc401515 	stw	r17,84(sp)
   86170:	d8c01917 	ldw	r3,100(sp)
   86174:	34c00005 	stb	r19,0(r6)
   86178:	d8800517 	ldw	r2,20(sp)
   8617c:	d9401917 	ldw	r5,100(sp)
   86180:	d9801417 	ldw	r6,80(sp)
   86184:	b009883a 	mov	r4,r22
   86188:	880f883a 	mov	r7,r17
   8618c:	182f883a 	mov	r23,r3
   86190:	17000044 	addi	fp,r2,1
   86194:	008bb740 	call	8bb74 <__gtdf2>
   86198:	00804e16 	blt	zero,r2,862d4 <_dtoa_r+0x1158>
   8619c:	d9801417 	ldw	r6,80(sp)
   861a0:	0005883a 	mov	r2,zero
   861a4:	00cffc34 	movhi	r3,16368
   861a8:	180b883a 	mov	r5,r3
   861ac:	880f883a 	mov	r7,r17
   861b0:	1009883a 	mov	r4,r2
   861b4:	008b3540 	call	8b354 <__subdf3>
   861b8:	d9401917 	ldw	r5,100(sp)
   861bc:	180f883a 	mov	r7,r3
   861c0:	b009883a 	mov	r4,r22
   861c4:	100d883a 	mov	r6,r2
   861c8:	008bb740 	call	8bb74 <__gtdf2>
   861cc:	00bda216 	blt	zero,r2,85858 <_dtoa_r+0x6dc>
   861d0:	d8c00317 	ldw	r3,12(sp)
   861d4:	00800044 	movi	r2,1
   861d8:	10c01216 	blt	r2,r3,86224 <_dtoa_r+0x10a8>
   861dc:	003d4506 	br	856f4 <_dtoa_r+0x578>
   861e0:	d9801417 	ldw	r6,80(sp)
   861e4:	0005883a 	mov	r2,zero
   861e8:	00cffc34 	movhi	r3,16368
   861ec:	180b883a 	mov	r5,r3
   861f0:	880f883a 	mov	r7,r17
   861f4:	1009883a 	mov	r4,r2
   861f8:	008b3540 	call	8b354 <__subdf3>
   861fc:	d9c01b17 	ldw	r7,108(sp)
   86200:	180b883a 	mov	r5,r3
   86204:	1009883a 	mov	r4,r2
   86208:	b00d883a 	mov	r6,r22
   8620c:	008bc840 	call	8bc84 <__ltdf2>
   86210:	103d9116 	blt	r2,zero,85858 <_dtoa_r+0x6dc>
   86214:	d9800517 	ldw	r6,20(sp)
   86218:	d9000317 	ldw	r4,12(sp)
   8621c:	3105883a 	add	r2,r6,r4
   86220:	e0bd3426 	beq	fp,r2,856f4 <_dtoa_r+0x578>
   86224:	04500934 	movhi	r17,16420
   86228:	0021883a 	mov	r16,zero
   8622c:	b80b883a 	mov	r5,r23
   86230:	b009883a 	mov	r4,r22
   86234:	800d883a 	mov	r6,r16
   86238:	880f883a 	mov	r7,r17
   8623c:	008b4480 	call	8b448 <__muldf3>
   86240:	d9401517 	ldw	r5,84(sp)
   86244:	d9001417 	ldw	r4,80(sp)
   86248:	880f883a 	mov	r7,r17
   8624c:	000d883a 	mov	r6,zero
   86250:	d8801a15 	stw	r2,104(sp)
   86254:	d8c01b15 	stw	r3,108(sp)
   86258:	008b4480 	call	8b448 <__muldf3>
   8625c:	180b883a 	mov	r5,r3
   86260:	1009883a 	mov	r4,r2
   86264:	1823883a 	mov	r17,r3
   86268:	1021883a 	mov	r16,r2
   8626c:	008be040 	call	8be04 <__fixdfsi>
   86270:	1009883a 	mov	r4,r2
   86274:	102b883a 	mov	r21,r2
   86278:	008bd0c0 	call	8bd0c <__floatsidf>
   8627c:	880b883a 	mov	r5,r17
   86280:	8009883a 	mov	r4,r16
   86284:	180f883a 	mov	r7,r3
   86288:	100d883a 	mov	r6,r2
   8628c:	008b3540 	call	8b354 <__subdf3>
   86290:	1021883a 	mov	r16,r2
   86294:	d9001b17 	ldw	r4,108(sp)
   86298:	1823883a 	mov	r17,r3
   8629c:	dc001415 	stw	r16,80(sp)
   862a0:	ad400c04 	addi	r21,r21,48
   862a4:	dc401515 	stw	r17,84(sp)
   862a8:	d8801a17 	ldw	r2,104(sp)
   862ac:	e5400005 	stb	r21,0(fp)
   862b0:	202f883a 	mov	r23,r4
   862b4:	d9c01b17 	ldw	r7,108(sp)
   862b8:	d9001417 	ldw	r4,80(sp)
   862bc:	880b883a 	mov	r5,r17
   862c0:	100d883a 	mov	r6,r2
   862c4:	102d883a 	mov	r22,r2
   862c8:	e7000044 	addi	fp,fp,1
   862cc:	008bc840 	call	8bc84 <__ltdf2>
   862d0:	103fc30e 	bge	r2,zero,861e0 <_dtoa_r+0x1064>
   862d4:	d9000417 	ldw	r4,16(sp)
   862d8:	d9000d15 	stw	r4,52(sp)
   862dc:	003d7106 	br	858a4 <_dtoa_r+0x728>
   862e0:	d9801717 	ldw	r6,92(sp)
   862e4:	00800084 	movi	r2,2
   862e8:	11bde60e 	bge	r2,r6,85a84 <_dtoa_r+0x908>
   862ec:	203cfb1e 	bne	r4,zero,856dc <_dtoa_r+0x560>
   862f0:	d9001617 	ldw	r4,88(sp)
   862f4:	900b883a 	mov	r5,r18
   862f8:	01800144 	movi	r6,5
   862fc:	000f883a 	mov	r7,zero
   86300:	00890640 	call	89064 <__multadd>
   86304:	d9000717 	ldw	r4,28(sp)
   86308:	100b883a 	mov	r5,r2
   8630c:	1025883a 	mov	r18,r2
   86310:	00884a00 	call	884a0 <__mcmp>
   86314:	00bcf10e 	bge	zero,r2,856dc <_dtoa_r+0x560>
   86318:	d8c00d17 	ldw	r3,52(sp)
   8631c:	d9000517 	ldw	r4,20(sp)
   86320:	d8000615 	stw	zero,24(sp)
   86324:	18c00044 	addi	r3,r3,1
   86328:	d8c00d15 	stw	r3,52(sp)
   8632c:	00800c44 	movi	r2,49
   86330:	27000044 	addi	fp,r4,1
   86334:	20800005 	stb	r2,0(r4)
   86338:	003e8906 	br	85d60 <_dtoa_r+0xbe4>
   8633c:	d8c00517 	ldw	r3,20(sp)
   86340:	003bc206 	br	8524c <_dtoa_r+0xd0>
   86344:	018002b4 	movhi	r6,10
   86348:	31a57404 	addi	r6,r6,-27184
   8634c:	30c00917 	ldw	r3,36(r6)
   86350:	30800817 	ldw	r2,32(r6)
   86354:	d9001217 	ldw	r4,72(sp)
   86358:	d9401317 	ldw	r5,76(sp)
   8635c:	180f883a 	mov	r7,r3
   86360:	100d883a 	mov	r6,r2
   86364:	008b80c0 	call	8b80c <__divdf3>
   86368:	948003cc 	andi	r18,r18,15
   8636c:	058000c4 	movi	r22,3
   86370:	1029883a 	mov	r20,r2
   86374:	182b883a 	mov	r21,r3
   86378:	003c8906 	br	855a0 <_dtoa_r+0x424>
   8637c:	d9001017 	ldw	r4,64(sp)
   86380:	d9800917 	ldw	r6,36(sp)
   86384:	0025883a 	mov	r18,zero
   86388:	1105c83a 	sub	r2,r2,r4
   8638c:	2089883a 	add	r4,r4,r2
   86390:	308d883a 	add	r6,r6,r2
   86394:	d9001015 	stw	r4,64(sp)
   86398:	d9800915 	stw	r6,36(sp)
   8639c:	003e3206 	br	85c68 <_dtoa_r+0xaec>
   863a0:	28800044 	addi	r2,r5,1
   863a4:	27000044 	addi	fp,r4,1
   863a8:	20800005 	stb	r2,0(r4)
   863ac:	003e6c06 	br	85d60 <_dtoa_r+0xbe4>
   863b0:	d8800f17 	ldw	r2,60(sp)
   863b4:	00bce016 	blt	zero,r2,85738 <_dtoa_r+0x5bc>
   863b8:	d9800f17 	ldw	r6,60(sp)
   863bc:	303cc51e 	bne	r6,zero,856d4 <_dtoa_r+0x558>
   863c0:	0005883a 	mov	r2,zero
   863c4:	00d00534 	movhi	r3,16404
   863c8:	980b883a 	mov	r5,r19
   863cc:	180f883a 	mov	r7,r3
   863d0:	9009883a 	mov	r4,r18
   863d4:	100d883a 	mov	r6,r2
   863d8:	008b4480 	call	8b448 <__muldf3>
   863dc:	180b883a 	mov	r5,r3
   863e0:	a80f883a 	mov	r7,r21
   863e4:	1009883a 	mov	r4,r2
   863e8:	a00d883a 	mov	r6,r20
   863ec:	008bbfc0 	call	8bbfc <__gedf2>
   863f0:	103cb80e 	bge	r2,zero,856d4 <_dtoa_r+0x558>
   863f4:	0027883a 	mov	r19,zero
   863f8:	0025883a 	mov	r18,zero
   863fc:	003fc606 	br	86318 <_dtoa_r+0x119c>
   86400:	99400117 	ldw	r5,4(r19)
   86404:	d9001617 	ldw	r4,88(sp)
   86408:	00888c40 	call	888c4 <_Balloc>
   8640c:	99800417 	ldw	r6,16(r19)
   86410:	11000304 	addi	r4,r2,12
   86414:	99400304 	addi	r5,r19,12
   86418:	318d883a 	add	r6,r6,r6
   8641c:	318d883a 	add	r6,r6,r6
   86420:	31800204 	addi	r6,r6,8
   86424:	1023883a 	mov	r17,r2
   86428:	008812c0 	call	8812c <memcpy>
   8642c:	d9001617 	ldw	r4,88(sp)
   86430:	880b883a 	mov	r5,r17
   86434:	01800044 	movi	r6,1
   86438:	0088c880 	call	88c88 <__lshift>
   8643c:	100b883a 	mov	r5,r2
   86440:	003d9c06 	br	85ab4 <_dtoa_r+0x938>
   86444:	00800e44 	movi	r2,57
   86448:	b8807026 	beq	r23,r2,8660c <_dtoa_r+0x1490>
   8644c:	b8800044 	addi	r2,r23,1
   86450:	b7000044 	addi	fp,r22,1
   86454:	b0800005 	stb	r2,0(r22)
   86458:	003e4106 	br	85d60 <_dtoa_r+0xbe4>
   8645c:	d8800317 	ldw	r2,12(sp)
   86460:	018002b4 	movhi	r6,10
   86464:	31a54204 	addi	r6,r6,-27384
   86468:	b009883a 	mov	r4,r22
   8646c:	100e90fa 	slli	r7,r2,3
   86470:	b80b883a 	mov	r5,r23
   86474:	398f883a 	add	r7,r7,r6
   86478:	38bffe17 	ldw	r2,-8(r7)
   8647c:	d9800517 	ldw	r6,20(sp)
   86480:	38ffff17 	ldw	r3,-4(r7)
   86484:	37000044 	addi	fp,r6,1
   86488:	180f883a 	mov	r7,r3
   8648c:	100d883a 	mov	r6,r2
   86490:	008b4480 	call	8b448 <__muldf3>
   86494:	a80b883a 	mov	r5,r21
   86498:	a009883a 	mov	r4,r20
   8649c:	182f883a 	mov	r23,r3
   864a0:	102d883a 	mov	r22,r2
   864a4:	008be040 	call	8be04 <__fixdfsi>
   864a8:	1009883a 	mov	r4,r2
   864ac:	1027883a 	mov	r19,r2
   864b0:	008bd0c0 	call	8bd0c <__floatsidf>
   864b4:	a80b883a 	mov	r5,r21
   864b8:	a009883a 	mov	r4,r20
   864bc:	180f883a 	mov	r7,r3
   864c0:	100d883a 	mov	r6,r2
   864c4:	008b3540 	call	8b354 <__subdf3>
   864c8:	180b883a 	mov	r5,r3
   864cc:	d8c00517 	ldw	r3,20(sp)
   864d0:	9cc00c04 	addi	r19,r19,48
   864d4:	1009883a 	mov	r4,r2
   864d8:	1cc00005 	stb	r19,0(r3)
   864dc:	2021883a 	mov	r16,r4
   864e0:	d9000317 	ldw	r4,12(sp)
   864e4:	00800044 	movi	r2,1
   864e8:	2823883a 	mov	r17,r5
   864ec:	20802226 	beq	r4,r2,86578 <_dtoa_r+0x13fc>
   864f0:	1029883a 	mov	r20,r2
   864f4:	0005883a 	mov	r2,zero
   864f8:	00d00934 	movhi	r3,16420
   864fc:	180f883a 	mov	r7,r3
   86500:	100d883a 	mov	r6,r2
   86504:	880b883a 	mov	r5,r17
   86508:	8009883a 	mov	r4,r16
   8650c:	008b4480 	call	8b448 <__muldf3>
   86510:	180b883a 	mov	r5,r3
   86514:	1009883a 	mov	r4,r2
   86518:	1823883a 	mov	r17,r3
   8651c:	1021883a 	mov	r16,r2
   86520:	008be040 	call	8be04 <__fixdfsi>
   86524:	1009883a 	mov	r4,r2
   86528:	102b883a 	mov	r21,r2
   8652c:	008bd0c0 	call	8bd0c <__floatsidf>
   86530:	880b883a 	mov	r5,r17
   86534:	8009883a 	mov	r4,r16
   86538:	180f883a 	mov	r7,r3
   8653c:	100d883a 	mov	r6,r2
   86540:	008b3540 	call	8b354 <__subdf3>
   86544:	180b883a 	mov	r5,r3
   86548:	d8c00517 	ldw	r3,20(sp)
   8654c:	1009883a 	mov	r4,r2
   86550:	ad400c04 	addi	r21,r21,48
   86554:	1d05883a 	add	r2,r3,r20
   86558:	15400005 	stb	r21,0(r2)
   8655c:	2021883a 	mov	r16,r4
   86560:	d9000317 	ldw	r4,12(sp)
   86564:	a5000044 	addi	r20,r20,1
   86568:	2823883a 	mov	r17,r5
   8656c:	a13fe11e 	bne	r20,r4,864f4 <_dtoa_r+0x1378>
   86570:	e505883a 	add	r2,fp,r20
   86574:	173fffc4 	addi	fp,r2,-1
   86578:	0025883a 	mov	r18,zero
   8657c:	04cff834 	movhi	r19,16352
   86580:	b009883a 	mov	r4,r22
   86584:	b80b883a 	mov	r5,r23
   86588:	900d883a 	mov	r6,r18
   8658c:	980f883a 	mov	r7,r19
   86590:	008b3d40 	call	8b3d4 <__adddf3>
   86594:	180b883a 	mov	r5,r3
   86598:	1009883a 	mov	r4,r2
   8659c:	800d883a 	mov	r6,r16
   865a0:	880f883a 	mov	r7,r17
   865a4:	008bc840 	call	8bc84 <__ltdf2>
   865a8:	103cab16 	blt	r2,zero,85858 <_dtoa_r+0x6dc>
   865ac:	0009883a 	mov	r4,zero
   865b0:	980b883a 	mov	r5,r19
   865b4:	b80f883a 	mov	r7,r23
   865b8:	b00d883a 	mov	r6,r22
   865bc:	008b3540 	call	8b354 <__subdf3>
   865c0:	180b883a 	mov	r5,r3
   865c4:	880f883a 	mov	r7,r17
   865c8:	1009883a 	mov	r4,r2
   865cc:	800d883a 	mov	r6,r16
   865d0:	008bb740 	call	8bb74 <__gtdf2>
   865d4:	00bc470e 	bge	zero,r2,856f4 <_dtoa_r+0x578>
   865d8:	00c00c04 	movi	r3,48
   865dc:	e73fffc4 	addi	fp,fp,-1
   865e0:	e0800007 	ldb	r2,0(fp)
   865e4:	10fffd26 	beq	r2,r3,865dc <_dtoa_r+0x1460>
   865e8:	d9800417 	ldw	r6,16(sp)
   865ec:	e7000044 	addi	fp,fp,1
   865f0:	d9800d15 	stw	r6,52(sp)
   865f4:	003cab06 	br	858a4 <_dtoa_r+0x728>
   865f8:	d8c00f17 	ldw	r3,60(sp)
   865fc:	d9001117 	ldw	r4,68(sp)
   86600:	20e1c83a 	sub	r16,r4,r3
   86604:	0007883a 	mov	r3,zero
   86608:	003d9b06 	br	85c78 <_dtoa_r+0xafc>
   8660c:	00800e44 	movi	r2,57
   86610:	b0800005 	stb	r2,0(r22)
   86614:	b5800044 	addi	r22,r22,1
   86618:	003dc106 	br	85d20 <_dtoa_r+0xba4>
   8661c:	05800084 	movi	r22,2
   86620:	003bf706 	br	85600 <_dtoa_r+0x484>
   86624:	d9000f17 	ldw	r4,60(sp)
   86628:	013c000e 	bge	zero,r4,8562c <_dtoa_r+0x4b0>
   8662c:	d9800e17 	ldw	r6,56(sp)
   86630:	01bc300e 	bge	zero,r6,856f4 <_dtoa_r+0x578>
   86634:	0005883a 	mov	r2,zero
   86638:	00d00934 	movhi	r3,16420
   8663c:	a80b883a 	mov	r5,r21
   86640:	180f883a 	mov	r7,r3
   86644:	a009883a 	mov	r4,r20
   86648:	100d883a 	mov	r6,r2
   8664c:	008b4480 	call	8b448 <__muldf3>
   86650:	b1000044 	addi	r4,r22,1
   86654:	1021883a 	mov	r16,r2
   86658:	1823883a 	mov	r17,r3
   8665c:	008bd0c0 	call	8bd0c <__floatsidf>
   86660:	880b883a 	mov	r5,r17
   86664:	8009883a 	mov	r4,r16
   86668:	180f883a 	mov	r7,r3
   8666c:	100d883a 	mov	r6,r2
   86670:	008b4480 	call	8b448 <__muldf3>
   86674:	0011883a 	mov	r8,zero
   86678:	02500734 	movhi	r9,16412
   8667c:	180b883a 	mov	r5,r3
   86680:	480f883a 	mov	r7,r9
   86684:	1009883a 	mov	r4,r2
   86688:	400d883a 	mov	r6,r8
   8668c:	008b3d40 	call	8b3d4 <__adddf3>
   86690:	102d883a 	mov	r22,r2
   86694:	00bf3034 	movhi	r2,64704
   86698:	10ef883a 	add	r23,r2,r3
   8669c:	d8800d17 	ldw	r2,52(sp)
   866a0:	d8c00e17 	ldw	r3,56(sp)
   866a4:	8029883a 	mov	r20,r16
   866a8:	10bfffc4 	addi	r2,r2,-1
   866ac:	882b883a 	mov	r21,r17
   866b0:	d8800415 	stw	r2,16(sp)
   866b4:	d8c00315 	stw	r3,12(sp)
   866b8:	003e8306 	br	860c8 <_dtoa_r+0xf4c>
   866bc:	d8800117 	ldw	r2,4(sp)
   866c0:	dc001117 	ldw	r16,68(sp)
   866c4:	dc801017 	ldw	r18,64(sp)
   866c8:	00c00d84 	movi	r3,54
   866cc:	1887c83a 	sub	r3,r3,r2
   866d0:	003d6906 	br	85c78 <_dtoa_r+0xafc>
   866d4:	01800044 	movi	r6,1
   866d8:	3021883a 	mov	r16,r6
   866dc:	d9800f15 	stw	r6,60(sp)
   866e0:	d9802615 	stw	r6,152(sp)
   866e4:	d9800e15 	stw	r6,56(sp)
   866e8:	003b9306 	br	85538 <_dtoa_r+0x3bc>
   866ec:	b021883a 	mov	r16,r22
   866f0:	dd800f15 	stw	r22,60(sp)
   866f4:	003b9006 	br	85538 <_dtoa_r+0x3bc>
   866f8:	103e221e 	bne	r2,zero,85f84 <_dtoa_r+0xe08>
   866fc:	b880004c 	andi	r2,r23,1
   86700:	1005003a 	cmpeq	r2,r2,zero
   86704:	103e1f1e 	bne	r2,zero,85f84 <_dtoa_r+0xe08>
   86708:	003e1b06 	br	85f78 <_dtoa_r+0xdfc>
   8670c:	d9001617 	ldw	r4,88(sp)
   86710:	980b883a 	mov	r5,r19
   86714:	01800284 	movi	r6,10
   86718:	000f883a 	mov	r7,zero
   8671c:	00890640 	call	89064 <__multadd>
   86720:	d8c00e17 	ldw	r3,56(sp)
   86724:	1027883a 	mov	r19,r2
   86728:	d8c00f15 	stw	r3,60(sp)
   8672c:	003cd306 	br	85a7c <_dtoa_r+0x900>

00086730 <_fflush_r>:
   86730:	defffb04 	addi	sp,sp,-20
   86734:	dcc00315 	stw	r19,12(sp)
   86738:	dc800215 	stw	r18,8(sp)
   8673c:	dfc00415 	stw	ra,16(sp)
   86740:	dc400115 	stw	r17,4(sp)
   86744:	dc000015 	stw	r16,0(sp)
   86748:	2027883a 	mov	r19,r4
   8674c:	2825883a 	mov	r18,r5
   86750:	20000226 	beq	r4,zero,8675c <_fflush_r+0x2c>
   86754:	20800e17 	ldw	r2,56(r4)
   86758:	10005626 	beq	r2,zero,868b4 <_fflush_r+0x184>
   8675c:	9100030b 	ldhu	r4,12(r18)
   86760:	20ffffcc 	andi	r3,r4,65535
   86764:	18e0001c 	xori	r3,r3,32768
   86768:	18e00004 	addi	r3,r3,-32768
   8676c:	1880020c 	andi	r2,r3,8
   86770:	1000261e 	bne	r2,zero,8680c <_fflush_r+0xdc>
   86774:	90c00117 	ldw	r3,4(r18)
   86778:	20820014 	ori	r2,r4,2048
   8677c:	9080030d 	sth	r2,12(r18)
   86780:	1009883a 	mov	r4,r2
   86784:	00c0400e 	bge	zero,r3,86888 <_fflush_r+0x158>
   86788:	92000a17 	ldw	r8,40(r18)
   8678c:	40004026 	beq	r8,zero,86890 <_fflush_r+0x160>
   86790:	2084000c 	andi	r2,r4,4096
   86794:	10005326 	beq	r2,zero,868e4 <_fflush_r+0x1b4>
   86798:	94001417 	ldw	r16,80(r18)
   8679c:	9080030b 	ldhu	r2,12(r18)
   867a0:	1080010c 	andi	r2,r2,4
   867a4:	1000481e 	bne	r2,zero,868c8 <_fflush_r+0x198>
   867a8:	91400717 	ldw	r5,28(r18)
   867ac:	9809883a 	mov	r4,r19
   867b0:	800d883a 	mov	r6,r16
   867b4:	000f883a 	mov	r7,zero
   867b8:	403ee83a 	callr	r8
   867bc:	8080261e 	bne	r16,r2,86858 <_fflush_r+0x128>
   867c0:	9080030b 	ldhu	r2,12(r18)
   867c4:	91000417 	ldw	r4,16(r18)
   867c8:	90000115 	stw	zero,4(r18)
   867cc:	10bdffcc 	andi	r2,r2,63487
   867d0:	10ffffcc 	andi	r3,r2,65535
   867d4:	18c4000c 	andi	r3,r3,4096
   867d8:	9080030d 	sth	r2,12(r18)
   867dc:	91000015 	stw	r4,0(r18)
   867e0:	18002b26 	beq	r3,zero,86890 <_fflush_r+0x160>
   867e4:	0007883a 	mov	r3,zero
   867e8:	1805883a 	mov	r2,r3
   867ec:	94001415 	stw	r16,80(r18)
   867f0:	dfc00417 	ldw	ra,16(sp)
   867f4:	dcc00317 	ldw	r19,12(sp)
   867f8:	dc800217 	ldw	r18,8(sp)
   867fc:	dc400117 	ldw	r17,4(sp)
   86800:	dc000017 	ldw	r16,0(sp)
   86804:	dec00504 	addi	sp,sp,20
   86808:	f800283a 	ret
   8680c:	94400417 	ldw	r17,16(r18)
   86810:	88001f26 	beq	r17,zero,86890 <_fflush_r+0x160>
   86814:	90800017 	ldw	r2,0(r18)
   86818:	18c000cc 	andi	r3,r3,3
   8681c:	94400015 	stw	r17,0(r18)
   86820:	1461c83a 	sub	r16,r2,r17
   86824:	18002526 	beq	r3,zero,868bc <_fflush_r+0x18c>
   86828:	0005883a 	mov	r2,zero
   8682c:	90800215 	stw	r2,8(r18)
   86830:	0400170e 	bge	zero,r16,86890 <_fflush_r+0x160>
   86834:	90c00917 	ldw	r3,36(r18)
   86838:	91400717 	ldw	r5,28(r18)
   8683c:	880d883a 	mov	r6,r17
   86840:	800f883a 	mov	r7,r16
   86844:	9809883a 	mov	r4,r19
   86848:	183ee83a 	callr	r3
   8684c:	88a3883a 	add	r17,r17,r2
   86850:	80a1c83a 	sub	r16,r16,r2
   86854:	00bff616 	blt	zero,r2,86830 <_fflush_r+0x100>
   86858:	9080030b 	ldhu	r2,12(r18)
   8685c:	00ffffc4 	movi	r3,-1
   86860:	10801014 	ori	r2,r2,64
   86864:	9080030d 	sth	r2,12(r18)
   86868:	1805883a 	mov	r2,r3
   8686c:	dfc00417 	ldw	ra,16(sp)
   86870:	dcc00317 	ldw	r19,12(sp)
   86874:	dc800217 	ldw	r18,8(sp)
   86878:	dc400117 	ldw	r17,4(sp)
   8687c:	dc000017 	ldw	r16,0(sp)
   86880:	dec00504 	addi	sp,sp,20
   86884:	f800283a 	ret
   86888:	90800f17 	ldw	r2,60(r18)
   8688c:	00bfbe16 	blt	zero,r2,86788 <_fflush_r+0x58>
   86890:	0007883a 	mov	r3,zero
   86894:	1805883a 	mov	r2,r3
   86898:	dfc00417 	ldw	ra,16(sp)
   8689c:	dcc00317 	ldw	r19,12(sp)
   868a0:	dc800217 	ldw	r18,8(sp)
   868a4:	dc400117 	ldw	r17,4(sp)
   868a8:	dc000017 	ldw	r16,0(sp)
   868ac:	dec00504 	addi	sp,sp,20
   868b0:	f800283a 	ret
   868b4:	00869c80 	call	869c8 <__sinit>
   868b8:	003fa806 	br	8675c <_fflush_r+0x2c>
   868bc:	90800517 	ldw	r2,20(r18)
   868c0:	90800215 	stw	r2,8(r18)
   868c4:	003fda06 	br	86830 <_fflush_r+0x100>
   868c8:	90800117 	ldw	r2,4(r18)
   868cc:	90c00c17 	ldw	r3,48(r18)
   868d0:	80a1c83a 	sub	r16,r16,r2
   868d4:	183fb426 	beq	r3,zero,867a8 <_fflush_r+0x78>
   868d8:	90800f17 	ldw	r2,60(r18)
   868dc:	80a1c83a 	sub	r16,r16,r2
   868e0:	003fb106 	br	867a8 <_fflush_r+0x78>
   868e4:	91400717 	ldw	r5,28(r18)
   868e8:	9809883a 	mov	r4,r19
   868ec:	000d883a 	mov	r6,zero
   868f0:	01c00044 	movi	r7,1
   868f4:	403ee83a 	callr	r8
   868f8:	1021883a 	mov	r16,r2
   868fc:	00bfffc4 	movi	r2,-1
   86900:	80800226 	beq	r16,r2,8690c <_fflush_r+0x1dc>
   86904:	92000a17 	ldw	r8,40(r18)
   86908:	003fa406 	br	8679c <_fflush_r+0x6c>
   8690c:	98c00017 	ldw	r3,0(r19)
   86910:	00800744 	movi	r2,29
   86914:	18bfde26 	beq	r3,r2,86890 <_fflush_r+0x160>
   86918:	9080030b 	ldhu	r2,12(r18)
   8691c:	8007883a 	mov	r3,r16
   86920:	10801014 	ori	r2,r2,64
   86924:	9080030d 	sth	r2,12(r18)
   86928:	003fcf06 	br	86868 <_fflush_r+0x138>

0008692c <fflush>:
   8692c:	01400234 	movhi	r5,8
   86930:	2959cc04 	addi	r5,r5,26416
   86934:	2007883a 	mov	r3,r4
   86938:	20000526 	beq	r4,zero,86950 <fflush+0x24>
   8693c:	008002b4 	movhi	r2,10
   86940:	10acc204 	addi	r2,r2,-19704
   86944:	11000017 	ldw	r4,0(r2)
   86948:	180b883a 	mov	r5,r3
   8694c:	00867301 	jmpi	86730 <_fflush_r>
   86950:	008002b4 	movhi	r2,10
   86954:	10acc304 	addi	r2,r2,-19700
   86958:	11000017 	ldw	r4,0(r2)
   8695c:	00875301 	jmpi	87530 <_fwalk_reent>

00086960 <std>:
   86960:	00800274 	movhi	r2,9
   86964:	10a6a904 	addi	r2,r2,-25948
   86968:	20800b15 	stw	r2,44(r4)
   8696c:	00800274 	movhi	r2,9
   86970:	10a6e404 	addi	r2,r2,-25712
   86974:	20800815 	stw	r2,32(r4)
   86978:	00c00274 	movhi	r3,9
   8697c:	18e6c504 	addi	r3,r3,-25836
   86980:	00800274 	movhi	r2,9
   86984:	10a6ab04 	addi	r2,r2,-25940
   86988:	2140030d 	sth	r5,12(r4)
   8698c:	2180038d 	sth	r6,14(r4)
   86990:	20c00915 	stw	r3,36(r4)
   86994:	20800a15 	stw	r2,40(r4)
   86998:	20000015 	stw	zero,0(r4)
   8699c:	20000115 	stw	zero,4(r4)
   869a0:	20000215 	stw	zero,8(r4)
   869a4:	20000415 	stw	zero,16(r4)
   869a8:	20000515 	stw	zero,20(r4)
   869ac:	20000615 	stw	zero,24(r4)
   869b0:	21000715 	stw	r4,28(r4)
   869b4:	f800283a 	ret

000869b8 <__sfp_lock_acquire>:
   869b8:	f800283a 	ret

000869bc <__sfp_lock_release>:
   869bc:	f800283a 	ret

000869c0 <__sinit_lock_acquire>:
   869c0:	f800283a 	ret

000869c4 <__sinit_lock_release>:
   869c4:	f800283a 	ret

000869c8 <__sinit>:
   869c8:	20800e17 	ldw	r2,56(r4)
   869cc:	defffd04 	addi	sp,sp,-12
   869d0:	dc400115 	stw	r17,4(sp)
   869d4:	dc000015 	stw	r16,0(sp)
   869d8:	dfc00215 	stw	ra,8(sp)
   869dc:	04400044 	movi	r17,1
   869e0:	01400104 	movi	r5,4
   869e4:	000d883a 	mov	r6,zero
   869e8:	2021883a 	mov	r16,r4
   869ec:	2200bb04 	addi	r8,r4,748
   869f0:	200f883a 	mov	r7,r4
   869f4:	10000526 	beq	r2,zero,86a0c <__sinit+0x44>
   869f8:	dfc00217 	ldw	ra,8(sp)
   869fc:	dc400117 	ldw	r17,4(sp)
   86a00:	dc000017 	ldw	r16,0(sp)
   86a04:	dec00304 	addi	sp,sp,12
   86a08:	f800283a 	ret
   86a0c:	21000117 	ldw	r4,4(r4)
   86a10:	00800234 	movhi	r2,8
   86a14:	109aab04 	addi	r2,r2,27308
   86a18:	00c000c4 	movi	r3,3
   86a1c:	80800f15 	stw	r2,60(r16)
   86a20:	80c0b915 	stw	r3,740(r16)
   86a24:	8200ba15 	stw	r8,744(r16)
   86a28:	84400e15 	stw	r17,56(r16)
   86a2c:	8000b815 	stw	zero,736(r16)
   86a30:	00869600 	call	86960 <std>
   86a34:	81000217 	ldw	r4,8(r16)
   86a38:	880d883a 	mov	r6,r17
   86a3c:	800f883a 	mov	r7,r16
   86a40:	01400284 	movi	r5,10
   86a44:	00869600 	call	86960 <std>
   86a48:	81000317 	ldw	r4,12(r16)
   86a4c:	800f883a 	mov	r7,r16
   86a50:	01400484 	movi	r5,18
   86a54:	01800084 	movi	r6,2
   86a58:	dfc00217 	ldw	ra,8(sp)
   86a5c:	dc400117 	ldw	r17,4(sp)
   86a60:	dc000017 	ldw	r16,0(sp)
   86a64:	dec00304 	addi	sp,sp,12
   86a68:	00869601 	jmpi	86960 <std>

00086a6c <__fp_lock>:
   86a6c:	0005883a 	mov	r2,zero
   86a70:	f800283a 	ret

00086a74 <__fp_unlock>:
   86a74:	0005883a 	mov	r2,zero
   86a78:	f800283a 	ret

00086a7c <__fp_unlock_all>:
   86a7c:	008002b4 	movhi	r2,10
   86a80:	10acc204 	addi	r2,r2,-19704
   86a84:	11000017 	ldw	r4,0(r2)
   86a88:	01400234 	movhi	r5,8
   86a8c:	295a9d04 	addi	r5,r5,27252
   86a90:	00875f81 	jmpi	875f8 <_fwalk>

00086a94 <__fp_lock_all>:
   86a94:	008002b4 	movhi	r2,10
   86a98:	10acc204 	addi	r2,r2,-19704
   86a9c:	11000017 	ldw	r4,0(r2)
   86aa0:	01400234 	movhi	r5,8
   86aa4:	295a9b04 	addi	r5,r5,27244
   86aa8:	00875f81 	jmpi	875f8 <_fwalk>

00086aac <_cleanup_r>:
   86aac:	01400274 	movhi	r5,9
   86ab0:	2967db04 	addi	r5,r5,-24724
   86ab4:	00875f81 	jmpi	875f8 <_fwalk>

00086ab8 <_cleanup>:
   86ab8:	008002b4 	movhi	r2,10
   86abc:	10acc304 	addi	r2,r2,-19700
   86ac0:	11000017 	ldw	r4,0(r2)
   86ac4:	0086aac1 	jmpi	86aac <_cleanup_r>

00086ac8 <__sfmoreglue>:
   86ac8:	defffc04 	addi	sp,sp,-16
   86acc:	dc000015 	stw	r16,0(sp)
   86ad0:	2821883a 	mov	r16,r5
   86ad4:	dc400115 	stw	r17,4(sp)
   86ad8:	01401704 	movi	r5,92
   86adc:	2023883a 	mov	r17,r4
   86ae0:	8009883a 	mov	r4,r16
   86ae4:	dfc00315 	stw	ra,12(sp)
   86ae8:	dcc00215 	stw	r19,8(sp)
   86aec:	0082b040 	call	82b04 <__mulsi3>
   86af0:	11400304 	addi	r5,r2,12
   86af4:	8809883a 	mov	r4,r17
   86af8:	1027883a 	mov	r19,r2
   86afc:	00879080 	call	87908 <_malloc_r>
   86b00:	10c00304 	addi	r3,r2,12
   86b04:	1023883a 	mov	r17,r2
   86b08:	1809883a 	mov	r4,r3
   86b0c:	980d883a 	mov	r6,r19
   86b10:	000b883a 	mov	r5,zero
   86b14:	10000b26 	beq	r2,zero,86b44 <__sfmoreglue+0x7c>
   86b18:	14000115 	stw	r16,4(r2)
   86b1c:	10c00215 	stw	r3,8(r2)
   86b20:	10000015 	stw	zero,0(r2)
   86b24:	00882ac0 	call	882ac <memset>
   86b28:	8805883a 	mov	r2,r17
   86b2c:	dfc00317 	ldw	ra,12(sp)
   86b30:	dcc00217 	ldw	r19,8(sp)
   86b34:	dc400117 	ldw	r17,4(sp)
   86b38:	dc000017 	ldw	r16,0(sp)
   86b3c:	dec00404 	addi	sp,sp,16
   86b40:	f800283a 	ret
   86b44:	0023883a 	mov	r17,zero
   86b48:	8805883a 	mov	r2,r17
   86b4c:	dfc00317 	ldw	ra,12(sp)
   86b50:	dcc00217 	ldw	r19,8(sp)
   86b54:	dc400117 	ldw	r17,4(sp)
   86b58:	dc000017 	ldw	r16,0(sp)
   86b5c:	dec00404 	addi	sp,sp,16
   86b60:	f800283a 	ret

00086b64 <__sfp>:
   86b64:	defffd04 	addi	sp,sp,-12
   86b68:	008002b4 	movhi	r2,10
   86b6c:	10acc304 	addi	r2,r2,-19700
   86b70:	dc000015 	stw	r16,0(sp)
   86b74:	14000017 	ldw	r16,0(r2)
   86b78:	dc400115 	stw	r17,4(sp)
   86b7c:	dfc00215 	stw	ra,8(sp)
   86b80:	80800e17 	ldw	r2,56(r16)
   86b84:	2023883a 	mov	r17,r4
   86b88:	10002626 	beq	r2,zero,86c24 <__sfp+0xc0>
   86b8c:	8400b804 	addi	r16,r16,736
   86b90:	80800117 	ldw	r2,4(r16)
   86b94:	81000217 	ldw	r4,8(r16)
   86b98:	10ffffc4 	addi	r3,r2,-1
   86b9c:	18000916 	blt	r3,zero,86bc4 <__sfp+0x60>
   86ba0:	2080030f 	ldh	r2,12(r4)
   86ba4:	10000b26 	beq	r2,zero,86bd4 <__sfp+0x70>
   86ba8:	017fffc4 	movi	r5,-1
   86bac:	00000206 	br	86bb8 <__sfp+0x54>
   86bb0:	2080030f 	ldh	r2,12(r4)
   86bb4:	10000726 	beq	r2,zero,86bd4 <__sfp+0x70>
   86bb8:	18ffffc4 	addi	r3,r3,-1
   86bbc:	21001704 	addi	r4,r4,92
   86bc0:	197ffb1e 	bne	r3,r5,86bb0 <__sfp+0x4c>
   86bc4:	80800017 	ldw	r2,0(r16)
   86bc8:	10001926 	beq	r2,zero,86c30 <__sfp+0xcc>
   86bcc:	1021883a 	mov	r16,r2
   86bd0:	003fef06 	br	86b90 <__sfp+0x2c>
   86bd4:	00bfffc4 	movi	r2,-1
   86bd8:	00c00044 	movi	r3,1
   86bdc:	2080038d 	sth	r2,14(r4)
   86be0:	20c0030d 	sth	r3,12(r4)
   86be4:	20000015 	stw	zero,0(r4)
   86be8:	20000215 	stw	zero,8(r4)
   86bec:	20000115 	stw	zero,4(r4)
   86bf0:	20000415 	stw	zero,16(r4)
   86bf4:	20000515 	stw	zero,20(r4)
   86bf8:	20000615 	stw	zero,24(r4)
   86bfc:	20000c15 	stw	zero,48(r4)
   86c00:	20000d15 	stw	zero,52(r4)
   86c04:	20001115 	stw	zero,68(r4)
   86c08:	20001215 	stw	zero,72(r4)
   86c0c:	2005883a 	mov	r2,r4
   86c10:	dfc00217 	ldw	ra,8(sp)
   86c14:	dc400117 	ldw	r17,4(sp)
   86c18:	dc000017 	ldw	r16,0(sp)
   86c1c:	dec00304 	addi	sp,sp,12
   86c20:	f800283a 	ret
   86c24:	8009883a 	mov	r4,r16
   86c28:	00869c80 	call	869c8 <__sinit>
   86c2c:	003fd706 	br	86b8c <__sfp+0x28>
   86c30:	8809883a 	mov	r4,r17
   86c34:	01400104 	movi	r5,4
   86c38:	0086ac80 	call	86ac8 <__sfmoreglue>
   86c3c:	80800015 	stw	r2,0(r16)
   86c40:	103fe21e 	bne	r2,zero,86bcc <__sfp+0x68>
   86c44:	00800304 	movi	r2,12
   86c48:	0009883a 	mov	r4,zero
   86c4c:	88800015 	stw	r2,0(r17)
   86c50:	003fee06 	br	86c0c <__sfp+0xa8>

00086c54 <_malloc_trim_r>:
   86c54:	defffb04 	addi	sp,sp,-20
   86c58:	dcc00315 	stw	r19,12(sp)
   86c5c:	04c002b4 	movhi	r19,10
   86c60:	9ce72f04 	addi	r19,r19,-25412
   86c64:	dc800215 	stw	r18,8(sp)
   86c68:	dc400115 	stw	r17,4(sp)
   86c6c:	dc000015 	stw	r16,0(sp)
   86c70:	2823883a 	mov	r17,r5
   86c74:	2025883a 	mov	r18,r4
   86c78:	dfc00415 	stw	ra,16(sp)
   86c7c:	008d6900 	call	8d690 <__malloc_lock>
   86c80:	98800217 	ldw	r2,8(r19)
   86c84:	9009883a 	mov	r4,r18
   86c88:	000b883a 	mov	r5,zero
   86c8c:	10c00117 	ldw	r3,4(r2)
   86c90:	00bfff04 	movi	r2,-4
   86c94:	18a0703a 	and	r16,r3,r2
   86c98:	8463c83a 	sub	r17,r16,r17
   86c9c:	8c43fbc4 	addi	r17,r17,4079
   86ca0:	8822d33a 	srli	r17,r17,12
   86ca4:	0083ffc4 	movi	r2,4095
   86ca8:	8c7fffc4 	addi	r17,r17,-1
   86cac:	8822933a 	slli	r17,r17,12
   86cb0:	1440060e 	bge	r2,r17,86ccc <_malloc_trim_r+0x78>
   86cb4:	0089a340 	call	89a34 <_sbrk_r>
   86cb8:	98c00217 	ldw	r3,8(r19)
   86cbc:	9009883a 	mov	r4,r18
   86cc0:	044bc83a 	sub	r5,zero,r17
   86cc4:	80c7883a 	add	r3,r16,r3
   86cc8:	10c00926 	beq	r2,r3,86cf0 <_malloc_trim_r+0x9c>
   86ccc:	008d7980 	call	8d798 <__malloc_unlock>
   86cd0:	0005883a 	mov	r2,zero
   86cd4:	dfc00417 	ldw	ra,16(sp)
   86cd8:	dcc00317 	ldw	r19,12(sp)
   86cdc:	dc800217 	ldw	r18,8(sp)
   86ce0:	dc400117 	ldw	r17,4(sp)
   86ce4:	dc000017 	ldw	r16,0(sp)
   86ce8:	dec00504 	addi	sp,sp,20
   86cec:	f800283a 	ret
   86cf0:	9009883a 	mov	r4,r18
   86cf4:	0089a340 	call	89a34 <_sbrk_r>
   86cf8:	844dc83a 	sub	r6,r16,r17
   86cfc:	00ffffc4 	movi	r3,-1
   86d00:	9009883a 	mov	r4,r18
   86d04:	000b883a 	mov	r5,zero
   86d08:	01c002b4 	movhi	r7,10
   86d0c:	39f3dc04 	addi	r7,r7,-12432
   86d10:	31800054 	ori	r6,r6,1
   86d14:	10c00926 	beq	r2,r3,86d3c <_malloc_trim_r+0xe8>
   86d18:	38800017 	ldw	r2,0(r7)
   86d1c:	98c00217 	ldw	r3,8(r19)
   86d20:	9009883a 	mov	r4,r18
   86d24:	1445c83a 	sub	r2,r2,r17
   86d28:	38800015 	stw	r2,0(r7)
   86d2c:	19800115 	stw	r6,4(r3)
   86d30:	008d7980 	call	8d798 <__malloc_unlock>
   86d34:	00800044 	movi	r2,1
   86d38:	003fe606 	br	86cd4 <_malloc_trim_r+0x80>
   86d3c:	0089a340 	call	89a34 <_sbrk_r>
   86d40:	99800217 	ldw	r6,8(r19)
   86d44:	100f883a 	mov	r7,r2
   86d48:	9009883a 	mov	r4,r18
   86d4c:	1187c83a 	sub	r3,r2,r6
   86d50:	008003c4 	movi	r2,15
   86d54:	19400054 	ori	r5,r3,1
   86d58:	10ffdc0e 	bge	r2,r3,86ccc <_malloc_trim_r+0x78>
   86d5c:	008002b4 	movhi	r2,10
   86d60:	10acc704 	addi	r2,r2,-19684
   86d64:	10c00017 	ldw	r3,0(r2)
   86d68:	008002b4 	movhi	r2,10
   86d6c:	10b3dc04 	addi	r2,r2,-12432
   86d70:	31400115 	stw	r5,4(r6)
   86d74:	38c7c83a 	sub	r3,r7,r3
   86d78:	10c00015 	stw	r3,0(r2)
   86d7c:	003fd306 	br	86ccc <_malloc_trim_r+0x78>

00086d80 <_free_r>:
   86d80:	defffd04 	addi	sp,sp,-12
   86d84:	dc400115 	stw	r17,4(sp)
   86d88:	dc000015 	stw	r16,0(sp)
   86d8c:	dfc00215 	stw	ra,8(sp)
   86d90:	2821883a 	mov	r16,r5
   86d94:	2023883a 	mov	r17,r4
   86d98:	28005a26 	beq	r5,zero,86f04 <_free_r+0x184>
   86d9c:	008d6900 	call	8d690 <__malloc_lock>
   86da0:	823ffe04 	addi	r8,r16,-8
   86da4:	41400117 	ldw	r5,4(r8)
   86da8:	00bfff84 	movi	r2,-2
   86dac:	028002b4 	movhi	r10,10
   86db0:	52a72f04 	addi	r10,r10,-25412
   86db4:	288e703a 	and	r7,r5,r2
   86db8:	41cd883a 	add	r6,r8,r7
   86dbc:	30c00117 	ldw	r3,4(r6)
   86dc0:	51000217 	ldw	r4,8(r10)
   86dc4:	00bfff04 	movi	r2,-4
   86dc8:	1892703a 	and	r9,r3,r2
   86dcc:	5017883a 	mov	r11,r10
   86dd0:	31006726 	beq	r6,r4,86f70 <_free_r+0x1f0>
   86dd4:	2880004c 	andi	r2,r5,1
   86dd8:	1005003a 	cmpeq	r2,r2,zero
   86ddc:	32400115 	stw	r9,4(r6)
   86de0:	10001a1e 	bne	r2,zero,86e4c <_free_r+0xcc>
   86de4:	000b883a 	mov	r5,zero
   86de8:	3247883a 	add	r3,r6,r9
   86dec:	18800117 	ldw	r2,4(r3)
   86df0:	1080004c 	andi	r2,r2,1
   86df4:	1000231e 	bne	r2,zero,86e84 <_free_r+0x104>
   86df8:	280ac03a 	cmpne	r5,r5,zero
   86dfc:	3a4f883a 	add	r7,r7,r9
   86e00:	2800451e 	bne	r5,zero,86f18 <_free_r+0x198>
   86e04:	31000217 	ldw	r4,8(r6)
   86e08:	008002b4 	movhi	r2,10
   86e0c:	10a73104 	addi	r2,r2,-25404
   86e10:	20807b26 	beq	r4,r2,87000 <_free_r+0x280>
   86e14:	30800317 	ldw	r2,12(r6)
   86e18:	3a07883a 	add	r3,r7,r8
   86e1c:	19c00015 	stw	r7,0(r3)
   86e20:	11000215 	stw	r4,8(r2)
   86e24:	20800315 	stw	r2,12(r4)
   86e28:	38800054 	ori	r2,r7,1
   86e2c:	40800115 	stw	r2,4(r8)
   86e30:	28001a26 	beq	r5,zero,86e9c <_free_r+0x11c>
   86e34:	8809883a 	mov	r4,r17
   86e38:	dfc00217 	ldw	ra,8(sp)
   86e3c:	dc400117 	ldw	r17,4(sp)
   86e40:	dc000017 	ldw	r16,0(sp)
   86e44:	dec00304 	addi	sp,sp,12
   86e48:	008d7981 	jmpi	8d798 <__malloc_unlock>
   86e4c:	80bffe17 	ldw	r2,-8(r16)
   86e50:	50c00204 	addi	r3,r10,8
   86e54:	4091c83a 	sub	r8,r8,r2
   86e58:	41000217 	ldw	r4,8(r8)
   86e5c:	388f883a 	add	r7,r7,r2
   86e60:	20c06126 	beq	r4,r3,86fe8 <_free_r+0x268>
   86e64:	40800317 	ldw	r2,12(r8)
   86e68:	3247883a 	add	r3,r6,r9
   86e6c:	000b883a 	mov	r5,zero
   86e70:	11000215 	stw	r4,8(r2)
   86e74:	20800315 	stw	r2,12(r4)
   86e78:	18800117 	ldw	r2,4(r3)
   86e7c:	1080004c 	andi	r2,r2,1
   86e80:	103fdd26 	beq	r2,zero,86df8 <_free_r+0x78>
   86e84:	38800054 	ori	r2,r7,1
   86e88:	3a07883a 	add	r3,r7,r8
   86e8c:	280ac03a 	cmpne	r5,r5,zero
   86e90:	40800115 	stw	r2,4(r8)
   86e94:	19c00015 	stw	r7,0(r3)
   86e98:	283fe61e 	bne	r5,zero,86e34 <_free_r+0xb4>
   86e9c:	00807fc4 	movi	r2,511
   86ea0:	11c01f2e 	bgeu	r2,r7,86f20 <_free_r+0x1a0>
   86ea4:	3806d27a 	srli	r3,r7,9
   86ea8:	1800481e 	bne	r3,zero,86fcc <_free_r+0x24c>
   86eac:	3804d0fa 	srli	r2,r7,3
   86eb0:	100690fa 	slli	r3,r2,3
   86eb4:	1acd883a 	add	r6,r3,r11
   86eb8:	31400217 	ldw	r5,8(r6)
   86ebc:	31405926 	beq	r6,r5,87024 <_free_r+0x2a4>
   86ec0:	28800117 	ldw	r2,4(r5)
   86ec4:	00ffff04 	movi	r3,-4
   86ec8:	10c4703a 	and	r2,r2,r3
   86ecc:	3880022e 	bgeu	r7,r2,86ed8 <_free_r+0x158>
   86ed0:	29400217 	ldw	r5,8(r5)
   86ed4:	317ffa1e 	bne	r6,r5,86ec0 <_free_r+0x140>
   86ed8:	29800317 	ldw	r6,12(r5)
   86edc:	41800315 	stw	r6,12(r8)
   86ee0:	41400215 	stw	r5,8(r8)
   86ee4:	8809883a 	mov	r4,r17
   86ee8:	2a000315 	stw	r8,12(r5)
   86eec:	32000215 	stw	r8,8(r6)
   86ef0:	dfc00217 	ldw	ra,8(sp)
   86ef4:	dc400117 	ldw	r17,4(sp)
   86ef8:	dc000017 	ldw	r16,0(sp)
   86efc:	dec00304 	addi	sp,sp,12
   86f00:	008d7981 	jmpi	8d798 <__malloc_unlock>
   86f04:	dfc00217 	ldw	ra,8(sp)
   86f08:	dc400117 	ldw	r17,4(sp)
   86f0c:	dc000017 	ldw	r16,0(sp)
   86f10:	dec00304 	addi	sp,sp,12
   86f14:	f800283a 	ret
   86f18:	31000217 	ldw	r4,8(r6)
   86f1c:	003fbd06 	br	86e14 <_free_r+0x94>
   86f20:	3806d0fa 	srli	r3,r7,3
   86f24:	00800044 	movi	r2,1
   86f28:	51400117 	ldw	r5,4(r10)
   86f2c:	180890fa 	slli	r4,r3,3
   86f30:	1807d0ba 	srai	r3,r3,2
   86f34:	22c9883a 	add	r4,r4,r11
   86f38:	21800217 	ldw	r6,8(r4)
   86f3c:	10c4983a 	sll	r2,r2,r3
   86f40:	41000315 	stw	r4,12(r8)
   86f44:	41800215 	stw	r6,8(r8)
   86f48:	288ab03a 	or	r5,r5,r2
   86f4c:	22000215 	stw	r8,8(r4)
   86f50:	8809883a 	mov	r4,r17
   86f54:	51400115 	stw	r5,4(r10)
   86f58:	32000315 	stw	r8,12(r6)
   86f5c:	dfc00217 	ldw	ra,8(sp)
   86f60:	dc400117 	ldw	r17,4(sp)
   86f64:	dc000017 	ldw	r16,0(sp)
   86f68:	dec00304 	addi	sp,sp,12
   86f6c:	008d7981 	jmpi	8d798 <__malloc_unlock>
   86f70:	2880004c 	andi	r2,r5,1
   86f74:	3a4d883a 	add	r6,r7,r9
   86f78:	1000071e 	bne	r2,zero,86f98 <_free_r+0x218>
   86f7c:	80bffe17 	ldw	r2,-8(r16)
   86f80:	4091c83a 	sub	r8,r8,r2
   86f84:	41000317 	ldw	r4,12(r8)
   86f88:	40c00217 	ldw	r3,8(r8)
   86f8c:	308d883a 	add	r6,r6,r2
   86f90:	20c00215 	stw	r3,8(r4)
   86f94:	19000315 	stw	r4,12(r3)
   86f98:	008002b4 	movhi	r2,10
   86f9c:	10acc604 	addi	r2,r2,-19688
   86fa0:	11000017 	ldw	r4,0(r2)
   86fa4:	30c00054 	ori	r3,r6,1
   86fa8:	52000215 	stw	r8,8(r10)
   86fac:	40c00115 	stw	r3,4(r8)
   86fb0:	313fa036 	bltu	r6,r4,86e34 <_free_r+0xb4>
   86fb4:	008002b4 	movhi	r2,10
   86fb8:	10b3b904 	addi	r2,r2,-12572
   86fbc:	11400017 	ldw	r5,0(r2)
   86fc0:	8809883a 	mov	r4,r17
   86fc4:	0086c540 	call	86c54 <_malloc_trim_r>
   86fc8:	003f9a06 	br	86e34 <_free_r+0xb4>
   86fcc:	00800104 	movi	r2,4
   86fd0:	10c0072e 	bgeu	r2,r3,86ff0 <_free_r+0x270>
   86fd4:	00800504 	movi	r2,20
   86fd8:	10c01936 	bltu	r2,r3,87040 <_free_r+0x2c0>
   86fdc:	188016c4 	addi	r2,r3,91
   86fe0:	100690fa 	slli	r3,r2,3
   86fe4:	003fb306 	br	86eb4 <_free_r+0x134>
   86fe8:	01400044 	movi	r5,1
   86fec:	003f7e06 	br	86de8 <_free_r+0x68>
   86ff0:	3804d1ba 	srli	r2,r7,6
   86ff4:	10800e04 	addi	r2,r2,56
   86ff8:	100690fa 	slli	r3,r2,3
   86ffc:	003fad06 	br	86eb4 <_free_r+0x134>
   87000:	22000315 	stw	r8,12(r4)
   87004:	22000215 	stw	r8,8(r4)
   87008:	3a05883a 	add	r2,r7,r8
   8700c:	38c00054 	ori	r3,r7,1
   87010:	11c00015 	stw	r7,0(r2)
   87014:	41000215 	stw	r4,8(r8)
   87018:	40c00115 	stw	r3,4(r8)
   8701c:	41000315 	stw	r4,12(r8)
   87020:	003f8406 	br	86e34 <_free_r+0xb4>
   87024:	1005d0ba 	srai	r2,r2,2
   87028:	00c00044 	movi	r3,1
   8702c:	51000117 	ldw	r4,4(r10)
   87030:	1886983a 	sll	r3,r3,r2
   87034:	20c8b03a 	or	r4,r4,r3
   87038:	51000115 	stw	r4,4(r10)
   8703c:	003fa706 	br	86edc <_free_r+0x15c>
   87040:	00801504 	movi	r2,84
   87044:	10c00436 	bltu	r2,r3,87058 <_free_r+0x2d8>
   87048:	3804d33a 	srli	r2,r7,12
   8704c:	10801b84 	addi	r2,r2,110
   87050:	100690fa 	slli	r3,r2,3
   87054:	003f9706 	br	86eb4 <_free_r+0x134>
   87058:	00805504 	movi	r2,340
   8705c:	10c00436 	bltu	r2,r3,87070 <_free_r+0x2f0>
   87060:	3804d3fa 	srli	r2,r7,15
   87064:	10801dc4 	addi	r2,r2,119
   87068:	100690fa 	slli	r3,r2,3
   8706c:	003f9106 	br	86eb4 <_free_r+0x134>
   87070:	00815504 	movi	r2,1364
   87074:	10c0032e 	bgeu	r2,r3,87084 <_free_r+0x304>
   87078:	00801f84 	movi	r2,126
   8707c:	00c0fc04 	movi	r3,1008
   87080:	003f8c06 	br	86eb4 <_free_r+0x134>
   87084:	3804d4ba 	srli	r2,r7,18
   87088:	10801f04 	addi	r2,r2,124
   8708c:	100690fa 	slli	r3,r2,3
   87090:	003f8806 	br	86eb4 <_free_r+0x134>

00087094 <__sfvwrite_r>:
   87094:	30800217 	ldw	r2,8(r6)
   87098:	defff504 	addi	sp,sp,-44
   8709c:	df000915 	stw	fp,36(sp)
   870a0:	dd800715 	stw	r22,28(sp)
   870a4:	dc800315 	stw	r18,12(sp)
   870a8:	dfc00a15 	stw	ra,40(sp)
   870ac:	ddc00815 	stw	r23,32(sp)
   870b0:	dd400615 	stw	r21,24(sp)
   870b4:	dd000515 	stw	r20,20(sp)
   870b8:	dcc00415 	stw	r19,16(sp)
   870bc:	dc400215 	stw	r17,8(sp)
   870c0:	dc000115 	stw	r16,4(sp)
   870c4:	302d883a 	mov	r22,r6
   870c8:	2039883a 	mov	fp,r4
   870cc:	2825883a 	mov	r18,r5
   870d0:	10001c26 	beq	r2,zero,87144 <__sfvwrite_r+0xb0>
   870d4:	29c0030b 	ldhu	r7,12(r5)
   870d8:	3880020c 	andi	r2,r7,8
   870dc:	10002726 	beq	r2,zero,8717c <__sfvwrite_r+0xe8>
   870e0:	28800417 	ldw	r2,16(r5)
   870e4:	10002526 	beq	r2,zero,8717c <__sfvwrite_r+0xe8>
   870e8:	3880008c 	andi	r2,r7,2
   870ec:	b5400017 	ldw	r21,0(r22)
   870f0:	10002826 	beq	r2,zero,87194 <__sfvwrite_r+0x100>
   870f4:	0021883a 	mov	r16,zero
   870f8:	0023883a 	mov	r17,zero
   870fc:	880d883a 	mov	r6,r17
   87100:	e009883a 	mov	r4,fp
   87104:	00810004 	movi	r2,1024
   87108:	80006e26 	beq	r16,zero,872c4 <__sfvwrite_r+0x230>
   8710c:	800f883a 	mov	r7,r16
   87110:	91400717 	ldw	r5,28(r18)
   87114:	1400012e 	bgeu	r2,r16,8711c <__sfvwrite_r+0x88>
   87118:	100f883a 	mov	r7,r2
   8711c:	90c00917 	ldw	r3,36(r18)
   87120:	183ee83a 	callr	r3
   87124:	1007883a 	mov	r3,r2
   87128:	80a1c83a 	sub	r16,r16,r2
   8712c:	88a3883a 	add	r17,r17,r2
   87130:	00806d0e 	bge	zero,r2,872e8 <__sfvwrite_r+0x254>
   87134:	b0800217 	ldw	r2,8(r22)
   87138:	10c5c83a 	sub	r2,r2,r3
   8713c:	b0800215 	stw	r2,8(r22)
   87140:	103fee1e 	bne	r2,zero,870fc <__sfvwrite_r+0x68>
   87144:	0009883a 	mov	r4,zero
   87148:	2005883a 	mov	r2,r4
   8714c:	dfc00a17 	ldw	ra,40(sp)
   87150:	df000917 	ldw	fp,36(sp)
   87154:	ddc00817 	ldw	r23,32(sp)
   87158:	dd800717 	ldw	r22,28(sp)
   8715c:	dd400617 	ldw	r21,24(sp)
   87160:	dd000517 	ldw	r20,20(sp)
   87164:	dcc00417 	ldw	r19,16(sp)
   87168:	dc800317 	ldw	r18,12(sp)
   8716c:	dc400217 	ldw	r17,8(sp)
   87170:	dc000117 	ldw	r16,4(sp)
   87174:	dec00b04 	addi	sp,sp,44
   87178:	f800283a 	ret
   8717c:	0084dfc0 	call	84dfc <__swsetup_r>
   87180:	1000e41e 	bne	r2,zero,87514 <__sfvwrite_r+0x480>
   87184:	91c0030b 	ldhu	r7,12(r18)
   87188:	b5400017 	ldw	r21,0(r22)
   8718c:	3880008c 	andi	r2,r7,2
   87190:	103fd81e 	bne	r2,zero,870f4 <__sfvwrite_r+0x60>
   87194:	3880004c 	andi	r2,r7,1
   87198:	1005003a 	cmpeq	r2,r2,zero
   8719c:	10005726 	beq	r2,zero,872fc <__sfvwrite_r+0x268>
   871a0:	0029883a 	mov	r20,zero
   871a4:	002f883a 	mov	r23,zero
   871a8:	a0004226 	beq	r20,zero,872b4 <__sfvwrite_r+0x220>
   871ac:	3880800c 	andi	r2,r7,512
   871b0:	94000217 	ldw	r16,8(r18)
   871b4:	10008b26 	beq	r2,zero,873e4 <__sfvwrite_r+0x350>
   871b8:	800d883a 	mov	r6,r16
   871bc:	a400a536 	bltu	r20,r16,87454 <__sfvwrite_r+0x3c0>
   871c0:	3881200c 	andi	r2,r7,1152
   871c4:	10002726 	beq	r2,zero,87264 <__sfvwrite_r+0x1d0>
   871c8:	90800517 	ldw	r2,20(r18)
   871cc:	92000417 	ldw	r8,16(r18)
   871d0:	91400017 	ldw	r5,0(r18)
   871d4:	1087883a 	add	r3,r2,r2
   871d8:	1887883a 	add	r3,r3,r2
   871dc:	1808d7fa 	srli	r4,r3,31
   871e0:	2a21c83a 	sub	r16,r5,r8
   871e4:	80800044 	addi	r2,r16,1
   871e8:	20c9883a 	add	r4,r4,r3
   871ec:	2027d07a 	srai	r19,r4,1
   871f0:	a085883a 	add	r2,r20,r2
   871f4:	980d883a 	mov	r6,r19
   871f8:	9880022e 	bgeu	r19,r2,87204 <__sfvwrite_r+0x170>
   871fc:	1027883a 	mov	r19,r2
   87200:	100d883a 	mov	r6,r2
   87204:	3881000c 	andi	r2,r7,1024
   87208:	1000b826 	beq	r2,zero,874ec <__sfvwrite_r+0x458>
   8720c:	300b883a 	mov	r5,r6
   87210:	e009883a 	mov	r4,fp
   87214:	00879080 	call	87908 <_malloc_r>
   87218:	10003126 	beq	r2,zero,872e0 <__sfvwrite_r+0x24c>
   8721c:	91400417 	ldw	r5,16(r18)
   87220:	1009883a 	mov	r4,r2
   87224:	800d883a 	mov	r6,r16
   87228:	1023883a 	mov	r17,r2
   8722c:	008812c0 	call	8812c <memcpy>
   87230:	90c0030b 	ldhu	r3,12(r18)
   87234:	00beffc4 	movi	r2,-1025
   87238:	1886703a 	and	r3,r3,r2
   8723c:	18c02014 	ori	r3,r3,128
   87240:	90c0030d 	sth	r3,12(r18)
   87244:	9c07c83a 	sub	r3,r19,r16
   87248:	8c05883a 	add	r2,r17,r16
   8724c:	a00d883a 	mov	r6,r20
   87250:	a021883a 	mov	r16,r20
   87254:	90800015 	stw	r2,0(r18)
   87258:	90c00215 	stw	r3,8(r18)
   8725c:	94400415 	stw	r17,16(r18)
   87260:	94c00515 	stw	r19,20(r18)
   87264:	91000017 	ldw	r4,0(r18)
   87268:	b80b883a 	mov	r5,r23
   8726c:	a023883a 	mov	r17,r20
   87270:	00881cc0 	call	881cc <memmove>
   87274:	90c00217 	ldw	r3,8(r18)
   87278:	90800017 	ldw	r2,0(r18)
   8727c:	a027883a 	mov	r19,r20
   87280:	1c07c83a 	sub	r3,r3,r16
   87284:	1405883a 	add	r2,r2,r16
   87288:	90c00215 	stw	r3,8(r18)
   8728c:	a021883a 	mov	r16,r20
   87290:	90800015 	stw	r2,0(r18)
   87294:	b0800217 	ldw	r2,8(r22)
   87298:	1405c83a 	sub	r2,r2,r16
   8729c:	b0800215 	stw	r2,8(r22)
   872a0:	103fa826 	beq	r2,zero,87144 <__sfvwrite_r+0xb0>
   872a4:	a469c83a 	sub	r20,r20,r17
   872a8:	91c0030b 	ldhu	r7,12(r18)
   872ac:	bcef883a 	add	r23,r23,r19
   872b0:	a03fbe1e 	bne	r20,zero,871ac <__sfvwrite_r+0x118>
   872b4:	adc00017 	ldw	r23,0(r21)
   872b8:	ad000117 	ldw	r20,4(r21)
   872bc:	ad400204 	addi	r21,r21,8
   872c0:	003fb906 	br	871a8 <__sfvwrite_r+0x114>
   872c4:	ac400017 	ldw	r17,0(r21)
   872c8:	ac000117 	ldw	r16,4(r21)
   872cc:	ad400204 	addi	r21,r21,8
   872d0:	003f8a06 	br	870fc <__sfvwrite_r+0x68>
   872d4:	91400417 	ldw	r5,16(r18)
   872d8:	e009883a 	mov	r4,fp
   872dc:	0086d800 	call	86d80 <_free_r>
   872e0:	00800304 	movi	r2,12
   872e4:	e0800015 	stw	r2,0(fp)
   872e8:	9080030b 	ldhu	r2,12(r18)
   872ec:	013fffc4 	movi	r4,-1
   872f0:	10801014 	ori	r2,r2,64
   872f4:	9080030d 	sth	r2,12(r18)
   872f8:	003f9306 	br	87148 <__sfvwrite_r+0xb4>
   872fc:	0027883a 	mov	r19,zero
   87300:	002f883a 	mov	r23,zero
   87304:	d8000015 	stw	zero,0(sp)
   87308:	0029883a 	mov	r20,zero
   8730c:	98001e26 	beq	r19,zero,87388 <__sfvwrite_r+0x2f4>
   87310:	d8c00017 	ldw	r3,0(sp)
   87314:	1804c03a 	cmpne	r2,r3,zero
   87318:	10005e26 	beq	r2,zero,87494 <__sfvwrite_r+0x400>
   8731c:	9821883a 	mov	r16,r19
   87320:	a4c0012e 	bgeu	r20,r19,87328 <__sfvwrite_r+0x294>
   87324:	a021883a 	mov	r16,r20
   87328:	91000017 	ldw	r4,0(r18)
   8732c:	90800417 	ldw	r2,16(r18)
   87330:	91800217 	ldw	r6,8(r18)
   87334:	91c00517 	ldw	r7,20(r18)
   87338:	1100022e 	bgeu	r2,r4,87344 <__sfvwrite_r+0x2b0>
   8733c:	31e3883a 	add	r17,r6,r7
   87340:	8c001616 	blt	r17,r16,8739c <__sfvwrite_r+0x308>
   87344:	81c03816 	blt	r16,r7,87428 <__sfvwrite_r+0x394>
   87348:	90c00917 	ldw	r3,36(r18)
   8734c:	91400717 	ldw	r5,28(r18)
   87350:	e009883a 	mov	r4,fp
   87354:	b80d883a 	mov	r6,r23
   87358:	183ee83a 	callr	r3
   8735c:	1023883a 	mov	r17,r2
   87360:	00bfe10e 	bge	zero,r2,872e8 <__sfvwrite_r+0x254>
   87364:	a469c83a 	sub	r20,r20,r17
   87368:	a0001826 	beq	r20,zero,873cc <__sfvwrite_r+0x338>
   8736c:	b0800217 	ldw	r2,8(r22)
   87370:	1445c83a 	sub	r2,r2,r17
   87374:	b0800215 	stw	r2,8(r22)
   87378:	103f7226 	beq	r2,zero,87144 <__sfvwrite_r+0xb0>
   8737c:	9c67c83a 	sub	r19,r19,r17
   87380:	bc6f883a 	add	r23,r23,r17
   87384:	983fe21e 	bne	r19,zero,87310 <__sfvwrite_r+0x27c>
   87388:	adc00017 	ldw	r23,0(r21)
   8738c:	acc00117 	ldw	r19,4(r21)
   87390:	ad400204 	addi	r21,r21,8
   87394:	d8000015 	stw	zero,0(sp)
   87398:	003fdc06 	br	8730c <__sfvwrite_r+0x278>
   8739c:	b80b883a 	mov	r5,r23
   873a0:	880d883a 	mov	r6,r17
   873a4:	00881cc0 	call	881cc <memmove>
   873a8:	90c00017 	ldw	r3,0(r18)
   873ac:	e009883a 	mov	r4,fp
   873b0:	900b883a 	mov	r5,r18
   873b4:	1c47883a 	add	r3,r3,r17
   873b8:	90c00015 	stw	r3,0(r18)
   873bc:	00867300 	call	86730 <_fflush_r>
   873c0:	103fc91e 	bne	r2,zero,872e8 <__sfvwrite_r+0x254>
   873c4:	a469c83a 	sub	r20,r20,r17
   873c8:	a03fe81e 	bne	r20,zero,8736c <__sfvwrite_r+0x2d8>
   873cc:	e009883a 	mov	r4,fp
   873d0:	900b883a 	mov	r5,r18
   873d4:	00867300 	call	86730 <_fflush_r>
   873d8:	103fc31e 	bne	r2,zero,872e8 <__sfvwrite_r+0x254>
   873dc:	d8000015 	stw	zero,0(sp)
   873e0:	003fe206 	br	8736c <__sfvwrite_r+0x2d8>
   873e4:	91000017 	ldw	r4,0(r18)
   873e8:	90800417 	ldw	r2,16(r18)
   873ec:	1100022e 	bgeu	r2,r4,873f8 <__sfvwrite_r+0x364>
   873f0:	8023883a 	mov	r17,r16
   873f4:	85003136 	bltu	r16,r20,874bc <__sfvwrite_r+0x428>
   873f8:	91c00517 	ldw	r7,20(r18)
   873fc:	a1c01836 	bltu	r20,r7,87460 <__sfvwrite_r+0x3cc>
   87400:	90c00917 	ldw	r3,36(r18)
   87404:	91400717 	ldw	r5,28(r18)
   87408:	e009883a 	mov	r4,fp
   8740c:	b80d883a 	mov	r6,r23
   87410:	183ee83a 	callr	r3
   87414:	1021883a 	mov	r16,r2
   87418:	00bfb30e 	bge	zero,r2,872e8 <__sfvwrite_r+0x254>
   8741c:	1023883a 	mov	r17,r2
   87420:	1027883a 	mov	r19,r2
   87424:	003f9b06 	br	87294 <__sfvwrite_r+0x200>
   87428:	b80b883a 	mov	r5,r23
   8742c:	800d883a 	mov	r6,r16
   87430:	00881cc0 	call	881cc <memmove>
   87434:	90c00217 	ldw	r3,8(r18)
   87438:	90800017 	ldw	r2,0(r18)
   8743c:	8023883a 	mov	r17,r16
   87440:	1c07c83a 	sub	r3,r3,r16
   87444:	1405883a 	add	r2,r2,r16
   87448:	90c00215 	stw	r3,8(r18)
   8744c:	90800015 	stw	r2,0(r18)
   87450:	003fc406 	br	87364 <__sfvwrite_r+0x2d0>
   87454:	a00d883a 	mov	r6,r20
   87458:	a021883a 	mov	r16,r20
   8745c:	003f8106 	br	87264 <__sfvwrite_r+0x1d0>
   87460:	b80b883a 	mov	r5,r23
   87464:	a00d883a 	mov	r6,r20
   87468:	00881cc0 	call	881cc <memmove>
   8746c:	90c00217 	ldw	r3,8(r18)
   87470:	90800017 	ldw	r2,0(r18)
   87474:	a021883a 	mov	r16,r20
   87478:	1d07c83a 	sub	r3,r3,r20
   8747c:	1505883a 	add	r2,r2,r20
   87480:	a023883a 	mov	r17,r20
   87484:	a027883a 	mov	r19,r20
   87488:	90c00215 	stw	r3,8(r18)
   8748c:	90800015 	stw	r2,0(r18)
   87490:	003f8006 	br	87294 <__sfvwrite_r+0x200>
   87494:	b809883a 	mov	r4,r23
   87498:	01400284 	movi	r5,10
   8749c:	980d883a 	mov	r6,r19
   874a0:	00880480 	call	88048 <memchr>
   874a4:	10001726 	beq	r2,zero,87504 <__sfvwrite_r+0x470>
   874a8:	15c5c83a 	sub	r2,r2,r23
   874ac:	15000044 	addi	r20,r2,1
   874b0:	00800044 	movi	r2,1
   874b4:	d8800015 	stw	r2,0(sp)
   874b8:	003f9806 	br	8731c <__sfvwrite_r+0x288>
   874bc:	b80b883a 	mov	r5,r23
   874c0:	800d883a 	mov	r6,r16
   874c4:	00881cc0 	call	881cc <memmove>
   874c8:	90c00017 	ldw	r3,0(r18)
   874cc:	e009883a 	mov	r4,fp
   874d0:	900b883a 	mov	r5,r18
   874d4:	1c07883a 	add	r3,r3,r16
   874d8:	90c00015 	stw	r3,0(r18)
   874dc:	8027883a 	mov	r19,r16
   874e0:	00867300 	call	86730 <_fflush_r>
   874e4:	103f6b26 	beq	r2,zero,87294 <__sfvwrite_r+0x200>
   874e8:	003f7f06 	br	872e8 <__sfvwrite_r+0x254>
   874ec:	400b883a 	mov	r5,r8
   874f0:	e009883a 	mov	r4,fp
   874f4:	00893d00 	call	893d0 <_realloc_r>
   874f8:	103f7626 	beq	r2,zero,872d4 <__sfvwrite_r+0x240>
   874fc:	1023883a 	mov	r17,r2
   87500:	003f5006 	br	87244 <__sfvwrite_r+0x1b0>
   87504:	00c00044 	movi	r3,1
   87508:	9d000044 	addi	r20,r19,1
   8750c:	d8c00015 	stw	r3,0(sp)
   87510:	003f8206 	br	8731c <__sfvwrite_r+0x288>
   87514:	9080030b 	ldhu	r2,12(r18)
   87518:	00c00244 	movi	r3,9
   8751c:	013fffc4 	movi	r4,-1
   87520:	10801014 	ori	r2,r2,64
   87524:	9080030d 	sth	r2,12(r18)
   87528:	e0c00015 	stw	r3,0(fp)
   8752c:	003f0606 	br	87148 <__sfvwrite_r+0xb4>

00087530 <_fwalk_reent>:
   87530:	defff704 	addi	sp,sp,-36
   87534:	dcc00315 	stw	r19,12(sp)
   87538:	24c0b804 	addi	r19,r4,736
   8753c:	dd800615 	stw	r22,24(sp)
   87540:	dd400515 	stw	r21,20(sp)
   87544:	dfc00815 	stw	ra,32(sp)
   87548:	ddc00715 	stw	r23,28(sp)
   8754c:	dd000415 	stw	r20,16(sp)
   87550:	dc800215 	stw	r18,8(sp)
   87554:	dc400115 	stw	r17,4(sp)
   87558:	dc000015 	stw	r16,0(sp)
   8755c:	202b883a 	mov	r21,r4
   87560:	282d883a 	mov	r22,r5
   87564:	00869b80 	call	869b8 <__sfp_lock_acquire>
   87568:	98002126 	beq	r19,zero,875f0 <_fwalk_reent+0xc0>
   8756c:	002f883a 	mov	r23,zero
   87570:	9c800117 	ldw	r18,4(r19)
   87574:	9c000217 	ldw	r16,8(r19)
   87578:	90bfffc4 	addi	r2,r18,-1
   8757c:	10000d16 	blt	r2,zero,875b4 <_fwalk_reent+0x84>
   87580:	0023883a 	mov	r17,zero
   87584:	053fffc4 	movi	r20,-1
   87588:	8080030f 	ldh	r2,12(r16)
   8758c:	8c400044 	addi	r17,r17,1
   87590:	10000626 	beq	r2,zero,875ac <_fwalk_reent+0x7c>
   87594:	8080038f 	ldh	r2,14(r16)
   87598:	800b883a 	mov	r5,r16
   8759c:	a809883a 	mov	r4,r21
   875a0:	15000226 	beq	r2,r20,875ac <_fwalk_reent+0x7c>
   875a4:	b03ee83a 	callr	r22
   875a8:	b8aeb03a 	or	r23,r23,r2
   875ac:	84001704 	addi	r16,r16,92
   875b0:	947ff51e 	bne	r18,r17,87588 <_fwalk_reent+0x58>
   875b4:	9cc00017 	ldw	r19,0(r19)
   875b8:	983fed1e 	bne	r19,zero,87570 <_fwalk_reent+0x40>
   875bc:	00869bc0 	call	869bc <__sfp_lock_release>
   875c0:	b805883a 	mov	r2,r23
   875c4:	dfc00817 	ldw	ra,32(sp)
   875c8:	ddc00717 	ldw	r23,28(sp)
   875cc:	dd800617 	ldw	r22,24(sp)
   875d0:	dd400517 	ldw	r21,20(sp)
   875d4:	dd000417 	ldw	r20,16(sp)
   875d8:	dcc00317 	ldw	r19,12(sp)
   875dc:	dc800217 	ldw	r18,8(sp)
   875e0:	dc400117 	ldw	r17,4(sp)
   875e4:	dc000017 	ldw	r16,0(sp)
   875e8:	dec00904 	addi	sp,sp,36
   875ec:	f800283a 	ret
   875f0:	002f883a 	mov	r23,zero
   875f4:	003ff106 	br	875bc <_fwalk_reent+0x8c>

000875f8 <_fwalk>:
   875f8:	defff804 	addi	sp,sp,-32
   875fc:	dcc00315 	stw	r19,12(sp)
   87600:	24c0b804 	addi	r19,r4,736
   87604:	dd400515 	stw	r21,20(sp)
   87608:	dfc00715 	stw	ra,28(sp)
   8760c:	dd800615 	stw	r22,24(sp)
   87610:	dd000415 	stw	r20,16(sp)
   87614:	dc800215 	stw	r18,8(sp)
   87618:	dc400115 	stw	r17,4(sp)
   8761c:	dc000015 	stw	r16,0(sp)
   87620:	282b883a 	mov	r21,r5
   87624:	00869b80 	call	869b8 <__sfp_lock_acquire>
   87628:	98001f26 	beq	r19,zero,876a8 <_fwalk+0xb0>
   8762c:	002d883a 	mov	r22,zero
   87630:	9c800117 	ldw	r18,4(r19)
   87634:	9c000217 	ldw	r16,8(r19)
   87638:	90bfffc4 	addi	r2,r18,-1
   8763c:	10000c16 	blt	r2,zero,87670 <_fwalk+0x78>
   87640:	0023883a 	mov	r17,zero
   87644:	053fffc4 	movi	r20,-1
   87648:	8080030f 	ldh	r2,12(r16)
   8764c:	8c400044 	addi	r17,r17,1
   87650:	10000526 	beq	r2,zero,87668 <_fwalk+0x70>
   87654:	8080038f 	ldh	r2,14(r16)
   87658:	8009883a 	mov	r4,r16
   8765c:	15000226 	beq	r2,r20,87668 <_fwalk+0x70>
   87660:	a83ee83a 	callr	r21
   87664:	b0acb03a 	or	r22,r22,r2
   87668:	84001704 	addi	r16,r16,92
   8766c:	947ff61e 	bne	r18,r17,87648 <_fwalk+0x50>
   87670:	9cc00017 	ldw	r19,0(r19)
   87674:	983fee1e 	bne	r19,zero,87630 <_fwalk+0x38>
   87678:	00869bc0 	call	869bc <__sfp_lock_release>
   8767c:	b005883a 	mov	r2,r22
   87680:	dfc00717 	ldw	ra,28(sp)
   87684:	dd800617 	ldw	r22,24(sp)
   87688:	dd400517 	ldw	r21,20(sp)
   8768c:	dd000417 	ldw	r20,16(sp)
   87690:	dcc00317 	ldw	r19,12(sp)
   87694:	dc800217 	ldw	r18,8(sp)
   87698:	dc400117 	ldw	r17,4(sp)
   8769c:	dc000017 	ldw	r16,0(sp)
   876a0:	dec00804 	addi	sp,sp,32
   876a4:	f800283a 	ret
   876a8:	002d883a 	mov	r22,zero
   876ac:	003ff206 	br	87678 <_fwalk+0x80>

000876b0 <__locale_charset>:
   876b0:	d0a00417 	ldw	r2,-32752(gp)
   876b4:	f800283a 	ret

000876b8 <_localeconv_r>:
   876b8:	008002b4 	movhi	r2,10
   876bc:	10a53604 	addi	r2,r2,-27432
   876c0:	f800283a 	ret

000876c4 <localeconv>:
   876c4:	008002b4 	movhi	r2,10
   876c8:	10acc204 	addi	r2,r2,-19704
   876cc:	11000017 	ldw	r4,0(r2)
   876d0:	00876b81 	jmpi	876b8 <_localeconv_r>

000876d4 <_setlocale_r>:
   876d4:	defffc04 	addi	sp,sp,-16
   876d8:	00c002b4 	movhi	r3,10
   876dc:	18e50c04 	addi	r3,r3,-27600
   876e0:	dc800215 	stw	r18,8(sp)
   876e4:	dc400115 	stw	r17,4(sp)
   876e8:	dc000015 	stw	r16,0(sp)
   876ec:	2023883a 	mov	r17,r4
   876f0:	2825883a 	mov	r18,r5
   876f4:	dfc00315 	stw	ra,12(sp)
   876f8:	3021883a 	mov	r16,r6
   876fc:	3009883a 	mov	r4,r6
   87700:	180b883a 	mov	r5,r3
   87704:	30000926 	beq	r6,zero,8772c <_setlocale_r+0x58>
   87708:	0089bf00 	call	89bf0 <strcmp>
   8770c:	8009883a 	mov	r4,r16
   87710:	014002b4 	movhi	r5,10
   87714:	29651d04 	addi	r5,r5,-27532
   87718:	10000b1e 	bne	r2,zero,87748 <_setlocale_r+0x74>
   8771c:	8c000d15 	stw	r16,52(r17)
   87720:	8c800c15 	stw	r18,48(r17)
   87724:	00c002b4 	movhi	r3,10
   87728:	18e50c04 	addi	r3,r3,-27600
   8772c:	1805883a 	mov	r2,r3
   87730:	dfc00317 	ldw	ra,12(sp)
   87734:	dc800217 	ldw	r18,8(sp)
   87738:	dc400117 	ldw	r17,4(sp)
   8773c:	dc000017 	ldw	r16,0(sp)
   87740:	dec00404 	addi	sp,sp,16
   87744:	f800283a 	ret
   87748:	0089bf00 	call	89bf0 <strcmp>
   8774c:	0007883a 	mov	r3,zero
   87750:	103ff226 	beq	r2,zero,8771c <_setlocale_r+0x48>
   87754:	003ff506 	br	8772c <_setlocale_r+0x58>

00087758 <setlocale>:
   87758:	018002b4 	movhi	r6,10
   8775c:	31acc204 	addi	r6,r6,-19704
   87760:	2007883a 	mov	r3,r4
   87764:	31000017 	ldw	r4,0(r6)
   87768:	280d883a 	mov	r6,r5
   8776c:	180b883a 	mov	r5,r3
   87770:	00876d41 	jmpi	876d4 <_setlocale_r>

00087774 <__smakebuf_r>:
   87774:	2880030b 	ldhu	r2,12(r5)
   87778:	deffed04 	addi	sp,sp,-76
   8777c:	dc401015 	stw	r17,64(sp)
   87780:	1080008c 	andi	r2,r2,2
   87784:	dc000f15 	stw	r16,60(sp)
   87788:	dfc01215 	stw	ra,72(sp)
   8778c:	dc801115 	stw	r18,68(sp)
   87790:	2821883a 	mov	r16,r5
   87794:	2023883a 	mov	r17,r4
   87798:	10000b26 	beq	r2,zero,877c8 <__smakebuf_r+0x54>
   8779c:	28c010c4 	addi	r3,r5,67
   877a0:	00800044 	movi	r2,1
   877a4:	28800515 	stw	r2,20(r5)
   877a8:	28c00415 	stw	r3,16(r5)
   877ac:	28c00015 	stw	r3,0(r5)
   877b0:	dfc01217 	ldw	ra,72(sp)
   877b4:	dc801117 	ldw	r18,68(sp)
   877b8:	dc401017 	ldw	r17,64(sp)
   877bc:	dc000f17 	ldw	r16,60(sp)
   877c0:	dec01304 	addi	sp,sp,76
   877c4:	f800283a 	ret
   877c8:	2940038f 	ldh	r5,14(r5)
   877cc:	28002116 	blt	r5,zero,87854 <__smakebuf_r+0xe0>
   877d0:	d80d883a 	mov	r6,sp
   877d4:	0089f800 	call	89f80 <_fstat_r>
   877d8:	10001e16 	blt	r2,zero,87854 <__smakebuf_r+0xe0>
   877dc:	d8800117 	ldw	r2,4(sp)
   877e0:	00e00014 	movui	r3,32768
   877e4:	113c000c 	andi	r4,r2,61440
   877e8:	20c03126 	beq	r4,r3,878b0 <__smakebuf_r+0x13c>
   877ec:	8080030b 	ldhu	r2,12(r16)
   877f0:	00c80004 	movi	r3,8192
   877f4:	10820014 	ori	r2,r2,2048
   877f8:	8080030d 	sth	r2,12(r16)
   877fc:	20c01e26 	beq	r4,r3,87878 <__smakebuf_r+0x104>
   87800:	04810004 	movi	r18,1024
   87804:	8809883a 	mov	r4,r17
   87808:	900b883a 	mov	r5,r18
   8780c:	00879080 	call	87908 <_malloc_r>
   87810:	1009883a 	mov	r4,r2
   87814:	10003126 	beq	r2,zero,878dc <__smakebuf_r+0x168>
   87818:	80c0030b 	ldhu	r3,12(r16)
   8781c:	00800234 	movhi	r2,8
   87820:	109aab04 	addi	r2,r2,27308
   87824:	88800f15 	stw	r2,60(r17)
   87828:	18c02014 	ori	r3,r3,128
   8782c:	84800515 	stw	r18,20(r16)
   87830:	80c0030d 	sth	r3,12(r16)
   87834:	81000415 	stw	r4,16(r16)
   87838:	81000015 	stw	r4,0(r16)
   8783c:	dfc01217 	ldw	ra,72(sp)
   87840:	dc801117 	ldw	r18,68(sp)
   87844:	dc401017 	ldw	r17,64(sp)
   87848:	dc000f17 	ldw	r16,60(sp)
   8784c:	dec01304 	addi	sp,sp,76
   87850:	f800283a 	ret
   87854:	80c0030b 	ldhu	r3,12(r16)
   87858:	1880200c 	andi	r2,r3,128
   8785c:	10000426 	beq	r2,zero,87870 <__smakebuf_r+0xfc>
   87860:	04801004 	movi	r18,64
   87864:	18820014 	ori	r2,r3,2048
   87868:	8080030d 	sth	r2,12(r16)
   8786c:	003fe506 	br	87804 <__smakebuf_r+0x90>
   87870:	04810004 	movi	r18,1024
   87874:	003ffb06 	br	87864 <__smakebuf_r+0xf0>
   87878:	8140038f 	ldh	r5,14(r16)
   8787c:	8809883a 	mov	r4,r17
   87880:	0089ff40 	call	89ff4 <_isatty_r>
   87884:	103fde26 	beq	r2,zero,87800 <__smakebuf_r+0x8c>
   87888:	8080030b 	ldhu	r2,12(r16)
   8788c:	80c010c4 	addi	r3,r16,67
   87890:	04810004 	movi	r18,1024
   87894:	10800054 	ori	r2,r2,1
   87898:	8080030d 	sth	r2,12(r16)
   8789c:	00800044 	movi	r2,1
   878a0:	80c00415 	stw	r3,16(r16)
   878a4:	80800515 	stw	r2,20(r16)
   878a8:	80c00015 	stw	r3,0(r16)
   878ac:	003fd506 	br	87804 <__smakebuf_r+0x90>
   878b0:	80c00a17 	ldw	r3,40(r16)
   878b4:	00800274 	movhi	r2,9
   878b8:	10a6ab04 	addi	r2,r2,-25940
   878bc:	18bfcb1e 	bne	r3,r2,877ec <__smakebuf_r+0x78>
   878c0:	8080030b 	ldhu	r2,12(r16)
   878c4:	00c10004 	movi	r3,1024
   878c8:	1825883a 	mov	r18,r3
   878cc:	10c4b03a 	or	r2,r2,r3
   878d0:	8080030d 	sth	r2,12(r16)
   878d4:	80c01315 	stw	r3,76(r16)
   878d8:	003fca06 	br	87804 <__smakebuf_r+0x90>
   878dc:	8100030b 	ldhu	r4,12(r16)
   878e0:	2080800c 	andi	r2,r4,512
   878e4:	103fb21e 	bne	r2,zero,877b0 <__smakebuf_r+0x3c>
   878e8:	80c010c4 	addi	r3,r16,67
   878ec:	21000094 	ori	r4,r4,2
   878f0:	00800044 	movi	r2,1
   878f4:	80800515 	stw	r2,20(r16)
   878f8:	8100030d 	sth	r4,12(r16)
   878fc:	80c00415 	stw	r3,16(r16)
   87900:	80c00015 	stw	r3,0(r16)
   87904:	003faa06 	br	877b0 <__smakebuf_r+0x3c>

00087908 <_malloc_r>:
   87908:	defff604 	addi	sp,sp,-40
   8790c:	28c002c4 	addi	r3,r5,11
   87910:	00800584 	movi	r2,22
   87914:	dc800215 	stw	r18,8(sp)
   87918:	dfc00915 	stw	ra,36(sp)
   8791c:	df000815 	stw	fp,32(sp)
   87920:	ddc00715 	stw	r23,28(sp)
   87924:	dd800615 	stw	r22,24(sp)
   87928:	dd400515 	stw	r21,20(sp)
   8792c:	dd000415 	stw	r20,16(sp)
   87930:	dcc00315 	stw	r19,12(sp)
   87934:	dc400115 	stw	r17,4(sp)
   87938:	dc000015 	stw	r16,0(sp)
   8793c:	2025883a 	mov	r18,r4
   87940:	10c01236 	bltu	r2,r3,8798c <_malloc_r+0x84>
   87944:	04400404 	movi	r17,16
   87948:	8940142e 	bgeu	r17,r5,8799c <_malloc_r+0x94>
   8794c:	00800304 	movi	r2,12
   87950:	0007883a 	mov	r3,zero
   87954:	90800015 	stw	r2,0(r18)
   87958:	1805883a 	mov	r2,r3
   8795c:	dfc00917 	ldw	ra,36(sp)
   87960:	df000817 	ldw	fp,32(sp)
   87964:	ddc00717 	ldw	r23,28(sp)
   87968:	dd800617 	ldw	r22,24(sp)
   8796c:	dd400517 	ldw	r21,20(sp)
   87970:	dd000417 	ldw	r20,16(sp)
   87974:	dcc00317 	ldw	r19,12(sp)
   87978:	dc800217 	ldw	r18,8(sp)
   8797c:	dc400117 	ldw	r17,4(sp)
   87980:	dc000017 	ldw	r16,0(sp)
   87984:	dec00a04 	addi	sp,sp,40
   87988:	f800283a 	ret
   8798c:	00bffe04 	movi	r2,-8
   87990:	18a2703a 	and	r17,r3,r2
   87994:	883fed16 	blt	r17,zero,8794c <_malloc_r+0x44>
   87998:	897fec36 	bltu	r17,r5,8794c <_malloc_r+0x44>
   8799c:	9009883a 	mov	r4,r18
   879a0:	008d6900 	call	8d690 <__malloc_lock>
   879a4:	00807dc4 	movi	r2,503
   879a8:	14402b2e 	bgeu	r2,r17,87a58 <_malloc_r+0x150>
   879ac:	8806d27a 	srli	r3,r17,9
   879b0:	18003f1e 	bne	r3,zero,87ab0 <_malloc_r+0x1a8>
   879b4:	880cd0fa 	srli	r6,r17,3
   879b8:	300490fa 	slli	r2,r6,3
   879bc:	02c002b4 	movhi	r11,10
   879c0:	5ae72f04 	addi	r11,r11,-25412
   879c4:	12cb883a 	add	r5,r2,r11
   879c8:	2c000317 	ldw	r16,12(r5)
   879cc:	580f883a 	mov	r7,r11
   879d0:	2c00041e 	bne	r5,r16,879e4 <_malloc_r+0xdc>
   879d4:	00000a06 	br	87a00 <_malloc_r+0xf8>
   879d8:	1800860e 	bge	r3,zero,87bf4 <_malloc_r+0x2ec>
   879dc:	84000317 	ldw	r16,12(r16)
   879e0:	2c000726 	beq	r5,r16,87a00 <_malloc_r+0xf8>
   879e4:	80800117 	ldw	r2,4(r16)
   879e8:	00ffff04 	movi	r3,-4
   879ec:	10c8703a 	and	r4,r2,r3
   879f0:	2447c83a 	sub	r3,r4,r17
   879f4:	008003c4 	movi	r2,15
   879f8:	10fff70e 	bge	r2,r3,879d8 <_malloc_r+0xd0>
   879fc:	31bfffc4 	addi	r6,r6,-1
   87a00:	32400044 	addi	r9,r6,1
   87a04:	028002b4 	movhi	r10,10
   87a08:	52a73104 	addi	r10,r10,-25404
   87a0c:	54000217 	ldw	r16,8(r10)
   87a10:	8280a026 	beq	r16,r10,87c94 <_malloc_r+0x38c>
   87a14:	80800117 	ldw	r2,4(r16)
   87a18:	00ffff04 	movi	r3,-4
   87a1c:	10ca703a 	and	r5,r2,r3
   87a20:	2c4dc83a 	sub	r6,r5,r17
   87a24:	008003c4 	movi	r2,15
   87a28:	11808316 	blt	r2,r6,87c38 <_malloc_r+0x330>
   87a2c:	52800315 	stw	r10,12(r10)
   87a30:	52800215 	stw	r10,8(r10)
   87a34:	30002916 	blt	r6,zero,87adc <_malloc_r+0x1d4>
   87a38:	8147883a 	add	r3,r16,r5
   87a3c:	18800117 	ldw	r2,4(r3)
   87a40:	9009883a 	mov	r4,r18
   87a44:	10800054 	ori	r2,r2,1
   87a48:	18800115 	stw	r2,4(r3)
   87a4c:	008d7980 	call	8d798 <__malloc_unlock>
   87a50:	80c00204 	addi	r3,r16,8
   87a54:	003fc006 	br	87958 <_malloc_r+0x50>
   87a58:	02c002b4 	movhi	r11,10
   87a5c:	5ae72f04 	addi	r11,r11,-25412
   87a60:	8ac5883a 	add	r2,r17,r11
   87a64:	14000317 	ldw	r16,12(r2)
   87a68:	580f883a 	mov	r7,r11
   87a6c:	8806d0fa 	srli	r3,r17,3
   87a70:	14006c26 	beq	r2,r16,87c24 <_malloc_r+0x31c>
   87a74:	80c00117 	ldw	r3,4(r16)
   87a78:	00bfff04 	movi	r2,-4
   87a7c:	81800317 	ldw	r6,12(r16)
   87a80:	1886703a 	and	r3,r3,r2
   87a84:	80c7883a 	add	r3,r16,r3
   87a88:	18800117 	ldw	r2,4(r3)
   87a8c:	81400217 	ldw	r5,8(r16)
   87a90:	9009883a 	mov	r4,r18
   87a94:	10800054 	ori	r2,r2,1
   87a98:	18800115 	stw	r2,4(r3)
   87a9c:	31400215 	stw	r5,8(r6)
   87aa0:	29800315 	stw	r6,12(r5)
   87aa4:	008d7980 	call	8d798 <__malloc_unlock>
   87aa8:	80c00204 	addi	r3,r16,8
   87aac:	003faa06 	br	87958 <_malloc_r+0x50>
   87ab0:	00800104 	movi	r2,4
   87ab4:	10c0052e 	bgeu	r2,r3,87acc <_malloc_r+0x1c4>
   87ab8:	00800504 	movi	r2,20
   87abc:	10c07836 	bltu	r2,r3,87ca0 <_malloc_r+0x398>
   87ac0:	198016c4 	addi	r6,r3,91
   87ac4:	300490fa 	slli	r2,r6,3
   87ac8:	003fbc06 	br	879bc <_malloc_r+0xb4>
   87acc:	8804d1ba 	srli	r2,r17,6
   87ad0:	11800e04 	addi	r6,r2,56
   87ad4:	300490fa 	slli	r2,r6,3
   87ad8:	003fb806 	br	879bc <_malloc_r+0xb4>
   87adc:	00807fc4 	movi	r2,511
   87ae0:	1140bb36 	bltu	r2,r5,87dd0 <_malloc_r+0x4c8>
   87ae4:	2806d0fa 	srli	r3,r5,3
   87ae8:	573ffe04 	addi	fp,r10,-8
   87aec:	00800044 	movi	r2,1
   87af0:	180890fa 	slli	r4,r3,3
   87af4:	1807d0ba 	srai	r3,r3,2
   87af8:	e1c00117 	ldw	r7,4(fp)
   87afc:	5909883a 	add	r4,r11,r4
   87b00:	21400217 	ldw	r5,8(r4)
   87b04:	10c4983a 	sll	r2,r2,r3
   87b08:	81000315 	stw	r4,12(r16)
   87b0c:	81400215 	stw	r5,8(r16)
   87b10:	388eb03a 	or	r7,r7,r2
   87b14:	2c000315 	stw	r16,12(r5)
   87b18:	24000215 	stw	r16,8(r4)
   87b1c:	e1c00115 	stw	r7,4(fp)
   87b20:	4807883a 	mov	r3,r9
   87b24:	4800cd16 	blt	r9,zero,87e5c <_malloc_r+0x554>
   87b28:	1807d0ba 	srai	r3,r3,2
   87b2c:	00800044 	movi	r2,1
   87b30:	10c8983a 	sll	r4,r2,r3
   87b34:	39004436 	bltu	r7,r4,87c48 <_malloc_r+0x340>
   87b38:	21c4703a 	and	r2,r4,r7
   87b3c:	10000a1e 	bne	r2,zero,87b68 <_malloc_r+0x260>
   87b40:	2109883a 	add	r4,r4,r4
   87b44:	00bfff04 	movi	r2,-4
   87b48:	4884703a 	and	r2,r9,r2
   87b4c:	3906703a 	and	r3,r7,r4
   87b50:	12400104 	addi	r9,r2,4
   87b54:	1800041e 	bne	r3,zero,87b68 <_malloc_r+0x260>
   87b58:	2109883a 	add	r4,r4,r4
   87b5c:	3904703a 	and	r2,r7,r4
   87b60:	4a400104 	addi	r9,r9,4
   87b64:	103ffc26 	beq	r2,zero,87b58 <_malloc_r+0x250>
   87b68:	480490fa 	slli	r2,r9,3
   87b6c:	4819883a 	mov	r12,r9
   87b70:	023fff04 	movi	r8,-4
   87b74:	589b883a 	add	r13,r11,r2
   87b78:	6807883a 	mov	r3,r13
   87b7c:	014003c4 	movi	r5,15
   87b80:	1c000317 	ldw	r16,12(r3)
   87b84:	1c00041e 	bne	r3,r16,87b98 <_malloc_r+0x290>
   87b88:	0000a706 	br	87e28 <_malloc_r+0x520>
   87b8c:	3000ab0e 	bge	r6,zero,87e3c <_malloc_r+0x534>
   87b90:	84000317 	ldw	r16,12(r16)
   87b94:	1c00a426 	beq	r3,r16,87e28 <_malloc_r+0x520>
   87b98:	80800117 	ldw	r2,4(r16)
   87b9c:	1204703a 	and	r2,r2,r8
   87ba0:	144dc83a 	sub	r6,r2,r17
   87ba4:	29bff90e 	bge	r5,r6,87b8c <_malloc_r+0x284>
   87ba8:	81000317 	ldw	r4,12(r16)
   87bac:	80c00217 	ldw	r3,8(r16)
   87bb0:	89400054 	ori	r5,r17,1
   87bb4:	8445883a 	add	r2,r16,r17
   87bb8:	20c00215 	stw	r3,8(r4)
   87bbc:	19000315 	stw	r4,12(r3)
   87bc0:	81400115 	stw	r5,4(r16)
   87bc4:	1187883a 	add	r3,r2,r6
   87bc8:	31000054 	ori	r4,r6,1
   87bcc:	50800315 	stw	r2,12(r10)
   87bd0:	50800215 	stw	r2,8(r10)
   87bd4:	19800015 	stw	r6,0(r3)
   87bd8:	11000115 	stw	r4,4(r2)
   87bdc:	12800215 	stw	r10,8(r2)
   87be0:	12800315 	stw	r10,12(r2)
   87be4:	9009883a 	mov	r4,r18
   87be8:	008d7980 	call	8d798 <__malloc_unlock>
   87bec:	80c00204 	addi	r3,r16,8
   87bf0:	003f5906 	br	87958 <_malloc_r+0x50>
   87bf4:	8109883a 	add	r4,r16,r4
   87bf8:	20800117 	ldw	r2,4(r4)
   87bfc:	80c00217 	ldw	r3,8(r16)
   87c00:	81400317 	ldw	r5,12(r16)
   87c04:	10800054 	ori	r2,r2,1
   87c08:	20800115 	stw	r2,4(r4)
   87c0c:	28c00215 	stw	r3,8(r5)
   87c10:	19400315 	stw	r5,12(r3)
   87c14:	9009883a 	mov	r4,r18
   87c18:	008d7980 	call	8d798 <__malloc_unlock>
   87c1c:	80c00204 	addi	r3,r16,8
   87c20:	003f4d06 	br	87958 <_malloc_r+0x50>
   87c24:	80800204 	addi	r2,r16,8
   87c28:	14000317 	ldw	r16,12(r2)
   87c2c:	143f911e 	bne	r2,r16,87a74 <_malloc_r+0x16c>
   87c30:	1a400084 	addi	r9,r3,2
   87c34:	003f7306 	br	87a04 <_malloc_r+0xfc>
   87c38:	88c00054 	ori	r3,r17,1
   87c3c:	8445883a 	add	r2,r16,r17
   87c40:	80c00115 	stw	r3,4(r16)
   87c44:	003fdf06 	br	87bc4 <_malloc_r+0x2bc>
   87c48:	e4000217 	ldw	r16,8(fp)
   87c4c:	00bfff04 	movi	r2,-4
   87c50:	80c00117 	ldw	r3,4(r16)
   87c54:	802d883a 	mov	r22,r16
   87c58:	18aa703a 	and	r21,r3,r2
   87c5c:	ac401636 	bltu	r21,r17,87cb8 <_malloc_r+0x3b0>
   87c60:	ac49c83a 	sub	r4,r21,r17
   87c64:	008003c4 	movi	r2,15
   87c68:	1100130e 	bge	r2,r4,87cb8 <_malloc_r+0x3b0>
   87c6c:	88800054 	ori	r2,r17,1
   87c70:	8447883a 	add	r3,r16,r17
   87c74:	80800115 	stw	r2,4(r16)
   87c78:	20800054 	ori	r2,r4,1
   87c7c:	18800115 	stw	r2,4(r3)
   87c80:	e0c00215 	stw	r3,8(fp)
   87c84:	9009883a 	mov	r4,r18
   87c88:	008d7980 	call	8d798 <__malloc_unlock>
   87c8c:	80c00204 	addi	r3,r16,8
   87c90:	003f3106 	br	87958 <_malloc_r+0x50>
   87c94:	39c00117 	ldw	r7,4(r7)
   87c98:	573ffe04 	addi	fp,r10,-8
   87c9c:	003fa006 	br	87b20 <_malloc_r+0x218>
   87ca0:	00801504 	movi	r2,84
   87ca4:	10c06736 	bltu	r2,r3,87e44 <_malloc_r+0x53c>
   87ca8:	8804d33a 	srli	r2,r17,12
   87cac:	11801b84 	addi	r6,r2,110
   87cb0:	300490fa 	slli	r2,r6,3
   87cb4:	003f4106 	br	879bc <_malloc_r+0xb4>
   87cb8:	d0a6f817 	ldw	r2,-25632(gp)
   87cbc:	d0e00617 	ldw	r3,-32744(gp)
   87cc0:	053fffc4 	movi	r20,-1
   87cc4:	10800404 	addi	r2,r2,16
   87cc8:	88a7883a 	add	r19,r17,r2
   87ccc:	1d000326 	beq	r3,r20,87cdc <_malloc_r+0x3d4>
   87cd0:	98c3ffc4 	addi	r3,r19,4095
   87cd4:	00bc0004 	movi	r2,-4096
   87cd8:	18a6703a 	and	r19,r3,r2
   87cdc:	9009883a 	mov	r4,r18
   87ce0:	980b883a 	mov	r5,r19
   87ce4:	0089a340 	call	89a34 <_sbrk_r>
   87ce8:	1009883a 	mov	r4,r2
   87cec:	15000426 	beq	r2,r20,87d00 <_malloc_r+0x3f8>
   87cf0:	854b883a 	add	r5,r16,r21
   87cf4:	1029883a 	mov	r20,r2
   87cf8:	11405a2e 	bgeu	r2,r5,87e64 <_malloc_r+0x55c>
   87cfc:	87000c26 	beq	r16,fp,87d30 <_malloc_r+0x428>
   87d00:	e4000217 	ldw	r16,8(fp)
   87d04:	80c00117 	ldw	r3,4(r16)
   87d08:	00bfff04 	movi	r2,-4
   87d0c:	1884703a 	and	r2,r3,r2
   87d10:	14400336 	bltu	r2,r17,87d20 <_malloc_r+0x418>
   87d14:	1449c83a 	sub	r4,r2,r17
   87d18:	008003c4 	movi	r2,15
   87d1c:	113fd316 	blt	r2,r4,87c6c <_malloc_r+0x364>
   87d20:	9009883a 	mov	r4,r18
   87d24:	008d7980 	call	8d798 <__malloc_unlock>
   87d28:	0007883a 	mov	r3,zero
   87d2c:	003f0a06 	br	87958 <_malloc_r+0x50>
   87d30:	05c002b4 	movhi	r23,10
   87d34:	bdf3dc04 	addi	r23,r23,-12432
   87d38:	b8800017 	ldw	r2,0(r23)
   87d3c:	988d883a 	add	r6,r19,r2
   87d40:	b9800015 	stw	r6,0(r23)
   87d44:	d0e00617 	ldw	r3,-32744(gp)
   87d48:	00bfffc4 	movi	r2,-1
   87d4c:	18808e26 	beq	r3,r2,87f88 <_malloc_r+0x680>
   87d50:	2145c83a 	sub	r2,r4,r5
   87d54:	3085883a 	add	r2,r6,r2
   87d58:	b8800015 	stw	r2,0(r23)
   87d5c:	20c001cc 	andi	r3,r4,7
   87d60:	18005f1e 	bne	r3,zero,87ee0 <_malloc_r+0x5d8>
   87d64:	000b883a 	mov	r5,zero
   87d68:	a4c5883a 	add	r2,r20,r19
   87d6c:	1083ffcc 	andi	r2,r2,4095
   87d70:	00c40004 	movi	r3,4096
   87d74:	1887c83a 	sub	r3,r3,r2
   87d78:	28e7883a 	add	r19,r5,r3
   87d7c:	9009883a 	mov	r4,r18
   87d80:	980b883a 	mov	r5,r19
   87d84:	0089a340 	call	89a34 <_sbrk_r>
   87d88:	1007883a 	mov	r3,r2
   87d8c:	00bfffc4 	movi	r2,-1
   87d90:	18807a26 	beq	r3,r2,87f7c <_malloc_r+0x674>
   87d94:	1d05c83a 	sub	r2,r3,r20
   87d98:	9885883a 	add	r2,r19,r2
   87d9c:	10c00054 	ori	r3,r2,1
   87da0:	b8800017 	ldw	r2,0(r23)
   87da4:	a021883a 	mov	r16,r20
   87da8:	a0c00115 	stw	r3,4(r20)
   87dac:	9885883a 	add	r2,r19,r2
   87db0:	b8800015 	stw	r2,0(r23)
   87db4:	e5000215 	stw	r20,8(fp)
   87db8:	b7003626 	beq	r22,fp,87e94 <_malloc_r+0x58c>
   87dbc:	018003c4 	movi	r6,15
   87dc0:	35404b36 	bltu	r6,r21,87ef0 <_malloc_r+0x5e8>
   87dc4:	00800044 	movi	r2,1
   87dc8:	a0800115 	stw	r2,4(r20)
   87dcc:	003fcd06 	br	87d04 <_malloc_r+0x3fc>
   87dd0:	2808d27a 	srli	r4,r5,9
   87dd4:	2000371e 	bne	r4,zero,87eb4 <_malloc_r+0x5ac>
   87dd8:	2808d0fa 	srli	r4,r5,3
   87ddc:	200690fa 	slli	r3,r4,3
   87de0:	1ad1883a 	add	r8,r3,r11
   87de4:	41800217 	ldw	r6,8(r8)
   87de8:	41805b26 	beq	r8,r6,87f58 <_malloc_r+0x650>
   87dec:	30800117 	ldw	r2,4(r6)
   87df0:	00ffff04 	movi	r3,-4
   87df4:	10c4703a 	and	r2,r2,r3
   87df8:	2880022e 	bgeu	r5,r2,87e04 <_malloc_r+0x4fc>
   87dfc:	31800217 	ldw	r6,8(r6)
   87e00:	41bffa1e 	bne	r8,r6,87dec <_malloc_r+0x4e4>
   87e04:	32000317 	ldw	r8,12(r6)
   87e08:	39c00117 	ldw	r7,4(r7)
   87e0c:	82000315 	stw	r8,12(r16)
   87e10:	81800215 	stw	r6,8(r16)
   87e14:	070002b4 	movhi	fp,10
   87e18:	e7272f04 	addi	fp,fp,-25412
   87e1c:	34000315 	stw	r16,12(r6)
   87e20:	44000215 	stw	r16,8(r8)
   87e24:	003f3e06 	br	87b20 <_malloc_r+0x218>
   87e28:	63000044 	addi	r12,r12,1
   87e2c:	608000cc 	andi	r2,r12,3
   87e30:	10005d26 	beq	r2,zero,87fa8 <_malloc_r+0x6a0>
   87e34:	18c00204 	addi	r3,r3,8
   87e38:	003f5106 	br	87b80 <_malloc_r+0x278>
   87e3c:	8089883a 	add	r4,r16,r2
   87e40:	003f6d06 	br	87bf8 <_malloc_r+0x2f0>
   87e44:	00805504 	movi	r2,340
   87e48:	10c02036 	bltu	r2,r3,87ecc <_malloc_r+0x5c4>
   87e4c:	8804d3fa 	srli	r2,r17,15
   87e50:	11801dc4 	addi	r6,r2,119
   87e54:	300490fa 	slli	r2,r6,3
   87e58:	003ed806 	br	879bc <_malloc_r+0xb4>
   87e5c:	48c000c4 	addi	r3,r9,3
   87e60:	003f3106 	br	87b28 <_malloc_r+0x220>
   87e64:	05c002b4 	movhi	r23,10
   87e68:	bdf3dc04 	addi	r23,r23,-12432
   87e6c:	b8800017 	ldw	r2,0(r23)
   87e70:	988d883a 	add	r6,r19,r2
   87e74:	b9800015 	stw	r6,0(r23)
   87e78:	293fb21e 	bne	r5,r4,87d44 <_malloc_r+0x43c>
   87e7c:	2083ffcc 	andi	r2,r4,4095
   87e80:	103fb01e 	bne	r2,zero,87d44 <_malloc_r+0x43c>
   87e84:	e4000217 	ldw	r16,8(fp)
   87e88:	9d45883a 	add	r2,r19,r21
   87e8c:	10800054 	ori	r2,r2,1
   87e90:	80800115 	stw	r2,4(r16)
   87e94:	b8c00017 	ldw	r3,0(r23)
   87e98:	d0a6f917 	ldw	r2,-25628(gp)
   87e9c:	10c0012e 	bgeu	r2,r3,87ea4 <_malloc_r+0x59c>
   87ea0:	d0e6f915 	stw	r3,-25628(gp)
   87ea4:	d0a6fa17 	ldw	r2,-25624(gp)
   87ea8:	10ff962e 	bgeu	r2,r3,87d04 <_malloc_r+0x3fc>
   87eac:	d0e6fa15 	stw	r3,-25624(gp)
   87eb0:	003f9406 	br	87d04 <_malloc_r+0x3fc>
   87eb4:	00800104 	movi	r2,4
   87eb8:	11001e36 	bltu	r2,r4,87f34 <_malloc_r+0x62c>
   87ebc:	2804d1ba 	srli	r2,r5,6
   87ec0:	11000e04 	addi	r4,r2,56
   87ec4:	200690fa 	slli	r3,r4,3
   87ec8:	003fc506 	br	87de0 <_malloc_r+0x4d8>
   87ecc:	00815504 	movi	r2,1364
   87ed0:	10c01d2e 	bgeu	r2,r3,87f48 <_malloc_r+0x640>
   87ed4:	01801f84 	movi	r6,126
   87ed8:	0080fc04 	movi	r2,1008
   87edc:	003eb706 	br	879bc <_malloc_r+0xb4>
   87ee0:	00800204 	movi	r2,8
   87ee4:	10cbc83a 	sub	r5,r2,r3
   87ee8:	2169883a 	add	r20,r4,r5
   87eec:	003f9e06 	br	87d68 <_malloc_r+0x460>
   87ef0:	00bffe04 	movi	r2,-8
   87ef4:	a93ffd04 	addi	r4,r21,-12
   87ef8:	2088703a 	and	r4,r4,r2
   87efc:	b10b883a 	add	r5,r22,r4
   87f00:	00c00144 	movi	r3,5
   87f04:	28c00215 	stw	r3,8(r5)
   87f08:	28c00115 	stw	r3,4(r5)
   87f0c:	b0800117 	ldw	r2,4(r22)
   87f10:	1080004c 	andi	r2,r2,1
   87f14:	2084b03a 	or	r2,r4,r2
   87f18:	b0800115 	stw	r2,4(r22)
   87f1c:	313fdd2e 	bgeu	r6,r4,87e94 <_malloc_r+0x58c>
   87f20:	b1400204 	addi	r5,r22,8
   87f24:	9009883a 	mov	r4,r18
   87f28:	0086d800 	call	86d80 <_free_r>
   87f2c:	e4000217 	ldw	r16,8(fp)
   87f30:	003fd806 	br	87e94 <_malloc_r+0x58c>
   87f34:	00800504 	movi	r2,20
   87f38:	11001536 	bltu	r2,r4,87f90 <_malloc_r+0x688>
   87f3c:	210016c4 	addi	r4,r4,91
   87f40:	200690fa 	slli	r3,r4,3
   87f44:	003fa606 	br	87de0 <_malloc_r+0x4d8>
   87f48:	8804d4ba 	srli	r2,r17,18
   87f4c:	11801f04 	addi	r6,r2,124
   87f50:	300490fa 	slli	r2,r6,3
   87f54:	003e9906 	br	879bc <_malloc_r+0xb4>
   87f58:	2009d0ba 	srai	r4,r4,2
   87f5c:	014002b4 	movhi	r5,10
   87f60:	29672f04 	addi	r5,r5,-25412
   87f64:	00c00044 	movi	r3,1
   87f68:	28800117 	ldw	r2,4(r5)
   87f6c:	1906983a 	sll	r3,r3,r4
   87f70:	10c4b03a 	or	r2,r2,r3
   87f74:	28800115 	stw	r2,4(r5)
   87f78:	003fa306 	br	87e08 <_malloc_r+0x500>
   87f7c:	0027883a 	mov	r19,zero
   87f80:	00c00044 	movi	r3,1
   87f84:	003f8606 	br	87da0 <_malloc_r+0x498>
   87f88:	d1200615 	stw	r4,-32744(gp)
   87f8c:	003f7306 	br	87d5c <_malloc_r+0x454>
   87f90:	00801504 	movi	r2,84
   87f94:	11001936 	bltu	r2,r4,87ffc <_malloc_r+0x6f4>
   87f98:	2804d33a 	srli	r2,r5,12
   87f9c:	11001b84 	addi	r4,r2,110
   87fa0:	200690fa 	slli	r3,r4,3
   87fa4:	003f8e06 	br	87de0 <_malloc_r+0x4d8>
   87fa8:	480b883a 	mov	r5,r9
   87fac:	6807883a 	mov	r3,r13
   87fb0:	288000cc 	andi	r2,r5,3
   87fb4:	18fffe04 	addi	r3,r3,-8
   87fb8:	297fffc4 	addi	r5,r5,-1
   87fbc:	10001526 	beq	r2,zero,88014 <_malloc_r+0x70c>
   87fc0:	18800217 	ldw	r2,8(r3)
   87fc4:	10fffa26 	beq	r2,r3,87fb0 <_malloc_r+0x6a8>
   87fc8:	2109883a 	add	r4,r4,r4
   87fcc:	393f1e36 	bltu	r7,r4,87c48 <_malloc_r+0x340>
   87fd0:	203f1d26 	beq	r4,zero,87c48 <_malloc_r+0x340>
   87fd4:	21c4703a 	and	r2,r4,r7
   87fd8:	10000226 	beq	r2,zero,87fe4 <_malloc_r+0x6dc>
   87fdc:	6013883a 	mov	r9,r12
   87fe0:	003ee106 	br	87b68 <_malloc_r+0x260>
   87fe4:	2109883a 	add	r4,r4,r4
   87fe8:	3904703a 	and	r2,r7,r4
   87fec:	63000104 	addi	r12,r12,4
   87ff0:	103ffc26 	beq	r2,zero,87fe4 <_malloc_r+0x6dc>
   87ff4:	6013883a 	mov	r9,r12
   87ff8:	003edb06 	br	87b68 <_malloc_r+0x260>
   87ffc:	00805504 	movi	r2,340
   88000:	11000836 	bltu	r2,r4,88024 <_malloc_r+0x71c>
   88004:	2804d3fa 	srli	r2,r5,15
   88008:	11001dc4 	addi	r4,r2,119
   8800c:	200690fa 	slli	r3,r4,3
   88010:	003f7306 	br	87de0 <_malloc_r+0x4d8>
   88014:	0104303a 	nor	r2,zero,r4
   88018:	388e703a 	and	r7,r7,r2
   8801c:	e1c00115 	stw	r7,4(fp)
   88020:	003fe906 	br	87fc8 <_malloc_r+0x6c0>
   88024:	00815504 	movi	r2,1364
   88028:	1100032e 	bgeu	r2,r4,88038 <_malloc_r+0x730>
   8802c:	01001f84 	movi	r4,126
   88030:	00c0fc04 	movi	r3,1008
   88034:	003f6a06 	br	87de0 <_malloc_r+0x4d8>
   88038:	2804d4ba 	srli	r2,r5,18
   8803c:	11001f04 	addi	r4,r2,124
   88040:	200690fa 	slli	r3,r4,3
   88044:	003f6606 	br	87de0 <_malloc_r+0x4d8>

00088048 <memchr>:
   88048:	008000c4 	movi	r2,3
   8804c:	29403fcc 	andi	r5,r5,255
   88050:	2007883a 	mov	r3,r4
   88054:	1180022e 	bgeu	r2,r6,88060 <memchr+0x18>
   88058:	2084703a 	and	r2,r4,r2
   8805c:	10000b26 	beq	r2,zero,8808c <memchr+0x44>
   88060:	313fffc4 	addi	r4,r6,-1
   88064:	3000051e 	bne	r6,zero,8807c <memchr+0x34>
   88068:	00002c06 	br	8811c <memchr+0xd4>
   8806c:	213fffc4 	addi	r4,r4,-1
   88070:	00bfffc4 	movi	r2,-1
   88074:	18c00044 	addi	r3,r3,1
   88078:	20802826 	beq	r4,r2,8811c <memchr+0xd4>
   8807c:	18800003 	ldbu	r2,0(r3)
   88080:	28bffa1e 	bne	r5,r2,8806c <memchr+0x24>
   88084:	1805883a 	mov	r2,r3
   88088:	f800283a 	ret
   8808c:	0011883a 	mov	r8,zero
   88090:	0007883a 	mov	r3,zero
   88094:	01c00104 	movi	r7,4
   88098:	4004923a 	slli	r2,r8,8
   8809c:	18c00044 	addi	r3,r3,1
   880a0:	1151883a 	add	r8,r2,r5
   880a4:	19fffc1e 	bne	r3,r7,88098 <memchr+0x50>
   880a8:	02bfbff4 	movhi	r10,65279
   880ac:	52bfbfc4 	addi	r10,r10,-257
   880b0:	02602074 	movhi	r9,32897
   880b4:	4a602004 	addi	r9,r9,-32640
   880b8:	02c000c4 	movi	r11,3
   880bc:	20800017 	ldw	r2,0(r4)
   880c0:	31bfff04 	addi	r6,r6,-4
   880c4:	200f883a 	mov	r7,r4
   880c8:	1204f03a 	xor	r2,r2,r8
   880cc:	1287883a 	add	r3,r2,r10
   880d0:	1a46703a 	and	r3,r3,r9
   880d4:	0084303a 	nor	r2,zero,r2
   880d8:	10c4703a 	and	r2,r2,r3
   880dc:	10000b26 	beq	r2,zero,8810c <memchr+0xc4>
   880e0:	20800003 	ldbu	r2,0(r4)
   880e4:	28800f26 	beq	r5,r2,88124 <memchr+0xdc>
   880e8:	20800043 	ldbu	r2,1(r4)
   880ec:	21c00044 	addi	r7,r4,1
   880f0:	28800c26 	beq	r5,r2,88124 <memchr+0xdc>
   880f4:	20800083 	ldbu	r2,2(r4)
   880f8:	21c00084 	addi	r7,r4,2
   880fc:	28800926 	beq	r5,r2,88124 <memchr+0xdc>
   88100:	208000c3 	ldbu	r2,3(r4)
   88104:	21c000c4 	addi	r7,r4,3
   88108:	28800626 	beq	r5,r2,88124 <memchr+0xdc>
   8810c:	21000104 	addi	r4,r4,4
   88110:	59bfea36 	bltu	r11,r6,880bc <memchr+0x74>
   88114:	2007883a 	mov	r3,r4
   88118:	003fd106 	br	88060 <memchr+0x18>
   8811c:	0005883a 	mov	r2,zero
   88120:	f800283a 	ret
   88124:	3805883a 	mov	r2,r7
   88128:	f800283a 	ret

0008812c <memcpy>:
   8812c:	01c003c4 	movi	r7,15
   88130:	2007883a 	mov	r3,r4
   88134:	3980032e 	bgeu	r7,r6,88144 <memcpy+0x18>
   88138:	2904b03a 	or	r2,r5,r4
   8813c:	108000cc 	andi	r2,r2,3
   88140:	10000926 	beq	r2,zero,88168 <memcpy+0x3c>
   88144:	30000626 	beq	r6,zero,88160 <memcpy+0x34>
   88148:	30cd883a 	add	r6,r6,r3
   8814c:	28800003 	ldbu	r2,0(r5)
   88150:	29400044 	addi	r5,r5,1
   88154:	18800005 	stb	r2,0(r3)
   88158:	18c00044 	addi	r3,r3,1
   8815c:	30fffb1e 	bne	r6,r3,8814c <memcpy+0x20>
   88160:	2005883a 	mov	r2,r4
   88164:	f800283a 	ret
   88168:	3811883a 	mov	r8,r7
   8816c:	200f883a 	mov	r7,r4
   88170:	28c00017 	ldw	r3,0(r5)
   88174:	31bffc04 	addi	r6,r6,-16
   88178:	38c00015 	stw	r3,0(r7)
   8817c:	28800117 	ldw	r2,4(r5)
   88180:	38800115 	stw	r2,4(r7)
   88184:	28c00217 	ldw	r3,8(r5)
   88188:	38c00215 	stw	r3,8(r7)
   8818c:	28800317 	ldw	r2,12(r5)
   88190:	29400404 	addi	r5,r5,16
   88194:	38800315 	stw	r2,12(r7)
   88198:	39c00404 	addi	r7,r7,16
   8819c:	41bff436 	bltu	r8,r6,88170 <memcpy+0x44>
   881a0:	008000c4 	movi	r2,3
   881a4:	1180072e 	bgeu	r2,r6,881c4 <memcpy+0x98>
   881a8:	1007883a 	mov	r3,r2
   881ac:	28800017 	ldw	r2,0(r5)
   881b0:	31bfff04 	addi	r6,r6,-4
   881b4:	29400104 	addi	r5,r5,4
   881b8:	38800015 	stw	r2,0(r7)
   881bc:	39c00104 	addi	r7,r7,4
   881c0:	19bffa36 	bltu	r3,r6,881ac <memcpy+0x80>
   881c4:	3807883a 	mov	r3,r7
   881c8:	003fde06 	br	88144 <memcpy+0x18>

000881cc <memmove>:
   881cc:	2807883a 	mov	r3,r5
   881d0:	2011883a 	mov	r8,r4
   881d4:	29000c2e 	bgeu	r5,r4,88208 <memmove+0x3c>
   881d8:	298f883a 	add	r7,r5,r6
   881dc:	21c00a2e 	bgeu	r4,r7,88208 <memmove+0x3c>
   881e0:	30000726 	beq	r6,zero,88200 <memmove+0x34>
   881e4:	2187883a 	add	r3,r4,r6
   881e8:	198dc83a 	sub	r6,r3,r6
   881ec:	39ffffc4 	addi	r7,r7,-1
   881f0:	38800003 	ldbu	r2,0(r7)
   881f4:	18ffffc4 	addi	r3,r3,-1
   881f8:	18800005 	stb	r2,0(r3)
   881fc:	19bffb1e 	bne	r3,r6,881ec <memmove+0x20>
   88200:	2005883a 	mov	r2,r4
   88204:	f800283a 	ret
   88208:	01c003c4 	movi	r7,15
   8820c:	39800a36 	bltu	r7,r6,88238 <memmove+0x6c>
   88210:	303ffb26 	beq	r6,zero,88200 <memmove+0x34>
   88214:	400f883a 	mov	r7,r8
   88218:	320d883a 	add	r6,r6,r8
   8821c:	28800003 	ldbu	r2,0(r5)
   88220:	29400044 	addi	r5,r5,1
   88224:	38800005 	stb	r2,0(r7)
   88228:	39c00044 	addi	r7,r7,1
   8822c:	39bffb1e 	bne	r7,r6,8821c <memmove+0x50>
   88230:	2005883a 	mov	r2,r4
   88234:	f800283a 	ret
   88238:	1904b03a 	or	r2,r3,r4
   8823c:	108000cc 	andi	r2,r2,3
   88240:	103ff31e 	bne	r2,zero,88210 <memmove+0x44>
   88244:	3811883a 	mov	r8,r7
   88248:	180b883a 	mov	r5,r3
   8824c:	200f883a 	mov	r7,r4
   88250:	28c00017 	ldw	r3,0(r5)
   88254:	31bffc04 	addi	r6,r6,-16
   88258:	38c00015 	stw	r3,0(r7)
   8825c:	28800117 	ldw	r2,4(r5)
   88260:	38800115 	stw	r2,4(r7)
   88264:	28c00217 	ldw	r3,8(r5)
   88268:	38c00215 	stw	r3,8(r7)
   8826c:	28800317 	ldw	r2,12(r5)
   88270:	29400404 	addi	r5,r5,16
   88274:	38800315 	stw	r2,12(r7)
   88278:	39c00404 	addi	r7,r7,16
   8827c:	41bff436 	bltu	r8,r6,88250 <memmove+0x84>
   88280:	008000c4 	movi	r2,3
   88284:	1180072e 	bgeu	r2,r6,882a4 <memmove+0xd8>
   88288:	1007883a 	mov	r3,r2
   8828c:	28800017 	ldw	r2,0(r5)
   88290:	31bfff04 	addi	r6,r6,-4
   88294:	29400104 	addi	r5,r5,4
   88298:	38800015 	stw	r2,0(r7)
   8829c:	39c00104 	addi	r7,r7,4
   882a0:	19bffa36 	bltu	r3,r6,8828c <memmove+0xc0>
   882a4:	3811883a 	mov	r8,r7
   882a8:	003fd906 	br	88210 <memmove+0x44>

000882ac <memset>:
   882ac:	008000c4 	movi	r2,3
   882b0:	29403fcc 	andi	r5,r5,255
   882b4:	2007883a 	mov	r3,r4
   882b8:	1180022e 	bgeu	r2,r6,882c4 <memset+0x18>
   882bc:	2084703a 	and	r2,r4,r2
   882c0:	10000826 	beq	r2,zero,882e4 <memset+0x38>
   882c4:	30000526 	beq	r6,zero,882dc <memset+0x30>
   882c8:	2805883a 	mov	r2,r5
   882cc:	30cd883a 	add	r6,r6,r3
   882d0:	18800005 	stb	r2,0(r3)
   882d4:	18c00044 	addi	r3,r3,1
   882d8:	19bffd1e 	bne	r3,r6,882d0 <memset+0x24>
   882dc:	2005883a 	mov	r2,r4
   882e0:	f800283a 	ret
   882e4:	2804923a 	slli	r2,r5,8
   882e8:	020003c4 	movi	r8,15
   882ec:	200f883a 	mov	r7,r4
   882f0:	2884b03a 	or	r2,r5,r2
   882f4:	1006943a 	slli	r3,r2,16
   882f8:	10c6b03a 	or	r3,r2,r3
   882fc:	41800a2e 	bgeu	r8,r6,88328 <memset+0x7c>
   88300:	4005883a 	mov	r2,r8
   88304:	31bffc04 	addi	r6,r6,-16
   88308:	38c00015 	stw	r3,0(r7)
   8830c:	38c00115 	stw	r3,4(r7)
   88310:	38c00215 	stw	r3,8(r7)
   88314:	38c00315 	stw	r3,12(r7)
   88318:	39c00404 	addi	r7,r7,16
   8831c:	11bff936 	bltu	r2,r6,88304 <memset+0x58>
   88320:	008000c4 	movi	r2,3
   88324:	1180052e 	bgeu	r2,r6,8833c <memset+0x90>
   88328:	31bfff04 	addi	r6,r6,-4
   8832c:	008000c4 	movi	r2,3
   88330:	38c00015 	stw	r3,0(r7)
   88334:	39c00104 	addi	r7,r7,4
   88338:	11bffb36 	bltu	r2,r6,88328 <memset+0x7c>
   8833c:	3807883a 	mov	r3,r7
   88340:	003fe006 	br	882c4 <memset+0x18>

00088344 <_Bfree>:
   88344:	28000826 	beq	r5,zero,88368 <_Bfree+0x24>
   88348:	28800117 	ldw	r2,4(r5)
   8834c:	21001317 	ldw	r4,76(r4)
   88350:	1085883a 	add	r2,r2,r2
   88354:	1085883a 	add	r2,r2,r2
   88358:	1105883a 	add	r2,r2,r4
   8835c:	10c00017 	ldw	r3,0(r2)
   88360:	28c00015 	stw	r3,0(r5)
   88364:	11400015 	stw	r5,0(r2)
   88368:	f800283a 	ret

0008836c <__hi0bits>:
   8836c:	20bfffec 	andhi	r2,r4,65535
   88370:	10001426 	beq	r2,zero,883c4 <__hi0bits+0x58>
   88374:	0007883a 	mov	r3,zero
   88378:	20bfc02c 	andhi	r2,r4,65280
   8837c:	1000021e 	bne	r2,zero,88388 <__hi0bits+0x1c>
   88380:	2008923a 	slli	r4,r4,8
   88384:	18c00204 	addi	r3,r3,8
   88388:	20bc002c 	andhi	r2,r4,61440
   8838c:	1000021e 	bne	r2,zero,88398 <__hi0bits+0x2c>
   88390:	2008913a 	slli	r4,r4,4
   88394:	18c00104 	addi	r3,r3,4
   88398:	20b0002c 	andhi	r2,r4,49152
   8839c:	1000031e 	bne	r2,zero,883ac <__hi0bits+0x40>
   883a0:	2105883a 	add	r2,r4,r4
   883a4:	18c00084 	addi	r3,r3,2
   883a8:	1089883a 	add	r4,r2,r2
   883ac:	20000316 	blt	r4,zero,883bc <__hi0bits+0x50>
   883b0:	2090002c 	andhi	r2,r4,16384
   883b4:	10000626 	beq	r2,zero,883d0 <__hi0bits+0x64>
   883b8:	18c00044 	addi	r3,r3,1
   883bc:	1805883a 	mov	r2,r3
   883c0:	f800283a 	ret
   883c4:	2008943a 	slli	r4,r4,16
   883c8:	00c00404 	movi	r3,16
   883cc:	003fea06 	br	88378 <__hi0bits+0xc>
   883d0:	00c00804 	movi	r3,32
   883d4:	1805883a 	mov	r2,r3
   883d8:	f800283a 	ret

000883dc <__lo0bits>:
   883dc:	20c00017 	ldw	r3,0(r4)
   883e0:	188001cc 	andi	r2,r3,7
   883e4:	10000a26 	beq	r2,zero,88410 <__lo0bits+0x34>
   883e8:	1880004c 	andi	r2,r3,1
   883ec:	1005003a 	cmpeq	r2,r2,zero
   883f0:	10002126 	beq	r2,zero,88478 <__lo0bits+0x9c>
   883f4:	1880008c 	andi	r2,r3,2
   883f8:	1000251e 	bne	r2,zero,88490 <__lo0bits+0xb4>
   883fc:	1804d0ba 	srli	r2,r3,2
   88400:	01400084 	movi	r5,2
   88404:	20800015 	stw	r2,0(r4)
   88408:	2805883a 	mov	r2,r5
   8840c:	f800283a 	ret
   88410:	18bfffcc 	andi	r2,r3,65535
   88414:	10001526 	beq	r2,zero,8846c <__lo0bits+0x90>
   88418:	000b883a 	mov	r5,zero
   8841c:	18803fcc 	andi	r2,r3,255
   88420:	1000021e 	bne	r2,zero,8842c <__lo0bits+0x50>
   88424:	1806d23a 	srli	r3,r3,8
   88428:	29400204 	addi	r5,r5,8
   8842c:	188003cc 	andi	r2,r3,15
   88430:	1000021e 	bne	r2,zero,8843c <__lo0bits+0x60>
   88434:	1806d13a 	srli	r3,r3,4
   88438:	29400104 	addi	r5,r5,4
   8843c:	188000cc 	andi	r2,r3,3
   88440:	1000021e 	bne	r2,zero,8844c <__lo0bits+0x70>
   88444:	1806d0ba 	srli	r3,r3,2
   88448:	29400084 	addi	r5,r5,2
   8844c:	1880004c 	andi	r2,r3,1
   88450:	1000031e 	bne	r2,zero,88460 <__lo0bits+0x84>
   88454:	1806d07a 	srli	r3,r3,1
   88458:	18000a26 	beq	r3,zero,88484 <__lo0bits+0xa8>
   8845c:	29400044 	addi	r5,r5,1
   88460:	2805883a 	mov	r2,r5
   88464:	20c00015 	stw	r3,0(r4)
   88468:	f800283a 	ret
   8846c:	1806d43a 	srli	r3,r3,16
   88470:	01400404 	movi	r5,16
   88474:	003fe906 	br	8841c <__lo0bits+0x40>
   88478:	000b883a 	mov	r5,zero
   8847c:	2805883a 	mov	r2,r5
   88480:	f800283a 	ret
   88484:	01400804 	movi	r5,32
   88488:	2805883a 	mov	r2,r5
   8848c:	f800283a 	ret
   88490:	1804d07a 	srli	r2,r3,1
   88494:	01400044 	movi	r5,1
   88498:	20800015 	stw	r2,0(r4)
   8849c:	003fda06 	br	88408 <__lo0bits+0x2c>

000884a0 <__mcmp>:
   884a0:	20800417 	ldw	r2,16(r4)
   884a4:	28c00417 	ldw	r3,16(r5)
   884a8:	10cfc83a 	sub	r7,r2,r3
   884ac:	38000c1e 	bne	r7,zero,884e0 <__mcmp+0x40>
   884b0:	18c5883a 	add	r2,r3,r3
   884b4:	1085883a 	add	r2,r2,r2
   884b8:	10c00504 	addi	r3,r2,20
   884bc:	21000504 	addi	r4,r4,20
   884c0:	28cb883a 	add	r5,r5,r3
   884c4:	2085883a 	add	r2,r4,r2
   884c8:	10bfff04 	addi	r2,r2,-4
   884cc:	297fff04 	addi	r5,r5,-4
   884d0:	11800017 	ldw	r6,0(r2)
   884d4:	28c00017 	ldw	r3,0(r5)
   884d8:	30c0031e 	bne	r6,r3,884e8 <__mcmp+0x48>
   884dc:	20bffa36 	bltu	r4,r2,884c8 <__mcmp+0x28>
   884e0:	3805883a 	mov	r2,r7
   884e4:	f800283a 	ret
   884e8:	30c00336 	bltu	r6,r3,884f8 <__mcmp+0x58>
   884ec:	01c00044 	movi	r7,1
   884f0:	3805883a 	mov	r2,r7
   884f4:	f800283a 	ret
   884f8:	01ffffc4 	movi	r7,-1
   884fc:	003ff806 	br	884e0 <__mcmp+0x40>

00088500 <__ulp>:
   88500:	295ffc2c 	andhi	r5,r5,32752
   88504:	013f3034 	movhi	r4,64704
   88508:	290b883a 	add	r5,r5,r4
   8850c:	0145c83a 	sub	r2,zero,r5
   88510:	1007d53a 	srai	r3,r2,20
   88514:	000d883a 	mov	r6,zero
   88518:	0140040e 	bge	zero,r5,8852c <__ulp+0x2c>
   8851c:	280f883a 	mov	r7,r5
   88520:	3807883a 	mov	r3,r7
   88524:	3005883a 	mov	r2,r6
   88528:	f800283a 	ret
   8852c:	008004c4 	movi	r2,19
   88530:	193ffb04 	addi	r4,r3,-20
   88534:	10c00c0e 	bge	r2,r3,88568 <__ulp+0x68>
   88538:	008007c4 	movi	r2,31
   8853c:	1107c83a 	sub	r3,r2,r4
   88540:	00800784 	movi	r2,30
   88544:	01400044 	movi	r5,1
   88548:	11000216 	blt	r2,r4,88554 <__ulp+0x54>
   8854c:	00800044 	movi	r2,1
   88550:	10ca983a 	sll	r5,r2,r3
   88554:	000f883a 	mov	r7,zero
   88558:	280d883a 	mov	r6,r5
   8855c:	3807883a 	mov	r3,r7
   88560:	3005883a 	mov	r2,r6
   88564:	f800283a 	ret
   88568:	00800234 	movhi	r2,8
   8856c:	10cfd83a 	sra	r7,r2,r3
   88570:	000d883a 	mov	r6,zero
   88574:	3005883a 	mov	r2,r6
   88578:	3807883a 	mov	r3,r7
   8857c:	f800283a 	ret

00088580 <__b2d>:
   88580:	20800417 	ldw	r2,16(r4)
   88584:	defff904 	addi	sp,sp,-28
   88588:	dd000415 	stw	r20,16(sp)
   8858c:	1085883a 	add	r2,r2,r2
   88590:	25000504 	addi	r20,r4,20
   88594:	1085883a 	add	r2,r2,r2
   88598:	dc000015 	stw	r16,0(sp)
   8859c:	a0a1883a 	add	r16,r20,r2
   885a0:	dd400515 	stw	r21,20(sp)
   885a4:	857fff17 	ldw	r21,-4(r16)
   885a8:	dc400115 	stw	r17,4(sp)
   885ac:	dfc00615 	stw	ra,24(sp)
   885b0:	a809883a 	mov	r4,r21
   885b4:	2823883a 	mov	r17,r5
   885b8:	dcc00315 	stw	r19,12(sp)
   885bc:	dc800215 	stw	r18,8(sp)
   885c0:	008836c0 	call	8836c <__hi0bits>
   885c4:	100b883a 	mov	r5,r2
   885c8:	00800804 	movi	r2,32
   885cc:	1145c83a 	sub	r2,r2,r5
   885d0:	88800015 	stw	r2,0(r17)
   885d4:	00800284 	movi	r2,10
   885d8:	80ffff04 	addi	r3,r16,-4
   885dc:	11401416 	blt	r2,r5,88630 <__b2d+0xb0>
   885e0:	008002c4 	movi	r2,11
   885e4:	1149c83a 	sub	r4,r2,r5
   885e8:	a0c02736 	bltu	r20,r3,88688 <__b2d+0x108>
   885ec:	000d883a 	mov	r6,zero
   885f0:	28800544 	addi	r2,r5,21
   885f4:	a906d83a 	srl	r3,r21,r4
   885f8:	a884983a 	sll	r2,r21,r2
   885fc:	1ccffc34 	orhi	r19,r3,16368
   88600:	11a4b03a 	or	r18,r2,r6
   88604:	9005883a 	mov	r2,r18
   88608:	9807883a 	mov	r3,r19
   8860c:	dfc00617 	ldw	ra,24(sp)
   88610:	dd400517 	ldw	r21,20(sp)
   88614:	dd000417 	ldw	r20,16(sp)
   88618:	dcc00317 	ldw	r19,12(sp)
   8861c:	dc800217 	ldw	r18,8(sp)
   88620:	dc400117 	ldw	r17,4(sp)
   88624:	dc000017 	ldw	r16,0(sp)
   88628:	dec00704 	addi	sp,sp,28
   8862c:	f800283a 	ret
   88630:	a0c00e36 	bltu	r20,r3,8866c <__b2d+0xec>
   88634:	293ffd44 	addi	r4,r5,-11
   88638:	000d883a 	mov	r6,zero
   8863c:	20000f26 	beq	r4,zero,8867c <__b2d+0xfc>
   88640:	00800804 	movi	r2,32
   88644:	110bc83a 	sub	r5,r2,r4
   88648:	a0c01236 	bltu	r20,r3,88694 <__b2d+0x114>
   8864c:	000f883a 	mov	r7,zero
   88650:	a904983a 	sll	r2,r21,r4
   88654:	3146d83a 	srl	r3,r6,r5
   88658:	3108983a 	sll	r4,r6,r4
   8865c:	108ffc34 	orhi	r2,r2,16368
   88660:	18a6b03a 	or	r19,r3,r2
   88664:	3924b03a 	or	r18,r7,r4
   88668:	003fe606 	br	88604 <__b2d+0x84>
   8866c:	293ffd44 	addi	r4,r5,-11
   88670:	81bffe17 	ldw	r6,-8(r16)
   88674:	80fffe04 	addi	r3,r16,-8
   88678:	203ff11e 	bne	r4,zero,88640 <__b2d+0xc0>
   8867c:	accffc34 	orhi	r19,r21,16368
   88680:	3025883a 	mov	r18,r6
   88684:	003fdf06 	br	88604 <__b2d+0x84>
   88688:	18bfff17 	ldw	r2,-4(r3)
   8868c:	110cd83a 	srl	r6,r2,r4
   88690:	003fd706 	br	885f0 <__b2d+0x70>
   88694:	18bfff17 	ldw	r2,-4(r3)
   88698:	114ed83a 	srl	r7,r2,r5
   8869c:	003fec06 	br	88650 <__b2d+0xd0>

000886a0 <__ratio>:
   886a0:	defff904 	addi	sp,sp,-28
   886a4:	dc400215 	stw	r17,8(sp)
   886a8:	2823883a 	mov	r17,r5
   886ac:	d80b883a 	mov	r5,sp
   886b0:	dfc00615 	stw	ra,24(sp)
   886b4:	dd000515 	stw	r20,20(sp)
   886b8:	dcc00415 	stw	r19,16(sp)
   886bc:	dc800315 	stw	r18,12(sp)
   886c0:	2025883a 	mov	r18,r4
   886c4:	00885800 	call	88580 <__b2d>
   886c8:	8809883a 	mov	r4,r17
   886cc:	d9400104 	addi	r5,sp,4
   886d0:	1027883a 	mov	r19,r2
   886d4:	1829883a 	mov	r20,r3
   886d8:	00885800 	call	88580 <__b2d>
   886dc:	89000417 	ldw	r4,16(r17)
   886e0:	91c00417 	ldw	r7,16(r18)
   886e4:	d9800117 	ldw	r6,4(sp)
   886e8:	180b883a 	mov	r5,r3
   886ec:	390fc83a 	sub	r7,r7,r4
   886f0:	1009883a 	mov	r4,r2
   886f4:	d8800017 	ldw	r2,0(sp)
   886f8:	380e917a 	slli	r7,r7,5
   886fc:	2011883a 	mov	r8,r4
   88700:	1185c83a 	sub	r2,r2,r6
   88704:	11c5883a 	add	r2,r2,r7
   88708:	1006953a 	slli	r3,r2,20
   8870c:	2813883a 	mov	r9,r5
   88710:	00800d0e 	bge	zero,r2,88748 <__ratio+0xa8>
   88714:	1d29883a 	add	r20,r3,r20
   88718:	a00b883a 	mov	r5,r20
   8871c:	480f883a 	mov	r7,r9
   88720:	9809883a 	mov	r4,r19
   88724:	400d883a 	mov	r6,r8
   88728:	008b80c0 	call	8b80c <__divdf3>
   8872c:	dfc00617 	ldw	ra,24(sp)
   88730:	dd000517 	ldw	r20,20(sp)
   88734:	dcc00417 	ldw	r19,16(sp)
   88738:	dc800317 	ldw	r18,12(sp)
   8873c:	dc400217 	ldw	r17,8(sp)
   88740:	dec00704 	addi	sp,sp,28
   88744:	f800283a 	ret
   88748:	28d3c83a 	sub	r9,r5,r3
   8874c:	003ff206 	br	88718 <__ratio+0x78>

00088750 <_mprec_log10>:
   88750:	defffe04 	addi	sp,sp,-8
   88754:	008005c4 	movi	r2,23
   88758:	dc000015 	stw	r16,0(sp)
   8875c:	dfc00115 	stw	ra,4(sp)
   88760:	2021883a 	mov	r16,r4
   88764:	11000c16 	blt	r2,r4,88798 <_mprec_log10+0x48>
   88768:	200490fa 	slli	r2,r4,3
   8876c:	00c002b4 	movhi	r3,10
   88770:	18e54204 	addi	r3,r3,-27384
   88774:	10c5883a 	add	r2,r2,r3
   88778:	12400117 	ldw	r9,4(r2)
   8877c:	12000017 	ldw	r8,0(r2)
   88780:	4807883a 	mov	r3,r9
   88784:	4005883a 	mov	r2,r8
   88788:	dfc00117 	ldw	ra,4(sp)
   8878c:	dc000017 	ldw	r16,0(sp)
   88790:	dec00204 	addi	sp,sp,8
   88794:	f800283a 	ret
   88798:	0011883a 	mov	r8,zero
   8879c:	024ffc34 	movhi	r9,16368
   887a0:	0005883a 	mov	r2,zero
   887a4:	00d00934 	movhi	r3,16420
   887a8:	480b883a 	mov	r5,r9
   887ac:	4009883a 	mov	r4,r8
   887b0:	180f883a 	mov	r7,r3
   887b4:	100d883a 	mov	r6,r2
   887b8:	008b4480 	call	8b448 <__muldf3>
   887bc:	843fffc4 	addi	r16,r16,-1
   887c0:	1011883a 	mov	r8,r2
   887c4:	1813883a 	mov	r9,r3
   887c8:	803ff51e 	bne	r16,zero,887a0 <_mprec_log10+0x50>
   887cc:	4005883a 	mov	r2,r8
   887d0:	4807883a 	mov	r3,r9
   887d4:	dfc00117 	ldw	ra,4(sp)
   887d8:	dc000017 	ldw	r16,0(sp)
   887dc:	dec00204 	addi	sp,sp,8
   887e0:	f800283a 	ret

000887e4 <__copybits>:
   887e4:	297fffc4 	addi	r5,r5,-1
   887e8:	30800417 	ldw	r2,16(r6)
   887ec:	280bd17a 	srai	r5,r5,5
   887f0:	31800504 	addi	r6,r6,20
   887f4:	1085883a 	add	r2,r2,r2
   887f8:	294b883a 	add	r5,r5,r5
   887fc:	294b883a 	add	r5,r5,r5
   88800:	1085883a 	add	r2,r2,r2
   88804:	290b883a 	add	r5,r5,r4
   88808:	3087883a 	add	r3,r6,r2
   8880c:	29400104 	addi	r5,r5,4
   88810:	30c0052e 	bgeu	r6,r3,88828 <__copybits+0x44>
   88814:	30800017 	ldw	r2,0(r6)
   88818:	31800104 	addi	r6,r6,4
   8881c:	20800015 	stw	r2,0(r4)
   88820:	21000104 	addi	r4,r4,4
   88824:	30fffb36 	bltu	r6,r3,88814 <__copybits+0x30>
   88828:	2140032e 	bgeu	r4,r5,88838 <__copybits+0x54>
   8882c:	20000015 	stw	zero,0(r4)
   88830:	21000104 	addi	r4,r4,4
   88834:	217ffd36 	bltu	r4,r5,8882c <__copybits+0x48>
   88838:	f800283a 	ret

0008883c <__any_on>:
   8883c:	20800417 	ldw	r2,16(r4)
   88840:	2807d17a 	srai	r3,r5,5
   88844:	21000504 	addi	r4,r4,20
   88848:	10c00d0e 	bge	r2,r3,88880 <__any_on+0x44>
   8884c:	1085883a 	add	r2,r2,r2
   88850:	1085883a 	add	r2,r2,r2
   88854:	208d883a 	add	r6,r4,r2
   88858:	2180182e 	bgeu	r4,r6,888bc <__any_on+0x80>
   8885c:	30bfff17 	ldw	r2,-4(r6)
   88860:	30ffff04 	addi	r3,r6,-4
   88864:	1000041e 	bne	r2,zero,88878 <__any_on+0x3c>
   88868:	20c0142e 	bgeu	r4,r3,888bc <__any_on+0x80>
   8886c:	18ffff04 	addi	r3,r3,-4
   88870:	18800017 	ldw	r2,0(r3)
   88874:	103ffc26 	beq	r2,zero,88868 <__any_on+0x2c>
   88878:	00800044 	movi	r2,1
   8887c:	f800283a 	ret
   88880:	18800a0e 	bge	r3,r2,888ac <__any_on+0x70>
   88884:	294007cc 	andi	r5,r5,31
   88888:	28000826 	beq	r5,zero,888ac <__any_on+0x70>
   8888c:	18c5883a 	add	r2,r3,r3
   88890:	1085883a 	add	r2,r2,r2
   88894:	208d883a 	add	r6,r4,r2
   88898:	30c00017 	ldw	r3,0(r6)
   8889c:	1944d83a 	srl	r2,r3,r5
   888a0:	1144983a 	sll	r2,r2,r5
   888a4:	18bff41e 	bne	r3,r2,88878 <__any_on+0x3c>
   888a8:	003feb06 	br	88858 <__any_on+0x1c>
   888ac:	18c5883a 	add	r2,r3,r3
   888b0:	1085883a 	add	r2,r2,r2
   888b4:	208d883a 	add	r6,r4,r2
   888b8:	003fe706 	br	88858 <__any_on+0x1c>
   888bc:	0005883a 	mov	r2,zero
   888c0:	f800283a 	ret

000888c4 <_Balloc>:
   888c4:	20c01317 	ldw	r3,76(r4)
   888c8:	defffb04 	addi	sp,sp,-20
   888cc:	dcc00315 	stw	r19,12(sp)
   888d0:	dc800215 	stw	r18,8(sp)
   888d4:	dfc00415 	stw	ra,16(sp)
   888d8:	2825883a 	mov	r18,r5
   888dc:	dc400115 	stw	r17,4(sp)
   888e0:	dc000015 	stw	r16,0(sp)
   888e4:	2027883a 	mov	r19,r4
   888e8:	01800404 	movi	r6,16
   888ec:	01400104 	movi	r5,4
   888f0:	18001726 	beq	r3,zero,88950 <_Balloc+0x8c>
   888f4:	01400044 	movi	r5,1
   888f8:	9485883a 	add	r2,r18,r18
   888fc:	2ca2983a 	sll	r17,r5,r18
   88900:	1085883a 	add	r2,r2,r2
   88904:	10c7883a 	add	r3,r2,r3
   88908:	1c000017 	ldw	r16,0(r3)
   8890c:	8c4d883a 	add	r6,r17,r17
   88910:	318d883a 	add	r6,r6,r6
   88914:	9809883a 	mov	r4,r19
   88918:	31800504 	addi	r6,r6,20
   8891c:	80001226 	beq	r16,zero,88968 <_Balloc+0xa4>
   88920:	80800017 	ldw	r2,0(r16)
   88924:	18800015 	stw	r2,0(r3)
   88928:	80000415 	stw	zero,16(r16)
   8892c:	80000315 	stw	zero,12(r16)
   88930:	8005883a 	mov	r2,r16
   88934:	dfc00417 	ldw	ra,16(sp)
   88938:	dcc00317 	ldw	r19,12(sp)
   8893c:	dc800217 	ldw	r18,8(sp)
   88940:	dc400117 	ldw	r17,4(sp)
   88944:	dc000017 	ldw	r16,0(sp)
   88948:	dec00504 	addi	sp,sp,20
   8894c:	f800283a 	ret
   88950:	0089d240 	call	89d24 <_calloc_r>
   88954:	1007883a 	mov	r3,r2
   88958:	0021883a 	mov	r16,zero
   8895c:	98801315 	stw	r2,76(r19)
   88960:	103fe41e 	bne	r2,zero,888f4 <_Balloc+0x30>
   88964:	003ff206 	br	88930 <_Balloc+0x6c>
   88968:	0089d240 	call	89d24 <_calloc_r>
   8896c:	103ff026 	beq	r2,zero,88930 <_Balloc+0x6c>
   88970:	1021883a 	mov	r16,r2
   88974:	14800115 	stw	r18,4(r2)
   88978:	14400215 	stw	r17,8(r2)
   8897c:	003fea06 	br	88928 <_Balloc+0x64>

00088980 <__d2b>:
   88980:	defff504 	addi	sp,sp,-44
   88984:	dcc00515 	stw	r19,20(sp)
   88988:	04c00044 	movi	r19,1
   8898c:	dc000215 	stw	r16,8(sp)
   88990:	2821883a 	mov	r16,r5
   88994:	980b883a 	mov	r5,r19
   88998:	ddc00915 	stw	r23,36(sp)
   8899c:	dd800815 	stw	r22,32(sp)
   889a0:	dd400715 	stw	r21,28(sp)
   889a4:	dd000615 	stw	r20,24(sp)
   889a8:	dc800415 	stw	r18,16(sp)
   889ac:	dc400315 	stw	r17,12(sp)
   889b0:	dfc00a15 	stw	ra,40(sp)
   889b4:	3023883a 	mov	r17,r6
   889b8:	382d883a 	mov	r22,r7
   889bc:	ddc00b17 	ldw	r23,44(sp)
   889c0:	00888c40 	call	888c4 <_Balloc>
   889c4:	1025883a 	mov	r18,r2
   889c8:	00a00034 	movhi	r2,32768
   889cc:	10bfffc4 	addi	r2,r2,-1
   889d0:	8888703a 	and	r4,r17,r2
   889d4:	202ad53a 	srli	r21,r4,20
   889d8:	00800434 	movhi	r2,16
   889dc:	10bfffc4 	addi	r2,r2,-1
   889e0:	8886703a 	and	r3,r17,r2
   889e4:	a829003a 	cmpeq	r20,r21,zero
   889e8:	800b883a 	mov	r5,r16
   889ec:	d8c00115 	stw	r3,4(sp)
   889f0:	94000504 	addi	r16,r18,20
   889f4:	a000021e 	bne	r20,zero,88a00 <__d2b+0x80>
   889f8:	18c00434 	orhi	r3,r3,16
   889fc:	d8c00115 	stw	r3,4(sp)
   88a00:	28002726 	beq	r5,zero,88aa0 <__d2b+0x120>
   88a04:	d809883a 	mov	r4,sp
   88a08:	d9400015 	stw	r5,0(sp)
   88a0c:	00883dc0 	call	883dc <__lo0bits>
   88a10:	100d883a 	mov	r6,r2
   88a14:	10003526 	beq	r2,zero,88aec <__d2b+0x16c>
   88a18:	d8c00117 	ldw	r3,4(sp)
   88a1c:	00800804 	movi	r2,32
   88a20:	1185c83a 	sub	r2,r2,r6
   88a24:	d9000017 	ldw	r4,0(sp)
   88a28:	1886983a 	sll	r3,r3,r2
   88a2c:	1906b03a 	or	r3,r3,r4
   88a30:	90c00515 	stw	r3,20(r18)
   88a34:	d8c00117 	ldw	r3,4(sp)
   88a38:	1986d83a 	srl	r3,r3,r6
   88a3c:	d8c00115 	stw	r3,4(sp)
   88a40:	180b003a 	cmpeq	r5,r3,zero
   88a44:	00800084 	movi	r2,2
   88a48:	114bc83a 	sub	r5,r2,r5
   88a4c:	80c00115 	stw	r3,4(r16)
   88a50:	91400415 	stw	r5,16(r18)
   88a54:	a0001a1e 	bne	r20,zero,88ac0 <__d2b+0x140>
   88a58:	3545883a 	add	r2,r6,r21
   88a5c:	10bef344 	addi	r2,r2,-1075
   88a60:	00c00d44 	movi	r3,53
   88a64:	b0800015 	stw	r2,0(r22)
   88a68:	1987c83a 	sub	r3,r3,r6
   88a6c:	b8c00015 	stw	r3,0(r23)
   88a70:	9005883a 	mov	r2,r18
   88a74:	dfc00a17 	ldw	ra,40(sp)
   88a78:	ddc00917 	ldw	r23,36(sp)
   88a7c:	dd800817 	ldw	r22,32(sp)
   88a80:	dd400717 	ldw	r21,28(sp)
   88a84:	dd000617 	ldw	r20,24(sp)
   88a88:	dcc00517 	ldw	r19,20(sp)
   88a8c:	dc800417 	ldw	r18,16(sp)
   88a90:	dc400317 	ldw	r17,12(sp)
   88a94:	dc000217 	ldw	r16,8(sp)
   88a98:	dec00b04 	addi	sp,sp,44
   88a9c:	f800283a 	ret
   88aa0:	d9000104 	addi	r4,sp,4
   88aa4:	00883dc0 	call	883dc <__lo0bits>
   88aa8:	11800804 	addi	r6,r2,32
   88aac:	d8800117 	ldw	r2,4(sp)
   88ab0:	94c00415 	stw	r19,16(r18)
   88ab4:	980b883a 	mov	r5,r19
   88ab8:	90800515 	stw	r2,20(r18)
   88abc:	a03fe626 	beq	r20,zero,88a58 <__d2b+0xd8>
   88ac0:	2945883a 	add	r2,r5,r5
   88ac4:	1085883a 	add	r2,r2,r2
   88ac8:	1405883a 	add	r2,r2,r16
   88acc:	113fff17 	ldw	r4,-4(r2)
   88ad0:	30fef384 	addi	r3,r6,-1074
   88ad4:	2820917a 	slli	r16,r5,5
   88ad8:	b0c00015 	stw	r3,0(r22)
   88adc:	008836c0 	call	8836c <__hi0bits>
   88ae0:	80a1c83a 	sub	r16,r16,r2
   88ae4:	bc000015 	stw	r16,0(r23)
   88ae8:	003fe106 	br	88a70 <__d2b+0xf0>
   88aec:	d8800017 	ldw	r2,0(sp)
   88af0:	90800515 	stw	r2,20(r18)
   88af4:	d8c00117 	ldw	r3,4(sp)
   88af8:	003fd106 	br	88a40 <__d2b+0xc0>

00088afc <__mdiff>:
   88afc:	defffb04 	addi	sp,sp,-20
   88b00:	dc000015 	stw	r16,0(sp)
   88b04:	2821883a 	mov	r16,r5
   88b08:	dc800215 	stw	r18,8(sp)
   88b0c:	300b883a 	mov	r5,r6
   88b10:	2025883a 	mov	r18,r4
   88b14:	8009883a 	mov	r4,r16
   88b18:	dc400115 	stw	r17,4(sp)
   88b1c:	dfc00415 	stw	ra,16(sp)
   88b20:	dcc00315 	stw	r19,12(sp)
   88b24:	3023883a 	mov	r17,r6
   88b28:	00884a00 	call	884a0 <__mcmp>
   88b2c:	10004226 	beq	r2,zero,88c38 <__mdiff+0x13c>
   88b30:	10005016 	blt	r2,zero,88c74 <__mdiff+0x178>
   88b34:	0027883a 	mov	r19,zero
   88b38:	81400117 	ldw	r5,4(r16)
   88b3c:	9009883a 	mov	r4,r18
   88b40:	00888c40 	call	888c4 <_Balloc>
   88b44:	1019883a 	mov	r12,r2
   88b48:	82800417 	ldw	r10,16(r16)
   88b4c:	88800417 	ldw	r2,16(r17)
   88b50:	81800504 	addi	r6,r16,20
   88b54:	5287883a 	add	r3,r10,r10
   88b58:	1085883a 	add	r2,r2,r2
   88b5c:	18c7883a 	add	r3,r3,r3
   88b60:	1085883a 	add	r2,r2,r2
   88b64:	8a000504 	addi	r8,r17,20
   88b68:	64c00315 	stw	r19,12(r12)
   88b6c:	30db883a 	add	r13,r6,r3
   88b70:	4097883a 	add	r11,r8,r2
   88b74:	61c00504 	addi	r7,r12,20
   88b78:	0013883a 	mov	r9,zero
   88b7c:	31000017 	ldw	r4,0(r6)
   88b80:	41400017 	ldw	r5,0(r8)
   88b84:	42000104 	addi	r8,r8,4
   88b88:	20bfffcc 	andi	r2,r4,65535
   88b8c:	28ffffcc 	andi	r3,r5,65535
   88b90:	10c5c83a 	sub	r2,r2,r3
   88b94:	1245883a 	add	r2,r2,r9
   88b98:	2008d43a 	srli	r4,r4,16
   88b9c:	280ad43a 	srli	r5,r5,16
   88ba0:	1007d43a 	srai	r3,r2,16
   88ba4:	3880000d 	sth	r2,0(r7)
   88ba8:	2149c83a 	sub	r4,r4,r5
   88bac:	20c9883a 	add	r4,r4,r3
   88bb0:	3900008d 	sth	r4,2(r7)
   88bb4:	31800104 	addi	r6,r6,4
   88bb8:	39c00104 	addi	r7,r7,4
   88bbc:	2013d43a 	srai	r9,r4,16
   88bc0:	42ffee36 	bltu	r8,r11,88b7c <__mdiff+0x80>
   88bc4:	33400c2e 	bgeu	r6,r13,88bf8 <__mdiff+0xfc>
   88bc8:	30800017 	ldw	r2,0(r6)
   88bcc:	31800104 	addi	r6,r6,4
   88bd0:	10ffffcc 	andi	r3,r2,65535
   88bd4:	1a47883a 	add	r3,r3,r9
   88bd8:	1004d43a 	srli	r2,r2,16
   88bdc:	1809d43a 	srai	r4,r3,16
   88be0:	38c0000d 	sth	r3,0(r7)
   88be4:	1105883a 	add	r2,r2,r4
   88be8:	3880008d 	sth	r2,2(r7)
   88bec:	1013d43a 	srai	r9,r2,16
   88bf0:	39c00104 	addi	r7,r7,4
   88bf4:	337ff436 	bltu	r6,r13,88bc8 <__mdiff+0xcc>
   88bf8:	38bfff17 	ldw	r2,-4(r7)
   88bfc:	38ffff04 	addi	r3,r7,-4
   88c00:	1000041e 	bne	r2,zero,88c14 <__mdiff+0x118>
   88c04:	18ffff04 	addi	r3,r3,-4
   88c08:	18800017 	ldw	r2,0(r3)
   88c0c:	52bfffc4 	addi	r10,r10,-1
   88c10:	103ffc26 	beq	r2,zero,88c04 <__mdiff+0x108>
   88c14:	6005883a 	mov	r2,r12
   88c18:	62800415 	stw	r10,16(r12)
   88c1c:	dfc00417 	ldw	ra,16(sp)
   88c20:	dcc00317 	ldw	r19,12(sp)
   88c24:	dc800217 	ldw	r18,8(sp)
   88c28:	dc400117 	ldw	r17,4(sp)
   88c2c:	dc000017 	ldw	r16,0(sp)
   88c30:	dec00504 	addi	sp,sp,20
   88c34:	f800283a 	ret
   88c38:	9009883a 	mov	r4,r18
   88c3c:	000b883a 	mov	r5,zero
   88c40:	00888c40 	call	888c4 <_Balloc>
   88c44:	1019883a 	mov	r12,r2
   88c48:	00800044 	movi	r2,1
   88c4c:	60800415 	stw	r2,16(r12)
   88c50:	6005883a 	mov	r2,r12
   88c54:	60000515 	stw	zero,20(r12)
   88c58:	dfc00417 	ldw	ra,16(sp)
   88c5c:	dcc00317 	ldw	r19,12(sp)
   88c60:	dc800217 	ldw	r18,8(sp)
   88c64:	dc400117 	ldw	r17,4(sp)
   88c68:	dc000017 	ldw	r16,0(sp)
   88c6c:	dec00504 	addi	sp,sp,20
   88c70:	f800283a 	ret
   88c74:	880d883a 	mov	r6,r17
   88c78:	04c00044 	movi	r19,1
   88c7c:	8023883a 	mov	r17,r16
   88c80:	3021883a 	mov	r16,r6
   88c84:	003fac06 	br	88b38 <__mdiff+0x3c>

00088c88 <__lshift>:
   88c88:	defff904 	addi	sp,sp,-28
   88c8c:	28800417 	ldw	r2,16(r5)
   88c90:	dc000015 	stw	r16,0(sp)
   88c94:	3021d17a 	srai	r16,r6,5
   88c98:	28c00217 	ldw	r3,8(r5)
   88c9c:	10800044 	addi	r2,r2,1
   88ca0:	dc400115 	stw	r17,4(sp)
   88ca4:	80a3883a 	add	r17,r16,r2
   88ca8:	dd400515 	stw	r21,20(sp)
   88cac:	dd000415 	stw	r20,16(sp)
   88cb0:	dc800215 	stw	r18,8(sp)
   88cb4:	dfc00615 	stw	ra,24(sp)
   88cb8:	2825883a 	mov	r18,r5
   88cbc:	dcc00315 	stw	r19,12(sp)
   88cc0:	3029883a 	mov	r20,r6
   88cc4:	202b883a 	mov	r21,r4
   88cc8:	29400117 	ldw	r5,4(r5)
   88ccc:	1c40030e 	bge	r3,r17,88cdc <__lshift+0x54>
   88cd0:	18c7883a 	add	r3,r3,r3
   88cd4:	29400044 	addi	r5,r5,1
   88cd8:	1c7ffd16 	blt	r3,r17,88cd0 <__lshift+0x48>
   88cdc:	a809883a 	mov	r4,r21
   88ce0:	00888c40 	call	888c4 <_Balloc>
   88ce4:	1027883a 	mov	r19,r2
   88ce8:	11400504 	addi	r5,r2,20
   88cec:	0400090e 	bge	zero,r16,88d14 <__lshift+0x8c>
   88cf0:	2805883a 	mov	r2,r5
   88cf4:	0007883a 	mov	r3,zero
   88cf8:	18c00044 	addi	r3,r3,1
   88cfc:	10000015 	stw	zero,0(r2)
   88d00:	10800104 	addi	r2,r2,4
   88d04:	80fffc1e 	bne	r16,r3,88cf8 <__lshift+0x70>
   88d08:	8405883a 	add	r2,r16,r16
   88d0c:	1085883a 	add	r2,r2,r2
   88d10:	288b883a 	add	r5,r5,r2
   88d14:	90800417 	ldw	r2,16(r18)
   88d18:	91000504 	addi	r4,r18,20
   88d1c:	a18007cc 	andi	r6,r20,31
   88d20:	1085883a 	add	r2,r2,r2
   88d24:	1085883a 	add	r2,r2,r2
   88d28:	208f883a 	add	r7,r4,r2
   88d2c:	30001e26 	beq	r6,zero,88da8 <__lshift+0x120>
   88d30:	00800804 	movi	r2,32
   88d34:	1191c83a 	sub	r8,r2,r6
   88d38:	0007883a 	mov	r3,zero
   88d3c:	20800017 	ldw	r2,0(r4)
   88d40:	1184983a 	sll	r2,r2,r6
   88d44:	1884b03a 	or	r2,r3,r2
   88d48:	28800015 	stw	r2,0(r5)
   88d4c:	20c00017 	ldw	r3,0(r4)
   88d50:	21000104 	addi	r4,r4,4
   88d54:	29400104 	addi	r5,r5,4
   88d58:	1a06d83a 	srl	r3,r3,r8
   88d5c:	21fff736 	bltu	r4,r7,88d3c <__lshift+0xb4>
   88d60:	28c00015 	stw	r3,0(r5)
   88d64:	18000126 	beq	r3,zero,88d6c <__lshift+0xe4>
   88d68:	8c400044 	addi	r17,r17,1
   88d6c:	88bfffc4 	addi	r2,r17,-1
   88d70:	98800415 	stw	r2,16(r19)
   88d74:	a809883a 	mov	r4,r21
   88d78:	900b883a 	mov	r5,r18
   88d7c:	00883440 	call	88344 <_Bfree>
   88d80:	9805883a 	mov	r2,r19
   88d84:	dfc00617 	ldw	ra,24(sp)
   88d88:	dd400517 	ldw	r21,20(sp)
   88d8c:	dd000417 	ldw	r20,16(sp)
   88d90:	dcc00317 	ldw	r19,12(sp)
   88d94:	dc800217 	ldw	r18,8(sp)
   88d98:	dc400117 	ldw	r17,4(sp)
   88d9c:	dc000017 	ldw	r16,0(sp)
   88da0:	dec00704 	addi	sp,sp,28
   88da4:	f800283a 	ret
   88da8:	20800017 	ldw	r2,0(r4)
   88dac:	21000104 	addi	r4,r4,4
   88db0:	28800015 	stw	r2,0(r5)
   88db4:	29400104 	addi	r5,r5,4
   88db8:	21ffec2e 	bgeu	r4,r7,88d6c <__lshift+0xe4>
   88dbc:	20800017 	ldw	r2,0(r4)
   88dc0:	21000104 	addi	r4,r4,4
   88dc4:	28800015 	stw	r2,0(r5)
   88dc8:	29400104 	addi	r5,r5,4
   88dcc:	21fff636 	bltu	r4,r7,88da8 <__lshift+0x120>
   88dd0:	003fe606 	br	88d6c <__lshift+0xe4>

00088dd4 <__multiply>:
   88dd4:	defff004 	addi	sp,sp,-64
   88dd8:	dc800815 	stw	r18,32(sp)
   88ddc:	dc400715 	stw	r17,28(sp)
   88de0:	2c800417 	ldw	r18,16(r5)
   88de4:	34400417 	ldw	r17,16(r6)
   88de8:	dcc00915 	stw	r19,36(sp)
   88dec:	dc000615 	stw	r16,24(sp)
   88df0:	dfc00f15 	stw	ra,60(sp)
   88df4:	df000e15 	stw	fp,56(sp)
   88df8:	ddc00d15 	stw	r23,52(sp)
   88dfc:	dd800c15 	stw	r22,48(sp)
   88e00:	dd400b15 	stw	r21,44(sp)
   88e04:	dd000a15 	stw	r20,40(sp)
   88e08:	2821883a 	mov	r16,r5
   88e0c:	3027883a 	mov	r19,r6
   88e10:	9440040e 	bge	r18,r17,88e24 <__multiply+0x50>
   88e14:	8825883a 	mov	r18,r17
   88e18:	2c400417 	ldw	r17,16(r5)
   88e1c:	2827883a 	mov	r19,r5
   88e20:	3021883a 	mov	r16,r6
   88e24:	80800217 	ldw	r2,8(r16)
   88e28:	9447883a 	add	r3,r18,r17
   88e2c:	d8c00415 	stw	r3,16(sp)
   88e30:	81400117 	ldw	r5,4(r16)
   88e34:	10c0010e 	bge	r2,r3,88e3c <__multiply+0x68>
   88e38:	29400044 	addi	r5,r5,1
   88e3c:	00888c40 	call	888c4 <_Balloc>
   88e40:	d8800515 	stw	r2,20(sp)
   88e44:	d9000417 	ldw	r4,16(sp)
   88e48:	d8c00517 	ldw	r3,20(sp)
   88e4c:	2105883a 	add	r2,r4,r4
   88e50:	1085883a 	add	r2,r2,r2
   88e54:	19000504 	addi	r4,r3,20
   88e58:	2085883a 	add	r2,r4,r2
   88e5c:	d8800315 	stw	r2,12(sp)
   88e60:	2080052e 	bgeu	r4,r2,88e78 <__multiply+0xa4>
   88e64:	2005883a 	mov	r2,r4
   88e68:	d8c00317 	ldw	r3,12(sp)
   88e6c:	10000015 	stw	zero,0(r2)
   88e70:	10800104 	addi	r2,r2,4
   88e74:	10fffc36 	bltu	r2,r3,88e68 <__multiply+0x94>
   88e78:	8c45883a 	add	r2,r17,r17
   88e7c:	9487883a 	add	r3,r18,r18
   88e80:	9dc00504 	addi	r23,r19,20
   88e84:	1085883a 	add	r2,r2,r2
   88e88:	84000504 	addi	r16,r16,20
   88e8c:	18c7883a 	add	r3,r3,r3
   88e90:	b885883a 	add	r2,r23,r2
   88e94:	dc000015 	stw	r16,0(sp)
   88e98:	d8800215 	stw	r2,8(sp)
   88e9c:	80f9883a 	add	fp,r16,r3
   88ea0:	b880432e 	bgeu	r23,r2,88fb0 <__multiply+0x1dc>
   88ea4:	d9000115 	stw	r4,4(sp)
   88ea8:	b9000017 	ldw	r4,0(r23)
   88eac:	253fffcc 	andi	r20,r4,65535
   88eb0:	a0001a26 	beq	r20,zero,88f1c <__multiply+0x148>
   88eb4:	dcc00017 	ldw	r19,0(sp)
   88eb8:	dc800117 	ldw	r18,4(sp)
   88ebc:	002b883a 	mov	r21,zero
   88ec0:	9c400017 	ldw	r17,0(r19)
   88ec4:	94000017 	ldw	r16,0(r18)
   88ec8:	a009883a 	mov	r4,r20
   88ecc:	897fffcc 	andi	r5,r17,65535
   88ed0:	0082b040 	call	82b04 <__mulsi3>
   88ed4:	880ad43a 	srli	r5,r17,16
   88ed8:	80ffffcc 	andi	r3,r16,65535
   88edc:	a8c7883a 	add	r3,r21,r3
   88ee0:	a009883a 	mov	r4,r20
   88ee4:	10e3883a 	add	r17,r2,r3
   88ee8:	8020d43a 	srli	r16,r16,16
   88eec:	0082b040 	call	82b04 <__mulsi3>
   88ef0:	8806d43a 	srli	r3,r17,16
   88ef4:	1405883a 	add	r2,r2,r16
   88ef8:	9cc00104 	addi	r19,r19,4
   88efc:	1887883a 	add	r3,r3,r2
   88f00:	90c0008d 	sth	r3,2(r18)
   88f04:	9440000d 	sth	r17,0(r18)
   88f08:	182ad43a 	srli	r21,r3,16
   88f0c:	94800104 	addi	r18,r18,4
   88f10:	9f3feb36 	bltu	r19,fp,88ec0 <__multiply+0xec>
   88f14:	95400015 	stw	r21,0(r18)
   88f18:	b9000017 	ldw	r4,0(r23)
   88f1c:	202ad43a 	srli	r21,r4,16
   88f20:	a8001c26 	beq	r21,zero,88f94 <__multiply+0x1c0>
   88f24:	d9000117 	ldw	r4,4(sp)
   88f28:	dd000017 	ldw	r20,0(sp)
   88f2c:	002d883a 	mov	r22,zero
   88f30:	24c00017 	ldw	r19,0(r4)
   88f34:	2025883a 	mov	r18,r4
   88f38:	9823883a 	mov	r17,r19
   88f3c:	a4000017 	ldw	r16,0(r20)
   88f40:	a809883a 	mov	r4,r21
   88f44:	a5000104 	addi	r20,r20,4
   88f48:	817fffcc 	andi	r5,r16,65535
   88f4c:	0082b040 	call	82b04 <__mulsi3>
   88f50:	8806d43a 	srli	r3,r17,16
   88f54:	800ad43a 	srli	r5,r16,16
   88f58:	94c0000d 	sth	r19,0(r18)
   88f5c:	b0c7883a 	add	r3,r22,r3
   88f60:	10e1883a 	add	r16,r2,r3
   88f64:	9400008d 	sth	r16,2(r18)
   88f68:	a809883a 	mov	r4,r21
   88f6c:	94800104 	addi	r18,r18,4
   88f70:	0082b040 	call	82b04 <__mulsi3>
   88f74:	94400017 	ldw	r17,0(r18)
   88f78:	8020d43a 	srli	r16,r16,16
   88f7c:	88ffffcc 	andi	r3,r17,65535
   88f80:	10c5883a 	add	r2,r2,r3
   88f84:	80a7883a 	add	r19,r16,r2
   88f88:	982cd43a 	srli	r22,r19,16
   88f8c:	a73feb36 	bltu	r20,fp,88f3c <__multiply+0x168>
   88f90:	94c00015 	stw	r19,0(r18)
   88f94:	d8800217 	ldw	r2,8(sp)
   88f98:	bdc00104 	addi	r23,r23,4
   88f9c:	b880042e 	bgeu	r23,r2,88fb0 <__multiply+0x1dc>
   88fa0:	d8c00117 	ldw	r3,4(sp)
   88fa4:	18c00104 	addi	r3,r3,4
   88fa8:	d8c00115 	stw	r3,4(sp)
   88fac:	003fbe06 	br	88ea8 <__multiply+0xd4>
   88fb0:	d9000417 	ldw	r4,16(sp)
   88fb4:	01000c0e 	bge	zero,r4,88fe8 <__multiply+0x214>
   88fb8:	d8c00317 	ldw	r3,12(sp)
   88fbc:	18bfff17 	ldw	r2,-4(r3)
   88fc0:	18ffff04 	addi	r3,r3,-4
   88fc4:	10000326 	beq	r2,zero,88fd4 <__multiply+0x200>
   88fc8:	00000706 	br	88fe8 <__multiply+0x214>
   88fcc:	18800017 	ldw	r2,0(r3)
   88fd0:	1000051e 	bne	r2,zero,88fe8 <__multiply+0x214>
   88fd4:	d9000417 	ldw	r4,16(sp)
   88fd8:	18ffff04 	addi	r3,r3,-4
   88fdc:	213fffc4 	addi	r4,r4,-1
   88fe0:	d9000415 	stw	r4,16(sp)
   88fe4:	203ff91e 	bne	r4,zero,88fcc <__multiply+0x1f8>
   88fe8:	d8800417 	ldw	r2,16(sp)
   88fec:	d8c00517 	ldw	r3,20(sp)
   88ff0:	18800415 	stw	r2,16(r3)
   88ff4:	1805883a 	mov	r2,r3
   88ff8:	dfc00f17 	ldw	ra,60(sp)
   88ffc:	df000e17 	ldw	fp,56(sp)
   89000:	ddc00d17 	ldw	r23,52(sp)
   89004:	dd800c17 	ldw	r22,48(sp)
   89008:	dd400b17 	ldw	r21,44(sp)
   8900c:	dd000a17 	ldw	r20,40(sp)
   89010:	dcc00917 	ldw	r19,36(sp)
   89014:	dc800817 	ldw	r18,32(sp)
   89018:	dc400717 	ldw	r17,28(sp)
   8901c:	dc000617 	ldw	r16,24(sp)
   89020:	dec01004 	addi	sp,sp,64
   89024:	f800283a 	ret

00089028 <__i2b>:
   89028:	defffd04 	addi	sp,sp,-12
   8902c:	dc000015 	stw	r16,0(sp)
   89030:	04000044 	movi	r16,1
   89034:	dc800115 	stw	r18,4(sp)
   89038:	2825883a 	mov	r18,r5
   8903c:	800b883a 	mov	r5,r16
   89040:	dfc00215 	stw	ra,8(sp)
   89044:	00888c40 	call	888c4 <_Balloc>
   89048:	14000415 	stw	r16,16(r2)
   8904c:	14800515 	stw	r18,20(r2)
   89050:	dfc00217 	ldw	ra,8(sp)
   89054:	dc800117 	ldw	r18,4(sp)
   89058:	dc000017 	ldw	r16,0(sp)
   8905c:	dec00304 	addi	sp,sp,12
   89060:	f800283a 	ret

00089064 <__multadd>:
   89064:	defff604 	addi	sp,sp,-40
   89068:	dd800615 	stw	r22,24(sp)
   8906c:	2d800417 	ldw	r22,16(r5)
   89070:	df000815 	stw	fp,32(sp)
   89074:	ddc00715 	stw	r23,28(sp)
   89078:	dd400515 	stw	r21,20(sp)
   8907c:	dd000415 	stw	r20,16(sp)
   89080:	dcc00315 	stw	r19,12(sp)
   89084:	dc800215 	stw	r18,8(sp)
   89088:	dfc00915 	stw	ra,36(sp)
   8908c:	dc400115 	stw	r17,4(sp)
   89090:	dc000015 	stw	r16,0(sp)
   89094:	282f883a 	mov	r23,r5
   89098:	2039883a 	mov	fp,r4
   8909c:	302b883a 	mov	r21,r6
   890a0:	3829883a 	mov	r20,r7
   890a4:	2c800504 	addi	r18,r5,20
   890a8:	0027883a 	mov	r19,zero
   890ac:	94400017 	ldw	r17,0(r18)
   890b0:	a80b883a 	mov	r5,r21
   890b4:	9cc00044 	addi	r19,r19,1
   890b8:	893fffcc 	andi	r4,r17,65535
   890bc:	0082b040 	call	82b04 <__mulsi3>
   890c0:	8808d43a 	srli	r4,r17,16
   890c4:	1521883a 	add	r16,r2,r20
   890c8:	a80b883a 	mov	r5,r21
   890cc:	0082b040 	call	82b04 <__mulsi3>
   890d0:	8008d43a 	srli	r4,r16,16
   890d4:	843fffcc 	andi	r16,r16,65535
   890d8:	1105883a 	add	r2,r2,r4
   890dc:	1006943a 	slli	r3,r2,16
   890e0:	1028d43a 	srli	r20,r2,16
   890e4:	1c07883a 	add	r3,r3,r16
   890e8:	90c00015 	stw	r3,0(r18)
   890ec:	94800104 	addi	r18,r18,4
   890f0:	9dbfee16 	blt	r19,r22,890ac <__multadd+0x48>
   890f4:	a0000826 	beq	r20,zero,89118 <__multadd+0xb4>
   890f8:	b8800217 	ldw	r2,8(r23)
   890fc:	b080130e 	bge	r22,r2,8914c <__multadd+0xe8>
   89100:	b585883a 	add	r2,r22,r22
   89104:	1085883a 	add	r2,r2,r2
   89108:	15c5883a 	add	r2,r2,r23
   8910c:	b0c00044 	addi	r3,r22,1
   89110:	15000515 	stw	r20,20(r2)
   89114:	b8c00415 	stw	r3,16(r23)
   89118:	b805883a 	mov	r2,r23
   8911c:	dfc00917 	ldw	ra,36(sp)
   89120:	df000817 	ldw	fp,32(sp)
   89124:	ddc00717 	ldw	r23,28(sp)
   89128:	dd800617 	ldw	r22,24(sp)
   8912c:	dd400517 	ldw	r21,20(sp)
   89130:	dd000417 	ldw	r20,16(sp)
   89134:	dcc00317 	ldw	r19,12(sp)
   89138:	dc800217 	ldw	r18,8(sp)
   8913c:	dc400117 	ldw	r17,4(sp)
   89140:	dc000017 	ldw	r16,0(sp)
   89144:	dec00a04 	addi	sp,sp,40
   89148:	f800283a 	ret
   8914c:	b9400117 	ldw	r5,4(r23)
   89150:	e009883a 	mov	r4,fp
   89154:	29400044 	addi	r5,r5,1
   89158:	00888c40 	call	888c4 <_Balloc>
   8915c:	b9800417 	ldw	r6,16(r23)
   89160:	b9400304 	addi	r5,r23,12
   89164:	11000304 	addi	r4,r2,12
   89168:	318d883a 	add	r6,r6,r6
   8916c:	318d883a 	add	r6,r6,r6
   89170:	31800204 	addi	r6,r6,8
   89174:	1023883a 	mov	r17,r2
   89178:	008812c0 	call	8812c <memcpy>
   8917c:	b80b883a 	mov	r5,r23
   89180:	e009883a 	mov	r4,fp
   89184:	00883440 	call	88344 <_Bfree>
   89188:	882f883a 	mov	r23,r17
   8918c:	003fdc06 	br	89100 <__multadd+0x9c>

00089190 <__pow5mult>:
   89190:	defffa04 	addi	sp,sp,-24
   89194:	308000cc 	andi	r2,r6,3
   89198:	dd000415 	stw	r20,16(sp)
   8919c:	dcc00315 	stw	r19,12(sp)
   891a0:	dc000015 	stw	r16,0(sp)
   891a4:	dfc00515 	stw	ra,20(sp)
   891a8:	dc800215 	stw	r18,8(sp)
   891ac:	dc400115 	stw	r17,4(sp)
   891b0:	3021883a 	mov	r16,r6
   891b4:	2027883a 	mov	r19,r4
   891b8:	2829883a 	mov	r20,r5
   891bc:	10002b1e 	bne	r2,zero,8926c <__pow5mult+0xdc>
   891c0:	8025d0ba 	srai	r18,r16,2
   891c4:	90001b26 	beq	r18,zero,89234 <__pow5mult+0xa4>
   891c8:	9c001217 	ldw	r16,72(r19)
   891cc:	8000081e 	bne	r16,zero,891f0 <__pow5mult+0x60>
   891d0:	00003006 	br	89294 <__pow5mult+0x104>
   891d4:	800b883a 	mov	r5,r16
   891d8:	800d883a 	mov	r6,r16
   891dc:	9809883a 	mov	r4,r19
   891e0:	90001426 	beq	r18,zero,89234 <__pow5mult+0xa4>
   891e4:	80800017 	ldw	r2,0(r16)
   891e8:	10001b26 	beq	r2,zero,89258 <__pow5mult+0xc8>
   891ec:	1021883a 	mov	r16,r2
   891f0:	9080004c 	andi	r2,r18,1
   891f4:	1005003a 	cmpeq	r2,r2,zero
   891f8:	9025d07a 	srai	r18,r18,1
   891fc:	800d883a 	mov	r6,r16
   89200:	9809883a 	mov	r4,r19
   89204:	a00b883a 	mov	r5,r20
   89208:	103ff21e 	bne	r2,zero,891d4 <__pow5mult+0x44>
   8920c:	0088dd40 	call	88dd4 <__multiply>
   89210:	a00b883a 	mov	r5,r20
   89214:	9809883a 	mov	r4,r19
   89218:	1023883a 	mov	r17,r2
   8921c:	00883440 	call	88344 <_Bfree>
   89220:	8829883a 	mov	r20,r17
   89224:	800b883a 	mov	r5,r16
   89228:	800d883a 	mov	r6,r16
   8922c:	9809883a 	mov	r4,r19
   89230:	903fec1e 	bne	r18,zero,891e4 <__pow5mult+0x54>
   89234:	a005883a 	mov	r2,r20
   89238:	dfc00517 	ldw	ra,20(sp)
   8923c:	dd000417 	ldw	r20,16(sp)
   89240:	dcc00317 	ldw	r19,12(sp)
   89244:	dc800217 	ldw	r18,8(sp)
   89248:	dc400117 	ldw	r17,4(sp)
   8924c:	dc000017 	ldw	r16,0(sp)
   89250:	dec00604 	addi	sp,sp,24
   89254:	f800283a 	ret
   89258:	0088dd40 	call	88dd4 <__multiply>
   8925c:	80800015 	stw	r2,0(r16)
   89260:	1021883a 	mov	r16,r2
   89264:	10000015 	stw	zero,0(r2)
   89268:	003fe106 	br	891f0 <__pow5mult+0x60>
   8926c:	1085883a 	add	r2,r2,r2
   89270:	00c002b4 	movhi	r3,10
   89274:	18e58804 	addi	r3,r3,-27104
   89278:	1085883a 	add	r2,r2,r2
   8927c:	10c5883a 	add	r2,r2,r3
   89280:	11bfff17 	ldw	r6,-4(r2)
   89284:	000f883a 	mov	r7,zero
   89288:	00890640 	call	89064 <__multadd>
   8928c:	1029883a 	mov	r20,r2
   89290:	003fcb06 	br	891c0 <__pow5mult+0x30>
   89294:	9809883a 	mov	r4,r19
   89298:	01409c44 	movi	r5,625
   8929c:	00890280 	call	89028 <__i2b>
   892a0:	98801215 	stw	r2,72(r19)
   892a4:	1021883a 	mov	r16,r2
   892a8:	10000015 	stw	zero,0(r2)
   892ac:	003fd006 	br	891f0 <__pow5mult+0x60>

000892b0 <__s2b>:
   892b0:	defff904 	addi	sp,sp,-28
   892b4:	dcc00315 	stw	r19,12(sp)
   892b8:	dc800215 	stw	r18,8(sp)
   892bc:	2827883a 	mov	r19,r5
   892c0:	2025883a 	mov	r18,r4
   892c4:	01400244 	movi	r5,9
   892c8:	39000204 	addi	r4,r7,8
   892cc:	dd000415 	stw	r20,16(sp)
   892d0:	dc400115 	stw	r17,4(sp)
   892d4:	dfc00615 	stw	ra,24(sp)
   892d8:	dd400515 	stw	r21,20(sp)
   892dc:	dc000015 	stw	r16,0(sp)
   892e0:	3829883a 	mov	r20,r7
   892e4:	3023883a 	mov	r17,r6
   892e8:	0082a340 	call	82a34 <__divsi3>
   892ec:	00c00044 	movi	r3,1
   892f0:	1880350e 	bge	r3,r2,893c8 <__s2b+0x118>
   892f4:	000b883a 	mov	r5,zero
   892f8:	18c7883a 	add	r3,r3,r3
   892fc:	29400044 	addi	r5,r5,1
   89300:	18bffd16 	blt	r3,r2,892f8 <__s2b+0x48>
   89304:	9009883a 	mov	r4,r18
   89308:	00888c40 	call	888c4 <_Balloc>
   8930c:	1011883a 	mov	r8,r2
   89310:	d8800717 	ldw	r2,28(sp)
   89314:	00c00044 	movi	r3,1
   89318:	01800244 	movi	r6,9
   8931c:	40800515 	stw	r2,20(r8)
   89320:	40c00415 	stw	r3,16(r8)
   89324:	3440260e 	bge	r6,r17,893c0 <__s2b+0x110>
   89328:	3021883a 	mov	r16,r6
   8932c:	99ab883a 	add	r21,r19,r6
   89330:	9c05883a 	add	r2,r19,r16
   89334:	11c00007 	ldb	r7,0(r2)
   89338:	400b883a 	mov	r5,r8
   8933c:	9009883a 	mov	r4,r18
   89340:	39fff404 	addi	r7,r7,-48
   89344:	01800284 	movi	r6,10
   89348:	00890640 	call	89064 <__multadd>
   8934c:	84000044 	addi	r16,r16,1
   89350:	1011883a 	mov	r8,r2
   89354:	8c3ff61e 	bne	r17,r16,89330 <__s2b+0x80>
   89358:	ac45883a 	add	r2,r21,r17
   8935c:	117ffe04 	addi	r5,r2,-8
   89360:	880d883a 	mov	r6,r17
   89364:	35000c0e 	bge	r6,r20,89398 <__s2b+0xe8>
   89368:	a185c83a 	sub	r2,r20,r6
   8936c:	2821883a 	mov	r16,r5
   89370:	28a3883a 	add	r17,r5,r2
   89374:	81c00007 	ldb	r7,0(r16)
   89378:	400b883a 	mov	r5,r8
   8937c:	9009883a 	mov	r4,r18
   89380:	39fff404 	addi	r7,r7,-48
   89384:	01800284 	movi	r6,10
   89388:	00890640 	call	89064 <__multadd>
   8938c:	84000044 	addi	r16,r16,1
   89390:	1011883a 	mov	r8,r2
   89394:	847ff71e 	bne	r16,r17,89374 <__s2b+0xc4>
   89398:	4005883a 	mov	r2,r8
   8939c:	dfc00617 	ldw	ra,24(sp)
   893a0:	dd400517 	ldw	r21,20(sp)
   893a4:	dd000417 	ldw	r20,16(sp)
   893a8:	dcc00317 	ldw	r19,12(sp)
   893ac:	dc800217 	ldw	r18,8(sp)
   893b0:	dc400117 	ldw	r17,4(sp)
   893b4:	dc000017 	ldw	r16,0(sp)
   893b8:	dec00704 	addi	sp,sp,28
   893bc:	f800283a 	ret
   893c0:	99400284 	addi	r5,r19,10
   893c4:	003fe706 	br	89364 <__s2b+0xb4>
   893c8:	000b883a 	mov	r5,zero
   893cc:	003fcd06 	br	89304 <__s2b+0x54>

000893d0 <_realloc_r>:
   893d0:	defff404 	addi	sp,sp,-48
   893d4:	dd800815 	stw	r22,32(sp)
   893d8:	dc800415 	stw	r18,16(sp)
   893dc:	dc400315 	stw	r17,12(sp)
   893e0:	dfc00b15 	stw	ra,44(sp)
   893e4:	df000a15 	stw	fp,40(sp)
   893e8:	ddc00915 	stw	r23,36(sp)
   893ec:	dd400715 	stw	r21,28(sp)
   893f0:	dd000615 	stw	r20,24(sp)
   893f4:	dcc00515 	stw	r19,20(sp)
   893f8:	dc000215 	stw	r16,8(sp)
   893fc:	2825883a 	mov	r18,r5
   89400:	3023883a 	mov	r17,r6
   89404:	202d883a 	mov	r22,r4
   89408:	2800c926 	beq	r5,zero,89730 <_realloc_r+0x360>
   8940c:	008d6900 	call	8d690 <__malloc_lock>
   89410:	943ffe04 	addi	r16,r18,-8
   89414:	88c002c4 	addi	r3,r17,11
   89418:	00800584 	movi	r2,22
   8941c:	82000117 	ldw	r8,4(r16)
   89420:	10c01b2e 	bgeu	r2,r3,89490 <_realloc_r+0xc0>
   89424:	00bffe04 	movi	r2,-8
   89428:	188e703a 	and	r7,r3,r2
   8942c:	3839883a 	mov	fp,r7
   89430:	38001a16 	blt	r7,zero,8949c <_realloc_r+0xcc>
   89434:	e4401936 	bltu	fp,r17,8949c <_realloc_r+0xcc>
   89438:	013fff04 	movi	r4,-4
   8943c:	4126703a 	and	r19,r8,r4
   89440:	99c02616 	blt	r19,r7,894dc <_realloc_r+0x10c>
   89444:	802b883a 	mov	r21,r16
   89448:	9829883a 	mov	r20,r19
   8944c:	84000204 	addi	r16,r16,8
   89450:	a80f883a 	mov	r7,r21
   89454:	a70dc83a 	sub	r6,r20,fp
   89458:	008003c4 	movi	r2,15
   8945c:	1180c136 	bltu	r2,r6,89764 <_realloc_r+0x394>
   89460:	38800117 	ldw	r2,4(r7)
   89464:	a549883a 	add	r4,r20,r21
   89468:	1080004c 	andi	r2,r2,1
   8946c:	a084b03a 	or	r2,r20,r2
   89470:	38800115 	stw	r2,4(r7)
   89474:	20c00117 	ldw	r3,4(r4)
   89478:	18c00054 	ori	r3,r3,1
   8947c:	20c00115 	stw	r3,4(r4)
   89480:	b009883a 	mov	r4,r22
   89484:	008d7980 	call	8d798 <__malloc_unlock>
   89488:	8023883a 	mov	r17,r16
   8948c:	00000606 	br	894a8 <_realloc_r+0xd8>
   89490:	01c00404 	movi	r7,16
   89494:	3839883a 	mov	fp,r7
   89498:	e47fe72e 	bgeu	fp,r17,89438 <_realloc_r+0x68>
   8949c:	00800304 	movi	r2,12
   894a0:	0023883a 	mov	r17,zero
   894a4:	b0800015 	stw	r2,0(r22)
   894a8:	8805883a 	mov	r2,r17
   894ac:	dfc00b17 	ldw	ra,44(sp)
   894b0:	df000a17 	ldw	fp,40(sp)
   894b4:	ddc00917 	ldw	r23,36(sp)
   894b8:	dd800817 	ldw	r22,32(sp)
   894bc:	dd400717 	ldw	r21,28(sp)
   894c0:	dd000617 	ldw	r20,24(sp)
   894c4:	dcc00517 	ldw	r19,20(sp)
   894c8:	dc800417 	ldw	r18,16(sp)
   894cc:	dc400317 	ldw	r17,12(sp)
   894d0:	dc000217 	ldw	r16,8(sp)
   894d4:	dec00c04 	addi	sp,sp,48
   894d8:	f800283a 	ret
   894dc:	008002b4 	movhi	r2,10
   894e0:	10a72f04 	addi	r2,r2,-25412
   894e4:	12400217 	ldw	r9,8(r2)
   894e8:	84cd883a 	add	r6,r16,r19
   894ec:	802b883a 	mov	r21,r16
   894f0:	3240b926 	beq	r6,r9,897d8 <_realloc_r+0x408>
   894f4:	31400117 	ldw	r5,4(r6)
   894f8:	00bfff84 	movi	r2,-2
   894fc:	2884703a 	and	r2,r5,r2
   89500:	1185883a 	add	r2,r2,r6
   89504:	10c00117 	ldw	r3,4(r2)
   89508:	18c0004c 	andi	r3,r3,1
   8950c:	1807003a 	cmpeq	r3,r3,zero
   89510:	1800a326 	beq	r3,zero,897a0 <_realloc_r+0x3d0>
   89514:	2908703a 	and	r4,r5,r4
   89518:	9929883a 	add	r20,r19,r4
   8951c:	a1c0a30e 	bge	r20,r7,897ac <_realloc_r+0x3dc>
   89520:	4080004c 	andi	r2,r8,1
   89524:	1000551e 	bne	r2,zero,8967c <_realloc_r+0x2ac>
   89528:	80800017 	ldw	r2,0(r16)
   8952c:	80afc83a 	sub	r23,r16,r2
   89530:	b8c00117 	ldw	r3,4(r23)
   89534:	00bfff04 	movi	r2,-4
   89538:	1884703a 	and	r2,r3,r2
   8953c:	30002e26 	beq	r6,zero,895f8 <_realloc_r+0x228>
   89540:	3240b926 	beq	r6,r9,89828 <_realloc_r+0x458>
   89544:	98a9883a 	add	r20,r19,r2
   89548:	2509883a 	add	r4,r4,r20
   8954c:	d9000015 	stw	r4,0(sp)
   89550:	21c02a16 	blt	r4,r7,895fc <_realloc_r+0x22c>
   89554:	30800317 	ldw	r2,12(r6)
   89558:	30c00217 	ldw	r3,8(r6)
   8955c:	01400904 	movi	r5,36
   89560:	99bfff04 	addi	r6,r19,-4
   89564:	18800315 	stw	r2,12(r3)
   89568:	10c00215 	stw	r3,8(r2)
   8956c:	b9000317 	ldw	r4,12(r23)
   89570:	b8800217 	ldw	r2,8(r23)
   89574:	b82b883a 	mov	r21,r23
   89578:	bc000204 	addi	r16,r23,8
   8957c:	20800215 	stw	r2,8(r4)
   89580:	11000315 	stw	r4,12(r2)
   89584:	2980e436 	bltu	r5,r6,89918 <_realloc_r+0x548>
   89588:	008004c4 	movi	r2,19
   8958c:	9009883a 	mov	r4,r18
   89590:	8011883a 	mov	r8,r16
   89594:	11800f2e 	bgeu	r2,r6,895d4 <_realloc_r+0x204>
   89598:	90800017 	ldw	r2,0(r18)
   8959c:	ba000404 	addi	r8,r23,16
   895a0:	91000204 	addi	r4,r18,8
   895a4:	b8800215 	stw	r2,8(r23)
   895a8:	90c00117 	ldw	r3,4(r18)
   895ac:	008006c4 	movi	r2,27
   895b0:	b8c00315 	stw	r3,12(r23)
   895b4:	1180072e 	bgeu	r2,r6,895d4 <_realloc_r+0x204>
   895b8:	90c00217 	ldw	r3,8(r18)
   895bc:	ba000604 	addi	r8,r23,24
   895c0:	91000404 	addi	r4,r18,16
   895c4:	b8c00415 	stw	r3,16(r23)
   895c8:	90800317 	ldw	r2,12(r18)
   895cc:	b8800515 	stw	r2,20(r23)
   895d0:	3140e726 	beq	r6,r5,89970 <_realloc_r+0x5a0>
   895d4:	20800017 	ldw	r2,0(r4)
   895d8:	dd000017 	ldw	r20,0(sp)
   895dc:	b80f883a 	mov	r7,r23
   895e0:	40800015 	stw	r2,0(r8)
   895e4:	20c00117 	ldw	r3,4(r4)
   895e8:	40c00115 	stw	r3,4(r8)
   895ec:	20800217 	ldw	r2,8(r4)
   895f0:	40800215 	stw	r2,8(r8)
   895f4:	003f9706 	br	89454 <_realloc_r+0x84>
   895f8:	98a9883a 	add	r20,r19,r2
   895fc:	a1c01f16 	blt	r20,r7,8967c <_realloc_r+0x2ac>
   89600:	b8c00317 	ldw	r3,12(r23)
   89604:	b8800217 	ldw	r2,8(r23)
   89608:	99bfff04 	addi	r6,r19,-4
   8960c:	01400904 	movi	r5,36
   89610:	b82b883a 	mov	r21,r23
   89614:	18800215 	stw	r2,8(r3)
   89618:	10c00315 	stw	r3,12(r2)
   8961c:	bc000204 	addi	r16,r23,8
   89620:	2980c336 	bltu	r5,r6,89930 <_realloc_r+0x560>
   89624:	008004c4 	movi	r2,19
   89628:	9009883a 	mov	r4,r18
   8962c:	8011883a 	mov	r8,r16
   89630:	11800f2e 	bgeu	r2,r6,89670 <_realloc_r+0x2a0>
   89634:	90800017 	ldw	r2,0(r18)
   89638:	ba000404 	addi	r8,r23,16
   8963c:	91000204 	addi	r4,r18,8
   89640:	b8800215 	stw	r2,8(r23)
   89644:	90c00117 	ldw	r3,4(r18)
   89648:	008006c4 	movi	r2,27
   8964c:	b8c00315 	stw	r3,12(r23)
   89650:	1180072e 	bgeu	r2,r6,89670 <_realloc_r+0x2a0>
   89654:	90c00217 	ldw	r3,8(r18)
   89658:	ba000604 	addi	r8,r23,24
   8965c:	91000404 	addi	r4,r18,16
   89660:	b8c00415 	stw	r3,16(r23)
   89664:	90800317 	ldw	r2,12(r18)
   89668:	b8800515 	stw	r2,20(r23)
   8966c:	3140c726 	beq	r6,r5,8998c <_realloc_r+0x5bc>
   89670:	20800017 	ldw	r2,0(r4)
   89674:	b80f883a 	mov	r7,r23
   89678:	003fd906 	br	895e0 <_realloc_r+0x210>
   8967c:	880b883a 	mov	r5,r17
   89680:	b009883a 	mov	r4,r22
   89684:	00879080 	call	87908 <_malloc_r>
   89688:	1023883a 	mov	r17,r2
   8968c:	10002526 	beq	r2,zero,89724 <_realloc_r+0x354>
   89690:	80800117 	ldw	r2,4(r16)
   89694:	00ffff84 	movi	r3,-2
   89698:	893ffe04 	addi	r4,r17,-8
   8969c:	10c4703a 	and	r2,r2,r3
   896a0:	8085883a 	add	r2,r16,r2
   896a4:	20809526 	beq	r4,r2,898fc <_realloc_r+0x52c>
   896a8:	99bfff04 	addi	r6,r19,-4
   896ac:	01c00904 	movi	r7,36
   896b0:	39804536 	bltu	r7,r6,897c8 <_realloc_r+0x3f8>
   896b4:	008004c4 	movi	r2,19
   896b8:	9009883a 	mov	r4,r18
   896bc:	880b883a 	mov	r5,r17
   896c0:	11800f2e 	bgeu	r2,r6,89700 <_realloc_r+0x330>
   896c4:	90800017 	ldw	r2,0(r18)
   896c8:	89400204 	addi	r5,r17,8
   896cc:	91000204 	addi	r4,r18,8
   896d0:	88800015 	stw	r2,0(r17)
   896d4:	90c00117 	ldw	r3,4(r18)
   896d8:	008006c4 	movi	r2,27
   896dc:	88c00115 	stw	r3,4(r17)
   896e0:	1180072e 	bgeu	r2,r6,89700 <_realloc_r+0x330>
   896e4:	90c00217 	ldw	r3,8(r18)
   896e8:	89400404 	addi	r5,r17,16
   896ec:	91000404 	addi	r4,r18,16
   896f0:	88c00215 	stw	r3,8(r17)
   896f4:	90800317 	ldw	r2,12(r18)
   896f8:	88800315 	stw	r2,12(r17)
   896fc:	31c09126 	beq	r6,r7,89944 <_realloc_r+0x574>
   89700:	20800017 	ldw	r2,0(r4)
   89704:	28800015 	stw	r2,0(r5)
   89708:	20c00117 	ldw	r3,4(r4)
   8970c:	28c00115 	stw	r3,4(r5)
   89710:	20800217 	ldw	r2,8(r4)
   89714:	28800215 	stw	r2,8(r5)
   89718:	900b883a 	mov	r5,r18
   8971c:	b009883a 	mov	r4,r22
   89720:	0086d800 	call	86d80 <_free_r>
   89724:	b009883a 	mov	r4,r22
   89728:	008d7980 	call	8d798 <__malloc_unlock>
   8972c:	003f5e06 	br	894a8 <_realloc_r+0xd8>
   89730:	300b883a 	mov	r5,r6
   89734:	dfc00b17 	ldw	ra,44(sp)
   89738:	df000a17 	ldw	fp,40(sp)
   8973c:	ddc00917 	ldw	r23,36(sp)
   89740:	dd800817 	ldw	r22,32(sp)
   89744:	dd400717 	ldw	r21,28(sp)
   89748:	dd000617 	ldw	r20,24(sp)
   8974c:	dcc00517 	ldw	r19,20(sp)
   89750:	dc800417 	ldw	r18,16(sp)
   89754:	dc400317 	ldw	r17,12(sp)
   89758:	dc000217 	ldw	r16,8(sp)
   8975c:	dec00c04 	addi	sp,sp,48
   89760:	00879081 	jmpi	87908 <_malloc_r>
   89764:	38800117 	ldw	r2,4(r7)
   89768:	e54b883a 	add	r5,fp,r21
   8976c:	31000054 	ori	r4,r6,1
   89770:	1080004c 	andi	r2,r2,1
   89774:	1704b03a 	or	r2,r2,fp
   89778:	38800115 	stw	r2,4(r7)
   8977c:	29000115 	stw	r4,4(r5)
   89780:	2987883a 	add	r3,r5,r6
   89784:	18800117 	ldw	r2,4(r3)
   89788:	29400204 	addi	r5,r5,8
   8978c:	b009883a 	mov	r4,r22
   89790:	10800054 	ori	r2,r2,1
   89794:	18800115 	stw	r2,4(r3)
   89798:	0086d800 	call	86d80 <_free_r>
   8979c:	003f3806 	br	89480 <_realloc_r+0xb0>
   897a0:	000d883a 	mov	r6,zero
   897a4:	0009883a 	mov	r4,zero
   897a8:	003f5d06 	br	89520 <_realloc_r+0x150>
   897ac:	30c00217 	ldw	r3,8(r6)
   897b0:	30800317 	ldw	r2,12(r6)
   897b4:	800f883a 	mov	r7,r16
   897b8:	84000204 	addi	r16,r16,8
   897bc:	10c00215 	stw	r3,8(r2)
   897c0:	18800315 	stw	r2,12(r3)
   897c4:	003f2306 	br	89454 <_realloc_r+0x84>
   897c8:	8809883a 	mov	r4,r17
   897cc:	900b883a 	mov	r5,r18
   897d0:	00881cc0 	call	881cc <memmove>
   897d4:	003fd006 	br	89718 <_realloc_r+0x348>
   897d8:	30800117 	ldw	r2,4(r6)
   897dc:	e0c00404 	addi	r3,fp,16
   897e0:	1108703a 	and	r4,r2,r4
   897e4:	9905883a 	add	r2,r19,r4
   897e8:	10ff4d16 	blt	r2,r3,89520 <_realloc_r+0x150>
   897ec:	1705c83a 	sub	r2,r2,fp
   897f0:	870b883a 	add	r5,r16,fp
   897f4:	10800054 	ori	r2,r2,1
   897f8:	28800115 	stw	r2,4(r5)
   897fc:	80c00117 	ldw	r3,4(r16)
   89800:	008002b4 	movhi	r2,10
   89804:	10a72f04 	addi	r2,r2,-25412
   89808:	b009883a 	mov	r4,r22
   8980c:	18c0004c 	andi	r3,r3,1
   89810:	e0c6b03a 	or	r3,fp,r3
   89814:	11400215 	stw	r5,8(r2)
   89818:	80c00115 	stw	r3,4(r16)
   8981c:	008d7980 	call	8d798 <__malloc_unlock>
   89820:	84400204 	addi	r17,r16,8
   89824:	003f2006 	br	894a8 <_realloc_r+0xd8>
   89828:	98a9883a 	add	r20,r19,r2
   8982c:	2509883a 	add	r4,r4,r20
   89830:	e0800404 	addi	r2,fp,16
   89834:	d9000115 	stw	r4,4(sp)
   89838:	20bf7016 	blt	r4,r2,895fc <_realloc_r+0x22c>
   8983c:	b8c00317 	ldw	r3,12(r23)
   89840:	b8800217 	ldw	r2,8(r23)
   89844:	99bfff04 	addi	r6,r19,-4
   89848:	01400904 	movi	r5,36
   8984c:	18800215 	stw	r2,8(r3)
   89850:	10c00315 	stw	r3,12(r2)
   89854:	bc400204 	addi	r17,r23,8
   89858:	29804136 	bltu	r5,r6,89960 <_realloc_r+0x590>
   8985c:	008004c4 	movi	r2,19
   89860:	9009883a 	mov	r4,r18
   89864:	880f883a 	mov	r7,r17
   89868:	11800f2e 	bgeu	r2,r6,898a8 <_realloc_r+0x4d8>
   8986c:	90800017 	ldw	r2,0(r18)
   89870:	b9c00404 	addi	r7,r23,16
   89874:	91000204 	addi	r4,r18,8
   89878:	b8800215 	stw	r2,8(r23)
   8987c:	90c00117 	ldw	r3,4(r18)
   89880:	008006c4 	movi	r2,27
   89884:	b8c00315 	stw	r3,12(r23)
   89888:	1180072e 	bgeu	r2,r6,898a8 <_realloc_r+0x4d8>
   8988c:	90c00217 	ldw	r3,8(r18)
   89890:	b9c00604 	addi	r7,r23,24
   89894:	91000404 	addi	r4,r18,16
   89898:	b8c00415 	stw	r3,16(r23)
   8989c:	90800317 	ldw	r2,12(r18)
   898a0:	b8800515 	stw	r2,20(r23)
   898a4:	31404026 	beq	r6,r5,899a8 <_realloc_r+0x5d8>
   898a8:	20800017 	ldw	r2,0(r4)
   898ac:	38800015 	stw	r2,0(r7)
   898b0:	20c00117 	ldw	r3,4(r4)
   898b4:	38c00115 	stw	r3,4(r7)
   898b8:	20800217 	ldw	r2,8(r4)
   898bc:	38800215 	stw	r2,8(r7)
   898c0:	d8c00117 	ldw	r3,4(sp)
   898c4:	bf0b883a 	add	r5,r23,fp
   898c8:	b009883a 	mov	r4,r22
   898cc:	1f05c83a 	sub	r2,r3,fp
   898d0:	10800054 	ori	r2,r2,1
   898d4:	28800115 	stw	r2,4(r5)
   898d8:	b8c00117 	ldw	r3,4(r23)
   898dc:	008002b4 	movhi	r2,10
   898e0:	10a72f04 	addi	r2,r2,-25412
   898e4:	11400215 	stw	r5,8(r2)
   898e8:	18c0004c 	andi	r3,r3,1
   898ec:	e0c6b03a 	or	r3,fp,r3
   898f0:	b8c00115 	stw	r3,4(r23)
   898f4:	008d7980 	call	8d798 <__malloc_unlock>
   898f8:	003eeb06 	br	894a8 <_realloc_r+0xd8>
   898fc:	20800117 	ldw	r2,4(r4)
   89900:	00ffff04 	movi	r3,-4
   89904:	800f883a 	mov	r7,r16
   89908:	10c4703a 	and	r2,r2,r3
   8990c:	98a9883a 	add	r20,r19,r2
   89910:	84000204 	addi	r16,r16,8
   89914:	003ecf06 	br	89454 <_realloc_r+0x84>
   89918:	900b883a 	mov	r5,r18
   8991c:	8009883a 	mov	r4,r16
   89920:	00881cc0 	call	881cc <memmove>
   89924:	dd000017 	ldw	r20,0(sp)
   89928:	b80f883a 	mov	r7,r23
   8992c:	003ec906 	br	89454 <_realloc_r+0x84>
   89930:	900b883a 	mov	r5,r18
   89934:	8009883a 	mov	r4,r16
   89938:	00881cc0 	call	881cc <memmove>
   8993c:	b80f883a 	mov	r7,r23
   89940:	003ec406 	br	89454 <_realloc_r+0x84>
   89944:	90c00417 	ldw	r3,16(r18)
   89948:	89400604 	addi	r5,r17,24
   8994c:	91000604 	addi	r4,r18,24
   89950:	88c00415 	stw	r3,16(r17)
   89954:	90800517 	ldw	r2,20(r18)
   89958:	88800515 	stw	r2,20(r17)
   8995c:	003f6806 	br	89700 <_realloc_r+0x330>
   89960:	900b883a 	mov	r5,r18
   89964:	8809883a 	mov	r4,r17
   89968:	00881cc0 	call	881cc <memmove>
   8996c:	003fd406 	br	898c0 <_realloc_r+0x4f0>
   89970:	90c00417 	ldw	r3,16(r18)
   89974:	91000604 	addi	r4,r18,24
   89978:	ba000804 	addi	r8,r23,32
   8997c:	b8c00615 	stw	r3,24(r23)
   89980:	90800517 	ldw	r2,20(r18)
   89984:	b8800715 	stw	r2,28(r23)
   89988:	003f1206 	br	895d4 <_realloc_r+0x204>
   8998c:	90c00417 	ldw	r3,16(r18)
   89990:	91000604 	addi	r4,r18,24
   89994:	ba000804 	addi	r8,r23,32
   89998:	b8c00615 	stw	r3,24(r23)
   8999c:	90800517 	ldw	r2,20(r18)
   899a0:	b8800715 	stw	r2,28(r23)
   899a4:	003f3206 	br	89670 <_realloc_r+0x2a0>
   899a8:	90c00417 	ldw	r3,16(r18)
   899ac:	91000604 	addi	r4,r18,24
   899b0:	b9c00804 	addi	r7,r23,32
   899b4:	b8c00615 	stw	r3,24(r23)
   899b8:	90800517 	ldw	r2,20(r18)
   899bc:	b8800715 	stw	r2,28(r23)
   899c0:	003fb906 	br	898a8 <_realloc_r+0x4d8>

000899c4 <__isinfd>:
   899c4:	200d883a 	mov	r6,r4
   899c8:	0109c83a 	sub	r4,zero,r4
   899cc:	2188b03a 	or	r4,r4,r6
   899d0:	2008d7fa 	srli	r4,r4,31
   899d4:	00a00034 	movhi	r2,32768
   899d8:	10bfffc4 	addi	r2,r2,-1
   899dc:	1144703a 	and	r2,r2,r5
   899e0:	2088b03a 	or	r4,r4,r2
   899e4:	009ffc34 	movhi	r2,32752
   899e8:	1105c83a 	sub	r2,r2,r4
   899ec:	0087c83a 	sub	r3,zero,r2
   899f0:	10c4b03a 	or	r2,r2,r3
   899f4:	1004d7fa 	srli	r2,r2,31
   899f8:	00c00044 	movi	r3,1
   899fc:	1885c83a 	sub	r2,r3,r2
   89a00:	f800283a 	ret

00089a04 <__isnand>:
   89a04:	200d883a 	mov	r6,r4
   89a08:	0109c83a 	sub	r4,zero,r4
   89a0c:	2188b03a 	or	r4,r4,r6
   89a10:	2008d7fa 	srli	r4,r4,31
   89a14:	00a00034 	movhi	r2,32768
   89a18:	10bfffc4 	addi	r2,r2,-1
   89a1c:	1144703a 	and	r2,r2,r5
   89a20:	2088b03a 	or	r4,r4,r2
   89a24:	009ffc34 	movhi	r2,32752
   89a28:	1105c83a 	sub	r2,r2,r4
   89a2c:	1004d7fa 	srli	r2,r2,31
   89a30:	f800283a 	ret

00089a34 <_sbrk_r>:
   89a34:	defffd04 	addi	sp,sp,-12
   89a38:	dc000015 	stw	r16,0(sp)
   89a3c:	040002b4 	movhi	r16,10
   89a40:	8433bc04 	addi	r16,r16,-12560
   89a44:	dc400115 	stw	r17,4(sp)
   89a48:	80000015 	stw	zero,0(r16)
   89a4c:	2023883a 	mov	r17,r4
   89a50:	2809883a 	mov	r4,r5
   89a54:	dfc00215 	stw	ra,8(sp)
   89a58:	008d3480 	call	8d348 <sbrk>
   89a5c:	1007883a 	mov	r3,r2
   89a60:	00bfffc4 	movi	r2,-1
   89a64:	18800626 	beq	r3,r2,89a80 <_sbrk_r+0x4c>
   89a68:	1805883a 	mov	r2,r3
   89a6c:	dfc00217 	ldw	ra,8(sp)
   89a70:	dc400117 	ldw	r17,4(sp)
   89a74:	dc000017 	ldw	r16,0(sp)
   89a78:	dec00304 	addi	sp,sp,12
   89a7c:	f800283a 	ret
   89a80:	80800017 	ldw	r2,0(r16)
   89a84:	103ff826 	beq	r2,zero,89a68 <_sbrk_r+0x34>
   89a88:	88800015 	stw	r2,0(r17)
   89a8c:	1805883a 	mov	r2,r3
   89a90:	dfc00217 	ldw	ra,8(sp)
   89a94:	dc400117 	ldw	r17,4(sp)
   89a98:	dc000017 	ldw	r16,0(sp)
   89a9c:	dec00304 	addi	sp,sp,12
   89aa0:	f800283a 	ret

00089aa4 <__sclose>:
   89aa4:	2940038f 	ldh	r5,14(r5)
   89aa8:	0089dec1 	jmpi	89dec <_close_r>

00089aac <__sseek>:
   89aac:	defffe04 	addi	sp,sp,-8
   89ab0:	dc000015 	stw	r16,0(sp)
   89ab4:	2821883a 	mov	r16,r5
   89ab8:	2940038f 	ldh	r5,14(r5)
   89abc:	dfc00115 	stw	ra,4(sp)
   89ac0:	008a0640 	call	8a064 <_lseek_r>
   89ac4:	1007883a 	mov	r3,r2
   89ac8:	00bfffc4 	movi	r2,-1
   89acc:	18800926 	beq	r3,r2,89af4 <__sseek+0x48>
   89ad0:	8080030b 	ldhu	r2,12(r16)
   89ad4:	80c01415 	stw	r3,80(r16)
   89ad8:	10840014 	ori	r2,r2,4096
   89adc:	8080030d 	sth	r2,12(r16)
   89ae0:	1805883a 	mov	r2,r3
   89ae4:	dfc00117 	ldw	ra,4(sp)
   89ae8:	dc000017 	ldw	r16,0(sp)
   89aec:	dec00204 	addi	sp,sp,8
   89af0:	f800283a 	ret
   89af4:	8080030b 	ldhu	r2,12(r16)
   89af8:	10bbffcc 	andi	r2,r2,61439
   89afc:	8080030d 	sth	r2,12(r16)
   89b00:	1805883a 	mov	r2,r3
   89b04:	dfc00117 	ldw	ra,4(sp)
   89b08:	dc000017 	ldw	r16,0(sp)
   89b0c:	dec00204 	addi	sp,sp,8
   89b10:	f800283a 	ret

00089b14 <__swrite>:
   89b14:	2880030b 	ldhu	r2,12(r5)
   89b18:	defffb04 	addi	sp,sp,-20
   89b1c:	dcc00315 	stw	r19,12(sp)
   89b20:	1080400c 	andi	r2,r2,256
   89b24:	dc800215 	stw	r18,8(sp)
   89b28:	dc400115 	stw	r17,4(sp)
   89b2c:	dc000015 	stw	r16,0(sp)
   89b30:	3027883a 	mov	r19,r6
   89b34:	3825883a 	mov	r18,r7
   89b38:	dfc00415 	stw	ra,16(sp)
   89b3c:	2821883a 	mov	r16,r5
   89b40:	000d883a 	mov	r6,zero
   89b44:	01c00084 	movi	r7,2
   89b48:	2023883a 	mov	r17,r4
   89b4c:	10000226 	beq	r2,zero,89b58 <__swrite+0x44>
   89b50:	2940038f 	ldh	r5,14(r5)
   89b54:	008a0640 	call	8a064 <_lseek_r>
   89b58:	8080030b 	ldhu	r2,12(r16)
   89b5c:	8140038f 	ldh	r5,14(r16)
   89b60:	8809883a 	mov	r4,r17
   89b64:	10bbffcc 	andi	r2,r2,61439
   89b68:	980d883a 	mov	r6,r19
   89b6c:	900f883a 	mov	r7,r18
   89b70:	8080030d 	sth	r2,12(r16)
   89b74:	dfc00417 	ldw	ra,16(sp)
   89b78:	dcc00317 	ldw	r19,12(sp)
   89b7c:	dc800217 	ldw	r18,8(sp)
   89b80:	dc400117 	ldw	r17,4(sp)
   89b84:	dc000017 	ldw	r16,0(sp)
   89b88:	dec00504 	addi	sp,sp,20
   89b8c:	0089cac1 	jmpi	89cac <_write_r>

00089b90 <__sread>:
   89b90:	defffe04 	addi	sp,sp,-8
   89b94:	dc000015 	stw	r16,0(sp)
   89b98:	2821883a 	mov	r16,r5
   89b9c:	2940038f 	ldh	r5,14(r5)
   89ba0:	dfc00115 	stw	ra,4(sp)
   89ba4:	008a0dc0 	call	8a0dc <_read_r>
   89ba8:	1007883a 	mov	r3,r2
   89bac:	10000816 	blt	r2,zero,89bd0 <__sread+0x40>
   89bb0:	80801417 	ldw	r2,80(r16)
   89bb4:	10c5883a 	add	r2,r2,r3
   89bb8:	80801415 	stw	r2,80(r16)
   89bbc:	1805883a 	mov	r2,r3
   89bc0:	dfc00117 	ldw	ra,4(sp)
   89bc4:	dc000017 	ldw	r16,0(sp)
   89bc8:	dec00204 	addi	sp,sp,8
   89bcc:	f800283a 	ret
   89bd0:	8080030b 	ldhu	r2,12(r16)
   89bd4:	10bbffcc 	andi	r2,r2,61439
   89bd8:	8080030d 	sth	r2,12(r16)
   89bdc:	1805883a 	mov	r2,r3
   89be0:	dfc00117 	ldw	ra,4(sp)
   89be4:	dc000017 	ldw	r16,0(sp)
   89be8:	dec00204 	addi	sp,sp,8
   89bec:	f800283a 	ret

00089bf0 <strcmp>:
   89bf0:	2144b03a 	or	r2,r4,r5
   89bf4:	108000cc 	andi	r2,r2,3
   89bf8:	10001d1e 	bne	r2,zero,89c70 <strcmp+0x80>
   89bfc:	200f883a 	mov	r7,r4
   89c00:	28800017 	ldw	r2,0(r5)
   89c04:	21000017 	ldw	r4,0(r4)
   89c08:	280d883a 	mov	r6,r5
   89c0c:	2080161e 	bne	r4,r2,89c68 <strcmp+0x78>
   89c10:	023fbff4 	movhi	r8,65279
   89c14:	423fbfc4 	addi	r8,r8,-257
   89c18:	2207883a 	add	r3,r4,r8
   89c1c:	01602074 	movhi	r5,32897
   89c20:	29602004 	addi	r5,r5,-32640
   89c24:	1946703a 	and	r3,r3,r5
   89c28:	0104303a 	nor	r2,zero,r4
   89c2c:	10c4703a 	and	r2,r2,r3
   89c30:	10001c1e 	bne	r2,zero,89ca4 <strcmp+0xb4>
   89c34:	4013883a 	mov	r9,r8
   89c38:	2811883a 	mov	r8,r5
   89c3c:	00000106 	br	89c44 <strcmp+0x54>
   89c40:	1800181e 	bne	r3,zero,89ca4 <strcmp+0xb4>
   89c44:	39c00104 	addi	r7,r7,4
   89c48:	39000017 	ldw	r4,0(r7)
   89c4c:	31800104 	addi	r6,r6,4
   89c50:	31400017 	ldw	r5,0(r6)
   89c54:	2245883a 	add	r2,r4,r9
   89c58:	1204703a 	and	r2,r2,r8
   89c5c:	0106303a 	nor	r3,zero,r4
   89c60:	1886703a 	and	r3,r3,r2
   89c64:	217ff626 	beq	r4,r5,89c40 <strcmp+0x50>
   89c68:	3809883a 	mov	r4,r7
   89c6c:	300b883a 	mov	r5,r6
   89c70:	20c00007 	ldb	r3,0(r4)
   89c74:	1800051e 	bne	r3,zero,89c8c <strcmp+0x9c>
   89c78:	00000606 	br	89c94 <strcmp+0xa4>
   89c7c:	21000044 	addi	r4,r4,1
   89c80:	20c00007 	ldb	r3,0(r4)
   89c84:	29400044 	addi	r5,r5,1
   89c88:	18000226 	beq	r3,zero,89c94 <strcmp+0xa4>
   89c8c:	28800007 	ldb	r2,0(r5)
   89c90:	18bffa26 	beq	r3,r2,89c7c <strcmp+0x8c>
   89c94:	20c00003 	ldbu	r3,0(r4)
   89c98:	28800003 	ldbu	r2,0(r5)
   89c9c:	1885c83a 	sub	r2,r3,r2
   89ca0:	f800283a 	ret
   89ca4:	0005883a 	mov	r2,zero
   89ca8:	f800283a 	ret

00089cac <_write_r>:
   89cac:	defffd04 	addi	sp,sp,-12
   89cb0:	dc000015 	stw	r16,0(sp)
   89cb4:	040002b4 	movhi	r16,10
   89cb8:	8433bc04 	addi	r16,r16,-12560
   89cbc:	dc400115 	stw	r17,4(sp)
   89cc0:	80000015 	stw	zero,0(r16)
   89cc4:	2023883a 	mov	r17,r4
   89cc8:	2809883a 	mov	r4,r5
   89ccc:	300b883a 	mov	r5,r6
   89cd0:	380d883a 	mov	r6,r7
   89cd4:	dfc00215 	stw	ra,8(sp)
   89cd8:	008d4040 	call	8d404 <write>
   89cdc:	1007883a 	mov	r3,r2
   89ce0:	00bfffc4 	movi	r2,-1
   89ce4:	18800626 	beq	r3,r2,89d00 <_write_r+0x54>
   89ce8:	1805883a 	mov	r2,r3
   89cec:	dfc00217 	ldw	ra,8(sp)
   89cf0:	dc400117 	ldw	r17,4(sp)
   89cf4:	dc000017 	ldw	r16,0(sp)
   89cf8:	dec00304 	addi	sp,sp,12
   89cfc:	f800283a 	ret
   89d00:	80800017 	ldw	r2,0(r16)
   89d04:	103ff826 	beq	r2,zero,89ce8 <_write_r+0x3c>
   89d08:	88800015 	stw	r2,0(r17)
   89d0c:	1805883a 	mov	r2,r3
   89d10:	dfc00217 	ldw	ra,8(sp)
   89d14:	dc400117 	ldw	r17,4(sp)
   89d18:	dc000017 	ldw	r16,0(sp)
   89d1c:	dec00304 	addi	sp,sp,12
   89d20:	f800283a 	ret

00089d24 <_calloc_r>:
   89d24:	defffe04 	addi	sp,sp,-8
   89d28:	dc400015 	stw	r17,0(sp)
   89d2c:	2023883a 	mov	r17,r4
   89d30:	2809883a 	mov	r4,r5
   89d34:	300b883a 	mov	r5,r6
   89d38:	dfc00115 	stw	ra,4(sp)
   89d3c:	0082b040 	call	82b04 <__mulsi3>
   89d40:	100b883a 	mov	r5,r2
   89d44:	8809883a 	mov	r4,r17
   89d48:	00879080 	call	87908 <_malloc_r>
   89d4c:	1023883a 	mov	r17,r2
   89d50:	01c00904 	movi	r7,36
   89d54:	10000d26 	beq	r2,zero,89d8c <_calloc_r+0x68>
   89d58:	10ffff17 	ldw	r3,-4(r2)
   89d5c:	1009883a 	mov	r4,r2
   89d60:	00bfff04 	movi	r2,-4
   89d64:	1886703a 	and	r3,r3,r2
   89d68:	1887883a 	add	r3,r3,r2
   89d6c:	180d883a 	mov	r6,r3
   89d70:	000b883a 	mov	r5,zero
   89d74:	38c01736 	bltu	r7,r3,89dd4 <_calloc_r+0xb0>
   89d78:	008004c4 	movi	r2,19
   89d7c:	10c00836 	bltu	r2,r3,89da0 <_calloc_r+0x7c>
   89d80:	20000215 	stw	zero,8(r4)
   89d84:	20000015 	stw	zero,0(r4)
   89d88:	20000115 	stw	zero,4(r4)
   89d8c:	8805883a 	mov	r2,r17
   89d90:	dfc00117 	ldw	ra,4(sp)
   89d94:	dc400017 	ldw	r17,0(sp)
   89d98:	dec00204 	addi	sp,sp,8
   89d9c:	f800283a 	ret
   89da0:	008006c4 	movi	r2,27
   89da4:	88000015 	stw	zero,0(r17)
   89da8:	88000115 	stw	zero,4(r17)
   89dac:	89000204 	addi	r4,r17,8
   89db0:	10fff32e 	bgeu	r2,r3,89d80 <_calloc_r+0x5c>
   89db4:	88000215 	stw	zero,8(r17)
   89db8:	88000315 	stw	zero,12(r17)
   89dbc:	89000404 	addi	r4,r17,16
   89dc0:	19ffef1e 	bne	r3,r7,89d80 <_calloc_r+0x5c>
   89dc4:	89000604 	addi	r4,r17,24
   89dc8:	88000415 	stw	zero,16(r17)
   89dcc:	88000515 	stw	zero,20(r17)
   89dd0:	003feb06 	br	89d80 <_calloc_r+0x5c>
   89dd4:	00882ac0 	call	882ac <memset>
   89dd8:	8805883a 	mov	r2,r17
   89ddc:	dfc00117 	ldw	ra,4(sp)
   89de0:	dc400017 	ldw	r17,0(sp)
   89de4:	dec00204 	addi	sp,sp,8
   89de8:	f800283a 	ret

00089dec <_close_r>:
   89dec:	defffd04 	addi	sp,sp,-12
   89df0:	dc000015 	stw	r16,0(sp)
   89df4:	040002b4 	movhi	r16,10
   89df8:	8433bc04 	addi	r16,r16,-12560
   89dfc:	dc400115 	stw	r17,4(sp)
   89e00:	80000015 	stw	zero,0(r16)
   89e04:	2023883a 	mov	r17,r4
   89e08:	2809883a 	mov	r4,r5
   89e0c:	dfc00215 	stw	ra,8(sp)
   89e10:	008c6040 	call	8c604 <close>
   89e14:	1007883a 	mov	r3,r2
   89e18:	00bfffc4 	movi	r2,-1
   89e1c:	18800626 	beq	r3,r2,89e38 <_close_r+0x4c>
   89e20:	1805883a 	mov	r2,r3
   89e24:	dfc00217 	ldw	ra,8(sp)
   89e28:	dc400117 	ldw	r17,4(sp)
   89e2c:	dc000017 	ldw	r16,0(sp)
   89e30:	dec00304 	addi	sp,sp,12
   89e34:	f800283a 	ret
   89e38:	80800017 	ldw	r2,0(r16)
   89e3c:	103ff826 	beq	r2,zero,89e20 <_close_r+0x34>
   89e40:	88800015 	stw	r2,0(r17)
   89e44:	1805883a 	mov	r2,r3
   89e48:	dfc00217 	ldw	ra,8(sp)
   89e4c:	dc400117 	ldw	r17,4(sp)
   89e50:	dc000017 	ldw	r16,0(sp)
   89e54:	dec00304 	addi	sp,sp,12
   89e58:	f800283a 	ret

00089e5c <_fclose_r>:
   89e5c:	defffc04 	addi	sp,sp,-16
   89e60:	dc400115 	stw	r17,4(sp)
   89e64:	dc000015 	stw	r16,0(sp)
   89e68:	dfc00315 	stw	ra,12(sp)
   89e6c:	dc800215 	stw	r18,8(sp)
   89e70:	2821883a 	mov	r16,r5
   89e74:	2023883a 	mov	r17,r4
   89e78:	28002926 	beq	r5,zero,89f20 <_fclose_r+0xc4>
   89e7c:	00869b80 	call	869b8 <__sfp_lock_acquire>
   89e80:	88000226 	beq	r17,zero,89e8c <_fclose_r+0x30>
   89e84:	88800e17 	ldw	r2,56(r17)
   89e88:	10002d26 	beq	r2,zero,89f40 <_fclose_r+0xe4>
   89e8c:	8080030f 	ldh	r2,12(r16)
   89e90:	10002226 	beq	r2,zero,89f1c <_fclose_r+0xc0>
   89e94:	8809883a 	mov	r4,r17
   89e98:	800b883a 	mov	r5,r16
   89e9c:	00867300 	call	86730 <_fflush_r>
   89ea0:	1025883a 	mov	r18,r2
   89ea4:	80800b17 	ldw	r2,44(r16)
   89ea8:	10000426 	beq	r2,zero,89ebc <_fclose_r+0x60>
   89eac:	81400717 	ldw	r5,28(r16)
   89eb0:	8809883a 	mov	r4,r17
   89eb4:	103ee83a 	callr	r2
   89eb8:	10002a16 	blt	r2,zero,89f64 <_fclose_r+0x108>
   89ebc:	8080030b 	ldhu	r2,12(r16)
   89ec0:	1080200c 	andi	r2,r2,128
   89ec4:	1000231e 	bne	r2,zero,89f54 <_fclose_r+0xf8>
   89ec8:	81400c17 	ldw	r5,48(r16)
   89ecc:	28000526 	beq	r5,zero,89ee4 <_fclose_r+0x88>
   89ed0:	80801004 	addi	r2,r16,64
   89ed4:	28800226 	beq	r5,r2,89ee0 <_fclose_r+0x84>
   89ed8:	8809883a 	mov	r4,r17
   89edc:	0086d800 	call	86d80 <_free_r>
   89ee0:	80000c15 	stw	zero,48(r16)
   89ee4:	81401117 	ldw	r5,68(r16)
   89ee8:	28000326 	beq	r5,zero,89ef8 <_fclose_r+0x9c>
   89eec:	8809883a 	mov	r4,r17
   89ef0:	0086d800 	call	86d80 <_free_r>
   89ef4:	80001115 	stw	zero,68(r16)
   89ef8:	8000030d 	sth	zero,12(r16)
   89efc:	00869bc0 	call	869bc <__sfp_lock_release>
   89f00:	9005883a 	mov	r2,r18
   89f04:	dfc00317 	ldw	ra,12(sp)
   89f08:	dc800217 	ldw	r18,8(sp)
   89f0c:	dc400117 	ldw	r17,4(sp)
   89f10:	dc000017 	ldw	r16,0(sp)
   89f14:	dec00404 	addi	sp,sp,16
   89f18:	f800283a 	ret
   89f1c:	00869bc0 	call	869bc <__sfp_lock_release>
   89f20:	0025883a 	mov	r18,zero
   89f24:	9005883a 	mov	r2,r18
   89f28:	dfc00317 	ldw	ra,12(sp)
   89f2c:	dc800217 	ldw	r18,8(sp)
   89f30:	dc400117 	ldw	r17,4(sp)
   89f34:	dc000017 	ldw	r16,0(sp)
   89f38:	dec00404 	addi	sp,sp,16
   89f3c:	f800283a 	ret
   89f40:	8809883a 	mov	r4,r17
   89f44:	00869c80 	call	869c8 <__sinit>
   89f48:	8080030f 	ldh	r2,12(r16)
   89f4c:	103fd11e 	bne	r2,zero,89e94 <_fclose_r+0x38>
   89f50:	003ff206 	br	89f1c <_fclose_r+0xc0>
   89f54:	81400417 	ldw	r5,16(r16)
   89f58:	8809883a 	mov	r4,r17
   89f5c:	0086d800 	call	86d80 <_free_r>
   89f60:	003fd906 	br	89ec8 <_fclose_r+0x6c>
   89f64:	04bfffc4 	movi	r18,-1
   89f68:	003fd406 	br	89ebc <_fclose_r+0x60>

00089f6c <fclose>:
   89f6c:	008002b4 	movhi	r2,10
   89f70:	10acc204 	addi	r2,r2,-19704
   89f74:	200b883a 	mov	r5,r4
   89f78:	11000017 	ldw	r4,0(r2)
   89f7c:	0089e5c1 	jmpi	89e5c <_fclose_r>

00089f80 <_fstat_r>:
   89f80:	defffd04 	addi	sp,sp,-12
   89f84:	dc000015 	stw	r16,0(sp)
   89f88:	040002b4 	movhi	r16,10
   89f8c:	8433bc04 	addi	r16,r16,-12560
   89f90:	dc400115 	stw	r17,4(sp)
   89f94:	80000015 	stw	zero,0(r16)
   89f98:	2023883a 	mov	r17,r4
   89f9c:	2809883a 	mov	r4,r5
   89fa0:	300b883a 	mov	r5,r6
   89fa4:	dfc00215 	stw	ra,8(sp)
   89fa8:	008c7900 	call	8c790 <fstat>
   89fac:	1007883a 	mov	r3,r2
   89fb0:	00bfffc4 	movi	r2,-1
   89fb4:	18800626 	beq	r3,r2,89fd0 <_fstat_r+0x50>
   89fb8:	1805883a 	mov	r2,r3
   89fbc:	dfc00217 	ldw	ra,8(sp)
   89fc0:	dc400117 	ldw	r17,4(sp)
   89fc4:	dc000017 	ldw	r16,0(sp)
   89fc8:	dec00304 	addi	sp,sp,12
   89fcc:	f800283a 	ret
   89fd0:	80800017 	ldw	r2,0(r16)
   89fd4:	103ff826 	beq	r2,zero,89fb8 <_fstat_r+0x38>
   89fd8:	88800015 	stw	r2,0(r17)
   89fdc:	1805883a 	mov	r2,r3
   89fe0:	dfc00217 	ldw	ra,8(sp)
   89fe4:	dc400117 	ldw	r17,4(sp)
   89fe8:	dc000017 	ldw	r16,0(sp)
   89fec:	dec00304 	addi	sp,sp,12
   89ff0:	f800283a 	ret

00089ff4 <_isatty_r>:
   89ff4:	defffd04 	addi	sp,sp,-12
   89ff8:	dc000015 	stw	r16,0(sp)
   89ffc:	040002b4 	movhi	r16,10
   8a000:	8433bc04 	addi	r16,r16,-12560
   8a004:	dc400115 	stw	r17,4(sp)
   8a008:	80000015 	stw	zero,0(r16)
   8a00c:	2023883a 	mov	r17,r4
   8a010:	2809883a 	mov	r4,r5
   8a014:	dfc00215 	stw	ra,8(sp)
   8a018:	008ca880 	call	8ca88 <isatty>
   8a01c:	1007883a 	mov	r3,r2
   8a020:	00bfffc4 	movi	r2,-1
   8a024:	18800626 	beq	r3,r2,8a040 <_isatty_r+0x4c>
   8a028:	1805883a 	mov	r2,r3
   8a02c:	dfc00217 	ldw	ra,8(sp)
   8a030:	dc400117 	ldw	r17,4(sp)
   8a034:	dc000017 	ldw	r16,0(sp)
   8a038:	dec00304 	addi	sp,sp,12
   8a03c:	f800283a 	ret
   8a040:	80800017 	ldw	r2,0(r16)
   8a044:	103ff826 	beq	r2,zero,8a028 <_isatty_r+0x34>
   8a048:	88800015 	stw	r2,0(r17)
   8a04c:	1805883a 	mov	r2,r3
   8a050:	dfc00217 	ldw	ra,8(sp)
   8a054:	dc400117 	ldw	r17,4(sp)
   8a058:	dc000017 	ldw	r16,0(sp)
   8a05c:	dec00304 	addi	sp,sp,12
   8a060:	f800283a 	ret

0008a064 <_lseek_r>:
   8a064:	defffd04 	addi	sp,sp,-12
   8a068:	dc000015 	stw	r16,0(sp)
   8a06c:	040002b4 	movhi	r16,10
   8a070:	8433bc04 	addi	r16,r16,-12560
   8a074:	dc400115 	stw	r17,4(sp)
   8a078:	80000015 	stw	zero,0(r16)
   8a07c:	2023883a 	mov	r17,r4
   8a080:	2809883a 	mov	r4,r5
   8a084:	300b883a 	mov	r5,r6
   8a088:	380d883a 	mov	r6,r7
   8a08c:	dfc00215 	stw	ra,8(sp)
   8a090:	008cc980 	call	8cc98 <lseek>
   8a094:	1007883a 	mov	r3,r2
   8a098:	00bfffc4 	movi	r2,-1
   8a09c:	18800626 	beq	r3,r2,8a0b8 <_lseek_r+0x54>
   8a0a0:	1805883a 	mov	r2,r3
   8a0a4:	dfc00217 	ldw	ra,8(sp)
   8a0a8:	dc400117 	ldw	r17,4(sp)
   8a0ac:	dc000017 	ldw	r16,0(sp)
   8a0b0:	dec00304 	addi	sp,sp,12
   8a0b4:	f800283a 	ret
   8a0b8:	80800017 	ldw	r2,0(r16)
   8a0bc:	103ff826 	beq	r2,zero,8a0a0 <_lseek_r+0x3c>
   8a0c0:	88800015 	stw	r2,0(r17)
   8a0c4:	1805883a 	mov	r2,r3
   8a0c8:	dfc00217 	ldw	ra,8(sp)
   8a0cc:	dc400117 	ldw	r17,4(sp)
   8a0d0:	dc000017 	ldw	r16,0(sp)
   8a0d4:	dec00304 	addi	sp,sp,12
   8a0d8:	f800283a 	ret

0008a0dc <_read_r>:
   8a0dc:	defffd04 	addi	sp,sp,-12
   8a0e0:	dc000015 	stw	r16,0(sp)
   8a0e4:	040002b4 	movhi	r16,10
   8a0e8:	8433bc04 	addi	r16,r16,-12560
   8a0ec:	dc400115 	stw	r17,4(sp)
   8a0f0:	80000015 	stw	zero,0(r16)
   8a0f4:	2023883a 	mov	r17,r4
   8a0f8:	2809883a 	mov	r4,r5
   8a0fc:	300b883a 	mov	r5,r6
   8a100:	380d883a 	mov	r6,r7
   8a104:	dfc00215 	stw	ra,8(sp)
   8a108:	008d14c0 	call	8d14c <read>
   8a10c:	1007883a 	mov	r3,r2
   8a110:	00bfffc4 	movi	r2,-1
   8a114:	18800626 	beq	r3,r2,8a130 <_read_r+0x54>
   8a118:	1805883a 	mov	r2,r3
   8a11c:	dfc00217 	ldw	ra,8(sp)
   8a120:	dc400117 	ldw	r17,4(sp)
   8a124:	dc000017 	ldw	r16,0(sp)
   8a128:	dec00304 	addi	sp,sp,12
   8a12c:	f800283a 	ret
   8a130:	80800017 	ldw	r2,0(r16)
   8a134:	103ff826 	beq	r2,zero,8a118 <_read_r+0x3c>
   8a138:	88800015 	stw	r2,0(r17)
   8a13c:	1805883a 	mov	r2,r3
   8a140:	dfc00217 	ldw	ra,8(sp)
   8a144:	dc400117 	ldw	r17,4(sp)
   8a148:	dc000017 	ldw	r16,0(sp)
   8a14c:	dec00304 	addi	sp,sp,12
   8a150:	f800283a 	ret

0008a154 <__muldi3>:
   8a154:	defff204 	addi	sp,sp,-56
   8a158:	df000c15 	stw	fp,48(sp)
   8a15c:	3038d43a 	srli	fp,r6,16
   8a160:	dd000815 	stw	r20,32(sp)
   8a164:	dc400515 	stw	r17,20(sp)
   8a168:	2028d43a 	srli	r20,r4,16
   8a16c:	247fffcc 	andi	r17,r4,65535
   8a170:	dc000415 	stw	r16,16(sp)
   8a174:	343fffcc 	andi	r16,r6,65535
   8a178:	dcc00715 	stw	r19,28(sp)
   8a17c:	d9000015 	stw	r4,0(sp)
   8a180:	2827883a 	mov	r19,r5
   8a184:	8809883a 	mov	r4,r17
   8a188:	d9400115 	stw	r5,4(sp)
   8a18c:	800b883a 	mov	r5,r16
   8a190:	d9800215 	stw	r6,8(sp)
   8a194:	dfc00d15 	stw	ra,52(sp)
   8a198:	d9c00315 	stw	r7,12(sp)
   8a19c:	dd800a15 	stw	r22,40(sp)
   8a1a0:	dd400915 	stw	r21,36(sp)
   8a1a4:	302d883a 	mov	r22,r6
   8a1a8:	ddc00b15 	stw	r23,44(sp)
   8a1ac:	dc800615 	stw	r18,24(sp)
   8a1b0:	0082b040 	call	82b04 <__mulsi3>
   8a1b4:	8809883a 	mov	r4,r17
   8a1b8:	e00b883a 	mov	r5,fp
   8a1bc:	102b883a 	mov	r21,r2
   8a1c0:	0082b040 	call	82b04 <__mulsi3>
   8a1c4:	800b883a 	mov	r5,r16
   8a1c8:	a009883a 	mov	r4,r20
   8a1cc:	1023883a 	mov	r17,r2
   8a1d0:	0082b040 	call	82b04 <__mulsi3>
   8a1d4:	a009883a 	mov	r4,r20
   8a1d8:	e00b883a 	mov	r5,fp
   8a1dc:	1021883a 	mov	r16,r2
   8a1e0:	0082b040 	call	82b04 <__mulsi3>
   8a1e4:	a8ffffcc 	andi	r3,r21,65535
   8a1e8:	a82ad43a 	srli	r21,r21,16
   8a1ec:	8c23883a 	add	r17,r17,r16
   8a1f0:	1011883a 	mov	r8,r2
   8a1f4:	ac6b883a 	add	r21,r21,r17
   8a1f8:	a804943a 	slli	r2,r21,16
   8a1fc:	b009883a 	mov	r4,r22
   8a200:	980b883a 	mov	r5,r19
   8a204:	10c7883a 	add	r3,r2,r3
   8a208:	a812d43a 	srli	r9,r21,16
   8a20c:	180d883a 	mov	r6,r3
   8a210:	ac00022e 	bgeu	r21,r16,8a21c <__muldi3+0xc8>
   8a214:	00800074 	movhi	r2,1
   8a218:	4091883a 	add	r8,r8,r2
   8a21c:	4267883a 	add	r19,r8,r9
   8a220:	302d883a 	mov	r22,r6
   8a224:	0082b040 	call	82b04 <__mulsi3>
   8a228:	d9400317 	ldw	r5,12(sp)
   8a22c:	d9000017 	ldw	r4,0(sp)
   8a230:	1023883a 	mov	r17,r2
   8a234:	0082b040 	call	82b04 <__mulsi3>
   8a238:	14cb883a 	add	r5,r2,r19
   8a23c:	894b883a 	add	r5,r17,r5
   8a240:	b005883a 	mov	r2,r22
   8a244:	2807883a 	mov	r3,r5
   8a248:	dfc00d17 	ldw	ra,52(sp)
   8a24c:	df000c17 	ldw	fp,48(sp)
   8a250:	ddc00b17 	ldw	r23,44(sp)
   8a254:	dd800a17 	ldw	r22,40(sp)
   8a258:	dd400917 	ldw	r21,36(sp)
   8a25c:	dd000817 	ldw	r20,32(sp)
   8a260:	dcc00717 	ldw	r19,28(sp)
   8a264:	dc800617 	ldw	r18,24(sp)
   8a268:	dc400517 	ldw	r17,20(sp)
   8a26c:	dc000417 	ldw	r16,16(sp)
   8a270:	dec00e04 	addi	sp,sp,56
   8a274:	f800283a 	ret

0008a278 <__udivdi3>:
   8a278:	defff104 	addi	sp,sp,-60
   8a27c:	0015883a 	mov	r10,zero
   8a280:	2005883a 	mov	r2,r4
   8a284:	3011883a 	mov	r8,r6
   8a288:	df000d15 	stw	fp,52(sp)
   8a28c:	dd400a15 	stw	r21,40(sp)
   8a290:	dcc00815 	stw	r19,32(sp)
   8a294:	dfc00e15 	stw	ra,56(sp)
   8a298:	ddc00c15 	stw	r23,48(sp)
   8a29c:	dd800b15 	stw	r22,44(sp)
   8a2a0:	dd000915 	stw	r20,36(sp)
   8a2a4:	dc800715 	stw	r18,28(sp)
   8a2a8:	dc400615 	stw	r17,24(sp)
   8a2ac:	dc000515 	stw	r16,20(sp)
   8a2b0:	da800315 	stw	r10,12(sp)
   8a2b4:	4027883a 	mov	r19,r8
   8a2b8:	1039883a 	mov	fp,r2
   8a2bc:	282b883a 	mov	r21,r5
   8a2c0:	da800415 	stw	r10,16(sp)
   8a2c4:	3800401e 	bne	r7,zero,8a3c8 <__udivdi3+0x150>
   8a2c8:	2a006536 	bltu	r5,r8,8a460 <__udivdi3+0x1e8>
   8a2cc:	4000b526 	beq	r8,zero,8a5a4 <__udivdi3+0x32c>
   8a2d0:	00bfffd4 	movui	r2,65535
   8a2d4:	14c0ad36 	bltu	r2,r19,8a58c <__udivdi3+0x314>
   8a2d8:	00803fc4 	movi	r2,255
   8a2dc:	14c15e36 	bltu	r2,r19,8a858 <__udivdi3+0x5e0>
   8a2e0:	000b883a 	mov	r5,zero
   8a2e4:	0005883a 	mov	r2,zero
   8a2e8:	9884d83a 	srl	r2,r19,r2
   8a2ec:	010002b4 	movhi	r4,10
   8a2f0:	21259004 	addi	r4,r4,-27072
   8a2f4:	01800804 	movi	r6,32
   8a2f8:	1105883a 	add	r2,r2,r4
   8a2fc:	10c00003 	ldbu	r3,0(r2)
   8a300:	28c7883a 	add	r3,r5,r3
   8a304:	30e9c83a 	sub	r20,r6,r3
   8a308:	a0010a1e 	bne	r20,zero,8a734 <__udivdi3+0x4bc>
   8a30c:	982ed43a 	srli	r23,r19,16
   8a310:	acebc83a 	sub	r21,r21,r19
   8a314:	9dbfffcc 	andi	r22,r19,65535
   8a318:	05000044 	movi	r20,1
   8a31c:	a809883a 	mov	r4,r21
   8a320:	b80b883a 	mov	r5,r23
   8a324:	0082af40 	call	82af4 <__udivsi3>
   8a328:	100b883a 	mov	r5,r2
   8a32c:	b009883a 	mov	r4,r22
   8a330:	1021883a 	mov	r16,r2
   8a334:	0082b040 	call	82b04 <__mulsi3>
   8a338:	a809883a 	mov	r4,r21
   8a33c:	b80b883a 	mov	r5,r23
   8a340:	1023883a 	mov	r17,r2
   8a344:	0082afc0 	call	82afc <__umodsi3>
   8a348:	1004943a 	slli	r2,r2,16
   8a34c:	e006d43a 	srli	r3,fp,16
   8a350:	10c4b03a 	or	r2,r2,r3
   8a354:	1440042e 	bgeu	r2,r17,8a368 <__udivdi3+0xf0>
   8a358:	14c5883a 	add	r2,r2,r19
   8a35c:	843fffc4 	addi	r16,r16,-1
   8a360:	14c00136 	bltu	r2,r19,8a368 <__udivdi3+0xf0>
   8a364:	14415c36 	bltu	r2,r17,8a8d8 <__udivdi3+0x660>
   8a368:	1463c83a 	sub	r17,r2,r17
   8a36c:	8809883a 	mov	r4,r17
   8a370:	b80b883a 	mov	r5,r23
   8a374:	0082af40 	call	82af4 <__udivsi3>
   8a378:	100b883a 	mov	r5,r2
   8a37c:	b009883a 	mov	r4,r22
   8a380:	102b883a 	mov	r21,r2
   8a384:	0082b040 	call	82b04 <__mulsi3>
   8a388:	8809883a 	mov	r4,r17
   8a38c:	b80b883a 	mov	r5,r23
   8a390:	1025883a 	mov	r18,r2
   8a394:	0082afc0 	call	82afc <__umodsi3>
   8a398:	1004943a 	slli	r2,r2,16
   8a39c:	e0ffffcc 	andi	r3,fp,65535
   8a3a0:	10c4b03a 	or	r2,r2,r3
   8a3a4:	1480042e 	bgeu	r2,r18,8a3b8 <__udivdi3+0x140>
   8a3a8:	9885883a 	add	r2,r19,r2
   8a3ac:	ad7fffc4 	addi	r21,r21,-1
   8a3b0:	14c00136 	bltu	r2,r19,8a3b8 <__udivdi3+0x140>
   8a3b4:	14813c36 	bltu	r2,r18,8a8a8 <__udivdi3+0x630>
   8a3b8:	8004943a 	slli	r2,r16,16
   8a3bc:	a009883a 	mov	r4,r20
   8a3c0:	a884b03a 	or	r2,r21,r2
   8a3c4:	00001506 	br	8a41c <__udivdi3+0x1a4>
   8a3c8:	380d883a 	mov	r6,r7
   8a3cc:	29c06c36 	bltu	r5,r7,8a580 <__udivdi3+0x308>
   8a3d0:	00bfffd4 	movui	r2,65535
   8a3d4:	11c06436 	bltu	r2,r7,8a568 <__udivdi3+0x2f0>
   8a3d8:	00803fc4 	movi	r2,255
   8a3dc:	11c11836 	bltu	r2,r7,8a840 <__udivdi3+0x5c8>
   8a3e0:	000b883a 	mov	r5,zero
   8a3e4:	0005883a 	mov	r2,zero
   8a3e8:	3084d83a 	srl	r2,r6,r2
   8a3ec:	010002b4 	movhi	r4,10
   8a3f0:	21259004 	addi	r4,r4,-27072
   8a3f4:	01c00804 	movi	r7,32
   8a3f8:	1105883a 	add	r2,r2,r4
   8a3fc:	10c00003 	ldbu	r3,0(r2)
   8a400:	28c7883a 	add	r3,r5,r3
   8a404:	38edc83a 	sub	r22,r7,r3
   8a408:	b000731e 	bne	r22,zero,8a5d8 <__udivdi3+0x360>
   8a40c:	35400136 	bltu	r6,r21,8a414 <__udivdi3+0x19c>
   8a410:	e4c05b36 	bltu	fp,r19,8a580 <__udivdi3+0x308>
   8a414:	00800044 	movi	r2,1
   8a418:	0009883a 	mov	r4,zero
   8a41c:	d8800315 	stw	r2,12(sp)
   8a420:	d9400317 	ldw	r5,12(sp)
   8a424:	d9000415 	stw	r4,16(sp)
   8a428:	2007883a 	mov	r3,r4
   8a42c:	2805883a 	mov	r2,r5
   8a430:	dfc00e17 	ldw	ra,56(sp)
   8a434:	df000d17 	ldw	fp,52(sp)
   8a438:	ddc00c17 	ldw	r23,48(sp)
   8a43c:	dd800b17 	ldw	r22,44(sp)
   8a440:	dd400a17 	ldw	r21,40(sp)
   8a444:	dd000917 	ldw	r20,36(sp)
   8a448:	dcc00817 	ldw	r19,32(sp)
   8a44c:	dc800717 	ldw	r18,28(sp)
   8a450:	dc400617 	ldw	r17,24(sp)
   8a454:	dc000517 	ldw	r16,20(sp)
   8a458:	dec00f04 	addi	sp,sp,60
   8a45c:	f800283a 	ret
   8a460:	00bfffd4 	movui	r2,65535
   8a464:	12005636 	bltu	r2,r8,8a5c0 <__udivdi3+0x348>
   8a468:	00803fc4 	movi	r2,255
   8a46c:	12010036 	bltu	r2,r8,8a870 <__udivdi3+0x5f8>
   8a470:	000b883a 	mov	r5,zero
   8a474:	0005883a 	mov	r2,zero
   8a478:	9884d83a 	srl	r2,r19,r2
   8a47c:	010002b4 	movhi	r4,10
   8a480:	21259004 	addi	r4,r4,-27072
   8a484:	01800804 	movi	r6,32
   8a488:	1105883a 	add	r2,r2,r4
   8a48c:	10c00003 	ldbu	r3,0(r2)
   8a490:	28c7883a 	add	r3,r5,r3
   8a494:	30cbc83a 	sub	r5,r6,r3
   8a498:	28000626 	beq	r5,zero,8a4b4 <__udivdi3+0x23c>
   8a49c:	3145c83a 	sub	r2,r6,r5
   8a4a0:	e084d83a 	srl	r2,fp,r2
   8a4a4:	a946983a 	sll	r3,r21,r5
   8a4a8:	e178983a 	sll	fp,fp,r5
   8a4ac:	9966983a 	sll	r19,r19,r5
   8a4b0:	18aab03a 	or	r21,r3,r2
   8a4b4:	982ed43a 	srli	r23,r19,16
   8a4b8:	a809883a 	mov	r4,r21
   8a4bc:	9cbfffcc 	andi	r18,r19,65535
   8a4c0:	b80b883a 	mov	r5,r23
   8a4c4:	0082af40 	call	82af4 <__udivsi3>
   8a4c8:	100b883a 	mov	r5,r2
   8a4cc:	9009883a 	mov	r4,r18
   8a4d0:	1021883a 	mov	r16,r2
   8a4d4:	0082b040 	call	82b04 <__mulsi3>
   8a4d8:	a809883a 	mov	r4,r21
   8a4dc:	b80b883a 	mov	r5,r23
   8a4e0:	1023883a 	mov	r17,r2
   8a4e4:	0082afc0 	call	82afc <__umodsi3>
   8a4e8:	1004943a 	slli	r2,r2,16
   8a4ec:	e006d43a 	srli	r3,fp,16
   8a4f0:	10c4b03a 	or	r2,r2,r3
   8a4f4:	1440042e 	bgeu	r2,r17,8a508 <__udivdi3+0x290>
   8a4f8:	14c5883a 	add	r2,r2,r19
   8a4fc:	843fffc4 	addi	r16,r16,-1
   8a500:	14c00136 	bltu	r2,r19,8a508 <__udivdi3+0x290>
   8a504:	1440ea36 	bltu	r2,r17,8a8b0 <__udivdi3+0x638>
   8a508:	1463c83a 	sub	r17,r2,r17
   8a50c:	8809883a 	mov	r4,r17
   8a510:	b80b883a 	mov	r5,r23
   8a514:	0082af40 	call	82af4 <__udivsi3>
   8a518:	100b883a 	mov	r5,r2
   8a51c:	9009883a 	mov	r4,r18
   8a520:	102b883a 	mov	r21,r2
   8a524:	0082b040 	call	82b04 <__mulsi3>
   8a528:	8809883a 	mov	r4,r17
   8a52c:	b80b883a 	mov	r5,r23
   8a530:	1025883a 	mov	r18,r2
   8a534:	0082afc0 	call	82afc <__umodsi3>
   8a538:	1004943a 	slli	r2,r2,16
   8a53c:	e0ffffcc 	andi	r3,fp,65535
   8a540:	10c4b03a 	or	r2,r2,r3
   8a544:	1480042e 	bgeu	r2,r18,8a558 <__udivdi3+0x2e0>
   8a548:	9885883a 	add	r2,r19,r2
   8a54c:	ad7fffc4 	addi	r21,r21,-1
   8a550:	14c00136 	bltu	r2,r19,8a558 <__udivdi3+0x2e0>
   8a554:	1480d936 	bltu	r2,r18,8a8bc <__udivdi3+0x644>
   8a558:	8004943a 	slli	r2,r16,16
   8a55c:	0009883a 	mov	r4,zero
   8a560:	a884b03a 	or	r2,r21,r2
   8a564:	003fad06 	br	8a41c <__udivdi3+0x1a4>
   8a568:	00804034 	movhi	r2,256
   8a56c:	10bfffc4 	addi	r2,r2,-1
   8a570:	11c0b636 	bltu	r2,r7,8a84c <__udivdi3+0x5d4>
   8a574:	01400404 	movi	r5,16
   8a578:	2805883a 	mov	r2,r5
   8a57c:	003f9a06 	br	8a3e8 <__udivdi3+0x170>
   8a580:	0005883a 	mov	r2,zero
   8a584:	0009883a 	mov	r4,zero
   8a588:	003fa406 	br	8a41c <__udivdi3+0x1a4>
   8a58c:	00804034 	movhi	r2,256
   8a590:	10bfffc4 	addi	r2,r2,-1
   8a594:	14c0b336 	bltu	r2,r19,8a864 <__udivdi3+0x5ec>
   8a598:	01400404 	movi	r5,16
   8a59c:	2805883a 	mov	r2,r5
   8a5a0:	003f5106 	br	8a2e8 <__udivdi3+0x70>
   8a5a4:	01000044 	movi	r4,1
   8a5a8:	000b883a 	mov	r5,zero
   8a5ac:	0082af40 	call	82af4 <__udivsi3>
   8a5b0:	1027883a 	mov	r19,r2
   8a5b4:	00bfffd4 	movui	r2,65535
   8a5b8:	14fff436 	bltu	r2,r19,8a58c <__udivdi3+0x314>
   8a5bc:	003f4606 	br	8a2d8 <__udivdi3+0x60>
   8a5c0:	00804034 	movhi	r2,256
   8a5c4:	10bfffc4 	addi	r2,r2,-1
   8a5c8:	1200ac36 	bltu	r2,r8,8a87c <__udivdi3+0x604>
   8a5cc:	01400404 	movi	r5,16
   8a5d0:	2805883a 	mov	r2,r5
   8a5d4:	003fa806 	br	8a478 <__udivdi3+0x200>
   8a5d8:	3d85c83a 	sub	r2,r7,r22
   8a5dc:	3588983a 	sll	r4,r6,r22
   8a5e0:	9886d83a 	srl	r3,r19,r2
   8a5e4:	a8a2d83a 	srl	r17,r21,r2
   8a5e8:	e084d83a 	srl	r2,fp,r2
   8a5ec:	20eeb03a 	or	r23,r4,r3
   8a5f0:	b824d43a 	srli	r18,r23,16
   8a5f4:	ad86983a 	sll	r3,r21,r22
   8a5f8:	8809883a 	mov	r4,r17
   8a5fc:	900b883a 	mov	r5,r18
   8a600:	1886b03a 	or	r3,r3,r2
   8a604:	d8c00115 	stw	r3,4(sp)
   8a608:	bc3fffcc 	andi	r16,r23,65535
   8a60c:	0082af40 	call	82af4 <__udivsi3>
   8a610:	100b883a 	mov	r5,r2
   8a614:	8009883a 	mov	r4,r16
   8a618:	1029883a 	mov	r20,r2
   8a61c:	0082b040 	call	82b04 <__mulsi3>
   8a620:	900b883a 	mov	r5,r18
   8a624:	8809883a 	mov	r4,r17
   8a628:	102b883a 	mov	r21,r2
   8a62c:	0082afc0 	call	82afc <__umodsi3>
   8a630:	d9400117 	ldw	r5,4(sp)
   8a634:	1004943a 	slli	r2,r2,16
   8a638:	9da6983a 	sll	r19,r19,r22
   8a63c:	2806d43a 	srli	r3,r5,16
   8a640:	10c4b03a 	or	r2,r2,r3
   8a644:	1540032e 	bgeu	r2,r21,8a654 <__udivdi3+0x3dc>
   8a648:	15c5883a 	add	r2,r2,r23
   8a64c:	a53fffc4 	addi	r20,r20,-1
   8a650:	15c0912e 	bgeu	r2,r23,8a898 <__udivdi3+0x620>
   8a654:	1563c83a 	sub	r17,r2,r21
   8a658:	8809883a 	mov	r4,r17
   8a65c:	900b883a 	mov	r5,r18
   8a660:	0082af40 	call	82af4 <__udivsi3>
   8a664:	100b883a 	mov	r5,r2
   8a668:	8009883a 	mov	r4,r16
   8a66c:	102b883a 	mov	r21,r2
   8a670:	0082b040 	call	82b04 <__mulsi3>
   8a674:	8809883a 	mov	r4,r17
   8a678:	900b883a 	mov	r5,r18
   8a67c:	1021883a 	mov	r16,r2
   8a680:	0082afc0 	call	82afc <__umodsi3>
   8a684:	da800117 	ldw	r10,4(sp)
   8a688:	1004943a 	slli	r2,r2,16
   8a68c:	50ffffcc 	andi	r3,r10,65535
   8a690:	10c6b03a 	or	r3,r2,r3
   8a694:	1c00032e 	bgeu	r3,r16,8a6a4 <__udivdi3+0x42c>
   8a698:	1dc7883a 	add	r3,r3,r23
   8a69c:	ad7fffc4 	addi	r21,r21,-1
   8a6a0:	1dc0792e 	bgeu	r3,r23,8a888 <__udivdi3+0x610>
   8a6a4:	a004943a 	slli	r2,r20,16
   8a6a8:	982ed43a 	srli	r23,r19,16
   8a6ac:	9cffffcc 	andi	r19,r19,65535
   8a6b0:	a8a4b03a 	or	r18,r21,r2
   8a6b4:	947fffcc 	andi	r17,r18,65535
   8a6b8:	902ad43a 	srli	r21,r18,16
   8a6bc:	8809883a 	mov	r4,r17
   8a6c0:	980b883a 	mov	r5,r19
   8a6c4:	1c21c83a 	sub	r16,r3,r16
   8a6c8:	0082b040 	call	82b04 <__mulsi3>
   8a6cc:	8809883a 	mov	r4,r17
   8a6d0:	b80b883a 	mov	r5,r23
   8a6d4:	1029883a 	mov	r20,r2
   8a6d8:	0082b040 	call	82b04 <__mulsi3>
   8a6dc:	980b883a 	mov	r5,r19
   8a6e0:	a809883a 	mov	r4,r21
   8a6e4:	1023883a 	mov	r17,r2
   8a6e8:	0082b040 	call	82b04 <__mulsi3>
   8a6ec:	a809883a 	mov	r4,r21
   8a6f0:	b80b883a 	mov	r5,r23
   8a6f4:	1027883a 	mov	r19,r2
   8a6f8:	0082b040 	call	82b04 <__mulsi3>
   8a6fc:	1009883a 	mov	r4,r2
   8a700:	a004d43a 	srli	r2,r20,16
   8a704:	8ce3883a 	add	r17,r17,r19
   8a708:	1447883a 	add	r3,r2,r17
   8a70c:	1cc0022e 	bgeu	r3,r19,8a718 <__udivdi3+0x4a0>
   8a710:	00800074 	movhi	r2,1
   8a714:	2089883a 	add	r4,r4,r2
   8a718:	1804d43a 	srli	r2,r3,16
   8a71c:	2085883a 	add	r2,r4,r2
   8a720:	80804436 	bltu	r16,r2,8a834 <__udivdi3+0x5bc>
   8a724:	80803e26 	beq	r16,r2,8a820 <__udivdi3+0x5a8>
   8a728:	9005883a 	mov	r2,r18
   8a72c:	0009883a 	mov	r4,zero
   8a730:	003f3a06 	br	8a41c <__udivdi3+0x1a4>
   8a734:	9d26983a 	sll	r19,r19,r20
   8a738:	3505c83a 	sub	r2,r6,r20
   8a73c:	a8a2d83a 	srl	r17,r21,r2
   8a740:	982ed43a 	srli	r23,r19,16
   8a744:	e084d83a 	srl	r2,fp,r2
   8a748:	ad06983a 	sll	r3,r21,r20
   8a74c:	8809883a 	mov	r4,r17
   8a750:	b80b883a 	mov	r5,r23
   8a754:	1886b03a 	or	r3,r3,r2
   8a758:	d8c00015 	stw	r3,0(sp)
   8a75c:	9dbfffcc 	andi	r22,r19,65535
   8a760:	0082af40 	call	82af4 <__udivsi3>
   8a764:	100b883a 	mov	r5,r2
   8a768:	b009883a 	mov	r4,r22
   8a76c:	d8800215 	stw	r2,8(sp)
   8a770:	0082b040 	call	82b04 <__mulsi3>
   8a774:	8809883a 	mov	r4,r17
   8a778:	b80b883a 	mov	r5,r23
   8a77c:	102b883a 	mov	r21,r2
   8a780:	0082afc0 	call	82afc <__umodsi3>
   8a784:	d9000017 	ldw	r4,0(sp)
   8a788:	1004943a 	slli	r2,r2,16
   8a78c:	2006d43a 	srli	r3,r4,16
   8a790:	10c4b03a 	or	r2,r2,r3
   8a794:	1540052e 	bgeu	r2,r21,8a7ac <__udivdi3+0x534>
   8a798:	d9400217 	ldw	r5,8(sp)
   8a79c:	14c5883a 	add	r2,r2,r19
   8a7a0:	297fffc4 	addi	r5,r5,-1
   8a7a4:	d9400215 	stw	r5,8(sp)
   8a7a8:	14c0462e 	bgeu	r2,r19,8a8c4 <__udivdi3+0x64c>
   8a7ac:	1563c83a 	sub	r17,r2,r21
   8a7b0:	8809883a 	mov	r4,r17
   8a7b4:	b80b883a 	mov	r5,r23
   8a7b8:	0082af40 	call	82af4 <__udivsi3>
   8a7bc:	100b883a 	mov	r5,r2
   8a7c0:	b009883a 	mov	r4,r22
   8a7c4:	1025883a 	mov	r18,r2
   8a7c8:	0082b040 	call	82b04 <__mulsi3>
   8a7cc:	8809883a 	mov	r4,r17
   8a7d0:	b80b883a 	mov	r5,r23
   8a7d4:	1021883a 	mov	r16,r2
   8a7d8:	0082afc0 	call	82afc <__umodsi3>
   8a7dc:	da800017 	ldw	r10,0(sp)
   8a7e0:	1004943a 	slli	r2,r2,16
   8a7e4:	50ffffcc 	andi	r3,r10,65535
   8a7e8:	10c6b03a 	or	r3,r2,r3
   8a7ec:	1c00062e 	bgeu	r3,r16,8a808 <__udivdi3+0x590>
   8a7f0:	1cc7883a 	add	r3,r3,r19
   8a7f4:	94bfffc4 	addi	r18,r18,-1
   8a7f8:	1cc00336 	bltu	r3,r19,8a808 <__udivdi3+0x590>
   8a7fc:	1c00022e 	bgeu	r3,r16,8a808 <__udivdi3+0x590>
   8a800:	94bfffc4 	addi	r18,r18,-1
   8a804:	1cc7883a 	add	r3,r3,r19
   8a808:	d9000217 	ldw	r4,8(sp)
   8a80c:	e538983a 	sll	fp,fp,r20
   8a810:	1c2bc83a 	sub	r21,r3,r16
   8a814:	2004943a 	slli	r2,r4,16
   8a818:	90a8b03a 	or	r20,r18,r2
   8a81c:	003ebf06 	br	8a31c <__udivdi3+0xa4>
   8a820:	1804943a 	slli	r2,r3,16
   8a824:	e588983a 	sll	r4,fp,r22
   8a828:	a0ffffcc 	andi	r3,r20,65535
   8a82c:	10c5883a 	add	r2,r2,r3
   8a830:	20bfbd2e 	bgeu	r4,r2,8a728 <__udivdi3+0x4b0>
   8a834:	90bfffc4 	addi	r2,r18,-1
   8a838:	0009883a 	mov	r4,zero
   8a83c:	003ef706 	br	8a41c <__udivdi3+0x1a4>
   8a840:	01400204 	movi	r5,8
   8a844:	2805883a 	mov	r2,r5
   8a848:	003ee706 	br	8a3e8 <__udivdi3+0x170>
   8a84c:	01400604 	movi	r5,24
   8a850:	2805883a 	mov	r2,r5
   8a854:	003ee406 	br	8a3e8 <__udivdi3+0x170>
   8a858:	01400204 	movi	r5,8
   8a85c:	2805883a 	mov	r2,r5
   8a860:	003ea106 	br	8a2e8 <__udivdi3+0x70>
   8a864:	01400604 	movi	r5,24
   8a868:	2805883a 	mov	r2,r5
   8a86c:	003e9e06 	br	8a2e8 <__udivdi3+0x70>
   8a870:	01400204 	movi	r5,8
   8a874:	2805883a 	mov	r2,r5
   8a878:	003eff06 	br	8a478 <__udivdi3+0x200>
   8a87c:	01400604 	movi	r5,24
   8a880:	2805883a 	mov	r2,r5
   8a884:	003efc06 	br	8a478 <__udivdi3+0x200>
   8a888:	1c3f862e 	bgeu	r3,r16,8a6a4 <__udivdi3+0x42c>
   8a88c:	1dc7883a 	add	r3,r3,r23
   8a890:	ad7fffc4 	addi	r21,r21,-1
   8a894:	003f8306 	br	8a6a4 <__udivdi3+0x42c>
   8a898:	157f6e2e 	bgeu	r2,r21,8a654 <__udivdi3+0x3dc>
   8a89c:	a53fffc4 	addi	r20,r20,-1
   8a8a0:	15c5883a 	add	r2,r2,r23
   8a8a4:	003f6b06 	br	8a654 <__udivdi3+0x3dc>
   8a8a8:	ad7fffc4 	addi	r21,r21,-1
   8a8ac:	003ec206 	br	8a3b8 <__udivdi3+0x140>
   8a8b0:	843fffc4 	addi	r16,r16,-1
   8a8b4:	14c5883a 	add	r2,r2,r19
   8a8b8:	003f1306 	br	8a508 <__udivdi3+0x290>
   8a8bc:	ad7fffc4 	addi	r21,r21,-1
   8a8c0:	003f2506 	br	8a558 <__udivdi3+0x2e0>
   8a8c4:	157fb92e 	bgeu	r2,r21,8a7ac <__udivdi3+0x534>
   8a8c8:	297fffc4 	addi	r5,r5,-1
   8a8cc:	14c5883a 	add	r2,r2,r19
   8a8d0:	d9400215 	stw	r5,8(sp)
   8a8d4:	003fb506 	br	8a7ac <__udivdi3+0x534>
   8a8d8:	843fffc4 	addi	r16,r16,-1
   8a8dc:	14c5883a 	add	r2,r2,r19
   8a8e0:	003ea106 	br	8a368 <__udivdi3+0xf0>

0008a8e4 <__umoddi3>:
   8a8e4:	defff004 	addi	sp,sp,-64
   8a8e8:	3011883a 	mov	r8,r6
   8a8ec:	000d883a 	mov	r6,zero
   8a8f0:	dd400b15 	stw	r21,44(sp)
   8a8f4:	dcc00915 	stw	r19,36(sp)
   8a8f8:	dc000615 	stw	r16,24(sp)
   8a8fc:	dfc00f15 	stw	ra,60(sp)
   8a900:	df000e15 	stw	fp,56(sp)
   8a904:	ddc00d15 	stw	r23,52(sp)
   8a908:	dd800c15 	stw	r22,48(sp)
   8a90c:	dd000a15 	stw	r20,40(sp)
   8a910:	dc800815 	stw	r18,32(sp)
   8a914:	dc400715 	stw	r17,28(sp)
   8a918:	2817883a 	mov	r11,r5
   8a91c:	d9800415 	stw	r6,16(sp)
   8a920:	4027883a 	mov	r19,r8
   8a924:	d9800515 	stw	r6,20(sp)
   8a928:	2021883a 	mov	r16,r4
   8a92c:	282b883a 	mov	r21,r5
   8a930:	38002c1e 	bne	r7,zero,8a9e4 <__umoddi3+0x100>
   8a934:	2a005636 	bltu	r5,r8,8aa90 <__umoddi3+0x1ac>
   8a938:	40009a26 	beq	r8,zero,8aba4 <__umoddi3+0x2c0>
   8a93c:	00bfffd4 	movui	r2,65535
   8a940:	14c09236 	bltu	r2,r19,8ab8c <__umoddi3+0x2a8>
   8a944:	00803fc4 	movi	r2,255
   8a948:	14c15c36 	bltu	r2,r19,8aebc <__umoddi3+0x5d8>
   8a94c:	000b883a 	mov	r5,zero
   8a950:	0005883a 	mov	r2,zero
   8a954:	9884d83a 	srl	r2,r19,r2
   8a958:	010002b4 	movhi	r4,10
   8a95c:	21259004 	addi	r4,r4,-27072
   8a960:	01800804 	movi	r6,32
   8a964:	1105883a 	add	r2,r2,r4
   8a968:	10c00003 	ldbu	r3,0(r2)
   8a96c:	28c7883a 	add	r3,r5,r3
   8a970:	30e5c83a 	sub	r18,r6,r3
   8a974:	9000a41e 	bne	r18,zero,8ac08 <__umoddi3+0x324>
   8a978:	982ed43a 	srli	r23,r19,16
   8a97c:	acebc83a 	sub	r21,r21,r19
   8a980:	9d3fffcc 	andi	r20,r19,65535
   8a984:	002d883a 	mov	r22,zero
   8a988:	a809883a 	mov	r4,r21
   8a98c:	b80b883a 	mov	r5,r23
   8a990:	0082af40 	call	82af4 <__udivsi3>
   8a994:	100b883a 	mov	r5,r2
   8a998:	a009883a 	mov	r4,r20
   8a99c:	0082b040 	call	82b04 <__mulsi3>
   8a9a0:	a809883a 	mov	r4,r21
   8a9a4:	b80b883a 	mov	r5,r23
   8a9a8:	1023883a 	mov	r17,r2
   8a9ac:	0082afc0 	call	82afc <__umodsi3>
   8a9b0:	1004943a 	slli	r2,r2,16
   8a9b4:	8006d43a 	srli	r3,r16,16
   8a9b8:	10c4b03a 	or	r2,r2,r3
   8a9bc:	1440032e 	bgeu	r2,r17,8a9cc <__umoddi3+0xe8>
   8a9c0:	14c5883a 	add	r2,r2,r19
   8a9c4:	14c00136 	bltu	r2,r19,8a9cc <__umoddi3+0xe8>
   8a9c8:	14415836 	bltu	r2,r17,8af2c <__umoddi3+0x648>
   8a9cc:	1463c83a 	sub	r17,r2,r17
   8a9d0:	8809883a 	mov	r4,r17
   8a9d4:	b80b883a 	mov	r5,r23
   8a9d8:	0082af40 	call	82af4 <__udivsi3>
   8a9dc:	a009883a 	mov	r4,r20
   8a9e0:	00005306 	br	8ab30 <__umoddi3+0x24c>
   8a9e4:	380d883a 	mov	r6,r7
   8a9e8:	29c0132e 	bgeu	r5,r7,8aa38 <__umoddi3+0x154>
   8a9ec:	d9000415 	stw	r4,16(sp)
   8a9f0:	d9400515 	stw	r5,20(sp)
   8a9f4:	d9400417 	ldw	r5,16(sp)
   8a9f8:	5813883a 	mov	r9,r11
   8a9fc:	2811883a 	mov	r8,r5
   8aa00:	4005883a 	mov	r2,r8
   8aa04:	4807883a 	mov	r3,r9
   8aa08:	dfc00f17 	ldw	ra,60(sp)
   8aa0c:	df000e17 	ldw	fp,56(sp)
   8aa10:	ddc00d17 	ldw	r23,52(sp)
   8aa14:	dd800c17 	ldw	r22,48(sp)
   8aa18:	dd400b17 	ldw	r21,44(sp)
   8aa1c:	dd000a17 	ldw	r20,40(sp)
   8aa20:	dcc00917 	ldw	r19,36(sp)
   8aa24:	dc800817 	ldw	r18,32(sp)
   8aa28:	dc400717 	ldw	r17,28(sp)
   8aa2c:	dc000617 	ldw	r16,24(sp)
   8aa30:	dec01004 	addi	sp,sp,64
   8aa34:	f800283a 	ret
   8aa38:	00bfffd4 	movui	r2,65535
   8aa3c:	11c06636 	bltu	r2,r7,8abd8 <__umoddi3+0x2f4>
   8aa40:	00803fc4 	movi	r2,255
   8aa44:	11c12036 	bltu	r2,r7,8aec8 <__umoddi3+0x5e4>
   8aa48:	000b883a 	mov	r5,zero
   8aa4c:	0005883a 	mov	r2,zero
   8aa50:	3084d83a 	srl	r2,r6,r2
   8aa54:	010002b4 	movhi	r4,10
   8aa58:	21259004 	addi	r4,r4,-27072
   8aa5c:	01c00804 	movi	r7,32
   8aa60:	1105883a 	add	r2,r2,r4
   8aa64:	10c00003 	ldbu	r3,0(r2)
   8aa68:	28c7883a 	add	r3,r5,r3
   8aa6c:	38e5c83a 	sub	r18,r7,r3
   8aa70:	9000941e 	bne	r18,zero,8acc4 <__umoddi3+0x3e0>
   8aa74:	35405e36 	bltu	r6,r21,8abf0 <__umoddi3+0x30c>
   8aa78:	84c05d2e 	bgeu	r16,r19,8abf0 <__umoddi3+0x30c>
   8aa7c:	8011883a 	mov	r8,r16
   8aa80:	a813883a 	mov	r9,r21
   8aa84:	dc000415 	stw	r16,16(sp)
   8aa88:	dd400515 	stw	r21,20(sp)
   8aa8c:	003fdc06 	br	8aa00 <__umoddi3+0x11c>
   8aa90:	00bfffd4 	movui	r2,65535
   8aa94:	12004a36 	bltu	r2,r8,8abc0 <__umoddi3+0x2dc>
   8aa98:	00803fc4 	movi	r2,255
   8aa9c:	12010d36 	bltu	r2,r8,8aed4 <__umoddi3+0x5f0>
   8aaa0:	000b883a 	mov	r5,zero
   8aaa4:	0005883a 	mov	r2,zero
   8aaa8:	9884d83a 	srl	r2,r19,r2
   8aaac:	010002b4 	movhi	r4,10
   8aab0:	21259004 	addi	r4,r4,-27072
   8aab4:	01800804 	movi	r6,32
   8aab8:	1105883a 	add	r2,r2,r4
   8aabc:	10c00003 	ldbu	r3,0(r2)
   8aac0:	28c7883a 	add	r3,r5,r3
   8aac4:	30c7c83a 	sub	r3,r6,r3
   8aac8:	1800dc1e 	bne	r3,zero,8ae3c <__umoddi3+0x558>
   8aacc:	002d883a 	mov	r22,zero
   8aad0:	982ed43a 	srli	r23,r19,16
   8aad4:	a809883a 	mov	r4,r21
   8aad8:	9cbfffcc 	andi	r18,r19,65535
   8aadc:	b80b883a 	mov	r5,r23
   8aae0:	0082af40 	call	82af4 <__udivsi3>
   8aae4:	100b883a 	mov	r5,r2
   8aae8:	9009883a 	mov	r4,r18
   8aaec:	0082b040 	call	82b04 <__mulsi3>
   8aaf0:	a809883a 	mov	r4,r21
   8aaf4:	b80b883a 	mov	r5,r23
   8aaf8:	1023883a 	mov	r17,r2
   8aafc:	0082afc0 	call	82afc <__umodsi3>
   8ab00:	1004943a 	slli	r2,r2,16
   8ab04:	8006d43a 	srli	r3,r16,16
   8ab08:	10c4b03a 	or	r2,r2,r3
   8ab0c:	1440032e 	bgeu	r2,r17,8ab1c <__umoddi3+0x238>
   8ab10:	14c5883a 	add	r2,r2,r19
   8ab14:	14c00136 	bltu	r2,r19,8ab1c <__umoddi3+0x238>
   8ab18:	14410236 	bltu	r2,r17,8af24 <__umoddi3+0x640>
   8ab1c:	1463c83a 	sub	r17,r2,r17
   8ab20:	8809883a 	mov	r4,r17
   8ab24:	b80b883a 	mov	r5,r23
   8ab28:	0082af40 	call	82af4 <__udivsi3>
   8ab2c:	9009883a 	mov	r4,r18
   8ab30:	100b883a 	mov	r5,r2
   8ab34:	0082b040 	call	82b04 <__mulsi3>
   8ab38:	8809883a 	mov	r4,r17
   8ab3c:	b80b883a 	mov	r5,r23
   8ab40:	102b883a 	mov	r21,r2
   8ab44:	0082afc0 	call	82afc <__umodsi3>
   8ab48:	1004943a 	slli	r2,r2,16
   8ab4c:	80ffffcc 	andi	r3,r16,65535
   8ab50:	10c4b03a 	or	r2,r2,r3
   8ab54:	1540042e 	bgeu	r2,r21,8ab68 <__umoddi3+0x284>
   8ab58:	14c5883a 	add	r2,r2,r19
   8ab5c:	14c00236 	bltu	r2,r19,8ab68 <__umoddi3+0x284>
   8ab60:	1540012e 	bgeu	r2,r21,8ab68 <__umoddi3+0x284>
   8ab64:	14c5883a 	add	r2,r2,r19
   8ab68:	1545c83a 	sub	r2,r2,r21
   8ab6c:	1584d83a 	srl	r2,r2,r22
   8ab70:	0013883a 	mov	r9,zero
   8ab74:	d8800415 	stw	r2,16(sp)
   8ab78:	d8c00417 	ldw	r3,16(sp)
   8ab7c:	0005883a 	mov	r2,zero
   8ab80:	d8800515 	stw	r2,20(sp)
   8ab84:	1811883a 	mov	r8,r3
   8ab88:	003f9d06 	br	8aa00 <__umoddi3+0x11c>
   8ab8c:	00804034 	movhi	r2,256
   8ab90:	10bfffc4 	addi	r2,r2,-1
   8ab94:	14c0c636 	bltu	r2,r19,8aeb0 <__umoddi3+0x5cc>
   8ab98:	01400404 	movi	r5,16
   8ab9c:	2805883a 	mov	r2,r5
   8aba0:	003f6c06 	br	8a954 <__umoddi3+0x70>
   8aba4:	01000044 	movi	r4,1
   8aba8:	000b883a 	mov	r5,zero
   8abac:	0082af40 	call	82af4 <__udivsi3>
   8abb0:	1027883a 	mov	r19,r2
   8abb4:	00bfffd4 	movui	r2,65535
   8abb8:	14fff436 	bltu	r2,r19,8ab8c <__umoddi3+0x2a8>
   8abbc:	003f6106 	br	8a944 <__umoddi3+0x60>
   8abc0:	00804034 	movhi	r2,256
   8abc4:	10bfffc4 	addi	r2,r2,-1
   8abc8:	1200c536 	bltu	r2,r8,8aee0 <__umoddi3+0x5fc>
   8abcc:	01400404 	movi	r5,16
   8abd0:	2805883a 	mov	r2,r5
   8abd4:	003fb406 	br	8aaa8 <__umoddi3+0x1c4>
   8abd8:	00804034 	movhi	r2,256
   8abdc:	10bfffc4 	addi	r2,r2,-1
   8abe0:	11c0c236 	bltu	r2,r7,8aeec <__umoddi3+0x608>
   8abe4:	01400404 	movi	r5,16
   8abe8:	2805883a 	mov	r2,r5
   8abec:	003f9806 	br	8aa50 <__umoddi3+0x16c>
   8abf0:	84c9c83a 	sub	r4,r16,r19
   8abf4:	8105803a 	cmpltu	r2,r16,r4
   8abf8:	a987c83a 	sub	r3,r21,r6
   8abfc:	18abc83a 	sub	r21,r3,r2
   8ac00:	2021883a 	mov	r16,r4
   8ac04:	003f9d06 	br	8aa7c <__umoddi3+0x198>
   8ac08:	9ca6983a 	sll	r19,r19,r18
   8ac0c:	3485c83a 	sub	r2,r6,r18
   8ac10:	a8a2d83a 	srl	r17,r21,r2
   8ac14:	982ed43a 	srli	r23,r19,16
   8ac18:	ac86983a 	sll	r3,r21,r18
   8ac1c:	8084d83a 	srl	r2,r16,r2
   8ac20:	8809883a 	mov	r4,r17
   8ac24:	b80b883a 	mov	r5,r23
   8ac28:	18b8b03a 	or	fp,r3,r2
   8ac2c:	9d3fffcc 	andi	r20,r19,65535
   8ac30:	0082af40 	call	82af4 <__udivsi3>
   8ac34:	100b883a 	mov	r5,r2
   8ac38:	a009883a 	mov	r4,r20
   8ac3c:	0082b040 	call	82b04 <__mulsi3>
   8ac40:	8809883a 	mov	r4,r17
   8ac44:	b80b883a 	mov	r5,r23
   8ac48:	102b883a 	mov	r21,r2
   8ac4c:	0082afc0 	call	82afc <__umodsi3>
   8ac50:	1004943a 	slli	r2,r2,16
   8ac54:	e006d43a 	srli	r3,fp,16
   8ac58:	902d883a 	mov	r22,r18
   8ac5c:	10c4b03a 	or	r2,r2,r3
   8ac60:	1540022e 	bgeu	r2,r21,8ac6c <__umoddi3+0x388>
   8ac64:	14c5883a 	add	r2,r2,r19
   8ac68:	14c0ab2e 	bgeu	r2,r19,8af18 <__umoddi3+0x634>
   8ac6c:	1563c83a 	sub	r17,r2,r21
   8ac70:	8809883a 	mov	r4,r17
   8ac74:	b80b883a 	mov	r5,r23
   8ac78:	0082af40 	call	82af4 <__udivsi3>
   8ac7c:	100b883a 	mov	r5,r2
   8ac80:	a009883a 	mov	r4,r20
   8ac84:	0082b040 	call	82b04 <__mulsi3>
   8ac88:	8809883a 	mov	r4,r17
   8ac8c:	b80b883a 	mov	r5,r23
   8ac90:	102b883a 	mov	r21,r2
   8ac94:	0082afc0 	call	82afc <__umodsi3>
   8ac98:	1004943a 	slli	r2,r2,16
   8ac9c:	e0ffffcc 	andi	r3,fp,65535
   8aca0:	10c4b03a 	or	r2,r2,r3
   8aca4:	1540042e 	bgeu	r2,r21,8acb8 <__umoddi3+0x3d4>
   8aca8:	14c5883a 	add	r2,r2,r19
   8acac:	14c00236 	bltu	r2,r19,8acb8 <__umoddi3+0x3d4>
   8acb0:	1540012e 	bgeu	r2,r21,8acb8 <__umoddi3+0x3d4>
   8acb4:	14c5883a 	add	r2,r2,r19
   8acb8:	84a0983a 	sll	r16,r16,r18
   8acbc:	156bc83a 	sub	r21,r2,r21
   8acc0:	003f3106 	br	8a988 <__umoddi3+0xa4>
   8acc4:	3c8fc83a 	sub	r7,r7,r18
   8acc8:	3486983a 	sll	r3,r6,r18
   8accc:	99c4d83a 	srl	r2,r19,r7
   8acd0:	a9e2d83a 	srl	r17,r21,r7
   8acd4:	ac8c983a 	sll	r6,r21,r18
   8acd8:	18acb03a 	or	r22,r3,r2
   8acdc:	b02ed43a 	srli	r23,r22,16
   8ace0:	81c4d83a 	srl	r2,r16,r7
   8ace4:	8809883a 	mov	r4,r17
   8ace8:	b80b883a 	mov	r5,r23
   8acec:	308cb03a 	or	r6,r6,r2
   8acf0:	d9c00315 	stw	r7,12(sp)
   8acf4:	d9800215 	stw	r6,8(sp)
   8acf8:	b53fffcc 	andi	r20,r22,65535
   8acfc:	0082af40 	call	82af4 <__udivsi3>
   8ad00:	100b883a 	mov	r5,r2
   8ad04:	a009883a 	mov	r4,r20
   8ad08:	1039883a 	mov	fp,r2
   8ad0c:	0082b040 	call	82b04 <__mulsi3>
   8ad10:	8809883a 	mov	r4,r17
   8ad14:	b80b883a 	mov	r5,r23
   8ad18:	102b883a 	mov	r21,r2
   8ad1c:	0082afc0 	call	82afc <__umodsi3>
   8ad20:	d9000217 	ldw	r4,8(sp)
   8ad24:	1004943a 	slli	r2,r2,16
   8ad28:	9ca6983a 	sll	r19,r19,r18
   8ad2c:	2006d43a 	srli	r3,r4,16
   8ad30:	84a0983a 	sll	r16,r16,r18
   8ad34:	dcc00015 	stw	r19,0(sp)
   8ad38:	10c4b03a 	or	r2,r2,r3
   8ad3c:	dc000115 	stw	r16,4(sp)
   8ad40:	1540032e 	bgeu	r2,r21,8ad50 <__umoddi3+0x46c>
   8ad44:	1585883a 	add	r2,r2,r22
   8ad48:	e73fffc4 	addi	fp,fp,-1
   8ad4c:	15806e2e 	bgeu	r2,r22,8af08 <__umoddi3+0x624>
   8ad50:	1563c83a 	sub	r17,r2,r21
   8ad54:	8809883a 	mov	r4,r17
   8ad58:	b80b883a 	mov	r5,r23
   8ad5c:	0082af40 	call	82af4 <__udivsi3>
   8ad60:	100b883a 	mov	r5,r2
   8ad64:	a009883a 	mov	r4,r20
   8ad68:	1021883a 	mov	r16,r2
   8ad6c:	0082b040 	call	82b04 <__mulsi3>
   8ad70:	b80b883a 	mov	r5,r23
   8ad74:	8809883a 	mov	r4,r17
   8ad78:	1029883a 	mov	r20,r2
   8ad7c:	0082afc0 	call	82afc <__umodsi3>
   8ad80:	d9400217 	ldw	r5,8(sp)
   8ad84:	1004943a 	slli	r2,r2,16
   8ad88:	28ffffcc 	andi	r3,r5,65535
   8ad8c:	10c4b03a 	or	r2,r2,r3
   8ad90:	1500032e 	bgeu	r2,r20,8ada0 <__umoddi3+0x4bc>
   8ad94:	1585883a 	add	r2,r2,r22
   8ad98:	843fffc4 	addi	r16,r16,-1
   8ad9c:	1580562e 	bgeu	r2,r22,8aef8 <__umoddi3+0x614>
   8ada0:	d9800017 	ldw	r6,0(sp)
   8ada4:	e022943a 	slli	r17,fp,16
   8ada8:	302ed43a 	srli	r23,r6,16
   8adac:	8462b03a 	or	r17,r16,r17
   8adb0:	34ffffcc 	andi	r19,r6,65535
   8adb4:	882ad43a 	srli	r21,r17,16
   8adb8:	8c7fffcc 	andi	r17,r17,65535
   8adbc:	8809883a 	mov	r4,r17
   8adc0:	980b883a 	mov	r5,r19
   8adc4:	1521c83a 	sub	r16,r2,r20
   8adc8:	0082b040 	call	82b04 <__mulsi3>
   8adcc:	8809883a 	mov	r4,r17
   8add0:	b80b883a 	mov	r5,r23
   8add4:	1029883a 	mov	r20,r2
   8add8:	0082b040 	call	82b04 <__mulsi3>
   8addc:	980b883a 	mov	r5,r19
   8ade0:	a809883a 	mov	r4,r21
   8ade4:	1023883a 	mov	r17,r2
   8ade8:	0082b040 	call	82b04 <__mulsi3>
   8adec:	a809883a 	mov	r4,r21
   8adf0:	b80b883a 	mov	r5,r23
   8adf4:	1027883a 	mov	r19,r2
   8adf8:	0082b040 	call	82b04 <__mulsi3>
   8adfc:	100b883a 	mov	r5,r2
   8ae00:	a004d43a 	srli	r2,r20,16
   8ae04:	8ce3883a 	add	r17,r17,r19
   8ae08:	1449883a 	add	r4,r2,r17
   8ae0c:	24c0022e 	bgeu	r4,r19,8ae18 <__umoddi3+0x534>
   8ae10:	00800074 	movhi	r2,1
   8ae14:	288b883a 	add	r5,r5,r2
   8ae18:	2004d43a 	srli	r2,r4,16
   8ae1c:	2008943a 	slli	r4,r4,16
   8ae20:	a0ffffcc 	andi	r3,r20,65535
   8ae24:	288d883a 	add	r6,r5,r2
   8ae28:	20c9883a 	add	r4,r4,r3
   8ae2c:	81800b36 	bltu	r16,r6,8ae5c <__umoddi3+0x578>
   8ae30:	81804026 	beq	r16,r6,8af34 <__umoddi3+0x650>
   8ae34:	818dc83a 	sub	r6,r16,r6
   8ae38:	00000f06 	br	8ae78 <__umoddi3+0x594>
   8ae3c:	30c5c83a 	sub	r2,r6,r3
   8ae40:	182d883a 	mov	r22,r3
   8ae44:	8084d83a 	srl	r2,r16,r2
   8ae48:	a8c6983a 	sll	r3,r21,r3
   8ae4c:	9da6983a 	sll	r19,r19,r22
   8ae50:	85a0983a 	sll	r16,r16,r22
   8ae54:	18aab03a 	or	r21,r3,r2
   8ae58:	003f1d06 	br	8aad0 <__umoddi3+0x1ec>
   8ae5c:	d8c00017 	ldw	r3,0(sp)
   8ae60:	20c5c83a 	sub	r2,r4,r3
   8ae64:	2089803a 	cmpltu	r4,r4,r2
   8ae68:	3587c83a 	sub	r3,r6,r22
   8ae6c:	1907c83a 	sub	r3,r3,r4
   8ae70:	80cdc83a 	sub	r6,r16,r3
   8ae74:	1009883a 	mov	r4,r2
   8ae78:	d9400117 	ldw	r5,4(sp)
   8ae7c:	2905c83a 	sub	r2,r5,r4
   8ae80:	2887803a 	cmpltu	r3,r5,r2
   8ae84:	30c7c83a 	sub	r3,r6,r3
   8ae88:	d9800317 	ldw	r6,12(sp)
   8ae8c:	1484d83a 	srl	r2,r2,r18
   8ae90:	1988983a 	sll	r4,r3,r6
   8ae94:	1c86d83a 	srl	r3,r3,r18
   8ae98:	2088b03a 	or	r4,r4,r2
   8ae9c:	2011883a 	mov	r8,r4
   8aea0:	1813883a 	mov	r9,r3
   8aea4:	d9000415 	stw	r4,16(sp)
   8aea8:	d8c00515 	stw	r3,20(sp)
   8aeac:	003ed406 	br	8aa00 <__umoddi3+0x11c>
   8aeb0:	01400604 	movi	r5,24
   8aeb4:	2805883a 	mov	r2,r5
   8aeb8:	003ea606 	br	8a954 <__umoddi3+0x70>
   8aebc:	01400204 	movi	r5,8
   8aec0:	2805883a 	mov	r2,r5
   8aec4:	003ea306 	br	8a954 <__umoddi3+0x70>
   8aec8:	01400204 	movi	r5,8
   8aecc:	2805883a 	mov	r2,r5
   8aed0:	003edf06 	br	8aa50 <__umoddi3+0x16c>
   8aed4:	01400204 	movi	r5,8
   8aed8:	2805883a 	mov	r2,r5
   8aedc:	003ef206 	br	8aaa8 <__umoddi3+0x1c4>
   8aee0:	01400604 	movi	r5,24
   8aee4:	2805883a 	mov	r2,r5
   8aee8:	003eef06 	br	8aaa8 <__umoddi3+0x1c4>
   8aeec:	01400604 	movi	r5,24
   8aef0:	2805883a 	mov	r2,r5
   8aef4:	003ed606 	br	8aa50 <__umoddi3+0x16c>
   8aef8:	153fa92e 	bgeu	r2,r20,8ada0 <__umoddi3+0x4bc>
   8aefc:	843fffc4 	addi	r16,r16,-1
   8af00:	1585883a 	add	r2,r2,r22
   8af04:	003fa606 	br	8ada0 <__umoddi3+0x4bc>
   8af08:	157f912e 	bgeu	r2,r21,8ad50 <__umoddi3+0x46c>
   8af0c:	e73fffc4 	addi	fp,fp,-1
   8af10:	1585883a 	add	r2,r2,r22
   8af14:	003f8e06 	br	8ad50 <__umoddi3+0x46c>
   8af18:	157f542e 	bgeu	r2,r21,8ac6c <__umoddi3+0x388>
   8af1c:	14c5883a 	add	r2,r2,r19
   8af20:	003f5206 	br	8ac6c <__umoddi3+0x388>
   8af24:	14c5883a 	add	r2,r2,r19
   8af28:	003efc06 	br	8ab1c <__umoddi3+0x238>
   8af2c:	14c5883a 	add	r2,r2,r19
   8af30:	003ea606 	br	8a9cc <__umoddi3+0xe8>
   8af34:	d8800117 	ldw	r2,4(sp)
   8af38:	113fc836 	bltu	r2,r4,8ae5c <__umoddi3+0x578>
   8af3c:	000d883a 	mov	r6,zero
   8af40:	003fcd06 	br	8ae78 <__umoddi3+0x594>

0008af44 <_fpadd_parts>:
   8af44:	defff804 	addi	sp,sp,-32
   8af48:	dcc00315 	stw	r19,12(sp)
   8af4c:	2027883a 	mov	r19,r4
   8af50:	21000017 	ldw	r4,0(r4)
   8af54:	00c00044 	movi	r3,1
   8af58:	dd400515 	stw	r21,20(sp)
   8af5c:	dd000415 	stw	r20,16(sp)
   8af60:	ddc00715 	stw	r23,28(sp)
   8af64:	dd800615 	stw	r22,24(sp)
   8af68:	dc800215 	stw	r18,8(sp)
   8af6c:	dc400115 	stw	r17,4(sp)
   8af70:	dc000015 	stw	r16,0(sp)
   8af74:	282b883a 	mov	r21,r5
   8af78:	3029883a 	mov	r20,r6
   8af7c:	1900632e 	bgeu	r3,r4,8b10c <_fpadd_parts+0x1c8>
   8af80:	28800017 	ldw	r2,0(r5)
   8af84:	1880812e 	bgeu	r3,r2,8b18c <_fpadd_parts+0x248>
   8af88:	00c00104 	movi	r3,4
   8af8c:	20c0dc26 	beq	r4,r3,8b300 <_fpadd_parts+0x3bc>
   8af90:	10c07e26 	beq	r2,r3,8b18c <_fpadd_parts+0x248>
   8af94:	00c00084 	movi	r3,2
   8af98:	10c06726 	beq	r2,r3,8b138 <_fpadd_parts+0x1f4>
   8af9c:	20c07b26 	beq	r4,r3,8b18c <_fpadd_parts+0x248>
   8afa0:	9dc00217 	ldw	r23,8(r19)
   8afa4:	28c00217 	ldw	r3,8(r5)
   8afa8:	9c400317 	ldw	r17,12(r19)
   8afac:	2bc00317 	ldw	r15,12(r5)
   8afb0:	b8cdc83a 	sub	r6,r23,r3
   8afb4:	9c800417 	ldw	r18,16(r19)
   8afb8:	2c000417 	ldw	r16,16(r5)
   8afbc:	3009883a 	mov	r4,r6
   8afc0:	30009716 	blt	r6,zero,8b220 <_fpadd_parts+0x2dc>
   8afc4:	00800fc4 	movi	r2,63
   8afc8:	11806b16 	blt	r2,r6,8b178 <_fpadd_parts+0x234>
   8afcc:	0100a40e 	bge	zero,r4,8b260 <_fpadd_parts+0x31c>
   8afd0:	35bff804 	addi	r22,r6,-32
   8afd4:	b000bc16 	blt	r22,zero,8b2c8 <_fpadd_parts+0x384>
   8afd8:	8596d83a 	srl	r11,r16,r22
   8afdc:	0019883a 	mov	r12,zero
   8afe0:	0013883a 	mov	r9,zero
   8afe4:	01000044 	movi	r4,1
   8afe8:	0015883a 	mov	r10,zero
   8afec:	b000be16 	blt	r22,zero,8b2e8 <_fpadd_parts+0x3a4>
   8aff0:	2590983a 	sll	r8,r4,r22
   8aff4:	000f883a 	mov	r7,zero
   8aff8:	00bfffc4 	movi	r2,-1
   8affc:	3889883a 	add	r4,r7,r2
   8b000:	408b883a 	add	r5,r8,r2
   8b004:	21cd803a 	cmpltu	r6,r4,r7
   8b008:	314b883a 	add	r5,r6,r5
   8b00c:	7904703a 	and	r2,r15,r4
   8b010:	8146703a 	and	r3,r16,r5
   8b014:	10c4b03a 	or	r2,r2,r3
   8b018:	10000226 	beq	r2,zero,8b024 <_fpadd_parts+0xe0>
   8b01c:	02400044 	movi	r9,1
   8b020:	0015883a 	mov	r10,zero
   8b024:	5a5eb03a 	or	r15,r11,r9
   8b028:	62a0b03a 	or	r16,r12,r10
   8b02c:	99400117 	ldw	r5,4(r19)
   8b030:	a8800117 	ldw	r2,4(r21)
   8b034:	28806e26 	beq	r5,r2,8b1f0 <_fpadd_parts+0x2ac>
   8b038:	28006626 	beq	r5,zero,8b1d4 <_fpadd_parts+0x290>
   8b03c:	7c45c83a 	sub	r2,r15,r17
   8b040:	7889803a 	cmpltu	r4,r15,r2
   8b044:	8487c83a 	sub	r3,r16,r18
   8b048:	1909c83a 	sub	r4,r3,r4
   8b04c:	100d883a 	mov	r6,r2
   8b050:	200f883a 	mov	r7,r4
   8b054:	38007716 	blt	r7,zero,8b234 <_fpadd_parts+0x2f0>
   8b058:	a5c00215 	stw	r23,8(r20)
   8b05c:	a1c00415 	stw	r7,16(r20)
   8b060:	a0000115 	stw	zero,4(r20)
   8b064:	a1800315 	stw	r6,12(r20)
   8b068:	a2000317 	ldw	r8,12(r20)
   8b06c:	a2400417 	ldw	r9,16(r20)
   8b070:	00bfffc4 	movi	r2,-1
   8b074:	408b883a 	add	r5,r8,r2
   8b078:	2a09803a 	cmpltu	r4,r5,r8
   8b07c:	488d883a 	add	r6,r9,r2
   8b080:	01c40034 	movhi	r7,4096
   8b084:	39ffffc4 	addi	r7,r7,-1
   8b088:	218d883a 	add	r6,r4,r6
   8b08c:	39801736 	bltu	r7,r6,8b0ec <_fpadd_parts+0x1a8>
   8b090:	31c06526 	beq	r6,r7,8b228 <_fpadd_parts+0x2e4>
   8b094:	a3000217 	ldw	r12,8(r20)
   8b098:	4209883a 	add	r4,r8,r8
   8b09c:	00bfffc4 	movi	r2,-1
   8b0a0:	220f803a 	cmpltu	r7,r4,r8
   8b0a4:	4a4b883a 	add	r5,r9,r9
   8b0a8:	394f883a 	add	r7,r7,r5
   8b0ac:	2095883a 	add	r10,r4,r2
   8b0b0:	3897883a 	add	r11,r7,r2
   8b0b4:	510d803a 	cmpltu	r6,r10,r4
   8b0b8:	6099883a 	add	r12,r12,r2
   8b0bc:	32d7883a 	add	r11,r6,r11
   8b0c0:	00840034 	movhi	r2,4096
   8b0c4:	10bfffc4 	addi	r2,r2,-1
   8b0c8:	2011883a 	mov	r8,r4
   8b0cc:	3813883a 	mov	r9,r7
   8b0d0:	a1000315 	stw	r4,12(r20)
   8b0d4:	a1c00415 	stw	r7,16(r20)
   8b0d8:	a3000215 	stw	r12,8(r20)
   8b0dc:	12c00336 	bltu	r2,r11,8b0ec <_fpadd_parts+0x1a8>
   8b0e0:	58bfed1e 	bne	r11,r2,8b098 <_fpadd_parts+0x154>
   8b0e4:	00bfff84 	movi	r2,-2
   8b0e8:	12bfeb2e 	bgeu	r2,r10,8b098 <_fpadd_parts+0x154>
   8b0ec:	a2800417 	ldw	r10,16(r20)
   8b0f0:	008000c4 	movi	r2,3
   8b0f4:	00c80034 	movhi	r3,8192
   8b0f8:	18ffffc4 	addi	r3,r3,-1
   8b0fc:	a2400317 	ldw	r9,12(r20)
   8b100:	a0800015 	stw	r2,0(r20)
   8b104:	1a802336 	bltu	r3,r10,8b194 <_fpadd_parts+0x250>
   8b108:	a027883a 	mov	r19,r20
   8b10c:	9805883a 	mov	r2,r19
   8b110:	ddc00717 	ldw	r23,28(sp)
   8b114:	dd800617 	ldw	r22,24(sp)
   8b118:	dd400517 	ldw	r21,20(sp)
   8b11c:	dd000417 	ldw	r20,16(sp)
   8b120:	dcc00317 	ldw	r19,12(sp)
   8b124:	dc800217 	ldw	r18,8(sp)
   8b128:	dc400117 	ldw	r17,4(sp)
   8b12c:	dc000017 	ldw	r16,0(sp)
   8b130:	dec00804 	addi	sp,sp,32
   8b134:	f800283a 	ret
   8b138:	20fff41e 	bne	r4,r3,8b10c <_fpadd_parts+0x1c8>
   8b13c:	31000015 	stw	r4,0(r6)
   8b140:	98800117 	ldw	r2,4(r19)
   8b144:	30800115 	stw	r2,4(r6)
   8b148:	98c00217 	ldw	r3,8(r19)
   8b14c:	30c00215 	stw	r3,8(r6)
   8b150:	98800317 	ldw	r2,12(r19)
   8b154:	30800315 	stw	r2,12(r6)
   8b158:	98c00417 	ldw	r3,16(r19)
   8b15c:	30c00415 	stw	r3,16(r6)
   8b160:	98800117 	ldw	r2,4(r19)
   8b164:	28c00117 	ldw	r3,4(r5)
   8b168:	3027883a 	mov	r19,r6
   8b16c:	10c4703a 	and	r2,r2,r3
   8b170:	30800115 	stw	r2,4(r6)
   8b174:	003fe506 	br	8b10c <_fpadd_parts+0x1c8>
   8b178:	1dc02616 	blt	r3,r23,8b214 <_fpadd_parts+0x2d0>
   8b17c:	0023883a 	mov	r17,zero
   8b180:	182f883a 	mov	r23,r3
   8b184:	0025883a 	mov	r18,zero
   8b188:	003fa806 	br	8b02c <_fpadd_parts+0xe8>
   8b18c:	a827883a 	mov	r19,r21
   8b190:	003fde06 	br	8b10c <_fpadd_parts+0x1c8>
   8b194:	01800044 	movi	r6,1
   8b198:	500497fa 	slli	r2,r10,31
   8b19c:	4808d07a 	srli	r4,r9,1
   8b1a0:	518ad83a 	srl	r5,r10,r6
   8b1a4:	a2000217 	ldw	r8,8(r20)
   8b1a8:	1108b03a 	or	r4,r2,r4
   8b1ac:	0007883a 	mov	r3,zero
   8b1b0:	4984703a 	and	r2,r9,r6
   8b1b4:	208cb03a 	or	r6,r4,r2
   8b1b8:	28ceb03a 	or	r7,r5,r3
   8b1bc:	42000044 	addi	r8,r8,1
   8b1c0:	a027883a 	mov	r19,r20
   8b1c4:	a1c00415 	stw	r7,16(r20)
   8b1c8:	a2000215 	stw	r8,8(r20)
   8b1cc:	a1800315 	stw	r6,12(r20)
   8b1d0:	003fce06 	br	8b10c <_fpadd_parts+0x1c8>
   8b1d4:	8bc5c83a 	sub	r2,r17,r15
   8b1d8:	8889803a 	cmpltu	r4,r17,r2
   8b1dc:	9407c83a 	sub	r3,r18,r16
   8b1e0:	1909c83a 	sub	r4,r3,r4
   8b1e4:	100d883a 	mov	r6,r2
   8b1e8:	200f883a 	mov	r7,r4
   8b1ec:	003f9906 	br	8b054 <_fpadd_parts+0x110>
   8b1f0:	7c45883a 	add	r2,r15,r17
   8b1f4:	13c9803a 	cmpltu	r4,r2,r15
   8b1f8:	8487883a 	add	r3,r16,r18
   8b1fc:	20c9883a 	add	r4,r4,r3
   8b200:	a1400115 	stw	r5,4(r20)
   8b204:	a5c00215 	stw	r23,8(r20)
   8b208:	a0800315 	stw	r2,12(r20)
   8b20c:	a1000415 	stw	r4,16(r20)
   8b210:	003fb606 	br	8b0ec <_fpadd_parts+0x1a8>
   8b214:	001f883a 	mov	r15,zero
   8b218:	0021883a 	mov	r16,zero
   8b21c:	003f8306 	br	8b02c <_fpadd_parts+0xe8>
   8b220:	018dc83a 	sub	r6,zero,r6
   8b224:	003f6706 	br	8afc4 <_fpadd_parts+0x80>
   8b228:	00bfff84 	movi	r2,-2
   8b22c:	117faf36 	bltu	r2,r5,8b0ec <_fpadd_parts+0x1a8>
   8b230:	003f9806 	br	8b094 <_fpadd_parts+0x150>
   8b234:	0005883a 	mov	r2,zero
   8b238:	1189c83a 	sub	r4,r2,r6
   8b23c:	1105803a 	cmpltu	r2,r2,r4
   8b240:	01cbc83a 	sub	r5,zero,r7
   8b244:	2885c83a 	sub	r2,r5,r2
   8b248:	01800044 	movi	r6,1
   8b24c:	a1800115 	stw	r6,4(r20)
   8b250:	a5c00215 	stw	r23,8(r20)
   8b254:	a1000315 	stw	r4,12(r20)
   8b258:	a0800415 	stw	r2,16(r20)
   8b25c:	003f8206 	br	8b068 <_fpadd_parts+0x124>
   8b260:	203f7226 	beq	r4,zero,8b02c <_fpadd_parts+0xe8>
   8b264:	35bff804 	addi	r22,r6,-32
   8b268:	b9af883a 	add	r23,r23,r6
   8b26c:	b0003116 	blt	r22,zero,8b334 <_fpadd_parts+0x3f0>
   8b270:	959ad83a 	srl	r13,r18,r22
   8b274:	001d883a 	mov	r14,zero
   8b278:	000f883a 	mov	r7,zero
   8b27c:	01000044 	movi	r4,1
   8b280:	0011883a 	mov	r8,zero
   8b284:	b0002516 	blt	r22,zero,8b31c <_fpadd_parts+0x3d8>
   8b288:	2594983a 	sll	r10,r4,r22
   8b28c:	0013883a 	mov	r9,zero
   8b290:	00bfffc4 	movi	r2,-1
   8b294:	4889883a 	add	r4,r9,r2
   8b298:	508b883a 	add	r5,r10,r2
   8b29c:	224d803a 	cmpltu	r6,r4,r9
   8b2a0:	314b883a 	add	r5,r6,r5
   8b2a4:	8904703a 	and	r2,r17,r4
   8b2a8:	9146703a 	and	r3,r18,r5
   8b2ac:	10c4b03a 	or	r2,r2,r3
   8b2b0:	10000226 	beq	r2,zero,8b2bc <_fpadd_parts+0x378>
   8b2b4:	01c00044 	movi	r7,1
   8b2b8:	0011883a 	mov	r8,zero
   8b2bc:	69e2b03a 	or	r17,r13,r7
   8b2c0:	7224b03a 	or	r18,r14,r8
   8b2c4:	003f5906 	br	8b02c <_fpadd_parts+0xe8>
   8b2c8:	8407883a 	add	r3,r16,r16
   8b2cc:	008007c4 	movi	r2,31
   8b2d0:	1185c83a 	sub	r2,r2,r6
   8b2d4:	1886983a 	sll	r3,r3,r2
   8b2d8:	7996d83a 	srl	r11,r15,r6
   8b2dc:	8198d83a 	srl	r12,r16,r6
   8b2e0:	1ad6b03a 	or	r11,r3,r11
   8b2e4:	003f3e06 	br	8afe0 <_fpadd_parts+0x9c>
   8b2e8:	2006d07a 	srli	r3,r4,1
   8b2ec:	008007c4 	movi	r2,31
   8b2f0:	1185c83a 	sub	r2,r2,r6
   8b2f4:	1890d83a 	srl	r8,r3,r2
   8b2f8:	218e983a 	sll	r7,r4,r6
   8b2fc:	003f3e06 	br	8aff8 <_fpadd_parts+0xb4>
   8b300:	113f821e 	bne	r2,r4,8b10c <_fpadd_parts+0x1c8>
   8b304:	28c00117 	ldw	r3,4(r5)
   8b308:	98800117 	ldw	r2,4(r19)
   8b30c:	10ff7f26 	beq	r2,r3,8b10c <_fpadd_parts+0x1c8>
   8b310:	04c002b4 	movhi	r19,10
   8b314:	9ce58b04 	addi	r19,r19,-27092
   8b318:	003f7c06 	br	8b10c <_fpadd_parts+0x1c8>
   8b31c:	2006d07a 	srli	r3,r4,1
   8b320:	008007c4 	movi	r2,31
   8b324:	1185c83a 	sub	r2,r2,r6
   8b328:	1894d83a 	srl	r10,r3,r2
   8b32c:	2192983a 	sll	r9,r4,r6
   8b330:	003fd706 	br	8b290 <_fpadd_parts+0x34c>
   8b334:	9487883a 	add	r3,r18,r18
   8b338:	008007c4 	movi	r2,31
   8b33c:	1185c83a 	sub	r2,r2,r6
   8b340:	1886983a 	sll	r3,r3,r2
   8b344:	899ad83a 	srl	r13,r17,r6
   8b348:	919cd83a 	srl	r14,r18,r6
   8b34c:	1b5ab03a 	or	r13,r3,r13
   8b350:	003fc906 	br	8b278 <_fpadd_parts+0x334>

0008b354 <__subdf3>:
   8b354:	deffea04 	addi	sp,sp,-88
   8b358:	dcc01415 	stw	r19,80(sp)
   8b35c:	dcc00404 	addi	r19,sp,16
   8b360:	2011883a 	mov	r8,r4
   8b364:	2813883a 	mov	r9,r5
   8b368:	dc401315 	stw	r17,76(sp)
   8b36c:	d809883a 	mov	r4,sp
   8b370:	980b883a 	mov	r5,r19
   8b374:	dc400904 	addi	r17,sp,36
   8b378:	dfc01515 	stw	ra,84(sp)
   8b37c:	da400115 	stw	r9,4(sp)
   8b380:	d9c00315 	stw	r7,12(sp)
   8b384:	da000015 	stw	r8,0(sp)
   8b388:	d9800215 	stw	r6,8(sp)
   8b38c:	008c4040 	call	8c404 <__unpack_d>
   8b390:	d9000204 	addi	r4,sp,8
   8b394:	880b883a 	mov	r5,r17
   8b398:	008c4040 	call	8c404 <__unpack_d>
   8b39c:	d8800a17 	ldw	r2,40(sp)
   8b3a0:	880b883a 	mov	r5,r17
   8b3a4:	9809883a 	mov	r4,r19
   8b3a8:	d9800e04 	addi	r6,sp,56
   8b3ac:	1080005c 	xori	r2,r2,1
   8b3b0:	d8800a15 	stw	r2,40(sp)
   8b3b4:	008af440 	call	8af44 <_fpadd_parts>
   8b3b8:	1009883a 	mov	r4,r2
   8b3bc:	008c0f00 	call	8c0f0 <__pack_d>
   8b3c0:	dfc01517 	ldw	ra,84(sp)
   8b3c4:	dcc01417 	ldw	r19,80(sp)
   8b3c8:	dc401317 	ldw	r17,76(sp)
   8b3cc:	dec01604 	addi	sp,sp,88
   8b3d0:	f800283a 	ret

0008b3d4 <__adddf3>:
   8b3d4:	deffea04 	addi	sp,sp,-88
   8b3d8:	dcc01415 	stw	r19,80(sp)
   8b3dc:	dcc00404 	addi	r19,sp,16
   8b3e0:	2011883a 	mov	r8,r4
   8b3e4:	2813883a 	mov	r9,r5
   8b3e8:	dc401315 	stw	r17,76(sp)
   8b3ec:	d809883a 	mov	r4,sp
   8b3f0:	980b883a 	mov	r5,r19
   8b3f4:	dc400904 	addi	r17,sp,36
   8b3f8:	dfc01515 	stw	ra,84(sp)
   8b3fc:	da400115 	stw	r9,4(sp)
   8b400:	d9c00315 	stw	r7,12(sp)
   8b404:	da000015 	stw	r8,0(sp)
   8b408:	d9800215 	stw	r6,8(sp)
   8b40c:	008c4040 	call	8c404 <__unpack_d>
   8b410:	d9000204 	addi	r4,sp,8
   8b414:	880b883a 	mov	r5,r17
   8b418:	008c4040 	call	8c404 <__unpack_d>
   8b41c:	d9800e04 	addi	r6,sp,56
   8b420:	9809883a 	mov	r4,r19
   8b424:	880b883a 	mov	r5,r17
   8b428:	008af440 	call	8af44 <_fpadd_parts>
   8b42c:	1009883a 	mov	r4,r2
   8b430:	008c0f00 	call	8c0f0 <__pack_d>
   8b434:	dfc01517 	ldw	ra,84(sp)
   8b438:	dcc01417 	ldw	r19,80(sp)
   8b43c:	dc401317 	ldw	r17,76(sp)
   8b440:	dec01604 	addi	sp,sp,88
   8b444:	f800283a 	ret

0008b448 <__muldf3>:
   8b448:	deffe004 	addi	sp,sp,-128
   8b44c:	dc401815 	stw	r17,96(sp)
   8b450:	dc400404 	addi	r17,sp,16
   8b454:	2011883a 	mov	r8,r4
   8b458:	2813883a 	mov	r9,r5
   8b45c:	dc001715 	stw	r16,92(sp)
   8b460:	d809883a 	mov	r4,sp
   8b464:	880b883a 	mov	r5,r17
   8b468:	dc000904 	addi	r16,sp,36
   8b46c:	dfc01f15 	stw	ra,124(sp)
   8b470:	da400115 	stw	r9,4(sp)
   8b474:	d9c00315 	stw	r7,12(sp)
   8b478:	da000015 	stw	r8,0(sp)
   8b47c:	d9800215 	stw	r6,8(sp)
   8b480:	ddc01e15 	stw	r23,120(sp)
   8b484:	dd801d15 	stw	r22,116(sp)
   8b488:	dd401c15 	stw	r21,112(sp)
   8b48c:	dd001b15 	stw	r20,108(sp)
   8b490:	dcc01a15 	stw	r19,104(sp)
   8b494:	dc801915 	stw	r18,100(sp)
   8b498:	008c4040 	call	8c404 <__unpack_d>
   8b49c:	d9000204 	addi	r4,sp,8
   8b4a0:	800b883a 	mov	r5,r16
   8b4a4:	008c4040 	call	8c404 <__unpack_d>
   8b4a8:	d9000417 	ldw	r4,16(sp)
   8b4ac:	00800044 	movi	r2,1
   8b4b0:	1100102e 	bgeu	r2,r4,8b4f4 <__muldf3+0xac>
   8b4b4:	d8c00917 	ldw	r3,36(sp)
   8b4b8:	10c0062e 	bgeu	r2,r3,8b4d4 <__muldf3+0x8c>
   8b4bc:	00800104 	movi	r2,4
   8b4c0:	20800a26 	beq	r4,r2,8b4ec <__muldf3+0xa4>
   8b4c4:	1880cc26 	beq	r3,r2,8b7f8 <__muldf3+0x3b0>
   8b4c8:	00800084 	movi	r2,2
   8b4cc:	20800926 	beq	r4,r2,8b4f4 <__muldf3+0xac>
   8b4d0:	1880191e 	bne	r3,r2,8b538 <__muldf3+0xf0>
   8b4d4:	d8c00a17 	ldw	r3,40(sp)
   8b4d8:	d8800517 	ldw	r2,20(sp)
   8b4dc:	8009883a 	mov	r4,r16
   8b4e0:	10c4c03a 	cmpne	r2,r2,r3
   8b4e4:	d8800a15 	stw	r2,40(sp)
   8b4e8:	00000706 	br	8b508 <__muldf3+0xc0>
   8b4ec:	00800084 	movi	r2,2
   8b4f0:	1880c326 	beq	r3,r2,8b800 <__muldf3+0x3b8>
   8b4f4:	d8800517 	ldw	r2,20(sp)
   8b4f8:	d8c00a17 	ldw	r3,40(sp)
   8b4fc:	8809883a 	mov	r4,r17
   8b500:	10c4c03a 	cmpne	r2,r2,r3
   8b504:	d8800515 	stw	r2,20(sp)
   8b508:	008c0f00 	call	8c0f0 <__pack_d>
   8b50c:	dfc01f17 	ldw	ra,124(sp)
   8b510:	ddc01e17 	ldw	r23,120(sp)
   8b514:	dd801d17 	ldw	r22,116(sp)
   8b518:	dd401c17 	ldw	r21,112(sp)
   8b51c:	dd001b17 	ldw	r20,108(sp)
   8b520:	dcc01a17 	ldw	r19,104(sp)
   8b524:	dc801917 	ldw	r18,100(sp)
   8b528:	dc401817 	ldw	r17,96(sp)
   8b52c:	dc001717 	ldw	r16,92(sp)
   8b530:	dec02004 	addi	sp,sp,128
   8b534:	f800283a 	ret
   8b538:	dd800717 	ldw	r22,28(sp)
   8b53c:	dc800c17 	ldw	r18,48(sp)
   8b540:	002b883a 	mov	r21,zero
   8b544:	0023883a 	mov	r17,zero
   8b548:	a80b883a 	mov	r5,r21
   8b54c:	b00d883a 	mov	r6,r22
   8b550:	880f883a 	mov	r7,r17
   8b554:	ddc00817 	ldw	r23,32(sp)
   8b558:	dcc00d17 	ldw	r19,52(sp)
   8b55c:	9009883a 	mov	r4,r18
   8b560:	008a1540 	call	8a154 <__muldi3>
   8b564:	001b883a 	mov	r13,zero
   8b568:	680f883a 	mov	r7,r13
   8b56c:	b009883a 	mov	r4,r22
   8b570:	000b883a 	mov	r5,zero
   8b574:	980d883a 	mov	r6,r19
   8b578:	b82d883a 	mov	r22,r23
   8b57c:	002f883a 	mov	r23,zero
   8b580:	db401615 	stw	r13,88(sp)
   8b584:	d8801315 	stw	r2,76(sp)
   8b588:	d8c01415 	stw	r3,80(sp)
   8b58c:	dcc01515 	stw	r19,84(sp)
   8b590:	008a1540 	call	8a154 <__muldi3>
   8b594:	b00d883a 	mov	r6,r22
   8b598:	000b883a 	mov	r5,zero
   8b59c:	9009883a 	mov	r4,r18
   8b5a0:	b80f883a 	mov	r7,r23
   8b5a4:	1021883a 	mov	r16,r2
   8b5a8:	1823883a 	mov	r17,r3
   8b5ac:	008a1540 	call	8a154 <__muldi3>
   8b5b0:	8085883a 	add	r2,r16,r2
   8b5b4:	140d803a 	cmpltu	r6,r2,r16
   8b5b8:	88c7883a 	add	r3,r17,r3
   8b5bc:	30cd883a 	add	r6,r6,r3
   8b5c0:	1029883a 	mov	r20,r2
   8b5c4:	302b883a 	mov	r21,r6
   8b5c8:	da801317 	ldw	r10,76(sp)
   8b5cc:	dac01417 	ldw	r11,80(sp)
   8b5d0:	db001517 	ldw	r12,84(sp)
   8b5d4:	db401617 	ldw	r13,88(sp)
   8b5d8:	3440612e 	bgeu	r6,r17,8b760 <__muldf3+0x318>
   8b5dc:	0009883a 	mov	r4,zero
   8b5e0:	5105883a 	add	r2,r10,r4
   8b5e4:	128d803a 	cmpltu	r6,r2,r10
   8b5e8:	5d07883a 	add	r3,r11,r20
   8b5ec:	30cd883a 	add	r6,r6,r3
   8b5f0:	0021883a 	mov	r16,zero
   8b5f4:	04400044 	movi	r17,1
   8b5f8:	1025883a 	mov	r18,r2
   8b5fc:	3027883a 	mov	r19,r6
   8b600:	32c06236 	bltu	r6,r11,8b78c <__muldf3+0x344>
   8b604:	59807a26 	beq	r11,r6,8b7f0 <__muldf3+0x3a8>
   8b608:	680b883a 	mov	r5,r13
   8b60c:	b80f883a 	mov	r7,r23
   8b610:	6009883a 	mov	r4,r12
   8b614:	b00d883a 	mov	r6,r22
   8b618:	008a1540 	call	8a154 <__muldi3>
   8b61c:	1009883a 	mov	r4,r2
   8b620:	000f883a 	mov	r7,zero
   8b624:	1545883a 	add	r2,r2,r21
   8b628:	1111803a 	cmpltu	r8,r2,r4
   8b62c:	19c7883a 	add	r3,r3,r7
   8b630:	40c7883a 	add	r3,r8,r3
   8b634:	88cb883a 	add	r5,r17,r3
   8b638:	d8c00617 	ldw	r3,24(sp)
   8b63c:	8089883a 	add	r4,r16,r2
   8b640:	d8800b17 	ldw	r2,44(sp)
   8b644:	18c00104 	addi	r3,r3,4
   8b648:	240d803a 	cmpltu	r6,r4,r16
   8b64c:	10c7883a 	add	r3,r2,r3
   8b650:	2013883a 	mov	r9,r4
   8b654:	d8800a17 	ldw	r2,40(sp)
   8b658:	d9000517 	ldw	r4,20(sp)
   8b65c:	314d883a 	add	r6,r6,r5
   8b660:	3015883a 	mov	r10,r6
   8b664:	2088c03a 	cmpne	r4,r4,r2
   8b668:	00880034 	movhi	r2,8192
   8b66c:	10bfffc4 	addi	r2,r2,-1
   8b670:	d9000f15 	stw	r4,60(sp)
   8b674:	d8c01015 	stw	r3,64(sp)
   8b678:	1180162e 	bgeu	r2,r6,8b6d4 <__muldf3+0x28c>
   8b67c:	1811883a 	mov	r8,r3
   8b680:	101f883a 	mov	r15,r2
   8b684:	980497fa 	slli	r2,r19,31
   8b688:	9016d07a 	srli	r11,r18,1
   8b68c:	500697fa 	slli	r3,r10,31
   8b690:	480cd07a 	srli	r6,r9,1
   8b694:	500ed07a 	srli	r7,r10,1
   8b698:	12d6b03a 	or	r11,r2,r11
   8b69c:	00800044 	movi	r2,1
   8b6a0:	198cb03a 	or	r6,r3,r6
   8b6a4:	4888703a 	and	r4,r9,r2
   8b6a8:	9818d07a 	srli	r12,r19,1
   8b6ac:	001b883a 	mov	r13,zero
   8b6b0:	03a00034 	movhi	r14,32768
   8b6b4:	3013883a 	mov	r9,r6
   8b6b8:	3815883a 	mov	r10,r7
   8b6bc:	4091883a 	add	r8,r8,r2
   8b6c0:	20000226 	beq	r4,zero,8b6cc <__muldf3+0x284>
   8b6c4:	5b64b03a 	or	r18,r11,r13
   8b6c8:	63a6b03a 	or	r19,r12,r14
   8b6cc:	7abfed36 	bltu	r15,r10,8b684 <__muldf3+0x23c>
   8b6d0:	da001015 	stw	r8,64(sp)
   8b6d4:	00840034 	movhi	r2,4096
   8b6d8:	10bfffc4 	addi	r2,r2,-1
   8b6dc:	12801436 	bltu	r2,r10,8b730 <__muldf3+0x2e8>
   8b6e0:	da001017 	ldw	r8,64(sp)
   8b6e4:	101f883a 	mov	r15,r2
   8b6e8:	4a45883a 	add	r2,r9,r9
   8b6ec:	124d803a 	cmpltu	r6,r2,r9
   8b6f0:	5287883a 	add	r3,r10,r10
   8b6f4:	9497883a 	add	r11,r18,r18
   8b6f8:	5c8f803a 	cmpltu	r7,r11,r18
   8b6fc:	9cd9883a 	add	r12,r19,r19
   8b700:	01000044 	movi	r4,1
   8b704:	30cd883a 	add	r6,r6,r3
   8b708:	3b0f883a 	add	r7,r7,r12
   8b70c:	423fffc4 	addi	r8,r8,-1
   8b710:	1013883a 	mov	r9,r2
   8b714:	3015883a 	mov	r10,r6
   8b718:	111ab03a 	or	r13,r2,r4
   8b71c:	98003016 	blt	r19,zero,8b7e0 <__muldf3+0x398>
   8b720:	5825883a 	mov	r18,r11
   8b724:	3827883a 	mov	r19,r7
   8b728:	7abfef2e 	bgeu	r15,r10,8b6e8 <__muldf3+0x2a0>
   8b72c:	da001015 	stw	r8,64(sp)
   8b730:	00803fc4 	movi	r2,255
   8b734:	488e703a 	and	r7,r9,r2
   8b738:	00802004 	movi	r2,128
   8b73c:	0007883a 	mov	r3,zero
   8b740:	0011883a 	mov	r8,zero
   8b744:	38801826 	beq	r7,r2,8b7a8 <__muldf3+0x360>
   8b748:	008000c4 	movi	r2,3
   8b74c:	d9000e04 	addi	r4,sp,56
   8b750:	da801215 	stw	r10,72(sp)
   8b754:	d8800e15 	stw	r2,56(sp)
   8b758:	da401115 	stw	r9,68(sp)
   8b75c:	003f6a06 	br	8b508 <__muldf3+0xc0>
   8b760:	89802126 	beq	r17,r6,8b7e8 <__muldf3+0x3a0>
   8b764:	0009883a 	mov	r4,zero
   8b768:	5105883a 	add	r2,r10,r4
   8b76c:	128d803a 	cmpltu	r6,r2,r10
   8b770:	5d07883a 	add	r3,r11,r20
   8b774:	30cd883a 	add	r6,r6,r3
   8b778:	0021883a 	mov	r16,zero
   8b77c:	0023883a 	mov	r17,zero
   8b780:	1025883a 	mov	r18,r2
   8b784:	3027883a 	mov	r19,r6
   8b788:	32ff9e2e 	bgeu	r6,r11,8b604 <__muldf3+0x1bc>
   8b78c:	00800044 	movi	r2,1
   8b790:	8089883a 	add	r4,r16,r2
   8b794:	240d803a 	cmpltu	r6,r4,r16
   8b798:	344d883a 	add	r6,r6,r17
   8b79c:	2021883a 	mov	r16,r4
   8b7a0:	3023883a 	mov	r17,r6
   8b7a4:	003f9806 	br	8b608 <__muldf3+0x1c0>
   8b7a8:	403fe71e 	bne	r8,zero,8b748 <__muldf3+0x300>
   8b7ac:	01004004 	movi	r4,256
   8b7b0:	4904703a 	and	r2,r9,r4
   8b7b4:	10c4b03a 	or	r2,r2,r3
   8b7b8:	103fe31e 	bne	r2,zero,8b748 <__muldf3+0x300>
   8b7bc:	94c4b03a 	or	r2,r18,r19
   8b7c0:	103fe126 	beq	r2,zero,8b748 <__muldf3+0x300>
   8b7c4:	49c5883a 	add	r2,r9,r7
   8b7c8:	1251803a 	cmpltu	r8,r2,r9
   8b7cc:	4291883a 	add	r8,r8,r10
   8b7d0:	013fc004 	movi	r4,-256
   8b7d4:	1112703a 	and	r9,r2,r4
   8b7d8:	4015883a 	mov	r10,r8
   8b7dc:	003fda06 	br	8b748 <__muldf3+0x300>
   8b7e0:	6813883a 	mov	r9,r13
   8b7e4:	003fce06 	br	8b720 <__muldf3+0x2d8>
   8b7e8:	143f7c36 	bltu	r2,r16,8b5dc <__muldf3+0x194>
   8b7ec:	003fdd06 	br	8b764 <__muldf3+0x31c>
   8b7f0:	12bf852e 	bgeu	r2,r10,8b608 <__muldf3+0x1c0>
   8b7f4:	003fe506 	br	8b78c <__muldf3+0x344>
   8b7f8:	00800084 	movi	r2,2
   8b7fc:	20bf351e 	bne	r4,r2,8b4d4 <__muldf3+0x8c>
   8b800:	010002b4 	movhi	r4,10
   8b804:	21258b04 	addi	r4,r4,-27092
   8b808:	003f3f06 	br	8b508 <__muldf3+0xc0>

0008b80c <__divdf3>:
   8b80c:	deffed04 	addi	sp,sp,-76
   8b810:	dcc01115 	stw	r19,68(sp)
   8b814:	dcc00404 	addi	r19,sp,16
   8b818:	2011883a 	mov	r8,r4
   8b81c:	2813883a 	mov	r9,r5
   8b820:	dc000e15 	stw	r16,56(sp)
   8b824:	d809883a 	mov	r4,sp
   8b828:	980b883a 	mov	r5,r19
   8b82c:	dc000904 	addi	r16,sp,36
   8b830:	dfc01215 	stw	ra,72(sp)
   8b834:	da400115 	stw	r9,4(sp)
   8b838:	d9c00315 	stw	r7,12(sp)
   8b83c:	da000015 	stw	r8,0(sp)
   8b840:	d9800215 	stw	r6,8(sp)
   8b844:	dc801015 	stw	r18,64(sp)
   8b848:	dc400f15 	stw	r17,60(sp)
   8b84c:	008c4040 	call	8c404 <__unpack_d>
   8b850:	d9000204 	addi	r4,sp,8
   8b854:	800b883a 	mov	r5,r16
   8b858:	008c4040 	call	8c404 <__unpack_d>
   8b85c:	d9000417 	ldw	r4,16(sp)
   8b860:	00800044 	movi	r2,1
   8b864:	11000b2e 	bgeu	r2,r4,8b894 <__divdf3+0x88>
   8b868:	d9400917 	ldw	r5,36(sp)
   8b86c:	1140762e 	bgeu	r2,r5,8ba48 <__divdf3+0x23c>
   8b870:	d8800517 	ldw	r2,20(sp)
   8b874:	d8c00a17 	ldw	r3,40(sp)
   8b878:	01800104 	movi	r6,4
   8b87c:	10c4f03a 	xor	r2,r2,r3
   8b880:	d8800515 	stw	r2,20(sp)
   8b884:	21800226 	beq	r4,r6,8b890 <__divdf3+0x84>
   8b888:	00800084 	movi	r2,2
   8b88c:	2080141e 	bne	r4,r2,8b8e0 <__divdf3+0xd4>
   8b890:	29000926 	beq	r5,r4,8b8b8 <__divdf3+0xac>
   8b894:	9809883a 	mov	r4,r19
   8b898:	008c0f00 	call	8c0f0 <__pack_d>
   8b89c:	dfc01217 	ldw	ra,72(sp)
   8b8a0:	dcc01117 	ldw	r19,68(sp)
   8b8a4:	dc801017 	ldw	r18,64(sp)
   8b8a8:	dc400f17 	ldw	r17,60(sp)
   8b8ac:	dc000e17 	ldw	r16,56(sp)
   8b8b0:	dec01304 	addi	sp,sp,76
   8b8b4:	f800283a 	ret
   8b8b8:	010002b4 	movhi	r4,10
   8b8bc:	21258b04 	addi	r4,r4,-27092
   8b8c0:	008c0f00 	call	8c0f0 <__pack_d>
   8b8c4:	dfc01217 	ldw	ra,72(sp)
   8b8c8:	dcc01117 	ldw	r19,68(sp)
   8b8cc:	dc801017 	ldw	r18,64(sp)
   8b8d0:	dc400f17 	ldw	r17,60(sp)
   8b8d4:	dc000e17 	ldw	r16,56(sp)
   8b8d8:	dec01304 	addi	sp,sp,76
   8b8dc:	f800283a 	ret
   8b8e0:	29805b26 	beq	r5,r6,8ba50 <__divdf3+0x244>
   8b8e4:	28802d26 	beq	r5,r2,8b99c <__divdf3+0x190>
   8b8e8:	d8c00617 	ldw	r3,24(sp)
   8b8ec:	d8800b17 	ldw	r2,44(sp)
   8b8f0:	d9c00817 	ldw	r7,32(sp)
   8b8f4:	dc400d17 	ldw	r17,52(sp)
   8b8f8:	188bc83a 	sub	r5,r3,r2
   8b8fc:	d9800717 	ldw	r6,28(sp)
   8b900:	dc000c17 	ldw	r16,48(sp)
   8b904:	d9400615 	stw	r5,24(sp)
   8b908:	3c403836 	bltu	r7,r17,8b9ec <__divdf3+0x1e0>
   8b90c:	89c03626 	beq	r17,r7,8b9e8 <__divdf3+0x1dc>
   8b910:	0015883a 	mov	r10,zero
   8b914:	001d883a 	mov	r14,zero
   8b918:	02c40034 	movhi	r11,4096
   8b91c:	001f883a 	mov	r15,zero
   8b920:	003f883a 	mov	ra,zero
   8b924:	04800f44 	movi	r18,61
   8b928:	00000f06 	br	8b968 <__divdf3+0x15c>
   8b92c:	601d883a 	mov	r14,r12
   8b930:	681f883a 	mov	r15,r13
   8b934:	400d883a 	mov	r6,r8
   8b938:	100f883a 	mov	r7,r2
   8b93c:	3191883a 	add	r8,r6,r6
   8b940:	5808d07a 	srli	r4,r11,1
   8b944:	4185803a 	cmpltu	r2,r8,r6
   8b948:	39d3883a 	add	r9,r7,r7
   8b94c:	28c6b03a 	or	r3,r5,r3
   8b950:	1245883a 	add	r2,r2,r9
   8b954:	1815883a 	mov	r10,r3
   8b958:	2017883a 	mov	r11,r4
   8b95c:	400d883a 	mov	r6,r8
   8b960:	100f883a 	mov	r7,r2
   8b964:	fc801726 	beq	ra,r18,8b9c4 <__divdf3+0x1b8>
   8b968:	580a97fa 	slli	r5,r11,31
   8b96c:	5006d07a 	srli	r3,r10,1
   8b970:	ffc00044 	addi	ra,ra,1
   8b974:	3c7ff136 	bltu	r7,r17,8b93c <__divdf3+0x130>
   8b978:	3411c83a 	sub	r8,r6,r16
   8b97c:	3205803a 	cmpltu	r2,r6,r8
   8b980:	3c53c83a 	sub	r9,r7,r17
   8b984:	7298b03a 	or	r12,r14,r10
   8b988:	7adab03a 	or	r13,r15,r11
   8b98c:	4885c83a 	sub	r2,r9,r2
   8b990:	89ffe61e 	bne	r17,r7,8b92c <__divdf3+0x120>
   8b994:	343fe936 	bltu	r6,r16,8b93c <__divdf3+0x130>
   8b998:	003fe406 	br	8b92c <__divdf3+0x120>
   8b99c:	9809883a 	mov	r4,r19
   8b9a0:	d9800415 	stw	r6,16(sp)
   8b9a4:	008c0f00 	call	8c0f0 <__pack_d>
   8b9a8:	dfc01217 	ldw	ra,72(sp)
   8b9ac:	dcc01117 	ldw	r19,68(sp)
   8b9b0:	dc801017 	ldw	r18,64(sp)
   8b9b4:	dc400f17 	ldw	r17,60(sp)
   8b9b8:	dc000e17 	ldw	r16,56(sp)
   8b9bc:	dec01304 	addi	sp,sp,76
   8b9c0:	f800283a 	ret
   8b9c4:	00803fc4 	movi	r2,255
   8b9c8:	7090703a 	and	r8,r14,r2
   8b9cc:	00802004 	movi	r2,128
   8b9d0:	0007883a 	mov	r3,zero
   8b9d4:	0013883a 	mov	r9,zero
   8b9d8:	40800d26 	beq	r8,r2,8ba10 <__divdf3+0x204>
   8b9dc:	dbc00815 	stw	r15,32(sp)
   8b9e0:	db800715 	stw	r14,28(sp)
   8b9e4:	003fab06 	br	8b894 <__divdf3+0x88>
   8b9e8:	343fc92e 	bgeu	r6,r16,8b910 <__divdf3+0x104>
   8b9ec:	3185883a 	add	r2,r6,r6
   8b9f0:	1189803a 	cmpltu	r4,r2,r6
   8b9f4:	39c7883a 	add	r3,r7,r7
   8b9f8:	20c9883a 	add	r4,r4,r3
   8b9fc:	297fffc4 	addi	r5,r5,-1
   8ba00:	100d883a 	mov	r6,r2
   8ba04:	200f883a 	mov	r7,r4
   8ba08:	d9400615 	stw	r5,24(sp)
   8ba0c:	003fc006 	br	8b910 <__divdf3+0x104>
   8ba10:	483ff21e 	bne	r9,zero,8b9dc <__divdf3+0x1d0>
   8ba14:	01004004 	movi	r4,256
   8ba18:	7104703a 	and	r2,r14,r4
   8ba1c:	10c4b03a 	or	r2,r2,r3
   8ba20:	103fee1e 	bne	r2,zero,8b9dc <__divdf3+0x1d0>
   8ba24:	31c4b03a 	or	r2,r6,r7
   8ba28:	103fec26 	beq	r2,zero,8b9dc <__divdf3+0x1d0>
   8ba2c:	7205883a 	add	r2,r14,r8
   8ba30:	1391803a 	cmpltu	r8,r2,r14
   8ba34:	43d1883a 	add	r8,r8,r15
   8ba38:	013fc004 	movi	r4,-256
   8ba3c:	111c703a 	and	r14,r2,r4
   8ba40:	401f883a 	mov	r15,r8
   8ba44:	003fe506 	br	8b9dc <__divdf3+0x1d0>
   8ba48:	8009883a 	mov	r4,r16
   8ba4c:	003f9206 	br	8b898 <__divdf3+0x8c>
   8ba50:	9809883a 	mov	r4,r19
   8ba54:	d8000715 	stw	zero,28(sp)
   8ba58:	d8000815 	stw	zero,32(sp)
   8ba5c:	d8000615 	stw	zero,24(sp)
   8ba60:	003f8d06 	br	8b898 <__divdf3+0x8c>

0008ba64 <__eqdf2>:
   8ba64:	deffef04 	addi	sp,sp,-68
   8ba68:	dc400f15 	stw	r17,60(sp)
   8ba6c:	dc400404 	addi	r17,sp,16
   8ba70:	2005883a 	mov	r2,r4
   8ba74:	2807883a 	mov	r3,r5
   8ba78:	dc000e15 	stw	r16,56(sp)
   8ba7c:	d809883a 	mov	r4,sp
   8ba80:	880b883a 	mov	r5,r17
   8ba84:	dc000904 	addi	r16,sp,36
   8ba88:	d8c00115 	stw	r3,4(sp)
   8ba8c:	d8800015 	stw	r2,0(sp)
   8ba90:	d9800215 	stw	r6,8(sp)
   8ba94:	dfc01015 	stw	ra,64(sp)
   8ba98:	d9c00315 	stw	r7,12(sp)
   8ba9c:	008c4040 	call	8c404 <__unpack_d>
   8baa0:	d9000204 	addi	r4,sp,8
   8baa4:	800b883a 	mov	r5,r16
   8baa8:	008c4040 	call	8c404 <__unpack_d>
   8baac:	d8800417 	ldw	r2,16(sp)
   8bab0:	00c00044 	movi	r3,1
   8bab4:	180d883a 	mov	r6,r3
   8bab8:	1880062e 	bgeu	r3,r2,8bad4 <__eqdf2+0x70>
   8babc:	d8800917 	ldw	r2,36(sp)
   8bac0:	8809883a 	mov	r4,r17
   8bac4:	800b883a 	mov	r5,r16
   8bac8:	1880022e 	bgeu	r3,r2,8bad4 <__eqdf2+0x70>
   8bacc:	008c53c0 	call	8c53c <__fpcmp_parts_d>
   8bad0:	100d883a 	mov	r6,r2
   8bad4:	3005883a 	mov	r2,r6
   8bad8:	dfc01017 	ldw	ra,64(sp)
   8badc:	dc400f17 	ldw	r17,60(sp)
   8bae0:	dc000e17 	ldw	r16,56(sp)
   8bae4:	dec01104 	addi	sp,sp,68
   8bae8:	f800283a 	ret

0008baec <__nedf2>:
   8baec:	deffef04 	addi	sp,sp,-68
   8baf0:	dc400f15 	stw	r17,60(sp)
   8baf4:	dc400404 	addi	r17,sp,16
   8baf8:	2005883a 	mov	r2,r4
   8bafc:	2807883a 	mov	r3,r5
   8bb00:	dc000e15 	stw	r16,56(sp)
   8bb04:	d809883a 	mov	r4,sp
   8bb08:	880b883a 	mov	r5,r17
   8bb0c:	dc000904 	addi	r16,sp,36
   8bb10:	d8c00115 	stw	r3,4(sp)
   8bb14:	d8800015 	stw	r2,0(sp)
   8bb18:	d9800215 	stw	r6,8(sp)
   8bb1c:	dfc01015 	stw	ra,64(sp)
   8bb20:	d9c00315 	stw	r7,12(sp)
   8bb24:	008c4040 	call	8c404 <__unpack_d>
   8bb28:	d9000204 	addi	r4,sp,8
   8bb2c:	800b883a 	mov	r5,r16
   8bb30:	008c4040 	call	8c404 <__unpack_d>
   8bb34:	d8800417 	ldw	r2,16(sp)
   8bb38:	00c00044 	movi	r3,1
   8bb3c:	180d883a 	mov	r6,r3
   8bb40:	1880062e 	bgeu	r3,r2,8bb5c <__nedf2+0x70>
   8bb44:	d8800917 	ldw	r2,36(sp)
   8bb48:	8809883a 	mov	r4,r17
   8bb4c:	800b883a 	mov	r5,r16
   8bb50:	1880022e 	bgeu	r3,r2,8bb5c <__nedf2+0x70>
   8bb54:	008c53c0 	call	8c53c <__fpcmp_parts_d>
   8bb58:	100d883a 	mov	r6,r2
   8bb5c:	3005883a 	mov	r2,r6
   8bb60:	dfc01017 	ldw	ra,64(sp)
   8bb64:	dc400f17 	ldw	r17,60(sp)
   8bb68:	dc000e17 	ldw	r16,56(sp)
   8bb6c:	dec01104 	addi	sp,sp,68
   8bb70:	f800283a 	ret

0008bb74 <__gtdf2>:
   8bb74:	deffef04 	addi	sp,sp,-68
   8bb78:	dc400f15 	stw	r17,60(sp)
   8bb7c:	dc400404 	addi	r17,sp,16
   8bb80:	2005883a 	mov	r2,r4
   8bb84:	2807883a 	mov	r3,r5
   8bb88:	dc000e15 	stw	r16,56(sp)
   8bb8c:	d809883a 	mov	r4,sp
   8bb90:	880b883a 	mov	r5,r17
   8bb94:	dc000904 	addi	r16,sp,36
   8bb98:	d8c00115 	stw	r3,4(sp)
   8bb9c:	d8800015 	stw	r2,0(sp)
   8bba0:	d9800215 	stw	r6,8(sp)
   8bba4:	dfc01015 	stw	ra,64(sp)
   8bba8:	d9c00315 	stw	r7,12(sp)
   8bbac:	008c4040 	call	8c404 <__unpack_d>
   8bbb0:	d9000204 	addi	r4,sp,8
   8bbb4:	800b883a 	mov	r5,r16
   8bbb8:	008c4040 	call	8c404 <__unpack_d>
   8bbbc:	d8800417 	ldw	r2,16(sp)
   8bbc0:	00c00044 	movi	r3,1
   8bbc4:	01bfffc4 	movi	r6,-1
   8bbc8:	1880062e 	bgeu	r3,r2,8bbe4 <__gtdf2+0x70>
   8bbcc:	d8800917 	ldw	r2,36(sp)
   8bbd0:	8809883a 	mov	r4,r17
   8bbd4:	800b883a 	mov	r5,r16
   8bbd8:	1880022e 	bgeu	r3,r2,8bbe4 <__gtdf2+0x70>
   8bbdc:	008c53c0 	call	8c53c <__fpcmp_parts_d>
   8bbe0:	100d883a 	mov	r6,r2
   8bbe4:	3005883a 	mov	r2,r6
   8bbe8:	dfc01017 	ldw	ra,64(sp)
   8bbec:	dc400f17 	ldw	r17,60(sp)
   8bbf0:	dc000e17 	ldw	r16,56(sp)
   8bbf4:	dec01104 	addi	sp,sp,68
   8bbf8:	f800283a 	ret

0008bbfc <__gedf2>:
   8bbfc:	deffef04 	addi	sp,sp,-68
   8bc00:	dc400f15 	stw	r17,60(sp)
   8bc04:	dc400404 	addi	r17,sp,16
   8bc08:	2005883a 	mov	r2,r4
   8bc0c:	2807883a 	mov	r3,r5
   8bc10:	dc000e15 	stw	r16,56(sp)
   8bc14:	d809883a 	mov	r4,sp
   8bc18:	880b883a 	mov	r5,r17
   8bc1c:	dc000904 	addi	r16,sp,36
   8bc20:	d8c00115 	stw	r3,4(sp)
   8bc24:	d8800015 	stw	r2,0(sp)
   8bc28:	d9800215 	stw	r6,8(sp)
   8bc2c:	dfc01015 	stw	ra,64(sp)
   8bc30:	d9c00315 	stw	r7,12(sp)
   8bc34:	008c4040 	call	8c404 <__unpack_d>
   8bc38:	d9000204 	addi	r4,sp,8
   8bc3c:	800b883a 	mov	r5,r16
   8bc40:	008c4040 	call	8c404 <__unpack_d>
   8bc44:	d8800417 	ldw	r2,16(sp)
   8bc48:	00c00044 	movi	r3,1
   8bc4c:	01bfffc4 	movi	r6,-1
   8bc50:	1880062e 	bgeu	r3,r2,8bc6c <__gedf2+0x70>
   8bc54:	d8800917 	ldw	r2,36(sp)
   8bc58:	8809883a 	mov	r4,r17
   8bc5c:	800b883a 	mov	r5,r16
   8bc60:	1880022e 	bgeu	r3,r2,8bc6c <__gedf2+0x70>
   8bc64:	008c53c0 	call	8c53c <__fpcmp_parts_d>
   8bc68:	100d883a 	mov	r6,r2
   8bc6c:	3005883a 	mov	r2,r6
   8bc70:	dfc01017 	ldw	ra,64(sp)
   8bc74:	dc400f17 	ldw	r17,60(sp)
   8bc78:	dc000e17 	ldw	r16,56(sp)
   8bc7c:	dec01104 	addi	sp,sp,68
   8bc80:	f800283a 	ret

0008bc84 <__ltdf2>:
   8bc84:	deffef04 	addi	sp,sp,-68
   8bc88:	dc400f15 	stw	r17,60(sp)
   8bc8c:	dc400404 	addi	r17,sp,16
   8bc90:	2005883a 	mov	r2,r4
   8bc94:	2807883a 	mov	r3,r5
   8bc98:	dc000e15 	stw	r16,56(sp)
   8bc9c:	d809883a 	mov	r4,sp
   8bca0:	880b883a 	mov	r5,r17
   8bca4:	dc000904 	addi	r16,sp,36
   8bca8:	d8c00115 	stw	r3,4(sp)
   8bcac:	d8800015 	stw	r2,0(sp)
   8bcb0:	d9800215 	stw	r6,8(sp)
   8bcb4:	dfc01015 	stw	ra,64(sp)
   8bcb8:	d9c00315 	stw	r7,12(sp)
   8bcbc:	008c4040 	call	8c404 <__unpack_d>
   8bcc0:	d9000204 	addi	r4,sp,8
   8bcc4:	800b883a 	mov	r5,r16
   8bcc8:	008c4040 	call	8c404 <__unpack_d>
   8bccc:	d8800417 	ldw	r2,16(sp)
   8bcd0:	00c00044 	movi	r3,1
   8bcd4:	180d883a 	mov	r6,r3
   8bcd8:	1880062e 	bgeu	r3,r2,8bcf4 <__ltdf2+0x70>
   8bcdc:	d8800917 	ldw	r2,36(sp)
   8bce0:	8809883a 	mov	r4,r17
   8bce4:	800b883a 	mov	r5,r16
   8bce8:	1880022e 	bgeu	r3,r2,8bcf4 <__ltdf2+0x70>
   8bcec:	008c53c0 	call	8c53c <__fpcmp_parts_d>
   8bcf0:	100d883a 	mov	r6,r2
   8bcf4:	3005883a 	mov	r2,r6
   8bcf8:	dfc01017 	ldw	ra,64(sp)
   8bcfc:	dc400f17 	ldw	r17,60(sp)
   8bd00:	dc000e17 	ldw	r16,56(sp)
   8bd04:	dec01104 	addi	sp,sp,68
   8bd08:	f800283a 	ret

0008bd0c <__floatsidf>:
   8bd0c:	2006d7fa 	srli	r3,r4,31
   8bd10:	defff604 	addi	sp,sp,-40
   8bd14:	008000c4 	movi	r2,3
   8bd18:	dfc00915 	stw	ra,36(sp)
   8bd1c:	dcc00815 	stw	r19,32(sp)
   8bd20:	dc800715 	stw	r18,28(sp)
   8bd24:	dc400615 	stw	r17,24(sp)
   8bd28:	dc000515 	stw	r16,20(sp)
   8bd2c:	d8800015 	stw	r2,0(sp)
   8bd30:	d8c00115 	stw	r3,4(sp)
   8bd34:	20000f1e 	bne	r4,zero,8bd74 <__floatsidf+0x68>
   8bd38:	00800084 	movi	r2,2
   8bd3c:	d8800015 	stw	r2,0(sp)
   8bd40:	d809883a 	mov	r4,sp
   8bd44:	008c0f00 	call	8c0f0 <__pack_d>
   8bd48:	1009883a 	mov	r4,r2
   8bd4c:	180b883a 	mov	r5,r3
   8bd50:	2005883a 	mov	r2,r4
   8bd54:	2807883a 	mov	r3,r5
   8bd58:	dfc00917 	ldw	ra,36(sp)
   8bd5c:	dcc00817 	ldw	r19,32(sp)
   8bd60:	dc800717 	ldw	r18,28(sp)
   8bd64:	dc400617 	ldw	r17,24(sp)
   8bd68:	dc000517 	ldw	r16,20(sp)
   8bd6c:	dec00a04 	addi	sp,sp,40
   8bd70:	f800283a 	ret
   8bd74:	00800f04 	movi	r2,60
   8bd78:	1807003a 	cmpeq	r3,r3,zero
   8bd7c:	d8800215 	stw	r2,8(sp)
   8bd80:	18001126 	beq	r3,zero,8bdc8 <__floatsidf+0xbc>
   8bd84:	0027883a 	mov	r19,zero
   8bd88:	2025883a 	mov	r18,r4
   8bd8c:	d9000315 	stw	r4,12(sp)
   8bd90:	dcc00415 	stw	r19,16(sp)
   8bd94:	008c0700 	call	8c070 <__clzsi2>
   8bd98:	11000744 	addi	r4,r2,29
   8bd9c:	013fe80e 	bge	zero,r4,8bd40 <__floatsidf+0x34>
   8bda0:	10bfff44 	addi	r2,r2,-3
   8bda4:	10000c16 	blt	r2,zero,8bdd8 <__floatsidf+0xcc>
   8bda8:	90a2983a 	sll	r17,r18,r2
   8bdac:	0021883a 	mov	r16,zero
   8bdb0:	d8800217 	ldw	r2,8(sp)
   8bdb4:	dc400415 	stw	r17,16(sp)
   8bdb8:	dc000315 	stw	r16,12(sp)
   8bdbc:	1105c83a 	sub	r2,r2,r4
   8bdc0:	d8800215 	stw	r2,8(sp)
   8bdc4:	003fde06 	br	8bd40 <__floatsidf+0x34>
   8bdc8:	00a00034 	movhi	r2,32768
   8bdcc:	20800a26 	beq	r4,r2,8bdf8 <__floatsidf+0xec>
   8bdd0:	0109c83a 	sub	r4,zero,r4
   8bdd4:	003feb06 	br	8bd84 <__floatsidf+0x78>
   8bdd8:	9006d07a 	srli	r3,r18,1
   8bddc:	008007c4 	movi	r2,31
   8bde0:	1105c83a 	sub	r2,r2,r4
   8bde4:	1886d83a 	srl	r3,r3,r2
   8bde8:	9922983a 	sll	r17,r19,r4
   8bdec:	9120983a 	sll	r16,r18,r4
   8bdf0:	1c62b03a 	or	r17,r3,r17
   8bdf4:	003fee06 	br	8bdb0 <__floatsidf+0xa4>
   8bdf8:	0009883a 	mov	r4,zero
   8bdfc:	01707834 	movhi	r5,49632
   8be00:	003fd306 	br	8bd50 <__floatsidf+0x44>

0008be04 <__fixdfsi>:
   8be04:	defff804 	addi	sp,sp,-32
   8be08:	2005883a 	mov	r2,r4
   8be0c:	2807883a 	mov	r3,r5
   8be10:	d809883a 	mov	r4,sp
   8be14:	d9400204 	addi	r5,sp,8
   8be18:	d8c00115 	stw	r3,4(sp)
   8be1c:	d8800015 	stw	r2,0(sp)
   8be20:	dfc00715 	stw	ra,28(sp)
   8be24:	008c4040 	call	8c404 <__unpack_d>
   8be28:	d8c00217 	ldw	r3,8(sp)
   8be2c:	00800084 	movi	r2,2
   8be30:	1880051e 	bne	r3,r2,8be48 <__fixdfsi+0x44>
   8be34:	0007883a 	mov	r3,zero
   8be38:	1805883a 	mov	r2,r3
   8be3c:	dfc00717 	ldw	ra,28(sp)
   8be40:	dec00804 	addi	sp,sp,32
   8be44:	f800283a 	ret
   8be48:	00800044 	movi	r2,1
   8be4c:	10fff92e 	bgeu	r2,r3,8be34 <__fixdfsi+0x30>
   8be50:	00800104 	movi	r2,4
   8be54:	18800426 	beq	r3,r2,8be68 <__fixdfsi+0x64>
   8be58:	d8c00417 	ldw	r3,16(sp)
   8be5c:	183ff516 	blt	r3,zero,8be34 <__fixdfsi+0x30>
   8be60:	00800784 	movi	r2,30
   8be64:	10c0080e 	bge	r2,r3,8be88 <__fixdfsi+0x84>
   8be68:	d8800317 	ldw	r2,12(sp)
   8be6c:	1000121e 	bne	r2,zero,8beb8 <__fixdfsi+0xb4>
   8be70:	00e00034 	movhi	r3,32768
   8be74:	18ffffc4 	addi	r3,r3,-1
   8be78:	1805883a 	mov	r2,r3
   8be7c:	dfc00717 	ldw	ra,28(sp)
   8be80:	dec00804 	addi	sp,sp,32
   8be84:	f800283a 	ret
   8be88:	00800f04 	movi	r2,60
   8be8c:	10d1c83a 	sub	r8,r2,r3
   8be90:	40bff804 	addi	r2,r8,-32
   8be94:	d9800517 	ldw	r6,20(sp)
   8be98:	d9c00617 	ldw	r7,24(sp)
   8be9c:	10000816 	blt	r2,zero,8bec0 <__fixdfsi+0xbc>
   8bea0:	3888d83a 	srl	r4,r7,r2
   8bea4:	d8800317 	ldw	r2,12(sp)
   8bea8:	2007883a 	mov	r3,r4
   8beac:	103fe226 	beq	r2,zero,8be38 <__fixdfsi+0x34>
   8beb0:	0107c83a 	sub	r3,zero,r4
   8beb4:	003fe006 	br	8be38 <__fixdfsi+0x34>
   8beb8:	00e00034 	movhi	r3,32768
   8bebc:	003fde06 	br	8be38 <__fixdfsi+0x34>
   8bec0:	39c7883a 	add	r3,r7,r7
   8bec4:	008007c4 	movi	r2,31
   8bec8:	1205c83a 	sub	r2,r2,r8
   8becc:	1886983a 	sll	r3,r3,r2
   8bed0:	3208d83a 	srl	r4,r6,r8
   8bed4:	1908b03a 	or	r4,r3,r4
   8bed8:	003ff206 	br	8bea4 <__fixdfsi+0xa0>

0008bedc <__floatunsidf>:
   8bedc:	defff204 	addi	sp,sp,-56
   8bee0:	dfc00d15 	stw	ra,52(sp)
   8bee4:	ddc00c15 	stw	r23,48(sp)
   8bee8:	dd800b15 	stw	r22,44(sp)
   8beec:	dd400a15 	stw	r21,40(sp)
   8bef0:	dd000915 	stw	r20,36(sp)
   8bef4:	dcc00815 	stw	r19,32(sp)
   8bef8:	dc800715 	stw	r18,28(sp)
   8befc:	dc400615 	stw	r17,24(sp)
   8bf00:	dc000515 	stw	r16,20(sp)
   8bf04:	d8000115 	stw	zero,4(sp)
   8bf08:	20000f1e 	bne	r4,zero,8bf48 <__floatunsidf+0x6c>
   8bf0c:	00800084 	movi	r2,2
   8bf10:	d8800015 	stw	r2,0(sp)
   8bf14:	d809883a 	mov	r4,sp
   8bf18:	008c0f00 	call	8c0f0 <__pack_d>
   8bf1c:	dfc00d17 	ldw	ra,52(sp)
   8bf20:	ddc00c17 	ldw	r23,48(sp)
   8bf24:	dd800b17 	ldw	r22,44(sp)
   8bf28:	dd400a17 	ldw	r21,40(sp)
   8bf2c:	dd000917 	ldw	r20,36(sp)
   8bf30:	dcc00817 	ldw	r19,32(sp)
   8bf34:	dc800717 	ldw	r18,28(sp)
   8bf38:	dc400617 	ldw	r17,24(sp)
   8bf3c:	dc000517 	ldw	r16,20(sp)
   8bf40:	dec00e04 	addi	sp,sp,56
   8bf44:	f800283a 	ret
   8bf48:	008000c4 	movi	r2,3
   8bf4c:	00c00f04 	movi	r3,60
   8bf50:	002f883a 	mov	r23,zero
   8bf54:	202d883a 	mov	r22,r4
   8bf58:	d8800015 	stw	r2,0(sp)
   8bf5c:	d8c00215 	stw	r3,8(sp)
   8bf60:	d9000315 	stw	r4,12(sp)
   8bf64:	ddc00415 	stw	r23,16(sp)
   8bf68:	008c0700 	call	8c070 <__clzsi2>
   8bf6c:	12400744 	addi	r9,r2,29
   8bf70:	48000b16 	blt	r9,zero,8bfa0 <__floatunsidf+0xc4>
   8bf74:	483fe726 	beq	r9,zero,8bf14 <__floatunsidf+0x38>
   8bf78:	10bfff44 	addi	r2,r2,-3
   8bf7c:	10002e16 	blt	r2,zero,8c038 <__floatunsidf+0x15c>
   8bf80:	b0a2983a 	sll	r17,r22,r2
   8bf84:	0021883a 	mov	r16,zero
   8bf88:	d8800217 	ldw	r2,8(sp)
   8bf8c:	dc400415 	stw	r17,16(sp)
   8bf90:	dc000315 	stw	r16,12(sp)
   8bf94:	1245c83a 	sub	r2,r2,r9
   8bf98:	d8800215 	stw	r2,8(sp)
   8bf9c:	003fdd06 	br	8bf14 <__floatunsidf+0x38>
   8bfa0:	0255c83a 	sub	r10,zero,r9
   8bfa4:	51bff804 	addi	r6,r10,-32
   8bfa8:	30001b16 	blt	r6,zero,8c018 <__floatunsidf+0x13c>
   8bfac:	b9a8d83a 	srl	r20,r23,r6
   8bfb0:	002b883a 	mov	r21,zero
   8bfb4:	000f883a 	mov	r7,zero
   8bfb8:	01000044 	movi	r4,1
   8bfbc:	0011883a 	mov	r8,zero
   8bfc0:	30002516 	blt	r6,zero,8c058 <__floatunsidf+0x17c>
   8bfc4:	21a6983a 	sll	r19,r4,r6
   8bfc8:	0025883a 	mov	r18,zero
   8bfcc:	00bfffc4 	movi	r2,-1
   8bfd0:	9089883a 	add	r4,r18,r2
   8bfd4:	988b883a 	add	r5,r19,r2
   8bfd8:	248d803a 	cmpltu	r6,r4,r18
   8bfdc:	314b883a 	add	r5,r6,r5
   8bfe0:	b104703a 	and	r2,r22,r4
   8bfe4:	b946703a 	and	r3,r23,r5
   8bfe8:	10c4b03a 	or	r2,r2,r3
   8bfec:	10000226 	beq	r2,zero,8bff8 <__floatunsidf+0x11c>
   8bff0:	01c00044 	movi	r7,1
   8bff4:	0011883a 	mov	r8,zero
   8bff8:	d9000217 	ldw	r4,8(sp)
   8bffc:	a1c4b03a 	or	r2,r20,r7
   8c000:	aa06b03a 	or	r3,r21,r8
   8c004:	2249c83a 	sub	r4,r4,r9
   8c008:	d8c00415 	stw	r3,16(sp)
   8c00c:	d9000215 	stw	r4,8(sp)
   8c010:	d8800315 	stw	r2,12(sp)
   8c014:	003fbf06 	br	8bf14 <__floatunsidf+0x38>
   8c018:	bdc7883a 	add	r3,r23,r23
   8c01c:	008007c4 	movi	r2,31
   8c020:	1285c83a 	sub	r2,r2,r10
   8c024:	1886983a 	sll	r3,r3,r2
   8c028:	b2a8d83a 	srl	r20,r22,r10
   8c02c:	baaad83a 	srl	r21,r23,r10
   8c030:	1d28b03a 	or	r20,r3,r20
   8c034:	003fdf06 	br	8bfb4 <__floatunsidf+0xd8>
   8c038:	b006d07a 	srli	r3,r22,1
   8c03c:	008007c4 	movi	r2,31
   8c040:	1245c83a 	sub	r2,r2,r9
   8c044:	1886d83a 	srl	r3,r3,r2
   8c048:	ba62983a 	sll	r17,r23,r9
   8c04c:	b260983a 	sll	r16,r22,r9
   8c050:	1c62b03a 	or	r17,r3,r17
   8c054:	003fcc06 	br	8bf88 <__floatunsidf+0xac>
   8c058:	2006d07a 	srli	r3,r4,1
   8c05c:	008007c4 	movi	r2,31
   8c060:	1285c83a 	sub	r2,r2,r10
   8c064:	18a6d83a 	srl	r19,r3,r2
   8c068:	22a4983a 	sll	r18,r4,r10
   8c06c:	003fd706 	br	8bfcc <__floatunsidf+0xf0>

0008c070 <__clzsi2>:
   8c070:	00bfffd4 	movui	r2,65535
   8c074:	11000e36 	bltu	r2,r4,8c0b0 <__clzsi2+0x40>
   8c078:	00803fc4 	movi	r2,255
   8c07c:	01400204 	movi	r5,8
   8c080:	0007883a 	mov	r3,zero
   8c084:	11001036 	bltu	r2,r4,8c0c8 <__clzsi2+0x58>
   8c088:	000b883a 	mov	r5,zero
   8c08c:	20c6d83a 	srl	r3,r4,r3
   8c090:	008002b4 	movhi	r2,10
   8c094:	10a59004 	addi	r2,r2,-27072
   8c098:	1887883a 	add	r3,r3,r2
   8c09c:	18800003 	ldbu	r2,0(r3)
   8c0a0:	00c00804 	movi	r3,32
   8c0a4:	2885883a 	add	r2,r5,r2
   8c0a8:	1885c83a 	sub	r2,r3,r2
   8c0ac:	f800283a 	ret
   8c0b0:	01400404 	movi	r5,16
   8c0b4:	00804034 	movhi	r2,256
   8c0b8:	10bfffc4 	addi	r2,r2,-1
   8c0bc:	2807883a 	mov	r3,r5
   8c0c0:	113ff22e 	bgeu	r2,r4,8c08c <__clzsi2+0x1c>
   8c0c4:	01400604 	movi	r5,24
   8c0c8:	2807883a 	mov	r3,r5
   8c0cc:	20c6d83a 	srl	r3,r4,r3
   8c0d0:	008002b4 	movhi	r2,10
   8c0d4:	10a59004 	addi	r2,r2,-27072
   8c0d8:	1887883a 	add	r3,r3,r2
   8c0dc:	18800003 	ldbu	r2,0(r3)
   8c0e0:	00c00804 	movi	r3,32
   8c0e4:	2885883a 	add	r2,r5,r2
   8c0e8:	1885c83a 	sub	r2,r3,r2
   8c0ec:	f800283a 	ret

0008c0f0 <__pack_d>:
   8c0f0:	20c00017 	ldw	r3,0(r4)
   8c0f4:	defffd04 	addi	sp,sp,-12
   8c0f8:	dc000015 	stw	r16,0(sp)
   8c0fc:	dc800215 	stw	r18,8(sp)
   8c100:	dc400115 	stw	r17,4(sp)
   8c104:	00800044 	movi	r2,1
   8c108:	22000317 	ldw	r8,12(r4)
   8c10c:	001f883a 	mov	r15,zero
   8c110:	22400417 	ldw	r9,16(r4)
   8c114:	24000117 	ldw	r16,4(r4)
   8c118:	10c0552e 	bgeu	r2,r3,8c270 <__pack_d+0x180>
   8c11c:	00800104 	movi	r2,4
   8c120:	18804f26 	beq	r3,r2,8c260 <__pack_d+0x170>
   8c124:	00800084 	movi	r2,2
   8c128:	18800226 	beq	r3,r2,8c134 <__pack_d+0x44>
   8c12c:	4244b03a 	or	r2,r8,r9
   8c130:	10001a1e 	bne	r2,zero,8c19c <__pack_d+0xac>
   8c134:	000d883a 	mov	r6,zero
   8c138:	000f883a 	mov	r7,zero
   8c13c:	0011883a 	mov	r8,zero
   8c140:	00800434 	movhi	r2,16
   8c144:	10bfffc4 	addi	r2,r2,-1
   8c148:	301d883a 	mov	r14,r6
   8c14c:	3884703a 	and	r2,r7,r2
   8c150:	400a953a 	slli	r5,r8,20
   8c154:	79bffc2c 	andhi	r6,r15,65520
   8c158:	308cb03a 	or	r6,r6,r2
   8c15c:	00e00434 	movhi	r3,32784
   8c160:	18ffffc4 	addi	r3,r3,-1
   8c164:	800497fa 	slli	r2,r16,31
   8c168:	30c6703a 	and	r3,r6,r3
   8c16c:	1946b03a 	or	r3,r3,r5
   8c170:	01600034 	movhi	r5,32768
   8c174:	297fffc4 	addi	r5,r5,-1
   8c178:	194a703a 	and	r5,r3,r5
   8c17c:	288ab03a 	or	r5,r5,r2
   8c180:	2807883a 	mov	r3,r5
   8c184:	7005883a 	mov	r2,r14
   8c188:	dc800217 	ldw	r18,8(sp)
   8c18c:	dc400117 	ldw	r17,4(sp)
   8c190:	dc000017 	ldw	r16,0(sp)
   8c194:	dec00304 	addi	sp,sp,12
   8c198:	f800283a 	ret
   8c19c:	21000217 	ldw	r4,8(r4)
   8c1a0:	00bf0084 	movi	r2,-1022
   8c1a4:	20803f16 	blt	r4,r2,8c2a4 <__pack_d+0x1b4>
   8c1a8:	0080ffc4 	movi	r2,1023
   8c1ac:	11002c16 	blt	r2,r4,8c260 <__pack_d+0x170>
   8c1b0:	00803fc4 	movi	r2,255
   8c1b4:	408c703a 	and	r6,r8,r2
   8c1b8:	00802004 	movi	r2,128
   8c1bc:	0007883a 	mov	r3,zero
   8c1c0:	000f883a 	mov	r7,zero
   8c1c4:	2280ffc4 	addi	r10,r4,1023
   8c1c8:	30801e26 	beq	r6,r2,8c244 <__pack_d+0x154>
   8c1cc:	00801fc4 	movi	r2,127
   8c1d0:	4089883a 	add	r4,r8,r2
   8c1d4:	220d803a 	cmpltu	r6,r4,r8
   8c1d8:	324d883a 	add	r6,r6,r9
   8c1dc:	2011883a 	mov	r8,r4
   8c1e0:	3013883a 	mov	r9,r6
   8c1e4:	00880034 	movhi	r2,8192
   8c1e8:	10bfffc4 	addi	r2,r2,-1
   8c1ec:	12400d36 	bltu	r2,r9,8c224 <__pack_d+0x134>
   8c1f0:	4804963a 	slli	r2,r9,24
   8c1f4:	400cd23a 	srli	r6,r8,8
   8c1f8:	480ed23a 	srli	r7,r9,8
   8c1fc:	013fffc4 	movi	r4,-1
   8c200:	118cb03a 	or	r6,r2,r6
   8c204:	01400434 	movhi	r5,16
   8c208:	297fffc4 	addi	r5,r5,-1
   8c20c:	3104703a 	and	r2,r6,r4
   8c210:	3946703a 	and	r3,r7,r5
   8c214:	5201ffcc 	andi	r8,r10,2047
   8c218:	100d883a 	mov	r6,r2
   8c21c:	180f883a 	mov	r7,r3
   8c220:	003fc706 	br	8c140 <__pack_d+0x50>
   8c224:	480897fa 	slli	r4,r9,31
   8c228:	4004d07a 	srli	r2,r8,1
   8c22c:	4806d07a 	srli	r3,r9,1
   8c230:	52800044 	addi	r10,r10,1
   8c234:	2084b03a 	or	r2,r4,r2
   8c238:	1011883a 	mov	r8,r2
   8c23c:	1813883a 	mov	r9,r3
   8c240:	003feb06 	br	8c1f0 <__pack_d+0x100>
   8c244:	383fe11e 	bne	r7,zero,8c1cc <__pack_d+0xdc>
   8c248:	01004004 	movi	r4,256
   8c24c:	4104703a 	and	r2,r8,r4
   8c250:	10c4b03a 	or	r2,r2,r3
   8c254:	103fe326 	beq	r2,zero,8c1e4 <__pack_d+0xf4>
   8c258:	3005883a 	mov	r2,r6
   8c25c:	003fdc06 	br	8c1d0 <__pack_d+0xe0>
   8c260:	000d883a 	mov	r6,zero
   8c264:	000f883a 	mov	r7,zero
   8c268:	0201ffc4 	movi	r8,2047
   8c26c:	003fb406 	br	8c140 <__pack_d+0x50>
   8c270:	0005883a 	mov	r2,zero
   8c274:	00c00234 	movhi	r3,8
   8c278:	408cb03a 	or	r6,r8,r2
   8c27c:	48ceb03a 	or	r7,r9,r3
   8c280:	013fffc4 	movi	r4,-1
   8c284:	01400434 	movhi	r5,16
   8c288:	297fffc4 	addi	r5,r5,-1
   8c28c:	3104703a 	and	r2,r6,r4
   8c290:	3946703a 	and	r3,r7,r5
   8c294:	100d883a 	mov	r6,r2
   8c298:	180f883a 	mov	r7,r3
   8c29c:	0201ffc4 	movi	r8,2047
   8c2a0:	003fa706 	br	8c140 <__pack_d+0x50>
   8c2a4:	1109c83a 	sub	r4,r2,r4
   8c2a8:	00800e04 	movi	r2,56
   8c2ac:	11004316 	blt	r2,r4,8c3bc <__pack_d+0x2cc>
   8c2b0:	21fff804 	addi	r7,r4,-32
   8c2b4:	38004516 	blt	r7,zero,8c3cc <__pack_d+0x2dc>
   8c2b8:	49d8d83a 	srl	r12,r9,r7
   8c2bc:	001b883a 	mov	r13,zero
   8c2c0:	0023883a 	mov	r17,zero
   8c2c4:	01400044 	movi	r5,1
   8c2c8:	0025883a 	mov	r18,zero
   8c2cc:	38004716 	blt	r7,zero,8c3ec <__pack_d+0x2fc>
   8c2d0:	29d6983a 	sll	r11,r5,r7
   8c2d4:	0015883a 	mov	r10,zero
   8c2d8:	00bfffc4 	movi	r2,-1
   8c2dc:	5089883a 	add	r4,r10,r2
   8c2e0:	588b883a 	add	r5,r11,r2
   8c2e4:	228d803a 	cmpltu	r6,r4,r10
   8c2e8:	314b883a 	add	r5,r6,r5
   8c2ec:	4104703a 	and	r2,r8,r4
   8c2f0:	4946703a 	and	r3,r9,r5
   8c2f4:	10c4b03a 	or	r2,r2,r3
   8c2f8:	10000226 	beq	r2,zero,8c304 <__pack_d+0x214>
   8c2fc:	04400044 	movi	r17,1
   8c300:	0025883a 	mov	r18,zero
   8c304:	00803fc4 	movi	r2,255
   8c308:	644eb03a 	or	r7,r12,r17
   8c30c:	3892703a 	and	r9,r7,r2
   8c310:	00802004 	movi	r2,128
   8c314:	6c90b03a 	or	r8,r13,r18
   8c318:	0015883a 	mov	r10,zero
   8c31c:	48801626 	beq	r9,r2,8c378 <__pack_d+0x288>
   8c320:	01001fc4 	movi	r4,127
   8c324:	3905883a 	add	r2,r7,r4
   8c328:	11cd803a 	cmpltu	r6,r2,r7
   8c32c:	320d883a 	add	r6,r6,r8
   8c330:	100f883a 	mov	r7,r2
   8c334:	00840034 	movhi	r2,4096
   8c338:	10bfffc4 	addi	r2,r2,-1
   8c33c:	3011883a 	mov	r8,r6
   8c340:	0007883a 	mov	r3,zero
   8c344:	11801b36 	bltu	r2,r6,8c3b4 <__pack_d+0x2c4>
   8c348:	4004963a 	slli	r2,r8,24
   8c34c:	3808d23a 	srli	r4,r7,8
   8c350:	400ad23a 	srli	r5,r8,8
   8c354:	1813883a 	mov	r9,r3
   8c358:	1108b03a 	or	r4,r2,r4
   8c35c:	00bfffc4 	movi	r2,-1
   8c360:	00c00434 	movhi	r3,16
   8c364:	18ffffc4 	addi	r3,r3,-1
   8c368:	208c703a 	and	r6,r4,r2
   8c36c:	28ce703a 	and	r7,r5,r3
   8c370:	4a01ffcc 	andi	r8,r9,2047
   8c374:	003f7206 	br	8c140 <__pack_d+0x50>
   8c378:	503fe91e 	bne	r10,zero,8c320 <__pack_d+0x230>
   8c37c:	01004004 	movi	r4,256
   8c380:	3904703a 	and	r2,r7,r4
   8c384:	0007883a 	mov	r3,zero
   8c388:	10c4b03a 	or	r2,r2,r3
   8c38c:	10000626 	beq	r2,zero,8c3a8 <__pack_d+0x2b8>
   8c390:	3a45883a 	add	r2,r7,r9
   8c394:	11cd803a 	cmpltu	r6,r2,r7
   8c398:	320d883a 	add	r6,r6,r8
   8c39c:	100f883a 	mov	r7,r2
   8c3a0:	3011883a 	mov	r8,r6
   8c3a4:	0007883a 	mov	r3,zero
   8c3a8:	00840034 	movhi	r2,4096
   8c3ac:	10bfffc4 	addi	r2,r2,-1
   8c3b0:	123fe52e 	bgeu	r2,r8,8c348 <__pack_d+0x258>
   8c3b4:	00c00044 	movi	r3,1
   8c3b8:	003fe306 	br	8c348 <__pack_d+0x258>
   8c3bc:	0009883a 	mov	r4,zero
   8c3c0:	0013883a 	mov	r9,zero
   8c3c4:	000b883a 	mov	r5,zero
   8c3c8:	003fe406 	br	8c35c <__pack_d+0x26c>
   8c3cc:	4a47883a 	add	r3,r9,r9
   8c3d0:	008007c4 	movi	r2,31
   8c3d4:	1105c83a 	sub	r2,r2,r4
   8c3d8:	1886983a 	sll	r3,r3,r2
   8c3dc:	4118d83a 	srl	r12,r8,r4
   8c3e0:	491ad83a 	srl	r13,r9,r4
   8c3e4:	1b18b03a 	or	r12,r3,r12
   8c3e8:	003fb506 	br	8c2c0 <__pack_d+0x1d0>
   8c3ec:	2806d07a 	srli	r3,r5,1
   8c3f0:	008007c4 	movi	r2,31
   8c3f4:	1105c83a 	sub	r2,r2,r4
   8c3f8:	1896d83a 	srl	r11,r3,r2
   8c3fc:	2914983a 	sll	r10,r5,r4
   8c400:	003fb506 	br	8c2d8 <__pack_d+0x1e8>

0008c404 <__unpack_d>:
   8c404:	20c00117 	ldw	r3,4(r4)
   8c408:	22400017 	ldw	r9,0(r4)
   8c40c:	00800434 	movhi	r2,16
   8c410:	10bfffc4 	addi	r2,r2,-1
   8c414:	1808d53a 	srli	r4,r3,20
   8c418:	180cd7fa 	srli	r6,r3,31
   8c41c:	1894703a 	and	r10,r3,r2
   8c420:	2201ffcc 	andi	r8,r4,2047
   8c424:	281b883a 	mov	r13,r5
   8c428:	4817883a 	mov	r11,r9
   8c42c:	29800115 	stw	r6,4(r5)
   8c430:	5019883a 	mov	r12,r10
   8c434:	40001e1e 	bne	r8,zero,8c4b0 <__unpack_d+0xac>
   8c438:	4a84b03a 	or	r2,r9,r10
   8c43c:	10001926 	beq	r2,zero,8c4a4 <__unpack_d+0xa0>
   8c440:	4804d63a 	srli	r2,r9,24
   8c444:	500c923a 	slli	r6,r10,8
   8c448:	013f0084 	movi	r4,-1022
   8c44c:	00c40034 	movhi	r3,4096
   8c450:	18ffffc4 	addi	r3,r3,-1
   8c454:	118cb03a 	or	r6,r2,r6
   8c458:	008000c4 	movi	r2,3
   8c45c:	480a923a 	slli	r5,r9,8
   8c460:	68800015 	stw	r2,0(r13)
   8c464:	69000215 	stw	r4,8(r13)
   8c468:	19800b36 	bltu	r3,r6,8c498 <__unpack_d+0x94>
   8c46c:	200f883a 	mov	r7,r4
   8c470:	1811883a 	mov	r8,r3
   8c474:	2945883a 	add	r2,r5,r5
   8c478:	1149803a 	cmpltu	r4,r2,r5
   8c47c:	3187883a 	add	r3,r6,r6
   8c480:	20c9883a 	add	r4,r4,r3
   8c484:	100b883a 	mov	r5,r2
   8c488:	200d883a 	mov	r6,r4
   8c48c:	39ffffc4 	addi	r7,r7,-1
   8c490:	413ff82e 	bgeu	r8,r4,8c474 <__unpack_d+0x70>
   8c494:	69c00215 	stw	r7,8(r13)
   8c498:	69800415 	stw	r6,16(r13)
   8c49c:	69400315 	stw	r5,12(r13)
   8c4a0:	f800283a 	ret
   8c4a4:	00800084 	movi	r2,2
   8c4a8:	28800015 	stw	r2,0(r5)
   8c4ac:	f800283a 	ret
   8c4b0:	0081ffc4 	movi	r2,2047
   8c4b4:	40800f26 	beq	r8,r2,8c4f4 <__unpack_d+0xf0>
   8c4b8:	480cd63a 	srli	r6,r9,24
   8c4bc:	5006923a 	slli	r3,r10,8
   8c4c0:	4804923a 	slli	r2,r9,8
   8c4c4:	0009883a 	mov	r4,zero
   8c4c8:	30c6b03a 	or	r3,r6,r3
   8c4cc:	01440034 	movhi	r5,4096
   8c4d0:	110cb03a 	or	r6,r2,r4
   8c4d4:	423f0044 	addi	r8,r8,-1023
   8c4d8:	194eb03a 	or	r7,r3,r5
   8c4dc:	008000c4 	movi	r2,3
   8c4e0:	69c00415 	stw	r7,16(r13)
   8c4e4:	6a000215 	stw	r8,8(r13)
   8c4e8:	68800015 	stw	r2,0(r13)
   8c4ec:	69800315 	stw	r6,12(r13)
   8c4f0:	f800283a 	ret
   8c4f4:	4a84b03a 	or	r2,r9,r10
   8c4f8:	1000031e 	bne	r2,zero,8c508 <__unpack_d+0x104>
   8c4fc:	00800104 	movi	r2,4
   8c500:	28800015 	stw	r2,0(r5)
   8c504:	f800283a 	ret
   8c508:	0009883a 	mov	r4,zero
   8c50c:	01400234 	movhi	r5,8
   8c510:	4904703a 	and	r2,r9,r4
   8c514:	5146703a 	and	r3,r10,r5
   8c518:	10c4b03a 	or	r2,r2,r3
   8c51c:	10000526 	beq	r2,zero,8c534 <__unpack_d+0x130>
   8c520:	00800044 	movi	r2,1
   8c524:	68800015 	stw	r2,0(r13)
   8c528:	6b000415 	stw	r12,16(r13)
   8c52c:	6ac00315 	stw	r11,12(r13)
   8c530:	f800283a 	ret
   8c534:	68000015 	stw	zero,0(r13)
   8c538:	003ffb06 	br	8c528 <__unpack_d+0x124>

0008c53c <__fpcmp_parts_d>:
   8c53c:	21800017 	ldw	r6,0(r4)
   8c540:	00c00044 	movi	r3,1
   8c544:	19800a2e 	bgeu	r3,r6,8c570 <__fpcmp_parts_d+0x34>
   8c548:	28800017 	ldw	r2,0(r5)
   8c54c:	1880082e 	bgeu	r3,r2,8c570 <__fpcmp_parts_d+0x34>
   8c550:	00c00104 	movi	r3,4
   8c554:	30c02626 	beq	r6,r3,8c5f0 <__fpcmp_parts_d+0xb4>
   8c558:	10c02226 	beq	r2,r3,8c5e4 <__fpcmp_parts_d+0xa8>
   8c55c:	00c00084 	movi	r3,2
   8c560:	30c00526 	beq	r6,r3,8c578 <__fpcmp_parts_d+0x3c>
   8c564:	10c0071e 	bne	r2,r3,8c584 <__fpcmp_parts_d+0x48>
   8c568:	20800117 	ldw	r2,4(r4)
   8c56c:	1000091e 	bne	r2,zero,8c594 <__fpcmp_parts_d+0x58>
   8c570:	00800044 	movi	r2,1
   8c574:	f800283a 	ret
   8c578:	10c01a1e 	bne	r2,r3,8c5e4 <__fpcmp_parts_d+0xa8>
   8c57c:	0005883a 	mov	r2,zero
   8c580:	f800283a 	ret
   8c584:	22000117 	ldw	r8,4(r4)
   8c588:	28800117 	ldw	r2,4(r5)
   8c58c:	40800326 	beq	r8,r2,8c59c <__fpcmp_parts_d+0x60>
   8c590:	403ff726 	beq	r8,zero,8c570 <__fpcmp_parts_d+0x34>
   8c594:	00bfffc4 	movi	r2,-1
   8c598:	f800283a 	ret
   8c59c:	20c00217 	ldw	r3,8(r4)
   8c5a0:	28800217 	ldw	r2,8(r5)
   8c5a4:	10fffa16 	blt	r2,r3,8c590 <__fpcmp_parts_d+0x54>
   8c5a8:	18800916 	blt	r3,r2,8c5d0 <__fpcmp_parts_d+0x94>
   8c5ac:	21c00417 	ldw	r7,16(r4)
   8c5b0:	28c00417 	ldw	r3,16(r5)
   8c5b4:	21800317 	ldw	r6,12(r4)
   8c5b8:	28800317 	ldw	r2,12(r5)
   8c5bc:	19fff436 	bltu	r3,r7,8c590 <__fpcmp_parts_d+0x54>
   8c5c0:	38c00526 	beq	r7,r3,8c5d8 <__fpcmp_parts_d+0x9c>
   8c5c4:	38c00236 	bltu	r7,r3,8c5d0 <__fpcmp_parts_d+0x94>
   8c5c8:	19ffec1e 	bne	r3,r7,8c57c <__fpcmp_parts_d+0x40>
   8c5cc:	30bfeb2e 	bgeu	r6,r2,8c57c <__fpcmp_parts_d+0x40>
   8c5d0:	403fe71e 	bne	r8,zero,8c570 <__fpcmp_parts_d+0x34>
   8c5d4:	003fef06 	br	8c594 <__fpcmp_parts_d+0x58>
   8c5d8:	11bffa2e 	bgeu	r2,r6,8c5c4 <__fpcmp_parts_d+0x88>
   8c5dc:	403fe426 	beq	r8,zero,8c570 <__fpcmp_parts_d+0x34>
   8c5e0:	003fec06 	br	8c594 <__fpcmp_parts_d+0x58>
   8c5e4:	28800117 	ldw	r2,4(r5)
   8c5e8:	103fe11e 	bne	r2,zero,8c570 <__fpcmp_parts_d+0x34>
   8c5ec:	003fe906 	br	8c594 <__fpcmp_parts_d+0x58>
   8c5f0:	11bfdd1e 	bne	r2,r6,8c568 <__fpcmp_parts_d+0x2c>
   8c5f4:	28c00117 	ldw	r3,4(r5)
   8c5f8:	20800117 	ldw	r2,4(r4)
   8c5fc:	1885c83a 	sub	r2,r3,r2
   8c600:	f800283a 	ret

0008c604 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8c604:	defff804 	addi	sp,sp,-32
   8c608:	dfc00715 	stw	ra,28(sp)
   8c60c:	df000615 	stw	fp,24(sp)
   8c610:	df000604 	addi	fp,sp,24
   8c614:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8c618:	e0bffc17 	ldw	r2,-16(fp)
   8c61c:	1004803a 	cmplt	r2,r2,zero
   8c620:	1000091e 	bne	r2,zero,8c648 <close+0x44>
   8c624:	e13ffc17 	ldw	r4,-16(fp)
   8c628:	01400304 	movi	r5,12
   8c62c:	0082b040 	call	82b04 <__mulsi3>
   8c630:	1007883a 	mov	r3,r2
   8c634:	008002b4 	movhi	r2,10
   8c638:	10a83b04 	addi	r2,r2,-24340
   8c63c:	1887883a 	add	r3,r3,r2
   8c640:	e0ffff15 	stw	r3,-4(fp)
   8c644:	00000106 	br	8c64c <close+0x48>
   8c648:	e03fff15 	stw	zero,-4(fp)
   8c64c:	e0bfff17 	ldw	r2,-4(fp)
   8c650:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   8c654:	e0bffb17 	ldw	r2,-20(fp)
   8c658:	1005003a 	cmpeq	r2,r2,zero
   8c65c:	10001d1e 	bne	r2,zero,8c6d4 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8c660:	e0bffb17 	ldw	r2,-20(fp)
   8c664:	10800017 	ldw	r2,0(r2)
   8c668:	10800417 	ldw	r2,16(r2)
   8c66c:	1005003a 	cmpeq	r2,r2,zero
   8c670:	1000071e 	bne	r2,zero,8c690 <close+0x8c>
   8c674:	e0bffb17 	ldw	r2,-20(fp)
   8c678:	10800017 	ldw	r2,0(r2)
   8c67c:	10800417 	ldw	r2,16(r2)
   8c680:	e13ffb17 	ldw	r4,-20(fp)
   8c684:	103ee83a 	callr	r2
   8c688:	e0bffe15 	stw	r2,-8(fp)
   8c68c:	00000106 	br	8c694 <close+0x90>
   8c690:	e03ffe15 	stw	zero,-8(fp)
   8c694:	e0bffe17 	ldw	r2,-8(fp)
   8c698:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8c69c:	e13ffc17 	ldw	r4,-16(fp)
   8c6a0:	008d2d00 	call	8d2d0 <alt_release_fd>
    if (rval < 0)
   8c6a4:	e0bffa17 	ldw	r2,-24(fp)
   8c6a8:	1004403a 	cmpge	r2,r2,zero
   8c6ac:	1000071e 	bne	r2,zero,8c6cc <close+0xc8>
    {
      ALT_ERRNO = -rval;
   8c6b0:	008c7040 	call	8c704 <alt_get_errno>
   8c6b4:	e0fffa17 	ldw	r3,-24(fp)
   8c6b8:	00c7c83a 	sub	r3,zero,r3
   8c6bc:	10c00015 	stw	r3,0(r2)
      return -1;
   8c6c0:	00bfffc4 	movi	r2,-1
   8c6c4:	e0bffd15 	stw	r2,-12(fp)
   8c6c8:	00000806 	br	8c6ec <close+0xe8>
    }
    return 0;
   8c6cc:	e03ffd15 	stw	zero,-12(fp)
   8c6d0:	00000606 	br	8c6ec <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8c6d4:	008c7040 	call	8c704 <alt_get_errno>
   8c6d8:	1007883a 	mov	r3,r2
   8c6dc:	00801444 	movi	r2,81
   8c6e0:	18800015 	stw	r2,0(r3)
    return -1;
   8c6e4:	00bfffc4 	movi	r2,-1
   8c6e8:	e0bffd15 	stw	r2,-12(fp)
   8c6ec:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   8c6f0:	e037883a 	mov	sp,fp
   8c6f4:	dfc00117 	ldw	ra,4(sp)
   8c6f8:	df000017 	ldw	fp,0(sp)
   8c6fc:	dec00204 	addi	sp,sp,8
   8c700:	f800283a 	ret

0008c704 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8c704:	defffd04 	addi	sp,sp,-12
   8c708:	dfc00215 	stw	ra,8(sp)
   8c70c:	df000115 	stw	fp,4(sp)
   8c710:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8c714:	008002b4 	movhi	r2,10
   8c718:	10accd04 	addi	r2,r2,-19660
   8c71c:	10800017 	ldw	r2,0(r2)
   8c720:	1005003a 	cmpeq	r2,r2,zero
   8c724:	1000061e 	bne	r2,zero,8c740 <alt_get_errno+0x3c>
   8c728:	008002b4 	movhi	r2,10
   8c72c:	10accd04 	addi	r2,r2,-19660
   8c730:	10800017 	ldw	r2,0(r2)
   8c734:	103ee83a 	callr	r2
   8c738:	e0bfff15 	stw	r2,-4(fp)
   8c73c:	00000306 	br	8c74c <alt_get_errno+0x48>
   8c740:	008002b4 	movhi	r2,10
   8c744:	10b3bc04 	addi	r2,r2,-12560
   8c748:	e0bfff15 	stw	r2,-4(fp)
   8c74c:	e0bfff17 	ldw	r2,-4(fp)
}
   8c750:	e037883a 	mov	sp,fp
   8c754:	dfc00117 	ldw	ra,4(sp)
   8c758:	df000017 	ldw	fp,0(sp)
   8c75c:	dec00204 	addi	sp,sp,8
   8c760:	f800283a 	ret

0008c764 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   8c764:	defffc04 	addi	sp,sp,-16
   8c768:	df000315 	stw	fp,12(sp)
   8c76c:	df000304 	addi	fp,sp,12
   8c770:	e13ffd15 	stw	r4,-12(fp)
   8c774:	e17ffe15 	stw	r5,-8(fp)
   8c778:	e1bfff15 	stw	r6,-4(fp)
  return len;
   8c77c:	e0bfff17 	ldw	r2,-4(fp)
}
   8c780:	e037883a 	mov	sp,fp
   8c784:	df000017 	ldw	fp,0(sp)
   8c788:	dec00104 	addi	sp,sp,4
   8c78c:	f800283a 	ret

0008c790 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8c790:	defff904 	addi	sp,sp,-28
   8c794:	dfc00615 	stw	ra,24(sp)
   8c798:	df000515 	stw	fp,20(sp)
   8c79c:	df000504 	addi	fp,sp,20
   8c7a0:	e13ffc15 	stw	r4,-16(fp)
   8c7a4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8c7a8:	e0bffc17 	ldw	r2,-16(fp)
   8c7ac:	1004803a 	cmplt	r2,r2,zero
   8c7b0:	1000091e 	bne	r2,zero,8c7d8 <fstat+0x48>
   8c7b4:	e13ffc17 	ldw	r4,-16(fp)
   8c7b8:	01400304 	movi	r5,12
   8c7bc:	0082b040 	call	82b04 <__mulsi3>
   8c7c0:	1007883a 	mov	r3,r2
   8c7c4:	008002b4 	movhi	r2,10
   8c7c8:	10a83b04 	addi	r2,r2,-24340
   8c7cc:	1887883a 	add	r3,r3,r2
   8c7d0:	e0ffff15 	stw	r3,-4(fp)
   8c7d4:	00000106 	br	8c7dc <fstat+0x4c>
   8c7d8:	e03fff15 	stw	zero,-4(fp)
   8c7dc:	e0bfff17 	ldw	r2,-4(fp)
   8c7e0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8c7e4:	e0bffb17 	ldw	r2,-20(fp)
   8c7e8:	1005003a 	cmpeq	r2,r2,zero
   8c7ec:	1000121e 	bne	r2,zero,8c838 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8c7f0:	e0bffb17 	ldw	r2,-20(fp)
   8c7f4:	10800017 	ldw	r2,0(r2)
   8c7f8:	10800817 	ldw	r2,32(r2)
   8c7fc:	1005003a 	cmpeq	r2,r2,zero
   8c800:	1000081e 	bne	r2,zero,8c824 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
   8c804:	e0bffb17 	ldw	r2,-20(fp)
   8c808:	10800017 	ldw	r2,0(r2)
   8c80c:	10800817 	ldw	r2,32(r2)
   8c810:	e13ffb17 	ldw	r4,-20(fp)
   8c814:	e17ffd17 	ldw	r5,-12(fp)
   8c818:	103ee83a 	callr	r2
   8c81c:	e0bffe15 	stw	r2,-8(fp)
   8c820:	00000b06 	br	8c850 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8c824:	e0fffd17 	ldw	r3,-12(fp)
   8c828:	00880004 	movi	r2,8192
   8c82c:	18800115 	stw	r2,4(r3)
      return 0;
   8c830:	e03ffe15 	stw	zero,-8(fp)
   8c834:	00000606 	br	8c850 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8c838:	008c8680 	call	8c868 <alt_get_errno>
   8c83c:	1007883a 	mov	r3,r2
   8c840:	00801444 	movi	r2,81
   8c844:	18800015 	stw	r2,0(r3)
    return -1;
   8c848:	00bfffc4 	movi	r2,-1
   8c84c:	e0bffe15 	stw	r2,-8(fp)
   8c850:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   8c854:	e037883a 	mov	sp,fp
   8c858:	dfc00117 	ldw	ra,4(sp)
   8c85c:	df000017 	ldw	fp,0(sp)
   8c860:	dec00204 	addi	sp,sp,8
   8c864:	f800283a 	ret

0008c868 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8c868:	defffd04 	addi	sp,sp,-12
   8c86c:	dfc00215 	stw	ra,8(sp)
   8c870:	df000115 	stw	fp,4(sp)
   8c874:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8c878:	008002b4 	movhi	r2,10
   8c87c:	10accd04 	addi	r2,r2,-19660
   8c880:	10800017 	ldw	r2,0(r2)
   8c884:	1005003a 	cmpeq	r2,r2,zero
   8c888:	1000061e 	bne	r2,zero,8c8a4 <alt_get_errno+0x3c>
   8c88c:	008002b4 	movhi	r2,10
   8c890:	10accd04 	addi	r2,r2,-19660
   8c894:	10800017 	ldw	r2,0(r2)
   8c898:	103ee83a 	callr	r2
   8c89c:	e0bfff15 	stw	r2,-4(fp)
   8c8a0:	00000306 	br	8c8b0 <alt_get_errno+0x48>
   8c8a4:	008002b4 	movhi	r2,10
   8c8a8:	10b3bc04 	addi	r2,r2,-12560
   8c8ac:	e0bfff15 	stw	r2,-4(fp)
   8c8b0:	e0bfff17 	ldw	r2,-4(fp)
}
   8c8b4:	e037883a 	mov	sp,fp
   8c8b8:	dfc00117 	ldw	ra,4(sp)
   8c8bc:	df000017 	ldw	fp,0(sp)
   8c8c0:	dec00204 	addi	sp,sp,8
   8c8c4:	f800283a 	ret

0008c8c8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   8c8c8:	deffef04 	addi	sp,sp,-68
   8c8cc:	df001015 	stw	fp,64(sp)
   8c8d0:	df001004 	addi	fp,sp,64
   8c8d4:	e13ffc15 	stw	r4,-16(fp)
   8c8d8:	e17ffd15 	stw	r5,-12(fp)
   8c8dc:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
   8c8e0:	00bffa84 	movi	r2,-22
   8c8e4:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8c8e8:	e0bffc17 	ldw	r2,-16(fp)
   8c8ec:	10800828 	cmpgeui	r2,r2,32
   8c8f0:	1000601e 	bne	r2,zero,8ca74 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c8f4:	0005303a 	rdctl	r2,status
   8c8f8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c8fc:	e0fff917 	ldw	r3,-28(fp)
   8c900:	00bfff84 	movi	r2,-2
   8c904:	1884703a 	and	r2,r3,r2
   8c908:	1001703a 	wrctl	status,r2
  
  return context;
   8c90c:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   8c910:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
   8c914:	e0bffc17 	ldw	r2,-16(fp)
   8c918:	00c002f4 	movhi	r3,11
   8c91c:	18f0fa04 	addi	r3,r3,-15384
   8c920:	100490fa 	slli	r2,r2,3
   8c924:	10c7883a 	add	r3,r2,r3
   8c928:	e0bffe17 	ldw	r2,-8(fp)
   8c92c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
   8c930:	e0bffc17 	ldw	r2,-16(fp)
   8c934:	00c002f4 	movhi	r3,11
   8c938:	18f0fa04 	addi	r3,r3,-15384
   8c93c:	100490fa 	slli	r2,r2,3
   8c940:	10c5883a 	add	r2,r2,r3
   8c944:	10c00104 	addi	r3,r2,4
   8c948:	e0bffd17 	ldw	r2,-12(fp)
   8c94c:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   8c950:	e0bffe17 	ldw	r2,-8(fp)
   8c954:	1005003a 	cmpeq	r2,r2,zero
   8c958:	1000201e 	bne	r2,zero,8c9dc <alt_irq_register+0x114>
   8c95c:	e0bffc17 	ldw	r2,-16(fp)
   8c960:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c964:	0005303a 	rdctl	r2,status
   8c968:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c96c:	e0fff617 	ldw	r3,-40(fp)
   8c970:	00bfff84 	movi	r2,-2
   8c974:	1884703a 	and	r2,r3,r2
   8c978:	1001703a 	wrctl	status,r2
  
  return context;
   8c97c:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8c980:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   8c984:	e0fff717 	ldw	r3,-36(fp)
   8c988:	00800044 	movi	r2,1
   8c98c:	10c4983a 	sll	r2,r2,r3
   8c990:	1007883a 	mov	r3,r2
   8c994:	008002b4 	movhi	r2,10
   8c998:	10b3be04 	addi	r2,r2,-12552
   8c99c:	10800017 	ldw	r2,0(r2)
   8c9a0:	1886b03a 	or	r3,r3,r2
   8c9a4:	008002b4 	movhi	r2,10
   8c9a8:	10b3be04 	addi	r2,r2,-12552
   8c9ac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8c9b0:	008002b4 	movhi	r2,10
   8c9b4:	10b3be04 	addi	r2,r2,-12552
   8c9b8:	10800017 	ldw	r2,0(r2)
   8c9bc:	100170fa 	wrctl	ienable,r2
   8c9c0:	e0bff817 	ldw	r2,-32(fp)
   8c9c4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c9c8:	e0bff517 	ldw	r2,-44(fp)
   8c9cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8c9d0:	0005883a 	mov	r2,zero
   8c9d4:	e0bfff15 	stw	r2,-4(fp)
   8c9d8:	00002006 	br	8ca5c <alt_irq_register+0x194>
   8c9dc:	e0bffc17 	ldw	r2,-16(fp)
   8c9e0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c9e4:	0005303a 	rdctl	r2,status
   8c9e8:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c9ec:	e0fff217 	ldw	r3,-56(fp)
   8c9f0:	00bfff84 	movi	r2,-2
   8c9f4:	1884703a 	and	r2,r3,r2
   8c9f8:	1001703a 	wrctl	status,r2
  
  return context;
   8c9fc:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8ca00:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
   8ca04:	e0fff317 	ldw	r3,-52(fp)
   8ca08:	00800044 	movi	r2,1
   8ca0c:	10c4983a 	sll	r2,r2,r3
   8ca10:	0084303a 	nor	r2,zero,r2
   8ca14:	1007883a 	mov	r3,r2
   8ca18:	008002b4 	movhi	r2,10
   8ca1c:	10b3be04 	addi	r2,r2,-12552
   8ca20:	10800017 	ldw	r2,0(r2)
   8ca24:	1886703a 	and	r3,r3,r2
   8ca28:	008002b4 	movhi	r2,10
   8ca2c:	10b3be04 	addi	r2,r2,-12552
   8ca30:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8ca34:	008002b4 	movhi	r2,10
   8ca38:	10b3be04 	addi	r2,r2,-12552
   8ca3c:	10800017 	ldw	r2,0(r2)
   8ca40:	100170fa 	wrctl	ienable,r2
   8ca44:	e0bff417 	ldw	r2,-48(fp)
   8ca48:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ca4c:	e0bff117 	ldw	r2,-60(fp)
   8ca50:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8ca54:	0005883a 	mov	r2,zero
   8ca58:	e0bfff15 	stw	r2,-4(fp)
   8ca5c:	e0bfff17 	ldw	r2,-4(fp)
   8ca60:	e0bffb15 	stw	r2,-20(fp)
   8ca64:	e0bffa17 	ldw	r2,-24(fp)
   8ca68:	e0bff015 	stw	r2,-64(fp)
   8ca6c:	e0bff017 	ldw	r2,-64(fp)
   8ca70:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   8ca74:	e0bffb17 	ldw	r2,-20(fp)
}
   8ca78:	e037883a 	mov	sp,fp
   8ca7c:	df000017 	ldw	fp,0(sp)
   8ca80:	dec00104 	addi	sp,sp,4
   8ca84:	f800283a 	ret

0008ca88 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8ca88:	deffeb04 	addi	sp,sp,-84
   8ca8c:	dfc01415 	stw	ra,80(sp)
   8ca90:	df001315 	stw	fp,76(sp)
   8ca94:	df001304 	addi	fp,sp,76
   8ca98:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8ca9c:	e0bffd17 	ldw	r2,-12(fp)
   8caa0:	1004803a 	cmplt	r2,r2,zero
   8caa4:	1000091e 	bne	r2,zero,8cacc <isatty+0x44>
   8caa8:	e13ffd17 	ldw	r4,-12(fp)
   8caac:	01400304 	movi	r5,12
   8cab0:	0082b040 	call	82b04 <__mulsi3>
   8cab4:	1007883a 	mov	r3,r2
   8cab8:	008002b4 	movhi	r2,10
   8cabc:	10a83b04 	addi	r2,r2,-24340
   8cac0:	1887883a 	add	r3,r3,r2
   8cac4:	e0ffff15 	stw	r3,-4(fp)
   8cac8:	00000106 	br	8cad0 <isatty+0x48>
   8cacc:	e03fff15 	stw	zero,-4(fp)
   8cad0:	e0bfff17 	ldw	r2,-4(fp)
   8cad4:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   8cad8:	e0bfed17 	ldw	r2,-76(fp)
   8cadc:	1005003a 	cmpeq	r2,r2,zero
   8cae0:	10000f1e 	bne	r2,zero,8cb20 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8cae4:	e0bfed17 	ldw	r2,-76(fp)
   8cae8:	10800017 	ldw	r2,0(r2)
   8caec:	10800817 	ldw	r2,32(r2)
   8caf0:	1004c03a 	cmpne	r2,r2,zero
   8caf4:	1000031e 	bne	r2,zero,8cb04 <isatty+0x7c>
    {
      return 1;
   8caf8:	00800044 	movi	r2,1
   8cafc:	e0bffe15 	stw	r2,-8(fp)
   8cb00:	00000c06 	br	8cb34 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8cb04:	e17fee04 	addi	r5,fp,-72
   8cb08:	e13ffd17 	ldw	r4,-12(fp)
   8cb0c:	008c7900 	call	8c790 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8cb10:	e0bfef17 	ldw	r2,-68(fp)
   8cb14:	10880020 	cmpeqi	r2,r2,8192
   8cb18:	e0bffe15 	stw	r2,-8(fp)
   8cb1c:	00000506 	br	8cb34 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8cb20:	008cb4c0 	call	8cb4c <alt_get_errno>
   8cb24:	1007883a 	mov	r3,r2
   8cb28:	00801444 	movi	r2,81
   8cb2c:	18800015 	stw	r2,0(r3)
    return 0;
   8cb30:	e03ffe15 	stw	zero,-8(fp)
   8cb34:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   8cb38:	e037883a 	mov	sp,fp
   8cb3c:	dfc00117 	ldw	ra,4(sp)
   8cb40:	df000017 	ldw	fp,0(sp)
   8cb44:	dec00204 	addi	sp,sp,8
   8cb48:	f800283a 	ret

0008cb4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8cb4c:	defffd04 	addi	sp,sp,-12
   8cb50:	dfc00215 	stw	ra,8(sp)
   8cb54:	df000115 	stw	fp,4(sp)
   8cb58:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8cb5c:	008002b4 	movhi	r2,10
   8cb60:	10accd04 	addi	r2,r2,-19660
   8cb64:	10800017 	ldw	r2,0(r2)
   8cb68:	1005003a 	cmpeq	r2,r2,zero
   8cb6c:	1000061e 	bne	r2,zero,8cb88 <alt_get_errno+0x3c>
   8cb70:	008002b4 	movhi	r2,10
   8cb74:	10accd04 	addi	r2,r2,-19660
   8cb78:	10800017 	ldw	r2,0(r2)
   8cb7c:	103ee83a 	callr	r2
   8cb80:	e0bfff15 	stw	r2,-4(fp)
   8cb84:	00000306 	br	8cb94 <alt_get_errno+0x48>
   8cb88:	008002b4 	movhi	r2,10
   8cb8c:	10b3bc04 	addi	r2,r2,-12560
   8cb90:	e0bfff15 	stw	r2,-4(fp)
   8cb94:	e0bfff17 	ldw	r2,-4(fp)
}
   8cb98:	e037883a 	mov	sp,fp
   8cb9c:	dfc00117 	ldw	ra,4(sp)
   8cba0:	df000017 	ldw	fp,0(sp)
   8cba4:	dec00204 	addi	sp,sp,8
   8cba8:	f800283a 	ret

0008cbac <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8cbac:	defffe04 	addi	sp,sp,-8
   8cbb0:	dfc00115 	stw	ra,4(sp)
   8cbb4:	df000015 	stw	fp,0(sp)
   8cbb8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   8cbbc:	010002b4 	movhi	r4,10
   8cbc0:	212cf104 	addi	r4,r4,-19516
   8cbc4:	014002b4 	movhi	r5,10
   8cbc8:	29662c04 	addi	r5,r5,-26448
   8cbcc:	018002b4 	movhi	r6,10
   8cbd0:	31acf104 	addi	r6,r6,-19516
   8cbd4:	008cc2c0 	call	8cc2c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8cbd8:	01000234 	movhi	r4,8
   8cbdc:	21000804 	addi	r4,r4,32
   8cbe0:	01400234 	movhi	r5,8
   8cbe4:	29400804 	addi	r5,r5,32
   8cbe8:	01800234 	movhi	r6,8
   8cbec:	31806f04 	addi	r6,r6,444
   8cbf0:	008cc2c0 	call	8cc2c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   8cbf4:	010002b4 	movhi	r4,10
   8cbf8:	2122d704 	addi	r4,r4,-29860
   8cbfc:	014002b4 	movhi	r5,10
   8cc00:	2962d704 	addi	r5,r5,-29860
   8cc04:	018002b4 	movhi	r6,10
   8cc08:	31a62c04 	addi	r6,r6,-26448
   8cc0c:	008cc2c0 	call	8cc2c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8cc10:	00971240 	call	97124 <alt_dcache_flush_all>
  alt_icache_flush_all();
   8cc14:	00973b00 	call	973b0 <alt_icache_flush_all>
}
   8cc18:	e037883a 	mov	sp,fp
   8cc1c:	dfc00117 	ldw	ra,4(sp)
   8cc20:	df000017 	ldw	fp,0(sp)
   8cc24:	dec00204 	addi	sp,sp,8
   8cc28:	f800283a 	ret

0008cc2c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   8cc2c:	defffc04 	addi	sp,sp,-16
   8cc30:	df000315 	stw	fp,12(sp)
   8cc34:	df000304 	addi	fp,sp,12
   8cc38:	e13ffd15 	stw	r4,-12(fp)
   8cc3c:	e17ffe15 	stw	r5,-8(fp)
   8cc40:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   8cc44:	e0fffe17 	ldw	r3,-8(fp)
   8cc48:	e0bffd17 	ldw	r2,-12(fp)
   8cc4c:	18800e26 	beq	r3,r2,8cc88 <alt_load_section+0x5c>
  {
    while( to != end )
   8cc50:	00000a06 	br	8cc7c <alt_load_section+0x50>
    {
      *to++ = *from++;
   8cc54:	e0bffd17 	ldw	r2,-12(fp)
   8cc58:	10c00017 	ldw	r3,0(r2)
   8cc5c:	e0bffe17 	ldw	r2,-8(fp)
   8cc60:	10c00015 	stw	r3,0(r2)
   8cc64:	e0bffe17 	ldw	r2,-8(fp)
   8cc68:	10800104 	addi	r2,r2,4
   8cc6c:	e0bffe15 	stw	r2,-8(fp)
   8cc70:	e0bffd17 	ldw	r2,-12(fp)
   8cc74:	10800104 	addi	r2,r2,4
   8cc78:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8cc7c:	e0fffe17 	ldw	r3,-8(fp)
   8cc80:	e0bfff17 	ldw	r2,-4(fp)
   8cc84:	18bff31e 	bne	r3,r2,8cc54 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   8cc88:	e037883a 	mov	sp,fp
   8cc8c:	df000017 	ldw	fp,0(sp)
   8cc90:	dec00104 	addi	sp,sp,4
   8cc94:	f800283a 	ret

0008cc98 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8cc98:	defff804 	addi	sp,sp,-32
   8cc9c:	dfc00715 	stw	ra,28(sp)
   8cca0:	df000615 	stw	fp,24(sp)
   8cca4:	df000604 	addi	fp,sp,24
   8cca8:	e13ffc15 	stw	r4,-16(fp)
   8ccac:	e17ffd15 	stw	r5,-12(fp)
   8ccb0:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   8ccb4:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8ccb8:	e0bffc17 	ldw	r2,-16(fp)
   8ccbc:	1004803a 	cmplt	r2,r2,zero
   8ccc0:	1000091e 	bne	r2,zero,8cce8 <lseek+0x50>
   8ccc4:	e13ffc17 	ldw	r4,-16(fp)
   8ccc8:	01400304 	movi	r5,12
   8cccc:	0082b040 	call	82b04 <__mulsi3>
   8ccd0:	1007883a 	mov	r3,r2
   8ccd4:	008002b4 	movhi	r2,10
   8ccd8:	10a83b04 	addi	r2,r2,-24340
   8ccdc:	1887883a 	add	r3,r3,r2
   8cce0:	e0ffff15 	stw	r3,-4(fp)
   8cce4:	00000106 	br	8ccec <lseek+0x54>
   8cce8:	e03fff15 	stw	zero,-4(fp)
   8ccec:	e0bfff17 	ldw	r2,-4(fp)
   8ccf0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   8ccf4:	e0bffb17 	ldw	r2,-20(fp)
   8ccf8:	1005003a 	cmpeq	r2,r2,zero
   8ccfc:	1000111e 	bne	r2,zero,8cd44 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8cd00:	e0bffb17 	ldw	r2,-20(fp)
   8cd04:	10800017 	ldw	r2,0(r2)
   8cd08:	10800717 	ldw	r2,28(r2)
   8cd0c:	1005003a 	cmpeq	r2,r2,zero
   8cd10:	1000091e 	bne	r2,zero,8cd38 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8cd14:	e0bffb17 	ldw	r2,-20(fp)
   8cd18:	10800017 	ldw	r2,0(r2)
   8cd1c:	10800717 	ldw	r2,28(r2)
   8cd20:	e13ffb17 	ldw	r4,-20(fp)
   8cd24:	e17ffd17 	ldw	r5,-12(fp)
   8cd28:	e1bffe17 	ldw	r6,-8(fp)
   8cd2c:	103ee83a 	callr	r2
   8cd30:	e0bffa15 	stw	r2,-24(fp)
   8cd34:	00000506 	br	8cd4c <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8cd38:	00bfde84 	movi	r2,-134
   8cd3c:	e0bffa15 	stw	r2,-24(fp)
   8cd40:	00000206 	br	8cd4c <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
   8cd44:	00bfebc4 	movi	r2,-81
   8cd48:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   8cd4c:	e0bffa17 	ldw	r2,-24(fp)
   8cd50:	1004403a 	cmpge	r2,r2,zero
   8cd54:	1000071e 	bne	r2,zero,8cd74 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
   8cd58:	008cd8c0 	call	8cd8c <alt_get_errno>
   8cd5c:	1007883a 	mov	r3,r2
   8cd60:	e0bffa17 	ldw	r2,-24(fp)
   8cd64:	0085c83a 	sub	r2,zero,r2
   8cd68:	18800015 	stw	r2,0(r3)
    rc = -1;
   8cd6c:	00bfffc4 	movi	r2,-1
   8cd70:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   8cd74:	e0bffa17 	ldw	r2,-24(fp)
}
   8cd78:	e037883a 	mov	sp,fp
   8cd7c:	dfc00117 	ldw	ra,4(sp)
   8cd80:	df000017 	ldw	fp,0(sp)
   8cd84:	dec00204 	addi	sp,sp,8
   8cd88:	f800283a 	ret

0008cd8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8cd8c:	defffd04 	addi	sp,sp,-12
   8cd90:	dfc00215 	stw	ra,8(sp)
   8cd94:	df000115 	stw	fp,4(sp)
   8cd98:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8cd9c:	008002b4 	movhi	r2,10
   8cda0:	10accd04 	addi	r2,r2,-19660
   8cda4:	10800017 	ldw	r2,0(r2)
   8cda8:	1005003a 	cmpeq	r2,r2,zero
   8cdac:	1000061e 	bne	r2,zero,8cdc8 <alt_get_errno+0x3c>
   8cdb0:	008002b4 	movhi	r2,10
   8cdb4:	10accd04 	addi	r2,r2,-19660
   8cdb8:	10800017 	ldw	r2,0(r2)
   8cdbc:	103ee83a 	callr	r2
   8cdc0:	e0bfff15 	stw	r2,-4(fp)
   8cdc4:	00000306 	br	8cdd4 <alt_get_errno+0x48>
   8cdc8:	008002b4 	movhi	r2,10
   8cdcc:	10b3bc04 	addi	r2,r2,-12560
   8cdd0:	e0bfff15 	stw	r2,-4(fp)
   8cdd4:	e0bfff17 	ldw	r2,-4(fp)
}
   8cdd8:	e037883a 	mov	sp,fp
   8cddc:	dfc00117 	ldw	ra,4(sp)
   8cde0:	df000017 	ldw	fp,0(sp)
   8cde4:	dec00204 	addi	sp,sp,8
   8cde8:	f800283a 	ret

0008cdec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8cdec:	defffb04 	addi	sp,sp,-20
   8cdf0:	dfc00415 	stw	ra,16(sp)
   8cdf4:	df000315 	stw	fp,12(sp)
   8cdf8:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8cdfc:	0009883a 	mov	r4,zero
   8ce00:	0095b540 	call	95b54 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   8ce04:	008e1900 	call	8e190 <OSInit>
   8ce08:	01000044 	movi	r4,1
   8ce0c:	00930580 	call	93058 <OSSemCreate>
   8ce10:	1007883a 	mov	r3,r2
   8ce14:	008002b4 	movhi	r2,10
   8ce18:	10b3c304 	addi	r2,r2,-12532
   8ce1c:	10c00015 	stw	r3,0(r2)
   8ce20:	01000044 	movi	r4,1
   8ce24:	00930580 	call	93058 <OSSemCreate>
   8ce28:	1007883a 	mov	r3,r2
   8ce2c:	008002b4 	movhi	r2,10
   8ce30:	10b3c504 	addi	r2,r2,-12524
   8ce34:	10c00015 	stw	r3,0(r2)
   8ce38:	008002b4 	movhi	r2,10
   8ce3c:	10b3bd04 	addi	r2,r2,-12556
   8ce40:	e0bffd15 	stw	r2,-12(fp)
   8ce44:	00800044 	movi	r2,1
   8ce48:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   8ce4c:	e13ffe0b 	ldhu	r4,-8(fp)
   8ce50:	00930580 	call	93058 <OSSemCreate>
   8ce54:	1007883a 	mov	r3,r2
   8ce58:	e0bffd17 	ldw	r2,-12(fp)
   8ce5c:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8ce60:	0095b880 	call	95b88 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8ce64:	010002b4 	movhi	r4,10
   8ce68:	2125d304 	addi	r4,r4,-26804
   8ce6c:	014002b4 	movhi	r5,10
   8ce70:	2965d304 	addi	r5,r5,-26804
   8ce74:	018002b4 	movhi	r6,10
   8ce78:	31a5d304 	addi	r6,r6,-26804
   8ce7c:	00977700 	call	97770 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8ce80:	00972540 	call	97254 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8ce84:	01000274 	movhi	r4,9
   8ce88:	211cae04 	addi	r4,r4,29368
   8ce8c:	00983a00 	call	983a0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8ce90:	d126fe17 	ldw	r4,-25608(gp)
   8ce94:	d166ff17 	ldw	r5,-25604(gp)
   8ce98:	d1a70017 	ldw	r6,-25600(gp)
   8ce9c:	00809940 	call	80994 <main>
   8cea0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8cea4:	01000044 	movi	r4,1
   8cea8:	008c6040 	call	8c604 <close>
  exit (result);
   8ceac:	e13fff17 	ldw	r4,-4(fp)
   8ceb0:	00983b40 	call	983b4 <exit>

0008ceb4 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   8ceb4:	defff204 	addi	sp,sp,-56
   8ceb8:	dfc00a15 	stw	ra,40(sp)
   8cebc:	df000915 	stw	fp,36(sp)
   8cec0:	df000904 	addi	fp,sp,36
   8cec4:	e1400215 	stw	r5,8(fp)
   8cec8:	e1800315 	stw	r6,12(fp)
   8cecc:	e1c00415 	stw	r7,16(fp)
   8ced0:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
   8ced4:	e0800204 	addi	r2,fp,8
   8ced8:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   8cedc:	e0bfff17 	ldw	r2,-4(fp)
   8cee0:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
   8cee4:	00007806 	br	8d0c8 <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   8cee8:	e0bffc07 	ldb	r2,-16(fp)
   8ceec:	10800960 	cmpeqi	r2,r2,37
   8cef0:	1000031e 	bne	r2,zero,8cf00 <alt_printf+0x4c>
        {
            alt_putchar(c);
   8cef4:	e13ffc07 	ldb	r4,-16(fp)
   8cef8:	008d10c0 	call	8d10c <alt_putchar>
   8cefc:	00007206 	br	8d0c8 <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   8cf00:	e0bffd17 	ldw	r2,-12(fp)
   8cf04:	10800003 	ldbu	r2,0(r2)
   8cf08:	e0bffc05 	stb	r2,-16(fp)
   8cf0c:	e0bffc07 	ldb	r2,-16(fp)
   8cf10:	1004c03a 	cmpne	r2,r2,zero
   8cf14:	1007883a 	mov	r3,r2
   8cf18:	e0bffd17 	ldw	r2,-12(fp)
   8cf1c:	10800044 	addi	r2,r2,1
   8cf20:	e0bffd15 	stw	r2,-12(fp)
   8cf24:	18803fcc 	andi	r2,r3,255
   8cf28:	1005003a 	cmpeq	r2,r2,zero
   8cf2c:	1000721e 	bne	r2,zero,8d0f8 <alt_printf+0x244>
            {
                if (c == '%')
   8cf30:	e0bffc07 	ldb	r2,-16(fp)
   8cf34:	10800958 	cmpnei	r2,r2,37
   8cf38:	1000031e 	bne	r2,zero,8cf48 <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   8cf3c:	e13ffc07 	ldb	r4,-16(fp)
   8cf40:	008d10c0 	call	8d10c <alt_putchar>
   8cf44:	00006006 	br	8d0c8 <alt_printf+0x214>
                } 
                else if (c == 'c')
   8cf48:	e0bffc07 	ldb	r2,-16(fp)
   8cf4c:	108018d8 	cmpnei	r2,r2,99
   8cf50:	1000091e 	bne	r2,zero,8cf78 <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
   8cf54:	e0fffe17 	ldw	r3,-8(fp)
   8cf58:	18800104 	addi	r2,r3,4
   8cf5c:	e0bffe15 	stw	r2,-8(fp)
   8cf60:	1805883a 	mov	r2,r3
   8cf64:	10800017 	ldw	r2,0(r2)
   8cf68:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
   8cf6c:	e13ffb17 	ldw	r4,-20(fp)
   8cf70:	008d10c0 	call	8d10c <alt_putchar>
   8cf74:	00005406 	br	8d0c8 <alt_printf+0x214>
                }
                else if (c == 'x')
   8cf78:	e0bffc07 	ldb	r2,-16(fp)
   8cf7c:	10801e18 	cmpnei	r2,r2,120
   8cf80:	1000371e 	bne	r2,zero,8d060 <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   8cf84:	e0fffe17 	ldw	r3,-8(fp)
   8cf88:	18800104 	addi	r2,r3,4
   8cf8c:	e0bffe15 	stw	r2,-8(fp)
   8cf90:	1805883a 	mov	r2,r3
   8cf94:	10800017 	ldw	r2,0(r2)
   8cf98:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   8cf9c:	e0bffa17 	ldw	r2,-24(fp)
   8cfa0:	1004c03a 	cmpne	r2,r2,zero
   8cfa4:	1000031e 	bne	r2,zero,8cfb4 <alt_printf+0x100>
                    {
                        alt_putchar('0');
   8cfa8:	01000c04 	movi	r4,48
   8cfac:	008d10c0 	call	8d10c <alt_putchar>
                        continue;
   8cfb0:	00004506 	br	8d0c8 <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   8cfb4:	00800704 	movi	r2,28
   8cfb8:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
   8cfbc:	00000306 	br	8cfcc <alt_printf+0x118>
                        digit_shift -= 4;
   8cfc0:	e0bff817 	ldw	r2,-32(fp)
   8cfc4:	10bfff04 	addi	r2,r2,-4
   8cfc8:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   8cfcc:	00c003c4 	movi	r3,15
   8cfd0:	e0bff817 	ldw	r2,-32(fp)
   8cfd4:	1884983a 	sll	r2,r3,r2
   8cfd8:	1007883a 	mov	r3,r2
   8cfdc:	e0bffa17 	ldw	r2,-24(fp)
   8cfe0:	1884703a 	and	r2,r3,r2
   8cfe4:	1005003a 	cmpeq	r2,r2,zero
   8cfe8:	103ff51e 	bne	r2,zero,8cfc0 <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   8cfec:	00001806 	br	8d050 <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   8cff0:	00c003c4 	movi	r3,15
   8cff4:	e0bff817 	ldw	r2,-32(fp)
   8cff8:	1884983a 	sll	r2,r3,r2
   8cffc:	1007883a 	mov	r3,r2
   8d000:	e0bffa17 	ldw	r2,-24(fp)
   8d004:	1886703a 	and	r3,r3,r2
   8d008:	e0bff817 	ldw	r2,-32(fp)
   8d00c:	1884d83a 	srl	r2,r3,r2
   8d010:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
   8d014:	e0bff917 	ldw	r2,-28(fp)
   8d018:	108002a8 	cmpgeui	r2,r2,10
   8d01c:	1000041e 	bne	r2,zero,8d030 <alt_printf+0x17c>
                            c = '0' + digit;
   8d020:	e0bff917 	ldw	r2,-28(fp)
   8d024:	10800c04 	addi	r2,r2,48
   8d028:	e0bffc05 	stb	r2,-16(fp)
   8d02c:	00000306 	br	8d03c <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
   8d030:	e0bff917 	ldw	r2,-28(fp)
   8d034:	108015c4 	addi	r2,r2,87
   8d038:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
   8d03c:	e13ffc07 	ldb	r4,-16(fp)
   8d040:	008d10c0 	call	8d10c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   8d044:	e0bff817 	ldw	r2,-32(fp)
   8d048:	10bfff04 	addi	r2,r2,-4
   8d04c:	e0bff815 	stw	r2,-32(fp)
   8d050:	e0bff817 	ldw	r2,-32(fp)
   8d054:	1004403a 	cmpge	r2,r2,zero
   8d058:	103fe51e 	bne	r2,zero,8cff0 <alt_printf+0x13c>
   8d05c:	00001a06 	br	8d0c8 <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   8d060:	e0bffc07 	ldb	r2,-16(fp)
   8d064:	10801cd8 	cmpnei	r2,r2,115
   8d068:	1000171e 	bne	r2,zero,8d0c8 <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   8d06c:	e0fffe17 	ldw	r3,-8(fp)
   8d070:	18800104 	addi	r2,r3,4
   8d074:	e0bffe15 	stw	r2,-8(fp)
   8d078:	1805883a 	mov	r2,r3
   8d07c:	10800017 	ldw	r2,0(r2)
   8d080:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
   8d084:	00000906 	br	8d0ac <alt_printf+0x1f8>
                      alt_putchar(*s++);
   8d088:	e0bff717 	ldw	r2,-36(fp)
   8d08c:	10800003 	ldbu	r2,0(r2)
   8d090:	11003fcc 	andi	r4,r2,255
   8d094:	2100201c 	xori	r4,r4,128
   8d098:	213fe004 	addi	r4,r4,-128
   8d09c:	e0bff717 	ldw	r2,-36(fp)
   8d0a0:	10800044 	addi	r2,r2,1
   8d0a4:	e0bff715 	stw	r2,-36(fp)
   8d0a8:	008d10c0 	call	8d10c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   8d0ac:	e0bff717 	ldw	r2,-36(fp)
   8d0b0:	10800003 	ldbu	r2,0(r2)
   8d0b4:	10803fcc 	andi	r2,r2,255
   8d0b8:	1080201c 	xori	r2,r2,128
   8d0bc:	10bfe004 	addi	r2,r2,-128
   8d0c0:	1004c03a 	cmpne	r2,r2,zero
   8d0c4:	103ff01e 	bne	r2,zero,8d088 <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   8d0c8:	e0bffd17 	ldw	r2,-12(fp)
   8d0cc:	10800003 	ldbu	r2,0(r2)
   8d0d0:	e0bffc05 	stb	r2,-16(fp)
   8d0d4:	e0bffc07 	ldb	r2,-16(fp)
   8d0d8:	1004c03a 	cmpne	r2,r2,zero
   8d0dc:	1007883a 	mov	r3,r2
   8d0e0:	e0bffd17 	ldw	r2,-12(fp)
   8d0e4:	10800044 	addi	r2,r2,1
   8d0e8:	e0bffd15 	stw	r2,-12(fp)
   8d0ec:	18803fcc 	andi	r2,r3,255
   8d0f0:	1004c03a 	cmpne	r2,r2,zero
   8d0f4:	103f7c1e 	bne	r2,zero,8cee8 <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
   8d0f8:	e037883a 	mov	sp,fp
   8d0fc:	dfc00117 	ldw	ra,4(sp)
   8d100:	df000017 	ldw	fp,0(sp)
   8d104:	dec00504 	addi	sp,sp,20
   8d108:	f800283a 	ret

0008d10c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   8d10c:	defffd04 	addi	sp,sp,-12
   8d110:	dfc00215 	stw	ra,8(sp)
   8d114:	df000115 	stw	fp,4(sp)
   8d118:	df000104 	addi	fp,sp,4
   8d11c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   8d120:	008002b4 	movhi	r2,10
   8d124:	10acc204 	addi	r2,r2,-19704
   8d128:	10800017 	ldw	r2,0(r2)
   8d12c:	11400217 	ldw	r5,8(r2)
   8d130:	e13fff17 	ldw	r4,-4(fp)
   8d134:	00984600 	call	98460 <putc>
#endif
}
   8d138:	e037883a 	mov	sp,fp
   8d13c:	dfc00117 	ldw	ra,4(sp)
   8d140:	df000017 	ldw	fp,0(sp)
   8d144:	dec00204 	addi	sp,sp,8
   8d148:	f800283a 	ret

0008d14c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8d14c:	defff704 	addi	sp,sp,-36
   8d150:	dfc00815 	stw	ra,32(sp)
   8d154:	df000715 	stw	fp,28(sp)
   8d158:	df000704 	addi	fp,sp,28
   8d15c:	e13ffb15 	stw	r4,-20(fp)
   8d160:	e17ffc15 	stw	r5,-16(fp)
   8d164:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8d168:	e0bffb17 	ldw	r2,-20(fp)
   8d16c:	1004803a 	cmplt	r2,r2,zero
   8d170:	1000091e 	bne	r2,zero,8d198 <read+0x4c>
   8d174:	e13ffb17 	ldw	r4,-20(fp)
   8d178:	01400304 	movi	r5,12
   8d17c:	0082b040 	call	82b04 <__mulsi3>
   8d180:	1007883a 	mov	r3,r2
   8d184:	008002b4 	movhi	r2,10
   8d188:	10a83b04 	addi	r2,r2,-24340
   8d18c:	1887883a 	add	r3,r3,r2
   8d190:	e0ffff15 	stw	r3,-4(fp)
   8d194:	00000106 	br	8d19c <read+0x50>
   8d198:	e03fff15 	stw	zero,-4(fp)
   8d19c:	e0bfff17 	ldw	r2,-4(fp)
   8d1a0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8d1a4:	e0bffa17 	ldw	r2,-24(fp)
   8d1a8:	1005003a 	cmpeq	r2,r2,zero
   8d1ac:	1000241e 	bne	r2,zero,8d240 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8d1b0:	e0bffa17 	ldw	r2,-24(fp)
   8d1b4:	10800217 	ldw	r2,8(r2)
   8d1b8:	108000cc 	andi	r2,r2,3
   8d1bc:	10800060 	cmpeqi	r2,r2,1
   8d1c0:	10001a1e 	bne	r2,zero,8d22c <read+0xe0>
   8d1c4:	e0bffa17 	ldw	r2,-24(fp)
   8d1c8:	10800017 	ldw	r2,0(r2)
   8d1cc:	10800517 	ldw	r2,20(r2)
   8d1d0:	1005003a 	cmpeq	r2,r2,zero
   8d1d4:	1000151e 	bne	r2,zero,8d22c <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8d1d8:	e0bffa17 	ldw	r2,-24(fp)
   8d1dc:	10800017 	ldw	r2,0(r2)
   8d1e0:	10800517 	ldw	r2,20(r2)
   8d1e4:	e17ffc17 	ldw	r5,-16(fp)
   8d1e8:	e1bffd17 	ldw	r6,-12(fp)
   8d1ec:	e13ffa17 	ldw	r4,-24(fp)
   8d1f0:	103ee83a 	callr	r2
   8d1f4:	e0bff915 	stw	r2,-28(fp)
   8d1f8:	e0bff917 	ldw	r2,-28(fp)
   8d1fc:	1004403a 	cmpge	r2,r2,zero
   8d200:	1000071e 	bne	r2,zero,8d220 <read+0xd4>
        {
          ALT_ERRNO = -rval;
   8d204:	008d2700 	call	8d270 <alt_get_errno>
   8d208:	e0fff917 	ldw	r3,-28(fp)
   8d20c:	00c7c83a 	sub	r3,zero,r3
   8d210:	10c00015 	stw	r3,0(r2)
          return -1;
   8d214:	00bfffc4 	movi	r2,-1
   8d218:	e0bffe15 	stw	r2,-8(fp)
   8d21c:	00000e06 	br	8d258 <read+0x10c>
        }
        return rval;
   8d220:	e0bff917 	ldw	r2,-28(fp)
   8d224:	e0bffe15 	stw	r2,-8(fp)
   8d228:	00000b06 	br	8d258 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8d22c:	008d2700 	call	8d270 <alt_get_errno>
   8d230:	1007883a 	mov	r3,r2
   8d234:	00800344 	movi	r2,13
   8d238:	18800015 	stw	r2,0(r3)
   8d23c:	00000406 	br	8d250 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8d240:	008d2700 	call	8d270 <alt_get_errno>
   8d244:	1007883a 	mov	r3,r2
   8d248:	00801444 	movi	r2,81
   8d24c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8d250:	00bfffc4 	movi	r2,-1
   8d254:	e0bffe15 	stw	r2,-8(fp)
   8d258:	e0bffe17 	ldw	r2,-8(fp)
}
   8d25c:	e037883a 	mov	sp,fp
   8d260:	dfc00117 	ldw	ra,4(sp)
   8d264:	df000017 	ldw	fp,0(sp)
   8d268:	dec00204 	addi	sp,sp,8
   8d26c:	f800283a 	ret

0008d270 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8d270:	defffd04 	addi	sp,sp,-12
   8d274:	dfc00215 	stw	ra,8(sp)
   8d278:	df000115 	stw	fp,4(sp)
   8d27c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8d280:	008002b4 	movhi	r2,10
   8d284:	10accd04 	addi	r2,r2,-19660
   8d288:	10800017 	ldw	r2,0(r2)
   8d28c:	1005003a 	cmpeq	r2,r2,zero
   8d290:	1000061e 	bne	r2,zero,8d2ac <alt_get_errno+0x3c>
   8d294:	008002b4 	movhi	r2,10
   8d298:	10accd04 	addi	r2,r2,-19660
   8d29c:	10800017 	ldw	r2,0(r2)
   8d2a0:	103ee83a 	callr	r2
   8d2a4:	e0bfff15 	stw	r2,-4(fp)
   8d2a8:	00000306 	br	8d2b8 <alt_get_errno+0x48>
   8d2ac:	008002b4 	movhi	r2,10
   8d2b0:	10b3bc04 	addi	r2,r2,-12560
   8d2b4:	e0bfff15 	stw	r2,-4(fp)
   8d2b8:	e0bfff17 	ldw	r2,-4(fp)
}
   8d2bc:	e037883a 	mov	sp,fp
   8d2c0:	dfc00117 	ldw	ra,4(sp)
   8d2c4:	df000017 	ldw	fp,0(sp)
   8d2c8:	dec00204 	addi	sp,sp,8
   8d2cc:	f800283a 	ret

0008d2d0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8d2d0:	defffc04 	addi	sp,sp,-16
   8d2d4:	dfc00315 	stw	ra,12(sp)
   8d2d8:	df000215 	stw	fp,8(sp)
   8d2dc:	dc000115 	stw	r16,4(sp)
   8d2e0:	df000104 	addi	fp,sp,4
   8d2e4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   8d2e8:	e0bfff17 	ldw	r2,-4(fp)
   8d2ec:	108000d0 	cmplti	r2,r2,3
   8d2f0:	10000f1e 	bne	r2,zero,8d330 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   8d2f4:	e13fff17 	ldw	r4,-4(fp)
   8d2f8:	040002b4 	movhi	r16,10
   8d2fc:	84283b04 	addi	r16,r16,-24340
   8d300:	01400304 	movi	r5,12
   8d304:	0082b040 	call	82b04 <__mulsi3>
   8d308:	1405883a 	add	r2,r2,r16
   8d30c:	10800204 	addi	r2,r2,8
   8d310:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8d314:	e13fff17 	ldw	r4,-4(fp)
   8d318:	040002b4 	movhi	r16,10
   8d31c:	84283b04 	addi	r16,r16,-24340
   8d320:	01400304 	movi	r5,12
   8d324:	0082b040 	call	82b04 <__mulsi3>
   8d328:	1405883a 	add	r2,r2,r16
   8d32c:	10000015 	stw	zero,0(r2)
  }
}
   8d330:	e037883a 	mov	sp,fp
   8d334:	dfc00217 	ldw	ra,8(sp)
   8d338:	df000117 	ldw	fp,4(sp)
   8d33c:	dc000017 	ldw	r16,0(sp)
   8d340:	dec00304 	addi	sp,sp,12
   8d344:	f800283a 	ret

0008d348 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8d348:	defff804 	addi	sp,sp,-32
   8d34c:	df000715 	stw	fp,28(sp)
   8d350:	df000704 	addi	fp,sp,28
   8d354:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d358:	0005303a 	rdctl	r2,status
   8d35c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d360:	e0fffb17 	ldw	r3,-20(fp)
   8d364:	00bfff84 	movi	r2,-2
   8d368:	1884703a 	and	r2,r3,r2
   8d36c:	1001703a 	wrctl	status,r2
  
  return context;
   8d370:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8d374:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8d378:	d0a00e17 	ldw	r2,-32712(gp)
   8d37c:	10c000c4 	addi	r3,r2,3
   8d380:	00bfff04 	movi	r2,-4
   8d384:	1884703a 	and	r2,r3,r2
   8d388:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8d38c:	d0e00e17 	ldw	r3,-32712(gp)
   8d390:	e0bffe17 	ldw	r2,-8(fp)
   8d394:	1887883a 	add	r3,r3,r2
   8d398:	00800434 	movhi	r2,16
   8d39c:	10800004 	addi	r2,r2,0
   8d3a0:	10c0072e 	bgeu	r2,r3,8d3c0 <sbrk+0x78>
   8d3a4:	e0bffd17 	ldw	r2,-12(fp)
   8d3a8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d3ac:	e0bffa17 	ldw	r2,-24(fp)
   8d3b0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8d3b4:	00bfffc4 	movi	r2,-1
   8d3b8:	e0bfff15 	stw	r2,-4(fp)
   8d3bc:	00000c06 	br	8d3f0 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   8d3c0:	d0a00e17 	ldw	r2,-32712(gp)
   8d3c4:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   8d3c8:	d0e00e17 	ldw	r3,-32712(gp)
   8d3cc:	e0bffe17 	ldw	r2,-8(fp)
   8d3d0:	1885883a 	add	r2,r3,r2
   8d3d4:	d0a00e15 	stw	r2,-32712(gp)
   8d3d8:	e0bffd17 	ldw	r2,-12(fp)
   8d3dc:	e0bff915 	stw	r2,-28(fp)
   8d3e0:	e0bff917 	ldw	r2,-28(fp)
   8d3e4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8d3e8:	e0bffc17 	ldw	r2,-16(fp)
   8d3ec:	e0bfff15 	stw	r2,-4(fp)
   8d3f0:	e0bfff17 	ldw	r2,-4(fp)
} 
   8d3f4:	e037883a 	mov	sp,fp
   8d3f8:	df000017 	ldw	fp,0(sp)
   8d3fc:	dec00104 	addi	sp,sp,4
   8d400:	f800283a 	ret

0008d404 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8d404:	defff704 	addi	sp,sp,-36
   8d408:	dfc00815 	stw	ra,32(sp)
   8d40c:	df000715 	stw	fp,28(sp)
   8d410:	df000704 	addi	fp,sp,28
   8d414:	e13ffb15 	stw	r4,-20(fp)
   8d418:	e17ffc15 	stw	r5,-16(fp)
   8d41c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8d420:	e0bffb17 	ldw	r2,-20(fp)
   8d424:	1004803a 	cmplt	r2,r2,zero
   8d428:	1000091e 	bne	r2,zero,8d450 <write+0x4c>
   8d42c:	e13ffb17 	ldw	r4,-20(fp)
   8d430:	01400304 	movi	r5,12
   8d434:	0082b040 	call	82b04 <__mulsi3>
   8d438:	1007883a 	mov	r3,r2
   8d43c:	008002b4 	movhi	r2,10
   8d440:	10a83b04 	addi	r2,r2,-24340
   8d444:	1887883a 	add	r3,r3,r2
   8d448:	e0ffff15 	stw	r3,-4(fp)
   8d44c:	00000106 	br	8d454 <write+0x50>
   8d450:	e03fff15 	stw	zero,-4(fp)
   8d454:	e0bfff17 	ldw	r2,-4(fp)
   8d458:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8d45c:	e0bffa17 	ldw	r2,-24(fp)
   8d460:	1005003a 	cmpeq	r2,r2,zero
   8d464:	1000241e 	bne	r2,zero,8d4f8 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8d468:	e0bffa17 	ldw	r2,-24(fp)
   8d46c:	10800217 	ldw	r2,8(r2)
   8d470:	108000cc 	andi	r2,r2,3
   8d474:	1005003a 	cmpeq	r2,r2,zero
   8d478:	10001a1e 	bne	r2,zero,8d4e4 <write+0xe0>
   8d47c:	e0bffa17 	ldw	r2,-24(fp)
   8d480:	10800017 	ldw	r2,0(r2)
   8d484:	10800617 	ldw	r2,24(r2)
   8d488:	1005003a 	cmpeq	r2,r2,zero
   8d48c:	1000151e 	bne	r2,zero,8d4e4 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8d490:	e0bffa17 	ldw	r2,-24(fp)
   8d494:	10800017 	ldw	r2,0(r2)
   8d498:	10800617 	ldw	r2,24(r2)
   8d49c:	e17ffc17 	ldw	r5,-16(fp)
   8d4a0:	e1bffd17 	ldw	r6,-12(fp)
   8d4a4:	e13ffa17 	ldw	r4,-24(fp)
   8d4a8:	103ee83a 	callr	r2
   8d4ac:	e0bff915 	stw	r2,-28(fp)
   8d4b0:	e0bff917 	ldw	r2,-28(fp)
   8d4b4:	1004403a 	cmpge	r2,r2,zero
   8d4b8:	1000071e 	bne	r2,zero,8d4d8 <write+0xd4>
      {
        ALT_ERRNO = -rval;
   8d4bc:	008d5280 	call	8d528 <alt_get_errno>
   8d4c0:	e0fff917 	ldw	r3,-28(fp)
   8d4c4:	00c7c83a 	sub	r3,zero,r3
   8d4c8:	10c00015 	stw	r3,0(r2)
        return -1;
   8d4cc:	00bfffc4 	movi	r2,-1
   8d4d0:	e0bffe15 	stw	r2,-8(fp)
   8d4d4:	00000e06 	br	8d510 <write+0x10c>
      }
      return rval;
   8d4d8:	e0bff917 	ldw	r2,-28(fp)
   8d4dc:	e0bffe15 	stw	r2,-8(fp)
   8d4e0:	00000b06 	br	8d510 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8d4e4:	008d5280 	call	8d528 <alt_get_errno>
   8d4e8:	1007883a 	mov	r3,r2
   8d4ec:	00800344 	movi	r2,13
   8d4f0:	18800015 	stw	r2,0(r3)
   8d4f4:	00000406 	br	8d508 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8d4f8:	008d5280 	call	8d528 <alt_get_errno>
   8d4fc:	1007883a 	mov	r3,r2
   8d500:	00801444 	movi	r2,81
   8d504:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8d508:	00bfffc4 	movi	r2,-1
   8d50c:	e0bffe15 	stw	r2,-8(fp)
   8d510:	e0bffe17 	ldw	r2,-8(fp)
}
   8d514:	e037883a 	mov	sp,fp
   8d518:	dfc00117 	ldw	ra,4(sp)
   8d51c:	df000017 	ldw	fp,0(sp)
   8d520:	dec00204 	addi	sp,sp,8
   8d524:	f800283a 	ret

0008d528 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8d528:	defffd04 	addi	sp,sp,-12
   8d52c:	dfc00215 	stw	ra,8(sp)
   8d530:	df000115 	stw	fp,4(sp)
   8d534:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8d538:	008002b4 	movhi	r2,10
   8d53c:	10accd04 	addi	r2,r2,-19660
   8d540:	10800017 	ldw	r2,0(r2)
   8d544:	1005003a 	cmpeq	r2,r2,zero
   8d548:	1000061e 	bne	r2,zero,8d564 <alt_get_errno+0x3c>
   8d54c:	008002b4 	movhi	r2,10
   8d550:	10accd04 	addi	r2,r2,-19660
   8d554:	10800017 	ldw	r2,0(r2)
   8d558:	103ee83a 	callr	r2
   8d55c:	e0bfff15 	stw	r2,-4(fp)
   8d560:	00000306 	br	8d570 <alt_get_errno+0x48>
   8d564:	008002b4 	movhi	r2,10
   8d568:	10b3bc04 	addi	r2,r2,-12560
   8d56c:	e0bfff15 	stw	r2,-4(fp)
   8d570:	e0bfff17 	ldw	r2,-4(fp)
}
   8d574:	e037883a 	mov	sp,fp
   8d578:	dfc00117 	ldw	ra,4(sp)
   8d57c:	df000017 	ldw	fp,0(sp)
   8d580:	dec00204 	addi	sp,sp,8
   8d584:	f800283a 	ret

0008d588 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   8d588:	deffdf04 	addi	sp,sp,-132
   8d58c:	dfc02015 	stw	ra,128(sp)
   8d590:	df001f15 	stw	fp,124(sp)
   8d594:	df001f04 	addi	fp,sp,124
   8d598:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   8d59c:	e17fe204 	addi	r5,fp,-120
   8d5a0:	01003fc4 	movi	r4,255
   8d5a4:	00953e00 	call	953e0 <OSTaskQuery>
   8d5a8:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   8d5ac:	e0bffe83 	ldbu	r2,-6(fp)
   8d5b0:	10803fcc 	andi	r2,r2,255
   8d5b4:	1004c03a 	cmpne	r2,r2,zero
   8d5b8:	1000191e 	bne	r2,zero,8d620 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
   8d5bc:	e0bfee83 	ldbu	r2,-70(fp)
   8d5c0:	10803fcc 	andi	r2,r2,255
   8d5c4:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   8d5c8:	d1270217 	ldw	r4,-25592(gp)
   8d5cc:	e17ffd04 	addi	r5,fp,-12
   8d5d0:	009392c0 	call	9392c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   8d5d4:	e0bffe43 	ldbu	r2,-7(fp)
   8d5d8:	10803fcc 	andi	r2,r2,255
   8d5dc:	1005003a 	cmpeq	r2,r2,zero
   8d5e0:	1000071e 	bne	r2,zero,8d600 <__env_lock+0x78>
   8d5e4:	d0e00f17 	ldw	r3,-32708(gp)
   8d5e8:	e0bfe117 	ldw	r2,-124(fp)
   8d5ec:	10c0041e 	bne	r2,r3,8d600 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
   8d5f0:	d0a70117 	ldw	r2,-25596(gp)
   8d5f4:	10800044 	addi	r2,r2,1
   8d5f8:	d0a70115 	stw	r2,-25596(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
   8d5fc:	00000806 	br	8d620 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   8d600:	d1270217 	ldw	r4,-25592(gp)
   8d604:	e1bffe84 	addi	r6,fp,-6
   8d608:	000b883a 	mov	r5,zero
   8d60c:	009340c0 	call	9340c <OSSemPend>
    locks  = 1;
   8d610:	00800044 	movi	r2,1
   8d614:	d0a70115 	stw	r2,-25596(gp)
    lockid = id;
   8d618:	e0bfe117 	ldw	r2,-124(fp)
   8d61c:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   8d620:	e037883a 	mov	sp,fp
   8d624:	dfc00117 	ldw	ra,4(sp)
   8d628:	df000017 	ldw	fp,0(sp)
   8d62c:	dec00204 	addi	sp,sp,8
   8d630:	f800283a 	ret

0008d634 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   8d634:	defffd04 	addi	sp,sp,-12
   8d638:	dfc00215 	stw	ra,8(sp)
   8d63c:	df000115 	stw	fp,4(sp)
   8d640:	df000104 	addi	fp,sp,4
   8d644:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   8d648:	d0a70117 	ldw	r2,-25596(gp)
   8d64c:	1005003a 	cmpeq	r2,r2,zero
   8d650:	10000a1e 	bne	r2,zero,8d67c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   8d654:	d0a70117 	ldw	r2,-25596(gp)
   8d658:	10bfffc4 	addi	r2,r2,-1
   8d65c:	d0a70115 	stw	r2,-25596(gp)
   8d660:	d0a70117 	ldw	r2,-25596(gp)
   8d664:	1004c03a 	cmpne	r2,r2,zero
   8d668:	1000041e 	bne	r2,zero,8d67c <__env_unlock+0x48>
  {
    lockid = -1;
   8d66c:	00bfffc4 	movi	r2,-1
   8d670:	d0a00f15 	stw	r2,-32708(gp)
    OSSemPost( alt_envsem );
   8d674:	d1270217 	ldw	r4,-25592(gp)
   8d678:	00938040 	call	93804 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   8d67c:	e037883a 	mov	sp,fp
   8d680:	dfc00117 	ldw	ra,4(sp)
   8d684:	df000017 	ldw	fp,0(sp)
   8d688:	dec00204 	addi	sp,sp,8
   8d68c:	f800283a 	ret

0008d690 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   8d690:	deffdb04 	addi	sp,sp,-148
   8d694:	dfc02415 	stw	ra,144(sp)
   8d698:	df002315 	stw	fp,140(sp)
   8d69c:	df002304 	addi	fp,sp,140
   8d6a0:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8d6a4:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   8d6a8:	008002b4 	movhi	r2,10
   8d6ac:	10b3c644 	addi	r2,r2,-12519
   8d6b0:	10800003 	ldbu	r2,0(r2)
   8d6b4:	10803fcc 	andi	r2,r2,255
   8d6b8:	10800058 	cmpnei	r2,r2,1
   8d6bc:	1000311e 	bne	r2,zero,8d784 <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   8d6c0:	e17fe204 	addi	r5,fp,-120
   8d6c4:	01003fc4 	movi	r4,255
   8d6c8:	00953e00 	call	953e0 <OSTaskQuery>
   8d6cc:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   8d6d0:	e0bffe83 	ldbu	r2,-6(fp)
   8d6d4:	10803fcc 	andi	r2,r2,255
   8d6d8:	1004c03a 	cmpne	r2,r2,zero
   8d6dc:	1000291e 	bne	r2,zero,8d784 <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
   8d6e0:	e0bfee83 	ldbu	r2,-70(fp)
   8d6e4:	10803fcc 	andi	r2,r2,255
   8d6e8:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   8d6ec:	d1270417 	ldw	r4,-25584(gp)
   8d6f0:	e17ffd04 	addi	r5,fp,-12
   8d6f4:	009392c0 	call	9392c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d6f8:	0005303a 	rdctl	r2,status
   8d6fc:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d700:	e0ffdf17 	ldw	r3,-132(fp)
   8d704:	00bfff84 	movi	r2,-2
   8d708:	1884703a 	and	r2,r3,r2
   8d70c:	1001703a 	wrctl	status,r2
  
  return context;
   8d710:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
   8d714:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
   8d718:	e0bffd0b 	ldhu	r2,-12(fp)
   8d71c:	10bfffcc 	andi	r2,r2,65535
   8d720:	1004c03a 	cmpne	r2,r2,zero
   8d724:	10000b1e 	bne	r2,zero,8d754 <__malloc_lock+0xc4>
   8d728:	d0e01017 	ldw	r3,-32704(gp)
   8d72c:	e0bfe117 	ldw	r2,-124(fp)
   8d730:	10c0081e 	bne	r2,r3,8d754 <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
   8d734:	d0a70317 	ldw	r2,-25588(gp)
   8d738:	10800044 	addi	r2,r2,1
   8d73c:	d0a70315 	stw	r2,-25588(gp)
   8d740:	e0bfe017 	ldw	r2,-128(fp)
   8d744:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d748:	e0bfde17 	ldw	r2,-136(fp)
   8d74c:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
   8d750:	00000c06 	br	8d784 <__malloc_lock+0xf4>
   8d754:	e0bfe017 	ldw	r2,-128(fp)
   8d758:	e0bfdd15 	stw	r2,-140(fp)
   8d75c:	e0bfdd17 	ldw	r2,-140(fp)
   8d760:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   8d764:	d1270417 	ldw	r4,-25584(gp)
   8d768:	e1bffe84 	addi	r6,fp,-6
   8d76c:	000b883a 	mov	r5,zero
   8d770:	009340c0 	call	9340c <OSSemPend>
    locks  = 1;
   8d774:	00800044 	movi	r2,1
   8d778:	d0a70315 	stw	r2,-25588(gp)
    lockid = id;
   8d77c:	e0bfe117 	ldw	r2,-124(fp)
   8d780:	d0a01015 	stw	r2,-32704(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   8d784:	e037883a 	mov	sp,fp
   8d788:	dfc00117 	ldw	ra,4(sp)
   8d78c:	df000017 	ldw	fp,0(sp)
   8d790:	dec00204 	addi	sp,sp,8
   8d794:	f800283a 	ret

0008d798 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8d798:	defff804 	addi	sp,sp,-32
   8d79c:	dfc00715 	stw	ra,28(sp)
   8d7a0:	df000615 	stw	fp,24(sp)
   8d7a4:	df000604 	addi	fp,sp,24
   8d7a8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8d7ac:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
   8d7b0:	008002b4 	movhi	r2,10
   8d7b4:	10b3c644 	addi	r2,r2,-12519
   8d7b8:	10800003 	ldbu	r2,0(r2)
   8d7bc:	10803fcc 	andi	r2,r2,255
   8d7c0:	10800058 	cmpnei	r2,r2,1
   8d7c4:	1000231e 	bne	r2,zero,8d854 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d7c8:	0005303a 	rdctl	r2,status
   8d7cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d7d0:	e0fffd17 	ldw	r3,-12(fp)
   8d7d4:	00bfff84 	movi	r2,-2
   8d7d8:	1884703a 	and	r2,r3,r2
   8d7dc:	1001703a 	wrctl	status,r2
  
  return context;
   8d7e0:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
   8d7e4:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
   8d7e8:	d0a70317 	ldw	r2,-25588(gp)
   8d7ec:	1004c03a 	cmpne	r2,r2,zero
   8d7f0:	1000051e 	bne	r2,zero,8d808 <__malloc_unlock+0x70>
   8d7f4:	e0bffe17 	ldw	r2,-8(fp)
   8d7f8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d7fc:	e0bffc17 	ldw	r2,-16(fp)
   8d800:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   8d804:	00001306 	br	8d854 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   8d808:	d0a70317 	ldw	r2,-25588(gp)
   8d80c:	10bfffc4 	addi	r2,r2,-1
   8d810:	d0a70315 	stw	r2,-25588(gp)
   8d814:	d0a70317 	ldw	r2,-25588(gp)
   8d818:	1004c03a 	cmpne	r2,r2,zero
   8d81c:	1000091e 	bne	r2,zero,8d844 <__malloc_unlock+0xac>
  {
    lockid = -1;
   8d820:	00bfffc4 	movi	r2,-1
   8d824:	d0a01015 	stw	r2,-32704(gp)
   8d828:	e0bffe17 	ldw	r2,-8(fp)
   8d82c:	e0bffb15 	stw	r2,-20(fp)
   8d830:	e0bffb17 	ldw	r2,-20(fp)
   8d834:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   8d838:	d1270417 	ldw	r4,-25584(gp)
   8d83c:	00938040 	call	93804 <OSSemPost>
   8d840:	00000406 	br	8d854 <__malloc_unlock+0xbc>
   8d844:	e0bffe17 	ldw	r2,-8(fp)
   8d848:	e0bffa15 	stw	r2,-24(fp)
   8d84c:	e0bffa17 	ldw	r2,-24(fp)
   8d850:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   8d854:	e037883a 	mov	sp,fp
   8d858:	dfc00117 	ldw	ra,4(sp)
   8d85c:	df000017 	ldw	fp,0(sp)
   8d860:	dec00204 	addi	sp,sp,8
   8d864:	f800283a 	ret

0008d868 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   8d868:	defff604 	addi	sp,sp,-40
   8d86c:	dfc00915 	stw	ra,36(sp)
   8d870:	df000815 	stw	fp,32(sp)
   8d874:	df000804 	addi	fp,sp,32
   8d878:	e13ffc15 	stw	r4,-16(fp)
   8d87c:	e17ffd15 	stw	r5,-12(fp)
   8d880:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8d884:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   8d888:	e0bffe17 	ldw	r2,-8(fp)
   8d88c:	1004c03a 	cmpne	r2,r2,zero
   8d890:	1000021e 	bne	r2,zero,8d89c <OSEventNameGet+0x34>
        return (0);
   8d894:	e03fff15 	stw	zero,-4(fp)
   8d898:	00003906 	br	8d980 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   8d89c:	e0bffc17 	ldw	r2,-16(fp)
   8d8a0:	1004c03a 	cmpne	r2,r2,zero
   8d8a4:	1000051e 	bne	r2,zero,8d8bc <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
   8d8a8:	e0fffe17 	ldw	r3,-8(fp)
   8d8ac:	00800104 	movi	r2,4
   8d8b0:	18800005 	stb	r2,0(r3)
        return (0);
   8d8b4:	e03fff15 	stw	zero,-4(fp)
   8d8b8:	00003106 	br	8d980 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   8d8bc:	e0bffd17 	ldw	r2,-12(fp)
   8d8c0:	1004c03a 	cmpne	r2,r2,zero
   8d8c4:	1000051e 	bne	r2,zero,8d8dc <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
   8d8c8:	e0fffe17 	ldw	r3,-8(fp)
   8d8cc:	00800304 	movi	r2,12
   8d8d0:	18800005 	stb	r2,0(r3)
        return (0);
   8d8d4:	e03fff15 	stw	zero,-4(fp)
   8d8d8:	00002906 	br	8d980 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   8d8dc:	d0a71303 	ldbu	r2,-25524(gp)
   8d8e0:	10803fcc 	andi	r2,r2,255
   8d8e4:	1005003a 	cmpeq	r2,r2,zero
   8d8e8:	1000051e 	bne	r2,zero,8d900 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
   8d8ec:	e0fffe17 	ldw	r3,-8(fp)
   8d8f0:	00800444 	movi	r2,17
   8d8f4:	18800005 	stb	r2,0(r3)
        return (0);
   8d8f8:	e03fff15 	stw	zero,-4(fp)
   8d8fc:	00002006 	br	8d980 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
   8d900:	e0bffc17 	ldw	r2,-16(fp)
   8d904:	10800003 	ldbu	r2,0(r2)
   8d908:	10803fcc 	andi	r2,r2,255
   8d90c:	10bfffc4 	addi	r2,r2,-1
   8d910:	10800128 	cmpgeui	r2,r2,4
   8d914:	1000161e 	bne	r2,zero,8d970 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d918:	0005303a 	rdctl	r2,status
   8d91c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d920:	e0fff917 	ldw	r3,-28(fp)
   8d924:	00bfff84 	movi	r2,-2
   8d928:	1884703a 	and	r2,r3,r2
   8d92c:	1001703a 	wrctl	status,r2
  
  return context;
   8d930:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   8d934:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   8d938:	e0bffc17 	ldw	r2,-16(fp)
   8d93c:	11400384 	addi	r5,r2,14
   8d940:	e13ffd17 	ldw	r4,-12(fp)
   8d944:	008f3ec0 	call	8f3ec <OS_StrCopy>
   8d948:	e0bffb05 	stb	r2,-20(fp)
   8d94c:	e0bffa17 	ldw	r2,-24(fp)
   8d950:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d954:	e0bff817 	ldw	r2,-32(fp)
   8d958:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   8d95c:	e0bffe17 	ldw	r2,-8(fp)
   8d960:	10000005 	stb	zero,0(r2)
    return (len);
   8d964:	e0bffb03 	ldbu	r2,-20(fp)
   8d968:	e0bfff15 	stw	r2,-4(fp)
   8d96c:	00000406 	br	8d980 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   8d970:	e0fffe17 	ldw	r3,-8(fp)
   8d974:	00800044 	movi	r2,1
   8d978:	18800005 	stb	r2,0(r3)
             return (0);
   8d97c:	e03fff15 	stw	zero,-4(fp)
   8d980:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
   8d984:	e037883a 	mov	sp,fp
   8d988:	dfc00117 	ldw	ra,4(sp)
   8d98c:	df000017 	ldw	fp,0(sp)
   8d990:	dec00204 	addi	sp,sp,8
   8d994:	f800283a 	ret

0008d998 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   8d998:	defff604 	addi	sp,sp,-40
   8d99c:	dfc00915 	stw	ra,36(sp)
   8d9a0:	df000815 	stw	fp,32(sp)
   8d9a4:	df000804 	addi	fp,sp,32
   8d9a8:	e13ffd15 	stw	r4,-12(fp)
   8d9ac:	e17ffe15 	stw	r5,-8(fp)
   8d9b0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8d9b4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   8d9b8:	e0bfff17 	ldw	r2,-4(fp)
   8d9bc:	1005003a 	cmpeq	r2,r2,zero
   8d9c0:	1000411e 	bne	r2,zero,8dac8 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   8d9c4:	e0bffd17 	ldw	r2,-12(fp)
   8d9c8:	1004c03a 	cmpne	r2,r2,zero
   8d9cc:	1000041e 	bne	r2,zero,8d9e0 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   8d9d0:	e0ffff17 	ldw	r3,-4(fp)
   8d9d4:	00800104 	movi	r2,4
   8d9d8:	18800005 	stb	r2,0(r3)
        return;
   8d9dc:	00003a06 	br	8dac8 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   8d9e0:	e0bffe17 	ldw	r2,-8(fp)
   8d9e4:	1004c03a 	cmpne	r2,r2,zero
   8d9e8:	1000041e 	bne	r2,zero,8d9fc <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
   8d9ec:	e0ffff17 	ldw	r3,-4(fp)
   8d9f0:	00800304 	movi	r2,12
   8d9f4:	18800005 	stb	r2,0(r3)
        return;
   8d9f8:	00003306 	br	8dac8 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   8d9fc:	d0a71303 	ldbu	r2,-25524(gp)
   8da00:	10803fcc 	andi	r2,r2,255
   8da04:	1005003a 	cmpeq	r2,r2,zero
   8da08:	1000041e 	bne	r2,zero,8da1c <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
   8da0c:	e0ffff17 	ldw	r3,-4(fp)
   8da10:	00800484 	movi	r2,18
   8da14:	18800005 	stb	r2,0(r3)
        return;
   8da18:	00002b06 	br	8dac8 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
   8da1c:	e0bffd17 	ldw	r2,-12(fp)
   8da20:	10800003 	ldbu	r2,0(r2)
   8da24:	10803fcc 	andi	r2,r2,255
   8da28:	10bfffc4 	addi	r2,r2,-1
   8da2c:	10800128 	cmpgeui	r2,r2,4
   8da30:	10000f1e 	bne	r2,zero,8da70 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8da34:	0005303a 	rdctl	r2,status
   8da38:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8da3c:	e0fffa17 	ldw	r3,-24(fp)
   8da40:	00bfff84 	movi	r2,-2
   8da44:	1884703a 	and	r2,r3,r2
   8da48:	1001703a 	wrctl	status,r2
  
  return context;
   8da4c:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   8da50:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   8da54:	e13ffe17 	ldw	r4,-8(fp)
   8da58:	008f46c0 	call	8f46c <OS_StrLen>
   8da5c:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   8da60:	e0bffc03 	ldbu	r2,-16(fp)
   8da64:	10800828 	cmpgeui	r2,r2,32
   8da68:	1000051e 	bne	r2,zero,8da80 <OSEventNameSet+0xe8>
   8da6c:	00000c06 	br	8daa0 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   8da70:	e0ffff17 	ldw	r3,-4(fp)
   8da74:	00800044 	movi	r2,1
   8da78:	18800005 	stb	r2,0(r3)
             return;
   8da7c:	00001206 	br	8dac8 <OSEventNameSet+0x130>
   8da80:	e0bffb17 	ldw	r2,-20(fp)
   8da84:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8da88:	e0bff917 	ldw	r2,-28(fp)
   8da8c:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   8da90:	e0ffff17 	ldw	r3,-4(fp)
   8da94:	008002c4 	movi	r2,11
   8da98:	18800005 	stb	r2,0(r3)
        return;
   8da9c:	00000a06 	br	8dac8 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   8daa0:	e0bffd17 	ldw	r2,-12(fp)
   8daa4:	11000384 	addi	r4,r2,14
   8daa8:	e17ffe17 	ldw	r5,-8(fp)
   8daac:	008f3ec0 	call	8f3ec <OS_StrCopy>
   8dab0:	e0bffb17 	ldw	r2,-20(fp)
   8dab4:	e0bff815 	stw	r2,-32(fp)
   8dab8:	e0bff817 	ldw	r2,-32(fp)
   8dabc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   8dac0:	e0bfff17 	ldw	r2,-4(fp)
   8dac4:	10000005 	stb	zero,0(r2)
}
   8dac8:	e037883a 	mov	sp,fp
   8dacc:	dfc00117 	ldw	ra,4(sp)
   8dad0:	df000017 	ldw	fp,0(sp)
   8dad4:	dec00204 	addi	sp,sp,8
   8dad8:	f800283a 	ret

0008dadc <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   8dadc:	deffe704 	addi	sp,sp,-100
   8dae0:	dfc01815 	stw	ra,96(sp)
   8dae4:	df001715 	stw	fp,92(sp)
   8dae8:	df001704 	addi	fp,sp,92
   8daec:	e13ff615 	stw	r4,-40(fp)
   8daf0:	e17ff715 	stw	r5,-36(fp)
   8daf4:	e1bff815 	stw	r6,-32(fp)
   8daf8:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   8dafc:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   8db00:	e0800217 	ldw	r2,8(fp)
   8db04:	1004c03a 	cmpne	r2,r2,zero
   8db08:	1000021e 	bne	r2,zero,8db14 <OSEventPendMulti+0x38>
        return (0);
   8db0c:	e03fff15 	stw	zero,-4(fp)
   8db10:	00019906 	br	8e178 <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   8db14:	e0bff617 	ldw	r2,-40(fp)
   8db18:	1004c03a 	cmpne	r2,r2,zero
   8db1c:	1000051e 	bne	r2,zero,8db34 <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
   8db20:	e0c00217 	ldw	r3,8(fp)
   8db24:	00800104 	movi	r2,4
   8db28:	18800005 	stb	r2,0(r3)
        return (0);
   8db2c:	e03fff15 	stw	zero,-4(fp)
   8db30:	00019106 	br	8e178 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   8db34:	e0bff717 	ldw	r2,-36(fp)
   8db38:	1004c03a 	cmpne	r2,r2,zero
   8db3c:	1000051e 	bne	r2,zero,8db54 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
   8db40:	e0c00217 	ldw	r3,8(fp)
   8db44:	00800104 	movi	r2,4
   8db48:	18800005 	stb	r2,0(r3)
        return (0);
   8db4c:	e03fff15 	stw	zero,-4(fp)
   8db50:	00018906 	br	8e178 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   8db54:	e0bff817 	ldw	r2,-32(fp)
   8db58:	1004c03a 	cmpne	r2,r2,zero
   8db5c:	1000051e 	bne	r2,zero,8db74 <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
   8db60:	e0c00217 	ldw	r3,8(fp)
   8db64:	00800104 	movi	r2,4
   8db68:	18800005 	stb	r2,0(r3)
        return (0);
   8db6c:	e03fff15 	stw	zero,-4(fp)
   8db70:	00018106 	br	8e178 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   8db74:	e0bff717 	ldw	r2,-36(fp)
   8db78:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   8db7c:	e0bff617 	ldw	r2,-40(fp)
   8db80:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
   8db84:	e0bff517 	ldw	r2,-44(fp)
   8db88:	10800017 	ldw	r2,0(r2)
   8db8c:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
   8db90:	00001806 	br	8dbf4 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   8db94:	e0bff417 	ldw	r2,-48(fp)
   8db98:	10800003 	ldbu	r2,0(r2)
   8db9c:	10803fcc 	andi	r2,r2,255
   8dba0:	e0bffe15 	stw	r2,-8(fp)
   8dba4:	e0fffe17 	ldw	r3,-8(fp)
   8dba8:	188000a0 	cmpeqi	r2,r3,2
   8dbac:	10000b1e 	bne	r2,zero,8dbdc <OSEventPendMulti+0x100>
   8dbb0:	e0fffe17 	ldw	r3,-8(fp)
   8dbb4:	188000e0 	cmpeqi	r2,r3,3
   8dbb8:	1000081e 	bne	r2,zero,8dbdc <OSEventPendMulti+0x100>
   8dbbc:	e0fffe17 	ldw	r3,-8(fp)
   8dbc0:	18800060 	cmpeqi	r2,r3,1
   8dbc4:	1000051e 	bne	r2,zero,8dbdc <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   8dbc8:	e0c00217 	ldw	r3,8(fp)
   8dbcc:	00800044 	movi	r2,1
   8dbd0:	18800005 	stb	r2,0(r3)
                 return (0);
   8dbd4:	e03fff15 	stw	zero,-4(fp)
   8dbd8:	00016706 	br	8e178 <OSEventPendMulti+0x69c>
        }
        pevents++;
   8dbdc:	e0bff517 	ldw	r2,-44(fp)
   8dbe0:	10800104 	addi	r2,r2,4
   8dbe4:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
   8dbe8:	e0bff517 	ldw	r2,-44(fp)
   8dbec:	10800017 	ldw	r2,0(r2)
   8dbf0:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   8dbf4:	e0bff417 	ldw	r2,-48(fp)
   8dbf8:	1004c03a 	cmpne	r2,r2,zero
   8dbfc:	103fe51e 	bne	r2,zero,8db94 <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   8dc00:	d0a71303 	ldbu	r2,-25524(gp)
   8dc04:	10803fcc 	andi	r2,r2,255
   8dc08:	1005003a 	cmpeq	r2,r2,zero
   8dc0c:	1000051e 	bne	r2,zero,8dc24 <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   8dc10:	e0c00217 	ldw	r3,8(fp)
   8dc14:	00800084 	movi	r2,2
   8dc18:	18800005 	stb	r2,0(r3)
        return (0);
   8dc1c:	e03fff15 	stw	zero,-4(fp)
   8dc20:	00015506 	br	8e178 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   8dc24:	d0a70503 	ldbu	r2,-25580(gp)
   8dc28:	10803fcc 	andi	r2,r2,255
   8dc2c:	1005003a 	cmpeq	r2,r2,zero
   8dc30:	1000051e 	bne	r2,zero,8dc48 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   8dc34:	e0c00217 	ldw	r3,8(fp)
   8dc38:	00800344 	movi	r2,13
   8dc3c:	18800005 	stb	r2,0(r3)
        return (0);
   8dc40:	e03fff15 	stw	zero,-4(fp)
   8dc44:	00014c06 	br	8e178 <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8dc48:	0005303a 	rdctl	r2,status
   8dc4c:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8dc50:	e0ffef17 	ldw	r3,-68(fp)
   8dc54:	00bfff84 	movi	r2,-2
   8dc58:	1884703a 	and	r2,r3,r2
   8dc5c:	1001703a 	wrctl	status,r2
  
  return context;
   8dc60:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   8dc64:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
   8dc68:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
   8dc6c:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   8dc70:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
   8dc74:	e0bff617 	ldw	r2,-40(fp)
   8dc78:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
   8dc7c:	e0bff517 	ldw	r2,-44(fp)
   8dc80:	10800017 	ldw	r2,0(r2)
   8dc84:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   8dc88:	00008f06 	br	8dec8 <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
   8dc8c:	e0bff417 	ldw	r2,-48(fp)
   8dc90:	10800003 	ldbu	r2,0(r2)
   8dc94:	10803fcc 	andi	r2,r2,255
   8dc98:	e0bffd15 	stw	r2,-12(fp)
   8dc9c:	e0fffd17 	ldw	r3,-12(fp)
   8dca0:	188000a0 	cmpeqi	r2,r3,2
   8dca4:	1000441e 	bne	r2,zero,8ddb8 <OSEventPendMulti+0x2dc>
   8dca8:	e0fffd17 	ldw	r3,-12(fp)
   8dcac:	188000e0 	cmpeqi	r2,r3,3
   8dcb0:	1000041e 	bne	r2,zero,8dcc4 <OSEventPendMulti+0x1e8>
   8dcb4:	e0fffd17 	ldw	r3,-12(fp)
   8dcb8:	18800060 	cmpeqi	r2,r3,1
   8dcbc:	1000211e 	bne	r2,zero,8dd44 <OSEventPendMulti+0x268>
   8dcc0:	00006f06 	br	8de80 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   8dcc4:	e0bff417 	ldw	r2,-48(fp)
   8dcc8:	1080020b 	ldhu	r2,8(r2)
   8dccc:	10bfffcc 	andi	r2,r2,65535
   8dcd0:	1005003a 	cmpeq	r2,r2,zero
   8dcd4:	1000171e 	bne	r2,zero,8dd34 <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   8dcd8:	e0bff417 	ldw	r2,-48(fp)
   8dcdc:	1080020b 	ldhu	r2,8(r2)
   8dce0:	10bfffc4 	addi	r2,r2,-1
   8dce4:	1007883a 	mov	r3,r2
   8dce8:	e0bff417 	ldw	r2,-48(fp)
   8dcec:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   8dcf0:	e0fff717 	ldw	r3,-36(fp)
   8dcf4:	e0bff417 	ldw	r2,-48(fp)
   8dcf8:	18800015 	stw	r2,0(r3)
   8dcfc:	e0bff717 	ldw	r2,-36(fp)
   8dd00:	10800104 	addi	r2,r2,4
   8dd04:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
   8dd08:	00800044 	movi	r2,1
   8dd0c:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   8dd10:	e0bff817 	ldw	r2,-32(fp)
   8dd14:	10000015 	stw	zero,0(r2)
   8dd18:	e0bff817 	ldw	r2,-32(fp)
   8dd1c:	10800104 	addi	r2,r2,4
   8dd20:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
   8dd24:	e0bff18b 	ldhu	r2,-58(fp)
   8dd28:	10800044 	addi	r2,r2,1
   8dd2c:	e0bff18d 	sth	r2,-58(fp)
   8dd30:	00005f06 	br	8deb0 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   8dd34:	e0bff103 	ldbu	r2,-60(fp)
   8dd38:	10800054 	ori	r2,r2,1
   8dd3c:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
   8dd40:	00005b06 	br	8deb0 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   8dd44:	e0bff417 	ldw	r2,-48(fp)
   8dd48:	10800117 	ldw	r2,4(r2)
   8dd4c:	1005003a 	cmpeq	r2,r2,zero
   8dd50:	1000151e 	bne	r2,zero,8dda8 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   8dd54:	e0bff417 	ldw	r2,-48(fp)
   8dd58:	10c00117 	ldw	r3,4(r2)
   8dd5c:	e0bff817 	ldw	r2,-32(fp)
   8dd60:	10c00015 	stw	r3,0(r2)
   8dd64:	e0bff817 	ldw	r2,-32(fp)
   8dd68:	10800104 	addi	r2,r2,4
   8dd6c:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
   8dd70:	e0bff417 	ldw	r2,-48(fp)
   8dd74:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   8dd78:	e0fff717 	ldw	r3,-36(fp)
   8dd7c:	e0bff417 	ldw	r2,-48(fp)
   8dd80:	18800015 	stw	r2,0(r3)
   8dd84:	e0bff717 	ldw	r2,-36(fp)
   8dd88:	10800104 	addi	r2,r2,4
   8dd8c:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
   8dd90:	00800044 	movi	r2,1
   8dd94:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
   8dd98:	e0bff18b 	ldhu	r2,-58(fp)
   8dd9c:	10800044 	addi	r2,r2,1
   8dda0:	e0bff18d 	sth	r2,-58(fp)
   8dda4:	00004206 	br	8deb0 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   8dda8:	e0bff103 	ldbu	r2,-60(fp)
   8ddac:	10800094 	ori	r2,r2,2
   8ddb0:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
   8ddb4:	00003e06 	br	8deb0 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   8ddb8:	e0bff417 	ldw	r2,-48(fp)
   8ddbc:	10800117 	ldw	r2,4(r2)
   8ddc0:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   8ddc4:	e0bff317 	ldw	r2,-52(fp)
   8ddc8:	1080058b 	ldhu	r2,22(r2)
   8ddcc:	10bfffcc 	andi	r2,r2,65535
   8ddd0:	1005003a 	cmpeq	r2,r2,zero
   8ddd4:	1000261e 	bne	r2,zero,8de70 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   8ddd8:	e0bff317 	ldw	r2,-52(fp)
   8dddc:	11000417 	ldw	r4,16(r2)
   8dde0:	20c00017 	ldw	r3,0(r4)
   8dde4:	e0bff817 	ldw	r2,-32(fp)
   8dde8:	10c00015 	stw	r3,0(r2)
   8ddec:	e0bff817 	ldw	r2,-32(fp)
   8ddf0:	10800104 	addi	r2,r2,4
   8ddf4:	e0bff815 	stw	r2,-32(fp)
   8ddf8:	20c00104 	addi	r3,r4,4
   8ddfc:	e0bff317 	ldw	r2,-52(fp)
   8de00:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   8de04:	e0bff317 	ldw	r2,-52(fp)
   8de08:	10c00417 	ldw	r3,16(r2)
   8de0c:	e0bff317 	ldw	r2,-52(fp)
   8de10:	10800217 	ldw	r2,8(r2)
   8de14:	1880041e 	bne	r3,r2,8de28 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   8de18:	e0bff317 	ldw	r2,-52(fp)
   8de1c:	10c00117 	ldw	r3,4(r2)
   8de20:	e0bff317 	ldw	r2,-52(fp)
   8de24:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   8de28:	e0bff317 	ldw	r2,-52(fp)
   8de2c:	1080058b 	ldhu	r2,22(r2)
   8de30:	10bfffc4 	addi	r2,r2,-1
   8de34:	1007883a 	mov	r3,r2
   8de38:	e0bff317 	ldw	r2,-52(fp)
   8de3c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   8de40:	e0fff717 	ldw	r3,-36(fp)
   8de44:	e0bff417 	ldw	r2,-48(fp)
   8de48:	18800015 	stw	r2,0(r3)
   8de4c:	e0bff717 	ldw	r2,-36(fp)
   8de50:	10800104 	addi	r2,r2,4
   8de54:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
   8de58:	00800044 	movi	r2,1
   8de5c:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
   8de60:	e0bff18b 	ldhu	r2,-58(fp)
   8de64:	10800044 	addi	r2,r2,1
   8de68:	e0bff18d 	sth	r2,-58(fp)
   8de6c:	00001006 	br	8deb0 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   8de70:	e0bff103 	ldbu	r2,-60(fp)
   8de74:	10800114 	ori	r2,r2,4
   8de78:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
   8de7c:	00000c06 	br	8deb0 <OSEventPendMulti+0x3d4>
   8de80:	e0bff017 	ldw	r2,-64(fp)
   8de84:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8de88:	e0bfee17 	ldw	r2,-72(fp)
   8de8c:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   8de90:	e0bff717 	ldw	r2,-36(fp)
   8de94:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   8de98:	e0c00217 	ldw	r3,8(fp)
   8de9c:	00800044 	movi	r2,1
   8dea0:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
   8dea4:	e0bff18b 	ldhu	r2,-58(fp)
   8dea8:	e0bfff15 	stw	r2,-4(fp)
   8deac:	0000b206 	br	8e178 <OSEventPendMulti+0x69c>
        }
        pevents++;
   8deb0:	e0bff517 	ldw	r2,-44(fp)
   8deb4:	10800104 	addi	r2,r2,4
   8deb8:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
   8debc:	e0bff517 	ldw	r2,-44(fp)
   8dec0:	10800017 	ldw	r2,0(r2)
   8dec4:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   8dec8:	e0bff417 	ldw	r2,-48(fp)
   8decc:	1004c03a 	cmpne	r2,r2,zero
   8ded0:	103f6e1e 	bne	r2,zero,8dc8c <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   8ded4:	e0bff203 	ldbu	r2,-56(fp)
   8ded8:	10800058 	cmpnei	r2,r2,1
   8dedc:	10000b1e 	bne	r2,zero,8df0c <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   8dee0:	e0bff717 	ldw	r2,-36(fp)
   8dee4:	10000015 	stw	zero,0(r2)
   8dee8:	e0bff017 	ldw	r2,-64(fp)
   8deec:	e0bfed15 	stw	r2,-76(fp)
   8def0:	e0bfed17 	ldw	r2,-76(fp)
   8def4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   8def8:	e0800217 	ldw	r2,8(fp)
   8defc:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   8df00:	e0fff18b 	ldhu	r3,-58(fp)
   8df04:	e0ffff15 	stw	r3,-4(fp)
   8df08:	00009b06 	br	8e178 <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   8df0c:	d1271417 	ldw	r4,-25520(gp)
   8df10:	d0a71417 	ldw	r2,-25520(gp)
   8df14:	10c00c03 	ldbu	r3,48(r2)
   8df18:	e0bff103 	ldbu	r2,-60(fp)
   8df1c:	1884b03a 	or	r2,r3,r2
   8df20:	1007883a 	mov	r3,r2
   8df24:	00bfe004 	movi	r2,-128
   8df28:	1884b03a 	or	r2,r3,r2
   8df2c:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   8df30:	d0a71417 	ldw	r2,-25520(gp)
   8df34:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   8df38:	d0e71417 	ldw	r3,-25520(gp)
   8df3c:	e0bff90b 	ldhu	r2,-28(fp)
   8df40:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   8df44:	e13ff617 	ldw	r4,-40(fp)
   8df48:	008eb0c0 	call	8eb0c <OS_EventTaskWaitMulti>
   8df4c:	e0bff017 	ldw	r2,-64(fp)
   8df50:	e0bfec15 	stw	r2,-80(fp)
   8df54:	e0bfec17 	ldw	r2,-80(fp)
   8df58:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   8df5c:	008f2a80 	call	8f2a8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8df60:	0005303a 	rdctl	r2,status
   8df64:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8df68:	e0ffeb17 	ldw	r3,-84(fp)
   8df6c:	00bfff84 	movi	r2,-2
   8df70:	1884703a 	and	r2,r3,r2
   8df74:	1001703a 	wrctl	status,r2
  
  return context;
   8df78:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
   8df7c:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   8df80:	d0a71417 	ldw	r2,-25520(gp)
   8df84:	10800c43 	ldbu	r2,49(r2)
   8df88:	10803fcc 	andi	r2,r2,255
   8df8c:	e0bffc15 	stw	r2,-16(fp)
   8df90:	e0fffc17 	ldw	r3,-16(fp)
   8df94:	1805003a 	cmpeq	r2,r3,zero
   8df98:	1000041e 	bne	r2,zero,8dfac <OSEventPendMulti+0x4d0>
   8df9c:	e0fffc17 	ldw	r3,-16(fp)
   8dfa0:	188000a0 	cmpeqi	r2,r3,2
   8dfa4:	1000011e 	bne	r2,zero,8dfac <OSEventPendMulti+0x4d0>
   8dfa8:	00001906 	br	8e010 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   8dfac:	d0a71417 	ldw	r2,-25520(gp)
   8dfb0:	10800717 	ldw	r2,28(r2)
   8dfb4:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   8dfb8:	e0bff417 	ldw	r2,-48(fp)
   8dfbc:	1005003a 	cmpeq	r2,r2,zero
   8dfc0:	10000c1e 	bne	r2,zero,8dff4 <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   8dfc4:	e0fff717 	ldw	r3,-36(fp)
   8dfc8:	e0bff417 	ldw	r2,-48(fp)
   8dfcc:	18800015 	stw	r2,0(r3)
   8dfd0:	e0bff717 	ldw	r2,-36(fp)
   8dfd4:	10800104 	addi	r2,r2,4
   8dfd8:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   8dfdc:	e0bff717 	ldw	r2,-36(fp)
   8dfe0:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   8dfe4:	e0bff18b 	ldhu	r2,-58(fp)
   8dfe8:	10800044 	addi	r2,r2,1
   8dfec:	e0bff18d 	sth	r2,-58(fp)
   8dff0:	00000a06 	br	8e01c <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   8dff4:	d0a71417 	ldw	r2,-25520(gp)
   8dff8:	00c00044 	movi	r3,1
   8dffc:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   8e000:	d1271417 	ldw	r4,-25520(gp)
   8e004:	e17ff617 	ldw	r5,-40(fp)
   8e008:	008ed180 	call	8ed18 <OS_EventTaskRemoveMulti>
             }
			 break;
   8e00c:	00000306 	br	8e01c <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   8e010:	d1271417 	ldw	r4,-25520(gp)
   8e014:	e17ff617 	ldw	r5,-40(fp)
   8e018:	008ed180 	call	8ed18 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
   8e01c:	d0a71417 	ldw	r2,-25520(gp)
   8e020:	10800c43 	ldbu	r2,49(r2)
   8e024:	10803fcc 	andi	r2,r2,255
   8e028:	e0bffb15 	stw	r2,-20(fp)
   8e02c:	e0fffb17 	ldw	r3,-20(fp)
   8e030:	1805003a 	cmpeq	r2,r3,zero
   8e034:	1000041e 	bne	r2,zero,8e048 <OSEventPendMulti+0x56c>
   8e038:	e0fffb17 	ldw	r3,-20(fp)
   8e03c:	188000a0 	cmpeqi	r2,r3,2
   8e040:	10002c1e 	bne	r2,zero,8e0f4 <OSEventPendMulti+0x618>
   8e044:	00003406 	br	8e118 <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   8e048:	e0bff417 	ldw	r2,-48(fp)
   8e04c:	10800003 	ldbu	r2,0(r2)
   8e050:	10803fcc 	andi	r2,r2,255
   8e054:	e0bffa15 	stw	r2,-24(fp)
   8e058:	e0fffa17 	ldw	r3,-24(fp)
   8e05c:	18800050 	cmplti	r2,r3,1
   8e060:	1000151e 	bne	r2,zero,8e0b8 <OSEventPendMulti+0x5dc>
   8e064:	e0fffa17 	ldw	r3,-24(fp)
   8e068:	188000d0 	cmplti	r2,r3,3
   8e06c:	10000a1e 	bne	r2,zero,8e098 <OSEventPendMulti+0x5bc>
   8e070:	e0fffa17 	ldw	r3,-24(fp)
   8e074:	188000e0 	cmpeqi	r2,r3,3
   8e078:	1000011e 	bne	r2,zero,8e080 <OSEventPendMulti+0x5a4>
   8e07c:	00000e06 	br	8e0b8 <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   8e080:	e0bff817 	ldw	r2,-32(fp)
   8e084:	10000015 	stw	zero,0(r2)
   8e088:	e0bff817 	ldw	r2,-32(fp)
   8e08c:	10800104 	addi	r2,r2,4
   8e090:	e0bff815 	stw	r2,-32(fp)
                      break;
   8e094:	00001406 	br	8e0e8 <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   8e098:	d0a71417 	ldw	r2,-25520(gp)
   8e09c:	10c00917 	ldw	r3,36(r2)
   8e0a0:	e0bff817 	ldw	r2,-32(fp)
   8e0a4:	10c00015 	stw	r3,0(r2)
   8e0a8:	e0bff817 	ldw	r2,-32(fp)
   8e0ac:	10800104 	addi	r2,r2,4
   8e0b0:	e0bff815 	stw	r2,-32(fp)
                      break;
   8e0b4:	00000c06 	br	8e0e8 <OSEventPendMulti+0x60c>
   8e0b8:	e0bff017 	ldw	r2,-64(fp)
   8e0bc:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e0c0:	e0bfea17 	ldw	r2,-88(fp)
   8e0c4:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   8e0c8:	e0bff717 	ldw	r2,-36(fp)
   8e0cc:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   8e0d0:	e0c00217 	ldw	r3,8(fp)
   8e0d4:	00800044 	movi	r2,1
   8e0d8:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
   8e0dc:	e0bff18b 	ldhu	r2,-58(fp)
   8e0e0:	e0bfff15 	stw	r2,-4(fp)
   8e0e4:	00002406 	br	8e178 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
   8e0e8:	e0800217 	ldw	r2,8(fp)
   8e0ec:	10000005 	stb	zero,0(r2)
             break;
   8e0f0:	00001106 	br	8e138 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   8e0f4:	e0bff817 	ldw	r2,-32(fp)
   8e0f8:	10000015 	stw	zero,0(r2)
   8e0fc:	e0bff817 	ldw	r2,-32(fp)
   8e100:	10800104 	addi	r2,r2,4
   8e104:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   8e108:	e0c00217 	ldw	r3,8(fp)
   8e10c:	00800384 	movi	r2,14
   8e110:	18800005 	stb	r2,0(r3)
             break;
   8e114:	00000806 	br	8e138 <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   8e118:	e0bff817 	ldw	r2,-32(fp)
   8e11c:	10000015 	stw	zero,0(r2)
   8e120:	e0bff817 	ldw	r2,-32(fp)
   8e124:	10800104 	addi	r2,r2,4
   8e128:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   8e12c:	e0c00217 	ldw	r3,8(fp)
   8e130:	00800284 	movi	r2,10
   8e134:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   8e138:	d0a71417 	ldw	r2,-25520(gp)
   8e13c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   8e140:	d0a71417 	ldw	r2,-25520(gp)
   8e144:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   8e148:	d0a71417 	ldw	r2,-25520(gp)
   8e14c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   8e150:	d0a71417 	ldw	r2,-25520(gp)
   8e154:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   8e158:	d0a71417 	ldw	r2,-25520(gp)
   8e15c:	10000915 	stw	zero,36(r2)
   8e160:	e0bff017 	ldw	r2,-64(fp)
   8e164:	e0bfe915 	stw	r2,-92(fp)
   8e168:	e0bfe917 	ldw	r2,-92(fp)
   8e16c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   8e170:	e0fff18b 	ldhu	r3,-58(fp)
   8e174:	e0ffff15 	stw	r3,-4(fp)
   8e178:	e0bfff17 	ldw	r2,-4(fp)
}
   8e17c:	e037883a 	mov	sp,fp
   8e180:	dfc00117 	ldw	ra,4(sp)
   8e184:	df000017 	ldw	fp,0(sp)
   8e188:	dec00204 	addi	sp,sp,8
   8e18c:	f800283a 	ret

0008e190 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   8e190:	defffe04 	addi	sp,sp,-8
   8e194:	dfc00115 	stw	ra,4(sp)
   8e198:	df000015 	stw	fp,0(sp)
   8e19c:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   8e1a0:	00981080 	call	98108 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   8e1a4:	008ef600 	call	8ef60 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   8e1a8:	008efa40 	call	8efa4 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   8e1ac:	008f1080 	call	8f108 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   8e1b0:	008ee840 	call	8ee84 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   8e1b4:	00911b80 	call	911b8 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   8e1b8:	0091b900 	call	91b90 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   8e1bc:	0092eec0 	call	92eec <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   8e1c0:	008f0100 	call	8f010 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   8e1c4:	008f08c0 	call	8f08c <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   8e1c8:	00981240 	call	98124 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   8e1cc:	008f9900 	call	8f990 <OSDebugInit>
#endif
}
   8e1d0:	e037883a 	mov	sp,fp
   8e1d4:	dfc00117 	ldw	ra,4(sp)
   8e1d8:	df000017 	ldw	fp,0(sp)
   8e1dc:	dec00204 	addi	sp,sp,8
   8e1e0:	f800283a 	ret

0008e1e4 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   8e1e4:	defffc04 	addi	sp,sp,-16
   8e1e8:	df000315 	stw	fp,12(sp)
   8e1ec:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   8e1f0:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
   8e1f4:	d0a70543 	ldbu	r2,-25579(gp)
   8e1f8:	10803fcc 	andi	r2,r2,255
   8e1fc:	10800058 	cmpnei	r2,r2,1
   8e200:	1000131e 	bne	r2,zero,8e250 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e204:	0005303a 	rdctl	r2,status
   8e208:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e20c:	e0fffe17 	ldw	r3,-8(fp)
   8e210:	00bfff84 	movi	r2,-2
   8e214:	1884703a 	and	r2,r3,r2
   8e218:	1001703a 	wrctl	status,r2
  
  return context;
   8e21c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   8e220:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
   8e224:	d0a71303 	ldbu	r2,-25524(gp)
   8e228:	10803fcc 	andi	r2,r2,255
   8e22c:	10803fe0 	cmpeqi	r2,r2,255
   8e230:	1000031e 	bne	r2,zero,8e240 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   8e234:	d0a71303 	ldbu	r2,-25524(gp)
   8e238:	10800044 	addi	r2,r2,1
   8e23c:	d0a71305 	stb	r2,-25524(gp)
   8e240:	e0bfff17 	ldw	r2,-4(fp)
   8e244:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e248:	e0bffd17 	ldw	r2,-12(fp)
   8e24c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
   8e250:	e037883a 	mov	sp,fp
   8e254:	df000017 	ldw	fp,0(sp)
   8e258:	dec00104 	addi	sp,sp,4
   8e25c:	f800283a 	ret

0008e260 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   8e260:	defffb04 	addi	sp,sp,-20
   8e264:	dfc00415 	stw	ra,16(sp)
   8e268:	df000315 	stw	fp,12(sp)
   8e26c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   8e270:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
   8e274:	d0a70543 	ldbu	r2,-25579(gp)
   8e278:	10803fcc 	andi	r2,r2,255
   8e27c:	10800058 	cmpnei	r2,r2,1
   8e280:	1000321e 	bne	r2,zero,8e34c <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e284:	0005303a 	rdctl	r2,status
   8e288:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e28c:	e0fffe17 	ldw	r3,-8(fp)
   8e290:	00bfff84 	movi	r2,-2
   8e294:	1884703a 	and	r2,r3,r2
   8e298:	1001703a 	wrctl	status,r2
  
  return context;
   8e29c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   8e2a0:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   8e2a4:	d0a71303 	ldbu	r2,-25524(gp)
   8e2a8:	10803fcc 	andi	r2,r2,255
   8e2ac:	1005003a 	cmpeq	r2,r2,zero
   8e2b0:	1000031e 	bne	r2,zero,8e2c0 <OSIntExit+0x60>
            OSIntNesting--;
   8e2b4:	d0a71303 	ldbu	r2,-25524(gp)
   8e2b8:	10bfffc4 	addi	r2,r2,-1
   8e2bc:	d0a71305 	stb	r2,-25524(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   8e2c0:	d0a71303 	ldbu	r2,-25524(gp)
   8e2c4:	10803fcc 	andi	r2,r2,255
   8e2c8:	1004c03a 	cmpne	r2,r2,zero
   8e2cc:	10001b1e 	bne	r2,zero,8e33c <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   8e2d0:	d0a70503 	ldbu	r2,-25580(gp)
   8e2d4:	10803fcc 	andi	r2,r2,255
   8e2d8:	1004c03a 	cmpne	r2,r2,zero
   8e2dc:	1000171e 	bne	r2,zero,8e33c <OSIntExit+0xdc>
                OS_SchedNew();
   8e2e0:	008f37c0 	call	8f37c <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   8e2e4:	d0a70703 	ldbu	r2,-25572(gp)
   8e2e8:	d0e70743 	ldbu	r3,-25571(gp)
   8e2ec:	11003fcc 	andi	r4,r2,255
   8e2f0:	18803fcc 	andi	r2,r3,255
   8e2f4:	20801126 	beq	r4,r2,8e33c <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   8e2f8:	d0a70703 	ldbu	r2,-25572(gp)
   8e2fc:	10803fcc 	andi	r2,r2,255
   8e300:	00c002f4 	movhi	r3,11
   8e304:	18f0e504 	addi	r3,r3,-15468
   8e308:	1085883a 	add	r2,r2,r2
   8e30c:	1085883a 	add	r2,r2,r2
   8e310:	10c5883a 	add	r2,r2,r3
   8e314:	10800017 	ldw	r2,0(r2)
   8e318:	d0a70f15 	stw	r2,-25540(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   8e31c:	d0e70f17 	ldw	r3,-25540(gp)
   8e320:	18800e17 	ldw	r2,56(r3)
   8e324:	10800044 	addi	r2,r2,1
   8e328:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   8e32c:	d0a70a17 	ldw	r2,-25560(gp)
   8e330:	10800044 	addi	r2,r2,1
   8e334:	d0a70a15 	stw	r2,-25560(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   8e338:	0097c940 	call	97c94 <OSCtxSw>
   8e33c:	e0bfff17 	ldw	r2,-4(fp)
   8e340:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e344:	e0bffd17 	ldw	r2,-12(fp)
   8e348:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   8e34c:	e037883a 	mov	sp,fp
   8e350:	dfc00117 	ldw	ra,4(sp)
   8e354:	df000017 	ldw	fp,0(sp)
   8e358:	dec00204 	addi	sp,sp,8
   8e35c:	f800283a 	ret

0008e360 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   8e360:	defffc04 	addi	sp,sp,-16
   8e364:	df000315 	stw	fp,12(sp)
   8e368:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8e36c:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   8e370:	d0a70543 	ldbu	r2,-25579(gp)
   8e374:	10803fcc 	andi	r2,r2,255
   8e378:	10800058 	cmpnei	r2,r2,1
   8e37c:	1000171e 	bne	r2,zero,8e3dc <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e380:	0005303a 	rdctl	r2,status
   8e384:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e388:	e0fffe17 	ldw	r3,-8(fp)
   8e38c:	00bfff84 	movi	r2,-2
   8e390:	1884703a 	and	r2,r3,r2
   8e394:	1001703a 	wrctl	status,r2
  
  return context;
   8e398:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   8e39c:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   8e3a0:	d0a71303 	ldbu	r2,-25524(gp)
   8e3a4:	10803fcc 	andi	r2,r2,255
   8e3a8:	1004c03a 	cmpne	r2,r2,zero
   8e3ac:	1000071e 	bne	r2,zero,8e3cc <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   8e3b0:	d0a70503 	ldbu	r2,-25580(gp)
   8e3b4:	10803fcc 	andi	r2,r2,255
   8e3b8:	10803fe0 	cmpeqi	r2,r2,255
   8e3bc:	1000031e 	bne	r2,zero,8e3cc <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   8e3c0:	d0a70503 	ldbu	r2,-25580(gp)
   8e3c4:	10800044 	addi	r2,r2,1
   8e3c8:	d0a70505 	stb	r2,-25580(gp)
   8e3cc:	e0bfff17 	ldw	r2,-4(fp)
   8e3d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e3d4:	e0bffd17 	ldw	r2,-12(fp)
   8e3d8:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   8e3dc:	e037883a 	mov	sp,fp
   8e3e0:	df000017 	ldw	fp,0(sp)
   8e3e4:	dec00104 	addi	sp,sp,4
   8e3e8:	f800283a 	ret

0008e3ec <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   8e3ec:	defff804 	addi	sp,sp,-32
   8e3f0:	dfc00715 	stw	ra,28(sp)
   8e3f4:	df000615 	stw	fp,24(sp)
   8e3f8:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   8e3fc:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   8e400:	d0a70543 	ldbu	r2,-25579(gp)
   8e404:	10803fcc 	andi	r2,r2,255
   8e408:	10800058 	cmpnei	r2,r2,1
   8e40c:	10002b1e 	bne	r2,zero,8e4bc <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e410:	0005303a 	rdctl	r2,status
   8e414:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e418:	e0fffe17 	ldw	r3,-8(fp)
   8e41c:	00bfff84 	movi	r2,-2
   8e420:	1884703a 	and	r2,r3,r2
   8e424:	1001703a 	wrctl	status,r2
  
  return context;
   8e428:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   8e42c:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   8e430:	d0a70503 	ldbu	r2,-25580(gp)
   8e434:	10803fcc 	andi	r2,r2,255
   8e438:	1005003a 	cmpeq	r2,r2,zero
   8e43c:	10001b1e 	bne	r2,zero,8e4ac <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   8e440:	d0a70503 	ldbu	r2,-25580(gp)
   8e444:	10bfffc4 	addi	r2,r2,-1
   8e448:	d0a70505 	stb	r2,-25580(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   8e44c:	d0a70503 	ldbu	r2,-25580(gp)
   8e450:	10803fcc 	andi	r2,r2,255
   8e454:	1004c03a 	cmpne	r2,r2,zero
   8e458:	10000f1e 	bne	r2,zero,8e498 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   8e45c:	d0a71303 	ldbu	r2,-25524(gp)
   8e460:	10803fcc 	andi	r2,r2,255
   8e464:	1004c03a 	cmpne	r2,r2,zero
   8e468:	1000061e 	bne	r2,zero,8e484 <OSSchedUnlock+0x98>
   8e46c:	e0bfff17 	ldw	r2,-4(fp)
   8e470:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e474:	e0bffd17 	ldw	r2,-12(fp)
   8e478:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   8e47c:	008f2a80 	call	8f2a8 <OS_Sched>
   8e480:	00000e06 	br	8e4bc <OSSchedUnlock+0xd0>
   8e484:	e0bfff17 	ldw	r2,-4(fp)
   8e488:	e0bffc15 	stw	r2,-16(fp)
   8e48c:	e0bffc17 	ldw	r2,-16(fp)
   8e490:	1001703a 	wrctl	status,r2
   8e494:	00000906 	br	8e4bc <OSSchedUnlock+0xd0>
   8e498:	e0bfff17 	ldw	r2,-4(fp)
   8e49c:	e0bffb15 	stw	r2,-20(fp)
   8e4a0:	e0bffb17 	ldw	r2,-20(fp)
   8e4a4:	1001703a 	wrctl	status,r2
   8e4a8:	00000406 	br	8e4bc <OSSchedUnlock+0xd0>
   8e4ac:	e0bfff17 	ldw	r2,-4(fp)
   8e4b0:	e0bffa15 	stw	r2,-24(fp)
   8e4b4:	e0bffa17 	ldw	r2,-24(fp)
   8e4b8:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   8e4bc:	e037883a 	mov	sp,fp
   8e4c0:	dfc00117 	ldw	ra,4(sp)
   8e4c4:	df000017 	ldw	fp,0(sp)
   8e4c8:	dec00204 	addi	sp,sp,8
   8e4cc:	f800283a 	ret

0008e4d0 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   8e4d0:	defffe04 	addi	sp,sp,-8
   8e4d4:	dfc00115 	stw	ra,4(sp)
   8e4d8:	df000015 	stw	fp,0(sp)
   8e4dc:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   8e4e0:	d0a70543 	ldbu	r2,-25579(gp)
   8e4e4:	10803fcc 	andi	r2,r2,255
   8e4e8:	1004c03a 	cmpne	r2,r2,zero
   8e4ec:	10000f1e 	bne	r2,zero,8e52c <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   8e4f0:	008f37c0 	call	8f37c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   8e4f4:	d0a70703 	ldbu	r2,-25572(gp)
   8e4f8:	d0a70745 	stb	r2,-25571(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   8e4fc:	d0a70703 	ldbu	r2,-25572(gp)
   8e500:	10803fcc 	andi	r2,r2,255
   8e504:	00c002f4 	movhi	r3,11
   8e508:	18f0e504 	addi	r3,r3,-15468
   8e50c:	1085883a 	add	r2,r2,r2
   8e510:	1085883a 	add	r2,r2,r2
   8e514:	10c5883a 	add	r2,r2,r3
   8e518:	10800017 	ldw	r2,0(r2)
   8e51c:	d0a70f15 	stw	r2,-25540(gp)
        OSTCBCur      = OSTCBHighRdy;
   8e520:	d0a70f17 	ldw	r2,-25540(gp)
   8e524:	d0a71415 	stw	r2,-25520(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   8e528:	0097d200 	call	97d20 <OSStartHighRdy>
    }
}
   8e52c:	e037883a 	mov	sp,fp
   8e530:	dfc00117 	ldw	ra,4(sp)
   8e534:	df000017 	ldw	fp,0(sp)
   8e538:	dec00204 	addi	sp,sp,8
   8e53c:	f800283a 	ret

0008e540 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   8e540:	defff904 	addi	sp,sp,-28
   8e544:	dfc00615 	stw	ra,24(sp)
   8e548:	df000515 	stw	fp,20(sp)
   8e54c:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8e550:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   8e554:	01000084 	movi	r4,2
   8e558:	00955a00 	call	955a0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e55c:	0005303a 	rdctl	r2,status
   8e560:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e564:	e0fffe17 	ldw	r3,-8(fp)
   8e568:	00bfff84 	movi	r2,-2
   8e56c:	1884703a 	and	r2,r3,r2
   8e570:	1001703a 	wrctl	status,r2
  
  return context;
   8e574:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   8e578:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   8e57c:	d0270615 	stw	zero,-25576(gp)
   8e580:	e0bfff17 	ldw	r2,-4(fp)
   8e584:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e588:	e0bffd17 	ldw	r2,-12(fp)
   8e58c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   8e590:	01001904 	movi	r4,100
   8e594:	00955a00 	call	955a0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e598:	0005303a 	rdctl	r2,status
   8e59c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e5a0:	e0fffc17 	ldw	r3,-16(fp)
   8e5a4:	00bfff84 	movi	r2,-2
   8e5a8:	1884703a 	and	r2,r3,r2
   8e5ac:	1001703a 	wrctl	status,r2
  
  return context;
   8e5b0:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   8e5b4:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   8e5b8:	d0a70617 	ldw	r2,-25576(gp)
   8e5bc:	d0a70b15 	stw	r2,-25556(gp)
    OSStatRdy    = OS_TRUE;
   8e5c0:	00800044 	movi	r2,1
   8e5c4:	d0a71705 	stb	r2,-25508(gp)
   8e5c8:	e0bfff17 	ldw	r2,-4(fp)
   8e5cc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e5d0:	e0bffb17 	ldw	r2,-20(fp)
   8e5d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   8e5d8:	e037883a 	mov	sp,fp
   8e5dc:	dfc00117 	ldw	ra,4(sp)
   8e5e0:	df000017 	ldw	fp,0(sp)
   8e5e4:	dec00204 	addi	sp,sp,8
   8e5e8:	f800283a 	ret

0008e5ec <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   8e5ec:	defff604 	addi	sp,sp,-40
   8e5f0:	dfc00915 	stw	ra,36(sp)
   8e5f4:	df000815 	stw	fp,32(sp)
   8e5f8:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   8e5fc:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   8e600:	00980ec0 	call	980ec <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e604:	0005303a 	rdctl	r2,status
   8e608:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e60c:	e0fffb17 	ldw	r3,-20(fp)
   8e610:	00bfff84 	movi	r2,-2
   8e614:	1884703a 	and	r2,r3,r2
   8e618:	1001703a 	wrctl	status,r2
  
  return context;
   8e61c:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   8e620:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
   8e624:	d0a71517 	ldw	r2,-25516(gp)
   8e628:	10800044 	addi	r2,r2,1
   8e62c:	d0a71515 	stw	r2,-25516(gp)
   8e630:	e0bffc17 	ldw	r2,-16(fp)
   8e634:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e638:	e0bffa17 	ldw	r2,-24(fp)
   8e63c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   8e640:	d0a70543 	ldbu	r2,-25579(gp)
   8e644:	10803fcc 	andi	r2,r2,255
   8e648:	10800058 	cmpnei	r2,r2,1
   8e64c:	1000721e 	bne	r2,zero,8e818 <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   8e650:	d0a70903 	ldbu	r2,-25564(gp)
   8e654:	10803fcc 	andi	r2,r2,255
   8e658:	e0bfff15 	stw	r2,-4(fp)
   8e65c:	e0ffff17 	ldw	r3,-4(fp)
   8e660:	18800060 	cmpeqi	r2,r3,1
   8e664:	10000a1e 	bne	r2,zero,8e690 <OSTimeTick+0xa4>
   8e668:	e0ffff17 	ldw	r3,-4(fp)
   8e66c:	188000a0 	cmpeqi	r2,r3,2
   8e670:	1000091e 	bne	r2,zero,8e698 <OSTimeTick+0xac>
   8e674:	e0ffff17 	ldw	r3,-4(fp)
   8e678:	1805003a 	cmpeq	r2,r3,zero
   8e67c:	1000011e 	bne	r2,zero,8e684 <OSTimeTick+0x98>
   8e680:	00000a06 	br	8e6ac <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   8e684:	00800044 	movi	r2,1
   8e688:	e0bffd05 	stb	r2,-12(fp)
                 break;
   8e68c:	00000a06 	br	8e6b8 <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   8e690:	e03ffd05 	stb	zero,-12(fp)
                 break;
   8e694:	00000806 	br	8e6b8 <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   8e698:	00800044 	movi	r2,1
   8e69c:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   8e6a0:	00800044 	movi	r2,1
   8e6a4:	d0a70905 	stb	r2,-25564(gp)
                 break;
   8e6a8:	00000306 	br	8e6b8 <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   8e6ac:	00800044 	movi	r2,1
   8e6b0:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   8e6b4:	d0270905 	stb	zero,-25564(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   8e6b8:	e0bffd03 	ldbu	r2,-12(fp)
   8e6bc:	1005003a 	cmpeq	r2,r2,zero
   8e6c0:	1000551e 	bne	r2,zero,8e818 <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   8e6c4:	d0a70817 	ldw	r2,-25568(gp)
   8e6c8:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   8e6cc:	00004d06 	br	8e804 <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e6d0:	0005303a 	rdctl	r2,status
   8e6d4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e6d8:	e0fff917 	ldw	r3,-28(fp)
   8e6dc:	00bfff84 	movi	r2,-2
   8e6e0:	1884703a 	and	r2,r3,r2
   8e6e4:	1001703a 	wrctl	status,r2
  
  return context;
   8e6e8:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
   8e6ec:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   8e6f0:	e0bffe17 	ldw	r2,-8(fp)
   8e6f4:	10800b8b 	ldhu	r2,46(r2)
   8e6f8:	10bfffcc 	andi	r2,r2,65535
   8e6fc:	1005003a 	cmpeq	r2,r2,zero
   8e700:	1000391e 	bne	r2,zero,8e7e8 <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   8e704:	e0bffe17 	ldw	r2,-8(fp)
   8e708:	10800b8b 	ldhu	r2,46(r2)
   8e70c:	10bfffc4 	addi	r2,r2,-1
   8e710:	1007883a 	mov	r3,r2
   8e714:	e0bffe17 	ldw	r2,-8(fp)
   8e718:	10c00b8d 	sth	r3,46(r2)
   8e71c:	e0bffe17 	ldw	r2,-8(fp)
   8e720:	10800b8b 	ldhu	r2,46(r2)
   8e724:	10bfffcc 	andi	r2,r2,65535
   8e728:	1004c03a 	cmpne	r2,r2,zero
   8e72c:	10002e1e 	bne	r2,zero,8e7e8 <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   8e730:	e0bffe17 	ldw	r2,-8(fp)
   8e734:	10800c03 	ldbu	r2,48(r2)
   8e738:	10803fcc 	andi	r2,r2,255
   8e73c:	10800dcc 	andi	r2,r2,55
   8e740:	1005003a 	cmpeq	r2,r2,zero
   8e744:	10000b1e 	bne	r2,zero,8e774 <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   8e748:	e0bffe17 	ldw	r2,-8(fp)
   8e74c:	10c00c03 	ldbu	r3,48(r2)
   8e750:	00bff204 	movi	r2,-56
   8e754:	1884703a 	and	r2,r3,r2
   8e758:	1007883a 	mov	r3,r2
   8e75c:	e0bffe17 	ldw	r2,-8(fp)
   8e760:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   8e764:	e0fffe17 	ldw	r3,-8(fp)
   8e768:	00800044 	movi	r2,1
   8e76c:	18800c45 	stb	r2,49(r3)
   8e770:	00000206 	br	8e77c <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   8e774:	e0bffe17 	ldw	r2,-8(fp)
   8e778:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   8e77c:	e0bffe17 	ldw	r2,-8(fp)
   8e780:	10800c03 	ldbu	r2,48(r2)
   8e784:	10803fcc 	andi	r2,r2,255
   8e788:	1080020c 	andi	r2,r2,8
   8e78c:	1004c03a 	cmpne	r2,r2,zero
   8e790:	1000151e 	bne	r2,zero,8e7e8 <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   8e794:	e0bffe17 	ldw	r2,-8(fp)
   8e798:	10c00d83 	ldbu	r3,54(r2)
   8e79c:	d0a71103 	ldbu	r2,-25532(gp)
   8e7a0:	1884b03a 	or	r2,r3,r2
   8e7a4:	d0a71105 	stb	r2,-25532(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   8e7a8:	e0bffe17 	ldw	r2,-8(fp)
   8e7ac:	10800d03 	ldbu	r2,52(r2)
   8e7b0:	11003fcc 	andi	r4,r2,255
   8e7b4:	e0bffe17 	ldw	r2,-8(fp)
   8e7b8:	10800d03 	ldbu	r2,52(r2)
   8e7bc:	10c03fcc 	andi	r3,r2,255
   8e7c0:	d0a71144 	addi	r2,gp,-25531
   8e7c4:	1885883a 	add	r2,r3,r2
   8e7c8:	10c00003 	ldbu	r3,0(r2)
   8e7cc:	e0bffe17 	ldw	r2,-8(fp)
   8e7d0:	10800d43 	ldbu	r2,53(r2)
   8e7d4:	1884b03a 	or	r2,r3,r2
   8e7d8:	1007883a 	mov	r3,r2
   8e7dc:	d0a71144 	addi	r2,gp,-25531
   8e7e0:	2085883a 	add	r2,r4,r2
   8e7e4:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   8e7e8:	e0bffe17 	ldw	r2,-8(fp)
   8e7ec:	10800517 	ldw	r2,20(r2)
   8e7f0:	e0bffe15 	stw	r2,-8(fp)
   8e7f4:	e0bffc17 	ldw	r2,-16(fp)
   8e7f8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e7fc:	e0bff817 	ldw	r2,-32(fp)
   8e800:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   8e804:	e0bffe17 	ldw	r2,-8(fp)
   8e808:	10800c83 	ldbu	r2,50(r2)
   8e80c:	10803fcc 	andi	r2,r2,255
   8e810:	10800518 	cmpnei	r2,r2,20
   8e814:	103fae1e 	bne	r2,zero,8e6d0 <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   8e818:	e037883a 	mov	sp,fp
   8e81c:	dfc00117 	ldw	ra,4(sp)
   8e820:	df000017 	ldw	fp,0(sp)
   8e824:	dec00204 	addi	sp,sp,8
   8e828:	f800283a 	ret

0008e82c <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   8e82c:	deffff04 	addi	sp,sp,-4
   8e830:	df000015 	stw	fp,0(sp)
   8e834:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   8e838:	00804784 	movi	r2,286
}
   8e83c:	e037883a 	mov	sp,fp
   8e840:	df000017 	ldw	fp,0(sp)
   8e844:	dec00104 	addi	sp,sp,4
   8e848:	f800283a 	ret

0008e84c <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   8e84c:	deffff04 	addi	sp,sp,-4
   8e850:	df000015 	stw	fp,0(sp)
   8e854:	d839883a 	mov	fp,sp
}
   8e858:	e037883a 	mov	sp,fp
   8e85c:	df000017 	ldw	fp,0(sp)
   8e860:	dec00104 	addi	sp,sp,4
   8e864:	f800283a 	ret

0008e868 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   8e868:	defff804 	addi	sp,sp,-32
   8e86c:	dfc00715 	stw	ra,28(sp)
   8e870:	df000615 	stw	fp,24(sp)
   8e874:	df000604 	addi	fp,sp,24
   8e878:	e13ffc15 	stw	r4,-16(fp)
   8e87c:	e17ffd15 	stw	r5,-12(fp)
   8e880:	e1bffe05 	stb	r6,-8(fp)
   8e884:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   8e888:	e0bffc17 	ldw	r2,-16(fp)
   8e88c:	10800283 	ldbu	r2,10(r2)
   8e890:	10c03fcc 	andi	r3,r2,255
   8e894:	008002b4 	movhi	r2,10
   8e898:	10a5d804 	addi	r2,r2,-26784
   8e89c:	10c5883a 	add	r2,r2,r3
   8e8a0:	10800003 	ldbu	r2,0(r2)
   8e8a4:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   8e8a8:	e0fffa83 	ldbu	r3,-22(fp)
   8e8ac:	e0bffc17 	ldw	r2,-16(fp)
   8e8b0:	1885883a 	add	r2,r3,r2
   8e8b4:	10800204 	addi	r2,r2,8
   8e8b8:	108000c3 	ldbu	r2,3(r2)
   8e8bc:	10c03fcc 	andi	r3,r2,255
   8e8c0:	008002b4 	movhi	r2,10
   8e8c4:	10a5d804 	addi	r2,r2,-26784
   8e8c8:	10c5883a 	add	r2,r2,r3
   8e8cc:	10800003 	ldbu	r2,0(r2)
   8e8d0:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   8e8d4:	e0bffa83 	ldbu	r2,-22(fp)
   8e8d8:	100490fa 	slli	r2,r2,3
   8e8dc:	1007883a 	mov	r3,r2
   8e8e0:	e0bffa43 	ldbu	r2,-23(fp)
   8e8e4:	1885883a 	add	r2,r3,r2
   8e8e8:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   8e8ec:	e0bffa03 	ldbu	r2,-24(fp)
   8e8f0:	00c002f4 	movhi	r3,11
   8e8f4:	18f0e504 	addi	r3,r3,-15468
   8e8f8:	1085883a 	add	r2,r2,r2
   8e8fc:	1085883a 	add	r2,r2,r2
   8e900:	10c5883a 	add	r2,r2,r3
   8e904:	10800017 	ldw	r2,0(r2)
   8e908:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   8e90c:	e0bffb17 	ldw	r2,-20(fp)
   8e910:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   8e914:	e0fffb17 	ldw	r3,-20(fp)
   8e918:	e0bffd17 	ldw	r2,-12(fp)
   8e91c:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   8e920:	e0bffb17 	ldw	r2,-20(fp)
   8e924:	10800c03 	ldbu	r2,48(r2)
   8e928:	1007883a 	mov	r3,r2
   8e92c:	e0bffe03 	ldbu	r2,-8(fp)
   8e930:	0084303a 	nor	r2,zero,r2
   8e934:	1884703a 	and	r2,r3,r2
   8e938:	1007883a 	mov	r3,r2
   8e93c:	e0bffb17 	ldw	r2,-20(fp)
   8e940:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   8e944:	e0fffb17 	ldw	r3,-20(fp)
   8e948:	e0bfff03 	ldbu	r2,-4(fp)
   8e94c:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   8e950:	e0bffb17 	ldw	r2,-20(fp)
   8e954:	10800c03 	ldbu	r2,48(r2)
   8e958:	10803fcc 	andi	r2,r2,255
   8e95c:	1080020c 	andi	r2,r2,8
   8e960:	1004c03a 	cmpne	r2,r2,zero
   8e964:	1000111e 	bne	r2,zero,8e9ac <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   8e968:	e0bffb17 	ldw	r2,-20(fp)
   8e96c:	10c00d83 	ldbu	r3,54(r2)
   8e970:	d0a71103 	ldbu	r2,-25532(gp)
   8e974:	1884b03a 	or	r2,r3,r2
   8e978:	d0a71105 	stb	r2,-25532(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   8e97c:	e13ffa83 	ldbu	r4,-22(fp)
   8e980:	e0fffa83 	ldbu	r3,-22(fp)
   8e984:	d0a71144 	addi	r2,gp,-25531
   8e988:	1885883a 	add	r2,r3,r2
   8e98c:	10c00003 	ldbu	r3,0(r2)
   8e990:	e0bffb17 	ldw	r2,-20(fp)
   8e994:	10800d43 	ldbu	r2,53(r2)
   8e998:	1884b03a 	or	r2,r3,r2
   8e99c:	1007883a 	mov	r3,r2
   8e9a0:	d0a71144 	addi	r2,gp,-25531
   8e9a4:	2085883a 	add	r2,r4,r2
   8e9a8:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   8e9ac:	e13ffb17 	ldw	r4,-20(fp)
   8e9b0:	e17ffc17 	ldw	r5,-16(fp)
   8e9b4:	008ec600 	call	8ec60 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   8e9b8:	e0bffb17 	ldw	r2,-20(fp)
   8e9bc:	10800817 	ldw	r2,32(r2)
   8e9c0:	1005003a 	cmpeq	r2,r2,zero
   8e9c4:	1000071e 	bne	r2,zero,8e9e4 <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   8e9c8:	e0bffb17 	ldw	r2,-20(fp)
   8e9cc:	11400817 	ldw	r5,32(r2)
   8e9d0:	e13ffb17 	ldw	r4,-20(fp)
   8e9d4:	008ed180 	call	8ed18 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   8e9d8:	e0fffb17 	ldw	r3,-20(fp)
   8e9dc:	e0bffc17 	ldw	r2,-16(fp)
   8e9e0:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
   8e9e4:	e0bffa03 	ldbu	r2,-24(fp)
}
   8e9e8:	e037883a 	mov	sp,fp
   8e9ec:	dfc00117 	ldw	ra,4(sp)
   8e9f0:	df000017 	ldw	fp,0(sp)
   8e9f4:	dec00204 	addi	sp,sp,8
   8e9f8:	f800283a 	ret

0008e9fc <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   8e9fc:	defffd04 	addi	sp,sp,-12
   8ea00:	df000215 	stw	fp,8(sp)
   8ea04:	df000204 	addi	fp,sp,8
   8ea08:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   8ea0c:	d0e71417 	ldw	r3,-25520(gp)
   8ea10:	e0bfff17 	ldw	r2,-4(fp)
   8ea14:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   8ea18:	d0a71417 	ldw	r2,-25520(gp)
   8ea1c:	10800d03 	ldbu	r2,52(r2)
   8ea20:	11003fcc 	andi	r4,r2,255
   8ea24:	d0a71417 	ldw	r2,-25520(gp)
   8ea28:	10800d03 	ldbu	r2,52(r2)
   8ea2c:	10c03fcc 	andi	r3,r2,255
   8ea30:	e0bfff17 	ldw	r2,-4(fp)
   8ea34:	1885883a 	add	r2,r3,r2
   8ea38:	10800204 	addi	r2,r2,8
   8ea3c:	10c000c3 	ldbu	r3,3(r2)
   8ea40:	d0a71417 	ldw	r2,-25520(gp)
   8ea44:	10800d43 	ldbu	r2,53(r2)
   8ea48:	1884b03a 	or	r2,r3,r2
   8ea4c:	1007883a 	mov	r3,r2
   8ea50:	e0bfff17 	ldw	r2,-4(fp)
   8ea54:	2085883a 	add	r2,r4,r2
   8ea58:	10800204 	addi	r2,r2,8
   8ea5c:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   8ea60:	e0bfff17 	ldw	r2,-4(fp)
   8ea64:	10c00283 	ldbu	r3,10(r2)
   8ea68:	d0a71417 	ldw	r2,-25520(gp)
   8ea6c:	10800d83 	ldbu	r2,54(r2)
   8ea70:	1884b03a 	or	r2,r3,r2
   8ea74:	1007883a 	mov	r3,r2
   8ea78:	e0bfff17 	ldw	r2,-4(fp)
   8ea7c:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   8ea80:	d0a71417 	ldw	r2,-25520(gp)
   8ea84:	10800d03 	ldbu	r2,52(r2)
   8ea88:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   8ea8c:	e13ffe03 	ldbu	r4,-8(fp)
   8ea90:	e0fffe03 	ldbu	r3,-8(fp)
   8ea94:	d0a71144 	addi	r2,gp,-25531
   8ea98:	1885883a 	add	r2,r3,r2
   8ea9c:	10800003 	ldbu	r2,0(r2)
   8eaa0:	1007883a 	mov	r3,r2
   8eaa4:	d0a71417 	ldw	r2,-25520(gp)
   8eaa8:	10800d43 	ldbu	r2,53(r2)
   8eaac:	0084303a 	nor	r2,zero,r2
   8eab0:	1884703a 	and	r2,r3,r2
   8eab4:	1007883a 	mov	r3,r2
   8eab8:	d0a71144 	addi	r2,gp,-25531
   8eabc:	2085883a 	add	r2,r4,r2
   8eac0:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
   8eac4:	e0fffe03 	ldbu	r3,-8(fp)
   8eac8:	d0a71144 	addi	r2,gp,-25531
   8eacc:	1885883a 	add	r2,r3,r2
   8ead0:	10800003 	ldbu	r2,0(r2)
   8ead4:	10803fcc 	andi	r2,r2,255
   8ead8:	1004c03a 	cmpne	r2,r2,zero
   8eadc:	1000071e 	bne	r2,zero,8eafc <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   8eae0:	d0a71417 	ldw	r2,-25520(gp)
   8eae4:	10800d83 	ldbu	r2,54(r2)
   8eae8:	0084303a 	nor	r2,zero,r2
   8eaec:	1007883a 	mov	r3,r2
   8eaf0:	d0a71103 	ldbu	r2,-25532(gp)
   8eaf4:	1884703a 	and	r2,r3,r2
   8eaf8:	d0a71105 	stb	r2,-25532(gp)
    }
}
   8eafc:	e037883a 	mov	sp,fp
   8eb00:	df000017 	ldw	fp,0(sp)
   8eb04:	dec00104 	addi	sp,sp,4
   8eb08:	f800283a 	ret

0008eb0c <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   8eb0c:	defffb04 	addi	sp,sp,-20
   8eb10:	df000415 	stw	fp,16(sp)
   8eb14:	df000404 	addi	fp,sp,16
   8eb18:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   8eb1c:	d0a71417 	ldw	r2,-25520(gp)
   8eb20:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   8eb24:	d0e71417 	ldw	r3,-25520(gp)
   8eb28:	e0bfff17 	ldw	r2,-4(fp)
   8eb2c:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
   8eb30:	e0bfff17 	ldw	r2,-4(fp)
   8eb34:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
   8eb38:	e0bffe17 	ldw	r2,-8(fp)
   8eb3c:	10800017 	ldw	r2,0(r2)
   8eb40:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   8eb44:	00002006 	br	8ebc8 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   8eb48:	d0a71417 	ldw	r2,-25520(gp)
   8eb4c:	10800d03 	ldbu	r2,52(r2)
   8eb50:	11003fcc 	andi	r4,r2,255
   8eb54:	d0a71417 	ldw	r2,-25520(gp)
   8eb58:	10800d03 	ldbu	r2,52(r2)
   8eb5c:	10c03fcc 	andi	r3,r2,255
   8eb60:	e0bffd17 	ldw	r2,-12(fp)
   8eb64:	1885883a 	add	r2,r3,r2
   8eb68:	10800204 	addi	r2,r2,8
   8eb6c:	10c000c3 	ldbu	r3,3(r2)
   8eb70:	d0a71417 	ldw	r2,-25520(gp)
   8eb74:	10800d43 	ldbu	r2,53(r2)
   8eb78:	1884b03a 	or	r2,r3,r2
   8eb7c:	1007883a 	mov	r3,r2
   8eb80:	e0bffd17 	ldw	r2,-12(fp)
   8eb84:	2085883a 	add	r2,r4,r2
   8eb88:	10800204 	addi	r2,r2,8
   8eb8c:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   8eb90:	e0bffd17 	ldw	r2,-12(fp)
   8eb94:	10c00283 	ldbu	r3,10(r2)
   8eb98:	d0a71417 	ldw	r2,-25520(gp)
   8eb9c:	10800d83 	ldbu	r2,54(r2)
   8eba0:	1884b03a 	or	r2,r3,r2
   8eba4:	1007883a 	mov	r3,r2
   8eba8:	e0bffd17 	ldw	r2,-12(fp)
   8ebac:	10c00285 	stb	r3,10(r2)
        pevents++;
   8ebb0:	e0bffe17 	ldw	r2,-8(fp)
   8ebb4:	10800104 	addi	r2,r2,4
   8ebb8:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
   8ebbc:	e0bffe17 	ldw	r2,-8(fp)
   8ebc0:	10800017 	ldw	r2,0(r2)
   8ebc4:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   8ebc8:	e0bffd17 	ldw	r2,-12(fp)
   8ebcc:	1004c03a 	cmpne	r2,r2,zero
   8ebd0:	103fdd1e 	bne	r2,zero,8eb48 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   8ebd4:	d0a71417 	ldw	r2,-25520(gp)
   8ebd8:	10800d03 	ldbu	r2,52(r2)
   8ebdc:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   8ebe0:	e13ffc03 	ldbu	r4,-16(fp)
   8ebe4:	e0fffc03 	ldbu	r3,-16(fp)
   8ebe8:	d0a71144 	addi	r2,gp,-25531
   8ebec:	1885883a 	add	r2,r3,r2
   8ebf0:	10800003 	ldbu	r2,0(r2)
   8ebf4:	1007883a 	mov	r3,r2
   8ebf8:	d0a71417 	ldw	r2,-25520(gp)
   8ebfc:	10800d43 	ldbu	r2,53(r2)
   8ec00:	0084303a 	nor	r2,zero,r2
   8ec04:	1884703a 	and	r2,r3,r2
   8ec08:	1007883a 	mov	r3,r2
   8ec0c:	d0a71144 	addi	r2,gp,-25531
   8ec10:	2085883a 	add	r2,r4,r2
   8ec14:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
   8ec18:	e0fffc03 	ldbu	r3,-16(fp)
   8ec1c:	d0a71144 	addi	r2,gp,-25531
   8ec20:	1885883a 	add	r2,r3,r2
   8ec24:	10800003 	ldbu	r2,0(r2)
   8ec28:	10803fcc 	andi	r2,r2,255
   8ec2c:	1004c03a 	cmpne	r2,r2,zero
   8ec30:	1000071e 	bne	r2,zero,8ec50 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   8ec34:	d0a71417 	ldw	r2,-25520(gp)
   8ec38:	10800d83 	ldbu	r2,54(r2)
   8ec3c:	0084303a 	nor	r2,zero,r2
   8ec40:	1007883a 	mov	r3,r2
   8ec44:	d0a71103 	ldbu	r2,-25532(gp)
   8ec48:	1884703a 	and	r2,r3,r2
   8ec4c:	d0a71105 	stb	r2,-25532(gp)
    }
}
   8ec50:	e037883a 	mov	sp,fp
   8ec54:	df000017 	ldw	fp,0(sp)
   8ec58:	dec00104 	addi	sp,sp,4
   8ec5c:	f800283a 	ret

0008ec60 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   8ec60:	defffc04 	addi	sp,sp,-16
   8ec64:	df000315 	stw	fp,12(sp)
   8ec68:	df000304 	addi	fp,sp,12
   8ec6c:	e13ffe15 	stw	r4,-8(fp)
   8ec70:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   8ec74:	e0bffe17 	ldw	r2,-8(fp)
   8ec78:	10800d03 	ldbu	r2,52(r2)
   8ec7c:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   8ec80:	e13ffd03 	ldbu	r4,-12(fp)
   8ec84:	e0fffd03 	ldbu	r3,-12(fp)
   8ec88:	e0bfff17 	ldw	r2,-4(fp)
   8ec8c:	1885883a 	add	r2,r3,r2
   8ec90:	10800204 	addi	r2,r2,8
   8ec94:	108000c3 	ldbu	r2,3(r2)
   8ec98:	1007883a 	mov	r3,r2
   8ec9c:	e0bffe17 	ldw	r2,-8(fp)
   8eca0:	10800d43 	ldbu	r2,53(r2)
   8eca4:	0084303a 	nor	r2,zero,r2
   8eca8:	1884703a 	and	r2,r3,r2
   8ecac:	1007883a 	mov	r3,r2
   8ecb0:	e0bfff17 	ldw	r2,-4(fp)
   8ecb4:	2085883a 	add	r2,r4,r2
   8ecb8:	10800204 	addi	r2,r2,8
   8ecbc:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
   8ecc0:	e0fffd03 	ldbu	r3,-12(fp)
   8ecc4:	e0bfff17 	ldw	r2,-4(fp)
   8ecc8:	1885883a 	add	r2,r3,r2
   8eccc:	10800204 	addi	r2,r2,8
   8ecd0:	108000c3 	ldbu	r2,3(r2)
   8ecd4:	10803fcc 	andi	r2,r2,255
   8ecd8:	1004c03a 	cmpne	r2,r2,zero
   8ecdc:	10000a1e 	bne	r2,zero,8ed08 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   8ece0:	e0bfff17 	ldw	r2,-4(fp)
   8ece4:	10800283 	ldbu	r2,10(r2)
   8ece8:	1007883a 	mov	r3,r2
   8ecec:	e0bffe17 	ldw	r2,-8(fp)
   8ecf0:	10800d83 	ldbu	r2,54(r2)
   8ecf4:	0084303a 	nor	r2,zero,r2
   8ecf8:	1884703a 	and	r2,r3,r2
   8ecfc:	1007883a 	mov	r3,r2
   8ed00:	e0bfff17 	ldw	r2,-4(fp)
   8ed04:	10c00285 	stb	r3,10(r2)
    }
}
   8ed08:	e037883a 	mov	sp,fp
   8ed0c:	df000017 	ldw	fp,0(sp)
   8ed10:	dec00104 	addi	sp,sp,4
   8ed14:	f800283a 	ret

0008ed18 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   8ed18:	defffa04 	addi	sp,sp,-24
   8ed1c:	df000515 	stw	fp,20(sp)
   8ed20:	df000504 	addi	fp,sp,20
   8ed24:	e13ffe15 	stw	r4,-8(fp)
   8ed28:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   8ed2c:	e0bffe17 	ldw	r2,-8(fp)
   8ed30:	10800d03 	ldbu	r2,52(r2)
   8ed34:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
   8ed38:	e0bffe17 	ldw	r2,-8(fp)
   8ed3c:	10800d83 	ldbu	r2,54(r2)
   8ed40:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
   8ed44:	e0bffe17 	ldw	r2,-8(fp)
   8ed48:	10800d43 	ldbu	r2,53(r2)
   8ed4c:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
   8ed50:	e0bfff17 	ldw	r2,-4(fp)
   8ed54:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
   8ed58:	e0bffd17 	ldw	r2,-12(fp)
   8ed5c:	10800017 	ldw	r2,0(r2)
   8ed60:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   8ed64:	00002606 	br	8ee00 <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
   8ed68:	e13ffb83 	ldbu	r4,-18(fp)
   8ed6c:	e0fffb83 	ldbu	r3,-18(fp)
   8ed70:	e0bffc17 	ldw	r2,-16(fp)
   8ed74:	1885883a 	add	r2,r3,r2
   8ed78:	10800204 	addi	r2,r2,8
   8ed7c:	108000c3 	ldbu	r2,3(r2)
   8ed80:	1007883a 	mov	r3,r2
   8ed84:	e0bffb03 	ldbu	r2,-20(fp)
   8ed88:	0084303a 	nor	r2,zero,r2
   8ed8c:	1884703a 	and	r2,r3,r2
   8ed90:	1007883a 	mov	r3,r2
   8ed94:	e0bffc17 	ldw	r2,-16(fp)
   8ed98:	2085883a 	add	r2,r4,r2
   8ed9c:	10800204 	addi	r2,r2,8
   8eda0:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
   8eda4:	e0fffb83 	ldbu	r3,-18(fp)
   8eda8:	e0bffc17 	ldw	r2,-16(fp)
   8edac:	1885883a 	add	r2,r3,r2
   8edb0:	10800204 	addi	r2,r2,8
   8edb4:	108000c3 	ldbu	r2,3(r2)
   8edb8:	10803fcc 	andi	r2,r2,255
   8edbc:	1004c03a 	cmpne	r2,r2,zero
   8edc0:	1000091e 	bne	r2,zero,8ede8 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
   8edc4:	e0bffc17 	ldw	r2,-16(fp)
   8edc8:	10800283 	ldbu	r2,10(r2)
   8edcc:	1007883a 	mov	r3,r2
   8edd0:	e0bffb43 	ldbu	r2,-19(fp)
   8edd4:	0084303a 	nor	r2,zero,r2
   8edd8:	1884703a 	and	r2,r3,r2
   8eddc:	1007883a 	mov	r3,r2
   8ede0:	e0bffc17 	ldw	r2,-16(fp)
   8ede4:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   8ede8:	e0bffd17 	ldw	r2,-12(fp)
   8edec:	10800104 	addi	r2,r2,4
   8edf0:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
   8edf4:	e0bffd17 	ldw	r2,-12(fp)
   8edf8:	10800017 	ldw	r2,0(r2)
   8edfc:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   8ee00:	e0bffc17 	ldw	r2,-16(fp)
   8ee04:	1004c03a 	cmpne	r2,r2,zero
   8ee08:	103fd71e 	bne	r2,zero,8ed68 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   8ee0c:	e037883a 	mov	sp,fp
   8ee10:	df000017 	ldw	fp,0(sp)
   8ee14:	dec00104 	addi	sp,sp,4
   8ee18:	f800283a 	ret

0008ee1c <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   8ee1c:	defffc04 	addi	sp,sp,-16
   8ee20:	df000315 	stw	fp,12(sp)
   8ee24:	df000304 	addi	fp,sp,12
   8ee28:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   8ee2c:	e0bfff17 	ldw	r2,-4(fp)
   8ee30:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   8ee34:	e0bfff17 	ldw	r2,-4(fp)
   8ee38:	108002c4 	addi	r2,r2,11
   8ee3c:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   8ee40:	e03ffd05 	stb	zero,-12(fp)
   8ee44:	00000806 	br	8ee68 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
   8ee48:	e0bffe17 	ldw	r2,-8(fp)
   8ee4c:	10000005 	stb	zero,0(r2)
   8ee50:	e0bffe17 	ldw	r2,-8(fp)
   8ee54:	10800044 	addi	r2,r2,1
   8ee58:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   8ee5c:	e0bffd03 	ldbu	r2,-12(fp)
   8ee60:	10800044 	addi	r2,r2,1
   8ee64:	e0bffd05 	stb	r2,-12(fp)
   8ee68:	e0bffd03 	ldbu	r2,-12(fp)
   8ee6c:	108000f0 	cmpltui	r2,r2,3
   8ee70:	103ff51e 	bne	r2,zero,8ee48 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
   8ee74:	e037883a 	mov	sp,fp
   8ee78:	df000017 	ldw	fp,0(sp)
   8ee7c:	dec00104 	addi	sp,sp,4
   8ee80:	f800283a 	ret

0008ee84 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   8ee84:	defffb04 	addi	sp,sp,-20
   8ee88:	dfc00415 	stw	ra,16(sp)
   8ee8c:	df000315 	stw	fp,12(sp)
   8ee90:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   8ee94:	010002f4 	movhi	r4,11
   8ee98:	212cd104 	addi	r4,r4,-19644
   8ee9c:	0142d004 	movi	r5,2880
   8eea0:	008f1e80 	call	8f1e8 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   8eea4:	008002f4 	movhi	r2,11
   8eea8:	10acd104 	addi	r2,r2,-19644
   8eeac:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   8eeb0:	008002f4 	movhi	r2,11
   8eeb4:	10acdd04 	addi	r2,r2,-19596
   8eeb8:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   8eebc:	e03fff0d 	sth	zero,-4(fp)
   8eec0:	00001306 	br	8ef10 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   8eec4:	e0bffe17 	ldw	r2,-8(fp)
   8eec8:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   8eecc:	e0fffe17 	ldw	r3,-8(fp)
   8eed0:	e0bffd17 	ldw	r2,-12(fp)
   8eed4:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   8eed8:	e0fffe17 	ldw	r3,-8(fp)
   8eedc:	00800fc4 	movi	r2,63
   8eee0:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   8eee4:	e0bffe17 	ldw	r2,-8(fp)
   8eee8:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   8eeec:	e0bffe17 	ldw	r2,-8(fp)
   8eef0:	10800c04 	addi	r2,r2,48
   8eef4:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   8eef8:	e0bffd17 	ldw	r2,-12(fp)
   8eefc:	10800c04 	addi	r2,r2,48
   8ef00:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   8ef04:	e0bfff0b 	ldhu	r2,-4(fp)
   8ef08:	10800044 	addi	r2,r2,1
   8ef0c:	e0bfff0d 	sth	r2,-4(fp)
   8ef10:	e0bfff0b 	ldhu	r2,-4(fp)
   8ef14:	10800ef0 	cmpltui	r2,r2,59
   8ef18:	103fea1e 	bne	r2,zero,8eec4 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   8ef1c:	e0bffe17 	ldw	r2,-8(fp)
   8ef20:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   8ef24:	e0bffe17 	ldw	r2,-8(fp)
   8ef28:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   8ef2c:	e0fffe17 	ldw	r3,-8(fp)
   8ef30:	00800fc4 	movi	r2,63
   8ef34:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   8ef38:	e0bffe17 	ldw	r2,-8(fp)
   8ef3c:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   8ef40:	008002f4 	movhi	r2,11
   8ef44:	10acd104 	addi	r2,r2,-19644
   8ef48:	d0a71215 	stw	r2,-25528(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   8ef4c:	e037883a 	mov	sp,fp
   8ef50:	dfc00117 	ldw	ra,4(sp)
   8ef54:	df000017 	ldw	fp,0(sp)
   8ef58:	dec00204 	addi	sp,sp,8
   8ef5c:	f800283a 	ret

0008ef60 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   8ef60:	deffff04 	addi	sp,sp,-4
   8ef64:	df000015 	stw	fp,0(sp)
   8ef68:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   8ef6c:	d0271515 	stw	zero,-25516(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   8ef70:	d0271305 	stb	zero,-25524(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   8ef74:	d0270505 	stb	zero,-25580(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   8ef78:	d0270d45 	stb	zero,-25547(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   8ef7c:	d0270545 	stb	zero,-25579(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   8ef80:	d0270a15 	stw	zero,-25560(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   8ef84:	d0270615 	stw	zero,-25576(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   8ef88:	d0271815 	stw	zero,-25504(gp)
    OSIdleCtrMax  = 0L;
   8ef8c:	d0270b15 	stw	zero,-25556(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   8ef90:	d0271705 	stb	zero,-25508(gp)
#endif
}
   8ef94:	e037883a 	mov	sp,fp
   8ef98:	df000017 	ldw	fp,0(sp)
   8ef9c:	dec00104 	addi	sp,sp,4
   8efa0:	f800283a 	ret

0008efa4 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   8efa4:	defffd04 	addi	sp,sp,-12
   8efa8:	df000215 	stw	fp,8(sp)
   8efac:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   8efb0:	d0271105 	stb	zero,-25532(gp)
    prdytbl       = &OSRdyTbl[0];
   8efb4:	d0a71144 	addi	r2,gp,-25531
   8efb8:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   8efbc:	e03fff05 	stb	zero,-4(fp)
   8efc0:	00000806 	br	8efe4 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
   8efc4:	e0bffe17 	ldw	r2,-8(fp)
   8efc8:	10000005 	stb	zero,0(r2)
   8efcc:	e0bffe17 	ldw	r2,-8(fp)
   8efd0:	10800044 	addi	r2,r2,1
   8efd4:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   8efd8:	e0bfff03 	ldbu	r2,-4(fp)
   8efdc:	10800044 	addi	r2,r2,1
   8efe0:	e0bfff05 	stb	r2,-4(fp)
   8efe4:	e0bfff03 	ldbu	r2,-4(fp)
   8efe8:	108000f0 	cmpltui	r2,r2,3
   8efec:	103ff51e 	bne	r2,zero,8efc4 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   8eff0:	d0270745 	stb	zero,-25571(gp)
    OSPrioHighRdy = 0;
   8eff4:	d0270705 	stb	zero,-25572(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   8eff8:	d0270f15 	stw	zero,-25540(gp)
    OSTCBCur      = (OS_TCB *)0;
   8effc:	d0271415 	stw	zero,-25520(gp)
}
   8f000:	e037883a 	mov	sp,fp
   8f004:	df000017 	ldw	fp,0(sp)
   8f008:	dec00104 	addi	sp,sp,4
   8f00c:	f800283a 	ret

0008f010 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   8f010:	defff804 	addi	sp,sp,-32
   8f014:	dfc00715 	stw	ra,28(sp)
   8f018:	df000615 	stw	fp,24(sp)
   8f01c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   8f020:	018002f4 	movhi	r6,11
   8f024:	31acd004 	addi	r6,r6,-19648
   8f028:	00bfffd4 	movui	r2,65535
   8f02c:	d8800015 	stw	r2,0(sp)
   8f030:	008002f4 	movhi	r2,11
   8f034:	10aad104 	addi	r2,r2,-21692
   8f038:	d8800115 	stw	r2,4(sp)
   8f03c:	00808004 	movi	r2,512
   8f040:	d8800215 	stw	r2,8(sp)
   8f044:	d8000315 	stw	zero,12(sp)
   8f048:	008000c4 	movi	r2,3
   8f04c:	d8800415 	stw	r2,16(sp)
   8f050:	01000274 	movhi	r4,9
   8f054:	213d3104 	addi	r4,r4,-2876
   8f058:	000b883a 	mov	r5,zero
   8f05c:	01c00504 	movi	r7,20
   8f060:	00942a80 	call	942a8 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   8f064:	014002b4 	movhi	r5,10
   8f068:	29661804 	addi	r5,r5,-26528
   8f06c:	01000504 	movi	r4,20
   8f070:	e1bfff04 	addi	r6,fp,-4
   8f074:	0094bdc0 	call	94bdc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   8f078:	e037883a 	mov	sp,fp
   8f07c:	dfc00117 	ldw	ra,4(sp)
   8f080:	df000017 	ldw	fp,0(sp)
   8f084:	dec00204 	addi	sp,sp,8
   8f088:	f800283a 	ret

0008f08c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   8f08c:	defff804 	addi	sp,sp,-32
   8f090:	dfc00715 	stw	ra,28(sp)
   8f094:	df000615 	stw	fp,24(sp)
   8f098:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   8f09c:	018002f4 	movhi	r6,11
   8f0a0:	31aa5804 	addi	r6,r6,-22176
   8f0a4:	00bfff94 	movui	r2,65534
   8f0a8:	d8800015 	stw	r2,0(sp)
   8f0ac:	008002f4 	movhi	r2,11
   8f0b0:	10a85904 	addi	r2,r2,-24220
   8f0b4:	d8800115 	stw	r2,4(sp)
   8f0b8:	00808004 	movi	r2,512
   8f0bc:	d8800215 	stw	r2,8(sp)
   8f0c0:	d8000315 	stw	zero,12(sp)
   8f0c4:	008000c4 	movi	r2,3
   8f0c8:	d8800415 	stw	r2,16(sp)
   8f0cc:	01000274 	movhi	r4,9
   8f0d0:	213d4804 	addi	r4,r4,-2784
   8f0d4:	000b883a 	mov	r5,zero
   8f0d8:	01c004c4 	movi	r7,19
   8f0dc:	00942a80 	call	942a8 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   8f0e0:	014002b4 	movhi	r5,10
   8f0e4:	29661c04 	addi	r5,r5,-26512
   8f0e8:	010004c4 	movi	r4,19
   8f0ec:	e1bfff04 	addi	r6,fp,-4
   8f0f0:	0094bdc0 	call	94bdc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   8f0f4:	e037883a 	mov	sp,fp
   8f0f8:	dfc00117 	ldw	ra,4(sp)
   8f0fc:	df000017 	ldw	fp,0(sp)
   8f100:	dec00204 	addi	sp,sp,8
   8f104:	f800283a 	ret

0008f108 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   8f108:	defffb04 	addi	sp,sp,-20
   8f10c:	dfc00415 	stw	ra,16(sp)
   8f110:	df000315 	stw	fp,12(sp)
   8f114:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   8f118:	010002f4 	movhi	r4,11
   8f11c:	212fa104 	addi	r4,r4,-16764
   8f120:	01414404 	movi	r5,1296
   8f124:	008f1e80 	call	8f1e8 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   8f128:	010002f4 	movhi	r4,11
   8f12c:	2130e504 	addi	r4,r4,-15468
   8f130:	01401504 	movi	r5,84
   8f134:	008f1e80 	call	8f1e8 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   8f138:	008002f4 	movhi	r2,11
   8f13c:	10afa104 	addi	r2,r2,-16764
   8f140:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   8f144:	008002f4 	movhi	r2,11
   8f148:	10afbc04 	addi	r2,r2,-16656
   8f14c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   8f150:	e03fff05 	stb	zero,-4(fp)
   8f154:	00001106 	br	8f19c <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   8f158:	e0fffe17 	ldw	r3,-8(fp)
   8f15c:	e0bffd17 	ldw	r2,-12(fp)
   8f160:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   8f164:	e0fffe17 	ldw	r3,-8(fp)
   8f168:	00800fc4 	movi	r2,63
   8f16c:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   8f170:	e0bffe17 	ldw	r2,-8(fp)
   8f174:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   8f178:	e0bffe17 	ldw	r2,-8(fp)
   8f17c:	10801b04 	addi	r2,r2,108
   8f180:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   8f184:	e0bffd17 	ldw	r2,-12(fp)
   8f188:	10801b04 	addi	r2,r2,108
   8f18c:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   8f190:	e0bfff03 	ldbu	r2,-4(fp)
   8f194:	10800044 	addi	r2,r2,1
   8f198:	e0bfff05 	stb	r2,-4(fp)
   8f19c:	e0bfff03 	ldbu	r2,-4(fp)
   8f1a0:	108002f0 	cmpltui	r2,r2,11
   8f1a4:	103fec1e 	bne	r2,zero,8f158 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   8f1a8:	e0bffe17 	ldw	r2,-8(fp)
   8f1ac:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   8f1b0:	e0fffe17 	ldw	r3,-8(fp)
   8f1b4:	00800fc4 	movi	r2,63
   8f1b8:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   8f1bc:	e0bffe17 	ldw	r2,-8(fp)
   8f1c0:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   8f1c4:	d0270815 	stw	zero,-25568(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   8f1c8:	008002f4 	movhi	r2,11
   8f1cc:	10afa104 	addi	r2,r2,-16764
   8f1d0:	d0a70c15 	stw	r2,-25552(gp)
}
   8f1d4:	e037883a 	mov	sp,fp
   8f1d8:	dfc00117 	ldw	ra,4(sp)
   8f1dc:	df000017 	ldw	fp,0(sp)
   8f1e0:	dec00204 	addi	sp,sp,8
   8f1e4:	f800283a 	ret

0008f1e8 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   8f1e8:	defffd04 	addi	sp,sp,-12
   8f1ec:	df000215 	stw	fp,8(sp)
   8f1f0:	df000204 	addi	fp,sp,8
   8f1f4:	e13ffe15 	stw	r4,-8(fp)
   8f1f8:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
   8f1fc:	00000806 	br	8f220 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   8f200:	e0bffe17 	ldw	r2,-8(fp)
   8f204:	10000005 	stb	zero,0(r2)
   8f208:	e0bffe17 	ldw	r2,-8(fp)
   8f20c:	10800044 	addi	r2,r2,1
   8f210:	e0bffe15 	stw	r2,-8(fp)
        size--;
   8f214:	e0bfff0b 	ldhu	r2,-4(fp)
   8f218:	10bfffc4 	addi	r2,r2,-1
   8f21c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   8f220:	e0bfff0b 	ldhu	r2,-4(fp)
   8f224:	1004c03a 	cmpne	r2,r2,zero
   8f228:	103ff51e 	bne	r2,zero,8f200 <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   8f22c:	e037883a 	mov	sp,fp
   8f230:	df000017 	ldw	fp,0(sp)
   8f234:	dec00104 	addi	sp,sp,4
   8f238:	f800283a 	ret

0008f23c <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   8f23c:	defffc04 	addi	sp,sp,-16
   8f240:	df000315 	stw	fp,12(sp)
   8f244:	df000304 	addi	fp,sp,12
   8f248:	e13ffd15 	stw	r4,-12(fp)
   8f24c:	e17ffe15 	stw	r5,-8(fp)
   8f250:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
   8f254:	00000d06 	br	8f28c <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
   8f258:	e0bffe17 	ldw	r2,-8(fp)
   8f25c:	10c00003 	ldbu	r3,0(r2)
   8f260:	e0bffd17 	ldw	r2,-12(fp)
   8f264:	10c00005 	stb	r3,0(r2)
   8f268:	e0bffd17 	ldw	r2,-12(fp)
   8f26c:	10800044 	addi	r2,r2,1
   8f270:	e0bffd15 	stw	r2,-12(fp)
   8f274:	e0bffe17 	ldw	r2,-8(fp)
   8f278:	10800044 	addi	r2,r2,1
   8f27c:	e0bffe15 	stw	r2,-8(fp)
        size--;
   8f280:	e0bfff0b 	ldhu	r2,-4(fp)
   8f284:	10bfffc4 	addi	r2,r2,-1
   8f288:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   8f28c:	e0bfff0b 	ldhu	r2,-4(fp)
   8f290:	1004c03a 	cmpne	r2,r2,zero
   8f294:	103ff01e 	bne	r2,zero,8f258 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
   8f298:	e037883a 	mov	sp,fp
   8f29c:	df000017 	ldw	fp,0(sp)
   8f2a0:	dec00104 	addi	sp,sp,4
   8f2a4:	f800283a 	ret

0008f2a8 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   8f2a8:	defffb04 	addi	sp,sp,-20
   8f2ac:	dfc00415 	stw	ra,16(sp)
   8f2b0:	df000315 	stw	fp,12(sp)
   8f2b4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   8f2b8:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f2bc:	0005303a 	rdctl	r2,status
   8f2c0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f2c4:	e0fffe17 	ldw	r3,-8(fp)
   8f2c8:	00bfff84 	movi	r2,-2
   8f2cc:	1884703a 	and	r2,r3,r2
   8f2d0:	1001703a 	wrctl	status,r2
  
  return context;
   8f2d4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   8f2d8:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   8f2dc:	d0a71303 	ldbu	r2,-25524(gp)
   8f2e0:	10803fcc 	andi	r2,r2,255
   8f2e4:	1004c03a 	cmpne	r2,r2,zero
   8f2e8:	10001b1e 	bne	r2,zero,8f358 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   8f2ec:	d0a70503 	ldbu	r2,-25580(gp)
   8f2f0:	10803fcc 	andi	r2,r2,255
   8f2f4:	1004c03a 	cmpne	r2,r2,zero
   8f2f8:	1000171e 	bne	r2,zero,8f358 <OS_Sched+0xb0>
            OS_SchedNew();
   8f2fc:	008f37c0 	call	8f37c <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   8f300:	d0a70703 	ldbu	r2,-25572(gp)
   8f304:	d0e70743 	ldbu	r3,-25571(gp)
   8f308:	11003fcc 	andi	r4,r2,255
   8f30c:	18803fcc 	andi	r2,r3,255
   8f310:	20801126 	beq	r4,r2,8f358 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   8f314:	d0a70703 	ldbu	r2,-25572(gp)
   8f318:	10803fcc 	andi	r2,r2,255
   8f31c:	00c002f4 	movhi	r3,11
   8f320:	18f0e504 	addi	r3,r3,-15468
   8f324:	1085883a 	add	r2,r2,r2
   8f328:	1085883a 	add	r2,r2,r2
   8f32c:	10c5883a 	add	r2,r2,r3
   8f330:	10800017 	ldw	r2,0(r2)
   8f334:	d0a70f15 	stw	r2,-25540(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   8f338:	d0e70f17 	ldw	r3,-25540(gp)
   8f33c:	18800e17 	ldw	r2,56(r3)
   8f340:	10800044 	addi	r2,r2,1
   8f344:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   8f348:	d0a70a17 	ldw	r2,-25560(gp)
   8f34c:	10800044 	addi	r2,r2,1
   8f350:	d0a70a15 	stw	r2,-25560(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   8f354:	0097c940 	call	97c94 <OSCtxSw>
   8f358:	e0bfff17 	ldw	r2,-4(fp)
   8f35c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f360:	e0bffd17 	ldw	r2,-12(fp)
   8f364:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   8f368:	e037883a 	mov	sp,fp
   8f36c:	dfc00117 	ldw	ra,4(sp)
   8f370:	df000017 	ldw	fp,0(sp)
   8f374:	dec00204 	addi	sp,sp,8
   8f378:	f800283a 	ret

0008f37c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   8f37c:	defffe04 	addi	sp,sp,-8
   8f380:	df000115 	stw	fp,4(sp)
   8f384:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   8f388:	d0a71103 	ldbu	r2,-25532(gp)
   8f38c:	10c03fcc 	andi	r3,r2,255
   8f390:	008002b4 	movhi	r2,10
   8f394:	10a5d804 	addi	r2,r2,-26784
   8f398:	10c5883a 	add	r2,r2,r3
   8f39c:	10800003 	ldbu	r2,0(r2)
   8f3a0:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   8f3a4:	e0bfff03 	ldbu	r2,-4(fp)
   8f3a8:	100490fa 	slli	r2,r2,3
   8f3ac:	1009883a 	mov	r4,r2
   8f3b0:	e0ffff03 	ldbu	r3,-4(fp)
   8f3b4:	d0a71144 	addi	r2,gp,-25531
   8f3b8:	1885883a 	add	r2,r3,r2
   8f3bc:	10800003 	ldbu	r2,0(r2)
   8f3c0:	10c03fcc 	andi	r3,r2,255
   8f3c4:	008002b4 	movhi	r2,10
   8f3c8:	10a5d804 	addi	r2,r2,-26784
   8f3cc:	10c5883a 	add	r2,r2,r3
   8f3d0:	10800003 	ldbu	r2,0(r2)
   8f3d4:	2085883a 	add	r2,r4,r2
   8f3d8:	d0a70705 	stb	r2,-25572(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   8f3dc:	e037883a 	mov	sp,fp
   8f3e0:	df000017 	ldw	fp,0(sp)
   8f3e4:	dec00104 	addi	sp,sp,4
   8f3e8:	f800283a 	ret

0008f3ec <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   8f3ec:	defffc04 	addi	sp,sp,-16
   8f3f0:	df000315 	stw	fp,12(sp)
   8f3f4:	df000304 	addi	fp,sp,12
   8f3f8:	e13ffe15 	stw	r4,-8(fp)
   8f3fc:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   8f400:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   8f404:	00000d06 	br	8f43c <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
   8f408:	e0bfff17 	ldw	r2,-4(fp)
   8f40c:	10c00003 	ldbu	r3,0(r2)
   8f410:	e0bffe17 	ldw	r2,-8(fp)
   8f414:	10c00005 	stb	r3,0(r2)
   8f418:	e0bffe17 	ldw	r2,-8(fp)
   8f41c:	10800044 	addi	r2,r2,1
   8f420:	e0bffe15 	stw	r2,-8(fp)
   8f424:	e0bfff17 	ldw	r2,-4(fp)
   8f428:	10800044 	addi	r2,r2,1
   8f42c:	e0bfff15 	stw	r2,-4(fp)
        len++;
   8f430:	e0bffd03 	ldbu	r2,-12(fp)
   8f434:	10800044 	addi	r2,r2,1
   8f438:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   8f43c:	e0bfff17 	ldw	r2,-4(fp)
   8f440:	10800003 	ldbu	r2,0(r2)
   8f444:	10803fcc 	andi	r2,r2,255
   8f448:	1004c03a 	cmpne	r2,r2,zero
   8f44c:	103fee1e 	bne	r2,zero,8f408 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   8f450:	e0bffe17 	ldw	r2,-8(fp)
   8f454:	10000005 	stb	zero,0(r2)
    return (len);
   8f458:	e0bffd03 	ldbu	r2,-12(fp)
}
   8f45c:	e037883a 	mov	sp,fp
   8f460:	df000017 	ldw	fp,0(sp)
   8f464:	dec00104 	addi	sp,sp,4
   8f468:	f800283a 	ret

0008f46c <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   8f46c:	defffd04 	addi	sp,sp,-12
   8f470:	df000215 	stw	fp,8(sp)
   8f474:	df000204 	addi	fp,sp,8
   8f478:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   8f47c:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   8f480:	00000606 	br	8f49c <OS_StrLen+0x30>
        psrc++;
   8f484:	e0bfff17 	ldw	r2,-4(fp)
   8f488:	10800044 	addi	r2,r2,1
   8f48c:	e0bfff15 	stw	r2,-4(fp)
        len++;
   8f490:	e0bffe03 	ldbu	r2,-8(fp)
   8f494:	10800044 	addi	r2,r2,1
   8f498:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   8f49c:	e0bfff17 	ldw	r2,-4(fp)
   8f4a0:	10800003 	ldbu	r2,0(r2)
   8f4a4:	10803fcc 	andi	r2,r2,255
   8f4a8:	1004c03a 	cmpne	r2,r2,zero
   8f4ac:	103ff51e 	bne	r2,zero,8f484 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
   8f4b0:	e0bffe03 	ldbu	r2,-8(fp)
}
   8f4b4:	e037883a 	mov	sp,fp
   8f4b8:	df000017 	ldw	fp,0(sp)
   8f4bc:	dec00104 	addi	sp,sp,4
   8f4c0:	f800283a 	ret

0008f4c4 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   8f4c4:	defffa04 	addi	sp,sp,-24
   8f4c8:	dfc00515 	stw	ra,20(sp)
   8f4cc:	df000415 	stw	fp,16(sp)
   8f4d0:	df000404 	addi	fp,sp,16
   8f4d4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8f4d8:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f4dc:	0005303a 	rdctl	r2,status
   8f4e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f4e4:	e0fffd17 	ldw	r3,-12(fp)
   8f4e8:	00bfff84 	movi	r2,-2
   8f4ec:	1884703a 	and	r2,r3,r2
   8f4f0:	1001703a 	wrctl	status,r2
  
  return context;
   8f4f4:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   8f4f8:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
   8f4fc:	d0a70617 	ldw	r2,-25576(gp)
   8f500:	10800044 	addi	r2,r2,1
   8f504:	d0a70615 	stw	r2,-25576(gp)
   8f508:	e0bffe17 	ldw	r2,-8(fp)
   8f50c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f510:	e0bffc17 	ldw	r2,-16(fp)
   8f514:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   8f518:	00981400 	call	98140 <OSTaskIdleHook>
    }
   8f51c:	003fef06 	br	8f4dc <OS_TaskIdle+0x18>

0008f520 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   8f520:	defffa04 	addi	sp,sp,-24
   8f524:	dfc00515 	stw	ra,20(sp)
   8f528:	df000415 	stw	fp,16(sp)
   8f52c:	df000404 	addi	fp,sp,16
   8f530:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   8f534:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   8f538:	00000206 	br	8f544 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   8f53c:	01003204 	movi	r4,200
   8f540:	00955a00 	call	955a0 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   8f544:	d0a71703 	ldbu	r2,-25508(gp)
   8f548:	10803fcc 	andi	r2,r2,255
   8f54c:	1005003a 	cmpeq	r2,r2,zero
   8f550:	103ffa1e 	bne	r2,zero,8f53c <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   8f554:	d1270b17 	ldw	r4,-25556(gp)
   8f558:	01401904 	movi	r5,100
   8f55c:	0082af40 	call	82af4 <__udivsi3>
   8f560:	d0a70b15 	stw	r2,-25556(gp)
    if (OSIdleCtrMax == 0L) {
   8f564:	d0a70b17 	ldw	r2,-25556(gp)
   8f568:	1004c03a 	cmpne	r2,r2,zero
   8f56c:	1000031e 	bne	r2,zero,8f57c <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
   8f570:	d0270d05 	stb	zero,-25548(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   8f574:	01003fc4 	movi	r4,255
   8f578:	00951b40 	call	951b4 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f57c:	0005303a 	rdctl	r2,status
   8f580:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f584:	e0fffd17 	ldw	r3,-12(fp)
   8f588:	00bfff84 	movi	r2,-2
   8f58c:	1884703a 	and	r2,r3,r2
   8f590:	1001703a 	wrctl	status,r2
  
  return context;
   8f594:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   8f598:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   8f59c:	d0a70617 	ldw	r2,-25576(gp)
   8f5a0:	d0a71815 	stw	r2,-25504(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   8f5a4:	d0270615 	stw	zero,-25576(gp)
   8f5a8:	e0bffe17 	ldw	r2,-8(fp)
   8f5ac:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f5b0:	e0bffc17 	ldw	r2,-16(fp)
   8f5b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   8f5b8:	d1271817 	ldw	r4,-25504(gp)
   8f5bc:	d1670b17 	ldw	r5,-25556(gp)
   8f5c0:	0082af40 	call	82af4 <__udivsi3>
   8f5c4:	1007883a 	mov	r3,r2
   8f5c8:	00801904 	movi	r2,100
   8f5cc:	10c5c83a 	sub	r2,r2,r3
   8f5d0:	d0a70d05 	stb	r2,-25548(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   8f5d4:	00980d00 	call	980d0 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   8f5d8:	008f5e80 	call	8f5e8 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   8f5dc:	01001904 	movi	r4,100
   8f5e0:	00955a00 	call	955a0 <OSTimeDly>
    }
   8f5e4:	003fe506 	br	8f57c <OS_TaskStat+0x5c>

0008f5e8 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   8f5e8:	defffa04 	addi	sp,sp,-24
   8f5ec:	dfc00515 	stw	ra,20(sp)
   8f5f0:	df000415 	stw	fp,16(sp)
   8f5f4:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   8f5f8:	e03ffc05 	stb	zero,-16(fp)
   8f5fc:	00002406 	br	8f690 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   8f600:	e13ffc03 	ldbu	r4,-16(fp)
   8f604:	e17ffe04 	addi	r5,fp,-8
   8f608:	0094fb80 	call	94fb8 <OSTaskStkChk>
   8f60c:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   8f610:	e0bffc43 	ldbu	r2,-15(fp)
   8f614:	1004c03a 	cmpne	r2,r2,zero
   8f618:	10001a1e 	bne	r2,zero,8f684 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   8f61c:	e0bffc03 	ldbu	r2,-16(fp)
   8f620:	00c002f4 	movhi	r3,11
   8f624:	18f0e504 	addi	r3,r3,-15468
   8f628:	1085883a 	add	r2,r2,r2
   8f62c:	1085883a 	add	r2,r2,r2
   8f630:	10c5883a 	add	r2,r2,r3
   8f634:	10800017 	ldw	r2,0(r2)
   8f638:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   8f63c:	e0bffd17 	ldw	r2,-12(fp)
   8f640:	1005003a 	cmpeq	r2,r2,zero
   8f644:	10000f1e 	bne	r2,zero,8f684 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   8f648:	e0bffd17 	ldw	r2,-12(fp)
   8f64c:	10800060 	cmpeqi	r2,r2,1
   8f650:	10000c1e 	bne	r2,zero,8f684 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   8f654:	e0bffd17 	ldw	r2,-12(fp)
   8f658:	10c00217 	ldw	r3,8(r2)
   8f65c:	e0bffd17 	ldw	r2,-12(fp)
   8f660:	10800317 	ldw	r2,12(r2)
   8f664:	1085883a 	add	r2,r2,r2
   8f668:	1085883a 	add	r2,r2,r2
   8f66c:	1887883a 	add	r3,r3,r2
   8f670:	e0bffd17 	ldw	r2,-12(fp)
   8f674:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   8f678:	e0ffff17 	ldw	r3,-4(fp)
   8f67c:	e0bffd17 	ldw	r2,-12(fp)
   8f680:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   8f684:	e0bffc03 	ldbu	r2,-16(fp)
   8f688:	10800044 	addi	r2,r2,1
   8f68c:	e0bffc05 	stb	r2,-16(fp)
   8f690:	e0bffc03 	ldbu	r2,-16(fp)
   8f694:	10800570 	cmpltui	r2,r2,21
   8f698:	103fd91e 	bne	r2,zero,8f600 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
   8f69c:	e037883a 	mov	sp,fp
   8f6a0:	dfc00117 	ldw	ra,4(sp)
   8f6a4:	df000017 	ldw	fp,0(sp)
   8f6a8:	dec00204 	addi	sp,sp,8
   8f6ac:	f800283a 	ret

0008f6b0 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   8f6b0:	defff104 	addi	sp,sp,-60
   8f6b4:	dfc00e15 	stw	ra,56(sp)
   8f6b8:	df000d15 	stw	fp,52(sp)
   8f6bc:	df000d04 	addi	fp,sp,52
   8f6c0:	e17ffb15 	stw	r5,-20(fp)
   8f6c4:	e1bffc15 	stw	r6,-16(fp)
   8f6c8:	e0800417 	ldw	r2,16(fp)
   8f6cc:	e13ffa05 	stb	r4,-24(fp)
   8f6d0:	e1fffd0d 	sth	r7,-12(fp)
   8f6d4:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   8f6d8:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f6dc:	0005303a 	rdctl	r2,status
   8f6e0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f6e4:	e0fff717 	ldw	r3,-36(fp)
   8f6e8:	00bfff84 	movi	r2,-2
   8f6ec:	1884703a 	and	r2,r3,r2
   8f6f0:	1001703a 	wrctl	status,r2
  
  return context;
   8f6f4:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
   8f6f8:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   8f6fc:	d0a70c17 	ldw	r2,-25552(gp)
   8f700:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
   8f704:	e0bff917 	ldw	r2,-28(fp)
   8f708:	1005003a 	cmpeq	r2,r2,zero
   8f70c:	1000941e 	bne	r2,zero,8f960 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   8f710:	e0bff917 	ldw	r2,-28(fp)
   8f714:	10800517 	ldw	r2,20(r2)
   8f718:	d0a70c15 	stw	r2,-25552(gp)
   8f71c:	e0bff817 	ldw	r2,-32(fp)
   8f720:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f724:	e0bff617 	ldw	r2,-40(fp)
   8f728:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   8f72c:	e0fff917 	ldw	r3,-28(fp)
   8f730:	e0bffb17 	ldw	r2,-20(fp)
   8f734:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   8f738:	e0fff917 	ldw	r3,-28(fp)
   8f73c:	e0bffa03 	ldbu	r2,-24(fp)
   8f740:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   8f744:	e0bff917 	ldw	r2,-28(fp)
   8f748:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   8f74c:	e0bff917 	ldw	r2,-28(fp)
   8f750:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   8f754:	e0bff917 	ldw	r2,-28(fp)
   8f758:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   8f75c:	e0fff917 	ldw	r3,-28(fp)
   8f760:	e0800317 	ldw	r2,12(fp)
   8f764:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   8f768:	e0fff917 	ldw	r3,-28(fp)
   8f76c:	e0800217 	ldw	r2,8(fp)
   8f770:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   8f774:	e0fff917 	ldw	r3,-28(fp)
   8f778:	e0bffc17 	ldw	r2,-16(fp)
   8f77c:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   8f780:	e0fff917 	ldw	r3,-28(fp)
   8f784:	e0bffe0b 	ldhu	r2,-8(fp)
   8f788:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   8f78c:	e0fff917 	ldw	r3,-28(fp)
   8f790:	e0bffd0b 	ldhu	r2,-12(fp)
   8f794:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   8f798:	e0bff917 	ldw	r2,-28(fp)
   8f79c:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   8f7a0:	e0bffa03 	ldbu	r2,-24(fp)
   8f7a4:	1004d0fa 	srli	r2,r2,3
   8f7a8:	1007883a 	mov	r3,r2
   8f7ac:	e0bff917 	ldw	r2,-28(fp)
   8f7b0:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   8f7b4:	e0bffa03 	ldbu	r2,-24(fp)
   8f7b8:	108001cc 	andi	r2,r2,7
   8f7bc:	1007883a 	mov	r3,r2
   8f7c0:	e0bff917 	ldw	r2,-28(fp)
   8f7c4:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   8f7c8:	e0bff917 	ldw	r2,-28(fp)
   8f7cc:	10800d03 	ldbu	r2,52(r2)
   8f7d0:	10c03fcc 	andi	r3,r2,255
   8f7d4:	00800044 	movi	r2,1
   8f7d8:	10c4983a 	sll	r2,r2,r3
   8f7dc:	1007883a 	mov	r3,r2
   8f7e0:	e0bff917 	ldw	r2,-28(fp)
   8f7e4:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   8f7e8:	e0bff917 	ldw	r2,-28(fp)
   8f7ec:	10800cc3 	ldbu	r2,51(r2)
   8f7f0:	10c03fcc 	andi	r3,r2,255
   8f7f4:	00800044 	movi	r2,1
   8f7f8:	10c4983a 	sll	r2,r2,r3
   8f7fc:	1007883a 	mov	r3,r2
   8f800:	e0bff917 	ldw	r2,-28(fp)
   8f804:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   8f808:	e0bff917 	ldw	r2,-28(fp)
   8f80c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   8f810:	e0bff917 	ldw	r2,-28(fp)
   8f814:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   8f818:	e0bff917 	ldw	r2,-28(fp)
   8f81c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   8f820:	e0bff917 	ldw	r2,-28(fp)
   8f824:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   8f828:	e0bff917 	ldw	r2,-28(fp)
   8f82c:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   8f830:	e0bff917 	ldw	r2,-28(fp)
   8f834:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   8f838:	e0bff917 	ldw	r2,-28(fp)
   8f83c:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   8f840:	e0bff917 	ldw	r2,-28(fp)
   8f844:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   8f848:	e0bff917 	ldw	r2,-28(fp)
   8f84c:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   8f850:	e0fff917 	ldw	r3,-28(fp)
   8f854:	00800fc4 	movi	r2,63
   8f858:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   8f85c:	e0bff917 	ldw	r2,-28(fp)
   8f860:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   8f864:	e13ff917 	ldw	r4,-28(fp)
   8f868:	009815c0 	call	9815c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   8f86c:	e13ff917 	ldw	r4,-28(fp)
   8f870:	00980740 	call	98074 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f874:	0005303a 	rdctl	r2,status
   8f878:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f87c:	e0fff517 	ldw	r3,-44(fp)
   8f880:	00bfff84 	movi	r2,-2
   8f884:	1884703a 	and	r2,r3,r2
   8f888:	1001703a 	wrctl	status,r2
  
  return context;
   8f88c:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   8f890:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
   8f894:	e0bffa03 	ldbu	r2,-24(fp)
   8f898:	00c002f4 	movhi	r3,11
   8f89c:	18f0e504 	addi	r3,r3,-15468
   8f8a0:	1085883a 	add	r2,r2,r2
   8f8a4:	1085883a 	add	r2,r2,r2
   8f8a8:	10c7883a 	add	r3,r2,r3
   8f8ac:	e0bff917 	ldw	r2,-28(fp)
   8f8b0:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   8f8b4:	d0e70817 	ldw	r3,-25568(gp)
   8f8b8:	e0bff917 	ldw	r2,-28(fp)
   8f8bc:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   8f8c0:	e0bff917 	ldw	r2,-28(fp)
   8f8c4:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   8f8c8:	d0a70817 	ldw	r2,-25568(gp)
   8f8cc:	1005003a 	cmpeq	r2,r2,zero
   8f8d0:	1000031e 	bne	r2,zero,8f8e0 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
   8f8d4:	d0e70817 	ldw	r3,-25568(gp)
   8f8d8:	e0bff917 	ldw	r2,-28(fp)
   8f8dc:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
   8f8e0:	e0bff917 	ldw	r2,-28(fp)
   8f8e4:	d0a70815 	stw	r2,-25568(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   8f8e8:	e0bff917 	ldw	r2,-28(fp)
   8f8ec:	10c00d83 	ldbu	r3,54(r2)
   8f8f0:	d0a71103 	ldbu	r2,-25532(gp)
   8f8f4:	1884b03a 	or	r2,r3,r2
   8f8f8:	d0a71105 	stb	r2,-25532(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   8f8fc:	e0bff917 	ldw	r2,-28(fp)
   8f900:	10800d03 	ldbu	r2,52(r2)
   8f904:	11003fcc 	andi	r4,r2,255
   8f908:	e0bff917 	ldw	r2,-28(fp)
   8f90c:	10800d03 	ldbu	r2,52(r2)
   8f910:	10c03fcc 	andi	r3,r2,255
   8f914:	d0a71144 	addi	r2,gp,-25531
   8f918:	1885883a 	add	r2,r3,r2
   8f91c:	10c00003 	ldbu	r3,0(r2)
   8f920:	e0bff917 	ldw	r2,-28(fp)
   8f924:	10800d43 	ldbu	r2,53(r2)
   8f928:	1884b03a 	or	r2,r3,r2
   8f92c:	1007883a 	mov	r3,r2
   8f930:	d0a71144 	addi	r2,gp,-25531
   8f934:	2085883a 	add	r2,r4,r2
   8f938:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   8f93c:	d0a70d43 	ldbu	r2,-25547(gp)
   8f940:	10800044 	addi	r2,r2,1
   8f944:	d0a70d45 	stb	r2,-25547(gp)
   8f948:	e0bff817 	ldw	r2,-32(fp)
   8f94c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f950:	e0bff417 	ldw	r2,-48(fp)
   8f954:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   8f958:	e03fff15 	stw	zero,-4(fp)
   8f95c:	00000606 	br	8f978 <OS_TCBInit+0x2c8>
   8f960:	e0bff817 	ldw	r2,-32(fp)
   8f964:	e0bff315 	stw	r2,-52(fp)
   8f968:	e0bff317 	ldw	r2,-52(fp)
   8f96c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   8f970:	00801084 	movi	r2,66
   8f974:	e0bfff15 	stw	r2,-4(fp)
   8f978:	e0bfff17 	ldw	r2,-4(fp)
}
   8f97c:	e037883a 	mov	sp,fp
   8f980:	dfc00117 	ldw	ra,4(sp)
   8f984:	df000017 	ldw	fp,0(sp)
   8f988:	dec00204 	addi	sp,sp,8
   8f98c:	f800283a 	ret

0008f990 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   8f990:	defffe04 	addi	sp,sp,-8
   8f994:	df000115 	stw	fp,4(sp)
   8f998:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   8f99c:	d0a01104 	addi	r2,gp,-32700
   8f9a0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   8f9a4:	d0a01204 	addi	r2,gp,-32696
   8f9a8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   8f9ac:	d0a01384 	addi	r2,gp,-32690
   8f9b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   8f9b4:	d0a01404 	addi	r2,gp,-32688
   8f9b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   8f9bc:	d0a01304 	addi	r2,gp,-32692
   8f9c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   8f9c4:	d0a01484 	addi	r2,gp,-32686
   8f9c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   8f9cc:	d0a01504 	addi	r2,gp,-32684
   8f9d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   8f9d4:	d0a01584 	addi	r2,gp,-32682
   8f9d8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   8f9dc:	d0a01604 	addi	r2,gp,-32680
   8f9e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   8f9e4:	d0a01684 	addi	r2,gp,-32678
   8f9e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   8f9ec:	d0a01704 	addi	r2,gp,-32676
   8f9f0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   8f9f4:	d0a01784 	addi	r2,gp,-32674
   8f9f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   8f9fc:	d0a01804 	addi	r2,gp,-32672
   8fa00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   8fa04:	d0a01884 	addi	r2,gp,-32670
   8fa08:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   8fa0c:	d0a01904 	addi	r2,gp,-32668
   8fa10:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   8fa14:	d0a01984 	addi	r2,gp,-32666
   8fa18:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   8fa1c:	d0a01a04 	addi	r2,gp,-32664
   8fa20:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   8fa24:	d0a01a84 	addi	r2,gp,-32662
   8fa28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   8fa2c:	d0a01b04 	addi	r2,gp,-32660
   8fa30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   8fa34:	d0a01b84 	addi	r2,gp,-32658
   8fa38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   8fa3c:	d0a01c04 	addi	r2,gp,-32656
   8fa40:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   8fa44:	d0a01c84 	addi	r2,gp,-32654
   8fa48:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   8fa4c:	d0a01d04 	addi	r2,gp,-32652
   8fa50:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   8fa54:	d0a01d84 	addi	r2,gp,-32650
   8fa58:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   8fa5c:	d0a01e04 	addi	r2,gp,-32648
   8fa60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   8fa64:	d0a01e84 	addi	r2,gp,-32646
   8fa68:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   8fa6c:	d0a01f04 	addi	r2,gp,-32644
   8fa70:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   8fa74:	d0a01f84 	addi	r2,gp,-32642
   8fa78:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   8fa7c:	d0a02004 	addi	r2,gp,-32640
   8fa80:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   8fa84:	d0a02084 	addi	r2,gp,-32638
   8fa88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   8fa8c:	d0a02104 	addi	r2,gp,-32636
   8fa90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   8fa94:	d0a02184 	addi	r2,gp,-32634
   8fa98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   8fa9c:	d0a02204 	addi	r2,gp,-32632
   8faa0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   8faa4:	d0a02284 	addi	r2,gp,-32630
   8faa8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   8faac:	d0a02304 	addi	r2,gp,-32628
   8fab0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   8fab4:	d0a02384 	addi	r2,gp,-32626
   8fab8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   8fabc:	d0a02404 	addi	r2,gp,-32624
   8fac0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   8fac4:	d0a02484 	addi	r2,gp,-32622
   8fac8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   8facc:	d0a02504 	addi	r2,gp,-32620
   8fad0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   8fad4:	d0a02584 	addi	r2,gp,-32618
   8fad8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   8fadc:	d0a02604 	addi	r2,gp,-32616
   8fae0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   8fae4:	d0a02684 	addi	r2,gp,-32614
   8fae8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   8faec:	d0a02704 	addi	r2,gp,-32612
   8faf0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   8faf4:	d0a02784 	addi	r2,gp,-32610
   8faf8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   8fafc:	d0a02804 	addi	r2,gp,-32608
   8fb00:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   8fb04:	d0a02d04 	addi	r2,gp,-32588
   8fb08:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   8fb0c:	e037883a 	mov	sp,fp
   8fb10:	df000017 	ldw	fp,0(sp)
   8fb14:	dec00104 	addi	sp,sp,4
   8fb18:	f800283a 	ret

0008fb1c <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   8fb1c:	defff104 	addi	sp,sp,-60
   8fb20:	df000e15 	stw	fp,56(sp)
   8fb24:	df000e04 	addi	fp,sp,56
   8fb28:	e13ffa15 	stw	r4,-24(fp)
   8fb2c:	e1fffd15 	stw	r7,-12(fp)
   8fb30:	e17ffb0d 	sth	r5,-20(fp)
   8fb34:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   8fb38:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   8fb3c:	e0bffd17 	ldw	r2,-12(fp)
   8fb40:	1004c03a 	cmpne	r2,r2,zero
   8fb44:	1000021e 	bne	r2,zero,8fb50 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
   8fb48:	e03fff15 	stw	zero,-4(fp)
   8fb4c:	0000bb06 	br	8fe3c <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   8fb50:	e0bffa17 	ldw	r2,-24(fp)
   8fb54:	1004c03a 	cmpne	r2,r2,zero
   8fb58:	1000051e 	bne	r2,zero,8fb70 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   8fb5c:	e0fffd17 	ldw	r3,-12(fp)
   8fb60:	00801b84 	movi	r2,110
   8fb64:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   8fb68:	e03fff15 	stw	zero,-4(fp)
   8fb6c:	0000b306 	br	8fe3c <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   8fb70:	e0bffa17 	ldw	r2,-24(fp)
   8fb74:	10800003 	ldbu	r2,0(r2)
   8fb78:	10803fcc 	andi	r2,r2,255
   8fb7c:	10800160 	cmpeqi	r2,r2,5
   8fb80:	1000051e 	bne	r2,zero,8fb98 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   8fb84:	e0fffd17 	ldw	r3,-12(fp)
   8fb88:	00800044 	movi	r2,1
   8fb8c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   8fb90:	e03fff15 	stw	zero,-4(fp)
   8fb94:	0000a906 	br	8fe3c <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   8fb98:	e0fffc03 	ldbu	r3,-16(fp)
   8fb9c:	00bfe004 	movi	r2,-128
   8fba0:	1884703a 	and	r2,r3,r2
   8fba4:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   8fba8:	e0bff943 	ldbu	r2,-27(fp)
   8fbac:	1005003a 	cmpeq	r2,r2,zero
   8fbb0:	1000061e 	bne	r2,zero,8fbcc <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
   8fbb4:	e0bffc03 	ldbu	r2,-16(fp)
   8fbb8:	10801fcc 	andi	r2,r2,127
   8fbbc:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
   8fbc0:	00800044 	movi	r2,1
   8fbc4:	e0bff905 	stb	r2,-28(fp)
   8fbc8:	00000106 	br	8fbd0 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
   8fbcc:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   8fbd0:	e0bffd17 	ldw	r2,-12(fp)
   8fbd4:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8fbd8:	0005303a 	rdctl	r2,status
   8fbdc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8fbe0:	e0fff717 	ldw	r3,-36(fp)
   8fbe4:	00bfff84 	movi	r2,-2
   8fbe8:	1884703a 	and	r2,r3,r2
   8fbec:	1001703a 	wrctl	status,r2
  
  return context;
   8fbf0:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   8fbf4:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
   8fbf8:	e0bffc03 	ldbu	r2,-16(fp)
   8fbfc:	e0bffe15 	stw	r2,-8(fp)
   8fc00:	e0fffe17 	ldw	r3,-8(fp)
   8fc04:	18800060 	cmpeqi	r2,r3,1
   8fc08:	1000651e 	bne	r2,zero,8fda0 <OSFlagAccept+0x284>
   8fc0c:	e0fffe17 	ldw	r3,-8(fp)
   8fc10:	18800088 	cmpgei	r2,r3,2
   8fc14:	1000041e 	bne	r2,zero,8fc28 <OSFlagAccept+0x10c>
   8fc18:	e0fffe17 	ldw	r3,-8(fp)
   8fc1c:	1805003a 	cmpeq	r2,r3,zero
   8fc20:	1000421e 	bne	r2,zero,8fd2c <OSFlagAccept+0x210>
   8fc24:	00007b06 	br	8fe14 <OSFlagAccept+0x2f8>
   8fc28:	e0fffe17 	ldw	r3,-8(fp)
   8fc2c:	188000a0 	cmpeqi	r2,r3,2
   8fc30:	1000041e 	bne	r2,zero,8fc44 <OSFlagAccept+0x128>
   8fc34:	e0fffe17 	ldw	r3,-8(fp)
   8fc38:	188000e0 	cmpeqi	r2,r3,3
   8fc3c:	10001e1e 	bne	r2,zero,8fcb8 <OSFlagAccept+0x19c>
   8fc40:	00007406 	br	8fe14 <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   8fc44:	e0bffa17 	ldw	r2,-24(fp)
   8fc48:	10c0020b 	ldhu	r3,8(r2)
   8fc4c:	e0bffb0b 	ldhu	r2,-20(fp)
   8fc50:	1884703a 	and	r2,r3,r2
   8fc54:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   8fc58:	e0fff98b 	ldhu	r3,-26(fp)
   8fc5c:	e0bffb0b 	ldhu	r2,-20(fp)
   8fc60:	18800d1e 	bne	r3,r2,8fc98 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   8fc64:	e0bff903 	ldbu	r2,-28(fp)
   8fc68:	10800058 	cmpnei	r2,r2,1
   8fc6c:	10000d1e 	bne	r2,zero,8fca4 <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   8fc70:	e0bffa17 	ldw	r2,-24(fp)
   8fc74:	1080020b 	ldhu	r2,8(r2)
   8fc78:	1007883a 	mov	r3,r2
   8fc7c:	e0bff98b 	ldhu	r2,-26(fp)
   8fc80:	0084303a 	nor	r2,zero,r2
   8fc84:	1884703a 	and	r2,r3,r2
   8fc88:	1007883a 	mov	r3,r2
   8fc8c:	e0bffa17 	ldw	r2,-24(fp)
   8fc90:	10c0020d 	sth	r3,8(r2)
   8fc94:	00000306 	br	8fca4 <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   8fc98:	e0fffd17 	ldw	r3,-12(fp)
   8fc9c:	00801c04 	movi	r2,112
   8fca0:	18800005 	stb	r2,0(r3)
   8fca4:	e0bff817 	ldw	r2,-32(fp)
   8fca8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8fcac:	e0bff617 	ldw	r2,-40(fp)
   8fcb0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   8fcb4:	00005f06 	br	8fe34 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   8fcb8:	e0bffa17 	ldw	r2,-24(fp)
   8fcbc:	10c0020b 	ldhu	r3,8(r2)
   8fcc0:	e0bffb0b 	ldhu	r2,-20(fp)
   8fcc4:	1884703a 	and	r2,r3,r2
   8fcc8:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   8fccc:	e0bff98b 	ldhu	r2,-26(fp)
   8fcd0:	1005003a 	cmpeq	r2,r2,zero
   8fcd4:	10000d1e 	bne	r2,zero,8fd0c <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   8fcd8:	e0bff903 	ldbu	r2,-28(fp)
   8fcdc:	10800058 	cmpnei	r2,r2,1
   8fce0:	10000d1e 	bne	r2,zero,8fd18 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   8fce4:	e0bffa17 	ldw	r2,-24(fp)
   8fce8:	1080020b 	ldhu	r2,8(r2)
   8fcec:	1007883a 	mov	r3,r2
   8fcf0:	e0bff98b 	ldhu	r2,-26(fp)
   8fcf4:	0084303a 	nor	r2,zero,r2
   8fcf8:	1884703a 	and	r2,r3,r2
   8fcfc:	1007883a 	mov	r3,r2
   8fd00:	e0bffa17 	ldw	r2,-24(fp)
   8fd04:	10c0020d 	sth	r3,8(r2)
   8fd08:	00000306 	br	8fd18 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   8fd0c:	e0fffd17 	ldw	r3,-12(fp)
   8fd10:	00801c04 	movi	r2,112
   8fd14:	18800005 	stb	r2,0(r3)
   8fd18:	e0bff817 	ldw	r2,-32(fp)
   8fd1c:	e0bff515 	stw	r2,-44(fp)
   8fd20:	e0bff517 	ldw	r2,-44(fp)
   8fd24:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   8fd28:	00004206 	br	8fe34 <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   8fd2c:	e0bffa17 	ldw	r2,-24(fp)
   8fd30:	1080020b 	ldhu	r2,8(r2)
   8fd34:	0084303a 	nor	r2,zero,r2
   8fd38:	1007883a 	mov	r3,r2
   8fd3c:	e0bffb0b 	ldhu	r2,-20(fp)
   8fd40:	1884703a 	and	r2,r3,r2
   8fd44:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   8fd48:	e0fff98b 	ldhu	r3,-26(fp)
   8fd4c:	e0bffb0b 	ldhu	r2,-20(fp)
   8fd50:	18800b1e 	bne	r3,r2,8fd80 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   8fd54:	e0bff903 	ldbu	r2,-28(fp)
   8fd58:	10800058 	cmpnei	r2,r2,1
   8fd5c:	10000b1e 	bne	r2,zero,8fd8c <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   8fd60:	e0bffa17 	ldw	r2,-24(fp)
   8fd64:	10c0020b 	ldhu	r3,8(r2)
   8fd68:	e0bff98b 	ldhu	r2,-26(fp)
   8fd6c:	1884b03a 	or	r2,r3,r2
   8fd70:	1007883a 	mov	r3,r2
   8fd74:	e0bffa17 	ldw	r2,-24(fp)
   8fd78:	10c0020d 	sth	r3,8(r2)
   8fd7c:	00000306 	br	8fd8c <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   8fd80:	e0fffd17 	ldw	r3,-12(fp)
   8fd84:	00801c04 	movi	r2,112
   8fd88:	18800005 	stb	r2,0(r3)
   8fd8c:	e0bff817 	ldw	r2,-32(fp)
   8fd90:	e0bff415 	stw	r2,-48(fp)
   8fd94:	e0bff417 	ldw	r2,-48(fp)
   8fd98:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   8fd9c:	00002506 	br	8fe34 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   8fda0:	e0bffa17 	ldw	r2,-24(fp)
   8fda4:	1080020b 	ldhu	r2,8(r2)
   8fda8:	0084303a 	nor	r2,zero,r2
   8fdac:	1007883a 	mov	r3,r2
   8fdb0:	e0bffb0b 	ldhu	r2,-20(fp)
   8fdb4:	1884703a 	and	r2,r3,r2
   8fdb8:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   8fdbc:	e0bff98b 	ldhu	r2,-26(fp)
   8fdc0:	1005003a 	cmpeq	r2,r2,zero
   8fdc4:	10000b1e 	bne	r2,zero,8fdf4 <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   8fdc8:	e0bff903 	ldbu	r2,-28(fp)
   8fdcc:	10800058 	cmpnei	r2,r2,1
   8fdd0:	10000b1e 	bne	r2,zero,8fe00 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   8fdd4:	e0bffa17 	ldw	r2,-24(fp)
   8fdd8:	10c0020b 	ldhu	r3,8(r2)
   8fddc:	e0bff98b 	ldhu	r2,-26(fp)
   8fde0:	1884b03a 	or	r2,r3,r2
   8fde4:	1007883a 	mov	r3,r2
   8fde8:	e0bffa17 	ldw	r2,-24(fp)
   8fdec:	10c0020d 	sth	r3,8(r2)
   8fdf0:	00000306 	br	8fe00 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   8fdf4:	e0fffd17 	ldw	r3,-12(fp)
   8fdf8:	00801c04 	movi	r2,112
   8fdfc:	18800005 	stb	r2,0(r3)
   8fe00:	e0bff817 	ldw	r2,-32(fp)
   8fe04:	e0bff315 	stw	r2,-52(fp)
   8fe08:	e0bff317 	ldw	r2,-52(fp)
   8fe0c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   8fe10:	00000806 	br	8fe34 <OSFlagAccept+0x318>
   8fe14:	e0bff817 	ldw	r2,-32(fp)
   8fe18:	e0bff215 	stw	r2,-56(fp)
   8fe1c:	e0bff217 	ldw	r2,-56(fp)
   8fe20:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   8fe24:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   8fe28:	e0fffd17 	ldw	r3,-12(fp)
   8fe2c:	00801bc4 	movi	r2,111
   8fe30:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
   8fe34:	e0bff98b 	ldhu	r2,-26(fp)
   8fe38:	e0bfff15 	stw	r2,-4(fp)
   8fe3c:	e0bfff17 	ldw	r2,-4(fp)
}
   8fe40:	e037883a 	mov	sp,fp
   8fe44:	df000017 	ldw	fp,0(sp)
   8fe48:	dec00104 	addi	sp,sp,4
   8fe4c:	f800283a 	ret

0008fe50 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   8fe50:	defff704 	addi	sp,sp,-36
   8fe54:	df000815 	stw	fp,32(sp)
   8fe58:	df000804 	addi	fp,sp,32
   8fe5c:	e17ffe15 	stw	r5,-8(fp)
   8fe60:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   8fe64:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   8fe68:	e0bffe17 	ldw	r2,-8(fp)
   8fe6c:	1004c03a 	cmpne	r2,r2,zero
   8fe70:	1000021e 	bne	r2,zero,8fe7c <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   8fe74:	e03fff15 	stw	zero,-4(fp)
   8fe78:	00003f06 	br	8ff78 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   8fe7c:	008002b4 	movhi	r2,10
   8fe80:	10b3d404 	addi	r2,r2,-12464
   8fe84:	10800003 	ldbu	r2,0(r2)
   8fe88:	10803fcc 	andi	r2,r2,255
   8fe8c:	1005003a 	cmpeq	r2,r2,zero
   8fe90:	1000051e 	bne	r2,zero,8fea8 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   8fe94:	e0fffe17 	ldw	r3,-8(fp)
   8fe98:	00800404 	movi	r2,16
   8fe9c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
   8fea0:	e03fff15 	stw	zero,-4(fp)
   8fea4:	00003406 	br	8ff78 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8fea8:	0005303a 	rdctl	r2,status
   8feac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8feb0:	e0fffa17 	ldw	r3,-24(fp)
   8feb4:	00bfff84 	movi	r2,-2
   8feb8:	1884703a 	and	r2,r3,r2
   8febc:	1001703a 	wrctl	status,r2
  
  return context;
   8fec0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   8fec4:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   8fec8:	008002b4 	movhi	r2,10
   8fecc:	10b3d704 	addi	r2,r2,-12452
   8fed0:	10800017 	ldw	r2,0(r2)
   8fed4:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   8fed8:	e0bffc17 	ldw	r2,-16(fp)
   8fedc:	1005003a 	cmpeq	r2,r2,zero
   8fee0:	10001c1e 	bne	r2,zero,8ff54 <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   8fee4:	008002b4 	movhi	r2,10
   8fee8:	10b3d704 	addi	r2,r2,-12452
   8feec:	10800017 	ldw	r2,0(r2)
   8fef0:	10800117 	ldw	r2,4(r2)
   8fef4:	1007883a 	mov	r3,r2
   8fef8:	008002b4 	movhi	r2,10
   8fefc:	10b3d704 	addi	r2,r2,-12452
   8ff00:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   8ff04:	e0fffc17 	ldw	r3,-16(fp)
   8ff08:	00800144 	movi	r2,5
   8ff0c:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   8ff10:	e0fffc17 	ldw	r3,-16(fp)
   8ff14:	e0bffd0b 	ldhu	r2,-12(fp)
   8ff18:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   8ff1c:	e0bffc17 	ldw	r2,-16(fp)
   8ff20:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   8ff24:	e0fffc17 	ldw	r3,-16(fp)
   8ff28:	00800fc4 	movi	r2,63
   8ff2c:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   8ff30:	e0bffc17 	ldw	r2,-16(fp)
   8ff34:	100002c5 	stb	zero,11(r2)
   8ff38:	e0bffb17 	ldw	r2,-20(fp)
   8ff3c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ff40:	e0bff917 	ldw	r2,-28(fp)
   8ff44:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   8ff48:	e0bffe17 	ldw	r2,-8(fp)
   8ff4c:	10000005 	stb	zero,0(r2)
   8ff50:	00000706 	br	8ff70 <OSFlagCreate+0x120>
   8ff54:	e0bffb17 	ldw	r2,-20(fp)
   8ff58:	e0bff815 	stw	r2,-32(fp)
   8ff5c:	e0bff817 	ldw	r2,-32(fp)
   8ff60:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   8ff64:	e0fffe17 	ldw	r3,-8(fp)
   8ff68:	00801c84 	movi	r2,114
   8ff6c:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   8ff70:	e0bffc17 	ldw	r2,-16(fp)
   8ff74:	e0bfff15 	stw	r2,-4(fp)
   8ff78:	e0bfff17 	ldw	r2,-4(fp)
}
   8ff7c:	e037883a 	mov	sp,fp
   8ff80:	df000017 	ldw	fp,0(sp)
   8ff84:	dec00104 	addi	sp,sp,4
   8ff88:	f800283a 	ret

0008ff8c <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   8ff8c:	defff004 	addi	sp,sp,-64
   8ff90:	dfc00f15 	stw	ra,60(sp)
   8ff94:	df000e15 	stw	fp,56(sp)
   8ff98:	df000e04 	addi	fp,sp,56
   8ff9c:	e13ffb15 	stw	r4,-20(fp)
   8ffa0:	e1bffd15 	stw	r6,-12(fp)
   8ffa4:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   8ffa8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   8ffac:	e0bffd17 	ldw	r2,-12(fp)
   8ffb0:	1004c03a 	cmpne	r2,r2,zero
   8ffb4:	1000031e 	bne	r2,zero,8ffc4 <OSFlagDel+0x38>
        return (pgrp);
   8ffb8:	e0bffb17 	ldw	r2,-20(fp)
   8ffbc:	e0bfff15 	stw	r2,-4(fp)
   8ffc0:	00009606 	br	9021c <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   8ffc4:	e0bffb17 	ldw	r2,-20(fp)
   8ffc8:	1004c03a 	cmpne	r2,r2,zero
   8ffcc:	1000061e 	bne	r2,zero,8ffe8 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   8ffd0:	e0fffd17 	ldw	r3,-12(fp)
   8ffd4:	00801b84 	movi	r2,110
   8ffd8:	18800005 	stb	r2,0(r3)
        return (pgrp);
   8ffdc:	e0fffb17 	ldw	r3,-20(fp)
   8ffe0:	e0ffff15 	stw	r3,-4(fp)
   8ffe4:	00008d06 	br	9021c <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   8ffe8:	008002b4 	movhi	r2,10
   8ffec:	10b3d404 	addi	r2,r2,-12464
   8fff0:	10800003 	ldbu	r2,0(r2)
   8fff4:	10803fcc 	andi	r2,r2,255
   8fff8:	1005003a 	cmpeq	r2,r2,zero
   8fffc:	1000061e 	bne	r2,zero,90018 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   90000:	e0fffd17 	ldw	r3,-12(fp)
   90004:	008003c4 	movi	r2,15
   90008:	18800005 	stb	r2,0(r3)
        return (pgrp);
   9000c:	e0bffb17 	ldw	r2,-20(fp)
   90010:	e0bfff15 	stw	r2,-4(fp)
   90014:	00008106 	br	9021c <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   90018:	e0bffb17 	ldw	r2,-20(fp)
   9001c:	10800003 	ldbu	r2,0(r2)
   90020:	10803fcc 	andi	r2,r2,255
   90024:	10800160 	cmpeqi	r2,r2,5
   90028:	1000061e 	bne	r2,zero,90044 <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
   9002c:	e0fffd17 	ldw	r3,-12(fp)
   90030:	00800044 	movi	r2,1
   90034:	18800005 	stb	r2,0(r3)
        return (pgrp);
   90038:	e0fffb17 	ldw	r3,-20(fp)
   9003c:	e0ffff15 	stw	r3,-4(fp)
   90040:	00007606 	br	9021c <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90044:	0005303a 	rdctl	r2,status
   90048:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9004c:	e0fff617 	ldw	r3,-40(fp)
   90050:	00bfff84 	movi	r2,-2
   90054:	1884703a 	and	r2,r3,r2
   90058:	1001703a 	wrctl	status,r2
  
  return context;
   9005c:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
   90060:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   90064:	e0bffb17 	ldw	r2,-20(fp)
   90068:	10800117 	ldw	r2,4(r2)
   9006c:	1005003a 	cmpeq	r2,r2,zero
   90070:	1000031e 	bne	r2,zero,90080 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   90074:	00800044 	movi	r2,1
   90078:	e0bffa05 	stb	r2,-24(fp)
   9007c:	00000106 	br	90084 <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   90080:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
   90084:	e0bffc03 	ldbu	r2,-16(fp)
   90088:	e0bffe15 	stw	r2,-8(fp)
   9008c:	e0fffe17 	ldw	r3,-8(fp)
   90090:	1805003a 	cmpeq	r2,r3,zero
   90094:	1000041e 	bne	r2,zero,900a8 <OSFlagDel+0x11c>
   90098:	e0fffe17 	ldw	r3,-8(fp)
   9009c:	18800060 	cmpeqi	r2,r3,1
   900a0:	1000281e 	bne	r2,zero,90144 <OSFlagDel+0x1b8>
   900a4:	00005206 	br	901f0 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   900a8:	e0bffa03 	ldbu	r2,-24(fp)
   900ac:	1004c03a 	cmpne	r2,r2,zero
   900b0:	10001a1e 	bne	r2,zero,9011c <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   900b4:	e0fffb17 	ldw	r3,-20(fp)
   900b8:	00800fc4 	movi	r2,63
   900bc:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   900c0:	e0bffb17 	ldw	r2,-20(fp)
   900c4:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   900c8:	e0bffb17 	ldw	r2,-20(fp)
   900cc:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   900d0:	008002b4 	movhi	r2,10
   900d4:	10b3d704 	addi	r2,r2,-12452
   900d8:	10c00017 	ldw	r3,0(r2)
   900dc:	e0bffb17 	ldw	r2,-20(fp)
   900e0:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   900e4:	e0bffb17 	ldw	r2,-20(fp)
   900e8:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   900ec:	00c002b4 	movhi	r3,10
   900f0:	18f3d704 	addi	r3,r3,-12452
   900f4:	e0bffb17 	ldw	r2,-20(fp)
   900f8:	18800015 	stw	r2,0(r3)
   900fc:	e0bff717 	ldw	r2,-36(fp)
   90100:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90104:	e0bff517 	ldw	r2,-44(fp)
   90108:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   9010c:	e0bffd17 	ldw	r2,-12(fp)
   90110:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   90114:	e03ff815 	stw	zero,-32(fp)
   90118:	00003e06 	br	90214 <OSFlagDel+0x288>
   9011c:	e0bff717 	ldw	r2,-36(fp)
   90120:	e0bff415 	stw	r2,-48(fp)
   90124:	e0bff417 	ldw	r2,-48(fp)
   90128:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   9012c:	e0fffd17 	ldw	r3,-12(fp)
   90130:	00801244 	movi	r2,73
   90134:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
   90138:	e0bffb17 	ldw	r2,-20(fp)
   9013c:	e0bff815 	stw	r2,-32(fp)
             }
             break;
   90140:	00003406 	br	90214 <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   90144:	e0bffb17 	ldw	r2,-20(fp)
   90148:	10800117 	ldw	r2,4(r2)
   9014c:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   90150:	00000606 	br	9016c <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   90154:	e13ff917 	ldw	r4,-28(fp)
   90158:	000b883a 	mov	r5,zero
   9015c:	009129c0 	call	9129c <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   90160:	e0bff917 	ldw	r2,-28(fp)
   90164:	10800017 	ldw	r2,0(r2)
   90168:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   9016c:	e0bff917 	ldw	r2,-28(fp)
   90170:	1004c03a 	cmpne	r2,r2,zero
   90174:	103ff71e 	bne	r2,zero,90154 <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   90178:	e0fffb17 	ldw	r3,-20(fp)
   9017c:	00800fc4 	movi	r2,63
   90180:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   90184:	e0bffb17 	ldw	r2,-20(fp)
   90188:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   9018c:	e0bffb17 	ldw	r2,-20(fp)
   90190:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   90194:	008002b4 	movhi	r2,10
   90198:	10b3d704 	addi	r2,r2,-12452
   9019c:	10c00017 	ldw	r3,0(r2)
   901a0:	e0bffb17 	ldw	r2,-20(fp)
   901a4:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   901a8:	e0bffb17 	ldw	r2,-20(fp)
   901ac:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   901b0:	00c002b4 	movhi	r3,10
   901b4:	18f3d704 	addi	r3,r3,-12452
   901b8:	e0bffb17 	ldw	r2,-20(fp)
   901bc:	18800015 	stw	r2,0(r3)
   901c0:	e0bff717 	ldw	r2,-36(fp)
   901c4:	e0bff315 	stw	r2,-52(fp)
   901c8:	e0bff317 	ldw	r2,-52(fp)
   901cc:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   901d0:	e0bffa03 	ldbu	r2,-24(fp)
   901d4:	10800058 	cmpnei	r2,r2,1
   901d8:	1000011e 	bne	r2,zero,901e0 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   901dc:	008f2a80 	call	8f2a8 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   901e0:	e0bffd17 	ldw	r2,-12(fp)
   901e4:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   901e8:	e03ff815 	stw	zero,-32(fp)
             break;
   901ec:	00000906 	br	90214 <OSFlagDel+0x288>
   901f0:	e0bff717 	ldw	r2,-36(fp)
   901f4:	e0bff215 	stw	r2,-56(fp)
   901f8:	e0bff217 	ldw	r2,-56(fp)
   901fc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   90200:	e0fffd17 	ldw	r3,-12(fp)
   90204:	008001c4 	movi	r2,7
   90208:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
   9020c:	e0bffb17 	ldw	r2,-20(fp)
   90210:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
   90214:	e0bff817 	ldw	r2,-32(fp)
   90218:	e0bfff15 	stw	r2,-4(fp)
   9021c:	e0bfff17 	ldw	r2,-4(fp)
}
   90220:	e037883a 	mov	sp,fp
   90224:	dfc00117 	ldw	ra,4(sp)
   90228:	df000017 	ldw	fp,0(sp)
   9022c:	dec00204 	addi	sp,sp,8
   90230:	f800283a 	ret

00090234 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   90234:	defff504 	addi	sp,sp,-44
   90238:	dfc00a15 	stw	ra,40(sp)
   9023c:	df000915 	stw	fp,36(sp)
   90240:	df000904 	addi	fp,sp,36
   90244:	e13ffc15 	stw	r4,-16(fp)
   90248:	e17ffd15 	stw	r5,-12(fp)
   9024c:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   90250:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   90254:	e0bffe17 	ldw	r2,-8(fp)
   90258:	1004c03a 	cmpne	r2,r2,zero
   9025c:	1000021e 	bne	r2,zero,90268 <OSFlagNameGet+0x34>
        return (0);
   90260:	e03fff15 	stw	zero,-4(fp)
   90264:	00003e06 	br	90360 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   90268:	e0bffc17 	ldw	r2,-16(fp)
   9026c:	1004c03a 	cmpne	r2,r2,zero
   90270:	1000051e 	bne	r2,zero,90288 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   90274:	e0fffe17 	ldw	r3,-8(fp)
   90278:	00801b84 	movi	r2,110
   9027c:	18800005 	stb	r2,0(r3)
        return (0);
   90280:	e03fff15 	stw	zero,-4(fp)
   90284:	00003606 	br	90360 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   90288:	e0bffd17 	ldw	r2,-12(fp)
   9028c:	1004c03a 	cmpne	r2,r2,zero
   90290:	1000051e 	bne	r2,zero,902a8 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
   90294:	e0fffe17 	ldw	r3,-8(fp)
   90298:	00800304 	movi	r2,12
   9029c:	18800005 	stb	r2,0(r3)
        return (0);
   902a0:	e03fff15 	stw	zero,-4(fp)
   902a4:	00002e06 	br	90360 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   902a8:	008002b4 	movhi	r2,10
   902ac:	10b3d404 	addi	r2,r2,-12464
   902b0:	10800003 	ldbu	r2,0(r2)
   902b4:	10803fcc 	andi	r2,r2,255
   902b8:	1005003a 	cmpeq	r2,r2,zero
   902bc:	1000051e 	bne	r2,zero,902d4 <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
   902c0:	e0fffe17 	ldw	r3,-8(fp)
   902c4:	00800444 	movi	r2,17
   902c8:	18800005 	stb	r2,0(r3)
        return (0);
   902cc:	e03fff15 	stw	zero,-4(fp)
   902d0:	00002306 	br	90360 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   902d4:	0005303a 	rdctl	r2,status
   902d8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   902dc:	e0fff917 	ldw	r3,-28(fp)
   902e0:	00bfff84 	movi	r2,-2
   902e4:	1884703a 	and	r2,r3,r2
   902e8:	1001703a 	wrctl	status,r2
  
  return context;
   902ec:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   902f0:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   902f4:	e0bffc17 	ldw	r2,-16(fp)
   902f8:	10800003 	ldbu	r2,0(r2)
   902fc:	10803fcc 	andi	r2,r2,255
   90300:	10800160 	cmpeqi	r2,r2,5
   90304:	1000091e 	bne	r2,zero,9032c <OSFlagNameGet+0xf8>
   90308:	e0bffa17 	ldw	r2,-24(fp)
   9030c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90310:	e0bff817 	ldw	r2,-32(fp)
   90314:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   90318:	e0fffe17 	ldw	r3,-8(fp)
   9031c:	00800044 	movi	r2,1
   90320:	18800005 	stb	r2,0(r3)
        return (0);
   90324:	e03fff15 	stw	zero,-4(fp)
   90328:	00000d06 	br	90360 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   9032c:	e0bffc17 	ldw	r2,-16(fp)
   90330:	11400284 	addi	r5,r2,10
   90334:	e13ffd17 	ldw	r4,-12(fp)
   90338:	008f3ec0 	call	8f3ec <OS_StrCopy>
   9033c:	e0bffb05 	stb	r2,-20(fp)
   90340:	e0bffa17 	ldw	r2,-24(fp)
   90344:	e0bff715 	stw	r2,-36(fp)
   90348:	e0bff717 	ldw	r2,-36(fp)
   9034c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   90350:	e0bffe17 	ldw	r2,-8(fp)
   90354:	10000005 	stb	zero,0(r2)
    return (len);
   90358:	e0bffb03 	ldbu	r2,-20(fp)
   9035c:	e0bfff15 	stw	r2,-4(fp)
   90360:	e0bfff17 	ldw	r2,-4(fp)
}
   90364:	e037883a 	mov	sp,fp
   90368:	dfc00117 	ldw	ra,4(sp)
   9036c:	df000017 	ldw	fp,0(sp)
   90370:	dec00204 	addi	sp,sp,8
   90374:	f800283a 	ret

00090378 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   90378:	defff504 	addi	sp,sp,-44
   9037c:	dfc00a15 	stw	ra,40(sp)
   90380:	df000915 	stw	fp,36(sp)
   90384:	df000904 	addi	fp,sp,36
   90388:	e13ffd15 	stw	r4,-12(fp)
   9038c:	e17ffe15 	stw	r5,-8(fp)
   90390:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   90394:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   90398:	e0bfff17 	ldw	r2,-4(fp)
   9039c:	1005003a 	cmpeq	r2,r2,zero
   903a0:	1000451e 	bne	r2,zero,904b8 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   903a4:	e0bffd17 	ldw	r2,-12(fp)
   903a8:	1004c03a 	cmpne	r2,r2,zero
   903ac:	1000041e 	bne	r2,zero,903c0 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   903b0:	e0ffff17 	ldw	r3,-4(fp)
   903b4:	00801b84 	movi	r2,110
   903b8:	18800005 	stb	r2,0(r3)
        return;
   903bc:	00003e06 	br	904b8 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   903c0:	e0bffe17 	ldw	r2,-8(fp)
   903c4:	1004c03a 	cmpne	r2,r2,zero
   903c8:	1000041e 	bne	r2,zero,903dc <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
   903cc:	e0ffff17 	ldw	r3,-4(fp)
   903d0:	00800304 	movi	r2,12
   903d4:	18800005 	stb	r2,0(r3)
        return;
   903d8:	00003706 	br	904b8 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   903dc:	008002b4 	movhi	r2,10
   903e0:	10b3d404 	addi	r2,r2,-12464
   903e4:	10800003 	ldbu	r2,0(r2)
   903e8:	10803fcc 	andi	r2,r2,255
   903ec:	1005003a 	cmpeq	r2,r2,zero
   903f0:	1000041e 	bne	r2,zero,90404 <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
   903f4:	e0ffff17 	ldw	r3,-4(fp)
   903f8:	00800484 	movi	r2,18
   903fc:	18800005 	stb	r2,0(r3)
        return;
   90400:	00002d06 	br	904b8 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90404:	0005303a 	rdctl	r2,status
   90408:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9040c:	e0fffa17 	ldw	r3,-24(fp)
   90410:	00bfff84 	movi	r2,-2
   90414:	1884703a 	and	r2,r3,r2
   90418:	1001703a 	wrctl	status,r2
  
  return context;
   9041c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   90420:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   90424:	e0bffd17 	ldw	r2,-12(fp)
   90428:	10800003 	ldbu	r2,0(r2)
   9042c:	10803fcc 	andi	r2,r2,255
   90430:	10800160 	cmpeqi	r2,r2,5
   90434:	1000081e 	bne	r2,zero,90458 <OSFlagNameSet+0xe0>
   90438:	e0bffb17 	ldw	r2,-20(fp)
   9043c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90440:	e0bff917 	ldw	r2,-28(fp)
   90444:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   90448:	e0ffff17 	ldw	r3,-4(fp)
   9044c:	00800044 	movi	r2,1
   90450:	18800005 	stb	r2,0(r3)
        return;
   90454:	00001806 	br	904b8 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   90458:	e13ffe17 	ldw	r4,-8(fp)
   9045c:	008f46c0 	call	8f46c <OS_StrLen>
   90460:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   90464:	e0bffc03 	ldbu	r2,-16(fp)
   90468:	10800830 	cmpltui	r2,r2,32
   9046c:	1000081e 	bne	r2,zero,90490 <OSFlagNameSet+0x118>
   90470:	e0bffb17 	ldw	r2,-20(fp)
   90474:	e0bff815 	stw	r2,-32(fp)
   90478:	e0bff817 	ldw	r2,-32(fp)
   9047c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   90480:	e0ffff17 	ldw	r3,-4(fp)
   90484:	00801cc4 	movi	r2,115
   90488:	18800005 	stb	r2,0(r3)
        return;
   9048c:	00000a06 	br	904b8 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   90490:	e0bffd17 	ldw	r2,-12(fp)
   90494:	11000284 	addi	r4,r2,10
   90498:	e17ffe17 	ldw	r5,-8(fp)
   9049c:	008f3ec0 	call	8f3ec <OS_StrCopy>
   904a0:	e0bffb17 	ldw	r2,-20(fp)
   904a4:	e0bff715 	stw	r2,-36(fp)
   904a8:	e0bff717 	ldw	r2,-36(fp)
   904ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   904b0:	e0bfff17 	ldw	r2,-4(fp)
   904b4:	10000005 	stb	zero,0(r2)
    return;
}
   904b8:	e037883a 	mov	sp,fp
   904bc:	dfc00117 	ldw	ra,4(sp)
   904c0:	df000017 	ldw	fp,0(sp)
   904c4:	dec00204 	addi	sp,sp,8
   904c8:	f800283a 	ret

000904cc <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   904cc:	deffe004 	addi	sp,sp,-128
   904d0:	dfc01f15 	stw	ra,124(sp)
   904d4:	df001e15 	stw	fp,120(sp)
   904d8:	df001e04 	addi	fp,sp,120
   904dc:	e13ff915 	stw	r4,-28(fp)
   904e0:	e17ffa0d 	sth	r5,-24(fp)
   904e4:	e1bffb05 	stb	r6,-20(fp)
   904e8:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   904ec:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   904f0:	e0800217 	ldw	r2,8(fp)
   904f4:	1004c03a 	cmpne	r2,r2,zero
   904f8:	1000021e 	bne	r2,zero,90504 <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
   904fc:	e03fff15 	stw	zero,-4(fp)
   90500:	00017d06 	br	90af8 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   90504:	e0bff917 	ldw	r2,-28(fp)
   90508:	1004c03a 	cmpne	r2,r2,zero
   9050c:	1000051e 	bne	r2,zero,90524 <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   90510:	e0c00217 	ldw	r3,8(fp)
   90514:	00801b84 	movi	r2,110
   90518:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   9051c:	e03fff15 	stw	zero,-4(fp)
   90520:	00017506 	br	90af8 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   90524:	008002b4 	movhi	r2,10
   90528:	10b3d404 	addi	r2,r2,-12464
   9052c:	10800003 	ldbu	r2,0(r2)
   90530:	10803fcc 	andi	r2,r2,255
   90534:	1005003a 	cmpeq	r2,r2,zero
   90538:	1000051e 	bne	r2,zero,90550 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   9053c:	e0c00217 	ldw	r3,8(fp)
   90540:	00800084 	movi	r2,2
   90544:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   90548:	e03fff15 	stw	zero,-4(fp)
   9054c:	00016a06 	br	90af8 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   90550:	008002b4 	movhi	r2,10
   90554:	10b3c604 	addi	r2,r2,-12520
   90558:	10800003 	ldbu	r2,0(r2)
   9055c:	10803fcc 	andi	r2,r2,255
   90560:	1005003a 	cmpeq	r2,r2,zero
   90564:	1000051e 	bne	r2,zero,9057c <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   90568:	e0c00217 	ldw	r3,8(fp)
   9056c:	00800344 	movi	r2,13
   90570:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   90574:	e03fff15 	stw	zero,-4(fp)
   90578:	00015f06 	br	90af8 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   9057c:	e0bff917 	ldw	r2,-28(fp)
   90580:	10800003 	ldbu	r2,0(r2)
   90584:	10803fcc 	andi	r2,r2,255
   90588:	10800160 	cmpeqi	r2,r2,5
   9058c:	1000051e 	bne	r2,zero,905a4 <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
   90590:	e0c00217 	ldw	r3,8(fp)
   90594:	00800044 	movi	r2,1
   90598:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   9059c:	e03fff15 	stw	zero,-4(fp)
   905a0:	00015506 	br	90af8 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   905a4:	e0fffb03 	ldbu	r3,-20(fp)
   905a8:	00bfe004 	movi	r2,-128
   905ac:	1884703a 	and	r2,r3,r2
   905b0:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   905b4:	e0bff283 	ldbu	r2,-54(fp)
   905b8:	1005003a 	cmpeq	r2,r2,zero
   905bc:	1000071e 	bne	r2,zero,905dc <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   905c0:	00c01fc4 	movi	r3,127
   905c4:	e0bffb03 	ldbu	r2,-20(fp)
   905c8:	10c4703a 	and	r2,r2,r3
   905cc:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
   905d0:	00800044 	movi	r2,1
   905d4:	e0bff205 	stb	r2,-56(fp)
   905d8:	00000106 	br	905e0 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
   905dc:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   905e0:	0005303a 	rdctl	r2,status
   905e4:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   905e8:	e0fff017 	ldw	r3,-64(fp)
   905ec:	00bfff84 	movi	r2,-2
   905f0:	1884703a 	and	r2,r3,r2
   905f4:	1001703a 	wrctl	status,r2
  
  return context;
   905f8:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   905fc:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
   90600:	e0bffb03 	ldbu	r2,-20(fp)
   90604:	e0bffe15 	stw	r2,-8(fp)
   90608:	e0fffe17 	ldw	r3,-8(fp)
   9060c:	18800060 	cmpeqi	r2,r3,1
   90610:	1000981e 	bne	r2,zero,90874 <OSFlagPend+0x3a8>
   90614:	e0fffe17 	ldw	r3,-8(fp)
   90618:	18800088 	cmpgei	r2,r3,2
   9061c:	1000041e 	bne	r2,zero,90630 <OSFlagPend+0x164>
   90620:	e0fffe17 	ldw	r3,-8(fp)
   90624:	1805003a 	cmpeq	r2,r3,zero
   90628:	1000641e 	bne	r2,zero,907bc <OSFlagPend+0x2f0>
   9062c:	0000bf06 	br	9092c <OSFlagPend+0x460>
   90630:	e0fffe17 	ldw	r3,-8(fp)
   90634:	188000a0 	cmpeqi	r2,r3,2
   90638:	1000041e 	bne	r2,zero,9064c <OSFlagPend+0x180>
   9063c:	e0fffe17 	ldw	r3,-8(fp)
   90640:	188000e0 	cmpeqi	r2,r3,3
   90644:	10002f1e 	bne	r2,zero,90704 <OSFlagPend+0x238>
   90648:	0000b806 	br	9092c <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   9064c:	e0bff917 	ldw	r2,-28(fp)
   90650:	10c0020b 	ldhu	r3,8(r2)
   90654:	e0bffa0b 	ldhu	r2,-24(fp)
   90658:	1884703a 	and	r2,r3,r2
   9065c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   90660:	e0fff30b 	ldhu	r3,-52(fp)
   90664:	e0bffa0b 	ldhu	r2,-24(fp)
   90668:	18801a1e 	bne	r3,r2,906d4 <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   9066c:	e0bff203 	ldbu	r2,-56(fp)
   90670:	10800058 	cmpnei	r2,r2,1
   90674:	1000091e 	bne	r2,zero,9069c <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   90678:	e0bff917 	ldw	r2,-28(fp)
   9067c:	1080020b 	ldhu	r2,8(r2)
   90680:	1007883a 	mov	r3,r2
   90684:	e0bff30b 	ldhu	r2,-52(fp)
   90688:	0084303a 	nor	r2,zero,r2
   9068c:	1884703a 	and	r2,r3,r2
   90690:	1007883a 	mov	r3,r2
   90694:	e0bff917 	ldw	r2,-28(fp)
   90698:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   9069c:	008002b4 	movhi	r2,10
   906a0:	10b3d504 	addi	r2,r2,-12460
   906a4:	10c00017 	ldw	r3,0(r2)
   906a8:	e0bff30b 	ldhu	r2,-52(fp)
   906ac:	18800b0d 	sth	r2,44(r3)
   906b0:	e0bff117 	ldw	r2,-60(fp)
   906b4:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   906b8:	e0bfef17 	ldw	r2,-68(fp)
   906bc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   906c0:	e0800217 	ldw	r2,8(fp)
   906c4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   906c8:	e0bff30b 	ldhu	r2,-52(fp)
   906cc:	e0bfff15 	stw	r2,-4(fp)
   906d0:	00010906 	br	90af8 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   906d4:	e1bffa0b 	ldhu	r6,-24(fp)
   906d8:	e1fffb03 	ldbu	r7,-20(fp)
   906dc:	e0bffc0b 	ldhu	r2,-16(fp)
   906e0:	e17ff404 	addi	r5,fp,-48
   906e4:	d8800015 	stw	r2,0(sp)
   906e8:	e13ff917 	ldw	r4,-28(fp)
   906ec:	0090ff40 	call	90ff4 <OS_FlagBlock>
   906f0:	e0bff117 	ldw	r2,-60(fp)
   906f4:	e0bfee15 	stw	r2,-72(fp)
   906f8:	e0bfee17 	ldw	r2,-72(fp)
   906fc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   90700:	00009506 	br	90958 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   90704:	e0bff917 	ldw	r2,-28(fp)
   90708:	10c0020b 	ldhu	r3,8(r2)
   9070c:	e0bffa0b 	ldhu	r2,-24(fp)
   90710:	1884703a 	and	r2,r3,r2
   90714:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   90718:	e0bff30b 	ldhu	r2,-52(fp)
   9071c:	1005003a 	cmpeq	r2,r2,zero
   90720:	10001a1e 	bne	r2,zero,9078c <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   90724:	e0bff203 	ldbu	r2,-56(fp)
   90728:	10800058 	cmpnei	r2,r2,1
   9072c:	1000091e 	bne	r2,zero,90754 <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   90730:	e0bff917 	ldw	r2,-28(fp)
   90734:	1080020b 	ldhu	r2,8(r2)
   90738:	1007883a 	mov	r3,r2
   9073c:	e0bff30b 	ldhu	r2,-52(fp)
   90740:	0084303a 	nor	r2,zero,r2
   90744:	1884703a 	and	r2,r3,r2
   90748:	1007883a 	mov	r3,r2
   9074c:	e0bff917 	ldw	r2,-28(fp)
   90750:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   90754:	008002b4 	movhi	r2,10
   90758:	10b3d504 	addi	r2,r2,-12460
   9075c:	10c00017 	ldw	r3,0(r2)
   90760:	e0bff30b 	ldhu	r2,-52(fp)
   90764:	18800b0d 	sth	r2,44(r3)
   90768:	e0bff117 	ldw	r2,-60(fp)
   9076c:	e0bfed15 	stw	r2,-76(fp)
   90770:	e0bfed17 	ldw	r2,-76(fp)
   90774:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   90778:	e0800217 	ldw	r2,8(fp)
   9077c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   90780:	e0fff30b 	ldhu	r3,-52(fp)
   90784:	e0ffff15 	stw	r3,-4(fp)
   90788:	0000db06 	br	90af8 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   9078c:	e1bffa0b 	ldhu	r6,-24(fp)
   90790:	e1fffb03 	ldbu	r7,-20(fp)
   90794:	e0bffc0b 	ldhu	r2,-16(fp)
   90798:	e17ff404 	addi	r5,fp,-48
   9079c:	d8800015 	stw	r2,0(sp)
   907a0:	e13ff917 	ldw	r4,-28(fp)
   907a4:	0090ff40 	call	90ff4 <OS_FlagBlock>
   907a8:	e0bff117 	ldw	r2,-60(fp)
   907ac:	e0bfec15 	stw	r2,-80(fp)
   907b0:	e0bfec17 	ldw	r2,-80(fp)
   907b4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   907b8:	00006706 	br	90958 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   907bc:	e0bff917 	ldw	r2,-28(fp)
   907c0:	1080020b 	ldhu	r2,8(r2)
   907c4:	0084303a 	nor	r2,zero,r2
   907c8:	1007883a 	mov	r3,r2
   907cc:	e0bffa0b 	ldhu	r2,-24(fp)
   907d0:	1884703a 	and	r2,r3,r2
   907d4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   907d8:	e0fff30b 	ldhu	r3,-52(fp)
   907dc:	e0bffa0b 	ldhu	r2,-24(fp)
   907e0:	1880181e 	bne	r3,r2,90844 <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   907e4:	e0bff203 	ldbu	r2,-56(fp)
   907e8:	10800058 	cmpnei	r2,r2,1
   907ec:	1000071e 	bne	r2,zero,9080c <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   907f0:	e0bff917 	ldw	r2,-28(fp)
   907f4:	10c0020b 	ldhu	r3,8(r2)
   907f8:	e0bff30b 	ldhu	r2,-52(fp)
   907fc:	1884b03a 	or	r2,r3,r2
   90800:	1007883a 	mov	r3,r2
   90804:	e0bff917 	ldw	r2,-28(fp)
   90808:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   9080c:	008002b4 	movhi	r2,10
   90810:	10b3d504 	addi	r2,r2,-12460
   90814:	10c00017 	ldw	r3,0(r2)
   90818:	e0bff30b 	ldhu	r2,-52(fp)
   9081c:	18800b0d 	sth	r2,44(r3)
   90820:	e0bff117 	ldw	r2,-60(fp)
   90824:	e0bfeb15 	stw	r2,-84(fp)
   90828:	e0bfeb17 	ldw	r2,-84(fp)
   9082c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   90830:	e0800217 	ldw	r2,8(fp)
   90834:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   90838:	e0bff30b 	ldhu	r2,-52(fp)
   9083c:	e0bfff15 	stw	r2,-4(fp)
   90840:	0000ad06 	br	90af8 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   90844:	e1bffa0b 	ldhu	r6,-24(fp)
   90848:	e1fffb03 	ldbu	r7,-20(fp)
   9084c:	e0bffc0b 	ldhu	r2,-16(fp)
   90850:	e17ff404 	addi	r5,fp,-48
   90854:	d8800015 	stw	r2,0(sp)
   90858:	e13ff917 	ldw	r4,-28(fp)
   9085c:	0090ff40 	call	90ff4 <OS_FlagBlock>
   90860:	e0bff117 	ldw	r2,-60(fp)
   90864:	e0bfea15 	stw	r2,-88(fp)
   90868:	e0bfea17 	ldw	r2,-88(fp)
   9086c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   90870:	00003906 	br	90958 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   90874:	e0bff917 	ldw	r2,-28(fp)
   90878:	1080020b 	ldhu	r2,8(r2)
   9087c:	0084303a 	nor	r2,zero,r2
   90880:	1007883a 	mov	r3,r2
   90884:	e0bffa0b 	ldhu	r2,-24(fp)
   90888:	1884703a 	and	r2,r3,r2
   9088c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   90890:	e0bff30b 	ldhu	r2,-52(fp)
   90894:	1005003a 	cmpeq	r2,r2,zero
   90898:	1000181e 	bne	r2,zero,908fc <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   9089c:	e0bff203 	ldbu	r2,-56(fp)
   908a0:	10800058 	cmpnei	r2,r2,1
   908a4:	1000071e 	bne	r2,zero,908c4 <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   908a8:	e0bff917 	ldw	r2,-28(fp)
   908ac:	10c0020b 	ldhu	r3,8(r2)
   908b0:	e0bff30b 	ldhu	r2,-52(fp)
   908b4:	1884b03a 	or	r2,r3,r2
   908b8:	1007883a 	mov	r3,r2
   908bc:	e0bff917 	ldw	r2,-28(fp)
   908c0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   908c4:	008002b4 	movhi	r2,10
   908c8:	10b3d504 	addi	r2,r2,-12460
   908cc:	10c00017 	ldw	r3,0(r2)
   908d0:	e0bff30b 	ldhu	r2,-52(fp)
   908d4:	18800b0d 	sth	r2,44(r3)
   908d8:	e0bff117 	ldw	r2,-60(fp)
   908dc:	e0bfe915 	stw	r2,-92(fp)
   908e0:	e0bfe917 	ldw	r2,-92(fp)
   908e4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   908e8:	e0800217 	ldw	r2,8(fp)
   908ec:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   908f0:	e0fff30b 	ldhu	r3,-52(fp)
   908f4:	e0ffff15 	stw	r3,-4(fp)
   908f8:	00007f06 	br	90af8 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   908fc:	e1bffa0b 	ldhu	r6,-24(fp)
   90900:	e1fffb03 	ldbu	r7,-20(fp)
   90904:	e0bffc0b 	ldhu	r2,-16(fp)
   90908:	e17ff404 	addi	r5,fp,-48
   9090c:	d8800015 	stw	r2,0(sp)
   90910:	e13ff917 	ldw	r4,-28(fp)
   90914:	0090ff40 	call	90ff4 <OS_FlagBlock>
   90918:	e0bff117 	ldw	r2,-60(fp)
   9091c:	e0bfe815 	stw	r2,-96(fp)
   90920:	e0bfe817 	ldw	r2,-96(fp)
   90924:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   90928:	00000b06 	br	90958 <OSFlagPend+0x48c>
   9092c:	e0bff117 	ldw	r2,-60(fp)
   90930:	e0bfe715 	stw	r2,-100(fp)
   90934:	e0bfe717 	ldw	r2,-100(fp)
   90938:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   9093c:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   90940:	e0c00217 	ldw	r3,8(fp)
   90944:	00801bc4 	movi	r2,111
   90948:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
   9094c:	e0bff30b 	ldhu	r2,-52(fp)
   90950:	e0bfff15 	stw	r2,-4(fp)
   90954:	00006806 	br	90af8 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   90958:	008f2a80 	call	8f2a8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9095c:	0005303a 	rdctl	r2,status
   90960:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90964:	e0ffe617 	ldw	r3,-104(fp)
   90968:	00bfff84 	movi	r2,-2
   9096c:	1884703a 	and	r2,r3,r2
   90970:	1001703a 	wrctl	status,r2
  
  return context;
   90974:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
   90978:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   9097c:	008002b4 	movhi	r2,10
   90980:	10b3d504 	addi	r2,r2,-12460
   90984:	10800017 	ldw	r2,0(r2)
   90988:	10800c43 	ldbu	r2,49(r2)
   9098c:	10803fcc 	andi	r2,r2,255
   90990:	1005003a 	cmpeq	r2,r2,zero
   90994:	1000221e 	bne	r2,zero,90a20 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   90998:	008002b4 	movhi	r2,10
   9099c:	10b3d504 	addi	r2,r2,-12460
   909a0:	10800017 	ldw	r2,0(r2)
   909a4:	10800c43 	ldbu	r2,49(r2)
   909a8:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   909ac:	008002b4 	movhi	r2,10
   909b0:	10b3d504 	addi	r2,r2,-12460
   909b4:	10800017 	ldw	r2,0(r2)
   909b8:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   909bc:	e13ff404 	addi	r4,fp,-48
   909c0:	00913ac0 	call	913ac <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   909c4:	008002b4 	movhi	r2,10
   909c8:	10b3d504 	addi	r2,r2,-12460
   909cc:	10800017 	ldw	r2,0(r2)
   909d0:	10000c05 	stb	zero,48(r2)
   909d4:	e0bff117 	ldw	r2,-60(fp)
   909d8:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   909dc:	e0bfe517 	ldw	r2,-108(fp)
   909e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   909e4:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
   909e8:	e0bff243 	ldbu	r2,-55(fp)
   909ec:	108000a0 	cmpeqi	r2,r2,2
   909f0:	1000011e 	bne	r2,zero,909f8 <OSFlagPend+0x52c>
   909f4:	00000406 	br	90a08 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   909f8:	e0c00217 	ldw	r3,8(fp)
   909fc:	00800384 	movi	r2,14
   90a00:	18800005 	stb	r2,0(r3)
                 break;
   90a04:	00000306 	br	90a14 <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   90a08:	e0c00217 	ldw	r3,8(fp)
   90a0c:	00800284 	movi	r2,10
   90a10:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
   90a14:	e0fff30b 	ldhu	r3,-52(fp)
   90a18:	e0ffff15 	stw	r3,-4(fp)
   90a1c:	00003606 	br	90af8 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   90a20:	008002b4 	movhi	r2,10
   90a24:	10b3d504 	addi	r2,r2,-12460
   90a28:	10800017 	ldw	r2,0(r2)
   90a2c:	10800b0b 	ldhu	r2,44(r2)
   90a30:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   90a34:	e0bff203 	ldbu	r2,-56(fp)
   90a38:	10800058 	cmpnei	r2,r2,1
   90a3c:	1000261e 	bne	r2,zero,90ad8 <OSFlagPend+0x60c>
        switch (wait_type) {
   90a40:	e0bffb03 	ldbu	r2,-20(fp)
   90a44:	e0bffd15 	stw	r2,-12(fp)
   90a48:	e0fffd17 	ldw	r3,-12(fp)
   90a4c:	1804803a 	cmplt	r2,r3,zero
   90a50:	1000181e 	bne	r2,zero,90ab4 <OSFlagPend+0x5e8>
   90a54:	e0fffd17 	ldw	r3,-12(fp)
   90a58:	18800090 	cmplti	r2,r3,2
   90a5c:	10000d1e 	bne	r2,zero,90a94 <OSFlagPend+0x5c8>
   90a60:	e0fffd17 	ldw	r3,-12(fp)
   90a64:	18800108 	cmpgei	r2,r3,4
   90a68:	1000121e 	bne	r2,zero,90ab4 <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   90a6c:	e0bff917 	ldw	r2,-28(fp)
   90a70:	1080020b 	ldhu	r2,8(r2)
   90a74:	1007883a 	mov	r3,r2
   90a78:	e0bff30b 	ldhu	r2,-52(fp)
   90a7c:	0084303a 	nor	r2,zero,r2
   90a80:	1884703a 	and	r2,r3,r2
   90a84:	1007883a 	mov	r3,r2
   90a88:	e0bff917 	ldw	r2,-28(fp)
   90a8c:	10c0020d 	sth	r3,8(r2)
                 break;
   90a90:	00001106 	br	90ad8 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   90a94:	e0bff917 	ldw	r2,-28(fp)
   90a98:	10c0020b 	ldhu	r3,8(r2)
   90a9c:	e0bff30b 	ldhu	r2,-52(fp)
   90aa0:	1884b03a 	or	r2,r3,r2
   90aa4:	1007883a 	mov	r3,r2
   90aa8:	e0bff917 	ldw	r2,-28(fp)
   90aac:	10c0020d 	sth	r3,8(r2)
                 break;
   90ab0:	00000906 	br	90ad8 <OSFlagPend+0x60c>
   90ab4:	e0bff117 	ldw	r2,-60(fp)
   90ab8:	e0bfe415 	stw	r2,-112(fp)
   90abc:	e0bfe417 	ldw	r2,-112(fp)
   90ac0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   90ac4:	e0c00217 	ldw	r3,8(fp)
   90ac8:	00801bc4 	movi	r2,111
   90acc:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
   90ad0:	e03fff15 	stw	zero,-4(fp)
   90ad4:	00000806 	br	90af8 <OSFlagPend+0x62c>
   90ad8:	e0bff117 	ldw	r2,-60(fp)
   90adc:	e0bfe315 	stw	r2,-116(fp)
   90ae0:	e0bfe317 	ldw	r2,-116(fp)
   90ae4:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   90ae8:	e0800217 	ldw	r2,8(fp)
   90aec:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   90af0:	e0bff30b 	ldhu	r2,-52(fp)
   90af4:	e0bfff15 	stw	r2,-4(fp)
   90af8:	e0bfff17 	ldw	r2,-4(fp)
}
   90afc:	e037883a 	mov	sp,fp
   90b00:	dfc00117 	ldw	ra,4(sp)
   90b04:	df000017 	ldw	fp,0(sp)
   90b08:	dec00204 	addi	sp,sp,8
   90b0c:	f800283a 	ret

00090b10 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   90b10:	defffb04 	addi	sp,sp,-20
   90b14:	df000415 	stw	fp,16(sp)
   90b18:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   90b1c:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90b20:	0005303a 	rdctl	r2,status
   90b24:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90b28:	e0fffd17 	ldw	r3,-12(fp)
   90b2c:	00bfff84 	movi	r2,-2
   90b30:	1884703a 	and	r2,r3,r2
   90b34:	1001703a 	wrctl	status,r2
  
  return context;
   90b38:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   90b3c:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   90b40:	008002b4 	movhi	r2,10
   90b44:	10b3d504 	addi	r2,r2,-12460
   90b48:	10800017 	ldw	r2,0(r2)
   90b4c:	10800b0b 	ldhu	r2,44(r2)
   90b50:	e0bfff0d 	sth	r2,-4(fp)
   90b54:	e0bffe17 	ldw	r2,-8(fp)
   90b58:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90b5c:	e0bffc17 	ldw	r2,-16(fp)
   90b60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   90b64:	e0bfff0b 	ldhu	r2,-4(fp)
}
   90b68:	e037883a 	mov	sp,fp
   90b6c:	df000017 	ldw	fp,0(sp)
   90b70:	dec00104 	addi	sp,sp,4
   90b74:	f800283a 	ret

00090b78 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   90b78:	deffed04 	addi	sp,sp,-76
   90b7c:	dfc01215 	stw	ra,72(sp)
   90b80:	df001115 	stw	fp,68(sp)
   90b84:	df001104 	addi	fp,sp,68
   90b88:	e13ff915 	stw	r4,-28(fp)
   90b8c:	e1fffc15 	stw	r7,-16(fp)
   90b90:	e17ffa0d 	sth	r5,-24(fp)
   90b94:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   90b98:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   90b9c:	e0bffc17 	ldw	r2,-16(fp)
   90ba0:	1004c03a 	cmpne	r2,r2,zero
   90ba4:	1000021e 	bne	r2,zero,90bb0 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
   90ba8:	e03fff15 	stw	zero,-4(fp)
   90bac:	0000d606 	br	90f08 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   90bb0:	e0bff917 	ldw	r2,-28(fp)
   90bb4:	1004c03a 	cmpne	r2,r2,zero
   90bb8:	1000051e 	bne	r2,zero,90bd0 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   90bbc:	e0fffc17 	ldw	r3,-16(fp)
   90bc0:	00801b84 	movi	r2,110
   90bc4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   90bc8:	e03fff15 	stw	zero,-4(fp)
   90bcc:	0000ce06 	br	90f08 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   90bd0:	e0bff917 	ldw	r2,-28(fp)
   90bd4:	10800003 	ldbu	r2,0(r2)
   90bd8:	10803fcc 	andi	r2,r2,255
   90bdc:	10800160 	cmpeqi	r2,r2,5
   90be0:	1000051e 	bne	r2,zero,90bf8 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   90be4:	e0fffc17 	ldw	r3,-16(fp)
   90be8:	00800044 	movi	r2,1
   90bec:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   90bf0:	e03fff15 	stw	zero,-4(fp)
   90bf4:	0000c406 	br	90f08 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90bf8:	0005303a 	rdctl	r2,status
   90bfc:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90c00:	e0fff417 	ldw	r3,-48(fp)
   90c04:	00bfff84 	movi	r2,-2
   90c08:	1884703a 	and	r2,r3,r2
   90c0c:	1001703a 	wrctl	status,r2
  
  return context;
   90c10:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   90c14:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
   90c18:	e0bffb03 	ldbu	r2,-20(fp)
   90c1c:	e0bffe15 	stw	r2,-8(fp)
   90c20:	e0fffe17 	ldw	r3,-8(fp)
   90c24:	1805003a 	cmpeq	r2,r3,zero
   90c28:	1000041e 	bne	r2,zero,90c3c <OSFlagPost+0xc4>
   90c2c:	e0fffe17 	ldw	r3,-8(fp)
   90c30:	18800060 	cmpeqi	r2,r3,1
   90c34:	10000b1e 	bne	r2,zero,90c64 <OSFlagPost+0xec>
   90c38:	00001206 	br	90c84 <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   90c3c:	e0bff917 	ldw	r2,-28(fp)
   90c40:	1080020b 	ldhu	r2,8(r2)
   90c44:	1007883a 	mov	r3,r2
   90c48:	e0bffa0b 	ldhu	r2,-24(fp)
   90c4c:	0084303a 	nor	r2,zero,r2
   90c50:	1884703a 	and	r2,r3,r2
   90c54:	1007883a 	mov	r3,r2
   90c58:	e0bff917 	ldw	r2,-28(fp)
   90c5c:	10c0020d 	sth	r3,8(r2)
             break;
   90c60:	00001106 	br	90ca8 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   90c64:	e0bff917 	ldw	r2,-28(fp)
   90c68:	10c0020b 	ldhu	r3,8(r2)
   90c6c:	e0bffa0b 	ldhu	r2,-24(fp)
   90c70:	1884b03a 	or	r2,r3,r2
   90c74:	1007883a 	mov	r3,r2
   90c78:	e0bff917 	ldw	r2,-28(fp)
   90c7c:	10c0020d 	sth	r3,8(r2)
             break;
   90c80:	00000906 	br	90ca8 <OSFlagPost+0x130>
   90c84:	e0bff517 	ldw	r2,-44(fp)
   90c88:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90c8c:	e0bff317 	ldw	r2,-52(fp)
   90c90:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   90c94:	e0fffc17 	ldw	r3,-16(fp)
   90c98:	00801c44 	movi	r2,113
   90c9c:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
   90ca0:	e03fff15 	stw	zero,-4(fp)
   90ca4:	00009806 	br	90f08 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   90ca8:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   90cac:	e0bff917 	ldw	r2,-28(fp)
   90cb0:	10800117 	ldw	r2,4(r2)
   90cb4:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   90cb8:	00007506 	br	90e90 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
   90cbc:	e0bff817 	ldw	r2,-32(fp)
   90cc0:	10800483 	ldbu	r2,18(r2)
   90cc4:	10803fcc 	andi	r2,r2,255
   90cc8:	e0bffd15 	stw	r2,-12(fp)
   90ccc:	e0fffd17 	ldw	r3,-12(fp)
   90cd0:	18800060 	cmpeqi	r2,r3,1
   90cd4:	10004d1e 	bne	r2,zero,90e0c <OSFlagPost+0x294>
   90cd8:	e0fffd17 	ldw	r3,-12(fp)
   90cdc:	18800088 	cmpgei	r2,r3,2
   90ce0:	1000041e 	bne	r2,zero,90cf4 <OSFlagPost+0x17c>
   90ce4:	e0fffd17 	ldw	r3,-12(fp)
   90ce8:	1805003a 	cmpeq	r2,r3,zero
   90cec:	1000301e 	bne	r2,zero,90db0 <OSFlagPost+0x238>
   90cf0:	00005b06 	br	90e60 <OSFlagPost+0x2e8>
   90cf4:	e0fffd17 	ldw	r3,-12(fp)
   90cf8:	188000a0 	cmpeqi	r2,r3,2
   90cfc:	1000041e 	bne	r2,zero,90d10 <OSFlagPost+0x198>
   90d00:	e0fffd17 	ldw	r3,-12(fp)
   90d04:	188000e0 	cmpeqi	r2,r3,3
   90d08:	1000161e 	bne	r2,zero,90d64 <OSFlagPost+0x1ec>
   90d0c:	00005406 	br	90e60 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   90d10:	e0bff917 	ldw	r2,-28(fp)
   90d14:	10c0020b 	ldhu	r3,8(r2)
   90d18:	e0bff817 	ldw	r2,-32(fp)
   90d1c:	1080040b 	ldhu	r2,16(r2)
   90d20:	1884703a 	and	r2,r3,r2
   90d24:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   90d28:	e0bff817 	ldw	r2,-32(fp)
   90d2c:	1080040b 	ldhu	r2,16(r2)
   90d30:	10ffffcc 	andi	r3,r2,65535
   90d34:	e0bff68b 	ldhu	r2,-38(fp)
   90d38:	1880521e 	bne	r3,r2,90e84 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   90d3c:	e17ff68b 	ldhu	r5,-38(fp)
   90d40:	e13ff817 	ldw	r4,-32(fp)
   90d44:	009129c0 	call	9129c <OS_FlagTaskRdy>
   90d48:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
   90d4c:	e0bff603 	ldbu	r2,-40(fp)
   90d50:	10800058 	cmpnei	r2,r2,1
   90d54:	10004b1e 	bne	r2,zero,90e84 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   90d58:	00800044 	movi	r2,1
   90d5c:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
   90d60:	00004806 	br	90e84 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   90d64:	e0bff917 	ldw	r2,-28(fp)
   90d68:	10c0020b 	ldhu	r3,8(r2)
   90d6c:	e0bff817 	ldw	r2,-32(fp)
   90d70:	1080040b 	ldhu	r2,16(r2)
   90d74:	1884703a 	and	r2,r3,r2
   90d78:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   90d7c:	e0bff68b 	ldhu	r2,-38(fp)
   90d80:	1005003a 	cmpeq	r2,r2,zero
   90d84:	10003f1e 	bne	r2,zero,90e84 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   90d88:	e17ff68b 	ldhu	r5,-38(fp)
   90d8c:	e13ff817 	ldw	r4,-32(fp)
   90d90:	009129c0 	call	9129c <OS_FlagTaskRdy>
   90d94:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
   90d98:	e0bff603 	ldbu	r2,-40(fp)
   90d9c:	10800058 	cmpnei	r2,r2,1
   90da0:	1000381e 	bne	r2,zero,90e84 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   90da4:	00800044 	movi	r2,1
   90da8:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
   90dac:	00003506 	br	90e84 <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   90db0:	e0bff917 	ldw	r2,-28(fp)
   90db4:	1080020b 	ldhu	r2,8(r2)
   90db8:	0084303a 	nor	r2,zero,r2
   90dbc:	1007883a 	mov	r3,r2
   90dc0:	e0bff817 	ldw	r2,-32(fp)
   90dc4:	1080040b 	ldhu	r2,16(r2)
   90dc8:	1884703a 	and	r2,r3,r2
   90dcc:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   90dd0:	e0bff817 	ldw	r2,-32(fp)
   90dd4:	1080040b 	ldhu	r2,16(r2)
   90dd8:	10ffffcc 	andi	r3,r2,65535
   90ddc:	e0bff68b 	ldhu	r2,-38(fp)
   90de0:	1880281e 	bne	r3,r2,90e84 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   90de4:	e17ff68b 	ldhu	r5,-38(fp)
   90de8:	e13ff817 	ldw	r4,-32(fp)
   90dec:	009129c0 	call	9129c <OS_FlagTaskRdy>
   90df0:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
   90df4:	e0bff603 	ldbu	r2,-40(fp)
   90df8:	10800058 	cmpnei	r2,r2,1
   90dfc:	1000211e 	bne	r2,zero,90e84 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   90e00:	00800044 	movi	r2,1
   90e04:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
   90e08:	00001e06 	br	90e84 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   90e0c:	e0bff917 	ldw	r2,-28(fp)
   90e10:	1080020b 	ldhu	r2,8(r2)
   90e14:	0084303a 	nor	r2,zero,r2
   90e18:	1007883a 	mov	r3,r2
   90e1c:	e0bff817 	ldw	r2,-32(fp)
   90e20:	1080040b 	ldhu	r2,16(r2)
   90e24:	1884703a 	and	r2,r3,r2
   90e28:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   90e2c:	e0bff68b 	ldhu	r2,-38(fp)
   90e30:	1005003a 	cmpeq	r2,r2,zero
   90e34:	1000131e 	bne	r2,zero,90e84 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   90e38:	e17ff68b 	ldhu	r5,-38(fp)
   90e3c:	e13ff817 	ldw	r4,-32(fp)
   90e40:	009129c0 	call	9129c <OS_FlagTaskRdy>
   90e44:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
   90e48:	e0bff603 	ldbu	r2,-40(fp)
   90e4c:	10800058 	cmpnei	r2,r2,1
   90e50:	10000c1e 	bne	r2,zero,90e84 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   90e54:	00800044 	movi	r2,1
   90e58:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
   90e5c:	00000906 	br	90e84 <OSFlagPost+0x30c>
   90e60:	e0bff517 	ldw	r2,-44(fp)
   90e64:	e0bff215 	stw	r2,-56(fp)
   90e68:	e0bff217 	ldw	r2,-56(fp)
   90e6c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   90e70:	e0fffc17 	ldw	r3,-16(fp)
   90e74:	00801bc4 	movi	r2,111
   90e78:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
   90e7c:	e03fff15 	stw	zero,-4(fp)
   90e80:	00002106 	br	90f08 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   90e84:	e0bff817 	ldw	r2,-32(fp)
   90e88:	10800017 	ldw	r2,0(r2)
   90e8c:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   90e90:	e0bff817 	ldw	r2,-32(fp)
   90e94:	1004c03a 	cmpne	r2,r2,zero
   90e98:	103f881e 	bne	r2,zero,90cbc <OSFlagPost+0x144>
   90e9c:	e0bff517 	ldw	r2,-44(fp)
   90ea0:	e0bff115 	stw	r2,-60(fp)
   90ea4:	e0bff117 	ldw	r2,-60(fp)
   90ea8:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   90eac:	e0bff783 	ldbu	r2,-34(fp)
   90eb0:	10800058 	cmpnei	r2,r2,1
   90eb4:	1000011e 	bne	r2,zero,90ebc <OSFlagPost+0x344>
        OS_Sched();
   90eb8:	008f2a80 	call	8f2a8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90ebc:	0005303a 	rdctl	r2,status
   90ec0:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90ec4:	e0fff017 	ldw	r3,-64(fp)
   90ec8:	00bfff84 	movi	r2,-2
   90ecc:	1884703a 	and	r2,r3,r2
   90ed0:	1001703a 	wrctl	status,r2
  
  return context;
   90ed4:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
   90ed8:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
   90edc:	e0bff917 	ldw	r2,-28(fp)
   90ee0:	1080020b 	ldhu	r2,8(r2)
   90ee4:	e0bff70d 	sth	r2,-36(fp)
   90ee8:	e0bff517 	ldw	r2,-44(fp)
   90eec:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90ef0:	e0bfef17 	ldw	r2,-68(fp)
   90ef4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   90ef8:	e0bffc17 	ldw	r2,-16(fp)
   90efc:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   90f00:	e0bff70b 	ldhu	r2,-36(fp)
   90f04:	e0bfff15 	stw	r2,-4(fp)
   90f08:	e0bfff17 	ldw	r2,-4(fp)
}
   90f0c:	e037883a 	mov	sp,fp
   90f10:	dfc00117 	ldw	ra,4(sp)
   90f14:	df000017 	ldw	fp,0(sp)
   90f18:	dec00204 	addi	sp,sp,8
   90f1c:	f800283a 	ret

00090f20 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   90f20:	defff804 	addi	sp,sp,-32
   90f24:	df000715 	stw	fp,28(sp)
   90f28:	df000704 	addi	fp,sp,28
   90f2c:	e13ffd15 	stw	r4,-12(fp)
   90f30:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   90f34:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   90f38:	e0bffe17 	ldw	r2,-8(fp)
   90f3c:	1004c03a 	cmpne	r2,r2,zero
   90f40:	1000021e 	bne	r2,zero,90f4c <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
   90f44:	e03fff15 	stw	zero,-4(fp)
   90f48:	00002506 	br	90fe0 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   90f4c:	e0bffd17 	ldw	r2,-12(fp)
   90f50:	1004c03a 	cmpne	r2,r2,zero
   90f54:	1000051e 	bne	r2,zero,90f6c <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   90f58:	e0fffe17 	ldw	r3,-8(fp)
   90f5c:	00801b84 	movi	r2,110
   90f60:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   90f64:	e03fff15 	stw	zero,-4(fp)
   90f68:	00001d06 	br	90fe0 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   90f6c:	e0bffd17 	ldw	r2,-12(fp)
   90f70:	10800003 	ldbu	r2,0(r2)
   90f74:	10803fcc 	andi	r2,r2,255
   90f78:	10800160 	cmpeqi	r2,r2,5
   90f7c:	1000051e 	bne	r2,zero,90f94 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
   90f80:	e0fffe17 	ldw	r3,-8(fp)
   90f84:	00800044 	movi	r2,1
   90f88:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   90f8c:	e03fff15 	stw	zero,-4(fp)
   90f90:	00001306 	br	90fe0 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90f94:	0005303a 	rdctl	r2,status
   90f98:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90f9c:	e0fffa17 	ldw	r3,-24(fp)
   90fa0:	00bfff84 	movi	r2,-2
   90fa4:	1884703a 	and	r2,r3,r2
   90fa8:	1001703a 	wrctl	status,r2
  
  return context;
   90fac:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   90fb0:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
   90fb4:	e0bffd17 	ldw	r2,-12(fp)
   90fb8:	1080020b 	ldhu	r2,8(r2)
   90fbc:	e0bffc0d 	sth	r2,-16(fp)
   90fc0:	e0bffb17 	ldw	r2,-20(fp)
   90fc4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90fc8:	e0bff917 	ldw	r2,-28(fp)
   90fcc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   90fd0:	e0bffe17 	ldw	r2,-8(fp)
   90fd4:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   90fd8:	e0bffc0b 	ldhu	r2,-16(fp)
   90fdc:	e0bfff15 	stw	r2,-4(fp)
   90fe0:	e0bfff17 	ldw	r2,-4(fp)
}
   90fe4:	e037883a 	mov	sp,fp
   90fe8:	df000017 	ldw	fp,0(sp)
   90fec:	dec00104 	addi	sp,sp,4
   90ff0:	f800283a 	ret

00090ff4 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   90ff4:	defff804 	addi	sp,sp,-32
   90ff8:	df000715 	stw	fp,28(sp)
   90ffc:	df000704 	addi	fp,sp,28
   91000:	e13ffb15 	stw	r4,-20(fp)
   91004:	e17ffc15 	stw	r5,-16(fp)
   91008:	e0800117 	ldw	r2,4(fp)
   9100c:	e1bffd0d 	sth	r6,-12(fp)
   91010:	e1fffe05 	stb	r7,-8(fp)
   91014:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   91018:	008002b4 	movhi	r2,10
   9101c:	10b3d504 	addi	r2,r2,-12460
   91020:	10c00017 	ldw	r3,0(r2)
   91024:	008002b4 	movhi	r2,10
   91028:	10b3d504 	addi	r2,r2,-12460
   9102c:	10800017 	ldw	r2,0(r2)
   91030:	10800c03 	ldbu	r2,48(r2)
   91034:	10800814 	ori	r2,r2,32
   91038:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   9103c:	008002b4 	movhi	r2,10
   91040:	10b3d504 	addi	r2,r2,-12460
   91044:	10800017 	ldw	r2,0(r2)
   91048:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   9104c:	008002b4 	movhi	r2,10
   91050:	10b3d504 	addi	r2,r2,-12460
   91054:	10c00017 	ldw	r3,0(r2)
   91058:	e0bfff0b 	ldhu	r2,-4(fp)
   9105c:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   91060:	008002b4 	movhi	r2,10
   91064:	10b3d504 	addi	r2,r2,-12460
   91068:	10c00017 	ldw	r3,0(r2)
   9106c:	e0bffc17 	ldw	r2,-16(fp)
   91070:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   91074:	e0fffc17 	ldw	r3,-16(fp)
   91078:	e0bffd0b 	ldhu	r2,-12(fp)
   9107c:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   91080:	e0fffc17 	ldw	r3,-16(fp)
   91084:	e0bffe03 	ldbu	r2,-8(fp)
   91088:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   9108c:	008002b4 	movhi	r2,10
   91090:	10b3d504 	addi	r2,r2,-12460
   91094:	10c00017 	ldw	r3,0(r2)
   91098:	e0bffc17 	ldw	r2,-16(fp)
   9109c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   910a0:	e0bffb17 	ldw	r2,-20(fp)
   910a4:	10c00117 	ldw	r3,4(r2)
   910a8:	e0bffc17 	ldw	r2,-16(fp)
   910ac:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   910b0:	e0bffc17 	ldw	r2,-16(fp)
   910b4:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   910b8:	e0fffc17 	ldw	r3,-16(fp)
   910bc:	e0bffb17 	ldw	r2,-20(fp)
   910c0:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   910c4:	e0bffb17 	ldw	r2,-20(fp)
   910c8:	10800117 	ldw	r2,4(r2)
   910cc:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   910d0:	e0bffa17 	ldw	r2,-24(fp)
   910d4:	1005003a 	cmpeq	r2,r2,zero
   910d8:	1000031e 	bne	r2,zero,910e8 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   910dc:	e0fffa17 	ldw	r3,-24(fp)
   910e0:	e0bffc17 	ldw	r2,-16(fp)
   910e4:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   910e8:	e0fffb17 	ldw	r3,-20(fp)
   910ec:	e0bffc17 	ldw	r2,-16(fp)
   910f0:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   910f4:	008002b4 	movhi	r2,10
   910f8:	10b3d504 	addi	r2,r2,-12460
   910fc:	10800017 	ldw	r2,0(r2)
   91100:	10800d03 	ldbu	r2,52(r2)
   91104:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   91108:	e13ff903 	ldbu	r4,-28(fp)
   9110c:	e0fff903 	ldbu	r3,-28(fp)
   91110:	008002b4 	movhi	r2,10
   91114:	10b3d244 	addi	r2,r2,-12471
   91118:	10c5883a 	add	r2,r2,r3
   9111c:	10800003 	ldbu	r2,0(r2)
   91120:	1007883a 	mov	r3,r2
   91124:	008002b4 	movhi	r2,10
   91128:	10b3d504 	addi	r2,r2,-12460
   9112c:	10800017 	ldw	r2,0(r2)
   91130:	10800d43 	ldbu	r2,53(r2)
   91134:	0084303a 	nor	r2,zero,r2
   91138:	1884703a 	and	r2,r3,r2
   9113c:	1007883a 	mov	r3,r2
   91140:	008002b4 	movhi	r2,10
   91144:	10b3d244 	addi	r2,r2,-12471
   91148:	1105883a 	add	r2,r2,r4
   9114c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   91150:	e0fff903 	ldbu	r3,-28(fp)
   91154:	008002b4 	movhi	r2,10
   91158:	10b3d244 	addi	r2,r2,-12471
   9115c:	10c5883a 	add	r2,r2,r3
   91160:	10800003 	ldbu	r2,0(r2)
   91164:	10803fcc 	andi	r2,r2,255
   91168:	1004c03a 	cmpne	r2,r2,zero
   9116c:	10000e1e 	bne	r2,zero,911a8 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   91170:	008002b4 	movhi	r2,10
   91174:	10b3d504 	addi	r2,r2,-12460
   91178:	10800017 	ldw	r2,0(r2)
   9117c:	10800d83 	ldbu	r2,54(r2)
   91180:	0084303a 	nor	r2,zero,r2
   91184:	1007883a 	mov	r3,r2
   91188:	008002b4 	movhi	r2,10
   9118c:	10b3d204 	addi	r2,r2,-12472
   91190:	10800003 	ldbu	r2,0(r2)
   91194:	1884703a 	and	r2,r3,r2
   91198:	1007883a 	mov	r3,r2
   9119c:	008002b4 	movhi	r2,10
   911a0:	10b3d204 	addi	r2,r2,-12472
   911a4:	10c00005 	stb	r3,0(r2)
    }
}
   911a8:	e037883a 	mov	sp,fp
   911ac:	df000017 	ldw	fp,0(sp)
   911b0:	dec00104 	addi	sp,sp,4
   911b4:	f800283a 	ret

000911b8 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   911b8:	defffb04 	addi	sp,sp,-20
   911bc:	dfc00415 	stw	ra,16(sp)
   911c0:	df000315 	stw	fp,12(sp)
   911c4:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   911c8:	010002f4 	movhi	r4,11
   911cc:	21247104 	addi	r4,r4,-28220
   911d0:	0140dc04 	movi	r5,880
   911d4:	008f1e80 	call	8f1e8 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   911d8:	008002f4 	movhi	r2,11
   911dc:	10a47104 	addi	r2,r2,-28220
   911e0:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   911e4:	008002f4 	movhi	r2,11
   911e8:	10a47c04 	addi	r2,r2,-28176
   911ec:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   911f0:	e03fff0d 	sth	zero,-4(fp)
   911f4:	00001306 	br	91244 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   911f8:	e0bffe17 	ldw	r2,-8(fp)
   911fc:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   91200:	e0fffe17 	ldw	r3,-8(fp)
   91204:	e0bffd17 	ldw	r2,-12(fp)
   91208:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   9120c:	e0fffe17 	ldw	r3,-8(fp)
   91210:	00800fc4 	movi	r2,63
   91214:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   91218:	e0bffe17 	ldw	r2,-8(fp)
   9121c:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   91220:	e0bffe17 	ldw	r2,-8(fp)
   91224:	10800b04 	addi	r2,r2,44
   91228:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   9122c:	e0bffd17 	ldw	r2,-12(fp)
   91230:	10800b04 	addi	r2,r2,44
   91234:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   91238:	e0bfff0b 	ldhu	r2,-4(fp)
   9123c:	10800044 	addi	r2,r2,1
   91240:	e0bfff0d 	sth	r2,-4(fp)
   91244:	e0bfff0b 	ldhu	r2,-4(fp)
   91248:	108004f0 	cmpltui	r2,r2,19
   9124c:	103fea1e 	bne	r2,zero,911f8 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   91250:	e0bffe17 	ldw	r2,-8(fp)
   91254:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   91258:	e0bffe17 	ldw	r2,-8(fp)
   9125c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   91260:	e0fffe17 	ldw	r3,-8(fp)
   91264:	00800fc4 	movi	r2,63
   91268:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   9126c:	e0bffe17 	ldw	r2,-8(fp)
   91270:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   91274:	00c002b4 	movhi	r3,10
   91278:	18f3d704 	addi	r3,r3,-12452
   9127c:	008002f4 	movhi	r2,11
   91280:	10a47104 	addi	r2,r2,-28220
   91284:	18800015 	stw	r2,0(r3)
#endif
}
   91288:	e037883a 	mov	sp,fp
   9128c:	dfc00117 	ldw	ra,4(sp)
   91290:	df000017 	ldw	fp,0(sp)
   91294:	dec00204 	addi	sp,sp,8
   91298:	f800283a 	ret

0009129c <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   9129c:	defffa04 	addi	sp,sp,-24
   912a0:	dfc00515 	stw	ra,20(sp)
   912a4:	df000415 	stw	fp,16(sp)
   912a8:	df000404 	addi	fp,sp,16
   912ac:	e13ffe15 	stw	r4,-8(fp)
   912b0:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   912b4:	e0bffe17 	ldw	r2,-8(fp)
   912b8:	10800217 	ldw	r2,8(r2)
   912bc:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   912c0:	e0bffd17 	ldw	r2,-12(fp)
   912c4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   912c8:	e0fffd17 	ldw	r3,-12(fp)
   912cc:	e0bfff0b 	ldhu	r2,-4(fp)
   912d0:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   912d4:	e0bffd17 	ldw	r2,-12(fp)
   912d8:	10c00c03 	ldbu	r3,48(r2)
   912dc:	00bff7c4 	movi	r2,-33
   912e0:	1884703a 	and	r2,r3,r2
   912e4:	1007883a 	mov	r3,r2
   912e8:	e0bffd17 	ldw	r2,-12(fp)
   912ec:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   912f0:	e0bffd17 	ldw	r2,-12(fp)
   912f4:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   912f8:	e0bffd17 	ldw	r2,-12(fp)
   912fc:	10800c03 	ldbu	r2,48(r2)
   91300:	10803fcc 	andi	r2,r2,255
   91304:	1004c03a 	cmpne	r2,r2,zero
   91308:	10001f1e 	bne	r2,zero,91388 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   9130c:	e0bffd17 	ldw	r2,-12(fp)
   91310:	10c00d83 	ldbu	r3,54(r2)
   91314:	008002b4 	movhi	r2,10
   91318:	10b3d204 	addi	r2,r2,-12472
   9131c:	10800003 	ldbu	r2,0(r2)
   91320:	1884b03a 	or	r2,r3,r2
   91324:	1007883a 	mov	r3,r2
   91328:	008002b4 	movhi	r2,10
   9132c:	10b3d204 	addi	r2,r2,-12472
   91330:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   91334:	e0bffd17 	ldw	r2,-12(fp)
   91338:	10800d03 	ldbu	r2,52(r2)
   9133c:	11003fcc 	andi	r4,r2,255
   91340:	e0bffd17 	ldw	r2,-12(fp)
   91344:	10800d03 	ldbu	r2,52(r2)
   91348:	10c03fcc 	andi	r3,r2,255
   9134c:	008002b4 	movhi	r2,10
   91350:	10b3d244 	addi	r2,r2,-12471
   91354:	10c5883a 	add	r2,r2,r3
   91358:	10c00003 	ldbu	r3,0(r2)
   9135c:	e0bffd17 	ldw	r2,-12(fp)
   91360:	10800d43 	ldbu	r2,53(r2)
   91364:	1884b03a 	or	r2,r3,r2
   91368:	1007883a 	mov	r3,r2
   9136c:	008002b4 	movhi	r2,10
   91370:	10b3d244 	addi	r2,r2,-12471
   91374:	1105883a 	add	r2,r2,r4
   91378:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
   9137c:	00800044 	movi	r2,1
   91380:	e0bffc05 	stb	r2,-16(fp)
   91384:	00000106 	br	9138c <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   91388:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   9138c:	e13ffe17 	ldw	r4,-8(fp)
   91390:	00913ac0 	call	913ac <OS_FlagUnlink>
    return (sched);
   91394:	e0bffc03 	ldbu	r2,-16(fp)
}
   91398:	e037883a 	mov	sp,fp
   9139c:	dfc00117 	ldw	ra,4(sp)
   913a0:	df000017 	ldw	fp,0(sp)
   913a4:	dec00204 	addi	sp,sp,8
   913a8:	f800283a 	ret

000913ac <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   913ac:	defffa04 	addi	sp,sp,-24
   913b0:	df000515 	stw	fp,20(sp)
   913b4:	df000504 	addi	fp,sp,20
   913b8:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   913bc:	e0bfff17 	ldw	r2,-4(fp)
   913c0:	10800117 	ldw	r2,4(r2)
   913c4:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   913c8:	e0bfff17 	ldw	r2,-4(fp)
   913cc:	10800017 	ldw	r2,0(r2)
   913d0:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   913d4:	e0bffc17 	ldw	r2,-16(fp)
   913d8:	1004c03a 	cmpne	r2,r2,zero
   913dc:	10000c1e 	bne	r2,zero,91410 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   913e0:	e0bfff17 	ldw	r2,-4(fp)
   913e4:	10800317 	ldw	r2,12(r2)
   913e8:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   913ec:	e0fffd17 	ldw	r3,-12(fp)
   913f0:	e0bffb17 	ldw	r2,-20(fp)
   913f4:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   913f8:	e0bffb17 	ldw	r2,-20(fp)
   913fc:	1005003a 	cmpeq	r2,r2,zero
   91400:	10000c1e 	bne	r2,zero,91434 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   91404:	e0bffb17 	ldw	r2,-20(fp)
   91408:	10000115 	stw	zero,4(r2)
   9140c:	00000906 	br	91434 <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   91410:	e0fffc17 	ldw	r3,-16(fp)
   91414:	e0bffb17 	ldw	r2,-20(fp)
   91418:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   9141c:	e0bffb17 	ldw	r2,-20(fp)
   91420:	1005003a 	cmpeq	r2,r2,zero
   91424:	1000031e 	bne	r2,zero,91434 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   91428:	e0fffb17 	ldw	r3,-20(fp)
   9142c:	e0bffc17 	ldw	r2,-16(fp)
   91430:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   91434:	e0bfff17 	ldw	r2,-4(fp)
   91438:	10800217 	ldw	r2,8(r2)
   9143c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   91440:	e0bffe17 	ldw	r2,-8(fp)
   91444:	10000a15 	stw	zero,40(r2)
#endif
}
   91448:	e037883a 	mov	sp,fp
   9144c:	df000017 	ldw	fp,0(sp)
   91450:	dec00104 	addi	sp,sp,4
   91454:	f800283a 	ret

00091458 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   91458:	defff304 	addi	sp,sp,-52
   9145c:	df000c15 	stw	fp,48(sp)
   91460:	df000c04 	addi	fp,sp,48
   91464:	e13ffb15 	stw	r4,-20(fp)
   91468:	e17ffc15 	stw	r5,-16(fp)
   9146c:	e1bffd15 	stw	r6,-12(fp)
   91470:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   91474:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   91478:	e0bffe17 	ldw	r2,-8(fp)
   9147c:	1004c03a 	cmpne	r2,r2,zero
   91480:	1000021e 	bne	r2,zero,9148c <OSMemCreate+0x34>
        return ((OS_MEM *)0);
   91484:	e03fff15 	stw	zero,-4(fp)
   91488:	00007506 	br	91660 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   9148c:	e0bffb17 	ldw	r2,-20(fp)
   91490:	1004c03a 	cmpne	r2,r2,zero
   91494:	1000051e 	bne	r2,zero,914ac <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   91498:	e0fffe17 	ldw	r3,-8(fp)
   9149c:	00801884 	movi	r2,98
   914a0:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
   914a4:	e03fff15 	stw	zero,-4(fp)
   914a8:	00006d06 	br	91660 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   914ac:	e0bffb17 	ldw	r2,-20(fp)
   914b0:	108000cc 	andi	r2,r2,3
   914b4:	1005003a 	cmpeq	r2,r2,zero
   914b8:	1000051e 	bne	r2,zero,914d0 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   914bc:	e0fffe17 	ldw	r3,-8(fp)
   914c0:	00801884 	movi	r2,98
   914c4:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
   914c8:	e03fff15 	stw	zero,-4(fp)
   914cc:	00006406 	br	91660 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   914d0:	e0bffc17 	ldw	r2,-16(fp)
   914d4:	108000a8 	cmpgeui	r2,r2,2
   914d8:	1000051e 	bne	r2,zero,914f0 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   914dc:	e0fffe17 	ldw	r3,-8(fp)
   914e0:	008016c4 	movi	r2,91
   914e4:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
   914e8:	e03fff15 	stw	zero,-4(fp)
   914ec:	00005c06 	br	91660 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   914f0:	e0bffd17 	ldw	r2,-12(fp)
   914f4:	10800128 	cmpgeui	r2,r2,4
   914f8:	1000051e 	bne	r2,zero,91510 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   914fc:	e0fffe17 	ldw	r3,-8(fp)
   91500:	00801704 	movi	r2,92
   91504:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
   91508:	e03fff15 	stw	zero,-4(fp)
   9150c:	00005406 	br	91660 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91510:	0005303a 	rdctl	r2,status
   91514:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91518:	e0fff517 	ldw	r3,-44(fp)
   9151c:	00bfff84 	movi	r2,-2
   91520:	1884703a 	and	r2,r3,r2
   91524:	1001703a 	wrctl	status,r2
  
  return context;
   91528:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   9152c:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   91530:	008002b4 	movhi	r2,10
   91534:	10b3cf04 	addi	r2,r2,-12484
   91538:	10800017 	ldw	r2,0(r2)
   9153c:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   91540:	008002b4 	movhi	r2,10
   91544:	10b3cf04 	addi	r2,r2,-12484
   91548:	10800017 	ldw	r2,0(r2)
   9154c:	1005003a 	cmpeq	r2,r2,zero
   91550:	1000081e 	bne	r2,zero,91574 <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   91554:	008002b4 	movhi	r2,10
   91558:	10b3cf04 	addi	r2,r2,-12484
   9155c:	10800017 	ldw	r2,0(r2)
   91560:	10800117 	ldw	r2,4(r2)
   91564:	1007883a 	mov	r3,r2
   91568:	008002b4 	movhi	r2,10
   9156c:	10b3cf04 	addi	r2,r2,-12484
   91570:	10c00015 	stw	r3,0(r2)
   91574:	e0bff617 	ldw	r2,-40(fp)
   91578:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9157c:	e0bff417 	ldw	r2,-48(fp)
   91580:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   91584:	e0bffa17 	ldw	r2,-24(fp)
   91588:	1004c03a 	cmpne	r2,r2,zero
   9158c:	1000051e 	bne	r2,zero,915a4 <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
   91590:	e0fffe17 	ldw	r3,-8(fp)
   91594:	00801684 	movi	r2,90
   91598:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
   9159c:	e03fff15 	stw	zero,-4(fp)
   915a0:	00002f06 	br	91660 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   915a4:	e0bffb17 	ldw	r2,-20(fp)
   915a8:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   915ac:	e0bffb17 	ldw	r2,-20(fp)
   915b0:	1007883a 	mov	r3,r2
   915b4:	e0bffd17 	ldw	r2,-12(fp)
   915b8:	1885883a 	add	r2,r3,r2
   915bc:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
   915c0:	e03ff715 	stw	zero,-36(fp)
   915c4:	00000d06 	br	915fc <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   915c8:	e0fff817 	ldw	r3,-32(fp)
   915cc:	e0bff917 	ldw	r2,-28(fp)
   915d0:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   915d4:	e0bff917 	ldw	r2,-28(fp)
   915d8:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   915dc:	e0bff917 	ldw	r2,-28(fp)
   915e0:	1007883a 	mov	r3,r2
   915e4:	e0bffd17 	ldw	r2,-12(fp)
   915e8:	1885883a 	add	r2,r3,r2
   915ec:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   915f0:	e0bff717 	ldw	r2,-36(fp)
   915f4:	10800044 	addi	r2,r2,1
   915f8:	e0bff715 	stw	r2,-36(fp)
   915fc:	e0bffc17 	ldw	r2,-16(fp)
   91600:	10ffffc4 	addi	r3,r2,-1
   91604:	e0bff717 	ldw	r2,-36(fp)
   91608:	10ffef36 	bltu	r2,r3,915c8 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   9160c:	e0bff817 	ldw	r2,-32(fp)
   91610:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   91614:	e0fffa17 	ldw	r3,-24(fp)
   91618:	e0bffb17 	ldw	r2,-20(fp)
   9161c:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   91620:	e0fffa17 	ldw	r3,-24(fp)
   91624:	e0bffb17 	ldw	r2,-20(fp)
   91628:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   9162c:	e0fffa17 	ldw	r3,-24(fp)
   91630:	e0bffc17 	ldw	r2,-16(fp)
   91634:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
   91638:	e0fffa17 	ldw	r3,-24(fp)
   9163c:	e0bffc17 	ldw	r2,-16(fp)
   91640:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   91644:	e0fffa17 	ldw	r3,-24(fp)
   91648:	e0bffd17 	ldw	r2,-12(fp)
   9164c:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
   91650:	e0bffe17 	ldw	r2,-8(fp)
   91654:	10000005 	stb	zero,0(r2)
    return (pmem);
   91658:	e0bffa17 	ldw	r2,-24(fp)
   9165c:	e0bfff15 	stw	r2,-4(fp)
   91660:	e0bfff17 	ldw	r2,-4(fp)
}
   91664:	e037883a 	mov	sp,fp
   91668:	df000017 	ldw	fp,0(sp)
   9166c:	dec00104 	addi	sp,sp,4
   91670:	f800283a 	ret

00091674 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   91674:	defff704 	addi	sp,sp,-36
   91678:	df000815 	stw	fp,32(sp)
   9167c:	df000804 	addi	fp,sp,32
   91680:	e13ffd15 	stw	r4,-12(fp)
   91684:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   91688:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   9168c:	e0bffe17 	ldw	r2,-8(fp)
   91690:	1004c03a 	cmpne	r2,r2,zero
   91694:	1000021e 	bne	r2,zero,916a0 <OSMemGet+0x2c>
        return ((void *)0);
   91698:	e03fff15 	stw	zero,-4(fp)
   9169c:	00003106 	br	91764 <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   916a0:	e0bffd17 	ldw	r2,-12(fp)
   916a4:	1004c03a 	cmpne	r2,r2,zero
   916a8:	1000051e 	bne	r2,zero,916c0 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   916ac:	e0fffe17 	ldw	r3,-8(fp)
   916b0:	00801804 	movi	r2,96
   916b4:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   916b8:	e03fff15 	stw	zero,-4(fp)
   916bc:	00002906 	br	91764 <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   916c0:	0005303a 	rdctl	r2,status
   916c4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   916c8:	e0fffa17 	ldw	r3,-24(fp)
   916cc:	00bfff84 	movi	r2,-2
   916d0:	1884703a 	and	r2,r3,r2
   916d4:	1001703a 	wrctl	status,r2
  
  return context;
   916d8:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   916dc:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   916e0:	e0bffd17 	ldw	r2,-12(fp)
   916e4:	10800417 	ldw	r2,16(r2)
   916e8:	1005003a 	cmpeq	r2,r2,zero
   916ec:	1000151e 	bne	r2,zero,91744 <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   916f0:	e0bffd17 	ldw	r2,-12(fp)
   916f4:	10800117 	ldw	r2,4(r2)
   916f8:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   916fc:	e0bffc17 	ldw	r2,-16(fp)
   91700:	10c00017 	ldw	r3,0(r2)
   91704:	e0bffd17 	ldw	r2,-12(fp)
   91708:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   9170c:	e0bffd17 	ldw	r2,-12(fp)
   91710:	10800417 	ldw	r2,16(r2)
   91714:	10ffffc4 	addi	r3,r2,-1
   91718:	e0bffd17 	ldw	r2,-12(fp)
   9171c:	10c00415 	stw	r3,16(r2)
   91720:	e0bffb17 	ldw	r2,-20(fp)
   91724:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91728:	e0bff917 	ldw	r2,-28(fp)
   9172c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   91730:	e0bffe17 	ldw	r2,-8(fp)
   91734:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   91738:	e0bffc17 	ldw	r2,-16(fp)
   9173c:	e0bfff15 	stw	r2,-4(fp)
   91740:	00000806 	br	91764 <OSMemGet+0xf0>
   91744:	e0bffb17 	ldw	r2,-20(fp)
   91748:	e0bff815 	stw	r2,-32(fp)
   9174c:	e0bff817 	ldw	r2,-32(fp)
   91750:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   91754:	e0fffe17 	ldw	r3,-8(fp)
   91758:	00801744 	movi	r2,93
   9175c:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   91760:	e03fff15 	stw	zero,-4(fp)
   91764:	e0bfff17 	ldw	r2,-4(fp)
}
   91768:	e037883a 	mov	sp,fp
   9176c:	df000017 	ldw	fp,0(sp)
   91770:	dec00104 	addi	sp,sp,4
   91774:	f800283a 	ret

00091778 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   91778:	defff604 	addi	sp,sp,-40
   9177c:	dfc00915 	stw	ra,36(sp)
   91780:	df000815 	stw	fp,32(sp)
   91784:	df000804 	addi	fp,sp,32
   91788:	e13ffc15 	stw	r4,-16(fp)
   9178c:	e17ffd15 	stw	r5,-12(fp)
   91790:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   91794:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   91798:	e0bffe17 	ldw	r2,-8(fp)
   9179c:	1004c03a 	cmpne	r2,r2,zero
   917a0:	1000021e 	bne	r2,zero,917ac <OSMemNameGet+0x34>
        return (0);
   917a4:	e03fff15 	stw	zero,-4(fp)
   917a8:	00003006 	br	9186c <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   917ac:	e0bffc17 	ldw	r2,-16(fp)
   917b0:	1004c03a 	cmpne	r2,r2,zero
   917b4:	1000051e 	bne	r2,zero,917cc <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   917b8:	e0fffe17 	ldw	r3,-8(fp)
   917bc:	00801804 	movi	r2,96
   917c0:	18800005 	stb	r2,0(r3)
        return (0);
   917c4:	e03fff15 	stw	zero,-4(fp)
   917c8:	00002806 	br	9186c <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   917cc:	e0bffd17 	ldw	r2,-12(fp)
   917d0:	1004c03a 	cmpne	r2,r2,zero
   917d4:	1000051e 	bne	r2,zero,917ec <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
   917d8:	e0fffe17 	ldw	r3,-8(fp)
   917dc:	00800304 	movi	r2,12
   917e0:	18800005 	stb	r2,0(r3)
        return (0);
   917e4:	e03fff15 	stw	zero,-4(fp)
   917e8:	00002006 	br	9186c <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   917ec:	008002b4 	movhi	r2,10
   917f0:	10b3d404 	addi	r2,r2,-12464
   917f4:	10800003 	ldbu	r2,0(r2)
   917f8:	10803fcc 	andi	r2,r2,255
   917fc:	1005003a 	cmpeq	r2,r2,zero
   91800:	1000051e 	bne	r2,zero,91818 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
   91804:	e0fffe17 	ldw	r3,-8(fp)
   91808:	00800444 	movi	r2,17
   9180c:	18800005 	stb	r2,0(r3)
        return (0);
   91810:	e03fff15 	stw	zero,-4(fp)
   91814:	00001506 	br	9186c <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91818:	0005303a 	rdctl	r2,status
   9181c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91820:	e0fff917 	ldw	r3,-28(fp)
   91824:	00bfff84 	movi	r2,-2
   91828:	1884703a 	and	r2,r3,r2
   9182c:	1001703a 	wrctl	status,r2
  
  return context;
   91830:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   91834:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   91838:	e0bffc17 	ldw	r2,-16(fp)
   9183c:	11400504 	addi	r5,r2,20
   91840:	e13ffd17 	ldw	r4,-12(fp)
   91844:	008f3ec0 	call	8f3ec <OS_StrCopy>
   91848:	e0bffb05 	stb	r2,-20(fp)
   9184c:	e0bffa17 	ldw	r2,-24(fp)
   91850:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91854:	e0bff817 	ldw	r2,-32(fp)
   91858:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   9185c:	e0bffe17 	ldw	r2,-8(fp)
   91860:	10000005 	stb	zero,0(r2)
    return (len);
   91864:	e0bffb03 	ldbu	r2,-20(fp)
   91868:	e0bfff15 	stw	r2,-4(fp)
   9186c:	e0bfff17 	ldw	r2,-4(fp)
}
   91870:	e037883a 	mov	sp,fp
   91874:	dfc00117 	ldw	ra,4(sp)
   91878:	df000017 	ldw	fp,0(sp)
   9187c:	dec00204 	addi	sp,sp,8
   91880:	f800283a 	ret

00091884 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   91884:	defff604 	addi	sp,sp,-40
   91888:	dfc00915 	stw	ra,36(sp)
   9188c:	df000815 	stw	fp,32(sp)
   91890:	df000804 	addi	fp,sp,32
   91894:	e13ffd15 	stw	r4,-12(fp)
   91898:	e17ffe15 	stw	r5,-8(fp)
   9189c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   918a0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   918a4:	e0bfff17 	ldw	r2,-4(fp)
   918a8:	1005003a 	cmpeq	r2,r2,zero
   918ac:	1000381e 	bne	r2,zero,91990 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   918b0:	e0bffd17 	ldw	r2,-12(fp)
   918b4:	1004c03a 	cmpne	r2,r2,zero
   918b8:	1000041e 	bne	r2,zero,918cc <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   918bc:	e0ffff17 	ldw	r3,-4(fp)
   918c0:	00801804 	movi	r2,96
   918c4:	18800005 	stb	r2,0(r3)
        return;
   918c8:	00003106 	br	91990 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   918cc:	e0bffe17 	ldw	r2,-8(fp)
   918d0:	1004c03a 	cmpne	r2,r2,zero
   918d4:	1000041e 	bne	r2,zero,918e8 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
   918d8:	e0ffff17 	ldw	r3,-4(fp)
   918dc:	00800304 	movi	r2,12
   918e0:	18800005 	stb	r2,0(r3)
        return;
   918e4:	00002a06 	br	91990 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   918e8:	008002b4 	movhi	r2,10
   918ec:	10b3d404 	addi	r2,r2,-12464
   918f0:	10800003 	ldbu	r2,0(r2)
   918f4:	10803fcc 	andi	r2,r2,255
   918f8:	1005003a 	cmpeq	r2,r2,zero
   918fc:	1000041e 	bne	r2,zero,91910 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
   91900:	e0ffff17 	ldw	r3,-4(fp)
   91904:	00800484 	movi	r2,18
   91908:	18800005 	stb	r2,0(r3)
        return;
   9190c:	00002006 	br	91990 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91910:	0005303a 	rdctl	r2,status
   91914:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91918:	e0fffa17 	ldw	r3,-24(fp)
   9191c:	00bfff84 	movi	r2,-2
   91920:	1884703a 	and	r2,r3,r2
   91924:	1001703a 	wrctl	status,r2
  
  return context;
   91928:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   9192c:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   91930:	e13ffe17 	ldw	r4,-8(fp)
   91934:	008f46c0 	call	8f46c <OS_StrLen>
   91938:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   9193c:	e0bffc03 	ldbu	r2,-16(fp)
   91940:	10800830 	cmpltui	r2,r2,32
   91944:	1000081e 	bne	r2,zero,91968 <OSMemNameSet+0xe4>
   91948:	e0bffb17 	ldw	r2,-20(fp)
   9194c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91950:	e0bff917 	ldw	r2,-28(fp)
   91954:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   91958:	e0ffff17 	ldw	r3,-4(fp)
   9195c:	008018c4 	movi	r2,99
   91960:	18800005 	stb	r2,0(r3)
        return;
   91964:	00000a06 	br	91990 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   91968:	e0bffd17 	ldw	r2,-12(fp)
   9196c:	11000504 	addi	r4,r2,20
   91970:	e17ffe17 	ldw	r5,-8(fp)
   91974:	008f3ec0 	call	8f3ec <OS_StrCopy>
   91978:	e0bffb17 	ldw	r2,-20(fp)
   9197c:	e0bff815 	stw	r2,-32(fp)
   91980:	e0bff817 	ldw	r2,-32(fp)
   91984:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   91988:	e0bfff17 	ldw	r2,-4(fp)
   9198c:	10000005 	stb	zero,0(r2)
}
   91990:	e037883a 	mov	sp,fp
   91994:	dfc00117 	ldw	ra,4(sp)
   91998:	df000017 	ldw	fp,0(sp)
   9199c:	dec00204 	addi	sp,sp,8
   919a0:	f800283a 	ret

000919a4 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   919a4:	defff804 	addi	sp,sp,-32
   919a8:	df000715 	stw	fp,28(sp)
   919ac:	df000704 	addi	fp,sp,28
   919b0:	e13ffd15 	stw	r4,-12(fp)
   919b4:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   919b8:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   919bc:	e0bffd17 	ldw	r2,-12(fp)
   919c0:	1004c03a 	cmpne	r2,r2,zero
   919c4:	1000031e 	bne	r2,zero,919d4 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
   919c8:	00801804 	movi	r2,96
   919cc:	e0bfff15 	stw	r2,-4(fp)
   919d0:	00002b06 	br	91a80 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   919d4:	e0bffe17 	ldw	r2,-8(fp)
   919d8:	1004c03a 	cmpne	r2,r2,zero
   919dc:	1000031e 	bne	r2,zero,919ec <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
   919e0:	008017c4 	movi	r2,95
   919e4:	e0bfff15 	stw	r2,-4(fp)
   919e8:	00002506 	br	91a80 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   919ec:	0005303a 	rdctl	r2,status
   919f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   919f4:	e0fffb17 	ldw	r3,-20(fp)
   919f8:	00bfff84 	movi	r2,-2
   919fc:	1884703a 	and	r2,r3,r2
   91a00:	1001703a 	wrctl	status,r2
  
  return context;
   91a04:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   91a08:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   91a0c:	e0bffd17 	ldw	r2,-12(fp)
   91a10:	10c00417 	ldw	r3,16(r2)
   91a14:	e0bffd17 	ldw	r2,-12(fp)
   91a18:	10800317 	ldw	r2,12(r2)
   91a1c:	18800736 	bltu	r3,r2,91a3c <OSMemPut+0x98>
   91a20:	e0bffc17 	ldw	r2,-16(fp)
   91a24:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91a28:	e0bffa17 	ldw	r2,-24(fp)
   91a2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   91a30:	00801784 	movi	r2,94
   91a34:	e0bfff15 	stw	r2,-4(fp)
   91a38:	00001106 	br	91a80 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   91a3c:	e0fffe17 	ldw	r3,-8(fp)
   91a40:	e0bffd17 	ldw	r2,-12(fp)
   91a44:	10800117 	ldw	r2,4(r2)
   91a48:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
   91a4c:	e0fffd17 	ldw	r3,-12(fp)
   91a50:	e0bffe17 	ldw	r2,-8(fp)
   91a54:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   91a58:	e0bffd17 	ldw	r2,-12(fp)
   91a5c:	10800417 	ldw	r2,16(r2)
   91a60:	10c00044 	addi	r3,r2,1
   91a64:	e0bffd17 	ldw	r2,-12(fp)
   91a68:	10c00415 	stw	r3,16(r2)
   91a6c:	e0bffc17 	ldw	r2,-16(fp)
   91a70:	e0bff915 	stw	r2,-28(fp)
   91a74:	e0bff917 	ldw	r2,-28(fp)
   91a78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   91a7c:	e03fff15 	stw	zero,-4(fp)
   91a80:	e0bfff17 	ldw	r2,-4(fp)
}
   91a84:	e037883a 	mov	sp,fp
   91a88:	df000017 	ldw	fp,0(sp)
   91a8c:	dec00104 	addi	sp,sp,4
   91a90:	f800283a 	ret

00091a94 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   91a94:	defff904 	addi	sp,sp,-28
   91a98:	df000615 	stw	fp,24(sp)
   91a9c:	df000604 	addi	fp,sp,24
   91aa0:	e13ffd15 	stw	r4,-12(fp)
   91aa4:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   91aa8:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   91aac:	e0bffd17 	ldw	r2,-12(fp)
   91ab0:	1004c03a 	cmpne	r2,r2,zero
   91ab4:	1000031e 	bne	r2,zero,91ac4 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
   91ab8:	00801804 	movi	r2,96
   91abc:	e0bfff15 	stw	r2,-4(fp)
   91ac0:	00002e06 	br	91b7c <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   91ac4:	e0bffe17 	ldw	r2,-8(fp)
   91ac8:	1004c03a 	cmpne	r2,r2,zero
   91acc:	1000031e 	bne	r2,zero,91adc <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
   91ad0:	00801844 	movi	r2,97
   91ad4:	e0bfff15 	stw	r2,-4(fp)
   91ad8:	00002806 	br	91b7c <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91adc:	0005303a 	rdctl	r2,status
   91ae0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91ae4:	e0fffb17 	ldw	r3,-20(fp)
   91ae8:	00bfff84 	movi	r2,-2
   91aec:	1884703a 	and	r2,r3,r2
   91af0:	1001703a 	wrctl	status,r2
  
  return context;
   91af4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   91af8:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   91afc:	e0bffd17 	ldw	r2,-12(fp)
   91b00:	10c00017 	ldw	r3,0(r2)
   91b04:	e0bffe17 	ldw	r2,-8(fp)
   91b08:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   91b0c:	e0bffd17 	ldw	r2,-12(fp)
   91b10:	10c00117 	ldw	r3,4(r2)
   91b14:	e0bffe17 	ldw	r2,-8(fp)
   91b18:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   91b1c:	e0bffd17 	ldw	r2,-12(fp)
   91b20:	10c00217 	ldw	r3,8(r2)
   91b24:	e0bffe17 	ldw	r2,-8(fp)
   91b28:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   91b2c:	e0bffd17 	ldw	r2,-12(fp)
   91b30:	10c00317 	ldw	r3,12(r2)
   91b34:	e0bffe17 	ldw	r2,-8(fp)
   91b38:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   91b3c:	e0bffd17 	ldw	r2,-12(fp)
   91b40:	10c00417 	ldw	r3,16(r2)
   91b44:	e0bffe17 	ldw	r2,-8(fp)
   91b48:	10c00415 	stw	r3,16(r2)
   91b4c:	e0bffc17 	ldw	r2,-16(fp)
   91b50:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91b54:	e0bffa17 	ldw	r2,-24(fp)
   91b58:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   91b5c:	e0bffe17 	ldw	r2,-8(fp)
   91b60:	10c00317 	ldw	r3,12(r2)
   91b64:	e0bffe17 	ldw	r2,-8(fp)
   91b68:	10800417 	ldw	r2,16(r2)
   91b6c:	1887c83a 	sub	r3,r3,r2
   91b70:	e0bffe17 	ldw	r2,-8(fp)
   91b74:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   91b78:	e03fff15 	stw	zero,-4(fp)
   91b7c:	e0bfff17 	ldw	r2,-4(fp)
}
   91b80:	e037883a 	mov	sp,fp
   91b84:	df000017 	ldw	fp,0(sp)
   91b88:	dec00104 	addi	sp,sp,4
   91b8c:	f800283a 	ret

00091b90 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   91b90:	defffc04 	addi	sp,sp,-16
   91b94:	dfc00315 	stw	ra,12(sp)
   91b98:	df000215 	stw	fp,8(sp)
   91b9c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   91ba0:	010002f4 	movhi	r4,11
   91ba4:	21254d04 	addi	r4,r4,-27340
   91ba8:	01430c04 	movi	r5,3120
   91bac:	008f1e80 	call	8f1e8 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   91bb0:	008002f4 	movhi	r2,11
   91bb4:	10a54d04 	addi	r2,r2,-27340
   91bb8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   91bbc:	e03ffe0d 	sth	zero,-8(fp)
   91bc0:	00001406 	br	91c14 <OS_MemInit+0x84>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   91bc4:	e13ffe0b 	ldhu	r4,-8(fp)
   91bc8:	01400d04 	movi	r5,52
   91bcc:	0082b040 	call	82b04 <__mulsi3>
   91bd0:	1007883a 	mov	r3,r2
   91bd4:	008002f4 	movhi	r2,11
   91bd8:	10a55a04 	addi	r2,r2,-27288
   91bdc:	1887883a 	add	r3,r3,r2
   91be0:	e0bfff17 	ldw	r2,-4(fp)
   91be4:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   91be8:	e0ffff17 	ldw	r3,-4(fp)
   91bec:	00800fc4 	movi	r2,63
   91bf0:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   91bf4:	e0bfff17 	ldw	r2,-4(fp)
   91bf8:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   91bfc:	e0bfff17 	ldw	r2,-4(fp)
   91c00:	10800d04 	addi	r2,r2,52
   91c04:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   91c08:	e0bffe0b 	ldhu	r2,-8(fp)
   91c0c:	10800044 	addi	r2,r2,1
   91c10:	e0bffe0d 	sth	r2,-8(fp)
   91c14:	e0bffe0b 	ldhu	r2,-8(fp)
   91c18:	10800ef0 	cmpltui	r2,r2,59
   91c1c:	103fe91e 	bne	r2,zero,91bc4 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   91c20:	e0bfff17 	ldw	r2,-4(fp)
   91c24:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   91c28:	e0ffff17 	ldw	r3,-4(fp)
   91c2c:	00800fc4 	movi	r2,63
   91c30:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   91c34:	e0bfff17 	ldw	r2,-4(fp)
   91c38:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   91c3c:	00c002b4 	movhi	r3,10
   91c40:	18f3cf04 	addi	r3,r3,-12484
   91c44:	008002f4 	movhi	r2,11
   91c48:	10a54d04 	addi	r2,r2,-27340
   91c4c:	18800015 	stw	r2,0(r3)
#endif
}
   91c50:	e037883a 	mov	sp,fp
   91c54:	dfc00117 	ldw	ra,4(sp)
   91c58:	df000017 	ldw	fp,0(sp)
   91c5c:	dec00204 	addi	sp,sp,8
   91c60:	f800283a 	ret

00091c64 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   91c64:	defff704 	addi	sp,sp,-36
   91c68:	df000815 	stw	fp,32(sp)
   91c6c:	df000804 	addi	fp,sp,32
   91c70:	e13ffd15 	stw	r4,-12(fp)
   91c74:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   91c78:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   91c7c:	e0bffe17 	ldw	r2,-8(fp)
   91c80:	1004c03a 	cmpne	r2,r2,zero
   91c84:	1000021e 	bne	r2,zero,91c90 <OSQAccept+0x2c>
        return ((void *)0);
   91c88:	e03fff15 	stw	zero,-4(fp)
   91c8c:	00004506 	br	91da4 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   91c90:	e0bffd17 	ldw	r2,-12(fp)
   91c94:	1004c03a 	cmpne	r2,r2,zero
   91c98:	1000051e 	bne	r2,zero,91cb0 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   91c9c:	e0fffe17 	ldw	r3,-8(fp)
   91ca0:	00800104 	movi	r2,4
   91ca4:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   91ca8:	e03fff15 	stw	zero,-4(fp)
   91cac:	00003d06 	br	91da4 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   91cb0:	e0bffd17 	ldw	r2,-12(fp)
   91cb4:	10800003 	ldbu	r2,0(r2)
   91cb8:	10803fcc 	andi	r2,r2,255
   91cbc:	108000a0 	cmpeqi	r2,r2,2
   91cc0:	1000051e 	bne	r2,zero,91cd8 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
   91cc4:	e0fffe17 	ldw	r3,-8(fp)
   91cc8:	00800044 	movi	r2,1
   91ccc:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   91cd0:	e03fff15 	stw	zero,-4(fp)
   91cd4:	00003306 	br	91da4 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91cd8:	0005303a 	rdctl	r2,status
   91cdc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91ce0:	e0fff917 	ldw	r3,-28(fp)
   91ce4:	00bfff84 	movi	r2,-2
   91ce8:	1884703a 	and	r2,r3,r2
   91cec:	1001703a 	wrctl	status,r2
  
  return context;
   91cf0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   91cf4:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   91cf8:	e0bffd17 	ldw	r2,-12(fp)
   91cfc:	10800117 	ldw	r2,4(r2)
   91d00:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   91d04:	e0bffb17 	ldw	r2,-20(fp)
   91d08:	1080058b 	ldhu	r2,22(r2)
   91d0c:	10bfffcc 	andi	r2,r2,65535
   91d10:	1005003a 	cmpeq	r2,r2,zero
   91d14:	1000191e 	bne	r2,zero,91d7c <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   91d18:	e0bffb17 	ldw	r2,-20(fp)
   91d1c:	10c00417 	ldw	r3,16(r2)
   91d20:	18800017 	ldw	r2,0(r3)
   91d24:	e0bffc15 	stw	r2,-16(fp)
   91d28:	18c00104 	addi	r3,r3,4
   91d2c:	e0bffb17 	ldw	r2,-20(fp)
   91d30:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   91d34:	e0bffb17 	ldw	r2,-20(fp)
   91d38:	1080058b 	ldhu	r2,22(r2)
   91d3c:	10bfffc4 	addi	r2,r2,-1
   91d40:	1007883a 	mov	r3,r2
   91d44:	e0bffb17 	ldw	r2,-20(fp)
   91d48:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   91d4c:	e0bffb17 	ldw	r2,-20(fp)
   91d50:	10c00417 	ldw	r3,16(r2)
   91d54:	e0bffb17 	ldw	r2,-20(fp)
   91d58:	10800217 	ldw	r2,8(r2)
   91d5c:	1880041e 	bne	r3,r2,91d70 <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
   91d60:	e0bffb17 	ldw	r2,-20(fp)
   91d64:	10c00117 	ldw	r3,4(r2)
   91d68:	e0bffb17 	ldw	r2,-20(fp)
   91d6c:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   91d70:	e0bffe17 	ldw	r2,-8(fp)
   91d74:	10000005 	stb	zero,0(r2)
   91d78:	00000406 	br	91d8c <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   91d7c:	e0fffe17 	ldw	r3,-8(fp)
   91d80:	008007c4 	movi	r2,31
   91d84:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   91d88:	e03ffc15 	stw	zero,-16(fp)
   91d8c:	e0bffa17 	ldw	r2,-24(fp)
   91d90:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91d94:	e0bff817 	ldw	r2,-32(fp)
   91d98:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   91d9c:	e0bffc17 	ldw	r2,-16(fp)
   91da0:	e0bfff15 	stw	r2,-4(fp)
   91da4:	e0bfff17 	ldw	r2,-4(fp)
}
   91da8:	e037883a 	mov	sp,fp
   91dac:	df000017 	ldw	fp,0(sp)
   91db0:	dec00104 	addi	sp,sp,4
   91db4:	f800283a 	ret

00091db8 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   91db8:	defff304 	addi	sp,sp,-52
   91dbc:	dfc00c15 	stw	ra,48(sp)
   91dc0:	df000b15 	stw	fp,44(sp)
   91dc4:	df000b04 	addi	fp,sp,44
   91dc8:	e13ffd15 	stw	r4,-12(fp)
   91dcc:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   91dd0:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   91dd4:	008002b4 	movhi	r2,10
   91dd8:	10b3d404 	addi	r2,r2,-12464
   91ddc:	10800003 	ldbu	r2,0(r2)
   91de0:	10803fcc 	andi	r2,r2,255
   91de4:	1005003a 	cmpeq	r2,r2,zero
   91de8:	1000021e 	bne	r2,zero,91df4 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   91dec:	e03fff15 	stw	zero,-4(fp)
   91df0:	00007006 	br	91fb4 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91df4:	0005303a 	rdctl	r2,status
   91df8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91dfc:	e0fff917 	ldw	r3,-28(fp)
   91e00:	00bfff84 	movi	r2,-2
   91e04:	1884703a 	and	r2,r3,r2
   91e08:	1001703a 	wrctl	status,r2
  
  return context;
   91e0c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   91e10:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   91e14:	008002b4 	movhi	r2,10
   91e18:	10b3d304 	addi	r2,r2,-12468
   91e1c:	10800017 	ldw	r2,0(r2)
   91e20:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   91e24:	008002b4 	movhi	r2,10
   91e28:	10b3d304 	addi	r2,r2,-12468
   91e2c:	10800017 	ldw	r2,0(r2)
   91e30:	1005003a 	cmpeq	r2,r2,zero
   91e34:	1000081e 	bne	r2,zero,91e58 <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   91e38:	008002b4 	movhi	r2,10
   91e3c:	10b3d304 	addi	r2,r2,-12468
   91e40:	10800017 	ldw	r2,0(r2)
   91e44:	10800117 	ldw	r2,4(r2)
   91e48:	1007883a 	mov	r3,r2
   91e4c:	008002b4 	movhi	r2,10
   91e50:	10b3d304 	addi	r2,r2,-12468
   91e54:	10c00015 	stw	r3,0(r2)
   91e58:	e0bffa17 	ldw	r2,-24(fp)
   91e5c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91e60:	e0bff817 	ldw	r2,-32(fp)
   91e64:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   91e68:	e0bffc17 	ldw	r2,-16(fp)
   91e6c:	1005003a 	cmpeq	r2,r2,zero
   91e70:	10004e1e 	bne	r2,zero,91fac <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91e74:	0005303a 	rdctl	r2,status
   91e78:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91e7c:	e0fff717 	ldw	r3,-36(fp)
   91e80:	00bfff84 	movi	r2,-2
   91e84:	1884703a 	and	r2,r3,r2
   91e88:	1001703a 	wrctl	status,r2
  
  return context;
   91e8c:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
   91e90:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   91e94:	008002b4 	movhi	r2,10
   91e98:	10b3d104 	addi	r2,r2,-12476
   91e9c:	10800017 	ldw	r2,0(r2)
   91ea0:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   91ea4:	e0bffb17 	ldw	r2,-20(fp)
   91ea8:	1005003a 	cmpeq	r2,r2,zero
   91eac:	1000311e 	bne	r2,zero,91f74 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   91eb0:	008002b4 	movhi	r2,10
   91eb4:	10b3d104 	addi	r2,r2,-12476
   91eb8:	10800017 	ldw	r2,0(r2)
   91ebc:	10c00017 	ldw	r3,0(r2)
   91ec0:	008002b4 	movhi	r2,10
   91ec4:	10b3d104 	addi	r2,r2,-12476
   91ec8:	10c00015 	stw	r3,0(r2)
   91ecc:	e0bffa17 	ldw	r2,-24(fp)
   91ed0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91ed4:	e0bff617 	ldw	r2,-40(fp)
   91ed8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   91edc:	e0fffb17 	ldw	r3,-20(fp)
   91ee0:	e0bffd17 	ldw	r2,-12(fp)
   91ee4:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
   91ee8:	e0bffe0b 	ldhu	r2,-8(fp)
   91eec:	1085883a 	add	r2,r2,r2
   91ef0:	1085883a 	add	r2,r2,r2
   91ef4:	1007883a 	mov	r3,r2
   91ef8:	e0bffd17 	ldw	r2,-12(fp)
   91efc:	1887883a 	add	r3,r3,r2
   91f00:	e0bffb17 	ldw	r2,-20(fp)
   91f04:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   91f08:	e0fffb17 	ldw	r3,-20(fp)
   91f0c:	e0bffd17 	ldw	r2,-12(fp)
   91f10:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
   91f14:	e0fffb17 	ldw	r3,-20(fp)
   91f18:	e0bffd17 	ldw	r2,-12(fp)
   91f1c:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
   91f20:	e0fffb17 	ldw	r3,-20(fp)
   91f24:	e0bffe0b 	ldhu	r2,-8(fp)
   91f28:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
   91f2c:	e0bffb17 	ldw	r2,-20(fp)
   91f30:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   91f34:	e0fffc17 	ldw	r3,-16(fp)
   91f38:	00800084 	movi	r2,2
   91f3c:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
   91f40:	e0bffc17 	ldw	r2,-16(fp)
   91f44:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   91f48:	e0fffc17 	ldw	r3,-16(fp)
   91f4c:	e0bffb17 	ldw	r2,-20(fp)
   91f50:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   91f54:	e0fffc17 	ldw	r3,-16(fp)
   91f58:	00800fc4 	movi	r2,63
   91f5c:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   91f60:	e0bffc17 	ldw	r2,-16(fp)
   91f64:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   91f68:	e13ffc17 	ldw	r4,-16(fp)
   91f6c:	008ee1c0 	call	8ee1c <OS_EventWaitListInit>
   91f70:	00000e06 	br	91fac <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   91f74:	008002b4 	movhi	r2,10
   91f78:	10b3d304 	addi	r2,r2,-12468
   91f7c:	10c00017 	ldw	r3,0(r2)
   91f80:	e0bffc17 	ldw	r2,-16(fp)
   91f84:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   91f88:	00c002b4 	movhi	r3,10
   91f8c:	18f3d304 	addi	r3,r3,-12468
   91f90:	e0bffc17 	ldw	r2,-16(fp)
   91f94:	18800015 	stw	r2,0(r3)
   91f98:	e0bffa17 	ldw	r2,-24(fp)
   91f9c:	e0bff515 	stw	r2,-44(fp)
   91fa0:	e0bff517 	ldw	r2,-44(fp)
   91fa4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   91fa8:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
   91fac:	e0bffc17 	ldw	r2,-16(fp)
   91fb0:	e0bfff15 	stw	r2,-4(fp)
   91fb4:	e0bfff17 	ldw	r2,-4(fp)
}
   91fb8:	e037883a 	mov	sp,fp
   91fbc:	dfc00117 	ldw	ra,4(sp)
   91fc0:	df000017 	ldw	fp,0(sp)
   91fc4:	dec00204 	addi	sp,sp,8
   91fc8:	f800283a 	ret

00091fcc <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   91fcc:	defff004 	addi	sp,sp,-64
   91fd0:	dfc00f15 	stw	ra,60(sp)
   91fd4:	df000e15 	stw	fp,56(sp)
   91fd8:	df000e04 	addi	fp,sp,56
   91fdc:	e13ffb15 	stw	r4,-20(fp)
   91fe0:	e1bffd15 	stw	r6,-12(fp)
   91fe4:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   91fe8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   91fec:	e0bffd17 	ldw	r2,-12(fp)
   91ff0:	1004c03a 	cmpne	r2,r2,zero
   91ff4:	1000031e 	bne	r2,zero,92004 <OSQDel+0x38>
        return (pevent);
   91ff8:	e0bffb17 	ldw	r2,-20(fp)
   91ffc:	e0bfff15 	stw	r2,-4(fp)
   92000:	0000ac06 	br	922b4 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   92004:	e0bffb17 	ldw	r2,-20(fp)
   92008:	1004c03a 	cmpne	r2,r2,zero
   9200c:	1000061e 	bne	r2,zero,92028 <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
   92010:	e0fffd17 	ldw	r3,-12(fp)
   92014:	00800104 	movi	r2,4
   92018:	18800005 	stb	r2,0(r3)
        return (pevent);
   9201c:	e0fffb17 	ldw	r3,-20(fp)
   92020:	e0ffff15 	stw	r3,-4(fp)
   92024:	0000a306 	br	922b4 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   92028:	e0bffb17 	ldw	r2,-20(fp)
   9202c:	10800003 	ldbu	r2,0(r2)
   92030:	10803fcc 	andi	r2,r2,255
   92034:	108000a0 	cmpeqi	r2,r2,2
   92038:	1000061e 	bne	r2,zero,92054 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
   9203c:	e0fffd17 	ldw	r3,-12(fp)
   92040:	00800044 	movi	r2,1
   92044:	18800005 	stb	r2,0(r3)
        return (pevent);
   92048:	e0bffb17 	ldw	r2,-20(fp)
   9204c:	e0bfff15 	stw	r2,-4(fp)
   92050:	00009806 	br	922b4 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   92054:	008002b4 	movhi	r2,10
   92058:	10b3d404 	addi	r2,r2,-12464
   9205c:	10800003 	ldbu	r2,0(r2)
   92060:	10803fcc 	andi	r2,r2,255
   92064:	1005003a 	cmpeq	r2,r2,zero
   92068:	1000061e 	bne	r2,zero,92084 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   9206c:	e0fffd17 	ldw	r3,-12(fp)
   92070:	008003c4 	movi	r2,15
   92074:	18800005 	stb	r2,0(r3)
        return (pevent);
   92078:	e0fffb17 	ldw	r3,-20(fp)
   9207c:	e0ffff15 	stw	r3,-4(fp)
   92080:	00008c06 	br	922b4 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92084:	0005303a 	rdctl	r2,status
   92088:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9208c:	e0fff617 	ldw	r3,-40(fp)
   92090:	00bfff84 	movi	r2,-2
   92094:	1884703a 	and	r2,r3,r2
   92098:	1001703a 	wrctl	status,r2
  
  return context;
   9209c:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
   920a0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   920a4:	e0bffb17 	ldw	r2,-20(fp)
   920a8:	10800283 	ldbu	r2,10(r2)
   920ac:	10803fcc 	andi	r2,r2,255
   920b0:	1005003a 	cmpeq	r2,r2,zero
   920b4:	1000031e 	bne	r2,zero,920c4 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   920b8:	00800044 	movi	r2,1
   920bc:	e0bffa05 	stb	r2,-24(fp)
   920c0:	00000106 	br	920c8 <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   920c4:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
   920c8:	e0bffc03 	ldbu	r2,-16(fp)
   920cc:	e0bffe15 	stw	r2,-8(fp)
   920d0:	e0fffe17 	ldw	r3,-8(fp)
   920d4:	1805003a 	cmpeq	r2,r3,zero
   920d8:	1000041e 	bne	r2,zero,920ec <OSQDel+0x120>
   920dc:	e0fffe17 	ldw	r3,-8(fp)
   920e0:	18800060 	cmpeqi	r2,r3,1
   920e4:	1000391e 	bne	r2,zero,921cc <OSQDel+0x200>
   920e8:	00006706 	br	92288 <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   920ec:	e0bffa03 	ldbu	r2,-24(fp)
   920f0:	1004c03a 	cmpne	r2,r2,zero
   920f4:	1000261e 	bne	r2,zero,92190 <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   920f8:	e0fffb17 	ldw	r3,-20(fp)
   920fc:	00800fc4 	movi	r2,63
   92100:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   92104:	e0bffb17 	ldw	r2,-20(fp)
   92108:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   9210c:	e0bffb17 	ldw	r2,-20(fp)
   92110:	10800117 	ldw	r2,4(r2)
   92114:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   92118:	008002b4 	movhi	r2,10
   9211c:	10b3d104 	addi	r2,r2,-12476
   92120:	10c00017 	ldw	r3,0(r2)
   92124:	e0bff817 	ldw	r2,-32(fp)
   92128:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   9212c:	00c002b4 	movhi	r3,10
   92130:	18f3d104 	addi	r3,r3,-12476
   92134:	e0bff817 	ldw	r2,-32(fp)
   92138:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   9213c:	e0bffb17 	ldw	r2,-20(fp)
   92140:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   92144:	008002b4 	movhi	r2,10
   92148:	10b3d304 	addi	r2,r2,-12468
   9214c:	10c00017 	ldw	r3,0(r2)
   92150:	e0bffb17 	ldw	r2,-20(fp)
   92154:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   92158:	e0bffb17 	ldw	r2,-20(fp)
   9215c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   92160:	00c002b4 	movhi	r3,10
   92164:	18f3d304 	addi	r3,r3,-12468
   92168:	e0bffb17 	ldw	r2,-20(fp)
   9216c:	18800015 	stw	r2,0(r3)
   92170:	e0bff717 	ldw	r2,-36(fp)
   92174:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92178:	e0bff517 	ldw	r2,-44(fp)
   9217c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   92180:	e0bffd17 	ldw	r2,-12(fp)
   92184:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   92188:	e03ff915 	stw	zero,-28(fp)
   9218c:	00004706 	br	922ac <OSQDel+0x2e0>
   92190:	e0bff717 	ldw	r2,-36(fp)
   92194:	e0bff415 	stw	r2,-48(fp)
   92198:	e0bff417 	ldw	r2,-48(fp)
   9219c:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   921a0:	e0fffd17 	ldw	r3,-12(fp)
   921a4:	00801244 	movi	r2,73
   921a8:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
   921ac:	e0bffb17 	ldw	r2,-20(fp)
   921b0:	e0bff915 	stw	r2,-28(fp)
             }
             break;
   921b4:	00003d06 	br	922ac <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   921b8:	e13ffb17 	ldw	r4,-20(fp)
   921bc:	000b883a 	mov	r5,zero
   921c0:	01800104 	movi	r6,4
   921c4:	000f883a 	mov	r7,zero
   921c8:	008e8680 	call	8e868 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   921cc:	e0bffb17 	ldw	r2,-20(fp)
   921d0:	10800283 	ldbu	r2,10(r2)
   921d4:	10803fcc 	andi	r2,r2,255
   921d8:	1004c03a 	cmpne	r2,r2,zero
   921dc:	103ff61e 	bne	r2,zero,921b8 <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   921e0:	e0fffb17 	ldw	r3,-20(fp)
   921e4:	00800fc4 	movi	r2,63
   921e8:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   921ec:	e0bffb17 	ldw	r2,-20(fp)
   921f0:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   921f4:	e0bffb17 	ldw	r2,-20(fp)
   921f8:	10800117 	ldw	r2,4(r2)
   921fc:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   92200:	008002b4 	movhi	r2,10
   92204:	10b3d104 	addi	r2,r2,-12476
   92208:	10c00017 	ldw	r3,0(r2)
   9220c:	e0bff817 	ldw	r2,-32(fp)
   92210:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   92214:	00c002b4 	movhi	r3,10
   92218:	18f3d104 	addi	r3,r3,-12476
   9221c:	e0bff817 	ldw	r2,-32(fp)
   92220:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   92224:	e0bffb17 	ldw	r2,-20(fp)
   92228:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   9222c:	008002b4 	movhi	r2,10
   92230:	10b3d304 	addi	r2,r2,-12468
   92234:	10c00017 	ldw	r3,0(r2)
   92238:	e0bffb17 	ldw	r2,-20(fp)
   9223c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   92240:	e0bffb17 	ldw	r2,-20(fp)
   92244:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   92248:	00c002b4 	movhi	r3,10
   9224c:	18f3d304 	addi	r3,r3,-12468
   92250:	e0bffb17 	ldw	r2,-20(fp)
   92254:	18800015 	stw	r2,0(r3)
   92258:	e0bff717 	ldw	r2,-36(fp)
   9225c:	e0bff315 	stw	r2,-52(fp)
   92260:	e0bff317 	ldw	r2,-52(fp)
   92264:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   92268:	e0bffa03 	ldbu	r2,-24(fp)
   9226c:	10800058 	cmpnei	r2,r2,1
   92270:	1000011e 	bne	r2,zero,92278 <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   92274:	008f2a80 	call	8f2a8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   92278:	e0bffd17 	ldw	r2,-12(fp)
   9227c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   92280:	e03ff915 	stw	zero,-28(fp)
             break;
   92284:	00000906 	br	922ac <OSQDel+0x2e0>
   92288:	e0bff717 	ldw	r2,-36(fp)
   9228c:	e0bff215 	stw	r2,-56(fp)
   92290:	e0bff217 	ldw	r2,-56(fp)
   92294:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   92298:	e0fffd17 	ldw	r3,-12(fp)
   9229c:	008001c4 	movi	r2,7
   922a0:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
   922a4:	e0bffb17 	ldw	r2,-20(fp)
   922a8:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
   922ac:	e0bff917 	ldw	r2,-28(fp)
   922b0:	e0bfff15 	stw	r2,-4(fp)
   922b4:	e0bfff17 	ldw	r2,-4(fp)
}
   922b8:	e037883a 	mov	sp,fp
   922bc:	dfc00117 	ldw	ra,4(sp)
   922c0:	df000017 	ldw	fp,0(sp)
   922c4:	dec00204 	addi	sp,sp,8
   922c8:	f800283a 	ret

000922cc <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   922cc:	defff904 	addi	sp,sp,-28
   922d0:	df000615 	stw	fp,24(sp)
   922d4:	df000604 	addi	fp,sp,24
   922d8:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   922dc:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   922e0:	e0bffe17 	ldw	r2,-8(fp)
   922e4:	1004c03a 	cmpne	r2,r2,zero
   922e8:	1000031e 	bne	r2,zero,922f8 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
   922ec:	00800104 	movi	r2,4
   922f0:	e0bfff15 	stw	r2,-4(fp)
   922f4:	00002206 	br	92380 <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   922f8:	e0bffe17 	ldw	r2,-8(fp)
   922fc:	10800003 	ldbu	r2,0(r2)
   92300:	10803fcc 	andi	r2,r2,255
   92304:	108000a0 	cmpeqi	r2,r2,2
   92308:	1000031e 	bne	r2,zero,92318 <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
   9230c:	00800044 	movi	r2,1
   92310:	e0bfff15 	stw	r2,-4(fp)
   92314:	00001a06 	br	92380 <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92318:	0005303a 	rdctl	r2,status
   9231c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92320:	e0fffb17 	ldw	r3,-20(fp)
   92324:	00bfff84 	movi	r2,-2
   92328:	1884703a 	and	r2,r3,r2
   9232c:	1001703a 	wrctl	status,r2
  
  return context;
   92330:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   92334:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   92338:	e0bffe17 	ldw	r2,-8(fp)
   9233c:	10800117 	ldw	r2,4(r2)
   92340:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
   92344:	e0bffd17 	ldw	r2,-12(fp)
   92348:	10c00117 	ldw	r3,4(r2)
   9234c:	e0bffd17 	ldw	r2,-12(fp)
   92350:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   92354:	e0bffd17 	ldw	r2,-12(fp)
   92358:	10c00117 	ldw	r3,4(r2)
   9235c:	e0bffd17 	ldw	r2,-12(fp)
   92360:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   92364:	e0bffd17 	ldw	r2,-12(fp)
   92368:	1000058d 	sth	zero,22(r2)
   9236c:	e0bffc17 	ldw	r2,-16(fp)
   92370:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92374:	e0bffa17 	ldw	r2,-24(fp)
   92378:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   9237c:	e03fff15 	stw	zero,-4(fp)
   92380:	e0bfff17 	ldw	r2,-4(fp)
}
   92384:	e037883a 	mov	sp,fp
   92388:	df000017 	ldw	fp,0(sp)
   9238c:	dec00104 	addi	sp,sp,4
   92390:	f800283a 	ret

00092394 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   92394:	defff104 	addi	sp,sp,-60
   92398:	dfc00e15 	stw	ra,56(sp)
   9239c:	df000d15 	stw	fp,52(sp)
   923a0:	df000d04 	addi	fp,sp,52
   923a4:	e13ffb15 	stw	r4,-20(fp)
   923a8:	e1bffd15 	stw	r6,-12(fp)
   923ac:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   923b0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   923b4:	e0bffd17 	ldw	r2,-12(fp)
   923b8:	1004c03a 	cmpne	r2,r2,zero
   923bc:	1000021e 	bne	r2,zero,923c8 <OSQPend+0x34>
        return ((void *)0);
   923c0:	e03fff15 	stw	zero,-4(fp)
   923c4:	0000b506 	br	9269c <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   923c8:	e0bffb17 	ldw	r2,-20(fp)
   923cc:	1004c03a 	cmpne	r2,r2,zero
   923d0:	1000051e 	bne	r2,zero,923e8 <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
   923d4:	e0fffd17 	ldw	r3,-12(fp)
   923d8:	00800104 	movi	r2,4
   923dc:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   923e0:	e03fff15 	stw	zero,-4(fp)
   923e4:	0000ad06 	br	9269c <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   923e8:	e0bffb17 	ldw	r2,-20(fp)
   923ec:	10800003 	ldbu	r2,0(r2)
   923f0:	10803fcc 	andi	r2,r2,255
   923f4:	108000a0 	cmpeqi	r2,r2,2
   923f8:	1000051e 	bne	r2,zero,92410 <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   923fc:	e0fffd17 	ldw	r3,-12(fp)
   92400:	00800044 	movi	r2,1
   92404:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   92408:	e03fff15 	stw	zero,-4(fp)
   9240c:	0000a306 	br	9269c <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   92410:	008002b4 	movhi	r2,10
   92414:	10b3d404 	addi	r2,r2,-12464
   92418:	10800003 	ldbu	r2,0(r2)
   9241c:	10803fcc 	andi	r2,r2,255
   92420:	1005003a 	cmpeq	r2,r2,zero
   92424:	1000051e 	bne	r2,zero,9243c <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   92428:	e0fffd17 	ldw	r3,-12(fp)
   9242c:	00800084 	movi	r2,2
   92430:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   92434:	e03fff15 	stw	zero,-4(fp)
   92438:	00009806 	br	9269c <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   9243c:	008002b4 	movhi	r2,10
   92440:	10b3c604 	addi	r2,r2,-12520
   92444:	10800003 	ldbu	r2,0(r2)
   92448:	10803fcc 	andi	r2,r2,255
   9244c:	1005003a 	cmpeq	r2,r2,zero
   92450:	1000051e 	bne	r2,zero,92468 <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   92454:	e0fffd17 	ldw	r3,-12(fp)
   92458:	00800344 	movi	r2,13
   9245c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   92460:	e03fff15 	stw	zero,-4(fp)
   92464:	00008d06 	br	9269c <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92468:	0005303a 	rdctl	r2,status
   9246c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92470:	e0fff717 	ldw	r3,-36(fp)
   92474:	00bfff84 	movi	r2,-2
   92478:	1884703a 	and	r2,r3,r2
   9247c:	1001703a 	wrctl	status,r2
  
  return context;
   92480:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   92484:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   92488:	e0bffb17 	ldw	r2,-20(fp)
   9248c:	10800117 	ldw	r2,4(r2)
   92490:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   92494:	e0bff917 	ldw	r2,-28(fp)
   92498:	1080058b 	ldhu	r2,22(r2)
   9249c:	10bfffcc 	andi	r2,r2,65535
   924a0:	1005003a 	cmpeq	r2,r2,zero
   924a4:	10001f1e 	bne	r2,zero,92524 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   924a8:	e0bff917 	ldw	r2,-28(fp)
   924ac:	10c00417 	ldw	r3,16(r2)
   924b0:	18800017 	ldw	r2,0(r3)
   924b4:	e0bffa15 	stw	r2,-24(fp)
   924b8:	18c00104 	addi	r3,r3,4
   924bc:	e0bff917 	ldw	r2,-28(fp)
   924c0:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   924c4:	e0bff917 	ldw	r2,-28(fp)
   924c8:	1080058b 	ldhu	r2,22(r2)
   924cc:	10bfffc4 	addi	r2,r2,-1
   924d0:	1007883a 	mov	r3,r2
   924d4:	e0bff917 	ldw	r2,-28(fp)
   924d8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   924dc:	e0bff917 	ldw	r2,-28(fp)
   924e0:	10c00417 	ldw	r3,16(r2)
   924e4:	e0bff917 	ldw	r2,-28(fp)
   924e8:	10800217 	ldw	r2,8(r2)
   924ec:	1880041e 	bne	r3,r2,92500 <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
   924f0:	e0bff917 	ldw	r2,-28(fp)
   924f4:	10c00117 	ldw	r3,4(r2)
   924f8:	e0bff917 	ldw	r2,-28(fp)
   924fc:	10c00415 	stw	r3,16(r2)
   92500:	e0bff817 	ldw	r2,-32(fp)
   92504:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92508:	e0bff617 	ldw	r2,-40(fp)
   9250c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   92510:	e0bffd17 	ldw	r2,-12(fp)
   92514:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   92518:	e0bffa17 	ldw	r2,-24(fp)
   9251c:	e0bfff15 	stw	r2,-4(fp)
   92520:	00005e06 	br	9269c <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   92524:	008002b4 	movhi	r2,10
   92528:	10b3d504 	addi	r2,r2,-12460
   9252c:	10c00017 	ldw	r3,0(r2)
   92530:	008002b4 	movhi	r2,10
   92534:	10b3d504 	addi	r2,r2,-12460
   92538:	10800017 	ldw	r2,0(r2)
   9253c:	10800c03 	ldbu	r2,48(r2)
   92540:	10800114 	ori	r2,r2,4
   92544:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   92548:	008002b4 	movhi	r2,10
   9254c:	10b3d504 	addi	r2,r2,-12460
   92550:	10800017 	ldw	r2,0(r2)
   92554:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   92558:	008002b4 	movhi	r2,10
   9255c:	10b3d504 	addi	r2,r2,-12460
   92560:	10c00017 	ldw	r3,0(r2)
   92564:	e0bffc0b 	ldhu	r2,-16(fp)
   92568:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   9256c:	e13ffb17 	ldw	r4,-20(fp)
   92570:	008e9fc0 	call	8e9fc <OS_EventTaskWait>
   92574:	e0bff817 	ldw	r2,-32(fp)
   92578:	e0bff515 	stw	r2,-44(fp)
   9257c:	e0bff517 	ldw	r2,-44(fp)
   92580:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   92584:	008f2a80 	call	8f2a8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92588:	0005303a 	rdctl	r2,status
   9258c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92590:	e0fff417 	ldw	r3,-48(fp)
   92594:	00bfff84 	movi	r2,-2
   92598:	1884703a 	and	r2,r3,r2
   9259c:	1001703a 	wrctl	status,r2
  
  return context;
   925a0:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
   925a4:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   925a8:	008002b4 	movhi	r2,10
   925ac:	10b3d504 	addi	r2,r2,-12460
   925b0:	10800017 	ldw	r2,0(r2)
   925b4:	10800c43 	ldbu	r2,49(r2)
   925b8:	10803fcc 	andi	r2,r2,255
   925bc:	e0bffe15 	stw	r2,-8(fp)
   925c0:	e0fffe17 	ldw	r3,-8(fp)
   925c4:	1805003a 	cmpeq	r2,r3,zero
   925c8:	1000041e 	bne	r2,zero,925dc <OSQPend+0x248>
   925cc:	e0fffe17 	ldw	r3,-8(fp)
   925d0:	188000a0 	cmpeqi	r2,r3,2
   925d4:	1000091e 	bne	r2,zero,925fc <OSQPend+0x268>
   925d8:	00000d06 	br	92610 <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   925dc:	008002b4 	movhi	r2,10
   925e0:	10b3d504 	addi	r2,r2,-12460
   925e4:	10800017 	ldw	r2,0(r2)
   925e8:	10800917 	ldw	r2,36(r2)
   925ec:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
   925f0:	e0bffd17 	ldw	r2,-12(fp)
   925f4:	10000005 	stb	zero,0(r2)
             break;
   925f8:	00000e06 	br	92634 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   925fc:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   92600:	e0fffd17 	ldw	r3,-12(fp)
   92604:	00800384 	movi	r2,14
   92608:	18800005 	stb	r2,0(r3)
             break;
   9260c:	00000906 	br	92634 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   92610:	008002b4 	movhi	r2,10
   92614:	10b3d504 	addi	r2,r2,-12460
   92618:	11000017 	ldw	r4,0(r2)
   9261c:	e17ffb17 	ldw	r5,-20(fp)
   92620:	008ec600 	call	8ec60 <OS_EventTaskRemove>
             pmsg = (void *)0;
   92624:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   92628:	e0fffd17 	ldw	r3,-12(fp)
   9262c:	00800284 	movi	r2,10
   92630:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   92634:	008002b4 	movhi	r2,10
   92638:	10b3d504 	addi	r2,r2,-12460
   9263c:	10800017 	ldw	r2,0(r2)
   92640:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   92644:	008002b4 	movhi	r2,10
   92648:	10b3d504 	addi	r2,r2,-12460
   9264c:	10800017 	ldw	r2,0(r2)
   92650:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   92654:	008002b4 	movhi	r2,10
   92658:	10b3d504 	addi	r2,r2,-12460
   9265c:	10800017 	ldw	r2,0(r2)
   92660:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   92664:	008002b4 	movhi	r2,10
   92668:	10b3d504 	addi	r2,r2,-12460
   9266c:	10800017 	ldw	r2,0(r2)
   92670:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   92674:	008002b4 	movhi	r2,10
   92678:	10b3d504 	addi	r2,r2,-12460
   9267c:	10800017 	ldw	r2,0(r2)
   92680:	10000915 	stw	zero,36(r2)
   92684:	e0bff817 	ldw	r2,-32(fp)
   92688:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9268c:	e0bff317 	ldw	r2,-52(fp)
   92690:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   92694:	e0bffa17 	ldw	r2,-24(fp)
   92698:	e0bfff15 	stw	r2,-4(fp)
   9269c:	e0bfff17 	ldw	r2,-4(fp)
}
   926a0:	e037883a 	mov	sp,fp
   926a4:	dfc00117 	ldw	ra,4(sp)
   926a8:	df000017 	ldw	fp,0(sp)
   926ac:	dec00204 	addi	sp,sp,8
   926b0:	f800283a 	ret

000926b4 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   926b4:	defff504 	addi	sp,sp,-44
   926b8:	dfc00a15 	stw	ra,40(sp)
   926bc:	df000915 	stw	fp,36(sp)
   926c0:	df000904 	addi	fp,sp,36
   926c4:	e13ffc15 	stw	r4,-16(fp)
   926c8:	e1bffe15 	stw	r6,-8(fp)
   926cc:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   926d0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   926d4:	e0bffe17 	ldw	r2,-8(fp)
   926d8:	1004c03a 	cmpne	r2,r2,zero
   926dc:	1000021e 	bne	r2,zero,926e8 <OSQPendAbort+0x34>
        return (0);
   926e0:	e03fff15 	stw	zero,-4(fp)
   926e4:	00004c06 	br	92818 <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   926e8:	e0bffc17 	ldw	r2,-16(fp)
   926ec:	1004c03a 	cmpne	r2,r2,zero
   926f0:	1000051e 	bne	r2,zero,92708 <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
   926f4:	e0fffe17 	ldw	r3,-8(fp)
   926f8:	00800104 	movi	r2,4
   926fc:	18800005 	stb	r2,0(r3)
        return (0);
   92700:	e03fff15 	stw	zero,-4(fp)
   92704:	00004406 	br	92818 <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   92708:	e0bffc17 	ldw	r2,-16(fp)
   9270c:	10800003 	ldbu	r2,0(r2)
   92710:	10803fcc 	andi	r2,r2,255
   92714:	108000a0 	cmpeqi	r2,r2,2
   92718:	1000051e 	bne	r2,zero,92730 <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   9271c:	e0fffe17 	ldw	r3,-8(fp)
   92720:	00800044 	movi	r2,1
   92724:	18800005 	stb	r2,0(r3)
        return (0);
   92728:	e03fff15 	stw	zero,-4(fp)
   9272c:	00003a06 	br	92818 <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92730:	0005303a 	rdctl	r2,status
   92734:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92738:	e0fff917 	ldw	r3,-28(fp)
   9273c:	00bfff84 	movi	r2,-2
   92740:	1884703a 	and	r2,r3,r2
   92744:	1001703a 	wrctl	status,r2
  
  return context;
   92748:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   9274c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   92750:	e0bffc17 	ldw	r2,-16(fp)
   92754:	10800283 	ldbu	r2,10(r2)
   92758:	10803fcc 	andi	r2,r2,255
   9275c:	1005003a 	cmpeq	r2,r2,zero
   92760:	1000261e 	bne	r2,zero,927fc <OSQPendAbort+0x148>
        nbr_tasks = 0;
   92764:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
   92768:	e0bffd03 	ldbu	r2,-12(fp)
   9276c:	10800060 	cmpeqi	r2,r2,1
   92770:	1000091e 	bne	r2,zero,92798 <OSQPendAbort+0xe4>
   92774:	00000e06 	br	927b0 <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   92778:	e13ffc17 	ldw	r4,-16(fp)
   9277c:	000b883a 	mov	r5,zero
   92780:	01800104 	movi	r6,4
   92784:	01c00084 	movi	r7,2
   92788:	008e8680 	call	8e868 <OS_EventTaskRdy>
                     nbr_tasks++;
   9278c:	e0bffb03 	ldbu	r2,-20(fp)
   92790:	10800044 	addi	r2,r2,1
   92794:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   92798:	e0bffc17 	ldw	r2,-16(fp)
   9279c:	10800283 	ldbu	r2,10(r2)
   927a0:	10803fcc 	andi	r2,r2,255
   927a4:	1004c03a 	cmpne	r2,r2,zero
   927a8:	103ff31e 	bne	r2,zero,92778 <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   927ac:	00000806 	br	927d0 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   927b0:	e13ffc17 	ldw	r4,-16(fp)
   927b4:	000b883a 	mov	r5,zero
   927b8:	01800104 	movi	r6,4
   927bc:	01c00084 	movi	r7,2
   927c0:	008e8680 	call	8e868 <OS_EventTaskRdy>
                 nbr_tasks++;
   927c4:	e0bffb03 	ldbu	r2,-20(fp)
   927c8:	10800044 	addi	r2,r2,1
   927cc:	e0bffb05 	stb	r2,-20(fp)
   927d0:	e0bffa17 	ldw	r2,-24(fp)
   927d4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   927d8:	e0bff817 	ldw	r2,-32(fp)
   927dc:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   927e0:	008f2a80 	call	8f2a8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   927e4:	e0fffe17 	ldw	r3,-8(fp)
   927e8:	00800384 	movi	r2,14
   927ec:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
   927f0:	e0bffb03 	ldbu	r2,-20(fp)
   927f4:	e0bfff15 	stw	r2,-4(fp)
   927f8:	00000706 	br	92818 <OSQPendAbort+0x164>
   927fc:	e0bffa17 	ldw	r2,-24(fp)
   92800:	e0bff715 	stw	r2,-36(fp)
   92804:	e0bff717 	ldw	r2,-36(fp)
   92808:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   9280c:	e0bffe17 	ldw	r2,-8(fp)
   92810:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   92814:	e03fff15 	stw	zero,-4(fp)
   92818:	e0bfff17 	ldw	r2,-4(fp)
}
   9281c:	e037883a 	mov	sp,fp
   92820:	dfc00117 	ldw	ra,4(sp)
   92824:	df000017 	ldw	fp,0(sp)
   92828:	dec00204 	addi	sp,sp,8
   9282c:	f800283a 	ret

00092830 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   92830:	defff504 	addi	sp,sp,-44
   92834:	dfc00a15 	stw	ra,40(sp)
   92838:	df000915 	stw	fp,36(sp)
   9283c:	df000904 	addi	fp,sp,36
   92840:	e13ffd15 	stw	r4,-12(fp)
   92844:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   92848:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   9284c:	e0bffd17 	ldw	r2,-12(fp)
   92850:	1004c03a 	cmpne	r2,r2,zero
   92854:	1000031e 	bne	r2,zero,92864 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
   92858:	00800104 	movi	r2,4
   9285c:	e0bfff15 	stw	r2,-4(fp)
   92860:	00004d06 	br	92998 <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   92864:	e0bffd17 	ldw	r2,-12(fp)
   92868:	10800003 	ldbu	r2,0(r2)
   9286c:	10803fcc 	andi	r2,r2,255
   92870:	108000a0 	cmpeqi	r2,r2,2
   92874:	1000031e 	bne	r2,zero,92884 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
   92878:	00800044 	movi	r2,1
   9287c:	e0bfff15 	stw	r2,-4(fp)
   92880:	00004506 	br	92998 <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92884:	0005303a 	rdctl	r2,status
   92888:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9288c:	e0fffa17 	ldw	r3,-24(fp)
   92890:	00bfff84 	movi	r2,-2
   92894:	1884703a 	and	r2,r3,r2
   92898:	1001703a 	wrctl	status,r2
  
  return context;
   9289c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   928a0:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   928a4:	e0bffd17 	ldw	r2,-12(fp)
   928a8:	10800283 	ldbu	r2,10(r2)
   928ac:	10803fcc 	andi	r2,r2,255
   928b0:	1005003a 	cmpeq	r2,r2,zero
   928b4:	10000c1e 	bne	r2,zero,928e8 <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   928b8:	e13ffd17 	ldw	r4,-12(fp)
   928bc:	e17ffe17 	ldw	r5,-8(fp)
   928c0:	01800104 	movi	r6,4
   928c4:	000f883a 	mov	r7,zero
   928c8:	008e8680 	call	8e868 <OS_EventTaskRdy>
   928cc:	e0bffb17 	ldw	r2,-20(fp)
   928d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   928d4:	e0bff917 	ldw	r2,-28(fp)
   928d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   928dc:	008f2a80 	call	8f2a8 <OS_Sched>
        return (OS_ERR_NONE);
   928e0:	e03fff15 	stw	zero,-4(fp)
   928e4:	00002c06 	br	92998 <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   928e8:	e0bffd17 	ldw	r2,-12(fp)
   928ec:	10800117 	ldw	r2,4(r2)
   928f0:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   928f4:	e0bffc17 	ldw	r2,-16(fp)
   928f8:	10c0058b 	ldhu	r3,22(r2)
   928fc:	e0bffc17 	ldw	r2,-16(fp)
   92900:	1080050b 	ldhu	r2,20(r2)
   92904:	18ffffcc 	andi	r3,r3,65535
   92908:	10bfffcc 	andi	r2,r2,65535
   9290c:	18800736 	bltu	r3,r2,9292c <OSQPost+0xfc>
   92910:	e0bffb17 	ldw	r2,-20(fp)
   92914:	e0bff815 	stw	r2,-32(fp)
   92918:	e0bff817 	ldw	r2,-32(fp)
   9291c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   92920:	00800784 	movi	r2,30
   92924:	e0bfff15 	stw	r2,-4(fp)
   92928:	00001b06 	br	92998 <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   9292c:	e0bffc17 	ldw	r2,-16(fp)
   92930:	10c00317 	ldw	r3,12(r2)
   92934:	e0bffe17 	ldw	r2,-8(fp)
   92938:	18800015 	stw	r2,0(r3)
   9293c:	18c00104 	addi	r3,r3,4
   92940:	e0bffc17 	ldw	r2,-16(fp)
   92944:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   92948:	e0bffc17 	ldw	r2,-16(fp)
   9294c:	1080058b 	ldhu	r2,22(r2)
   92950:	10800044 	addi	r2,r2,1
   92954:	1007883a 	mov	r3,r2
   92958:	e0bffc17 	ldw	r2,-16(fp)
   9295c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   92960:	e0bffc17 	ldw	r2,-16(fp)
   92964:	10c00317 	ldw	r3,12(r2)
   92968:	e0bffc17 	ldw	r2,-16(fp)
   9296c:	10800217 	ldw	r2,8(r2)
   92970:	1880041e 	bne	r3,r2,92984 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
   92974:	e0bffc17 	ldw	r2,-16(fp)
   92978:	10c00117 	ldw	r3,4(r2)
   9297c:	e0bffc17 	ldw	r2,-16(fp)
   92980:	10c00315 	stw	r3,12(r2)
   92984:	e0bffb17 	ldw	r2,-20(fp)
   92988:	e0bff715 	stw	r2,-36(fp)
   9298c:	e0bff717 	ldw	r2,-36(fp)
   92990:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   92994:	e03fff15 	stw	zero,-4(fp)
   92998:	e0bfff17 	ldw	r2,-4(fp)
}
   9299c:	e037883a 	mov	sp,fp
   929a0:	dfc00117 	ldw	ra,4(sp)
   929a4:	df000017 	ldw	fp,0(sp)
   929a8:	dec00204 	addi	sp,sp,8
   929ac:	f800283a 	ret

000929b0 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   929b0:	defff504 	addi	sp,sp,-44
   929b4:	dfc00a15 	stw	ra,40(sp)
   929b8:	df000915 	stw	fp,36(sp)
   929bc:	df000904 	addi	fp,sp,36
   929c0:	e13ffd15 	stw	r4,-12(fp)
   929c4:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   929c8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   929cc:	e0bffd17 	ldw	r2,-12(fp)
   929d0:	1004c03a 	cmpne	r2,r2,zero
   929d4:	1000031e 	bne	r2,zero,929e4 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
   929d8:	00800104 	movi	r2,4
   929dc:	e0bfff15 	stw	r2,-4(fp)
   929e0:	00004f06 	br	92b20 <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   929e4:	e0bffd17 	ldw	r2,-12(fp)
   929e8:	10800003 	ldbu	r2,0(r2)
   929ec:	10803fcc 	andi	r2,r2,255
   929f0:	108000a0 	cmpeqi	r2,r2,2
   929f4:	1000031e 	bne	r2,zero,92a04 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
   929f8:	00800044 	movi	r2,1
   929fc:	e0bfff15 	stw	r2,-4(fp)
   92a00:	00004706 	br	92b20 <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92a04:	0005303a 	rdctl	r2,status
   92a08:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92a0c:	e0fffa17 	ldw	r3,-24(fp)
   92a10:	00bfff84 	movi	r2,-2
   92a14:	1884703a 	and	r2,r3,r2
   92a18:	1001703a 	wrctl	status,r2
  
  return context;
   92a1c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   92a20:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   92a24:	e0bffd17 	ldw	r2,-12(fp)
   92a28:	10800283 	ldbu	r2,10(r2)
   92a2c:	10803fcc 	andi	r2,r2,255
   92a30:	1005003a 	cmpeq	r2,r2,zero
   92a34:	10000c1e 	bne	r2,zero,92a68 <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   92a38:	e13ffd17 	ldw	r4,-12(fp)
   92a3c:	e17ffe17 	ldw	r5,-8(fp)
   92a40:	01800104 	movi	r6,4
   92a44:	000f883a 	mov	r7,zero
   92a48:	008e8680 	call	8e868 <OS_EventTaskRdy>
   92a4c:	e0bffb17 	ldw	r2,-20(fp)
   92a50:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92a54:	e0bff917 	ldw	r2,-28(fp)
   92a58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   92a5c:	008f2a80 	call	8f2a8 <OS_Sched>
        return (OS_ERR_NONE);
   92a60:	e03fff15 	stw	zero,-4(fp)
   92a64:	00002e06 	br	92b20 <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   92a68:	e0bffd17 	ldw	r2,-12(fp)
   92a6c:	10800117 	ldw	r2,4(r2)
   92a70:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   92a74:	e0bffc17 	ldw	r2,-16(fp)
   92a78:	10c0058b 	ldhu	r3,22(r2)
   92a7c:	e0bffc17 	ldw	r2,-16(fp)
   92a80:	1080050b 	ldhu	r2,20(r2)
   92a84:	18ffffcc 	andi	r3,r3,65535
   92a88:	10bfffcc 	andi	r2,r2,65535
   92a8c:	18800736 	bltu	r3,r2,92aac <OSQPostFront+0xfc>
   92a90:	e0bffb17 	ldw	r2,-20(fp)
   92a94:	e0bff815 	stw	r2,-32(fp)
   92a98:	e0bff817 	ldw	r2,-32(fp)
   92a9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   92aa0:	00800784 	movi	r2,30
   92aa4:	e0bfff15 	stw	r2,-4(fp)
   92aa8:	00001d06 	br	92b20 <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   92aac:	e0bffc17 	ldw	r2,-16(fp)
   92ab0:	10c00417 	ldw	r3,16(r2)
   92ab4:	e0bffc17 	ldw	r2,-16(fp)
   92ab8:	10800117 	ldw	r2,4(r2)
   92abc:	1880041e 	bne	r3,r2,92ad0 <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
   92ac0:	e0bffc17 	ldw	r2,-16(fp)
   92ac4:	10c00217 	ldw	r3,8(r2)
   92ac8:	e0bffc17 	ldw	r2,-16(fp)
   92acc:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   92ad0:	e0bffc17 	ldw	r2,-16(fp)
   92ad4:	10800417 	ldw	r2,16(r2)
   92ad8:	10ffff04 	addi	r3,r2,-4
   92adc:	e0bffc17 	ldw	r2,-16(fp)
   92ae0:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   92ae4:	e0bffc17 	ldw	r2,-16(fp)
   92ae8:	10c00417 	ldw	r3,16(r2)
   92aec:	e0bffe17 	ldw	r2,-8(fp)
   92af0:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   92af4:	e0bffc17 	ldw	r2,-16(fp)
   92af8:	1080058b 	ldhu	r2,22(r2)
   92afc:	10800044 	addi	r2,r2,1
   92b00:	1007883a 	mov	r3,r2
   92b04:	e0bffc17 	ldw	r2,-16(fp)
   92b08:	10c0058d 	sth	r3,22(r2)
   92b0c:	e0bffb17 	ldw	r2,-20(fp)
   92b10:	e0bff715 	stw	r2,-36(fp)
   92b14:	e0bff717 	ldw	r2,-36(fp)
   92b18:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   92b1c:	e03fff15 	stw	zero,-4(fp)
   92b20:	e0bfff17 	ldw	r2,-4(fp)
}
   92b24:	e037883a 	mov	sp,fp
   92b28:	dfc00117 	ldw	ra,4(sp)
   92b2c:	df000017 	ldw	fp,0(sp)
   92b30:	dec00204 	addi	sp,sp,8
   92b34:	f800283a 	ret

00092b38 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   92b38:	defff404 	addi	sp,sp,-48
   92b3c:	dfc00b15 	stw	ra,44(sp)
   92b40:	df000a15 	stw	fp,40(sp)
   92b44:	df000a04 	addi	fp,sp,40
   92b48:	e13ffc15 	stw	r4,-16(fp)
   92b4c:	e17ffd15 	stw	r5,-12(fp)
   92b50:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   92b54:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   92b58:	e0bffc17 	ldw	r2,-16(fp)
   92b5c:	1004c03a 	cmpne	r2,r2,zero
   92b60:	1000031e 	bne	r2,zero,92b70 <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
   92b64:	00800104 	movi	r2,4
   92b68:	e0bfff15 	stw	r2,-4(fp)
   92b6c:	00007906 	br	92d54 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   92b70:	e0bffc17 	ldw	r2,-16(fp)
   92b74:	10800003 	ldbu	r2,0(r2)
   92b78:	10803fcc 	andi	r2,r2,255
   92b7c:	108000a0 	cmpeqi	r2,r2,2
   92b80:	1000031e 	bne	r2,zero,92b90 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
   92b84:	00800044 	movi	r2,1
   92b88:	e0bfff15 	stw	r2,-4(fp)
   92b8c:	00007106 	br	92d54 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92b90:	0005303a 	rdctl	r2,status
   92b94:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92b98:	e0fff917 	ldw	r3,-28(fp)
   92b9c:	00bfff84 	movi	r2,-2
   92ba0:	1884703a 	and	r2,r3,r2
   92ba4:	1001703a 	wrctl	status,r2
  
  return context;
   92ba8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   92bac:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   92bb0:	e0bffc17 	ldw	r2,-16(fp)
   92bb4:	10800283 	ldbu	r2,10(r2)
   92bb8:	10803fcc 	andi	r2,r2,255
   92bbc:	1005003a 	cmpeq	r2,r2,zero
   92bc0:	1000211e 	bne	r2,zero,92c48 <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   92bc4:	e0bffe03 	ldbu	r2,-8(fp)
   92bc8:	1080004c 	andi	r2,r2,1
   92bcc:	10803fcc 	andi	r2,r2,255
   92bd0:	1005003a 	cmpeq	r2,r2,zero
   92bd4:	10000c1e 	bne	r2,zero,92c08 <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   92bd8:	00000506 	br	92bf0 <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   92bdc:	e13ffc17 	ldw	r4,-16(fp)
   92be0:	e17ffd17 	ldw	r5,-12(fp)
   92be4:	01800104 	movi	r6,4
   92be8:	000f883a 	mov	r7,zero
   92bec:	008e8680 	call	8e868 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   92bf0:	e0bffc17 	ldw	r2,-16(fp)
   92bf4:	10800283 	ldbu	r2,10(r2)
   92bf8:	10803fcc 	andi	r2,r2,255
   92bfc:	1004c03a 	cmpne	r2,r2,zero
   92c00:	103ff61e 	bne	r2,zero,92bdc <OSQPostOpt+0xa4>
   92c04:	00000506 	br	92c1c <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   92c08:	e13ffc17 	ldw	r4,-16(fp)
   92c0c:	e17ffd17 	ldw	r5,-12(fp)
   92c10:	01800104 	movi	r6,4
   92c14:	000f883a 	mov	r7,zero
   92c18:	008e8680 	call	8e868 <OS_EventTaskRdy>
   92c1c:	e0bffa17 	ldw	r2,-24(fp)
   92c20:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92c24:	e0bff817 	ldw	r2,-32(fp)
   92c28:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   92c2c:	e0bffe03 	ldbu	r2,-8(fp)
   92c30:	1080010c 	andi	r2,r2,4
   92c34:	1004c03a 	cmpne	r2,r2,zero
   92c38:	1000011e 	bne	r2,zero,92c40 <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
   92c3c:	008f2a80 	call	8f2a8 <OS_Sched>
        }
        return (OS_ERR_NONE);
   92c40:	e03fff15 	stw	zero,-4(fp)
   92c44:	00004306 	br	92d54 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   92c48:	e0bffc17 	ldw	r2,-16(fp)
   92c4c:	10800117 	ldw	r2,4(r2)
   92c50:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   92c54:	e0bffb17 	ldw	r2,-20(fp)
   92c58:	10c0058b 	ldhu	r3,22(r2)
   92c5c:	e0bffb17 	ldw	r2,-20(fp)
   92c60:	1080050b 	ldhu	r2,20(r2)
   92c64:	18ffffcc 	andi	r3,r3,65535
   92c68:	10bfffcc 	andi	r2,r2,65535
   92c6c:	18800736 	bltu	r3,r2,92c8c <OSQPostOpt+0x154>
   92c70:	e0bffa17 	ldw	r2,-24(fp)
   92c74:	e0bff715 	stw	r2,-36(fp)
   92c78:	e0bff717 	ldw	r2,-36(fp)
   92c7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   92c80:	00800784 	movi	r2,30
   92c84:	e0bfff15 	stw	r2,-4(fp)
   92c88:	00003206 	br	92d54 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   92c8c:	e0bffe03 	ldbu	r2,-8(fp)
   92c90:	1080008c 	andi	r2,r2,2
   92c94:	1005003a 	cmpeq	r2,r2,zero
   92c98:	1000131e 	bne	r2,zero,92ce8 <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   92c9c:	e0bffb17 	ldw	r2,-20(fp)
   92ca0:	10c00417 	ldw	r3,16(r2)
   92ca4:	e0bffb17 	ldw	r2,-20(fp)
   92ca8:	10800117 	ldw	r2,4(r2)
   92cac:	1880041e 	bne	r3,r2,92cc0 <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   92cb0:	e0bffb17 	ldw	r2,-20(fp)
   92cb4:	10c00217 	ldw	r3,8(r2)
   92cb8:	e0bffb17 	ldw	r2,-20(fp)
   92cbc:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   92cc0:	e0bffb17 	ldw	r2,-20(fp)
   92cc4:	10800417 	ldw	r2,16(r2)
   92cc8:	10ffff04 	addi	r3,r2,-4
   92ccc:	e0bffb17 	ldw	r2,-20(fp)
   92cd0:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   92cd4:	e0bffb17 	ldw	r2,-20(fp)
   92cd8:	10c00417 	ldw	r3,16(r2)
   92cdc:	e0bffd17 	ldw	r2,-12(fp)
   92ce0:	18800015 	stw	r2,0(r3)
   92ce4:	00001006 	br	92d28 <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   92ce8:	e0bffb17 	ldw	r2,-20(fp)
   92cec:	10c00317 	ldw	r3,12(r2)
   92cf0:	e0bffd17 	ldw	r2,-12(fp)
   92cf4:	18800015 	stw	r2,0(r3)
   92cf8:	18c00104 	addi	r3,r3,4
   92cfc:	e0bffb17 	ldw	r2,-20(fp)
   92d00:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   92d04:	e0bffb17 	ldw	r2,-20(fp)
   92d08:	10c00317 	ldw	r3,12(r2)
   92d0c:	e0bffb17 	ldw	r2,-20(fp)
   92d10:	10800217 	ldw	r2,8(r2)
   92d14:	1880041e 	bne	r3,r2,92d28 <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
   92d18:	e0bffb17 	ldw	r2,-20(fp)
   92d1c:	10c00117 	ldw	r3,4(r2)
   92d20:	e0bffb17 	ldw	r2,-20(fp)
   92d24:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   92d28:	e0bffb17 	ldw	r2,-20(fp)
   92d2c:	1080058b 	ldhu	r2,22(r2)
   92d30:	10800044 	addi	r2,r2,1
   92d34:	1007883a 	mov	r3,r2
   92d38:	e0bffb17 	ldw	r2,-20(fp)
   92d3c:	10c0058d 	sth	r3,22(r2)
   92d40:	e0bffa17 	ldw	r2,-24(fp)
   92d44:	e0bff615 	stw	r2,-40(fp)
   92d48:	e0bff617 	ldw	r2,-40(fp)
   92d4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   92d50:	e03fff15 	stw	zero,-4(fp)
   92d54:	e0bfff17 	ldw	r2,-4(fp)
}
   92d58:	e037883a 	mov	sp,fp
   92d5c:	dfc00117 	ldw	ra,4(sp)
   92d60:	df000017 	ldw	fp,0(sp)
   92d64:	dec00204 	addi	sp,sp,8
   92d68:	f800283a 	ret

00092d6c <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   92d6c:	defff504 	addi	sp,sp,-44
   92d70:	df000a15 	stw	fp,40(sp)
   92d74:	df000a04 	addi	fp,sp,40
   92d78:	e13ffd15 	stw	r4,-12(fp)
   92d7c:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   92d80:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   92d84:	e0bffd17 	ldw	r2,-12(fp)
   92d88:	1004c03a 	cmpne	r2,r2,zero
   92d8c:	1000031e 	bne	r2,zero,92d9c <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
   92d90:	00800104 	movi	r2,4
   92d94:	e0bfff15 	stw	r2,-4(fp)
   92d98:	00004f06 	br	92ed8 <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   92d9c:	e0bffe17 	ldw	r2,-8(fp)
   92da0:	1004c03a 	cmpne	r2,r2,zero
   92da4:	1000031e 	bne	r2,zero,92db4 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
   92da8:	00800244 	movi	r2,9
   92dac:	e0bfff15 	stw	r2,-4(fp)
   92db0:	00004906 	br	92ed8 <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   92db4:	e0bffd17 	ldw	r2,-12(fp)
   92db8:	10800003 	ldbu	r2,0(r2)
   92dbc:	10803fcc 	andi	r2,r2,255
   92dc0:	108000a0 	cmpeqi	r2,r2,2
   92dc4:	1000031e 	bne	r2,zero,92dd4 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
   92dc8:	00800044 	movi	r2,1
   92dcc:	e0bfff15 	stw	r2,-4(fp)
   92dd0:	00004106 	br	92ed8 <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92dd4:	0005303a 	rdctl	r2,status
   92dd8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92ddc:	e0fff717 	ldw	r3,-36(fp)
   92de0:	00bfff84 	movi	r2,-2
   92de4:	1884703a 	and	r2,r3,r2
   92de8:	1001703a 	wrctl	status,r2
  
  return context;
   92dec:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   92df0:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   92df4:	e0bffd17 	ldw	r2,-12(fp)
   92df8:	10c00283 	ldbu	r3,10(r2)
   92dfc:	e0bffe17 	ldw	r2,-8(fp)
   92e00:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   92e04:	e0bffd17 	ldw	r2,-12(fp)
   92e08:	108002c4 	addi	r2,r2,11
   92e0c:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   92e10:	e0bffe17 	ldw	r2,-8(fp)
   92e14:	10800204 	addi	r2,r2,8
   92e18:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   92e1c:	e03ffb05 	stb	zero,-20(fp)
   92e20:	00000d06 	br	92e58 <OSQQuery+0xec>
        *pdest++ = *psrc++;
   92e24:	e0bffa17 	ldw	r2,-24(fp)
   92e28:	10c00003 	ldbu	r3,0(r2)
   92e2c:	e0bff917 	ldw	r2,-28(fp)
   92e30:	10c00005 	stb	r3,0(r2)
   92e34:	e0bff917 	ldw	r2,-28(fp)
   92e38:	10800044 	addi	r2,r2,1
   92e3c:	e0bff915 	stw	r2,-28(fp)
   92e40:	e0bffa17 	ldw	r2,-24(fp)
   92e44:	10800044 	addi	r2,r2,1
   92e48:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   92e4c:	e0bffb03 	ldbu	r2,-20(fp)
   92e50:	10800044 	addi	r2,r2,1
   92e54:	e0bffb05 	stb	r2,-20(fp)
   92e58:	e0bffb03 	ldbu	r2,-20(fp)
   92e5c:	108000f0 	cmpltui	r2,r2,3
   92e60:	103ff01e 	bne	r2,zero,92e24 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   92e64:	e0bffd17 	ldw	r2,-12(fp)
   92e68:	10800117 	ldw	r2,4(r2)
   92e6c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   92e70:	e0bffc17 	ldw	r2,-16(fp)
   92e74:	1080058b 	ldhu	r2,22(r2)
   92e78:	10bfffcc 	andi	r2,r2,65535
   92e7c:	1005003a 	cmpeq	r2,r2,zero
   92e80:	1000061e 	bne	r2,zero,92e9c <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   92e84:	e0bffc17 	ldw	r2,-16(fp)
   92e88:	10800417 	ldw	r2,16(r2)
   92e8c:	10c00017 	ldw	r3,0(r2)
   92e90:	e0bffe17 	ldw	r2,-8(fp)
   92e94:	10c00015 	stw	r3,0(r2)
   92e98:	00000206 	br	92ea4 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
   92e9c:	e0bffe17 	ldw	r2,-8(fp)
   92ea0:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   92ea4:	e0bffc17 	ldw	r2,-16(fp)
   92ea8:	10c0058b 	ldhu	r3,22(r2)
   92eac:	e0bffe17 	ldw	r2,-8(fp)
   92eb0:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   92eb4:	e0bffc17 	ldw	r2,-16(fp)
   92eb8:	10c0050b 	ldhu	r3,20(r2)
   92ebc:	e0bffe17 	ldw	r2,-8(fp)
   92ec0:	10c0018d 	sth	r3,6(r2)
   92ec4:	e0bff817 	ldw	r2,-32(fp)
   92ec8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92ecc:	e0bff617 	ldw	r2,-40(fp)
   92ed0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   92ed4:	e03fff15 	stw	zero,-4(fp)
   92ed8:	e0bfff17 	ldw	r2,-4(fp)
}
   92edc:	e037883a 	mov	sp,fp
   92ee0:	df000017 	ldw	fp,0(sp)
   92ee4:	dec00104 	addi	sp,sp,4
   92ee8:	f800283a 	ret

00092eec <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   92eec:	defffb04 	addi	sp,sp,-20
   92ef0:	dfc00415 	stw	ra,16(sp)
   92ef4:	df000315 	stw	fp,12(sp)
   92ef8:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   92efc:	010002f4 	movhi	r4,11
   92f00:	212a5904 	addi	r4,r4,-22172
   92f04:	01407804 	movi	r5,480
   92f08:	008f1e80 	call	8f1e8 <OS_MemClr>
    pq1 = &OSQTbl[0];
   92f0c:	008002f4 	movhi	r2,11
   92f10:	10aa5904 	addi	r2,r2,-22172
   92f14:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   92f18:	008002f4 	movhi	r2,11
   92f1c:	10aa5f04 	addi	r2,r2,-22148
   92f20:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   92f24:	e03fff0d 	sth	zero,-4(fp)
   92f28:	00000c06 	br	92f5c <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   92f2c:	e0fffe17 	ldw	r3,-8(fp)
   92f30:	e0bffd17 	ldw	r2,-12(fp)
   92f34:	18800015 	stw	r2,0(r3)
        pq1++;
   92f38:	e0bffe17 	ldw	r2,-8(fp)
   92f3c:	10800604 	addi	r2,r2,24
   92f40:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   92f44:	e0bffd17 	ldw	r2,-12(fp)
   92f48:	10800604 	addi	r2,r2,24
   92f4c:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   92f50:	e0bfff0b 	ldhu	r2,-4(fp)
   92f54:	10800044 	addi	r2,r2,1
   92f58:	e0bfff0d 	sth	r2,-4(fp)
   92f5c:	e0bfff0b 	ldhu	r2,-4(fp)
   92f60:	108004f0 	cmpltui	r2,r2,19
   92f64:	103ff11e 	bne	r2,zero,92f2c <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   92f68:	e0bffe17 	ldw	r2,-8(fp)
   92f6c:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   92f70:	00c002b4 	movhi	r3,10
   92f74:	18f3d104 	addi	r3,r3,-12476
   92f78:	008002f4 	movhi	r2,11
   92f7c:	10aa5904 	addi	r2,r2,-22172
   92f80:	18800015 	stw	r2,0(r3)
#endif
}
   92f84:	e037883a 	mov	sp,fp
   92f88:	dfc00117 	ldw	ra,4(sp)
   92f8c:	df000017 	ldw	fp,0(sp)
   92f90:	dec00204 	addi	sp,sp,8
   92f94:	f800283a 	ret

00092f98 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   92f98:	defff904 	addi	sp,sp,-28
   92f9c:	df000615 	stw	fp,24(sp)
   92fa0:	df000604 	addi	fp,sp,24
   92fa4:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   92fa8:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   92fac:	e0bffe17 	ldw	r2,-8(fp)
   92fb0:	1004c03a 	cmpne	r2,r2,zero
   92fb4:	1000021e 	bne	r2,zero,92fc0 <OSSemAccept+0x28>
        return (0);
   92fb8:	e03fff15 	stw	zero,-4(fp)
   92fbc:	00002106 	br	93044 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   92fc0:	e0bffe17 	ldw	r2,-8(fp)
   92fc4:	10800003 	ldbu	r2,0(r2)
   92fc8:	10803fcc 	andi	r2,r2,255
   92fcc:	108000e0 	cmpeqi	r2,r2,3
   92fd0:	1000021e 	bne	r2,zero,92fdc <OSSemAccept+0x44>
        return (0);
   92fd4:	e03fff15 	stw	zero,-4(fp)
   92fd8:	00001a06 	br	93044 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92fdc:	0005303a 	rdctl	r2,status
   92fe0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92fe4:	e0fffb17 	ldw	r3,-20(fp)
   92fe8:	00bfff84 	movi	r2,-2
   92fec:	1884703a 	and	r2,r3,r2
   92ff0:	1001703a 	wrctl	status,r2
  
  return context;
   92ff4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   92ff8:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
   92ffc:	e0bffe17 	ldw	r2,-8(fp)
   93000:	1080020b 	ldhu	r2,8(r2)
   93004:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   93008:	e0bffd0b 	ldhu	r2,-12(fp)
   9300c:	1005003a 	cmpeq	r2,r2,zero
   93010:	1000061e 	bne	r2,zero,9302c <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   93014:	e0bffe17 	ldw	r2,-8(fp)
   93018:	1080020b 	ldhu	r2,8(r2)
   9301c:	10bfffc4 	addi	r2,r2,-1
   93020:	1007883a 	mov	r3,r2
   93024:	e0bffe17 	ldw	r2,-8(fp)
   93028:	10c0020d 	sth	r3,8(r2)
   9302c:	e0bffc17 	ldw	r2,-16(fp)
   93030:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93034:	e0bffa17 	ldw	r2,-24(fp)
   93038:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   9303c:	e0bffd0b 	ldhu	r2,-12(fp)
   93040:	e0bfff15 	stw	r2,-4(fp)
   93044:	e0bfff17 	ldw	r2,-4(fp)
}
   93048:	e037883a 	mov	sp,fp
   9304c:	df000017 	ldw	fp,0(sp)
   93050:	dec00104 	addi	sp,sp,4
   93054:	f800283a 	ret

00093058 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   93058:	defff804 	addi	sp,sp,-32
   9305c:	dfc00715 	stw	ra,28(sp)
   93060:	df000615 	stw	fp,24(sp)
   93064:	df000604 	addi	fp,sp,24
   93068:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   9306c:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   93070:	008002b4 	movhi	r2,10
   93074:	10b3d404 	addi	r2,r2,-12464
   93078:	10800003 	ldbu	r2,0(r2)
   9307c:	10803fcc 	andi	r2,r2,255
   93080:	1005003a 	cmpeq	r2,r2,zero
   93084:	1000021e 	bne	r2,zero,93090 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   93088:	e03fff15 	stw	zero,-4(fp)
   9308c:	00003106 	br	93154 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93090:	0005303a 	rdctl	r2,status
   93094:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93098:	e0fffb17 	ldw	r3,-20(fp)
   9309c:	00bfff84 	movi	r2,-2
   930a0:	1884703a 	and	r2,r3,r2
   930a4:	1001703a 	wrctl	status,r2
  
  return context;
   930a8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   930ac:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   930b0:	008002b4 	movhi	r2,10
   930b4:	10b3d304 	addi	r2,r2,-12468
   930b8:	10800017 	ldw	r2,0(r2)
   930bc:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   930c0:	008002b4 	movhi	r2,10
   930c4:	10b3d304 	addi	r2,r2,-12468
   930c8:	10800017 	ldw	r2,0(r2)
   930cc:	1005003a 	cmpeq	r2,r2,zero
   930d0:	1000081e 	bne	r2,zero,930f4 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   930d4:	008002b4 	movhi	r2,10
   930d8:	10b3d304 	addi	r2,r2,-12468
   930dc:	10800017 	ldw	r2,0(r2)
   930e0:	10800117 	ldw	r2,4(r2)
   930e4:	1007883a 	mov	r3,r2
   930e8:	008002b4 	movhi	r2,10
   930ec:	10b3d304 	addi	r2,r2,-12468
   930f0:	10c00015 	stw	r3,0(r2)
   930f4:	e0bffc17 	ldw	r2,-16(fp)
   930f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   930fc:	e0bffa17 	ldw	r2,-24(fp)
   93100:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   93104:	e0bffd17 	ldw	r2,-12(fp)
   93108:	1005003a 	cmpeq	r2,r2,zero
   9310c:	10000f1e 	bne	r2,zero,9314c <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   93110:	e0fffd17 	ldw	r3,-12(fp)
   93114:	008000c4 	movi	r2,3
   93118:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   9311c:	e0fffd17 	ldw	r3,-12(fp)
   93120:	e0bffe0b 	ldhu	r2,-8(fp)
   93124:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   93128:	e0bffd17 	ldw	r2,-12(fp)
   9312c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   93130:	e0fffd17 	ldw	r3,-12(fp)
   93134:	00800fc4 	movi	r2,63
   93138:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   9313c:	e0bffd17 	ldw	r2,-12(fp)
   93140:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   93144:	e13ffd17 	ldw	r4,-12(fp)
   93148:	008ee1c0 	call	8ee1c <OS_EventWaitListInit>
    }
    return (pevent);
   9314c:	e0bffd17 	ldw	r2,-12(fp)
   93150:	e0bfff15 	stw	r2,-4(fp)
   93154:	e0bfff17 	ldw	r2,-4(fp)
}
   93158:	e037883a 	mov	sp,fp
   9315c:	dfc00117 	ldw	ra,4(sp)
   93160:	df000017 	ldw	fp,0(sp)
   93164:	dec00204 	addi	sp,sp,8
   93168:	f800283a 	ret

0009316c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   9316c:	defff104 	addi	sp,sp,-60
   93170:	dfc00e15 	stw	ra,56(sp)
   93174:	df000d15 	stw	fp,52(sp)
   93178:	df000d04 	addi	fp,sp,52
   9317c:	e13ffb15 	stw	r4,-20(fp)
   93180:	e1bffd15 	stw	r6,-12(fp)
   93184:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   93188:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   9318c:	e0bffd17 	ldw	r2,-12(fp)
   93190:	1004c03a 	cmpne	r2,r2,zero
   93194:	1000031e 	bne	r2,zero,931a4 <OSSemDel+0x38>
        return (pevent);
   93198:	e0bffb17 	ldw	r2,-20(fp)
   9319c:	e0bfff15 	stw	r2,-4(fp)
   931a0:	00009406 	br	933f4 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   931a4:	e0bffb17 	ldw	r2,-20(fp)
   931a8:	1004c03a 	cmpne	r2,r2,zero
   931ac:	1000061e 	bne	r2,zero,931c8 <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
   931b0:	e0fffd17 	ldw	r3,-12(fp)
   931b4:	00800104 	movi	r2,4
   931b8:	18800005 	stb	r2,0(r3)
        return (pevent);
   931bc:	e0fffb17 	ldw	r3,-20(fp)
   931c0:	e0ffff15 	stw	r3,-4(fp)
   931c4:	00008b06 	br	933f4 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   931c8:	e0bffb17 	ldw	r2,-20(fp)
   931cc:	10800003 	ldbu	r2,0(r2)
   931d0:	10803fcc 	andi	r2,r2,255
   931d4:	108000e0 	cmpeqi	r2,r2,3
   931d8:	1000061e 	bne	r2,zero,931f4 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
   931dc:	e0fffd17 	ldw	r3,-12(fp)
   931e0:	00800044 	movi	r2,1
   931e4:	18800005 	stb	r2,0(r3)
        return (pevent);
   931e8:	e0bffb17 	ldw	r2,-20(fp)
   931ec:	e0bfff15 	stw	r2,-4(fp)
   931f0:	00008006 	br	933f4 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   931f4:	008002b4 	movhi	r2,10
   931f8:	10b3d404 	addi	r2,r2,-12464
   931fc:	10800003 	ldbu	r2,0(r2)
   93200:	10803fcc 	andi	r2,r2,255
   93204:	1005003a 	cmpeq	r2,r2,zero
   93208:	1000061e 	bne	r2,zero,93224 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   9320c:	e0fffd17 	ldw	r3,-12(fp)
   93210:	008003c4 	movi	r2,15
   93214:	18800005 	stb	r2,0(r3)
        return (pevent);
   93218:	e0fffb17 	ldw	r3,-20(fp)
   9321c:	e0ffff15 	stw	r3,-4(fp)
   93220:	00007406 	br	933f4 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93224:	0005303a 	rdctl	r2,status
   93228:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9322c:	e0fff717 	ldw	r3,-36(fp)
   93230:	00bfff84 	movi	r2,-2
   93234:	1884703a 	and	r2,r3,r2
   93238:	1001703a 	wrctl	status,r2
  
  return context;
   9323c:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   93240:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   93244:	e0bffb17 	ldw	r2,-20(fp)
   93248:	10800283 	ldbu	r2,10(r2)
   9324c:	10803fcc 	andi	r2,r2,255
   93250:	1005003a 	cmpeq	r2,r2,zero
   93254:	1000031e 	bne	r2,zero,93264 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   93258:	00800044 	movi	r2,1
   9325c:	e0bffa05 	stb	r2,-24(fp)
   93260:	00000106 	br	93268 <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   93264:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
   93268:	e0bffc03 	ldbu	r2,-16(fp)
   9326c:	e0bffe15 	stw	r2,-8(fp)
   93270:	e0fffe17 	ldw	r3,-8(fp)
   93274:	1805003a 	cmpeq	r2,r3,zero
   93278:	1000041e 	bne	r2,zero,9328c <OSSemDel+0x120>
   9327c:	e0fffe17 	ldw	r3,-8(fp)
   93280:	18800060 	cmpeqi	r2,r3,1
   93284:	10002d1e 	bne	r2,zero,9333c <OSSemDel+0x1d0>
   93288:	00004f06 	br	933c8 <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   9328c:	e0bffa03 	ldbu	r2,-24(fp)
   93290:	1004c03a 	cmpne	r2,r2,zero
   93294:	10001a1e 	bne	r2,zero,93300 <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   93298:	e0fffb17 	ldw	r3,-20(fp)
   9329c:	00800fc4 	movi	r2,63
   932a0:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   932a4:	e0bffb17 	ldw	r2,-20(fp)
   932a8:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   932ac:	e0bffb17 	ldw	r2,-20(fp)
   932b0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   932b4:	008002b4 	movhi	r2,10
   932b8:	10b3d304 	addi	r2,r2,-12468
   932bc:	10c00017 	ldw	r3,0(r2)
   932c0:	e0bffb17 	ldw	r2,-20(fp)
   932c4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   932c8:	e0bffb17 	ldw	r2,-20(fp)
   932cc:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   932d0:	00c002b4 	movhi	r3,10
   932d4:	18f3d304 	addi	r3,r3,-12468
   932d8:	e0bffb17 	ldw	r2,-20(fp)
   932dc:	18800015 	stw	r2,0(r3)
   932e0:	e0bff817 	ldw	r2,-32(fp)
   932e4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   932e8:	e0bff617 	ldw	r2,-40(fp)
   932ec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   932f0:	e0bffd17 	ldw	r2,-12(fp)
   932f4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   932f8:	e03ff915 	stw	zero,-28(fp)
   932fc:	00003b06 	br	933ec <OSSemDel+0x280>
   93300:	e0bff817 	ldw	r2,-32(fp)
   93304:	e0bff515 	stw	r2,-44(fp)
   93308:	e0bff517 	ldw	r2,-44(fp)
   9330c:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   93310:	e0fffd17 	ldw	r3,-12(fp)
   93314:	00801244 	movi	r2,73
   93318:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
   9331c:	e0bffb17 	ldw	r2,-20(fp)
   93320:	e0bff915 	stw	r2,-28(fp)
             }
             break;
   93324:	00003106 	br	933ec <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   93328:	e13ffb17 	ldw	r4,-20(fp)
   9332c:	000b883a 	mov	r5,zero
   93330:	01800044 	movi	r6,1
   93334:	000f883a 	mov	r7,zero
   93338:	008e8680 	call	8e868 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   9333c:	e0bffb17 	ldw	r2,-20(fp)
   93340:	10800283 	ldbu	r2,10(r2)
   93344:	10803fcc 	andi	r2,r2,255
   93348:	1004c03a 	cmpne	r2,r2,zero
   9334c:	103ff61e 	bne	r2,zero,93328 <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   93350:	e0fffb17 	ldw	r3,-20(fp)
   93354:	00800fc4 	movi	r2,63
   93358:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   9335c:	e0bffb17 	ldw	r2,-20(fp)
   93360:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   93364:	e0bffb17 	ldw	r2,-20(fp)
   93368:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   9336c:	008002b4 	movhi	r2,10
   93370:	10b3d304 	addi	r2,r2,-12468
   93374:	10c00017 	ldw	r3,0(r2)
   93378:	e0bffb17 	ldw	r2,-20(fp)
   9337c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   93380:	e0bffb17 	ldw	r2,-20(fp)
   93384:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   93388:	00c002b4 	movhi	r3,10
   9338c:	18f3d304 	addi	r3,r3,-12468
   93390:	e0bffb17 	ldw	r2,-20(fp)
   93394:	18800015 	stw	r2,0(r3)
   93398:	e0bff817 	ldw	r2,-32(fp)
   9339c:	e0bff415 	stw	r2,-48(fp)
   933a0:	e0bff417 	ldw	r2,-48(fp)
   933a4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   933a8:	e0bffa03 	ldbu	r2,-24(fp)
   933ac:	10800058 	cmpnei	r2,r2,1
   933b0:	1000011e 	bne	r2,zero,933b8 <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   933b4:	008f2a80 	call	8f2a8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   933b8:	e0bffd17 	ldw	r2,-12(fp)
   933bc:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   933c0:	e03ff915 	stw	zero,-28(fp)
             break;
   933c4:	00000906 	br	933ec <OSSemDel+0x280>
   933c8:	e0bff817 	ldw	r2,-32(fp)
   933cc:	e0bff315 	stw	r2,-52(fp)
   933d0:	e0bff317 	ldw	r2,-52(fp)
   933d4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   933d8:	e0fffd17 	ldw	r3,-12(fp)
   933dc:	008001c4 	movi	r2,7
   933e0:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
   933e4:	e0bffb17 	ldw	r2,-20(fp)
   933e8:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
   933ec:	e0bff917 	ldw	r2,-28(fp)
   933f0:	e0bfff15 	stw	r2,-4(fp)
   933f4:	e0bfff17 	ldw	r2,-4(fp)
}
   933f8:	e037883a 	mov	sp,fp
   933fc:	dfc00117 	ldw	ra,4(sp)
   93400:	df000017 	ldw	fp,0(sp)
   93404:	dec00204 	addi	sp,sp,8
   93408:	f800283a 	ret

0009340c <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   9340c:	defff404 	addi	sp,sp,-48
   93410:	dfc00b15 	stw	ra,44(sp)
   93414:	df000a15 	stw	fp,40(sp)
   93418:	df000a04 	addi	fp,sp,40
   9341c:	e13ffc15 	stw	r4,-16(fp)
   93420:	e1bffe15 	stw	r6,-8(fp)
   93424:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   93428:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   9342c:	e0bffe17 	ldw	r2,-8(fp)
   93430:	1005003a 	cmpeq	r2,r2,zero
   93434:	10008f1e 	bne	r2,zero,93674 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   93438:	e0bffc17 	ldw	r2,-16(fp)
   9343c:	1004c03a 	cmpne	r2,r2,zero
   93440:	1000041e 	bne	r2,zero,93454 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   93444:	e0fffe17 	ldw	r3,-8(fp)
   93448:	00800104 	movi	r2,4
   9344c:	18800005 	stb	r2,0(r3)
        return;
   93450:	00008806 	br	93674 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   93454:	e0bffc17 	ldw	r2,-16(fp)
   93458:	10800003 	ldbu	r2,0(r2)
   9345c:	10803fcc 	andi	r2,r2,255
   93460:	108000e0 	cmpeqi	r2,r2,3
   93464:	1000041e 	bne	r2,zero,93478 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   93468:	e0fffe17 	ldw	r3,-8(fp)
   9346c:	00800044 	movi	r2,1
   93470:	18800005 	stb	r2,0(r3)
        return;
   93474:	00007f06 	br	93674 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   93478:	008002b4 	movhi	r2,10
   9347c:	10b3d404 	addi	r2,r2,-12464
   93480:	10800003 	ldbu	r2,0(r2)
   93484:	10803fcc 	andi	r2,r2,255
   93488:	1005003a 	cmpeq	r2,r2,zero
   9348c:	1000041e 	bne	r2,zero,934a0 <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   93490:	e0fffe17 	ldw	r3,-8(fp)
   93494:	00800084 	movi	r2,2
   93498:	18800005 	stb	r2,0(r3)
        return;
   9349c:	00007506 	br	93674 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   934a0:	008002b4 	movhi	r2,10
   934a4:	10b3c604 	addi	r2,r2,-12520
   934a8:	10800003 	ldbu	r2,0(r2)
   934ac:	10803fcc 	andi	r2,r2,255
   934b0:	1005003a 	cmpeq	r2,r2,zero
   934b4:	1000041e 	bne	r2,zero,934c8 <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   934b8:	e0fffe17 	ldw	r3,-8(fp)
   934bc:	00800344 	movi	r2,13
   934c0:	18800005 	stb	r2,0(r3)
        return;
   934c4:	00006b06 	br	93674 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   934c8:	0005303a 	rdctl	r2,status
   934cc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   934d0:	e0fffa17 	ldw	r3,-24(fp)
   934d4:	00bfff84 	movi	r2,-2
   934d8:	1884703a 	and	r2,r3,r2
   934dc:	1001703a 	wrctl	status,r2
  
  return context;
   934e0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   934e4:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   934e8:	e0bffc17 	ldw	r2,-16(fp)
   934ec:	1080020b 	ldhu	r2,8(r2)
   934f0:	10bfffcc 	andi	r2,r2,65535
   934f4:	1005003a 	cmpeq	r2,r2,zero
   934f8:	10000d1e 	bne	r2,zero,93530 <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   934fc:	e0bffc17 	ldw	r2,-16(fp)
   93500:	1080020b 	ldhu	r2,8(r2)
   93504:	10bfffc4 	addi	r2,r2,-1
   93508:	1007883a 	mov	r3,r2
   9350c:	e0bffc17 	ldw	r2,-16(fp)
   93510:	10c0020d 	sth	r3,8(r2)
   93514:	e0bffb17 	ldw	r2,-20(fp)
   93518:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9351c:	e0bff917 	ldw	r2,-28(fp)
   93520:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   93524:	e0bffe17 	ldw	r2,-8(fp)
   93528:	10000005 	stb	zero,0(r2)
        return;
   9352c:	00005106 	br	93674 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   93530:	008002b4 	movhi	r2,10
   93534:	10b3d504 	addi	r2,r2,-12460
   93538:	10c00017 	ldw	r3,0(r2)
   9353c:	008002b4 	movhi	r2,10
   93540:	10b3d504 	addi	r2,r2,-12460
   93544:	10800017 	ldw	r2,0(r2)
   93548:	10800c03 	ldbu	r2,48(r2)
   9354c:	10800054 	ori	r2,r2,1
   93550:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   93554:	008002b4 	movhi	r2,10
   93558:	10b3d504 	addi	r2,r2,-12460
   9355c:	10800017 	ldw	r2,0(r2)
   93560:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   93564:	008002b4 	movhi	r2,10
   93568:	10b3d504 	addi	r2,r2,-12460
   9356c:	10c00017 	ldw	r3,0(r2)
   93570:	e0bffd0b 	ldhu	r2,-12(fp)
   93574:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   93578:	e13ffc17 	ldw	r4,-16(fp)
   9357c:	008e9fc0 	call	8e9fc <OS_EventTaskWait>
   93580:	e0bffb17 	ldw	r2,-20(fp)
   93584:	e0bff815 	stw	r2,-32(fp)
   93588:	e0bff817 	ldw	r2,-32(fp)
   9358c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   93590:	008f2a80 	call	8f2a8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93594:	0005303a 	rdctl	r2,status
   93598:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9359c:	e0fff717 	ldw	r3,-36(fp)
   935a0:	00bfff84 	movi	r2,-2
   935a4:	1884703a 	and	r2,r3,r2
   935a8:	1001703a 	wrctl	status,r2
  
  return context;
   935ac:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   935b0:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   935b4:	008002b4 	movhi	r2,10
   935b8:	10b3d504 	addi	r2,r2,-12460
   935bc:	10800017 	ldw	r2,0(r2)
   935c0:	10800c43 	ldbu	r2,49(r2)
   935c4:	10803fcc 	andi	r2,r2,255
   935c8:	e0bfff15 	stw	r2,-4(fp)
   935cc:	e0ffff17 	ldw	r3,-4(fp)
   935d0:	1805003a 	cmpeq	r2,r3,zero
   935d4:	1000041e 	bne	r2,zero,935e8 <OSSemPend+0x1dc>
   935d8:	e0ffff17 	ldw	r3,-4(fp)
   935dc:	188000a0 	cmpeqi	r2,r3,2
   935e0:	1000041e 	bne	r2,zero,935f4 <OSSemPend+0x1e8>
   935e4:	00000706 	br	93604 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   935e8:	e0bffe17 	ldw	r2,-8(fp)
   935ec:	10000005 	stb	zero,0(r2)
             break;
   935f0:	00000c06 	br	93624 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   935f4:	e0fffe17 	ldw	r3,-8(fp)
   935f8:	00800384 	movi	r2,14
   935fc:	18800005 	stb	r2,0(r3)
             break;
   93600:	00000806 	br	93624 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   93604:	008002b4 	movhi	r2,10
   93608:	10b3d504 	addi	r2,r2,-12460
   9360c:	11000017 	ldw	r4,0(r2)
   93610:	e17ffc17 	ldw	r5,-16(fp)
   93614:	008ec600 	call	8ec60 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   93618:	e0fffe17 	ldw	r3,-8(fp)
   9361c:	00800284 	movi	r2,10
   93620:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   93624:	008002b4 	movhi	r2,10
   93628:	10b3d504 	addi	r2,r2,-12460
   9362c:	10800017 	ldw	r2,0(r2)
   93630:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   93634:	008002b4 	movhi	r2,10
   93638:	10b3d504 	addi	r2,r2,-12460
   9363c:	10800017 	ldw	r2,0(r2)
   93640:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   93644:	008002b4 	movhi	r2,10
   93648:	10b3d504 	addi	r2,r2,-12460
   9364c:	10800017 	ldw	r2,0(r2)
   93650:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   93654:	008002b4 	movhi	r2,10
   93658:	10b3d504 	addi	r2,r2,-12460
   9365c:	10800017 	ldw	r2,0(r2)
   93660:	10000815 	stw	zero,32(r2)
   93664:	e0bffb17 	ldw	r2,-20(fp)
   93668:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9366c:	e0bff617 	ldw	r2,-40(fp)
   93670:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   93674:	e037883a 	mov	sp,fp
   93678:	dfc00117 	ldw	ra,4(sp)
   9367c:	df000017 	ldw	fp,0(sp)
   93680:	dec00204 	addi	sp,sp,8
   93684:	f800283a 	ret

00093688 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   93688:	defff504 	addi	sp,sp,-44
   9368c:	dfc00a15 	stw	ra,40(sp)
   93690:	df000915 	stw	fp,36(sp)
   93694:	df000904 	addi	fp,sp,36
   93698:	e13ffc15 	stw	r4,-16(fp)
   9369c:	e1bffe15 	stw	r6,-8(fp)
   936a0:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   936a4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   936a8:	e0bffe17 	ldw	r2,-8(fp)
   936ac:	1004c03a 	cmpne	r2,r2,zero
   936b0:	1000021e 	bne	r2,zero,936bc <OSSemPendAbort+0x34>
        return (0);
   936b4:	e03fff15 	stw	zero,-4(fp)
   936b8:	00004c06 	br	937ec <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   936bc:	e0bffc17 	ldw	r2,-16(fp)
   936c0:	1004c03a 	cmpne	r2,r2,zero
   936c4:	1000051e 	bne	r2,zero,936dc <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
   936c8:	e0fffe17 	ldw	r3,-8(fp)
   936cc:	00800104 	movi	r2,4
   936d0:	18800005 	stb	r2,0(r3)
        return (0);
   936d4:	e03fff15 	stw	zero,-4(fp)
   936d8:	00004406 	br	937ec <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   936dc:	e0bffc17 	ldw	r2,-16(fp)
   936e0:	10800003 	ldbu	r2,0(r2)
   936e4:	10803fcc 	andi	r2,r2,255
   936e8:	108000e0 	cmpeqi	r2,r2,3
   936ec:	1000051e 	bne	r2,zero,93704 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   936f0:	e0fffe17 	ldw	r3,-8(fp)
   936f4:	00800044 	movi	r2,1
   936f8:	18800005 	stb	r2,0(r3)
        return (0);
   936fc:	e03fff15 	stw	zero,-4(fp)
   93700:	00003a06 	br	937ec <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93704:	0005303a 	rdctl	r2,status
   93708:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9370c:	e0fff917 	ldw	r3,-28(fp)
   93710:	00bfff84 	movi	r2,-2
   93714:	1884703a 	and	r2,r3,r2
   93718:	1001703a 	wrctl	status,r2
  
  return context;
   9371c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   93720:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   93724:	e0bffc17 	ldw	r2,-16(fp)
   93728:	10800283 	ldbu	r2,10(r2)
   9372c:	10803fcc 	andi	r2,r2,255
   93730:	1005003a 	cmpeq	r2,r2,zero
   93734:	1000261e 	bne	r2,zero,937d0 <OSSemPendAbort+0x148>
        nbr_tasks = 0;
   93738:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
   9373c:	e0bffd03 	ldbu	r2,-12(fp)
   93740:	10800060 	cmpeqi	r2,r2,1
   93744:	1000091e 	bne	r2,zero,9376c <OSSemPendAbort+0xe4>
   93748:	00000e06 	br	93784 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   9374c:	e13ffc17 	ldw	r4,-16(fp)
   93750:	000b883a 	mov	r5,zero
   93754:	01800044 	movi	r6,1
   93758:	01c00084 	movi	r7,2
   9375c:	008e8680 	call	8e868 <OS_EventTaskRdy>
                     nbr_tasks++;
   93760:	e0bffb03 	ldbu	r2,-20(fp)
   93764:	10800044 	addi	r2,r2,1
   93768:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   9376c:	e0bffc17 	ldw	r2,-16(fp)
   93770:	10800283 	ldbu	r2,10(r2)
   93774:	10803fcc 	andi	r2,r2,255
   93778:	1004c03a 	cmpne	r2,r2,zero
   9377c:	103ff31e 	bne	r2,zero,9374c <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   93780:	00000806 	br	937a4 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   93784:	e13ffc17 	ldw	r4,-16(fp)
   93788:	000b883a 	mov	r5,zero
   9378c:	01800044 	movi	r6,1
   93790:	01c00084 	movi	r7,2
   93794:	008e8680 	call	8e868 <OS_EventTaskRdy>
                 nbr_tasks++;
   93798:	e0bffb03 	ldbu	r2,-20(fp)
   9379c:	10800044 	addi	r2,r2,1
   937a0:	e0bffb05 	stb	r2,-20(fp)
   937a4:	e0bffa17 	ldw	r2,-24(fp)
   937a8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   937ac:	e0bff817 	ldw	r2,-32(fp)
   937b0:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   937b4:	008f2a80 	call	8f2a8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   937b8:	e0fffe17 	ldw	r3,-8(fp)
   937bc:	00800384 	movi	r2,14
   937c0:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
   937c4:	e0bffb03 	ldbu	r2,-20(fp)
   937c8:	e0bfff15 	stw	r2,-4(fp)
   937cc:	00000706 	br	937ec <OSSemPendAbort+0x164>
   937d0:	e0bffa17 	ldw	r2,-24(fp)
   937d4:	e0bff715 	stw	r2,-36(fp)
   937d8:	e0bff717 	ldw	r2,-36(fp)
   937dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   937e0:	e0bffe17 	ldw	r2,-8(fp)
   937e4:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   937e8:	e03fff15 	stw	zero,-4(fp)
   937ec:	e0bfff17 	ldw	r2,-4(fp)
}
   937f0:	e037883a 	mov	sp,fp
   937f4:	dfc00117 	ldw	ra,4(sp)
   937f8:	df000017 	ldw	fp,0(sp)
   937fc:	dec00204 	addi	sp,sp,8
   93800:	f800283a 	ret

00093804 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   93804:	defff704 	addi	sp,sp,-36
   93808:	dfc00815 	stw	ra,32(sp)
   9380c:	df000715 	stw	fp,28(sp)
   93810:	df000704 	addi	fp,sp,28
   93814:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   93818:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   9381c:	e0bffe17 	ldw	r2,-8(fp)
   93820:	1004c03a 	cmpne	r2,r2,zero
   93824:	1000031e 	bne	r2,zero,93834 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
   93828:	00800104 	movi	r2,4
   9382c:	e0bfff15 	stw	r2,-4(fp)
   93830:	00003806 	br	93914 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   93834:	e0bffe17 	ldw	r2,-8(fp)
   93838:	10800003 	ldbu	r2,0(r2)
   9383c:	10803fcc 	andi	r2,r2,255
   93840:	108000e0 	cmpeqi	r2,r2,3
   93844:	1000031e 	bne	r2,zero,93854 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
   93848:	00800044 	movi	r2,1
   9384c:	e0bfff15 	stw	r2,-4(fp)
   93850:	00003006 	br	93914 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93854:	0005303a 	rdctl	r2,status
   93858:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9385c:	e0fffc17 	ldw	r3,-16(fp)
   93860:	00bfff84 	movi	r2,-2
   93864:	1884703a 	and	r2,r3,r2
   93868:	1001703a 	wrctl	status,r2
  
  return context;
   9386c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   93870:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   93874:	e0bffe17 	ldw	r2,-8(fp)
   93878:	10800283 	ldbu	r2,10(r2)
   9387c:	10803fcc 	andi	r2,r2,255
   93880:	1005003a 	cmpeq	r2,r2,zero
   93884:	10000c1e 	bne	r2,zero,938b8 <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   93888:	e13ffe17 	ldw	r4,-8(fp)
   9388c:	000b883a 	mov	r5,zero
   93890:	01800044 	movi	r6,1
   93894:	000f883a 	mov	r7,zero
   93898:	008e8680 	call	8e868 <OS_EventTaskRdy>
   9389c:	e0bffd17 	ldw	r2,-12(fp)
   938a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   938a4:	e0bffb17 	ldw	r2,-20(fp)
   938a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   938ac:	008f2a80 	call	8f2a8 <OS_Sched>
        return (OS_ERR_NONE);
   938b0:	e03fff15 	stw	zero,-4(fp)
   938b4:	00001706 	br	93914 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   938b8:	e0bffe17 	ldw	r2,-8(fp)
   938bc:	1080020b 	ldhu	r2,8(r2)
   938c0:	10ffffcc 	andi	r3,r2,65535
   938c4:	00bfffd4 	movui	r2,65535
   938c8:	18800c26 	beq	r3,r2,938fc <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   938cc:	e0bffe17 	ldw	r2,-8(fp)
   938d0:	1080020b 	ldhu	r2,8(r2)
   938d4:	10800044 	addi	r2,r2,1
   938d8:	1007883a 	mov	r3,r2
   938dc:	e0bffe17 	ldw	r2,-8(fp)
   938e0:	10c0020d 	sth	r3,8(r2)
   938e4:	e0bffd17 	ldw	r2,-12(fp)
   938e8:	e0bffa15 	stw	r2,-24(fp)
   938ec:	e0bffa17 	ldw	r2,-24(fp)
   938f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   938f4:	e03fff15 	stw	zero,-4(fp)
   938f8:	00000606 	br	93914 <OSSemPost+0x110>
   938fc:	e0bffd17 	ldw	r2,-12(fp)
   93900:	e0bff915 	stw	r2,-28(fp)
   93904:	e0bff917 	ldw	r2,-28(fp)
   93908:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   9390c:	00800c84 	movi	r2,50
   93910:	e0bfff15 	stw	r2,-4(fp)
   93914:	e0bfff17 	ldw	r2,-4(fp)
}
   93918:	e037883a 	mov	sp,fp
   9391c:	dfc00117 	ldw	ra,4(sp)
   93920:	df000017 	ldw	fp,0(sp)
   93924:	dec00204 	addi	sp,sp,8
   93928:	f800283a 	ret

0009392c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   9392c:	defff604 	addi	sp,sp,-40
   93930:	df000915 	stw	fp,36(sp)
   93934:	df000904 	addi	fp,sp,36
   93938:	e13ffd15 	stw	r4,-12(fp)
   9393c:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   93940:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   93944:	e0bffd17 	ldw	r2,-12(fp)
   93948:	1004c03a 	cmpne	r2,r2,zero
   9394c:	1000031e 	bne	r2,zero,9395c <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
   93950:	00800104 	movi	r2,4
   93954:	e0bfff15 	stw	r2,-4(fp)
   93958:	00003b06 	br	93a48 <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   9395c:	e0bffe17 	ldw	r2,-8(fp)
   93960:	1004c03a 	cmpne	r2,r2,zero
   93964:	1000031e 	bne	r2,zero,93974 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
   93968:	00800244 	movi	r2,9
   9396c:	e0bfff15 	stw	r2,-4(fp)
   93970:	00003506 	br	93a48 <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   93974:	e0bffd17 	ldw	r2,-12(fp)
   93978:	10800003 	ldbu	r2,0(r2)
   9397c:	10803fcc 	andi	r2,r2,255
   93980:	108000e0 	cmpeqi	r2,r2,3
   93984:	1000031e 	bne	r2,zero,93994 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
   93988:	00800044 	movi	r2,1
   9398c:	e0bfff15 	stw	r2,-4(fp)
   93990:	00002d06 	br	93a48 <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93994:	0005303a 	rdctl	r2,status
   93998:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9399c:	e0fff817 	ldw	r3,-32(fp)
   939a0:	00bfff84 	movi	r2,-2
   939a4:	1884703a 	and	r2,r3,r2
   939a8:	1001703a 	wrctl	status,r2
  
  return context;
   939ac:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   939b0:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   939b4:	e0bffd17 	ldw	r2,-12(fp)
   939b8:	10c00283 	ldbu	r3,10(r2)
   939bc:	e0bffe17 	ldw	r2,-8(fp)
   939c0:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   939c4:	e0bffd17 	ldw	r2,-12(fp)
   939c8:	108002c4 	addi	r2,r2,11
   939cc:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   939d0:	e0bffe17 	ldw	r2,-8(fp)
   939d4:	10800084 	addi	r2,r2,2
   939d8:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   939dc:	e03ffa05 	stb	zero,-24(fp)
   939e0:	00000d06 	br	93a18 <OSSemQuery+0xec>
        *pdest++ = *psrc++;
   939e4:	e0bffc17 	ldw	r2,-16(fp)
   939e8:	10c00003 	ldbu	r3,0(r2)
   939ec:	e0bffb17 	ldw	r2,-20(fp)
   939f0:	10c00005 	stb	r3,0(r2)
   939f4:	e0bffb17 	ldw	r2,-20(fp)
   939f8:	10800044 	addi	r2,r2,1
   939fc:	e0bffb15 	stw	r2,-20(fp)
   93a00:	e0bffc17 	ldw	r2,-16(fp)
   93a04:	10800044 	addi	r2,r2,1
   93a08:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   93a0c:	e0bffa03 	ldbu	r2,-24(fp)
   93a10:	10800044 	addi	r2,r2,1
   93a14:	e0bffa05 	stb	r2,-24(fp)
   93a18:	e0bffa03 	ldbu	r2,-24(fp)
   93a1c:	108000f0 	cmpltui	r2,r2,3
   93a20:	103ff01e 	bne	r2,zero,939e4 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   93a24:	e0bffd17 	ldw	r2,-12(fp)
   93a28:	10c0020b 	ldhu	r3,8(r2)
   93a2c:	e0bffe17 	ldw	r2,-8(fp)
   93a30:	10c0000d 	sth	r3,0(r2)
   93a34:	e0bff917 	ldw	r2,-28(fp)
   93a38:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93a3c:	e0bff717 	ldw	r2,-36(fp)
   93a40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   93a44:	e03fff15 	stw	zero,-4(fp)
   93a48:	e0bfff17 	ldw	r2,-4(fp)
}
   93a4c:	e037883a 	mov	sp,fp
   93a50:	df000017 	ldw	fp,0(sp)
   93a54:	dec00104 	addi	sp,sp,4
   93a58:	f800283a 	ret

00093a5c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   93a5c:	defff904 	addi	sp,sp,-28
   93a60:	df000615 	stw	fp,24(sp)
   93a64:	df000604 	addi	fp,sp,24
   93a68:	e13ffd15 	stw	r4,-12(fp)
   93a6c:	e1bfff15 	stw	r6,-4(fp)
   93a70:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   93a74:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   93a78:	e0bfff17 	ldw	r2,-4(fp)
   93a7c:	1005003a 	cmpeq	r2,r2,zero
   93a80:	1000331e 	bne	r2,zero,93b50 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   93a84:	e0bffd17 	ldw	r2,-12(fp)
   93a88:	1004c03a 	cmpne	r2,r2,zero
   93a8c:	1000041e 	bne	r2,zero,93aa0 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   93a90:	e0ffff17 	ldw	r3,-4(fp)
   93a94:	00800104 	movi	r2,4
   93a98:	18800005 	stb	r2,0(r3)
        return;
   93a9c:	00002c06 	br	93b50 <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   93aa0:	e0bffd17 	ldw	r2,-12(fp)
   93aa4:	10800003 	ldbu	r2,0(r2)
   93aa8:	10803fcc 	andi	r2,r2,255
   93aac:	108000e0 	cmpeqi	r2,r2,3
   93ab0:	1000041e 	bne	r2,zero,93ac4 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   93ab4:	e0ffff17 	ldw	r3,-4(fp)
   93ab8:	00800044 	movi	r2,1
   93abc:	18800005 	stb	r2,0(r3)
        return;
   93ac0:	00002306 	br	93b50 <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93ac4:	0005303a 	rdctl	r2,status
   93ac8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93acc:	e0fffb17 	ldw	r3,-20(fp)
   93ad0:	00bfff84 	movi	r2,-2
   93ad4:	1884703a 	and	r2,r3,r2
   93ad8:	1001703a 	wrctl	status,r2
  
  return context;
   93adc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   93ae0:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
   93ae4:	e0bfff17 	ldw	r2,-4(fp)
   93ae8:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   93aec:	e0bffd17 	ldw	r2,-12(fp)
   93af0:	1080020b 	ldhu	r2,8(r2)
   93af4:	10bfffcc 	andi	r2,r2,65535
   93af8:	1005003a 	cmpeq	r2,r2,zero
   93afc:	1000041e 	bne	r2,zero,93b10 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   93b00:	e0fffd17 	ldw	r3,-12(fp)
   93b04:	e0bffe0b 	ldhu	r2,-8(fp)
   93b08:	1880020d 	sth	r2,8(r3)
   93b0c:	00000c06 	br	93b40 <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   93b10:	e0bffd17 	ldw	r2,-12(fp)
   93b14:	10800283 	ldbu	r2,10(r2)
   93b18:	10803fcc 	andi	r2,r2,255
   93b1c:	1004c03a 	cmpne	r2,r2,zero
   93b20:	1000041e 	bne	r2,zero,93b34 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   93b24:	e0fffd17 	ldw	r3,-12(fp)
   93b28:	e0bffe0b 	ldhu	r2,-8(fp)
   93b2c:	1880020d 	sth	r2,8(r3)
   93b30:	00000306 	br	93b40 <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   93b34:	e0ffff17 	ldw	r3,-4(fp)
   93b38:	00801244 	movi	r2,73
   93b3c:	18800005 	stb	r2,0(r3)
   93b40:	e0bffc17 	ldw	r2,-16(fp)
   93b44:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93b48:	e0bffa17 	ldw	r2,-24(fp)
   93b4c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   93b50:	e037883a 	mov	sp,fp
   93b54:	df000017 	ldw	fp,0(sp)
   93b58:	dec00104 	addi	sp,sp,4
   93b5c:	f800283a 	ret

00093b60 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   93b60:	defff004 	addi	sp,sp,-64
   93b64:	dfc00f15 	stw	ra,60(sp)
   93b68:	df000e15 	stw	fp,56(sp)
   93b6c:	df000e04 	addi	fp,sp,56
   93b70:	e13ffd05 	stb	r4,-12(fp)
   93b74:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   93b78:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   93b7c:	e0bffd03 	ldbu	r2,-12(fp)
   93b80:	10800530 	cmpltui	r2,r2,20
   93b84:	1000061e 	bne	r2,zero,93ba0 <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
   93b88:	e0bffd03 	ldbu	r2,-12(fp)
   93b8c:	10803fe0 	cmpeqi	r2,r2,255
   93b90:	1000031e 	bne	r2,zero,93ba0 <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
   93b94:	00800a84 	movi	r2,42
   93b98:	e0bfff15 	stw	r2,-4(fp)
   93b9c:	00014706 	br	940bc <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   93ba0:	e0bffe03 	ldbu	r2,-8(fp)
   93ba4:	10800530 	cmpltui	r2,r2,20
   93ba8:	1000031e 	bne	r2,zero,93bb8 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   93bac:	00800a84 	movi	r2,42
   93bb0:	e0bfff15 	stw	r2,-4(fp)
   93bb4:	00014106 	br	940bc <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93bb8:	0005303a 	rdctl	r2,status
   93bbc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93bc0:	e0fff617 	ldw	r3,-40(fp)
   93bc4:	00bfff84 	movi	r2,-2
   93bc8:	1884703a 	and	r2,r3,r2
   93bcc:	1001703a 	wrctl	status,r2
  
  return context;
   93bd0:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   93bd4:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   93bd8:	e0bffe03 	ldbu	r2,-8(fp)
   93bdc:	00c002f4 	movhi	r3,11
   93be0:	18f0e504 	addi	r3,r3,-15468
   93be4:	1085883a 	add	r2,r2,r2
   93be8:	1085883a 	add	r2,r2,r2
   93bec:	10c5883a 	add	r2,r2,r3
   93bf0:	10800017 	ldw	r2,0(r2)
   93bf4:	1005003a 	cmpeq	r2,r2,zero
   93bf8:	1000071e 	bne	r2,zero,93c18 <OSTaskChangePrio+0xb8>
   93bfc:	e0bff717 	ldw	r2,-36(fp)
   93c00:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93c04:	e0bff517 	ldw	r2,-44(fp)
   93c08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   93c0c:	00800a04 	movi	r2,40
   93c10:	e0bfff15 	stw	r2,-4(fp)
   93c14:	00012906 	br	940bc <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   93c18:	e0bffd03 	ldbu	r2,-12(fp)
   93c1c:	10803fd8 	cmpnei	r2,r2,255
   93c20:	1000051e 	bne	r2,zero,93c38 <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   93c24:	008002b4 	movhi	r2,10
   93c28:	10b3d504 	addi	r2,r2,-12460
   93c2c:	10800017 	ldw	r2,0(r2)
   93c30:	10800c83 	ldbu	r2,50(r2)
   93c34:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   93c38:	e0bffd03 	ldbu	r2,-12(fp)
   93c3c:	00c002f4 	movhi	r3,11
   93c40:	18f0e504 	addi	r3,r3,-15468
   93c44:	1085883a 	add	r2,r2,r2
   93c48:	1085883a 	add	r2,r2,r2
   93c4c:	10c5883a 	add	r2,r2,r3
   93c50:	10800017 	ldw	r2,0(r2)
   93c54:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   93c58:	e0bffa17 	ldw	r2,-24(fp)
   93c5c:	1004c03a 	cmpne	r2,r2,zero
   93c60:	1000071e 	bne	r2,zero,93c80 <OSTaskChangePrio+0x120>
   93c64:	e0bff717 	ldw	r2,-36(fp)
   93c68:	e0bff415 	stw	r2,-48(fp)
   93c6c:	e0bff417 	ldw	r2,-48(fp)
   93c70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   93c74:	00800a44 	movi	r2,41
   93c78:	e0bfff15 	stw	r2,-4(fp)
   93c7c:	00010f06 	br	940bc <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   93c80:	e0bffa17 	ldw	r2,-24(fp)
   93c84:	10800058 	cmpnei	r2,r2,1
   93c88:	1000071e 	bne	r2,zero,93ca8 <OSTaskChangePrio+0x148>
   93c8c:	e0bff717 	ldw	r2,-36(fp)
   93c90:	e0bff315 	stw	r2,-52(fp)
   93c94:	e0bff317 	ldw	r2,-52(fp)
   93c98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   93c9c:	008010c4 	movi	r2,67
   93ca0:	e0bfff15 	stw	r2,-4(fp)
   93ca4:	00010506 	br	940bc <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   93ca8:	e0bffe03 	ldbu	r2,-8(fp)
   93cac:	1004d0fa 	srli	r2,r2,3
   93cb0:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   93cb4:	e0bffe03 	ldbu	r2,-8(fp)
   93cb8:	108001cc 	andi	r2,r2,7
   93cbc:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
   93cc0:	e0fff983 	ldbu	r3,-26(fp)
   93cc4:	00800044 	movi	r2,1
   93cc8:	10c4983a 	sll	r2,r2,r3
   93ccc:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
   93cd0:	e0fff943 	ldbu	r3,-27(fp)
   93cd4:	00800044 	movi	r2,1
   93cd8:	10c4983a 	sll	r2,r2,r3
   93cdc:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   93ce0:	e0bffd03 	ldbu	r2,-12(fp)
   93ce4:	00c002f4 	movhi	r3,11
   93ce8:	18f0e504 	addi	r3,r3,-15468
   93cec:	1085883a 	add	r2,r2,r2
   93cf0:	1085883a 	add	r2,r2,r2
   93cf4:	10c5883a 	add	r2,r2,r3
   93cf8:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   93cfc:	e0bffe03 	ldbu	r2,-8(fp)
   93d00:	00c002f4 	movhi	r3,11
   93d04:	18f0e504 	addi	r3,r3,-15468
   93d08:	1085883a 	add	r2,r2,r2
   93d0c:	1085883a 	add	r2,r2,r2
   93d10:	10c7883a 	add	r3,r2,r3
   93d14:	e0bffa17 	ldw	r2,-24(fp)
   93d18:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
   93d1c:	e0bffa17 	ldw	r2,-24(fp)
   93d20:	10800d03 	ldbu	r2,52(r2)
   93d24:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
   93d28:	e0bffa17 	ldw	r2,-24(fp)
   93d2c:	10800d83 	ldbu	r2,54(r2)
   93d30:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   93d34:	e0bffa17 	ldw	r2,-24(fp)
   93d38:	10800d43 	ldbu	r2,53(r2)
   93d3c:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   93d40:	e0fff903 	ldbu	r3,-28(fp)
   93d44:	008002b4 	movhi	r2,10
   93d48:	10b3d244 	addi	r2,r2,-12471
   93d4c:	10c5883a 	add	r2,r2,r3
   93d50:	10c00003 	ldbu	r3,0(r2)
   93d54:	e0bff803 	ldbu	r2,-32(fp)
   93d58:	1884703a 	and	r2,r3,r2
   93d5c:	10803fcc 	andi	r2,r2,255
   93d60:	1005003a 	cmpeq	r2,r2,zero
   93d64:	1000381e 	bne	r2,zero,93e48 <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
   93d68:	e13ff903 	ldbu	r4,-28(fp)
   93d6c:	e0fff903 	ldbu	r3,-28(fp)
   93d70:	008002b4 	movhi	r2,10
   93d74:	10b3d244 	addi	r2,r2,-12471
   93d78:	10c5883a 	add	r2,r2,r3
   93d7c:	10800003 	ldbu	r2,0(r2)
   93d80:	1007883a 	mov	r3,r2
   93d84:	e0bff803 	ldbu	r2,-32(fp)
   93d88:	0084303a 	nor	r2,zero,r2
   93d8c:	1884703a 	and	r2,r3,r2
   93d90:	1007883a 	mov	r3,r2
   93d94:	008002b4 	movhi	r2,10
   93d98:	10b3d244 	addi	r2,r2,-12471
   93d9c:	1105883a 	add	r2,r2,r4
   93da0:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   93da4:	e0fff903 	ldbu	r3,-28(fp)
   93da8:	008002b4 	movhi	r2,10
   93dac:	10b3d244 	addi	r2,r2,-12471
   93db0:	10c5883a 	add	r2,r2,r3
   93db4:	10800003 	ldbu	r2,0(r2)
   93db8:	10803fcc 	andi	r2,r2,255
   93dbc:	1004c03a 	cmpne	r2,r2,zero
   93dc0:	10000b1e 	bne	r2,zero,93df0 <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
   93dc4:	e0bff843 	ldbu	r2,-31(fp)
   93dc8:	0084303a 	nor	r2,zero,r2
   93dcc:	1007883a 	mov	r3,r2
   93dd0:	008002b4 	movhi	r2,10
   93dd4:	10b3d204 	addi	r2,r2,-12472
   93dd8:	10800003 	ldbu	r2,0(r2)
   93ddc:	1884703a 	and	r2,r3,r2
   93de0:	1007883a 	mov	r3,r2
   93de4:	008002b4 	movhi	r2,10
   93de8:	10b3d204 	addi	r2,r2,-12472
   93dec:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   93df0:	008002b4 	movhi	r2,10
   93df4:	10b3d204 	addi	r2,r2,-12472
   93df8:	10c00003 	ldbu	r3,0(r2)
   93dfc:	e0bff8c3 	ldbu	r2,-29(fp)
   93e00:	1884b03a 	or	r2,r3,r2
   93e04:	1007883a 	mov	r3,r2
   93e08:	008002b4 	movhi	r2,10
   93e0c:	10b3d204 	addi	r2,r2,-12472
   93e10:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   93e14:	e13ff983 	ldbu	r4,-26(fp)
   93e18:	e0fff983 	ldbu	r3,-26(fp)
   93e1c:	008002b4 	movhi	r2,10
   93e20:	10b3d244 	addi	r2,r2,-12471
   93e24:	10c5883a 	add	r2,r2,r3
   93e28:	10c00003 	ldbu	r3,0(r2)
   93e2c:	e0bff883 	ldbu	r2,-30(fp)
   93e30:	1884b03a 	or	r2,r3,r2
   93e34:	1007883a 	mov	r3,r2
   93e38:	008002b4 	movhi	r2,10
   93e3c:	10b3d244 	addi	r2,r2,-12471
   93e40:	1105883a 	add	r2,r2,r4
   93e44:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   93e48:	e0bffa17 	ldw	r2,-24(fp)
   93e4c:	10800717 	ldw	r2,28(r2)
   93e50:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
   93e54:	e0bffc17 	ldw	r2,-16(fp)
   93e58:	1005003a 	cmpeq	r2,r2,zero
   93e5c:	1000341e 	bne	r2,zero,93f30 <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   93e60:	e13ff903 	ldbu	r4,-28(fp)
   93e64:	e0fff903 	ldbu	r3,-28(fp)
   93e68:	e0bffc17 	ldw	r2,-16(fp)
   93e6c:	1885883a 	add	r2,r3,r2
   93e70:	10800204 	addi	r2,r2,8
   93e74:	108000c3 	ldbu	r2,3(r2)
   93e78:	1007883a 	mov	r3,r2
   93e7c:	e0bff803 	ldbu	r2,-32(fp)
   93e80:	0084303a 	nor	r2,zero,r2
   93e84:	1884703a 	and	r2,r3,r2
   93e88:	1007883a 	mov	r3,r2
   93e8c:	e0bffc17 	ldw	r2,-16(fp)
   93e90:	2085883a 	add	r2,r4,r2
   93e94:	10800204 	addi	r2,r2,8
   93e98:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   93e9c:	e0fff903 	ldbu	r3,-28(fp)
   93ea0:	e0bffc17 	ldw	r2,-16(fp)
   93ea4:	1885883a 	add	r2,r3,r2
   93ea8:	10800204 	addi	r2,r2,8
   93eac:	108000c3 	ldbu	r2,3(r2)
   93eb0:	10803fcc 	andi	r2,r2,255
   93eb4:	1004c03a 	cmpne	r2,r2,zero
   93eb8:	1000091e 	bne	r2,zero,93ee0 <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
   93ebc:	e0bffc17 	ldw	r2,-16(fp)
   93ec0:	10800283 	ldbu	r2,10(r2)
   93ec4:	1007883a 	mov	r3,r2
   93ec8:	e0bff843 	ldbu	r2,-31(fp)
   93ecc:	0084303a 	nor	r2,zero,r2
   93ed0:	1884703a 	and	r2,r3,r2
   93ed4:	1007883a 	mov	r3,r2
   93ed8:	e0bffc17 	ldw	r2,-16(fp)
   93edc:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   93ee0:	e0bffc17 	ldw	r2,-16(fp)
   93ee4:	10c00283 	ldbu	r3,10(r2)
   93ee8:	e0bff8c3 	ldbu	r2,-29(fp)
   93eec:	1884b03a 	or	r2,r3,r2
   93ef0:	1007883a 	mov	r3,r2
   93ef4:	e0bffc17 	ldw	r2,-16(fp)
   93ef8:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   93efc:	e13ff983 	ldbu	r4,-26(fp)
   93f00:	e0fff983 	ldbu	r3,-26(fp)
   93f04:	e0bffc17 	ldw	r2,-16(fp)
   93f08:	1885883a 	add	r2,r3,r2
   93f0c:	10800204 	addi	r2,r2,8
   93f10:	10c000c3 	ldbu	r3,3(r2)
   93f14:	e0bff883 	ldbu	r2,-30(fp)
   93f18:	1884b03a 	or	r2,r3,r2
   93f1c:	1007883a 	mov	r3,r2
   93f20:	e0bffc17 	ldw	r2,-16(fp)
   93f24:	2085883a 	add	r2,r4,r2
   93f28:	10800204 	addi	r2,r2,8
   93f2c:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   93f30:	e0bffa17 	ldw	r2,-24(fp)
   93f34:	10800817 	ldw	r2,32(r2)
   93f38:	1005003a 	cmpeq	r2,r2,zero
   93f3c:	1000441e 	bne	r2,zero,94050 <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   93f40:	e0bffa17 	ldw	r2,-24(fp)
   93f44:	10800817 	ldw	r2,32(r2)
   93f48:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
   93f4c:	e0bffb17 	ldw	r2,-20(fp)
   93f50:	10800017 	ldw	r2,0(r2)
   93f54:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
   93f58:	00003a06 	br	94044 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   93f5c:	e13ff903 	ldbu	r4,-28(fp)
   93f60:	e0fff903 	ldbu	r3,-28(fp)
   93f64:	e0bffc17 	ldw	r2,-16(fp)
   93f68:	1885883a 	add	r2,r3,r2
   93f6c:	10800204 	addi	r2,r2,8
   93f70:	108000c3 	ldbu	r2,3(r2)
   93f74:	1007883a 	mov	r3,r2
   93f78:	e0bff803 	ldbu	r2,-32(fp)
   93f7c:	0084303a 	nor	r2,zero,r2
   93f80:	1884703a 	and	r2,r3,r2
   93f84:	1007883a 	mov	r3,r2
   93f88:	e0bffc17 	ldw	r2,-16(fp)
   93f8c:	2085883a 	add	r2,r4,r2
   93f90:	10800204 	addi	r2,r2,8
   93f94:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   93f98:	e0fff903 	ldbu	r3,-28(fp)
   93f9c:	e0bffc17 	ldw	r2,-16(fp)
   93fa0:	1885883a 	add	r2,r3,r2
   93fa4:	10800204 	addi	r2,r2,8
   93fa8:	108000c3 	ldbu	r2,3(r2)
   93fac:	10803fcc 	andi	r2,r2,255
   93fb0:	1004c03a 	cmpne	r2,r2,zero
   93fb4:	1000091e 	bne	r2,zero,93fdc <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
   93fb8:	e0bffc17 	ldw	r2,-16(fp)
   93fbc:	10800283 	ldbu	r2,10(r2)
   93fc0:	1007883a 	mov	r3,r2
   93fc4:	e0bff843 	ldbu	r2,-31(fp)
   93fc8:	0084303a 	nor	r2,zero,r2
   93fcc:	1884703a 	and	r2,r3,r2
   93fd0:	1007883a 	mov	r3,r2
   93fd4:	e0bffc17 	ldw	r2,-16(fp)
   93fd8:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   93fdc:	e0bffc17 	ldw	r2,-16(fp)
   93fe0:	10c00283 	ldbu	r3,10(r2)
   93fe4:	e0bff8c3 	ldbu	r2,-29(fp)
   93fe8:	1884b03a 	or	r2,r3,r2
   93fec:	1007883a 	mov	r3,r2
   93ff0:	e0bffc17 	ldw	r2,-16(fp)
   93ff4:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   93ff8:	e13ff983 	ldbu	r4,-26(fp)
   93ffc:	e0fff983 	ldbu	r3,-26(fp)
   94000:	e0bffc17 	ldw	r2,-16(fp)
   94004:	1885883a 	add	r2,r3,r2
   94008:	10800204 	addi	r2,r2,8
   9400c:	10c000c3 	ldbu	r3,3(r2)
   94010:	e0bff883 	ldbu	r2,-30(fp)
   94014:	1884b03a 	or	r2,r3,r2
   94018:	1007883a 	mov	r3,r2
   9401c:	e0bffc17 	ldw	r2,-16(fp)
   94020:	2085883a 	add	r2,r4,r2
   94024:	10800204 	addi	r2,r2,8
   94028:	10c000c5 	stb	r3,3(r2)
            pevents++;
   9402c:	e0bffb17 	ldw	r2,-20(fp)
   94030:	10800104 	addi	r2,r2,4
   94034:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
   94038:	e0bffb17 	ldw	r2,-20(fp)
   9403c:	10800017 	ldw	r2,0(r2)
   94040:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   94044:	e0bffc17 	ldw	r2,-16(fp)
   94048:	1004c03a 	cmpne	r2,r2,zero
   9404c:	103fc31e 	bne	r2,zero,93f5c <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   94050:	e0fffa17 	ldw	r3,-24(fp)
   94054:	e0bffe03 	ldbu	r2,-8(fp)
   94058:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
   9405c:	e0fffa17 	ldw	r3,-24(fp)
   94060:	e0bff983 	ldbu	r2,-26(fp)
   94064:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
   94068:	e0fffa17 	ldw	r3,-24(fp)
   9406c:	e0bff943 	ldbu	r2,-27(fp)
   94070:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
   94074:	e0fffa17 	ldw	r3,-24(fp)
   94078:	e0bff8c3 	ldbu	r2,-29(fp)
   9407c:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
   94080:	e0fffa17 	ldw	r3,-24(fp)
   94084:	e0bff883 	ldbu	r2,-30(fp)
   94088:	18800d45 	stb	r2,53(r3)
   9408c:	e0bff717 	ldw	r2,-36(fp)
   94090:	e0bff215 	stw	r2,-56(fp)
   94094:	e0bff217 	ldw	r2,-56(fp)
   94098:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   9409c:	008002b4 	movhi	r2,10
   940a0:	10b3c644 	addi	r2,r2,-12519
   940a4:	10800003 	ldbu	r2,0(r2)
   940a8:	10803fcc 	andi	r2,r2,255
   940ac:	10800058 	cmpnei	r2,r2,1
   940b0:	1000011e 	bne	r2,zero,940b8 <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
   940b4:	008f2a80 	call	8f2a8 <OS_Sched>
    }
    return (OS_ERR_NONE);
   940b8:	e03fff15 	stw	zero,-4(fp)
   940bc:	e0bfff17 	ldw	r2,-4(fp)
}
   940c0:	e037883a 	mov	sp,fp
   940c4:	dfc00117 	ldw	ra,4(sp)
   940c8:	df000017 	ldw	fp,0(sp)
   940cc:	dec00204 	addi	sp,sp,8
   940d0:	f800283a 	ret

000940d4 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   940d4:	deffed04 	addi	sp,sp,-76
   940d8:	dfc01215 	stw	ra,72(sp)
   940dc:	df001115 	stw	fp,68(sp)
   940e0:	df001104 	addi	fp,sp,68
   940e4:	e13ffb15 	stw	r4,-20(fp)
   940e8:	e17ffc15 	stw	r5,-16(fp)
   940ec:	e1bffd15 	stw	r6,-12(fp)
   940f0:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   940f4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   940f8:	e0bffe03 	ldbu	r2,-8(fp)
   940fc:	10800570 	cmpltui	r2,r2,21
   94100:	1000031e 	bne	r2,zero,94110 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   94104:	00800a84 	movi	r2,42
   94108:	e0bfff15 	stw	r2,-4(fp)
   9410c:	00006006 	br	94290 <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94110:	0005303a 	rdctl	r2,status
   94114:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94118:	e0fff717 	ldw	r3,-36(fp)
   9411c:	00bfff84 	movi	r2,-2
   94120:	1884703a 	and	r2,r3,r2
   94124:	1001703a 	wrctl	status,r2
  
  return context;
   94128:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   9412c:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   94130:	008002b4 	movhi	r2,10
   94134:	10b3d404 	addi	r2,r2,-12464
   94138:	10800003 	ldbu	r2,0(r2)
   9413c:	10803fcc 	andi	r2,r2,255
   94140:	1005003a 	cmpeq	r2,r2,zero
   94144:	1000071e 	bne	r2,zero,94164 <OSTaskCreate+0x90>
   94148:	e0bff817 	ldw	r2,-32(fp)
   9414c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94150:	e0bff617 	ldw	r2,-40(fp)
   94154:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   94158:	00800f04 	movi	r2,60
   9415c:	e0bfff15 	stw	r2,-4(fp)
   94160:	00004b06 	br	94290 <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   94164:	e0bffe03 	ldbu	r2,-8(fp)
   94168:	00c002f4 	movhi	r3,11
   9416c:	18f0e504 	addi	r3,r3,-15468
   94170:	1085883a 	add	r2,r2,r2
   94174:	1085883a 	add	r2,r2,r2
   94178:	10c5883a 	add	r2,r2,r3
   9417c:	10800017 	ldw	r2,0(r2)
   94180:	1004c03a 	cmpne	r2,r2,zero
   94184:	10003c1e 	bne	r2,zero,94278 <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   94188:	e0bffe03 	ldbu	r2,-8(fp)
   9418c:	00c002f4 	movhi	r3,11
   94190:	18f0e504 	addi	r3,r3,-15468
   94194:	1085883a 	add	r2,r2,r2
   94198:	1085883a 	add	r2,r2,r2
   9419c:	10c7883a 	add	r3,r2,r3
   941a0:	00800044 	movi	r2,1
   941a4:	18800015 	stw	r2,0(r3)
   941a8:	e0bff817 	ldw	r2,-32(fp)
   941ac:	e0bff515 	stw	r2,-44(fp)
   941b0:	e0bff517 	ldw	r2,-44(fp)
   941b4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   941b8:	e13ffb17 	ldw	r4,-20(fp)
   941bc:	e17ffc17 	ldw	r5,-16(fp)
   941c0:	e1bffd17 	ldw	r6,-12(fp)
   941c4:	000f883a 	mov	r7,zero
   941c8:	0097d640 	call	97d64 <OSTaskStkInit>
   941cc:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   941d0:	e13ffe03 	ldbu	r4,-8(fp)
   941d4:	d8000015 	stw	zero,0(sp)
   941d8:	d8000115 	stw	zero,4(sp)
   941dc:	d8000215 	stw	zero,8(sp)
   941e0:	e17ffa17 	ldw	r5,-24(fp)
   941e4:	000d883a 	mov	r6,zero
   941e8:	000f883a 	mov	r7,zero
   941ec:	008f6b00 	call	8f6b0 <OS_TCBInit>
   941f0:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
   941f4:	e0bff903 	ldbu	r2,-28(fp)
   941f8:	1004c03a 	cmpne	r2,r2,zero
   941fc:	1000081e 	bne	r2,zero,94220 <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   94200:	008002b4 	movhi	r2,10
   94204:	10b3c644 	addi	r2,r2,-12519
   94208:	10800003 	ldbu	r2,0(r2)
   9420c:	10803fcc 	andi	r2,r2,255
   94210:	10800058 	cmpnei	r2,r2,1
   94214:	1000151e 	bne	r2,zero,9426c <OSTaskCreate+0x198>
                OS_Sched();
   94218:	008f2a80 	call	8f2a8 <OS_Sched>
   9421c:	00001306 	br	9426c <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94220:	0005303a 	rdctl	r2,status
   94224:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94228:	e0fff417 	ldw	r3,-48(fp)
   9422c:	00bfff84 	movi	r2,-2
   94230:	1884703a 	and	r2,r3,r2
   94234:	1001703a 	wrctl	status,r2
  
  return context;
   94238:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   9423c:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   94240:	e0bffe03 	ldbu	r2,-8(fp)
   94244:	00c002f4 	movhi	r3,11
   94248:	18f0e504 	addi	r3,r3,-15468
   9424c:	1085883a 	add	r2,r2,r2
   94250:	1085883a 	add	r2,r2,r2
   94254:	10c5883a 	add	r2,r2,r3
   94258:	10000015 	stw	zero,0(r2)
   9425c:	e0bff817 	ldw	r2,-32(fp)
   94260:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94264:	e0bff317 	ldw	r2,-52(fp)
   94268:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   9426c:	e0bff903 	ldbu	r2,-28(fp)
   94270:	e0bfff15 	stw	r2,-4(fp)
   94274:	00000606 	br	94290 <OSTaskCreate+0x1bc>
   94278:	e0bff817 	ldw	r2,-32(fp)
   9427c:	e0bff215 	stw	r2,-56(fp)
   94280:	e0bff217 	ldw	r2,-56(fp)
   94284:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   94288:	00800a04 	movi	r2,40
   9428c:	e0bfff15 	stw	r2,-4(fp)
   94290:	e0bfff17 	ldw	r2,-4(fp)
}
   94294:	e037883a 	mov	sp,fp
   94298:	dfc00117 	ldw	ra,4(sp)
   9429c:	df000017 	ldw	fp,0(sp)
   942a0:	dec00204 	addi	sp,sp,8
   942a4:	f800283a 	ret

000942a8 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   942a8:	deffeb04 	addi	sp,sp,-84
   942ac:	dfc01415 	stw	ra,80(sp)
   942b0:	df001315 	stw	fp,76(sp)
   942b4:	df001304 	addi	fp,sp,76
   942b8:	e13ff915 	stw	r4,-28(fp)
   942bc:	e17ffa15 	stw	r5,-24(fp)
   942c0:	e1bffb15 	stw	r6,-20(fp)
   942c4:	e0800217 	ldw	r2,8(fp)
   942c8:	e0c00617 	ldw	r3,24(fp)
   942cc:	e1fffc05 	stb	r7,-16(fp)
   942d0:	e0bffd0d 	sth	r2,-12(fp)
   942d4:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   942d8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   942dc:	e0bffc03 	ldbu	r2,-16(fp)
   942e0:	10800570 	cmpltui	r2,r2,21
   942e4:	1000031e 	bne	r2,zero,942f4 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   942e8:	00800a84 	movi	r2,42
   942ec:	e0bfff15 	stw	r2,-4(fp)
   942f0:	00006706 	br	94490 <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   942f4:	0005303a 	rdctl	r2,status
   942f8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   942fc:	e0fff517 	ldw	r3,-44(fp)
   94300:	00bfff84 	movi	r2,-2
   94304:	1884703a 	and	r2,r3,r2
   94308:	1001703a 	wrctl	status,r2
  
  return context;
   9430c:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   94310:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   94314:	008002b4 	movhi	r2,10
   94318:	10b3d404 	addi	r2,r2,-12464
   9431c:	10800003 	ldbu	r2,0(r2)
   94320:	10803fcc 	andi	r2,r2,255
   94324:	1005003a 	cmpeq	r2,r2,zero
   94328:	1000071e 	bne	r2,zero,94348 <OSTaskCreateExt+0xa0>
   9432c:	e0bff617 	ldw	r2,-40(fp)
   94330:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94334:	e0bff417 	ldw	r2,-48(fp)
   94338:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   9433c:	00800f04 	movi	r2,60
   94340:	e0bfff15 	stw	r2,-4(fp)
   94344:	00005206 	br	94490 <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   94348:	e0bffc03 	ldbu	r2,-16(fp)
   9434c:	00c002f4 	movhi	r3,11
   94350:	18f0e504 	addi	r3,r3,-15468
   94354:	1085883a 	add	r2,r2,r2
   94358:	1085883a 	add	r2,r2,r2
   9435c:	10c5883a 	add	r2,r2,r3
   94360:	10800017 	ldw	r2,0(r2)
   94364:	1004c03a 	cmpne	r2,r2,zero
   94368:	1000431e 	bne	r2,zero,94478 <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   9436c:	e0bffc03 	ldbu	r2,-16(fp)
   94370:	00c002f4 	movhi	r3,11
   94374:	18f0e504 	addi	r3,r3,-15468
   94378:	1085883a 	add	r2,r2,r2
   9437c:	1085883a 	add	r2,r2,r2
   94380:	10c7883a 	add	r3,r2,r3
   94384:	00800044 	movi	r2,1
   94388:	18800015 	stw	r2,0(r3)
   9438c:	e0bff617 	ldw	r2,-40(fp)
   94390:	e0bff315 	stw	r2,-52(fp)
   94394:	e0bff317 	ldw	r2,-52(fp)
   94398:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   9439c:	e1bffe0b 	ldhu	r6,-8(fp)
   943a0:	e1000317 	ldw	r4,12(fp)
   943a4:	e1400417 	ldw	r5,16(fp)
   943a8:	00955240 	call	95524 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   943ac:	e1fffe0b 	ldhu	r7,-8(fp)
   943b0:	e13ff917 	ldw	r4,-28(fp)
   943b4:	e17ffa17 	ldw	r5,-24(fp)
   943b8:	e1bffb17 	ldw	r6,-20(fp)
   943bc:	0097d640 	call	97d64 <OSTaskStkInit>
   943c0:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   943c4:	e13ffc03 	ldbu	r4,-16(fp)
   943c8:	e1fffd0b 	ldhu	r7,-12(fp)
   943cc:	e0fffe0b 	ldhu	r3,-8(fp)
   943d0:	e0800417 	ldw	r2,16(fp)
   943d4:	d8800015 	stw	r2,0(sp)
   943d8:	e0800517 	ldw	r2,20(fp)
   943dc:	d8800115 	stw	r2,4(sp)
   943e0:	d8c00215 	stw	r3,8(sp)
   943e4:	e17ff817 	ldw	r5,-32(fp)
   943e8:	e1800317 	ldw	r6,12(fp)
   943ec:	008f6b00 	call	8f6b0 <OS_TCBInit>
   943f0:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
   943f4:	e0bff703 	ldbu	r2,-36(fp)
   943f8:	1004c03a 	cmpne	r2,r2,zero
   943fc:	1000081e 	bne	r2,zero,94420 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   94400:	008002b4 	movhi	r2,10
   94404:	10b3c644 	addi	r2,r2,-12519
   94408:	10800003 	ldbu	r2,0(r2)
   9440c:	10803fcc 	andi	r2,r2,255
   94410:	10800058 	cmpnei	r2,r2,1
   94414:	1000151e 	bne	r2,zero,9446c <OSTaskCreateExt+0x1c4>
                OS_Sched();
   94418:	008f2a80 	call	8f2a8 <OS_Sched>
   9441c:	00001306 	br	9446c <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94420:	0005303a 	rdctl	r2,status
   94424:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94428:	e0fff217 	ldw	r3,-56(fp)
   9442c:	00bfff84 	movi	r2,-2
   94430:	1884703a 	and	r2,r3,r2
   94434:	1001703a 	wrctl	status,r2
  
  return context;
   94438:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   9443c:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   94440:	e0bffc03 	ldbu	r2,-16(fp)
   94444:	00c002f4 	movhi	r3,11
   94448:	18f0e504 	addi	r3,r3,-15468
   9444c:	1085883a 	add	r2,r2,r2
   94450:	1085883a 	add	r2,r2,r2
   94454:	10c5883a 	add	r2,r2,r3
   94458:	10000015 	stw	zero,0(r2)
   9445c:	e0bff617 	ldw	r2,-40(fp)
   94460:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94464:	e0bff117 	ldw	r2,-60(fp)
   94468:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   9446c:	e0bff703 	ldbu	r2,-36(fp)
   94470:	e0bfff15 	stw	r2,-4(fp)
   94474:	00000606 	br	94490 <OSTaskCreateExt+0x1e8>
   94478:	e0bff617 	ldw	r2,-40(fp)
   9447c:	e0bff015 	stw	r2,-64(fp)
   94480:	e0bff017 	ldw	r2,-64(fp)
   94484:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   94488:	00800a04 	movi	r2,40
   9448c:	e0bfff15 	stw	r2,-4(fp)
   94490:	e0bfff17 	ldw	r2,-4(fp)
}
   94494:	e037883a 	mov	sp,fp
   94498:	dfc00117 	ldw	ra,4(sp)
   9449c:	df000017 	ldw	fp,0(sp)
   944a0:	dec00204 	addi	sp,sp,8
   944a4:	f800283a 	ret

000944a8 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   944a8:	defff304 	addi	sp,sp,-52
   944ac:	dfc00c15 	stw	ra,48(sp)
   944b0:	df000b15 	stw	fp,44(sp)
   944b4:	df000b04 	addi	fp,sp,44
   944b8:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   944bc:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   944c0:	008002b4 	movhi	r2,10
   944c4:	10b3d404 	addi	r2,r2,-12464
   944c8:	10800003 	ldbu	r2,0(r2)
   944cc:	10803fcc 	andi	r2,r2,255
   944d0:	1005003a 	cmpeq	r2,r2,zero
   944d4:	1000031e 	bne	r2,zero,944e4 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
   944d8:	00801004 	movi	r2,64
   944dc:	e0bfff15 	stw	r2,-4(fp)
   944e0:	0000ee06 	br	9489c <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   944e4:	e0bffe03 	ldbu	r2,-8(fp)
   944e8:	10800518 	cmpnei	r2,r2,20
   944ec:	1000031e 	bne	r2,zero,944fc <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
   944f0:	00800f84 	movi	r2,62
   944f4:	e0bfff15 	stw	r2,-4(fp)
   944f8:	0000e806 	br	9489c <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   944fc:	e0bffe03 	ldbu	r2,-8(fp)
   94500:	10800530 	cmpltui	r2,r2,20
   94504:	1000061e 	bne	r2,zero,94520 <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
   94508:	e0bffe03 	ldbu	r2,-8(fp)
   9450c:	10803fe0 	cmpeqi	r2,r2,255
   94510:	1000031e 	bne	r2,zero,94520 <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
   94514:	00800a84 	movi	r2,42
   94518:	e0bfff15 	stw	r2,-4(fp)
   9451c:	0000df06 	br	9489c <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94520:	0005303a 	rdctl	r2,status
   94524:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94528:	e0fffa17 	ldw	r3,-24(fp)
   9452c:	00bfff84 	movi	r2,-2
   94530:	1884703a 	and	r2,r3,r2
   94534:	1001703a 	wrctl	status,r2
  
  return context;
   94538:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   9453c:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   94540:	e0bffe03 	ldbu	r2,-8(fp)
   94544:	10803fd8 	cmpnei	r2,r2,255
   94548:	1000051e 	bne	r2,zero,94560 <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   9454c:	008002b4 	movhi	r2,10
   94550:	10b3d504 	addi	r2,r2,-12460
   94554:	10800017 	ldw	r2,0(r2)
   94558:	10800c83 	ldbu	r2,50(r2)
   9455c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   94560:	e0bffe03 	ldbu	r2,-8(fp)
   94564:	00c002f4 	movhi	r3,11
   94568:	18f0e504 	addi	r3,r3,-15468
   9456c:	1085883a 	add	r2,r2,r2
   94570:	1085883a 	add	r2,r2,r2
   94574:	10c5883a 	add	r2,r2,r3
   94578:	10800017 	ldw	r2,0(r2)
   9457c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   94580:	e0bffc17 	ldw	r2,-16(fp)
   94584:	1004c03a 	cmpne	r2,r2,zero
   94588:	1000071e 	bne	r2,zero,945a8 <OSTaskDel+0x100>
   9458c:	e0bffb17 	ldw	r2,-20(fp)
   94590:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94594:	e0bff917 	ldw	r2,-28(fp)
   94598:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   9459c:	008010c4 	movi	r2,67
   945a0:	e0bfff15 	stw	r2,-4(fp)
   945a4:	0000bd06 	br	9489c <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   945a8:	e0bffc17 	ldw	r2,-16(fp)
   945ac:	10800058 	cmpnei	r2,r2,1
   945b0:	1000071e 	bne	r2,zero,945d0 <OSTaskDel+0x128>
   945b4:	e0bffb17 	ldw	r2,-20(fp)
   945b8:	e0bff815 	stw	r2,-32(fp)
   945bc:	e0bff817 	ldw	r2,-32(fp)
   945c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   945c4:	00800f44 	movi	r2,61
   945c8:	e0bfff15 	stw	r2,-4(fp)
   945cc:	0000b306 	br	9489c <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   945d0:	e0bffc17 	ldw	r2,-16(fp)
   945d4:	10800d03 	ldbu	r2,52(r2)
   945d8:	11003fcc 	andi	r4,r2,255
   945dc:	e0bffc17 	ldw	r2,-16(fp)
   945e0:	10800d03 	ldbu	r2,52(r2)
   945e4:	10c03fcc 	andi	r3,r2,255
   945e8:	008002b4 	movhi	r2,10
   945ec:	10b3d244 	addi	r2,r2,-12471
   945f0:	10c5883a 	add	r2,r2,r3
   945f4:	10800003 	ldbu	r2,0(r2)
   945f8:	1007883a 	mov	r3,r2
   945fc:	e0bffc17 	ldw	r2,-16(fp)
   94600:	10800d43 	ldbu	r2,53(r2)
   94604:	0084303a 	nor	r2,zero,r2
   94608:	1884703a 	and	r2,r3,r2
   9460c:	1007883a 	mov	r3,r2
   94610:	008002b4 	movhi	r2,10
   94614:	10b3d244 	addi	r2,r2,-12471
   94618:	1105883a 	add	r2,r2,r4
   9461c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   94620:	e0bffc17 	ldw	r2,-16(fp)
   94624:	10800d03 	ldbu	r2,52(r2)
   94628:	10c03fcc 	andi	r3,r2,255
   9462c:	008002b4 	movhi	r2,10
   94630:	10b3d244 	addi	r2,r2,-12471
   94634:	10c5883a 	add	r2,r2,r3
   94638:	10800003 	ldbu	r2,0(r2)
   9463c:	10803fcc 	andi	r2,r2,255
   94640:	1004c03a 	cmpne	r2,r2,zero
   94644:	10000c1e 	bne	r2,zero,94678 <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   94648:	e0bffc17 	ldw	r2,-16(fp)
   9464c:	10800d83 	ldbu	r2,54(r2)
   94650:	0084303a 	nor	r2,zero,r2
   94654:	1007883a 	mov	r3,r2
   94658:	008002b4 	movhi	r2,10
   9465c:	10b3d204 	addi	r2,r2,-12472
   94660:	10800003 	ldbu	r2,0(r2)
   94664:	1884703a 	and	r2,r3,r2
   94668:	1007883a 	mov	r3,r2
   9466c:	008002b4 	movhi	r2,10
   94670:	10b3d204 	addi	r2,r2,-12472
   94674:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   94678:	e0bffc17 	ldw	r2,-16(fp)
   9467c:	10800717 	ldw	r2,28(r2)
   94680:	1005003a 	cmpeq	r2,r2,zero
   94684:	1000041e 	bne	r2,zero,94698 <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   94688:	e0bffc17 	ldw	r2,-16(fp)
   9468c:	11400717 	ldw	r5,28(r2)
   94690:	e13ffc17 	ldw	r4,-16(fp)
   94694:	008ec600 	call	8ec60 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   94698:	e0bffc17 	ldw	r2,-16(fp)
   9469c:	10800817 	ldw	r2,32(r2)
   946a0:	1005003a 	cmpeq	r2,r2,zero
   946a4:	1000041e 	bne	r2,zero,946b8 <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   946a8:	e0bffc17 	ldw	r2,-16(fp)
   946ac:	11400817 	ldw	r5,32(r2)
   946b0:	e13ffc17 	ldw	r4,-16(fp)
   946b4:	008ed180 	call	8ed18 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   946b8:	e0bffc17 	ldw	r2,-16(fp)
   946bc:	10800a17 	ldw	r2,40(r2)
   946c0:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   946c4:	e0bffd17 	ldw	r2,-12(fp)
   946c8:	1005003a 	cmpeq	r2,r2,zero
   946cc:	1000021e 	bne	r2,zero,946d8 <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   946d0:	e13ffd17 	ldw	r4,-12(fp)
   946d4:	00913ac0 	call	913ac <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   946d8:	e0bffc17 	ldw	r2,-16(fp)
   946dc:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   946e0:	e0bffc17 	ldw	r2,-16(fp)
   946e4:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   946e8:	e0bffc17 	ldw	r2,-16(fp)
   946ec:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   946f0:	008002b4 	movhi	r2,10
   946f4:	10b3c604 	addi	r2,r2,-12520
   946f8:	10800003 	ldbu	r2,0(r2)
   946fc:	10803fcc 	andi	r2,r2,255
   94700:	10803fe0 	cmpeqi	r2,r2,255
   94704:	1000081e 	bne	r2,zero,94728 <OSTaskDel+0x280>
        OSLockNesting++;
   94708:	008002b4 	movhi	r2,10
   9470c:	10b3c604 	addi	r2,r2,-12520
   94710:	10800003 	ldbu	r2,0(r2)
   94714:	10800044 	addi	r2,r2,1
   94718:	1007883a 	mov	r3,r2
   9471c:	008002b4 	movhi	r2,10
   94720:	10b3c604 	addi	r2,r2,-12520
   94724:	10c00005 	stb	r3,0(r2)
   94728:	e0bffb17 	ldw	r2,-20(fp)
   9472c:	e0bff715 	stw	r2,-36(fp)
   94730:	e0bff717 	ldw	r2,-36(fp)
   94734:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   94738:	008e84c0 	call	8e84c <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9473c:	0005303a 	rdctl	r2,status
   94740:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94744:	e0fff617 	ldw	r3,-40(fp)
   94748:	00bfff84 	movi	r2,-2
   9474c:	1884703a 	and	r2,r3,r2
   94750:	1001703a 	wrctl	status,r2
  
  return context;
   94754:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   94758:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   9475c:	008002b4 	movhi	r2,10
   94760:	10b3c604 	addi	r2,r2,-12520
   94764:	10800003 	ldbu	r2,0(r2)
   94768:	10803fcc 	andi	r2,r2,255
   9476c:	1005003a 	cmpeq	r2,r2,zero
   94770:	1000081e 	bne	r2,zero,94794 <OSTaskDel+0x2ec>
        OSLockNesting--;
   94774:	008002b4 	movhi	r2,10
   94778:	10b3c604 	addi	r2,r2,-12520
   9477c:	10800003 	ldbu	r2,0(r2)
   94780:	10bfffc4 	addi	r2,r2,-1
   94784:	1007883a 	mov	r3,r2
   94788:	008002b4 	movhi	r2,10
   9478c:	10b3c604 	addi	r2,r2,-12520
   94790:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   94794:	e13ffc17 	ldw	r4,-16(fp)
   94798:	00980940 	call	98094 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   9479c:	008002b4 	movhi	r2,10
   947a0:	10b3ce44 	addi	r2,r2,-12487
   947a4:	10800003 	ldbu	r2,0(r2)
   947a8:	10bfffc4 	addi	r2,r2,-1
   947ac:	1007883a 	mov	r3,r2
   947b0:	008002b4 	movhi	r2,10
   947b4:	10b3ce44 	addi	r2,r2,-12487
   947b8:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   947bc:	e0bffe03 	ldbu	r2,-8(fp)
   947c0:	00c002f4 	movhi	r3,11
   947c4:	18f0e504 	addi	r3,r3,-15468
   947c8:	1085883a 	add	r2,r2,r2
   947cc:	1085883a 	add	r2,r2,r2
   947d0:	10c5883a 	add	r2,r2,r3
   947d4:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   947d8:	e0bffc17 	ldw	r2,-16(fp)
   947dc:	10800617 	ldw	r2,24(r2)
   947e0:	1004c03a 	cmpne	r2,r2,zero
   947e4:	1000091e 	bne	r2,zero,9480c <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   947e8:	e0bffc17 	ldw	r2,-16(fp)
   947ec:	10800517 	ldw	r2,20(r2)
   947f0:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   947f4:	e0bffc17 	ldw	r2,-16(fp)
   947f8:	10c00517 	ldw	r3,20(r2)
   947fc:	008002b4 	movhi	r2,10
   94800:	10b3c904 	addi	r2,r2,-12508
   94804:	10c00015 	stw	r3,0(r2)
   94808:	00000a06 	br	94834 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   9480c:	e0bffc17 	ldw	r2,-16(fp)
   94810:	10c00617 	ldw	r3,24(r2)
   94814:	e0bffc17 	ldw	r2,-16(fp)
   94818:	10800517 	ldw	r2,20(r2)
   9481c:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   94820:	e0bffc17 	ldw	r2,-16(fp)
   94824:	10c00517 	ldw	r3,20(r2)
   94828:	e0bffc17 	ldw	r2,-16(fp)
   9482c:	10800617 	ldw	r2,24(r2)
   94830:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   94834:	008002b4 	movhi	r2,10
   94838:	10b3cd04 	addi	r2,r2,-12492
   9483c:	10c00017 	ldw	r3,0(r2)
   94840:	e0bffc17 	ldw	r2,-16(fp)
   94844:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   94848:	00c002b4 	movhi	r3,10
   9484c:	18f3cd04 	addi	r3,r3,-12492
   94850:	e0bffc17 	ldw	r2,-16(fp)
   94854:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   94858:	e0fffc17 	ldw	r3,-16(fp)
   9485c:	00800fc4 	movi	r2,63
   94860:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   94864:	e0bffc17 	ldw	r2,-16(fp)
   94868:	10001345 	stb	zero,77(r2)
   9486c:	e0bffb17 	ldw	r2,-20(fp)
   94870:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94874:	e0bff517 	ldw	r2,-44(fp)
   94878:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   9487c:	008002b4 	movhi	r2,10
   94880:	10b3c644 	addi	r2,r2,-12519
   94884:	10800003 	ldbu	r2,0(r2)
   94888:	10803fcc 	andi	r2,r2,255
   9488c:	10800058 	cmpnei	r2,r2,1
   94890:	1000011e 	bne	r2,zero,94898 <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
   94894:	008f2a80 	call	8f2a8 <OS_Sched>
    }
    return (OS_ERR_NONE);
   94898:	e03fff15 	stw	zero,-4(fp)
   9489c:	e0bfff17 	ldw	r2,-4(fp)
}
   948a0:	e037883a 	mov	sp,fp
   948a4:	dfc00117 	ldw	ra,4(sp)
   948a8:	df000017 	ldw	fp,0(sp)
   948ac:	dec00204 	addi	sp,sp,8
   948b0:	f800283a 	ret

000948b4 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   948b4:	defff404 	addi	sp,sp,-48
   948b8:	df000b15 	stw	fp,44(sp)
   948bc:	df000b04 	addi	fp,sp,44
   948c0:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   948c4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   948c8:	e0bffe03 	ldbu	r2,-8(fp)
   948cc:	10800518 	cmpnei	r2,r2,20
   948d0:	1000031e 	bne	r2,zero,948e0 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   948d4:	00800f84 	movi	r2,62
   948d8:	e0bfff15 	stw	r2,-4(fp)
   948dc:	00004c06 	br	94a10 <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   948e0:	e0bffe03 	ldbu	r2,-8(fp)
   948e4:	10800530 	cmpltui	r2,r2,20
   948e8:	1000061e 	bne	r2,zero,94904 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
   948ec:	e0bffe03 	ldbu	r2,-8(fp)
   948f0:	10803fe0 	cmpeqi	r2,r2,255
   948f4:	1000031e 	bne	r2,zero,94904 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
   948f8:	00800a84 	movi	r2,42
   948fc:	e0bfff15 	stw	r2,-4(fp)
   94900:	00004306 	br	94a10 <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   94904:	e0bffe03 	ldbu	r2,-8(fp)
   94908:	10803fd8 	cmpnei	r2,r2,255
   9490c:	1000141e 	bne	r2,zero,94960 <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94910:	0005303a 	rdctl	r2,status
   94914:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94918:	e0fffa17 	ldw	r3,-24(fp)
   9491c:	00bfff84 	movi	r2,-2
   94920:	1884703a 	and	r2,r3,r2
   94924:	1001703a 	wrctl	status,r2
  
  return context;
   94928:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   9492c:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   94930:	008002b4 	movhi	r2,10
   94934:	10b3d504 	addi	r2,r2,-12460
   94938:	10800017 	ldw	r2,0(r2)
   9493c:	10800dc3 	ldbu	r2,55(r2)
   94940:	e0bffd05 	stb	r2,-12(fp)
   94944:	e0bffb17 	ldw	r2,-20(fp)
   94948:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9494c:	e0bff917 	ldw	r2,-28(fp)
   94950:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   94954:	e0bffd03 	ldbu	r2,-12(fp)
   94958:	e0bfff15 	stw	r2,-4(fp)
   9495c:	00002c06 	br	94a10 <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94960:	0005303a 	rdctl	r2,status
   94964:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94968:	e0fff817 	ldw	r3,-32(fp)
   9496c:	00bfff84 	movi	r2,-2
   94970:	1884703a 	and	r2,r3,r2
   94974:	1001703a 	wrctl	status,r2
  
  return context;
   94978:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   9497c:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
   94980:	e0bffe03 	ldbu	r2,-8(fp)
   94984:	00c002f4 	movhi	r3,11
   94988:	18f0e504 	addi	r3,r3,-15468
   9498c:	1085883a 	add	r2,r2,r2
   94990:	1085883a 	add	r2,r2,r2
   94994:	10c5883a 	add	r2,r2,r3
   94998:	10800017 	ldw	r2,0(r2)
   9499c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   949a0:	e0bffc17 	ldw	r2,-16(fp)
   949a4:	1004c03a 	cmpne	r2,r2,zero
   949a8:	1000071e 	bne	r2,zero,949c8 <OSTaskDelReq+0x114>
   949ac:	e0bffb17 	ldw	r2,-20(fp)
   949b0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   949b4:	e0bff717 	ldw	r2,-36(fp)
   949b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   949bc:	008010c4 	movi	r2,67
   949c0:	e0bfff15 	stw	r2,-4(fp)
   949c4:	00001206 	br	94a10 <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   949c8:	e0bffc17 	ldw	r2,-16(fp)
   949cc:	10800058 	cmpnei	r2,r2,1
   949d0:	1000071e 	bne	r2,zero,949f0 <OSTaskDelReq+0x13c>
   949d4:	e0bffb17 	ldw	r2,-20(fp)
   949d8:	e0bff615 	stw	r2,-40(fp)
   949dc:	e0bff617 	ldw	r2,-40(fp)
   949e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   949e4:	00800f44 	movi	r2,61
   949e8:	e0bfff15 	stw	r2,-4(fp)
   949ec:	00000806 	br	94a10 <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   949f0:	e0fffc17 	ldw	r3,-16(fp)
   949f4:	00800fc4 	movi	r2,63
   949f8:	18800dc5 	stb	r2,55(r3)
   949fc:	e0bffb17 	ldw	r2,-20(fp)
   94a00:	e0bff515 	stw	r2,-44(fp)
   94a04:	e0bff517 	ldw	r2,-44(fp)
   94a08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   94a0c:	e03fff15 	stw	zero,-4(fp)
   94a10:	e0bfff17 	ldw	r2,-4(fp)
}
   94a14:	e037883a 	mov	sp,fp
   94a18:	df000017 	ldw	fp,0(sp)
   94a1c:	dec00104 	addi	sp,sp,4
   94a20:	f800283a 	ret

00094a24 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   94a24:	defff304 	addi	sp,sp,-52
   94a28:	dfc00c15 	stw	ra,48(sp)
   94a2c:	df000b15 	stw	fp,44(sp)
   94a30:	df000b04 	addi	fp,sp,44
   94a34:	e17ffd15 	stw	r5,-12(fp)
   94a38:	e1bffe15 	stw	r6,-8(fp)
   94a3c:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   94a40:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   94a44:	e0bffe17 	ldw	r2,-8(fp)
   94a48:	1004c03a 	cmpne	r2,r2,zero
   94a4c:	1000021e 	bne	r2,zero,94a58 <OSTaskNameGet+0x34>
        return (0);
   94a50:	e03fff15 	stw	zero,-4(fp)
   94a54:	00005b06 	br	94bc4 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   94a58:	e0bffc03 	ldbu	r2,-16(fp)
   94a5c:	10800570 	cmpltui	r2,r2,21
   94a60:	1000081e 	bne	r2,zero,94a84 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   94a64:	e0bffc03 	ldbu	r2,-16(fp)
   94a68:	10803fe0 	cmpeqi	r2,r2,255
   94a6c:	1000051e 	bne	r2,zero,94a84 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   94a70:	e0fffe17 	ldw	r3,-8(fp)
   94a74:	00800a84 	movi	r2,42
   94a78:	18800005 	stb	r2,0(r3)
            return (0);
   94a7c:	e03fff15 	stw	zero,-4(fp)
   94a80:	00005006 	br	94bc4 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   94a84:	e0bffd17 	ldw	r2,-12(fp)
   94a88:	1004c03a 	cmpne	r2,r2,zero
   94a8c:	1000051e 	bne	r2,zero,94aa4 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   94a90:	e0fffe17 	ldw	r3,-8(fp)
   94a94:	00800304 	movi	r2,12
   94a98:	18800005 	stb	r2,0(r3)
        return (0);
   94a9c:	e03fff15 	stw	zero,-4(fp)
   94aa0:	00004806 	br	94bc4 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   94aa4:	008002b4 	movhi	r2,10
   94aa8:	10b3d404 	addi	r2,r2,-12464
   94aac:	10800003 	ldbu	r2,0(r2)
   94ab0:	10803fcc 	andi	r2,r2,255
   94ab4:	1005003a 	cmpeq	r2,r2,zero
   94ab8:	1000051e 	bne	r2,zero,94ad0 <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
   94abc:	e0fffe17 	ldw	r3,-8(fp)
   94ac0:	00800444 	movi	r2,17
   94ac4:	18800005 	stb	r2,0(r3)
        return (0);
   94ac8:	e03fff15 	stw	zero,-4(fp)
   94acc:	00003d06 	br	94bc4 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94ad0:	0005303a 	rdctl	r2,status
   94ad4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94ad8:	e0fff817 	ldw	r3,-32(fp)
   94adc:	00bfff84 	movi	r2,-2
   94ae0:	1884703a 	and	r2,r3,r2
   94ae4:	1001703a 	wrctl	status,r2
  
  return context;
   94ae8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   94aec:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   94af0:	e0bffc03 	ldbu	r2,-16(fp)
   94af4:	10803fd8 	cmpnei	r2,r2,255
   94af8:	1000051e 	bne	r2,zero,94b10 <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
   94afc:	008002b4 	movhi	r2,10
   94b00:	10b3d504 	addi	r2,r2,-12460
   94b04:	10800017 	ldw	r2,0(r2)
   94b08:	10800c83 	ldbu	r2,50(r2)
   94b0c:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   94b10:	e0bffc03 	ldbu	r2,-16(fp)
   94b14:	00c002f4 	movhi	r3,11
   94b18:	18f0e504 	addi	r3,r3,-15468
   94b1c:	1085883a 	add	r2,r2,r2
   94b20:	1085883a 	add	r2,r2,r2
   94b24:	10c5883a 	add	r2,r2,r3
   94b28:	10800017 	ldw	r2,0(r2)
   94b2c:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   94b30:	e0bffb17 	ldw	r2,-20(fp)
   94b34:	1004c03a 	cmpne	r2,r2,zero
   94b38:	1000091e 	bne	r2,zero,94b60 <OSTaskNameGet+0x13c>
   94b3c:	e0bff917 	ldw	r2,-28(fp)
   94b40:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94b44:	e0bff717 	ldw	r2,-36(fp)
   94b48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   94b4c:	e0fffe17 	ldw	r3,-8(fp)
   94b50:	008010c4 	movi	r2,67
   94b54:	18800005 	stb	r2,0(r3)
        return (0);
   94b58:	e03fff15 	stw	zero,-4(fp)
   94b5c:	00001906 	br	94bc4 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   94b60:	e0bffb17 	ldw	r2,-20(fp)
   94b64:	10800058 	cmpnei	r2,r2,1
   94b68:	1000091e 	bne	r2,zero,94b90 <OSTaskNameGet+0x16c>
   94b6c:	e0bff917 	ldw	r2,-28(fp)
   94b70:	e0bff615 	stw	r2,-40(fp)
   94b74:	e0bff617 	ldw	r2,-40(fp)
   94b78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   94b7c:	e0fffe17 	ldw	r3,-8(fp)
   94b80:	008010c4 	movi	r2,67
   94b84:	18800005 	stb	r2,0(r3)
        return (0);
   94b88:	e03fff15 	stw	zero,-4(fp)
   94b8c:	00000d06 	br	94bc4 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   94b90:	e0bffb17 	ldw	r2,-20(fp)
   94b94:	11401304 	addi	r5,r2,76
   94b98:	e13ffd17 	ldw	r4,-12(fp)
   94b9c:	008f3ec0 	call	8f3ec <OS_StrCopy>
   94ba0:	e0bffa05 	stb	r2,-24(fp)
   94ba4:	e0bff917 	ldw	r2,-28(fp)
   94ba8:	e0bff515 	stw	r2,-44(fp)
   94bac:	e0bff517 	ldw	r2,-44(fp)
   94bb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   94bb4:	e0bffe17 	ldw	r2,-8(fp)
   94bb8:	10000005 	stb	zero,0(r2)
    return (len);
   94bbc:	e0bffa03 	ldbu	r2,-24(fp)
   94bc0:	e0bfff15 	stw	r2,-4(fp)
   94bc4:	e0bfff17 	ldw	r2,-4(fp)
}
   94bc8:	e037883a 	mov	sp,fp
   94bcc:	dfc00117 	ldw	ra,4(sp)
   94bd0:	df000017 	ldw	fp,0(sp)
   94bd4:	dec00204 	addi	sp,sp,8
   94bd8:	f800283a 	ret

00094bdc <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   94bdc:	defff304 	addi	sp,sp,-52
   94be0:	dfc00c15 	stw	ra,48(sp)
   94be4:	df000b15 	stw	fp,44(sp)
   94be8:	df000b04 	addi	fp,sp,44
   94bec:	e17ffe15 	stw	r5,-8(fp)
   94bf0:	e1bfff15 	stw	r6,-4(fp)
   94bf4:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   94bf8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   94bfc:	e0bfff17 	ldw	r2,-4(fp)
   94c00:	1005003a 	cmpeq	r2,r2,zero
   94c04:	1000611e 	bne	r2,zero,94d8c <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   94c08:	e0bffd03 	ldbu	r2,-12(fp)
   94c0c:	10800570 	cmpltui	r2,r2,21
   94c10:	1000071e 	bne	r2,zero,94c30 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   94c14:	e0bffd03 	ldbu	r2,-12(fp)
   94c18:	10803fe0 	cmpeqi	r2,r2,255
   94c1c:	1000041e 	bne	r2,zero,94c30 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   94c20:	e0ffff17 	ldw	r3,-4(fp)
   94c24:	00800a84 	movi	r2,42
   94c28:	18800005 	stb	r2,0(r3)
            return;
   94c2c:	00005706 	br	94d8c <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   94c30:	e0bffe17 	ldw	r2,-8(fp)
   94c34:	1004c03a 	cmpne	r2,r2,zero
   94c38:	1000041e 	bne	r2,zero,94c4c <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   94c3c:	e0ffff17 	ldw	r3,-4(fp)
   94c40:	00800304 	movi	r2,12
   94c44:	18800005 	stb	r2,0(r3)
        return;
   94c48:	00005006 	br	94d8c <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   94c4c:	008002b4 	movhi	r2,10
   94c50:	10b3d404 	addi	r2,r2,-12464
   94c54:	10800003 	ldbu	r2,0(r2)
   94c58:	10803fcc 	andi	r2,r2,255
   94c5c:	1005003a 	cmpeq	r2,r2,zero
   94c60:	1000041e 	bne	r2,zero,94c74 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
   94c64:	e0ffff17 	ldw	r3,-4(fp)
   94c68:	00800484 	movi	r2,18
   94c6c:	18800005 	stb	r2,0(r3)
        return;
   94c70:	00004606 	br	94d8c <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94c74:	0005303a 	rdctl	r2,status
   94c78:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94c7c:	e0fff917 	ldw	r3,-28(fp)
   94c80:	00bfff84 	movi	r2,-2
   94c84:	1884703a 	and	r2,r3,r2
   94c88:	1001703a 	wrctl	status,r2
  
  return context;
   94c8c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   94c90:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   94c94:	e0bffd03 	ldbu	r2,-12(fp)
   94c98:	10803fd8 	cmpnei	r2,r2,255
   94c9c:	1000051e 	bne	r2,zero,94cb4 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
   94ca0:	008002b4 	movhi	r2,10
   94ca4:	10b3d504 	addi	r2,r2,-12460
   94ca8:	10800017 	ldw	r2,0(r2)
   94cac:	10800c83 	ldbu	r2,50(r2)
   94cb0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   94cb4:	e0bffd03 	ldbu	r2,-12(fp)
   94cb8:	00c002f4 	movhi	r3,11
   94cbc:	18f0e504 	addi	r3,r3,-15468
   94cc0:	1085883a 	add	r2,r2,r2
   94cc4:	1085883a 	add	r2,r2,r2
   94cc8:	10c5883a 	add	r2,r2,r3
   94ccc:	10800017 	ldw	r2,0(r2)
   94cd0:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   94cd4:	e0bffb17 	ldw	r2,-20(fp)
   94cd8:	1004c03a 	cmpne	r2,r2,zero
   94cdc:	1000081e 	bne	r2,zero,94d00 <OSTaskNameSet+0x124>
   94ce0:	e0bffa17 	ldw	r2,-24(fp)
   94ce4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94ce8:	e0bff817 	ldw	r2,-32(fp)
   94cec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   94cf0:	e0ffff17 	ldw	r3,-4(fp)
   94cf4:	008010c4 	movi	r2,67
   94cf8:	18800005 	stb	r2,0(r3)
        return;
   94cfc:	00002306 	br	94d8c <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   94d00:	e0bffb17 	ldw	r2,-20(fp)
   94d04:	10800058 	cmpnei	r2,r2,1
   94d08:	1000081e 	bne	r2,zero,94d2c <OSTaskNameSet+0x150>
   94d0c:	e0bffa17 	ldw	r2,-24(fp)
   94d10:	e0bff715 	stw	r2,-36(fp)
   94d14:	e0bff717 	ldw	r2,-36(fp)
   94d18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   94d1c:	e0ffff17 	ldw	r3,-4(fp)
   94d20:	008010c4 	movi	r2,67
   94d24:	18800005 	stb	r2,0(r3)
        return;
   94d28:	00001806 	br	94d8c <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   94d2c:	e13ffe17 	ldw	r4,-8(fp)
   94d30:	008f46c0 	call	8f46c <OS_StrLen>
   94d34:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   94d38:	e0bffc03 	ldbu	r2,-16(fp)
   94d3c:	10800830 	cmpltui	r2,r2,32
   94d40:	1000081e 	bne	r2,zero,94d64 <OSTaskNameSet+0x188>
   94d44:	e0bffa17 	ldw	r2,-24(fp)
   94d48:	e0bff615 	stw	r2,-40(fp)
   94d4c:	e0bff617 	ldw	r2,-40(fp)
   94d50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   94d54:	e0ffff17 	ldw	r3,-4(fp)
   94d58:	00801044 	movi	r2,65
   94d5c:	18800005 	stb	r2,0(r3)
        return;
   94d60:	00000a06 	br	94d8c <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   94d64:	e0bffb17 	ldw	r2,-20(fp)
   94d68:	11001304 	addi	r4,r2,76
   94d6c:	e17ffe17 	ldw	r5,-8(fp)
   94d70:	008f3ec0 	call	8f3ec <OS_StrCopy>
   94d74:	e0bffa17 	ldw	r2,-24(fp)
   94d78:	e0bff515 	stw	r2,-44(fp)
   94d7c:	e0bff517 	ldw	r2,-44(fp)
   94d80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   94d84:	e0bfff17 	ldw	r2,-4(fp)
   94d88:	10000005 	stb	zero,0(r2)
}
   94d8c:	e037883a 	mov	sp,fp
   94d90:	dfc00117 	ldw	ra,4(sp)
   94d94:	df000017 	ldw	fp,0(sp)
   94d98:	dec00204 	addi	sp,sp,8
   94d9c:	f800283a 	ret

00094da0 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   94da0:	defff304 	addi	sp,sp,-52
   94da4:	dfc00c15 	stw	ra,48(sp)
   94da8:	df000b15 	stw	fp,44(sp)
   94dac:	df000b04 	addi	fp,sp,44
   94db0:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   94db4:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   94db8:	e0bffe03 	ldbu	r2,-8(fp)
   94dbc:	10800530 	cmpltui	r2,r2,20
   94dc0:	1000031e 	bne	r2,zero,94dd0 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   94dc4:	00800a84 	movi	r2,42
   94dc8:	e0bfff15 	stw	r2,-4(fp)
   94dcc:	00007406 	br	94fa0 <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94dd0:	0005303a 	rdctl	r2,status
   94dd4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94dd8:	e0fffb17 	ldw	r3,-20(fp)
   94ddc:	00bfff84 	movi	r2,-2
   94de0:	1884703a 	and	r2,r3,r2
   94de4:	1001703a 	wrctl	status,r2
  
  return context;
   94de8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   94dec:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
   94df0:	e0bffe03 	ldbu	r2,-8(fp)
   94df4:	00c002f4 	movhi	r3,11
   94df8:	18f0e504 	addi	r3,r3,-15468
   94dfc:	1085883a 	add	r2,r2,r2
   94e00:	1085883a 	add	r2,r2,r2
   94e04:	10c5883a 	add	r2,r2,r3
   94e08:	10800017 	ldw	r2,0(r2)
   94e0c:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   94e10:	e0bffd17 	ldw	r2,-12(fp)
   94e14:	1004c03a 	cmpne	r2,r2,zero
   94e18:	1000071e 	bne	r2,zero,94e38 <OSTaskResume+0x98>
   94e1c:	e0bffc17 	ldw	r2,-16(fp)
   94e20:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94e24:	e0bffa17 	ldw	r2,-24(fp)
   94e28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   94e2c:	00801184 	movi	r2,70
   94e30:	e0bfff15 	stw	r2,-4(fp)
   94e34:	00005a06 	br	94fa0 <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   94e38:	e0bffd17 	ldw	r2,-12(fp)
   94e3c:	10800058 	cmpnei	r2,r2,1
   94e40:	1000071e 	bne	r2,zero,94e60 <OSTaskResume+0xc0>
   94e44:	e0bffc17 	ldw	r2,-16(fp)
   94e48:	e0bff915 	stw	r2,-28(fp)
   94e4c:	e0bff917 	ldw	r2,-28(fp)
   94e50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   94e54:	008010c4 	movi	r2,67
   94e58:	e0bfff15 	stw	r2,-4(fp)
   94e5c:	00005006 	br	94fa0 <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   94e60:	e0bffd17 	ldw	r2,-12(fp)
   94e64:	10800c03 	ldbu	r2,48(r2)
   94e68:	10803fcc 	andi	r2,r2,255
   94e6c:	1080020c 	andi	r2,r2,8
   94e70:	1005003a 	cmpeq	r2,r2,zero
   94e74:	1000441e 	bne	r2,zero,94f88 <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   94e78:	e0bffd17 	ldw	r2,-12(fp)
   94e7c:	10c00c03 	ldbu	r3,48(r2)
   94e80:	00bffdc4 	movi	r2,-9
   94e84:	1884703a 	and	r2,r3,r2
   94e88:	1007883a 	mov	r3,r2
   94e8c:	e0bffd17 	ldw	r2,-12(fp)
   94e90:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   94e94:	e0bffd17 	ldw	r2,-12(fp)
   94e98:	10800c03 	ldbu	r2,48(r2)
   94e9c:	10803fcc 	andi	r2,r2,255
   94ea0:	1004c03a 	cmpne	r2,r2,zero
   94ea4:	1000321e 	bne	r2,zero,94f70 <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
   94ea8:	e0bffd17 	ldw	r2,-12(fp)
   94eac:	10800b8b 	ldhu	r2,46(r2)
   94eb0:	10bfffcc 	andi	r2,r2,65535
   94eb4:	1004c03a 	cmpne	r2,r2,zero
   94eb8:	1000281e 	bne	r2,zero,94f5c <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   94ebc:	e0bffd17 	ldw	r2,-12(fp)
   94ec0:	10c00d83 	ldbu	r3,54(r2)
   94ec4:	008002b4 	movhi	r2,10
   94ec8:	10b3d204 	addi	r2,r2,-12472
   94ecc:	10800003 	ldbu	r2,0(r2)
   94ed0:	1884b03a 	or	r2,r3,r2
   94ed4:	1007883a 	mov	r3,r2
   94ed8:	008002b4 	movhi	r2,10
   94edc:	10b3d204 	addi	r2,r2,-12472
   94ee0:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   94ee4:	e0bffd17 	ldw	r2,-12(fp)
   94ee8:	10800d03 	ldbu	r2,52(r2)
   94eec:	11003fcc 	andi	r4,r2,255
   94ef0:	e0bffd17 	ldw	r2,-12(fp)
   94ef4:	10800d03 	ldbu	r2,52(r2)
   94ef8:	10c03fcc 	andi	r3,r2,255
   94efc:	008002b4 	movhi	r2,10
   94f00:	10b3d244 	addi	r2,r2,-12471
   94f04:	10c5883a 	add	r2,r2,r3
   94f08:	10c00003 	ldbu	r3,0(r2)
   94f0c:	e0bffd17 	ldw	r2,-12(fp)
   94f10:	10800d43 	ldbu	r2,53(r2)
   94f14:	1884b03a 	or	r2,r3,r2
   94f18:	1007883a 	mov	r3,r2
   94f1c:	008002b4 	movhi	r2,10
   94f20:	10b3d244 	addi	r2,r2,-12471
   94f24:	1105883a 	add	r2,r2,r4
   94f28:	10c00005 	stb	r3,0(r2)
   94f2c:	e0bffc17 	ldw	r2,-16(fp)
   94f30:	e0bff815 	stw	r2,-32(fp)
   94f34:	e0bff817 	ldw	r2,-32(fp)
   94f38:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   94f3c:	008002b4 	movhi	r2,10
   94f40:	10b3c644 	addi	r2,r2,-12519
   94f44:	10800003 	ldbu	r2,0(r2)
   94f48:	10803fcc 	andi	r2,r2,255
   94f4c:	10800058 	cmpnei	r2,r2,1
   94f50:	10000b1e 	bne	r2,zero,94f80 <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
   94f54:	008f2a80 	call	8f2a8 <OS_Sched>
   94f58:	00000906 	br	94f80 <OSTaskResume+0x1e0>
   94f5c:	e0bffc17 	ldw	r2,-16(fp)
   94f60:	e0bff715 	stw	r2,-36(fp)
   94f64:	e0bff717 	ldw	r2,-36(fp)
   94f68:	1001703a 	wrctl	status,r2
   94f6c:	00000406 	br	94f80 <OSTaskResume+0x1e0>
   94f70:	e0bffc17 	ldw	r2,-16(fp)
   94f74:	e0bff615 	stw	r2,-40(fp)
   94f78:	e0bff617 	ldw	r2,-40(fp)
   94f7c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   94f80:	e03fff15 	stw	zero,-4(fp)
   94f84:	00000606 	br	94fa0 <OSTaskResume+0x200>
   94f88:	e0bffc17 	ldw	r2,-16(fp)
   94f8c:	e0bff515 	stw	r2,-44(fp)
   94f90:	e0bff517 	ldw	r2,-44(fp)
   94f94:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   94f98:	00801104 	movi	r2,68
   94f9c:	e0bfff15 	stw	r2,-4(fp)
   94fa0:	e0bfff17 	ldw	r2,-4(fp)
}
   94fa4:	e037883a 	mov	sp,fp
   94fa8:	dfc00117 	ldw	ra,4(sp)
   94fac:	df000017 	ldw	fp,0(sp)
   94fb0:	dec00204 	addi	sp,sp,8
   94fb4:	f800283a 	ret

00094fb8 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   94fb8:	defff204 	addi	sp,sp,-56
   94fbc:	df000d15 	stw	fp,52(sp)
   94fc0:	df000d04 	addi	fp,sp,52
   94fc4:	e17ffe15 	stw	r5,-8(fp)
   94fc8:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   94fcc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   94fd0:	e0bffd03 	ldbu	r2,-12(fp)
   94fd4:	10800570 	cmpltui	r2,r2,21
   94fd8:	1000061e 	bne	r2,zero,94ff4 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   94fdc:	e0bffd03 	ldbu	r2,-12(fp)
   94fe0:	10803fe0 	cmpeqi	r2,r2,255
   94fe4:	1000031e 	bne	r2,zero,94ff4 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   94fe8:	00800a84 	movi	r2,42
   94fec:	e0bfff15 	stw	r2,-4(fp)
   94ff0:	00006b06 	br	951a0 <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   94ff4:	e0bffe17 	ldw	r2,-8(fp)
   94ff8:	1004c03a 	cmpne	r2,r2,zero
   94ffc:	1000031e 	bne	r2,zero,9500c <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
   95000:	00800244 	movi	r2,9
   95004:	e0bfff15 	stw	r2,-4(fp)
   95008:	00006506 	br	951a0 <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   9500c:	e0bffe17 	ldw	r2,-8(fp)
   95010:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   95014:	e0bffe17 	ldw	r2,-8(fp)
   95018:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9501c:	0005303a 	rdctl	r2,status
   95020:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   95024:	e0fff717 	ldw	r3,-36(fp)
   95028:	00bfff84 	movi	r2,-2
   9502c:	1884703a 	and	r2,r3,r2
   95030:	1001703a 	wrctl	status,r2
  
  return context;
   95034:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   95038:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   9503c:	e0bffd03 	ldbu	r2,-12(fp)
   95040:	10803fd8 	cmpnei	r2,r2,255
   95044:	1000051e 	bne	r2,zero,9505c <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
   95048:	008002b4 	movhi	r2,10
   9504c:	10b3d504 	addi	r2,r2,-12460
   95050:	10800017 	ldw	r2,0(r2)
   95054:	10800c83 	ldbu	r2,50(r2)
   95058:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   9505c:	e0bffd03 	ldbu	r2,-12(fp)
   95060:	00c002f4 	movhi	r3,11
   95064:	18f0e504 	addi	r3,r3,-15468
   95068:	1085883a 	add	r2,r2,r2
   9506c:	1085883a 	add	r2,r2,r2
   95070:	10c5883a 	add	r2,r2,r3
   95074:	10800017 	ldw	r2,0(r2)
   95078:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   9507c:	e0bffc17 	ldw	r2,-16(fp)
   95080:	1004c03a 	cmpne	r2,r2,zero
   95084:	1000071e 	bne	r2,zero,950a4 <OSTaskStkChk+0xec>
   95088:	e0bff817 	ldw	r2,-32(fp)
   9508c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   95090:	e0bff617 	ldw	r2,-40(fp)
   95094:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   95098:	008010c4 	movi	r2,67
   9509c:	e0bfff15 	stw	r2,-4(fp)
   950a0:	00003f06 	br	951a0 <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   950a4:	e0bffc17 	ldw	r2,-16(fp)
   950a8:	10800058 	cmpnei	r2,r2,1
   950ac:	1000071e 	bne	r2,zero,950cc <OSTaskStkChk+0x114>
   950b0:	e0bff817 	ldw	r2,-32(fp)
   950b4:	e0bff515 	stw	r2,-44(fp)
   950b8:	e0bff517 	ldw	r2,-44(fp)
   950bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   950c0:	008010c4 	movi	r2,67
   950c4:	e0bfff15 	stw	r2,-4(fp)
   950c8:	00003506 	br	951a0 <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   950cc:	e0bffc17 	ldw	r2,-16(fp)
   950d0:	1080040b 	ldhu	r2,16(r2)
   950d4:	10bfffcc 	andi	r2,r2,65535
   950d8:	1080004c 	andi	r2,r2,1
   950dc:	1004c03a 	cmpne	r2,r2,zero
   950e0:	1000071e 	bne	r2,zero,95100 <OSTaskStkChk+0x148>
   950e4:	e0bff817 	ldw	r2,-32(fp)
   950e8:	e0bff415 	stw	r2,-48(fp)
   950ec:	e0bff417 	ldw	r2,-48(fp)
   950f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   950f4:	00801144 	movi	r2,69
   950f8:	e0bfff15 	stw	r2,-4(fp)
   950fc:	00002806 	br	951a0 <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
   95100:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
   95104:	e0bffc17 	ldw	r2,-16(fp)
   95108:	10800317 	ldw	r2,12(r2)
   9510c:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
   95110:	e0bffc17 	ldw	r2,-16(fp)
   95114:	10800217 	ldw	r2,8(r2)
   95118:	e0bffb15 	stw	r2,-20(fp)
   9511c:	e0bff817 	ldw	r2,-32(fp)
   95120:	e0bff315 	stw	r2,-52(fp)
   95124:	e0bff317 	ldw	r2,-52(fp)
   95128:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   9512c:	00000306 	br	9513c <OSTaskStkChk+0x184>
        nfree++;
   95130:	e0bffa17 	ldw	r2,-24(fp)
   95134:	10800044 	addi	r2,r2,1
   95138:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   9513c:	e0bffb17 	ldw	r2,-20(fp)
   95140:	10800017 	ldw	r2,0(r2)
   95144:	1005003a 	cmpeq	r2,r2,zero
   95148:	1007883a 	mov	r3,r2
   9514c:	e0bffb17 	ldw	r2,-20(fp)
   95150:	10800104 	addi	r2,r2,4
   95154:	e0bffb15 	stw	r2,-20(fp)
   95158:	18803fcc 	andi	r2,r3,255
   9515c:	1004c03a 	cmpne	r2,r2,zero
   95160:	103ff31e 	bne	r2,zero,95130 <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   95164:	e0bffa17 	ldw	r2,-24(fp)
   95168:	1085883a 	add	r2,r2,r2
   9516c:	1085883a 	add	r2,r2,r2
   95170:	1007883a 	mov	r3,r2
   95174:	e0bffe17 	ldw	r2,-8(fp)
   95178:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   9517c:	e0fff917 	ldw	r3,-28(fp)
   95180:	e0bffa17 	ldw	r2,-24(fp)
   95184:	1885c83a 	sub	r2,r3,r2
   95188:	1085883a 	add	r2,r2,r2
   9518c:	1085883a 	add	r2,r2,r2
   95190:	1007883a 	mov	r3,r2
   95194:	e0bffe17 	ldw	r2,-8(fp)
   95198:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   9519c:	e03fff15 	stw	zero,-4(fp)
   951a0:	e0bfff17 	ldw	r2,-4(fp)
}
   951a4:	e037883a 	mov	sp,fp
   951a8:	df000017 	ldw	fp,0(sp)
   951ac:	dec00104 	addi	sp,sp,4
   951b0:	f800283a 	ret

000951b4 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   951b4:	defff404 	addi	sp,sp,-48
   951b8:	dfc00b15 	stw	ra,44(sp)
   951bc:	df000a15 	stw	fp,40(sp)
   951c0:	df000a04 	addi	fp,sp,40
   951c4:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   951c8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   951cc:	e0bffe03 	ldbu	r2,-8(fp)
   951d0:	10800518 	cmpnei	r2,r2,20
   951d4:	1000031e 	bne	r2,zero,951e4 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   951d8:	008011c4 	movi	r2,71
   951dc:	e0bfff15 	stw	r2,-4(fp)
   951e0:	00007906 	br	953c8 <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   951e4:	e0bffe03 	ldbu	r2,-8(fp)
   951e8:	10800530 	cmpltui	r2,r2,20
   951ec:	1000061e 	bne	r2,zero,95208 <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
   951f0:	e0bffe03 	ldbu	r2,-8(fp)
   951f4:	10803fe0 	cmpeqi	r2,r2,255
   951f8:	1000031e 	bne	r2,zero,95208 <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
   951fc:	00800a84 	movi	r2,42
   95200:	e0bfff15 	stw	r2,-4(fp)
   95204:	00007006 	br	953c8 <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   95208:	0005303a 	rdctl	r2,status
   9520c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   95210:	e0fff917 	ldw	r3,-28(fp)
   95214:	00bfff84 	movi	r2,-2
   95218:	1884703a 	and	r2,r3,r2
   9521c:	1001703a 	wrctl	status,r2
  
  return context;
   95220:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   95224:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   95228:	e0bffe03 	ldbu	r2,-8(fp)
   9522c:	10803fd8 	cmpnei	r2,r2,255
   95230:	1000081e 	bne	r2,zero,95254 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
   95234:	008002b4 	movhi	r2,10
   95238:	10b3d504 	addi	r2,r2,-12460
   9523c:	10800017 	ldw	r2,0(r2)
   95240:	10800c83 	ldbu	r2,50(r2)
   95244:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
   95248:	00800044 	movi	r2,1
   9524c:	e0bffd05 	stb	r2,-12(fp)
   95250:	00000b06 	br	95280 <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   95254:	008002b4 	movhi	r2,10
   95258:	10b3d504 	addi	r2,r2,-12460
   9525c:	10800017 	ldw	r2,0(r2)
   95260:	10800c83 	ldbu	r2,50(r2)
   95264:	10c03fcc 	andi	r3,r2,255
   95268:	e0bffe03 	ldbu	r2,-8(fp)
   9526c:	1880031e 	bne	r3,r2,9527c <OSTaskSuspend+0xc8>
        self = OS_TRUE;
   95270:	00800044 	movi	r2,1
   95274:	e0bffd05 	stb	r2,-12(fp)
   95278:	00000106 	br	95280 <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   9527c:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   95280:	e0bffe03 	ldbu	r2,-8(fp)
   95284:	00c002f4 	movhi	r3,11
   95288:	18f0e504 	addi	r3,r3,-15468
   9528c:	1085883a 	add	r2,r2,r2
   95290:	1085883a 	add	r2,r2,r2
   95294:	10c5883a 	add	r2,r2,r3
   95298:	10800017 	ldw	r2,0(r2)
   9529c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   952a0:	e0bffc17 	ldw	r2,-16(fp)
   952a4:	1004c03a 	cmpne	r2,r2,zero
   952a8:	1000071e 	bne	r2,zero,952c8 <OSTaskSuspend+0x114>
   952ac:	e0bffa17 	ldw	r2,-24(fp)
   952b0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   952b4:	e0bff817 	ldw	r2,-32(fp)
   952b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   952bc:	00801204 	movi	r2,72
   952c0:	e0bfff15 	stw	r2,-4(fp)
   952c4:	00004006 	br	953c8 <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   952c8:	e0bffc17 	ldw	r2,-16(fp)
   952cc:	10800058 	cmpnei	r2,r2,1
   952d0:	1000071e 	bne	r2,zero,952f0 <OSTaskSuspend+0x13c>
   952d4:	e0bffa17 	ldw	r2,-24(fp)
   952d8:	e0bff715 	stw	r2,-36(fp)
   952dc:	e0bff717 	ldw	r2,-36(fp)
   952e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   952e4:	008010c4 	movi	r2,67
   952e8:	e0bfff15 	stw	r2,-4(fp)
   952ec:	00003606 	br	953c8 <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
   952f0:	e0bffc17 	ldw	r2,-16(fp)
   952f4:	10800d03 	ldbu	r2,52(r2)
   952f8:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   952fc:	e13ffb03 	ldbu	r4,-20(fp)
   95300:	e0fffb03 	ldbu	r3,-20(fp)
   95304:	008002b4 	movhi	r2,10
   95308:	10b3d244 	addi	r2,r2,-12471
   9530c:	10c5883a 	add	r2,r2,r3
   95310:	10800003 	ldbu	r2,0(r2)
   95314:	1007883a 	mov	r3,r2
   95318:	e0bffc17 	ldw	r2,-16(fp)
   9531c:	10800d43 	ldbu	r2,53(r2)
   95320:	0084303a 	nor	r2,zero,r2
   95324:	1884703a 	and	r2,r3,r2
   95328:	1007883a 	mov	r3,r2
   9532c:	008002b4 	movhi	r2,10
   95330:	10b3d244 	addi	r2,r2,-12471
   95334:	1105883a 	add	r2,r2,r4
   95338:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
   9533c:	e0fffb03 	ldbu	r3,-20(fp)
   95340:	008002b4 	movhi	r2,10
   95344:	10b3d244 	addi	r2,r2,-12471
   95348:	10c5883a 	add	r2,r2,r3
   9534c:	10800003 	ldbu	r2,0(r2)
   95350:	10803fcc 	andi	r2,r2,255
   95354:	1004c03a 	cmpne	r2,r2,zero
   95358:	10000c1e 	bne	r2,zero,9538c <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   9535c:	e0bffc17 	ldw	r2,-16(fp)
   95360:	10800d83 	ldbu	r2,54(r2)
   95364:	0084303a 	nor	r2,zero,r2
   95368:	1007883a 	mov	r3,r2
   9536c:	008002b4 	movhi	r2,10
   95370:	10b3d204 	addi	r2,r2,-12472
   95374:	10800003 	ldbu	r2,0(r2)
   95378:	1884703a 	and	r2,r3,r2
   9537c:	1007883a 	mov	r3,r2
   95380:	008002b4 	movhi	r2,10
   95384:	10b3d204 	addi	r2,r2,-12472
   95388:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   9538c:	e0bffc17 	ldw	r2,-16(fp)
   95390:	10800c03 	ldbu	r2,48(r2)
   95394:	10800214 	ori	r2,r2,8
   95398:	1007883a 	mov	r3,r2
   9539c:	e0bffc17 	ldw	r2,-16(fp)
   953a0:	10c00c05 	stb	r3,48(r2)
   953a4:	e0bffa17 	ldw	r2,-24(fp)
   953a8:	e0bff615 	stw	r2,-40(fp)
   953ac:	e0bff617 	ldw	r2,-40(fp)
   953b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   953b4:	e0bffd03 	ldbu	r2,-12(fp)
   953b8:	10800058 	cmpnei	r2,r2,1
   953bc:	1000011e 	bne	r2,zero,953c4 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
   953c0:	008f2a80 	call	8f2a8 <OS_Sched>
    }
    return (OS_ERR_NONE);
   953c4:	e03fff15 	stw	zero,-4(fp)
   953c8:	e0bfff17 	ldw	r2,-4(fp)
}
   953cc:	e037883a 	mov	sp,fp
   953d0:	dfc00117 	ldw	ra,4(sp)
   953d4:	df000017 	ldw	fp,0(sp)
   953d8:	dec00204 	addi	sp,sp,8
   953dc:	f800283a 	ret

000953e0 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   953e0:	defff504 	addi	sp,sp,-44
   953e4:	dfc00a15 	stw	ra,40(sp)
   953e8:	df000915 	stw	fp,36(sp)
   953ec:	df000904 	addi	fp,sp,36
   953f0:	e17ffe15 	stw	r5,-8(fp)
   953f4:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   953f8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   953fc:	e0bffd03 	ldbu	r2,-12(fp)
   95400:	10800570 	cmpltui	r2,r2,21
   95404:	1000061e 	bne	r2,zero,95420 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   95408:	e0bffd03 	ldbu	r2,-12(fp)
   9540c:	10803fe0 	cmpeqi	r2,r2,255
   95410:	1000031e 	bne	r2,zero,95420 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   95414:	00800a84 	movi	r2,42
   95418:	e0bfff15 	stw	r2,-4(fp)
   9541c:	00003b06 	br	9550c <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   95420:	e0bffe17 	ldw	r2,-8(fp)
   95424:	1004c03a 	cmpne	r2,r2,zero
   95428:	1000031e 	bne	r2,zero,95438 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
   9542c:	00800244 	movi	r2,9
   95430:	e0bfff15 	stw	r2,-4(fp)
   95434:	00003506 	br	9550c <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   95438:	0005303a 	rdctl	r2,status
   9543c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   95440:	e0fffa17 	ldw	r3,-24(fp)
   95444:	00bfff84 	movi	r2,-2
   95448:	1884703a 	and	r2,r3,r2
   9544c:	1001703a 	wrctl	status,r2
  
  return context;
   95450:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   95454:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   95458:	e0bffd03 	ldbu	r2,-12(fp)
   9545c:	10803fd8 	cmpnei	r2,r2,255
   95460:	1000051e 	bne	r2,zero,95478 <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
   95464:	008002b4 	movhi	r2,10
   95468:	10b3d504 	addi	r2,r2,-12460
   9546c:	10800017 	ldw	r2,0(r2)
   95470:	10800c83 	ldbu	r2,50(r2)
   95474:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   95478:	e0bffd03 	ldbu	r2,-12(fp)
   9547c:	00c002f4 	movhi	r3,11
   95480:	18f0e504 	addi	r3,r3,-15468
   95484:	1085883a 	add	r2,r2,r2
   95488:	1085883a 	add	r2,r2,r2
   9548c:	10c5883a 	add	r2,r2,r3
   95490:	10800017 	ldw	r2,0(r2)
   95494:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   95498:	e0bffc17 	ldw	r2,-16(fp)
   9549c:	1004c03a 	cmpne	r2,r2,zero
   954a0:	1000071e 	bne	r2,zero,954c0 <OSTaskQuery+0xe0>
   954a4:	e0bffb17 	ldw	r2,-20(fp)
   954a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   954ac:	e0bff917 	ldw	r2,-28(fp)
   954b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   954b4:	00800a44 	movi	r2,41
   954b8:	e0bfff15 	stw	r2,-4(fp)
   954bc:	00001306 	br	9550c <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   954c0:	e0bffc17 	ldw	r2,-16(fp)
   954c4:	10800058 	cmpnei	r2,r2,1
   954c8:	1000071e 	bne	r2,zero,954e8 <OSTaskQuery+0x108>
   954cc:	e0bffb17 	ldw	r2,-20(fp)
   954d0:	e0bff815 	stw	r2,-32(fp)
   954d4:	e0bff817 	ldw	r2,-32(fp)
   954d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   954dc:	008010c4 	movi	r2,67
   954e0:	e0bfff15 	stw	r2,-4(fp)
   954e4:	00000906 	br	9550c <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   954e8:	e13ffe17 	ldw	r4,-8(fp)
   954ec:	e17ffc17 	ldw	r5,-16(fp)
   954f0:	01801b04 	movi	r6,108
   954f4:	008f23c0 	call	8f23c <OS_MemCopy>
   954f8:	e0bffb17 	ldw	r2,-20(fp)
   954fc:	e0bff715 	stw	r2,-36(fp)
   95500:	e0bff717 	ldw	r2,-36(fp)
   95504:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   95508:	e03fff15 	stw	zero,-4(fp)
   9550c:	e0bfff17 	ldw	r2,-4(fp)
}
   95510:	e037883a 	mov	sp,fp
   95514:	dfc00117 	ldw	ra,4(sp)
   95518:	df000017 	ldw	fp,0(sp)
   9551c:	dec00204 	addi	sp,sp,8
   95520:	f800283a 	ret

00095524 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   95524:	defffc04 	addi	sp,sp,-16
   95528:	df000315 	stw	fp,12(sp)
   9552c:	df000304 	addi	fp,sp,12
   95530:	e13ffd15 	stw	r4,-12(fp)
   95534:	e17ffe15 	stw	r5,-8(fp)
   95538:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   9553c:	e0bfff0b 	ldhu	r2,-4(fp)
   95540:	1080004c 	andi	r2,r2,1
   95544:	10803fcc 	andi	r2,r2,255
   95548:	1005003a 	cmpeq	r2,r2,zero
   9554c:	1000101e 	bne	r2,zero,95590 <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   95550:	e0bfff0b 	ldhu	r2,-4(fp)
   95554:	1080008c 	andi	r2,r2,2
   95558:	1005003a 	cmpeq	r2,r2,zero
   9555c:	10000c1e 	bne	r2,zero,95590 <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   95560:	00000806 	br	95584 <OS_TaskStkClr+0x60>
                size--;
   95564:	e0bffe17 	ldw	r2,-8(fp)
   95568:	10bfffc4 	addi	r2,r2,-1
   9556c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   95570:	e0bffd17 	ldw	r2,-12(fp)
   95574:	10000015 	stw	zero,0(r2)
   95578:	e0bffd17 	ldw	r2,-12(fp)
   9557c:	10800104 	addi	r2,r2,4
   95580:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   95584:	e0bffe17 	ldw	r2,-8(fp)
   95588:	1004c03a 	cmpne	r2,r2,zero
   9558c:	103ff51e 	bne	r2,zero,95564 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   95590:	e037883a 	mov	sp,fp
   95594:	df000017 	ldw	fp,0(sp)
   95598:	dec00104 	addi	sp,sp,4
   9559c:	f800283a 	ret

000955a0 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   955a0:	defff904 	addi	sp,sp,-28
   955a4:	dfc00615 	stw	ra,24(sp)
   955a8:	df000515 	stw	fp,20(sp)
   955ac:	df000504 	addi	fp,sp,20
   955b0:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   955b4:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   955b8:	008002b4 	movhi	r2,10
   955bc:	10b3d404 	addi	r2,r2,-12464
   955c0:	10800003 	ldbu	r2,0(r2)
   955c4:	10803fcc 	andi	r2,r2,255
   955c8:	1004c03a 	cmpne	r2,r2,zero
   955cc:	1000421e 	bne	r2,zero,956d8 <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   955d0:	e0bfff0b 	ldhu	r2,-4(fp)
   955d4:	1005003a 	cmpeq	r2,r2,zero
   955d8:	10003f1e 	bne	r2,zero,956d8 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   955dc:	0005303a 	rdctl	r2,status
   955e0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   955e4:	e0fffc17 	ldw	r3,-16(fp)
   955e8:	00bfff84 	movi	r2,-2
   955ec:	1884703a 	and	r2,r3,r2
   955f0:	1001703a 	wrctl	status,r2
  
  return context;
   955f4:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
   955f8:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   955fc:	008002b4 	movhi	r2,10
   95600:	10b3d504 	addi	r2,r2,-12460
   95604:	10800017 	ldw	r2,0(r2)
   95608:	10800d03 	ldbu	r2,52(r2)
   9560c:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   95610:	e13ffe03 	ldbu	r4,-8(fp)
   95614:	e0fffe03 	ldbu	r3,-8(fp)
   95618:	008002b4 	movhi	r2,10
   9561c:	10b3d244 	addi	r2,r2,-12471
   95620:	10c5883a 	add	r2,r2,r3
   95624:	10800003 	ldbu	r2,0(r2)
   95628:	1007883a 	mov	r3,r2
   9562c:	008002b4 	movhi	r2,10
   95630:	10b3d504 	addi	r2,r2,-12460
   95634:	10800017 	ldw	r2,0(r2)
   95638:	10800d43 	ldbu	r2,53(r2)
   9563c:	0084303a 	nor	r2,zero,r2
   95640:	1884703a 	and	r2,r3,r2
   95644:	1007883a 	mov	r3,r2
   95648:	008002b4 	movhi	r2,10
   9564c:	10b3d244 	addi	r2,r2,-12471
   95650:	1105883a 	add	r2,r2,r4
   95654:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
   95658:	e0fffe03 	ldbu	r3,-8(fp)
   9565c:	008002b4 	movhi	r2,10
   95660:	10b3d244 	addi	r2,r2,-12471
   95664:	10c5883a 	add	r2,r2,r3
   95668:	10800003 	ldbu	r2,0(r2)
   9566c:	10803fcc 	andi	r2,r2,255
   95670:	1004c03a 	cmpne	r2,r2,zero
   95674:	10000e1e 	bne	r2,zero,956b0 <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   95678:	008002b4 	movhi	r2,10
   9567c:	10b3d504 	addi	r2,r2,-12460
   95680:	10800017 	ldw	r2,0(r2)
   95684:	10800d83 	ldbu	r2,54(r2)
   95688:	0084303a 	nor	r2,zero,r2
   9568c:	1007883a 	mov	r3,r2
   95690:	008002b4 	movhi	r2,10
   95694:	10b3d204 	addi	r2,r2,-12472
   95698:	10800003 	ldbu	r2,0(r2)
   9569c:	1884703a 	and	r2,r3,r2
   956a0:	1007883a 	mov	r3,r2
   956a4:	008002b4 	movhi	r2,10
   956a8:	10b3d204 	addi	r2,r2,-12472
   956ac:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   956b0:	008002b4 	movhi	r2,10
   956b4:	10b3d504 	addi	r2,r2,-12460
   956b8:	10c00017 	ldw	r3,0(r2)
   956bc:	e0bfff0b 	ldhu	r2,-4(fp)
   956c0:	18800b8d 	sth	r2,46(r3)
   956c4:	e0bffd17 	ldw	r2,-12(fp)
   956c8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   956cc:	e0bffb17 	ldw	r2,-20(fp)
   956d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   956d4:	008f2a80 	call	8f2a8 <OS_Sched>
    }
}
   956d8:	e037883a 	mov	sp,fp
   956dc:	dfc00117 	ldw	ra,4(sp)
   956e0:	df000017 	ldw	fp,0(sp)
   956e4:	dec00204 	addi	sp,sp,8
   956e8:	f800283a 	ret

000956ec <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   956ec:	defff604 	addi	sp,sp,-40
   956f0:	dfc00915 	stw	ra,36(sp)
   956f4:	df000815 	stw	fp,32(sp)
   956f8:	dc000715 	stw	r16,28(sp)
   956fc:	df000704 	addi	fp,sp,28
   95700:	e13ffb05 	stb	r4,-20(fp)
   95704:	e17ffc05 	stb	r5,-16(fp)
   95708:	e1bffd05 	stb	r6,-12(fp)
   9570c:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   95710:	008002b4 	movhi	r2,10
   95714:	10b3d404 	addi	r2,r2,-12464
   95718:	10800003 	ldbu	r2,0(r2)
   9571c:	10803fcc 	andi	r2,r2,255
   95720:	1005003a 	cmpeq	r2,r2,zero
   95724:	1000031e 	bne	r2,zero,95734 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
   95728:	00801544 	movi	r2,85
   9572c:	e0bfff15 	stw	r2,-4(fp)
   95730:	00004b06 	br	95860 <OSTimeDlyHMSM+0x174>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   95734:	e0bffb03 	ldbu	r2,-20(fp)
   95738:	1004c03a 	cmpne	r2,r2,zero
   9573c:	10000c1e 	bne	r2,zero,95770 <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
   95740:	e0bffc03 	ldbu	r2,-16(fp)
   95744:	1004c03a 	cmpne	r2,r2,zero
   95748:	1000091e 	bne	r2,zero,95770 <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
   9574c:	e0bffd03 	ldbu	r2,-12(fp)
   95750:	1004c03a 	cmpne	r2,r2,zero
   95754:	1000061e 	bne	r2,zero,95770 <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
   95758:	e0bffe0b 	ldhu	r2,-8(fp)
   9575c:	1004c03a 	cmpne	r2,r2,zero
   95760:	1000031e 	bne	r2,zero,95770 <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
   95764:	00801504 	movi	r2,84
   95768:	e0bfff15 	stw	r2,-4(fp)
   9576c:	00003c06 	br	95860 <OSTimeDlyHMSM+0x174>
                }
            }
        }
    }
    if (minutes > 59) {
   95770:	e0bffc03 	ldbu	r2,-16(fp)
   95774:	10800f30 	cmpltui	r2,r2,60
   95778:	1000031e 	bne	r2,zero,95788 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   9577c:	00801444 	movi	r2,81
   95780:	e0bfff15 	stw	r2,-4(fp)
   95784:	00003606 	br	95860 <OSTimeDlyHMSM+0x174>
    }
    if (seconds > 59) {
   95788:	e0bffd03 	ldbu	r2,-12(fp)
   9578c:	10800f30 	cmpltui	r2,r2,60
   95790:	1000031e 	bne	r2,zero,957a0 <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
   95794:	00801484 	movi	r2,82
   95798:	e0bfff15 	stw	r2,-4(fp)
   9579c:	00003006 	br	95860 <OSTimeDlyHMSM+0x174>
    }
    if (ms > 999) {
   957a0:	e0bffe0b 	ldhu	r2,-8(fp)
   957a4:	1080fa30 	cmpltui	r2,r2,1000
   957a8:	1000031e 	bne	r2,zero,957b8 <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
   957ac:	008014c4 	movi	r2,83
   957b0:	e0bfff15 	stw	r2,-4(fp)
   957b4:	00002a06 	br	95860 <OSTimeDlyHMSM+0x174>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   957b8:	e13ffb03 	ldbu	r4,-20(fp)
   957bc:	01438404 	movi	r5,3600
   957c0:	0082b040 	call	82b04 <__mulsi3>
   957c4:	1021883a 	mov	r16,r2
   957c8:	e13ffc03 	ldbu	r4,-16(fp)
   957cc:	01400f04 	movi	r5,60
   957d0:	0082b040 	call	82b04 <__mulsi3>
   957d4:	8087883a 	add	r3,r16,r2
   957d8:	e0bffd03 	ldbu	r2,-12(fp)
   957dc:	1889883a 	add	r4,r3,r2
   957e0:	0140fa04 	movi	r5,1000
   957e4:	0082b040 	call	82b04 <__mulsi3>
   957e8:	1021883a 	mov	r16,r2
   957ec:	e13ffe0b 	ldhu	r4,-8(fp)
   957f0:	0140fa04 	movi	r5,1000
   957f4:	0082b040 	call	82b04 <__mulsi3>
   957f8:	1009883a 	mov	r4,r2
   957fc:	0140fa04 	movi	r5,1000
   95800:	0082af40 	call	82af4 <__udivsi3>
   95804:	8085883a 	add	r2,r16,r2
   95808:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   9580c:	e0bffa17 	ldw	r2,-24(fp)
   95810:	1004d43a 	srli	r2,r2,16
   95814:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   95818:	e0bffa17 	ldw	r2,-24(fp)
   9581c:	10bfffcc 	andi	r2,r2,65535
   95820:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
   95824:	e0bffa17 	ldw	r2,-24(fp)
   95828:	113fffcc 	andi	r4,r2,65535
   9582c:	00955a00 	call	955a0 <OSTimeDly>
    while (loops > 0) {
   95830:	00000706 	br	95850 <OSTimeDlyHMSM+0x164>
        OSTimeDly((INT16U)32768u);
   95834:	01200014 	movui	r4,32768
   95838:	00955a00 	call	955a0 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   9583c:	01200014 	movui	r4,32768
   95840:	00955a00 	call	955a0 <OSTimeDly>
        loops--;
   95844:	e0bff90b 	ldhu	r2,-28(fp)
   95848:	10bfffc4 	addi	r2,r2,-1
   9584c:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   95850:	e0bff90b 	ldhu	r2,-28(fp)
   95854:	1004c03a 	cmpne	r2,r2,zero
   95858:	103ff61e 	bne	r2,zero,95834 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   9585c:	e03fff15 	stw	zero,-4(fp)
   95860:	e0bfff17 	ldw	r2,-4(fp)
}
   95864:	e037883a 	mov	sp,fp
   95868:	dfc00217 	ldw	ra,8(sp)
   9586c:	df000117 	ldw	fp,4(sp)
   95870:	dc000017 	ldw	r16,0(sp)
   95874:	dec00304 	addi	sp,sp,12
   95878:	f800283a 	ret

0009587c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   9587c:	defff404 	addi	sp,sp,-48
   95880:	dfc00b15 	stw	ra,44(sp)
   95884:	df000a15 	stw	fp,40(sp)
   95888:	df000a04 	addi	fp,sp,40
   9588c:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   95890:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   95894:	e0bffe03 	ldbu	r2,-8(fp)
   95898:	10800530 	cmpltui	r2,r2,20
   9589c:	1000031e 	bne	r2,zero,958ac <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   958a0:	00800a84 	movi	r2,42
   958a4:	e0bfff15 	stw	r2,-4(fp)
   958a8:	00007206 	br	95a74 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   958ac:	0005303a 	rdctl	r2,status
   958b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   958b4:	e0fffb17 	ldw	r3,-20(fp)
   958b8:	00bfff84 	movi	r2,-2
   958bc:	1884703a 	and	r2,r3,r2
   958c0:	1001703a 	wrctl	status,r2
  
  return context;
   958c4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   958c8:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   958cc:	e0bffe03 	ldbu	r2,-8(fp)
   958d0:	00c002f4 	movhi	r3,11
   958d4:	18f0e504 	addi	r3,r3,-15468
   958d8:	1085883a 	add	r2,r2,r2
   958dc:	1085883a 	add	r2,r2,r2
   958e0:	10c5883a 	add	r2,r2,r3
   958e4:	10800017 	ldw	r2,0(r2)
   958e8:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
   958ec:	e0bffd17 	ldw	r2,-12(fp)
   958f0:	1004c03a 	cmpne	r2,r2,zero
   958f4:	1000071e 	bne	r2,zero,95914 <OSTimeDlyResume+0x98>
   958f8:	e0bffc17 	ldw	r2,-16(fp)
   958fc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   95900:	e0bffa17 	ldw	r2,-24(fp)
   95904:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   95908:	008010c4 	movi	r2,67
   9590c:	e0bfff15 	stw	r2,-4(fp)
   95910:	00005806 	br	95a74 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   95914:	e0bffd17 	ldw	r2,-12(fp)
   95918:	10800058 	cmpnei	r2,r2,1
   9591c:	1000071e 	bne	r2,zero,9593c <OSTimeDlyResume+0xc0>
   95920:	e0bffc17 	ldw	r2,-16(fp)
   95924:	e0bff915 	stw	r2,-28(fp)
   95928:	e0bff917 	ldw	r2,-28(fp)
   9592c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   95930:	008010c4 	movi	r2,67
   95934:	e0bfff15 	stw	r2,-4(fp)
   95938:	00004e06 	br	95a74 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   9593c:	e0bffd17 	ldw	r2,-12(fp)
   95940:	10800b8b 	ldhu	r2,46(r2)
   95944:	10bfffcc 	andi	r2,r2,65535
   95948:	1004c03a 	cmpne	r2,r2,zero
   9594c:	1000071e 	bne	r2,zero,9596c <OSTimeDlyResume+0xf0>
   95950:	e0bffc17 	ldw	r2,-16(fp)
   95954:	e0bff815 	stw	r2,-32(fp)
   95958:	e0bff817 	ldw	r2,-32(fp)
   9595c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   95960:	00801404 	movi	r2,80
   95964:	e0bfff15 	stw	r2,-4(fp)
   95968:	00004206 	br	95a74 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   9596c:	e0bffd17 	ldw	r2,-12(fp)
   95970:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   95974:	e0bffd17 	ldw	r2,-12(fp)
   95978:	10800c03 	ldbu	r2,48(r2)
   9597c:	10803fcc 	andi	r2,r2,255
   95980:	10800dcc 	andi	r2,r2,55
   95984:	1005003a 	cmpeq	r2,r2,zero
   95988:	10000b1e 	bne	r2,zero,959b8 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   9598c:	e0bffd17 	ldw	r2,-12(fp)
   95990:	10c00c03 	ldbu	r3,48(r2)
   95994:	00bff204 	movi	r2,-56
   95998:	1884703a 	and	r2,r3,r2
   9599c:	1007883a 	mov	r3,r2
   959a0:	e0bffd17 	ldw	r2,-12(fp)
   959a4:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   959a8:	e0fffd17 	ldw	r3,-12(fp)
   959ac:	00800044 	movi	r2,1
   959b0:	18800c45 	stb	r2,49(r3)
   959b4:	00000206 	br	959c0 <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   959b8:	e0bffd17 	ldw	r2,-12(fp)
   959bc:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   959c0:	e0bffd17 	ldw	r2,-12(fp)
   959c4:	10800c03 	ldbu	r2,48(r2)
   959c8:	10803fcc 	andi	r2,r2,255
   959cc:	1080020c 	andi	r2,r2,8
   959d0:	1004c03a 	cmpne	r2,r2,zero
   959d4:	1000221e 	bne	r2,zero,95a60 <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   959d8:	e0bffd17 	ldw	r2,-12(fp)
   959dc:	10c00d83 	ldbu	r3,54(r2)
   959e0:	008002b4 	movhi	r2,10
   959e4:	10b3d204 	addi	r2,r2,-12472
   959e8:	10800003 	ldbu	r2,0(r2)
   959ec:	1884b03a 	or	r2,r3,r2
   959f0:	1007883a 	mov	r3,r2
   959f4:	008002b4 	movhi	r2,10
   959f8:	10b3d204 	addi	r2,r2,-12472
   959fc:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   95a00:	e0bffd17 	ldw	r2,-12(fp)
   95a04:	10800d03 	ldbu	r2,52(r2)
   95a08:	11003fcc 	andi	r4,r2,255
   95a0c:	e0bffd17 	ldw	r2,-12(fp)
   95a10:	10800d03 	ldbu	r2,52(r2)
   95a14:	10c03fcc 	andi	r3,r2,255
   95a18:	008002b4 	movhi	r2,10
   95a1c:	10b3d244 	addi	r2,r2,-12471
   95a20:	10c5883a 	add	r2,r2,r3
   95a24:	10c00003 	ldbu	r3,0(r2)
   95a28:	e0bffd17 	ldw	r2,-12(fp)
   95a2c:	10800d43 	ldbu	r2,53(r2)
   95a30:	1884b03a 	or	r2,r3,r2
   95a34:	1007883a 	mov	r3,r2
   95a38:	008002b4 	movhi	r2,10
   95a3c:	10b3d244 	addi	r2,r2,-12471
   95a40:	1105883a 	add	r2,r2,r4
   95a44:	10c00005 	stb	r3,0(r2)
   95a48:	e0bffc17 	ldw	r2,-16(fp)
   95a4c:	e0bff715 	stw	r2,-36(fp)
   95a50:	e0bff717 	ldw	r2,-36(fp)
   95a54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   95a58:	008f2a80 	call	8f2a8 <OS_Sched>
   95a5c:	00000406 	br	95a70 <OSTimeDlyResume+0x1f4>
   95a60:	e0bffc17 	ldw	r2,-16(fp)
   95a64:	e0bff615 	stw	r2,-40(fp)
   95a68:	e0bff617 	ldw	r2,-40(fp)
   95a6c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   95a70:	e03fff15 	stw	zero,-4(fp)
   95a74:	e0bfff17 	ldw	r2,-4(fp)
}
   95a78:	e037883a 	mov	sp,fp
   95a7c:	dfc00117 	ldw	ra,4(sp)
   95a80:	df000017 	ldw	fp,0(sp)
   95a84:	dec00204 	addi	sp,sp,8
   95a88:	f800283a 	ret

00095a8c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   95a8c:	defffb04 	addi	sp,sp,-20
   95a90:	df000415 	stw	fp,16(sp)
   95a94:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   95a98:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   95a9c:	0005303a 	rdctl	r2,status
   95aa0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   95aa4:	e0fffd17 	ldw	r3,-12(fp)
   95aa8:	00bfff84 	movi	r2,-2
   95aac:	1884703a 	and	r2,r3,r2
   95ab0:	1001703a 	wrctl	status,r2
  
  return context;
   95ab4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   95ab8:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
   95abc:	008002b4 	movhi	r2,10
   95ac0:	10b3d604 	addi	r2,r2,-12456
   95ac4:	10800017 	ldw	r2,0(r2)
   95ac8:	e0bfff15 	stw	r2,-4(fp)
   95acc:	e0bffe17 	ldw	r2,-8(fp)
   95ad0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   95ad4:	e0bffc17 	ldw	r2,-16(fp)
   95ad8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   95adc:	e0bfff17 	ldw	r2,-4(fp)
}
   95ae0:	e037883a 	mov	sp,fp
   95ae4:	df000017 	ldw	fp,0(sp)
   95ae8:	dec00104 	addi	sp,sp,4
   95aec:	f800283a 	ret

00095af0 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   95af0:	defffb04 	addi	sp,sp,-20
   95af4:	df000415 	stw	fp,16(sp)
   95af8:	df000404 	addi	fp,sp,16
   95afc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   95b00:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   95b04:	0005303a 	rdctl	r2,status
   95b08:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   95b0c:	e0fffd17 	ldw	r3,-12(fp)
   95b10:	00bfff84 	movi	r2,-2
   95b14:	1884703a 	and	r2,r3,r2
   95b18:	1001703a 	wrctl	status,r2
  
  return context;
   95b1c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   95b20:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
   95b24:	00c002b4 	movhi	r3,10
   95b28:	18f3d604 	addi	r3,r3,-12456
   95b2c:	e0bfff17 	ldw	r2,-4(fp)
   95b30:	18800015 	stw	r2,0(r3)
   95b34:	e0bffe17 	ldw	r2,-8(fp)
   95b38:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   95b3c:	e0bffc17 	ldw	r2,-16(fp)
   95b40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   95b44:	e037883a 	mov	sp,fp
   95b48:	df000017 	ldw	fp,0(sp)
   95b4c:	dec00104 	addi	sp,sp,4
   95b50:	f800283a 	ret

00095b54 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   95b54:	defffd04 	addi	sp,sp,-12
   95b58:	dfc00215 	stw	ra,8(sp)
   95b5c:	df000115 	stw	fp,4(sp)
   95b60:	df000104 	addi	fp,sp,4
   95b64:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_0, cpu_0);
   95b68:	0097c740 	call	97c74 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   95b6c:	00800044 	movi	r2,1
   95b70:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   95b74:	e037883a 	mov	sp,fp
   95b78:	dfc00117 	ldw	ra,4(sp)
   95b7c:	df000017 	ldw	fp,0(sp)
   95b80:	dec00204 	addi	sp,sp,8
   95b84:	f800283a 	ret

00095b88 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   95b88:	defffe04 	addi	sp,sp,-8
   95b8c:	dfc00115 	stw	ra,4(sp)
   95b90:	df000015 	stw	fp,0(sp)
   95b94:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   95b98:	01000434 	movhi	r4,16
   95b9c:	21041004 	addi	r4,r4,4160
   95ba0:	000b883a 	mov	r5,zero
   95ba4:	000d883a 	mov	r6,zero
   95ba8:	01c0fa04 	movi	r7,1000
   95bac:	0096a100 	call	96a10 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   95bb0:	010002b4 	movhi	r4,10
   95bb4:	2128a504 	addi	r4,r4,-23916
   95bb8:	000b883a 	mov	r5,zero
   95bbc:	01800044 	movi	r6,1
   95bc0:	0095d8c0 	call	95d8c <altera_avalon_jtag_uart_init>
   95bc4:	010002b4 	movhi	r4,10
   95bc8:	21289b04 	addi	r4,r4,-23956
   95bcc:	0095c0c0 	call	95c0c <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
   95bd0:	00c00434 	movhi	r3,16
   95bd4:	18c40004 	addi	r3,r3,4096
   95bd8:	00800044 	movi	r2,1
   95bdc:	18800035 	stwio	r2,0(r3)
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
   95be0:	010002b4 	movhi	r4,10
   95be4:	212cb604 	addi	r4,r4,-19752
   95be8:	0096b500 	call	96b50 <alt_up_character_lcd_init>
   95bec:	010002b4 	movhi	r4,10
   95bf0:	212cb604 	addi	r4,r4,-19752
   95bf4:	0095c0c0 	call	95c0c <alt_dev_reg>
}
   95bf8:	e037883a 	mov	sp,fp
   95bfc:	dfc00117 	ldw	ra,4(sp)
   95c00:	df000017 	ldw	fp,0(sp)
   95c04:	dec00204 	addi	sp,sp,8
   95c08:	f800283a 	ret

00095c0c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   95c0c:	defffd04 	addi	sp,sp,-12
   95c10:	dfc00215 	stw	ra,8(sp)
   95c14:	df000115 	stw	fp,4(sp)
   95c18:	df000104 	addi	fp,sp,4
   95c1c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   95c20:	e13fff17 	ldw	r4,-4(fp)
   95c24:	014002b4 	movhi	r5,10
   95c28:	296cca04 	addi	r5,r5,-19672
   95c2c:	00971400 	call	97140 <alt_dev_llist_insert>
}
   95c30:	e037883a 	mov	sp,fp
   95c34:	dfc00117 	ldw	ra,4(sp)
   95c38:	df000017 	ldw	fp,0(sp)
   95c3c:	dec00204 	addi	sp,sp,8
   95c40:	f800283a 	ret

00095c44 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   95c44:	defffa04 	addi	sp,sp,-24
   95c48:	dfc00515 	stw	ra,20(sp)
   95c4c:	df000415 	stw	fp,16(sp)
   95c50:	df000404 	addi	fp,sp,16
   95c54:	e13ffd15 	stw	r4,-12(fp)
   95c58:	e17ffe15 	stw	r5,-8(fp)
   95c5c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   95c60:	e0bffd17 	ldw	r2,-12(fp)
   95c64:	10800017 	ldw	r2,0(r2)
   95c68:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   95c6c:	e0bffc17 	ldw	r2,-16(fp)
   95c70:	11000a04 	addi	r4,r2,40
   95c74:	e0bffd17 	ldw	r2,-12(fp)
   95c78:	11c00217 	ldw	r7,8(r2)
   95c7c:	e17ffe17 	ldw	r5,-8(fp)
   95c80:	e1bfff17 	ldw	r6,-4(fp)
   95c84:	00964040 	call	96404 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   95c88:	e037883a 	mov	sp,fp
   95c8c:	dfc00117 	ldw	ra,4(sp)
   95c90:	df000017 	ldw	fp,0(sp)
   95c94:	dec00204 	addi	sp,sp,8
   95c98:	f800283a 	ret

00095c9c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   95c9c:	defffa04 	addi	sp,sp,-24
   95ca0:	dfc00515 	stw	ra,20(sp)
   95ca4:	df000415 	stw	fp,16(sp)
   95ca8:	df000404 	addi	fp,sp,16
   95cac:	e13ffd15 	stw	r4,-12(fp)
   95cb0:	e17ffe15 	stw	r5,-8(fp)
   95cb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   95cb8:	e0bffd17 	ldw	r2,-12(fp)
   95cbc:	10800017 	ldw	r2,0(r2)
   95cc0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   95cc4:	e0bffc17 	ldw	r2,-16(fp)
   95cc8:	11000a04 	addi	r4,r2,40
   95ccc:	e0bffd17 	ldw	r2,-12(fp)
   95cd0:	11c00217 	ldw	r7,8(r2)
   95cd4:	e17ffe17 	ldw	r5,-8(fp)
   95cd8:	e1bfff17 	ldw	r6,-4(fp)
   95cdc:	00966c40 	call	966c4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   95ce0:	e037883a 	mov	sp,fp
   95ce4:	dfc00117 	ldw	ra,4(sp)
   95ce8:	df000017 	ldw	fp,0(sp)
   95cec:	dec00204 	addi	sp,sp,8
   95cf0:	f800283a 	ret

00095cf4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   95cf4:	defffc04 	addi	sp,sp,-16
   95cf8:	dfc00315 	stw	ra,12(sp)
   95cfc:	df000215 	stw	fp,8(sp)
   95d00:	df000204 	addi	fp,sp,8
   95d04:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   95d08:	e0bfff17 	ldw	r2,-4(fp)
   95d0c:	10800017 	ldw	r2,0(r2)
   95d10:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   95d14:	e0bffe17 	ldw	r2,-8(fp)
   95d18:	11000a04 	addi	r4,r2,40
   95d1c:	e0bfff17 	ldw	r2,-4(fp)
   95d20:	11400217 	ldw	r5,8(r2)
   95d24:	009629c0 	call	9629c <altera_avalon_jtag_uart_close>
}
   95d28:	e037883a 	mov	sp,fp
   95d2c:	dfc00117 	ldw	ra,4(sp)
   95d30:	df000017 	ldw	fp,0(sp)
   95d34:	dec00204 	addi	sp,sp,8
   95d38:	f800283a 	ret

00095d3c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   95d3c:	defffa04 	addi	sp,sp,-24
   95d40:	dfc00515 	stw	ra,20(sp)
   95d44:	df000415 	stw	fp,16(sp)
   95d48:	df000404 	addi	fp,sp,16
   95d4c:	e13ffd15 	stw	r4,-12(fp)
   95d50:	e17ffe15 	stw	r5,-8(fp)
   95d54:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   95d58:	e0bffd17 	ldw	r2,-12(fp)
   95d5c:	10800017 	ldw	r2,0(r2)
   95d60:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   95d64:	e0bffc17 	ldw	r2,-16(fp)
   95d68:	11000a04 	addi	r4,r2,40
   95d6c:	e17ffe17 	ldw	r5,-8(fp)
   95d70:	e1bfff17 	ldw	r6,-4(fp)
   95d74:	00963100 	call	96310 <altera_avalon_jtag_uart_ioctl>
}
   95d78:	e037883a 	mov	sp,fp
   95d7c:	dfc00117 	ldw	ra,4(sp)
   95d80:	df000017 	ldw	fp,0(sp)
   95d84:	dec00204 	addi	sp,sp,8
   95d88:	f800283a 	ret

00095d8c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   95d8c:	defff404 	addi	sp,sp,-48
   95d90:	dfc00b15 	stw	ra,44(sp)
   95d94:	df000a15 	stw	fp,40(sp)
   95d98:	df000a04 	addi	fp,sp,40
   95d9c:	e13ffd15 	stw	r4,-12(fp)
   95da0:	e17ffe15 	stw	r5,-8(fp)
   95da4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   95da8:	e0bffd17 	ldw	r2,-12(fp)
   95dac:	10800c04 	addi	r2,r2,48
   95db0:	e0bffb15 	stw	r2,-20(fp)
   95db4:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   95db8:	e13ffc0b 	ldhu	r4,-16(fp)
   95dbc:	e17ffc84 	addi	r5,fp,-14
   95dc0:	008fe500 	call	8fe50 <OSFlagCreate>
   95dc4:	1007883a 	mov	r3,r2
   95dc8:	e0bffb17 	ldw	r2,-20(fp)
   95dcc:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   95dd0:	e0bffd17 	ldw	r2,-12(fp)
   95dd4:	10800a04 	addi	r2,r2,40
   95dd8:	e0bff915 	stw	r2,-28(fp)
   95ddc:	00800044 	movi	r2,1
   95de0:	e0bffa0d 	sth	r2,-24(fp)
   95de4:	e13ffa0b 	ldhu	r4,-24(fp)
   95de8:	00930580 	call	93058 <OSSemCreate>
   95dec:	1007883a 	mov	r3,r2
   95df0:	e0bff917 	ldw	r2,-28(fp)
   95df4:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   95df8:	e0bffd17 	ldw	r2,-12(fp)
   95dfc:	10800b04 	addi	r2,r2,44
   95e00:	e0bff715 	stw	r2,-36(fp)
   95e04:	00800044 	movi	r2,1
   95e08:	e0bff80d 	sth	r2,-32(fp)
   95e0c:	e13ff80b 	ldhu	r4,-32(fp)
   95e10:	00930580 	call	93058 <OSSemCreate>
   95e14:	1007883a 	mov	r3,r2
   95e18:	e0bff717 	ldw	r2,-36(fp)
   95e1c:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   95e20:	e0fffd17 	ldw	r3,-12(fp)
   95e24:	00800044 	movi	r2,1
   95e28:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   95e2c:	e0bffd17 	ldw	r2,-12(fp)
   95e30:	10800017 	ldw	r2,0(r2)
   95e34:	11000104 	addi	r4,r2,4
   95e38:	e0bffd17 	ldw	r2,-12(fp)
   95e3c:	10800817 	ldw	r2,32(r2)
   95e40:	1007883a 	mov	r3,r2
   95e44:	2005883a 	mov	r2,r4
   95e48:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   95e4c:	e13ffe17 	ldw	r4,-8(fp)
   95e50:	e17fff17 	ldw	r5,-4(fp)
   95e54:	d8000015 	stw	zero,0(sp)
   95e58:	01800274 	movhi	r6,9
   95e5c:	3197b104 	addi	r6,r6,24260
   95e60:	e1fffd17 	ldw	r7,-12(fp)
   95e64:	00973cc0 	call	973cc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   95e68:	e0bffd17 	ldw	r2,-12(fp)
   95e6c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   95e70:	e0bffd17 	ldw	r2,-12(fp)
   95e74:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   95e78:	008002b4 	movhi	r2,10
   95e7c:	10b3da04 	addi	r2,r2,-12440
   95e80:	10800017 	ldw	r2,0(r2)
   95e84:	100b883a 	mov	r5,r2
   95e88:	01800274 	movhi	r6,9
   95e8c:	31986204 	addi	r6,r6,24968
   95e90:	e1fffd17 	ldw	r7,-12(fp)
   95e94:	0096fd00 	call	96fd0 <alt_alarm_start>
   95e98:	1004403a 	cmpge	r2,r2,zero
   95e9c:	1000041e 	bne	r2,zero,95eb0 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   95ea0:	e0fffd17 	ldw	r3,-12(fp)
   95ea4:	00a00034 	movhi	r2,32768
   95ea8:	10bfffc4 	addi	r2,r2,-1
   95eac:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   95eb0:	e037883a 	mov	sp,fp
   95eb4:	dfc00117 	ldw	ra,4(sp)
   95eb8:	df000017 	ldw	fp,0(sp)
   95ebc:	dec00204 	addi	sp,sp,8
   95ec0:	f800283a 	ret

00095ec4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   95ec4:	defff204 	addi	sp,sp,-56
   95ec8:	dfc00d15 	stw	ra,52(sp)
   95ecc:	df000c15 	stw	fp,48(sp)
   95ed0:	df000c04 	addi	fp,sp,48
   95ed4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   95ed8:	e0bfff17 	ldw	r2,-4(fp)
   95edc:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
   95ee0:	e0bffd17 	ldw	r2,-12(fp)
   95ee4:	10800017 	ldw	r2,0(r2)
   95ee8:	e0bffc15 	stw	r2,-16(fp)
   95eec:	00000006 	br	95ef0 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   95ef0:	e0bffc17 	ldw	r2,-16(fp)
   95ef4:	10800104 	addi	r2,r2,4
   95ef8:	10800037 	ldwio	r2,0(r2)
   95efc:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   95f00:	e0bffb17 	ldw	r2,-20(fp)
   95f04:	1080c00c 	andi	r2,r2,768
   95f08:	1005003a 	cmpeq	r2,r2,zero
   95f0c:	1000991e 	bne	r2,zero,96174 <altera_avalon_jtag_uart_irq+0x2b0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   95f10:	e0bffb17 	ldw	r2,-20(fp)
   95f14:	1080400c 	andi	r2,r2,256
   95f18:	1005003a 	cmpeq	r2,r2,zero
   95f1c:	1000481e 	bne	r2,zero,96040 <altera_avalon_jtag_uart_irq+0x17c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   95f20:	00800074 	movhi	r2,1
   95f24:	e0bffa15 	stw	r2,-24(fp)
   95f28:	00000006 	br	95f2c <altera_avalon_jtag_uart_irq+0x68>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   95f2c:	e0bffd17 	ldw	r2,-12(fp)
   95f30:	10800d17 	ldw	r2,52(r2)
   95f34:	10800044 	addi	r2,r2,1
   95f38:	1081ffcc 	andi	r2,r2,2047
   95f3c:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   95f40:	e0bffd17 	ldw	r2,-12(fp)
   95f44:	10c00e17 	ldw	r3,56(r2)
   95f48:	e0bff917 	ldw	r2,-28(fp)
   95f4c:	18802826 	beq	r3,r2,95ff0 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   95f50:	e0bffc17 	ldw	r2,-16(fp)
   95f54:	10800037 	ldwio	r2,0(r2)
   95f58:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   95f5c:	e0bffa17 	ldw	r2,-24(fp)
   95f60:	10a0000c 	andi	r2,r2,32768
   95f64:	1005003a 	cmpeq	r2,r2,zero
   95f68:	1000211e 	bne	r2,zero,95ff0 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   95f6c:	e0bffd17 	ldw	r2,-12(fp)
   95f70:	10c00d17 	ldw	r3,52(r2)
   95f74:	e0bffa17 	ldw	r2,-24(fp)
   95f78:	1009883a 	mov	r4,r2
   95f7c:	e0bffd17 	ldw	r2,-12(fp)
   95f80:	1885883a 	add	r2,r3,r2
   95f84:	10801104 	addi	r2,r2,68
   95f88:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   95f8c:	e0bffd17 	ldw	r2,-12(fp)
   95f90:	10800d17 	ldw	r2,52(r2)
   95f94:	10800044 	addi	r2,r2,1
   95f98:	10c1ffcc 	andi	r3,r2,2047
   95f9c:	e0bffd17 	ldw	r2,-12(fp)
   95fa0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   95fa4:	e0bffd17 	ldw	r2,-12(fp)
   95fa8:	10800c17 	ldw	r2,48(r2)
   95fac:	e0bff615 	stw	r2,-40(fp)
   95fb0:	00800044 	movi	r2,1
   95fb4:	e0bff70d 	sth	r2,-36(fp)
   95fb8:	00800044 	movi	r2,1
   95fbc:	e0bff785 	stb	r2,-34(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   95fc0:	008002b4 	movhi	r2,10
   95fc4:	10b3c644 	addi	r2,r2,-12519
   95fc8:	10800003 	ldbu	r2,0(r2)
   95fcc:	10803fcc 	andi	r2,r2,255
   95fd0:	1005003a 	cmpeq	r2,r2,zero
   95fd4:	103fd51e 	bne	r2,zero,95f2c <altera_avalon_jtag_uart_irq+0x68>
  {
    OSFlagPost (group, flags, opt, &err);
   95fd8:	e17ff70b 	ldhu	r5,-36(fp)
   95fdc:	e1bff783 	ldbu	r6,-34(fp)
   95fe0:	e1fffe04 	addi	r7,fp,-8
   95fe4:	e13ff617 	ldw	r4,-40(fp)
   95fe8:	0090b780 	call	90b78 <OSFlagPost>
    return err;
   95fec:	003fcf06 	br	95f2c <altera_avalon_jtag_uart_irq+0x68>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   95ff0:	e0bffa17 	ldw	r2,-24(fp)
   95ff4:	10bfffec 	andhi	r2,r2,65535
   95ff8:	1005003a 	cmpeq	r2,r2,zero
   95ffc:	1000101e 	bne	r2,zero,96040 <altera_avalon_jtag_uart_irq+0x17c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   96000:	e0bffd17 	ldw	r2,-12(fp)
   96004:	10c00817 	ldw	r3,32(r2)
   96008:	00bfff84 	movi	r2,-2
   9600c:	1886703a 	and	r3,r3,r2
   96010:	e0bffd17 	ldw	r2,-12(fp)
   96014:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   96018:	e0bffc17 	ldw	r2,-16(fp)
   9601c:	11000104 	addi	r4,r2,4
   96020:	e0bffd17 	ldw	r2,-12(fp)
   96024:	10800817 	ldw	r2,32(r2)
   96028:	1007883a 	mov	r3,r2
   9602c:	2005883a 	mov	r2,r4
   96030:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   96034:	e0bffc17 	ldw	r2,-16(fp)
   96038:	10800104 	addi	r2,r2,4
   9603c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   96040:	e0bffb17 	ldw	r2,-20(fp)
   96044:	1080800c 	andi	r2,r2,512
   96048:	1005003a 	cmpeq	r2,r2,zero
   9604c:	103fa81e 	bne	r2,zero,95ef0 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   96050:	e0bffb17 	ldw	r2,-20(fp)
   96054:	10bfffec 	andhi	r2,r2,65535
   96058:	1004d43a 	srli	r2,r2,16
   9605c:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   96060:	00002706 	br	96100 <altera_avalon_jtag_uart_irq+0x23c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   96064:	e13ffc17 	ldw	r4,-16(fp)
   96068:	e0bffd17 	ldw	r2,-12(fp)
   9606c:	10c01017 	ldw	r3,64(r2)
   96070:	e0bffd17 	ldw	r2,-12(fp)
   96074:	1885883a 	add	r2,r3,r2
   96078:	10821104 	addi	r2,r2,2116
   9607c:	10800003 	ldbu	r2,0(r2)
   96080:	10c03fcc 	andi	r3,r2,255
   96084:	18c0201c 	xori	r3,r3,128
   96088:	18ffe004 	addi	r3,r3,-128
   9608c:	2005883a 	mov	r2,r4
   96090:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   96094:	e0bffd17 	ldw	r2,-12(fp)
   96098:	10801017 	ldw	r2,64(r2)
   9609c:	10800044 	addi	r2,r2,1
   960a0:	10c1ffcc 	andi	r3,r2,2047
   960a4:	e0bffd17 	ldw	r2,-12(fp)
   960a8:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   960ac:	e0bffd17 	ldw	r2,-12(fp)
   960b0:	10800c17 	ldw	r2,48(r2)
   960b4:	e0bff415 	stw	r2,-48(fp)
   960b8:	00800084 	movi	r2,2
   960bc:	e0bff50d 	sth	r2,-44(fp)
   960c0:	00800044 	movi	r2,1
   960c4:	e0bff585 	stb	r2,-42(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   960c8:	008002b4 	movhi	r2,10
   960cc:	10b3c644 	addi	r2,r2,-12519
   960d0:	10800003 	ldbu	r2,0(r2)
   960d4:	10803fcc 	andi	r2,r2,255
   960d8:	1005003a 	cmpeq	r2,r2,zero
   960dc:	1000051e 	bne	r2,zero,960f4 <altera_avalon_jtag_uart_irq+0x230>
  {
    OSFlagPost (group, flags, opt, &err);
   960e0:	e17ff50b 	ldhu	r5,-44(fp)
   960e4:	e1bff583 	ldbu	r6,-42(fp)
   960e8:	e1fffe44 	addi	r7,fp,-7
   960ec:	e13ff417 	ldw	r4,-48(fp)
   960f0:	0090b780 	call	90b78 <OSFlagPost>

        space--;
   960f4:	e0bff817 	ldw	r2,-32(fp)
   960f8:	10bfffc4 	addi	r2,r2,-1
   960fc:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   96100:	e0bff817 	ldw	r2,-32(fp)
   96104:	1005003a 	cmpeq	r2,r2,zero
   96108:	1000051e 	bne	r2,zero,96120 <altera_avalon_jtag_uart_irq+0x25c>
   9610c:	e0bffd17 	ldw	r2,-12(fp)
   96110:	10c01017 	ldw	r3,64(r2)
   96114:	e0bffd17 	ldw	r2,-12(fp)
   96118:	10800f17 	ldw	r2,60(r2)
   9611c:	18bfd11e 	bne	r3,r2,96064 <altera_avalon_jtag_uart_irq+0x1a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   96120:	e0bff817 	ldw	r2,-32(fp)
   96124:	1005003a 	cmpeq	r2,r2,zero
   96128:	103f711e 	bne	r2,zero,95ef0 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   9612c:	e0bffd17 	ldw	r2,-12(fp)
   96130:	10c00817 	ldw	r3,32(r2)
   96134:	00bfff44 	movi	r2,-3
   96138:	1886703a 	and	r3,r3,r2
   9613c:	e0bffd17 	ldw	r2,-12(fp)
   96140:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   96144:	e0bffd17 	ldw	r2,-12(fp)
   96148:	10800017 	ldw	r2,0(r2)
   9614c:	11000104 	addi	r4,r2,4
   96150:	e0bffd17 	ldw	r2,-12(fp)
   96154:	10800817 	ldw	r2,32(r2)
   96158:	1007883a 	mov	r3,r2
   9615c:	2005883a 	mov	r2,r4
   96160:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   96164:	e0bffc17 	ldw	r2,-16(fp)
   96168:	10800104 	addi	r2,r2,4
   9616c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   96170:	003f5f06 	br	95ef0 <altera_avalon_jtag_uart_irq+0x2c>
}
   96174:	e037883a 	mov	sp,fp
   96178:	dfc00117 	ldw	ra,4(sp)
   9617c:	df000017 	ldw	fp,0(sp)
   96180:	dec00204 	addi	sp,sp,8
   96184:	f800283a 	ret

00096188 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   96188:	defff804 	addi	sp,sp,-32
   9618c:	dfc00715 	stw	ra,28(sp)
   96190:	df000615 	stw	fp,24(sp)
   96194:	df000604 	addi	fp,sp,24
   96198:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   9619c:	e0bfff17 	ldw	r2,-4(fp)
   961a0:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   961a4:	e0bffd17 	ldw	r2,-12(fp)
   961a8:	10800017 	ldw	r2,0(r2)
   961ac:	10800104 	addi	r2,r2,4
   961b0:	10800037 	ldwio	r2,0(r2)
   961b4:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   961b8:	e0bffc17 	ldw	r2,-16(fp)
   961bc:	1081000c 	andi	r2,r2,1024
   961c0:	1005003a 	cmpeq	r2,r2,zero
   961c4:	10000c1e 	bne	r2,zero,961f8 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   961c8:	e0bffd17 	ldw	r2,-12(fp)
   961cc:	10800017 	ldw	r2,0(r2)
   961d0:	11000104 	addi	r4,r2,4
   961d4:	e0bffd17 	ldw	r2,-12(fp)
   961d8:	10800817 	ldw	r2,32(r2)
   961dc:	10810014 	ori	r2,r2,1024
   961e0:	1007883a 	mov	r3,r2
   961e4:	2005883a 	mov	r2,r4
   961e8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   961ec:	e0bffd17 	ldw	r2,-12(fp)
   961f0:	10000915 	stw	zero,36(r2)
   961f4:	00002106 	br	9627c <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   961f8:	e0bffd17 	ldw	r2,-12(fp)
   961fc:	10c00917 	ldw	r3,36(r2)
   96200:	00a00034 	movhi	r2,32768
   96204:	10bfff04 	addi	r2,r2,-4
   96208:	10c01c36 	bltu	r2,r3,9627c <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
   9620c:	e0bffd17 	ldw	r2,-12(fp)
   96210:	10800917 	ldw	r2,36(r2)
   96214:	10c00044 	addi	r3,r2,1
   96218:	e0bffd17 	ldw	r2,-12(fp)
   9621c:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   96220:	e0bffd17 	ldw	r2,-12(fp)
   96224:	10c00917 	ldw	r3,36(r2)
   96228:	e0bffd17 	ldw	r2,-12(fp)
   9622c:	10800117 	ldw	r2,4(r2)
   96230:	18801236 	bltu	r3,r2,9627c <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   96234:	e0bffd17 	ldw	r2,-12(fp)
   96238:	10800c17 	ldw	r2,48(r2)
   9623c:	e0bffa15 	stw	r2,-24(fp)
   96240:	00800104 	movi	r2,4
   96244:	e0bffb0d 	sth	r2,-20(fp)
   96248:	00800044 	movi	r2,1
   9624c:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   96250:	008002b4 	movhi	r2,10
   96254:	10b3c644 	addi	r2,r2,-12519
   96258:	10800003 	ldbu	r2,0(r2)
   9625c:	10803fcc 	andi	r2,r2,255
   96260:	1005003a 	cmpeq	r2,r2,zero
   96264:	1000051e 	bne	r2,zero,9627c <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
   96268:	e17ffb0b 	ldhu	r5,-20(fp)
   9626c:	e1bffb83 	ldbu	r6,-18(fp)
   96270:	e1fffe04 	addi	r7,fp,-8
   96274:	e13ffa17 	ldw	r4,-24(fp)
   96278:	0090b780 	call	90b78 <OSFlagPost>
   9627c:	008002b4 	movhi	r2,10
   96280:	10b3da04 	addi	r2,r2,-12440
   96284:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   96288:	e037883a 	mov	sp,fp
   9628c:	dfc00117 	ldw	ra,4(sp)
   96290:	df000017 	ldw	fp,0(sp)
   96294:	dec00204 	addi	sp,sp,8
   96298:	f800283a 	ret

0009629c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   9629c:	defffc04 	addi	sp,sp,-16
   962a0:	df000315 	stw	fp,12(sp)
   962a4:	df000304 	addi	fp,sp,12
   962a8:	e13ffd15 	stw	r4,-12(fp)
   962ac:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   962b0:	00000706 	br	962d0 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   962b4:	e0bffe17 	ldw	r2,-8(fp)
   962b8:	1090000c 	andi	r2,r2,16384
   962bc:	1005003a 	cmpeq	r2,r2,zero
   962c0:	1000031e 	bne	r2,zero,962d0 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   962c4:	00bffd44 	movi	r2,-11
   962c8:	e0bfff15 	stw	r2,-4(fp)
   962cc:	00000b06 	br	962fc <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   962d0:	e0bffd17 	ldw	r2,-12(fp)
   962d4:	10c01017 	ldw	r3,64(r2)
   962d8:	e0bffd17 	ldw	r2,-12(fp)
   962dc:	10800f17 	ldw	r2,60(r2)
   962e0:	18800526 	beq	r3,r2,962f8 <altera_avalon_jtag_uart_close+0x5c>
   962e4:	e0bffd17 	ldw	r2,-12(fp)
   962e8:	10c00917 	ldw	r3,36(r2)
   962ec:	e0bffd17 	ldw	r2,-12(fp)
   962f0:	10800117 	ldw	r2,4(r2)
   962f4:	18bfef36 	bltu	r3,r2,962b4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   962f8:	e03fff15 	stw	zero,-4(fp)
   962fc:	e0bfff17 	ldw	r2,-4(fp)
}
   96300:	e037883a 	mov	sp,fp
   96304:	df000017 	ldw	fp,0(sp)
   96308:	dec00104 	addi	sp,sp,4
   9630c:	f800283a 	ret

00096310 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   96310:	defff804 	addi	sp,sp,-32
   96314:	df000715 	stw	fp,28(sp)
   96318:	df000704 	addi	fp,sp,28
   9631c:	e13ffb15 	stw	r4,-20(fp)
   96320:	e17ffc15 	stw	r5,-16(fp)
   96324:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   96328:	00bff9c4 	movi	r2,-25
   9632c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   96330:	e0bffc17 	ldw	r2,-16(fp)
   96334:	e0bfff15 	stw	r2,-4(fp)
   96338:	e0ffff17 	ldw	r3,-4(fp)
   9633c:	189a8060 	cmpeqi	r2,r3,27137
   96340:	1000041e 	bne	r2,zero,96354 <altera_avalon_jtag_uart_ioctl+0x44>
   96344:	e0ffff17 	ldw	r3,-4(fp)
   96348:	189a80a0 	cmpeqi	r2,r3,27138
   9634c:	10001b1e 	bne	r2,zero,963bc <altera_avalon_jtag_uart_ioctl+0xac>
   96350:	00002706 	br	963f0 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   96354:	e0bffb17 	ldw	r2,-20(fp)
   96358:	10c00117 	ldw	r3,4(r2)
   9635c:	00a00034 	movhi	r2,32768
   96360:	10bfffc4 	addi	r2,r2,-1
   96364:	18802226 	beq	r3,r2,963f0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   96368:	e0bffd17 	ldw	r2,-12(fp)
   9636c:	10800017 	ldw	r2,0(r2)
   96370:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   96374:	e0bff917 	ldw	r2,-28(fp)
   96378:	10800090 	cmplti	r2,r2,2
   9637c:	1000071e 	bne	r2,zero,9639c <altera_avalon_jtag_uart_ioctl+0x8c>
   96380:	e0fff917 	ldw	r3,-28(fp)
   96384:	00a00034 	movhi	r2,32768
   96388:	10bfffc4 	addi	r2,r2,-1
   9638c:	18800326 	beq	r3,r2,9639c <altera_avalon_jtag_uart_ioctl+0x8c>
   96390:	e0bff917 	ldw	r2,-28(fp)
   96394:	e0bffe15 	stw	r2,-8(fp)
   96398:	00000306 	br	963a8 <altera_avalon_jtag_uart_ioctl+0x98>
   9639c:	00e00034 	movhi	r3,32768
   963a0:	18ffff84 	addi	r3,r3,-2
   963a4:	e0fffe15 	stw	r3,-8(fp)
   963a8:	e0bffb17 	ldw	r2,-20(fp)
   963ac:	e0fffe17 	ldw	r3,-8(fp)
   963b0:	10c00115 	stw	r3,4(r2)
      rc = 0;
   963b4:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   963b8:	00000d06 	br	963f0 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   963bc:	e0bffb17 	ldw	r2,-20(fp)
   963c0:	10c00117 	ldw	r3,4(r2)
   963c4:	00a00034 	movhi	r2,32768
   963c8:	10bfffc4 	addi	r2,r2,-1
   963cc:	18800826 	beq	r3,r2,963f0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   963d0:	e13ffd17 	ldw	r4,-12(fp)
   963d4:	e0bffb17 	ldw	r2,-20(fp)
   963d8:	10c00917 	ldw	r3,36(r2)
   963dc:	e0bffb17 	ldw	r2,-20(fp)
   963e0:	10800117 	ldw	r2,4(r2)
   963e4:	1885803a 	cmpltu	r2,r3,r2
   963e8:	20800015 	stw	r2,0(r4)
      rc = 0;
   963ec:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   963f0:	e0bffa17 	ldw	r2,-24(fp)
}
   963f4:	e037883a 	mov	sp,fp
   963f8:	df000017 	ldw	fp,0(sp)
   963fc:	dec00104 	addi	sp,sp,4
   96400:	f800283a 	ret

00096404 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   96404:	deffeb04 	addi	sp,sp,-84
   96408:	dfc01415 	stw	ra,80(sp)
   9640c:	df001315 	stw	fp,76(sp)
   96410:	df001304 	addi	fp,sp,76
   96414:	e13ffb15 	stw	r4,-20(fp)
   96418:	e17ffc15 	stw	r5,-16(fp)
   9641c:	e1bffd15 	stw	r6,-12(fp)
   96420:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   96424:	e0bffc17 	ldw	r2,-16(fp)
   96428:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   9642c:	e0bffb17 	ldw	r2,-20(fp)
   96430:	10800a17 	ldw	r2,40(r2)
   96434:	e0bff315 	stw	r2,-52(fp)
   96438:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   9643c:	e17ff40b 	ldhu	r5,-48(fp)
   96440:	e1bffa44 	addi	r6,fp,-23
   96444:	e13ff317 	ldw	r4,-52(fp)
   96448:	009340c0 	call	9340c <OSSemPend>

  while (space > 0)
   9644c:	00006406 	br	965e0 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   96450:	e0bffb17 	ldw	r2,-20(fp)
   96454:	10800d17 	ldw	r2,52(r2)
   96458:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
   9645c:	e0bffb17 	ldw	r2,-20(fp)
   96460:	10800e17 	ldw	r2,56(r2)
   96464:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
   96468:	e0fff617 	ldw	r3,-40(fp)
   9646c:	e0bff517 	ldw	r2,-44(fp)
   96470:	18800536 	bltu	r3,r2,96488 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
   96474:	e0bff617 	ldw	r2,-40(fp)
   96478:	e0fff517 	ldw	r3,-44(fp)
   9647c:	10c5c83a 	sub	r2,r2,r3
   96480:	e0bff715 	stw	r2,-36(fp)
   96484:	00000406 	br	96498 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   96488:	00820004 	movi	r2,2048
   9648c:	e0fff517 	ldw	r3,-44(fp)
   96490:	10c5c83a 	sub	r2,r2,r3
   96494:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
   96498:	e0bff717 	ldw	r2,-36(fp)
   9649c:	1005003a 	cmpeq	r2,r2,zero
   964a0:	10001f1e 	bne	r2,zero,96520 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   964a4:	e0fffd17 	ldw	r3,-12(fp)
   964a8:	e0bff717 	ldw	r2,-36(fp)
   964ac:	1880022e 	bgeu	r3,r2,964b8 <altera_avalon_jtag_uart_read+0xb4>
        n = space;
   964b0:	e0bffd17 	ldw	r2,-12(fp)
   964b4:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   964b8:	e0bffb17 	ldw	r2,-20(fp)
   964bc:	10c01104 	addi	r3,r2,68
   964c0:	e0bff517 	ldw	r2,-44(fp)
   964c4:	1887883a 	add	r3,r3,r2
   964c8:	e0bff917 	ldw	r2,-28(fp)
   964cc:	1009883a 	mov	r4,r2
   964d0:	180b883a 	mov	r5,r3
   964d4:	e1bff717 	ldw	r6,-36(fp)
   964d8:	008812c0 	call	8812c <memcpy>
      ptr   += n;
   964dc:	e0fff717 	ldw	r3,-36(fp)
   964e0:	e0bff917 	ldw	r2,-28(fp)
   964e4:	10c5883a 	add	r2,r2,r3
   964e8:	e0bff915 	stw	r2,-28(fp)
      space -= n;
   964ec:	e0fffd17 	ldw	r3,-12(fp)
   964f0:	e0bff717 	ldw	r2,-36(fp)
   964f4:	1885c83a 	sub	r2,r3,r2
   964f8:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   964fc:	e0fff517 	ldw	r3,-44(fp)
   96500:	e0bff717 	ldw	r2,-36(fp)
   96504:	1885883a 	add	r2,r3,r2
   96508:	10c1ffcc 	andi	r3,r2,2047
   9650c:	e0bffb17 	ldw	r2,-20(fp)
   96510:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   96514:	e0bffd17 	ldw	r2,-12(fp)
   96518:	10800048 	cmpgei	r2,r2,1
   9651c:	103fcc1e 	bne	r2,zero,96450 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
   96520:	e0fff917 	ldw	r3,-28(fp)
   96524:	e0bffc17 	ldw	r2,-16(fp)
   96528:	1880301e 	bne	r3,r2,965ec <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   9652c:	e0bffe17 	ldw	r2,-8(fp)
   96530:	1090000c 	andi	r2,r2,16384
   96534:	1004c03a 	cmpne	r2,r2,zero
   96538:	10002c1e 	bne	r2,zero,965ec <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   9653c:	008002b4 	movhi	r2,10
   96540:	10b3c644 	addi	r2,r2,-12519
   96544:	10800003 	ldbu	r2,0(r2)
   96548:	10803fcc 	andi	r2,r2,255
   9654c:	10800058 	cmpnei	r2,r2,1
   96550:	1000161e 	bne	r2,zero,965ac <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   96554:	e0bffb17 	ldw	r2,-20(fp)
   96558:	10800c17 	ldw	r2,48(r2)
   9655c:	e0bff015 	stw	r2,-64(fp)
   96560:	00800144 	movi	r2,5
   96564:	e0bff10d 	sth	r2,-60(fp)
   96568:	00bfe0c4 	movi	r2,-125
   9656c:	e0bff185 	stb	r2,-58(fp)
   96570:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   96574:	008002b4 	movhi	r2,10
   96578:	10b3c644 	addi	r2,r2,-12519
   9657c:	10800003 	ldbu	r2,0(r2)
   96580:	10803fcc 	andi	r2,r2,255
   96584:	1005003a 	cmpeq	r2,r2,zero
   96588:	1000111e 	bne	r2,zero,965d0 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   9658c:	e17ff10b 	ldhu	r5,-60(fp)
   96590:	e1bff183 	ldbu	r6,-58(fp)
   96594:	e1fff20b 	ldhu	r7,-56(fp)
   96598:	e0bffa04 	addi	r2,fp,-24
   9659c:	d8800015 	stw	r2,0(sp)
   965a0:	e13ff017 	ldw	r4,-64(fp)
   965a4:	00904cc0 	call	904cc <OSFlagPend>
    return err;
   965a8:	00000906 	br	965d0 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   965ac:	e0bffb17 	ldw	r2,-20(fp)
   965b0:	10c00d17 	ldw	r3,52(r2)
   965b4:	e0bff617 	ldw	r2,-40(fp)
   965b8:	1880051e 	bne	r3,r2,965d0 <altera_avalon_jtag_uart_read+0x1cc>
   965bc:	e0bffb17 	ldw	r2,-20(fp)
   965c0:	10c00917 	ldw	r3,36(r2)
   965c4:	e0bffb17 	ldw	r2,-20(fp)
   965c8:	10800117 	ldw	r2,4(r2)
   965cc:	18bff736 	bltu	r3,r2,965ac <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   965d0:	e0bffb17 	ldw	r2,-20(fp)
   965d4:	10c00d17 	ldw	r3,52(r2)
   965d8:	e0bff617 	ldw	r2,-40(fp)
   965dc:	18800326 	beq	r3,r2,965ec <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   965e0:	e0bffd17 	ldw	r2,-12(fp)
   965e4:	10800048 	cmpgei	r2,r2,1
   965e8:	103f991e 	bne	r2,zero,96450 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   965ec:	e0bffb17 	ldw	r2,-20(fp)
   965f0:	11000a17 	ldw	r4,40(r2)
   965f4:	00938040 	call	93804 <OSSemPost>

  if (ptr != buffer)
   965f8:	e0fff917 	ldw	r3,-28(fp)
   965fc:	e0bffc17 	ldw	r2,-16(fp)
   96600:	18801926 	beq	r3,r2,96668 <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   96604:	0005303a 	rdctl	r2,status
   96608:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9660c:	e0ffef17 	ldw	r3,-68(fp)
   96610:	00bfff84 	movi	r2,-2
   96614:	1884703a 	and	r2,r3,r2
   96618:	1001703a 	wrctl	status,r2
  
  return context;
   9661c:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   96620:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   96624:	e0bffb17 	ldw	r2,-20(fp)
   96628:	10800817 	ldw	r2,32(r2)
   9662c:	10c00054 	ori	r3,r2,1
   96630:	e0bffb17 	ldw	r2,-20(fp)
   96634:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   96638:	e0bffb17 	ldw	r2,-20(fp)
   9663c:	10800017 	ldw	r2,0(r2)
   96640:	11000104 	addi	r4,r2,4
   96644:	e0bffb17 	ldw	r2,-20(fp)
   96648:	10800817 	ldw	r2,32(r2)
   9664c:	1007883a 	mov	r3,r2
   96650:	2005883a 	mov	r2,r4
   96654:	10c00035 	stwio	r3,0(r2)
   96658:	e0bff817 	ldw	r2,-32(fp)
   9665c:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   96660:	e0bfee17 	ldw	r2,-72(fp)
   96664:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   96668:	e0fff917 	ldw	r3,-28(fp)
   9666c:	e0bffc17 	ldw	r2,-16(fp)
   96670:	18800526 	beq	r3,r2,96688 <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
   96674:	e0fff917 	ldw	r3,-28(fp)
   96678:	e0bffc17 	ldw	r2,-16(fp)
   9667c:	1887c83a 	sub	r3,r3,r2
   96680:	e0ffff15 	stw	r3,-4(fp)
   96684:	00000906 	br	966ac <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   96688:	e0bffe17 	ldw	r2,-8(fp)
   9668c:	1090000c 	andi	r2,r2,16384
   96690:	1005003a 	cmpeq	r2,r2,zero
   96694:	1000031e 	bne	r2,zero,966a4 <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
   96698:	00bffd44 	movi	r2,-11
   9669c:	e0bfff15 	stw	r2,-4(fp)
   966a0:	00000206 	br	966ac <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   966a4:	00bffec4 	movi	r2,-5
   966a8:	e0bfff15 	stw	r2,-4(fp)
   966ac:	e0bfff17 	ldw	r2,-4(fp)
}
   966b0:	e037883a 	mov	sp,fp
   966b4:	dfc00117 	ldw	ra,4(sp)
   966b8:	df000017 	ldw	fp,0(sp)
   966bc:	dec00204 	addi	sp,sp,8
   966c0:	f800283a 	ret

000966c4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   966c4:	deffeb04 	addi	sp,sp,-84
   966c8:	dfc01415 	stw	ra,80(sp)
   966cc:	df001315 	stw	fp,76(sp)
   966d0:	df001304 	addi	fp,sp,76
   966d4:	e13ffb15 	stw	r4,-20(fp)
   966d8:	e17ffc15 	stw	r5,-16(fp)
   966dc:	e1bffd15 	stw	r6,-12(fp)
   966e0:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   966e4:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   966e8:	e0bffc17 	ldw	r2,-16(fp)
   966ec:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   966f0:	e0bffb17 	ldw	r2,-20(fp)
   966f4:	10800b17 	ldw	r2,44(r2)
   966f8:	e0bff315 	stw	r2,-52(fp)
   966fc:	e03ff40d 	sth	zero,-48(fp)
   96700:	e17ff40b 	ldhu	r5,-48(fp)
   96704:	e1bffa04 	addi	r6,fp,-24
   96708:	e13ff317 	ldw	r4,-52(fp)
   9670c:	009340c0 	call	9340c <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   96710:	00003a06 	br	967fc <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   96714:	e0bffb17 	ldw	r2,-20(fp)
   96718:	10800f17 	ldw	r2,60(r2)
   9671c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   96720:	e0bffb17 	ldw	r2,-20(fp)
   96724:	10801017 	ldw	r2,64(r2)
   96728:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
   9672c:	e0fff917 	ldw	r3,-28(fp)
   96730:	e0bff817 	ldw	r2,-32(fp)
   96734:	1880062e 	bgeu	r3,r2,96750 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
   96738:	e0fff817 	ldw	r3,-32(fp)
   9673c:	e0bff917 	ldw	r2,-28(fp)
   96740:	1885c83a 	sub	r2,r3,r2
   96744:	10bfffc4 	addi	r2,r2,-1
   96748:	e0bff715 	stw	r2,-36(fp)
   9674c:	00000c06 	br	96780 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
   96750:	e0bff817 	ldw	r2,-32(fp)
   96754:	1005003a 	cmpeq	r2,r2,zero
   96758:	1000051e 	bne	r2,zero,96770 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   9675c:	00820004 	movi	r2,2048
   96760:	e0fff917 	ldw	r3,-28(fp)
   96764:	10c5c83a 	sub	r2,r2,r3
   96768:	e0bff715 	stw	r2,-36(fp)
   9676c:	00000406 	br	96780 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   96770:	0081ffc4 	movi	r2,2047
   96774:	e0fff917 	ldw	r3,-28(fp)
   96778:	10c5c83a 	sub	r2,r2,r3
   9677c:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
   96780:	e0bff717 	ldw	r2,-36(fp)
   96784:	1005003a 	cmpeq	r2,r2,zero
   96788:	10001f1e 	bne	r2,zero,96808 <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
   9678c:	e0fffd17 	ldw	r3,-12(fp)
   96790:	e0bff717 	ldw	r2,-36(fp)
   96794:	1880022e 	bgeu	r3,r2,967a0 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   96798:	e0bffd17 	ldw	r2,-12(fp)
   9679c:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   967a0:	e0bffb17 	ldw	r2,-20(fp)
   967a4:	10c21104 	addi	r3,r2,2116
   967a8:	e0bff917 	ldw	r2,-28(fp)
   967ac:	1885883a 	add	r2,r3,r2
   967b0:	e0fffc17 	ldw	r3,-16(fp)
   967b4:	1009883a 	mov	r4,r2
   967b8:	180b883a 	mov	r5,r3
   967bc:	e1bff717 	ldw	r6,-36(fp)
   967c0:	008812c0 	call	8812c <memcpy>
      ptr   += n;
   967c4:	e0fff717 	ldw	r3,-36(fp)
   967c8:	e0bffc17 	ldw	r2,-16(fp)
   967cc:	10c5883a 	add	r2,r2,r3
   967d0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   967d4:	e0fffd17 	ldw	r3,-12(fp)
   967d8:	e0bff717 	ldw	r2,-36(fp)
   967dc:	1885c83a 	sub	r2,r3,r2
   967e0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   967e4:	e0fff917 	ldw	r3,-28(fp)
   967e8:	e0bff717 	ldw	r2,-36(fp)
   967ec:	1885883a 	add	r2,r3,r2
   967f0:	10c1ffcc 	andi	r3,r2,2047
   967f4:	e0bffb17 	ldw	r2,-20(fp)
   967f8:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   967fc:	e0bffd17 	ldw	r2,-12(fp)
   96800:	10800048 	cmpgei	r2,r2,1
   96804:	103fc31e 	bne	r2,zero,96714 <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   96808:	0005303a 	rdctl	r2,status
   9680c:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   96810:	e0fff217 	ldw	r3,-56(fp)
   96814:	00bfff84 	movi	r2,-2
   96818:	1884703a 	and	r2,r3,r2
   9681c:	1001703a 	wrctl	status,r2
  
  return context;
   96820:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   96824:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   96828:	e0bffb17 	ldw	r2,-20(fp)
   9682c:	10800817 	ldw	r2,32(r2)
   96830:	10c00094 	ori	r3,r2,2
   96834:	e0bffb17 	ldw	r2,-20(fp)
   96838:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   9683c:	e0bffb17 	ldw	r2,-20(fp)
   96840:	10800017 	ldw	r2,0(r2)
   96844:	11000104 	addi	r4,r2,4
   96848:	e0bffb17 	ldw	r2,-20(fp)
   9684c:	10800817 	ldw	r2,32(r2)
   96850:	1007883a 	mov	r3,r2
   96854:	2005883a 	mov	r2,r4
   96858:	10c00035 	stwio	r3,0(r2)
   9685c:	e0bff617 	ldw	r2,-40(fp)
   96860:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   96864:	e0bff117 	ldw	r2,-60(fp)
   96868:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   9686c:	e0bffd17 	ldw	r2,-12(fp)
   96870:	10800050 	cmplti	r2,r2,1
   96874:	10002d1e 	bne	r2,zero,9692c <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
   96878:	e0bffe17 	ldw	r2,-8(fp)
   9687c:	1090000c 	andi	r2,r2,16384
   96880:	1004c03a 	cmpne	r2,r2,zero
   96884:	10002c1e 	bne	r2,zero,96938 <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   96888:	008002b4 	movhi	r2,10
   9688c:	10b3c644 	addi	r2,r2,-12519
   96890:	10800003 	ldbu	r2,0(r2)
   96894:	10803fcc 	andi	r2,r2,255
   96898:	10800058 	cmpnei	r2,r2,1
   9689c:	1000161e 	bne	r2,zero,968f8 <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
   968a0:	e0bffb17 	ldw	r2,-20(fp)
   968a4:	10800c17 	ldw	r2,48(r2)
   968a8:	e0bfee15 	stw	r2,-72(fp)
   968ac:	00800184 	movi	r2,6
   968b0:	e0bfef0d 	sth	r2,-68(fp)
   968b4:	00bfe0c4 	movi	r2,-125
   968b8:	e0bfef85 	stb	r2,-66(fp)
   968bc:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   968c0:	008002b4 	movhi	r2,10
   968c4:	10b3c644 	addi	r2,r2,-12519
   968c8:	10800003 	ldbu	r2,0(r2)
   968cc:	10803fcc 	andi	r2,r2,255
   968d0:	1005003a 	cmpeq	r2,r2,zero
   968d4:	1000111e 	bne	r2,zero,9691c <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   968d8:	e17fef0b 	ldhu	r5,-68(fp)
   968dc:	e1bfef83 	ldbu	r6,-66(fp)
   968e0:	e1fff00b 	ldhu	r7,-64(fp)
   968e4:	e0bffa44 	addi	r2,fp,-23
   968e8:	d8800015 	stw	r2,0(sp)
   968ec:	e13fee17 	ldw	r4,-72(fp)
   968f0:	00904cc0 	call	904cc <OSFlagPend>
    return err;
   968f4:	00000906 	br	9691c <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   968f8:	e0bffb17 	ldw	r2,-20(fp)
   968fc:	10c01017 	ldw	r3,64(r2)
   96900:	e0bff817 	ldw	r2,-32(fp)
   96904:	1880051e 	bne	r3,r2,9691c <altera_avalon_jtag_uart_write+0x258>
   96908:	e0bffb17 	ldw	r2,-20(fp)
   9690c:	10c00917 	ldw	r3,36(r2)
   96910:	e0bffb17 	ldw	r2,-20(fp)
   96914:	10800117 	ldw	r2,4(r2)
   96918:	18bff736 	bltu	r3,r2,968f8 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   9691c:	e0bffb17 	ldw	r2,-20(fp)
   96920:	10c01017 	ldw	r3,64(r2)
   96924:	e0bff817 	ldw	r2,-32(fp)
   96928:	18800326 	beq	r3,r2,96938 <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
   9692c:	e0bffd17 	ldw	r2,-12(fp)
   96930:	10800048 	cmpgei	r2,r2,1
   96934:	103fb11e 	bne	r2,zero,967fc <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   96938:	e0bffb17 	ldw	r2,-20(fp)
   9693c:	11000b17 	ldw	r4,44(r2)
   96940:	00938040 	call	93804 <OSSemPost>

  if (ptr != start)
   96944:	e0fffc17 	ldw	r3,-16(fp)
   96948:	e0bff517 	ldw	r2,-44(fp)
   9694c:	18800526 	beq	r3,r2,96964 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
   96950:	e0fffc17 	ldw	r3,-16(fp)
   96954:	e0bff517 	ldw	r2,-44(fp)
   96958:	1887c83a 	sub	r3,r3,r2
   9695c:	e0ffff15 	stw	r3,-4(fp)
   96960:	00000906 	br	96988 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
   96964:	e0bffe17 	ldw	r2,-8(fp)
   96968:	1090000c 	andi	r2,r2,16384
   9696c:	1005003a 	cmpeq	r2,r2,zero
   96970:	1000031e 	bne	r2,zero,96980 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
   96974:	00bffd44 	movi	r2,-11
   96978:	e0bfff15 	stw	r2,-4(fp)
   9697c:	00000206 	br	96988 <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
   96980:	00bffec4 	movi	r2,-5
   96984:	e0bfff15 	stw	r2,-4(fp)
   96988:	e0bfff17 	ldw	r2,-4(fp)
}
   9698c:	e037883a 	mov	sp,fp
   96990:	dfc00117 	ldw	ra,4(sp)
   96994:	df000017 	ldw	fp,0(sp)
   96998:	dec00204 	addi	sp,sp,8
   9699c:	f800283a 	ret

000969a0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   969a0:	defffa04 	addi	sp,sp,-24
   969a4:	dfc00515 	stw	ra,20(sp)
   969a8:	df000415 	stw	fp,16(sp)
   969ac:	df000404 	addi	fp,sp,16
   969b0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   969b4:	e0bfff17 	ldw	r2,-4(fp)
   969b8:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   969bc:	e0bfff17 	ldw	r2,-4(fp)
   969c0:	10800104 	addi	r2,r2,4
   969c4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   969c8:	0005303a 	rdctl	r2,status
   969cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   969d0:	e0fffd17 	ldw	r3,-12(fp)
   969d4:	00bfff84 	movi	r2,-2
   969d8:	1884703a 	and	r2,r3,r2
   969dc:	1001703a 	wrctl	status,r2
  
  return context;
   969e0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   969e4:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   969e8:	0097b640 	call	97b64 <alt_tick>
   969ec:	e0bffe17 	ldw	r2,-8(fp)
   969f0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   969f4:	e0bffc17 	ldw	r2,-16(fp)
   969f8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   969fc:	e037883a 	mov	sp,fp
   96a00:	dfc00117 	ldw	ra,4(sp)
   96a04:	df000017 	ldw	fp,0(sp)
   96a08:	dec00204 	addi	sp,sp,8
   96a0c:	f800283a 	ret

00096a10 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   96a10:	defff804 	addi	sp,sp,-32
   96a14:	dfc00715 	stw	ra,28(sp)
   96a18:	df000615 	stw	fp,24(sp)
   96a1c:	df000604 	addi	fp,sp,24
   96a20:	e13ffc15 	stw	r4,-16(fp)
   96a24:	e17ffd15 	stw	r5,-12(fp)
   96a28:	e1bffe15 	stw	r6,-8(fp)
   96a2c:	e1ffff15 	stw	r7,-4(fp)
   96a30:	e0bfff17 	ldw	r2,-4(fp)
   96a34:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   96a38:	008002b4 	movhi	r2,10
   96a3c:	10b3da04 	addi	r2,r2,-12440
   96a40:	10800017 	ldw	r2,0(r2)
   96a44:	1004c03a 	cmpne	r2,r2,zero
   96a48:	1000041e 	bne	r2,zero,96a5c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   96a4c:	00c002b4 	movhi	r3,10
   96a50:	18f3da04 	addi	r3,r3,-12440
   96a54:	e0bffb17 	ldw	r2,-20(fp)
   96a58:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   96a5c:	e0bffc17 	ldw	r2,-16(fp)
   96a60:	10800104 	addi	r2,r2,4
   96a64:	1007883a 	mov	r3,r2
   96a68:	008001c4 	movi	r2,7
   96a6c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   96a70:	d8000015 	stw	zero,0(sp)
   96a74:	e13ffd17 	ldw	r4,-12(fp)
   96a78:	e17ffe17 	ldw	r5,-8(fp)
   96a7c:	01800274 	movhi	r6,9
   96a80:	319a6804 	addi	r6,r6,27040
   96a84:	e1fffc17 	ldw	r7,-16(fp)
   96a88:	00973cc0 	call	973cc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   96a8c:	e037883a 	mov	sp,fp
   96a90:	dfc00117 	ldw	ra,4(sp)
   96a94:	df000017 	ldw	fp,0(sp)
   96a98:	dec00204 	addi	sp,sp,8
   96a9c:	f800283a 	ret

00096aa0 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   96aa0:	defffc04 	addi	sp,sp,-16
   96aa4:	df000315 	stw	fp,12(sp)
   96aa8:	df000304 	addi	fp,sp,12
   96aac:	e13ffe15 	stw	r4,-8(fp)
   96ab0:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   96ab4:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   96ab8:	e0bfff17 	ldw	r2,-4(fp)
   96abc:	1004c03a 	cmpne	r2,r2,zero
   96ac0:	1000061e 	bne	r2,zero,96adc <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
   96ac4:	e0bffe17 	ldw	r2,-8(fp)
   96ac8:	1007883a 	mov	r3,r2
   96acc:	e0bffd03 	ldbu	r2,-12(fp)
   96ad0:	10c4b03a 	or	r2,r2,r3
   96ad4:	e0bffd05 	stb	r2,-12(fp)
   96ad8:	00000806 	br	96afc <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
   96adc:	e0bffe17 	ldw	r2,-8(fp)
   96ae0:	1007883a 	mov	r3,r2
   96ae4:	e0bffd03 	ldbu	r2,-12(fp)
   96ae8:	10c4b03a 	or	r2,r2,r3
   96aec:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   96af0:	e0bffd03 	ldbu	r2,-12(fp)
   96af4:	10801014 	ori	r2,r2,64
   96af8:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   96afc:	e0fffd03 	ldbu	r3,-12(fp)
   96b00:	00bfe004 	movi	r2,-128
   96b04:	1884b03a 	or	r2,r3,r2
   96b08:	10803fcc 	andi	r2,r2,255
}
   96b0c:	e037883a 	mov	sp,fp
   96b10:	df000017 	ldw	fp,0(sp)
   96b14:	dec00104 	addi	sp,sp,4
   96b18:	f800283a 	ret

00096b1c <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   96b1c:	defffd04 	addi	sp,sp,-12
   96b20:	df000215 	stw	fp,8(sp)
   96b24:	df000204 	addi	fp,sp,8
   96b28:	e13ffe15 	stw	r4,-8(fp)
   96b2c:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   96b30:	e0bffe17 	ldw	r2,-8(fp)
   96b34:	10800a17 	ldw	r2,40(r2)
   96b38:	e0ffff03 	ldbu	r3,-4(fp)
   96b3c:	10c00025 	stbio	r3,0(r2)
}
   96b40:	e037883a 	mov	sp,fp
   96b44:	df000017 	ldw	fp,0(sp)
   96b48:	dec00104 	addi	sp,sp,4
   96b4c:	f800283a 	ret

00096b50 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   96b50:	defffe04 	addi	sp,sp,-8
   96b54:	df000115 	stw	fp,4(sp)
   96b58:	df000104 	addi	fp,sp,4
   96b5c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   96b60:	e0bfff17 	ldw	r2,-4(fp)
   96b64:	10800a17 	ldw	r2,40(r2)
   96b68:	1007883a 	mov	r3,r2
   96b6c:	00800044 	movi	r2,1
   96b70:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   96b74:	e037883a 	mov	sp,fp
   96b78:	df000017 	ldw	fp,0(sp)
   96b7c:	dec00104 	addi	sp,sp,4
   96b80:	f800283a 	ret

00096b84 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   96b84:	defffc04 	addi	sp,sp,-16
   96b88:	dfc00315 	stw	ra,12(sp)
   96b8c:	df000215 	stw	fp,8(sp)
   96b90:	df000204 	addi	fp,sp,8
   96b94:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   96b98:	e13fff17 	ldw	r4,-4(fp)
   96b9c:	014002b4 	movhi	r5,10
   96ba0:	296cca04 	addi	r5,r5,-19672
   96ba4:	009731c0 	call	9731c <alt_find_dev>
   96ba8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   96bac:	e0bffe17 	ldw	r2,-8(fp)
}
   96bb0:	e037883a 	mov	sp,fp
   96bb4:	dfc00117 	ldw	ra,4(sp)
   96bb8:	df000017 	ldw	fp,0(sp)
   96bbc:	dec00204 	addi	sp,sp,8
   96bc0:	f800283a 	ret

00096bc4 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   96bc4:	defffb04 	addi	sp,sp,-20
   96bc8:	df000415 	stw	fp,16(sp)
   96bcc:	df000404 	addi	fp,sp,16
   96bd0:	e13ffd15 	stw	r4,-12(fp)
   96bd4:	e17ffe15 	stw	r5,-8(fp)
   96bd8:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   96bdc:	e03ffc15 	stw	zero,-16(fp)
   96be0:	00000f06 	br	96c20 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   96be4:	e0bffd17 	ldw	r2,-12(fp)
   96be8:	10800a17 	ldw	r2,40(r2)
   96bec:	11000044 	addi	r4,r2,1
   96bf0:	e0fffc17 	ldw	r3,-16(fp)
   96bf4:	e0bffe17 	ldw	r2,-8(fp)
   96bf8:	1885883a 	add	r2,r3,r2
   96bfc:	10800003 	ldbu	r2,0(r2)
   96c00:	10c03fcc 	andi	r3,r2,255
   96c04:	18c0201c 	xori	r3,r3,128
   96c08:	18ffe004 	addi	r3,r3,-128
   96c0c:	2005883a 	mov	r2,r4
   96c10:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   96c14:	e0bffc17 	ldw	r2,-16(fp)
   96c18:	10800044 	addi	r2,r2,1
   96c1c:	e0bffc15 	stw	r2,-16(fp)
   96c20:	e0fffc17 	ldw	r3,-16(fp)
   96c24:	e0bfff17 	ldw	r2,-4(fp)
   96c28:	18bfee36 	bltu	r3,r2,96be4 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   96c2c:	e037883a 	mov	sp,fp
   96c30:	df000017 	ldw	fp,0(sp)
   96c34:	dec00104 	addi	sp,sp,4
   96c38:	f800283a 	ret

00096c3c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   96c3c:	defffd04 	addi	sp,sp,-12
   96c40:	df000215 	stw	fp,8(sp)
   96c44:	df000204 	addi	fp,sp,8
   96c48:	e13ffe15 	stw	r4,-8(fp)
   96c4c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   96c50:	00000d06 	br	96c88 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   96c54:	e0bffe17 	ldw	r2,-8(fp)
   96c58:	10800a17 	ldw	r2,40(r2)
   96c5c:	11000044 	addi	r4,r2,1
   96c60:	e0bfff17 	ldw	r2,-4(fp)
   96c64:	10800003 	ldbu	r2,0(r2)
   96c68:	10c03fcc 	andi	r3,r2,255
   96c6c:	18c0201c 	xori	r3,r3,128
   96c70:	18ffe004 	addi	r3,r3,-128
   96c74:	2005883a 	mov	r2,r4
   96c78:	10c00025 	stbio	r3,0(r2)
		++ptr;
   96c7c:	e0bfff17 	ldw	r2,-4(fp)
   96c80:	10800044 	addi	r2,r2,1
   96c84:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   96c88:	e0bfff17 	ldw	r2,-4(fp)
   96c8c:	10800003 	ldbu	r2,0(r2)
   96c90:	10803fcc 	andi	r2,r2,255
   96c94:	1080201c 	xori	r2,r2,128
   96c98:	10bfe004 	addi	r2,r2,-128
   96c9c:	1004c03a 	cmpne	r2,r2,zero
   96ca0:	103fec1e 	bne	r2,zero,96c54 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   96ca4:	e037883a 	mov	sp,fp
   96ca8:	df000017 	ldw	fp,0(sp)
   96cac:	dec00104 	addi	sp,sp,4
   96cb0:	f800283a 	ret

00096cb4 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   96cb4:	defffb04 	addi	sp,sp,-20
   96cb8:	dfc00415 	stw	ra,16(sp)
   96cbc:	df000315 	stw	fp,12(sp)
   96cc0:	df000304 	addi	fp,sp,12
   96cc4:	e13ffd15 	stw	r4,-12(fp)
   96cc8:	e17ffe15 	stw	r5,-8(fp)
   96ccc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   96cd0:	e0bffd17 	ldw	r2,-12(fp)
   96cd4:	10800017 	ldw	r2,0(r2)
   96cd8:	1009883a 	mov	r4,r2
   96cdc:	e1bfff17 	ldw	r6,-4(fp)
   96ce0:	e17ffe17 	ldw	r5,-8(fp)
   96ce4:	0096bc40 	call	96bc4 <alt_up_character_lcd_write>
	return 0;
   96ce8:	0005883a 	mov	r2,zero
}
   96cec:	e037883a 	mov	sp,fp
   96cf0:	dfc00117 	ldw	ra,4(sp)
   96cf4:	df000017 	ldw	fp,0(sp)
   96cf8:	dec00204 	addi	sp,sp,8
   96cfc:	f800283a 	ret

00096d00 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   96d00:	defff904 	addi	sp,sp,-28
   96d04:	dfc00615 	stw	ra,24(sp)
   96d08:	df000515 	stw	fp,20(sp)
   96d0c:	df000504 	addi	fp,sp,20
   96d10:	e13ffc15 	stw	r4,-16(fp)
   96d14:	e17ffd15 	stw	r5,-12(fp)
   96d18:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   96d1c:	e0bffd17 	ldw	r2,-12(fp)
   96d20:	10800a28 	cmpgeui	r2,r2,40
   96d24:	1000031e 	bne	r2,zero,96d34 <alt_up_character_lcd_set_cursor_pos+0x34>
   96d28:	e0bffe17 	ldw	r2,-8(fp)
   96d2c:	108000b0 	cmpltui	r2,r2,2
   96d30:	1000031e 	bne	r2,zero,96d40 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
   96d34:	00bfffc4 	movi	r2,-1
   96d38:	e0bfff15 	stw	r2,-4(fp)
   96d3c:	00000806 	br	96d60 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   96d40:	e13ffd17 	ldw	r4,-12(fp)
   96d44:	e17ffe17 	ldw	r5,-8(fp)
   96d48:	0096aa00 	call	96aa0 <get_DDRAM_addr>
   96d4c:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   96d50:	e17ffb03 	ldbu	r5,-20(fp)
   96d54:	e13ffc17 	ldw	r4,-16(fp)
   96d58:	0096b1c0 	call	96b1c <alt_up_character_lcd_send_cmd>
	return 0;
   96d5c:	e03fff15 	stw	zero,-4(fp)
   96d60:	e0bfff17 	ldw	r2,-4(fp)
}
   96d64:	e037883a 	mov	sp,fp
   96d68:	dfc00117 	ldw	ra,4(sp)
   96d6c:	df000017 	ldw	fp,0(sp)
   96d70:	dec00204 	addi	sp,sp,8
   96d74:	f800283a 	ret

00096d78 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   96d78:	defff904 	addi	sp,sp,-28
   96d7c:	dfc00615 	stw	ra,24(sp)
   96d80:	df000515 	stw	fp,20(sp)
   96d84:	df000504 	addi	fp,sp,20
   96d88:	e13ffc15 	stw	r4,-16(fp)
   96d8c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
   96d90:	e0bffd17 	ldw	r2,-12(fp)
   96d94:	1005003a 	cmpeq	r2,r2,zero
   96d98:	10001e1e 	bne	r2,zero,96e14 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
   96d9c:	e0bffd17 	ldw	r2,-12(fp)
   96da0:	10800050 	cmplti	r2,r2,1
   96da4:	1000031e 	bne	r2,zero,96db4 <alt_up_character_lcd_shift_cursor+0x3c>
   96da8:	00800504 	movi	r2,20
   96dac:	e0bfff05 	stb	r2,-4(fp)
   96db0:	00000206 	br	96dbc <alt_up_character_lcd_shift_cursor+0x44>
   96db4:	00c00404 	movi	r3,16
   96db8:	e0ffff05 	stb	r3,-4(fp)
   96dbc:	e0bfff03 	ldbu	r2,-4(fp)
   96dc0:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
   96dc4:	e0fffd17 	ldw	r3,-12(fp)
   96dc8:	e0fffe15 	stw	r3,-8(fp)
   96dcc:	e0fffe17 	ldw	r3,-8(fp)
   96dd0:	1804403a 	cmpge	r2,r3,zero
   96dd4:	1000031e 	bne	r2,zero,96de4 <alt_up_character_lcd_shift_cursor+0x6c>
   96dd8:	e0bffe17 	ldw	r2,-8(fp)
   96ddc:	0085c83a 	sub	r2,zero,r2
   96de0:	e0bffe15 	stw	r2,-8(fp)
   96de4:	e0fffe17 	ldw	r3,-8(fp)
   96de8:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
   96dec:	00000306 	br	96dfc <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   96df0:	e17ffb43 	ldbu	r5,-19(fp)
   96df4:	e13ffc17 	ldw	r4,-16(fp)
   96df8:	0096b1c0 	call	96b1c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   96dfc:	e0bffb03 	ldbu	r2,-20(fp)
   96e00:	10bfffc4 	addi	r2,r2,-1
   96e04:	e0bffb05 	stb	r2,-20(fp)
   96e08:	e0bffb03 	ldbu	r2,-20(fp)
   96e0c:	10803fd8 	cmpnei	r2,r2,255
   96e10:	103ff71e 	bne	r2,zero,96df0 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   96e14:	e037883a 	mov	sp,fp
   96e18:	dfc00117 	ldw	ra,4(sp)
   96e1c:	df000017 	ldw	fp,0(sp)
   96e20:	dec00204 	addi	sp,sp,8
   96e24:	f800283a 	ret

00096e28 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   96e28:	defff904 	addi	sp,sp,-28
   96e2c:	dfc00615 	stw	ra,24(sp)
   96e30:	df000515 	stw	fp,20(sp)
   96e34:	df000504 	addi	fp,sp,20
   96e38:	e13ffc15 	stw	r4,-16(fp)
   96e3c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
   96e40:	e0bffd17 	ldw	r2,-12(fp)
   96e44:	1005003a 	cmpeq	r2,r2,zero
   96e48:	10001e1e 	bne	r2,zero,96ec4 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
   96e4c:	e0bffd17 	ldw	r2,-12(fp)
   96e50:	10800050 	cmplti	r2,r2,1
   96e54:	1000031e 	bne	r2,zero,96e64 <alt_up_character_lcd_shift_display+0x3c>
   96e58:	00800704 	movi	r2,28
   96e5c:	e0bfff05 	stb	r2,-4(fp)
   96e60:	00000206 	br	96e6c <alt_up_character_lcd_shift_display+0x44>
   96e64:	00c00604 	movi	r3,24
   96e68:	e0ffff05 	stb	r3,-4(fp)
   96e6c:	e0bfff03 	ldbu	r2,-4(fp)
   96e70:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
   96e74:	e0fffd17 	ldw	r3,-12(fp)
   96e78:	e0fffe15 	stw	r3,-8(fp)
   96e7c:	e0fffe17 	ldw	r3,-8(fp)
   96e80:	1804403a 	cmpge	r2,r3,zero
   96e84:	1000031e 	bne	r2,zero,96e94 <alt_up_character_lcd_shift_display+0x6c>
   96e88:	e0bffe17 	ldw	r2,-8(fp)
   96e8c:	0085c83a 	sub	r2,zero,r2
   96e90:	e0bffe15 	stw	r2,-8(fp)
   96e94:	e0fffe17 	ldw	r3,-8(fp)
   96e98:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
   96e9c:	00000306 	br	96eac <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   96ea0:	e17ffb43 	ldbu	r5,-19(fp)
   96ea4:	e13ffc17 	ldw	r4,-16(fp)
   96ea8:	0096b1c0 	call	96b1c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   96eac:	e0bffb03 	ldbu	r2,-20(fp)
   96eb0:	10bfffc4 	addi	r2,r2,-1
   96eb4:	e0bffb05 	stb	r2,-20(fp)
   96eb8:	e0bffb03 	ldbu	r2,-20(fp)
   96ebc:	10803fd8 	cmpnei	r2,r2,255
   96ec0:	103ff71e 	bne	r2,zero,96ea0 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   96ec4:	e037883a 	mov	sp,fp
   96ec8:	dfc00117 	ldw	ra,4(sp)
   96ecc:	df000017 	ldw	fp,0(sp)
   96ed0:	dec00204 	addi	sp,sp,8
   96ed4:	f800283a 	ret

00096ed8 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   96ed8:	defff904 	addi	sp,sp,-28
   96edc:	dfc00615 	stw	ra,24(sp)
   96ee0:	df000515 	stw	fp,20(sp)
   96ee4:	df000504 	addi	fp,sp,20
   96ee8:	e13ffc15 	stw	r4,-16(fp)
   96eec:	e17ffd15 	stw	r5,-12(fp)
   96ef0:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   96ef4:	e0bffd17 	ldw	r2,-12(fp)
   96ef8:	10800a28 	cmpgeui	r2,r2,40
   96efc:	1000031e 	bne	r2,zero,96f0c <alt_up_character_lcd_erase_pos+0x34>
   96f00:	e0bffe17 	ldw	r2,-8(fp)
   96f04:	108000b0 	cmpltui	r2,r2,2
   96f08:	1000031e 	bne	r2,zero,96f18 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
   96f0c:	00bfffc4 	movi	r2,-1
   96f10:	e0bfff15 	stw	r2,-4(fp)
   96f14:	00000e06 	br	96f50 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   96f18:	e13ffd17 	ldw	r4,-12(fp)
   96f1c:	e17ffe17 	ldw	r5,-8(fp)
   96f20:	0096aa00 	call	96aa0 <get_DDRAM_addr>
   96f24:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   96f28:	e17ffb03 	ldbu	r5,-20(fp)
   96f2c:	e13ffc17 	ldw	r4,-16(fp)
   96f30:	0096b1c0 	call	96b1c <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   96f34:	e0bffc17 	ldw	r2,-16(fp)
   96f38:	10800a17 	ldw	r2,40(r2)
   96f3c:	10800044 	addi	r2,r2,1
   96f40:	1007883a 	mov	r3,r2
   96f44:	00800084 	movi	r2,2
   96f48:	18800025 	stbio	r2,0(r3)
	return 0;
   96f4c:	e03fff15 	stw	zero,-4(fp)
   96f50:	e0bfff17 	ldw	r2,-4(fp)
}
   96f54:	e037883a 	mov	sp,fp
   96f58:	dfc00117 	ldw	ra,4(sp)
   96f5c:	df000017 	ldw	fp,0(sp)
   96f60:	dec00204 	addi	sp,sp,8
   96f64:	f800283a 	ret

00096f68 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   96f68:	defffd04 	addi	sp,sp,-12
   96f6c:	dfc00215 	stw	ra,8(sp)
   96f70:	df000115 	stw	fp,4(sp)
   96f74:	df000104 	addi	fp,sp,4
   96f78:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   96f7c:	e13fff17 	ldw	r4,-4(fp)
   96f80:	01400304 	movi	r5,12
   96f84:	0096b1c0 	call	96b1c <alt_up_character_lcd_send_cmd>
}
   96f88:	e037883a 	mov	sp,fp
   96f8c:	dfc00117 	ldw	ra,4(sp)
   96f90:	df000017 	ldw	fp,0(sp)
   96f94:	dec00204 	addi	sp,sp,8
   96f98:	f800283a 	ret

00096f9c <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   96f9c:	defffd04 	addi	sp,sp,-12
   96fa0:	dfc00215 	stw	ra,8(sp)
   96fa4:	df000115 	stw	fp,4(sp)
   96fa8:	df000104 	addi	fp,sp,4
   96fac:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   96fb0:	e13fff17 	ldw	r4,-4(fp)
   96fb4:	014003c4 	movi	r5,15
   96fb8:	0096b1c0 	call	96b1c <alt_up_character_lcd_send_cmd>
}
   96fbc:	e037883a 	mov	sp,fp
   96fc0:	dfc00117 	ldw	ra,4(sp)
   96fc4:	df000017 	ldw	fp,0(sp)
   96fc8:	dec00204 	addi	sp,sp,8
   96fcc:	f800283a 	ret

00096fd0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   96fd0:	defff404 	addi	sp,sp,-48
   96fd4:	df000b15 	stw	fp,44(sp)
   96fd8:	df000b04 	addi	fp,sp,44
   96fdc:	e13ffb15 	stw	r4,-20(fp)
   96fe0:	e17ffc15 	stw	r5,-16(fp)
   96fe4:	e1bffd15 	stw	r6,-12(fp)
   96fe8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   96fec:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   96ff0:	008002b4 	movhi	r2,10
   96ff4:	10b3da04 	addi	r2,r2,-12440
   96ff8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   96ffc:	1005003a 	cmpeq	r2,r2,zero
   97000:	1000411e 	bne	r2,zero,97108 <alt_alarm_start+0x138>
  {
    if (alarm)
   97004:	e0bffb17 	ldw	r2,-20(fp)
   97008:	1005003a 	cmpeq	r2,r2,zero
   9700c:	10003b1e 	bne	r2,zero,970fc <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   97010:	e0fffb17 	ldw	r3,-20(fp)
   97014:	e0bffd17 	ldw	r2,-12(fp)
   97018:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   9701c:	e0fffb17 	ldw	r3,-20(fp)
   97020:	e0bffe17 	ldw	r2,-8(fp)
   97024:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   97028:	0005303a 	rdctl	r2,status
   9702c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   97030:	e0fff817 	ldw	r3,-32(fp)
   97034:	00bfff84 	movi	r2,-2
   97038:	1884703a 	and	r2,r3,r2
   9703c:	1001703a 	wrctl	status,r2
  
  return context;
   97040:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   97044:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   97048:	008002b4 	movhi	r2,10
   9704c:	10b3db04 	addi	r2,r2,-12436
   97050:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   97054:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   97058:	e0fffc17 	ldw	r3,-16(fp)
   9705c:	e0bff917 	ldw	r2,-28(fp)
   97060:	1885883a 	add	r2,r3,r2
   97064:	10c00044 	addi	r3,r2,1
   97068:	e0bffb17 	ldw	r2,-20(fp)
   9706c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   97070:	e0bffb17 	ldw	r2,-20(fp)
   97074:	10c00217 	ldw	r3,8(r2)
   97078:	e0bff917 	ldw	r2,-28(fp)
   9707c:	1880042e 	bgeu	r3,r2,97090 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   97080:	e0fffb17 	ldw	r3,-20(fp)
   97084:	00800044 	movi	r2,1
   97088:	18800405 	stb	r2,16(r3)
   9708c:	00000206 	br	97098 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   97090:	e0bffb17 	ldw	r2,-20(fp)
   97094:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   97098:	e0fffb17 	ldw	r3,-20(fp)
   9709c:	008002b4 	movhi	r2,10
   970a0:	10acef04 	addi	r2,r2,-19524
   970a4:	e0bff615 	stw	r2,-40(fp)
   970a8:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   970ac:	e0fff717 	ldw	r3,-36(fp)
   970b0:	e0bff617 	ldw	r2,-40(fp)
   970b4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   970b8:	e0bff617 	ldw	r2,-40(fp)
   970bc:	10c00017 	ldw	r3,0(r2)
   970c0:	e0bff717 	ldw	r2,-36(fp)
   970c4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   970c8:	e0bff617 	ldw	r2,-40(fp)
   970cc:	10c00017 	ldw	r3,0(r2)
   970d0:	e0bff717 	ldw	r2,-36(fp)
   970d4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   970d8:	e0fff617 	ldw	r3,-40(fp)
   970dc:	e0bff717 	ldw	r2,-36(fp)
   970e0:	18800015 	stw	r2,0(r3)
   970e4:	e0bffa17 	ldw	r2,-24(fp)
   970e8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   970ec:	e0bff517 	ldw	r2,-44(fp)
   970f0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   970f4:	e03fff15 	stw	zero,-4(fp)
   970f8:	00000506 	br	97110 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   970fc:	00bffa84 	movi	r2,-22
   97100:	e0bfff15 	stw	r2,-4(fp)
   97104:	00000206 	br	97110 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   97108:	00bfde84 	movi	r2,-134
   9710c:	e0bfff15 	stw	r2,-4(fp)
   97110:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   97114:	e037883a 	mov	sp,fp
   97118:	df000017 	ldw	fp,0(sp)
   9711c:	dec00104 	addi	sp,sp,4
   97120:	f800283a 	ret

00097124 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   97124:	deffff04 	addi	sp,sp,-4
   97128:	df000015 	stw	fp,0(sp)
   9712c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   97130:	e037883a 	mov	sp,fp
   97134:	df000017 	ldw	fp,0(sp)
   97138:	dec00104 	addi	sp,sp,4
   9713c:	f800283a 	ret

00097140 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   97140:	defff904 	addi	sp,sp,-28
   97144:	dfc00615 	stw	ra,24(sp)
   97148:	df000515 	stw	fp,20(sp)
   9714c:	df000504 	addi	fp,sp,20
   97150:	e13ffd15 	stw	r4,-12(fp)
   97154:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   97158:	e0bffd17 	ldw	r2,-12(fp)
   9715c:	1005003a 	cmpeq	r2,r2,zero
   97160:	1000041e 	bne	r2,zero,97174 <alt_dev_llist_insert+0x34>
   97164:	e0bffd17 	ldw	r2,-12(fp)
   97168:	10800217 	ldw	r2,8(r2)
   9716c:	1004c03a 	cmpne	r2,r2,zero
   97170:	1000071e 	bne	r2,zero,97190 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   97174:	00971f40 	call	971f4 <alt_get_errno>
   97178:	1007883a 	mov	r3,r2
   9717c:	00800584 	movi	r2,22
   97180:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   97184:	00bffa84 	movi	r2,-22
   97188:	e0bfff15 	stw	r2,-4(fp)
   9718c:	00001306 	br	971dc <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   97190:	e0fffd17 	ldw	r3,-12(fp)
   97194:	e0bffe17 	ldw	r2,-8(fp)
   97198:	e0bffb15 	stw	r2,-20(fp)
   9719c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   971a0:	e0fffc17 	ldw	r3,-16(fp)
   971a4:	e0bffb17 	ldw	r2,-20(fp)
   971a8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   971ac:	e0bffb17 	ldw	r2,-20(fp)
   971b0:	10c00017 	ldw	r3,0(r2)
   971b4:	e0bffc17 	ldw	r2,-16(fp)
   971b8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   971bc:	e0bffb17 	ldw	r2,-20(fp)
   971c0:	10c00017 	ldw	r3,0(r2)
   971c4:	e0bffc17 	ldw	r2,-16(fp)
   971c8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   971cc:	e0fffb17 	ldw	r3,-20(fp)
   971d0:	e0bffc17 	ldw	r2,-16(fp)
   971d4:	18800015 	stw	r2,0(r3)

  return 0;  
   971d8:	e03fff15 	stw	zero,-4(fp)
   971dc:	e0bfff17 	ldw	r2,-4(fp)
}
   971e0:	e037883a 	mov	sp,fp
   971e4:	dfc00117 	ldw	ra,4(sp)
   971e8:	df000017 	ldw	fp,0(sp)
   971ec:	dec00204 	addi	sp,sp,8
   971f0:	f800283a 	ret

000971f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   971f4:	defffd04 	addi	sp,sp,-12
   971f8:	dfc00215 	stw	ra,8(sp)
   971fc:	df000115 	stw	fp,4(sp)
   97200:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   97204:	008002b4 	movhi	r2,10
   97208:	10accd04 	addi	r2,r2,-19660
   9720c:	10800017 	ldw	r2,0(r2)
   97210:	1005003a 	cmpeq	r2,r2,zero
   97214:	1000061e 	bne	r2,zero,97230 <alt_get_errno+0x3c>
   97218:	008002b4 	movhi	r2,10
   9721c:	10accd04 	addi	r2,r2,-19660
   97220:	10800017 	ldw	r2,0(r2)
   97224:	103ee83a 	callr	r2
   97228:	e0bfff15 	stw	r2,-4(fp)
   9722c:	00000306 	br	9723c <alt_get_errno+0x48>
   97230:	008002b4 	movhi	r2,10
   97234:	10b3bc04 	addi	r2,r2,-12560
   97238:	e0bfff15 	stw	r2,-4(fp)
   9723c:	e0bfff17 	ldw	r2,-4(fp)
}
   97240:	e037883a 	mov	sp,fp
   97244:	dfc00117 	ldw	ra,4(sp)
   97248:	df000017 	ldw	fp,0(sp)
   9724c:	dec00204 	addi	sp,sp,8
   97250:	f800283a 	ret

00097254 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   97254:	defffd04 	addi	sp,sp,-12
   97258:	dfc00215 	stw	ra,8(sp)
   9725c:	df000115 	stw	fp,4(sp)
   97260:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   97264:	00bfff04 	movi	r2,-4
   97268:	00c002b4 	movhi	r3,10
   9726c:	18e2d704 	addi	r3,r3,-29860
   97270:	1885883a 	add	r2,r3,r2
   97274:	e0bfff15 	stw	r2,-4(fp)
   97278:	00000606 	br	97294 <_do_ctors+0x40>
        (*ctor) (); 
   9727c:	e0bfff17 	ldw	r2,-4(fp)
   97280:	10800017 	ldw	r2,0(r2)
   97284:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   97288:	e0bfff17 	ldw	r2,-4(fp)
   9728c:	10bfff04 	addi	r2,r2,-4
   97290:	e0bfff15 	stw	r2,-4(fp)
   97294:	e0ffff17 	ldw	r3,-4(fp)
   97298:	008002b4 	movhi	r2,10
   9729c:	10a2d604 	addi	r2,r2,-29864
   972a0:	18bff62e 	bgeu	r3,r2,9727c <_do_ctors+0x28>
        (*ctor) (); 
}
   972a4:	e037883a 	mov	sp,fp
   972a8:	dfc00117 	ldw	ra,4(sp)
   972ac:	df000017 	ldw	fp,0(sp)
   972b0:	dec00204 	addi	sp,sp,8
   972b4:	f800283a 	ret

000972b8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   972b8:	defffd04 	addi	sp,sp,-12
   972bc:	dfc00215 	stw	ra,8(sp)
   972c0:	df000115 	stw	fp,4(sp)
   972c4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   972c8:	00bfff04 	movi	r2,-4
   972cc:	00c002b4 	movhi	r3,10
   972d0:	18e2d704 	addi	r3,r3,-29860
   972d4:	1885883a 	add	r2,r3,r2
   972d8:	e0bfff15 	stw	r2,-4(fp)
   972dc:	00000606 	br	972f8 <_do_dtors+0x40>
        (*dtor) (); 
   972e0:	e0bfff17 	ldw	r2,-4(fp)
   972e4:	10800017 	ldw	r2,0(r2)
   972e8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   972ec:	e0bfff17 	ldw	r2,-4(fp)
   972f0:	10bfff04 	addi	r2,r2,-4
   972f4:	e0bfff15 	stw	r2,-4(fp)
   972f8:	e0ffff17 	ldw	r3,-4(fp)
   972fc:	008002b4 	movhi	r2,10
   97300:	10a2d704 	addi	r2,r2,-29860
   97304:	18bff62e 	bgeu	r3,r2,972e0 <_do_dtors+0x28>
        (*dtor) (); 
}
   97308:	e037883a 	mov	sp,fp
   9730c:	dfc00117 	ldw	ra,4(sp)
   97310:	df000017 	ldw	fp,0(sp)
   97314:	dec00204 	addi	sp,sp,8
   97318:	f800283a 	ret

0009731c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   9731c:	defff904 	addi	sp,sp,-28
   97320:	dfc00615 	stw	ra,24(sp)
   97324:	df000515 	stw	fp,20(sp)
   97328:	df000504 	addi	fp,sp,20
   9732c:	e13ffd15 	stw	r4,-12(fp)
   97330:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   97334:	e0bffe17 	ldw	r2,-8(fp)
   97338:	10800017 	ldw	r2,0(r2)
   9733c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   97340:	e13ffd17 	ldw	r4,-12(fp)
   97344:	0082e480 	call	82e48 <strlen>
   97348:	10800044 	addi	r2,r2,1
   9734c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   97350:	00000d06 	br	97388 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   97354:	e0bffc17 	ldw	r2,-16(fp)
   97358:	11000217 	ldw	r4,8(r2)
   9735c:	e1bffb17 	ldw	r6,-20(fp)
   97360:	e17ffd17 	ldw	r5,-12(fp)
   97364:	00983ec0 	call	983ec <memcmp>
   97368:	1004c03a 	cmpne	r2,r2,zero
   9736c:	1000031e 	bne	r2,zero,9737c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   97370:	e0bffc17 	ldw	r2,-16(fp)
   97374:	e0bfff15 	stw	r2,-4(fp)
   97378:	00000706 	br	97398 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   9737c:	e0bffc17 	ldw	r2,-16(fp)
   97380:	10800017 	ldw	r2,0(r2)
   97384:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   97388:	e0fffe17 	ldw	r3,-8(fp)
   9738c:	e0bffc17 	ldw	r2,-16(fp)
   97390:	10fff01e 	bne	r2,r3,97354 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   97394:	e03fff15 	stw	zero,-4(fp)
   97398:	e0bfff17 	ldw	r2,-4(fp)
}
   9739c:	e037883a 	mov	sp,fp
   973a0:	dfc00117 	ldw	ra,4(sp)
   973a4:	df000017 	ldw	fp,0(sp)
   973a8:	dec00204 	addi	sp,sp,8
   973ac:	f800283a 	ret

000973b0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   973b0:	deffff04 	addi	sp,sp,-4
   973b4:	df000015 	stw	fp,0(sp)
   973b8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   973bc:	e037883a 	mov	sp,fp
   973c0:	df000017 	ldw	fp,0(sp)
   973c4:	dec00104 	addi	sp,sp,4
   973c8:	f800283a 	ret

000973cc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   973cc:	defff904 	addi	sp,sp,-28
   973d0:	dfc00615 	stw	ra,24(sp)
   973d4:	df000515 	stw	fp,20(sp)
   973d8:	df000504 	addi	fp,sp,20
   973dc:	e13ffc15 	stw	r4,-16(fp)
   973e0:	e17ffd15 	stw	r5,-12(fp)
   973e4:	e1bffe15 	stw	r6,-8(fp)
   973e8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   973ec:	e0800217 	ldw	r2,8(fp)
   973f0:	d8800015 	stw	r2,0(sp)
   973f4:	e13ffc17 	ldw	r4,-16(fp)
   973f8:	e17ffd17 	ldw	r5,-12(fp)
   973fc:	e1bffe17 	ldw	r6,-8(fp)
   97400:	e1ffff17 	ldw	r7,-4(fp)
   97404:	00975a00 	call	975a0 <alt_iic_isr_register>
}  
   97408:	e037883a 	mov	sp,fp
   9740c:	dfc00117 	ldw	ra,4(sp)
   97410:	df000017 	ldw	fp,0(sp)
   97414:	dec00204 	addi	sp,sp,8
   97418:	f800283a 	ret

0009741c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   9741c:	defff904 	addi	sp,sp,-28
   97420:	df000615 	stw	fp,24(sp)
   97424:	df000604 	addi	fp,sp,24
   97428:	e13ffe15 	stw	r4,-8(fp)
   9742c:	e17fff15 	stw	r5,-4(fp)
   97430:	e0bfff17 	ldw	r2,-4(fp)
   97434:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   97438:	0005303a 	rdctl	r2,status
   9743c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   97440:	e0fffb17 	ldw	r3,-20(fp)
   97444:	00bfff84 	movi	r2,-2
   97448:	1884703a 	and	r2,r3,r2
   9744c:	1001703a 	wrctl	status,r2
  
  return context;
   97450:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   97454:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   97458:	e0fffc17 	ldw	r3,-16(fp)
   9745c:	00800044 	movi	r2,1
   97460:	10c4983a 	sll	r2,r2,r3
   97464:	1007883a 	mov	r3,r2
   97468:	008002b4 	movhi	r2,10
   9746c:	10b3be04 	addi	r2,r2,-12552
   97470:	10800017 	ldw	r2,0(r2)
   97474:	1886b03a 	or	r3,r3,r2
   97478:	008002b4 	movhi	r2,10
   9747c:	10b3be04 	addi	r2,r2,-12552
   97480:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   97484:	008002b4 	movhi	r2,10
   97488:	10b3be04 	addi	r2,r2,-12552
   9748c:	10800017 	ldw	r2,0(r2)
   97490:	100170fa 	wrctl	ienable,r2
   97494:	e0bffd17 	ldw	r2,-12(fp)
   97498:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9749c:	e0bffa17 	ldw	r2,-24(fp)
   974a0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   974a4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   974a8:	e037883a 	mov	sp,fp
   974ac:	df000017 	ldw	fp,0(sp)
   974b0:	dec00104 	addi	sp,sp,4
   974b4:	f800283a 	ret

000974b8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   974b8:	defff904 	addi	sp,sp,-28
   974bc:	df000615 	stw	fp,24(sp)
   974c0:	df000604 	addi	fp,sp,24
   974c4:	e13ffe15 	stw	r4,-8(fp)
   974c8:	e17fff15 	stw	r5,-4(fp)
   974cc:	e0bfff17 	ldw	r2,-4(fp)
   974d0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   974d4:	0005303a 	rdctl	r2,status
   974d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   974dc:	e0fffb17 	ldw	r3,-20(fp)
   974e0:	00bfff84 	movi	r2,-2
   974e4:	1884703a 	and	r2,r3,r2
   974e8:	1001703a 	wrctl	status,r2
  
  return context;
   974ec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   974f0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   974f4:	e0fffc17 	ldw	r3,-16(fp)
   974f8:	00800044 	movi	r2,1
   974fc:	10c4983a 	sll	r2,r2,r3
   97500:	0084303a 	nor	r2,zero,r2
   97504:	1007883a 	mov	r3,r2
   97508:	008002b4 	movhi	r2,10
   9750c:	10b3be04 	addi	r2,r2,-12552
   97510:	10800017 	ldw	r2,0(r2)
   97514:	1886703a 	and	r3,r3,r2
   97518:	008002b4 	movhi	r2,10
   9751c:	10b3be04 	addi	r2,r2,-12552
   97520:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   97524:	008002b4 	movhi	r2,10
   97528:	10b3be04 	addi	r2,r2,-12552
   9752c:	10800017 	ldw	r2,0(r2)
   97530:	100170fa 	wrctl	ienable,r2
   97534:	e0bffd17 	ldw	r2,-12(fp)
   97538:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9753c:	e0bffa17 	ldw	r2,-24(fp)
   97540:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   97544:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   97548:	e037883a 	mov	sp,fp
   9754c:	df000017 	ldw	fp,0(sp)
   97550:	dec00104 	addi	sp,sp,4
   97554:	f800283a 	ret

00097558 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   97558:	defffc04 	addi	sp,sp,-16
   9755c:	df000315 	stw	fp,12(sp)
   97560:	df000304 	addi	fp,sp,12
   97564:	e13ffe15 	stw	r4,-8(fp)
   97568:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   9756c:	000530fa 	rdctl	r2,ienable
   97570:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   97574:	e0ffff17 	ldw	r3,-4(fp)
   97578:	00800044 	movi	r2,1
   9757c:	10c4983a 	sll	r2,r2,r3
   97580:	1007883a 	mov	r3,r2
   97584:	e0bffd17 	ldw	r2,-12(fp)
   97588:	1884703a 	and	r2,r3,r2
   9758c:	1004c03a 	cmpne	r2,r2,zero
}
   97590:	e037883a 	mov	sp,fp
   97594:	df000017 	ldw	fp,0(sp)
   97598:	dec00104 	addi	sp,sp,4
   9759c:	f800283a 	ret

000975a0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   975a0:	defff404 	addi	sp,sp,-48
   975a4:	dfc00b15 	stw	ra,44(sp)
   975a8:	df000a15 	stw	fp,40(sp)
   975ac:	df000a04 	addi	fp,sp,40
   975b0:	e13ffb15 	stw	r4,-20(fp)
   975b4:	e17ffc15 	stw	r5,-16(fp)
   975b8:	e1bffd15 	stw	r6,-12(fp)
   975bc:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   975c0:	00bffa84 	movi	r2,-22
   975c4:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   975c8:	e0bffc17 	ldw	r2,-16(fp)
   975cc:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   975d0:	e0bff917 	ldw	r2,-28(fp)
   975d4:	10800808 	cmpgei	r2,r2,32
   975d8:	1000291e 	bne	r2,zero,97680 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   975dc:	0005303a 	rdctl	r2,status
   975e0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   975e4:	e0fff717 	ldw	r3,-36(fp)
   975e8:	00bfff84 	movi	r2,-2
   975ec:	1884703a 	and	r2,r3,r2
   975f0:	1001703a 	wrctl	status,r2
  
  return context;
   975f4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   975f8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   975fc:	e0bff917 	ldw	r2,-28(fp)
   97600:	00c002f4 	movhi	r3,11
   97604:	18f0fa04 	addi	r3,r3,-15384
   97608:	100490fa 	slli	r2,r2,3
   9760c:	10c7883a 	add	r3,r2,r3
   97610:	e0bffd17 	ldw	r2,-12(fp)
   97614:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   97618:	e0bff917 	ldw	r2,-28(fp)
   9761c:	00c002f4 	movhi	r3,11
   97620:	18f0fa04 	addi	r3,r3,-15384
   97624:	100490fa 	slli	r2,r2,3
   97628:	10c5883a 	add	r2,r2,r3
   9762c:	10c00104 	addi	r3,r2,4
   97630:	e0bffe17 	ldw	r2,-8(fp)
   97634:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   97638:	e0bffd17 	ldw	r2,-12(fp)
   9763c:	1005003a 	cmpeq	r2,r2,zero
   97640:	1000051e 	bne	r2,zero,97658 <alt_iic_isr_register+0xb8>
   97644:	e17ff917 	ldw	r5,-28(fp)
   97648:	e13ffb17 	ldw	r4,-20(fp)
   9764c:	009741c0 	call	9741c <alt_ic_irq_enable>
   97650:	e0bfff15 	stw	r2,-4(fp)
   97654:	00000406 	br	97668 <alt_iic_isr_register+0xc8>
   97658:	e17ff917 	ldw	r5,-28(fp)
   9765c:	e13ffb17 	ldw	r4,-20(fp)
   97660:	00974b80 	call	974b8 <alt_ic_irq_disable>
   97664:	e0bfff15 	stw	r2,-4(fp)
   97668:	e0bfff17 	ldw	r2,-4(fp)
   9766c:	e0bffa15 	stw	r2,-24(fp)
   97670:	e0bff817 	ldw	r2,-32(fp)
   97674:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   97678:	e0bff617 	ldw	r2,-40(fp)
   9767c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   97680:	e0bffa17 	ldw	r2,-24(fp)
}
   97684:	e037883a 	mov	sp,fp
   97688:	dfc00117 	ldw	ra,4(sp)
   9768c:	df000017 	ldw	fp,0(sp)
   97690:	dec00204 	addi	sp,sp,8
   97694:	f800283a 	ret

00097698 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   97698:	defff804 	addi	sp,sp,-32
   9769c:	dfc00715 	stw	ra,28(sp)
   976a0:	df000615 	stw	fp,24(sp)
   976a4:	dc000515 	stw	r16,20(sp)
   976a8:	df000504 	addi	fp,sp,20
   976ac:	e13ffc15 	stw	r4,-16(fp)
   976b0:	e17ffd15 	stw	r5,-12(fp)
   976b4:	e1bffe15 	stw	r6,-8(fp)
   976b8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   976bc:	e13ffd17 	ldw	r4,-12(fp)
   976c0:	e17ffe17 	ldw	r5,-8(fp)
   976c4:	e1bfff17 	ldw	r6,-4(fp)
   976c8:	00978e00 	call	978e0 <open>
   976cc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   976d0:	e0bffb17 	ldw	r2,-20(fp)
   976d4:	1004803a 	cmplt	r2,r2,zero
   976d8:	10001f1e 	bne	r2,zero,97758 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   976dc:	e13ffb17 	ldw	r4,-20(fp)
   976e0:	040002b4 	movhi	r16,10
   976e4:	84283b04 	addi	r16,r16,-24340
   976e8:	01400304 	movi	r5,12
   976ec:	0082b040 	call	82b04 <__mulsi3>
   976f0:	1405883a 	add	r2,r2,r16
   976f4:	10c00017 	ldw	r3,0(r2)
   976f8:	e0bffc17 	ldw	r2,-16(fp)
   976fc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   97700:	e13ffb17 	ldw	r4,-20(fp)
   97704:	040002b4 	movhi	r16,10
   97708:	84283b04 	addi	r16,r16,-24340
   9770c:	01400304 	movi	r5,12
   97710:	0082b040 	call	82b04 <__mulsi3>
   97714:	1405883a 	add	r2,r2,r16
   97718:	10800104 	addi	r2,r2,4
   9771c:	10c00017 	ldw	r3,0(r2)
   97720:	e0bffc17 	ldw	r2,-16(fp)
   97724:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   97728:	e13ffb17 	ldw	r4,-20(fp)
   9772c:	040002b4 	movhi	r16,10
   97730:	84283b04 	addi	r16,r16,-24340
   97734:	01400304 	movi	r5,12
   97738:	0082b040 	call	82b04 <__mulsi3>
   9773c:	1405883a 	add	r2,r2,r16
   97740:	10800204 	addi	r2,r2,8
   97744:	10c00017 	ldw	r3,0(r2)
   97748:	e0bffc17 	ldw	r2,-16(fp)
   9774c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   97750:	e13ffb17 	ldw	r4,-20(fp)
   97754:	008d2d00 	call	8d2d0 <alt_release_fd>
  }
} 
   97758:	e037883a 	mov	sp,fp
   9775c:	dfc00217 	ldw	ra,8(sp)
   97760:	df000117 	ldw	fp,4(sp)
   97764:	dc000017 	ldw	r16,0(sp)
   97768:	dec00304 	addi	sp,sp,12
   9776c:	f800283a 	ret

00097770 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   97770:	defffb04 	addi	sp,sp,-20
   97774:	dfc00415 	stw	ra,16(sp)
   97778:	df000315 	stw	fp,12(sp)
   9777c:	df000304 	addi	fp,sp,12
   97780:	e13ffd15 	stw	r4,-12(fp)
   97784:	e17ffe15 	stw	r5,-8(fp)
   97788:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   9778c:	010002b4 	movhi	r4,10
   97790:	21283e04 	addi	r4,r4,-24328
   97794:	e17ffd17 	ldw	r5,-12(fp)
   97798:	01800044 	movi	r6,1
   9779c:	01c07fc4 	movi	r7,511
   977a0:	00976980 	call	97698 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   977a4:	010002b4 	movhi	r4,10
   977a8:	21283b04 	addi	r4,r4,-24340
   977ac:	e17ffe17 	ldw	r5,-8(fp)
   977b0:	000d883a 	mov	r6,zero
   977b4:	01c07fc4 	movi	r7,511
   977b8:	00976980 	call	97698 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   977bc:	010002b4 	movhi	r4,10
   977c0:	21284104 	addi	r4,r4,-24316
   977c4:	e17fff17 	ldw	r5,-4(fp)
   977c8:	01800044 	movi	r6,1
   977cc:	01c07fc4 	movi	r7,511
   977d0:	00976980 	call	97698 <alt_open_fd>
}  
   977d4:	e037883a 	mov	sp,fp
   977d8:	dfc00117 	ldw	ra,4(sp)
   977dc:	df000017 	ldw	fp,0(sp)
   977e0:	dec00204 	addi	sp,sp,8
   977e4:	f800283a 	ret

000977e8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   977e8:	defffa04 	addi	sp,sp,-24
   977ec:	dfc00515 	stw	ra,20(sp)
   977f0:	df000415 	stw	fp,16(sp)
   977f4:	dc000315 	stw	r16,12(sp)
   977f8:	df000304 	addi	fp,sp,12
   977fc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   97800:	e0bffe17 	ldw	r2,-8(fp)
   97804:	10800217 	ldw	r2,8(r2)
   97808:	10d00034 	orhi	r3,r2,16384
   9780c:	e0bffe17 	ldw	r2,-8(fp)
   97810:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   97814:	e03ffd15 	stw	zero,-12(fp)
   97818:	00002306 	br	978a8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   9781c:	e13ffd17 	ldw	r4,-12(fp)
   97820:	040002b4 	movhi	r16,10
   97824:	84283b04 	addi	r16,r16,-24340
   97828:	01400304 	movi	r5,12
   9782c:	0082b040 	call	82b04 <__mulsi3>
   97830:	1405883a 	add	r2,r2,r16
   97834:	10c00017 	ldw	r3,0(r2)
   97838:	e0bffe17 	ldw	r2,-8(fp)
   9783c:	10800017 	ldw	r2,0(r2)
   97840:	1880161e 	bne	r3,r2,9789c <alt_file_locked+0xb4>
   97844:	e13ffd17 	ldw	r4,-12(fp)
   97848:	040002b4 	movhi	r16,10
   9784c:	84283b04 	addi	r16,r16,-24340
   97850:	01400304 	movi	r5,12
   97854:	0082b040 	call	82b04 <__mulsi3>
   97858:	1405883a 	add	r2,r2,r16
   9785c:	10800204 	addi	r2,r2,8
   97860:	10800017 	ldw	r2,0(r2)
   97864:	1004403a 	cmpge	r2,r2,zero
   97868:	10000c1e 	bne	r2,zero,9789c <alt_file_locked+0xb4>
   9786c:	e13ffd17 	ldw	r4,-12(fp)
   97870:	01400304 	movi	r5,12
   97874:	0082b040 	call	82b04 <__mulsi3>
   97878:	1007883a 	mov	r3,r2
   9787c:	008002b4 	movhi	r2,10
   97880:	10a83b04 	addi	r2,r2,-24340
   97884:	1887883a 	add	r3,r3,r2
   97888:	e0bffe17 	ldw	r2,-8(fp)
   9788c:	18800326 	beq	r3,r2,9789c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   97890:	00bffcc4 	movi	r2,-13
   97894:	e0bfff15 	stw	r2,-4(fp)
   97898:	00000a06 	br	978c4 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   9789c:	e0bffd17 	ldw	r2,-12(fp)
   978a0:	10800044 	addi	r2,r2,1
   978a4:	e0bffd15 	stw	r2,-12(fp)
   978a8:	008002b4 	movhi	r2,10
   978ac:	10accc04 	addi	r2,r2,-19664
   978b0:	10800017 	ldw	r2,0(r2)
   978b4:	1007883a 	mov	r3,r2
   978b8:	e0bffd17 	ldw	r2,-12(fp)
   978bc:	18bfd72e 	bgeu	r3,r2,9781c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   978c0:	e03fff15 	stw	zero,-4(fp)
   978c4:	e0bfff17 	ldw	r2,-4(fp)
}
   978c8:	e037883a 	mov	sp,fp
   978cc:	dfc00217 	ldw	ra,8(sp)
   978d0:	df000117 	ldw	fp,4(sp)
   978d4:	dc000017 	ldw	r16,0(sp)
   978d8:	dec00304 	addi	sp,sp,12
   978dc:	f800283a 	ret

000978e0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   978e0:	defff404 	addi	sp,sp,-48
   978e4:	dfc00b15 	stw	ra,44(sp)
   978e8:	df000a15 	stw	fp,40(sp)
   978ec:	df000a04 	addi	fp,sp,40
   978f0:	e13ffb15 	stw	r4,-20(fp)
   978f4:	e17ffc15 	stw	r5,-16(fp)
   978f8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   978fc:	00bfffc4 	movi	r2,-1
   97900:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   97904:	00bffb44 	movi	r2,-19
   97908:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   9790c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   97910:	e13ffb17 	ldw	r4,-20(fp)
   97914:	014002b4 	movhi	r5,10
   97918:	296cca04 	addi	r5,r5,-19672
   9791c:	009731c0 	call	9731c <alt_find_dev>
   97920:	e0bffa15 	stw	r2,-24(fp)
   97924:	e0bffa17 	ldw	r2,-24(fp)
   97928:	1004c03a 	cmpne	r2,r2,zero
   9792c:	1000051e 	bne	r2,zero,97944 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   97930:	e13ffb17 	ldw	r4,-20(fp)
   97934:	009817c0 	call	9817c <alt_find_file>
   97938:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   9793c:	00800044 	movi	r2,1
   97940:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   97944:	e0bffa17 	ldw	r2,-24(fp)
   97948:	1005003a 	cmpeq	r2,r2,zero
   9794c:	1000311e 	bne	r2,zero,97a14 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   97950:	e13ffa17 	ldw	r4,-24(fp)
   97954:	009829c0 	call	9829c <alt_get_fd>
   97958:	e0bff815 	stw	r2,-32(fp)
   9795c:	e0bff817 	ldw	r2,-32(fp)
   97960:	1004403a 	cmpge	r2,r2,zero
   97964:	1000031e 	bne	r2,zero,97974 <open+0x94>
    {
      status = index;
   97968:	e0bff817 	ldw	r2,-32(fp)
   9796c:	e0bff715 	stw	r2,-36(fp)
   97970:	00002a06 	br	97a1c <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   97974:	e13ff817 	ldw	r4,-32(fp)
   97978:	01400304 	movi	r5,12
   9797c:	0082b040 	call	82b04 <__mulsi3>
   97980:	1007883a 	mov	r3,r2
   97984:	008002b4 	movhi	r2,10
   97988:	10a83b04 	addi	r2,r2,-24340
   9798c:	1885883a 	add	r2,r3,r2
   97990:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   97994:	e0fffc17 	ldw	r3,-16(fp)
   97998:	00900034 	movhi	r2,16384
   9799c:	10bfffc4 	addi	r2,r2,-1
   979a0:	1886703a 	and	r3,r3,r2
   979a4:	e0bff917 	ldw	r2,-28(fp)
   979a8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   979ac:	e0bff617 	ldw	r2,-40(fp)
   979b0:	1004c03a 	cmpne	r2,r2,zero
   979b4:	1000061e 	bne	r2,zero,979d0 <open+0xf0>
   979b8:	e13ff917 	ldw	r4,-28(fp)
   979bc:	00977e80 	call	977e8 <alt_file_locked>
   979c0:	e0bff715 	stw	r2,-36(fp)
   979c4:	e0bff717 	ldw	r2,-36(fp)
   979c8:	1004803a 	cmplt	r2,r2,zero
   979cc:	1000131e 	bne	r2,zero,97a1c <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   979d0:	e0bffa17 	ldw	r2,-24(fp)
   979d4:	10800317 	ldw	r2,12(r2)
   979d8:	1005003a 	cmpeq	r2,r2,zero
   979dc:	1000091e 	bne	r2,zero,97a04 <open+0x124>
   979e0:	e0bffa17 	ldw	r2,-24(fp)
   979e4:	10800317 	ldw	r2,12(r2)
   979e8:	e13ff917 	ldw	r4,-28(fp)
   979ec:	e17ffb17 	ldw	r5,-20(fp)
   979f0:	e1bffc17 	ldw	r6,-16(fp)
   979f4:	e1fffd17 	ldw	r7,-12(fp)
   979f8:	103ee83a 	callr	r2
   979fc:	e0bfff15 	stw	r2,-4(fp)
   97a00:	00000106 	br	97a08 <open+0x128>
   97a04:	e03fff15 	stw	zero,-4(fp)
   97a08:	e0bfff17 	ldw	r2,-4(fp)
   97a0c:	e0bff715 	stw	r2,-36(fp)
   97a10:	00000206 	br	97a1c <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   97a14:	00bffb44 	movi	r2,-19
   97a18:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   97a1c:	e0bff717 	ldw	r2,-36(fp)
   97a20:	1004403a 	cmpge	r2,r2,zero
   97a24:	1000091e 	bne	r2,zero,97a4c <open+0x16c>
  {
    alt_release_fd (index);  
   97a28:	e13ff817 	ldw	r4,-32(fp)
   97a2c:	008d2d00 	call	8d2d0 <alt_release_fd>
    ALT_ERRNO = -status;
   97a30:	0097a6c0 	call	97a6c <alt_get_errno>
   97a34:	e0fff717 	ldw	r3,-36(fp)
   97a38:	00c7c83a 	sub	r3,zero,r3
   97a3c:	10c00015 	stw	r3,0(r2)
    return -1;
   97a40:	00bfffc4 	movi	r2,-1
   97a44:	e0bffe15 	stw	r2,-8(fp)
   97a48:	00000206 	br	97a54 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   97a4c:	e0bff817 	ldw	r2,-32(fp)
   97a50:	e0bffe15 	stw	r2,-8(fp)
   97a54:	e0bffe17 	ldw	r2,-8(fp)
}
   97a58:	e037883a 	mov	sp,fp
   97a5c:	dfc00117 	ldw	ra,4(sp)
   97a60:	df000017 	ldw	fp,0(sp)
   97a64:	dec00204 	addi	sp,sp,8
   97a68:	f800283a 	ret

00097a6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   97a6c:	defffd04 	addi	sp,sp,-12
   97a70:	dfc00215 	stw	ra,8(sp)
   97a74:	df000115 	stw	fp,4(sp)
   97a78:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   97a7c:	008002b4 	movhi	r2,10
   97a80:	10accd04 	addi	r2,r2,-19660
   97a84:	10800017 	ldw	r2,0(r2)
   97a88:	1005003a 	cmpeq	r2,r2,zero
   97a8c:	1000061e 	bne	r2,zero,97aa8 <alt_get_errno+0x3c>
   97a90:	008002b4 	movhi	r2,10
   97a94:	10accd04 	addi	r2,r2,-19660
   97a98:	10800017 	ldw	r2,0(r2)
   97a9c:	103ee83a 	callr	r2
   97aa0:	e0bfff15 	stw	r2,-4(fp)
   97aa4:	00000306 	br	97ab4 <alt_get_errno+0x48>
   97aa8:	008002b4 	movhi	r2,10
   97aac:	10b3bc04 	addi	r2,r2,-12560
   97ab0:	e0bfff15 	stw	r2,-4(fp)
   97ab4:	e0bfff17 	ldw	r2,-4(fp)
}
   97ab8:	e037883a 	mov	sp,fp
   97abc:	dfc00117 	ldw	ra,4(sp)
   97ac0:	df000017 	ldw	fp,0(sp)
   97ac4:	dec00204 	addi	sp,sp,8
   97ac8:	f800283a 	ret

00097acc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   97acc:	defffa04 	addi	sp,sp,-24
   97ad0:	df000515 	stw	fp,20(sp)
   97ad4:	df000504 	addi	fp,sp,20
   97ad8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   97adc:	0005303a 	rdctl	r2,status
   97ae0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   97ae4:	e0fffd17 	ldw	r3,-12(fp)
   97ae8:	00bfff84 	movi	r2,-2
   97aec:	1884703a 	and	r2,r3,r2
   97af0:	1001703a 	wrctl	status,r2
  
  return context;
   97af4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   97af8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   97afc:	e0bfff17 	ldw	r2,-4(fp)
   97b00:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   97b04:	e0bffc17 	ldw	r2,-16(fp)
   97b08:	10c00017 	ldw	r3,0(r2)
   97b0c:	e0bffc17 	ldw	r2,-16(fp)
   97b10:	10800117 	ldw	r2,4(r2)
   97b14:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   97b18:	e0bffc17 	ldw	r2,-16(fp)
   97b1c:	10c00117 	ldw	r3,4(r2)
   97b20:	e0bffc17 	ldw	r2,-16(fp)
   97b24:	10800017 	ldw	r2,0(r2)
   97b28:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   97b2c:	e0fffc17 	ldw	r3,-16(fp)
   97b30:	e0bffc17 	ldw	r2,-16(fp)
   97b34:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   97b38:	e0fffc17 	ldw	r3,-16(fp)
   97b3c:	e0bffc17 	ldw	r2,-16(fp)
   97b40:	18800015 	stw	r2,0(r3)
   97b44:	e0bffe17 	ldw	r2,-8(fp)
   97b48:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   97b4c:	e0bffb17 	ldw	r2,-20(fp)
   97b50:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   97b54:	e037883a 	mov	sp,fp
   97b58:	df000017 	ldw	fp,0(sp)
   97b5c:	dec00104 	addi	sp,sp,4
   97b60:	f800283a 	ret

00097b64 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   97b64:	defffb04 	addi	sp,sp,-20
   97b68:	dfc00415 	stw	ra,16(sp)
   97b6c:	df000315 	stw	fp,12(sp)
   97b70:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   97b74:	d0a02e17 	ldw	r2,-32584(gp)
   97b78:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   97b7c:	d0a71a17 	ldw	r2,-25496(gp)
   97b80:	10800044 	addi	r2,r2,1
   97b84:	d0a71a15 	stw	r2,-25496(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   97b88:	00003106 	br	97c50 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   97b8c:	e0bffe17 	ldw	r2,-8(fp)
   97b90:	10800017 	ldw	r2,0(r2)
   97b94:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   97b98:	e0bffe17 	ldw	r2,-8(fp)
   97b9c:	10800403 	ldbu	r2,16(r2)
   97ba0:	10803fcc 	andi	r2,r2,255
   97ba4:	1005003a 	cmpeq	r2,r2,zero
   97ba8:	1000051e 	bne	r2,zero,97bc0 <alt_tick+0x5c>
   97bac:	d0a71a17 	ldw	r2,-25496(gp)
   97bb0:	1004c03a 	cmpne	r2,r2,zero
   97bb4:	1000021e 	bne	r2,zero,97bc0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   97bb8:	e0bffe17 	ldw	r2,-8(fp)
   97bbc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   97bc0:	e0bffe17 	ldw	r2,-8(fp)
   97bc4:	10c00217 	ldw	r3,8(r2)
   97bc8:	d0a71a17 	ldw	r2,-25496(gp)
   97bcc:	10c01e36 	bltu	r2,r3,97c48 <alt_tick+0xe4>
   97bd0:	e0bffe17 	ldw	r2,-8(fp)
   97bd4:	10800403 	ldbu	r2,16(r2)
   97bd8:	10803fcc 	andi	r2,r2,255
   97bdc:	1004c03a 	cmpne	r2,r2,zero
   97be0:	1000191e 	bne	r2,zero,97c48 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   97be4:	e0bffe17 	ldw	r2,-8(fp)
   97be8:	10c00317 	ldw	r3,12(r2)
   97bec:	e0bffe17 	ldw	r2,-8(fp)
   97bf0:	11000517 	ldw	r4,20(r2)
   97bf4:	183ee83a 	callr	r3
   97bf8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   97bfc:	e0bffd17 	ldw	r2,-12(fp)
   97c00:	1004c03a 	cmpne	r2,r2,zero
   97c04:	1000031e 	bne	r2,zero,97c14 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   97c08:	e13ffe17 	ldw	r4,-8(fp)
   97c0c:	0097acc0 	call	97acc <alt_alarm_stop>
   97c10:	00000d06 	br	97c48 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   97c14:	e0bffe17 	ldw	r2,-8(fp)
   97c18:	10c00217 	ldw	r3,8(r2)
   97c1c:	e0bffd17 	ldw	r2,-12(fp)
   97c20:	1887883a 	add	r3,r3,r2
   97c24:	e0bffe17 	ldw	r2,-8(fp)
   97c28:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   97c2c:	e0bffe17 	ldw	r2,-8(fp)
   97c30:	10c00217 	ldw	r3,8(r2)
   97c34:	d0a71a17 	ldw	r2,-25496(gp)
   97c38:	1880032e 	bgeu	r3,r2,97c48 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   97c3c:	e0fffe17 	ldw	r3,-8(fp)
   97c40:	00800044 	movi	r2,1
   97c44:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   97c48:	e0bfff17 	ldw	r2,-4(fp)
   97c4c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   97c50:	d0e02e04 	addi	r3,gp,-32584
   97c54:	e0bffe17 	ldw	r2,-8(fp)
   97c58:	10ffcc1e 	bne	r2,r3,97b8c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   97c5c:	008e5ec0 	call	8e5ec <OSTimeTick>
}
   97c60:	e037883a 	mov	sp,fp
   97c64:	dfc00117 	ldw	ra,4(sp)
   97c68:	df000017 	ldw	fp,0(sp)
   97c6c:	dec00204 	addi	sp,sp,8
   97c70:	f800283a 	ret

00097c74 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   97c74:	deffff04 	addi	sp,sp,-4
   97c78:	df000015 	stw	fp,0(sp)
   97c7c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   97c80:	000170fa 	wrctl	ienable,zero
}
   97c84:	e037883a 	mov	sp,fp
   97c88:	df000017 	ldw	fp,0(sp)
   97c8c:	dec00104 	addi	sp,sp,4
   97c90:	f800283a 	ret

00097c94 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   97c94:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   97c98:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   97c9c:	d1271417 	ldw	r4,-25520(gp)

      stw ra,  0(sp)
   97ca0:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   97ca4:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   97ca8:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   97cac:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   97cb0:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   97cb4:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   97cb8:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   97cbc:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   97cc0:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   97cc4:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   97cc8:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   97ccc:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   97cd0:	00980b40 	call	980b4 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   97cd4:	d1270f17 	ldw	r4,-25540(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   97cd8:	d1670707 	ldb	r5,-25572(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   97cdc:	d1271415 	stw	r4,-25520(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   97ce0:	d1670745 	stb	r5,-25571(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   97ce4:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   97ce8:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   97cec:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   97cf0:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   97cf4:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   97cf8:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   97cfc:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   97d00:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   97d04:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   97d08:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   97d0c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   97d10:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   97d14:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   97d18:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   97d1c:	f800283a 	ret

00097d20 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   97d20:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   97d24:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   97d28:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   97d2c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   97d30:	00980b40 	call	980b4 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   97d34:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   97d38:	d4a70545 	stb	r18,-25579(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   97d3c:	003fe506 	br	97cd4 <OSCtxSw+0x40>

00097d40 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   97d40:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   97d44:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   97d48:	10800054 	ori	r2,r2,1
      wrctl status, r2
   97d4c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   97d50:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   97d54:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   97d58:	dec00204 	addi	sp,sp,8

      callr r2
   97d5c:	103ee83a 	callr	r2

      nop
   97d60:	0001883a 	nop

00097d64 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   97d64:	defff704 	addi	sp,sp,-36
   97d68:	dfc00815 	stw	ra,32(sp)
   97d6c:	df000715 	stw	fp,28(sp)
   97d70:	df000704 	addi	fp,sp,28
   97d74:	e13ffc15 	stw	r4,-16(fp)
   97d78:	e17ffd15 	stw	r5,-12(fp)
   97d7c:	e1bffe15 	stw	r6,-8(fp)
   97d80:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   97d84:	e0bffe17 	ldw	r2,-8(fp)
   97d88:	1007883a 	mov	r3,r2
   97d8c:	00bfff04 	movi	r2,-4
   97d90:	1884703a 	and	r2,r3,r2
   97d94:	10bf0004 	addi	r2,r2,-1024
   97d98:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   97d9c:	e0bff917 	ldw	r2,-28(fp)
   97da0:	10000015 	stw	zero,0(r2)
   97da4:	e0bff917 	ldw	r2,-28(fp)
   97da8:	10c0bb04 	addi	r3,r2,748
   97dac:	e0bff917 	ldw	r2,-28(fp)
   97db0:	10c00115 	stw	r3,4(r2)
   97db4:	e0bff917 	ldw	r2,-28(fp)
   97db8:	1080bb04 	addi	r2,r2,748
   97dbc:	10c01704 	addi	r3,r2,92
   97dc0:	e0bff917 	ldw	r2,-28(fp)
   97dc4:	10c00215 	stw	r3,8(r2)
   97dc8:	e0bff917 	ldw	r2,-28(fp)
   97dcc:	1080bb04 	addi	r2,r2,748
   97dd0:	10c02e04 	addi	r3,r2,184
   97dd4:	e0bff917 	ldw	r2,-28(fp)
   97dd8:	10c00315 	stw	r3,12(r2)
   97ddc:	e0bff917 	ldw	r2,-28(fp)
   97de0:	10000415 	stw	zero,16(r2)
   97de4:	e0bff917 	ldw	r2,-28(fp)
   97de8:	10800504 	addi	r2,r2,20
   97dec:	1009883a 	mov	r4,r2
   97df0:	01800644 	movi	r6,25
   97df4:	000b883a 	mov	r5,zero
   97df8:	00882ac0 	call	882ac <memset>
   97dfc:	e0bff917 	ldw	r2,-28(fp)
   97e00:	10000c15 	stw	zero,48(r2)
   97e04:	e0fff917 	ldw	r3,-28(fp)
   97e08:	008002b4 	movhi	r2,10
   97e0c:	10a62b04 	addi	r2,r2,-26452
   97e10:	18800d15 	stw	r2,52(r3)
   97e14:	e0bff917 	ldw	r2,-28(fp)
   97e18:	10000e15 	stw	zero,56(r2)
   97e1c:	e0bff917 	ldw	r2,-28(fp)
   97e20:	10000f15 	stw	zero,60(r2)
   97e24:	e0bff917 	ldw	r2,-28(fp)
   97e28:	10001015 	stw	zero,64(r2)
   97e2c:	e0bff917 	ldw	r2,-28(fp)
   97e30:	10001115 	stw	zero,68(r2)
   97e34:	e0bff917 	ldw	r2,-28(fp)
   97e38:	10001215 	stw	zero,72(r2)
   97e3c:	e0bff917 	ldw	r2,-28(fp)
   97e40:	10001315 	stw	zero,76(r2)
   97e44:	e0bff917 	ldw	r2,-28(fp)
   97e48:	10001415 	stw	zero,80(r2)
   97e4c:	e0bff917 	ldw	r2,-28(fp)
   97e50:	10001515 	stw	zero,84(r2)
   97e54:	e0bff917 	ldw	r2,-28(fp)
   97e58:	10001615 	stw	zero,88(r2)
   97e5c:	e0bff917 	ldw	r2,-28(fp)
   97e60:	10001715 	stw	zero,92(r2)
   97e64:	e0bff917 	ldw	r2,-28(fp)
   97e68:	10001805 	stb	zero,96(r2)
   97e6c:	e0bff917 	ldw	r2,-28(fp)
   97e70:	10801f04 	addi	r2,r2,124
   97e74:	10000015 	stw	zero,0(r2)
   97e78:	10000115 	stw	zero,4(r2)
   97e7c:	10000215 	stw	zero,8(r2)
   97e80:	10000315 	stw	zero,12(r2)
   97e84:	10000415 	stw	zero,16(r2)
   97e88:	10000515 	stw	zero,20(r2)
   97e8c:	10000615 	stw	zero,24(r2)
   97e90:	10000715 	stw	zero,28(r2)
   97e94:	10000815 	stw	zero,32(r2)
   97e98:	e0bff917 	ldw	r2,-28(fp)
   97e9c:	10002815 	stw	zero,160(r2)
   97ea0:	e0fff917 	ldw	r3,-28(fp)
   97ea4:	00800044 	movi	r2,1
   97ea8:	18802915 	stw	r2,164(r3)
   97eac:	18002a15 	stw	zero,168(r3)
   97eb0:	e0fff917 	ldw	r3,-28(fp)
   97eb4:	008cc384 	movi	r2,13070
   97eb8:	18802b0d 	sth	r2,172(r3)
   97ebc:	e0fff917 	ldw	r3,-28(fp)
   97ec0:	00aaf344 	movi	r2,-21555
   97ec4:	18802b8d 	sth	r2,174(r3)
   97ec8:	e0fff917 	ldw	r3,-28(fp)
   97ecc:	00848d04 	movi	r2,4660
   97ed0:	18802c0d 	sth	r2,176(r3)
   97ed4:	e0fff917 	ldw	r3,-28(fp)
   97ed8:	00b99b44 	movi	r2,-6547
   97edc:	18802c8d 	sth	r2,178(r3)
   97ee0:	e0fff917 	ldw	r3,-28(fp)
   97ee4:	00b7bb04 	movi	r2,-8468
   97ee8:	18802d0d 	sth	r2,180(r3)
   97eec:	e0fff917 	ldw	r3,-28(fp)
   97ef0:	00800144 	movi	r2,5
   97ef4:	18802d8d 	sth	r2,182(r3)
   97ef8:	e0fff917 	ldw	r3,-28(fp)
   97efc:	008002c4 	movi	r2,11
   97f00:	18802e0d 	sth	r2,184(r3)
   97f04:	e0bff917 	ldw	r2,-28(fp)
   97f08:	10002f15 	stw	zero,188(r2)
   97f0c:	e0bff917 	ldw	r2,-28(fp)
   97f10:	10003015 	stw	zero,192(r2)
   97f14:	e0bff917 	ldw	r2,-28(fp)
   97f18:	10003115 	stw	zero,196(r2)
   97f1c:	e0bff917 	ldw	r2,-28(fp)
   97f20:	10003215 	stw	zero,200(r2)
   97f24:	e0bff917 	ldw	r2,-28(fp)
   97f28:	10003315 	stw	zero,204(r2)
   97f2c:	e0bff917 	ldw	r2,-28(fp)
   97f30:	10003415 	stw	zero,208(r2)
   97f34:	e0bff917 	ldw	r2,-28(fp)
   97f38:	10003e15 	stw	zero,248(r2)
   97f3c:	e0bff917 	ldw	r2,-28(fp)
   97f40:	10003f15 	stw	zero,252(r2)
   97f44:	e0bff917 	ldw	r2,-28(fp)
   97f48:	10004015 	stw	zero,256(r2)
   97f4c:	e0bff917 	ldw	r2,-28(fp)
   97f50:	10004115 	stw	zero,260(r2)
   97f54:	e0bff917 	ldw	r2,-28(fp)
   97f58:	10004215 	stw	zero,264(r2)
   97f5c:	e0bff917 	ldw	r2,-28(fp)
   97f60:	10004315 	stw	zero,268(r2)
   97f64:	e0bff917 	ldw	r2,-28(fp)
   97f68:	10004415 	stw	zero,272(r2)
   97f6c:	e0bff917 	ldw	r2,-28(fp)
   97f70:	10004515 	stw	zero,276(r2)
   97f74:	e0bff917 	ldw	r2,-28(fp)
   97f78:	10004615 	stw	zero,280(r2)
   97f7c:	e0bff917 	ldw	r2,-28(fp)
   97f80:	10004715 	stw	zero,284(r2)
   97f84:	e0bff917 	ldw	r2,-28(fp)
   97f88:	10003505 	stb	zero,212(r2)
   97f8c:	e0bff917 	ldw	r2,-28(fp)
   97f90:	10003705 	stb	zero,220(r2)
   97f94:	e0bff917 	ldw	r2,-28(fp)
   97f98:	10003d15 	stw	zero,244(r2)
   97f9c:	e0bff917 	ldw	r2,-28(fp)
   97fa0:	10005215 	stw	zero,328(r2)
   97fa4:	e0bff917 	ldw	r2,-28(fp)
   97fa8:	10005315 	stw	zero,332(r2)
   97fac:	e0bff917 	ldw	r2,-28(fp)
   97fb0:	10005415 	stw	zero,336(r2)
   97fb4:	e0bff917 	ldw	r2,-28(fp)
   97fb8:	10005515 	stw	zero,340(r2)
   97fbc:	e0bff917 	ldw	r2,-28(fp)
   97fc0:	1000b515 	stw	zero,724(r2)
   97fc4:	e0bff917 	ldw	r2,-28(fp)
   97fc8:	10007515 	stw	zero,468(r2)
   97fcc:	e0bff917 	ldw	r2,-28(fp)
   97fd0:	1000b715 	stw	zero,732(r2)
   97fd4:	e0bff917 	ldw	r2,-28(fp)
   97fd8:	1000b815 	stw	zero,736(r2)
   97fdc:	e0bff917 	ldw	r2,-28(fp)
   97fe0:	1000b915 	stw	zero,740(r2)
   97fe4:	e0bff917 	ldw	r2,-28(fp)
   97fe8:	1000ba15 	stw	zero,744(r2)
   97fec:	e0bff917 	ldw	r2,-28(fp)
   97ff0:	1080bb04 	addi	r2,r2,748
   97ff4:	1009883a 	mov	r4,r2
   97ff8:	01804504 	movi	r6,276
   97ffc:	000b883a 	mov	r5,zero
   98000:	00882ac0 	call	882ac <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   98004:	e0bff917 	ldw	r2,-28(fp)
   98008:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   9800c:	e0bffb17 	ldw	r2,-20(fp)
   98010:	10bff304 	addi	r2,r2,-52
   98014:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   98018:	e0bffa17 	ldw	r2,-24(fp)
   9801c:	10c00c04 	addi	r3,r2,48
   98020:	e0bffc17 	ldw	r2,-16(fp)
   98024:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   98028:	e0bffa17 	ldw	r2,-24(fp)
   9802c:	10c00b04 	addi	r3,r2,44
   98030:	e0bffd17 	ldw	r2,-12(fp)
   98034:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   98038:	e0bffa17 	ldw	r2,-24(fp)
   9803c:	10c00a04 	addi	r3,r2,40
   98040:	e0bff917 	ldw	r2,-28(fp)
   98044:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   98048:	00800274 	movhi	r2,9
   9804c:	109f5004 	addi	r2,r2,32064
   98050:	10c00104 	addi	r3,r2,4
   98054:	e0bffa17 	ldw	r2,-24(fp)
   98058:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   9805c:	e0bffa17 	ldw	r2,-24(fp)
}
   98060:	e037883a 	mov	sp,fp
   98064:	dfc00117 	ldw	ra,4(sp)
   98068:	df000017 	ldw	fp,0(sp)
   9806c:	dec00204 	addi	sp,sp,8
   98070:	f800283a 	ret

00098074 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   98074:	defffe04 	addi	sp,sp,-8
   98078:	df000115 	stw	fp,4(sp)
   9807c:	df000104 	addi	fp,sp,4
   98080:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   98084:	e037883a 	mov	sp,fp
   98088:	df000017 	ldw	fp,0(sp)
   9808c:	dec00104 	addi	sp,sp,4
   98090:	f800283a 	ret

00098094 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   98094:	defffe04 	addi	sp,sp,-8
   98098:	df000115 	stw	fp,4(sp)
   9809c:	df000104 	addi	fp,sp,4
   980a0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   980a4:	e037883a 	mov	sp,fp
   980a8:	df000017 	ldw	fp,0(sp)
   980ac:	dec00104 	addi	sp,sp,4
   980b0:	f800283a 	ret

000980b4 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   980b4:	deffff04 	addi	sp,sp,-4
   980b8:	df000015 	stw	fp,0(sp)
   980bc:	d839883a 	mov	fp,sp
}
   980c0:	e037883a 	mov	sp,fp
   980c4:	df000017 	ldw	fp,0(sp)
   980c8:	dec00104 	addi	sp,sp,4
   980cc:	f800283a 	ret

000980d0 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   980d0:	deffff04 	addi	sp,sp,-4
   980d4:	df000015 	stw	fp,0(sp)
   980d8:	d839883a 	mov	fp,sp
}
   980dc:	e037883a 	mov	sp,fp
   980e0:	df000017 	ldw	fp,0(sp)
   980e4:	dec00104 	addi	sp,sp,4
   980e8:	f800283a 	ret

000980ec <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   980ec:	deffff04 	addi	sp,sp,-4
   980f0:	df000015 	stw	fp,0(sp)
   980f4:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   980f8:	e037883a 	mov	sp,fp
   980fc:	df000017 	ldw	fp,0(sp)
   98100:	dec00104 	addi	sp,sp,4
   98104:	f800283a 	ret

00098108 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   98108:	deffff04 	addi	sp,sp,-4
   9810c:	df000015 	stw	fp,0(sp)
   98110:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   98114:	e037883a 	mov	sp,fp
   98118:	df000017 	ldw	fp,0(sp)
   9811c:	dec00104 	addi	sp,sp,4
   98120:	f800283a 	ret

00098124 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   98124:	deffff04 	addi	sp,sp,-4
   98128:	df000015 	stw	fp,0(sp)
   9812c:	d839883a 	mov	fp,sp
}
   98130:	e037883a 	mov	sp,fp
   98134:	df000017 	ldw	fp,0(sp)
   98138:	dec00104 	addi	sp,sp,4
   9813c:	f800283a 	ret

00098140 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   98140:	deffff04 	addi	sp,sp,-4
   98144:	df000015 	stw	fp,0(sp)
   98148:	d839883a 	mov	fp,sp
}
   9814c:	e037883a 	mov	sp,fp
   98150:	df000017 	ldw	fp,0(sp)
   98154:	dec00104 	addi	sp,sp,4
   98158:	f800283a 	ret

0009815c <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   9815c:	defffe04 	addi	sp,sp,-8
   98160:	df000115 	stw	fp,4(sp)
   98164:	df000104 	addi	fp,sp,4
   98168:	e13fff15 	stw	r4,-4(fp)
}
   9816c:	e037883a 	mov	sp,fp
   98170:	df000017 	ldw	fp,0(sp)
   98174:	dec00104 	addi	sp,sp,4
   98178:	f800283a 	ret

0009817c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   9817c:	defffa04 	addi	sp,sp,-24
   98180:	dfc00515 	stw	ra,20(sp)
   98184:	df000415 	stw	fp,16(sp)
   98188:	df000404 	addi	fp,sp,16
   9818c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   98190:	008002b4 	movhi	r2,10
   98194:	10acc804 	addi	r2,r2,-19680
   98198:	10800017 	ldw	r2,0(r2)
   9819c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   981a0:	00003306 	br	98270 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   981a4:	e0bffd17 	ldw	r2,-12(fp)
   981a8:	11000217 	ldw	r4,8(r2)
   981ac:	0082e480 	call	82e48 <strlen>
   981b0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   981b4:	e0bffd17 	ldw	r2,-12(fp)
   981b8:	10c00217 	ldw	r3,8(r2)
   981bc:	e0bffc17 	ldw	r2,-16(fp)
   981c0:	1885883a 	add	r2,r3,r2
   981c4:	10bfffc4 	addi	r2,r2,-1
   981c8:	10800003 	ldbu	r2,0(r2)
   981cc:	10803fcc 	andi	r2,r2,255
   981d0:	1080201c 	xori	r2,r2,128
   981d4:	10bfe004 	addi	r2,r2,-128
   981d8:	10800bd8 	cmpnei	r2,r2,47
   981dc:	1000031e 	bne	r2,zero,981ec <alt_find_file+0x70>
    {
      len -= 1;
   981e0:	e0bffc17 	ldw	r2,-16(fp)
   981e4:	10bfffc4 	addi	r2,r2,-1
   981e8:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   981ec:	e0bffc17 	ldw	r2,-16(fp)
   981f0:	1007883a 	mov	r3,r2
   981f4:	e0bffe17 	ldw	r2,-8(fp)
   981f8:	1885883a 	add	r2,r3,r2
   981fc:	10800003 	ldbu	r2,0(r2)
   98200:	10803fcc 	andi	r2,r2,255
   98204:	1080201c 	xori	r2,r2,128
   98208:	10bfe004 	addi	r2,r2,-128
   9820c:	10800be0 	cmpeqi	r2,r2,47
   98210:	10000a1e 	bne	r2,zero,9823c <alt_find_file+0xc0>
   98214:	e0bffc17 	ldw	r2,-16(fp)
   98218:	1007883a 	mov	r3,r2
   9821c:	e0bffe17 	ldw	r2,-8(fp)
   98220:	1885883a 	add	r2,r3,r2
   98224:	10800003 	ldbu	r2,0(r2)
   98228:	10803fcc 	andi	r2,r2,255
   9822c:	1080201c 	xori	r2,r2,128
   98230:	10bfe004 	addi	r2,r2,-128
   98234:	1004c03a 	cmpne	r2,r2,zero
   98238:	10000a1e 	bne	r2,zero,98264 <alt_find_file+0xe8>
   9823c:	e0bffd17 	ldw	r2,-12(fp)
   98240:	11000217 	ldw	r4,8(r2)
   98244:	e1bffc17 	ldw	r6,-16(fp)
   98248:	e17ffe17 	ldw	r5,-8(fp)
   9824c:	00983ec0 	call	983ec <memcmp>
   98250:	1004c03a 	cmpne	r2,r2,zero
   98254:	1000031e 	bne	r2,zero,98264 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   98258:	e0bffd17 	ldw	r2,-12(fp)
   9825c:	e0bfff15 	stw	r2,-4(fp)
   98260:	00000806 	br	98284 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   98264:	e0bffd17 	ldw	r2,-12(fp)
   98268:	10800017 	ldw	r2,0(r2)
   9826c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   98270:	00c002b4 	movhi	r3,10
   98274:	18ecc804 	addi	r3,r3,-19680
   98278:	e0bffd17 	ldw	r2,-12(fp)
   9827c:	10ffc91e 	bne	r2,r3,981a4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   98280:	e03fff15 	stw	zero,-4(fp)
   98284:	e0bfff17 	ldw	r2,-4(fp)
}
   98288:	e037883a 	mov	sp,fp
   9828c:	dfc00117 	ldw	ra,4(sp)
   98290:	df000017 	ldw	fp,0(sp)
   98294:	dec00204 	addi	sp,sp,8
   98298:	f800283a 	ret

0009829c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   9829c:	defff704 	addi	sp,sp,-36
   982a0:	dfc00815 	stw	ra,32(sp)
   982a4:	df000715 	stw	fp,28(sp)
   982a8:	dc000615 	stw	r16,24(sp)
   982ac:	df000604 	addi	fp,sp,24
   982b0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   982b4:	00bffa04 	movi	r2,-24
   982b8:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   982bc:	008002b4 	movhi	r2,10
   982c0:	10b3bd04 	addi	r2,r2,-12556
   982c4:	10800017 	ldw	r2,0(r2)
   982c8:	e0bffa15 	stw	r2,-24(fp)
   982cc:	e03ffb0d 	sth	zero,-20(fp)
   982d0:	e17ffb0b 	ldhu	r5,-20(fp)
   982d4:	e1bffe04 	addi	r6,fp,-8
   982d8:	e13ffa17 	ldw	r4,-24(fp)
   982dc:	009340c0 	call	9340c <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   982e0:	e03ffd15 	stw	zero,-12(fp)
   982e4:	00002006 	br	98368 <alt_get_fd+0xcc>
  {
    if (!alt_fd_list[i].dev)
   982e8:	e13ffd17 	ldw	r4,-12(fp)
   982ec:	040002b4 	movhi	r16,10
   982f0:	84283b04 	addi	r16,r16,-24340
   982f4:	01400304 	movi	r5,12
   982f8:	0082b040 	call	82b04 <__mulsi3>
   982fc:	1405883a 	add	r2,r2,r16
   98300:	10800017 	ldw	r2,0(r2)
   98304:	1004c03a 	cmpne	r2,r2,zero
   98308:	1000141e 	bne	r2,zero,9835c <alt_get_fd+0xc0>
    {
      alt_fd_list[i].dev = dev;
   9830c:	e13ffd17 	ldw	r4,-12(fp)
   98310:	040002b4 	movhi	r16,10
   98314:	84283b04 	addi	r16,r16,-24340
   98318:	01400304 	movi	r5,12
   9831c:	0082b040 	call	82b04 <__mulsi3>
   98320:	1407883a 	add	r3,r2,r16
   98324:	e0bfff17 	ldw	r2,-4(fp)
   98328:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   9832c:	008002b4 	movhi	r2,10
   98330:	10accc04 	addi	r2,r2,-19664
   98334:	10c00017 	ldw	r3,0(r2)
   98338:	e0bffd17 	ldw	r2,-12(fp)
   9833c:	1880040e 	bge	r3,r2,98350 <alt_get_fd+0xb4>
      {
        alt_max_fd = i;
   98340:	00c002b4 	movhi	r3,10
   98344:	18eccc04 	addi	r3,r3,-19664
   98348:	e0bffd17 	ldw	r2,-12(fp)
   9834c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   98350:	e0bffd17 	ldw	r2,-12(fp)
   98354:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   98358:	00000606 	br	98374 <alt_get_fd+0xd8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   9835c:	e0bffd17 	ldw	r2,-12(fp)
   98360:	10800044 	addi	r2,r2,1
   98364:	e0bffd15 	stw	r2,-12(fp)
   98368:	e0bffd17 	ldw	r2,-12(fp)
   9836c:	10800810 	cmplti	r2,r2,32
   98370:	103fdd1e 	bne	r2,zero,982e8 <alt_get_fd+0x4c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   98374:	008002b4 	movhi	r2,10
   98378:	10b3bd04 	addi	r2,r2,-12556
   9837c:	11000017 	ldw	r4,0(r2)
   98380:	00938040 	call	93804 <OSSemPost>

  return rc;
   98384:	e0bffc17 	ldw	r2,-16(fp)
}
   98388:	e037883a 	mov	sp,fp
   9838c:	dfc00217 	ldw	ra,8(sp)
   98390:	df000117 	ldw	fp,4(sp)
   98394:	dc000017 	ldw	r16,0(sp)
   98398:	dec00304 	addi	sp,sp,12
   9839c:	f800283a 	ret

000983a0 <atexit>:
   983a0:	200b883a 	mov	r5,r4
   983a4:	000d883a 	mov	r6,zero
   983a8:	0009883a 	mov	r4,zero
   983ac:	000f883a 	mov	r7,zero
   983b0:	00987981 	jmpi	98798 <__register_exitproc>

000983b4 <exit>:
   983b4:	defffe04 	addi	sp,sp,-8
   983b8:	000b883a 	mov	r5,zero
   983bc:	dc000015 	stw	r16,0(sp)
   983c0:	dfc00115 	stw	ra,4(sp)
   983c4:	2021883a 	mov	r16,r4
   983c8:	00988d00 	call	988d0 <__call_exitprocs>
   983cc:	008002b4 	movhi	r2,10
   983d0:	10acc304 	addi	r2,r2,-19700
   983d4:	11000017 	ldw	r4,0(r2)
   983d8:	20800f17 	ldw	r2,60(r4)
   983dc:	10000126 	beq	r2,zero,983e4 <exit+0x30>
   983e0:	103ee83a 	callr	r2
   983e4:	8009883a 	mov	r4,r16
   983e8:	0098ac00 	call	98ac0 <_exit>

000983ec <memcmp>:
   983ec:	00c000c4 	movi	r3,3
   983f0:	1980032e 	bgeu	r3,r6,98400 <memcmp+0x14>
   983f4:	2144b03a 	or	r2,r4,r5
   983f8:	10c4703a 	and	r2,r2,r3
   983fc:	10000f26 	beq	r2,zero,9843c <memcmp+0x50>
   98400:	31ffffc4 	addi	r7,r6,-1
   98404:	3000061e 	bne	r6,zero,98420 <memcmp+0x34>
   98408:	00000a06 	br	98434 <memcmp+0x48>
   9840c:	39ffffc4 	addi	r7,r7,-1
   98410:	00bfffc4 	movi	r2,-1
   98414:	21000044 	addi	r4,r4,1
   98418:	29400044 	addi	r5,r5,1
   9841c:	38800526 	beq	r7,r2,98434 <memcmp+0x48>
   98420:	20c00003 	ldbu	r3,0(r4)
   98424:	28800003 	ldbu	r2,0(r5)
   98428:	18bff826 	beq	r3,r2,9840c <memcmp+0x20>
   9842c:	1885c83a 	sub	r2,r3,r2
   98430:	f800283a 	ret
   98434:	0005883a 	mov	r2,zero
   98438:	f800283a 	ret
   9843c:	180f883a 	mov	r7,r3
   98440:	20c00017 	ldw	r3,0(r4)
   98444:	28800017 	ldw	r2,0(r5)
   98448:	18bfed1e 	bne	r3,r2,98400 <memcmp+0x14>
   9844c:	31bfff04 	addi	r6,r6,-4
   98450:	21000104 	addi	r4,r4,4
   98454:	29400104 	addi	r5,r5,4
   98458:	39bff936 	bltu	r7,r6,98440 <memcmp+0x54>
   9845c:	003fe806 	br	98400 <memcmp+0x14>

00098460 <putc>:
   98460:	defffc04 	addi	sp,sp,-16
   98464:	dc800215 	stw	r18,8(sp)
   98468:	048002b4 	movhi	r18,10
   9846c:	94acc204 	addi	r18,r18,-19704
   98470:	90c00017 	ldw	r3,0(r18)
   98474:	dc400115 	stw	r17,4(sp)
   98478:	dc000015 	stw	r16,0(sp)
   9847c:	dfc00315 	stw	ra,12(sp)
   98480:	2023883a 	mov	r17,r4
   98484:	2821883a 	mov	r16,r5
   98488:	18000226 	beq	r3,zero,98494 <putc+0x34>
   9848c:	18800e17 	ldw	r2,56(r3)
   98490:	10001126 	beq	r2,zero,984d8 <putc+0x78>
   98494:	80800217 	ldw	r2,8(r16)
   98498:	10ffffc4 	addi	r3,r2,-1
   9849c:	80c00215 	stw	r3,8(r16)
   984a0:	18001316 	blt	r3,zero,984f0 <putc+0x90>
   984a4:	80800017 	ldw	r2,0(r16)
   984a8:	14400005 	stb	r17,0(r2)
   984ac:	80c00017 	ldw	r3,0(r16)
   984b0:	18800044 	addi	r2,r3,1
   984b4:	18c00003 	ldbu	r3,0(r3)
   984b8:	80800015 	stw	r2,0(r16)
   984bc:	1805883a 	mov	r2,r3
   984c0:	dfc00317 	ldw	ra,12(sp)
   984c4:	dc800217 	ldw	r18,8(sp)
   984c8:	dc400117 	ldw	r17,4(sp)
   984cc:	dc000017 	ldw	r16,0(sp)
   984d0:	dec00404 	addi	sp,sp,16
   984d4:	f800283a 	ret
   984d8:	1809883a 	mov	r4,r3
   984dc:	00869c80 	call	869c8 <__sinit>
   984e0:	80800217 	ldw	r2,8(r16)
   984e4:	10ffffc4 	addi	r3,r2,-1
   984e8:	80c00215 	stw	r3,8(r16)
   984ec:	183fed0e 	bge	r3,zero,984a4 <putc+0x44>
   984f0:	80800617 	ldw	r2,24(r16)
   984f4:	18800f16 	blt	r3,r2,98534 <putc+0xd4>
   984f8:	80800017 	ldw	r2,0(r16)
   984fc:	14400005 	stb	r17,0(r2)
   98500:	81000017 	ldw	r4,0(r16)
   98504:	00800284 	movi	r2,10
   98508:	20c00003 	ldbu	r3,0(r4)
   9850c:	18801226 	beq	r3,r2,98558 <putc+0xf8>
   98510:	20800044 	addi	r2,r4,1
   98514:	80800015 	stw	r2,0(r16)
   98518:	1805883a 	mov	r2,r3
   9851c:	dfc00317 	ldw	ra,12(sp)
   98520:	dc800217 	ldw	r18,8(sp)
   98524:	dc400117 	ldw	r17,4(sp)
   98528:	dc000017 	ldw	r16,0(sp)
   9852c:	dec00404 	addi	sp,sp,16
   98530:	f800283a 	ret
   98534:	91000017 	ldw	r4,0(r18)
   98538:	880b883a 	mov	r5,r17
   9853c:	800d883a 	mov	r6,r16
   98540:	dfc00317 	ldw	ra,12(sp)
   98544:	dc800217 	ldw	r18,8(sp)
   98548:	dc400117 	ldw	r17,4(sp)
   9854c:	dc000017 	ldw	r16,0(sp)
   98550:	dec00404 	addi	sp,sp,16
   98554:	009864c1 	jmpi	9864c <__swbuf_r>
   98558:	91000017 	ldw	r4,0(r18)
   9855c:	180b883a 	mov	r5,r3
   98560:	003ff606 	br	9853c <putc+0xdc>

00098564 <_putc_r>:
   98564:	defffc04 	addi	sp,sp,-16
   98568:	dc400215 	stw	r17,8(sp)
   9856c:	dc000115 	stw	r16,4(sp)
   98570:	dfc00315 	stw	ra,12(sp)
   98574:	2021883a 	mov	r16,r4
   98578:	2823883a 	mov	r17,r5
   9857c:	20000226 	beq	r4,zero,98588 <_putc_r+0x24>
   98580:	20800e17 	ldw	r2,56(r4)
   98584:	10001026 	beq	r2,zero,985c8 <_putc_r+0x64>
   98588:	30800217 	ldw	r2,8(r6)
   9858c:	10ffffc4 	addi	r3,r2,-1
   98590:	30c00215 	stw	r3,8(r6)
   98594:	18001316 	blt	r3,zero,985e4 <_putc_r+0x80>
   98598:	30800017 	ldw	r2,0(r6)
   9859c:	14400005 	stb	r17,0(r2)
   985a0:	30c00017 	ldw	r3,0(r6)
   985a4:	18800044 	addi	r2,r3,1
   985a8:	18c00003 	ldbu	r3,0(r3)
   985ac:	30800015 	stw	r2,0(r6)
   985b0:	1805883a 	mov	r2,r3
   985b4:	dfc00317 	ldw	ra,12(sp)
   985b8:	dc400217 	ldw	r17,8(sp)
   985bc:	dc000117 	ldw	r16,4(sp)
   985c0:	dec00404 	addi	sp,sp,16
   985c4:	f800283a 	ret
   985c8:	d9800015 	stw	r6,0(sp)
   985cc:	00869c80 	call	869c8 <__sinit>
   985d0:	d9800017 	ldw	r6,0(sp)
   985d4:	30800217 	ldw	r2,8(r6)
   985d8:	10ffffc4 	addi	r3,r2,-1
   985dc:	30c00215 	stw	r3,8(r6)
   985e0:	183fed0e 	bge	r3,zero,98598 <_putc_r+0x34>
   985e4:	30800617 	ldw	r2,24(r6)
   985e8:	18800e16 	blt	r3,r2,98624 <_putc_r+0xc0>
   985ec:	30800017 	ldw	r2,0(r6)
   985f0:	14400005 	stb	r17,0(r2)
   985f4:	31000017 	ldw	r4,0(r6)
   985f8:	00800284 	movi	r2,10
   985fc:	20c00003 	ldbu	r3,0(r4)
   98600:	18800f26 	beq	r3,r2,98640 <_putc_r+0xdc>
   98604:	20800044 	addi	r2,r4,1
   98608:	30800015 	stw	r2,0(r6)
   9860c:	1805883a 	mov	r2,r3
   98610:	dfc00317 	ldw	ra,12(sp)
   98614:	dc400217 	ldw	r17,8(sp)
   98618:	dc000117 	ldw	r16,4(sp)
   9861c:	dec00404 	addi	sp,sp,16
   98620:	f800283a 	ret
   98624:	8009883a 	mov	r4,r16
   98628:	880b883a 	mov	r5,r17
   9862c:	dfc00317 	ldw	ra,12(sp)
   98630:	dc400217 	ldw	r17,8(sp)
   98634:	dc000117 	ldw	r16,4(sp)
   98638:	dec00404 	addi	sp,sp,16
   9863c:	009864c1 	jmpi	9864c <__swbuf_r>
   98640:	8009883a 	mov	r4,r16
   98644:	180b883a 	mov	r5,r3
   98648:	003ff806 	br	9862c <_putc_r+0xc8>

0009864c <__swbuf_r>:
   9864c:	defffc04 	addi	sp,sp,-16
   98650:	dc400215 	stw	r17,8(sp)
   98654:	dc000115 	stw	r16,4(sp)
   98658:	dfc00315 	stw	ra,12(sp)
   9865c:	2023883a 	mov	r17,r4
   98660:	2821883a 	mov	r16,r5
   98664:	20000226 	beq	r4,zero,98670 <__swbuf_r+0x24>
   98668:	20800e17 	ldw	r2,56(r4)
   9866c:	10002f26 	beq	r2,zero,9872c <__swbuf_r+0xe0>
   98670:	3080030b 	ldhu	r2,12(r6)
   98674:	30c00617 	ldw	r3,24(r6)
   98678:	1080020c 	andi	r2,r2,8
   9867c:	30c00215 	stw	r3,8(r6)
   98680:	10002226 	beq	r2,zero,9870c <__swbuf_r+0xc0>
   98684:	30c00417 	ldw	r3,16(r6)
   98688:	18002026 	beq	r3,zero,9870c <__swbuf_r+0xc0>
   9868c:	31000017 	ldw	r4,0(r6)
   98690:	30800517 	ldw	r2,20(r6)
   98694:	20c7c83a 	sub	r3,r4,r3
   98698:	18802f0e 	bge	r3,r2,98758 <__swbuf_r+0x10c>
   9869c:	19400044 	addi	r5,r3,1
   986a0:	30800217 	ldw	r2,8(r6)
   986a4:	84003fcc 	andi	r16,r16,255
   986a8:	20c00044 	addi	r3,r4,1
   986ac:	10bfffc4 	addi	r2,r2,-1
   986b0:	30800215 	stw	r2,8(r6)
   986b4:	24000005 	stb	r16,0(r4)
   986b8:	30800517 	ldw	r2,20(r6)
   986bc:	30c00015 	stw	r3,0(r6)
   986c0:	11400c26 	beq	r2,r5,986f4 <__swbuf_r+0xa8>
   986c4:	3080030b 	ldhu	r2,12(r6)
   986c8:	1080004c 	andi	r2,r2,1
   986cc:	1005003a 	cmpeq	r2,r2,zero
   986d0:	10000626 	beq	r2,zero,986ec <__swbuf_r+0xa0>
   986d4:	8005883a 	mov	r2,r16
   986d8:	dfc00317 	ldw	ra,12(sp)
   986dc:	dc400217 	ldw	r17,8(sp)
   986e0:	dc000117 	ldw	r16,4(sp)
   986e4:	dec00404 	addi	sp,sp,16
   986e8:	f800283a 	ret
   986ec:	00800284 	movi	r2,10
   986f0:	80bff81e 	bne	r16,r2,986d4 <__swbuf_r+0x88>
   986f4:	8809883a 	mov	r4,r17
   986f8:	300b883a 	mov	r5,r6
   986fc:	00867300 	call	86730 <_fflush_r>
   98700:	103ff426 	beq	r2,zero,986d4 <__swbuf_r+0x88>
   98704:	043fffc4 	movi	r16,-1
   98708:	003ff206 	br	986d4 <__swbuf_r+0x88>
   9870c:	300b883a 	mov	r5,r6
   98710:	8809883a 	mov	r4,r17
   98714:	d9800015 	stw	r6,0(sp)
   98718:	0084dfc0 	call	84dfc <__swsetup_r>
   9871c:	d9800017 	ldw	r6,0(sp)
   98720:	1000061e 	bne	r2,zero,9873c <__swbuf_r+0xf0>
   98724:	30c00417 	ldw	r3,16(r6)
   98728:	003fd806 	br	9868c <__swbuf_r+0x40>
   9872c:	d9800015 	stw	r6,0(sp)
   98730:	00869c80 	call	869c8 <__sinit>
   98734:	d9800017 	ldw	r6,0(sp)
   98738:	003fcd06 	br	98670 <__swbuf_r+0x24>
   9873c:	3080030b 	ldhu	r2,12(r6)
   98740:	00c00244 	movi	r3,9
   98744:	043fffc4 	movi	r16,-1
   98748:	10801014 	ori	r2,r2,64
   9874c:	3080030d 	sth	r2,12(r6)
   98750:	88c00015 	stw	r3,0(r17)
   98754:	003fdf06 	br	986d4 <__swbuf_r+0x88>
   98758:	300b883a 	mov	r5,r6
   9875c:	8809883a 	mov	r4,r17
   98760:	d9800015 	stw	r6,0(sp)
   98764:	00867300 	call	86730 <_fflush_r>
   98768:	d9800017 	ldw	r6,0(sp)
   9876c:	103fe51e 	bne	r2,zero,98704 <__swbuf_r+0xb8>
   98770:	31000017 	ldw	r4,0(r6)
   98774:	01400044 	movi	r5,1
   98778:	003fc906 	br	986a0 <__swbuf_r+0x54>

0009877c <__swbuf>:
   9877c:	018002b4 	movhi	r6,10
   98780:	31acc204 	addi	r6,r6,-19704
   98784:	2007883a 	mov	r3,r4
   98788:	31000017 	ldw	r4,0(r6)
   9878c:	280d883a 	mov	r6,r5
   98790:	180b883a 	mov	r5,r3
   98794:	009864c1 	jmpi	9864c <__swbuf_r>

00098798 <__register_exitproc>:
   98798:	defffa04 	addi	sp,sp,-24
   9879c:	008002b4 	movhi	r2,10
   987a0:	10acc304 	addi	r2,r2,-19700
   987a4:	dc000015 	stw	r16,0(sp)
   987a8:	14000017 	ldw	r16,0(r2)
   987ac:	dd000415 	stw	r20,16(sp)
   987b0:	2829883a 	mov	r20,r5
   987b4:	81405217 	ldw	r5,328(r16)
   987b8:	dcc00315 	stw	r19,12(sp)
   987bc:	dc800215 	stw	r18,8(sp)
   987c0:	dc400115 	stw	r17,4(sp)
   987c4:	dfc00515 	stw	ra,20(sp)
   987c8:	2023883a 	mov	r17,r4
   987cc:	3027883a 	mov	r19,r6
   987d0:	3825883a 	mov	r18,r7
   987d4:	28002526 	beq	r5,zero,9886c <__register_exitproc+0xd4>
   987d8:	29000117 	ldw	r4,4(r5)
   987dc:	008007c4 	movi	r2,31
   987e0:	11002716 	blt	r2,r4,98880 <__register_exitproc+0xe8>
   987e4:	8800101e 	bne	r17,zero,98828 <__register_exitproc+0x90>
   987e8:	2105883a 	add	r2,r4,r4
   987ec:	1085883a 	add	r2,r2,r2
   987f0:	20c00044 	addi	r3,r4,1
   987f4:	1145883a 	add	r2,r2,r5
   987f8:	0009883a 	mov	r4,zero
   987fc:	15000215 	stw	r20,8(r2)
   98800:	28c00115 	stw	r3,4(r5)
   98804:	2005883a 	mov	r2,r4
   98808:	dfc00517 	ldw	ra,20(sp)
   9880c:	dd000417 	ldw	r20,16(sp)
   98810:	dcc00317 	ldw	r19,12(sp)
   98814:	dc800217 	ldw	r18,8(sp)
   98818:	dc400117 	ldw	r17,4(sp)
   9881c:	dc000017 	ldw	r16,0(sp)
   98820:	dec00604 	addi	sp,sp,24
   98824:	f800283a 	ret
   98828:	29802204 	addi	r6,r5,136
   9882c:	00800044 	movi	r2,1
   98830:	110e983a 	sll	r7,r2,r4
   98834:	30c04017 	ldw	r3,256(r6)
   98838:	2105883a 	add	r2,r4,r4
   9883c:	1085883a 	add	r2,r2,r2
   98840:	1185883a 	add	r2,r2,r6
   98844:	19c6b03a 	or	r3,r3,r7
   98848:	14802015 	stw	r18,128(r2)
   9884c:	14c00015 	stw	r19,0(r2)
   98850:	00800084 	movi	r2,2
   98854:	30c04015 	stw	r3,256(r6)
   98858:	88bfe31e 	bne	r17,r2,987e8 <__register_exitproc+0x50>
   9885c:	30804117 	ldw	r2,260(r6)
   98860:	11c4b03a 	or	r2,r2,r7
   98864:	30804115 	stw	r2,260(r6)
   98868:	003fdf06 	br	987e8 <__register_exitproc+0x50>
   9886c:	008002f4 	movhi	r2,11
   98870:	10b13a04 	addi	r2,r2,-15128
   98874:	100b883a 	mov	r5,r2
   98878:	80805215 	stw	r2,328(r16)
   9887c:	003fd606 	br	987d8 <__register_exitproc+0x40>
   98880:	00800034 	movhi	r2,0
   98884:	10800004 	addi	r2,r2,0
   98888:	1000021e 	bne	r2,zero,98894 <__register_exitproc+0xfc>
   9888c:	013fffc4 	movi	r4,-1
   98890:	003fdc06 	br	98804 <__register_exitproc+0x6c>
   98894:	01006404 	movi	r4,400
   98898:	103ee83a 	callr	r2
   9889c:	1007883a 	mov	r3,r2
   988a0:	103ffa26 	beq	r2,zero,9888c <__register_exitproc+0xf4>
   988a4:	80805217 	ldw	r2,328(r16)
   988a8:	180b883a 	mov	r5,r3
   988ac:	18000115 	stw	zero,4(r3)
   988b0:	18800015 	stw	r2,0(r3)
   988b4:	80c05215 	stw	r3,328(r16)
   988b8:	18006215 	stw	zero,392(r3)
   988bc:	18006315 	stw	zero,396(r3)
   988c0:	0009883a 	mov	r4,zero
   988c4:	883fc826 	beq	r17,zero,987e8 <__register_exitproc+0x50>
   988c8:	003fd706 	br	98828 <__register_exitproc+0x90>

000988cc <register_fini>:
   988cc:	f800283a 	ret

000988d0 <__call_exitprocs>:
   988d0:	008002b4 	movhi	r2,10
   988d4:	10acc304 	addi	r2,r2,-19700
   988d8:	10800017 	ldw	r2,0(r2)
   988dc:	defff304 	addi	sp,sp,-52
   988e0:	df000b15 	stw	fp,44(sp)
   988e4:	d8800115 	stw	r2,4(sp)
   988e8:	00800034 	movhi	r2,0
   988ec:	10800004 	addi	r2,r2,0
   988f0:	1005003a 	cmpeq	r2,r2,zero
   988f4:	d8800215 	stw	r2,8(sp)
   988f8:	d8800117 	ldw	r2,4(sp)
   988fc:	dd400815 	stw	r21,32(sp)
   98900:	dd000715 	stw	r20,28(sp)
   98904:	10805204 	addi	r2,r2,328
   98908:	dfc00c15 	stw	ra,48(sp)
   9890c:	ddc00a15 	stw	r23,40(sp)
   98910:	dd800915 	stw	r22,36(sp)
   98914:	dcc00615 	stw	r19,24(sp)
   98918:	dc800515 	stw	r18,20(sp)
   9891c:	dc400415 	stw	r17,16(sp)
   98920:	dc000315 	stw	r16,12(sp)
   98924:	282b883a 	mov	r21,r5
   98928:	2039883a 	mov	fp,r4
   9892c:	d8800015 	stw	r2,0(sp)
   98930:	2829003a 	cmpeq	r20,r5,zero
   98934:	d8800117 	ldw	r2,4(sp)
   98938:	14405217 	ldw	r17,328(r2)
   9893c:	88001026 	beq	r17,zero,98980 <__call_exitprocs+0xb0>
   98940:	ddc00017 	ldw	r23,0(sp)
   98944:	88800117 	ldw	r2,4(r17)
   98948:	8c802204 	addi	r18,r17,136
   9894c:	143fffc4 	addi	r16,r2,-1
   98950:	80000916 	blt	r16,zero,98978 <__call_exitprocs+0xa8>
   98954:	05bfffc4 	movi	r22,-1
   98958:	a000151e 	bne	r20,zero,989b0 <__call_exitprocs+0xe0>
   9895c:	8409883a 	add	r4,r16,r16
   98960:	2105883a 	add	r2,r4,r4
   98964:	1485883a 	add	r2,r2,r18
   98968:	10c02017 	ldw	r3,128(r2)
   9896c:	a8c01126 	beq	r21,r3,989b4 <__call_exitprocs+0xe4>
   98970:	843fffc4 	addi	r16,r16,-1
   98974:	85bff81e 	bne	r16,r22,98958 <__call_exitprocs+0x88>
   98978:	d8800217 	ldw	r2,8(sp)
   9897c:	10003126 	beq	r2,zero,98a44 <__call_exitprocs+0x174>
   98980:	dfc00c17 	ldw	ra,48(sp)
   98984:	df000b17 	ldw	fp,44(sp)
   98988:	ddc00a17 	ldw	r23,40(sp)
   9898c:	dd800917 	ldw	r22,36(sp)
   98990:	dd400817 	ldw	r21,32(sp)
   98994:	dd000717 	ldw	r20,28(sp)
   98998:	dcc00617 	ldw	r19,24(sp)
   9899c:	dc800517 	ldw	r18,20(sp)
   989a0:	dc400417 	ldw	r17,16(sp)
   989a4:	dc000317 	ldw	r16,12(sp)
   989a8:	dec00d04 	addi	sp,sp,52
   989ac:	f800283a 	ret
   989b0:	8409883a 	add	r4,r16,r16
   989b4:	88c00117 	ldw	r3,4(r17)
   989b8:	2105883a 	add	r2,r4,r4
   989bc:	1445883a 	add	r2,r2,r17
   989c0:	18ffffc4 	addi	r3,r3,-1
   989c4:	11800217 	ldw	r6,8(r2)
   989c8:	1c001526 	beq	r3,r16,98a20 <__call_exitprocs+0x150>
   989cc:	10000215 	stw	zero,8(r2)
   989d0:	303fe726 	beq	r6,zero,98970 <__call_exitprocs+0xa0>
   989d4:	00c00044 	movi	r3,1
   989d8:	1c06983a 	sll	r3,r3,r16
   989dc:	90804017 	ldw	r2,256(r18)
   989e0:	8cc00117 	ldw	r19,4(r17)
   989e4:	1884703a 	and	r2,r3,r2
   989e8:	10001426 	beq	r2,zero,98a3c <__call_exitprocs+0x16c>
   989ec:	90804117 	ldw	r2,260(r18)
   989f0:	1884703a 	and	r2,r3,r2
   989f4:	10000c1e 	bne	r2,zero,98a28 <__call_exitprocs+0x158>
   989f8:	2105883a 	add	r2,r4,r4
   989fc:	1485883a 	add	r2,r2,r18
   98a00:	11400017 	ldw	r5,0(r2)
   98a04:	e009883a 	mov	r4,fp
   98a08:	303ee83a 	callr	r6
   98a0c:	88800117 	ldw	r2,4(r17)
   98a10:	98bfc81e 	bne	r19,r2,98934 <__call_exitprocs+0x64>
   98a14:	b8800017 	ldw	r2,0(r23)
   98a18:	147fd526 	beq	r2,r17,98970 <__call_exitprocs+0xa0>
   98a1c:	003fc506 	br	98934 <__call_exitprocs+0x64>
   98a20:	8c000115 	stw	r16,4(r17)
   98a24:	003fea06 	br	989d0 <__call_exitprocs+0x100>
   98a28:	2105883a 	add	r2,r4,r4
   98a2c:	1485883a 	add	r2,r2,r18
   98a30:	11000017 	ldw	r4,0(r2)
   98a34:	303ee83a 	callr	r6
   98a38:	003ff406 	br	98a0c <__call_exitprocs+0x13c>
   98a3c:	303ee83a 	callr	r6
   98a40:	003ff206 	br	98a0c <__call_exitprocs+0x13c>
   98a44:	88800117 	ldw	r2,4(r17)
   98a48:	1000081e 	bne	r2,zero,98a6c <__call_exitprocs+0x19c>
   98a4c:	89000017 	ldw	r4,0(r17)
   98a50:	20000726 	beq	r4,zero,98a70 <__call_exitprocs+0x1a0>
   98a54:	b9000015 	stw	r4,0(r23)
   98a58:	8809883a 	mov	r4,r17
   98a5c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
   98a60:	bc400017 	ldw	r17,0(r23)
   98a64:	883fb71e 	bne	r17,zero,98944 <__call_exitprocs+0x74>
   98a68:	003fc506 	br	98980 <__call_exitprocs+0xb0>
   98a6c:	89000017 	ldw	r4,0(r17)
   98a70:	882f883a 	mov	r23,r17
   98a74:	2023883a 	mov	r17,r4
   98a78:	883fb21e 	bne	r17,zero,98944 <__call_exitprocs+0x74>
   98a7c:	003fc006 	br	98980 <__call_exitprocs+0xb0>

00098a80 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   98a80:	defffd04 	addi	sp,sp,-12
   98a84:	df000215 	stw	fp,8(sp)
   98a88:	df000204 	addi	fp,sp,8
   98a8c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   98a90:	e0bfff17 	ldw	r2,-4(fp)
   98a94:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   98a98:	e0bffe17 	ldw	r2,-8(fp)
   98a9c:	1005003a 	cmpeq	r2,r2,zero
   98aa0:	1000021e 	bne	r2,zero,98aac <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   98aa4:	002af070 	cmpltui	zero,zero,43969
   98aa8:	00000106 	br	98ab0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   98aac:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   98ab0:	e037883a 	mov	sp,fp
   98ab4:	df000017 	ldw	fp,0(sp)
   98ab8:	dec00104 	addi	sp,sp,4
   98abc:	f800283a 	ret

00098ac0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   98ac0:	defffd04 	addi	sp,sp,-12
   98ac4:	dfc00215 	stw	ra,8(sp)
   98ac8:	df000115 	stw	fp,4(sp)
   98acc:	df000104 	addi	fp,sp,4
   98ad0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   98ad4:	008002b4 	movhi	r2,10
   98ad8:	10b3c644 	addi	r2,r2,-12519
   98adc:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   98ae0:	e13fff17 	ldw	r4,-4(fp)
   98ae4:	0098a800 	call	98a80 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   98ae8:	003fff06 	br	98ae8 <_exit+0x28>
   98aec:	00000010 	cmplti	zero,zero,0
   98af0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
   98af4:	00527a01 	jmpi	527a0 <OSCtxSw_SWITCH_PC+0x52760>
   98af8:	011f7c01 	jmpi	11f7c0 <__alt_data_end+0x1f7c0>
   98afc:	001b0c0b 	ldhu	zero,27696(zero)
   98b00:	00000028 	cmpgeui	zero,zero,0
   98b04:	00000018 	cmpnei	zero,zero,0
   98b08:	0008a278 	rdprs	zero,zero,8841
   98b0c:	0000066c 	andhi	zero,zero,25
   98b10:	3c0e4400 	call	3c0e440 <__alt_data_end+0x3b0e440>
   98b14:	910a9074 	orhi	r4,r18,10817
   98b18:	94089209 	0x94089209
   98b1c:	97049606 	br	99d78 <__malloc_av_+0xbc>
   98b20:	93019f03 	ldbu	r12,1660(r18)
   98b24:	9c059507 	ldb	r16,5716(r19)
   98b28:	00000002 	0x2
   98b2c:	00000028 	cmpgeui	zero,zero,0
   98b30:	00000044 	movi	zero,1
   98b34:	0008a8e4 	muli	zero,zero,8867
   98b38:	00000660 	cmpeqi	zero,zero,25
   98b3c:	400e4400 	call	400e440 <__alt_data_end+0x3f0e440>
   98b40:	92099170 	cmpltui	r8,r18,9797
   98b44:	96069408 	cmpgei	et,r18,6736
   98b48:	9c039704 	addi	r16,r19,3676
   98b4c:	90019f02 	0x90019f02
   98b50:	9507930a 	0x9507930a
   98b54:	00000005 	stb	zero,0(zero)
   98b58:	000988cc 	andi	zero,zero,9763
