
experiment3.elf:     file format elf32-littlenios2
experiment3.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00012690 memsz 0x00012690 flags r-x
    LOAD off    0x000136b0 vaddr 0x000926b0 paddr 0x00094144 align 2**12
         filesz 0x00001a94 memsz 0x00001a94 flags rw-
    LOAD off    0x00015bd8 vaddr 0x00095bd8 paddr 0x00095bd8 align 2**12
         filesz 0x00000000 memsz 0x00038c8c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011e78  000801b4  000801b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000684  0009202c  0009202c  0001302c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a94  000926b0  00094144  000136b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00038c8c  00095bd8  00095bd8  00015bd8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00015144  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d18  00000000  00000000  00015168  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001a39  00000000  00000000  00015e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002629b  00000000  00000000  000178b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007f96  00000000  00000000  0003db54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000166a9  00000000  00000000  00045aea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001dd8  00000000  00000000  0005c194  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000024c9  00000000  00000000  0005df6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c608  00000000  00000000  00060435  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0006ca40  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  0006ca80  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00070dfb  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00070dfe  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00070e03  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00070e04  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00070e05  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00070e10  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00070e1b  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00070e26  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000036  00000000  00000000  00070e31  2**0
                  CONTENTS, READONLY
 26 .jdi          00004821  00000000  00000000  00070e67  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0004ab61  00000000  00000000  00075688  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801b4 l    d  .text	00000000 .text
0009202c l    d  .rodata	00000000 .rodata
000926b0 l    d  .rwdata	00000000 .rwdata
00095bd8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000801ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 LCD_Camera_TouchPanel.c
000940f8 l     O .rwdata	00000004 new_config.2663
00095bd8 l     O .bss	00000004 config.2662
000940fc l     O .rwdata	00000004 run.2661
00094100 l     O .rwdata	00000004 exposure.2660
00000000 l    df *ABS*	00000000 PB_button.c
00000000 l    df *ABS*	00000000 SD_card_controller.c
00000000 l    df *ABS*	00000000 experiment3.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00085830 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00085c28 l     F .text	00000058 __sprint_r
000923ce l     O .rodata	00000010 blanks.3452
000923be l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00087ca4 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000896cc l     F .text	00000058 std
000897d8 l     F .text	00000008 __fp_lock
000897e0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000926b0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
00094110 l     O .rwdata	00000004 charset
00092404 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0009254c l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0008db8c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
0008f5cc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0008f62c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0008f730 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0008fa14 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0008faf4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008fc54 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0008fe84 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00094138 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0009013c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0009306c l     O .rwdata	00001060 jtag_uart_0
000940cc l     O .rwdata	0000002c SD_CARD_0
00090220 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00090460 l     F .text	00000228 altera_avalon_jtag_uart_irq
00090688 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00090f28 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00091338 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00091488 l     F .text	000000f8 alt_file_locked
0009170c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00091da8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00091f5c l     F .text	00000040 alt_sim_halt
00095be4 g     O .bss	00000004 aux_status_register
0008b4bc g     F .text	00000094 _mprec_log10
0008b5a8 g     F .text	00000088 __any_on
0008cd60 g     F .text	00000070 _isatty_r
00092524 g     O .rodata	00000028 __mprec_tinytens
0008fcb4 g     F .text	0000006c alt_main
00085a2c g     F .text	000000a0 _puts_r
000ce5d4 g     O .bss	00000100 alt_irq
0008cdd0 g     F .text	00000078 _lseek_r
00094144 g       *ABS*	00000000 __flash_rwdata_start
0008e6ac g     F .text	00000088 __eqdf2
00080e78 g     F .text	00000158 Check_for_Master_Boot_Record
000ce864 g       *ABS*	00000000 __alt_heap_start
000859b4 g     F .text	00000044 printf
0008c818 g     F .text	00000068 __sseek
00089734 g     F .text	000000a4 __sinit
0008a440 g     F .text	00000084 _setlocale_r
00089834 g     F .text	0000009c __sfmoreglue
0008fd40 g     F .text	00000020 __malloc_unlock
00105400 g       *ABS*	00000000 __alt_mem_Nios_LCD_Camera_Component_0_Camera
00095c00 g     O .bss	00000004 current_sector_modified
0008099c g     F .text	0000002c KEY3_Pressed
0008af38 g     F .text	000000e0 memmove
00089824 g     F .text	00000010 _cleanup
0008b630 g     F .text	000000bc _Balloc
00080bbc g     F .text	00000050 Save_Modified_Sector
00083ec4 g     F .text	00000090 sd_card_set_attributes
000835c8 g     F .text	0000004c sd_card_is_Present
0008e7bc g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000000c __reset
00095bfc g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
00080020 g       *ABS*	00000000 __flash_exceptions_start
0008ccec g     F .text	00000074 _fstat_r
00095c28 g     O .bss	00000004 errno
00095c34 g     O .bss	00000004 alt_argv
0009c0f8 g       *ABS*	00000000 _gp
00095bf4 g     O .bss	00000004 command_argument_register
00092eec g     O .rwdata	00000180 alt_fd_list
00082e5c g     F .text	0000011c find_first_empty_record_in_root_directory
00091930 g     F .text	00000094 alt_find_dev
0008ae98 g     F .text	000000a0 memcpy
00089818 g     F .text	0000000c _cleanup_r
0008e954 g     F .text	000000f8 __floatsidf
00091410 g     F .text	00000078 alt_io_redirect
0008e8cc g     F .text	00000088 __ltdf2
0009202c g       *ABS*	00000000 __DTOR_END__
00085acc g     F .text	00000014 puts
00082a8c g     F .text	00000194 find_first_empty_cluster
0008b40c g     F .text	000000b0 __ratio
000908a0 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000859f8 g     F .text	00000034 _printf_r
0008596c g     F .text	00000008 __udivsi3
0008f950 g     F .text	000000c4 isatty
00092434 g     O .rodata	000000c8 __mprec_tens
0008a41c g     F .text	00000008 __locale_charset
00095c1c g     O .bss	00000004 __malloc_top_pad
00095c6c g     O .bss	00012c00 B_vals
0009410c g     O .rwdata	00000004 __mb_cur_max
000801f0 g     F .text	00000110 LTC_Switch_Nios_Mode
00083614 g     F .text	0000008c sd_card_is_FAT16
0008a424 g     F .text	0000000c _localeconv_r
0008bd94 g     F .text	0000003c __i2b
00089e00 g     F .text	0000049c __sfvwrite_r
00081d68 g     F .text	000000c0 get_dir_divider_location
0008c7a0 g     F .text	00000070 _sbrk_r
00081a08 g     F .text	000000d0 filename_to_upper_case
00080fd0 g     F .text	000001c8 Read_File_Record_At_Offset
0008ce48 g     F .text	00000078 _read_r
00083fe0 g     F .text	0000037c sd_card_read
00092ab0 g     O .rwdata	0000000c __lc_ctype
0009412c g     O .rwdata	00000004 alt_max_fd
0008f170 g     F .text	00000138 __unpack_d
0008cbc8 g     F .text	00000110 _fclose_r
00082628 g     F .text	00000464 find_file_in_directory
00083f54 g     F .text	0000008c sd_card_get_attributes
00089698 g     F .text	00000034 fflush
00095c20 g     O .bss	00000004 __malloc_max_sbrked_mem
0008f790 g     F .text	000001c0 alt_irq_register
0008e01c g     F .text	00000074 __adddf3
00084c6c g     F .text	000001d8 bmp_function
00102000 g       *ABS*	00000000 __alt_mem_Nios_LCD_Camera_Component_0_Console
0008b2ec g     F .text	00000120 __b2d
0008d52c g     F .text	00000660 __umoddi3
0008fb60 g     F .text	000000f4 lseek
00094108 g     O .rwdata	00000004 _global_impure_ptr
00082114 g     F .text	00000514 get_home_directory_cluster_for_file
0008c13c g     F .text	000005f4 _realloc_r
000ce864 g       *ABS*	00000000 __bss_end
00091240 g     F .text	000000f8 alt_iic_isr_register
00091804 g     F .text	0000010c alt_tick
0008cec0 g     F .text	0000066c __udivdi3
00084b20 g     F .text	0000014c read_SD_int
000924fc g     O .rodata	00000028 __mprec_bigtens
0008c01c g     F .text	00000120 __s2b
0008eb24 g     F .text	00000194 __floatunsidf
0008b20c g     F .text	00000060 __mcmp
00095c04 g     O .bss	00000004 current_sector_index
00089800 g     F .text	00000018 __fp_lock_all
000911f8 g     F .text	00000048 alt_ic_irq_enabled
0009176c g     F .text	00000098 alt_alarm_stop
00080da0 g     F .text	000000d8 mark_cluster
00095c2c g     O .bss	00000004 alt_irq_active
000800ec g     F .exceptions	000000c8 alt_irq_handler
00092ec4 g     O .rwdata	00000028 alt_dev_null
00080970 g     F .text	0000002c KEY2_Pressed
00082f78 g     F .text	000001b8 convert_filename_to_name_extension
00090e58 g     F .text	0000001c alt_dcache_flush_all
0008b0d8 g     F .text	00000070 __hi0bits
00095be0 g     O .bss	00000004 is_sd_card_formated_as_FAT16
0008ea4c g     F .text	000000d8 __fixdfsi
00082c20 g     F .text	0000023c find_first_empty_record_in_a_subdirectory
00094144 g       *ABS*	00000000 __ram_rwdata_end
00094124 g     O .rwdata	00000008 alt_dev_list
00090018 g     F .text	00000124 write
000926b0 g       *ABS*	00000000 __ram_rodata_end
0008f658 g     F .text	000000d8 fstat
0008befc g     F .text	00000120 __pow5mult
00095c10 g     O .bss	00000004 __nlocale_changed
00085974 g     F .text	00000008 __umodsi3
000ce864 g       *ABS*	00000000 end
000903a0 g     F .text	000000c0 altera_avalon_jtag_uart_init
00092028 g       *ABS*	00000000 __CTOR_LIST__
00100000 g       *ABS*	00000000 __alt_stack_pointer
0008eddc g     F .text	00000080 __clzsi2
00090ac4 g     F .text	00000240 altera_avalon_jtag_uart_write
00089724 g     F .text	00000004 __sfp_lock_acquire
0008adb4 g     F .text	000000e4 memchr
00085c80 g     F .text	00001ec4 ___vfprintf_internal_r
00085b54 g     F .text	00000060 _sprintf_r
00089aec g     F .text	00000314 _free_r
00091dac g     F .text	000001b0 __call_exitprocs
000a886c g     O .bss	00012c00 G_vals
00095c14 g     O .bss	00000004 __mlocale_changed
00094118 g     O .rwdata	00000004 __malloc_sbrk_base
000801b4 g     F .text	0000003c _start
00095c3c g     O .bss	00000004 _alt_tick_rate
0008b9f4 g     F .text	0000014c __lshift
00095c40 g     O .bss	00000004 _alt_nticks
0008fd60 g     F .text	00000124 read
000901d0 g     F .text	00000050 alt_sys_init
00091c74 g     F .text	00000134 __register_exitproc
0008bb40 g     F .text	00000254 __multiply
00090738 g     F .text	00000074 altera_avalon_jtag_uart_close
0008597c g     F .text	00000038 __mulsi3
000926b0 g       *ABS*	00000000 __ram_rwdata_start
0009202c g       *ABS*	00000000 __ram_rodata_start
00095c44 g     O .bss	00000028 __malloc_current_mallinfo
0008b6ec g     F .text	0000017c __d2b
00080950 g     F .text	00000020 KEY1_Pressed
00095bdc g     O .bss	00000004 initialized
00090258 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00091ae4 g     F .text	000000d0 alt_get_fd
000ce06c g     O .bss	00000014 search_data
0008f370 g     F .text	0000015c alt_busy_sleep
0008f2a8 g     F .text	000000c8 __fpcmp_parts_d
0008cb58 g     F .text	00000070 _close_r
00091c00 g     F .text	00000074 memcmp
00090308 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
000ce864 g       *ABS*	00000000 __alt_stack_base
00090350 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
000836a0 g     F .text	000000d4 sd_card_find_first
00087b68 g     F .text	0000013c __swsetup_r
0008e454 g     F .text	00000258 __divdf3
000803d8 g     F .text	000000c8 LTC_Read_Image_Line
000898d0 g     F .text	000000f0 __sfp
000ce080 g     O .bss	00000054 boot_sector_data
0008b550 g     F .text	00000058 __copybits
00092abc g     O .rwdata	00000408 __malloc_av_
00089730 g     F .text	00000004 __sinit_lock_release
0008e090 g     F .text	000003c4 __muldf3
0008c8fc g     F .text	00000060 __sread
000919c4 g     F .text	00000120 alt_find_file
00090e74 g     F .text	000000b4 alt_dev_llist_insert
0008fd20 g     F .text	00000020 __malloc_lock
0008ff5c g     F .text	000000bc sbrk
0008949c g     F .text	000001fc _fflush_r
00092108 g     O .rodata	00000036 bmp_header
0008ca90 g     F .text	000000c8 _calloc_r
00095bd8 g       *ABS*	00000000 __bss_start
0008b018 g     F .text	00000098 memset
00084e44 g     F .text	000009ec main
00095c38 g     O .bss	00000004 alt_envp
00095c24 g     O .bss	00000004 __malloc_max_total_mem
000902b0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00080b00 g     F .text	000000bc Write_Sector_Data
0008c810 g     F .text	00000008 __sclose
00100000 g       *ABS*	00000000 __alt_mem_Nios_LCD_Camera_Component_0_Imageline
00100000 g       *ABS*	00000000 __alt_heap_limit
0008ccd8 g     F .text	00000014 fclose
000ce6d4 g     O .bss	00000190 _atexit0
00087ee8 g     F .text	000015b4 _dtoa_r
0008a674 g     F .text	00000740 _malloc_r
00094130 g     O .rwdata	00000004 alt_errno
0008a364 g     F .text	000000b8 _fwalk
000858ac g     F .text	00000060 __divsi3
00092558 g     O .rodata	00000014 __thenan_df
000899c0 g     F .text	0000012c _malloc_trim_r
0009202c g       *ABS*	00000000 __CTOR_END__
00095be8 g     O .bss	00000004 status_register
0008c95c g     F .text	000000bc strcmp
00095bf0 g     O .bss	00000004 command_register
0009202c g       *ABS*	00000000 __flash_rodata_start
0009202c g       *ABS*	00000000 __DTOR_LIST__
0008e734 g     F .text	00000088 __nedf2
00080000 g       *ABS*	00000000 __alt_mem_sram_0
0009019c g     F .text	00000034 alt_irq_init
0008fee4 g     F .text	00000078 alt_release_fd
00080cfc g     F .text	000000a4 get_cluster_flag
00080aa8 g     F .text	00000058 init_button_irq
00085ae0 g     F .text	00000074 sprintf
0009256c g     O .rodata	00000100 __clz_tab
00081198 g     F .text	000001f8 Write_File_Record_At_Offset
00095c18 g     O .bss	00000004 _PathLocale
0008435c g     F .text	000005f0 sd_card_write
00091bb4 g     F .text	00000014 atexit
000bb46c g     O .bss	00012c00 R_vals
0008ca18 g     F .text	00000078 _write_r
0008a4c4 g     F .text	0000001c setlocale
00081390 g     F .text	00000554 Check_for_DOS_FAT
00083130 g     F .text	000002ec create_file
00094104 g     O .rwdata	00000004 _impure_ptr
00095bec g     O .bss	00000004 CSD_register_w0
00095c30 g     O .bss	00000004 alt_argc
00090fec g     F .text	00000064 _do_dtors
000804a0 g     F .text	000000e4 LTC_Write_Image_Line
00080020 g       .exceptions	00000000 alt_irq_entry
0008b26c g     F .text	00000080 __ulp
0008c730 g     F .text	00000040 __isinfd
000897e8 g     F .text	00000018 __fp_unlock_all
0009411c g     O .rwdata	00000008 alt_fs_list
00081ad8 g     F .text	00000290 check_file_name_for_FAT16_compliance
00080300 g     F .text	000000d8 LTC_Switch_HW_Mode
00080020 g       *ABS*	00000000 __ram_exceptions_start
0008a430 g     F .text	00000010 localeconv
0009106c g     F .text	00000050 alt_ic_isr_register
00095bf8 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
00094144 g       *ABS*	00000000 _edata
000808b0 g     F .text	000000a0 KEY0_Pressed
000ce864 g       *ABS*	00000000 _end
000ce0d4 g     O .bss	00000500 active_files
000801b4 g       *ABS*	00000000 __ram_exceptions_end
0008341c g     F .text	00000154 copy_file_record_name_to_string
000907ac g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000818e4 g     F .text	00000124 Look_for_FAT16
00091158 g     F .text	000000a0 alt_ic_irq_disable
0008c880 g     F .text	0000007c __swrite
00094114 g     O .rwdata	00000004 __malloc_trim_threshold
00091910 g     F .text	00000020 altera_nios2_qsys_irq_init
00091bc8 g     F .text	00000038 exit
0008a29c g     F .text	000000c8 _fwalk_reent
0008b868 g     F .text	0000018c __mdiff
0008590c g     F .text	00000060 __modsi3
00080c0c g     F .text	000000f0 Read_Sector_Data
00105440 g       *ABS*	00000000 __alt_mem_Nios_LCD_Camera_Component_0_Touchpanel
00100000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00083570 g     F .text	00000058 sd_card_open_dev
00089728 g     F .text	00000004 __sfp_lock_release
00091f9c g     F .text	00000020 _exit
0008c770 g     F .text	00000030 __isnand
00090d04 g     F .text	00000154 alt_alarm_start
00080584 g     F .text	0000032c LTC_TouchPanel_int
0008ecb8 g     F .text	00000124 __muldi3
0008a4e0 g     F .text	00000194 __smakebuf_r
00085bb4 g     F .text	00000074 strlen
00091580 g     F .text	0000018c open
0008e844 g     F .text	00000088 __gedf2
00091050 g     F .text	0000001c alt_icache_flush_all
00094134 g     O .rwdata	00000004 alt_priority_mask
00083774 g     F .text	000003a8 sd_card_find_next
000910bc g     F .text	0000009c alt_ic_irq_enable
00087b44 g     F .text	00000024 __vfprintf_internal
0008df9c g     F .text	00000080 __subdf3
0008494c g     F .text	000001d4 sd_card_fclose
0008b148 g     F .text	000000c4 __lo0bits
0009413c g     O .rwdata	00000008 alt_alarm_list
00090f88 g     F .text	00000064 _do_ctors
000809c8 g     F .text	000000e0 handle_button_interrupts
00095c08 g     O .bss	00000004 height
0008f4cc g     F .text	00000100 close
00095c0c g     O .bss	00000004 width
0008fa74 g     F .text	00000080 alt_load
0008ee5c g     F .text	00000314 __pack_d
00081e28 g     F .text	000002ec match_file_record_to_name_ext
00000000  w      *UND*	00000000 free
0008972c g     F .text	00000004 __sinit_lock_acquire
0008bdd0 g     F .text	0000012c __multadd
0008b0b0 g     F .text	00000028 _Bfree
00083b1c g     F .text	000003a8 sd_card_fopen



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08406d14 	ori	at,at,436
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   800fc:	0005313a 	rdctl	r2,ipending
   80100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   80104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   80108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   8010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80110:	00800044 	movi	r2,1
   80114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80118:	e0ffff17 	ldw	r3,-4(fp)
   8011c:	e0bffe17 	ldw	r2,-8(fp)
   80120:	1884703a 	and	r2,r3,r2
   80124:	1005003a 	cmpeq	r2,r2,zero
   80128:	1000161e 	bne	r2,zero,80184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	e0bffd17 	ldw	r2,-12(fp)
   80130:	00c00374 	movhi	r3,13
   80134:	18f97504 	addi	r3,r3,-6700
   80138:	100490fa 	slli	r2,r2,3
   8013c:	10c5883a 	add	r2,r2,r3
   80140:	11400017 	ldw	r5,0(r2)
   80144:	e0bffd17 	ldw	r2,-12(fp)
   80148:	00c00374 	movhi	r3,13
   8014c:	18f97504 	addi	r3,r3,-6700
   80150:	100490fa 	slli	r2,r2,3
   80154:	10c5883a 	add	r2,r2,r3
   80158:	10800104 	addi	r2,r2,4
   8015c:	11000017 	ldw	r4,0(r2)
   80160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80164:	0005313a 	rdctl	r2,ipending
   80168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   8016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   80174:	e0bfff17 	ldw	r2,-4(fp)
   80178:	1004c03a 	cmpne	r2,r2,zero
   8017c:	103fe31e 	bne	r2,zero,8010c <alt_irq_handler+0x20>
   80180:	00000706 	br	801a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80184:	e0bffe17 	ldw	r2,-8(fp)
   80188:	1085883a 	add	r2,r2,r2
   8018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   80190:	e0bffd17 	ldw	r2,-12(fp)
   80194:	10800044 	addi	r2,r2,1
   80198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   8019c:	003fde06 	br	80118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a0:	e037883a 	mov	sp,fp
   801a4:	dfc00117 	ldw	ra,4(sp)
   801a8:	df000017 	ldw	fp,0(sp)
   801ac:	dec00204 	addi	sp,sp,8
   801b0:	f800283a 	ret

Disassembly of section .text:

000801b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801b4:	06c00434 	movhi	sp,16
    ori sp, sp, %lo(__alt_stack_pointer)
   801b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   801bc:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   801c0:	d6b03e14 	ori	gp,gp,49400
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801c4:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   801c8:	1096f614 	ori	r2,r2,23512

    movhi r3, %hi(__bss_end)
   801cc:	00c00334 	movhi	r3,12
    ori r3, r3, %lo(__bss_end)
   801d0:	18fa1914 	ori	r3,r3,59492

    beq r2, r3, 1f
   801d4:	10c00326 	beq	r2,r3,801e4 <_start+0x30>

0:
    stw zero, (r2)
   801d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801e0:	10fffd36 	bltu	r2,r3,801d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801e4:	008fa740 	call	8fa74 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801e8:	008fcb40 	call	8fcb4 <alt_main>

000801ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801ec:	003fff06 	br	801ec <alt_after_alt_main>

000801f0 <LTC_Switch_Nios_Mode>:
// McMaster University
// Ontario, Canada

#include "define.h"

void LTC_Switch_Nios_Mode(int write_flag) {
   801f0:	defffc04 	addi	sp,sp,-16
   801f4:	dfc00315 	stw	ra,12(sp)
   801f8:	df000215 	stw	fp,8(sp)
   801fc:	df000204 	addi	fp,sp,8
   80200:	e13fff15 	stw	r4,-4(fp)
    alt_u32 status;

    printf("Changing SDRAM to NIOS mode\n");    
   80204:	01000274 	movhi	r4,9
   80208:	21080b04 	addi	r4,r4,8236
   8020c:	0085acc0 	call	85acc <puts>
    IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CAMERA_BASE, 1, 0x8); // camera stop
   80210:	00c00434 	movhi	r3,16
   80214:	18d50104 	addi	r3,r3,21508
   80218:	00800204 	movi	r2,8
   8021c:	18800035 	stwio	r2,0(r3)
    IOWR(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 1, 0x1F); // resync read and write pipe
   80220:	00c00434 	movhi	r3,16
   80224:	18c00104 	addi	r3,r3,4
   80228:	008007c4 	movi	r2,31
   8022c:	18800035 	stwio	r2,0(r3)
    
    status = IORD(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 1);
   80230:	00800434 	movhi	r2,16
   80234:	10800104 	addi	r2,r2,4
   80238:	10800037 	ldwio	r2,0(r2)
   8023c:	e0bffe15 	stw	r2,-8(fp)
    
    while (((status >> 2) & 0x7) != 5) {
   80240:	00000606 	br	8025c <LTC_Switch_Nios_Mode+0x6c>
        status = IORD(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 1);        
   80244:	00800434 	movhi	r2,16
   80248:	10800104 	addi	r2,r2,4
   8024c:	10800037 	ldwio	r2,0(r2)
   80250:	e0bffe15 	stw	r2,-8(fp)
        alt_busy_sleep(10);
   80254:	01000284 	movi	r4,10
   80258:	008f3700 	call	8f370 <alt_busy_sleep>
    IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CAMERA_BASE, 1, 0x8); // camera stop
    IOWR(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 1, 0x1F); // resync read and write pipe
    
    status = IORD(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 1);
    
    while (((status >> 2) & 0x7) != 5) {
   8025c:	e0bffe17 	ldw	r2,-8(fp)
   80260:	1004d0ba 	srli	r2,r2,2
   80264:	108001cc 	andi	r2,r2,7
   80268:	10800158 	cmpnei	r2,r2,5
   8026c:	103ff51e 	bne	r2,zero,80244 <LTC_Switch_Nios_Mode+0x54>
        status = IORD(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 1);        
        alt_busy_sleep(10);
    }
    if (write_flag == 0) {
   80270:	e0bfff17 	ldw	r2,-4(fp)
   80274:	1004c03a 	cmpne	r2,r2,zero
   80278:	1000051e 	bne	r2,zero,80290 <LTC_Switch_Nios_Mode+0xa0>
        IOWR(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 1, 0x01); // SDRAM read load to nios
   8027c:	00c00434 	movhi	r3,16
   80280:	18c00104 	addi	r3,r3,4
   80284:	00800044 	movi	r2,1
   80288:	18800035 	stwio	r2,0(r3)
   8028c:	00000406 	br	802a0 <LTC_Switch_Nios_Mode+0xb0>
    } else {
        IOWR(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 1, 0x02); // SDRAM write load to nios
   80290:	00c00434 	movhi	r3,16
   80294:	18c00104 	addi	r3,r3,4
   80298:	00800084 	movi	r2,2
   8029c:	18800035 	stwio	r2,0(r3)
    }    
    status = IORD(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 1);
   802a0:	00800434 	movhi	r2,16
   802a4:	10800104 	addi	r2,r2,4
   802a8:	10800037 	ldwio	r2,0(r2)
   802ac:	e0bffe15 	stw	r2,-8(fp)
    while (((status >> 2) & 0x7) != 4) {
   802b0:	00000606 	br	802cc <LTC_Switch_Nios_Mode+0xdc>
        status = IORD(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 1);        
   802b4:	00800434 	movhi	r2,16
   802b8:	10800104 	addi	r2,r2,4
   802bc:	10800037 	ldwio	r2,0(r2)
   802c0:	e0bffe15 	stw	r2,-8(fp)
        alt_busy_sleep(10);
   802c4:	01000284 	movi	r4,10
   802c8:	008f3700 	call	8f370 <alt_busy_sleep>
        IOWR(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 1, 0x01); // SDRAM read load to nios
    } else {
        IOWR(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 1, 0x02); // SDRAM write load to nios
    }    
    status = IORD(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 1);
    while (((status >> 2) & 0x7) != 4) {
   802cc:	e0bffe17 	ldw	r2,-8(fp)
   802d0:	1004d0ba 	srli	r2,r2,2
   802d4:	108001cc 	andi	r2,r2,7
   802d8:	10800118 	cmpnei	r2,r2,4
   802dc:	103ff51e 	bne	r2,zero,802b4 <LTC_Switch_Nios_Mode+0xc4>
        status = IORD(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 1);        
        alt_busy_sleep(10);
    }
    printf("SDRAM changed to NIOS mode\n"); 
   802e0:	01000274 	movhi	r4,9
   802e4:	21081204 	addi	r4,r4,8264
   802e8:	0085acc0 	call	85acc <puts>
}
   802ec:	e037883a 	mov	sp,fp
   802f0:	dfc00117 	ldw	ra,4(sp)
   802f4:	df000017 	ldw	fp,0(sp)
   802f8:	dec00204 	addi	sp,sp,8
   802fc:	f800283a 	ret

00080300 <LTC_Switch_HW_Mode>:

void LTC_Switch_HW_Mode() {
   80300:	defffd04 	addi	sp,sp,-12
   80304:	dfc00215 	stw	ra,8(sp)
   80308:	df000115 	stw	fp,4(sp)
   8030c:	df000104 	addi	fp,sp,4
    alt_u32 status;
        
    printf("Changing SDRAM to HW mode\n");
   80310:	01000274 	movhi	r4,9
   80314:	21081904 	addi	r4,r4,8292
   80318:	0085acc0 	call	85acc <puts>
    IOWR(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 1, 0x1C); // resync read and write pipe
   8031c:	00c00434 	movhi	r3,16
   80320:	18c00104 	addi	r3,r3,4
   80324:	00800704 	movi	r2,28
   80328:	18800035 	stwio	r2,0(r3)
    status = IORD(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 1);
   8032c:	00800434 	movhi	r2,16
   80330:	10800104 	addi	r2,r2,4
   80334:	10800037 	ldwio	r2,0(r2)
   80338:	e0bfff15 	stw	r2,-4(fp)
    while (((status >> 2) & 0x7) != 5) {
   8033c:	00000606 	br	80358 <LTC_Switch_HW_Mode+0x58>
        status = IORD(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 1);        
   80340:	00800434 	movhi	r2,16
   80344:	10800104 	addi	r2,r2,4
   80348:	10800037 	ldwio	r2,0(r2)
   8034c:	e0bfff15 	stw	r2,-4(fp)
        alt_busy_sleep(10);
   80350:	01000284 	movi	r4,10
   80354:	008f3700 	call	8f370 <alt_busy_sleep>
    alt_u32 status;
        
    printf("Changing SDRAM to HW mode\n");
    IOWR(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 1, 0x1C); // resync read and write pipe
    status = IORD(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 1);
    while (((status >> 2) & 0x7) != 5) {
   80358:	e0bfff17 	ldw	r2,-4(fp)
   8035c:	1004d0ba 	srli	r2,r2,2
   80360:	108001cc 	andi	r2,r2,7
   80364:	10800158 	cmpnei	r2,r2,5
   80368:	103ff51e 	bne	r2,zero,80340 <LTC_Switch_HW_Mode+0x40>
        status = IORD(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 1);        
        alt_busy_sleep(10);
    }
    IOWR(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 1, 0x0); // LCD reset
   8036c:	00800434 	movhi	r2,16
   80370:	10800104 	addi	r2,r2,4
   80374:	10000035 	stwio	zero,0(r2)
    status = IORD(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 1);
   80378:	00800434 	movhi	r2,16
   8037c:	10800104 	addi	r2,r2,4
   80380:	10800037 	ldwio	r2,0(r2)
   80384:	e0bfff15 	stw	r2,-4(fp)
    while (((status >> 2) & 0x7) != 4) {
   80388:	00000606 	br	803a4 <LTC_Switch_HW_Mode+0xa4>
        status = IORD(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 1);        
   8038c:	00800434 	movhi	r2,16
   80390:	10800104 	addi	r2,r2,4
   80394:	10800037 	ldwio	r2,0(r2)
   80398:	e0bfff15 	stw	r2,-4(fp)
        alt_busy_sleep(10);
   8039c:	01000284 	movi	r4,10
   803a0:	008f3700 	call	8f370 <alt_busy_sleep>
        status = IORD(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 1);        
        alt_busy_sleep(10);
    }
    IOWR(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 1, 0x0); // LCD reset
    status = IORD(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 1);
    while (((status >> 2) & 0x7) != 4) {
   803a4:	e0bfff17 	ldw	r2,-4(fp)
   803a8:	1004d0ba 	srli	r2,r2,2
   803ac:	108001cc 	andi	r2,r2,7
   803b0:	10800118 	cmpnei	r2,r2,4
   803b4:	103ff51e 	bne	r2,zero,8038c <LTC_Switch_HW_Mode+0x8c>
        status = IORD(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 1);        
        alt_busy_sleep(10);
    }
    printf("SDRAM changed to HW mode\n");    
   803b8:	01000274 	movhi	r4,9
   803bc:	21082004 	addi	r4,r4,8320
   803c0:	0085acc0 	call	85acc <puts>
}    
   803c4:	e037883a 	mov	sp,fp
   803c8:	dfc00117 	ldw	ra,4(sp)
   803cc:	df000017 	ldw	fp,0(sp)
   803d0:	dec00204 	addi	sp,sp,8
   803d4:	f800283a 	ret

000803d8 <LTC_Read_Image_Line>:

void LTC_Read_Image_Line(
    alt_u8 *R_vals, alt_u8 *G_vals, alt_u8 *B_vals
) {
   803d8:	defffa04 	addi	sp,sp,-24
   803dc:	df000515 	stw	fp,20(sp)
   803e0:	df000504 	addi	fp,sp,20
   803e4:	e13ffd15 	stw	r4,-12(fp)
   803e8:	e17ffe15 	stw	r5,-8(fp)
   803ec:	e1bfff15 	stw	r6,-4(fp)
    int k; alt_u32 raw_rgb;

    for (k = 0; k < LINE_LEN; k++) {
   803f0:	e03ffc15 	stw	zero,-16(fp)
   803f4:	00002306 	br	80484 <LTC_Read_Image_Line+0xac>
        raw_rgb = IORD(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 0);
   803f8:	00800434 	movhi	r2,16
   803fc:	10800037 	ldwio	r2,0(r2)
   80400:	e0bffb15 	stw	r2,-20(fp)
        R_vals[k] = (raw_rgb >> 2) & 0xFF;
   80404:	e0bffc17 	ldw	r2,-16(fp)
   80408:	1007883a 	mov	r3,r2
   8040c:	e0bffd17 	ldw	r2,-12(fp)
   80410:	1887883a 	add	r3,r3,r2
   80414:	e0bffb17 	ldw	r2,-20(fp)
   80418:	1004d0ba 	srli	r2,r2,2
   8041c:	18800005 	stb	r2,0(r3)
        G_vals[k] = ((raw_rgb >> 12) & 0x7) | ((raw_rgb >> 23) & 0xF8); 
   80420:	e0bffc17 	ldw	r2,-16(fp)
   80424:	1007883a 	mov	r3,r2
   80428:	e0bffe17 	ldw	r2,-8(fp)
   8042c:	188b883a 	add	r5,r3,r2
   80430:	e0bffb17 	ldw	r2,-20(fp)
   80434:	1004d33a 	srli	r2,r2,12
   80438:	108001cc 	andi	r2,r2,7
   8043c:	1009883a 	mov	r4,r2
   80440:	e0bffb17 	ldw	r2,-20(fp)
   80444:	1004d5fa 	srli	r2,r2,23
   80448:	1007883a 	mov	r3,r2
   8044c:	00bffe04 	movi	r2,-8
   80450:	1884703a 	and	r2,r3,r2
   80454:	2084b03a 	or	r2,r4,r2
   80458:	28800005 	stb	r2,0(r5)
        B_vals[k] = ((raw_rgb >> 18) & 0xFF);
   8045c:	e0bffc17 	ldw	r2,-16(fp)
   80460:	1007883a 	mov	r3,r2
   80464:	e0bfff17 	ldw	r2,-4(fp)
   80468:	1887883a 	add	r3,r3,r2
   8046c:	e0bffb17 	ldw	r2,-20(fp)
   80470:	1004d4ba 	srli	r2,r2,18
   80474:	18800005 	stb	r2,0(r3)
void LTC_Read_Image_Line(
    alt_u8 *R_vals, alt_u8 *G_vals, alt_u8 *B_vals
) {
    int k; alt_u32 raw_rgb;

    for (k = 0; k < LINE_LEN; k++) {
   80478:	e0bffc17 	ldw	r2,-16(fp)
   8047c:	10800044 	addi	r2,r2,1
   80480:	e0bffc15 	stw	r2,-16(fp)
   80484:	e0bffc17 	ldw	r2,-16(fp)
   80488:	1080a010 	cmplti	r2,r2,640
   8048c:	103fda1e 	bne	r2,zero,803f8 <LTC_Read_Image_Line+0x20>
        raw_rgb = IORD(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 0);
        R_vals[k] = (raw_rgb >> 2) & 0xFF;
        G_vals[k] = ((raw_rgb >> 12) & 0x7) | ((raw_rgb >> 23) & 0xF8); 
        B_vals[k] = ((raw_rgb >> 18) & 0xFF);
    }
}
   80490:	e037883a 	mov	sp,fp
   80494:	df000017 	ldw	fp,0(sp)
   80498:	dec00104 	addi	sp,sp,4
   8049c:	f800283a 	ret

000804a0 <LTC_Write_Image_Line>:

void LTC_Write_Image_Line(
    alt_u8 *R_vals, alt_u8 *G_vals, alt_u8 *B_vals
) {
   804a0:	defffa04 	addi	sp,sp,-24
   804a4:	df000515 	stw	fp,20(sp)
   804a8:	df000504 	addi	fp,sp,20
   804ac:	e13ffd15 	stw	r4,-12(fp)
   804b0:	e17ffe15 	stw	r5,-8(fp)
   804b4:	e1bfff15 	stw	r6,-4(fp)
    int k; alt_u32 raw_rgb;

    for (k = 0; k < LINE_LEN; k++) {
   804b8:	e03ffc15 	stw	zero,-16(fp)
   804bc:	00002a06 	br	80568 <LTC_Write_Image_Line+0xc8>
        raw_rgb = 
   804c0:	e0bffc17 	ldw	r2,-16(fp)
   804c4:	1007883a 	mov	r3,r2
   804c8:	e0bffd17 	ldw	r2,-12(fp)
   804cc:	1885883a 	add	r2,r3,r2
   804d0:	10800003 	ldbu	r2,0(r2)
   804d4:	10803fcc 	andi	r2,r2,255
   804d8:	1085883a 	add	r2,r2,r2
   804dc:	1085883a 	add	r2,r2,r2
   804e0:	1009883a 	mov	r4,r2
   804e4:	e0bffc17 	ldw	r2,-16(fp)
   804e8:	1007883a 	mov	r3,r2
   804ec:	e0bffe17 	ldw	r2,-8(fp)
   804f0:	1885883a 	add	r2,r3,r2
   804f4:	10800003 	ldbu	r2,0(r2)
   804f8:	10803fcc 	andi	r2,r2,255
   804fc:	108001cc 	andi	r2,r2,7
   80500:	1004933a 	slli	r2,r2,12
   80504:	2088b03a 	or	r4,r4,r2
   80508:	e0bffc17 	ldw	r2,-16(fp)
   8050c:	1007883a 	mov	r3,r2
   80510:	e0bfff17 	ldw	r2,-4(fp)
   80514:	1885883a 	add	r2,r3,r2
   80518:	10800003 	ldbu	r2,0(r2)
   8051c:	10803fcc 	andi	r2,r2,255
   80520:	100494ba 	slli	r2,r2,18
   80524:	2088b03a 	or	r4,r4,r2
   80528:	e0bffc17 	ldw	r2,-16(fp)
   8052c:	1007883a 	mov	r3,r2
   80530:	e0bffe17 	ldw	r2,-8(fp)
   80534:	1885883a 	add	r2,r3,r2
   80538:	10800003 	ldbu	r2,0(r2)
   8053c:	10803fcc 	andi	r2,r2,255
   80540:	10803e0c 	andi	r2,r2,248
   80544:	100495fa 	slli	r2,r2,23
   80548:	2084b03a 	or	r2,r4,r2
   8054c:	e0bffb15 	stw	r2,-20(fp)
            (R_vals[k] << 2 ) | ((G_vals[k] & 0x7) << 12) | 
            (B_vals[k] << 18) | ((G_vals[k] & 0xF8) << 23);        
        IOWR(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 0, raw_rgb);
   80550:	e0fffb17 	ldw	r3,-20(fp)
   80554:	00800434 	movhi	r2,16
   80558:	10c00035 	stwio	r3,0(r2)
void LTC_Write_Image_Line(
    alt_u8 *R_vals, alt_u8 *G_vals, alt_u8 *B_vals
) {
    int k; alt_u32 raw_rgb;

    for (k = 0; k < LINE_LEN; k++) {
   8055c:	e0bffc17 	ldw	r2,-16(fp)
   80560:	10800044 	addi	r2,r2,1
   80564:	e0bffc15 	stw	r2,-16(fp)
   80568:	e0bffc17 	ldw	r2,-16(fp)
   8056c:	1080a010 	cmplti	r2,r2,640
   80570:	103fd31e 	bne	r2,zero,804c0 <LTC_Write_Image_Line+0x20>
        raw_rgb = 
            (R_vals[k] << 2 ) | ((G_vals[k] & 0x7) << 12) | 
            (B_vals[k] << 18) | ((G_vals[k] & 0xF8) << 23);        
        IOWR(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 0, raw_rgb);
    }
}
   80574:	e037883a 	mov	sp,fp
   80578:	df000017 	ldw	fp,0(sp)
   8057c:	dec00104 	addi	sp,sp,4
   80580:	f800283a 	ret

00080584 <LTC_TouchPanel_int>:

void LTC_TouchPanel_int(void) {
   80584:	defffb04 	addi	sp,sp,-20
   80588:	df000415 	stw	fp,16(sp)
   8058c:	df000404 	addi	fp,sp,16
    static int exposure = 0x0400, run = 1;
    static int config = 0;
    static int new_config = 4;
    int TP_val, x_val, y_val, key = 6;
   80590:	00800184 	movi	r2,6
   80594:	e0bffc15 	stw	r2,-16(fp)

    TP_val = IORD(NIOS_LCD_CAMERA_COMPONENT_0_TOUCHPANEL_BASE, 0);
   80598:	00800434 	movhi	r2,16
   8059c:	10951004 	addi	r2,r2,21568
   805a0:	10800037 	ldwio	r2,0(r2)
   805a4:	e0bfff15 	stw	r2,-4(fp)
    x_val = (TP_val >> 20) & 0xFF; y_val = (TP_val >> 4) & 0xFF;
   805a8:	e0bfff17 	ldw	r2,-4(fp)
   805ac:	1005d53a 	srai	r2,r2,20
   805b0:	10803fcc 	andi	r2,r2,255
   805b4:	e0bffe15 	stw	r2,-8(fp)
   805b8:	e0bfff17 	ldw	r2,-4(fp)
   805bc:	1005d13a 	srai	r2,r2,4
   805c0:	10803fcc 	andi	r2,r2,255
   805c4:	e0bffd15 	stw	r2,-12(fp)

    if (((TP_val >> 31) & 0x1) && (x_val >= 0xC9) && (x_val <= 0xF1)) {
   805c8:	e0bfff17 	ldw	r2,-4(fp)
   805cc:	1005d7fa 	srai	r2,r2,31
   805d0:	1080004c 	andi	r2,r2,1
   805d4:	1080005c 	xori	r2,r2,1
   805d8:	10803fcc 	andi	r2,r2,255
   805dc:	1004c03a 	cmpne	r2,r2,zero
   805e0:	10004e1e 	bne	r2,zero,8071c <LTC_TouchPanel_int+0x198>
   805e4:	e0bffe17 	ldw	r2,-8(fp)
   805e8:	10803250 	cmplti	r2,r2,201
   805ec:	10004b1e 	bne	r2,zero,8071c <LTC_TouchPanel_int+0x198>
   805f0:	e0bffe17 	ldw	r2,-8(fp)
   805f4:	10803c88 	cmpgei	r2,r2,242
   805f8:	1000481e 	bne	r2,zero,8071c <LTC_TouchPanel_int+0x198>
        if ((y_val >= 0x17) && (y_val <= 0x33)) { // Key 0
   805fc:	e0bffd17 	ldw	r2,-12(fp)
   80600:	108005d0 	cmplti	r2,r2,23
   80604:	1000081e 	bne	r2,zero,80628 <LTC_TouchPanel_int+0xa4>
   80608:	e0bffd17 	ldw	r2,-12(fp)
   8060c:	10800d08 	cmpgei	r2,r2,52
   80610:	1000051e 	bne	r2,zero,80628 <LTC_TouchPanel_int+0xa4>
            key = 0;
   80614:	e03ffc15 	stw	zero,-16(fp)
            IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CONSOLE_BASE, 0, 0x1);
   80618:	00c00434 	movhi	r3,16
   8061c:	18c80004 	addi	r3,r3,8192
   80620:	00800044 	movi	r2,1
   80624:	18800035 	stwio	r2,0(r3)
        }
        if ((y_val >= 0x3D) && (y_val <= 0x58)) { // Key 1
   80628:	e0bffd17 	ldw	r2,-12(fp)
   8062c:	10800f50 	cmplti	r2,r2,61
   80630:	1000091e 	bne	r2,zero,80658 <LTC_TouchPanel_int+0xd4>
   80634:	e0bffd17 	ldw	r2,-12(fp)
   80638:	10801648 	cmpgei	r2,r2,89
   8063c:	1000061e 	bne	r2,zero,80658 <LTC_TouchPanel_int+0xd4>
            key = 1;
   80640:	00800044 	movi	r2,1
   80644:	e0bffc15 	stw	r2,-16(fp)
            IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CONSOLE_BASE, 0, 0x2);
   80648:	00c00434 	movhi	r3,16
   8064c:	18c80004 	addi	r3,r3,8192
   80650:	00800084 	movi	r2,2
   80654:	18800035 	stwio	r2,0(r3)
        }
        if ((y_val >= 0x62) && (y_val <= 0x7E)) { // Key 2
   80658:	e0bffd17 	ldw	r2,-12(fp)
   8065c:	10801890 	cmplti	r2,r2,98
   80660:	1000091e 	bne	r2,zero,80688 <LTC_TouchPanel_int+0x104>
   80664:	e0bffd17 	ldw	r2,-12(fp)
   80668:	10801fc8 	cmpgei	r2,r2,127
   8066c:	1000061e 	bne	r2,zero,80688 <LTC_TouchPanel_int+0x104>
            key = 2;
   80670:	00800084 	movi	r2,2
   80674:	e0bffc15 	stw	r2,-16(fp)
            IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CONSOLE_BASE, 0, 0x4);
   80678:	00c00434 	movhi	r3,16
   8067c:	18c80004 	addi	r3,r3,8192
   80680:	00800104 	movi	r2,4
   80684:	18800035 	stwio	r2,0(r3)
        }
        if ((y_val >= 0x88) && (y_val <= 0xA4)) { // Key 3
   80688:	e0bffd17 	ldw	r2,-12(fp)
   8068c:	10802210 	cmplti	r2,r2,136
   80690:	1000091e 	bne	r2,zero,806b8 <LTC_TouchPanel_int+0x134>
   80694:	e0bffd17 	ldw	r2,-12(fp)
   80698:	10802948 	cmpgei	r2,r2,165
   8069c:	1000061e 	bne	r2,zero,806b8 <LTC_TouchPanel_int+0x134>
            key = 3;
   806a0:	008000c4 	movi	r2,3
   806a4:	e0bffc15 	stw	r2,-16(fp)
            IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CONSOLE_BASE, 0, 0x8);
   806a8:	00c00434 	movhi	r3,16
   806ac:	18c80004 	addi	r3,r3,8192
   806b0:	00800204 	movi	r2,8
   806b4:	18800035 	stwio	r2,0(r3)
        }
        if ((y_val >= 0xAE) && (y_val <= 0xC9)) { // Key 4
   806b8:	e0bffd17 	ldw	r2,-12(fp)
   806bc:	10802b90 	cmplti	r2,r2,174
   806c0:	1000091e 	bne	r2,zero,806e8 <LTC_TouchPanel_int+0x164>
   806c4:	e0bffd17 	ldw	r2,-12(fp)
   806c8:	10803288 	cmpgei	r2,r2,202
   806cc:	1000061e 	bne	r2,zero,806e8 <LTC_TouchPanel_int+0x164>
            key = 4;
   806d0:	00800104 	movi	r2,4
   806d4:	e0bffc15 	stw	r2,-16(fp)
            IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CONSOLE_BASE, 0, 0x10);
   806d8:	00c00434 	movhi	r3,16
   806dc:	18c80004 	addi	r3,r3,8192
   806e0:	00800404 	movi	r2,16
   806e4:	18800035 	stwio	r2,0(r3)
        }
        if ((y_val >= 0xD3) && (y_val <= 0xEF)) { // Key 5
   806e8:	e0bffd17 	ldw	r2,-12(fp)
   806ec:	108034d0 	cmplti	r2,r2,211
   806f0:	10000d1e 	bne	r2,zero,80728 <LTC_TouchPanel_int+0x1a4>
   806f4:	e0bffd17 	ldw	r2,-12(fp)
   806f8:	10803c08 	cmpgei	r2,r2,240
   806fc:	10000a1e 	bne	r2,zero,80728 <LTC_TouchPanel_int+0x1a4>
            key = 5;
   80700:	00800144 	movi	r2,5
   80704:	e0bffc15 	stw	r2,-16(fp)
            IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CONSOLE_BASE, 0, 0x20);
   80708:	00c00434 	movhi	r3,16
   8070c:	18c80004 	addi	r3,r3,8192
   80710:	00800804 	movi	r2,32
   80714:	18800035 	stwio	r2,0(r3)
    int TP_val, x_val, y_val, key = 6;

    TP_val = IORD(NIOS_LCD_CAMERA_COMPONENT_0_TOUCHPANEL_BASE, 0);
    x_val = (TP_val >> 20) & 0xFF; y_val = (TP_val >> 4) & 0xFF;

    if (((TP_val >> 31) & 0x1) && (x_val >= 0xC9) && (x_val <= 0xF1)) {
   80718:	00000306 	br	80728 <LTC_TouchPanel_int+0x1a4>
        }
        if ((y_val >= 0xD3) && (y_val <= 0xEF)) { // Key 5
            key = 5;
            IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CONSOLE_BASE, 0, 0x20);
        }
    } else IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CONSOLE_BASE, 0, 0x0);
   8071c:	00800434 	movhi	r2,16
   80720:	10880004 	addi	r2,r2,8192
   80724:	10000035 	stwio	zero,0(r2)
    
    if (IORD(NIOS_LCD_CAMERA_COMPONENT_0_TOUCHPANEL_BASE, 2) & 0x2) { // posedge
   80728:	00800434 	movhi	r2,16
   8072c:	10951204 	addi	r2,r2,21576
   80730:	10800037 	ldwio	r2,0(r2)
   80734:	1080008c 	andi	r2,r2,2
   80738:	1005003a 	cmpeq	r2,r2,zero
   8073c:	10004f1e 	bne	r2,zero,8087c <LTC_TouchPanel_int+0x2f8>
        switch (key) {
   80740:	e0bffc17 	ldw	r2,-16(fp)
   80744:	108001a8 	cmpgeui	r2,r2,6
   80748:	10004c1e 	bne	r2,zero,8087c <LTC_TouchPanel_int+0x2f8>
   8074c:	e0bffc17 	ldw	r2,-16(fp)
   80750:	1085883a 	add	r2,r2,r2
   80754:	1087883a 	add	r3,r2,r2
   80758:	00800234 	movhi	r2,8
   8075c:	1081db04 	addi	r2,r2,1900
   80760:	1885883a 	add	r2,r3,r2
   80764:	10800017 	ldw	r2,0(r2)
   80768:	1000683a 	jmp	r2
   8076c:	00080784 	movi	zero,8222
   80770:	000807c4 	movi	zero,8223
   80774:	000807f4 	movhi	zero,8223
   80778:	0008087c 	xorhi	zero,zero,8225
   8077c:	00080808 	cmpgei	zero,zero,8224
   80780:	00080844 	movi	zero,8225
            case 0 : 
                if (run == 1) {
   80784:	d0a00117 	ldw	r2,-32764(gp)
   80788:	10800058 	cmpnei	r2,r2,1
   8078c:	1000061e 	bne	r2,zero,807a8 <LTC_TouchPanel_int+0x224>
                    IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CAMERA_BASE, 1, 0x8);
   80790:	00c00434 	movhi	r3,16
   80794:	18d50104 	addi	r3,r3,21508
   80798:	00800204 	movi	r2,8
   8079c:	18800035 	stwio	r2,0(r3)
                    run = 0;
   807a0:	d0200115 	stw	zero,-32764(gp)
   807a4:	00003506 	br	8087c <LTC_TouchPanel_int+0x2f8>
                } else {
                    IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CAMERA_BASE, 1, 0x4);
   807a8:	00800434 	movhi	r2,16
   807ac:	10950104 	addi	r2,r2,21508
   807b0:	00c00104 	movi	r3,4
   807b4:	10c00035 	stwio	r3,0(r2)
                    run = 1;
   807b8:	00800044 	movi	r2,1
   807bc:	d0a00115 	stw	r2,-32764(gp)
                }
                break;
   807c0:	00002e06 	br	8087c <LTC_TouchPanel_int+0x2f8>
            case 1 : 
                config++; if (config == 4) config = 0;
   807c4:	d0a6b817 	ldw	r2,-25888(gp)
   807c8:	10800044 	addi	r2,r2,1
   807cc:	d0a6b815 	stw	r2,-25888(gp)
   807d0:	d0a6b817 	ldw	r2,-25888(gp)
   807d4:	10800118 	cmpnei	r2,r2,4
   807d8:	1000011e 	bne	r2,zero,807e0 <LTC_TouchPanel_int+0x25c>
   807dc:	d026b815 	stw	zero,-25888(gp)
                IOWR(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 4, config);
   807e0:	d0e6b817 	ldw	r3,-25888(gp)
   807e4:	00800434 	movhi	r2,16
   807e8:	10800404 	addi	r2,r2,16
   807ec:	10c00035 	stwio	r3,0(r2)
                break;
   807f0:	00002206 	br	8087c <LTC_TouchPanel_int+0x2f8>
            case 2 : 
                IOWR(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 4, 4);
   807f4:	00c00434 	movhi	r3,16
   807f8:	18c00404 	addi	r3,r3,16
   807fc:	00800104 	movi	r2,4
   80800:	18800035 	stwio	r2,0(r3)
                break;
   80804:	00001d06 	br	8087c <LTC_TouchPanel_int+0x2f8>
            case 4 : 
                if (exposure <= 0xFEFF) exposure += 0x0100;
   80808:	d0e00217 	ldw	r3,-32760(gp)
   8080c:	00bfbfd4 	movui	r2,65279
   80810:	10c00316 	blt	r2,r3,80820 <LTC_TouchPanel_int+0x29c>
   80814:	d0a00217 	ldw	r2,-32760(gp)
   80818:	10804004 	addi	r2,r2,256
   8081c:	d0a00215 	stw	r2,-32760(gp)
                IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CAMERA_BASE, 0, exposure);
   80820:	d0e00217 	ldw	r3,-32760(gp)
   80824:	00800434 	movhi	r2,16
   80828:	10950004 	addi	r2,r2,21504
   8082c:	10c00035 	stwio	r3,0(r2)
                IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CAMERA_BASE, 1, 0x2);
   80830:	00c00434 	movhi	r3,16
   80834:	18d50104 	addi	r3,r3,21508
   80838:	00800084 	movi	r2,2
   8083c:	18800035 	stwio	r2,0(r3)
                break;                              
   80840:	00000e06 	br	8087c <LTC_TouchPanel_int+0x2f8>
            case 5 : 
                if (exposure >= 0x0100) exposure -= 0x0100;
   80844:	d0a00217 	ldw	r2,-32760(gp)
   80848:	10804010 	cmplti	r2,r2,256
   8084c:	1000031e 	bne	r2,zero,8085c <LTC_TouchPanel_int+0x2d8>
   80850:	d0a00217 	ldw	r2,-32760(gp)
   80854:	10bfc004 	addi	r2,r2,-256
   80858:	d0a00215 	stw	r2,-32760(gp)
                IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CAMERA_BASE, 0, exposure);
   8085c:	d0e00217 	ldw	r3,-32760(gp)
   80860:	00800434 	movhi	r2,16
   80864:	10950004 	addi	r2,r2,21504
   80868:	10c00035 	stwio	r3,0(r2)
                IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CAMERA_BASE, 1, 0x2);
   8086c:	00c00434 	movhi	r3,16
   80870:	18d50104 	addi	r3,r3,21508
   80874:	00800084 	movi	r2,2
   80878:	18800035 	stwio	r2,0(r3)
                break;
        }
    }
    
    TP_val = IORD(NIOS_LCD_CAMERA_COMPONENT_0_TOUCHPANEL_BASE, 2);
   8087c:	00800434 	movhi	r2,16
   80880:	10951204 	addi	r2,r2,21576
   80884:	10800037 	ldwio	r2,0(r2)
   80888:	e0bfff15 	stw	r2,-4(fp)
    IOWR(NIOS_LCD_CAMERA_COMPONENT_0_TOUCHPANEL_BASE, 2, TP_val & 0x30);
   8088c:	e0bfff17 	ldw	r2,-4(fp)
   80890:	10c00c0c 	andi	r3,r2,48
   80894:	00800434 	movhi	r2,16
   80898:	10951204 	addi	r2,r2,21576
   8089c:	10c00035 	stwio	r3,0(r2)
}
   808a0:	e037883a 	mov	sp,fp
   808a4:	df000017 	ldw	fp,0(sp)
   808a8:	dec00104 	addi	sp,sp,4
   808ac:	f800283a 	ret

000808b0 <KEY0_Pressed>:
// McMaster University
// Ontario, Canada

#include "define.h"

void KEY0_Pressed(PB_irq_data_struct *PB_irq_data) {
   808b0:	defffb04 	addi	sp,sp,-20
   808b4:	dfc00415 	stw	ra,16(sp)
   808b8:	df000315 	stw	fp,12(sp)
   808bc:	df000304 	addi	fp,sp,12
   808c0:	e13ffe15 	stw	r4,-8(fp)
	int status;
	
	status = sd_card_find_next(PB_irq_data->filename);
   808c4:	e13ffe17 	ldw	r4,-8(fp)
   808c8:	00837740 	call	83774 <sd_card_find_next>
   808cc:	10bfffcc 	andi	r2,r2,65535
   808d0:	10a0001c 	xori	r2,r2,32768
   808d4:	10a00004 	addi	r2,r2,-32768
   808d8:	e0bffd15 	stw	r2,-12(fp)
	switch (status) {
   808dc:	e0bffd17 	ldw	r2,-12(fp)
   808e0:	e0bfff15 	stw	r2,-4(fp)
   808e4:	e0ffff17 	ldw	r3,-4(fp)
   808e8:	1805003a 	cmpeq	r2,r3,zero
   808ec:	1000071e 	bne	r2,zero,8090c <KEY0_Pressed+0x5c>
   808f0:	e0ffff17 	ldw	r3,-4(fp)
   808f4:	188000a0 	cmpeqi	r2,r3,2
   808f8:	10000d1e 	bne	r2,zero,80930 <KEY0_Pressed+0x80>
   808fc:	e0ffff17 	ldw	r3,-4(fp)
   80900:	18bfffe0 	cmpeqi	r2,r3,-1
   80904:	1000061e 	bne	r2,zero,80920 <KEY0_Pressed+0x70>
   80908:	00000c06 	br	8093c <KEY0_Pressed+0x8c>
		case 0: printf("File found: \"%s\"\n", PB_irq_data->filename); break;
   8090c:	e17ffe17 	ldw	r5,-8(fp)
   80910:	01000274 	movhi	r4,9
   80914:	21082704 	addi	r4,r4,8348
   80918:	00859b40 	call	859b4 <printf>
   8091c:	00000706 	br	8093c <KEY0_Pressed+0x8c>
		case -1: printf("End of directory\n"); break;
   80920:	01000274 	movhi	r4,9
   80924:	21082c04 	addi	r4,r4,8368
   80928:	0085acc0 	call	85acc <puts>
   8092c:	00000306 	br	8093c <KEY0_Pressed+0x8c>
		case 2: printf("No card or incorrect FS\n"); break;
   80930:	01000274 	movhi	r4,9
   80934:	21083104 	addi	r4,r4,8388
   80938:	0085acc0 	call	85acc <puts>
	}
}
   8093c:	e037883a 	mov	sp,fp
   80940:	dfc00117 	ldw	ra,4(sp)
   80944:	df000017 	ldw	fp,0(sp)
   80948:	dec00204 	addi	sp,sp,8
   8094c:	f800283a 	ret

00080950 <KEY1_Pressed>:

void KEY1_Pressed(PB_irq_data_struct *PB_irq_data) {
   80950:	defffe04 	addi	sp,sp,-8
   80954:	df000115 	stw	fp,4(sp)
   80958:	df000104 	addi	fp,sp,4
   8095c:	e13fff15 	stw	r4,-4(fp)
}
   80960:	e037883a 	mov	sp,fp
   80964:	df000017 	ldw	fp,0(sp)
   80968:	dec00104 	addi	sp,sp,4
   8096c:	f800283a 	ret

00080970 <KEY2_Pressed>:

void KEY2_Pressed(PB_irq_data_struct *PB_irq_data) {
   80970:	defffe04 	addi	sp,sp,-8
   80974:	df000115 	stw	fp,4(sp)
   80978:	df000104 	addi	fp,sp,4
   8097c:	e13fff15 	stw	r4,-4(fp)
	PB_irq_data->load_img_flag = 1;
   80980:	e0ffff17 	ldw	r3,-4(fp)
   80984:	00800044 	movi	r2,1
   80988:	18800415 	stw	r2,16(r3)
}
   8098c:	e037883a 	mov	sp,fp
   80990:	df000017 	ldw	fp,0(sp)
   80994:	dec00104 	addi	sp,sp,4
   80998:	f800283a 	ret

0008099c <KEY3_Pressed>:

void KEY3_Pressed(PB_irq_data_struct *PB_irq_data) {
   8099c:	defffe04 	addi	sp,sp,-8
   809a0:	df000115 	stw	fp,4(sp)
   809a4:	df000104 	addi	fp,sp,4
   809a8:	e13fff15 	stw	r4,-4(fp)
	PB_irq_data->save_img_flag = 1;	
   809ac:	e0ffff17 	ldw	r3,-4(fp)
   809b0:	00800044 	movi	r2,1
   809b4:	18800515 	stw	r2,20(r3)
}
   809b8:	e037883a 	mov	sp,fp
   809bc:	df000017 	ldw	fp,0(sp)
   809c0:	dec00104 	addi	sp,sp,4
   809c4:	f800283a 	ret

000809c8 <handle_button_interrupts>:

// ISR when any PB is pressed
void handle_button_interrupts(PB_irq_data_struct *PB_irq_data)
{
   809c8:	defffc04 	addi	sp,sp,-16
   809cc:	dfc00315 	stw	ra,12(sp)
   809d0:	df000215 	stw	fp,8(sp)
   809d4:	df000204 	addi	fp,sp,8
   809d8:	e13ffe15 	stw	r4,-8(fp)
	IOWR(LED_GREEN_O_BASE, 0, IORD(PUSH_BUTTON_I_BASE, 3)*IORD(PUSH_BUTTON_I_BASE, 3));
   809dc:	00800434 	movhi	r2,16
   809e0:	10952b04 	addi	r2,r2,21676
   809e4:	11000037 	ldwio	r4,0(r2)
   809e8:	00800434 	movhi	r2,16
   809ec:	10952b04 	addi	r2,r2,21676
   809f0:	11400037 	ldwio	r5,0(r2)
   809f4:	008597c0 	call	8597c <__mulsi3>
   809f8:	1007883a 	mov	r3,r2
   809fc:	00800434 	movhi	r2,16
   80a00:	10952004 	addi	r2,r2,21632
   80a04:	10c00035 	stwio	r3,0(r2)
	
	switch(IORD(PUSH_BUTTON_I_BASE, 3)) {
   80a08:	00800434 	movhi	r2,16
   80a0c:	10952b04 	addi	r2,r2,21676
   80a10:	10800037 	ldwio	r2,0(r2)
   80a14:	e0bfff15 	stw	r2,-4(fp)
   80a18:	e0ffff17 	ldw	r3,-4(fp)
   80a1c:	188000a0 	cmpeqi	r2,r3,2
   80a20:	1000111e 	bne	r2,zero,80a68 <handle_button_interrupts+0xa0>
   80a24:	e0ffff17 	ldw	r3,-4(fp)
   80a28:	188000c8 	cmpgei	r2,r3,3
   80a2c:	1000041e 	bne	r2,zero,80a40 <handle_button_interrupts+0x78>
   80a30:	e0ffff17 	ldw	r3,-4(fp)
   80a34:	18800060 	cmpeqi	r2,r3,1
   80a38:	1000081e 	bne	r2,zero,80a5c <handle_button_interrupts+0x94>
   80a3c:	00001206 	br	80a88 <handle_button_interrupts+0xc0>
   80a40:	e0ffff17 	ldw	r3,-4(fp)
   80a44:	18800120 	cmpeqi	r2,r3,4
   80a48:	10000a1e 	bne	r2,zero,80a74 <handle_button_interrupts+0xac>
   80a4c:	e0ffff17 	ldw	r3,-4(fp)
   80a50:	18800220 	cmpeqi	r2,r3,8
   80a54:	10000a1e 	bne	r2,zero,80a80 <handle_button_interrupts+0xb8>
   80a58:	00000b06 	br	80a88 <handle_button_interrupts+0xc0>
	case 1: KEY0_Pressed(PB_irq_data); break;
   80a5c:	e13ffe17 	ldw	r4,-8(fp)
   80a60:	00808b00 	call	808b0 <KEY0_Pressed>
   80a64:	00000806 	br	80a88 <handle_button_interrupts+0xc0>
	case 2: KEY1_Pressed(PB_irq_data); break;
   80a68:	e13ffe17 	ldw	r4,-8(fp)
   80a6c:	00809500 	call	80950 <KEY1_Pressed>
   80a70:	00000506 	br	80a88 <handle_button_interrupts+0xc0>
	case 4: KEY2_Pressed(PB_irq_data); break;
   80a74:	e13ffe17 	ldw	r4,-8(fp)
   80a78:	00809700 	call	80970 <KEY2_Pressed>
   80a7c:	00000206 	br	80a88 <handle_button_interrupts+0xc0>
	case 8: KEY3_Pressed(PB_irq_data); break;
   80a80:	e13ffe17 	ldw	r4,-8(fp)
   80a84:	008099c0 	call	8099c <KEY3_Pressed>
	}
	IOWR(PUSH_BUTTON_I_BASE, 3, 0x0);
   80a88:	00800434 	movhi	r2,16
   80a8c:	10952b04 	addi	r2,r2,21676
   80a90:	10000035 	stwio	zero,0(r2)
}
   80a94:	e037883a 	mov	sp,fp
   80a98:	dfc00117 	ldw	ra,4(sp)
   80a9c:	df000017 	ldw	fp,0(sp)
   80aa0:	dec00204 	addi	sp,sp,8
   80aa4:	f800283a 	ret

00080aa8 <init_button_irq>:

// Function for initializing the ISR of the PBs
// The PBs are setup to generate interrupt on falling edge,
// and the interrupt is captured when the edge comes
void init_button_irq(PB_irq_data_struct *PB_irq_data) {
   80aa8:	defffd04 	addi	sp,sp,-12
   80aac:	dfc00215 	stw	ra,8(sp)
   80ab0:	df000115 	stw	fp,4(sp)
   80ab4:	df000104 	addi	fp,sp,4
   80ab8:	e13fff15 	stw	r4,-4(fp)
  // Enable all 4 button interrupts
  IOWR(PUSH_BUTTON_I_BASE, 2, BUTTON_INT_MASK);
   80abc:	00800434 	movhi	r2,16
   80ac0:	10952a04 	addi	r2,r2,21672
   80ac4:	00c003c4 	movi	r3,15
   80ac8:	10c00035 	stwio	r3,0(r2)

  // Reset the edge capture register
  IOWR(PUSH_BUTTON_I_BASE, 3, 0x0);
   80acc:	00800434 	movhi	r2,16
   80ad0:	10952b04 	addi	r2,r2,21676
   80ad4:	10000035 	stwio	zero,0(r2)

  // Register the interrupt handler
  alt_irq_register(PUSH_BUTTON_I_IRQ, (void *)PB_irq_data, (void*)handle_button_interrupts );
   80ad8:	01000044 	movi	r4,1
   80adc:	e17fff17 	ldw	r5,-4(fp)
   80ae0:	01800234 	movhi	r6,8
   80ae4:	31827204 	addi	r6,r6,2504
   80ae8:	008f7900 	call	8f790 <alt_irq_register>
}
   80aec:	e037883a 	mov	sp,fp
   80af0:	dfc00117 	ldw	ra,4(sp)
   80af4:	df000017 	ldw	fp,0(sp)
   80af8:	dec00204 	addi	sp,sp,8
   80afc:	f800283a 	ret

00080b00 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
   80b00:	defffa04 	addi	sp,sp,-24
   80b04:	dfc00515 	stw	ra,20(sp)
   80b08:	df000415 	stw	fp,16(sp)
   80b0c:	df000404 	addi	fp,sp,16
   80b10:	e13ffe15 	stw	r4,-8(fp)
   80b14:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
   80b18:	e03ffd15 	stw	zero,-12(fp)
    
    if (sd_card_is_Present())
   80b1c:	00835c80 	call	835c8 <sd_card_is_Present>
   80b20:	1005003a 	cmpeq	r2,r2,zero
   80b24:	10001f1e 	bne	r2,zero,80ba4 <Write_Sector_Data+0xa4>
    {
        short int reg_state = 0xff;
   80b28:	00803fc4 	movi	r2,255
   80b2c:	e0bffc0d 	sth	r2,-16(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        *command_argument_register = (sector_index + partition_offset)*512;
   80b30:	d126bf17 	ldw	r4,-25860(gp)
   80b34:	e0fffe17 	ldw	r3,-8(fp)
   80b38:	e0bfff17 	ldw	r2,-4(fp)
   80b3c:	1885883a 	add	r2,r3,r2
   80b40:	1004927a 	slli	r2,r2,9
   80b44:	20800015 	stw	r2,0(r4)
        *command_register = CMD_WRITE_BLOCK;
   80b48:	d0e6be17 	ldw	r3,-25864(gp)
   80b4c:	00800604 	movi	r2,24
   80b50:	1880000d 	sth	r2,0(r3)
        do {
            reg_state = *aux_status_register;
   80b54:	d0a6bb17 	ldw	r2,-25876(gp)
   80b58:	1080000b 	ldhu	r2,0(r2)
   80b5c:	e0bffc0d 	sth	r2,-16(fp)
        } while ((reg_state & 0x04)!=0);
   80b60:	e0bffc0b 	ldhu	r2,-16(fp)
   80b64:	10bfffcc 	andi	r2,r2,65535
   80b68:	1080010c 	andi	r2,r2,4
   80b6c:	1004c03a 	cmpne	r2,r2,zero
   80b70:	103ff81e 	bne	r2,zero,80b54 <Write_Sector_Data+0x54>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
   80b74:	e0bffc0b 	ldhu	r2,-16(fp)
   80b78:	10bfffcc 	andi	r2,r2,65535
   80b7c:	1080040c 	andi	r2,r2,16
   80b80:	1004c03a 	cmpne	r2,r2,zero
   80b84:	1000071e 	bne	r2,zero,80ba4 <Write_Sector_Data+0xa4>
        {
            result = true;
   80b88:	00800044 	movi	r2,1
   80b8c:	e0bffd15 	stw	r2,-12(fp)
            current_sector_modified = false;
   80b90:	d026c215 	stw	zero,-25848(gp)
            current_sector_index = sector_index+partition_offset;
   80b94:	e0fffe17 	ldw	r3,-8(fp)
   80b98:	e0bfff17 	ldw	r2,-4(fp)
   80b9c:	1885883a 	add	r2,r3,r2
   80ba0:	d0a6c315 	stw	r2,-25844(gp)
        }
    }
    return result;
   80ba4:	e0bffd17 	ldw	r2,-12(fp)
}
   80ba8:	e037883a 	mov	sp,fp
   80bac:	dfc00117 	ldw	ra,4(sp)
   80bb0:	df000017 	ldw	fp,0(sp)
   80bb4:	dec00204 	addi	sp,sp,8
   80bb8:	f800283a 	ret

00080bbc <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
   80bbc:	defffd04 	addi	sp,sp,-12
   80bc0:	dfc00215 	stw	ra,8(sp)
   80bc4:	df000115 	stw	fp,4(sp)
   80bc8:	df000104 	addi	fp,sp,4
    bool result = true;
   80bcc:	00800044 	movi	r2,1
   80bd0:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
   80bd4:	d0a6c217 	ldw	r2,-25848(gp)
   80bd8:	1005003a 	cmpeq	r2,r2,zero
   80bdc:	1000051e 	bne	r2,zero,80bf4 <Save_Modified_Sector+0x38>
    {
        result = Write_Sector_Data(current_sector_index, 0);
   80be0:	d0a6c317 	ldw	r2,-25844(gp)
   80be4:	1009883a 	mov	r4,r2
   80be8:	000b883a 	mov	r5,zero
   80bec:	0080b000 	call	80b00 <Write_Sector_Data>
   80bf0:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
   80bf4:	e0bfff17 	ldw	r2,-4(fp)
}
   80bf8:	e037883a 	mov	sp,fp
   80bfc:	dfc00117 	ldw	ra,4(sp)
   80c00:	df000017 	ldw	fp,0(sp)
   80c04:	dec00204 	addi	sp,sp,8
   80c08:	f800283a 	ret

00080c0c <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
   80c0c:	defff904 	addi	sp,sp,-28
   80c10:	dfc00615 	stw	ra,24(sp)
   80c14:	df000515 	stw	fp,20(sp)
   80c18:	df000504 	addi	fp,sp,20
   80c1c:	e13ffd15 	stw	r4,-12(fp)
   80c20:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
   80c24:	e03ffc15 	stw	zero,-16(fp)
    
	if (sd_card_is_Present())
   80c28:	00835c80 	call	835c8 <sd_card_is_Present>
   80c2c:	1005003a 	cmpeq	r2,r2,zero
   80c30:	10002a1e 	bne	r2,zero,80cdc <Read_Sector_Data+0xd0>
	{
		short int reg_state = 0xff;
   80c34:	00803fc4 	movi	r2,255
   80c38:	e0bffb0d 	sth	r2,-20(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
   80c3c:	d0a6c217 	ldw	r2,-25848(gp)
   80c40:	1005003a 	cmpeq	r2,r2,zero
   80c44:	1000081e 	bne	r2,zero,80c68 <Read_Sector_Data+0x5c>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
   80c48:	d0a6c317 	ldw	r2,-25844(gp)
   80c4c:	1009883a 	mov	r4,r2
   80c50:	000b883a 	mov	r5,zero
   80c54:	0080b000 	call	80b00 <Write_Sector_Data>
   80c58:	1004c03a 	cmpne	r2,r2,zero
   80c5c:	1000021e 	bne	r2,zero,80c68 <Read_Sector_Data+0x5c>
            {
                return false;
   80c60:	e03fff15 	stw	zero,-4(fp)
   80c64:	00001f06 	br	80ce4 <Read_Sector_Data+0xd8>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		*command_argument_register = (sector_index + partition_offset)*512;
   80c68:	d126bf17 	ldw	r4,-25860(gp)
   80c6c:	e0fffd17 	ldw	r3,-12(fp)
   80c70:	e0bffe17 	ldw	r2,-8(fp)
   80c74:	1885883a 	add	r2,r3,r2
   80c78:	1004927a 	slli	r2,r2,9
   80c7c:	20800015 	stw	r2,0(r4)
		*command_register = CMD_READ_BLOCK;
   80c80:	d0e6be17 	ldw	r3,-25864(gp)
   80c84:	00800444 	movi	r2,17
   80c88:	1880000d 	sth	r2,0(r3)
		do {
			reg_state = *aux_status_register;
   80c8c:	d0a6bb17 	ldw	r2,-25876(gp)
   80c90:	1080000b 	ldhu	r2,0(r2)
   80c94:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04)!=0);
   80c98:	e0bffb0b 	ldhu	r2,-20(fp)
   80c9c:	10bfffcc 	andi	r2,r2,65535
   80ca0:	1080010c 	andi	r2,r2,4
   80ca4:	1004c03a 	cmpne	r2,r2,zero
   80ca8:	103ff81e 	bne	r2,zero,80c8c <Read_Sector_Data+0x80>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
   80cac:	e0bffb0b 	ldhu	r2,-20(fp)
   80cb0:	10bfffcc 	andi	r2,r2,65535
   80cb4:	1080040c 	andi	r2,r2,16
   80cb8:	1004c03a 	cmpne	r2,r2,zero
   80cbc:	1000071e 	bne	r2,zero,80cdc <Read_Sector_Data+0xd0>
		{
			result = true;
   80cc0:	00800044 	movi	r2,1
   80cc4:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
   80cc8:	d026c215 	stw	zero,-25848(gp)
            current_sector_index = sector_index+partition_offset;
   80ccc:	e0fffd17 	ldw	r3,-12(fp)
   80cd0:	e0bffe17 	ldw	r2,-8(fp)
   80cd4:	1885883a 	add	r2,r3,r2
   80cd8:	d0a6c315 	stw	r2,-25844(gp)
		}
	}
	return result;
   80cdc:	e0bffc17 	ldw	r2,-16(fp)
   80ce0:	e0bfff15 	stw	r2,-4(fp)
   80ce4:	e0bfff17 	ldw	r2,-4(fp)
}
   80ce8:	e037883a 	mov	sp,fp
   80cec:	dfc00117 	ldw	ra,4(sp)
   80cf0:	df000017 	ldw	fp,0(sp)
   80cf4:	dec00204 	addi	sp,sp,8
   80cf8:	f800283a 	ret

00080cfc <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
   80cfc:	defffa04 	addi	sp,sp,-24
   80d00:	dfc00515 	stw	ra,20(sp)
   80d04:	df000415 	stw	fp,16(sp)
   80d08:	df000404 	addi	fp,sp,16
   80d0c:	e13ffd15 	stw	r4,-12(fp)
   80d10:	e17ffe15 	stw	r5,-8(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
   80d14:	e0bffd17 	ldw	r2,-12(fp)
   80d18:	1006d23a 	srli	r3,r2,8
   80d1c:	d0a6c017 	ldw	r2,-25856(gp)
   80d20:	1885883a 	add	r2,r3,r2
   80d24:	e0bffc15 	stw	r2,-16(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
   80d28:	00800374 	movhi	r2,13
   80d2c:	10b82004 	addi	r2,r2,-8064
   80d30:	10c01117 	ldw	r3,68(r2)
   80d34:	e0bffc17 	ldw	r2,-16(fp)
   80d38:	10c5883a 	add	r2,r2,r3
   80d3c:	e0bffc15 	stw	r2,-16(fp)
     
    if (sector_index != current_sector_index)
   80d40:	d0e6c317 	ldw	r3,-25844(gp)
   80d44:	e0bffc17 	ldw	r2,-16(fp)
   80d48:	10c00726 	beq	r2,r3,80d68 <get_cluster_flag+0x6c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
   80d4c:	e13ffc17 	ldw	r4,-16(fp)
   80d50:	000b883a 	mov	r5,zero
   80d54:	0080c0c0 	call	80c0c <Read_Sector_Data>
   80d58:	1004c03a 	cmpne	r2,r2,zero
   80d5c:	1000021e 	bne	r2,zero,80d68 <get_cluster_flag+0x6c>
        {
            return false;
   80d60:	e03fff15 	stw	zero,-4(fp)
   80d64:	00000806 	br	80d88 <get_cluster_flag+0x8c>
        }
    }
    *flag = (*((volatile unsigned short int *) SD_CARD_BUFFER(SD_CARD_0_BASE, 2*(cluster_index % 256))));
   80d68:	e0bffd17 	ldw	r2,-12(fp)
   80d6c:	10803fcc 	andi	r2,r2,255
   80d70:	1085883a 	add	r2,r2,r2
   80d74:	10c0000b 	ldhu	r3,0(r2)
   80d78:	e0bffe17 	ldw	r2,-8(fp)
   80d7c:	10c0000d 	sth	r3,0(r2)
    return true;
   80d80:	00800044 	movi	r2,1
   80d84:	e0bfff15 	stw	r2,-4(fp)
   80d88:	e0bfff17 	ldw	r2,-4(fp)
}
   80d8c:	e037883a 	mov	sp,fp
   80d90:	dfc00117 	ldw	ra,4(sp)
   80d94:	df000017 	ldw	fp,0(sp)
   80d98:	dec00204 	addi	sp,sp,8
   80d9c:	f800283a 	ret

00080da0 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
   80da0:	defff904 	addi	sp,sp,-28
   80da4:	dfc00615 	stw	ra,24(sp)
   80da8:	df000515 	stw	fp,20(sp)
   80dac:	df000504 	addi	fp,sp,20
   80db0:	e13ffc15 	stw	r4,-16(fp)
   80db4:	e1bffe15 	stw	r6,-8(fp)
   80db8:	e17ffd0d 	sth	r5,-12(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
   80dbc:	e0bffc17 	ldw	r2,-16(fp)
   80dc0:	1006d23a 	srli	r3,r2,8
   80dc4:	d0a6c017 	ldw	r2,-25856(gp)
   80dc8:	1885883a 	add	r2,r3,r2
   80dcc:	e0bffb15 	stw	r2,-20(fp)
    
    if (first_fat)
   80dd0:	e0bffe17 	ldw	r2,-8(fp)
   80dd4:	1005003a 	cmpeq	r2,r2,zero
   80dd8:	1000071e 	bne	r2,zero,80df8 <mark_cluster+0x58>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
   80ddc:	00800374 	movhi	r2,13
   80de0:	10b82004 	addi	r2,r2,-8064
   80de4:	10c01117 	ldw	r3,68(r2)
   80de8:	e0bffb17 	ldw	r2,-20(fp)
   80dec:	10c5883a 	add	r2,r2,r3
   80df0:	e0bffb15 	stw	r2,-20(fp)
   80df4:	00000606 	br	80e10 <mark_cluster+0x70>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
   80df8:	00800374 	movhi	r2,13
   80dfc:	10b82004 	addi	r2,r2,-8064
   80e00:	10c01217 	ldw	r3,72(r2)
   80e04:	e0bffb17 	ldw	r2,-20(fp)
   80e08:	10c5883a 	add	r2,r2,r3
   80e0c:	e0bffb15 	stw	r2,-20(fp)
    }
     
    if (sector_index != current_sector_index)
   80e10:	d0e6c317 	ldw	r3,-25844(gp)
   80e14:	e0bffb17 	ldw	r2,-20(fp)
   80e18:	10c00726 	beq	r2,r3,80e38 <mark_cluster+0x98>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
   80e1c:	e13ffb17 	ldw	r4,-20(fp)
   80e20:	000b883a 	mov	r5,zero
   80e24:	0080c0c0 	call	80c0c <Read_Sector_Data>
   80e28:	1004c03a 	cmpne	r2,r2,zero
   80e2c:	1000021e 	bne	r2,zero,80e38 <mark_cluster+0x98>
        {
            return false;
   80e30:	e03fff15 	stw	zero,-4(fp)
   80e34:	00000a06 	br	80e60 <mark_cluster+0xc0>
        }
    }
    (*((volatile short int *) SD_CARD_BUFFER(SD_CARD_0_BASE, 2*(cluster_index % 256)))) = flag;
   80e38:	e0bffc17 	ldw	r2,-16(fp)
   80e3c:	10803fcc 	andi	r2,r2,255
   80e40:	1085883a 	add	r2,r2,r2
   80e44:	1007883a 	mov	r3,r2
   80e48:	e0bffd0b 	ldhu	r2,-12(fp)
   80e4c:	1880000d 	sth	r2,0(r3)
    current_sector_modified = true;
   80e50:	00800044 	movi	r2,1
   80e54:	d0a6c215 	stw	r2,-25848(gp)
    return true;
   80e58:	00800044 	movi	r2,1
   80e5c:	e0bfff15 	stw	r2,-4(fp)
   80e60:	e0bfff17 	ldw	r2,-4(fp)
}
   80e64:	e037883a 	mov	sp,fp
   80e68:	dfc00117 	ldw	ra,4(sp)
   80e6c:	df000017 	ldw	fp,0(sp)
   80e70:	dec00204 	addi	sp,sp,8
   80e74:	f800283a 	ret

00080e78 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
   80e78:	defff704 	addi	sp,sp,-36
   80e7c:	dfc00815 	stw	ra,32(sp)
   80e80:	df000715 	stw	fp,28(sp)
   80e84:	df000704 	addi	fp,sp,28
	bool result = false;
   80e88:	e03fff15 	stw	zero,-4(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
   80e8c:	0009883a 	mov	r4,zero
   80e90:	000b883a 	mov	r5,zero
   80e94:	0080c0c0 	call	80c0c <Read_Sector_Data>
   80e98:	1005003a 	cmpeq	r2,r2,zero
   80e9c:	1000461e 	bne	r2,zero,80fb8 <Check_for_Master_Boot_Record+0x140>
	{
		end =  (*((volatile short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, 0x1fe)));
   80ea0:	00807f84 	movi	r2,510
   80ea4:	1080000b 	ldhu	r2,0(r2)
   80ea8:	10bfffcc 	andi	r2,r2,65535
   80eac:	10a0001c 	xori	r2,r2,32768
   80eb0:	10a00004 	addi	r2,r2,-32768
   80eb4:	e0bffd15 	stw	r2,-12(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
   80eb8:	e0bffd17 	ldw	r2,-12(fp)
   80ebc:	10ffffcc 	andi	r3,r2,65535
   80ec0:	00aa9554 	movui	r2,43605
   80ec4:	18803c1e 	bne	r3,r2,80fb8 <Check_for_Master_Boot_Record+0x140>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
   80ec8:	e03ffe15 	stw	zero,-8(fp)
   80ecc:	00003706 	br	80fac <Check_for_Master_Boot_Record+0x134>
			{
				int partition_data_offset = (index * 16) + 0x01be;
   80ed0:	e0bffe17 	ldw	r2,-8(fp)
   80ed4:	1004913a 	slli	r2,r2,4
   80ed8:	10806f84 	addi	r2,r2,446
   80edc:	e0bffa15 	stw	r2,-24(fp)
				char type;
		        
				// Read Partition type
				type = (*((volatile unsigned char *)SD_CARD_BUFFER(SD_CARD_0_BASE, partition_data_offset + 0x04)));
   80ee0:	e0bffa17 	ldw	r2,-24(fp)
   80ee4:	10800104 	addi	r2,r2,4
   80ee8:	10800003 	ldbu	r2,0(r2)
   80eec:	e0bff905 	stb	r2,-28(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
   80ef0:	e0bff907 	ldb	r2,-28(fp)
   80ef4:	10800060 	cmpeqi	r2,r2,1
   80ef8:	1000091e 	bne	r2,zero,80f20 <Check_for_Master_Boot_Record+0xa8>
   80efc:	e0bff907 	ldb	r2,-28(fp)
   80f00:	10800120 	cmpeqi	r2,r2,4
   80f04:	1000061e 	bne	r2,zero,80f20 <Check_for_Master_Boot_Record+0xa8>
   80f08:	e0bff907 	ldb	r2,-28(fp)
   80f0c:	108001a0 	cmpeqi	r2,r2,6
   80f10:	1000031e 	bne	r2,zero,80f20 <Check_for_Master_Boot_Record+0xa8>
   80f14:	e0bff907 	ldb	r2,-28(fp)
   80f18:	10800398 	cmpnei	r2,r2,14
   80f1c:	1000201e 	bne	r2,zero,80fa0 <Check_for_Master_Boot_Record+0x128>
				{
					// Get partition offset and size.
					offset = ((*((unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, partition_data_offset + 0x0A))) << 16) | (*((unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, partition_data_offset + 0x08)));
   80f20:	e0bffa17 	ldw	r2,-24(fp)
   80f24:	10800284 	addi	r2,r2,10
   80f28:	1080000b 	ldhu	r2,0(r2)
   80f2c:	10bfffcc 	andi	r2,r2,65535
   80f30:	1006943a 	slli	r3,r2,16
   80f34:	e0bffa17 	ldw	r2,-24(fp)
   80f38:	10800204 	addi	r2,r2,8
   80f3c:	1080000b 	ldhu	r2,0(r2)
   80f40:	10bfffcc 	andi	r2,r2,65535
   80f44:	1884b03a 	or	r2,r3,r2
   80f48:	e0bffc15 	stw	r2,-16(fp)
					partition_size = ((*((unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, partition_data_offset + 0x0E))) << 16) | (*((unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, partition_data_offset + 0x0C)));
   80f4c:	e0bffa17 	ldw	r2,-24(fp)
   80f50:	10800384 	addi	r2,r2,14
   80f54:	1080000b 	ldhu	r2,0(r2)
   80f58:	10bfffcc 	andi	r2,r2,65535
   80f5c:	1006943a 	slli	r3,r2,16
   80f60:	e0bffa17 	ldw	r2,-24(fp)
   80f64:	10800304 	addi	r2,r2,12
   80f68:	1080000b 	ldhu	r2,0(r2)
   80f6c:	10bfffcc 	andi	r2,r2,65535
   80f70:	1884b03a 	or	r2,r3,r2
   80f74:	e0bffb15 	stw	r2,-20(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
   80f78:	e0bffb17 	ldw	r2,-20(fp)
   80f7c:	10800050 	cmplti	r2,r2,1
   80f80:	1000071e 	bne	r2,zero,80fa0 <Check_for_Master_Boot_Record+0x128>
					{
						result = true;
   80f84:	00800044 	movi	r2,1
   80f88:	e0bfff15 	stw	r2,-4(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
   80f8c:	e0bffb17 	ldw	r2,-20(fp)
   80f90:	d0a6c115 	stw	r2,-25852(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
   80f94:	e0bffc17 	ldw	r2,-16(fp)
   80f98:	d0a6c015 	stw	r2,-25856(gp)
						break;
   80f9c:	00000606 	br	80fb8 <Check_for_Master_Boot_Record+0x140>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
   80fa0:	e0bffe17 	ldw	r2,-8(fp)
   80fa4:	10800044 	addi	r2,r2,1
   80fa8:	e0bffe15 	stw	r2,-8(fp)
   80fac:	e0bffe17 	ldw	r2,-8(fp)
   80fb0:	10800110 	cmplti	r2,r2,4
   80fb4:	103fc61e 	bne	r2,zero,80ed0 <Check_for_Master_Boot_Record+0x58>
				}
			}
		}
	}

	return result;
   80fb8:	e0bfff17 	ldw	r2,-4(fp)
}
   80fbc:	e037883a 	mov	sp,fp
   80fc0:	dfc00117 	ldw	ra,4(sp)
   80fc4:	df000017 	ldw	fp,0(sp)
   80fc8:	dec00204 	addi	sp,sp,8
   80fcc:	f800283a 	ret

00080fd0 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
   80fd0:	defff804 	addi	sp,sp,-32
   80fd4:	dfc00715 	stw	ra,28(sp)
   80fd8:	df000615 	stw	fp,24(sp)
   80fdc:	df000604 	addi	fp,sp,24
   80fe0:	e13ffc15 	stw	r4,-16(fp)
   80fe4:	e17ffd15 	stw	r5,-12(fp)
   80fe8:	e1bffe15 	stw	r6,-8(fp)
   80fec:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
   80ff0:	e03ffb15 	stw	zero,-20(fp)
	if (((offset & 0x01f) == 0) && (sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   80ff4:	e0bffc17 	ldw	r2,-16(fp)
   80ff8:	108007cc 	andi	r2,r2,31
   80ffc:	1004c03a 	cmpne	r2,r2,zero
   81000:	10005f1e 	bne	r2,zero,81180 <Read_File_Record_At_Offset+0x1b0>
   81004:	00835c80 	call	835c8 <sd_card_is_Present>
   81008:	1005003a 	cmpeq	r2,r2,zero
   8100c:	10005c1e 	bne	r2,zero,81180 <Read_File_Record_At_Offset+0x1b0>
   81010:	d0a6ba17 	ldw	r2,-25880(gp)
   81014:	1005003a 	cmpeq	r2,r2,zero
   81018:	1000591e 	bne	r2,zero,81180 <Read_File_Record_At_Offset+0x1b0>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
   8101c:	e03ffa15 	stw	zero,-24(fp)
   81020:	00000c06 	br	81054 <Read_File_Record_At_Offset+0x84>
		{
			record->name[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+counter));
   81024:	e13ffa17 	ldw	r4,-24(fp)
   81028:	e0fffc17 	ldw	r3,-16(fp)
   8102c:	e0bffa17 	ldw	r2,-24(fp)
   81030:	1885883a 	add	r2,r3,r2
   81034:	10800003 	ldbu	r2,0(r2)
   81038:	1007883a 	mov	r3,r2
   8103c:	e0bffd17 	ldw	r2,-12(fp)
   81040:	1105883a 	add	r2,r2,r4
   81044:	10c00005 	stb	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
   81048:	e0bffa17 	ldw	r2,-24(fp)
   8104c:	10800044 	addi	r2,r2,1
   81050:	e0bffa15 	stw	r2,-24(fp)
   81054:	e0bffa17 	ldw	r2,-24(fp)
   81058:	10800210 	cmplti	r2,r2,8
   8105c:	103ff11e 	bne	r2,zero,81024 <Read_File_Record_At_Offset+0x54>
		{
			record->name[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+counter));
		}        
		for (counter = 0; counter < 3; counter++)
   81060:	e03ffa15 	stw	zero,-24(fp)
   81064:	00000e06 	br	810a0 <Read_File_Record_At_Offset+0xd0>
		{
			record->extension[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+counter+8));
   81068:	e13ffa17 	ldw	r4,-24(fp)
   8106c:	e0fffc17 	ldw	r3,-16(fp)
   81070:	e0bffa17 	ldw	r2,-24(fp)
   81074:	1885883a 	add	r2,r3,r2
   81078:	10800204 	addi	r2,r2,8
   8107c:	10800003 	ldbu	r2,0(r2)
   81080:	1007883a 	mov	r3,r2
   81084:	e0bffd17 	ldw	r2,-12(fp)
   81088:	2085883a 	add	r2,r4,r2
   8108c:	10800204 	addi	r2,r2,8
   81090:	10c00005 	stb	r3,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+counter));
		}        
		for (counter = 0; counter < 3; counter++)
   81094:	e0bffa17 	ldw	r2,-24(fp)
   81098:	10800044 	addi	r2,r2,1
   8109c:	e0bffa15 	stw	r2,-24(fp)
   810a0:	e0bffa17 	ldw	r2,-24(fp)
   810a4:	108000d0 	cmplti	r2,r2,3
   810a8:	103fef1e 	bne	r2,zero,81068 <Read_File_Record_At_Offset+0x98>
		{
			record->extension[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+counter+8));
		}        
		record->attributes          =   *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+11));
   810ac:	e0bffc17 	ldw	r2,-16(fp)
   810b0:	108002c4 	addi	r2,r2,11
   810b4:	10800003 	ldbu	r2,0(r2)
   810b8:	1007883a 	mov	r3,r2
   810bc:	e0bffd17 	ldw	r2,-12(fp)
   810c0:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+14));
   810c4:	e0bffc17 	ldw	r2,-16(fp)
   810c8:	10800384 	addi	r2,r2,14
   810cc:	10c0000b 	ldhu	r3,0(r2)
   810d0:	e0bffd17 	ldw	r2,-12(fp)
   810d4:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+16));
   810d8:	e0bffc17 	ldw	r2,-16(fp)
   810dc:	10800404 	addi	r2,r2,16
   810e0:	10c0000b 	ldhu	r3,0(r2)
   810e4:	e0bffd17 	ldw	r2,-12(fp)
   810e8:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+18));
   810ec:	e0bffc17 	ldw	r2,-16(fp)
   810f0:	10800484 	addi	r2,r2,18
   810f4:	10c0000b 	ldhu	r3,0(r2)
   810f8:	e0bffd17 	ldw	r2,-12(fp)
   810fc:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	*((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+22));
   81100:	e0bffc17 	ldw	r2,-16(fp)
   81104:	10800584 	addi	r2,r2,22
   81108:	10c0000b 	ldhu	r3,0(r2)
   8110c:	e0bffd17 	ldw	r2,-12(fp)
   81110:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	*((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+24));
   81114:	e0bffc17 	ldw	r2,-16(fp)
   81118:	10800604 	addi	r2,r2,24
   8111c:	10c0000b 	ldhu	r3,0(r2)
   81120:	e0bffd17 	ldw	r2,-12(fp)
   81124:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	*((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+26));
   81128:	e0bffc17 	ldw	r2,-16(fp)
   8112c:	10800684 	addi	r2,r2,26
   81130:	10c0000b 	ldhu	r3,0(r2)
   81134:	e0bffd17 	ldw	r2,-12(fp)
   81138:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	*((volatile unsigned int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+28));
   8113c:	e0bffc17 	ldw	r2,-16(fp)
   81140:	10800704 	addi	r2,r2,28
   81144:	10c00017 	ldw	r3,0(r2)
   81148:	e0bffd17 	ldw	r2,-12(fp)
   8114c:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
   81150:	e0fffd17 	ldw	r3,-12(fp)
   81154:	e0bffe17 	ldw	r2,-8(fp)
   81158:	18800a15 	stw	r2,40(r3)
		record->file_record_sector_in_cluster = sector_in_cluster;
   8115c:	e0fffd17 	ldw	r3,-12(fp)
   81160:	e0bfff17 	ldw	r2,-4(fp)
   81164:	18800b15 	stw	r2,44(r3)
		record->file_record_offset = offset;
   81168:	e0bffc17 	ldw	r2,-16(fp)
   8116c:	1007883a 	mov	r3,r2
   81170:	e0bffd17 	ldw	r2,-12(fp)
   81174:	10c00c0d 	sth	r3,48(r2)
		result = true;
   81178:	00800044 	movi	r2,1
   8117c:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
   81180:	e0bffb17 	ldw	r2,-20(fp)
}
   81184:	e037883a 	mov	sp,fp
   81188:	dfc00117 	ldw	ra,4(sp)
   8118c:	df000017 	ldw	fp,0(sp)
   81190:	dec00204 	addi	sp,sp,8
   81194:	f800283a 	ret

00081198 <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
   81198:	defff904 	addi	sp,sp,-28
   8119c:	dfc00615 	stw	ra,24(sp)
   811a0:	df000515 	stw	fp,20(sp)
   811a4:	df000504 	addi	fp,sp,20
   811a8:	e13ffe15 	stw	r4,-8(fp)
   811ac:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
   811b0:	e03ffd15 	stw	zero,-12(fp)
    if (((offset & 0x01f) == 0) && (sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   811b4:	e0bffe17 	ldw	r2,-8(fp)
   811b8:	108007cc 	andi	r2,r2,31
   811bc:	1004c03a 	cmpne	r2,r2,zero
   811c0:	10006d1e 	bne	r2,zero,81378 <Write_File_Record_At_Offset+0x1e0>
   811c4:	00835c80 	call	835c8 <sd_card_is_Present>
   811c8:	1005003a 	cmpeq	r2,r2,zero
   811cc:	10006a1e 	bne	r2,zero,81378 <Write_File_Record_At_Offset+0x1e0>
   811d0:	d0a6ba17 	ldw	r2,-25880(gp)
   811d4:	1005003a 	cmpeq	r2,r2,zero
   811d8:	1000671e 	bne	r2,zero,81378 <Write_File_Record_At_Offset+0x1e0>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
   811dc:	e03ffc15 	stw	zero,-16(fp)
   811e0:	00001b06 	br	81250 <Write_File_Record_At_Offset+0xb8>
        {
            short int two_chars = (short int) record->name[counter+1];
   811e4:	e0bffc17 	ldw	r2,-16(fp)
   811e8:	10c00044 	addi	r3,r2,1
   811ec:	e0bfff17 	ldw	r2,-4(fp)
   811f0:	10c5883a 	add	r2,r2,r3
   811f4:	10800003 	ldbu	r2,0(r2)
   811f8:	10803fcc 	andi	r2,r2,255
   811fc:	e0bffb0d 	sth	r2,-20(fp)
            two_chars = two_chars << 8;
   81200:	e0bffb0f 	ldh	r2,-20(fp)
   81204:	1004923a 	slli	r2,r2,8
   81208:	e0bffb0d 	sth	r2,-20(fp)
            two_chars = two_chars | record->name[counter];
   8120c:	e0fffc17 	ldw	r3,-16(fp)
   81210:	e0bfff17 	ldw	r2,-4(fp)
   81214:	10c5883a 	add	r2,r2,r3
   81218:	10800003 	ldbu	r2,0(r2)
   8121c:	10c03fcc 	andi	r3,r2,255
   81220:	e0bffb0b 	ldhu	r2,-20(fp)
   81224:	10c4b03a 	or	r2,r2,r3
   81228:	e0bffb0d 	sth	r2,-20(fp)
            *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+counter)) = two_chars;
   8122c:	e0fffe17 	ldw	r3,-8(fp)
   81230:	e0bffc17 	ldw	r2,-16(fp)
   81234:	1885883a 	add	r2,r3,r2
   81238:	1007883a 	mov	r3,r2
   8123c:	e0bffb0b 	ldhu	r2,-20(fp)
   81240:	1880000d 	sth	r2,0(r3)
    bool result = false;
    if (((offset & 0x01f) == 0) && (sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
   81244:	e0bffc17 	ldw	r2,-16(fp)
   81248:	10800084 	addi	r2,r2,2
   8124c:	e0bffc15 	stw	r2,-16(fp)
   81250:	e0bffc17 	ldw	r2,-16(fp)
   81254:	10800210 	cmplti	r2,r2,8
   81258:	103fe21e 	bne	r2,zero,811e4 <Write_File_Record_At_Offset+0x4c>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+counter)) = two_chars;
        }        
        for (counter = 0; counter < 3; counter++)
   8125c:	e03ffc15 	stw	zero,-16(fp)
   81260:	00000e06 	br	8129c <Write_File_Record_At_Offset+0x104>
        {
            *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+counter+8)) = record->extension[counter];
   81264:	e0fffe17 	ldw	r3,-8(fp)
   81268:	e0bffc17 	ldw	r2,-16(fp)
   8126c:	1885883a 	add	r2,r3,r2
   81270:	10800204 	addi	r2,r2,8
   81274:	1009883a 	mov	r4,r2
   81278:	e0fffc17 	ldw	r3,-16(fp)
   8127c:	e0bfff17 	ldw	r2,-4(fp)
   81280:	1885883a 	add	r2,r3,r2
   81284:	10800204 	addi	r2,r2,8
   81288:	10800003 	ldbu	r2,0(r2)
   8128c:	20800005 	stb	r2,0(r4)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+counter)) = two_chars;
        }        
        for (counter = 0; counter < 3; counter++)
   81290:	e0bffc17 	ldw	r2,-16(fp)
   81294:	10800044 	addi	r2,r2,1
   81298:	e0bffc15 	stw	r2,-16(fp)
   8129c:	e0bffc17 	ldw	r2,-16(fp)
   812a0:	108000d0 	cmplti	r2,r2,3
   812a4:	103fef1e 	bne	r2,zero,81264 <Write_File_Record_At_Offset+0xcc>
        {
            *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+counter+8)) = record->extension[counter];
        }        
        *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+11))  =   record->attributes;
   812a8:	e0bffe17 	ldw	r2,-8(fp)
   812ac:	108002c4 	addi	r2,r2,11
   812b0:	1007883a 	mov	r3,r2
   812b4:	e0bfff17 	ldw	r2,-4(fp)
   812b8:	108002c3 	ldbu	r2,11(r2)
   812bc:	18800005 	stb	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+14)) = record->create_time;
   812c0:	e0bffe17 	ldw	r2,-8(fp)
   812c4:	10800384 	addi	r2,r2,14
   812c8:	1007883a 	mov	r3,r2
   812cc:	e0bfff17 	ldw	r2,-4(fp)
   812d0:	1080030b 	ldhu	r2,12(r2)
   812d4:	1880000d 	sth	r2,0(r3)
        *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+16)) = record->create_date;
   812d8:	e0bffe17 	ldw	r2,-8(fp)
   812dc:	10800404 	addi	r2,r2,16
   812e0:	1007883a 	mov	r3,r2
   812e4:	e0bfff17 	ldw	r2,-4(fp)
   812e8:	1080038b 	ldhu	r2,14(r2)
   812ec:	1880000d 	sth	r2,0(r3)
        *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+18)) = record->last_access_date;
   812f0:	e0bffe17 	ldw	r2,-8(fp)
   812f4:	10800484 	addi	r2,r2,18
   812f8:	1007883a 	mov	r3,r2
   812fc:	e0bfff17 	ldw	r2,-4(fp)
   81300:	1080040b 	ldhu	r2,16(r2)
   81304:	1880000d 	sth	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+22)) = record->last_modified_time;
   81308:	e0bffe17 	ldw	r2,-8(fp)
   8130c:	10800584 	addi	r2,r2,22
   81310:	1007883a 	mov	r3,r2
   81314:	e0bfff17 	ldw	r2,-4(fp)
   81318:	1080048b 	ldhu	r2,18(r2)
   8131c:	1880000d 	sth	r2,0(r3)
        *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+24)) = record->last_modified_date;
   81320:	e0bffe17 	ldw	r2,-8(fp)
   81324:	10800604 	addi	r2,r2,24
   81328:	1007883a 	mov	r3,r2
   8132c:	e0bfff17 	ldw	r2,-4(fp)
   81330:	1080050b 	ldhu	r2,20(r2)
   81334:	1880000d 	sth	r2,0(r3)
        *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+26)) = record->start_cluster_index;
   81338:	e0bffe17 	ldw	r2,-8(fp)
   8133c:	10800684 	addi	r2,r2,26
   81340:	1007883a 	mov	r3,r2
   81344:	e0bfff17 	ldw	r2,-4(fp)
   81348:	1080058b 	ldhu	r2,22(r2)
   8134c:	1880000d 	sth	r2,0(r3)
        *((volatile unsigned int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+28)) = record->file_size_in_bytes;
   81350:	e0bffe17 	ldw	r2,-8(fp)
   81354:	10800704 	addi	r2,r2,28
   81358:	1007883a 	mov	r3,r2
   8135c:	e0bfff17 	ldw	r2,-4(fp)
   81360:	10800617 	ldw	r2,24(r2)
   81364:	18800015 	stw	r2,0(r3)
        current_sector_modified = true;                  
   81368:	00800044 	movi	r2,1
   8136c:	d0a6c215 	stw	r2,-25848(gp)
        result = true;
   81370:	00800044 	movi	r2,1
   81374:	e0bffd15 	stw	r2,-12(fp)
    }
    return result;
   81378:	e0bffd17 	ldw	r2,-12(fp)
}
   8137c:	e037883a 	mov	sp,fp
   81380:	dfc00117 	ldw	ra,4(sp)
   81384:	df000017 	ldw	fp,0(sp)
   81388:	dec00204 	addi	sp,sp,8
   8138c:	f800283a 	ret

00081390 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
   81390:	defff904 	addi	sp,sp,-28
   81394:	dfc00615 	stw	ra,24(sp)
   81398:	df000515 	stw	fp,20(sp)
   8139c:	dc000415 	stw	r16,16(sp)
   813a0:	df000404 	addi	fp,sp,16
   813a4:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
   813a8:	e03ffe15 	stw	zero,-8(fp)
	int counter = 0;
   813ac:	e03ffd15 	stw	zero,-12(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
   813b0:	0009883a 	mov	r4,zero
   813b4:	e17fff17 	ldw	r5,-4(fp)
   813b8:	0080c0c0 	call	80c0c <Read_Sector_Data>
   813bc:	e0bffe15 	stw	r2,-8(fp)
	end =  (*((volatile short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, 0x1fe)));
   813c0:	00807f84 	movi	r2,510
   813c4:	1080000b 	ldhu	r2,0(r2)
   813c8:	e0bffc0d 	sth	r2,-16(fp)
	if (((end & 0xffff) == 0xaa55) && (result))
   813cc:	e0bffc0f 	ldh	r2,-16(fp)
   813d0:	10ffffcc 	andi	r3,r2,65535
   813d4:	00aa9554 	movui	r2,43605
   813d8:	18813a1e 	bne	r3,r2,818c4 <Check_for_DOS_FAT+0x534>
   813dc:	e0bffe17 	ldw	r2,-8(fp)
   813e0:	1005003a 	cmpeq	r2,r2,zero
   813e4:	1001371e 	bne	r2,zero,818c4 <Check_for_DOS_FAT+0x534>
	{        
		boot_sector_data.jump_instruction[0] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 0));
   813e8:	0005883a 	mov	r2,zero
   813ec:	10800003 	ldbu	r2,0(r2)
   813f0:	1007883a 	mov	r3,r2
   813f4:	00800374 	movhi	r2,13
   813f8:	10b82004 	addi	r2,r2,-8064
   813fc:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 1));
   81400:	00800044 	movi	r2,1
   81404:	10800003 	ldbu	r2,0(r2)
   81408:	1007883a 	mov	r3,r2
   8140c:	00800374 	movhi	r2,13
   81410:	10b82004 	addi	r2,r2,-8064
   81414:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 2));
   81418:	00800084 	movi	r2,2
   8141c:	10800003 	ldbu	r2,0(r2)
   81420:	1007883a 	mov	r3,r2
   81424:	00800374 	movhi	r2,13
   81428:	10b82004 	addi	r2,r2,-8064
   8142c:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
   81430:	e03ffd15 	stw	zero,-12(fp)
   81434:	00000b06 	br	81464 <Check_for_DOS_FAT+0xd4>
		{
			boot_sector_data.OEM_name[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 3+counter));
   81438:	e13ffd17 	ldw	r4,-12(fp)
   8143c:	e0bffd17 	ldw	r2,-12(fp)
   81440:	108000c4 	addi	r2,r2,3
   81444:	10c00003 	ldbu	r3,0(r2)
   81448:	00800374 	movhi	r2,13
   8144c:	10b82004 	addi	r2,r2,-8064
   81450:	1105883a 	add	r2,r2,r4
   81454:	10c000c5 	stb	r3,3(r2)
	if (((end & 0xffff) == 0xaa55) && (result))
	{        
		boot_sector_data.jump_instruction[0] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 0));
		boot_sector_data.jump_instruction[1] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 1));
		boot_sector_data.jump_instruction[2] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 2));
		for (counter = 0; counter < 8; counter++)
   81458:	e0bffd17 	ldw	r2,-12(fp)
   8145c:	10800044 	addi	r2,r2,1
   81460:	e0bffd15 	stw	r2,-12(fp)
   81464:	e0bffd17 	ldw	r2,-12(fp)
   81468:	10800210 	cmplti	r2,r2,8
   8146c:	103ff21e 	bne	r2,zero,81438 <Check_for_DOS_FAT+0xa8>
		{
			boot_sector_data.OEM_name[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 3+counter));
		}
		boot_sector_data.sector_size_in_bytes = (*((volatile unsigned char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 12)) << 8 ) | (*((char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 11)));
   81470:	00800304 	movi	r2,12
   81474:	10800003 	ldbu	r2,0(r2)
   81478:	10803fcc 	andi	r2,r2,255
   8147c:	1004923a 	slli	r2,r2,8
   81480:	1007883a 	mov	r3,r2
   81484:	008002c4 	movi	r2,11
   81488:	10800003 	ldbu	r2,0(r2)
   8148c:	10803fcc 	andi	r2,r2,255
   81490:	1080201c 	xori	r2,r2,128
   81494:	10bfe004 	addi	r2,r2,-128
   81498:	1884b03a 	or	r2,r3,r2
   8149c:	1007883a 	mov	r3,r2
   814a0:	00800374 	movhi	r2,13
   814a4:	10b82004 	addi	r2,r2,-8064
   814a8:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = *((volatile unsigned char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 13));
   814ac:	00800344 	movi	r2,13
   814b0:	10c00003 	ldbu	r3,0(r2)
   814b4:	00800374 	movhi	r2,13
   814b8:	10b82004 	addi	r2,r2,-8064
   814bc:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, 14));
   814c0:	00800384 	movi	r2,14
   814c4:	10c0000b 	ldhu	r3,0(r2)
   814c8:	00800374 	movhi	r2,13
   814cc:	10b82004 	addi	r2,r2,-8064
   814d0:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = *((volatile unsigned char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 16));
   814d4:	00800404 	movi	r2,16
   814d8:	10c00003 	ldbu	r3,0(r2)
   814dc:	00800374 	movhi	r2,13
   814e0:	10b82004 	addi	r2,r2,-8064
   814e4:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(*((volatile unsigned char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 18)))) << 8 ) | (*((unsigned char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 17)));
   814e8:	00800484 	movi	r2,18
   814ec:	10800003 	ldbu	r2,0(r2)
   814f0:	10803fcc 	andi	r2,r2,255
   814f4:	1004923a 	slli	r2,r2,8
   814f8:	1007883a 	mov	r3,r2
   814fc:	00800444 	movi	r2,17
   81500:	10800003 	ldbu	r2,0(r2)
   81504:	10803fcc 	andi	r2,r2,255
   81508:	1884b03a 	or	r2,r3,r2
   8150c:	1007883a 	mov	r3,r2
   81510:	00800374 	movhi	r2,13
   81514:	10b82004 	addi	r2,r2,-8064
   81518:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = ((*((volatile unsigned char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 20))) << 8) | (*((unsigned char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 19)));
   8151c:	00800504 	movi	r2,20
   81520:	10800003 	ldbu	r2,0(r2)
   81524:	10803fcc 	andi	r2,r2,255
   81528:	1004923a 	slli	r2,r2,8
   8152c:	1007883a 	mov	r3,r2
   81530:	008004c4 	movi	r2,19
   81534:	10800003 	ldbu	r2,0(r2)
   81538:	10803fcc 	andi	r2,r2,255
   8153c:	1884b03a 	or	r2,r3,r2
   81540:	1007883a 	mov	r3,r2
   81544:	00800374 	movhi	r2,13
   81548:	10b82004 	addi	r2,r2,-8064
   8154c:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = *((volatile unsigned char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 21));
   81550:	00800544 	movi	r2,21
   81554:	10c00003 	ldbu	r3,0(r2)
   81558:	00800374 	movhi	r2,13
   8155c:	10b82004 	addi	r2,r2,-8064
   81560:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, 22));
   81564:	00800584 	movi	r2,22
   81568:	10c0000b 	ldhu	r3,0(r2)
   8156c:	00800374 	movhi	r2,13
   81570:	10b82004 	addi	r2,r2,-8064
   81574:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, 24));
   81578:	00800604 	movi	r2,24
   8157c:	10c0000b 	ldhu	r3,0(r2)
   81580:	00800374 	movhi	r2,13
   81584:	10b82004 	addi	r2,r2,-8064
   81588:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, 26));
   8158c:	00800684 	movi	r2,26
   81590:	10c0000b 	ldhu	r3,0(r2)
   81594:	00800374 	movhi	r2,13
   81598:	10b82004 	addi	r2,r2,-8064
   8159c:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = *((volatile unsigned int *)SD_CARD_BUFFER(SD_CARD_0_BASE, 28));
   815a0:	00800704 	movi	r2,28
   815a4:	10c00017 	ldw	r3,0(r2)
   815a8:	00800374 	movhi	r2,13
   815ac:	10b82004 	addi	r2,r2,-8064
   815b0:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = *((volatile unsigned int *)SD_CARD_BUFFER(SD_CARD_0_BASE, 32));
   815b4:	00800804 	movi	r2,32
   815b8:	10c00017 	ldw	r3,0(r2)
   815bc:	00800374 	movhi	r2,13
   815c0:	10b82004 	addi	r2,r2,-8064
   815c4:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = *((volatile unsigned char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 36));
   815c8:	00800904 	movi	r2,36
   815cc:	10c00003 	ldbu	r3,0(r2)
   815d0:	00800374 	movhi	r2,13
   815d4:	10b82004 	addi	r2,r2,-8064
   815d8:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = *((volatile unsigned char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 37));
   815dc:	00800944 	movi	r2,37
   815e0:	10c00003 	ldbu	r3,0(r2)
   815e4:	00800374 	movhi	r2,13
   815e8:	10b82004 	addi	r2,r2,-8064
   815ec:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = *((volatile unsigned char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 38));
   815f0:	00800984 	movi	r2,38
   815f4:	10c00003 	ldbu	r3,0(r2)
   815f8:	00800374 	movhi	r2,13
   815fc:	10b82004 	addi	r2,r2,-8064
   81600:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
   81604:	00800374 	movhi	r2,13
   81608:	10b82004 	addi	r2,r2,-8064
   8160c:	1080040b 	ldhu	r2,16(r2)
   81610:	10ffffcc 	andi	r3,r2,65535
   81614:	00800374 	movhi	r2,13
   81618:	10b82004 	addi	r2,r2,-8064
   8161c:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
   81620:	00800374 	movhi	r2,13
   81624:	10b82004 	addi	r2,r2,-8064
   81628:	10c01117 	ldw	r3,68(r2)
   8162c:	00800374 	movhi	r2,13
   81630:	10b82004 	addi	r2,r2,-8064
   81634:	1080068b 	ldhu	r2,26(r2)
   81638:	10bfffcc 	andi	r2,r2,65535
   8163c:	1887883a 	add	r3,r3,r2
   81640:	00800374 	movhi	r2,13
   81644:	10b82004 	addi	r2,r2,-8064
   81648:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
   8164c:	00800374 	movhi	r2,13
   81650:	10b82004 	addi	r2,r2,-8064
   81654:	10c01217 	ldw	r3,72(r2)
   81658:	00800374 	movhi	r2,13
   8165c:	10b82004 	addi	r2,r2,-8064
   81660:	1080068b 	ldhu	r2,26(r2)
   81664:	10bfffcc 	andi	r2,r2,65535
   81668:	1887883a 	add	r3,r3,r2
   8166c:	00800374 	movhi	r2,13
   81670:	10b82004 	addi	r2,r2,-8064
   81674:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
   81678:	00800374 	movhi	r2,13
   8167c:	10b82004 	addi	r2,r2,-8064
   81680:	14001317 	ldw	r16,76(r2)
   81684:	00800374 	movhi	r2,13
   81688:	10b82004 	addi	r2,r2,-8064
   8168c:	1080050b 	ldhu	r2,20(r2)
   81690:	10bfffcc 	andi	r2,r2,65535
   81694:	1008917a 	slli	r4,r2,5
   81698:	00800374 	movhi	r2,13
   8169c:	10b82004 	addi	r2,r2,-8064
   816a0:	1080030b 	ldhu	r2,12(r2)
   816a4:	117fffcc 	andi	r5,r2,65535
   816a8:	00858ac0 	call	858ac <__divsi3>
   816ac:	8087883a 	add	r3,r16,r2
   816b0:	00800374 	movhi	r2,13
   816b4:	10b82004 	addi	r2,r2,-8064
   816b8:	10c01415 	stw	r3,80(r2)
		// printf("haha: %d\n", boot_sector_data.first_fat_sector_offset);
		// printf("haha: %d\n", boot_sector_data.second_fat_sector_offset);
		// printf("haha: %d\n", boot_sector_data.root_directory_sector_offset);
		// printf("haha: %d\n", boot_sector_data.data_sector_offset);
		
		if (boot_sector_data.number_of_sectors_in_partition != 0) {
   816bc:	00800374 	movhi	r2,13
   816c0:	10b82004 	addi	r2,r2,-8064
   816c4:	1080058b 	ldhu	r2,22(r2)
   816c8:	10bfffcc 	andi	r2,r2,65535
   816cc:	1005003a 	cmpeq	r2,r2,zero
   816d0:	10001b1e 	bne	r2,zero,81740 <Check_for_DOS_FAT+0x3b0>
			if ((boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster) < 4085)
   816d4:	00800374 	movhi	r2,13
   816d8:	10b82004 	addi	r2,r2,-8064
   816dc:	1080058b 	ldhu	r2,22(r2)
   816e0:	113fffcc 	andi	r4,r2,65535
   816e4:	00800374 	movhi	r2,13
   816e8:	10b82004 	addi	r2,r2,-8064
   816ec:	10800383 	ldbu	r2,14(r2)
   816f0:	11403fcc 	andi	r5,r2,255
   816f4:	00858ac0 	call	858ac <__divsi3>
   816f8:	1083fd48 	cmpgei	r2,r2,4085
   816fc:	1000081e 	bne	r2,zero,81720 <Check_for_DOS_FAT+0x390>
			{
				printf("FAT12 found\n");
   81700:	01000274 	movhi	r4,9
   81704:	21083704 	addi	r4,r4,8412
   81708:	0085acc0 	call	85acc <puts>
				boot_sector_data.bits_for_cluster_index = 12;
   8170c:	00c00374 	movhi	r3,13
   81710:	18f82004 	addi	r3,r3,-8064
   81714:	00800304 	movi	r2,12
   81718:	18801085 	stb	r2,66(r3)
   8171c:	00002206 	br	817a8 <Check_for_DOS_FAT+0x418>
			} else {
				printf("FAT16 found\n");
   81720:	01000274 	movhi	r4,9
   81724:	21083a04 	addi	r4,r4,8424
   81728:	0085acc0 	call	85acc <puts>
				boot_sector_data.bits_for_cluster_index = 16;
   8172c:	00c00374 	movhi	r3,13
   81730:	18f82004 	addi	r3,r3,-8064
   81734:	00800404 	movi	r2,16
   81738:	18801085 	stb	r2,66(r3)
   8173c:	00001a06 	br	817a8 <Check_for_DOS_FAT+0x418>
			}
		} else {
			if ((boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster) >= 65525)
   81740:	00800374 	movhi	r2,13
   81744:	10b82004 	addi	r2,r2,-8064
   81748:	11000917 	ldw	r4,36(r2)
   8174c:	00800374 	movhi	r2,13
   81750:	10b82004 	addi	r2,r2,-8064
   81754:	10800383 	ldbu	r2,14(r2)
   81758:	11403fcc 	andi	r5,r2,255
   8175c:	008596c0 	call	8596c <__udivsi3>
   81760:	1007883a 	mov	r3,r2
   81764:	00bffd14 	movui	r2,65524
   81768:	10c0082e 	bgeu	r2,r3,8178c <Check_for_DOS_FAT+0x3fc>
			{
				printf("FAT32 found\n");
   8176c:	01000274 	movhi	r4,9
   81770:	21083d04 	addi	r4,r4,8436
   81774:	0085acc0 	call	85acc <puts>
				boot_sector_data.bits_for_cluster_index = 32;
   81778:	00c00374 	movhi	r3,13
   8177c:	18f82004 	addi	r3,r3,-8064
   81780:	00800804 	movi	r2,32
   81784:	18801085 	stb	r2,66(r3)
   81788:	00000706 	br	817a8 <Check_for_DOS_FAT+0x418>
			} else {
				printf("FAT16 found\n");
   8178c:	01000274 	movhi	r4,9
   81790:	21083a04 	addi	r4,r4,8424
   81794:	0085acc0 	call	85acc <puts>
				boot_sector_data.bits_for_cluster_index = 16;
   81798:	00c00374 	movhi	r3,13
   8179c:	18f82004 	addi	r3,r3,-8064
   817a0:	00800404 	movi	r2,16
   817a4:	18801085 	stb	r2,66(r3)
			}			
		}
	    
		for (counter = 0; counter < 4; counter++)
   817a8:	e03ffd15 	stw	zero,-12(fp)
   817ac:	00000d06 	br	817e4 <Check_for_DOS_FAT+0x454>
		{
			boot_sector_data.volume_id[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 39+counter));
   817b0:	e13ffd17 	ldw	r4,-12(fp)
   817b4:	e0bffd17 	ldw	r2,-12(fp)
   817b8:	108009c4 	addi	r2,r2,39
   817bc:	10800003 	ldbu	r2,0(r2)
   817c0:	1007883a 	mov	r3,r2
   817c4:	00800374 	movhi	r2,13
   817c8:	10b82004 	addi	r2,r2,-8064
   817cc:	2085883a 	add	r2,r4,r2
   817d0:	10800a04 	addi	r2,r2,40
   817d4:	10c000c5 	stb	r3,3(r2)
				printf("FAT16 found\n");
				boot_sector_data.bits_for_cluster_index = 16;
			}			
		}
	    
		for (counter = 0; counter < 4; counter++)
   817d8:	e0bffd17 	ldw	r2,-12(fp)
   817dc:	10800044 	addi	r2,r2,1
   817e0:	e0bffd15 	stw	r2,-12(fp)
   817e4:	e0bffd17 	ldw	r2,-12(fp)
   817e8:	10800110 	cmplti	r2,r2,4
   817ec:	103ff01e 	bne	r2,zero,817b0 <Check_for_DOS_FAT+0x420>
		{
			boot_sector_data.volume_id[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
   817f0:	e03ffd15 	stw	zero,-12(fp)
   817f4:	00000c06 	br	81828 <Check_for_DOS_FAT+0x498>
		{
			boot_sector_data.volume_label[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 43+counter));
   817f8:	e13ffd17 	ldw	r4,-12(fp)
   817fc:	e0bffd17 	ldw	r2,-12(fp)
   81800:	10800ac4 	addi	r2,r2,43
   81804:	10c00003 	ldbu	r3,0(r2)
   81808:	00800374 	movhi	r2,13
   8180c:	10b82004 	addi	r2,r2,-8064
   81810:	2085883a 	add	r2,r4,r2
   81814:	10800b04 	addi	r2,r2,44
   81818:	10c000c5 	stb	r3,3(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
   8181c:	e0bffd17 	ldw	r2,-12(fp)
   81820:	10800044 	addi	r2,r2,1
   81824:	e0bffd15 	stw	r2,-12(fp)
   81828:	e0bffd17 	ldw	r2,-12(fp)
   8182c:	108002d0 	cmplti	r2,r2,11
   81830:	103ff11e 	bne	r2,zero,817f8 <Check_for_DOS_FAT+0x468>
		{
			boot_sector_data.volume_label[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
   81834:	e03ffd15 	stw	zero,-12(fp)
   81838:	00000d06 	br	81870 <Check_for_DOS_FAT+0x4e0>
		{
			boot_sector_data.file_system_type[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 54+counter));
   8183c:	e13ffd17 	ldw	r4,-12(fp)
   81840:	e0bffd17 	ldw	r2,-12(fp)
   81844:	10800d84 	addi	r2,r2,54
   81848:	10800003 	ldbu	r2,0(r2)
   8184c:	1007883a 	mov	r3,r2
   81850:	00800374 	movhi	r2,13
   81854:	10b82004 	addi	r2,r2,-8064
   81858:	2085883a 	add	r2,r4,r2
   8185c:	10800e04 	addi	r2,r2,56
   81860:	10c00085 	stb	r3,2(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
   81864:	e0bffd17 	ldw	r2,-12(fp)
   81868:	10800044 	addi	r2,r2,1
   8186c:	e0bffd15 	stw	r2,-12(fp)
   81870:	e0bffd17 	ldw	r2,-12(fp)
   81874:	10800210 	cmplti	r2,r2,8
   81878:	103ff01e 	bne	r2,zero,8183c <Check_for_DOS_FAT+0x4ac>
		{
			boot_sector_data.file_system_type[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
   8187c:	e03ffd15 	stw	zero,-12(fp)
   81880:	00000a06 	br	818ac <Check_for_DOS_FAT+0x51c>
		{
			active_files[counter].in_use = false;
   81884:	e0bffd17 	ldw	r2,-12(fp)
   81888:	00c00374 	movhi	r3,13
   8188c:	18f83504 	addi	r3,r3,-7980
   81890:	100491ba 	slli	r2,r2,6
   81894:	10c5883a 	add	r2,r2,r3
   81898:	10800f04 	addi	r2,r2,60
   8189c:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
   818a0:	e0bffd17 	ldw	r2,-12(fp)
   818a4:	10800044 	addi	r2,r2,1
   818a8:	e0bffd15 	stw	r2,-12(fp)
   818ac:	e0bffd17 	ldw	r2,-12(fp)
   818b0:	10800510 	cmplti	r2,r2,20
   818b4:	103ff31e 	bne	r2,zero,81884 <Check_for_DOS_FAT+0x4f4>
		{
			active_files[counter].in_use = false;
		}
		result = true;
   818b8:	00800044 	movi	r2,1
   818bc:	e0bffe15 	stw	r2,-8(fp)
	int counter = 0;
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (*((volatile short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, 0x1fe)));
	if (((end & 0xffff) == 0xaa55) && (result))
   818c0:	00000106 	br	818c8 <Check_for_DOS_FAT+0x538>
		}
		result = true;
	}
    else
    {
        result = false;
   818c4:	e03ffe15 	stw	zero,-8(fp)
    }
	return result;
   818c8:	e0bffe17 	ldw	r2,-8(fp)
}
   818cc:	e037883a 	mov	sp,fp
   818d0:	dfc00217 	ldw	ra,8(sp)
   818d4:	df000117 	ldw	fp,4(sp)
   818d8:	dc000017 	ldw	r16,0(sp)
   818dc:	dec00304 	addi	sp,sp,12
   818e0:	f800283a 	ret

000818e4 <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
   818e4:	defffc04 	addi	sp,sp,-16
   818e8:	dfc00315 	stw	ra,12(sp)
   818ec:	df000215 	stw	fp,8(sp)
   818f0:	df000204 	addi	fp,sp,8
	bool result = false;
   818f4:	e03fff15 	stw	zero,-4(fp)

	if (sd_card_is_Present())
   818f8:	00835c80 	call	835c8 <sd_card_is_Present>
   818fc:	1005003a 	cmpeq	r2,r2,zero
   81900:	10003b1e 	bne	r2,zero,819f0 <Look_for_FAT16+0x10c>
	{
		short int csd_file_format = *CSD_register_w0;
   81904:	d0a6bd17 	ldw	r2,-25868(gp)
   81908:	1080000b 	ldhu	r2,0(r2)
   8190c:	e0bffe0d 	sth	r2,-8(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
   81910:	d026c015 	stw	zero,-25856(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
   81914:	d026c115 	stw	zero,-25852(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
   81918:	e0bffe0f 	ldh	r2,-8(fp)
   8191c:	1004803a 	cmplt	r2,r2,zero
   81920:	1000331e 	bne	r2,zero,819f0 <Look_for_FAT16+0x10c>
   81924:	e0bffe0b 	ldhu	r2,-8(fp)
   81928:	10bfffcc 	andi	r2,r2,65535
   8192c:	1083000c 	andi	r2,r2,3072
   81930:	10830020 	cmpeqi	r2,r2,3072
   81934:	10002e1e 	bne	r2,zero,819f0 <Look_for_FAT16+0x10c>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
   81938:	e0bffe0b 	ldhu	r2,-8(fp)
   8193c:	10bfffcc 	andi	r2,r2,65535
   81940:	1083000c 	andi	r2,r2,3072
   81944:	10810018 	cmpnei	r2,r2,1024
   81948:	1000031e 	bne	r2,zero,81958 <Look_for_FAT16+0x74>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
   8194c:	0009883a 	mov	r4,zero
   81950:	00813900 	call	81390 <Check_for_DOS_FAT>
   81954:	e0bfff15 	stw	r2,-4(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
   81958:	e0bffe0b 	ldhu	r2,-8(fp)
   8195c:	10bfffcc 	andi	r2,r2,65535
   81960:	1083000c 	andi	r2,r2,3072
   81964:	1004c03a 	cmpne	r2,r2,zero
   81968:	1000061e 	bne	r2,zero,81984 <Look_for_FAT16+0xa0>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
   8196c:	0080e780 	call	80e78 <Check_for_Master_Boot_Record>
   81970:	1005003a 	cmpeq	r2,r2,zero
   81974:	1000031e 	bne	r2,zero,81984 <Look_for_FAT16+0xa0>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
   81978:	d126c017 	ldw	r4,-25856(gp)
   8197c:	00813900 	call	81390 <Check_for_DOS_FAT>
   81980:	e0bfff15 	stw	r2,-4(fp)
				}                        
			}
			if (result == true)
   81984:	e0bfff17 	ldw	r2,-4(fp)
   81988:	10800058 	cmpnei	r2,r2,1
   8198c:	1000181e 	bne	r2,zero,819f0 <Look_for_FAT16+0x10c>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index == 12)
   81990:	00800374 	movhi	r2,13
   81994:	10b82004 	addi	r2,r2,-8064
   81998:	10801083 	ldbu	r2,66(r2)
   8199c:	10803fcc 	andi	r2,r2,255
   819a0:	10800318 	cmpnei	r2,r2,12
   819a4:	1000021e 	bne	r2,zero,819b0 <Look_for_FAT16+0xcc>
				{
					result = false;
   819a8:	e03fff15 	stw	zero,-4(fp)
   819ac:	00001006 	br	819f0 <Look_for_FAT16+0x10c>
				}
				else
				{
					if (boot_sector_data.number_of_sectors_in_partition != 0)
   819b0:	00800374 	movhi	r2,13
   819b4:	10b82004 	addi	r2,r2,-8064
   819b8:	1080058b 	ldhu	r2,22(r2)
   819bc:	10bfffcc 	andi	r2,r2,65535
   819c0:	1005003a 	cmpeq	r2,r2,zero
   819c4:	1000061e 	bne	r2,zero,819e0 <Look_for_FAT16+0xfc>
						fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
   819c8:	00800374 	movhi	r2,13
   819cc:	10b82004 	addi	r2,r2,-8064
   819d0:	1080058b 	ldhu	r2,22(r2)
   819d4:	10bfffcc 	andi	r2,r2,65535
   819d8:	d0a6c115 	stw	r2,-25852(gp)
   819dc:	00000406 	br	819f0 <Look_for_FAT16+0x10c>
					else
						fat_partition_size_in_512_byte_sectors = boot_sector_data.total_sector_count_if_above_32MB;
   819e0:	00800374 	movhi	r2,13
   819e4:	10b82004 	addi	r2,r2,-8064
   819e8:	10800917 	ldw	r2,36(r2)
   819ec:	d0a6c115 	stw	r2,-25852(gp)
				}
			}
		}
	}
	return result;
   819f0:	e0bfff17 	ldw	r2,-4(fp)
}
   819f4:	e037883a 	mov	sp,fp
   819f8:	dfc00117 	ldw	ra,4(sp)
   819fc:	df000017 	ldw	fp,0(sp)
   81a00:	dec00204 	addi	sp,sp,8
   81a04:	f800283a 	ret

00081a08 <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
   81a08:	defffb04 	addi	sp,sp,-20
   81a0c:	dfc00415 	stw	ra,16(sp)
   81a10:	df000315 	stw	fp,12(sp)
   81a14:	df000304 	addi	fp,sp,12
   81a18:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
   81a1c:	e13fff17 	ldw	r4,-4(fp)
   81a20:	0085bb40 	call	85bb4 <strlen>
   81a24:	e0bffd15 	stw	r2,-12(fp)
    
    for (index = 0; index < length; index++)
   81a28:	e03ffe15 	stw	zero,-8(fp)
   81a2c:	00002206 	br	81ab8 <filename_to_upper_case+0xb0>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
   81a30:	e0bffe17 	ldw	r2,-8(fp)
   81a34:	1007883a 	mov	r3,r2
   81a38:	e0bfff17 	ldw	r2,-4(fp)
   81a3c:	1885883a 	add	r2,r3,r2
   81a40:	10800003 	ldbu	r2,0(r2)
   81a44:	10803fcc 	andi	r2,r2,255
   81a48:	1080201c 	xori	r2,r2,128
   81a4c:	10bfe004 	addi	r2,r2,-128
   81a50:	10801850 	cmplti	r2,r2,97
   81a54:	1000151e 	bne	r2,zero,81aac <filename_to_upper_case+0xa4>
   81a58:	e0bffe17 	ldw	r2,-8(fp)
   81a5c:	1007883a 	mov	r3,r2
   81a60:	e0bfff17 	ldw	r2,-4(fp)
   81a64:	1885883a 	add	r2,r3,r2
   81a68:	10800003 	ldbu	r2,0(r2)
   81a6c:	10803fcc 	andi	r2,r2,255
   81a70:	1080201c 	xori	r2,r2,128
   81a74:	10bfe004 	addi	r2,r2,-128
   81a78:	10801ec8 	cmpgei	r2,r2,123
   81a7c:	10000b1e 	bne	r2,zero,81aac <filename_to_upper_case+0xa4>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
   81a80:	e0bffe17 	ldw	r2,-8(fp)
   81a84:	1007883a 	mov	r3,r2
   81a88:	e0bfff17 	ldw	r2,-4(fp)
   81a8c:	1889883a 	add	r4,r3,r2
   81a90:	e0bffe17 	ldw	r2,-8(fp)
   81a94:	1007883a 	mov	r3,r2
   81a98:	e0bfff17 	ldw	r2,-4(fp)
   81a9c:	1885883a 	add	r2,r3,r2
   81aa0:	10800003 	ldbu	r2,0(r2)
   81aa4:	10bff804 	addi	r2,r2,-32
   81aa8:	20800005 	stb	r2,0(r4)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
   81aac:	e0bffe17 	ldw	r2,-8(fp)
   81ab0:	10800044 	addi	r2,r2,1
   81ab4:	e0bffe15 	stw	r2,-8(fp)
   81ab8:	e0fffe17 	ldw	r3,-8(fp)
   81abc:	e0bffd17 	ldw	r2,-12(fp)
   81ac0:	18bfdb16 	blt	r3,r2,81a30 <filename_to_upper_case+0x28>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
   81ac4:	e037883a 	mov	sp,fp
   81ac8:	dfc00117 	ldw	ra,4(sp)
   81acc:	df000017 	ldw	fp,0(sp)
   81ad0:	dec00204 	addi	sp,sp,8
   81ad4:	f800283a 	ret

00081ad8 <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
   81ad8:	defff804 	addi	sp,sp,-32
   81adc:	dfc00715 	stw	ra,28(sp)
   81ae0:	df000615 	stw	fp,24(sp)
   81ae4:	df000604 	addi	fp,sp,24
   81ae8:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
   81aec:	e13fff17 	ldw	r4,-4(fp)
   81af0:	0085bb40 	call	85bb4 <strlen>
   81af4:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
   81af8:	00bfffc4 	movi	r2,-1
   81afc:	e0bffc15 	stw	r2,-16(fp)
    int last_period = -1;
   81b00:	00bfffc4 	movi	r2,-1
   81b04:	e0bffb15 	stw	r2,-20(fp)
    bool result = true;
   81b08:	00800044 	movi	r2,1
   81b0c:	e0bffa15 	stw	r2,-24(fp)
    
    for(index = 0; index < length; index++)
   81b10:	e03ffd15 	stw	zero,-12(fp)
   81b14:	00007606 	br	81cf0 <check_file_name_for_FAT16_compliance+0x218>
    {
        if ((file_name[index] == ' ') ||
   81b18:	e0bffd17 	ldw	r2,-12(fp)
   81b1c:	1007883a 	mov	r3,r2
   81b20:	e0bfff17 	ldw	r2,-4(fp)
   81b24:	1885883a 	add	r2,r3,r2
   81b28:	10800003 	ldbu	r2,0(r2)
   81b2c:	10803fcc 	andi	r2,r2,255
   81b30:	1080201c 	xori	r2,r2,128
   81b34:	10bfe004 	addi	r2,r2,-128
   81b38:	10800820 	cmpeqi	r2,r2,32
   81b3c:	1000431e 	bne	r2,zero,81c4c <check_file_name_for_FAT16_compliance+0x174>
   81b40:	e0bffd17 	ldw	r2,-12(fp)
   81b44:	10ffffc4 	addi	r3,r2,-1
   81b48:	e0bffc17 	ldw	r2,-16(fp)
   81b4c:	1880141e 	bne	r3,r2,81ba0 <check_file_name_for_FAT16_compliance+0xc8>
   81b50:	e0bffd17 	ldw	r2,-12(fp)
   81b54:	1007883a 	mov	r3,r2
   81b58:	e0bfff17 	ldw	r2,-4(fp)
   81b5c:	1885883a 	add	r2,r3,r2
   81b60:	10800003 	ldbu	r2,0(r2)
   81b64:	10803fcc 	andi	r2,r2,255
   81b68:	1080201c 	xori	r2,r2,128
   81b6c:	10bfe004 	addi	r2,r2,-128
   81b70:	10801720 	cmpeqi	r2,r2,92
   81b74:	1000351e 	bne	r2,zero,81c4c <check_file_name_for_FAT16_compliance+0x174>
   81b78:	e0bffd17 	ldw	r2,-12(fp)
   81b7c:	1007883a 	mov	r3,r2
   81b80:	e0bfff17 	ldw	r2,-4(fp)
   81b84:	1885883a 	add	r2,r3,r2
   81b88:	10800003 	ldbu	r2,0(r2)
   81b8c:	10803fcc 	andi	r2,r2,255
   81b90:	1080201c 	xori	r2,r2,128
   81b94:	10bfe004 	addi	r2,r2,-128
   81b98:	10800be0 	cmpeqi	r2,r2,47
   81b9c:	10002b1e 	bne	r2,zero,81c4c <check_file_name_for_FAT16_compliance+0x174>
   81ba0:	e0fffd17 	ldw	r3,-12(fp)
   81ba4:	e0bffb17 	ldw	r2,-20(fp)
   81ba8:	1885c83a 	sub	r2,r3,r2
   81bac:	10800258 	cmpnei	r2,r2,9
   81bb0:	10000a1e 	bne	r2,zero,81bdc <check_file_name_for_FAT16_compliance+0x104>
   81bb4:	e0bffd17 	ldw	r2,-12(fp)
   81bb8:	1007883a 	mov	r3,r2
   81bbc:	e0bfff17 	ldw	r2,-4(fp)
   81bc0:	1885883a 	add	r2,r3,r2
   81bc4:	10800003 	ldbu	r2,0(r2)
   81bc8:	10803fcc 	andi	r2,r2,255
   81bcc:	1080201c 	xori	r2,r2,128
   81bd0:	10bfe004 	addi	r2,r2,-128
   81bd4:	10800b98 	cmpnei	r2,r2,46
   81bd8:	10001c1e 	bne	r2,zero,81c4c <check_file_name_for_FAT16_compliance+0x174>
   81bdc:	e0fffc17 	ldw	r3,-16(fp)
   81be0:	e0bffb17 	ldw	r2,-20(fp)
   81be4:	18801b26 	beq	r3,r2,81c54 <check_file_name_for_FAT16_compliance+0x17c>
   81be8:	e0fffd17 	ldw	r3,-12(fp)
   81bec:	e0bffb17 	ldw	r2,-20(fp)
   81bf0:	1885c83a 	sub	r2,r3,r2
   81bf4:	10800110 	cmplti	r2,r2,4
   81bf8:	1000161e 	bne	r2,zero,81c54 <check_file_name_for_FAT16_compliance+0x17c>
   81bfc:	e0bffd17 	ldw	r2,-12(fp)
   81c00:	1007883a 	mov	r3,r2
   81c04:	e0bfff17 	ldw	r2,-4(fp)
   81c08:	1885883a 	add	r2,r3,r2
   81c0c:	10800003 	ldbu	r2,0(r2)
   81c10:	10803fcc 	andi	r2,r2,255
   81c14:	1080201c 	xori	r2,r2,128
   81c18:	10bfe004 	addi	r2,r2,-128
   81c1c:	10801720 	cmpeqi	r2,r2,92
   81c20:	10000c1e 	bne	r2,zero,81c54 <check_file_name_for_FAT16_compliance+0x17c>
   81c24:	e0bffd17 	ldw	r2,-12(fp)
   81c28:	1007883a 	mov	r3,r2
   81c2c:	e0bfff17 	ldw	r2,-4(fp)
   81c30:	1885883a 	add	r2,r3,r2
   81c34:	10800003 	ldbu	r2,0(r2)
   81c38:	10803fcc 	andi	r2,r2,255
   81c3c:	1080201c 	xori	r2,r2,128
   81c40:	10bfe004 	addi	r2,r2,-128
   81c44:	10800be0 	cmpeqi	r2,r2,47
   81c48:	1000021e 	bne	r2,zero,81c54 <check_file_name_for_FAT16_compliance+0x17c>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
             (file_name[index] != '\\') && (file_name[index] != '/'))
           )
        {
            result = false;
   81c4c:	e03ffa15 	stw	zero,-24(fp)
            break;
   81c50:	00002a06 	br	81cfc <check_file_name_for_FAT16_compliance+0x224>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
   81c54:	e0bffd17 	ldw	r2,-12(fp)
   81c58:	1007883a 	mov	r3,r2
   81c5c:	e0bfff17 	ldw	r2,-4(fp)
   81c60:	1885883a 	add	r2,r3,r2
   81c64:	10800003 	ldbu	r2,0(r2)
   81c68:	10803fcc 	andi	r2,r2,255
   81c6c:	1080201c 	xori	r2,r2,128
   81c70:	10bfe004 	addi	r2,r2,-128
   81c74:	10801720 	cmpeqi	r2,r2,92
   81c78:	10000a1e 	bne	r2,zero,81ca4 <check_file_name_for_FAT16_compliance+0x1cc>
   81c7c:	e0bffd17 	ldw	r2,-12(fp)
   81c80:	1007883a 	mov	r3,r2
   81c84:	e0bfff17 	ldw	r2,-4(fp)
   81c88:	1885883a 	add	r2,r3,r2
   81c8c:	10800003 	ldbu	r2,0(r2)
   81c90:	10803fcc 	andi	r2,r2,255
   81c94:	1080201c 	xori	r2,r2,128
   81c98:	10bfe004 	addi	r2,r2,-128
   81c9c:	10800bd8 	cmpnei	r2,r2,47
   81ca0:	1000041e 	bne	r2,zero,81cb4 <check_file_name_for_FAT16_compliance+0x1dc>
        {
            last_period = index;
   81ca4:	e0bffd17 	ldw	r2,-12(fp)
   81ca8:	e0bffb15 	stw	r2,-20(fp)
            last_dir_break_position = index;
   81cac:	e0bffd17 	ldw	r2,-12(fp)
   81cb0:	e0bffc15 	stw	r2,-16(fp)
        }
        if (file_name[index] == '.')
   81cb4:	e0bffd17 	ldw	r2,-12(fp)
   81cb8:	1007883a 	mov	r3,r2
   81cbc:	e0bfff17 	ldw	r2,-4(fp)
   81cc0:	1885883a 	add	r2,r3,r2
   81cc4:	10800003 	ldbu	r2,0(r2)
   81cc8:	10803fcc 	andi	r2,r2,255
   81ccc:	1080201c 	xori	r2,r2,128
   81cd0:	10bfe004 	addi	r2,r2,-128
   81cd4:	10800b98 	cmpnei	r2,r2,46
   81cd8:	1000021e 	bne	r2,zero,81ce4 <check_file_name_for_FAT16_compliance+0x20c>
        {
            last_period = index;
   81cdc:	e0bffd17 	ldw	r2,-12(fp)
   81ce0:	e0bffb15 	stw	r2,-20(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
   81ce4:	e0bffd17 	ldw	r2,-12(fp)
   81ce8:	10800044 	addi	r2,r2,1
   81cec:	e0bffd15 	stw	r2,-12(fp)
   81cf0:	e0fffd17 	ldw	r3,-12(fp)
   81cf4:	e0bffe17 	ldw	r2,-8(fp)
   81cf8:	18bf8716 	blt	r3,r2,81b18 <check_file_name_for_FAT16_compliance+0x40>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
   81cfc:	e0fffe17 	ldw	r3,-8(fp)
   81d00:	e0bfff17 	ldw	r2,-4(fp)
   81d04:	1885883a 	add	r2,r3,r2
   81d08:	10bfffc4 	addi	r2,r2,-1
   81d0c:	10800003 	ldbu	r2,0(r2)
   81d10:	10803fcc 	andi	r2,r2,255
   81d14:	1080201c 	xori	r2,r2,128
   81d18:	10bfe004 	addi	r2,r2,-128
   81d1c:	10801720 	cmpeqi	r2,r2,92
   81d20:	10000a1e 	bne	r2,zero,81d4c <check_file_name_for_FAT16_compliance+0x274>
   81d24:	e0fffe17 	ldw	r3,-8(fp)
   81d28:	e0bfff17 	ldw	r2,-4(fp)
   81d2c:	1885883a 	add	r2,r3,r2
   81d30:	10bfffc4 	addi	r2,r2,-1
   81d34:	10800003 	ldbu	r2,0(r2)
   81d38:	10803fcc 	andi	r2,r2,255
   81d3c:	1080201c 	xori	r2,r2,128
   81d40:	10bfe004 	addi	r2,r2,-128
   81d44:	10800bd8 	cmpnei	r2,r2,47
   81d48:	1000011e 	bne	r2,zero,81d50 <check_file_name_for_FAT16_compliance+0x278>
    {
        result = false;
   81d4c:	e03ffa15 	stw	zero,-24(fp)
    }
    return result;
   81d50:	e0bffa17 	ldw	r2,-24(fp)
}
   81d54:	e037883a 	mov	sp,fp
   81d58:	dfc00117 	ldw	ra,4(sp)
   81d5c:	df000017 	ldw	fp,0(sp)
   81d60:	dec00204 	addi	sp,sp,8
   81d64:	f800283a 	ret

00081d68 <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
   81d68:	defffb04 	addi	sp,sp,-20
   81d6c:	dfc00415 	stw	ra,16(sp)
   81d70:	df000315 	stw	fp,12(sp)
   81d74:	df000304 	addi	fp,sp,12
   81d78:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
   81d7c:	e03ffe15 	stw	zero,-8(fp)
    int length = strlen(name);
   81d80:	e13fff17 	ldw	r4,-4(fp)
   81d84:	0085bb40 	call	85bb4 <strlen>
   81d88:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
   81d8c:	e03ffe15 	stw	zero,-8(fp)
   81d90:	00001706 	br	81df0 <get_dir_divider_location+0x88>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
   81d94:	e0bffe17 	ldw	r2,-8(fp)
   81d98:	1007883a 	mov	r3,r2
   81d9c:	e0bfff17 	ldw	r2,-4(fp)
   81da0:	1885883a 	add	r2,r3,r2
   81da4:	10800003 	ldbu	r2,0(r2)
   81da8:	10803fcc 	andi	r2,r2,255
   81dac:	1080201c 	xori	r2,r2,128
   81db0:	10bfe004 	addi	r2,r2,-128
   81db4:	10801720 	cmpeqi	r2,r2,92
   81db8:	1000101e 	bne	r2,zero,81dfc <get_dir_divider_location+0x94>
   81dbc:	e0bffe17 	ldw	r2,-8(fp)
   81dc0:	1007883a 	mov	r3,r2
   81dc4:	e0bfff17 	ldw	r2,-4(fp)
   81dc8:	1885883a 	add	r2,r3,r2
   81dcc:	10800003 	ldbu	r2,0(r2)
   81dd0:	10803fcc 	andi	r2,r2,255
   81dd4:	1080201c 	xori	r2,r2,128
   81dd8:	10bfe004 	addi	r2,r2,-128
   81ddc:	10800be0 	cmpeqi	r2,r2,47
   81de0:	1000061e 	bne	r2,zero,81dfc <get_dir_divider_location+0x94>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
   81de4:	e0bffe17 	ldw	r2,-8(fp)
   81de8:	10800044 	addi	r2,r2,1
   81dec:	e0bffe15 	stw	r2,-8(fp)
   81df0:	e0fffe17 	ldw	r3,-8(fp)
   81df4:	e0bffd17 	ldw	r2,-12(fp)
   81df8:	18bfe616 	blt	r3,r2,81d94 <get_dir_divider_location+0x2c>
        {
            break;
        }
    }
    
    if (index == length)
   81dfc:	e0fffe17 	ldw	r3,-8(fp)
   81e00:	e0bffd17 	ldw	r2,-12(fp)
   81e04:	1880021e 	bne	r3,r2,81e10 <get_dir_divider_location+0xa8>
    {
        index = -1;
   81e08:	00bfffc4 	movi	r2,-1
   81e0c:	e0bffe15 	stw	r2,-8(fp)
    }
    
    return index;
   81e10:	e0bffe17 	ldw	r2,-8(fp)
}
   81e14:	e037883a 	mov	sp,fp
   81e18:	dfc00117 	ldw	ra,4(sp)
   81e1c:	df000017 	ldw	fp,0(sp)
   81e20:	dec00204 	addi	sp,sp,8
   81e24:	f800283a 	ret

00081e28 <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
   81e28:	defff604 	addi	sp,sp,-40
   81e2c:	df000915 	stw	fp,36(sp)
   81e30:	df000904 	addi	fp,sp,36
   81e34:	e13ff915 	stw	r4,-28(fp)
   81e38:	e17ffa15 	stw	r5,-24(fp)
   81e3c:	e1bffb15 	stw	r6,-20(fp)
    bool match = true;
   81e40:	00800044 	movi	r2,1
   81e44:	e0bff815 	stw	r2,-32(fp)
	int index;

    for (index = 0; index < 8; index++)
   81e48:	e03ff715 	stw	zero,-36(fp)
   81e4c:	00005006 	br	81f90 <match_file_record_to_name_ext+0x168>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
   81e50:	e0fff717 	ldw	r3,-36(fp)
   81e54:	e0bff917 	ldw	r2,-28(fp)
   81e58:	10c5883a 	add	r2,r2,r3
   81e5c:	10800003 	ldbu	r2,0(r2)
   81e60:	10803fcc 	andi	r2,r2,255
   81e64:	10801870 	cmpltui	r2,r2,97
   81e68:	1000111e 	bne	r2,zero,81eb0 <match_file_record_to_name_ext+0x88>
   81e6c:	e0fff717 	ldw	r3,-36(fp)
   81e70:	e0bff917 	ldw	r2,-28(fp)
   81e74:	10c5883a 	add	r2,r2,r3
   81e78:	10800003 	ldbu	r2,0(r2)
   81e7c:	10803fcc 	andi	r2,r2,255
   81e80:	10801ee8 	cmpgeui	r2,r2,123
   81e84:	10000a1e 	bne	r2,zero,81eb0 <match_file_record_to_name_ext+0x88>
   81e88:	e0fff717 	ldw	r3,-36(fp)
   81e8c:	e0bff917 	ldw	r2,-28(fp)
   81e90:	10c5883a 	add	r2,r2,r3
   81e94:	10800003 	ldbu	r2,0(r2)
   81e98:	10bff804 	addi	r2,r2,-32
   81e9c:	10803fcc 	andi	r2,r2,255
   81ea0:	1080201c 	xori	r2,r2,128
   81ea4:	10bfe004 	addi	r2,r2,-128
   81ea8:	e0bfff15 	stw	r2,-4(fp)
   81eac:	00000806 	br	81ed0 <match_file_record_to_name_ext+0xa8>
   81eb0:	e0fff717 	ldw	r3,-36(fp)
   81eb4:	e0bff917 	ldw	r2,-28(fp)
   81eb8:	10c5883a 	add	r2,r2,r3
   81ebc:	10800003 	ldbu	r2,0(r2)
   81ec0:	10803fcc 	andi	r2,r2,255
   81ec4:	1080201c 	xori	r2,r2,128
   81ec8:	10bfe004 	addi	r2,r2,-128
   81ecc:	e0bfff15 	stw	r2,-4(fp)
   81ed0:	e0bff717 	ldw	r2,-36(fp)
   81ed4:	1007883a 	mov	r3,r2
   81ed8:	e0bffa17 	ldw	r2,-24(fp)
   81edc:	1885883a 	add	r2,r3,r2
   81ee0:	10800003 	ldbu	r2,0(r2)
   81ee4:	10803fcc 	andi	r2,r2,255
   81ee8:	1080201c 	xori	r2,r2,128
   81eec:	10bfe004 	addi	r2,r2,-128
   81ef0:	10801850 	cmplti	r2,r2,97
   81ef4:	1000151e 	bne	r2,zero,81f4c <match_file_record_to_name_ext+0x124>
   81ef8:	e0bff717 	ldw	r2,-36(fp)
   81efc:	1007883a 	mov	r3,r2
   81f00:	e0bffa17 	ldw	r2,-24(fp)
   81f04:	1885883a 	add	r2,r3,r2
   81f08:	10800003 	ldbu	r2,0(r2)
   81f0c:	10803fcc 	andi	r2,r2,255
   81f10:	1080201c 	xori	r2,r2,128
   81f14:	10bfe004 	addi	r2,r2,-128
   81f18:	10801ec8 	cmpgei	r2,r2,123
   81f1c:	10000b1e 	bne	r2,zero,81f4c <match_file_record_to_name_ext+0x124>
   81f20:	e0bff717 	ldw	r2,-36(fp)
   81f24:	1007883a 	mov	r3,r2
   81f28:	e0bffa17 	ldw	r2,-24(fp)
   81f2c:	1885883a 	add	r2,r3,r2
   81f30:	10800003 	ldbu	r2,0(r2)
   81f34:	10bff804 	addi	r2,r2,-32
   81f38:	10803fcc 	andi	r2,r2,255
   81f3c:	1080201c 	xori	r2,r2,128
   81f40:	10bfe004 	addi	r2,r2,-128
   81f44:	e0bffe15 	stw	r2,-8(fp)
   81f48:	00000906 	br	81f70 <match_file_record_to_name_ext+0x148>
   81f4c:	e0bff717 	ldw	r2,-36(fp)
   81f50:	1007883a 	mov	r3,r2
   81f54:	e0bffa17 	ldw	r2,-24(fp)
   81f58:	1885883a 	add	r2,r3,r2
   81f5c:	10800003 	ldbu	r2,0(r2)
   81f60:	10803fcc 	andi	r2,r2,255
   81f64:	1080201c 	xori	r2,r2,128
   81f68:	10bfe004 	addi	r2,r2,-128
   81f6c:	e0bffe15 	stw	r2,-8(fp)
   81f70:	e0bfff17 	ldw	r2,-4(fp)
   81f74:	e0fffe17 	ldw	r3,-8(fp)
   81f78:	10c00226 	beq	r2,r3,81f84 <match_file_record_to_name_ext+0x15c>
        {
            match = false;
   81f7c:	e03ff815 	stw	zero,-32(fp)
			break;
   81f80:	00000606 	br	81f9c <match_file_record_to_name_ext+0x174>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
   81f84:	e0bff717 	ldw	r2,-36(fp)
   81f88:	10800044 	addi	r2,r2,1
   81f8c:	e0bff715 	stw	r2,-36(fp)
   81f90:	e0bff717 	ldw	r2,-36(fp)
   81f94:	10800210 	cmplti	r2,r2,8
   81f98:	103fad1e 	bne	r2,zero,81e50 <match_file_record_to_name_ext+0x28>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
   81f9c:	e03ff715 	stw	zero,-36(fp)
   81fa0:	00005406 	br	820f4 <match_file_record_to_name_ext+0x2cc>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
   81fa4:	e0fff717 	ldw	r3,-36(fp)
   81fa8:	e0bff917 	ldw	r2,-28(fp)
   81fac:	1885883a 	add	r2,r3,r2
   81fb0:	10800204 	addi	r2,r2,8
   81fb4:	10800003 	ldbu	r2,0(r2)
   81fb8:	10803fcc 	andi	r2,r2,255
   81fbc:	10801870 	cmpltui	r2,r2,97
   81fc0:	1000131e 	bne	r2,zero,82010 <match_file_record_to_name_ext+0x1e8>
   81fc4:	e0fff717 	ldw	r3,-36(fp)
   81fc8:	e0bff917 	ldw	r2,-28(fp)
   81fcc:	1885883a 	add	r2,r3,r2
   81fd0:	10800204 	addi	r2,r2,8
   81fd4:	10800003 	ldbu	r2,0(r2)
   81fd8:	10803fcc 	andi	r2,r2,255
   81fdc:	10801ee8 	cmpgeui	r2,r2,123
   81fe0:	10000b1e 	bne	r2,zero,82010 <match_file_record_to_name_ext+0x1e8>
   81fe4:	e0fff717 	ldw	r3,-36(fp)
   81fe8:	e0bff917 	ldw	r2,-28(fp)
   81fec:	1885883a 	add	r2,r3,r2
   81ff0:	10800204 	addi	r2,r2,8
   81ff4:	10800003 	ldbu	r2,0(r2)
   81ff8:	10bff804 	addi	r2,r2,-32
   81ffc:	10803fcc 	andi	r2,r2,255
   82000:	1080201c 	xori	r2,r2,128
   82004:	10bfe004 	addi	r2,r2,-128
   82008:	e0bffd15 	stw	r2,-12(fp)
   8200c:	00000906 	br	82034 <match_file_record_to_name_ext+0x20c>
   82010:	e0fff717 	ldw	r3,-36(fp)
   82014:	e0bff917 	ldw	r2,-28(fp)
   82018:	1885883a 	add	r2,r3,r2
   8201c:	10800204 	addi	r2,r2,8
   82020:	10800003 	ldbu	r2,0(r2)
   82024:	10803fcc 	andi	r2,r2,255
   82028:	1080201c 	xori	r2,r2,128
   8202c:	10bfe004 	addi	r2,r2,-128
   82030:	e0bffd15 	stw	r2,-12(fp)
   82034:	e0bff717 	ldw	r2,-36(fp)
   82038:	1007883a 	mov	r3,r2
   8203c:	e0bffb17 	ldw	r2,-20(fp)
   82040:	1885883a 	add	r2,r3,r2
   82044:	10800003 	ldbu	r2,0(r2)
   82048:	10803fcc 	andi	r2,r2,255
   8204c:	1080201c 	xori	r2,r2,128
   82050:	10bfe004 	addi	r2,r2,-128
   82054:	10801850 	cmplti	r2,r2,97
   82058:	1000151e 	bne	r2,zero,820b0 <match_file_record_to_name_ext+0x288>
   8205c:	e0bff717 	ldw	r2,-36(fp)
   82060:	1007883a 	mov	r3,r2
   82064:	e0bffb17 	ldw	r2,-20(fp)
   82068:	1885883a 	add	r2,r3,r2
   8206c:	10800003 	ldbu	r2,0(r2)
   82070:	10803fcc 	andi	r2,r2,255
   82074:	1080201c 	xori	r2,r2,128
   82078:	10bfe004 	addi	r2,r2,-128
   8207c:	10801ec8 	cmpgei	r2,r2,123
   82080:	10000b1e 	bne	r2,zero,820b0 <match_file_record_to_name_ext+0x288>
   82084:	e0bff717 	ldw	r2,-36(fp)
   82088:	1007883a 	mov	r3,r2
   8208c:	e0bffb17 	ldw	r2,-20(fp)
   82090:	1885883a 	add	r2,r3,r2
   82094:	10800003 	ldbu	r2,0(r2)
   82098:	10bff804 	addi	r2,r2,-32
   8209c:	10803fcc 	andi	r2,r2,255
   820a0:	1080201c 	xori	r2,r2,128
   820a4:	10bfe004 	addi	r2,r2,-128
   820a8:	e0bffc15 	stw	r2,-16(fp)
   820ac:	00000906 	br	820d4 <match_file_record_to_name_ext+0x2ac>
   820b0:	e0bff717 	ldw	r2,-36(fp)
   820b4:	1007883a 	mov	r3,r2
   820b8:	e0bffb17 	ldw	r2,-20(fp)
   820bc:	1885883a 	add	r2,r3,r2
   820c0:	10800003 	ldbu	r2,0(r2)
   820c4:	10803fcc 	andi	r2,r2,255
   820c8:	1080201c 	xori	r2,r2,128
   820cc:	10bfe004 	addi	r2,r2,-128
   820d0:	e0bffc15 	stw	r2,-16(fp)
   820d4:	e0bffd17 	ldw	r2,-12(fp)
   820d8:	e0fffc17 	ldw	r3,-16(fp)
   820dc:	10c00226 	beq	r2,r3,820e8 <match_file_record_to_name_ext+0x2c0>
        {
            match = false;
   820e0:	e03ff815 	stw	zero,-32(fp)
			break;
   820e4:	00000606 	br	82100 <match_file_record_to_name_ext+0x2d8>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
   820e8:	e0bff717 	ldw	r2,-36(fp)
   820ec:	10800044 	addi	r2,r2,1
   820f0:	e0bff715 	stw	r2,-36(fp)
   820f4:	e0bff717 	ldw	r2,-36(fp)
   820f8:	108000d0 	cmplti	r2,r2,3
   820fc:	103fa91e 	bne	r2,zero,81fa4 <match_file_record_to_name_ext+0x17c>
        {
            match = false;
			break;
        }
    }
	return match;
   82100:	e0bff817 	ldw	r2,-32(fp)
}
   82104:	e037883a 	mov	sp,fp
   82108:	df000017 	ldw	fp,0(sp)
   8210c:	dec00104 	addi	sp,sp,4
   82110:	f800283a 	ret

00082114 <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
   82114:	deffe604 	addi	sp,sp,-104
   82118:	dfc01915 	stw	ra,100(sp)
   8211c:	df001815 	stw	fp,96(sp)
   82120:	df001804 	addi	fp,sp,96
   82124:	e13ffc15 	stw	r4,-16(fp)
   82128:	e17ffd15 	stw	r5,-12(fp)
   8212c:	e1bffe15 	stw	r6,-8(fp)
    bool result = false;
   82130:	e03ff715 	stw	zero,-36(fp)
    int home_dir_cluster = 0;
   82134:	e03ff615 	stw	zero,-40(fp)
    int location, index;
    int start_location = 0;
   82138:	e03ff315 	stw	zero,-52(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
   8213c:	e13ffc17 	ldw	r4,-16(fp)
   82140:	0081d680 	call	81d68 <get_dir_divider_location>
   82144:	e0bff515 	stw	r2,-44(fp)
    while (location > 0)
   82148:	00012206 	br	825d4 <get_home_directory_cluster_for_file+0x4c0>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
   8214c:	00800804 	movi	r2,32
   82150:	e0bff805 	stb	r2,-32(fp)
   82154:	00800804 	movi	r2,32
   82158:	e0bff845 	stb	r2,-31(fp)
   8215c:	00800804 	movi	r2,32
   82160:	e0bff885 	stb	r2,-30(fp)
   82164:	00800804 	movi	r2,32
   82168:	e0bff8c5 	stb	r2,-29(fp)
   8216c:	00800804 	movi	r2,32
   82170:	e0bff905 	stb	r2,-28(fp)
   82174:	00800804 	movi	r2,32
   82178:	e0bff945 	stb	r2,-27(fp)
   8217c:	00800804 	movi	r2,32
   82180:	e0bff985 	stb	r2,-26(fp)
   82184:	00800804 	movi	r2,32
   82188:	e0bff9c5 	stb	r2,-25(fp)
        char extension[3] = { ' ', ' ', ' ' };
   8218c:	00800804 	movi	r2,32
   82190:	e0bffa05 	stb	r2,-24(fp)
   82194:	00800804 	movi	r2,32
   82198:	e0bffa45 	stb	r2,-23(fp)
   8219c:	00800804 	movi	r2,32
   821a0:	e0bffa85 	stb	r2,-22(fp)
        int ext_index = -1;
   821a4:	00bfffc4 	movi	r2,-1
   821a8:	e0bff215 	stw	r2,-56(fp)
        int new_cluster = home_dir_cluster;
   821ac:	e0bff617 	ldw	r2,-40(fp)
   821b0:	e0bff115 	stw	r2,-60(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
   821b4:	e03ff415 	stw	zero,-48(fp)
   821b8:	00002e06 	br	82274 <get_home_directory_cluster_for_file+0x160>
        {
            if (file_name[index+start_location] == '.')
   821bc:	e0fff417 	ldw	r3,-48(fp)
   821c0:	e0bff317 	ldw	r2,-52(fp)
   821c4:	1885883a 	add	r2,r3,r2
   821c8:	1007883a 	mov	r3,r2
   821cc:	e0bffc17 	ldw	r2,-16(fp)
   821d0:	1885883a 	add	r2,r3,r2
   821d4:	10800003 	ldbu	r2,0(r2)
   821d8:	10803fcc 	andi	r2,r2,255
   821dc:	1080201c 	xori	r2,r2,128
   821e0:	10bfe004 	addi	r2,r2,-128
   821e4:	10800b98 	cmpnei	r2,r2,46
   821e8:	1000031e 	bne	r2,zero,821f8 <get_home_directory_cluster_for_file+0xe4>
            {
                ext_index = index;
   821ec:	e0bff417 	ldw	r2,-48(fp)
   821f0:	e0bff215 	stw	r2,-56(fp)
   821f4:	00001c06 	br	82268 <get_home_directory_cluster_for_file+0x154>
            }
            else if (ext_index < 0)
   821f8:	e0bff217 	ldw	r2,-56(fp)
   821fc:	1004403a 	cmpge	r2,r2,zero
   82200:	10000c1e 	bne	r2,zero,82234 <get_home_directory_cluster_for_file+0x120>
            {
                name[index] = file_name[index+start_location];
   82204:	e13ff417 	ldw	r4,-48(fp)
   82208:	e0fff417 	ldw	r3,-48(fp)
   8220c:	e0bff317 	ldw	r2,-52(fp)
   82210:	1885883a 	add	r2,r3,r2
   82214:	1007883a 	mov	r3,r2
   82218:	e0bffc17 	ldw	r2,-16(fp)
   8221c:	1885883a 	add	r2,r3,r2
   82220:	10c00003 	ldbu	r3,0(r2)
   82224:	e0bff804 	addi	r2,fp,-32
   82228:	1105883a 	add	r2,r2,r4
   8222c:	10c00005 	stb	r3,0(r2)
   82230:	00000d06 	br	82268 <get_home_directory_cluster_for_file+0x154>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
   82234:	e0fff417 	ldw	r3,-48(fp)
   82238:	e0bff217 	ldw	r2,-56(fp)
   8223c:	1889c83a 	sub	r4,r3,r2
   82240:	e0fff417 	ldw	r3,-48(fp)
   82244:	e0bff317 	ldw	r2,-52(fp)
   82248:	1885883a 	add	r2,r3,r2
   8224c:	1007883a 	mov	r3,r2
   82250:	e0bffc17 	ldw	r2,-16(fp)
   82254:	1885883a 	add	r2,r3,r2
   82258:	10c00003 	ldbu	r3,0(r2)
   8225c:	e0bffa04 	addi	r2,fp,-24
   82260:	1105883a 	add	r2,r2,r4
   82264:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
   82268:	e0bff417 	ldw	r2,-48(fp)
   8226c:	10800044 	addi	r2,r2,1
   82270:	e0bff415 	stw	r2,-48(fp)
   82274:	e0fff417 	ldw	r3,-48(fp)
   82278:	e0bff517 	ldw	r2,-44(fp)
   8227c:	18bfcf16 	blt	r3,r2,821bc <get_home_directory_cluster_for_file+0xa8>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
   82280:	e0bff617 	ldw	r2,-40(fp)
   82284:	1004c03a 	cmpne	r2,r2,zero
   82288:	1000551e 	bne	r2,zero,823e0 <get_home_directory_cluster_for_file+0x2cc>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   8228c:	00800374 	movhi	r2,13
   82290:	10b82004 	addi	r2,r2,-8064
   82294:	1080050b 	ldhu	r2,20(r2)
   82298:	10bfffcc 	andi	r2,r2,65535
   8229c:	1008917a 	slli	r4,r2,5
   822a0:	00800374 	movhi	r2,13
   822a4:	10b82004 	addi	r2,r2,-8064
   822a8:	1080030b 	ldhu	r2,12(r2)
   822ac:	117fffcc 	andi	r5,r2,65535
   822b0:	00858ac0 	call	858ac <__divsi3>
   822b4:	e0bff015 	stw	r2,-64(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   822b8:	e03fef15 	stw	zero,-68(fp)
   822bc:	00003806 	br	823a0 <get_home_directory_cluster_for_file+0x28c>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
   822c0:	00800374 	movhi	r2,13
   822c4:	10b82004 	addi	r2,r2,-8064
   822c8:	10c01317 	ldw	r3,76(r2)
   822cc:	e0bfef17 	ldw	r2,-68(fp)
   822d0:	1885883a 	add	r2,r3,r2
   822d4:	1009883a 	mov	r4,r2
   822d8:	d166c017 	ldw	r5,-25856(gp)
   822dc:	0080c0c0 	call	80c0c <Read_Sector_Data>
   822e0:	1005003a 	cmpeq	r2,r2,zero
   822e4:	1000311e 	bne	r2,zero,823ac <get_home_directory_cluster_for_file+0x298>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   822e8:	e03fee15 	stw	zero,-72(fp)
   822ec:	00002306 	br	8237c <get_home_directory_cluster_for_file+0x268>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
   822f0:	e0bfee17 	ldw	r2,-72(fp)
   822f4:	1008917a 	slli	r4,r2,5
   822f8:	e1ffef17 	ldw	r7,-68(fp)
   822fc:	e17ffe17 	ldw	r5,-8(fp)
   82300:	000d883a 	mov	r6,zero
   82304:	0080fd00 	call	80fd0 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   82308:	e0bffe17 	ldw	r2,-8(fp)
   8230c:	10800003 	ldbu	r2,0(r2)
   82310:	10803fcc 	andi	r2,r2,255
   82314:	10803960 	cmpeqi	r2,r2,229
   82318:	1000151e 	bne	r2,zero,82370 <get_home_directory_cluster_for_file+0x25c>
   8231c:	e0bffe17 	ldw	r2,-8(fp)
   82320:	10800003 	ldbu	r2,0(r2)
   82324:	10803fcc 	andi	r2,r2,255
   82328:	1005003a 	cmpeq	r2,r2,zero
   8232c:	1000101e 	bne	r2,zero,82370 <get_home_directory_cluster_for_file+0x25c>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
   82330:	e17ff804 	addi	r5,fp,-32
   82334:	e1bffa04 	addi	r6,fp,-24
   82338:	e13ffe17 	ldw	r4,-8(fp)
   8233c:	0081e280 	call	81e28 <match_file_record_to_name_ext>
   82340:	e0bfed15 	stw	r2,-76(fp)
                            if (match)
   82344:	e0bfed17 	ldw	r2,-76(fp)
   82348:	1005003a 	cmpeq	r2,r2,zero
   8234c:	1000081e 	bne	r2,zero,82370 <get_home_directory_cluster_for_file+0x25c>
                            {
                                new_cluster = file_record->start_cluster_index;
   82350:	e0bffe17 	ldw	r2,-8(fp)
   82354:	1080058b 	ldhu	r2,22(r2)
   82358:	10bfffcc 	andi	r2,r2,65535
   8235c:	e0bff115 	stw	r2,-60(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
   82360:	e0fffe17 	ldw	r3,-8(fp)
   82364:	00800044 	movi	r2,1
   82368:	18800a15 	stw	r2,40(r3)
                                break;
   8236c:	00000606 	br	82388 <get_home_directory_cluster_for_file+0x274>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   82370:	e0bfee17 	ldw	r2,-72(fp)
   82374:	10800044 	addi	r2,r2,1
   82378:	e0bfee15 	stw	r2,-72(fp)
   8237c:	e0bfee17 	ldw	r2,-72(fp)
   82380:	10800410 	cmplti	r2,r2,16
   82384:	103fda1e 	bne	r2,zero,822f0 <get_home_directory_cluster_for_file+0x1dc>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
   82388:	e0fff117 	ldw	r3,-60(fp)
   8238c:	e0bff617 	ldw	r2,-40(fp)
   82390:	1880061e 	bne	r3,r2,823ac <get_home_directory_cluster_for_file+0x298>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   82394:	e0bfef17 	ldw	r2,-68(fp)
   82398:	10800044 	addi	r2,r2,1
   8239c:	e0bfef15 	stw	r2,-68(fp)
   823a0:	e0ffef17 	ldw	r3,-68(fp)
   823a4:	e0bff017 	ldw	r2,-64(fp)
   823a8:	18bfc516 	blt	r3,r2,822c0 <get_home_directory_cluster_for_file+0x1ac>
                if (new_cluster != home_dir_cluster)
                {
                    break;
                }
            }
            if (new_cluster != home_dir_cluster)
   823ac:	e0fff117 	ldw	r3,-60(fp)
   823b0:	e0bff617 	ldw	r2,-40(fp)
   823b4:	18800826 	beq	r3,r2,823d8 <get_home_directory_cluster_for_file+0x2c4>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
   823b8:	e0bff117 	ldw	r2,-60(fp)
   823bc:	e0bff615 	stw	r2,-40(fp)
                start_location = start_location+location+1;
   823c0:	e0fff317 	ldw	r3,-52(fp)
   823c4:	e0bff517 	ldw	r2,-44(fp)
   823c8:	1885883a 	add	r2,r3,r2
   823cc:	10800044 	addi	r2,r2,1
   823d0:	e0bff315 	stw	r2,-52(fp)
   823d4:	00007406 	br	825a8 <get_home_directory_cluster_for_file+0x494>
            }
            else
            {
                // Directory path is invalid. 
                return false;
   823d8:	e03fff15 	stw	zero,-4(fp)
   823dc:	00008c06 	br	82610 <get_home_directory_cluster_for_file+0x4fc>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
   823e0:	e0bff617 	ldw	r2,-40(fp)
   823e4:	e0bfec15 	stw	r2,-80(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   823e8:	e0bfec17 	ldw	r2,-80(fp)
   823ec:	113fff84 	addi	r4,r2,-2
   823f0:	00800374 	movhi	r2,13
   823f4:	10b82004 	addi	r2,r2,-8064
   823f8:	10800383 	ldbu	r2,14(r2)
   823fc:	11403fcc 	andi	r5,r2,255
   82400:	008597c0 	call	8597c <__mulsi3>
   82404:	1007883a 	mov	r3,r2
   82408:	00800374 	movhi	r2,13
   8240c:	10b82004 	addi	r2,r2,-8064
   82410:	10801417 	ldw	r2,80(r2)
   82414:	1885883a 	add	r2,r3,r2
   82418:	e0bfeb15 	stw	r2,-84(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   8241c:	e03fea15 	stw	zero,-88(fp)
   82420:	00003206 	br	824ec <get_home_directory_cluster_for_file+0x3d8>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   82424:	e0ffea17 	ldw	r3,-88(fp)
   82428:	e0bfeb17 	ldw	r2,-84(fp)
   8242c:	1889883a 	add	r4,r3,r2
   82430:	d166c017 	ldw	r5,-25856(gp)
   82434:	0080c0c0 	call	80c0c <Read_Sector_Data>
   82438:	1005003a 	cmpeq	r2,r2,zero
   8243c:	1000311e 	bne	r2,zero,82504 <get_home_directory_cluster_for_file+0x3f0>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
   82440:	e03fe915 	stw	zero,-92(fp)
   82444:	00002006 	br	824c8 <get_home_directory_cluster_for_file+0x3b4>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
   82448:	e0bfe917 	ldw	r2,-92(fp)
   8244c:	1008917a 	slli	r4,r2,5
   82450:	e1bfec17 	ldw	r6,-80(fp)
   82454:	e1ffea17 	ldw	r7,-88(fp)
   82458:	e17ffe17 	ldw	r5,-8(fp)
   8245c:	0080fd00 	call	80fd0 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   82460:	e0bffe17 	ldw	r2,-8(fp)
   82464:	10800003 	ldbu	r2,0(r2)
   82468:	10803fcc 	andi	r2,r2,255
   8246c:	10803960 	cmpeqi	r2,r2,229
   82470:	1000121e 	bne	r2,zero,824bc <get_home_directory_cluster_for_file+0x3a8>
   82474:	e0bffe17 	ldw	r2,-8(fp)
   82478:	10800003 	ldbu	r2,0(r2)
   8247c:	10803fcc 	andi	r2,r2,255
   82480:	1005003a 	cmpeq	r2,r2,zero
   82484:	10000d1e 	bne	r2,zero,824bc <get_home_directory_cluster_for_file+0x3a8>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
   82488:	e17ff804 	addi	r5,fp,-32
   8248c:	e1bffa04 	addi	r6,fp,-24
   82490:	e13ffe17 	ldw	r4,-8(fp)
   82494:	0081e280 	call	81e28 <match_file_record_to_name_ext>
   82498:	e0bfe815 	stw	r2,-96(fp)
                                if (match)
   8249c:	e0bfe817 	ldw	r2,-96(fp)
   824a0:	1005003a 	cmpeq	r2,r2,zero
   824a4:	1000051e 	bne	r2,zero,824bc <get_home_directory_cluster_for_file+0x3a8>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
   824a8:	e0bffe17 	ldw	r2,-8(fp)
   824ac:	1080058b 	ldhu	r2,22(r2)
   824b0:	10bfffcc 	andi	r2,r2,65535
   824b4:	e0bff115 	stw	r2,-60(fp)
                                    break;
   824b8:	00000606 	br	824d4 <get_home_directory_cluster_for_file+0x3c0>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
   824bc:	e0bfe917 	ldw	r2,-92(fp)
   824c0:	10800044 	addi	r2,r2,1
   824c4:	e0bfe915 	stw	r2,-92(fp)
   824c8:	e0bfe917 	ldw	r2,-92(fp)
   824cc:	10800410 	cmplti	r2,r2,16
   824d0:	103fdd1e 	bne	r2,zero,82448 <get_home_directory_cluster_for_file+0x334>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
   824d4:	e0fff117 	ldw	r3,-60(fp)
   824d8:	e0bff617 	ldw	r2,-40(fp)
   824dc:	1880091e 	bne	r3,r2,82504 <get_home_directory_cluster_for_file+0x3f0>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   824e0:	e0bfea17 	ldw	r2,-88(fp)
   824e4:	10800044 	addi	r2,r2,1
   824e8:	e0bfea15 	stw	r2,-88(fp)
   824ec:	00800374 	movhi	r2,13
   824f0:	10b82004 	addi	r2,r2,-8064
   824f4:	10800383 	ldbu	r2,14(r2)
   824f8:	10c03fcc 	andi	r3,r2,255
   824fc:	e0bfea17 	ldw	r2,-88(fp)
   82500:	10ffc816 	blt	r2,r3,82424 <get_home_directory_cluster_for_file+0x310>
                        break;
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
   82504:	e0fff117 	ldw	r3,-60(fp)
   82508:	e0bff617 	ldw	r2,-40(fp)
   8250c:	1880131e 	bne	r3,r2,8255c <get_home_directory_cluster_for_file+0x448>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
   82510:	e13ff117 	ldw	r4,-60(fp)
   82514:	e17ffb04 	addi	r5,fp,-20
   82518:	0080cfc0 	call	80cfc <get_cluster_flag>
   8251c:	1005003a 	cmpeq	r2,r2,zero
   82520:	10000c1e 	bne	r2,zero,82554 <get_home_directory_cluster_for_file+0x440>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
   82524:	e0bffb0b 	ldhu	r2,-20(fp)
   82528:	10bfffcc 	andi	r2,r2,65535
   8252c:	10fffe0c 	andi	r3,r2,65528
   82530:	00bffe14 	movui	r2,65528
   82534:	1880021e 	bne	r3,r2,82540 <get_home_directory_cluster_for_file+0x42c>
						{
							return false;
   82538:	e03fff15 	stw	zero,-4(fp)
   8253c:	00003406 	br	82610 <get_home_directory_cluster_for_file+0x4fc>
						}
						new_cluster = (next_cluster & 0x0000fff8);
   82540:	e0bffb0b 	ldhu	r2,-20(fp)
   82544:	10bfffcc 	andi	r2,r2,65535
   82548:	10bffe0c 	andi	r2,r2,65528
   8254c:	e0bff115 	stw	r2,-60(fp)
   82550:	00000206 	br	8255c <get_home_directory_cluster_for_file+0x448>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
   82554:	e03fff15 	stw	zero,-4(fp)
   82558:	00002d06 	br	82610 <get_home_directory_cluster_for_file+0x4fc>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
   8255c:	e0ffec17 	ldw	r3,-80(fp)
   82560:	00bffdd4 	movui	r2,65527
   82564:	10c00316 	blt	r2,r3,82574 <get_home_directory_cluster_for_file+0x460>
   82568:	e0fff117 	ldw	r3,-60(fp)
   8256c:	e0bff617 	ldw	r2,-40(fp)
   82570:	18bf9d26 	beq	r3,r2,823e8 <get_home_directory_cluster_for_file+0x2d4>
            if (new_cluster != home_dir_cluster)
   82574:	e0fff117 	ldw	r3,-60(fp)
   82578:	e0bff617 	ldw	r2,-40(fp)
   8257c:	18800826 	beq	r3,r2,825a0 <get_home_directory_cluster_for_file+0x48c>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
   82580:	e0bff117 	ldw	r2,-60(fp)
   82584:	e0bff615 	stw	r2,-40(fp)
                start_location = start_location+location+1;
   82588:	e0fff317 	ldw	r3,-52(fp)
   8258c:	e0bff517 	ldw	r2,-44(fp)
   82590:	1885883a 	add	r2,r3,r2
   82594:	10800044 	addi	r2,r2,1
   82598:	e0bff315 	stw	r2,-52(fp)
   8259c:	00000206 	br	825a8 <get_home_directory_cluster_for_file+0x494>
            }
            else
            {
                // Directory path is invalid. 
                return false;
   825a0:	e03fff15 	stw	zero,-4(fp)
   825a4:	00001a06 	br	82610 <get_home_directory_cluster_for_file+0x4fc>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
   825a8:	e0bff317 	ldw	r2,-52(fp)
   825ac:	1007883a 	mov	r3,r2
   825b0:	e0bffc17 	ldw	r2,-16(fp)
   825b4:	1889883a 	add	r4,r3,r2
   825b8:	0081d680 	call	81d68 <get_dir_divider_location>
   825bc:	e0bff515 	stw	r2,-44(fp)
        if (location < 0)
   825c0:	e0bff517 	ldw	r2,-44(fp)
   825c4:	1004403a 	cmpge	r2,r2,zero
   825c8:	1000021e 	bne	r2,zero,825d4 <get_home_directory_cluster_for_file+0x4c0>
        {
            // Directory has been located.
            result = true;
   825cc:	00800044 	movi	r2,1
   825d0:	e0bff715 	stw	r2,-36(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
   825d4:	e0bff517 	ldw	r2,-44(fp)
   825d8:	10800048 	cmpgei	r2,r2,1
   825dc:	103edb1e 	bne	r2,zero,8214c <get_home_directory_cluster_for_file+0x38>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
   825e0:	e0fffd17 	ldw	r3,-12(fp)
   825e4:	e0bff617 	ldw	r2,-40(fp)
   825e8:	18800015 	stw	r2,0(r3)
    if (home_dir_cluster == 0)
   825ec:	e0bff617 	ldw	r2,-40(fp)
   825f0:	1004c03a 	cmpne	r2,r2,zero
   825f4:	1000041e 	bne	r2,zero,82608 <get_home_directory_cluster_for_file+0x4f4>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
   825f8:	e0bffe17 	ldw	r2,-8(fp)
   825fc:	10000a15 	stw	zero,40(r2)
		result = true;
   82600:	00800044 	movi	r2,1
   82604:	e0bff715 	stw	r2,-36(fp)
    }
    return result;
   82608:	e0bff717 	ldw	r2,-36(fp)
   8260c:	e0bfff15 	stw	r2,-4(fp)
   82610:	e0bfff17 	ldw	r2,-4(fp)
}
   82614:	e037883a 	mov	sp,fp
   82618:	dfc00117 	ldw	ra,4(sp)
   8261c:	df000017 	ldw	fp,0(sp)
   82620:	dec00204 	addi	sp,sp,8
   82624:	f800283a 	ret

00082628 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
   82628:	deffe704 	addi	sp,sp,-100
   8262c:	dfc01815 	stw	ra,96(sp)
   82630:	df001715 	stw	fp,92(sp)
   82634:	df001704 	addi	fp,sp,92
   82638:	e13ffc15 	stw	r4,-16(fp)
   8263c:	e17ffd15 	stw	r5,-12(fp)
   82640:	e1bffe15 	stw	r6,-8(fp)
    int location = get_dir_divider_location( file_name );
   82644:	e13ffd17 	ldw	r4,-12(fp)
   82648:	0081d680 	call	81d68 <get_dir_divider_location>
   8264c:	e0bff715 	stw	r2,-36(fp)
    int last_dir_separator = 0;
   82650:	e03ff615 	stw	zero,-40(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
   82654:	00800804 	movi	r2,32
   82658:	e0bff805 	stb	r2,-32(fp)
   8265c:	00800804 	movi	r2,32
   82660:	e0bff845 	stb	r2,-31(fp)
   82664:	00800804 	movi	r2,32
   82668:	e0bff885 	stb	r2,-30(fp)
   8266c:	00800804 	movi	r2,32
   82670:	e0bff8c5 	stb	r2,-29(fp)
   82674:	00800804 	movi	r2,32
   82678:	e0bff905 	stb	r2,-28(fp)
   8267c:	00800804 	movi	r2,32
   82680:	e0bff945 	stb	r2,-27(fp)
   82684:	00800804 	movi	r2,32
   82688:	e0bff985 	stb	r2,-26(fp)
   8268c:	00800804 	movi	r2,32
   82690:	e0bff9c5 	stb	r2,-25(fp)
    char extension[3] = { ' ', ' ', ' ' };
   82694:	00800804 	movi	r2,32
   82698:	e0bffa05 	stb	r2,-24(fp)
   8269c:	00800804 	movi	r2,32
   826a0:	e0bffa45 	stb	r2,-23(fp)
   826a4:	00800804 	movi	r2,32
   826a8:	e0bffa85 	stb	r2,-22(fp)
    int ext_index = -1;
   826ac:	00bfffc4 	movi	r2,-1
   826b0:	e0bff515 	stw	r2,-44(fp)
    int cluster = directory_start_cluster;
   826b4:	e0bffc17 	ldw	r2,-16(fp)
   826b8:	e0bff415 	stw	r2,-48(fp)
    int index;
	int length = strlen(file_name);
   826bc:	e13ffd17 	ldw	r4,-12(fp)
   826c0:	0085bb40 	call	85bb4 <strlen>
   826c4:	e0bff215 	stw	r2,-56(fp)
    bool result = false;
   826c8:	e03ff115 	stw	zero,-60(fp)
    
    // Skip through all directory separators.
    while (location > 0)
   826cc:	00000b06 	br	826fc <find_file_in_directory+0xd4>
    {
        last_dir_separator = last_dir_separator+location+1;
   826d0:	e0fff617 	ldw	r3,-40(fp)
   826d4:	e0bff717 	ldw	r2,-36(fp)
   826d8:	1885883a 	add	r2,r3,r2
   826dc:	10800044 	addi	r2,r2,1
   826e0:	e0bff615 	stw	r2,-40(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
   826e4:	e0bff617 	ldw	r2,-40(fp)
   826e8:	1007883a 	mov	r3,r2
   826ec:	e0bffd17 	ldw	r2,-12(fp)
   826f0:	1889883a 	add	r4,r3,r2
   826f4:	0081d680 	call	81d68 <get_dir_divider_location>
   826f8:	e0bff715 	stw	r2,-36(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
   826fc:	e0bff717 	ldw	r2,-36(fp)
   82700:	10800048 	cmpgei	r2,r2,1
   82704:	103ff21e 	bne	r2,zero,826d0 <find_file_in_directory+0xa8>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
   82708:	e0bff617 	ldw	r2,-40(fp)
   8270c:	e0bff315 	stw	r2,-52(fp)
   82710:	00002b06 	br	827c0 <find_file_in_directory+0x198>
    {
        if (file_name[index] == '.')
   82714:	e0bff317 	ldw	r2,-52(fp)
   82718:	1007883a 	mov	r3,r2
   8271c:	e0bffd17 	ldw	r2,-12(fp)
   82720:	1885883a 	add	r2,r3,r2
   82724:	10800003 	ldbu	r2,0(r2)
   82728:	10803fcc 	andi	r2,r2,255
   8272c:	1080201c 	xori	r2,r2,128
   82730:	10bfe004 	addi	r2,r2,-128
   82734:	10800b98 	cmpnei	r2,r2,46
   82738:	1000031e 	bne	r2,zero,82748 <find_file_in_directory+0x120>
        {
            ext_index = index;
   8273c:	e0bff317 	ldw	r2,-52(fp)
   82740:	e0bff515 	stw	r2,-44(fp)
   82744:	00001b06 	br	827b4 <find_file_in_directory+0x18c>
        }
        else if (ext_index < 0)
   82748:	e0bff517 	ldw	r2,-44(fp)
   8274c:	1004403a 	cmpge	r2,r2,zero
   82750:	10000c1e 	bne	r2,zero,82784 <find_file_in_directory+0x15c>
        {
            name[index-last_dir_separator] = file_name[index];
   82754:	e0fff317 	ldw	r3,-52(fp)
   82758:	e0bff617 	ldw	r2,-40(fp)
   8275c:	1889c83a 	sub	r4,r3,r2
   82760:	e0bff317 	ldw	r2,-52(fp)
   82764:	1007883a 	mov	r3,r2
   82768:	e0bffd17 	ldw	r2,-12(fp)
   8276c:	1885883a 	add	r2,r3,r2
   82770:	10c00003 	ldbu	r3,0(r2)
   82774:	e0bff804 	addi	r2,fp,-32
   82778:	1105883a 	add	r2,r2,r4
   8277c:	10c00005 	stb	r3,0(r2)
   82780:	00000c06 	br	827b4 <find_file_in_directory+0x18c>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
   82784:	e0fff317 	ldw	r3,-52(fp)
   82788:	e0bff517 	ldw	r2,-44(fp)
   8278c:	1885c83a 	sub	r2,r3,r2
   82790:	113fffc4 	addi	r4,r2,-1
   82794:	e0bff317 	ldw	r2,-52(fp)
   82798:	1007883a 	mov	r3,r2
   8279c:	e0bffd17 	ldw	r2,-12(fp)
   827a0:	1885883a 	add	r2,r3,r2
   827a4:	10c00003 	ldbu	r3,0(r2)
   827a8:	e0bffa04 	addi	r2,fp,-24
   827ac:	1105883a 	add	r2,r2,r4
   827b0:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
   827b4:	e0bff317 	ldw	r2,-52(fp)
   827b8:	10800044 	addi	r2,r2,1
   827bc:	e0bff315 	stw	r2,-52(fp)
   827c0:	e0fff317 	ldw	r3,-52(fp)
   827c4:	e0bff217 	ldw	r2,-56(fp)
   827c8:	18bfd216 	blt	r3,r2,82714 <find_file_in_directory+0xec>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
   827cc:	e0bffc17 	ldw	r2,-16(fp)
   827d0:	1004c03a 	cmpne	r2,r2,zero
   827d4:	1000441e 	bne	r2,zero,828e8 <find_file_in_directory+0x2c0>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   827d8:	00800374 	movhi	r2,13
   827dc:	10b82004 	addi	r2,r2,-8064
   827e0:	1080050b 	ldhu	r2,20(r2)
   827e4:	10bfffcc 	andi	r2,r2,65535
   827e8:	1008917a 	slli	r4,r2,5
   827ec:	00800374 	movhi	r2,13
   827f0:	10b82004 	addi	r2,r2,-8064
   827f4:	1080030b 	ldhu	r2,12(r2)
   827f8:	117fffcc 	andi	r5,r2,65535
   827fc:	00858ac0 	call	858ac <__divsi3>
   82800:	e0bff015 	stw	r2,-64(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   82804:	e03fef15 	stw	zero,-68(fp)
   82808:	00003306 	br	828d8 <find_file_in_directory+0x2b0>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   8280c:	00800374 	movhi	r2,13
   82810:	10b82004 	addi	r2,r2,-8064
   82814:	10c01317 	ldw	r3,76(r2)
   82818:	e0bfef17 	ldw	r2,-68(fp)
   8281c:	1885883a 	add	r2,r3,r2
   82820:	1009883a 	mov	r4,r2
   82824:	d166c017 	ldw	r5,-25856(gp)
   82828:	0080c0c0 	call	80c0c <Read_Sector_Data>
   8282c:	1005003a 	cmpeq	r2,r2,zero
   82830:	10008e1e 	bne	r2,zero,82a6c <find_file_in_directory+0x444>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   82834:	e03fee15 	stw	zero,-72(fp)
   82838:	00001e06 	br	828b4 <find_file_in_directory+0x28c>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
   8283c:	e0bfee17 	ldw	r2,-72(fp)
   82840:	1008917a 	slli	r4,r2,5
   82844:	e1ffef17 	ldw	r7,-68(fp)
   82848:	e17ffe17 	ldw	r5,-8(fp)
   8284c:	000d883a 	mov	r6,zero
   82850:	0080fd00 	call	80fd0 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   82854:	e0bffe17 	ldw	r2,-8(fp)
   82858:	10800003 	ldbu	r2,0(r2)
   8285c:	10803fcc 	andi	r2,r2,255
   82860:	10803960 	cmpeqi	r2,r2,229
   82864:	1000101e 	bne	r2,zero,828a8 <find_file_in_directory+0x280>
   82868:	e0bffe17 	ldw	r2,-8(fp)
   8286c:	10800003 	ldbu	r2,0(r2)
   82870:	10803fcc 	andi	r2,r2,255
   82874:	1005003a 	cmpeq	r2,r2,zero
   82878:	10000b1e 	bne	r2,zero,828a8 <find_file_in_directory+0x280>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
   8287c:	e17ff804 	addi	r5,fp,-32
   82880:	e1bffa04 	addi	r6,fp,-24
   82884:	e13ffe17 	ldw	r4,-8(fp)
   82888:	0081e280 	call	81e28 <match_file_record_to_name_ext>
   8288c:	e0bfed15 	stw	r2,-76(fp)

                        if (match)
   82890:	e0bfed17 	ldw	r2,-76(fp)
   82894:	1005003a 	cmpeq	r2,r2,zero
   82898:	1000031e 	bne	r2,zero,828a8 <find_file_in_directory+0x280>
                        {
                            result = true;
   8289c:	00800044 	movi	r2,1
   828a0:	e0bff115 	stw	r2,-60(fp)
                            break;
   828a4:	00000606 	br	828c0 <find_file_in_directory+0x298>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   828a8:	e0bfee17 	ldw	r2,-72(fp)
   828ac:	10800044 	addi	r2,r2,1
   828b0:	e0bfee15 	stw	r2,-72(fp)
   828b4:	e0bfee17 	ldw	r2,-72(fp)
   828b8:	10800410 	cmplti	r2,r2,16
   828bc:	103fdf1e 	bne	r2,zero,8283c <find_file_in_directory+0x214>
            }
            else
            {
                break;
            }
            if (result)
   828c0:	e0bff117 	ldw	r2,-60(fp)
   828c4:	1004c03a 	cmpne	r2,r2,zero
   828c8:	1000681e 	bne	r2,zero,82a6c <find_file_in_directory+0x444>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   828cc:	e0bfef17 	ldw	r2,-68(fp)
   828d0:	10800044 	addi	r2,r2,1
   828d4:	e0bfef15 	stw	r2,-68(fp)
   828d8:	e0ffef17 	ldw	r3,-68(fp)
   828dc:	e0bff017 	ldw	r2,-64(fp)
   828e0:	18bfca16 	blt	r3,r2,8280c <find_file_in_directory+0x1e4>
   828e4:	00006106 	br	82a6c <find_file_in_directory+0x444>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   828e8:	e0bff417 	ldw	r2,-48(fp)
   828ec:	113fff84 	addi	r4,r2,-2
   828f0:	00800374 	movhi	r2,13
   828f4:	10b82004 	addi	r2,r2,-8064
   828f8:	10800383 	ldbu	r2,14(r2)
   828fc:	11403fcc 	andi	r5,r2,255
   82900:	008597c0 	call	8597c <__mulsi3>
   82904:	1007883a 	mov	r3,r2
   82908:	00800374 	movhi	r2,13
   8290c:	10b82004 	addi	r2,r2,-8064
   82910:	10801417 	ldw	r2,80(r2)
   82914:	1885883a 	add	r2,r3,r2
   82918:	e0bfec15 	stw	r2,-80(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   8291c:	e03feb15 	stw	zero,-84(fp)
   82920:	00003006 	br	829e4 <find_file_in_directory+0x3bc>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   82924:	e0ffeb17 	ldw	r3,-84(fp)
   82928:	e0bfec17 	ldw	r2,-80(fp)
   8292c:	1889883a 	add	r4,r3,r2
   82930:	d166c017 	ldw	r5,-25856(gp)
   82934:	0080c0c0 	call	80c0c <Read_Sector_Data>
   82938:	1005003a 	cmpeq	r2,r2,zero
   8293c:	10002f1e 	bne	r2,zero,829fc <find_file_in_directory+0x3d4>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   82940:	e03fea15 	stw	zero,-88(fp)
   82944:	00001e06 	br	829c0 <find_file_in_directory+0x398>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
   82948:	e0bfea17 	ldw	r2,-88(fp)
   8294c:	1008917a 	slli	r4,r2,5
   82950:	e1bff417 	ldw	r6,-48(fp)
   82954:	e1ffeb17 	ldw	r7,-84(fp)
   82958:	e17ffe17 	ldw	r5,-8(fp)
   8295c:	0080fd00 	call	80fd0 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   82960:	e0bffe17 	ldw	r2,-8(fp)
   82964:	10800003 	ldbu	r2,0(r2)
   82968:	10803fcc 	andi	r2,r2,255
   8296c:	10803960 	cmpeqi	r2,r2,229
   82970:	1000101e 	bne	r2,zero,829b4 <find_file_in_directory+0x38c>
   82974:	e0bffe17 	ldw	r2,-8(fp)
   82978:	10800003 	ldbu	r2,0(r2)
   8297c:	10803fcc 	andi	r2,r2,255
   82980:	1005003a 	cmpeq	r2,r2,zero
   82984:	10000b1e 	bne	r2,zero,829b4 <find_file_in_directory+0x38c>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
   82988:	e17ff804 	addi	r5,fp,-32
   8298c:	e1bffa04 	addi	r6,fp,-24
   82990:	e13ffe17 	ldw	r4,-8(fp)
   82994:	0081e280 	call	81e28 <match_file_record_to_name_ext>
   82998:	e0bfe915 	stw	r2,-92(fp)

                            if (match)
   8299c:	e0bfe917 	ldw	r2,-92(fp)
   829a0:	1005003a 	cmpeq	r2,r2,zero
   829a4:	1000031e 	bne	r2,zero,829b4 <find_file_in_directory+0x38c>
                            {                               
                                result = true;
   829a8:	00800044 	movi	r2,1
   829ac:	e0bff115 	stw	r2,-60(fp)
                                break;
   829b0:	00000606 	br	829cc <find_file_in_directory+0x3a4>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   829b4:	e0bfea17 	ldw	r2,-88(fp)
   829b8:	10800044 	addi	r2,r2,1
   829bc:	e0bfea15 	stw	r2,-88(fp)
   829c0:	e0bfea17 	ldw	r2,-88(fp)
   829c4:	10800410 	cmplti	r2,r2,16
   829c8:	103fdf1e 	bne	r2,zero,82948 <find_file_in_directory+0x320>
                }
                else
                {
                    break;
                }
                if (result)
   829cc:	e0bff117 	ldw	r2,-60(fp)
   829d0:	1004c03a 	cmpne	r2,r2,zero
   829d4:	1000091e 	bne	r2,zero,829fc <find_file_in_directory+0x3d4>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   829d8:	e0bfeb17 	ldw	r2,-84(fp)
   829dc:	10800044 	addi	r2,r2,1
   829e0:	e0bfeb15 	stw	r2,-84(fp)
   829e4:	00800374 	movhi	r2,13
   829e8:	10b82004 	addi	r2,r2,-8064
   829ec:	10800383 	ldbu	r2,14(r2)
   829f0:	10c03fcc 	andi	r3,r2,255
   829f4:	e0bfeb17 	ldw	r2,-84(fp)
   829f8:	10ffca16 	blt	r2,r3,82924 <find_file_in_directory+0x2fc>
                    break;
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
   829fc:	e0bff117 	ldw	r2,-60(fp)
   82a00:	1004c03a 	cmpne	r2,r2,zero
   82a04:	1000131e 	bne	r2,zero,82a54 <find_file_in_directory+0x42c>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
   82a08:	e13ff417 	ldw	r4,-48(fp)
   82a0c:	e17ffb04 	addi	r5,fp,-20
   82a10:	0080cfc0 	call	80cfc <get_cluster_flag>
   82a14:	1005003a 	cmpeq	r2,r2,zero
   82a18:	10000c1e 	bne	r2,zero,82a4c <find_file_in_directory+0x424>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   82a1c:	e0bffb0b 	ldhu	r2,-20(fp)
   82a20:	10bfffcc 	andi	r2,r2,65535
   82a24:	10fffe0c 	andi	r3,r2,65528
   82a28:	00bffe14 	movui	r2,65528
   82a2c:	1880021e 	bne	r3,r2,82a38 <find_file_in_directory+0x410>
					{
						return false;
   82a30:	e03fff15 	stw	zero,-4(fp)
   82a34:	00000f06 	br	82a74 <find_file_in_directory+0x44c>
					}
					cluster = (new_cluster & 0x0000fff8);
   82a38:	e0bffb0b 	ldhu	r2,-20(fp)
   82a3c:	10bfffcc 	andi	r2,r2,65535
   82a40:	10bffe0c 	andi	r2,r2,65528
   82a44:	e0bff415 	stw	r2,-48(fp)
   82a48:	00000206 	br	82a54 <find_file_in_directory+0x42c>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
   82a4c:	e03fff15 	stw	zero,-4(fp)
   82a50:	00000806 	br	82a74 <find_file_in_directory+0x44c>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
   82a54:	e0fff417 	ldw	r3,-48(fp)
   82a58:	00bffdd4 	movui	r2,65527
   82a5c:	10c00316 	blt	r2,r3,82a6c <find_file_in_directory+0x444>
   82a60:	e0bff117 	ldw	r2,-60(fp)
   82a64:	1005003a 	cmpeq	r2,r2,zero
   82a68:	103f9f1e 	bne	r2,zero,828e8 <find_file_in_directory+0x2c0>
    }
    
    return result;   
   82a6c:	e0bff117 	ldw	r2,-60(fp)
   82a70:	e0bfff15 	stw	r2,-4(fp)
   82a74:	e0bfff17 	ldw	r2,-4(fp)
}
   82a78:	e037883a 	mov	sp,fp
   82a7c:	dfc00117 	ldw	ra,4(sp)
   82a80:	df000017 	ldw	fp,0(sp)
   82a84:	dec00204 	addi	sp,sp,8
   82a88:	f800283a 	ret

00082a8c <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
   82a8c:	defff504 	addi	sp,sp,-44
   82a90:	dfc00a15 	stw	ra,40(sp)
   82a94:	df000915 	stw	fp,36(sp)
   82a98:	df000904 	addi	fp,sp,36
   82a9c:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
   82aa0:	00800374 	movhi	r2,13
   82aa4:	10b82004 	addi	r2,r2,-8064
   82aa8:	10801117 	ldw	r2,68(r2)
   82aac:	e0bffe15 	stw	r2,-8(fp)
    unsigned int cluster_index = 2;
   82ab0:	00800084 	movi	r2,2
   82ab4:	e0bffd15 	stw	r2,-12(fp)
    short int cluster = -1;
   82ab8:	00bfffc4 	movi	r2,-1
   82abc:	e0bffc0d 	sth	r2,-16(fp)
    bool result = false;
   82ac0:	e03ffb15 	stw	zero,-20(fp)
	unsigned max_cluster_index = 0;
   82ac4:	e03ffa15 	stw	zero,-24(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
   82ac8:	00800374 	movhi	r2,13
   82acc:	10b82004 	addi	r2,r2,-8064
   82ad0:	10801417 	ldw	r2,80(r2)
   82ad4:	e0bff915 	stw	r2,-28(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
   82ad8:	00800374 	movhi	r2,13
   82adc:	10b82004 	addi	r2,r2,-8064
   82ae0:	1080058b 	ldhu	r2,22(r2)
   82ae4:	10bfffcc 	andi	r2,r2,65535
   82ae8:	e0bff815 	stw	r2,-32(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
   82aec:	00800374 	movhi	r2,13
   82af0:	10b82004 	addi	r2,r2,-8064
   82af4:	10800917 	ldw	r2,36(r2)
   82af8:	e0bff715 	stw	r2,-36(fp)

	if (less_than_32 > greater_than_32)
   82afc:	e0fff817 	ldw	r3,-32(fp)
   82b00:	e0bff717 	ldw	r2,-36(fp)
   82b04:	10c00b2e 	bgeu	r2,r3,82b34 <find_first_empty_cluster+0xa8>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
   82b08:	e0fff817 	ldw	r3,-32(fp)
   82b0c:	e0bff917 	ldw	r2,-28(fp)
   82b10:	1889c83a 	sub	r4,r3,r2
   82b14:	00800374 	movhi	r2,13
   82b18:	10b82004 	addi	r2,r2,-8064
   82b1c:	10800383 	ldbu	r2,14(r2)
   82b20:	11403fcc 	andi	r5,r2,255
   82b24:	008596c0 	call	8596c <__udivsi3>
   82b28:	10800044 	addi	r2,r2,1
   82b2c:	e0bffa15 	stw	r2,-24(fp)
   82b30:	00002506 	br	82bc8 <find_first_empty_cluster+0x13c>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
   82b34:	e0fff717 	ldw	r3,-36(fp)
   82b38:	e0bff917 	ldw	r2,-28(fp)
   82b3c:	1889c83a 	sub	r4,r3,r2
   82b40:	00800374 	movhi	r2,13
   82b44:	10b82004 	addi	r2,r2,-8064
   82b48:	10800383 	ldbu	r2,14(r2)
   82b4c:	11403fcc 	andi	r5,r2,255
   82b50:	008596c0 	call	8596c <__udivsi3>
   82b54:	10800044 	addi	r2,r2,1
   82b58:	e0bffa15 	stw	r2,-24(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
   82b5c:	00001a06 	br	82bc8 <find_first_empty_cluster+0x13c>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
   82b60:	e13ffe17 	ldw	r4,-8(fp)
   82b64:	d166c017 	ldw	r5,-25856(gp)
   82b68:	0080c0c0 	call	80c0c <Read_Sector_Data>
   82b6c:	1005003a 	cmpeq	r2,r2,zero
   82b70:	10000f1e 	bne	r2,zero,82bb0 <find_first_empty_cluster+0x124>
        {
            do {
                cluster = (*((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, 2*(cluster_index % 256))));
   82b74:	e0bffd17 	ldw	r2,-12(fp)
   82b78:	10803fcc 	andi	r2,r2,255
   82b7c:	1085883a 	add	r2,r2,r2
   82b80:	1080000b 	ldhu	r2,0(r2)
   82b84:	e0bffc0d 	sth	r2,-16(fp)
                if (cluster == 0)
   82b88:	e0bffc0f 	ldh	r2,-16(fp)
   82b8c:	1005003a 	cmpeq	r2,r2,zero
   82b90:	1000071e 	bne	r2,zero,82bb0 <find_first_empty_cluster+0x124>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
   82b94:	e0bffd17 	ldw	r2,-12(fp)
   82b98:	10800044 	addi	r2,r2,1
   82b9c:	e0bffd15 	stw	r2,-12(fp)
                } 
            } while ((cluster_index % 256) != 0);
   82ba0:	e0bffd17 	ldw	r2,-12(fp)
   82ba4:	10803fcc 	andi	r2,r2,255
   82ba8:	1004c03a 	cmpne	r2,r2,zero
   82bac:	103ff11e 	bne	r2,zero,82b74 <find_first_empty_cluster+0xe8>
        }
        if (cluster == 0)
   82bb0:	e0bffc0f 	ldh	r2,-16(fp)
   82bb4:	1005003a 	cmpeq	r2,r2,zero
   82bb8:	1000081e 	bne	r2,zero,82bdc <find_first_empty_cluster+0x150>
        {
            break;
        }
        sector++;
   82bbc:	e0bffe17 	ldw	r2,-8(fp)
   82bc0:	10800044 	addi	r2,r2,1
   82bc4:	e0bffe15 	stw	r2,-8(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
   82bc8:	00800374 	movhi	r2,13
   82bcc:	10b82004 	addi	r2,r2,-8064
   82bd0:	10c01217 	ldw	r3,72(r2)
   82bd4:	e0bffe17 	ldw	r2,-8(fp)
   82bd8:	18bfe11e 	bne	r3,r2,82b60 <find_first_empty_cluster+0xd4>
        {
            break;
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
   82bdc:	e0bffc0f 	ldh	r2,-16(fp)
   82be0:	1004c03a 	cmpne	r2,r2,zero
   82be4:	1000081e 	bne	r2,zero,82c08 <find_first_empty_cluster+0x17c>
   82be8:	e0fffc0f 	ldh	r3,-16(fp)
   82bec:	e0bffa17 	ldw	r2,-24(fp)
   82bf0:	10c00536 	bltu	r2,r3,82c08 <find_first_empty_cluster+0x17c>
    {
        *cluster_number = cluster_index;
   82bf4:	e0bfff17 	ldw	r2,-4(fp)
   82bf8:	e0fffd17 	ldw	r3,-12(fp)
   82bfc:	10c00015 	stw	r3,0(r2)
		result = true;
   82c00:	00800044 	movi	r2,1
   82c04:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
   82c08:	e0bffb17 	ldw	r2,-20(fp)
}
   82c0c:	e037883a 	mov	sp,fp
   82c10:	dfc00117 	ldw	ra,4(sp)
   82c14:	df000017 	ldw	fp,0(sp)
   82c18:	dec00204 	addi	sp,sp,8
   82c1c:	f800283a 	ret

00082c20 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
   82c20:	defff404 	addi	sp,sp,-48
   82c24:	dfc00b15 	stw	ra,44(sp)
   82c28:	df000a15 	stw	fp,40(sp)
   82c2c:	df000a04 	addi	fp,sp,40
   82c30:	e13ffe15 	stw	r4,-8(fp)
    int result = -1;
   82c34:	00bfffc4 	movi	r2,-1
   82c38:	e0bffb15 	stw	r2,-20(fp)
    int cluster = start_cluster_index;
   82c3c:	e0bffe17 	ldw	r2,-8(fp)
   82c40:	e0bffa15 	stw	r2,-24(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   82c44:	e0bffa17 	ldw	r2,-24(fp)
   82c48:	113fff84 	addi	r4,r2,-2
   82c4c:	00800374 	movhi	r2,13
   82c50:	10b82004 	addi	r2,r2,-8064
   82c54:	10800383 	ldbu	r2,14(r2)
   82c58:	11403fcc 	andi	r5,r2,255
   82c5c:	008597c0 	call	8597c <__mulsi3>
   82c60:	1007883a 	mov	r3,r2
   82c64:	00800374 	movhi	r2,13
   82c68:	10b82004 	addi	r2,r2,-8064
   82c6c:	10801417 	ldw	r2,80(r2)
   82c70:	1885883a 	add	r2,r3,r2
   82c74:	e0bff915 	stw	r2,-28(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   82c78:	e03ff815 	stw	zero,-32(fp)
   82c7c:	00002806 	br	82d20 <find_first_empty_record_in_a_subdirectory+0x100>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   82c80:	e0fff817 	ldw	r3,-32(fp)
   82c84:	e0bff917 	ldw	r2,-28(fp)
   82c88:	1889883a 	add	r4,r3,r2
   82c8c:	d166c017 	ldw	r5,-25856(gp)
   82c90:	0080c0c0 	call	80c0c <Read_Sector_Data>
   82c94:	1005003a 	cmpeq	r2,r2,zero
   82c98:	1000271e 	bne	r2,zero,82d38 <find_first_empty_record_in_a_subdirectory+0x118>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   82c9c:	e03ff715 	stw	zero,-36(fp)
   82ca0:	00001906 	br	82d08 <find_first_empty_record_in_a_subdirectory+0xe8>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = (*((volatile unsigned char *)SD_CARD_BUFFER(SD_CARD_0_BASE, file_counter*32)));
   82ca4:	e0bff717 	ldw	r2,-36(fp)
   82ca8:	1004917a 	slli	r2,r2,5
   82cac:	10800003 	ldbu	r2,0(r2)
   82cb0:	10803fcc 	andi	r2,r2,255
   82cb4:	e0bff60d 	sth	r2,-40(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
   82cb8:	e0bff60b 	ldhu	r2,-40(fp)
   82cbc:	10803960 	cmpeqi	r2,r2,229
   82cc0:	1000031e 	bne	r2,zero,82cd0 <find_first_empty_record_in_a_subdirectory+0xb0>
   82cc4:	e0bff60b 	ldhu	r2,-40(fp)
   82cc8:	1004c03a 	cmpne	r2,r2,zero
   82ccc:	10000b1e 	bne	r2,zero,82cfc <find_first_empty_record_in_a_subdirectory+0xdc>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
   82cd0:	e0bff817 	ldw	r2,-32(fp)
   82cd4:	1006913a 	slli	r3,r2,4
   82cd8:	e0bff717 	ldw	r2,-36(fp)
   82cdc:	1885883a 	add	r2,r3,r2
   82ce0:	1006943a 	slli	r3,r2,16
   82ce4:	e0bffa17 	ldw	r2,-24(fp)
   82ce8:	1884b03a 	or	r2,r3,r2
   82cec:	e0bffb15 	stw	r2,-20(fp)
                        return result;
   82cf0:	e0bffb17 	ldw	r2,-20(fp)
   82cf4:	e0bfff15 	stw	r2,-4(fp)
   82cf8:	00005206 	br	82e44 <find_first_empty_record_in_a_subdirectory+0x224>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   82cfc:	e0bff717 	ldw	r2,-36(fp)
   82d00:	10800044 	addi	r2,r2,1
   82d04:	e0bff715 	stw	r2,-36(fp)
   82d08:	e0bff717 	ldw	r2,-36(fp)
   82d0c:	10800410 	cmplti	r2,r2,16
   82d10:	103fe41e 	bne	r2,zero,82ca4 <find_first_empty_record_in_a_subdirectory+0x84>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   82d14:	e0bff817 	ldw	r2,-32(fp)
   82d18:	10800044 	addi	r2,r2,1
   82d1c:	e0bff815 	stw	r2,-32(fp)
   82d20:	00800374 	movhi	r2,13
   82d24:	10b82004 	addi	r2,r2,-8064
   82d28:	10800383 	ldbu	r2,14(r2)
   82d2c:	10c03fcc 	andi	r3,r2,255
   82d30:	e0bff817 	ldw	r2,-32(fp)
   82d34:	10ffd216 	blt	r2,r3,82c80 <find_first_empty_record_in_a_subdirectory+0x60>
                break;
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
   82d38:	e0bffb17 	ldw	r2,-20(fp)
   82d3c:	1004403a 	cmpge	r2,r2,zero
   82d40:	1000381e 	bne	r2,zero,82e24 <find_first_empty_record_in_a_subdirectory+0x204>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
   82d44:	e13ffa17 	ldw	r4,-24(fp)
   82d48:	e17ffc04 	addi	r5,fp,-16
   82d4c:	0080cfc0 	call	80cfc <get_cluster_flag>
   82d50:	1005003a 	cmpeq	r2,r2,zero
   82d54:	1000311e 	bne	r2,zero,82e1c <find_first_empty_record_in_a_subdirectory+0x1fc>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   82d58:	e0bffc0b 	ldhu	r2,-16(fp)
   82d5c:	10bfffcc 	andi	r2,r2,65535
   82d60:	10fffe0c 	andi	r3,r2,65528
   82d64:	00bffe14 	movui	r2,65528
   82d68:	18802e1e 	bne	r3,r2,82e24 <find_first_empty_record_in_a_subdirectory+0x204>
				{
					int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
   82d6c:	e13ffd04 	addi	r4,fp,-12
   82d70:	0082a8c0 	call	82a8c <find_first_empty_cluster>
   82d74:	1005003a 	cmpeq	r2,r2,zero
   82d78:	1000231e 	bne	r2,zero,82e08 <find_first_empty_record_in_a_subdirectory+0x1e8>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
   82d7c:	e13ffa17 	ldw	r4,-24(fp)
   82d80:	e0bffd17 	ldw	r2,-12(fp)
   82d84:	117fffcc 	andi	r5,r2,65535
   82d88:	2960001c 	xori	r5,r5,32768
   82d8c:	29600004 	addi	r5,r5,-32768
   82d90:	01800044 	movi	r6,1
   82d94:	0080da00 	call	80da0 <mark_cluster>
   82d98:	1005003a 	cmpeq	r2,r2,zero
   82d9c:	10001a1e 	bne	r2,zero,82e08 <find_first_empty_record_in_a_subdirectory+0x1e8>
   82da0:	e0bffd17 	ldw	r2,-12(fp)
   82da4:	1009883a 	mov	r4,r2
   82da8:	017fffc4 	movi	r5,-1
   82dac:	01800044 	movi	r6,1
   82db0:	0080da00 	call	80da0 <mark_cluster>
   82db4:	1005003a 	cmpeq	r2,r2,zero
   82db8:	1000131e 	bne	r2,zero,82e08 <find_first_empty_record_in_a_subdirectory+0x1e8>
   82dbc:	e13ffa17 	ldw	r4,-24(fp)
   82dc0:	e0bffd17 	ldw	r2,-12(fp)
   82dc4:	117fffcc 	andi	r5,r2,65535
   82dc8:	2960001c 	xori	r5,r5,32768
   82dcc:	29600004 	addi	r5,r5,-32768
   82dd0:	000d883a 	mov	r6,zero
   82dd4:	0080da00 	call	80da0 <mark_cluster>
   82dd8:	1005003a 	cmpeq	r2,r2,zero
   82ddc:	10000a1e 	bne	r2,zero,82e08 <find_first_empty_record_in_a_subdirectory+0x1e8>
   82de0:	e0bffd17 	ldw	r2,-12(fp)
   82de4:	1009883a 	mov	r4,r2
   82de8:	017fffc4 	movi	r5,-1
   82dec:	000d883a 	mov	r6,zero
   82df0:	0080da00 	call	80da0 <mark_cluster>
   82df4:	1005003a 	cmpeq	r2,r2,zero
   82df8:	1000031e 	bne	r2,zero,82e08 <find_first_empty_record_in_a_subdirectory+0x1e8>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
   82dfc:	0080bbc0 	call	80bbc <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
   82e00:	e0bffd17 	ldw	r2,-12(fp)
   82e04:	e0bffb15 	stw	r2,-20(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
   82e08:	e0bffc0b 	ldhu	r2,-16(fp)
   82e0c:	10bfffcc 	andi	r2,r2,65535
   82e10:	10bffe0c 	andi	r2,r2,65528
   82e14:	e0bffa15 	stw	r2,-24(fp)
   82e18:	00000206 	br	82e24 <find_first_empty_record_in_a_subdirectory+0x204>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
   82e1c:	00bfffc4 	movi	r2,-1
   82e20:	e0bffb15 	stw	r2,-20(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
   82e24:	e0fffa17 	ldw	r3,-24(fp)
   82e28:	00bffdd4 	movui	r2,65527
   82e2c:	10c00316 	blt	r2,r3,82e3c <find_first_empty_record_in_a_subdirectory+0x21c>
   82e30:	e0bffb17 	ldw	r2,-20(fp)
   82e34:	10bfffe0 	cmpeqi	r2,r2,-1
   82e38:	103f821e 	bne	r2,zero,82c44 <find_first_empty_record_in_a_subdirectory+0x24>
    return result; 
   82e3c:	e0bffb17 	ldw	r2,-20(fp)
   82e40:	e0bfff15 	stw	r2,-4(fp)
   82e44:	e0bfff17 	ldw	r2,-4(fp)
}
   82e48:	e037883a 	mov	sp,fp
   82e4c:	dfc00117 	ldw	ra,4(sp)
   82e50:	df000017 	ldw	fp,0(sp)
   82e54:	dec00204 	addi	sp,sp,8
   82e58:	f800283a 	ret

00082e5c <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
   82e5c:	defff804 	addi	sp,sp,-32
   82e60:	dfc00715 	stw	ra,28(sp)
   82e64:	df000615 	stw	fp,24(sp)
   82e68:	df000604 	addi	fp,sp,24
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   82e6c:	00800374 	movhi	r2,13
   82e70:	10b82004 	addi	r2,r2,-8064
   82e74:	1080050b 	ldhu	r2,20(r2)
   82e78:	10bfffcc 	andi	r2,r2,65535
   82e7c:	1008917a 	slli	r4,r2,5
   82e80:	00800374 	movhi	r2,13
   82e84:	10b82004 	addi	r2,r2,-8064
   82e88:	1080030b 	ldhu	r2,12(r2)
   82e8c:	117fffcc 	andi	r5,r2,65535
   82e90:	00858ac0 	call	858ac <__divsi3>
   82e94:	e0bffe15 	stw	r2,-8(fp)
    int sector_index;
    int result = -1;
   82e98:	00bfffc4 	movi	r2,-1
   82e9c:	e0bffc15 	stw	r2,-16(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   82ea0:	e03ffd15 	stw	zero,-12(fp)
   82ea4:	00002906 	br	82f4c <find_first_empty_record_in_root_directory+0xf0>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   82ea8:	00800374 	movhi	r2,13
   82eac:	10b82004 	addi	r2,r2,-8064
   82eb0:	10c01317 	ldw	r3,76(r2)
   82eb4:	e0bffd17 	ldw	r2,-12(fp)
   82eb8:	1885883a 	add	r2,r3,r2
   82ebc:	1009883a 	mov	r4,r2
   82ec0:	d166c017 	ldw	r5,-25856(gp)
   82ec4:	0080c0c0 	call	80c0c <Read_Sector_Data>
   82ec8:	1005003a 	cmpeq	r2,r2,zero
   82ecc:	1000221e 	bne	r2,zero,82f58 <find_first_empty_record_in_root_directory+0xfc>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
   82ed0:	e03ffb15 	stw	zero,-20(fp)
   82ed4:	00001706 	br	82f34 <find_first_empty_record_in_root_directory+0xd8>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = (*((volatile unsigned char *)SD_CARD_BUFFER(SD_CARD_0_BASE, file_counter*32)));
   82ed8:	e0bffb17 	ldw	r2,-20(fp)
   82edc:	1004917a 	slli	r2,r2,5
   82ee0:	10800003 	ldbu	r2,0(r2)
   82ee4:	10803fcc 	andi	r2,r2,255
   82ee8:	e0bffa0d 	sth	r2,-24(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
   82eec:	e0bffa0b 	ldhu	r2,-24(fp)
   82ef0:	10803960 	cmpeqi	r2,r2,229
   82ef4:	1000031e 	bne	r2,zero,82f04 <find_first_empty_record_in_root_directory+0xa8>
   82ef8:	e0bffa0b 	ldhu	r2,-24(fp)
   82efc:	1004c03a 	cmpne	r2,r2,zero
   82f00:	1000091e 	bne	r2,zero,82f28 <find_first_empty_record_in_root_directory+0xcc>
                {
                    result = (sector_index*16 + file_counter) << 16;
   82f04:	e0bffd17 	ldw	r2,-12(fp)
   82f08:	1006913a 	slli	r3,r2,4
   82f0c:	e0bffb17 	ldw	r2,-20(fp)
   82f10:	1885883a 	add	r2,r3,r2
   82f14:	1004943a 	slli	r2,r2,16
   82f18:	e0bffc15 	stw	r2,-16(fp)
                    return result;
   82f1c:	e0bffc17 	ldw	r2,-16(fp)
   82f20:	e0bfff15 	stw	r2,-4(fp)
   82f24:	00000e06 	br	82f60 <find_first_empty_record_in_root_directory+0x104>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
   82f28:	e0bffb17 	ldw	r2,-20(fp)
   82f2c:	10800044 	addi	r2,r2,1
   82f30:	e0bffb15 	stw	r2,-20(fp)
   82f34:	e0bffb17 	ldw	r2,-20(fp)
   82f38:	10800410 	cmplti	r2,r2,16
   82f3c:	103fe61e 	bne	r2,zero,82ed8 <find_first_empty_record_in_root_directory+0x7c>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   82f40:	e0bffd17 	ldw	r2,-12(fp)
   82f44:	10800044 	addi	r2,r2,1
   82f48:	e0bffd15 	stw	r2,-12(fp)
   82f4c:	e0fffd17 	ldw	r3,-12(fp)
   82f50:	e0bffe17 	ldw	r2,-8(fp)
   82f54:	18bfd416 	blt	r3,r2,82ea8 <find_first_empty_record_in_root_directory+0x4c>
        else
        {
            break;
        }
    }
    return result;
   82f58:	e0bffc17 	ldw	r2,-16(fp)
   82f5c:	e0bfff15 	stw	r2,-4(fp)
   82f60:	e0bfff17 	ldw	r2,-4(fp)
}
   82f64:	e037883a 	mov	sp,fp
   82f68:	dfc00117 	ldw	ra,4(sp)
   82f6c:	df000017 	ldw	fp,0(sp)
   82f70:	dec00204 	addi	sp,sp,8
   82f74:	f800283a 	ret

00082f78 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
   82f78:	defffa04 	addi	sp,sp,-24
   82f7c:	df000515 	stw	fp,20(sp)
   82f80:	df000504 	addi	fp,sp,20
   82f84:	e13ffd15 	stw	r4,-12(fp)
   82f88:	e17ffe15 	stw	r5,-8(fp)
   82f8c:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
   82f90:	e03ffb15 	stw	zero,-20(fp)
    
    for(counter = 0; counter < 8; counter++)
   82f94:	e03ffc15 	stw	zero,-16(fp)
   82f98:	00002b06 	br	83048 <convert_filename_to_name_extension+0xd0>
    {
        if (filename[local] != '.')
   82f9c:	e0bffb17 	ldw	r2,-20(fp)
   82fa0:	1007883a 	mov	r3,r2
   82fa4:	e0bffd17 	ldw	r2,-12(fp)
   82fa8:	1885883a 	add	r2,r3,r2
   82fac:	10800003 	ldbu	r2,0(r2)
   82fb0:	10803fcc 	andi	r2,r2,255
   82fb4:	1080201c 	xori	r2,r2,128
   82fb8:	10bfe004 	addi	r2,r2,-128
   82fbc:	10800ba0 	cmpeqi	r2,r2,46
   82fc0:	1000181e 	bne	r2,zero,83024 <convert_filename_to_name_extension+0xac>
        {
            name[counter] = filename[local];
   82fc4:	e0bffc17 	ldw	r2,-16(fp)
   82fc8:	1007883a 	mov	r3,r2
   82fcc:	e0bffe17 	ldw	r2,-8(fp)
   82fd0:	1889883a 	add	r4,r3,r2
   82fd4:	e0bffb17 	ldw	r2,-20(fp)
   82fd8:	1007883a 	mov	r3,r2
   82fdc:	e0bffd17 	ldw	r2,-12(fp)
   82fe0:	1885883a 	add	r2,r3,r2
   82fe4:	10800003 	ldbu	r2,0(r2)
   82fe8:	20800005 	stb	r2,0(r4)
            if (filename[local] != 0) local++;
   82fec:	e0bffb17 	ldw	r2,-20(fp)
   82ff0:	1007883a 	mov	r3,r2
   82ff4:	e0bffd17 	ldw	r2,-12(fp)
   82ff8:	1885883a 	add	r2,r3,r2
   82ffc:	10800003 	ldbu	r2,0(r2)
   83000:	10803fcc 	andi	r2,r2,255
   83004:	1080201c 	xori	r2,r2,128
   83008:	10bfe004 	addi	r2,r2,-128
   8300c:	1005003a 	cmpeq	r2,r2,zero
   83010:	10000a1e 	bne	r2,zero,8303c <convert_filename_to_name_extension+0xc4>
   83014:	e0bffb17 	ldw	r2,-20(fp)
   83018:	10800044 	addi	r2,r2,1
   8301c:	e0bffb15 	stw	r2,-20(fp)
   83020:	00000606 	br	8303c <convert_filename_to_name_extension+0xc4>
        }
        else
        {
            name[counter] = ' ';
   83024:	e0bffc17 	ldw	r2,-16(fp)
   83028:	1007883a 	mov	r3,r2
   8302c:	e0bffe17 	ldw	r2,-8(fp)
   83030:	1887883a 	add	r3,r3,r2
   83034:	00800804 	movi	r2,32
   83038:	18800005 	stb	r2,0(r3)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
   8303c:	e0bffc17 	ldw	r2,-16(fp)
   83040:	10800044 	addi	r2,r2,1
   83044:	e0bffc15 	stw	r2,-16(fp)
   83048:	e0bffc17 	ldw	r2,-16(fp)
   8304c:	10800210 	cmplti	r2,r2,8
   83050:	103fd21e 	bne	r2,zero,82f9c <convert_filename_to_name_extension+0x24>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
   83054:	e0bffb17 	ldw	r2,-20(fp)
   83058:	1007883a 	mov	r3,r2
   8305c:	e0bffd17 	ldw	r2,-12(fp)
   83060:	1885883a 	add	r2,r3,r2
   83064:	10800003 	ldbu	r2,0(r2)
   83068:	10803fcc 	andi	r2,r2,255
   8306c:	1080201c 	xori	r2,r2,128
   83070:	10bfe004 	addi	r2,r2,-128
   83074:	10800b98 	cmpnei	r2,r2,46
   83078:	1000031e 	bne	r2,zero,83088 <convert_filename_to_name_extension+0x110>
   8307c:	e0bffb17 	ldw	r2,-20(fp)
   83080:	10800044 	addi	r2,r2,1
   83084:	e0bffb15 	stw	r2,-20(fp)
    for(counter = 0; counter < 3; counter++)
   83088:	e03ffc15 	stw	zero,-16(fp)
   8308c:	00002106 	br	83114 <convert_filename_to_name_extension+0x19c>
    {
        if (filename[local] != 0)
   83090:	e0bffb17 	ldw	r2,-20(fp)
   83094:	1007883a 	mov	r3,r2
   83098:	e0bffd17 	ldw	r2,-12(fp)
   8309c:	1885883a 	add	r2,r3,r2
   830a0:	10800003 	ldbu	r2,0(r2)
   830a4:	10803fcc 	andi	r2,r2,255
   830a8:	1080201c 	xori	r2,r2,128
   830ac:	10bfe004 	addi	r2,r2,-128
   830b0:	1005003a 	cmpeq	r2,r2,zero
   830b4:	10000e1e 	bne	r2,zero,830f0 <convert_filename_to_name_extension+0x178>
        {
            extension[counter] = filename[local];
   830b8:	e0bffc17 	ldw	r2,-16(fp)
   830bc:	1007883a 	mov	r3,r2
   830c0:	e0bfff17 	ldw	r2,-4(fp)
   830c4:	1889883a 	add	r4,r3,r2
   830c8:	e0bffb17 	ldw	r2,-20(fp)
   830cc:	1007883a 	mov	r3,r2
   830d0:	e0bffd17 	ldw	r2,-12(fp)
   830d4:	1885883a 	add	r2,r3,r2
   830d8:	10800003 	ldbu	r2,0(r2)
   830dc:	20800005 	stb	r2,0(r4)
            local++;
   830e0:	e0bffb17 	ldw	r2,-20(fp)
   830e4:	10800044 	addi	r2,r2,1
   830e8:	e0bffb15 	stw	r2,-20(fp)
   830ec:	00000606 	br	83108 <convert_filename_to_name_extension+0x190>
        }
        else
        {
            extension[counter] = ' ';
   830f0:	e0bffc17 	ldw	r2,-16(fp)
   830f4:	1007883a 	mov	r3,r2
   830f8:	e0bfff17 	ldw	r2,-4(fp)
   830fc:	1887883a 	add	r3,r3,r2
   83100:	00800804 	movi	r2,32
   83104:	18800005 	stb	r2,0(r3)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
   83108:	e0bffc17 	ldw	r2,-16(fp)
   8310c:	10800044 	addi	r2,r2,1
   83110:	e0bffc15 	stw	r2,-16(fp)
   83114:	e0bffc17 	ldw	r2,-16(fp)
   83118:	108000d0 	cmplti	r2,r2,3
   8311c:	103fdc1e 	bne	r2,zero,83090 <convert_filename_to_name_extension+0x118>
        {
            extension[counter] = ' ';
        }
    }

}
   83120:	e037883a 	mov	sp,fp
   83124:	df000017 	ldw	fp,0(sp)
   83128:	dec00104 	addi	sp,sp,4
   8312c:	f800283a 	ret

00083130 <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
   83130:	defff204 	addi	sp,sp,-56
   83134:	dfc00d15 	stw	ra,52(sp)
   83138:	df000c15 	stw	fp,48(sp)
   8313c:	dc000b15 	stw	r16,44(sp)
   83140:	df000b04 	addi	fp,sp,44
   83144:	e13ffb15 	stw	r4,-20(fp)
   83148:	e17ffc15 	stw	r5,-16(fp)
   8314c:	e1bffd15 	stw	r6,-12(fp)
    unsigned int cluster_number;
    bool result = false;
   83150:	e03ff915 	stw	zero,-28(fp)
    
    if (find_first_empty_cluster(&cluster_number))
   83154:	e13ffa04 	addi	r4,fp,-24
   83158:	0082a8c0 	call	82a8c <find_first_empty_cluster>
   8315c:	1005003a 	cmpeq	r2,r2,zero
   83160:	1000a71e 	bne	r2,zero,83400 <create_file+0x2d0>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
   83164:	e0bffd17 	ldw	r2,-12(fp)
   83168:	10800a17 	ldw	r2,40(r2)
   8316c:	1004c03a 	cmpne	r2,r2,zero
   83170:	1000031e 	bne	r2,zero,83180 <create_file+0x50>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
   83174:	0082e5c0 	call	82e5c <find_first_empty_record_in_root_directory>
   83178:	e0bff815 	stw	r2,-32(fp)
   8317c:	00000506 	br	83194 <create_file+0x64>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
   83180:	e0bffd17 	ldw	r2,-12(fp)
   83184:	1080058b 	ldhu	r2,22(r2)
   83188:	113fffcc 	andi	r4,r2,65535
   8318c:	0082c200 	call	82c20 <find_first_empty_record_in_a_subdirectory>
   83190:	e0bff815 	stw	r2,-32(fp)
        }
        if (record_index >= 0)
   83194:	e0bff817 	ldw	r2,-32(fp)
   83198:	1004803a 	cmplt	r2,r2,zero
   8319c:	1000981e 	bne	r2,zero,83400 <create_file+0x2d0>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
   831a0:	e13ffb17 	ldw	r4,-20(fp)
   831a4:	0081d680 	call	81d68 <get_dir_divider_location>
   831a8:	e0bff615 	stw	r2,-40(fp)
            int last_dir_separator = 0;
   831ac:	e03ff515 	stw	zero,-44(fp)

            // Skip through all directory separators.
            while (location > 0)
   831b0:	00000b06 	br	831e0 <create_file+0xb0>
            {
                last_dir_separator = last_dir_separator+location+1;
   831b4:	e0fff517 	ldw	r3,-44(fp)
   831b8:	e0bff617 	ldw	r2,-40(fp)
   831bc:	1885883a 	add	r2,r3,r2
   831c0:	10800044 	addi	r2,r2,1
   831c4:	e0bff515 	stw	r2,-44(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
   831c8:	e0bff517 	ldw	r2,-44(fp)
   831cc:	1007883a 	mov	r3,r2
   831d0:	e0bffb17 	ldw	r2,-20(fp)
   831d4:	1889883a 	add	r4,r3,r2
   831d8:	0081d680 	call	81d68 <get_dir_divider_location>
   831dc:	e0bff615 	stw	r2,-40(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
   831e0:	e0bff617 	ldw	r2,-40(fp)
   831e4:	10800048 	cmpgei	r2,r2,1
   831e8:	103ff21e 	bne	r2,zero,831b4 <create_file+0x84>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), file_record->name, file_record->extension);
   831ec:	e0bff517 	ldw	r2,-44(fp)
   831f0:	1007883a 	mov	r3,r2
   831f4:	e0bffb17 	ldw	r2,-20(fp)
   831f8:	1889883a 	add	r4,r3,r2
   831fc:	e0bffc17 	ldw	r2,-16(fp)
   83200:	100b883a 	mov	r5,r2
   83204:	e0bffc17 	ldw	r2,-16(fp)
   83208:	10800204 	addi	r2,r2,8
   8320c:	100d883a 	mov	r6,r2
   83210:	0082f780 	call	82f78 <convert_filename_to_name_extension>
                         
            file_record->attributes = 0x20;
   83214:	e0fffc17 	ldw	r3,-16(fp)
   83218:	00800804 	movi	r2,32
   8321c:	188002c5 	stb	r2,11(r3)
            file_record->create_time = 0;
   83220:	e0bffc17 	ldw	r2,-16(fp)
   83224:	1000030d 	sth	zero,12(r2)
            file_record->create_date = (30 << 9) + (1 << 5) + 1;
   83228:	e0fffc17 	ldw	r3,-16(fp)
   8322c:	008f0844 	movi	r2,15393
   83230:	1880038d 	sth	r2,14(r3)
            file_record->last_access_date = (30 << 9) + (1 << 5) + 1;
   83234:	e0fffc17 	ldw	r3,-16(fp)
   83238:	008f0844 	movi	r2,15393
   8323c:	1880040d 	sth	r2,16(r3)
            file_record->last_modified_time = 0;
   83240:	e0bffc17 	ldw	r2,-16(fp)
   83244:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = (30 << 9) + (1 << 5) + 1;
   83248:	e0fffc17 	ldw	r3,-16(fp)
   8324c:	008f0844 	movi	r2,15393
   83250:	1880050d 	sth	r2,20(r3)
            file_record->start_cluster_index = cluster_number;
   83254:	e0bffa17 	ldw	r2,-24(fp)
   83258:	1007883a 	mov	r3,r2
   8325c:	e0bffc17 	ldw	r2,-16(fp)
   83260:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
   83264:	e0bffc17 	ldw	r2,-16(fp)
   83268:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
   8326c:	e0fffa17 	ldw	r3,-24(fp)
   83270:	e0bffc17 	ldw	r2,-16(fp)
   83274:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
   83278:	e0bffc17 	ldw	r2,-16(fp)
   8327c:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
   83280:	e0bffc17 	ldw	r2,-16(fp)
   83284:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
   83288:	e0bff817 	ldw	r2,-32(fp)
   8328c:	10ffffcc 	andi	r3,r2,65535
   83290:	e0bffc17 	ldw	r2,-16(fp)
   83294:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
   83298:	e0bff817 	ldw	r2,-32(fp)
   8329c:	1005d43a 	srai	r2,r2,16
   832a0:	10bfffcc 	andi	r2,r2,65535
   832a4:	e0bfff15 	stw	r2,-4(fp)
   832a8:	e0ffff17 	ldw	r3,-4(fp)
   832ac:	1804403a 	cmpge	r2,r3,zero
   832b0:	1000031e 	bne	r2,zero,832c0 <create_file+0x190>
   832b4:	e0bfff17 	ldw	r2,-4(fp)
   832b8:	108003c4 	addi	r2,r2,15
   832bc:	e0bfff15 	stw	r2,-4(fp)
   832c0:	e0ffff17 	ldw	r3,-4(fp)
   832c4:	1805d13a 	srai	r2,r3,4
   832c8:	1007883a 	mov	r3,r2
   832cc:	e0bffc17 	ldw	r2,-16(fp)
   832d0:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
   832d4:	e0bff817 	ldw	r2,-32(fp)
   832d8:	1005d43a 	srai	r2,r2,16
   832dc:	108003cc 	andi	r2,r2,15
   832e0:	1004917a 	slli	r2,r2,5
   832e4:	1007883a 	mov	r3,r2
   832e8:	e0bffc17 	ldw	r2,-16(fp)
   832ec:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
   832f0:	e0bffd17 	ldw	r2,-12(fp)
   832f4:	1080058b 	ldhu	r2,22(r2)
   832f8:	10ffffcc 	andi	r3,r2,65535
   832fc:	e0bffc17 	ldw	r2,-16(fp)
   83300:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
   83304:	e0fffc17 	ldw	r3,-16(fp)
   83308:	00800044 	movi	r2,1
   8330c:	18800f15 	stw	r2,60(r3)
            file_record->modified = true;
   83310:	e0fffc17 	ldw	r3,-16(fp)
   83314:	00800044 	movi	r2,1
   83318:	18800e15 	stw	r2,56(r3)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
   8331c:	e0bffc17 	ldw	r2,-16(fp)
   83320:	10800a17 	ldw	r2,40(r2)
   83324:	1004c03a 	cmpne	r2,r2,zero
   83328:	1000081e 	bne	r2,zero,8334c <create_file+0x21c>
   8332c:	00800374 	movhi	r2,13
   83330:	10b82004 	addi	r2,r2,-8064
   83334:	10c01317 	ldw	r3,76(r2)
   83338:	e0bffc17 	ldw	r2,-16(fp)
   8333c:	10800b17 	ldw	r2,44(r2)
   83340:	1887883a 	add	r3,r3,r2
   83344:	e0fffe15 	stw	r3,-8(fp)
   83348:	00001006 	br	8338c <create_file+0x25c>
   8334c:	00800374 	movhi	r2,13
   83350:	10b82004 	addi	r2,r2,-8064
   83354:	14001417 	ldw	r16,80(r2)
   83358:	e0bffc17 	ldw	r2,-16(fp)
   8335c:	10800a17 	ldw	r2,40(r2)
   83360:	113fff84 	addi	r4,r2,-2
   83364:	00800374 	movhi	r2,13
   83368:	10b82004 	addi	r2,r2,-8064
   8336c:	10800383 	ldbu	r2,14(r2)
   83370:	11403fcc 	andi	r5,r2,255
   83374:	008597c0 	call	8597c <__mulsi3>
   83378:	8087883a 	add	r3,r16,r2
   8337c:	e0bffc17 	ldw	r2,-16(fp)
   83380:	10800b17 	ldw	r2,44(r2)
   83384:	1887883a 	add	r3,r3,r2
   83388:	e0fffe15 	stw	r3,-8(fp)
   8338c:	e0bffe17 	ldw	r2,-8(fp)
   83390:	e0bff715 	stw	r2,-36(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
   83394:	e13ff717 	ldw	r4,-36(fp)
   83398:	d166c017 	ldw	r5,-25856(gp)
   8339c:	0080c0c0 	call	80c0c <Read_Sector_Data>
   833a0:	1005003a 	cmpeq	r2,r2,zero
   833a4:	1000161e 	bne	r2,zero,83400 <create_file+0x2d0>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
   833a8:	e0bffc17 	ldw	r2,-16(fp)
   833ac:	10800c0b 	ldhu	r2,48(r2)
   833b0:	113fffcc 	andi	r4,r2,65535
   833b4:	2120001c 	xori	r4,r4,32768
   833b8:	21200004 	addi	r4,r4,-32768
   833bc:	e17ffc17 	ldw	r5,-16(fp)
   833c0:	00811980 	call	81198 <Write_File_Record_At_Offset>
   833c4:	1005003a 	cmpeq	r2,r2,zero
   833c8:	10000d1e 	bne	r2,zero,83400 <create_file+0x2d0>
                {
                    Save_Modified_Sector();
   833cc:	0080bbc0 	call	80bbc <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
   833d0:	e13ffa17 	ldw	r4,-24(fp)
   833d4:	017fffc4 	movi	r5,-1
   833d8:	01800044 	movi	r6,1
   833dc:	0080da00 	call	80da0 <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
   833e0:	e13ffa17 	ldw	r4,-24(fp)
   833e4:	017fffc4 	movi	r5,-1
   833e8:	000d883a 	mov	r6,zero
   833ec:	0080da00 	call	80da0 <mark_cluster>
   833f0:	1005003a 	cmpeq	r2,r2,zero
   833f4:	1000021e 	bne	r2,zero,83400 <create_file+0x2d0>
                    {
                        result = true;
   833f8:	00800044 	movi	r2,1
   833fc:	e0bff915 	stw	r2,-28(fp)
                }
            }
        }

    }
    return result;           
   83400:	e0bff917 	ldw	r2,-28(fp)
}
   83404:	e037883a 	mov	sp,fp
   83408:	dfc00217 	ldw	ra,8(sp)
   8340c:	df000117 	ldw	fp,4(sp)
   83410:	dc000017 	ldw	r16,0(sp)
   83414:	dec00304 	addi	sp,sp,12
   83418:	f800283a 	ret

0008341c <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
   8341c:	defffb04 	addi	sp,sp,-20
   83420:	df000415 	stw	fp,16(sp)
   83424:	df000404 	addi	fp,sp,16
   83428:	e13ffe15 	stw	r4,-8(fp)
   8342c:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
   83430:	e03ffc15 	stw	zero,-16(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
   83434:	e03ffd15 	stw	zero,-12(fp)
   83438:	00001606 	br	83494 <copy_file_record_name_to_string+0x78>
	{
		if (file_record->name[index] != ' ')
   8343c:	e0fffd17 	ldw	r3,-12(fp)
   83440:	e0bffe17 	ldw	r2,-8(fp)
   83444:	10c5883a 	add	r2,r2,r3
   83448:	10800003 	ldbu	r2,0(r2)
   8344c:	10803fcc 	andi	r2,r2,255
   83450:	10800820 	cmpeqi	r2,r2,32
   83454:	10000c1e 	bne	r2,zero,83488 <copy_file_record_name_to_string+0x6c>
		{
			file_name[flength] = file_record->name[index];
   83458:	e0bffc17 	ldw	r2,-16(fp)
   8345c:	1007883a 	mov	r3,r2
   83460:	e0bfff17 	ldw	r2,-4(fp)
   83464:	1889883a 	add	r4,r3,r2
   83468:	e0fffd17 	ldw	r3,-12(fp)
   8346c:	e0bffe17 	ldw	r2,-8(fp)
   83470:	10c5883a 	add	r2,r2,r3
   83474:	10800003 	ldbu	r2,0(r2)
   83478:	20800005 	stb	r2,0(r4)
			flength = flength + 1;
   8347c:	e0bffc17 	ldw	r2,-16(fp)
   83480:	10800044 	addi	r2,r2,1
   83484:	e0bffc15 	stw	r2,-16(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
   83488:	e0bffd17 	ldw	r2,-12(fp)
   8348c:	10800044 	addi	r2,r2,1
   83490:	e0bffd15 	stw	r2,-12(fp)
   83494:	e0bffd17 	ldw	r2,-12(fp)
   83498:	10800210 	cmplti	r2,r2,8
   8349c:	103fe71e 	bne	r2,zero,8343c <copy_file_record_name_to_string+0x20>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
   834a0:	e0bffe17 	ldw	r2,-8(fp)
   834a4:	10800203 	ldbu	r2,8(r2)
   834a8:	10803fcc 	andi	r2,r2,255
   834ac:	10800820 	cmpeqi	r2,r2,32
   834b0:	1000261e 	bne	r2,zero,8354c <copy_file_record_name_to_string+0x130>
	{
		file_name[flength] = '.';
   834b4:	e0bffc17 	ldw	r2,-16(fp)
   834b8:	1007883a 	mov	r3,r2
   834bc:	e0bfff17 	ldw	r2,-4(fp)
   834c0:	1887883a 	add	r3,r3,r2
   834c4:	00800b84 	movi	r2,46
   834c8:	18800005 	stb	r2,0(r3)
		flength = flength + 1;
   834cc:	e0bffc17 	ldw	r2,-16(fp)
   834d0:	10800044 	addi	r2,r2,1
   834d4:	e0bffc15 	stw	r2,-16(fp)
		for (index = 0; index < 3; index++)
   834d8:	e03ffd15 	stw	zero,-12(fp)
   834dc:	00001806 	br	83540 <copy_file_record_name_to_string+0x124>
		{
			if (file_record->extension[index] != ' ')
   834e0:	e0fffd17 	ldw	r3,-12(fp)
   834e4:	e0bffe17 	ldw	r2,-8(fp)
   834e8:	1885883a 	add	r2,r3,r2
   834ec:	10800204 	addi	r2,r2,8
   834f0:	10800003 	ldbu	r2,0(r2)
   834f4:	10803fcc 	andi	r2,r2,255
   834f8:	10800820 	cmpeqi	r2,r2,32
   834fc:	10000d1e 	bne	r2,zero,83534 <copy_file_record_name_to_string+0x118>
			{
				file_name[flength] = file_record->extension[index];
   83500:	e0bffc17 	ldw	r2,-16(fp)
   83504:	1007883a 	mov	r3,r2
   83508:	e0bfff17 	ldw	r2,-4(fp)
   8350c:	1889883a 	add	r4,r3,r2
   83510:	e0fffd17 	ldw	r3,-12(fp)
   83514:	e0bffe17 	ldw	r2,-8(fp)
   83518:	1885883a 	add	r2,r3,r2
   8351c:	10800204 	addi	r2,r2,8
   83520:	10800003 	ldbu	r2,0(r2)
   83524:	20800005 	stb	r2,0(r4)
				flength = flength + 1;
   83528:	e0bffc17 	ldw	r2,-16(fp)
   8352c:	10800044 	addi	r2,r2,1
   83530:	e0bffc15 	stw	r2,-16(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
   83534:	e0bffd17 	ldw	r2,-12(fp)
   83538:	10800044 	addi	r2,r2,1
   8353c:	e0bffd15 	stw	r2,-12(fp)
   83540:	e0bffd17 	ldw	r2,-12(fp)
   83544:	108000d0 	cmplti	r2,r2,3
   83548:	103fe51e 	bne	r2,zero,834e0 <copy_file_record_name_to_string+0xc4>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
   8354c:	e0bffc17 	ldw	r2,-16(fp)
   83550:	1007883a 	mov	r3,r2
   83554:	e0bfff17 	ldw	r2,-4(fp)
   83558:	1885883a 	add	r2,r3,r2
   8355c:	10000005 	stb	zero,0(r2)
}
   83560:	e037883a 	mov	sp,fp
   83564:	df000017 	ldw	fp,0(sp)
   83568:	dec00104 	addi	sp,sp,4
   8356c:	f800283a 	ret

00083570 <sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


void sd_card_open_dev()
{
   83570:	deffff04 	addi	sp,sp,-4
   83574:	df000015 	stw	fp,0(sp)
   83578:	d839883a 	mov	fp,sp
	// for details)
	// alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);

	// if (dev != NULL)
	// {
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(SD_CARD_0_BASE));
   8357c:	00808d04 	movi	r2,564
   83580:	d0a6bb15 	stw	r2,-25876(gp)
		status_register = ((int *) SD_CARD_STATUS(SD_CARD_0_BASE));
   83584:	00808904 	movi	r2,548
   83588:	d0a6bc15 	stw	r2,-25872(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(SD_CARD_0_BASE, 0));
   8358c:	00808404 	movi	r2,528
   83590:	d0a6bd15 	stw	r2,-25868(gp)
		command_register = ((short int *) SD_CARD_COMMAND(SD_CARD_0_BASE));
   83594:	00808c04 	movi	r2,560
   83598:	d0a6be15 	stw	r2,-25864(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(SD_CARD_0_BASE));
   8359c:	00808b04 	movi	r2,556
   835a0:	d0a6bf15 	stw	r2,-25860(gp)
		// device_pointer = dev;
		initialized = false;
   835a4:	d026b915 	stw	zero,-25884(gp)
		is_sd_card_formated_as_FAT16 = false;
   835a8:	d026ba15 	stw	zero,-25880(gp)
		search_data.valid = false;
   835ac:	00800374 	movhi	r2,13
   835b0:	10b81b04 	addi	r2,r2,-8084
   835b4:	10000415 	stw	zero,16(r2)
	// }
	// return dev;
}
   835b8:	e037883a 	mov	sp,fp
   835bc:	df000017 	ldw	fp,0(sp)
   835c0:	dec00104 	addi	sp,sp,4
   835c4:	f800283a 	ret

000835c8 <sd_card_is_Present>:


bool sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
   835c8:	defffe04 	addi	sp,sp,-8
   835cc:	df000115 	stw	fp,4(sp)
   835d0:	df000104 	addi	fp,sp,4
    bool result = false;
   835d4:	e03fff15 	stw	zero,-4(fp)

    if ((*aux_status_register & 0x02) != 0)
   835d8:	d0a6bb17 	ldw	r2,-25876(gp)
   835dc:	1080000b 	ldhu	r2,0(r2)
   835e0:	10bfffcc 	andi	r2,r2,65535
   835e4:	1080008c 	andi	r2,r2,2
   835e8:	1005003a 	cmpeq	r2,r2,zero
   835ec:	1000031e 	bne	r2,zero,835fc <sd_card_is_Present+0x34>
    {
        result = true;
   835f0:	00800044 	movi	r2,1
   835f4:	e0bfff15 	stw	r2,-4(fp)
   835f8:	00000106 	br	83600 <sd_card_is_Present+0x38>
    } else {
		initialized = false;
   835fc:	d026b915 	stw	zero,-25884(gp)
	}
    return result;
   83600:	e0bfff17 	ldw	r2,-4(fp)
}
   83604:	e037883a 	mov	sp,fp
   83608:	df000017 	ldw	fp,0(sp)
   8360c:	dec00104 	addi	sp,sp,4
   83610:	f800283a 	ret

00083614 <sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
   83614:	defffd04 	addi	sp,sp,-12
   83618:	dfc00215 	stw	ra,8(sp)
   8361c:	df000115 	stw	fp,4(sp)
   83620:	df000104 	addi	fp,sp,4
	bool result = false;
   83624:	e03fff15 	stw	zero,-4(fp)

	if (sd_card_is_Present())
   83628:	00835c80 	call	835c8 <sd_card_is_Present>
   8362c:	1005003a 	cmpeq	r2,r2,zero
   83630:	1000151e 	bne	r2,zero,83688 <sd_card_is_FAT16+0x74>
	{
		// Check if an SD Card is in the SD Card slot.
		if ((*aux_status_register & 0x02) != 0)
   83634:	d0a6bb17 	ldw	r2,-25876(gp)
   83638:	1080000b 	ldhu	r2,0(r2)
   8363c:	10bfffcc 	andi	r2,r2,65535
   83640:	1080008c 	andi	r2,r2,2
   83644:	1005003a 	cmpeq	r2,r2,zero
   83648:	10000b1e 	bne	r2,zero,83678 <sd_card_is_FAT16+0x64>
		{
			if (initialized == false)
   8364c:	d0a6b917 	ldw	r2,-25884(gp)
   83650:	1004c03a 	cmpne	r2,r2,zero
   83654:	10000a1e 	bne	r2,zero,83680 <sd_card_is_FAT16+0x6c>
			{
				// Now determine if the card is formatted as FAT 16.
				is_sd_card_formated_as_FAT16 = Look_for_FAT16();
   83658:	00818e40 	call	818e4 <Look_for_FAT16>
   8365c:	d0a6ba15 	stw	r2,-25880(gp)
				initialized = is_sd_card_formated_as_FAT16;
   83660:	d0a6ba17 	ldw	r2,-25880(gp)
   83664:	d0a6b915 	stw	r2,-25884(gp)
				search_data.valid = false;
   83668:	00800374 	movhi	r2,13
   8366c:	10b81b04 	addi	r2,r2,-8084
   83670:	10000415 	stw	zero,16(r2)
   83674:	00000206 	br	83680 <sd_card_is_FAT16+0x6c>
			}
		}
		else
		{
			// If not then you may as well not open the device.
			initialized = false;
   83678:	d026b915 	stw	zero,-25884(gp)
			is_sd_card_formated_as_FAT16 = false;
   8367c:	d026ba15 	stw	zero,-25880(gp)
		}
		result = is_sd_card_formated_as_FAT16;
   83680:	d0a6ba17 	ldw	r2,-25880(gp)
   83684:	e0bfff15 	stw	r2,-4(fp)
	}

	return result;
   83688:	e0bfff17 	ldw	r2,-4(fp)
}
   8368c:	e037883a 	mov	sp,fp
   83690:	dfc00117 	ldw	ra,4(sp)
   83694:	df000017 	ldw	fp,0(sp)
   83698:	dec00204 	addi	sp,sp,8
   8369c:	f800283a 	ret

000836a0 <sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
   836a0:	deffea04 	addi	sp,sp,-88
   836a4:	dfc01515 	stw	ra,84(sp)
   836a8:	df001415 	stw	fp,80(sp)
   836ac:	df001404 	addi	fp,sp,80
   836b0:	e13ffe15 	stw	r4,-8(fp)
   836b4:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
   836b8:	00800084 	movi	r2,2
   836bc:	e0bfec0d 	sth	r2,-80(fp)
	if ((sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   836c0:	00835c80 	call	835c8 <sd_card_is_Present>
   836c4:	1005003a 	cmpeq	r2,r2,zero
   836c8:	1000241e 	bne	r2,zero,8375c <sd_card_find_first+0xbc>
   836cc:	d0a6ba17 	ldw	r2,-25880(gp)
   836d0:	1005003a 	cmpeq	r2,r2,zero
   836d4:	1000211e 	bne	r2,zero,8375c <sd_card_find_first+0xbc>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
   836d8:	e17fed04 	addi	r5,fp,-76
   836dc:	e1bfee04 	addi	r6,fp,-72
   836e0:	e13ffe17 	ldw	r4,-8(fp)
   836e4:	00821140 	call	82114 <get_home_directory_cluster_for_file>
   836e8:	1005003a 	cmpeq	r2,r2,zero
   836ec:	1000191e 	bne	r2,zero,83754 <sd_card_find_first+0xb4>
		{
			search_data.directory_root_cluster = home_directory_cluster;
   836f0:	e0bfed17 	ldw	r2,-76(fp)
   836f4:	1007883a 	mov	r3,r2
   836f8:	00800374 	movhi	r2,13
   836fc:	10b81b04 	addi	r2,r2,-8084
   83700:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
   83704:	e0bfed17 	ldw	r2,-76(fp)
   83708:	1007883a 	mov	r3,r2
   8370c:	00800374 	movhi	r2,13
   83710:	10b81b04 	addi	r2,r2,-8084
   83714:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
   83718:	00800374 	movhi	r2,13
   8371c:	10b81b04 	addi	r2,r2,-8084
   83720:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
   83724:	00c00374 	movhi	r3,13
   83728:	18f81b04 	addi	r3,r3,-8084
   8372c:	00bfffc4 	movi	r2,-1
   83730:	1880030d 	sth	r2,12(r3)
			search_data.valid = true;
   83734:	00c00374 	movhi	r3,13
   83738:	18f81b04 	addi	r3,r3,-8084
   8373c:	00800044 	movi	r2,1
   83740:	18800415 	stw	r2,16(r3)
			result = sd_card_find_next(file_name);
   83744:	e13fff17 	ldw	r4,-4(fp)
   83748:	00837740 	call	83774 <sd_card_find_next>
   8374c:	e0bfec0d 	sth	r2,-80(fp)
   83750:	00000206 	br	8375c <sd_card_find_first+0xbc>
		}
		else
		{
			result = 1;
   83754:	00800044 	movi	r2,1
   83758:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
   8375c:	e0bfec0f 	ldh	r2,-80(fp)
}
   83760:	e037883a 	mov	sp,fp
   83764:	dfc00117 	ldw	ra,4(sp)
   83768:	df000017 	ldw	fp,0(sp)
   8376c:	dec00204 	addi	sp,sp,8
   83770:	f800283a 	ret

00083774 <sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
   83774:	deffe404 	addi	sp,sp,-112
   83778:	dfc01b15 	stw	ra,108(sp)
   8377c:	df001a15 	stw	fp,104(sp)
   83780:	df001a04 	addi	fp,sp,104
   83784:	e13ffe15 	stw	r4,-8(fp)
	short int result = 2;
   83788:	00800084 	movi	r2,2
   8378c:	e0bfed0d 	sth	r2,-76(fp)
	if ((sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   83790:	00835c80 	call	835c8 <sd_card_is_Present>
   83794:	1005003a 	cmpeq	r2,r2,zero
   83798:	1000d81e 	bne	r2,zero,83afc <sd_card_find_next+0x388>
   8379c:	d0a6ba17 	ldw	r2,-25880(gp)
   837a0:	1005003a 	cmpeq	r2,r2,zero
   837a4:	1000d51e 	bne	r2,zero,83afc <sd_card_find_next+0x388>
	{
		if (search_data.valid)
   837a8:	00800374 	movhi	r2,13
   837ac:	10b81b04 	addi	r2,r2,-8084
   837b0:	10800417 	ldw	r2,16(r2)
   837b4:	1005003a 	cmpeq	r2,r2,zero
   837b8:	1000ce1e 	bne	r2,zero,83af4 <sd_card_find_next+0x380>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
   837bc:	00800374 	movhi	r2,13
   837c0:	10b81b04 	addi	r2,r2,-8084
   837c4:	10800117 	ldw	r2,4(r2)
   837c8:	e0bfec15 	stw	r2,-80(fp)

			if (cluster == 0)
   837cc:	e0bfec17 	ldw	r2,-80(fp)
   837d0:	1004c03a 	cmpne	r2,r2,zero
   837d4:	1000521e 	bne	r2,zero,83920 <sd_card_find_next+0x1ac>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   837d8:	00800374 	movhi	r2,13
   837dc:	10b82004 	addi	r2,r2,-8064
   837e0:	1080050b 	ldhu	r2,20(r2)
   837e4:	10bfffcc 	andi	r2,r2,65535
   837e8:	1008917a 	slli	r4,r2,5
   837ec:	00800374 	movhi	r2,13
   837f0:	10b82004 	addi	r2,r2,-8064
   837f4:	1080030b 	ldhu	r2,12(r2)
   837f8:	117fffcc 	andi	r5,r2,65535
   837fc:	00858ac0 	call	858ac <__divsi3>
   83800:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index = search_data.current_sector_in_cluster;
   83804:	00800374 	movhi	r2,13
   83808:	10b81b04 	addi	r2,r2,-8084
   8380c:	10800217 	ldw	r2,8(r2)
   83810:	e0bfea15 	stw	r2,-88(fp)
				int file_counter = search_data.file_index_in_sector+1;
   83814:	00800374 	movhi	r2,13
   83818:	10b81b04 	addi	r2,r2,-8084
   8381c:	1080030b 	ldhu	r2,12(r2)
   83820:	10bfffcc 	andi	r2,r2,65535
   83824:	10a0001c 	xori	r2,r2,32768
   83828:	10a00004 	addi	r2,r2,-32768
   8382c:	10800044 	addi	r2,r2,1
   83830:	e0bfe915 	stw	r2,-92(fp)
    
				for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   83834:	e03fea15 	stw	zero,-88(fp)
   83838:	00003306 	br	83908 <sd_card_find_next+0x194>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   8383c:	00800374 	movhi	r2,13
   83840:	10b82004 	addi	r2,r2,-8064
   83844:	10c01317 	ldw	r3,76(r2)
   83848:	e0bfea17 	ldw	r2,-88(fp)
   8384c:	1885883a 	add	r2,r3,r2
   83850:	1009883a 	mov	r4,r2
   83854:	d166c017 	ldw	r5,-25856(gp)
   83858:	0080c0c0 	call	80c0c <Read_Sector_Data>
   8385c:	1005003a 	cmpeq	r2,r2,zero
   83860:	10002c1e 	bne	r2,zero,83914 <sd_card_find_next+0x1a0>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
   83864:	00002106 	br	838ec <sd_card_find_next+0x178>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
   83868:	e0bfe917 	ldw	r2,-92(fp)
   8386c:	1008917a 	slli	r4,r2,5
   83870:	e1ffea17 	ldw	r7,-88(fp)
   83874:	e17fee04 	addi	r5,fp,-72
   83878:	000d883a 	mov	r6,zero
   8387c:	0080fd00 	call	80fd0 <Read_File_Record_At_Offset>
   83880:	1005003a 	cmpeq	r2,r2,zero
   83884:	1000161e 	bne	r2,zero,838e0 <sd_card_find_next+0x16c>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
   83888:	e0bfee03 	ldbu	r2,-72(fp)
   8388c:	10803fcc 	andi	r2,r2,255
   83890:	1005003a 	cmpeq	r2,r2,zero
   83894:	1000121e 	bne	r2,zero,838e0 <sd_card_find_next+0x16c>
   83898:	e0bfee03 	ldbu	r2,-72(fp)
   8389c:	10803fcc 	andi	r2,r2,255
   838a0:	10803960 	cmpeqi	r2,r2,229
   838a4:	10000e1e 	bne	r2,zero,838e0 <sd_card_find_next+0x16c>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
   838a8:	e0bfe917 	ldw	r2,-92(fp)
   838ac:	1007883a 	mov	r3,r2
   838b0:	00800374 	movhi	r2,13
   838b4:	10b81b04 	addi	r2,r2,-8084
   838b8:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
   838bc:	e0ffea17 	ldw	r3,-88(fp)
   838c0:	00800374 	movhi	r2,13
   838c4:	10b81b04 	addi	r2,r2,-8084
   838c8:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
   838cc:	e13fee04 	addi	r4,fp,-72
   838d0:	e17ffe17 	ldw	r5,-8(fp)
   838d4:	008341c0 	call	8341c <copy_file_record_name_to_string>
									return 0;
   838d8:	e03fff15 	stw	zero,-4(fp)
   838dc:	00008906 	br	83b04 <sd_card_find_next+0x390>
				for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
   838e0:	e0bfe917 	ldw	r2,-92(fp)
   838e4:	10800044 	addi	r2,r2,1
   838e8:	e0bfe915 	stw	r2,-92(fp)
   838ec:	e0bfe917 	ldw	r2,-92(fp)
   838f0:	10800410 	cmplti	r2,r2,16
   838f4:	103fdc1e 	bne	r2,zero,83868 <sd_card_find_next+0xf4>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
   838f8:	e03fe915 	stw	zero,-92(fp)
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   838fc:	e0bfea17 	ldw	r2,-88(fp)
   83900:	10800044 	addi	r2,r2,1
   83904:	e0bfea15 	stw	r2,-88(fp)
   83908:	e0ffea17 	ldw	r3,-88(fp)
   8390c:	e0bfeb17 	ldw	r2,-84(fp)
   83910:	18bfca16 	blt	r3,r2,8383c <sd_card_find_next+0xc8>
					else
					{
						break;
					}
				}
				result = -1;
   83914:	00bfffc4 	movi	r2,-1
   83918:	e0bfed0d 	sth	r2,-76(fp)
   8391c:	00007706 	br	83afc <sd_card_find_next+0x388>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
   83920:	00800374 	movhi	r2,13
   83924:	10b81b04 	addi	r2,r2,-8084
   83928:	1080030b 	ldhu	r2,12(r2)
   8392c:	10bfffcc 	andi	r2,r2,65535
   83930:	10a0001c 	xori	r2,r2,32768
   83934:	10a00004 	addi	r2,r2,-32768
   83938:	10800044 	addi	r2,r2,1
   8393c:	e0bfe815 	stw	r2,-96(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   83940:	e0bfec17 	ldw	r2,-80(fp)
   83944:	113fff84 	addi	r4,r2,-2
   83948:	00800374 	movhi	r2,13
   8394c:	10b82004 	addi	r2,r2,-8064
   83950:	10800383 	ldbu	r2,14(r2)
   83954:	11403fcc 	andi	r5,r2,255
   83958:	008597c0 	call	8597c <__mulsi3>
   8395c:	1007883a 	mov	r3,r2
   83960:	00800374 	movhi	r2,13
   83964:	10b82004 	addi	r2,r2,-8064
   83968:	10801417 	ldw	r2,80(r2)
   8396c:	1885883a 	add	r2,r3,r2
   83970:	e0bfe715 	stw	r2,-100(fp)
					int sector_index;
			        
					for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   83974:	e03fe615 	stw	zero,-104(fp)
   83978:	00003406 	br	83a4c <sd_card_find_next+0x2d8>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   8397c:	e0ffe617 	ldw	r3,-104(fp)
   83980:	e0bfe717 	ldw	r2,-100(fp)
   83984:	1889883a 	add	r4,r3,r2
   83988:	d166c017 	ldw	r5,-25856(gp)
   8398c:	0080c0c0 	call	80c0c <Read_Sector_Data>
   83990:	1005003a 	cmpeq	r2,r2,zero
   83994:	1000331e 	bne	r2,zero,83a64 <sd_card_find_next+0x2f0>
						{        
							for (; file_counter < 16; file_counter++)
   83998:	00002506 	br	83a30 <sd_card_find_next+0x2bc>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
   8399c:	e0bfe817 	ldw	r2,-96(fp)
   839a0:	1008917a 	slli	r4,r2,5
   839a4:	e1bfec17 	ldw	r6,-80(fp)
   839a8:	e1ffe617 	ldw	r7,-104(fp)
   839ac:	e17fee04 	addi	r5,fp,-72
   839b0:	0080fd00 	call	80fd0 <Read_File_Record_At_Offset>
   839b4:	1005003a 	cmpeq	r2,r2,zero
   839b8:	10001a1e 	bne	r2,zero,83a24 <sd_card_find_next+0x2b0>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
   839bc:	e0bfee03 	ldbu	r2,-72(fp)
   839c0:	10803fcc 	andi	r2,r2,255
   839c4:	1005003a 	cmpeq	r2,r2,zero
   839c8:	1000161e 	bne	r2,zero,83a24 <sd_card_find_next+0x2b0>
   839cc:	e0bfee03 	ldbu	r2,-72(fp)
   839d0:	10803fcc 	andi	r2,r2,255
   839d4:	10803960 	cmpeqi	r2,r2,229
   839d8:	1000121e 	bne	r2,zero,83a24 <sd_card_find_next+0x2b0>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
   839dc:	e0ffec17 	ldw	r3,-80(fp)
   839e0:	00800374 	movhi	r2,13
   839e4:	10b81b04 	addi	r2,r2,-8084
   839e8:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
   839ec:	e0bfe817 	ldw	r2,-96(fp)
   839f0:	1007883a 	mov	r3,r2
   839f4:	00800374 	movhi	r2,13
   839f8:	10b81b04 	addi	r2,r2,-8084
   839fc:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
   83a00:	e0ffe617 	ldw	r3,-104(fp)
   83a04:	00800374 	movhi	r2,13
   83a08:	10b81b04 	addi	r2,r2,-8084
   83a0c:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
   83a10:	e13fee04 	addi	r4,fp,-72
   83a14:	e17ffe17 	ldw	r5,-8(fp)
   83a18:	008341c0 	call	8341c <copy_file_record_name_to_string>
										return 0;
   83a1c:	e03fff15 	stw	zero,-4(fp)
   83a20:	00003806 	br	83b04 <sd_card_find_next+0x390>
			        
					for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
   83a24:	e0bfe817 	ldw	r2,-96(fp)
   83a28:	10800044 	addi	r2,r2,1
   83a2c:	e0bfe815 	stw	r2,-96(fp)
   83a30:	e0bfe817 	ldw	r2,-96(fp)
   83a34:	10800410 	cmplti	r2,r2,16
   83a38:	103fd81e 	bne	r2,zero,8399c <sd_card_find_next+0x228>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
   83a3c:	e03fe815 	stw	zero,-96(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index;
			        
					for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   83a40:	e0bfe617 	ldw	r2,-104(fp)
   83a44:	10800044 	addi	r2,r2,1
   83a48:	e0bfe615 	stw	r2,-104(fp)
   83a4c:	00800374 	movhi	r2,13
   83a50:	10b82004 	addi	r2,r2,-8064
   83a54:	10800383 	ldbu	r2,14(r2)
   83a58:	10c03fcc 	andi	r3,r2,255
   83a5c:	e0bfe617 	ldw	r2,-104(fp)
   83a60:	10ffc616 	blt	r2,r3,8397c <sd_card_find_next+0x208>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
   83a64:	00800374 	movhi	r2,13
   83a68:	10b82004 	addi	r2,r2,-8064
   83a6c:	10800383 	ldbu	r2,14(r2)
   83a70:	10c03fcc 	andi	r3,r2,255
   83a74:	e0bfe617 	ldw	r2,-104(fp)
   83a78:	10c01a16 	blt	r2,r3,83ae4 <sd_card_find_next+0x370>
					{
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
   83a7c:	e13fec17 	ldw	r4,-80(fp)
   83a80:	e17fed84 	addi	r5,fp,-74
   83a84:	0080cfc0 	call	80cfc <get_cluster_flag>
   83a88:	1005003a 	cmpeq	r2,r2,zero
   83a8c:	1000131e 	bne	r2,zero,83adc <sd_card_find_next+0x368>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   83a90:	e0bfed8b 	ldhu	r2,-74(fp)
   83a94:	10bfffcc 	andi	r2,r2,65535
   83a98:	10a0001c 	xori	r2,r2,32768
   83a9c:	10a00004 	addi	r2,r2,-32768
   83aa0:	10fffe0c 	andi	r3,r2,65528
   83aa4:	00bffe14 	movui	r2,65528
   83aa8:	1880051e 	bne	r3,r2,83ac0 <sd_card_find_next+0x34c>
							{
								result = -1;
   83aac:	00bfffc4 	movi	r2,-1
   83ab0:	e0bfed0d 	sth	r2,-76(fp)
								search_data.valid = false;
   83ab4:	00800374 	movhi	r2,13
   83ab8:	10b81b04 	addi	r2,r2,-8084
   83abc:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
   83ac0:	e0bfed8b 	ldhu	r2,-74(fp)
   83ac4:	10bfffcc 	andi	r2,r2,65535
   83ac8:	10a0001c 	xori	r2,r2,32768
   83acc:	10a00004 	addi	r2,r2,-32768
   83ad0:	10bffe0c 	andi	r2,r2,65528
   83ad4:	e0bfec15 	stw	r2,-80(fp)
   83ad8:	00000206 	br	83ae4 <sd_card_find_next+0x370>
						}
						else
						{
							// Error encountered.                 
							result = -1;
   83adc:	00bfffc4 	movi	r2,-1
   83ae0:	e0bfed0d 	sth	r2,-76(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
   83ae4:	e0ffec17 	ldw	r3,-80(fp)
   83ae8:	00bffdd4 	movui	r2,65527
   83aec:	10ff940e 	bge	r2,r3,83940 <sd_card_find_next+0x1cc>
   83af0:	00000206 	br	83afc <sd_card_find_next+0x388>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
   83af4:	008000c4 	movi	r2,3
   83af8:	e0bfed0d 	sth	r2,-76(fp)
		}
	}
	return result;
   83afc:	e0bfed0f 	ldh	r2,-76(fp)
   83b00:	e0bfff15 	stw	r2,-4(fp)
   83b04:	e0bfff17 	ldw	r2,-4(fp)
}
   83b08:	e037883a 	mov	sp,fp
   83b0c:	dfc00117 	ldw	ra,4(sp)
   83b10:	df000017 	ldw	fp,0(sp)
   83b14:	dec00204 	addi	sp,sp,8
   83b18:	f800283a 	ret

00083b1c <sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
   83b1c:	deffe804 	addi	sp,sp,-96
   83b20:	dfc01715 	stw	ra,92(sp)
   83b24:	df001615 	stw	fp,88(sp)
   83b28:	df001604 	addi	fp,sp,88
   83b2c:	e13ffd15 	stw	r4,-12(fp)
   83b30:	e17ffe15 	stw	r5,-8(fp)
	short int file_record_index = -1;
   83b34:	00bfffc4 	movi	r2,-1
   83b38:	e0bfeb0d 	sth	r2,-84(fp)

	if ((sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   83b3c:	00835c80 	call	835c8 <sd_card_is_Present>
   83b40:	1005003a 	cmpeq	r2,r2,zero
   83b44:	1000d71e 	bne	r2,zero,83ea4 <sd_card_fopen+0x388>
   83b48:	d0a6ba17 	ldw	r2,-25880(gp)
   83b4c:	1005003a 	cmpeq	r2,r2,zero
   83b50:	1000d41e 	bne	r2,zero,83ea4 <sd_card_fopen+0x388>
	{
        unsigned int home_directory_cluster = 0;
   83b54:	e03fec15 	stw	zero,-80(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
   83b58:	e13ffd17 	ldw	r4,-12(fp)
   83b5c:	0081a080 	call	81a08 <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
   83b60:	e13ffd17 	ldw	r4,-12(fp)
   83b64:	0081ad80 	call	81ad8 <check_file_name_for_FAT16_compliance>
   83b68:	1005003a 	cmpeq	r2,r2,zero
   83b6c:	1000cd1e 	bne	r2,zero,83ea4 <sd_card_fopen+0x388>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, &home_directory_cluster, &home_dir))
   83b70:	e17fec04 	addi	r5,fp,-80
   83b74:	e1bfed04 	addi	r6,fp,-76
   83b78:	e13ffd17 	ldw	r4,-12(fp)
   83b7c:	00821140 	call	82114 <get_home_directory_cluster_for_file>
   83b80:	1004c03a 	cmpne	r2,r2,zero
   83b84:	1000031e 	bne	r2,zero,83b94 <sd_card_fopen+0x78>
            {
                return file_record_index;
   83b88:	e0bfeb0f 	ldh	r2,-84(fp)
   83b8c:	e0bfff15 	stw	r2,-4(fp)
   83b90:	0000c606 	br	83eac <sd_card_fopen+0x390>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
   83b94:	e03fea15 	stw	zero,-88(fp)
   83b98:	00000f06 	br	83bd8 <sd_card_fopen+0xbc>
    		{
    			if (active_files[index].in_use == false)
   83b9c:	e0bfea17 	ldw	r2,-88(fp)
   83ba0:	00c00374 	movhi	r3,13
   83ba4:	18f83504 	addi	r3,r3,-7980
   83ba8:	100491ba 	slli	r2,r2,6
   83bac:	10c5883a 	add	r2,r2,r3
   83bb0:	10800f04 	addi	r2,r2,60
   83bb4:	10800017 	ldw	r2,0(r2)
   83bb8:	1004c03a 	cmpne	r2,r2,zero
   83bbc:	1000031e 	bne	r2,zero,83bcc <sd_card_fopen+0xb0>
    			{
    				file_record_index = index;
   83bc0:	e0bfea17 	ldw	r2,-88(fp)
   83bc4:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
   83bc8:	00000606 	br	83be4 <sd_card_fopen+0xc8>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
   83bcc:	e0bfea17 	ldw	r2,-88(fp)
   83bd0:	10800044 	addi	r2,r2,1
   83bd4:	e0bfea15 	stw	r2,-88(fp)
   83bd8:	e0bfea17 	ldw	r2,-88(fp)
   83bdc:	10800510 	cmplti	r2,r2,20
   83be0:	103fee1e 	bne	r2,zero,83b9c <sd_card_fopen+0x80>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
   83be4:	e0bfeb0f 	ldh	r2,-84(fp)
   83be8:	1004803a 	cmplt	r2,r2,zero
   83bec:	1000ad1e 	bne	r2,zero,83ea4 <sd_card_fopen+0x388>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
   83bf0:	e0bfec17 	ldw	r2,-80(fp)
   83bf4:	1009883a 	mov	r4,r2
   83bf8:	e0bfeb0f 	ldh	r2,-84(fp)
   83bfc:	100491ba 	slli	r2,r2,6
   83c00:	1007883a 	mov	r3,r2
   83c04:	00800374 	movhi	r2,13
   83c08:	10b83504 	addi	r2,r2,-7980
   83c0c:	188d883a 	add	r6,r3,r2
   83c10:	e17ffd17 	ldw	r5,-12(fp)
   83c14:	00826280 	call	82628 <find_file_in_directory>
   83c18:	1005003a 	cmpeq	r2,r2,zero
   83c1c:	10007d1e 	bne	r2,zero,83e14 <sd_card_fopen+0x2f8>
                {
                    if (create)
   83c20:	e0bffe17 	ldw	r2,-8(fp)
   83c24:	1005003a 	cmpeq	r2,r2,zero
   83c28:	1000031e 	bne	r2,zero,83c38 <sd_card_fopen+0x11c>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
   83c2c:	00bfffc4 	movi	r2,-1
   83c30:	e0bfff15 	stw	r2,-4(fp)
   83c34:	00009d06 	br	83eac <sd_card_fopen+0x390>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
   83c38:	e17feb0f 	ldh	r5,-84(fp)
   83c3c:	e0bfeb0f 	ldh	r2,-84(fp)
   83c40:	00c00374 	movhi	r3,13
   83c44:	18f83504 	addi	r3,r3,-7980
   83c48:	100491ba 	slli	r2,r2,6
   83c4c:	10c5883a 	add	r2,r2,r3
   83c50:	10800504 	addi	r2,r2,20
   83c54:	1080008b 	ldhu	r2,2(r2)
   83c58:	113fffcc 	andi	r4,r2,65535
   83c5c:	00c00374 	movhi	r3,13
   83c60:	18f83504 	addi	r3,r3,-7980
   83c64:	280491ba 	slli	r2,r5,6
   83c68:	10c5883a 	add	r2,r2,r3
   83c6c:	10800704 	addi	r2,r2,28
   83c70:	11000015 	stw	r4,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
   83c74:	e0bfeb0f 	ldh	r2,-84(fp)
   83c78:	00c00374 	movhi	r3,13
   83c7c:	18f83504 	addi	r3,r3,-7980
   83c80:	100491ba 	slli	r2,r2,6
   83c84:	10c5883a 	add	r2,r2,r3
   83c88:	10800804 	addi	r2,r2,32
   83c8c:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
   83c90:	e0bfeb0f 	ldh	r2,-84(fp)
   83c94:	00c00374 	movhi	r3,13
   83c98:	18f83504 	addi	r3,r3,-7980
   83c9c:	100491ba 	slli	r2,r2,6
   83ca0:	10c5883a 	add	r2,r2,r3
   83ca4:	10800904 	addi	r2,r2,36
   83ca8:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
   83cac:	e0bfeb0f 	ldh	r2,-84(fp)
   83cb0:	00c00374 	movhi	r3,13
   83cb4:	18f83504 	addi	r3,r3,-7980
   83cb8:	100491ba 	slli	r2,r2,6
   83cbc:	10c5883a 	add	r2,r2,r3
   83cc0:	10c00f04 	addi	r3,r2,60
   83cc4:	00800044 	movi	r2,1
   83cc8:	18800015 	stw	r2,0(r3)
    				active_files[file_record_index].modified = false;
   83ccc:	e0bfeb0f 	ldh	r2,-84(fp)
   83cd0:	00c00374 	movhi	r3,13
   83cd4:	18f83504 	addi	r3,r3,-7980
   83cd8:	100491ba 	slli	r2,r2,6
   83cdc:	10c5883a 	add	r2,r2,r3
   83ce0:	10800e04 	addi	r2,r2,56
   83ce4:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
   83ce8:	e03fea15 	stw	zero,-88(fp)
   83cec:	00004506 	br	83e04 <sd_card_fopen+0x2e8>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
   83cf0:	e0ffeb0f 	ldh	r3,-84(fp)
   83cf4:	e0bfea17 	ldw	r2,-88(fp)
   83cf8:	18803f26 	beq	r3,r2,83df8 <sd_card_fopen+0x2dc>
   83cfc:	e0bfea17 	ldw	r2,-88(fp)
   83d00:	00c00374 	movhi	r3,13
   83d04:	18f83504 	addi	r3,r3,-7980
   83d08:	100491ba 	slli	r2,r2,6
   83d0c:	10c5883a 	add	r2,r2,r3
   83d10:	10800f04 	addi	r2,r2,60
   83d14:	10800017 	ldw	r2,0(r2)
   83d18:	10800058 	cmpnei	r2,r2,1
   83d1c:	1000361e 	bne	r2,zero,83df8 <sd_card_fopen+0x2dc>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
   83d20:	e0bfeb0f 	ldh	r2,-84(fp)
   83d24:	00c00374 	movhi	r3,13
   83d28:	18f83504 	addi	r3,r3,-7980
   83d2c:	100491ba 	slli	r2,r2,6
   83d30:	10c5883a 	add	r2,r2,r3
   83d34:	10800a04 	addi	r2,r2,40
   83d38:	11000017 	ldw	r4,0(r2)
   83d3c:	e0bfea17 	ldw	r2,-88(fp)
   83d40:	00c00374 	movhi	r3,13
   83d44:	18f83504 	addi	r3,r3,-7980
   83d48:	100491ba 	slli	r2,r2,6
   83d4c:	10c5883a 	add	r2,r2,r3
   83d50:	10800a04 	addi	r2,r2,40
   83d54:	10800017 	ldw	r2,0(r2)
   83d58:	2080271e 	bne	r4,r2,83df8 <sd_card_fopen+0x2dc>
   83d5c:	e0bfeb0f 	ldh	r2,-84(fp)
   83d60:	00c00374 	movhi	r3,13
   83d64:	18f83504 	addi	r3,r3,-7980
   83d68:	100491ba 	slli	r2,r2,6
   83d6c:	10c5883a 	add	r2,r2,r3
   83d70:	10800b04 	addi	r2,r2,44
   83d74:	11000017 	ldw	r4,0(r2)
   83d78:	e0bfea17 	ldw	r2,-88(fp)
   83d7c:	00c00374 	movhi	r3,13
   83d80:	18f83504 	addi	r3,r3,-7980
   83d84:	100491ba 	slli	r2,r2,6
   83d88:	10c5883a 	add	r2,r2,r3
   83d8c:	10800b04 	addi	r2,r2,44
   83d90:	10800017 	ldw	r2,0(r2)
   83d94:	2080181e 	bne	r4,r2,83df8 <sd_card_fopen+0x2dc>
   83d98:	e0bfeb0f 	ldh	r2,-84(fp)
   83d9c:	00c00374 	movhi	r3,13
   83da0:	18f83504 	addi	r3,r3,-7980
   83da4:	100491ba 	slli	r2,r2,6
   83da8:	10c5883a 	add	r2,r2,r3
   83dac:	10800c04 	addi	r2,r2,48
   83db0:	1100000b 	ldhu	r4,0(r2)
   83db4:	e0bfea17 	ldw	r2,-88(fp)
   83db8:	00c00374 	movhi	r3,13
   83dbc:	18f83504 	addi	r3,r3,-7980
   83dc0:	100491ba 	slli	r2,r2,6
   83dc4:	10c5883a 	add	r2,r2,r3
   83dc8:	10800c04 	addi	r2,r2,48
   83dcc:	1080000b 	ldhu	r2,0(r2)
   83dd0:	20ffffcc 	andi	r3,r4,65535
   83dd4:	18e0001c 	xori	r3,r3,32768
   83dd8:	18e00004 	addi	r3,r3,-32768
   83ddc:	10bfffcc 	andi	r2,r2,65535
   83de0:	10a0001c 	xori	r2,r2,32768
   83de4:	10a00004 	addi	r2,r2,-32768
   83de8:	1880031e 	bne	r3,r2,83df8 <sd_card_fopen+0x2dc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
   83dec:	00bfff84 	movi	r2,-2
   83df0:	e0bfeb0d 	sth	r2,-84(fp)
								break;
   83df4:	00002b06 	br	83ea4 <sd_card_fopen+0x388>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
   83df8:	e0bfea17 	ldw	r2,-88(fp)
   83dfc:	10800044 	addi	r2,r2,1
   83e00:	e0bfea15 	stw	r2,-88(fp)
   83e04:	e0bfea17 	ldw	r2,-88(fp)
   83e08:	10800510 	cmplti	r2,r2,20
   83e0c:	103fb81e 	bne	r2,zero,83cf0 <sd_card_fopen+0x1d4>
   83e10:	00002406 	br	83ea4 <sd_card_fopen+0x388>
							}
						}
					}

                }
                else if (create)
   83e14:	e0bffe17 	ldw	r2,-8(fp)
   83e18:	1005003a 	cmpeq	r2,r2,zero
   83e1c:	10001f1e 	bne	r2,zero,83e9c <sd_card_fopen+0x380>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
   83e20:	e0bfeb0f 	ldh	r2,-84(fp)
   83e24:	100491ba 	slli	r2,r2,6
   83e28:	1007883a 	mov	r3,r2
   83e2c:	00800374 	movhi	r2,13
   83e30:	10b83504 	addi	r2,r2,-7980
   83e34:	188b883a 	add	r5,r3,r2
   83e38:	e1bfed04 	addi	r6,fp,-76
   83e3c:	e13ffd17 	ldw	r4,-12(fp)
   83e40:	00831300 	call	83130 <create_file>
   83e44:	1005003a 	cmpeq	r2,r2,zero
   83e48:	1000111e 	bne	r2,zero,83e90 <sd_card_fopen+0x374>
                    {
                        active_files[file_record_index].in_use = true;
   83e4c:	e0bfeb0f 	ldh	r2,-84(fp)
   83e50:	00c00374 	movhi	r3,13
   83e54:	18f83504 	addi	r3,r3,-7980
   83e58:	100491ba 	slli	r2,r2,6
   83e5c:	10c5883a 	add	r2,r2,r3
   83e60:	10c00f04 	addi	r3,r2,60
   83e64:	00800044 	movi	r2,1
   83e68:	18800015 	stw	r2,0(r3)
    					active_files[file_record_index].modified = true;
   83e6c:	e0bfeb0f 	ldh	r2,-84(fp)
   83e70:	00c00374 	movhi	r3,13
   83e74:	18f83504 	addi	r3,r3,-7980
   83e78:	100491ba 	slli	r2,r2,6
   83e7c:	10c5883a 	add	r2,r2,r3
   83e80:	10c00e04 	addi	r3,r2,56
   83e84:	00800044 	movi	r2,1
   83e88:	18800015 	stw	r2,0(r3)
   83e8c:	00000506 	br	83ea4 <sd_card_fopen+0x388>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
   83e90:	00bfffc4 	movi	r2,-1
   83e94:	e0bfeb0d 	sth	r2,-84(fp)
   83e98:	00000206 	br	83ea4 <sd_card_fopen+0x388>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
   83e9c:	00bfffc4 	movi	r2,-1
   83ea0:	e0bfeb0d 	sth	r2,-84(fp)
                }
    		}
        }
	}

	return file_record_index;
   83ea4:	e0bfeb0f 	ldh	r2,-84(fp)
   83ea8:	e0bfff15 	stw	r2,-4(fp)
   83eac:	e0bfff17 	ldw	r2,-4(fp)
}
   83eb0:	e037883a 	mov	sp,fp
   83eb4:	dfc00117 	ldw	ra,4(sp)
   83eb8:	df000017 	ldw	fp,0(sp)
   83ebc:	dec00204 	addi	sp,sp,8
   83ec0:	f800283a 	ret

00083ec4 <sd_card_set_attributes>:


void sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
   83ec4:	defffd04 	addi	sp,sp,-12
   83ec8:	df000215 	stw	fp,8(sp)
   83ecc:	df000204 	addi	fp,sp,8
   83ed0:	e13ffe0d 	sth	r4,-8(fp)
   83ed4:	e17fff0d 	sth	r5,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   83ed8:	e0bffe0f 	ldh	r2,-8(fp)
   83edc:	1004803a 	cmplt	r2,r2,zero
   83ee0:	1000181e 	bne	r2,zero,83f44 <sd_card_set_attributes+0x80>
   83ee4:	e0bffe0f 	ldh	r2,-8(fp)
   83ee8:	10800508 	cmpgei	r2,r2,20
   83eec:	1000151e 	bne	r2,zero,83f44 <sd_card_set_attributes+0x80>
    {
        if (active_files[file_handle].in_use)
   83ef0:	e0bffe0f 	ldh	r2,-8(fp)
   83ef4:	00c00374 	movhi	r3,13
   83ef8:	18f83504 	addi	r3,r3,-7980
   83efc:	100491ba 	slli	r2,r2,6
   83f00:	10c5883a 	add	r2,r2,r3
   83f04:	10800f04 	addi	r2,r2,60
   83f08:	10800017 	ldw	r2,0(r2)
   83f0c:	1005003a 	cmpeq	r2,r2,zero
   83f10:	10000c1e 	bne	r2,zero,83f44 <sd_card_set_attributes+0x80>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
   83f14:	e17ffe0f 	ldh	r5,-8(fp)
   83f18:	e0bfff0b 	ldhu	r2,-4(fp)
   83f1c:	1007883a 	mov	r3,r2
   83f20:	00bfffc4 	movi	r2,-1
   83f24:	1884703a 	and	r2,r3,r2
   83f28:	1009883a 	mov	r4,r2
   83f2c:	00c00374 	movhi	r3,13
   83f30:	18f83504 	addi	r3,r3,-7980
   83f34:	280491ba 	slli	r2,r5,6
   83f38:	10c5883a 	add	r2,r2,r3
   83f3c:	10800204 	addi	r2,r2,8
   83f40:	110000c5 	stb	r4,3(r2)
        }
    }
}
   83f44:	e037883a 	mov	sp,fp
   83f48:	df000017 	ldw	fp,0(sp)
   83f4c:	dec00104 	addi	sp,sp,4
   83f50:	f800283a 	ret

00083f54 <sd_card_get_attributes>:


short int sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
   83f54:	defffd04 	addi	sp,sp,-12
   83f58:	df000215 	stw	fp,8(sp)
   83f5c:	df000204 	addi	fp,sp,8
   83f60:	e13fff0d 	sth	r4,-4(fp)
	short int result = -1;
   83f64:	00bfffc4 	movi	r2,-1
   83f68:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   83f6c:	e0bfff0f 	ldh	r2,-4(fp)
   83f70:	1004803a 	cmplt	r2,r2,zero
   83f74:	1000151e 	bne	r2,zero,83fcc <sd_card_get_attributes+0x78>
   83f78:	e0bfff0f 	ldh	r2,-4(fp)
   83f7c:	10800508 	cmpgei	r2,r2,20
   83f80:	1000121e 	bne	r2,zero,83fcc <sd_card_get_attributes+0x78>
    {
        if (active_files[file_handle].in_use)
   83f84:	e0bfff0f 	ldh	r2,-4(fp)
   83f88:	00c00374 	movhi	r3,13
   83f8c:	18f83504 	addi	r3,r3,-7980
   83f90:	100491ba 	slli	r2,r2,6
   83f94:	10c5883a 	add	r2,r2,r3
   83f98:	10800f04 	addi	r2,r2,60
   83f9c:	10800017 	ldw	r2,0(r2)
   83fa0:	1005003a 	cmpeq	r2,r2,zero
   83fa4:	1000091e 	bne	r2,zero,83fcc <sd_card_get_attributes+0x78>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
   83fa8:	e0bfff0f 	ldh	r2,-4(fp)
   83fac:	00c00374 	movhi	r3,13
   83fb0:	18f83504 	addi	r3,r3,-7980
   83fb4:	100491ba 	slli	r2,r2,6
   83fb8:	10c5883a 	add	r2,r2,r3
   83fbc:	10800204 	addi	r2,r2,8
   83fc0:	108000c3 	ldbu	r2,3(r2)
   83fc4:	10803fcc 	andi	r2,r2,255
   83fc8:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
   83fcc:	e0bffe0f 	ldh	r2,-8(fp)
}
   83fd0:	e037883a 	mov	sp,fp
   83fd4:	df000017 	ldw	fp,0(sp)
   83fd8:	dec00104 	addi	sp,sp,4
   83fdc:	f800283a 	ret

00083fe0 <sd_card_read>:

short int sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
   83fe0:	defff904 	addi	sp,sp,-28
   83fe4:	dfc00615 	stw	ra,24(sp)
   83fe8:	df000515 	stw	fp,20(sp)
   83fec:	dc000415 	stw	r16,16(sp)
   83ff0:	df000404 	addi	fp,sp,16
   83ff4:	e13ffe0d 	sth	r4,-8(fp)
    short int ch = -1;
   83ff8:	00bfffc4 	movi	r2,-1
   83ffc:	e0bffd0d 	sth	r2,-12(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   84000:	e0bffe0f 	ldh	r2,-8(fp)
   84004:	1004803a 	cmplt	r2,r2,zero
   84008:	1000cb1e 	bne	r2,zero,84338 <sd_card_read+0x358>
   8400c:	e0bffe0f 	ldh	r2,-8(fp)
   84010:	10800508 	cmpgei	r2,r2,20
   84014:	1000c81e 	bne	r2,zero,84338 <sd_card_read+0x358>
    {
        if (active_files[file_handle].in_use)
   84018:	e0bffe0f 	ldh	r2,-8(fp)
   8401c:	00c00374 	movhi	r3,13
   84020:	18f83504 	addi	r3,r3,-7980
   84024:	100491ba 	slli	r2,r2,6
   84028:	10c5883a 	add	r2,r2,r3
   8402c:	10800f04 	addi	r2,r2,60
   84030:	10800017 	ldw	r2,0(r2)
   84034:	1005003a 	cmpeq	r2,r2,zero
   84038:	1000bf1e 	bne	r2,zero,84338 <sd_card_read+0x358>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
   8403c:	e0bffe0f 	ldh	r2,-8(fp)
   84040:	00c00374 	movhi	r3,13
   84044:	18f83504 	addi	r3,r3,-7980
   84048:	100491ba 	slli	r2,r2,6
   8404c:	10c5883a 	add	r2,r2,r3
   84050:	10800904 	addi	r2,r2,36
   84054:	11000017 	ldw	r4,0(r2)
   84058:	e0bffe0f 	ldh	r2,-8(fp)
   8405c:	00c00374 	movhi	r3,13
   84060:	18f83504 	addi	r3,r3,-7980
   84064:	100491ba 	slli	r2,r2,6
   84068:	10c5883a 	add	r2,r2,r3
   8406c:	10800604 	addi	r2,r2,24
   84070:	10800017 	ldw	r2,0(r2)
   84074:	2080b02e 	bgeu	r4,r2,84338 <sd_card_read+0x358>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                                  active_files[file_handle].current_sector_in_cluster;
   84078:	00800374 	movhi	r2,13
   8407c:	10b82004 	addi	r2,r2,-8064
   84080:	14001417 	ldw	r16,80(r2)
   84084:	e0bffe0f 	ldh	r2,-8(fp)
   84088:	00c00374 	movhi	r3,13
   8408c:	18f83504 	addi	r3,r3,-7980
   84090:	100491ba 	slli	r2,r2,6
   84094:	10c5883a 	add	r2,r2,r3
   84098:	10800704 	addi	r2,r2,28
   8409c:	10800017 	ldw	r2,0(r2)
   840a0:	113fff84 	addi	r4,r2,-2
   840a4:	00800374 	movhi	r2,13
   840a8:	10b82004 	addi	r2,r2,-8064
   840ac:	10800383 	ldbu	r2,14(r2)
   840b0:	11403fcc 	andi	r5,r2,255
   840b4:	008597c0 	call	8597c <__mulsi3>
   840b8:	8089883a 	add	r4,r16,r2
   840bc:	e0bffe0f 	ldh	r2,-8(fp)
   840c0:	00c00374 	movhi	r3,13
   840c4:	18f83504 	addi	r3,r3,-7980
   840c8:	100491ba 	slli	r2,r2,6
   840cc:	10c5883a 	add	r2,r2,r3
   840d0:	10800804 	addi	r2,r2,32
   840d4:	10800017 	ldw	r2,0(r2)
   840d8:	2085883a 	add	r2,r4,r2
   840dc:	e0bffc15 	stw	r2,-16(fp)
                
				// printf("hahaha: %d %X, %d\n", active_files[file_handle].current_sector_in_cluster, active_files[file_handle].current_cluster_index, active_files[file_handle].current_byte_position);
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
   840e0:	e0bffe0f 	ldh	r2,-8(fp)
   840e4:	00c00374 	movhi	r3,13
   840e8:	18f83504 	addi	r3,r3,-7980
   840ec:	100491ba 	slli	r2,r2,6
   840f0:	10c5883a 	add	r2,r2,r3
   840f4:	10800904 	addi	r2,r2,36
   840f8:	10800017 	ldw	r2,0(r2)
   840fc:	1005003a 	cmpeq	r2,r2,zero
   84100:	1000651e 	bne	r2,zero,84298 <sd_card_read+0x2b8>
   84104:	e0bffe0f 	ldh	r2,-8(fp)
   84108:	00c00374 	movhi	r3,13
   8410c:	18f83504 	addi	r3,r3,-7980
   84110:	100491ba 	slli	r2,r2,6
   84114:	10c5883a 	add	r2,r2,r3
   84118:	10800904 	addi	r2,r2,36
   8411c:	10800017 	ldw	r2,0(r2)
   84120:	10807fcc 	andi	r2,r2,511
   84124:	1004c03a 	cmpne	r2,r2,zero
   84128:	10005b1e 	bne	r2,zero,84298 <sd_card_read+0x2b8>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   8412c:	e0bffe0f 	ldh	r2,-8(fp)
   84130:	00c00374 	movhi	r3,13
   84134:	18f83504 	addi	r3,r3,-7980
   84138:	100491ba 	slli	r2,r2,6
   8413c:	10c5883a 	add	r2,r2,r3
   84140:	10800804 	addi	r2,r2,32
   84144:	10c00017 	ldw	r3,0(r2)
   84148:	00800374 	movhi	r2,13
   8414c:	10b82004 	addi	r2,r2,-8064
   84150:	10800383 	ldbu	r2,14(r2)
   84154:	10803fcc 	andi	r2,r2,255
   84158:	10bfffc4 	addi	r2,r2,-1
   8415c:	18803c1e 	bne	r3,r2,84250 <sd_card_read+0x270>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
   84160:	e0bffe0f 	ldh	r2,-8(fp)
   84164:	00c00374 	movhi	r3,13
   84168:	18f83504 	addi	r3,r3,-7980
   8416c:	100491ba 	slli	r2,r2,6
   84170:	10c5883a 	add	r2,r2,r3
   84174:	10800704 	addi	r2,r2,28
   84178:	11000017 	ldw	r4,0(r2)
   8417c:	e17ffd84 	addi	r5,fp,-10
   84180:	0080cfc0 	call	80cfc <get_cluster_flag>
   84184:	1005003a 	cmpeq	r2,r2,zero
   84188:	10002b1e 	bne	r2,zero,84238 <sd_card_read+0x258>
                        {
							// printf("hahaha: %X, %X, %d\n", active_files[file_handle].current_cluster_index, next_cluster, active_files[file_handle].current_byte_position);
                            if ((next_cluster & 0xfff8) == 0xfff8)
   8418c:	e0bffd8b 	ldhu	r2,-10(fp)
   84190:	10bfffcc 	andi	r2,r2,65535
   84194:	10fffe0c 	andi	r3,r2,65528
   84198:	00bffe14 	movui	r2,65528
   8419c:	1880031e 	bne	r3,r2,841ac <sd_card_read+0x1cc>
                            {
                                /* End of file */
								// printf("hahaha1: %X %d %d\n", next_cluster, active_files[file_handle].current_byte_position, active_files[file_handle].file_size_in_bytes);
                                return -1;
   841a0:	00bfffc4 	movi	r2,-1
   841a4:	e0bfff15 	stw	r2,-4(fp)
   841a8:	00006506 	br	84340 <sd_card_read+0x360>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
   841ac:	e13ffe0f 	ldh	r4,-8(fp)
   841b0:	e0bffd8b 	ldhu	r2,-10(fp)
   841b4:	117fffcc 	andi	r5,r2,65535
   841b8:	00c00374 	movhi	r3,13
   841bc:	18f83504 	addi	r3,r3,-7980
   841c0:	200491ba 	slli	r2,r4,6
   841c4:	10c5883a 	add	r2,r2,r3
   841c8:	10800704 	addi	r2,r2,28
   841cc:	11400015 	stw	r5,0(r2)
								data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster;
   841d0:	00800374 	movhi	r2,13
   841d4:	10b82004 	addi	r2,r2,-8064
   841d8:	14001417 	ldw	r16,80(r2)
   841dc:	e0bffe0f 	ldh	r2,-8(fp)
   841e0:	00c00374 	movhi	r3,13
   841e4:	18f83504 	addi	r3,r3,-7980
   841e8:	100491ba 	slli	r2,r2,6
   841ec:	10c5883a 	add	r2,r2,r3
   841f0:	10800704 	addi	r2,r2,28
   841f4:	10800017 	ldw	r2,0(r2)
   841f8:	113fff84 	addi	r4,r2,-2
   841fc:	00800374 	movhi	r2,13
   84200:	10b82004 	addi	r2,r2,-8064
   84204:	10800383 	ldbu	r2,14(r2)
   84208:	11403fcc 	andi	r5,r2,255
   8420c:	008597c0 	call	8597c <__mulsi3>
   84210:	8085883a 	add	r2,r16,r2
   84214:	e0bffc15 	stw	r2,-16(fp)
                                active_files[file_handle].current_sector_in_cluster = 0; 
   84218:	e0bffe0f 	ldh	r2,-8(fp)
   8421c:	00c00374 	movhi	r3,13
   84220:	18f83504 	addi	r3,r3,-7980
   84224:	100491ba 	slli	r2,r2,6
   84228:	10c5883a 	add	r2,r2,r3
   8422c:	10800804 	addi	r2,r2,32
   84230:	10000015 	stw	zero,0(r2)
   84234:	00001806 	br	84298 <sd_card_read+0x2b8>
                            }
                        }
                        else
                        {
							printf("hahaha2\n");
   84238:	01000274 	movhi	r4,9
   8423c:	21084004 	addi	r4,r4,8448
   84240:	0085acc0 	call	85acc <puts>
                            return -2;
   84244:	00bfff84 	movi	r2,-2
   84248:	e0bfff15 	stw	r2,-4(fp)
   8424c:	00003c06 	br	84340 <sd_card_read+0x360>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
   84250:	e17ffe0f 	ldh	r5,-8(fp)
   84254:	e0bffe0f 	ldh	r2,-8(fp)
   84258:	00c00374 	movhi	r3,13
   8425c:	18f83504 	addi	r3,r3,-7980
   84260:	100491ba 	slli	r2,r2,6
   84264:	10c5883a 	add	r2,r2,r3
   84268:	10800804 	addi	r2,r2,32
   8426c:	10800017 	ldw	r2,0(r2)
   84270:	11000044 	addi	r4,r2,1
   84274:	00c00374 	movhi	r3,13
   84278:	18f83504 	addi	r3,r3,-7980
   8427c:	280491ba 	slli	r2,r5,6
   84280:	10c5883a 	add	r2,r2,r3
   84284:	10800804 	addi	r2,r2,32
   84288:	11000015 	stw	r4,0(r2)
                        data_sector = data_sector + 1;
   8428c:	e0bffc17 	ldw	r2,-16(fp)
   84290:	10800044 	addi	r2,r2,1
   84294:	e0bffc15 	stw	r2,-16(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
   84298:	d0e6c017 	ldw	r3,-25856(gp)
   8429c:	e0bffc17 	ldw	r2,-16(fp)
   842a0:	1885883a 	add	r2,r3,r2
   842a4:	1007883a 	mov	r3,r2
   842a8:	d0a6c317 	ldw	r2,-25844(gp)
   842ac:	18800826 	beq	r3,r2,842d0 <sd_card_read+0x2f0>
                {
					// printf("hau: %d, %d, %d\n", current_sector_index, data_sector, active_files[file_handle].current_byte_position);
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
   842b0:	d166c017 	ldw	r5,-25856(gp)
   842b4:	e13ffc17 	ldw	r4,-16(fp)
   842b8:	0080c0c0 	call	80c0c <Read_Sector_Data>
   842bc:	1004c03a 	cmpne	r2,r2,zero
   842c0:	1000031e 	bne	r2,zero,842d0 <sd_card_read+0x2f0>
                    {
						// printf("hahaha3\n");
						return -2;
   842c4:	00bfff84 	movi	r2,-2
   842c8:	e0bfff15 	stw	r2,-4(fp)
   842cc:	00001c06 	br	84340 <sd_card_read+0x360>
                    }
                }
                ch = ((*((unsigned char *)SD_CARD_BUFFER(SD_CARD_0_BASE, active_files[file_handle].current_byte_position % 512))) & 0x00ff);
   842d0:	e0bffe0f 	ldh	r2,-8(fp)
   842d4:	00c00374 	movhi	r3,13
   842d8:	18f83504 	addi	r3,r3,-7980
   842dc:	100491ba 	slli	r2,r2,6
   842e0:	10c5883a 	add	r2,r2,r3
   842e4:	10800904 	addi	r2,r2,36
   842e8:	10800017 	ldw	r2,0(r2)
   842ec:	10807fcc 	andi	r2,r2,511
   842f0:	10800003 	ldbu	r2,0(r2)
   842f4:	10803fcc 	andi	r2,r2,255
   842f8:	e0bffd0d 	sth	r2,-12(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
   842fc:	e17ffe0f 	ldh	r5,-8(fp)
   84300:	e0bffe0f 	ldh	r2,-8(fp)
   84304:	00c00374 	movhi	r3,13
   84308:	18f83504 	addi	r3,r3,-7980
   8430c:	100491ba 	slli	r2,r2,6
   84310:	10c5883a 	add	r2,r2,r3
   84314:	10800904 	addi	r2,r2,36
   84318:	10800017 	ldw	r2,0(r2)
   8431c:	11000044 	addi	r4,r2,1
   84320:	00c00374 	movhi	r3,13
   84324:	18f83504 	addi	r3,r3,-7980
   84328:	280491ba 	slli	r2,r5,6
   8432c:	10c5883a 	add	r2,r2,r3
   84330:	10800904 	addi	r2,r2,36
   84334:	11000015 	stw	r4,0(r2)
            }
        }
    }
    
    return ch;
   84338:	e0bffd0f 	ldh	r2,-12(fp)
   8433c:	e0bfff15 	stw	r2,-4(fp)
   84340:	e0bfff17 	ldw	r2,-4(fp)
}
   84344:	e037883a 	mov	sp,fp
   84348:	dfc00217 	ldw	ra,8(sp)
   8434c:	df000117 	ldw	fp,4(sp)
   84350:	dc000017 	ldw	r16,0(sp)
   84354:	dec00304 	addi	sp,sp,12
   84358:	f800283a 	ret

0008435c <sd_card_write>:


bool sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
   8435c:	defff504 	addi	sp,sp,-44
   84360:	dfc00a15 	stw	ra,40(sp)
   84364:	df000915 	stw	fp,36(sp)
   84368:	dc000815 	stw	r16,32(sp)
   8436c:	df000804 	addi	fp,sp,32
   84370:	e13ffd0d 	sth	r4,-12(fp)
   84374:	e17ffe05 	stb	r5,-8(fp)
    bool result = false;
   84378:	e03ffa15 	stw	zero,-24(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   8437c:	e0bffd0f 	ldh	r2,-12(fp)
   84380:	1004803a 	cmplt	r2,r2,zero
   84384:	1001681e 	bne	r2,zero,84928 <sd_card_write+0x5cc>
   84388:	e0bffd0f 	ldh	r2,-12(fp)
   8438c:	10800508 	cmpgei	r2,r2,20
   84390:	1001651e 	bne	r2,zero,84928 <sd_card_write+0x5cc>
    {
        if (active_files[file_handle].in_use)
   84394:	e0bffd0f 	ldh	r2,-12(fp)
   84398:	00c00374 	movhi	r3,13
   8439c:	18f83504 	addi	r3,r3,-7980
   843a0:	100491ba 	slli	r2,r2,6
   843a4:	10c5883a 	add	r2,r2,r3
   843a8:	10800f04 	addi	r2,r2,60
   843ac:	10800017 	ldw	r2,0(r2)
   843b0:	1005003a 	cmpeq	r2,r2,zero
   843b4:	10015c1e 	bne	r2,zero,84928 <sd_card_write+0x5cc>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                              active_files[file_handle].current_sector_in_cluster;
   843b8:	00800374 	movhi	r2,13
   843bc:	10b82004 	addi	r2,r2,-8064
   843c0:	14001417 	ldw	r16,80(r2)
   843c4:	e0bffd0f 	ldh	r2,-12(fp)
   843c8:	00c00374 	movhi	r3,13
   843cc:	18f83504 	addi	r3,r3,-7980
   843d0:	100491ba 	slli	r2,r2,6
   843d4:	10c5883a 	add	r2,r2,r3
   843d8:	10800704 	addi	r2,r2,28
   843dc:	10800017 	ldw	r2,0(r2)
   843e0:	113fff84 	addi	r4,r2,-2
   843e4:	00800374 	movhi	r2,13
   843e8:	10b82004 	addi	r2,r2,-8064
   843ec:	10800383 	ldbu	r2,14(r2)
   843f0:	11403fcc 	andi	r5,r2,255
   843f4:	008597c0 	call	8597c <__mulsi3>
   843f8:	8089883a 	add	r4,r16,r2
   843fc:	e0bffd0f 	ldh	r2,-12(fp)
   84400:	00c00374 	movhi	r3,13
   84404:	18f83504 	addi	r3,r3,-7980
   84408:	100491ba 	slli	r2,r2,6
   8440c:	10c5883a 	add	r2,r2,r3
   84410:	10800804 	addi	r2,r2,32
   84414:	10800017 	ldw	r2,0(r2)
   84418:	2085883a 	add	r2,r4,r2
   8441c:	e0bff915 	stw	r2,-28(fp)
			short int buffer_address = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
   84420:	e0bffd0f 	ldh	r2,-12(fp)
   84424:	00c00374 	movhi	r3,13
   84428:	18f83504 	addi	r3,r3,-7980
   8442c:	100491ba 	slli	r2,r2,6
   84430:	10c5883a 	add	r2,r2,r3
   84434:	10800904 	addi	r2,r2,36
   84438:	11000017 	ldw	r4,0(r2)
   8443c:	00800374 	movhi	r2,13
   84440:	10b82004 	addi	r2,r2,-8064
   84444:	1080030b 	ldhu	r2,12(r2)
   84448:	117fffcc 	andi	r5,r2,65535
   8444c:	00859740 	call	85974 <__umodsi3>
   84450:	e0bff80d 	sth	r2,-32(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
   84454:	e0bffd0f 	ldh	r2,-12(fp)
   84458:	00c00374 	movhi	r3,13
   8445c:	18f83504 	addi	r3,r3,-7980
   84460:	100491ba 	slli	r2,r2,6
   84464:	10c5883a 	add	r2,r2,r3
   84468:	10800904 	addi	r2,r2,36
   8446c:	11000017 	ldw	r4,0(r2)
   84470:	e0bffd0f 	ldh	r2,-12(fp)
   84474:	00c00374 	movhi	r3,13
   84478:	18f83504 	addi	r3,r3,-7980
   8447c:	100491ba 	slli	r2,r2,6
   84480:	10c5883a 	add	r2,r2,r3
   84484:	10800604 	addi	r2,r2,24
   84488:	10800017 	ldw	r2,0(r2)
   8448c:	2080602e 	bgeu	r4,r2,84610 <sd_card_write+0x2b4>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_address == 0))
   84490:	e0bffd0f 	ldh	r2,-12(fp)
   84494:	00c00374 	movhi	r3,13
   84498:	18f83504 	addi	r3,r3,-7980
   8449c:	100491ba 	slli	r2,r2,6
   844a0:	10c5883a 	add	r2,r2,r3
   844a4:	10800904 	addi	r2,r2,36
   844a8:	10800017 	ldw	r2,0(r2)
   844ac:	1005003a 	cmpeq	r2,r2,zero
   844b0:	1000d11e 	bne	r2,zero,847f8 <sd_card_write+0x49c>
   844b4:	e0bff80f 	ldh	r2,-32(fp)
   844b8:	1004c03a 	cmpne	r2,r2,zero
   844bc:	1000ce1e 	bne	r2,zero,847f8 <sd_card_write+0x49c>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   844c0:	e0bffd0f 	ldh	r2,-12(fp)
   844c4:	00c00374 	movhi	r3,13
   844c8:	18f83504 	addi	r3,r3,-7980
   844cc:	100491ba 	slli	r2,r2,6
   844d0:	10c5883a 	add	r2,r2,r3
   844d4:	10800804 	addi	r2,r2,32
   844d8:	10c00017 	ldw	r3,0(r2)
   844dc:	00800374 	movhi	r2,13
   844e0:	10b82004 	addi	r2,r2,-8064
   844e4:	10800383 	ldbu	r2,14(r2)
   844e8:	10803fcc 	andi	r2,r2,255
   844ec:	10bfffc4 	addi	r2,r2,-1
   844f0:	1880341e 	bne	r3,r2,845c4 <sd_card_write+0x268>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
   844f4:	e0bffd0f 	ldh	r2,-12(fp)
   844f8:	00c00374 	movhi	r3,13
   844fc:	18f83504 	addi	r3,r3,-7980
   84500:	100491ba 	slli	r2,r2,6
   84504:	10c5883a 	add	r2,r2,r3
   84508:	10800704 	addi	r2,r2,28
   8450c:	11000017 	ldw	r4,0(r2)
   84510:	e17ffb04 	addi	r5,fp,-20
   84514:	0080cfc0 	call	80cfc <get_cluster_flag>
   84518:	1005003a 	cmpeq	r2,r2,zero
   8451c:	1000271e 	bne	r2,zero,845bc <sd_card_write+0x260>
                        {
                            if (next_cluster < 0xfff8)
   84520:	e0bffb0b 	ldhu	r2,-20(fp)
   84524:	10ffffcc 	andi	r3,r2,65535
   84528:	00bffdd4 	movui	r2,65527
   8452c:	10c0b236 	bltu	r2,r3,847f8 <sd_card_write+0x49c>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
   84530:	e13ffd0f 	ldh	r4,-12(fp)
   84534:	e0bffb0b 	ldhu	r2,-20(fp)
   84538:	117fffcc 	andi	r5,r2,65535
   8453c:	00c00374 	movhi	r3,13
   84540:	18f83504 	addi	r3,r3,-7980
   84544:	200491ba 	slli	r2,r4,6
   84548:	10c5883a 	add	r2,r2,r3
   8454c:	10800704 	addi	r2,r2,28
   84550:	11400015 	stw	r5,0(r2)
								data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster;
   84554:	00800374 	movhi	r2,13
   84558:	10b82004 	addi	r2,r2,-8064
   8455c:	14001417 	ldw	r16,80(r2)
   84560:	e0bffd0f 	ldh	r2,-12(fp)
   84564:	00c00374 	movhi	r3,13
   84568:	18f83504 	addi	r3,r3,-7980
   8456c:	100491ba 	slli	r2,r2,6
   84570:	10c5883a 	add	r2,r2,r3
   84574:	10800704 	addi	r2,r2,28
   84578:	10800017 	ldw	r2,0(r2)
   8457c:	113fff84 	addi	r4,r2,-2
   84580:	00800374 	movhi	r2,13
   84584:	10b82004 	addi	r2,r2,-8064
   84588:	10800383 	ldbu	r2,14(r2)
   8458c:	11403fcc 	andi	r5,r2,255
   84590:	008597c0 	call	8597c <__mulsi3>
   84594:	8085883a 	add	r2,r16,r2
   84598:	e0bff915 	stw	r2,-28(fp)
								active_files[file_handle].current_sector_in_cluster = 0;
   8459c:	e0bffd0f 	ldh	r2,-12(fp)
   845a0:	00c00374 	movhi	r3,13
   845a4:	18f83504 	addi	r3,r3,-7980
   845a8:	100491ba 	slli	r2,r2,6
   845ac:	10c5883a 	add	r2,r2,r3
   845b0:	10800804 	addi	r2,r2,32
   845b4:	10000015 	stw	zero,0(r2)
   845b8:	00008f06 	br	847f8 <sd_card_write+0x49c>
                            }
                        }
                        else
                        {
                            return false;
   845bc:	e03fff15 	stw	zero,-4(fp)
   845c0:	0000db06 	br	84930 <sd_card_write+0x5d4>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
   845c4:	e17ffd0f 	ldh	r5,-12(fp)
   845c8:	e0bffd0f 	ldh	r2,-12(fp)
   845cc:	00c00374 	movhi	r3,13
   845d0:	18f83504 	addi	r3,r3,-7980
   845d4:	100491ba 	slli	r2,r2,6
   845d8:	10c5883a 	add	r2,r2,r3
   845dc:	10800804 	addi	r2,r2,32
   845e0:	10800017 	ldw	r2,0(r2)
   845e4:	11000044 	addi	r4,r2,1
   845e8:	00c00374 	movhi	r3,13
   845ec:	18f83504 	addi	r3,r3,-7980
   845f0:	280491ba 	slli	r2,r5,6
   845f4:	10c5883a 	add	r2,r2,r3
   845f8:	10800804 	addi	r2,r2,32
   845fc:	11000015 	stw	r4,0(r2)
                        data_sector = data_sector + 1;
   84600:	e0bff917 	ldw	r2,-28(fp)
   84604:	10800044 	addi	r2,r2,1
   84608:	e0bff915 	stw	r2,-28(fp)
   8460c:	00007a06 	br	847f8 <sd_card_write+0x49c>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_address == 0))
   84610:	e0bffd0f 	ldh	r2,-12(fp)
   84614:	00c00374 	movhi	r3,13
   84618:	18f83504 	addi	r3,r3,-7980
   8461c:	100491ba 	slli	r2,r2,6
   84620:	10c5883a 	add	r2,r2,r3
   84624:	10800904 	addi	r2,r2,36
   84628:	10800017 	ldw	r2,0(r2)
   8462c:	1005003a 	cmpeq	r2,r2,zero
   84630:	1000711e 	bne	r2,zero,847f8 <sd_card_write+0x49c>
   84634:	e0bff80f 	ldh	r2,-32(fp)
   84638:	1004c03a 	cmpne	r2,r2,zero
   8463c:	10006e1e 	bne	r2,zero,847f8 <sd_card_write+0x49c>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   84640:	e0bffd0f 	ldh	r2,-12(fp)
   84644:	00c00374 	movhi	r3,13
   84648:	18f83504 	addi	r3,r3,-7980
   8464c:	100491ba 	slli	r2,r2,6
   84650:	10c5883a 	add	r2,r2,r3
   84654:	10800804 	addi	r2,r2,32
   84658:	10c00017 	ldw	r3,0(r2)
   8465c:	00800374 	movhi	r2,13
   84660:	10b82004 	addi	r2,r2,-8064
   84664:	10800383 	ldbu	r2,14(r2)
   84668:	10803fcc 	andi	r2,r2,255
   8466c:	10bfffc4 	addi	r2,r2,-1
   84670:	1880381e 	bne	r3,r2,84754 <sd_card_write+0x3f8>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
   84674:	e13ffc04 	addi	r4,fp,-16
   84678:	0082a8c0 	call	82a8c <find_first_empty_cluster>
   8467c:	1005003a 	cmpeq	r2,r2,zero
   84680:	1000321e 	bne	r2,zero,8474c <sd_card_write+0x3f0>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
   84684:	e0bffd0f 	ldh	r2,-12(fp)
   84688:	00c00374 	movhi	r3,13
   8468c:	18f83504 	addi	r3,r3,-7980
   84690:	100491ba 	slli	r2,r2,6
   84694:	10c5883a 	add	r2,r2,r3
   84698:	10800704 	addi	r2,r2,28
   8469c:	11000017 	ldw	r4,0(r2)
   846a0:	e0bffc17 	ldw	r2,-16(fp)
   846a4:	117fffcc 	andi	r5,r2,65535
   846a8:	2960001c 	xori	r5,r5,32768
   846ac:	29600004 	addi	r5,r5,-32768
   846b0:	01800044 	movi	r6,1
   846b4:	0080da00 	call	80da0 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
   846b8:	e13ffc17 	ldw	r4,-16(fp)
   846bc:	017fffc4 	movi	r5,-1
   846c0:	01800044 	movi	r6,1
   846c4:	0080da00 	call	80da0 <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
   846c8:	e0bffd0f 	ldh	r2,-12(fp)
   846cc:	00c00374 	movhi	r3,13
   846d0:	18f83504 	addi	r3,r3,-7980
   846d4:	100491ba 	slli	r2,r2,6
   846d8:	10c5883a 	add	r2,r2,r3
   846dc:	10800704 	addi	r2,r2,28
   846e0:	11000017 	ldw	r4,0(r2)
   846e4:	e0bffc17 	ldw	r2,-16(fp)
   846e8:	117fffcc 	andi	r5,r2,65535
   846ec:	2960001c 	xori	r5,r5,32768
   846f0:	29600004 	addi	r5,r5,-32768
   846f4:	000d883a 	mov	r6,zero
   846f8:	0080da00 	call	80da0 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
   846fc:	e13ffc17 	ldw	r4,-16(fp)
   84700:	017fffc4 	movi	r5,-1
   84704:	000d883a 	mov	r6,zero
   84708:	0080da00 	call	80da0 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
   8470c:	e0bffd0f 	ldh	r2,-12(fp)
   84710:	e13ffc17 	ldw	r4,-16(fp)
   84714:	00c00374 	movhi	r3,13
   84718:	18f83504 	addi	r3,r3,-7980
   8471c:	100491ba 	slli	r2,r2,6
   84720:	10c5883a 	add	r2,r2,r3
   84724:	10800704 	addi	r2,r2,28
   84728:	11000015 	stw	r4,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
   8472c:	e0bffd0f 	ldh	r2,-12(fp)
   84730:	00c00374 	movhi	r3,13
   84734:	18f83504 	addi	r3,r3,-7980
   84738:	100491ba 	slli	r2,r2,6
   8473c:	10c5883a 	add	r2,r2,r3
   84740:	10800804 	addi	r2,r2,32
   84744:	10000015 	stw	zero,0(r2)
   84748:	00001106 	br	84790 <sd_card_write+0x434>
						}
						else
						{
							return false;
   8474c:	e03fff15 	stw	zero,-4(fp)
   84750:	00007706 	br	84930 <sd_card_write+0x5d4>
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						// active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
						active_files[file_handle].current_sector_in_cluster += 1;
   84754:	e17ffd0f 	ldh	r5,-12(fp)
   84758:	e0bffd0f 	ldh	r2,-12(fp)
   8475c:	00c00374 	movhi	r3,13
   84760:	18f83504 	addi	r3,r3,-7980
   84764:	100491ba 	slli	r2,r2,6
   84768:	10c5883a 	add	r2,r2,r3
   8476c:	10800804 	addi	r2,r2,32
   84770:	10800017 	ldw	r2,0(r2)
   84774:	11000044 	addi	r4,r2,1
   84778:	00c00374 	movhi	r3,13
   8477c:	18f83504 	addi	r3,r3,-7980
   84780:	280491ba 	slli	r2,r5,6
   84784:	10c5883a 	add	r2,r2,r3
   84788:	10800804 	addi	r2,r2,32
   8478c:	11000015 	stw	r4,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   84790:	00800374 	movhi	r2,13
   84794:	10b82004 	addi	r2,r2,-8064
   84798:	14001417 	ldw	r16,80(r2)
   8479c:	e0bffd0f 	ldh	r2,-12(fp)
   847a0:	00c00374 	movhi	r3,13
   847a4:	18f83504 	addi	r3,r3,-7980
   847a8:	100491ba 	slli	r2,r2,6
   847ac:	10c5883a 	add	r2,r2,r3
   847b0:	10800704 	addi	r2,r2,28
   847b4:	10800017 	ldw	r2,0(r2)
   847b8:	113fff84 	addi	r4,r2,-2
   847bc:	00800374 	movhi	r2,13
   847c0:	10b82004 	addi	r2,r2,-8064
   847c4:	10800383 	ldbu	r2,14(r2)
   847c8:	11403fcc 	andi	r5,r2,255
   847cc:	008597c0 	call	8597c <__mulsi3>
   847d0:	8089883a 	add	r4,r16,r2
   847d4:	e0bffd0f 	ldh	r2,-12(fp)
   847d8:	00c00374 	movhi	r3,13
   847dc:	18f83504 	addi	r3,r3,-7980
   847e0:	100491ba 	slli	r2,r2,6
   847e4:	10c5883a 	add	r2,r2,r3
   847e8:	10800804 	addi	r2,r2,32
   847ec:	10800017 	ldw	r2,0(r2)
   847f0:	2085883a 	add	r2,r4,r2
   847f4:	e0bff915 	stw	r2,-28(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
   847f8:	d0e6c017 	ldw	r3,-25856(gp)
   847fc:	e0bff917 	ldw	r2,-28(fp)
   84800:	1885883a 	add	r2,r3,r2
   84804:	1007883a 	mov	r3,r2
   84808:	d0a6c317 	ldw	r2,-25844(gp)
   8480c:	18800926 	beq	r3,r2,84834 <sd_card_write+0x4d8>
            {
				result = Save_Modified_Sector();
   84810:	0080bbc0 	call	80bbc <Save_Modified_Sector>
   84814:	e0bffa15 	stw	r2,-24(fp)
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
   84818:	d166c017 	ldw	r5,-25856(gp)
   8481c:	e13ff917 	ldw	r4,-28(fp)
   84820:	0080c0c0 	call	80c0c <Read_Sector_Data>
   84824:	1004c03a 	cmpne	r2,r2,zero
   84828:	1000021e 	bne	r2,zero,84834 <sd_card_write+0x4d8>
                {
					return false;
   8482c:	e03fff15 	stw	zero,-4(fp)
   84830:	00003f06 	br	84930 <sd_card_write+0x5d4>
                }
            }
            // Write a byte of data to the buffer.
            *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, buffer_address)) = byte_of_data;
   84834:	e0bff80f 	ldh	r2,-32(fp)
   84838:	1007883a 	mov	r3,r2
   8483c:	e0bffe03 	ldbu	r2,-8(fp)
   84840:	18800005 	stb	r2,0(r3)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
   84844:	e17ffd0f 	ldh	r5,-12(fp)
   84848:	e0bffd0f 	ldh	r2,-12(fp)
   8484c:	00c00374 	movhi	r3,13
   84850:	18f83504 	addi	r3,r3,-7980
   84854:	100491ba 	slli	r2,r2,6
   84858:	10c5883a 	add	r2,r2,r3
   8485c:	10800904 	addi	r2,r2,36
   84860:	10800017 	ldw	r2,0(r2)
   84864:	11000044 	addi	r4,r2,1
   84868:	00c00374 	movhi	r3,13
   8486c:	18f83504 	addi	r3,r3,-7980
   84870:	280491ba 	slli	r2,r5,6
   84874:	10c5883a 	add	r2,r2,r3
   84878:	10800904 	addi	r2,r2,36
   8487c:	11000015 	stw	r4,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
   84880:	e0bffd0f 	ldh	r2,-12(fp)
   84884:	00c00374 	movhi	r3,13
   84888:	18f83504 	addi	r3,r3,-7980
   8488c:	100491ba 	slli	r2,r2,6
   84890:	10c5883a 	add	r2,r2,r3
   84894:	10800904 	addi	r2,r2,36
   84898:	11000017 	ldw	r4,0(r2)
   8489c:	e0bffd0f 	ldh	r2,-12(fp)
   848a0:	00c00374 	movhi	r3,13
   848a4:	18f83504 	addi	r3,r3,-7980
   848a8:	100491ba 	slli	r2,r2,6
   848ac:	10c5883a 	add	r2,r2,r3
   848b0:	10800604 	addi	r2,r2,24
   848b4:	10800017 	ldw	r2,0(r2)
   848b8:	20801736 	bltu	r4,r2,84918 <sd_card_write+0x5bc>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
   848bc:	e17ffd0f 	ldh	r5,-12(fp)
   848c0:	e0bffd0f 	ldh	r2,-12(fp)
   848c4:	00c00374 	movhi	r3,13
   848c8:	18f83504 	addi	r3,r3,-7980
   848cc:	100491ba 	slli	r2,r2,6
   848d0:	10c5883a 	add	r2,r2,r3
   848d4:	10800604 	addi	r2,r2,24
   848d8:	10800017 	ldw	r2,0(r2)
   848dc:	11000044 	addi	r4,r2,1
   848e0:	00c00374 	movhi	r3,13
   848e4:	18f83504 	addi	r3,r3,-7980
   848e8:	280491ba 	slli	r2,r5,6
   848ec:	10c5883a 	add	r2,r2,r3
   848f0:	10800604 	addi	r2,r2,24
   848f4:	11000015 	stw	r4,0(r2)
				active_files[file_handle].modified = true;
   848f8:	e0bffd0f 	ldh	r2,-12(fp)
   848fc:	00c00374 	movhi	r3,13
   84900:	18f83504 	addi	r3,r3,-7980
   84904:	100491ba 	slli	r2,r2,6
   84908:	10c5883a 	add	r2,r2,r3
   8490c:	10c00e04 	addi	r3,r2,56
   84910:	00800044 	movi	r2,1
   84914:	18800015 	stw	r2,0(r3)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
   84918:	00800044 	movi	r2,1
   8491c:	d0a6c215 	stw	r2,-25848(gp)
			result = true;
   84920:	00800044 	movi	r2,1
   84924:	e0bffa15 	stw	r2,-24(fp)
		}
    }
    
    return result;
   84928:	e0bffa17 	ldw	r2,-24(fp)
   8492c:	e0bfff15 	stw	r2,-4(fp)
   84930:	e0bfff17 	ldw	r2,-4(fp)
}
   84934:	e037883a 	mov	sp,fp
   84938:	dfc00217 	ldw	ra,8(sp)
   8493c:	df000117 	ldw	fp,4(sp)
   84940:	dc000017 	ldw	r16,0(sp)
   84944:	dec00304 	addi	sp,sp,12
   84948:	f800283a 	ret

0008494c <sd_card_fclose>:


bool sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
   8494c:	defffa04 	addi	sp,sp,-24
   84950:	dfc00515 	stw	ra,20(sp)
   84954:	df000415 	stw	fp,16(sp)
   84958:	dc000315 	stw	r16,12(sp)
   8495c:	df000304 	addi	fp,sp,12
   84960:	e13fff0d 	sth	r4,-4(fp)
    bool result = false;
   84964:	e03ffe15 	stw	zero,-8(fp)
    if ((sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   84968:	00835c80 	call	835c8 <sd_card_is_Present>
   8496c:	1005003a 	cmpeq	r2,r2,zero
   84970:	1000641e 	bne	r2,zero,84b04 <sd_card_fclose+0x1b8>
   84974:	d0a6ba17 	ldw	r2,-25880(gp)
   84978:	1005003a 	cmpeq	r2,r2,zero
   8497c:	1000611e 	bne	r2,zero,84b04 <sd_card_fclose+0x1b8>
    {
        if (active_files[file_handle].in_use) 
   84980:	e0bfff0f 	ldh	r2,-4(fp)
   84984:	00c00374 	movhi	r3,13
   84988:	18f83504 	addi	r3,r3,-7980
   8498c:	100491ba 	slli	r2,r2,6
   84990:	10c5883a 	add	r2,r2,r3
   84994:	10800f04 	addi	r2,r2,60
   84998:	10800017 	ldw	r2,0(r2)
   8499c:	1005003a 	cmpeq	r2,r2,zero
   849a0:	1000581e 	bne	r2,zero,84b04 <sd_card_fclose+0x1b8>
        {
			if (active_files[file_handle].modified)
   849a4:	e0bfff0f 	ldh	r2,-4(fp)
   849a8:	00c00374 	movhi	r3,13
   849ac:	18f83504 	addi	r3,r3,-7980
   849b0:	100491ba 	slli	r2,r2,6
   849b4:	10c5883a 	add	r2,r2,r3
   849b8:	10800e04 	addi	r2,r2,56
   849bc:	10800017 	ldw	r2,0(r2)
   849c0:	1005003a 	cmpeq	r2,r2,zero
   849c4:	1000461e 	bne	r2,zero,84ae0 <sd_card_fclose+0x194>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
   849c8:	e0bfff0f 	ldh	r2,-4(fp)
   849cc:	00c00374 	movhi	r3,13
   849d0:	18f83504 	addi	r3,r3,-7980
   849d4:	100491ba 	slli	r2,r2,6
   849d8:	10c5883a 	add	r2,r2,r3
   849dc:	10800b04 	addi	r2,r2,44
   849e0:	10800017 	ldw	r2,0(r2)
   849e4:	e0bffd15 	stw	r2,-12(fp)
				if (active_files[file_handle].file_record_cluster == 0)
   849e8:	e0bfff0f 	ldh	r2,-4(fp)
   849ec:	00c00374 	movhi	r3,13
   849f0:	18f83504 	addi	r3,r3,-7980
   849f4:	100491ba 	slli	r2,r2,6
   849f8:	10c5883a 	add	r2,r2,r3
   849fc:	10800a04 	addi	r2,r2,40
   84a00:	10800017 	ldw	r2,0(r2)
   84a04:	1004c03a 	cmpne	r2,r2,zero
   84a08:	1000071e 	bne	r2,zero,84a28 <sd_card_fclose+0xdc>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
   84a0c:	00800374 	movhi	r2,13
   84a10:	10b82004 	addi	r2,r2,-8064
   84a14:	10c01317 	ldw	r3,76(r2)
   84a18:	e0bffd17 	ldw	r2,-12(fp)
   84a1c:	10c5883a 	add	r2,r2,r3
   84a20:	e0bffd15 	stw	r2,-12(fp)
   84a24:	00001406 	br	84a78 <sd_card_fclose+0x12c>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
   84a28:	00800374 	movhi	r2,13
   84a2c:	10b82004 	addi	r2,r2,-8064
   84a30:	10c01417 	ldw	r3,80(r2)
   84a34:	e0bffd17 	ldw	r2,-12(fp)
   84a38:	18a1883a 	add	r16,r3,r2
   84a3c:	e0bfff0f 	ldh	r2,-4(fp)
   84a40:	00c00374 	movhi	r3,13
   84a44:	18f83504 	addi	r3,r3,-7980
   84a48:	100491ba 	slli	r2,r2,6
   84a4c:	10c5883a 	add	r2,r2,r3
   84a50:	10800a04 	addi	r2,r2,40
   84a54:	10800017 	ldw	r2,0(r2)
   84a58:	113fff84 	addi	r4,r2,-2
   84a5c:	00800374 	movhi	r2,13
   84a60:	10b82004 	addi	r2,r2,-8064
   84a64:	10800383 	ldbu	r2,14(r2)
   84a68:	11403fcc 	andi	r5,r2,255
   84a6c:	008597c0 	call	8597c <__mulsi3>
   84a70:	8085883a 	add	r2,r16,r2
   84a74:	e0bffd15 	stw	r2,-12(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
   84a78:	e13ffd17 	ldw	r4,-12(fp)
   84a7c:	d166c017 	ldw	r5,-25856(gp)
   84a80:	0080c0c0 	call	80c0c <Read_Sector_Data>
   84a84:	1005003a 	cmpeq	r2,r2,zero
   84a88:	1000151e 	bne	r2,zero,84ae0 <sd_card_fclose+0x194>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
   84a8c:	e0bfff0f 	ldh	r2,-4(fp)
   84a90:	00c00374 	movhi	r3,13
   84a94:	18f83504 	addi	r3,r3,-7980
   84a98:	100491ba 	slli	r2,r2,6
   84a9c:	10c5883a 	add	r2,r2,r3
   84aa0:	10800c04 	addi	r2,r2,48
   84aa4:	1080000b 	ldhu	r2,0(r2)
   84aa8:	113fffcc 	andi	r4,r2,65535
   84aac:	2120001c 	xori	r4,r4,32768
   84ab0:	21200004 	addi	r4,r4,-32768
   84ab4:	e0bfff0f 	ldh	r2,-4(fp)
   84ab8:	100491ba 	slli	r2,r2,6
   84abc:	1007883a 	mov	r3,r2
   84ac0:	00800374 	movhi	r2,13
   84ac4:	10b83504 	addi	r2,r2,-7980
   84ac8:	188b883a 	add	r5,r3,r2
   84acc:	00811980 	call	81198 <Write_File_Record_At_Offset>
   84ad0:	1005003a 	cmpeq	r2,r2,zero
   84ad4:	1000021e 	bne	r2,zero,84ae0 <sd_card_fclose+0x194>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
   84ad8:	0080bbc0 	call	80bbc <Save_Modified_Sector>
   84adc:	e0bffe15 	stw	r2,-8(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
   84ae0:	e0bfff0f 	ldh	r2,-4(fp)
   84ae4:	00c00374 	movhi	r3,13
   84ae8:	18f83504 	addi	r3,r3,-7980
   84aec:	100491ba 	slli	r2,r2,6
   84af0:	10c5883a 	add	r2,r2,r3
   84af4:	10800f04 	addi	r2,r2,60
   84af8:	10000015 	stw	zero,0(r2)
			result = true;
   84afc:	00800044 	movi	r2,1
   84b00:	e0bffe15 	stw	r2,-8(fp)
        }
    }
    
    return result;
   84b04:	e0bffe17 	ldw	r2,-8(fp)
}
   84b08:	e037883a 	mov	sp,fp
   84b0c:	dfc00217 	ldw	ra,8(sp)
   84b10:	df000117 	ldw	fp,4(sp)
   84b14:	dc000017 	ldw	r16,0(sp)
   84b18:	dec00304 	addi	sp,sp,12
   84b1c:	f800283a 	ret

00084b20 <read_SD_int>:
    		0x00, 0x10, 0x0e, 0x00,
    };

//since the read_data function returns 2 BYTES, the top byte shouldnt containing anything
//returning -1 if nothing is read which is FFFF
bool read_SD_int (short int file_handle, int *sd_info) {
   84b20:	defffa04 	addi	sp,sp,-24
   84b24:	dfc00515 	stw	ra,20(sp)
   84b28:	df000415 	stw	fp,16(sp)
   84b2c:	df000404 	addi	fp,sp,16
   84b30:	e17ffe15 	stw	r5,-8(fp)
   84b34:	e13ffd0d 	sth	r4,-12(fp)

    *sd_info = 0;
   84b38:	e0bffe17 	ldw	r2,-8(fp)
   84b3c:	10000015 	stw	zero,0(r2)
    unsigned short int read_data;

	//top byte error check
    if (((read_data = sd_card_read(file_handle)) >> 8) != 0)
   84b40:	e13ffd0f 	ldh	r4,-12(fp)
   84b44:	0083fe00 	call	83fe0 <sd_card_read>
   84b48:	e0bffc0d 	sth	r2,-16(fp)
   84b4c:	e0bffc0b 	ldhu	r2,-16(fp)
   84b50:	1004d23a 	srli	r2,r2,8
   84b54:	10bfffcc 	andi	r2,r2,65535
   84b58:	1005003a 	cmpeq	r2,r2,zero
   84b5c:	1000021e 	bne	r2,zero,84b68 <read_SD_int+0x48>
    return false; //out of the 2 bytes sd_card_read returns, if top byte should be 0!!
   84b60:	e03fff15 	stw	zero,-4(fp)
   84b64:	00003b06 	br	84c54 <read_SD_int+0x134>

    *sd_info = read_data |  *sd_info;
   84b68:	e0fffc0b 	ldhu	r3,-16(fp)
   84b6c:	e0bffe17 	ldw	r2,-8(fp)
   84b70:	10800017 	ldw	r2,0(r2)
   84b74:	1886b03a 	or	r3,r3,r2
   84b78:	e0bffe17 	ldw	r2,-8(fp)
   84b7c:	10c00015 	stw	r3,0(r2)

    if (((read_data = sd_card_read(file_handle)) >> 8) != 0)
   84b80:	e13ffd0f 	ldh	r4,-12(fp)
   84b84:	0083fe00 	call	83fe0 <sd_card_read>
   84b88:	e0bffc0d 	sth	r2,-16(fp)
   84b8c:	e0bffc0b 	ldhu	r2,-16(fp)
   84b90:	1004d23a 	srli	r2,r2,8
   84b94:	10bfffcc 	andi	r2,r2,65535
   84b98:	1005003a 	cmpeq	r2,r2,zero
   84b9c:	1000021e 	bne	r2,zero,84ba8 <read_SD_int+0x88>
    return false;
   84ba0:	e03fff15 	stw	zero,-4(fp)
   84ba4:	00002b06 	br	84c54 <read_SD_int+0x134>

    *sd_info |= read_data << 8;
   84ba8:	e0bffe17 	ldw	r2,-8(fp)
   84bac:	10c00017 	ldw	r3,0(r2)
   84bb0:	e0bffc0b 	ldhu	r2,-16(fp)
   84bb4:	1004923a 	slli	r2,r2,8
   84bb8:	1886b03a 	or	r3,r3,r2
   84bbc:	e0bffe17 	ldw	r2,-8(fp)
   84bc0:	10c00015 	stw	r3,0(r2)

    if (((read_data = sd_card_read(file_handle)) >> 8) != 0)
   84bc4:	e13ffd0f 	ldh	r4,-12(fp)
   84bc8:	0083fe00 	call	83fe0 <sd_card_read>
   84bcc:	e0bffc0d 	sth	r2,-16(fp)
   84bd0:	e0bffc0b 	ldhu	r2,-16(fp)
   84bd4:	1004d23a 	srli	r2,r2,8
   84bd8:	10bfffcc 	andi	r2,r2,65535
   84bdc:	1005003a 	cmpeq	r2,r2,zero
   84be0:	1000021e 	bne	r2,zero,84bec <read_SD_int+0xcc>
    return false;
   84be4:	e03fff15 	stw	zero,-4(fp)
   84be8:	00001a06 	br	84c54 <read_SD_int+0x134>
    *sd_info |= read_data << 16;
   84bec:	e0bffe17 	ldw	r2,-8(fp)
   84bf0:	10c00017 	ldw	r3,0(r2)
   84bf4:	e0bffc0b 	ldhu	r2,-16(fp)
   84bf8:	1004943a 	slli	r2,r2,16
   84bfc:	1886b03a 	or	r3,r3,r2
   84c00:	e0bffe17 	ldw	r2,-8(fp)
   84c04:	10c00015 	stw	r3,0(r2)

    if (((read_data = sd_card_read(file_handle)) >> 8) != 0)
   84c08:	e13ffd0f 	ldh	r4,-12(fp)
   84c0c:	0083fe00 	call	83fe0 <sd_card_read>
   84c10:	e0bffc0d 	sth	r2,-16(fp)
   84c14:	e0bffc0b 	ldhu	r2,-16(fp)
   84c18:	1004d23a 	srli	r2,r2,8
   84c1c:	10bfffcc 	andi	r2,r2,65535
   84c20:	1005003a 	cmpeq	r2,r2,zero
   84c24:	1000021e 	bne	r2,zero,84c30 <read_SD_int+0x110>
    return false;
   84c28:	e03fff15 	stw	zero,-4(fp)
   84c2c:	00000906 	br	84c54 <read_SD_int+0x134>
    *sd_info |= read_data << 24;
   84c30:	e0bffe17 	ldw	r2,-8(fp)
   84c34:	10c00017 	ldw	r3,0(r2)
   84c38:	e0bffc0b 	ldhu	r2,-16(fp)
   84c3c:	1004963a 	slli	r2,r2,24
   84c40:	1886b03a 	or	r3,r3,r2
   84c44:	e0bffe17 	ldw	r2,-8(fp)
   84c48:	10c00015 	stw	r3,0(r2)

    return true;
   84c4c:	00800044 	movi	r2,1
   84c50:	e0bfff15 	stw	r2,-4(fp)
   84c54:	e0bfff17 	ldw	r2,-4(fp)
}
   84c58:	e037883a 	mov	sp,fp
   84c5c:	dfc00117 	ldw	ra,4(sp)
   84c60:	df000017 	ldw	fp,0(sp)
   84c64:	dec00204 	addi	sp,sp,8
   84c68:	f800283a 	ret

00084c6c <bmp_function>:


bool bmp_function (short int file_handle, int *height, int *width) {
   84c6c:	defff604 	addi	sp,sp,-40
   84c70:	dfc00915 	stw	ra,36(sp)
   84c74:	df000815 	stw	fp,32(sp)
   84c78:	df000804 	addi	fp,sp,32
   84c7c:	e17ffd15 	stw	r5,-12(fp)
   84c80:	e1bffe15 	stw	r6,-8(fp)
   84c84:	e13ffc0d 	sth	r4,-16(fp)
	int i;
    int header_num;
    int detect;
    bool bool_flag;

    for (i = 2; i < 10; i++) {
   84c88:	00800084 	movi	r2,2
   84c8c:	e0bffa15 	stw	r2,-24(fp)
   84c90:	00001006 	br	84cd4 <bmp_function+0x68>
            if ((sd_card_read(file_handle) >> 8) != 0) return false;
   84c94:	e13ffc0f 	ldh	r4,-16(fp)
   84c98:	0083fe00 	call	83fe0 <sd_card_read>
   84c9c:	10bfffcc 	andi	r2,r2,65535
   84ca0:	10a0001c 	xori	r2,r2,32768
   84ca4:	10a00004 	addi	r2,r2,-32768
   84ca8:	1005d23a 	srai	r2,r2,8
   84cac:	10bfffcc 	andi	r2,r2,65535
   84cb0:	10a0001c 	xori	r2,r2,32768
   84cb4:	10a00004 	addi	r2,r2,-32768
   84cb8:	1005003a 	cmpeq	r2,r2,zero
   84cbc:	1000021e 	bne	r2,zero,84cc8 <bmp_function+0x5c>
   84cc0:	e03fff15 	stw	zero,-4(fp)
   84cc4:	00005906 	br	84e2c <bmp_function+0x1c0>
	int i;
    int header_num;
    int detect;
    bool bool_flag;

    for (i = 2; i < 10; i++) {
   84cc8:	e0bffa17 	ldw	r2,-24(fp)
   84ccc:	10800044 	addi	r2,r2,1
   84cd0:	e0bffa15 	stw	r2,-24(fp)
   84cd4:	e0bffa17 	ldw	r2,-24(fp)
   84cd8:	10800290 	cmplti	r2,r2,10
   84cdc:	103fed1e 	bne	r2,zero,84c94 <bmp_function+0x28>
            if ((sd_card_read(file_handle) >> 8) != 0) return false;
        }

    if (sd_card_read(file_handle) != 'B') bool_flag = false;
   84ce0:	e13ffc0f 	ldh	r4,-16(fp)
   84ce4:	0083fe00 	call	83fe0 <sd_card_read>
   84ce8:	10bfffcc 	andi	r2,r2,65535
   84cec:	10a0001c 	xori	r2,r2,32768
   84cf0:	10a00004 	addi	r2,r2,-32768
   84cf4:	108010a0 	cmpeqi	r2,r2,66
   84cf8:	1000011e 	bne	r2,zero,84d00 <bmp_function+0x94>
   84cfc:	e03ff815 	stw	zero,-32(fp)
    if (sd_card_read(file_handle) != 'M') bool_flag = false;
   84d00:	e13ffc0f 	ldh	r4,-16(fp)
   84d04:	0083fe00 	call	83fe0 <sd_card_read>
   84d08:	10bfffcc 	andi	r2,r2,65535
   84d0c:	10a0001c 	xori	r2,r2,32768
   84d10:	10a00004 	addi	r2,r2,-32768
   84d14:	10801360 	cmpeqi	r2,r2,77
   84d18:	1000011e 	bne	r2,zero,84d20 <bmp_function+0xb4>
   84d1c:	e03ff815 	stw	zero,-32(fp)


    // get offset to image data
    if (!read_SD_int(file_handle, &header_num)) return false;
   84d20:	e13ffc0f 	ldh	r4,-16(fp)
   84d24:	e17ffb04 	addi	r5,fp,-20
   84d28:	0084b200 	call	84b20 <read_SD_int>
   84d2c:	1004c03a 	cmpne	r2,r2,zero
   84d30:	1000021e 	bne	r2,zero,84d3c <bmp_function+0xd0>
   84d34:	e03fff15 	stw	zero,-4(fp)
   84d38:	00003c06 	br	84e2c <bmp_function+0x1c0>

    for (i = 14; i < 18; i++) // strip next 4 bytes
   84d3c:	00800384 	movi	r2,14
   84d40:	e0bffa15 	stw	r2,-24(fp)
   84d44:	00001006 	br	84d88 <bmp_function+0x11c>
        if ((sd_card_read(file_handle) >> 8) != 0) return false;
   84d48:	e13ffc0f 	ldh	r4,-16(fp)
   84d4c:	0083fe00 	call	83fe0 <sd_card_read>
   84d50:	10bfffcc 	andi	r2,r2,65535
   84d54:	10a0001c 	xori	r2,r2,32768
   84d58:	10a00004 	addi	r2,r2,-32768
   84d5c:	1005d23a 	srai	r2,r2,8
   84d60:	10bfffcc 	andi	r2,r2,65535
   84d64:	10a0001c 	xori	r2,r2,32768
   84d68:	10a00004 	addi	r2,r2,-32768
   84d6c:	1005003a 	cmpeq	r2,r2,zero
   84d70:	1000021e 	bne	r2,zero,84d7c <bmp_function+0x110>
   84d74:	e03fff15 	stw	zero,-4(fp)
   84d78:	00002c06 	br	84e2c <bmp_function+0x1c0>


    // get offset to image data
    if (!read_SD_int(file_handle, &header_num)) return false;

    for (i = 14; i < 18; i++) // strip next 4 bytes
   84d7c:	e0bffa17 	ldw	r2,-24(fp)
   84d80:	10800044 	addi	r2,r2,1
   84d84:	e0bffa15 	stw	r2,-24(fp)
   84d88:	e0bffa17 	ldw	r2,-24(fp)
   84d8c:	10800490 	cmplti	r2,r2,18
   84d90:	103fed1e 	bne	r2,zero,84d48 <bmp_function+0xdc>
        if ((sd_card_read(file_handle) >> 8) != 0) return false;

    if (!read_SD_int(file_handle, width)) return false;
   84d94:	e13ffc0f 	ldh	r4,-16(fp)
   84d98:	e17ffe17 	ldw	r5,-8(fp)
   84d9c:	0084b200 	call	84b20 <read_SD_int>
   84da0:	1004c03a 	cmpne	r2,r2,zero
   84da4:	1000021e 	bne	r2,zero,84db0 <bmp_function+0x144>
   84da8:	e03fff15 	stw	zero,-4(fp)
   84dac:	00001f06 	br	84e2c <bmp_function+0x1c0>
    if (!read_SD_int(file_handle, height)) return false;
   84db0:	e13ffc0f 	ldh	r4,-16(fp)
   84db4:	e17ffd17 	ldw	r5,-12(fp)
   84db8:	0084b200 	call	84b20 <read_SD_int>
   84dbc:	1004c03a 	cmpne	r2,r2,zero
   84dc0:	1000021e 	bne	r2,zero,84dcc <bmp_function+0x160>
   84dc4:	e03fff15 	stw	zero,-4(fp)
   84dc8:	00001806 	br	84e2c <bmp_function+0x1c0>

	//get rid of the last bytes
    for (i = 26; i < header_num; i++)
   84dcc:	00800684 	movi	r2,26
   84dd0:	e0bffa15 	stw	r2,-24(fp)
   84dd4:	00001006 	br	84e18 <bmp_function+0x1ac>
        if ((sd_card_read(file_handle) >> 8) != 0) return false;
   84dd8:	e13ffc0f 	ldh	r4,-16(fp)
   84ddc:	0083fe00 	call	83fe0 <sd_card_read>
   84de0:	10bfffcc 	andi	r2,r2,65535
   84de4:	10a0001c 	xori	r2,r2,32768
   84de8:	10a00004 	addi	r2,r2,-32768
   84dec:	1005d23a 	srai	r2,r2,8
   84df0:	10bfffcc 	andi	r2,r2,65535
   84df4:	10a0001c 	xori	r2,r2,32768
   84df8:	10a00004 	addi	r2,r2,-32768
   84dfc:	1005003a 	cmpeq	r2,r2,zero
   84e00:	1000021e 	bne	r2,zero,84e0c <bmp_function+0x1a0>
   84e04:	e03fff15 	stw	zero,-4(fp)
   84e08:	00000806 	br	84e2c <bmp_function+0x1c0>

    if (!read_SD_int(file_handle, width)) return false;
    if (!read_SD_int(file_handle, height)) return false;

	//get rid of the last bytes
    for (i = 26; i < header_num; i++)
   84e0c:	e0bffa17 	ldw	r2,-24(fp)
   84e10:	10800044 	addi	r2,r2,1
   84e14:	e0bffa15 	stw	r2,-24(fp)
   84e18:	e0fffb17 	ldw	r3,-20(fp)
   84e1c:	e0bffa17 	ldw	r2,-24(fp)
   84e20:	10ffed16 	blt	r2,r3,84dd8 <bmp_function+0x16c>
        if ((sd_card_read(file_handle) >> 8) != 0) return false;

    return true;
   84e24:	00800044 	movi	r2,1
   84e28:	e0bfff15 	stw	r2,-4(fp)
   84e2c:	e0bfff17 	ldw	r2,-4(fp)
}
   84e30:	e037883a 	mov	sp,fp
   84e34:	dfc00117 	ldw	ra,4(sp)
   84e38:	df000017 	ldw	fp,0(sp)
   84e3c:	dec00204 	addi	sp,sp,8
   84e40:	f800283a 	ret

00084e44 <main>:

int main()
{
   84e44:	defe0804 	addi	sp,sp,-2016
   84e48:	dfc1f715 	stw	ra,2012(sp)
   84e4c:	df01f615 	stw	fp,2008(sp)
   84e50:	dc81f515 	stw	r18,2004(sp)
   84e54:	dc41f415 	stw	r17,2000(sp)
   84e58:	dc01f315 	stw	r16,1996(sp)
   84e5c:	df01f304 	addi	fp,sp,1996
    // alt_up_sd_card_dev *sd_card_dev = NULL;
    PB_irq_data_struct PB_irq_data;
    short int file_handle;
    int i, j;
    int connected = 0;
   84e60:	e03e1015 	stw	zero,-1984(fp)
    int status;
    unsigned short int data;
    char filename[13];
    int file_number = 0;
   84e64:	e03e0d15 	stw	zero,-1996(fp)
//    int height;
 //   int width;

    alt_u8 full_R[LINE_LEN], full_G[LINE_LEN], full_B[LINE_LEN];

    PB_irq_data.load_img_flag = 0;
   84e68:	e03e1815 	stw	zero,-1952(fp)
    PB_irq_data.save_img_flag = 0;
   84e6c:	e03e1915 	stw	zero,-1948(fp)
    
    // sd_card_dev = alt_up_sd_card_open_dev("/dev/SD_card_0");
    sd_card_open_dev();
   84e70:	00835700 	call	83570 <sd_card_open_dev>
    
    alt_irq_register(NIOS_LCD_CAMERA_COMPONENT_0_TOUCHPANEL_IRQ, NULL, (void *)LTC_TouchPanel_int);
   84e74:	0009883a 	mov	r4,zero
   84e78:	000b883a 	mov	r5,zero
   84e7c:	01800234 	movhi	r6,8
   84e80:	31816104 	addi	r6,r6,1412
   84e84:	008f7900 	call	8f790 <alt_irq_register>
    init_button_irq(&PB_irq_data);
   84e88:	e13e1404 	addi	r4,fp,-1968
   84e8c:	0080aa80 	call	80aa8 <init_button_irq>
    
    printf("Experiment 3!\n");
   84e90:	01000274 	movhi	r4,9
   84e94:	21085004 	addi	r4,r4,8512
   84e98:	0085acc0 	call	85acc <puts>

    // initialize the touch panel
    IOWR(NIOS_LCD_CAMERA_COMPONENT_0_TOUCHPANEL_BASE, 2, 0x0);
   84e9c:	00800434 	movhi	r2,16
   84ea0:	10951204 	addi	r2,r2,21576
   84ea4:	10000035 	stwio	zero,0(r2)
    IOWR(NIOS_LCD_CAMERA_COMPONENT_0_TOUCHPANEL_BASE, 1, 0x400000);
   84ea8:	00c00434 	movhi	r3,16
   84eac:	18d51104 	addi	r3,r3,21572
   84eb0:	00801034 	movhi	r2,64
   84eb4:	18800035 	stwio	r2,0(r3)

    // initialize the camera
    IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CAMERA_BASE, 0, 0x0400);
   84eb8:	00c00434 	movhi	r3,16
   84ebc:	18d50004 	addi	r3,r3,21504
   84ec0:	00810004 	movi	r2,1024
   84ec4:	18800035 	stwio	r2,0(r3)
    IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CAMERA_BASE, 1, 0x2);
   84ec8:	00c00434 	movhi	r3,16
   84ecc:	18d50104 	addi	r3,r3,21508
   84ed0:	00800084 	movi	r2,2
   84ed4:	18800035 	stwio	r2,0(r3)
    while ((IORD(NIOS_LCD_CAMERA_COMPONENT_0_CAMERA_BASE, 1) & 0x1) == 0);
   84ed8:	00800434 	movhi	r2,16
   84edc:	10950104 	addi	r2,r2,21508
   84ee0:	10800037 	ldwio	r2,0(r2)
   84ee4:	1080004c 	andi	r2,r2,1
   84ee8:	1005003a 	cmpeq	r2,r2,zero
   84eec:	103ffa1e 	bne	r2,zero,84ed8 <main+0x94>
    IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CAMERA_BASE, 1, 0x4);
   84ef0:	00c00434 	movhi	r3,16
   84ef4:	18d50104 	addi	r3,r3,21508
   84ef8:	00800104 	movi	r2,4
   84efc:	18800035 	stwio	r2,0(r3)

    // initialize the buttons
    IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CONSOLE_BASE, 1, 0x0);
   84f00:	00800434 	movhi	r2,16
   84f04:	10880104 	addi	r2,r2,8196
   84f08:	10000035 	stwio	zero,0(r2)
    
    // initialize the filter pipe
    IOWR(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 4, 0);
   84f0c:	00800434 	movhi	r2,16
   84f10:	10800404 	addi	r2,r2,16
   84f14:	10000035 	stwio	zero,0(r2)
   84f18:	00000006 	br	84f1c <main+0xd8>

        while(1) { 
            if ((connected == 0) && (sd_card_is_Present())) {
   84f1c:	e0be1017 	ldw	r2,-1984(fp)
   84f20:	1004c03a 	cmpne	r2,r2,zero
   84f24:	1000321e 	bne	r2,zero,84ff0 <main+0x1ac>
   84f28:	00835c80 	call	835c8 <sd_card_is_Present>
   84f2c:	1005003a 	cmpeq	r2,r2,zero
   84f30:	10002f1e 	bne	r2,zero,84ff0 <main+0x1ac>
                printf("Card connected.\n"); 
   84f34:	01000274 	movhi	r4,9
   84f38:	21085404 	addi	r4,r4,8528
   84f3c:	0085acc0 	call	85acc <puts>
                connected = 1; 
   84f40:	00800044 	movi	r2,1
   84f44:	e0be1015 	stw	r2,-1984(fp)
                if (sd_card_is_FAT16()) {
   84f48:	00836140 	call	83614 <sd_card_is_FAT16>
   84f4c:	1005003a 	cmpeq	r2,r2,zero
   84f50:	1000041e 	bne	r2,zero,84f64 <main+0x120>
                    printf("Valid file system detected.\n"); 
   84f54:	01000274 	movhi	r4,9
   84f58:	21085804 	addi	r4,r4,8544
   84f5c:	0085acc0 	call	85acc <puts>
   84f60:	00000306 	br	84f70 <main+0x12c>
                } else {
                    printf("Unknown file system.\n");
   84f64:	01000274 	movhi	r4,9
   84f68:	21085f04 	addi	r4,r4,8572
   84f6c:	0085acc0 	call	85acc <puts>
                }
                status = sd_card_find_first(".", PB_irq_data.filename);
   84f70:	e17e1404 	addi	r5,fp,-1968
   84f74:	01000274 	movhi	r4,9
   84f78:	21086504 	addi	r4,r4,8596
   84f7c:	00836a00 	call	836a0 <sd_card_find_first>
   84f80:	10bfffcc 	andi	r2,r2,65535
   84f84:	10a0001c 	xori	r2,r2,32768
   84f88:	10a00004 	addi	r2,r2,-32768
   84f8c:	e0be0f15 	stw	r2,-1988(fp)
                
                switch (status) {
   84f90:	e0be0f17 	ldw	r2,-1988(fp)
   84f94:	e0bfff15 	stw	r2,-4(fp)
   84f98:	e0ffff17 	ldw	r3,-4(fp)
   84f9c:	18800060 	cmpeqi	r2,r3,1
   84fa0:	10000b1e 	bne	r2,zero,84fd0 <main+0x18c>
   84fa4:	e0ffff17 	ldw	r3,-4(fp)
   84fa8:	188000a0 	cmpeqi	r2,r3,2
   84fac:	10000c1e 	bne	r2,zero,84fe0 <main+0x19c>
   84fb0:	e0ffff17 	ldw	r3,-4(fp)
   84fb4:	1805003a 	cmpeq	r2,r3,zero
   84fb8:	1000011e 	bne	r2,zero,84fc0 <main+0x17c>
   84fbc:	00001606 	br	85018 <main+0x1d4>
                    case 0: printf("Success\n"); break;
   84fc0:	01000274 	movhi	r4,9
   84fc4:	21086604 	addi	r4,r4,8600
   84fc8:	0085acc0 	call	85acc <puts>
   84fcc:	00001206 	br	85018 <main+0x1d4>
                    case 1: printf("Invalid directory\n"); break;
   84fd0:	01000274 	movhi	r4,9
   84fd4:	21086804 	addi	r4,r4,8608
   84fd8:	0085acc0 	call	85acc <puts>
   84fdc:	00000e06 	br	85018 <main+0x1d4>
                    case 2: printf("No card or incorrect FS\n"); break;
   84fe0:	01000274 	movhi	r4,9
   84fe4:	21086d04 	addi	r4,r4,8628
   84fe8:	0085acc0 	call	85acc <puts>
    
    // initialize the filter pipe
    IOWR(NIOS_LCD_CAMERA_COMPONENT_0_IMAGELINE_BASE, 4, 0);

        while(1) { 
            if ((connected == 0) && (sd_card_is_Present())) {
   84fec:	00000a06 	br	85018 <main+0x1d4>
                switch (status) {
                    case 0: printf("Success\n"); break;
                    case 1: printf("Invalid directory\n"); break;
                    case 2: printf("No card or incorrect FS\n"); break;
                }
            } else if ((connected == 1) && (sd_card_is_Present() == false)) {
   84ff0:	e0be1017 	ldw	r2,-1984(fp)
   84ff4:	10800058 	cmpnei	r2,r2,1
   84ff8:	1000071e 	bne	r2,zero,85018 <main+0x1d4>
   84ffc:	00835c80 	call	835c8 <sd_card_is_Present>
   85000:	1004c03a 	cmpne	r2,r2,zero
   85004:	1000041e 	bne	r2,zero,85018 <main+0x1d4>
                printf("Card disconnected.\n"); connected = 0;
   85008:	01000274 	movhi	r4,9
   8500c:	21087304 	addi	r4,r4,8652
   85010:	0085acc0 	call	85acc <puts>
   85014:	e03e1015 	stw	zero,-1984(fp)
            }
            
            if (PB_irq_data.load_img_flag == 1) {
   85018:	e0be1817 	ldw	r2,-1952(fp)
   8501c:	10800058 	cmpnei	r2,r2,1
   85020:	1001621e 	bne	r2,zero,855ac <main+0x768>
                // stop the camera
                IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CAMERA_BASE, 1, 0x8);
   85024:	00c00434 	movhi	r3,16
   85028:	18d50104 	addi	r3,r3,21508
   8502c:	00800204 	movi	r2,8
   85030:	18800035 	stwio	r2,0(r3)
                
                file_handle = sd_card_fopen(PB_irq_data.filename, false);
   85034:	e13e1404 	addi	r4,fp,-1968
   85038:	000b883a 	mov	r5,zero
   8503c:	0083b1c0 	call	83b1c <sd_card_fopen>
   85040:	e0be130d 	sth	r2,-1972(fp)
                
                if (status < 0) printf("Error opening file \"%s\"\n", PB_irq_data.filename);
   85044:	e0be0f17 	ldw	r2,-1988(fp)
   85048:	1004403a 	cmpge	r2,r2,zero
   8504c:	1000051e 	bne	r2,zero,85064 <main+0x220>
   85050:	e17e1404 	addi	r5,fp,-1968
   85054:	01000274 	movhi	r4,9
   85058:	21087804 	addi	r4,r4,8672
   8505c:	00859b40 	call	859b4 <printf>
   85060:	00015106 	br	855a8 <main+0x764>
                else {
                    printf("Loading image data from file \"%s\"\n", PB_irq_data.filename);
   85064:	e17e1404 	addi	r5,fp,-1968
   85068:	01000274 	movhi	r4,9
   8506c:	21087f04 	addi	r4,r4,8700
   85070:	00859b40 	call	859b4 <printf>

		    // parse BMP header
		    if (!bmp_function(file_handle, &height, &width))
   85074:	e13e130f 	ldh	r4,-1972(fp)
   85078:	d166c404 	addi	r5,gp,-25840
   8507c:	d1a6c504 	addi	r6,gp,-25836
   85080:	0084c6c0 	call	84c6c <bmp_function>
   85084:	1004c03a 	cmpne	r2,r2,zero
   85088:	1000041e 	bne	r2,zero,8509c <main+0x258>
			    printf("BMP formatting is Incorrect, try again\n");
   8508c:	01000274 	movhi	r4,9
   85090:	21088804 	addi	r4,r4,8736
   85094:	0085acc0 	call	85acc <puts>
   85098:	00014106 	br	855a0 <main+0x75c>
		    else if (((height != 240) && (height != -240)) || (width != 320))
   8509c:	d0a6c417 	ldw	r2,-25840(gp)
   850a0:	10803c20 	cmpeqi	r2,r2,240
   850a4:	1000031e 	bne	r2,zero,850b4 <main+0x270>
   850a8:	d0a6c417 	ldw	r2,-25840(gp)
   850ac:	10bfc418 	cmpnei	r2,r2,-240
   850b0:	1000031e 	bne	r2,zero,850c0 <main+0x27c>
   850b4:	d0a6c517 	ldw	r2,-25836(gp)
   850b8:	10805020 	cmpeqi	r2,r2,320
   850bc:	1000041e 	bne	r2,zero,850d0 <main+0x28c>
			    printf("Size is Incorrect\n");
   850c0:	01000274 	movhi	r4,9
   850c4:	21089204 	addi	r4,r4,8776
   850c8:	0085acc0 	call	85acc <puts>
                    printf("Loading image data from file \"%s\"\n", PB_irq_data.filename);

		    // parse BMP header
		    if (!bmp_function(file_handle, &height, &width))
			    printf("BMP formatting is Incorrect, try again\n");
		    else if (((height != 240) && (height != -240)) || (width != 320))
   850cc:	00013406 	br	855a0 <main+0x75c>
			    printf("Size is Incorrect\n");
		    else {
                        if (height > 0) {
   850d0:	d0a6c417 	ldw	r2,-25840(gp)
   850d4:	10800050 	cmplti	r2,r2,1
   850d8:	1000041e 	bne	r2,zero,850ec <main+0x2a8>
                        	printf("This displaying image is inverted picture\n");}
   850dc:	01000274 	movhi	r4,9
   850e0:	21089704 	addi	r4,r4,8796
   850e4:	0085acc0 	call	85acc <puts>
   850e8:	00000606 	br	85104 <main+0x2c0>
                        	 else if (height < 0){
   850ec:	d0a6c417 	ldw	r2,-25840(gp)
   850f0:	1004403a 	cmpge	r2,r2,zero
   850f4:	1000031e 	bne	r2,zero,85104 <main+0x2c0>
                        		 printf("This displaying image is inverted picture");
   850f8:	01000274 	movhi	r4,9
   850fc:	21089704 	addi	r4,r4,8796
   85100:	00859b40 	call	859b4 <printf>
                      }

                        LTC_Switch_Nios_Mode(1);
   85104:	01000044 	movi	r4,1
   85108:	00801f00 	call	801f0 <LTC_Switch_Nios_Mode>

                 for (i = 0; i < LINE_LEN; i++)
   8510c:	e03e1215 	stw	zero,-1976(fp)
   85110:	00001506 	br	85168 <main+0x324>
                       full_R[i] = full_G[i] = full_B[i] = 0;
   85114:	e17e1217 	ldw	r5,-1976(fp)
   85118:	e13e1217 	ldw	r4,-1976(fp)
   8511c:	e0fe1217 	ldw	r3,-1976(fp)
   85120:	e0bf5d44 	addi	r2,fp,-651
   85124:	10c5883a 	add	r2,r2,r3
   85128:	10000005 	stb	zero,0(r2)
   8512c:	e0bf5d44 	addi	r2,fp,-651
   85130:	10c5883a 	add	r2,r2,r3
   85134:	10c00003 	ldbu	r3,0(r2)
   85138:	e0bebd44 	addi	r2,fp,-1291
   8513c:	1105883a 	add	r2,r2,r4
   85140:	10c00005 	stb	r3,0(r2)
   85144:	e0bebd44 	addi	r2,fp,-1291
   85148:	1105883a 	add	r2,r2,r4
   8514c:	10c00003 	ldbu	r3,0(r2)
   85150:	e0be1d44 	addi	r2,fp,-1931
   85154:	1145883a 	add	r2,r2,r5
   85158:	10c00005 	stb	r3,0(r2)
                        		 printf("This displaying image is inverted picture");
                      }

                        LTC_Switch_Nios_Mode(1);

                 for (i = 0; i < LINE_LEN; i++)
   8515c:	e0be1217 	ldw	r2,-1976(fp)
   85160:	10800044 	addi	r2,r2,1
   85164:	e0be1215 	stw	r2,-1976(fp)
   85168:	e0be1217 	ldw	r2,-1976(fp)
   8516c:	1080a010 	cmplti	r2,r2,640
   85170:	103fe81e 	bne	r2,zero,85114 <main+0x2d0>
                       full_R[i] = full_G[i] = full_B[i] = 0;
                    for (i = 0; i < NUM_LINES/4; i++)
   85174:	e03e1215 	stw	zero,-1976(fp)
   85178:	00000706 	br	85198 <main+0x354>
                       LTC_Write_Image_Line(full_R,full_G,full_B);
   8517c:	e13e1d44 	addi	r4,fp,-1931
   85180:	e17ebd44 	addi	r5,fp,-1291
   85184:	e1bf5d44 	addi	r6,fp,-651
   85188:	00804a00 	call	804a0 <LTC_Write_Image_Line>

                        LTC_Switch_Nios_Mode(1);

                 for (i = 0; i < LINE_LEN; i++)
                       full_R[i] = full_G[i] = full_B[i] = 0;
                    for (i = 0; i < NUM_LINES/4; i++)
   8518c:	e0be1217 	ldw	r2,-1976(fp)
   85190:	10800044 	addi	r2,r2,1
   85194:	e0be1215 	stw	r2,-1976(fp)
   85198:	e0be1217 	ldw	r2,-1976(fp)
   8519c:	10801e10 	cmplti	r2,r2,120
   851a0:	103ff61e 	bne	r2,zero,8517c <main+0x338>
                       LTC_Write_Image_Line(full_R,full_G,full_B);


                        for (i = 0; i < NUM_LINES/2; i++) {
   851a4:	e03e1215 	stw	zero,-1976(fp)
   851a8:	00009106 	br	853f0 <main+0x5ac>
                            IOWR(LED_RED_O_BASE, 0, i);
   851ac:	00c00434 	movhi	r3,16
   851b0:	18d52404 	addi	r3,r3,21648
   851b4:	e0be1217 	ldw	r2,-1976(fp)
   851b8:	18800035 	stwio	r2,0(r3)
                            for (j = 0; j < LINE_LEN/2; j++) {
   851bc:	e03e1115 	stw	zero,-1980(fp)
   851c0:	00007e06 	br	853bc <main+0x578>
                            	//IOWR(LED_RED_O_BASE, 0, i*640+j);
                                data = sd_card_read(file_handle);
   851c4:	e13e130f 	ldh	r4,-1972(fp)
   851c8:	0083fe00 	call	83fe0 <sd_card_read>
   851cc:	e0be0e0d 	sth	r2,-1992(fp)
								B_vals[j] = data & 0xFF;
								data = sd_card_read(file_handle);
								G_vals[j] = data & 0xFF;
								data = sd_card_read(file_handle);
								R_vals[j] = data & 0xFF;*/
                                if ((data >> 8) != 0) printf("B eof reached: %d, %d\n", i, j);
   851d0:	e0be0e0b 	ldhu	r2,-1992(fp)
   851d4:	1004d23a 	srli	r2,r2,8
   851d8:	10bfffcc 	andi	r2,r2,65535
   851dc:	1005003a 	cmpeq	r2,r2,zero
   851e0:	1000051e 	bne	r2,zero,851f8 <main+0x3b4>
   851e4:	01000274 	movhi	r4,9
   851e8:	2108a204 	addi	r4,r4,8840
   851ec:	e17e1217 	ldw	r5,-1976(fp)
   851f0:	e1be1117 	ldw	r6,-1980(fp)
   851f4:	00859b40 	call	859b4 <printf>
                                if (height < 0)
   851f8:	d0a6c417 	ldw	r2,-25840(gp)
   851fc:	1004403a 	cmpge	r2,r2,zero
   85200:	10000b1e 	bne	r2,zero,85230 <main+0x3ec>
                                	full_B[j + LINE_LEN/4] = data & 0xff;
   85204:	e0be1117 	ldw	r2,-1980(fp)
   85208:	11002804 	addi	r4,r2,160
   8520c:	e0be0e0b 	ldhu	r2,-1992(fp)
   85210:	1007883a 	mov	r3,r2
   85214:	00bfffc4 	movi	r2,-1
   85218:	1884703a 	and	r2,r3,r2
   8521c:	1007883a 	mov	r3,r2
   85220:	e0bf5d44 	addi	r2,fp,-651
   85224:	1105883a 	add	r2,r2,r4
   85228:	10c00005 	stb	r3,0(r2)
   8522c:	00000e06 	br	85268 <main+0x424>
                                else B_vals[i][j] = data & 0xFF;
   85230:	e13e1217 	ldw	r4,-1976(fp)
   85234:	e4be1117 	ldw	r18,-1980(fp)
   85238:	e0be0e0b 	ldhu	r2,-1992(fp)
   8523c:	1007883a 	mov	r3,r2
   85240:	00bfffc4 	movi	r2,-1
   85244:	1884703a 	and	r2,r3,r2
   85248:	1023883a 	mov	r17,r2
   8524c:	04000274 	movhi	r16,9
   85250:	84171b04 	addi	r16,r16,23660
   85254:	01405004 	movi	r5,320
   85258:	008597c0 	call	8597c <__mulsi3>
   8525c:	1405883a 	add	r2,r2,r16
   85260:	1485883a 	add	r2,r2,r18
   85264:	14400005 	stb	r17,0(r2)

                                data = sd_card_read(file_handle);
   85268:	e13e130f 	ldh	r4,-1972(fp)
   8526c:	0083fe00 	call	83fe0 <sd_card_read>
   85270:	e0be0e0d 	sth	r2,-1992(fp)
                                if ((data >> 8) != 0) printf("G eof reached: %d, %d\n", i, j);
   85274:	e0be0e0b 	ldhu	r2,-1992(fp)
   85278:	1004d23a 	srli	r2,r2,8
   8527c:	10bfffcc 	andi	r2,r2,65535
   85280:	1005003a 	cmpeq	r2,r2,zero
   85284:	1000051e 	bne	r2,zero,8529c <main+0x458>
   85288:	01000274 	movhi	r4,9
   8528c:	2108a804 	addi	r4,r4,8864
   85290:	e17e1217 	ldw	r5,-1976(fp)
   85294:	e1be1117 	ldw	r6,-1980(fp)
   85298:	00859b40 	call	859b4 <printf>
                                if (height < 0)
   8529c:	d0a6c417 	ldw	r2,-25840(gp)
   852a0:	1004403a 	cmpge	r2,r2,zero
   852a4:	10000b1e 	bne	r2,zero,852d4 <main+0x490>
                                	full_G[j + LINE_LEN/4] = data & 0xff;
   852a8:	e0be1117 	ldw	r2,-1980(fp)
   852ac:	11002804 	addi	r4,r2,160
   852b0:	e0be0e0b 	ldhu	r2,-1992(fp)
   852b4:	1007883a 	mov	r3,r2
   852b8:	00bfffc4 	movi	r2,-1
   852bc:	1884703a 	and	r2,r3,r2
   852c0:	1007883a 	mov	r3,r2
   852c4:	e0bebd44 	addi	r2,fp,-1291
   852c8:	1105883a 	add	r2,r2,r4
   852cc:	10c00005 	stb	r3,0(r2)
   852d0:	00000e06 	br	8530c <main+0x4c8>
                                else G_vals[i][j] = data & 0xFF;
   852d4:	e13e1217 	ldw	r4,-1976(fp)
   852d8:	e4be1117 	ldw	r18,-1980(fp)
   852dc:	e0be0e0b 	ldhu	r2,-1992(fp)
   852e0:	1007883a 	mov	r3,r2
   852e4:	00bfffc4 	movi	r2,-1
   852e8:	1884703a 	and	r2,r3,r2
   852ec:	1023883a 	mov	r17,r2
   852f0:	040002f4 	movhi	r16,11
   852f4:	84221b04 	addi	r16,r16,-30612
   852f8:	01405004 	movi	r5,320
   852fc:	008597c0 	call	8597c <__mulsi3>
   85300:	1405883a 	add	r2,r2,r16
   85304:	1485883a 	add	r2,r2,r18
   85308:	14400005 	stb	r17,0(r2)

                                data = sd_card_read(file_handle);
   8530c:	e13e130f 	ldh	r4,-1972(fp)
   85310:	0083fe00 	call	83fe0 <sd_card_read>
   85314:	e0be0e0d 	sth	r2,-1992(fp)
                                if ((data >> 8) != 0) printf("R eof reached: %d, %d\n", i, j);
   85318:	e0be0e0b 	ldhu	r2,-1992(fp)
   8531c:	1004d23a 	srli	r2,r2,8
   85320:	10bfffcc 	andi	r2,r2,65535
   85324:	1005003a 	cmpeq	r2,r2,zero
   85328:	1000051e 	bne	r2,zero,85340 <main+0x4fc>
   8532c:	01000274 	movhi	r4,9
   85330:	2108ae04 	addi	r4,r4,8888
   85334:	e17e1217 	ldw	r5,-1976(fp)
   85338:	e1be1117 	ldw	r6,-1980(fp)
   8533c:	00859b40 	call	859b4 <printf>
                                if (height < 0)
   85340:	d0a6c417 	ldw	r2,-25840(gp)
   85344:	1004403a 	cmpge	r2,r2,zero
   85348:	10000b1e 	bne	r2,zero,85378 <main+0x534>
                                	full_R[j + LINE_LEN/4] = data & 0xff;
   8534c:	e0be1117 	ldw	r2,-1980(fp)
   85350:	11002804 	addi	r4,r2,160
   85354:	e0be0e0b 	ldhu	r2,-1992(fp)
   85358:	1007883a 	mov	r3,r2
   8535c:	00bfffc4 	movi	r2,-1
   85360:	1884703a 	and	r2,r3,r2
   85364:	1007883a 	mov	r3,r2
   85368:	e0be1d44 	addi	r2,fp,-1931
   8536c:	1105883a 	add	r2,r2,r4
   85370:	10c00005 	stb	r3,0(r2)
   85374:	00000e06 	br	853b0 <main+0x56c>
                                else R_vals[i][j] = data & 0xFF;
   85378:	e13e1217 	ldw	r4,-1976(fp)
   8537c:	e4be1117 	ldw	r18,-1980(fp)
   85380:	e0be0e0b 	ldhu	r2,-1992(fp)
   85384:	1007883a 	mov	r3,r2
   85388:	00bfffc4 	movi	r2,-1
   8538c:	1884703a 	and	r2,r3,r2
   85390:	1023883a 	mov	r17,r2
   85394:	04000334 	movhi	r16,12
   85398:	842d1b04 	addi	r16,r16,-19348
   8539c:	01405004 	movi	r5,320
   853a0:	008597c0 	call	8597c <__mulsi3>
   853a4:	1405883a 	add	r2,r2,r16
   853a8:	1485883a 	add	r2,r2,r18
   853ac:	14400005 	stb	r17,0(r2)
                       LTC_Write_Image_Line(full_R,full_G,full_B);


                        for (i = 0; i < NUM_LINES/2; i++) {
                            IOWR(LED_RED_O_BASE, 0, i);
                            for (j = 0; j < LINE_LEN/2; j++) {
   853b0:	e0be1117 	ldw	r2,-1980(fp)
   853b4:	10800044 	addi	r2,r2,1
   853b8:	e0be1115 	stw	r2,-1980(fp)
   853bc:	e0be1117 	ldw	r2,-1980(fp)
   853c0:	10805010 	cmplti	r2,r2,320
   853c4:	103f7f1e 	bne	r2,zero,851c4 <main+0x380>
                                if ((data >> 8) != 0) printf("R eof reached: %d, %d\n", i, j);
                                if (height < 0)
                                	full_R[j + LINE_LEN/4] = data & 0xff;
                                else R_vals[i][j] = data & 0xFF;
                            }
                            if (height < 0)
   853c8:	d0a6c417 	ldw	r2,-25840(gp)
   853cc:	1004403a 	cmpge	r2,r2,zero
   853d0:	1000041e 	bne	r2,zero,853e4 <main+0x5a0>
                            	{
                            	LTC_Write_Image_Line(full_R, full_G, full_B);
   853d4:	e13e1d44 	addi	r4,fp,-1931
   853d8:	e17ebd44 	addi	r5,fp,-1291
   853dc:	e1bf5d44 	addi	r6,fp,-651
   853e0:	00804a00 	call	804a0 <LTC_Write_Image_Line>
                       full_R[i] = full_G[i] = full_B[i] = 0;
                    for (i = 0; i < NUM_LINES/4; i++)
                       LTC_Write_Image_Line(full_R,full_G,full_B);


                        for (i = 0; i < NUM_LINES/2; i++) {
   853e4:	e0be1217 	ldw	r2,-1976(fp)
   853e8:	10800044 	addi	r2,r2,1
   853ec:	e0be1215 	stw	r2,-1976(fp)
   853f0:	e0be1217 	ldw	r2,-1976(fp)
   853f4:	10803c10 	cmplti	r2,r2,240
   853f8:	103f6c1e 	bne	r2,zero,851ac <main+0x368>
                            	LTC_Write_Image_Line(full_R, full_G, full_B);
                            	}
                        }


                        if (height > 0)
   853fc:	d0a6c417 	ldw	r2,-25840(gp)
   85400:	10800050 	cmplti	r2,r2,1
   85404:	10003f1e 	bne	r2,zero,85504 <main+0x6c0>
                            for (i = NUM_LINES/2 - 1; i >= 0; i--) {
   85408:	00803bc4 	movi	r2,239
   8540c:	e0be1215 	stw	r2,-1976(fp)
   85410:	00003906 	br	854f8 <main+0x6b4>
                            	//inverted image
                               for (j = 0; j < LINE_LEN/2; j++) {
   85414:	e03e1115 	stw	zero,-1980(fp)
   85418:	00002d06 	br	854d0 <main+0x68c>
                                  full_R[j + LINE_LEN/4] = R_vals[i][j];
   8541c:	e0be1117 	ldw	r2,-1980(fp)
   85420:	14802804 	addi	r18,r2,160
   85424:	e13e1217 	ldw	r4,-1976(fp)
   85428:	e47e1117 	ldw	r17,-1980(fp)
   8542c:	04000334 	movhi	r16,12
   85430:	842d1b04 	addi	r16,r16,-19348
   85434:	01405004 	movi	r5,320
   85438:	008597c0 	call	8597c <__mulsi3>
   8543c:	1405883a 	add	r2,r2,r16
   85440:	1445883a 	add	r2,r2,r17
   85444:	10c00003 	ldbu	r3,0(r2)
   85448:	e0be1d44 	addi	r2,fp,-1931
   8544c:	1485883a 	add	r2,r2,r18
   85450:	10c00005 	stb	r3,0(r2)
                                  full_G[j + LINE_LEN/4] = G_vals[i][j];
   85454:	e0be1117 	ldw	r2,-1980(fp)
   85458:	14802804 	addi	r18,r2,160
   8545c:	e13e1217 	ldw	r4,-1976(fp)
   85460:	e47e1117 	ldw	r17,-1980(fp)
   85464:	040002f4 	movhi	r16,11
   85468:	84221b04 	addi	r16,r16,-30612
   8546c:	01405004 	movi	r5,320
   85470:	008597c0 	call	8597c <__mulsi3>
   85474:	1405883a 	add	r2,r2,r16
   85478:	1445883a 	add	r2,r2,r17
   8547c:	10c00003 	ldbu	r3,0(r2)
   85480:	e0bebd44 	addi	r2,fp,-1291
   85484:	1485883a 	add	r2,r2,r18
   85488:	10c00005 	stb	r3,0(r2)
                                  full_B[j + LINE_LEN/4] = B_vals[i][j];
   8548c:	e0be1117 	ldw	r2,-1980(fp)
   85490:	14802804 	addi	r18,r2,160
   85494:	e13e1217 	ldw	r4,-1976(fp)
   85498:	e47e1117 	ldw	r17,-1980(fp)
   8549c:	04000274 	movhi	r16,9
   854a0:	84171b04 	addi	r16,r16,23660
   854a4:	01405004 	movi	r5,320
   854a8:	008597c0 	call	8597c <__mulsi3>
   854ac:	1405883a 	add	r2,r2,r16
   854b0:	1445883a 	add	r2,r2,r17
   854b4:	10c00003 	ldbu	r3,0(r2)
   854b8:	e0bf5d44 	addi	r2,fp,-651
   854bc:	1485883a 	add	r2,r2,r18
   854c0:	10c00005 	stb	r3,0(r2)


                        if (height > 0)
                            for (i = NUM_LINES/2 - 1; i >= 0; i--) {
                            	//inverted image
                               for (j = 0; j < LINE_LEN/2; j++) {
   854c4:	e0be1117 	ldw	r2,-1980(fp)
   854c8:	10800044 	addi	r2,r2,1
   854cc:	e0be1115 	stw	r2,-1980(fp)
   854d0:	e0be1117 	ldw	r2,-1980(fp)
   854d4:	10805010 	cmplti	r2,r2,320
   854d8:	103fd01e 	bne	r2,zero,8541c <main+0x5d8>
                                  full_R[j + LINE_LEN/4] = R_vals[i][j];
                                  full_G[j + LINE_LEN/4] = G_vals[i][j];
                                  full_B[j + LINE_LEN/4] = B_vals[i][j];
                               }
                               LTC_Write_Image_Line(full_R, full_G, full_B);
   854dc:	e13e1d44 	addi	r4,fp,-1931
   854e0:	e17ebd44 	addi	r5,fp,-1291
   854e4:	e1bf5d44 	addi	r6,fp,-651
   854e8:	00804a00 	call	804a0 <LTC_Write_Image_Line>
                            	}
                        }


                        if (height > 0)
                            for (i = NUM_LINES/2 - 1; i >= 0; i--) {
   854ec:	e0be1217 	ldw	r2,-1976(fp)
   854f0:	10bfffc4 	addi	r2,r2,-1
   854f4:	e0be1215 	stw	r2,-1976(fp)
   854f8:	e0be1217 	ldw	r2,-1976(fp)
   854fc:	1004403a 	cmpge	r2,r2,zero
   85500:	103fc41e 	bne	r2,zero,85414 <main+0x5d0>
                               }
                               LTC_Write_Image_Line(full_R, full_G, full_B);
    			            }


                        for (i = 0; i < LINE_LEN; i++)
   85504:	e03e1215 	stw	zero,-1976(fp)
   85508:	00001506 	br	85560 <main+0x71c>
                            full_R[i] = full_G[i] = full_B[i] = 0;
   8550c:	e17e1217 	ldw	r5,-1976(fp)
   85510:	e13e1217 	ldw	r4,-1976(fp)
   85514:	e0fe1217 	ldw	r3,-1976(fp)
   85518:	e0bf5d44 	addi	r2,fp,-651
   8551c:	10c5883a 	add	r2,r2,r3
   85520:	10000005 	stb	zero,0(r2)
   85524:	e0bf5d44 	addi	r2,fp,-651
   85528:	10c5883a 	add	r2,r2,r3
   8552c:	10c00003 	ldbu	r3,0(r2)
   85530:	e0bebd44 	addi	r2,fp,-1291
   85534:	1105883a 	add	r2,r2,r4
   85538:	10c00005 	stb	r3,0(r2)
   8553c:	e0bebd44 	addi	r2,fp,-1291
   85540:	1105883a 	add	r2,r2,r4
   85544:	10c00003 	ldbu	r3,0(r2)
   85548:	e0be1d44 	addi	r2,fp,-1931
   8554c:	1145883a 	add	r2,r2,r5
   85550:	10c00005 	stb	r3,0(r2)
                               }
                               LTC_Write_Image_Line(full_R, full_G, full_B);
    			            }


                        for (i = 0; i < LINE_LEN; i++)
   85554:	e0be1217 	ldw	r2,-1976(fp)
   85558:	10800044 	addi	r2,r2,1
   8555c:	e0be1215 	stw	r2,-1976(fp)
   85560:	e0be1217 	ldw	r2,-1976(fp)
   85564:	1080a010 	cmplti	r2,r2,640
   85568:	103fe81e 	bne	r2,zero,8550c <main+0x6c8>
                            full_R[i] = full_G[i] = full_B[i] = 0;
                          for (i = 0; i < NUM_LINES/4; i++)
   8556c:	e03e1215 	stw	zero,-1976(fp)
   85570:	00000706 	br	85590 <main+0x74c>
                            LTC_Write_Image_Line(full_R,full_G,full_B);
   85574:	e13e1d44 	addi	r4,fp,-1931
   85578:	e17ebd44 	addi	r5,fp,-1291
   8557c:	e1bf5d44 	addi	r6,fp,-651
   85580:	00804a00 	call	804a0 <LTC_Write_Image_Line>
    			            }


                        for (i = 0; i < LINE_LEN; i++)
                            full_R[i] = full_G[i] = full_B[i] = 0;
                          for (i = 0; i < NUM_LINES/4; i++)
   85584:	e0be1217 	ldw	r2,-1976(fp)
   85588:	10800044 	addi	r2,r2,1
   8558c:	e0be1215 	stw	r2,-1976(fp)
   85590:	e0be1217 	ldw	r2,-1976(fp)
   85594:	10801e10 	cmplti	r2,r2,120
   85598:	103ff61e 	bne	r2,zero,85574 <main+0x730>
                            LTC_Write_Image_Line(full_R,full_G,full_B);

                        LTC_Switch_HW_Mode();
   8559c:	00803000 	call	80300 <LTC_Switch_HW_Mode>
		    }

                    sd_card_fclose(file_handle);
   855a0:	e13e130f 	ldh	r4,-1972(fp)
   855a4:	008494c0 	call	8494c <sd_card_fclose>

                }
                
                PB_irq_data.load_img_flag = 0;
   855a8:	e03e1815 	stw	zero,-1952(fp)
            }
            
            if (PB_irq_data.save_img_flag == 1) {
   855ac:	e0be1917 	ldw	r2,-1948(fp)
   855b0:	10800058 	cmpnei	r2,r2,1
   855b4:	103e591e 	bne	r2,zero,84f1c <main+0xd8>
                // stop the camera
                IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CAMERA_BASE, 1, 0x8);
   855b8:	00c00434 	movhi	r3,16
   855bc:	18d50104 	addi	r3,r3,21508
   855c0:	00800204 	movi	r2,8
   855c4:	18800035 	stwio	r2,0(r3)
                
                sprintf(filename, "file%d.bmp", file_number++);
   855c8:	e1be0d17 	ldw	r6,-1996(fp)
   855cc:	e0be0d17 	ldw	r2,-1996(fp)
   855d0:	10800044 	addi	r2,r2,1
   855d4:	e0be0d15 	stw	r2,-1996(fp)
   855d8:	e13e1a04 	addi	r4,fp,-1944
   855dc:	01400274 	movhi	r5,9
   855e0:	2948b404 	addi	r5,r5,8912
   855e4:	0085ae00 	call	85ae0 <sprintf>
                
                while ((file_handle = sd_card_fopen(filename, 1)) < 0) {
   855e8:	00000806 	br	8560c <main+0x7c8>
                    sprintf(filename, "file%d.bmp", file_number++);
   855ec:	e1be0d17 	ldw	r6,-1996(fp)
   855f0:	e0be0d17 	ldw	r2,-1996(fp)
   855f4:	10800044 	addi	r2,r2,1
   855f8:	e0be0d15 	stw	r2,-1996(fp)
   855fc:	e13e1a04 	addi	r4,fp,-1944
   85600:	01400274 	movhi	r5,9
   85604:	2948b404 	addi	r5,r5,8912
   85608:	0085ae00 	call	85ae0 <sprintf>
                // stop the camera
                IOWR(NIOS_LCD_CAMERA_COMPONENT_0_CAMERA_BASE, 1, 0x8);
                
                sprintf(filename, "file%d.bmp", file_number++);
                
                while ((file_handle = sd_card_fopen(filename, 1)) < 0) {
   8560c:	e13e1a04 	addi	r4,fp,-1944
   85610:	01400044 	movi	r5,1
   85614:	0083b1c0 	call	83b1c <sd_card_fopen>
   85618:	e0be130d 	sth	r2,-1972(fp)
   8561c:	e0be130f 	ldh	r2,-1972(fp)
   85620:	1004803a 	cmplt	r2,r2,zero
   85624:	103ff11e 	bne	r2,zero,855ec <main+0x7a8>
                    sprintf(filename, "file%d.bmp", file_number++);
                }
                
                printf("Saving image to file (%s)...\n", filename);
   85628:	e17e1a04 	addi	r5,fp,-1944
   8562c:	01000274 	movhi	r4,9
   85630:	2108b704 	addi	r4,r4,8924
   85634:	00859b40 	call	859b4 <printf>
                LTC_Switch_Nios_Mode(0);
   85638:	0009883a 	mov	r4,zero
   8563c:	00801f00 	call	801f0 <LTC_Switch_Nios_Mode>

				for (i = 0, status = true; i < 54; i++) {
   85640:	e03e1215 	stw	zero,-1976(fp)
   85644:	00800044 	movi	r2,1
   85648:	e0be0f15 	stw	r2,-1988(fp)
   8564c:	00001e06 	br	856c8 <main+0x884>
					status = status && sd_card_write(file_handle, bmp_header[i]);
   85650:	e0be0f17 	ldw	r2,-1988(fp)
   85654:	1005003a 	cmpeq	r2,r2,zero
   85658:	10000f1e 	bne	r2,zero,85698 <main+0x854>
   8565c:	e13e130f 	ldh	r4,-1972(fp)
   85660:	e0fe1217 	ldw	r3,-1976(fp)
   85664:	00800274 	movhi	r2,9
   85668:	10884204 	addi	r2,r2,8456
   8566c:	10c5883a 	add	r2,r2,r3
   85670:	10800003 	ldbu	r2,0(r2)
   85674:	11403fcc 	andi	r5,r2,255
   85678:	2940201c 	xori	r5,r5,128
   8567c:	297fe004 	addi	r5,r5,-128
   85680:	008435c0 	call	8435c <sd_card_write>
   85684:	1005003a 	cmpeq	r2,r2,zero
   85688:	1000031e 	bne	r2,zero,85698 <main+0x854>
   8568c:	00800044 	movi	r2,1
   85690:	e0bffe15 	stw	r2,-8(fp)
   85694:	00000106 	br	8569c <main+0x858>
   85698:	e03ffe15 	stw	zero,-8(fp)
   8569c:	e0fffe17 	ldw	r3,-8(fp)
   856a0:	e0fe0f15 	stw	r3,-1988(fp)
				if (!status) printf("Write fail in header!\n");
   856a4:	e0be0f17 	ldw	r2,-1988(fp)
   856a8:	1004c03a 	cmpne	r2,r2,zero
   856ac:	1000031e 	bne	r2,zero,856bc <main+0x878>
   856b0:	01000274 	movhi	r4,9
   856b4:	2108bf04 	addi	r4,r4,8956
   856b8:	0085acc0 	call	85acc <puts>
                }
                
                printf("Saving image to file (%s)...\n", filename);
                LTC_Switch_Nios_Mode(0);

				for (i = 0, status = true; i < 54; i++) {
   856bc:	e0be1217 	ldw	r2,-1976(fp)
   856c0:	10800044 	addi	r2,r2,1
   856c4:	e0be1215 	stw	r2,-1976(fp)
   856c8:	e0be1217 	ldw	r2,-1976(fp)
   856cc:	10800d90 	cmplti	r2,r2,54
   856d0:	103fdf1e 	bne	r2,zero,85650 <main+0x80c>
                status = sd_card_write(file_handle, '5');
                status = sd_card_write(file_handle, '5');
                status = sd_card_write(file_handle, '\n');
               */

                for (i = 0; i < NUM_LINES / 2; i++) {
   856d4:	e03e1215 	stw	zero,-1976(fp)
   856d8:	00004d06 	br	85810 <main+0x9cc>
                    IOWR(LED_RED_O_BASE, 0, i);
   856dc:	00c00434 	movhi	r3,16
   856e0:	18d52404 	addi	r3,r3,21648
   856e4:	e0be1217 	ldw	r2,-1976(fp)
   856e8:	18800035 	stwio	r2,0(r3)
                    LTC_Read_Image_Line(full_R, full_G, full_B);
   856ec:	e13e1d44 	addi	r4,fp,-1931
   856f0:	e17ebd44 	addi	r5,fp,-1291
   856f4:	e1bf5d44 	addi	r6,fp,-651
   856f8:	00803d80 	call	803d8 <LTC_Read_Image_Line>
                    for (j = 0; j < LINE_LEN; j+=2) {  // now so odd is removed, BGR order
   856fc:	e03e1115 	stw	zero,-1980(fp)
   85700:	00003906 	br	857e8 <main+0x9a4>
                        status = sd_card_write(file_handle, full_B[j]);
   85704:	e13e130f 	ldh	r4,-1972(fp)
   85708:	e0fe1117 	ldw	r3,-1980(fp)
   8570c:	e0bf5d44 	addi	r2,fp,-651
   85710:	10c5883a 	add	r2,r2,r3
   85714:	10800003 	ldbu	r2,0(r2)
   85718:	11403fcc 	andi	r5,r2,255
   8571c:	2940201c 	xori	r5,r5,128
   85720:	297fe004 	addi	r5,r5,-128
   85724:	008435c0 	call	8435c <sd_card_write>
   85728:	e0be0f15 	stw	r2,-1988(fp)
                        if (!status) printf("Write fail: B %d %d\n", i, j);
   8572c:	e0be0f17 	ldw	r2,-1988(fp)
   85730:	1004c03a 	cmpne	r2,r2,zero
   85734:	1000051e 	bne	r2,zero,8574c <main+0x908>
   85738:	01000274 	movhi	r4,9
   8573c:	2108c504 	addi	r4,r4,8980
   85740:	e17e1217 	ldw	r5,-1976(fp)
   85744:	e1be1117 	ldw	r6,-1980(fp)
   85748:	00859b40 	call	859b4 <printf>
                        status = sd_card_write(file_handle, full_G[j]);
   8574c:	e13e130f 	ldh	r4,-1972(fp)
   85750:	e0fe1117 	ldw	r3,-1980(fp)
   85754:	e0bebd44 	addi	r2,fp,-1291
   85758:	10c5883a 	add	r2,r2,r3
   8575c:	10800003 	ldbu	r2,0(r2)
   85760:	11403fcc 	andi	r5,r2,255
   85764:	2940201c 	xori	r5,r5,128
   85768:	297fe004 	addi	r5,r5,-128
   8576c:	008435c0 	call	8435c <sd_card_write>
   85770:	e0be0f15 	stw	r2,-1988(fp)
                        if (!status) printf("Write fail: G %d %d\n", i, j);
   85774:	e0be0f17 	ldw	r2,-1988(fp)
   85778:	1004c03a 	cmpne	r2,r2,zero
   8577c:	1000051e 	bne	r2,zero,85794 <main+0x950>
   85780:	01000274 	movhi	r4,9
   85784:	2108cb04 	addi	r4,r4,9004
   85788:	e17e1217 	ldw	r5,-1976(fp)
   8578c:	e1be1117 	ldw	r6,-1980(fp)
   85790:	00859b40 	call	859b4 <printf>
                        status = sd_card_write(file_handle, full_R[j]);
   85794:	e13e130f 	ldh	r4,-1972(fp)
   85798:	e0fe1117 	ldw	r3,-1980(fp)
   8579c:	e0be1d44 	addi	r2,fp,-1931
   857a0:	10c5883a 	add	r2,r2,r3
   857a4:	10800003 	ldbu	r2,0(r2)
   857a8:	11403fcc 	andi	r5,r2,255
   857ac:	2940201c 	xori	r5,r5,128
   857b0:	297fe004 	addi	r5,r5,-128
   857b4:	008435c0 	call	8435c <sd_card_write>
   857b8:	e0be0f15 	stw	r2,-1988(fp)
                        if (!status) printf("Write fail: R %d %d\n", i, j);
   857bc:	e0be0f17 	ldw	r2,-1988(fp)
   857c0:	1004c03a 	cmpne	r2,r2,zero
   857c4:	1000051e 	bne	r2,zero,857dc <main+0x998>
   857c8:	01000274 	movhi	r4,9
   857cc:	2108d104 	addi	r4,r4,9028
   857d0:	e17e1217 	ldw	r5,-1976(fp)
   857d4:	e1be1117 	ldw	r6,-1980(fp)
   857d8:	00859b40 	call	859b4 <printf>
               */

                for (i = 0; i < NUM_LINES / 2; i++) {
                    IOWR(LED_RED_O_BASE, 0, i);
                    LTC_Read_Image_Line(full_R, full_G, full_B);
                    for (j = 0; j < LINE_LEN; j+=2) {  // now so odd is removed, BGR order
   857dc:	e0be1117 	ldw	r2,-1980(fp)
   857e0:	10800084 	addi	r2,r2,2
   857e4:	e0be1115 	stw	r2,-1980(fp)
   857e8:	e0be1117 	ldw	r2,-1980(fp)
   857ec:	1080a010 	cmplti	r2,r2,640
   857f0:	103fc41e 	bne	r2,zero,85704 <main+0x8c0>
                        status = sd_card_write(file_handle, full_G[j]);
                        if (!status) printf("Write fail: G %d %d\n", i, j);
                        status = sd_card_write(file_handle, full_R[j]);
                        if (!status) printf("Write fail: R %d %d\n", i, j);
                    }
                    LTC_Read_Image_Line(full_R, full_G, full_B);
   857f4:	e13e1d44 	addi	r4,fp,-1931
   857f8:	e17ebd44 	addi	r5,fp,-1291
   857fc:	e1bf5d44 	addi	r6,fp,-651
   85800:	00803d80 	call	803d8 <LTC_Read_Image_Line>
                status = sd_card_write(file_handle, '5');
                status = sd_card_write(file_handle, '5');
                status = sd_card_write(file_handle, '\n');
               */

                for (i = 0; i < NUM_LINES / 2; i++) {
   85804:	e0be1217 	ldw	r2,-1976(fp)
   85808:	10800044 	addi	r2,r2,1
   8580c:	e0be1215 	stw	r2,-1976(fp)
   85810:	e0be1217 	ldw	r2,-1976(fp)
   85814:	10803c10 	cmplti	r2,r2,240
   85818:	103fb01e 	bne	r2,zero,856dc <main+0x898>
                        if (!status) printf("Write fail: R %d %d\n", i, j);
                    }
                    LTC_Read_Image_Line(full_R, full_G, full_B);
                }

                LTC_Switch_HW_Mode();
   8581c:	00803000 	call	80300 <LTC_Switch_HW_Mode>

                sd_card_fclose(file_handle);
   85820:	e13e130f 	ldh	r4,-1972(fp)
   85824:	008494c0 	call	8494c <sd_card_fclose>

                PB_irq_data.save_img_flag = 0;
   85828:	e03e1915 	stw	zero,-1948(fp)
            }
        }
   8582c:	003dbb06 	br	84f1c <main+0xd8>

00085830 <udivmodsi4>:
   85830:	29001b2e 	bgeu	r5,r4,858a0 <udivmodsi4+0x70>
   85834:	28001a16 	blt	r5,zero,858a0 <udivmodsi4+0x70>
   85838:	00800044 	movi	r2,1
   8583c:	0007883a 	mov	r3,zero
   85840:	01c007c4 	movi	r7,31
   85844:	00000306 	br	85854 <udivmodsi4+0x24>
   85848:	19c01326 	beq	r3,r7,85898 <udivmodsi4+0x68>
   8584c:	18c00044 	addi	r3,r3,1
   85850:	28000416 	blt	r5,zero,85864 <udivmodsi4+0x34>
   85854:	294b883a 	add	r5,r5,r5
   85858:	1085883a 	add	r2,r2,r2
   8585c:	293ffa36 	bltu	r5,r4,85848 <udivmodsi4+0x18>
   85860:	10000d26 	beq	r2,zero,85898 <udivmodsi4+0x68>
   85864:	0007883a 	mov	r3,zero
   85868:	21400236 	bltu	r4,r5,85874 <udivmodsi4+0x44>
   8586c:	2149c83a 	sub	r4,r4,r5
   85870:	1886b03a 	or	r3,r3,r2
   85874:	1004d07a 	srli	r2,r2,1
   85878:	280ad07a 	srli	r5,r5,1
   8587c:	103ffa1e 	bne	r2,zero,85868 <udivmodsi4+0x38>
   85880:	30000226 	beq	r6,zero,8588c <udivmodsi4+0x5c>
   85884:	2005883a 	mov	r2,r4
   85888:	f800283a 	ret
   8588c:	1809883a 	mov	r4,r3
   85890:	2005883a 	mov	r2,r4
   85894:	f800283a 	ret
   85898:	0007883a 	mov	r3,zero
   8589c:	003ff806 	br	85880 <udivmodsi4+0x50>
   858a0:	00800044 	movi	r2,1
   858a4:	0007883a 	mov	r3,zero
   858a8:	003fef06 	br	85868 <udivmodsi4+0x38>

000858ac <__divsi3>:
   858ac:	defffe04 	addi	sp,sp,-8
   858b0:	dc000015 	stw	r16,0(sp)
   858b4:	dfc00115 	stw	ra,4(sp)
   858b8:	0021883a 	mov	r16,zero
   858bc:	20000c16 	blt	r4,zero,858f0 <__divsi3+0x44>
   858c0:	000d883a 	mov	r6,zero
   858c4:	28000e16 	blt	r5,zero,85900 <__divsi3+0x54>
   858c8:	00858300 	call	85830 <udivmodsi4>
   858cc:	1007883a 	mov	r3,r2
   858d0:	8005003a 	cmpeq	r2,r16,zero
   858d4:	1000011e 	bne	r2,zero,858dc <__divsi3+0x30>
   858d8:	00c7c83a 	sub	r3,zero,r3
   858dc:	1805883a 	mov	r2,r3
   858e0:	dfc00117 	ldw	ra,4(sp)
   858e4:	dc000017 	ldw	r16,0(sp)
   858e8:	dec00204 	addi	sp,sp,8
   858ec:	f800283a 	ret
   858f0:	0109c83a 	sub	r4,zero,r4
   858f4:	04000044 	movi	r16,1
   858f8:	000d883a 	mov	r6,zero
   858fc:	283ff20e 	bge	r5,zero,858c8 <__divsi3+0x1c>
   85900:	014bc83a 	sub	r5,zero,r5
   85904:	8021003a 	cmpeq	r16,r16,zero
   85908:	003fef06 	br	858c8 <__divsi3+0x1c>

0008590c <__modsi3>:
   8590c:	deffff04 	addi	sp,sp,-4
   85910:	dfc00015 	stw	ra,0(sp)
   85914:	01800044 	movi	r6,1
   85918:	2807883a 	mov	r3,r5
   8591c:	20000416 	blt	r4,zero,85930 <__modsi3+0x24>
   85920:	28000c16 	blt	r5,zero,85954 <__modsi3+0x48>
   85924:	dfc00017 	ldw	ra,0(sp)
   85928:	dec00104 	addi	sp,sp,4
   8592c:	00858301 	jmpi	85830 <udivmodsi4>
   85930:	0109c83a 	sub	r4,zero,r4
   85934:	28000b16 	blt	r5,zero,85964 <__modsi3+0x58>
   85938:	180b883a 	mov	r5,r3
   8593c:	01800044 	movi	r6,1
   85940:	00858300 	call	85830 <udivmodsi4>
   85944:	0085c83a 	sub	r2,zero,r2
   85948:	dfc00017 	ldw	ra,0(sp)
   8594c:	dec00104 	addi	sp,sp,4
   85950:	f800283a 	ret
   85954:	014bc83a 	sub	r5,zero,r5
   85958:	dfc00017 	ldw	ra,0(sp)
   8595c:	dec00104 	addi	sp,sp,4
   85960:	00858301 	jmpi	85830 <udivmodsi4>
   85964:	0147c83a 	sub	r3,zero,r5
   85968:	003ff306 	br	85938 <__modsi3+0x2c>

0008596c <__udivsi3>:
   8596c:	000d883a 	mov	r6,zero
   85970:	00858301 	jmpi	85830 <udivmodsi4>

00085974 <__umodsi3>:
   85974:	01800044 	movi	r6,1
   85978:	00858301 	jmpi	85830 <udivmodsi4>

0008597c <__mulsi3>:
   8597c:	20000a26 	beq	r4,zero,859a8 <__mulsi3+0x2c>
   85980:	0007883a 	mov	r3,zero
   85984:	2080004c 	andi	r2,r4,1
   85988:	1005003a 	cmpeq	r2,r2,zero
   8598c:	2008d07a 	srli	r4,r4,1
   85990:	1000011e 	bne	r2,zero,85998 <__mulsi3+0x1c>
   85994:	1947883a 	add	r3,r3,r5
   85998:	294b883a 	add	r5,r5,r5
   8599c:	203ff91e 	bne	r4,zero,85984 <__mulsi3+0x8>
   859a0:	1805883a 	mov	r2,r3
   859a4:	f800283a 	ret
   859a8:	0007883a 	mov	r3,zero
   859ac:	1805883a 	mov	r2,r3
   859b0:	f800283a 	ret

000859b4 <printf>:
   859b4:	defffb04 	addi	sp,sp,-20
   859b8:	dfc00115 	stw	ra,4(sp)
   859bc:	d9400215 	stw	r5,8(sp)
   859c0:	d9800315 	stw	r6,12(sp)
   859c4:	d9c00415 	stw	r7,16(sp)
   859c8:	00800274 	movhi	r2,9
   859cc:	10904104 	addi	r2,r2,16644
   859d0:	10c00017 	ldw	r3,0(r2)
   859d4:	200b883a 	mov	r5,r4
   859d8:	d8800204 	addi	r2,sp,8
   859dc:	19000217 	ldw	r4,8(r3)
   859e0:	100d883a 	mov	r6,r2
   859e4:	d8800015 	stw	r2,0(sp)
   859e8:	0087b440 	call	87b44 <__vfprintf_internal>
   859ec:	dfc00117 	ldw	ra,4(sp)
   859f0:	dec00504 	addi	sp,sp,20
   859f4:	f800283a 	ret

000859f8 <_printf_r>:
   859f8:	defffc04 	addi	sp,sp,-16
   859fc:	dfc00115 	stw	ra,4(sp)
   85a00:	d9800215 	stw	r6,8(sp)
   85a04:	d9c00315 	stw	r7,12(sp)
   85a08:	280d883a 	mov	r6,r5
   85a0c:	21400217 	ldw	r5,8(r4)
   85a10:	d8c00204 	addi	r3,sp,8
   85a14:	180f883a 	mov	r7,r3
   85a18:	d8c00015 	stw	r3,0(sp)
   85a1c:	0085c800 	call	85c80 <___vfprintf_internal_r>
   85a20:	dfc00117 	ldw	ra,4(sp)
   85a24:	dec00404 	addi	sp,sp,16
   85a28:	f800283a 	ret

00085a2c <_puts_r>:
   85a2c:	defff604 	addi	sp,sp,-40
   85a30:	dc400715 	stw	r17,28(sp)
   85a34:	2023883a 	mov	r17,r4
   85a38:	2809883a 	mov	r4,r5
   85a3c:	dfc00915 	stw	ra,36(sp)
   85a40:	dcc00815 	stw	r19,32(sp)
   85a44:	2827883a 	mov	r19,r5
   85a48:	0085bb40 	call	85bb4 <strlen>
   85a4c:	89400217 	ldw	r5,8(r17)
   85a50:	00c00274 	movhi	r3,9
   85a54:	18c8d704 	addi	r3,r3,9052
   85a58:	01c00044 	movi	r7,1
   85a5c:	12000044 	addi	r8,r2,1
   85a60:	d8c00515 	stw	r3,20(sp)
   85a64:	d9c00615 	stw	r7,24(sp)
   85a68:	d8c00304 	addi	r3,sp,12
   85a6c:	01c00084 	movi	r7,2
   85a70:	8809883a 	mov	r4,r17
   85a74:	d80d883a 	mov	r6,sp
   85a78:	d8c00015 	stw	r3,0(sp)
   85a7c:	dcc00315 	stw	r19,12(sp)
   85a80:	da000215 	stw	r8,8(sp)
   85a84:	d9c00115 	stw	r7,4(sp)
   85a88:	d8800415 	stw	r2,16(sp)
   85a8c:	0089e000 	call	89e00 <__sfvwrite_r>
   85a90:	00ffffc4 	movi	r3,-1
   85a94:	10000626 	beq	r2,zero,85ab0 <_puts_r+0x84>
   85a98:	1805883a 	mov	r2,r3
   85a9c:	dfc00917 	ldw	ra,36(sp)
   85aa0:	dcc00817 	ldw	r19,32(sp)
   85aa4:	dc400717 	ldw	r17,28(sp)
   85aa8:	dec00a04 	addi	sp,sp,40
   85aac:	f800283a 	ret
   85ab0:	00c00284 	movi	r3,10
   85ab4:	1805883a 	mov	r2,r3
   85ab8:	dfc00917 	ldw	ra,36(sp)
   85abc:	dcc00817 	ldw	r19,32(sp)
   85ac0:	dc400717 	ldw	r17,28(sp)
   85ac4:	dec00a04 	addi	sp,sp,40
   85ac8:	f800283a 	ret

00085acc <puts>:
   85acc:	00800274 	movhi	r2,9
   85ad0:	10904104 	addi	r2,r2,16644
   85ad4:	200b883a 	mov	r5,r4
   85ad8:	11000017 	ldw	r4,0(r2)
   85adc:	0085a2c1 	jmpi	85a2c <_puts_r>

00085ae0 <sprintf>:
   85ae0:	deffe504 	addi	sp,sp,-108
   85ae4:	2013883a 	mov	r9,r4
   85ae8:	dfc01815 	stw	ra,96(sp)
   85aec:	d9801915 	stw	r6,100(sp)
   85af0:	d9c01a15 	stw	r7,104(sp)
   85af4:	d8801904 	addi	r2,sp,100
   85af8:	d8800015 	stw	r2,0(sp)
   85afc:	00800274 	movhi	r2,9
   85b00:	10904104 	addi	r2,r2,16644
   85b04:	11000017 	ldw	r4,0(r2)
   85b08:	d9c00017 	ldw	r7,0(sp)
   85b0c:	00808204 	movi	r2,520
   85b10:	00e00034 	movhi	r3,32768
   85b14:	18ffffc4 	addi	r3,r3,-1
   85b18:	280d883a 	mov	r6,r5
   85b1c:	d880040d 	sth	r2,16(sp)
   85b20:	d9400104 	addi	r5,sp,4
   85b24:	00bfffc4 	movi	r2,-1
   85b28:	d8c00615 	stw	r3,24(sp)
   85b2c:	d8c00315 	stw	r3,12(sp)
   85b30:	da400515 	stw	r9,20(sp)
   85b34:	d880048d 	sth	r2,18(sp)
   85b38:	da400115 	stw	r9,4(sp)
   85b3c:	0085c800 	call	85c80 <___vfprintf_internal_r>
   85b40:	d8c00117 	ldw	r3,4(sp)
   85b44:	18000005 	stb	zero,0(r3)
   85b48:	dfc01817 	ldw	ra,96(sp)
   85b4c:	dec01b04 	addi	sp,sp,108
   85b50:	f800283a 	ret

00085b54 <_sprintf_r>:
   85b54:	deffe604 	addi	sp,sp,-104
   85b58:	2813883a 	mov	r9,r5
   85b5c:	dfc01815 	stw	ra,96(sp)
   85b60:	d9c01915 	stw	r7,100(sp)
   85b64:	d8801904 	addi	r2,sp,100
   85b68:	d8800015 	stw	r2,0(sp)
   85b6c:	100f883a 	mov	r7,r2
   85b70:	00808204 	movi	r2,520
   85b74:	00e00034 	movhi	r3,32768
   85b78:	18ffffc4 	addi	r3,r3,-1
   85b7c:	d880040d 	sth	r2,16(sp)
   85b80:	d9400104 	addi	r5,sp,4
   85b84:	00bfffc4 	movi	r2,-1
   85b88:	d8c00615 	stw	r3,24(sp)
   85b8c:	d8c00315 	stw	r3,12(sp)
   85b90:	da400515 	stw	r9,20(sp)
   85b94:	d880048d 	sth	r2,18(sp)
   85b98:	da400115 	stw	r9,4(sp)
   85b9c:	0085c800 	call	85c80 <___vfprintf_internal_r>
   85ba0:	d8c00117 	ldw	r3,4(sp)
   85ba4:	18000005 	stb	zero,0(r3)
   85ba8:	dfc01817 	ldw	ra,96(sp)
   85bac:	dec01a04 	addi	sp,sp,104
   85bb0:	f800283a 	ret

00085bb4 <strlen>:
   85bb4:	208000cc 	andi	r2,r4,3
   85bb8:	2011883a 	mov	r8,r4
   85bbc:	1000161e 	bne	r2,zero,85c18 <strlen+0x64>
   85bc0:	20c00017 	ldw	r3,0(r4)
   85bc4:	017fbff4 	movhi	r5,65279
   85bc8:	297fbfc4 	addi	r5,r5,-257
   85bcc:	01e02074 	movhi	r7,32897
   85bd0:	39e02004 	addi	r7,r7,-32640
   85bd4:	1945883a 	add	r2,r3,r5
   85bd8:	11c4703a 	and	r2,r2,r7
   85bdc:	00c6303a 	nor	r3,zero,r3
   85be0:	1886703a 	and	r3,r3,r2
   85be4:	18000c1e 	bne	r3,zero,85c18 <strlen+0x64>
   85be8:	280d883a 	mov	r6,r5
   85bec:	380b883a 	mov	r5,r7
   85bf0:	21000104 	addi	r4,r4,4
   85bf4:	20800017 	ldw	r2,0(r4)
   85bf8:	1187883a 	add	r3,r2,r6
   85bfc:	1946703a 	and	r3,r3,r5
   85c00:	0084303a 	nor	r2,zero,r2
   85c04:	10c4703a 	and	r2,r2,r3
   85c08:	103ff926 	beq	r2,zero,85bf0 <strlen+0x3c>
   85c0c:	20800007 	ldb	r2,0(r4)
   85c10:	10000326 	beq	r2,zero,85c20 <strlen+0x6c>
   85c14:	21000044 	addi	r4,r4,1
   85c18:	20800007 	ldb	r2,0(r4)
   85c1c:	103ffd1e 	bne	r2,zero,85c14 <strlen+0x60>
   85c20:	2205c83a 	sub	r2,r4,r8
   85c24:	f800283a 	ret

00085c28 <__sprint_r>:
   85c28:	30800217 	ldw	r2,8(r6)
   85c2c:	defffe04 	addi	sp,sp,-8
   85c30:	dc000015 	stw	r16,0(sp)
   85c34:	dfc00115 	stw	ra,4(sp)
   85c38:	3021883a 	mov	r16,r6
   85c3c:	0007883a 	mov	r3,zero
   85c40:	1000061e 	bne	r2,zero,85c5c <__sprint_r+0x34>
   85c44:	1805883a 	mov	r2,r3
   85c48:	30000115 	stw	zero,4(r6)
   85c4c:	dfc00117 	ldw	ra,4(sp)
   85c50:	dc000017 	ldw	r16,0(sp)
   85c54:	dec00204 	addi	sp,sp,8
   85c58:	f800283a 	ret
   85c5c:	0089e000 	call	89e00 <__sfvwrite_r>
   85c60:	1007883a 	mov	r3,r2
   85c64:	1805883a 	mov	r2,r3
   85c68:	80000115 	stw	zero,4(r16)
   85c6c:	80000215 	stw	zero,8(r16)
   85c70:	dfc00117 	ldw	ra,4(sp)
   85c74:	dc000017 	ldw	r16,0(sp)
   85c78:	dec00204 	addi	sp,sp,8
   85c7c:	f800283a 	ret

00085c80 <___vfprintf_internal_r>:
   85c80:	defea404 	addi	sp,sp,-1392
   85c84:	dd815815 	stw	r22,1376(sp)
   85c88:	dc015215 	stw	r16,1352(sp)
   85c8c:	d9c15115 	stw	r7,1348(sp)
   85c90:	dfc15b15 	stw	ra,1388(sp)
   85c94:	df015a15 	stw	fp,1384(sp)
   85c98:	ddc15915 	stw	r23,1380(sp)
   85c9c:	dd415715 	stw	r21,1372(sp)
   85ca0:	dd015615 	stw	r20,1368(sp)
   85ca4:	dcc15515 	stw	r19,1364(sp)
   85ca8:	dc815415 	stw	r18,1360(sp)
   85cac:	dc415315 	stw	r17,1356(sp)
   85cb0:	282d883a 	mov	r22,r5
   85cb4:	3021883a 	mov	r16,r6
   85cb8:	d9014f15 	stw	r4,1340(sp)
   85cbc:	008a4240 	call	8a424 <_localeconv_r>
   85cc0:	10800017 	ldw	r2,0(r2)
   85cc4:	d9c15117 	ldw	r7,1348(sp)
   85cc8:	d8814915 	stw	r2,1316(sp)
   85ccc:	d8814f17 	ldw	r2,1340(sp)
   85cd0:	10000226 	beq	r2,zero,85cdc <___vfprintf_internal_r+0x5c>
   85cd4:	10800e17 	ldw	r2,56(r2)
   85cd8:	10020d26 	beq	r2,zero,86510 <___vfprintf_internal_r+0x890>
   85cdc:	b080030b 	ldhu	r2,12(r22)
   85ce0:	1080020c 	andi	r2,r2,8
   85ce4:	10020e26 	beq	r2,zero,86520 <___vfprintf_internal_r+0x8a0>
   85ce8:	b0800417 	ldw	r2,16(r22)
   85cec:	10020c26 	beq	r2,zero,86520 <___vfprintf_internal_r+0x8a0>
   85cf0:	b200030b 	ldhu	r8,12(r22)
   85cf4:	00800284 	movi	r2,10
   85cf8:	40c0068c 	andi	r3,r8,26
   85cfc:	18802f1e 	bne	r3,r2,85dbc <___vfprintf_internal_r+0x13c>
   85d00:	b080038f 	ldh	r2,14(r22)
   85d04:	10002d16 	blt	r2,zero,85dbc <___vfprintf_internal_r+0x13c>
   85d08:	b240038b 	ldhu	r9,14(r22)
   85d0c:	b2800717 	ldw	r10,28(r22)
   85d10:	b2c00917 	ldw	r11,36(r22)
   85d14:	d9014f17 	ldw	r4,1340(sp)
   85d18:	dc402904 	addi	r17,sp,164
   85d1c:	d8804004 	addi	r2,sp,256
   85d20:	00c10004 	movi	r3,1024
   85d24:	423fff4c 	andi	r8,r8,65533
   85d28:	800d883a 	mov	r6,r16
   85d2c:	880b883a 	mov	r5,r17
   85d30:	da002c0d 	sth	r8,176(sp)
   85d34:	da402c8d 	sth	r9,178(sp)
   85d38:	da803015 	stw	r10,192(sp)
   85d3c:	dac03215 	stw	r11,200(sp)
   85d40:	d8802d15 	stw	r2,180(sp)
   85d44:	d8c02e15 	stw	r3,184(sp)
   85d48:	d8802915 	stw	r2,164(sp)
   85d4c:	d8c02b15 	stw	r3,172(sp)
   85d50:	d8002f15 	stw	zero,188(sp)
   85d54:	0085c800 	call	85c80 <___vfprintf_internal_r>
   85d58:	d8814b15 	stw	r2,1324(sp)
   85d5c:	10000416 	blt	r2,zero,85d70 <___vfprintf_internal_r+0xf0>
   85d60:	d9014f17 	ldw	r4,1340(sp)
   85d64:	880b883a 	mov	r5,r17
   85d68:	008949c0 	call	8949c <_fflush_r>
   85d6c:	1002321e 	bne	r2,zero,86638 <___vfprintf_internal_r+0x9b8>
   85d70:	d8802c0b 	ldhu	r2,176(sp)
   85d74:	1080100c 	andi	r2,r2,64
   85d78:	10000326 	beq	r2,zero,85d88 <___vfprintf_internal_r+0x108>
   85d7c:	b080030b 	ldhu	r2,12(r22)
   85d80:	10801014 	ori	r2,r2,64
   85d84:	b080030d 	sth	r2,12(r22)
   85d88:	d8814b17 	ldw	r2,1324(sp)
   85d8c:	dfc15b17 	ldw	ra,1388(sp)
   85d90:	df015a17 	ldw	fp,1384(sp)
   85d94:	ddc15917 	ldw	r23,1380(sp)
   85d98:	dd815817 	ldw	r22,1376(sp)
   85d9c:	dd415717 	ldw	r21,1372(sp)
   85da0:	dd015617 	ldw	r20,1368(sp)
   85da4:	dcc15517 	ldw	r19,1364(sp)
   85da8:	dc815417 	ldw	r18,1360(sp)
   85dac:	dc415317 	ldw	r17,1356(sp)
   85db0:	dc015217 	ldw	r16,1352(sp)
   85db4:	dec15c04 	addi	sp,sp,1392
   85db8:	f800283a 	ret
   85dbc:	0005883a 	mov	r2,zero
   85dc0:	0007883a 	mov	r3,zero
   85dc4:	dd401904 	addi	r21,sp,100
   85dc8:	d8814215 	stw	r2,1288(sp)
   85dcc:	802f883a 	mov	r23,r16
   85dd0:	d8c14315 	stw	r3,1292(sp)
   85dd4:	d8014b15 	stw	zero,1324(sp)
   85dd8:	d8014815 	stw	zero,1312(sp)
   85ddc:	d8014415 	stw	zero,1296(sp)
   85de0:	d8014715 	stw	zero,1308(sp)
   85de4:	dd400c15 	stw	r21,48(sp)
   85de8:	d8000e15 	stw	zero,56(sp)
   85dec:	d8000d15 	stw	zero,52(sp)
   85df0:	b8800007 	ldb	r2,0(r23)
   85df4:	10001926 	beq	r2,zero,85e5c <___vfprintf_internal_r+0x1dc>
   85df8:	00c00944 	movi	r3,37
   85dfc:	10c01726 	beq	r2,r3,85e5c <___vfprintf_internal_r+0x1dc>
   85e00:	b821883a 	mov	r16,r23
   85e04:	00000106 	br	85e0c <___vfprintf_internal_r+0x18c>
   85e08:	10c00326 	beq	r2,r3,85e18 <___vfprintf_internal_r+0x198>
   85e0c:	84000044 	addi	r16,r16,1
   85e10:	80800007 	ldb	r2,0(r16)
   85e14:	103ffc1e 	bne	r2,zero,85e08 <___vfprintf_internal_r+0x188>
   85e18:	85e7c83a 	sub	r19,r16,r23
   85e1c:	98000e26 	beq	r19,zero,85e58 <___vfprintf_internal_r+0x1d8>
   85e20:	dc800e17 	ldw	r18,56(sp)
   85e24:	dc400d17 	ldw	r17,52(sp)
   85e28:	008001c4 	movi	r2,7
   85e2c:	94e5883a 	add	r18,r18,r19
   85e30:	8c400044 	addi	r17,r17,1
   85e34:	adc00015 	stw	r23,0(r21)
   85e38:	dc800e15 	stw	r18,56(sp)
   85e3c:	acc00115 	stw	r19,4(r21)
   85e40:	dc400d15 	stw	r17,52(sp)
   85e44:	14428b16 	blt	r2,r17,86874 <___vfprintf_internal_r+0xbf4>
   85e48:	ad400204 	addi	r21,r21,8
   85e4c:	d9014b17 	ldw	r4,1324(sp)
   85e50:	24c9883a 	add	r4,r4,r19
   85e54:	d9014b15 	stw	r4,1324(sp)
   85e58:	802f883a 	mov	r23,r16
   85e5c:	b8800007 	ldb	r2,0(r23)
   85e60:	10013c26 	beq	r2,zero,86354 <___vfprintf_internal_r+0x6d4>
   85e64:	bdc00044 	addi	r23,r23,1
   85e68:	d8000405 	stb	zero,16(sp)
   85e6c:	b8c00007 	ldb	r3,0(r23)
   85e70:	04ffffc4 	movi	r19,-1
   85e74:	d8014c15 	stw	zero,1328(sp)
   85e78:	d8014a15 	stw	zero,1320(sp)
   85e7c:	d8c14d15 	stw	r3,1332(sp)
   85e80:	bdc00044 	addi	r23,r23,1
   85e84:	d9414d17 	ldw	r5,1332(sp)
   85e88:	00801604 	movi	r2,88
   85e8c:	28fff804 	addi	r3,r5,-32
   85e90:	10c06036 	bltu	r2,r3,86014 <___vfprintf_internal_r+0x394>
   85e94:	18c5883a 	add	r2,r3,r3
   85e98:	1085883a 	add	r2,r2,r2
   85e9c:	00c00234 	movhi	r3,8
   85ea0:	18d7ac04 	addi	r3,r3,24240
   85ea4:	10c5883a 	add	r2,r2,r3
   85ea8:	11000017 	ldw	r4,0(r2)
   85eac:	2000683a 	jmp	r4
   85eb0:	00086e24 	muli	zero,zero,8632
   85eb4:	00086014 	movui	zero,8576
   85eb8:	00086014 	movui	zero,8576
   85ebc:	00086e10 	cmplti	zero,zero,8632
   85ec0:	00086014 	movui	zero,8576
   85ec4:	00086014 	movui	zero,8576
   85ec8:	00086014 	movui	zero,8576
   85ecc:	00086014 	movui	zero,8576
   85ed0:	00086014 	movui	zero,8576
   85ed4:	00086014 	movui	zero,8576
   85ed8:	00086bf0 	cmpltui	zero,zero,8623
   85edc:	00086e00 	call	86e0 <__alt_mem_sram_0-0x77920>
   85ee0:	00086014 	movui	zero,8576
   85ee4:	00086c08 	cmpgei	zero,zero,8624
   85ee8:	00086ea8 	cmpgeui	zero,zero,8634
   85eec:	00086014 	movui	zero,8576
   85ef0:	00086e94 	movui	zero,8634
   85ef4:	00086e50 	cmplti	zero,zero,8633
   85ef8:	00086e50 	cmplti	zero,zero,8633
   85efc:	00086e50 	cmplti	zero,zero,8633
   85f00:	00086e50 	cmplti	zero,zero,8633
   85f04:	00086e50 	cmplti	zero,zero,8633
   85f08:	00086e50 	cmplti	zero,zero,8633
   85f0c:	00086e50 	cmplti	zero,zero,8633
   85f10:	00086e50 	cmplti	zero,zero,8633
   85f14:	00086e50 	cmplti	zero,zero,8633
   85f18:	00086014 	movui	zero,8576
   85f1c:	00086014 	movui	zero,8576
   85f20:	00086014 	movui	zero,8576
   85f24:	00086014 	movui	zero,8576
   85f28:	00086014 	movui	zero,8576
   85f2c:	00086014 	movui	zero,8576
   85f30:	00086014 	movui	zero,8576
   85f34:	00086014 	movui	zero,8576
   85f38:	00086014 	movui	zero,8576
   85f3c:	00086014 	movui	zero,8576
   85f40:	0008666c 	andhi	zero,zero,8601
   85f44:	00086cd8 	cmpnei	zero,zero,8627
   85f48:	00086014 	movui	zero,8576
   85f4c:	00086cd8 	cmpnei	zero,zero,8627
   85f50:	00086014 	movui	zero,8576
   85f54:	00086014 	movui	zero,8576
   85f58:	00086014 	movui	zero,8576
   85f5c:	00086014 	movui	zero,8576
   85f60:	00086e3c 	xorhi	zero,zero,8632
   85f64:	00086014 	movui	zero,8576
   85f68:	00086014 	movui	zero,8576
   85f6c:	00086720 	cmpeqi	zero,zero,8604
   85f70:	00086014 	movui	zero,8576
   85f74:	00086014 	movui	zero,8576
   85f78:	00086014 	movui	zero,8576
   85f7c:	00086014 	movui	zero,8576
   85f80:	00086014 	movui	zero,8576
   85f84:	0008676c 	andhi	zero,zero,8605
   85f88:	00086014 	movui	zero,8576
   85f8c:	00086014 	movui	zero,8576
   85f90:	00086d8c 	andi	zero,zero,8630
   85f94:	00086014 	movui	zero,8576
   85f98:	00086014 	movui	zero,8576
   85f9c:	00086014 	movui	zero,8576
   85fa0:	00086014 	movui	zero,8576
   85fa4:	00086014 	movui	zero,8576
   85fa8:	00086014 	movui	zero,8576
   85fac:	00086014 	movui	zero,8576
   85fb0:	00086014 	movui	zero,8576
   85fb4:	00086014 	movui	zero,8576
   85fb8:	00086014 	movui	zero,8576
   85fbc:	00086d60 	cmpeqi	zero,zero,8629
   85fc0:	00086678 	rdprs	zero,zero,8601
   85fc4:	00086cd8 	cmpnei	zero,zero,8627
   85fc8:	00086cd8 	cmpnei	zero,zero,8627
   85fcc:	00086cd8 	cmpnei	zero,zero,8627
   85fd0:	00086cc4 	movi	zero,8627
   85fd4:	00086678 	rdprs	zero,zero,8601
   85fd8:	00086014 	movui	zero,8576
   85fdc:	00086014 	movui	zero,8576
   85fe0:	00086c4c 	andi	zero,zero,8625
   85fe4:	00086014 	movui	zero,8576
   85fe8:	00086c1c 	xori	zero,zero,8624
   85fec:	0008672c 	andhi	zero,zero,8604
   85ff0:	00086c7c 	xorhi	zero,zero,8625
   85ff4:	00086c68 	cmpgeui	zero,zero,8625
   85ff8:	00086014 	movui	zero,8576
   85ffc:	00086f10 	cmplti	zero,zero,8636
   86000:	00086014 	movui	zero,8576
   86004:	00086778 	rdprs	zero,zero,8605
   86008:	00086014 	movui	zero,8576
   8600c:	00086014 	movui	zero,8576
   86010:	00086df0 	cmpltui	zero,zero,8631
   86014:	d9014d17 	ldw	r4,1332(sp)
   86018:	2000ce26 	beq	r4,zero,86354 <___vfprintf_internal_r+0x6d4>
   8601c:	01400044 	movi	r5,1
   86020:	d9800f04 	addi	r6,sp,60
   86024:	d9c14015 	stw	r7,1280(sp)
   86028:	d9414515 	stw	r5,1300(sp)
   8602c:	d9814115 	stw	r6,1284(sp)
   86030:	280f883a 	mov	r7,r5
   86034:	d9000f05 	stb	r4,60(sp)
   86038:	d8000405 	stb	zero,16(sp)
   8603c:	d8014615 	stw	zero,1304(sp)
   86040:	d8c14c17 	ldw	r3,1328(sp)
   86044:	1880008c 	andi	r2,r3,2
   86048:	1005003a 	cmpeq	r2,r2,zero
   8604c:	d8815015 	stw	r2,1344(sp)
   86050:	1000031e 	bne	r2,zero,86060 <___vfprintf_internal_r+0x3e0>
   86054:	d9014517 	ldw	r4,1300(sp)
   86058:	21000084 	addi	r4,r4,2
   8605c:	d9014515 	stw	r4,1300(sp)
   86060:	d9414c17 	ldw	r5,1328(sp)
   86064:	2940210c 	andi	r5,r5,132
   86068:	d9414e15 	stw	r5,1336(sp)
   8606c:	28002d1e 	bne	r5,zero,86124 <___vfprintf_internal_r+0x4a4>
   86070:	d9814a17 	ldw	r6,1320(sp)
   86074:	d8814517 	ldw	r2,1300(sp)
   86078:	30a1c83a 	sub	r16,r6,r2
   8607c:	0400290e 	bge	zero,r16,86124 <___vfprintf_internal_r+0x4a4>
   86080:	00800404 	movi	r2,16
   86084:	14045e0e 	bge	r2,r16,87200 <___vfprintf_internal_r+0x1580>
   86088:	dc800e17 	ldw	r18,56(sp)
   8608c:	dc400d17 	ldw	r17,52(sp)
   86090:	1027883a 	mov	r19,r2
   86094:	07000274 	movhi	fp,9
   86098:	e708f384 	addi	fp,fp,9166
   8609c:	050001c4 	movi	r20,7
   860a0:	00000306 	br	860b0 <___vfprintf_internal_r+0x430>
   860a4:	843ffc04 	addi	r16,r16,-16
   860a8:	ad400204 	addi	r21,r21,8
   860ac:	9c00130e 	bge	r19,r16,860fc <___vfprintf_internal_r+0x47c>
   860b0:	94800404 	addi	r18,r18,16
   860b4:	8c400044 	addi	r17,r17,1
   860b8:	af000015 	stw	fp,0(r21)
   860bc:	acc00115 	stw	r19,4(r21)
   860c0:	dc800e15 	stw	r18,56(sp)
   860c4:	dc400d15 	stw	r17,52(sp)
   860c8:	a47ff60e 	bge	r20,r17,860a4 <___vfprintf_internal_r+0x424>
   860cc:	d9014f17 	ldw	r4,1340(sp)
   860d0:	b00b883a 	mov	r5,r22
   860d4:	d9800c04 	addi	r6,sp,48
   860d8:	d9c15115 	stw	r7,1348(sp)
   860dc:	0085c280 	call	85c28 <__sprint_r>
   860e0:	d9c15117 	ldw	r7,1348(sp)
   860e4:	10009e1e 	bne	r2,zero,86360 <___vfprintf_internal_r+0x6e0>
   860e8:	843ffc04 	addi	r16,r16,-16
   860ec:	dc800e17 	ldw	r18,56(sp)
   860f0:	dc400d17 	ldw	r17,52(sp)
   860f4:	dd401904 	addi	r21,sp,100
   860f8:	9c3fed16 	blt	r19,r16,860b0 <___vfprintf_internal_r+0x430>
   860fc:	9425883a 	add	r18,r18,r16
   86100:	8c400044 	addi	r17,r17,1
   86104:	008001c4 	movi	r2,7
   86108:	af000015 	stw	fp,0(r21)
   8610c:	ac000115 	stw	r16,4(r21)
   86110:	dc800e15 	stw	r18,56(sp)
   86114:	dc400d15 	stw	r17,52(sp)
   86118:	1441f516 	blt	r2,r17,868f0 <___vfprintf_internal_r+0xc70>
   8611c:	ad400204 	addi	r21,r21,8
   86120:	00000206 	br	8612c <___vfprintf_internal_r+0x4ac>
   86124:	dc800e17 	ldw	r18,56(sp)
   86128:	dc400d17 	ldw	r17,52(sp)
   8612c:	d8800407 	ldb	r2,16(sp)
   86130:	10000b26 	beq	r2,zero,86160 <___vfprintf_internal_r+0x4e0>
   86134:	00800044 	movi	r2,1
   86138:	94800044 	addi	r18,r18,1
   8613c:	8c400044 	addi	r17,r17,1
   86140:	a8800115 	stw	r2,4(r21)
   86144:	d8c00404 	addi	r3,sp,16
   86148:	008001c4 	movi	r2,7
   8614c:	a8c00015 	stw	r3,0(r21)
   86150:	dc800e15 	stw	r18,56(sp)
   86154:	dc400d15 	stw	r17,52(sp)
   86158:	1441da16 	blt	r2,r17,868c4 <___vfprintf_internal_r+0xc44>
   8615c:	ad400204 	addi	r21,r21,8
   86160:	d9015017 	ldw	r4,1344(sp)
   86164:	20000b1e 	bne	r4,zero,86194 <___vfprintf_internal_r+0x514>
   86168:	d8800444 	addi	r2,sp,17
   8616c:	94800084 	addi	r18,r18,2
   86170:	8c400044 	addi	r17,r17,1
   86174:	a8800015 	stw	r2,0(r21)
   86178:	00c00084 	movi	r3,2
   8617c:	008001c4 	movi	r2,7
   86180:	a8c00115 	stw	r3,4(r21)
   86184:	dc800e15 	stw	r18,56(sp)
   86188:	dc400d15 	stw	r17,52(sp)
   8618c:	1441c216 	blt	r2,r17,86898 <___vfprintf_internal_r+0xc18>
   86190:	ad400204 	addi	r21,r21,8
   86194:	d9414e17 	ldw	r5,1336(sp)
   86198:	00802004 	movi	r2,128
   8619c:	2880b126 	beq	r5,r2,86464 <___vfprintf_internal_r+0x7e4>
   861a0:	d8c14617 	ldw	r3,1304(sp)
   861a4:	19e1c83a 	sub	r16,r3,r7
   861a8:	0400260e 	bge	zero,r16,86244 <___vfprintf_internal_r+0x5c4>
   861ac:	00800404 	movi	r2,16
   861b0:	1403cf0e 	bge	r2,r16,870f0 <___vfprintf_internal_r+0x1470>
   861b4:	1027883a 	mov	r19,r2
   861b8:	07000274 	movhi	fp,9
   861bc:	e708ef84 	addi	fp,fp,9150
   861c0:	050001c4 	movi	r20,7
   861c4:	00000306 	br	861d4 <___vfprintf_internal_r+0x554>
   861c8:	843ffc04 	addi	r16,r16,-16
   861cc:	ad400204 	addi	r21,r21,8
   861d0:	9c00130e 	bge	r19,r16,86220 <___vfprintf_internal_r+0x5a0>
   861d4:	94800404 	addi	r18,r18,16
   861d8:	8c400044 	addi	r17,r17,1
   861dc:	af000015 	stw	fp,0(r21)
   861e0:	acc00115 	stw	r19,4(r21)
   861e4:	dc800e15 	stw	r18,56(sp)
   861e8:	dc400d15 	stw	r17,52(sp)
   861ec:	a47ff60e 	bge	r20,r17,861c8 <___vfprintf_internal_r+0x548>
   861f0:	d9014f17 	ldw	r4,1340(sp)
   861f4:	b00b883a 	mov	r5,r22
   861f8:	d9800c04 	addi	r6,sp,48
   861fc:	d9c15115 	stw	r7,1348(sp)
   86200:	0085c280 	call	85c28 <__sprint_r>
   86204:	d9c15117 	ldw	r7,1348(sp)
   86208:	1000551e 	bne	r2,zero,86360 <___vfprintf_internal_r+0x6e0>
   8620c:	843ffc04 	addi	r16,r16,-16
   86210:	dc800e17 	ldw	r18,56(sp)
   86214:	dc400d17 	ldw	r17,52(sp)
   86218:	dd401904 	addi	r21,sp,100
   8621c:	9c3fed16 	blt	r19,r16,861d4 <___vfprintf_internal_r+0x554>
   86220:	9425883a 	add	r18,r18,r16
   86224:	8c400044 	addi	r17,r17,1
   86228:	008001c4 	movi	r2,7
   8622c:	af000015 	stw	fp,0(r21)
   86230:	ac000115 	stw	r16,4(r21)
   86234:	dc800e15 	stw	r18,56(sp)
   86238:	dc400d15 	stw	r17,52(sp)
   8623c:	14418216 	blt	r2,r17,86848 <___vfprintf_internal_r+0xbc8>
   86240:	ad400204 	addi	r21,r21,8
   86244:	d9014c17 	ldw	r4,1328(sp)
   86248:	2080400c 	andi	r2,r4,256
   8624c:	10004a1e 	bne	r2,zero,86378 <___vfprintf_internal_r+0x6f8>
   86250:	d9414117 	ldw	r5,1284(sp)
   86254:	91e5883a 	add	r18,r18,r7
   86258:	8c400044 	addi	r17,r17,1
   8625c:	008001c4 	movi	r2,7
   86260:	a9400015 	stw	r5,0(r21)
   86264:	a9c00115 	stw	r7,4(r21)
   86268:	dc800e15 	stw	r18,56(sp)
   8626c:	dc400d15 	stw	r17,52(sp)
   86270:	14416716 	blt	r2,r17,86810 <___vfprintf_internal_r+0xb90>
   86274:	a8c00204 	addi	r3,r21,8
   86278:	d9814c17 	ldw	r6,1328(sp)
   8627c:	3080010c 	andi	r2,r6,4
   86280:	10002826 	beq	r2,zero,86324 <___vfprintf_internal_r+0x6a4>
   86284:	d8814a17 	ldw	r2,1320(sp)
   86288:	d9014517 	ldw	r4,1300(sp)
   8628c:	1121c83a 	sub	r16,r2,r4
   86290:	0400240e 	bge	zero,r16,86324 <___vfprintf_internal_r+0x6a4>
   86294:	00800404 	movi	r2,16
   86298:	1404550e 	bge	r2,r16,873f0 <___vfprintf_internal_r+0x1770>
   8629c:	dc400d17 	ldw	r17,52(sp)
   862a0:	1027883a 	mov	r19,r2
   862a4:	07000274 	movhi	fp,9
   862a8:	e708f384 	addi	fp,fp,9166
   862ac:	050001c4 	movi	r20,7
   862b0:	00000306 	br	862c0 <___vfprintf_internal_r+0x640>
   862b4:	843ffc04 	addi	r16,r16,-16
   862b8:	18c00204 	addi	r3,r3,8
   862bc:	9c00110e 	bge	r19,r16,86304 <___vfprintf_internal_r+0x684>
   862c0:	94800404 	addi	r18,r18,16
   862c4:	8c400044 	addi	r17,r17,1
   862c8:	1f000015 	stw	fp,0(r3)
   862cc:	1cc00115 	stw	r19,4(r3)
   862d0:	dc800e15 	stw	r18,56(sp)
   862d4:	dc400d15 	stw	r17,52(sp)
   862d8:	a47ff60e 	bge	r20,r17,862b4 <___vfprintf_internal_r+0x634>
   862dc:	d9014f17 	ldw	r4,1340(sp)
   862e0:	b00b883a 	mov	r5,r22
   862e4:	d9800c04 	addi	r6,sp,48
   862e8:	0085c280 	call	85c28 <__sprint_r>
   862ec:	10001c1e 	bne	r2,zero,86360 <___vfprintf_internal_r+0x6e0>
   862f0:	843ffc04 	addi	r16,r16,-16
   862f4:	dc800e17 	ldw	r18,56(sp)
   862f8:	dc400d17 	ldw	r17,52(sp)
   862fc:	d8c01904 	addi	r3,sp,100
   86300:	9c3fef16 	blt	r19,r16,862c0 <___vfprintf_internal_r+0x640>
   86304:	9425883a 	add	r18,r18,r16
   86308:	8c400044 	addi	r17,r17,1
   8630c:	008001c4 	movi	r2,7
   86310:	1f000015 	stw	fp,0(r3)
   86314:	1c000115 	stw	r16,4(r3)
   86318:	dc800e15 	stw	r18,56(sp)
   8631c:	dc400d15 	stw	r17,52(sp)
   86320:	1440cb16 	blt	r2,r17,86650 <___vfprintf_internal_r+0x9d0>
   86324:	d8814a17 	ldw	r2,1320(sp)
   86328:	d9414517 	ldw	r5,1300(sp)
   8632c:	1140010e 	bge	r2,r5,86334 <___vfprintf_internal_r+0x6b4>
   86330:	2805883a 	mov	r2,r5
   86334:	d9814b17 	ldw	r6,1324(sp)
   86338:	308d883a 	add	r6,r6,r2
   8633c:	d9814b15 	stw	r6,1324(sp)
   86340:	90013b1e 	bne	r18,zero,86830 <___vfprintf_internal_r+0xbb0>
   86344:	d9c14017 	ldw	r7,1280(sp)
   86348:	dd401904 	addi	r21,sp,100
   8634c:	d8000d15 	stw	zero,52(sp)
   86350:	003ea706 	br	85df0 <___vfprintf_internal_r+0x170>
   86354:	d8800e17 	ldw	r2,56(sp)
   86358:	1005451e 	bne	r2,zero,87870 <___vfprintf_internal_r+0x1bf0>
   8635c:	d8000d15 	stw	zero,52(sp)
   86360:	b080030b 	ldhu	r2,12(r22)
   86364:	1080100c 	andi	r2,r2,64
   86368:	103e8726 	beq	r2,zero,85d88 <___vfprintf_internal_r+0x108>
   8636c:	00bfffc4 	movi	r2,-1
   86370:	d8814b15 	stw	r2,1324(sp)
   86374:	003e8406 	br	85d88 <___vfprintf_internal_r+0x108>
   86378:	d9814d17 	ldw	r6,1332(sp)
   8637c:	00801944 	movi	r2,101
   86380:	11806e16 	blt	r2,r6,8653c <___vfprintf_internal_r+0x8bc>
   86384:	d9414717 	ldw	r5,1308(sp)
   86388:	00c00044 	movi	r3,1
   8638c:	1943490e 	bge	r3,r5,870b4 <___vfprintf_internal_r+0x1434>
   86390:	d8814117 	ldw	r2,1284(sp)
   86394:	94800044 	addi	r18,r18,1
   86398:	8c400044 	addi	r17,r17,1
   8639c:	a8800015 	stw	r2,0(r21)
   863a0:	008001c4 	movi	r2,7
   863a4:	a8c00115 	stw	r3,4(r21)
   863a8:	dc800e15 	stw	r18,56(sp)
   863ac:	dc400d15 	stw	r17,52(sp)
   863b0:	1441ca16 	blt	r2,r17,86adc <___vfprintf_internal_r+0xe5c>
   863b4:	a8c00204 	addi	r3,r21,8
   863b8:	d9014917 	ldw	r4,1316(sp)
   863bc:	00800044 	movi	r2,1
   863c0:	94800044 	addi	r18,r18,1
   863c4:	8c400044 	addi	r17,r17,1
   863c8:	18800115 	stw	r2,4(r3)
   863cc:	008001c4 	movi	r2,7
   863d0:	19000015 	stw	r4,0(r3)
   863d4:	dc800e15 	stw	r18,56(sp)
   863d8:	dc400d15 	stw	r17,52(sp)
   863dc:	1441b616 	blt	r2,r17,86ab8 <___vfprintf_internal_r+0xe38>
   863e0:	1cc00204 	addi	r19,r3,8
   863e4:	d9014217 	ldw	r4,1288(sp)
   863e8:	d9414317 	ldw	r5,1292(sp)
   863ec:	000d883a 	mov	r6,zero
   863f0:	000f883a 	mov	r7,zero
   863f4:	008e7340 	call	8e734 <__nedf2>
   863f8:	10017426 	beq	r2,zero,869cc <___vfprintf_internal_r+0xd4c>
   863fc:	d9414717 	ldw	r5,1308(sp)
   86400:	d9814117 	ldw	r6,1284(sp)
   86404:	8c400044 	addi	r17,r17,1
   86408:	2c85883a 	add	r2,r5,r18
   8640c:	14bfffc4 	addi	r18,r2,-1
   86410:	28bfffc4 	addi	r2,r5,-1
   86414:	30c00044 	addi	r3,r6,1
   86418:	98800115 	stw	r2,4(r19)
   8641c:	008001c4 	movi	r2,7
   86420:	98c00015 	stw	r3,0(r19)
   86424:	dc800e15 	stw	r18,56(sp)
   86428:	dc400d15 	stw	r17,52(sp)
   8642c:	14418e16 	blt	r2,r17,86a68 <___vfprintf_internal_r+0xde8>
   86430:	9cc00204 	addi	r19,r19,8
   86434:	d9414817 	ldw	r5,1312(sp)
   86438:	d8800804 	addi	r2,sp,32
   8643c:	8c400044 	addi	r17,r17,1
   86440:	9165883a 	add	r18,r18,r5
   86444:	98800015 	stw	r2,0(r19)
   86448:	008001c4 	movi	r2,7
   8644c:	99400115 	stw	r5,4(r19)
   86450:	dc800e15 	stw	r18,56(sp)
   86454:	dc400d15 	stw	r17,52(sp)
   86458:	1440ed16 	blt	r2,r17,86810 <___vfprintf_internal_r+0xb90>
   8645c:	98c00204 	addi	r3,r19,8
   86460:	003f8506 	br	86278 <___vfprintf_internal_r+0x5f8>
   86464:	d9814a17 	ldw	r6,1320(sp)
   86468:	d8814517 	ldw	r2,1300(sp)
   8646c:	30a1c83a 	sub	r16,r6,r2
   86470:	043f4b0e 	bge	zero,r16,861a0 <___vfprintf_internal_r+0x520>
   86474:	00800404 	movi	r2,16
   86478:	14043a0e 	bge	r2,r16,87564 <___vfprintf_internal_r+0x18e4>
   8647c:	1027883a 	mov	r19,r2
   86480:	07000274 	movhi	fp,9
   86484:	e708ef84 	addi	fp,fp,9150
   86488:	050001c4 	movi	r20,7
   8648c:	00000306 	br	8649c <___vfprintf_internal_r+0x81c>
   86490:	843ffc04 	addi	r16,r16,-16
   86494:	ad400204 	addi	r21,r21,8
   86498:	9c00130e 	bge	r19,r16,864e8 <___vfprintf_internal_r+0x868>
   8649c:	94800404 	addi	r18,r18,16
   864a0:	8c400044 	addi	r17,r17,1
   864a4:	af000015 	stw	fp,0(r21)
   864a8:	acc00115 	stw	r19,4(r21)
   864ac:	dc800e15 	stw	r18,56(sp)
   864b0:	dc400d15 	stw	r17,52(sp)
   864b4:	a47ff60e 	bge	r20,r17,86490 <___vfprintf_internal_r+0x810>
   864b8:	d9014f17 	ldw	r4,1340(sp)
   864bc:	b00b883a 	mov	r5,r22
   864c0:	d9800c04 	addi	r6,sp,48
   864c4:	d9c15115 	stw	r7,1348(sp)
   864c8:	0085c280 	call	85c28 <__sprint_r>
   864cc:	d9c15117 	ldw	r7,1348(sp)
   864d0:	103fa31e 	bne	r2,zero,86360 <___vfprintf_internal_r+0x6e0>
   864d4:	843ffc04 	addi	r16,r16,-16
   864d8:	dc800e17 	ldw	r18,56(sp)
   864dc:	dc400d17 	ldw	r17,52(sp)
   864e0:	dd401904 	addi	r21,sp,100
   864e4:	9c3fed16 	blt	r19,r16,8649c <___vfprintf_internal_r+0x81c>
   864e8:	9425883a 	add	r18,r18,r16
   864ec:	8c400044 	addi	r17,r17,1
   864f0:	008001c4 	movi	r2,7
   864f4:	af000015 	stw	fp,0(r21)
   864f8:	ac000115 	stw	r16,4(r21)
   864fc:	dc800e15 	stw	r18,56(sp)
   86500:	dc400d15 	stw	r17,52(sp)
   86504:	14416116 	blt	r2,r17,86a8c <___vfprintf_internal_r+0xe0c>
   86508:	ad400204 	addi	r21,r21,8
   8650c:	003f2406 	br	861a0 <___vfprintf_internal_r+0x520>
   86510:	d9014f17 	ldw	r4,1340(sp)
   86514:	00897340 	call	89734 <__sinit>
   86518:	d9c15117 	ldw	r7,1348(sp)
   8651c:	003def06 	br	85cdc <___vfprintf_internal_r+0x5c>
   86520:	d9014f17 	ldw	r4,1340(sp)
   86524:	b00b883a 	mov	r5,r22
   86528:	d9c15115 	stw	r7,1348(sp)
   8652c:	0087b680 	call	87b68 <__swsetup_r>
   86530:	d9c15117 	ldw	r7,1348(sp)
   86534:	103dee26 	beq	r2,zero,85cf0 <___vfprintf_internal_r+0x70>
   86538:	003f8c06 	br	8636c <___vfprintf_internal_r+0x6ec>
   8653c:	d9014217 	ldw	r4,1288(sp)
   86540:	d9414317 	ldw	r5,1292(sp)
   86544:	000d883a 	mov	r6,zero
   86548:	000f883a 	mov	r7,zero
   8654c:	008e6ac0 	call	8e6ac <__eqdf2>
   86550:	1000f21e 	bne	r2,zero,8691c <___vfprintf_internal_r+0xc9c>
   86554:	00800274 	movhi	r2,9
   86558:	1088ef04 	addi	r2,r2,9148
   8655c:	94800044 	addi	r18,r18,1
   86560:	8c400044 	addi	r17,r17,1
   86564:	a8800015 	stw	r2,0(r21)
   86568:	00c00044 	movi	r3,1
   8656c:	008001c4 	movi	r2,7
   86570:	a8c00115 	stw	r3,4(r21)
   86574:	dc800e15 	stw	r18,56(sp)
   86578:	dc400d15 	stw	r17,52(sp)
   8657c:	14430016 	blt	r2,r17,87180 <___vfprintf_internal_r+0x1500>
   86580:	a8c00204 	addi	r3,r21,8
   86584:	d8800517 	ldw	r2,20(sp)
   86588:	d9014717 	ldw	r4,1308(sp)
   8658c:	11015c0e 	bge	r2,r4,86b00 <___vfprintf_internal_r+0xe80>
   86590:	dc400d17 	ldw	r17,52(sp)
   86594:	d9814917 	ldw	r6,1316(sp)
   86598:	00800044 	movi	r2,1
   8659c:	94800044 	addi	r18,r18,1
   865a0:	8c400044 	addi	r17,r17,1
   865a4:	18800115 	stw	r2,4(r3)
   865a8:	008001c4 	movi	r2,7
   865ac:	19800015 	stw	r6,0(r3)
   865b0:	dc800e15 	stw	r18,56(sp)
   865b4:	dc400d15 	stw	r17,52(sp)
   865b8:	14431616 	blt	r2,r17,87214 <___vfprintf_internal_r+0x1594>
   865bc:	18c00204 	addi	r3,r3,8
   865c0:	d8814717 	ldw	r2,1308(sp)
   865c4:	143fffc4 	addi	r16,r2,-1
   865c8:	043f2b0e 	bge	zero,r16,86278 <___vfprintf_internal_r+0x5f8>
   865cc:	00800404 	movi	r2,16
   865d0:	1402a80e 	bge	r2,r16,87074 <___vfprintf_internal_r+0x13f4>
   865d4:	dc400d17 	ldw	r17,52(sp)
   865d8:	1027883a 	mov	r19,r2
   865dc:	07000274 	movhi	fp,9
   865e0:	e708ef84 	addi	fp,fp,9150
   865e4:	050001c4 	movi	r20,7
   865e8:	00000306 	br	865f8 <___vfprintf_internal_r+0x978>
   865ec:	18c00204 	addi	r3,r3,8
   865f0:	843ffc04 	addi	r16,r16,-16
   865f4:	9c02a20e 	bge	r19,r16,87080 <___vfprintf_internal_r+0x1400>
   865f8:	94800404 	addi	r18,r18,16
   865fc:	8c400044 	addi	r17,r17,1
   86600:	1f000015 	stw	fp,0(r3)
   86604:	1cc00115 	stw	r19,4(r3)
   86608:	dc800e15 	stw	r18,56(sp)
   8660c:	dc400d15 	stw	r17,52(sp)
   86610:	a47ff60e 	bge	r20,r17,865ec <___vfprintf_internal_r+0x96c>
   86614:	d9014f17 	ldw	r4,1340(sp)
   86618:	b00b883a 	mov	r5,r22
   8661c:	d9800c04 	addi	r6,sp,48
   86620:	0085c280 	call	85c28 <__sprint_r>
   86624:	103f4e1e 	bne	r2,zero,86360 <___vfprintf_internal_r+0x6e0>
   86628:	dc800e17 	ldw	r18,56(sp)
   8662c:	dc400d17 	ldw	r17,52(sp)
   86630:	d8c01904 	addi	r3,sp,100
   86634:	003fee06 	br	865f0 <___vfprintf_internal_r+0x970>
   86638:	d8802c0b 	ldhu	r2,176(sp)
   8663c:	00ffffc4 	movi	r3,-1
   86640:	d8c14b15 	stw	r3,1324(sp)
   86644:	1080100c 	andi	r2,r2,64
   86648:	103dcc1e 	bne	r2,zero,85d7c <___vfprintf_internal_r+0xfc>
   8664c:	003dce06 	br	85d88 <___vfprintf_internal_r+0x108>
   86650:	d9014f17 	ldw	r4,1340(sp)
   86654:	b00b883a 	mov	r5,r22
   86658:	d9800c04 	addi	r6,sp,48
   8665c:	0085c280 	call	85c28 <__sprint_r>
   86660:	103f3f1e 	bne	r2,zero,86360 <___vfprintf_internal_r+0x6e0>
   86664:	dc800e17 	ldw	r18,56(sp)
   86668:	003f2e06 	br	86324 <___vfprintf_internal_r+0x6a4>
   8666c:	d9414c17 	ldw	r5,1328(sp)
   86670:	29400414 	ori	r5,r5,16
   86674:	d9414c15 	stw	r5,1328(sp)
   86678:	d9814c17 	ldw	r6,1328(sp)
   8667c:	3080080c 	andi	r2,r6,32
   86680:	10014f1e 	bne	r2,zero,86bc0 <___vfprintf_internal_r+0xf40>
   86684:	d8c14c17 	ldw	r3,1328(sp)
   86688:	1880040c 	andi	r2,r3,16
   8668c:	1002f01e 	bne	r2,zero,87250 <___vfprintf_internal_r+0x15d0>
   86690:	d9014c17 	ldw	r4,1328(sp)
   86694:	2080100c 	andi	r2,r4,64
   86698:	1002ed26 	beq	r2,zero,87250 <___vfprintf_internal_r+0x15d0>
   8669c:	3880000f 	ldh	r2,0(r7)
   866a0:	39c00104 	addi	r7,r7,4
   866a4:	d9c14015 	stw	r7,1280(sp)
   866a8:	1023d7fa 	srai	r17,r2,31
   866ac:	1021883a 	mov	r16,r2
   866b0:	88037816 	blt	r17,zero,87494 <___vfprintf_internal_r+0x1814>
   866b4:	01000044 	movi	r4,1
   866b8:	98000416 	blt	r19,zero,866cc <___vfprintf_internal_r+0xa4c>
   866bc:	d8c14c17 	ldw	r3,1328(sp)
   866c0:	00bfdfc4 	movi	r2,-129
   866c4:	1886703a 	and	r3,r3,r2
   866c8:	d8c14c15 	stw	r3,1328(sp)
   866cc:	8444b03a 	or	r2,r16,r17
   866d0:	10022c1e 	bne	r2,zero,86f84 <___vfprintf_internal_r+0x1304>
   866d4:	98022b1e 	bne	r19,zero,86f84 <___vfprintf_internal_r+0x1304>
   866d8:	20803fcc 	andi	r2,r4,255
   866dc:	1002a126 	beq	r2,zero,87164 <___vfprintf_internal_r+0x14e4>
   866e0:	d8c01904 	addi	r3,sp,100
   866e4:	dd000f04 	addi	r20,sp,60
   866e8:	d8c14115 	stw	r3,1284(sp)
   866ec:	d8c14117 	ldw	r3,1284(sp)
   866f0:	dcc14515 	stw	r19,1300(sp)
   866f4:	a0c5c83a 	sub	r2,r20,r3
   866f8:	11c00a04 	addi	r7,r2,40
   866fc:	99c0010e 	bge	r19,r7,86704 <___vfprintf_internal_r+0xa84>
   86700:	d9c14515 	stw	r7,1300(sp)
   86704:	dcc14615 	stw	r19,1304(sp)
   86708:	d8800407 	ldb	r2,16(sp)
   8670c:	103e4c26 	beq	r2,zero,86040 <___vfprintf_internal_r+0x3c0>
   86710:	d8814517 	ldw	r2,1300(sp)
   86714:	10800044 	addi	r2,r2,1
   86718:	d8814515 	stw	r2,1300(sp)
   8671c:	003e4806 	br	86040 <___vfprintf_internal_r+0x3c0>
   86720:	d9814c17 	ldw	r6,1328(sp)
   86724:	31800414 	ori	r6,r6,16
   86728:	d9814c15 	stw	r6,1328(sp)
   8672c:	d8c14c17 	ldw	r3,1328(sp)
   86730:	1880080c 	andi	r2,r3,32
   86734:	1001271e 	bne	r2,zero,86bd4 <___vfprintf_internal_r+0xf54>
   86738:	d9414c17 	ldw	r5,1328(sp)
   8673c:	2880040c 	andi	r2,r5,16
   86740:	1002bc1e 	bne	r2,zero,87234 <___vfprintf_internal_r+0x15b4>
   86744:	d9814c17 	ldw	r6,1328(sp)
   86748:	3080100c 	andi	r2,r6,64
   8674c:	1002b926 	beq	r2,zero,87234 <___vfprintf_internal_r+0x15b4>
   86750:	3c00000b 	ldhu	r16,0(r7)
   86754:	0009883a 	mov	r4,zero
   86758:	39c00104 	addi	r7,r7,4
   8675c:	0023883a 	mov	r17,zero
   86760:	d9c14015 	stw	r7,1280(sp)
   86764:	d8000405 	stb	zero,16(sp)
   86768:	003fd306 	br	866b8 <___vfprintf_internal_r+0xa38>
   8676c:	d9014c17 	ldw	r4,1328(sp)
   86770:	21000414 	ori	r4,r4,16
   86774:	d9014c15 	stw	r4,1328(sp)
   86778:	d9414c17 	ldw	r5,1328(sp)
   8677c:	2880080c 	andi	r2,r5,32
   86780:	1001081e 	bne	r2,zero,86ba4 <___vfprintf_internal_r+0xf24>
   86784:	d8c14c17 	ldw	r3,1328(sp)
   86788:	1880040c 	andi	r2,r3,16
   8678c:	1002b61e 	bne	r2,zero,87268 <___vfprintf_internal_r+0x15e8>
   86790:	d9014c17 	ldw	r4,1328(sp)
   86794:	2080100c 	andi	r2,r4,64
   86798:	1002b326 	beq	r2,zero,87268 <___vfprintf_internal_r+0x15e8>
   8679c:	3c00000b 	ldhu	r16,0(r7)
   867a0:	01000044 	movi	r4,1
   867a4:	39c00104 	addi	r7,r7,4
   867a8:	0023883a 	mov	r17,zero
   867ac:	d9c14015 	stw	r7,1280(sp)
   867b0:	d8000405 	stb	zero,16(sp)
   867b4:	003fc006 	br	866b8 <___vfprintf_internal_r+0xa38>
   867b8:	d9014f17 	ldw	r4,1340(sp)
   867bc:	b00b883a 	mov	r5,r22
   867c0:	d9800c04 	addi	r6,sp,48
   867c4:	0085c280 	call	85c28 <__sprint_r>
   867c8:	103ee51e 	bne	r2,zero,86360 <___vfprintf_internal_r+0x6e0>
   867cc:	dc800e17 	ldw	r18,56(sp)
   867d0:	d8c01904 	addi	r3,sp,100
   867d4:	d9814c17 	ldw	r6,1328(sp)
   867d8:	3080004c 	andi	r2,r6,1
   867dc:	1005003a 	cmpeq	r2,r2,zero
   867e0:	103ea51e 	bne	r2,zero,86278 <___vfprintf_internal_r+0x5f8>
   867e4:	00800044 	movi	r2,1
   867e8:	dc400d17 	ldw	r17,52(sp)
   867ec:	18800115 	stw	r2,4(r3)
   867f0:	d8814917 	ldw	r2,1316(sp)
   867f4:	94800044 	addi	r18,r18,1
   867f8:	8c400044 	addi	r17,r17,1
   867fc:	18800015 	stw	r2,0(r3)
   86800:	008001c4 	movi	r2,7
   86804:	dc800e15 	stw	r18,56(sp)
   86808:	dc400d15 	stw	r17,52(sp)
   8680c:	1442240e 	bge	r2,r17,870a0 <___vfprintf_internal_r+0x1420>
   86810:	d9014f17 	ldw	r4,1340(sp)
   86814:	b00b883a 	mov	r5,r22
   86818:	d9800c04 	addi	r6,sp,48
   8681c:	0085c280 	call	85c28 <__sprint_r>
   86820:	103ecf1e 	bne	r2,zero,86360 <___vfprintf_internal_r+0x6e0>
   86824:	dc800e17 	ldw	r18,56(sp)
   86828:	d8c01904 	addi	r3,sp,100
   8682c:	003e9206 	br	86278 <___vfprintf_internal_r+0x5f8>
   86830:	d9014f17 	ldw	r4,1340(sp)
   86834:	b00b883a 	mov	r5,r22
   86838:	d9800c04 	addi	r6,sp,48
   8683c:	0085c280 	call	85c28 <__sprint_r>
   86840:	103ec026 	beq	r2,zero,86344 <___vfprintf_internal_r+0x6c4>
   86844:	003ec606 	br	86360 <___vfprintf_internal_r+0x6e0>
   86848:	d9014f17 	ldw	r4,1340(sp)
   8684c:	b00b883a 	mov	r5,r22
   86850:	d9800c04 	addi	r6,sp,48
   86854:	d9c15115 	stw	r7,1348(sp)
   86858:	0085c280 	call	85c28 <__sprint_r>
   8685c:	d9c15117 	ldw	r7,1348(sp)
   86860:	103ebf1e 	bne	r2,zero,86360 <___vfprintf_internal_r+0x6e0>
   86864:	dc800e17 	ldw	r18,56(sp)
   86868:	dc400d17 	ldw	r17,52(sp)
   8686c:	dd401904 	addi	r21,sp,100
   86870:	003e7406 	br	86244 <___vfprintf_internal_r+0x5c4>
   86874:	d9014f17 	ldw	r4,1340(sp)
   86878:	b00b883a 	mov	r5,r22
   8687c:	d9800c04 	addi	r6,sp,48
   86880:	d9c15115 	stw	r7,1348(sp)
   86884:	0085c280 	call	85c28 <__sprint_r>
   86888:	d9c15117 	ldw	r7,1348(sp)
   8688c:	103eb41e 	bne	r2,zero,86360 <___vfprintf_internal_r+0x6e0>
   86890:	dd401904 	addi	r21,sp,100
   86894:	003d6d06 	br	85e4c <___vfprintf_internal_r+0x1cc>
   86898:	d9014f17 	ldw	r4,1340(sp)
   8689c:	b00b883a 	mov	r5,r22
   868a0:	d9800c04 	addi	r6,sp,48
   868a4:	d9c15115 	stw	r7,1348(sp)
   868a8:	0085c280 	call	85c28 <__sprint_r>
   868ac:	d9c15117 	ldw	r7,1348(sp)
   868b0:	103eab1e 	bne	r2,zero,86360 <___vfprintf_internal_r+0x6e0>
   868b4:	dc800e17 	ldw	r18,56(sp)
   868b8:	dc400d17 	ldw	r17,52(sp)
   868bc:	dd401904 	addi	r21,sp,100
   868c0:	003e3406 	br	86194 <___vfprintf_internal_r+0x514>
   868c4:	d9014f17 	ldw	r4,1340(sp)
   868c8:	b00b883a 	mov	r5,r22
   868cc:	d9800c04 	addi	r6,sp,48
   868d0:	d9c15115 	stw	r7,1348(sp)
   868d4:	0085c280 	call	85c28 <__sprint_r>
   868d8:	d9c15117 	ldw	r7,1348(sp)
   868dc:	103ea01e 	bne	r2,zero,86360 <___vfprintf_internal_r+0x6e0>
   868e0:	dc800e17 	ldw	r18,56(sp)
   868e4:	dc400d17 	ldw	r17,52(sp)
   868e8:	dd401904 	addi	r21,sp,100
   868ec:	003e1c06 	br	86160 <___vfprintf_internal_r+0x4e0>
   868f0:	d9014f17 	ldw	r4,1340(sp)
   868f4:	b00b883a 	mov	r5,r22
   868f8:	d9800c04 	addi	r6,sp,48
   868fc:	d9c15115 	stw	r7,1348(sp)
   86900:	0085c280 	call	85c28 <__sprint_r>
   86904:	d9c15117 	ldw	r7,1348(sp)
   86908:	103e951e 	bne	r2,zero,86360 <___vfprintf_internal_r+0x6e0>
   8690c:	dc800e17 	ldw	r18,56(sp)
   86910:	dc400d17 	ldw	r17,52(sp)
   86914:	dd401904 	addi	r21,sp,100
   86918:	003e0406 	br	8612c <___vfprintf_internal_r+0x4ac>
   8691c:	d9000517 	ldw	r4,20(sp)
   86920:	0102580e 	bge	zero,r4,87284 <___vfprintf_internal_r+0x1604>
   86924:	d9814717 	ldw	r6,1308(sp)
   86928:	21807a16 	blt	r4,r6,86b14 <___vfprintf_internal_r+0xe94>
   8692c:	d8814117 	ldw	r2,1284(sp)
   86930:	91a5883a 	add	r18,r18,r6
   86934:	8c400044 	addi	r17,r17,1
   86938:	a8800015 	stw	r2,0(r21)
   8693c:	008001c4 	movi	r2,7
   86940:	a9800115 	stw	r6,4(r21)
   86944:	dc800e15 	stw	r18,56(sp)
   86948:	dc400d15 	stw	r17,52(sp)
   8694c:	1442fc16 	blt	r2,r17,87540 <___vfprintf_internal_r+0x18c0>
   86950:	a8c00204 	addi	r3,r21,8
   86954:	d9414717 	ldw	r5,1308(sp)
   86958:	2161c83a 	sub	r16,r4,r5
   8695c:	043f9d0e 	bge	zero,r16,867d4 <___vfprintf_internal_r+0xb54>
   86960:	00800404 	movi	r2,16
   86964:	1402190e 	bge	r2,r16,871cc <___vfprintf_internal_r+0x154c>
   86968:	dc400d17 	ldw	r17,52(sp)
   8696c:	1027883a 	mov	r19,r2
   86970:	07000274 	movhi	fp,9
   86974:	e708ef84 	addi	fp,fp,9150
   86978:	050001c4 	movi	r20,7
   8697c:	00000306 	br	8698c <___vfprintf_internal_r+0xd0c>
   86980:	18c00204 	addi	r3,r3,8
   86984:	843ffc04 	addi	r16,r16,-16
   86988:	9c02130e 	bge	r19,r16,871d8 <___vfprintf_internal_r+0x1558>
   8698c:	94800404 	addi	r18,r18,16
   86990:	8c400044 	addi	r17,r17,1
   86994:	1f000015 	stw	fp,0(r3)
   86998:	1cc00115 	stw	r19,4(r3)
   8699c:	dc800e15 	stw	r18,56(sp)
   869a0:	dc400d15 	stw	r17,52(sp)
   869a4:	a47ff60e 	bge	r20,r17,86980 <___vfprintf_internal_r+0xd00>
   869a8:	d9014f17 	ldw	r4,1340(sp)
   869ac:	b00b883a 	mov	r5,r22
   869b0:	d9800c04 	addi	r6,sp,48
   869b4:	0085c280 	call	85c28 <__sprint_r>
   869b8:	103e691e 	bne	r2,zero,86360 <___vfprintf_internal_r+0x6e0>
   869bc:	dc800e17 	ldw	r18,56(sp)
   869c0:	dc400d17 	ldw	r17,52(sp)
   869c4:	d8c01904 	addi	r3,sp,100
   869c8:	003fee06 	br	86984 <___vfprintf_internal_r+0xd04>
   869cc:	d8814717 	ldw	r2,1308(sp)
   869d0:	143fffc4 	addi	r16,r2,-1
   869d4:	043e970e 	bge	zero,r16,86434 <___vfprintf_internal_r+0x7b4>
   869d8:	00800404 	movi	r2,16
   869dc:	1400180e 	bge	r2,r16,86a40 <___vfprintf_internal_r+0xdc0>
   869e0:	1029883a 	mov	r20,r2
   869e4:	07000274 	movhi	fp,9
   869e8:	e708ef84 	addi	fp,fp,9150
   869ec:	054001c4 	movi	r21,7
   869f0:	00000306 	br	86a00 <___vfprintf_internal_r+0xd80>
   869f4:	9cc00204 	addi	r19,r19,8
   869f8:	843ffc04 	addi	r16,r16,-16
   869fc:	a400120e 	bge	r20,r16,86a48 <___vfprintf_internal_r+0xdc8>
   86a00:	94800404 	addi	r18,r18,16
   86a04:	8c400044 	addi	r17,r17,1
   86a08:	9f000015 	stw	fp,0(r19)
   86a0c:	9d000115 	stw	r20,4(r19)
   86a10:	dc800e15 	stw	r18,56(sp)
   86a14:	dc400d15 	stw	r17,52(sp)
   86a18:	ac7ff60e 	bge	r21,r17,869f4 <___vfprintf_internal_r+0xd74>
   86a1c:	d9014f17 	ldw	r4,1340(sp)
   86a20:	b00b883a 	mov	r5,r22
   86a24:	d9800c04 	addi	r6,sp,48
   86a28:	0085c280 	call	85c28 <__sprint_r>
   86a2c:	103e4c1e 	bne	r2,zero,86360 <___vfprintf_internal_r+0x6e0>
   86a30:	dc800e17 	ldw	r18,56(sp)
   86a34:	dc400d17 	ldw	r17,52(sp)
   86a38:	dcc01904 	addi	r19,sp,100
   86a3c:	003fee06 	br	869f8 <___vfprintf_internal_r+0xd78>
   86a40:	07000274 	movhi	fp,9
   86a44:	e708ef84 	addi	fp,fp,9150
   86a48:	9425883a 	add	r18,r18,r16
   86a4c:	8c400044 	addi	r17,r17,1
   86a50:	008001c4 	movi	r2,7
   86a54:	9f000015 	stw	fp,0(r19)
   86a58:	9c000115 	stw	r16,4(r19)
   86a5c:	dc800e15 	stw	r18,56(sp)
   86a60:	dc400d15 	stw	r17,52(sp)
   86a64:	147e720e 	bge	r2,r17,86430 <___vfprintf_internal_r+0x7b0>
   86a68:	d9014f17 	ldw	r4,1340(sp)
   86a6c:	b00b883a 	mov	r5,r22
   86a70:	d9800c04 	addi	r6,sp,48
   86a74:	0085c280 	call	85c28 <__sprint_r>
   86a78:	103e391e 	bne	r2,zero,86360 <___vfprintf_internal_r+0x6e0>
   86a7c:	dc800e17 	ldw	r18,56(sp)
   86a80:	dc400d17 	ldw	r17,52(sp)
   86a84:	dcc01904 	addi	r19,sp,100
   86a88:	003e6a06 	br	86434 <___vfprintf_internal_r+0x7b4>
   86a8c:	d9014f17 	ldw	r4,1340(sp)
   86a90:	b00b883a 	mov	r5,r22
   86a94:	d9800c04 	addi	r6,sp,48
   86a98:	d9c15115 	stw	r7,1348(sp)
   86a9c:	0085c280 	call	85c28 <__sprint_r>
   86aa0:	d9c15117 	ldw	r7,1348(sp)
   86aa4:	103e2e1e 	bne	r2,zero,86360 <___vfprintf_internal_r+0x6e0>
   86aa8:	dc800e17 	ldw	r18,56(sp)
   86aac:	dc400d17 	ldw	r17,52(sp)
   86ab0:	dd401904 	addi	r21,sp,100
   86ab4:	003dba06 	br	861a0 <___vfprintf_internal_r+0x520>
   86ab8:	d9014f17 	ldw	r4,1340(sp)
   86abc:	b00b883a 	mov	r5,r22
   86ac0:	d9800c04 	addi	r6,sp,48
   86ac4:	0085c280 	call	85c28 <__sprint_r>
   86ac8:	103e251e 	bne	r2,zero,86360 <___vfprintf_internal_r+0x6e0>
   86acc:	dc800e17 	ldw	r18,56(sp)
   86ad0:	dc400d17 	ldw	r17,52(sp)
   86ad4:	dcc01904 	addi	r19,sp,100
   86ad8:	003e4206 	br	863e4 <___vfprintf_internal_r+0x764>
   86adc:	d9014f17 	ldw	r4,1340(sp)
   86ae0:	b00b883a 	mov	r5,r22
   86ae4:	d9800c04 	addi	r6,sp,48
   86ae8:	0085c280 	call	85c28 <__sprint_r>
   86aec:	103e1c1e 	bne	r2,zero,86360 <___vfprintf_internal_r+0x6e0>
   86af0:	dc800e17 	ldw	r18,56(sp)
   86af4:	dc400d17 	ldw	r17,52(sp)
   86af8:	d8c01904 	addi	r3,sp,100
   86afc:	003e2e06 	br	863b8 <___vfprintf_internal_r+0x738>
   86b00:	d9414c17 	ldw	r5,1328(sp)
   86b04:	2880004c 	andi	r2,r5,1
   86b08:	1005003a 	cmpeq	r2,r2,zero
   86b0c:	103dda1e 	bne	r2,zero,86278 <___vfprintf_internal_r+0x5f8>
   86b10:	003e9f06 	br	86590 <___vfprintf_internal_r+0x910>
   86b14:	d8c14117 	ldw	r3,1284(sp)
   86b18:	9125883a 	add	r18,r18,r4
   86b1c:	8c400044 	addi	r17,r17,1
   86b20:	008001c4 	movi	r2,7
   86b24:	a8c00015 	stw	r3,0(r21)
   86b28:	a9000115 	stw	r4,4(r21)
   86b2c:	dc800e15 	stw	r18,56(sp)
   86b30:	dc400d15 	stw	r17,52(sp)
   86b34:	14426c16 	blt	r2,r17,874e8 <___vfprintf_internal_r+0x1868>
   86b38:	a8c00204 	addi	r3,r21,8
   86b3c:	d9414917 	ldw	r5,1316(sp)
   86b40:	00800044 	movi	r2,1
   86b44:	94800044 	addi	r18,r18,1
   86b48:	8c400044 	addi	r17,r17,1
   86b4c:	18800115 	stw	r2,4(r3)
   86b50:	008001c4 	movi	r2,7
   86b54:	19400015 	stw	r5,0(r3)
   86b58:	dc800e15 	stw	r18,56(sp)
   86b5c:	dc400d15 	stw	r17,52(sp)
   86b60:	2021883a 	mov	r16,r4
   86b64:	14425616 	blt	r2,r17,874c0 <___vfprintf_internal_r+0x1840>
   86b68:	19400204 	addi	r5,r3,8
   86b6c:	d9814717 	ldw	r6,1308(sp)
   86b70:	8c400044 	addi	r17,r17,1
   86b74:	dc400d15 	stw	r17,52(sp)
   86b78:	3107c83a 	sub	r3,r6,r4
   86b7c:	d9014117 	ldw	r4,1284(sp)
   86b80:	90e5883a 	add	r18,r18,r3
   86b84:	28c00115 	stw	r3,4(r5)
   86b88:	8105883a 	add	r2,r16,r4
   86b8c:	28800015 	stw	r2,0(r5)
   86b90:	008001c4 	movi	r2,7
   86b94:	dc800e15 	stw	r18,56(sp)
   86b98:	147f1d16 	blt	r2,r17,86810 <___vfprintf_internal_r+0xb90>
   86b9c:	28c00204 	addi	r3,r5,8
   86ba0:	003db506 	br	86278 <___vfprintf_internal_r+0x5f8>
   86ba4:	3c000017 	ldw	r16,0(r7)
   86ba8:	3c400117 	ldw	r17,4(r7)
   86bac:	39800204 	addi	r6,r7,8
   86bb0:	01000044 	movi	r4,1
   86bb4:	d9814015 	stw	r6,1280(sp)
   86bb8:	d8000405 	stb	zero,16(sp)
   86bbc:	003ebe06 	br	866b8 <___vfprintf_internal_r+0xa38>
   86bc0:	3c000017 	ldw	r16,0(r7)
   86bc4:	3c400117 	ldw	r17,4(r7)
   86bc8:	38800204 	addi	r2,r7,8
   86bcc:	d8814015 	stw	r2,1280(sp)
   86bd0:	003eb706 	br	866b0 <___vfprintf_internal_r+0xa30>
   86bd4:	3c000017 	ldw	r16,0(r7)
   86bd8:	3c400117 	ldw	r17,4(r7)
   86bdc:	39000204 	addi	r4,r7,8
   86be0:	d9014015 	stw	r4,1280(sp)
   86be4:	0009883a 	mov	r4,zero
   86be8:	d8000405 	stb	zero,16(sp)
   86bec:	003eb206 	br	866b8 <___vfprintf_internal_r+0xa38>
   86bf0:	38c00017 	ldw	r3,0(r7)
   86bf4:	39c00104 	addi	r7,r7,4
   86bf8:	d8c14a15 	stw	r3,1320(sp)
   86bfc:	1800d70e 	bge	r3,zero,86f5c <___vfprintf_internal_r+0x12dc>
   86c00:	00c7c83a 	sub	r3,zero,r3
   86c04:	d8c14a15 	stw	r3,1320(sp)
   86c08:	d9014c17 	ldw	r4,1328(sp)
   86c0c:	b8c00007 	ldb	r3,0(r23)
   86c10:	21000114 	ori	r4,r4,4
   86c14:	d9014c15 	stw	r4,1328(sp)
   86c18:	003c9806 	br	85e7c <___vfprintf_internal_r+0x1fc>
   86c1c:	d9814c17 	ldw	r6,1328(sp)
   86c20:	3080080c 	andi	r2,r6,32
   86c24:	1001f626 	beq	r2,zero,87400 <___vfprintf_internal_r+0x1780>
   86c28:	d9014b17 	ldw	r4,1324(sp)
   86c2c:	38800017 	ldw	r2,0(r7)
   86c30:	39c00104 	addi	r7,r7,4
   86c34:	d9c14015 	stw	r7,1280(sp)
   86c38:	2007d7fa 	srai	r3,r4,31
   86c3c:	d9c14017 	ldw	r7,1280(sp)
   86c40:	11000015 	stw	r4,0(r2)
   86c44:	10c00115 	stw	r3,4(r2)
   86c48:	003c6906 	br	85df0 <___vfprintf_internal_r+0x170>
   86c4c:	b8c00007 	ldb	r3,0(r23)
   86c50:	00801b04 	movi	r2,108
   86c54:	18825526 	beq	r3,r2,875ac <___vfprintf_internal_r+0x192c>
   86c58:	d9414c17 	ldw	r5,1328(sp)
   86c5c:	29400414 	ori	r5,r5,16
   86c60:	d9414c15 	stw	r5,1328(sp)
   86c64:	003c8506 	br	85e7c <___vfprintf_internal_r+0x1fc>
   86c68:	d9814c17 	ldw	r6,1328(sp)
   86c6c:	b8c00007 	ldb	r3,0(r23)
   86c70:	31800814 	ori	r6,r6,32
   86c74:	d9814c15 	stw	r6,1328(sp)
   86c78:	003c8006 	br	85e7c <___vfprintf_internal_r+0x1fc>
   86c7c:	d8814c17 	ldw	r2,1328(sp)
   86c80:	3c000017 	ldw	r16,0(r7)
   86c84:	00c01e04 	movi	r3,120
   86c88:	10800094 	ori	r2,r2,2
   86c8c:	d8814c15 	stw	r2,1328(sp)
   86c90:	39c00104 	addi	r7,r7,4
   86c94:	01400274 	movhi	r5,9
   86c98:	2948d804 	addi	r5,r5,9056
   86c9c:	00800c04 	movi	r2,48
   86ca0:	0023883a 	mov	r17,zero
   86ca4:	01000084 	movi	r4,2
   86ca8:	d9c14015 	stw	r7,1280(sp)
   86cac:	d8c14d15 	stw	r3,1332(sp)
   86cb0:	d9414415 	stw	r5,1296(sp)
   86cb4:	d8800445 	stb	r2,17(sp)
   86cb8:	d8c00485 	stb	r3,18(sp)
   86cbc:	d8000405 	stb	zero,16(sp)
   86cc0:	003e7d06 	br	866b8 <___vfprintf_internal_r+0xa38>
   86cc4:	d8814c17 	ldw	r2,1328(sp)
   86cc8:	b8c00007 	ldb	r3,0(r23)
   86ccc:	10801014 	ori	r2,r2,64
   86cd0:	d8814c15 	stw	r2,1328(sp)
   86cd4:	003c6906 	br	85e7c <___vfprintf_internal_r+0x1fc>
   86cd8:	d9414c17 	ldw	r5,1328(sp)
   86cdc:	2880020c 	andi	r2,r5,8
   86ce0:	1001e526 	beq	r2,zero,87478 <___vfprintf_internal_r+0x17f8>
   86ce4:	39800017 	ldw	r6,0(r7)
   86ce8:	38800204 	addi	r2,r7,8
   86cec:	d8814015 	stw	r2,1280(sp)
   86cf0:	d9814215 	stw	r6,1288(sp)
   86cf4:	39c00117 	ldw	r7,4(r7)
   86cf8:	d9c14315 	stw	r7,1292(sp)
   86cfc:	d9014217 	ldw	r4,1288(sp)
   86d00:	d9414317 	ldw	r5,1292(sp)
   86d04:	008c7300 	call	8c730 <__isinfd>
   86d08:	10021d26 	beq	r2,zero,87580 <___vfprintf_internal_r+0x1900>
   86d0c:	d9014217 	ldw	r4,1288(sp)
   86d10:	d9414317 	ldw	r5,1292(sp)
   86d14:	000d883a 	mov	r6,zero
   86d18:	000f883a 	mov	r7,zero
   86d1c:	008e8cc0 	call	8e8cc <__ltdf2>
   86d20:	1002d016 	blt	r2,zero,87864 <___vfprintf_internal_r+0x1be4>
   86d24:	d9414d17 	ldw	r5,1332(sp)
   86d28:	008011c4 	movi	r2,71
   86d2c:	11421016 	blt	r2,r5,87570 <___vfprintf_internal_r+0x18f0>
   86d30:	01800274 	movhi	r6,9
   86d34:	3188dd04 	addi	r6,r6,9076
   86d38:	d9814115 	stw	r6,1284(sp)
   86d3c:	d9014c17 	ldw	r4,1328(sp)
   86d40:	00c000c4 	movi	r3,3
   86d44:	00bfdfc4 	movi	r2,-129
   86d48:	2088703a 	and	r4,r4,r2
   86d4c:	180f883a 	mov	r7,r3
   86d50:	d8c14515 	stw	r3,1300(sp)
   86d54:	d9014c15 	stw	r4,1328(sp)
   86d58:	d8014615 	stw	zero,1304(sp)
   86d5c:	003e6a06 	br	86708 <___vfprintf_internal_r+0xa88>
   86d60:	38800017 	ldw	r2,0(r7)
   86d64:	00c00044 	movi	r3,1
   86d68:	39c00104 	addi	r7,r7,4
   86d6c:	d9c14015 	stw	r7,1280(sp)
   86d70:	d9000f04 	addi	r4,sp,60
   86d74:	180f883a 	mov	r7,r3
   86d78:	d8c14515 	stw	r3,1300(sp)
   86d7c:	d9014115 	stw	r4,1284(sp)
   86d80:	d8800f05 	stb	r2,60(sp)
   86d84:	d8000405 	stb	zero,16(sp)
   86d88:	003cac06 	br	8603c <___vfprintf_internal_r+0x3bc>
   86d8c:	01400274 	movhi	r5,9
   86d90:	2948e304 	addi	r5,r5,9100
   86d94:	d9414415 	stw	r5,1296(sp)
   86d98:	d9814c17 	ldw	r6,1328(sp)
   86d9c:	3080080c 	andi	r2,r6,32
   86da0:	1000ff26 	beq	r2,zero,871a0 <___vfprintf_internal_r+0x1520>
   86da4:	3c000017 	ldw	r16,0(r7)
   86da8:	3c400117 	ldw	r17,4(r7)
   86dac:	38800204 	addi	r2,r7,8
   86db0:	d8814015 	stw	r2,1280(sp)
   86db4:	d9414c17 	ldw	r5,1328(sp)
   86db8:	2880004c 	andi	r2,r5,1
   86dbc:	1005003a 	cmpeq	r2,r2,zero
   86dc0:	1000b91e 	bne	r2,zero,870a8 <___vfprintf_internal_r+0x1428>
   86dc4:	8444b03a 	or	r2,r16,r17
   86dc8:	1000b726 	beq	r2,zero,870a8 <___vfprintf_internal_r+0x1428>
   86dcc:	d9814d17 	ldw	r6,1332(sp)
   86dd0:	29400094 	ori	r5,r5,2
   86dd4:	00800c04 	movi	r2,48
   86dd8:	01000084 	movi	r4,2
   86ddc:	d9414c15 	stw	r5,1328(sp)
   86de0:	d8800445 	stb	r2,17(sp)
   86de4:	d9800485 	stb	r6,18(sp)
   86de8:	d8000405 	stb	zero,16(sp)
   86dec:	003e3206 	br	866b8 <___vfprintf_internal_r+0xa38>
   86df0:	01800274 	movhi	r6,9
   86df4:	3188d804 	addi	r6,r6,9056
   86df8:	d9814415 	stw	r6,1296(sp)
   86dfc:	003fe606 	br	86d98 <___vfprintf_internal_r+0x1118>
   86e00:	00800ac4 	movi	r2,43
   86e04:	d8800405 	stb	r2,16(sp)
   86e08:	b8c00007 	ldb	r3,0(r23)
   86e0c:	003c1b06 	br	85e7c <___vfprintf_internal_r+0x1fc>
   86e10:	d8814c17 	ldw	r2,1328(sp)
   86e14:	b8c00007 	ldb	r3,0(r23)
   86e18:	10800054 	ori	r2,r2,1
   86e1c:	d8814c15 	stw	r2,1328(sp)
   86e20:	003c1606 	br	85e7c <___vfprintf_internal_r+0x1fc>
   86e24:	d8800407 	ldb	r2,16(sp)
   86e28:	10004c1e 	bne	r2,zero,86f5c <___vfprintf_internal_r+0x12dc>
   86e2c:	00800804 	movi	r2,32
   86e30:	d8800405 	stb	r2,16(sp)
   86e34:	b8c00007 	ldb	r3,0(r23)
   86e38:	003c1006 	br	85e7c <___vfprintf_internal_r+0x1fc>
   86e3c:	d9814c17 	ldw	r6,1328(sp)
   86e40:	b8c00007 	ldb	r3,0(r23)
   86e44:	31800214 	ori	r6,r6,8
   86e48:	d9814c15 	stw	r6,1328(sp)
   86e4c:	003c0b06 	br	85e7c <___vfprintf_internal_r+0x1fc>
   86e50:	0009883a 	mov	r4,zero
   86e54:	04000244 	movi	r16,9
   86e58:	01400284 	movi	r5,10
   86e5c:	d9c15115 	stw	r7,1348(sp)
   86e60:	008597c0 	call	8597c <__mulsi3>
   86e64:	b9000007 	ldb	r4,0(r23)
   86e68:	d8c14d17 	ldw	r3,1332(sp)
   86e6c:	bdc00044 	addi	r23,r23,1
   86e70:	d9014d15 	stw	r4,1332(sp)
   86e74:	d9414d17 	ldw	r5,1332(sp)
   86e78:	1885883a 	add	r2,r3,r2
   86e7c:	113ff404 	addi	r4,r2,-48
   86e80:	28bff404 	addi	r2,r5,-48
   86e84:	d9c15117 	ldw	r7,1348(sp)
   86e88:	80bff32e 	bgeu	r16,r2,86e58 <___vfprintf_internal_r+0x11d8>
   86e8c:	d9014a15 	stw	r4,1320(sp)
   86e90:	003bfc06 	br	85e84 <___vfprintf_internal_r+0x204>
   86e94:	d8814c17 	ldw	r2,1328(sp)
   86e98:	b8c00007 	ldb	r3,0(r23)
   86e9c:	10802014 	ori	r2,r2,128
   86ea0:	d8814c15 	stw	r2,1328(sp)
   86ea4:	003bf506 	br	85e7c <___vfprintf_internal_r+0x1fc>
   86ea8:	b8c00007 	ldb	r3,0(r23)
   86eac:	00800a84 	movi	r2,42
   86eb0:	bdc00044 	addi	r23,r23,1
   86eb4:	18831826 	beq	r3,r2,87b18 <___vfprintf_internal_r+0x1e98>
   86eb8:	d8c14d15 	stw	r3,1332(sp)
   86ebc:	18bff404 	addi	r2,r3,-48
   86ec0:	00c00244 	movi	r3,9
   86ec4:	18827b36 	bltu	r3,r2,878b4 <___vfprintf_internal_r+0x1c34>
   86ec8:	1821883a 	mov	r16,r3
   86ecc:	0009883a 	mov	r4,zero
   86ed0:	01400284 	movi	r5,10
   86ed4:	d9c15115 	stw	r7,1348(sp)
   86ed8:	008597c0 	call	8597c <__mulsi3>
   86edc:	d9414d17 	ldw	r5,1332(sp)
   86ee0:	b9800007 	ldb	r6,0(r23)
   86ee4:	d9c15117 	ldw	r7,1348(sp)
   86ee8:	1145883a 	add	r2,r2,r5
   86eec:	113ff404 	addi	r4,r2,-48
   86ef0:	30bff404 	addi	r2,r6,-48
   86ef4:	d9814d15 	stw	r6,1332(sp)
   86ef8:	bdc00044 	addi	r23,r23,1
   86efc:	80bff42e 	bgeu	r16,r2,86ed0 <___vfprintf_internal_r+0x1250>
   86f00:	2027883a 	mov	r19,r4
   86f04:	203bdf0e 	bge	r4,zero,85e84 <___vfprintf_internal_r+0x204>
   86f08:	04ffffc4 	movi	r19,-1
   86f0c:	003bdd06 	br	85e84 <___vfprintf_internal_r+0x204>
   86f10:	d8000405 	stb	zero,16(sp)
   86f14:	39800017 	ldw	r6,0(r7)
   86f18:	39c00104 	addi	r7,r7,4
   86f1c:	d9c14015 	stw	r7,1280(sp)
   86f20:	d9814115 	stw	r6,1284(sp)
   86f24:	3001c926 	beq	r6,zero,8764c <___vfprintf_internal_r+0x19cc>
   86f28:	98000e16 	blt	r19,zero,86f64 <___vfprintf_internal_r+0x12e4>
   86f2c:	d9014117 	ldw	r4,1284(sp)
   86f30:	000b883a 	mov	r5,zero
   86f34:	980d883a 	mov	r6,r19
   86f38:	008adb40 	call	8adb4 <memchr>
   86f3c:	10025926 	beq	r2,zero,878a4 <___vfprintf_internal_r+0x1c24>
   86f40:	d8c14117 	ldw	r3,1284(sp)
   86f44:	10cfc83a 	sub	r7,r2,r3
   86f48:	99c19e16 	blt	r19,r7,875c4 <___vfprintf_internal_r+0x1944>
   86f4c:	d9c14515 	stw	r7,1300(sp)
   86f50:	38000916 	blt	r7,zero,86f78 <___vfprintf_internal_r+0x12f8>
   86f54:	d8014615 	stw	zero,1304(sp)
   86f58:	003deb06 	br	86708 <___vfprintf_internal_r+0xa88>
   86f5c:	b8c00007 	ldb	r3,0(r23)
   86f60:	003bc606 	br	85e7c <___vfprintf_internal_r+0x1fc>
   86f64:	d9014117 	ldw	r4,1284(sp)
   86f68:	0085bb40 	call	85bb4 <strlen>
   86f6c:	d8814515 	stw	r2,1300(sp)
   86f70:	100f883a 	mov	r7,r2
   86f74:	103ff70e 	bge	r2,zero,86f54 <___vfprintf_internal_r+0x12d4>
   86f78:	d8014515 	stw	zero,1300(sp)
   86f7c:	d8014615 	stw	zero,1304(sp)
   86f80:	003de106 	br	86708 <___vfprintf_internal_r+0xa88>
   86f84:	20c03fcc 	andi	r3,r4,255
   86f88:	00800044 	movi	r2,1
   86f8c:	18802d26 	beq	r3,r2,87044 <___vfprintf_internal_r+0x13c4>
   86f90:	18800e36 	bltu	r3,r2,86fcc <___vfprintf_internal_r+0x134c>
   86f94:	00800084 	movi	r2,2
   86f98:	1880fa26 	beq	r3,r2,87384 <___vfprintf_internal_r+0x1704>
   86f9c:	01000274 	movhi	r4,9
   86fa0:	2108e804 	addi	r4,r4,9120
   86fa4:	0085bb40 	call	85bb4 <strlen>
   86fa8:	100f883a 	mov	r7,r2
   86fac:	dcc14515 	stw	r19,1300(sp)
   86fb0:	9880010e 	bge	r19,r2,86fb8 <___vfprintf_internal_r+0x1338>
   86fb4:	d8814515 	stw	r2,1300(sp)
   86fb8:	00800274 	movhi	r2,9
   86fbc:	1088e804 	addi	r2,r2,9120
   86fc0:	dcc14615 	stw	r19,1304(sp)
   86fc4:	d8814115 	stw	r2,1284(sp)
   86fc8:	003dcf06 	br	86708 <___vfprintf_internal_r+0xa88>
   86fcc:	d9401904 	addi	r5,sp,100
   86fd0:	dd000f04 	addi	r20,sp,60
   86fd4:	d9414115 	stw	r5,1284(sp)
   86fd8:	880a977a 	slli	r5,r17,29
   86fdc:	d9814117 	ldw	r6,1284(sp)
   86fe0:	8004d0fa 	srli	r2,r16,3
   86fe4:	8806d0fa 	srli	r3,r17,3
   86fe8:	810001cc 	andi	r4,r16,7
   86fec:	2884b03a 	or	r2,r5,r2
   86ff0:	31bfffc4 	addi	r6,r6,-1
   86ff4:	21000c04 	addi	r4,r4,48
   86ff8:	d9814115 	stw	r6,1284(sp)
   86ffc:	10cab03a 	or	r5,r2,r3
   87000:	31000005 	stb	r4,0(r6)
   87004:	1021883a 	mov	r16,r2
   87008:	1823883a 	mov	r17,r3
   8700c:	283ff21e 	bne	r5,zero,86fd8 <___vfprintf_internal_r+0x1358>
   87010:	d8c14c17 	ldw	r3,1328(sp)
   87014:	1880004c 	andi	r2,r3,1
   87018:	1005003a 	cmpeq	r2,r2,zero
   8701c:	103db31e 	bne	r2,zero,866ec <___vfprintf_internal_r+0xa6c>
   87020:	20803fcc 	andi	r2,r4,255
   87024:	1080201c 	xori	r2,r2,128
   87028:	10bfe004 	addi	r2,r2,-128
   8702c:	00c00c04 	movi	r3,48
   87030:	10fdae26 	beq	r2,r3,866ec <___vfprintf_internal_r+0xa6c>
   87034:	31bfffc4 	addi	r6,r6,-1
   87038:	d9814115 	stw	r6,1284(sp)
   8703c:	30c00005 	stb	r3,0(r6)
   87040:	003daa06 	br	866ec <___vfprintf_internal_r+0xa6c>
   87044:	88800068 	cmpgeui	r2,r17,1
   87048:	10002c1e 	bne	r2,zero,870fc <___vfprintf_internal_r+0x147c>
   8704c:	8800021e 	bne	r17,zero,87058 <___vfprintf_internal_r+0x13d8>
   87050:	00800244 	movi	r2,9
   87054:	14002936 	bltu	r2,r16,870fc <___vfprintf_internal_r+0x147c>
   87058:	d90018c4 	addi	r4,sp,99
   8705c:	dd000f04 	addi	r20,sp,60
   87060:	d9014115 	stw	r4,1284(sp)
   87064:	d9014117 	ldw	r4,1284(sp)
   87068:	80800c04 	addi	r2,r16,48
   8706c:	20800005 	stb	r2,0(r4)
   87070:	003d9e06 	br	866ec <___vfprintf_internal_r+0xa6c>
   87074:	dc400d17 	ldw	r17,52(sp)
   87078:	07000274 	movhi	fp,9
   8707c:	e708ef84 	addi	fp,fp,9150
   87080:	9425883a 	add	r18,r18,r16
   87084:	8c400044 	addi	r17,r17,1
   87088:	008001c4 	movi	r2,7
   8708c:	1f000015 	stw	fp,0(r3)
   87090:	1c000115 	stw	r16,4(r3)
   87094:	dc800e15 	stw	r18,56(sp)
   87098:	dc400d15 	stw	r17,52(sp)
   8709c:	147ddc16 	blt	r2,r17,86810 <___vfprintf_internal_r+0xb90>
   870a0:	18c00204 	addi	r3,r3,8
   870a4:	003c7406 	br	86278 <___vfprintf_internal_r+0x5f8>
   870a8:	01000084 	movi	r4,2
   870ac:	d8000405 	stb	zero,16(sp)
   870b0:	003d8106 	br	866b8 <___vfprintf_internal_r+0xa38>
   870b4:	d9814c17 	ldw	r6,1328(sp)
   870b8:	30c4703a 	and	r2,r6,r3
   870bc:	1005003a 	cmpeq	r2,r2,zero
   870c0:	103cb326 	beq	r2,zero,86390 <___vfprintf_internal_r+0x710>
   870c4:	d9014117 	ldw	r4,1284(sp)
   870c8:	94800044 	addi	r18,r18,1
   870cc:	8c400044 	addi	r17,r17,1
   870d0:	008001c4 	movi	r2,7
   870d4:	a9000015 	stw	r4,0(r21)
   870d8:	a8c00115 	stw	r3,4(r21)
   870dc:	dc800e15 	stw	r18,56(sp)
   870e0:	dc400d15 	stw	r17,52(sp)
   870e4:	147e6016 	blt	r2,r17,86a68 <___vfprintf_internal_r+0xde8>
   870e8:	acc00204 	addi	r19,r21,8
   870ec:	003cd106 	br	86434 <___vfprintf_internal_r+0x7b4>
   870f0:	07000274 	movhi	fp,9
   870f4:	e708ef84 	addi	fp,fp,9150
   870f8:	003c4906 	br	86220 <___vfprintf_internal_r+0x5a0>
   870fc:	dd000f04 	addi	r20,sp,60
   87100:	dc801904 	addi	r18,sp,100
   87104:	8009883a 	mov	r4,r16
   87108:	880b883a 	mov	r5,r17
   8710c:	01800284 	movi	r6,10
   87110:	000f883a 	mov	r7,zero
   87114:	008d52c0 	call	8d52c <__umoddi3>
   87118:	12000c04 	addi	r8,r2,48
   8711c:	94bfffc4 	addi	r18,r18,-1
   87120:	8009883a 	mov	r4,r16
   87124:	880b883a 	mov	r5,r17
   87128:	01800284 	movi	r6,10
   8712c:	000f883a 	mov	r7,zero
   87130:	92000005 	stb	r8,0(r18)
   87134:	008cec00 	call	8cec0 <__udivdi3>
   87138:	1009883a 	mov	r4,r2
   8713c:	1021883a 	mov	r16,r2
   87140:	18800068 	cmpgeui	r2,r3,1
   87144:	1823883a 	mov	r17,r3
   87148:	103fee1e 	bne	r2,zero,87104 <___vfprintf_internal_r+0x1484>
   8714c:	1800021e 	bne	r3,zero,87158 <___vfprintf_internal_r+0x14d8>
   87150:	00800244 	movi	r2,9
   87154:	113feb36 	bltu	r2,r4,87104 <___vfprintf_internal_r+0x1484>
   87158:	94bfffc4 	addi	r18,r18,-1
   8715c:	dc814115 	stw	r18,1284(sp)
   87160:	003fc006 	br	87064 <___vfprintf_internal_r+0x13e4>
   87164:	d9014c17 	ldw	r4,1328(sp)
   87168:	2080004c 	andi	r2,r4,1
   8716c:	10009a1e 	bne	r2,zero,873d8 <___vfprintf_internal_r+0x1758>
   87170:	d9401904 	addi	r5,sp,100
   87174:	dd000f04 	addi	r20,sp,60
   87178:	d9414115 	stw	r5,1284(sp)
   8717c:	003d5b06 	br	866ec <___vfprintf_internal_r+0xa6c>
   87180:	d9014f17 	ldw	r4,1340(sp)
   87184:	b00b883a 	mov	r5,r22
   87188:	d9800c04 	addi	r6,sp,48
   8718c:	0085c280 	call	85c28 <__sprint_r>
   87190:	103c731e 	bne	r2,zero,86360 <___vfprintf_internal_r+0x6e0>
   87194:	dc800e17 	ldw	r18,56(sp)
   87198:	d8c01904 	addi	r3,sp,100
   8719c:	003cf906 	br	86584 <___vfprintf_internal_r+0x904>
   871a0:	d8c14c17 	ldw	r3,1328(sp)
   871a4:	1880040c 	andi	r2,r3,16
   871a8:	1000711e 	bne	r2,zero,87370 <___vfprintf_internal_r+0x16f0>
   871ac:	d9014c17 	ldw	r4,1328(sp)
   871b0:	2080100c 	andi	r2,r4,64
   871b4:	10006e26 	beq	r2,zero,87370 <___vfprintf_internal_r+0x16f0>
   871b8:	3c00000b 	ldhu	r16,0(r7)
   871bc:	0023883a 	mov	r17,zero
   871c0:	39c00104 	addi	r7,r7,4
   871c4:	d9c14015 	stw	r7,1280(sp)
   871c8:	003efa06 	br	86db4 <___vfprintf_internal_r+0x1134>
   871cc:	dc400d17 	ldw	r17,52(sp)
   871d0:	07000274 	movhi	fp,9
   871d4:	e708ef84 	addi	fp,fp,9150
   871d8:	9425883a 	add	r18,r18,r16
   871dc:	8c400044 	addi	r17,r17,1
   871e0:	008001c4 	movi	r2,7
   871e4:	1f000015 	stw	fp,0(r3)
   871e8:	1c000115 	stw	r16,4(r3)
   871ec:	dc800e15 	stw	r18,56(sp)
   871f0:	dc400d15 	stw	r17,52(sp)
   871f4:	147d7016 	blt	r2,r17,867b8 <___vfprintf_internal_r+0xb38>
   871f8:	18c00204 	addi	r3,r3,8
   871fc:	003d7506 	br	867d4 <___vfprintf_internal_r+0xb54>
   87200:	dc800e17 	ldw	r18,56(sp)
   87204:	dc400d17 	ldw	r17,52(sp)
   87208:	07000274 	movhi	fp,9
   8720c:	e708f384 	addi	fp,fp,9166
   87210:	003bba06 	br	860fc <___vfprintf_internal_r+0x47c>
   87214:	d9014f17 	ldw	r4,1340(sp)
   87218:	b00b883a 	mov	r5,r22
   8721c:	d9800c04 	addi	r6,sp,48
   87220:	0085c280 	call	85c28 <__sprint_r>
   87224:	103c4e1e 	bne	r2,zero,86360 <___vfprintf_internal_r+0x6e0>
   87228:	dc800e17 	ldw	r18,56(sp)
   8722c:	d8c01904 	addi	r3,sp,100
   87230:	003ce306 	br	865c0 <___vfprintf_internal_r+0x940>
   87234:	3c000017 	ldw	r16,0(r7)
   87238:	0009883a 	mov	r4,zero
   8723c:	39c00104 	addi	r7,r7,4
   87240:	0023883a 	mov	r17,zero
   87244:	d9c14015 	stw	r7,1280(sp)
   87248:	d8000405 	stb	zero,16(sp)
   8724c:	003d1a06 	br	866b8 <___vfprintf_internal_r+0xa38>
   87250:	38800017 	ldw	r2,0(r7)
   87254:	39c00104 	addi	r7,r7,4
   87258:	d9c14015 	stw	r7,1280(sp)
   8725c:	1023d7fa 	srai	r17,r2,31
   87260:	1021883a 	mov	r16,r2
   87264:	003d1206 	br	866b0 <___vfprintf_internal_r+0xa30>
   87268:	3c000017 	ldw	r16,0(r7)
   8726c:	01000044 	movi	r4,1
   87270:	39c00104 	addi	r7,r7,4
   87274:	0023883a 	mov	r17,zero
   87278:	d9c14015 	stw	r7,1280(sp)
   8727c:	d8000405 	stb	zero,16(sp)
   87280:	003d0d06 	br	866b8 <___vfprintf_internal_r+0xa38>
   87284:	00800274 	movhi	r2,9
   87288:	1088ef04 	addi	r2,r2,9148
   8728c:	94800044 	addi	r18,r18,1
   87290:	8c400044 	addi	r17,r17,1
   87294:	a8800015 	stw	r2,0(r21)
   87298:	00c00044 	movi	r3,1
   8729c:	008001c4 	movi	r2,7
   872a0:	a8c00115 	stw	r3,4(r21)
   872a4:	dc800e15 	stw	r18,56(sp)
   872a8:	dc400d15 	stw	r17,52(sp)
   872ac:	1440ca16 	blt	r2,r17,875d8 <___vfprintf_internal_r+0x1958>
   872b0:	a8c00204 	addi	r3,r21,8
   872b4:	2000061e 	bne	r4,zero,872d0 <___vfprintf_internal_r+0x1650>
   872b8:	d9414717 	ldw	r5,1308(sp)
   872bc:	2800041e 	bne	r5,zero,872d0 <___vfprintf_internal_r+0x1650>
   872c0:	d9814c17 	ldw	r6,1328(sp)
   872c4:	3080004c 	andi	r2,r6,1
   872c8:	1005003a 	cmpeq	r2,r2,zero
   872cc:	103bea1e 	bne	r2,zero,86278 <___vfprintf_internal_r+0x5f8>
   872d0:	00800044 	movi	r2,1
   872d4:	dc400d17 	ldw	r17,52(sp)
   872d8:	18800115 	stw	r2,4(r3)
   872dc:	d8814917 	ldw	r2,1316(sp)
   872e0:	94800044 	addi	r18,r18,1
   872e4:	8c400044 	addi	r17,r17,1
   872e8:	18800015 	stw	r2,0(r3)
   872ec:	008001c4 	movi	r2,7
   872f0:	dc800e15 	stw	r18,56(sp)
   872f4:	dc400d15 	stw	r17,52(sp)
   872f8:	1440ca16 	blt	r2,r17,87624 <___vfprintf_internal_r+0x19a4>
   872fc:	18c00204 	addi	r3,r3,8
   87300:	0121c83a 	sub	r16,zero,r4
   87304:	0400500e 	bge	zero,r16,87448 <___vfprintf_internal_r+0x17c8>
   87308:	00800404 	movi	r2,16
   8730c:	1400800e 	bge	r2,r16,87510 <___vfprintf_internal_r+0x1890>
   87310:	1027883a 	mov	r19,r2
   87314:	07000274 	movhi	fp,9
   87318:	e708ef84 	addi	fp,fp,9150
   8731c:	050001c4 	movi	r20,7
   87320:	00000306 	br	87330 <___vfprintf_internal_r+0x16b0>
   87324:	18c00204 	addi	r3,r3,8
   87328:	843ffc04 	addi	r16,r16,-16
   8732c:	9c007a0e 	bge	r19,r16,87518 <___vfprintf_internal_r+0x1898>
   87330:	94800404 	addi	r18,r18,16
   87334:	8c400044 	addi	r17,r17,1
   87338:	1f000015 	stw	fp,0(r3)
   8733c:	1cc00115 	stw	r19,4(r3)
   87340:	dc800e15 	stw	r18,56(sp)
   87344:	dc400d15 	stw	r17,52(sp)
   87348:	a47ff60e 	bge	r20,r17,87324 <___vfprintf_internal_r+0x16a4>
   8734c:	d9014f17 	ldw	r4,1340(sp)
   87350:	b00b883a 	mov	r5,r22
   87354:	d9800c04 	addi	r6,sp,48
   87358:	0085c280 	call	85c28 <__sprint_r>
   8735c:	103c001e 	bne	r2,zero,86360 <___vfprintf_internal_r+0x6e0>
   87360:	dc800e17 	ldw	r18,56(sp)
   87364:	dc400d17 	ldw	r17,52(sp)
   87368:	d8c01904 	addi	r3,sp,100
   8736c:	003fee06 	br	87328 <___vfprintf_internal_r+0x16a8>
   87370:	3c000017 	ldw	r16,0(r7)
   87374:	0023883a 	mov	r17,zero
   87378:	39c00104 	addi	r7,r7,4
   8737c:	d9c14015 	stw	r7,1280(sp)
   87380:	003e8c06 	br	86db4 <___vfprintf_internal_r+0x1134>
   87384:	d9401904 	addi	r5,sp,100
   87388:	dd000f04 	addi	r20,sp,60
   8738c:	d9414115 	stw	r5,1284(sp)
   87390:	d9814417 	ldw	r6,1296(sp)
   87394:	880a973a 	slli	r5,r17,28
   87398:	8004d13a 	srli	r2,r16,4
   8739c:	810003cc 	andi	r4,r16,15
   873a0:	3109883a 	add	r4,r6,r4
   873a4:	2884b03a 	or	r2,r5,r2
   873a8:	21400003 	ldbu	r5,0(r4)
   873ac:	d9014117 	ldw	r4,1284(sp)
   873b0:	8806d13a 	srli	r3,r17,4
   873b4:	1021883a 	mov	r16,r2
   873b8:	213fffc4 	addi	r4,r4,-1
   873bc:	d9014115 	stw	r4,1284(sp)
   873c0:	d9814117 	ldw	r6,1284(sp)
   873c4:	10c8b03a 	or	r4,r2,r3
   873c8:	1823883a 	mov	r17,r3
   873cc:	31400005 	stb	r5,0(r6)
   873d0:	203fef1e 	bne	r4,zero,87390 <___vfprintf_internal_r+0x1710>
   873d4:	003cc506 	br	866ec <___vfprintf_internal_r+0xa6c>
   873d8:	00800c04 	movi	r2,48
   873dc:	d98018c4 	addi	r6,sp,99
   873e0:	dd000f04 	addi	r20,sp,60
   873e4:	d88018c5 	stb	r2,99(sp)
   873e8:	d9814115 	stw	r6,1284(sp)
   873ec:	003cbf06 	br	866ec <___vfprintf_internal_r+0xa6c>
   873f0:	dc400d17 	ldw	r17,52(sp)
   873f4:	07000274 	movhi	fp,9
   873f8:	e708f384 	addi	fp,fp,9166
   873fc:	003bc106 	br	86304 <___vfprintf_internal_r+0x684>
   87400:	d9414c17 	ldw	r5,1328(sp)
   87404:	2880040c 	andi	r2,r5,16
   87408:	10007c26 	beq	r2,zero,875fc <___vfprintf_internal_r+0x197c>
   8740c:	38800017 	ldw	r2,0(r7)
   87410:	39c00104 	addi	r7,r7,4
   87414:	d9c14015 	stw	r7,1280(sp)
   87418:	d9814b17 	ldw	r6,1324(sp)
   8741c:	d9c14017 	ldw	r7,1280(sp)
   87420:	11800015 	stw	r6,0(r2)
   87424:	003a7206 	br	85df0 <___vfprintf_internal_r+0x170>
   87428:	d9014f17 	ldw	r4,1340(sp)
   8742c:	b00b883a 	mov	r5,r22
   87430:	d9800c04 	addi	r6,sp,48
   87434:	0085c280 	call	85c28 <__sprint_r>
   87438:	103bc91e 	bne	r2,zero,86360 <___vfprintf_internal_r+0x6e0>
   8743c:	dc800e17 	ldw	r18,56(sp)
   87440:	dc400d17 	ldw	r17,52(sp)
   87444:	d8c01904 	addi	r3,sp,100
   87448:	d9014717 	ldw	r4,1308(sp)
   8744c:	d9414117 	ldw	r5,1284(sp)
   87450:	8c400044 	addi	r17,r17,1
   87454:	9125883a 	add	r18,r18,r4
   87458:	008001c4 	movi	r2,7
   8745c:	19400015 	stw	r5,0(r3)
   87460:	19000115 	stw	r4,4(r3)
   87464:	dc800e15 	stw	r18,56(sp)
   87468:	dc400d15 	stw	r17,52(sp)
   8746c:	147ce816 	blt	r2,r17,86810 <___vfprintf_internal_r+0xb90>
   87470:	18c00204 	addi	r3,r3,8
   87474:	003b8006 	br	86278 <___vfprintf_internal_r+0x5f8>
   87478:	38c00017 	ldw	r3,0(r7)
   8747c:	39000204 	addi	r4,r7,8
   87480:	d9014015 	stw	r4,1280(sp)
   87484:	d8c14215 	stw	r3,1288(sp)
   87488:	39c00117 	ldw	r7,4(r7)
   8748c:	d9c14315 	stw	r7,1292(sp)
   87490:	003e1a06 	br	86cfc <___vfprintf_internal_r+0x107c>
   87494:	0005883a 	mov	r2,zero
   87498:	1409c83a 	sub	r4,r2,r16
   8749c:	1105803a 	cmpltu	r2,r2,r4
   874a0:	044bc83a 	sub	r5,zero,r17
   874a4:	2885c83a 	sub	r2,r5,r2
   874a8:	2021883a 	mov	r16,r4
   874ac:	1023883a 	mov	r17,r2
   874b0:	01000044 	movi	r4,1
   874b4:	00800b44 	movi	r2,45
   874b8:	d8800405 	stb	r2,16(sp)
   874bc:	003c7e06 	br	866b8 <___vfprintf_internal_r+0xa38>
   874c0:	d9014f17 	ldw	r4,1340(sp)
   874c4:	b00b883a 	mov	r5,r22
   874c8:	d9800c04 	addi	r6,sp,48
   874cc:	0085c280 	call	85c28 <__sprint_r>
   874d0:	103ba31e 	bne	r2,zero,86360 <___vfprintf_internal_r+0x6e0>
   874d4:	dc800e17 	ldw	r18,56(sp)
   874d8:	dc400d17 	ldw	r17,52(sp)
   874dc:	d9000517 	ldw	r4,20(sp)
   874e0:	d9401904 	addi	r5,sp,100
   874e4:	003da106 	br	86b6c <___vfprintf_internal_r+0xeec>
   874e8:	d9014f17 	ldw	r4,1340(sp)
   874ec:	b00b883a 	mov	r5,r22
   874f0:	d9800c04 	addi	r6,sp,48
   874f4:	0085c280 	call	85c28 <__sprint_r>
   874f8:	103b991e 	bne	r2,zero,86360 <___vfprintf_internal_r+0x6e0>
   874fc:	dc800e17 	ldw	r18,56(sp)
   87500:	dc400d17 	ldw	r17,52(sp)
   87504:	d9000517 	ldw	r4,20(sp)
   87508:	d8c01904 	addi	r3,sp,100
   8750c:	003d8b06 	br	86b3c <___vfprintf_internal_r+0xebc>
   87510:	07000274 	movhi	fp,9
   87514:	e708ef84 	addi	fp,fp,9150
   87518:	9425883a 	add	r18,r18,r16
   8751c:	8c400044 	addi	r17,r17,1
   87520:	008001c4 	movi	r2,7
   87524:	1f000015 	stw	fp,0(r3)
   87528:	1c000115 	stw	r16,4(r3)
   8752c:	dc800e15 	stw	r18,56(sp)
   87530:	dc400d15 	stw	r17,52(sp)
   87534:	147fbc16 	blt	r2,r17,87428 <___vfprintf_internal_r+0x17a8>
   87538:	18c00204 	addi	r3,r3,8
   8753c:	003fc206 	br	87448 <___vfprintf_internal_r+0x17c8>
   87540:	d9014f17 	ldw	r4,1340(sp)
   87544:	b00b883a 	mov	r5,r22
   87548:	d9800c04 	addi	r6,sp,48
   8754c:	0085c280 	call	85c28 <__sprint_r>
   87550:	103b831e 	bne	r2,zero,86360 <___vfprintf_internal_r+0x6e0>
   87554:	dc800e17 	ldw	r18,56(sp)
   87558:	d9000517 	ldw	r4,20(sp)
   8755c:	d8c01904 	addi	r3,sp,100
   87560:	003cfc06 	br	86954 <___vfprintf_internal_r+0xcd4>
   87564:	07000274 	movhi	fp,9
   87568:	e708ef84 	addi	fp,fp,9150
   8756c:	003bde06 	br	864e8 <___vfprintf_internal_r+0x868>
   87570:	00800274 	movhi	r2,9
   87574:	1088de04 	addi	r2,r2,9080
   87578:	d8814115 	stw	r2,1284(sp)
   8757c:	003def06 	br	86d3c <___vfprintf_internal_r+0x10bc>
   87580:	d9014217 	ldw	r4,1288(sp)
   87584:	d9414317 	ldw	r5,1292(sp)
   87588:	008c7700 	call	8c770 <__isnand>
   8758c:	10003926 	beq	r2,zero,87674 <___vfprintf_internal_r+0x19f4>
   87590:	d9414d17 	ldw	r5,1332(sp)
   87594:	008011c4 	movi	r2,71
   87598:	1140ce16 	blt	r2,r5,878d4 <___vfprintf_internal_r+0x1c54>
   8759c:	01800274 	movhi	r6,9
   875a0:	3188df04 	addi	r6,r6,9084
   875a4:	d9814115 	stw	r6,1284(sp)
   875a8:	003de406 	br	86d3c <___vfprintf_internal_r+0x10bc>
   875ac:	d9014c17 	ldw	r4,1328(sp)
   875b0:	bdc00044 	addi	r23,r23,1
   875b4:	b8c00007 	ldb	r3,0(r23)
   875b8:	21000814 	ori	r4,r4,32
   875bc:	d9014c15 	stw	r4,1328(sp)
   875c0:	003a2e06 	br	85e7c <___vfprintf_internal_r+0x1fc>
   875c4:	dcc14515 	stw	r19,1300(sp)
   875c8:	98011016 	blt	r19,zero,87a0c <___vfprintf_internal_r+0x1d8c>
   875cc:	980f883a 	mov	r7,r19
   875d0:	d8014615 	stw	zero,1304(sp)
   875d4:	003c4c06 	br	86708 <___vfprintf_internal_r+0xa88>
   875d8:	d9014f17 	ldw	r4,1340(sp)
   875dc:	b00b883a 	mov	r5,r22
   875e0:	d9800c04 	addi	r6,sp,48
   875e4:	0085c280 	call	85c28 <__sprint_r>
   875e8:	103b5d1e 	bne	r2,zero,86360 <___vfprintf_internal_r+0x6e0>
   875ec:	dc800e17 	ldw	r18,56(sp)
   875f0:	d9000517 	ldw	r4,20(sp)
   875f4:	d8c01904 	addi	r3,sp,100
   875f8:	003f2e06 	br	872b4 <___vfprintf_internal_r+0x1634>
   875fc:	d8c14c17 	ldw	r3,1328(sp)
   87600:	1880100c 	andi	r2,r3,64
   87604:	1000a026 	beq	r2,zero,87888 <___vfprintf_internal_r+0x1c08>
   87608:	38800017 	ldw	r2,0(r7)
   8760c:	39c00104 	addi	r7,r7,4
   87610:	d9c14015 	stw	r7,1280(sp)
   87614:	d9014b17 	ldw	r4,1324(sp)
   87618:	d9c14017 	ldw	r7,1280(sp)
   8761c:	1100000d 	sth	r4,0(r2)
   87620:	0039f306 	br	85df0 <___vfprintf_internal_r+0x170>
   87624:	d9014f17 	ldw	r4,1340(sp)
   87628:	b00b883a 	mov	r5,r22
   8762c:	d9800c04 	addi	r6,sp,48
   87630:	0085c280 	call	85c28 <__sprint_r>
   87634:	103b4a1e 	bne	r2,zero,86360 <___vfprintf_internal_r+0x6e0>
   87638:	dc800e17 	ldw	r18,56(sp)
   8763c:	dc400d17 	ldw	r17,52(sp)
   87640:	d9000517 	ldw	r4,20(sp)
   87644:	d8c01904 	addi	r3,sp,100
   87648:	003f2d06 	br	87300 <___vfprintf_internal_r+0x1680>
   8764c:	00800184 	movi	r2,6
   87650:	14c09a36 	bltu	r2,r19,878bc <___vfprintf_internal_r+0x1c3c>
   87654:	dcc14515 	stw	r19,1300(sp)
   87658:	9800010e 	bge	r19,zero,87660 <___vfprintf_internal_r+0x19e0>
   8765c:	d8014515 	stw	zero,1300(sp)
   87660:	00800274 	movhi	r2,9
   87664:	1088e104 	addi	r2,r2,9092
   87668:	980f883a 	mov	r7,r19
   8766c:	d8814115 	stw	r2,1284(sp)
   87670:	003a7206 	br	8603c <___vfprintf_internal_r+0x3bc>
   87674:	00bfffc4 	movi	r2,-1
   87678:	9880e226 	beq	r19,r2,87a04 <___vfprintf_internal_r+0x1d84>
   8767c:	d9414d17 	ldw	r5,1332(sp)
   87680:	008019c4 	movi	r2,103
   87684:	2880dc26 	beq	r5,r2,879f8 <___vfprintf_internal_r+0x1d78>
   87688:	008011c4 	movi	r2,71
   8768c:	2880da26 	beq	r5,r2,879f8 <___vfprintf_internal_r+0x1d78>
   87690:	d9414c17 	ldw	r5,1328(sp)
   87694:	d9014317 	ldw	r4,1292(sp)
   87698:	d9814217 	ldw	r6,1288(sp)
   8769c:	29404014 	ori	r5,r5,256
   876a0:	d9414c15 	stw	r5,1328(sp)
   876a4:	2000cc16 	blt	r4,zero,879d8 <___vfprintf_internal_r+0x1d58>
   876a8:	3021883a 	mov	r16,r6
   876ac:	2023883a 	mov	r17,r4
   876b0:	0039883a 	mov	fp,zero
   876b4:	d9414d17 	ldw	r5,1332(sp)
   876b8:	00801984 	movi	r2,102
   876bc:	2880b726 	beq	r5,r2,8799c <___vfprintf_internal_r+0x1d1c>
   876c0:	00801184 	movi	r2,70
   876c4:	2880b526 	beq	r5,r2,8799c <___vfprintf_internal_r+0x1d1c>
   876c8:	00801944 	movi	r2,101
   876cc:	2880c826 	beq	r5,r2,879f0 <___vfprintf_internal_r+0x1d70>
   876d0:	00801144 	movi	r2,69
   876d4:	2880c626 	beq	r5,r2,879f0 <___vfprintf_internal_r+0x1d70>
   876d8:	9829883a 	mov	r20,r19
   876dc:	d9014f17 	ldw	r4,1340(sp)
   876e0:	d8800504 	addi	r2,sp,20
   876e4:	880d883a 	mov	r6,r17
   876e8:	d8800115 	stw	r2,4(sp)
   876ec:	d8c00604 	addi	r3,sp,24
   876f0:	d8800704 	addi	r2,sp,28
   876f4:	800b883a 	mov	r5,r16
   876f8:	01c00084 	movi	r7,2
   876fc:	d8c00215 	stw	r3,8(sp)
   87700:	d8800315 	stw	r2,12(sp)
   87704:	dd000015 	stw	r20,0(sp)
   87708:	0087ee80 	call	87ee8 <_dtoa_r>
   8770c:	d9814d17 	ldw	r6,1332(sp)
   87710:	d8814115 	stw	r2,1284(sp)
   87714:	008019c4 	movi	r2,103
   87718:	30809526 	beq	r6,r2,87970 <___vfprintf_internal_r+0x1cf0>
   8771c:	d8c14d17 	ldw	r3,1332(sp)
   87720:	008011c4 	movi	r2,71
   87724:	18809226 	beq	r3,r2,87970 <___vfprintf_internal_r+0x1cf0>
   87728:	d9414117 	ldw	r5,1284(sp)
   8772c:	d9814d17 	ldw	r6,1332(sp)
   87730:	00801984 	movi	r2,102
   87734:	2d25883a 	add	r18,r5,r20
   87738:	30808626 	beq	r6,r2,87954 <___vfprintf_internal_r+0x1cd4>
   8773c:	00801184 	movi	r2,70
   87740:	30808426 	beq	r6,r2,87954 <___vfprintf_internal_r+0x1cd4>
   87744:	000d883a 	mov	r6,zero
   87748:	000f883a 	mov	r7,zero
   8774c:	880b883a 	mov	r5,r17
   87750:	8009883a 	mov	r4,r16
   87754:	008e6ac0 	call	8e6ac <__eqdf2>
   87758:	1000751e 	bne	r2,zero,87930 <___vfprintf_internal_r+0x1cb0>
   8775c:	9005883a 	mov	r2,r18
   87760:	dc800715 	stw	r18,28(sp)
   87764:	d9014117 	ldw	r4,1284(sp)
   87768:	d9414d17 	ldw	r5,1332(sp)
   8776c:	00c019c4 	movi	r3,103
   87770:	1125c83a 	sub	r18,r2,r4
   87774:	28c06826 	beq	r5,r3,87918 <___vfprintf_internal_r+0x1c98>
   87778:	008011c4 	movi	r2,71
   8777c:	28806626 	beq	r5,r2,87918 <___vfprintf_internal_r+0x1c98>
   87780:	d9000517 	ldw	r4,20(sp)
   87784:	d8c14d17 	ldw	r3,1332(sp)
   87788:	00801944 	movi	r2,101
   8778c:	10c05516 	blt	r2,r3,878e4 <___vfprintf_internal_r+0x1c64>
   87790:	213fffc4 	addi	r4,r4,-1
   87794:	d9000515 	stw	r4,20(sp)
   87798:	d8c00805 	stb	r3,32(sp)
   8779c:	2021883a 	mov	r16,r4
   877a0:	2000c116 	blt	r4,zero,87aa8 <___vfprintf_internal_r+0x1e28>
   877a4:	00800ac4 	movi	r2,43
   877a8:	d8800845 	stb	r2,33(sp)
   877ac:	00800244 	movi	r2,9
   877b0:	1400af0e 	bge	r2,r16,87a70 <___vfprintf_internal_r+0x1df0>
   877b4:	1027883a 	mov	r19,r2
   877b8:	dc400b84 	addi	r17,sp,46
   877bc:	8009883a 	mov	r4,r16
   877c0:	01400284 	movi	r5,10
   877c4:	008590c0 	call	8590c <__modsi3>
   877c8:	10800c04 	addi	r2,r2,48
   877cc:	8c7fffc4 	addi	r17,r17,-1
   877d0:	8009883a 	mov	r4,r16
   877d4:	01400284 	movi	r5,10
   877d8:	88800005 	stb	r2,0(r17)
   877dc:	00858ac0 	call	858ac <__divsi3>
   877e0:	1021883a 	mov	r16,r2
   877e4:	98bff516 	blt	r19,r2,877bc <___vfprintf_internal_r+0x1b3c>
   877e8:	10c00c04 	addi	r3,r2,48
   877ec:	d88009c4 	addi	r2,sp,39
   877f0:	108001c4 	addi	r2,r2,7
   877f4:	897fffc4 	addi	r5,r17,-1
   877f8:	88ffffc5 	stb	r3,-1(r17)
   877fc:	2880a72e 	bgeu	r5,r2,87a9c <___vfprintf_internal_r+0x1e1c>
   87800:	1009883a 	mov	r4,r2
   87804:	d9800804 	addi	r6,sp,32
   87808:	d8c00884 	addi	r3,sp,34
   8780c:	28800003 	ldbu	r2,0(r5)
   87810:	29400044 	addi	r5,r5,1
   87814:	18800005 	stb	r2,0(r3)
   87818:	18c00044 	addi	r3,r3,1
   8781c:	293ffb36 	bltu	r5,r4,8780c <___vfprintf_internal_r+0x1b8c>
   87820:	1987c83a 	sub	r3,r3,r6
   87824:	00800044 	movi	r2,1
   87828:	d8c14815 	stw	r3,1312(sp)
   8782c:	90cf883a 	add	r7,r18,r3
   87830:	1480960e 	bge	r2,r18,87a8c <___vfprintf_internal_r+0x1e0c>
   87834:	39c00044 	addi	r7,r7,1
   87838:	d9c14515 	stw	r7,1300(sp)
   8783c:	38003416 	blt	r7,zero,87910 <___vfprintf_internal_r+0x1c90>
   87840:	e0803fcc 	andi	r2,fp,255
   87844:	1080201c 	xori	r2,r2,128
   87848:	10bfe004 	addi	r2,r2,-128
   8784c:	10004e26 	beq	r2,zero,87988 <___vfprintf_internal_r+0x1d08>
   87850:	00800b44 	movi	r2,45
   87854:	dc814715 	stw	r18,1308(sp)
   87858:	d8014615 	stw	zero,1304(sp)
   8785c:	d8800405 	stb	r2,16(sp)
   87860:	003bab06 	br	86710 <___vfprintf_internal_r+0xa90>
   87864:	00800b44 	movi	r2,45
   87868:	d8800405 	stb	r2,16(sp)
   8786c:	003d2d06 	br	86d24 <___vfprintf_internal_r+0x10a4>
   87870:	d9014f17 	ldw	r4,1340(sp)
   87874:	b00b883a 	mov	r5,r22
   87878:	d9800c04 	addi	r6,sp,48
   8787c:	0085c280 	call	85c28 <__sprint_r>
   87880:	103ab71e 	bne	r2,zero,86360 <___vfprintf_internal_r+0x6e0>
   87884:	003ab506 	br	8635c <___vfprintf_internal_r+0x6dc>
   87888:	38800017 	ldw	r2,0(r7)
   8788c:	39c00104 	addi	r7,r7,4
   87890:	d9c14015 	stw	r7,1280(sp)
   87894:	d9414b17 	ldw	r5,1324(sp)
   87898:	d9c14017 	ldw	r7,1280(sp)
   8789c:	11400015 	stw	r5,0(r2)
   878a0:	00395306 	br	85df0 <___vfprintf_internal_r+0x170>
   878a4:	980f883a 	mov	r7,r19
   878a8:	dcc14515 	stw	r19,1300(sp)
   878ac:	d8014615 	stw	zero,1304(sp)
   878b0:	003b9506 	br	86708 <___vfprintf_internal_r+0xa88>
   878b4:	0027883a 	mov	r19,zero
   878b8:	00397206 	br	85e84 <___vfprintf_internal_r+0x204>
   878bc:	00c00274 	movhi	r3,9
   878c0:	18c8e104 	addi	r3,r3,9092
   878c4:	100f883a 	mov	r7,r2
   878c8:	d8814515 	stw	r2,1300(sp)
   878cc:	d8c14115 	stw	r3,1284(sp)
   878d0:	0039da06 	br	8603c <___vfprintf_internal_r+0x3bc>
   878d4:	00800274 	movhi	r2,9
   878d8:	1088e004 	addi	r2,r2,9088
   878dc:	d8814115 	stw	r2,1284(sp)
   878e0:	003d1606 	br	86d3c <___vfprintf_internal_r+0x10bc>
   878e4:	d9414d17 	ldw	r5,1332(sp)
   878e8:	00801984 	movi	r2,102
   878ec:	28804926 	beq	r5,r2,87a14 <___vfprintf_internal_r+0x1d94>
   878f0:	200f883a 	mov	r7,r4
   878f4:	24805716 	blt	r4,r18,87a54 <___vfprintf_internal_r+0x1dd4>
   878f8:	d9414c17 	ldw	r5,1328(sp)
   878fc:	2880004c 	andi	r2,r5,1
   87900:	10000126 	beq	r2,zero,87908 <___vfprintf_internal_r+0x1c88>
   87904:	21c00044 	addi	r7,r4,1
   87908:	d9c14515 	stw	r7,1300(sp)
   8790c:	383fcc0e 	bge	r7,zero,87840 <___vfprintf_internal_r+0x1bc0>
   87910:	d8014515 	stw	zero,1300(sp)
   87914:	003fca06 	br	87840 <___vfprintf_internal_r+0x1bc0>
   87918:	d9000517 	ldw	r4,20(sp)
   8791c:	00bfff04 	movi	r2,-4
   87920:	1100480e 	bge	r2,r4,87a44 <___vfprintf_internal_r+0x1dc4>
   87924:	99004716 	blt	r19,r4,87a44 <___vfprintf_internal_r+0x1dc4>
   87928:	d8c14d15 	stw	r3,1332(sp)
   8792c:	003ff006 	br	878f0 <___vfprintf_internal_r+0x1c70>
   87930:	d8800717 	ldw	r2,28(sp)
   87934:	14bf8b2e 	bgeu	r2,r18,87764 <___vfprintf_internal_r+0x1ae4>
   87938:	9007883a 	mov	r3,r18
   8793c:	01000c04 	movi	r4,48
   87940:	11000005 	stb	r4,0(r2)
   87944:	10800044 	addi	r2,r2,1
   87948:	d8800715 	stw	r2,28(sp)
   8794c:	18bffc1e 	bne	r3,r2,87940 <___vfprintf_internal_r+0x1cc0>
   87950:	003f8406 	br	87764 <___vfprintf_internal_r+0x1ae4>
   87954:	d8814117 	ldw	r2,1284(sp)
   87958:	10c00007 	ldb	r3,0(r2)
   8795c:	00800c04 	movi	r2,48
   87960:	18805b26 	beq	r3,r2,87ad0 <___vfprintf_internal_r+0x1e50>
   87964:	d9000517 	ldw	r4,20(sp)
   87968:	9125883a 	add	r18,r18,r4
   8796c:	003f7506 	br	87744 <___vfprintf_internal_r+0x1ac4>
   87970:	d9014c17 	ldw	r4,1328(sp)
   87974:	2080004c 	andi	r2,r4,1
   87978:	1005003a 	cmpeq	r2,r2,zero
   8797c:	103f6a26 	beq	r2,zero,87728 <___vfprintf_internal_r+0x1aa8>
   87980:	d8800717 	ldw	r2,28(sp)
   87984:	003f7706 	br	87764 <___vfprintf_internal_r+0x1ae4>
   87988:	d9c14515 	stw	r7,1300(sp)
   8798c:	38004d16 	blt	r7,zero,87ac4 <___vfprintf_internal_r+0x1e44>
   87990:	dc814715 	stw	r18,1308(sp)
   87994:	d8014615 	stw	zero,1304(sp)
   87998:	003b5b06 	br	86708 <___vfprintf_internal_r+0xa88>
   8799c:	d9014f17 	ldw	r4,1340(sp)
   879a0:	d8800504 	addi	r2,sp,20
   879a4:	d8800115 	stw	r2,4(sp)
   879a8:	d8c00604 	addi	r3,sp,24
   879ac:	d8800704 	addi	r2,sp,28
   879b0:	800b883a 	mov	r5,r16
   879b4:	880d883a 	mov	r6,r17
   879b8:	01c000c4 	movi	r7,3
   879bc:	d8c00215 	stw	r3,8(sp)
   879c0:	d8800315 	stw	r2,12(sp)
   879c4:	dcc00015 	stw	r19,0(sp)
   879c8:	9829883a 	mov	r20,r19
   879cc:	0087ee80 	call	87ee8 <_dtoa_r>
   879d0:	d8814115 	stw	r2,1284(sp)
   879d4:	003f5106 	br	8771c <___vfprintf_internal_r+0x1a9c>
   879d8:	d8c14217 	ldw	r3,1288(sp)
   879dc:	d9014317 	ldw	r4,1292(sp)
   879e0:	07000b44 	movi	fp,45
   879e4:	1821883a 	mov	r16,r3
   879e8:	2460003c 	xorhi	r17,r4,32768
   879ec:	003f3106 	br	876b4 <___vfprintf_internal_r+0x1a34>
   879f0:	9d000044 	addi	r20,r19,1
   879f4:	003f3906 	br	876dc <___vfprintf_internal_r+0x1a5c>
   879f8:	983f251e 	bne	r19,zero,87690 <___vfprintf_internal_r+0x1a10>
   879fc:	04c00044 	movi	r19,1
   87a00:	003f2306 	br	87690 <___vfprintf_internal_r+0x1a10>
   87a04:	04c00184 	movi	r19,6
   87a08:	003f2106 	br	87690 <___vfprintf_internal_r+0x1a10>
   87a0c:	d8014515 	stw	zero,1300(sp)
   87a10:	003eee06 	br	875cc <___vfprintf_internal_r+0x194c>
   87a14:	200f883a 	mov	r7,r4
   87a18:	0100370e 	bge	zero,r4,87af8 <___vfprintf_internal_r+0x1e78>
   87a1c:	9800031e 	bne	r19,zero,87a2c <___vfprintf_internal_r+0x1dac>
   87a20:	d9814c17 	ldw	r6,1328(sp)
   87a24:	3080004c 	andi	r2,r6,1
   87a28:	103fb726 	beq	r2,zero,87908 <___vfprintf_internal_r+0x1c88>
   87a2c:	20800044 	addi	r2,r4,1
   87a30:	98a7883a 	add	r19,r19,r2
   87a34:	dcc14515 	stw	r19,1300(sp)
   87a38:	980f883a 	mov	r7,r19
   87a3c:	983f800e 	bge	r19,zero,87840 <___vfprintf_internal_r+0x1bc0>
   87a40:	003fb306 	br	87910 <___vfprintf_internal_r+0x1c90>
   87a44:	d9814d17 	ldw	r6,1332(sp)
   87a48:	31bfff84 	addi	r6,r6,-2
   87a4c:	d9814d15 	stw	r6,1332(sp)
   87a50:	003f4c06 	br	87784 <___vfprintf_internal_r+0x1b04>
   87a54:	0100180e 	bge	zero,r4,87ab8 <___vfprintf_internal_r+0x1e38>
   87a58:	00800044 	movi	r2,1
   87a5c:	1485883a 	add	r2,r2,r18
   87a60:	d8814515 	stw	r2,1300(sp)
   87a64:	100f883a 	mov	r7,r2
   87a68:	103f750e 	bge	r2,zero,87840 <___vfprintf_internal_r+0x1bc0>
   87a6c:	003fa806 	br	87910 <___vfprintf_internal_r+0x1c90>
   87a70:	80c00c04 	addi	r3,r16,48
   87a74:	00800c04 	movi	r2,48
   87a78:	d8c008c5 	stb	r3,35(sp)
   87a7c:	d9800804 	addi	r6,sp,32
   87a80:	d8c00904 	addi	r3,sp,36
   87a84:	d8800885 	stb	r2,34(sp)
   87a88:	003f6506 	br	87820 <___vfprintf_internal_r+0x1ba0>
   87a8c:	d9014c17 	ldw	r4,1328(sp)
   87a90:	2084703a 	and	r2,r4,r2
   87a94:	103f9c26 	beq	r2,zero,87908 <___vfprintf_internal_r+0x1c88>
   87a98:	003f6606 	br	87834 <___vfprintf_internal_r+0x1bb4>
   87a9c:	d9800804 	addi	r6,sp,32
   87aa0:	d8c00884 	addi	r3,sp,34
   87aa4:	003f5e06 	br	87820 <___vfprintf_internal_r+0x1ba0>
   87aa8:	00800b44 	movi	r2,45
   87aac:	0121c83a 	sub	r16,zero,r4
   87ab0:	d8800845 	stb	r2,33(sp)
   87ab4:	003f3d06 	br	877ac <___vfprintf_internal_r+0x1b2c>
   87ab8:	00800084 	movi	r2,2
   87abc:	1105c83a 	sub	r2,r2,r4
   87ac0:	003fe606 	br	87a5c <___vfprintf_internal_r+0x1ddc>
   87ac4:	d8014515 	stw	zero,1300(sp)
   87ac8:	dc814715 	stw	r18,1308(sp)
   87acc:	003fb106 	br	87994 <___vfprintf_internal_r+0x1d14>
   87ad0:	000d883a 	mov	r6,zero
   87ad4:	000f883a 	mov	r7,zero
   87ad8:	8009883a 	mov	r4,r16
   87adc:	880b883a 	mov	r5,r17
   87ae0:	008e7340 	call	8e734 <__nedf2>
   87ae4:	103f9f26 	beq	r2,zero,87964 <___vfprintf_internal_r+0x1ce4>
   87ae8:	00800044 	movi	r2,1
   87aec:	1509c83a 	sub	r4,r2,r20
   87af0:	d9000515 	stw	r4,20(sp)
   87af4:	003f9b06 	br	87964 <___vfprintf_internal_r+0x1ce4>
   87af8:	98000d1e 	bne	r19,zero,87b30 <___vfprintf_internal_r+0x1eb0>
   87afc:	d8c14c17 	ldw	r3,1328(sp)
   87b00:	1880004c 	andi	r2,r3,1
   87b04:	10000a1e 	bne	r2,zero,87b30 <___vfprintf_internal_r+0x1eb0>
   87b08:	01000044 	movi	r4,1
   87b0c:	200f883a 	mov	r7,r4
   87b10:	d9014515 	stw	r4,1300(sp)
   87b14:	003f4a06 	br	87840 <___vfprintf_internal_r+0x1bc0>
   87b18:	3cc00017 	ldw	r19,0(r7)
   87b1c:	39c00104 	addi	r7,r7,4
   87b20:	983d0e0e 	bge	r19,zero,86f5c <___vfprintf_internal_r+0x12dc>
   87b24:	b8c00007 	ldb	r3,0(r23)
   87b28:	04ffffc4 	movi	r19,-1
   87b2c:	0038d306 	br	85e7c <___vfprintf_internal_r+0x1fc>
   87b30:	9cc00084 	addi	r19,r19,2
   87b34:	dcc14515 	stw	r19,1300(sp)
   87b38:	980f883a 	mov	r7,r19
   87b3c:	983f400e 	bge	r19,zero,87840 <___vfprintf_internal_r+0x1bc0>
   87b40:	003f7306 	br	87910 <___vfprintf_internal_r+0x1c90>

00087b44 <__vfprintf_internal>:
   87b44:	00800274 	movhi	r2,9
   87b48:	10904104 	addi	r2,r2,16644
   87b4c:	2013883a 	mov	r9,r4
   87b50:	11000017 	ldw	r4,0(r2)
   87b54:	2805883a 	mov	r2,r5
   87b58:	300f883a 	mov	r7,r6
   87b5c:	480b883a 	mov	r5,r9
   87b60:	100d883a 	mov	r6,r2
   87b64:	0085c801 	jmpi	85c80 <___vfprintf_internal_r>

00087b68 <__swsetup_r>:
   87b68:	00800274 	movhi	r2,9
   87b6c:	10904104 	addi	r2,r2,16644
   87b70:	10c00017 	ldw	r3,0(r2)
   87b74:	defffd04 	addi	sp,sp,-12
   87b78:	dc400115 	stw	r17,4(sp)
   87b7c:	dc000015 	stw	r16,0(sp)
   87b80:	dfc00215 	stw	ra,8(sp)
   87b84:	2023883a 	mov	r17,r4
   87b88:	2821883a 	mov	r16,r5
   87b8c:	18000226 	beq	r3,zero,87b98 <__swsetup_r+0x30>
   87b90:	18800e17 	ldw	r2,56(r3)
   87b94:	10001f26 	beq	r2,zero,87c14 <__swsetup_r+0xac>
   87b98:	8100030b 	ldhu	r4,12(r16)
   87b9c:	2080020c 	andi	r2,r4,8
   87ba0:	10002826 	beq	r2,zero,87c44 <__swsetup_r+0xdc>
   87ba4:	81400417 	ldw	r5,16(r16)
   87ba8:	28001d26 	beq	r5,zero,87c20 <__swsetup_r+0xb8>
   87bac:	2080004c 	andi	r2,r4,1
   87bb0:	1005003a 	cmpeq	r2,r2,zero
   87bb4:	10000b26 	beq	r2,zero,87be4 <__swsetup_r+0x7c>
   87bb8:	2080008c 	andi	r2,r4,2
   87bbc:	10001226 	beq	r2,zero,87c08 <__swsetup_r+0xa0>
   87bc0:	0005883a 	mov	r2,zero
   87bc4:	80800215 	stw	r2,8(r16)
   87bc8:	28000b26 	beq	r5,zero,87bf8 <__swsetup_r+0x90>
   87bcc:	0005883a 	mov	r2,zero
   87bd0:	dfc00217 	ldw	ra,8(sp)
   87bd4:	dc400117 	ldw	r17,4(sp)
   87bd8:	dc000017 	ldw	r16,0(sp)
   87bdc:	dec00304 	addi	sp,sp,12
   87be0:	f800283a 	ret
   87be4:	80800517 	ldw	r2,20(r16)
   87be8:	80000215 	stw	zero,8(r16)
   87bec:	0085c83a 	sub	r2,zero,r2
   87bf0:	80800615 	stw	r2,24(r16)
   87bf4:	283ff51e 	bne	r5,zero,87bcc <__swsetup_r+0x64>
   87bf8:	2080200c 	andi	r2,r4,128
   87bfc:	103ff326 	beq	r2,zero,87bcc <__swsetup_r+0x64>
   87c00:	00bfffc4 	movi	r2,-1
   87c04:	003ff206 	br	87bd0 <__swsetup_r+0x68>
   87c08:	80800517 	ldw	r2,20(r16)
   87c0c:	80800215 	stw	r2,8(r16)
   87c10:	003fed06 	br	87bc8 <__swsetup_r+0x60>
   87c14:	1809883a 	mov	r4,r3
   87c18:	00897340 	call	89734 <__sinit>
   87c1c:	003fde06 	br	87b98 <__swsetup_r+0x30>
   87c20:	20c0a00c 	andi	r3,r4,640
   87c24:	00808004 	movi	r2,512
   87c28:	18bfe026 	beq	r3,r2,87bac <__swsetup_r+0x44>
   87c2c:	8809883a 	mov	r4,r17
   87c30:	800b883a 	mov	r5,r16
   87c34:	008a4e00 	call	8a4e0 <__smakebuf_r>
   87c38:	8100030b 	ldhu	r4,12(r16)
   87c3c:	81400417 	ldw	r5,16(r16)
   87c40:	003fda06 	br	87bac <__swsetup_r+0x44>
   87c44:	2080040c 	andi	r2,r4,16
   87c48:	103fed26 	beq	r2,zero,87c00 <__swsetup_r+0x98>
   87c4c:	2080010c 	andi	r2,r4,4
   87c50:	10001226 	beq	r2,zero,87c9c <__swsetup_r+0x134>
   87c54:	81400c17 	ldw	r5,48(r16)
   87c58:	28000526 	beq	r5,zero,87c70 <__swsetup_r+0x108>
   87c5c:	80801004 	addi	r2,r16,64
   87c60:	28800226 	beq	r5,r2,87c6c <__swsetup_r+0x104>
   87c64:	8809883a 	mov	r4,r17
   87c68:	0089aec0 	call	89aec <_free_r>
   87c6c:	80000c15 	stw	zero,48(r16)
   87c70:	8080030b 	ldhu	r2,12(r16)
   87c74:	81400417 	ldw	r5,16(r16)
   87c78:	80000115 	stw	zero,4(r16)
   87c7c:	10bff6cc 	andi	r2,r2,65499
   87c80:	8080030d 	sth	r2,12(r16)
   87c84:	81400015 	stw	r5,0(r16)
   87c88:	8080030b 	ldhu	r2,12(r16)
   87c8c:	10800214 	ori	r2,r2,8
   87c90:	113fffcc 	andi	r4,r2,65535
   87c94:	8080030d 	sth	r2,12(r16)
   87c98:	003fc306 	br	87ba8 <__swsetup_r+0x40>
   87c9c:	81400417 	ldw	r5,16(r16)
   87ca0:	003ff906 	br	87c88 <__swsetup_r+0x120>

00087ca4 <quorem>:
   87ca4:	28c00417 	ldw	r3,16(r5)
   87ca8:	20800417 	ldw	r2,16(r4)
   87cac:	defff104 	addi	sp,sp,-60
   87cb0:	dfc00e15 	stw	ra,56(sp)
   87cb4:	df000d15 	stw	fp,52(sp)
   87cb8:	ddc00c15 	stw	r23,48(sp)
   87cbc:	dd800b15 	stw	r22,44(sp)
   87cc0:	dd400a15 	stw	r21,40(sp)
   87cc4:	dd000915 	stw	r20,36(sp)
   87cc8:	dcc00815 	stw	r19,32(sp)
   87ccc:	dc800715 	stw	r18,28(sp)
   87cd0:	dc400615 	stw	r17,24(sp)
   87cd4:	dc000515 	stw	r16,20(sp)
   87cd8:	d9000315 	stw	r4,12(sp)
   87cdc:	d9400415 	stw	r5,16(sp)
   87ce0:	10c07f16 	blt	r2,r3,87ee0 <quorem+0x23c>
   87ce4:	1d3fffc4 	addi	r20,r3,-1
   87ce8:	d8c00417 	ldw	r3,16(sp)
   87cec:	d9000317 	ldw	r4,12(sp)
   87cf0:	a505883a 	add	r2,r20,r20
   87cf4:	1085883a 	add	r2,r2,r2
   87cf8:	1cc00504 	addi	r19,r3,20
   87cfc:	25c00504 	addi	r23,r4,20
   87d00:	98ad883a 	add	r22,r19,r2
   87d04:	15c7883a 	add	r3,r2,r23
   87d08:	b1400017 	ldw	r5,0(r22)
   87d0c:	19000017 	ldw	r4,0(r3)
   87d10:	d8c00015 	stw	r3,0(sp)
   87d14:	29400044 	addi	r5,r5,1
   87d18:	d9000215 	stw	r4,8(sp)
   87d1c:	008596c0 	call	8596c <__udivsi3>
   87d20:	1039883a 	mov	fp,r2
   87d24:	10003d1e 	bne	r2,zero,87e1c <quorem+0x178>
   87d28:	d9400417 	ldw	r5,16(sp)
   87d2c:	d9000317 	ldw	r4,12(sp)
   87d30:	008b20c0 	call	8b20c <__mcmp>
   87d34:	10002c16 	blt	r2,zero,87de8 <quorem+0x144>
   87d38:	e7000044 	addi	fp,fp,1
   87d3c:	b80f883a 	mov	r7,r23
   87d40:	0011883a 	mov	r8,zero
   87d44:	0009883a 	mov	r4,zero
   87d48:	99400017 	ldw	r5,0(r19)
   87d4c:	38c00017 	ldw	r3,0(r7)
   87d50:	9cc00104 	addi	r19,r19,4
   87d54:	28bfffcc 	andi	r2,r5,65535
   87d58:	2085883a 	add	r2,r4,r2
   87d5c:	11bfffcc 	andi	r6,r2,65535
   87d60:	193fffcc 	andi	r4,r3,65535
   87d64:	1004d43a 	srli	r2,r2,16
   87d68:	280ad43a 	srli	r5,r5,16
   87d6c:	2189c83a 	sub	r4,r4,r6
   87d70:	2209883a 	add	r4,r4,r8
   87d74:	1806d43a 	srli	r3,r3,16
   87d78:	288b883a 	add	r5,r5,r2
   87d7c:	200dd43a 	srai	r6,r4,16
   87d80:	28bfffcc 	andi	r2,r5,65535
   87d84:	1887c83a 	sub	r3,r3,r2
   87d88:	1987883a 	add	r3,r3,r6
   87d8c:	3900000d 	sth	r4,0(r7)
   87d90:	38c0008d 	sth	r3,2(r7)
   87d94:	2808d43a 	srli	r4,r5,16
   87d98:	39c00104 	addi	r7,r7,4
   87d9c:	1811d43a 	srai	r8,r3,16
   87da0:	b4ffe92e 	bgeu	r22,r19,87d48 <quorem+0xa4>
   87da4:	a505883a 	add	r2,r20,r20
   87da8:	1085883a 	add	r2,r2,r2
   87dac:	b885883a 	add	r2,r23,r2
   87db0:	10c00017 	ldw	r3,0(r2)
   87db4:	18000c1e 	bne	r3,zero,87de8 <quorem+0x144>
   87db8:	113fff04 	addi	r4,r2,-4
   87dbc:	b900082e 	bgeu	r23,r4,87de0 <quorem+0x13c>
   87dc0:	10bfff17 	ldw	r2,-4(r2)
   87dc4:	10000326 	beq	r2,zero,87dd4 <quorem+0x130>
   87dc8:	00000506 	br	87de0 <quorem+0x13c>
   87dcc:	20800017 	ldw	r2,0(r4)
   87dd0:	1000031e 	bne	r2,zero,87de0 <quorem+0x13c>
   87dd4:	213fff04 	addi	r4,r4,-4
   87dd8:	a53fffc4 	addi	r20,r20,-1
   87ddc:	b93ffb36 	bltu	r23,r4,87dcc <quorem+0x128>
   87de0:	d9000317 	ldw	r4,12(sp)
   87de4:	25000415 	stw	r20,16(r4)
   87de8:	e005883a 	mov	r2,fp
   87dec:	dfc00e17 	ldw	ra,56(sp)
   87df0:	df000d17 	ldw	fp,52(sp)
   87df4:	ddc00c17 	ldw	r23,48(sp)
   87df8:	dd800b17 	ldw	r22,44(sp)
   87dfc:	dd400a17 	ldw	r21,40(sp)
   87e00:	dd000917 	ldw	r20,36(sp)
   87e04:	dcc00817 	ldw	r19,32(sp)
   87e08:	dc800717 	ldw	r18,28(sp)
   87e0c:	dc400617 	ldw	r17,24(sp)
   87e10:	dc000517 	ldw	r16,20(sp)
   87e14:	dec00f04 	addi	sp,sp,60
   87e18:	f800283a 	ret
   87e1c:	b823883a 	mov	r17,r23
   87e20:	9825883a 	mov	r18,r19
   87e24:	d8000115 	stw	zero,4(sp)
   87e28:	002b883a 	mov	r21,zero
   87e2c:	94000017 	ldw	r16,0(r18)
   87e30:	e009883a 	mov	r4,fp
   87e34:	94800104 	addi	r18,r18,4
   87e38:	817fffcc 	andi	r5,r16,65535
   87e3c:	008597c0 	call	8597c <__mulsi3>
   87e40:	800ad43a 	srli	r5,r16,16
   87e44:	e009883a 	mov	r4,fp
   87e48:	a8a1883a 	add	r16,r21,r2
   87e4c:	008597c0 	call	8597c <__mulsi3>
   87e50:	89000017 	ldw	r4,0(r17)
   87e54:	80ffffcc 	andi	r3,r16,65535
   87e58:	8020d43a 	srli	r16,r16,16
   87e5c:	217fffcc 	andi	r5,r4,65535
   87e60:	28cbc83a 	sub	r5,r5,r3
   87e64:	d8c00117 	ldw	r3,4(sp)
   87e68:	2008d43a 	srli	r4,r4,16
   87e6c:	1405883a 	add	r2,r2,r16
   87e70:	28cb883a 	add	r5,r5,r3
   87e74:	280dd43a 	srai	r6,r5,16
   87e78:	10ffffcc 	andi	r3,r2,65535
   87e7c:	20c9c83a 	sub	r4,r4,r3
   87e80:	2189883a 	add	r4,r4,r6
   87e84:	8900008d 	sth	r4,2(r17)
   87e88:	2009d43a 	srai	r4,r4,16
   87e8c:	8940000d 	sth	r5,0(r17)
   87e90:	102ad43a 	srli	r21,r2,16
   87e94:	8c400104 	addi	r17,r17,4
   87e98:	d9000115 	stw	r4,4(sp)
   87e9c:	b4bfe32e 	bgeu	r22,r18,87e2c <quorem+0x188>
   87ea0:	d9000217 	ldw	r4,8(sp)
   87ea4:	203fa01e 	bne	r4,zero,87d28 <quorem+0x84>
   87ea8:	d8800017 	ldw	r2,0(sp)
   87eac:	10ffff04 	addi	r3,r2,-4
   87eb0:	b8c0082e 	bgeu	r23,r3,87ed4 <quorem+0x230>
   87eb4:	10bfff17 	ldw	r2,-4(r2)
   87eb8:	10000326 	beq	r2,zero,87ec8 <quorem+0x224>
   87ebc:	00000506 	br	87ed4 <quorem+0x230>
   87ec0:	18800017 	ldw	r2,0(r3)
   87ec4:	1000031e 	bne	r2,zero,87ed4 <quorem+0x230>
   87ec8:	18ffff04 	addi	r3,r3,-4
   87ecc:	a53fffc4 	addi	r20,r20,-1
   87ed0:	b8fffb36 	bltu	r23,r3,87ec0 <quorem+0x21c>
   87ed4:	d8c00317 	ldw	r3,12(sp)
   87ed8:	1d000415 	stw	r20,16(r3)
   87edc:	003f9206 	br	87d28 <quorem+0x84>
   87ee0:	0005883a 	mov	r2,zero
   87ee4:	003fc106 	br	87dec <quorem+0x148>

00087ee8 <_dtoa_r>:
   87ee8:	22001017 	ldw	r8,64(r4)
   87eec:	deffda04 	addi	sp,sp,-152
   87ef0:	dd402115 	stw	r21,132(sp)
   87ef4:	dd002015 	stw	r20,128(sp)
   87ef8:	dc801e15 	stw	r18,120(sp)
   87efc:	dc401d15 	stw	r17,116(sp)
   87f00:	dfc02515 	stw	ra,148(sp)
   87f04:	df002415 	stw	fp,144(sp)
   87f08:	ddc02315 	stw	r23,140(sp)
   87f0c:	dd802215 	stw	r22,136(sp)
   87f10:	dcc01f15 	stw	r19,124(sp)
   87f14:	dc001c15 	stw	r16,112(sp)
   87f18:	d9001615 	stw	r4,88(sp)
   87f1c:	3023883a 	mov	r17,r6
   87f20:	2829883a 	mov	r20,r5
   87f24:	d9c01715 	stw	r7,92(sp)
   87f28:	dc802817 	ldw	r18,160(sp)
   87f2c:	302b883a 	mov	r21,r6
   87f30:	40000a26 	beq	r8,zero,87f5c <_dtoa_r+0x74>
   87f34:	20801117 	ldw	r2,68(r4)
   87f38:	400b883a 	mov	r5,r8
   87f3c:	40800115 	stw	r2,4(r8)
   87f40:	20c01117 	ldw	r3,68(r4)
   87f44:	00800044 	movi	r2,1
   87f48:	10c4983a 	sll	r2,r2,r3
   87f4c:	40800215 	stw	r2,8(r8)
   87f50:	008b0b00 	call	8b0b0 <_Bfree>
   87f54:	d8c01617 	ldw	r3,88(sp)
   87f58:	18001015 	stw	zero,64(r3)
   87f5c:	8800a316 	blt	r17,zero,881ec <_dtoa_r+0x304>
   87f60:	90000015 	stw	zero,0(r18)
   87f64:	a8dffc2c 	andhi	r3,r21,32752
   87f68:	009ffc34 	movhi	r2,32752
   87f6c:	18809126 	beq	r3,r2,881b4 <_dtoa_r+0x2cc>
   87f70:	000d883a 	mov	r6,zero
   87f74:	000f883a 	mov	r7,zero
   87f78:	a009883a 	mov	r4,r20
   87f7c:	a80b883a 	mov	r5,r21
   87f80:	dd001215 	stw	r20,72(sp)
   87f84:	dd401315 	stw	r21,76(sp)
   87f88:	008e7340 	call	8e734 <__nedf2>
   87f8c:	1000171e 	bne	r2,zero,87fec <_dtoa_r+0x104>
   87f90:	d9802717 	ldw	r6,156(sp)
   87f94:	00800044 	movi	r2,1
   87f98:	30800015 	stw	r2,0(r6)
   87f9c:	d8802917 	ldw	r2,164(sp)
   87fa0:	10029b26 	beq	r2,zero,88a10 <_dtoa_r+0xb28>
   87fa4:	d9002917 	ldw	r4,164(sp)
   87fa8:	00800274 	movhi	r2,9
   87fac:	1088ef44 	addi	r2,r2,9149
   87fb0:	10ffffc4 	addi	r3,r2,-1
   87fb4:	20800015 	stw	r2,0(r4)
   87fb8:	1805883a 	mov	r2,r3
   87fbc:	dfc02517 	ldw	ra,148(sp)
   87fc0:	df002417 	ldw	fp,144(sp)
   87fc4:	ddc02317 	ldw	r23,140(sp)
   87fc8:	dd802217 	ldw	r22,136(sp)
   87fcc:	dd402117 	ldw	r21,132(sp)
   87fd0:	dd002017 	ldw	r20,128(sp)
   87fd4:	dcc01f17 	ldw	r19,124(sp)
   87fd8:	dc801e17 	ldw	r18,120(sp)
   87fdc:	dc401d17 	ldw	r17,116(sp)
   87fe0:	dc001c17 	ldw	r16,112(sp)
   87fe4:	dec02604 	addi	sp,sp,152
   87fe8:	f800283a 	ret
   87fec:	d9001617 	ldw	r4,88(sp)
   87ff0:	d9401217 	ldw	r5,72(sp)
   87ff4:	d8800104 	addi	r2,sp,4
   87ff8:	a80d883a 	mov	r6,r21
   87ffc:	d9c00204 	addi	r7,sp,8
   88000:	d8800015 	stw	r2,0(sp)
   88004:	008b6ec0 	call	8b6ec <__d2b>
   88008:	d8800715 	stw	r2,28(sp)
   8800c:	a804d53a 	srli	r2,r21,20
   88010:	1101ffcc 	andi	r4,r2,2047
   88014:	20008626 	beq	r4,zero,88230 <_dtoa_r+0x348>
   88018:	d8c01217 	ldw	r3,72(sp)
   8801c:	00800434 	movhi	r2,16
   88020:	10bfffc4 	addi	r2,r2,-1
   88024:	ddc00117 	ldw	r23,4(sp)
   88028:	a884703a 	and	r2,r21,r2
   8802c:	1811883a 	mov	r8,r3
   88030:	124ffc34 	orhi	r9,r2,16368
   88034:	25bf0044 	addi	r22,r4,-1023
   88038:	d8000815 	stw	zero,32(sp)
   8803c:	0005883a 	mov	r2,zero
   88040:	00cffe34 	movhi	r3,16376
   88044:	480b883a 	mov	r5,r9
   88048:	4009883a 	mov	r4,r8
   8804c:	180f883a 	mov	r7,r3
   88050:	100d883a 	mov	r6,r2
   88054:	008df9c0 	call	8df9c <__subdf3>
   88058:	0218dbf4 	movhi	r8,25455
   8805c:	4210d844 	addi	r8,r8,17249
   88060:	024ff4f4 	movhi	r9,16339
   88064:	4a61e9c4 	addi	r9,r9,-30809
   88068:	480f883a 	mov	r7,r9
   8806c:	400d883a 	mov	r6,r8
   88070:	180b883a 	mov	r5,r3
   88074:	1009883a 	mov	r4,r2
   88078:	008e0900 	call	8e090 <__muldf3>
   8807c:	0222d874 	movhi	r8,35681
   88080:	42322cc4 	addi	r8,r8,-14157
   88084:	024ff1f4 	movhi	r9,16327
   88088:	4a628a04 	addi	r9,r9,-30168
   8808c:	480f883a 	mov	r7,r9
   88090:	400d883a 	mov	r6,r8
   88094:	180b883a 	mov	r5,r3
   88098:	1009883a 	mov	r4,r2
   8809c:	008e01c0 	call	8e01c <__adddf3>
   880a0:	b009883a 	mov	r4,r22
   880a4:	1021883a 	mov	r16,r2
   880a8:	1823883a 	mov	r17,r3
   880ac:	008e9540 	call	8e954 <__floatsidf>
   880b0:	021427f4 	movhi	r8,20639
   880b4:	421e7ec4 	addi	r8,r8,31227
   880b8:	024ff4f4 	movhi	r9,16339
   880bc:	4a5104c4 	addi	r9,r9,17427
   880c0:	480f883a 	mov	r7,r9
   880c4:	400d883a 	mov	r6,r8
   880c8:	180b883a 	mov	r5,r3
   880cc:	1009883a 	mov	r4,r2
   880d0:	008e0900 	call	8e090 <__muldf3>
   880d4:	180f883a 	mov	r7,r3
   880d8:	880b883a 	mov	r5,r17
   880dc:	100d883a 	mov	r6,r2
   880e0:	8009883a 	mov	r4,r16
   880e4:	008e01c0 	call	8e01c <__adddf3>
   880e8:	1009883a 	mov	r4,r2
   880ec:	180b883a 	mov	r5,r3
   880f0:	1021883a 	mov	r16,r2
   880f4:	1823883a 	mov	r17,r3
   880f8:	008ea4c0 	call	8ea4c <__fixdfsi>
   880fc:	000d883a 	mov	r6,zero
   88100:	000f883a 	mov	r7,zero
   88104:	8009883a 	mov	r4,r16
   88108:	880b883a 	mov	r5,r17
   8810c:	d8800d15 	stw	r2,52(sp)
   88110:	008e8cc0 	call	8e8cc <__ltdf2>
   88114:	10031716 	blt	r2,zero,88d74 <_dtoa_r+0xe8c>
   88118:	d8c00d17 	ldw	r3,52(sp)
   8811c:	00800584 	movi	r2,22
   88120:	10c1482e 	bgeu	r2,r3,88644 <_dtoa_r+0x75c>
   88124:	01000044 	movi	r4,1
   88128:	d9000c15 	stw	r4,48(sp)
   8812c:	bd85c83a 	sub	r2,r23,r22
   88130:	11bfffc4 	addi	r6,r2,-1
   88134:	30030b16 	blt	r6,zero,88d64 <_dtoa_r+0xe7c>
   88138:	d9800a15 	stw	r6,40(sp)
   8813c:	d8001115 	stw	zero,68(sp)
   88140:	d8c00d17 	ldw	r3,52(sp)
   88144:	1802ff16 	blt	r3,zero,88d44 <_dtoa_r+0xe5c>
   88148:	d9000a17 	ldw	r4,40(sp)
   8814c:	d8c00915 	stw	r3,36(sp)
   88150:	d8001015 	stw	zero,64(sp)
   88154:	20c9883a 	add	r4,r4,r3
   88158:	d9000a15 	stw	r4,40(sp)
   8815c:	d9001717 	ldw	r4,92(sp)
   88160:	00800244 	movi	r2,9
   88164:	11004636 	bltu	r2,r4,88280 <_dtoa_r+0x398>
   88168:	00800144 	movi	r2,5
   8816c:	11020416 	blt	r2,r4,88980 <_dtoa_r+0xa98>
   88170:	04400044 	movi	r17,1
   88174:	d8c01717 	ldw	r3,92(sp)
   88178:	00800144 	movi	r2,5
   8817c:	10c1ed36 	bltu	r2,r3,88934 <_dtoa_r+0xa4c>
   88180:	18c5883a 	add	r2,r3,r3
   88184:	1085883a 	add	r2,r2,r2
   88188:	00c00274 	movhi	r3,9
   8818c:	18e06704 	addi	r3,r3,-32356
   88190:	10c5883a 	add	r2,r2,r3
   88194:	11000017 	ldw	r4,0(r2)
   88198:	2000683a 	jmp	r4
   8819c:	00088288 	cmpgei	zero,zero,8714
   881a0:	00088288 	cmpgei	zero,zero,8714
   881a4:	00088c88 	cmpgei	zero,zero,8754
   881a8:	00088c60 	cmpeqi	zero,zero,8753
   881ac:	00088ca4 	muli	zero,zero,8754
   881b0:	00088cb0 	cmpltui	zero,zero,8754
   881b4:	d9002717 	ldw	r4,156(sp)
   881b8:	0089c3c4 	movi	r2,9999
   881bc:	20800015 	stw	r2,0(r4)
   881c0:	a0001026 	beq	r20,zero,88204 <_dtoa_r+0x31c>
   881c4:	00c00274 	movhi	r3,9
   881c8:	18c8fb04 	addi	r3,r3,9196
   881cc:	d9802917 	ldw	r6,164(sp)
   881d0:	303f7926 	beq	r6,zero,87fb8 <_dtoa_r+0xd0>
   881d4:	188000c7 	ldb	r2,3(r3)
   881d8:	190000c4 	addi	r4,r3,3
   881dc:	1000101e 	bne	r2,zero,88220 <_dtoa_r+0x338>
   881e0:	d8802917 	ldw	r2,164(sp)
   881e4:	11000015 	stw	r4,0(r2)
   881e8:	003f7306 	br	87fb8 <_dtoa_r+0xd0>
   881ec:	00a00034 	movhi	r2,32768
   881f0:	10bfffc4 	addi	r2,r2,-1
   881f4:	00c00044 	movi	r3,1
   881f8:	88aa703a 	and	r21,r17,r2
   881fc:	90c00015 	stw	r3,0(r18)
   88200:	003f5806 	br	87f64 <_dtoa_r+0x7c>
   88204:	00800434 	movhi	r2,16
   88208:	10bfffc4 	addi	r2,r2,-1
   8820c:	a884703a 	and	r2,r21,r2
   88210:	103fec1e 	bne	r2,zero,881c4 <_dtoa_r+0x2dc>
   88214:	00c00274 	movhi	r3,9
   88218:	18c8f804 	addi	r3,r3,9184
   8821c:	003feb06 	br	881cc <_dtoa_r+0x2e4>
   88220:	d8802917 	ldw	r2,164(sp)
   88224:	19000204 	addi	r4,r3,8
   88228:	11000015 	stw	r4,0(r2)
   8822c:	003f6206 	br	87fb8 <_dtoa_r+0xd0>
   88230:	ddc00117 	ldw	r23,4(sp)
   88234:	d8800217 	ldw	r2,8(sp)
   88238:	01000804 	movi	r4,32
   8823c:	b8c10c84 	addi	r3,r23,1074
   88240:	18a3883a 	add	r17,r3,r2
   88244:	2441b80e 	bge	r4,r17,88928 <_dtoa_r+0xa40>
   88248:	00c01004 	movi	r3,64
   8824c:	1c47c83a 	sub	r3,r3,r17
   88250:	88bff804 	addi	r2,r17,-32
   88254:	a8c6983a 	sll	r3,r21,r3
   88258:	a084d83a 	srl	r2,r20,r2
   8825c:	1888b03a 	or	r4,r3,r2
   88260:	008eb240 	call	8eb24 <__floatunsidf>
   88264:	1011883a 	mov	r8,r2
   88268:	00bf8434 	movhi	r2,65040
   8826c:	01000044 	movi	r4,1
   88270:	10d3883a 	add	r9,r2,r3
   88274:	8dbef344 	addi	r22,r17,-1075
   88278:	d9000815 	stw	r4,32(sp)
   8827c:	003f6f06 	br	8803c <_dtoa_r+0x154>
   88280:	d8001715 	stw	zero,92(sp)
   88284:	04400044 	movi	r17,1
   88288:	00bfffc4 	movi	r2,-1
   8828c:	00c00044 	movi	r3,1
   88290:	d8800e15 	stw	r2,56(sp)
   88294:	d8002615 	stw	zero,152(sp)
   88298:	d8800f15 	stw	r2,60(sp)
   8829c:	d8c00b15 	stw	r3,44(sp)
   882a0:	1021883a 	mov	r16,r2
   882a4:	d8801617 	ldw	r2,88(sp)
   882a8:	10001115 	stw	zero,68(r2)
   882ac:	d8801617 	ldw	r2,88(sp)
   882b0:	11401117 	ldw	r5,68(r2)
   882b4:	1009883a 	mov	r4,r2
   882b8:	008b6300 	call	8b630 <_Balloc>
   882bc:	d8c01617 	ldw	r3,88(sp)
   882c0:	d8800515 	stw	r2,20(sp)
   882c4:	18801015 	stw	r2,64(r3)
   882c8:	00800384 	movi	r2,14
   882cc:	14006836 	bltu	r2,r16,88470 <_dtoa_r+0x588>
   882d0:	8805003a 	cmpeq	r2,r17,zero
   882d4:	1000661e 	bne	r2,zero,88470 <_dtoa_r+0x588>
   882d8:	d9000d17 	ldw	r4,52(sp)
   882dc:	0102300e 	bge	zero,r4,88ba0 <_dtoa_r+0xcb8>
   882e0:	208003cc 	andi	r2,r4,15
   882e4:	100490fa 	slli	r2,r2,3
   882e8:	2025d13a 	srai	r18,r4,4
   882ec:	00c00274 	movhi	r3,9
   882f0:	18c90d04 	addi	r3,r3,9268
   882f4:	10c5883a 	add	r2,r2,r3
   882f8:	90c0040c 	andi	r3,r18,16
   882fc:	14000017 	ldw	r16,0(r2)
   88300:	14400117 	ldw	r17,4(r2)
   88304:	18036a1e 	bne	r3,zero,890b0 <_dtoa_r+0x11c8>
   88308:	05800084 	movi	r22,2
   8830c:	90001026 	beq	r18,zero,88350 <_dtoa_r+0x468>
   88310:	04c00274 	movhi	r19,9
   88314:	9cc93f04 	addi	r19,r19,9468
   88318:	9080004c 	andi	r2,r18,1
   8831c:	1005003a 	cmpeq	r2,r2,zero
   88320:	1000081e 	bne	r2,zero,88344 <_dtoa_r+0x45c>
   88324:	99800017 	ldw	r6,0(r19)
   88328:	99c00117 	ldw	r7,4(r19)
   8832c:	880b883a 	mov	r5,r17
   88330:	8009883a 	mov	r4,r16
   88334:	008e0900 	call	8e090 <__muldf3>
   88338:	1021883a 	mov	r16,r2
   8833c:	b5800044 	addi	r22,r22,1
   88340:	1823883a 	mov	r17,r3
   88344:	9025d07a 	srai	r18,r18,1
   88348:	9cc00204 	addi	r19,r19,8
   8834c:	903ff21e 	bne	r18,zero,88318 <_dtoa_r+0x430>
   88350:	a80b883a 	mov	r5,r21
   88354:	a009883a 	mov	r4,r20
   88358:	880f883a 	mov	r7,r17
   8835c:	800d883a 	mov	r6,r16
   88360:	008e4540 	call	8e454 <__divdf3>
   88364:	1029883a 	mov	r20,r2
   88368:	182b883a 	mov	r21,r3
   8836c:	d8c00c17 	ldw	r3,48(sp)
   88370:	1805003a 	cmpeq	r2,r3,zero
   88374:	1000081e 	bne	r2,zero,88398 <_dtoa_r+0x4b0>
   88378:	0005883a 	mov	r2,zero
   8837c:	00cffc34 	movhi	r3,16368
   88380:	180f883a 	mov	r7,r3
   88384:	a009883a 	mov	r4,r20
   88388:	a80b883a 	mov	r5,r21
   8838c:	100d883a 	mov	r6,r2
   88390:	008e8cc0 	call	8e8cc <__ltdf2>
   88394:	1003fe16 	blt	r2,zero,89390 <_dtoa_r+0x14a8>
   88398:	b009883a 	mov	r4,r22
   8839c:	008e9540 	call	8e954 <__floatsidf>
   883a0:	180b883a 	mov	r5,r3
   883a4:	1009883a 	mov	r4,r2
   883a8:	a00d883a 	mov	r6,r20
   883ac:	a80f883a 	mov	r7,r21
   883b0:	008e0900 	call	8e090 <__muldf3>
   883b4:	0011883a 	mov	r8,zero
   883b8:	02500734 	movhi	r9,16412
   883bc:	1009883a 	mov	r4,r2
   883c0:	180b883a 	mov	r5,r3
   883c4:	480f883a 	mov	r7,r9
   883c8:	400d883a 	mov	r6,r8
   883cc:	008e01c0 	call	8e01c <__adddf3>
   883d0:	d9000f17 	ldw	r4,60(sp)
   883d4:	102d883a 	mov	r22,r2
   883d8:	00bf3034 	movhi	r2,64704
   883dc:	18b9883a 	add	fp,r3,r2
   883e0:	e02f883a 	mov	r23,fp
   883e4:	20028f1e 	bne	r4,zero,88e24 <_dtoa_r+0xf3c>
   883e8:	0005883a 	mov	r2,zero
   883ec:	00d00534 	movhi	r3,16404
   883f0:	a009883a 	mov	r4,r20
   883f4:	a80b883a 	mov	r5,r21
   883f8:	180f883a 	mov	r7,r3
   883fc:	100d883a 	mov	r6,r2
   88400:	008df9c0 	call	8df9c <__subdf3>
   88404:	1009883a 	mov	r4,r2
   88408:	e00f883a 	mov	r7,fp
   8840c:	180b883a 	mov	r5,r3
   88410:	b00d883a 	mov	r6,r22
   88414:	1025883a 	mov	r18,r2
   88418:	1827883a 	mov	r19,r3
   8841c:	008e7bc0 	call	8e7bc <__gtdf2>
   88420:	00834f16 	blt	zero,r2,89160 <_dtoa_r+0x1278>
   88424:	e0e0003c 	xorhi	r3,fp,32768
   88428:	9009883a 	mov	r4,r18
   8842c:	980b883a 	mov	r5,r19
   88430:	180f883a 	mov	r7,r3
   88434:	b00d883a 	mov	r6,r22
   88438:	008e8cc0 	call	8e8cc <__ltdf2>
   8843c:	1000080e 	bge	r2,zero,88460 <_dtoa_r+0x578>
   88440:	0027883a 	mov	r19,zero
   88444:	0025883a 	mov	r18,zero
   88448:	d8802617 	ldw	r2,152(sp)
   8844c:	df000517 	ldw	fp,20(sp)
   88450:	d8000615 	stw	zero,24(sp)
   88454:	0084303a 	nor	r2,zero,r2
   88458:	d8800d15 	stw	r2,52(sp)
   8845c:	00019b06 	br	88acc <_dtoa_r+0xbe4>
   88460:	d9801217 	ldw	r6,72(sp)
   88464:	d8801317 	ldw	r2,76(sp)
   88468:	3029883a 	mov	r20,r6
   8846c:	102b883a 	mov	r21,r2
   88470:	d8c00217 	ldw	r3,8(sp)
   88474:	18008516 	blt	r3,zero,8868c <_dtoa_r+0x7a4>
   88478:	d9000d17 	ldw	r4,52(sp)
   8847c:	00800384 	movi	r2,14
   88480:	11008216 	blt	r2,r4,8868c <_dtoa_r+0x7a4>
   88484:	200490fa 	slli	r2,r4,3
   88488:	d9802617 	ldw	r6,152(sp)
   8848c:	00c00274 	movhi	r3,9
   88490:	18c90d04 	addi	r3,r3,9268
   88494:	10c5883a 	add	r2,r2,r3
   88498:	14800017 	ldw	r18,0(r2)
   8849c:	14c00117 	ldw	r19,4(r2)
   884a0:	30031e16 	blt	r6,zero,8911c <_dtoa_r+0x1234>
   884a4:	d9000517 	ldw	r4,20(sp)
   884a8:	d8c00f17 	ldw	r3,60(sp)
   884ac:	a823883a 	mov	r17,r21
   884b0:	a021883a 	mov	r16,r20
   884b4:	192b883a 	add	r21,r3,r4
   884b8:	2039883a 	mov	fp,r4
   884bc:	00000f06 	br	884fc <_dtoa_r+0x614>
   884c0:	0005883a 	mov	r2,zero
   884c4:	00d00934 	movhi	r3,16420
   884c8:	5009883a 	mov	r4,r10
   884cc:	580b883a 	mov	r5,r11
   884d0:	180f883a 	mov	r7,r3
   884d4:	100d883a 	mov	r6,r2
   884d8:	008e0900 	call	8e090 <__muldf3>
   884dc:	180b883a 	mov	r5,r3
   884e0:	000d883a 	mov	r6,zero
   884e4:	000f883a 	mov	r7,zero
   884e8:	1009883a 	mov	r4,r2
   884ec:	1021883a 	mov	r16,r2
   884f0:	1823883a 	mov	r17,r3
   884f4:	008e7340 	call	8e734 <__nedf2>
   884f8:	10004526 	beq	r2,zero,88610 <_dtoa_r+0x728>
   884fc:	900d883a 	mov	r6,r18
   88500:	980f883a 	mov	r7,r19
   88504:	8009883a 	mov	r4,r16
   88508:	880b883a 	mov	r5,r17
   8850c:	008e4540 	call	8e454 <__divdf3>
   88510:	180b883a 	mov	r5,r3
   88514:	1009883a 	mov	r4,r2
   88518:	008ea4c0 	call	8ea4c <__fixdfsi>
   8851c:	1009883a 	mov	r4,r2
   88520:	1029883a 	mov	r20,r2
   88524:	008e9540 	call	8e954 <__floatsidf>
   88528:	180f883a 	mov	r7,r3
   8852c:	9009883a 	mov	r4,r18
   88530:	980b883a 	mov	r5,r19
   88534:	100d883a 	mov	r6,r2
   88538:	008e0900 	call	8e090 <__muldf3>
   8853c:	180f883a 	mov	r7,r3
   88540:	880b883a 	mov	r5,r17
   88544:	8009883a 	mov	r4,r16
   88548:	100d883a 	mov	r6,r2
   8854c:	008df9c0 	call	8df9c <__subdf3>
   88550:	1015883a 	mov	r10,r2
   88554:	a0800c04 	addi	r2,r20,48
   88558:	e0800005 	stb	r2,0(fp)
   8855c:	e7000044 	addi	fp,fp,1
   88560:	1817883a 	mov	r11,r3
   88564:	e57fd61e 	bne	fp,r21,884c0 <_dtoa_r+0x5d8>
   88568:	500d883a 	mov	r6,r10
   8856c:	180f883a 	mov	r7,r3
   88570:	5009883a 	mov	r4,r10
   88574:	180b883a 	mov	r5,r3
   88578:	008e01c0 	call	8e01c <__adddf3>
   8857c:	100d883a 	mov	r6,r2
   88580:	9009883a 	mov	r4,r18
   88584:	980b883a 	mov	r5,r19
   88588:	180f883a 	mov	r7,r3
   8858c:	1021883a 	mov	r16,r2
   88590:	1823883a 	mov	r17,r3
   88594:	008e8cc0 	call	8e8cc <__ltdf2>
   88598:	10000816 	blt	r2,zero,885bc <_dtoa_r+0x6d4>
   8859c:	980b883a 	mov	r5,r19
   885a0:	800d883a 	mov	r6,r16
   885a4:	880f883a 	mov	r7,r17
   885a8:	9009883a 	mov	r4,r18
   885ac:	008e6ac0 	call	8e6ac <__eqdf2>
   885b0:	1000171e 	bne	r2,zero,88610 <_dtoa_r+0x728>
   885b4:	a080004c 	andi	r2,r20,1
   885b8:	10001526 	beq	r2,zero,88610 <_dtoa_r+0x728>
   885bc:	d8800d17 	ldw	r2,52(sp)
   885c0:	d8800415 	stw	r2,16(sp)
   885c4:	e009883a 	mov	r4,fp
   885c8:	213fffc4 	addi	r4,r4,-1
   885cc:	20c00007 	ldb	r3,0(r4)
   885d0:	00800e44 	movi	r2,57
   885d4:	1880081e 	bne	r3,r2,885f8 <_dtoa_r+0x710>
   885d8:	d8800517 	ldw	r2,20(sp)
   885dc:	113ffa1e 	bne	r2,r4,885c8 <_dtoa_r+0x6e0>
   885e0:	d8c00417 	ldw	r3,16(sp)
   885e4:	d9800517 	ldw	r6,20(sp)
   885e8:	00800c04 	movi	r2,48
   885ec:	18c00044 	addi	r3,r3,1
   885f0:	d8c00415 	stw	r3,16(sp)
   885f4:	30800005 	stb	r2,0(r6)
   885f8:	20800003 	ldbu	r2,0(r4)
   885fc:	d8c00417 	ldw	r3,16(sp)
   88600:	27000044 	addi	fp,r4,1
   88604:	10800044 	addi	r2,r2,1
   88608:	d8c00d15 	stw	r3,52(sp)
   8860c:	20800005 	stb	r2,0(r4)
   88610:	d9001617 	ldw	r4,88(sp)
   88614:	d9400717 	ldw	r5,28(sp)
   88618:	008b0b00 	call	8b0b0 <_Bfree>
   8861c:	e0000005 	stb	zero,0(fp)
   88620:	d9800d17 	ldw	r6,52(sp)
   88624:	d8c02717 	ldw	r3,156(sp)
   88628:	d9002917 	ldw	r4,164(sp)
   8862c:	30800044 	addi	r2,r6,1
   88630:	18800015 	stw	r2,0(r3)
   88634:	20029c26 	beq	r4,zero,890a8 <_dtoa_r+0x11c0>
   88638:	d8c00517 	ldw	r3,20(sp)
   8863c:	27000015 	stw	fp,0(r4)
   88640:	003e5d06 	br	87fb8 <_dtoa_r+0xd0>
   88644:	d9800d17 	ldw	r6,52(sp)
   88648:	00c00274 	movhi	r3,9
   8864c:	18c90d04 	addi	r3,r3,9268
   88650:	d9001217 	ldw	r4,72(sp)
   88654:	300490fa 	slli	r2,r6,3
   88658:	d9401317 	ldw	r5,76(sp)
   8865c:	10c5883a 	add	r2,r2,r3
   88660:	12000017 	ldw	r8,0(r2)
   88664:	12400117 	ldw	r9,4(r2)
   88668:	400d883a 	mov	r6,r8
   8866c:	480f883a 	mov	r7,r9
   88670:	008e8cc0 	call	8e8cc <__ltdf2>
   88674:	1000030e 	bge	r2,zero,88684 <_dtoa_r+0x79c>
   88678:	d8800d17 	ldw	r2,52(sp)
   8867c:	10bfffc4 	addi	r2,r2,-1
   88680:	d8800d15 	stw	r2,52(sp)
   88684:	d8000c15 	stw	zero,48(sp)
   88688:	003ea806 	br	8812c <_dtoa_r+0x244>
   8868c:	d9000b17 	ldw	r4,44(sp)
   88690:	202cc03a 	cmpne	r22,r4,zero
   88694:	b000c71e 	bne	r22,zero,889b4 <_dtoa_r+0xacc>
   88698:	dc001117 	ldw	r16,68(sp)
   8869c:	dc801017 	ldw	r18,64(sp)
   886a0:	0027883a 	mov	r19,zero
   886a4:	04000b0e 	bge	zero,r16,886d4 <_dtoa_r+0x7ec>
   886a8:	d8c00a17 	ldw	r3,40(sp)
   886ac:	00c0090e 	bge	zero,r3,886d4 <_dtoa_r+0x7ec>
   886b0:	8005883a 	mov	r2,r16
   886b4:	1c011316 	blt	r3,r16,88b04 <_dtoa_r+0xc1c>
   886b8:	d9000a17 	ldw	r4,40(sp)
   886bc:	d9801117 	ldw	r6,68(sp)
   886c0:	80a1c83a 	sub	r16,r16,r2
   886c4:	2089c83a 	sub	r4,r4,r2
   886c8:	308dc83a 	sub	r6,r6,r2
   886cc:	d9000a15 	stw	r4,40(sp)
   886d0:	d9801115 	stw	r6,68(sp)
   886d4:	d8801017 	ldw	r2,64(sp)
   886d8:	0080150e 	bge	zero,r2,88730 <_dtoa_r+0x848>
   886dc:	d8c00b17 	ldw	r3,44(sp)
   886e0:	1805003a 	cmpeq	r2,r3,zero
   886e4:	1001c91e 	bne	r2,zero,88e0c <_dtoa_r+0xf24>
   886e8:	04800e0e 	bge	zero,r18,88724 <_dtoa_r+0x83c>
   886ec:	d9001617 	ldw	r4,88(sp)
   886f0:	980b883a 	mov	r5,r19
   886f4:	900d883a 	mov	r6,r18
   886f8:	008befc0 	call	8befc <__pow5mult>
   886fc:	d9001617 	ldw	r4,88(sp)
   88700:	d9800717 	ldw	r6,28(sp)
   88704:	100b883a 	mov	r5,r2
   88708:	1027883a 	mov	r19,r2
   8870c:	008bb400 	call	8bb40 <__multiply>
   88710:	d9001617 	ldw	r4,88(sp)
   88714:	d9400717 	ldw	r5,28(sp)
   88718:	1023883a 	mov	r17,r2
   8871c:	008b0b00 	call	8b0b0 <_Bfree>
   88720:	dc400715 	stw	r17,28(sp)
   88724:	d9001017 	ldw	r4,64(sp)
   88728:	248dc83a 	sub	r6,r4,r18
   8872c:	30010e1e 	bne	r6,zero,88b68 <_dtoa_r+0xc80>
   88730:	d9001617 	ldw	r4,88(sp)
   88734:	04400044 	movi	r17,1
   88738:	880b883a 	mov	r5,r17
   8873c:	008bd940 	call	8bd94 <__i2b>
   88740:	d9800917 	ldw	r6,36(sp)
   88744:	1025883a 	mov	r18,r2
   88748:	0180040e 	bge	zero,r6,8875c <_dtoa_r+0x874>
   8874c:	d9001617 	ldw	r4,88(sp)
   88750:	100b883a 	mov	r5,r2
   88754:	008befc0 	call	8befc <__pow5mult>
   88758:	1025883a 	mov	r18,r2
   8875c:	d8801717 	ldw	r2,92(sp)
   88760:	8880f30e 	bge	r17,r2,88b30 <_dtoa_r+0xc48>
   88764:	0023883a 	mov	r17,zero
   88768:	d9800917 	ldw	r6,36(sp)
   8876c:	30019e1e 	bne	r6,zero,88de8 <_dtoa_r+0xf00>
   88770:	00c00044 	movi	r3,1
   88774:	d9000a17 	ldw	r4,40(sp)
   88778:	20c5883a 	add	r2,r4,r3
   8877c:	10c007cc 	andi	r3,r2,31
   88780:	1800841e 	bne	r3,zero,88994 <_dtoa_r+0xaac>
   88784:	00800704 	movi	r2,28
   88788:	d9000a17 	ldw	r4,40(sp)
   8878c:	d9801117 	ldw	r6,68(sp)
   88790:	80a1883a 	add	r16,r16,r2
   88794:	2089883a 	add	r4,r4,r2
   88798:	308d883a 	add	r6,r6,r2
   8879c:	d9000a15 	stw	r4,40(sp)
   887a0:	d9801115 	stw	r6,68(sp)
   887a4:	d8801117 	ldw	r2,68(sp)
   887a8:	0080050e 	bge	zero,r2,887c0 <_dtoa_r+0x8d8>
   887ac:	d9400717 	ldw	r5,28(sp)
   887b0:	d9001617 	ldw	r4,88(sp)
   887b4:	100d883a 	mov	r6,r2
   887b8:	008b9f40 	call	8b9f4 <__lshift>
   887bc:	d8800715 	stw	r2,28(sp)
   887c0:	d8c00a17 	ldw	r3,40(sp)
   887c4:	00c0050e 	bge	zero,r3,887dc <_dtoa_r+0x8f4>
   887c8:	d9001617 	ldw	r4,88(sp)
   887cc:	900b883a 	mov	r5,r18
   887d0:	180d883a 	mov	r6,r3
   887d4:	008b9f40 	call	8b9f4 <__lshift>
   887d8:	1025883a 	mov	r18,r2
   887dc:	d9000c17 	ldw	r4,48(sp)
   887e0:	2005003a 	cmpeq	r2,r4,zero
   887e4:	10016f26 	beq	r2,zero,88da4 <_dtoa_r+0xebc>
   887e8:	d9000f17 	ldw	r4,60(sp)
   887ec:	0102170e 	bge	zero,r4,8904c <_dtoa_r+0x1164>
   887f0:	d9800b17 	ldw	r6,44(sp)
   887f4:	3005003a 	cmpeq	r2,r6,zero
   887f8:	1000881e 	bne	r2,zero,88a1c <_dtoa_r+0xb34>
   887fc:	0400050e 	bge	zero,r16,88814 <_dtoa_r+0x92c>
   88800:	d9001617 	ldw	r4,88(sp)
   88804:	980b883a 	mov	r5,r19
   88808:	800d883a 	mov	r6,r16
   8880c:	008b9f40 	call	8b9f4 <__lshift>
   88810:	1027883a 	mov	r19,r2
   88814:	8804c03a 	cmpne	r2,r17,zero
   88818:	1002541e 	bne	r2,zero,8916c <_dtoa_r+0x1284>
   8881c:	980b883a 	mov	r5,r19
   88820:	dd800517 	ldw	r22,20(sp)
   88824:	dcc00615 	stw	r19,24(sp)
   88828:	a700004c 	andi	fp,r20,1
   8882c:	2827883a 	mov	r19,r5
   88830:	d9000717 	ldw	r4,28(sp)
   88834:	900b883a 	mov	r5,r18
   88838:	0087ca40 	call	87ca4 <quorem>
   8883c:	d9000717 	ldw	r4,28(sp)
   88840:	d9400617 	ldw	r5,24(sp)
   88844:	1023883a 	mov	r17,r2
   88848:	8dc00c04 	addi	r23,r17,48
   8884c:	008b20c0 	call	8b20c <__mcmp>
   88850:	d9001617 	ldw	r4,88(sp)
   88854:	900b883a 	mov	r5,r18
   88858:	980d883a 	mov	r6,r19
   8885c:	1029883a 	mov	r20,r2
   88860:	008b8680 	call	8b868 <__mdiff>
   88864:	102b883a 	mov	r21,r2
   88868:	10800317 	ldw	r2,12(r2)
   8886c:	1001281e 	bne	r2,zero,88d10 <_dtoa_r+0xe28>
   88870:	d9000717 	ldw	r4,28(sp)
   88874:	a80b883a 	mov	r5,r21
   88878:	008b20c0 	call	8b20c <__mcmp>
   8887c:	d9001617 	ldw	r4,88(sp)
   88880:	1021883a 	mov	r16,r2
   88884:	a80b883a 	mov	r5,r21
   88888:	008b0b00 	call	8b0b0 <_Bfree>
   8888c:	8000041e 	bne	r16,zero,888a0 <_dtoa_r+0x9b8>
   88890:	d8801717 	ldw	r2,92(sp)
   88894:	1000021e 	bne	r2,zero,888a0 <_dtoa_r+0x9b8>
   88898:	e004c03a 	cmpne	r2,fp,zero
   8889c:	10011726 	beq	r2,zero,88cfc <_dtoa_r+0xe14>
   888a0:	a0010616 	blt	r20,zero,88cbc <_dtoa_r+0xdd4>
   888a4:	a000041e 	bne	r20,zero,888b8 <_dtoa_r+0x9d0>
   888a8:	d8c01717 	ldw	r3,92(sp)
   888ac:	1800021e 	bne	r3,zero,888b8 <_dtoa_r+0x9d0>
   888b0:	e004c03a 	cmpne	r2,fp,zero
   888b4:	10010126 	beq	r2,zero,88cbc <_dtoa_r+0xdd4>
   888b8:	04023d16 	blt	zero,r16,891b0 <_dtoa_r+0x12c8>
   888bc:	b5c00005 	stb	r23,0(r22)
   888c0:	d9800517 	ldw	r6,20(sp)
   888c4:	d9000f17 	ldw	r4,60(sp)
   888c8:	b5800044 	addi	r22,r22,1
   888cc:	3105883a 	add	r2,r6,r4
   888d0:	b0806526 	beq	r22,r2,88a68 <_dtoa_r+0xb80>
   888d4:	d9400717 	ldw	r5,28(sp)
   888d8:	d9001617 	ldw	r4,88(sp)
   888dc:	01800284 	movi	r6,10
   888e0:	000f883a 	mov	r7,zero
   888e4:	008bdd00 	call	8bdd0 <__multadd>
   888e8:	d8800715 	stw	r2,28(sp)
   888ec:	d8800617 	ldw	r2,24(sp)
   888f0:	14c10c26 	beq	r2,r19,88d24 <_dtoa_r+0xe3c>
   888f4:	d9400617 	ldw	r5,24(sp)
   888f8:	d9001617 	ldw	r4,88(sp)
   888fc:	01800284 	movi	r6,10
   88900:	000f883a 	mov	r7,zero
   88904:	008bdd00 	call	8bdd0 <__multadd>
   88908:	d9001617 	ldw	r4,88(sp)
   8890c:	980b883a 	mov	r5,r19
   88910:	01800284 	movi	r6,10
   88914:	000f883a 	mov	r7,zero
   88918:	d8800615 	stw	r2,24(sp)
   8891c:	008bdd00 	call	8bdd0 <__multadd>
   88920:	1027883a 	mov	r19,r2
   88924:	003fc206 	br	88830 <_dtoa_r+0x948>
   88928:	2445c83a 	sub	r2,r4,r17
   8892c:	a088983a 	sll	r4,r20,r2
   88930:	003e4b06 	br	88260 <_dtoa_r+0x378>
   88934:	01bfffc4 	movi	r6,-1
   88938:	00800044 	movi	r2,1
   8893c:	d9800e15 	stw	r6,56(sp)
   88940:	d9800f15 	stw	r6,60(sp)
   88944:	d8800b15 	stw	r2,44(sp)
   88948:	d8c01617 	ldw	r3,88(sp)
   8894c:	008005c4 	movi	r2,23
   88950:	18001115 	stw	zero,68(r3)
   88954:	1580082e 	bgeu	r2,r22,88978 <_dtoa_r+0xa90>
   88958:	00c00104 	movi	r3,4
   8895c:	0009883a 	mov	r4,zero
   88960:	18c7883a 	add	r3,r3,r3
   88964:	18800504 	addi	r2,r3,20
   88968:	21000044 	addi	r4,r4,1
   8896c:	b0bffc2e 	bgeu	r22,r2,88960 <_dtoa_r+0xa78>
   88970:	d9801617 	ldw	r6,88(sp)
   88974:	31001115 	stw	r4,68(r6)
   88978:	dc000f17 	ldw	r16,60(sp)
   8897c:	003e4b06 	br	882ac <_dtoa_r+0x3c4>
   88980:	d9801717 	ldw	r6,92(sp)
   88984:	0023883a 	mov	r17,zero
   88988:	31bfff04 	addi	r6,r6,-4
   8898c:	d9801715 	stw	r6,92(sp)
   88990:	003df806 	br	88174 <_dtoa_r+0x28c>
   88994:	00800804 	movi	r2,32
   88998:	10c9c83a 	sub	r4,r2,r3
   8899c:	00c00104 	movi	r3,4
   889a0:	19005a16 	blt	r3,r4,88b0c <_dtoa_r+0xc24>
   889a4:	008000c4 	movi	r2,3
   889a8:	113f7e16 	blt	r2,r4,887a4 <_dtoa_r+0x8bc>
   889ac:	20800704 	addi	r2,r4,28
   889b0:	003f7506 	br	88788 <_dtoa_r+0x8a0>
   889b4:	d9801717 	ldw	r6,92(sp)
   889b8:	00800044 	movi	r2,1
   889bc:	1180a10e 	bge	r2,r6,88c44 <_dtoa_r+0xd5c>
   889c0:	d9800f17 	ldw	r6,60(sp)
   889c4:	d8c01017 	ldw	r3,64(sp)
   889c8:	30bfffc4 	addi	r2,r6,-1
   889cc:	1881c616 	blt	r3,r2,890e8 <_dtoa_r+0x1200>
   889d0:	18a5c83a 	sub	r18,r3,r2
   889d4:	d8800f17 	ldw	r2,60(sp)
   889d8:	10026216 	blt	r2,zero,89364 <_dtoa_r+0x147c>
   889dc:	dc001117 	ldw	r16,68(sp)
   889e0:	1007883a 	mov	r3,r2
   889e4:	d9800a17 	ldw	r6,40(sp)
   889e8:	d8801117 	ldw	r2,68(sp)
   889ec:	d9001617 	ldw	r4,88(sp)
   889f0:	30cd883a 	add	r6,r6,r3
   889f4:	10c5883a 	add	r2,r2,r3
   889f8:	01400044 	movi	r5,1
   889fc:	d9800a15 	stw	r6,40(sp)
   88a00:	d8801115 	stw	r2,68(sp)
   88a04:	008bd940 	call	8bd94 <__i2b>
   88a08:	1027883a 	mov	r19,r2
   88a0c:	003f2506 	br	886a4 <_dtoa_r+0x7bc>
   88a10:	00c00274 	movhi	r3,9
   88a14:	18c8ef04 	addi	r3,r3,9148
   88a18:	003d6706 	br	87fb8 <_dtoa_r+0xd0>
   88a1c:	dd800517 	ldw	r22,20(sp)
   88a20:	04000044 	movi	r16,1
   88a24:	00000706 	br	88a44 <_dtoa_r+0xb5c>
   88a28:	d9400717 	ldw	r5,28(sp)
   88a2c:	d9001617 	ldw	r4,88(sp)
   88a30:	01800284 	movi	r6,10
   88a34:	000f883a 	mov	r7,zero
   88a38:	008bdd00 	call	8bdd0 <__multadd>
   88a3c:	d8800715 	stw	r2,28(sp)
   88a40:	84000044 	addi	r16,r16,1
   88a44:	d9000717 	ldw	r4,28(sp)
   88a48:	900b883a 	mov	r5,r18
   88a4c:	0087ca40 	call	87ca4 <quorem>
   88a50:	15c00c04 	addi	r23,r2,48
   88a54:	b5c00005 	stb	r23,0(r22)
   88a58:	d8c00f17 	ldw	r3,60(sp)
   88a5c:	b5800044 	addi	r22,r22,1
   88a60:	80fff116 	blt	r16,r3,88a28 <_dtoa_r+0xb40>
   88a64:	d8000615 	stw	zero,24(sp)
   88a68:	d9400717 	ldw	r5,28(sp)
   88a6c:	d9001617 	ldw	r4,88(sp)
   88a70:	01800044 	movi	r6,1
   88a74:	008b9f40 	call	8b9f4 <__lshift>
   88a78:	1009883a 	mov	r4,r2
   88a7c:	900b883a 	mov	r5,r18
   88a80:	d8800715 	stw	r2,28(sp)
   88a84:	008b20c0 	call	8b20c <__mcmp>
   88a88:	00803c0e 	bge	zero,r2,88b7c <_dtoa_r+0xc94>
   88a8c:	b009883a 	mov	r4,r22
   88a90:	213fffc4 	addi	r4,r4,-1
   88a94:	21400003 	ldbu	r5,0(r4)
   88a98:	00800e44 	movi	r2,57
   88a9c:	28c03fcc 	andi	r3,r5,255
   88aa0:	18c0201c 	xori	r3,r3,128
   88aa4:	18ffe004 	addi	r3,r3,-128
   88aa8:	1881981e 	bne	r3,r2,8910c <_dtoa_r+0x1224>
   88aac:	d9800517 	ldw	r6,20(sp)
   88ab0:	21bff71e 	bne	r4,r6,88a90 <_dtoa_r+0xba8>
   88ab4:	d8800d17 	ldw	r2,52(sp)
   88ab8:	37000044 	addi	fp,r6,1
   88abc:	10800044 	addi	r2,r2,1
   88ac0:	d8800d15 	stw	r2,52(sp)
   88ac4:	00800c44 	movi	r2,49
   88ac8:	30800005 	stb	r2,0(r6)
   88acc:	d9001617 	ldw	r4,88(sp)
   88ad0:	900b883a 	mov	r5,r18
   88ad4:	008b0b00 	call	8b0b0 <_Bfree>
   88ad8:	983ecd26 	beq	r19,zero,88610 <_dtoa_r+0x728>
   88adc:	d8c00617 	ldw	r3,24(sp)
   88ae0:	18000426 	beq	r3,zero,88af4 <_dtoa_r+0xc0c>
   88ae4:	1cc00326 	beq	r3,r19,88af4 <_dtoa_r+0xc0c>
   88ae8:	d9001617 	ldw	r4,88(sp)
   88aec:	180b883a 	mov	r5,r3
   88af0:	008b0b00 	call	8b0b0 <_Bfree>
   88af4:	d9001617 	ldw	r4,88(sp)
   88af8:	980b883a 	mov	r5,r19
   88afc:	008b0b00 	call	8b0b0 <_Bfree>
   88b00:	003ec306 	br	88610 <_dtoa_r+0x728>
   88b04:	1805883a 	mov	r2,r3
   88b08:	003eeb06 	br	886b8 <_dtoa_r+0x7d0>
   88b0c:	d9800a17 	ldw	r6,40(sp)
   88b10:	d8c01117 	ldw	r3,68(sp)
   88b14:	20bfff04 	addi	r2,r4,-4
   88b18:	308d883a 	add	r6,r6,r2
   88b1c:	1887883a 	add	r3,r3,r2
   88b20:	80a1883a 	add	r16,r16,r2
   88b24:	d9800a15 	stw	r6,40(sp)
   88b28:	d8c01115 	stw	r3,68(sp)
   88b2c:	003f1d06 	br	887a4 <_dtoa_r+0x8bc>
   88b30:	a03f0c1e 	bne	r20,zero,88764 <_dtoa_r+0x87c>
   88b34:	00800434 	movhi	r2,16
   88b38:	10bfffc4 	addi	r2,r2,-1
   88b3c:	a884703a 	and	r2,r21,r2
   88b40:	103f081e 	bne	r2,zero,88764 <_dtoa_r+0x87c>
   88b44:	a89ffc2c 	andhi	r2,r21,32752
   88b48:	103f0626 	beq	r2,zero,88764 <_dtoa_r+0x87c>
   88b4c:	d8c01117 	ldw	r3,68(sp)
   88b50:	d9000a17 	ldw	r4,40(sp)
   88b54:	18c00044 	addi	r3,r3,1
   88b58:	21000044 	addi	r4,r4,1
   88b5c:	d8c01115 	stw	r3,68(sp)
   88b60:	d9000a15 	stw	r4,40(sp)
   88b64:	003f0006 	br	88768 <_dtoa_r+0x880>
   88b68:	d9400717 	ldw	r5,28(sp)
   88b6c:	d9001617 	ldw	r4,88(sp)
   88b70:	008befc0 	call	8befc <__pow5mult>
   88b74:	d8800715 	stw	r2,28(sp)
   88b78:	003eed06 	br	88730 <_dtoa_r+0x848>
   88b7c:	1000021e 	bne	r2,zero,88b88 <_dtoa_r+0xca0>
   88b80:	b880004c 	andi	r2,r23,1
   88b84:	103fc11e 	bne	r2,zero,88a8c <_dtoa_r+0xba4>
   88b88:	b5bfffc4 	addi	r22,r22,-1
   88b8c:	b0c00007 	ldb	r3,0(r22)
   88b90:	00800c04 	movi	r2,48
   88b94:	18bffc26 	beq	r3,r2,88b88 <_dtoa_r+0xca0>
   88b98:	b7000044 	addi	fp,r22,1
   88b9c:	003fcb06 	br	88acc <_dtoa_r+0xbe4>
   88ba0:	d9800d17 	ldw	r6,52(sp)
   88ba4:	018fc83a 	sub	r7,zero,r6
   88ba8:	3801f726 	beq	r7,zero,89388 <_dtoa_r+0x14a0>
   88bac:	398003cc 	andi	r6,r7,15
   88bb0:	300c90fa 	slli	r6,r6,3
   88bb4:	01400274 	movhi	r5,9
   88bb8:	29490d04 	addi	r5,r5,9268
   88bbc:	d9001217 	ldw	r4,72(sp)
   88bc0:	314d883a 	add	r6,r6,r5
   88bc4:	30c00117 	ldw	r3,4(r6)
   88bc8:	30800017 	ldw	r2,0(r6)
   88bcc:	d9401317 	ldw	r5,76(sp)
   88bd0:	3821d13a 	srai	r16,r7,4
   88bd4:	100d883a 	mov	r6,r2
   88bd8:	180f883a 	mov	r7,r3
   88bdc:	008e0900 	call	8e090 <__muldf3>
   88be0:	1011883a 	mov	r8,r2
   88be4:	1813883a 	mov	r9,r3
   88be8:	1029883a 	mov	r20,r2
   88bec:	182b883a 	mov	r21,r3
   88bf0:	8001e526 	beq	r16,zero,89388 <_dtoa_r+0x14a0>
   88bf4:	05800084 	movi	r22,2
   88bf8:	04400274 	movhi	r17,9
   88bfc:	8c493f04 	addi	r17,r17,9468
   88c00:	8080004c 	andi	r2,r16,1
   88c04:	1005003a 	cmpeq	r2,r2,zero
   88c08:	1000081e 	bne	r2,zero,88c2c <_dtoa_r+0xd44>
   88c0c:	89800017 	ldw	r6,0(r17)
   88c10:	89c00117 	ldw	r7,4(r17)
   88c14:	480b883a 	mov	r5,r9
   88c18:	4009883a 	mov	r4,r8
   88c1c:	008e0900 	call	8e090 <__muldf3>
   88c20:	1011883a 	mov	r8,r2
   88c24:	b5800044 	addi	r22,r22,1
   88c28:	1813883a 	mov	r9,r3
   88c2c:	8021d07a 	srai	r16,r16,1
   88c30:	8c400204 	addi	r17,r17,8
   88c34:	803ff21e 	bne	r16,zero,88c00 <_dtoa_r+0xd18>
   88c38:	4029883a 	mov	r20,r8
   88c3c:	482b883a 	mov	r21,r9
   88c40:	003dca06 	br	8836c <_dtoa_r+0x484>
   88c44:	d9000817 	ldw	r4,32(sp)
   88c48:	2005003a 	cmpeq	r2,r4,zero
   88c4c:	1001f61e 	bne	r2,zero,89428 <_dtoa_r+0x1540>
   88c50:	dc001117 	ldw	r16,68(sp)
   88c54:	dc801017 	ldw	r18,64(sp)
   88c58:	18c10cc4 	addi	r3,r3,1075
   88c5c:	003f6106 	br	889e4 <_dtoa_r+0xafc>
   88c60:	d8000b15 	stw	zero,44(sp)
   88c64:	d9802617 	ldw	r6,152(sp)
   88c68:	d8c00d17 	ldw	r3,52(sp)
   88c6c:	30800044 	addi	r2,r6,1
   88c70:	18ad883a 	add	r22,r3,r2
   88c74:	b13fffc4 	addi	r4,r22,-1
   88c78:	d9000e15 	stw	r4,56(sp)
   88c7c:	0581f60e 	bge	zero,r22,89458 <_dtoa_r+0x1570>
   88c80:	dd800f15 	stw	r22,60(sp)
   88c84:	003f3006 	br	88948 <_dtoa_r+0xa60>
   88c88:	d8000b15 	stw	zero,44(sp)
   88c8c:	d9002617 	ldw	r4,152(sp)
   88c90:	0101eb0e 	bge	zero,r4,89440 <_dtoa_r+0x1558>
   88c94:	202d883a 	mov	r22,r4
   88c98:	d9000e15 	stw	r4,56(sp)
   88c9c:	d9000f15 	stw	r4,60(sp)
   88ca0:	003f2906 	br	88948 <_dtoa_r+0xa60>
   88ca4:	01800044 	movi	r6,1
   88ca8:	d9800b15 	stw	r6,44(sp)
   88cac:	003ff706 	br	88c8c <_dtoa_r+0xda4>
   88cb0:	01000044 	movi	r4,1
   88cb4:	d9000b15 	stw	r4,44(sp)
   88cb8:	003fea06 	br	88c64 <_dtoa_r+0xd7c>
   88cbc:	04000c0e 	bge	zero,r16,88cf0 <_dtoa_r+0xe08>
   88cc0:	d9400717 	ldw	r5,28(sp)
   88cc4:	d9001617 	ldw	r4,88(sp)
   88cc8:	01800044 	movi	r6,1
   88ccc:	008b9f40 	call	8b9f4 <__lshift>
   88cd0:	1009883a 	mov	r4,r2
   88cd4:	900b883a 	mov	r5,r18
   88cd8:	d8800715 	stw	r2,28(sp)
   88cdc:	008b20c0 	call	8b20c <__mcmp>
   88ce0:	0081e00e 	bge	zero,r2,89464 <_dtoa_r+0x157c>
   88ce4:	bdc00044 	addi	r23,r23,1
   88ce8:	00800e84 	movi	r2,58
   88cec:	b881a226 	beq	r23,r2,89378 <_dtoa_r+0x1490>
   88cf0:	b7000044 	addi	fp,r22,1
   88cf4:	b5c00005 	stb	r23,0(r22)
   88cf8:	003f7406 	br	88acc <_dtoa_r+0xbe4>
   88cfc:	00800e44 	movi	r2,57
   88d00:	b8819d26 	beq	r23,r2,89378 <_dtoa_r+0x1490>
   88d04:	053ffa0e 	bge	zero,r20,88cf0 <_dtoa_r+0xe08>
   88d08:	8dc00c44 	addi	r23,r17,49
   88d0c:	003ff806 	br	88cf0 <_dtoa_r+0xe08>
   88d10:	d9001617 	ldw	r4,88(sp)
   88d14:	a80b883a 	mov	r5,r21
   88d18:	04000044 	movi	r16,1
   88d1c:	008b0b00 	call	8b0b0 <_Bfree>
   88d20:	003edf06 	br	888a0 <_dtoa_r+0x9b8>
   88d24:	d9001617 	ldw	r4,88(sp)
   88d28:	980b883a 	mov	r5,r19
   88d2c:	01800284 	movi	r6,10
   88d30:	000f883a 	mov	r7,zero
   88d34:	008bdd00 	call	8bdd0 <__multadd>
   88d38:	1027883a 	mov	r19,r2
   88d3c:	d8800615 	stw	r2,24(sp)
   88d40:	003ebb06 	br	88830 <_dtoa_r+0x948>
   88d44:	d9801117 	ldw	r6,68(sp)
   88d48:	d8800d17 	ldw	r2,52(sp)
   88d4c:	d8000915 	stw	zero,36(sp)
   88d50:	308dc83a 	sub	r6,r6,r2
   88d54:	0087c83a 	sub	r3,zero,r2
   88d58:	d9801115 	stw	r6,68(sp)
   88d5c:	d8c01015 	stw	r3,64(sp)
   88d60:	003cfe06 	br	8815c <_dtoa_r+0x274>
   88d64:	018dc83a 	sub	r6,zero,r6
   88d68:	d9801115 	stw	r6,68(sp)
   88d6c:	d8000a15 	stw	zero,40(sp)
   88d70:	003cf306 	br	88140 <_dtoa_r+0x258>
   88d74:	d9000d17 	ldw	r4,52(sp)
   88d78:	008e9540 	call	8e954 <__floatsidf>
   88d7c:	880b883a 	mov	r5,r17
   88d80:	8009883a 	mov	r4,r16
   88d84:	180f883a 	mov	r7,r3
   88d88:	100d883a 	mov	r6,r2
   88d8c:	008e7340 	call	8e734 <__nedf2>
   88d90:	103ce126 	beq	r2,zero,88118 <_dtoa_r+0x230>
   88d94:	d9800d17 	ldw	r6,52(sp)
   88d98:	31bfffc4 	addi	r6,r6,-1
   88d9c:	d9800d15 	stw	r6,52(sp)
   88da0:	003cdd06 	br	88118 <_dtoa_r+0x230>
   88da4:	d9000717 	ldw	r4,28(sp)
   88da8:	900b883a 	mov	r5,r18
   88dac:	008b20c0 	call	8b20c <__mcmp>
   88db0:	103e8d0e 	bge	r2,zero,887e8 <_dtoa_r+0x900>
   88db4:	d9400717 	ldw	r5,28(sp)
   88db8:	d9001617 	ldw	r4,88(sp)
   88dbc:	01800284 	movi	r6,10
   88dc0:	000f883a 	mov	r7,zero
   88dc4:	008bdd00 	call	8bdd0 <__multadd>
   88dc8:	d9800d17 	ldw	r6,52(sp)
   88dcc:	d8800715 	stw	r2,28(sp)
   88dd0:	31bfffc4 	addi	r6,r6,-1
   88dd4:	d9800d15 	stw	r6,52(sp)
   88dd8:	b001a71e 	bne	r22,zero,89478 <_dtoa_r+0x1590>
   88ddc:	d8800e17 	ldw	r2,56(sp)
   88de0:	d8800f15 	stw	r2,60(sp)
   88de4:	003e8006 	br	887e8 <_dtoa_r+0x900>
   88de8:	90800417 	ldw	r2,16(r18)
   88dec:	1085883a 	add	r2,r2,r2
   88df0:	1085883a 	add	r2,r2,r2
   88df4:	1485883a 	add	r2,r2,r18
   88df8:	11000417 	ldw	r4,16(r2)
   88dfc:	008b0d80 	call	8b0d8 <__hi0bits>
   88e00:	00c00804 	movi	r3,32
   88e04:	1887c83a 	sub	r3,r3,r2
   88e08:	003e5a06 	br	88774 <_dtoa_r+0x88c>
   88e0c:	d9400717 	ldw	r5,28(sp)
   88e10:	d9801017 	ldw	r6,64(sp)
   88e14:	d9001617 	ldw	r4,88(sp)
   88e18:	008befc0 	call	8befc <__pow5mult>
   88e1c:	d8800715 	stw	r2,28(sp)
   88e20:	003e4306 	br	88730 <_dtoa_r+0x848>
   88e24:	d9800f17 	ldw	r6,60(sp)
   88e28:	d8800d17 	ldw	r2,52(sp)
   88e2c:	d9800315 	stw	r6,12(sp)
   88e30:	d8800415 	stw	r2,16(sp)
   88e34:	d8c00b17 	ldw	r3,44(sp)
   88e38:	1805003a 	cmpeq	r2,r3,zero
   88e3c:	1000e21e 	bne	r2,zero,891c8 <_dtoa_r+0x12e0>
   88e40:	d9000317 	ldw	r4,12(sp)
   88e44:	0005883a 	mov	r2,zero
   88e48:	00cff834 	movhi	r3,16352
   88e4c:	200c90fa 	slli	r6,r4,3
   88e50:	01000274 	movhi	r4,9
   88e54:	21090d04 	addi	r4,r4,9268
   88e58:	180b883a 	mov	r5,r3
   88e5c:	310d883a 	add	r6,r6,r4
   88e60:	327fff17 	ldw	r9,-4(r6)
   88e64:	323ffe17 	ldw	r8,-8(r6)
   88e68:	1009883a 	mov	r4,r2
   88e6c:	480f883a 	mov	r7,r9
   88e70:	400d883a 	mov	r6,r8
   88e74:	008e4540 	call	8e454 <__divdf3>
   88e78:	180b883a 	mov	r5,r3
   88e7c:	b00d883a 	mov	r6,r22
   88e80:	b80f883a 	mov	r7,r23
   88e84:	1009883a 	mov	r4,r2
   88e88:	008df9c0 	call	8df9c <__subdf3>
   88e8c:	a80b883a 	mov	r5,r21
   88e90:	a009883a 	mov	r4,r20
   88e94:	d8c01915 	stw	r3,100(sp)
   88e98:	d8801815 	stw	r2,96(sp)
   88e9c:	008ea4c0 	call	8ea4c <__fixdfsi>
   88ea0:	1009883a 	mov	r4,r2
   88ea4:	1027883a 	mov	r19,r2
   88ea8:	008e9540 	call	8e954 <__floatsidf>
   88eac:	a80b883a 	mov	r5,r21
   88eb0:	a009883a 	mov	r4,r20
   88eb4:	180f883a 	mov	r7,r3
   88eb8:	100d883a 	mov	r6,r2
   88ebc:	008df9c0 	call	8df9c <__subdf3>
   88ec0:	d9801817 	ldw	r6,96(sp)
   88ec4:	1823883a 	mov	r17,r3
   88ec8:	d8801415 	stw	r2,80(sp)
   88ecc:	302d883a 	mov	r22,r6
   88ed0:	d9800517 	ldw	r6,20(sp)
   88ed4:	9cc00c04 	addi	r19,r19,48
   88ed8:	dc401515 	stw	r17,84(sp)
   88edc:	d8c01917 	ldw	r3,100(sp)
   88ee0:	34c00005 	stb	r19,0(r6)
   88ee4:	d8800517 	ldw	r2,20(sp)
   88ee8:	d9401917 	ldw	r5,100(sp)
   88eec:	d9801417 	ldw	r6,80(sp)
   88ef0:	b009883a 	mov	r4,r22
   88ef4:	880f883a 	mov	r7,r17
   88ef8:	182f883a 	mov	r23,r3
   88efc:	17000044 	addi	fp,r2,1
   88f00:	008e7bc0 	call	8e7bc <__gtdf2>
   88f04:	00804e16 	blt	zero,r2,89040 <_dtoa_r+0x1158>
   88f08:	d9801417 	ldw	r6,80(sp)
   88f0c:	0005883a 	mov	r2,zero
   88f10:	00cffc34 	movhi	r3,16368
   88f14:	180b883a 	mov	r5,r3
   88f18:	880f883a 	mov	r7,r17
   88f1c:	1009883a 	mov	r4,r2
   88f20:	008df9c0 	call	8df9c <__subdf3>
   88f24:	d9401917 	ldw	r5,100(sp)
   88f28:	180f883a 	mov	r7,r3
   88f2c:	b009883a 	mov	r4,r22
   88f30:	100d883a 	mov	r6,r2
   88f34:	008e7bc0 	call	8e7bc <__gtdf2>
   88f38:	00bda216 	blt	zero,r2,885c4 <_dtoa_r+0x6dc>
   88f3c:	d8c00317 	ldw	r3,12(sp)
   88f40:	00800044 	movi	r2,1
   88f44:	10c01216 	blt	r2,r3,88f90 <_dtoa_r+0x10a8>
   88f48:	003d4506 	br	88460 <_dtoa_r+0x578>
   88f4c:	d9801417 	ldw	r6,80(sp)
   88f50:	0005883a 	mov	r2,zero
   88f54:	00cffc34 	movhi	r3,16368
   88f58:	180b883a 	mov	r5,r3
   88f5c:	880f883a 	mov	r7,r17
   88f60:	1009883a 	mov	r4,r2
   88f64:	008df9c0 	call	8df9c <__subdf3>
   88f68:	d9c01b17 	ldw	r7,108(sp)
   88f6c:	180b883a 	mov	r5,r3
   88f70:	1009883a 	mov	r4,r2
   88f74:	b00d883a 	mov	r6,r22
   88f78:	008e8cc0 	call	8e8cc <__ltdf2>
   88f7c:	103d9116 	blt	r2,zero,885c4 <_dtoa_r+0x6dc>
   88f80:	d9800517 	ldw	r6,20(sp)
   88f84:	d9000317 	ldw	r4,12(sp)
   88f88:	3105883a 	add	r2,r6,r4
   88f8c:	e0bd3426 	beq	fp,r2,88460 <_dtoa_r+0x578>
   88f90:	04500934 	movhi	r17,16420
   88f94:	0021883a 	mov	r16,zero
   88f98:	b80b883a 	mov	r5,r23
   88f9c:	b009883a 	mov	r4,r22
   88fa0:	800d883a 	mov	r6,r16
   88fa4:	880f883a 	mov	r7,r17
   88fa8:	008e0900 	call	8e090 <__muldf3>
   88fac:	d9401517 	ldw	r5,84(sp)
   88fb0:	d9001417 	ldw	r4,80(sp)
   88fb4:	880f883a 	mov	r7,r17
   88fb8:	000d883a 	mov	r6,zero
   88fbc:	d8801a15 	stw	r2,104(sp)
   88fc0:	d8c01b15 	stw	r3,108(sp)
   88fc4:	008e0900 	call	8e090 <__muldf3>
   88fc8:	180b883a 	mov	r5,r3
   88fcc:	1009883a 	mov	r4,r2
   88fd0:	1823883a 	mov	r17,r3
   88fd4:	1021883a 	mov	r16,r2
   88fd8:	008ea4c0 	call	8ea4c <__fixdfsi>
   88fdc:	1009883a 	mov	r4,r2
   88fe0:	102b883a 	mov	r21,r2
   88fe4:	008e9540 	call	8e954 <__floatsidf>
   88fe8:	880b883a 	mov	r5,r17
   88fec:	8009883a 	mov	r4,r16
   88ff0:	180f883a 	mov	r7,r3
   88ff4:	100d883a 	mov	r6,r2
   88ff8:	008df9c0 	call	8df9c <__subdf3>
   88ffc:	1021883a 	mov	r16,r2
   89000:	d9001b17 	ldw	r4,108(sp)
   89004:	1823883a 	mov	r17,r3
   89008:	dc001415 	stw	r16,80(sp)
   8900c:	ad400c04 	addi	r21,r21,48
   89010:	dc401515 	stw	r17,84(sp)
   89014:	d8801a17 	ldw	r2,104(sp)
   89018:	e5400005 	stb	r21,0(fp)
   8901c:	202f883a 	mov	r23,r4
   89020:	d9c01b17 	ldw	r7,108(sp)
   89024:	d9001417 	ldw	r4,80(sp)
   89028:	880b883a 	mov	r5,r17
   8902c:	100d883a 	mov	r6,r2
   89030:	102d883a 	mov	r22,r2
   89034:	e7000044 	addi	fp,fp,1
   89038:	008e8cc0 	call	8e8cc <__ltdf2>
   8903c:	103fc30e 	bge	r2,zero,88f4c <_dtoa_r+0x1064>
   89040:	d9000417 	ldw	r4,16(sp)
   89044:	d9000d15 	stw	r4,52(sp)
   89048:	003d7106 	br	88610 <_dtoa_r+0x728>
   8904c:	d9801717 	ldw	r6,92(sp)
   89050:	00800084 	movi	r2,2
   89054:	11bde60e 	bge	r2,r6,887f0 <_dtoa_r+0x908>
   89058:	203cfb1e 	bne	r4,zero,88448 <_dtoa_r+0x560>
   8905c:	d9001617 	ldw	r4,88(sp)
   89060:	900b883a 	mov	r5,r18
   89064:	01800144 	movi	r6,5
   89068:	000f883a 	mov	r7,zero
   8906c:	008bdd00 	call	8bdd0 <__multadd>
   89070:	d9000717 	ldw	r4,28(sp)
   89074:	100b883a 	mov	r5,r2
   89078:	1025883a 	mov	r18,r2
   8907c:	008b20c0 	call	8b20c <__mcmp>
   89080:	00bcf10e 	bge	zero,r2,88448 <_dtoa_r+0x560>
   89084:	d8c00d17 	ldw	r3,52(sp)
   89088:	d9000517 	ldw	r4,20(sp)
   8908c:	d8000615 	stw	zero,24(sp)
   89090:	18c00044 	addi	r3,r3,1
   89094:	d8c00d15 	stw	r3,52(sp)
   89098:	00800c44 	movi	r2,49
   8909c:	27000044 	addi	fp,r4,1
   890a0:	20800005 	stb	r2,0(r4)
   890a4:	003e8906 	br	88acc <_dtoa_r+0xbe4>
   890a8:	d8c00517 	ldw	r3,20(sp)
   890ac:	003bc206 	br	87fb8 <_dtoa_r+0xd0>
   890b0:	01800274 	movhi	r6,9
   890b4:	31893f04 	addi	r6,r6,9468
   890b8:	30c00917 	ldw	r3,36(r6)
   890bc:	30800817 	ldw	r2,32(r6)
   890c0:	d9001217 	ldw	r4,72(sp)
   890c4:	d9401317 	ldw	r5,76(sp)
   890c8:	180f883a 	mov	r7,r3
   890cc:	100d883a 	mov	r6,r2
   890d0:	008e4540 	call	8e454 <__divdf3>
   890d4:	948003cc 	andi	r18,r18,15
   890d8:	058000c4 	movi	r22,3
   890dc:	1029883a 	mov	r20,r2
   890e0:	182b883a 	mov	r21,r3
   890e4:	003c8906 	br	8830c <_dtoa_r+0x424>
   890e8:	d9001017 	ldw	r4,64(sp)
   890ec:	d9800917 	ldw	r6,36(sp)
   890f0:	0025883a 	mov	r18,zero
   890f4:	1105c83a 	sub	r2,r2,r4
   890f8:	2089883a 	add	r4,r4,r2
   890fc:	308d883a 	add	r6,r6,r2
   89100:	d9001015 	stw	r4,64(sp)
   89104:	d9800915 	stw	r6,36(sp)
   89108:	003e3206 	br	889d4 <_dtoa_r+0xaec>
   8910c:	28800044 	addi	r2,r5,1
   89110:	27000044 	addi	fp,r4,1
   89114:	20800005 	stb	r2,0(r4)
   89118:	003e6c06 	br	88acc <_dtoa_r+0xbe4>
   8911c:	d8800f17 	ldw	r2,60(sp)
   89120:	00bce016 	blt	zero,r2,884a4 <_dtoa_r+0x5bc>
   89124:	d9800f17 	ldw	r6,60(sp)
   89128:	303cc51e 	bne	r6,zero,88440 <_dtoa_r+0x558>
   8912c:	0005883a 	mov	r2,zero
   89130:	00d00534 	movhi	r3,16404
   89134:	980b883a 	mov	r5,r19
   89138:	180f883a 	mov	r7,r3
   8913c:	9009883a 	mov	r4,r18
   89140:	100d883a 	mov	r6,r2
   89144:	008e0900 	call	8e090 <__muldf3>
   89148:	180b883a 	mov	r5,r3
   8914c:	a80f883a 	mov	r7,r21
   89150:	1009883a 	mov	r4,r2
   89154:	a00d883a 	mov	r6,r20
   89158:	008e8440 	call	8e844 <__gedf2>
   8915c:	103cb80e 	bge	r2,zero,88440 <_dtoa_r+0x558>
   89160:	0027883a 	mov	r19,zero
   89164:	0025883a 	mov	r18,zero
   89168:	003fc606 	br	89084 <_dtoa_r+0x119c>
   8916c:	99400117 	ldw	r5,4(r19)
   89170:	d9001617 	ldw	r4,88(sp)
   89174:	008b6300 	call	8b630 <_Balloc>
   89178:	99800417 	ldw	r6,16(r19)
   8917c:	11000304 	addi	r4,r2,12
   89180:	99400304 	addi	r5,r19,12
   89184:	318d883a 	add	r6,r6,r6
   89188:	318d883a 	add	r6,r6,r6
   8918c:	31800204 	addi	r6,r6,8
   89190:	1023883a 	mov	r17,r2
   89194:	008ae980 	call	8ae98 <memcpy>
   89198:	d9001617 	ldw	r4,88(sp)
   8919c:	880b883a 	mov	r5,r17
   891a0:	01800044 	movi	r6,1
   891a4:	008b9f40 	call	8b9f4 <__lshift>
   891a8:	100b883a 	mov	r5,r2
   891ac:	003d9c06 	br	88820 <_dtoa_r+0x938>
   891b0:	00800e44 	movi	r2,57
   891b4:	b8807026 	beq	r23,r2,89378 <_dtoa_r+0x1490>
   891b8:	b8800044 	addi	r2,r23,1
   891bc:	b7000044 	addi	fp,r22,1
   891c0:	b0800005 	stb	r2,0(r22)
   891c4:	003e4106 	br	88acc <_dtoa_r+0xbe4>
   891c8:	d8800317 	ldw	r2,12(sp)
   891cc:	01800274 	movhi	r6,9
   891d0:	31890d04 	addi	r6,r6,9268
   891d4:	b009883a 	mov	r4,r22
   891d8:	100e90fa 	slli	r7,r2,3
   891dc:	b80b883a 	mov	r5,r23
   891e0:	398f883a 	add	r7,r7,r6
   891e4:	38bffe17 	ldw	r2,-8(r7)
   891e8:	d9800517 	ldw	r6,20(sp)
   891ec:	38ffff17 	ldw	r3,-4(r7)
   891f0:	37000044 	addi	fp,r6,1
   891f4:	180f883a 	mov	r7,r3
   891f8:	100d883a 	mov	r6,r2
   891fc:	008e0900 	call	8e090 <__muldf3>
   89200:	a80b883a 	mov	r5,r21
   89204:	a009883a 	mov	r4,r20
   89208:	182f883a 	mov	r23,r3
   8920c:	102d883a 	mov	r22,r2
   89210:	008ea4c0 	call	8ea4c <__fixdfsi>
   89214:	1009883a 	mov	r4,r2
   89218:	1027883a 	mov	r19,r2
   8921c:	008e9540 	call	8e954 <__floatsidf>
   89220:	a80b883a 	mov	r5,r21
   89224:	a009883a 	mov	r4,r20
   89228:	180f883a 	mov	r7,r3
   8922c:	100d883a 	mov	r6,r2
   89230:	008df9c0 	call	8df9c <__subdf3>
   89234:	180b883a 	mov	r5,r3
   89238:	d8c00517 	ldw	r3,20(sp)
   8923c:	9cc00c04 	addi	r19,r19,48
   89240:	1009883a 	mov	r4,r2
   89244:	1cc00005 	stb	r19,0(r3)
   89248:	2021883a 	mov	r16,r4
   8924c:	d9000317 	ldw	r4,12(sp)
   89250:	00800044 	movi	r2,1
   89254:	2823883a 	mov	r17,r5
   89258:	20802226 	beq	r4,r2,892e4 <_dtoa_r+0x13fc>
   8925c:	1029883a 	mov	r20,r2
   89260:	0005883a 	mov	r2,zero
   89264:	00d00934 	movhi	r3,16420
   89268:	180f883a 	mov	r7,r3
   8926c:	100d883a 	mov	r6,r2
   89270:	880b883a 	mov	r5,r17
   89274:	8009883a 	mov	r4,r16
   89278:	008e0900 	call	8e090 <__muldf3>
   8927c:	180b883a 	mov	r5,r3
   89280:	1009883a 	mov	r4,r2
   89284:	1823883a 	mov	r17,r3
   89288:	1021883a 	mov	r16,r2
   8928c:	008ea4c0 	call	8ea4c <__fixdfsi>
   89290:	1009883a 	mov	r4,r2
   89294:	102b883a 	mov	r21,r2
   89298:	008e9540 	call	8e954 <__floatsidf>
   8929c:	880b883a 	mov	r5,r17
   892a0:	8009883a 	mov	r4,r16
   892a4:	180f883a 	mov	r7,r3
   892a8:	100d883a 	mov	r6,r2
   892ac:	008df9c0 	call	8df9c <__subdf3>
   892b0:	180b883a 	mov	r5,r3
   892b4:	d8c00517 	ldw	r3,20(sp)
   892b8:	1009883a 	mov	r4,r2
   892bc:	ad400c04 	addi	r21,r21,48
   892c0:	1d05883a 	add	r2,r3,r20
   892c4:	15400005 	stb	r21,0(r2)
   892c8:	2021883a 	mov	r16,r4
   892cc:	d9000317 	ldw	r4,12(sp)
   892d0:	a5000044 	addi	r20,r20,1
   892d4:	2823883a 	mov	r17,r5
   892d8:	a13fe11e 	bne	r20,r4,89260 <_dtoa_r+0x1378>
   892dc:	e505883a 	add	r2,fp,r20
   892e0:	173fffc4 	addi	fp,r2,-1
   892e4:	0025883a 	mov	r18,zero
   892e8:	04cff834 	movhi	r19,16352
   892ec:	b009883a 	mov	r4,r22
   892f0:	b80b883a 	mov	r5,r23
   892f4:	900d883a 	mov	r6,r18
   892f8:	980f883a 	mov	r7,r19
   892fc:	008e01c0 	call	8e01c <__adddf3>
   89300:	180b883a 	mov	r5,r3
   89304:	1009883a 	mov	r4,r2
   89308:	800d883a 	mov	r6,r16
   8930c:	880f883a 	mov	r7,r17
   89310:	008e8cc0 	call	8e8cc <__ltdf2>
   89314:	103cab16 	blt	r2,zero,885c4 <_dtoa_r+0x6dc>
   89318:	0009883a 	mov	r4,zero
   8931c:	980b883a 	mov	r5,r19
   89320:	b80f883a 	mov	r7,r23
   89324:	b00d883a 	mov	r6,r22
   89328:	008df9c0 	call	8df9c <__subdf3>
   8932c:	180b883a 	mov	r5,r3
   89330:	880f883a 	mov	r7,r17
   89334:	1009883a 	mov	r4,r2
   89338:	800d883a 	mov	r6,r16
   8933c:	008e7bc0 	call	8e7bc <__gtdf2>
   89340:	00bc470e 	bge	zero,r2,88460 <_dtoa_r+0x578>
   89344:	00c00c04 	movi	r3,48
   89348:	e73fffc4 	addi	fp,fp,-1
   8934c:	e0800007 	ldb	r2,0(fp)
   89350:	10fffd26 	beq	r2,r3,89348 <_dtoa_r+0x1460>
   89354:	d9800417 	ldw	r6,16(sp)
   89358:	e7000044 	addi	fp,fp,1
   8935c:	d9800d15 	stw	r6,52(sp)
   89360:	003cab06 	br	88610 <_dtoa_r+0x728>
   89364:	d8c00f17 	ldw	r3,60(sp)
   89368:	d9001117 	ldw	r4,68(sp)
   8936c:	20e1c83a 	sub	r16,r4,r3
   89370:	0007883a 	mov	r3,zero
   89374:	003d9b06 	br	889e4 <_dtoa_r+0xafc>
   89378:	00800e44 	movi	r2,57
   8937c:	b0800005 	stb	r2,0(r22)
   89380:	b5800044 	addi	r22,r22,1
   89384:	003dc106 	br	88a8c <_dtoa_r+0xba4>
   89388:	05800084 	movi	r22,2
   8938c:	003bf706 	br	8836c <_dtoa_r+0x484>
   89390:	d9000f17 	ldw	r4,60(sp)
   89394:	013c000e 	bge	zero,r4,88398 <_dtoa_r+0x4b0>
   89398:	d9800e17 	ldw	r6,56(sp)
   8939c:	01bc300e 	bge	zero,r6,88460 <_dtoa_r+0x578>
   893a0:	0005883a 	mov	r2,zero
   893a4:	00d00934 	movhi	r3,16420
   893a8:	a80b883a 	mov	r5,r21
   893ac:	180f883a 	mov	r7,r3
   893b0:	a009883a 	mov	r4,r20
   893b4:	100d883a 	mov	r6,r2
   893b8:	008e0900 	call	8e090 <__muldf3>
   893bc:	b1000044 	addi	r4,r22,1
   893c0:	1021883a 	mov	r16,r2
   893c4:	1823883a 	mov	r17,r3
   893c8:	008e9540 	call	8e954 <__floatsidf>
   893cc:	880b883a 	mov	r5,r17
   893d0:	8009883a 	mov	r4,r16
   893d4:	180f883a 	mov	r7,r3
   893d8:	100d883a 	mov	r6,r2
   893dc:	008e0900 	call	8e090 <__muldf3>
   893e0:	0011883a 	mov	r8,zero
   893e4:	02500734 	movhi	r9,16412
   893e8:	180b883a 	mov	r5,r3
   893ec:	480f883a 	mov	r7,r9
   893f0:	1009883a 	mov	r4,r2
   893f4:	400d883a 	mov	r6,r8
   893f8:	008e01c0 	call	8e01c <__adddf3>
   893fc:	102d883a 	mov	r22,r2
   89400:	00bf3034 	movhi	r2,64704
   89404:	10ef883a 	add	r23,r2,r3
   89408:	d8800d17 	ldw	r2,52(sp)
   8940c:	d8c00e17 	ldw	r3,56(sp)
   89410:	8029883a 	mov	r20,r16
   89414:	10bfffc4 	addi	r2,r2,-1
   89418:	882b883a 	mov	r21,r17
   8941c:	d8800415 	stw	r2,16(sp)
   89420:	d8c00315 	stw	r3,12(sp)
   89424:	003e8306 	br	88e34 <_dtoa_r+0xf4c>
   89428:	d8800117 	ldw	r2,4(sp)
   8942c:	dc001117 	ldw	r16,68(sp)
   89430:	dc801017 	ldw	r18,64(sp)
   89434:	00c00d84 	movi	r3,54
   89438:	1887c83a 	sub	r3,r3,r2
   8943c:	003d6906 	br	889e4 <_dtoa_r+0xafc>
   89440:	01800044 	movi	r6,1
   89444:	3021883a 	mov	r16,r6
   89448:	d9800f15 	stw	r6,60(sp)
   8944c:	d9802615 	stw	r6,152(sp)
   89450:	d9800e15 	stw	r6,56(sp)
   89454:	003b9306 	br	882a4 <_dtoa_r+0x3bc>
   89458:	b021883a 	mov	r16,r22
   8945c:	dd800f15 	stw	r22,60(sp)
   89460:	003b9006 	br	882a4 <_dtoa_r+0x3bc>
   89464:	103e221e 	bne	r2,zero,88cf0 <_dtoa_r+0xe08>
   89468:	b880004c 	andi	r2,r23,1
   8946c:	1005003a 	cmpeq	r2,r2,zero
   89470:	103e1f1e 	bne	r2,zero,88cf0 <_dtoa_r+0xe08>
   89474:	003e1b06 	br	88ce4 <_dtoa_r+0xdfc>
   89478:	d9001617 	ldw	r4,88(sp)
   8947c:	980b883a 	mov	r5,r19
   89480:	01800284 	movi	r6,10
   89484:	000f883a 	mov	r7,zero
   89488:	008bdd00 	call	8bdd0 <__multadd>
   8948c:	d8c00e17 	ldw	r3,56(sp)
   89490:	1027883a 	mov	r19,r2
   89494:	d8c00f15 	stw	r3,60(sp)
   89498:	003cd306 	br	887e8 <_dtoa_r+0x900>

0008949c <_fflush_r>:
   8949c:	defffb04 	addi	sp,sp,-20
   894a0:	dcc00315 	stw	r19,12(sp)
   894a4:	dc800215 	stw	r18,8(sp)
   894a8:	dfc00415 	stw	ra,16(sp)
   894ac:	dc400115 	stw	r17,4(sp)
   894b0:	dc000015 	stw	r16,0(sp)
   894b4:	2027883a 	mov	r19,r4
   894b8:	2825883a 	mov	r18,r5
   894bc:	20000226 	beq	r4,zero,894c8 <_fflush_r+0x2c>
   894c0:	20800e17 	ldw	r2,56(r4)
   894c4:	10005626 	beq	r2,zero,89620 <_fflush_r+0x184>
   894c8:	9100030b 	ldhu	r4,12(r18)
   894cc:	20ffffcc 	andi	r3,r4,65535
   894d0:	18e0001c 	xori	r3,r3,32768
   894d4:	18e00004 	addi	r3,r3,-32768
   894d8:	1880020c 	andi	r2,r3,8
   894dc:	1000261e 	bne	r2,zero,89578 <_fflush_r+0xdc>
   894e0:	90c00117 	ldw	r3,4(r18)
   894e4:	20820014 	ori	r2,r4,2048
   894e8:	9080030d 	sth	r2,12(r18)
   894ec:	1009883a 	mov	r4,r2
   894f0:	00c0400e 	bge	zero,r3,895f4 <_fflush_r+0x158>
   894f4:	92000a17 	ldw	r8,40(r18)
   894f8:	40004026 	beq	r8,zero,895fc <_fflush_r+0x160>
   894fc:	2084000c 	andi	r2,r4,4096
   89500:	10005326 	beq	r2,zero,89650 <_fflush_r+0x1b4>
   89504:	94001417 	ldw	r16,80(r18)
   89508:	9080030b 	ldhu	r2,12(r18)
   8950c:	1080010c 	andi	r2,r2,4
   89510:	1000481e 	bne	r2,zero,89634 <_fflush_r+0x198>
   89514:	91400717 	ldw	r5,28(r18)
   89518:	9809883a 	mov	r4,r19
   8951c:	800d883a 	mov	r6,r16
   89520:	000f883a 	mov	r7,zero
   89524:	403ee83a 	callr	r8
   89528:	8080261e 	bne	r16,r2,895c4 <_fflush_r+0x128>
   8952c:	9080030b 	ldhu	r2,12(r18)
   89530:	91000417 	ldw	r4,16(r18)
   89534:	90000115 	stw	zero,4(r18)
   89538:	10bdffcc 	andi	r2,r2,63487
   8953c:	10ffffcc 	andi	r3,r2,65535
   89540:	18c4000c 	andi	r3,r3,4096
   89544:	9080030d 	sth	r2,12(r18)
   89548:	91000015 	stw	r4,0(r18)
   8954c:	18002b26 	beq	r3,zero,895fc <_fflush_r+0x160>
   89550:	0007883a 	mov	r3,zero
   89554:	1805883a 	mov	r2,r3
   89558:	94001415 	stw	r16,80(r18)
   8955c:	dfc00417 	ldw	ra,16(sp)
   89560:	dcc00317 	ldw	r19,12(sp)
   89564:	dc800217 	ldw	r18,8(sp)
   89568:	dc400117 	ldw	r17,4(sp)
   8956c:	dc000017 	ldw	r16,0(sp)
   89570:	dec00504 	addi	sp,sp,20
   89574:	f800283a 	ret
   89578:	94400417 	ldw	r17,16(r18)
   8957c:	88001f26 	beq	r17,zero,895fc <_fflush_r+0x160>
   89580:	90800017 	ldw	r2,0(r18)
   89584:	18c000cc 	andi	r3,r3,3
   89588:	94400015 	stw	r17,0(r18)
   8958c:	1461c83a 	sub	r16,r2,r17
   89590:	18002526 	beq	r3,zero,89628 <_fflush_r+0x18c>
   89594:	0005883a 	mov	r2,zero
   89598:	90800215 	stw	r2,8(r18)
   8959c:	0400170e 	bge	zero,r16,895fc <_fflush_r+0x160>
   895a0:	90c00917 	ldw	r3,36(r18)
   895a4:	91400717 	ldw	r5,28(r18)
   895a8:	880d883a 	mov	r6,r17
   895ac:	800f883a 	mov	r7,r16
   895b0:	9809883a 	mov	r4,r19
   895b4:	183ee83a 	callr	r3
   895b8:	88a3883a 	add	r17,r17,r2
   895bc:	80a1c83a 	sub	r16,r16,r2
   895c0:	00bff616 	blt	zero,r2,8959c <_fflush_r+0x100>
   895c4:	9080030b 	ldhu	r2,12(r18)
   895c8:	00ffffc4 	movi	r3,-1
   895cc:	10801014 	ori	r2,r2,64
   895d0:	9080030d 	sth	r2,12(r18)
   895d4:	1805883a 	mov	r2,r3
   895d8:	dfc00417 	ldw	ra,16(sp)
   895dc:	dcc00317 	ldw	r19,12(sp)
   895e0:	dc800217 	ldw	r18,8(sp)
   895e4:	dc400117 	ldw	r17,4(sp)
   895e8:	dc000017 	ldw	r16,0(sp)
   895ec:	dec00504 	addi	sp,sp,20
   895f0:	f800283a 	ret
   895f4:	90800f17 	ldw	r2,60(r18)
   895f8:	00bfbe16 	blt	zero,r2,894f4 <_fflush_r+0x58>
   895fc:	0007883a 	mov	r3,zero
   89600:	1805883a 	mov	r2,r3
   89604:	dfc00417 	ldw	ra,16(sp)
   89608:	dcc00317 	ldw	r19,12(sp)
   8960c:	dc800217 	ldw	r18,8(sp)
   89610:	dc400117 	ldw	r17,4(sp)
   89614:	dc000017 	ldw	r16,0(sp)
   89618:	dec00504 	addi	sp,sp,20
   8961c:	f800283a 	ret
   89620:	00897340 	call	89734 <__sinit>
   89624:	003fa806 	br	894c8 <_fflush_r+0x2c>
   89628:	90800517 	ldw	r2,20(r18)
   8962c:	90800215 	stw	r2,8(r18)
   89630:	003fda06 	br	8959c <_fflush_r+0x100>
   89634:	90800117 	ldw	r2,4(r18)
   89638:	90c00c17 	ldw	r3,48(r18)
   8963c:	80a1c83a 	sub	r16,r16,r2
   89640:	183fb426 	beq	r3,zero,89514 <_fflush_r+0x78>
   89644:	90800f17 	ldw	r2,60(r18)
   89648:	80a1c83a 	sub	r16,r16,r2
   8964c:	003fb106 	br	89514 <_fflush_r+0x78>
   89650:	91400717 	ldw	r5,28(r18)
   89654:	9809883a 	mov	r4,r19
   89658:	000d883a 	mov	r6,zero
   8965c:	01c00044 	movi	r7,1
   89660:	403ee83a 	callr	r8
   89664:	1021883a 	mov	r16,r2
   89668:	00bfffc4 	movi	r2,-1
   8966c:	80800226 	beq	r16,r2,89678 <_fflush_r+0x1dc>
   89670:	92000a17 	ldw	r8,40(r18)
   89674:	003fa406 	br	89508 <_fflush_r+0x6c>
   89678:	98c00017 	ldw	r3,0(r19)
   8967c:	00800744 	movi	r2,29
   89680:	18bfde26 	beq	r3,r2,895fc <_fflush_r+0x160>
   89684:	9080030b 	ldhu	r2,12(r18)
   89688:	8007883a 	mov	r3,r16
   8968c:	10801014 	ori	r2,r2,64
   89690:	9080030d 	sth	r2,12(r18)
   89694:	003fcf06 	br	895d4 <_fflush_r+0x138>

00089698 <fflush>:
   89698:	01400274 	movhi	r5,9
   8969c:	29652704 	addi	r5,r5,-27492
   896a0:	2007883a 	mov	r3,r4
   896a4:	20000526 	beq	r4,zero,896bc <fflush+0x24>
   896a8:	00800274 	movhi	r2,9
   896ac:	10904104 	addi	r2,r2,16644
   896b0:	11000017 	ldw	r4,0(r2)
   896b4:	180b883a 	mov	r5,r3
   896b8:	008949c1 	jmpi	8949c <_fflush_r>
   896bc:	00800274 	movhi	r2,9
   896c0:	10904204 	addi	r2,r2,16648
   896c4:	11000017 	ldw	r4,0(r2)
   896c8:	008a29c1 	jmpi	8a29c <_fwalk_reent>

000896cc <std>:
   896cc:	00800274 	movhi	r2,9
   896d0:	10b20404 	addi	r2,r2,-14320
   896d4:	20800b15 	stw	r2,44(r4)
   896d8:	00800274 	movhi	r2,9
   896dc:	10b23f04 	addi	r2,r2,-14084
   896e0:	20800815 	stw	r2,32(r4)
   896e4:	00c00274 	movhi	r3,9
   896e8:	18f22004 	addi	r3,r3,-14208
   896ec:	00800274 	movhi	r2,9
   896f0:	10b20604 	addi	r2,r2,-14312
   896f4:	2140030d 	sth	r5,12(r4)
   896f8:	2180038d 	sth	r6,14(r4)
   896fc:	20c00915 	stw	r3,36(r4)
   89700:	20800a15 	stw	r2,40(r4)
   89704:	20000015 	stw	zero,0(r4)
   89708:	20000115 	stw	zero,4(r4)
   8970c:	20000215 	stw	zero,8(r4)
   89710:	20000415 	stw	zero,16(r4)
   89714:	20000515 	stw	zero,20(r4)
   89718:	20000615 	stw	zero,24(r4)
   8971c:	21000715 	stw	r4,28(r4)
   89720:	f800283a 	ret

00089724 <__sfp_lock_acquire>:
   89724:	f800283a 	ret

00089728 <__sfp_lock_release>:
   89728:	f800283a 	ret

0008972c <__sinit_lock_acquire>:
   8972c:	f800283a 	ret

00089730 <__sinit_lock_release>:
   89730:	f800283a 	ret

00089734 <__sinit>:
   89734:	20800e17 	ldw	r2,56(r4)
   89738:	defffd04 	addi	sp,sp,-12
   8973c:	dc400115 	stw	r17,4(sp)
   89740:	dc000015 	stw	r16,0(sp)
   89744:	dfc00215 	stw	ra,8(sp)
   89748:	04400044 	movi	r17,1
   8974c:	01400104 	movi	r5,4
   89750:	000d883a 	mov	r6,zero
   89754:	2021883a 	mov	r16,r4
   89758:	2200bb04 	addi	r8,r4,748
   8975c:	200f883a 	mov	r7,r4
   89760:	10000526 	beq	r2,zero,89778 <__sinit+0x44>
   89764:	dfc00217 	ldw	ra,8(sp)
   89768:	dc400117 	ldw	r17,4(sp)
   8976c:	dc000017 	ldw	r16,0(sp)
   89770:	dec00304 	addi	sp,sp,12
   89774:	f800283a 	ret
   89778:	21000117 	ldw	r4,4(r4)
   8977c:	00800274 	movhi	r2,9
   89780:	10a60604 	addi	r2,r2,-26600
   89784:	00c000c4 	movi	r3,3
   89788:	80800f15 	stw	r2,60(r16)
   8978c:	80c0b915 	stw	r3,740(r16)
   89790:	8200ba15 	stw	r8,744(r16)
   89794:	84400e15 	stw	r17,56(r16)
   89798:	8000b815 	stw	zero,736(r16)
   8979c:	00896cc0 	call	896cc <std>
   897a0:	81000217 	ldw	r4,8(r16)
   897a4:	880d883a 	mov	r6,r17
   897a8:	800f883a 	mov	r7,r16
   897ac:	01400284 	movi	r5,10
   897b0:	00896cc0 	call	896cc <std>
   897b4:	81000317 	ldw	r4,12(r16)
   897b8:	800f883a 	mov	r7,r16
   897bc:	01400484 	movi	r5,18
   897c0:	01800084 	movi	r6,2
   897c4:	dfc00217 	ldw	ra,8(sp)
   897c8:	dc400117 	ldw	r17,4(sp)
   897cc:	dc000017 	ldw	r16,0(sp)
   897d0:	dec00304 	addi	sp,sp,12
   897d4:	00896cc1 	jmpi	896cc <std>

000897d8 <__fp_lock>:
   897d8:	0005883a 	mov	r2,zero
   897dc:	f800283a 	ret

000897e0 <__fp_unlock>:
   897e0:	0005883a 	mov	r2,zero
   897e4:	f800283a 	ret

000897e8 <__fp_unlock_all>:
   897e8:	00800274 	movhi	r2,9
   897ec:	10904104 	addi	r2,r2,16644
   897f0:	11000017 	ldw	r4,0(r2)
   897f4:	01400274 	movhi	r5,9
   897f8:	2965f804 	addi	r5,r5,-26656
   897fc:	008a3641 	jmpi	8a364 <_fwalk>

00089800 <__fp_lock_all>:
   89800:	00800274 	movhi	r2,9
   89804:	10904104 	addi	r2,r2,16644
   89808:	11000017 	ldw	r4,0(r2)
   8980c:	01400274 	movhi	r5,9
   89810:	2965f604 	addi	r5,r5,-26664
   89814:	008a3641 	jmpi	8a364 <_fwalk>

00089818 <_cleanup_r>:
   89818:	01400274 	movhi	r5,9
   8981c:	29733604 	addi	r5,r5,-13096
   89820:	008a3641 	jmpi	8a364 <_fwalk>

00089824 <_cleanup>:
   89824:	00800274 	movhi	r2,9
   89828:	10904204 	addi	r2,r2,16648
   8982c:	11000017 	ldw	r4,0(r2)
   89830:	00898181 	jmpi	89818 <_cleanup_r>

00089834 <__sfmoreglue>:
   89834:	defffc04 	addi	sp,sp,-16
   89838:	dc000015 	stw	r16,0(sp)
   8983c:	2821883a 	mov	r16,r5
   89840:	dc400115 	stw	r17,4(sp)
   89844:	01401704 	movi	r5,92
   89848:	2023883a 	mov	r17,r4
   8984c:	8009883a 	mov	r4,r16
   89850:	dfc00315 	stw	ra,12(sp)
   89854:	dcc00215 	stw	r19,8(sp)
   89858:	008597c0 	call	8597c <__mulsi3>
   8985c:	11400304 	addi	r5,r2,12
   89860:	8809883a 	mov	r4,r17
   89864:	1027883a 	mov	r19,r2
   89868:	008a6740 	call	8a674 <_malloc_r>
   8986c:	10c00304 	addi	r3,r2,12
   89870:	1023883a 	mov	r17,r2
   89874:	1809883a 	mov	r4,r3
   89878:	980d883a 	mov	r6,r19
   8987c:	000b883a 	mov	r5,zero
   89880:	10000b26 	beq	r2,zero,898b0 <__sfmoreglue+0x7c>
   89884:	14000115 	stw	r16,4(r2)
   89888:	10c00215 	stw	r3,8(r2)
   8988c:	10000015 	stw	zero,0(r2)
   89890:	008b0180 	call	8b018 <memset>
   89894:	8805883a 	mov	r2,r17
   89898:	dfc00317 	ldw	ra,12(sp)
   8989c:	dcc00217 	ldw	r19,8(sp)
   898a0:	dc400117 	ldw	r17,4(sp)
   898a4:	dc000017 	ldw	r16,0(sp)
   898a8:	dec00404 	addi	sp,sp,16
   898ac:	f800283a 	ret
   898b0:	0023883a 	mov	r17,zero
   898b4:	8805883a 	mov	r2,r17
   898b8:	dfc00317 	ldw	ra,12(sp)
   898bc:	dcc00217 	ldw	r19,8(sp)
   898c0:	dc400117 	ldw	r17,4(sp)
   898c4:	dc000017 	ldw	r16,0(sp)
   898c8:	dec00404 	addi	sp,sp,16
   898cc:	f800283a 	ret

000898d0 <__sfp>:
   898d0:	defffd04 	addi	sp,sp,-12
   898d4:	00800274 	movhi	r2,9
   898d8:	10904204 	addi	r2,r2,16648
   898dc:	dc000015 	stw	r16,0(sp)
   898e0:	14000017 	ldw	r16,0(r2)
   898e4:	dc400115 	stw	r17,4(sp)
   898e8:	dfc00215 	stw	ra,8(sp)
   898ec:	80800e17 	ldw	r2,56(r16)
   898f0:	2023883a 	mov	r17,r4
   898f4:	10002626 	beq	r2,zero,89990 <__sfp+0xc0>
   898f8:	8400b804 	addi	r16,r16,736
   898fc:	80800117 	ldw	r2,4(r16)
   89900:	81000217 	ldw	r4,8(r16)
   89904:	10ffffc4 	addi	r3,r2,-1
   89908:	18000916 	blt	r3,zero,89930 <__sfp+0x60>
   8990c:	2080030f 	ldh	r2,12(r4)
   89910:	10000b26 	beq	r2,zero,89940 <__sfp+0x70>
   89914:	017fffc4 	movi	r5,-1
   89918:	00000206 	br	89924 <__sfp+0x54>
   8991c:	2080030f 	ldh	r2,12(r4)
   89920:	10000726 	beq	r2,zero,89940 <__sfp+0x70>
   89924:	18ffffc4 	addi	r3,r3,-1
   89928:	21001704 	addi	r4,r4,92
   8992c:	197ffb1e 	bne	r3,r5,8991c <__sfp+0x4c>
   89930:	80800017 	ldw	r2,0(r16)
   89934:	10001926 	beq	r2,zero,8999c <__sfp+0xcc>
   89938:	1021883a 	mov	r16,r2
   8993c:	003fef06 	br	898fc <__sfp+0x2c>
   89940:	00bfffc4 	movi	r2,-1
   89944:	00c00044 	movi	r3,1
   89948:	2080038d 	sth	r2,14(r4)
   8994c:	20c0030d 	sth	r3,12(r4)
   89950:	20000015 	stw	zero,0(r4)
   89954:	20000215 	stw	zero,8(r4)
   89958:	20000115 	stw	zero,4(r4)
   8995c:	20000415 	stw	zero,16(r4)
   89960:	20000515 	stw	zero,20(r4)
   89964:	20000615 	stw	zero,24(r4)
   89968:	20000c15 	stw	zero,48(r4)
   8996c:	20000d15 	stw	zero,52(r4)
   89970:	20001115 	stw	zero,68(r4)
   89974:	20001215 	stw	zero,72(r4)
   89978:	2005883a 	mov	r2,r4
   8997c:	dfc00217 	ldw	ra,8(sp)
   89980:	dc400117 	ldw	r17,4(sp)
   89984:	dc000017 	ldw	r16,0(sp)
   89988:	dec00304 	addi	sp,sp,12
   8998c:	f800283a 	ret
   89990:	8009883a 	mov	r4,r16
   89994:	00897340 	call	89734 <__sinit>
   89998:	003fd706 	br	898f8 <__sfp+0x28>
   8999c:	8809883a 	mov	r4,r17
   899a0:	01400104 	movi	r5,4
   899a4:	00898340 	call	89834 <__sfmoreglue>
   899a8:	80800015 	stw	r2,0(r16)
   899ac:	103fe21e 	bne	r2,zero,89938 <__sfp+0x68>
   899b0:	00800304 	movi	r2,12
   899b4:	0009883a 	mov	r4,zero
   899b8:	88800015 	stw	r2,0(r17)
   899bc:	003fee06 	br	89978 <__sfp+0xa8>

000899c0 <_malloc_trim_r>:
   899c0:	defffb04 	addi	sp,sp,-20
   899c4:	dcc00315 	stw	r19,12(sp)
   899c8:	04c00274 	movhi	r19,9
   899cc:	9ccaaf04 	addi	r19,r19,10940
   899d0:	dc800215 	stw	r18,8(sp)
   899d4:	dc400115 	stw	r17,4(sp)
   899d8:	dc000015 	stw	r16,0(sp)
   899dc:	2823883a 	mov	r17,r5
   899e0:	2025883a 	mov	r18,r4
   899e4:	dfc00415 	stw	ra,16(sp)
   899e8:	008fd200 	call	8fd20 <__malloc_lock>
   899ec:	98800217 	ldw	r2,8(r19)
   899f0:	9009883a 	mov	r4,r18
   899f4:	000b883a 	mov	r5,zero
   899f8:	10c00117 	ldw	r3,4(r2)
   899fc:	00bfff04 	movi	r2,-4
   89a00:	18a0703a 	and	r16,r3,r2
   89a04:	8463c83a 	sub	r17,r16,r17
   89a08:	8c43fbc4 	addi	r17,r17,4079
   89a0c:	8822d33a 	srli	r17,r17,12
   89a10:	0083ffc4 	movi	r2,4095
   89a14:	8c7fffc4 	addi	r17,r17,-1
   89a18:	8822933a 	slli	r17,r17,12
   89a1c:	1440060e 	bge	r2,r17,89a38 <_malloc_trim_r+0x78>
   89a20:	008c7a00 	call	8c7a0 <_sbrk_r>
   89a24:	98c00217 	ldw	r3,8(r19)
   89a28:	9009883a 	mov	r4,r18
   89a2c:	044bc83a 	sub	r5,zero,r17
   89a30:	80c7883a 	add	r3,r16,r3
   89a34:	10c00926 	beq	r2,r3,89a5c <_malloc_trim_r+0x9c>
   89a38:	008fd400 	call	8fd40 <__malloc_unlock>
   89a3c:	0005883a 	mov	r2,zero
   89a40:	dfc00417 	ldw	ra,16(sp)
   89a44:	dcc00317 	ldw	r19,12(sp)
   89a48:	dc800217 	ldw	r18,8(sp)
   89a4c:	dc400117 	ldw	r17,4(sp)
   89a50:	dc000017 	ldw	r16,0(sp)
   89a54:	dec00504 	addi	sp,sp,20
   89a58:	f800283a 	ret
   89a5c:	9009883a 	mov	r4,r18
   89a60:	008c7a00 	call	8c7a0 <_sbrk_r>
   89a64:	844dc83a 	sub	r6,r16,r17
   89a68:	00ffffc4 	movi	r3,-1
   89a6c:	9009883a 	mov	r4,r18
   89a70:	000b883a 	mov	r5,zero
   89a74:	01c00274 	movhi	r7,9
   89a78:	39d71104 	addi	r7,r7,23620
   89a7c:	31800054 	ori	r6,r6,1
   89a80:	10c00926 	beq	r2,r3,89aa8 <_malloc_trim_r+0xe8>
   89a84:	38800017 	ldw	r2,0(r7)
   89a88:	98c00217 	ldw	r3,8(r19)
   89a8c:	9009883a 	mov	r4,r18
   89a90:	1445c83a 	sub	r2,r2,r17
   89a94:	38800015 	stw	r2,0(r7)
   89a98:	19800115 	stw	r6,4(r3)
   89a9c:	008fd400 	call	8fd40 <__malloc_unlock>
   89aa0:	00800044 	movi	r2,1
   89aa4:	003fe606 	br	89a40 <_malloc_trim_r+0x80>
   89aa8:	008c7a00 	call	8c7a0 <_sbrk_r>
   89aac:	99800217 	ldw	r6,8(r19)
   89ab0:	100f883a 	mov	r7,r2
   89ab4:	9009883a 	mov	r4,r18
   89ab8:	1187c83a 	sub	r3,r2,r6
   89abc:	008003c4 	movi	r2,15
   89ac0:	19400054 	ori	r5,r3,1
   89ac4:	10ffdc0e 	bge	r2,r3,89a38 <_malloc_trim_r+0x78>
   89ac8:	00800274 	movhi	r2,9
   89acc:	10904604 	addi	r2,r2,16664
   89ad0:	10c00017 	ldw	r3,0(r2)
   89ad4:	00800274 	movhi	r2,9
   89ad8:	10971104 	addi	r2,r2,23620
   89adc:	31400115 	stw	r5,4(r6)
   89ae0:	38c7c83a 	sub	r3,r7,r3
   89ae4:	10c00015 	stw	r3,0(r2)
   89ae8:	003fd306 	br	89a38 <_malloc_trim_r+0x78>

00089aec <_free_r>:
   89aec:	defffd04 	addi	sp,sp,-12
   89af0:	dc400115 	stw	r17,4(sp)
   89af4:	dc000015 	stw	r16,0(sp)
   89af8:	dfc00215 	stw	ra,8(sp)
   89afc:	2821883a 	mov	r16,r5
   89b00:	2023883a 	mov	r17,r4
   89b04:	28005a26 	beq	r5,zero,89c70 <_free_r+0x184>
   89b08:	008fd200 	call	8fd20 <__malloc_lock>
   89b0c:	823ffe04 	addi	r8,r16,-8
   89b10:	41400117 	ldw	r5,4(r8)
   89b14:	00bfff84 	movi	r2,-2
   89b18:	02800274 	movhi	r10,9
   89b1c:	528aaf04 	addi	r10,r10,10940
   89b20:	288e703a 	and	r7,r5,r2
   89b24:	41cd883a 	add	r6,r8,r7
   89b28:	30c00117 	ldw	r3,4(r6)
   89b2c:	51000217 	ldw	r4,8(r10)
   89b30:	00bfff04 	movi	r2,-4
   89b34:	1892703a 	and	r9,r3,r2
   89b38:	5017883a 	mov	r11,r10
   89b3c:	31006726 	beq	r6,r4,89cdc <_free_r+0x1f0>
   89b40:	2880004c 	andi	r2,r5,1
   89b44:	1005003a 	cmpeq	r2,r2,zero
   89b48:	32400115 	stw	r9,4(r6)
   89b4c:	10001a1e 	bne	r2,zero,89bb8 <_free_r+0xcc>
   89b50:	000b883a 	mov	r5,zero
   89b54:	3247883a 	add	r3,r6,r9
   89b58:	18800117 	ldw	r2,4(r3)
   89b5c:	1080004c 	andi	r2,r2,1
   89b60:	1000231e 	bne	r2,zero,89bf0 <_free_r+0x104>
   89b64:	280ac03a 	cmpne	r5,r5,zero
   89b68:	3a4f883a 	add	r7,r7,r9
   89b6c:	2800451e 	bne	r5,zero,89c84 <_free_r+0x198>
   89b70:	31000217 	ldw	r4,8(r6)
   89b74:	00800274 	movhi	r2,9
   89b78:	108ab104 	addi	r2,r2,10948
   89b7c:	20807b26 	beq	r4,r2,89d6c <_free_r+0x280>
   89b80:	30800317 	ldw	r2,12(r6)
   89b84:	3a07883a 	add	r3,r7,r8
   89b88:	19c00015 	stw	r7,0(r3)
   89b8c:	11000215 	stw	r4,8(r2)
   89b90:	20800315 	stw	r2,12(r4)
   89b94:	38800054 	ori	r2,r7,1
   89b98:	40800115 	stw	r2,4(r8)
   89b9c:	28001a26 	beq	r5,zero,89c08 <_free_r+0x11c>
   89ba0:	8809883a 	mov	r4,r17
   89ba4:	dfc00217 	ldw	ra,8(sp)
   89ba8:	dc400117 	ldw	r17,4(sp)
   89bac:	dc000017 	ldw	r16,0(sp)
   89bb0:	dec00304 	addi	sp,sp,12
   89bb4:	008fd401 	jmpi	8fd40 <__malloc_unlock>
   89bb8:	80bffe17 	ldw	r2,-8(r16)
   89bbc:	50c00204 	addi	r3,r10,8
   89bc0:	4091c83a 	sub	r8,r8,r2
   89bc4:	41000217 	ldw	r4,8(r8)
   89bc8:	388f883a 	add	r7,r7,r2
   89bcc:	20c06126 	beq	r4,r3,89d54 <_free_r+0x268>
   89bd0:	40800317 	ldw	r2,12(r8)
   89bd4:	3247883a 	add	r3,r6,r9
   89bd8:	000b883a 	mov	r5,zero
   89bdc:	11000215 	stw	r4,8(r2)
   89be0:	20800315 	stw	r2,12(r4)
   89be4:	18800117 	ldw	r2,4(r3)
   89be8:	1080004c 	andi	r2,r2,1
   89bec:	103fdd26 	beq	r2,zero,89b64 <_free_r+0x78>
   89bf0:	38800054 	ori	r2,r7,1
   89bf4:	3a07883a 	add	r3,r7,r8
   89bf8:	280ac03a 	cmpne	r5,r5,zero
   89bfc:	40800115 	stw	r2,4(r8)
   89c00:	19c00015 	stw	r7,0(r3)
   89c04:	283fe61e 	bne	r5,zero,89ba0 <_free_r+0xb4>
   89c08:	00807fc4 	movi	r2,511
   89c0c:	11c01f2e 	bgeu	r2,r7,89c8c <_free_r+0x1a0>
   89c10:	3806d27a 	srli	r3,r7,9
   89c14:	1800481e 	bne	r3,zero,89d38 <_free_r+0x24c>
   89c18:	3804d0fa 	srli	r2,r7,3
   89c1c:	100690fa 	slli	r3,r2,3
   89c20:	1acd883a 	add	r6,r3,r11
   89c24:	31400217 	ldw	r5,8(r6)
   89c28:	31405926 	beq	r6,r5,89d90 <_free_r+0x2a4>
   89c2c:	28800117 	ldw	r2,4(r5)
   89c30:	00ffff04 	movi	r3,-4
   89c34:	10c4703a 	and	r2,r2,r3
   89c38:	3880022e 	bgeu	r7,r2,89c44 <_free_r+0x158>
   89c3c:	29400217 	ldw	r5,8(r5)
   89c40:	317ffa1e 	bne	r6,r5,89c2c <_free_r+0x140>
   89c44:	29800317 	ldw	r6,12(r5)
   89c48:	41800315 	stw	r6,12(r8)
   89c4c:	41400215 	stw	r5,8(r8)
   89c50:	8809883a 	mov	r4,r17
   89c54:	2a000315 	stw	r8,12(r5)
   89c58:	32000215 	stw	r8,8(r6)
   89c5c:	dfc00217 	ldw	ra,8(sp)
   89c60:	dc400117 	ldw	r17,4(sp)
   89c64:	dc000017 	ldw	r16,0(sp)
   89c68:	dec00304 	addi	sp,sp,12
   89c6c:	008fd401 	jmpi	8fd40 <__malloc_unlock>
   89c70:	dfc00217 	ldw	ra,8(sp)
   89c74:	dc400117 	ldw	r17,4(sp)
   89c78:	dc000017 	ldw	r16,0(sp)
   89c7c:	dec00304 	addi	sp,sp,12
   89c80:	f800283a 	ret
   89c84:	31000217 	ldw	r4,8(r6)
   89c88:	003fbd06 	br	89b80 <_free_r+0x94>
   89c8c:	3806d0fa 	srli	r3,r7,3
   89c90:	00800044 	movi	r2,1
   89c94:	51400117 	ldw	r5,4(r10)
   89c98:	180890fa 	slli	r4,r3,3
   89c9c:	1807d0ba 	srai	r3,r3,2
   89ca0:	22c9883a 	add	r4,r4,r11
   89ca4:	21800217 	ldw	r6,8(r4)
   89ca8:	10c4983a 	sll	r2,r2,r3
   89cac:	41000315 	stw	r4,12(r8)
   89cb0:	41800215 	stw	r6,8(r8)
   89cb4:	288ab03a 	or	r5,r5,r2
   89cb8:	22000215 	stw	r8,8(r4)
   89cbc:	8809883a 	mov	r4,r17
   89cc0:	51400115 	stw	r5,4(r10)
   89cc4:	32000315 	stw	r8,12(r6)
   89cc8:	dfc00217 	ldw	ra,8(sp)
   89ccc:	dc400117 	ldw	r17,4(sp)
   89cd0:	dc000017 	ldw	r16,0(sp)
   89cd4:	dec00304 	addi	sp,sp,12
   89cd8:	008fd401 	jmpi	8fd40 <__malloc_unlock>
   89cdc:	2880004c 	andi	r2,r5,1
   89ce0:	3a4d883a 	add	r6,r7,r9
   89ce4:	1000071e 	bne	r2,zero,89d04 <_free_r+0x218>
   89ce8:	80bffe17 	ldw	r2,-8(r16)
   89cec:	4091c83a 	sub	r8,r8,r2
   89cf0:	41000317 	ldw	r4,12(r8)
   89cf4:	40c00217 	ldw	r3,8(r8)
   89cf8:	308d883a 	add	r6,r6,r2
   89cfc:	20c00215 	stw	r3,8(r4)
   89d00:	19000315 	stw	r4,12(r3)
   89d04:	00800274 	movhi	r2,9
   89d08:	10904504 	addi	r2,r2,16660
   89d0c:	11000017 	ldw	r4,0(r2)
   89d10:	30c00054 	ori	r3,r6,1
   89d14:	52000215 	stw	r8,8(r10)
   89d18:	40c00115 	stw	r3,4(r8)
   89d1c:	313fa036 	bltu	r6,r4,89ba0 <_free_r+0xb4>
   89d20:	00800274 	movhi	r2,9
   89d24:	10970704 	addi	r2,r2,23580
   89d28:	11400017 	ldw	r5,0(r2)
   89d2c:	8809883a 	mov	r4,r17
   89d30:	00899c00 	call	899c0 <_malloc_trim_r>
   89d34:	003f9a06 	br	89ba0 <_free_r+0xb4>
   89d38:	00800104 	movi	r2,4
   89d3c:	10c0072e 	bgeu	r2,r3,89d5c <_free_r+0x270>
   89d40:	00800504 	movi	r2,20
   89d44:	10c01936 	bltu	r2,r3,89dac <_free_r+0x2c0>
   89d48:	188016c4 	addi	r2,r3,91
   89d4c:	100690fa 	slli	r3,r2,3
   89d50:	003fb306 	br	89c20 <_free_r+0x134>
   89d54:	01400044 	movi	r5,1
   89d58:	003f7e06 	br	89b54 <_free_r+0x68>
   89d5c:	3804d1ba 	srli	r2,r7,6
   89d60:	10800e04 	addi	r2,r2,56
   89d64:	100690fa 	slli	r3,r2,3
   89d68:	003fad06 	br	89c20 <_free_r+0x134>
   89d6c:	22000315 	stw	r8,12(r4)
   89d70:	22000215 	stw	r8,8(r4)
   89d74:	3a05883a 	add	r2,r7,r8
   89d78:	38c00054 	ori	r3,r7,1
   89d7c:	11c00015 	stw	r7,0(r2)
   89d80:	41000215 	stw	r4,8(r8)
   89d84:	40c00115 	stw	r3,4(r8)
   89d88:	41000315 	stw	r4,12(r8)
   89d8c:	003f8406 	br	89ba0 <_free_r+0xb4>
   89d90:	1005d0ba 	srai	r2,r2,2
   89d94:	00c00044 	movi	r3,1
   89d98:	51000117 	ldw	r4,4(r10)
   89d9c:	1886983a 	sll	r3,r3,r2
   89da0:	20c8b03a 	or	r4,r4,r3
   89da4:	51000115 	stw	r4,4(r10)
   89da8:	003fa706 	br	89c48 <_free_r+0x15c>
   89dac:	00801504 	movi	r2,84
   89db0:	10c00436 	bltu	r2,r3,89dc4 <_free_r+0x2d8>
   89db4:	3804d33a 	srli	r2,r7,12
   89db8:	10801b84 	addi	r2,r2,110
   89dbc:	100690fa 	slli	r3,r2,3
   89dc0:	003f9706 	br	89c20 <_free_r+0x134>
   89dc4:	00805504 	movi	r2,340
   89dc8:	10c00436 	bltu	r2,r3,89ddc <_free_r+0x2f0>
   89dcc:	3804d3fa 	srli	r2,r7,15
   89dd0:	10801dc4 	addi	r2,r2,119
   89dd4:	100690fa 	slli	r3,r2,3
   89dd8:	003f9106 	br	89c20 <_free_r+0x134>
   89ddc:	00815504 	movi	r2,1364
   89de0:	10c0032e 	bgeu	r2,r3,89df0 <_free_r+0x304>
   89de4:	00801f84 	movi	r2,126
   89de8:	00c0fc04 	movi	r3,1008
   89dec:	003f8c06 	br	89c20 <_free_r+0x134>
   89df0:	3804d4ba 	srli	r2,r7,18
   89df4:	10801f04 	addi	r2,r2,124
   89df8:	100690fa 	slli	r3,r2,3
   89dfc:	003f8806 	br	89c20 <_free_r+0x134>

00089e00 <__sfvwrite_r>:
   89e00:	30800217 	ldw	r2,8(r6)
   89e04:	defff504 	addi	sp,sp,-44
   89e08:	df000915 	stw	fp,36(sp)
   89e0c:	dd800715 	stw	r22,28(sp)
   89e10:	dc800315 	stw	r18,12(sp)
   89e14:	dfc00a15 	stw	ra,40(sp)
   89e18:	ddc00815 	stw	r23,32(sp)
   89e1c:	dd400615 	stw	r21,24(sp)
   89e20:	dd000515 	stw	r20,20(sp)
   89e24:	dcc00415 	stw	r19,16(sp)
   89e28:	dc400215 	stw	r17,8(sp)
   89e2c:	dc000115 	stw	r16,4(sp)
   89e30:	302d883a 	mov	r22,r6
   89e34:	2039883a 	mov	fp,r4
   89e38:	2825883a 	mov	r18,r5
   89e3c:	10001c26 	beq	r2,zero,89eb0 <__sfvwrite_r+0xb0>
   89e40:	29c0030b 	ldhu	r7,12(r5)
   89e44:	3880020c 	andi	r2,r7,8
   89e48:	10002726 	beq	r2,zero,89ee8 <__sfvwrite_r+0xe8>
   89e4c:	28800417 	ldw	r2,16(r5)
   89e50:	10002526 	beq	r2,zero,89ee8 <__sfvwrite_r+0xe8>
   89e54:	3880008c 	andi	r2,r7,2
   89e58:	b5400017 	ldw	r21,0(r22)
   89e5c:	10002826 	beq	r2,zero,89f00 <__sfvwrite_r+0x100>
   89e60:	0021883a 	mov	r16,zero
   89e64:	0023883a 	mov	r17,zero
   89e68:	880d883a 	mov	r6,r17
   89e6c:	e009883a 	mov	r4,fp
   89e70:	00810004 	movi	r2,1024
   89e74:	80006e26 	beq	r16,zero,8a030 <__sfvwrite_r+0x230>
   89e78:	800f883a 	mov	r7,r16
   89e7c:	91400717 	ldw	r5,28(r18)
   89e80:	1400012e 	bgeu	r2,r16,89e88 <__sfvwrite_r+0x88>
   89e84:	100f883a 	mov	r7,r2
   89e88:	90c00917 	ldw	r3,36(r18)
   89e8c:	183ee83a 	callr	r3
   89e90:	1007883a 	mov	r3,r2
   89e94:	80a1c83a 	sub	r16,r16,r2
   89e98:	88a3883a 	add	r17,r17,r2
   89e9c:	00806d0e 	bge	zero,r2,8a054 <__sfvwrite_r+0x254>
   89ea0:	b0800217 	ldw	r2,8(r22)
   89ea4:	10c5c83a 	sub	r2,r2,r3
   89ea8:	b0800215 	stw	r2,8(r22)
   89eac:	103fee1e 	bne	r2,zero,89e68 <__sfvwrite_r+0x68>
   89eb0:	0009883a 	mov	r4,zero
   89eb4:	2005883a 	mov	r2,r4
   89eb8:	dfc00a17 	ldw	ra,40(sp)
   89ebc:	df000917 	ldw	fp,36(sp)
   89ec0:	ddc00817 	ldw	r23,32(sp)
   89ec4:	dd800717 	ldw	r22,28(sp)
   89ec8:	dd400617 	ldw	r21,24(sp)
   89ecc:	dd000517 	ldw	r20,20(sp)
   89ed0:	dcc00417 	ldw	r19,16(sp)
   89ed4:	dc800317 	ldw	r18,12(sp)
   89ed8:	dc400217 	ldw	r17,8(sp)
   89edc:	dc000117 	ldw	r16,4(sp)
   89ee0:	dec00b04 	addi	sp,sp,44
   89ee4:	f800283a 	ret
   89ee8:	0087b680 	call	87b68 <__swsetup_r>
   89eec:	1000e41e 	bne	r2,zero,8a280 <__sfvwrite_r+0x480>
   89ef0:	91c0030b 	ldhu	r7,12(r18)
   89ef4:	b5400017 	ldw	r21,0(r22)
   89ef8:	3880008c 	andi	r2,r7,2
   89efc:	103fd81e 	bne	r2,zero,89e60 <__sfvwrite_r+0x60>
   89f00:	3880004c 	andi	r2,r7,1
   89f04:	1005003a 	cmpeq	r2,r2,zero
   89f08:	10005726 	beq	r2,zero,8a068 <__sfvwrite_r+0x268>
   89f0c:	0029883a 	mov	r20,zero
   89f10:	002f883a 	mov	r23,zero
   89f14:	a0004226 	beq	r20,zero,8a020 <__sfvwrite_r+0x220>
   89f18:	3880800c 	andi	r2,r7,512
   89f1c:	94000217 	ldw	r16,8(r18)
   89f20:	10008b26 	beq	r2,zero,8a150 <__sfvwrite_r+0x350>
   89f24:	800d883a 	mov	r6,r16
   89f28:	a400a536 	bltu	r20,r16,8a1c0 <__sfvwrite_r+0x3c0>
   89f2c:	3881200c 	andi	r2,r7,1152
   89f30:	10002726 	beq	r2,zero,89fd0 <__sfvwrite_r+0x1d0>
   89f34:	90800517 	ldw	r2,20(r18)
   89f38:	92000417 	ldw	r8,16(r18)
   89f3c:	91400017 	ldw	r5,0(r18)
   89f40:	1087883a 	add	r3,r2,r2
   89f44:	1887883a 	add	r3,r3,r2
   89f48:	1808d7fa 	srli	r4,r3,31
   89f4c:	2a21c83a 	sub	r16,r5,r8
   89f50:	80800044 	addi	r2,r16,1
   89f54:	20c9883a 	add	r4,r4,r3
   89f58:	2027d07a 	srai	r19,r4,1
   89f5c:	a085883a 	add	r2,r20,r2
   89f60:	980d883a 	mov	r6,r19
   89f64:	9880022e 	bgeu	r19,r2,89f70 <__sfvwrite_r+0x170>
   89f68:	1027883a 	mov	r19,r2
   89f6c:	100d883a 	mov	r6,r2
   89f70:	3881000c 	andi	r2,r7,1024
   89f74:	1000b826 	beq	r2,zero,8a258 <__sfvwrite_r+0x458>
   89f78:	300b883a 	mov	r5,r6
   89f7c:	e009883a 	mov	r4,fp
   89f80:	008a6740 	call	8a674 <_malloc_r>
   89f84:	10003126 	beq	r2,zero,8a04c <__sfvwrite_r+0x24c>
   89f88:	91400417 	ldw	r5,16(r18)
   89f8c:	1009883a 	mov	r4,r2
   89f90:	800d883a 	mov	r6,r16
   89f94:	1023883a 	mov	r17,r2
   89f98:	008ae980 	call	8ae98 <memcpy>
   89f9c:	90c0030b 	ldhu	r3,12(r18)
   89fa0:	00beffc4 	movi	r2,-1025
   89fa4:	1886703a 	and	r3,r3,r2
   89fa8:	18c02014 	ori	r3,r3,128
   89fac:	90c0030d 	sth	r3,12(r18)
   89fb0:	9c07c83a 	sub	r3,r19,r16
   89fb4:	8c05883a 	add	r2,r17,r16
   89fb8:	a00d883a 	mov	r6,r20
   89fbc:	a021883a 	mov	r16,r20
   89fc0:	90800015 	stw	r2,0(r18)
   89fc4:	90c00215 	stw	r3,8(r18)
   89fc8:	94400415 	stw	r17,16(r18)
   89fcc:	94c00515 	stw	r19,20(r18)
   89fd0:	91000017 	ldw	r4,0(r18)
   89fd4:	b80b883a 	mov	r5,r23
   89fd8:	a023883a 	mov	r17,r20
   89fdc:	008af380 	call	8af38 <memmove>
   89fe0:	90c00217 	ldw	r3,8(r18)
   89fe4:	90800017 	ldw	r2,0(r18)
   89fe8:	a027883a 	mov	r19,r20
   89fec:	1c07c83a 	sub	r3,r3,r16
   89ff0:	1405883a 	add	r2,r2,r16
   89ff4:	90c00215 	stw	r3,8(r18)
   89ff8:	a021883a 	mov	r16,r20
   89ffc:	90800015 	stw	r2,0(r18)
   8a000:	b0800217 	ldw	r2,8(r22)
   8a004:	1405c83a 	sub	r2,r2,r16
   8a008:	b0800215 	stw	r2,8(r22)
   8a00c:	103fa826 	beq	r2,zero,89eb0 <__sfvwrite_r+0xb0>
   8a010:	a469c83a 	sub	r20,r20,r17
   8a014:	91c0030b 	ldhu	r7,12(r18)
   8a018:	bcef883a 	add	r23,r23,r19
   8a01c:	a03fbe1e 	bne	r20,zero,89f18 <__sfvwrite_r+0x118>
   8a020:	adc00017 	ldw	r23,0(r21)
   8a024:	ad000117 	ldw	r20,4(r21)
   8a028:	ad400204 	addi	r21,r21,8
   8a02c:	003fb906 	br	89f14 <__sfvwrite_r+0x114>
   8a030:	ac400017 	ldw	r17,0(r21)
   8a034:	ac000117 	ldw	r16,4(r21)
   8a038:	ad400204 	addi	r21,r21,8
   8a03c:	003f8a06 	br	89e68 <__sfvwrite_r+0x68>
   8a040:	91400417 	ldw	r5,16(r18)
   8a044:	e009883a 	mov	r4,fp
   8a048:	0089aec0 	call	89aec <_free_r>
   8a04c:	00800304 	movi	r2,12
   8a050:	e0800015 	stw	r2,0(fp)
   8a054:	9080030b 	ldhu	r2,12(r18)
   8a058:	013fffc4 	movi	r4,-1
   8a05c:	10801014 	ori	r2,r2,64
   8a060:	9080030d 	sth	r2,12(r18)
   8a064:	003f9306 	br	89eb4 <__sfvwrite_r+0xb4>
   8a068:	0027883a 	mov	r19,zero
   8a06c:	002f883a 	mov	r23,zero
   8a070:	d8000015 	stw	zero,0(sp)
   8a074:	0029883a 	mov	r20,zero
   8a078:	98001e26 	beq	r19,zero,8a0f4 <__sfvwrite_r+0x2f4>
   8a07c:	d8c00017 	ldw	r3,0(sp)
   8a080:	1804c03a 	cmpne	r2,r3,zero
   8a084:	10005e26 	beq	r2,zero,8a200 <__sfvwrite_r+0x400>
   8a088:	9821883a 	mov	r16,r19
   8a08c:	a4c0012e 	bgeu	r20,r19,8a094 <__sfvwrite_r+0x294>
   8a090:	a021883a 	mov	r16,r20
   8a094:	91000017 	ldw	r4,0(r18)
   8a098:	90800417 	ldw	r2,16(r18)
   8a09c:	91800217 	ldw	r6,8(r18)
   8a0a0:	91c00517 	ldw	r7,20(r18)
   8a0a4:	1100022e 	bgeu	r2,r4,8a0b0 <__sfvwrite_r+0x2b0>
   8a0a8:	31e3883a 	add	r17,r6,r7
   8a0ac:	8c001616 	blt	r17,r16,8a108 <__sfvwrite_r+0x308>
   8a0b0:	81c03816 	blt	r16,r7,8a194 <__sfvwrite_r+0x394>
   8a0b4:	90c00917 	ldw	r3,36(r18)
   8a0b8:	91400717 	ldw	r5,28(r18)
   8a0bc:	e009883a 	mov	r4,fp
   8a0c0:	b80d883a 	mov	r6,r23
   8a0c4:	183ee83a 	callr	r3
   8a0c8:	1023883a 	mov	r17,r2
   8a0cc:	00bfe10e 	bge	zero,r2,8a054 <__sfvwrite_r+0x254>
   8a0d0:	a469c83a 	sub	r20,r20,r17
   8a0d4:	a0001826 	beq	r20,zero,8a138 <__sfvwrite_r+0x338>
   8a0d8:	b0800217 	ldw	r2,8(r22)
   8a0dc:	1445c83a 	sub	r2,r2,r17
   8a0e0:	b0800215 	stw	r2,8(r22)
   8a0e4:	103f7226 	beq	r2,zero,89eb0 <__sfvwrite_r+0xb0>
   8a0e8:	9c67c83a 	sub	r19,r19,r17
   8a0ec:	bc6f883a 	add	r23,r23,r17
   8a0f0:	983fe21e 	bne	r19,zero,8a07c <__sfvwrite_r+0x27c>
   8a0f4:	adc00017 	ldw	r23,0(r21)
   8a0f8:	acc00117 	ldw	r19,4(r21)
   8a0fc:	ad400204 	addi	r21,r21,8
   8a100:	d8000015 	stw	zero,0(sp)
   8a104:	003fdc06 	br	8a078 <__sfvwrite_r+0x278>
   8a108:	b80b883a 	mov	r5,r23
   8a10c:	880d883a 	mov	r6,r17
   8a110:	008af380 	call	8af38 <memmove>
   8a114:	90c00017 	ldw	r3,0(r18)
   8a118:	e009883a 	mov	r4,fp
   8a11c:	900b883a 	mov	r5,r18
   8a120:	1c47883a 	add	r3,r3,r17
   8a124:	90c00015 	stw	r3,0(r18)
   8a128:	008949c0 	call	8949c <_fflush_r>
   8a12c:	103fc91e 	bne	r2,zero,8a054 <__sfvwrite_r+0x254>
   8a130:	a469c83a 	sub	r20,r20,r17
   8a134:	a03fe81e 	bne	r20,zero,8a0d8 <__sfvwrite_r+0x2d8>
   8a138:	e009883a 	mov	r4,fp
   8a13c:	900b883a 	mov	r5,r18
   8a140:	008949c0 	call	8949c <_fflush_r>
   8a144:	103fc31e 	bne	r2,zero,8a054 <__sfvwrite_r+0x254>
   8a148:	d8000015 	stw	zero,0(sp)
   8a14c:	003fe206 	br	8a0d8 <__sfvwrite_r+0x2d8>
   8a150:	91000017 	ldw	r4,0(r18)
   8a154:	90800417 	ldw	r2,16(r18)
   8a158:	1100022e 	bgeu	r2,r4,8a164 <__sfvwrite_r+0x364>
   8a15c:	8023883a 	mov	r17,r16
   8a160:	85003136 	bltu	r16,r20,8a228 <__sfvwrite_r+0x428>
   8a164:	91c00517 	ldw	r7,20(r18)
   8a168:	a1c01836 	bltu	r20,r7,8a1cc <__sfvwrite_r+0x3cc>
   8a16c:	90c00917 	ldw	r3,36(r18)
   8a170:	91400717 	ldw	r5,28(r18)
   8a174:	e009883a 	mov	r4,fp
   8a178:	b80d883a 	mov	r6,r23
   8a17c:	183ee83a 	callr	r3
   8a180:	1021883a 	mov	r16,r2
   8a184:	00bfb30e 	bge	zero,r2,8a054 <__sfvwrite_r+0x254>
   8a188:	1023883a 	mov	r17,r2
   8a18c:	1027883a 	mov	r19,r2
   8a190:	003f9b06 	br	8a000 <__sfvwrite_r+0x200>
   8a194:	b80b883a 	mov	r5,r23
   8a198:	800d883a 	mov	r6,r16
   8a19c:	008af380 	call	8af38 <memmove>
   8a1a0:	90c00217 	ldw	r3,8(r18)
   8a1a4:	90800017 	ldw	r2,0(r18)
   8a1a8:	8023883a 	mov	r17,r16
   8a1ac:	1c07c83a 	sub	r3,r3,r16
   8a1b0:	1405883a 	add	r2,r2,r16
   8a1b4:	90c00215 	stw	r3,8(r18)
   8a1b8:	90800015 	stw	r2,0(r18)
   8a1bc:	003fc406 	br	8a0d0 <__sfvwrite_r+0x2d0>
   8a1c0:	a00d883a 	mov	r6,r20
   8a1c4:	a021883a 	mov	r16,r20
   8a1c8:	003f8106 	br	89fd0 <__sfvwrite_r+0x1d0>
   8a1cc:	b80b883a 	mov	r5,r23
   8a1d0:	a00d883a 	mov	r6,r20
   8a1d4:	008af380 	call	8af38 <memmove>
   8a1d8:	90c00217 	ldw	r3,8(r18)
   8a1dc:	90800017 	ldw	r2,0(r18)
   8a1e0:	a021883a 	mov	r16,r20
   8a1e4:	1d07c83a 	sub	r3,r3,r20
   8a1e8:	1505883a 	add	r2,r2,r20
   8a1ec:	a023883a 	mov	r17,r20
   8a1f0:	a027883a 	mov	r19,r20
   8a1f4:	90c00215 	stw	r3,8(r18)
   8a1f8:	90800015 	stw	r2,0(r18)
   8a1fc:	003f8006 	br	8a000 <__sfvwrite_r+0x200>
   8a200:	b809883a 	mov	r4,r23
   8a204:	01400284 	movi	r5,10
   8a208:	980d883a 	mov	r6,r19
   8a20c:	008adb40 	call	8adb4 <memchr>
   8a210:	10001726 	beq	r2,zero,8a270 <__sfvwrite_r+0x470>
   8a214:	15c5c83a 	sub	r2,r2,r23
   8a218:	15000044 	addi	r20,r2,1
   8a21c:	00800044 	movi	r2,1
   8a220:	d8800015 	stw	r2,0(sp)
   8a224:	003f9806 	br	8a088 <__sfvwrite_r+0x288>
   8a228:	b80b883a 	mov	r5,r23
   8a22c:	800d883a 	mov	r6,r16
   8a230:	008af380 	call	8af38 <memmove>
   8a234:	90c00017 	ldw	r3,0(r18)
   8a238:	e009883a 	mov	r4,fp
   8a23c:	900b883a 	mov	r5,r18
   8a240:	1c07883a 	add	r3,r3,r16
   8a244:	90c00015 	stw	r3,0(r18)
   8a248:	8027883a 	mov	r19,r16
   8a24c:	008949c0 	call	8949c <_fflush_r>
   8a250:	103f6b26 	beq	r2,zero,8a000 <__sfvwrite_r+0x200>
   8a254:	003f7f06 	br	8a054 <__sfvwrite_r+0x254>
   8a258:	400b883a 	mov	r5,r8
   8a25c:	e009883a 	mov	r4,fp
   8a260:	008c13c0 	call	8c13c <_realloc_r>
   8a264:	103f7626 	beq	r2,zero,8a040 <__sfvwrite_r+0x240>
   8a268:	1023883a 	mov	r17,r2
   8a26c:	003f5006 	br	89fb0 <__sfvwrite_r+0x1b0>
   8a270:	00c00044 	movi	r3,1
   8a274:	9d000044 	addi	r20,r19,1
   8a278:	d8c00015 	stw	r3,0(sp)
   8a27c:	003f8206 	br	8a088 <__sfvwrite_r+0x288>
   8a280:	9080030b 	ldhu	r2,12(r18)
   8a284:	00c00244 	movi	r3,9
   8a288:	013fffc4 	movi	r4,-1
   8a28c:	10801014 	ori	r2,r2,64
   8a290:	9080030d 	sth	r2,12(r18)
   8a294:	e0c00015 	stw	r3,0(fp)
   8a298:	003f0606 	br	89eb4 <__sfvwrite_r+0xb4>

0008a29c <_fwalk_reent>:
   8a29c:	defff704 	addi	sp,sp,-36
   8a2a0:	dcc00315 	stw	r19,12(sp)
   8a2a4:	24c0b804 	addi	r19,r4,736
   8a2a8:	dd800615 	stw	r22,24(sp)
   8a2ac:	dd400515 	stw	r21,20(sp)
   8a2b0:	dfc00815 	stw	ra,32(sp)
   8a2b4:	ddc00715 	stw	r23,28(sp)
   8a2b8:	dd000415 	stw	r20,16(sp)
   8a2bc:	dc800215 	stw	r18,8(sp)
   8a2c0:	dc400115 	stw	r17,4(sp)
   8a2c4:	dc000015 	stw	r16,0(sp)
   8a2c8:	202b883a 	mov	r21,r4
   8a2cc:	282d883a 	mov	r22,r5
   8a2d0:	00897240 	call	89724 <__sfp_lock_acquire>
   8a2d4:	98002126 	beq	r19,zero,8a35c <_fwalk_reent+0xc0>
   8a2d8:	002f883a 	mov	r23,zero
   8a2dc:	9c800117 	ldw	r18,4(r19)
   8a2e0:	9c000217 	ldw	r16,8(r19)
   8a2e4:	90bfffc4 	addi	r2,r18,-1
   8a2e8:	10000d16 	blt	r2,zero,8a320 <_fwalk_reent+0x84>
   8a2ec:	0023883a 	mov	r17,zero
   8a2f0:	053fffc4 	movi	r20,-1
   8a2f4:	8080030f 	ldh	r2,12(r16)
   8a2f8:	8c400044 	addi	r17,r17,1
   8a2fc:	10000626 	beq	r2,zero,8a318 <_fwalk_reent+0x7c>
   8a300:	8080038f 	ldh	r2,14(r16)
   8a304:	800b883a 	mov	r5,r16
   8a308:	a809883a 	mov	r4,r21
   8a30c:	15000226 	beq	r2,r20,8a318 <_fwalk_reent+0x7c>
   8a310:	b03ee83a 	callr	r22
   8a314:	b8aeb03a 	or	r23,r23,r2
   8a318:	84001704 	addi	r16,r16,92
   8a31c:	947ff51e 	bne	r18,r17,8a2f4 <_fwalk_reent+0x58>
   8a320:	9cc00017 	ldw	r19,0(r19)
   8a324:	983fed1e 	bne	r19,zero,8a2dc <_fwalk_reent+0x40>
   8a328:	00897280 	call	89728 <__sfp_lock_release>
   8a32c:	b805883a 	mov	r2,r23
   8a330:	dfc00817 	ldw	ra,32(sp)
   8a334:	ddc00717 	ldw	r23,28(sp)
   8a338:	dd800617 	ldw	r22,24(sp)
   8a33c:	dd400517 	ldw	r21,20(sp)
   8a340:	dd000417 	ldw	r20,16(sp)
   8a344:	dcc00317 	ldw	r19,12(sp)
   8a348:	dc800217 	ldw	r18,8(sp)
   8a34c:	dc400117 	ldw	r17,4(sp)
   8a350:	dc000017 	ldw	r16,0(sp)
   8a354:	dec00904 	addi	sp,sp,36
   8a358:	f800283a 	ret
   8a35c:	002f883a 	mov	r23,zero
   8a360:	003ff106 	br	8a328 <_fwalk_reent+0x8c>

0008a364 <_fwalk>:
   8a364:	defff804 	addi	sp,sp,-32
   8a368:	dcc00315 	stw	r19,12(sp)
   8a36c:	24c0b804 	addi	r19,r4,736
   8a370:	dd400515 	stw	r21,20(sp)
   8a374:	dfc00715 	stw	ra,28(sp)
   8a378:	dd800615 	stw	r22,24(sp)
   8a37c:	dd000415 	stw	r20,16(sp)
   8a380:	dc800215 	stw	r18,8(sp)
   8a384:	dc400115 	stw	r17,4(sp)
   8a388:	dc000015 	stw	r16,0(sp)
   8a38c:	282b883a 	mov	r21,r5
   8a390:	00897240 	call	89724 <__sfp_lock_acquire>
   8a394:	98001f26 	beq	r19,zero,8a414 <_fwalk+0xb0>
   8a398:	002d883a 	mov	r22,zero
   8a39c:	9c800117 	ldw	r18,4(r19)
   8a3a0:	9c000217 	ldw	r16,8(r19)
   8a3a4:	90bfffc4 	addi	r2,r18,-1
   8a3a8:	10000c16 	blt	r2,zero,8a3dc <_fwalk+0x78>
   8a3ac:	0023883a 	mov	r17,zero
   8a3b0:	053fffc4 	movi	r20,-1
   8a3b4:	8080030f 	ldh	r2,12(r16)
   8a3b8:	8c400044 	addi	r17,r17,1
   8a3bc:	10000526 	beq	r2,zero,8a3d4 <_fwalk+0x70>
   8a3c0:	8080038f 	ldh	r2,14(r16)
   8a3c4:	8009883a 	mov	r4,r16
   8a3c8:	15000226 	beq	r2,r20,8a3d4 <_fwalk+0x70>
   8a3cc:	a83ee83a 	callr	r21
   8a3d0:	b0acb03a 	or	r22,r22,r2
   8a3d4:	84001704 	addi	r16,r16,92
   8a3d8:	947ff61e 	bne	r18,r17,8a3b4 <_fwalk+0x50>
   8a3dc:	9cc00017 	ldw	r19,0(r19)
   8a3e0:	983fee1e 	bne	r19,zero,8a39c <_fwalk+0x38>
   8a3e4:	00897280 	call	89728 <__sfp_lock_release>
   8a3e8:	b005883a 	mov	r2,r22
   8a3ec:	dfc00717 	ldw	ra,28(sp)
   8a3f0:	dd800617 	ldw	r22,24(sp)
   8a3f4:	dd400517 	ldw	r21,20(sp)
   8a3f8:	dd000417 	ldw	r20,16(sp)
   8a3fc:	dcc00317 	ldw	r19,12(sp)
   8a400:	dc800217 	ldw	r18,8(sp)
   8a404:	dc400117 	ldw	r17,4(sp)
   8a408:	dc000017 	ldw	r16,0(sp)
   8a40c:	dec00804 	addi	sp,sp,32
   8a410:	f800283a 	ret
   8a414:	002d883a 	mov	r22,zero
   8a418:	003ff206 	br	8a3e4 <_fwalk+0x80>

0008a41c <__locale_charset>:
   8a41c:	d0a00617 	ldw	r2,-32744(gp)
   8a420:	f800283a 	ret

0008a424 <_localeconv_r>:
   8a424:	00800274 	movhi	r2,9
   8a428:	10890104 	addi	r2,r2,9220
   8a42c:	f800283a 	ret

0008a430 <localeconv>:
   8a430:	00800274 	movhi	r2,9
   8a434:	10904104 	addi	r2,r2,16644
   8a438:	11000017 	ldw	r4,0(r2)
   8a43c:	008a4241 	jmpi	8a424 <_localeconv_r>

0008a440 <_setlocale_r>:
   8a440:	defffc04 	addi	sp,sp,-16
   8a444:	00c00274 	movhi	r3,9
   8a448:	18c8fc04 	addi	r3,r3,9200
   8a44c:	dc800215 	stw	r18,8(sp)
   8a450:	dc400115 	stw	r17,4(sp)
   8a454:	dc000015 	stw	r16,0(sp)
   8a458:	2023883a 	mov	r17,r4
   8a45c:	2825883a 	mov	r18,r5
   8a460:	dfc00315 	stw	ra,12(sp)
   8a464:	3021883a 	mov	r16,r6
   8a468:	3009883a 	mov	r4,r6
   8a46c:	180b883a 	mov	r5,r3
   8a470:	30000926 	beq	r6,zero,8a498 <_setlocale_r+0x58>
   8a474:	008c95c0 	call	8c95c <strcmp>
   8a478:	8009883a 	mov	r4,r16
   8a47c:	01400274 	movhi	r5,9
   8a480:	2948e704 	addi	r5,r5,9116
   8a484:	10000b1e 	bne	r2,zero,8a4b4 <_setlocale_r+0x74>
   8a488:	8c000d15 	stw	r16,52(r17)
   8a48c:	8c800c15 	stw	r18,48(r17)
   8a490:	00c00274 	movhi	r3,9
   8a494:	18c8fc04 	addi	r3,r3,9200
   8a498:	1805883a 	mov	r2,r3
   8a49c:	dfc00317 	ldw	ra,12(sp)
   8a4a0:	dc800217 	ldw	r18,8(sp)
   8a4a4:	dc400117 	ldw	r17,4(sp)
   8a4a8:	dc000017 	ldw	r16,0(sp)
   8a4ac:	dec00404 	addi	sp,sp,16
   8a4b0:	f800283a 	ret
   8a4b4:	008c95c0 	call	8c95c <strcmp>
   8a4b8:	0007883a 	mov	r3,zero
   8a4bc:	103ff226 	beq	r2,zero,8a488 <_setlocale_r+0x48>
   8a4c0:	003ff506 	br	8a498 <_setlocale_r+0x58>

0008a4c4 <setlocale>:
   8a4c4:	01800274 	movhi	r6,9
   8a4c8:	31904104 	addi	r6,r6,16644
   8a4cc:	2007883a 	mov	r3,r4
   8a4d0:	31000017 	ldw	r4,0(r6)
   8a4d4:	280d883a 	mov	r6,r5
   8a4d8:	180b883a 	mov	r5,r3
   8a4dc:	008a4401 	jmpi	8a440 <_setlocale_r>

0008a4e0 <__smakebuf_r>:
   8a4e0:	2880030b 	ldhu	r2,12(r5)
   8a4e4:	deffed04 	addi	sp,sp,-76
   8a4e8:	dc401015 	stw	r17,64(sp)
   8a4ec:	1080008c 	andi	r2,r2,2
   8a4f0:	dc000f15 	stw	r16,60(sp)
   8a4f4:	dfc01215 	stw	ra,72(sp)
   8a4f8:	dc801115 	stw	r18,68(sp)
   8a4fc:	2821883a 	mov	r16,r5
   8a500:	2023883a 	mov	r17,r4
   8a504:	10000b26 	beq	r2,zero,8a534 <__smakebuf_r+0x54>
   8a508:	28c010c4 	addi	r3,r5,67
   8a50c:	00800044 	movi	r2,1
   8a510:	28800515 	stw	r2,20(r5)
   8a514:	28c00415 	stw	r3,16(r5)
   8a518:	28c00015 	stw	r3,0(r5)
   8a51c:	dfc01217 	ldw	ra,72(sp)
   8a520:	dc801117 	ldw	r18,68(sp)
   8a524:	dc401017 	ldw	r17,64(sp)
   8a528:	dc000f17 	ldw	r16,60(sp)
   8a52c:	dec01304 	addi	sp,sp,76
   8a530:	f800283a 	ret
   8a534:	2940038f 	ldh	r5,14(r5)
   8a538:	28002116 	blt	r5,zero,8a5c0 <__smakebuf_r+0xe0>
   8a53c:	d80d883a 	mov	r6,sp
   8a540:	008ccec0 	call	8ccec <_fstat_r>
   8a544:	10001e16 	blt	r2,zero,8a5c0 <__smakebuf_r+0xe0>
   8a548:	d8800117 	ldw	r2,4(sp)
   8a54c:	00e00014 	movui	r3,32768
   8a550:	113c000c 	andi	r4,r2,61440
   8a554:	20c03126 	beq	r4,r3,8a61c <__smakebuf_r+0x13c>
   8a558:	8080030b 	ldhu	r2,12(r16)
   8a55c:	00c80004 	movi	r3,8192
   8a560:	10820014 	ori	r2,r2,2048
   8a564:	8080030d 	sth	r2,12(r16)
   8a568:	20c01e26 	beq	r4,r3,8a5e4 <__smakebuf_r+0x104>
   8a56c:	04810004 	movi	r18,1024
   8a570:	8809883a 	mov	r4,r17
   8a574:	900b883a 	mov	r5,r18
   8a578:	008a6740 	call	8a674 <_malloc_r>
   8a57c:	1009883a 	mov	r4,r2
   8a580:	10003126 	beq	r2,zero,8a648 <__smakebuf_r+0x168>
   8a584:	80c0030b 	ldhu	r3,12(r16)
   8a588:	00800274 	movhi	r2,9
   8a58c:	10a60604 	addi	r2,r2,-26600
   8a590:	88800f15 	stw	r2,60(r17)
   8a594:	18c02014 	ori	r3,r3,128
   8a598:	84800515 	stw	r18,20(r16)
   8a59c:	80c0030d 	sth	r3,12(r16)
   8a5a0:	81000415 	stw	r4,16(r16)
   8a5a4:	81000015 	stw	r4,0(r16)
   8a5a8:	dfc01217 	ldw	ra,72(sp)
   8a5ac:	dc801117 	ldw	r18,68(sp)
   8a5b0:	dc401017 	ldw	r17,64(sp)
   8a5b4:	dc000f17 	ldw	r16,60(sp)
   8a5b8:	dec01304 	addi	sp,sp,76
   8a5bc:	f800283a 	ret
   8a5c0:	80c0030b 	ldhu	r3,12(r16)
   8a5c4:	1880200c 	andi	r2,r3,128
   8a5c8:	10000426 	beq	r2,zero,8a5dc <__smakebuf_r+0xfc>
   8a5cc:	04801004 	movi	r18,64
   8a5d0:	18820014 	ori	r2,r3,2048
   8a5d4:	8080030d 	sth	r2,12(r16)
   8a5d8:	003fe506 	br	8a570 <__smakebuf_r+0x90>
   8a5dc:	04810004 	movi	r18,1024
   8a5e0:	003ffb06 	br	8a5d0 <__smakebuf_r+0xf0>
   8a5e4:	8140038f 	ldh	r5,14(r16)
   8a5e8:	8809883a 	mov	r4,r17
   8a5ec:	008cd600 	call	8cd60 <_isatty_r>
   8a5f0:	103fde26 	beq	r2,zero,8a56c <__smakebuf_r+0x8c>
   8a5f4:	8080030b 	ldhu	r2,12(r16)
   8a5f8:	80c010c4 	addi	r3,r16,67
   8a5fc:	04810004 	movi	r18,1024
   8a600:	10800054 	ori	r2,r2,1
   8a604:	8080030d 	sth	r2,12(r16)
   8a608:	00800044 	movi	r2,1
   8a60c:	80c00415 	stw	r3,16(r16)
   8a610:	80800515 	stw	r2,20(r16)
   8a614:	80c00015 	stw	r3,0(r16)
   8a618:	003fd506 	br	8a570 <__smakebuf_r+0x90>
   8a61c:	80c00a17 	ldw	r3,40(r16)
   8a620:	00800274 	movhi	r2,9
   8a624:	10b20604 	addi	r2,r2,-14312
   8a628:	18bfcb1e 	bne	r3,r2,8a558 <__smakebuf_r+0x78>
   8a62c:	8080030b 	ldhu	r2,12(r16)
   8a630:	00c10004 	movi	r3,1024
   8a634:	1825883a 	mov	r18,r3
   8a638:	10c4b03a 	or	r2,r2,r3
   8a63c:	8080030d 	sth	r2,12(r16)
   8a640:	80c01315 	stw	r3,76(r16)
   8a644:	003fca06 	br	8a570 <__smakebuf_r+0x90>
   8a648:	8100030b 	ldhu	r4,12(r16)
   8a64c:	2080800c 	andi	r2,r4,512
   8a650:	103fb21e 	bne	r2,zero,8a51c <__smakebuf_r+0x3c>
   8a654:	80c010c4 	addi	r3,r16,67
   8a658:	21000094 	ori	r4,r4,2
   8a65c:	00800044 	movi	r2,1
   8a660:	80800515 	stw	r2,20(r16)
   8a664:	8100030d 	sth	r4,12(r16)
   8a668:	80c00415 	stw	r3,16(r16)
   8a66c:	80c00015 	stw	r3,0(r16)
   8a670:	003faa06 	br	8a51c <__smakebuf_r+0x3c>

0008a674 <_malloc_r>:
   8a674:	defff604 	addi	sp,sp,-40
   8a678:	28c002c4 	addi	r3,r5,11
   8a67c:	00800584 	movi	r2,22
   8a680:	dc800215 	stw	r18,8(sp)
   8a684:	dfc00915 	stw	ra,36(sp)
   8a688:	df000815 	stw	fp,32(sp)
   8a68c:	ddc00715 	stw	r23,28(sp)
   8a690:	dd800615 	stw	r22,24(sp)
   8a694:	dd400515 	stw	r21,20(sp)
   8a698:	dd000415 	stw	r20,16(sp)
   8a69c:	dcc00315 	stw	r19,12(sp)
   8a6a0:	dc400115 	stw	r17,4(sp)
   8a6a4:	dc000015 	stw	r16,0(sp)
   8a6a8:	2025883a 	mov	r18,r4
   8a6ac:	10c01236 	bltu	r2,r3,8a6f8 <_malloc_r+0x84>
   8a6b0:	04400404 	movi	r17,16
   8a6b4:	8940142e 	bgeu	r17,r5,8a708 <_malloc_r+0x94>
   8a6b8:	00800304 	movi	r2,12
   8a6bc:	0007883a 	mov	r3,zero
   8a6c0:	90800015 	stw	r2,0(r18)
   8a6c4:	1805883a 	mov	r2,r3
   8a6c8:	dfc00917 	ldw	ra,36(sp)
   8a6cc:	df000817 	ldw	fp,32(sp)
   8a6d0:	ddc00717 	ldw	r23,28(sp)
   8a6d4:	dd800617 	ldw	r22,24(sp)
   8a6d8:	dd400517 	ldw	r21,20(sp)
   8a6dc:	dd000417 	ldw	r20,16(sp)
   8a6e0:	dcc00317 	ldw	r19,12(sp)
   8a6e4:	dc800217 	ldw	r18,8(sp)
   8a6e8:	dc400117 	ldw	r17,4(sp)
   8a6ec:	dc000017 	ldw	r16,0(sp)
   8a6f0:	dec00a04 	addi	sp,sp,40
   8a6f4:	f800283a 	ret
   8a6f8:	00bffe04 	movi	r2,-8
   8a6fc:	18a2703a 	and	r17,r3,r2
   8a700:	883fed16 	blt	r17,zero,8a6b8 <_malloc_r+0x44>
   8a704:	897fec36 	bltu	r17,r5,8a6b8 <_malloc_r+0x44>
   8a708:	9009883a 	mov	r4,r18
   8a70c:	008fd200 	call	8fd20 <__malloc_lock>
   8a710:	00807dc4 	movi	r2,503
   8a714:	14402b2e 	bgeu	r2,r17,8a7c4 <_malloc_r+0x150>
   8a718:	8806d27a 	srli	r3,r17,9
   8a71c:	18003f1e 	bne	r3,zero,8a81c <_malloc_r+0x1a8>
   8a720:	880cd0fa 	srli	r6,r17,3
   8a724:	300490fa 	slli	r2,r6,3
   8a728:	02c00274 	movhi	r11,9
   8a72c:	5acaaf04 	addi	r11,r11,10940
   8a730:	12cb883a 	add	r5,r2,r11
   8a734:	2c000317 	ldw	r16,12(r5)
   8a738:	580f883a 	mov	r7,r11
   8a73c:	2c00041e 	bne	r5,r16,8a750 <_malloc_r+0xdc>
   8a740:	00000a06 	br	8a76c <_malloc_r+0xf8>
   8a744:	1800860e 	bge	r3,zero,8a960 <_malloc_r+0x2ec>
   8a748:	84000317 	ldw	r16,12(r16)
   8a74c:	2c000726 	beq	r5,r16,8a76c <_malloc_r+0xf8>
   8a750:	80800117 	ldw	r2,4(r16)
   8a754:	00ffff04 	movi	r3,-4
   8a758:	10c8703a 	and	r4,r2,r3
   8a75c:	2447c83a 	sub	r3,r4,r17
   8a760:	008003c4 	movi	r2,15
   8a764:	10fff70e 	bge	r2,r3,8a744 <_malloc_r+0xd0>
   8a768:	31bfffc4 	addi	r6,r6,-1
   8a76c:	32400044 	addi	r9,r6,1
   8a770:	02800274 	movhi	r10,9
   8a774:	528ab104 	addi	r10,r10,10948
   8a778:	54000217 	ldw	r16,8(r10)
   8a77c:	8280a026 	beq	r16,r10,8aa00 <_malloc_r+0x38c>
   8a780:	80800117 	ldw	r2,4(r16)
   8a784:	00ffff04 	movi	r3,-4
   8a788:	10ca703a 	and	r5,r2,r3
   8a78c:	2c4dc83a 	sub	r6,r5,r17
   8a790:	008003c4 	movi	r2,15
   8a794:	11808316 	blt	r2,r6,8a9a4 <_malloc_r+0x330>
   8a798:	52800315 	stw	r10,12(r10)
   8a79c:	52800215 	stw	r10,8(r10)
   8a7a0:	30002916 	blt	r6,zero,8a848 <_malloc_r+0x1d4>
   8a7a4:	8147883a 	add	r3,r16,r5
   8a7a8:	18800117 	ldw	r2,4(r3)
   8a7ac:	9009883a 	mov	r4,r18
   8a7b0:	10800054 	ori	r2,r2,1
   8a7b4:	18800115 	stw	r2,4(r3)
   8a7b8:	008fd400 	call	8fd40 <__malloc_unlock>
   8a7bc:	80c00204 	addi	r3,r16,8
   8a7c0:	003fc006 	br	8a6c4 <_malloc_r+0x50>
   8a7c4:	02c00274 	movhi	r11,9
   8a7c8:	5acaaf04 	addi	r11,r11,10940
   8a7cc:	8ac5883a 	add	r2,r17,r11
   8a7d0:	14000317 	ldw	r16,12(r2)
   8a7d4:	580f883a 	mov	r7,r11
   8a7d8:	8806d0fa 	srli	r3,r17,3
   8a7dc:	14006c26 	beq	r2,r16,8a990 <_malloc_r+0x31c>
   8a7e0:	80c00117 	ldw	r3,4(r16)
   8a7e4:	00bfff04 	movi	r2,-4
   8a7e8:	81800317 	ldw	r6,12(r16)
   8a7ec:	1886703a 	and	r3,r3,r2
   8a7f0:	80c7883a 	add	r3,r16,r3
   8a7f4:	18800117 	ldw	r2,4(r3)
   8a7f8:	81400217 	ldw	r5,8(r16)
   8a7fc:	9009883a 	mov	r4,r18
   8a800:	10800054 	ori	r2,r2,1
   8a804:	18800115 	stw	r2,4(r3)
   8a808:	31400215 	stw	r5,8(r6)
   8a80c:	29800315 	stw	r6,12(r5)
   8a810:	008fd400 	call	8fd40 <__malloc_unlock>
   8a814:	80c00204 	addi	r3,r16,8
   8a818:	003faa06 	br	8a6c4 <_malloc_r+0x50>
   8a81c:	00800104 	movi	r2,4
   8a820:	10c0052e 	bgeu	r2,r3,8a838 <_malloc_r+0x1c4>
   8a824:	00800504 	movi	r2,20
   8a828:	10c07836 	bltu	r2,r3,8aa0c <_malloc_r+0x398>
   8a82c:	198016c4 	addi	r6,r3,91
   8a830:	300490fa 	slli	r2,r6,3
   8a834:	003fbc06 	br	8a728 <_malloc_r+0xb4>
   8a838:	8804d1ba 	srli	r2,r17,6
   8a83c:	11800e04 	addi	r6,r2,56
   8a840:	300490fa 	slli	r2,r6,3
   8a844:	003fb806 	br	8a728 <_malloc_r+0xb4>
   8a848:	00807fc4 	movi	r2,511
   8a84c:	1140bb36 	bltu	r2,r5,8ab3c <_malloc_r+0x4c8>
   8a850:	2806d0fa 	srli	r3,r5,3
   8a854:	573ffe04 	addi	fp,r10,-8
   8a858:	00800044 	movi	r2,1
   8a85c:	180890fa 	slli	r4,r3,3
   8a860:	1807d0ba 	srai	r3,r3,2
   8a864:	e1c00117 	ldw	r7,4(fp)
   8a868:	5909883a 	add	r4,r11,r4
   8a86c:	21400217 	ldw	r5,8(r4)
   8a870:	10c4983a 	sll	r2,r2,r3
   8a874:	81000315 	stw	r4,12(r16)
   8a878:	81400215 	stw	r5,8(r16)
   8a87c:	388eb03a 	or	r7,r7,r2
   8a880:	2c000315 	stw	r16,12(r5)
   8a884:	24000215 	stw	r16,8(r4)
   8a888:	e1c00115 	stw	r7,4(fp)
   8a88c:	4807883a 	mov	r3,r9
   8a890:	4800cd16 	blt	r9,zero,8abc8 <_malloc_r+0x554>
   8a894:	1807d0ba 	srai	r3,r3,2
   8a898:	00800044 	movi	r2,1
   8a89c:	10c8983a 	sll	r4,r2,r3
   8a8a0:	39004436 	bltu	r7,r4,8a9b4 <_malloc_r+0x340>
   8a8a4:	21c4703a 	and	r2,r4,r7
   8a8a8:	10000a1e 	bne	r2,zero,8a8d4 <_malloc_r+0x260>
   8a8ac:	2109883a 	add	r4,r4,r4
   8a8b0:	00bfff04 	movi	r2,-4
   8a8b4:	4884703a 	and	r2,r9,r2
   8a8b8:	3906703a 	and	r3,r7,r4
   8a8bc:	12400104 	addi	r9,r2,4
   8a8c0:	1800041e 	bne	r3,zero,8a8d4 <_malloc_r+0x260>
   8a8c4:	2109883a 	add	r4,r4,r4
   8a8c8:	3904703a 	and	r2,r7,r4
   8a8cc:	4a400104 	addi	r9,r9,4
   8a8d0:	103ffc26 	beq	r2,zero,8a8c4 <_malloc_r+0x250>
   8a8d4:	480490fa 	slli	r2,r9,3
   8a8d8:	4819883a 	mov	r12,r9
   8a8dc:	023fff04 	movi	r8,-4
   8a8e0:	589b883a 	add	r13,r11,r2
   8a8e4:	6807883a 	mov	r3,r13
   8a8e8:	014003c4 	movi	r5,15
   8a8ec:	1c000317 	ldw	r16,12(r3)
   8a8f0:	1c00041e 	bne	r3,r16,8a904 <_malloc_r+0x290>
   8a8f4:	0000a706 	br	8ab94 <_malloc_r+0x520>
   8a8f8:	3000ab0e 	bge	r6,zero,8aba8 <_malloc_r+0x534>
   8a8fc:	84000317 	ldw	r16,12(r16)
   8a900:	1c00a426 	beq	r3,r16,8ab94 <_malloc_r+0x520>
   8a904:	80800117 	ldw	r2,4(r16)
   8a908:	1204703a 	and	r2,r2,r8
   8a90c:	144dc83a 	sub	r6,r2,r17
   8a910:	29bff90e 	bge	r5,r6,8a8f8 <_malloc_r+0x284>
   8a914:	81000317 	ldw	r4,12(r16)
   8a918:	80c00217 	ldw	r3,8(r16)
   8a91c:	89400054 	ori	r5,r17,1
   8a920:	8445883a 	add	r2,r16,r17
   8a924:	20c00215 	stw	r3,8(r4)
   8a928:	19000315 	stw	r4,12(r3)
   8a92c:	81400115 	stw	r5,4(r16)
   8a930:	1187883a 	add	r3,r2,r6
   8a934:	31000054 	ori	r4,r6,1
   8a938:	50800315 	stw	r2,12(r10)
   8a93c:	50800215 	stw	r2,8(r10)
   8a940:	19800015 	stw	r6,0(r3)
   8a944:	11000115 	stw	r4,4(r2)
   8a948:	12800215 	stw	r10,8(r2)
   8a94c:	12800315 	stw	r10,12(r2)
   8a950:	9009883a 	mov	r4,r18
   8a954:	008fd400 	call	8fd40 <__malloc_unlock>
   8a958:	80c00204 	addi	r3,r16,8
   8a95c:	003f5906 	br	8a6c4 <_malloc_r+0x50>
   8a960:	8109883a 	add	r4,r16,r4
   8a964:	20800117 	ldw	r2,4(r4)
   8a968:	80c00217 	ldw	r3,8(r16)
   8a96c:	81400317 	ldw	r5,12(r16)
   8a970:	10800054 	ori	r2,r2,1
   8a974:	20800115 	stw	r2,4(r4)
   8a978:	28c00215 	stw	r3,8(r5)
   8a97c:	19400315 	stw	r5,12(r3)
   8a980:	9009883a 	mov	r4,r18
   8a984:	008fd400 	call	8fd40 <__malloc_unlock>
   8a988:	80c00204 	addi	r3,r16,8
   8a98c:	003f4d06 	br	8a6c4 <_malloc_r+0x50>
   8a990:	80800204 	addi	r2,r16,8
   8a994:	14000317 	ldw	r16,12(r2)
   8a998:	143f911e 	bne	r2,r16,8a7e0 <_malloc_r+0x16c>
   8a99c:	1a400084 	addi	r9,r3,2
   8a9a0:	003f7306 	br	8a770 <_malloc_r+0xfc>
   8a9a4:	88c00054 	ori	r3,r17,1
   8a9a8:	8445883a 	add	r2,r16,r17
   8a9ac:	80c00115 	stw	r3,4(r16)
   8a9b0:	003fdf06 	br	8a930 <_malloc_r+0x2bc>
   8a9b4:	e4000217 	ldw	r16,8(fp)
   8a9b8:	00bfff04 	movi	r2,-4
   8a9bc:	80c00117 	ldw	r3,4(r16)
   8a9c0:	802d883a 	mov	r22,r16
   8a9c4:	18aa703a 	and	r21,r3,r2
   8a9c8:	ac401636 	bltu	r21,r17,8aa24 <_malloc_r+0x3b0>
   8a9cc:	ac49c83a 	sub	r4,r21,r17
   8a9d0:	008003c4 	movi	r2,15
   8a9d4:	1100130e 	bge	r2,r4,8aa24 <_malloc_r+0x3b0>
   8a9d8:	88800054 	ori	r2,r17,1
   8a9dc:	8447883a 	add	r3,r16,r17
   8a9e0:	80800115 	stw	r2,4(r16)
   8a9e4:	20800054 	ori	r2,r4,1
   8a9e8:	18800115 	stw	r2,4(r3)
   8a9ec:	e0c00215 	stw	r3,8(fp)
   8a9f0:	9009883a 	mov	r4,r18
   8a9f4:	008fd400 	call	8fd40 <__malloc_unlock>
   8a9f8:	80c00204 	addi	r3,r16,8
   8a9fc:	003f3106 	br	8a6c4 <_malloc_r+0x50>
   8aa00:	39c00117 	ldw	r7,4(r7)
   8aa04:	573ffe04 	addi	fp,r10,-8
   8aa08:	003fa006 	br	8a88c <_malloc_r+0x218>
   8aa0c:	00801504 	movi	r2,84
   8aa10:	10c06736 	bltu	r2,r3,8abb0 <_malloc_r+0x53c>
   8aa14:	8804d33a 	srli	r2,r17,12
   8aa18:	11801b84 	addi	r6,r2,110
   8aa1c:	300490fa 	slli	r2,r6,3
   8aa20:	003f4106 	br	8a728 <_malloc_r+0xb4>
   8aa24:	d0a6c917 	ldw	r2,-25820(gp)
   8aa28:	d0e00817 	ldw	r3,-32736(gp)
   8aa2c:	053fffc4 	movi	r20,-1
   8aa30:	10800404 	addi	r2,r2,16
   8aa34:	88a7883a 	add	r19,r17,r2
   8aa38:	1d000326 	beq	r3,r20,8aa48 <_malloc_r+0x3d4>
   8aa3c:	98c3ffc4 	addi	r3,r19,4095
   8aa40:	00bc0004 	movi	r2,-4096
   8aa44:	18a6703a 	and	r19,r3,r2
   8aa48:	9009883a 	mov	r4,r18
   8aa4c:	980b883a 	mov	r5,r19
   8aa50:	008c7a00 	call	8c7a0 <_sbrk_r>
   8aa54:	1009883a 	mov	r4,r2
   8aa58:	15000426 	beq	r2,r20,8aa6c <_malloc_r+0x3f8>
   8aa5c:	854b883a 	add	r5,r16,r21
   8aa60:	1029883a 	mov	r20,r2
   8aa64:	11405a2e 	bgeu	r2,r5,8abd0 <_malloc_r+0x55c>
   8aa68:	87000c26 	beq	r16,fp,8aa9c <_malloc_r+0x428>
   8aa6c:	e4000217 	ldw	r16,8(fp)
   8aa70:	80c00117 	ldw	r3,4(r16)
   8aa74:	00bfff04 	movi	r2,-4
   8aa78:	1884703a 	and	r2,r3,r2
   8aa7c:	14400336 	bltu	r2,r17,8aa8c <_malloc_r+0x418>
   8aa80:	1449c83a 	sub	r4,r2,r17
   8aa84:	008003c4 	movi	r2,15
   8aa88:	113fd316 	blt	r2,r4,8a9d8 <_malloc_r+0x364>
   8aa8c:	9009883a 	mov	r4,r18
   8aa90:	008fd400 	call	8fd40 <__malloc_unlock>
   8aa94:	0007883a 	mov	r3,zero
   8aa98:	003f0a06 	br	8a6c4 <_malloc_r+0x50>
   8aa9c:	05c00274 	movhi	r23,9
   8aaa0:	bdd71104 	addi	r23,r23,23620
   8aaa4:	b8800017 	ldw	r2,0(r23)
   8aaa8:	988d883a 	add	r6,r19,r2
   8aaac:	b9800015 	stw	r6,0(r23)
   8aab0:	d0e00817 	ldw	r3,-32736(gp)
   8aab4:	00bfffc4 	movi	r2,-1
   8aab8:	18808e26 	beq	r3,r2,8acf4 <_malloc_r+0x680>
   8aabc:	2145c83a 	sub	r2,r4,r5
   8aac0:	3085883a 	add	r2,r6,r2
   8aac4:	b8800015 	stw	r2,0(r23)
   8aac8:	20c001cc 	andi	r3,r4,7
   8aacc:	18005f1e 	bne	r3,zero,8ac4c <_malloc_r+0x5d8>
   8aad0:	000b883a 	mov	r5,zero
   8aad4:	a4c5883a 	add	r2,r20,r19
   8aad8:	1083ffcc 	andi	r2,r2,4095
   8aadc:	00c40004 	movi	r3,4096
   8aae0:	1887c83a 	sub	r3,r3,r2
   8aae4:	28e7883a 	add	r19,r5,r3
   8aae8:	9009883a 	mov	r4,r18
   8aaec:	980b883a 	mov	r5,r19
   8aaf0:	008c7a00 	call	8c7a0 <_sbrk_r>
   8aaf4:	1007883a 	mov	r3,r2
   8aaf8:	00bfffc4 	movi	r2,-1
   8aafc:	18807a26 	beq	r3,r2,8ace8 <_malloc_r+0x674>
   8ab00:	1d05c83a 	sub	r2,r3,r20
   8ab04:	9885883a 	add	r2,r19,r2
   8ab08:	10c00054 	ori	r3,r2,1
   8ab0c:	b8800017 	ldw	r2,0(r23)
   8ab10:	a021883a 	mov	r16,r20
   8ab14:	a0c00115 	stw	r3,4(r20)
   8ab18:	9885883a 	add	r2,r19,r2
   8ab1c:	b8800015 	stw	r2,0(r23)
   8ab20:	e5000215 	stw	r20,8(fp)
   8ab24:	b7003626 	beq	r22,fp,8ac00 <_malloc_r+0x58c>
   8ab28:	018003c4 	movi	r6,15
   8ab2c:	35404b36 	bltu	r6,r21,8ac5c <_malloc_r+0x5e8>
   8ab30:	00800044 	movi	r2,1
   8ab34:	a0800115 	stw	r2,4(r20)
   8ab38:	003fcd06 	br	8aa70 <_malloc_r+0x3fc>
   8ab3c:	2808d27a 	srli	r4,r5,9
   8ab40:	2000371e 	bne	r4,zero,8ac20 <_malloc_r+0x5ac>
   8ab44:	2808d0fa 	srli	r4,r5,3
   8ab48:	200690fa 	slli	r3,r4,3
   8ab4c:	1ad1883a 	add	r8,r3,r11
   8ab50:	41800217 	ldw	r6,8(r8)
   8ab54:	41805b26 	beq	r8,r6,8acc4 <_malloc_r+0x650>
   8ab58:	30800117 	ldw	r2,4(r6)
   8ab5c:	00ffff04 	movi	r3,-4
   8ab60:	10c4703a 	and	r2,r2,r3
   8ab64:	2880022e 	bgeu	r5,r2,8ab70 <_malloc_r+0x4fc>
   8ab68:	31800217 	ldw	r6,8(r6)
   8ab6c:	41bffa1e 	bne	r8,r6,8ab58 <_malloc_r+0x4e4>
   8ab70:	32000317 	ldw	r8,12(r6)
   8ab74:	39c00117 	ldw	r7,4(r7)
   8ab78:	82000315 	stw	r8,12(r16)
   8ab7c:	81800215 	stw	r6,8(r16)
   8ab80:	07000274 	movhi	fp,9
   8ab84:	e70aaf04 	addi	fp,fp,10940
   8ab88:	34000315 	stw	r16,12(r6)
   8ab8c:	44000215 	stw	r16,8(r8)
   8ab90:	003f3e06 	br	8a88c <_malloc_r+0x218>
   8ab94:	63000044 	addi	r12,r12,1
   8ab98:	608000cc 	andi	r2,r12,3
   8ab9c:	10005d26 	beq	r2,zero,8ad14 <_malloc_r+0x6a0>
   8aba0:	18c00204 	addi	r3,r3,8
   8aba4:	003f5106 	br	8a8ec <_malloc_r+0x278>
   8aba8:	8089883a 	add	r4,r16,r2
   8abac:	003f6d06 	br	8a964 <_malloc_r+0x2f0>
   8abb0:	00805504 	movi	r2,340
   8abb4:	10c02036 	bltu	r2,r3,8ac38 <_malloc_r+0x5c4>
   8abb8:	8804d3fa 	srli	r2,r17,15
   8abbc:	11801dc4 	addi	r6,r2,119
   8abc0:	300490fa 	slli	r2,r6,3
   8abc4:	003ed806 	br	8a728 <_malloc_r+0xb4>
   8abc8:	48c000c4 	addi	r3,r9,3
   8abcc:	003f3106 	br	8a894 <_malloc_r+0x220>
   8abd0:	05c00274 	movhi	r23,9
   8abd4:	bdd71104 	addi	r23,r23,23620
   8abd8:	b8800017 	ldw	r2,0(r23)
   8abdc:	988d883a 	add	r6,r19,r2
   8abe0:	b9800015 	stw	r6,0(r23)
   8abe4:	293fb21e 	bne	r5,r4,8aab0 <_malloc_r+0x43c>
   8abe8:	2083ffcc 	andi	r2,r4,4095
   8abec:	103fb01e 	bne	r2,zero,8aab0 <_malloc_r+0x43c>
   8abf0:	e4000217 	ldw	r16,8(fp)
   8abf4:	9d45883a 	add	r2,r19,r21
   8abf8:	10800054 	ori	r2,r2,1
   8abfc:	80800115 	stw	r2,4(r16)
   8ac00:	b8c00017 	ldw	r3,0(r23)
   8ac04:	d0a6ca17 	ldw	r2,-25816(gp)
   8ac08:	10c0012e 	bgeu	r2,r3,8ac10 <_malloc_r+0x59c>
   8ac0c:	d0e6ca15 	stw	r3,-25816(gp)
   8ac10:	d0a6cb17 	ldw	r2,-25812(gp)
   8ac14:	10ff962e 	bgeu	r2,r3,8aa70 <_malloc_r+0x3fc>
   8ac18:	d0e6cb15 	stw	r3,-25812(gp)
   8ac1c:	003f9406 	br	8aa70 <_malloc_r+0x3fc>
   8ac20:	00800104 	movi	r2,4
   8ac24:	11001e36 	bltu	r2,r4,8aca0 <_malloc_r+0x62c>
   8ac28:	2804d1ba 	srli	r2,r5,6
   8ac2c:	11000e04 	addi	r4,r2,56
   8ac30:	200690fa 	slli	r3,r4,3
   8ac34:	003fc506 	br	8ab4c <_malloc_r+0x4d8>
   8ac38:	00815504 	movi	r2,1364
   8ac3c:	10c01d2e 	bgeu	r2,r3,8acb4 <_malloc_r+0x640>
   8ac40:	01801f84 	movi	r6,126
   8ac44:	0080fc04 	movi	r2,1008
   8ac48:	003eb706 	br	8a728 <_malloc_r+0xb4>
   8ac4c:	00800204 	movi	r2,8
   8ac50:	10cbc83a 	sub	r5,r2,r3
   8ac54:	2169883a 	add	r20,r4,r5
   8ac58:	003f9e06 	br	8aad4 <_malloc_r+0x460>
   8ac5c:	00bffe04 	movi	r2,-8
   8ac60:	a93ffd04 	addi	r4,r21,-12
   8ac64:	2088703a 	and	r4,r4,r2
   8ac68:	b10b883a 	add	r5,r22,r4
   8ac6c:	00c00144 	movi	r3,5
   8ac70:	28c00215 	stw	r3,8(r5)
   8ac74:	28c00115 	stw	r3,4(r5)
   8ac78:	b0800117 	ldw	r2,4(r22)
   8ac7c:	1080004c 	andi	r2,r2,1
   8ac80:	2084b03a 	or	r2,r4,r2
   8ac84:	b0800115 	stw	r2,4(r22)
   8ac88:	313fdd2e 	bgeu	r6,r4,8ac00 <_malloc_r+0x58c>
   8ac8c:	b1400204 	addi	r5,r22,8
   8ac90:	9009883a 	mov	r4,r18
   8ac94:	0089aec0 	call	89aec <_free_r>
   8ac98:	e4000217 	ldw	r16,8(fp)
   8ac9c:	003fd806 	br	8ac00 <_malloc_r+0x58c>
   8aca0:	00800504 	movi	r2,20
   8aca4:	11001536 	bltu	r2,r4,8acfc <_malloc_r+0x688>
   8aca8:	210016c4 	addi	r4,r4,91
   8acac:	200690fa 	slli	r3,r4,3
   8acb0:	003fa606 	br	8ab4c <_malloc_r+0x4d8>
   8acb4:	8804d4ba 	srli	r2,r17,18
   8acb8:	11801f04 	addi	r6,r2,124
   8acbc:	300490fa 	slli	r2,r6,3
   8acc0:	003e9906 	br	8a728 <_malloc_r+0xb4>
   8acc4:	2009d0ba 	srai	r4,r4,2
   8acc8:	01400274 	movhi	r5,9
   8accc:	294aaf04 	addi	r5,r5,10940
   8acd0:	00c00044 	movi	r3,1
   8acd4:	28800117 	ldw	r2,4(r5)
   8acd8:	1906983a 	sll	r3,r3,r4
   8acdc:	10c4b03a 	or	r2,r2,r3
   8ace0:	28800115 	stw	r2,4(r5)
   8ace4:	003fa306 	br	8ab74 <_malloc_r+0x500>
   8ace8:	0027883a 	mov	r19,zero
   8acec:	00c00044 	movi	r3,1
   8acf0:	003f8606 	br	8ab0c <_malloc_r+0x498>
   8acf4:	d1200815 	stw	r4,-32736(gp)
   8acf8:	003f7306 	br	8aac8 <_malloc_r+0x454>
   8acfc:	00801504 	movi	r2,84
   8ad00:	11001936 	bltu	r2,r4,8ad68 <_malloc_r+0x6f4>
   8ad04:	2804d33a 	srli	r2,r5,12
   8ad08:	11001b84 	addi	r4,r2,110
   8ad0c:	200690fa 	slli	r3,r4,3
   8ad10:	003f8e06 	br	8ab4c <_malloc_r+0x4d8>
   8ad14:	480b883a 	mov	r5,r9
   8ad18:	6807883a 	mov	r3,r13
   8ad1c:	288000cc 	andi	r2,r5,3
   8ad20:	18fffe04 	addi	r3,r3,-8
   8ad24:	297fffc4 	addi	r5,r5,-1
   8ad28:	10001526 	beq	r2,zero,8ad80 <_malloc_r+0x70c>
   8ad2c:	18800217 	ldw	r2,8(r3)
   8ad30:	10fffa26 	beq	r2,r3,8ad1c <_malloc_r+0x6a8>
   8ad34:	2109883a 	add	r4,r4,r4
   8ad38:	393f1e36 	bltu	r7,r4,8a9b4 <_malloc_r+0x340>
   8ad3c:	203f1d26 	beq	r4,zero,8a9b4 <_malloc_r+0x340>
   8ad40:	21c4703a 	and	r2,r4,r7
   8ad44:	10000226 	beq	r2,zero,8ad50 <_malloc_r+0x6dc>
   8ad48:	6013883a 	mov	r9,r12
   8ad4c:	003ee106 	br	8a8d4 <_malloc_r+0x260>
   8ad50:	2109883a 	add	r4,r4,r4
   8ad54:	3904703a 	and	r2,r7,r4
   8ad58:	63000104 	addi	r12,r12,4
   8ad5c:	103ffc26 	beq	r2,zero,8ad50 <_malloc_r+0x6dc>
   8ad60:	6013883a 	mov	r9,r12
   8ad64:	003edb06 	br	8a8d4 <_malloc_r+0x260>
   8ad68:	00805504 	movi	r2,340
   8ad6c:	11000836 	bltu	r2,r4,8ad90 <_malloc_r+0x71c>
   8ad70:	2804d3fa 	srli	r2,r5,15
   8ad74:	11001dc4 	addi	r4,r2,119
   8ad78:	200690fa 	slli	r3,r4,3
   8ad7c:	003f7306 	br	8ab4c <_malloc_r+0x4d8>
   8ad80:	0104303a 	nor	r2,zero,r4
   8ad84:	388e703a 	and	r7,r7,r2
   8ad88:	e1c00115 	stw	r7,4(fp)
   8ad8c:	003fe906 	br	8ad34 <_malloc_r+0x6c0>
   8ad90:	00815504 	movi	r2,1364
   8ad94:	1100032e 	bgeu	r2,r4,8ada4 <_malloc_r+0x730>
   8ad98:	01001f84 	movi	r4,126
   8ad9c:	00c0fc04 	movi	r3,1008
   8ada0:	003f6a06 	br	8ab4c <_malloc_r+0x4d8>
   8ada4:	2804d4ba 	srli	r2,r5,18
   8ada8:	11001f04 	addi	r4,r2,124
   8adac:	200690fa 	slli	r3,r4,3
   8adb0:	003f6606 	br	8ab4c <_malloc_r+0x4d8>

0008adb4 <memchr>:
   8adb4:	008000c4 	movi	r2,3
   8adb8:	29403fcc 	andi	r5,r5,255
   8adbc:	2007883a 	mov	r3,r4
   8adc0:	1180022e 	bgeu	r2,r6,8adcc <memchr+0x18>
   8adc4:	2084703a 	and	r2,r4,r2
   8adc8:	10000b26 	beq	r2,zero,8adf8 <memchr+0x44>
   8adcc:	313fffc4 	addi	r4,r6,-1
   8add0:	3000051e 	bne	r6,zero,8ade8 <memchr+0x34>
   8add4:	00002c06 	br	8ae88 <memchr+0xd4>
   8add8:	213fffc4 	addi	r4,r4,-1
   8addc:	00bfffc4 	movi	r2,-1
   8ade0:	18c00044 	addi	r3,r3,1
   8ade4:	20802826 	beq	r4,r2,8ae88 <memchr+0xd4>
   8ade8:	18800003 	ldbu	r2,0(r3)
   8adec:	28bffa1e 	bne	r5,r2,8add8 <memchr+0x24>
   8adf0:	1805883a 	mov	r2,r3
   8adf4:	f800283a 	ret
   8adf8:	0011883a 	mov	r8,zero
   8adfc:	0007883a 	mov	r3,zero
   8ae00:	01c00104 	movi	r7,4
   8ae04:	4004923a 	slli	r2,r8,8
   8ae08:	18c00044 	addi	r3,r3,1
   8ae0c:	1151883a 	add	r8,r2,r5
   8ae10:	19fffc1e 	bne	r3,r7,8ae04 <memchr+0x50>
   8ae14:	02bfbff4 	movhi	r10,65279
   8ae18:	52bfbfc4 	addi	r10,r10,-257
   8ae1c:	02602074 	movhi	r9,32897
   8ae20:	4a602004 	addi	r9,r9,-32640
   8ae24:	02c000c4 	movi	r11,3
   8ae28:	20800017 	ldw	r2,0(r4)
   8ae2c:	31bfff04 	addi	r6,r6,-4
   8ae30:	200f883a 	mov	r7,r4
   8ae34:	1204f03a 	xor	r2,r2,r8
   8ae38:	1287883a 	add	r3,r2,r10
   8ae3c:	1a46703a 	and	r3,r3,r9
   8ae40:	0084303a 	nor	r2,zero,r2
   8ae44:	10c4703a 	and	r2,r2,r3
   8ae48:	10000b26 	beq	r2,zero,8ae78 <memchr+0xc4>
   8ae4c:	20800003 	ldbu	r2,0(r4)
   8ae50:	28800f26 	beq	r5,r2,8ae90 <memchr+0xdc>
   8ae54:	20800043 	ldbu	r2,1(r4)
   8ae58:	21c00044 	addi	r7,r4,1
   8ae5c:	28800c26 	beq	r5,r2,8ae90 <memchr+0xdc>
   8ae60:	20800083 	ldbu	r2,2(r4)
   8ae64:	21c00084 	addi	r7,r4,2
   8ae68:	28800926 	beq	r5,r2,8ae90 <memchr+0xdc>
   8ae6c:	208000c3 	ldbu	r2,3(r4)
   8ae70:	21c000c4 	addi	r7,r4,3
   8ae74:	28800626 	beq	r5,r2,8ae90 <memchr+0xdc>
   8ae78:	21000104 	addi	r4,r4,4
   8ae7c:	59bfea36 	bltu	r11,r6,8ae28 <memchr+0x74>
   8ae80:	2007883a 	mov	r3,r4
   8ae84:	003fd106 	br	8adcc <memchr+0x18>
   8ae88:	0005883a 	mov	r2,zero
   8ae8c:	f800283a 	ret
   8ae90:	3805883a 	mov	r2,r7
   8ae94:	f800283a 	ret

0008ae98 <memcpy>:
   8ae98:	01c003c4 	movi	r7,15
   8ae9c:	2007883a 	mov	r3,r4
   8aea0:	3980032e 	bgeu	r7,r6,8aeb0 <memcpy+0x18>
   8aea4:	2904b03a 	or	r2,r5,r4
   8aea8:	108000cc 	andi	r2,r2,3
   8aeac:	10000926 	beq	r2,zero,8aed4 <memcpy+0x3c>
   8aeb0:	30000626 	beq	r6,zero,8aecc <memcpy+0x34>
   8aeb4:	30cd883a 	add	r6,r6,r3
   8aeb8:	28800003 	ldbu	r2,0(r5)
   8aebc:	29400044 	addi	r5,r5,1
   8aec0:	18800005 	stb	r2,0(r3)
   8aec4:	18c00044 	addi	r3,r3,1
   8aec8:	30fffb1e 	bne	r6,r3,8aeb8 <memcpy+0x20>
   8aecc:	2005883a 	mov	r2,r4
   8aed0:	f800283a 	ret
   8aed4:	3811883a 	mov	r8,r7
   8aed8:	200f883a 	mov	r7,r4
   8aedc:	28c00017 	ldw	r3,0(r5)
   8aee0:	31bffc04 	addi	r6,r6,-16
   8aee4:	38c00015 	stw	r3,0(r7)
   8aee8:	28800117 	ldw	r2,4(r5)
   8aeec:	38800115 	stw	r2,4(r7)
   8aef0:	28c00217 	ldw	r3,8(r5)
   8aef4:	38c00215 	stw	r3,8(r7)
   8aef8:	28800317 	ldw	r2,12(r5)
   8aefc:	29400404 	addi	r5,r5,16
   8af00:	38800315 	stw	r2,12(r7)
   8af04:	39c00404 	addi	r7,r7,16
   8af08:	41bff436 	bltu	r8,r6,8aedc <memcpy+0x44>
   8af0c:	008000c4 	movi	r2,3
   8af10:	1180072e 	bgeu	r2,r6,8af30 <memcpy+0x98>
   8af14:	1007883a 	mov	r3,r2
   8af18:	28800017 	ldw	r2,0(r5)
   8af1c:	31bfff04 	addi	r6,r6,-4
   8af20:	29400104 	addi	r5,r5,4
   8af24:	38800015 	stw	r2,0(r7)
   8af28:	39c00104 	addi	r7,r7,4
   8af2c:	19bffa36 	bltu	r3,r6,8af18 <memcpy+0x80>
   8af30:	3807883a 	mov	r3,r7
   8af34:	003fde06 	br	8aeb0 <memcpy+0x18>

0008af38 <memmove>:
   8af38:	2807883a 	mov	r3,r5
   8af3c:	2011883a 	mov	r8,r4
   8af40:	29000c2e 	bgeu	r5,r4,8af74 <memmove+0x3c>
   8af44:	298f883a 	add	r7,r5,r6
   8af48:	21c00a2e 	bgeu	r4,r7,8af74 <memmove+0x3c>
   8af4c:	30000726 	beq	r6,zero,8af6c <memmove+0x34>
   8af50:	2187883a 	add	r3,r4,r6
   8af54:	198dc83a 	sub	r6,r3,r6
   8af58:	39ffffc4 	addi	r7,r7,-1
   8af5c:	38800003 	ldbu	r2,0(r7)
   8af60:	18ffffc4 	addi	r3,r3,-1
   8af64:	18800005 	stb	r2,0(r3)
   8af68:	19bffb1e 	bne	r3,r6,8af58 <memmove+0x20>
   8af6c:	2005883a 	mov	r2,r4
   8af70:	f800283a 	ret
   8af74:	01c003c4 	movi	r7,15
   8af78:	39800a36 	bltu	r7,r6,8afa4 <memmove+0x6c>
   8af7c:	303ffb26 	beq	r6,zero,8af6c <memmove+0x34>
   8af80:	400f883a 	mov	r7,r8
   8af84:	320d883a 	add	r6,r6,r8
   8af88:	28800003 	ldbu	r2,0(r5)
   8af8c:	29400044 	addi	r5,r5,1
   8af90:	38800005 	stb	r2,0(r7)
   8af94:	39c00044 	addi	r7,r7,1
   8af98:	39bffb1e 	bne	r7,r6,8af88 <memmove+0x50>
   8af9c:	2005883a 	mov	r2,r4
   8afa0:	f800283a 	ret
   8afa4:	1904b03a 	or	r2,r3,r4
   8afa8:	108000cc 	andi	r2,r2,3
   8afac:	103ff31e 	bne	r2,zero,8af7c <memmove+0x44>
   8afb0:	3811883a 	mov	r8,r7
   8afb4:	180b883a 	mov	r5,r3
   8afb8:	200f883a 	mov	r7,r4
   8afbc:	28c00017 	ldw	r3,0(r5)
   8afc0:	31bffc04 	addi	r6,r6,-16
   8afc4:	38c00015 	stw	r3,0(r7)
   8afc8:	28800117 	ldw	r2,4(r5)
   8afcc:	38800115 	stw	r2,4(r7)
   8afd0:	28c00217 	ldw	r3,8(r5)
   8afd4:	38c00215 	stw	r3,8(r7)
   8afd8:	28800317 	ldw	r2,12(r5)
   8afdc:	29400404 	addi	r5,r5,16
   8afe0:	38800315 	stw	r2,12(r7)
   8afe4:	39c00404 	addi	r7,r7,16
   8afe8:	41bff436 	bltu	r8,r6,8afbc <memmove+0x84>
   8afec:	008000c4 	movi	r2,3
   8aff0:	1180072e 	bgeu	r2,r6,8b010 <memmove+0xd8>
   8aff4:	1007883a 	mov	r3,r2
   8aff8:	28800017 	ldw	r2,0(r5)
   8affc:	31bfff04 	addi	r6,r6,-4
   8b000:	29400104 	addi	r5,r5,4
   8b004:	38800015 	stw	r2,0(r7)
   8b008:	39c00104 	addi	r7,r7,4
   8b00c:	19bffa36 	bltu	r3,r6,8aff8 <memmove+0xc0>
   8b010:	3811883a 	mov	r8,r7
   8b014:	003fd906 	br	8af7c <memmove+0x44>

0008b018 <memset>:
   8b018:	008000c4 	movi	r2,3
   8b01c:	29403fcc 	andi	r5,r5,255
   8b020:	2007883a 	mov	r3,r4
   8b024:	1180022e 	bgeu	r2,r6,8b030 <memset+0x18>
   8b028:	2084703a 	and	r2,r4,r2
   8b02c:	10000826 	beq	r2,zero,8b050 <memset+0x38>
   8b030:	30000526 	beq	r6,zero,8b048 <memset+0x30>
   8b034:	2805883a 	mov	r2,r5
   8b038:	30cd883a 	add	r6,r6,r3
   8b03c:	18800005 	stb	r2,0(r3)
   8b040:	18c00044 	addi	r3,r3,1
   8b044:	19bffd1e 	bne	r3,r6,8b03c <memset+0x24>
   8b048:	2005883a 	mov	r2,r4
   8b04c:	f800283a 	ret
   8b050:	2804923a 	slli	r2,r5,8
   8b054:	020003c4 	movi	r8,15
   8b058:	200f883a 	mov	r7,r4
   8b05c:	2884b03a 	or	r2,r5,r2
   8b060:	1006943a 	slli	r3,r2,16
   8b064:	10c6b03a 	or	r3,r2,r3
   8b068:	41800a2e 	bgeu	r8,r6,8b094 <memset+0x7c>
   8b06c:	4005883a 	mov	r2,r8
   8b070:	31bffc04 	addi	r6,r6,-16
   8b074:	38c00015 	stw	r3,0(r7)
   8b078:	38c00115 	stw	r3,4(r7)
   8b07c:	38c00215 	stw	r3,8(r7)
   8b080:	38c00315 	stw	r3,12(r7)
   8b084:	39c00404 	addi	r7,r7,16
   8b088:	11bff936 	bltu	r2,r6,8b070 <memset+0x58>
   8b08c:	008000c4 	movi	r2,3
   8b090:	1180052e 	bgeu	r2,r6,8b0a8 <memset+0x90>
   8b094:	31bfff04 	addi	r6,r6,-4
   8b098:	008000c4 	movi	r2,3
   8b09c:	38c00015 	stw	r3,0(r7)
   8b0a0:	39c00104 	addi	r7,r7,4
   8b0a4:	11bffb36 	bltu	r2,r6,8b094 <memset+0x7c>
   8b0a8:	3807883a 	mov	r3,r7
   8b0ac:	003fe006 	br	8b030 <memset+0x18>

0008b0b0 <_Bfree>:
   8b0b0:	28000826 	beq	r5,zero,8b0d4 <_Bfree+0x24>
   8b0b4:	28800117 	ldw	r2,4(r5)
   8b0b8:	21001317 	ldw	r4,76(r4)
   8b0bc:	1085883a 	add	r2,r2,r2
   8b0c0:	1085883a 	add	r2,r2,r2
   8b0c4:	1105883a 	add	r2,r2,r4
   8b0c8:	10c00017 	ldw	r3,0(r2)
   8b0cc:	28c00015 	stw	r3,0(r5)
   8b0d0:	11400015 	stw	r5,0(r2)
   8b0d4:	f800283a 	ret

0008b0d8 <__hi0bits>:
   8b0d8:	20bfffec 	andhi	r2,r4,65535
   8b0dc:	10001426 	beq	r2,zero,8b130 <__hi0bits+0x58>
   8b0e0:	0007883a 	mov	r3,zero
   8b0e4:	20bfc02c 	andhi	r2,r4,65280
   8b0e8:	1000021e 	bne	r2,zero,8b0f4 <__hi0bits+0x1c>
   8b0ec:	2008923a 	slli	r4,r4,8
   8b0f0:	18c00204 	addi	r3,r3,8
   8b0f4:	20bc002c 	andhi	r2,r4,61440
   8b0f8:	1000021e 	bne	r2,zero,8b104 <__hi0bits+0x2c>
   8b0fc:	2008913a 	slli	r4,r4,4
   8b100:	18c00104 	addi	r3,r3,4
   8b104:	20b0002c 	andhi	r2,r4,49152
   8b108:	1000031e 	bne	r2,zero,8b118 <__hi0bits+0x40>
   8b10c:	2105883a 	add	r2,r4,r4
   8b110:	18c00084 	addi	r3,r3,2
   8b114:	1089883a 	add	r4,r2,r2
   8b118:	20000316 	blt	r4,zero,8b128 <__hi0bits+0x50>
   8b11c:	2090002c 	andhi	r2,r4,16384
   8b120:	10000626 	beq	r2,zero,8b13c <__hi0bits+0x64>
   8b124:	18c00044 	addi	r3,r3,1
   8b128:	1805883a 	mov	r2,r3
   8b12c:	f800283a 	ret
   8b130:	2008943a 	slli	r4,r4,16
   8b134:	00c00404 	movi	r3,16
   8b138:	003fea06 	br	8b0e4 <__hi0bits+0xc>
   8b13c:	00c00804 	movi	r3,32
   8b140:	1805883a 	mov	r2,r3
   8b144:	f800283a 	ret

0008b148 <__lo0bits>:
   8b148:	20c00017 	ldw	r3,0(r4)
   8b14c:	188001cc 	andi	r2,r3,7
   8b150:	10000a26 	beq	r2,zero,8b17c <__lo0bits+0x34>
   8b154:	1880004c 	andi	r2,r3,1
   8b158:	1005003a 	cmpeq	r2,r2,zero
   8b15c:	10002126 	beq	r2,zero,8b1e4 <__lo0bits+0x9c>
   8b160:	1880008c 	andi	r2,r3,2
   8b164:	1000251e 	bne	r2,zero,8b1fc <__lo0bits+0xb4>
   8b168:	1804d0ba 	srli	r2,r3,2
   8b16c:	01400084 	movi	r5,2
   8b170:	20800015 	stw	r2,0(r4)
   8b174:	2805883a 	mov	r2,r5
   8b178:	f800283a 	ret
   8b17c:	18bfffcc 	andi	r2,r3,65535
   8b180:	10001526 	beq	r2,zero,8b1d8 <__lo0bits+0x90>
   8b184:	000b883a 	mov	r5,zero
   8b188:	18803fcc 	andi	r2,r3,255
   8b18c:	1000021e 	bne	r2,zero,8b198 <__lo0bits+0x50>
   8b190:	1806d23a 	srli	r3,r3,8
   8b194:	29400204 	addi	r5,r5,8
   8b198:	188003cc 	andi	r2,r3,15
   8b19c:	1000021e 	bne	r2,zero,8b1a8 <__lo0bits+0x60>
   8b1a0:	1806d13a 	srli	r3,r3,4
   8b1a4:	29400104 	addi	r5,r5,4
   8b1a8:	188000cc 	andi	r2,r3,3
   8b1ac:	1000021e 	bne	r2,zero,8b1b8 <__lo0bits+0x70>
   8b1b0:	1806d0ba 	srli	r3,r3,2
   8b1b4:	29400084 	addi	r5,r5,2
   8b1b8:	1880004c 	andi	r2,r3,1
   8b1bc:	1000031e 	bne	r2,zero,8b1cc <__lo0bits+0x84>
   8b1c0:	1806d07a 	srli	r3,r3,1
   8b1c4:	18000a26 	beq	r3,zero,8b1f0 <__lo0bits+0xa8>
   8b1c8:	29400044 	addi	r5,r5,1
   8b1cc:	2805883a 	mov	r2,r5
   8b1d0:	20c00015 	stw	r3,0(r4)
   8b1d4:	f800283a 	ret
   8b1d8:	1806d43a 	srli	r3,r3,16
   8b1dc:	01400404 	movi	r5,16
   8b1e0:	003fe906 	br	8b188 <__lo0bits+0x40>
   8b1e4:	000b883a 	mov	r5,zero
   8b1e8:	2805883a 	mov	r2,r5
   8b1ec:	f800283a 	ret
   8b1f0:	01400804 	movi	r5,32
   8b1f4:	2805883a 	mov	r2,r5
   8b1f8:	f800283a 	ret
   8b1fc:	1804d07a 	srli	r2,r3,1
   8b200:	01400044 	movi	r5,1
   8b204:	20800015 	stw	r2,0(r4)
   8b208:	003fda06 	br	8b174 <__lo0bits+0x2c>

0008b20c <__mcmp>:
   8b20c:	20800417 	ldw	r2,16(r4)
   8b210:	28c00417 	ldw	r3,16(r5)
   8b214:	10cfc83a 	sub	r7,r2,r3
   8b218:	38000c1e 	bne	r7,zero,8b24c <__mcmp+0x40>
   8b21c:	18c5883a 	add	r2,r3,r3
   8b220:	1085883a 	add	r2,r2,r2
   8b224:	10c00504 	addi	r3,r2,20
   8b228:	21000504 	addi	r4,r4,20
   8b22c:	28cb883a 	add	r5,r5,r3
   8b230:	2085883a 	add	r2,r4,r2
   8b234:	10bfff04 	addi	r2,r2,-4
   8b238:	297fff04 	addi	r5,r5,-4
   8b23c:	11800017 	ldw	r6,0(r2)
   8b240:	28c00017 	ldw	r3,0(r5)
   8b244:	30c0031e 	bne	r6,r3,8b254 <__mcmp+0x48>
   8b248:	20bffa36 	bltu	r4,r2,8b234 <__mcmp+0x28>
   8b24c:	3805883a 	mov	r2,r7
   8b250:	f800283a 	ret
   8b254:	30c00336 	bltu	r6,r3,8b264 <__mcmp+0x58>
   8b258:	01c00044 	movi	r7,1
   8b25c:	3805883a 	mov	r2,r7
   8b260:	f800283a 	ret
   8b264:	01ffffc4 	movi	r7,-1
   8b268:	003ff806 	br	8b24c <__mcmp+0x40>

0008b26c <__ulp>:
   8b26c:	295ffc2c 	andhi	r5,r5,32752
   8b270:	013f3034 	movhi	r4,64704
   8b274:	290b883a 	add	r5,r5,r4
   8b278:	0145c83a 	sub	r2,zero,r5
   8b27c:	1007d53a 	srai	r3,r2,20
   8b280:	000d883a 	mov	r6,zero
   8b284:	0140040e 	bge	zero,r5,8b298 <__ulp+0x2c>
   8b288:	280f883a 	mov	r7,r5
   8b28c:	3807883a 	mov	r3,r7
   8b290:	3005883a 	mov	r2,r6
   8b294:	f800283a 	ret
   8b298:	008004c4 	movi	r2,19
   8b29c:	193ffb04 	addi	r4,r3,-20
   8b2a0:	10c00c0e 	bge	r2,r3,8b2d4 <__ulp+0x68>
   8b2a4:	008007c4 	movi	r2,31
   8b2a8:	1107c83a 	sub	r3,r2,r4
   8b2ac:	00800784 	movi	r2,30
   8b2b0:	01400044 	movi	r5,1
   8b2b4:	11000216 	blt	r2,r4,8b2c0 <__ulp+0x54>
   8b2b8:	00800044 	movi	r2,1
   8b2bc:	10ca983a 	sll	r5,r2,r3
   8b2c0:	000f883a 	mov	r7,zero
   8b2c4:	280d883a 	mov	r6,r5
   8b2c8:	3807883a 	mov	r3,r7
   8b2cc:	3005883a 	mov	r2,r6
   8b2d0:	f800283a 	ret
   8b2d4:	00800234 	movhi	r2,8
   8b2d8:	10cfd83a 	sra	r7,r2,r3
   8b2dc:	000d883a 	mov	r6,zero
   8b2e0:	3005883a 	mov	r2,r6
   8b2e4:	3807883a 	mov	r3,r7
   8b2e8:	f800283a 	ret

0008b2ec <__b2d>:
   8b2ec:	20800417 	ldw	r2,16(r4)
   8b2f0:	defff904 	addi	sp,sp,-28
   8b2f4:	dd000415 	stw	r20,16(sp)
   8b2f8:	1085883a 	add	r2,r2,r2
   8b2fc:	25000504 	addi	r20,r4,20
   8b300:	1085883a 	add	r2,r2,r2
   8b304:	dc000015 	stw	r16,0(sp)
   8b308:	a0a1883a 	add	r16,r20,r2
   8b30c:	dd400515 	stw	r21,20(sp)
   8b310:	857fff17 	ldw	r21,-4(r16)
   8b314:	dc400115 	stw	r17,4(sp)
   8b318:	dfc00615 	stw	ra,24(sp)
   8b31c:	a809883a 	mov	r4,r21
   8b320:	2823883a 	mov	r17,r5
   8b324:	dcc00315 	stw	r19,12(sp)
   8b328:	dc800215 	stw	r18,8(sp)
   8b32c:	008b0d80 	call	8b0d8 <__hi0bits>
   8b330:	100b883a 	mov	r5,r2
   8b334:	00800804 	movi	r2,32
   8b338:	1145c83a 	sub	r2,r2,r5
   8b33c:	88800015 	stw	r2,0(r17)
   8b340:	00800284 	movi	r2,10
   8b344:	80ffff04 	addi	r3,r16,-4
   8b348:	11401416 	blt	r2,r5,8b39c <__b2d+0xb0>
   8b34c:	008002c4 	movi	r2,11
   8b350:	1149c83a 	sub	r4,r2,r5
   8b354:	a0c02736 	bltu	r20,r3,8b3f4 <__b2d+0x108>
   8b358:	000d883a 	mov	r6,zero
   8b35c:	28800544 	addi	r2,r5,21
   8b360:	a906d83a 	srl	r3,r21,r4
   8b364:	a884983a 	sll	r2,r21,r2
   8b368:	1ccffc34 	orhi	r19,r3,16368
   8b36c:	11a4b03a 	or	r18,r2,r6
   8b370:	9005883a 	mov	r2,r18
   8b374:	9807883a 	mov	r3,r19
   8b378:	dfc00617 	ldw	ra,24(sp)
   8b37c:	dd400517 	ldw	r21,20(sp)
   8b380:	dd000417 	ldw	r20,16(sp)
   8b384:	dcc00317 	ldw	r19,12(sp)
   8b388:	dc800217 	ldw	r18,8(sp)
   8b38c:	dc400117 	ldw	r17,4(sp)
   8b390:	dc000017 	ldw	r16,0(sp)
   8b394:	dec00704 	addi	sp,sp,28
   8b398:	f800283a 	ret
   8b39c:	a0c00e36 	bltu	r20,r3,8b3d8 <__b2d+0xec>
   8b3a0:	293ffd44 	addi	r4,r5,-11
   8b3a4:	000d883a 	mov	r6,zero
   8b3a8:	20000f26 	beq	r4,zero,8b3e8 <__b2d+0xfc>
   8b3ac:	00800804 	movi	r2,32
   8b3b0:	110bc83a 	sub	r5,r2,r4
   8b3b4:	a0c01236 	bltu	r20,r3,8b400 <__b2d+0x114>
   8b3b8:	000f883a 	mov	r7,zero
   8b3bc:	a904983a 	sll	r2,r21,r4
   8b3c0:	3146d83a 	srl	r3,r6,r5
   8b3c4:	3108983a 	sll	r4,r6,r4
   8b3c8:	108ffc34 	orhi	r2,r2,16368
   8b3cc:	18a6b03a 	or	r19,r3,r2
   8b3d0:	3924b03a 	or	r18,r7,r4
   8b3d4:	003fe606 	br	8b370 <__b2d+0x84>
   8b3d8:	293ffd44 	addi	r4,r5,-11
   8b3dc:	81bffe17 	ldw	r6,-8(r16)
   8b3e0:	80fffe04 	addi	r3,r16,-8
   8b3e4:	203ff11e 	bne	r4,zero,8b3ac <__b2d+0xc0>
   8b3e8:	accffc34 	orhi	r19,r21,16368
   8b3ec:	3025883a 	mov	r18,r6
   8b3f0:	003fdf06 	br	8b370 <__b2d+0x84>
   8b3f4:	18bfff17 	ldw	r2,-4(r3)
   8b3f8:	110cd83a 	srl	r6,r2,r4
   8b3fc:	003fd706 	br	8b35c <__b2d+0x70>
   8b400:	18bfff17 	ldw	r2,-4(r3)
   8b404:	114ed83a 	srl	r7,r2,r5
   8b408:	003fec06 	br	8b3bc <__b2d+0xd0>

0008b40c <__ratio>:
   8b40c:	defff904 	addi	sp,sp,-28
   8b410:	dc400215 	stw	r17,8(sp)
   8b414:	2823883a 	mov	r17,r5
   8b418:	d80b883a 	mov	r5,sp
   8b41c:	dfc00615 	stw	ra,24(sp)
   8b420:	dd000515 	stw	r20,20(sp)
   8b424:	dcc00415 	stw	r19,16(sp)
   8b428:	dc800315 	stw	r18,12(sp)
   8b42c:	2025883a 	mov	r18,r4
   8b430:	008b2ec0 	call	8b2ec <__b2d>
   8b434:	8809883a 	mov	r4,r17
   8b438:	d9400104 	addi	r5,sp,4
   8b43c:	1027883a 	mov	r19,r2
   8b440:	1829883a 	mov	r20,r3
   8b444:	008b2ec0 	call	8b2ec <__b2d>
   8b448:	89000417 	ldw	r4,16(r17)
   8b44c:	91c00417 	ldw	r7,16(r18)
   8b450:	d9800117 	ldw	r6,4(sp)
   8b454:	180b883a 	mov	r5,r3
   8b458:	390fc83a 	sub	r7,r7,r4
   8b45c:	1009883a 	mov	r4,r2
   8b460:	d8800017 	ldw	r2,0(sp)
   8b464:	380e917a 	slli	r7,r7,5
   8b468:	2011883a 	mov	r8,r4
   8b46c:	1185c83a 	sub	r2,r2,r6
   8b470:	11c5883a 	add	r2,r2,r7
   8b474:	1006953a 	slli	r3,r2,20
   8b478:	2813883a 	mov	r9,r5
   8b47c:	00800d0e 	bge	zero,r2,8b4b4 <__ratio+0xa8>
   8b480:	1d29883a 	add	r20,r3,r20
   8b484:	a00b883a 	mov	r5,r20
   8b488:	480f883a 	mov	r7,r9
   8b48c:	9809883a 	mov	r4,r19
   8b490:	400d883a 	mov	r6,r8
   8b494:	008e4540 	call	8e454 <__divdf3>
   8b498:	dfc00617 	ldw	ra,24(sp)
   8b49c:	dd000517 	ldw	r20,20(sp)
   8b4a0:	dcc00417 	ldw	r19,16(sp)
   8b4a4:	dc800317 	ldw	r18,12(sp)
   8b4a8:	dc400217 	ldw	r17,8(sp)
   8b4ac:	dec00704 	addi	sp,sp,28
   8b4b0:	f800283a 	ret
   8b4b4:	28d3c83a 	sub	r9,r5,r3
   8b4b8:	003ff206 	br	8b484 <__ratio+0x78>

0008b4bc <_mprec_log10>:
   8b4bc:	defffe04 	addi	sp,sp,-8
   8b4c0:	008005c4 	movi	r2,23
   8b4c4:	dc000015 	stw	r16,0(sp)
   8b4c8:	dfc00115 	stw	ra,4(sp)
   8b4cc:	2021883a 	mov	r16,r4
   8b4d0:	11000c16 	blt	r2,r4,8b504 <_mprec_log10+0x48>
   8b4d4:	200490fa 	slli	r2,r4,3
   8b4d8:	00c00274 	movhi	r3,9
   8b4dc:	18c90d04 	addi	r3,r3,9268
   8b4e0:	10c5883a 	add	r2,r2,r3
   8b4e4:	12400117 	ldw	r9,4(r2)
   8b4e8:	12000017 	ldw	r8,0(r2)
   8b4ec:	4807883a 	mov	r3,r9
   8b4f0:	4005883a 	mov	r2,r8
   8b4f4:	dfc00117 	ldw	ra,4(sp)
   8b4f8:	dc000017 	ldw	r16,0(sp)
   8b4fc:	dec00204 	addi	sp,sp,8
   8b500:	f800283a 	ret
   8b504:	0011883a 	mov	r8,zero
   8b508:	024ffc34 	movhi	r9,16368
   8b50c:	0005883a 	mov	r2,zero
   8b510:	00d00934 	movhi	r3,16420
   8b514:	480b883a 	mov	r5,r9
   8b518:	4009883a 	mov	r4,r8
   8b51c:	180f883a 	mov	r7,r3
   8b520:	100d883a 	mov	r6,r2
   8b524:	008e0900 	call	8e090 <__muldf3>
   8b528:	843fffc4 	addi	r16,r16,-1
   8b52c:	1011883a 	mov	r8,r2
   8b530:	1813883a 	mov	r9,r3
   8b534:	803ff51e 	bne	r16,zero,8b50c <_mprec_log10+0x50>
   8b538:	4005883a 	mov	r2,r8
   8b53c:	4807883a 	mov	r3,r9
   8b540:	dfc00117 	ldw	ra,4(sp)
   8b544:	dc000017 	ldw	r16,0(sp)
   8b548:	dec00204 	addi	sp,sp,8
   8b54c:	f800283a 	ret

0008b550 <__copybits>:
   8b550:	297fffc4 	addi	r5,r5,-1
   8b554:	30800417 	ldw	r2,16(r6)
   8b558:	280bd17a 	srai	r5,r5,5
   8b55c:	31800504 	addi	r6,r6,20
   8b560:	1085883a 	add	r2,r2,r2
   8b564:	294b883a 	add	r5,r5,r5
   8b568:	294b883a 	add	r5,r5,r5
   8b56c:	1085883a 	add	r2,r2,r2
   8b570:	290b883a 	add	r5,r5,r4
   8b574:	3087883a 	add	r3,r6,r2
   8b578:	29400104 	addi	r5,r5,4
   8b57c:	30c0052e 	bgeu	r6,r3,8b594 <__copybits+0x44>
   8b580:	30800017 	ldw	r2,0(r6)
   8b584:	31800104 	addi	r6,r6,4
   8b588:	20800015 	stw	r2,0(r4)
   8b58c:	21000104 	addi	r4,r4,4
   8b590:	30fffb36 	bltu	r6,r3,8b580 <__copybits+0x30>
   8b594:	2140032e 	bgeu	r4,r5,8b5a4 <__copybits+0x54>
   8b598:	20000015 	stw	zero,0(r4)
   8b59c:	21000104 	addi	r4,r4,4
   8b5a0:	217ffd36 	bltu	r4,r5,8b598 <__copybits+0x48>
   8b5a4:	f800283a 	ret

0008b5a8 <__any_on>:
   8b5a8:	20800417 	ldw	r2,16(r4)
   8b5ac:	2807d17a 	srai	r3,r5,5
   8b5b0:	21000504 	addi	r4,r4,20
   8b5b4:	10c00d0e 	bge	r2,r3,8b5ec <__any_on+0x44>
   8b5b8:	1085883a 	add	r2,r2,r2
   8b5bc:	1085883a 	add	r2,r2,r2
   8b5c0:	208d883a 	add	r6,r4,r2
   8b5c4:	2180182e 	bgeu	r4,r6,8b628 <__any_on+0x80>
   8b5c8:	30bfff17 	ldw	r2,-4(r6)
   8b5cc:	30ffff04 	addi	r3,r6,-4
   8b5d0:	1000041e 	bne	r2,zero,8b5e4 <__any_on+0x3c>
   8b5d4:	20c0142e 	bgeu	r4,r3,8b628 <__any_on+0x80>
   8b5d8:	18ffff04 	addi	r3,r3,-4
   8b5dc:	18800017 	ldw	r2,0(r3)
   8b5e0:	103ffc26 	beq	r2,zero,8b5d4 <__any_on+0x2c>
   8b5e4:	00800044 	movi	r2,1
   8b5e8:	f800283a 	ret
   8b5ec:	18800a0e 	bge	r3,r2,8b618 <__any_on+0x70>
   8b5f0:	294007cc 	andi	r5,r5,31
   8b5f4:	28000826 	beq	r5,zero,8b618 <__any_on+0x70>
   8b5f8:	18c5883a 	add	r2,r3,r3
   8b5fc:	1085883a 	add	r2,r2,r2
   8b600:	208d883a 	add	r6,r4,r2
   8b604:	30c00017 	ldw	r3,0(r6)
   8b608:	1944d83a 	srl	r2,r3,r5
   8b60c:	1144983a 	sll	r2,r2,r5
   8b610:	18bff41e 	bne	r3,r2,8b5e4 <__any_on+0x3c>
   8b614:	003feb06 	br	8b5c4 <__any_on+0x1c>
   8b618:	18c5883a 	add	r2,r3,r3
   8b61c:	1085883a 	add	r2,r2,r2
   8b620:	208d883a 	add	r6,r4,r2
   8b624:	003fe706 	br	8b5c4 <__any_on+0x1c>
   8b628:	0005883a 	mov	r2,zero
   8b62c:	f800283a 	ret

0008b630 <_Balloc>:
   8b630:	20c01317 	ldw	r3,76(r4)
   8b634:	defffb04 	addi	sp,sp,-20
   8b638:	dcc00315 	stw	r19,12(sp)
   8b63c:	dc800215 	stw	r18,8(sp)
   8b640:	dfc00415 	stw	ra,16(sp)
   8b644:	2825883a 	mov	r18,r5
   8b648:	dc400115 	stw	r17,4(sp)
   8b64c:	dc000015 	stw	r16,0(sp)
   8b650:	2027883a 	mov	r19,r4
   8b654:	01800404 	movi	r6,16
   8b658:	01400104 	movi	r5,4
   8b65c:	18001726 	beq	r3,zero,8b6bc <_Balloc+0x8c>
   8b660:	01400044 	movi	r5,1
   8b664:	9485883a 	add	r2,r18,r18
   8b668:	2ca2983a 	sll	r17,r5,r18
   8b66c:	1085883a 	add	r2,r2,r2
   8b670:	10c7883a 	add	r3,r2,r3
   8b674:	1c000017 	ldw	r16,0(r3)
   8b678:	8c4d883a 	add	r6,r17,r17
   8b67c:	318d883a 	add	r6,r6,r6
   8b680:	9809883a 	mov	r4,r19
   8b684:	31800504 	addi	r6,r6,20
   8b688:	80001226 	beq	r16,zero,8b6d4 <_Balloc+0xa4>
   8b68c:	80800017 	ldw	r2,0(r16)
   8b690:	18800015 	stw	r2,0(r3)
   8b694:	80000415 	stw	zero,16(r16)
   8b698:	80000315 	stw	zero,12(r16)
   8b69c:	8005883a 	mov	r2,r16
   8b6a0:	dfc00417 	ldw	ra,16(sp)
   8b6a4:	dcc00317 	ldw	r19,12(sp)
   8b6a8:	dc800217 	ldw	r18,8(sp)
   8b6ac:	dc400117 	ldw	r17,4(sp)
   8b6b0:	dc000017 	ldw	r16,0(sp)
   8b6b4:	dec00504 	addi	sp,sp,20
   8b6b8:	f800283a 	ret
   8b6bc:	008ca900 	call	8ca90 <_calloc_r>
   8b6c0:	1007883a 	mov	r3,r2
   8b6c4:	0021883a 	mov	r16,zero
   8b6c8:	98801315 	stw	r2,76(r19)
   8b6cc:	103fe41e 	bne	r2,zero,8b660 <_Balloc+0x30>
   8b6d0:	003ff206 	br	8b69c <_Balloc+0x6c>
   8b6d4:	008ca900 	call	8ca90 <_calloc_r>
   8b6d8:	103ff026 	beq	r2,zero,8b69c <_Balloc+0x6c>
   8b6dc:	1021883a 	mov	r16,r2
   8b6e0:	14800115 	stw	r18,4(r2)
   8b6e4:	14400215 	stw	r17,8(r2)
   8b6e8:	003fea06 	br	8b694 <_Balloc+0x64>

0008b6ec <__d2b>:
   8b6ec:	defff504 	addi	sp,sp,-44
   8b6f0:	dcc00515 	stw	r19,20(sp)
   8b6f4:	04c00044 	movi	r19,1
   8b6f8:	dc000215 	stw	r16,8(sp)
   8b6fc:	2821883a 	mov	r16,r5
   8b700:	980b883a 	mov	r5,r19
   8b704:	ddc00915 	stw	r23,36(sp)
   8b708:	dd800815 	stw	r22,32(sp)
   8b70c:	dd400715 	stw	r21,28(sp)
   8b710:	dd000615 	stw	r20,24(sp)
   8b714:	dc800415 	stw	r18,16(sp)
   8b718:	dc400315 	stw	r17,12(sp)
   8b71c:	dfc00a15 	stw	ra,40(sp)
   8b720:	3023883a 	mov	r17,r6
   8b724:	382d883a 	mov	r22,r7
   8b728:	ddc00b17 	ldw	r23,44(sp)
   8b72c:	008b6300 	call	8b630 <_Balloc>
   8b730:	1025883a 	mov	r18,r2
   8b734:	00a00034 	movhi	r2,32768
   8b738:	10bfffc4 	addi	r2,r2,-1
   8b73c:	8888703a 	and	r4,r17,r2
   8b740:	202ad53a 	srli	r21,r4,20
   8b744:	00800434 	movhi	r2,16
   8b748:	10bfffc4 	addi	r2,r2,-1
   8b74c:	8886703a 	and	r3,r17,r2
   8b750:	a829003a 	cmpeq	r20,r21,zero
   8b754:	800b883a 	mov	r5,r16
   8b758:	d8c00115 	stw	r3,4(sp)
   8b75c:	94000504 	addi	r16,r18,20
   8b760:	a000021e 	bne	r20,zero,8b76c <__d2b+0x80>
   8b764:	18c00434 	orhi	r3,r3,16
   8b768:	d8c00115 	stw	r3,4(sp)
   8b76c:	28002726 	beq	r5,zero,8b80c <__d2b+0x120>
   8b770:	d809883a 	mov	r4,sp
   8b774:	d9400015 	stw	r5,0(sp)
   8b778:	008b1480 	call	8b148 <__lo0bits>
   8b77c:	100d883a 	mov	r6,r2
   8b780:	10003526 	beq	r2,zero,8b858 <__d2b+0x16c>
   8b784:	d8c00117 	ldw	r3,4(sp)
   8b788:	00800804 	movi	r2,32
   8b78c:	1185c83a 	sub	r2,r2,r6
   8b790:	d9000017 	ldw	r4,0(sp)
   8b794:	1886983a 	sll	r3,r3,r2
   8b798:	1906b03a 	or	r3,r3,r4
   8b79c:	90c00515 	stw	r3,20(r18)
   8b7a0:	d8c00117 	ldw	r3,4(sp)
   8b7a4:	1986d83a 	srl	r3,r3,r6
   8b7a8:	d8c00115 	stw	r3,4(sp)
   8b7ac:	180b003a 	cmpeq	r5,r3,zero
   8b7b0:	00800084 	movi	r2,2
   8b7b4:	114bc83a 	sub	r5,r2,r5
   8b7b8:	80c00115 	stw	r3,4(r16)
   8b7bc:	91400415 	stw	r5,16(r18)
   8b7c0:	a0001a1e 	bne	r20,zero,8b82c <__d2b+0x140>
   8b7c4:	3545883a 	add	r2,r6,r21
   8b7c8:	10bef344 	addi	r2,r2,-1075
   8b7cc:	00c00d44 	movi	r3,53
   8b7d0:	b0800015 	stw	r2,0(r22)
   8b7d4:	1987c83a 	sub	r3,r3,r6
   8b7d8:	b8c00015 	stw	r3,0(r23)
   8b7dc:	9005883a 	mov	r2,r18
   8b7e0:	dfc00a17 	ldw	ra,40(sp)
   8b7e4:	ddc00917 	ldw	r23,36(sp)
   8b7e8:	dd800817 	ldw	r22,32(sp)
   8b7ec:	dd400717 	ldw	r21,28(sp)
   8b7f0:	dd000617 	ldw	r20,24(sp)
   8b7f4:	dcc00517 	ldw	r19,20(sp)
   8b7f8:	dc800417 	ldw	r18,16(sp)
   8b7fc:	dc400317 	ldw	r17,12(sp)
   8b800:	dc000217 	ldw	r16,8(sp)
   8b804:	dec00b04 	addi	sp,sp,44
   8b808:	f800283a 	ret
   8b80c:	d9000104 	addi	r4,sp,4
   8b810:	008b1480 	call	8b148 <__lo0bits>
   8b814:	11800804 	addi	r6,r2,32
   8b818:	d8800117 	ldw	r2,4(sp)
   8b81c:	94c00415 	stw	r19,16(r18)
   8b820:	980b883a 	mov	r5,r19
   8b824:	90800515 	stw	r2,20(r18)
   8b828:	a03fe626 	beq	r20,zero,8b7c4 <__d2b+0xd8>
   8b82c:	2945883a 	add	r2,r5,r5
   8b830:	1085883a 	add	r2,r2,r2
   8b834:	1405883a 	add	r2,r2,r16
   8b838:	113fff17 	ldw	r4,-4(r2)
   8b83c:	30fef384 	addi	r3,r6,-1074
   8b840:	2820917a 	slli	r16,r5,5
   8b844:	b0c00015 	stw	r3,0(r22)
   8b848:	008b0d80 	call	8b0d8 <__hi0bits>
   8b84c:	80a1c83a 	sub	r16,r16,r2
   8b850:	bc000015 	stw	r16,0(r23)
   8b854:	003fe106 	br	8b7dc <__d2b+0xf0>
   8b858:	d8800017 	ldw	r2,0(sp)
   8b85c:	90800515 	stw	r2,20(r18)
   8b860:	d8c00117 	ldw	r3,4(sp)
   8b864:	003fd106 	br	8b7ac <__d2b+0xc0>

0008b868 <__mdiff>:
   8b868:	defffb04 	addi	sp,sp,-20
   8b86c:	dc000015 	stw	r16,0(sp)
   8b870:	2821883a 	mov	r16,r5
   8b874:	dc800215 	stw	r18,8(sp)
   8b878:	300b883a 	mov	r5,r6
   8b87c:	2025883a 	mov	r18,r4
   8b880:	8009883a 	mov	r4,r16
   8b884:	dc400115 	stw	r17,4(sp)
   8b888:	dfc00415 	stw	ra,16(sp)
   8b88c:	dcc00315 	stw	r19,12(sp)
   8b890:	3023883a 	mov	r17,r6
   8b894:	008b20c0 	call	8b20c <__mcmp>
   8b898:	10004226 	beq	r2,zero,8b9a4 <__mdiff+0x13c>
   8b89c:	10005016 	blt	r2,zero,8b9e0 <__mdiff+0x178>
   8b8a0:	0027883a 	mov	r19,zero
   8b8a4:	81400117 	ldw	r5,4(r16)
   8b8a8:	9009883a 	mov	r4,r18
   8b8ac:	008b6300 	call	8b630 <_Balloc>
   8b8b0:	1019883a 	mov	r12,r2
   8b8b4:	82800417 	ldw	r10,16(r16)
   8b8b8:	88800417 	ldw	r2,16(r17)
   8b8bc:	81800504 	addi	r6,r16,20
   8b8c0:	5287883a 	add	r3,r10,r10
   8b8c4:	1085883a 	add	r2,r2,r2
   8b8c8:	18c7883a 	add	r3,r3,r3
   8b8cc:	1085883a 	add	r2,r2,r2
   8b8d0:	8a000504 	addi	r8,r17,20
   8b8d4:	64c00315 	stw	r19,12(r12)
   8b8d8:	30db883a 	add	r13,r6,r3
   8b8dc:	4097883a 	add	r11,r8,r2
   8b8e0:	61c00504 	addi	r7,r12,20
   8b8e4:	0013883a 	mov	r9,zero
   8b8e8:	31000017 	ldw	r4,0(r6)
   8b8ec:	41400017 	ldw	r5,0(r8)
   8b8f0:	42000104 	addi	r8,r8,4
   8b8f4:	20bfffcc 	andi	r2,r4,65535
   8b8f8:	28ffffcc 	andi	r3,r5,65535
   8b8fc:	10c5c83a 	sub	r2,r2,r3
   8b900:	1245883a 	add	r2,r2,r9
   8b904:	2008d43a 	srli	r4,r4,16
   8b908:	280ad43a 	srli	r5,r5,16
   8b90c:	1007d43a 	srai	r3,r2,16
   8b910:	3880000d 	sth	r2,0(r7)
   8b914:	2149c83a 	sub	r4,r4,r5
   8b918:	20c9883a 	add	r4,r4,r3
   8b91c:	3900008d 	sth	r4,2(r7)
   8b920:	31800104 	addi	r6,r6,4
   8b924:	39c00104 	addi	r7,r7,4
   8b928:	2013d43a 	srai	r9,r4,16
   8b92c:	42ffee36 	bltu	r8,r11,8b8e8 <__mdiff+0x80>
   8b930:	33400c2e 	bgeu	r6,r13,8b964 <__mdiff+0xfc>
   8b934:	30800017 	ldw	r2,0(r6)
   8b938:	31800104 	addi	r6,r6,4
   8b93c:	10ffffcc 	andi	r3,r2,65535
   8b940:	1a47883a 	add	r3,r3,r9
   8b944:	1004d43a 	srli	r2,r2,16
   8b948:	1809d43a 	srai	r4,r3,16
   8b94c:	38c0000d 	sth	r3,0(r7)
   8b950:	1105883a 	add	r2,r2,r4
   8b954:	3880008d 	sth	r2,2(r7)
   8b958:	1013d43a 	srai	r9,r2,16
   8b95c:	39c00104 	addi	r7,r7,4
   8b960:	337ff436 	bltu	r6,r13,8b934 <__mdiff+0xcc>
   8b964:	38bfff17 	ldw	r2,-4(r7)
   8b968:	38ffff04 	addi	r3,r7,-4
   8b96c:	1000041e 	bne	r2,zero,8b980 <__mdiff+0x118>
   8b970:	18ffff04 	addi	r3,r3,-4
   8b974:	18800017 	ldw	r2,0(r3)
   8b978:	52bfffc4 	addi	r10,r10,-1
   8b97c:	103ffc26 	beq	r2,zero,8b970 <__mdiff+0x108>
   8b980:	6005883a 	mov	r2,r12
   8b984:	62800415 	stw	r10,16(r12)
   8b988:	dfc00417 	ldw	ra,16(sp)
   8b98c:	dcc00317 	ldw	r19,12(sp)
   8b990:	dc800217 	ldw	r18,8(sp)
   8b994:	dc400117 	ldw	r17,4(sp)
   8b998:	dc000017 	ldw	r16,0(sp)
   8b99c:	dec00504 	addi	sp,sp,20
   8b9a0:	f800283a 	ret
   8b9a4:	9009883a 	mov	r4,r18
   8b9a8:	000b883a 	mov	r5,zero
   8b9ac:	008b6300 	call	8b630 <_Balloc>
   8b9b0:	1019883a 	mov	r12,r2
   8b9b4:	00800044 	movi	r2,1
   8b9b8:	60800415 	stw	r2,16(r12)
   8b9bc:	6005883a 	mov	r2,r12
   8b9c0:	60000515 	stw	zero,20(r12)
   8b9c4:	dfc00417 	ldw	ra,16(sp)
   8b9c8:	dcc00317 	ldw	r19,12(sp)
   8b9cc:	dc800217 	ldw	r18,8(sp)
   8b9d0:	dc400117 	ldw	r17,4(sp)
   8b9d4:	dc000017 	ldw	r16,0(sp)
   8b9d8:	dec00504 	addi	sp,sp,20
   8b9dc:	f800283a 	ret
   8b9e0:	880d883a 	mov	r6,r17
   8b9e4:	04c00044 	movi	r19,1
   8b9e8:	8023883a 	mov	r17,r16
   8b9ec:	3021883a 	mov	r16,r6
   8b9f0:	003fac06 	br	8b8a4 <__mdiff+0x3c>

0008b9f4 <__lshift>:
   8b9f4:	defff904 	addi	sp,sp,-28
   8b9f8:	28800417 	ldw	r2,16(r5)
   8b9fc:	dc000015 	stw	r16,0(sp)
   8ba00:	3021d17a 	srai	r16,r6,5
   8ba04:	28c00217 	ldw	r3,8(r5)
   8ba08:	10800044 	addi	r2,r2,1
   8ba0c:	dc400115 	stw	r17,4(sp)
   8ba10:	80a3883a 	add	r17,r16,r2
   8ba14:	dd400515 	stw	r21,20(sp)
   8ba18:	dd000415 	stw	r20,16(sp)
   8ba1c:	dc800215 	stw	r18,8(sp)
   8ba20:	dfc00615 	stw	ra,24(sp)
   8ba24:	2825883a 	mov	r18,r5
   8ba28:	dcc00315 	stw	r19,12(sp)
   8ba2c:	3029883a 	mov	r20,r6
   8ba30:	202b883a 	mov	r21,r4
   8ba34:	29400117 	ldw	r5,4(r5)
   8ba38:	1c40030e 	bge	r3,r17,8ba48 <__lshift+0x54>
   8ba3c:	18c7883a 	add	r3,r3,r3
   8ba40:	29400044 	addi	r5,r5,1
   8ba44:	1c7ffd16 	blt	r3,r17,8ba3c <__lshift+0x48>
   8ba48:	a809883a 	mov	r4,r21
   8ba4c:	008b6300 	call	8b630 <_Balloc>
   8ba50:	1027883a 	mov	r19,r2
   8ba54:	11400504 	addi	r5,r2,20
   8ba58:	0400090e 	bge	zero,r16,8ba80 <__lshift+0x8c>
   8ba5c:	2805883a 	mov	r2,r5
   8ba60:	0007883a 	mov	r3,zero
   8ba64:	18c00044 	addi	r3,r3,1
   8ba68:	10000015 	stw	zero,0(r2)
   8ba6c:	10800104 	addi	r2,r2,4
   8ba70:	80fffc1e 	bne	r16,r3,8ba64 <__lshift+0x70>
   8ba74:	8405883a 	add	r2,r16,r16
   8ba78:	1085883a 	add	r2,r2,r2
   8ba7c:	288b883a 	add	r5,r5,r2
   8ba80:	90800417 	ldw	r2,16(r18)
   8ba84:	91000504 	addi	r4,r18,20
   8ba88:	a18007cc 	andi	r6,r20,31
   8ba8c:	1085883a 	add	r2,r2,r2
   8ba90:	1085883a 	add	r2,r2,r2
   8ba94:	208f883a 	add	r7,r4,r2
   8ba98:	30001e26 	beq	r6,zero,8bb14 <__lshift+0x120>
   8ba9c:	00800804 	movi	r2,32
   8baa0:	1191c83a 	sub	r8,r2,r6
   8baa4:	0007883a 	mov	r3,zero
   8baa8:	20800017 	ldw	r2,0(r4)
   8baac:	1184983a 	sll	r2,r2,r6
   8bab0:	1884b03a 	or	r2,r3,r2
   8bab4:	28800015 	stw	r2,0(r5)
   8bab8:	20c00017 	ldw	r3,0(r4)
   8babc:	21000104 	addi	r4,r4,4
   8bac0:	29400104 	addi	r5,r5,4
   8bac4:	1a06d83a 	srl	r3,r3,r8
   8bac8:	21fff736 	bltu	r4,r7,8baa8 <__lshift+0xb4>
   8bacc:	28c00015 	stw	r3,0(r5)
   8bad0:	18000126 	beq	r3,zero,8bad8 <__lshift+0xe4>
   8bad4:	8c400044 	addi	r17,r17,1
   8bad8:	88bfffc4 	addi	r2,r17,-1
   8badc:	98800415 	stw	r2,16(r19)
   8bae0:	a809883a 	mov	r4,r21
   8bae4:	900b883a 	mov	r5,r18
   8bae8:	008b0b00 	call	8b0b0 <_Bfree>
   8baec:	9805883a 	mov	r2,r19
   8baf0:	dfc00617 	ldw	ra,24(sp)
   8baf4:	dd400517 	ldw	r21,20(sp)
   8baf8:	dd000417 	ldw	r20,16(sp)
   8bafc:	dcc00317 	ldw	r19,12(sp)
   8bb00:	dc800217 	ldw	r18,8(sp)
   8bb04:	dc400117 	ldw	r17,4(sp)
   8bb08:	dc000017 	ldw	r16,0(sp)
   8bb0c:	dec00704 	addi	sp,sp,28
   8bb10:	f800283a 	ret
   8bb14:	20800017 	ldw	r2,0(r4)
   8bb18:	21000104 	addi	r4,r4,4
   8bb1c:	28800015 	stw	r2,0(r5)
   8bb20:	29400104 	addi	r5,r5,4
   8bb24:	21ffec2e 	bgeu	r4,r7,8bad8 <__lshift+0xe4>
   8bb28:	20800017 	ldw	r2,0(r4)
   8bb2c:	21000104 	addi	r4,r4,4
   8bb30:	28800015 	stw	r2,0(r5)
   8bb34:	29400104 	addi	r5,r5,4
   8bb38:	21fff636 	bltu	r4,r7,8bb14 <__lshift+0x120>
   8bb3c:	003fe606 	br	8bad8 <__lshift+0xe4>

0008bb40 <__multiply>:
   8bb40:	defff004 	addi	sp,sp,-64
   8bb44:	dc800815 	stw	r18,32(sp)
   8bb48:	dc400715 	stw	r17,28(sp)
   8bb4c:	2c800417 	ldw	r18,16(r5)
   8bb50:	34400417 	ldw	r17,16(r6)
   8bb54:	dcc00915 	stw	r19,36(sp)
   8bb58:	dc000615 	stw	r16,24(sp)
   8bb5c:	dfc00f15 	stw	ra,60(sp)
   8bb60:	df000e15 	stw	fp,56(sp)
   8bb64:	ddc00d15 	stw	r23,52(sp)
   8bb68:	dd800c15 	stw	r22,48(sp)
   8bb6c:	dd400b15 	stw	r21,44(sp)
   8bb70:	dd000a15 	stw	r20,40(sp)
   8bb74:	2821883a 	mov	r16,r5
   8bb78:	3027883a 	mov	r19,r6
   8bb7c:	9440040e 	bge	r18,r17,8bb90 <__multiply+0x50>
   8bb80:	8825883a 	mov	r18,r17
   8bb84:	2c400417 	ldw	r17,16(r5)
   8bb88:	2827883a 	mov	r19,r5
   8bb8c:	3021883a 	mov	r16,r6
   8bb90:	80800217 	ldw	r2,8(r16)
   8bb94:	9447883a 	add	r3,r18,r17
   8bb98:	d8c00415 	stw	r3,16(sp)
   8bb9c:	81400117 	ldw	r5,4(r16)
   8bba0:	10c0010e 	bge	r2,r3,8bba8 <__multiply+0x68>
   8bba4:	29400044 	addi	r5,r5,1
   8bba8:	008b6300 	call	8b630 <_Balloc>
   8bbac:	d8800515 	stw	r2,20(sp)
   8bbb0:	d9000417 	ldw	r4,16(sp)
   8bbb4:	d8c00517 	ldw	r3,20(sp)
   8bbb8:	2105883a 	add	r2,r4,r4
   8bbbc:	1085883a 	add	r2,r2,r2
   8bbc0:	19000504 	addi	r4,r3,20
   8bbc4:	2085883a 	add	r2,r4,r2
   8bbc8:	d8800315 	stw	r2,12(sp)
   8bbcc:	2080052e 	bgeu	r4,r2,8bbe4 <__multiply+0xa4>
   8bbd0:	2005883a 	mov	r2,r4
   8bbd4:	d8c00317 	ldw	r3,12(sp)
   8bbd8:	10000015 	stw	zero,0(r2)
   8bbdc:	10800104 	addi	r2,r2,4
   8bbe0:	10fffc36 	bltu	r2,r3,8bbd4 <__multiply+0x94>
   8bbe4:	8c45883a 	add	r2,r17,r17
   8bbe8:	9487883a 	add	r3,r18,r18
   8bbec:	9dc00504 	addi	r23,r19,20
   8bbf0:	1085883a 	add	r2,r2,r2
   8bbf4:	84000504 	addi	r16,r16,20
   8bbf8:	18c7883a 	add	r3,r3,r3
   8bbfc:	b885883a 	add	r2,r23,r2
   8bc00:	dc000015 	stw	r16,0(sp)
   8bc04:	d8800215 	stw	r2,8(sp)
   8bc08:	80f9883a 	add	fp,r16,r3
   8bc0c:	b880432e 	bgeu	r23,r2,8bd1c <__multiply+0x1dc>
   8bc10:	d9000115 	stw	r4,4(sp)
   8bc14:	b9000017 	ldw	r4,0(r23)
   8bc18:	253fffcc 	andi	r20,r4,65535
   8bc1c:	a0001a26 	beq	r20,zero,8bc88 <__multiply+0x148>
   8bc20:	dcc00017 	ldw	r19,0(sp)
   8bc24:	dc800117 	ldw	r18,4(sp)
   8bc28:	002b883a 	mov	r21,zero
   8bc2c:	9c400017 	ldw	r17,0(r19)
   8bc30:	94000017 	ldw	r16,0(r18)
   8bc34:	a009883a 	mov	r4,r20
   8bc38:	897fffcc 	andi	r5,r17,65535
   8bc3c:	008597c0 	call	8597c <__mulsi3>
   8bc40:	880ad43a 	srli	r5,r17,16
   8bc44:	80ffffcc 	andi	r3,r16,65535
   8bc48:	a8c7883a 	add	r3,r21,r3
   8bc4c:	a009883a 	mov	r4,r20
   8bc50:	10e3883a 	add	r17,r2,r3
   8bc54:	8020d43a 	srli	r16,r16,16
   8bc58:	008597c0 	call	8597c <__mulsi3>
   8bc5c:	8806d43a 	srli	r3,r17,16
   8bc60:	1405883a 	add	r2,r2,r16
   8bc64:	9cc00104 	addi	r19,r19,4
   8bc68:	1887883a 	add	r3,r3,r2
   8bc6c:	90c0008d 	sth	r3,2(r18)
   8bc70:	9440000d 	sth	r17,0(r18)
   8bc74:	182ad43a 	srli	r21,r3,16
   8bc78:	94800104 	addi	r18,r18,4
   8bc7c:	9f3feb36 	bltu	r19,fp,8bc2c <__multiply+0xec>
   8bc80:	95400015 	stw	r21,0(r18)
   8bc84:	b9000017 	ldw	r4,0(r23)
   8bc88:	202ad43a 	srli	r21,r4,16
   8bc8c:	a8001c26 	beq	r21,zero,8bd00 <__multiply+0x1c0>
   8bc90:	d9000117 	ldw	r4,4(sp)
   8bc94:	dd000017 	ldw	r20,0(sp)
   8bc98:	002d883a 	mov	r22,zero
   8bc9c:	24c00017 	ldw	r19,0(r4)
   8bca0:	2025883a 	mov	r18,r4
   8bca4:	9823883a 	mov	r17,r19
   8bca8:	a4000017 	ldw	r16,0(r20)
   8bcac:	a809883a 	mov	r4,r21
   8bcb0:	a5000104 	addi	r20,r20,4
   8bcb4:	817fffcc 	andi	r5,r16,65535
   8bcb8:	008597c0 	call	8597c <__mulsi3>
   8bcbc:	8806d43a 	srli	r3,r17,16
   8bcc0:	800ad43a 	srli	r5,r16,16
   8bcc4:	94c0000d 	sth	r19,0(r18)
   8bcc8:	b0c7883a 	add	r3,r22,r3
   8bccc:	10e1883a 	add	r16,r2,r3
   8bcd0:	9400008d 	sth	r16,2(r18)
   8bcd4:	a809883a 	mov	r4,r21
   8bcd8:	94800104 	addi	r18,r18,4
   8bcdc:	008597c0 	call	8597c <__mulsi3>
   8bce0:	94400017 	ldw	r17,0(r18)
   8bce4:	8020d43a 	srli	r16,r16,16
   8bce8:	88ffffcc 	andi	r3,r17,65535
   8bcec:	10c5883a 	add	r2,r2,r3
   8bcf0:	80a7883a 	add	r19,r16,r2
   8bcf4:	982cd43a 	srli	r22,r19,16
   8bcf8:	a73feb36 	bltu	r20,fp,8bca8 <__multiply+0x168>
   8bcfc:	94c00015 	stw	r19,0(r18)
   8bd00:	d8800217 	ldw	r2,8(sp)
   8bd04:	bdc00104 	addi	r23,r23,4
   8bd08:	b880042e 	bgeu	r23,r2,8bd1c <__multiply+0x1dc>
   8bd0c:	d8c00117 	ldw	r3,4(sp)
   8bd10:	18c00104 	addi	r3,r3,4
   8bd14:	d8c00115 	stw	r3,4(sp)
   8bd18:	003fbe06 	br	8bc14 <__multiply+0xd4>
   8bd1c:	d9000417 	ldw	r4,16(sp)
   8bd20:	01000c0e 	bge	zero,r4,8bd54 <__multiply+0x214>
   8bd24:	d8c00317 	ldw	r3,12(sp)
   8bd28:	18bfff17 	ldw	r2,-4(r3)
   8bd2c:	18ffff04 	addi	r3,r3,-4
   8bd30:	10000326 	beq	r2,zero,8bd40 <__multiply+0x200>
   8bd34:	00000706 	br	8bd54 <__multiply+0x214>
   8bd38:	18800017 	ldw	r2,0(r3)
   8bd3c:	1000051e 	bne	r2,zero,8bd54 <__multiply+0x214>
   8bd40:	d9000417 	ldw	r4,16(sp)
   8bd44:	18ffff04 	addi	r3,r3,-4
   8bd48:	213fffc4 	addi	r4,r4,-1
   8bd4c:	d9000415 	stw	r4,16(sp)
   8bd50:	203ff91e 	bne	r4,zero,8bd38 <__multiply+0x1f8>
   8bd54:	d8800417 	ldw	r2,16(sp)
   8bd58:	d8c00517 	ldw	r3,20(sp)
   8bd5c:	18800415 	stw	r2,16(r3)
   8bd60:	1805883a 	mov	r2,r3
   8bd64:	dfc00f17 	ldw	ra,60(sp)
   8bd68:	df000e17 	ldw	fp,56(sp)
   8bd6c:	ddc00d17 	ldw	r23,52(sp)
   8bd70:	dd800c17 	ldw	r22,48(sp)
   8bd74:	dd400b17 	ldw	r21,44(sp)
   8bd78:	dd000a17 	ldw	r20,40(sp)
   8bd7c:	dcc00917 	ldw	r19,36(sp)
   8bd80:	dc800817 	ldw	r18,32(sp)
   8bd84:	dc400717 	ldw	r17,28(sp)
   8bd88:	dc000617 	ldw	r16,24(sp)
   8bd8c:	dec01004 	addi	sp,sp,64
   8bd90:	f800283a 	ret

0008bd94 <__i2b>:
   8bd94:	defffd04 	addi	sp,sp,-12
   8bd98:	dc000015 	stw	r16,0(sp)
   8bd9c:	04000044 	movi	r16,1
   8bda0:	dc800115 	stw	r18,4(sp)
   8bda4:	2825883a 	mov	r18,r5
   8bda8:	800b883a 	mov	r5,r16
   8bdac:	dfc00215 	stw	ra,8(sp)
   8bdb0:	008b6300 	call	8b630 <_Balloc>
   8bdb4:	14000415 	stw	r16,16(r2)
   8bdb8:	14800515 	stw	r18,20(r2)
   8bdbc:	dfc00217 	ldw	ra,8(sp)
   8bdc0:	dc800117 	ldw	r18,4(sp)
   8bdc4:	dc000017 	ldw	r16,0(sp)
   8bdc8:	dec00304 	addi	sp,sp,12
   8bdcc:	f800283a 	ret

0008bdd0 <__multadd>:
   8bdd0:	defff604 	addi	sp,sp,-40
   8bdd4:	dd800615 	stw	r22,24(sp)
   8bdd8:	2d800417 	ldw	r22,16(r5)
   8bddc:	df000815 	stw	fp,32(sp)
   8bde0:	ddc00715 	stw	r23,28(sp)
   8bde4:	dd400515 	stw	r21,20(sp)
   8bde8:	dd000415 	stw	r20,16(sp)
   8bdec:	dcc00315 	stw	r19,12(sp)
   8bdf0:	dc800215 	stw	r18,8(sp)
   8bdf4:	dfc00915 	stw	ra,36(sp)
   8bdf8:	dc400115 	stw	r17,4(sp)
   8bdfc:	dc000015 	stw	r16,0(sp)
   8be00:	282f883a 	mov	r23,r5
   8be04:	2039883a 	mov	fp,r4
   8be08:	302b883a 	mov	r21,r6
   8be0c:	3829883a 	mov	r20,r7
   8be10:	2c800504 	addi	r18,r5,20
   8be14:	0027883a 	mov	r19,zero
   8be18:	94400017 	ldw	r17,0(r18)
   8be1c:	a80b883a 	mov	r5,r21
   8be20:	9cc00044 	addi	r19,r19,1
   8be24:	893fffcc 	andi	r4,r17,65535
   8be28:	008597c0 	call	8597c <__mulsi3>
   8be2c:	8808d43a 	srli	r4,r17,16
   8be30:	1521883a 	add	r16,r2,r20
   8be34:	a80b883a 	mov	r5,r21
   8be38:	008597c0 	call	8597c <__mulsi3>
   8be3c:	8008d43a 	srli	r4,r16,16
   8be40:	843fffcc 	andi	r16,r16,65535
   8be44:	1105883a 	add	r2,r2,r4
   8be48:	1006943a 	slli	r3,r2,16
   8be4c:	1028d43a 	srli	r20,r2,16
   8be50:	1c07883a 	add	r3,r3,r16
   8be54:	90c00015 	stw	r3,0(r18)
   8be58:	94800104 	addi	r18,r18,4
   8be5c:	9dbfee16 	blt	r19,r22,8be18 <__multadd+0x48>
   8be60:	a0000826 	beq	r20,zero,8be84 <__multadd+0xb4>
   8be64:	b8800217 	ldw	r2,8(r23)
   8be68:	b080130e 	bge	r22,r2,8beb8 <__multadd+0xe8>
   8be6c:	b585883a 	add	r2,r22,r22
   8be70:	1085883a 	add	r2,r2,r2
   8be74:	15c5883a 	add	r2,r2,r23
   8be78:	b0c00044 	addi	r3,r22,1
   8be7c:	15000515 	stw	r20,20(r2)
   8be80:	b8c00415 	stw	r3,16(r23)
   8be84:	b805883a 	mov	r2,r23
   8be88:	dfc00917 	ldw	ra,36(sp)
   8be8c:	df000817 	ldw	fp,32(sp)
   8be90:	ddc00717 	ldw	r23,28(sp)
   8be94:	dd800617 	ldw	r22,24(sp)
   8be98:	dd400517 	ldw	r21,20(sp)
   8be9c:	dd000417 	ldw	r20,16(sp)
   8bea0:	dcc00317 	ldw	r19,12(sp)
   8bea4:	dc800217 	ldw	r18,8(sp)
   8bea8:	dc400117 	ldw	r17,4(sp)
   8beac:	dc000017 	ldw	r16,0(sp)
   8beb0:	dec00a04 	addi	sp,sp,40
   8beb4:	f800283a 	ret
   8beb8:	b9400117 	ldw	r5,4(r23)
   8bebc:	e009883a 	mov	r4,fp
   8bec0:	29400044 	addi	r5,r5,1
   8bec4:	008b6300 	call	8b630 <_Balloc>
   8bec8:	b9800417 	ldw	r6,16(r23)
   8becc:	b9400304 	addi	r5,r23,12
   8bed0:	11000304 	addi	r4,r2,12
   8bed4:	318d883a 	add	r6,r6,r6
   8bed8:	318d883a 	add	r6,r6,r6
   8bedc:	31800204 	addi	r6,r6,8
   8bee0:	1023883a 	mov	r17,r2
   8bee4:	008ae980 	call	8ae98 <memcpy>
   8bee8:	b80b883a 	mov	r5,r23
   8beec:	e009883a 	mov	r4,fp
   8bef0:	008b0b00 	call	8b0b0 <_Bfree>
   8bef4:	882f883a 	mov	r23,r17
   8bef8:	003fdc06 	br	8be6c <__multadd+0x9c>

0008befc <__pow5mult>:
   8befc:	defffa04 	addi	sp,sp,-24
   8bf00:	308000cc 	andi	r2,r6,3
   8bf04:	dd000415 	stw	r20,16(sp)
   8bf08:	dcc00315 	stw	r19,12(sp)
   8bf0c:	dc000015 	stw	r16,0(sp)
   8bf10:	dfc00515 	stw	ra,20(sp)
   8bf14:	dc800215 	stw	r18,8(sp)
   8bf18:	dc400115 	stw	r17,4(sp)
   8bf1c:	3021883a 	mov	r16,r6
   8bf20:	2027883a 	mov	r19,r4
   8bf24:	2829883a 	mov	r20,r5
   8bf28:	10002b1e 	bne	r2,zero,8bfd8 <__pow5mult+0xdc>
   8bf2c:	8025d0ba 	srai	r18,r16,2
   8bf30:	90001b26 	beq	r18,zero,8bfa0 <__pow5mult+0xa4>
   8bf34:	9c001217 	ldw	r16,72(r19)
   8bf38:	8000081e 	bne	r16,zero,8bf5c <__pow5mult+0x60>
   8bf3c:	00003006 	br	8c000 <__pow5mult+0x104>
   8bf40:	800b883a 	mov	r5,r16
   8bf44:	800d883a 	mov	r6,r16
   8bf48:	9809883a 	mov	r4,r19
   8bf4c:	90001426 	beq	r18,zero,8bfa0 <__pow5mult+0xa4>
   8bf50:	80800017 	ldw	r2,0(r16)
   8bf54:	10001b26 	beq	r2,zero,8bfc4 <__pow5mult+0xc8>
   8bf58:	1021883a 	mov	r16,r2
   8bf5c:	9080004c 	andi	r2,r18,1
   8bf60:	1005003a 	cmpeq	r2,r2,zero
   8bf64:	9025d07a 	srai	r18,r18,1
   8bf68:	800d883a 	mov	r6,r16
   8bf6c:	9809883a 	mov	r4,r19
   8bf70:	a00b883a 	mov	r5,r20
   8bf74:	103ff21e 	bne	r2,zero,8bf40 <__pow5mult+0x44>
   8bf78:	008bb400 	call	8bb40 <__multiply>
   8bf7c:	a00b883a 	mov	r5,r20
   8bf80:	9809883a 	mov	r4,r19
   8bf84:	1023883a 	mov	r17,r2
   8bf88:	008b0b00 	call	8b0b0 <_Bfree>
   8bf8c:	8829883a 	mov	r20,r17
   8bf90:	800b883a 	mov	r5,r16
   8bf94:	800d883a 	mov	r6,r16
   8bf98:	9809883a 	mov	r4,r19
   8bf9c:	903fec1e 	bne	r18,zero,8bf50 <__pow5mult+0x54>
   8bfa0:	a005883a 	mov	r2,r20
   8bfa4:	dfc00517 	ldw	ra,20(sp)
   8bfa8:	dd000417 	ldw	r20,16(sp)
   8bfac:	dcc00317 	ldw	r19,12(sp)
   8bfb0:	dc800217 	ldw	r18,8(sp)
   8bfb4:	dc400117 	ldw	r17,4(sp)
   8bfb8:	dc000017 	ldw	r16,0(sp)
   8bfbc:	dec00604 	addi	sp,sp,24
   8bfc0:	f800283a 	ret
   8bfc4:	008bb400 	call	8bb40 <__multiply>
   8bfc8:	80800015 	stw	r2,0(r16)
   8bfcc:	1021883a 	mov	r16,r2
   8bfd0:	10000015 	stw	zero,0(r2)
   8bfd4:	003fe106 	br	8bf5c <__pow5mult+0x60>
   8bfd8:	1085883a 	add	r2,r2,r2
   8bfdc:	00c00274 	movhi	r3,9
   8bfe0:	18c95304 	addi	r3,r3,9548
   8bfe4:	1085883a 	add	r2,r2,r2
   8bfe8:	10c5883a 	add	r2,r2,r3
   8bfec:	11bfff17 	ldw	r6,-4(r2)
   8bff0:	000f883a 	mov	r7,zero
   8bff4:	008bdd00 	call	8bdd0 <__multadd>
   8bff8:	1029883a 	mov	r20,r2
   8bffc:	003fcb06 	br	8bf2c <__pow5mult+0x30>
   8c000:	9809883a 	mov	r4,r19
   8c004:	01409c44 	movi	r5,625
   8c008:	008bd940 	call	8bd94 <__i2b>
   8c00c:	98801215 	stw	r2,72(r19)
   8c010:	1021883a 	mov	r16,r2
   8c014:	10000015 	stw	zero,0(r2)
   8c018:	003fd006 	br	8bf5c <__pow5mult+0x60>

0008c01c <__s2b>:
   8c01c:	defff904 	addi	sp,sp,-28
   8c020:	dcc00315 	stw	r19,12(sp)
   8c024:	dc800215 	stw	r18,8(sp)
   8c028:	2827883a 	mov	r19,r5
   8c02c:	2025883a 	mov	r18,r4
   8c030:	01400244 	movi	r5,9
   8c034:	39000204 	addi	r4,r7,8
   8c038:	dd000415 	stw	r20,16(sp)
   8c03c:	dc400115 	stw	r17,4(sp)
   8c040:	dfc00615 	stw	ra,24(sp)
   8c044:	dd400515 	stw	r21,20(sp)
   8c048:	dc000015 	stw	r16,0(sp)
   8c04c:	3829883a 	mov	r20,r7
   8c050:	3023883a 	mov	r17,r6
   8c054:	00858ac0 	call	858ac <__divsi3>
   8c058:	00c00044 	movi	r3,1
   8c05c:	1880350e 	bge	r3,r2,8c134 <__s2b+0x118>
   8c060:	000b883a 	mov	r5,zero
   8c064:	18c7883a 	add	r3,r3,r3
   8c068:	29400044 	addi	r5,r5,1
   8c06c:	18bffd16 	blt	r3,r2,8c064 <__s2b+0x48>
   8c070:	9009883a 	mov	r4,r18
   8c074:	008b6300 	call	8b630 <_Balloc>
   8c078:	1011883a 	mov	r8,r2
   8c07c:	d8800717 	ldw	r2,28(sp)
   8c080:	00c00044 	movi	r3,1
   8c084:	01800244 	movi	r6,9
   8c088:	40800515 	stw	r2,20(r8)
   8c08c:	40c00415 	stw	r3,16(r8)
   8c090:	3440260e 	bge	r6,r17,8c12c <__s2b+0x110>
   8c094:	3021883a 	mov	r16,r6
   8c098:	99ab883a 	add	r21,r19,r6
   8c09c:	9c05883a 	add	r2,r19,r16
   8c0a0:	11c00007 	ldb	r7,0(r2)
   8c0a4:	400b883a 	mov	r5,r8
   8c0a8:	9009883a 	mov	r4,r18
   8c0ac:	39fff404 	addi	r7,r7,-48
   8c0b0:	01800284 	movi	r6,10
   8c0b4:	008bdd00 	call	8bdd0 <__multadd>
   8c0b8:	84000044 	addi	r16,r16,1
   8c0bc:	1011883a 	mov	r8,r2
   8c0c0:	8c3ff61e 	bne	r17,r16,8c09c <__s2b+0x80>
   8c0c4:	ac45883a 	add	r2,r21,r17
   8c0c8:	117ffe04 	addi	r5,r2,-8
   8c0cc:	880d883a 	mov	r6,r17
   8c0d0:	35000c0e 	bge	r6,r20,8c104 <__s2b+0xe8>
   8c0d4:	a185c83a 	sub	r2,r20,r6
   8c0d8:	2821883a 	mov	r16,r5
   8c0dc:	28a3883a 	add	r17,r5,r2
   8c0e0:	81c00007 	ldb	r7,0(r16)
   8c0e4:	400b883a 	mov	r5,r8
   8c0e8:	9009883a 	mov	r4,r18
   8c0ec:	39fff404 	addi	r7,r7,-48
   8c0f0:	01800284 	movi	r6,10
   8c0f4:	008bdd00 	call	8bdd0 <__multadd>
   8c0f8:	84000044 	addi	r16,r16,1
   8c0fc:	1011883a 	mov	r8,r2
   8c100:	847ff71e 	bne	r16,r17,8c0e0 <__s2b+0xc4>
   8c104:	4005883a 	mov	r2,r8
   8c108:	dfc00617 	ldw	ra,24(sp)
   8c10c:	dd400517 	ldw	r21,20(sp)
   8c110:	dd000417 	ldw	r20,16(sp)
   8c114:	dcc00317 	ldw	r19,12(sp)
   8c118:	dc800217 	ldw	r18,8(sp)
   8c11c:	dc400117 	ldw	r17,4(sp)
   8c120:	dc000017 	ldw	r16,0(sp)
   8c124:	dec00704 	addi	sp,sp,28
   8c128:	f800283a 	ret
   8c12c:	99400284 	addi	r5,r19,10
   8c130:	003fe706 	br	8c0d0 <__s2b+0xb4>
   8c134:	000b883a 	mov	r5,zero
   8c138:	003fcd06 	br	8c070 <__s2b+0x54>

0008c13c <_realloc_r>:
   8c13c:	defff404 	addi	sp,sp,-48
   8c140:	dd800815 	stw	r22,32(sp)
   8c144:	dc800415 	stw	r18,16(sp)
   8c148:	dc400315 	stw	r17,12(sp)
   8c14c:	dfc00b15 	stw	ra,44(sp)
   8c150:	df000a15 	stw	fp,40(sp)
   8c154:	ddc00915 	stw	r23,36(sp)
   8c158:	dd400715 	stw	r21,28(sp)
   8c15c:	dd000615 	stw	r20,24(sp)
   8c160:	dcc00515 	stw	r19,20(sp)
   8c164:	dc000215 	stw	r16,8(sp)
   8c168:	2825883a 	mov	r18,r5
   8c16c:	3023883a 	mov	r17,r6
   8c170:	202d883a 	mov	r22,r4
   8c174:	2800c926 	beq	r5,zero,8c49c <_realloc_r+0x360>
   8c178:	008fd200 	call	8fd20 <__malloc_lock>
   8c17c:	943ffe04 	addi	r16,r18,-8
   8c180:	88c002c4 	addi	r3,r17,11
   8c184:	00800584 	movi	r2,22
   8c188:	82000117 	ldw	r8,4(r16)
   8c18c:	10c01b2e 	bgeu	r2,r3,8c1fc <_realloc_r+0xc0>
   8c190:	00bffe04 	movi	r2,-8
   8c194:	188e703a 	and	r7,r3,r2
   8c198:	3839883a 	mov	fp,r7
   8c19c:	38001a16 	blt	r7,zero,8c208 <_realloc_r+0xcc>
   8c1a0:	e4401936 	bltu	fp,r17,8c208 <_realloc_r+0xcc>
   8c1a4:	013fff04 	movi	r4,-4
   8c1a8:	4126703a 	and	r19,r8,r4
   8c1ac:	99c02616 	blt	r19,r7,8c248 <_realloc_r+0x10c>
   8c1b0:	802b883a 	mov	r21,r16
   8c1b4:	9829883a 	mov	r20,r19
   8c1b8:	84000204 	addi	r16,r16,8
   8c1bc:	a80f883a 	mov	r7,r21
   8c1c0:	a70dc83a 	sub	r6,r20,fp
   8c1c4:	008003c4 	movi	r2,15
   8c1c8:	1180c136 	bltu	r2,r6,8c4d0 <_realloc_r+0x394>
   8c1cc:	38800117 	ldw	r2,4(r7)
   8c1d0:	a549883a 	add	r4,r20,r21
   8c1d4:	1080004c 	andi	r2,r2,1
   8c1d8:	a084b03a 	or	r2,r20,r2
   8c1dc:	38800115 	stw	r2,4(r7)
   8c1e0:	20c00117 	ldw	r3,4(r4)
   8c1e4:	18c00054 	ori	r3,r3,1
   8c1e8:	20c00115 	stw	r3,4(r4)
   8c1ec:	b009883a 	mov	r4,r22
   8c1f0:	008fd400 	call	8fd40 <__malloc_unlock>
   8c1f4:	8023883a 	mov	r17,r16
   8c1f8:	00000606 	br	8c214 <_realloc_r+0xd8>
   8c1fc:	01c00404 	movi	r7,16
   8c200:	3839883a 	mov	fp,r7
   8c204:	e47fe72e 	bgeu	fp,r17,8c1a4 <_realloc_r+0x68>
   8c208:	00800304 	movi	r2,12
   8c20c:	0023883a 	mov	r17,zero
   8c210:	b0800015 	stw	r2,0(r22)
   8c214:	8805883a 	mov	r2,r17
   8c218:	dfc00b17 	ldw	ra,44(sp)
   8c21c:	df000a17 	ldw	fp,40(sp)
   8c220:	ddc00917 	ldw	r23,36(sp)
   8c224:	dd800817 	ldw	r22,32(sp)
   8c228:	dd400717 	ldw	r21,28(sp)
   8c22c:	dd000617 	ldw	r20,24(sp)
   8c230:	dcc00517 	ldw	r19,20(sp)
   8c234:	dc800417 	ldw	r18,16(sp)
   8c238:	dc400317 	ldw	r17,12(sp)
   8c23c:	dc000217 	ldw	r16,8(sp)
   8c240:	dec00c04 	addi	sp,sp,48
   8c244:	f800283a 	ret
   8c248:	00800274 	movhi	r2,9
   8c24c:	108aaf04 	addi	r2,r2,10940
   8c250:	12400217 	ldw	r9,8(r2)
   8c254:	84cd883a 	add	r6,r16,r19
   8c258:	802b883a 	mov	r21,r16
   8c25c:	3240b926 	beq	r6,r9,8c544 <_realloc_r+0x408>
   8c260:	31400117 	ldw	r5,4(r6)
   8c264:	00bfff84 	movi	r2,-2
   8c268:	2884703a 	and	r2,r5,r2
   8c26c:	1185883a 	add	r2,r2,r6
   8c270:	10c00117 	ldw	r3,4(r2)
   8c274:	18c0004c 	andi	r3,r3,1
   8c278:	1807003a 	cmpeq	r3,r3,zero
   8c27c:	1800a326 	beq	r3,zero,8c50c <_realloc_r+0x3d0>
   8c280:	2908703a 	and	r4,r5,r4
   8c284:	9929883a 	add	r20,r19,r4
   8c288:	a1c0a30e 	bge	r20,r7,8c518 <_realloc_r+0x3dc>
   8c28c:	4080004c 	andi	r2,r8,1
   8c290:	1000551e 	bne	r2,zero,8c3e8 <_realloc_r+0x2ac>
   8c294:	80800017 	ldw	r2,0(r16)
   8c298:	80afc83a 	sub	r23,r16,r2
   8c29c:	b8c00117 	ldw	r3,4(r23)
   8c2a0:	00bfff04 	movi	r2,-4
   8c2a4:	1884703a 	and	r2,r3,r2
   8c2a8:	30002e26 	beq	r6,zero,8c364 <_realloc_r+0x228>
   8c2ac:	3240b926 	beq	r6,r9,8c594 <_realloc_r+0x458>
   8c2b0:	98a9883a 	add	r20,r19,r2
   8c2b4:	2509883a 	add	r4,r4,r20
   8c2b8:	d9000015 	stw	r4,0(sp)
   8c2bc:	21c02a16 	blt	r4,r7,8c368 <_realloc_r+0x22c>
   8c2c0:	30800317 	ldw	r2,12(r6)
   8c2c4:	30c00217 	ldw	r3,8(r6)
   8c2c8:	01400904 	movi	r5,36
   8c2cc:	99bfff04 	addi	r6,r19,-4
   8c2d0:	18800315 	stw	r2,12(r3)
   8c2d4:	10c00215 	stw	r3,8(r2)
   8c2d8:	b9000317 	ldw	r4,12(r23)
   8c2dc:	b8800217 	ldw	r2,8(r23)
   8c2e0:	b82b883a 	mov	r21,r23
   8c2e4:	bc000204 	addi	r16,r23,8
   8c2e8:	20800215 	stw	r2,8(r4)
   8c2ec:	11000315 	stw	r4,12(r2)
   8c2f0:	2980e436 	bltu	r5,r6,8c684 <_realloc_r+0x548>
   8c2f4:	008004c4 	movi	r2,19
   8c2f8:	9009883a 	mov	r4,r18
   8c2fc:	8011883a 	mov	r8,r16
   8c300:	11800f2e 	bgeu	r2,r6,8c340 <_realloc_r+0x204>
   8c304:	90800017 	ldw	r2,0(r18)
   8c308:	ba000404 	addi	r8,r23,16
   8c30c:	91000204 	addi	r4,r18,8
   8c310:	b8800215 	stw	r2,8(r23)
   8c314:	90c00117 	ldw	r3,4(r18)
   8c318:	008006c4 	movi	r2,27
   8c31c:	b8c00315 	stw	r3,12(r23)
   8c320:	1180072e 	bgeu	r2,r6,8c340 <_realloc_r+0x204>
   8c324:	90c00217 	ldw	r3,8(r18)
   8c328:	ba000604 	addi	r8,r23,24
   8c32c:	91000404 	addi	r4,r18,16
   8c330:	b8c00415 	stw	r3,16(r23)
   8c334:	90800317 	ldw	r2,12(r18)
   8c338:	b8800515 	stw	r2,20(r23)
   8c33c:	3140e726 	beq	r6,r5,8c6dc <_realloc_r+0x5a0>
   8c340:	20800017 	ldw	r2,0(r4)
   8c344:	dd000017 	ldw	r20,0(sp)
   8c348:	b80f883a 	mov	r7,r23
   8c34c:	40800015 	stw	r2,0(r8)
   8c350:	20c00117 	ldw	r3,4(r4)
   8c354:	40c00115 	stw	r3,4(r8)
   8c358:	20800217 	ldw	r2,8(r4)
   8c35c:	40800215 	stw	r2,8(r8)
   8c360:	003f9706 	br	8c1c0 <_realloc_r+0x84>
   8c364:	98a9883a 	add	r20,r19,r2
   8c368:	a1c01f16 	blt	r20,r7,8c3e8 <_realloc_r+0x2ac>
   8c36c:	b8c00317 	ldw	r3,12(r23)
   8c370:	b8800217 	ldw	r2,8(r23)
   8c374:	99bfff04 	addi	r6,r19,-4
   8c378:	01400904 	movi	r5,36
   8c37c:	b82b883a 	mov	r21,r23
   8c380:	18800215 	stw	r2,8(r3)
   8c384:	10c00315 	stw	r3,12(r2)
   8c388:	bc000204 	addi	r16,r23,8
   8c38c:	2980c336 	bltu	r5,r6,8c69c <_realloc_r+0x560>
   8c390:	008004c4 	movi	r2,19
   8c394:	9009883a 	mov	r4,r18
   8c398:	8011883a 	mov	r8,r16
   8c39c:	11800f2e 	bgeu	r2,r6,8c3dc <_realloc_r+0x2a0>
   8c3a0:	90800017 	ldw	r2,0(r18)
   8c3a4:	ba000404 	addi	r8,r23,16
   8c3a8:	91000204 	addi	r4,r18,8
   8c3ac:	b8800215 	stw	r2,8(r23)
   8c3b0:	90c00117 	ldw	r3,4(r18)
   8c3b4:	008006c4 	movi	r2,27
   8c3b8:	b8c00315 	stw	r3,12(r23)
   8c3bc:	1180072e 	bgeu	r2,r6,8c3dc <_realloc_r+0x2a0>
   8c3c0:	90c00217 	ldw	r3,8(r18)
   8c3c4:	ba000604 	addi	r8,r23,24
   8c3c8:	91000404 	addi	r4,r18,16
   8c3cc:	b8c00415 	stw	r3,16(r23)
   8c3d0:	90800317 	ldw	r2,12(r18)
   8c3d4:	b8800515 	stw	r2,20(r23)
   8c3d8:	3140c726 	beq	r6,r5,8c6f8 <_realloc_r+0x5bc>
   8c3dc:	20800017 	ldw	r2,0(r4)
   8c3e0:	b80f883a 	mov	r7,r23
   8c3e4:	003fd906 	br	8c34c <_realloc_r+0x210>
   8c3e8:	880b883a 	mov	r5,r17
   8c3ec:	b009883a 	mov	r4,r22
   8c3f0:	008a6740 	call	8a674 <_malloc_r>
   8c3f4:	1023883a 	mov	r17,r2
   8c3f8:	10002526 	beq	r2,zero,8c490 <_realloc_r+0x354>
   8c3fc:	80800117 	ldw	r2,4(r16)
   8c400:	00ffff84 	movi	r3,-2
   8c404:	893ffe04 	addi	r4,r17,-8
   8c408:	10c4703a 	and	r2,r2,r3
   8c40c:	8085883a 	add	r2,r16,r2
   8c410:	20809526 	beq	r4,r2,8c668 <_realloc_r+0x52c>
   8c414:	99bfff04 	addi	r6,r19,-4
   8c418:	01c00904 	movi	r7,36
   8c41c:	39804536 	bltu	r7,r6,8c534 <_realloc_r+0x3f8>
   8c420:	008004c4 	movi	r2,19
   8c424:	9009883a 	mov	r4,r18
   8c428:	880b883a 	mov	r5,r17
   8c42c:	11800f2e 	bgeu	r2,r6,8c46c <_realloc_r+0x330>
   8c430:	90800017 	ldw	r2,0(r18)
   8c434:	89400204 	addi	r5,r17,8
   8c438:	91000204 	addi	r4,r18,8
   8c43c:	88800015 	stw	r2,0(r17)
   8c440:	90c00117 	ldw	r3,4(r18)
   8c444:	008006c4 	movi	r2,27
   8c448:	88c00115 	stw	r3,4(r17)
   8c44c:	1180072e 	bgeu	r2,r6,8c46c <_realloc_r+0x330>
   8c450:	90c00217 	ldw	r3,8(r18)
   8c454:	89400404 	addi	r5,r17,16
   8c458:	91000404 	addi	r4,r18,16
   8c45c:	88c00215 	stw	r3,8(r17)
   8c460:	90800317 	ldw	r2,12(r18)
   8c464:	88800315 	stw	r2,12(r17)
   8c468:	31c09126 	beq	r6,r7,8c6b0 <_realloc_r+0x574>
   8c46c:	20800017 	ldw	r2,0(r4)
   8c470:	28800015 	stw	r2,0(r5)
   8c474:	20c00117 	ldw	r3,4(r4)
   8c478:	28c00115 	stw	r3,4(r5)
   8c47c:	20800217 	ldw	r2,8(r4)
   8c480:	28800215 	stw	r2,8(r5)
   8c484:	900b883a 	mov	r5,r18
   8c488:	b009883a 	mov	r4,r22
   8c48c:	0089aec0 	call	89aec <_free_r>
   8c490:	b009883a 	mov	r4,r22
   8c494:	008fd400 	call	8fd40 <__malloc_unlock>
   8c498:	003f5e06 	br	8c214 <_realloc_r+0xd8>
   8c49c:	300b883a 	mov	r5,r6
   8c4a0:	dfc00b17 	ldw	ra,44(sp)
   8c4a4:	df000a17 	ldw	fp,40(sp)
   8c4a8:	ddc00917 	ldw	r23,36(sp)
   8c4ac:	dd800817 	ldw	r22,32(sp)
   8c4b0:	dd400717 	ldw	r21,28(sp)
   8c4b4:	dd000617 	ldw	r20,24(sp)
   8c4b8:	dcc00517 	ldw	r19,20(sp)
   8c4bc:	dc800417 	ldw	r18,16(sp)
   8c4c0:	dc400317 	ldw	r17,12(sp)
   8c4c4:	dc000217 	ldw	r16,8(sp)
   8c4c8:	dec00c04 	addi	sp,sp,48
   8c4cc:	008a6741 	jmpi	8a674 <_malloc_r>
   8c4d0:	38800117 	ldw	r2,4(r7)
   8c4d4:	e54b883a 	add	r5,fp,r21
   8c4d8:	31000054 	ori	r4,r6,1
   8c4dc:	1080004c 	andi	r2,r2,1
   8c4e0:	1704b03a 	or	r2,r2,fp
   8c4e4:	38800115 	stw	r2,4(r7)
   8c4e8:	29000115 	stw	r4,4(r5)
   8c4ec:	2987883a 	add	r3,r5,r6
   8c4f0:	18800117 	ldw	r2,4(r3)
   8c4f4:	29400204 	addi	r5,r5,8
   8c4f8:	b009883a 	mov	r4,r22
   8c4fc:	10800054 	ori	r2,r2,1
   8c500:	18800115 	stw	r2,4(r3)
   8c504:	0089aec0 	call	89aec <_free_r>
   8c508:	003f3806 	br	8c1ec <_realloc_r+0xb0>
   8c50c:	000d883a 	mov	r6,zero
   8c510:	0009883a 	mov	r4,zero
   8c514:	003f5d06 	br	8c28c <_realloc_r+0x150>
   8c518:	30c00217 	ldw	r3,8(r6)
   8c51c:	30800317 	ldw	r2,12(r6)
   8c520:	800f883a 	mov	r7,r16
   8c524:	84000204 	addi	r16,r16,8
   8c528:	10c00215 	stw	r3,8(r2)
   8c52c:	18800315 	stw	r2,12(r3)
   8c530:	003f2306 	br	8c1c0 <_realloc_r+0x84>
   8c534:	8809883a 	mov	r4,r17
   8c538:	900b883a 	mov	r5,r18
   8c53c:	008af380 	call	8af38 <memmove>
   8c540:	003fd006 	br	8c484 <_realloc_r+0x348>
   8c544:	30800117 	ldw	r2,4(r6)
   8c548:	e0c00404 	addi	r3,fp,16
   8c54c:	1108703a 	and	r4,r2,r4
   8c550:	9905883a 	add	r2,r19,r4
   8c554:	10ff4d16 	blt	r2,r3,8c28c <_realloc_r+0x150>
   8c558:	1705c83a 	sub	r2,r2,fp
   8c55c:	870b883a 	add	r5,r16,fp
   8c560:	10800054 	ori	r2,r2,1
   8c564:	28800115 	stw	r2,4(r5)
   8c568:	80c00117 	ldw	r3,4(r16)
   8c56c:	00800274 	movhi	r2,9
   8c570:	108aaf04 	addi	r2,r2,10940
   8c574:	b009883a 	mov	r4,r22
   8c578:	18c0004c 	andi	r3,r3,1
   8c57c:	e0c6b03a 	or	r3,fp,r3
   8c580:	11400215 	stw	r5,8(r2)
   8c584:	80c00115 	stw	r3,4(r16)
   8c588:	008fd400 	call	8fd40 <__malloc_unlock>
   8c58c:	84400204 	addi	r17,r16,8
   8c590:	003f2006 	br	8c214 <_realloc_r+0xd8>
   8c594:	98a9883a 	add	r20,r19,r2
   8c598:	2509883a 	add	r4,r4,r20
   8c59c:	e0800404 	addi	r2,fp,16
   8c5a0:	d9000115 	stw	r4,4(sp)
   8c5a4:	20bf7016 	blt	r4,r2,8c368 <_realloc_r+0x22c>
   8c5a8:	b8c00317 	ldw	r3,12(r23)
   8c5ac:	b8800217 	ldw	r2,8(r23)
   8c5b0:	99bfff04 	addi	r6,r19,-4
   8c5b4:	01400904 	movi	r5,36
   8c5b8:	18800215 	stw	r2,8(r3)
   8c5bc:	10c00315 	stw	r3,12(r2)
   8c5c0:	bc400204 	addi	r17,r23,8
   8c5c4:	29804136 	bltu	r5,r6,8c6cc <_realloc_r+0x590>
   8c5c8:	008004c4 	movi	r2,19
   8c5cc:	9009883a 	mov	r4,r18
   8c5d0:	880f883a 	mov	r7,r17
   8c5d4:	11800f2e 	bgeu	r2,r6,8c614 <_realloc_r+0x4d8>
   8c5d8:	90800017 	ldw	r2,0(r18)
   8c5dc:	b9c00404 	addi	r7,r23,16
   8c5e0:	91000204 	addi	r4,r18,8
   8c5e4:	b8800215 	stw	r2,8(r23)
   8c5e8:	90c00117 	ldw	r3,4(r18)
   8c5ec:	008006c4 	movi	r2,27
   8c5f0:	b8c00315 	stw	r3,12(r23)
   8c5f4:	1180072e 	bgeu	r2,r6,8c614 <_realloc_r+0x4d8>
   8c5f8:	90c00217 	ldw	r3,8(r18)
   8c5fc:	b9c00604 	addi	r7,r23,24
   8c600:	91000404 	addi	r4,r18,16
   8c604:	b8c00415 	stw	r3,16(r23)
   8c608:	90800317 	ldw	r2,12(r18)
   8c60c:	b8800515 	stw	r2,20(r23)
   8c610:	31404026 	beq	r6,r5,8c714 <_realloc_r+0x5d8>
   8c614:	20800017 	ldw	r2,0(r4)
   8c618:	38800015 	stw	r2,0(r7)
   8c61c:	20c00117 	ldw	r3,4(r4)
   8c620:	38c00115 	stw	r3,4(r7)
   8c624:	20800217 	ldw	r2,8(r4)
   8c628:	38800215 	stw	r2,8(r7)
   8c62c:	d8c00117 	ldw	r3,4(sp)
   8c630:	bf0b883a 	add	r5,r23,fp
   8c634:	b009883a 	mov	r4,r22
   8c638:	1f05c83a 	sub	r2,r3,fp
   8c63c:	10800054 	ori	r2,r2,1
   8c640:	28800115 	stw	r2,4(r5)
   8c644:	b8c00117 	ldw	r3,4(r23)
   8c648:	00800274 	movhi	r2,9
   8c64c:	108aaf04 	addi	r2,r2,10940
   8c650:	11400215 	stw	r5,8(r2)
   8c654:	18c0004c 	andi	r3,r3,1
   8c658:	e0c6b03a 	or	r3,fp,r3
   8c65c:	b8c00115 	stw	r3,4(r23)
   8c660:	008fd400 	call	8fd40 <__malloc_unlock>
   8c664:	003eeb06 	br	8c214 <_realloc_r+0xd8>
   8c668:	20800117 	ldw	r2,4(r4)
   8c66c:	00ffff04 	movi	r3,-4
   8c670:	800f883a 	mov	r7,r16
   8c674:	10c4703a 	and	r2,r2,r3
   8c678:	98a9883a 	add	r20,r19,r2
   8c67c:	84000204 	addi	r16,r16,8
   8c680:	003ecf06 	br	8c1c0 <_realloc_r+0x84>
   8c684:	900b883a 	mov	r5,r18
   8c688:	8009883a 	mov	r4,r16
   8c68c:	008af380 	call	8af38 <memmove>
   8c690:	dd000017 	ldw	r20,0(sp)
   8c694:	b80f883a 	mov	r7,r23
   8c698:	003ec906 	br	8c1c0 <_realloc_r+0x84>
   8c69c:	900b883a 	mov	r5,r18
   8c6a0:	8009883a 	mov	r4,r16
   8c6a4:	008af380 	call	8af38 <memmove>
   8c6a8:	b80f883a 	mov	r7,r23
   8c6ac:	003ec406 	br	8c1c0 <_realloc_r+0x84>
   8c6b0:	90c00417 	ldw	r3,16(r18)
   8c6b4:	89400604 	addi	r5,r17,24
   8c6b8:	91000604 	addi	r4,r18,24
   8c6bc:	88c00415 	stw	r3,16(r17)
   8c6c0:	90800517 	ldw	r2,20(r18)
   8c6c4:	88800515 	stw	r2,20(r17)
   8c6c8:	003f6806 	br	8c46c <_realloc_r+0x330>
   8c6cc:	900b883a 	mov	r5,r18
   8c6d0:	8809883a 	mov	r4,r17
   8c6d4:	008af380 	call	8af38 <memmove>
   8c6d8:	003fd406 	br	8c62c <_realloc_r+0x4f0>
   8c6dc:	90c00417 	ldw	r3,16(r18)
   8c6e0:	91000604 	addi	r4,r18,24
   8c6e4:	ba000804 	addi	r8,r23,32
   8c6e8:	b8c00615 	stw	r3,24(r23)
   8c6ec:	90800517 	ldw	r2,20(r18)
   8c6f0:	b8800715 	stw	r2,28(r23)
   8c6f4:	003f1206 	br	8c340 <_realloc_r+0x204>
   8c6f8:	90c00417 	ldw	r3,16(r18)
   8c6fc:	91000604 	addi	r4,r18,24
   8c700:	ba000804 	addi	r8,r23,32
   8c704:	b8c00615 	stw	r3,24(r23)
   8c708:	90800517 	ldw	r2,20(r18)
   8c70c:	b8800715 	stw	r2,28(r23)
   8c710:	003f3206 	br	8c3dc <_realloc_r+0x2a0>
   8c714:	90c00417 	ldw	r3,16(r18)
   8c718:	91000604 	addi	r4,r18,24
   8c71c:	b9c00804 	addi	r7,r23,32
   8c720:	b8c00615 	stw	r3,24(r23)
   8c724:	90800517 	ldw	r2,20(r18)
   8c728:	b8800715 	stw	r2,28(r23)
   8c72c:	003fb906 	br	8c614 <_realloc_r+0x4d8>

0008c730 <__isinfd>:
   8c730:	200d883a 	mov	r6,r4
   8c734:	0109c83a 	sub	r4,zero,r4
   8c738:	2188b03a 	or	r4,r4,r6
   8c73c:	2008d7fa 	srli	r4,r4,31
   8c740:	00a00034 	movhi	r2,32768
   8c744:	10bfffc4 	addi	r2,r2,-1
   8c748:	1144703a 	and	r2,r2,r5
   8c74c:	2088b03a 	or	r4,r4,r2
   8c750:	009ffc34 	movhi	r2,32752
   8c754:	1105c83a 	sub	r2,r2,r4
   8c758:	0087c83a 	sub	r3,zero,r2
   8c75c:	10c4b03a 	or	r2,r2,r3
   8c760:	1004d7fa 	srli	r2,r2,31
   8c764:	00c00044 	movi	r3,1
   8c768:	1885c83a 	sub	r2,r3,r2
   8c76c:	f800283a 	ret

0008c770 <__isnand>:
   8c770:	200d883a 	mov	r6,r4
   8c774:	0109c83a 	sub	r4,zero,r4
   8c778:	2188b03a 	or	r4,r4,r6
   8c77c:	2008d7fa 	srli	r4,r4,31
   8c780:	00a00034 	movhi	r2,32768
   8c784:	10bfffc4 	addi	r2,r2,-1
   8c788:	1144703a 	and	r2,r2,r5
   8c78c:	2088b03a 	or	r4,r4,r2
   8c790:	009ffc34 	movhi	r2,32752
   8c794:	1105c83a 	sub	r2,r2,r4
   8c798:	1004d7fa 	srli	r2,r2,31
   8c79c:	f800283a 	ret

0008c7a0 <_sbrk_r>:
   8c7a0:	defffd04 	addi	sp,sp,-12
   8c7a4:	dc000015 	stw	r16,0(sp)
   8c7a8:	04000274 	movhi	r16,9
   8c7ac:	84170a04 	addi	r16,r16,23592
   8c7b0:	dc400115 	stw	r17,4(sp)
   8c7b4:	80000015 	stw	zero,0(r16)
   8c7b8:	2023883a 	mov	r17,r4
   8c7bc:	2809883a 	mov	r4,r5
   8c7c0:	dfc00215 	stw	ra,8(sp)
   8c7c4:	008ff5c0 	call	8ff5c <sbrk>
   8c7c8:	1007883a 	mov	r3,r2
   8c7cc:	00bfffc4 	movi	r2,-1
   8c7d0:	18800626 	beq	r3,r2,8c7ec <_sbrk_r+0x4c>
   8c7d4:	1805883a 	mov	r2,r3
   8c7d8:	dfc00217 	ldw	ra,8(sp)
   8c7dc:	dc400117 	ldw	r17,4(sp)
   8c7e0:	dc000017 	ldw	r16,0(sp)
   8c7e4:	dec00304 	addi	sp,sp,12
   8c7e8:	f800283a 	ret
   8c7ec:	80800017 	ldw	r2,0(r16)
   8c7f0:	103ff826 	beq	r2,zero,8c7d4 <_sbrk_r+0x34>
   8c7f4:	88800015 	stw	r2,0(r17)
   8c7f8:	1805883a 	mov	r2,r3
   8c7fc:	dfc00217 	ldw	ra,8(sp)
   8c800:	dc400117 	ldw	r17,4(sp)
   8c804:	dc000017 	ldw	r16,0(sp)
   8c808:	dec00304 	addi	sp,sp,12
   8c80c:	f800283a 	ret

0008c810 <__sclose>:
   8c810:	2940038f 	ldh	r5,14(r5)
   8c814:	008cb581 	jmpi	8cb58 <_close_r>

0008c818 <__sseek>:
   8c818:	defffe04 	addi	sp,sp,-8
   8c81c:	dc000015 	stw	r16,0(sp)
   8c820:	2821883a 	mov	r16,r5
   8c824:	2940038f 	ldh	r5,14(r5)
   8c828:	dfc00115 	stw	ra,4(sp)
   8c82c:	008cdd00 	call	8cdd0 <_lseek_r>
   8c830:	1007883a 	mov	r3,r2
   8c834:	00bfffc4 	movi	r2,-1
   8c838:	18800926 	beq	r3,r2,8c860 <__sseek+0x48>
   8c83c:	8080030b 	ldhu	r2,12(r16)
   8c840:	80c01415 	stw	r3,80(r16)
   8c844:	10840014 	ori	r2,r2,4096
   8c848:	8080030d 	sth	r2,12(r16)
   8c84c:	1805883a 	mov	r2,r3
   8c850:	dfc00117 	ldw	ra,4(sp)
   8c854:	dc000017 	ldw	r16,0(sp)
   8c858:	dec00204 	addi	sp,sp,8
   8c85c:	f800283a 	ret
   8c860:	8080030b 	ldhu	r2,12(r16)
   8c864:	10bbffcc 	andi	r2,r2,61439
   8c868:	8080030d 	sth	r2,12(r16)
   8c86c:	1805883a 	mov	r2,r3
   8c870:	dfc00117 	ldw	ra,4(sp)
   8c874:	dc000017 	ldw	r16,0(sp)
   8c878:	dec00204 	addi	sp,sp,8
   8c87c:	f800283a 	ret

0008c880 <__swrite>:
   8c880:	2880030b 	ldhu	r2,12(r5)
   8c884:	defffb04 	addi	sp,sp,-20
   8c888:	dcc00315 	stw	r19,12(sp)
   8c88c:	1080400c 	andi	r2,r2,256
   8c890:	dc800215 	stw	r18,8(sp)
   8c894:	dc400115 	stw	r17,4(sp)
   8c898:	dc000015 	stw	r16,0(sp)
   8c89c:	3027883a 	mov	r19,r6
   8c8a0:	3825883a 	mov	r18,r7
   8c8a4:	dfc00415 	stw	ra,16(sp)
   8c8a8:	2821883a 	mov	r16,r5
   8c8ac:	000d883a 	mov	r6,zero
   8c8b0:	01c00084 	movi	r7,2
   8c8b4:	2023883a 	mov	r17,r4
   8c8b8:	10000226 	beq	r2,zero,8c8c4 <__swrite+0x44>
   8c8bc:	2940038f 	ldh	r5,14(r5)
   8c8c0:	008cdd00 	call	8cdd0 <_lseek_r>
   8c8c4:	8080030b 	ldhu	r2,12(r16)
   8c8c8:	8140038f 	ldh	r5,14(r16)
   8c8cc:	8809883a 	mov	r4,r17
   8c8d0:	10bbffcc 	andi	r2,r2,61439
   8c8d4:	980d883a 	mov	r6,r19
   8c8d8:	900f883a 	mov	r7,r18
   8c8dc:	8080030d 	sth	r2,12(r16)
   8c8e0:	dfc00417 	ldw	ra,16(sp)
   8c8e4:	dcc00317 	ldw	r19,12(sp)
   8c8e8:	dc800217 	ldw	r18,8(sp)
   8c8ec:	dc400117 	ldw	r17,4(sp)
   8c8f0:	dc000017 	ldw	r16,0(sp)
   8c8f4:	dec00504 	addi	sp,sp,20
   8c8f8:	008ca181 	jmpi	8ca18 <_write_r>

0008c8fc <__sread>:
   8c8fc:	defffe04 	addi	sp,sp,-8
   8c900:	dc000015 	stw	r16,0(sp)
   8c904:	2821883a 	mov	r16,r5
   8c908:	2940038f 	ldh	r5,14(r5)
   8c90c:	dfc00115 	stw	ra,4(sp)
   8c910:	008ce480 	call	8ce48 <_read_r>
   8c914:	1007883a 	mov	r3,r2
   8c918:	10000816 	blt	r2,zero,8c93c <__sread+0x40>
   8c91c:	80801417 	ldw	r2,80(r16)
   8c920:	10c5883a 	add	r2,r2,r3
   8c924:	80801415 	stw	r2,80(r16)
   8c928:	1805883a 	mov	r2,r3
   8c92c:	dfc00117 	ldw	ra,4(sp)
   8c930:	dc000017 	ldw	r16,0(sp)
   8c934:	dec00204 	addi	sp,sp,8
   8c938:	f800283a 	ret
   8c93c:	8080030b 	ldhu	r2,12(r16)
   8c940:	10bbffcc 	andi	r2,r2,61439
   8c944:	8080030d 	sth	r2,12(r16)
   8c948:	1805883a 	mov	r2,r3
   8c94c:	dfc00117 	ldw	ra,4(sp)
   8c950:	dc000017 	ldw	r16,0(sp)
   8c954:	dec00204 	addi	sp,sp,8
   8c958:	f800283a 	ret

0008c95c <strcmp>:
   8c95c:	2144b03a 	or	r2,r4,r5
   8c960:	108000cc 	andi	r2,r2,3
   8c964:	10001d1e 	bne	r2,zero,8c9dc <strcmp+0x80>
   8c968:	200f883a 	mov	r7,r4
   8c96c:	28800017 	ldw	r2,0(r5)
   8c970:	21000017 	ldw	r4,0(r4)
   8c974:	280d883a 	mov	r6,r5
   8c978:	2080161e 	bne	r4,r2,8c9d4 <strcmp+0x78>
   8c97c:	023fbff4 	movhi	r8,65279
   8c980:	423fbfc4 	addi	r8,r8,-257
   8c984:	2207883a 	add	r3,r4,r8
   8c988:	01602074 	movhi	r5,32897
   8c98c:	29602004 	addi	r5,r5,-32640
   8c990:	1946703a 	and	r3,r3,r5
   8c994:	0104303a 	nor	r2,zero,r4
   8c998:	10c4703a 	and	r2,r2,r3
   8c99c:	10001c1e 	bne	r2,zero,8ca10 <strcmp+0xb4>
   8c9a0:	4013883a 	mov	r9,r8
   8c9a4:	2811883a 	mov	r8,r5
   8c9a8:	00000106 	br	8c9b0 <strcmp+0x54>
   8c9ac:	1800181e 	bne	r3,zero,8ca10 <strcmp+0xb4>
   8c9b0:	39c00104 	addi	r7,r7,4
   8c9b4:	39000017 	ldw	r4,0(r7)
   8c9b8:	31800104 	addi	r6,r6,4
   8c9bc:	31400017 	ldw	r5,0(r6)
   8c9c0:	2245883a 	add	r2,r4,r9
   8c9c4:	1204703a 	and	r2,r2,r8
   8c9c8:	0106303a 	nor	r3,zero,r4
   8c9cc:	1886703a 	and	r3,r3,r2
   8c9d0:	217ff626 	beq	r4,r5,8c9ac <strcmp+0x50>
   8c9d4:	3809883a 	mov	r4,r7
   8c9d8:	300b883a 	mov	r5,r6
   8c9dc:	20c00007 	ldb	r3,0(r4)
   8c9e0:	1800051e 	bne	r3,zero,8c9f8 <strcmp+0x9c>
   8c9e4:	00000606 	br	8ca00 <strcmp+0xa4>
   8c9e8:	21000044 	addi	r4,r4,1
   8c9ec:	20c00007 	ldb	r3,0(r4)
   8c9f0:	29400044 	addi	r5,r5,1
   8c9f4:	18000226 	beq	r3,zero,8ca00 <strcmp+0xa4>
   8c9f8:	28800007 	ldb	r2,0(r5)
   8c9fc:	18bffa26 	beq	r3,r2,8c9e8 <strcmp+0x8c>
   8ca00:	20c00003 	ldbu	r3,0(r4)
   8ca04:	28800003 	ldbu	r2,0(r5)
   8ca08:	1885c83a 	sub	r2,r3,r2
   8ca0c:	f800283a 	ret
   8ca10:	0005883a 	mov	r2,zero
   8ca14:	f800283a 	ret

0008ca18 <_write_r>:
   8ca18:	defffd04 	addi	sp,sp,-12
   8ca1c:	dc000015 	stw	r16,0(sp)
   8ca20:	04000274 	movhi	r16,9
   8ca24:	84170a04 	addi	r16,r16,23592
   8ca28:	dc400115 	stw	r17,4(sp)
   8ca2c:	80000015 	stw	zero,0(r16)
   8ca30:	2023883a 	mov	r17,r4
   8ca34:	2809883a 	mov	r4,r5
   8ca38:	300b883a 	mov	r5,r6
   8ca3c:	380d883a 	mov	r6,r7
   8ca40:	dfc00215 	stw	ra,8(sp)
   8ca44:	00900180 	call	90018 <write>
   8ca48:	1007883a 	mov	r3,r2
   8ca4c:	00bfffc4 	movi	r2,-1
   8ca50:	18800626 	beq	r3,r2,8ca6c <_write_r+0x54>
   8ca54:	1805883a 	mov	r2,r3
   8ca58:	dfc00217 	ldw	ra,8(sp)
   8ca5c:	dc400117 	ldw	r17,4(sp)
   8ca60:	dc000017 	ldw	r16,0(sp)
   8ca64:	dec00304 	addi	sp,sp,12
   8ca68:	f800283a 	ret
   8ca6c:	80800017 	ldw	r2,0(r16)
   8ca70:	103ff826 	beq	r2,zero,8ca54 <_write_r+0x3c>
   8ca74:	88800015 	stw	r2,0(r17)
   8ca78:	1805883a 	mov	r2,r3
   8ca7c:	dfc00217 	ldw	ra,8(sp)
   8ca80:	dc400117 	ldw	r17,4(sp)
   8ca84:	dc000017 	ldw	r16,0(sp)
   8ca88:	dec00304 	addi	sp,sp,12
   8ca8c:	f800283a 	ret

0008ca90 <_calloc_r>:
   8ca90:	defffe04 	addi	sp,sp,-8
   8ca94:	dc400015 	stw	r17,0(sp)
   8ca98:	2023883a 	mov	r17,r4
   8ca9c:	2809883a 	mov	r4,r5
   8caa0:	300b883a 	mov	r5,r6
   8caa4:	dfc00115 	stw	ra,4(sp)
   8caa8:	008597c0 	call	8597c <__mulsi3>
   8caac:	100b883a 	mov	r5,r2
   8cab0:	8809883a 	mov	r4,r17
   8cab4:	008a6740 	call	8a674 <_malloc_r>
   8cab8:	1023883a 	mov	r17,r2
   8cabc:	01c00904 	movi	r7,36
   8cac0:	10000d26 	beq	r2,zero,8caf8 <_calloc_r+0x68>
   8cac4:	10ffff17 	ldw	r3,-4(r2)
   8cac8:	1009883a 	mov	r4,r2
   8cacc:	00bfff04 	movi	r2,-4
   8cad0:	1886703a 	and	r3,r3,r2
   8cad4:	1887883a 	add	r3,r3,r2
   8cad8:	180d883a 	mov	r6,r3
   8cadc:	000b883a 	mov	r5,zero
   8cae0:	38c01736 	bltu	r7,r3,8cb40 <_calloc_r+0xb0>
   8cae4:	008004c4 	movi	r2,19
   8cae8:	10c00836 	bltu	r2,r3,8cb0c <_calloc_r+0x7c>
   8caec:	20000215 	stw	zero,8(r4)
   8caf0:	20000015 	stw	zero,0(r4)
   8caf4:	20000115 	stw	zero,4(r4)
   8caf8:	8805883a 	mov	r2,r17
   8cafc:	dfc00117 	ldw	ra,4(sp)
   8cb00:	dc400017 	ldw	r17,0(sp)
   8cb04:	dec00204 	addi	sp,sp,8
   8cb08:	f800283a 	ret
   8cb0c:	008006c4 	movi	r2,27
   8cb10:	88000015 	stw	zero,0(r17)
   8cb14:	88000115 	stw	zero,4(r17)
   8cb18:	89000204 	addi	r4,r17,8
   8cb1c:	10fff32e 	bgeu	r2,r3,8caec <_calloc_r+0x5c>
   8cb20:	88000215 	stw	zero,8(r17)
   8cb24:	88000315 	stw	zero,12(r17)
   8cb28:	89000404 	addi	r4,r17,16
   8cb2c:	19ffef1e 	bne	r3,r7,8caec <_calloc_r+0x5c>
   8cb30:	89000604 	addi	r4,r17,24
   8cb34:	88000415 	stw	zero,16(r17)
   8cb38:	88000515 	stw	zero,20(r17)
   8cb3c:	003feb06 	br	8caec <_calloc_r+0x5c>
   8cb40:	008b0180 	call	8b018 <memset>
   8cb44:	8805883a 	mov	r2,r17
   8cb48:	dfc00117 	ldw	ra,4(sp)
   8cb4c:	dc400017 	ldw	r17,0(sp)
   8cb50:	dec00204 	addi	sp,sp,8
   8cb54:	f800283a 	ret

0008cb58 <_close_r>:
   8cb58:	defffd04 	addi	sp,sp,-12
   8cb5c:	dc000015 	stw	r16,0(sp)
   8cb60:	04000274 	movhi	r16,9
   8cb64:	84170a04 	addi	r16,r16,23592
   8cb68:	dc400115 	stw	r17,4(sp)
   8cb6c:	80000015 	stw	zero,0(r16)
   8cb70:	2023883a 	mov	r17,r4
   8cb74:	2809883a 	mov	r4,r5
   8cb78:	dfc00215 	stw	ra,8(sp)
   8cb7c:	008f4cc0 	call	8f4cc <close>
   8cb80:	1007883a 	mov	r3,r2
   8cb84:	00bfffc4 	movi	r2,-1
   8cb88:	18800626 	beq	r3,r2,8cba4 <_close_r+0x4c>
   8cb8c:	1805883a 	mov	r2,r3
   8cb90:	dfc00217 	ldw	ra,8(sp)
   8cb94:	dc400117 	ldw	r17,4(sp)
   8cb98:	dc000017 	ldw	r16,0(sp)
   8cb9c:	dec00304 	addi	sp,sp,12
   8cba0:	f800283a 	ret
   8cba4:	80800017 	ldw	r2,0(r16)
   8cba8:	103ff826 	beq	r2,zero,8cb8c <_close_r+0x34>
   8cbac:	88800015 	stw	r2,0(r17)
   8cbb0:	1805883a 	mov	r2,r3
   8cbb4:	dfc00217 	ldw	ra,8(sp)
   8cbb8:	dc400117 	ldw	r17,4(sp)
   8cbbc:	dc000017 	ldw	r16,0(sp)
   8cbc0:	dec00304 	addi	sp,sp,12
   8cbc4:	f800283a 	ret

0008cbc8 <_fclose_r>:
   8cbc8:	defffc04 	addi	sp,sp,-16
   8cbcc:	dc400115 	stw	r17,4(sp)
   8cbd0:	dc000015 	stw	r16,0(sp)
   8cbd4:	dfc00315 	stw	ra,12(sp)
   8cbd8:	dc800215 	stw	r18,8(sp)
   8cbdc:	2821883a 	mov	r16,r5
   8cbe0:	2023883a 	mov	r17,r4
   8cbe4:	28002926 	beq	r5,zero,8cc8c <_fclose_r+0xc4>
   8cbe8:	00897240 	call	89724 <__sfp_lock_acquire>
   8cbec:	88000226 	beq	r17,zero,8cbf8 <_fclose_r+0x30>
   8cbf0:	88800e17 	ldw	r2,56(r17)
   8cbf4:	10002d26 	beq	r2,zero,8ccac <_fclose_r+0xe4>
   8cbf8:	8080030f 	ldh	r2,12(r16)
   8cbfc:	10002226 	beq	r2,zero,8cc88 <_fclose_r+0xc0>
   8cc00:	8809883a 	mov	r4,r17
   8cc04:	800b883a 	mov	r5,r16
   8cc08:	008949c0 	call	8949c <_fflush_r>
   8cc0c:	1025883a 	mov	r18,r2
   8cc10:	80800b17 	ldw	r2,44(r16)
   8cc14:	10000426 	beq	r2,zero,8cc28 <_fclose_r+0x60>
   8cc18:	81400717 	ldw	r5,28(r16)
   8cc1c:	8809883a 	mov	r4,r17
   8cc20:	103ee83a 	callr	r2
   8cc24:	10002a16 	blt	r2,zero,8ccd0 <_fclose_r+0x108>
   8cc28:	8080030b 	ldhu	r2,12(r16)
   8cc2c:	1080200c 	andi	r2,r2,128
   8cc30:	1000231e 	bne	r2,zero,8ccc0 <_fclose_r+0xf8>
   8cc34:	81400c17 	ldw	r5,48(r16)
   8cc38:	28000526 	beq	r5,zero,8cc50 <_fclose_r+0x88>
   8cc3c:	80801004 	addi	r2,r16,64
   8cc40:	28800226 	beq	r5,r2,8cc4c <_fclose_r+0x84>
   8cc44:	8809883a 	mov	r4,r17
   8cc48:	0089aec0 	call	89aec <_free_r>
   8cc4c:	80000c15 	stw	zero,48(r16)
   8cc50:	81401117 	ldw	r5,68(r16)
   8cc54:	28000326 	beq	r5,zero,8cc64 <_fclose_r+0x9c>
   8cc58:	8809883a 	mov	r4,r17
   8cc5c:	0089aec0 	call	89aec <_free_r>
   8cc60:	80001115 	stw	zero,68(r16)
   8cc64:	8000030d 	sth	zero,12(r16)
   8cc68:	00897280 	call	89728 <__sfp_lock_release>
   8cc6c:	9005883a 	mov	r2,r18
   8cc70:	dfc00317 	ldw	ra,12(sp)
   8cc74:	dc800217 	ldw	r18,8(sp)
   8cc78:	dc400117 	ldw	r17,4(sp)
   8cc7c:	dc000017 	ldw	r16,0(sp)
   8cc80:	dec00404 	addi	sp,sp,16
   8cc84:	f800283a 	ret
   8cc88:	00897280 	call	89728 <__sfp_lock_release>
   8cc8c:	0025883a 	mov	r18,zero
   8cc90:	9005883a 	mov	r2,r18
   8cc94:	dfc00317 	ldw	ra,12(sp)
   8cc98:	dc800217 	ldw	r18,8(sp)
   8cc9c:	dc400117 	ldw	r17,4(sp)
   8cca0:	dc000017 	ldw	r16,0(sp)
   8cca4:	dec00404 	addi	sp,sp,16
   8cca8:	f800283a 	ret
   8ccac:	8809883a 	mov	r4,r17
   8ccb0:	00897340 	call	89734 <__sinit>
   8ccb4:	8080030f 	ldh	r2,12(r16)
   8ccb8:	103fd11e 	bne	r2,zero,8cc00 <_fclose_r+0x38>
   8ccbc:	003ff206 	br	8cc88 <_fclose_r+0xc0>
   8ccc0:	81400417 	ldw	r5,16(r16)
   8ccc4:	8809883a 	mov	r4,r17
   8ccc8:	0089aec0 	call	89aec <_free_r>
   8cccc:	003fd906 	br	8cc34 <_fclose_r+0x6c>
   8ccd0:	04bfffc4 	movi	r18,-1
   8ccd4:	003fd406 	br	8cc28 <_fclose_r+0x60>

0008ccd8 <fclose>:
   8ccd8:	00800274 	movhi	r2,9
   8ccdc:	10904104 	addi	r2,r2,16644
   8cce0:	200b883a 	mov	r5,r4
   8cce4:	11000017 	ldw	r4,0(r2)
   8cce8:	008cbc81 	jmpi	8cbc8 <_fclose_r>

0008ccec <_fstat_r>:
   8ccec:	defffd04 	addi	sp,sp,-12
   8ccf0:	dc000015 	stw	r16,0(sp)
   8ccf4:	04000274 	movhi	r16,9
   8ccf8:	84170a04 	addi	r16,r16,23592
   8ccfc:	dc400115 	stw	r17,4(sp)
   8cd00:	80000015 	stw	zero,0(r16)
   8cd04:	2023883a 	mov	r17,r4
   8cd08:	2809883a 	mov	r4,r5
   8cd0c:	300b883a 	mov	r5,r6
   8cd10:	dfc00215 	stw	ra,8(sp)
   8cd14:	008f6580 	call	8f658 <fstat>
   8cd18:	1007883a 	mov	r3,r2
   8cd1c:	00bfffc4 	movi	r2,-1
   8cd20:	18800626 	beq	r3,r2,8cd3c <_fstat_r+0x50>
   8cd24:	1805883a 	mov	r2,r3
   8cd28:	dfc00217 	ldw	ra,8(sp)
   8cd2c:	dc400117 	ldw	r17,4(sp)
   8cd30:	dc000017 	ldw	r16,0(sp)
   8cd34:	dec00304 	addi	sp,sp,12
   8cd38:	f800283a 	ret
   8cd3c:	80800017 	ldw	r2,0(r16)
   8cd40:	103ff826 	beq	r2,zero,8cd24 <_fstat_r+0x38>
   8cd44:	88800015 	stw	r2,0(r17)
   8cd48:	1805883a 	mov	r2,r3
   8cd4c:	dfc00217 	ldw	ra,8(sp)
   8cd50:	dc400117 	ldw	r17,4(sp)
   8cd54:	dc000017 	ldw	r16,0(sp)
   8cd58:	dec00304 	addi	sp,sp,12
   8cd5c:	f800283a 	ret

0008cd60 <_isatty_r>:
   8cd60:	defffd04 	addi	sp,sp,-12
   8cd64:	dc000015 	stw	r16,0(sp)
   8cd68:	04000274 	movhi	r16,9
   8cd6c:	84170a04 	addi	r16,r16,23592
   8cd70:	dc400115 	stw	r17,4(sp)
   8cd74:	80000015 	stw	zero,0(r16)
   8cd78:	2023883a 	mov	r17,r4
   8cd7c:	2809883a 	mov	r4,r5
   8cd80:	dfc00215 	stw	ra,8(sp)
   8cd84:	008f9500 	call	8f950 <isatty>
   8cd88:	1007883a 	mov	r3,r2
   8cd8c:	00bfffc4 	movi	r2,-1
   8cd90:	18800626 	beq	r3,r2,8cdac <_isatty_r+0x4c>
   8cd94:	1805883a 	mov	r2,r3
   8cd98:	dfc00217 	ldw	ra,8(sp)
   8cd9c:	dc400117 	ldw	r17,4(sp)
   8cda0:	dc000017 	ldw	r16,0(sp)
   8cda4:	dec00304 	addi	sp,sp,12
   8cda8:	f800283a 	ret
   8cdac:	80800017 	ldw	r2,0(r16)
   8cdb0:	103ff826 	beq	r2,zero,8cd94 <_isatty_r+0x34>
   8cdb4:	88800015 	stw	r2,0(r17)
   8cdb8:	1805883a 	mov	r2,r3
   8cdbc:	dfc00217 	ldw	ra,8(sp)
   8cdc0:	dc400117 	ldw	r17,4(sp)
   8cdc4:	dc000017 	ldw	r16,0(sp)
   8cdc8:	dec00304 	addi	sp,sp,12
   8cdcc:	f800283a 	ret

0008cdd0 <_lseek_r>:
   8cdd0:	defffd04 	addi	sp,sp,-12
   8cdd4:	dc000015 	stw	r16,0(sp)
   8cdd8:	04000274 	movhi	r16,9
   8cddc:	84170a04 	addi	r16,r16,23592
   8cde0:	dc400115 	stw	r17,4(sp)
   8cde4:	80000015 	stw	zero,0(r16)
   8cde8:	2023883a 	mov	r17,r4
   8cdec:	2809883a 	mov	r4,r5
   8cdf0:	300b883a 	mov	r5,r6
   8cdf4:	380d883a 	mov	r6,r7
   8cdf8:	dfc00215 	stw	ra,8(sp)
   8cdfc:	008fb600 	call	8fb60 <lseek>
   8ce00:	1007883a 	mov	r3,r2
   8ce04:	00bfffc4 	movi	r2,-1
   8ce08:	18800626 	beq	r3,r2,8ce24 <_lseek_r+0x54>
   8ce0c:	1805883a 	mov	r2,r3
   8ce10:	dfc00217 	ldw	ra,8(sp)
   8ce14:	dc400117 	ldw	r17,4(sp)
   8ce18:	dc000017 	ldw	r16,0(sp)
   8ce1c:	dec00304 	addi	sp,sp,12
   8ce20:	f800283a 	ret
   8ce24:	80800017 	ldw	r2,0(r16)
   8ce28:	103ff826 	beq	r2,zero,8ce0c <_lseek_r+0x3c>
   8ce2c:	88800015 	stw	r2,0(r17)
   8ce30:	1805883a 	mov	r2,r3
   8ce34:	dfc00217 	ldw	ra,8(sp)
   8ce38:	dc400117 	ldw	r17,4(sp)
   8ce3c:	dc000017 	ldw	r16,0(sp)
   8ce40:	dec00304 	addi	sp,sp,12
   8ce44:	f800283a 	ret

0008ce48 <_read_r>:
   8ce48:	defffd04 	addi	sp,sp,-12
   8ce4c:	dc000015 	stw	r16,0(sp)
   8ce50:	04000274 	movhi	r16,9
   8ce54:	84170a04 	addi	r16,r16,23592
   8ce58:	dc400115 	stw	r17,4(sp)
   8ce5c:	80000015 	stw	zero,0(r16)
   8ce60:	2023883a 	mov	r17,r4
   8ce64:	2809883a 	mov	r4,r5
   8ce68:	300b883a 	mov	r5,r6
   8ce6c:	380d883a 	mov	r6,r7
   8ce70:	dfc00215 	stw	ra,8(sp)
   8ce74:	008fd600 	call	8fd60 <read>
   8ce78:	1007883a 	mov	r3,r2
   8ce7c:	00bfffc4 	movi	r2,-1
   8ce80:	18800626 	beq	r3,r2,8ce9c <_read_r+0x54>
   8ce84:	1805883a 	mov	r2,r3
   8ce88:	dfc00217 	ldw	ra,8(sp)
   8ce8c:	dc400117 	ldw	r17,4(sp)
   8ce90:	dc000017 	ldw	r16,0(sp)
   8ce94:	dec00304 	addi	sp,sp,12
   8ce98:	f800283a 	ret
   8ce9c:	80800017 	ldw	r2,0(r16)
   8cea0:	103ff826 	beq	r2,zero,8ce84 <_read_r+0x3c>
   8cea4:	88800015 	stw	r2,0(r17)
   8cea8:	1805883a 	mov	r2,r3
   8ceac:	dfc00217 	ldw	ra,8(sp)
   8ceb0:	dc400117 	ldw	r17,4(sp)
   8ceb4:	dc000017 	ldw	r16,0(sp)
   8ceb8:	dec00304 	addi	sp,sp,12
   8cebc:	f800283a 	ret

0008cec0 <__udivdi3>:
   8cec0:	defff104 	addi	sp,sp,-60
   8cec4:	0015883a 	mov	r10,zero
   8cec8:	2005883a 	mov	r2,r4
   8cecc:	3011883a 	mov	r8,r6
   8ced0:	df000d15 	stw	fp,52(sp)
   8ced4:	dd400a15 	stw	r21,40(sp)
   8ced8:	dcc00815 	stw	r19,32(sp)
   8cedc:	dfc00e15 	stw	ra,56(sp)
   8cee0:	ddc00c15 	stw	r23,48(sp)
   8cee4:	dd800b15 	stw	r22,44(sp)
   8cee8:	dd000915 	stw	r20,36(sp)
   8ceec:	dc800715 	stw	r18,28(sp)
   8cef0:	dc400615 	stw	r17,24(sp)
   8cef4:	dc000515 	stw	r16,20(sp)
   8cef8:	da800315 	stw	r10,12(sp)
   8cefc:	4027883a 	mov	r19,r8
   8cf00:	1039883a 	mov	fp,r2
   8cf04:	282b883a 	mov	r21,r5
   8cf08:	da800415 	stw	r10,16(sp)
   8cf0c:	3800401e 	bne	r7,zero,8d010 <__udivdi3+0x150>
   8cf10:	2a006536 	bltu	r5,r8,8d0a8 <__udivdi3+0x1e8>
   8cf14:	4000b526 	beq	r8,zero,8d1ec <__udivdi3+0x32c>
   8cf18:	00bfffd4 	movui	r2,65535
   8cf1c:	14c0ad36 	bltu	r2,r19,8d1d4 <__udivdi3+0x314>
   8cf20:	00803fc4 	movi	r2,255
   8cf24:	14c15e36 	bltu	r2,r19,8d4a0 <__udivdi3+0x5e0>
   8cf28:	000b883a 	mov	r5,zero
   8cf2c:	0005883a 	mov	r2,zero
   8cf30:	9884d83a 	srl	r2,r19,r2
   8cf34:	01000274 	movhi	r4,9
   8cf38:	21095b04 	addi	r4,r4,9580
   8cf3c:	01800804 	movi	r6,32
   8cf40:	1105883a 	add	r2,r2,r4
   8cf44:	10c00003 	ldbu	r3,0(r2)
   8cf48:	28c7883a 	add	r3,r5,r3
   8cf4c:	30e9c83a 	sub	r20,r6,r3
   8cf50:	a0010a1e 	bne	r20,zero,8d37c <__udivdi3+0x4bc>
   8cf54:	982ed43a 	srli	r23,r19,16
   8cf58:	acebc83a 	sub	r21,r21,r19
   8cf5c:	9dbfffcc 	andi	r22,r19,65535
   8cf60:	05000044 	movi	r20,1
   8cf64:	a809883a 	mov	r4,r21
   8cf68:	b80b883a 	mov	r5,r23
   8cf6c:	008596c0 	call	8596c <__udivsi3>
   8cf70:	100b883a 	mov	r5,r2
   8cf74:	b009883a 	mov	r4,r22
   8cf78:	1021883a 	mov	r16,r2
   8cf7c:	008597c0 	call	8597c <__mulsi3>
   8cf80:	a809883a 	mov	r4,r21
   8cf84:	b80b883a 	mov	r5,r23
   8cf88:	1023883a 	mov	r17,r2
   8cf8c:	00859740 	call	85974 <__umodsi3>
   8cf90:	1004943a 	slli	r2,r2,16
   8cf94:	e006d43a 	srli	r3,fp,16
   8cf98:	10c4b03a 	or	r2,r2,r3
   8cf9c:	1440042e 	bgeu	r2,r17,8cfb0 <__udivdi3+0xf0>
   8cfa0:	14c5883a 	add	r2,r2,r19
   8cfa4:	843fffc4 	addi	r16,r16,-1
   8cfa8:	14c00136 	bltu	r2,r19,8cfb0 <__udivdi3+0xf0>
   8cfac:	14415c36 	bltu	r2,r17,8d520 <__udivdi3+0x660>
   8cfb0:	1463c83a 	sub	r17,r2,r17
   8cfb4:	8809883a 	mov	r4,r17
   8cfb8:	b80b883a 	mov	r5,r23
   8cfbc:	008596c0 	call	8596c <__udivsi3>
   8cfc0:	100b883a 	mov	r5,r2
   8cfc4:	b009883a 	mov	r4,r22
   8cfc8:	102b883a 	mov	r21,r2
   8cfcc:	008597c0 	call	8597c <__mulsi3>
   8cfd0:	8809883a 	mov	r4,r17
   8cfd4:	b80b883a 	mov	r5,r23
   8cfd8:	1025883a 	mov	r18,r2
   8cfdc:	00859740 	call	85974 <__umodsi3>
   8cfe0:	1004943a 	slli	r2,r2,16
   8cfe4:	e0ffffcc 	andi	r3,fp,65535
   8cfe8:	10c4b03a 	or	r2,r2,r3
   8cfec:	1480042e 	bgeu	r2,r18,8d000 <__udivdi3+0x140>
   8cff0:	9885883a 	add	r2,r19,r2
   8cff4:	ad7fffc4 	addi	r21,r21,-1
   8cff8:	14c00136 	bltu	r2,r19,8d000 <__udivdi3+0x140>
   8cffc:	14813c36 	bltu	r2,r18,8d4f0 <__udivdi3+0x630>
   8d000:	8004943a 	slli	r2,r16,16
   8d004:	a009883a 	mov	r4,r20
   8d008:	a884b03a 	or	r2,r21,r2
   8d00c:	00001506 	br	8d064 <__udivdi3+0x1a4>
   8d010:	380d883a 	mov	r6,r7
   8d014:	29c06c36 	bltu	r5,r7,8d1c8 <__udivdi3+0x308>
   8d018:	00bfffd4 	movui	r2,65535
   8d01c:	11c06436 	bltu	r2,r7,8d1b0 <__udivdi3+0x2f0>
   8d020:	00803fc4 	movi	r2,255
   8d024:	11c11836 	bltu	r2,r7,8d488 <__udivdi3+0x5c8>
   8d028:	000b883a 	mov	r5,zero
   8d02c:	0005883a 	mov	r2,zero
   8d030:	3084d83a 	srl	r2,r6,r2
   8d034:	01000274 	movhi	r4,9
   8d038:	21095b04 	addi	r4,r4,9580
   8d03c:	01c00804 	movi	r7,32
   8d040:	1105883a 	add	r2,r2,r4
   8d044:	10c00003 	ldbu	r3,0(r2)
   8d048:	28c7883a 	add	r3,r5,r3
   8d04c:	38edc83a 	sub	r22,r7,r3
   8d050:	b000731e 	bne	r22,zero,8d220 <__udivdi3+0x360>
   8d054:	35400136 	bltu	r6,r21,8d05c <__udivdi3+0x19c>
   8d058:	e4c05b36 	bltu	fp,r19,8d1c8 <__udivdi3+0x308>
   8d05c:	00800044 	movi	r2,1
   8d060:	0009883a 	mov	r4,zero
   8d064:	d8800315 	stw	r2,12(sp)
   8d068:	d9400317 	ldw	r5,12(sp)
   8d06c:	d9000415 	stw	r4,16(sp)
   8d070:	2007883a 	mov	r3,r4
   8d074:	2805883a 	mov	r2,r5
   8d078:	dfc00e17 	ldw	ra,56(sp)
   8d07c:	df000d17 	ldw	fp,52(sp)
   8d080:	ddc00c17 	ldw	r23,48(sp)
   8d084:	dd800b17 	ldw	r22,44(sp)
   8d088:	dd400a17 	ldw	r21,40(sp)
   8d08c:	dd000917 	ldw	r20,36(sp)
   8d090:	dcc00817 	ldw	r19,32(sp)
   8d094:	dc800717 	ldw	r18,28(sp)
   8d098:	dc400617 	ldw	r17,24(sp)
   8d09c:	dc000517 	ldw	r16,20(sp)
   8d0a0:	dec00f04 	addi	sp,sp,60
   8d0a4:	f800283a 	ret
   8d0a8:	00bfffd4 	movui	r2,65535
   8d0ac:	12005636 	bltu	r2,r8,8d208 <__udivdi3+0x348>
   8d0b0:	00803fc4 	movi	r2,255
   8d0b4:	12010036 	bltu	r2,r8,8d4b8 <__udivdi3+0x5f8>
   8d0b8:	000b883a 	mov	r5,zero
   8d0bc:	0005883a 	mov	r2,zero
   8d0c0:	9884d83a 	srl	r2,r19,r2
   8d0c4:	01000274 	movhi	r4,9
   8d0c8:	21095b04 	addi	r4,r4,9580
   8d0cc:	01800804 	movi	r6,32
   8d0d0:	1105883a 	add	r2,r2,r4
   8d0d4:	10c00003 	ldbu	r3,0(r2)
   8d0d8:	28c7883a 	add	r3,r5,r3
   8d0dc:	30cbc83a 	sub	r5,r6,r3
   8d0e0:	28000626 	beq	r5,zero,8d0fc <__udivdi3+0x23c>
   8d0e4:	3145c83a 	sub	r2,r6,r5
   8d0e8:	e084d83a 	srl	r2,fp,r2
   8d0ec:	a946983a 	sll	r3,r21,r5
   8d0f0:	e178983a 	sll	fp,fp,r5
   8d0f4:	9966983a 	sll	r19,r19,r5
   8d0f8:	18aab03a 	or	r21,r3,r2
   8d0fc:	982ed43a 	srli	r23,r19,16
   8d100:	a809883a 	mov	r4,r21
   8d104:	9cbfffcc 	andi	r18,r19,65535
   8d108:	b80b883a 	mov	r5,r23
   8d10c:	008596c0 	call	8596c <__udivsi3>
   8d110:	100b883a 	mov	r5,r2
   8d114:	9009883a 	mov	r4,r18
   8d118:	1021883a 	mov	r16,r2
   8d11c:	008597c0 	call	8597c <__mulsi3>
   8d120:	a809883a 	mov	r4,r21
   8d124:	b80b883a 	mov	r5,r23
   8d128:	1023883a 	mov	r17,r2
   8d12c:	00859740 	call	85974 <__umodsi3>
   8d130:	1004943a 	slli	r2,r2,16
   8d134:	e006d43a 	srli	r3,fp,16
   8d138:	10c4b03a 	or	r2,r2,r3
   8d13c:	1440042e 	bgeu	r2,r17,8d150 <__udivdi3+0x290>
   8d140:	14c5883a 	add	r2,r2,r19
   8d144:	843fffc4 	addi	r16,r16,-1
   8d148:	14c00136 	bltu	r2,r19,8d150 <__udivdi3+0x290>
   8d14c:	1440ea36 	bltu	r2,r17,8d4f8 <__udivdi3+0x638>
   8d150:	1463c83a 	sub	r17,r2,r17
   8d154:	8809883a 	mov	r4,r17
   8d158:	b80b883a 	mov	r5,r23
   8d15c:	008596c0 	call	8596c <__udivsi3>
   8d160:	100b883a 	mov	r5,r2
   8d164:	9009883a 	mov	r4,r18
   8d168:	102b883a 	mov	r21,r2
   8d16c:	008597c0 	call	8597c <__mulsi3>
   8d170:	8809883a 	mov	r4,r17
   8d174:	b80b883a 	mov	r5,r23
   8d178:	1025883a 	mov	r18,r2
   8d17c:	00859740 	call	85974 <__umodsi3>
   8d180:	1004943a 	slli	r2,r2,16
   8d184:	e0ffffcc 	andi	r3,fp,65535
   8d188:	10c4b03a 	or	r2,r2,r3
   8d18c:	1480042e 	bgeu	r2,r18,8d1a0 <__udivdi3+0x2e0>
   8d190:	9885883a 	add	r2,r19,r2
   8d194:	ad7fffc4 	addi	r21,r21,-1
   8d198:	14c00136 	bltu	r2,r19,8d1a0 <__udivdi3+0x2e0>
   8d19c:	1480d936 	bltu	r2,r18,8d504 <__udivdi3+0x644>
   8d1a0:	8004943a 	slli	r2,r16,16
   8d1a4:	0009883a 	mov	r4,zero
   8d1a8:	a884b03a 	or	r2,r21,r2
   8d1ac:	003fad06 	br	8d064 <__udivdi3+0x1a4>
   8d1b0:	00804034 	movhi	r2,256
   8d1b4:	10bfffc4 	addi	r2,r2,-1
   8d1b8:	11c0b636 	bltu	r2,r7,8d494 <__udivdi3+0x5d4>
   8d1bc:	01400404 	movi	r5,16
   8d1c0:	2805883a 	mov	r2,r5
   8d1c4:	003f9a06 	br	8d030 <__udivdi3+0x170>
   8d1c8:	0005883a 	mov	r2,zero
   8d1cc:	0009883a 	mov	r4,zero
   8d1d0:	003fa406 	br	8d064 <__udivdi3+0x1a4>
   8d1d4:	00804034 	movhi	r2,256
   8d1d8:	10bfffc4 	addi	r2,r2,-1
   8d1dc:	14c0b336 	bltu	r2,r19,8d4ac <__udivdi3+0x5ec>
   8d1e0:	01400404 	movi	r5,16
   8d1e4:	2805883a 	mov	r2,r5
   8d1e8:	003f5106 	br	8cf30 <__udivdi3+0x70>
   8d1ec:	01000044 	movi	r4,1
   8d1f0:	000b883a 	mov	r5,zero
   8d1f4:	008596c0 	call	8596c <__udivsi3>
   8d1f8:	1027883a 	mov	r19,r2
   8d1fc:	00bfffd4 	movui	r2,65535
   8d200:	14fff436 	bltu	r2,r19,8d1d4 <__udivdi3+0x314>
   8d204:	003f4606 	br	8cf20 <__udivdi3+0x60>
   8d208:	00804034 	movhi	r2,256
   8d20c:	10bfffc4 	addi	r2,r2,-1
   8d210:	1200ac36 	bltu	r2,r8,8d4c4 <__udivdi3+0x604>
   8d214:	01400404 	movi	r5,16
   8d218:	2805883a 	mov	r2,r5
   8d21c:	003fa806 	br	8d0c0 <__udivdi3+0x200>
   8d220:	3d85c83a 	sub	r2,r7,r22
   8d224:	3588983a 	sll	r4,r6,r22
   8d228:	9886d83a 	srl	r3,r19,r2
   8d22c:	a8a2d83a 	srl	r17,r21,r2
   8d230:	e084d83a 	srl	r2,fp,r2
   8d234:	20eeb03a 	or	r23,r4,r3
   8d238:	b824d43a 	srli	r18,r23,16
   8d23c:	ad86983a 	sll	r3,r21,r22
   8d240:	8809883a 	mov	r4,r17
   8d244:	900b883a 	mov	r5,r18
   8d248:	1886b03a 	or	r3,r3,r2
   8d24c:	d8c00115 	stw	r3,4(sp)
   8d250:	bc3fffcc 	andi	r16,r23,65535
   8d254:	008596c0 	call	8596c <__udivsi3>
   8d258:	100b883a 	mov	r5,r2
   8d25c:	8009883a 	mov	r4,r16
   8d260:	1029883a 	mov	r20,r2
   8d264:	008597c0 	call	8597c <__mulsi3>
   8d268:	900b883a 	mov	r5,r18
   8d26c:	8809883a 	mov	r4,r17
   8d270:	102b883a 	mov	r21,r2
   8d274:	00859740 	call	85974 <__umodsi3>
   8d278:	d9400117 	ldw	r5,4(sp)
   8d27c:	1004943a 	slli	r2,r2,16
   8d280:	9da6983a 	sll	r19,r19,r22
   8d284:	2806d43a 	srli	r3,r5,16
   8d288:	10c4b03a 	or	r2,r2,r3
   8d28c:	1540032e 	bgeu	r2,r21,8d29c <__udivdi3+0x3dc>
   8d290:	15c5883a 	add	r2,r2,r23
   8d294:	a53fffc4 	addi	r20,r20,-1
   8d298:	15c0912e 	bgeu	r2,r23,8d4e0 <__udivdi3+0x620>
   8d29c:	1563c83a 	sub	r17,r2,r21
   8d2a0:	8809883a 	mov	r4,r17
   8d2a4:	900b883a 	mov	r5,r18
   8d2a8:	008596c0 	call	8596c <__udivsi3>
   8d2ac:	100b883a 	mov	r5,r2
   8d2b0:	8009883a 	mov	r4,r16
   8d2b4:	102b883a 	mov	r21,r2
   8d2b8:	008597c0 	call	8597c <__mulsi3>
   8d2bc:	8809883a 	mov	r4,r17
   8d2c0:	900b883a 	mov	r5,r18
   8d2c4:	1021883a 	mov	r16,r2
   8d2c8:	00859740 	call	85974 <__umodsi3>
   8d2cc:	da800117 	ldw	r10,4(sp)
   8d2d0:	1004943a 	slli	r2,r2,16
   8d2d4:	50ffffcc 	andi	r3,r10,65535
   8d2d8:	10c6b03a 	or	r3,r2,r3
   8d2dc:	1c00032e 	bgeu	r3,r16,8d2ec <__udivdi3+0x42c>
   8d2e0:	1dc7883a 	add	r3,r3,r23
   8d2e4:	ad7fffc4 	addi	r21,r21,-1
   8d2e8:	1dc0792e 	bgeu	r3,r23,8d4d0 <__udivdi3+0x610>
   8d2ec:	a004943a 	slli	r2,r20,16
   8d2f0:	982ed43a 	srli	r23,r19,16
   8d2f4:	9cffffcc 	andi	r19,r19,65535
   8d2f8:	a8a4b03a 	or	r18,r21,r2
   8d2fc:	947fffcc 	andi	r17,r18,65535
   8d300:	902ad43a 	srli	r21,r18,16
   8d304:	8809883a 	mov	r4,r17
   8d308:	980b883a 	mov	r5,r19
   8d30c:	1c21c83a 	sub	r16,r3,r16
   8d310:	008597c0 	call	8597c <__mulsi3>
   8d314:	8809883a 	mov	r4,r17
   8d318:	b80b883a 	mov	r5,r23
   8d31c:	1029883a 	mov	r20,r2
   8d320:	008597c0 	call	8597c <__mulsi3>
   8d324:	980b883a 	mov	r5,r19
   8d328:	a809883a 	mov	r4,r21
   8d32c:	1023883a 	mov	r17,r2
   8d330:	008597c0 	call	8597c <__mulsi3>
   8d334:	a809883a 	mov	r4,r21
   8d338:	b80b883a 	mov	r5,r23
   8d33c:	1027883a 	mov	r19,r2
   8d340:	008597c0 	call	8597c <__mulsi3>
   8d344:	1009883a 	mov	r4,r2
   8d348:	a004d43a 	srli	r2,r20,16
   8d34c:	8ce3883a 	add	r17,r17,r19
   8d350:	1447883a 	add	r3,r2,r17
   8d354:	1cc0022e 	bgeu	r3,r19,8d360 <__udivdi3+0x4a0>
   8d358:	00800074 	movhi	r2,1
   8d35c:	2089883a 	add	r4,r4,r2
   8d360:	1804d43a 	srli	r2,r3,16
   8d364:	2085883a 	add	r2,r4,r2
   8d368:	80804436 	bltu	r16,r2,8d47c <__udivdi3+0x5bc>
   8d36c:	80803e26 	beq	r16,r2,8d468 <__udivdi3+0x5a8>
   8d370:	9005883a 	mov	r2,r18
   8d374:	0009883a 	mov	r4,zero
   8d378:	003f3a06 	br	8d064 <__udivdi3+0x1a4>
   8d37c:	9d26983a 	sll	r19,r19,r20
   8d380:	3505c83a 	sub	r2,r6,r20
   8d384:	a8a2d83a 	srl	r17,r21,r2
   8d388:	982ed43a 	srli	r23,r19,16
   8d38c:	e084d83a 	srl	r2,fp,r2
   8d390:	ad06983a 	sll	r3,r21,r20
   8d394:	8809883a 	mov	r4,r17
   8d398:	b80b883a 	mov	r5,r23
   8d39c:	1886b03a 	or	r3,r3,r2
   8d3a0:	d8c00015 	stw	r3,0(sp)
   8d3a4:	9dbfffcc 	andi	r22,r19,65535
   8d3a8:	008596c0 	call	8596c <__udivsi3>
   8d3ac:	100b883a 	mov	r5,r2
   8d3b0:	b009883a 	mov	r4,r22
   8d3b4:	d8800215 	stw	r2,8(sp)
   8d3b8:	008597c0 	call	8597c <__mulsi3>
   8d3bc:	8809883a 	mov	r4,r17
   8d3c0:	b80b883a 	mov	r5,r23
   8d3c4:	102b883a 	mov	r21,r2
   8d3c8:	00859740 	call	85974 <__umodsi3>
   8d3cc:	d9000017 	ldw	r4,0(sp)
   8d3d0:	1004943a 	slli	r2,r2,16
   8d3d4:	2006d43a 	srli	r3,r4,16
   8d3d8:	10c4b03a 	or	r2,r2,r3
   8d3dc:	1540052e 	bgeu	r2,r21,8d3f4 <__udivdi3+0x534>
   8d3e0:	d9400217 	ldw	r5,8(sp)
   8d3e4:	14c5883a 	add	r2,r2,r19
   8d3e8:	297fffc4 	addi	r5,r5,-1
   8d3ec:	d9400215 	stw	r5,8(sp)
   8d3f0:	14c0462e 	bgeu	r2,r19,8d50c <__udivdi3+0x64c>
   8d3f4:	1563c83a 	sub	r17,r2,r21
   8d3f8:	8809883a 	mov	r4,r17
   8d3fc:	b80b883a 	mov	r5,r23
   8d400:	008596c0 	call	8596c <__udivsi3>
   8d404:	100b883a 	mov	r5,r2
   8d408:	b009883a 	mov	r4,r22
   8d40c:	1025883a 	mov	r18,r2
   8d410:	008597c0 	call	8597c <__mulsi3>
   8d414:	8809883a 	mov	r4,r17
   8d418:	b80b883a 	mov	r5,r23
   8d41c:	1021883a 	mov	r16,r2
   8d420:	00859740 	call	85974 <__umodsi3>
   8d424:	da800017 	ldw	r10,0(sp)
   8d428:	1004943a 	slli	r2,r2,16
   8d42c:	50ffffcc 	andi	r3,r10,65535
   8d430:	10c6b03a 	or	r3,r2,r3
   8d434:	1c00062e 	bgeu	r3,r16,8d450 <__udivdi3+0x590>
   8d438:	1cc7883a 	add	r3,r3,r19
   8d43c:	94bfffc4 	addi	r18,r18,-1
   8d440:	1cc00336 	bltu	r3,r19,8d450 <__udivdi3+0x590>
   8d444:	1c00022e 	bgeu	r3,r16,8d450 <__udivdi3+0x590>
   8d448:	94bfffc4 	addi	r18,r18,-1
   8d44c:	1cc7883a 	add	r3,r3,r19
   8d450:	d9000217 	ldw	r4,8(sp)
   8d454:	e538983a 	sll	fp,fp,r20
   8d458:	1c2bc83a 	sub	r21,r3,r16
   8d45c:	2004943a 	slli	r2,r4,16
   8d460:	90a8b03a 	or	r20,r18,r2
   8d464:	003ebf06 	br	8cf64 <__udivdi3+0xa4>
   8d468:	1804943a 	slli	r2,r3,16
   8d46c:	e588983a 	sll	r4,fp,r22
   8d470:	a0ffffcc 	andi	r3,r20,65535
   8d474:	10c5883a 	add	r2,r2,r3
   8d478:	20bfbd2e 	bgeu	r4,r2,8d370 <__udivdi3+0x4b0>
   8d47c:	90bfffc4 	addi	r2,r18,-1
   8d480:	0009883a 	mov	r4,zero
   8d484:	003ef706 	br	8d064 <__udivdi3+0x1a4>
   8d488:	01400204 	movi	r5,8
   8d48c:	2805883a 	mov	r2,r5
   8d490:	003ee706 	br	8d030 <__udivdi3+0x170>
   8d494:	01400604 	movi	r5,24
   8d498:	2805883a 	mov	r2,r5
   8d49c:	003ee406 	br	8d030 <__udivdi3+0x170>
   8d4a0:	01400204 	movi	r5,8
   8d4a4:	2805883a 	mov	r2,r5
   8d4a8:	003ea106 	br	8cf30 <__udivdi3+0x70>
   8d4ac:	01400604 	movi	r5,24
   8d4b0:	2805883a 	mov	r2,r5
   8d4b4:	003e9e06 	br	8cf30 <__udivdi3+0x70>
   8d4b8:	01400204 	movi	r5,8
   8d4bc:	2805883a 	mov	r2,r5
   8d4c0:	003eff06 	br	8d0c0 <__udivdi3+0x200>
   8d4c4:	01400604 	movi	r5,24
   8d4c8:	2805883a 	mov	r2,r5
   8d4cc:	003efc06 	br	8d0c0 <__udivdi3+0x200>
   8d4d0:	1c3f862e 	bgeu	r3,r16,8d2ec <__udivdi3+0x42c>
   8d4d4:	1dc7883a 	add	r3,r3,r23
   8d4d8:	ad7fffc4 	addi	r21,r21,-1
   8d4dc:	003f8306 	br	8d2ec <__udivdi3+0x42c>
   8d4e0:	157f6e2e 	bgeu	r2,r21,8d29c <__udivdi3+0x3dc>
   8d4e4:	a53fffc4 	addi	r20,r20,-1
   8d4e8:	15c5883a 	add	r2,r2,r23
   8d4ec:	003f6b06 	br	8d29c <__udivdi3+0x3dc>
   8d4f0:	ad7fffc4 	addi	r21,r21,-1
   8d4f4:	003ec206 	br	8d000 <__udivdi3+0x140>
   8d4f8:	843fffc4 	addi	r16,r16,-1
   8d4fc:	14c5883a 	add	r2,r2,r19
   8d500:	003f1306 	br	8d150 <__udivdi3+0x290>
   8d504:	ad7fffc4 	addi	r21,r21,-1
   8d508:	003f2506 	br	8d1a0 <__udivdi3+0x2e0>
   8d50c:	157fb92e 	bgeu	r2,r21,8d3f4 <__udivdi3+0x534>
   8d510:	297fffc4 	addi	r5,r5,-1
   8d514:	14c5883a 	add	r2,r2,r19
   8d518:	d9400215 	stw	r5,8(sp)
   8d51c:	003fb506 	br	8d3f4 <__udivdi3+0x534>
   8d520:	843fffc4 	addi	r16,r16,-1
   8d524:	14c5883a 	add	r2,r2,r19
   8d528:	003ea106 	br	8cfb0 <__udivdi3+0xf0>

0008d52c <__umoddi3>:
   8d52c:	defff004 	addi	sp,sp,-64
   8d530:	3011883a 	mov	r8,r6
   8d534:	000d883a 	mov	r6,zero
   8d538:	dd400b15 	stw	r21,44(sp)
   8d53c:	dcc00915 	stw	r19,36(sp)
   8d540:	dc000615 	stw	r16,24(sp)
   8d544:	dfc00f15 	stw	ra,60(sp)
   8d548:	df000e15 	stw	fp,56(sp)
   8d54c:	ddc00d15 	stw	r23,52(sp)
   8d550:	dd800c15 	stw	r22,48(sp)
   8d554:	dd000a15 	stw	r20,40(sp)
   8d558:	dc800815 	stw	r18,32(sp)
   8d55c:	dc400715 	stw	r17,28(sp)
   8d560:	2817883a 	mov	r11,r5
   8d564:	d9800415 	stw	r6,16(sp)
   8d568:	4027883a 	mov	r19,r8
   8d56c:	d9800515 	stw	r6,20(sp)
   8d570:	2021883a 	mov	r16,r4
   8d574:	282b883a 	mov	r21,r5
   8d578:	38002c1e 	bne	r7,zero,8d62c <__umoddi3+0x100>
   8d57c:	2a005636 	bltu	r5,r8,8d6d8 <__umoddi3+0x1ac>
   8d580:	40009a26 	beq	r8,zero,8d7ec <__umoddi3+0x2c0>
   8d584:	00bfffd4 	movui	r2,65535
   8d588:	14c09236 	bltu	r2,r19,8d7d4 <__umoddi3+0x2a8>
   8d58c:	00803fc4 	movi	r2,255
   8d590:	14c15c36 	bltu	r2,r19,8db04 <__umoddi3+0x5d8>
   8d594:	000b883a 	mov	r5,zero
   8d598:	0005883a 	mov	r2,zero
   8d59c:	9884d83a 	srl	r2,r19,r2
   8d5a0:	01000274 	movhi	r4,9
   8d5a4:	21095b04 	addi	r4,r4,9580
   8d5a8:	01800804 	movi	r6,32
   8d5ac:	1105883a 	add	r2,r2,r4
   8d5b0:	10c00003 	ldbu	r3,0(r2)
   8d5b4:	28c7883a 	add	r3,r5,r3
   8d5b8:	30e5c83a 	sub	r18,r6,r3
   8d5bc:	9000a41e 	bne	r18,zero,8d850 <__umoddi3+0x324>
   8d5c0:	982ed43a 	srli	r23,r19,16
   8d5c4:	acebc83a 	sub	r21,r21,r19
   8d5c8:	9d3fffcc 	andi	r20,r19,65535
   8d5cc:	002d883a 	mov	r22,zero
   8d5d0:	a809883a 	mov	r4,r21
   8d5d4:	b80b883a 	mov	r5,r23
   8d5d8:	008596c0 	call	8596c <__udivsi3>
   8d5dc:	100b883a 	mov	r5,r2
   8d5e0:	a009883a 	mov	r4,r20
   8d5e4:	008597c0 	call	8597c <__mulsi3>
   8d5e8:	a809883a 	mov	r4,r21
   8d5ec:	b80b883a 	mov	r5,r23
   8d5f0:	1023883a 	mov	r17,r2
   8d5f4:	00859740 	call	85974 <__umodsi3>
   8d5f8:	1004943a 	slli	r2,r2,16
   8d5fc:	8006d43a 	srli	r3,r16,16
   8d600:	10c4b03a 	or	r2,r2,r3
   8d604:	1440032e 	bgeu	r2,r17,8d614 <__umoddi3+0xe8>
   8d608:	14c5883a 	add	r2,r2,r19
   8d60c:	14c00136 	bltu	r2,r19,8d614 <__umoddi3+0xe8>
   8d610:	14415836 	bltu	r2,r17,8db74 <__umoddi3+0x648>
   8d614:	1463c83a 	sub	r17,r2,r17
   8d618:	8809883a 	mov	r4,r17
   8d61c:	b80b883a 	mov	r5,r23
   8d620:	008596c0 	call	8596c <__udivsi3>
   8d624:	a009883a 	mov	r4,r20
   8d628:	00005306 	br	8d778 <__umoddi3+0x24c>
   8d62c:	380d883a 	mov	r6,r7
   8d630:	29c0132e 	bgeu	r5,r7,8d680 <__umoddi3+0x154>
   8d634:	d9000415 	stw	r4,16(sp)
   8d638:	d9400515 	stw	r5,20(sp)
   8d63c:	d9400417 	ldw	r5,16(sp)
   8d640:	5813883a 	mov	r9,r11
   8d644:	2811883a 	mov	r8,r5
   8d648:	4005883a 	mov	r2,r8
   8d64c:	4807883a 	mov	r3,r9
   8d650:	dfc00f17 	ldw	ra,60(sp)
   8d654:	df000e17 	ldw	fp,56(sp)
   8d658:	ddc00d17 	ldw	r23,52(sp)
   8d65c:	dd800c17 	ldw	r22,48(sp)
   8d660:	dd400b17 	ldw	r21,44(sp)
   8d664:	dd000a17 	ldw	r20,40(sp)
   8d668:	dcc00917 	ldw	r19,36(sp)
   8d66c:	dc800817 	ldw	r18,32(sp)
   8d670:	dc400717 	ldw	r17,28(sp)
   8d674:	dc000617 	ldw	r16,24(sp)
   8d678:	dec01004 	addi	sp,sp,64
   8d67c:	f800283a 	ret
   8d680:	00bfffd4 	movui	r2,65535
   8d684:	11c06636 	bltu	r2,r7,8d820 <__umoddi3+0x2f4>
   8d688:	00803fc4 	movi	r2,255
   8d68c:	11c12036 	bltu	r2,r7,8db10 <__umoddi3+0x5e4>
   8d690:	000b883a 	mov	r5,zero
   8d694:	0005883a 	mov	r2,zero
   8d698:	3084d83a 	srl	r2,r6,r2
   8d69c:	01000274 	movhi	r4,9
   8d6a0:	21095b04 	addi	r4,r4,9580
   8d6a4:	01c00804 	movi	r7,32
   8d6a8:	1105883a 	add	r2,r2,r4
   8d6ac:	10c00003 	ldbu	r3,0(r2)
   8d6b0:	28c7883a 	add	r3,r5,r3
   8d6b4:	38e5c83a 	sub	r18,r7,r3
   8d6b8:	9000941e 	bne	r18,zero,8d90c <__umoddi3+0x3e0>
   8d6bc:	35405e36 	bltu	r6,r21,8d838 <__umoddi3+0x30c>
   8d6c0:	84c05d2e 	bgeu	r16,r19,8d838 <__umoddi3+0x30c>
   8d6c4:	8011883a 	mov	r8,r16
   8d6c8:	a813883a 	mov	r9,r21
   8d6cc:	dc000415 	stw	r16,16(sp)
   8d6d0:	dd400515 	stw	r21,20(sp)
   8d6d4:	003fdc06 	br	8d648 <__umoddi3+0x11c>
   8d6d8:	00bfffd4 	movui	r2,65535
   8d6dc:	12004a36 	bltu	r2,r8,8d808 <__umoddi3+0x2dc>
   8d6e0:	00803fc4 	movi	r2,255
   8d6e4:	12010d36 	bltu	r2,r8,8db1c <__umoddi3+0x5f0>
   8d6e8:	000b883a 	mov	r5,zero
   8d6ec:	0005883a 	mov	r2,zero
   8d6f0:	9884d83a 	srl	r2,r19,r2
   8d6f4:	01000274 	movhi	r4,9
   8d6f8:	21095b04 	addi	r4,r4,9580
   8d6fc:	01800804 	movi	r6,32
   8d700:	1105883a 	add	r2,r2,r4
   8d704:	10c00003 	ldbu	r3,0(r2)
   8d708:	28c7883a 	add	r3,r5,r3
   8d70c:	30c7c83a 	sub	r3,r6,r3
   8d710:	1800dc1e 	bne	r3,zero,8da84 <__umoddi3+0x558>
   8d714:	002d883a 	mov	r22,zero
   8d718:	982ed43a 	srli	r23,r19,16
   8d71c:	a809883a 	mov	r4,r21
   8d720:	9cbfffcc 	andi	r18,r19,65535
   8d724:	b80b883a 	mov	r5,r23
   8d728:	008596c0 	call	8596c <__udivsi3>
   8d72c:	100b883a 	mov	r5,r2
   8d730:	9009883a 	mov	r4,r18
   8d734:	008597c0 	call	8597c <__mulsi3>
   8d738:	a809883a 	mov	r4,r21
   8d73c:	b80b883a 	mov	r5,r23
   8d740:	1023883a 	mov	r17,r2
   8d744:	00859740 	call	85974 <__umodsi3>
   8d748:	1004943a 	slli	r2,r2,16
   8d74c:	8006d43a 	srli	r3,r16,16
   8d750:	10c4b03a 	or	r2,r2,r3
   8d754:	1440032e 	bgeu	r2,r17,8d764 <__umoddi3+0x238>
   8d758:	14c5883a 	add	r2,r2,r19
   8d75c:	14c00136 	bltu	r2,r19,8d764 <__umoddi3+0x238>
   8d760:	14410236 	bltu	r2,r17,8db6c <__umoddi3+0x640>
   8d764:	1463c83a 	sub	r17,r2,r17
   8d768:	8809883a 	mov	r4,r17
   8d76c:	b80b883a 	mov	r5,r23
   8d770:	008596c0 	call	8596c <__udivsi3>
   8d774:	9009883a 	mov	r4,r18
   8d778:	100b883a 	mov	r5,r2
   8d77c:	008597c0 	call	8597c <__mulsi3>
   8d780:	8809883a 	mov	r4,r17
   8d784:	b80b883a 	mov	r5,r23
   8d788:	102b883a 	mov	r21,r2
   8d78c:	00859740 	call	85974 <__umodsi3>
   8d790:	1004943a 	slli	r2,r2,16
   8d794:	80ffffcc 	andi	r3,r16,65535
   8d798:	10c4b03a 	or	r2,r2,r3
   8d79c:	1540042e 	bgeu	r2,r21,8d7b0 <__umoddi3+0x284>
   8d7a0:	14c5883a 	add	r2,r2,r19
   8d7a4:	14c00236 	bltu	r2,r19,8d7b0 <__umoddi3+0x284>
   8d7a8:	1540012e 	bgeu	r2,r21,8d7b0 <__umoddi3+0x284>
   8d7ac:	14c5883a 	add	r2,r2,r19
   8d7b0:	1545c83a 	sub	r2,r2,r21
   8d7b4:	1584d83a 	srl	r2,r2,r22
   8d7b8:	0013883a 	mov	r9,zero
   8d7bc:	d8800415 	stw	r2,16(sp)
   8d7c0:	d8c00417 	ldw	r3,16(sp)
   8d7c4:	0005883a 	mov	r2,zero
   8d7c8:	d8800515 	stw	r2,20(sp)
   8d7cc:	1811883a 	mov	r8,r3
   8d7d0:	003f9d06 	br	8d648 <__umoddi3+0x11c>
   8d7d4:	00804034 	movhi	r2,256
   8d7d8:	10bfffc4 	addi	r2,r2,-1
   8d7dc:	14c0c636 	bltu	r2,r19,8daf8 <__umoddi3+0x5cc>
   8d7e0:	01400404 	movi	r5,16
   8d7e4:	2805883a 	mov	r2,r5
   8d7e8:	003f6c06 	br	8d59c <__umoddi3+0x70>
   8d7ec:	01000044 	movi	r4,1
   8d7f0:	000b883a 	mov	r5,zero
   8d7f4:	008596c0 	call	8596c <__udivsi3>
   8d7f8:	1027883a 	mov	r19,r2
   8d7fc:	00bfffd4 	movui	r2,65535
   8d800:	14fff436 	bltu	r2,r19,8d7d4 <__umoddi3+0x2a8>
   8d804:	003f6106 	br	8d58c <__umoddi3+0x60>
   8d808:	00804034 	movhi	r2,256
   8d80c:	10bfffc4 	addi	r2,r2,-1
   8d810:	1200c536 	bltu	r2,r8,8db28 <__umoddi3+0x5fc>
   8d814:	01400404 	movi	r5,16
   8d818:	2805883a 	mov	r2,r5
   8d81c:	003fb406 	br	8d6f0 <__umoddi3+0x1c4>
   8d820:	00804034 	movhi	r2,256
   8d824:	10bfffc4 	addi	r2,r2,-1
   8d828:	11c0c236 	bltu	r2,r7,8db34 <__umoddi3+0x608>
   8d82c:	01400404 	movi	r5,16
   8d830:	2805883a 	mov	r2,r5
   8d834:	003f9806 	br	8d698 <__umoddi3+0x16c>
   8d838:	84c9c83a 	sub	r4,r16,r19
   8d83c:	8105803a 	cmpltu	r2,r16,r4
   8d840:	a987c83a 	sub	r3,r21,r6
   8d844:	18abc83a 	sub	r21,r3,r2
   8d848:	2021883a 	mov	r16,r4
   8d84c:	003f9d06 	br	8d6c4 <__umoddi3+0x198>
   8d850:	9ca6983a 	sll	r19,r19,r18
   8d854:	3485c83a 	sub	r2,r6,r18
   8d858:	a8a2d83a 	srl	r17,r21,r2
   8d85c:	982ed43a 	srli	r23,r19,16
   8d860:	ac86983a 	sll	r3,r21,r18
   8d864:	8084d83a 	srl	r2,r16,r2
   8d868:	8809883a 	mov	r4,r17
   8d86c:	b80b883a 	mov	r5,r23
   8d870:	18b8b03a 	or	fp,r3,r2
   8d874:	9d3fffcc 	andi	r20,r19,65535
   8d878:	008596c0 	call	8596c <__udivsi3>
   8d87c:	100b883a 	mov	r5,r2
   8d880:	a009883a 	mov	r4,r20
   8d884:	008597c0 	call	8597c <__mulsi3>
   8d888:	8809883a 	mov	r4,r17
   8d88c:	b80b883a 	mov	r5,r23
   8d890:	102b883a 	mov	r21,r2
   8d894:	00859740 	call	85974 <__umodsi3>
   8d898:	1004943a 	slli	r2,r2,16
   8d89c:	e006d43a 	srli	r3,fp,16
   8d8a0:	902d883a 	mov	r22,r18
   8d8a4:	10c4b03a 	or	r2,r2,r3
   8d8a8:	1540022e 	bgeu	r2,r21,8d8b4 <__umoddi3+0x388>
   8d8ac:	14c5883a 	add	r2,r2,r19
   8d8b0:	14c0ab2e 	bgeu	r2,r19,8db60 <__umoddi3+0x634>
   8d8b4:	1563c83a 	sub	r17,r2,r21
   8d8b8:	8809883a 	mov	r4,r17
   8d8bc:	b80b883a 	mov	r5,r23
   8d8c0:	008596c0 	call	8596c <__udivsi3>
   8d8c4:	100b883a 	mov	r5,r2
   8d8c8:	a009883a 	mov	r4,r20
   8d8cc:	008597c0 	call	8597c <__mulsi3>
   8d8d0:	8809883a 	mov	r4,r17
   8d8d4:	b80b883a 	mov	r5,r23
   8d8d8:	102b883a 	mov	r21,r2
   8d8dc:	00859740 	call	85974 <__umodsi3>
   8d8e0:	1004943a 	slli	r2,r2,16
   8d8e4:	e0ffffcc 	andi	r3,fp,65535
   8d8e8:	10c4b03a 	or	r2,r2,r3
   8d8ec:	1540042e 	bgeu	r2,r21,8d900 <__umoddi3+0x3d4>
   8d8f0:	14c5883a 	add	r2,r2,r19
   8d8f4:	14c00236 	bltu	r2,r19,8d900 <__umoddi3+0x3d4>
   8d8f8:	1540012e 	bgeu	r2,r21,8d900 <__umoddi3+0x3d4>
   8d8fc:	14c5883a 	add	r2,r2,r19
   8d900:	84a0983a 	sll	r16,r16,r18
   8d904:	156bc83a 	sub	r21,r2,r21
   8d908:	003f3106 	br	8d5d0 <__umoddi3+0xa4>
   8d90c:	3c8fc83a 	sub	r7,r7,r18
   8d910:	3486983a 	sll	r3,r6,r18
   8d914:	99c4d83a 	srl	r2,r19,r7
   8d918:	a9e2d83a 	srl	r17,r21,r7
   8d91c:	ac8c983a 	sll	r6,r21,r18
   8d920:	18acb03a 	or	r22,r3,r2
   8d924:	b02ed43a 	srli	r23,r22,16
   8d928:	81c4d83a 	srl	r2,r16,r7
   8d92c:	8809883a 	mov	r4,r17
   8d930:	b80b883a 	mov	r5,r23
   8d934:	308cb03a 	or	r6,r6,r2
   8d938:	d9c00315 	stw	r7,12(sp)
   8d93c:	d9800215 	stw	r6,8(sp)
   8d940:	b53fffcc 	andi	r20,r22,65535
   8d944:	008596c0 	call	8596c <__udivsi3>
   8d948:	100b883a 	mov	r5,r2
   8d94c:	a009883a 	mov	r4,r20
   8d950:	1039883a 	mov	fp,r2
   8d954:	008597c0 	call	8597c <__mulsi3>
   8d958:	8809883a 	mov	r4,r17
   8d95c:	b80b883a 	mov	r5,r23
   8d960:	102b883a 	mov	r21,r2
   8d964:	00859740 	call	85974 <__umodsi3>
   8d968:	d9000217 	ldw	r4,8(sp)
   8d96c:	1004943a 	slli	r2,r2,16
   8d970:	9ca6983a 	sll	r19,r19,r18
   8d974:	2006d43a 	srli	r3,r4,16
   8d978:	84a0983a 	sll	r16,r16,r18
   8d97c:	dcc00015 	stw	r19,0(sp)
   8d980:	10c4b03a 	or	r2,r2,r3
   8d984:	dc000115 	stw	r16,4(sp)
   8d988:	1540032e 	bgeu	r2,r21,8d998 <__umoddi3+0x46c>
   8d98c:	1585883a 	add	r2,r2,r22
   8d990:	e73fffc4 	addi	fp,fp,-1
   8d994:	15806e2e 	bgeu	r2,r22,8db50 <__umoddi3+0x624>
   8d998:	1563c83a 	sub	r17,r2,r21
   8d99c:	8809883a 	mov	r4,r17
   8d9a0:	b80b883a 	mov	r5,r23
   8d9a4:	008596c0 	call	8596c <__udivsi3>
   8d9a8:	100b883a 	mov	r5,r2
   8d9ac:	a009883a 	mov	r4,r20
   8d9b0:	1021883a 	mov	r16,r2
   8d9b4:	008597c0 	call	8597c <__mulsi3>
   8d9b8:	b80b883a 	mov	r5,r23
   8d9bc:	8809883a 	mov	r4,r17
   8d9c0:	1029883a 	mov	r20,r2
   8d9c4:	00859740 	call	85974 <__umodsi3>
   8d9c8:	d9400217 	ldw	r5,8(sp)
   8d9cc:	1004943a 	slli	r2,r2,16
   8d9d0:	28ffffcc 	andi	r3,r5,65535
   8d9d4:	10c4b03a 	or	r2,r2,r3
   8d9d8:	1500032e 	bgeu	r2,r20,8d9e8 <__umoddi3+0x4bc>
   8d9dc:	1585883a 	add	r2,r2,r22
   8d9e0:	843fffc4 	addi	r16,r16,-1
   8d9e4:	1580562e 	bgeu	r2,r22,8db40 <__umoddi3+0x614>
   8d9e8:	d9800017 	ldw	r6,0(sp)
   8d9ec:	e022943a 	slli	r17,fp,16
   8d9f0:	302ed43a 	srli	r23,r6,16
   8d9f4:	8462b03a 	or	r17,r16,r17
   8d9f8:	34ffffcc 	andi	r19,r6,65535
   8d9fc:	882ad43a 	srli	r21,r17,16
   8da00:	8c7fffcc 	andi	r17,r17,65535
   8da04:	8809883a 	mov	r4,r17
   8da08:	980b883a 	mov	r5,r19
   8da0c:	1521c83a 	sub	r16,r2,r20
   8da10:	008597c0 	call	8597c <__mulsi3>
   8da14:	8809883a 	mov	r4,r17
   8da18:	b80b883a 	mov	r5,r23
   8da1c:	1029883a 	mov	r20,r2
   8da20:	008597c0 	call	8597c <__mulsi3>
   8da24:	980b883a 	mov	r5,r19
   8da28:	a809883a 	mov	r4,r21
   8da2c:	1023883a 	mov	r17,r2
   8da30:	008597c0 	call	8597c <__mulsi3>
   8da34:	a809883a 	mov	r4,r21
   8da38:	b80b883a 	mov	r5,r23
   8da3c:	1027883a 	mov	r19,r2
   8da40:	008597c0 	call	8597c <__mulsi3>
   8da44:	100b883a 	mov	r5,r2
   8da48:	a004d43a 	srli	r2,r20,16
   8da4c:	8ce3883a 	add	r17,r17,r19
   8da50:	1449883a 	add	r4,r2,r17
   8da54:	24c0022e 	bgeu	r4,r19,8da60 <__umoddi3+0x534>
   8da58:	00800074 	movhi	r2,1
   8da5c:	288b883a 	add	r5,r5,r2
   8da60:	2004d43a 	srli	r2,r4,16
   8da64:	2008943a 	slli	r4,r4,16
   8da68:	a0ffffcc 	andi	r3,r20,65535
   8da6c:	288d883a 	add	r6,r5,r2
   8da70:	20c9883a 	add	r4,r4,r3
   8da74:	81800b36 	bltu	r16,r6,8daa4 <__umoddi3+0x578>
   8da78:	81804026 	beq	r16,r6,8db7c <__umoddi3+0x650>
   8da7c:	818dc83a 	sub	r6,r16,r6
   8da80:	00000f06 	br	8dac0 <__umoddi3+0x594>
   8da84:	30c5c83a 	sub	r2,r6,r3
   8da88:	182d883a 	mov	r22,r3
   8da8c:	8084d83a 	srl	r2,r16,r2
   8da90:	a8c6983a 	sll	r3,r21,r3
   8da94:	9da6983a 	sll	r19,r19,r22
   8da98:	85a0983a 	sll	r16,r16,r22
   8da9c:	18aab03a 	or	r21,r3,r2
   8daa0:	003f1d06 	br	8d718 <__umoddi3+0x1ec>
   8daa4:	d8c00017 	ldw	r3,0(sp)
   8daa8:	20c5c83a 	sub	r2,r4,r3
   8daac:	2089803a 	cmpltu	r4,r4,r2
   8dab0:	3587c83a 	sub	r3,r6,r22
   8dab4:	1907c83a 	sub	r3,r3,r4
   8dab8:	80cdc83a 	sub	r6,r16,r3
   8dabc:	1009883a 	mov	r4,r2
   8dac0:	d9400117 	ldw	r5,4(sp)
   8dac4:	2905c83a 	sub	r2,r5,r4
   8dac8:	2887803a 	cmpltu	r3,r5,r2
   8dacc:	30c7c83a 	sub	r3,r6,r3
   8dad0:	d9800317 	ldw	r6,12(sp)
   8dad4:	1484d83a 	srl	r2,r2,r18
   8dad8:	1988983a 	sll	r4,r3,r6
   8dadc:	1c86d83a 	srl	r3,r3,r18
   8dae0:	2088b03a 	or	r4,r4,r2
   8dae4:	2011883a 	mov	r8,r4
   8dae8:	1813883a 	mov	r9,r3
   8daec:	d9000415 	stw	r4,16(sp)
   8daf0:	d8c00515 	stw	r3,20(sp)
   8daf4:	003ed406 	br	8d648 <__umoddi3+0x11c>
   8daf8:	01400604 	movi	r5,24
   8dafc:	2805883a 	mov	r2,r5
   8db00:	003ea606 	br	8d59c <__umoddi3+0x70>
   8db04:	01400204 	movi	r5,8
   8db08:	2805883a 	mov	r2,r5
   8db0c:	003ea306 	br	8d59c <__umoddi3+0x70>
   8db10:	01400204 	movi	r5,8
   8db14:	2805883a 	mov	r2,r5
   8db18:	003edf06 	br	8d698 <__umoddi3+0x16c>
   8db1c:	01400204 	movi	r5,8
   8db20:	2805883a 	mov	r2,r5
   8db24:	003ef206 	br	8d6f0 <__umoddi3+0x1c4>
   8db28:	01400604 	movi	r5,24
   8db2c:	2805883a 	mov	r2,r5
   8db30:	003eef06 	br	8d6f0 <__umoddi3+0x1c4>
   8db34:	01400604 	movi	r5,24
   8db38:	2805883a 	mov	r2,r5
   8db3c:	003ed606 	br	8d698 <__umoddi3+0x16c>
   8db40:	153fa92e 	bgeu	r2,r20,8d9e8 <__umoddi3+0x4bc>
   8db44:	843fffc4 	addi	r16,r16,-1
   8db48:	1585883a 	add	r2,r2,r22
   8db4c:	003fa606 	br	8d9e8 <__umoddi3+0x4bc>
   8db50:	157f912e 	bgeu	r2,r21,8d998 <__umoddi3+0x46c>
   8db54:	e73fffc4 	addi	fp,fp,-1
   8db58:	1585883a 	add	r2,r2,r22
   8db5c:	003f8e06 	br	8d998 <__umoddi3+0x46c>
   8db60:	157f542e 	bgeu	r2,r21,8d8b4 <__umoddi3+0x388>
   8db64:	14c5883a 	add	r2,r2,r19
   8db68:	003f5206 	br	8d8b4 <__umoddi3+0x388>
   8db6c:	14c5883a 	add	r2,r2,r19
   8db70:	003efc06 	br	8d764 <__umoddi3+0x238>
   8db74:	14c5883a 	add	r2,r2,r19
   8db78:	003ea606 	br	8d614 <__umoddi3+0xe8>
   8db7c:	d8800117 	ldw	r2,4(sp)
   8db80:	113fc836 	bltu	r2,r4,8daa4 <__umoddi3+0x578>
   8db84:	000d883a 	mov	r6,zero
   8db88:	003fcd06 	br	8dac0 <__umoddi3+0x594>

0008db8c <_fpadd_parts>:
   8db8c:	defff804 	addi	sp,sp,-32
   8db90:	dcc00315 	stw	r19,12(sp)
   8db94:	2027883a 	mov	r19,r4
   8db98:	21000017 	ldw	r4,0(r4)
   8db9c:	00c00044 	movi	r3,1
   8dba0:	dd400515 	stw	r21,20(sp)
   8dba4:	dd000415 	stw	r20,16(sp)
   8dba8:	ddc00715 	stw	r23,28(sp)
   8dbac:	dd800615 	stw	r22,24(sp)
   8dbb0:	dc800215 	stw	r18,8(sp)
   8dbb4:	dc400115 	stw	r17,4(sp)
   8dbb8:	dc000015 	stw	r16,0(sp)
   8dbbc:	282b883a 	mov	r21,r5
   8dbc0:	3029883a 	mov	r20,r6
   8dbc4:	1900632e 	bgeu	r3,r4,8dd54 <_fpadd_parts+0x1c8>
   8dbc8:	28800017 	ldw	r2,0(r5)
   8dbcc:	1880812e 	bgeu	r3,r2,8ddd4 <_fpadd_parts+0x248>
   8dbd0:	00c00104 	movi	r3,4
   8dbd4:	20c0dc26 	beq	r4,r3,8df48 <_fpadd_parts+0x3bc>
   8dbd8:	10c07e26 	beq	r2,r3,8ddd4 <_fpadd_parts+0x248>
   8dbdc:	00c00084 	movi	r3,2
   8dbe0:	10c06726 	beq	r2,r3,8dd80 <_fpadd_parts+0x1f4>
   8dbe4:	20c07b26 	beq	r4,r3,8ddd4 <_fpadd_parts+0x248>
   8dbe8:	9dc00217 	ldw	r23,8(r19)
   8dbec:	28c00217 	ldw	r3,8(r5)
   8dbf0:	9c400317 	ldw	r17,12(r19)
   8dbf4:	2bc00317 	ldw	r15,12(r5)
   8dbf8:	b8cdc83a 	sub	r6,r23,r3
   8dbfc:	9c800417 	ldw	r18,16(r19)
   8dc00:	2c000417 	ldw	r16,16(r5)
   8dc04:	3009883a 	mov	r4,r6
   8dc08:	30009716 	blt	r6,zero,8de68 <_fpadd_parts+0x2dc>
   8dc0c:	00800fc4 	movi	r2,63
   8dc10:	11806b16 	blt	r2,r6,8ddc0 <_fpadd_parts+0x234>
   8dc14:	0100a40e 	bge	zero,r4,8dea8 <_fpadd_parts+0x31c>
   8dc18:	35bff804 	addi	r22,r6,-32
   8dc1c:	b000bc16 	blt	r22,zero,8df10 <_fpadd_parts+0x384>
   8dc20:	8596d83a 	srl	r11,r16,r22
   8dc24:	0019883a 	mov	r12,zero
   8dc28:	0013883a 	mov	r9,zero
   8dc2c:	01000044 	movi	r4,1
   8dc30:	0015883a 	mov	r10,zero
   8dc34:	b000be16 	blt	r22,zero,8df30 <_fpadd_parts+0x3a4>
   8dc38:	2590983a 	sll	r8,r4,r22
   8dc3c:	000f883a 	mov	r7,zero
   8dc40:	00bfffc4 	movi	r2,-1
   8dc44:	3889883a 	add	r4,r7,r2
   8dc48:	408b883a 	add	r5,r8,r2
   8dc4c:	21cd803a 	cmpltu	r6,r4,r7
   8dc50:	314b883a 	add	r5,r6,r5
   8dc54:	7904703a 	and	r2,r15,r4
   8dc58:	8146703a 	and	r3,r16,r5
   8dc5c:	10c4b03a 	or	r2,r2,r3
   8dc60:	10000226 	beq	r2,zero,8dc6c <_fpadd_parts+0xe0>
   8dc64:	02400044 	movi	r9,1
   8dc68:	0015883a 	mov	r10,zero
   8dc6c:	5a5eb03a 	or	r15,r11,r9
   8dc70:	62a0b03a 	or	r16,r12,r10
   8dc74:	99400117 	ldw	r5,4(r19)
   8dc78:	a8800117 	ldw	r2,4(r21)
   8dc7c:	28806e26 	beq	r5,r2,8de38 <_fpadd_parts+0x2ac>
   8dc80:	28006626 	beq	r5,zero,8de1c <_fpadd_parts+0x290>
   8dc84:	7c45c83a 	sub	r2,r15,r17
   8dc88:	7889803a 	cmpltu	r4,r15,r2
   8dc8c:	8487c83a 	sub	r3,r16,r18
   8dc90:	1909c83a 	sub	r4,r3,r4
   8dc94:	100d883a 	mov	r6,r2
   8dc98:	200f883a 	mov	r7,r4
   8dc9c:	38007716 	blt	r7,zero,8de7c <_fpadd_parts+0x2f0>
   8dca0:	a5c00215 	stw	r23,8(r20)
   8dca4:	a1c00415 	stw	r7,16(r20)
   8dca8:	a0000115 	stw	zero,4(r20)
   8dcac:	a1800315 	stw	r6,12(r20)
   8dcb0:	a2000317 	ldw	r8,12(r20)
   8dcb4:	a2400417 	ldw	r9,16(r20)
   8dcb8:	00bfffc4 	movi	r2,-1
   8dcbc:	408b883a 	add	r5,r8,r2
   8dcc0:	2a09803a 	cmpltu	r4,r5,r8
   8dcc4:	488d883a 	add	r6,r9,r2
   8dcc8:	01c40034 	movhi	r7,4096
   8dccc:	39ffffc4 	addi	r7,r7,-1
   8dcd0:	218d883a 	add	r6,r4,r6
   8dcd4:	39801736 	bltu	r7,r6,8dd34 <_fpadd_parts+0x1a8>
   8dcd8:	31c06526 	beq	r6,r7,8de70 <_fpadd_parts+0x2e4>
   8dcdc:	a3000217 	ldw	r12,8(r20)
   8dce0:	4209883a 	add	r4,r8,r8
   8dce4:	00bfffc4 	movi	r2,-1
   8dce8:	220f803a 	cmpltu	r7,r4,r8
   8dcec:	4a4b883a 	add	r5,r9,r9
   8dcf0:	394f883a 	add	r7,r7,r5
   8dcf4:	2095883a 	add	r10,r4,r2
   8dcf8:	3897883a 	add	r11,r7,r2
   8dcfc:	510d803a 	cmpltu	r6,r10,r4
   8dd00:	6099883a 	add	r12,r12,r2
   8dd04:	32d7883a 	add	r11,r6,r11
   8dd08:	00840034 	movhi	r2,4096
   8dd0c:	10bfffc4 	addi	r2,r2,-1
   8dd10:	2011883a 	mov	r8,r4
   8dd14:	3813883a 	mov	r9,r7
   8dd18:	a1000315 	stw	r4,12(r20)
   8dd1c:	a1c00415 	stw	r7,16(r20)
   8dd20:	a3000215 	stw	r12,8(r20)
   8dd24:	12c00336 	bltu	r2,r11,8dd34 <_fpadd_parts+0x1a8>
   8dd28:	58bfed1e 	bne	r11,r2,8dce0 <_fpadd_parts+0x154>
   8dd2c:	00bfff84 	movi	r2,-2
   8dd30:	12bfeb2e 	bgeu	r2,r10,8dce0 <_fpadd_parts+0x154>
   8dd34:	a2800417 	ldw	r10,16(r20)
   8dd38:	008000c4 	movi	r2,3
   8dd3c:	00c80034 	movhi	r3,8192
   8dd40:	18ffffc4 	addi	r3,r3,-1
   8dd44:	a2400317 	ldw	r9,12(r20)
   8dd48:	a0800015 	stw	r2,0(r20)
   8dd4c:	1a802336 	bltu	r3,r10,8dddc <_fpadd_parts+0x250>
   8dd50:	a027883a 	mov	r19,r20
   8dd54:	9805883a 	mov	r2,r19
   8dd58:	ddc00717 	ldw	r23,28(sp)
   8dd5c:	dd800617 	ldw	r22,24(sp)
   8dd60:	dd400517 	ldw	r21,20(sp)
   8dd64:	dd000417 	ldw	r20,16(sp)
   8dd68:	dcc00317 	ldw	r19,12(sp)
   8dd6c:	dc800217 	ldw	r18,8(sp)
   8dd70:	dc400117 	ldw	r17,4(sp)
   8dd74:	dc000017 	ldw	r16,0(sp)
   8dd78:	dec00804 	addi	sp,sp,32
   8dd7c:	f800283a 	ret
   8dd80:	20fff41e 	bne	r4,r3,8dd54 <_fpadd_parts+0x1c8>
   8dd84:	31000015 	stw	r4,0(r6)
   8dd88:	98800117 	ldw	r2,4(r19)
   8dd8c:	30800115 	stw	r2,4(r6)
   8dd90:	98c00217 	ldw	r3,8(r19)
   8dd94:	30c00215 	stw	r3,8(r6)
   8dd98:	98800317 	ldw	r2,12(r19)
   8dd9c:	30800315 	stw	r2,12(r6)
   8dda0:	98c00417 	ldw	r3,16(r19)
   8dda4:	30c00415 	stw	r3,16(r6)
   8dda8:	98800117 	ldw	r2,4(r19)
   8ddac:	28c00117 	ldw	r3,4(r5)
   8ddb0:	3027883a 	mov	r19,r6
   8ddb4:	10c4703a 	and	r2,r2,r3
   8ddb8:	30800115 	stw	r2,4(r6)
   8ddbc:	003fe506 	br	8dd54 <_fpadd_parts+0x1c8>
   8ddc0:	1dc02616 	blt	r3,r23,8de5c <_fpadd_parts+0x2d0>
   8ddc4:	0023883a 	mov	r17,zero
   8ddc8:	182f883a 	mov	r23,r3
   8ddcc:	0025883a 	mov	r18,zero
   8ddd0:	003fa806 	br	8dc74 <_fpadd_parts+0xe8>
   8ddd4:	a827883a 	mov	r19,r21
   8ddd8:	003fde06 	br	8dd54 <_fpadd_parts+0x1c8>
   8dddc:	01800044 	movi	r6,1
   8dde0:	500497fa 	slli	r2,r10,31
   8dde4:	4808d07a 	srli	r4,r9,1
   8dde8:	518ad83a 	srl	r5,r10,r6
   8ddec:	a2000217 	ldw	r8,8(r20)
   8ddf0:	1108b03a 	or	r4,r2,r4
   8ddf4:	0007883a 	mov	r3,zero
   8ddf8:	4984703a 	and	r2,r9,r6
   8ddfc:	208cb03a 	or	r6,r4,r2
   8de00:	28ceb03a 	or	r7,r5,r3
   8de04:	42000044 	addi	r8,r8,1
   8de08:	a027883a 	mov	r19,r20
   8de0c:	a1c00415 	stw	r7,16(r20)
   8de10:	a2000215 	stw	r8,8(r20)
   8de14:	a1800315 	stw	r6,12(r20)
   8de18:	003fce06 	br	8dd54 <_fpadd_parts+0x1c8>
   8de1c:	8bc5c83a 	sub	r2,r17,r15
   8de20:	8889803a 	cmpltu	r4,r17,r2
   8de24:	9407c83a 	sub	r3,r18,r16
   8de28:	1909c83a 	sub	r4,r3,r4
   8de2c:	100d883a 	mov	r6,r2
   8de30:	200f883a 	mov	r7,r4
   8de34:	003f9906 	br	8dc9c <_fpadd_parts+0x110>
   8de38:	7c45883a 	add	r2,r15,r17
   8de3c:	13c9803a 	cmpltu	r4,r2,r15
   8de40:	8487883a 	add	r3,r16,r18
   8de44:	20c9883a 	add	r4,r4,r3
   8de48:	a1400115 	stw	r5,4(r20)
   8de4c:	a5c00215 	stw	r23,8(r20)
   8de50:	a0800315 	stw	r2,12(r20)
   8de54:	a1000415 	stw	r4,16(r20)
   8de58:	003fb606 	br	8dd34 <_fpadd_parts+0x1a8>
   8de5c:	001f883a 	mov	r15,zero
   8de60:	0021883a 	mov	r16,zero
   8de64:	003f8306 	br	8dc74 <_fpadd_parts+0xe8>
   8de68:	018dc83a 	sub	r6,zero,r6
   8de6c:	003f6706 	br	8dc0c <_fpadd_parts+0x80>
   8de70:	00bfff84 	movi	r2,-2
   8de74:	117faf36 	bltu	r2,r5,8dd34 <_fpadd_parts+0x1a8>
   8de78:	003f9806 	br	8dcdc <_fpadd_parts+0x150>
   8de7c:	0005883a 	mov	r2,zero
   8de80:	1189c83a 	sub	r4,r2,r6
   8de84:	1105803a 	cmpltu	r2,r2,r4
   8de88:	01cbc83a 	sub	r5,zero,r7
   8de8c:	2885c83a 	sub	r2,r5,r2
   8de90:	01800044 	movi	r6,1
   8de94:	a1800115 	stw	r6,4(r20)
   8de98:	a5c00215 	stw	r23,8(r20)
   8de9c:	a1000315 	stw	r4,12(r20)
   8dea0:	a0800415 	stw	r2,16(r20)
   8dea4:	003f8206 	br	8dcb0 <_fpadd_parts+0x124>
   8dea8:	203f7226 	beq	r4,zero,8dc74 <_fpadd_parts+0xe8>
   8deac:	35bff804 	addi	r22,r6,-32
   8deb0:	b9af883a 	add	r23,r23,r6
   8deb4:	b0003116 	blt	r22,zero,8df7c <_fpadd_parts+0x3f0>
   8deb8:	959ad83a 	srl	r13,r18,r22
   8debc:	001d883a 	mov	r14,zero
   8dec0:	000f883a 	mov	r7,zero
   8dec4:	01000044 	movi	r4,1
   8dec8:	0011883a 	mov	r8,zero
   8decc:	b0002516 	blt	r22,zero,8df64 <_fpadd_parts+0x3d8>
   8ded0:	2594983a 	sll	r10,r4,r22
   8ded4:	0013883a 	mov	r9,zero
   8ded8:	00bfffc4 	movi	r2,-1
   8dedc:	4889883a 	add	r4,r9,r2
   8dee0:	508b883a 	add	r5,r10,r2
   8dee4:	224d803a 	cmpltu	r6,r4,r9
   8dee8:	314b883a 	add	r5,r6,r5
   8deec:	8904703a 	and	r2,r17,r4
   8def0:	9146703a 	and	r3,r18,r5
   8def4:	10c4b03a 	or	r2,r2,r3
   8def8:	10000226 	beq	r2,zero,8df04 <_fpadd_parts+0x378>
   8defc:	01c00044 	movi	r7,1
   8df00:	0011883a 	mov	r8,zero
   8df04:	69e2b03a 	or	r17,r13,r7
   8df08:	7224b03a 	or	r18,r14,r8
   8df0c:	003f5906 	br	8dc74 <_fpadd_parts+0xe8>
   8df10:	8407883a 	add	r3,r16,r16
   8df14:	008007c4 	movi	r2,31
   8df18:	1185c83a 	sub	r2,r2,r6
   8df1c:	1886983a 	sll	r3,r3,r2
   8df20:	7996d83a 	srl	r11,r15,r6
   8df24:	8198d83a 	srl	r12,r16,r6
   8df28:	1ad6b03a 	or	r11,r3,r11
   8df2c:	003f3e06 	br	8dc28 <_fpadd_parts+0x9c>
   8df30:	2006d07a 	srli	r3,r4,1
   8df34:	008007c4 	movi	r2,31
   8df38:	1185c83a 	sub	r2,r2,r6
   8df3c:	1890d83a 	srl	r8,r3,r2
   8df40:	218e983a 	sll	r7,r4,r6
   8df44:	003f3e06 	br	8dc40 <_fpadd_parts+0xb4>
   8df48:	113f821e 	bne	r2,r4,8dd54 <_fpadd_parts+0x1c8>
   8df4c:	28c00117 	ldw	r3,4(r5)
   8df50:	98800117 	ldw	r2,4(r19)
   8df54:	10ff7f26 	beq	r2,r3,8dd54 <_fpadd_parts+0x1c8>
   8df58:	04c00274 	movhi	r19,9
   8df5c:	9cc95604 	addi	r19,r19,9560
   8df60:	003f7c06 	br	8dd54 <_fpadd_parts+0x1c8>
   8df64:	2006d07a 	srli	r3,r4,1
   8df68:	008007c4 	movi	r2,31
   8df6c:	1185c83a 	sub	r2,r2,r6
   8df70:	1894d83a 	srl	r10,r3,r2
   8df74:	2192983a 	sll	r9,r4,r6
   8df78:	003fd706 	br	8ded8 <_fpadd_parts+0x34c>
   8df7c:	9487883a 	add	r3,r18,r18
   8df80:	008007c4 	movi	r2,31
   8df84:	1185c83a 	sub	r2,r2,r6
   8df88:	1886983a 	sll	r3,r3,r2
   8df8c:	899ad83a 	srl	r13,r17,r6
   8df90:	919cd83a 	srl	r14,r18,r6
   8df94:	1b5ab03a 	or	r13,r3,r13
   8df98:	003fc906 	br	8dec0 <_fpadd_parts+0x334>

0008df9c <__subdf3>:
   8df9c:	deffea04 	addi	sp,sp,-88
   8dfa0:	dcc01415 	stw	r19,80(sp)
   8dfa4:	dcc00404 	addi	r19,sp,16
   8dfa8:	2011883a 	mov	r8,r4
   8dfac:	2813883a 	mov	r9,r5
   8dfb0:	dc401315 	stw	r17,76(sp)
   8dfb4:	d809883a 	mov	r4,sp
   8dfb8:	980b883a 	mov	r5,r19
   8dfbc:	dc400904 	addi	r17,sp,36
   8dfc0:	dfc01515 	stw	ra,84(sp)
   8dfc4:	da400115 	stw	r9,4(sp)
   8dfc8:	d9c00315 	stw	r7,12(sp)
   8dfcc:	da000015 	stw	r8,0(sp)
   8dfd0:	d9800215 	stw	r6,8(sp)
   8dfd4:	008f1700 	call	8f170 <__unpack_d>
   8dfd8:	d9000204 	addi	r4,sp,8
   8dfdc:	880b883a 	mov	r5,r17
   8dfe0:	008f1700 	call	8f170 <__unpack_d>
   8dfe4:	d8800a17 	ldw	r2,40(sp)
   8dfe8:	880b883a 	mov	r5,r17
   8dfec:	9809883a 	mov	r4,r19
   8dff0:	d9800e04 	addi	r6,sp,56
   8dff4:	1080005c 	xori	r2,r2,1
   8dff8:	d8800a15 	stw	r2,40(sp)
   8dffc:	008db8c0 	call	8db8c <_fpadd_parts>
   8e000:	1009883a 	mov	r4,r2
   8e004:	008ee5c0 	call	8ee5c <__pack_d>
   8e008:	dfc01517 	ldw	ra,84(sp)
   8e00c:	dcc01417 	ldw	r19,80(sp)
   8e010:	dc401317 	ldw	r17,76(sp)
   8e014:	dec01604 	addi	sp,sp,88
   8e018:	f800283a 	ret

0008e01c <__adddf3>:
   8e01c:	deffea04 	addi	sp,sp,-88
   8e020:	dcc01415 	stw	r19,80(sp)
   8e024:	dcc00404 	addi	r19,sp,16
   8e028:	2011883a 	mov	r8,r4
   8e02c:	2813883a 	mov	r9,r5
   8e030:	dc401315 	stw	r17,76(sp)
   8e034:	d809883a 	mov	r4,sp
   8e038:	980b883a 	mov	r5,r19
   8e03c:	dc400904 	addi	r17,sp,36
   8e040:	dfc01515 	stw	ra,84(sp)
   8e044:	da400115 	stw	r9,4(sp)
   8e048:	d9c00315 	stw	r7,12(sp)
   8e04c:	da000015 	stw	r8,0(sp)
   8e050:	d9800215 	stw	r6,8(sp)
   8e054:	008f1700 	call	8f170 <__unpack_d>
   8e058:	d9000204 	addi	r4,sp,8
   8e05c:	880b883a 	mov	r5,r17
   8e060:	008f1700 	call	8f170 <__unpack_d>
   8e064:	d9800e04 	addi	r6,sp,56
   8e068:	9809883a 	mov	r4,r19
   8e06c:	880b883a 	mov	r5,r17
   8e070:	008db8c0 	call	8db8c <_fpadd_parts>
   8e074:	1009883a 	mov	r4,r2
   8e078:	008ee5c0 	call	8ee5c <__pack_d>
   8e07c:	dfc01517 	ldw	ra,84(sp)
   8e080:	dcc01417 	ldw	r19,80(sp)
   8e084:	dc401317 	ldw	r17,76(sp)
   8e088:	dec01604 	addi	sp,sp,88
   8e08c:	f800283a 	ret

0008e090 <__muldf3>:
   8e090:	deffe004 	addi	sp,sp,-128
   8e094:	dc401815 	stw	r17,96(sp)
   8e098:	dc400404 	addi	r17,sp,16
   8e09c:	2011883a 	mov	r8,r4
   8e0a0:	2813883a 	mov	r9,r5
   8e0a4:	dc001715 	stw	r16,92(sp)
   8e0a8:	d809883a 	mov	r4,sp
   8e0ac:	880b883a 	mov	r5,r17
   8e0b0:	dc000904 	addi	r16,sp,36
   8e0b4:	dfc01f15 	stw	ra,124(sp)
   8e0b8:	da400115 	stw	r9,4(sp)
   8e0bc:	d9c00315 	stw	r7,12(sp)
   8e0c0:	da000015 	stw	r8,0(sp)
   8e0c4:	d9800215 	stw	r6,8(sp)
   8e0c8:	ddc01e15 	stw	r23,120(sp)
   8e0cc:	dd801d15 	stw	r22,116(sp)
   8e0d0:	dd401c15 	stw	r21,112(sp)
   8e0d4:	dd001b15 	stw	r20,108(sp)
   8e0d8:	dcc01a15 	stw	r19,104(sp)
   8e0dc:	dc801915 	stw	r18,100(sp)
   8e0e0:	008f1700 	call	8f170 <__unpack_d>
   8e0e4:	d9000204 	addi	r4,sp,8
   8e0e8:	800b883a 	mov	r5,r16
   8e0ec:	008f1700 	call	8f170 <__unpack_d>
   8e0f0:	d9000417 	ldw	r4,16(sp)
   8e0f4:	00800044 	movi	r2,1
   8e0f8:	1100102e 	bgeu	r2,r4,8e13c <__muldf3+0xac>
   8e0fc:	d8c00917 	ldw	r3,36(sp)
   8e100:	10c0062e 	bgeu	r2,r3,8e11c <__muldf3+0x8c>
   8e104:	00800104 	movi	r2,4
   8e108:	20800a26 	beq	r4,r2,8e134 <__muldf3+0xa4>
   8e10c:	1880cc26 	beq	r3,r2,8e440 <__muldf3+0x3b0>
   8e110:	00800084 	movi	r2,2
   8e114:	20800926 	beq	r4,r2,8e13c <__muldf3+0xac>
   8e118:	1880191e 	bne	r3,r2,8e180 <__muldf3+0xf0>
   8e11c:	d8c00a17 	ldw	r3,40(sp)
   8e120:	d8800517 	ldw	r2,20(sp)
   8e124:	8009883a 	mov	r4,r16
   8e128:	10c4c03a 	cmpne	r2,r2,r3
   8e12c:	d8800a15 	stw	r2,40(sp)
   8e130:	00000706 	br	8e150 <__muldf3+0xc0>
   8e134:	00800084 	movi	r2,2
   8e138:	1880c326 	beq	r3,r2,8e448 <__muldf3+0x3b8>
   8e13c:	d8800517 	ldw	r2,20(sp)
   8e140:	d8c00a17 	ldw	r3,40(sp)
   8e144:	8809883a 	mov	r4,r17
   8e148:	10c4c03a 	cmpne	r2,r2,r3
   8e14c:	d8800515 	stw	r2,20(sp)
   8e150:	008ee5c0 	call	8ee5c <__pack_d>
   8e154:	dfc01f17 	ldw	ra,124(sp)
   8e158:	ddc01e17 	ldw	r23,120(sp)
   8e15c:	dd801d17 	ldw	r22,116(sp)
   8e160:	dd401c17 	ldw	r21,112(sp)
   8e164:	dd001b17 	ldw	r20,108(sp)
   8e168:	dcc01a17 	ldw	r19,104(sp)
   8e16c:	dc801917 	ldw	r18,100(sp)
   8e170:	dc401817 	ldw	r17,96(sp)
   8e174:	dc001717 	ldw	r16,92(sp)
   8e178:	dec02004 	addi	sp,sp,128
   8e17c:	f800283a 	ret
   8e180:	dd800717 	ldw	r22,28(sp)
   8e184:	dc800c17 	ldw	r18,48(sp)
   8e188:	002b883a 	mov	r21,zero
   8e18c:	0023883a 	mov	r17,zero
   8e190:	a80b883a 	mov	r5,r21
   8e194:	b00d883a 	mov	r6,r22
   8e198:	880f883a 	mov	r7,r17
   8e19c:	ddc00817 	ldw	r23,32(sp)
   8e1a0:	dcc00d17 	ldw	r19,52(sp)
   8e1a4:	9009883a 	mov	r4,r18
   8e1a8:	008ecb80 	call	8ecb8 <__muldi3>
   8e1ac:	001b883a 	mov	r13,zero
   8e1b0:	680f883a 	mov	r7,r13
   8e1b4:	b009883a 	mov	r4,r22
   8e1b8:	000b883a 	mov	r5,zero
   8e1bc:	980d883a 	mov	r6,r19
   8e1c0:	b82d883a 	mov	r22,r23
   8e1c4:	002f883a 	mov	r23,zero
   8e1c8:	db401615 	stw	r13,88(sp)
   8e1cc:	d8801315 	stw	r2,76(sp)
   8e1d0:	d8c01415 	stw	r3,80(sp)
   8e1d4:	dcc01515 	stw	r19,84(sp)
   8e1d8:	008ecb80 	call	8ecb8 <__muldi3>
   8e1dc:	b00d883a 	mov	r6,r22
   8e1e0:	000b883a 	mov	r5,zero
   8e1e4:	9009883a 	mov	r4,r18
   8e1e8:	b80f883a 	mov	r7,r23
   8e1ec:	1021883a 	mov	r16,r2
   8e1f0:	1823883a 	mov	r17,r3
   8e1f4:	008ecb80 	call	8ecb8 <__muldi3>
   8e1f8:	8085883a 	add	r2,r16,r2
   8e1fc:	140d803a 	cmpltu	r6,r2,r16
   8e200:	88c7883a 	add	r3,r17,r3
   8e204:	30cd883a 	add	r6,r6,r3
   8e208:	1029883a 	mov	r20,r2
   8e20c:	302b883a 	mov	r21,r6
   8e210:	da801317 	ldw	r10,76(sp)
   8e214:	dac01417 	ldw	r11,80(sp)
   8e218:	db001517 	ldw	r12,84(sp)
   8e21c:	db401617 	ldw	r13,88(sp)
   8e220:	3440612e 	bgeu	r6,r17,8e3a8 <__muldf3+0x318>
   8e224:	0009883a 	mov	r4,zero
   8e228:	5105883a 	add	r2,r10,r4
   8e22c:	128d803a 	cmpltu	r6,r2,r10
   8e230:	5d07883a 	add	r3,r11,r20
   8e234:	30cd883a 	add	r6,r6,r3
   8e238:	0021883a 	mov	r16,zero
   8e23c:	04400044 	movi	r17,1
   8e240:	1025883a 	mov	r18,r2
   8e244:	3027883a 	mov	r19,r6
   8e248:	32c06236 	bltu	r6,r11,8e3d4 <__muldf3+0x344>
   8e24c:	59807a26 	beq	r11,r6,8e438 <__muldf3+0x3a8>
   8e250:	680b883a 	mov	r5,r13
   8e254:	b80f883a 	mov	r7,r23
   8e258:	6009883a 	mov	r4,r12
   8e25c:	b00d883a 	mov	r6,r22
   8e260:	008ecb80 	call	8ecb8 <__muldi3>
   8e264:	1009883a 	mov	r4,r2
   8e268:	000f883a 	mov	r7,zero
   8e26c:	1545883a 	add	r2,r2,r21
   8e270:	1111803a 	cmpltu	r8,r2,r4
   8e274:	19c7883a 	add	r3,r3,r7
   8e278:	40c7883a 	add	r3,r8,r3
   8e27c:	88cb883a 	add	r5,r17,r3
   8e280:	d8c00617 	ldw	r3,24(sp)
   8e284:	8089883a 	add	r4,r16,r2
   8e288:	d8800b17 	ldw	r2,44(sp)
   8e28c:	18c00104 	addi	r3,r3,4
   8e290:	240d803a 	cmpltu	r6,r4,r16
   8e294:	10c7883a 	add	r3,r2,r3
   8e298:	2013883a 	mov	r9,r4
   8e29c:	d8800a17 	ldw	r2,40(sp)
   8e2a0:	d9000517 	ldw	r4,20(sp)
   8e2a4:	314d883a 	add	r6,r6,r5
   8e2a8:	3015883a 	mov	r10,r6
   8e2ac:	2088c03a 	cmpne	r4,r4,r2
   8e2b0:	00880034 	movhi	r2,8192
   8e2b4:	10bfffc4 	addi	r2,r2,-1
   8e2b8:	d9000f15 	stw	r4,60(sp)
   8e2bc:	d8c01015 	stw	r3,64(sp)
   8e2c0:	1180162e 	bgeu	r2,r6,8e31c <__muldf3+0x28c>
   8e2c4:	1811883a 	mov	r8,r3
   8e2c8:	101f883a 	mov	r15,r2
   8e2cc:	980497fa 	slli	r2,r19,31
   8e2d0:	9016d07a 	srli	r11,r18,1
   8e2d4:	500697fa 	slli	r3,r10,31
   8e2d8:	480cd07a 	srli	r6,r9,1
   8e2dc:	500ed07a 	srli	r7,r10,1
   8e2e0:	12d6b03a 	or	r11,r2,r11
   8e2e4:	00800044 	movi	r2,1
   8e2e8:	198cb03a 	or	r6,r3,r6
   8e2ec:	4888703a 	and	r4,r9,r2
   8e2f0:	9818d07a 	srli	r12,r19,1
   8e2f4:	001b883a 	mov	r13,zero
   8e2f8:	03a00034 	movhi	r14,32768
   8e2fc:	3013883a 	mov	r9,r6
   8e300:	3815883a 	mov	r10,r7
   8e304:	4091883a 	add	r8,r8,r2
   8e308:	20000226 	beq	r4,zero,8e314 <__muldf3+0x284>
   8e30c:	5b64b03a 	or	r18,r11,r13
   8e310:	63a6b03a 	or	r19,r12,r14
   8e314:	7abfed36 	bltu	r15,r10,8e2cc <__muldf3+0x23c>
   8e318:	da001015 	stw	r8,64(sp)
   8e31c:	00840034 	movhi	r2,4096
   8e320:	10bfffc4 	addi	r2,r2,-1
   8e324:	12801436 	bltu	r2,r10,8e378 <__muldf3+0x2e8>
   8e328:	da001017 	ldw	r8,64(sp)
   8e32c:	101f883a 	mov	r15,r2
   8e330:	4a45883a 	add	r2,r9,r9
   8e334:	124d803a 	cmpltu	r6,r2,r9
   8e338:	5287883a 	add	r3,r10,r10
   8e33c:	9497883a 	add	r11,r18,r18
   8e340:	5c8f803a 	cmpltu	r7,r11,r18
   8e344:	9cd9883a 	add	r12,r19,r19
   8e348:	01000044 	movi	r4,1
   8e34c:	30cd883a 	add	r6,r6,r3
   8e350:	3b0f883a 	add	r7,r7,r12
   8e354:	423fffc4 	addi	r8,r8,-1
   8e358:	1013883a 	mov	r9,r2
   8e35c:	3015883a 	mov	r10,r6
   8e360:	111ab03a 	or	r13,r2,r4
   8e364:	98003016 	blt	r19,zero,8e428 <__muldf3+0x398>
   8e368:	5825883a 	mov	r18,r11
   8e36c:	3827883a 	mov	r19,r7
   8e370:	7abfef2e 	bgeu	r15,r10,8e330 <__muldf3+0x2a0>
   8e374:	da001015 	stw	r8,64(sp)
   8e378:	00803fc4 	movi	r2,255
   8e37c:	488e703a 	and	r7,r9,r2
   8e380:	00802004 	movi	r2,128
   8e384:	0007883a 	mov	r3,zero
   8e388:	0011883a 	mov	r8,zero
   8e38c:	38801826 	beq	r7,r2,8e3f0 <__muldf3+0x360>
   8e390:	008000c4 	movi	r2,3
   8e394:	d9000e04 	addi	r4,sp,56
   8e398:	da801215 	stw	r10,72(sp)
   8e39c:	d8800e15 	stw	r2,56(sp)
   8e3a0:	da401115 	stw	r9,68(sp)
   8e3a4:	003f6a06 	br	8e150 <__muldf3+0xc0>
   8e3a8:	89802126 	beq	r17,r6,8e430 <__muldf3+0x3a0>
   8e3ac:	0009883a 	mov	r4,zero
   8e3b0:	5105883a 	add	r2,r10,r4
   8e3b4:	128d803a 	cmpltu	r6,r2,r10
   8e3b8:	5d07883a 	add	r3,r11,r20
   8e3bc:	30cd883a 	add	r6,r6,r3
   8e3c0:	0021883a 	mov	r16,zero
   8e3c4:	0023883a 	mov	r17,zero
   8e3c8:	1025883a 	mov	r18,r2
   8e3cc:	3027883a 	mov	r19,r6
   8e3d0:	32ff9e2e 	bgeu	r6,r11,8e24c <__muldf3+0x1bc>
   8e3d4:	00800044 	movi	r2,1
   8e3d8:	8089883a 	add	r4,r16,r2
   8e3dc:	240d803a 	cmpltu	r6,r4,r16
   8e3e0:	344d883a 	add	r6,r6,r17
   8e3e4:	2021883a 	mov	r16,r4
   8e3e8:	3023883a 	mov	r17,r6
   8e3ec:	003f9806 	br	8e250 <__muldf3+0x1c0>
   8e3f0:	403fe71e 	bne	r8,zero,8e390 <__muldf3+0x300>
   8e3f4:	01004004 	movi	r4,256
   8e3f8:	4904703a 	and	r2,r9,r4
   8e3fc:	10c4b03a 	or	r2,r2,r3
   8e400:	103fe31e 	bne	r2,zero,8e390 <__muldf3+0x300>
   8e404:	94c4b03a 	or	r2,r18,r19
   8e408:	103fe126 	beq	r2,zero,8e390 <__muldf3+0x300>
   8e40c:	49c5883a 	add	r2,r9,r7
   8e410:	1251803a 	cmpltu	r8,r2,r9
   8e414:	4291883a 	add	r8,r8,r10
   8e418:	013fc004 	movi	r4,-256
   8e41c:	1112703a 	and	r9,r2,r4
   8e420:	4015883a 	mov	r10,r8
   8e424:	003fda06 	br	8e390 <__muldf3+0x300>
   8e428:	6813883a 	mov	r9,r13
   8e42c:	003fce06 	br	8e368 <__muldf3+0x2d8>
   8e430:	143f7c36 	bltu	r2,r16,8e224 <__muldf3+0x194>
   8e434:	003fdd06 	br	8e3ac <__muldf3+0x31c>
   8e438:	12bf852e 	bgeu	r2,r10,8e250 <__muldf3+0x1c0>
   8e43c:	003fe506 	br	8e3d4 <__muldf3+0x344>
   8e440:	00800084 	movi	r2,2
   8e444:	20bf351e 	bne	r4,r2,8e11c <__muldf3+0x8c>
   8e448:	01000274 	movhi	r4,9
   8e44c:	21095604 	addi	r4,r4,9560
   8e450:	003f3f06 	br	8e150 <__muldf3+0xc0>

0008e454 <__divdf3>:
   8e454:	deffed04 	addi	sp,sp,-76
   8e458:	dcc01115 	stw	r19,68(sp)
   8e45c:	dcc00404 	addi	r19,sp,16
   8e460:	2011883a 	mov	r8,r4
   8e464:	2813883a 	mov	r9,r5
   8e468:	dc000e15 	stw	r16,56(sp)
   8e46c:	d809883a 	mov	r4,sp
   8e470:	980b883a 	mov	r5,r19
   8e474:	dc000904 	addi	r16,sp,36
   8e478:	dfc01215 	stw	ra,72(sp)
   8e47c:	da400115 	stw	r9,4(sp)
   8e480:	d9c00315 	stw	r7,12(sp)
   8e484:	da000015 	stw	r8,0(sp)
   8e488:	d9800215 	stw	r6,8(sp)
   8e48c:	dc801015 	stw	r18,64(sp)
   8e490:	dc400f15 	stw	r17,60(sp)
   8e494:	008f1700 	call	8f170 <__unpack_d>
   8e498:	d9000204 	addi	r4,sp,8
   8e49c:	800b883a 	mov	r5,r16
   8e4a0:	008f1700 	call	8f170 <__unpack_d>
   8e4a4:	d9000417 	ldw	r4,16(sp)
   8e4a8:	00800044 	movi	r2,1
   8e4ac:	11000b2e 	bgeu	r2,r4,8e4dc <__divdf3+0x88>
   8e4b0:	d9400917 	ldw	r5,36(sp)
   8e4b4:	1140762e 	bgeu	r2,r5,8e690 <__divdf3+0x23c>
   8e4b8:	d8800517 	ldw	r2,20(sp)
   8e4bc:	d8c00a17 	ldw	r3,40(sp)
   8e4c0:	01800104 	movi	r6,4
   8e4c4:	10c4f03a 	xor	r2,r2,r3
   8e4c8:	d8800515 	stw	r2,20(sp)
   8e4cc:	21800226 	beq	r4,r6,8e4d8 <__divdf3+0x84>
   8e4d0:	00800084 	movi	r2,2
   8e4d4:	2080141e 	bne	r4,r2,8e528 <__divdf3+0xd4>
   8e4d8:	29000926 	beq	r5,r4,8e500 <__divdf3+0xac>
   8e4dc:	9809883a 	mov	r4,r19
   8e4e0:	008ee5c0 	call	8ee5c <__pack_d>
   8e4e4:	dfc01217 	ldw	ra,72(sp)
   8e4e8:	dcc01117 	ldw	r19,68(sp)
   8e4ec:	dc801017 	ldw	r18,64(sp)
   8e4f0:	dc400f17 	ldw	r17,60(sp)
   8e4f4:	dc000e17 	ldw	r16,56(sp)
   8e4f8:	dec01304 	addi	sp,sp,76
   8e4fc:	f800283a 	ret
   8e500:	01000274 	movhi	r4,9
   8e504:	21095604 	addi	r4,r4,9560
   8e508:	008ee5c0 	call	8ee5c <__pack_d>
   8e50c:	dfc01217 	ldw	ra,72(sp)
   8e510:	dcc01117 	ldw	r19,68(sp)
   8e514:	dc801017 	ldw	r18,64(sp)
   8e518:	dc400f17 	ldw	r17,60(sp)
   8e51c:	dc000e17 	ldw	r16,56(sp)
   8e520:	dec01304 	addi	sp,sp,76
   8e524:	f800283a 	ret
   8e528:	29805b26 	beq	r5,r6,8e698 <__divdf3+0x244>
   8e52c:	28802d26 	beq	r5,r2,8e5e4 <__divdf3+0x190>
   8e530:	d8c00617 	ldw	r3,24(sp)
   8e534:	d8800b17 	ldw	r2,44(sp)
   8e538:	d9c00817 	ldw	r7,32(sp)
   8e53c:	dc400d17 	ldw	r17,52(sp)
   8e540:	188bc83a 	sub	r5,r3,r2
   8e544:	d9800717 	ldw	r6,28(sp)
   8e548:	dc000c17 	ldw	r16,48(sp)
   8e54c:	d9400615 	stw	r5,24(sp)
   8e550:	3c403836 	bltu	r7,r17,8e634 <__divdf3+0x1e0>
   8e554:	89c03626 	beq	r17,r7,8e630 <__divdf3+0x1dc>
   8e558:	0015883a 	mov	r10,zero
   8e55c:	001d883a 	mov	r14,zero
   8e560:	02c40034 	movhi	r11,4096
   8e564:	001f883a 	mov	r15,zero
   8e568:	003f883a 	mov	ra,zero
   8e56c:	04800f44 	movi	r18,61
   8e570:	00000f06 	br	8e5b0 <__divdf3+0x15c>
   8e574:	601d883a 	mov	r14,r12
   8e578:	681f883a 	mov	r15,r13
   8e57c:	400d883a 	mov	r6,r8
   8e580:	100f883a 	mov	r7,r2
   8e584:	3191883a 	add	r8,r6,r6
   8e588:	5808d07a 	srli	r4,r11,1
   8e58c:	4185803a 	cmpltu	r2,r8,r6
   8e590:	39d3883a 	add	r9,r7,r7
   8e594:	28c6b03a 	or	r3,r5,r3
   8e598:	1245883a 	add	r2,r2,r9
   8e59c:	1815883a 	mov	r10,r3
   8e5a0:	2017883a 	mov	r11,r4
   8e5a4:	400d883a 	mov	r6,r8
   8e5a8:	100f883a 	mov	r7,r2
   8e5ac:	fc801726 	beq	ra,r18,8e60c <__divdf3+0x1b8>
   8e5b0:	580a97fa 	slli	r5,r11,31
   8e5b4:	5006d07a 	srli	r3,r10,1
   8e5b8:	ffc00044 	addi	ra,ra,1
   8e5bc:	3c7ff136 	bltu	r7,r17,8e584 <__divdf3+0x130>
   8e5c0:	3411c83a 	sub	r8,r6,r16
   8e5c4:	3205803a 	cmpltu	r2,r6,r8
   8e5c8:	3c53c83a 	sub	r9,r7,r17
   8e5cc:	7298b03a 	or	r12,r14,r10
   8e5d0:	7adab03a 	or	r13,r15,r11
   8e5d4:	4885c83a 	sub	r2,r9,r2
   8e5d8:	89ffe61e 	bne	r17,r7,8e574 <__divdf3+0x120>
   8e5dc:	343fe936 	bltu	r6,r16,8e584 <__divdf3+0x130>
   8e5e0:	003fe406 	br	8e574 <__divdf3+0x120>
   8e5e4:	9809883a 	mov	r4,r19
   8e5e8:	d9800415 	stw	r6,16(sp)
   8e5ec:	008ee5c0 	call	8ee5c <__pack_d>
   8e5f0:	dfc01217 	ldw	ra,72(sp)
   8e5f4:	dcc01117 	ldw	r19,68(sp)
   8e5f8:	dc801017 	ldw	r18,64(sp)
   8e5fc:	dc400f17 	ldw	r17,60(sp)
   8e600:	dc000e17 	ldw	r16,56(sp)
   8e604:	dec01304 	addi	sp,sp,76
   8e608:	f800283a 	ret
   8e60c:	00803fc4 	movi	r2,255
   8e610:	7090703a 	and	r8,r14,r2
   8e614:	00802004 	movi	r2,128
   8e618:	0007883a 	mov	r3,zero
   8e61c:	0013883a 	mov	r9,zero
   8e620:	40800d26 	beq	r8,r2,8e658 <__divdf3+0x204>
   8e624:	dbc00815 	stw	r15,32(sp)
   8e628:	db800715 	stw	r14,28(sp)
   8e62c:	003fab06 	br	8e4dc <__divdf3+0x88>
   8e630:	343fc92e 	bgeu	r6,r16,8e558 <__divdf3+0x104>
   8e634:	3185883a 	add	r2,r6,r6
   8e638:	1189803a 	cmpltu	r4,r2,r6
   8e63c:	39c7883a 	add	r3,r7,r7
   8e640:	20c9883a 	add	r4,r4,r3
   8e644:	297fffc4 	addi	r5,r5,-1
   8e648:	100d883a 	mov	r6,r2
   8e64c:	200f883a 	mov	r7,r4
   8e650:	d9400615 	stw	r5,24(sp)
   8e654:	003fc006 	br	8e558 <__divdf3+0x104>
   8e658:	483ff21e 	bne	r9,zero,8e624 <__divdf3+0x1d0>
   8e65c:	01004004 	movi	r4,256
   8e660:	7104703a 	and	r2,r14,r4
   8e664:	10c4b03a 	or	r2,r2,r3
   8e668:	103fee1e 	bne	r2,zero,8e624 <__divdf3+0x1d0>
   8e66c:	31c4b03a 	or	r2,r6,r7
   8e670:	103fec26 	beq	r2,zero,8e624 <__divdf3+0x1d0>
   8e674:	7205883a 	add	r2,r14,r8
   8e678:	1391803a 	cmpltu	r8,r2,r14
   8e67c:	43d1883a 	add	r8,r8,r15
   8e680:	013fc004 	movi	r4,-256
   8e684:	111c703a 	and	r14,r2,r4
   8e688:	401f883a 	mov	r15,r8
   8e68c:	003fe506 	br	8e624 <__divdf3+0x1d0>
   8e690:	8009883a 	mov	r4,r16
   8e694:	003f9206 	br	8e4e0 <__divdf3+0x8c>
   8e698:	9809883a 	mov	r4,r19
   8e69c:	d8000715 	stw	zero,28(sp)
   8e6a0:	d8000815 	stw	zero,32(sp)
   8e6a4:	d8000615 	stw	zero,24(sp)
   8e6a8:	003f8d06 	br	8e4e0 <__divdf3+0x8c>

0008e6ac <__eqdf2>:
   8e6ac:	deffef04 	addi	sp,sp,-68
   8e6b0:	dc400f15 	stw	r17,60(sp)
   8e6b4:	dc400404 	addi	r17,sp,16
   8e6b8:	2005883a 	mov	r2,r4
   8e6bc:	2807883a 	mov	r3,r5
   8e6c0:	dc000e15 	stw	r16,56(sp)
   8e6c4:	d809883a 	mov	r4,sp
   8e6c8:	880b883a 	mov	r5,r17
   8e6cc:	dc000904 	addi	r16,sp,36
   8e6d0:	d8c00115 	stw	r3,4(sp)
   8e6d4:	d8800015 	stw	r2,0(sp)
   8e6d8:	d9800215 	stw	r6,8(sp)
   8e6dc:	dfc01015 	stw	ra,64(sp)
   8e6e0:	d9c00315 	stw	r7,12(sp)
   8e6e4:	008f1700 	call	8f170 <__unpack_d>
   8e6e8:	d9000204 	addi	r4,sp,8
   8e6ec:	800b883a 	mov	r5,r16
   8e6f0:	008f1700 	call	8f170 <__unpack_d>
   8e6f4:	d8800417 	ldw	r2,16(sp)
   8e6f8:	00c00044 	movi	r3,1
   8e6fc:	180d883a 	mov	r6,r3
   8e700:	1880062e 	bgeu	r3,r2,8e71c <__eqdf2+0x70>
   8e704:	d8800917 	ldw	r2,36(sp)
   8e708:	8809883a 	mov	r4,r17
   8e70c:	800b883a 	mov	r5,r16
   8e710:	1880022e 	bgeu	r3,r2,8e71c <__eqdf2+0x70>
   8e714:	008f2a80 	call	8f2a8 <__fpcmp_parts_d>
   8e718:	100d883a 	mov	r6,r2
   8e71c:	3005883a 	mov	r2,r6
   8e720:	dfc01017 	ldw	ra,64(sp)
   8e724:	dc400f17 	ldw	r17,60(sp)
   8e728:	dc000e17 	ldw	r16,56(sp)
   8e72c:	dec01104 	addi	sp,sp,68
   8e730:	f800283a 	ret

0008e734 <__nedf2>:
   8e734:	deffef04 	addi	sp,sp,-68
   8e738:	dc400f15 	stw	r17,60(sp)
   8e73c:	dc400404 	addi	r17,sp,16
   8e740:	2005883a 	mov	r2,r4
   8e744:	2807883a 	mov	r3,r5
   8e748:	dc000e15 	stw	r16,56(sp)
   8e74c:	d809883a 	mov	r4,sp
   8e750:	880b883a 	mov	r5,r17
   8e754:	dc000904 	addi	r16,sp,36
   8e758:	d8c00115 	stw	r3,4(sp)
   8e75c:	d8800015 	stw	r2,0(sp)
   8e760:	d9800215 	stw	r6,8(sp)
   8e764:	dfc01015 	stw	ra,64(sp)
   8e768:	d9c00315 	stw	r7,12(sp)
   8e76c:	008f1700 	call	8f170 <__unpack_d>
   8e770:	d9000204 	addi	r4,sp,8
   8e774:	800b883a 	mov	r5,r16
   8e778:	008f1700 	call	8f170 <__unpack_d>
   8e77c:	d8800417 	ldw	r2,16(sp)
   8e780:	00c00044 	movi	r3,1
   8e784:	180d883a 	mov	r6,r3
   8e788:	1880062e 	bgeu	r3,r2,8e7a4 <__nedf2+0x70>
   8e78c:	d8800917 	ldw	r2,36(sp)
   8e790:	8809883a 	mov	r4,r17
   8e794:	800b883a 	mov	r5,r16
   8e798:	1880022e 	bgeu	r3,r2,8e7a4 <__nedf2+0x70>
   8e79c:	008f2a80 	call	8f2a8 <__fpcmp_parts_d>
   8e7a0:	100d883a 	mov	r6,r2
   8e7a4:	3005883a 	mov	r2,r6
   8e7a8:	dfc01017 	ldw	ra,64(sp)
   8e7ac:	dc400f17 	ldw	r17,60(sp)
   8e7b0:	dc000e17 	ldw	r16,56(sp)
   8e7b4:	dec01104 	addi	sp,sp,68
   8e7b8:	f800283a 	ret

0008e7bc <__gtdf2>:
   8e7bc:	deffef04 	addi	sp,sp,-68
   8e7c0:	dc400f15 	stw	r17,60(sp)
   8e7c4:	dc400404 	addi	r17,sp,16
   8e7c8:	2005883a 	mov	r2,r4
   8e7cc:	2807883a 	mov	r3,r5
   8e7d0:	dc000e15 	stw	r16,56(sp)
   8e7d4:	d809883a 	mov	r4,sp
   8e7d8:	880b883a 	mov	r5,r17
   8e7dc:	dc000904 	addi	r16,sp,36
   8e7e0:	d8c00115 	stw	r3,4(sp)
   8e7e4:	d8800015 	stw	r2,0(sp)
   8e7e8:	d9800215 	stw	r6,8(sp)
   8e7ec:	dfc01015 	stw	ra,64(sp)
   8e7f0:	d9c00315 	stw	r7,12(sp)
   8e7f4:	008f1700 	call	8f170 <__unpack_d>
   8e7f8:	d9000204 	addi	r4,sp,8
   8e7fc:	800b883a 	mov	r5,r16
   8e800:	008f1700 	call	8f170 <__unpack_d>
   8e804:	d8800417 	ldw	r2,16(sp)
   8e808:	00c00044 	movi	r3,1
   8e80c:	01bfffc4 	movi	r6,-1
   8e810:	1880062e 	bgeu	r3,r2,8e82c <__gtdf2+0x70>
   8e814:	d8800917 	ldw	r2,36(sp)
   8e818:	8809883a 	mov	r4,r17
   8e81c:	800b883a 	mov	r5,r16
   8e820:	1880022e 	bgeu	r3,r2,8e82c <__gtdf2+0x70>
   8e824:	008f2a80 	call	8f2a8 <__fpcmp_parts_d>
   8e828:	100d883a 	mov	r6,r2
   8e82c:	3005883a 	mov	r2,r6
   8e830:	dfc01017 	ldw	ra,64(sp)
   8e834:	dc400f17 	ldw	r17,60(sp)
   8e838:	dc000e17 	ldw	r16,56(sp)
   8e83c:	dec01104 	addi	sp,sp,68
   8e840:	f800283a 	ret

0008e844 <__gedf2>:
   8e844:	deffef04 	addi	sp,sp,-68
   8e848:	dc400f15 	stw	r17,60(sp)
   8e84c:	dc400404 	addi	r17,sp,16
   8e850:	2005883a 	mov	r2,r4
   8e854:	2807883a 	mov	r3,r5
   8e858:	dc000e15 	stw	r16,56(sp)
   8e85c:	d809883a 	mov	r4,sp
   8e860:	880b883a 	mov	r5,r17
   8e864:	dc000904 	addi	r16,sp,36
   8e868:	d8c00115 	stw	r3,4(sp)
   8e86c:	d8800015 	stw	r2,0(sp)
   8e870:	d9800215 	stw	r6,8(sp)
   8e874:	dfc01015 	stw	ra,64(sp)
   8e878:	d9c00315 	stw	r7,12(sp)
   8e87c:	008f1700 	call	8f170 <__unpack_d>
   8e880:	d9000204 	addi	r4,sp,8
   8e884:	800b883a 	mov	r5,r16
   8e888:	008f1700 	call	8f170 <__unpack_d>
   8e88c:	d8800417 	ldw	r2,16(sp)
   8e890:	00c00044 	movi	r3,1
   8e894:	01bfffc4 	movi	r6,-1
   8e898:	1880062e 	bgeu	r3,r2,8e8b4 <__gedf2+0x70>
   8e89c:	d8800917 	ldw	r2,36(sp)
   8e8a0:	8809883a 	mov	r4,r17
   8e8a4:	800b883a 	mov	r5,r16
   8e8a8:	1880022e 	bgeu	r3,r2,8e8b4 <__gedf2+0x70>
   8e8ac:	008f2a80 	call	8f2a8 <__fpcmp_parts_d>
   8e8b0:	100d883a 	mov	r6,r2
   8e8b4:	3005883a 	mov	r2,r6
   8e8b8:	dfc01017 	ldw	ra,64(sp)
   8e8bc:	dc400f17 	ldw	r17,60(sp)
   8e8c0:	dc000e17 	ldw	r16,56(sp)
   8e8c4:	dec01104 	addi	sp,sp,68
   8e8c8:	f800283a 	ret

0008e8cc <__ltdf2>:
   8e8cc:	deffef04 	addi	sp,sp,-68
   8e8d0:	dc400f15 	stw	r17,60(sp)
   8e8d4:	dc400404 	addi	r17,sp,16
   8e8d8:	2005883a 	mov	r2,r4
   8e8dc:	2807883a 	mov	r3,r5
   8e8e0:	dc000e15 	stw	r16,56(sp)
   8e8e4:	d809883a 	mov	r4,sp
   8e8e8:	880b883a 	mov	r5,r17
   8e8ec:	dc000904 	addi	r16,sp,36
   8e8f0:	d8c00115 	stw	r3,4(sp)
   8e8f4:	d8800015 	stw	r2,0(sp)
   8e8f8:	d9800215 	stw	r6,8(sp)
   8e8fc:	dfc01015 	stw	ra,64(sp)
   8e900:	d9c00315 	stw	r7,12(sp)
   8e904:	008f1700 	call	8f170 <__unpack_d>
   8e908:	d9000204 	addi	r4,sp,8
   8e90c:	800b883a 	mov	r5,r16
   8e910:	008f1700 	call	8f170 <__unpack_d>
   8e914:	d8800417 	ldw	r2,16(sp)
   8e918:	00c00044 	movi	r3,1
   8e91c:	180d883a 	mov	r6,r3
   8e920:	1880062e 	bgeu	r3,r2,8e93c <__ltdf2+0x70>
   8e924:	d8800917 	ldw	r2,36(sp)
   8e928:	8809883a 	mov	r4,r17
   8e92c:	800b883a 	mov	r5,r16
   8e930:	1880022e 	bgeu	r3,r2,8e93c <__ltdf2+0x70>
   8e934:	008f2a80 	call	8f2a8 <__fpcmp_parts_d>
   8e938:	100d883a 	mov	r6,r2
   8e93c:	3005883a 	mov	r2,r6
   8e940:	dfc01017 	ldw	ra,64(sp)
   8e944:	dc400f17 	ldw	r17,60(sp)
   8e948:	dc000e17 	ldw	r16,56(sp)
   8e94c:	dec01104 	addi	sp,sp,68
   8e950:	f800283a 	ret

0008e954 <__floatsidf>:
   8e954:	2006d7fa 	srli	r3,r4,31
   8e958:	defff604 	addi	sp,sp,-40
   8e95c:	008000c4 	movi	r2,3
   8e960:	dfc00915 	stw	ra,36(sp)
   8e964:	dcc00815 	stw	r19,32(sp)
   8e968:	dc800715 	stw	r18,28(sp)
   8e96c:	dc400615 	stw	r17,24(sp)
   8e970:	dc000515 	stw	r16,20(sp)
   8e974:	d8800015 	stw	r2,0(sp)
   8e978:	d8c00115 	stw	r3,4(sp)
   8e97c:	20000f1e 	bne	r4,zero,8e9bc <__floatsidf+0x68>
   8e980:	00800084 	movi	r2,2
   8e984:	d8800015 	stw	r2,0(sp)
   8e988:	d809883a 	mov	r4,sp
   8e98c:	008ee5c0 	call	8ee5c <__pack_d>
   8e990:	1009883a 	mov	r4,r2
   8e994:	180b883a 	mov	r5,r3
   8e998:	2005883a 	mov	r2,r4
   8e99c:	2807883a 	mov	r3,r5
   8e9a0:	dfc00917 	ldw	ra,36(sp)
   8e9a4:	dcc00817 	ldw	r19,32(sp)
   8e9a8:	dc800717 	ldw	r18,28(sp)
   8e9ac:	dc400617 	ldw	r17,24(sp)
   8e9b0:	dc000517 	ldw	r16,20(sp)
   8e9b4:	dec00a04 	addi	sp,sp,40
   8e9b8:	f800283a 	ret
   8e9bc:	00800f04 	movi	r2,60
   8e9c0:	1807003a 	cmpeq	r3,r3,zero
   8e9c4:	d8800215 	stw	r2,8(sp)
   8e9c8:	18001126 	beq	r3,zero,8ea10 <__floatsidf+0xbc>
   8e9cc:	0027883a 	mov	r19,zero
   8e9d0:	2025883a 	mov	r18,r4
   8e9d4:	d9000315 	stw	r4,12(sp)
   8e9d8:	dcc00415 	stw	r19,16(sp)
   8e9dc:	008eddc0 	call	8eddc <__clzsi2>
   8e9e0:	11000744 	addi	r4,r2,29
   8e9e4:	013fe80e 	bge	zero,r4,8e988 <__floatsidf+0x34>
   8e9e8:	10bfff44 	addi	r2,r2,-3
   8e9ec:	10000c16 	blt	r2,zero,8ea20 <__floatsidf+0xcc>
   8e9f0:	90a2983a 	sll	r17,r18,r2
   8e9f4:	0021883a 	mov	r16,zero
   8e9f8:	d8800217 	ldw	r2,8(sp)
   8e9fc:	dc400415 	stw	r17,16(sp)
   8ea00:	dc000315 	stw	r16,12(sp)
   8ea04:	1105c83a 	sub	r2,r2,r4
   8ea08:	d8800215 	stw	r2,8(sp)
   8ea0c:	003fde06 	br	8e988 <__floatsidf+0x34>
   8ea10:	00a00034 	movhi	r2,32768
   8ea14:	20800a26 	beq	r4,r2,8ea40 <__floatsidf+0xec>
   8ea18:	0109c83a 	sub	r4,zero,r4
   8ea1c:	003feb06 	br	8e9cc <__floatsidf+0x78>
   8ea20:	9006d07a 	srli	r3,r18,1
   8ea24:	008007c4 	movi	r2,31
   8ea28:	1105c83a 	sub	r2,r2,r4
   8ea2c:	1886d83a 	srl	r3,r3,r2
   8ea30:	9922983a 	sll	r17,r19,r4
   8ea34:	9120983a 	sll	r16,r18,r4
   8ea38:	1c62b03a 	or	r17,r3,r17
   8ea3c:	003fee06 	br	8e9f8 <__floatsidf+0xa4>
   8ea40:	0009883a 	mov	r4,zero
   8ea44:	01707834 	movhi	r5,49632
   8ea48:	003fd306 	br	8e998 <__floatsidf+0x44>

0008ea4c <__fixdfsi>:
   8ea4c:	defff804 	addi	sp,sp,-32
   8ea50:	2005883a 	mov	r2,r4
   8ea54:	2807883a 	mov	r3,r5
   8ea58:	d809883a 	mov	r4,sp
   8ea5c:	d9400204 	addi	r5,sp,8
   8ea60:	d8c00115 	stw	r3,4(sp)
   8ea64:	d8800015 	stw	r2,0(sp)
   8ea68:	dfc00715 	stw	ra,28(sp)
   8ea6c:	008f1700 	call	8f170 <__unpack_d>
   8ea70:	d8c00217 	ldw	r3,8(sp)
   8ea74:	00800084 	movi	r2,2
   8ea78:	1880051e 	bne	r3,r2,8ea90 <__fixdfsi+0x44>
   8ea7c:	0007883a 	mov	r3,zero
   8ea80:	1805883a 	mov	r2,r3
   8ea84:	dfc00717 	ldw	ra,28(sp)
   8ea88:	dec00804 	addi	sp,sp,32
   8ea8c:	f800283a 	ret
   8ea90:	00800044 	movi	r2,1
   8ea94:	10fff92e 	bgeu	r2,r3,8ea7c <__fixdfsi+0x30>
   8ea98:	00800104 	movi	r2,4
   8ea9c:	18800426 	beq	r3,r2,8eab0 <__fixdfsi+0x64>
   8eaa0:	d8c00417 	ldw	r3,16(sp)
   8eaa4:	183ff516 	blt	r3,zero,8ea7c <__fixdfsi+0x30>
   8eaa8:	00800784 	movi	r2,30
   8eaac:	10c0080e 	bge	r2,r3,8ead0 <__fixdfsi+0x84>
   8eab0:	d8800317 	ldw	r2,12(sp)
   8eab4:	1000121e 	bne	r2,zero,8eb00 <__fixdfsi+0xb4>
   8eab8:	00e00034 	movhi	r3,32768
   8eabc:	18ffffc4 	addi	r3,r3,-1
   8eac0:	1805883a 	mov	r2,r3
   8eac4:	dfc00717 	ldw	ra,28(sp)
   8eac8:	dec00804 	addi	sp,sp,32
   8eacc:	f800283a 	ret
   8ead0:	00800f04 	movi	r2,60
   8ead4:	10d1c83a 	sub	r8,r2,r3
   8ead8:	40bff804 	addi	r2,r8,-32
   8eadc:	d9800517 	ldw	r6,20(sp)
   8eae0:	d9c00617 	ldw	r7,24(sp)
   8eae4:	10000816 	blt	r2,zero,8eb08 <__fixdfsi+0xbc>
   8eae8:	3888d83a 	srl	r4,r7,r2
   8eaec:	d8800317 	ldw	r2,12(sp)
   8eaf0:	2007883a 	mov	r3,r4
   8eaf4:	103fe226 	beq	r2,zero,8ea80 <__fixdfsi+0x34>
   8eaf8:	0107c83a 	sub	r3,zero,r4
   8eafc:	003fe006 	br	8ea80 <__fixdfsi+0x34>
   8eb00:	00e00034 	movhi	r3,32768
   8eb04:	003fde06 	br	8ea80 <__fixdfsi+0x34>
   8eb08:	39c7883a 	add	r3,r7,r7
   8eb0c:	008007c4 	movi	r2,31
   8eb10:	1205c83a 	sub	r2,r2,r8
   8eb14:	1886983a 	sll	r3,r3,r2
   8eb18:	3208d83a 	srl	r4,r6,r8
   8eb1c:	1908b03a 	or	r4,r3,r4
   8eb20:	003ff206 	br	8eaec <__fixdfsi+0xa0>

0008eb24 <__floatunsidf>:
   8eb24:	defff204 	addi	sp,sp,-56
   8eb28:	dfc00d15 	stw	ra,52(sp)
   8eb2c:	ddc00c15 	stw	r23,48(sp)
   8eb30:	dd800b15 	stw	r22,44(sp)
   8eb34:	dd400a15 	stw	r21,40(sp)
   8eb38:	dd000915 	stw	r20,36(sp)
   8eb3c:	dcc00815 	stw	r19,32(sp)
   8eb40:	dc800715 	stw	r18,28(sp)
   8eb44:	dc400615 	stw	r17,24(sp)
   8eb48:	dc000515 	stw	r16,20(sp)
   8eb4c:	d8000115 	stw	zero,4(sp)
   8eb50:	20000f1e 	bne	r4,zero,8eb90 <__floatunsidf+0x6c>
   8eb54:	00800084 	movi	r2,2
   8eb58:	d8800015 	stw	r2,0(sp)
   8eb5c:	d809883a 	mov	r4,sp
   8eb60:	008ee5c0 	call	8ee5c <__pack_d>
   8eb64:	dfc00d17 	ldw	ra,52(sp)
   8eb68:	ddc00c17 	ldw	r23,48(sp)
   8eb6c:	dd800b17 	ldw	r22,44(sp)
   8eb70:	dd400a17 	ldw	r21,40(sp)
   8eb74:	dd000917 	ldw	r20,36(sp)
   8eb78:	dcc00817 	ldw	r19,32(sp)
   8eb7c:	dc800717 	ldw	r18,28(sp)
   8eb80:	dc400617 	ldw	r17,24(sp)
   8eb84:	dc000517 	ldw	r16,20(sp)
   8eb88:	dec00e04 	addi	sp,sp,56
   8eb8c:	f800283a 	ret
   8eb90:	008000c4 	movi	r2,3
   8eb94:	00c00f04 	movi	r3,60
   8eb98:	002f883a 	mov	r23,zero
   8eb9c:	202d883a 	mov	r22,r4
   8eba0:	d8800015 	stw	r2,0(sp)
   8eba4:	d8c00215 	stw	r3,8(sp)
   8eba8:	d9000315 	stw	r4,12(sp)
   8ebac:	ddc00415 	stw	r23,16(sp)
   8ebb0:	008eddc0 	call	8eddc <__clzsi2>
   8ebb4:	12400744 	addi	r9,r2,29
   8ebb8:	48000b16 	blt	r9,zero,8ebe8 <__floatunsidf+0xc4>
   8ebbc:	483fe726 	beq	r9,zero,8eb5c <__floatunsidf+0x38>
   8ebc0:	10bfff44 	addi	r2,r2,-3
   8ebc4:	10002e16 	blt	r2,zero,8ec80 <__floatunsidf+0x15c>
   8ebc8:	b0a2983a 	sll	r17,r22,r2
   8ebcc:	0021883a 	mov	r16,zero
   8ebd0:	d8800217 	ldw	r2,8(sp)
   8ebd4:	dc400415 	stw	r17,16(sp)
   8ebd8:	dc000315 	stw	r16,12(sp)
   8ebdc:	1245c83a 	sub	r2,r2,r9
   8ebe0:	d8800215 	stw	r2,8(sp)
   8ebe4:	003fdd06 	br	8eb5c <__floatunsidf+0x38>
   8ebe8:	0255c83a 	sub	r10,zero,r9
   8ebec:	51bff804 	addi	r6,r10,-32
   8ebf0:	30001b16 	blt	r6,zero,8ec60 <__floatunsidf+0x13c>
   8ebf4:	b9a8d83a 	srl	r20,r23,r6
   8ebf8:	002b883a 	mov	r21,zero
   8ebfc:	000f883a 	mov	r7,zero
   8ec00:	01000044 	movi	r4,1
   8ec04:	0011883a 	mov	r8,zero
   8ec08:	30002516 	blt	r6,zero,8eca0 <__floatunsidf+0x17c>
   8ec0c:	21a6983a 	sll	r19,r4,r6
   8ec10:	0025883a 	mov	r18,zero
   8ec14:	00bfffc4 	movi	r2,-1
   8ec18:	9089883a 	add	r4,r18,r2
   8ec1c:	988b883a 	add	r5,r19,r2
   8ec20:	248d803a 	cmpltu	r6,r4,r18
   8ec24:	314b883a 	add	r5,r6,r5
   8ec28:	b104703a 	and	r2,r22,r4
   8ec2c:	b946703a 	and	r3,r23,r5
   8ec30:	10c4b03a 	or	r2,r2,r3
   8ec34:	10000226 	beq	r2,zero,8ec40 <__floatunsidf+0x11c>
   8ec38:	01c00044 	movi	r7,1
   8ec3c:	0011883a 	mov	r8,zero
   8ec40:	d9000217 	ldw	r4,8(sp)
   8ec44:	a1c4b03a 	or	r2,r20,r7
   8ec48:	aa06b03a 	or	r3,r21,r8
   8ec4c:	2249c83a 	sub	r4,r4,r9
   8ec50:	d8c00415 	stw	r3,16(sp)
   8ec54:	d9000215 	stw	r4,8(sp)
   8ec58:	d8800315 	stw	r2,12(sp)
   8ec5c:	003fbf06 	br	8eb5c <__floatunsidf+0x38>
   8ec60:	bdc7883a 	add	r3,r23,r23
   8ec64:	008007c4 	movi	r2,31
   8ec68:	1285c83a 	sub	r2,r2,r10
   8ec6c:	1886983a 	sll	r3,r3,r2
   8ec70:	b2a8d83a 	srl	r20,r22,r10
   8ec74:	baaad83a 	srl	r21,r23,r10
   8ec78:	1d28b03a 	or	r20,r3,r20
   8ec7c:	003fdf06 	br	8ebfc <__floatunsidf+0xd8>
   8ec80:	b006d07a 	srli	r3,r22,1
   8ec84:	008007c4 	movi	r2,31
   8ec88:	1245c83a 	sub	r2,r2,r9
   8ec8c:	1886d83a 	srl	r3,r3,r2
   8ec90:	ba62983a 	sll	r17,r23,r9
   8ec94:	b260983a 	sll	r16,r22,r9
   8ec98:	1c62b03a 	or	r17,r3,r17
   8ec9c:	003fcc06 	br	8ebd0 <__floatunsidf+0xac>
   8eca0:	2006d07a 	srli	r3,r4,1
   8eca4:	008007c4 	movi	r2,31
   8eca8:	1285c83a 	sub	r2,r2,r10
   8ecac:	18a6d83a 	srl	r19,r3,r2
   8ecb0:	22a4983a 	sll	r18,r4,r10
   8ecb4:	003fd706 	br	8ec14 <__floatunsidf+0xf0>

0008ecb8 <__muldi3>:
   8ecb8:	defff204 	addi	sp,sp,-56
   8ecbc:	df000c15 	stw	fp,48(sp)
   8ecc0:	3038d43a 	srli	fp,r6,16
   8ecc4:	dd000815 	stw	r20,32(sp)
   8ecc8:	dc400515 	stw	r17,20(sp)
   8eccc:	2028d43a 	srli	r20,r4,16
   8ecd0:	247fffcc 	andi	r17,r4,65535
   8ecd4:	dc000415 	stw	r16,16(sp)
   8ecd8:	343fffcc 	andi	r16,r6,65535
   8ecdc:	dcc00715 	stw	r19,28(sp)
   8ece0:	d9000015 	stw	r4,0(sp)
   8ece4:	2827883a 	mov	r19,r5
   8ece8:	8809883a 	mov	r4,r17
   8ecec:	d9400115 	stw	r5,4(sp)
   8ecf0:	800b883a 	mov	r5,r16
   8ecf4:	d9800215 	stw	r6,8(sp)
   8ecf8:	dfc00d15 	stw	ra,52(sp)
   8ecfc:	d9c00315 	stw	r7,12(sp)
   8ed00:	dd800a15 	stw	r22,40(sp)
   8ed04:	dd400915 	stw	r21,36(sp)
   8ed08:	302d883a 	mov	r22,r6
   8ed0c:	ddc00b15 	stw	r23,44(sp)
   8ed10:	dc800615 	stw	r18,24(sp)
   8ed14:	008597c0 	call	8597c <__mulsi3>
   8ed18:	8809883a 	mov	r4,r17
   8ed1c:	e00b883a 	mov	r5,fp
   8ed20:	102b883a 	mov	r21,r2
   8ed24:	008597c0 	call	8597c <__mulsi3>
   8ed28:	800b883a 	mov	r5,r16
   8ed2c:	a009883a 	mov	r4,r20
   8ed30:	1023883a 	mov	r17,r2
   8ed34:	008597c0 	call	8597c <__mulsi3>
   8ed38:	a009883a 	mov	r4,r20
   8ed3c:	e00b883a 	mov	r5,fp
   8ed40:	1021883a 	mov	r16,r2
   8ed44:	008597c0 	call	8597c <__mulsi3>
   8ed48:	a8ffffcc 	andi	r3,r21,65535
   8ed4c:	a82ad43a 	srli	r21,r21,16
   8ed50:	8c23883a 	add	r17,r17,r16
   8ed54:	1011883a 	mov	r8,r2
   8ed58:	ac6b883a 	add	r21,r21,r17
   8ed5c:	a804943a 	slli	r2,r21,16
   8ed60:	b009883a 	mov	r4,r22
   8ed64:	980b883a 	mov	r5,r19
   8ed68:	10c7883a 	add	r3,r2,r3
   8ed6c:	a812d43a 	srli	r9,r21,16
   8ed70:	180d883a 	mov	r6,r3
   8ed74:	ac00022e 	bgeu	r21,r16,8ed80 <__muldi3+0xc8>
   8ed78:	00800074 	movhi	r2,1
   8ed7c:	4091883a 	add	r8,r8,r2
   8ed80:	4267883a 	add	r19,r8,r9
   8ed84:	302d883a 	mov	r22,r6
   8ed88:	008597c0 	call	8597c <__mulsi3>
   8ed8c:	d9400317 	ldw	r5,12(sp)
   8ed90:	d9000017 	ldw	r4,0(sp)
   8ed94:	1023883a 	mov	r17,r2
   8ed98:	008597c0 	call	8597c <__mulsi3>
   8ed9c:	14cb883a 	add	r5,r2,r19
   8eda0:	894b883a 	add	r5,r17,r5
   8eda4:	b005883a 	mov	r2,r22
   8eda8:	2807883a 	mov	r3,r5
   8edac:	dfc00d17 	ldw	ra,52(sp)
   8edb0:	df000c17 	ldw	fp,48(sp)
   8edb4:	ddc00b17 	ldw	r23,44(sp)
   8edb8:	dd800a17 	ldw	r22,40(sp)
   8edbc:	dd400917 	ldw	r21,36(sp)
   8edc0:	dd000817 	ldw	r20,32(sp)
   8edc4:	dcc00717 	ldw	r19,28(sp)
   8edc8:	dc800617 	ldw	r18,24(sp)
   8edcc:	dc400517 	ldw	r17,20(sp)
   8edd0:	dc000417 	ldw	r16,16(sp)
   8edd4:	dec00e04 	addi	sp,sp,56
   8edd8:	f800283a 	ret

0008eddc <__clzsi2>:
   8eddc:	00bfffd4 	movui	r2,65535
   8ede0:	11000e36 	bltu	r2,r4,8ee1c <__clzsi2+0x40>
   8ede4:	00803fc4 	movi	r2,255
   8ede8:	01400204 	movi	r5,8
   8edec:	0007883a 	mov	r3,zero
   8edf0:	11001036 	bltu	r2,r4,8ee34 <__clzsi2+0x58>
   8edf4:	000b883a 	mov	r5,zero
   8edf8:	20c6d83a 	srl	r3,r4,r3
   8edfc:	00800274 	movhi	r2,9
   8ee00:	10895b04 	addi	r2,r2,9580
   8ee04:	1887883a 	add	r3,r3,r2
   8ee08:	18800003 	ldbu	r2,0(r3)
   8ee0c:	00c00804 	movi	r3,32
   8ee10:	2885883a 	add	r2,r5,r2
   8ee14:	1885c83a 	sub	r2,r3,r2
   8ee18:	f800283a 	ret
   8ee1c:	01400404 	movi	r5,16
   8ee20:	00804034 	movhi	r2,256
   8ee24:	10bfffc4 	addi	r2,r2,-1
   8ee28:	2807883a 	mov	r3,r5
   8ee2c:	113ff22e 	bgeu	r2,r4,8edf8 <__clzsi2+0x1c>
   8ee30:	01400604 	movi	r5,24
   8ee34:	2807883a 	mov	r3,r5
   8ee38:	20c6d83a 	srl	r3,r4,r3
   8ee3c:	00800274 	movhi	r2,9
   8ee40:	10895b04 	addi	r2,r2,9580
   8ee44:	1887883a 	add	r3,r3,r2
   8ee48:	18800003 	ldbu	r2,0(r3)
   8ee4c:	00c00804 	movi	r3,32
   8ee50:	2885883a 	add	r2,r5,r2
   8ee54:	1885c83a 	sub	r2,r3,r2
   8ee58:	f800283a 	ret

0008ee5c <__pack_d>:
   8ee5c:	20c00017 	ldw	r3,0(r4)
   8ee60:	defffd04 	addi	sp,sp,-12
   8ee64:	dc000015 	stw	r16,0(sp)
   8ee68:	dc800215 	stw	r18,8(sp)
   8ee6c:	dc400115 	stw	r17,4(sp)
   8ee70:	00800044 	movi	r2,1
   8ee74:	22000317 	ldw	r8,12(r4)
   8ee78:	001f883a 	mov	r15,zero
   8ee7c:	22400417 	ldw	r9,16(r4)
   8ee80:	24000117 	ldw	r16,4(r4)
   8ee84:	10c0552e 	bgeu	r2,r3,8efdc <__pack_d+0x180>
   8ee88:	00800104 	movi	r2,4
   8ee8c:	18804f26 	beq	r3,r2,8efcc <__pack_d+0x170>
   8ee90:	00800084 	movi	r2,2
   8ee94:	18800226 	beq	r3,r2,8eea0 <__pack_d+0x44>
   8ee98:	4244b03a 	or	r2,r8,r9
   8ee9c:	10001a1e 	bne	r2,zero,8ef08 <__pack_d+0xac>
   8eea0:	000d883a 	mov	r6,zero
   8eea4:	000f883a 	mov	r7,zero
   8eea8:	0011883a 	mov	r8,zero
   8eeac:	00800434 	movhi	r2,16
   8eeb0:	10bfffc4 	addi	r2,r2,-1
   8eeb4:	301d883a 	mov	r14,r6
   8eeb8:	3884703a 	and	r2,r7,r2
   8eebc:	400a953a 	slli	r5,r8,20
   8eec0:	79bffc2c 	andhi	r6,r15,65520
   8eec4:	308cb03a 	or	r6,r6,r2
   8eec8:	00e00434 	movhi	r3,32784
   8eecc:	18ffffc4 	addi	r3,r3,-1
   8eed0:	800497fa 	slli	r2,r16,31
   8eed4:	30c6703a 	and	r3,r6,r3
   8eed8:	1946b03a 	or	r3,r3,r5
   8eedc:	01600034 	movhi	r5,32768
   8eee0:	297fffc4 	addi	r5,r5,-1
   8eee4:	194a703a 	and	r5,r3,r5
   8eee8:	288ab03a 	or	r5,r5,r2
   8eeec:	2807883a 	mov	r3,r5
   8eef0:	7005883a 	mov	r2,r14
   8eef4:	dc800217 	ldw	r18,8(sp)
   8eef8:	dc400117 	ldw	r17,4(sp)
   8eefc:	dc000017 	ldw	r16,0(sp)
   8ef00:	dec00304 	addi	sp,sp,12
   8ef04:	f800283a 	ret
   8ef08:	21000217 	ldw	r4,8(r4)
   8ef0c:	00bf0084 	movi	r2,-1022
   8ef10:	20803f16 	blt	r4,r2,8f010 <__pack_d+0x1b4>
   8ef14:	0080ffc4 	movi	r2,1023
   8ef18:	11002c16 	blt	r2,r4,8efcc <__pack_d+0x170>
   8ef1c:	00803fc4 	movi	r2,255
   8ef20:	408c703a 	and	r6,r8,r2
   8ef24:	00802004 	movi	r2,128
   8ef28:	0007883a 	mov	r3,zero
   8ef2c:	000f883a 	mov	r7,zero
   8ef30:	2280ffc4 	addi	r10,r4,1023
   8ef34:	30801e26 	beq	r6,r2,8efb0 <__pack_d+0x154>
   8ef38:	00801fc4 	movi	r2,127
   8ef3c:	4089883a 	add	r4,r8,r2
   8ef40:	220d803a 	cmpltu	r6,r4,r8
   8ef44:	324d883a 	add	r6,r6,r9
   8ef48:	2011883a 	mov	r8,r4
   8ef4c:	3013883a 	mov	r9,r6
   8ef50:	00880034 	movhi	r2,8192
   8ef54:	10bfffc4 	addi	r2,r2,-1
   8ef58:	12400d36 	bltu	r2,r9,8ef90 <__pack_d+0x134>
   8ef5c:	4804963a 	slli	r2,r9,24
   8ef60:	400cd23a 	srli	r6,r8,8
   8ef64:	480ed23a 	srli	r7,r9,8
   8ef68:	013fffc4 	movi	r4,-1
   8ef6c:	118cb03a 	or	r6,r2,r6
   8ef70:	01400434 	movhi	r5,16
   8ef74:	297fffc4 	addi	r5,r5,-1
   8ef78:	3104703a 	and	r2,r6,r4
   8ef7c:	3946703a 	and	r3,r7,r5
   8ef80:	5201ffcc 	andi	r8,r10,2047
   8ef84:	100d883a 	mov	r6,r2
   8ef88:	180f883a 	mov	r7,r3
   8ef8c:	003fc706 	br	8eeac <__pack_d+0x50>
   8ef90:	480897fa 	slli	r4,r9,31
   8ef94:	4004d07a 	srli	r2,r8,1
   8ef98:	4806d07a 	srli	r3,r9,1
   8ef9c:	52800044 	addi	r10,r10,1
   8efa0:	2084b03a 	or	r2,r4,r2
   8efa4:	1011883a 	mov	r8,r2
   8efa8:	1813883a 	mov	r9,r3
   8efac:	003feb06 	br	8ef5c <__pack_d+0x100>
   8efb0:	383fe11e 	bne	r7,zero,8ef38 <__pack_d+0xdc>
   8efb4:	01004004 	movi	r4,256
   8efb8:	4104703a 	and	r2,r8,r4
   8efbc:	10c4b03a 	or	r2,r2,r3
   8efc0:	103fe326 	beq	r2,zero,8ef50 <__pack_d+0xf4>
   8efc4:	3005883a 	mov	r2,r6
   8efc8:	003fdc06 	br	8ef3c <__pack_d+0xe0>
   8efcc:	000d883a 	mov	r6,zero
   8efd0:	000f883a 	mov	r7,zero
   8efd4:	0201ffc4 	movi	r8,2047
   8efd8:	003fb406 	br	8eeac <__pack_d+0x50>
   8efdc:	0005883a 	mov	r2,zero
   8efe0:	00c00234 	movhi	r3,8
   8efe4:	408cb03a 	or	r6,r8,r2
   8efe8:	48ceb03a 	or	r7,r9,r3
   8efec:	013fffc4 	movi	r4,-1
   8eff0:	01400434 	movhi	r5,16
   8eff4:	297fffc4 	addi	r5,r5,-1
   8eff8:	3104703a 	and	r2,r6,r4
   8effc:	3946703a 	and	r3,r7,r5
   8f000:	100d883a 	mov	r6,r2
   8f004:	180f883a 	mov	r7,r3
   8f008:	0201ffc4 	movi	r8,2047
   8f00c:	003fa706 	br	8eeac <__pack_d+0x50>
   8f010:	1109c83a 	sub	r4,r2,r4
   8f014:	00800e04 	movi	r2,56
   8f018:	11004316 	blt	r2,r4,8f128 <__pack_d+0x2cc>
   8f01c:	21fff804 	addi	r7,r4,-32
   8f020:	38004516 	blt	r7,zero,8f138 <__pack_d+0x2dc>
   8f024:	49d8d83a 	srl	r12,r9,r7
   8f028:	001b883a 	mov	r13,zero
   8f02c:	0023883a 	mov	r17,zero
   8f030:	01400044 	movi	r5,1
   8f034:	0025883a 	mov	r18,zero
   8f038:	38004716 	blt	r7,zero,8f158 <__pack_d+0x2fc>
   8f03c:	29d6983a 	sll	r11,r5,r7
   8f040:	0015883a 	mov	r10,zero
   8f044:	00bfffc4 	movi	r2,-1
   8f048:	5089883a 	add	r4,r10,r2
   8f04c:	588b883a 	add	r5,r11,r2
   8f050:	228d803a 	cmpltu	r6,r4,r10
   8f054:	314b883a 	add	r5,r6,r5
   8f058:	4104703a 	and	r2,r8,r4
   8f05c:	4946703a 	and	r3,r9,r5
   8f060:	10c4b03a 	or	r2,r2,r3
   8f064:	10000226 	beq	r2,zero,8f070 <__pack_d+0x214>
   8f068:	04400044 	movi	r17,1
   8f06c:	0025883a 	mov	r18,zero
   8f070:	00803fc4 	movi	r2,255
   8f074:	644eb03a 	or	r7,r12,r17
   8f078:	3892703a 	and	r9,r7,r2
   8f07c:	00802004 	movi	r2,128
   8f080:	6c90b03a 	or	r8,r13,r18
   8f084:	0015883a 	mov	r10,zero
   8f088:	48801626 	beq	r9,r2,8f0e4 <__pack_d+0x288>
   8f08c:	01001fc4 	movi	r4,127
   8f090:	3905883a 	add	r2,r7,r4
   8f094:	11cd803a 	cmpltu	r6,r2,r7
   8f098:	320d883a 	add	r6,r6,r8
   8f09c:	100f883a 	mov	r7,r2
   8f0a0:	00840034 	movhi	r2,4096
   8f0a4:	10bfffc4 	addi	r2,r2,-1
   8f0a8:	3011883a 	mov	r8,r6
   8f0ac:	0007883a 	mov	r3,zero
   8f0b0:	11801b36 	bltu	r2,r6,8f120 <__pack_d+0x2c4>
   8f0b4:	4004963a 	slli	r2,r8,24
   8f0b8:	3808d23a 	srli	r4,r7,8
   8f0bc:	400ad23a 	srli	r5,r8,8
   8f0c0:	1813883a 	mov	r9,r3
   8f0c4:	1108b03a 	or	r4,r2,r4
   8f0c8:	00bfffc4 	movi	r2,-1
   8f0cc:	00c00434 	movhi	r3,16
   8f0d0:	18ffffc4 	addi	r3,r3,-1
   8f0d4:	208c703a 	and	r6,r4,r2
   8f0d8:	28ce703a 	and	r7,r5,r3
   8f0dc:	4a01ffcc 	andi	r8,r9,2047
   8f0e0:	003f7206 	br	8eeac <__pack_d+0x50>
   8f0e4:	503fe91e 	bne	r10,zero,8f08c <__pack_d+0x230>
   8f0e8:	01004004 	movi	r4,256
   8f0ec:	3904703a 	and	r2,r7,r4
   8f0f0:	0007883a 	mov	r3,zero
   8f0f4:	10c4b03a 	or	r2,r2,r3
   8f0f8:	10000626 	beq	r2,zero,8f114 <__pack_d+0x2b8>
   8f0fc:	3a45883a 	add	r2,r7,r9
   8f100:	11cd803a 	cmpltu	r6,r2,r7
   8f104:	320d883a 	add	r6,r6,r8
   8f108:	100f883a 	mov	r7,r2
   8f10c:	3011883a 	mov	r8,r6
   8f110:	0007883a 	mov	r3,zero
   8f114:	00840034 	movhi	r2,4096
   8f118:	10bfffc4 	addi	r2,r2,-1
   8f11c:	123fe52e 	bgeu	r2,r8,8f0b4 <__pack_d+0x258>
   8f120:	00c00044 	movi	r3,1
   8f124:	003fe306 	br	8f0b4 <__pack_d+0x258>
   8f128:	0009883a 	mov	r4,zero
   8f12c:	0013883a 	mov	r9,zero
   8f130:	000b883a 	mov	r5,zero
   8f134:	003fe406 	br	8f0c8 <__pack_d+0x26c>
   8f138:	4a47883a 	add	r3,r9,r9
   8f13c:	008007c4 	movi	r2,31
   8f140:	1105c83a 	sub	r2,r2,r4
   8f144:	1886983a 	sll	r3,r3,r2
   8f148:	4118d83a 	srl	r12,r8,r4
   8f14c:	491ad83a 	srl	r13,r9,r4
   8f150:	1b18b03a 	or	r12,r3,r12
   8f154:	003fb506 	br	8f02c <__pack_d+0x1d0>
   8f158:	2806d07a 	srli	r3,r5,1
   8f15c:	008007c4 	movi	r2,31
   8f160:	1105c83a 	sub	r2,r2,r4
   8f164:	1896d83a 	srl	r11,r3,r2
   8f168:	2914983a 	sll	r10,r5,r4
   8f16c:	003fb506 	br	8f044 <__pack_d+0x1e8>

0008f170 <__unpack_d>:
   8f170:	20c00117 	ldw	r3,4(r4)
   8f174:	22400017 	ldw	r9,0(r4)
   8f178:	00800434 	movhi	r2,16
   8f17c:	10bfffc4 	addi	r2,r2,-1
   8f180:	1808d53a 	srli	r4,r3,20
   8f184:	180cd7fa 	srli	r6,r3,31
   8f188:	1894703a 	and	r10,r3,r2
   8f18c:	2201ffcc 	andi	r8,r4,2047
   8f190:	281b883a 	mov	r13,r5
   8f194:	4817883a 	mov	r11,r9
   8f198:	29800115 	stw	r6,4(r5)
   8f19c:	5019883a 	mov	r12,r10
   8f1a0:	40001e1e 	bne	r8,zero,8f21c <__unpack_d+0xac>
   8f1a4:	4a84b03a 	or	r2,r9,r10
   8f1a8:	10001926 	beq	r2,zero,8f210 <__unpack_d+0xa0>
   8f1ac:	4804d63a 	srli	r2,r9,24
   8f1b0:	500c923a 	slli	r6,r10,8
   8f1b4:	013f0084 	movi	r4,-1022
   8f1b8:	00c40034 	movhi	r3,4096
   8f1bc:	18ffffc4 	addi	r3,r3,-1
   8f1c0:	118cb03a 	or	r6,r2,r6
   8f1c4:	008000c4 	movi	r2,3
   8f1c8:	480a923a 	slli	r5,r9,8
   8f1cc:	68800015 	stw	r2,0(r13)
   8f1d0:	69000215 	stw	r4,8(r13)
   8f1d4:	19800b36 	bltu	r3,r6,8f204 <__unpack_d+0x94>
   8f1d8:	200f883a 	mov	r7,r4
   8f1dc:	1811883a 	mov	r8,r3
   8f1e0:	2945883a 	add	r2,r5,r5
   8f1e4:	1149803a 	cmpltu	r4,r2,r5
   8f1e8:	3187883a 	add	r3,r6,r6
   8f1ec:	20c9883a 	add	r4,r4,r3
   8f1f0:	100b883a 	mov	r5,r2
   8f1f4:	200d883a 	mov	r6,r4
   8f1f8:	39ffffc4 	addi	r7,r7,-1
   8f1fc:	413ff82e 	bgeu	r8,r4,8f1e0 <__unpack_d+0x70>
   8f200:	69c00215 	stw	r7,8(r13)
   8f204:	69800415 	stw	r6,16(r13)
   8f208:	69400315 	stw	r5,12(r13)
   8f20c:	f800283a 	ret
   8f210:	00800084 	movi	r2,2
   8f214:	28800015 	stw	r2,0(r5)
   8f218:	f800283a 	ret
   8f21c:	0081ffc4 	movi	r2,2047
   8f220:	40800f26 	beq	r8,r2,8f260 <__unpack_d+0xf0>
   8f224:	480cd63a 	srli	r6,r9,24
   8f228:	5006923a 	slli	r3,r10,8
   8f22c:	4804923a 	slli	r2,r9,8
   8f230:	0009883a 	mov	r4,zero
   8f234:	30c6b03a 	or	r3,r6,r3
   8f238:	01440034 	movhi	r5,4096
   8f23c:	110cb03a 	or	r6,r2,r4
   8f240:	423f0044 	addi	r8,r8,-1023
   8f244:	194eb03a 	or	r7,r3,r5
   8f248:	008000c4 	movi	r2,3
   8f24c:	69c00415 	stw	r7,16(r13)
   8f250:	6a000215 	stw	r8,8(r13)
   8f254:	68800015 	stw	r2,0(r13)
   8f258:	69800315 	stw	r6,12(r13)
   8f25c:	f800283a 	ret
   8f260:	4a84b03a 	or	r2,r9,r10
   8f264:	1000031e 	bne	r2,zero,8f274 <__unpack_d+0x104>
   8f268:	00800104 	movi	r2,4
   8f26c:	28800015 	stw	r2,0(r5)
   8f270:	f800283a 	ret
   8f274:	0009883a 	mov	r4,zero
   8f278:	01400234 	movhi	r5,8
   8f27c:	4904703a 	and	r2,r9,r4
   8f280:	5146703a 	and	r3,r10,r5
   8f284:	10c4b03a 	or	r2,r2,r3
   8f288:	10000526 	beq	r2,zero,8f2a0 <__unpack_d+0x130>
   8f28c:	00800044 	movi	r2,1
   8f290:	68800015 	stw	r2,0(r13)
   8f294:	6b000415 	stw	r12,16(r13)
   8f298:	6ac00315 	stw	r11,12(r13)
   8f29c:	f800283a 	ret
   8f2a0:	68000015 	stw	zero,0(r13)
   8f2a4:	003ffb06 	br	8f294 <__unpack_d+0x124>

0008f2a8 <__fpcmp_parts_d>:
   8f2a8:	21800017 	ldw	r6,0(r4)
   8f2ac:	00c00044 	movi	r3,1
   8f2b0:	19800a2e 	bgeu	r3,r6,8f2dc <__fpcmp_parts_d+0x34>
   8f2b4:	28800017 	ldw	r2,0(r5)
   8f2b8:	1880082e 	bgeu	r3,r2,8f2dc <__fpcmp_parts_d+0x34>
   8f2bc:	00c00104 	movi	r3,4
   8f2c0:	30c02626 	beq	r6,r3,8f35c <__fpcmp_parts_d+0xb4>
   8f2c4:	10c02226 	beq	r2,r3,8f350 <__fpcmp_parts_d+0xa8>
   8f2c8:	00c00084 	movi	r3,2
   8f2cc:	30c00526 	beq	r6,r3,8f2e4 <__fpcmp_parts_d+0x3c>
   8f2d0:	10c0071e 	bne	r2,r3,8f2f0 <__fpcmp_parts_d+0x48>
   8f2d4:	20800117 	ldw	r2,4(r4)
   8f2d8:	1000091e 	bne	r2,zero,8f300 <__fpcmp_parts_d+0x58>
   8f2dc:	00800044 	movi	r2,1
   8f2e0:	f800283a 	ret
   8f2e4:	10c01a1e 	bne	r2,r3,8f350 <__fpcmp_parts_d+0xa8>
   8f2e8:	0005883a 	mov	r2,zero
   8f2ec:	f800283a 	ret
   8f2f0:	22000117 	ldw	r8,4(r4)
   8f2f4:	28800117 	ldw	r2,4(r5)
   8f2f8:	40800326 	beq	r8,r2,8f308 <__fpcmp_parts_d+0x60>
   8f2fc:	403ff726 	beq	r8,zero,8f2dc <__fpcmp_parts_d+0x34>
   8f300:	00bfffc4 	movi	r2,-1
   8f304:	f800283a 	ret
   8f308:	20c00217 	ldw	r3,8(r4)
   8f30c:	28800217 	ldw	r2,8(r5)
   8f310:	10fffa16 	blt	r2,r3,8f2fc <__fpcmp_parts_d+0x54>
   8f314:	18800916 	blt	r3,r2,8f33c <__fpcmp_parts_d+0x94>
   8f318:	21c00417 	ldw	r7,16(r4)
   8f31c:	28c00417 	ldw	r3,16(r5)
   8f320:	21800317 	ldw	r6,12(r4)
   8f324:	28800317 	ldw	r2,12(r5)
   8f328:	19fff436 	bltu	r3,r7,8f2fc <__fpcmp_parts_d+0x54>
   8f32c:	38c00526 	beq	r7,r3,8f344 <__fpcmp_parts_d+0x9c>
   8f330:	38c00236 	bltu	r7,r3,8f33c <__fpcmp_parts_d+0x94>
   8f334:	19ffec1e 	bne	r3,r7,8f2e8 <__fpcmp_parts_d+0x40>
   8f338:	30bfeb2e 	bgeu	r6,r2,8f2e8 <__fpcmp_parts_d+0x40>
   8f33c:	403fe71e 	bne	r8,zero,8f2dc <__fpcmp_parts_d+0x34>
   8f340:	003fef06 	br	8f300 <__fpcmp_parts_d+0x58>
   8f344:	11bffa2e 	bgeu	r2,r6,8f330 <__fpcmp_parts_d+0x88>
   8f348:	403fe426 	beq	r8,zero,8f2dc <__fpcmp_parts_d+0x34>
   8f34c:	003fec06 	br	8f300 <__fpcmp_parts_d+0x58>
   8f350:	28800117 	ldw	r2,4(r5)
   8f354:	103fe11e 	bne	r2,zero,8f2dc <__fpcmp_parts_d+0x34>
   8f358:	003fe906 	br	8f300 <__fpcmp_parts_d+0x58>
   8f35c:	11bfdd1e 	bne	r2,r6,8f2d4 <__fpcmp_parts_d+0x2c>
   8f360:	28c00117 	ldw	r3,4(r5)
   8f364:	20800117 	ldw	r2,4(r4)
   8f368:	1885c83a 	sub	r2,r3,r2
   8f36c:	f800283a 	ret

0008f370 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   8f370:	defffa04 	addi	sp,sp,-24
   8f374:	dfc00515 	stw	ra,20(sp)
   8f378:	df000415 	stw	fp,16(sp)
   8f37c:	df000404 	addi	fp,sp,16
   8f380:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   8f384:	00800244 	movi	r2,9
   8f388:	e0bffc15 	stw	r2,-16(fp)
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   8f38c:	e13ffc17 	ldw	r4,-16(fp)
   8f390:	014003f4 	movhi	r5,15
   8f394:	29509004 	addi	r5,r5,16960
   8f398:	008597c0 	call	8597c <__mulsi3>
   8f39c:	100b883a 	mov	r5,r2
   8f3a0:	0100bef4 	movhi	r4,763
   8f3a4:	213c2004 	addi	r4,r4,-3968
   8f3a8:	008596c0 	call	8596c <__udivsi3>
   8f3ac:	100b883a 	mov	r5,r2
   8f3b0:	01200034 	movhi	r4,32768
   8f3b4:	213fffc4 	addi	r4,r4,-1
   8f3b8:	008596c0 	call	8596c <__udivsi3>
   8f3bc:	100b883a 	mov	r5,r2
   8f3c0:	e13fff17 	ldw	r4,-4(fp)
   8f3c4:	008596c0 	call	8596c <__udivsi3>
   8f3c8:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   8f3cc:	e0bffd17 	ldw	r2,-12(fp)
   8f3d0:	1005003a 	cmpeq	r2,r2,zero
   8f3d4:	10002a1e 	bne	r2,zero,8f480 <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
   8f3d8:	e03ffe15 	stw	zero,-8(fp)
   8f3dc:	00001706 	br	8f43c <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   8f3e0:	00a00034 	movhi	r2,32768
   8f3e4:	10bfffc4 	addi	r2,r2,-1
   8f3e8:	10bfffc4 	addi	r2,r2,-1
   8f3ec:	103ffe1e 	bne	r2,zero,8f3e8 <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   8f3f0:	e13ffc17 	ldw	r4,-16(fp)
   8f3f4:	014003f4 	movhi	r5,15
   8f3f8:	29509004 	addi	r5,r5,16960
   8f3fc:	008597c0 	call	8597c <__mulsi3>
   8f400:	100b883a 	mov	r5,r2
   8f404:	0100bef4 	movhi	r4,763
   8f408:	213c2004 	addi	r4,r4,-3968
   8f40c:	008596c0 	call	8596c <__udivsi3>
   8f410:	100b883a 	mov	r5,r2
   8f414:	01200034 	movhi	r4,32768
   8f418:	213fffc4 	addi	r4,r4,-1
   8f41c:	008596c0 	call	8596c <__udivsi3>
   8f420:	1007883a 	mov	r3,r2
   8f424:	e0bfff17 	ldw	r2,-4(fp)
   8f428:	10c5c83a 	sub	r2,r2,r3
   8f42c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   8f430:	e0bffe17 	ldw	r2,-8(fp)
   8f434:	10800044 	addi	r2,r2,1
   8f438:	e0bffe15 	stw	r2,-8(fp)
   8f43c:	e0fffe17 	ldw	r3,-8(fp)
   8f440:	e0bffd17 	ldw	r2,-12(fp)
   8f444:	18bfe616 	blt	r3,r2,8f3e0 <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   8f448:	e13ffc17 	ldw	r4,-16(fp)
   8f44c:	014003f4 	movhi	r5,15
   8f450:	29509004 	addi	r5,r5,16960
   8f454:	008597c0 	call	8597c <__mulsi3>
   8f458:	100b883a 	mov	r5,r2
   8f45c:	0100bef4 	movhi	r4,763
   8f460:	213c2004 	addi	r4,r4,-3968
   8f464:	008596c0 	call	8596c <__udivsi3>
   8f468:	1009883a 	mov	r4,r2
   8f46c:	e17fff17 	ldw	r5,-4(fp)
   8f470:	008597c0 	call	8597c <__mulsi3>
   8f474:	10bfffc4 	addi	r2,r2,-1
   8f478:	103ffe1e 	bne	r2,zero,8f474 <alt_busy_sleep+0x104>
   8f47c:	00000d06 	br	8f4b4 <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   8f480:	e13ffc17 	ldw	r4,-16(fp)
   8f484:	014003f4 	movhi	r5,15
   8f488:	29509004 	addi	r5,r5,16960
   8f48c:	008597c0 	call	8597c <__mulsi3>
   8f490:	100b883a 	mov	r5,r2
   8f494:	0100bef4 	movhi	r4,763
   8f498:	213c2004 	addi	r4,r4,-3968
   8f49c:	008596c0 	call	8596c <__udivsi3>
   8f4a0:	1009883a 	mov	r4,r2
   8f4a4:	e17fff17 	ldw	r5,-4(fp)
   8f4a8:	008597c0 	call	8597c <__mulsi3>
   8f4ac:	10bfffc4 	addi	r2,r2,-1
   8f4b0:	00bffe16 	blt	zero,r2,8f4ac <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   8f4b4:	0005883a 	mov	r2,zero
}
   8f4b8:	e037883a 	mov	sp,fp
   8f4bc:	dfc00117 	ldw	ra,4(sp)
   8f4c0:	df000017 	ldw	fp,0(sp)
   8f4c4:	dec00204 	addi	sp,sp,8
   8f4c8:	f800283a 	ret

0008f4cc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8f4cc:	defff804 	addi	sp,sp,-32
   8f4d0:	dfc00715 	stw	ra,28(sp)
   8f4d4:	df000615 	stw	fp,24(sp)
   8f4d8:	df000604 	addi	fp,sp,24
   8f4dc:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8f4e0:	e0bffc17 	ldw	r2,-16(fp)
   8f4e4:	1004803a 	cmplt	r2,r2,zero
   8f4e8:	1000091e 	bne	r2,zero,8f510 <close+0x44>
   8f4ec:	e13ffc17 	ldw	r4,-16(fp)
   8f4f0:	01400304 	movi	r5,12
   8f4f4:	008597c0 	call	8597c <__mulsi3>
   8f4f8:	1007883a 	mov	r3,r2
   8f4fc:	00800274 	movhi	r2,9
   8f500:	108bbb04 	addi	r2,r2,12012
   8f504:	1887883a 	add	r3,r3,r2
   8f508:	e0ffff15 	stw	r3,-4(fp)
   8f50c:	00000106 	br	8f514 <close+0x48>
   8f510:	e03fff15 	stw	zero,-4(fp)
   8f514:	e0bfff17 	ldw	r2,-4(fp)
   8f518:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   8f51c:	e0bffb17 	ldw	r2,-20(fp)
   8f520:	1005003a 	cmpeq	r2,r2,zero
   8f524:	10001d1e 	bne	r2,zero,8f59c <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8f528:	e0bffb17 	ldw	r2,-20(fp)
   8f52c:	10800017 	ldw	r2,0(r2)
   8f530:	10800417 	ldw	r2,16(r2)
   8f534:	1005003a 	cmpeq	r2,r2,zero
   8f538:	1000071e 	bne	r2,zero,8f558 <close+0x8c>
   8f53c:	e0bffb17 	ldw	r2,-20(fp)
   8f540:	10800017 	ldw	r2,0(r2)
   8f544:	10800417 	ldw	r2,16(r2)
   8f548:	e13ffb17 	ldw	r4,-20(fp)
   8f54c:	103ee83a 	callr	r2
   8f550:	e0bffe15 	stw	r2,-8(fp)
   8f554:	00000106 	br	8f55c <close+0x90>
   8f558:	e03ffe15 	stw	zero,-8(fp)
   8f55c:	e0bffe17 	ldw	r2,-8(fp)
   8f560:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8f564:	e13ffc17 	ldw	r4,-16(fp)
   8f568:	008fee40 	call	8fee4 <alt_release_fd>
    if (rval < 0)
   8f56c:	e0bffa17 	ldw	r2,-24(fp)
   8f570:	1004403a 	cmpge	r2,r2,zero
   8f574:	1000071e 	bne	r2,zero,8f594 <close+0xc8>
    {
      ALT_ERRNO = -rval;
   8f578:	008f5cc0 	call	8f5cc <alt_get_errno>
   8f57c:	e0fffa17 	ldw	r3,-24(fp)
   8f580:	00c7c83a 	sub	r3,zero,r3
   8f584:	10c00015 	stw	r3,0(r2)
      return -1;
   8f588:	00bfffc4 	movi	r2,-1
   8f58c:	e0bffd15 	stw	r2,-12(fp)
   8f590:	00000806 	br	8f5b4 <close+0xe8>
    }
    return 0;
   8f594:	e03ffd15 	stw	zero,-12(fp)
   8f598:	00000606 	br	8f5b4 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8f59c:	008f5cc0 	call	8f5cc <alt_get_errno>
   8f5a0:	1007883a 	mov	r3,r2
   8f5a4:	00801444 	movi	r2,81
   8f5a8:	18800015 	stw	r2,0(r3)
    return -1;
   8f5ac:	00bfffc4 	movi	r2,-1
   8f5b0:	e0bffd15 	stw	r2,-12(fp)
   8f5b4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   8f5b8:	e037883a 	mov	sp,fp
   8f5bc:	dfc00117 	ldw	ra,4(sp)
   8f5c0:	df000017 	ldw	fp,0(sp)
   8f5c4:	dec00204 	addi	sp,sp,8
   8f5c8:	f800283a 	ret

0008f5cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8f5cc:	defffd04 	addi	sp,sp,-12
   8f5d0:	dfc00215 	stw	ra,8(sp)
   8f5d4:	df000115 	stw	fp,4(sp)
   8f5d8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8f5dc:	00800274 	movhi	r2,9
   8f5e0:	10904c04 	addi	r2,r2,16688
   8f5e4:	10800017 	ldw	r2,0(r2)
   8f5e8:	1005003a 	cmpeq	r2,r2,zero
   8f5ec:	1000061e 	bne	r2,zero,8f608 <alt_get_errno+0x3c>
   8f5f0:	00800274 	movhi	r2,9
   8f5f4:	10904c04 	addi	r2,r2,16688
   8f5f8:	10800017 	ldw	r2,0(r2)
   8f5fc:	103ee83a 	callr	r2
   8f600:	e0bfff15 	stw	r2,-4(fp)
   8f604:	00000306 	br	8f614 <alt_get_errno+0x48>
   8f608:	00800274 	movhi	r2,9
   8f60c:	10970a04 	addi	r2,r2,23592
   8f610:	e0bfff15 	stw	r2,-4(fp)
   8f614:	e0bfff17 	ldw	r2,-4(fp)
}
   8f618:	e037883a 	mov	sp,fp
   8f61c:	dfc00117 	ldw	ra,4(sp)
   8f620:	df000017 	ldw	fp,0(sp)
   8f624:	dec00204 	addi	sp,sp,8
   8f628:	f800283a 	ret

0008f62c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   8f62c:	defffc04 	addi	sp,sp,-16
   8f630:	df000315 	stw	fp,12(sp)
   8f634:	df000304 	addi	fp,sp,12
   8f638:	e13ffd15 	stw	r4,-12(fp)
   8f63c:	e17ffe15 	stw	r5,-8(fp)
   8f640:	e1bfff15 	stw	r6,-4(fp)
  return len;
   8f644:	e0bfff17 	ldw	r2,-4(fp)
}
   8f648:	e037883a 	mov	sp,fp
   8f64c:	df000017 	ldw	fp,0(sp)
   8f650:	dec00104 	addi	sp,sp,4
   8f654:	f800283a 	ret

0008f658 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8f658:	defff904 	addi	sp,sp,-28
   8f65c:	dfc00615 	stw	ra,24(sp)
   8f660:	df000515 	stw	fp,20(sp)
   8f664:	df000504 	addi	fp,sp,20
   8f668:	e13ffc15 	stw	r4,-16(fp)
   8f66c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8f670:	e0bffc17 	ldw	r2,-16(fp)
   8f674:	1004803a 	cmplt	r2,r2,zero
   8f678:	1000091e 	bne	r2,zero,8f6a0 <fstat+0x48>
   8f67c:	e13ffc17 	ldw	r4,-16(fp)
   8f680:	01400304 	movi	r5,12
   8f684:	008597c0 	call	8597c <__mulsi3>
   8f688:	1007883a 	mov	r3,r2
   8f68c:	00800274 	movhi	r2,9
   8f690:	108bbb04 	addi	r2,r2,12012
   8f694:	1887883a 	add	r3,r3,r2
   8f698:	e0ffff15 	stw	r3,-4(fp)
   8f69c:	00000106 	br	8f6a4 <fstat+0x4c>
   8f6a0:	e03fff15 	stw	zero,-4(fp)
   8f6a4:	e0bfff17 	ldw	r2,-4(fp)
   8f6a8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8f6ac:	e0bffb17 	ldw	r2,-20(fp)
   8f6b0:	1005003a 	cmpeq	r2,r2,zero
   8f6b4:	1000121e 	bne	r2,zero,8f700 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8f6b8:	e0bffb17 	ldw	r2,-20(fp)
   8f6bc:	10800017 	ldw	r2,0(r2)
   8f6c0:	10800817 	ldw	r2,32(r2)
   8f6c4:	1005003a 	cmpeq	r2,r2,zero
   8f6c8:	1000081e 	bne	r2,zero,8f6ec <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
   8f6cc:	e0bffb17 	ldw	r2,-20(fp)
   8f6d0:	10800017 	ldw	r2,0(r2)
   8f6d4:	10800817 	ldw	r2,32(r2)
   8f6d8:	e13ffb17 	ldw	r4,-20(fp)
   8f6dc:	e17ffd17 	ldw	r5,-12(fp)
   8f6e0:	103ee83a 	callr	r2
   8f6e4:	e0bffe15 	stw	r2,-8(fp)
   8f6e8:	00000b06 	br	8f718 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8f6ec:	e0fffd17 	ldw	r3,-12(fp)
   8f6f0:	00880004 	movi	r2,8192
   8f6f4:	18800115 	stw	r2,4(r3)
      return 0;
   8f6f8:	e03ffe15 	stw	zero,-8(fp)
   8f6fc:	00000606 	br	8f718 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8f700:	008f7300 	call	8f730 <alt_get_errno>
   8f704:	1007883a 	mov	r3,r2
   8f708:	00801444 	movi	r2,81
   8f70c:	18800015 	stw	r2,0(r3)
    return -1;
   8f710:	00bfffc4 	movi	r2,-1
   8f714:	e0bffe15 	stw	r2,-8(fp)
   8f718:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   8f71c:	e037883a 	mov	sp,fp
   8f720:	dfc00117 	ldw	ra,4(sp)
   8f724:	df000017 	ldw	fp,0(sp)
   8f728:	dec00204 	addi	sp,sp,8
   8f72c:	f800283a 	ret

0008f730 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8f730:	defffd04 	addi	sp,sp,-12
   8f734:	dfc00215 	stw	ra,8(sp)
   8f738:	df000115 	stw	fp,4(sp)
   8f73c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8f740:	00800274 	movhi	r2,9
   8f744:	10904c04 	addi	r2,r2,16688
   8f748:	10800017 	ldw	r2,0(r2)
   8f74c:	1005003a 	cmpeq	r2,r2,zero
   8f750:	1000061e 	bne	r2,zero,8f76c <alt_get_errno+0x3c>
   8f754:	00800274 	movhi	r2,9
   8f758:	10904c04 	addi	r2,r2,16688
   8f75c:	10800017 	ldw	r2,0(r2)
   8f760:	103ee83a 	callr	r2
   8f764:	e0bfff15 	stw	r2,-4(fp)
   8f768:	00000306 	br	8f778 <alt_get_errno+0x48>
   8f76c:	00800274 	movhi	r2,9
   8f770:	10970a04 	addi	r2,r2,23592
   8f774:	e0bfff15 	stw	r2,-4(fp)
   8f778:	e0bfff17 	ldw	r2,-4(fp)
}
   8f77c:	e037883a 	mov	sp,fp
   8f780:	dfc00117 	ldw	ra,4(sp)
   8f784:	df000017 	ldw	fp,0(sp)
   8f788:	dec00204 	addi	sp,sp,8
   8f78c:	f800283a 	ret

0008f790 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   8f790:	deffef04 	addi	sp,sp,-68
   8f794:	df001015 	stw	fp,64(sp)
   8f798:	df001004 	addi	fp,sp,64
   8f79c:	e13ffc15 	stw	r4,-16(fp)
   8f7a0:	e17ffd15 	stw	r5,-12(fp)
   8f7a4:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
   8f7a8:	00bffa84 	movi	r2,-22
   8f7ac:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8f7b0:	e0bffc17 	ldw	r2,-16(fp)
   8f7b4:	10800828 	cmpgeui	r2,r2,32
   8f7b8:	1000601e 	bne	r2,zero,8f93c <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f7bc:	0005303a 	rdctl	r2,status
   8f7c0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f7c4:	e0fff917 	ldw	r3,-28(fp)
   8f7c8:	00bfff84 	movi	r2,-2
   8f7cc:	1884703a 	and	r2,r3,r2
   8f7d0:	1001703a 	wrctl	status,r2
  
  return context;
   8f7d4:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   8f7d8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
   8f7dc:	e0bffc17 	ldw	r2,-16(fp)
   8f7e0:	00c00374 	movhi	r3,13
   8f7e4:	18f97504 	addi	r3,r3,-6700
   8f7e8:	100490fa 	slli	r2,r2,3
   8f7ec:	10c7883a 	add	r3,r2,r3
   8f7f0:	e0bffe17 	ldw	r2,-8(fp)
   8f7f4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
   8f7f8:	e0bffc17 	ldw	r2,-16(fp)
   8f7fc:	00c00374 	movhi	r3,13
   8f800:	18f97504 	addi	r3,r3,-6700
   8f804:	100490fa 	slli	r2,r2,3
   8f808:	10c5883a 	add	r2,r2,r3
   8f80c:	10c00104 	addi	r3,r2,4
   8f810:	e0bffd17 	ldw	r2,-12(fp)
   8f814:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   8f818:	e0bffe17 	ldw	r2,-8(fp)
   8f81c:	1005003a 	cmpeq	r2,r2,zero
   8f820:	1000201e 	bne	r2,zero,8f8a4 <alt_irq_register+0x114>
   8f824:	e0bffc17 	ldw	r2,-16(fp)
   8f828:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f82c:	0005303a 	rdctl	r2,status
   8f830:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f834:	e0fff617 	ldw	r3,-40(fp)
   8f838:	00bfff84 	movi	r2,-2
   8f83c:	1884703a 	and	r2,r3,r2
   8f840:	1001703a 	wrctl	status,r2
  
  return context;
   8f844:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8f848:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   8f84c:	e0fff717 	ldw	r3,-36(fp)
   8f850:	00800044 	movi	r2,1
   8f854:	10c4983a 	sll	r2,r2,r3
   8f858:	1007883a 	mov	r3,r2
   8f85c:	00800274 	movhi	r2,9
   8f860:	10970b04 	addi	r2,r2,23596
   8f864:	10800017 	ldw	r2,0(r2)
   8f868:	1886b03a 	or	r3,r3,r2
   8f86c:	00800274 	movhi	r2,9
   8f870:	10970b04 	addi	r2,r2,23596
   8f874:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8f878:	00800274 	movhi	r2,9
   8f87c:	10970b04 	addi	r2,r2,23596
   8f880:	10800017 	ldw	r2,0(r2)
   8f884:	100170fa 	wrctl	ienable,r2
   8f888:	e0bff817 	ldw	r2,-32(fp)
   8f88c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f890:	e0bff517 	ldw	r2,-44(fp)
   8f894:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8f898:	0005883a 	mov	r2,zero
   8f89c:	e0bfff15 	stw	r2,-4(fp)
   8f8a0:	00002006 	br	8f924 <alt_irq_register+0x194>
   8f8a4:	e0bffc17 	ldw	r2,-16(fp)
   8f8a8:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f8ac:	0005303a 	rdctl	r2,status
   8f8b0:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f8b4:	e0fff217 	ldw	r3,-56(fp)
   8f8b8:	00bfff84 	movi	r2,-2
   8f8bc:	1884703a 	and	r2,r3,r2
   8f8c0:	1001703a 	wrctl	status,r2
  
  return context;
   8f8c4:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8f8c8:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
   8f8cc:	e0fff317 	ldw	r3,-52(fp)
   8f8d0:	00800044 	movi	r2,1
   8f8d4:	10c4983a 	sll	r2,r2,r3
   8f8d8:	0084303a 	nor	r2,zero,r2
   8f8dc:	1007883a 	mov	r3,r2
   8f8e0:	00800274 	movhi	r2,9
   8f8e4:	10970b04 	addi	r2,r2,23596
   8f8e8:	10800017 	ldw	r2,0(r2)
   8f8ec:	1886703a 	and	r3,r3,r2
   8f8f0:	00800274 	movhi	r2,9
   8f8f4:	10970b04 	addi	r2,r2,23596
   8f8f8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8f8fc:	00800274 	movhi	r2,9
   8f900:	10970b04 	addi	r2,r2,23596
   8f904:	10800017 	ldw	r2,0(r2)
   8f908:	100170fa 	wrctl	ienable,r2
   8f90c:	e0bff417 	ldw	r2,-48(fp)
   8f910:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f914:	e0bff117 	ldw	r2,-60(fp)
   8f918:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8f91c:	0005883a 	mov	r2,zero
   8f920:	e0bfff15 	stw	r2,-4(fp)
   8f924:	e0bfff17 	ldw	r2,-4(fp)
   8f928:	e0bffb15 	stw	r2,-20(fp)
   8f92c:	e0bffa17 	ldw	r2,-24(fp)
   8f930:	e0bff015 	stw	r2,-64(fp)
   8f934:	e0bff017 	ldw	r2,-64(fp)
   8f938:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   8f93c:	e0bffb17 	ldw	r2,-20(fp)
}
   8f940:	e037883a 	mov	sp,fp
   8f944:	df000017 	ldw	fp,0(sp)
   8f948:	dec00104 	addi	sp,sp,4
   8f94c:	f800283a 	ret

0008f950 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8f950:	deffeb04 	addi	sp,sp,-84
   8f954:	dfc01415 	stw	ra,80(sp)
   8f958:	df001315 	stw	fp,76(sp)
   8f95c:	df001304 	addi	fp,sp,76
   8f960:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8f964:	e0bffd17 	ldw	r2,-12(fp)
   8f968:	1004803a 	cmplt	r2,r2,zero
   8f96c:	1000091e 	bne	r2,zero,8f994 <isatty+0x44>
   8f970:	e13ffd17 	ldw	r4,-12(fp)
   8f974:	01400304 	movi	r5,12
   8f978:	008597c0 	call	8597c <__mulsi3>
   8f97c:	1007883a 	mov	r3,r2
   8f980:	00800274 	movhi	r2,9
   8f984:	108bbb04 	addi	r2,r2,12012
   8f988:	1887883a 	add	r3,r3,r2
   8f98c:	e0ffff15 	stw	r3,-4(fp)
   8f990:	00000106 	br	8f998 <isatty+0x48>
   8f994:	e03fff15 	stw	zero,-4(fp)
   8f998:	e0bfff17 	ldw	r2,-4(fp)
   8f99c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   8f9a0:	e0bfed17 	ldw	r2,-76(fp)
   8f9a4:	1005003a 	cmpeq	r2,r2,zero
   8f9a8:	10000f1e 	bne	r2,zero,8f9e8 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8f9ac:	e0bfed17 	ldw	r2,-76(fp)
   8f9b0:	10800017 	ldw	r2,0(r2)
   8f9b4:	10800817 	ldw	r2,32(r2)
   8f9b8:	1004c03a 	cmpne	r2,r2,zero
   8f9bc:	1000031e 	bne	r2,zero,8f9cc <isatty+0x7c>
    {
      return 1;
   8f9c0:	00800044 	movi	r2,1
   8f9c4:	e0bffe15 	stw	r2,-8(fp)
   8f9c8:	00000c06 	br	8f9fc <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8f9cc:	e17fee04 	addi	r5,fp,-72
   8f9d0:	e13ffd17 	ldw	r4,-12(fp)
   8f9d4:	008f6580 	call	8f658 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8f9d8:	e0bfef17 	ldw	r2,-68(fp)
   8f9dc:	10880020 	cmpeqi	r2,r2,8192
   8f9e0:	e0bffe15 	stw	r2,-8(fp)
   8f9e4:	00000506 	br	8f9fc <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8f9e8:	008fa140 	call	8fa14 <alt_get_errno>
   8f9ec:	1007883a 	mov	r3,r2
   8f9f0:	00801444 	movi	r2,81
   8f9f4:	18800015 	stw	r2,0(r3)
    return 0;
   8f9f8:	e03ffe15 	stw	zero,-8(fp)
   8f9fc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   8fa00:	e037883a 	mov	sp,fp
   8fa04:	dfc00117 	ldw	ra,4(sp)
   8fa08:	df000017 	ldw	fp,0(sp)
   8fa0c:	dec00204 	addi	sp,sp,8
   8fa10:	f800283a 	ret

0008fa14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8fa14:	defffd04 	addi	sp,sp,-12
   8fa18:	dfc00215 	stw	ra,8(sp)
   8fa1c:	df000115 	stw	fp,4(sp)
   8fa20:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8fa24:	00800274 	movhi	r2,9
   8fa28:	10904c04 	addi	r2,r2,16688
   8fa2c:	10800017 	ldw	r2,0(r2)
   8fa30:	1005003a 	cmpeq	r2,r2,zero
   8fa34:	1000061e 	bne	r2,zero,8fa50 <alt_get_errno+0x3c>
   8fa38:	00800274 	movhi	r2,9
   8fa3c:	10904c04 	addi	r2,r2,16688
   8fa40:	10800017 	ldw	r2,0(r2)
   8fa44:	103ee83a 	callr	r2
   8fa48:	e0bfff15 	stw	r2,-4(fp)
   8fa4c:	00000306 	br	8fa5c <alt_get_errno+0x48>
   8fa50:	00800274 	movhi	r2,9
   8fa54:	10970a04 	addi	r2,r2,23592
   8fa58:	e0bfff15 	stw	r2,-4(fp)
   8fa5c:	e0bfff17 	ldw	r2,-4(fp)
}
   8fa60:	e037883a 	mov	sp,fp
   8fa64:	dfc00117 	ldw	ra,4(sp)
   8fa68:	df000017 	ldw	fp,0(sp)
   8fa6c:	dec00204 	addi	sp,sp,8
   8fa70:	f800283a 	ret

0008fa74 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8fa74:	defffe04 	addi	sp,sp,-8
   8fa78:	dfc00115 	stw	ra,4(sp)
   8fa7c:	df000015 	stw	fp,0(sp)
   8fa80:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   8fa84:	01000274 	movhi	r4,9
   8fa88:	21105104 	addi	r4,r4,16708
   8fa8c:	01400274 	movhi	r5,9
   8fa90:	2949ac04 	addi	r5,r5,9904
   8fa94:	01800274 	movhi	r6,9
   8fa98:	31905104 	addi	r6,r6,16708
   8fa9c:	008faf40 	call	8faf4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8faa0:	01000234 	movhi	r4,8
   8faa4:	21000804 	addi	r4,r4,32
   8faa8:	01400234 	movhi	r5,8
   8faac:	29400804 	addi	r5,r5,32
   8fab0:	01800234 	movhi	r6,8
   8fab4:	31806d04 	addi	r6,r6,436
   8fab8:	008faf40 	call	8faf4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   8fabc:	01000274 	movhi	r4,9
   8fac0:	21080b04 	addi	r4,r4,8236
   8fac4:	01400274 	movhi	r5,9
   8fac8:	29480b04 	addi	r5,r5,8236
   8facc:	01800274 	movhi	r6,9
   8fad0:	3189ac04 	addi	r6,r6,9904
   8fad4:	008faf40 	call	8faf4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8fad8:	0090e580 	call	90e58 <alt_dcache_flush_all>
  alt_icache_flush_all();
   8fadc:	00910500 	call	91050 <alt_icache_flush_all>
}
   8fae0:	e037883a 	mov	sp,fp
   8fae4:	dfc00117 	ldw	ra,4(sp)
   8fae8:	df000017 	ldw	fp,0(sp)
   8faec:	dec00204 	addi	sp,sp,8
   8faf0:	f800283a 	ret

0008faf4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   8faf4:	defffc04 	addi	sp,sp,-16
   8faf8:	df000315 	stw	fp,12(sp)
   8fafc:	df000304 	addi	fp,sp,12
   8fb00:	e13ffd15 	stw	r4,-12(fp)
   8fb04:	e17ffe15 	stw	r5,-8(fp)
   8fb08:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   8fb0c:	e0fffe17 	ldw	r3,-8(fp)
   8fb10:	e0bffd17 	ldw	r2,-12(fp)
   8fb14:	18800e26 	beq	r3,r2,8fb50 <alt_load_section+0x5c>
  {
    while( to != end )
   8fb18:	00000a06 	br	8fb44 <alt_load_section+0x50>
    {
      *to++ = *from++;
   8fb1c:	e0bffd17 	ldw	r2,-12(fp)
   8fb20:	10c00017 	ldw	r3,0(r2)
   8fb24:	e0bffe17 	ldw	r2,-8(fp)
   8fb28:	10c00015 	stw	r3,0(r2)
   8fb2c:	e0bffe17 	ldw	r2,-8(fp)
   8fb30:	10800104 	addi	r2,r2,4
   8fb34:	e0bffe15 	stw	r2,-8(fp)
   8fb38:	e0bffd17 	ldw	r2,-12(fp)
   8fb3c:	10800104 	addi	r2,r2,4
   8fb40:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8fb44:	e0fffe17 	ldw	r3,-8(fp)
   8fb48:	e0bfff17 	ldw	r2,-4(fp)
   8fb4c:	18bff31e 	bne	r3,r2,8fb1c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   8fb50:	e037883a 	mov	sp,fp
   8fb54:	df000017 	ldw	fp,0(sp)
   8fb58:	dec00104 	addi	sp,sp,4
   8fb5c:	f800283a 	ret

0008fb60 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8fb60:	defff804 	addi	sp,sp,-32
   8fb64:	dfc00715 	stw	ra,28(sp)
   8fb68:	df000615 	stw	fp,24(sp)
   8fb6c:	df000604 	addi	fp,sp,24
   8fb70:	e13ffc15 	stw	r4,-16(fp)
   8fb74:	e17ffd15 	stw	r5,-12(fp)
   8fb78:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   8fb7c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8fb80:	e0bffc17 	ldw	r2,-16(fp)
   8fb84:	1004803a 	cmplt	r2,r2,zero
   8fb88:	1000091e 	bne	r2,zero,8fbb0 <lseek+0x50>
   8fb8c:	e13ffc17 	ldw	r4,-16(fp)
   8fb90:	01400304 	movi	r5,12
   8fb94:	008597c0 	call	8597c <__mulsi3>
   8fb98:	1007883a 	mov	r3,r2
   8fb9c:	00800274 	movhi	r2,9
   8fba0:	108bbb04 	addi	r2,r2,12012
   8fba4:	1887883a 	add	r3,r3,r2
   8fba8:	e0ffff15 	stw	r3,-4(fp)
   8fbac:	00000106 	br	8fbb4 <lseek+0x54>
   8fbb0:	e03fff15 	stw	zero,-4(fp)
   8fbb4:	e0bfff17 	ldw	r2,-4(fp)
   8fbb8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   8fbbc:	e0bffb17 	ldw	r2,-20(fp)
   8fbc0:	1005003a 	cmpeq	r2,r2,zero
   8fbc4:	1000111e 	bne	r2,zero,8fc0c <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8fbc8:	e0bffb17 	ldw	r2,-20(fp)
   8fbcc:	10800017 	ldw	r2,0(r2)
   8fbd0:	10800717 	ldw	r2,28(r2)
   8fbd4:	1005003a 	cmpeq	r2,r2,zero
   8fbd8:	1000091e 	bne	r2,zero,8fc00 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8fbdc:	e0bffb17 	ldw	r2,-20(fp)
   8fbe0:	10800017 	ldw	r2,0(r2)
   8fbe4:	10800717 	ldw	r2,28(r2)
   8fbe8:	e13ffb17 	ldw	r4,-20(fp)
   8fbec:	e17ffd17 	ldw	r5,-12(fp)
   8fbf0:	e1bffe17 	ldw	r6,-8(fp)
   8fbf4:	103ee83a 	callr	r2
   8fbf8:	e0bffa15 	stw	r2,-24(fp)
   8fbfc:	00000506 	br	8fc14 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8fc00:	00bfde84 	movi	r2,-134
   8fc04:	e0bffa15 	stw	r2,-24(fp)
   8fc08:	00000206 	br	8fc14 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
   8fc0c:	00bfebc4 	movi	r2,-81
   8fc10:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   8fc14:	e0bffa17 	ldw	r2,-24(fp)
   8fc18:	1004403a 	cmpge	r2,r2,zero
   8fc1c:	1000071e 	bne	r2,zero,8fc3c <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
   8fc20:	008fc540 	call	8fc54 <alt_get_errno>
   8fc24:	1007883a 	mov	r3,r2
   8fc28:	e0bffa17 	ldw	r2,-24(fp)
   8fc2c:	0085c83a 	sub	r2,zero,r2
   8fc30:	18800015 	stw	r2,0(r3)
    rc = -1;
   8fc34:	00bfffc4 	movi	r2,-1
   8fc38:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   8fc3c:	e0bffa17 	ldw	r2,-24(fp)
}
   8fc40:	e037883a 	mov	sp,fp
   8fc44:	dfc00117 	ldw	ra,4(sp)
   8fc48:	df000017 	ldw	fp,0(sp)
   8fc4c:	dec00204 	addi	sp,sp,8
   8fc50:	f800283a 	ret

0008fc54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8fc54:	defffd04 	addi	sp,sp,-12
   8fc58:	dfc00215 	stw	ra,8(sp)
   8fc5c:	df000115 	stw	fp,4(sp)
   8fc60:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8fc64:	00800274 	movhi	r2,9
   8fc68:	10904c04 	addi	r2,r2,16688
   8fc6c:	10800017 	ldw	r2,0(r2)
   8fc70:	1005003a 	cmpeq	r2,r2,zero
   8fc74:	1000061e 	bne	r2,zero,8fc90 <alt_get_errno+0x3c>
   8fc78:	00800274 	movhi	r2,9
   8fc7c:	10904c04 	addi	r2,r2,16688
   8fc80:	10800017 	ldw	r2,0(r2)
   8fc84:	103ee83a 	callr	r2
   8fc88:	e0bfff15 	stw	r2,-4(fp)
   8fc8c:	00000306 	br	8fc9c <alt_get_errno+0x48>
   8fc90:	00800274 	movhi	r2,9
   8fc94:	10970a04 	addi	r2,r2,23592
   8fc98:	e0bfff15 	stw	r2,-4(fp)
   8fc9c:	e0bfff17 	ldw	r2,-4(fp)
}
   8fca0:	e037883a 	mov	sp,fp
   8fca4:	dfc00117 	ldw	ra,4(sp)
   8fca8:	df000017 	ldw	fp,0(sp)
   8fcac:	dec00204 	addi	sp,sp,8
   8fcb0:	f800283a 	ret

0008fcb4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8fcb4:	defffd04 	addi	sp,sp,-12
   8fcb8:	dfc00215 	stw	ra,8(sp)
   8fcbc:	df000115 	stw	fp,4(sp)
   8fcc0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8fcc4:	0009883a 	mov	r4,zero
   8fcc8:	009019c0 	call	9019c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8fccc:	00901d00 	call	901d0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8fcd0:	01000274 	movhi	r4,9
   8fcd4:	21099e04 	addi	r4,r4,9848
   8fcd8:	01400274 	movhi	r5,9
   8fcdc:	29499e04 	addi	r5,r5,9848
   8fce0:	01800274 	movhi	r6,9
   8fce4:	31899e04 	addi	r6,r6,9848
   8fce8:	00914100 	call	91410 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8fcec:	0090f880 	call	90f88 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8fcf0:	01000274 	movhi	r4,9
   8fcf4:	2103fb04 	addi	r4,r4,4076
   8fcf8:	0091bb40 	call	91bb4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8fcfc:	d126ce17 	ldw	r4,-25800(gp)
   8fd00:	d166cf17 	ldw	r5,-25796(gp)
   8fd04:	d1a6d017 	ldw	r6,-25792(gp)
   8fd08:	0084e440 	call	84e44 <main>
   8fd0c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8fd10:	01000044 	movi	r4,1
   8fd14:	008f4cc0 	call	8f4cc <close>
  exit (result);
   8fd18:	e13fff17 	ldw	r4,-4(fp)
   8fd1c:	0091bc80 	call	91bc8 <exit>

0008fd20 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   8fd20:	defffe04 	addi	sp,sp,-8
   8fd24:	df000115 	stw	fp,4(sp)
   8fd28:	df000104 	addi	fp,sp,4
   8fd2c:	e13fff15 	stw	r4,-4(fp)
}
   8fd30:	e037883a 	mov	sp,fp
   8fd34:	df000017 	ldw	fp,0(sp)
   8fd38:	dec00104 	addi	sp,sp,4
   8fd3c:	f800283a 	ret

0008fd40 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8fd40:	defffe04 	addi	sp,sp,-8
   8fd44:	df000115 	stw	fp,4(sp)
   8fd48:	df000104 	addi	fp,sp,4
   8fd4c:	e13fff15 	stw	r4,-4(fp)
}
   8fd50:	e037883a 	mov	sp,fp
   8fd54:	df000017 	ldw	fp,0(sp)
   8fd58:	dec00104 	addi	sp,sp,4
   8fd5c:	f800283a 	ret

0008fd60 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8fd60:	defff704 	addi	sp,sp,-36
   8fd64:	dfc00815 	stw	ra,32(sp)
   8fd68:	df000715 	stw	fp,28(sp)
   8fd6c:	df000704 	addi	fp,sp,28
   8fd70:	e13ffb15 	stw	r4,-20(fp)
   8fd74:	e17ffc15 	stw	r5,-16(fp)
   8fd78:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8fd7c:	e0bffb17 	ldw	r2,-20(fp)
   8fd80:	1004803a 	cmplt	r2,r2,zero
   8fd84:	1000091e 	bne	r2,zero,8fdac <read+0x4c>
   8fd88:	e13ffb17 	ldw	r4,-20(fp)
   8fd8c:	01400304 	movi	r5,12
   8fd90:	008597c0 	call	8597c <__mulsi3>
   8fd94:	1007883a 	mov	r3,r2
   8fd98:	00800274 	movhi	r2,9
   8fd9c:	108bbb04 	addi	r2,r2,12012
   8fda0:	1887883a 	add	r3,r3,r2
   8fda4:	e0ffff15 	stw	r3,-4(fp)
   8fda8:	00000106 	br	8fdb0 <read+0x50>
   8fdac:	e03fff15 	stw	zero,-4(fp)
   8fdb0:	e0bfff17 	ldw	r2,-4(fp)
   8fdb4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8fdb8:	e0bffa17 	ldw	r2,-24(fp)
   8fdbc:	1005003a 	cmpeq	r2,r2,zero
   8fdc0:	1000241e 	bne	r2,zero,8fe54 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8fdc4:	e0bffa17 	ldw	r2,-24(fp)
   8fdc8:	10800217 	ldw	r2,8(r2)
   8fdcc:	108000cc 	andi	r2,r2,3
   8fdd0:	10800060 	cmpeqi	r2,r2,1
   8fdd4:	10001a1e 	bne	r2,zero,8fe40 <read+0xe0>
   8fdd8:	e0bffa17 	ldw	r2,-24(fp)
   8fddc:	10800017 	ldw	r2,0(r2)
   8fde0:	10800517 	ldw	r2,20(r2)
   8fde4:	1005003a 	cmpeq	r2,r2,zero
   8fde8:	1000151e 	bne	r2,zero,8fe40 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8fdec:	e0bffa17 	ldw	r2,-24(fp)
   8fdf0:	10800017 	ldw	r2,0(r2)
   8fdf4:	10800517 	ldw	r2,20(r2)
   8fdf8:	e17ffc17 	ldw	r5,-16(fp)
   8fdfc:	e1bffd17 	ldw	r6,-12(fp)
   8fe00:	e13ffa17 	ldw	r4,-24(fp)
   8fe04:	103ee83a 	callr	r2
   8fe08:	e0bff915 	stw	r2,-28(fp)
   8fe0c:	e0bff917 	ldw	r2,-28(fp)
   8fe10:	1004403a 	cmpge	r2,r2,zero
   8fe14:	1000071e 	bne	r2,zero,8fe34 <read+0xd4>
        {
          ALT_ERRNO = -rval;
   8fe18:	008fe840 	call	8fe84 <alt_get_errno>
   8fe1c:	e0fff917 	ldw	r3,-28(fp)
   8fe20:	00c7c83a 	sub	r3,zero,r3
   8fe24:	10c00015 	stw	r3,0(r2)
          return -1;
   8fe28:	00bfffc4 	movi	r2,-1
   8fe2c:	e0bffe15 	stw	r2,-8(fp)
   8fe30:	00000e06 	br	8fe6c <read+0x10c>
        }
        return rval;
   8fe34:	e0bff917 	ldw	r2,-28(fp)
   8fe38:	e0bffe15 	stw	r2,-8(fp)
   8fe3c:	00000b06 	br	8fe6c <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8fe40:	008fe840 	call	8fe84 <alt_get_errno>
   8fe44:	1007883a 	mov	r3,r2
   8fe48:	00800344 	movi	r2,13
   8fe4c:	18800015 	stw	r2,0(r3)
   8fe50:	00000406 	br	8fe64 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8fe54:	008fe840 	call	8fe84 <alt_get_errno>
   8fe58:	1007883a 	mov	r3,r2
   8fe5c:	00801444 	movi	r2,81
   8fe60:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8fe64:	00bfffc4 	movi	r2,-1
   8fe68:	e0bffe15 	stw	r2,-8(fp)
   8fe6c:	e0bffe17 	ldw	r2,-8(fp)
}
   8fe70:	e037883a 	mov	sp,fp
   8fe74:	dfc00117 	ldw	ra,4(sp)
   8fe78:	df000017 	ldw	fp,0(sp)
   8fe7c:	dec00204 	addi	sp,sp,8
   8fe80:	f800283a 	ret

0008fe84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8fe84:	defffd04 	addi	sp,sp,-12
   8fe88:	dfc00215 	stw	ra,8(sp)
   8fe8c:	df000115 	stw	fp,4(sp)
   8fe90:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8fe94:	00800274 	movhi	r2,9
   8fe98:	10904c04 	addi	r2,r2,16688
   8fe9c:	10800017 	ldw	r2,0(r2)
   8fea0:	1005003a 	cmpeq	r2,r2,zero
   8fea4:	1000061e 	bne	r2,zero,8fec0 <alt_get_errno+0x3c>
   8fea8:	00800274 	movhi	r2,9
   8feac:	10904c04 	addi	r2,r2,16688
   8feb0:	10800017 	ldw	r2,0(r2)
   8feb4:	103ee83a 	callr	r2
   8feb8:	e0bfff15 	stw	r2,-4(fp)
   8febc:	00000306 	br	8fecc <alt_get_errno+0x48>
   8fec0:	00800274 	movhi	r2,9
   8fec4:	10970a04 	addi	r2,r2,23592
   8fec8:	e0bfff15 	stw	r2,-4(fp)
   8fecc:	e0bfff17 	ldw	r2,-4(fp)
}
   8fed0:	e037883a 	mov	sp,fp
   8fed4:	dfc00117 	ldw	ra,4(sp)
   8fed8:	df000017 	ldw	fp,0(sp)
   8fedc:	dec00204 	addi	sp,sp,8
   8fee0:	f800283a 	ret

0008fee4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8fee4:	defffc04 	addi	sp,sp,-16
   8fee8:	dfc00315 	stw	ra,12(sp)
   8feec:	df000215 	stw	fp,8(sp)
   8fef0:	dc000115 	stw	r16,4(sp)
   8fef4:	df000104 	addi	fp,sp,4
   8fef8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   8fefc:	e0bfff17 	ldw	r2,-4(fp)
   8ff00:	108000d0 	cmplti	r2,r2,3
   8ff04:	10000f1e 	bne	r2,zero,8ff44 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   8ff08:	e13fff17 	ldw	r4,-4(fp)
   8ff0c:	04000274 	movhi	r16,9
   8ff10:	840bbb04 	addi	r16,r16,12012
   8ff14:	01400304 	movi	r5,12
   8ff18:	008597c0 	call	8597c <__mulsi3>
   8ff1c:	1405883a 	add	r2,r2,r16
   8ff20:	10800204 	addi	r2,r2,8
   8ff24:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8ff28:	e13fff17 	ldw	r4,-4(fp)
   8ff2c:	04000274 	movhi	r16,9
   8ff30:	840bbb04 	addi	r16,r16,12012
   8ff34:	01400304 	movi	r5,12
   8ff38:	008597c0 	call	8597c <__mulsi3>
   8ff3c:	1405883a 	add	r2,r2,r16
   8ff40:	10000015 	stw	zero,0(r2)
  }
}
   8ff44:	e037883a 	mov	sp,fp
   8ff48:	dfc00217 	ldw	ra,8(sp)
   8ff4c:	df000117 	ldw	fp,4(sp)
   8ff50:	dc000017 	ldw	r16,0(sp)
   8ff54:	dec00304 	addi	sp,sp,12
   8ff58:	f800283a 	ret

0008ff5c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8ff5c:	defff804 	addi	sp,sp,-32
   8ff60:	df000715 	stw	fp,28(sp)
   8ff64:	df000704 	addi	fp,sp,28
   8ff68:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ff6c:	0005303a 	rdctl	r2,status
   8ff70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ff74:	e0fffb17 	ldw	r3,-20(fp)
   8ff78:	00bfff84 	movi	r2,-2
   8ff7c:	1884703a 	and	r2,r3,r2
   8ff80:	1001703a 	wrctl	status,r2
  
  return context;
   8ff84:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8ff88:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8ff8c:	d0a01017 	ldw	r2,-32704(gp)
   8ff90:	10c000c4 	addi	r3,r2,3
   8ff94:	00bfff04 	movi	r2,-4
   8ff98:	1884703a 	and	r2,r3,r2
   8ff9c:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8ffa0:	d0e01017 	ldw	r3,-32704(gp)
   8ffa4:	e0bffe17 	ldw	r2,-8(fp)
   8ffa8:	1887883a 	add	r3,r3,r2
   8ffac:	00800434 	movhi	r2,16
   8ffb0:	10800004 	addi	r2,r2,0
   8ffb4:	10c0072e 	bgeu	r2,r3,8ffd4 <sbrk+0x78>
   8ffb8:	e0bffd17 	ldw	r2,-12(fp)
   8ffbc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ffc0:	e0bffa17 	ldw	r2,-24(fp)
   8ffc4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8ffc8:	00bfffc4 	movi	r2,-1
   8ffcc:	e0bfff15 	stw	r2,-4(fp)
   8ffd0:	00000c06 	br	90004 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   8ffd4:	d0a01017 	ldw	r2,-32704(gp)
   8ffd8:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   8ffdc:	d0e01017 	ldw	r3,-32704(gp)
   8ffe0:	e0bffe17 	ldw	r2,-8(fp)
   8ffe4:	1885883a 	add	r2,r3,r2
   8ffe8:	d0a01015 	stw	r2,-32704(gp)
   8ffec:	e0bffd17 	ldw	r2,-12(fp)
   8fff0:	e0bff915 	stw	r2,-28(fp)
   8fff4:	e0bff917 	ldw	r2,-28(fp)
   8fff8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8fffc:	e0bffc17 	ldw	r2,-16(fp)
   90000:	e0bfff15 	stw	r2,-4(fp)
   90004:	e0bfff17 	ldw	r2,-4(fp)
} 
   90008:	e037883a 	mov	sp,fp
   9000c:	df000017 	ldw	fp,0(sp)
   90010:	dec00104 	addi	sp,sp,4
   90014:	f800283a 	ret

00090018 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   90018:	defff704 	addi	sp,sp,-36
   9001c:	dfc00815 	stw	ra,32(sp)
   90020:	df000715 	stw	fp,28(sp)
   90024:	df000704 	addi	fp,sp,28
   90028:	e13ffb15 	stw	r4,-20(fp)
   9002c:	e17ffc15 	stw	r5,-16(fp)
   90030:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   90034:	e0bffb17 	ldw	r2,-20(fp)
   90038:	1004803a 	cmplt	r2,r2,zero
   9003c:	1000091e 	bne	r2,zero,90064 <write+0x4c>
   90040:	e13ffb17 	ldw	r4,-20(fp)
   90044:	01400304 	movi	r5,12
   90048:	008597c0 	call	8597c <__mulsi3>
   9004c:	1007883a 	mov	r3,r2
   90050:	00800274 	movhi	r2,9
   90054:	108bbb04 	addi	r2,r2,12012
   90058:	1887883a 	add	r3,r3,r2
   9005c:	e0ffff15 	stw	r3,-4(fp)
   90060:	00000106 	br	90068 <write+0x50>
   90064:	e03fff15 	stw	zero,-4(fp)
   90068:	e0bfff17 	ldw	r2,-4(fp)
   9006c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   90070:	e0bffa17 	ldw	r2,-24(fp)
   90074:	1005003a 	cmpeq	r2,r2,zero
   90078:	1000241e 	bne	r2,zero,9010c <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   9007c:	e0bffa17 	ldw	r2,-24(fp)
   90080:	10800217 	ldw	r2,8(r2)
   90084:	108000cc 	andi	r2,r2,3
   90088:	1005003a 	cmpeq	r2,r2,zero
   9008c:	10001a1e 	bne	r2,zero,900f8 <write+0xe0>
   90090:	e0bffa17 	ldw	r2,-24(fp)
   90094:	10800017 	ldw	r2,0(r2)
   90098:	10800617 	ldw	r2,24(r2)
   9009c:	1005003a 	cmpeq	r2,r2,zero
   900a0:	1000151e 	bne	r2,zero,900f8 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   900a4:	e0bffa17 	ldw	r2,-24(fp)
   900a8:	10800017 	ldw	r2,0(r2)
   900ac:	10800617 	ldw	r2,24(r2)
   900b0:	e17ffc17 	ldw	r5,-16(fp)
   900b4:	e1bffd17 	ldw	r6,-12(fp)
   900b8:	e13ffa17 	ldw	r4,-24(fp)
   900bc:	103ee83a 	callr	r2
   900c0:	e0bff915 	stw	r2,-28(fp)
   900c4:	e0bff917 	ldw	r2,-28(fp)
   900c8:	1004403a 	cmpge	r2,r2,zero
   900cc:	1000071e 	bne	r2,zero,900ec <write+0xd4>
      {
        ALT_ERRNO = -rval;
   900d0:	009013c0 	call	9013c <alt_get_errno>
   900d4:	e0fff917 	ldw	r3,-28(fp)
   900d8:	00c7c83a 	sub	r3,zero,r3
   900dc:	10c00015 	stw	r3,0(r2)
        return -1;
   900e0:	00bfffc4 	movi	r2,-1
   900e4:	e0bffe15 	stw	r2,-8(fp)
   900e8:	00000e06 	br	90124 <write+0x10c>
      }
      return rval;
   900ec:	e0bff917 	ldw	r2,-28(fp)
   900f0:	e0bffe15 	stw	r2,-8(fp)
   900f4:	00000b06 	br	90124 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   900f8:	009013c0 	call	9013c <alt_get_errno>
   900fc:	1007883a 	mov	r3,r2
   90100:	00800344 	movi	r2,13
   90104:	18800015 	stw	r2,0(r3)
   90108:	00000406 	br	9011c <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   9010c:	009013c0 	call	9013c <alt_get_errno>
   90110:	1007883a 	mov	r3,r2
   90114:	00801444 	movi	r2,81
   90118:	18800015 	stw	r2,0(r3)
  }
  return -1;
   9011c:	00bfffc4 	movi	r2,-1
   90120:	e0bffe15 	stw	r2,-8(fp)
   90124:	e0bffe17 	ldw	r2,-8(fp)
}
   90128:	e037883a 	mov	sp,fp
   9012c:	dfc00117 	ldw	ra,4(sp)
   90130:	df000017 	ldw	fp,0(sp)
   90134:	dec00204 	addi	sp,sp,8
   90138:	f800283a 	ret

0009013c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   9013c:	defffd04 	addi	sp,sp,-12
   90140:	dfc00215 	stw	ra,8(sp)
   90144:	df000115 	stw	fp,4(sp)
   90148:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   9014c:	00800274 	movhi	r2,9
   90150:	10904c04 	addi	r2,r2,16688
   90154:	10800017 	ldw	r2,0(r2)
   90158:	1005003a 	cmpeq	r2,r2,zero
   9015c:	1000061e 	bne	r2,zero,90178 <alt_get_errno+0x3c>
   90160:	00800274 	movhi	r2,9
   90164:	10904c04 	addi	r2,r2,16688
   90168:	10800017 	ldw	r2,0(r2)
   9016c:	103ee83a 	callr	r2
   90170:	e0bfff15 	stw	r2,-4(fp)
   90174:	00000306 	br	90184 <alt_get_errno+0x48>
   90178:	00800274 	movhi	r2,9
   9017c:	10970a04 	addi	r2,r2,23592
   90180:	e0bfff15 	stw	r2,-4(fp)
   90184:	e0bfff17 	ldw	r2,-4(fp)
}
   90188:	e037883a 	mov	sp,fp
   9018c:	dfc00117 	ldw	ra,4(sp)
   90190:	df000017 	ldw	fp,0(sp)
   90194:	dec00204 	addi	sp,sp,8
   90198:	f800283a 	ret

0009019c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   9019c:	defffd04 	addi	sp,sp,-12
   901a0:	dfc00215 	stw	ra,8(sp)
   901a4:	df000115 	stw	fp,4(sp)
   901a8:	df000104 	addi	fp,sp,4
   901ac:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_0, cpu_0);
   901b0:	00919100 	call	91910 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   901b4:	00800044 	movi	r2,1
   901b8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   901bc:	e037883a 	mov	sp,fp
   901c0:	dfc00117 	ldw	ra,4(sp)
   901c4:	df000017 	ldw	fp,0(sp)
   901c8:	dec00204 	addi	sp,sp,8
   901cc:	f800283a 	ret

000901d0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   901d0:	defffe04 	addi	sp,sp,-8
   901d4:	dfc00115 	stw	ra,4(sp)
   901d8:	df000015 	stw	fp,0(sp)
   901dc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   901e0:	01000274 	movhi	r4,9
   901e4:	210c2504 	addi	r4,r4,12436
   901e8:	000b883a 	mov	r5,zero
   901ec:	01800084 	movi	r6,2
   901f0:	00903a00 	call	903a0 <altera_avalon_jtag_uart_init>
   901f4:	01000274 	movhi	r4,9
   901f8:	210c1b04 	addi	r4,r4,12396
   901fc:	00902200 	call	90220 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD_0, SD_CARD_0);
   90200:	01000274 	movhi	r4,9
   90204:	21103304 	addi	r4,r4,16588
   90208:	00902200 	call	90220 <alt_dev_reg>
}
   9020c:	e037883a 	mov	sp,fp
   90210:	dfc00117 	ldw	ra,4(sp)
   90214:	df000017 	ldw	fp,0(sp)
   90218:	dec00204 	addi	sp,sp,8
   9021c:	f800283a 	ret

00090220 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   90220:	defffd04 	addi	sp,sp,-12
   90224:	dfc00215 	stw	ra,8(sp)
   90228:	df000115 	stw	fp,4(sp)
   9022c:	df000104 	addi	fp,sp,4
   90230:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   90234:	e13fff17 	ldw	r4,-4(fp)
   90238:	01400274 	movhi	r5,9
   9023c:	29504904 	addi	r5,r5,16676
   90240:	0090e740 	call	90e74 <alt_dev_llist_insert>
}
   90244:	e037883a 	mov	sp,fp
   90248:	dfc00117 	ldw	ra,4(sp)
   9024c:	df000017 	ldw	fp,0(sp)
   90250:	dec00204 	addi	sp,sp,8
   90254:	f800283a 	ret

00090258 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   90258:	defffa04 	addi	sp,sp,-24
   9025c:	dfc00515 	stw	ra,20(sp)
   90260:	df000415 	stw	fp,16(sp)
   90264:	df000404 	addi	fp,sp,16
   90268:	e13ffd15 	stw	r4,-12(fp)
   9026c:	e17ffe15 	stw	r5,-8(fp)
   90270:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   90274:	e0bffd17 	ldw	r2,-12(fp)
   90278:	10800017 	ldw	r2,0(r2)
   9027c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   90280:	e0bffc17 	ldw	r2,-16(fp)
   90284:	11000a04 	addi	r4,r2,40
   90288:	e0bffd17 	ldw	r2,-12(fp)
   9028c:	11c00217 	ldw	r7,8(r2)
   90290:	e17ffe17 	ldw	r5,-8(fp)
   90294:	e1bfff17 	ldw	r6,-4(fp)
   90298:	00908a00 	call	908a0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   9029c:	e037883a 	mov	sp,fp
   902a0:	dfc00117 	ldw	ra,4(sp)
   902a4:	df000017 	ldw	fp,0(sp)
   902a8:	dec00204 	addi	sp,sp,8
   902ac:	f800283a 	ret

000902b0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   902b0:	defffa04 	addi	sp,sp,-24
   902b4:	dfc00515 	stw	ra,20(sp)
   902b8:	df000415 	stw	fp,16(sp)
   902bc:	df000404 	addi	fp,sp,16
   902c0:	e13ffd15 	stw	r4,-12(fp)
   902c4:	e17ffe15 	stw	r5,-8(fp)
   902c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   902cc:	e0bffd17 	ldw	r2,-12(fp)
   902d0:	10800017 	ldw	r2,0(r2)
   902d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   902d8:	e0bffc17 	ldw	r2,-16(fp)
   902dc:	11000a04 	addi	r4,r2,40
   902e0:	e0bffd17 	ldw	r2,-12(fp)
   902e4:	11c00217 	ldw	r7,8(r2)
   902e8:	e17ffe17 	ldw	r5,-8(fp)
   902ec:	e1bfff17 	ldw	r6,-4(fp)
   902f0:	0090ac40 	call	90ac4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   902f4:	e037883a 	mov	sp,fp
   902f8:	dfc00117 	ldw	ra,4(sp)
   902fc:	df000017 	ldw	fp,0(sp)
   90300:	dec00204 	addi	sp,sp,8
   90304:	f800283a 	ret

00090308 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   90308:	defffc04 	addi	sp,sp,-16
   9030c:	dfc00315 	stw	ra,12(sp)
   90310:	df000215 	stw	fp,8(sp)
   90314:	df000204 	addi	fp,sp,8
   90318:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   9031c:	e0bfff17 	ldw	r2,-4(fp)
   90320:	10800017 	ldw	r2,0(r2)
   90324:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   90328:	e0bffe17 	ldw	r2,-8(fp)
   9032c:	11000a04 	addi	r4,r2,40
   90330:	e0bfff17 	ldw	r2,-4(fp)
   90334:	11400217 	ldw	r5,8(r2)
   90338:	00907380 	call	90738 <altera_avalon_jtag_uart_close>
}
   9033c:	e037883a 	mov	sp,fp
   90340:	dfc00117 	ldw	ra,4(sp)
   90344:	df000017 	ldw	fp,0(sp)
   90348:	dec00204 	addi	sp,sp,8
   9034c:	f800283a 	ret

00090350 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   90350:	defffa04 	addi	sp,sp,-24
   90354:	dfc00515 	stw	ra,20(sp)
   90358:	df000415 	stw	fp,16(sp)
   9035c:	df000404 	addi	fp,sp,16
   90360:	e13ffd15 	stw	r4,-12(fp)
   90364:	e17ffe15 	stw	r5,-8(fp)
   90368:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   9036c:	e0bffd17 	ldw	r2,-12(fp)
   90370:	10800017 	ldw	r2,0(r2)
   90374:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   90378:	e0bffc17 	ldw	r2,-16(fp)
   9037c:	11000a04 	addi	r4,r2,40
   90380:	e17ffe17 	ldw	r5,-8(fp)
   90384:	e1bfff17 	ldw	r6,-4(fp)
   90388:	00907ac0 	call	907ac <altera_avalon_jtag_uart_ioctl>
}
   9038c:	e037883a 	mov	sp,fp
   90390:	dfc00117 	ldw	ra,4(sp)
   90394:	df000017 	ldw	fp,0(sp)
   90398:	dec00204 	addi	sp,sp,8
   9039c:	f800283a 	ret

000903a0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   903a0:	defffa04 	addi	sp,sp,-24
   903a4:	dfc00515 	stw	ra,20(sp)
   903a8:	df000415 	stw	fp,16(sp)
   903ac:	df000404 	addi	fp,sp,16
   903b0:	e13ffd15 	stw	r4,-12(fp)
   903b4:	e17ffe15 	stw	r5,-8(fp)
   903b8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   903bc:	e0fffd17 	ldw	r3,-12(fp)
   903c0:	00800044 	movi	r2,1
   903c4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   903c8:	e0bffd17 	ldw	r2,-12(fp)
   903cc:	10800017 	ldw	r2,0(r2)
   903d0:	11000104 	addi	r4,r2,4
   903d4:	e0bffd17 	ldw	r2,-12(fp)
   903d8:	10800817 	ldw	r2,32(r2)
   903dc:	1007883a 	mov	r3,r2
   903e0:	2005883a 	mov	r2,r4
   903e4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   903e8:	e13ffe17 	ldw	r4,-8(fp)
   903ec:	e17fff17 	ldw	r5,-4(fp)
   903f0:	d8000015 	stw	zero,0(sp)
   903f4:	01800274 	movhi	r6,9
   903f8:	31811804 	addi	r6,r6,1120
   903fc:	e1fffd17 	ldw	r7,-12(fp)
   90400:	009106c0 	call	9106c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   90404:	e0bffd17 	ldw	r2,-12(fp)
   90408:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   9040c:	e0bffd17 	ldw	r2,-12(fp)
   90410:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   90414:	00800274 	movhi	r2,9
   90418:	10970f04 	addi	r2,r2,23612
   9041c:	10800017 	ldw	r2,0(r2)
   90420:	100b883a 	mov	r5,r2
   90424:	01800274 	movhi	r6,9
   90428:	3181a204 	addi	r6,r6,1672
   9042c:	e1fffd17 	ldw	r7,-12(fp)
   90430:	0090d040 	call	90d04 <alt_alarm_start>
   90434:	1004403a 	cmpge	r2,r2,zero
   90438:	1000041e 	bne	r2,zero,9044c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   9043c:	e0fffd17 	ldw	r3,-12(fp)
   90440:	00a00034 	movhi	r2,32768
   90444:	10bfffc4 	addi	r2,r2,-1
   90448:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   9044c:	e037883a 	mov	sp,fp
   90450:	dfc00117 	ldw	ra,4(sp)
   90454:	df000017 	ldw	fp,0(sp)
   90458:	dec00204 	addi	sp,sp,8
   9045c:	f800283a 	ret

00090460 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   90460:	defff804 	addi	sp,sp,-32
   90464:	df000715 	stw	fp,28(sp)
   90468:	df000704 	addi	fp,sp,28
   9046c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   90470:	e0bfff17 	ldw	r2,-4(fp)
   90474:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   90478:	e0bffe17 	ldw	r2,-8(fp)
   9047c:	10800017 	ldw	r2,0(r2)
   90480:	e0bffd15 	stw	r2,-12(fp)
   90484:	00000006 	br	90488 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   90488:	e0bffd17 	ldw	r2,-12(fp)
   9048c:	10800104 	addi	r2,r2,4
   90490:	10800037 	ldwio	r2,0(r2)
   90494:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   90498:	e0bffc17 	ldw	r2,-16(fp)
   9049c:	1080c00c 	andi	r2,r2,768
   904a0:	1005003a 	cmpeq	r2,r2,zero
   904a4:	1000741e 	bne	r2,zero,90678 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   904a8:	e0bffc17 	ldw	r2,-16(fp)
   904ac:	1080400c 	andi	r2,r2,256
   904b0:	1005003a 	cmpeq	r2,r2,zero
   904b4:	1000351e 	bne	r2,zero,9058c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   904b8:	00800074 	movhi	r2,1
   904bc:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   904c0:	e0bffe17 	ldw	r2,-8(fp)
   904c4:	10800a17 	ldw	r2,40(r2)
   904c8:	10800044 	addi	r2,r2,1
   904cc:	1081ffcc 	andi	r2,r2,2047
   904d0:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   904d4:	e0bffe17 	ldw	r2,-8(fp)
   904d8:	10c00b17 	ldw	r3,44(r2)
   904dc:	e0bffa17 	ldw	r2,-24(fp)
   904e0:	18801626 	beq	r3,r2,9053c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   904e4:	e0bffd17 	ldw	r2,-12(fp)
   904e8:	10800037 	ldwio	r2,0(r2)
   904ec:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   904f0:	e0bffb17 	ldw	r2,-20(fp)
   904f4:	10a0000c 	andi	r2,r2,32768
   904f8:	1005003a 	cmpeq	r2,r2,zero
   904fc:	10000f1e 	bne	r2,zero,9053c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   90500:	e0bffe17 	ldw	r2,-8(fp)
   90504:	10c00a17 	ldw	r3,40(r2)
   90508:	e0bffb17 	ldw	r2,-20(fp)
   9050c:	1009883a 	mov	r4,r2
   90510:	e0bffe17 	ldw	r2,-8(fp)
   90514:	1885883a 	add	r2,r3,r2
   90518:	10800e04 	addi	r2,r2,56
   9051c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   90520:	e0bffe17 	ldw	r2,-8(fp)
   90524:	10800a17 	ldw	r2,40(r2)
   90528:	10800044 	addi	r2,r2,1
   9052c:	10c1ffcc 	andi	r3,r2,2047
   90530:	e0bffe17 	ldw	r2,-8(fp)
   90534:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   90538:	003fe106 	br	904c0 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   9053c:	e0bffb17 	ldw	r2,-20(fp)
   90540:	10bfffec 	andhi	r2,r2,65535
   90544:	1005003a 	cmpeq	r2,r2,zero
   90548:	1000101e 	bne	r2,zero,9058c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   9054c:	e0bffe17 	ldw	r2,-8(fp)
   90550:	10c00817 	ldw	r3,32(r2)
   90554:	00bfff84 	movi	r2,-2
   90558:	1886703a 	and	r3,r3,r2
   9055c:	e0bffe17 	ldw	r2,-8(fp)
   90560:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   90564:	e0bffd17 	ldw	r2,-12(fp)
   90568:	11000104 	addi	r4,r2,4
   9056c:	e0bffe17 	ldw	r2,-8(fp)
   90570:	10800817 	ldw	r2,32(r2)
   90574:	1007883a 	mov	r3,r2
   90578:	2005883a 	mov	r2,r4
   9057c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   90580:	e0bffd17 	ldw	r2,-12(fp)
   90584:	10800104 	addi	r2,r2,4
   90588:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   9058c:	e0bffc17 	ldw	r2,-16(fp)
   90590:	1080800c 	andi	r2,r2,512
   90594:	1005003a 	cmpeq	r2,r2,zero
   90598:	103fbb1e 	bne	r2,zero,90488 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   9059c:	e0bffc17 	ldw	r2,-16(fp)
   905a0:	10bfffec 	andhi	r2,r2,65535
   905a4:	1004d43a 	srli	r2,r2,16
   905a8:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   905ac:	00001506 	br	90604 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   905b0:	e13ffd17 	ldw	r4,-12(fp)
   905b4:	e0bffe17 	ldw	r2,-8(fp)
   905b8:	10c00d17 	ldw	r3,52(r2)
   905bc:	e0bffe17 	ldw	r2,-8(fp)
   905c0:	1885883a 	add	r2,r3,r2
   905c4:	10820e04 	addi	r2,r2,2104
   905c8:	10800003 	ldbu	r2,0(r2)
   905cc:	10c03fcc 	andi	r3,r2,255
   905d0:	18c0201c 	xori	r3,r3,128
   905d4:	18ffe004 	addi	r3,r3,-128
   905d8:	2005883a 	mov	r2,r4
   905dc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   905e0:	e0bffe17 	ldw	r2,-8(fp)
   905e4:	10800d17 	ldw	r2,52(r2)
   905e8:	10800044 	addi	r2,r2,1
   905ec:	10c1ffcc 	andi	r3,r2,2047
   905f0:	e0bffe17 	ldw	r2,-8(fp)
   905f4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   905f8:	e0bff917 	ldw	r2,-28(fp)
   905fc:	10bfffc4 	addi	r2,r2,-1
   90600:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   90604:	e0bff917 	ldw	r2,-28(fp)
   90608:	1005003a 	cmpeq	r2,r2,zero
   9060c:	1000051e 	bne	r2,zero,90624 <altera_avalon_jtag_uart_irq+0x1c4>
   90610:	e0bffe17 	ldw	r2,-8(fp)
   90614:	10c00d17 	ldw	r3,52(r2)
   90618:	e0bffe17 	ldw	r2,-8(fp)
   9061c:	10800c17 	ldw	r2,48(r2)
   90620:	18bfe31e 	bne	r3,r2,905b0 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   90624:	e0bff917 	ldw	r2,-28(fp)
   90628:	1005003a 	cmpeq	r2,r2,zero
   9062c:	103f961e 	bne	r2,zero,90488 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   90630:	e0bffe17 	ldw	r2,-8(fp)
   90634:	10c00817 	ldw	r3,32(r2)
   90638:	00bfff44 	movi	r2,-3
   9063c:	1886703a 	and	r3,r3,r2
   90640:	e0bffe17 	ldw	r2,-8(fp)
   90644:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   90648:	e0bffe17 	ldw	r2,-8(fp)
   9064c:	10800017 	ldw	r2,0(r2)
   90650:	11000104 	addi	r4,r2,4
   90654:	e0bffe17 	ldw	r2,-8(fp)
   90658:	10800817 	ldw	r2,32(r2)
   9065c:	1007883a 	mov	r3,r2
   90660:	2005883a 	mov	r2,r4
   90664:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   90668:	e0bffd17 	ldw	r2,-12(fp)
   9066c:	10800104 	addi	r2,r2,4
   90670:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   90674:	003f8406 	br	90488 <altera_avalon_jtag_uart_irq+0x28>
}
   90678:	e037883a 	mov	sp,fp
   9067c:	df000017 	ldw	fp,0(sp)
   90680:	dec00104 	addi	sp,sp,4
   90684:	f800283a 	ret

00090688 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   90688:	defffc04 	addi	sp,sp,-16
   9068c:	df000315 	stw	fp,12(sp)
   90690:	df000304 	addi	fp,sp,12
   90694:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   90698:	e0bfff17 	ldw	r2,-4(fp)
   9069c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   906a0:	e0bffe17 	ldw	r2,-8(fp)
   906a4:	10800017 	ldw	r2,0(r2)
   906a8:	10800104 	addi	r2,r2,4
   906ac:	10800037 	ldwio	r2,0(r2)
   906b0:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   906b4:	e0bffd17 	ldw	r2,-12(fp)
   906b8:	1081000c 	andi	r2,r2,1024
   906bc:	1005003a 	cmpeq	r2,r2,zero
   906c0:	10000c1e 	bne	r2,zero,906f4 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   906c4:	e0bffe17 	ldw	r2,-8(fp)
   906c8:	10800017 	ldw	r2,0(r2)
   906cc:	11000104 	addi	r4,r2,4
   906d0:	e0bffe17 	ldw	r2,-8(fp)
   906d4:	10800817 	ldw	r2,32(r2)
   906d8:	10810014 	ori	r2,r2,1024
   906dc:	1007883a 	mov	r3,r2
   906e0:	2005883a 	mov	r2,r4
   906e4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   906e8:	e0bffe17 	ldw	r2,-8(fp)
   906ec:	10000915 	stw	zero,36(r2)
   906f0:	00000a06 	br	9071c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   906f4:	e0bffe17 	ldw	r2,-8(fp)
   906f8:	10c00917 	ldw	r3,36(r2)
   906fc:	00a00034 	movhi	r2,32768
   90700:	10bfff04 	addi	r2,r2,-4
   90704:	10c00536 	bltu	r2,r3,9071c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   90708:	e0bffe17 	ldw	r2,-8(fp)
   9070c:	10800917 	ldw	r2,36(r2)
   90710:	10c00044 	addi	r3,r2,1
   90714:	e0bffe17 	ldw	r2,-8(fp)
   90718:	10c00915 	stw	r3,36(r2)
   9071c:	00800274 	movhi	r2,9
   90720:	10970f04 	addi	r2,r2,23612
   90724:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   90728:	e037883a 	mov	sp,fp
   9072c:	df000017 	ldw	fp,0(sp)
   90730:	dec00104 	addi	sp,sp,4
   90734:	f800283a 	ret

00090738 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   90738:	defffc04 	addi	sp,sp,-16
   9073c:	df000315 	stw	fp,12(sp)
   90740:	df000304 	addi	fp,sp,12
   90744:	e13ffd15 	stw	r4,-12(fp)
   90748:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   9074c:	00000706 	br	9076c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   90750:	e0bffe17 	ldw	r2,-8(fp)
   90754:	1090000c 	andi	r2,r2,16384
   90758:	1005003a 	cmpeq	r2,r2,zero
   9075c:	1000031e 	bne	r2,zero,9076c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   90760:	00bffd44 	movi	r2,-11
   90764:	e0bfff15 	stw	r2,-4(fp)
   90768:	00000b06 	br	90798 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   9076c:	e0bffd17 	ldw	r2,-12(fp)
   90770:	10c00d17 	ldw	r3,52(r2)
   90774:	e0bffd17 	ldw	r2,-12(fp)
   90778:	10800c17 	ldw	r2,48(r2)
   9077c:	18800526 	beq	r3,r2,90794 <altera_avalon_jtag_uart_close+0x5c>
   90780:	e0bffd17 	ldw	r2,-12(fp)
   90784:	10c00917 	ldw	r3,36(r2)
   90788:	e0bffd17 	ldw	r2,-12(fp)
   9078c:	10800117 	ldw	r2,4(r2)
   90790:	18bfef36 	bltu	r3,r2,90750 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   90794:	e03fff15 	stw	zero,-4(fp)
   90798:	e0bfff17 	ldw	r2,-4(fp)
}
   9079c:	e037883a 	mov	sp,fp
   907a0:	df000017 	ldw	fp,0(sp)
   907a4:	dec00104 	addi	sp,sp,4
   907a8:	f800283a 	ret

000907ac <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   907ac:	defff804 	addi	sp,sp,-32
   907b0:	df000715 	stw	fp,28(sp)
   907b4:	df000704 	addi	fp,sp,28
   907b8:	e13ffb15 	stw	r4,-20(fp)
   907bc:	e17ffc15 	stw	r5,-16(fp)
   907c0:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   907c4:	00bff9c4 	movi	r2,-25
   907c8:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   907cc:	e0bffc17 	ldw	r2,-16(fp)
   907d0:	e0bfff15 	stw	r2,-4(fp)
   907d4:	e0ffff17 	ldw	r3,-4(fp)
   907d8:	189a8060 	cmpeqi	r2,r3,27137
   907dc:	1000041e 	bne	r2,zero,907f0 <altera_avalon_jtag_uart_ioctl+0x44>
   907e0:	e0ffff17 	ldw	r3,-4(fp)
   907e4:	189a80a0 	cmpeqi	r2,r3,27138
   907e8:	10001b1e 	bne	r2,zero,90858 <altera_avalon_jtag_uart_ioctl+0xac>
   907ec:	00002706 	br	9088c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   907f0:	e0bffb17 	ldw	r2,-20(fp)
   907f4:	10c00117 	ldw	r3,4(r2)
   907f8:	00a00034 	movhi	r2,32768
   907fc:	10bfffc4 	addi	r2,r2,-1
   90800:	18802226 	beq	r3,r2,9088c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   90804:	e0bffd17 	ldw	r2,-12(fp)
   90808:	10800017 	ldw	r2,0(r2)
   9080c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   90810:	e0bff917 	ldw	r2,-28(fp)
   90814:	10800090 	cmplti	r2,r2,2
   90818:	1000071e 	bne	r2,zero,90838 <altera_avalon_jtag_uart_ioctl+0x8c>
   9081c:	e0fff917 	ldw	r3,-28(fp)
   90820:	00a00034 	movhi	r2,32768
   90824:	10bfffc4 	addi	r2,r2,-1
   90828:	18800326 	beq	r3,r2,90838 <altera_avalon_jtag_uart_ioctl+0x8c>
   9082c:	e0bff917 	ldw	r2,-28(fp)
   90830:	e0bffe15 	stw	r2,-8(fp)
   90834:	00000306 	br	90844 <altera_avalon_jtag_uart_ioctl+0x98>
   90838:	00e00034 	movhi	r3,32768
   9083c:	18ffff84 	addi	r3,r3,-2
   90840:	e0fffe15 	stw	r3,-8(fp)
   90844:	e0bffb17 	ldw	r2,-20(fp)
   90848:	e0fffe17 	ldw	r3,-8(fp)
   9084c:	10c00115 	stw	r3,4(r2)
      rc = 0;
   90850:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   90854:	00000d06 	br	9088c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   90858:	e0bffb17 	ldw	r2,-20(fp)
   9085c:	10c00117 	ldw	r3,4(r2)
   90860:	00a00034 	movhi	r2,32768
   90864:	10bfffc4 	addi	r2,r2,-1
   90868:	18800826 	beq	r3,r2,9088c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   9086c:	e13ffd17 	ldw	r4,-12(fp)
   90870:	e0bffb17 	ldw	r2,-20(fp)
   90874:	10c00917 	ldw	r3,36(r2)
   90878:	e0bffb17 	ldw	r2,-20(fp)
   9087c:	10800117 	ldw	r2,4(r2)
   90880:	1885803a 	cmpltu	r2,r3,r2
   90884:	20800015 	stw	r2,0(r4)
      rc = 0;
   90888:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   9088c:	e0bffa17 	ldw	r2,-24(fp)
}
   90890:	e037883a 	mov	sp,fp
   90894:	df000017 	ldw	fp,0(sp)
   90898:	dec00104 	addi	sp,sp,4
   9089c:	f800283a 	ret

000908a0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   908a0:	defff204 	addi	sp,sp,-56
   908a4:	dfc00d15 	stw	ra,52(sp)
   908a8:	df000c15 	stw	fp,48(sp)
   908ac:	df000c04 	addi	fp,sp,48
   908b0:	e13ffb15 	stw	r4,-20(fp)
   908b4:	e17ffc15 	stw	r5,-16(fp)
   908b8:	e1bffd15 	stw	r6,-12(fp)
   908bc:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   908c0:	e0bffc17 	ldw	r2,-16(fp)
   908c4:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   908c8:	00004806 	br	909ec <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   908cc:	e0bffb17 	ldw	r2,-20(fp)
   908d0:	10800a17 	ldw	r2,40(r2)
   908d4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   908d8:	e0bffb17 	ldw	r2,-20(fp)
   908dc:	10800b17 	ldw	r2,44(r2)
   908e0:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   908e4:	e0fff717 	ldw	r3,-36(fp)
   908e8:	e0bff617 	ldw	r2,-40(fp)
   908ec:	18800536 	bltu	r3,r2,90904 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   908f0:	e0bff717 	ldw	r2,-36(fp)
   908f4:	e0fff617 	ldw	r3,-40(fp)
   908f8:	10c5c83a 	sub	r2,r2,r3
   908fc:	e0bff815 	stw	r2,-32(fp)
   90900:	00000406 	br	90914 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   90904:	00820004 	movi	r2,2048
   90908:	e0fff617 	ldw	r3,-40(fp)
   9090c:	10c5c83a 	sub	r2,r2,r3
   90910:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   90914:	e0bff817 	ldw	r2,-32(fp)
   90918:	1005003a 	cmpeq	r2,r2,zero
   9091c:	10001f1e 	bne	r2,zero,9099c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   90920:	e0fffd17 	ldw	r3,-12(fp)
   90924:	e0bff817 	ldw	r2,-32(fp)
   90928:	1880022e 	bgeu	r3,r2,90934 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   9092c:	e0bffd17 	ldw	r2,-12(fp)
   90930:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   90934:	e0bffb17 	ldw	r2,-20(fp)
   90938:	10c00e04 	addi	r3,r2,56
   9093c:	e0bff617 	ldw	r2,-40(fp)
   90940:	1887883a 	add	r3,r3,r2
   90944:	e0bffa17 	ldw	r2,-24(fp)
   90948:	1009883a 	mov	r4,r2
   9094c:	180b883a 	mov	r5,r3
   90950:	e1bff817 	ldw	r6,-32(fp)
   90954:	008ae980 	call	8ae98 <memcpy>
      ptr   += n;
   90958:	e0fff817 	ldw	r3,-32(fp)
   9095c:	e0bffa17 	ldw	r2,-24(fp)
   90960:	10c5883a 	add	r2,r2,r3
   90964:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   90968:	e0fffd17 	ldw	r3,-12(fp)
   9096c:	e0bff817 	ldw	r2,-32(fp)
   90970:	1885c83a 	sub	r2,r3,r2
   90974:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   90978:	e0fff617 	ldw	r3,-40(fp)
   9097c:	e0bff817 	ldw	r2,-32(fp)
   90980:	1885883a 	add	r2,r3,r2
   90984:	10c1ffcc 	andi	r3,r2,2047
   90988:	e0bffb17 	ldw	r2,-20(fp)
   9098c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   90990:	e0bffd17 	ldw	r2,-12(fp)
   90994:	10800048 	cmpgei	r2,r2,1
   90998:	103fcc1e 	bne	r2,zero,908cc <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   9099c:	e0fffa17 	ldw	r3,-24(fp)
   909a0:	e0bffc17 	ldw	r2,-16(fp)
   909a4:	1880141e 	bne	r3,r2,909f8 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   909a8:	e0bffe17 	ldw	r2,-8(fp)
   909ac:	1090000c 	andi	r2,r2,16384
   909b0:	1004c03a 	cmpne	r2,r2,zero
   909b4:	1000101e 	bne	r2,zero,909f8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   909b8:	e0bffb17 	ldw	r2,-20(fp)
   909bc:	10c00a17 	ldw	r3,40(r2)
   909c0:	e0bff717 	ldw	r2,-36(fp)
   909c4:	1880051e 	bne	r3,r2,909dc <altera_avalon_jtag_uart_read+0x13c>
   909c8:	e0bffb17 	ldw	r2,-20(fp)
   909cc:	10c00917 	ldw	r3,36(r2)
   909d0:	e0bffb17 	ldw	r2,-20(fp)
   909d4:	10800117 	ldw	r2,4(r2)
   909d8:	18bff736 	bltu	r3,r2,909b8 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   909dc:	e0bffb17 	ldw	r2,-20(fp)
   909e0:	10c00a17 	ldw	r3,40(r2)
   909e4:	e0bff717 	ldw	r2,-36(fp)
   909e8:	18800326 	beq	r3,r2,909f8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   909ec:	e0bffd17 	ldw	r2,-12(fp)
   909f0:	10800048 	cmpgei	r2,r2,1
   909f4:	103fb51e 	bne	r2,zero,908cc <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   909f8:	e0fffa17 	ldw	r3,-24(fp)
   909fc:	e0bffc17 	ldw	r2,-16(fp)
   90a00:	18801926 	beq	r3,r2,90a68 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90a04:	0005303a 	rdctl	r2,status
   90a08:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90a0c:	e0fff517 	ldw	r3,-44(fp)
   90a10:	00bfff84 	movi	r2,-2
   90a14:	1884703a 	and	r2,r3,r2
   90a18:	1001703a 	wrctl	status,r2
  
  return context;
   90a1c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   90a20:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   90a24:	e0bffb17 	ldw	r2,-20(fp)
   90a28:	10800817 	ldw	r2,32(r2)
   90a2c:	10c00054 	ori	r3,r2,1
   90a30:	e0bffb17 	ldw	r2,-20(fp)
   90a34:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   90a38:	e0bffb17 	ldw	r2,-20(fp)
   90a3c:	10800017 	ldw	r2,0(r2)
   90a40:	11000104 	addi	r4,r2,4
   90a44:	e0bffb17 	ldw	r2,-20(fp)
   90a48:	10800817 	ldw	r2,32(r2)
   90a4c:	1007883a 	mov	r3,r2
   90a50:	2005883a 	mov	r2,r4
   90a54:	10c00035 	stwio	r3,0(r2)
   90a58:	e0bff917 	ldw	r2,-28(fp)
   90a5c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90a60:	e0bff417 	ldw	r2,-48(fp)
   90a64:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   90a68:	e0fffa17 	ldw	r3,-24(fp)
   90a6c:	e0bffc17 	ldw	r2,-16(fp)
   90a70:	18800526 	beq	r3,r2,90a88 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   90a74:	e0fffa17 	ldw	r3,-24(fp)
   90a78:	e0bffc17 	ldw	r2,-16(fp)
   90a7c:	1887c83a 	sub	r3,r3,r2
   90a80:	e0ffff15 	stw	r3,-4(fp)
   90a84:	00000906 	br	90aac <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   90a88:	e0bffe17 	ldw	r2,-8(fp)
   90a8c:	1090000c 	andi	r2,r2,16384
   90a90:	1005003a 	cmpeq	r2,r2,zero
   90a94:	1000031e 	bne	r2,zero,90aa4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   90a98:	00bffd44 	movi	r2,-11
   90a9c:	e0bfff15 	stw	r2,-4(fp)
   90aa0:	00000206 	br	90aac <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   90aa4:	00bffec4 	movi	r2,-5
   90aa8:	e0bfff15 	stw	r2,-4(fp)
   90aac:	e0bfff17 	ldw	r2,-4(fp)
}
   90ab0:	e037883a 	mov	sp,fp
   90ab4:	dfc00117 	ldw	ra,4(sp)
   90ab8:	df000017 	ldw	fp,0(sp)
   90abc:	dec00204 	addi	sp,sp,8
   90ac0:	f800283a 	ret

00090ac4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   90ac4:	defff204 	addi	sp,sp,-56
   90ac8:	dfc00d15 	stw	ra,52(sp)
   90acc:	df000c15 	stw	fp,48(sp)
   90ad0:	df000c04 	addi	fp,sp,48
   90ad4:	e13ffb15 	stw	r4,-20(fp)
   90ad8:	e17ffc15 	stw	r5,-16(fp)
   90adc:	e1bffd15 	stw	r6,-12(fp)
   90ae0:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   90ae4:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   90ae8:	e0bffc17 	ldw	r2,-16(fp)
   90aec:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   90af0:	00003a06 	br	90bdc <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   90af4:	e0bffb17 	ldw	r2,-20(fp)
   90af8:	10800c17 	ldw	r2,48(r2)
   90afc:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   90b00:	e0bffb17 	ldw	r2,-20(fp)
   90b04:	10800d17 	ldw	r2,52(r2)
   90b08:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   90b0c:	e0fffa17 	ldw	r3,-24(fp)
   90b10:	e0bff917 	ldw	r2,-28(fp)
   90b14:	1880062e 	bgeu	r3,r2,90b30 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   90b18:	e0fff917 	ldw	r3,-28(fp)
   90b1c:	e0bffa17 	ldw	r2,-24(fp)
   90b20:	1885c83a 	sub	r2,r3,r2
   90b24:	10bfffc4 	addi	r2,r2,-1
   90b28:	e0bff815 	stw	r2,-32(fp)
   90b2c:	00000c06 	br	90b60 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   90b30:	e0bff917 	ldw	r2,-28(fp)
   90b34:	1005003a 	cmpeq	r2,r2,zero
   90b38:	1000051e 	bne	r2,zero,90b50 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   90b3c:	00820004 	movi	r2,2048
   90b40:	e0fffa17 	ldw	r3,-24(fp)
   90b44:	10c5c83a 	sub	r2,r2,r3
   90b48:	e0bff815 	stw	r2,-32(fp)
   90b4c:	00000406 	br	90b60 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   90b50:	0081ffc4 	movi	r2,2047
   90b54:	e0fffa17 	ldw	r3,-24(fp)
   90b58:	10c5c83a 	sub	r2,r2,r3
   90b5c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   90b60:	e0bff817 	ldw	r2,-32(fp)
   90b64:	1005003a 	cmpeq	r2,r2,zero
   90b68:	10001f1e 	bne	r2,zero,90be8 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   90b6c:	e0fffd17 	ldw	r3,-12(fp)
   90b70:	e0bff817 	ldw	r2,-32(fp)
   90b74:	1880022e 	bgeu	r3,r2,90b80 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   90b78:	e0bffd17 	ldw	r2,-12(fp)
   90b7c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   90b80:	e0bffb17 	ldw	r2,-20(fp)
   90b84:	10c20e04 	addi	r3,r2,2104
   90b88:	e0bffa17 	ldw	r2,-24(fp)
   90b8c:	1885883a 	add	r2,r3,r2
   90b90:	e0fffc17 	ldw	r3,-16(fp)
   90b94:	1009883a 	mov	r4,r2
   90b98:	180b883a 	mov	r5,r3
   90b9c:	e1bff817 	ldw	r6,-32(fp)
   90ba0:	008ae980 	call	8ae98 <memcpy>
      ptr   += n;
   90ba4:	e0fff817 	ldw	r3,-32(fp)
   90ba8:	e0bffc17 	ldw	r2,-16(fp)
   90bac:	10c5883a 	add	r2,r2,r3
   90bb0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   90bb4:	e0fffd17 	ldw	r3,-12(fp)
   90bb8:	e0bff817 	ldw	r2,-32(fp)
   90bbc:	1885c83a 	sub	r2,r3,r2
   90bc0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   90bc4:	e0fffa17 	ldw	r3,-24(fp)
   90bc8:	e0bff817 	ldw	r2,-32(fp)
   90bcc:	1885883a 	add	r2,r3,r2
   90bd0:	10c1ffcc 	andi	r3,r2,2047
   90bd4:	e0bffb17 	ldw	r2,-20(fp)
   90bd8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   90bdc:	e0bffd17 	ldw	r2,-12(fp)
   90be0:	10800048 	cmpgei	r2,r2,1
   90be4:	103fc31e 	bne	r2,zero,90af4 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90be8:	0005303a 	rdctl	r2,status
   90bec:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90bf0:	e0fff517 	ldw	r3,-44(fp)
   90bf4:	00bfff84 	movi	r2,-2
   90bf8:	1884703a 	and	r2,r3,r2
   90bfc:	1001703a 	wrctl	status,r2
  
  return context;
   90c00:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   90c04:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   90c08:	e0bffb17 	ldw	r2,-20(fp)
   90c0c:	10800817 	ldw	r2,32(r2)
   90c10:	10c00094 	ori	r3,r2,2
   90c14:	e0bffb17 	ldw	r2,-20(fp)
   90c18:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   90c1c:	e0bffb17 	ldw	r2,-20(fp)
   90c20:	10800017 	ldw	r2,0(r2)
   90c24:	11000104 	addi	r4,r2,4
   90c28:	e0bffb17 	ldw	r2,-20(fp)
   90c2c:	10800817 	ldw	r2,32(r2)
   90c30:	1007883a 	mov	r3,r2
   90c34:	2005883a 	mov	r2,r4
   90c38:	10c00035 	stwio	r3,0(r2)
   90c3c:	e0bff717 	ldw	r2,-36(fp)
   90c40:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90c44:	e0bff417 	ldw	r2,-48(fp)
   90c48:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   90c4c:	e0bffd17 	ldw	r2,-12(fp)
   90c50:	10800050 	cmplti	r2,r2,1
   90c54:	1000111e 	bne	r2,zero,90c9c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   90c58:	e0bffe17 	ldw	r2,-8(fp)
   90c5c:	1090000c 	andi	r2,r2,16384
   90c60:	1004c03a 	cmpne	r2,r2,zero
   90c64:	1000101e 	bne	r2,zero,90ca8 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   90c68:	e0bffb17 	ldw	r2,-20(fp)
   90c6c:	10c00d17 	ldw	r3,52(r2)
   90c70:	e0bff917 	ldw	r2,-28(fp)
   90c74:	1880051e 	bne	r3,r2,90c8c <altera_avalon_jtag_uart_write+0x1c8>
   90c78:	e0bffb17 	ldw	r2,-20(fp)
   90c7c:	10c00917 	ldw	r3,36(r2)
   90c80:	e0bffb17 	ldw	r2,-20(fp)
   90c84:	10800117 	ldw	r2,4(r2)
   90c88:	18bff736 	bltu	r3,r2,90c68 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   90c8c:	e0bffb17 	ldw	r2,-20(fp)
   90c90:	10c00d17 	ldw	r3,52(r2)
   90c94:	e0bff917 	ldw	r2,-28(fp)
   90c98:	18800326 	beq	r3,r2,90ca8 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   90c9c:	e0bffd17 	ldw	r2,-12(fp)
   90ca0:	10800048 	cmpgei	r2,r2,1
   90ca4:	103fcd1e 	bne	r2,zero,90bdc <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   90ca8:	e0fffc17 	ldw	r3,-16(fp)
   90cac:	e0bff617 	ldw	r2,-40(fp)
   90cb0:	18800526 	beq	r3,r2,90cc8 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   90cb4:	e0fffc17 	ldw	r3,-16(fp)
   90cb8:	e0bff617 	ldw	r2,-40(fp)
   90cbc:	1887c83a 	sub	r3,r3,r2
   90cc0:	e0ffff15 	stw	r3,-4(fp)
   90cc4:	00000906 	br	90cec <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   90cc8:	e0bffe17 	ldw	r2,-8(fp)
   90ccc:	1090000c 	andi	r2,r2,16384
   90cd0:	1005003a 	cmpeq	r2,r2,zero
   90cd4:	1000031e 	bne	r2,zero,90ce4 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   90cd8:	00bffd44 	movi	r2,-11
   90cdc:	e0bfff15 	stw	r2,-4(fp)
   90ce0:	00000206 	br	90cec <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   90ce4:	00bffec4 	movi	r2,-5
   90ce8:	e0bfff15 	stw	r2,-4(fp)
   90cec:	e0bfff17 	ldw	r2,-4(fp)
}
   90cf0:	e037883a 	mov	sp,fp
   90cf4:	dfc00117 	ldw	ra,4(sp)
   90cf8:	df000017 	ldw	fp,0(sp)
   90cfc:	dec00204 	addi	sp,sp,8
   90d00:	f800283a 	ret

00090d04 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   90d04:	defff404 	addi	sp,sp,-48
   90d08:	df000b15 	stw	fp,44(sp)
   90d0c:	df000b04 	addi	fp,sp,44
   90d10:	e13ffb15 	stw	r4,-20(fp)
   90d14:	e17ffc15 	stw	r5,-16(fp)
   90d18:	e1bffd15 	stw	r6,-12(fp)
   90d1c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   90d20:	e03ff915 	stw	zero,-28(fp)
   90d24:	00800274 	movhi	r2,9
   90d28:	10970f04 	addi	r2,r2,23612
   90d2c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   90d30:	1005003a 	cmpeq	r2,r2,zero
   90d34:	1000411e 	bne	r2,zero,90e3c <alt_alarm_start+0x138>
  {
    if (alarm)
   90d38:	e0bffb17 	ldw	r2,-20(fp)
   90d3c:	1005003a 	cmpeq	r2,r2,zero
   90d40:	10003b1e 	bne	r2,zero,90e30 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   90d44:	e0fffb17 	ldw	r3,-20(fp)
   90d48:	e0bffd17 	ldw	r2,-12(fp)
   90d4c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   90d50:	e0fffb17 	ldw	r3,-20(fp)
   90d54:	e0bffe17 	ldw	r2,-8(fp)
   90d58:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90d5c:	0005303a 	rdctl	r2,status
   90d60:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90d64:	e0fff817 	ldw	r3,-32(fp)
   90d68:	00bfff84 	movi	r2,-2
   90d6c:	1884703a 	and	r2,r3,r2
   90d70:	1001703a 	wrctl	status,r2
  
  return context;
   90d74:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   90d78:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   90d7c:	00800274 	movhi	r2,9
   90d80:	10971004 	addi	r2,r2,23616
   90d84:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   90d88:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   90d8c:	e0fffc17 	ldw	r3,-16(fp)
   90d90:	e0bff917 	ldw	r2,-28(fp)
   90d94:	1885883a 	add	r2,r3,r2
   90d98:	10c00044 	addi	r3,r2,1
   90d9c:	e0bffb17 	ldw	r2,-20(fp)
   90da0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   90da4:	e0bffb17 	ldw	r2,-20(fp)
   90da8:	10c00217 	ldw	r3,8(r2)
   90dac:	e0bff917 	ldw	r2,-28(fp)
   90db0:	1880042e 	bgeu	r3,r2,90dc4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   90db4:	e0fffb17 	ldw	r3,-20(fp)
   90db8:	00800044 	movi	r2,1
   90dbc:	18800405 	stb	r2,16(r3)
   90dc0:	00000206 	br	90dcc <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   90dc4:	e0bffb17 	ldw	r2,-20(fp)
   90dc8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   90dcc:	e0fffb17 	ldw	r3,-20(fp)
   90dd0:	00800274 	movhi	r2,9
   90dd4:	10904f04 	addi	r2,r2,16700
   90dd8:	e0bff615 	stw	r2,-40(fp)
   90ddc:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   90de0:	e0fff717 	ldw	r3,-36(fp)
   90de4:	e0bff617 	ldw	r2,-40(fp)
   90de8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   90dec:	e0bff617 	ldw	r2,-40(fp)
   90df0:	10c00017 	ldw	r3,0(r2)
   90df4:	e0bff717 	ldw	r2,-36(fp)
   90df8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   90dfc:	e0bff617 	ldw	r2,-40(fp)
   90e00:	10c00017 	ldw	r3,0(r2)
   90e04:	e0bff717 	ldw	r2,-36(fp)
   90e08:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   90e0c:	e0fff617 	ldw	r3,-40(fp)
   90e10:	e0bff717 	ldw	r2,-36(fp)
   90e14:	18800015 	stw	r2,0(r3)
   90e18:	e0bffa17 	ldw	r2,-24(fp)
   90e1c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90e20:	e0bff517 	ldw	r2,-44(fp)
   90e24:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   90e28:	e03fff15 	stw	zero,-4(fp)
   90e2c:	00000506 	br	90e44 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   90e30:	00bffa84 	movi	r2,-22
   90e34:	e0bfff15 	stw	r2,-4(fp)
   90e38:	00000206 	br	90e44 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   90e3c:	00bfde84 	movi	r2,-134
   90e40:	e0bfff15 	stw	r2,-4(fp)
   90e44:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   90e48:	e037883a 	mov	sp,fp
   90e4c:	df000017 	ldw	fp,0(sp)
   90e50:	dec00104 	addi	sp,sp,4
   90e54:	f800283a 	ret

00090e58 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   90e58:	deffff04 	addi	sp,sp,-4
   90e5c:	df000015 	stw	fp,0(sp)
   90e60:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   90e64:	e037883a 	mov	sp,fp
   90e68:	df000017 	ldw	fp,0(sp)
   90e6c:	dec00104 	addi	sp,sp,4
   90e70:	f800283a 	ret

00090e74 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   90e74:	defff904 	addi	sp,sp,-28
   90e78:	dfc00615 	stw	ra,24(sp)
   90e7c:	df000515 	stw	fp,20(sp)
   90e80:	df000504 	addi	fp,sp,20
   90e84:	e13ffd15 	stw	r4,-12(fp)
   90e88:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   90e8c:	e0bffd17 	ldw	r2,-12(fp)
   90e90:	1005003a 	cmpeq	r2,r2,zero
   90e94:	1000041e 	bne	r2,zero,90ea8 <alt_dev_llist_insert+0x34>
   90e98:	e0bffd17 	ldw	r2,-12(fp)
   90e9c:	10800217 	ldw	r2,8(r2)
   90ea0:	1004c03a 	cmpne	r2,r2,zero
   90ea4:	1000071e 	bne	r2,zero,90ec4 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   90ea8:	0090f280 	call	90f28 <alt_get_errno>
   90eac:	1007883a 	mov	r3,r2
   90eb0:	00800584 	movi	r2,22
   90eb4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   90eb8:	00bffa84 	movi	r2,-22
   90ebc:	e0bfff15 	stw	r2,-4(fp)
   90ec0:	00001306 	br	90f10 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   90ec4:	e0fffd17 	ldw	r3,-12(fp)
   90ec8:	e0bffe17 	ldw	r2,-8(fp)
   90ecc:	e0bffb15 	stw	r2,-20(fp)
   90ed0:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   90ed4:	e0fffc17 	ldw	r3,-16(fp)
   90ed8:	e0bffb17 	ldw	r2,-20(fp)
   90edc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   90ee0:	e0bffb17 	ldw	r2,-20(fp)
   90ee4:	10c00017 	ldw	r3,0(r2)
   90ee8:	e0bffc17 	ldw	r2,-16(fp)
   90eec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   90ef0:	e0bffb17 	ldw	r2,-20(fp)
   90ef4:	10c00017 	ldw	r3,0(r2)
   90ef8:	e0bffc17 	ldw	r2,-16(fp)
   90efc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   90f00:	e0fffb17 	ldw	r3,-20(fp)
   90f04:	e0bffc17 	ldw	r2,-16(fp)
   90f08:	18800015 	stw	r2,0(r3)

  return 0;  
   90f0c:	e03fff15 	stw	zero,-4(fp)
   90f10:	e0bfff17 	ldw	r2,-4(fp)
}
   90f14:	e037883a 	mov	sp,fp
   90f18:	dfc00117 	ldw	ra,4(sp)
   90f1c:	df000017 	ldw	fp,0(sp)
   90f20:	dec00204 	addi	sp,sp,8
   90f24:	f800283a 	ret

00090f28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   90f28:	defffd04 	addi	sp,sp,-12
   90f2c:	dfc00215 	stw	ra,8(sp)
   90f30:	df000115 	stw	fp,4(sp)
   90f34:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   90f38:	00800274 	movhi	r2,9
   90f3c:	10904c04 	addi	r2,r2,16688
   90f40:	10800017 	ldw	r2,0(r2)
   90f44:	1005003a 	cmpeq	r2,r2,zero
   90f48:	1000061e 	bne	r2,zero,90f64 <alt_get_errno+0x3c>
   90f4c:	00800274 	movhi	r2,9
   90f50:	10904c04 	addi	r2,r2,16688
   90f54:	10800017 	ldw	r2,0(r2)
   90f58:	103ee83a 	callr	r2
   90f5c:	e0bfff15 	stw	r2,-4(fp)
   90f60:	00000306 	br	90f70 <alt_get_errno+0x48>
   90f64:	00800274 	movhi	r2,9
   90f68:	10970a04 	addi	r2,r2,23592
   90f6c:	e0bfff15 	stw	r2,-4(fp)
   90f70:	e0bfff17 	ldw	r2,-4(fp)
}
   90f74:	e037883a 	mov	sp,fp
   90f78:	dfc00117 	ldw	ra,4(sp)
   90f7c:	df000017 	ldw	fp,0(sp)
   90f80:	dec00204 	addi	sp,sp,8
   90f84:	f800283a 	ret

00090f88 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   90f88:	defffd04 	addi	sp,sp,-12
   90f8c:	dfc00215 	stw	ra,8(sp)
   90f90:	df000115 	stw	fp,4(sp)
   90f94:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   90f98:	00bfff04 	movi	r2,-4
   90f9c:	00c00274 	movhi	r3,9
   90fa0:	18c80b04 	addi	r3,r3,8236
   90fa4:	1885883a 	add	r2,r3,r2
   90fa8:	e0bfff15 	stw	r2,-4(fp)
   90fac:	00000606 	br	90fc8 <_do_ctors+0x40>
        (*ctor) (); 
   90fb0:	e0bfff17 	ldw	r2,-4(fp)
   90fb4:	10800017 	ldw	r2,0(r2)
   90fb8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   90fbc:	e0bfff17 	ldw	r2,-4(fp)
   90fc0:	10bfff04 	addi	r2,r2,-4
   90fc4:	e0bfff15 	stw	r2,-4(fp)
   90fc8:	e0ffff17 	ldw	r3,-4(fp)
   90fcc:	00800274 	movhi	r2,9
   90fd0:	10880a04 	addi	r2,r2,8232
   90fd4:	18bff62e 	bgeu	r3,r2,90fb0 <_do_ctors+0x28>
        (*ctor) (); 
}
   90fd8:	e037883a 	mov	sp,fp
   90fdc:	dfc00117 	ldw	ra,4(sp)
   90fe0:	df000017 	ldw	fp,0(sp)
   90fe4:	dec00204 	addi	sp,sp,8
   90fe8:	f800283a 	ret

00090fec <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   90fec:	defffd04 	addi	sp,sp,-12
   90ff0:	dfc00215 	stw	ra,8(sp)
   90ff4:	df000115 	stw	fp,4(sp)
   90ff8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   90ffc:	00bfff04 	movi	r2,-4
   91000:	00c00274 	movhi	r3,9
   91004:	18c80b04 	addi	r3,r3,8236
   91008:	1885883a 	add	r2,r3,r2
   9100c:	e0bfff15 	stw	r2,-4(fp)
   91010:	00000606 	br	9102c <_do_dtors+0x40>
        (*dtor) (); 
   91014:	e0bfff17 	ldw	r2,-4(fp)
   91018:	10800017 	ldw	r2,0(r2)
   9101c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   91020:	e0bfff17 	ldw	r2,-4(fp)
   91024:	10bfff04 	addi	r2,r2,-4
   91028:	e0bfff15 	stw	r2,-4(fp)
   9102c:	e0ffff17 	ldw	r3,-4(fp)
   91030:	00800274 	movhi	r2,9
   91034:	10880b04 	addi	r2,r2,8236
   91038:	18bff62e 	bgeu	r3,r2,91014 <_do_dtors+0x28>
        (*dtor) (); 
}
   9103c:	e037883a 	mov	sp,fp
   91040:	dfc00117 	ldw	ra,4(sp)
   91044:	df000017 	ldw	fp,0(sp)
   91048:	dec00204 	addi	sp,sp,8
   9104c:	f800283a 	ret

00091050 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   91050:	deffff04 	addi	sp,sp,-4
   91054:	df000015 	stw	fp,0(sp)
   91058:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   9105c:	e037883a 	mov	sp,fp
   91060:	df000017 	ldw	fp,0(sp)
   91064:	dec00104 	addi	sp,sp,4
   91068:	f800283a 	ret

0009106c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   9106c:	defff904 	addi	sp,sp,-28
   91070:	dfc00615 	stw	ra,24(sp)
   91074:	df000515 	stw	fp,20(sp)
   91078:	df000504 	addi	fp,sp,20
   9107c:	e13ffc15 	stw	r4,-16(fp)
   91080:	e17ffd15 	stw	r5,-12(fp)
   91084:	e1bffe15 	stw	r6,-8(fp)
   91088:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   9108c:	e0800217 	ldw	r2,8(fp)
   91090:	d8800015 	stw	r2,0(sp)
   91094:	e13ffc17 	ldw	r4,-16(fp)
   91098:	e17ffd17 	ldw	r5,-12(fp)
   9109c:	e1bffe17 	ldw	r6,-8(fp)
   910a0:	e1ffff17 	ldw	r7,-4(fp)
   910a4:	00912400 	call	91240 <alt_iic_isr_register>
}  
   910a8:	e037883a 	mov	sp,fp
   910ac:	dfc00117 	ldw	ra,4(sp)
   910b0:	df000017 	ldw	fp,0(sp)
   910b4:	dec00204 	addi	sp,sp,8
   910b8:	f800283a 	ret

000910bc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   910bc:	defff904 	addi	sp,sp,-28
   910c0:	df000615 	stw	fp,24(sp)
   910c4:	df000604 	addi	fp,sp,24
   910c8:	e13ffe15 	stw	r4,-8(fp)
   910cc:	e17fff15 	stw	r5,-4(fp)
   910d0:	e0bfff17 	ldw	r2,-4(fp)
   910d4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   910d8:	0005303a 	rdctl	r2,status
   910dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   910e0:	e0fffb17 	ldw	r3,-20(fp)
   910e4:	00bfff84 	movi	r2,-2
   910e8:	1884703a 	and	r2,r3,r2
   910ec:	1001703a 	wrctl	status,r2
  
  return context;
   910f0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   910f4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   910f8:	e0fffc17 	ldw	r3,-16(fp)
   910fc:	00800044 	movi	r2,1
   91100:	10c4983a 	sll	r2,r2,r3
   91104:	1007883a 	mov	r3,r2
   91108:	00800274 	movhi	r2,9
   9110c:	10970b04 	addi	r2,r2,23596
   91110:	10800017 	ldw	r2,0(r2)
   91114:	1886b03a 	or	r3,r3,r2
   91118:	00800274 	movhi	r2,9
   9111c:	10970b04 	addi	r2,r2,23596
   91120:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   91124:	00800274 	movhi	r2,9
   91128:	10970b04 	addi	r2,r2,23596
   9112c:	10800017 	ldw	r2,0(r2)
   91130:	100170fa 	wrctl	ienable,r2
   91134:	e0bffd17 	ldw	r2,-12(fp)
   91138:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9113c:	e0bffa17 	ldw	r2,-24(fp)
   91140:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   91144:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   91148:	e037883a 	mov	sp,fp
   9114c:	df000017 	ldw	fp,0(sp)
   91150:	dec00104 	addi	sp,sp,4
   91154:	f800283a 	ret

00091158 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   91158:	defff904 	addi	sp,sp,-28
   9115c:	df000615 	stw	fp,24(sp)
   91160:	df000604 	addi	fp,sp,24
   91164:	e13ffe15 	stw	r4,-8(fp)
   91168:	e17fff15 	stw	r5,-4(fp)
   9116c:	e0bfff17 	ldw	r2,-4(fp)
   91170:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91174:	0005303a 	rdctl	r2,status
   91178:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9117c:	e0fffb17 	ldw	r3,-20(fp)
   91180:	00bfff84 	movi	r2,-2
   91184:	1884703a 	and	r2,r3,r2
   91188:	1001703a 	wrctl	status,r2
  
  return context;
   9118c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   91190:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   91194:	e0fffc17 	ldw	r3,-16(fp)
   91198:	00800044 	movi	r2,1
   9119c:	10c4983a 	sll	r2,r2,r3
   911a0:	0084303a 	nor	r2,zero,r2
   911a4:	1007883a 	mov	r3,r2
   911a8:	00800274 	movhi	r2,9
   911ac:	10970b04 	addi	r2,r2,23596
   911b0:	10800017 	ldw	r2,0(r2)
   911b4:	1886703a 	and	r3,r3,r2
   911b8:	00800274 	movhi	r2,9
   911bc:	10970b04 	addi	r2,r2,23596
   911c0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   911c4:	00800274 	movhi	r2,9
   911c8:	10970b04 	addi	r2,r2,23596
   911cc:	10800017 	ldw	r2,0(r2)
   911d0:	100170fa 	wrctl	ienable,r2
   911d4:	e0bffd17 	ldw	r2,-12(fp)
   911d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   911dc:	e0bffa17 	ldw	r2,-24(fp)
   911e0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   911e4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   911e8:	e037883a 	mov	sp,fp
   911ec:	df000017 	ldw	fp,0(sp)
   911f0:	dec00104 	addi	sp,sp,4
   911f4:	f800283a 	ret

000911f8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   911f8:	defffc04 	addi	sp,sp,-16
   911fc:	df000315 	stw	fp,12(sp)
   91200:	df000304 	addi	fp,sp,12
   91204:	e13ffe15 	stw	r4,-8(fp)
   91208:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   9120c:	000530fa 	rdctl	r2,ienable
   91210:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   91214:	e0ffff17 	ldw	r3,-4(fp)
   91218:	00800044 	movi	r2,1
   9121c:	10c4983a 	sll	r2,r2,r3
   91220:	1007883a 	mov	r3,r2
   91224:	e0bffd17 	ldw	r2,-12(fp)
   91228:	1884703a 	and	r2,r3,r2
   9122c:	1004c03a 	cmpne	r2,r2,zero
}
   91230:	e037883a 	mov	sp,fp
   91234:	df000017 	ldw	fp,0(sp)
   91238:	dec00104 	addi	sp,sp,4
   9123c:	f800283a 	ret

00091240 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   91240:	defff404 	addi	sp,sp,-48
   91244:	dfc00b15 	stw	ra,44(sp)
   91248:	df000a15 	stw	fp,40(sp)
   9124c:	df000a04 	addi	fp,sp,40
   91250:	e13ffb15 	stw	r4,-20(fp)
   91254:	e17ffc15 	stw	r5,-16(fp)
   91258:	e1bffd15 	stw	r6,-12(fp)
   9125c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   91260:	00bffa84 	movi	r2,-22
   91264:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   91268:	e0bffc17 	ldw	r2,-16(fp)
   9126c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   91270:	e0bff917 	ldw	r2,-28(fp)
   91274:	10800808 	cmpgei	r2,r2,32
   91278:	1000291e 	bne	r2,zero,91320 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9127c:	0005303a 	rdctl	r2,status
   91280:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91284:	e0fff717 	ldw	r3,-36(fp)
   91288:	00bfff84 	movi	r2,-2
   9128c:	1884703a 	and	r2,r3,r2
   91290:	1001703a 	wrctl	status,r2
  
  return context;
   91294:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   91298:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   9129c:	e0bff917 	ldw	r2,-28(fp)
   912a0:	00c00374 	movhi	r3,13
   912a4:	18f97504 	addi	r3,r3,-6700
   912a8:	100490fa 	slli	r2,r2,3
   912ac:	10c7883a 	add	r3,r2,r3
   912b0:	e0bffd17 	ldw	r2,-12(fp)
   912b4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   912b8:	e0bff917 	ldw	r2,-28(fp)
   912bc:	00c00374 	movhi	r3,13
   912c0:	18f97504 	addi	r3,r3,-6700
   912c4:	100490fa 	slli	r2,r2,3
   912c8:	10c5883a 	add	r2,r2,r3
   912cc:	10c00104 	addi	r3,r2,4
   912d0:	e0bffe17 	ldw	r2,-8(fp)
   912d4:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   912d8:	e0bffd17 	ldw	r2,-12(fp)
   912dc:	1005003a 	cmpeq	r2,r2,zero
   912e0:	1000051e 	bne	r2,zero,912f8 <alt_iic_isr_register+0xb8>
   912e4:	e17ff917 	ldw	r5,-28(fp)
   912e8:	e13ffb17 	ldw	r4,-20(fp)
   912ec:	00910bc0 	call	910bc <alt_ic_irq_enable>
   912f0:	e0bfff15 	stw	r2,-4(fp)
   912f4:	00000406 	br	91308 <alt_iic_isr_register+0xc8>
   912f8:	e17ff917 	ldw	r5,-28(fp)
   912fc:	e13ffb17 	ldw	r4,-20(fp)
   91300:	00911580 	call	91158 <alt_ic_irq_disable>
   91304:	e0bfff15 	stw	r2,-4(fp)
   91308:	e0bfff17 	ldw	r2,-4(fp)
   9130c:	e0bffa15 	stw	r2,-24(fp)
   91310:	e0bff817 	ldw	r2,-32(fp)
   91314:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91318:	e0bff617 	ldw	r2,-40(fp)
   9131c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   91320:	e0bffa17 	ldw	r2,-24(fp)
}
   91324:	e037883a 	mov	sp,fp
   91328:	dfc00117 	ldw	ra,4(sp)
   9132c:	df000017 	ldw	fp,0(sp)
   91330:	dec00204 	addi	sp,sp,8
   91334:	f800283a 	ret

00091338 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   91338:	defff804 	addi	sp,sp,-32
   9133c:	dfc00715 	stw	ra,28(sp)
   91340:	df000615 	stw	fp,24(sp)
   91344:	dc000515 	stw	r16,20(sp)
   91348:	df000504 	addi	fp,sp,20
   9134c:	e13ffc15 	stw	r4,-16(fp)
   91350:	e17ffd15 	stw	r5,-12(fp)
   91354:	e1bffe15 	stw	r6,-8(fp)
   91358:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   9135c:	e13ffd17 	ldw	r4,-12(fp)
   91360:	e17ffe17 	ldw	r5,-8(fp)
   91364:	e1bfff17 	ldw	r6,-4(fp)
   91368:	00915800 	call	91580 <open>
   9136c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   91370:	e0bffb17 	ldw	r2,-20(fp)
   91374:	1004803a 	cmplt	r2,r2,zero
   91378:	10001f1e 	bne	r2,zero,913f8 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   9137c:	e13ffb17 	ldw	r4,-20(fp)
   91380:	04000274 	movhi	r16,9
   91384:	840bbb04 	addi	r16,r16,12012
   91388:	01400304 	movi	r5,12
   9138c:	008597c0 	call	8597c <__mulsi3>
   91390:	1405883a 	add	r2,r2,r16
   91394:	10c00017 	ldw	r3,0(r2)
   91398:	e0bffc17 	ldw	r2,-16(fp)
   9139c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   913a0:	e13ffb17 	ldw	r4,-20(fp)
   913a4:	04000274 	movhi	r16,9
   913a8:	840bbb04 	addi	r16,r16,12012
   913ac:	01400304 	movi	r5,12
   913b0:	008597c0 	call	8597c <__mulsi3>
   913b4:	1405883a 	add	r2,r2,r16
   913b8:	10800104 	addi	r2,r2,4
   913bc:	10c00017 	ldw	r3,0(r2)
   913c0:	e0bffc17 	ldw	r2,-16(fp)
   913c4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   913c8:	e13ffb17 	ldw	r4,-20(fp)
   913cc:	04000274 	movhi	r16,9
   913d0:	840bbb04 	addi	r16,r16,12012
   913d4:	01400304 	movi	r5,12
   913d8:	008597c0 	call	8597c <__mulsi3>
   913dc:	1405883a 	add	r2,r2,r16
   913e0:	10800204 	addi	r2,r2,8
   913e4:	10c00017 	ldw	r3,0(r2)
   913e8:	e0bffc17 	ldw	r2,-16(fp)
   913ec:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   913f0:	e13ffb17 	ldw	r4,-20(fp)
   913f4:	008fee40 	call	8fee4 <alt_release_fd>
  }
} 
   913f8:	e037883a 	mov	sp,fp
   913fc:	dfc00217 	ldw	ra,8(sp)
   91400:	df000117 	ldw	fp,4(sp)
   91404:	dc000017 	ldw	r16,0(sp)
   91408:	dec00304 	addi	sp,sp,12
   9140c:	f800283a 	ret

00091410 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   91410:	defffb04 	addi	sp,sp,-20
   91414:	dfc00415 	stw	ra,16(sp)
   91418:	df000315 	stw	fp,12(sp)
   9141c:	df000304 	addi	fp,sp,12
   91420:	e13ffd15 	stw	r4,-12(fp)
   91424:	e17ffe15 	stw	r5,-8(fp)
   91428:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   9142c:	01000274 	movhi	r4,9
   91430:	210bbe04 	addi	r4,r4,12024
   91434:	e17ffd17 	ldw	r5,-12(fp)
   91438:	01800044 	movi	r6,1
   9143c:	01c07fc4 	movi	r7,511
   91440:	00913380 	call	91338 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   91444:	01000274 	movhi	r4,9
   91448:	210bbb04 	addi	r4,r4,12012
   9144c:	e17ffe17 	ldw	r5,-8(fp)
   91450:	000d883a 	mov	r6,zero
   91454:	01c07fc4 	movi	r7,511
   91458:	00913380 	call	91338 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   9145c:	01000274 	movhi	r4,9
   91460:	210bc104 	addi	r4,r4,12036
   91464:	e17fff17 	ldw	r5,-4(fp)
   91468:	01800044 	movi	r6,1
   9146c:	01c07fc4 	movi	r7,511
   91470:	00913380 	call	91338 <alt_open_fd>
}  
   91474:	e037883a 	mov	sp,fp
   91478:	dfc00117 	ldw	ra,4(sp)
   9147c:	df000017 	ldw	fp,0(sp)
   91480:	dec00204 	addi	sp,sp,8
   91484:	f800283a 	ret

00091488 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   91488:	defffa04 	addi	sp,sp,-24
   9148c:	dfc00515 	stw	ra,20(sp)
   91490:	df000415 	stw	fp,16(sp)
   91494:	dc000315 	stw	r16,12(sp)
   91498:	df000304 	addi	fp,sp,12
   9149c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   914a0:	e0bffe17 	ldw	r2,-8(fp)
   914a4:	10800217 	ldw	r2,8(r2)
   914a8:	10d00034 	orhi	r3,r2,16384
   914ac:	e0bffe17 	ldw	r2,-8(fp)
   914b0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   914b4:	e03ffd15 	stw	zero,-12(fp)
   914b8:	00002306 	br	91548 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   914bc:	e13ffd17 	ldw	r4,-12(fp)
   914c0:	04000274 	movhi	r16,9
   914c4:	840bbb04 	addi	r16,r16,12012
   914c8:	01400304 	movi	r5,12
   914cc:	008597c0 	call	8597c <__mulsi3>
   914d0:	1405883a 	add	r2,r2,r16
   914d4:	10c00017 	ldw	r3,0(r2)
   914d8:	e0bffe17 	ldw	r2,-8(fp)
   914dc:	10800017 	ldw	r2,0(r2)
   914e0:	1880161e 	bne	r3,r2,9153c <alt_file_locked+0xb4>
   914e4:	e13ffd17 	ldw	r4,-12(fp)
   914e8:	04000274 	movhi	r16,9
   914ec:	840bbb04 	addi	r16,r16,12012
   914f0:	01400304 	movi	r5,12
   914f4:	008597c0 	call	8597c <__mulsi3>
   914f8:	1405883a 	add	r2,r2,r16
   914fc:	10800204 	addi	r2,r2,8
   91500:	10800017 	ldw	r2,0(r2)
   91504:	1004403a 	cmpge	r2,r2,zero
   91508:	10000c1e 	bne	r2,zero,9153c <alt_file_locked+0xb4>
   9150c:	e13ffd17 	ldw	r4,-12(fp)
   91510:	01400304 	movi	r5,12
   91514:	008597c0 	call	8597c <__mulsi3>
   91518:	1007883a 	mov	r3,r2
   9151c:	00800274 	movhi	r2,9
   91520:	108bbb04 	addi	r2,r2,12012
   91524:	1887883a 	add	r3,r3,r2
   91528:	e0bffe17 	ldw	r2,-8(fp)
   9152c:	18800326 	beq	r3,r2,9153c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   91530:	00bffcc4 	movi	r2,-13
   91534:	e0bfff15 	stw	r2,-4(fp)
   91538:	00000a06 	br	91564 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   9153c:	e0bffd17 	ldw	r2,-12(fp)
   91540:	10800044 	addi	r2,r2,1
   91544:	e0bffd15 	stw	r2,-12(fp)
   91548:	00800274 	movhi	r2,9
   9154c:	10904b04 	addi	r2,r2,16684
   91550:	10800017 	ldw	r2,0(r2)
   91554:	1007883a 	mov	r3,r2
   91558:	e0bffd17 	ldw	r2,-12(fp)
   9155c:	18bfd72e 	bgeu	r3,r2,914bc <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   91560:	e03fff15 	stw	zero,-4(fp)
   91564:	e0bfff17 	ldw	r2,-4(fp)
}
   91568:	e037883a 	mov	sp,fp
   9156c:	dfc00217 	ldw	ra,8(sp)
   91570:	df000117 	ldw	fp,4(sp)
   91574:	dc000017 	ldw	r16,0(sp)
   91578:	dec00304 	addi	sp,sp,12
   9157c:	f800283a 	ret

00091580 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   91580:	defff404 	addi	sp,sp,-48
   91584:	dfc00b15 	stw	ra,44(sp)
   91588:	df000a15 	stw	fp,40(sp)
   9158c:	df000a04 	addi	fp,sp,40
   91590:	e13ffb15 	stw	r4,-20(fp)
   91594:	e17ffc15 	stw	r5,-16(fp)
   91598:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   9159c:	00bfffc4 	movi	r2,-1
   915a0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   915a4:	00bffb44 	movi	r2,-19
   915a8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   915ac:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   915b0:	e13ffb17 	ldw	r4,-20(fp)
   915b4:	01400274 	movhi	r5,9
   915b8:	29504904 	addi	r5,r5,16676
   915bc:	00919300 	call	91930 <alt_find_dev>
   915c0:	e0bffa15 	stw	r2,-24(fp)
   915c4:	e0bffa17 	ldw	r2,-24(fp)
   915c8:	1004c03a 	cmpne	r2,r2,zero
   915cc:	1000051e 	bne	r2,zero,915e4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   915d0:	e13ffb17 	ldw	r4,-20(fp)
   915d4:	00919c40 	call	919c4 <alt_find_file>
   915d8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   915dc:	00800044 	movi	r2,1
   915e0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   915e4:	e0bffa17 	ldw	r2,-24(fp)
   915e8:	1005003a 	cmpeq	r2,r2,zero
   915ec:	1000311e 	bne	r2,zero,916b4 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   915f0:	e13ffa17 	ldw	r4,-24(fp)
   915f4:	0091ae40 	call	91ae4 <alt_get_fd>
   915f8:	e0bff815 	stw	r2,-32(fp)
   915fc:	e0bff817 	ldw	r2,-32(fp)
   91600:	1004403a 	cmpge	r2,r2,zero
   91604:	1000031e 	bne	r2,zero,91614 <open+0x94>
    {
      status = index;
   91608:	e0bff817 	ldw	r2,-32(fp)
   9160c:	e0bff715 	stw	r2,-36(fp)
   91610:	00002a06 	br	916bc <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   91614:	e13ff817 	ldw	r4,-32(fp)
   91618:	01400304 	movi	r5,12
   9161c:	008597c0 	call	8597c <__mulsi3>
   91620:	1007883a 	mov	r3,r2
   91624:	00800274 	movhi	r2,9
   91628:	108bbb04 	addi	r2,r2,12012
   9162c:	1885883a 	add	r2,r3,r2
   91630:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   91634:	e0fffc17 	ldw	r3,-16(fp)
   91638:	00900034 	movhi	r2,16384
   9163c:	10bfffc4 	addi	r2,r2,-1
   91640:	1886703a 	and	r3,r3,r2
   91644:	e0bff917 	ldw	r2,-28(fp)
   91648:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   9164c:	e0bff617 	ldw	r2,-40(fp)
   91650:	1004c03a 	cmpne	r2,r2,zero
   91654:	1000061e 	bne	r2,zero,91670 <open+0xf0>
   91658:	e13ff917 	ldw	r4,-28(fp)
   9165c:	00914880 	call	91488 <alt_file_locked>
   91660:	e0bff715 	stw	r2,-36(fp)
   91664:	e0bff717 	ldw	r2,-36(fp)
   91668:	1004803a 	cmplt	r2,r2,zero
   9166c:	1000131e 	bne	r2,zero,916bc <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   91670:	e0bffa17 	ldw	r2,-24(fp)
   91674:	10800317 	ldw	r2,12(r2)
   91678:	1005003a 	cmpeq	r2,r2,zero
   9167c:	1000091e 	bne	r2,zero,916a4 <open+0x124>
   91680:	e0bffa17 	ldw	r2,-24(fp)
   91684:	10800317 	ldw	r2,12(r2)
   91688:	e13ff917 	ldw	r4,-28(fp)
   9168c:	e17ffb17 	ldw	r5,-20(fp)
   91690:	e1bffc17 	ldw	r6,-16(fp)
   91694:	e1fffd17 	ldw	r7,-12(fp)
   91698:	103ee83a 	callr	r2
   9169c:	e0bfff15 	stw	r2,-4(fp)
   916a0:	00000106 	br	916a8 <open+0x128>
   916a4:	e03fff15 	stw	zero,-4(fp)
   916a8:	e0bfff17 	ldw	r2,-4(fp)
   916ac:	e0bff715 	stw	r2,-36(fp)
   916b0:	00000206 	br	916bc <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   916b4:	00bffb44 	movi	r2,-19
   916b8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   916bc:	e0bff717 	ldw	r2,-36(fp)
   916c0:	1004403a 	cmpge	r2,r2,zero
   916c4:	1000091e 	bne	r2,zero,916ec <open+0x16c>
  {
    alt_release_fd (index);  
   916c8:	e13ff817 	ldw	r4,-32(fp)
   916cc:	008fee40 	call	8fee4 <alt_release_fd>
    ALT_ERRNO = -status;
   916d0:	009170c0 	call	9170c <alt_get_errno>
   916d4:	e0fff717 	ldw	r3,-36(fp)
   916d8:	00c7c83a 	sub	r3,zero,r3
   916dc:	10c00015 	stw	r3,0(r2)
    return -1;
   916e0:	00bfffc4 	movi	r2,-1
   916e4:	e0bffe15 	stw	r2,-8(fp)
   916e8:	00000206 	br	916f4 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   916ec:	e0bff817 	ldw	r2,-32(fp)
   916f0:	e0bffe15 	stw	r2,-8(fp)
   916f4:	e0bffe17 	ldw	r2,-8(fp)
}
   916f8:	e037883a 	mov	sp,fp
   916fc:	dfc00117 	ldw	ra,4(sp)
   91700:	df000017 	ldw	fp,0(sp)
   91704:	dec00204 	addi	sp,sp,8
   91708:	f800283a 	ret

0009170c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   9170c:	defffd04 	addi	sp,sp,-12
   91710:	dfc00215 	stw	ra,8(sp)
   91714:	df000115 	stw	fp,4(sp)
   91718:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   9171c:	00800274 	movhi	r2,9
   91720:	10904c04 	addi	r2,r2,16688
   91724:	10800017 	ldw	r2,0(r2)
   91728:	1005003a 	cmpeq	r2,r2,zero
   9172c:	1000061e 	bne	r2,zero,91748 <alt_get_errno+0x3c>
   91730:	00800274 	movhi	r2,9
   91734:	10904c04 	addi	r2,r2,16688
   91738:	10800017 	ldw	r2,0(r2)
   9173c:	103ee83a 	callr	r2
   91740:	e0bfff15 	stw	r2,-4(fp)
   91744:	00000306 	br	91754 <alt_get_errno+0x48>
   91748:	00800274 	movhi	r2,9
   9174c:	10970a04 	addi	r2,r2,23592
   91750:	e0bfff15 	stw	r2,-4(fp)
   91754:	e0bfff17 	ldw	r2,-4(fp)
}
   91758:	e037883a 	mov	sp,fp
   9175c:	dfc00117 	ldw	ra,4(sp)
   91760:	df000017 	ldw	fp,0(sp)
   91764:	dec00204 	addi	sp,sp,8
   91768:	f800283a 	ret

0009176c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   9176c:	defffa04 	addi	sp,sp,-24
   91770:	df000515 	stw	fp,20(sp)
   91774:	df000504 	addi	fp,sp,20
   91778:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9177c:	0005303a 	rdctl	r2,status
   91780:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91784:	e0fffd17 	ldw	r3,-12(fp)
   91788:	00bfff84 	movi	r2,-2
   9178c:	1884703a 	and	r2,r3,r2
   91790:	1001703a 	wrctl	status,r2
  
  return context;
   91794:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   91798:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   9179c:	e0bfff17 	ldw	r2,-4(fp)
   917a0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   917a4:	e0bffc17 	ldw	r2,-16(fp)
   917a8:	10c00017 	ldw	r3,0(r2)
   917ac:	e0bffc17 	ldw	r2,-16(fp)
   917b0:	10800117 	ldw	r2,4(r2)
   917b4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   917b8:	e0bffc17 	ldw	r2,-16(fp)
   917bc:	10c00117 	ldw	r3,4(r2)
   917c0:	e0bffc17 	ldw	r2,-16(fp)
   917c4:	10800017 	ldw	r2,0(r2)
   917c8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   917cc:	e0fffc17 	ldw	r3,-16(fp)
   917d0:	e0bffc17 	ldw	r2,-16(fp)
   917d4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   917d8:	e0fffc17 	ldw	r3,-16(fp)
   917dc:	e0bffc17 	ldw	r2,-16(fp)
   917e0:	18800015 	stw	r2,0(r3)
   917e4:	e0bffe17 	ldw	r2,-8(fp)
   917e8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   917ec:	e0bffb17 	ldw	r2,-20(fp)
   917f0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   917f4:	e037883a 	mov	sp,fp
   917f8:	df000017 	ldw	fp,0(sp)
   917fc:	dec00104 	addi	sp,sp,4
   91800:	f800283a 	ret

00091804 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   91804:	defffb04 	addi	sp,sp,-20
   91808:	dfc00415 	stw	ra,16(sp)
   9180c:	df000315 	stw	fp,12(sp)
   91810:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   91814:	d0a01117 	ldw	r2,-32700(gp)
   91818:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   9181c:	d0a6d217 	ldw	r2,-25784(gp)
   91820:	10800044 	addi	r2,r2,1
   91824:	d0a6d215 	stw	r2,-25784(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   91828:	00003106 	br	918f0 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   9182c:	e0bffe17 	ldw	r2,-8(fp)
   91830:	10800017 	ldw	r2,0(r2)
   91834:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   91838:	e0bffe17 	ldw	r2,-8(fp)
   9183c:	10800403 	ldbu	r2,16(r2)
   91840:	10803fcc 	andi	r2,r2,255
   91844:	1005003a 	cmpeq	r2,r2,zero
   91848:	1000051e 	bne	r2,zero,91860 <alt_tick+0x5c>
   9184c:	d0a6d217 	ldw	r2,-25784(gp)
   91850:	1004c03a 	cmpne	r2,r2,zero
   91854:	1000021e 	bne	r2,zero,91860 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   91858:	e0bffe17 	ldw	r2,-8(fp)
   9185c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   91860:	e0bffe17 	ldw	r2,-8(fp)
   91864:	10c00217 	ldw	r3,8(r2)
   91868:	d0a6d217 	ldw	r2,-25784(gp)
   9186c:	10c01e36 	bltu	r2,r3,918e8 <alt_tick+0xe4>
   91870:	e0bffe17 	ldw	r2,-8(fp)
   91874:	10800403 	ldbu	r2,16(r2)
   91878:	10803fcc 	andi	r2,r2,255
   9187c:	1004c03a 	cmpne	r2,r2,zero
   91880:	1000191e 	bne	r2,zero,918e8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   91884:	e0bffe17 	ldw	r2,-8(fp)
   91888:	10c00317 	ldw	r3,12(r2)
   9188c:	e0bffe17 	ldw	r2,-8(fp)
   91890:	11000517 	ldw	r4,20(r2)
   91894:	183ee83a 	callr	r3
   91898:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   9189c:	e0bffd17 	ldw	r2,-12(fp)
   918a0:	1004c03a 	cmpne	r2,r2,zero
   918a4:	1000031e 	bne	r2,zero,918b4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   918a8:	e13ffe17 	ldw	r4,-8(fp)
   918ac:	009176c0 	call	9176c <alt_alarm_stop>
   918b0:	00000d06 	br	918e8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   918b4:	e0bffe17 	ldw	r2,-8(fp)
   918b8:	10c00217 	ldw	r3,8(r2)
   918bc:	e0bffd17 	ldw	r2,-12(fp)
   918c0:	1887883a 	add	r3,r3,r2
   918c4:	e0bffe17 	ldw	r2,-8(fp)
   918c8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   918cc:	e0bffe17 	ldw	r2,-8(fp)
   918d0:	10c00217 	ldw	r3,8(r2)
   918d4:	d0a6d217 	ldw	r2,-25784(gp)
   918d8:	1880032e 	bgeu	r3,r2,918e8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   918dc:	e0fffe17 	ldw	r3,-8(fp)
   918e0:	00800044 	movi	r2,1
   918e4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   918e8:	e0bfff17 	ldw	r2,-4(fp)
   918ec:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   918f0:	d0e01104 	addi	r3,gp,-32700
   918f4:	e0bffe17 	ldw	r2,-8(fp)
   918f8:	10ffcc1e 	bne	r2,r3,9182c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   918fc:	e037883a 	mov	sp,fp
   91900:	dfc00117 	ldw	ra,4(sp)
   91904:	df000017 	ldw	fp,0(sp)
   91908:	dec00204 	addi	sp,sp,8
   9190c:	f800283a 	ret

00091910 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   91910:	deffff04 	addi	sp,sp,-4
   91914:	df000015 	stw	fp,0(sp)
   91918:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   9191c:	000170fa 	wrctl	ienable,zero
}
   91920:	e037883a 	mov	sp,fp
   91924:	df000017 	ldw	fp,0(sp)
   91928:	dec00104 	addi	sp,sp,4
   9192c:	f800283a 	ret

00091930 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   91930:	defff904 	addi	sp,sp,-28
   91934:	dfc00615 	stw	ra,24(sp)
   91938:	df000515 	stw	fp,20(sp)
   9193c:	df000504 	addi	fp,sp,20
   91940:	e13ffd15 	stw	r4,-12(fp)
   91944:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   91948:	e0bffe17 	ldw	r2,-8(fp)
   9194c:	10800017 	ldw	r2,0(r2)
   91950:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   91954:	e13ffd17 	ldw	r4,-12(fp)
   91958:	0085bb40 	call	85bb4 <strlen>
   9195c:	10800044 	addi	r2,r2,1
   91960:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   91964:	00000d06 	br	9199c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   91968:	e0bffc17 	ldw	r2,-16(fp)
   9196c:	11000217 	ldw	r4,8(r2)
   91970:	e1bffb17 	ldw	r6,-20(fp)
   91974:	e17ffd17 	ldw	r5,-12(fp)
   91978:	0091c000 	call	91c00 <memcmp>
   9197c:	1004c03a 	cmpne	r2,r2,zero
   91980:	1000031e 	bne	r2,zero,91990 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   91984:	e0bffc17 	ldw	r2,-16(fp)
   91988:	e0bfff15 	stw	r2,-4(fp)
   9198c:	00000706 	br	919ac <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   91990:	e0bffc17 	ldw	r2,-16(fp)
   91994:	10800017 	ldw	r2,0(r2)
   91998:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   9199c:	e0fffe17 	ldw	r3,-8(fp)
   919a0:	e0bffc17 	ldw	r2,-16(fp)
   919a4:	10fff01e 	bne	r2,r3,91968 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   919a8:	e03fff15 	stw	zero,-4(fp)
   919ac:	e0bfff17 	ldw	r2,-4(fp)
}
   919b0:	e037883a 	mov	sp,fp
   919b4:	dfc00117 	ldw	ra,4(sp)
   919b8:	df000017 	ldw	fp,0(sp)
   919bc:	dec00204 	addi	sp,sp,8
   919c0:	f800283a 	ret

000919c4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   919c4:	defffa04 	addi	sp,sp,-24
   919c8:	dfc00515 	stw	ra,20(sp)
   919cc:	df000415 	stw	fp,16(sp)
   919d0:	df000404 	addi	fp,sp,16
   919d4:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   919d8:	00800274 	movhi	r2,9
   919dc:	10904704 	addi	r2,r2,16668
   919e0:	10800017 	ldw	r2,0(r2)
   919e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   919e8:	00003306 	br	91ab8 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   919ec:	e0bffd17 	ldw	r2,-12(fp)
   919f0:	11000217 	ldw	r4,8(r2)
   919f4:	0085bb40 	call	85bb4 <strlen>
   919f8:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   919fc:	e0bffd17 	ldw	r2,-12(fp)
   91a00:	10c00217 	ldw	r3,8(r2)
   91a04:	e0bffc17 	ldw	r2,-16(fp)
   91a08:	1885883a 	add	r2,r3,r2
   91a0c:	10bfffc4 	addi	r2,r2,-1
   91a10:	10800003 	ldbu	r2,0(r2)
   91a14:	10803fcc 	andi	r2,r2,255
   91a18:	1080201c 	xori	r2,r2,128
   91a1c:	10bfe004 	addi	r2,r2,-128
   91a20:	10800bd8 	cmpnei	r2,r2,47
   91a24:	1000031e 	bne	r2,zero,91a34 <alt_find_file+0x70>
    {
      len -= 1;
   91a28:	e0bffc17 	ldw	r2,-16(fp)
   91a2c:	10bfffc4 	addi	r2,r2,-1
   91a30:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   91a34:	e0bffc17 	ldw	r2,-16(fp)
   91a38:	1007883a 	mov	r3,r2
   91a3c:	e0bffe17 	ldw	r2,-8(fp)
   91a40:	1885883a 	add	r2,r3,r2
   91a44:	10800003 	ldbu	r2,0(r2)
   91a48:	10803fcc 	andi	r2,r2,255
   91a4c:	1080201c 	xori	r2,r2,128
   91a50:	10bfe004 	addi	r2,r2,-128
   91a54:	10800be0 	cmpeqi	r2,r2,47
   91a58:	10000a1e 	bne	r2,zero,91a84 <alt_find_file+0xc0>
   91a5c:	e0bffc17 	ldw	r2,-16(fp)
   91a60:	1007883a 	mov	r3,r2
   91a64:	e0bffe17 	ldw	r2,-8(fp)
   91a68:	1885883a 	add	r2,r3,r2
   91a6c:	10800003 	ldbu	r2,0(r2)
   91a70:	10803fcc 	andi	r2,r2,255
   91a74:	1080201c 	xori	r2,r2,128
   91a78:	10bfe004 	addi	r2,r2,-128
   91a7c:	1004c03a 	cmpne	r2,r2,zero
   91a80:	10000a1e 	bne	r2,zero,91aac <alt_find_file+0xe8>
   91a84:	e0bffd17 	ldw	r2,-12(fp)
   91a88:	11000217 	ldw	r4,8(r2)
   91a8c:	e1bffc17 	ldw	r6,-16(fp)
   91a90:	e17ffe17 	ldw	r5,-8(fp)
   91a94:	0091c000 	call	91c00 <memcmp>
   91a98:	1004c03a 	cmpne	r2,r2,zero
   91a9c:	1000031e 	bne	r2,zero,91aac <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   91aa0:	e0bffd17 	ldw	r2,-12(fp)
   91aa4:	e0bfff15 	stw	r2,-4(fp)
   91aa8:	00000806 	br	91acc <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   91aac:	e0bffd17 	ldw	r2,-12(fp)
   91ab0:	10800017 	ldw	r2,0(r2)
   91ab4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   91ab8:	00c00274 	movhi	r3,9
   91abc:	18d04704 	addi	r3,r3,16668
   91ac0:	e0bffd17 	ldw	r2,-12(fp)
   91ac4:	10ffc91e 	bne	r2,r3,919ec <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   91ac8:	e03fff15 	stw	zero,-4(fp)
   91acc:	e0bfff17 	ldw	r2,-4(fp)
}
   91ad0:	e037883a 	mov	sp,fp
   91ad4:	dfc00117 	ldw	ra,4(sp)
   91ad8:	df000017 	ldw	fp,0(sp)
   91adc:	dec00204 	addi	sp,sp,8
   91ae0:	f800283a 	ret

00091ae4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   91ae4:	defffa04 	addi	sp,sp,-24
   91ae8:	dfc00515 	stw	ra,20(sp)
   91aec:	df000415 	stw	fp,16(sp)
   91af0:	dc000315 	stw	r16,12(sp)
   91af4:	df000304 	addi	fp,sp,12
   91af8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   91afc:	00bffa04 	movi	r2,-24
   91b00:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   91b04:	e03ffe15 	stw	zero,-8(fp)
   91b08:	00002006 	br	91b8c <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   91b0c:	e13ffe17 	ldw	r4,-8(fp)
   91b10:	04000274 	movhi	r16,9
   91b14:	840bbb04 	addi	r16,r16,12012
   91b18:	01400304 	movi	r5,12
   91b1c:	008597c0 	call	8597c <__mulsi3>
   91b20:	1405883a 	add	r2,r2,r16
   91b24:	10800017 	ldw	r2,0(r2)
   91b28:	1004c03a 	cmpne	r2,r2,zero
   91b2c:	1000141e 	bne	r2,zero,91b80 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   91b30:	e13ffe17 	ldw	r4,-8(fp)
   91b34:	04000274 	movhi	r16,9
   91b38:	840bbb04 	addi	r16,r16,12012
   91b3c:	01400304 	movi	r5,12
   91b40:	008597c0 	call	8597c <__mulsi3>
   91b44:	1407883a 	add	r3,r2,r16
   91b48:	e0bfff17 	ldw	r2,-4(fp)
   91b4c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   91b50:	00800274 	movhi	r2,9
   91b54:	10904b04 	addi	r2,r2,16684
   91b58:	10c00017 	ldw	r3,0(r2)
   91b5c:	e0bffe17 	ldw	r2,-8(fp)
   91b60:	1880040e 	bge	r3,r2,91b74 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   91b64:	00c00274 	movhi	r3,9
   91b68:	18d04b04 	addi	r3,r3,16684
   91b6c:	e0bffe17 	ldw	r2,-8(fp)
   91b70:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   91b74:	e0bffe17 	ldw	r2,-8(fp)
   91b78:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   91b7c:	00000606 	br	91b98 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   91b80:	e0bffe17 	ldw	r2,-8(fp)
   91b84:	10800044 	addi	r2,r2,1
   91b88:	e0bffe15 	stw	r2,-8(fp)
   91b8c:	e0bffe17 	ldw	r2,-8(fp)
   91b90:	10800810 	cmplti	r2,r2,32
   91b94:	103fdd1e 	bne	r2,zero,91b0c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   91b98:	e0bffd17 	ldw	r2,-12(fp)
}
   91b9c:	e037883a 	mov	sp,fp
   91ba0:	dfc00217 	ldw	ra,8(sp)
   91ba4:	df000117 	ldw	fp,4(sp)
   91ba8:	dc000017 	ldw	r16,0(sp)
   91bac:	dec00304 	addi	sp,sp,12
   91bb0:	f800283a 	ret

00091bb4 <atexit>:
   91bb4:	200b883a 	mov	r5,r4
   91bb8:	000d883a 	mov	r6,zero
   91bbc:	0009883a 	mov	r4,zero
   91bc0:	000f883a 	mov	r7,zero
   91bc4:	0091c741 	jmpi	91c74 <__register_exitproc>

00091bc8 <exit>:
   91bc8:	defffe04 	addi	sp,sp,-8
   91bcc:	000b883a 	mov	r5,zero
   91bd0:	dc000015 	stw	r16,0(sp)
   91bd4:	dfc00115 	stw	ra,4(sp)
   91bd8:	2021883a 	mov	r16,r4
   91bdc:	0091dac0 	call	91dac <__call_exitprocs>
   91be0:	00800274 	movhi	r2,9
   91be4:	10904204 	addi	r2,r2,16648
   91be8:	11000017 	ldw	r4,0(r2)
   91bec:	20800f17 	ldw	r2,60(r4)
   91bf0:	10000126 	beq	r2,zero,91bf8 <exit+0x30>
   91bf4:	103ee83a 	callr	r2
   91bf8:	8009883a 	mov	r4,r16
   91bfc:	0091f9c0 	call	91f9c <_exit>

00091c00 <memcmp>:
   91c00:	00c000c4 	movi	r3,3
   91c04:	1980032e 	bgeu	r3,r6,91c14 <memcmp+0x14>
   91c08:	2144b03a 	or	r2,r4,r5
   91c0c:	10c4703a 	and	r2,r2,r3
   91c10:	10000f26 	beq	r2,zero,91c50 <memcmp+0x50>
   91c14:	31ffffc4 	addi	r7,r6,-1
   91c18:	3000061e 	bne	r6,zero,91c34 <memcmp+0x34>
   91c1c:	00000a06 	br	91c48 <memcmp+0x48>
   91c20:	39ffffc4 	addi	r7,r7,-1
   91c24:	00bfffc4 	movi	r2,-1
   91c28:	21000044 	addi	r4,r4,1
   91c2c:	29400044 	addi	r5,r5,1
   91c30:	38800526 	beq	r7,r2,91c48 <memcmp+0x48>
   91c34:	20c00003 	ldbu	r3,0(r4)
   91c38:	28800003 	ldbu	r2,0(r5)
   91c3c:	18bff826 	beq	r3,r2,91c20 <memcmp+0x20>
   91c40:	1885c83a 	sub	r2,r3,r2
   91c44:	f800283a 	ret
   91c48:	0005883a 	mov	r2,zero
   91c4c:	f800283a 	ret
   91c50:	180f883a 	mov	r7,r3
   91c54:	20c00017 	ldw	r3,0(r4)
   91c58:	28800017 	ldw	r2,0(r5)
   91c5c:	18bfed1e 	bne	r3,r2,91c14 <memcmp+0x14>
   91c60:	31bfff04 	addi	r6,r6,-4
   91c64:	21000104 	addi	r4,r4,4
   91c68:	29400104 	addi	r5,r5,4
   91c6c:	39bff936 	bltu	r7,r6,91c54 <memcmp+0x54>
   91c70:	003fe806 	br	91c14 <memcmp+0x14>

00091c74 <__register_exitproc>:
   91c74:	defffa04 	addi	sp,sp,-24
   91c78:	00800274 	movhi	r2,9
   91c7c:	10904204 	addi	r2,r2,16648
   91c80:	dc000015 	stw	r16,0(sp)
   91c84:	14000017 	ldw	r16,0(r2)
   91c88:	dd000415 	stw	r20,16(sp)
   91c8c:	2829883a 	mov	r20,r5
   91c90:	81405217 	ldw	r5,328(r16)
   91c94:	dcc00315 	stw	r19,12(sp)
   91c98:	dc800215 	stw	r18,8(sp)
   91c9c:	dc400115 	stw	r17,4(sp)
   91ca0:	dfc00515 	stw	ra,20(sp)
   91ca4:	2023883a 	mov	r17,r4
   91ca8:	3027883a 	mov	r19,r6
   91cac:	3825883a 	mov	r18,r7
   91cb0:	28002526 	beq	r5,zero,91d48 <__register_exitproc+0xd4>
   91cb4:	29000117 	ldw	r4,4(r5)
   91cb8:	008007c4 	movi	r2,31
   91cbc:	11002716 	blt	r2,r4,91d5c <__register_exitproc+0xe8>
   91cc0:	8800101e 	bne	r17,zero,91d04 <__register_exitproc+0x90>
   91cc4:	2105883a 	add	r2,r4,r4
   91cc8:	1085883a 	add	r2,r2,r2
   91ccc:	20c00044 	addi	r3,r4,1
   91cd0:	1145883a 	add	r2,r2,r5
   91cd4:	0009883a 	mov	r4,zero
   91cd8:	15000215 	stw	r20,8(r2)
   91cdc:	28c00115 	stw	r3,4(r5)
   91ce0:	2005883a 	mov	r2,r4
   91ce4:	dfc00517 	ldw	ra,20(sp)
   91ce8:	dd000417 	ldw	r20,16(sp)
   91cec:	dcc00317 	ldw	r19,12(sp)
   91cf0:	dc800217 	ldw	r18,8(sp)
   91cf4:	dc400117 	ldw	r17,4(sp)
   91cf8:	dc000017 	ldw	r16,0(sp)
   91cfc:	dec00604 	addi	sp,sp,24
   91d00:	f800283a 	ret
   91d04:	29802204 	addi	r6,r5,136
   91d08:	00800044 	movi	r2,1
   91d0c:	110e983a 	sll	r7,r2,r4
   91d10:	30c04017 	ldw	r3,256(r6)
   91d14:	2105883a 	add	r2,r4,r4
   91d18:	1085883a 	add	r2,r2,r2
   91d1c:	1185883a 	add	r2,r2,r6
   91d20:	19c6b03a 	or	r3,r3,r7
   91d24:	14802015 	stw	r18,128(r2)
   91d28:	14c00015 	stw	r19,0(r2)
   91d2c:	00800084 	movi	r2,2
   91d30:	30c04015 	stw	r3,256(r6)
   91d34:	88bfe31e 	bne	r17,r2,91cc4 <__register_exitproc+0x50>
   91d38:	30804117 	ldw	r2,260(r6)
   91d3c:	11c4b03a 	or	r2,r2,r7
   91d40:	30804115 	stw	r2,260(r6)
   91d44:	003fdf06 	br	91cc4 <__register_exitproc+0x50>
   91d48:	00800374 	movhi	r2,13
   91d4c:	10b9b504 	addi	r2,r2,-6444
   91d50:	100b883a 	mov	r5,r2
   91d54:	80805215 	stw	r2,328(r16)
   91d58:	003fd606 	br	91cb4 <__register_exitproc+0x40>
   91d5c:	00800034 	movhi	r2,0
   91d60:	10800004 	addi	r2,r2,0
   91d64:	1000021e 	bne	r2,zero,91d70 <__register_exitproc+0xfc>
   91d68:	013fffc4 	movi	r4,-1
   91d6c:	003fdc06 	br	91ce0 <__register_exitproc+0x6c>
   91d70:	01006404 	movi	r4,400
   91d74:	103ee83a 	callr	r2
   91d78:	1007883a 	mov	r3,r2
   91d7c:	103ffa26 	beq	r2,zero,91d68 <__register_exitproc+0xf4>
   91d80:	80805217 	ldw	r2,328(r16)
   91d84:	180b883a 	mov	r5,r3
   91d88:	18000115 	stw	zero,4(r3)
   91d8c:	18800015 	stw	r2,0(r3)
   91d90:	80c05215 	stw	r3,328(r16)
   91d94:	18006215 	stw	zero,392(r3)
   91d98:	18006315 	stw	zero,396(r3)
   91d9c:	0009883a 	mov	r4,zero
   91da0:	883fc826 	beq	r17,zero,91cc4 <__register_exitproc+0x50>
   91da4:	003fd706 	br	91d04 <__register_exitproc+0x90>

00091da8 <register_fini>:
   91da8:	f800283a 	ret

00091dac <__call_exitprocs>:
   91dac:	00800274 	movhi	r2,9
   91db0:	10904204 	addi	r2,r2,16648
   91db4:	10800017 	ldw	r2,0(r2)
   91db8:	defff304 	addi	sp,sp,-52
   91dbc:	df000b15 	stw	fp,44(sp)
   91dc0:	d8800115 	stw	r2,4(sp)
   91dc4:	00800034 	movhi	r2,0
   91dc8:	10800004 	addi	r2,r2,0
   91dcc:	1005003a 	cmpeq	r2,r2,zero
   91dd0:	d8800215 	stw	r2,8(sp)
   91dd4:	d8800117 	ldw	r2,4(sp)
   91dd8:	dd400815 	stw	r21,32(sp)
   91ddc:	dd000715 	stw	r20,28(sp)
   91de0:	10805204 	addi	r2,r2,328
   91de4:	dfc00c15 	stw	ra,48(sp)
   91de8:	ddc00a15 	stw	r23,40(sp)
   91dec:	dd800915 	stw	r22,36(sp)
   91df0:	dcc00615 	stw	r19,24(sp)
   91df4:	dc800515 	stw	r18,20(sp)
   91df8:	dc400415 	stw	r17,16(sp)
   91dfc:	dc000315 	stw	r16,12(sp)
   91e00:	282b883a 	mov	r21,r5
   91e04:	2039883a 	mov	fp,r4
   91e08:	d8800015 	stw	r2,0(sp)
   91e0c:	2829003a 	cmpeq	r20,r5,zero
   91e10:	d8800117 	ldw	r2,4(sp)
   91e14:	14405217 	ldw	r17,328(r2)
   91e18:	88001026 	beq	r17,zero,91e5c <__call_exitprocs+0xb0>
   91e1c:	ddc00017 	ldw	r23,0(sp)
   91e20:	88800117 	ldw	r2,4(r17)
   91e24:	8c802204 	addi	r18,r17,136
   91e28:	143fffc4 	addi	r16,r2,-1
   91e2c:	80000916 	blt	r16,zero,91e54 <__call_exitprocs+0xa8>
   91e30:	05bfffc4 	movi	r22,-1
   91e34:	a000151e 	bne	r20,zero,91e8c <__call_exitprocs+0xe0>
   91e38:	8409883a 	add	r4,r16,r16
   91e3c:	2105883a 	add	r2,r4,r4
   91e40:	1485883a 	add	r2,r2,r18
   91e44:	10c02017 	ldw	r3,128(r2)
   91e48:	a8c01126 	beq	r21,r3,91e90 <__call_exitprocs+0xe4>
   91e4c:	843fffc4 	addi	r16,r16,-1
   91e50:	85bff81e 	bne	r16,r22,91e34 <__call_exitprocs+0x88>
   91e54:	d8800217 	ldw	r2,8(sp)
   91e58:	10003126 	beq	r2,zero,91f20 <__call_exitprocs+0x174>
   91e5c:	dfc00c17 	ldw	ra,48(sp)
   91e60:	df000b17 	ldw	fp,44(sp)
   91e64:	ddc00a17 	ldw	r23,40(sp)
   91e68:	dd800917 	ldw	r22,36(sp)
   91e6c:	dd400817 	ldw	r21,32(sp)
   91e70:	dd000717 	ldw	r20,28(sp)
   91e74:	dcc00617 	ldw	r19,24(sp)
   91e78:	dc800517 	ldw	r18,20(sp)
   91e7c:	dc400417 	ldw	r17,16(sp)
   91e80:	dc000317 	ldw	r16,12(sp)
   91e84:	dec00d04 	addi	sp,sp,52
   91e88:	f800283a 	ret
   91e8c:	8409883a 	add	r4,r16,r16
   91e90:	88c00117 	ldw	r3,4(r17)
   91e94:	2105883a 	add	r2,r4,r4
   91e98:	1445883a 	add	r2,r2,r17
   91e9c:	18ffffc4 	addi	r3,r3,-1
   91ea0:	11800217 	ldw	r6,8(r2)
   91ea4:	1c001526 	beq	r3,r16,91efc <__call_exitprocs+0x150>
   91ea8:	10000215 	stw	zero,8(r2)
   91eac:	303fe726 	beq	r6,zero,91e4c <__call_exitprocs+0xa0>
   91eb0:	00c00044 	movi	r3,1
   91eb4:	1c06983a 	sll	r3,r3,r16
   91eb8:	90804017 	ldw	r2,256(r18)
   91ebc:	8cc00117 	ldw	r19,4(r17)
   91ec0:	1884703a 	and	r2,r3,r2
   91ec4:	10001426 	beq	r2,zero,91f18 <__call_exitprocs+0x16c>
   91ec8:	90804117 	ldw	r2,260(r18)
   91ecc:	1884703a 	and	r2,r3,r2
   91ed0:	10000c1e 	bne	r2,zero,91f04 <__call_exitprocs+0x158>
   91ed4:	2105883a 	add	r2,r4,r4
   91ed8:	1485883a 	add	r2,r2,r18
   91edc:	11400017 	ldw	r5,0(r2)
   91ee0:	e009883a 	mov	r4,fp
   91ee4:	303ee83a 	callr	r6
   91ee8:	88800117 	ldw	r2,4(r17)
   91eec:	98bfc81e 	bne	r19,r2,91e10 <__call_exitprocs+0x64>
   91ef0:	b8800017 	ldw	r2,0(r23)
   91ef4:	147fd526 	beq	r2,r17,91e4c <__call_exitprocs+0xa0>
   91ef8:	003fc506 	br	91e10 <__call_exitprocs+0x64>
   91efc:	8c000115 	stw	r16,4(r17)
   91f00:	003fea06 	br	91eac <__call_exitprocs+0x100>
   91f04:	2105883a 	add	r2,r4,r4
   91f08:	1485883a 	add	r2,r2,r18
   91f0c:	11000017 	ldw	r4,0(r2)
   91f10:	303ee83a 	callr	r6
   91f14:	003ff406 	br	91ee8 <__call_exitprocs+0x13c>
   91f18:	303ee83a 	callr	r6
   91f1c:	003ff206 	br	91ee8 <__call_exitprocs+0x13c>
   91f20:	88800117 	ldw	r2,4(r17)
   91f24:	1000081e 	bne	r2,zero,91f48 <__call_exitprocs+0x19c>
   91f28:	89000017 	ldw	r4,0(r17)
   91f2c:	20000726 	beq	r4,zero,91f4c <__call_exitprocs+0x1a0>
   91f30:	b9000015 	stw	r4,0(r23)
   91f34:	8809883a 	mov	r4,r17
   91f38:	00000000 	call	0 <__alt_mem_sram_0-0x80000>
   91f3c:	bc400017 	ldw	r17,0(r23)
   91f40:	883fb71e 	bne	r17,zero,91e20 <__call_exitprocs+0x74>
   91f44:	003fc506 	br	91e5c <__call_exitprocs+0xb0>
   91f48:	89000017 	ldw	r4,0(r17)
   91f4c:	882f883a 	mov	r23,r17
   91f50:	2023883a 	mov	r17,r4
   91f54:	883fb21e 	bne	r17,zero,91e20 <__call_exitprocs+0x74>
   91f58:	003fc006 	br	91e5c <__call_exitprocs+0xb0>

00091f5c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   91f5c:	defffd04 	addi	sp,sp,-12
   91f60:	df000215 	stw	fp,8(sp)
   91f64:	df000204 	addi	fp,sp,8
   91f68:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   91f6c:	e0bfff17 	ldw	r2,-4(fp)
   91f70:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   91f74:	e0bffe17 	ldw	r2,-8(fp)
   91f78:	1005003a 	cmpeq	r2,r2,zero
   91f7c:	1000021e 	bne	r2,zero,91f88 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   91f80:	002af070 	cmpltui	zero,zero,43969
   91f84:	00000106 	br	91f8c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   91f88:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   91f8c:	e037883a 	mov	sp,fp
   91f90:	df000017 	ldw	fp,0(sp)
   91f94:	dec00104 	addi	sp,sp,4
   91f98:	f800283a 	ret

00091f9c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   91f9c:	defffd04 	addi	sp,sp,-12
   91fa0:	dfc00215 	stw	ra,8(sp)
   91fa4:	df000115 	stw	fp,4(sp)
   91fa8:	df000104 	addi	fp,sp,4
   91fac:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   91fb0:	e13fff17 	ldw	r4,-4(fp)
   91fb4:	0091f5c0 	call	91f5c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   91fb8:	003fff06 	br	91fb8 <_exit+0x1c>
   91fbc:	00000010 	cmplti	zero,zero,0
   91fc0:	00000000 	call	0 <__alt_mem_sram_0-0x80000>
   91fc4:	00527a01 	jmpi	527a0 <__alt_mem_sram_0-0x2d860>
   91fc8:	011f7c01 	jmpi	11f7c0 <__alt_mem_Nios_LCD_Camera_Component_0_Touchpanel+0x1a380>
   91fcc:	001b0c0b 	ldhu	zero,27696(zero)
   91fd0:	00000028 	cmpgeui	zero,zero,0
   91fd4:	00000018 	cmpnei	zero,zero,0
   91fd8:	0008cec0 	call	8cec <__alt_mem_sram_0-0x77314>
   91fdc:	0000066c 	andhi	zero,zero,25
   91fe0:	3c0e4400 	call	3c0e440 <__alt_mem_Nios_LCD_Camera_Component_0_Touchpanel+0x3b09000>
   91fe4:	910a9074 	orhi	r4,r18,10817
   91fe8:	94089209 	0x94089209
   91fec:	97049606 	br	93248 <jtag_uart_0+0x1dc>
   91ff0:	93019f03 	ldbu	r12,1660(r18)
   91ff4:	9c059507 	ldb	r16,5716(r19)
   91ff8:	00000002 	0x2
   91ffc:	00000028 	cmpgeui	zero,zero,0
   92000:	00000044 	movi	zero,1
   92004:	0008d52c 	andhi	zero,zero,9044
   92008:	00000660 	cmpeqi	zero,zero,25
   9200c:	400e4400 	call	400e440 <__alt_mem_Nios_LCD_Camera_Component_0_Touchpanel+0x3f09000>
   92010:	92099170 	cmpltui	r8,r18,9797
   92014:	96069408 	cmpgei	et,r18,6736
   92018:	9c039704 	addi	r16,r19,3676
   9201c:	90019f02 	0x90019f02
   92020:	9507930a 	0x9507930a
   92024:	00000005 	stb	zero,0(zero)
   92028:	00091da8 	cmpgeui	zero,zero,9334
