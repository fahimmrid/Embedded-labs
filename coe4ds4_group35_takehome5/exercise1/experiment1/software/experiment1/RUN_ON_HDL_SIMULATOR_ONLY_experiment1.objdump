
RUN_ON_HDL_SIMULATOR_ONLY_experiment1.elf:     file format elf32-littlenios2
RUN_ON_HDL_SIMULATOR_ONLY_experiment1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000201b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x0000cfa8 memsz 0x0000cfa8 flags r-x
    LOAD off    0x0000dfc8 vaddr 0x0002cfc8 paddr 0x0002ea24 align 2**12
         filesz 0x00001a5c memsz 0x00001a5c flags rw-
    LOAD off    0x00010480 vaddr 0x00030480 paddr 0x00030480 align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000ca1c  000201b4  000201b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003f8  0002cbd0  0002cbd0  0000dbd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  0002cfc8  0002ea24  0000dfc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  00030480  00030480  00010480  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0000fa24  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000cb8  00000000  00000000  0000fa48  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001444  00000000  00000000  00010700  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00022de9  00000000  00000000  00011b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007a17  00000000  00000000  0003492d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00013f3d  00000000  00000000  0003c344  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001988  00000000  00000000  00050284  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000226e  00000000  00000000  00051c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000bf61  00000000  00000000  00053e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009e0  00000000  00000000  0005fde0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000636f4  2**0
                  CONTENTS, READONLY
 17 .cpu          00000005  00000000  00000000  000636f7  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000636fc  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000636fd  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000b  00000000  00000000  000636fe  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000b  00000000  00000000  00063709  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000b  00000000  00000000  00063714  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 0000000b  00000000  00000000  0006371f  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 00000024  00000000  00000000  0006372a  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     0003d805  00000000  00000000  0006374e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
000201b4 l    d  .text	00000000 .text
0002cbd0 l    d  .rodata	00000000 .rodata
0002cfc8 l    d  .rwdata	00000000 .rwdata
00030480 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000201cc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 PB_button.c
00000000 l    df *ABS*	00000000 custom_counter.c
00000000 l    df *ABS*	00000000 experiment1.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000207e8 l     F .text	00000058 __sprint_r
0002ccf6 l     O .rodata	00000010 blanks.3452
0002cce6 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00022864 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0002428c l     F .text	00000058 std
00024398 l     F .text	00000008 __fp_lock
000243a0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0002cfc8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0002e9f0 l     O .rwdata	00000004 charset
0002cd2c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0002ce74 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0002874c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00029878 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0002a17c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0002a1dc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0002a2e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0002a5c4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0002a6a4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0002a804 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0002aa34 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0002ea18 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0002acec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002d984 l     O .rwdata	00001060 jtag_uart_0
0002adc4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0002b004 l     F .text	00000228 altera_avalon_jtag_uart_irq
0002b22c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002bacc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0002bedc l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0002c02c l     F .text	000000f8 alt_file_locked
0002c2b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0002c94c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0002cb00 l     F .text	00000040 alt_sim_halt
0002607c g     F .text	00000094 _mprec_log10
00026168 g     F .text	00000088 __any_on
00027920 g     F .text	00000070 _isatty_r
0002ce4c g     O .rodata	00000028 __mprec_tinytens
0002a864 g     F .text	0000006c alt_main
000206c0 g     F .text	000000a0 _puts_r
000304dc g     O .bss	00000100 alt_irq
00027990 g     F .text	00000078 _lseek_r
0002ea24 g       *ABS*	00000000 __flash_rwdata_start
0002926c g     F .text	00000088 __eqdf2
0003076c g       *ABS*	00000000 __alt_heap_start
00020648 g     F .text	00000044 printf
000273d8 g     F .text	00000068 __sseek
000242f4 g     F .text	000000a4 __sinit
00025000 g     F .text	00000084 _setlocale_r
000243f4 g     F .text	0000009c __sfmoreglue
0002a8f0 g     F .text	00000020 __malloc_unlock
00020274 g     F .text	00000038 KEY3_Pressed
00025af8 g     F .text	000000e0 memmove
000243e4 g     F .text	00000010 _cleanup
000261f0 g     F .text	000000bc _Balloc
000204c8 g     F .text	00000028 read_counter_interrupt
0002937c g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
000278ac g     F .text	00000074 _fstat_r
00030498 g     O .bss	00000004 errno
000304a4 g     O .bss	00000004 alt_argv
000369e4 g       *ABS*	00000000 _gp
0002d804 g     O .rwdata	00000180 alt_fd_list
0002c4d4 g     F .text	00000094 alt_find_dev
00025a58 g     F .text	000000a0 memcpy
000243d8 g     F .text	0000000c _cleanup_r
00029514 g     F .text	000000f8 __floatsidf
0002bfb4 g     F .text	00000078 alt_io_redirect
0002948c g     F .text	00000088 __ltdf2
000203cc g     F .text	0000005c handle_counter_expire_interrupts
0002cbd0 g       *ABS*	00000000 __DTOR_END__
00020760 g     F .text	00000014 puts
00025fcc g     F .text	000000b0 __ratio
0002b444 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0002068c g     F .text	00000034 _printf_r
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000299b4 g     F .text	00000008 __udivsi3
0002a500 g     F .text	000000c4 isatty
0002cd5c g     O .rodata	000000c8 __mprec_tens
00024fdc g     F .text	00000008 __locale_charset
0003048c g     O .bss	00000004 __malloc_top_pad
0002e9ec g     O .rwdata	00000004 __mb_cur_max
00024fe4 g     F .text	0000000c _localeconv_r
00026954 g     F .text	0000003c __i2b
000249c0 g     F .text	0000049c __sfvwrite_r
00027360 g     F .text	00000070 _sbrk_r
00027a08 g     F .text	00000078 _read_r
0002d3c8 g     O .rwdata	0000000c __lc_ctype
0002ea0c g     O .rwdata	00000004 alt_max_fd
00029e7c g     F .text	00000138 __unpack_d
00027788 g     F .text	00000110 _fclose_r
00024258 g     F .text	00000034 fflush
00030490 g     O .bss	00000004 __malloc_max_sbrked_mem
0002a340 g     F .text	000001c0 alt_irq_register
00028bdc g     F .text	00000074 __adddf3
00025eac g     F .text	00000120 __b2d
000280ec g     F .text	00000660 __umoddi3
0002a710 g     F .text	000000f4 lseek
0002e9e8 g     O .rwdata	00000004 _global_impure_ptr
00026cfc g     F .text	000005f4 _realloc_r
0003076c g       *ABS*	00000000 __bss_end
0002bde4 g     F .text	000000f8 alt_iic_isr_register
0002c3a8 g     F .text	0000010c alt_tick
00027a80 g     F .text	0000066c __udivdi3
0002ce24 g     O .rodata	00000028 __mprec_bigtens
00026bdc g     F .text	00000120 __s2b
000296e4 g     F .text	00000194 __floatunsidf
00025dcc g     F .text	00000060 __mcmp
000243c0 g     F .text	00000018 __fp_lock_all
0002bd9c g     F .text	00000048 alt_ic_irq_enabled
0002c310 g     F .text	00000098 alt_alarm_stop
0003049c g     O .bss	00000004 alt_irq_active
000200ec g     F .exceptions	000000c8 alt_irq_handler
0002d7dc g     O .rwdata	00000028 alt_dev_null
0002023c g     F .text	00000038 KEY2_Pressed
0002b9fc g     F .text	0000001c alt_dcache_flush_all
00025c98 g     F .text	00000070 __hi0bits
0002960c g     F .text	000000d8 __fixdfsi
0002ea24 g       *ABS*	00000000 __ram_rwdata_end
0002ea04 g     O .rwdata	00000008 alt_dev_list
0002abc8 g     F .text	00000124 write
0002cfc8 g       *ABS*	00000000 __ram_rodata_end
0002a208 g     F .text	000000d8 fstat
00026abc g     F .text	00000120 __pow5mult
00030480 g     O .bss	00000004 __nlocale_changed
000299bc g     F .text	00000008 __umodsi3
0003076c g       *ABS*	00000000 end
0002af44 g     F .text	000000c0 altera_avalon_jtag_uart_init
0002cbcc g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
00029ae8 g     F .text	00000080 __clzsi2
0002b668 g     F .text	00000240 altera_avalon_jtag_uart_write
000242e4 g     F .text	00000004 __sfp_lock_acquire
00025974 g     F .text	000000e4 memchr
00020840 g     F .text	00001ec4 ___vfprintf_internal_r
000246ac g     F .text	00000314 _free_r
0002c950 g     F .text	000001b0 __call_exitprocs
00030484 g     O .bss	00000004 __mlocale_changed
0002e9f8 g     O .rwdata	00000004 __malloc_sbrk_base
000201b4 g     F .text	0000001c _start
000304ac g     O .bss	00000004 _alt_tick_rate
000265b4 g     F .text	0000014c __lshift
000304b0 g     O .bss	00000004 _alt_nticks
0002a910 g     F .text	00000124 read
0002ad80 g     F .text	00000044 alt_sys_init
0002c818 g     F .text	00000134 __register_exitproc
00026700 g     F .text	00000254 __multiply
0002b2dc g     F .text	00000074 altera_avalon_jtag_uart_close
00020610 g     F .text	00000038 __mulsi3
0002cfc8 g       *ABS*	00000000 __ram_rwdata_start
0002cbd0 g       *ABS*	00000000 __ram_rodata_start
000304b4 g     O .bss	00000028 __malloc_current_mallinfo
000262ac g     F .text	0000017c __d2b
000201f8 g     F .text	00000044 KEY1_Pressed
0002adfc g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0002c688 g     F .text	000000d0 alt_get_fd
00029fb4 g     F .text	000000c8 __fpcmp_parts_d
00027718 g     F .text	00000070 _close_r
0002c7a4 g     F .text	00000074 memcmp
0002aeac g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0003076c g       *ABS*	00000000 __alt_stack_base
0002aef4 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00022728 g     F .text	0000013c __swsetup_r
00029014 g     F .text	00000258 __divdf3
00024490 g     F .text	000000f0 __sfp
00026110 g     F .text	00000058 __copybits
0002d3d4 g     O .rwdata	00000408 __malloc_av_
000242f0 g     F .text	00000004 __sinit_lock_release
00028c50 g     F .text	000003c4 __muldf3
000274bc g     F .text	00000060 __sread
0002c568 g     F .text	00000120 alt_find_file
0002ba18 g     F .text	000000b4 alt_dev_llist_insert
0002a8d0 g     F .text	00000020 __malloc_lock
0002ab0c g     F .text	000000bc sbrk
0002405c g     F .text	000001fc _fflush_r
00027650 g     F .text	000000c8 _calloc_r
00030480 g       *ABS*	00000000 __bss_start
00025bd8 g     F .text	00000098 memset
0002059c g     F .text	00000074 main
000304a8 g     O .bss	00000004 alt_envp
00030494 g     O .bss	00000004 __malloc_max_total_mem
0002ae54 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
000273d0 g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
00020558 g     F .text	00000044 init_counter_irq
00027898 g     F .text	00000014 fclose
000305dc g     O .bss	00000190 _atexit0
00022aa8 g     F .text	000015b4 _dtoa_r
00025234 g     F .text	00000740 _malloc_r
0002ea10 g     O .rwdata	00000004 alt_errno
00024f24 g     F .text	000000b8 _fwalk
000298f4 g     F .text	00000060 __divsi3
0002ce80 g     O .rodata	00000014 __thenan_df
00024580 g     F .text	0000012c _malloc_trim_r
0002cbd0 g       *ABS*	00000000 __CTOR_END__
0002751c g     F .text	000000bc strcmp
0002cbd0 g       *ABS*	00000000 __flash_rodata_start
0002cbd0 g       *ABS*	00000000 __DTOR_LIST__
000292f4 g     F .text	00000088 __nedf2
0002ad4c g     F .text	00000034 alt_irq_init
0002aa94 g     F .text	00000078 alt_release_fd
00020378 g     F .text	00000054 init_button_irq
0002ce94 g     O .rodata	00000100 __clz_tab
00030488 g     O .bss	00000004 _PathLocale
00020428 g     F .text	00000078 reset_counter
0002c758 g     F .text	00000014 atexit
000275d8 g     F .text	00000078 _write_r
00025084 g     F .text	0000001c setlocale
0002e9e4 g     O .rwdata	00000004 _impure_ptr
000304a0 g     O .bss	00000004 alt_argc
0002bb90 g     F .text	00000064 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00025e2c g     F .text	00000080 __ulp
000272f0 g     F .text	00000040 __isinfd
000243a8 g     F .text	00000018 __fp_unlock_all
0002e9fc g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00024ff0 g     F .text	00000010 localeconv
0002bc10 g     F .text	00000050 alt_ic_isr_register
0002ea24 g       *ABS*	00000000 _edata
000201d0 g     F .text	00000028 KEY0_Pressed
0003076c g       *ABS*	00000000 _end
000201b4 g       *ABS*	00000000 __ram_exceptions_end
0002b350 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0002bcfc g     F .text	000000a0 alt_ic_irq_disable
00027440 g     F .text	0000007c __swrite
0002e9f4 g     O .rwdata	00000004 __malloc_trim_threshold
0002c4b4 g     F .text	00000020 altera_nios2_qsys_irq_init
0002c76c g     F .text	00000038 exit
00024e5c g     F .text	000000c8 _fwalk_reent
000204f0 g     F .text	00000068 load_counter_config
00026428 g     F .text	0000018c __mdiff
00029954 g     F .text	00000060 __modsi3
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
000242e8 g     F .text	00000004 __sfp_lock_release
0002cb40 g     F .text	00000020 _exit
00027330 g     F .text	00000030 __isnand
0002b8a8 g     F .text	00000154 alt_alarm_start
000204a0 g     F .text	00000028 read_counter
000299c4 g     F .text	00000124 __muldi3
000250a0 g     F .text	00000194 __smakebuf_r
00020774 g     F .text	00000074 strlen
0002c124 g     F .text	0000018c open
00029404 g     F .text	00000088 __gedf2
0002bbf4 g     F .text	0000001c alt_icache_flush_all
0002ea14 g     O .rwdata	00000004 alt_priority_mask
0002bc60 g     F .text	0000009c alt_ic_irq_enable
00022704 g     F .text	00000024 __vfprintf_internal
00028b5c g     F .text	00000080 __subdf3
00025d08 g     F .text	000000c4 __lo0bits
0002ea1c g     O .rwdata	00000008 alt_alarm_list
0002bb2c g     F .text	00000064 _do_ctors
000202ac g     F .text	000000cc handle_button_interrupts
0002a07c g     F .text	00000100 close
0002a624 g     F .text	00000080 alt_load
00029b68 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
000242ec g     F .text	00000004 __sinit_lock_acquire
00026990 g     F .text	0000012c __multadd
00025c70 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08406d14 	ori	at,at,436
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   20044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200ec0 	call	200ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000306 	br	20098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   2008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   20094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   20098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   2009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   200c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   200e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200e8:	ef80083a 	eret

000200ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200ec:	defff904 	addi	sp,sp,-28
   200f0:	dfc00615 	stw	ra,24(sp)
   200f4:	df000515 	stw	fp,20(sp)
   200f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   200fc:	0005313a 	rdctl	r2,ipending
   20100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   20104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   20108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   2010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20110:	00800044 	movi	r2,1
   20114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   20118:	e0ffff17 	ldw	r3,-4(fp)
   2011c:	e0bffe17 	ldw	r2,-8(fp)
   20120:	1884703a 	and	r2,r3,r2
   20124:	1005003a 	cmpeq	r2,r2,zero
   20128:	1000161e 	bne	r2,zero,20184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2012c:	e0bffd17 	ldw	r2,-12(fp)
   20130:	00c000f4 	movhi	r3,3
   20134:	18c13704 	addi	r3,r3,1244
   20138:	100490fa 	slli	r2,r2,3
   2013c:	10c5883a 	add	r2,r2,r3
   20140:	11400017 	ldw	r5,0(r2)
   20144:	e0bffd17 	ldw	r2,-12(fp)
   20148:	00c000f4 	movhi	r3,3
   2014c:	18c13704 	addi	r3,r3,1244
   20150:	100490fa 	slli	r2,r2,3
   20154:	10c5883a 	add	r2,r2,r3
   20158:	10800104 	addi	r2,r2,4
   2015c:	11000017 	ldw	r4,0(r2)
   20160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20164:	0005313a 	rdctl	r2,ipending
   20168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   2016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   20170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   20174:	e0bfff17 	ldw	r2,-4(fp)
   20178:	1004c03a 	cmpne	r2,r2,zero
   2017c:	103fe31e 	bne	r2,zero,2010c <alt_irq_handler+0x20>
   20180:	00000706 	br	201a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   20184:	e0bffe17 	ldw	r2,-8(fp)
   20188:	1085883a 	add	r2,r2,r2
   2018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   20190:	e0bffd17 	ldw	r2,-12(fp)
   20194:	10800044 	addi	r2,r2,1
   20198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   2019c:	003fde06 	br	20118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   201a0:	e037883a 	mov	sp,fp
   201a4:	dfc00117 	ldw	ra,4(sp)
   201a8:	df000017 	ldw	fp,0(sp)
   201ac:	dec00204 	addi	sp,sp,8
   201b0:	f800283a 	ret

Disassembly of section .text:

000201b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   201b4:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   201b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   201bc:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   201c0:	d69a7914 	ori	gp,gp,27108
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   201c4:	002a6240 	call	2a624 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   201c8:	002a8640 	call	2a864 <alt_main>

000201cc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   201cc:	003fff06 	br	201cc <alt_after_alt_main>

000201d0 <KEY0_Pressed>:
// McMaster University
// Ontario, Canada

#include "define.h"

void KEY0_Pressed() {
   201d0:	defffe04 	addi	sp,sp,-8
   201d4:	dfc00115 	stw	ra,4(sp)
   201d8:	df000015 	stw	fp,0(sp)
   201dc:	d839883a 	mov	fp,sp
	reset_counter();
   201e0:	00204280 	call	20428 <reset_counter>
}
   201e4:	e037883a 	mov	sp,fp
   201e8:	dfc00117 	ldw	ra,4(sp)
   201ec:	df000017 	ldw	fp,0(sp)
   201f0:	dec00204 	addi	sp,sp,8
   201f4:	f800283a 	ret

000201f8 <KEY1_Pressed>:

void KEY1_Pressed() {
   201f8:	defffe04 	addi	sp,sp,-8
   201fc:	dfc00115 	stw	ra,4(sp)
   20200:	df000015 	stw	fp,0(sp)
   20204:	d839883a 	mov	fp,sp
	load_counter_config((IORD(SWITCH_I_BASE, 0) & 0x18000) >> 15);
   20208:	00800134 	movhi	r2,4
   2020c:	10840004 	addi	r2,r2,4096
   20210:	10c00037 	ldwio	r3,0(r2)
   20214:	008000b4 	movhi	r2,2
   20218:	10a00004 	addi	r2,r2,-32768
   2021c:	1884703a 	and	r2,r3,r2
   20220:	1009d3fa 	srai	r4,r2,15
   20224:	00204f00 	call	204f0 <load_counter_config>
}
   20228:	e037883a 	mov	sp,fp
   2022c:	dfc00117 	ldw	ra,4(sp)
   20230:	df000017 	ldw	fp,0(sp)
   20234:	dec00204 	addi	sp,sp,8
   20238:	f800283a 	ret

0002023c <KEY2_Pressed>:

void KEY2_Pressed() {
   2023c:	defffe04 	addi	sp,sp,-8
   20240:	dfc00115 	stw	ra,4(sp)
   20244:	df000015 	stw	fp,0(sp)
   20248:	d839883a 	mov	fp,sp
	printf("Counter value = %d\n", read_counter());
   2024c:	00204a00 	call	204a0 <read_counter>
   20250:	100b883a 	mov	r5,r2
   20254:	010000f4 	movhi	r4,3
   20258:	2132f404 	addi	r4,r4,-13360
   2025c:	00206480 	call	20648 <printf>
}
   20260:	e037883a 	mov	sp,fp
   20264:	dfc00117 	ldw	ra,4(sp)
   20268:	df000017 	ldw	fp,0(sp)
   2026c:	dec00204 	addi	sp,sp,8
   20270:	f800283a 	ret

00020274 <KEY3_Pressed>:

void KEY3_Pressed() {
   20274:	defffe04 	addi	sp,sp,-8
   20278:	dfc00115 	stw	ra,4(sp)
   2027c:	df000015 	stw	fp,0(sp)
   20280:	d839883a 	mov	fp,sp
	printf("IRQ value: %d\n", read_counter_interrupt());
   20284:	00204c80 	call	204c8 <read_counter_interrupt>
   20288:	100b883a 	mov	r5,r2
   2028c:	010000f4 	movhi	r4,3
   20290:	2132f904 	addi	r4,r4,-13340
   20294:	00206480 	call	20648 <printf>
}
   20298:	e037883a 	mov	sp,fp
   2029c:	dfc00117 	ldw	ra,4(sp)
   202a0:	df000017 	ldw	fp,0(sp)
   202a4:	dec00204 	addi	sp,sp,8
   202a8:	f800283a 	ret

000202ac <handle_button_interrupts>:

// ISR when any PB is pressed
void handle_button_interrupts()
{
   202ac:	defffd04 	addi	sp,sp,-12
   202b0:	dfc00215 	stw	ra,8(sp)
   202b4:	df000115 	stw	fp,4(sp)
   202b8:	df000104 	addi	fp,sp,4
	IOWR(LED_GREEN_O_BASE, 0, IORD(PUSH_BUTTON_I_BASE, 3)*IORD(PUSH_BUTTON_I_BASE, 3));
   202bc:	00800134 	movhi	r2,4
   202c0:	10840704 	addi	r2,r2,4124
   202c4:	11000037 	ldwio	r4,0(r2)
   202c8:	00800134 	movhi	r2,4
   202cc:	10840704 	addi	r2,r2,4124
   202d0:	11400037 	ldwio	r5,0(r2)
   202d4:	00206100 	call	20610 <__mulsi3>
   202d8:	1007883a 	mov	r3,r2
   202dc:	00800134 	movhi	r2,4
   202e0:	10840c04 	addi	r2,r2,4144
   202e4:	10c00035 	stwio	r3,0(r2)
	
	switch(IORD(PUSH_BUTTON_I_BASE, 3)) {
   202e8:	00800134 	movhi	r2,4
   202ec:	10840704 	addi	r2,r2,4124
   202f0:	10800037 	ldwio	r2,0(r2)
   202f4:	e0bfff15 	stw	r2,-4(fp)
   202f8:	e0ffff17 	ldw	r3,-4(fp)
   202fc:	188000a0 	cmpeqi	r2,r3,2
   20300:	1000101e 	bne	r2,zero,20344 <handle_button_interrupts+0x98>
   20304:	e0ffff17 	ldw	r3,-4(fp)
   20308:	188000c8 	cmpgei	r2,r3,3
   2030c:	1000041e 	bne	r2,zero,20320 <handle_button_interrupts+0x74>
   20310:	e0ffff17 	ldw	r3,-4(fp)
   20314:	18800060 	cmpeqi	r2,r3,1
   20318:	1000081e 	bne	r2,zero,2033c <handle_button_interrupts+0x90>
   2031c:	00000e06 	br	20358 <handle_button_interrupts+0xac>
   20320:	e0ffff17 	ldw	r3,-4(fp)
   20324:	18800120 	cmpeqi	r2,r3,4
   20328:	1000081e 	bne	r2,zero,2034c <handle_button_interrupts+0xa0>
   2032c:	e0ffff17 	ldw	r3,-4(fp)
   20330:	18800220 	cmpeqi	r2,r3,8
   20334:	1000071e 	bne	r2,zero,20354 <handle_button_interrupts+0xa8>
   20338:	00000706 	br	20358 <handle_button_interrupts+0xac>
	case 1: KEY0_Pressed(); break;
   2033c:	00201d00 	call	201d0 <KEY0_Pressed>
   20340:	00000506 	br	20358 <handle_button_interrupts+0xac>
	case 2: KEY1_Pressed(); break;
   20344:	00201f80 	call	201f8 <KEY1_Pressed>
   20348:	00000306 	br	20358 <handle_button_interrupts+0xac>
	case 4: KEY2_Pressed(); break;
   2034c:	002023c0 	call	2023c <KEY2_Pressed>
   20350:	00000106 	br	20358 <handle_button_interrupts+0xac>
	case 8: KEY3_Pressed(); break;
   20354:	00202740 	call	20274 <KEY3_Pressed>
	}
	IOWR(PUSH_BUTTON_I_BASE, 3, 0x0);
   20358:	00800134 	movhi	r2,4
   2035c:	10840704 	addi	r2,r2,4124
   20360:	10000035 	stwio	zero,0(r2)
}
   20364:	e037883a 	mov	sp,fp
   20368:	dfc00117 	ldw	ra,4(sp)
   2036c:	df000017 	ldw	fp,0(sp)
   20370:	dec00204 	addi	sp,sp,8
   20374:	f800283a 	ret

00020378 <init_button_irq>:

// Function for initializing the ISR of the PBs
// The PBs are setup to generate interrupt on falling edge,
// and the interrupt is captured when the edge comes
void init_button_irq() {
   20378:	defffe04 	addi	sp,sp,-8
   2037c:	dfc00115 	stw	ra,4(sp)
   20380:	df000015 	stw	fp,0(sp)
   20384:	d839883a 	mov	fp,sp
  // Enable all 4 button interrupts
  IOWR(PUSH_BUTTON_I_BASE, 2, BUTTON_INT_MASK);
   20388:	00800134 	movhi	r2,4
   2038c:	10840604 	addi	r2,r2,4120
   20390:	00c003c4 	movi	r3,15
   20394:	10c00035 	stwio	r3,0(r2)

  // Reset the edge capture register
  IOWR(PUSH_BUTTON_I_BASE, 3, 0x0);
   20398:	00800134 	movhi	r2,4
   2039c:	10840704 	addi	r2,r2,4124
   203a0:	10000035 	stwio	zero,0(r2)

  // Register the interrupt handler
  alt_irq_register(PUSH_BUTTON_I_IRQ, NULL, (void*)handle_button_interrupts );
   203a4:	01000044 	movi	r4,1
   203a8:	000b883a 	mov	r5,zero
   203ac:	018000b4 	movhi	r6,2
   203b0:	3180ab04 	addi	r6,r6,684
   203b4:	002a3400 	call	2a340 <alt_irq_register>
}
   203b8:	e037883a 	mov	sp,fp
   203bc:	dfc00117 	ldw	ra,4(sp)
   203c0:	df000017 	ldw	fp,0(sp)
   203c4:	dec00204 	addi	sp,sp,8
   203c8:	f800283a 	ret

000203cc <handle_counter_expire_interrupts>:

#include "define.h"

// ISR when the counter is expired
void handle_counter_expire_interrupts()
{
   203cc:	defffe04 	addi	sp,sp,-8
   203d0:	dfc00115 	stw	ra,4(sp)
   203d4:	df000015 	stw	fp,0(sp)
   203d8:	d839883a 	mov	fp,sp
	IOWR(LED_RED_O_BASE, 0, 0x7);
   203dc:	00c00134 	movhi	r3,4
   203e0:	18c40804 	addi	r3,r3,4128
   203e4:	008001c4 	movi	r2,7
   203e8:	18800035 	stwio	r2,0(r3)

	printf("Brazil NFT \n");
   203ec:	010000f4 	movhi	r4,3
   203f0:	2132fd04 	addi	r4,r4,-13324
   203f4:	00207600 	call	20760 <puts>
	
	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 2, 0);
   203f8:	00800134 	movhi	r2,4
   203fc:	10841204 	addi	r2,r2,4168
   20400:	10000035 	stwio	zero,0(r2)

	IOWR(LED_RED_O_BASE, 0, 0xF);
   20404:	00c00134 	movhi	r3,4
   20408:	18c40804 	addi	r3,r3,4128
   2040c:	008003c4 	movi	r2,15
   20410:	18800035 	stwio	r2,0(r3)
}
   20414:	e037883a 	mov	sp,fp
   20418:	dfc00117 	ldw	ra,4(sp)
   2041c:	df000017 	ldw	fp,0(sp)
   20420:	dec00204 	addi	sp,sp,8
   20424:	f800283a 	ret

00020428 <reset_counter>:

void reset_counter() {
   20428:	defffe04 	addi	sp,sp,-8
   2042c:	dfc00115 	stw	ra,4(sp)
   20430:	df000015 	stw	fp,0(sp)
   20434:	d839883a 	mov	fp,sp
	IOWR(LED_RED_O_BASE, 0, 0xB);
   20438:	00c00134 	movhi	r3,4
   2043c:	18c40804 	addi	r3,r3,4128
   20440:	008002c4 	movi	r2,11
   20444:	18800035 	stwio	r2,0(r3)
	
	printf("Resetting counter value\n");
   20448:	010000f4 	movhi	r4,3
   2044c:	21330004 	addi	r4,r4,-13312
   20450:	00207600 	call	20760 <puts>

	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 1, 1);
   20454:	00c00134 	movhi	r3,4
   20458:	18c41104 	addi	r3,r3,4164
   2045c:	00800044 	movi	r2,1
   20460:	18800035 	stwio	r2,0(r3)
	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 1, 0);
   20464:	00800134 	movhi	r2,4
   20468:	10841104 	addi	r2,r2,4164
   2046c:	10000035 	stwio	zero,0(r2)

	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 2, 0);
   20470:	00800134 	movhi	r2,4
   20474:	10841204 	addi	r2,r2,4168
   20478:	10000035 	stwio	zero,0(r2)

	IOWR(LED_RED_O_BASE, 0, 0xF);
   2047c:	00c00134 	movhi	r3,4
   20480:	18c40804 	addi	r3,r3,4128
   20484:	008003c4 	movi	r2,15
   20488:	18800035 	stwio	r2,0(r3)
}
   2048c:	e037883a 	mov	sp,fp
   20490:	dfc00117 	ldw	ra,4(sp)
   20494:	df000017 	ldw	fp,0(sp)
   20498:	dec00204 	addi	sp,sp,8
   2049c:	f800283a 	ret

000204a0 <read_counter>:

int read_counter() {
   204a0:	deffff04 	addi	sp,sp,-4
   204a4:	df000015 	stw	fp,0(sp)
   204a8:	d839883a 	mov	fp,sp
	return IORD(CUSTOM_COUNTER_COMPONENT_0_BASE, 0);
   204ac:	00800134 	movhi	r2,4
   204b0:	10841004 	addi	r2,r2,4160
   204b4:	10800037 	ldwio	r2,0(r2)
}
   204b8:	e037883a 	mov	sp,fp
   204bc:	df000017 	ldw	fp,0(sp)
   204c0:	dec00104 	addi	sp,sp,4
   204c4:	f800283a 	ret

000204c8 <read_counter_interrupt>:

int read_counter_interrupt() {
   204c8:	deffff04 	addi	sp,sp,-4
   204cc:	df000015 	stw	fp,0(sp)
   204d0:	d839883a 	mov	fp,sp
	return IORD(CUSTOM_COUNTER_COMPONENT_0_BASE, 2);
   204d4:	00800134 	movhi	r2,4
   204d8:	10841204 	addi	r2,r2,4168
   204dc:	10800037 	ldwio	r2,0(r2)
}
   204e0:	e037883a 	mov	sp,fp
   204e4:	df000017 	ldw	fp,0(sp)
   204e8:	dec00104 	addi	sp,sp,4
   204ec:	f800283a 	ret

000204f0 <load_counter_config>:

void load_counter_config(int config) {
   204f0:	defffd04 	addi	sp,sp,-12
   204f4:	dfc00215 	stw	ra,8(sp)
   204f8:	df000115 	stw	fp,4(sp)
   204fc:	df000104 	addi	fp,sp,4
   20500:	e13fff15 	stw	r4,-4(fp)
	IOWR(LED_RED_O_BASE, 0, 0xD);
   20504:	00c00134 	movhi	r3,4
   20508:	18c40804 	addi	r3,r3,4128
   2050c:	00800344 	movi	r2,13
   20510:	18800035 	stwio	r2,0(r3)
	printf("Loading counter value %d\n", config);
   20514:	010000f4 	movhi	r4,3
   20518:	21330604 	addi	r4,r4,-13288
   2051c:	e17fff17 	ldw	r5,-4(fp)
   20520:	00206480 	call	20648 <printf>
	
	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 3, config);
   20524:	00c00134 	movhi	r3,4
   20528:	18c41304 	addi	r3,r3,4172
   2052c:	e0bfff17 	ldw	r2,-4(fp)
   20530:	18800035 	stwio	r2,0(r3)

	IOWR(LED_RED_O_BASE, 0, 0xF);
   20534:	00c00134 	movhi	r3,4
   20538:	18c40804 	addi	r3,r3,4128
   2053c:	008003c4 	movi	r2,15
   20540:	18800035 	stwio	r2,0(r3)
}
   20544:	e037883a 	mov	sp,fp
   20548:	dfc00117 	ldw	ra,4(sp)
   2054c:	df000017 	ldw	fp,0(sp)
   20550:	dec00204 	addi	sp,sp,8
   20554:	f800283a 	ret

00020558 <init_counter_irq>:

// Function for initializing the ISR of the Counter
void init_counter_irq() {
   20558:	defffe04 	addi	sp,sp,-8
   2055c:	dfc00115 	stw	ra,4(sp)
   20560:	df000015 	stw	fp,0(sp)
   20564:	d839883a 	mov	fp,sp
	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 2, 0);
   20568:	00800134 	movhi	r2,4
   2056c:	10841204 	addi	r2,r2,4168
   20570:	10000035 	stwio	zero,0(r2)

	alt_irq_register(CUSTOM_COUNTER_COMPONENT_0_IRQ, NULL, (void*)handle_counter_expire_interrupts );
   20574:	01000084 	movi	r4,2
   20578:	000b883a 	mov	r5,zero
   2057c:	018000b4 	movhi	r6,2
   20580:	3180f304 	addi	r6,r6,972
   20584:	002a3400 	call	2a340 <alt_irq_register>
}
   20588:	e037883a 	mov	sp,fp
   2058c:	dfc00117 	ldw	ra,4(sp)
   20590:	df000017 	ldw	fp,0(sp)
   20594:	dec00204 	addi	sp,sp,8
   20598:	f800283a 	ret

0002059c <main>:
// Ontario, Canada

#include "define.h"

int main()
{
   2059c:	defffe04 	addi	sp,sp,-8
   205a0:	dfc00115 	stw	ra,4(sp)
   205a4:	df000015 	stw	fp,0(sp)
   205a8:	d839883a 	mov	fp,sp
	printf("Start main...\n");
   205ac:	010000f4 	movhi	r4,3
   205b0:	21330d04 	addi	r4,r4,-13260
   205b4:	00207600 	call	20760 <puts>

	IOWR(LED_GREEN_O_BASE, 0, 0x0);
   205b8:	00800134 	movhi	r2,4
   205bc:	10840c04 	addi	r2,r2,4144
   205c0:	10000035 	stwio	zero,0(r2)
	IOWR(LED_RED_O_BASE, 0, 0x0);
   205c4:	00800134 	movhi	r2,4
   205c8:	10840804 	addi	r2,r2,4128
   205cc:	10000035 	stwio	zero,0(r2)

	init_button_irq();
   205d0:	00203780 	call	20378 <init_button_irq>
	printf("PB initialized...\n");
   205d4:	010000f4 	movhi	r4,3
   205d8:	21331104 	addi	r4,r4,-13244
   205dc:	00207600 	call	20760 <puts>
	
	init_counter_irq();
   205e0:	00205580 	call	20558 <init_counter_irq>
	printf("Counter IRQ initialized...\n");
   205e4:	010000f4 	movhi	r4,3
   205e8:	21331604 	addi	r4,r4,-13224
   205ec:	00207600 	call	20760 <puts>
	
	printf("System is up!\n");
   205f0:	010000f4 	movhi	r4,3
   205f4:	21331d04 	addi	r4,r4,-13196
   205f8:	00207600 	call	20760 <puts>

	IOWR(LED_RED_O_BASE, 0, 0xF);
   205fc:	00c00134 	movhi	r3,4
   20600:	18c40804 	addi	r3,r3,4128
   20604:	008003c4 	movi	r2,15
   20608:	18800035 	stwio	r2,0(r3)
		
	while (1);
   2060c:	003fff06 	br	2060c <main+0x70>

00020610 <__mulsi3>:
   20610:	20000a26 	beq	r4,zero,2063c <__mulsi3+0x2c>
   20614:	0007883a 	mov	r3,zero
   20618:	2080004c 	andi	r2,r4,1
   2061c:	1005003a 	cmpeq	r2,r2,zero
   20620:	2008d07a 	srli	r4,r4,1
   20624:	1000011e 	bne	r2,zero,2062c <__mulsi3+0x1c>
   20628:	1947883a 	add	r3,r3,r5
   2062c:	294b883a 	add	r5,r5,r5
   20630:	203ff91e 	bne	r4,zero,20618 <__mulsi3+0x8>
   20634:	1805883a 	mov	r2,r3
   20638:	f800283a 	ret
   2063c:	0007883a 	mov	r3,zero
   20640:	1805883a 	mov	r2,r3
   20644:	f800283a 	ret

00020648 <printf>:
   20648:	defffb04 	addi	sp,sp,-20
   2064c:	dfc00115 	stw	ra,4(sp)
   20650:	d9400215 	stw	r5,8(sp)
   20654:	d9800315 	stw	r6,12(sp)
   20658:	d9c00415 	stw	r7,16(sp)
   2065c:	008000f4 	movhi	r2,3
   20660:	10ba7904 	addi	r2,r2,-5660
   20664:	10c00017 	ldw	r3,0(r2)
   20668:	200b883a 	mov	r5,r4
   2066c:	d8800204 	addi	r2,sp,8
   20670:	19000217 	ldw	r4,8(r3)
   20674:	100d883a 	mov	r6,r2
   20678:	d8800015 	stw	r2,0(sp)
   2067c:	00227040 	call	22704 <__vfprintf_internal>
   20680:	dfc00117 	ldw	ra,4(sp)
   20684:	dec00504 	addi	sp,sp,20
   20688:	f800283a 	ret

0002068c <_printf_r>:
   2068c:	defffc04 	addi	sp,sp,-16
   20690:	dfc00115 	stw	ra,4(sp)
   20694:	d9800215 	stw	r6,8(sp)
   20698:	d9c00315 	stw	r7,12(sp)
   2069c:	280d883a 	mov	r6,r5
   206a0:	21400217 	ldw	r5,8(r4)
   206a4:	d8c00204 	addi	r3,sp,8
   206a8:	180f883a 	mov	r7,r3
   206ac:	d8c00015 	stw	r3,0(sp)
   206b0:	00208400 	call	20840 <___vfprintf_internal_r>
   206b4:	dfc00117 	ldw	ra,4(sp)
   206b8:	dec00404 	addi	sp,sp,16
   206bc:	f800283a 	ret

000206c0 <_puts_r>:
   206c0:	defff604 	addi	sp,sp,-40
   206c4:	dc400715 	stw	r17,28(sp)
   206c8:	2023883a 	mov	r17,r4
   206cc:	2809883a 	mov	r4,r5
   206d0:	dfc00915 	stw	ra,36(sp)
   206d4:	dcc00815 	stw	r19,32(sp)
   206d8:	2827883a 	mov	r19,r5
   206dc:	00207740 	call	20774 <strlen>
   206e0:	89400217 	ldw	r5,8(r17)
   206e4:	00c000f4 	movhi	r3,3
   206e8:	18f32104 	addi	r3,r3,-13180
   206ec:	01c00044 	movi	r7,1
   206f0:	12000044 	addi	r8,r2,1
   206f4:	d8c00515 	stw	r3,20(sp)
   206f8:	d9c00615 	stw	r7,24(sp)
   206fc:	d8c00304 	addi	r3,sp,12
   20700:	01c00084 	movi	r7,2
   20704:	8809883a 	mov	r4,r17
   20708:	d80d883a 	mov	r6,sp
   2070c:	d8c00015 	stw	r3,0(sp)
   20710:	dcc00315 	stw	r19,12(sp)
   20714:	da000215 	stw	r8,8(sp)
   20718:	d9c00115 	stw	r7,4(sp)
   2071c:	d8800415 	stw	r2,16(sp)
   20720:	00249c00 	call	249c0 <__sfvwrite_r>
   20724:	00ffffc4 	movi	r3,-1
   20728:	10000626 	beq	r2,zero,20744 <_puts_r+0x84>
   2072c:	1805883a 	mov	r2,r3
   20730:	dfc00917 	ldw	ra,36(sp)
   20734:	dcc00817 	ldw	r19,32(sp)
   20738:	dc400717 	ldw	r17,28(sp)
   2073c:	dec00a04 	addi	sp,sp,40
   20740:	f800283a 	ret
   20744:	00c00284 	movi	r3,10
   20748:	1805883a 	mov	r2,r3
   2074c:	dfc00917 	ldw	ra,36(sp)
   20750:	dcc00817 	ldw	r19,32(sp)
   20754:	dc400717 	ldw	r17,28(sp)
   20758:	dec00a04 	addi	sp,sp,40
   2075c:	f800283a 	ret

00020760 <puts>:
   20760:	008000f4 	movhi	r2,3
   20764:	10ba7904 	addi	r2,r2,-5660
   20768:	200b883a 	mov	r5,r4
   2076c:	11000017 	ldw	r4,0(r2)
   20770:	00206c01 	jmpi	206c0 <_puts_r>

00020774 <strlen>:
   20774:	208000cc 	andi	r2,r4,3
   20778:	2011883a 	mov	r8,r4
   2077c:	1000161e 	bne	r2,zero,207d8 <strlen+0x64>
   20780:	20c00017 	ldw	r3,0(r4)
   20784:	017fbff4 	movhi	r5,65279
   20788:	297fbfc4 	addi	r5,r5,-257
   2078c:	01e02074 	movhi	r7,32897
   20790:	39e02004 	addi	r7,r7,-32640
   20794:	1945883a 	add	r2,r3,r5
   20798:	11c4703a 	and	r2,r2,r7
   2079c:	00c6303a 	nor	r3,zero,r3
   207a0:	1886703a 	and	r3,r3,r2
   207a4:	18000c1e 	bne	r3,zero,207d8 <strlen+0x64>
   207a8:	280d883a 	mov	r6,r5
   207ac:	380b883a 	mov	r5,r7
   207b0:	21000104 	addi	r4,r4,4
   207b4:	20800017 	ldw	r2,0(r4)
   207b8:	1187883a 	add	r3,r2,r6
   207bc:	1946703a 	and	r3,r3,r5
   207c0:	0084303a 	nor	r2,zero,r2
   207c4:	10c4703a 	and	r2,r2,r3
   207c8:	103ff926 	beq	r2,zero,207b0 <strlen+0x3c>
   207cc:	20800007 	ldb	r2,0(r4)
   207d0:	10000326 	beq	r2,zero,207e0 <strlen+0x6c>
   207d4:	21000044 	addi	r4,r4,1
   207d8:	20800007 	ldb	r2,0(r4)
   207dc:	103ffd1e 	bne	r2,zero,207d4 <strlen+0x60>
   207e0:	2205c83a 	sub	r2,r4,r8
   207e4:	f800283a 	ret

000207e8 <__sprint_r>:
   207e8:	30800217 	ldw	r2,8(r6)
   207ec:	defffe04 	addi	sp,sp,-8
   207f0:	dc000015 	stw	r16,0(sp)
   207f4:	dfc00115 	stw	ra,4(sp)
   207f8:	3021883a 	mov	r16,r6
   207fc:	0007883a 	mov	r3,zero
   20800:	1000061e 	bne	r2,zero,2081c <__sprint_r+0x34>
   20804:	1805883a 	mov	r2,r3
   20808:	30000115 	stw	zero,4(r6)
   2080c:	dfc00117 	ldw	ra,4(sp)
   20810:	dc000017 	ldw	r16,0(sp)
   20814:	dec00204 	addi	sp,sp,8
   20818:	f800283a 	ret
   2081c:	00249c00 	call	249c0 <__sfvwrite_r>
   20820:	1007883a 	mov	r3,r2
   20824:	1805883a 	mov	r2,r3
   20828:	80000115 	stw	zero,4(r16)
   2082c:	80000215 	stw	zero,8(r16)
   20830:	dfc00117 	ldw	ra,4(sp)
   20834:	dc000017 	ldw	r16,0(sp)
   20838:	dec00204 	addi	sp,sp,8
   2083c:	f800283a 	ret

00020840 <___vfprintf_internal_r>:
   20840:	defea404 	addi	sp,sp,-1392
   20844:	dd815815 	stw	r22,1376(sp)
   20848:	dc015215 	stw	r16,1352(sp)
   2084c:	d9c15115 	stw	r7,1348(sp)
   20850:	dfc15b15 	stw	ra,1388(sp)
   20854:	df015a15 	stw	fp,1384(sp)
   20858:	ddc15915 	stw	r23,1380(sp)
   2085c:	dd415715 	stw	r21,1372(sp)
   20860:	dd015615 	stw	r20,1368(sp)
   20864:	dcc15515 	stw	r19,1364(sp)
   20868:	dc815415 	stw	r18,1360(sp)
   2086c:	dc415315 	stw	r17,1356(sp)
   20870:	282d883a 	mov	r22,r5
   20874:	3021883a 	mov	r16,r6
   20878:	d9014f15 	stw	r4,1340(sp)
   2087c:	0024fe40 	call	24fe4 <_localeconv_r>
   20880:	10800017 	ldw	r2,0(r2)
   20884:	d9c15117 	ldw	r7,1348(sp)
   20888:	d8814915 	stw	r2,1316(sp)
   2088c:	d8814f17 	ldw	r2,1340(sp)
   20890:	10000226 	beq	r2,zero,2089c <___vfprintf_internal_r+0x5c>
   20894:	10800e17 	ldw	r2,56(r2)
   20898:	10020d26 	beq	r2,zero,210d0 <___vfprintf_internal_r+0x890>
   2089c:	b080030b 	ldhu	r2,12(r22)
   208a0:	1080020c 	andi	r2,r2,8
   208a4:	10020e26 	beq	r2,zero,210e0 <___vfprintf_internal_r+0x8a0>
   208a8:	b0800417 	ldw	r2,16(r22)
   208ac:	10020c26 	beq	r2,zero,210e0 <___vfprintf_internal_r+0x8a0>
   208b0:	b200030b 	ldhu	r8,12(r22)
   208b4:	00800284 	movi	r2,10
   208b8:	40c0068c 	andi	r3,r8,26
   208bc:	18802f1e 	bne	r3,r2,2097c <___vfprintf_internal_r+0x13c>
   208c0:	b080038f 	ldh	r2,14(r22)
   208c4:	10002d16 	blt	r2,zero,2097c <___vfprintf_internal_r+0x13c>
   208c8:	b240038b 	ldhu	r9,14(r22)
   208cc:	b2800717 	ldw	r10,28(r22)
   208d0:	b2c00917 	ldw	r11,36(r22)
   208d4:	d9014f17 	ldw	r4,1340(sp)
   208d8:	dc402904 	addi	r17,sp,164
   208dc:	d8804004 	addi	r2,sp,256
   208e0:	00c10004 	movi	r3,1024
   208e4:	423fff4c 	andi	r8,r8,65533
   208e8:	800d883a 	mov	r6,r16
   208ec:	880b883a 	mov	r5,r17
   208f0:	da002c0d 	sth	r8,176(sp)
   208f4:	da402c8d 	sth	r9,178(sp)
   208f8:	da803015 	stw	r10,192(sp)
   208fc:	dac03215 	stw	r11,200(sp)
   20900:	d8802d15 	stw	r2,180(sp)
   20904:	d8c02e15 	stw	r3,184(sp)
   20908:	d8802915 	stw	r2,164(sp)
   2090c:	d8c02b15 	stw	r3,172(sp)
   20910:	d8002f15 	stw	zero,188(sp)
   20914:	00208400 	call	20840 <___vfprintf_internal_r>
   20918:	d8814b15 	stw	r2,1324(sp)
   2091c:	10000416 	blt	r2,zero,20930 <___vfprintf_internal_r+0xf0>
   20920:	d9014f17 	ldw	r4,1340(sp)
   20924:	880b883a 	mov	r5,r17
   20928:	002405c0 	call	2405c <_fflush_r>
   2092c:	1002321e 	bne	r2,zero,211f8 <___vfprintf_internal_r+0x9b8>
   20930:	d8802c0b 	ldhu	r2,176(sp)
   20934:	1080100c 	andi	r2,r2,64
   20938:	10000326 	beq	r2,zero,20948 <___vfprintf_internal_r+0x108>
   2093c:	b080030b 	ldhu	r2,12(r22)
   20940:	10801014 	ori	r2,r2,64
   20944:	b080030d 	sth	r2,12(r22)
   20948:	d8814b17 	ldw	r2,1324(sp)
   2094c:	dfc15b17 	ldw	ra,1388(sp)
   20950:	df015a17 	ldw	fp,1384(sp)
   20954:	ddc15917 	ldw	r23,1380(sp)
   20958:	dd815817 	ldw	r22,1376(sp)
   2095c:	dd415717 	ldw	r21,1372(sp)
   20960:	dd015617 	ldw	r20,1368(sp)
   20964:	dcc15517 	ldw	r19,1364(sp)
   20968:	dc815417 	ldw	r18,1360(sp)
   2096c:	dc415317 	ldw	r17,1356(sp)
   20970:	dc015217 	ldw	r16,1352(sp)
   20974:	dec15c04 	addi	sp,sp,1392
   20978:	f800283a 	ret
   2097c:	0005883a 	mov	r2,zero
   20980:	0007883a 	mov	r3,zero
   20984:	dd401904 	addi	r21,sp,100
   20988:	d8814215 	stw	r2,1288(sp)
   2098c:	802f883a 	mov	r23,r16
   20990:	d8c14315 	stw	r3,1292(sp)
   20994:	d8014b15 	stw	zero,1324(sp)
   20998:	d8014815 	stw	zero,1312(sp)
   2099c:	d8014415 	stw	zero,1296(sp)
   209a0:	d8014715 	stw	zero,1308(sp)
   209a4:	dd400c15 	stw	r21,48(sp)
   209a8:	d8000e15 	stw	zero,56(sp)
   209ac:	d8000d15 	stw	zero,52(sp)
   209b0:	b8800007 	ldb	r2,0(r23)
   209b4:	10001926 	beq	r2,zero,20a1c <___vfprintf_internal_r+0x1dc>
   209b8:	00c00944 	movi	r3,37
   209bc:	10c01726 	beq	r2,r3,20a1c <___vfprintf_internal_r+0x1dc>
   209c0:	b821883a 	mov	r16,r23
   209c4:	00000106 	br	209cc <___vfprintf_internal_r+0x18c>
   209c8:	10c00326 	beq	r2,r3,209d8 <___vfprintf_internal_r+0x198>
   209cc:	84000044 	addi	r16,r16,1
   209d0:	80800007 	ldb	r2,0(r16)
   209d4:	103ffc1e 	bne	r2,zero,209c8 <___vfprintf_internal_r+0x188>
   209d8:	85e7c83a 	sub	r19,r16,r23
   209dc:	98000e26 	beq	r19,zero,20a18 <___vfprintf_internal_r+0x1d8>
   209e0:	dc800e17 	ldw	r18,56(sp)
   209e4:	dc400d17 	ldw	r17,52(sp)
   209e8:	008001c4 	movi	r2,7
   209ec:	94e5883a 	add	r18,r18,r19
   209f0:	8c400044 	addi	r17,r17,1
   209f4:	adc00015 	stw	r23,0(r21)
   209f8:	dc800e15 	stw	r18,56(sp)
   209fc:	acc00115 	stw	r19,4(r21)
   20a00:	dc400d15 	stw	r17,52(sp)
   20a04:	14428b16 	blt	r2,r17,21434 <___vfprintf_internal_r+0xbf4>
   20a08:	ad400204 	addi	r21,r21,8
   20a0c:	d9014b17 	ldw	r4,1324(sp)
   20a10:	24c9883a 	add	r4,r4,r19
   20a14:	d9014b15 	stw	r4,1324(sp)
   20a18:	802f883a 	mov	r23,r16
   20a1c:	b8800007 	ldb	r2,0(r23)
   20a20:	10013c26 	beq	r2,zero,20f14 <___vfprintf_internal_r+0x6d4>
   20a24:	bdc00044 	addi	r23,r23,1
   20a28:	d8000405 	stb	zero,16(sp)
   20a2c:	b8c00007 	ldb	r3,0(r23)
   20a30:	04ffffc4 	movi	r19,-1
   20a34:	d8014c15 	stw	zero,1328(sp)
   20a38:	d8014a15 	stw	zero,1320(sp)
   20a3c:	d8c14d15 	stw	r3,1332(sp)
   20a40:	bdc00044 	addi	r23,r23,1
   20a44:	d9414d17 	ldw	r5,1332(sp)
   20a48:	00801604 	movi	r2,88
   20a4c:	28fff804 	addi	r3,r5,-32
   20a50:	10c06036 	bltu	r2,r3,20bd4 <___vfprintf_internal_r+0x394>
   20a54:	18c5883a 	add	r2,r3,r3
   20a58:	1085883a 	add	r2,r2,r2
   20a5c:	00c000b4 	movhi	r3,2
   20a60:	18c29c04 	addi	r3,r3,2672
   20a64:	10c5883a 	add	r2,r2,r3
   20a68:	11000017 	ldw	r4,0(r2)
   20a6c:	2000683a 	jmp	r4
   20a70:	000219e4 	muli	zero,zero,2151
   20a74:	00020bd4 	movui	zero,2095
   20a78:	00020bd4 	movui	zero,2095
   20a7c:	000219d0 	cmplti	zero,zero,2151
   20a80:	00020bd4 	movui	zero,2095
   20a84:	00020bd4 	movui	zero,2095
   20a88:	00020bd4 	movui	zero,2095
   20a8c:	00020bd4 	movui	zero,2095
   20a90:	00020bd4 	movui	zero,2095
   20a94:	00020bd4 	movui	zero,2095
   20a98:	000217b0 	cmpltui	zero,zero,2142
   20a9c:	000219c0 	call	219c <__alt_mem_onchip_memory2_0-0x1de64>
   20aa0:	00020bd4 	movui	zero,2095
   20aa4:	000217c8 	cmpgei	zero,zero,2143
   20aa8:	00021a68 	cmpgeui	zero,zero,2153
   20aac:	00020bd4 	movui	zero,2095
   20ab0:	00021a54 	movui	zero,2153
   20ab4:	00021a10 	cmplti	zero,zero,2152
   20ab8:	00021a10 	cmplti	zero,zero,2152
   20abc:	00021a10 	cmplti	zero,zero,2152
   20ac0:	00021a10 	cmplti	zero,zero,2152
   20ac4:	00021a10 	cmplti	zero,zero,2152
   20ac8:	00021a10 	cmplti	zero,zero,2152
   20acc:	00021a10 	cmplti	zero,zero,2152
   20ad0:	00021a10 	cmplti	zero,zero,2152
   20ad4:	00021a10 	cmplti	zero,zero,2152
   20ad8:	00020bd4 	movui	zero,2095
   20adc:	00020bd4 	movui	zero,2095
   20ae0:	00020bd4 	movui	zero,2095
   20ae4:	00020bd4 	movui	zero,2095
   20ae8:	00020bd4 	movui	zero,2095
   20aec:	00020bd4 	movui	zero,2095
   20af0:	00020bd4 	movui	zero,2095
   20af4:	00020bd4 	movui	zero,2095
   20af8:	00020bd4 	movui	zero,2095
   20afc:	00020bd4 	movui	zero,2095
   20b00:	0002122c 	andhi	zero,zero,2120
   20b04:	00021898 	cmpnei	zero,zero,2146
   20b08:	00020bd4 	movui	zero,2095
   20b0c:	00021898 	cmpnei	zero,zero,2146
   20b10:	00020bd4 	movui	zero,2095
   20b14:	00020bd4 	movui	zero,2095
   20b18:	00020bd4 	movui	zero,2095
   20b1c:	00020bd4 	movui	zero,2095
   20b20:	000219fc 	xorhi	zero,zero,2151
   20b24:	00020bd4 	movui	zero,2095
   20b28:	00020bd4 	movui	zero,2095
   20b2c:	000212e0 	cmpeqi	zero,zero,2123
   20b30:	00020bd4 	movui	zero,2095
   20b34:	00020bd4 	movui	zero,2095
   20b38:	00020bd4 	movui	zero,2095
   20b3c:	00020bd4 	movui	zero,2095
   20b40:	00020bd4 	movui	zero,2095
   20b44:	0002132c 	andhi	zero,zero,2124
   20b48:	00020bd4 	movui	zero,2095
   20b4c:	00020bd4 	movui	zero,2095
   20b50:	0002194c 	andi	zero,zero,2149
   20b54:	00020bd4 	movui	zero,2095
   20b58:	00020bd4 	movui	zero,2095
   20b5c:	00020bd4 	movui	zero,2095
   20b60:	00020bd4 	movui	zero,2095
   20b64:	00020bd4 	movui	zero,2095
   20b68:	00020bd4 	movui	zero,2095
   20b6c:	00020bd4 	movui	zero,2095
   20b70:	00020bd4 	movui	zero,2095
   20b74:	00020bd4 	movui	zero,2095
   20b78:	00020bd4 	movui	zero,2095
   20b7c:	00021920 	cmpeqi	zero,zero,2148
   20b80:	00021238 	rdprs	zero,zero,2120
   20b84:	00021898 	cmpnei	zero,zero,2146
   20b88:	00021898 	cmpnei	zero,zero,2146
   20b8c:	00021898 	cmpnei	zero,zero,2146
   20b90:	00021884 	movi	zero,2146
   20b94:	00021238 	rdprs	zero,zero,2120
   20b98:	00020bd4 	movui	zero,2095
   20b9c:	00020bd4 	movui	zero,2095
   20ba0:	0002180c 	andi	zero,zero,2144
   20ba4:	00020bd4 	movui	zero,2095
   20ba8:	000217dc 	xori	zero,zero,2143
   20bac:	000212ec 	andhi	zero,zero,2123
   20bb0:	0002183c 	xorhi	zero,zero,2144
   20bb4:	00021828 	cmpgeui	zero,zero,2144
   20bb8:	00020bd4 	movui	zero,2095
   20bbc:	00021ad0 	cmplti	zero,zero,2155
   20bc0:	00020bd4 	movui	zero,2095
   20bc4:	00021338 	rdprs	zero,zero,2124
   20bc8:	00020bd4 	movui	zero,2095
   20bcc:	00020bd4 	movui	zero,2095
   20bd0:	000219b0 	cmpltui	zero,zero,2150
   20bd4:	d9014d17 	ldw	r4,1332(sp)
   20bd8:	2000ce26 	beq	r4,zero,20f14 <___vfprintf_internal_r+0x6d4>
   20bdc:	01400044 	movi	r5,1
   20be0:	d9800f04 	addi	r6,sp,60
   20be4:	d9c14015 	stw	r7,1280(sp)
   20be8:	d9414515 	stw	r5,1300(sp)
   20bec:	d9814115 	stw	r6,1284(sp)
   20bf0:	280f883a 	mov	r7,r5
   20bf4:	d9000f05 	stb	r4,60(sp)
   20bf8:	d8000405 	stb	zero,16(sp)
   20bfc:	d8014615 	stw	zero,1304(sp)
   20c00:	d8c14c17 	ldw	r3,1328(sp)
   20c04:	1880008c 	andi	r2,r3,2
   20c08:	1005003a 	cmpeq	r2,r2,zero
   20c0c:	d8815015 	stw	r2,1344(sp)
   20c10:	1000031e 	bne	r2,zero,20c20 <___vfprintf_internal_r+0x3e0>
   20c14:	d9014517 	ldw	r4,1300(sp)
   20c18:	21000084 	addi	r4,r4,2
   20c1c:	d9014515 	stw	r4,1300(sp)
   20c20:	d9414c17 	ldw	r5,1328(sp)
   20c24:	2940210c 	andi	r5,r5,132
   20c28:	d9414e15 	stw	r5,1336(sp)
   20c2c:	28002d1e 	bne	r5,zero,20ce4 <___vfprintf_internal_r+0x4a4>
   20c30:	d9814a17 	ldw	r6,1320(sp)
   20c34:	d8814517 	ldw	r2,1300(sp)
   20c38:	30a1c83a 	sub	r16,r6,r2
   20c3c:	0400290e 	bge	zero,r16,20ce4 <___vfprintf_internal_r+0x4a4>
   20c40:	00800404 	movi	r2,16
   20c44:	14045e0e 	bge	r2,r16,21dc0 <___vfprintf_internal_r+0x1580>
   20c48:	dc800e17 	ldw	r18,56(sp)
   20c4c:	dc400d17 	ldw	r17,52(sp)
   20c50:	1027883a 	mov	r19,r2
   20c54:	070000f4 	movhi	fp,3
   20c58:	e7333d84 	addi	fp,fp,-13066
   20c5c:	050001c4 	movi	r20,7
   20c60:	00000306 	br	20c70 <___vfprintf_internal_r+0x430>
   20c64:	843ffc04 	addi	r16,r16,-16
   20c68:	ad400204 	addi	r21,r21,8
   20c6c:	9c00130e 	bge	r19,r16,20cbc <___vfprintf_internal_r+0x47c>
   20c70:	94800404 	addi	r18,r18,16
   20c74:	8c400044 	addi	r17,r17,1
   20c78:	af000015 	stw	fp,0(r21)
   20c7c:	acc00115 	stw	r19,4(r21)
   20c80:	dc800e15 	stw	r18,56(sp)
   20c84:	dc400d15 	stw	r17,52(sp)
   20c88:	a47ff60e 	bge	r20,r17,20c64 <___vfprintf_internal_r+0x424>
   20c8c:	d9014f17 	ldw	r4,1340(sp)
   20c90:	b00b883a 	mov	r5,r22
   20c94:	d9800c04 	addi	r6,sp,48
   20c98:	d9c15115 	stw	r7,1348(sp)
   20c9c:	00207e80 	call	207e8 <__sprint_r>
   20ca0:	d9c15117 	ldw	r7,1348(sp)
   20ca4:	10009e1e 	bne	r2,zero,20f20 <___vfprintf_internal_r+0x6e0>
   20ca8:	843ffc04 	addi	r16,r16,-16
   20cac:	dc800e17 	ldw	r18,56(sp)
   20cb0:	dc400d17 	ldw	r17,52(sp)
   20cb4:	dd401904 	addi	r21,sp,100
   20cb8:	9c3fed16 	blt	r19,r16,20c70 <___vfprintf_internal_r+0x430>
   20cbc:	9425883a 	add	r18,r18,r16
   20cc0:	8c400044 	addi	r17,r17,1
   20cc4:	008001c4 	movi	r2,7
   20cc8:	af000015 	stw	fp,0(r21)
   20ccc:	ac000115 	stw	r16,4(r21)
   20cd0:	dc800e15 	stw	r18,56(sp)
   20cd4:	dc400d15 	stw	r17,52(sp)
   20cd8:	1441f516 	blt	r2,r17,214b0 <___vfprintf_internal_r+0xc70>
   20cdc:	ad400204 	addi	r21,r21,8
   20ce0:	00000206 	br	20cec <___vfprintf_internal_r+0x4ac>
   20ce4:	dc800e17 	ldw	r18,56(sp)
   20ce8:	dc400d17 	ldw	r17,52(sp)
   20cec:	d8800407 	ldb	r2,16(sp)
   20cf0:	10000b26 	beq	r2,zero,20d20 <___vfprintf_internal_r+0x4e0>
   20cf4:	00800044 	movi	r2,1
   20cf8:	94800044 	addi	r18,r18,1
   20cfc:	8c400044 	addi	r17,r17,1
   20d00:	a8800115 	stw	r2,4(r21)
   20d04:	d8c00404 	addi	r3,sp,16
   20d08:	008001c4 	movi	r2,7
   20d0c:	a8c00015 	stw	r3,0(r21)
   20d10:	dc800e15 	stw	r18,56(sp)
   20d14:	dc400d15 	stw	r17,52(sp)
   20d18:	1441da16 	blt	r2,r17,21484 <___vfprintf_internal_r+0xc44>
   20d1c:	ad400204 	addi	r21,r21,8
   20d20:	d9015017 	ldw	r4,1344(sp)
   20d24:	20000b1e 	bne	r4,zero,20d54 <___vfprintf_internal_r+0x514>
   20d28:	d8800444 	addi	r2,sp,17
   20d2c:	94800084 	addi	r18,r18,2
   20d30:	8c400044 	addi	r17,r17,1
   20d34:	a8800015 	stw	r2,0(r21)
   20d38:	00c00084 	movi	r3,2
   20d3c:	008001c4 	movi	r2,7
   20d40:	a8c00115 	stw	r3,4(r21)
   20d44:	dc800e15 	stw	r18,56(sp)
   20d48:	dc400d15 	stw	r17,52(sp)
   20d4c:	1441c216 	blt	r2,r17,21458 <___vfprintf_internal_r+0xc18>
   20d50:	ad400204 	addi	r21,r21,8
   20d54:	d9414e17 	ldw	r5,1336(sp)
   20d58:	00802004 	movi	r2,128
   20d5c:	2880b126 	beq	r5,r2,21024 <___vfprintf_internal_r+0x7e4>
   20d60:	d8c14617 	ldw	r3,1304(sp)
   20d64:	19e1c83a 	sub	r16,r3,r7
   20d68:	0400260e 	bge	zero,r16,20e04 <___vfprintf_internal_r+0x5c4>
   20d6c:	00800404 	movi	r2,16
   20d70:	1403cf0e 	bge	r2,r16,21cb0 <___vfprintf_internal_r+0x1470>
   20d74:	1027883a 	mov	r19,r2
   20d78:	070000f4 	movhi	fp,3
   20d7c:	e7333984 	addi	fp,fp,-13082
   20d80:	050001c4 	movi	r20,7
   20d84:	00000306 	br	20d94 <___vfprintf_internal_r+0x554>
   20d88:	843ffc04 	addi	r16,r16,-16
   20d8c:	ad400204 	addi	r21,r21,8
   20d90:	9c00130e 	bge	r19,r16,20de0 <___vfprintf_internal_r+0x5a0>
   20d94:	94800404 	addi	r18,r18,16
   20d98:	8c400044 	addi	r17,r17,1
   20d9c:	af000015 	stw	fp,0(r21)
   20da0:	acc00115 	stw	r19,4(r21)
   20da4:	dc800e15 	stw	r18,56(sp)
   20da8:	dc400d15 	stw	r17,52(sp)
   20dac:	a47ff60e 	bge	r20,r17,20d88 <___vfprintf_internal_r+0x548>
   20db0:	d9014f17 	ldw	r4,1340(sp)
   20db4:	b00b883a 	mov	r5,r22
   20db8:	d9800c04 	addi	r6,sp,48
   20dbc:	d9c15115 	stw	r7,1348(sp)
   20dc0:	00207e80 	call	207e8 <__sprint_r>
   20dc4:	d9c15117 	ldw	r7,1348(sp)
   20dc8:	1000551e 	bne	r2,zero,20f20 <___vfprintf_internal_r+0x6e0>
   20dcc:	843ffc04 	addi	r16,r16,-16
   20dd0:	dc800e17 	ldw	r18,56(sp)
   20dd4:	dc400d17 	ldw	r17,52(sp)
   20dd8:	dd401904 	addi	r21,sp,100
   20ddc:	9c3fed16 	blt	r19,r16,20d94 <___vfprintf_internal_r+0x554>
   20de0:	9425883a 	add	r18,r18,r16
   20de4:	8c400044 	addi	r17,r17,1
   20de8:	008001c4 	movi	r2,7
   20dec:	af000015 	stw	fp,0(r21)
   20df0:	ac000115 	stw	r16,4(r21)
   20df4:	dc800e15 	stw	r18,56(sp)
   20df8:	dc400d15 	stw	r17,52(sp)
   20dfc:	14418216 	blt	r2,r17,21408 <___vfprintf_internal_r+0xbc8>
   20e00:	ad400204 	addi	r21,r21,8
   20e04:	d9014c17 	ldw	r4,1328(sp)
   20e08:	2080400c 	andi	r2,r4,256
   20e0c:	10004a1e 	bne	r2,zero,20f38 <___vfprintf_internal_r+0x6f8>
   20e10:	d9414117 	ldw	r5,1284(sp)
   20e14:	91e5883a 	add	r18,r18,r7
   20e18:	8c400044 	addi	r17,r17,1
   20e1c:	008001c4 	movi	r2,7
   20e20:	a9400015 	stw	r5,0(r21)
   20e24:	a9c00115 	stw	r7,4(r21)
   20e28:	dc800e15 	stw	r18,56(sp)
   20e2c:	dc400d15 	stw	r17,52(sp)
   20e30:	14416716 	blt	r2,r17,213d0 <___vfprintf_internal_r+0xb90>
   20e34:	a8c00204 	addi	r3,r21,8
   20e38:	d9814c17 	ldw	r6,1328(sp)
   20e3c:	3080010c 	andi	r2,r6,4
   20e40:	10002826 	beq	r2,zero,20ee4 <___vfprintf_internal_r+0x6a4>
   20e44:	d8814a17 	ldw	r2,1320(sp)
   20e48:	d9014517 	ldw	r4,1300(sp)
   20e4c:	1121c83a 	sub	r16,r2,r4
   20e50:	0400240e 	bge	zero,r16,20ee4 <___vfprintf_internal_r+0x6a4>
   20e54:	00800404 	movi	r2,16
   20e58:	1404550e 	bge	r2,r16,21fb0 <___vfprintf_internal_r+0x1770>
   20e5c:	dc400d17 	ldw	r17,52(sp)
   20e60:	1027883a 	mov	r19,r2
   20e64:	070000f4 	movhi	fp,3
   20e68:	e7333d84 	addi	fp,fp,-13066
   20e6c:	050001c4 	movi	r20,7
   20e70:	00000306 	br	20e80 <___vfprintf_internal_r+0x640>
   20e74:	843ffc04 	addi	r16,r16,-16
   20e78:	18c00204 	addi	r3,r3,8
   20e7c:	9c00110e 	bge	r19,r16,20ec4 <___vfprintf_internal_r+0x684>
   20e80:	94800404 	addi	r18,r18,16
   20e84:	8c400044 	addi	r17,r17,1
   20e88:	1f000015 	stw	fp,0(r3)
   20e8c:	1cc00115 	stw	r19,4(r3)
   20e90:	dc800e15 	stw	r18,56(sp)
   20e94:	dc400d15 	stw	r17,52(sp)
   20e98:	a47ff60e 	bge	r20,r17,20e74 <___vfprintf_internal_r+0x634>
   20e9c:	d9014f17 	ldw	r4,1340(sp)
   20ea0:	b00b883a 	mov	r5,r22
   20ea4:	d9800c04 	addi	r6,sp,48
   20ea8:	00207e80 	call	207e8 <__sprint_r>
   20eac:	10001c1e 	bne	r2,zero,20f20 <___vfprintf_internal_r+0x6e0>
   20eb0:	843ffc04 	addi	r16,r16,-16
   20eb4:	dc800e17 	ldw	r18,56(sp)
   20eb8:	dc400d17 	ldw	r17,52(sp)
   20ebc:	d8c01904 	addi	r3,sp,100
   20ec0:	9c3fef16 	blt	r19,r16,20e80 <___vfprintf_internal_r+0x640>
   20ec4:	9425883a 	add	r18,r18,r16
   20ec8:	8c400044 	addi	r17,r17,1
   20ecc:	008001c4 	movi	r2,7
   20ed0:	1f000015 	stw	fp,0(r3)
   20ed4:	1c000115 	stw	r16,4(r3)
   20ed8:	dc800e15 	stw	r18,56(sp)
   20edc:	dc400d15 	stw	r17,52(sp)
   20ee0:	1440cb16 	blt	r2,r17,21210 <___vfprintf_internal_r+0x9d0>
   20ee4:	d8814a17 	ldw	r2,1320(sp)
   20ee8:	d9414517 	ldw	r5,1300(sp)
   20eec:	1140010e 	bge	r2,r5,20ef4 <___vfprintf_internal_r+0x6b4>
   20ef0:	2805883a 	mov	r2,r5
   20ef4:	d9814b17 	ldw	r6,1324(sp)
   20ef8:	308d883a 	add	r6,r6,r2
   20efc:	d9814b15 	stw	r6,1324(sp)
   20f00:	90013b1e 	bne	r18,zero,213f0 <___vfprintf_internal_r+0xbb0>
   20f04:	d9c14017 	ldw	r7,1280(sp)
   20f08:	dd401904 	addi	r21,sp,100
   20f0c:	d8000d15 	stw	zero,52(sp)
   20f10:	003ea706 	br	209b0 <___vfprintf_internal_r+0x170>
   20f14:	d8800e17 	ldw	r2,56(sp)
   20f18:	1005451e 	bne	r2,zero,22430 <___vfprintf_internal_r+0x1bf0>
   20f1c:	d8000d15 	stw	zero,52(sp)
   20f20:	b080030b 	ldhu	r2,12(r22)
   20f24:	1080100c 	andi	r2,r2,64
   20f28:	103e8726 	beq	r2,zero,20948 <___vfprintf_internal_r+0x108>
   20f2c:	00bfffc4 	movi	r2,-1
   20f30:	d8814b15 	stw	r2,1324(sp)
   20f34:	003e8406 	br	20948 <___vfprintf_internal_r+0x108>
   20f38:	d9814d17 	ldw	r6,1332(sp)
   20f3c:	00801944 	movi	r2,101
   20f40:	11806e16 	blt	r2,r6,210fc <___vfprintf_internal_r+0x8bc>
   20f44:	d9414717 	ldw	r5,1308(sp)
   20f48:	00c00044 	movi	r3,1
   20f4c:	1943490e 	bge	r3,r5,21c74 <___vfprintf_internal_r+0x1434>
   20f50:	d8814117 	ldw	r2,1284(sp)
   20f54:	94800044 	addi	r18,r18,1
   20f58:	8c400044 	addi	r17,r17,1
   20f5c:	a8800015 	stw	r2,0(r21)
   20f60:	008001c4 	movi	r2,7
   20f64:	a8c00115 	stw	r3,4(r21)
   20f68:	dc800e15 	stw	r18,56(sp)
   20f6c:	dc400d15 	stw	r17,52(sp)
   20f70:	1441ca16 	blt	r2,r17,2169c <___vfprintf_internal_r+0xe5c>
   20f74:	a8c00204 	addi	r3,r21,8
   20f78:	d9014917 	ldw	r4,1316(sp)
   20f7c:	00800044 	movi	r2,1
   20f80:	94800044 	addi	r18,r18,1
   20f84:	8c400044 	addi	r17,r17,1
   20f88:	18800115 	stw	r2,4(r3)
   20f8c:	008001c4 	movi	r2,7
   20f90:	19000015 	stw	r4,0(r3)
   20f94:	dc800e15 	stw	r18,56(sp)
   20f98:	dc400d15 	stw	r17,52(sp)
   20f9c:	1441b616 	blt	r2,r17,21678 <___vfprintf_internal_r+0xe38>
   20fa0:	1cc00204 	addi	r19,r3,8
   20fa4:	d9014217 	ldw	r4,1288(sp)
   20fa8:	d9414317 	ldw	r5,1292(sp)
   20fac:	000d883a 	mov	r6,zero
   20fb0:	000f883a 	mov	r7,zero
   20fb4:	00292f40 	call	292f4 <__nedf2>
   20fb8:	10017426 	beq	r2,zero,2158c <___vfprintf_internal_r+0xd4c>
   20fbc:	d9414717 	ldw	r5,1308(sp)
   20fc0:	d9814117 	ldw	r6,1284(sp)
   20fc4:	8c400044 	addi	r17,r17,1
   20fc8:	2c85883a 	add	r2,r5,r18
   20fcc:	14bfffc4 	addi	r18,r2,-1
   20fd0:	28bfffc4 	addi	r2,r5,-1
   20fd4:	30c00044 	addi	r3,r6,1
   20fd8:	98800115 	stw	r2,4(r19)
   20fdc:	008001c4 	movi	r2,7
   20fe0:	98c00015 	stw	r3,0(r19)
   20fe4:	dc800e15 	stw	r18,56(sp)
   20fe8:	dc400d15 	stw	r17,52(sp)
   20fec:	14418e16 	blt	r2,r17,21628 <___vfprintf_internal_r+0xde8>
   20ff0:	9cc00204 	addi	r19,r19,8
   20ff4:	d9414817 	ldw	r5,1312(sp)
   20ff8:	d8800804 	addi	r2,sp,32
   20ffc:	8c400044 	addi	r17,r17,1
   21000:	9165883a 	add	r18,r18,r5
   21004:	98800015 	stw	r2,0(r19)
   21008:	008001c4 	movi	r2,7
   2100c:	99400115 	stw	r5,4(r19)
   21010:	dc800e15 	stw	r18,56(sp)
   21014:	dc400d15 	stw	r17,52(sp)
   21018:	1440ed16 	blt	r2,r17,213d0 <___vfprintf_internal_r+0xb90>
   2101c:	98c00204 	addi	r3,r19,8
   21020:	003f8506 	br	20e38 <___vfprintf_internal_r+0x5f8>
   21024:	d9814a17 	ldw	r6,1320(sp)
   21028:	d8814517 	ldw	r2,1300(sp)
   2102c:	30a1c83a 	sub	r16,r6,r2
   21030:	043f4b0e 	bge	zero,r16,20d60 <___vfprintf_internal_r+0x520>
   21034:	00800404 	movi	r2,16
   21038:	14043a0e 	bge	r2,r16,22124 <___vfprintf_internal_r+0x18e4>
   2103c:	1027883a 	mov	r19,r2
   21040:	070000f4 	movhi	fp,3
   21044:	e7333984 	addi	fp,fp,-13082
   21048:	050001c4 	movi	r20,7
   2104c:	00000306 	br	2105c <___vfprintf_internal_r+0x81c>
   21050:	843ffc04 	addi	r16,r16,-16
   21054:	ad400204 	addi	r21,r21,8
   21058:	9c00130e 	bge	r19,r16,210a8 <___vfprintf_internal_r+0x868>
   2105c:	94800404 	addi	r18,r18,16
   21060:	8c400044 	addi	r17,r17,1
   21064:	af000015 	stw	fp,0(r21)
   21068:	acc00115 	stw	r19,4(r21)
   2106c:	dc800e15 	stw	r18,56(sp)
   21070:	dc400d15 	stw	r17,52(sp)
   21074:	a47ff60e 	bge	r20,r17,21050 <___vfprintf_internal_r+0x810>
   21078:	d9014f17 	ldw	r4,1340(sp)
   2107c:	b00b883a 	mov	r5,r22
   21080:	d9800c04 	addi	r6,sp,48
   21084:	d9c15115 	stw	r7,1348(sp)
   21088:	00207e80 	call	207e8 <__sprint_r>
   2108c:	d9c15117 	ldw	r7,1348(sp)
   21090:	103fa31e 	bne	r2,zero,20f20 <___vfprintf_internal_r+0x6e0>
   21094:	843ffc04 	addi	r16,r16,-16
   21098:	dc800e17 	ldw	r18,56(sp)
   2109c:	dc400d17 	ldw	r17,52(sp)
   210a0:	dd401904 	addi	r21,sp,100
   210a4:	9c3fed16 	blt	r19,r16,2105c <___vfprintf_internal_r+0x81c>
   210a8:	9425883a 	add	r18,r18,r16
   210ac:	8c400044 	addi	r17,r17,1
   210b0:	008001c4 	movi	r2,7
   210b4:	af000015 	stw	fp,0(r21)
   210b8:	ac000115 	stw	r16,4(r21)
   210bc:	dc800e15 	stw	r18,56(sp)
   210c0:	dc400d15 	stw	r17,52(sp)
   210c4:	14416116 	blt	r2,r17,2164c <___vfprintf_internal_r+0xe0c>
   210c8:	ad400204 	addi	r21,r21,8
   210cc:	003f2406 	br	20d60 <___vfprintf_internal_r+0x520>
   210d0:	d9014f17 	ldw	r4,1340(sp)
   210d4:	00242f40 	call	242f4 <__sinit>
   210d8:	d9c15117 	ldw	r7,1348(sp)
   210dc:	003def06 	br	2089c <___vfprintf_internal_r+0x5c>
   210e0:	d9014f17 	ldw	r4,1340(sp)
   210e4:	b00b883a 	mov	r5,r22
   210e8:	d9c15115 	stw	r7,1348(sp)
   210ec:	00227280 	call	22728 <__swsetup_r>
   210f0:	d9c15117 	ldw	r7,1348(sp)
   210f4:	103dee26 	beq	r2,zero,208b0 <___vfprintf_internal_r+0x70>
   210f8:	003f8c06 	br	20f2c <___vfprintf_internal_r+0x6ec>
   210fc:	d9014217 	ldw	r4,1288(sp)
   21100:	d9414317 	ldw	r5,1292(sp)
   21104:	000d883a 	mov	r6,zero
   21108:	000f883a 	mov	r7,zero
   2110c:	002926c0 	call	2926c <__eqdf2>
   21110:	1000f21e 	bne	r2,zero,214dc <___vfprintf_internal_r+0xc9c>
   21114:	008000f4 	movhi	r2,3
   21118:	10b33904 	addi	r2,r2,-13084
   2111c:	94800044 	addi	r18,r18,1
   21120:	8c400044 	addi	r17,r17,1
   21124:	a8800015 	stw	r2,0(r21)
   21128:	00c00044 	movi	r3,1
   2112c:	008001c4 	movi	r2,7
   21130:	a8c00115 	stw	r3,4(r21)
   21134:	dc800e15 	stw	r18,56(sp)
   21138:	dc400d15 	stw	r17,52(sp)
   2113c:	14430016 	blt	r2,r17,21d40 <___vfprintf_internal_r+0x1500>
   21140:	a8c00204 	addi	r3,r21,8
   21144:	d8800517 	ldw	r2,20(sp)
   21148:	d9014717 	ldw	r4,1308(sp)
   2114c:	11015c0e 	bge	r2,r4,216c0 <___vfprintf_internal_r+0xe80>
   21150:	dc400d17 	ldw	r17,52(sp)
   21154:	d9814917 	ldw	r6,1316(sp)
   21158:	00800044 	movi	r2,1
   2115c:	94800044 	addi	r18,r18,1
   21160:	8c400044 	addi	r17,r17,1
   21164:	18800115 	stw	r2,4(r3)
   21168:	008001c4 	movi	r2,7
   2116c:	19800015 	stw	r6,0(r3)
   21170:	dc800e15 	stw	r18,56(sp)
   21174:	dc400d15 	stw	r17,52(sp)
   21178:	14431616 	blt	r2,r17,21dd4 <___vfprintf_internal_r+0x1594>
   2117c:	18c00204 	addi	r3,r3,8
   21180:	d8814717 	ldw	r2,1308(sp)
   21184:	143fffc4 	addi	r16,r2,-1
   21188:	043f2b0e 	bge	zero,r16,20e38 <___vfprintf_internal_r+0x5f8>
   2118c:	00800404 	movi	r2,16
   21190:	1402a80e 	bge	r2,r16,21c34 <___vfprintf_internal_r+0x13f4>
   21194:	dc400d17 	ldw	r17,52(sp)
   21198:	1027883a 	mov	r19,r2
   2119c:	070000f4 	movhi	fp,3
   211a0:	e7333984 	addi	fp,fp,-13082
   211a4:	050001c4 	movi	r20,7
   211a8:	00000306 	br	211b8 <___vfprintf_internal_r+0x978>
   211ac:	18c00204 	addi	r3,r3,8
   211b0:	843ffc04 	addi	r16,r16,-16
   211b4:	9c02a20e 	bge	r19,r16,21c40 <___vfprintf_internal_r+0x1400>
   211b8:	94800404 	addi	r18,r18,16
   211bc:	8c400044 	addi	r17,r17,1
   211c0:	1f000015 	stw	fp,0(r3)
   211c4:	1cc00115 	stw	r19,4(r3)
   211c8:	dc800e15 	stw	r18,56(sp)
   211cc:	dc400d15 	stw	r17,52(sp)
   211d0:	a47ff60e 	bge	r20,r17,211ac <___vfprintf_internal_r+0x96c>
   211d4:	d9014f17 	ldw	r4,1340(sp)
   211d8:	b00b883a 	mov	r5,r22
   211dc:	d9800c04 	addi	r6,sp,48
   211e0:	00207e80 	call	207e8 <__sprint_r>
   211e4:	103f4e1e 	bne	r2,zero,20f20 <___vfprintf_internal_r+0x6e0>
   211e8:	dc800e17 	ldw	r18,56(sp)
   211ec:	dc400d17 	ldw	r17,52(sp)
   211f0:	d8c01904 	addi	r3,sp,100
   211f4:	003fee06 	br	211b0 <___vfprintf_internal_r+0x970>
   211f8:	d8802c0b 	ldhu	r2,176(sp)
   211fc:	00ffffc4 	movi	r3,-1
   21200:	d8c14b15 	stw	r3,1324(sp)
   21204:	1080100c 	andi	r2,r2,64
   21208:	103dcc1e 	bne	r2,zero,2093c <___vfprintf_internal_r+0xfc>
   2120c:	003dce06 	br	20948 <___vfprintf_internal_r+0x108>
   21210:	d9014f17 	ldw	r4,1340(sp)
   21214:	b00b883a 	mov	r5,r22
   21218:	d9800c04 	addi	r6,sp,48
   2121c:	00207e80 	call	207e8 <__sprint_r>
   21220:	103f3f1e 	bne	r2,zero,20f20 <___vfprintf_internal_r+0x6e0>
   21224:	dc800e17 	ldw	r18,56(sp)
   21228:	003f2e06 	br	20ee4 <___vfprintf_internal_r+0x6a4>
   2122c:	d9414c17 	ldw	r5,1328(sp)
   21230:	29400414 	ori	r5,r5,16
   21234:	d9414c15 	stw	r5,1328(sp)
   21238:	d9814c17 	ldw	r6,1328(sp)
   2123c:	3080080c 	andi	r2,r6,32
   21240:	10014f1e 	bne	r2,zero,21780 <___vfprintf_internal_r+0xf40>
   21244:	d8c14c17 	ldw	r3,1328(sp)
   21248:	1880040c 	andi	r2,r3,16
   2124c:	1002f01e 	bne	r2,zero,21e10 <___vfprintf_internal_r+0x15d0>
   21250:	d9014c17 	ldw	r4,1328(sp)
   21254:	2080100c 	andi	r2,r4,64
   21258:	1002ed26 	beq	r2,zero,21e10 <___vfprintf_internal_r+0x15d0>
   2125c:	3880000f 	ldh	r2,0(r7)
   21260:	39c00104 	addi	r7,r7,4
   21264:	d9c14015 	stw	r7,1280(sp)
   21268:	1023d7fa 	srai	r17,r2,31
   2126c:	1021883a 	mov	r16,r2
   21270:	88037816 	blt	r17,zero,22054 <___vfprintf_internal_r+0x1814>
   21274:	01000044 	movi	r4,1
   21278:	98000416 	blt	r19,zero,2128c <___vfprintf_internal_r+0xa4c>
   2127c:	d8c14c17 	ldw	r3,1328(sp)
   21280:	00bfdfc4 	movi	r2,-129
   21284:	1886703a 	and	r3,r3,r2
   21288:	d8c14c15 	stw	r3,1328(sp)
   2128c:	8444b03a 	or	r2,r16,r17
   21290:	10022c1e 	bne	r2,zero,21b44 <___vfprintf_internal_r+0x1304>
   21294:	98022b1e 	bne	r19,zero,21b44 <___vfprintf_internal_r+0x1304>
   21298:	20803fcc 	andi	r2,r4,255
   2129c:	1002a126 	beq	r2,zero,21d24 <___vfprintf_internal_r+0x14e4>
   212a0:	d8c01904 	addi	r3,sp,100
   212a4:	dd000f04 	addi	r20,sp,60
   212a8:	d8c14115 	stw	r3,1284(sp)
   212ac:	d8c14117 	ldw	r3,1284(sp)
   212b0:	dcc14515 	stw	r19,1300(sp)
   212b4:	a0c5c83a 	sub	r2,r20,r3
   212b8:	11c00a04 	addi	r7,r2,40
   212bc:	99c0010e 	bge	r19,r7,212c4 <___vfprintf_internal_r+0xa84>
   212c0:	d9c14515 	stw	r7,1300(sp)
   212c4:	dcc14615 	stw	r19,1304(sp)
   212c8:	d8800407 	ldb	r2,16(sp)
   212cc:	103e4c26 	beq	r2,zero,20c00 <___vfprintf_internal_r+0x3c0>
   212d0:	d8814517 	ldw	r2,1300(sp)
   212d4:	10800044 	addi	r2,r2,1
   212d8:	d8814515 	stw	r2,1300(sp)
   212dc:	003e4806 	br	20c00 <___vfprintf_internal_r+0x3c0>
   212e0:	d9814c17 	ldw	r6,1328(sp)
   212e4:	31800414 	ori	r6,r6,16
   212e8:	d9814c15 	stw	r6,1328(sp)
   212ec:	d8c14c17 	ldw	r3,1328(sp)
   212f0:	1880080c 	andi	r2,r3,32
   212f4:	1001271e 	bne	r2,zero,21794 <___vfprintf_internal_r+0xf54>
   212f8:	d9414c17 	ldw	r5,1328(sp)
   212fc:	2880040c 	andi	r2,r5,16
   21300:	1002bc1e 	bne	r2,zero,21df4 <___vfprintf_internal_r+0x15b4>
   21304:	d9814c17 	ldw	r6,1328(sp)
   21308:	3080100c 	andi	r2,r6,64
   2130c:	1002b926 	beq	r2,zero,21df4 <___vfprintf_internal_r+0x15b4>
   21310:	3c00000b 	ldhu	r16,0(r7)
   21314:	0009883a 	mov	r4,zero
   21318:	39c00104 	addi	r7,r7,4
   2131c:	0023883a 	mov	r17,zero
   21320:	d9c14015 	stw	r7,1280(sp)
   21324:	d8000405 	stb	zero,16(sp)
   21328:	003fd306 	br	21278 <___vfprintf_internal_r+0xa38>
   2132c:	d9014c17 	ldw	r4,1328(sp)
   21330:	21000414 	ori	r4,r4,16
   21334:	d9014c15 	stw	r4,1328(sp)
   21338:	d9414c17 	ldw	r5,1328(sp)
   2133c:	2880080c 	andi	r2,r5,32
   21340:	1001081e 	bne	r2,zero,21764 <___vfprintf_internal_r+0xf24>
   21344:	d8c14c17 	ldw	r3,1328(sp)
   21348:	1880040c 	andi	r2,r3,16
   2134c:	1002b61e 	bne	r2,zero,21e28 <___vfprintf_internal_r+0x15e8>
   21350:	d9014c17 	ldw	r4,1328(sp)
   21354:	2080100c 	andi	r2,r4,64
   21358:	1002b326 	beq	r2,zero,21e28 <___vfprintf_internal_r+0x15e8>
   2135c:	3c00000b 	ldhu	r16,0(r7)
   21360:	01000044 	movi	r4,1
   21364:	39c00104 	addi	r7,r7,4
   21368:	0023883a 	mov	r17,zero
   2136c:	d9c14015 	stw	r7,1280(sp)
   21370:	d8000405 	stb	zero,16(sp)
   21374:	003fc006 	br	21278 <___vfprintf_internal_r+0xa38>
   21378:	d9014f17 	ldw	r4,1340(sp)
   2137c:	b00b883a 	mov	r5,r22
   21380:	d9800c04 	addi	r6,sp,48
   21384:	00207e80 	call	207e8 <__sprint_r>
   21388:	103ee51e 	bne	r2,zero,20f20 <___vfprintf_internal_r+0x6e0>
   2138c:	dc800e17 	ldw	r18,56(sp)
   21390:	d8c01904 	addi	r3,sp,100
   21394:	d9814c17 	ldw	r6,1328(sp)
   21398:	3080004c 	andi	r2,r6,1
   2139c:	1005003a 	cmpeq	r2,r2,zero
   213a0:	103ea51e 	bne	r2,zero,20e38 <___vfprintf_internal_r+0x5f8>
   213a4:	00800044 	movi	r2,1
   213a8:	dc400d17 	ldw	r17,52(sp)
   213ac:	18800115 	stw	r2,4(r3)
   213b0:	d8814917 	ldw	r2,1316(sp)
   213b4:	94800044 	addi	r18,r18,1
   213b8:	8c400044 	addi	r17,r17,1
   213bc:	18800015 	stw	r2,0(r3)
   213c0:	008001c4 	movi	r2,7
   213c4:	dc800e15 	stw	r18,56(sp)
   213c8:	dc400d15 	stw	r17,52(sp)
   213cc:	1442240e 	bge	r2,r17,21c60 <___vfprintf_internal_r+0x1420>
   213d0:	d9014f17 	ldw	r4,1340(sp)
   213d4:	b00b883a 	mov	r5,r22
   213d8:	d9800c04 	addi	r6,sp,48
   213dc:	00207e80 	call	207e8 <__sprint_r>
   213e0:	103ecf1e 	bne	r2,zero,20f20 <___vfprintf_internal_r+0x6e0>
   213e4:	dc800e17 	ldw	r18,56(sp)
   213e8:	d8c01904 	addi	r3,sp,100
   213ec:	003e9206 	br	20e38 <___vfprintf_internal_r+0x5f8>
   213f0:	d9014f17 	ldw	r4,1340(sp)
   213f4:	b00b883a 	mov	r5,r22
   213f8:	d9800c04 	addi	r6,sp,48
   213fc:	00207e80 	call	207e8 <__sprint_r>
   21400:	103ec026 	beq	r2,zero,20f04 <___vfprintf_internal_r+0x6c4>
   21404:	003ec606 	br	20f20 <___vfprintf_internal_r+0x6e0>
   21408:	d9014f17 	ldw	r4,1340(sp)
   2140c:	b00b883a 	mov	r5,r22
   21410:	d9800c04 	addi	r6,sp,48
   21414:	d9c15115 	stw	r7,1348(sp)
   21418:	00207e80 	call	207e8 <__sprint_r>
   2141c:	d9c15117 	ldw	r7,1348(sp)
   21420:	103ebf1e 	bne	r2,zero,20f20 <___vfprintf_internal_r+0x6e0>
   21424:	dc800e17 	ldw	r18,56(sp)
   21428:	dc400d17 	ldw	r17,52(sp)
   2142c:	dd401904 	addi	r21,sp,100
   21430:	003e7406 	br	20e04 <___vfprintf_internal_r+0x5c4>
   21434:	d9014f17 	ldw	r4,1340(sp)
   21438:	b00b883a 	mov	r5,r22
   2143c:	d9800c04 	addi	r6,sp,48
   21440:	d9c15115 	stw	r7,1348(sp)
   21444:	00207e80 	call	207e8 <__sprint_r>
   21448:	d9c15117 	ldw	r7,1348(sp)
   2144c:	103eb41e 	bne	r2,zero,20f20 <___vfprintf_internal_r+0x6e0>
   21450:	dd401904 	addi	r21,sp,100
   21454:	003d6d06 	br	20a0c <___vfprintf_internal_r+0x1cc>
   21458:	d9014f17 	ldw	r4,1340(sp)
   2145c:	b00b883a 	mov	r5,r22
   21460:	d9800c04 	addi	r6,sp,48
   21464:	d9c15115 	stw	r7,1348(sp)
   21468:	00207e80 	call	207e8 <__sprint_r>
   2146c:	d9c15117 	ldw	r7,1348(sp)
   21470:	103eab1e 	bne	r2,zero,20f20 <___vfprintf_internal_r+0x6e0>
   21474:	dc800e17 	ldw	r18,56(sp)
   21478:	dc400d17 	ldw	r17,52(sp)
   2147c:	dd401904 	addi	r21,sp,100
   21480:	003e3406 	br	20d54 <___vfprintf_internal_r+0x514>
   21484:	d9014f17 	ldw	r4,1340(sp)
   21488:	b00b883a 	mov	r5,r22
   2148c:	d9800c04 	addi	r6,sp,48
   21490:	d9c15115 	stw	r7,1348(sp)
   21494:	00207e80 	call	207e8 <__sprint_r>
   21498:	d9c15117 	ldw	r7,1348(sp)
   2149c:	103ea01e 	bne	r2,zero,20f20 <___vfprintf_internal_r+0x6e0>
   214a0:	dc800e17 	ldw	r18,56(sp)
   214a4:	dc400d17 	ldw	r17,52(sp)
   214a8:	dd401904 	addi	r21,sp,100
   214ac:	003e1c06 	br	20d20 <___vfprintf_internal_r+0x4e0>
   214b0:	d9014f17 	ldw	r4,1340(sp)
   214b4:	b00b883a 	mov	r5,r22
   214b8:	d9800c04 	addi	r6,sp,48
   214bc:	d9c15115 	stw	r7,1348(sp)
   214c0:	00207e80 	call	207e8 <__sprint_r>
   214c4:	d9c15117 	ldw	r7,1348(sp)
   214c8:	103e951e 	bne	r2,zero,20f20 <___vfprintf_internal_r+0x6e0>
   214cc:	dc800e17 	ldw	r18,56(sp)
   214d0:	dc400d17 	ldw	r17,52(sp)
   214d4:	dd401904 	addi	r21,sp,100
   214d8:	003e0406 	br	20cec <___vfprintf_internal_r+0x4ac>
   214dc:	d9000517 	ldw	r4,20(sp)
   214e0:	0102580e 	bge	zero,r4,21e44 <___vfprintf_internal_r+0x1604>
   214e4:	d9814717 	ldw	r6,1308(sp)
   214e8:	21807a16 	blt	r4,r6,216d4 <___vfprintf_internal_r+0xe94>
   214ec:	d8814117 	ldw	r2,1284(sp)
   214f0:	91a5883a 	add	r18,r18,r6
   214f4:	8c400044 	addi	r17,r17,1
   214f8:	a8800015 	stw	r2,0(r21)
   214fc:	008001c4 	movi	r2,7
   21500:	a9800115 	stw	r6,4(r21)
   21504:	dc800e15 	stw	r18,56(sp)
   21508:	dc400d15 	stw	r17,52(sp)
   2150c:	1442fc16 	blt	r2,r17,22100 <___vfprintf_internal_r+0x18c0>
   21510:	a8c00204 	addi	r3,r21,8
   21514:	d9414717 	ldw	r5,1308(sp)
   21518:	2161c83a 	sub	r16,r4,r5
   2151c:	043f9d0e 	bge	zero,r16,21394 <___vfprintf_internal_r+0xb54>
   21520:	00800404 	movi	r2,16
   21524:	1402190e 	bge	r2,r16,21d8c <___vfprintf_internal_r+0x154c>
   21528:	dc400d17 	ldw	r17,52(sp)
   2152c:	1027883a 	mov	r19,r2
   21530:	070000f4 	movhi	fp,3
   21534:	e7333984 	addi	fp,fp,-13082
   21538:	050001c4 	movi	r20,7
   2153c:	00000306 	br	2154c <___vfprintf_internal_r+0xd0c>
   21540:	18c00204 	addi	r3,r3,8
   21544:	843ffc04 	addi	r16,r16,-16
   21548:	9c02130e 	bge	r19,r16,21d98 <___vfprintf_internal_r+0x1558>
   2154c:	94800404 	addi	r18,r18,16
   21550:	8c400044 	addi	r17,r17,1
   21554:	1f000015 	stw	fp,0(r3)
   21558:	1cc00115 	stw	r19,4(r3)
   2155c:	dc800e15 	stw	r18,56(sp)
   21560:	dc400d15 	stw	r17,52(sp)
   21564:	a47ff60e 	bge	r20,r17,21540 <___vfprintf_internal_r+0xd00>
   21568:	d9014f17 	ldw	r4,1340(sp)
   2156c:	b00b883a 	mov	r5,r22
   21570:	d9800c04 	addi	r6,sp,48
   21574:	00207e80 	call	207e8 <__sprint_r>
   21578:	103e691e 	bne	r2,zero,20f20 <___vfprintf_internal_r+0x6e0>
   2157c:	dc800e17 	ldw	r18,56(sp)
   21580:	dc400d17 	ldw	r17,52(sp)
   21584:	d8c01904 	addi	r3,sp,100
   21588:	003fee06 	br	21544 <___vfprintf_internal_r+0xd04>
   2158c:	d8814717 	ldw	r2,1308(sp)
   21590:	143fffc4 	addi	r16,r2,-1
   21594:	043e970e 	bge	zero,r16,20ff4 <___vfprintf_internal_r+0x7b4>
   21598:	00800404 	movi	r2,16
   2159c:	1400180e 	bge	r2,r16,21600 <___vfprintf_internal_r+0xdc0>
   215a0:	1029883a 	mov	r20,r2
   215a4:	070000f4 	movhi	fp,3
   215a8:	e7333984 	addi	fp,fp,-13082
   215ac:	054001c4 	movi	r21,7
   215b0:	00000306 	br	215c0 <___vfprintf_internal_r+0xd80>
   215b4:	9cc00204 	addi	r19,r19,8
   215b8:	843ffc04 	addi	r16,r16,-16
   215bc:	a400120e 	bge	r20,r16,21608 <___vfprintf_internal_r+0xdc8>
   215c0:	94800404 	addi	r18,r18,16
   215c4:	8c400044 	addi	r17,r17,1
   215c8:	9f000015 	stw	fp,0(r19)
   215cc:	9d000115 	stw	r20,4(r19)
   215d0:	dc800e15 	stw	r18,56(sp)
   215d4:	dc400d15 	stw	r17,52(sp)
   215d8:	ac7ff60e 	bge	r21,r17,215b4 <___vfprintf_internal_r+0xd74>
   215dc:	d9014f17 	ldw	r4,1340(sp)
   215e0:	b00b883a 	mov	r5,r22
   215e4:	d9800c04 	addi	r6,sp,48
   215e8:	00207e80 	call	207e8 <__sprint_r>
   215ec:	103e4c1e 	bne	r2,zero,20f20 <___vfprintf_internal_r+0x6e0>
   215f0:	dc800e17 	ldw	r18,56(sp)
   215f4:	dc400d17 	ldw	r17,52(sp)
   215f8:	dcc01904 	addi	r19,sp,100
   215fc:	003fee06 	br	215b8 <___vfprintf_internal_r+0xd78>
   21600:	070000f4 	movhi	fp,3
   21604:	e7333984 	addi	fp,fp,-13082
   21608:	9425883a 	add	r18,r18,r16
   2160c:	8c400044 	addi	r17,r17,1
   21610:	008001c4 	movi	r2,7
   21614:	9f000015 	stw	fp,0(r19)
   21618:	9c000115 	stw	r16,4(r19)
   2161c:	dc800e15 	stw	r18,56(sp)
   21620:	dc400d15 	stw	r17,52(sp)
   21624:	147e720e 	bge	r2,r17,20ff0 <___vfprintf_internal_r+0x7b0>
   21628:	d9014f17 	ldw	r4,1340(sp)
   2162c:	b00b883a 	mov	r5,r22
   21630:	d9800c04 	addi	r6,sp,48
   21634:	00207e80 	call	207e8 <__sprint_r>
   21638:	103e391e 	bne	r2,zero,20f20 <___vfprintf_internal_r+0x6e0>
   2163c:	dc800e17 	ldw	r18,56(sp)
   21640:	dc400d17 	ldw	r17,52(sp)
   21644:	dcc01904 	addi	r19,sp,100
   21648:	003e6a06 	br	20ff4 <___vfprintf_internal_r+0x7b4>
   2164c:	d9014f17 	ldw	r4,1340(sp)
   21650:	b00b883a 	mov	r5,r22
   21654:	d9800c04 	addi	r6,sp,48
   21658:	d9c15115 	stw	r7,1348(sp)
   2165c:	00207e80 	call	207e8 <__sprint_r>
   21660:	d9c15117 	ldw	r7,1348(sp)
   21664:	103e2e1e 	bne	r2,zero,20f20 <___vfprintf_internal_r+0x6e0>
   21668:	dc800e17 	ldw	r18,56(sp)
   2166c:	dc400d17 	ldw	r17,52(sp)
   21670:	dd401904 	addi	r21,sp,100
   21674:	003dba06 	br	20d60 <___vfprintf_internal_r+0x520>
   21678:	d9014f17 	ldw	r4,1340(sp)
   2167c:	b00b883a 	mov	r5,r22
   21680:	d9800c04 	addi	r6,sp,48
   21684:	00207e80 	call	207e8 <__sprint_r>
   21688:	103e251e 	bne	r2,zero,20f20 <___vfprintf_internal_r+0x6e0>
   2168c:	dc800e17 	ldw	r18,56(sp)
   21690:	dc400d17 	ldw	r17,52(sp)
   21694:	dcc01904 	addi	r19,sp,100
   21698:	003e4206 	br	20fa4 <___vfprintf_internal_r+0x764>
   2169c:	d9014f17 	ldw	r4,1340(sp)
   216a0:	b00b883a 	mov	r5,r22
   216a4:	d9800c04 	addi	r6,sp,48
   216a8:	00207e80 	call	207e8 <__sprint_r>
   216ac:	103e1c1e 	bne	r2,zero,20f20 <___vfprintf_internal_r+0x6e0>
   216b0:	dc800e17 	ldw	r18,56(sp)
   216b4:	dc400d17 	ldw	r17,52(sp)
   216b8:	d8c01904 	addi	r3,sp,100
   216bc:	003e2e06 	br	20f78 <___vfprintf_internal_r+0x738>
   216c0:	d9414c17 	ldw	r5,1328(sp)
   216c4:	2880004c 	andi	r2,r5,1
   216c8:	1005003a 	cmpeq	r2,r2,zero
   216cc:	103dda1e 	bne	r2,zero,20e38 <___vfprintf_internal_r+0x5f8>
   216d0:	003e9f06 	br	21150 <___vfprintf_internal_r+0x910>
   216d4:	d8c14117 	ldw	r3,1284(sp)
   216d8:	9125883a 	add	r18,r18,r4
   216dc:	8c400044 	addi	r17,r17,1
   216e0:	008001c4 	movi	r2,7
   216e4:	a8c00015 	stw	r3,0(r21)
   216e8:	a9000115 	stw	r4,4(r21)
   216ec:	dc800e15 	stw	r18,56(sp)
   216f0:	dc400d15 	stw	r17,52(sp)
   216f4:	14426c16 	blt	r2,r17,220a8 <___vfprintf_internal_r+0x1868>
   216f8:	a8c00204 	addi	r3,r21,8
   216fc:	d9414917 	ldw	r5,1316(sp)
   21700:	00800044 	movi	r2,1
   21704:	94800044 	addi	r18,r18,1
   21708:	8c400044 	addi	r17,r17,1
   2170c:	18800115 	stw	r2,4(r3)
   21710:	008001c4 	movi	r2,7
   21714:	19400015 	stw	r5,0(r3)
   21718:	dc800e15 	stw	r18,56(sp)
   2171c:	dc400d15 	stw	r17,52(sp)
   21720:	2021883a 	mov	r16,r4
   21724:	14425616 	blt	r2,r17,22080 <___vfprintf_internal_r+0x1840>
   21728:	19400204 	addi	r5,r3,8
   2172c:	d9814717 	ldw	r6,1308(sp)
   21730:	8c400044 	addi	r17,r17,1
   21734:	dc400d15 	stw	r17,52(sp)
   21738:	3107c83a 	sub	r3,r6,r4
   2173c:	d9014117 	ldw	r4,1284(sp)
   21740:	90e5883a 	add	r18,r18,r3
   21744:	28c00115 	stw	r3,4(r5)
   21748:	8105883a 	add	r2,r16,r4
   2174c:	28800015 	stw	r2,0(r5)
   21750:	008001c4 	movi	r2,7
   21754:	dc800e15 	stw	r18,56(sp)
   21758:	147f1d16 	blt	r2,r17,213d0 <___vfprintf_internal_r+0xb90>
   2175c:	28c00204 	addi	r3,r5,8
   21760:	003db506 	br	20e38 <___vfprintf_internal_r+0x5f8>
   21764:	3c000017 	ldw	r16,0(r7)
   21768:	3c400117 	ldw	r17,4(r7)
   2176c:	39800204 	addi	r6,r7,8
   21770:	01000044 	movi	r4,1
   21774:	d9814015 	stw	r6,1280(sp)
   21778:	d8000405 	stb	zero,16(sp)
   2177c:	003ebe06 	br	21278 <___vfprintf_internal_r+0xa38>
   21780:	3c000017 	ldw	r16,0(r7)
   21784:	3c400117 	ldw	r17,4(r7)
   21788:	38800204 	addi	r2,r7,8
   2178c:	d8814015 	stw	r2,1280(sp)
   21790:	003eb706 	br	21270 <___vfprintf_internal_r+0xa30>
   21794:	3c000017 	ldw	r16,0(r7)
   21798:	3c400117 	ldw	r17,4(r7)
   2179c:	39000204 	addi	r4,r7,8
   217a0:	d9014015 	stw	r4,1280(sp)
   217a4:	0009883a 	mov	r4,zero
   217a8:	d8000405 	stb	zero,16(sp)
   217ac:	003eb206 	br	21278 <___vfprintf_internal_r+0xa38>
   217b0:	38c00017 	ldw	r3,0(r7)
   217b4:	39c00104 	addi	r7,r7,4
   217b8:	d8c14a15 	stw	r3,1320(sp)
   217bc:	1800d70e 	bge	r3,zero,21b1c <___vfprintf_internal_r+0x12dc>
   217c0:	00c7c83a 	sub	r3,zero,r3
   217c4:	d8c14a15 	stw	r3,1320(sp)
   217c8:	d9014c17 	ldw	r4,1328(sp)
   217cc:	b8c00007 	ldb	r3,0(r23)
   217d0:	21000114 	ori	r4,r4,4
   217d4:	d9014c15 	stw	r4,1328(sp)
   217d8:	003c9806 	br	20a3c <___vfprintf_internal_r+0x1fc>
   217dc:	d9814c17 	ldw	r6,1328(sp)
   217e0:	3080080c 	andi	r2,r6,32
   217e4:	1001f626 	beq	r2,zero,21fc0 <___vfprintf_internal_r+0x1780>
   217e8:	d9014b17 	ldw	r4,1324(sp)
   217ec:	38800017 	ldw	r2,0(r7)
   217f0:	39c00104 	addi	r7,r7,4
   217f4:	d9c14015 	stw	r7,1280(sp)
   217f8:	2007d7fa 	srai	r3,r4,31
   217fc:	d9c14017 	ldw	r7,1280(sp)
   21800:	11000015 	stw	r4,0(r2)
   21804:	10c00115 	stw	r3,4(r2)
   21808:	003c6906 	br	209b0 <___vfprintf_internal_r+0x170>
   2180c:	b8c00007 	ldb	r3,0(r23)
   21810:	00801b04 	movi	r2,108
   21814:	18825526 	beq	r3,r2,2216c <___vfprintf_internal_r+0x192c>
   21818:	d9414c17 	ldw	r5,1328(sp)
   2181c:	29400414 	ori	r5,r5,16
   21820:	d9414c15 	stw	r5,1328(sp)
   21824:	003c8506 	br	20a3c <___vfprintf_internal_r+0x1fc>
   21828:	d9814c17 	ldw	r6,1328(sp)
   2182c:	b8c00007 	ldb	r3,0(r23)
   21830:	31800814 	ori	r6,r6,32
   21834:	d9814c15 	stw	r6,1328(sp)
   21838:	003c8006 	br	20a3c <___vfprintf_internal_r+0x1fc>
   2183c:	d8814c17 	ldw	r2,1328(sp)
   21840:	3c000017 	ldw	r16,0(r7)
   21844:	00c01e04 	movi	r3,120
   21848:	10800094 	ori	r2,r2,2
   2184c:	d8814c15 	stw	r2,1328(sp)
   21850:	39c00104 	addi	r7,r7,4
   21854:	014000f4 	movhi	r5,3
   21858:	29732204 	addi	r5,r5,-13176
   2185c:	00800c04 	movi	r2,48
   21860:	0023883a 	mov	r17,zero
   21864:	01000084 	movi	r4,2
   21868:	d9c14015 	stw	r7,1280(sp)
   2186c:	d8c14d15 	stw	r3,1332(sp)
   21870:	d9414415 	stw	r5,1296(sp)
   21874:	d8800445 	stb	r2,17(sp)
   21878:	d8c00485 	stb	r3,18(sp)
   2187c:	d8000405 	stb	zero,16(sp)
   21880:	003e7d06 	br	21278 <___vfprintf_internal_r+0xa38>
   21884:	d8814c17 	ldw	r2,1328(sp)
   21888:	b8c00007 	ldb	r3,0(r23)
   2188c:	10801014 	ori	r2,r2,64
   21890:	d8814c15 	stw	r2,1328(sp)
   21894:	003c6906 	br	20a3c <___vfprintf_internal_r+0x1fc>
   21898:	d9414c17 	ldw	r5,1328(sp)
   2189c:	2880020c 	andi	r2,r5,8
   218a0:	1001e526 	beq	r2,zero,22038 <___vfprintf_internal_r+0x17f8>
   218a4:	39800017 	ldw	r6,0(r7)
   218a8:	38800204 	addi	r2,r7,8
   218ac:	d8814015 	stw	r2,1280(sp)
   218b0:	d9814215 	stw	r6,1288(sp)
   218b4:	39c00117 	ldw	r7,4(r7)
   218b8:	d9c14315 	stw	r7,1292(sp)
   218bc:	d9014217 	ldw	r4,1288(sp)
   218c0:	d9414317 	ldw	r5,1292(sp)
   218c4:	00272f00 	call	272f0 <__isinfd>
   218c8:	10021d26 	beq	r2,zero,22140 <___vfprintf_internal_r+0x1900>
   218cc:	d9014217 	ldw	r4,1288(sp)
   218d0:	d9414317 	ldw	r5,1292(sp)
   218d4:	000d883a 	mov	r6,zero
   218d8:	000f883a 	mov	r7,zero
   218dc:	002948c0 	call	2948c <__ltdf2>
   218e0:	1002d016 	blt	r2,zero,22424 <___vfprintf_internal_r+0x1be4>
   218e4:	d9414d17 	ldw	r5,1332(sp)
   218e8:	008011c4 	movi	r2,71
   218ec:	11421016 	blt	r2,r5,22130 <___vfprintf_internal_r+0x18f0>
   218f0:	018000f4 	movhi	r6,3
   218f4:	31b32704 	addi	r6,r6,-13156
   218f8:	d9814115 	stw	r6,1284(sp)
   218fc:	d9014c17 	ldw	r4,1328(sp)
   21900:	00c000c4 	movi	r3,3
   21904:	00bfdfc4 	movi	r2,-129
   21908:	2088703a 	and	r4,r4,r2
   2190c:	180f883a 	mov	r7,r3
   21910:	d8c14515 	stw	r3,1300(sp)
   21914:	d9014c15 	stw	r4,1328(sp)
   21918:	d8014615 	stw	zero,1304(sp)
   2191c:	003e6a06 	br	212c8 <___vfprintf_internal_r+0xa88>
   21920:	38800017 	ldw	r2,0(r7)
   21924:	00c00044 	movi	r3,1
   21928:	39c00104 	addi	r7,r7,4
   2192c:	d9c14015 	stw	r7,1280(sp)
   21930:	d9000f04 	addi	r4,sp,60
   21934:	180f883a 	mov	r7,r3
   21938:	d8c14515 	stw	r3,1300(sp)
   2193c:	d9014115 	stw	r4,1284(sp)
   21940:	d8800f05 	stb	r2,60(sp)
   21944:	d8000405 	stb	zero,16(sp)
   21948:	003cac06 	br	20bfc <___vfprintf_internal_r+0x3bc>
   2194c:	014000f4 	movhi	r5,3
   21950:	29732d04 	addi	r5,r5,-13132
   21954:	d9414415 	stw	r5,1296(sp)
   21958:	d9814c17 	ldw	r6,1328(sp)
   2195c:	3080080c 	andi	r2,r6,32
   21960:	1000ff26 	beq	r2,zero,21d60 <___vfprintf_internal_r+0x1520>
   21964:	3c000017 	ldw	r16,0(r7)
   21968:	3c400117 	ldw	r17,4(r7)
   2196c:	38800204 	addi	r2,r7,8
   21970:	d8814015 	stw	r2,1280(sp)
   21974:	d9414c17 	ldw	r5,1328(sp)
   21978:	2880004c 	andi	r2,r5,1
   2197c:	1005003a 	cmpeq	r2,r2,zero
   21980:	1000b91e 	bne	r2,zero,21c68 <___vfprintf_internal_r+0x1428>
   21984:	8444b03a 	or	r2,r16,r17
   21988:	1000b726 	beq	r2,zero,21c68 <___vfprintf_internal_r+0x1428>
   2198c:	d9814d17 	ldw	r6,1332(sp)
   21990:	29400094 	ori	r5,r5,2
   21994:	00800c04 	movi	r2,48
   21998:	01000084 	movi	r4,2
   2199c:	d9414c15 	stw	r5,1328(sp)
   219a0:	d8800445 	stb	r2,17(sp)
   219a4:	d9800485 	stb	r6,18(sp)
   219a8:	d8000405 	stb	zero,16(sp)
   219ac:	003e3206 	br	21278 <___vfprintf_internal_r+0xa38>
   219b0:	018000f4 	movhi	r6,3
   219b4:	31b32204 	addi	r6,r6,-13176
   219b8:	d9814415 	stw	r6,1296(sp)
   219bc:	003fe606 	br	21958 <___vfprintf_internal_r+0x1118>
   219c0:	00800ac4 	movi	r2,43
   219c4:	d8800405 	stb	r2,16(sp)
   219c8:	b8c00007 	ldb	r3,0(r23)
   219cc:	003c1b06 	br	20a3c <___vfprintf_internal_r+0x1fc>
   219d0:	d8814c17 	ldw	r2,1328(sp)
   219d4:	b8c00007 	ldb	r3,0(r23)
   219d8:	10800054 	ori	r2,r2,1
   219dc:	d8814c15 	stw	r2,1328(sp)
   219e0:	003c1606 	br	20a3c <___vfprintf_internal_r+0x1fc>
   219e4:	d8800407 	ldb	r2,16(sp)
   219e8:	10004c1e 	bne	r2,zero,21b1c <___vfprintf_internal_r+0x12dc>
   219ec:	00800804 	movi	r2,32
   219f0:	d8800405 	stb	r2,16(sp)
   219f4:	b8c00007 	ldb	r3,0(r23)
   219f8:	003c1006 	br	20a3c <___vfprintf_internal_r+0x1fc>
   219fc:	d9814c17 	ldw	r6,1328(sp)
   21a00:	b8c00007 	ldb	r3,0(r23)
   21a04:	31800214 	ori	r6,r6,8
   21a08:	d9814c15 	stw	r6,1328(sp)
   21a0c:	003c0b06 	br	20a3c <___vfprintf_internal_r+0x1fc>
   21a10:	0009883a 	mov	r4,zero
   21a14:	04000244 	movi	r16,9
   21a18:	01400284 	movi	r5,10
   21a1c:	d9c15115 	stw	r7,1348(sp)
   21a20:	00206100 	call	20610 <__mulsi3>
   21a24:	b9000007 	ldb	r4,0(r23)
   21a28:	d8c14d17 	ldw	r3,1332(sp)
   21a2c:	bdc00044 	addi	r23,r23,1
   21a30:	d9014d15 	stw	r4,1332(sp)
   21a34:	d9414d17 	ldw	r5,1332(sp)
   21a38:	1885883a 	add	r2,r3,r2
   21a3c:	113ff404 	addi	r4,r2,-48
   21a40:	28bff404 	addi	r2,r5,-48
   21a44:	d9c15117 	ldw	r7,1348(sp)
   21a48:	80bff32e 	bgeu	r16,r2,21a18 <___vfprintf_internal_r+0x11d8>
   21a4c:	d9014a15 	stw	r4,1320(sp)
   21a50:	003bfc06 	br	20a44 <___vfprintf_internal_r+0x204>
   21a54:	d8814c17 	ldw	r2,1328(sp)
   21a58:	b8c00007 	ldb	r3,0(r23)
   21a5c:	10802014 	ori	r2,r2,128
   21a60:	d8814c15 	stw	r2,1328(sp)
   21a64:	003bf506 	br	20a3c <___vfprintf_internal_r+0x1fc>
   21a68:	b8c00007 	ldb	r3,0(r23)
   21a6c:	00800a84 	movi	r2,42
   21a70:	bdc00044 	addi	r23,r23,1
   21a74:	18831826 	beq	r3,r2,226d8 <___vfprintf_internal_r+0x1e98>
   21a78:	d8c14d15 	stw	r3,1332(sp)
   21a7c:	18bff404 	addi	r2,r3,-48
   21a80:	00c00244 	movi	r3,9
   21a84:	18827b36 	bltu	r3,r2,22474 <___vfprintf_internal_r+0x1c34>
   21a88:	1821883a 	mov	r16,r3
   21a8c:	0009883a 	mov	r4,zero
   21a90:	01400284 	movi	r5,10
   21a94:	d9c15115 	stw	r7,1348(sp)
   21a98:	00206100 	call	20610 <__mulsi3>
   21a9c:	d9414d17 	ldw	r5,1332(sp)
   21aa0:	b9800007 	ldb	r6,0(r23)
   21aa4:	d9c15117 	ldw	r7,1348(sp)
   21aa8:	1145883a 	add	r2,r2,r5
   21aac:	113ff404 	addi	r4,r2,-48
   21ab0:	30bff404 	addi	r2,r6,-48
   21ab4:	d9814d15 	stw	r6,1332(sp)
   21ab8:	bdc00044 	addi	r23,r23,1
   21abc:	80bff42e 	bgeu	r16,r2,21a90 <___vfprintf_internal_r+0x1250>
   21ac0:	2027883a 	mov	r19,r4
   21ac4:	203bdf0e 	bge	r4,zero,20a44 <___vfprintf_internal_r+0x204>
   21ac8:	04ffffc4 	movi	r19,-1
   21acc:	003bdd06 	br	20a44 <___vfprintf_internal_r+0x204>
   21ad0:	d8000405 	stb	zero,16(sp)
   21ad4:	39800017 	ldw	r6,0(r7)
   21ad8:	39c00104 	addi	r7,r7,4
   21adc:	d9c14015 	stw	r7,1280(sp)
   21ae0:	d9814115 	stw	r6,1284(sp)
   21ae4:	3001c926 	beq	r6,zero,2220c <___vfprintf_internal_r+0x19cc>
   21ae8:	98000e16 	blt	r19,zero,21b24 <___vfprintf_internal_r+0x12e4>
   21aec:	d9014117 	ldw	r4,1284(sp)
   21af0:	000b883a 	mov	r5,zero
   21af4:	980d883a 	mov	r6,r19
   21af8:	00259740 	call	25974 <memchr>
   21afc:	10025926 	beq	r2,zero,22464 <___vfprintf_internal_r+0x1c24>
   21b00:	d8c14117 	ldw	r3,1284(sp)
   21b04:	10cfc83a 	sub	r7,r2,r3
   21b08:	99c19e16 	blt	r19,r7,22184 <___vfprintf_internal_r+0x1944>
   21b0c:	d9c14515 	stw	r7,1300(sp)
   21b10:	38000916 	blt	r7,zero,21b38 <___vfprintf_internal_r+0x12f8>
   21b14:	d8014615 	stw	zero,1304(sp)
   21b18:	003deb06 	br	212c8 <___vfprintf_internal_r+0xa88>
   21b1c:	b8c00007 	ldb	r3,0(r23)
   21b20:	003bc606 	br	20a3c <___vfprintf_internal_r+0x1fc>
   21b24:	d9014117 	ldw	r4,1284(sp)
   21b28:	00207740 	call	20774 <strlen>
   21b2c:	d8814515 	stw	r2,1300(sp)
   21b30:	100f883a 	mov	r7,r2
   21b34:	103ff70e 	bge	r2,zero,21b14 <___vfprintf_internal_r+0x12d4>
   21b38:	d8014515 	stw	zero,1300(sp)
   21b3c:	d8014615 	stw	zero,1304(sp)
   21b40:	003de106 	br	212c8 <___vfprintf_internal_r+0xa88>
   21b44:	20c03fcc 	andi	r3,r4,255
   21b48:	00800044 	movi	r2,1
   21b4c:	18802d26 	beq	r3,r2,21c04 <___vfprintf_internal_r+0x13c4>
   21b50:	18800e36 	bltu	r3,r2,21b8c <___vfprintf_internal_r+0x134c>
   21b54:	00800084 	movi	r2,2
   21b58:	1880fa26 	beq	r3,r2,21f44 <___vfprintf_internal_r+0x1704>
   21b5c:	010000f4 	movhi	r4,3
   21b60:	21333204 	addi	r4,r4,-13112
   21b64:	00207740 	call	20774 <strlen>
   21b68:	100f883a 	mov	r7,r2
   21b6c:	dcc14515 	stw	r19,1300(sp)
   21b70:	9880010e 	bge	r19,r2,21b78 <___vfprintf_internal_r+0x1338>
   21b74:	d8814515 	stw	r2,1300(sp)
   21b78:	008000f4 	movhi	r2,3
   21b7c:	10b33204 	addi	r2,r2,-13112
   21b80:	dcc14615 	stw	r19,1304(sp)
   21b84:	d8814115 	stw	r2,1284(sp)
   21b88:	003dcf06 	br	212c8 <___vfprintf_internal_r+0xa88>
   21b8c:	d9401904 	addi	r5,sp,100
   21b90:	dd000f04 	addi	r20,sp,60
   21b94:	d9414115 	stw	r5,1284(sp)
   21b98:	880a977a 	slli	r5,r17,29
   21b9c:	d9814117 	ldw	r6,1284(sp)
   21ba0:	8004d0fa 	srli	r2,r16,3
   21ba4:	8806d0fa 	srli	r3,r17,3
   21ba8:	810001cc 	andi	r4,r16,7
   21bac:	2884b03a 	or	r2,r5,r2
   21bb0:	31bfffc4 	addi	r6,r6,-1
   21bb4:	21000c04 	addi	r4,r4,48
   21bb8:	d9814115 	stw	r6,1284(sp)
   21bbc:	10cab03a 	or	r5,r2,r3
   21bc0:	31000005 	stb	r4,0(r6)
   21bc4:	1021883a 	mov	r16,r2
   21bc8:	1823883a 	mov	r17,r3
   21bcc:	283ff21e 	bne	r5,zero,21b98 <___vfprintf_internal_r+0x1358>
   21bd0:	d8c14c17 	ldw	r3,1328(sp)
   21bd4:	1880004c 	andi	r2,r3,1
   21bd8:	1005003a 	cmpeq	r2,r2,zero
   21bdc:	103db31e 	bne	r2,zero,212ac <___vfprintf_internal_r+0xa6c>
   21be0:	20803fcc 	andi	r2,r4,255
   21be4:	1080201c 	xori	r2,r2,128
   21be8:	10bfe004 	addi	r2,r2,-128
   21bec:	00c00c04 	movi	r3,48
   21bf0:	10fdae26 	beq	r2,r3,212ac <___vfprintf_internal_r+0xa6c>
   21bf4:	31bfffc4 	addi	r6,r6,-1
   21bf8:	d9814115 	stw	r6,1284(sp)
   21bfc:	30c00005 	stb	r3,0(r6)
   21c00:	003daa06 	br	212ac <___vfprintf_internal_r+0xa6c>
   21c04:	88800068 	cmpgeui	r2,r17,1
   21c08:	10002c1e 	bne	r2,zero,21cbc <___vfprintf_internal_r+0x147c>
   21c0c:	8800021e 	bne	r17,zero,21c18 <___vfprintf_internal_r+0x13d8>
   21c10:	00800244 	movi	r2,9
   21c14:	14002936 	bltu	r2,r16,21cbc <___vfprintf_internal_r+0x147c>
   21c18:	d90018c4 	addi	r4,sp,99
   21c1c:	dd000f04 	addi	r20,sp,60
   21c20:	d9014115 	stw	r4,1284(sp)
   21c24:	d9014117 	ldw	r4,1284(sp)
   21c28:	80800c04 	addi	r2,r16,48
   21c2c:	20800005 	stb	r2,0(r4)
   21c30:	003d9e06 	br	212ac <___vfprintf_internal_r+0xa6c>
   21c34:	dc400d17 	ldw	r17,52(sp)
   21c38:	070000f4 	movhi	fp,3
   21c3c:	e7333984 	addi	fp,fp,-13082
   21c40:	9425883a 	add	r18,r18,r16
   21c44:	8c400044 	addi	r17,r17,1
   21c48:	008001c4 	movi	r2,7
   21c4c:	1f000015 	stw	fp,0(r3)
   21c50:	1c000115 	stw	r16,4(r3)
   21c54:	dc800e15 	stw	r18,56(sp)
   21c58:	dc400d15 	stw	r17,52(sp)
   21c5c:	147ddc16 	blt	r2,r17,213d0 <___vfprintf_internal_r+0xb90>
   21c60:	18c00204 	addi	r3,r3,8
   21c64:	003c7406 	br	20e38 <___vfprintf_internal_r+0x5f8>
   21c68:	01000084 	movi	r4,2
   21c6c:	d8000405 	stb	zero,16(sp)
   21c70:	003d8106 	br	21278 <___vfprintf_internal_r+0xa38>
   21c74:	d9814c17 	ldw	r6,1328(sp)
   21c78:	30c4703a 	and	r2,r6,r3
   21c7c:	1005003a 	cmpeq	r2,r2,zero
   21c80:	103cb326 	beq	r2,zero,20f50 <___vfprintf_internal_r+0x710>
   21c84:	d9014117 	ldw	r4,1284(sp)
   21c88:	94800044 	addi	r18,r18,1
   21c8c:	8c400044 	addi	r17,r17,1
   21c90:	008001c4 	movi	r2,7
   21c94:	a9000015 	stw	r4,0(r21)
   21c98:	a8c00115 	stw	r3,4(r21)
   21c9c:	dc800e15 	stw	r18,56(sp)
   21ca0:	dc400d15 	stw	r17,52(sp)
   21ca4:	147e6016 	blt	r2,r17,21628 <___vfprintf_internal_r+0xde8>
   21ca8:	acc00204 	addi	r19,r21,8
   21cac:	003cd106 	br	20ff4 <___vfprintf_internal_r+0x7b4>
   21cb0:	070000f4 	movhi	fp,3
   21cb4:	e7333984 	addi	fp,fp,-13082
   21cb8:	003c4906 	br	20de0 <___vfprintf_internal_r+0x5a0>
   21cbc:	dd000f04 	addi	r20,sp,60
   21cc0:	dc801904 	addi	r18,sp,100
   21cc4:	8009883a 	mov	r4,r16
   21cc8:	880b883a 	mov	r5,r17
   21ccc:	01800284 	movi	r6,10
   21cd0:	000f883a 	mov	r7,zero
   21cd4:	00280ec0 	call	280ec <__umoddi3>
   21cd8:	12000c04 	addi	r8,r2,48
   21cdc:	94bfffc4 	addi	r18,r18,-1
   21ce0:	8009883a 	mov	r4,r16
   21ce4:	880b883a 	mov	r5,r17
   21ce8:	01800284 	movi	r6,10
   21cec:	000f883a 	mov	r7,zero
   21cf0:	92000005 	stb	r8,0(r18)
   21cf4:	0027a800 	call	27a80 <__udivdi3>
   21cf8:	1009883a 	mov	r4,r2
   21cfc:	1021883a 	mov	r16,r2
   21d00:	18800068 	cmpgeui	r2,r3,1
   21d04:	1823883a 	mov	r17,r3
   21d08:	103fee1e 	bne	r2,zero,21cc4 <___vfprintf_internal_r+0x1484>
   21d0c:	1800021e 	bne	r3,zero,21d18 <___vfprintf_internal_r+0x14d8>
   21d10:	00800244 	movi	r2,9
   21d14:	113feb36 	bltu	r2,r4,21cc4 <___vfprintf_internal_r+0x1484>
   21d18:	94bfffc4 	addi	r18,r18,-1
   21d1c:	dc814115 	stw	r18,1284(sp)
   21d20:	003fc006 	br	21c24 <___vfprintf_internal_r+0x13e4>
   21d24:	d9014c17 	ldw	r4,1328(sp)
   21d28:	2080004c 	andi	r2,r4,1
   21d2c:	10009a1e 	bne	r2,zero,21f98 <___vfprintf_internal_r+0x1758>
   21d30:	d9401904 	addi	r5,sp,100
   21d34:	dd000f04 	addi	r20,sp,60
   21d38:	d9414115 	stw	r5,1284(sp)
   21d3c:	003d5b06 	br	212ac <___vfprintf_internal_r+0xa6c>
   21d40:	d9014f17 	ldw	r4,1340(sp)
   21d44:	b00b883a 	mov	r5,r22
   21d48:	d9800c04 	addi	r6,sp,48
   21d4c:	00207e80 	call	207e8 <__sprint_r>
   21d50:	103c731e 	bne	r2,zero,20f20 <___vfprintf_internal_r+0x6e0>
   21d54:	dc800e17 	ldw	r18,56(sp)
   21d58:	d8c01904 	addi	r3,sp,100
   21d5c:	003cf906 	br	21144 <___vfprintf_internal_r+0x904>
   21d60:	d8c14c17 	ldw	r3,1328(sp)
   21d64:	1880040c 	andi	r2,r3,16
   21d68:	1000711e 	bne	r2,zero,21f30 <___vfprintf_internal_r+0x16f0>
   21d6c:	d9014c17 	ldw	r4,1328(sp)
   21d70:	2080100c 	andi	r2,r4,64
   21d74:	10006e26 	beq	r2,zero,21f30 <___vfprintf_internal_r+0x16f0>
   21d78:	3c00000b 	ldhu	r16,0(r7)
   21d7c:	0023883a 	mov	r17,zero
   21d80:	39c00104 	addi	r7,r7,4
   21d84:	d9c14015 	stw	r7,1280(sp)
   21d88:	003efa06 	br	21974 <___vfprintf_internal_r+0x1134>
   21d8c:	dc400d17 	ldw	r17,52(sp)
   21d90:	070000f4 	movhi	fp,3
   21d94:	e7333984 	addi	fp,fp,-13082
   21d98:	9425883a 	add	r18,r18,r16
   21d9c:	8c400044 	addi	r17,r17,1
   21da0:	008001c4 	movi	r2,7
   21da4:	1f000015 	stw	fp,0(r3)
   21da8:	1c000115 	stw	r16,4(r3)
   21dac:	dc800e15 	stw	r18,56(sp)
   21db0:	dc400d15 	stw	r17,52(sp)
   21db4:	147d7016 	blt	r2,r17,21378 <___vfprintf_internal_r+0xb38>
   21db8:	18c00204 	addi	r3,r3,8
   21dbc:	003d7506 	br	21394 <___vfprintf_internal_r+0xb54>
   21dc0:	dc800e17 	ldw	r18,56(sp)
   21dc4:	dc400d17 	ldw	r17,52(sp)
   21dc8:	070000f4 	movhi	fp,3
   21dcc:	e7333d84 	addi	fp,fp,-13066
   21dd0:	003bba06 	br	20cbc <___vfprintf_internal_r+0x47c>
   21dd4:	d9014f17 	ldw	r4,1340(sp)
   21dd8:	b00b883a 	mov	r5,r22
   21ddc:	d9800c04 	addi	r6,sp,48
   21de0:	00207e80 	call	207e8 <__sprint_r>
   21de4:	103c4e1e 	bne	r2,zero,20f20 <___vfprintf_internal_r+0x6e0>
   21de8:	dc800e17 	ldw	r18,56(sp)
   21dec:	d8c01904 	addi	r3,sp,100
   21df0:	003ce306 	br	21180 <___vfprintf_internal_r+0x940>
   21df4:	3c000017 	ldw	r16,0(r7)
   21df8:	0009883a 	mov	r4,zero
   21dfc:	39c00104 	addi	r7,r7,4
   21e00:	0023883a 	mov	r17,zero
   21e04:	d9c14015 	stw	r7,1280(sp)
   21e08:	d8000405 	stb	zero,16(sp)
   21e0c:	003d1a06 	br	21278 <___vfprintf_internal_r+0xa38>
   21e10:	38800017 	ldw	r2,0(r7)
   21e14:	39c00104 	addi	r7,r7,4
   21e18:	d9c14015 	stw	r7,1280(sp)
   21e1c:	1023d7fa 	srai	r17,r2,31
   21e20:	1021883a 	mov	r16,r2
   21e24:	003d1206 	br	21270 <___vfprintf_internal_r+0xa30>
   21e28:	3c000017 	ldw	r16,0(r7)
   21e2c:	01000044 	movi	r4,1
   21e30:	39c00104 	addi	r7,r7,4
   21e34:	0023883a 	mov	r17,zero
   21e38:	d9c14015 	stw	r7,1280(sp)
   21e3c:	d8000405 	stb	zero,16(sp)
   21e40:	003d0d06 	br	21278 <___vfprintf_internal_r+0xa38>
   21e44:	008000f4 	movhi	r2,3
   21e48:	10b33904 	addi	r2,r2,-13084
   21e4c:	94800044 	addi	r18,r18,1
   21e50:	8c400044 	addi	r17,r17,1
   21e54:	a8800015 	stw	r2,0(r21)
   21e58:	00c00044 	movi	r3,1
   21e5c:	008001c4 	movi	r2,7
   21e60:	a8c00115 	stw	r3,4(r21)
   21e64:	dc800e15 	stw	r18,56(sp)
   21e68:	dc400d15 	stw	r17,52(sp)
   21e6c:	1440ca16 	blt	r2,r17,22198 <___vfprintf_internal_r+0x1958>
   21e70:	a8c00204 	addi	r3,r21,8
   21e74:	2000061e 	bne	r4,zero,21e90 <___vfprintf_internal_r+0x1650>
   21e78:	d9414717 	ldw	r5,1308(sp)
   21e7c:	2800041e 	bne	r5,zero,21e90 <___vfprintf_internal_r+0x1650>
   21e80:	d9814c17 	ldw	r6,1328(sp)
   21e84:	3080004c 	andi	r2,r6,1
   21e88:	1005003a 	cmpeq	r2,r2,zero
   21e8c:	103bea1e 	bne	r2,zero,20e38 <___vfprintf_internal_r+0x5f8>
   21e90:	00800044 	movi	r2,1
   21e94:	dc400d17 	ldw	r17,52(sp)
   21e98:	18800115 	stw	r2,4(r3)
   21e9c:	d8814917 	ldw	r2,1316(sp)
   21ea0:	94800044 	addi	r18,r18,1
   21ea4:	8c400044 	addi	r17,r17,1
   21ea8:	18800015 	stw	r2,0(r3)
   21eac:	008001c4 	movi	r2,7
   21eb0:	dc800e15 	stw	r18,56(sp)
   21eb4:	dc400d15 	stw	r17,52(sp)
   21eb8:	1440ca16 	blt	r2,r17,221e4 <___vfprintf_internal_r+0x19a4>
   21ebc:	18c00204 	addi	r3,r3,8
   21ec0:	0121c83a 	sub	r16,zero,r4
   21ec4:	0400500e 	bge	zero,r16,22008 <___vfprintf_internal_r+0x17c8>
   21ec8:	00800404 	movi	r2,16
   21ecc:	1400800e 	bge	r2,r16,220d0 <___vfprintf_internal_r+0x1890>
   21ed0:	1027883a 	mov	r19,r2
   21ed4:	070000f4 	movhi	fp,3
   21ed8:	e7333984 	addi	fp,fp,-13082
   21edc:	050001c4 	movi	r20,7
   21ee0:	00000306 	br	21ef0 <___vfprintf_internal_r+0x16b0>
   21ee4:	18c00204 	addi	r3,r3,8
   21ee8:	843ffc04 	addi	r16,r16,-16
   21eec:	9c007a0e 	bge	r19,r16,220d8 <___vfprintf_internal_r+0x1898>
   21ef0:	94800404 	addi	r18,r18,16
   21ef4:	8c400044 	addi	r17,r17,1
   21ef8:	1f000015 	stw	fp,0(r3)
   21efc:	1cc00115 	stw	r19,4(r3)
   21f00:	dc800e15 	stw	r18,56(sp)
   21f04:	dc400d15 	stw	r17,52(sp)
   21f08:	a47ff60e 	bge	r20,r17,21ee4 <___vfprintf_internal_r+0x16a4>
   21f0c:	d9014f17 	ldw	r4,1340(sp)
   21f10:	b00b883a 	mov	r5,r22
   21f14:	d9800c04 	addi	r6,sp,48
   21f18:	00207e80 	call	207e8 <__sprint_r>
   21f1c:	103c001e 	bne	r2,zero,20f20 <___vfprintf_internal_r+0x6e0>
   21f20:	dc800e17 	ldw	r18,56(sp)
   21f24:	dc400d17 	ldw	r17,52(sp)
   21f28:	d8c01904 	addi	r3,sp,100
   21f2c:	003fee06 	br	21ee8 <___vfprintf_internal_r+0x16a8>
   21f30:	3c000017 	ldw	r16,0(r7)
   21f34:	0023883a 	mov	r17,zero
   21f38:	39c00104 	addi	r7,r7,4
   21f3c:	d9c14015 	stw	r7,1280(sp)
   21f40:	003e8c06 	br	21974 <___vfprintf_internal_r+0x1134>
   21f44:	d9401904 	addi	r5,sp,100
   21f48:	dd000f04 	addi	r20,sp,60
   21f4c:	d9414115 	stw	r5,1284(sp)
   21f50:	d9814417 	ldw	r6,1296(sp)
   21f54:	880a973a 	slli	r5,r17,28
   21f58:	8004d13a 	srli	r2,r16,4
   21f5c:	810003cc 	andi	r4,r16,15
   21f60:	3109883a 	add	r4,r6,r4
   21f64:	2884b03a 	or	r2,r5,r2
   21f68:	21400003 	ldbu	r5,0(r4)
   21f6c:	d9014117 	ldw	r4,1284(sp)
   21f70:	8806d13a 	srli	r3,r17,4
   21f74:	1021883a 	mov	r16,r2
   21f78:	213fffc4 	addi	r4,r4,-1
   21f7c:	d9014115 	stw	r4,1284(sp)
   21f80:	d9814117 	ldw	r6,1284(sp)
   21f84:	10c8b03a 	or	r4,r2,r3
   21f88:	1823883a 	mov	r17,r3
   21f8c:	31400005 	stb	r5,0(r6)
   21f90:	203fef1e 	bne	r4,zero,21f50 <___vfprintf_internal_r+0x1710>
   21f94:	003cc506 	br	212ac <___vfprintf_internal_r+0xa6c>
   21f98:	00800c04 	movi	r2,48
   21f9c:	d98018c4 	addi	r6,sp,99
   21fa0:	dd000f04 	addi	r20,sp,60
   21fa4:	d88018c5 	stb	r2,99(sp)
   21fa8:	d9814115 	stw	r6,1284(sp)
   21fac:	003cbf06 	br	212ac <___vfprintf_internal_r+0xa6c>
   21fb0:	dc400d17 	ldw	r17,52(sp)
   21fb4:	070000f4 	movhi	fp,3
   21fb8:	e7333d84 	addi	fp,fp,-13066
   21fbc:	003bc106 	br	20ec4 <___vfprintf_internal_r+0x684>
   21fc0:	d9414c17 	ldw	r5,1328(sp)
   21fc4:	2880040c 	andi	r2,r5,16
   21fc8:	10007c26 	beq	r2,zero,221bc <___vfprintf_internal_r+0x197c>
   21fcc:	38800017 	ldw	r2,0(r7)
   21fd0:	39c00104 	addi	r7,r7,4
   21fd4:	d9c14015 	stw	r7,1280(sp)
   21fd8:	d9814b17 	ldw	r6,1324(sp)
   21fdc:	d9c14017 	ldw	r7,1280(sp)
   21fe0:	11800015 	stw	r6,0(r2)
   21fe4:	003a7206 	br	209b0 <___vfprintf_internal_r+0x170>
   21fe8:	d9014f17 	ldw	r4,1340(sp)
   21fec:	b00b883a 	mov	r5,r22
   21ff0:	d9800c04 	addi	r6,sp,48
   21ff4:	00207e80 	call	207e8 <__sprint_r>
   21ff8:	103bc91e 	bne	r2,zero,20f20 <___vfprintf_internal_r+0x6e0>
   21ffc:	dc800e17 	ldw	r18,56(sp)
   22000:	dc400d17 	ldw	r17,52(sp)
   22004:	d8c01904 	addi	r3,sp,100
   22008:	d9014717 	ldw	r4,1308(sp)
   2200c:	d9414117 	ldw	r5,1284(sp)
   22010:	8c400044 	addi	r17,r17,1
   22014:	9125883a 	add	r18,r18,r4
   22018:	008001c4 	movi	r2,7
   2201c:	19400015 	stw	r5,0(r3)
   22020:	19000115 	stw	r4,4(r3)
   22024:	dc800e15 	stw	r18,56(sp)
   22028:	dc400d15 	stw	r17,52(sp)
   2202c:	147ce816 	blt	r2,r17,213d0 <___vfprintf_internal_r+0xb90>
   22030:	18c00204 	addi	r3,r3,8
   22034:	003b8006 	br	20e38 <___vfprintf_internal_r+0x5f8>
   22038:	38c00017 	ldw	r3,0(r7)
   2203c:	39000204 	addi	r4,r7,8
   22040:	d9014015 	stw	r4,1280(sp)
   22044:	d8c14215 	stw	r3,1288(sp)
   22048:	39c00117 	ldw	r7,4(r7)
   2204c:	d9c14315 	stw	r7,1292(sp)
   22050:	003e1a06 	br	218bc <___vfprintf_internal_r+0x107c>
   22054:	0005883a 	mov	r2,zero
   22058:	1409c83a 	sub	r4,r2,r16
   2205c:	1105803a 	cmpltu	r2,r2,r4
   22060:	044bc83a 	sub	r5,zero,r17
   22064:	2885c83a 	sub	r2,r5,r2
   22068:	2021883a 	mov	r16,r4
   2206c:	1023883a 	mov	r17,r2
   22070:	01000044 	movi	r4,1
   22074:	00800b44 	movi	r2,45
   22078:	d8800405 	stb	r2,16(sp)
   2207c:	003c7e06 	br	21278 <___vfprintf_internal_r+0xa38>
   22080:	d9014f17 	ldw	r4,1340(sp)
   22084:	b00b883a 	mov	r5,r22
   22088:	d9800c04 	addi	r6,sp,48
   2208c:	00207e80 	call	207e8 <__sprint_r>
   22090:	103ba31e 	bne	r2,zero,20f20 <___vfprintf_internal_r+0x6e0>
   22094:	dc800e17 	ldw	r18,56(sp)
   22098:	dc400d17 	ldw	r17,52(sp)
   2209c:	d9000517 	ldw	r4,20(sp)
   220a0:	d9401904 	addi	r5,sp,100
   220a4:	003da106 	br	2172c <___vfprintf_internal_r+0xeec>
   220a8:	d9014f17 	ldw	r4,1340(sp)
   220ac:	b00b883a 	mov	r5,r22
   220b0:	d9800c04 	addi	r6,sp,48
   220b4:	00207e80 	call	207e8 <__sprint_r>
   220b8:	103b991e 	bne	r2,zero,20f20 <___vfprintf_internal_r+0x6e0>
   220bc:	dc800e17 	ldw	r18,56(sp)
   220c0:	dc400d17 	ldw	r17,52(sp)
   220c4:	d9000517 	ldw	r4,20(sp)
   220c8:	d8c01904 	addi	r3,sp,100
   220cc:	003d8b06 	br	216fc <___vfprintf_internal_r+0xebc>
   220d0:	070000f4 	movhi	fp,3
   220d4:	e7333984 	addi	fp,fp,-13082
   220d8:	9425883a 	add	r18,r18,r16
   220dc:	8c400044 	addi	r17,r17,1
   220e0:	008001c4 	movi	r2,7
   220e4:	1f000015 	stw	fp,0(r3)
   220e8:	1c000115 	stw	r16,4(r3)
   220ec:	dc800e15 	stw	r18,56(sp)
   220f0:	dc400d15 	stw	r17,52(sp)
   220f4:	147fbc16 	blt	r2,r17,21fe8 <___vfprintf_internal_r+0x17a8>
   220f8:	18c00204 	addi	r3,r3,8
   220fc:	003fc206 	br	22008 <___vfprintf_internal_r+0x17c8>
   22100:	d9014f17 	ldw	r4,1340(sp)
   22104:	b00b883a 	mov	r5,r22
   22108:	d9800c04 	addi	r6,sp,48
   2210c:	00207e80 	call	207e8 <__sprint_r>
   22110:	103b831e 	bne	r2,zero,20f20 <___vfprintf_internal_r+0x6e0>
   22114:	dc800e17 	ldw	r18,56(sp)
   22118:	d9000517 	ldw	r4,20(sp)
   2211c:	d8c01904 	addi	r3,sp,100
   22120:	003cfc06 	br	21514 <___vfprintf_internal_r+0xcd4>
   22124:	070000f4 	movhi	fp,3
   22128:	e7333984 	addi	fp,fp,-13082
   2212c:	003bde06 	br	210a8 <___vfprintf_internal_r+0x868>
   22130:	008000f4 	movhi	r2,3
   22134:	10b32804 	addi	r2,r2,-13152
   22138:	d8814115 	stw	r2,1284(sp)
   2213c:	003def06 	br	218fc <___vfprintf_internal_r+0x10bc>
   22140:	d9014217 	ldw	r4,1288(sp)
   22144:	d9414317 	ldw	r5,1292(sp)
   22148:	00273300 	call	27330 <__isnand>
   2214c:	10003926 	beq	r2,zero,22234 <___vfprintf_internal_r+0x19f4>
   22150:	d9414d17 	ldw	r5,1332(sp)
   22154:	008011c4 	movi	r2,71
   22158:	1140ce16 	blt	r2,r5,22494 <___vfprintf_internal_r+0x1c54>
   2215c:	018000f4 	movhi	r6,3
   22160:	31b32904 	addi	r6,r6,-13148
   22164:	d9814115 	stw	r6,1284(sp)
   22168:	003de406 	br	218fc <___vfprintf_internal_r+0x10bc>
   2216c:	d9014c17 	ldw	r4,1328(sp)
   22170:	bdc00044 	addi	r23,r23,1
   22174:	b8c00007 	ldb	r3,0(r23)
   22178:	21000814 	ori	r4,r4,32
   2217c:	d9014c15 	stw	r4,1328(sp)
   22180:	003a2e06 	br	20a3c <___vfprintf_internal_r+0x1fc>
   22184:	dcc14515 	stw	r19,1300(sp)
   22188:	98011016 	blt	r19,zero,225cc <___vfprintf_internal_r+0x1d8c>
   2218c:	980f883a 	mov	r7,r19
   22190:	d8014615 	stw	zero,1304(sp)
   22194:	003c4c06 	br	212c8 <___vfprintf_internal_r+0xa88>
   22198:	d9014f17 	ldw	r4,1340(sp)
   2219c:	b00b883a 	mov	r5,r22
   221a0:	d9800c04 	addi	r6,sp,48
   221a4:	00207e80 	call	207e8 <__sprint_r>
   221a8:	103b5d1e 	bne	r2,zero,20f20 <___vfprintf_internal_r+0x6e0>
   221ac:	dc800e17 	ldw	r18,56(sp)
   221b0:	d9000517 	ldw	r4,20(sp)
   221b4:	d8c01904 	addi	r3,sp,100
   221b8:	003f2e06 	br	21e74 <___vfprintf_internal_r+0x1634>
   221bc:	d8c14c17 	ldw	r3,1328(sp)
   221c0:	1880100c 	andi	r2,r3,64
   221c4:	1000a026 	beq	r2,zero,22448 <___vfprintf_internal_r+0x1c08>
   221c8:	38800017 	ldw	r2,0(r7)
   221cc:	39c00104 	addi	r7,r7,4
   221d0:	d9c14015 	stw	r7,1280(sp)
   221d4:	d9014b17 	ldw	r4,1324(sp)
   221d8:	d9c14017 	ldw	r7,1280(sp)
   221dc:	1100000d 	sth	r4,0(r2)
   221e0:	0039f306 	br	209b0 <___vfprintf_internal_r+0x170>
   221e4:	d9014f17 	ldw	r4,1340(sp)
   221e8:	b00b883a 	mov	r5,r22
   221ec:	d9800c04 	addi	r6,sp,48
   221f0:	00207e80 	call	207e8 <__sprint_r>
   221f4:	103b4a1e 	bne	r2,zero,20f20 <___vfprintf_internal_r+0x6e0>
   221f8:	dc800e17 	ldw	r18,56(sp)
   221fc:	dc400d17 	ldw	r17,52(sp)
   22200:	d9000517 	ldw	r4,20(sp)
   22204:	d8c01904 	addi	r3,sp,100
   22208:	003f2d06 	br	21ec0 <___vfprintf_internal_r+0x1680>
   2220c:	00800184 	movi	r2,6
   22210:	14c09a36 	bltu	r2,r19,2247c <___vfprintf_internal_r+0x1c3c>
   22214:	dcc14515 	stw	r19,1300(sp)
   22218:	9800010e 	bge	r19,zero,22220 <___vfprintf_internal_r+0x19e0>
   2221c:	d8014515 	stw	zero,1300(sp)
   22220:	008000f4 	movhi	r2,3
   22224:	10b32b04 	addi	r2,r2,-13140
   22228:	980f883a 	mov	r7,r19
   2222c:	d8814115 	stw	r2,1284(sp)
   22230:	003a7206 	br	20bfc <___vfprintf_internal_r+0x3bc>
   22234:	00bfffc4 	movi	r2,-1
   22238:	9880e226 	beq	r19,r2,225c4 <___vfprintf_internal_r+0x1d84>
   2223c:	d9414d17 	ldw	r5,1332(sp)
   22240:	008019c4 	movi	r2,103
   22244:	2880dc26 	beq	r5,r2,225b8 <___vfprintf_internal_r+0x1d78>
   22248:	008011c4 	movi	r2,71
   2224c:	2880da26 	beq	r5,r2,225b8 <___vfprintf_internal_r+0x1d78>
   22250:	d9414c17 	ldw	r5,1328(sp)
   22254:	d9014317 	ldw	r4,1292(sp)
   22258:	d9814217 	ldw	r6,1288(sp)
   2225c:	29404014 	ori	r5,r5,256
   22260:	d9414c15 	stw	r5,1328(sp)
   22264:	2000cc16 	blt	r4,zero,22598 <___vfprintf_internal_r+0x1d58>
   22268:	3021883a 	mov	r16,r6
   2226c:	2023883a 	mov	r17,r4
   22270:	0039883a 	mov	fp,zero
   22274:	d9414d17 	ldw	r5,1332(sp)
   22278:	00801984 	movi	r2,102
   2227c:	2880b726 	beq	r5,r2,2255c <___vfprintf_internal_r+0x1d1c>
   22280:	00801184 	movi	r2,70
   22284:	2880b526 	beq	r5,r2,2255c <___vfprintf_internal_r+0x1d1c>
   22288:	00801944 	movi	r2,101
   2228c:	2880c826 	beq	r5,r2,225b0 <___vfprintf_internal_r+0x1d70>
   22290:	00801144 	movi	r2,69
   22294:	2880c626 	beq	r5,r2,225b0 <___vfprintf_internal_r+0x1d70>
   22298:	9829883a 	mov	r20,r19
   2229c:	d9014f17 	ldw	r4,1340(sp)
   222a0:	d8800504 	addi	r2,sp,20
   222a4:	880d883a 	mov	r6,r17
   222a8:	d8800115 	stw	r2,4(sp)
   222ac:	d8c00604 	addi	r3,sp,24
   222b0:	d8800704 	addi	r2,sp,28
   222b4:	800b883a 	mov	r5,r16
   222b8:	01c00084 	movi	r7,2
   222bc:	d8c00215 	stw	r3,8(sp)
   222c0:	d8800315 	stw	r2,12(sp)
   222c4:	dd000015 	stw	r20,0(sp)
   222c8:	0022aa80 	call	22aa8 <_dtoa_r>
   222cc:	d9814d17 	ldw	r6,1332(sp)
   222d0:	d8814115 	stw	r2,1284(sp)
   222d4:	008019c4 	movi	r2,103
   222d8:	30809526 	beq	r6,r2,22530 <___vfprintf_internal_r+0x1cf0>
   222dc:	d8c14d17 	ldw	r3,1332(sp)
   222e0:	008011c4 	movi	r2,71
   222e4:	18809226 	beq	r3,r2,22530 <___vfprintf_internal_r+0x1cf0>
   222e8:	d9414117 	ldw	r5,1284(sp)
   222ec:	d9814d17 	ldw	r6,1332(sp)
   222f0:	00801984 	movi	r2,102
   222f4:	2d25883a 	add	r18,r5,r20
   222f8:	30808626 	beq	r6,r2,22514 <___vfprintf_internal_r+0x1cd4>
   222fc:	00801184 	movi	r2,70
   22300:	30808426 	beq	r6,r2,22514 <___vfprintf_internal_r+0x1cd4>
   22304:	000d883a 	mov	r6,zero
   22308:	000f883a 	mov	r7,zero
   2230c:	880b883a 	mov	r5,r17
   22310:	8009883a 	mov	r4,r16
   22314:	002926c0 	call	2926c <__eqdf2>
   22318:	1000751e 	bne	r2,zero,224f0 <___vfprintf_internal_r+0x1cb0>
   2231c:	9005883a 	mov	r2,r18
   22320:	dc800715 	stw	r18,28(sp)
   22324:	d9014117 	ldw	r4,1284(sp)
   22328:	d9414d17 	ldw	r5,1332(sp)
   2232c:	00c019c4 	movi	r3,103
   22330:	1125c83a 	sub	r18,r2,r4
   22334:	28c06826 	beq	r5,r3,224d8 <___vfprintf_internal_r+0x1c98>
   22338:	008011c4 	movi	r2,71
   2233c:	28806626 	beq	r5,r2,224d8 <___vfprintf_internal_r+0x1c98>
   22340:	d9000517 	ldw	r4,20(sp)
   22344:	d8c14d17 	ldw	r3,1332(sp)
   22348:	00801944 	movi	r2,101
   2234c:	10c05516 	blt	r2,r3,224a4 <___vfprintf_internal_r+0x1c64>
   22350:	213fffc4 	addi	r4,r4,-1
   22354:	d9000515 	stw	r4,20(sp)
   22358:	d8c00805 	stb	r3,32(sp)
   2235c:	2021883a 	mov	r16,r4
   22360:	2000c116 	blt	r4,zero,22668 <___vfprintf_internal_r+0x1e28>
   22364:	00800ac4 	movi	r2,43
   22368:	d8800845 	stb	r2,33(sp)
   2236c:	00800244 	movi	r2,9
   22370:	1400af0e 	bge	r2,r16,22630 <___vfprintf_internal_r+0x1df0>
   22374:	1027883a 	mov	r19,r2
   22378:	dc400b84 	addi	r17,sp,46
   2237c:	8009883a 	mov	r4,r16
   22380:	01400284 	movi	r5,10
   22384:	00299540 	call	29954 <__modsi3>
   22388:	10800c04 	addi	r2,r2,48
   2238c:	8c7fffc4 	addi	r17,r17,-1
   22390:	8009883a 	mov	r4,r16
   22394:	01400284 	movi	r5,10
   22398:	88800005 	stb	r2,0(r17)
   2239c:	00298f40 	call	298f4 <__divsi3>
   223a0:	1021883a 	mov	r16,r2
   223a4:	98bff516 	blt	r19,r2,2237c <___vfprintf_internal_r+0x1b3c>
   223a8:	10c00c04 	addi	r3,r2,48
   223ac:	d88009c4 	addi	r2,sp,39
   223b0:	108001c4 	addi	r2,r2,7
   223b4:	897fffc4 	addi	r5,r17,-1
   223b8:	88ffffc5 	stb	r3,-1(r17)
   223bc:	2880a72e 	bgeu	r5,r2,2265c <___vfprintf_internal_r+0x1e1c>
   223c0:	1009883a 	mov	r4,r2
   223c4:	d9800804 	addi	r6,sp,32
   223c8:	d8c00884 	addi	r3,sp,34
   223cc:	28800003 	ldbu	r2,0(r5)
   223d0:	29400044 	addi	r5,r5,1
   223d4:	18800005 	stb	r2,0(r3)
   223d8:	18c00044 	addi	r3,r3,1
   223dc:	293ffb36 	bltu	r5,r4,223cc <___vfprintf_internal_r+0x1b8c>
   223e0:	1987c83a 	sub	r3,r3,r6
   223e4:	00800044 	movi	r2,1
   223e8:	d8c14815 	stw	r3,1312(sp)
   223ec:	90cf883a 	add	r7,r18,r3
   223f0:	1480960e 	bge	r2,r18,2264c <___vfprintf_internal_r+0x1e0c>
   223f4:	39c00044 	addi	r7,r7,1
   223f8:	d9c14515 	stw	r7,1300(sp)
   223fc:	38003416 	blt	r7,zero,224d0 <___vfprintf_internal_r+0x1c90>
   22400:	e0803fcc 	andi	r2,fp,255
   22404:	1080201c 	xori	r2,r2,128
   22408:	10bfe004 	addi	r2,r2,-128
   2240c:	10004e26 	beq	r2,zero,22548 <___vfprintf_internal_r+0x1d08>
   22410:	00800b44 	movi	r2,45
   22414:	dc814715 	stw	r18,1308(sp)
   22418:	d8014615 	stw	zero,1304(sp)
   2241c:	d8800405 	stb	r2,16(sp)
   22420:	003bab06 	br	212d0 <___vfprintf_internal_r+0xa90>
   22424:	00800b44 	movi	r2,45
   22428:	d8800405 	stb	r2,16(sp)
   2242c:	003d2d06 	br	218e4 <___vfprintf_internal_r+0x10a4>
   22430:	d9014f17 	ldw	r4,1340(sp)
   22434:	b00b883a 	mov	r5,r22
   22438:	d9800c04 	addi	r6,sp,48
   2243c:	00207e80 	call	207e8 <__sprint_r>
   22440:	103ab71e 	bne	r2,zero,20f20 <___vfprintf_internal_r+0x6e0>
   22444:	003ab506 	br	20f1c <___vfprintf_internal_r+0x6dc>
   22448:	38800017 	ldw	r2,0(r7)
   2244c:	39c00104 	addi	r7,r7,4
   22450:	d9c14015 	stw	r7,1280(sp)
   22454:	d9414b17 	ldw	r5,1324(sp)
   22458:	d9c14017 	ldw	r7,1280(sp)
   2245c:	11400015 	stw	r5,0(r2)
   22460:	00395306 	br	209b0 <___vfprintf_internal_r+0x170>
   22464:	980f883a 	mov	r7,r19
   22468:	dcc14515 	stw	r19,1300(sp)
   2246c:	d8014615 	stw	zero,1304(sp)
   22470:	003b9506 	br	212c8 <___vfprintf_internal_r+0xa88>
   22474:	0027883a 	mov	r19,zero
   22478:	00397206 	br	20a44 <___vfprintf_internal_r+0x204>
   2247c:	00c000f4 	movhi	r3,3
   22480:	18f32b04 	addi	r3,r3,-13140
   22484:	100f883a 	mov	r7,r2
   22488:	d8814515 	stw	r2,1300(sp)
   2248c:	d8c14115 	stw	r3,1284(sp)
   22490:	0039da06 	br	20bfc <___vfprintf_internal_r+0x3bc>
   22494:	008000f4 	movhi	r2,3
   22498:	10b32a04 	addi	r2,r2,-13144
   2249c:	d8814115 	stw	r2,1284(sp)
   224a0:	003d1606 	br	218fc <___vfprintf_internal_r+0x10bc>
   224a4:	d9414d17 	ldw	r5,1332(sp)
   224a8:	00801984 	movi	r2,102
   224ac:	28804926 	beq	r5,r2,225d4 <___vfprintf_internal_r+0x1d94>
   224b0:	200f883a 	mov	r7,r4
   224b4:	24805716 	blt	r4,r18,22614 <___vfprintf_internal_r+0x1dd4>
   224b8:	d9414c17 	ldw	r5,1328(sp)
   224bc:	2880004c 	andi	r2,r5,1
   224c0:	10000126 	beq	r2,zero,224c8 <___vfprintf_internal_r+0x1c88>
   224c4:	21c00044 	addi	r7,r4,1
   224c8:	d9c14515 	stw	r7,1300(sp)
   224cc:	383fcc0e 	bge	r7,zero,22400 <___vfprintf_internal_r+0x1bc0>
   224d0:	d8014515 	stw	zero,1300(sp)
   224d4:	003fca06 	br	22400 <___vfprintf_internal_r+0x1bc0>
   224d8:	d9000517 	ldw	r4,20(sp)
   224dc:	00bfff04 	movi	r2,-4
   224e0:	1100480e 	bge	r2,r4,22604 <___vfprintf_internal_r+0x1dc4>
   224e4:	99004716 	blt	r19,r4,22604 <___vfprintf_internal_r+0x1dc4>
   224e8:	d8c14d15 	stw	r3,1332(sp)
   224ec:	003ff006 	br	224b0 <___vfprintf_internal_r+0x1c70>
   224f0:	d8800717 	ldw	r2,28(sp)
   224f4:	14bf8b2e 	bgeu	r2,r18,22324 <___vfprintf_internal_r+0x1ae4>
   224f8:	9007883a 	mov	r3,r18
   224fc:	01000c04 	movi	r4,48
   22500:	11000005 	stb	r4,0(r2)
   22504:	10800044 	addi	r2,r2,1
   22508:	d8800715 	stw	r2,28(sp)
   2250c:	18bffc1e 	bne	r3,r2,22500 <___vfprintf_internal_r+0x1cc0>
   22510:	003f8406 	br	22324 <___vfprintf_internal_r+0x1ae4>
   22514:	d8814117 	ldw	r2,1284(sp)
   22518:	10c00007 	ldb	r3,0(r2)
   2251c:	00800c04 	movi	r2,48
   22520:	18805b26 	beq	r3,r2,22690 <___vfprintf_internal_r+0x1e50>
   22524:	d9000517 	ldw	r4,20(sp)
   22528:	9125883a 	add	r18,r18,r4
   2252c:	003f7506 	br	22304 <___vfprintf_internal_r+0x1ac4>
   22530:	d9014c17 	ldw	r4,1328(sp)
   22534:	2080004c 	andi	r2,r4,1
   22538:	1005003a 	cmpeq	r2,r2,zero
   2253c:	103f6a26 	beq	r2,zero,222e8 <___vfprintf_internal_r+0x1aa8>
   22540:	d8800717 	ldw	r2,28(sp)
   22544:	003f7706 	br	22324 <___vfprintf_internal_r+0x1ae4>
   22548:	d9c14515 	stw	r7,1300(sp)
   2254c:	38004d16 	blt	r7,zero,22684 <___vfprintf_internal_r+0x1e44>
   22550:	dc814715 	stw	r18,1308(sp)
   22554:	d8014615 	stw	zero,1304(sp)
   22558:	003b5b06 	br	212c8 <___vfprintf_internal_r+0xa88>
   2255c:	d9014f17 	ldw	r4,1340(sp)
   22560:	d8800504 	addi	r2,sp,20
   22564:	d8800115 	stw	r2,4(sp)
   22568:	d8c00604 	addi	r3,sp,24
   2256c:	d8800704 	addi	r2,sp,28
   22570:	800b883a 	mov	r5,r16
   22574:	880d883a 	mov	r6,r17
   22578:	01c000c4 	movi	r7,3
   2257c:	d8c00215 	stw	r3,8(sp)
   22580:	d8800315 	stw	r2,12(sp)
   22584:	dcc00015 	stw	r19,0(sp)
   22588:	9829883a 	mov	r20,r19
   2258c:	0022aa80 	call	22aa8 <_dtoa_r>
   22590:	d8814115 	stw	r2,1284(sp)
   22594:	003f5106 	br	222dc <___vfprintf_internal_r+0x1a9c>
   22598:	d8c14217 	ldw	r3,1288(sp)
   2259c:	d9014317 	ldw	r4,1292(sp)
   225a0:	07000b44 	movi	fp,45
   225a4:	1821883a 	mov	r16,r3
   225a8:	2460003c 	xorhi	r17,r4,32768
   225ac:	003f3106 	br	22274 <___vfprintf_internal_r+0x1a34>
   225b0:	9d000044 	addi	r20,r19,1
   225b4:	003f3906 	br	2229c <___vfprintf_internal_r+0x1a5c>
   225b8:	983f251e 	bne	r19,zero,22250 <___vfprintf_internal_r+0x1a10>
   225bc:	04c00044 	movi	r19,1
   225c0:	003f2306 	br	22250 <___vfprintf_internal_r+0x1a10>
   225c4:	04c00184 	movi	r19,6
   225c8:	003f2106 	br	22250 <___vfprintf_internal_r+0x1a10>
   225cc:	d8014515 	stw	zero,1300(sp)
   225d0:	003eee06 	br	2218c <___vfprintf_internal_r+0x194c>
   225d4:	200f883a 	mov	r7,r4
   225d8:	0100370e 	bge	zero,r4,226b8 <___vfprintf_internal_r+0x1e78>
   225dc:	9800031e 	bne	r19,zero,225ec <___vfprintf_internal_r+0x1dac>
   225e0:	d9814c17 	ldw	r6,1328(sp)
   225e4:	3080004c 	andi	r2,r6,1
   225e8:	103fb726 	beq	r2,zero,224c8 <___vfprintf_internal_r+0x1c88>
   225ec:	20800044 	addi	r2,r4,1
   225f0:	98a7883a 	add	r19,r19,r2
   225f4:	dcc14515 	stw	r19,1300(sp)
   225f8:	980f883a 	mov	r7,r19
   225fc:	983f800e 	bge	r19,zero,22400 <___vfprintf_internal_r+0x1bc0>
   22600:	003fb306 	br	224d0 <___vfprintf_internal_r+0x1c90>
   22604:	d9814d17 	ldw	r6,1332(sp)
   22608:	31bfff84 	addi	r6,r6,-2
   2260c:	d9814d15 	stw	r6,1332(sp)
   22610:	003f4c06 	br	22344 <___vfprintf_internal_r+0x1b04>
   22614:	0100180e 	bge	zero,r4,22678 <___vfprintf_internal_r+0x1e38>
   22618:	00800044 	movi	r2,1
   2261c:	1485883a 	add	r2,r2,r18
   22620:	d8814515 	stw	r2,1300(sp)
   22624:	100f883a 	mov	r7,r2
   22628:	103f750e 	bge	r2,zero,22400 <___vfprintf_internal_r+0x1bc0>
   2262c:	003fa806 	br	224d0 <___vfprintf_internal_r+0x1c90>
   22630:	80c00c04 	addi	r3,r16,48
   22634:	00800c04 	movi	r2,48
   22638:	d8c008c5 	stb	r3,35(sp)
   2263c:	d9800804 	addi	r6,sp,32
   22640:	d8c00904 	addi	r3,sp,36
   22644:	d8800885 	stb	r2,34(sp)
   22648:	003f6506 	br	223e0 <___vfprintf_internal_r+0x1ba0>
   2264c:	d9014c17 	ldw	r4,1328(sp)
   22650:	2084703a 	and	r2,r4,r2
   22654:	103f9c26 	beq	r2,zero,224c8 <___vfprintf_internal_r+0x1c88>
   22658:	003f6606 	br	223f4 <___vfprintf_internal_r+0x1bb4>
   2265c:	d9800804 	addi	r6,sp,32
   22660:	d8c00884 	addi	r3,sp,34
   22664:	003f5e06 	br	223e0 <___vfprintf_internal_r+0x1ba0>
   22668:	00800b44 	movi	r2,45
   2266c:	0121c83a 	sub	r16,zero,r4
   22670:	d8800845 	stb	r2,33(sp)
   22674:	003f3d06 	br	2236c <___vfprintf_internal_r+0x1b2c>
   22678:	00800084 	movi	r2,2
   2267c:	1105c83a 	sub	r2,r2,r4
   22680:	003fe606 	br	2261c <___vfprintf_internal_r+0x1ddc>
   22684:	d8014515 	stw	zero,1300(sp)
   22688:	dc814715 	stw	r18,1308(sp)
   2268c:	003fb106 	br	22554 <___vfprintf_internal_r+0x1d14>
   22690:	000d883a 	mov	r6,zero
   22694:	000f883a 	mov	r7,zero
   22698:	8009883a 	mov	r4,r16
   2269c:	880b883a 	mov	r5,r17
   226a0:	00292f40 	call	292f4 <__nedf2>
   226a4:	103f9f26 	beq	r2,zero,22524 <___vfprintf_internal_r+0x1ce4>
   226a8:	00800044 	movi	r2,1
   226ac:	1509c83a 	sub	r4,r2,r20
   226b0:	d9000515 	stw	r4,20(sp)
   226b4:	003f9b06 	br	22524 <___vfprintf_internal_r+0x1ce4>
   226b8:	98000d1e 	bne	r19,zero,226f0 <___vfprintf_internal_r+0x1eb0>
   226bc:	d8c14c17 	ldw	r3,1328(sp)
   226c0:	1880004c 	andi	r2,r3,1
   226c4:	10000a1e 	bne	r2,zero,226f0 <___vfprintf_internal_r+0x1eb0>
   226c8:	01000044 	movi	r4,1
   226cc:	200f883a 	mov	r7,r4
   226d0:	d9014515 	stw	r4,1300(sp)
   226d4:	003f4a06 	br	22400 <___vfprintf_internal_r+0x1bc0>
   226d8:	3cc00017 	ldw	r19,0(r7)
   226dc:	39c00104 	addi	r7,r7,4
   226e0:	983d0e0e 	bge	r19,zero,21b1c <___vfprintf_internal_r+0x12dc>
   226e4:	b8c00007 	ldb	r3,0(r23)
   226e8:	04ffffc4 	movi	r19,-1
   226ec:	0038d306 	br	20a3c <___vfprintf_internal_r+0x1fc>
   226f0:	9cc00084 	addi	r19,r19,2
   226f4:	dcc14515 	stw	r19,1300(sp)
   226f8:	980f883a 	mov	r7,r19
   226fc:	983f400e 	bge	r19,zero,22400 <___vfprintf_internal_r+0x1bc0>
   22700:	003f7306 	br	224d0 <___vfprintf_internal_r+0x1c90>

00022704 <__vfprintf_internal>:
   22704:	008000f4 	movhi	r2,3
   22708:	10ba7904 	addi	r2,r2,-5660
   2270c:	2013883a 	mov	r9,r4
   22710:	11000017 	ldw	r4,0(r2)
   22714:	2805883a 	mov	r2,r5
   22718:	300f883a 	mov	r7,r6
   2271c:	480b883a 	mov	r5,r9
   22720:	100d883a 	mov	r6,r2
   22724:	00208401 	jmpi	20840 <___vfprintf_internal_r>

00022728 <__swsetup_r>:
   22728:	008000f4 	movhi	r2,3
   2272c:	10ba7904 	addi	r2,r2,-5660
   22730:	10c00017 	ldw	r3,0(r2)
   22734:	defffd04 	addi	sp,sp,-12
   22738:	dc400115 	stw	r17,4(sp)
   2273c:	dc000015 	stw	r16,0(sp)
   22740:	dfc00215 	stw	ra,8(sp)
   22744:	2023883a 	mov	r17,r4
   22748:	2821883a 	mov	r16,r5
   2274c:	18000226 	beq	r3,zero,22758 <__swsetup_r+0x30>
   22750:	18800e17 	ldw	r2,56(r3)
   22754:	10001f26 	beq	r2,zero,227d4 <__swsetup_r+0xac>
   22758:	8100030b 	ldhu	r4,12(r16)
   2275c:	2080020c 	andi	r2,r4,8
   22760:	10002826 	beq	r2,zero,22804 <__swsetup_r+0xdc>
   22764:	81400417 	ldw	r5,16(r16)
   22768:	28001d26 	beq	r5,zero,227e0 <__swsetup_r+0xb8>
   2276c:	2080004c 	andi	r2,r4,1
   22770:	1005003a 	cmpeq	r2,r2,zero
   22774:	10000b26 	beq	r2,zero,227a4 <__swsetup_r+0x7c>
   22778:	2080008c 	andi	r2,r4,2
   2277c:	10001226 	beq	r2,zero,227c8 <__swsetup_r+0xa0>
   22780:	0005883a 	mov	r2,zero
   22784:	80800215 	stw	r2,8(r16)
   22788:	28000b26 	beq	r5,zero,227b8 <__swsetup_r+0x90>
   2278c:	0005883a 	mov	r2,zero
   22790:	dfc00217 	ldw	ra,8(sp)
   22794:	dc400117 	ldw	r17,4(sp)
   22798:	dc000017 	ldw	r16,0(sp)
   2279c:	dec00304 	addi	sp,sp,12
   227a0:	f800283a 	ret
   227a4:	80800517 	ldw	r2,20(r16)
   227a8:	80000215 	stw	zero,8(r16)
   227ac:	0085c83a 	sub	r2,zero,r2
   227b0:	80800615 	stw	r2,24(r16)
   227b4:	283ff51e 	bne	r5,zero,2278c <__swsetup_r+0x64>
   227b8:	2080200c 	andi	r2,r4,128
   227bc:	103ff326 	beq	r2,zero,2278c <__swsetup_r+0x64>
   227c0:	00bfffc4 	movi	r2,-1
   227c4:	003ff206 	br	22790 <__swsetup_r+0x68>
   227c8:	80800517 	ldw	r2,20(r16)
   227cc:	80800215 	stw	r2,8(r16)
   227d0:	003fed06 	br	22788 <__swsetup_r+0x60>
   227d4:	1809883a 	mov	r4,r3
   227d8:	00242f40 	call	242f4 <__sinit>
   227dc:	003fde06 	br	22758 <__swsetup_r+0x30>
   227e0:	20c0a00c 	andi	r3,r4,640
   227e4:	00808004 	movi	r2,512
   227e8:	18bfe026 	beq	r3,r2,2276c <__swsetup_r+0x44>
   227ec:	8809883a 	mov	r4,r17
   227f0:	800b883a 	mov	r5,r16
   227f4:	00250a00 	call	250a0 <__smakebuf_r>
   227f8:	8100030b 	ldhu	r4,12(r16)
   227fc:	81400417 	ldw	r5,16(r16)
   22800:	003fda06 	br	2276c <__swsetup_r+0x44>
   22804:	2080040c 	andi	r2,r4,16
   22808:	103fed26 	beq	r2,zero,227c0 <__swsetup_r+0x98>
   2280c:	2080010c 	andi	r2,r4,4
   22810:	10001226 	beq	r2,zero,2285c <__swsetup_r+0x134>
   22814:	81400c17 	ldw	r5,48(r16)
   22818:	28000526 	beq	r5,zero,22830 <__swsetup_r+0x108>
   2281c:	80801004 	addi	r2,r16,64
   22820:	28800226 	beq	r5,r2,2282c <__swsetup_r+0x104>
   22824:	8809883a 	mov	r4,r17
   22828:	00246ac0 	call	246ac <_free_r>
   2282c:	80000c15 	stw	zero,48(r16)
   22830:	8080030b 	ldhu	r2,12(r16)
   22834:	81400417 	ldw	r5,16(r16)
   22838:	80000115 	stw	zero,4(r16)
   2283c:	10bff6cc 	andi	r2,r2,65499
   22840:	8080030d 	sth	r2,12(r16)
   22844:	81400015 	stw	r5,0(r16)
   22848:	8080030b 	ldhu	r2,12(r16)
   2284c:	10800214 	ori	r2,r2,8
   22850:	113fffcc 	andi	r4,r2,65535
   22854:	8080030d 	sth	r2,12(r16)
   22858:	003fc306 	br	22768 <__swsetup_r+0x40>
   2285c:	81400417 	ldw	r5,16(r16)
   22860:	003ff906 	br	22848 <__swsetup_r+0x120>

00022864 <quorem>:
   22864:	28c00417 	ldw	r3,16(r5)
   22868:	20800417 	ldw	r2,16(r4)
   2286c:	defff104 	addi	sp,sp,-60
   22870:	dfc00e15 	stw	ra,56(sp)
   22874:	df000d15 	stw	fp,52(sp)
   22878:	ddc00c15 	stw	r23,48(sp)
   2287c:	dd800b15 	stw	r22,44(sp)
   22880:	dd400a15 	stw	r21,40(sp)
   22884:	dd000915 	stw	r20,36(sp)
   22888:	dcc00815 	stw	r19,32(sp)
   2288c:	dc800715 	stw	r18,28(sp)
   22890:	dc400615 	stw	r17,24(sp)
   22894:	dc000515 	stw	r16,20(sp)
   22898:	d9000315 	stw	r4,12(sp)
   2289c:	d9400415 	stw	r5,16(sp)
   228a0:	10c07f16 	blt	r2,r3,22aa0 <quorem+0x23c>
   228a4:	1d3fffc4 	addi	r20,r3,-1
   228a8:	d8c00417 	ldw	r3,16(sp)
   228ac:	d9000317 	ldw	r4,12(sp)
   228b0:	a505883a 	add	r2,r20,r20
   228b4:	1085883a 	add	r2,r2,r2
   228b8:	1cc00504 	addi	r19,r3,20
   228bc:	25c00504 	addi	r23,r4,20
   228c0:	98ad883a 	add	r22,r19,r2
   228c4:	15c7883a 	add	r3,r2,r23
   228c8:	b1400017 	ldw	r5,0(r22)
   228cc:	19000017 	ldw	r4,0(r3)
   228d0:	d8c00015 	stw	r3,0(sp)
   228d4:	29400044 	addi	r5,r5,1
   228d8:	d9000215 	stw	r4,8(sp)
   228dc:	00299b40 	call	299b4 <__udivsi3>
   228e0:	1039883a 	mov	fp,r2
   228e4:	10003d1e 	bne	r2,zero,229dc <quorem+0x178>
   228e8:	d9400417 	ldw	r5,16(sp)
   228ec:	d9000317 	ldw	r4,12(sp)
   228f0:	0025dcc0 	call	25dcc <__mcmp>
   228f4:	10002c16 	blt	r2,zero,229a8 <quorem+0x144>
   228f8:	e7000044 	addi	fp,fp,1
   228fc:	b80f883a 	mov	r7,r23
   22900:	0011883a 	mov	r8,zero
   22904:	0009883a 	mov	r4,zero
   22908:	99400017 	ldw	r5,0(r19)
   2290c:	38c00017 	ldw	r3,0(r7)
   22910:	9cc00104 	addi	r19,r19,4
   22914:	28bfffcc 	andi	r2,r5,65535
   22918:	2085883a 	add	r2,r4,r2
   2291c:	11bfffcc 	andi	r6,r2,65535
   22920:	193fffcc 	andi	r4,r3,65535
   22924:	1004d43a 	srli	r2,r2,16
   22928:	280ad43a 	srli	r5,r5,16
   2292c:	2189c83a 	sub	r4,r4,r6
   22930:	2209883a 	add	r4,r4,r8
   22934:	1806d43a 	srli	r3,r3,16
   22938:	288b883a 	add	r5,r5,r2
   2293c:	200dd43a 	srai	r6,r4,16
   22940:	28bfffcc 	andi	r2,r5,65535
   22944:	1887c83a 	sub	r3,r3,r2
   22948:	1987883a 	add	r3,r3,r6
   2294c:	3900000d 	sth	r4,0(r7)
   22950:	38c0008d 	sth	r3,2(r7)
   22954:	2808d43a 	srli	r4,r5,16
   22958:	39c00104 	addi	r7,r7,4
   2295c:	1811d43a 	srai	r8,r3,16
   22960:	b4ffe92e 	bgeu	r22,r19,22908 <quorem+0xa4>
   22964:	a505883a 	add	r2,r20,r20
   22968:	1085883a 	add	r2,r2,r2
   2296c:	b885883a 	add	r2,r23,r2
   22970:	10c00017 	ldw	r3,0(r2)
   22974:	18000c1e 	bne	r3,zero,229a8 <quorem+0x144>
   22978:	113fff04 	addi	r4,r2,-4
   2297c:	b900082e 	bgeu	r23,r4,229a0 <quorem+0x13c>
   22980:	10bfff17 	ldw	r2,-4(r2)
   22984:	10000326 	beq	r2,zero,22994 <quorem+0x130>
   22988:	00000506 	br	229a0 <quorem+0x13c>
   2298c:	20800017 	ldw	r2,0(r4)
   22990:	1000031e 	bne	r2,zero,229a0 <quorem+0x13c>
   22994:	213fff04 	addi	r4,r4,-4
   22998:	a53fffc4 	addi	r20,r20,-1
   2299c:	b93ffb36 	bltu	r23,r4,2298c <quorem+0x128>
   229a0:	d9000317 	ldw	r4,12(sp)
   229a4:	25000415 	stw	r20,16(r4)
   229a8:	e005883a 	mov	r2,fp
   229ac:	dfc00e17 	ldw	ra,56(sp)
   229b0:	df000d17 	ldw	fp,52(sp)
   229b4:	ddc00c17 	ldw	r23,48(sp)
   229b8:	dd800b17 	ldw	r22,44(sp)
   229bc:	dd400a17 	ldw	r21,40(sp)
   229c0:	dd000917 	ldw	r20,36(sp)
   229c4:	dcc00817 	ldw	r19,32(sp)
   229c8:	dc800717 	ldw	r18,28(sp)
   229cc:	dc400617 	ldw	r17,24(sp)
   229d0:	dc000517 	ldw	r16,20(sp)
   229d4:	dec00f04 	addi	sp,sp,60
   229d8:	f800283a 	ret
   229dc:	b823883a 	mov	r17,r23
   229e0:	9825883a 	mov	r18,r19
   229e4:	d8000115 	stw	zero,4(sp)
   229e8:	002b883a 	mov	r21,zero
   229ec:	94000017 	ldw	r16,0(r18)
   229f0:	e009883a 	mov	r4,fp
   229f4:	94800104 	addi	r18,r18,4
   229f8:	817fffcc 	andi	r5,r16,65535
   229fc:	00206100 	call	20610 <__mulsi3>
   22a00:	800ad43a 	srli	r5,r16,16
   22a04:	e009883a 	mov	r4,fp
   22a08:	a8a1883a 	add	r16,r21,r2
   22a0c:	00206100 	call	20610 <__mulsi3>
   22a10:	89000017 	ldw	r4,0(r17)
   22a14:	80ffffcc 	andi	r3,r16,65535
   22a18:	8020d43a 	srli	r16,r16,16
   22a1c:	217fffcc 	andi	r5,r4,65535
   22a20:	28cbc83a 	sub	r5,r5,r3
   22a24:	d8c00117 	ldw	r3,4(sp)
   22a28:	2008d43a 	srli	r4,r4,16
   22a2c:	1405883a 	add	r2,r2,r16
   22a30:	28cb883a 	add	r5,r5,r3
   22a34:	280dd43a 	srai	r6,r5,16
   22a38:	10ffffcc 	andi	r3,r2,65535
   22a3c:	20c9c83a 	sub	r4,r4,r3
   22a40:	2189883a 	add	r4,r4,r6
   22a44:	8900008d 	sth	r4,2(r17)
   22a48:	2009d43a 	srai	r4,r4,16
   22a4c:	8940000d 	sth	r5,0(r17)
   22a50:	102ad43a 	srli	r21,r2,16
   22a54:	8c400104 	addi	r17,r17,4
   22a58:	d9000115 	stw	r4,4(sp)
   22a5c:	b4bfe32e 	bgeu	r22,r18,229ec <quorem+0x188>
   22a60:	d9000217 	ldw	r4,8(sp)
   22a64:	203fa01e 	bne	r4,zero,228e8 <quorem+0x84>
   22a68:	d8800017 	ldw	r2,0(sp)
   22a6c:	10ffff04 	addi	r3,r2,-4
   22a70:	b8c0082e 	bgeu	r23,r3,22a94 <quorem+0x230>
   22a74:	10bfff17 	ldw	r2,-4(r2)
   22a78:	10000326 	beq	r2,zero,22a88 <quorem+0x224>
   22a7c:	00000506 	br	22a94 <quorem+0x230>
   22a80:	18800017 	ldw	r2,0(r3)
   22a84:	1000031e 	bne	r2,zero,22a94 <quorem+0x230>
   22a88:	18ffff04 	addi	r3,r3,-4
   22a8c:	a53fffc4 	addi	r20,r20,-1
   22a90:	b8fffb36 	bltu	r23,r3,22a80 <quorem+0x21c>
   22a94:	d8c00317 	ldw	r3,12(sp)
   22a98:	1d000415 	stw	r20,16(r3)
   22a9c:	003f9206 	br	228e8 <quorem+0x84>
   22aa0:	0005883a 	mov	r2,zero
   22aa4:	003fc106 	br	229ac <quorem+0x148>

00022aa8 <_dtoa_r>:
   22aa8:	22001017 	ldw	r8,64(r4)
   22aac:	deffda04 	addi	sp,sp,-152
   22ab0:	dd402115 	stw	r21,132(sp)
   22ab4:	dd002015 	stw	r20,128(sp)
   22ab8:	dc801e15 	stw	r18,120(sp)
   22abc:	dc401d15 	stw	r17,116(sp)
   22ac0:	dfc02515 	stw	ra,148(sp)
   22ac4:	df002415 	stw	fp,144(sp)
   22ac8:	ddc02315 	stw	r23,140(sp)
   22acc:	dd802215 	stw	r22,136(sp)
   22ad0:	dcc01f15 	stw	r19,124(sp)
   22ad4:	dc001c15 	stw	r16,112(sp)
   22ad8:	d9001615 	stw	r4,88(sp)
   22adc:	3023883a 	mov	r17,r6
   22ae0:	2829883a 	mov	r20,r5
   22ae4:	d9c01715 	stw	r7,92(sp)
   22ae8:	dc802817 	ldw	r18,160(sp)
   22aec:	302b883a 	mov	r21,r6
   22af0:	40000a26 	beq	r8,zero,22b1c <_dtoa_r+0x74>
   22af4:	20801117 	ldw	r2,68(r4)
   22af8:	400b883a 	mov	r5,r8
   22afc:	40800115 	stw	r2,4(r8)
   22b00:	20c01117 	ldw	r3,68(r4)
   22b04:	00800044 	movi	r2,1
   22b08:	10c4983a 	sll	r2,r2,r3
   22b0c:	40800215 	stw	r2,8(r8)
   22b10:	0025c700 	call	25c70 <_Bfree>
   22b14:	d8c01617 	ldw	r3,88(sp)
   22b18:	18001015 	stw	zero,64(r3)
   22b1c:	8800a316 	blt	r17,zero,22dac <_dtoa_r+0x304>
   22b20:	90000015 	stw	zero,0(r18)
   22b24:	a8dffc2c 	andhi	r3,r21,32752
   22b28:	009ffc34 	movhi	r2,32752
   22b2c:	18809126 	beq	r3,r2,22d74 <_dtoa_r+0x2cc>
   22b30:	000d883a 	mov	r6,zero
   22b34:	000f883a 	mov	r7,zero
   22b38:	a009883a 	mov	r4,r20
   22b3c:	a80b883a 	mov	r5,r21
   22b40:	dd001215 	stw	r20,72(sp)
   22b44:	dd401315 	stw	r21,76(sp)
   22b48:	00292f40 	call	292f4 <__nedf2>
   22b4c:	1000171e 	bne	r2,zero,22bac <_dtoa_r+0x104>
   22b50:	d9802717 	ldw	r6,156(sp)
   22b54:	00800044 	movi	r2,1
   22b58:	30800015 	stw	r2,0(r6)
   22b5c:	d8802917 	ldw	r2,164(sp)
   22b60:	10029b26 	beq	r2,zero,235d0 <_dtoa_r+0xb28>
   22b64:	d9002917 	ldw	r4,164(sp)
   22b68:	008000f4 	movhi	r2,3
   22b6c:	10b33944 	addi	r2,r2,-13083
   22b70:	10ffffc4 	addi	r3,r2,-1
   22b74:	20800015 	stw	r2,0(r4)
   22b78:	1805883a 	mov	r2,r3
   22b7c:	dfc02517 	ldw	ra,148(sp)
   22b80:	df002417 	ldw	fp,144(sp)
   22b84:	ddc02317 	ldw	r23,140(sp)
   22b88:	dd802217 	ldw	r22,136(sp)
   22b8c:	dd402117 	ldw	r21,132(sp)
   22b90:	dd002017 	ldw	r20,128(sp)
   22b94:	dcc01f17 	ldw	r19,124(sp)
   22b98:	dc801e17 	ldw	r18,120(sp)
   22b9c:	dc401d17 	ldw	r17,116(sp)
   22ba0:	dc001c17 	ldw	r16,112(sp)
   22ba4:	dec02604 	addi	sp,sp,152
   22ba8:	f800283a 	ret
   22bac:	d9001617 	ldw	r4,88(sp)
   22bb0:	d9401217 	ldw	r5,72(sp)
   22bb4:	d8800104 	addi	r2,sp,4
   22bb8:	a80d883a 	mov	r6,r21
   22bbc:	d9c00204 	addi	r7,sp,8
   22bc0:	d8800015 	stw	r2,0(sp)
   22bc4:	00262ac0 	call	262ac <__d2b>
   22bc8:	d8800715 	stw	r2,28(sp)
   22bcc:	a804d53a 	srli	r2,r21,20
   22bd0:	1101ffcc 	andi	r4,r2,2047
   22bd4:	20008626 	beq	r4,zero,22df0 <_dtoa_r+0x348>
   22bd8:	d8c01217 	ldw	r3,72(sp)
   22bdc:	00800434 	movhi	r2,16
   22be0:	10bfffc4 	addi	r2,r2,-1
   22be4:	ddc00117 	ldw	r23,4(sp)
   22be8:	a884703a 	and	r2,r21,r2
   22bec:	1811883a 	mov	r8,r3
   22bf0:	124ffc34 	orhi	r9,r2,16368
   22bf4:	25bf0044 	addi	r22,r4,-1023
   22bf8:	d8000815 	stw	zero,32(sp)
   22bfc:	0005883a 	mov	r2,zero
   22c00:	00cffe34 	movhi	r3,16376
   22c04:	480b883a 	mov	r5,r9
   22c08:	4009883a 	mov	r4,r8
   22c0c:	180f883a 	mov	r7,r3
   22c10:	100d883a 	mov	r6,r2
   22c14:	0028b5c0 	call	28b5c <__subdf3>
   22c18:	0218dbf4 	movhi	r8,25455
   22c1c:	4210d844 	addi	r8,r8,17249
   22c20:	024ff4f4 	movhi	r9,16339
   22c24:	4a61e9c4 	addi	r9,r9,-30809
   22c28:	480f883a 	mov	r7,r9
   22c2c:	400d883a 	mov	r6,r8
   22c30:	180b883a 	mov	r5,r3
   22c34:	1009883a 	mov	r4,r2
   22c38:	0028c500 	call	28c50 <__muldf3>
   22c3c:	0222d874 	movhi	r8,35681
   22c40:	42322cc4 	addi	r8,r8,-14157
   22c44:	024ff1f4 	movhi	r9,16327
   22c48:	4a628a04 	addi	r9,r9,-30168
   22c4c:	480f883a 	mov	r7,r9
   22c50:	400d883a 	mov	r6,r8
   22c54:	180b883a 	mov	r5,r3
   22c58:	1009883a 	mov	r4,r2
   22c5c:	0028bdc0 	call	28bdc <__adddf3>
   22c60:	b009883a 	mov	r4,r22
   22c64:	1021883a 	mov	r16,r2
   22c68:	1823883a 	mov	r17,r3
   22c6c:	00295140 	call	29514 <__floatsidf>
   22c70:	021427f4 	movhi	r8,20639
   22c74:	421e7ec4 	addi	r8,r8,31227
   22c78:	024ff4f4 	movhi	r9,16339
   22c7c:	4a5104c4 	addi	r9,r9,17427
   22c80:	480f883a 	mov	r7,r9
   22c84:	400d883a 	mov	r6,r8
   22c88:	180b883a 	mov	r5,r3
   22c8c:	1009883a 	mov	r4,r2
   22c90:	0028c500 	call	28c50 <__muldf3>
   22c94:	180f883a 	mov	r7,r3
   22c98:	880b883a 	mov	r5,r17
   22c9c:	100d883a 	mov	r6,r2
   22ca0:	8009883a 	mov	r4,r16
   22ca4:	0028bdc0 	call	28bdc <__adddf3>
   22ca8:	1009883a 	mov	r4,r2
   22cac:	180b883a 	mov	r5,r3
   22cb0:	1021883a 	mov	r16,r2
   22cb4:	1823883a 	mov	r17,r3
   22cb8:	002960c0 	call	2960c <__fixdfsi>
   22cbc:	000d883a 	mov	r6,zero
   22cc0:	000f883a 	mov	r7,zero
   22cc4:	8009883a 	mov	r4,r16
   22cc8:	880b883a 	mov	r5,r17
   22ccc:	d8800d15 	stw	r2,52(sp)
   22cd0:	002948c0 	call	2948c <__ltdf2>
   22cd4:	10031716 	blt	r2,zero,23934 <_dtoa_r+0xe8c>
   22cd8:	d8c00d17 	ldw	r3,52(sp)
   22cdc:	00800584 	movi	r2,22
   22ce0:	10c1482e 	bgeu	r2,r3,23204 <_dtoa_r+0x75c>
   22ce4:	01000044 	movi	r4,1
   22ce8:	d9000c15 	stw	r4,48(sp)
   22cec:	bd85c83a 	sub	r2,r23,r22
   22cf0:	11bfffc4 	addi	r6,r2,-1
   22cf4:	30030b16 	blt	r6,zero,23924 <_dtoa_r+0xe7c>
   22cf8:	d9800a15 	stw	r6,40(sp)
   22cfc:	d8001115 	stw	zero,68(sp)
   22d00:	d8c00d17 	ldw	r3,52(sp)
   22d04:	1802ff16 	blt	r3,zero,23904 <_dtoa_r+0xe5c>
   22d08:	d9000a17 	ldw	r4,40(sp)
   22d0c:	d8c00915 	stw	r3,36(sp)
   22d10:	d8001015 	stw	zero,64(sp)
   22d14:	20c9883a 	add	r4,r4,r3
   22d18:	d9000a15 	stw	r4,40(sp)
   22d1c:	d9001717 	ldw	r4,92(sp)
   22d20:	00800244 	movi	r2,9
   22d24:	11004636 	bltu	r2,r4,22e40 <_dtoa_r+0x398>
   22d28:	00800144 	movi	r2,5
   22d2c:	11020416 	blt	r2,r4,23540 <_dtoa_r+0xa98>
   22d30:	04400044 	movi	r17,1
   22d34:	d8c01717 	ldw	r3,92(sp)
   22d38:	00800144 	movi	r2,5
   22d3c:	10c1ed36 	bltu	r2,r3,234f4 <_dtoa_r+0xa4c>
   22d40:	18c5883a 	add	r2,r3,r3
   22d44:	1085883a 	add	r2,r2,r2
   22d48:	00c000b4 	movhi	r3,2
   22d4c:	18cb5704 	addi	r3,r3,11612
   22d50:	10c5883a 	add	r2,r2,r3
   22d54:	11000017 	ldw	r4,0(r2)
   22d58:	2000683a 	jmp	r4
   22d5c:	00022e48 	cmpgei	zero,zero,2233
   22d60:	00022e48 	cmpgei	zero,zero,2233
   22d64:	00023848 	cmpgei	zero,zero,2273
   22d68:	00023820 	cmpeqi	zero,zero,2272
   22d6c:	00023864 	muli	zero,zero,2273
   22d70:	00023870 	cmpltui	zero,zero,2273
   22d74:	d9002717 	ldw	r4,156(sp)
   22d78:	0089c3c4 	movi	r2,9999
   22d7c:	20800015 	stw	r2,0(r4)
   22d80:	a0001026 	beq	r20,zero,22dc4 <_dtoa_r+0x31c>
   22d84:	00c000f4 	movhi	r3,3
   22d88:	18f34504 	addi	r3,r3,-13036
   22d8c:	d9802917 	ldw	r6,164(sp)
   22d90:	303f7926 	beq	r6,zero,22b78 <_dtoa_r+0xd0>
   22d94:	188000c7 	ldb	r2,3(r3)
   22d98:	190000c4 	addi	r4,r3,3
   22d9c:	1000101e 	bne	r2,zero,22de0 <_dtoa_r+0x338>
   22da0:	d8802917 	ldw	r2,164(sp)
   22da4:	11000015 	stw	r4,0(r2)
   22da8:	003f7306 	br	22b78 <_dtoa_r+0xd0>
   22dac:	00a00034 	movhi	r2,32768
   22db0:	10bfffc4 	addi	r2,r2,-1
   22db4:	00c00044 	movi	r3,1
   22db8:	88aa703a 	and	r21,r17,r2
   22dbc:	90c00015 	stw	r3,0(r18)
   22dc0:	003f5806 	br	22b24 <_dtoa_r+0x7c>
   22dc4:	00800434 	movhi	r2,16
   22dc8:	10bfffc4 	addi	r2,r2,-1
   22dcc:	a884703a 	and	r2,r21,r2
   22dd0:	103fec1e 	bne	r2,zero,22d84 <_dtoa_r+0x2dc>
   22dd4:	00c000f4 	movhi	r3,3
   22dd8:	18f34204 	addi	r3,r3,-13048
   22ddc:	003feb06 	br	22d8c <_dtoa_r+0x2e4>
   22de0:	d8802917 	ldw	r2,164(sp)
   22de4:	19000204 	addi	r4,r3,8
   22de8:	11000015 	stw	r4,0(r2)
   22dec:	003f6206 	br	22b78 <_dtoa_r+0xd0>
   22df0:	ddc00117 	ldw	r23,4(sp)
   22df4:	d8800217 	ldw	r2,8(sp)
   22df8:	01000804 	movi	r4,32
   22dfc:	b8c10c84 	addi	r3,r23,1074
   22e00:	18a3883a 	add	r17,r3,r2
   22e04:	2441b80e 	bge	r4,r17,234e8 <_dtoa_r+0xa40>
   22e08:	00c01004 	movi	r3,64
   22e0c:	1c47c83a 	sub	r3,r3,r17
   22e10:	88bff804 	addi	r2,r17,-32
   22e14:	a8c6983a 	sll	r3,r21,r3
   22e18:	a084d83a 	srl	r2,r20,r2
   22e1c:	1888b03a 	or	r4,r3,r2
   22e20:	00296e40 	call	296e4 <__floatunsidf>
   22e24:	1011883a 	mov	r8,r2
   22e28:	00bf8434 	movhi	r2,65040
   22e2c:	01000044 	movi	r4,1
   22e30:	10d3883a 	add	r9,r2,r3
   22e34:	8dbef344 	addi	r22,r17,-1075
   22e38:	d9000815 	stw	r4,32(sp)
   22e3c:	003f6f06 	br	22bfc <_dtoa_r+0x154>
   22e40:	d8001715 	stw	zero,92(sp)
   22e44:	04400044 	movi	r17,1
   22e48:	00bfffc4 	movi	r2,-1
   22e4c:	00c00044 	movi	r3,1
   22e50:	d8800e15 	stw	r2,56(sp)
   22e54:	d8002615 	stw	zero,152(sp)
   22e58:	d8800f15 	stw	r2,60(sp)
   22e5c:	d8c00b15 	stw	r3,44(sp)
   22e60:	1021883a 	mov	r16,r2
   22e64:	d8801617 	ldw	r2,88(sp)
   22e68:	10001115 	stw	zero,68(r2)
   22e6c:	d8801617 	ldw	r2,88(sp)
   22e70:	11401117 	ldw	r5,68(r2)
   22e74:	1009883a 	mov	r4,r2
   22e78:	00261f00 	call	261f0 <_Balloc>
   22e7c:	d8c01617 	ldw	r3,88(sp)
   22e80:	d8800515 	stw	r2,20(sp)
   22e84:	18801015 	stw	r2,64(r3)
   22e88:	00800384 	movi	r2,14
   22e8c:	14006836 	bltu	r2,r16,23030 <_dtoa_r+0x588>
   22e90:	8805003a 	cmpeq	r2,r17,zero
   22e94:	1000661e 	bne	r2,zero,23030 <_dtoa_r+0x588>
   22e98:	d9000d17 	ldw	r4,52(sp)
   22e9c:	0102300e 	bge	zero,r4,23760 <_dtoa_r+0xcb8>
   22ea0:	208003cc 	andi	r2,r4,15
   22ea4:	100490fa 	slli	r2,r2,3
   22ea8:	2025d13a 	srai	r18,r4,4
   22eac:	00c000f4 	movhi	r3,3
   22eb0:	18f35704 	addi	r3,r3,-12964
   22eb4:	10c5883a 	add	r2,r2,r3
   22eb8:	90c0040c 	andi	r3,r18,16
   22ebc:	14000017 	ldw	r16,0(r2)
   22ec0:	14400117 	ldw	r17,4(r2)
   22ec4:	18036a1e 	bne	r3,zero,23c70 <_dtoa_r+0x11c8>
   22ec8:	05800084 	movi	r22,2
   22ecc:	90001026 	beq	r18,zero,22f10 <_dtoa_r+0x468>
   22ed0:	04c000f4 	movhi	r19,3
   22ed4:	9cf38904 	addi	r19,r19,-12764
   22ed8:	9080004c 	andi	r2,r18,1
   22edc:	1005003a 	cmpeq	r2,r2,zero
   22ee0:	1000081e 	bne	r2,zero,22f04 <_dtoa_r+0x45c>
   22ee4:	99800017 	ldw	r6,0(r19)
   22ee8:	99c00117 	ldw	r7,4(r19)
   22eec:	880b883a 	mov	r5,r17
   22ef0:	8009883a 	mov	r4,r16
   22ef4:	0028c500 	call	28c50 <__muldf3>
   22ef8:	1021883a 	mov	r16,r2
   22efc:	b5800044 	addi	r22,r22,1
   22f00:	1823883a 	mov	r17,r3
   22f04:	9025d07a 	srai	r18,r18,1
   22f08:	9cc00204 	addi	r19,r19,8
   22f0c:	903ff21e 	bne	r18,zero,22ed8 <_dtoa_r+0x430>
   22f10:	a80b883a 	mov	r5,r21
   22f14:	a009883a 	mov	r4,r20
   22f18:	880f883a 	mov	r7,r17
   22f1c:	800d883a 	mov	r6,r16
   22f20:	00290140 	call	29014 <__divdf3>
   22f24:	1029883a 	mov	r20,r2
   22f28:	182b883a 	mov	r21,r3
   22f2c:	d8c00c17 	ldw	r3,48(sp)
   22f30:	1805003a 	cmpeq	r2,r3,zero
   22f34:	1000081e 	bne	r2,zero,22f58 <_dtoa_r+0x4b0>
   22f38:	0005883a 	mov	r2,zero
   22f3c:	00cffc34 	movhi	r3,16368
   22f40:	180f883a 	mov	r7,r3
   22f44:	a009883a 	mov	r4,r20
   22f48:	a80b883a 	mov	r5,r21
   22f4c:	100d883a 	mov	r6,r2
   22f50:	002948c0 	call	2948c <__ltdf2>
   22f54:	1003fe16 	blt	r2,zero,23f50 <_dtoa_r+0x14a8>
   22f58:	b009883a 	mov	r4,r22
   22f5c:	00295140 	call	29514 <__floatsidf>
   22f60:	180b883a 	mov	r5,r3
   22f64:	1009883a 	mov	r4,r2
   22f68:	a00d883a 	mov	r6,r20
   22f6c:	a80f883a 	mov	r7,r21
   22f70:	0028c500 	call	28c50 <__muldf3>
   22f74:	0011883a 	mov	r8,zero
   22f78:	02500734 	movhi	r9,16412
   22f7c:	1009883a 	mov	r4,r2
   22f80:	180b883a 	mov	r5,r3
   22f84:	480f883a 	mov	r7,r9
   22f88:	400d883a 	mov	r6,r8
   22f8c:	0028bdc0 	call	28bdc <__adddf3>
   22f90:	d9000f17 	ldw	r4,60(sp)
   22f94:	102d883a 	mov	r22,r2
   22f98:	00bf3034 	movhi	r2,64704
   22f9c:	18b9883a 	add	fp,r3,r2
   22fa0:	e02f883a 	mov	r23,fp
   22fa4:	20028f1e 	bne	r4,zero,239e4 <_dtoa_r+0xf3c>
   22fa8:	0005883a 	mov	r2,zero
   22fac:	00d00534 	movhi	r3,16404
   22fb0:	a009883a 	mov	r4,r20
   22fb4:	a80b883a 	mov	r5,r21
   22fb8:	180f883a 	mov	r7,r3
   22fbc:	100d883a 	mov	r6,r2
   22fc0:	0028b5c0 	call	28b5c <__subdf3>
   22fc4:	1009883a 	mov	r4,r2
   22fc8:	e00f883a 	mov	r7,fp
   22fcc:	180b883a 	mov	r5,r3
   22fd0:	b00d883a 	mov	r6,r22
   22fd4:	1025883a 	mov	r18,r2
   22fd8:	1827883a 	mov	r19,r3
   22fdc:	002937c0 	call	2937c <__gtdf2>
   22fe0:	00834f16 	blt	zero,r2,23d20 <_dtoa_r+0x1278>
   22fe4:	e0e0003c 	xorhi	r3,fp,32768
   22fe8:	9009883a 	mov	r4,r18
   22fec:	980b883a 	mov	r5,r19
   22ff0:	180f883a 	mov	r7,r3
   22ff4:	b00d883a 	mov	r6,r22
   22ff8:	002948c0 	call	2948c <__ltdf2>
   22ffc:	1000080e 	bge	r2,zero,23020 <_dtoa_r+0x578>
   23000:	0027883a 	mov	r19,zero
   23004:	0025883a 	mov	r18,zero
   23008:	d8802617 	ldw	r2,152(sp)
   2300c:	df000517 	ldw	fp,20(sp)
   23010:	d8000615 	stw	zero,24(sp)
   23014:	0084303a 	nor	r2,zero,r2
   23018:	d8800d15 	stw	r2,52(sp)
   2301c:	00019b06 	br	2368c <_dtoa_r+0xbe4>
   23020:	d9801217 	ldw	r6,72(sp)
   23024:	d8801317 	ldw	r2,76(sp)
   23028:	3029883a 	mov	r20,r6
   2302c:	102b883a 	mov	r21,r2
   23030:	d8c00217 	ldw	r3,8(sp)
   23034:	18008516 	blt	r3,zero,2324c <_dtoa_r+0x7a4>
   23038:	d9000d17 	ldw	r4,52(sp)
   2303c:	00800384 	movi	r2,14
   23040:	11008216 	blt	r2,r4,2324c <_dtoa_r+0x7a4>
   23044:	200490fa 	slli	r2,r4,3
   23048:	d9802617 	ldw	r6,152(sp)
   2304c:	00c000f4 	movhi	r3,3
   23050:	18f35704 	addi	r3,r3,-12964
   23054:	10c5883a 	add	r2,r2,r3
   23058:	14800017 	ldw	r18,0(r2)
   2305c:	14c00117 	ldw	r19,4(r2)
   23060:	30031e16 	blt	r6,zero,23cdc <_dtoa_r+0x1234>
   23064:	d9000517 	ldw	r4,20(sp)
   23068:	d8c00f17 	ldw	r3,60(sp)
   2306c:	a823883a 	mov	r17,r21
   23070:	a021883a 	mov	r16,r20
   23074:	192b883a 	add	r21,r3,r4
   23078:	2039883a 	mov	fp,r4
   2307c:	00000f06 	br	230bc <_dtoa_r+0x614>
   23080:	0005883a 	mov	r2,zero
   23084:	00d00934 	movhi	r3,16420
   23088:	5009883a 	mov	r4,r10
   2308c:	580b883a 	mov	r5,r11
   23090:	180f883a 	mov	r7,r3
   23094:	100d883a 	mov	r6,r2
   23098:	0028c500 	call	28c50 <__muldf3>
   2309c:	180b883a 	mov	r5,r3
   230a0:	000d883a 	mov	r6,zero
   230a4:	000f883a 	mov	r7,zero
   230a8:	1009883a 	mov	r4,r2
   230ac:	1021883a 	mov	r16,r2
   230b0:	1823883a 	mov	r17,r3
   230b4:	00292f40 	call	292f4 <__nedf2>
   230b8:	10004526 	beq	r2,zero,231d0 <_dtoa_r+0x728>
   230bc:	900d883a 	mov	r6,r18
   230c0:	980f883a 	mov	r7,r19
   230c4:	8009883a 	mov	r4,r16
   230c8:	880b883a 	mov	r5,r17
   230cc:	00290140 	call	29014 <__divdf3>
   230d0:	180b883a 	mov	r5,r3
   230d4:	1009883a 	mov	r4,r2
   230d8:	002960c0 	call	2960c <__fixdfsi>
   230dc:	1009883a 	mov	r4,r2
   230e0:	1029883a 	mov	r20,r2
   230e4:	00295140 	call	29514 <__floatsidf>
   230e8:	180f883a 	mov	r7,r3
   230ec:	9009883a 	mov	r4,r18
   230f0:	980b883a 	mov	r5,r19
   230f4:	100d883a 	mov	r6,r2
   230f8:	0028c500 	call	28c50 <__muldf3>
   230fc:	180f883a 	mov	r7,r3
   23100:	880b883a 	mov	r5,r17
   23104:	8009883a 	mov	r4,r16
   23108:	100d883a 	mov	r6,r2
   2310c:	0028b5c0 	call	28b5c <__subdf3>
   23110:	1015883a 	mov	r10,r2
   23114:	a0800c04 	addi	r2,r20,48
   23118:	e0800005 	stb	r2,0(fp)
   2311c:	e7000044 	addi	fp,fp,1
   23120:	1817883a 	mov	r11,r3
   23124:	e57fd61e 	bne	fp,r21,23080 <_dtoa_r+0x5d8>
   23128:	500d883a 	mov	r6,r10
   2312c:	180f883a 	mov	r7,r3
   23130:	5009883a 	mov	r4,r10
   23134:	180b883a 	mov	r5,r3
   23138:	0028bdc0 	call	28bdc <__adddf3>
   2313c:	100d883a 	mov	r6,r2
   23140:	9009883a 	mov	r4,r18
   23144:	980b883a 	mov	r5,r19
   23148:	180f883a 	mov	r7,r3
   2314c:	1021883a 	mov	r16,r2
   23150:	1823883a 	mov	r17,r3
   23154:	002948c0 	call	2948c <__ltdf2>
   23158:	10000816 	blt	r2,zero,2317c <_dtoa_r+0x6d4>
   2315c:	980b883a 	mov	r5,r19
   23160:	800d883a 	mov	r6,r16
   23164:	880f883a 	mov	r7,r17
   23168:	9009883a 	mov	r4,r18
   2316c:	002926c0 	call	2926c <__eqdf2>
   23170:	1000171e 	bne	r2,zero,231d0 <_dtoa_r+0x728>
   23174:	a080004c 	andi	r2,r20,1
   23178:	10001526 	beq	r2,zero,231d0 <_dtoa_r+0x728>
   2317c:	d8800d17 	ldw	r2,52(sp)
   23180:	d8800415 	stw	r2,16(sp)
   23184:	e009883a 	mov	r4,fp
   23188:	213fffc4 	addi	r4,r4,-1
   2318c:	20c00007 	ldb	r3,0(r4)
   23190:	00800e44 	movi	r2,57
   23194:	1880081e 	bne	r3,r2,231b8 <_dtoa_r+0x710>
   23198:	d8800517 	ldw	r2,20(sp)
   2319c:	113ffa1e 	bne	r2,r4,23188 <_dtoa_r+0x6e0>
   231a0:	d8c00417 	ldw	r3,16(sp)
   231a4:	d9800517 	ldw	r6,20(sp)
   231a8:	00800c04 	movi	r2,48
   231ac:	18c00044 	addi	r3,r3,1
   231b0:	d8c00415 	stw	r3,16(sp)
   231b4:	30800005 	stb	r2,0(r6)
   231b8:	20800003 	ldbu	r2,0(r4)
   231bc:	d8c00417 	ldw	r3,16(sp)
   231c0:	27000044 	addi	fp,r4,1
   231c4:	10800044 	addi	r2,r2,1
   231c8:	d8c00d15 	stw	r3,52(sp)
   231cc:	20800005 	stb	r2,0(r4)
   231d0:	d9001617 	ldw	r4,88(sp)
   231d4:	d9400717 	ldw	r5,28(sp)
   231d8:	0025c700 	call	25c70 <_Bfree>
   231dc:	e0000005 	stb	zero,0(fp)
   231e0:	d9800d17 	ldw	r6,52(sp)
   231e4:	d8c02717 	ldw	r3,156(sp)
   231e8:	d9002917 	ldw	r4,164(sp)
   231ec:	30800044 	addi	r2,r6,1
   231f0:	18800015 	stw	r2,0(r3)
   231f4:	20029c26 	beq	r4,zero,23c68 <_dtoa_r+0x11c0>
   231f8:	d8c00517 	ldw	r3,20(sp)
   231fc:	27000015 	stw	fp,0(r4)
   23200:	003e5d06 	br	22b78 <_dtoa_r+0xd0>
   23204:	d9800d17 	ldw	r6,52(sp)
   23208:	00c000f4 	movhi	r3,3
   2320c:	18f35704 	addi	r3,r3,-12964
   23210:	d9001217 	ldw	r4,72(sp)
   23214:	300490fa 	slli	r2,r6,3
   23218:	d9401317 	ldw	r5,76(sp)
   2321c:	10c5883a 	add	r2,r2,r3
   23220:	12000017 	ldw	r8,0(r2)
   23224:	12400117 	ldw	r9,4(r2)
   23228:	400d883a 	mov	r6,r8
   2322c:	480f883a 	mov	r7,r9
   23230:	002948c0 	call	2948c <__ltdf2>
   23234:	1000030e 	bge	r2,zero,23244 <_dtoa_r+0x79c>
   23238:	d8800d17 	ldw	r2,52(sp)
   2323c:	10bfffc4 	addi	r2,r2,-1
   23240:	d8800d15 	stw	r2,52(sp)
   23244:	d8000c15 	stw	zero,48(sp)
   23248:	003ea806 	br	22cec <_dtoa_r+0x244>
   2324c:	d9000b17 	ldw	r4,44(sp)
   23250:	202cc03a 	cmpne	r22,r4,zero
   23254:	b000c71e 	bne	r22,zero,23574 <_dtoa_r+0xacc>
   23258:	dc001117 	ldw	r16,68(sp)
   2325c:	dc801017 	ldw	r18,64(sp)
   23260:	0027883a 	mov	r19,zero
   23264:	04000b0e 	bge	zero,r16,23294 <_dtoa_r+0x7ec>
   23268:	d8c00a17 	ldw	r3,40(sp)
   2326c:	00c0090e 	bge	zero,r3,23294 <_dtoa_r+0x7ec>
   23270:	8005883a 	mov	r2,r16
   23274:	1c011316 	blt	r3,r16,236c4 <_dtoa_r+0xc1c>
   23278:	d9000a17 	ldw	r4,40(sp)
   2327c:	d9801117 	ldw	r6,68(sp)
   23280:	80a1c83a 	sub	r16,r16,r2
   23284:	2089c83a 	sub	r4,r4,r2
   23288:	308dc83a 	sub	r6,r6,r2
   2328c:	d9000a15 	stw	r4,40(sp)
   23290:	d9801115 	stw	r6,68(sp)
   23294:	d8801017 	ldw	r2,64(sp)
   23298:	0080150e 	bge	zero,r2,232f0 <_dtoa_r+0x848>
   2329c:	d8c00b17 	ldw	r3,44(sp)
   232a0:	1805003a 	cmpeq	r2,r3,zero
   232a4:	1001c91e 	bne	r2,zero,239cc <_dtoa_r+0xf24>
   232a8:	04800e0e 	bge	zero,r18,232e4 <_dtoa_r+0x83c>
   232ac:	d9001617 	ldw	r4,88(sp)
   232b0:	980b883a 	mov	r5,r19
   232b4:	900d883a 	mov	r6,r18
   232b8:	0026abc0 	call	26abc <__pow5mult>
   232bc:	d9001617 	ldw	r4,88(sp)
   232c0:	d9800717 	ldw	r6,28(sp)
   232c4:	100b883a 	mov	r5,r2
   232c8:	1027883a 	mov	r19,r2
   232cc:	00267000 	call	26700 <__multiply>
   232d0:	d9001617 	ldw	r4,88(sp)
   232d4:	d9400717 	ldw	r5,28(sp)
   232d8:	1023883a 	mov	r17,r2
   232dc:	0025c700 	call	25c70 <_Bfree>
   232e0:	dc400715 	stw	r17,28(sp)
   232e4:	d9001017 	ldw	r4,64(sp)
   232e8:	248dc83a 	sub	r6,r4,r18
   232ec:	30010e1e 	bne	r6,zero,23728 <_dtoa_r+0xc80>
   232f0:	d9001617 	ldw	r4,88(sp)
   232f4:	04400044 	movi	r17,1
   232f8:	880b883a 	mov	r5,r17
   232fc:	00269540 	call	26954 <__i2b>
   23300:	d9800917 	ldw	r6,36(sp)
   23304:	1025883a 	mov	r18,r2
   23308:	0180040e 	bge	zero,r6,2331c <_dtoa_r+0x874>
   2330c:	d9001617 	ldw	r4,88(sp)
   23310:	100b883a 	mov	r5,r2
   23314:	0026abc0 	call	26abc <__pow5mult>
   23318:	1025883a 	mov	r18,r2
   2331c:	d8801717 	ldw	r2,92(sp)
   23320:	8880f30e 	bge	r17,r2,236f0 <_dtoa_r+0xc48>
   23324:	0023883a 	mov	r17,zero
   23328:	d9800917 	ldw	r6,36(sp)
   2332c:	30019e1e 	bne	r6,zero,239a8 <_dtoa_r+0xf00>
   23330:	00c00044 	movi	r3,1
   23334:	d9000a17 	ldw	r4,40(sp)
   23338:	20c5883a 	add	r2,r4,r3
   2333c:	10c007cc 	andi	r3,r2,31
   23340:	1800841e 	bne	r3,zero,23554 <_dtoa_r+0xaac>
   23344:	00800704 	movi	r2,28
   23348:	d9000a17 	ldw	r4,40(sp)
   2334c:	d9801117 	ldw	r6,68(sp)
   23350:	80a1883a 	add	r16,r16,r2
   23354:	2089883a 	add	r4,r4,r2
   23358:	308d883a 	add	r6,r6,r2
   2335c:	d9000a15 	stw	r4,40(sp)
   23360:	d9801115 	stw	r6,68(sp)
   23364:	d8801117 	ldw	r2,68(sp)
   23368:	0080050e 	bge	zero,r2,23380 <_dtoa_r+0x8d8>
   2336c:	d9400717 	ldw	r5,28(sp)
   23370:	d9001617 	ldw	r4,88(sp)
   23374:	100d883a 	mov	r6,r2
   23378:	00265b40 	call	265b4 <__lshift>
   2337c:	d8800715 	stw	r2,28(sp)
   23380:	d8c00a17 	ldw	r3,40(sp)
   23384:	00c0050e 	bge	zero,r3,2339c <_dtoa_r+0x8f4>
   23388:	d9001617 	ldw	r4,88(sp)
   2338c:	900b883a 	mov	r5,r18
   23390:	180d883a 	mov	r6,r3
   23394:	00265b40 	call	265b4 <__lshift>
   23398:	1025883a 	mov	r18,r2
   2339c:	d9000c17 	ldw	r4,48(sp)
   233a0:	2005003a 	cmpeq	r2,r4,zero
   233a4:	10016f26 	beq	r2,zero,23964 <_dtoa_r+0xebc>
   233a8:	d9000f17 	ldw	r4,60(sp)
   233ac:	0102170e 	bge	zero,r4,23c0c <_dtoa_r+0x1164>
   233b0:	d9800b17 	ldw	r6,44(sp)
   233b4:	3005003a 	cmpeq	r2,r6,zero
   233b8:	1000881e 	bne	r2,zero,235dc <_dtoa_r+0xb34>
   233bc:	0400050e 	bge	zero,r16,233d4 <_dtoa_r+0x92c>
   233c0:	d9001617 	ldw	r4,88(sp)
   233c4:	980b883a 	mov	r5,r19
   233c8:	800d883a 	mov	r6,r16
   233cc:	00265b40 	call	265b4 <__lshift>
   233d0:	1027883a 	mov	r19,r2
   233d4:	8804c03a 	cmpne	r2,r17,zero
   233d8:	1002541e 	bne	r2,zero,23d2c <_dtoa_r+0x1284>
   233dc:	980b883a 	mov	r5,r19
   233e0:	dd800517 	ldw	r22,20(sp)
   233e4:	dcc00615 	stw	r19,24(sp)
   233e8:	a700004c 	andi	fp,r20,1
   233ec:	2827883a 	mov	r19,r5
   233f0:	d9000717 	ldw	r4,28(sp)
   233f4:	900b883a 	mov	r5,r18
   233f8:	00228640 	call	22864 <quorem>
   233fc:	d9000717 	ldw	r4,28(sp)
   23400:	d9400617 	ldw	r5,24(sp)
   23404:	1023883a 	mov	r17,r2
   23408:	8dc00c04 	addi	r23,r17,48
   2340c:	0025dcc0 	call	25dcc <__mcmp>
   23410:	d9001617 	ldw	r4,88(sp)
   23414:	900b883a 	mov	r5,r18
   23418:	980d883a 	mov	r6,r19
   2341c:	1029883a 	mov	r20,r2
   23420:	00264280 	call	26428 <__mdiff>
   23424:	102b883a 	mov	r21,r2
   23428:	10800317 	ldw	r2,12(r2)
   2342c:	1001281e 	bne	r2,zero,238d0 <_dtoa_r+0xe28>
   23430:	d9000717 	ldw	r4,28(sp)
   23434:	a80b883a 	mov	r5,r21
   23438:	0025dcc0 	call	25dcc <__mcmp>
   2343c:	d9001617 	ldw	r4,88(sp)
   23440:	1021883a 	mov	r16,r2
   23444:	a80b883a 	mov	r5,r21
   23448:	0025c700 	call	25c70 <_Bfree>
   2344c:	8000041e 	bne	r16,zero,23460 <_dtoa_r+0x9b8>
   23450:	d8801717 	ldw	r2,92(sp)
   23454:	1000021e 	bne	r2,zero,23460 <_dtoa_r+0x9b8>
   23458:	e004c03a 	cmpne	r2,fp,zero
   2345c:	10011726 	beq	r2,zero,238bc <_dtoa_r+0xe14>
   23460:	a0010616 	blt	r20,zero,2387c <_dtoa_r+0xdd4>
   23464:	a000041e 	bne	r20,zero,23478 <_dtoa_r+0x9d0>
   23468:	d8c01717 	ldw	r3,92(sp)
   2346c:	1800021e 	bne	r3,zero,23478 <_dtoa_r+0x9d0>
   23470:	e004c03a 	cmpne	r2,fp,zero
   23474:	10010126 	beq	r2,zero,2387c <_dtoa_r+0xdd4>
   23478:	04023d16 	blt	zero,r16,23d70 <_dtoa_r+0x12c8>
   2347c:	b5c00005 	stb	r23,0(r22)
   23480:	d9800517 	ldw	r6,20(sp)
   23484:	d9000f17 	ldw	r4,60(sp)
   23488:	b5800044 	addi	r22,r22,1
   2348c:	3105883a 	add	r2,r6,r4
   23490:	b0806526 	beq	r22,r2,23628 <_dtoa_r+0xb80>
   23494:	d9400717 	ldw	r5,28(sp)
   23498:	d9001617 	ldw	r4,88(sp)
   2349c:	01800284 	movi	r6,10
   234a0:	000f883a 	mov	r7,zero
   234a4:	00269900 	call	26990 <__multadd>
   234a8:	d8800715 	stw	r2,28(sp)
   234ac:	d8800617 	ldw	r2,24(sp)
   234b0:	14c10c26 	beq	r2,r19,238e4 <_dtoa_r+0xe3c>
   234b4:	d9400617 	ldw	r5,24(sp)
   234b8:	d9001617 	ldw	r4,88(sp)
   234bc:	01800284 	movi	r6,10
   234c0:	000f883a 	mov	r7,zero
   234c4:	00269900 	call	26990 <__multadd>
   234c8:	d9001617 	ldw	r4,88(sp)
   234cc:	980b883a 	mov	r5,r19
   234d0:	01800284 	movi	r6,10
   234d4:	000f883a 	mov	r7,zero
   234d8:	d8800615 	stw	r2,24(sp)
   234dc:	00269900 	call	26990 <__multadd>
   234e0:	1027883a 	mov	r19,r2
   234e4:	003fc206 	br	233f0 <_dtoa_r+0x948>
   234e8:	2445c83a 	sub	r2,r4,r17
   234ec:	a088983a 	sll	r4,r20,r2
   234f0:	003e4b06 	br	22e20 <_dtoa_r+0x378>
   234f4:	01bfffc4 	movi	r6,-1
   234f8:	00800044 	movi	r2,1
   234fc:	d9800e15 	stw	r6,56(sp)
   23500:	d9800f15 	stw	r6,60(sp)
   23504:	d8800b15 	stw	r2,44(sp)
   23508:	d8c01617 	ldw	r3,88(sp)
   2350c:	008005c4 	movi	r2,23
   23510:	18001115 	stw	zero,68(r3)
   23514:	1580082e 	bgeu	r2,r22,23538 <_dtoa_r+0xa90>
   23518:	00c00104 	movi	r3,4
   2351c:	0009883a 	mov	r4,zero
   23520:	18c7883a 	add	r3,r3,r3
   23524:	18800504 	addi	r2,r3,20
   23528:	21000044 	addi	r4,r4,1
   2352c:	b0bffc2e 	bgeu	r22,r2,23520 <_dtoa_r+0xa78>
   23530:	d9801617 	ldw	r6,88(sp)
   23534:	31001115 	stw	r4,68(r6)
   23538:	dc000f17 	ldw	r16,60(sp)
   2353c:	003e4b06 	br	22e6c <_dtoa_r+0x3c4>
   23540:	d9801717 	ldw	r6,92(sp)
   23544:	0023883a 	mov	r17,zero
   23548:	31bfff04 	addi	r6,r6,-4
   2354c:	d9801715 	stw	r6,92(sp)
   23550:	003df806 	br	22d34 <_dtoa_r+0x28c>
   23554:	00800804 	movi	r2,32
   23558:	10c9c83a 	sub	r4,r2,r3
   2355c:	00c00104 	movi	r3,4
   23560:	19005a16 	blt	r3,r4,236cc <_dtoa_r+0xc24>
   23564:	008000c4 	movi	r2,3
   23568:	113f7e16 	blt	r2,r4,23364 <_dtoa_r+0x8bc>
   2356c:	20800704 	addi	r2,r4,28
   23570:	003f7506 	br	23348 <_dtoa_r+0x8a0>
   23574:	d9801717 	ldw	r6,92(sp)
   23578:	00800044 	movi	r2,1
   2357c:	1180a10e 	bge	r2,r6,23804 <_dtoa_r+0xd5c>
   23580:	d9800f17 	ldw	r6,60(sp)
   23584:	d8c01017 	ldw	r3,64(sp)
   23588:	30bfffc4 	addi	r2,r6,-1
   2358c:	1881c616 	blt	r3,r2,23ca8 <_dtoa_r+0x1200>
   23590:	18a5c83a 	sub	r18,r3,r2
   23594:	d8800f17 	ldw	r2,60(sp)
   23598:	10026216 	blt	r2,zero,23f24 <_dtoa_r+0x147c>
   2359c:	dc001117 	ldw	r16,68(sp)
   235a0:	1007883a 	mov	r3,r2
   235a4:	d9800a17 	ldw	r6,40(sp)
   235a8:	d8801117 	ldw	r2,68(sp)
   235ac:	d9001617 	ldw	r4,88(sp)
   235b0:	30cd883a 	add	r6,r6,r3
   235b4:	10c5883a 	add	r2,r2,r3
   235b8:	01400044 	movi	r5,1
   235bc:	d9800a15 	stw	r6,40(sp)
   235c0:	d8801115 	stw	r2,68(sp)
   235c4:	00269540 	call	26954 <__i2b>
   235c8:	1027883a 	mov	r19,r2
   235cc:	003f2506 	br	23264 <_dtoa_r+0x7bc>
   235d0:	00c000f4 	movhi	r3,3
   235d4:	18f33904 	addi	r3,r3,-13084
   235d8:	003d6706 	br	22b78 <_dtoa_r+0xd0>
   235dc:	dd800517 	ldw	r22,20(sp)
   235e0:	04000044 	movi	r16,1
   235e4:	00000706 	br	23604 <_dtoa_r+0xb5c>
   235e8:	d9400717 	ldw	r5,28(sp)
   235ec:	d9001617 	ldw	r4,88(sp)
   235f0:	01800284 	movi	r6,10
   235f4:	000f883a 	mov	r7,zero
   235f8:	00269900 	call	26990 <__multadd>
   235fc:	d8800715 	stw	r2,28(sp)
   23600:	84000044 	addi	r16,r16,1
   23604:	d9000717 	ldw	r4,28(sp)
   23608:	900b883a 	mov	r5,r18
   2360c:	00228640 	call	22864 <quorem>
   23610:	15c00c04 	addi	r23,r2,48
   23614:	b5c00005 	stb	r23,0(r22)
   23618:	d8c00f17 	ldw	r3,60(sp)
   2361c:	b5800044 	addi	r22,r22,1
   23620:	80fff116 	blt	r16,r3,235e8 <_dtoa_r+0xb40>
   23624:	d8000615 	stw	zero,24(sp)
   23628:	d9400717 	ldw	r5,28(sp)
   2362c:	d9001617 	ldw	r4,88(sp)
   23630:	01800044 	movi	r6,1
   23634:	00265b40 	call	265b4 <__lshift>
   23638:	1009883a 	mov	r4,r2
   2363c:	900b883a 	mov	r5,r18
   23640:	d8800715 	stw	r2,28(sp)
   23644:	0025dcc0 	call	25dcc <__mcmp>
   23648:	00803c0e 	bge	zero,r2,2373c <_dtoa_r+0xc94>
   2364c:	b009883a 	mov	r4,r22
   23650:	213fffc4 	addi	r4,r4,-1
   23654:	21400003 	ldbu	r5,0(r4)
   23658:	00800e44 	movi	r2,57
   2365c:	28c03fcc 	andi	r3,r5,255
   23660:	18c0201c 	xori	r3,r3,128
   23664:	18ffe004 	addi	r3,r3,-128
   23668:	1881981e 	bne	r3,r2,23ccc <_dtoa_r+0x1224>
   2366c:	d9800517 	ldw	r6,20(sp)
   23670:	21bff71e 	bne	r4,r6,23650 <_dtoa_r+0xba8>
   23674:	d8800d17 	ldw	r2,52(sp)
   23678:	37000044 	addi	fp,r6,1
   2367c:	10800044 	addi	r2,r2,1
   23680:	d8800d15 	stw	r2,52(sp)
   23684:	00800c44 	movi	r2,49
   23688:	30800005 	stb	r2,0(r6)
   2368c:	d9001617 	ldw	r4,88(sp)
   23690:	900b883a 	mov	r5,r18
   23694:	0025c700 	call	25c70 <_Bfree>
   23698:	983ecd26 	beq	r19,zero,231d0 <_dtoa_r+0x728>
   2369c:	d8c00617 	ldw	r3,24(sp)
   236a0:	18000426 	beq	r3,zero,236b4 <_dtoa_r+0xc0c>
   236a4:	1cc00326 	beq	r3,r19,236b4 <_dtoa_r+0xc0c>
   236a8:	d9001617 	ldw	r4,88(sp)
   236ac:	180b883a 	mov	r5,r3
   236b0:	0025c700 	call	25c70 <_Bfree>
   236b4:	d9001617 	ldw	r4,88(sp)
   236b8:	980b883a 	mov	r5,r19
   236bc:	0025c700 	call	25c70 <_Bfree>
   236c0:	003ec306 	br	231d0 <_dtoa_r+0x728>
   236c4:	1805883a 	mov	r2,r3
   236c8:	003eeb06 	br	23278 <_dtoa_r+0x7d0>
   236cc:	d9800a17 	ldw	r6,40(sp)
   236d0:	d8c01117 	ldw	r3,68(sp)
   236d4:	20bfff04 	addi	r2,r4,-4
   236d8:	308d883a 	add	r6,r6,r2
   236dc:	1887883a 	add	r3,r3,r2
   236e0:	80a1883a 	add	r16,r16,r2
   236e4:	d9800a15 	stw	r6,40(sp)
   236e8:	d8c01115 	stw	r3,68(sp)
   236ec:	003f1d06 	br	23364 <_dtoa_r+0x8bc>
   236f0:	a03f0c1e 	bne	r20,zero,23324 <_dtoa_r+0x87c>
   236f4:	00800434 	movhi	r2,16
   236f8:	10bfffc4 	addi	r2,r2,-1
   236fc:	a884703a 	and	r2,r21,r2
   23700:	103f081e 	bne	r2,zero,23324 <_dtoa_r+0x87c>
   23704:	a89ffc2c 	andhi	r2,r21,32752
   23708:	103f0626 	beq	r2,zero,23324 <_dtoa_r+0x87c>
   2370c:	d8c01117 	ldw	r3,68(sp)
   23710:	d9000a17 	ldw	r4,40(sp)
   23714:	18c00044 	addi	r3,r3,1
   23718:	21000044 	addi	r4,r4,1
   2371c:	d8c01115 	stw	r3,68(sp)
   23720:	d9000a15 	stw	r4,40(sp)
   23724:	003f0006 	br	23328 <_dtoa_r+0x880>
   23728:	d9400717 	ldw	r5,28(sp)
   2372c:	d9001617 	ldw	r4,88(sp)
   23730:	0026abc0 	call	26abc <__pow5mult>
   23734:	d8800715 	stw	r2,28(sp)
   23738:	003eed06 	br	232f0 <_dtoa_r+0x848>
   2373c:	1000021e 	bne	r2,zero,23748 <_dtoa_r+0xca0>
   23740:	b880004c 	andi	r2,r23,1
   23744:	103fc11e 	bne	r2,zero,2364c <_dtoa_r+0xba4>
   23748:	b5bfffc4 	addi	r22,r22,-1
   2374c:	b0c00007 	ldb	r3,0(r22)
   23750:	00800c04 	movi	r2,48
   23754:	18bffc26 	beq	r3,r2,23748 <_dtoa_r+0xca0>
   23758:	b7000044 	addi	fp,r22,1
   2375c:	003fcb06 	br	2368c <_dtoa_r+0xbe4>
   23760:	d9800d17 	ldw	r6,52(sp)
   23764:	018fc83a 	sub	r7,zero,r6
   23768:	3801f726 	beq	r7,zero,23f48 <_dtoa_r+0x14a0>
   2376c:	398003cc 	andi	r6,r7,15
   23770:	300c90fa 	slli	r6,r6,3
   23774:	014000f4 	movhi	r5,3
   23778:	29735704 	addi	r5,r5,-12964
   2377c:	d9001217 	ldw	r4,72(sp)
   23780:	314d883a 	add	r6,r6,r5
   23784:	30c00117 	ldw	r3,4(r6)
   23788:	30800017 	ldw	r2,0(r6)
   2378c:	d9401317 	ldw	r5,76(sp)
   23790:	3821d13a 	srai	r16,r7,4
   23794:	100d883a 	mov	r6,r2
   23798:	180f883a 	mov	r7,r3
   2379c:	0028c500 	call	28c50 <__muldf3>
   237a0:	1011883a 	mov	r8,r2
   237a4:	1813883a 	mov	r9,r3
   237a8:	1029883a 	mov	r20,r2
   237ac:	182b883a 	mov	r21,r3
   237b0:	8001e526 	beq	r16,zero,23f48 <_dtoa_r+0x14a0>
   237b4:	05800084 	movi	r22,2
   237b8:	044000f4 	movhi	r17,3
   237bc:	8c738904 	addi	r17,r17,-12764
   237c0:	8080004c 	andi	r2,r16,1
   237c4:	1005003a 	cmpeq	r2,r2,zero
   237c8:	1000081e 	bne	r2,zero,237ec <_dtoa_r+0xd44>
   237cc:	89800017 	ldw	r6,0(r17)
   237d0:	89c00117 	ldw	r7,4(r17)
   237d4:	480b883a 	mov	r5,r9
   237d8:	4009883a 	mov	r4,r8
   237dc:	0028c500 	call	28c50 <__muldf3>
   237e0:	1011883a 	mov	r8,r2
   237e4:	b5800044 	addi	r22,r22,1
   237e8:	1813883a 	mov	r9,r3
   237ec:	8021d07a 	srai	r16,r16,1
   237f0:	8c400204 	addi	r17,r17,8
   237f4:	803ff21e 	bne	r16,zero,237c0 <_dtoa_r+0xd18>
   237f8:	4029883a 	mov	r20,r8
   237fc:	482b883a 	mov	r21,r9
   23800:	003dca06 	br	22f2c <_dtoa_r+0x484>
   23804:	d9000817 	ldw	r4,32(sp)
   23808:	2005003a 	cmpeq	r2,r4,zero
   2380c:	1001f61e 	bne	r2,zero,23fe8 <_dtoa_r+0x1540>
   23810:	dc001117 	ldw	r16,68(sp)
   23814:	dc801017 	ldw	r18,64(sp)
   23818:	18c10cc4 	addi	r3,r3,1075
   2381c:	003f6106 	br	235a4 <_dtoa_r+0xafc>
   23820:	d8000b15 	stw	zero,44(sp)
   23824:	d9802617 	ldw	r6,152(sp)
   23828:	d8c00d17 	ldw	r3,52(sp)
   2382c:	30800044 	addi	r2,r6,1
   23830:	18ad883a 	add	r22,r3,r2
   23834:	b13fffc4 	addi	r4,r22,-1
   23838:	d9000e15 	stw	r4,56(sp)
   2383c:	0581f60e 	bge	zero,r22,24018 <_dtoa_r+0x1570>
   23840:	dd800f15 	stw	r22,60(sp)
   23844:	003f3006 	br	23508 <_dtoa_r+0xa60>
   23848:	d8000b15 	stw	zero,44(sp)
   2384c:	d9002617 	ldw	r4,152(sp)
   23850:	0101eb0e 	bge	zero,r4,24000 <_dtoa_r+0x1558>
   23854:	202d883a 	mov	r22,r4
   23858:	d9000e15 	stw	r4,56(sp)
   2385c:	d9000f15 	stw	r4,60(sp)
   23860:	003f2906 	br	23508 <_dtoa_r+0xa60>
   23864:	01800044 	movi	r6,1
   23868:	d9800b15 	stw	r6,44(sp)
   2386c:	003ff706 	br	2384c <_dtoa_r+0xda4>
   23870:	01000044 	movi	r4,1
   23874:	d9000b15 	stw	r4,44(sp)
   23878:	003fea06 	br	23824 <_dtoa_r+0xd7c>
   2387c:	04000c0e 	bge	zero,r16,238b0 <_dtoa_r+0xe08>
   23880:	d9400717 	ldw	r5,28(sp)
   23884:	d9001617 	ldw	r4,88(sp)
   23888:	01800044 	movi	r6,1
   2388c:	00265b40 	call	265b4 <__lshift>
   23890:	1009883a 	mov	r4,r2
   23894:	900b883a 	mov	r5,r18
   23898:	d8800715 	stw	r2,28(sp)
   2389c:	0025dcc0 	call	25dcc <__mcmp>
   238a0:	0081e00e 	bge	zero,r2,24024 <_dtoa_r+0x157c>
   238a4:	bdc00044 	addi	r23,r23,1
   238a8:	00800e84 	movi	r2,58
   238ac:	b881a226 	beq	r23,r2,23f38 <_dtoa_r+0x1490>
   238b0:	b7000044 	addi	fp,r22,1
   238b4:	b5c00005 	stb	r23,0(r22)
   238b8:	003f7406 	br	2368c <_dtoa_r+0xbe4>
   238bc:	00800e44 	movi	r2,57
   238c0:	b8819d26 	beq	r23,r2,23f38 <_dtoa_r+0x1490>
   238c4:	053ffa0e 	bge	zero,r20,238b0 <_dtoa_r+0xe08>
   238c8:	8dc00c44 	addi	r23,r17,49
   238cc:	003ff806 	br	238b0 <_dtoa_r+0xe08>
   238d0:	d9001617 	ldw	r4,88(sp)
   238d4:	a80b883a 	mov	r5,r21
   238d8:	04000044 	movi	r16,1
   238dc:	0025c700 	call	25c70 <_Bfree>
   238e0:	003edf06 	br	23460 <_dtoa_r+0x9b8>
   238e4:	d9001617 	ldw	r4,88(sp)
   238e8:	980b883a 	mov	r5,r19
   238ec:	01800284 	movi	r6,10
   238f0:	000f883a 	mov	r7,zero
   238f4:	00269900 	call	26990 <__multadd>
   238f8:	1027883a 	mov	r19,r2
   238fc:	d8800615 	stw	r2,24(sp)
   23900:	003ebb06 	br	233f0 <_dtoa_r+0x948>
   23904:	d9801117 	ldw	r6,68(sp)
   23908:	d8800d17 	ldw	r2,52(sp)
   2390c:	d8000915 	stw	zero,36(sp)
   23910:	308dc83a 	sub	r6,r6,r2
   23914:	0087c83a 	sub	r3,zero,r2
   23918:	d9801115 	stw	r6,68(sp)
   2391c:	d8c01015 	stw	r3,64(sp)
   23920:	003cfe06 	br	22d1c <_dtoa_r+0x274>
   23924:	018dc83a 	sub	r6,zero,r6
   23928:	d9801115 	stw	r6,68(sp)
   2392c:	d8000a15 	stw	zero,40(sp)
   23930:	003cf306 	br	22d00 <_dtoa_r+0x258>
   23934:	d9000d17 	ldw	r4,52(sp)
   23938:	00295140 	call	29514 <__floatsidf>
   2393c:	880b883a 	mov	r5,r17
   23940:	8009883a 	mov	r4,r16
   23944:	180f883a 	mov	r7,r3
   23948:	100d883a 	mov	r6,r2
   2394c:	00292f40 	call	292f4 <__nedf2>
   23950:	103ce126 	beq	r2,zero,22cd8 <_dtoa_r+0x230>
   23954:	d9800d17 	ldw	r6,52(sp)
   23958:	31bfffc4 	addi	r6,r6,-1
   2395c:	d9800d15 	stw	r6,52(sp)
   23960:	003cdd06 	br	22cd8 <_dtoa_r+0x230>
   23964:	d9000717 	ldw	r4,28(sp)
   23968:	900b883a 	mov	r5,r18
   2396c:	0025dcc0 	call	25dcc <__mcmp>
   23970:	103e8d0e 	bge	r2,zero,233a8 <_dtoa_r+0x900>
   23974:	d9400717 	ldw	r5,28(sp)
   23978:	d9001617 	ldw	r4,88(sp)
   2397c:	01800284 	movi	r6,10
   23980:	000f883a 	mov	r7,zero
   23984:	00269900 	call	26990 <__multadd>
   23988:	d9800d17 	ldw	r6,52(sp)
   2398c:	d8800715 	stw	r2,28(sp)
   23990:	31bfffc4 	addi	r6,r6,-1
   23994:	d9800d15 	stw	r6,52(sp)
   23998:	b001a71e 	bne	r22,zero,24038 <_dtoa_r+0x1590>
   2399c:	d8800e17 	ldw	r2,56(sp)
   239a0:	d8800f15 	stw	r2,60(sp)
   239a4:	003e8006 	br	233a8 <_dtoa_r+0x900>
   239a8:	90800417 	ldw	r2,16(r18)
   239ac:	1085883a 	add	r2,r2,r2
   239b0:	1085883a 	add	r2,r2,r2
   239b4:	1485883a 	add	r2,r2,r18
   239b8:	11000417 	ldw	r4,16(r2)
   239bc:	0025c980 	call	25c98 <__hi0bits>
   239c0:	00c00804 	movi	r3,32
   239c4:	1887c83a 	sub	r3,r3,r2
   239c8:	003e5a06 	br	23334 <_dtoa_r+0x88c>
   239cc:	d9400717 	ldw	r5,28(sp)
   239d0:	d9801017 	ldw	r6,64(sp)
   239d4:	d9001617 	ldw	r4,88(sp)
   239d8:	0026abc0 	call	26abc <__pow5mult>
   239dc:	d8800715 	stw	r2,28(sp)
   239e0:	003e4306 	br	232f0 <_dtoa_r+0x848>
   239e4:	d9800f17 	ldw	r6,60(sp)
   239e8:	d8800d17 	ldw	r2,52(sp)
   239ec:	d9800315 	stw	r6,12(sp)
   239f0:	d8800415 	stw	r2,16(sp)
   239f4:	d8c00b17 	ldw	r3,44(sp)
   239f8:	1805003a 	cmpeq	r2,r3,zero
   239fc:	1000e21e 	bne	r2,zero,23d88 <_dtoa_r+0x12e0>
   23a00:	d9000317 	ldw	r4,12(sp)
   23a04:	0005883a 	mov	r2,zero
   23a08:	00cff834 	movhi	r3,16352
   23a0c:	200c90fa 	slli	r6,r4,3
   23a10:	010000f4 	movhi	r4,3
   23a14:	21335704 	addi	r4,r4,-12964
   23a18:	180b883a 	mov	r5,r3
   23a1c:	310d883a 	add	r6,r6,r4
   23a20:	327fff17 	ldw	r9,-4(r6)
   23a24:	323ffe17 	ldw	r8,-8(r6)
   23a28:	1009883a 	mov	r4,r2
   23a2c:	480f883a 	mov	r7,r9
   23a30:	400d883a 	mov	r6,r8
   23a34:	00290140 	call	29014 <__divdf3>
   23a38:	180b883a 	mov	r5,r3
   23a3c:	b00d883a 	mov	r6,r22
   23a40:	b80f883a 	mov	r7,r23
   23a44:	1009883a 	mov	r4,r2
   23a48:	0028b5c0 	call	28b5c <__subdf3>
   23a4c:	a80b883a 	mov	r5,r21
   23a50:	a009883a 	mov	r4,r20
   23a54:	d8c01915 	stw	r3,100(sp)
   23a58:	d8801815 	stw	r2,96(sp)
   23a5c:	002960c0 	call	2960c <__fixdfsi>
   23a60:	1009883a 	mov	r4,r2
   23a64:	1027883a 	mov	r19,r2
   23a68:	00295140 	call	29514 <__floatsidf>
   23a6c:	a80b883a 	mov	r5,r21
   23a70:	a009883a 	mov	r4,r20
   23a74:	180f883a 	mov	r7,r3
   23a78:	100d883a 	mov	r6,r2
   23a7c:	0028b5c0 	call	28b5c <__subdf3>
   23a80:	d9801817 	ldw	r6,96(sp)
   23a84:	1823883a 	mov	r17,r3
   23a88:	d8801415 	stw	r2,80(sp)
   23a8c:	302d883a 	mov	r22,r6
   23a90:	d9800517 	ldw	r6,20(sp)
   23a94:	9cc00c04 	addi	r19,r19,48
   23a98:	dc401515 	stw	r17,84(sp)
   23a9c:	d8c01917 	ldw	r3,100(sp)
   23aa0:	34c00005 	stb	r19,0(r6)
   23aa4:	d8800517 	ldw	r2,20(sp)
   23aa8:	d9401917 	ldw	r5,100(sp)
   23aac:	d9801417 	ldw	r6,80(sp)
   23ab0:	b009883a 	mov	r4,r22
   23ab4:	880f883a 	mov	r7,r17
   23ab8:	182f883a 	mov	r23,r3
   23abc:	17000044 	addi	fp,r2,1
   23ac0:	002937c0 	call	2937c <__gtdf2>
   23ac4:	00804e16 	blt	zero,r2,23c00 <_dtoa_r+0x1158>
   23ac8:	d9801417 	ldw	r6,80(sp)
   23acc:	0005883a 	mov	r2,zero
   23ad0:	00cffc34 	movhi	r3,16368
   23ad4:	180b883a 	mov	r5,r3
   23ad8:	880f883a 	mov	r7,r17
   23adc:	1009883a 	mov	r4,r2
   23ae0:	0028b5c0 	call	28b5c <__subdf3>
   23ae4:	d9401917 	ldw	r5,100(sp)
   23ae8:	180f883a 	mov	r7,r3
   23aec:	b009883a 	mov	r4,r22
   23af0:	100d883a 	mov	r6,r2
   23af4:	002937c0 	call	2937c <__gtdf2>
   23af8:	00bda216 	blt	zero,r2,23184 <_dtoa_r+0x6dc>
   23afc:	d8c00317 	ldw	r3,12(sp)
   23b00:	00800044 	movi	r2,1
   23b04:	10c01216 	blt	r2,r3,23b50 <_dtoa_r+0x10a8>
   23b08:	003d4506 	br	23020 <_dtoa_r+0x578>
   23b0c:	d9801417 	ldw	r6,80(sp)
   23b10:	0005883a 	mov	r2,zero
   23b14:	00cffc34 	movhi	r3,16368
   23b18:	180b883a 	mov	r5,r3
   23b1c:	880f883a 	mov	r7,r17
   23b20:	1009883a 	mov	r4,r2
   23b24:	0028b5c0 	call	28b5c <__subdf3>
   23b28:	d9c01b17 	ldw	r7,108(sp)
   23b2c:	180b883a 	mov	r5,r3
   23b30:	1009883a 	mov	r4,r2
   23b34:	b00d883a 	mov	r6,r22
   23b38:	002948c0 	call	2948c <__ltdf2>
   23b3c:	103d9116 	blt	r2,zero,23184 <_dtoa_r+0x6dc>
   23b40:	d9800517 	ldw	r6,20(sp)
   23b44:	d9000317 	ldw	r4,12(sp)
   23b48:	3105883a 	add	r2,r6,r4
   23b4c:	e0bd3426 	beq	fp,r2,23020 <_dtoa_r+0x578>
   23b50:	04500934 	movhi	r17,16420
   23b54:	0021883a 	mov	r16,zero
   23b58:	b80b883a 	mov	r5,r23
   23b5c:	b009883a 	mov	r4,r22
   23b60:	800d883a 	mov	r6,r16
   23b64:	880f883a 	mov	r7,r17
   23b68:	0028c500 	call	28c50 <__muldf3>
   23b6c:	d9401517 	ldw	r5,84(sp)
   23b70:	d9001417 	ldw	r4,80(sp)
   23b74:	880f883a 	mov	r7,r17
   23b78:	000d883a 	mov	r6,zero
   23b7c:	d8801a15 	stw	r2,104(sp)
   23b80:	d8c01b15 	stw	r3,108(sp)
   23b84:	0028c500 	call	28c50 <__muldf3>
   23b88:	180b883a 	mov	r5,r3
   23b8c:	1009883a 	mov	r4,r2
   23b90:	1823883a 	mov	r17,r3
   23b94:	1021883a 	mov	r16,r2
   23b98:	002960c0 	call	2960c <__fixdfsi>
   23b9c:	1009883a 	mov	r4,r2
   23ba0:	102b883a 	mov	r21,r2
   23ba4:	00295140 	call	29514 <__floatsidf>
   23ba8:	880b883a 	mov	r5,r17
   23bac:	8009883a 	mov	r4,r16
   23bb0:	180f883a 	mov	r7,r3
   23bb4:	100d883a 	mov	r6,r2
   23bb8:	0028b5c0 	call	28b5c <__subdf3>
   23bbc:	1021883a 	mov	r16,r2
   23bc0:	d9001b17 	ldw	r4,108(sp)
   23bc4:	1823883a 	mov	r17,r3
   23bc8:	dc001415 	stw	r16,80(sp)
   23bcc:	ad400c04 	addi	r21,r21,48
   23bd0:	dc401515 	stw	r17,84(sp)
   23bd4:	d8801a17 	ldw	r2,104(sp)
   23bd8:	e5400005 	stb	r21,0(fp)
   23bdc:	202f883a 	mov	r23,r4
   23be0:	d9c01b17 	ldw	r7,108(sp)
   23be4:	d9001417 	ldw	r4,80(sp)
   23be8:	880b883a 	mov	r5,r17
   23bec:	100d883a 	mov	r6,r2
   23bf0:	102d883a 	mov	r22,r2
   23bf4:	e7000044 	addi	fp,fp,1
   23bf8:	002948c0 	call	2948c <__ltdf2>
   23bfc:	103fc30e 	bge	r2,zero,23b0c <_dtoa_r+0x1064>
   23c00:	d9000417 	ldw	r4,16(sp)
   23c04:	d9000d15 	stw	r4,52(sp)
   23c08:	003d7106 	br	231d0 <_dtoa_r+0x728>
   23c0c:	d9801717 	ldw	r6,92(sp)
   23c10:	00800084 	movi	r2,2
   23c14:	11bde60e 	bge	r2,r6,233b0 <_dtoa_r+0x908>
   23c18:	203cfb1e 	bne	r4,zero,23008 <_dtoa_r+0x560>
   23c1c:	d9001617 	ldw	r4,88(sp)
   23c20:	900b883a 	mov	r5,r18
   23c24:	01800144 	movi	r6,5
   23c28:	000f883a 	mov	r7,zero
   23c2c:	00269900 	call	26990 <__multadd>
   23c30:	d9000717 	ldw	r4,28(sp)
   23c34:	100b883a 	mov	r5,r2
   23c38:	1025883a 	mov	r18,r2
   23c3c:	0025dcc0 	call	25dcc <__mcmp>
   23c40:	00bcf10e 	bge	zero,r2,23008 <_dtoa_r+0x560>
   23c44:	d8c00d17 	ldw	r3,52(sp)
   23c48:	d9000517 	ldw	r4,20(sp)
   23c4c:	d8000615 	stw	zero,24(sp)
   23c50:	18c00044 	addi	r3,r3,1
   23c54:	d8c00d15 	stw	r3,52(sp)
   23c58:	00800c44 	movi	r2,49
   23c5c:	27000044 	addi	fp,r4,1
   23c60:	20800005 	stb	r2,0(r4)
   23c64:	003e8906 	br	2368c <_dtoa_r+0xbe4>
   23c68:	d8c00517 	ldw	r3,20(sp)
   23c6c:	003bc206 	br	22b78 <_dtoa_r+0xd0>
   23c70:	018000f4 	movhi	r6,3
   23c74:	31b38904 	addi	r6,r6,-12764
   23c78:	30c00917 	ldw	r3,36(r6)
   23c7c:	30800817 	ldw	r2,32(r6)
   23c80:	d9001217 	ldw	r4,72(sp)
   23c84:	d9401317 	ldw	r5,76(sp)
   23c88:	180f883a 	mov	r7,r3
   23c8c:	100d883a 	mov	r6,r2
   23c90:	00290140 	call	29014 <__divdf3>
   23c94:	948003cc 	andi	r18,r18,15
   23c98:	058000c4 	movi	r22,3
   23c9c:	1029883a 	mov	r20,r2
   23ca0:	182b883a 	mov	r21,r3
   23ca4:	003c8906 	br	22ecc <_dtoa_r+0x424>
   23ca8:	d9001017 	ldw	r4,64(sp)
   23cac:	d9800917 	ldw	r6,36(sp)
   23cb0:	0025883a 	mov	r18,zero
   23cb4:	1105c83a 	sub	r2,r2,r4
   23cb8:	2089883a 	add	r4,r4,r2
   23cbc:	308d883a 	add	r6,r6,r2
   23cc0:	d9001015 	stw	r4,64(sp)
   23cc4:	d9800915 	stw	r6,36(sp)
   23cc8:	003e3206 	br	23594 <_dtoa_r+0xaec>
   23ccc:	28800044 	addi	r2,r5,1
   23cd0:	27000044 	addi	fp,r4,1
   23cd4:	20800005 	stb	r2,0(r4)
   23cd8:	003e6c06 	br	2368c <_dtoa_r+0xbe4>
   23cdc:	d8800f17 	ldw	r2,60(sp)
   23ce0:	00bce016 	blt	zero,r2,23064 <_dtoa_r+0x5bc>
   23ce4:	d9800f17 	ldw	r6,60(sp)
   23ce8:	303cc51e 	bne	r6,zero,23000 <_dtoa_r+0x558>
   23cec:	0005883a 	mov	r2,zero
   23cf0:	00d00534 	movhi	r3,16404
   23cf4:	980b883a 	mov	r5,r19
   23cf8:	180f883a 	mov	r7,r3
   23cfc:	9009883a 	mov	r4,r18
   23d00:	100d883a 	mov	r6,r2
   23d04:	0028c500 	call	28c50 <__muldf3>
   23d08:	180b883a 	mov	r5,r3
   23d0c:	a80f883a 	mov	r7,r21
   23d10:	1009883a 	mov	r4,r2
   23d14:	a00d883a 	mov	r6,r20
   23d18:	00294040 	call	29404 <__gedf2>
   23d1c:	103cb80e 	bge	r2,zero,23000 <_dtoa_r+0x558>
   23d20:	0027883a 	mov	r19,zero
   23d24:	0025883a 	mov	r18,zero
   23d28:	003fc606 	br	23c44 <_dtoa_r+0x119c>
   23d2c:	99400117 	ldw	r5,4(r19)
   23d30:	d9001617 	ldw	r4,88(sp)
   23d34:	00261f00 	call	261f0 <_Balloc>
   23d38:	99800417 	ldw	r6,16(r19)
   23d3c:	11000304 	addi	r4,r2,12
   23d40:	99400304 	addi	r5,r19,12
   23d44:	318d883a 	add	r6,r6,r6
   23d48:	318d883a 	add	r6,r6,r6
   23d4c:	31800204 	addi	r6,r6,8
   23d50:	1023883a 	mov	r17,r2
   23d54:	0025a580 	call	25a58 <memcpy>
   23d58:	d9001617 	ldw	r4,88(sp)
   23d5c:	880b883a 	mov	r5,r17
   23d60:	01800044 	movi	r6,1
   23d64:	00265b40 	call	265b4 <__lshift>
   23d68:	100b883a 	mov	r5,r2
   23d6c:	003d9c06 	br	233e0 <_dtoa_r+0x938>
   23d70:	00800e44 	movi	r2,57
   23d74:	b8807026 	beq	r23,r2,23f38 <_dtoa_r+0x1490>
   23d78:	b8800044 	addi	r2,r23,1
   23d7c:	b7000044 	addi	fp,r22,1
   23d80:	b0800005 	stb	r2,0(r22)
   23d84:	003e4106 	br	2368c <_dtoa_r+0xbe4>
   23d88:	d8800317 	ldw	r2,12(sp)
   23d8c:	018000f4 	movhi	r6,3
   23d90:	31b35704 	addi	r6,r6,-12964
   23d94:	b009883a 	mov	r4,r22
   23d98:	100e90fa 	slli	r7,r2,3
   23d9c:	b80b883a 	mov	r5,r23
   23da0:	398f883a 	add	r7,r7,r6
   23da4:	38bffe17 	ldw	r2,-8(r7)
   23da8:	d9800517 	ldw	r6,20(sp)
   23dac:	38ffff17 	ldw	r3,-4(r7)
   23db0:	37000044 	addi	fp,r6,1
   23db4:	180f883a 	mov	r7,r3
   23db8:	100d883a 	mov	r6,r2
   23dbc:	0028c500 	call	28c50 <__muldf3>
   23dc0:	a80b883a 	mov	r5,r21
   23dc4:	a009883a 	mov	r4,r20
   23dc8:	182f883a 	mov	r23,r3
   23dcc:	102d883a 	mov	r22,r2
   23dd0:	002960c0 	call	2960c <__fixdfsi>
   23dd4:	1009883a 	mov	r4,r2
   23dd8:	1027883a 	mov	r19,r2
   23ddc:	00295140 	call	29514 <__floatsidf>
   23de0:	a80b883a 	mov	r5,r21
   23de4:	a009883a 	mov	r4,r20
   23de8:	180f883a 	mov	r7,r3
   23dec:	100d883a 	mov	r6,r2
   23df0:	0028b5c0 	call	28b5c <__subdf3>
   23df4:	180b883a 	mov	r5,r3
   23df8:	d8c00517 	ldw	r3,20(sp)
   23dfc:	9cc00c04 	addi	r19,r19,48
   23e00:	1009883a 	mov	r4,r2
   23e04:	1cc00005 	stb	r19,0(r3)
   23e08:	2021883a 	mov	r16,r4
   23e0c:	d9000317 	ldw	r4,12(sp)
   23e10:	00800044 	movi	r2,1
   23e14:	2823883a 	mov	r17,r5
   23e18:	20802226 	beq	r4,r2,23ea4 <_dtoa_r+0x13fc>
   23e1c:	1029883a 	mov	r20,r2
   23e20:	0005883a 	mov	r2,zero
   23e24:	00d00934 	movhi	r3,16420
   23e28:	180f883a 	mov	r7,r3
   23e2c:	100d883a 	mov	r6,r2
   23e30:	880b883a 	mov	r5,r17
   23e34:	8009883a 	mov	r4,r16
   23e38:	0028c500 	call	28c50 <__muldf3>
   23e3c:	180b883a 	mov	r5,r3
   23e40:	1009883a 	mov	r4,r2
   23e44:	1823883a 	mov	r17,r3
   23e48:	1021883a 	mov	r16,r2
   23e4c:	002960c0 	call	2960c <__fixdfsi>
   23e50:	1009883a 	mov	r4,r2
   23e54:	102b883a 	mov	r21,r2
   23e58:	00295140 	call	29514 <__floatsidf>
   23e5c:	880b883a 	mov	r5,r17
   23e60:	8009883a 	mov	r4,r16
   23e64:	180f883a 	mov	r7,r3
   23e68:	100d883a 	mov	r6,r2
   23e6c:	0028b5c0 	call	28b5c <__subdf3>
   23e70:	180b883a 	mov	r5,r3
   23e74:	d8c00517 	ldw	r3,20(sp)
   23e78:	1009883a 	mov	r4,r2
   23e7c:	ad400c04 	addi	r21,r21,48
   23e80:	1d05883a 	add	r2,r3,r20
   23e84:	15400005 	stb	r21,0(r2)
   23e88:	2021883a 	mov	r16,r4
   23e8c:	d9000317 	ldw	r4,12(sp)
   23e90:	a5000044 	addi	r20,r20,1
   23e94:	2823883a 	mov	r17,r5
   23e98:	a13fe11e 	bne	r20,r4,23e20 <_dtoa_r+0x1378>
   23e9c:	e505883a 	add	r2,fp,r20
   23ea0:	173fffc4 	addi	fp,r2,-1
   23ea4:	0025883a 	mov	r18,zero
   23ea8:	04cff834 	movhi	r19,16352
   23eac:	b009883a 	mov	r4,r22
   23eb0:	b80b883a 	mov	r5,r23
   23eb4:	900d883a 	mov	r6,r18
   23eb8:	980f883a 	mov	r7,r19
   23ebc:	0028bdc0 	call	28bdc <__adddf3>
   23ec0:	180b883a 	mov	r5,r3
   23ec4:	1009883a 	mov	r4,r2
   23ec8:	800d883a 	mov	r6,r16
   23ecc:	880f883a 	mov	r7,r17
   23ed0:	002948c0 	call	2948c <__ltdf2>
   23ed4:	103cab16 	blt	r2,zero,23184 <_dtoa_r+0x6dc>
   23ed8:	0009883a 	mov	r4,zero
   23edc:	980b883a 	mov	r5,r19
   23ee0:	b80f883a 	mov	r7,r23
   23ee4:	b00d883a 	mov	r6,r22
   23ee8:	0028b5c0 	call	28b5c <__subdf3>
   23eec:	180b883a 	mov	r5,r3
   23ef0:	880f883a 	mov	r7,r17
   23ef4:	1009883a 	mov	r4,r2
   23ef8:	800d883a 	mov	r6,r16
   23efc:	002937c0 	call	2937c <__gtdf2>
   23f00:	00bc470e 	bge	zero,r2,23020 <_dtoa_r+0x578>
   23f04:	00c00c04 	movi	r3,48
   23f08:	e73fffc4 	addi	fp,fp,-1
   23f0c:	e0800007 	ldb	r2,0(fp)
   23f10:	10fffd26 	beq	r2,r3,23f08 <_dtoa_r+0x1460>
   23f14:	d9800417 	ldw	r6,16(sp)
   23f18:	e7000044 	addi	fp,fp,1
   23f1c:	d9800d15 	stw	r6,52(sp)
   23f20:	003cab06 	br	231d0 <_dtoa_r+0x728>
   23f24:	d8c00f17 	ldw	r3,60(sp)
   23f28:	d9001117 	ldw	r4,68(sp)
   23f2c:	20e1c83a 	sub	r16,r4,r3
   23f30:	0007883a 	mov	r3,zero
   23f34:	003d9b06 	br	235a4 <_dtoa_r+0xafc>
   23f38:	00800e44 	movi	r2,57
   23f3c:	b0800005 	stb	r2,0(r22)
   23f40:	b5800044 	addi	r22,r22,1
   23f44:	003dc106 	br	2364c <_dtoa_r+0xba4>
   23f48:	05800084 	movi	r22,2
   23f4c:	003bf706 	br	22f2c <_dtoa_r+0x484>
   23f50:	d9000f17 	ldw	r4,60(sp)
   23f54:	013c000e 	bge	zero,r4,22f58 <_dtoa_r+0x4b0>
   23f58:	d9800e17 	ldw	r6,56(sp)
   23f5c:	01bc300e 	bge	zero,r6,23020 <_dtoa_r+0x578>
   23f60:	0005883a 	mov	r2,zero
   23f64:	00d00934 	movhi	r3,16420
   23f68:	a80b883a 	mov	r5,r21
   23f6c:	180f883a 	mov	r7,r3
   23f70:	a009883a 	mov	r4,r20
   23f74:	100d883a 	mov	r6,r2
   23f78:	0028c500 	call	28c50 <__muldf3>
   23f7c:	b1000044 	addi	r4,r22,1
   23f80:	1021883a 	mov	r16,r2
   23f84:	1823883a 	mov	r17,r3
   23f88:	00295140 	call	29514 <__floatsidf>
   23f8c:	880b883a 	mov	r5,r17
   23f90:	8009883a 	mov	r4,r16
   23f94:	180f883a 	mov	r7,r3
   23f98:	100d883a 	mov	r6,r2
   23f9c:	0028c500 	call	28c50 <__muldf3>
   23fa0:	0011883a 	mov	r8,zero
   23fa4:	02500734 	movhi	r9,16412
   23fa8:	180b883a 	mov	r5,r3
   23fac:	480f883a 	mov	r7,r9
   23fb0:	1009883a 	mov	r4,r2
   23fb4:	400d883a 	mov	r6,r8
   23fb8:	0028bdc0 	call	28bdc <__adddf3>
   23fbc:	102d883a 	mov	r22,r2
   23fc0:	00bf3034 	movhi	r2,64704
   23fc4:	10ef883a 	add	r23,r2,r3
   23fc8:	d8800d17 	ldw	r2,52(sp)
   23fcc:	d8c00e17 	ldw	r3,56(sp)
   23fd0:	8029883a 	mov	r20,r16
   23fd4:	10bfffc4 	addi	r2,r2,-1
   23fd8:	882b883a 	mov	r21,r17
   23fdc:	d8800415 	stw	r2,16(sp)
   23fe0:	d8c00315 	stw	r3,12(sp)
   23fe4:	003e8306 	br	239f4 <_dtoa_r+0xf4c>
   23fe8:	d8800117 	ldw	r2,4(sp)
   23fec:	dc001117 	ldw	r16,68(sp)
   23ff0:	dc801017 	ldw	r18,64(sp)
   23ff4:	00c00d84 	movi	r3,54
   23ff8:	1887c83a 	sub	r3,r3,r2
   23ffc:	003d6906 	br	235a4 <_dtoa_r+0xafc>
   24000:	01800044 	movi	r6,1
   24004:	3021883a 	mov	r16,r6
   24008:	d9800f15 	stw	r6,60(sp)
   2400c:	d9802615 	stw	r6,152(sp)
   24010:	d9800e15 	stw	r6,56(sp)
   24014:	003b9306 	br	22e64 <_dtoa_r+0x3bc>
   24018:	b021883a 	mov	r16,r22
   2401c:	dd800f15 	stw	r22,60(sp)
   24020:	003b9006 	br	22e64 <_dtoa_r+0x3bc>
   24024:	103e221e 	bne	r2,zero,238b0 <_dtoa_r+0xe08>
   24028:	b880004c 	andi	r2,r23,1
   2402c:	1005003a 	cmpeq	r2,r2,zero
   24030:	103e1f1e 	bne	r2,zero,238b0 <_dtoa_r+0xe08>
   24034:	003e1b06 	br	238a4 <_dtoa_r+0xdfc>
   24038:	d9001617 	ldw	r4,88(sp)
   2403c:	980b883a 	mov	r5,r19
   24040:	01800284 	movi	r6,10
   24044:	000f883a 	mov	r7,zero
   24048:	00269900 	call	26990 <__multadd>
   2404c:	d8c00e17 	ldw	r3,56(sp)
   24050:	1027883a 	mov	r19,r2
   24054:	d8c00f15 	stw	r3,60(sp)
   24058:	003cd306 	br	233a8 <_dtoa_r+0x900>

0002405c <_fflush_r>:
   2405c:	defffb04 	addi	sp,sp,-20
   24060:	dcc00315 	stw	r19,12(sp)
   24064:	dc800215 	stw	r18,8(sp)
   24068:	dfc00415 	stw	ra,16(sp)
   2406c:	dc400115 	stw	r17,4(sp)
   24070:	dc000015 	stw	r16,0(sp)
   24074:	2027883a 	mov	r19,r4
   24078:	2825883a 	mov	r18,r5
   2407c:	20000226 	beq	r4,zero,24088 <_fflush_r+0x2c>
   24080:	20800e17 	ldw	r2,56(r4)
   24084:	10005626 	beq	r2,zero,241e0 <_fflush_r+0x184>
   24088:	9100030b 	ldhu	r4,12(r18)
   2408c:	20ffffcc 	andi	r3,r4,65535
   24090:	18e0001c 	xori	r3,r3,32768
   24094:	18e00004 	addi	r3,r3,-32768
   24098:	1880020c 	andi	r2,r3,8
   2409c:	1000261e 	bne	r2,zero,24138 <_fflush_r+0xdc>
   240a0:	90c00117 	ldw	r3,4(r18)
   240a4:	20820014 	ori	r2,r4,2048
   240a8:	9080030d 	sth	r2,12(r18)
   240ac:	1009883a 	mov	r4,r2
   240b0:	00c0400e 	bge	zero,r3,241b4 <_fflush_r+0x158>
   240b4:	92000a17 	ldw	r8,40(r18)
   240b8:	40004026 	beq	r8,zero,241bc <_fflush_r+0x160>
   240bc:	2084000c 	andi	r2,r4,4096
   240c0:	10005326 	beq	r2,zero,24210 <_fflush_r+0x1b4>
   240c4:	94001417 	ldw	r16,80(r18)
   240c8:	9080030b 	ldhu	r2,12(r18)
   240cc:	1080010c 	andi	r2,r2,4
   240d0:	1000481e 	bne	r2,zero,241f4 <_fflush_r+0x198>
   240d4:	91400717 	ldw	r5,28(r18)
   240d8:	9809883a 	mov	r4,r19
   240dc:	800d883a 	mov	r6,r16
   240e0:	000f883a 	mov	r7,zero
   240e4:	403ee83a 	callr	r8
   240e8:	8080261e 	bne	r16,r2,24184 <_fflush_r+0x128>
   240ec:	9080030b 	ldhu	r2,12(r18)
   240f0:	91000417 	ldw	r4,16(r18)
   240f4:	90000115 	stw	zero,4(r18)
   240f8:	10bdffcc 	andi	r2,r2,63487
   240fc:	10ffffcc 	andi	r3,r2,65535
   24100:	18c4000c 	andi	r3,r3,4096
   24104:	9080030d 	sth	r2,12(r18)
   24108:	91000015 	stw	r4,0(r18)
   2410c:	18002b26 	beq	r3,zero,241bc <_fflush_r+0x160>
   24110:	0007883a 	mov	r3,zero
   24114:	1805883a 	mov	r2,r3
   24118:	94001415 	stw	r16,80(r18)
   2411c:	dfc00417 	ldw	ra,16(sp)
   24120:	dcc00317 	ldw	r19,12(sp)
   24124:	dc800217 	ldw	r18,8(sp)
   24128:	dc400117 	ldw	r17,4(sp)
   2412c:	dc000017 	ldw	r16,0(sp)
   24130:	dec00504 	addi	sp,sp,20
   24134:	f800283a 	ret
   24138:	94400417 	ldw	r17,16(r18)
   2413c:	88001f26 	beq	r17,zero,241bc <_fflush_r+0x160>
   24140:	90800017 	ldw	r2,0(r18)
   24144:	18c000cc 	andi	r3,r3,3
   24148:	94400015 	stw	r17,0(r18)
   2414c:	1461c83a 	sub	r16,r2,r17
   24150:	18002526 	beq	r3,zero,241e8 <_fflush_r+0x18c>
   24154:	0005883a 	mov	r2,zero
   24158:	90800215 	stw	r2,8(r18)
   2415c:	0400170e 	bge	zero,r16,241bc <_fflush_r+0x160>
   24160:	90c00917 	ldw	r3,36(r18)
   24164:	91400717 	ldw	r5,28(r18)
   24168:	880d883a 	mov	r6,r17
   2416c:	800f883a 	mov	r7,r16
   24170:	9809883a 	mov	r4,r19
   24174:	183ee83a 	callr	r3
   24178:	88a3883a 	add	r17,r17,r2
   2417c:	80a1c83a 	sub	r16,r16,r2
   24180:	00bff616 	blt	zero,r2,2415c <_fflush_r+0x100>
   24184:	9080030b 	ldhu	r2,12(r18)
   24188:	00ffffc4 	movi	r3,-1
   2418c:	10801014 	ori	r2,r2,64
   24190:	9080030d 	sth	r2,12(r18)
   24194:	1805883a 	mov	r2,r3
   24198:	dfc00417 	ldw	ra,16(sp)
   2419c:	dcc00317 	ldw	r19,12(sp)
   241a0:	dc800217 	ldw	r18,8(sp)
   241a4:	dc400117 	ldw	r17,4(sp)
   241a8:	dc000017 	ldw	r16,0(sp)
   241ac:	dec00504 	addi	sp,sp,20
   241b0:	f800283a 	ret
   241b4:	90800f17 	ldw	r2,60(r18)
   241b8:	00bfbe16 	blt	zero,r2,240b4 <_fflush_r+0x58>
   241bc:	0007883a 	mov	r3,zero
   241c0:	1805883a 	mov	r2,r3
   241c4:	dfc00417 	ldw	ra,16(sp)
   241c8:	dcc00317 	ldw	r19,12(sp)
   241cc:	dc800217 	ldw	r18,8(sp)
   241d0:	dc400117 	ldw	r17,4(sp)
   241d4:	dc000017 	ldw	r16,0(sp)
   241d8:	dec00504 	addi	sp,sp,20
   241dc:	f800283a 	ret
   241e0:	00242f40 	call	242f4 <__sinit>
   241e4:	003fa806 	br	24088 <_fflush_r+0x2c>
   241e8:	90800517 	ldw	r2,20(r18)
   241ec:	90800215 	stw	r2,8(r18)
   241f0:	003fda06 	br	2415c <_fflush_r+0x100>
   241f4:	90800117 	ldw	r2,4(r18)
   241f8:	90c00c17 	ldw	r3,48(r18)
   241fc:	80a1c83a 	sub	r16,r16,r2
   24200:	183fb426 	beq	r3,zero,240d4 <_fflush_r+0x78>
   24204:	90800f17 	ldw	r2,60(r18)
   24208:	80a1c83a 	sub	r16,r16,r2
   2420c:	003fb106 	br	240d4 <_fflush_r+0x78>
   24210:	91400717 	ldw	r5,28(r18)
   24214:	9809883a 	mov	r4,r19
   24218:	000d883a 	mov	r6,zero
   2421c:	01c00044 	movi	r7,1
   24220:	403ee83a 	callr	r8
   24224:	1021883a 	mov	r16,r2
   24228:	00bfffc4 	movi	r2,-1
   2422c:	80800226 	beq	r16,r2,24238 <_fflush_r+0x1dc>
   24230:	92000a17 	ldw	r8,40(r18)
   24234:	003fa406 	br	240c8 <_fflush_r+0x6c>
   24238:	98c00017 	ldw	r3,0(r19)
   2423c:	00800744 	movi	r2,29
   24240:	18bfde26 	beq	r3,r2,241bc <_fflush_r+0x160>
   24244:	9080030b 	ldhu	r2,12(r18)
   24248:	8007883a 	mov	r3,r16
   2424c:	10801014 	ori	r2,r2,64
   24250:	9080030d 	sth	r2,12(r18)
   24254:	003fcf06 	br	24194 <_fflush_r+0x138>

00024258 <fflush>:
   24258:	014000b4 	movhi	r5,2
   2425c:	29501704 	addi	r5,r5,16476
   24260:	2007883a 	mov	r3,r4
   24264:	20000526 	beq	r4,zero,2427c <fflush+0x24>
   24268:	008000f4 	movhi	r2,3
   2426c:	10ba7904 	addi	r2,r2,-5660
   24270:	11000017 	ldw	r4,0(r2)
   24274:	180b883a 	mov	r5,r3
   24278:	002405c1 	jmpi	2405c <_fflush_r>
   2427c:	008000f4 	movhi	r2,3
   24280:	10ba7a04 	addi	r2,r2,-5656
   24284:	11000017 	ldw	r4,0(r2)
   24288:	0024e5c1 	jmpi	24e5c <_fwalk_reent>

0002428c <std>:
   2428c:	008000b4 	movhi	r2,2
   24290:	109cf404 	addi	r2,r2,29648
   24294:	20800b15 	stw	r2,44(r4)
   24298:	008000b4 	movhi	r2,2
   2429c:	109d2f04 	addi	r2,r2,29884
   242a0:	20800815 	stw	r2,32(r4)
   242a4:	00c000b4 	movhi	r3,2
   242a8:	18dd1004 	addi	r3,r3,29760
   242ac:	008000b4 	movhi	r2,2
   242b0:	109cf604 	addi	r2,r2,29656
   242b4:	2140030d 	sth	r5,12(r4)
   242b8:	2180038d 	sth	r6,14(r4)
   242bc:	20c00915 	stw	r3,36(r4)
   242c0:	20800a15 	stw	r2,40(r4)
   242c4:	20000015 	stw	zero,0(r4)
   242c8:	20000115 	stw	zero,4(r4)
   242cc:	20000215 	stw	zero,8(r4)
   242d0:	20000415 	stw	zero,16(r4)
   242d4:	20000515 	stw	zero,20(r4)
   242d8:	20000615 	stw	zero,24(r4)
   242dc:	21000715 	stw	r4,28(r4)
   242e0:	f800283a 	ret

000242e4 <__sfp_lock_acquire>:
   242e4:	f800283a 	ret

000242e8 <__sfp_lock_release>:
   242e8:	f800283a 	ret

000242ec <__sinit_lock_acquire>:
   242ec:	f800283a 	ret

000242f0 <__sinit_lock_release>:
   242f0:	f800283a 	ret

000242f4 <__sinit>:
   242f4:	20800e17 	ldw	r2,56(r4)
   242f8:	defffd04 	addi	sp,sp,-12
   242fc:	dc400115 	stw	r17,4(sp)
   24300:	dc000015 	stw	r16,0(sp)
   24304:	dfc00215 	stw	ra,8(sp)
   24308:	04400044 	movi	r17,1
   2430c:	01400104 	movi	r5,4
   24310:	000d883a 	mov	r6,zero
   24314:	2021883a 	mov	r16,r4
   24318:	2200bb04 	addi	r8,r4,748
   2431c:	200f883a 	mov	r7,r4
   24320:	10000526 	beq	r2,zero,24338 <__sinit+0x44>
   24324:	dfc00217 	ldw	ra,8(sp)
   24328:	dc400117 	ldw	r17,4(sp)
   2432c:	dc000017 	ldw	r16,0(sp)
   24330:	dec00304 	addi	sp,sp,12
   24334:	f800283a 	ret
   24338:	21000117 	ldw	r4,4(r4)
   2433c:	008000b4 	movhi	r2,2
   24340:	1090f604 	addi	r2,r2,17368
   24344:	00c000c4 	movi	r3,3
   24348:	80800f15 	stw	r2,60(r16)
   2434c:	80c0b915 	stw	r3,740(r16)
   24350:	8200ba15 	stw	r8,744(r16)
   24354:	84400e15 	stw	r17,56(r16)
   24358:	8000b815 	stw	zero,736(r16)
   2435c:	002428c0 	call	2428c <std>
   24360:	81000217 	ldw	r4,8(r16)
   24364:	880d883a 	mov	r6,r17
   24368:	800f883a 	mov	r7,r16
   2436c:	01400284 	movi	r5,10
   24370:	002428c0 	call	2428c <std>
   24374:	81000317 	ldw	r4,12(r16)
   24378:	800f883a 	mov	r7,r16
   2437c:	01400484 	movi	r5,18
   24380:	01800084 	movi	r6,2
   24384:	dfc00217 	ldw	ra,8(sp)
   24388:	dc400117 	ldw	r17,4(sp)
   2438c:	dc000017 	ldw	r16,0(sp)
   24390:	dec00304 	addi	sp,sp,12
   24394:	002428c1 	jmpi	2428c <std>

00024398 <__fp_lock>:
   24398:	0005883a 	mov	r2,zero
   2439c:	f800283a 	ret

000243a0 <__fp_unlock>:
   243a0:	0005883a 	mov	r2,zero
   243a4:	f800283a 	ret

000243a8 <__fp_unlock_all>:
   243a8:	008000f4 	movhi	r2,3
   243ac:	10ba7904 	addi	r2,r2,-5660
   243b0:	11000017 	ldw	r4,0(r2)
   243b4:	014000b4 	movhi	r5,2
   243b8:	2950e804 	addi	r5,r5,17312
   243bc:	0024f241 	jmpi	24f24 <_fwalk>

000243c0 <__fp_lock_all>:
   243c0:	008000f4 	movhi	r2,3
   243c4:	10ba7904 	addi	r2,r2,-5660
   243c8:	11000017 	ldw	r4,0(r2)
   243cc:	014000b4 	movhi	r5,2
   243d0:	2950e604 	addi	r5,r5,17304
   243d4:	0024f241 	jmpi	24f24 <_fwalk>

000243d8 <_cleanup_r>:
   243d8:	014000b4 	movhi	r5,2
   243dc:	295e2604 	addi	r5,r5,30872
   243e0:	0024f241 	jmpi	24f24 <_fwalk>

000243e4 <_cleanup>:
   243e4:	008000f4 	movhi	r2,3
   243e8:	10ba7a04 	addi	r2,r2,-5656
   243ec:	11000017 	ldw	r4,0(r2)
   243f0:	00243d81 	jmpi	243d8 <_cleanup_r>

000243f4 <__sfmoreglue>:
   243f4:	defffc04 	addi	sp,sp,-16
   243f8:	dc000015 	stw	r16,0(sp)
   243fc:	2821883a 	mov	r16,r5
   24400:	dc400115 	stw	r17,4(sp)
   24404:	01401704 	movi	r5,92
   24408:	2023883a 	mov	r17,r4
   2440c:	8009883a 	mov	r4,r16
   24410:	dfc00315 	stw	ra,12(sp)
   24414:	dcc00215 	stw	r19,8(sp)
   24418:	00206100 	call	20610 <__mulsi3>
   2441c:	11400304 	addi	r5,r2,12
   24420:	8809883a 	mov	r4,r17
   24424:	1027883a 	mov	r19,r2
   24428:	00252340 	call	25234 <_malloc_r>
   2442c:	10c00304 	addi	r3,r2,12
   24430:	1023883a 	mov	r17,r2
   24434:	1809883a 	mov	r4,r3
   24438:	980d883a 	mov	r6,r19
   2443c:	000b883a 	mov	r5,zero
   24440:	10000b26 	beq	r2,zero,24470 <__sfmoreglue+0x7c>
   24444:	14000115 	stw	r16,4(r2)
   24448:	10c00215 	stw	r3,8(r2)
   2444c:	10000015 	stw	zero,0(r2)
   24450:	0025bd80 	call	25bd8 <memset>
   24454:	8805883a 	mov	r2,r17
   24458:	dfc00317 	ldw	ra,12(sp)
   2445c:	dcc00217 	ldw	r19,8(sp)
   24460:	dc400117 	ldw	r17,4(sp)
   24464:	dc000017 	ldw	r16,0(sp)
   24468:	dec00404 	addi	sp,sp,16
   2446c:	f800283a 	ret
   24470:	0023883a 	mov	r17,zero
   24474:	8805883a 	mov	r2,r17
   24478:	dfc00317 	ldw	ra,12(sp)
   2447c:	dcc00217 	ldw	r19,8(sp)
   24480:	dc400117 	ldw	r17,4(sp)
   24484:	dc000017 	ldw	r16,0(sp)
   24488:	dec00404 	addi	sp,sp,16
   2448c:	f800283a 	ret

00024490 <__sfp>:
   24490:	defffd04 	addi	sp,sp,-12
   24494:	008000f4 	movhi	r2,3
   24498:	10ba7a04 	addi	r2,r2,-5656
   2449c:	dc000015 	stw	r16,0(sp)
   244a0:	14000017 	ldw	r16,0(r2)
   244a4:	dc400115 	stw	r17,4(sp)
   244a8:	dfc00215 	stw	ra,8(sp)
   244ac:	80800e17 	ldw	r2,56(r16)
   244b0:	2023883a 	mov	r17,r4
   244b4:	10002626 	beq	r2,zero,24550 <__sfp+0xc0>
   244b8:	8400b804 	addi	r16,r16,736
   244bc:	80800117 	ldw	r2,4(r16)
   244c0:	81000217 	ldw	r4,8(r16)
   244c4:	10ffffc4 	addi	r3,r2,-1
   244c8:	18000916 	blt	r3,zero,244f0 <__sfp+0x60>
   244cc:	2080030f 	ldh	r2,12(r4)
   244d0:	10000b26 	beq	r2,zero,24500 <__sfp+0x70>
   244d4:	017fffc4 	movi	r5,-1
   244d8:	00000206 	br	244e4 <__sfp+0x54>
   244dc:	2080030f 	ldh	r2,12(r4)
   244e0:	10000726 	beq	r2,zero,24500 <__sfp+0x70>
   244e4:	18ffffc4 	addi	r3,r3,-1
   244e8:	21001704 	addi	r4,r4,92
   244ec:	197ffb1e 	bne	r3,r5,244dc <__sfp+0x4c>
   244f0:	80800017 	ldw	r2,0(r16)
   244f4:	10001926 	beq	r2,zero,2455c <__sfp+0xcc>
   244f8:	1021883a 	mov	r16,r2
   244fc:	003fef06 	br	244bc <__sfp+0x2c>
   24500:	00bfffc4 	movi	r2,-1
   24504:	00c00044 	movi	r3,1
   24508:	2080038d 	sth	r2,14(r4)
   2450c:	20c0030d 	sth	r3,12(r4)
   24510:	20000015 	stw	zero,0(r4)
   24514:	20000215 	stw	zero,8(r4)
   24518:	20000115 	stw	zero,4(r4)
   2451c:	20000415 	stw	zero,16(r4)
   24520:	20000515 	stw	zero,20(r4)
   24524:	20000615 	stw	zero,24(r4)
   24528:	20000c15 	stw	zero,48(r4)
   2452c:	20000d15 	stw	zero,52(r4)
   24530:	20001115 	stw	zero,68(r4)
   24534:	20001215 	stw	zero,72(r4)
   24538:	2005883a 	mov	r2,r4
   2453c:	dfc00217 	ldw	ra,8(sp)
   24540:	dc400117 	ldw	r17,4(sp)
   24544:	dc000017 	ldw	r16,0(sp)
   24548:	dec00304 	addi	sp,sp,12
   2454c:	f800283a 	ret
   24550:	8009883a 	mov	r4,r16
   24554:	00242f40 	call	242f4 <__sinit>
   24558:	003fd706 	br	244b8 <__sfp+0x28>
   2455c:	8809883a 	mov	r4,r17
   24560:	01400104 	movi	r5,4
   24564:	00243f40 	call	243f4 <__sfmoreglue>
   24568:	80800015 	stw	r2,0(r16)
   2456c:	103fe21e 	bne	r2,zero,244f8 <__sfp+0x68>
   24570:	00800304 	movi	r2,12
   24574:	0009883a 	mov	r4,zero
   24578:	88800015 	stw	r2,0(r17)
   2457c:	003fee06 	br	24538 <__sfp+0xa8>

00024580 <_malloc_trim_r>:
   24580:	defffb04 	addi	sp,sp,-20
   24584:	dcc00315 	stw	r19,12(sp)
   24588:	04c000f4 	movhi	r19,3
   2458c:	9cf4f504 	addi	r19,r19,-11308
   24590:	dc800215 	stw	r18,8(sp)
   24594:	dc400115 	stw	r17,4(sp)
   24598:	dc000015 	stw	r16,0(sp)
   2459c:	2823883a 	mov	r17,r5
   245a0:	2025883a 	mov	r18,r4
   245a4:	dfc00415 	stw	ra,16(sp)
   245a8:	002a8d00 	call	2a8d0 <__malloc_lock>
   245ac:	98800217 	ldw	r2,8(r19)
   245b0:	9009883a 	mov	r4,r18
   245b4:	000b883a 	mov	r5,zero
   245b8:	10c00117 	ldw	r3,4(r2)
   245bc:	00bfff04 	movi	r2,-4
   245c0:	18a0703a 	and	r16,r3,r2
   245c4:	8463c83a 	sub	r17,r16,r17
   245c8:	8c43fbc4 	addi	r17,r17,4079
   245cc:	8822d33a 	srli	r17,r17,12
   245d0:	0083ffc4 	movi	r2,4095
   245d4:	8c7fffc4 	addi	r17,r17,-1
   245d8:	8822933a 	slli	r17,r17,12
   245dc:	1440060e 	bge	r2,r17,245f8 <_malloc_trim_r+0x78>
   245e0:	00273600 	call	27360 <_sbrk_r>
   245e4:	98c00217 	ldw	r3,8(r19)
   245e8:	9009883a 	mov	r4,r18
   245ec:	044bc83a 	sub	r5,zero,r17
   245f0:	80c7883a 	add	r3,r16,r3
   245f4:	10c00926 	beq	r2,r3,2461c <_malloc_trim_r+0x9c>
   245f8:	002a8f00 	call	2a8f0 <__malloc_unlock>
   245fc:	0005883a 	mov	r2,zero
   24600:	dfc00417 	ldw	ra,16(sp)
   24604:	dcc00317 	ldw	r19,12(sp)
   24608:	dc800217 	ldw	r18,8(sp)
   2460c:	dc400117 	ldw	r17,4(sp)
   24610:	dc000017 	ldw	r16,0(sp)
   24614:	dec00504 	addi	sp,sp,20
   24618:	f800283a 	ret
   2461c:	9009883a 	mov	r4,r18
   24620:	00273600 	call	27360 <_sbrk_r>
   24624:	844dc83a 	sub	r6,r16,r17
   24628:	00ffffc4 	movi	r3,-1
   2462c:	9009883a 	mov	r4,r18
   24630:	000b883a 	mov	r5,zero
   24634:	01c000f4 	movhi	r7,3
   24638:	39c12d04 	addi	r7,r7,1204
   2463c:	31800054 	ori	r6,r6,1
   24640:	10c00926 	beq	r2,r3,24668 <_malloc_trim_r+0xe8>
   24644:	38800017 	ldw	r2,0(r7)
   24648:	98c00217 	ldw	r3,8(r19)
   2464c:	9009883a 	mov	r4,r18
   24650:	1445c83a 	sub	r2,r2,r17
   24654:	38800015 	stw	r2,0(r7)
   24658:	19800115 	stw	r6,4(r3)
   2465c:	002a8f00 	call	2a8f0 <__malloc_unlock>
   24660:	00800044 	movi	r2,1
   24664:	003fe606 	br	24600 <_malloc_trim_r+0x80>
   24668:	00273600 	call	27360 <_sbrk_r>
   2466c:	99800217 	ldw	r6,8(r19)
   24670:	100f883a 	mov	r7,r2
   24674:	9009883a 	mov	r4,r18
   24678:	1187c83a 	sub	r3,r2,r6
   2467c:	008003c4 	movi	r2,15
   24680:	19400054 	ori	r5,r3,1
   24684:	10ffdc0e 	bge	r2,r3,245f8 <_malloc_trim_r+0x78>
   24688:	008000f4 	movhi	r2,3
   2468c:	10ba7e04 	addi	r2,r2,-5640
   24690:	10c00017 	ldw	r3,0(r2)
   24694:	008000f4 	movhi	r2,3
   24698:	10812d04 	addi	r2,r2,1204
   2469c:	31400115 	stw	r5,4(r6)
   246a0:	38c7c83a 	sub	r3,r7,r3
   246a4:	10c00015 	stw	r3,0(r2)
   246a8:	003fd306 	br	245f8 <_malloc_trim_r+0x78>

000246ac <_free_r>:
   246ac:	defffd04 	addi	sp,sp,-12
   246b0:	dc400115 	stw	r17,4(sp)
   246b4:	dc000015 	stw	r16,0(sp)
   246b8:	dfc00215 	stw	ra,8(sp)
   246bc:	2821883a 	mov	r16,r5
   246c0:	2023883a 	mov	r17,r4
   246c4:	28005a26 	beq	r5,zero,24830 <_free_r+0x184>
   246c8:	002a8d00 	call	2a8d0 <__malloc_lock>
   246cc:	823ffe04 	addi	r8,r16,-8
   246d0:	41400117 	ldw	r5,4(r8)
   246d4:	00bfff84 	movi	r2,-2
   246d8:	028000f4 	movhi	r10,3
   246dc:	52b4f504 	addi	r10,r10,-11308
   246e0:	288e703a 	and	r7,r5,r2
   246e4:	41cd883a 	add	r6,r8,r7
   246e8:	30c00117 	ldw	r3,4(r6)
   246ec:	51000217 	ldw	r4,8(r10)
   246f0:	00bfff04 	movi	r2,-4
   246f4:	1892703a 	and	r9,r3,r2
   246f8:	5017883a 	mov	r11,r10
   246fc:	31006726 	beq	r6,r4,2489c <_free_r+0x1f0>
   24700:	2880004c 	andi	r2,r5,1
   24704:	1005003a 	cmpeq	r2,r2,zero
   24708:	32400115 	stw	r9,4(r6)
   2470c:	10001a1e 	bne	r2,zero,24778 <_free_r+0xcc>
   24710:	000b883a 	mov	r5,zero
   24714:	3247883a 	add	r3,r6,r9
   24718:	18800117 	ldw	r2,4(r3)
   2471c:	1080004c 	andi	r2,r2,1
   24720:	1000231e 	bne	r2,zero,247b0 <_free_r+0x104>
   24724:	280ac03a 	cmpne	r5,r5,zero
   24728:	3a4f883a 	add	r7,r7,r9
   2472c:	2800451e 	bne	r5,zero,24844 <_free_r+0x198>
   24730:	31000217 	ldw	r4,8(r6)
   24734:	008000f4 	movhi	r2,3
   24738:	10b4f704 	addi	r2,r2,-11300
   2473c:	20807b26 	beq	r4,r2,2492c <_free_r+0x280>
   24740:	30800317 	ldw	r2,12(r6)
   24744:	3a07883a 	add	r3,r7,r8
   24748:	19c00015 	stw	r7,0(r3)
   2474c:	11000215 	stw	r4,8(r2)
   24750:	20800315 	stw	r2,12(r4)
   24754:	38800054 	ori	r2,r7,1
   24758:	40800115 	stw	r2,4(r8)
   2475c:	28001a26 	beq	r5,zero,247c8 <_free_r+0x11c>
   24760:	8809883a 	mov	r4,r17
   24764:	dfc00217 	ldw	ra,8(sp)
   24768:	dc400117 	ldw	r17,4(sp)
   2476c:	dc000017 	ldw	r16,0(sp)
   24770:	dec00304 	addi	sp,sp,12
   24774:	002a8f01 	jmpi	2a8f0 <__malloc_unlock>
   24778:	80bffe17 	ldw	r2,-8(r16)
   2477c:	50c00204 	addi	r3,r10,8
   24780:	4091c83a 	sub	r8,r8,r2
   24784:	41000217 	ldw	r4,8(r8)
   24788:	388f883a 	add	r7,r7,r2
   2478c:	20c06126 	beq	r4,r3,24914 <_free_r+0x268>
   24790:	40800317 	ldw	r2,12(r8)
   24794:	3247883a 	add	r3,r6,r9
   24798:	000b883a 	mov	r5,zero
   2479c:	11000215 	stw	r4,8(r2)
   247a0:	20800315 	stw	r2,12(r4)
   247a4:	18800117 	ldw	r2,4(r3)
   247a8:	1080004c 	andi	r2,r2,1
   247ac:	103fdd26 	beq	r2,zero,24724 <_free_r+0x78>
   247b0:	38800054 	ori	r2,r7,1
   247b4:	3a07883a 	add	r3,r7,r8
   247b8:	280ac03a 	cmpne	r5,r5,zero
   247bc:	40800115 	stw	r2,4(r8)
   247c0:	19c00015 	stw	r7,0(r3)
   247c4:	283fe61e 	bne	r5,zero,24760 <_free_r+0xb4>
   247c8:	00807fc4 	movi	r2,511
   247cc:	11c01f2e 	bgeu	r2,r7,2484c <_free_r+0x1a0>
   247d0:	3806d27a 	srli	r3,r7,9
   247d4:	1800481e 	bne	r3,zero,248f8 <_free_r+0x24c>
   247d8:	3804d0fa 	srli	r2,r7,3
   247dc:	100690fa 	slli	r3,r2,3
   247e0:	1acd883a 	add	r6,r3,r11
   247e4:	31400217 	ldw	r5,8(r6)
   247e8:	31405926 	beq	r6,r5,24950 <_free_r+0x2a4>
   247ec:	28800117 	ldw	r2,4(r5)
   247f0:	00ffff04 	movi	r3,-4
   247f4:	10c4703a 	and	r2,r2,r3
   247f8:	3880022e 	bgeu	r7,r2,24804 <_free_r+0x158>
   247fc:	29400217 	ldw	r5,8(r5)
   24800:	317ffa1e 	bne	r6,r5,247ec <_free_r+0x140>
   24804:	29800317 	ldw	r6,12(r5)
   24808:	41800315 	stw	r6,12(r8)
   2480c:	41400215 	stw	r5,8(r8)
   24810:	8809883a 	mov	r4,r17
   24814:	2a000315 	stw	r8,12(r5)
   24818:	32000215 	stw	r8,8(r6)
   2481c:	dfc00217 	ldw	ra,8(sp)
   24820:	dc400117 	ldw	r17,4(sp)
   24824:	dc000017 	ldw	r16,0(sp)
   24828:	dec00304 	addi	sp,sp,12
   2482c:	002a8f01 	jmpi	2a8f0 <__malloc_unlock>
   24830:	dfc00217 	ldw	ra,8(sp)
   24834:	dc400117 	ldw	r17,4(sp)
   24838:	dc000017 	ldw	r16,0(sp)
   2483c:	dec00304 	addi	sp,sp,12
   24840:	f800283a 	ret
   24844:	31000217 	ldw	r4,8(r6)
   24848:	003fbd06 	br	24740 <_free_r+0x94>
   2484c:	3806d0fa 	srli	r3,r7,3
   24850:	00800044 	movi	r2,1
   24854:	51400117 	ldw	r5,4(r10)
   24858:	180890fa 	slli	r4,r3,3
   2485c:	1807d0ba 	srai	r3,r3,2
   24860:	22c9883a 	add	r4,r4,r11
   24864:	21800217 	ldw	r6,8(r4)
   24868:	10c4983a 	sll	r2,r2,r3
   2486c:	41000315 	stw	r4,12(r8)
   24870:	41800215 	stw	r6,8(r8)
   24874:	288ab03a 	or	r5,r5,r2
   24878:	22000215 	stw	r8,8(r4)
   2487c:	8809883a 	mov	r4,r17
   24880:	51400115 	stw	r5,4(r10)
   24884:	32000315 	stw	r8,12(r6)
   24888:	dfc00217 	ldw	ra,8(sp)
   2488c:	dc400117 	ldw	r17,4(sp)
   24890:	dc000017 	ldw	r16,0(sp)
   24894:	dec00304 	addi	sp,sp,12
   24898:	002a8f01 	jmpi	2a8f0 <__malloc_unlock>
   2489c:	2880004c 	andi	r2,r5,1
   248a0:	3a4d883a 	add	r6,r7,r9
   248a4:	1000071e 	bne	r2,zero,248c4 <_free_r+0x218>
   248a8:	80bffe17 	ldw	r2,-8(r16)
   248ac:	4091c83a 	sub	r8,r8,r2
   248b0:	41000317 	ldw	r4,12(r8)
   248b4:	40c00217 	ldw	r3,8(r8)
   248b8:	308d883a 	add	r6,r6,r2
   248bc:	20c00215 	stw	r3,8(r4)
   248c0:	19000315 	stw	r4,12(r3)
   248c4:	008000f4 	movhi	r2,3
   248c8:	10ba7d04 	addi	r2,r2,-5644
   248cc:	11000017 	ldw	r4,0(r2)
   248d0:	30c00054 	ori	r3,r6,1
   248d4:	52000215 	stw	r8,8(r10)
   248d8:	40c00115 	stw	r3,4(r8)
   248dc:	313fa036 	bltu	r6,r4,24760 <_free_r+0xb4>
   248e0:	008000f4 	movhi	r2,3
   248e4:	10812304 	addi	r2,r2,1164
   248e8:	11400017 	ldw	r5,0(r2)
   248ec:	8809883a 	mov	r4,r17
   248f0:	00245800 	call	24580 <_malloc_trim_r>
   248f4:	003f9a06 	br	24760 <_free_r+0xb4>
   248f8:	00800104 	movi	r2,4
   248fc:	10c0072e 	bgeu	r2,r3,2491c <_free_r+0x270>
   24900:	00800504 	movi	r2,20
   24904:	10c01936 	bltu	r2,r3,2496c <_free_r+0x2c0>
   24908:	188016c4 	addi	r2,r3,91
   2490c:	100690fa 	slli	r3,r2,3
   24910:	003fb306 	br	247e0 <_free_r+0x134>
   24914:	01400044 	movi	r5,1
   24918:	003f7e06 	br	24714 <_free_r+0x68>
   2491c:	3804d1ba 	srli	r2,r7,6
   24920:	10800e04 	addi	r2,r2,56
   24924:	100690fa 	slli	r3,r2,3
   24928:	003fad06 	br	247e0 <_free_r+0x134>
   2492c:	22000315 	stw	r8,12(r4)
   24930:	22000215 	stw	r8,8(r4)
   24934:	3a05883a 	add	r2,r7,r8
   24938:	38c00054 	ori	r3,r7,1
   2493c:	11c00015 	stw	r7,0(r2)
   24940:	41000215 	stw	r4,8(r8)
   24944:	40c00115 	stw	r3,4(r8)
   24948:	41000315 	stw	r4,12(r8)
   2494c:	003f8406 	br	24760 <_free_r+0xb4>
   24950:	1005d0ba 	srai	r2,r2,2
   24954:	00c00044 	movi	r3,1
   24958:	51000117 	ldw	r4,4(r10)
   2495c:	1886983a 	sll	r3,r3,r2
   24960:	20c8b03a 	or	r4,r4,r3
   24964:	51000115 	stw	r4,4(r10)
   24968:	003fa706 	br	24808 <_free_r+0x15c>
   2496c:	00801504 	movi	r2,84
   24970:	10c00436 	bltu	r2,r3,24984 <_free_r+0x2d8>
   24974:	3804d33a 	srli	r2,r7,12
   24978:	10801b84 	addi	r2,r2,110
   2497c:	100690fa 	slli	r3,r2,3
   24980:	003f9706 	br	247e0 <_free_r+0x134>
   24984:	00805504 	movi	r2,340
   24988:	10c00436 	bltu	r2,r3,2499c <_free_r+0x2f0>
   2498c:	3804d3fa 	srli	r2,r7,15
   24990:	10801dc4 	addi	r2,r2,119
   24994:	100690fa 	slli	r3,r2,3
   24998:	003f9106 	br	247e0 <_free_r+0x134>
   2499c:	00815504 	movi	r2,1364
   249a0:	10c0032e 	bgeu	r2,r3,249b0 <_free_r+0x304>
   249a4:	00801f84 	movi	r2,126
   249a8:	00c0fc04 	movi	r3,1008
   249ac:	003f8c06 	br	247e0 <_free_r+0x134>
   249b0:	3804d4ba 	srli	r2,r7,18
   249b4:	10801f04 	addi	r2,r2,124
   249b8:	100690fa 	slli	r3,r2,3
   249bc:	003f8806 	br	247e0 <_free_r+0x134>

000249c0 <__sfvwrite_r>:
   249c0:	30800217 	ldw	r2,8(r6)
   249c4:	defff504 	addi	sp,sp,-44
   249c8:	df000915 	stw	fp,36(sp)
   249cc:	dd800715 	stw	r22,28(sp)
   249d0:	dc800315 	stw	r18,12(sp)
   249d4:	dfc00a15 	stw	ra,40(sp)
   249d8:	ddc00815 	stw	r23,32(sp)
   249dc:	dd400615 	stw	r21,24(sp)
   249e0:	dd000515 	stw	r20,20(sp)
   249e4:	dcc00415 	stw	r19,16(sp)
   249e8:	dc400215 	stw	r17,8(sp)
   249ec:	dc000115 	stw	r16,4(sp)
   249f0:	302d883a 	mov	r22,r6
   249f4:	2039883a 	mov	fp,r4
   249f8:	2825883a 	mov	r18,r5
   249fc:	10001c26 	beq	r2,zero,24a70 <__sfvwrite_r+0xb0>
   24a00:	29c0030b 	ldhu	r7,12(r5)
   24a04:	3880020c 	andi	r2,r7,8
   24a08:	10002726 	beq	r2,zero,24aa8 <__sfvwrite_r+0xe8>
   24a0c:	28800417 	ldw	r2,16(r5)
   24a10:	10002526 	beq	r2,zero,24aa8 <__sfvwrite_r+0xe8>
   24a14:	3880008c 	andi	r2,r7,2
   24a18:	b5400017 	ldw	r21,0(r22)
   24a1c:	10002826 	beq	r2,zero,24ac0 <__sfvwrite_r+0x100>
   24a20:	0021883a 	mov	r16,zero
   24a24:	0023883a 	mov	r17,zero
   24a28:	880d883a 	mov	r6,r17
   24a2c:	e009883a 	mov	r4,fp
   24a30:	00810004 	movi	r2,1024
   24a34:	80006e26 	beq	r16,zero,24bf0 <__sfvwrite_r+0x230>
   24a38:	800f883a 	mov	r7,r16
   24a3c:	91400717 	ldw	r5,28(r18)
   24a40:	1400012e 	bgeu	r2,r16,24a48 <__sfvwrite_r+0x88>
   24a44:	100f883a 	mov	r7,r2
   24a48:	90c00917 	ldw	r3,36(r18)
   24a4c:	183ee83a 	callr	r3
   24a50:	1007883a 	mov	r3,r2
   24a54:	80a1c83a 	sub	r16,r16,r2
   24a58:	88a3883a 	add	r17,r17,r2
   24a5c:	00806d0e 	bge	zero,r2,24c14 <__sfvwrite_r+0x254>
   24a60:	b0800217 	ldw	r2,8(r22)
   24a64:	10c5c83a 	sub	r2,r2,r3
   24a68:	b0800215 	stw	r2,8(r22)
   24a6c:	103fee1e 	bne	r2,zero,24a28 <__sfvwrite_r+0x68>
   24a70:	0009883a 	mov	r4,zero
   24a74:	2005883a 	mov	r2,r4
   24a78:	dfc00a17 	ldw	ra,40(sp)
   24a7c:	df000917 	ldw	fp,36(sp)
   24a80:	ddc00817 	ldw	r23,32(sp)
   24a84:	dd800717 	ldw	r22,28(sp)
   24a88:	dd400617 	ldw	r21,24(sp)
   24a8c:	dd000517 	ldw	r20,20(sp)
   24a90:	dcc00417 	ldw	r19,16(sp)
   24a94:	dc800317 	ldw	r18,12(sp)
   24a98:	dc400217 	ldw	r17,8(sp)
   24a9c:	dc000117 	ldw	r16,4(sp)
   24aa0:	dec00b04 	addi	sp,sp,44
   24aa4:	f800283a 	ret
   24aa8:	00227280 	call	22728 <__swsetup_r>
   24aac:	1000e41e 	bne	r2,zero,24e40 <__sfvwrite_r+0x480>
   24ab0:	91c0030b 	ldhu	r7,12(r18)
   24ab4:	b5400017 	ldw	r21,0(r22)
   24ab8:	3880008c 	andi	r2,r7,2
   24abc:	103fd81e 	bne	r2,zero,24a20 <__sfvwrite_r+0x60>
   24ac0:	3880004c 	andi	r2,r7,1
   24ac4:	1005003a 	cmpeq	r2,r2,zero
   24ac8:	10005726 	beq	r2,zero,24c28 <__sfvwrite_r+0x268>
   24acc:	0029883a 	mov	r20,zero
   24ad0:	002f883a 	mov	r23,zero
   24ad4:	a0004226 	beq	r20,zero,24be0 <__sfvwrite_r+0x220>
   24ad8:	3880800c 	andi	r2,r7,512
   24adc:	94000217 	ldw	r16,8(r18)
   24ae0:	10008b26 	beq	r2,zero,24d10 <__sfvwrite_r+0x350>
   24ae4:	800d883a 	mov	r6,r16
   24ae8:	a400a536 	bltu	r20,r16,24d80 <__sfvwrite_r+0x3c0>
   24aec:	3881200c 	andi	r2,r7,1152
   24af0:	10002726 	beq	r2,zero,24b90 <__sfvwrite_r+0x1d0>
   24af4:	90800517 	ldw	r2,20(r18)
   24af8:	92000417 	ldw	r8,16(r18)
   24afc:	91400017 	ldw	r5,0(r18)
   24b00:	1087883a 	add	r3,r2,r2
   24b04:	1887883a 	add	r3,r3,r2
   24b08:	1808d7fa 	srli	r4,r3,31
   24b0c:	2a21c83a 	sub	r16,r5,r8
   24b10:	80800044 	addi	r2,r16,1
   24b14:	20c9883a 	add	r4,r4,r3
   24b18:	2027d07a 	srai	r19,r4,1
   24b1c:	a085883a 	add	r2,r20,r2
   24b20:	980d883a 	mov	r6,r19
   24b24:	9880022e 	bgeu	r19,r2,24b30 <__sfvwrite_r+0x170>
   24b28:	1027883a 	mov	r19,r2
   24b2c:	100d883a 	mov	r6,r2
   24b30:	3881000c 	andi	r2,r7,1024
   24b34:	1000b826 	beq	r2,zero,24e18 <__sfvwrite_r+0x458>
   24b38:	300b883a 	mov	r5,r6
   24b3c:	e009883a 	mov	r4,fp
   24b40:	00252340 	call	25234 <_malloc_r>
   24b44:	10003126 	beq	r2,zero,24c0c <__sfvwrite_r+0x24c>
   24b48:	91400417 	ldw	r5,16(r18)
   24b4c:	1009883a 	mov	r4,r2
   24b50:	800d883a 	mov	r6,r16
   24b54:	1023883a 	mov	r17,r2
   24b58:	0025a580 	call	25a58 <memcpy>
   24b5c:	90c0030b 	ldhu	r3,12(r18)
   24b60:	00beffc4 	movi	r2,-1025
   24b64:	1886703a 	and	r3,r3,r2
   24b68:	18c02014 	ori	r3,r3,128
   24b6c:	90c0030d 	sth	r3,12(r18)
   24b70:	9c07c83a 	sub	r3,r19,r16
   24b74:	8c05883a 	add	r2,r17,r16
   24b78:	a00d883a 	mov	r6,r20
   24b7c:	a021883a 	mov	r16,r20
   24b80:	90800015 	stw	r2,0(r18)
   24b84:	90c00215 	stw	r3,8(r18)
   24b88:	94400415 	stw	r17,16(r18)
   24b8c:	94c00515 	stw	r19,20(r18)
   24b90:	91000017 	ldw	r4,0(r18)
   24b94:	b80b883a 	mov	r5,r23
   24b98:	a023883a 	mov	r17,r20
   24b9c:	0025af80 	call	25af8 <memmove>
   24ba0:	90c00217 	ldw	r3,8(r18)
   24ba4:	90800017 	ldw	r2,0(r18)
   24ba8:	a027883a 	mov	r19,r20
   24bac:	1c07c83a 	sub	r3,r3,r16
   24bb0:	1405883a 	add	r2,r2,r16
   24bb4:	90c00215 	stw	r3,8(r18)
   24bb8:	a021883a 	mov	r16,r20
   24bbc:	90800015 	stw	r2,0(r18)
   24bc0:	b0800217 	ldw	r2,8(r22)
   24bc4:	1405c83a 	sub	r2,r2,r16
   24bc8:	b0800215 	stw	r2,8(r22)
   24bcc:	103fa826 	beq	r2,zero,24a70 <__sfvwrite_r+0xb0>
   24bd0:	a469c83a 	sub	r20,r20,r17
   24bd4:	91c0030b 	ldhu	r7,12(r18)
   24bd8:	bcef883a 	add	r23,r23,r19
   24bdc:	a03fbe1e 	bne	r20,zero,24ad8 <__sfvwrite_r+0x118>
   24be0:	adc00017 	ldw	r23,0(r21)
   24be4:	ad000117 	ldw	r20,4(r21)
   24be8:	ad400204 	addi	r21,r21,8
   24bec:	003fb906 	br	24ad4 <__sfvwrite_r+0x114>
   24bf0:	ac400017 	ldw	r17,0(r21)
   24bf4:	ac000117 	ldw	r16,4(r21)
   24bf8:	ad400204 	addi	r21,r21,8
   24bfc:	003f8a06 	br	24a28 <__sfvwrite_r+0x68>
   24c00:	91400417 	ldw	r5,16(r18)
   24c04:	e009883a 	mov	r4,fp
   24c08:	00246ac0 	call	246ac <_free_r>
   24c0c:	00800304 	movi	r2,12
   24c10:	e0800015 	stw	r2,0(fp)
   24c14:	9080030b 	ldhu	r2,12(r18)
   24c18:	013fffc4 	movi	r4,-1
   24c1c:	10801014 	ori	r2,r2,64
   24c20:	9080030d 	sth	r2,12(r18)
   24c24:	003f9306 	br	24a74 <__sfvwrite_r+0xb4>
   24c28:	0027883a 	mov	r19,zero
   24c2c:	002f883a 	mov	r23,zero
   24c30:	d8000015 	stw	zero,0(sp)
   24c34:	0029883a 	mov	r20,zero
   24c38:	98001e26 	beq	r19,zero,24cb4 <__sfvwrite_r+0x2f4>
   24c3c:	d8c00017 	ldw	r3,0(sp)
   24c40:	1804c03a 	cmpne	r2,r3,zero
   24c44:	10005e26 	beq	r2,zero,24dc0 <__sfvwrite_r+0x400>
   24c48:	9821883a 	mov	r16,r19
   24c4c:	a4c0012e 	bgeu	r20,r19,24c54 <__sfvwrite_r+0x294>
   24c50:	a021883a 	mov	r16,r20
   24c54:	91000017 	ldw	r4,0(r18)
   24c58:	90800417 	ldw	r2,16(r18)
   24c5c:	91800217 	ldw	r6,8(r18)
   24c60:	91c00517 	ldw	r7,20(r18)
   24c64:	1100022e 	bgeu	r2,r4,24c70 <__sfvwrite_r+0x2b0>
   24c68:	31e3883a 	add	r17,r6,r7
   24c6c:	8c001616 	blt	r17,r16,24cc8 <__sfvwrite_r+0x308>
   24c70:	81c03816 	blt	r16,r7,24d54 <__sfvwrite_r+0x394>
   24c74:	90c00917 	ldw	r3,36(r18)
   24c78:	91400717 	ldw	r5,28(r18)
   24c7c:	e009883a 	mov	r4,fp
   24c80:	b80d883a 	mov	r6,r23
   24c84:	183ee83a 	callr	r3
   24c88:	1023883a 	mov	r17,r2
   24c8c:	00bfe10e 	bge	zero,r2,24c14 <__sfvwrite_r+0x254>
   24c90:	a469c83a 	sub	r20,r20,r17
   24c94:	a0001826 	beq	r20,zero,24cf8 <__sfvwrite_r+0x338>
   24c98:	b0800217 	ldw	r2,8(r22)
   24c9c:	1445c83a 	sub	r2,r2,r17
   24ca0:	b0800215 	stw	r2,8(r22)
   24ca4:	103f7226 	beq	r2,zero,24a70 <__sfvwrite_r+0xb0>
   24ca8:	9c67c83a 	sub	r19,r19,r17
   24cac:	bc6f883a 	add	r23,r23,r17
   24cb0:	983fe21e 	bne	r19,zero,24c3c <__sfvwrite_r+0x27c>
   24cb4:	adc00017 	ldw	r23,0(r21)
   24cb8:	acc00117 	ldw	r19,4(r21)
   24cbc:	ad400204 	addi	r21,r21,8
   24cc0:	d8000015 	stw	zero,0(sp)
   24cc4:	003fdc06 	br	24c38 <__sfvwrite_r+0x278>
   24cc8:	b80b883a 	mov	r5,r23
   24ccc:	880d883a 	mov	r6,r17
   24cd0:	0025af80 	call	25af8 <memmove>
   24cd4:	90c00017 	ldw	r3,0(r18)
   24cd8:	e009883a 	mov	r4,fp
   24cdc:	900b883a 	mov	r5,r18
   24ce0:	1c47883a 	add	r3,r3,r17
   24ce4:	90c00015 	stw	r3,0(r18)
   24ce8:	002405c0 	call	2405c <_fflush_r>
   24cec:	103fc91e 	bne	r2,zero,24c14 <__sfvwrite_r+0x254>
   24cf0:	a469c83a 	sub	r20,r20,r17
   24cf4:	a03fe81e 	bne	r20,zero,24c98 <__sfvwrite_r+0x2d8>
   24cf8:	e009883a 	mov	r4,fp
   24cfc:	900b883a 	mov	r5,r18
   24d00:	002405c0 	call	2405c <_fflush_r>
   24d04:	103fc31e 	bne	r2,zero,24c14 <__sfvwrite_r+0x254>
   24d08:	d8000015 	stw	zero,0(sp)
   24d0c:	003fe206 	br	24c98 <__sfvwrite_r+0x2d8>
   24d10:	91000017 	ldw	r4,0(r18)
   24d14:	90800417 	ldw	r2,16(r18)
   24d18:	1100022e 	bgeu	r2,r4,24d24 <__sfvwrite_r+0x364>
   24d1c:	8023883a 	mov	r17,r16
   24d20:	85003136 	bltu	r16,r20,24de8 <__sfvwrite_r+0x428>
   24d24:	91c00517 	ldw	r7,20(r18)
   24d28:	a1c01836 	bltu	r20,r7,24d8c <__sfvwrite_r+0x3cc>
   24d2c:	90c00917 	ldw	r3,36(r18)
   24d30:	91400717 	ldw	r5,28(r18)
   24d34:	e009883a 	mov	r4,fp
   24d38:	b80d883a 	mov	r6,r23
   24d3c:	183ee83a 	callr	r3
   24d40:	1021883a 	mov	r16,r2
   24d44:	00bfb30e 	bge	zero,r2,24c14 <__sfvwrite_r+0x254>
   24d48:	1023883a 	mov	r17,r2
   24d4c:	1027883a 	mov	r19,r2
   24d50:	003f9b06 	br	24bc0 <__sfvwrite_r+0x200>
   24d54:	b80b883a 	mov	r5,r23
   24d58:	800d883a 	mov	r6,r16
   24d5c:	0025af80 	call	25af8 <memmove>
   24d60:	90c00217 	ldw	r3,8(r18)
   24d64:	90800017 	ldw	r2,0(r18)
   24d68:	8023883a 	mov	r17,r16
   24d6c:	1c07c83a 	sub	r3,r3,r16
   24d70:	1405883a 	add	r2,r2,r16
   24d74:	90c00215 	stw	r3,8(r18)
   24d78:	90800015 	stw	r2,0(r18)
   24d7c:	003fc406 	br	24c90 <__sfvwrite_r+0x2d0>
   24d80:	a00d883a 	mov	r6,r20
   24d84:	a021883a 	mov	r16,r20
   24d88:	003f8106 	br	24b90 <__sfvwrite_r+0x1d0>
   24d8c:	b80b883a 	mov	r5,r23
   24d90:	a00d883a 	mov	r6,r20
   24d94:	0025af80 	call	25af8 <memmove>
   24d98:	90c00217 	ldw	r3,8(r18)
   24d9c:	90800017 	ldw	r2,0(r18)
   24da0:	a021883a 	mov	r16,r20
   24da4:	1d07c83a 	sub	r3,r3,r20
   24da8:	1505883a 	add	r2,r2,r20
   24dac:	a023883a 	mov	r17,r20
   24db0:	a027883a 	mov	r19,r20
   24db4:	90c00215 	stw	r3,8(r18)
   24db8:	90800015 	stw	r2,0(r18)
   24dbc:	003f8006 	br	24bc0 <__sfvwrite_r+0x200>
   24dc0:	b809883a 	mov	r4,r23
   24dc4:	01400284 	movi	r5,10
   24dc8:	980d883a 	mov	r6,r19
   24dcc:	00259740 	call	25974 <memchr>
   24dd0:	10001726 	beq	r2,zero,24e30 <__sfvwrite_r+0x470>
   24dd4:	15c5c83a 	sub	r2,r2,r23
   24dd8:	15000044 	addi	r20,r2,1
   24ddc:	00800044 	movi	r2,1
   24de0:	d8800015 	stw	r2,0(sp)
   24de4:	003f9806 	br	24c48 <__sfvwrite_r+0x288>
   24de8:	b80b883a 	mov	r5,r23
   24dec:	800d883a 	mov	r6,r16
   24df0:	0025af80 	call	25af8 <memmove>
   24df4:	90c00017 	ldw	r3,0(r18)
   24df8:	e009883a 	mov	r4,fp
   24dfc:	900b883a 	mov	r5,r18
   24e00:	1c07883a 	add	r3,r3,r16
   24e04:	90c00015 	stw	r3,0(r18)
   24e08:	8027883a 	mov	r19,r16
   24e0c:	002405c0 	call	2405c <_fflush_r>
   24e10:	103f6b26 	beq	r2,zero,24bc0 <__sfvwrite_r+0x200>
   24e14:	003f7f06 	br	24c14 <__sfvwrite_r+0x254>
   24e18:	400b883a 	mov	r5,r8
   24e1c:	e009883a 	mov	r4,fp
   24e20:	0026cfc0 	call	26cfc <_realloc_r>
   24e24:	103f7626 	beq	r2,zero,24c00 <__sfvwrite_r+0x240>
   24e28:	1023883a 	mov	r17,r2
   24e2c:	003f5006 	br	24b70 <__sfvwrite_r+0x1b0>
   24e30:	00c00044 	movi	r3,1
   24e34:	9d000044 	addi	r20,r19,1
   24e38:	d8c00015 	stw	r3,0(sp)
   24e3c:	003f8206 	br	24c48 <__sfvwrite_r+0x288>
   24e40:	9080030b 	ldhu	r2,12(r18)
   24e44:	00c00244 	movi	r3,9
   24e48:	013fffc4 	movi	r4,-1
   24e4c:	10801014 	ori	r2,r2,64
   24e50:	9080030d 	sth	r2,12(r18)
   24e54:	e0c00015 	stw	r3,0(fp)
   24e58:	003f0606 	br	24a74 <__sfvwrite_r+0xb4>

00024e5c <_fwalk_reent>:
   24e5c:	defff704 	addi	sp,sp,-36
   24e60:	dcc00315 	stw	r19,12(sp)
   24e64:	24c0b804 	addi	r19,r4,736
   24e68:	dd800615 	stw	r22,24(sp)
   24e6c:	dd400515 	stw	r21,20(sp)
   24e70:	dfc00815 	stw	ra,32(sp)
   24e74:	ddc00715 	stw	r23,28(sp)
   24e78:	dd000415 	stw	r20,16(sp)
   24e7c:	dc800215 	stw	r18,8(sp)
   24e80:	dc400115 	stw	r17,4(sp)
   24e84:	dc000015 	stw	r16,0(sp)
   24e88:	202b883a 	mov	r21,r4
   24e8c:	282d883a 	mov	r22,r5
   24e90:	00242e40 	call	242e4 <__sfp_lock_acquire>
   24e94:	98002126 	beq	r19,zero,24f1c <_fwalk_reent+0xc0>
   24e98:	002f883a 	mov	r23,zero
   24e9c:	9c800117 	ldw	r18,4(r19)
   24ea0:	9c000217 	ldw	r16,8(r19)
   24ea4:	90bfffc4 	addi	r2,r18,-1
   24ea8:	10000d16 	blt	r2,zero,24ee0 <_fwalk_reent+0x84>
   24eac:	0023883a 	mov	r17,zero
   24eb0:	053fffc4 	movi	r20,-1
   24eb4:	8080030f 	ldh	r2,12(r16)
   24eb8:	8c400044 	addi	r17,r17,1
   24ebc:	10000626 	beq	r2,zero,24ed8 <_fwalk_reent+0x7c>
   24ec0:	8080038f 	ldh	r2,14(r16)
   24ec4:	800b883a 	mov	r5,r16
   24ec8:	a809883a 	mov	r4,r21
   24ecc:	15000226 	beq	r2,r20,24ed8 <_fwalk_reent+0x7c>
   24ed0:	b03ee83a 	callr	r22
   24ed4:	b8aeb03a 	or	r23,r23,r2
   24ed8:	84001704 	addi	r16,r16,92
   24edc:	947ff51e 	bne	r18,r17,24eb4 <_fwalk_reent+0x58>
   24ee0:	9cc00017 	ldw	r19,0(r19)
   24ee4:	983fed1e 	bne	r19,zero,24e9c <_fwalk_reent+0x40>
   24ee8:	00242e80 	call	242e8 <__sfp_lock_release>
   24eec:	b805883a 	mov	r2,r23
   24ef0:	dfc00817 	ldw	ra,32(sp)
   24ef4:	ddc00717 	ldw	r23,28(sp)
   24ef8:	dd800617 	ldw	r22,24(sp)
   24efc:	dd400517 	ldw	r21,20(sp)
   24f00:	dd000417 	ldw	r20,16(sp)
   24f04:	dcc00317 	ldw	r19,12(sp)
   24f08:	dc800217 	ldw	r18,8(sp)
   24f0c:	dc400117 	ldw	r17,4(sp)
   24f10:	dc000017 	ldw	r16,0(sp)
   24f14:	dec00904 	addi	sp,sp,36
   24f18:	f800283a 	ret
   24f1c:	002f883a 	mov	r23,zero
   24f20:	003ff106 	br	24ee8 <_fwalk_reent+0x8c>

00024f24 <_fwalk>:
   24f24:	defff804 	addi	sp,sp,-32
   24f28:	dcc00315 	stw	r19,12(sp)
   24f2c:	24c0b804 	addi	r19,r4,736
   24f30:	dd400515 	stw	r21,20(sp)
   24f34:	dfc00715 	stw	ra,28(sp)
   24f38:	dd800615 	stw	r22,24(sp)
   24f3c:	dd000415 	stw	r20,16(sp)
   24f40:	dc800215 	stw	r18,8(sp)
   24f44:	dc400115 	stw	r17,4(sp)
   24f48:	dc000015 	stw	r16,0(sp)
   24f4c:	282b883a 	mov	r21,r5
   24f50:	00242e40 	call	242e4 <__sfp_lock_acquire>
   24f54:	98001f26 	beq	r19,zero,24fd4 <_fwalk+0xb0>
   24f58:	002d883a 	mov	r22,zero
   24f5c:	9c800117 	ldw	r18,4(r19)
   24f60:	9c000217 	ldw	r16,8(r19)
   24f64:	90bfffc4 	addi	r2,r18,-1
   24f68:	10000c16 	blt	r2,zero,24f9c <_fwalk+0x78>
   24f6c:	0023883a 	mov	r17,zero
   24f70:	053fffc4 	movi	r20,-1
   24f74:	8080030f 	ldh	r2,12(r16)
   24f78:	8c400044 	addi	r17,r17,1
   24f7c:	10000526 	beq	r2,zero,24f94 <_fwalk+0x70>
   24f80:	8080038f 	ldh	r2,14(r16)
   24f84:	8009883a 	mov	r4,r16
   24f88:	15000226 	beq	r2,r20,24f94 <_fwalk+0x70>
   24f8c:	a83ee83a 	callr	r21
   24f90:	b0acb03a 	or	r22,r22,r2
   24f94:	84001704 	addi	r16,r16,92
   24f98:	947ff61e 	bne	r18,r17,24f74 <_fwalk+0x50>
   24f9c:	9cc00017 	ldw	r19,0(r19)
   24fa0:	983fee1e 	bne	r19,zero,24f5c <_fwalk+0x38>
   24fa4:	00242e80 	call	242e8 <__sfp_lock_release>
   24fa8:	b005883a 	mov	r2,r22
   24fac:	dfc00717 	ldw	ra,28(sp)
   24fb0:	dd800617 	ldw	r22,24(sp)
   24fb4:	dd400517 	ldw	r21,20(sp)
   24fb8:	dd000417 	ldw	r20,16(sp)
   24fbc:	dcc00317 	ldw	r19,12(sp)
   24fc0:	dc800217 	ldw	r18,8(sp)
   24fc4:	dc400117 	ldw	r17,4(sp)
   24fc8:	dc000017 	ldw	r16,0(sp)
   24fcc:	dec00804 	addi	sp,sp,32
   24fd0:	f800283a 	ret
   24fd4:	002d883a 	mov	r22,zero
   24fd8:	003ff206 	br	24fa4 <_fwalk+0x80>

00024fdc <__locale_charset>:
   24fdc:	d0a00317 	ldw	r2,-32756(gp)
   24fe0:	f800283a 	ret

00024fe4 <_localeconv_r>:
   24fe4:	008000f4 	movhi	r2,3
   24fe8:	10b34b04 	addi	r2,r2,-13012
   24fec:	f800283a 	ret

00024ff0 <localeconv>:
   24ff0:	008000f4 	movhi	r2,3
   24ff4:	10ba7904 	addi	r2,r2,-5660
   24ff8:	11000017 	ldw	r4,0(r2)
   24ffc:	0024fe41 	jmpi	24fe4 <_localeconv_r>

00025000 <_setlocale_r>:
   25000:	defffc04 	addi	sp,sp,-16
   25004:	00c000f4 	movhi	r3,3
   25008:	18f34604 	addi	r3,r3,-13032
   2500c:	dc800215 	stw	r18,8(sp)
   25010:	dc400115 	stw	r17,4(sp)
   25014:	dc000015 	stw	r16,0(sp)
   25018:	2023883a 	mov	r17,r4
   2501c:	2825883a 	mov	r18,r5
   25020:	dfc00315 	stw	ra,12(sp)
   25024:	3021883a 	mov	r16,r6
   25028:	3009883a 	mov	r4,r6
   2502c:	180b883a 	mov	r5,r3
   25030:	30000926 	beq	r6,zero,25058 <_setlocale_r+0x58>
   25034:	002751c0 	call	2751c <strcmp>
   25038:	8009883a 	mov	r4,r16
   2503c:	014000f4 	movhi	r5,3
   25040:	29733104 	addi	r5,r5,-13116
   25044:	10000b1e 	bne	r2,zero,25074 <_setlocale_r+0x74>
   25048:	8c000d15 	stw	r16,52(r17)
   2504c:	8c800c15 	stw	r18,48(r17)
   25050:	00c000f4 	movhi	r3,3
   25054:	18f34604 	addi	r3,r3,-13032
   25058:	1805883a 	mov	r2,r3
   2505c:	dfc00317 	ldw	ra,12(sp)
   25060:	dc800217 	ldw	r18,8(sp)
   25064:	dc400117 	ldw	r17,4(sp)
   25068:	dc000017 	ldw	r16,0(sp)
   2506c:	dec00404 	addi	sp,sp,16
   25070:	f800283a 	ret
   25074:	002751c0 	call	2751c <strcmp>
   25078:	0007883a 	mov	r3,zero
   2507c:	103ff226 	beq	r2,zero,25048 <_setlocale_r+0x48>
   25080:	003ff506 	br	25058 <_setlocale_r+0x58>

00025084 <setlocale>:
   25084:	018000f4 	movhi	r6,3
   25088:	31ba7904 	addi	r6,r6,-5660
   2508c:	2007883a 	mov	r3,r4
   25090:	31000017 	ldw	r4,0(r6)
   25094:	280d883a 	mov	r6,r5
   25098:	180b883a 	mov	r5,r3
   2509c:	00250001 	jmpi	25000 <_setlocale_r>

000250a0 <__smakebuf_r>:
   250a0:	2880030b 	ldhu	r2,12(r5)
   250a4:	deffed04 	addi	sp,sp,-76
   250a8:	dc401015 	stw	r17,64(sp)
   250ac:	1080008c 	andi	r2,r2,2
   250b0:	dc000f15 	stw	r16,60(sp)
   250b4:	dfc01215 	stw	ra,72(sp)
   250b8:	dc801115 	stw	r18,68(sp)
   250bc:	2821883a 	mov	r16,r5
   250c0:	2023883a 	mov	r17,r4
   250c4:	10000b26 	beq	r2,zero,250f4 <__smakebuf_r+0x54>
   250c8:	28c010c4 	addi	r3,r5,67
   250cc:	00800044 	movi	r2,1
   250d0:	28800515 	stw	r2,20(r5)
   250d4:	28c00415 	stw	r3,16(r5)
   250d8:	28c00015 	stw	r3,0(r5)
   250dc:	dfc01217 	ldw	ra,72(sp)
   250e0:	dc801117 	ldw	r18,68(sp)
   250e4:	dc401017 	ldw	r17,64(sp)
   250e8:	dc000f17 	ldw	r16,60(sp)
   250ec:	dec01304 	addi	sp,sp,76
   250f0:	f800283a 	ret
   250f4:	2940038f 	ldh	r5,14(r5)
   250f8:	28002116 	blt	r5,zero,25180 <__smakebuf_r+0xe0>
   250fc:	d80d883a 	mov	r6,sp
   25100:	00278ac0 	call	278ac <_fstat_r>
   25104:	10001e16 	blt	r2,zero,25180 <__smakebuf_r+0xe0>
   25108:	d8800117 	ldw	r2,4(sp)
   2510c:	00e00014 	movui	r3,32768
   25110:	113c000c 	andi	r4,r2,61440
   25114:	20c03126 	beq	r4,r3,251dc <__smakebuf_r+0x13c>
   25118:	8080030b 	ldhu	r2,12(r16)
   2511c:	00c80004 	movi	r3,8192
   25120:	10820014 	ori	r2,r2,2048
   25124:	8080030d 	sth	r2,12(r16)
   25128:	20c01e26 	beq	r4,r3,251a4 <__smakebuf_r+0x104>
   2512c:	04810004 	movi	r18,1024
   25130:	8809883a 	mov	r4,r17
   25134:	900b883a 	mov	r5,r18
   25138:	00252340 	call	25234 <_malloc_r>
   2513c:	1009883a 	mov	r4,r2
   25140:	10003126 	beq	r2,zero,25208 <__smakebuf_r+0x168>
   25144:	80c0030b 	ldhu	r3,12(r16)
   25148:	008000b4 	movhi	r2,2
   2514c:	1090f604 	addi	r2,r2,17368
   25150:	88800f15 	stw	r2,60(r17)
   25154:	18c02014 	ori	r3,r3,128
   25158:	84800515 	stw	r18,20(r16)
   2515c:	80c0030d 	sth	r3,12(r16)
   25160:	81000415 	stw	r4,16(r16)
   25164:	81000015 	stw	r4,0(r16)
   25168:	dfc01217 	ldw	ra,72(sp)
   2516c:	dc801117 	ldw	r18,68(sp)
   25170:	dc401017 	ldw	r17,64(sp)
   25174:	dc000f17 	ldw	r16,60(sp)
   25178:	dec01304 	addi	sp,sp,76
   2517c:	f800283a 	ret
   25180:	80c0030b 	ldhu	r3,12(r16)
   25184:	1880200c 	andi	r2,r3,128
   25188:	10000426 	beq	r2,zero,2519c <__smakebuf_r+0xfc>
   2518c:	04801004 	movi	r18,64
   25190:	18820014 	ori	r2,r3,2048
   25194:	8080030d 	sth	r2,12(r16)
   25198:	003fe506 	br	25130 <__smakebuf_r+0x90>
   2519c:	04810004 	movi	r18,1024
   251a0:	003ffb06 	br	25190 <__smakebuf_r+0xf0>
   251a4:	8140038f 	ldh	r5,14(r16)
   251a8:	8809883a 	mov	r4,r17
   251ac:	00279200 	call	27920 <_isatty_r>
   251b0:	103fde26 	beq	r2,zero,2512c <__smakebuf_r+0x8c>
   251b4:	8080030b 	ldhu	r2,12(r16)
   251b8:	80c010c4 	addi	r3,r16,67
   251bc:	04810004 	movi	r18,1024
   251c0:	10800054 	ori	r2,r2,1
   251c4:	8080030d 	sth	r2,12(r16)
   251c8:	00800044 	movi	r2,1
   251cc:	80c00415 	stw	r3,16(r16)
   251d0:	80800515 	stw	r2,20(r16)
   251d4:	80c00015 	stw	r3,0(r16)
   251d8:	003fd506 	br	25130 <__smakebuf_r+0x90>
   251dc:	80c00a17 	ldw	r3,40(r16)
   251e0:	008000b4 	movhi	r2,2
   251e4:	109cf604 	addi	r2,r2,29656
   251e8:	18bfcb1e 	bne	r3,r2,25118 <__smakebuf_r+0x78>
   251ec:	8080030b 	ldhu	r2,12(r16)
   251f0:	00c10004 	movi	r3,1024
   251f4:	1825883a 	mov	r18,r3
   251f8:	10c4b03a 	or	r2,r2,r3
   251fc:	8080030d 	sth	r2,12(r16)
   25200:	80c01315 	stw	r3,76(r16)
   25204:	003fca06 	br	25130 <__smakebuf_r+0x90>
   25208:	8100030b 	ldhu	r4,12(r16)
   2520c:	2080800c 	andi	r2,r4,512
   25210:	103fb21e 	bne	r2,zero,250dc <__smakebuf_r+0x3c>
   25214:	80c010c4 	addi	r3,r16,67
   25218:	21000094 	ori	r4,r4,2
   2521c:	00800044 	movi	r2,1
   25220:	80800515 	stw	r2,20(r16)
   25224:	8100030d 	sth	r4,12(r16)
   25228:	80c00415 	stw	r3,16(r16)
   2522c:	80c00015 	stw	r3,0(r16)
   25230:	003faa06 	br	250dc <__smakebuf_r+0x3c>

00025234 <_malloc_r>:
   25234:	defff604 	addi	sp,sp,-40
   25238:	28c002c4 	addi	r3,r5,11
   2523c:	00800584 	movi	r2,22
   25240:	dc800215 	stw	r18,8(sp)
   25244:	dfc00915 	stw	ra,36(sp)
   25248:	df000815 	stw	fp,32(sp)
   2524c:	ddc00715 	stw	r23,28(sp)
   25250:	dd800615 	stw	r22,24(sp)
   25254:	dd400515 	stw	r21,20(sp)
   25258:	dd000415 	stw	r20,16(sp)
   2525c:	dcc00315 	stw	r19,12(sp)
   25260:	dc400115 	stw	r17,4(sp)
   25264:	dc000015 	stw	r16,0(sp)
   25268:	2025883a 	mov	r18,r4
   2526c:	10c01236 	bltu	r2,r3,252b8 <_malloc_r+0x84>
   25270:	04400404 	movi	r17,16
   25274:	8940142e 	bgeu	r17,r5,252c8 <_malloc_r+0x94>
   25278:	00800304 	movi	r2,12
   2527c:	0007883a 	mov	r3,zero
   25280:	90800015 	stw	r2,0(r18)
   25284:	1805883a 	mov	r2,r3
   25288:	dfc00917 	ldw	ra,36(sp)
   2528c:	df000817 	ldw	fp,32(sp)
   25290:	ddc00717 	ldw	r23,28(sp)
   25294:	dd800617 	ldw	r22,24(sp)
   25298:	dd400517 	ldw	r21,20(sp)
   2529c:	dd000417 	ldw	r20,16(sp)
   252a0:	dcc00317 	ldw	r19,12(sp)
   252a4:	dc800217 	ldw	r18,8(sp)
   252a8:	dc400117 	ldw	r17,4(sp)
   252ac:	dc000017 	ldw	r16,0(sp)
   252b0:	dec00a04 	addi	sp,sp,40
   252b4:	f800283a 	ret
   252b8:	00bffe04 	movi	r2,-8
   252bc:	18a2703a 	and	r17,r3,r2
   252c0:	883fed16 	blt	r17,zero,25278 <_malloc_r+0x44>
   252c4:	897fec36 	bltu	r17,r5,25278 <_malloc_r+0x44>
   252c8:	9009883a 	mov	r4,r18
   252cc:	002a8d00 	call	2a8d0 <__malloc_lock>
   252d0:	00807dc4 	movi	r2,503
   252d4:	14402b2e 	bgeu	r2,r17,25384 <_malloc_r+0x150>
   252d8:	8806d27a 	srli	r3,r17,9
   252dc:	18003f1e 	bne	r3,zero,253dc <_malloc_r+0x1a8>
   252e0:	880cd0fa 	srli	r6,r17,3
   252e4:	300490fa 	slli	r2,r6,3
   252e8:	02c000f4 	movhi	r11,3
   252ec:	5af4f504 	addi	r11,r11,-11308
   252f0:	12cb883a 	add	r5,r2,r11
   252f4:	2c000317 	ldw	r16,12(r5)
   252f8:	580f883a 	mov	r7,r11
   252fc:	2c00041e 	bne	r5,r16,25310 <_malloc_r+0xdc>
   25300:	00000a06 	br	2532c <_malloc_r+0xf8>
   25304:	1800860e 	bge	r3,zero,25520 <_malloc_r+0x2ec>
   25308:	84000317 	ldw	r16,12(r16)
   2530c:	2c000726 	beq	r5,r16,2532c <_malloc_r+0xf8>
   25310:	80800117 	ldw	r2,4(r16)
   25314:	00ffff04 	movi	r3,-4
   25318:	10c8703a 	and	r4,r2,r3
   2531c:	2447c83a 	sub	r3,r4,r17
   25320:	008003c4 	movi	r2,15
   25324:	10fff70e 	bge	r2,r3,25304 <_malloc_r+0xd0>
   25328:	31bfffc4 	addi	r6,r6,-1
   2532c:	32400044 	addi	r9,r6,1
   25330:	028000f4 	movhi	r10,3
   25334:	52b4f704 	addi	r10,r10,-11300
   25338:	54000217 	ldw	r16,8(r10)
   2533c:	8280a026 	beq	r16,r10,255c0 <_malloc_r+0x38c>
   25340:	80800117 	ldw	r2,4(r16)
   25344:	00ffff04 	movi	r3,-4
   25348:	10ca703a 	and	r5,r2,r3
   2534c:	2c4dc83a 	sub	r6,r5,r17
   25350:	008003c4 	movi	r2,15
   25354:	11808316 	blt	r2,r6,25564 <_malloc_r+0x330>
   25358:	52800315 	stw	r10,12(r10)
   2535c:	52800215 	stw	r10,8(r10)
   25360:	30002916 	blt	r6,zero,25408 <_malloc_r+0x1d4>
   25364:	8147883a 	add	r3,r16,r5
   25368:	18800117 	ldw	r2,4(r3)
   2536c:	9009883a 	mov	r4,r18
   25370:	10800054 	ori	r2,r2,1
   25374:	18800115 	stw	r2,4(r3)
   25378:	002a8f00 	call	2a8f0 <__malloc_unlock>
   2537c:	80c00204 	addi	r3,r16,8
   25380:	003fc006 	br	25284 <_malloc_r+0x50>
   25384:	02c000f4 	movhi	r11,3
   25388:	5af4f504 	addi	r11,r11,-11308
   2538c:	8ac5883a 	add	r2,r17,r11
   25390:	14000317 	ldw	r16,12(r2)
   25394:	580f883a 	mov	r7,r11
   25398:	8806d0fa 	srli	r3,r17,3
   2539c:	14006c26 	beq	r2,r16,25550 <_malloc_r+0x31c>
   253a0:	80c00117 	ldw	r3,4(r16)
   253a4:	00bfff04 	movi	r2,-4
   253a8:	81800317 	ldw	r6,12(r16)
   253ac:	1886703a 	and	r3,r3,r2
   253b0:	80c7883a 	add	r3,r16,r3
   253b4:	18800117 	ldw	r2,4(r3)
   253b8:	81400217 	ldw	r5,8(r16)
   253bc:	9009883a 	mov	r4,r18
   253c0:	10800054 	ori	r2,r2,1
   253c4:	18800115 	stw	r2,4(r3)
   253c8:	31400215 	stw	r5,8(r6)
   253cc:	29800315 	stw	r6,12(r5)
   253d0:	002a8f00 	call	2a8f0 <__malloc_unlock>
   253d4:	80c00204 	addi	r3,r16,8
   253d8:	003faa06 	br	25284 <_malloc_r+0x50>
   253dc:	00800104 	movi	r2,4
   253e0:	10c0052e 	bgeu	r2,r3,253f8 <_malloc_r+0x1c4>
   253e4:	00800504 	movi	r2,20
   253e8:	10c07836 	bltu	r2,r3,255cc <_malloc_r+0x398>
   253ec:	198016c4 	addi	r6,r3,91
   253f0:	300490fa 	slli	r2,r6,3
   253f4:	003fbc06 	br	252e8 <_malloc_r+0xb4>
   253f8:	8804d1ba 	srli	r2,r17,6
   253fc:	11800e04 	addi	r6,r2,56
   25400:	300490fa 	slli	r2,r6,3
   25404:	003fb806 	br	252e8 <_malloc_r+0xb4>
   25408:	00807fc4 	movi	r2,511
   2540c:	1140bb36 	bltu	r2,r5,256fc <_malloc_r+0x4c8>
   25410:	2806d0fa 	srli	r3,r5,3
   25414:	573ffe04 	addi	fp,r10,-8
   25418:	00800044 	movi	r2,1
   2541c:	180890fa 	slli	r4,r3,3
   25420:	1807d0ba 	srai	r3,r3,2
   25424:	e1c00117 	ldw	r7,4(fp)
   25428:	5909883a 	add	r4,r11,r4
   2542c:	21400217 	ldw	r5,8(r4)
   25430:	10c4983a 	sll	r2,r2,r3
   25434:	81000315 	stw	r4,12(r16)
   25438:	81400215 	stw	r5,8(r16)
   2543c:	388eb03a 	or	r7,r7,r2
   25440:	2c000315 	stw	r16,12(r5)
   25444:	24000215 	stw	r16,8(r4)
   25448:	e1c00115 	stw	r7,4(fp)
   2544c:	4807883a 	mov	r3,r9
   25450:	4800cd16 	blt	r9,zero,25788 <_malloc_r+0x554>
   25454:	1807d0ba 	srai	r3,r3,2
   25458:	00800044 	movi	r2,1
   2545c:	10c8983a 	sll	r4,r2,r3
   25460:	39004436 	bltu	r7,r4,25574 <_malloc_r+0x340>
   25464:	21c4703a 	and	r2,r4,r7
   25468:	10000a1e 	bne	r2,zero,25494 <_malloc_r+0x260>
   2546c:	2109883a 	add	r4,r4,r4
   25470:	00bfff04 	movi	r2,-4
   25474:	4884703a 	and	r2,r9,r2
   25478:	3906703a 	and	r3,r7,r4
   2547c:	12400104 	addi	r9,r2,4
   25480:	1800041e 	bne	r3,zero,25494 <_malloc_r+0x260>
   25484:	2109883a 	add	r4,r4,r4
   25488:	3904703a 	and	r2,r7,r4
   2548c:	4a400104 	addi	r9,r9,4
   25490:	103ffc26 	beq	r2,zero,25484 <_malloc_r+0x250>
   25494:	480490fa 	slli	r2,r9,3
   25498:	4819883a 	mov	r12,r9
   2549c:	023fff04 	movi	r8,-4
   254a0:	589b883a 	add	r13,r11,r2
   254a4:	6807883a 	mov	r3,r13
   254a8:	014003c4 	movi	r5,15
   254ac:	1c000317 	ldw	r16,12(r3)
   254b0:	1c00041e 	bne	r3,r16,254c4 <_malloc_r+0x290>
   254b4:	0000a706 	br	25754 <_malloc_r+0x520>
   254b8:	3000ab0e 	bge	r6,zero,25768 <_malloc_r+0x534>
   254bc:	84000317 	ldw	r16,12(r16)
   254c0:	1c00a426 	beq	r3,r16,25754 <_malloc_r+0x520>
   254c4:	80800117 	ldw	r2,4(r16)
   254c8:	1204703a 	and	r2,r2,r8
   254cc:	144dc83a 	sub	r6,r2,r17
   254d0:	29bff90e 	bge	r5,r6,254b8 <_malloc_r+0x284>
   254d4:	81000317 	ldw	r4,12(r16)
   254d8:	80c00217 	ldw	r3,8(r16)
   254dc:	89400054 	ori	r5,r17,1
   254e0:	8445883a 	add	r2,r16,r17
   254e4:	20c00215 	stw	r3,8(r4)
   254e8:	19000315 	stw	r4,12(r3)
   254ec:	81400115 	stw	r5,4(r16)
   254f0:	1187883a 	add	r3,r2,r6
   254f4:	31000054 	ori	r4,r6,1
   254f8:	50800315 	stw	r2,12(r10)
   254fc:	50800215 	stw	r2,8(r10)
   25500:	19800015 	stw	r6,0(r3)
   25504:	11000115 	stw	r4,4(r2)
   25508:	12800215 	stw	r10,8(r2)
   2550c:	12800315 	stw	r10,12(r2)
   25510:	9009883a 	mov	r4,r18
   25514:	002a8f00 	call	2a8f0 <__malloc_unlock>
   25518:	80c00204 	addi	r3,r16,8
   2551c:	003f5906 	br	25284 <_malloc_r+0x50>
   25520:	8109883a 	add	r4,r16,r4
   25524:	20800117 	ldw	r2,4(r4)
   25528:	80c00217 	ldw	r3,8(r16)
   2552c:	81400317 	ldw	r5,12(r16)
   25530:	10800054 	ori	r2,r2,1
   25534:	20800115 	stw	r2,4(r4)
   25538:	28c00215 	stw	r3,8(r5)
   2553c:	19400315 	stw	r5,12(r3)
   25540:	9009883a 	mov	r4,r18
   25544:	002a8f00 	call	2a8f0 <__malloc_unlock>
   25548:	80c00204 	addi	r3,r16,8
   2554c:	003f4d06 	br	25284 <_malloc_r+0x50>
   25550:	80800204 	addi	r2,r16,8
   25554:	14000317 	ldw	r16,12(r2)
   25558:	143f911e 	bne	r2,r16,253a0 <_malloc_r+0x16c>
   2555c:	1a400084 	addi	r9,r3,2
   25560:	003f7306 	br	25330 <_malloc_r+0xfc>
   25564:	88c00054 	ori	r3,r17,1
   25568:	8445883a 	add	r2,r16,r17
   2556c:	80c00115 	stw	r3,4(r16)
   25570:	003fdf06 	br	254f0 <_malloc_r+0x2bc>
   25574:	e4000217 	ldw	r16,8(fp)
   25578:	00bfff04 	movi	r2,-4
   2557c:	80c00117 	ldw	r3,4(r16)
   25580:	802d883a 	mov	r22,r16
   25584:	18aa703a 	and	r21,r3,r2
   25588:	ac401636 	bltu	r21,r17,255e4 <_malloc_r+0x3b0>
   2558c:	ac49c83a 	sub	r4,r21,r17
   25590:	008003c4 	movi	r2,15
   25594:	1100130e 	bge	r2,r4,255e4 <_malloc_r+0x3b0>
   25598:	88800054 	ori	r2,r17,1
   2559c:	8447883a 	add	r3,r16,r17
   255a0:	80800115 	stw	r2,4(r16)
   255a4:	20800054 	ori	r2,r4,1
   255a8:	18800115 	stw	r2,4(r3)
   255ac:	e0c00215 	stw	r3,8(fp)
   255b0:	9009883a 	mov	r4,r18
   255b4:	002a8f00 	call	2a8f0 <__malloc_unlock>
   255b8:	80c00204 	addi	r3,r16,8
   255bc:	003f3106 	br	25284 <_malloc_r+0x50>
   255c0:	39c00117 	ldw	r7,4(r7)
   255c4:	573ffe04 	addi	fp,r10,-8
   255c8:	003fa006 	br	2544c <_malloc_r+0x218>
   255cc:	00801504 	movi	r2,84
   255d0:	10c06736 	bltu	r2,r3,25770 <_malloc_r+0x53c>
   255d4:	8804d33a 	srli	r2,r17,12
   255d8:	11801b84 	addi	r6,r2,110
   255dc:	300490fa 	slli	r2,r6,3
   255e0:	003f4106 	br	252e8 <_malloc_r+0xb4>
   255e4:	d0a6aa17 	ldw	r2,-25944(gp)
   255e8:	d0e00517 	ldw	r3,-32748(gp)
   255ec:	053fffc4 	movi	r20,-1
   255f0:	10800404 	addi	r2,r2,16
   255f4:	88a7883a 	add	r19,r17,r2
   255f8:	1d000326 	beq	r3,r20,25608 <_malloc_r+0x3d4>
   255fc:	98c3ffc4 	addi	r3,r19,4095
   25600:	00bc0004 	movi	r2,-4096
   25604:	18a6703a 	and	r19,r3,r2
   25608:	9009883a 	mov	r4,r18
   2560c:	980b883a 	mov	r5,r19
   25610:	00273600 	call	27360 <_sbrk_r>
   25614:	1009883a 	mov	r4,r2
   25618:	15000426 	beq	r2,r20,2562c <_malloc_r+0x3f8>
   2561c:	854b883a 	add	r5,r16,r21
   25620:	1029883a 	mov	r20,r2
   25624:	11405a2e 	bgeu	r2,r5,25790 <_malloc_r+0x55c>
   25628:	87000c26 	beq	r16,fp,2565c <_malloc_r+0x428>
   2562c:	e4000217 	ldw	r16,8(fp)
   25630:	80c00117 	ldw	r3,4(r16)
   25634:	00bfff04 	movi	r2,-4
   25638:	1884703a 	and	r2,r3,r2
   2563c:	14400336 	bltu	r2,r17,2564c <_malloc_r+0x418>
   25640:	1449c83a 	sub	r4,r2,r17
   25644:	008003c4 	movi	r2,15
   25648:	113fd316 	blt	r2,r4,25598 <_malloc_r+0x364>
   2564c:	9009883a 	mov	r4,r18
   25650:	002a8f00 	call	2a8f0 <__malloc_unlock>
   25654:	0007883a 	mov	r3,zero
   25658:	003f0a06 	br	25284 <_malloc_r+0x50>
   2565c:	05c000f4 	movhi	r23,3
   25660:	bdc12d04 	addi	r23,r23,1204
   25664:	b8800017 	ldw	r2,0(r23)
   25668:	988d883a 	add	r6,r19,r2
   2566c:	b9800015 	stw	r6,0(r23)
   25670:	d0e00517 	ldw	r3,-32748(gp)
   25674:	00bfffc4 	movi	r2,-1
   25678:	18808e26 	beq	r3,r2,258b4 <_malloc_r+0x680>
   2567c:	2145c83a 	sub	r2,r4,r5
   25680:	3085883a 	add	r2,r6,r2
   25684:	b8800015 	stw	r2,0(r23)
   25688:	20c001cc 	andi	r3,r4,7
   2568c:	18005f1e 	bne	r3,zero,2580c <_malloc_r+0x5d8>
   25690:	000b883a 	mov	r5,zero
   25694:	a4c5883a 	add	r2,r20,r19
   25698:	1083ffcc 	andi	r2,r2,4095
   2569c:	00c40004 	movi	r3,4096
   256a0:	1887c83a 	sub	r3,r3,r2
   256a4:	28e7883a 	add	r19,r5,r3
   256a8:	9009883a 	mov	r4,r18
   256ac:	980b883a 	mov	r5,r19
   256b0:	00273600 	call	27360 <_sbrk_r>
   256b4:	1007883a 	mov	r3,r2
   256b8:	00bfffc4 	movi	r2,-1
   256bc:	18807a26 	beq	r3,r2,258a8 <_malloc_r+0x674>
   256c0:	1d05c83a 	sub	r2,r3,r20
   256c4:	9885883a 	add	r2,r19,r2
   256c8:	10c00054 	ori	r3,r2,1
   256cc:	b8800017 	ldw	r2,0(r23)
   256d0:	a021883a 	mov	r16,r20
   256d4:	a0c00115 	stw	r3,4(r20)
   256d8:	9885883a 	add	r2,r19,r2
   256dc:	b8800015 	stw	r2,0(r23)
   256e0:	e5000215 	stw	r20,8(fp)
   256e4:	b7003626 	beq	r22,fp,257c0 <_malloc_r+0x58c>
   256e8:	018003c4 	movi	r6,15
   256ec:	35404b36 	bltu	r6,r21,2581c <_malloc_r+0x5e8>
   256f0:	00800044 	movi	r2,1
   256f4:	a0800115 	stw	r2,4(r20)
   256f8:	003fcd06 	br	25630 <_malloc_r+0x3fc>
   256fc:	2808d27a 	srli	r4,r5,9
   25700:	2000371e 	bne	r4,zero,257e0 <_malloc_r+0x5ac>
   25704:	2808d0fa 	srli	r4,r5,3
   25708:	200690fa 	slli	r3,r4,3
   2570c:	1ad1883a 	add	r8,r3,r11
   25710:	41800217 	ldw	r6,8(r8)
   25714:	41805b26 	beq	r8,r6,25884 <_malloc_r+0x650>
   25718:	30800117 	ldw	r2,4(r6)
   2571c:	00ffff04 	movi	r3,-4
   25720:	10c4703a 	and	r2,r2,r3
   25724:	2880022e 	bgeu	r5,r2,25730 <_malloc_r+0x4fc>
   25728:	31800217 	ldw	r6,8(r6)
   2572c:	41bffa1e 	bne	r8,r6,25718 <_malloc_r+0x4e4>
   25730:	32000317 	ldw	r8,12(r6)
   25734:	39c00117 	ldw	r7,4(r7)
   25738:	82000315 	stw	r8,12(r16)
   2573c:	81800215 	stw	r6,8(r16)
   25740:	070000f4 	movhi	fp,3
   25744:	e734f504 	addi	fp,fp,-11308
   25748:	34000315 	stw	r16,12(r6)
   2574c:	44000215 	stw	r16,8(r8)
   25750:	003f3e06 	br	2544c <_malloc_r+0x218>
   25754:	63000044 	addi	r12,r12,1
   25758:	608000cc 	andi	r2,r12,3
   2575c:	10005d26 	beq	r2,zero,258d4 <_malloc_r+0x6a0>
   25760:	18c00204 	addi	r3,r3,8
   25764:	003f5106 	br	254ac <_malloc_r+0x278>
   25768:	8089883a 	add	r4,r16,r2
   2576c:	003f6d06 	br	25524 <_malloc_r+0x2f0>
   25770:	00805504 	movi	r2,340
   25774:	10c02036 	bltu	r2,r3,257f8 <_malloc_r+0x5c4>
   25778:	8804d3fa 	srli	r2,r17,15
   2577c:	11801dc4 	addi	r6,r2,119
   25780:	300490fa 	slli	r2,r6,3
   25784:	003ed806 	br	252e8 <_malloc_r+0xb4>
   25788:	48c000c4 	addi	r3,r9,3
   2578c:	003f3106 	br	25454 <_malloc_r+0x220>
   25790:	05c000f4 	movhi	r23,3
   25794:	bdc12d04 	addi	r23,r23,1204
   25798:	b8800017 	ldw	r2,0(r23)
   2579c:	988d883a 	add	r6,r19,r2
   257a0:	b9800015 	stw	r6,0(r23)
   257a4:	293fb21e 	bne	r5,r4,25670 <_malloc_r+0x43c>
   257a8:	2083ffcc 	andi	r2,r4,4095
   257ac:	103fb01e 	bne	r2,zero,25670 <_malloc_r+0x43c>
   257b0:	e4000217 	ldw	r16,8(fp)
   257b4:	9d45883a 	add	r2,r19,r21
   257b8:	10800054 	ori	r2,r2,1
   257bc:	80800115 	stw	r2,4(r16)
   257c0:	b8c00017 	ldw	r3,0(r23)
   257c4:	d0a6ab17 	ldw	r2,-25940(gp)
   257c8:	10c0012e 	bgeu	r2,r3,257d0 <_malloc_r+0x59c>
   257cc:	d0e6ab15 	stw	r3,-25940(gp)
   257d0:	d0a6ac17 	ldw	r2,-25936(gp)
   257d4:	10ff962e 	bgeu	r2,r3,25630 <_malloc_r+0x3fc>
   257d8:	d0e6ac15 	stw	r3,-25936(gp)
   257dc:	003f9406 	br	25630 <_malloc_r+0x3fc>
   257e0:	00800104 	movi	r2,4
   257e4:	11001e36 	bltu	r2,r4,25860 <_malloc_r+0x62c>
   257e8:	2804d1ba 	srli	r2,r5,6
   257ec:	11000e04 	addi	r4,r2,56
   257f0:	200690fa 	slli	r3,r4,3
   257f4:	003fc506 	br	2570c <_malloc_r+0x4d8>
   257f8:	00815504 	movi	r2,1364
   257fc:	10c01d2e 	bgeu	r2,r3,25874 <_malloc_r+0x640>
   25800:	01801f84 	movi	r6,126
   25804:	0080fc04 	movi	r2,1008
   25808:	003eb706 	br	252e8 <_malloc_r+0xb4>
   2580c:	00800204 	movi	r2,8
   25810:	10cbc83a 	sub	r5,r2,r3
   25814:	2169883a 	add	r20,r4,r5
   25818:	003f9e06 	br	25694 <_malloc_r+0x460>
   2581c:	00bffe04 	movi	r2,-8
   25820:	a93ffd04 	addi	r4,r21,-12
   25824:	2088703a 	and	r4,r4,r2
   25828:	b10b883a 	add	r5,r22,r4
   2582c:	00c00144 	movi	r3,5
   25830:	28c00215 	stw	r3,8(r5)
   25834:	28c00115 	stw	r3,4(r5)
   25838:	b0800117 	ldw	r2,4(r22)
   2583c:	1080004c 	andi	r2,r2,1
   25840:	2084b03a 	or	r2,r4,r2
   25844:	b0800115 	stw	r2,4(r22)
   25848:	313fdd2e 	bgeu	r6,r4,257c0 <_malloc_r+0x58c>
   2584c:	b1400204 	addi	r5,r22,8
   25850:	9009883a 	mov	r4,r18
   25854:	00246ac0 	call	246ac <_free_r>
   25858:	e4000217 	ldw	r16,8(fp)
   2585c:	003fd806 	br	257c0 <_malloc_r+0x58c>
   25860:	00800504 	movi	r2,20
   25864:	11001536 	bltu	r2,r4,258bc <_malloc_r+0x688>
   25868:	210016c4 	addi	r4,r4,91
   2586c:	200690fa 	slli	r3,r4,3
   25870:	003fa606 	br	2570c <_malloc_r+0x4d8>
   25874:	8804d4ba 	srli	r2,r17,18
   25878:	11801f04 	addi	r6,r2,124
   2587c:	300490fa 	slli	r2,r6,3
   25880:	003e9906 	br	252e8 <_malloc_r+0xb4>
   25884:	2009d0ba 	srai	r4,r4,2
   25888:	014000f4 	movhi	r5,3
   2588c:	2974f504 	addi	r5,r5,-11308
   25890:	00c00044 	movi	r3,1
   25894:	28800117 	ldw	r2,4(r5)
   25898:	1906983a 	sll	r3,r3,r4
   2589c:	10c4b03a 	or	r2,r2,r3
   258a0:	28800115 	stw	r2,4(r5)
   258a4:	003fa306 	br	25734 <_malloc_r+0x500>
   258a8:	0027883a 	mov	r19,zero
   258ac:	00c00044 	movi	r3,1
   258b0:	003f8606 	br	256cc <_malloc_r+0x498>
   258b4:	d1200515 	stw	r4,-32748(gp)
   258b8:	003f7306 	br	25688 <_malloc_r+0x454>
   258bc:	00801504 	movi	r2,84
   258c0:	11001936 	bltu	r2,r4,25928 <_malloc_r+0x6f4>
   258c4:	2804d33a 	srli	r2,r5,12
   258c8:	11001b84 	addi	r4,r2,110
   258cc:	200690fa 	slli	r3,r4,3
   258d0:	003f8e06 	br	2570c <_malloc_r+0x4d8>
   258d4:	480b883a 	mov	r5,r9
   258d8:	6807883a 	mov	r3,r13
   258dc:	288000cc 	andi	r2,r5,3
   258e0:	18fffe04 	addi	r3,r3,-8
   258e4:	297fffc4 	addi	r5,r5,-1
   258e8:	10001526 	beq	r2,zero,25940 <_malloc_r+0x70c>
   258ec:	18800217 	ldw	r2,8(r3)
   258f0:	10fffa26 	beq	r2,r3,258dc <_malloc_r+0x6a8>
   258f4:	2109883a 	add	r4,r4,r4
   258f8:	393f1e36 	bltu	r7,r4,25574 <_malloc_r+0x340>
   258fc:	203f1d26 	beq	r4,zero,25574 <_malloc_r+0x340>
   25900:	21c4703a 	and	r2,r4,r7
   25904:	10000226 	beq	r2,zero,25910 <_malloc_r+0x6dc>
   25908:	6013883a 	mov	r9,r12
   2590c:	003ee106 	br	25494 <_malloc_r+0x260>
   25910:	2109883a 	add	r4,r4,r4
   25914:	3904703a 	and	r2,r7,r4
   25918:	63000104 	addi	r12,r12,4
   2591c:	103ffc26 	beq	r2,zero,25910 <_malloc_r+0x6dc>
   25920:	6013883a 	mov	r9,r12
   25924:	003edb06 	br	25494 <_malloc_r+0x260>
   25928:	00805504 	movi	r2,340
   2592c:	11000836 	bltu	r2,r4,25950 <_malloc_r+0x71c>
   25930:	2804d3fa 	srli	r2,r5,15
   25934:	11001dc4 	addi	r4,r2,119
   25938:	200690fa 	slli	r3,r4,3
   2593c:	003f7306 	br	2570c <_malloc_r+0x4d8>
   25940:	0104303a 	nor	r2,zero,r4
   25944:	388e703a 	and	r7,r7,r2
   25948:	e1c00115 	stw	r7,4(fp)
   2594c:	003fe906 	br	258f4 <_malloc_r+0x6c0>
   25950:	00815504 	movi	r2,1364
   25954:	1100032e 	bgeu	r2,r4,25964 <_malloc_r+0x730>
   25958:	01001f84 	movi	r4,126
   2595c:	00c0fc04 	movi	r3,1008
   25960:	003f6a06 	br	2570c <_malloc_r+0x4d8>
   25964:	2804d4ba 	srli	r2,r5,18
   25968:	11001f04 	addi	r4,r2,124
   2596c:	200690fa 	slli	r3,r4,3
   25970:	003f6606 	br	2570c <_malloc_r+0x4d8>

00025974 <memchr>:
   25974:	008000c4 	movi	r2,3
   25978:	29403fcc 	andi	r5,r5,255
   2597c:	2007883a 	mov	r3,r4
   25980:	1180022e 	bgeu	r2,r6,2598c <memchr+0x18>
   25984:	2084703a 	and	r2,r4,r2
   25988:	10000b26 	beq	r2,zero,259b8 <memchr+0x44>
   2598c:	313fffc4 	addi	r4,r6,-1
   25990:	3000051e 	bne	r6,zero,259a8 <memchr+0x34>
   25994:	00002c06 	br	25a48 <memchr+0xd4>
   25998:	213fffc4 	addi	r4,r4,-1
   2599c:	00bfffc4 	movi	r2,-1
   259a0:	18c00044 	addi	r3,r3,1
   259a4:	20802826 	beq	r4,r2,25a48 <memchr+0xd4>
   259a8:	18800003 	ldbu	r2,0(r3)
   259ac:	28bffa1e 	bne	r5,r2,25998 <memchr+0x24>
   259b0:	1805883a 	mov	r2,r3
   259b4:	f800283a 	ret
   259b8:	0011883a 	mov	r8,zero
   259bc:	0007883a 	mov	r3,zero
   259c0:	01c00104 	movi	r7,4
   259c4:	4004923a 	slli	r2,r8,8
   259c8:	18c00044 	addi	r3,r3,1
   259cc:	1151883a 	add	r8,r2,r5
   259d0:	19fffc1e 	bne	r3,r7,259c4 <memchr+0x50>
   259d4:	02bfbff4 	movhi	r10,65279
   259d8:	52bfbfc4 	addi	r10,r10,-257
   259dc:	02602074 	movhi	r9,32897
   259e0:	4a602004 	addi	r9,r9,-32640
   259e4:	02c000c4 	movi	r11,3
   259e8:	20800017 	ldw	r2,0(r4)
   259ec:	31bfff04 	addi	r6,r6,-4
   259f0:	200f883a 	mov	r7,r4
   259f4:	1204f03a 	xor	r2,r2,r8
   259f8:	1287883a 	add	r3,r2,r10
   259fc:	1a46703a 	and	r3,r3,r9
   25a00:	0084303a 	nor	r2,zero,r2
   25a04:	10c4703a 	and	r2,r2,r3
   25a08:	10000b26 	beq	r2,zero,25a38 <memchr+0xc4>
   25a0c:	20800003 	ldbu	r2,0(r4)
   25a10:	28800f26 	beq	r5,r2,25a50 <memchr+0xdc>
   25a14:	20800043 	ldbu	r2,1(r4)
   25a18:	21c00044 	addi	r7,r4,1
   25a1c:	28800c26 	beq	r5,r2,25a50 <memchr+0xdc>
   25a20:	20800083 	ldbu	r2,2(r4)
   25a24:	21c00084 	addi	r7,r4,2
   25a28:	28800926 	beq	r5,r2,25a50 <memchr+0xdc>
   25a2c:	208000c3 	ldbu	r2,3(r4)
   25a30:	21c000c4 	addi	r7,r4,3
   25a34:	28800626 	beq	r5,r2,25a50 <memchr+0xdc>
   25a38:	21000104 	addi	r4,r4,4
   25a3c:	59bfea36 	bltu	r11,r6,259e8 <memchr+0x74>
   25a40:	2007883a 	mov	r3,r4
   25a44:	003fd106 	br	2598c <memchr+0x18>
   25a48:	0005883a 	mov	r2,zero
   25a4c:	f800283a 	ret
   25a50:	3805883a 	mov	r2,r7
   25a54:	f800283a 	ret

00025a58 <memcpy>:
   25a58:	01c003c4 	movi	r7,15
   25a5c:	2007883a 	mov	r3,r4
   25a60:	3980032e 	bgeu	r7,r6,25a70 <memcpy+0x18>
   25a64:	2904b03a 	or	r2,r5,r4
   25a68:	108000cc 	andi	r2,r2,3
   25a6c:	10000926 	beq	r2,zero,25a94 <memcpy+0x3c>
   25a70:	30000626 	beq	r6,zero,25a8c <memcpy+0x34>
   25a74:	30cd883a 	add	r6,r6,r3
   25a78:	28800003 	ldbu	r2,0(r5)
   25a7c:	29400044 	addi	r5,r5,1
   25a80:	18800005 	stb	r2,0(r3)
   25a84:	18c00044 	addi	r3,r3,1
   25a88:	30fffb1e 	bne	r6,r3,25a78 <memcpy+0x20>
   25a8c:	2005883a 	mov	r2,r4
   25a90:	f800283a 	ret
   25a94:	3811883a 	mov	r8,r7
   25a98:	200f883a 	mov	r7,r4
   25a9c:	28c00017 	ldw	r3,0(r5)
   25aa0:	31bffc04 	addi	r6,r6,-16
   25aa4:	38c00015 	stw	r3,0(r7)
   25aa8:	28800117 	ldw	r2,4(r5)
   25aac:	38800115 	stw	r2,4(r7)
   25ab0:	28c00217 	ldw	r3,8(r5)
   25ab4:	38c00215 	stw	r3,8(r7)
   25ab8:	28800317 	ldw	r2,12(r5)
   25abc:	29400404 	addi	r5,r5,16
   25ac0:	38800315 	stw	r2,12(r7)
   25ac4:	39c00404 	addi	r7,r7,16
   25ac8:	41bff436 	bltu	r8,r6,25a9c <memcpy+0x44>
   25acc:	008000c4 	movi	r2,3
   25ad0:	1180072e 	bgeu	r2,r6,25af0 <memcpy+0x98>
   25ad4:	1007883a 	mov	r3,r2
   25ad8:	28800017 	ldw	r2,0(r5)
   25adc:	31bfff04 	addi	r6,r6,-4
   25ae0:	29400104 	addi	r5,r5,4
   25ae4:	38800015 	stw	r2,0(r7)
   25ae8:	39c00104 	addi	r7,r7,4
   25aec:	19bffa36 	bltu	r3,r6,25ad8 <memcpy+0x80>
   25af0:	3807883a 	mov	r3,r7
   25af4:	003fde06 	br	25a70 <memcpy+0x18>

00025af8 <memmove>:
   25af8:	2807883a 	mov	r3,r5
   25afc:	2011883a 	mov	r8,r4
   25b00:	29000c2e 	bgeu	r5,r4,25b34 <memmove+0x3c>
   25b04:	298f883a 	add	r7,r5,r6
   25b08:	21c00a2e 	bgeu	r4,r7,25b34 <memmove+0x3c>
   25b0c:	30000726 	beq	r6,zero,25b2c <memmove+0x34>
   25b10:	2187883a 	add	r3,r4,r6
   25b14:	198dc83a 	sub	r6,r3,r6
   25b18:	39ffffc4 	addi	r7,r7,-1
   25b1c:	38800003 	ldbu	r2,0(r7)
   25b20:	18ffffc4 	addi	r3,r3,-1
   25b24:	18800005 	stb	r2,0(r3)
   25b28:	19bffb1e 	bne	r3,r6,25b18 <memmove+0x20>
   25b2c:	2005883a 	mov	r2,r4
   25b30:	f800283a 	ret
   25b34:	01c003c4 	movi	r7,15
   25b38:	39800a36 	bltu	r7,r6,25b64 <memmove+0x6c>
   25b3c:	303ffb26 	beq	r6,zero,25b2c <memmove+0x34>
   25b40:	400f883a 	mov	r7,r8
   25b44:	320d883a 	add	r6,r6,r8
   25b48:	28800003 	ldbu	r2,0(r5)
   25b4c:	29400044 	addi	r5,r5,1
   25b50:	38800005 	stb	r2,0(r7)
   25b54:	39c00044 	addi	r7,r7,1
   25b58:	39bffb1e 	bne	r7,r6,25b48 <memmove+0x50>
   25b5c:	2005883a 	mov	r2,r4
   25b60:	f800283a 	ret
   25b64:	1904b03a 	or	r2,r3,r4
   25b68:	108000cc 	andi	r2,r2,3
   25b6c:	103ff31e 	bne	r2,zero,25b3c <memmove+0x44>
   25b70:	3811883a 	mov	r8,r7
   25b74:	180b883a 	mov	r5,r3
   25b78:	200f883a 	mov	r7,r4
   25b7c:	28c00017 	ldw	r3,0(r5)
   25b80:	31bffc04 	addi	r6,r6,-16
   25b84:	38c00015 	stw	r3,0(r7)
   25b88:	28800117 	ldw	r2,4(r5)
   25b8c:	38800115 	stw	r2,4(r7)
   25b90:	28c00217 	ldw	r3,8(r5)
   25b94:	38c00215 	stw	r3,8(r7)
   25b98:	28800317 	ldw	r2,12(r5)
   25b9c:	29400404 	addi	r5,r5,16
   25ba0:	38800315 	stw	r2,12(r7)
   25ba4:	39c00404 	addi	r7,r7,16
   25ba8:	41bff436 	bltu	r8,r6,25b7c <memmove+0x84>
   25bac:	008000c4 	movi	r2,3
   25bb0:	1180072e 	bgeu	r2,r6,25bd0 <memmove+0xd8>
   25bb4:	1007883a 	mov	r3,r2
   25bb8:	28800017 	ldw	r2,0(r5)
   25bbc:	31bfff04 	addi	r6,r6,-4
   25bc0:	29400104 	addi	r5,r5,4
   25bc4:	38800015 	stw	r2,0(r7)
   25bc8:	39c00104 	addi	r7,r7,4
   25bcc:	19bffa36 	bltu	r3,r6,25bb8 <memmove+0xc0>
   25bd0:	3811883a 	mov	r8,r7
   25bd4:	003fd906 	br	25b3c <memmove+0x44>

00025bd8 <memset>:
   25bd8:	008000c4 	movi	r2,3
   25bdc:	29403fcc 	andi	r5,r5,255
   25be0:	2007883a 	mov	r3,r4
   25be4:	1180022e 	bgeu	r2,r6,25bf0 <memset+0x18>
   25be8:	2084703a 	and	r2,r4,r2
   25bec:	10000826 	beq	r2,zero,25c10 <memset+0x38>
   25bf0:	30000526 	beq	r6,zero,25c08 <memset+0x30>
   25bf4:	2805883a 	mov	r2,r5
   25bf8:	30cd883a 	add	r6,r6,r3
   25bfc:	18800005 	stb	r2,0(r3)
   25c00:	18c00044 	addi	r3,r3,1
   25c04:	19bffd1e 	bne	r3,r6,25bfc <memset+0x24>
   25c08:	2005883a 	mov	r2,r4
   25c0c:	f800283a 	ret
   25c10:	2804923a 	slli	r2,r5,8
   25c14:	020003c4 	movi	r8,15
   25c18:	200f883a 	mov	r7,r4
   25c1c:	2884b03a 	or	r2,r5,r2
   25c20:	1006943a 	slli	r3,r2,16
   25c24:	10c6b03a 	or	r3,r2,r3
   25c28:	41800a2e 	bgeu	r8,r6,25c54 <memset+0x7c>
   25c2c:	4005883a 	mov	r2,r8
   25c30:	31bffc04 	addi	r6,r6,-16
   25c34:	38c00015 	stw	r3,0(r7)
   25c38:	38c00115 	stw	r3,4(r7)
   25c3c:	38c00215 	stw	r3,8(r7)
   25c40:	38c00315 	stw	r3,12(r7)
   25c44:	39c00404 	addi	r7,r7,16
   25c48:	11bff936 	bltu	r2,r6,25c30 <memset+0x58>
   25c4c:	008000c4 	movi	r2,3
   25c50:	1180052e 	bgeu	r2,r6,25c68 <memset+0x90>
   25c54:	31bfff04 	addi	r6,r6,-4
   25c58:	008000c4 	movi	r2,3
   25c5c:	38c00015 	stw	r3,0(r7)
   25c60:	39c00104 	addi	r7,r7,4
   25c64:	11bffb36 	bltu	r2,r6,25c54 <memset+0x7c>
   25c68:	3807883a 	mov	r3,r7
   25c6c:	003fe006 	br	25bf0 <memset+0x18>

00025c70 <_Bfree>:
   25c70:	28000826 	beq	r5,zero,25c94 <_Bfree+0x24>
   25c74:	28800117 	ldw	r2,4(r5)
   25c78:	21001317 	ldw	r4,76(r4)
   25c7c:	1085883a 	add	r2,r2,r2
   25c80:	1085883a 	add	r2,r2,r2
   25c84:	1105883a 	add	r2,r2,r4
   25c88:	10c00017 	ldw	r3,0(r2)
   25c8c:	28c00015 	stw	r3,0(r5)
   25c90:	11400015 	stw	r5,0(r2)
   25c94:	f800283a 	ret

00025c98 <__hi0bits>:
   25c98:	20bfffec 	andhi	r2,r4,65535
   25c9c:	10001426 	beq	r2,zero,25cf0 <__hi0bits+0x58>
   25ca0:	0007883a 	mov	r3,zero
   25ca4:	20bfc02c 	andhi	r2,r4,65280
   25ca8:	1000021e 	bne	r2,zero,25cb4 <__hi0bits+0x1c>
   25cac:	2008923a 	slli	r4,r4,8
   25cb0:	18c00204 	addi	r3,r3,8
   25cb4:	20bc002c 	andhi	r2,r4,61440
   25cb8:	1000021e 	bne	r2,zero,25cc4 <__hi0bits+0x2c>
   25cbc:	2008913a 	slli	r4,r4,4
   25cc0:	18c00104 	addi	r3,r3,4
   25cc4:	20b0002c 	andhi	r2,r4,49152
   25cc8:	1000031e 	bne	r2,zero,25cd8 <__hi0bits+0x40>
   25ccc:	2105883a 	add	r2,r4,r4
   25cd0:	18c00084 	addi	r3,r3,2
   25cd4:	1089883a 	add	r4,r2,r2
   25cd8:	20000316 	blt	r4,zero,25ce8 <__hi0bits+0x50>
   25cdc:	2090002c 	andhi	r2,r4,16384
   25ce0:	10000626 	beq	r2,zero,25cfc <__hi0bits+0x64>
   25ce4:	18c00044 	addi	r3,r3,1
   25ce8:	1805883a 	mov	r2,r3
   25cec:	f800283a 	ret
   25cf0:	2008943a 	slli	r4,r4,16
   25cf4:	00c00404 	movi	r3,16
   25cf8:	003fea06 	br	25ca4 <__hi0bits+0xc>
   25cfc:	00c00804 	movi	r3,32
   25d00:	1805883a 	mov	r2,r3
   25d04:	f800283a 	ret

00025d08 <__lo0bits>:
   25d08:	20c00017 	ldw	r3,0(r4)
   25d0c:	188001cc 	andi	r2,r3,7
   25d10:	10000a26 	beq	r2,zero,25d3c <__lo0bits+0x34>
   25d14:	1880004c 	andi	r2,r3,1
   25d18:	1005003a 	cmpeq	r2,r2,zero
   25d1c:	10002126 	beq	r2,zero,25da4 <__lo0bits+0x9c>
   25d20:	1880008c 	andi	r2,r3,2
   25d24:	1000251e 	bne	r2,zero,25dbc <__lo0bits+0xb4>
   25d28:	1804d0ba 	srli	r2,r3,2
   25d2c:	01400084 	movi	r5,2
   25d30:	20800015 	stw	r2,0(r4)
   25d34:	2805883a 	mov	r2,r5
   25d38:	f800283a 	ret
   25d3c:	18bfffcc 	andi	r2,r3,65535
   25d40:	10001526 	beq	r2,zero,25d98 <__lo0bits+0x90>
   25d44:	000b883a 	mov	r5,zero
   25d48:	18803fcc 	andi	r2,r3,255
   25d4c:	1000021e 	bne	r2,zero,25d58 <__lo0bits+0x50>
   25d50:	1806d23a 	srli	r3,r3,8
   25d54:	29400204 	addi	r5,r5,8
   25d58:	188003cc 	andi	r2,r3,15
   25d5c:	1000021e 	bne	r2,zero,25d68 <__lo0bits+0x60>
   25d60:	1806d13a 	srli	r3,r3,4
   25d64:	29400104 	addi	r5,r5,4
   25d68:	188000cc 	andi	r2,r3,3
   25d6c:	1000021e 	bne	r2,zero,25d78 <__lo0bits+0x70>
   25d70:	1806d0ba 	srli	r3,r3,2
   25d74:	29400084 	addi	r5,r5,2
   25d78:	1880004c 	andi	r2,r3,1
   25d7c:	1000031e 	bne	r2,zero,25d8c <__lo0bits+0x84>
   25d80:	1806d07a 	srli	r3,r3,1
   25d84:	18000a26 	beq	r3,zero,25db0 <__lo0bits+0xa8>
   25d88:	29400044 	addi	r5,r5,1
   25d8c:	2805883a 	mov	r2,r5
   25d90:	20c00015 	stw	r3,0(r4)
   25d94:	f800283a 	ret
   25d98:	1806d43a 	srli	r3,r3,16
   25d9c:	01400404 	movi	r5,16
   25da0:	003fe906 	br	25d48 <__lo0bits+0x40>
   25da4:	000b883a 	mov	r5,zero
   25da8:	2805883a 	mov	r2,r5
   25dac:	f800283a 	ret
   25db0:	01400804 	movi	r5,32
   25db4:	2805883a 	mov	r2,r5
   25db8:	f800283a 	ret
   25dbc:	1804d07a 	srli	r2,r3,1
   25dc0:	01400044 	movi	r5,1
   25dc4:	20800015 	stw	r2,0(r4)
   25dc8:	003fda06 	br	25d34 <__lo0bits+0x2c>

00025dcc <__mcmp>:
   25dcc:	20800417 	ldw	r2,16(r4)
   25dd0:	28c00417 	ldw	r3,16(r5)
   25dd4:	10cfc83a 	sub	r7,r2,r3
   25dd8:	38000c1e 	bne	r7,zero,25e0c <__mcmp+0x40>
   25ddc:	18c5883a 	add	r2,r3,r3
   25de0:	1085883a 	add	r2,r2,r2
   25de4:	10c00504 	addi	r3,r2,20
   25de8:	21000504 	addi	r4,r4,20
   25dec:	28cb883a 	add	r5,r5,r3
   25df0:	2085883a 	add	r2,r4,r2
   25df4:	10bfff04 	addi	r2,r2,-4
   25df8:	297fff04 	addi	r5,r5,-4
   25dfc:	11800017 	ldw	r6,0(r2)
   25e00:	28c00017 	ldw	r3,0(r5)
   25e04:	30c0031e 	bne	r6,r3,25e14 <__mcmp+0x48>
   25e08:	20bffa36 	bltu	r4,r2,25df4 <__mcmp+0x28>
   25e0c:	3805883a 	mov	r2,r7
   25e10:	f800283a 	ret
   25e14:	30c00336 	bltu	r6,r3,25e24 <__mcmp+0x58>
   25e18:	01c00044 	movi	r7,1
   25e1c:	3805883a 	mov	r2,r7
   25e20:	f800283a 	ret
   25e24:	01ffffc4 	movi	r7,-1
   25e28:	003ff806 	br	25e0c <__mcmp+0x40>

00025e2c <__ulp>:
   25e2c:	295ffc2c 	andhi	r5,r5,32752
   25e30:	013f3034 	movhi	r4,64704
   25e34:	290b883a 	add	r5,r5,r4
   25e38:	0145c83a 	sub	r2,zero,r5
   25e3c:	1007d53a 	srai	r3,r2,20
   25e40:	000d883a 	mov	r6,zero
   25e44:	0140040e 	bge	zero,r5,25e58 <__ulp+0x2c>
   25e48:	280f883a 	mov	r7,r5
   25e4c:	3807883a 	mov	r3,r7
   25e50:	3005883a 	mov	r2,r6
   25e54:	f800283a 	ret
   25e58:	008004c4 	movi	r2,19
   25e5c:	193ffb04 	addi	r4,r3,-20
   25e60:	10c00c0e 	bge	r2,r3,25e94 <__ulp+0x68>
   25e64:	008007c4 	movi	r2,31
   25e68:	1107c83a 	sub	r3,r2,r4
   25e6c:	00800784 	movi	r2,30
   25e70:	01400044 	movi	r5,1
   25e74:	11000216 	blt	r2,r4,25e80 <__ulp+0x54>
   25e78:	00800044 	movi	r2,1
   25e7c:	10ca983a 	sll	r5,r2,r3
   25e80:	000f883a 	mov	r7,zero
   25e84:	280d883a 	mov	r6,r5
   25e88:	3807883a 	mov	r3,r7
   25e8c:	3005883a 	mov	r2,r6
   25e90:	f800283a 	ret
   25e94:	00800234 	movhi	r2,8
   25e98:	10cfd83a 	sra	r7,r2,r3
   25e9c:	000d883a 	mov	r6,zero
   25ea0:	3005883a 	mov	r2,r6
   25ea4:	3807883a 	mov	r3,r7
   25ea8:	f800283a 	ret

00025eac <__b2d>:
   25eac:	20800417 	ldw	r2,16(r4)
   25eb0:	defff904 	addi	sp,sp,-28
   25eb4:	dd000415 	stw	r20,16(sp)
   25eb8:	1085883a 	add	r2,r2,r2
   25ebc:	25000504 	addi	r20,r4,20
   25ec0:	1085883a 	add	r2,r2,r2
   25ec4:	dc000015 	stw	r16,0(sp)
   25ec8:	a0a1883a 	add	r16,r20,r2
   25ecc:	dd400515 	stw	r21,20(sp)
   25ed0:	857fff17 	ldw	r21,-4(r16)
   25ed4:	dc400115 	stw	r17,4(sp)
   25ed8:	dfc00615 	stw	ra,24(sp)
   25edc:	a809883a 	mov	r4,r21
   25ee0:	2823883a 	mov	r17,r5
   25ee4:	dcc00315 	stw	r19,12(sp)
   25ee8:	dc800215 	stw	r18,8(sp)
   25eec:	0025c980 	call	25c98 <__hi0bits>
   25ef0:	100b883a 	mov	r5,r2
   25ef4:	00800804 	movi	r2,32
   25ef8:	1145c83a 	sub	r2,r2,r5
   25efc:	88800015 	stw	r2,0(r17)
   25f00:	00800284 	movi	r2,10
   25f04:	80ffff04 	addi	r3,r16,-4
   25f08:	11401416 	blt	r2,r5,25f5c <__b2d+0xb0>
   25f0c:	008002c4 	movi	r2,11
   25f10:	1149c83a 	sub	r4,r2,r5
   25f14:	a0c02736 	bltu	r20,r3,25fb4 <__b2d+0x108>
   25f18:	000d883a 	mov	r6,zero
   25f1c:	28800544 	addi	r2,r5,21
   25f20:	a906d83a 	srl	r3,r21,r4
   25f24:	a884983a 	sll	r2,r21,r2
   25f28:	1ccffc34 	orhi	r19,r3,16368
   25f2c:	11a4b03a 	or	r18,r2,r6
   25f30:	9005883a 	mov	r2,r18
   25f34:	9807883a 	mov	r3,r19
   25f38:	dfc00617 	ldw	ra,24(sp)
   25f3c:	dd400517 	ldw	r21,20(sp)
   25f40:	dd000417 	ldw	r20,16(sp)
   25f44:	dcc00317 	ldw	r19,12(sp)
   25f48:	dc800217 	ldw	r18,8(sp)
   25f4c:	dc400117 	ldw	r17,4(sp)
   25f50:	dc000017 	ldw	r16,0(sp)
   25f54:	dec00704 	addi	sp,sp,28
   25f58:	f800283a 	ret
   25f5c:	a0c00e36 	bltu	r20,r3,25f98 <__b2d+0xec>
   25f60:	293ffd44 	addi	r4,r5,-11
   25f64:	000d883a 	mov	r6,zero
   25f68:	20000f26 	beq	r4,zero,25fa8 <__b2d+0xfc>
   25f6c:	00800804 	movi	r2,32
   25f70:	110bc83a 	sub	r5,r2,r4
   25f74:	a0c01236 	bltu	r20,r3,25fc0 <__b2d+0x114>
   25f78:	000f883a 	mov	r7,zero
   25f7c:	a904983a 	sll	r2,r21,r4
   25f80:	3146d83a 	srl	r3,r6,r5
   25f84:	3108983a 	sll	r4,r6,r4
   25f88:	108ffc34 	orhi	r2,r2,16368
   25f8c:	18a6b03a 	or	r19,r3,r2
   25f90:	3924b03a 	or	r18,r7,r4
   25f94:	003fe606 	br	25f30 <__b2d+0x84>
   25f98:	293ffd44 	addi	r4,r5,-11
   25f9c:	81bffe17 	ldw	r6,-8(r16)
   25fa0:	80fffe04 	addi	r3,r16,-8
   25fa4:	203ff11e 	bne	r4,zero,25f6c <__b2d+0xc0>
   25fa8:	accffc34 	orhi	r19,r21,16368
   25fac:	3025883a 	mov	r18,r6
   25fb0:	003fdf06 	br	25f30 <__b2d+0x84>
   25fb4:	18bfff17 	ldw	r2,-4(r3)
   25fb8:	110cd83a 	srl	r6,r2,r4
   25fbc:	003fd706 	br	25f1c <__b2d+0x70>
   25fc0:	18bfff17 	ldw	r2,-4(r3)
   25fc4:	114ed83a 	srl	r7,r2,r5
   25fc8:	003fec06 	br	25f7c <__b2d+0xd0>

00025fcc <__ratio>:
   25fcc:	defff904 	addi	sp,sp,-28
   25fd0:	dc400215 	stw	r17,8(sp)
   25fd4:	2823883a 	mov	r17,r5
   25fd8:	d80b883a 	mov	r5,sp
   25fdc:	dfc00615 	stw	ra,24(sp)
   25fe0:	dd000515 	stw	r20,20(sp)
   25fe4:	dcc00415 	stw	r19,16(sp)
   25fe8:	dc800315 	stw	r18,12(sp)
   25fec:	2025883a 	mov	r18,r4
   25ff0:	0025eac0 	call	25eac <__b2d>
   25ff4:	8809883a 	mov	r4,r17
   25ff8:	d9400104 	addi	r5,sp,4
   25ffc:	1027883a 	mov	r19,r2
   26000:	1829883a 	mov	r20,r3
   26004:	0025eac0 	call	25eac <__b2d>
   26008:	89000417 	ldw	r4,16(r17)
   2600c:	91c00417 	ldw	r7,16(r18)
   26010:	d9800117 	ldw	r6,4(sp)
   26014:	180b883a 	mov	r5,r3
   26018:	390fc83a 	sub	r7,r7,r4
   2601c:	1009883a 	mov	r4,r2
   26020:	d8800017 	ldw	r2,0(sp)
   26024:	380e917a 	slli	r7,r7,5
   26028:	2011883a 	mov	r8,r4
   2602c:	1185c83a 	sub	r2,r2,r6
   26030:	11c5883a 	add	r2,r2,r7
   26034:	1006953a 	slli	r3,r2,20
   26038:	2813883a 	mov	r9,r5
   2603c:	00800d0e 	bge	zero,r2,26074 <__ratio+0xa8>
   26040:	1d29883a 	add	r20,r3,r20
   26044:	a00b883a 	mov	r5,r20
   26048:	480f883a 	mov	r7,r9
   2604c:	9809883a 	mov	r4,r19
   26050:	400d883a 	mov	r6,r8
   26054:	00290140 	call	29014 <__divdf3>
   26058:	dfc00617 	ldw	ra,24(sp)
   2605c:	dd000517 	ldw	r20,20(sp)
   26060:	dcc00417 	ldw	r19,16(sp)
   26064:	dc800317 	ldw	r18,12(sp)
   26068:	dc400217 	ldw	r17,8(sp)
   2606c:	dec00704 	addi	sp,sp,28
   26070:	f800283a 	ret
   26074:	28d3c83a 	sub	r9,r5,r3
   26078:	003ff206 	br	26044 <__ratio+0x78>

0002607c <_mprec_log10>:
   2607c:	defffe04 	addi	sp,sp,-8
   26080:	008005c4 	movi	r2,23
   26084:	dc000015 	stw	r16,0(sp)
   26088:	dfc00115 	stw	ra,4(sp)
   2608c:	2021883a 	mov	r16,r4
   26090:	11000c16 	blt	r2,r4,260c4 <_mprec_log10+0x48>
   26094:	200490fa 	slli	r2,r4,3
   26098:	00c000f4 	movhi	r3,3
   2609c:	18f35704 	addi	r3,r3,-12964
   260a0:	10c5883a 	add	r2,r2,r3
   260a4:	12400117 	ldw	r9,4(r2)
   260a8:	12000017 	ldw	r8,0(r2)
   260ac:	4807883a 	mov	r3,r9
   260b0:	4005883a 	mov	r2,r8
   260b4:	dfc00117 	ldw	ra,4(sp)
   260b8:	dc000017 	ldw	r16,0(sp)
   260bc:	dec00204 	addi	sp,sp,8
   260c0:	f800283a 	ret
   260c4:	0011883a 	mov	r8,zero
   260c8:	024ffc34 	movhi	r9,16368
   260cc:	0005883a 	mov	r2,zero
   260d0:	00d00934 	movhi	r3,16420
   260d4:	480b883a 	mov	r5,r9
   260d8:	4009883a 	mov	r4,r8
   260dc:	180f883a 	mov	r7,r3
   260e0:	100d883a 	mov	r6,r2
   260e4:	0028c500 	call	28c50 <__muldf3>
   260e8:	843fffc4 	addi	r16,r16,-1
   260ec:	1011883a 	mov	r8,r2
   260f0:	1813883a 	mov	r9,r3
   260f4:	803ff51e 	bne	r16,zero,260cc <_mprec_log10+0x50>
   260f8:	4005883a 	mov	r2,r8
   260fc:	4807883a 	mov	r3,r9
   26100:	dfc00117 	ldw	ra,4(sp)
   26104:	dc000017 	ldw	r16,0(sp)
   26108:	dec00204 	addi	sp,sp,8
   2610c:	f800283a 	ret

00026110 <__copybits>:
   26110:	297fffc4 	addi	r5,r5,-1
   26114:	30800417 	ldw	r2,16(r6)
   26118:	280bd17a 	srai	r5,r5,5
   2611c:	31800504 	addi	r6,r6,20
   26120:	1085883a 	add	r2,r2,r2
   26124:	294b883a 	add	r5,r5,r5
   26128:	294b883a 	add	r5,r5,r5
   2612c:	1085883a 	add	r2,r2,r2
   26130:	290b883a 	add	r5,r5,r4
   26134:	3087883a 	add	r3,r6,r2
   26138:	29400104 	addi	r5,r5,4
   2613c:	30c0052e 	bgeu	r6,r3,26154 <__copybits+0x44>
   26140:	30800017 	ldw	r2,0(r6)
   26144:	31800104 	addi	r6,r6,4
   26148:	20800015 	stw	r2,0(r4)
   2614c:	21000104 	addi	r4,r4,4
   26150:	30fffb36 	bltu	r6,r3,26140 <__copybits+0x30>
   26154:	2140032e 	bgeu	r4,r5,26164 <__copybits+0x54>
   26158:	20000015 	stw	zero,0(r4)
   2615c:	21000104 	addi	r4,r4,4
   26160:	217ffd36 	bltu	r4,r5,26158 <__copybits+0x48>
   26164:	f800283a 	ret

00026168 <__any_on>:
   26168:	20800417 	ldw	r2,16(r4)
   2616c:	2807d17a 	srai	r3,r5,5
   26170:	21000504 	addi	r4,r4,20
   26174:	10c00d0e 	bge	r2,r3,261ac <__any_on+0x44>
   26178:	1085883a 	add	r2,r2,r2
   2617c:	1085883a 	add	r2,r2,r2
   26180:	208d883a 	add	r6,r4,r2
   26184:	2180182e 	bgeu	r4,r6,261e8 <__any_on+0x80>
   26188:	30bfff17 	ldw	r2,-4(r6)
   2618c:	30ffff04 	addi	r3,r6,-4
   26190:	1000041e 	bne	r2,zero,261a4 <__any_on+0x3c>
   26194:	20c0142e 	bgeu	r4,r3,261e8 <__any_on+0x80>
   26198:	18ffff04 	addi	r3,r3,-4
   2619c:	18800017 	ldw	r2,0(r3)
   261a0:	103ffc26 	beq	r2,zero,26194 <__any_on+0x2c>
   261a4:	00800044 	movi	r2,1
   261a8:	f800283a 	ret
   261ac:	18800a0e 	bge	r3,r2,261d8 <__any_on+0x70>
   261b0:	294007cc 	andi	r5,r5,31
   261b4:	28000826 	beq	r5,zero,261d8 <__any_on+0x70>
   261b8:	18c5883a 	add	r2,r3,r3
   261bc:	1085883a 	add	r2,r2,r2
   261c0:	208d883a 	add	r6,r4,r2
   261c4:	30c00017 	ldw	r3,0(r6)
   261c8:	1944d83a 	srl	r2,r3,r5
   261cc:	1144983a 	sll	r2,r2,r5
   261d0:	18bff41e 	bne	r3,r2,261a4 <__any_on+0x3c>
   261d4:	003feb06 	br	26184 <__any_on+0x1c>
   261d8:	18c5883a 	add	r2,r3,r3
   261dc:	1085883a 	add	r2,r2,r2
   261e0:	208d883a 	add	r6,r4,r2
   261e4:	003fe706 	br	26184 <__any_on+0x1c>
   261e8:	0005883a 	mov	r2,zero
   261ec:	f800283a 	ret

000261f0 <_Balloc>:
   261f0:	20c01317 	ldw	r3,76(r4)
   261f4:	defffb04 	addi	sp,sp,-20
   261f8:	dcc00315 	stw	r19,12(sp)
   261fc:	dc800215 	stw	r18,8(sp)
   26200:	dfc00415 	stw	ra,16(sp)
   26204:	2825883a 	mov	r18,r5
   26208:	dc400115 	stw	r17,4(sp)
   2620c:	dc000015 	stw	r16,0(sp)
   26210:	2027883a 	mov	r19,r4
   26214:	01800404 	movi	r6,16
   26218:	01400104 	movi	r5,4
   2621c:	18001726 	beq	r3,zero,2627c <_Balloc+0x8c>
   26220:	01400044 	movi	r5,1
   26224:	9485883a 	add	r2,r18,r18
   26228:	2ca2983a 	sll	r17,r5,r18
   2622c:	1085883a 	add	r2,r2,r2
   26230:	10c7883a 	add	r3,r2,r3
   26234:	1c000017 	ldw	r16,0(r3)
   26238:	8c4d883a 	add	r6,r17,r17
   2623c:	318d883a 	add	r6,r6,r6
   26240:	9809883a 	mov	r4,r19
   26244:	31800504 	addi	r6,r6,20
   26248:	80001226 	beq	r16,zero,26294 <_Balloc+0xa4>
   2624c:	80800017 	ldw	r2,0(r16)
   26250:	18800015 	stw	r2,0(r3)
   26254:	80000415 	stw	zero,16(r16)
   26258:	80000315 	stw	zero,12(r16)
   2625c:	8005883a 	mov	r2,r16
   26260:	dfc00417 	ldw	ra,16(sp)
   26264:	dcc00317 	ldw	r19,12(sp)
   26268:	dc800217 	ldw	r18,8(sp)
   2626c:	dc400117 	ldw	r17,4(sp)
   26270:	dc000017 	ldw	r16,0(sp)
   26274:	dec00504 	addi	sp,sp,20
   26278:	f800283a 	ret
   2627c:	00276500 	call	27650 <_calloc_r>
   26280:	1007883a 	mov	r3,r2
   26284:	0021883a 	mov	r16,zero
   26288:	98801315 	stw	r2,76(r19)
   2628c:	103fe41e 	bne	r2,zero,26220 <_Balloc+0x30>
   26290:	003ff206 	br	2625c <_Balloc+0x6c>
   26294:	00276500 	call	27650 <_calloc_r>
   26298:	103ff026 	beq	r2,zero,2625c <_Balloc+0x6c>
   2629c:	1021883a 	mov	r16,r2
   262a0:	14800115 	stw	r18,4(r2)
   262a4:	14400215 	stw	r17,8(r2)
   262a8:	003fea06 	br	26254 <_Balloc+0x64>

000262ac <__d2b>:
   262ac:	defff504 	addi	sp,sp,-44
   262b0:	dcc00515 	stw	r19,20(sp)
   262b4:	04c00044 	movi	r19,1
   262b8:	dc000215 	stw	r16,8(sp)
   262bc:	2821883a 	mov	r16,r5
   262c0:	980b883a 	mov	r5,r19
   262c4:	ddc00915 	stw	r23,36(sp)
   262c8:	dd800815 	stw	r22,32(sp)
   262cc:	dd400715 	stw	r21,28(sp)
   262d0:	dd000615 	stw	r20,24(sp)
   262d4:	dc800415 	stw	r18,16(sp)
   262d8:	dc400315 	stw	r17,12(sp)
   262dc:	dfc00a15 	stw	ra,40(sp)
   262e0:	3023883a 	mov	r17,r6
   262e4:	382d883a 	mov	r22,r7
   262e8:	ddc00b17 	ldw	r23,44(sp)
   262ec:	00261f00 	call	261f0 <_Balloc>
   262f0:	1025883a 	mov	r18,r2
   262f4:	00a00034 	movhi	r2,32768
   262f8:	10bfffc4 	addi	r2,r2,-1
   262fc:	8888703a 	and	r4,r17,r2
   26300:	202ad53a 	srli	r21,r4,20
   26304:	00800434 	movhi	r2,16
   26308:	10bfffc4 	addi	r2,r2,-1
   2630c:	8886703a 	and	r3,r17,r2
   26310:	a829003a 	cmpeq	r20,r21,zero
   26314:	800b883a 	mov	r5,r16
   26318:	d8c00115 	stw	r3,4(sp)
   2631c:	94000504 	addi	r16,r18,20
   26320:	a000021e 	bne	r20,zero,2632c <__d2b+0x80>
   26324:	18c00434 	orhi	r3,r3,16
   26328:	d8c00115 	stw	r3,4(sp)
   2632c:	28002726 	beq	r5,zero,263cc <__d2b+0x120>
   26330:	d809883a 	mov	r4,sp
   26334:	d9400015 	stw	r5,0(sp)
   26338:	0025d080 	call	25d08 <__lo0bits>
   2633c:	100d883a 	mov	r6,r2
   26340:	10003526 	beq	r2,zero,26418 <__d2b+0x16c>
   26344:	d8c00117 	ldw	r3,4(sp)
   26348:	00800804 	movi	r2,32
   2634c:	1185c83a 	sub	r2,r2,r6
   26350:	d9000017 	ldw	r4,0(sp)
   26354:	1886983a 	sll	r3,r3,r2
   26358:	1906b03a 	or	r3,r3,r4
   2635c:	90c00515 	stw	r3,20(r18)
   26360:	d8c00117 	ldw	r3,4(sp)
   26364:	1986d83a 	srl	r3,r3,r6
   26368:	d8c00115 	stw	r3,4(sp)
   2636c:	180b003a 	cmpeq	r5,r3,zero
   26370:	00800084 	movi	r2,2
   26374:	114bc83a 	sub	r5,r2,r5
   26378:	80c00115 	stw	r3,4(r16)
   2637c:	91400415 	stw	r5,16(r18)
   26380:	a0001a1e 	bne	r20,zero,263ec <__d2b+0x140>
   26384:	3545883a 	add	r2,r6,r21
   26388:	10bef344 	addi	r2,r2,-1075
   2638c:	00c00d44 	movi	r3,53
   26390:	b0800015 	stw	r2,0(r22)
   26394:	1987c83a 	sub	r3,r3,r6
   26398:	b8c00015 	stw	r3,0(r23)
   2639c:	9005883a 	mov	r2,r18
   263a0:	dfc00a17 	ldw	ra,40(sp)
   263a4:	ddc00917 	ldw	r23,36(sp)
   263a8:	dd800817 	ldw	r22,32(sp)
   263ac:	dd400717 	ldw	r21,28(sp)
   263b0:	dd000617 	ldw	r20,24(sp)
   263b4:	dcc00517 	ldw	r19,20(sp)
   263b8:	dc800417 	ldw	r18,16(sp)
   263bc:	dc400317 	ldw	r17,12(sp)
   263c0:	dc000217 	ldw	r16,8(sp)
   263c4:	dec00b04 	addi	sp,sp,44
   263c8:	f800283a 	ret
   263cc:	d9000104 	addi	r4,sp,4
   263d0:	0025d080 	call	25d08 <__lo0bits>
   263d4:	11800804 	addi	r6,r2,32
   263d8:	d8800117 	ldw	r2,4(sp)
   263dc:	94c00415 	stw	r19,16(r18)
   263e0:	980b883a 	mov	r5,r19
   263e4:	90800515 	stw	r2,20(r18)
   263e8:	a03fe626 	beq	r20,zero,26384 <__d2b+0xd8>
   263ec:	2945883a 	add	r2,r5,r5
   263f0:	1085883a 	add	r2,r2,r2
   263f4:	1405883a 	add	r2,r2,r16
   263f8:	113fff17 	ldw	r4,-4(r2)
   263fc:	30fef384 	addi	r3,r6,-1074
   26400:	2820917a 	slli	r16,r5,5
   26404:	b0c00015 	stw	r3,0(r22)
   26408:	0025c980 	call	25c98 <__hi0bits>
   2640c:	80a1c83a 	sub	r16,r16,r2
   26410:	bc000015 	stw	r16,0(r23)
   26414:	003fe106 	br	2639c <__d2b+0xf0>
   26418:	d8800017 	ldw	r2,0(sp)
   2641c:	90800515 	stw	r2,20(r18)
   26420:	d8c00117 	ldw	r3,4(sp)
   26424:	003fd106 	br	2636c <__d2b+0xc0>

00026428 <__mdiff>:
   26428:	defffb04 	addi	sp,sp,-20
   2642c:	dc000015 	stw	r16,0(sp)
   26430:	2821883a 	mov	r16,r5
   26434:	dc800215 	stw	r18,8(sp)
   26438:	300b883a 	mov	r5,r6
   2643c:	2025883a 	mov	r18,r4
   26440:	8009883a 	mov	r4,r16
   26444:	dc400115 	stw	r17,4(sp)
   26448:	dfc00415 	stw	ra,16(sp)
   2644c:	dcc00315 	stw	r19,12(sp)
   26450:	3023883a 	mov	r17,r6
   26454:	0025dcc0 	call	25dcc <__mcmp>
   26458:	10004226 	beq	r2,zero,26564 <__mdiff+0x13c>
   2645c:	10005016 	blt	r2,zero,265a0 <__mdiff+0x178>
   26460:	0027883a 	mov	r19,zero
   26464:	81400117 	ldw	r5,4(r16)
   26468:	9009883a 	mov	r4,r18
   2646c:	00261f00 	call	261f0 <_Balloc>
   26470:	1019883a 	mov	r12,r2
   26474:	82800417 	ldw	r10,16(r16)
   26478:	88800417 	ldw	r2,16(r17)
   2647c:	81800504 	addi	r6,r16,20
   26480:	5287883a 	add	r3,r10,r10
   26484:	1085883a 	add	r2,r2,r2
   26488:	18c7883a 	add	r3,r3,r3
   2648c:	1085883a 	add	r2,r2,r2
   26490:	8a000504 	addi	r8,r17,20
   26494:	64c00315 	stw	r19,12(r12)
   26498:	30db883a 	add	r13,r6,r3
   2649c:	4097883a 	add	r11,r8,r2
   264a0:	61c00504 	addi	r7,r12,20
   264a4:	0013883a 	mov	r9,zero
   264a8:	31000017 	ldw	r4,0(r6)
   264ac:	41400017 	ldw	r5,0(r8)
   264b0:	42000104 	addi	r8,r8,4
   264b4:	20bfffcc 	andi	r2,r4,65535
   264b8:	28ffffcc 	andi	r3,r5,65535
   264bc:	10c5c83a 	sub	r2,r2,r3
   264c0:	1245883a 	add	r2,r2,r9
   264c4:	2008d43a 	srli	r4,r4,16
   264c8:	280ad43a 	srli	r5,r5,16
   264cc:	1007d43a 	srai	r3,r2,16
   264d0:	3880000d 	sth	r2,0(r7)
   264d4:	2149c83a 	sub	r4,r4,r5
   264d8:	20c9883a 	add	r4,r4,r3
   264dc:	3900008d 	sth	r4,2(r7)
   264e0:	31800104 	addi	r6,r6,4
   264e4:	39c00104 	addi	r7,r7,4
   264e8:	2013d43a 	srai	r9,r4,16
   264ec:	42ffee36 	bltu	r8,r11,264a8 <__mdiff+0x80>
   264f0:	33400c2e 	bgeu	r6,r13,26524 <__mdiff+0xfc>
   264f4:	30800017 	ldw	r2,0(r6)
   264f8:	31800104 	addi	r6,r6,4
   264fc:	10ffffcc 	andi	r3,r2,65535
   26500:	1a47883a 	add	r3,r3,r9
   26504:	1004d43a 	srli	r2,r2,16
   26508:	1809d43a 	srai	r4,r3,16
   2650c:	38c0000d 	sth	r3,0(r7)
   26510:	1105883a 	add	r2,r2,r4
   26514:	3880008d 	sth	r2,2(r7)
   26518:	1013d43a 	srai	r9,r2,16
   2651c:	39c00104 	addi	r7,r7,4
   26520:	337ff436 	bltu	r6,r13,264f4 <__mdiff+0xcc>
   26524:	38bfff17 	ldw	r2,-4(r7)
   26528:	38ffff04 	addi	r3,r7,-4
   2652c:	1000041e 	bne	r2,zero,26540 <__mdiff+0x118>
   26530:	18ffff04 	addi	r3,r3,-4
   26534:	18800017 	ldw	r2,0(r3)
   26538:	52bfffc4 	addi	r10,r10,-1
   2653c:	103ffc26 	beq	r2,zero,26530 <__mdiff+0x108>
   26540:	6005883a 	mov	r2,r12
   26544:	62800415 	stw	r10,16(r12)
   26548:	dfc00417 	ldw	ra,16(sp)
   2654c:	dcc00317 	ldw	r19,12(sp)
   26550:	dc800217 	ldw	r18,8(sp)
   26554:	dc400117 	ldw	r17,4(sp)
   26558:	dc000017 	ldw	r16,0(sp)
   2655c:	dec00504 	addi	sp,sp,20
   26560:	f800283a 	ret
   26564:	9009883a 	mov	r4,r18
   26568:	000b883a 	mov	r5,zero
   2656c:	00261f00 	call	261f0 <_Balloc>
   26570:	1019883a 	mov	r12,r2
   26574:	00800044 	movi	r2,1
   26578:	60800415 	stw	r2,16(r12)
   2657c:	6005883a 	mov	r2,r12
   26580:	60000515 	stw	zero,20(r12)
   26584:	dfc00417 	ldw	ra,16(sp)
   26588:	dcc00317 	ldw	r19,12(sp)
   2658c:	dc800217 	ldw	r18,8(sp)
   26590:	dc400117 	ldw	r17,4(sp)
   26594:	dc000017 	ldw	r16,0(sp)
   26598:	dec00504 	addi	sp,sp,20
   2659c:	f800283a 	ret
   265a0:	880d883a 	mov	r6,r17
   265a4:	04c00044 	movi	r19,1
   265a8:	8023883a 	mov	r17,r16
   265ac:	3021883a 	mov	r16,r6
   265b0:	003fac06 	br	26464 <__mdiff+0x3c>

000265b4 <__lshift>:
   265b4:	defff904 	addi	sp,sp,-28
   265b8:	28800417 	ldw	r2,16(r5)
   265bc:	dc000015 	stw	r16,0(sp)
   265c0:	3021d17a 	srai	r16,r6,5
   265c4:	28c00217 	ldw	r3,8(r5)
   265c8:	10800044 	addi	r2,r2,1
   265cc:	dc400115 	stw	r17,4(sp)
   265d0:	80a3883a 	add	r17,r16,r2
   265d4:	dd400515 	stw	r21,20(sp)
   265d8:	dd000415 	stw	r20,16(sp)
   265dc:	dc800215 	stw	r18,8(sp)
   265e0:	dfc00615 	stw	ra,24(sp)
   265e4:	2825883a 	mov	r18,r5
   265e8:	dcc00315 	stw	r19,12(sp)
   265ec:	3029883a 	mov	r20,r6
   265f0:	202b883a 	mov	r21,r4
   265f4:	29400117 	ldw	r5,4(r5)
   265f8:	1c40030e 	bge	r3,r17,26608 <__lshift+0x54>
   265fc:	18c7883a 	add	r3,r3,r3
   26600:	29400044 	addi	r5,r5,1
   26604:	1c7ffd16 	blt	r3,r17,265fc <__lshift+0x48>
   26608:	a809883a 	mov	r4,r21
   2660c:	00261f00 	call	261f0 <_Balloc>
   26610:	1027883a 	mov	r19,r2
   26614:	11400504 	addi	r5,r2,20
   26618:	0400090e 	bge	zero,r16,26640 <__lshift+0x8c>
   2661c:	2805883a 	mov	r2,r5
   26620:	0007883a 	mov	r3,zero
   26624:	18c00044 	addi	r3,r3,1
   26628:	10000015 	stw	zero,0(r2)
   2662c:	10800104 	addi	r2,r2,4
   26630:	80fffc1e 	bne	r16,r3,26624 <__lshift+0x70>
   26634:	8405883a 	add	r2,r16,r16
   26638:	1085883a 	add	r2,r2,r2
   2663c:	288b883a 	add	r5,r5,r2
   26640:	90800417 	ldw	r2,16(r18)
   26644:	91000504 	addi	r4,r18,20
   26648:	a18007cc 	andi	r6,r20,31
   2664c:	1085883a 	add	r2,r2,r2
   26650:	1085883a 	add	r2,r2,r2
   26654:	208f883a 	add	r7,r4,r2
   26658:	30001e26 	beq	r6,zero,266d4 <__lshift+0x120>
   2665c:	00800804 	movi	r2,32
   26660:	1191c83a 	sub	r8,r2,r6
   26664:	0007883a 	mov	r3,zero
   26668:	20800017 	ldw	r2,0(r4)
   2666c:	1184983a 	sll	r2,r2,r6
   26670:	1884b03a 	or	r2,r3,r2
   26674:	28800015 	stw	r2,0(r5)
   26678:	20c00017 	ldw	r3,0(r4)
   2667c:	21000104 	addi	r4,r4,4
   26680:	29400104 	addi	r5,r5,4
   26684:	1a06d83a 	srl	r3,r3,r8
   26688:	21fff736 	bltu	r4,r7,26668 <__lshift+0xb4>
   2668c:	28c00015 	stw	r3,0(r5)
   26690:	18000126 	beq	r3,zero,26698 <__lshift+0xe4>
   26694:	8c400044 	addi	r17,r17,1
   26698:	88bfffc4 	addi	r2,r17,-1
   2669c:	98800415 	stw	r2,16(r19)
   266a0:	a809883a 	mov	r4,r21
   266a4:	900b883a 	mov	r5,r18
   266a8:	0025c700 	call	25c70 <_Bfree>
   266ac:	9805883a 	mov	r2,r19
   266b0:	dfc00617 	ldw	ra,24(sp)
   266b4:	dd400517 	ldw	r21,20(sp)
   266b8:	dd000417 	ldw	r20,16(sp)
   266bc:	dcc00317 	ldw	r19,12(sp)
   266c0:	dc800217 	ldw	r18,8(sp)
   266c4:	dc400117 	ldw	r17,4(sp)
   266c8:	dc000017 	ldw	r16,0(sp)
   266cc:	dec00704 	addi	sp,sp,28
   266d0:	f800283a 	ret
   266d4:	20800017 	ldw	r2,0(r4)
   266d8:	21000104 	addi	r4,r4,4
   266dc:	28800015 	stw	r2,0(r5)
   266e0:	29400104 	addi	r5,r5,4
   266e4:	21ffec2e 	bgeu	r4,r7,26698 <__lshift+0xe4>
   266e8:	20800017 	ldw	r2,0(r4)
   266ec:	21000104 	addi	r4,r4,4
   266f0:	28800015 	stw	r2,0(r5)
   266f4:	29400104 	addi	r5,r5,4
   266f8:	21fff636 	bltu	r4,r7,266d4 <__lshift+0x120>
   266fc:	003fe606 	br	26698 <__lshift+0xe4>

00026700 <__multiply>:
   26700:	defff004 	addi	sp,sp,-64
   26704:	dc800815 	stw	r18,32(sp)
   26708:	dc400715 	stw	r17,28(sp)
   2670c:	2c800417 	ldw	r18,16(r5)
   26710:	34400417 	ldw	r17,16(r6)
   26714:	dcc00915 	stw	r19,36(sp)
   26718:	dc000615 	stw	r16,24(sp)
   2671c:	dfc00f15 	stw	ra,60(sp)
   26720:	df000e15 	stw	fp,56(sp)
   26724:	ddc00d15 	stw	r23,52(sp)
   26728:	dd800c15 	stw	r22,48(sp)
   2672c:	dd400b15 	stw	r21,44(sp)
   26730:	dd000a15 	stw	r20,40(sp)
   26734:	2821883a 	mov	r16,r5
   26738:	3027883a 	mov	r19,r6
   2673c:	9440040e 	bge	r18,r17,26750 <__multiply+0x50>
   26740:	8825883a 	mov	r18,r17
   26744:	2c400417 	ldw	r17,16(r5)
   26748:	2827883a 	mov	r19,r5
   2674c:	3021883a 	mov	r16,r6
   26750:	80800217 	ldw	r2,8(r16)
   26754:	9447883a 	add	r3,r18,r17
   26758:	d8c00415 	stw	r3,16(sp)
   2675c:	81400117 	ldw	r5,4(r16)
   26760:	10c0010e 	bge	r2,r3,26768 <__multiply+0x68>
   26764:	29400044 	addi	r5,r5,1
   26768:	00261f00 	call	261f0 <_Balloc>
   2676c:	d8800515 	stw	r2,20(sp)
   26770:	d9000417 	ldw	r4,16(sp)
   26774:	d8c00517 	ldw	r3,20(sp)
   26778:	2105883a 	add	r2,r4,r4
   2677c:	1085883a 	add	r2,r2,r2
   26780:	19000504 	addi	r4,r3,20
   26784:	2085883a 	add	r2,r4,r2
   26788:	d8800315 	stw	r2,12(sp)
   2678c:	2080052e 	bgeu	r4,r2,267a4 <__multiply+0xa4>
   26790:	2005883a 	mov	r2,r4
   26794:	d8c00317 	ldw	r3,12(sp)
   26798:	10000015 	stw	zero,0(r2)
   2679c:	10800104 	addi	r2,r2,4
   267a0:	10fffc36 	bltu	r2,r3,26794 <__multiply+0x94>
   267a4:	8c45883a 	add	r2,r17,r17
   267a8:	9487883a 	add	r3,r18,r18
   267ac:	9dc00504 	addi	r23,r19,20
   267b0:	1085883a 	add	r2,r2,r2
   267b4:	84000504 	addi	r16,r16,20
   267b8:	18c7883a 	add	r3,r3,r3
   267bc:	b885883a 	add	r2,r23,r2
   267c0:	dc000015 	stw	r16,0(sp)
   267c4:	d8800215 	stw	r2,8(sp)
   267c8:	80f9883a 	add	fp,r16,r3
   267cc:	b880432e 	bgeu	r23,r2,268dc <__multiply+0x1dc>
   267d0:	d9000115 	stw	r4,4(sp)
   267d4:	b9000017 	ldw	r4,0(r23)
   267d8:	253fffcc 	andi	r20,r4,65535
   267dc:	a0001a26 	beq	r20,zero,26848 <__multiply+0x148>
   267e0:	dcc00017 	ldw	r19,0(sp)
   267e4:	dc800117 	ldw	r18,4(sp)
   267e8:	002b883a 	mov	r21,zero
   267ec:	9c400017 	ldw	r17,0(r19)
   267f0:	94000017 	ldw	r16,0(r18)
   267f4:	a009883a 	mov	r4,r20
   267f8:	897fffcc 	andi	r5,r17,65535
   267fc:	00206100 	call	20610 <__mulsi3>
   26800:	880ad43a 	srli	r5,r17,16
   26804:	80ffffcc 	andi	r3,r16,65535
   26808:	a8c7883a 	add	r3,r21,r3
   2680c:	a009883a 	mov	r4,r20
   26810:	10e3883a 	add	r17,r2,r3
   26814:	8020d43a 	srli	r16,r16,16
   26818:	00206100 	call	20610 <__mulsi3>
   2681c:	8806d43a 	srli	r3,r17,16
   26820:	1405883a 	add	r2,r2,r16
   26824:	9cc00104 	addi	r19,r19,4
   26828:	1887883a 	add	r3,r3,r2
   2682c:	90c0008d 	sth	r3,2(r18)
   26830:	9440000d 	sth	r17,0(r18)
   26834:	182ad43a 	srli	r21,r3,16
   26838:	94800104 	addi	r18,r18,4
   2683c:	9f3feb36 	bltu	r19,fp,267ec <__multiply+0xec>
   26840:	95400015 	stw	r21,0(r18)
   26844:	b9000017 	ldw	r4,0(r23)
   26848:	202ad43a 	srli	r21,r4,16
   2684c:	a8001c26 	beq	r21,zero,268c0 <__multiply+0x1c0>
   26850:	d9000117 	ldw	r4,4(sp)
   26854:	dd000017 	ldw	r20,0(sp)
   26858:	002d883a 	mov	r22,zero
   2685c:	24c00017 	ldw	r19,0(r4)
   26860:	2025883a 	mov	r18,r4
   26864:	9823883a 	mov	r17,r19
   26868:	a4000017 	ldw	r16,0(r20)
   2686c:	a809883a 	mov	r4,r21
   26870:	a5000104 	addi	r20,r20,4
   26874:	817fffcc 	andi	r5,r16,65535
   26878:	00206100 	call	20610 <__mulsi3>
   2687c:	8806d43a 	srli	r3,r17,16
   26880:	800ad43a 	srli	r5,r16,16
   26884:	94c0000d 	sth	r19,0(r18)
   26888:	b0c7883a 	add	r3,r22,r3
   2688c:	10e1883a 	add	r16,r2,r3
   26890:	9400008d 	sth	r16,2(r18)
   26894:	a809883a 	mov	r4,r21
   26898:	94800104 	addi	r18,r18,4
   2689c:	00206100 	call	20610 <__mulsi3>
   268a0:	94400017 	ldw	r17,0(r18)
   268a4:	8020d43a 	srli	r16,r16,16
   268a8:	88ffffcc 	andi	r3,r17,65535
   268ac:	10c5883a 	add	r2,r2,r3
   268b0:	80a7883a 	add	r19,r16,r2
   268b4:	982cd43a 	srli	r22,r19,16
   268b8:	a73feb36 	bltu	r20,fp,26868 <__multiply+0x168>
   268bc:	94c00015 	stw	r19,0(r18)
   268c0:	d8800217 	ldw	r2,8(sp)
   268c4:	bdc00104 	addi	r23,r23,4
   268c8:	b880042e 	bgeu	r23,r2,268dc <__multiply+0x1dc>
   268cc:	d8c00117 	ldw	r3,4(sp)
   268d0:	18c00104 	addi	r3,r3,4
   268d4:	d8c00115 	stw	r3,4(sp)
   268d8:	003fbe06 	br	267d4 <__multiply+0xd4>
   268dc:	d9000417 	ldw	r4,16(sp)
   268e0:	01000c0e 	bge	zero,r4,26914 <__multiply+0x214>
   268e4:	d8c00317 	ldw	r3,12(sp)
   268e8:	18bfff17 	ldw	r2,-4(r3)
   268ec:	18ffff04 	addi	r3,r3,-4
   268f0:	10000326 	beq	r2,zero,26900 <__multiply+0x200>
   268f4:	00000706 	br	26914 <__multiply+0x214>
   268f8:	18800017 	ldw	r2,0(r3)
   268fc:	1000051e 	bne	r2,zero,26914 <__multiply+0x214>
   26900:	d9000417 	ldw	r4,16(sp)
   26904:	18ffff04 	addi	r3,r3,-4
   26908:	213fffc4 	addi	r4,r4,-1
   2690c:	d9000415 	stw	r4,16(sp)
   26910:	203ff91e 	bne	r4,zero,268f8 <__multiply+0x1f8>
   26914:	d8800417 	ldw	r2,16(sp)
   26918:	d8c00517 	ldw	r3,20(sp)
   2691c:	18800415 	stw	r2,16(r3)
   26920:	1805883a 	mov	r2,r3
   26924:	dfc00f17 	ldw	ra,60(sp)
   26928:	df000e17 	ldw	fp,56(sp)
   2692c:	ddc00d17 	ldw	r23,52(sp)
   26930:	dd800c17 	ldw	r22,48(sp)
   26934:	dd400b17 	ldw	r21,44(sp)
   26938:	dd000a17 	ldw	r20,40(sp)
   2693c:	dcc00917 	ldw	r19,36(sp)
   26940:	dc800817 	ldw	r18,32(sp)
   26944:	dc400717 	ldw	r17,28(sp)
   26948:	dc000617 	ldw	r16,24(sp)
   2694c:	dec01004 	addi	sp,sp,64
   26950:	f800283a 	ret

00026954 <__i2b>:
   26954:	defffd04 	addi	sp,sp,-12
   26958:	dc000015 	stw	r16,0(sp)
   2695c:	04000044 	movi	r16,1
   26960:	dc800115 	stw	r18,4(sp)
   26964:	2825883a 	mov	r18,r5
   26968:	800b883a 	mov	r5,r16
   2696c:	dfc00215 	stw	ra,8(sp)
   26970:	00261f00 	call	261f0 <_Balloc>
   26974:	14000415 	stw	r16,16(r2)
   26978:	14800515 	stw	r18,20(r2)
   2697c:	dfc00217 	ldw	ra,8(sp)
   26980:	dc800117 	ldw	r18,4(sp)
   26984:	dc000017 	ldw	r16,0(sp)
   26988:	dec00304 	addi	sp,sp,12
   2698c:	f800283a 	ret

00026990 <__multadd>:
   26990:	defff604 	addi	sp,sp,-40
   26994:	dd800615 	stw	r22,24(sp)
   26998:	2d800417 	ldw	r22,16(r5)
   2699c:	df000815 	stw	fp,32(sp)
   269a0:	ddc00715 	stw	r23,28(sp)
   269a4:	dd400515 	stw	r21,20(sp)
   269a8:	dd000415 	stw	r20,16(sp)
   269ac:	dcc00315 	stw	r19,12(sp)
   269b0:	dc800215 	stw	r18,8(sp)
   269b4:	dfc00915 	stw	ra,36(sp)
   269b8:	dc400115 	stw	r17,4(sp)
   269bc:	dc000015 	stw	r16,0(sp)
   269c0:	282f883a 	mov	r23,r5
   269c4:	2039883a 	mov	fp,r4
   269c8:	302b883a 	mov	r21,r6
   269cc:	3829883a 	mov	r20,r7
   269d0:	2c800504 	addi	r18,r5,20
   269d4:	0027883a 	mov	r19,zero
   269d8:	94400017 	ldw	r17,0(r18)
   269dc:	a80b883a 	mov	r5,r21
   269e0:	9cc00044 	addi	r19,r19,1
   269e4:	893fffcc 	andi	r4,r17,65535
   269e8:	00206100 	call	20610 <__mulsi3>
   269ec:	8808d43a 	srli	r4,r17,16
   269f0:	1521883a 	add	r16,r2,r20
   269f4:	a80b883a 	mov	r5,r21
   269f8:	00206100 	call	20610 <__mulsi3>
   269fc:	8008d43a 	srli	r4,r16,16
   26a00:	843fffcc 	andi	r16,r16,65535
   26a04:	1105883a 	add	r2,r2,r4
   26a08:	1006943a 	slli	r3,r2,16
   26a0c:	1028d43a 	srli	r20,r2,16
   26a10:	1c07883a 	add	r3,r3,r16
   26a14:	90c00015 	stw	r3,0(r18)
   26a18:	94800104 	addi	r18,r18,4
   26a1c:	9dbfee16 	blt	r19,r22,269d8 <__multadd+0x48>
   26a20:	a0000826 	beq	r20,zero,26a44 <__multadd+0xb4>
   26a24:	b8800217 	ldw	r2,8(r23)
   26a28:	b080130e 	bge	r22,r2,26a78 <__multadd+0xe8>
   26a2c:	b585883a 	add	r2,r22,r22
   26a30:	1085883a 	add	r2,r2,r2
   26a34:	15c5883a 	add	r2,r2,r23
   26a38:	b0c00044 	addi	r3,r22,1
   26a3c:	15000515 	stw	r20,20(r2)
   26a40:	b8c00415 	stw	r3,16(r23)
   26a44:	b805883a 	mov	r2,r23
   26a48:	dfc00917 	ldw	ra,36(sp)
   26a4c:	df000817 	ldw	fp,32(sp)
   26a50:	ddc00717 	ldw	r23,28(sp)
   26a54:	dd800617 	ldw	r22,24(sp)
   26a58:	dd400517 	ldw	r21,20(sp)
   26a5c:	dd000417 	ldw	r20,16(sp)
   26a60:	dcc00317 	ldw	r19,12(sp)
   26a64:	dc800217 	ldw	r18,8(sp)
   26a68:	dc400117 	ldw	r17,4(sp)
   26a6c:	dc000017 	ldw	r16,0(sp)
   26a70:	dec00a04 	addi	sp,sp,40
   26a74:	f800283a 	ret
   26a78:	b9400117 	ldw	r5,4(r23)
   26a7c:	e009883a 	mov	r4,fp
   26a80:	29400044 	addi	r5,r5,1
   26a84:	00261f00 	call	261f0 <_Balloc>
   26a88:	b9800417 	ldw	r6,16(r23)
   26a8c:	b9400304 	addi	r5,r23,12
   26a90:	11000304 	addi	r4,r2,12
   26a94:	318d883a 	add	r6,r6,r6
   26a98:	318d883a 	add	r6,r6,r6
   26a9c:	31800204 	addi	r6,r6,8
   26aa0:	1023883a 	mov	r17,r2
   26aa4:	0025a580 	call	25a58 <memcpy>
   26aa8:	b80b883a 	mov	r5,r23
   26aac:	e009883a 	mov	r4,fp
   26ab0:	0025c700 	call	25c70 <_Bfree>
   26ab4:	882f883a 	mov	r23,r17
   26ab8:	003fdc06 	br	26a2c <__multadd+0x9c>

00026abc <__pow5mult>:
   26abc:	defffa04 	addi	sp,sp,-24
   26ac0:	308000cc 	andi	r2,r6,3
   26ac4:	dd000415 	stw	r20,16(sp)
   26ac8:	dcc00315 	stw	r19,12(sp)
   26acc:	dc000015 	stw	r16,0(sp)
   26ad0:	dfc00515 	stw	ra,20(sp)
   26ad4:	dc800215 	stw	r18,8(sp)
   26ad8:	dc400115 	stw	r17,4(sp)
   26adc:	3021883a 	mov	r16,r6
   26ae0:	2027883a 	mov	r19,r4
   26ae4:	2829883a 	mov	r20,r5
   26ae8:	10002b1e 	bne	r2,zero,26b98 <__pow5mult+0xdc>
   26aec:	8025d0ba 	srai	r18,r16,2
   26af0:	90001b26 	beq	r18,zero,26b60 <__pow5mult+0xa4>
   26af4:	9c001217 	ldw	r16,72(r19)
   26af8:	8000081e 	bne	r16,zero,26b1c <__pow5mult+0x60>
   26afc:	00003006 	br	26bc0 <__pow5mult+0x104>
   26b00:	800b883a 	mov	r5,r16
   26b04:	800d883a 	mov	r6,r16
   26b08:	9809883a 	mov	r4,r19
   26b0c:	90001426 	beq	r18,zero,26b60 <__pow5mult+0xa4>
   26b10:	80800017 	ldw	r2,0(r16)
   26b14:	10001b26 	beq	r2,zero,26b84 <__pow5mult+0xc8>
   26b18:	1021883a 	mov	r16,r2
   26b1c:	9080004c 	andi	r2,r18,1
   26b20:	1005003a 	cmpeq	r2,r2,zero
   26b24:	9025d07a 	srai	r18,r18,1
   26b28:	800d883a 	mov	r6,r16
   26b2c:	9809883a 	mov	r4,r19
   26b30:	a00b883a 	mov	r5,r20
   26b34:	103ff21e 	bne	r2,zero,26b00 <__pow5mult+0x44>
   26b38:	00267000 	call	26700 <__multiply>
   26b3c:	a00b883a 	mov	r5,r20
   26b40:	9809883a 	mov	r4,r19
   26b44:	1023883a 	mov	r17,r2
   26b48:	0025c700 	call	25c70 <_Bfree>
   26b4c:	8829883a 	mov	r20,r17
   26b50:	800b883a 	mov	r5,r16
   26b54:	800d883a 	mov	r6,r16
   26b58:	9809883a 	mov	r4,r19
   26b5c:	903fec1e 	bne	r18,zero,26b10 <__pow5mult+0x54>
   26b60:	a005883a 	mov	r2,r20
   26b64:	dfc00517 	ldw	ra,20(sp)
   26b68:	dd000417 	ldw	r20,16(sp)
   26b6c:	dcc00317 	ldw	r19,12(sp)
   26b70:	dc800217 	ldw	r18,8(sp)
   26b74:	dc400117 	ldw	r17,4(sp)
   26b78:	dc000017 	ldw	r16,0(sp)
   26b7c:	dec00604 	addi	sp,sp,24
   26b80:	f800283a 	ret
   26b84:	00267000 	call	26700 <__multiply>
   26b88:	80800015 	stw	r2,0(r16)
   26b8c:	1021883a 	mov	r16,r2
   26b90:	10000015 	stw	zero,0(r2)
   26b94:	003fe106 	br	26b1c <__pow5mult+0x60>
   26b98:	1085883a 	add	r2,r2,r2
   26b9c:	00c000f4 	movhi	r3,3
   26ba0:	18f39d04 	addi	r3,r3,-12684
   26ba4:	1085883a 	add	r2,r2,r2
   26ba8:	10c5883a 	add	r2,r2,r3
   26bac:	11bfff17 	ldw	r6,-4(r2)
   26bb0:	000f883a 	mov	r7,zero
   26bb4:	00269900 	call	26990 <__multadd>
   26bb8:	1029883a 	mov	r20,r2
   26bbc:	003fcb06 	br	26aec <__pow5mult+0x30>
   26bc0:	9809883a 	mov	r4,r19
   26bc4:	01409c44 	movi	r5,625
   26bc8:	00269540 	call	26954 <__i2b>
   26bcc:	98801215 	stw	r2,72(r19)
   26bd0:	1021883a 	mov	r16,r2
   26bd4:	10000015 	stw	zero,0(r2)
   26bd8:	003fd006 	br	26b1c <__pow5mult+0x60>

00026bdc <__s2b>:
   26bdc:	defff904 	addi	sp,sp,-28
   26be0:	dcc00315 	stw	r19,12(sp)
   26be4:	dc800215 	stw	r18,8(sp)
   26be8:	2827883a 	mov	r19,r5
   26bec:	2025883a 	mov	r18,r4
   26bf0:	01400244 	movi	r5,9
   26bf4:	39000204 	addi	r4,r7,8
   26bf8:	dd000415 	stw	r20,16(sp)
   26bfc:	dc400115 	stw	r17,4(sp)
   26c00:	dfc00615 	stw	ra,24(sp)
   26c04:	dd400515 	stw	r21,20(sp)
   26c08:	dc000015 	stw	r16,0(sp)
   26c0c:	3829883a 	mov	r20,r7
   26c10:	3023883a 	mov	r17,r6
   26c14:	00298f40 	call	298f4 <__divsi3>
   26c18:	00c00044 	movi	r3,1
   26c1c:	1880350e 	bge	r3,r2,26cf4 <__s2b+0x118>
   26c20:	000b883a 	mov	r5,zero
   26c24:	18c7883a 	add	r3,r3,r3
   26c28:	29400044 	addi	r5,r5,1
   26c2c:	18bffd16 	blt	r3,r2,26c24 <__s2b+0x48>
   26c30:	9009883a 	mov	r4,r18
   26c34:	00261f00 	call	261f0 <_Balloc>
   26c38:	1011883a 	mov	r8,r2
   26c3c:	d8800717 	ldw	r2,28(sp)
   26c40:	00c00044 	movi	r3,1
   26c44:	01800244 	movi	r6,9
   26c48:	40800515 	stw	r2,20(r8)
   26c4c:	40c00415 	stw	r3,16(r8)
   26c50:	3440260e 	bge	r6,r17,26cec <__s2b+0x110>
   26c54:	3021883a 	mov	r16,r6
   26c58:	99ab883a 	add	r21,r19,r6
   26c5c:	9c05883a 	add	r2,r19,r16
   26c60:	11c00007 	ldb	r7,0(r2)
   26c64:	400b883a 	mov	r5,r8
   26c68:	9009883a 	mov	r4,r18
   26c6c:	39fff404 	addi	r7,r7,-48
   26c70:	01800284 	movi	r6,10
   26c74:	00269900 	call	26990 <__multadd>
   26c78:	84000044 	addi	r16,r16,1
   26c7c:	1011883a 	mov	r8,r2
   26c80:	8c3ff61e 	bne	r17,r16,26c5c <__s2b+0x80>
   26c84:	ac45883a 	add	r2,r21,r17
   26c88:	117ffe04 	addi	r5,r2,-8
   26c8c:	880d883a 	mov	r6,r17
   26c90:	35000c0e 	bge	r6,r20,26cc4 <__s2b+0xe8>
   26c94:	a185c83a 	sub	r2,r20,r6
   26c98:	2821883a 	mov	r16,r5
   26c9c:	28a3883a 	add	r17,r5,r2
   26ca0:	81c00007 	ldb	r7,0(r16)
   26ca4:	400b883a 	mov	r5,r8
   26ca8:	9009883a 	mov	r4,r18
   26cac:	39fff404 	addi	r7,r7,-48
   26cb0:	01800284 	movi	r6,10
   26cb4:	00269900 	call	26990 <__multadd>
   26cb8:	84000044 	addi	r16,r16,1
   26cbc:	1011883a 	mov	r8,r2
   26cc0:	847ff71e 	bne	r16,r17,26ca0 <__s2b+0xc4>
   26cc4:	4005883a 	mov	r2,r8
   26cc8:	dfc00617 	ldw	ra,24(sp)
   26ccc:	dd400517 	ldw	r21,20(sp)
   26cd0:	dd000417 	ldw	r20,16(sp)
   26cd4:	dcc00317 	ldw	r19,12(sp)
   26cd8:	dc800217 	ldw	r18,8(sp)
   26cdc:	dc400117 	ldw	r17,4(sp)
   26ce0:	dc000017 	ldw	r16,0(sp)
   26ce4:	dec00704 	addi	sp,sp,28
   26ce8:	f800283a 	ret
   26cec:	99400284 	addi	r5,r19,10
   26cf0:	003fe706 	br	26c90 <__s2b+0xb4>
   26cf4:	000b883a 	mov	r5,zero
   26cf8:	003fcd06 	br	26c30 <__s2b+0x54>

00026cfc <_realloc_r>:
   26cfc:	defff404 	addi	sp,sp,-48
   26d00:	dd800815 	stw	r22,32(sp)
   26d04:	dc800415 	stw	r18,16(sp)
   26d08:	dc400315 	stw	r17,12(sp)
   26d0c:	dfc00b15 	stw	ra,44(sp)
   26d10:	df000a15 	stw	fp,40(sp)
   26d14:	ddc00915 	stw	r23,36(sp)
   26d18:	dd400715 	stw	r21,28(sp)
   26d1c:	dd000615 	stw	r20,24(sp)
   26d20:	dcc00515 	stw	r19,20(sp)
   26d24:	dc000215 	stw	r16,8(sp)
   26d28:	2825883a 	mov	r18,r5
   26d2c:	3023883a 	mov	r17,r6
   26d30:	202d883a 	mov	r22,r4
   26d34:	2800c926 	beq	r5,zero,2705c <_realloc_r+0x360>
   26d38:	002a8d00 	call	2a8d0 <__malloc_lock>
   26d3c:	943ffe04 	addi	r16,r18,-8
   26d40:	88c002c4 	addi	r3,r17,11
   26d44:	00800584 	movi	r2,22
   26d48:	82000117 	ldw	r8,4(r16)
   26d4c:	10c01b2e 	bgeu	r2,r3,26dbc <_realloc_r+0xc0>
   26d50:	00bffe04 	movi	r2,-8
   26d54:	188e703a 	and	r7,r3,r2
   26d58:	3839883a 	mov	fp,r7
   26d5c:	38001a16 	blt	r7,zero,26dc8 <_realloc_r+0xcc>
   26d60:	e4401936 	bltu	fp,r17,26dc8 <_realloc_r+0xcc>
   26d64:	013fff04 	movi	r4,-4
   26d68:	4126703a 	and	r19,r8,r4
   26d6c:	99c02616 	blt	r19,r7,26e08 <_realloc_r+0x10c>
   26d70:	802b883a 	mov	r21,r16
   26d74:	9829883a 	mov	r20,r19
   26d78:	84000204 	addi	r16,r16,8
   26d7c:	a80f883a 	mov	r7,r21
   26d80:	a70dc83a 	sub	r6,r20,fp
   26d84:	008003c4 	movi	r2,15
   26d88:	1180c136 	bltu	r2,r6,27090 <_realloc_r+0x394>
   26d8c:	38800117 	ldw	r2,4(r7)
   26d90:	a549883a 	add	r4,r20,r21
   26d94:	1080004c 	andi	r2,r2,1
   26d98:	a084b03a 	or	r2,r20,r2
   26d9c:	38800115 	stw	r2,4(r7)
   26da0:	20c00117 	ldw	r3,4(r4)
   26da4:	18c00054 	ori	r3,r3,1
   26da8:	20c00115 	stw	r3,4(r4)
   26dac:	b009883a 	mov	r4,r22
   26db0:	002a8f00 	call	2a8f0 <__malloc_unlock>
   26db4:	8023883a 	mov	r17,r16
   26db8:	00000606 	br	26dd4 <_realloc_r+0xd8>
   26dbc:	01c00404 	movi	r7,16
   26dc0:	3839883a 	mov	fp,r7
   26dc4:	e47fe72e 	bgeu	fp,r17,26d64 <_realloc_r+0x68>
   26dc8:	00800304 	movi	r2,12
   26dcc:	0023883a 	mov	r17,zero
   26dd0:	b0800015 	stw	r2,0(r22)
   26dd4:	8805883a 	mov	r2,r17
   26dd8:	dfc00b17 	ldw	ra,44(sp)
   26ddc:	df000a17 	ldw	fp,40(sp)
   26de0:	ddc00917 	ldw	r23,36(sp)
   26de4:	dd800817 	ldw	r22,32(sp)
   26de8:	dd400717 	ldw	r21,28(sp)
   26dec:	dd000617 	ldw	r20,24(sp)
   26df0:	dcc00517 	ldw	r19,20(sp)
   26df4:	dc800417 	ldw	r18,16(sp)
   26df8:	dc400317 	ldw	r17,12(sp)
   26dfc:	dc000217 	ldw	r16,8(sp)
   26e00:	dec00c04 	addi	sp,sp,48
   26e04:	f800283a 	ret
   26e08:	008000f4 	movhi	r2,3
   26e0c:	10b4f504 	addi	r2,r2,-11308
   26e10:	12400217 	ldw	r9,8(r2)
   26e14:	84cd883a 	add	r6,r16,r19
   26e18:	802b883a 	mov	r21,r16
   26e1c:	3240b926 	beq	r6,r9,27104 <_realloc_r+0x408>
   26e20:	31400117 	ldw	r5,4(r6)
   26e24:	00bfff84 	movi	r2,-2
   26e28:	2884703a 	and	r2,r5,r2
   26e2c:	1185883a 	add	r2,r2,r6
   26e30:	10c00117 	ldw	r3,4(r2)
   26e34:	18c0004c 	andi	r3,r3,1
   26e38:	1807003a 	cmpeq	r3,r3,zero
   26e3c:	1800a326 	beq	r3,zero,270cc <_realloc_r+0x3d0>
   26e40:	2908703a 	and	r4,r5,r4
   26e44:	9929883a 	add	r20,r19,r4
   26e48:	a1c0a30e 	bge	r20,r7,270d8 <_realloc_r+0x3dc>
   26e4c:	4080004c 	andi	r2,r8,1
   26e50:	1000551e 	bne	r2,zero,26fa8 <_realloc_r+0x2ac>
   26e54:	80800017 	ldw	r2,0(r16)
   26e58:	80afc83a 	sub	r23,r16,r2
   26e5c:	b8c00117 	ldw	r3,4(r23)
   26e60:	00bfff04 	movi	r2,-4
   26e64:	1884703a 	and	r2,r3,r2
   26e68:	30002e26 	beq	r6,zero,26f24 <_realloc_r+0x228>
   26e6c:	3240b926 	beq	r6,r9,27154 <_realloc_r+0x458>
   26e70:	98a9883a 	add	r20,r19,r2
   26e74:	2509883a 	add	r4,r4,r20
   26e78:	d9000015 	stw	r4,0(sp)
   26e7c:	21c02a16 	blt	r4,r7,26f28 <_realloc_r+0x22c>
   26e80:	30800317 	ldw	r2,12(r6)
   26e84:	30c00217 	ldw	r3,8(r6)
   26e88:	01400904 	movi	r5,36
   26e8c:	99bfff04 	addi	r6,r19,-4
   26e90:	18800315 	stw	r2,12(r3)
   26e94:	10c00215 	stw	r3,8(r2)
   26e98:	b9000317 	ldw	r4,12(r23)
   26e9c:	b8800217 	ldw	r2,8(r23)
   26ea0:	b82b883a 	mov	r21,r23
   26ea4:	bc000204 	addi	r16,r23,8
   26ea8:	20800215 	stw	r2,8(r4)
   26eac:	11000315 	stw	r4,12(r2)
   26eb0:	2980e436 	bltu	r5,r6,27244 <_realloc_r+0x548>
   26eb4:	008004c4 	movi	r2,19
   26eb8:	9009883a 	mov	r4,r18
   26ebc:	8011883a 	mov	r8,r16
   26ec0:	11800f2e 	bgeu	r2,r6,26f00 <_realloc_r+0x204>
   26ec4:	90800017 	ldw	r2,0(r18)
   26ec8:	ba000404 	addi	r8,r23,16
   26ecc:	91000204 	addi	r4,r18,8
   26ed0:	b8800215 	stw	r2,8(r23)
   26ed4:	90c00117 	ldw	r3,4(r18)
   26ed8:	008006c4 	movi	r2,27
   26edc:	b8c00315 	stw	r3,12(r23)
   26ee0:	1180072e 	bgeu	r2,r6,26f00 <_realloc_r+0x204>
   26ee4:	90c00217 	ldw	r3,8(r18)
   26ee8:	ba000604 	addi	r8,r23,24
   26eec:	91000404 	addi	r4,r18,16
   26ef0:	b8c00415 	stw	r3,16(r23)
   26ef4:	90800317 	ldw	r2,12(r18)
   26ef8:	b8800515 	stw	r2,20(r23)
   26efc:	3140e726 	beq	r6,r5,2729c <_realloc_r+0x5a0>
   26f00:	20800017 	ldw	r2,0(r4)
   26f04:	dd000017 	ldw	r20,0(sp)
   26f08:	b80f883a 	mov	r7,r23
   26f0c:	40800015 	stw	r2,0(r8)
   26f10:	20c00117 	ldw	r3,4(r4)
   26f14:	40c00115 	stw	r3,4(r8)
   26f18:	20800217 	ldw	r2,8(r4)
   26f1c:	40800215 	stw	r2,8(r8)
   26f20:	003f9706 	br	26d80 <_realloc_r+0x84>
   26f24:	98a9883a 	add	r20,r19,r2
   26f28:	a1c01f16 	blt	r20,r7,26fa8 <_realloc_r+0x2ac>
   26f2c:	b8c00317 	ldw	r3,12(r23)
   26f30:	b8800217 	ldw	r2,8(r23)
   26f34:	99bfff04 	addi	r6,r19,-4
   26f38:	01400904 	movi	r5,36
   26f3c:	b82b883a 	mov	r21,r23
   26f40:	18800215 	stw	r2,8(r3)
   26f44:	10c00315 	stw	r3,12(r2)
   26f48:	bc000204 	addi	r16,r23,8
   26f4c:	2980c336 	bltu	r5,r6,2725c <_realloc_r+0x560>
   26f50:	008004c4 	movi	r2,19
   26f54:	9009883a 	mov	r4,r18
   26f58:	8011883a 	mov	r8,r16
   26f5c:	11800f2e 	bgeu	r2,r6,26f9c <_realloc_r+0x2a0>
   26f60:	90800017 	ldw	r2,0(r18)
   26f64:	ba000404 	addi	r8,r23,16
   26f68:	91000204 	addi	r4,r18,8
   26f6c:	b8800215 	stw	r2,8(r23)
   26f70:	90c00117 	ldw	r3,4(r18)
   26f74:	008006c4 	movi	r2,27
   26f78:	b8c00315 	stw	r3,12(r23)
   26f7c:	1180072e 	bgeu	r2,r6,26f9c <_realloc_r+0x2a0>
   26f80:	90c00217 	ldw	r3,8(r18)
   26f84:	ba000604 	addi	r8,r23,24
   26f88:	91000404 	addi	r4,r18,16
   26f8c:	b8c00415 	stw	r3,16(r23)
   26f90:	90800317 	ldw	r2,12(r18)
   26f94:	b8800515 	stw	r2,20(r23)
   26f98:	3140c726 	beq	r6,r5,272b8 <_realloc_r+0x5bc>
   26f9c:	20800017 	ldw	r2,0(r4)
   26fa0:	b80f883a 	mov	r7,r23
   26fa4:	003fd906 	br	26f0c <_realloc_r+0x210>
   26fa8:	880b883a 	mov	r5,r17
   26fac:	b009883a 	mov	r4,r22
   26fb0:	00252340 	call	25234 <_malloc_r>
   26fb4:	1023883a 	mov	r17,r2
   26fb8:	10002526 	beq	r2,zero,27050 <_realloc_r+0x354>
   26fbc:	80800117 	ldw	r2,4(r16)
   26fc0:	00ffff84 	movi	r3,-2
   26fc4:	893ffe04 	addi	r4,r17,-8
   26fc8:	10c4703a 	and	r2,r2,r3
   26fcc:	8085883a 	add	r2,r16,r2
   26fd0:	20809526 	beq	r4,r2,27228 <_realloc_r+0x52c>
   26fd4:	99bfff04 	addi	r6,r19,-4
   26fd8:	01c00904 	movi	r7,36
   26fdc:	39804536 	bltu	r7,r6,270f4 <_realloc_r+0x3f8>
   26fe0:	008004c4 	movi	r2,19
   26fe4:	9009883a 	mov	r4,r18
   26fe8:	880b883a 	mov	r5,r17
   26fec:	11800f2e 	bgeu	r2,r6,2702c <_realloc_r+0x330>
   26ff0:	90800017 	ldw	r2,0(r18)
   26ff4:	89400204 	addi	r5,r17,8
   26ff8:	91000204 	addi	r4,r18,8
   26ffc:	88800015 	stw	r2,0(r17)
   27000:	90c00117 	ldw	r3,4(r18)
   27004:	008006c4 	movi	r2,27
   27008:	88c00115 	stw	r3,4(r17)
   2700c:	1180072e 	bgeu	r2,r6,2702c <_realloc_r+0x330>
   27010:	90c00217 	ldw	r3,8(r18)
   27014:	89400404 	addi	r5,r17,16
   27018:	91000404 	addi	r4,r18,16
   2701c:	88c00215 	stw	r3,8(r17)
   27020:	90800317 	ldw	r2,12(r18)
   27024:	88800315 	stw	r2,12(r17)
   27028:	31c09126 	beq	r6,r7,27270 <_realloc_r+0x574>
   2702c:	20800017 	ldw	r2,0(r4)
   27030:	28800015 	stw	r2,0(r5)
   27034:	20c00117 	ldw	r3,4(r4)
   27038:	28c00115 	stw	r3,4(r5)
   2703c:	20800217 	ldw	r2,8(r4)
   27040:	28800215 	stw	r2,8(r5)
   27044:	900b883a 	mov	r5,r18
   27048:	b009883a 	mov	r4,r22
   2704c:	00246ac0 	call	246ac <_free_r>
   27050:	b009883a 	mov	r4,r22
   27054:	002a8f00 	call	2a8f0 <__malloc_unlock>
   27058:	003f5e06 	br	26dd4 <_realloc_r+0xd8>
   2705c:	300b883a 	mov	r5,r6
   27060:	dfc00b17 	ldw	ra,44(sp)
   27064:	df000a17 	ldw	fp,40(sp)
   27068:	ddc00917 	ldw	r23,36(sp)
   2706c:	dd800817 	ldw	r22,32(sp)
   27070:	dd400717 	ldw	r21,28(sp)
   27074:	dd000617 	ldw	r20,24(sp)
   27078:	dcc00517 	ldw	r19,20(sp)
   2707c:	dc800417 	ldw	r18,16(sp)
   27080:	dc400317 	ldw	r17,12(sp)
   27084:	dc000217 	ldw	r16,8(sp)
   27088:	dec00c04 	addi	sp,sp,48
   2708c:	00252341 	jmpi	25234 <_malloc_r>
   27090:	38800117 	ldw	r2,4(r7)
   27094:	e54b883a 	add	r5,fp,r21
   27098:	31000054 	ori	r4,r6,1
   2709c:	1080004c 	andi	r2,r2,1
   270a0:	1704b03a 	or	r2,r2,fp
   270a4:	38800115 	stw	r2,4(r7)
   270a8:	29000115 	stw	r4,4(r5)
   270ac:	2987883a 	add	r3,r5,r6
   270b0:	18800117 	ldw	r2,4(r3)
   270b4:	29400204 	addi	r5,r5,8
   270b8:	b009883a 	mov	r4,r22
   270bc:	10800054 	ori	r2,r2,1
   270c0:	18800115 	stw	r2,4(r3)
   270c4:	00246ac0 	call	246ac <_free_r>
   270c8:	003f3806 	br	26dac <_realloc_r+0xb0>
   270cc:	000d883a 	mov	r6,zero
   270d0:	0009883a 	mov	r4,zero
   270d4:	003f5d06 	br	26e4c <_realloc_r+0x150>
   270d8:	30c00217 	ldw	r3,8(r6)
   270dc:	30800317 	ldw	r2,12(r6)
   270e0:	800f883a 	mov	r7,r16
   270e4:	84000204 	addi	r16,r16,8
   270e8:	10c00215 	stw	r3,8(r2)
   270ec:	18800315 	stw	r2,12(r3)
   270f0:	003f2306 	br	26d80 <_realloc_r+0x84>
   270f4:	8809883a 	mov	r4,r17
   270f8:	900b883a 	mov	r5,r18
   270fc:	0025af80 	call	25af8 <memmove>
   27100:	003fd006 	br	27044 <_realloc_r+0x348>
   27104:	30800117 	ldw	r2,4(r6)
   27108:	e0c00404 	addi	r3,fp,16
   2710c:	1108703a 	and	r4,r2,r4
   27110:	9905883a 	add	r2,r19,r4
   27114:	10ff4d16 	blt	r2,r3,26e4c <_realloc_r+0x150>
   27118:	1705c83a 	sub	r2,r2,fp
   2711c:	870b883a 	add	r5,r16,fp
   27120:	10800054 	ori	r2,r2,1
   27124:	28800115 	stw	r2,4(r5)
   27128:	80c00117 	ldw	r3,4(r16)
   2712c:	008000f4 	movhi	r2,3
   27130:	10b4f504 	addi	r2,r2,-11308
   27134:	b009883a 	mov	r4,r22
   27138:	18c0004c 	andi	r3,r3,1
   2713c:	e0c6b03a 	or	r3,fp,r3
   27140:	11400215 	stw	r5,8(r2)
   27144:	80c00115 	stw	r3,4(r16)
   27148:	002a8f00 	call	2a8f0 <__malloc_unlock>
   2714c:	84400204 	addi	r17,r16,8
   27150:	003f2006 	br	26dd4 <_realloc_r+0xd8>
   27154:	98a9883a 	add	r20,r19,r2
   27158:	2509883a 	add	r4,r4,r20
   2715c:	e0800404 	addi	r2,fp,16
   27160:	d9000115 	stw	r4,4(sp)
   27164:	20bf7016 	blt	r4,r2,26f28 <_realloc_r+0x22c>
   27168:	b8c00317 	ldw	r3,12(r23)
   2716c:	b8800217 	ldw	r2,8(r23)
   27170:	99bfff04 	addi	r6,r19,-4
   27174:	01400904 	movi	r5,36
   27178:	18800215 	stw	r2,8(r3)
   2717c:	10c00315 	stw	r3,12(r2)
   27180:	bc400204 	addi	r17,r23,8
   27184:	29804136 	bltu	r5,r6,2728c <_realloc_r+0x590>
   27188:	008004c4 	movi	r2,19
   2718c:	9009883a 	mov	r4,r18
   27190:	880f883a 	mov	r7,r17
   27194:	11800f2e 	bgeu	r2,r6,271d4 <_realloc_r+0x4d8>
   27198:	90800017 	ldw	r2,0(r18)
   2719c:	b9c00404 	addi	r7,r23,16
   271a0:	91000204 	addi	r4,r18,8
   271a4:	b8800215 	stw	r2,8(r23)
   271a8:	90c00117 	ldw	r3,4(r18)
   271ac:	008006c4 	movi	r2,27
   271b0:	b8c00315 	stw	r3,12(r23)
   271b4:	1180072e 	bgeu	r2,r6,271d4 <_realloc_r+0x4d8>
   271b8:	90c00217 	ldw	r3,8(r18)
   271bc:	b9c00604 	addi	r7,r23,24
   271c0:	91000404 	addi	r4,r18,16
   271c4:	b8c00415 	stw	r3,16(r23)
   271c8:	90800317 	ldw	r2,12(r18)
   271cc:	b8800515 	stw	r2,20(r23)
   271d0:	31404026 	beq	r6,r5,272d4 <_realloc_r+0x5d8>
   271d4:	20800017 	ldw	r2,0(r4)
   271d8:	38800015 	stw	r2,0(r7)
   271dc:	20c00117 	ldw	r3,4(r4)
   271e0:	38c00115 	stw	r3,4(r7)
   271e4:	20800217 	ldw	r2,8(r4)
   271e8:	38800215 	stw	r2,8(r7)
   271ec:	d8c00117 	ldw	r3,4(sp)
   271f0:	bf0b883a 	add	r5,r23,fp
   271f4:	b009883a 	mov	r4,r22
   271f8:	1f05c83a 	sub	r2,r3,fp
   271fc:	10800054 	ori	r2,r2,1
   27200:	28800115 	stw	r2,4(r5)
   27204:	b8c00117 	ldw	r3,4(r23)
   27208:	008000f4 	movhi	r2,3
   2720c:	10b4f504 	addi	r2,r2,-11308
   27210:	11400215 	stw	r5,8(r2)
   27214:	18c0004c 	andi	r3,r3,1
   27218:	e0c6b03a 	or	r3,fp,r3
   2721c:	b8c00115 	stw	r3,4(r23)
   27220:	002a8f00 	call	2a8f0 <__malloc_unlock>
   27224:	003eeb06 	br	26dd4 <_realloc_r+0xd8>
   27228:	20800117 	ldw	r2,4(r4)
   2722c:	00ffff04 	movi	r3,-4
   27230:	800f883a 	mov	r7,r16
   27234:	10c4703a 	and	r2,r2,r3
   27238:	98a9883a 	add	r20,r19,r2
   2723c:	84000204 	addi	r16,r16,8
   27240:	003ecf06 	br	26d80 <_realloc_r+0x84>
   27244:	900b883a 	mov	r5,r18
   27248:	8009883a 	mov	r4,r16
   2724c:	0025af80 	call	25af8 <memmove>
   27250:	dd000017 	ldw	r20,0(sp)
   27254:	b80f883a 	mov	r7,r23
   27258:	003ec906 	br	26d80 <_realloc_r+0x84>
   2725c:	900b883a 	mov	r5,r18
   27260:	8009883a 	mov	r4,r16
   27264:	0025af80 	call	25af8 <memmove>
   27268:	b80f883a 	mov	r7,r23
   2726c:	003ec406 	br	26d80 <_realloc_r+0x84>
   27270:	90c00417 	ldw	r3,16(r18)
   27274:	89400604 	addi	r5,r17,24
   27278:	91000604 	addi	r4,r18,24
   2727c:	88c00415 	stw	r3,16(r17)
   27280:	90800517 	ldw	r2,20(r18)
   27284:	88800515 	stw	r2,20(r17)
   27288:	003f6806 	br	2702c <_realloc_r+0x330>
   2728c:	900b883a 	mov	r5,r18
   27290:	8809883a 	mov	r4,r17
   27294:	0025af80 	call	25af8 <memmove>
   27298:	003fd406 	br	271ec <_realloc_r+0x4f0>
   2729c:	90c00417 	ldw	r3,16(r18)
   272a0:	91000604 	addi	r4,r18,24
   272a4:	ba000804 	addi	r8,r23,32
   272a8:	b8c00615 	stw	r3,24(r23)
   272ac:	90800517 	ldw	r2,20(r18)
   272b0:	b8800715 	stw	r2,28(r23)
   272b4:	003f1206 	br	26f00 <_realloc_r+0x204>
   272b8:	90c00417 	ldw	r3,16(r18)
   272bc:	91000604 	addi	r4,r18,24
   272c0:	ba000804 	addi	r8,r23,32
   272c4:	b8c00615 	stw	r3,24(r23)
   272c8:	90800517 	ldw	r2,20(r18)
   272cc:	b8800715 	stw	r2,28(r23)
   272d0:	003f3206 	br	26f9c <_realloc_r+0x2a0>
   272d4:	90c00417 	ldw	r3,16(r18)
   272d8:	91000604 	addi	r4,r18,24
   272dc:	b9c00804 	addi	r7,r23,32
   272e0:	b8c00615 	stw	r3,24(r23)
   272e4:	90800517 	ldw	r2,20(r18)
   272e8:	b8800715 	stw	r2,28(r23)
   272ec:	003fb906 	br	271d4 <_realloc_r+0x4d8>

000272f0 <__isinfd>:
   272f0:	200d883a 	mov	r6,r4
   272f4:	0109c83a 	sub	r4,zero,r4
   272f8:	2188b03a 	or	r4,r4,r6
   272fc:	2008d7fa 	srli	r4,r4,31
   27300:	00a00034 	movhi	r2,32768
   27304:	10bfffc4 	addi	r2,r2,-1
   27308:	1144703a 	and	r2,r2,r5
   2730c:	2088b03a 	or	r4,r4,r2
   27310:	009ffc34 	movhi	r2,32752
   27314:	1105c83a 	sub	r2,r2,r4
   27318:	0087c83a 	sub	r3,zero,r2
   2731c:	10c4b03a 	or	r2,r2,r3
   27320:	1004d7fa 	srli	r2,r2,31
   27324:	00c00044 	movi	r3,1
   27328:	1885c83a 	sub	r2,r3,r2
   2732c:	f800283a 	ret

00027330 <__isnand>:
   27330:	200d883a 	mov	r6,r4
   27334:	0109c83a 	sub	r4,zero,r4
   27338:	2188b03a 	or	r4,r4,r6
   2733c:	2008d7fa 	srli	r4,r4,31
   27340:	00a00034 	movhi	r2,32768
   27344:	10bfffc4 	addi	r2,r2,-1
   27348:	1144703a 	and	r2,r2,r5
   2734c:	2088b03a 	or	r4,r4,r2
   27350:	009ffc34 	movhi	r2,32752
   27354:	1105c83a 	sub	r2,r2,r4
   27358:	1004d7fa 	srli	r2,r2,31
   2735c:	f800283a 	ret

00027360 <_sbrk_r>:
   27360:	defffd04 	addi	sp,sp,-12
   27364:	dc000015 	stw	r16,0(sp)
   27368:	040000f4 	movhi	r16,3
   2736c:	84012604 	addi	r16,r16,1176
   27370:	dc400115 	stw	r17,4(sp)
   27374:	80000015 	stw	zero,0(r16)
   27378:	2023883a 	mov	r17,r4
   2737c:	2809883a 	mov	r4,r5
   27380:	dfc00215 	stw	ra,8(sp)
   27384:	002ab0c0 	call	2ab0c <sbrk>
   27388:	1007883a 	mov	r3,r2
   2738c:	00bfffc4 	movi	r2,-1
   27390:	18800626 	beq	r3,r2,273ac <_sbrk_r+0x4c>
   27394:	1805883a 	mov	r2,r3
   27398:	dfc00217 	ldw	ra,8(sp)
   2739c:	dc400117 	ldw	r17,4(sp)
   273a0:	dc000017 	ldw	r16,0(sp)
   273a4:	dec00304 	addi	sp,sp,12
   273a8:	f800283a 	ret
   273ac:	80800017 	ldw	r2,0(r16)
   273b0:	103ff826 	beq	r2,zero,27394 <_sbrk_r+0x34>
   273b4:	88800015 	stw	r2,0(r17)
   273b8:	1805883a 	mov	r2,r3
   273bc:	dfc00217 	ldw	ra,8(sp)
   273c0:	dc400117 	ldw	r17,4(sp)
   273c4:	dc000017 	ldw	r16,0(sp)
   273c8:	dec00304 	addi	sp,sp,12
   273cc:	f800283a 	ret

000273d0 <__sclose>:
   273d0:	2940038f 	ldh	r5,14(r5)
   273d4:	00277181 	jmpi	27718 <_close_r>

000273d8 <__sseek>:
   273d8:	defffe04 	addi	sp,sp,-8
   273dc:	dc000015 	stw	r16,0(sp)
   273e0:	2821883a 	mov	r16,r5
   273e4:	2940038f 	ldh	r5,14(r5)
   273e8:	dfc00115 	stw	ra,4(sp)
   273ec:	00279900 	call	27990 <_lseek_r>
   273f0:	1007883a 	mov	r3,r2
   273f4:	00bfffc4 	movi	r2,-1
   273f8:	18800926 	beq	r3,r2,27420 <__sseek+0x48>
   273fc:	8080030b 	ldhu	r2,12(r16)
   27400:	80c01415 	stw	r3,80(r16)
   27404:	10840014 	ori	r2,r2,4096
   27408:	8080030d 	sth	r2,12(r16)
   2740c:	1805883a 	mov	r2,r3
   27410:	dfc00117 	ldw	ra,4(sp)
   27414:	dc000017 	ldw	r16,0(sp)
   27418:	dec00204 	addi	sp,sp,8
   2741c:	f800283a 	ret
   27420:	8080030b 	ldhu	r2,12(r16)
   27424:	10bbffcc 	andi	r2,r2,61439
   27428:	8080030d 	sth	r2,12(r16)
   2742c:	1805883a 	mov	r2,r3
   27430:	dfc00117 	ldw	ra,4(sp)
   27434:	dc000017 	ldw	r16,0(sp)
   27438:	dec00204 	addi	sp,sp,8
   2743c:	f800283a 	ret

00027440 <__swrite>:
   27440:	2880030b 	ldhu	r2,12(r5)
   27444:	defffb04 	addi	sp,sp,-20
   27448:	dcc00315 	stw	r19,12(sp)
   2744c:	1080400c 	andi	r2,r2,256
   27450:	dc800215 	stw	r18,8(sp)
   27454:	dc400115 	stw	r17,4(sp)
   27458:	dc000015 	stw	r16,0(sp)
   2745c:	3027883a 	mov	r19,r6
   27460:	3825883a 	mov	r18,r7
   27464:	dfc00415 	stw	ra,16(sp)
   27468:	2821883a 	mov	r16,r5
   2746c:	000d883a 	mov	r6,zero
   27470:	01c00084 	movi	r7,2
   27474:	2023883a 	mov	r17,r4
   27478:	10000226 	beq	r2,zero,27484 <__swrite+0x44>
   2747c:	2940038f 	ldh	r5,14(r5)
   27480:	00279900 	call	27990 <_lseek_r>
   27484:	8080030b 	ldhu	r2,12(r16)
   27488:	8140038f 	ldh	r5,14(r16)
   2748c:	8809883a 	mov	r4,r17
   27490:	10bbffcc 	andi	r2,r2,61439
   27494:	980d883a 	mov	r6,r19
   27498:	900f883a 	mov	r7,r18
   2749c:	8080030d 	sth	r2,12(r16)
   274a0:	dfc00417 	ldw	ra,16(sp)
   274a4:	dcc00317 	ldw	r19,12(sp)
   274a8:	dc800217 	ldw	r18,8(sp)
   274ac:	dc400117 	ldw	r17,4(sp)
   274b0:	dc000017 	ldw	r16,0(sp)
   274b4:	dec00504 	addi	sp,sp,20
   274b8:	00275d81 	jmpi	275d8 <_write_r>

000274bc <__sread>:
   274bc:	defffe04 	addi	sp,sp,-8
   274c0:	dc000015 	stw	r16,0(sp)
   274c4:	2821883a 	mov	r16,r5
   274c8:	2940038f 	ldh	r5,14(r5)
   274cc:	dfc00115 	stw	ra,4(sp)
   274d0:	0027a080 	call	27a08 <_read_r>
   274d4:	1007883a 	mov	r3,r2
   274d8:	10000816 	blt	r2,zero,274fc <__sread+0x40>
   274dc:	80801417 	ldw	r2,80(r16)
   274e0:	10c5883a 	add	r2,r2,r3
   274e4:	80801415 	stw	r2,80(r16)
   274e8:	1805883a 	mov	r2,r3
   274ec:	dfc00117 	ldw	ra,4(sp)
   274f0:	dc000017 	ldw	r16,0(sp)
   274f4:	dec00204 	addi	sp,sp,8
   274f8:	f800283a 	ret
   274fc:	8080030b 	ldhu	r2,12(r16)
   27500:	10bbffcc 	andi	r2,r2,61439
   27504:	8080030d 	sth	r2,12(r16)
   27508:	1805883a 	mov	r2,r3
   2750c:	dfc00117 	ldw	ra,4(sp)
   27510:	dc000017 	ldw	r16,0(sp)
   27514:	dec00204 	addi	sp,sp,8
   27518:	f800283a 	ret

0002751c <strcmp>:
   2751c:	2144b03a 	or	r2,r4,r5
   27520:	108000cc 	andi	r2,r2,3
   27524:	10001d1e 	bne	r2,zero,2759c <strcmp+0x80>
   27528:	200f883a 	mov	r7,r4
   2752c:	28800017 	ldw	r2,0(r5)
   27530:	21000017 	ldw	r4,0(r4)
   27534:	280d883a 	mov	r6,r5
   27538:	2080161e 	bne	r4,r2,27594 <strcmp+0x78>
   2753c:	023fbff4 	movhi	r8,65279
   27540:	423fbfc4 	addi	r8,r8,-257
   27544:	2207883a 	add	r3,r4,r8
   27548:	01602074 	movhi	r5,32897
   2754c:	29602004 	addi	r5,r5,-32640
   27550:	1946703a 	and	r3,r3,r5
   27554:	0104303a 	nor	r2,zero,r4
   27558:	10c4703a 	and	r2,r2,r3
   2755c:	10001c1e 	bne	r2,zero,275d0 <strcmp+0xb4>
   27560:	4013883a 	mov	r9,r8
   27564:	2811883a 	mov	r8,r5
   27568:	00000106 	br	27570 <strcmp+0x54>
   2756c:	1800181e 	bne	r3,zero,275d0 <strcmp+0xb4>
   27570:	39c00104 	addi	r7,r7,4
   27574:	39000017 	ldw	r4,0(r7)
   27578:	31800104 	addi	r6,r6,4
   2757c:	31400017 	ldw	r5,0(r6)
   27580:	2245883a 	add	r2,r4,r9
   27584:	1204703a 	and	r2,r2,r8
   27588:	0106303a 	nor	r3,zero,r4
   2758c:	1886703a 	and	r3,r3,r2
   27590:	217ff626 	beq	r4,r5,2756c <strcmp+0x50>
   27594:	3809883a 	mov	r4,r7
   27598:	300b883a 	mov	r5,r6
   2759c:	20c00007 	ldb	r3,0(r4)
   275a0:	1800051e 	bne	r3,zero,275b8 <strcmp+0x9c>
   275a4:	00000606 	br	275c0 <strcmp+0xa4>
   275a8:	21000044 	addi	r4,r4,1
   275ac:	20c00007 	ldb	r3,0(r4)
   275b0:	29400044 	addi	r5,r5,1
   275b4:	18000226 	beq	r3,zero,275c0 <strcmp+0xa4>
   275b8:	28800007 	ldb	r2,0(r5)
   275bc:	18bffa26 	beq	r3,r2,275a8 <strcmp+0x8c>
   275c0:	20c00003 	ldbu	r3,0(r4)
   275c4:	28800003 	ldbu	r2,0(r5)
   275c8:	1885c83a 	sub	r2,r3,r2
   275cc:	f800283a 	ret
   275d0:	0005883a 	mov	r2,zero
   275d4:	f800283a 	ret

000275d8 <_write_r>:
   275d8:	defffd04 	addi	sp,sp,-12
   275dc:	dc000015 	stw	r16,0(sp)
   275e0:	040000f4 	movhi	r16,3
   275e4:	84012604 	addi	r16,r16,1176
   275e8:	dc400115 	stw	r17,4(sp)
   275ec:	80000015 	stw	zero,0(r16)
   275f0:	2023883a 	mov	r17,r4
   275f4:	2809883a 	mov	r4,r5
   275f8:	300b883a 	mov	r5,r6
   275fc:	380d883a 	mov	r6,r7
   27600:	dfc00215 	stw	ra,8(sp)
   27604:	002abc80 	call	2abc8 <write>
   27608:	1007883a 	mov	r3,r2
   2760c:	00bfffc4 	movi	r2,-1
   27610:	18800626 	beq	r3,r2,2762c <_write_r+0x54>
   27614:	1805883a 	mov	r2,r3
   27618:	dfc00217 	ldw	ra,8(sp)
   2761c:	dc400117 	ldw	r17,4(sp)
   27620:	dc000017 	ldw	r16,0(sp)
   27624:	dec00304 	addi	sp,sp,12
   27628:	f800283a 	ret
   2762c:	80800017 	ldw	r2,0(r16)
   27630:	103ff826 	beq	r2,zero,27614 <_write_r+0x3c>
   27634:	88800015 	stw	r2,0(r17)
   27638:	1805883a 	mov	r2,r3
   2763c:	dfc00217 	ldw	ra,8(sp)
   27640:	dc400117 	ldw	r17,4(sp)
   27644:	dc000017 	ldw	r16,0(sp)
   27648:	dec00304 	addi	sp,sp,12
   2764c:	f800283a 	ret

00027650 <_calloc_r>:
   27650:	defffe04 	addi	sp,sp,-8
   27654:	dc400015 	stw	r17,0(sp)
   27658:	2023883a 	mov	r17,r4
   2765c:	2809883a 	mov	r4,r5
   27660:	300b883a 	mov	r5,r6
   27664:	dfc00115 	stw	ra,4(sp)
   27668:	00206100 	call	20610 <__mulsi3>
   2766c:	100b883a 	mov	r5,r2
   27670:	8809883a 	mov	r4,r17
   27674:	00252340 	call	25234 <_malloc_r>
   27678:	1023883a 	mov	r17,r2
   2767c:	01c00904 	movi	r7,36
   27680:	10000d26 	beq	r2,zero,276b8 <_calloc_r+0x68>
   27684:	10ffff17 	ldw	r3,-4(r2)
   27688:	1009883a 	mov	r4,r2
   2768c:	00bfff04 	movi	r2,-4
   27690:	1886703a 	and	r3,r3,r2
   27694:	1887883a 	add	r3,r3,r2
   27698:	180d883a 	mov	r6,r3
   2769c:	000b883a 	mov	r5,zero
   276a0:	38c01736 	bltu	r7,r3,27700 <_calloc_r+0xb0>
   276a4:	008004c4 	movi	r2,19
   276a8:	10c00836 	bltu	r2,r3,276cc <_calloc_r+0x7c>
   276ac:	20000215 	stw	zero,8(r4)
   276b0:	20000015 	stw	zero,0(r4)
   276b4:	20000115 	stw	zero,4(r4)
   276b8:	8805883a 	mov	r2,r17
   276bc:	dfc00117 	ldw	ra,4(sp)
   276c0:	dc400017 	ldw	r17,0(sp)
   276c4:	dec00204 	addi	sp,sp,8
   276c8:	f800283a 	ret
   276cc:	008006c4 	movi	r2,27
   276d0:	88000015 	stw	zero,0(r17)
   276d4:	88000115 	stw	zero,4(r17)
   276d8:	89000204 	addi	r4,r17,8
   276dc:	10fff32e 	bgeu	r2,r3,276ac <_calloc_r+0x5c>
   276e0:	88000215 	stw	zero,8(r17)
   276e4:	88000315 	stw	zero,12(r17)
   276e8:	89000404 	addi	r4,r17,16
   276ec:	19ffef1e 	bne	r3,r7,276ac <_calloc_r+0x5c>
   276f0:	89000604 	addi	r4,r17,24
   276f4:	88000415 	stw	zero,16(r17)
   276f8:	88000515 	stw	zero,20(r17)
   276fc:	003feb06 	br	276ac <_calloc_r+0x5c>
   27700:	0025bd80 	call	25bd8 <memset>
   27704:	8805883a 	mov	r2,r17
   27708:	dfc00117 	ldw	ra,4(sp)
   2770c:	dc400017 	ldw	r17,0(sp)
   27710:	dec00204 	addi	sp,sp,8
   27714:	f800283a 	ret

00027718 <_close_r>:
   27718:	defffd04 	addi	sp,sp,-12
   2771c:	dc000015 	stw	r16,0(sp)
   27720:	040000f4 	movhi	r16,3
   27724:	84012604 	addi	r16,r16,1176
   27728:	dc400115 	stw	r17,4(sp)
   2772c:	80000015 	stw	zero,0(r16)
   27730:	2023883a 	mov	r17,r4
   27734:	2809883a 	mov	r4,r5
   27738:	dfc00215 	stw	ra,8(sp)
   2773c:	002a07c0 	call	2a07c <close>
   27740:	1007883a 	mov	r3,r2
   27744:	00bfffc4 	movi	r2,-1
   27748:	18800626 	beq	r3,r2,27764 <_close_r+0x4c>
   2774c:	1805883a 	mov	r2,r3
   27750:	dfc00217 	ldw	ra,8(sp)
   27754:	dc400117 	ldw	r17,4(sp)
   27758:	dc000017 	ldw	r16,0(sp)
   2775c:	dec00304 	addi	sp,sp,12
   27760:	f800283a 	ret
   27764:	80800017 	ldw	r2,0(r16)
   27768:	103ff826 	beq	r2,zero,2774c <_close_r+0x34>
   2776c:	88800015 	stw	r2,0(r17)
   27770:	1805883a 	mov	r2,r3
   27774:	dfc00217 	ldw	ra,8(sp)
   27778:	dc400117 	ldw	r17,4(sp)
   2777c:	dc000017 	ldw	r16,0(sp)
   27780:	dec00304 	addi	sp,sp,12
   27784:	f800283a 	ret

00027788 <_fclose_r>:
   27788:	defffc04 	addi	sp,sp,-16
   2778c:	dc400115 	stw	r17,4(sp)
   27790:	dc000015 	stw	r16,0(sp)
   27794:	dfc00315 	stw	ra,12(sp)
   27798:	dc800215 	stw	r18,8(sp)
   2779c:	2821883a 	mov	r16,r5
   277a0:	2023883a 	mov	r17,r4
   277a4:	28002926 	beq	r5,zero,2784c <_fclose_r+0xc4>
   277a8:	00242e40 	call	242e4 <__sfp_lock_acquire>
   277ac:	88000226 	beq	r17,zero,277b8 <_fclose_r+0x30>
   277b0:	88800e17 	ldw	r2,56(r17)
   277b4:	10002d26 	beq	r2,zero,2786c <_fclose_r+0xe4>
   277b8:	8080030f 	ldh	r2,12(r16)
   277bc:	10002226 	beq	r2,zero,27848 <_fclose_r+0xc0>
   277c0:	8809883a 	mov	r4,r17
   277c4:	800b883a 	mov	r5,r16
   277c8:	002405c0 	call	2405c <_fflush_r>
   277cc:	1025883a 	mov	r18,r2
   277d0:	80800b17 	ldw	r2,44(r16)
   277d4:	10000426 	beq	r2,zero,277e8 <_fclose_r+0x60>
   277d8:	81400717 	ldw	r5,28(r16)
   277dc:	8809883a 	mov	r4,r17
   277e0:	103ee83a 	callr	r2
   277e4:	10002a16 	blt	r2,zero,27890 <_fclose_r+0x108>
   277e8:	8080030b 	ldhu	r2,12(r16)
   277ec:	1080200c 	andi	r2,r2,128
   277f0:	1000231e 	bne	r2,zero,27880 <_fclose_r+0xf8>
   277f4:	81400c17 	ldw	r5,48(r16)
   277f8:	28000526 	beq	r5,zero,27810 <_fclose_r+0x88>
   277fc:	80801004 	addi	r2,r16,64
   27800:	28800226 	beq	r5,r2,2780c <_fclose_r+0x84>
   27804:	8809883a 	mov	r4,r17
   27808:	00246ac0 	call	246ac <_free_r>
   2780c:	80000c15 	stw	zero,48(r16)
   27810:	81401117 	ldw	r5,68(r16)
   27814:	28000326 	beq	r5,zero,27824 <_fclose_r+0x9c>
   27818:	8809883a 	mov	r4,r17
   2781c:	00246ac0 	call	246ac <_free_r>
   27820:	80001115 	stw	zero,68(r16)
   27824:	8000030d 	sth	zero,12(r16)
   27828:	00242e80 	call	242e8 <__sfp_lock_release>
   2782c:	9005883a 	mov	r2,r18
   27830:	dfc00317 	ldw	ra,12(sp)
   27834:	dc800217 	ldw	r18,8(sp)
   27838:	dc400117 	ldw	r17,4(sp)
   2783c:	dc000017 	ldw	r16,0(sp)
   27840:	dec00404 	addi	sp,sp,16
   27844:	f800283a 	ret
   27848:	00242e80 	call	242e8 <__sfp_lock_release>
   2784c:	0025883a 	mov	r18,zero
   27850:	9005883a 	mov	r2,r18
   27854:	dfc00317 	ldw	ra,12(sp)
   27858:	dc800217 	ldw	r18,8(sp)
   2785c:	dc400117 	ldw	r17,4(sp)
   27860:	dc000017 	ldw	r16,0(sp)
   27864:	dec00404 	addi	sp,sp,16
   27868:	f800283a 	ret
   2786c:	8809883a 	mov	r4,r17
   27870:	00242f40 	call	242f4 <__sinit>
   27874:	8080030f 	ldh	r2,12(r16)
   27878:	103fd11e 	bne	r2,zero,277c0 <_fclose_r+0x38>
   2787c:	003ff206 	br	27848 <_fclose_r+0xc0>
   27880:	81400417 	ldw	r5,16(r16)
   27884:	8809883a 	mov	r4,r17
   27888:	00246ac0 	call	246ac <_free_r>
   2788c:	003fd906 	br	277f4 <_fclose_r+0x6c>
   27890:	04bfffc4 	movi	r18,-1
   27894:	003fd406 	br	277e8 <_fclose_r+0x60>

00027898 <fclose>:
   27898:	008000f4 	movhi	r2,3
   2789c:	10ba7904 	addi	r2,r2,-5660
   278a0:	200b883a 	mov	r5,r4
   278a4:	11000017 	ldw	r4,0(r2)
   278a8:	00277881 	jmpi	27788 <_fclose_r>

000278ac <_fstat_r>:
   278ac:	defffd04 	addi	sp,sp,-12
   278b0:	dc000015 	stw	r16,0(sp)
   278b4:	040000f4 	movhi	r16,3
   278b8:	84012604 	addi	r16,r16,1176
   278bc:	dc400115 	stw	r17,4(sp)
   278c0:	80000015 	stw	zero,0(r16)
   278c4:	2023883a 	mov	r17,r4
   278c8:	2809883a 	mov	r4,r5
   278cc:	300b883a 	mov	r5,r6
   278d0:	dfc00215 	stw	ra,8(sp)
   278d4:	002a2080 	call	2a208 <fstat>
   278d8:	1007883a 	mov	r3,r2
   278dc:	00bfffc4 	movi	r2,-1
   278e0:	18800626 	beq	r3,r2,278fc <_fstat_r+0x50>
   278e4:	1805883a 	mov	r2,r3
   278e8:	dfc00217 	ldw	ra,8(sp)
   278ec:	dc400117 	ldw	r17,4(sp)
   278f0:	dc000017 	ldw	r16,0(sp)
   278f4:	dec00304 	addi	sp,sp,12
   278f8:	f800283a 	ret
   278fc:	80800017 	ldw	r2,0(r16)
   27900:	103ff826 	beq	r2,zero,278e4 <_fstat_r+0x38>
   27904:	88800015 	stw	r2,0(r17)
   27908:	1805883a 	mov	r2,r3
   2790c:	dfc00217 	ldw	ra,8(sp)
   27910:	dc400117 	ldw	r17,4(sp)
   27914:	dc000017 	ldw	r16,0(sp)
   27918:	dec00304 	addi	sp,sp,12
   2791c:	f800283a 	ret

00027920 <_isatty_r>:
   27920:	defffd04 	addi	sp,sp,-12
   27924:	dc000015 	stw	r16,0(sp)
   27928:	040000f4 	movhi	r16,3
   2792c:	84012604 	addi	r16,r16,1176
   27930:	dc400115 	stw	r17,4(sp)
   27934:	80000015 	stw	zero,0(r16)
   27938:	2023883a 	mov	r17,r4
   2793c:	2809883a 	mov	r4,r5
   27940:	dfc00215 	stw	ra,8(sp)
   27944:	002a5000 	call	2a500 <isatty>
   27948:	1007883a 	mov	r3,r2
   2794c:	00bfffc4 	movi	r2,-1
   27950:	18800626 	beq	r3,r2,2796c <_isatty_r+0x4c>
   27954:	1805883a 	mov	r2,r3
   27958:	dfc00217 	ldw	ra,8(sp)
   2795c:	dc400117 	ldw	r17,4(sp)
   27960:	dc000017 	ldw	r16,0(sp)
   27964:	dec00304 	addi	sp,sp,12
   27968:	f800283a 	ret
   2796c:	80800017 	ldw	r2,0(r16)
   27970:	103ff826 	beq	r2,zero,27954 <_isatty_r+0x34>
   27974:	88800015 	stw	r2,0(r17)
   27978:	1805883a 	mov	r2,r3
   2797c:	dfc00217 	ldw	ra,8(sp)
   27980:	dc400117 	ldw	r17,4(sp)
   27984:	dc000017 	ldw	r16,0(sp)
   27988:	dec00304 	addi	sp,sp,12
   2798c:	f800283a 	ret

00027990 <_lseek_r>:
   27990:	defffd04 	addi	sp,sp,-12
   27994:	dc000015 	stw	r16,0(sp)
   27998:	040000f4 	movhi	r16,3
   2799c:	84012604 	addi	r16,r16,1176
   279a0:	dc400115 	stw	r17,4(sp)
   279a4:	80000015 	stw	zero,0(r16)
   279a8:	2023883a 	mov	r17,r4
   279ac:	2809883a 	mov	r4,r5
   279b0:	300b883a 	mov	r5,r6
   279b4:	380d883a 	mov	r6,r7
   279b8:	dfc00215 	stw	ra,8(sp)
   279bc:	002a7100 	call	2a710 <lseek>
   279c0:	1007883a 	mov	r3,r2
   279c4:	00bfffc4 	movi	r2,-1
   279c8:	18800626 	beq	r3,r2,279e4 <_lseek_r+0x54>
   279cc:	1805883a 	mov	r2,r3
   279d0:	dfc00217 	ldw	ra,8(sp)
   279d4:	dc400117 	ldw	r17,4(sp)
   279d8:	dc000017 	ldw	r16,0(sp)
   279dc:	dec00304 	addi	sp,sp,12
   279e0:	f800283a 	ret
   279e4:	80800017 	ldw	r2,0(r16)
   279e8:	103ff826 	beq	r2,zero,279cc <_lseek_r+0x3c>
   279ec:	88800015 	stw	r2,0(r17)
   279f0:	1805883a 	mov	r2,r3
   279f4:	dfc00217 	ldw	ra,8(sp)
   279f8:	dc400117 	ldw	r17,4(sp)
   279fc:	dc000017 	ldw	r16,0(sp)
   27a00:	dec00304 	addi	sp,sp,12
   27a04:	f800283a 	ret

00027a08 <_read_r>:
   27a08:	defffd04 	addi	sp,sp,-12
   27a0c:	dc000015 	stw	r16,0(sp)
   27a10:	040000f4 	movhi	r16,3
   27a14:	84012604 	addi	r16,r16,1176
   27a18:	dc400115 	stw	r17,4(sp)
   27a1c:	80000015 	stw	zero,0(r16)
   27a20:	2023883a 	mov	r17,r4
   27a24:	2809883a 	mov	r4,r5
   27a28:	300b883a 	mov	r5,r6
   27a2c:	380d883a 	mov	r6,r7
   27a30:	dfc00215 	stw	ra,8(sp)
   27a34:	002a9100 	call	2a910 <read>
   27a38:	1007883a 	mov	r3,r2
   27a3c:	00bfffc4 	movi	r2,-1
   27a40:	18800626 	beq	r3,r2,27a5c <_read_r+0x54>
   27a44:	1805883a 	mov	r2,r3
   27a48:	dfc00217 	ldw	ra,8(sp)
   27a4c:	dc400117 	ldw	r17,4(sp)
   27a50:	dc000017 	ldw	r16,0(sp)
   27a54:	dec00304 	addi	sp,sp,12
   27a58:	f800283a 	ret
   27a5c:	80800017 	ldw	r2,0(r16)
   27a60:	103ff826 	beq	r2,zero,27a44 <_read_r+0x3c>
   27a64:	88800015 	stw	r2,0(r17)
   27a68:	1805883a 	mov	r2,r3
   27a6c:	dfc00217 	ldw	ra,8(sp)
   27a70:	dc400117 	ldw	r17,4(sp)
   27a74:	dc000017 	ldw	r16,0(sp)
   27a78:	dec00304 	addi	sp,sp,12
   27a7c:	f800283a 	ret

00027a80 <__udivdi3>:
   27a80:	defff104 	addi	sp,sp,-60
   27a84:	0015883a 	mov	r10,zero
   27a88:	2005883a 	mov	r2,r4
   27a8c:	3011883a 	mov	r8,r6
   27a90:	df000d15 	stw	fp,52(sp)
   27a94:	dd400a15 	stw	r21,40(sp)
   27a98:	dcc00815 	stw	r19,32(sp)
   27a9c:	dfc00e15 	stw	ra,56(sp)
   27aa0:	ddc00c15 	stw	r23,48(sp)
   27aa4:	dd800b15 	stw	r22,44(sp)
   27aa8:	dd000915 	stw	r20,36(sp)
   27aac:	dc800715 	stw	r18,28(sp)
   27ab0:	dc400615 	stw	r17,24(sp)
   27ab4:	dc000515 	stw	r16,20(sp)
   27ab8:	da800315 	stw	r10,12(sp)
   27abc:	4027883a 	mov	r19,r8
   27ac0:	1039883a 	mov	fp,r2
   27ac4:	282b883a 	mov	r21,r5
   27ac8:	da800415 	stw	r10,16(sp)
   27acc:	3800401e 	bne	r7,zero,27bd0 <__udivdi3+0x150>
   27ad0:	2a006536 	bltu	r5,r8,27c68 <__udivdi3+0x1e8>
   27ad4:	4000b526 	beq	r8,zero,27dac <__udivdi3+0x32c>
   27ad8:	00bfffd4 	movui	r2,65535
   27adc:	14c0ad36 	bltu	r2,r19,27d94 <__udivdi3+0x314>
   27ae0:	00803fc4 	movi	r2,255
   27ae4:	14c15e36 	bltu	r2,r19,28060 <__udivdi3+0x5e0>
   27ae8:	000b883a 	mov	r5,zero
   27aec:	0005883a 	mov	r2,zero
   27af0:	9884d83a 	srl	r2,r19,r2
   27af4:	010000f4 	movhi	r4,3
   27af8:	2133a504 	addi	r4,r4,-12652
   27afc:	01800804 	movi	r6,32
   27b00:	1105883a 	add	r2,r2,r4
   27b04:	10c00003 	ldbu	r3,0(r2)
   27b08:	28c7883a 	add	r3,r5,r3
   27b0c:	30e9c83a 	sub	r20,r6,r3
   27b10:	a0010a1e 	bne	r20,zero,27f3c <__udivdi3+0x4bc>
   27b14:	982ed43a 	srli	r23,r19,16
   27b18:	acebc83a 	sub	r21,r21,r19
   27b1c:	9dbfffcc 	andi	r22,r19,65535
   27b20:	05000044 	movi	r20,1
   27b24:	a809883a 	mov	r4,r21
   27b28:	b80b883a 	mov	r5,r23
   27b2c:	00299b40 	call	299b4 <__udivsi3>
   27b30:	100b883a 	mov	r5,r2
   27b34:	b009883a 	mov	r4,r22
   27b38:	1021883a 	mov	r16,r2
   27b3c:	00206100 	call	20610 <__mulsi3>
   27b40:	a809883a 	mov	r4,r21
   27b44:	b80b883a 	mov	r5,r23
   27b48:	1023883a 	mov	r17,r2
   27b4c:	00299bc0 	call	299bc <__umodsi3>
   27b50:	1004943a 	slli	r2,r2,16
   27b54:	e006d43a 	srli	r3,fp,16
   27b58:	10c4b03a 	or	r2,r2,r3
   27b5c:	1440042e 	bgeu	r2,r17,27b70 <__udivdi3+0xf0>
   27b60:	14c5883a 	add	r2,r2,r19
   27b64:	843fffc4 	addi	r16,r16,-1
   27b68:	14c00136 	bltu	r2,r19,27b70 <__udivdi3+0xf0>
   27b6c:	14415c36 	bltu	r2,r17,280e0 <__udivdi3+0x660>
   27b70:	1463c83a 	sub	r17,r2,r17
   27b74:	8809883a 	mov	r4,r17
   27b78:	b80b883a 	mov	r5,r23
   27b7c:	00299b40 	call	299b4 <__udivsi3>
   27b80:	100b883a 	mov	r5,r2
   27b84:	b009883a 	mov	r4,r22
   27b88:	102b883a 	mov	r21,r2
   27b8c:	00206100 	call	20610 <__mulsi3>
   27b90:	8809883a 	mov	r4,r17
   27b94:	b80b883a 	mov	r5,r23
   27b98:	1025883a 	mov	r18,r2
   27b9c:	00299bc0 	call	299bc <__umodsi3>
   27ba0:	1004943a 	slli	r2,r2,16
   27ba4:	e0ffffcc 	andi	r3,fp,65535
   27ba8:	10c4b03a 	or	r2,r2,r3
   27bac:	1480042e 	bgeu	r2,r18,27bc0 <__udivdi3+0x140>
   27bb0:	9885883a 	add	r2,r19,r2
   27bb4:	ad7fffc4 	addi	r21,r21,-1
   27bb8:	14c00136 	bltu	r2,r19,27bc0 <__udivdi3+0x140>
   27bbc:	14813c36 	bltu	r2,r18,280b0 <__udivdi3+0x630>
   27bc0:	8004943a 	slli	r2,r16,16
   27bc4:	a009883a 	mov	r4,r20
   27bc8:	a884b03a 	or	r2,r21,r2
   27bcc:	00001506 	br	27c24 <__udivdi3+0x1a4>
   27bd0:	380d883a 	mov	r6,r7
   27bd4:	29c06c36 	bltu	r5,r7,27d88 <__udivdi3+0x308>
   27bd8:	00bfffd4 	movui	r2,65535
   27bdc:	11c06436 	bltu	r2,r7,27d70 <__udivdi3+0x2f0>
   27be0:	00803fc4 	movi	r2,255
   27be4:	11c11836 	bltu	r2,r7,28048 <__udivdi3+0x5c8>
   27be8:	000b883a 	mov	r5,zero
   27bec:	0005883a 	mov	r2,zero
   27bf0:	3084d83a 	srl	r2,r6,r2
   27bf4:	010000f4 	movhi	r4,3
   27bf8:	2133a504 	addi	r4,r4,-12652
   27bfc:	01c00804 	movi	r7,32
   27c00:	1105883a 	add	r2,r2,r4
   27c04:	10c00003 	ldbu	r3,0(r2)
   27c08:	28c7883a 	add	r3,r5,r3
   27c0c:	38edc83a 	sub	r22,r7,r3
   27c10:	b000731e 	bne	r22,zero,27de0 <__udivdi3+0x360>
   27c14:	35400136 	bltu	r6,r21,27c1c <__udivdi3+0x19c>
   27c18:	e4c05b36 	bltu	fp,r19,27d88 <__udivdi3+0x308>
   27c1c:	00800044 	movi	r2,1
   27c20:	0009883a 	mov	r4,zero
   27c24:	d8800315 	stw	r2,12(sp)
   27c28:	d9400317 	ldw	r5,12(sp)
   27c2c:	d9000415 	stw	r4,16(sp)
   27c30:	2007883a 	mov	r3,r4
   27c34:	2805883a 	mov	r2,r5
   27c38:	dfc00e17 	ldw	ra,56(sp)
   27c3c:	df000d17 	ldw	fp,52(sp)
   27c40:	ddc00c17 	ldw	r23,48(sp)
   27c44:	dd800b17 	ldw	r22,44(sp)
   27c48:	dd400a17 	ldw	r21,40(sp)
   27c4c:	dd000917 	ldw	r20,36(sp)
   27c50:	dcc00817 	ldw	r19,32(sp)
   27c54:	dc800717 	ldw	r18,28(sp)
   27c58:	dc400617 	ldw	r17,24(sp)
   27c5c:	dc000517 	ldw	r16,20(sp)
   27c60:	dec00f04 	addi	sp,sp,60
   27c64:	f800283a 	ret
   27c68:	00bfffd4 	movui	r2,65535
   27c6c:	12005636 	bltu	r2,r8,27dc8 <__udivdi3+0x348>
   27c70:	00803fc4 	movi	r2,255
   27c74:	12010036 	bltu	r2,r8,28078 <__udivdi3+0x5f8>
   27c78:	000b883a 	mov	r5,zero
   27c7c:	0005883a 	mov	r2,zero
   27c80:	9884d83a 	srl	r2,r19,r2
   27c84:	010000f4 	movhi	r4,3
   27c88:	2133a504 	addi	r4,r4,-12652
   27c8c:	01800804 	movi	r6,32
   27c90:	1105883a 	add	r2,r2,r4
   27c94:	10c00003 	ldbu	r3,0(r2)
   27c98:	28c7883a 	add	r3,r5,r3
   27c9c:	30cbc83a 	sub	r5,r6,r3
   27ca0:	28000626 	beq	r5,zero,27cbc <__udivdi3+0x23c>
   27ca4:	3145c83a 	sub	r2,r6,r5
   27ca8:	e084d83a 	srl	r2,fp,r2
   27cac:	a946983a 	sll	r3,r21,r5
   27cb0:	e178983a 	sll	fp,fp,r5
   27cb4:	9966983a 	sll	r19,r19,r5
   27cb8:	18aab03a 	or	r21,r3,r2
   27cbc:	982ed43a 	srli	r23,r19,16
   27cc0:	a809883a 	mov	r4,r21
   27cc4:	9cbfffcc 	andi	r18,r19,65535
   27cc8:	b80b883a 	mov	r5,r23
   27ccc:	00299b40 	call	299b4 <__udivsi3>
   27cd0:	100b883a 	mov	r5,r2
   27cd4:	9009883a 	mov	r4,r18
   27cd8:	1021883a 	mov	r16,r2
   27cdc:	00206100 	call	20610 <__mulsi3>
   27ce0:	a809883a 	mov	r4,r21
   27ce4:	b80b883a 	mov	r5,r23
   27ce8:	1023883a 	mov	r17,r2
   27cec:	00299bc0 	call	299bc <__umodsi3>
   27cf0:	1004943a 	slli	r2,r2,16
   27cf4:	e006d43a 	srli	r3,fp,16
   27cf8:	10c4b03a 	or	r2,r2,r3
   27cfc:	1440042e 	bgeu	r2,r17,27d10 <__udivdi3+0x290>
   27d00:	14c5883a 	add	r2,r2,r19
   27d04:	843fffc4 	addi	r16,r16,-1
   27d08:	14c00136 	bltu	r2,r19,27d10 <__udivdi3+0x290>
   27d0c:	1440ea36 	bltu	r2,r17,280b8 <__udivdi3+0x638>
   27d10:	1463c83a 	sub	r17,r2,r17
   27d14:	8809883a 	mov	r4,r17
   27d18:	b80b883a 	mov	r5,r23
   27d1c:	00299b40 	call	299b4 <__udivsi3>
   27d20:	100b883a 	mov	r5,r2
   27d24:	9009883a 	mov	r4,r18
   27d28:	102b883a 	mov	r21,r2
   27d2c:	00206100 	call	20610 <__mulsi3>
   27d30:	8809883a 	mov	r4,r17
   27d34:	b80b883a 	mov	r5,r23
   27d38:	1025883a 	mov	r18,r2
   27d3c:	00299bc0 	call	299bc <__umodsi3>
   27d40:	1004943a 	slli	r2,r2,16
   27d44:	e0ffffcc 	andi	r3,fp,65535
   27d48:	10c4b03a 	or	r2,r2,r3
   27d4c:	1480042e 	bgeu	r2,r18,27d60 <__udivdi3+0x2e0>
   27d50:	9885883a 	add	r2,r19,r2
   27d54:	ad7fffc4 	addi	r21,r21,-1
   27d58:	14c00136 	bltu	r2,r19,27d60 <__udivdi3+0x2e0>
   27d5c:	1480d936 	bltu	r2,r18,280c4 <__udivdi3+0x644>
   27d60:	8004943a 	slli	r2,r16,16
   27d64:	0009883a 	mov	r4,zero
   27d68:	a884b03a 	or	r2,r21,r2
   27d6c:	003fad06 	br	27c24 <__udivdi3+0x1a4>
   27d70:	00804034 	movhi	r2,256
   27d74:	10bfffc4 	addi	r2,r2,-1
   27d78:	11c0b636 	bltu	r2,r7,28054 <__udivdi3+0x5d4>
   27d7c:	01400404 	movi	r5,16
   27d80:	2805883a 	mov	r2,r5
   27d84:	003f9a06 	br	27bf0 <__udivdi3+0x170>
   27d88:	0005883a 	mov	r2,zero
   27d8c:	0009883a 	mov	r4,zero
   27d90:	003fa406 	br	27c24 <__udivdi3+0x1a4>
   27d94:	00804034 	movhi	r2,256
   27d98:	10bfffc4 	addi	r2,r2,-1
   27d9c:	14c0b336 	bltu	r2,r19,2806c <__udivdi3+0x5ec>
   27da0:	01400404 	movi	r5,16
   27da4:	2805883a 	mov	r2,r5
   27da8:	003f5106 	br	27af0 <__udivdi3+0x70>
   27dac:	01000044 	movi	r4,1
   27db0:	000b883a 	mov	r5,zero
   27db4:	00299b40 	call	299b4 <__udivsi3>
   27db8:	1027883a 	mov	r19,r2
   27dbc:	00bfffd4 	movui	r2,65535
   27dc0:	14fff436 	bltu	r2,r19,27d94 <__udivdi3+0x314>
   27dc4:	003f4606 	br	27ae0 <__udivdi3+0x60>
   27dc8:	00804034 	movhi	r2,256
   27dcc:	10bfffc4 	addi	r2,r2,-1
   27dd0:	1200ac36 	bltu	r2,r8,28084 <__udivdi3+0x604>
   27dd4:	01400404 	movi	r5,16
   27dd8:	2805883a 	mov	r2,r5
   27ddc:	003fa806 	br	27c80 <__udivdi3+0x200>
   27de0:	3d85c83a 	sub	r2,r7,r22
   27de4:	3588983a 	sll	r4,r6,r22
   27de8:	9886d83a 	srl	r3,r19,r2
   27dec:	a8a2d83a 	srl	r17,r21,r2
   27df0:	e084d83a 	srl	r2,fp,r2
   27df4:	20eeb03a 	or	r23,r4,r3
   27df8:	b824d43a 	srli	r18,r23,16
   27dfc:	ad86983a 	sll	r3,r21,r22
   27e00:	8809883a 	mov	r4,r17
   27e04:	900b883a 	mov	r5,r18
   27e08:	1886b03a 	or	r3,r3,r2
   27e0c:	d8c00115 	stw	r3,4(sp)
   27e10:	bc3fffcc 	andi	r16,r23,65535
   27e14:	00299b40 	call	299b4 <__udivsi3>
   27e18:	100b883a 	mov	r5,r2
   27e1c:	8009883a 	mov	r4,r16
   27e20:	1029883a 	mov	r20,r2
   27e24:	00206100 	call	20610 <__mulsi3>
   27e28:	900b883a 	mov	r5,r18
   27e2c:	8809883a 	mov	r4,r17
   27e30:	102b883a 	mov	r21,r2
   27e34:	00299bc0 	call	299bc <__umodsi3>
   27e38:	d9400117 	ldw	r5,4(sp)
   27e3c:	1004943a 	slli	r2,r2,16
   27e40:	9da6983a 	sll	r19,r19,r22
   27e44:	2806d43a 	srli	r3,r5,16
   27e48:	10c4b03a 	or	r2,r2,r3
   27e4c:	1540032e 	bgeu	r2,r21,27e5c <__udivdi3+0x3dc>
   27e50:	15c5883a 	add	r2,r2,r23
   27e54:	a53fffc4 	addi	r20,r20,-1
   27e58:	15c0912e 	bgeu	r2,r23,280a0 <__udivdi3+0x620>
   27e5c:	1563c83a 	sub	r17,r2,r21
   27e60:	8809883a 	mov	r4,r17
   27e64:	900b883a 	mov	r5,r18
   27e68:	00299b40 	call	299b4 <__udivsi3>
   27e6c:	100b883a 	mov	r5,r2
   27e70:	8009883a 	mov	r4,r16
   27e74:	102b883a 	mov	r21,r2
   27e78:	00206100 	call	20610 <__mulsi3>
   27e7c:	8809883a 	mov	r4,r17
   27e80:	900b883a 	mov	r5,r18
   27e84:	1021883a 	mov	r16,r2
   27e88:	00299bc0 	call	299bc <__umodsi3>
   27e8c:	da800117 	ldw	r10,4(sp)
   27e90:	1004943a 	slli	r2,r2,16
   27e94:	50ffffcc 	andi	r3,r10,65535
   27e98:	10c6b03a 	or	r3,r2,r3
   27e9c:	1c00032e 	bgeu	r3,r16,27eac <__udivdi3+0x42c>
   27ea0:	1dc7883a 	add	r3,r3,r23
   27ea4:	ad7fffc4 	addi	r21,r21,-1
   27ea8:	1dc0792e 	bgeu	r3,r23,28090 <__udivdi3+0x610>
   27eac:	a004943a 	slli	r2,r20,16
   27eb0:	982ed43a 	srli	r23,r19,16
   27eb4:	9cffffcc 	andi	r19,r19,65535
   27eb8:	a8a4b03a 	or	r18,r21,r2
   27ebc:	947fffcc 	andi	r17,r18,65535
   27ec0:	902ad43a 	srli	r21,r18,16
   27ec4:	8809883a 	mov	r4,r17
   27ec8:	980b883a 	mov	r5,r19
   27ecc:	1c21c83a 	sub	r16,r3,r16
   27ed0:	00206100 	call	20610 <__mulsi3>
   27ed4:	8809883a 	mov	r4,r17
   27ed8:	b80b883a 	mov	r5,r23
   27edc:	1029883a 	mov	r20,r2
   27ee0:	00206100 	call	20610 <__mulsi3>
   27ee4:	980b883a 	mov	r5,r19
   27ee8:	a809883a 	mov	r4,r21
   27eec:	1023883a 	mov	r17,r2
   27ef0:	00206100 	call	20610 <__mulsi3>
   27ef4:	a809883a 	mov	r4,r21
   27ef8:	b80b883a 	mov	r5,r23
   27efc:	1027883a 	mov	r19,r2
   27f00:	00206100 	call	20610 <__mulsi3>
   27f04:	1009883a 	mov	r4,r2
   27f08:	a004d43a 	srli	r2,r20,16
   27f0c:	8ce3883a 	add	r17,r17,r19
   27f10:	1447883a 	add	r3,r2,r17
   27f14:	1cc0022e 	bgeu	r3,r19,27f20 <__udivdi3+0x4a0>
   27f18:	00800074 	movhi	r2,1
   27f1c:	2089883a 	add	r4,r4,r2
   27f20:	1804d43a 	srli	r2,r3,16
   27f24:	2085883a 	add	r2,r4,r2
   27f28:	80804436 	bltu	r16,r2,2803c <__udivdi3+0x5bc>
   27f2c:	80803e26 	beq	r16,r2,28028 <__udivdi3+0x5a8>
   27f30:	9005883a 	mov	r2,r18
   27f34:	0009883a 	mov	r4,zero
   27f38:	003f3a06 	br	27c24 <__udivdi3+0x1a4>
   27f3c:	9d26983a 	sll	r19,r19,r20
   27f40:	3505c83a 	sub	r2,r6,r20
   27f44:	a8a2d83a 	srl	r17,r21,r2
   27f48:	982ed43a 	srli	r23,r19,16
   27f4c:	e084d83a 	srl	r2,fp,r2
   27f50:	ad06983a 	sll	r3,r21,r20
   27f54:	8809883a 	mov	r4,r17
   27f58:	b80b883a 	mov	r5,r23
   27f5c:	1886b03a 	or	r3,r3,r2
   27f60:	d8c00015 	stw	r3,0(sp)
   27f64:	9dbfffcc 	andi	r22,r19,65535
   27f68:	00299b40 	call	299b4 <__udivsi3>
   27f6c:	100b883a 	mov	r5,r2
   27f70:	b009883a 	mov	r4,r22
   27f74:	d8800215 	stw	r2,8(sp)
   27f78:	00206100 	call	20610 <__mulsi3>
   27f7c:	8809883a 	mov	r4,r17
   27f80:	b80b883a 	mov	r5,r23
   27f84:	102b883a 	mov	r21,r2
   27f88:	00299bc0 	call	299bc <__umodsi3>
   27f8c:	d9000017 	ldw	r4,0(sp)
   27f90:	1004943a 	slli	r2,r2,16
   27f94:	2006d43a 	srli	r3,r4,16
   27f98:	10c4b03a 	or	r2,r2,r3
   27f9c:	1540052e 	bgeu	r2,r21,27fb4 <__udivdi3+0x534>
   27fa0:	d9400217 	ldw	r5,8(sp)
   27fa4:	14c5883a 	add	r2,r2,r19
   27fa8:	297fffc4 	addi	r5,r5,-1
   27fac:	d9400215 	stw	r5,8(sp)
   27fb0:	14c0462e 	bgeu	r2,r19,280cc <__udivdi3+0x64c>
   27fb4:	1563c83a 	sub	r17,r2,r21
   27fb8:	8809883a 	mov	r4,r17
   27fbc:	b80b883a 	mov	r5,r23
   27fc0:	00299b40 	call	299b4 <__udivsi3>
   27fc4:	100b883a 	mov	r5,r2
   27fc8:	b009883a 	mov	r4,r22
   27fcc:	1025883a 	mov	r18,r2
   27fd0:	00206100 	call	20610 <__mulsi3>
   27fd4:	8809883a 	mov	r4,r17
   27fd8:	b80b883a 	mov	r5,r23
   27fdc:	1021883a 	mov	r16,r2
   27fe0:	00299bc0 	call	299bc <__umodsi3>
   27fe4:	da800017 	ldw	r10,0(sp)
   27fe8:	1004943a 	slli	r2,r2,16
   27fec:	50ffffcc 	andi	r3,r10,65535
   27ff0:	10c6b03a 	or	r3,r2,r3
   27ff4:	1c00062e 	bgeu	r3,r16,28010 <__udivdi3+0x590>
   27ff8:	1cc7883a 	add	r3,r3,r19
   27ffc:	94bfffc4 	addi	r18,r18,-1
   28000:	1cc00336 	bltu	r3,r19,28010 <__udivdi3+0x590>
   28004:	1c00022e 	bgeu	r3,r16,28010 <__udivdi3+0x590>
   28008:	94bfffc4 	addi	r18,r18,-1
   2800c:	1cc7883a 	add	r3,r3,r19
   28010:	d9000217 	ldw	r4,8(sp)
   28014:	e538983a 	sll	fp,fp,r20
   28018:	1c2bc83a 	sub	r21,r3,r16
   2801c:	2004943a 	slli	r2,r4,16
   28020:	90a8b03a 	or	r20,r18,r2
   28024:	003ebf06 	br	27b24 <__udivdi3+0xa4>
   28028:	1804943a 	slli	r2,r3,16
   2802c:	e588983a 	sll	r4,fp,r22
   28030:	a0ffffcc 	andi	r3,r20,65535
   28034:	10c5883a 	add	r2,r2,r3
   28038:	20bfbd2e 	bgeu	r4,r2,27f30 <__udivdi3+0x4b0>
   2803c:	90bfffc4 	addi	r2,r18,-1
   28040:	0009883a 	mov	r4,zero
   28044:	003ef706 	br	27c24 <__udivdi3+0x1a4>
   28048:	01400204 	movi	r5,8
   2804c:	2805883a 	mov	r2,r5
   28050:	003ee706 	br	27bf0 <__udivdi3+0x170>
   28054:	01400604 	movi	r5,24
   28058:	2805883a 	mov	r2,r5
   2805c:	003ee406 	br	27bf0 <__udivdi3+0x170>
   28060:	01400204 	movi	r5,8
   28064:	2805883a 	mov	r2,r5
   28068:	003ea106 	br	27af0 <__udivdi3+0x70>
   2806c:	01400604 	movi	r5,24
   28070:	2805883a 	mov	r2,r5
   28074:	003e9e06 	br	27af0 <__udivdi3+0x70>
   28078:	01400204 	movi	r5,8
   2807c:	2805883a 	mov	r2,r5
   28080:	003eff06 	br	27c80 <__udivdi3+0x200>
   28084:	01400604 	movi	r5,24
   28088:	2805883a 	mov	r2,r5
   2808c:	003efc06 	br	27c80 <__udivdi3+0x200>
   28090:	1c3f862e 	bgeu	r3,r16,27eac <__udivdi3+0x42c>
   28094:	1dc7883a 	add	r3,r3,r23
   28098:	ad7fffc4 	addi	r21,r21,-1
   2809c:	003f8306 	br	27eac <__udivdi3+0x42c>
   280a0:	157f6e2e 	bgeu	r2,r21,27e5c <__udivdi3+0x3dc>
   280a4:	a53fffc4 	addi	r20,r20,-1
   280a8:	15c5883a 	add	r2,r2,r23
   280ac:	003f6b06 	br	27e5c <__udivdi3+0x3dc>
   280b0:	ad7fffc4 	addi	r21,r21,-1
   280b4:	003ec206 	br	27bc0 <__udivdi3+0x140>
   280b8:	843fffc4 	addi	r16,r16,-1
   280bc:	14c5883a 	add	r2,r2,r19
   280c0:	003f1306 	br	27d10 <__udivdi3+0x290>
   280c4:	ad7fffc4 	addi	r21,r21,-1
   280c8:	003f2506 	br	27d60 <__udivdi3+0x2e0>
   280cc:	157fb92e 	bgeu	r2,r21,27fb4 <__udivdi3+0x534>
   280d0:	297fffc4 	addi	r5,r5,-1
   280d4:	14c5883a 	add	r2,r2,r19
   280d8:	d9400215 	stw	r5,8(sp)
   280dc:	003fb506 	br	27fb4 <__udivdi3+0x534>
   280e0:	843fffc4 	addi	r16,r16,-1
   280e4:	14c5883a 	add	r2,r2,r19
   280e8:	003ea106 	br	27b70 <__udivdi3+0xf0>

000280ec <__umoddi3>:
   280ec:	defff004 	addi	sp,sp,-64
   280f0:	3011883a 	mov	r8,r6
   280f4:	000d883a 	mov	r6,zero
   280f8:	dd400b15 	stw	r21,44(sp)
   280fc:	dcc00915 	stw	r19,36(sp)
   28100:	dc000615 	stw	r16,24(sp)
   28104:	dfc00f15 	stw	ra,60(sp)
   28108:	df000e15 	stw	fp,56(sp)
   2810c:	ddc00d15 	stw	r23,52(sp)
   28110:	dd800c15 	stw	r22,48(sp)
   28114:	dd000a15 	stw	r20,40(sp)
   28118:	dc800815 	stw	r18,32(sp)
   2811c:	dc400715 	stw	r17,28(sp)
   28120:	2817883a 	mov	r11,r5
   28124:	d9800415 	stw	r6,16(sp)
   28128:	4027883a 	mov	r19,r8
   2812c:	d9800515 	stw	r6,20(sp)
   28130:	2021883a 	mov	r16,r4
   28134:	282b883a 	mov	r21,r5
   28138:	38002c1e 	bne	r7,zero,281ec <__umoddi3+0x100>
   2813c:	2a005636 	bltu	r5,r8,28298 <__umoddi3+0x1ac>
   28140:	40009a26 	beq	r8,zero,283ac <__umoddi3+0x2c0>
   28144:	00bfffd4 	movui	r2,65535
   28148:	14c09236 	bltu	r2,r19,28394 <__umoddi3+0x2a8>
   2814c:	00803fc4 	movi	r2,255
   28150:	14c15c36 	bltu	r2,r19,286c4 <__umoddi3+0x5d8>
   28154:	000b883a 	mov	r5,zero
   28158:	0005883a 	mov	r2,zero
   2815c:	9884d83a 	srl	r2,r19,r2
   28160:	010000f4 	movhi	r4,3
   28164:	2133a504 	addi	r4,r4,-12652
   28168:	01800804 	movi	r6,32
   2816c:	1105883a 	add	r2,r2,r4
   28170:	10c00003 	ldbu	r3,0(r2)
   28174:	28c7883a 	add	r3,r5,r3
   28178:	30e5c83a 	sub	r18,r6,r3
   2817c:	9000a41e 	bne	r18,zero,28410 <__umoddi3+0x324>
   28180:	982ed43a 	srli	r23,r19,16
   28184:	acebc83a 	sub	r21,r21,r19
   28188:	9d3fffcc 	andi	r20,r19,65535
   2818c:	002d883a 	mov	r22,zero
   28190:	a809883a 	mov	r4,r21
   28194:	b80b883a 	mov	r5,r23
   28198:	00299b40 	call	299b4 <__udivsi3>
   2819c:	100b883a 	mov	r5,r2
   281a0:	a009883a 	mov	r4,r20
   281a4:	00206100 	call	20610 <__mulsi3>
   281a8:	a809883a 	mov	r4,r21
   281ac:	b80b883a 	mov	r5,r23
   281b0:	1023883a 	mov	r17,r2
   281b4:	00299bc0 	call	299bc <__umodsi3>
   281b8:	1004943a 	slli	r2,r2,16
   281bc:	8006d43a 	srli	r3,r16,16
   281c0:	10c4b03a 	or	r2,r2,r3
   281c4:	1440032e 	bgeu	r2,r17,281d4 <__umoddi3+0xe8>
   281c8:	14c5883a 	add	r2,r2,r19
   281cc:	14c00136 	bltu	r2,r19,281d4 <__umoddi3+0xe8>
   281d0:	14415836 	bltu	r2,r17,28734 <__umoddi3+0x648>
   281d4:	1463c83a 	sub	r17,r2,r17
   281d8:	8809883a 	mov	r4,r17
   281dc:	b80b883a 	mov	r5,r23
   281e0:	00299b40 	call	299b4 <__udivsi3>
   281e4:	a009883a 	mov	r4,r20
   281e8:	00005306 	br	28338 <__umoddi3+0x24c>
   281ec:	380d883a 	mov	r6,r7
   281f0:	29c0132e 	bgeu	r5,r7,28240 <__umoddi3+0x154>
   281f4:	d9000415 	stw	r4,16(sp)
   281f8:	d9400515 	stw	r5,20(sp)
   281fc:	d9400417 	ldw	r5,16(sp)
   28200:	5813883a 	mov	r9,r11
   28204:	2811883a 	mov	r8,r5
   28208:	4005883a 	mov	r2,r8
   2820c:	4807883a 	mov	r3,r9
   28210:	dfc00f17 	ldw	ra,60(sp)
   28214:	df000e17 	ldw	fp,56(sp)
   28218:	ddc00d17 	ldw	r23,52(sp)
   2821c:	dd800c17 	ldw	r22,48(sp)
   28220:	dd400b17 	ldw	r21,44(sp)
   28224:	dd000a17 	ldw	r20,40(sp)
   28228:	dcc00917 	ldw	r19,36(sp)
   2822c:	dc800817 	ldw	r18,32(sp)
   28230:	dc400717 	ldw	r17,28(sp)
   28234:	dc000617 	ldw	r16,24(sp)
   28238:	dec01004 	addi	sp,sp,64
   2823c:	f800283a 	ret
   28240:	00bfffd4 	movui	r2,65535
   28244:	11c06636 	bltu	r2,r7,283e0 <__umoddi3+0x2f4>
   28248:	00803fc4 	movi	r2,255
   2824c:	11c12036 	bltu	r2,r7,286d0 <__umoddi3+0x5e4>
   28250:	000b883a 	mov	r5,zero
   28254:	0005883a 	mov	r2,zero
   28258:	3084d83a 	srl	r2,r6,r2
   2825c:	010000f4 	movhi	r4,3
   28260:	2133a504 	addi	r4,r4,-12652
   28264:	01c00804 	movi	r7,32
   28268:	1105883a 	add	r2,r2,r4
   2826c:	10c00003 	ldbu	r3,0(r2)
   28270:	28c7883a 	add	r3,r5,r3
   28274:	38e5c83a 	sub	r18,r7,r3
   28278:	9000941e 	bne	r18,zero,284cc <__umoddi3+0x3e0>
   2827c:	35405e36 	bltu	r6,r21,283f8 <__umoddi3+0x30c>
   28280:	84c05d2e 	bgeu	r16,r19,283f8 <__umoddi3+0x30c>
   28284:	8011883a 	mov	r8,r16
   28288:	a813883a 	mov	r9,r21
   2828c:	dc000415 	stw	r16,16(sp)
   28290:	dd400515 	stw	r21,20(sp)
   28294:	003fdc06 	br	28208 <__umoddi3+0x11c>
   28298:	00bfffd4 	movui	r2,65535
   2829c:	12004a36 	bltu	r2,r8,283c8 <__umoddi3+0x2dc>
   282a0:	00803fc4 	movi	r2,255
   282a4:	12010d36 	bltu	r2,r8,286dc <__umoddi3+0x5f0>
   282a8:	000b883a 	mov	r5,zero
   282ac:	0005883a 	mov	r2,zero
   282b0:	9884d83a 	srl	r2,r19,r2
   282b4:	010000f4 	movhi	r4,3
   282b8:	2133a504 	addi	r4,r4,-12652
   282bc:	01800804 	movi	r6,32
   282c0:	1105883a 	add	r2,r2,r4
   282c4:	10c00003 	ldbu	r3,0(r2)
   282c8:	28c7883a 	add	r3,r5,r3
   282cc:	30c7c83a 	sub	r3,r6,r3
   282d0:	1800dc1e 	bne	r3,zero,28644 <__umoddi3+0x558>
   282d4:	002d883a 	mov	r22,zero
   282d8:	982ed43a 	srli	r23,r19,16
   282dc:	a809883a 	mov	r4,r21
   282e0:	9cbfffcc 	andi	r18,r19,65535
   282e4:	b80b883a 	mov	r5,r23
   282e8:	00299b40 	call	299b4 <__udivsi3>
   282ec:	100b883a 	mov	r5,r2
   282f0:	9009883a 	mov	r4,r18
   282f4:	00206100 	call	20610 <__mulsi3>
   282f8:	a809883a 	mov	r4,r21
   282fc:	b80b883a 	mov	r5,r23
   28300:	1023883a 	mov	r17,r2
   28304:	00299bc0 	call	299bc <__umodsi3>
   28308:	1004943a 	slli	r2,r2,16
   2830c:	8006d43a 	srli	r3,r16,16
   28310:	10c4b03a 	or	r2,r2,r3
   28314:	1440032e 	bgeu	r2,r17,28324 <__umoddi3+0x238>
   28318:	14c5883a 	add	r2,r2,r19
   2831c:	14c00136 	bltu	r2,r19,28324 <__umoddi3+0x238>
   28320:	14410236 	bltu	r2,r17,2872c <__umoddi3+0x640>
   28324:	1463c83a 	sub	r17,r2,r17
   28328:	8809883a 	mov	r4,r17
   2832c:	b80b883a 	mov	r5,r23
   28330:	00299b40 	call	299b4 <__udivsi3>
   28334:	9009883a 	mov	r4,r18
   28338:	100b883a 	mov	r5,r2
   2833c:	00206100 	call	20610 <__mulsi3>
   28340:	8809883a 	mov	r4,r17
   28344:	b80b883a 	mov	r5,r23
   28348:	102b883a 	mov	r21,r2
   2834c:	00299bc0 	call	299bc <__umodsi3>
   28350:	1004943a 	slli	r2,r2,16
   28354:	80ffffcc 	andi	r3,r16,65535
   28358:	10c4b03a 	or	r2,r2,r3
   2835c:	1540042e 	bgeu	r2,r21,28370 <__umoddi3+0x284>
   28360:	14c5883a 	add	r2,r2,r19
   28364:	14c00236 	bltu	r2,r19,28370 <__umoddi3+0x284>
   28368:	1540012e 	bgeu	r2,r21,28370 <__umoddi3+0x284>
   2836c:	14c5883a 	add	r2,r2,r19
   28370:	1545c83a 	sub	r2,r2,r21
   28374:	1584d83a 	srl	r2,r2,r22
   28378:	0013883a 	mov	r9,zero
   2837c:	d8800415 	stw	r2,16(sp)
   28380:	d8c00417 	ldw	r3,16(sp)
   28384:	0005883a 	mov	r2,zero
   28388:	d8800515 	stw	r2,20(sp)
   2838c:	1811883a 	mov	r8,r3
   28390:	003f9d06 	br	28208 <__umoddi3+0x11c>
   28394:	00804034 	movhi	r2,256
   28398:	10bfffc4 	addi	r2,r2,-1
   2839c:	14c0c636 	bltu	r2,r19,286b8 <__umoddi3+0x5cc>
   283a0:	01400404 	movi	r5,16
   283a4:	2805883a 	mov	r2,r5
   283a8:	003f6c06 	br	2815c <__umoddi3+0x70>
   283ac:	01000044 	movi	r4,1
   283b0:	000b883a 	mov	r5,zero
   283b4:	00299b40 	call	299b4 <__udivsi3>
   283b8:	1027883a 	mov	r19,r2
   283bc:	00bfffd4 	movui	r2,65535
   283c0:	14fff436 	bltu	r2,r19,28394 <__umoddi3+0x2a8>
   283c4:	003f6106 	br	2814c <__umoddi3+0x60>
   283c8:	00804034 	movhi	r2,256
   283cc:	10bfffc4 	addi	r2,r2,-1
   283d0:	1200c536 	bltu	r2,r8,286e8 <__umoddi3+0x5fc>
   283d4:	01400404 	movi	r5,16
   283d8:	2805883a 	mov	r2,r5
   283dc:	003fb406 	br	282b0 <__umoddi3+0x1c4>
   283e0:	00804034 	movhi	r2,256
   283e4:	10bfffc4 	addi	r2,r2,-1
   283e8:	11c0c236 	bltu	r2,r7,286f4 <__umoddi3+0x608>
   283ec:	01400404 	movi	r5,16
   283f0:	2805883a 	mov	r2,r5
   283f4:	003f9806 	br	28258 <__umoddi3+0x16c>
   283f8:	84c9c83a 	sub	r4,r16,r19
   283fc:	8105803a 	cmpltu	r2,r16,r4
   28400:	a987c83a 	sub	r3,r21,r6
   28404:	18abc83a 	sub	r21,r3,r2
   28408:	2021883a 	mov	r16,r4
   2840c:	003f9d06 	br	28284 <__umoddi3+0x198>
   28410:	9ca6983a 	sll	r19,r19,r18
   28414:	3485c83a 	sub	r2,r6,r18
   28418:	a8a2d83a 	srl	r17,r21,r2
   2841c:	982ed43a 	srli	r23,r19,16
   28420:	ac86983a 	sll	r3,r21,r18
   28424:	8084d83a 	srl	r2,r16,r2
   28428:	8809883a 	mov	r4,r17
   2842c:	b80b883a 	mov	r5,r23
   28430:	18b8b03a 	or	fp,r3,r2
   28434:	9d3fffcc 	andi	r20,r19,65535
   28438:	00299b40 	call	299b4 <__udivsi3>
   2843c:	100b883a 	mov	r5,r2
   28440:	a009883a 	mov	r4,r20
   28444:	00206100 	call	20610 <__mulsi3>
   28448:	8809883a 	mov	r4,r17
   2844c:	b80b883a 	mov	r5,r23
   28450:	102b883a 	mov	r21,r2
   28454:	00299bc0 	call	299bc <__umodsi3>
   28458:	1004943a 	slli	r2,r2,16
   2845c:	e006d43a 	srli	r3,fp,16
   28460:	902d883a 	mov	r22,r18
   28464:	10c4b03a 	or	r2,r2,r3
   28468:	1540022e 	bgeu	r2,r21,28474 <__umoddi3+0x388>
   2846c:	14c5883a 	add	r2,r2,r19
   28470:	14c0ab2e 	bgeu	r2,r19,28720 <__umoddi3+0x634>
   28474:	1563c83a 	sub	r17,r2,r21
   28478:	8809883a 	mov	r4,r17
   2847c:	b80b883a 	mov	r5,r23
   28480:	00299b40 	call	299b4 <__udivsi3>
   28484:	100b883a 	mov	r5,r2
   28488:	a009883a 	mov	r4,r20
   2848c:	00206100 	call	20610 <__mulsi3>
   28490:	8809883a 	mov	r4,r17
   28494:	b80b883a 	mov	r5,r23
   28498:	102b883a 	mov	r21,r2
   2849c:	00299bc0 	call	299bc <__umodsi3>
   284a0:	1004943a 	slli	r2,r2,16
   284a4:	e0ffffcc 	andi	r3,fp,65535
   284a8:	10c4b03a 	or	r2,r2,r3
   284ac:	1540042e 	bgeu	r2,r21,284c0 <__umoddi3+0x3d4>
   284b0:	14c5883a 	add	r2,r2,r19
   284b4:	14c00236 	bltu	r2,r19,284c0 <__umoddi3+0x3d4>
   284b8:	1540012e 	bgeu	r2,r21,284c0 <__umoddi3+0x3d4>
   284bc:	14c5883a 	add	r2,r2,r19
   284c0:	84a0983a 	sll	r16,r16,r18
   284c4:	156bc83a 	sub	r21,r2,r21
   284c8:	003f3106 	br	28190 <__umoddi3+0xa4>
   284cc:	3c8fc83a 	sub	r7,r7,r18
   284d0:	3486983a 	sll	r3,r6,r18
   284d4:	99c4d83a 	srl	r2,r19,r7
   284d8:	a9e2d83a 	srl	r17,r21,r7
   284dc:	ac8c983a 	sll	r6,r21,r18
   284e0:	18acb03a 	or	r22,r3,r2
   284e4:	b02ed43a 	srli	r23,r22,16
   284e8:	81c4d83a 	srl	r2,r16,r7
   284ec:	8809883a 	mov	r4,r17
   284f0:	b80b883a 	mov	r5,r23
   284f4:	308cb03a 	or	r6,r6,r2
   284f8:	d9c00315 	stw	r7,12(sp)
   284fc:	d9800215 	stw	r6,8(sp)
   28500:	b53fffcc 	andi	r20,r22,65535
   28504:	00299b40 	call	299b4 <__udivsi3>
   28508:	100b883a 	mov	r5,r2
   2850c:	a009883a 	mov	r4,r20
   28510:	1039883a 	mov	fp,r2
   28514:	00206100 	call	20610 <__mulsi3>
   28518:	8809883a 	mov	r4,r17
   2851c:	b80b883a 	mov	r5,r23
   28520:	102b883a 	mov	r21,r2
   28524:	00299bc0 	call	299bc <__umodsi3>
   28528:	d9000217 	ldw	r4,8(sp)
   2852c:	1004943a 	slli	r2,r2,16
   28530:	9ca6983a 	sll	r19,r19,r18
   28534:	2006d43a 	srli	r3,r4,16
   28538:	84a0983a 	sll	r16,r16,r18
   2853c:	dcc00015 	stw	r19,0(sp)
   28540:	10c4b03a 	or	r2,r2,r3
   28544:	dc000115 	stw	r16,4(sp)
   28548:	1540032e 	bgeu	r2,r21,28558 <__umoddi3+0x46c>
   2854c:	1585883a 	add	r2,r2,r22
   28550:	e73fffc4 	addi	fp,fp,-1
   28554:	15806e2e 	bgeu	r2,r22,28710 <__umoddi3+0x624>
   28558:	1563c83a 	sub	r17,r2,r21
   2855c:	8809883a 	mov	r4,r17
   28560:	b80b883a 	mov	r5,r23
   28564:	00299b40 	call	299b4 <__udivsi3>
   28568:	100b883a 	mov	r5,r2
   2856c:	a009883a 	mov	r4,r20
   28570:	1021883a 	mov	r16,r2
   28574:	00206100 	call	20610 <__mulsi3>
   28578:	b80b883a 	mov	r5,r23
   2857c:	8809883a 	mov	r4,r17
   28580:	1029883a 	mov	r20,r2
   28584:	00299bc0 	call	299bc <__umodsi3>
   28588:	d9400217 	ldw	r5,8(sp)
   2858c:	1004943a 	slli	r2,r2,16
   28590:	28ffffcc 	andi	r3,r5,65535
   28594:	10c4b03a 	or	r2,r2,r3
   28598:	1500032e 	bgeu	r2,r20,285a8 <__umoddi3+0x4bc>
   2859c:	1585883a 	add	r2,r2,r22
   285a0:	843fffc4 	addi	r16,r16,-1
   285a4:	1580562e 	bgeu	r2,r22,28700 <__umoddi3+0x614>
   285a8:	d9800017 	ldw	r6,0(sp)
   285ac:	e022943a 	slli	r17,fp,16
   285b0:	302ed43a 	srli	r23,r6,16
   285b4:	8462b03a 	or	r17,r16,r17
   285b8:	34ffffcc 	andi	r19,r6,65535
   285bc:	882ad43a 	srli	r21,r17,16
   285c0:	8c7fffcc 	andi	r17,r17,65535
   285c4:	8809883a 	mov	r4,r17
   285c8:	980b883a 	mov	r5,r19
   285cc:	1521c83a 	sub	r16,r2,r20
   285d0:	00206100 	call	20610 <__mulsi3>
   285d4:	8809883a 	mov	r4,r17
   285d8:	b80b883a 	mov	r5,r23
   285dc:	1029883a 	mov	r20,r2
   285e0:	00206100 	call	20610 <__mulsi3>
   285e4:	980b883a 	mov	r5,r19
   285e8:	a809883a 	mov	r4,r21
   285ec:	1023883a 	mov	r17,r2
   285f0:	00206100 	call	20610 <__mulsi3>
   285f4:	a809883a 	mov	r4,r21
   285f8:	b80b883a 	mov	r5,r23
   285fc:	1027883a 	mov	r19,r2
   28600:	00206100 	call	20610 <__mulsi3>
   28604:	100b883a 	mov	r5,r2
   28608:	a004d43a 	srli	r2,r20,16
   2860c:	8ce3883a 	add	r17,r17,r19
   28610:	1449883a 	add	r4,r2,r17
   28614:	24c0022e 	bgeu	r4,r19,28620 <__umoddi3+0x534>
   28618:	00800074 	movhi	r2,1
   2861c:	288b883a 	add	r5,r5,r2
   28620:	2004d43a 	srli	r2,r4,16
   28624:	2008943a 	slli	r4,r4,16
   28628:	a0ffffcc 	andi	r3,r20,65535
   2862c:	288d883a 	add	r6,r5,r2
   28630:	20c9883a 	add	r4,r4,r3
   28634:	81800b36 	bltu	r16,r6,28664 <__umoddi3+0x578>
   28638:	81804026 	beq	r16,r6,2873c <__umoddi3+0x650>
   2863c:	818dc83a 	sub	r6,r16,r6
   28640:	00000f06 	br	28680 <__umoddi3+0x594>
   28644:	30c5c83a 	sub	r2,r6,r3
   28648:	182d883a 	mov	r22,r3
   2864c:	8084d83a 	srl	r2,r16,r2
   28650:	a8c6983a 	sll	r3,r21,r3
   28654:	9da6983a 	sll	r19,r19,r22
   28658:	85a0983a 	sll	r16,r16,r22
   2865c:	18aab03a 	or	r21,r3,r2
   28660:	003f1d06 	br	282d8 <__umoddi3+0x1ec>
   28664:	d8c00017 	ldw	r3,0(sp)
   28668:	20c5c83a 	sub	r2,r4,r3
   2866c:	2089803a 	cmpltu	r4,r4,r2
   28670:	3587c83a 	sub	r3,r6,r22
   28674:	1907c83a 	sub	r3,r3,r4
   28678:	80cdc83a 	sub	r6,r16,r3
   2867c:	1009883a 	mov	r4,r2
   28680:	d9400117 	ldw	r5,4(sp)
   28684:	2905c83a 	sub	r2,r5,r4
   28688:	2887803a 	cmpltu	r3,r5,r2
   2868c:	30c7c83a 	sub	r3,r6,r3
   28690:	d9800317 	ldw	r6,12(sp)
   28694:	1484d83a 	srl	r2,r2,r18
   28698:	1988983a 	sll	r4,r3,r6
   2869c:	1c86d83a 	srl	r3,r3,r18
   286a0:	2088b03a 	or	r4,r4,r2
   286a4:	2011883a 	mov	r8,r4
   286a8:	1813883a 	mov	r9,r3
   286ac:	d9000415 	stw	r4,16(sp)
   286b0:	d8c00515 	stw	r3,20(sp)
   286b4:	003ed406 	br	28208 <__umoddi3+0x11c>
   286b8:	01400604 	movi	r5,24
   286bc:	2805883a 	mov	r2,r5
   286c0:	003ea606 	br	2815c <__umoddi3+0x70>
   286c4:	01400204 	movi	r5,8
   286c8:	2805883a 	mov	r2,r5
   286cc:	003ea306 	br	2815c <__umoddi3+0x70>
   286d0:	01400204 	movi	r5,8
   286d4:	2805883a 	mov	r2,r5
   286d8:	003edf06 	br	28258 <__umoddi3+0x16c>
   286dc:	01400204 	movi	r5,8
   286e0:	2805883a 	mov	r2,r5
   286e4:	003ef206 	br	282b0 <__umoddi3+0x1c4>
   286e8:	01400604 	movi	r5,24
   286ec:	2805883a 	mov	r2,r5
   286f0:	003eef06 	br	282b0 <__umoddi3+0x1c4>
   286f4:	01400604 	movi	r5,24
   286f8:	2805883a 	mov	r2,r5
   286fc:	003ed606 	br	28258 <__umoddi3+0x16c>
   28700:	153fa92e 	bgeu	r2,r20,285a8 <__umoddi3+0x4bc>
   28704:	843fffc4 	addi	r16,r16,-1
   28708:	1585883a 	add	r2,r2,r22
   2870c:	003fa606 	br	285a8 <__umoddi3+0x4bc>
   28710:	157f912e 	bgeu	r2,r21,28558 <__umoddi3+0x46c>
   28714:	e73fffc4 	addi	fp,fp,-1
   28718:	1585883a 	add	r2,r2,r22
   2871c:	003f8e06 	br	28558 <__umoddi3+0x46c>
   28720:	157f542e 	bgeu	r2,r21,28474 <__umoddi3+0x388>
   28724:	14c5883a 	add	r2,r2,r19
   28728:	003f5206 	br	28474 <__umoddi3+0x388>
   2872c:	14c5883a 	add	r2,r2,r19
   28730:	003efc06 	br	28324 <__umoddi3+0x238>
   28734:	14c5883a 	add	r2,r2,r19
   28738:	003ea606 	br	281d4 <__umoddi3+0xe8>
   2873c:	d8800117 	ldw	r2,4(sp)
   28740:	113fc836 	bltu	r2,r4,28664 <__umoddi3+0x578>
   28744:	000d883a 	mov	r6,zero
   28748:	003fcd06 	br	28680 <__umoddi3+0x594>

0002874c <_fpadd_parts>:
   2874c:	defff804 	addi	sp,sp,-32
   28750:	dcc00315 	stw	r19,12(sp)
   28754:	2027883a 	mov	r19,r4
   28758:	21000017 	ldw	r4,0(r4)
   2875c:	00c00044 	movi	r3,1
   28760:	dd400515 	stw	r21,20(sp)
   28764:	dd000415 	stw	r20,16(sp)
   28768:	ddc00715 	stw	r23,28(sp)
   2876c:	dd800615 	stw	r22,24(sp)
   28770:	dc800215 	stw	r18,8(sp)
   28774:	dc400115 	stw	r17,4(sp)
   28778:	dc000015 	stw	r16,0(sp)
   2877c:	282b883a 	mov	r21,r5
   28780:	3029883a 	mov	r20,r6
   28784:	1900632e 	bgeu	r3,r4,28914 <_fpadd_parts+0x1c8>
   28788:	28800017 	ldw	r2,0(r5)
   2878c:	1880812e 	bgeu	r3,r2,28994 <_fpadd_parts+0x248>
   28790:	00c00104 	movi	r3,4
   28794:	20c0dc26 	beq	r4,r3,28b08 <_fpadd_parts+0x3bc>
   28798:	10c07e26 	beq	r2,r3,28994 <_fpadd_parts+0x248>
   2879c:	00c00084 	movi	r3,2
   287a0:	10c06726 	beq	r2,r3,28940 <_fpadd_parts+0x1f4>
   287a4:	20c07b26 	beq	r4,r3,28994 <_fpadd_parts+0x248>
   287a8:	9dc00217 	ldw	r23,8(r19)
   287ac:	28c00217 	ldw	r3,8(r5)
   287b0:	9c400317 	ldw	r17,12(r19)
   287b4:	2bc00317 	ldw	r15,12(r5)
   287b8:	b8cdc83a 	sub	r6,r23,r3
   287bc:	9c800417 	ldw	r18,16(r19)
   287c0:	2c000417 	ldw	r16,16(r5)
   287c4:	3009883a 	mov	r4,r6
   287c8:	30009716 	blt	r6,zero,28a28 <_fpadd_parts+0x2dc>
   287cc:	00800fc4 	movi	r2,63
   287d0:	11806b16 	blt	r2,r6,28980 <_fpadd_parts+0x234>
   287d4:	0100a40e 	bge	zero,r4,28a68 <_fpadd_parts+0x31c>
   287d8:	35bff804 	addi	r22,r6,-32
   287dc:	b000bc16 	blt	r22,zero,28ad0 <_fpadd_parts+0x384>
   287e0:	8596d83a 	srl	r11,r16,r22
   287e4:	0019883a 	mov	r12,zero
   287e8:	0013883a 	mov	r9,zero
   287ec:	01000044 	movi	r4,1
   287f0:	0015883a 	mov	r10,zero
   287f4:	b000be16 	blt	r22,zero,28af0 <_fpadd_parts+0x3a4>
   287f8:	2590983a 	sll	r8,r4,r22
   287fc:	000f883a 	mov	r7,zero
   28800:	00bfffc4 	movi	r2,-1
   28804:	3889883a 	add	r4,r7,r2
   28808:	408b883a 	add	r5,r8,r2
   2880c:	21cd803a 	cmpltu	r6,r4,r7
   28810:	314b883a 	add	r5,r6,r5
   28814:	7904703a 	and	r2,r15,r4
   28818:	8146703a 	and	r3,r16,r5
   2881c:	10c4b03a 	or	r2,r2,r3
   28820:	10000226 	beq	r2,zero,2882c <_fpadd_parts+0xe0>
   28824:	02400044 	movi	r9,1
   28828:	0015883a 	mov	r10,zero
   2882c:	5a5eb03a 	or	r15,r11,r9
   28830:	62a0b03a 	or	r16,r12,r10
   28834:	99400117 	ldw	r5,4(r19)
   28838:	a8800117 	ldw	r2,4(r21)
   2883c:	28806e26 	beq	r5,r2,289f8 <_fpadd_parts+0x2ac>
   28840:	28006626 	beq	r5,zero,289dc <_fpadd_parts+0x290>
   28844:	7c45c83a 	sub	r2,r15,r17
   28848:	7889803a 	cmpltu	r4,r15,r2
   2884c:	8487c83a 	sub	r3,r16,r18
   28850:	1909c83a 	sub	r4,r3,r4
   28854:	100d883a 	mov	r6,r2
   28858:	200f883a 	mov	r7,r4
   2885c:	38007716 	blt	r7,zero,28a3c <_fpadd_parts+0x2f0>
   28860:	a5c00215 	stw	r23,8(r20)
   28864:	a1c00415 	stw	r7,16(r20)
   28868:	a0000115 	stw	zero,4(r20)
   2886c:	a1800315 	stw	r6,12(r20)
   28870:	a2000317 	ldw	r8,12(r20)
   28874:	a2400417 	ldw	r9,16(r20)
   28878:	00bfffc4 	movi	r2,-1
   2887c:	408b883a 	add	r5,r8,r2
   28880:	2a09803a 	cmpltu	r4,r5,r8
   28884:	488d883a 	add	r6,r9,r2
   28888:	01c40034 	movhi	r7,4096
   2888c:	39ffffc4 	addi	r7,r7,-1
   28890:	218d883a 	add	r6,r4,r6
   28894:	39801736 	bltu	r7,r6,288f4 <_fpadd_parts+0x1a8>
   28898:	31c06526 	beq	r6,r7,28a30 <_fpadd_parts+0x2e4>
   2889c:	a3000217 	ldw	r12,8(r20)
   288a0:	4209883a 	add	r4,r8,r8
   288a4:	00bfffc4 	movi	r2,-1
   288a8:	220f803a 	cmpltu	r7,r4,r8
   288ac:	4a4b883a 	add	r5,r9,r9
   288b0:	394f883a 	add	r7,r7,r5
   288b4:	2095883a 	add	r10,r4,r2
   288b8:	3897883a 	add	r11,r7,r2
   288bc:	510d803a 	cmpltu	r6,r10,r4
   288c0:	6099883a 	add	r12,r12,r2
   288c4:	32d7883a 	add	r11,r6,r11
   288c8:	00840034 	movhi	r2,4096
   288cc:	10bfffc4 	addi	r2,r2,-1
   288d0:	2011883a 	mov	r8,r4
   288d4:	3813883a 	mov	r9,r7
   288d8:	a1000315 	stw	r4,12(r20)
   288dc:	a1c00415 	stw	r7,16(r20)
   288e0:	a3000215 	stw	r12,8(r20)
   288e4:	12c00336 	bltu	r2,r11,288f4 <_fpadd_parts+0x1a8>
   288e8:	58bfed1e 	bne	r11,r2,288a0 <_fpadd_parts+0x154>
   288ec:	00bfff84 	movi	r2,-2
   288f0:	12bfeb2e 	bgeu	r2,r10,288a0 <_fpadd_parts+0x154>
   288f4:	a2800417 	ldw	r10,16(r20)
   288f8:	008000c4 	movi	r2,3
   288fc:	00c80034 	movhi	r3,8192
   28900:	18ffffc4 	addi	r3,r3,-1
   28904:	a2400317 	ldw	r9,12(r20)
   28908:	a0800015 	stw	r2,0(r20)
   2890c:	1a802336 	bltu	r3,r10,2899c <_fpadd_parts+0x250>
   28910:	a027883a 	mov	r19,r20
   28914:	9805883a 	mov	r2,r19
   28918:	ddc00717 	ldw	r23,28(sp)
   2891c:	dd800617 	ldw	r22,24(sp)
   28920:	dd400517 	ldw	r21,20(sp)
   28924:	dd000417 	ldw	r20,16(sp)
   28928:	dcc00317 	ldw	r19,12(sp)
   2892c:	dc800217 	ldw	r18,8(sp)
   28930:	dc400117 	ldw	r17,4(sp)
   28934:	dc000017 	ldw	r16,0(sp)
   28938:	dec00804 	addi	sp,sp,32
   2893c:	f800283a 	ret
   28940:	20fff41e 	bne	r4,r3,28914 <_fpadd_parts+0x1c8>
   28944:	31000015 	stw	r4,0(r6)
   28948:	98800117 	ldw	r2,4(r19)
   2894c:	30800115 	stw	r2,4(r6)
   28950:	98c00217 	ldw	r3,8(r19)
   28954:	30c00215 	stw	r3,8(r6)
   28958:	98800317 	ldw	r2,12(r19)
   2895c:	30800315 	stw	r2,12(r6)
   28960:	98c00417 	ldw	r3,16(r19)
   28964:	30c00415 	stw	r3,16(r6)
   28968:	98800117 	ldw	r2,4(r19)
   2896c:	28c00117 	ldw	r3,4(r5)
   28970:	3027883a 	mov	r19,r6
   28974:	10c4703a 	and	r2,r2,r3
   28978:	30800115 	stw	r2,4(r6)
   2897c:	003fe506 	br	28914 <_fpadd_parts+0x1c8>
   28980:	1dc02616 	blt	r3,r23,28a1c <_fpadd_parts+0x2d0>
   28984:	0023883a 	mov	r17,zero
   28988:	182f883a 	mov	r23,r3
   2898c:	0025883a 	mov	r18,zero
   28990:	003fa806 	br	28834 <_fpadd_parts+0xe8>
   28994:	a827883a 	mov	r19,r21
   28998:	003fde06 	br	28914 <_fpadd_parts+0x1c8>
   2899c:	01800044 	movi	r6,1
   289a0:	500497fa 	slli	r2,r10,31
   289a4:	4808d07a 	srli	r4,r9,1
   289a8:	518ad83a 	srl	r5,r10,r6
   289ac:	a2000217 	ldw	r8,8(r20)
   289b0:	1108b03a 	or	r4,r2,r4
   289b4:	0007883a 	mov	r3,zero
   289b8:	4984703a 	and	r2,r9,r6
   289bc:	208cb03a 	or	r6,r4,r2
   289c0:	28ceb03a 	or	r7,r5,r3
   289c4:	42000044 	addi	r8,r8,1
   289c8:	a027883a 	mov	r19,r20
   289cc:	a1c00415 	stw	r7,16(r20)
   289d0:	a2000215 	stw	r8,8(r20)
   289d4:	a1800315 	stw	r6,12(r20)
   289d8:	003fce06 	br	28914 <_fpadd_parts+0x1c8>
   289dc:	8bc5c83a 	sub	r2,r17,r15
   289e0:	8889803a 	cmpltu	r4,r17,r2
   289e4:	9407c83a 	sub	r3,r18,r16
   289e8:	1909c83a 	sub	r4,r3,r4
   289ec:	100d883a 	mov	r6,r2
   289f0:	200f883a 	mov	r7,r4
   289f4:	003f9906 	br	2885c <_fpadd_parts+0x110>
   289f8:	7c45883a 	add	r2,r15,r17
   289fc:	13c9803a 	cmpltu	r4,r2,r15
   28a00:	8487883a 	add	r3,r16,r18
   28a04:	20c9883a 	add	r4,r4,r3
   28a08:	a1400115 	stw	r5,4(r20)
   28a0c:	a5c00215 	stw	r23,8(r20)
   28a10:	a0800315 	stw	r2,12(r20)
   28a14:	a1000415 	stw	r4,16(r20)
   28a18:	003fb606 	br	288f4 <_fpadd_parts+0x1a8>
   28a1c:	001f883a 	mov	r15,zero
   28a20:	0021883a 	mov	r16,zero
   28a24:	003f8306 	br	28834 <_fpadd_parts+0xe8>
   28a28:	018dc83a 	sub	r6,zero,r6
   28a2c:	003f6706 	br	287cc <_fpadd_parts+0x80>
   28a30:	00bfff84 	movi	r2,-2
   28a34:	117faf36 	bltu	r2,r5,288f4 <_fpadd_parts+0x1a8>
   28a38:	003f9806 	br	2889c <_fpadd_parts+0x150>
   28a3c:	0005883a 	mov	r2,zero
   28a40:	1189c83a 	sub	r4,r2,r6
   28a44:	1105803a 	cmpltu	r2,r2,r4
   28a48:	01cbc83a 	sub	r5,zero,r7
   28a4c:	2885c83a 	sub	r2,r5,r2
   28a50:	01800044 	movi	r6,1
   28a54:	a1800115 	stw	r6,4(r20)
   28a58:	a5c00215 	stw	r23,8(r20)
   28a5c:	a1000315 	stw	r4,12(r20)
   28a60:	a0800415 	stw	r2,16(r20)
   28a64:	003f8206 	br	28870 <_fpadd_parts+0x124>
   28a68:	203f7226 	beq	r4,zero,28834 <_fpadd_parts+0xe8>
   28a6c:	35bff804 	addi	r22,r6,-32
   28a70:	b9af883a 	add	r23,r23,r6
   28a74:	b0003116 	blt	r22,zero,28b3c <_fpadd_parts+0x3f0>
   28a78:	959ad83a 	srl	r13,r18,r22
   28a7c:	001d883a 	mov	r14,zero
   28a80:	000f883a 	mov	r7,zero
   28a84:	01000044 	movi	r4,1
   28a88:	0011883a 	mov	r8,zero
   28a8c:	b0002516 	blt	r22,zero,28b24 <_fpadd_parts+0x3d8>
   28a90:	2594983a 	sll	r10,r4,r22
   28a94:	0013883a 	mov	r9,zero
   28a98:	00bfffc4 	movi	r2,-1
   28a9c:	4889883a 	add	r4,r9,r2
   28aa0:	508b883a 	add	r5,r10,r2
   28aa4:	224d803a 	cmpltu	r6,r4,r9
   28aa8:	314b883a 	add	r5,r6,r5
   28aac:	8904703a 	and	r2,r17,r4
   28ab0:	9146703a 	and	r3,r18,r5
   28ab4:	10c4b03a 	or	r2,r2,r3
   28ab8:	10000226 	beq	r2,zero,28ac4 <_fpadd_parts+0x378>
   28abc:	01c00044 	movi	r7,1
   28ac0:	0011883a 	mov	r8,zero
   28ac4:	69e2b03a 	or	r17,r13,r7
   28ac8:	7224b03a 	or	r18,r14,r8
   28acc:	003f5906 	br	28834 <_fpadd_parts+0xe8>
   28ad0:	8407883a 	add	r3,r16,r16
   28ad4:	008007c4 	movi	r2,31
   28ad8:	1185c83a 	sub	r2,r2,r6
   28adc:	1886983a 	sll	r3,r3,r2
   28ae0:	7996d83a 	srl	r11,r15,r6
   28ae4:	8198d83a 	srl	r12,r16,r6
   28ae8:	1ad6b03a 	or	r11,r3,r11
   28aec:	003f3e06 	br	287e8 <_fpadd_parts+0x9c>
   28af0:	2006d07a 	srli	r3,r4,1
   28af4:	008007c4 	movi	r2,31
   28af8:	1185c83a 	sub	r2,r2,r6
   28afc:	1890d83a 	srl	r8,r3,r2
   28b00:	218e983a 	sll	r7,r4,r6
   28b04:	003f3e06 	br	28800 <_fpadd_parts+0xb4>
   28b08:	113f821e 	bne	r2,r4,28914 <_fpadd_parts+0x1c8>
   28b0c:	28c00117 	ldw	r3,4(r5)
   28b10:	98800117 	ldw	r2,4(r19)
   28b14:	10ff7f26 	beq	r2,r3,28914 <_fpadd_parts+0x1c8>
   28b18:	04c000f4 	movhi	r19,3
   28b1c:	9cf3a004 	addi	r19,r19,-12672
   28b20:	003f7c06 	br	28914 <_fpadd_parts+0x1c8>
   28b24:	2006d07a 	srli	r3,r4,1
   28b28:	008007c4 	movi	r2,31
   28b2c:	1185c83a 	sub	r2,r2,r6
   28b30:	1894d83a 	srl	r10,r3,r2
   28b34:	2192983a 	sll	r9,r4,r6
   28b38:	003fd706 	br	28a98 <_fpadd_parts+0x34c>
   28b3c:	9487883a 	add	r3,r18,r18
   28b40:	008007c4 	movi	r2,31
   28b44:	1185c83a 	sub	r2,r2,r6
   28b48:	1886983a 	sll	r3,r3,r2
   28b4c:	899ad83a 	srl	r13,r17,r6
   28b50:	919cd83a 	srl	r14,r18,r6
   28b54:	1b5ab03a 	or	r13,r3,r13
   28b58:	003fc906 	br	28a80 <_fpadd_parts+0x334>

00028b5c <__subdf3>:
   28b5c:	deffea04 	addi	sp,sp,-88
   28b60:	dcc01415 	stw	r19,80(sp)
   28b64:	dcc00404 	addi	r19,sp,16
   28b68:	2011883a 	mov	r8,r4
   28b6c:	2813883a 	mov	r9,r5
   28b70:	dc401315 	stw	r17,76(sp)
   28b74:	d809883a 	mov	r4,sp
   28b78:	980b883a 	mov	r5,r19
   28b7c:	dc400904 	addi	r17,sp,36
   28b80:	dfc01515 	stw	ra,84(sp)
   28b84:	da400115 	stw	r9,4(sp)
   28b88:	d9c00315 	stw	r7,12(sp)
   28b8c:	da000015 	stw	r8,0(sp)
   28b90:	d9800215 	stw	r6,8(sp)
   28b94:	0029e7c0 	call	29e7c <__unpack_d>
   28b98:	d9000204 	addi	r4,sp,8
   28b9c:	880b883a 	mov	r5,r17
   28ba0:	0029e7c0 	call	29e7c <__unpack_d>
   28ba4:	d8800a17 	ldw	r2,40(sp)
   28ba8:	880b883a 	mov	r5,r17
   28bac:	9809883a 	mov	r4,r19
   28bb0:	d9800e04 	addi	r6,sp,56
   28bb4:	1080005c 	xori	r2,r2,1
   28bb8:	d8800a15 	stw	r2,40(sp)
   28bbc:	002874c0 	call	2874c <_fpadd_parts>
   28bc0:	1009883a 	mov	r4,r2
   28bc4:	0029b680 	call	29b68 <__pack_d>
   28bc8:	dfc01517 	ldw	ra,84(sp)
   28bcc:	dcc01417 	ldw	r19,80(sp)
   28bd0:	dc401317 	ldw	r17,76(sp)
   28bd4:	dec01604 	addi	sp,sp,88
   28bd8:	f800283a 	ret

00028bdc <__adddf3>:
   28bdc:	deffea04 	addi	sp,sp,-88
   28be0:	dcc01415 	stw	r19,80(sp)
   28be4:	dcc00404 	addi	r19,sp,16
   28be8:	2011883a 	mov	r8,r4
   28bec:	2813883a 	mov	r9,r5
   28bf0:	dc401315 	stw	r17,76(sp)
   28bf4:	d809883a 	mov	r4,sp
   28bf8:	980b883a 	mov	r5,r19
   28bfc:	dc400904 	addi	r17,sp,36
   28c00:	dfc01515 	stw	ra,84(sp)
   28c04:	da400115 	stw	r9,4(sp)
   28c08:	d9c00315 	stw	r7,12(sp)
   28c0c:	da000015 	stw	r8,0(sp)
   28c10:	d9800215 	stw	r6,8(sp)
   28c14:	0029e7c0 	call	29e7c <__unpack_d>
   28c18:	d9000204 	addi	r4,sp,8
   28c1c:	880b883a 	mov	r5,r17
   28c20:	0029e7c0 	call	29e7c <__unpack_d>
   28c24:	d9800e04 	addi	r6,sp,56
   28c28:	9809883a 	mov	r4,r19
   28c2c:	880b883a 	mov	r5,r17
   28c30:	002874c0 	call	2874c <_fpadd_parts>
   28c34:	1009883a 	mov	r4,r2
   28c38:	0029b680 	call	29b68 <__pack_d>
   28c3c:	dfc01517 	ldw	ra,84(sp)
   28c40:	dcc01417 	ldw	r19,80(sp)
   28c44:	dc401317 	ldw	r17,76(sp)
   28c48:	dec01604 	addi	sp,sp,88
   28c4c:	f800283a 	ret

00028c50 <__muldf3>:
   28c50:	deffe004 	addi	sp,sp,-128
   28c54:	dc401815 	stw	r17,96(sp)
   28c58:	dc400404 	addi	r17,sp,16
   28c5c:	2011883a 	mov	r8,r4
   28c60:	2813883a 	mov	r9,r5
   28c64:	dc001715 	stw	r16,92(sp)
   28c68:	d809883a 	mov	r4,sp
   28c6c:	880b883a 	mov	r5,r17
   28c70:	dc000904 	addi	r16,sp,36
   28c74:	dfc01f15 	stw	ra,124(sp)
   28c78:	da400115 	stw	r9,4(sp)
   28c7c:	d9c00315 	stw	r7,12(sp)
   28c80:	da000015 	stw	r8,0(sp)
   28c84:	d9800215 	stw	r6,8(sp)
   28c88:	ddc01e15 	stw	r23,120(sp)
   28c8c:	dd801d15 	stw	r22,116(sp)
   28c90:	dd401c15 	stw	r21,112(sp)
   28c94:	dd001b15 	stw	r20,108(sp)
   28c98:	dcc01a15 	stw	r19,104(sp)
   28c9c:	dc801915 	stw	r18,100(sp)
   28ca0:	0029e7c0 	call	29e7c <__unpack_d>
   28ca4:	d9000204 	addi	r4,sp,8
   28ca8:	800b883a 	mov	r5,r16
   28cac:	0029e7c0 	call	29e7c <__unpack_d>
   28cb0:	d9000417 	ldw	r4,16(sp)
   28cb4:	00800044 	movi	r2,1
   28cb8:	1100102e 	bgeu	r2,r4,28cfc <__muldf3+0xac>
   28cbc:	d8c00917 	ldw	r3,36(sp)
   28cc0:	10c0062e 	bgeu	r2,r3,28cdc <__muldf3+0x8c>
   28cc4:	00800104 	movi	r2,4
   28cc8:	20800a26 	beq	r4,r2,28cf4 <__muldf3+0xa4>
   28ccc:	1880cc26 	beq	r3,r2,29000 <__muldf3+0x3b0>
   28cd0:	00800084 	movi	r2,2
   28cd4:	20800926 	beq	r4,r2,28cfc <__muldf3+0xac>
   28cd8:	1880191e 	bne	r3,r2,28d40 <__muldf3+0xf0>
   28cdc:	d8c00a17 	ldw	r3,40(sp)
   28ce0:	d8800517 	ldw	r2,20(sp)
   28ce4:	8009883a 	mov	r4,r16
   28ce8:	10c4c03a 	cmpne	r2,r2,r3
   28cec:	d8800a15 	stw	r2,40(sp)
   28cf0:	00000706 	br	28d10 <__muldf3+0xc0>
   28cf4:	00800084 	movi	r2,2
   28cf8:	1880c326 	beq	r3,r2,29008 <__muldf3+0x3b8>
   28cfc:	d8800517 	ldw	r2,20(sp)
   28d00:	d8c00a17 	ldw	r3,40(sp)
   28d04:	8809883a 	mov	r4,r17
   28d08:	10c4c03a 	cmpne	r2,r2,r3
   28d0c:	d8800515 	stw	r2,20(sp)
   28d10:	0029b680 	call	29b68 <__pack_d>
   28d14:	dfc01f17 	ldw	ra,124(sp)
   28d18:	ddc01e17 	ldw	r23,120(sp)
   28d1c:	dd801d17 	ldw	r22,116(sp)
   28d20:	dd401c17 	ldw	r21,112(sp)
   28d24:	dd001b17 	ldw	r20,108(sp)
   28d28:	dcc01a17 	ldw	r19,104(sp)
   28d2c:	dc801917 	ldw	r18,100(sp)
   28d30:	dc401817 	ldw	r17,96(sp)
   28d34:	dc001717 	ldw	r16,92(sp)
   28d38:	dec02004 	addi	sp,sp,128
   28d3c:	f800283a 	ret
   28d40:	dd800717 	ldw	r22,28(sp)
   28d44:	dc800c17 	ldw	r18,48(sp)
   28d48:	002b883a 	mov	r21,zero
   28d4c:	0023883a 	mov	r17,zero
   28d50:	a80b883a 	mov	r5,r21
   28d54:	b00d883a 	mov	r6,r22
   28d58:	880f883a 	mov	r7,r17
   28d5c:	ddc00817 	ldw	r23,32(sp)
   28d60:	dcc00d17 	ldw	r19,52(sp)
   28d64:	9009883a 	mov	r4,r18
   28d68:	00299c40 	call	299c4 <__muldi3>
   28d6c:	001b883a 	mov	r13,zero
   28d70:	680f883a 	mov	r7,r13
   28d74:	b009883a 	mov	r4,r22
   28d78:	000b883a 	mov	r5,zero
   28d7c:	980d883a 	mov	r6,r19
   28d80:	b82d883a 	mov	r22,r23
   28d84:	002f883a 	mov	r23,zero
   28d88:	db401615 	stw	r13,88(sp)
   28d8c:	d8801315 	stw	r2,76(sp)
   28d90:	d8c01415 	stw	r3,80(sp)
   28d94:	dcc01515 	stw	r19,84(sp)
   28d98:	00299c40 	call	299c4 <__muldi3>
   28d9c:	b00d883a 	mov	r6,r22
   28da0:	000b883a 	mov	r5,zero
   28da4:	9009883a 	mov	r4,r18
   28da8:	b80f883a 	mov	r7,r23
   28dac:	1021883a 	mov	r16,r2
   28db0:	1823883a 	mov	r17,r3
   28db4:	00299c40 	call	299c4 <__muldi3>
   28db8:	8085883a 	add	r2,r16,r2
   28dbc:	140d803a 	cmpltu	r6,r2,r16
   28dc0:	88c7883a 	add	r3,r17,r3
   28dc4:	30cd883a 	add	r6,r6,r3
   28dc8:	1029883a 	mov	r20,r2
   28dcc:	302b883a 	mov	r21,r6
   28dd0:	da801317 	ldw	r10,76(sp)
   28dd4:	dac01417 	ldw	r11,80(sp)
   28dd8:	db001517 	ldw	r12,84(sp)
   28ddc:	db401617 	ldw	r13,88(sp)
   28de0:	3440612e 	bgeu	r6,r17,28f68 <__muldf3+0x318>
   28de4:	0009883a 	mov	r4,zero
   28de8:	5105883a 	add	r2,r10,r4
   28dec:	128d803a 	cmpltu	r6,r2,r10
   28df0:	5d07883a 	add	r3,r11,r20
   28df4:	30cd883a 	add	r6,r6,r3
   28df8:	0021883a 	mov	r16,zero
   28dfc:	04400044 	movi	r17,1
   28e00:	1025883a 	mov	r18,r2
   28e04:	3027883a 	mov	r19,r6
   28e08:	32c06236 	bltu	r6,r11,28f94 <__muldf3+0x344>
   28e0c:	59807a26 	beq	r11,r6,28ff8 <__muldf3+0x3a8>
   28e10:	680b883a 	mov	r5,r13
   28e14:	b80f883a 	mov	r7,r23
   28e18:	6009883a 	mov	r4,r12
   28e1c:	b00d883a 	mov	r6,r22
   28e20:	00299c40 	call	299c4 <__muldi3>
   28e24:	1009883a 	mov	r4,r2
   28e28:	000f883a 	mov	r7,zero
   28e2c:	1545883a 	add	r2,r2,r21
   28e30:	1111803a 	cmpltu	r8,r2,r4
   28e34:	19c7883a 	add	r3,r3,r7
   28e38:	40c7883a 	add	r3,r8,r3
   28e3c:	88cb883a 	add	r5,r17,r3
   28e40:	d8c00617 	ldw	r3,24(sp)
   28e44:	8089883a 	add	r4,r16,r2
   28e48:	d8800b17 	ldw	r2,44(sp)
   28e4c:	18c00104 	addi	r3,r3,4
   28e50:	240d803a 	cmpltu	r6,r4,r16
   28e54:	10c7883a 	add	r3,r2,r3
   28e58:	2013883a 	mov	r9,r4
   28e5c:	d8800a17 	ldw	r2,40(sp)
   28e60:	d9000517 	ldw	r4,20(sp)
   28e64:	314d883a 	add	r6,r6,r5
   28e68:	3015883a 	mov	r10,r6
   28e6c:	2088c03a 	cmpne	r4,r4,r2
   28e70:	00880034 	movhi	r2,8192
   28e74:	10bfffc4 	addi	r2,r2,-1
   28e78:	d9000f15 	stw	r4,60(sp)
   28e7c:	d8c01015 	stw	r3,64(sp)
   28e80:	1180162e 	bgeu	r2,r6,28edc <__muldf3+0x28c>
   28e84:	1811883a 	mov	r8,r3
   28e88:	101f883a 	mov	r15,r2
   28e8c:	980497fa 	slli	r2,r19,31
   28e90:	9016d07a 	srli	r11,r18,1
   28e94:	500697fa 	slli	r3,r10,31
   28e98:	480cd07a 	srli	r6,r9,1
   28e9c:	500ed07a 	srli	r7,r10,1
   28ea0:	12d6b03a 	or	r11,r2,r11
   28ea4:	00800044 	movi	r2,1
   28ea8:	198cb03a 	or	r6,r3,r6
   28eac:	4888703a 	and	r4,r9,r2
   28eb0:	9818d07a 	srli	r12,r19,1
   28eb4:	001b883a 	mov	r13,zero
   28eb8:	03a00034 	movhi	r14,32768
   28ebc:	3013883a 	mov	r9,r6
   28ec0:	3815883a 	mov	r10,r7
   28ec4:	4091883a 	add	r8,r8,r2
   28ec8:	20000226 	beq	r4,zero,28ed4 <__muldf3+0x284>
   28ecc:	5b64b03a 	or	r18,r11,r13
   28ed0:	63a6b03a 	or	r19,r12,r14
   28ed4:	7abfed36 	bltu	r15,r10,28e8c <__muldf3+0x23c>
   28ed8:	da001015 	stw	r8,64(sp)
   28edc:	00840034 	movhi	r2,4096
   28ee0:	10bfffc4 	addi	r2,r2,-1
   28ee4:	12801436 	bltu	r2,r10,28f38 <__muldf3+0x2e8>
   28ee8:	da001017 	ldw	r8,64(sp)
   28eec:	101f883a 	mov	r15,r2
   28ef0:	4a45883a 	add	r2,r9,r9
   28ef4:	124d803a 	cmpltu	r6,r2,r9
   28ef8:	5287883a 	add	r3,r10,r10
   28efc:	9497883a 	add	r11,r18,r18
   28f00:	5c8f803a 	cmpltu	r7,r11,r18
   28f04:	9cd9883a 	add	r12,r19,r19
   28f08:	01000044 	movi	r4,1
   28f0c:	30cd883a 	add	r6,r6,r3
   28f10:	3b0f883a 	add	r7,r7,r12
   28f14:	423fffc4 	addi	r8,r8,-1
   28f18:	1013883a 	mov	r9,r2
   28f1c:	3015883a 	mov	r10,r6
   28f20:	111ab03a 	or	r13,r2,r4
   28f24:	98003016 	blt	r19,zero,28fe8 <__muldf3+0x398>
   28f28:	5825883a 	mov	r18,r11
   28f2c:	3827883a 	mov	r19,r7
   28f30:	7abfef2e 	bgeu	r15,r10,28ef0 <__muldf3+0x2a0>
   28f34:	da001015 	stw	r8,64(sp)
   28f38:	00803fc4 	movi	r2,255
   28f3c:	488e703a 	and	r7,r9,r2
   28f40:	00802004 	movi	r2,128
   28f44:	0007883a 	mov	r3,zero
   28f48:	0011883a 	mov	r8,zero
   28f4c:	38801826 	beq	r7,r2,28fb0 <__muldf3+0x360>
   28f50:	008000c4 	movi	r2,3
   28f54:	d9000e04 	addi	r4,sp,56
   28f58:	da801215 	stw	r10,72(sp)
   28f5c:	d8800e15 	stw	r2,56(sp)
   28f60:	da401115 	stw	r9,68(sp)
   28f64:	003f6a06 	br	28d10 <__muldf3+0xc0>
   28f68:	89802126 	beq	r17,r6,28ff0 <__muldf3+0x3a0>
   28f6c:	0009883a 	mov	r4,zero
   28f70:	5105883a 	add	r2,r10,r4
   28f74:	128d803a 	cmpltu	r6,r2,r10
   28f78:	5d07883a 	add	r3,r11,r20
   28f7c:	30cd883a 	add	r6,r6,r3
   28f80:	0021883a 	mov	r16,zero
   28f84:	0023883a 	mov	r17,zero
   28f88:	1025883a 	mov	r18,r2
   28f8c:	3027883a 	mov	r19,r6
   28f90:	32ff9e2e 	bgeu	r6,r11,28e0c <__muldf3+0x1bc>
   28f94:	00800044 	movi	r2,1
   28f98:	8089883a 	add	r4,r16,r2
   28f9c:	240d803a 	cmpltu	r6,r4,r16
   28fa0:	344d883a 	add	r6,r6,r17
   28fa4:	2021883a 	mov	r16,r4
   28fa8:	3023883a 	mov	r17,r6
   28fac:	003f9806 	br	28e10 <__muldf3+0x1c0>
   28fb0:	403fe71e 	bne	r8,zero,28f50 <__muldf3+0x300>
   28fb4:	01004004 	movi	r4,256
   28fb8:	4904703a 	and	r2,r9,r4
   28fbc:	10c4b03a 	or	r2,r2,r3
   28fc0:	103fe31e 	bne	r2,zero,28f50 <__muldf3+0x300>
   28fc4:	94c4b03a 	or	r2,r18,r19
   28fc8:	103fe126 	beq	r2,zero,28f50 <__muldf3+0x300>
   28fcc:	49c5883a 	add	r2,r9,r7
   28fd0:	1251803a 	cmpltu	r8,r2,r9
   28fd4:	4291883a 	add	r8,r8,r10
   28fd8:	013fc004 	movi	r4,-256
   28fdc:	1112703a 	and	r9,r2,r4
   28fe0:	4015883a 	mov	r10,r8
   28fe4:	003fda06 	br	28f50 <__muldf3+0x300>
   28fe8:	6813883a 	mov	r9,r13
   28fec:	003fce06 	br	28f28 <__muldf3+0x2d8>
   28ff0:	143f7c36 	bltu	r2,r16,28de4 <__muldf3+0x194>
   28ff4:	003fdd06 	br	28f6c <__muldf3+0x31c>
   28ff8:	12bf852e 	bgeu	r2,r10,28e10 <__muldf3+0x1c0>
   28ffc:	003fe506 	br	28f94 <__muldf3+0x344>
   29000:	00800084 	movi	r2,2
   29004:	20bf351e 	bne	r4,r2,28cdc <__muldf3+0x8c>
   29008:	010000f4 	movhi	r4,3
   2900c:	2133a004 	addi	r4,r4,-12672
   29010:	003f3f06 	br	28d10 <__muldf3+0xc0>

00029014 <__divdf3>:
   29014:	deffed04 	addi	sp,sp,-76
   29018:	dcc01115 	stw	r19,68(sp)
   2901c:	dcc00404 	addi	r19,sp,16
   29020:	2011883a 	mov	r8,r4
   29024:	2813883a 	mov	r9,r5
   29028:	dc000e15 	stw	r16,56(sp)
   2902c:	d809883a 	mov	r4,sp
   29030:	980b883a 	mov	r5,r19
   29034:	dc000904 	addi	r16,sp,36
   29038:	dfc01215 	stw	ra,72(sp)
   2903c:	da400115 	stw	r9,4(sp)
   29040:	d9c00315 	stw	r7,12(sp)
   29044:	da000015 	stw	r8,0(sp)
   29048:	d9800215 	stw	r6,8(sp)
   2904c:	dc801015 	stw	r18,64(sp)
   29050:	dc400f15 	stw	r17,60(sp)
   29054:	0029e7c0 	call	29e7c <__unpack_d>
   29058:	d9000204 	addi	r4,sp,8
   2905c:	800b883a 	mov	r5,r16
   29060:	0029e7c0 	call	29e7c <__unpack_d>
   29064:	d9000417 	ldw	r4,16(sp)
   29068:	00800044 	movi	r2,1
   2906c:	11000b2e 	bgeu	r2,r4,2909c <__divdf3+0x88>
   29070:	d9400917 	ldw	r5,36(sp)
   29074:	1140762e 	bgeu	r2,r5,29250 <__divdf3+0x23c>
   29078:	d8800517 	ldw	r2,20(sp)
   2907c:	d8c00a17 	ldw	r3,40(sp)
   29080:	01800104 	movi	r6,4
   29084:	10c4f03a 	xor	r2,r2,r3
   29088:	d8800515 	stw	r2,20(sp)
   2908c:	21800226 	beq	r4,r6,29098 <__divdf3+0x84>
   29090:	00800084 	movi	r2,2
   29094:	2080141e 	bne	r4,r2,290e8 <__divdf3+0xd4>
   29098:	29000926 	beq	r5,r4,290c0 <__divdf3+0xac>
   2909c:	9809883a 	mov	r4,r19
   290a0:	0029b680 	call	29b68 <__pack_d>
   290a4:	dfc01217 	ldw	ra,72(sp)
   290a8:	dcc01117 	ldw	r19,68(sp)
   290ac:	dc801017 	ldw	r18,64(sp)
   290b0:	dc400f17 	ldw	r17,60(sp)
   290b4:	dc000e17 	ldw	r16,56(sp)
   290b8:	dec01304 	addi	sp,sp,76
   290bc:	f800283a 	ret
   290c0:	010000f4 	movhi	r4,3
   290c4:	2133a004 	addi	r4,r4,-12672
   290c8:	0029b680 	call	29b68 <__pack_d>
   290cc:	dfc01217 	ldw	ra,72(sp)
   290d0:	dcc01117 	ldw	r19,68(sp)
   290d4:	dc801017 	ldw	r18,64(sp)
   290d8:	dc400f17 	ldw	r17,60(sp)
   290dc:	dc000e17 	ldw	r16,56(sp)
   290e0:	dec01304 	addi	sp,sp,76
   290e4:	f800283a 	ret
   290e8:	29805b26 	beq	r5,r6,29258 <__divdf3+0x244>
   290ec:	28802d26 	beq	r5,r2,291a4 <__divdf3+0x190>
   290f0:	d8c00617 	ldw	r3,24(sp)
   290f4:	d8800b17 	ldw	r2,44(sp)
   290f8:	d9c00817 	ldw	r7,32(sp)
   290fc:	dc400d17 	ldw	r17,52(sp)
   29100:	188bc83a 	sub	r5,r3,r2
   29104:	d9800717 	ldw	r6,28(sp)
   29108:	dc000c17 	ldw	r16,48(sp)
   2910c:	d9400615 	stw	r5,24(sp)
   29110:	3c403836 	bltu	r7,r17,291f4 <__divdf3+0x1e0>
   29114:	89c03626 	beq	r17,r7,291f0 <__divdf3+0x1dc>
   29118:	0015883a 	mov	r10,zero
   2911c:	001d883a 	mov	r14,zero
   29120:	02c40034 	movhi	r11,4096
   29124:	001f883a 	mov	r15,zero
   29128:	003f883a 	mov	ra,zero
   2912c:	04800f44 	movi	r18,61
   29130:	00000f06 	br	29170 <__divdf3+0x15c>
   29134:	601d883a 	mov	r14,r12
   29138:	681f883a 	mov	r15,r13
   2913c:	400d883a 	mov	r6,r8
   29140:	100f883a 	mov	r7,r2
   29144:	3191883a 	add	r8,r6,r6
   29148:	5808d07a 	srli	r4,r11,1
   2914c:	4185803a 	cmpltu	r2,r8,r6
   29150:	39d3883a 	add	r9,r7,r7
   29154:	28c6b03a 	or	r3,r5,r3
   29158:	1245883a 	add	r2,r2,r9
   2915c:	1815883a 	mov	r10,r3
   29160:	2017883a 	mov	r11,r4
   29164:	400d883a 	mov	r6,r8
   29168:	100f883a 	mov	r7,r2
   2916c:	fc801726 	beq	ra,r18,291cc <__divdf3+0x1b8>
   29170:	580a97fa 	slli	r5,r11,31
   29174:	5006d07a 	srli	r3,r10,1
   29178:	ffc00044 	addi	ra,ra,1
   2917c:	3c7ff136 	bltu	r7,r17,29144 <__divdf3+0x130>
   29180:	3411c83a 	sub	r8,r6,r16
   29184:	3205803a 	cmpltu	r2,r6,r8
   29188:	3c53c83a 	sub	r9,r7,r17
   2918c:	7298b03a 	or	r12,r14,r10
   29190:	7adab03a 	or	r13,r15,r11
   29194:	4885c83a 	sub	r2,r9,r2
   29198:	89ffe61e 	bne	r17,r7,29134 <__divdf3+0x120>
   2919c:	343fe936 	bltu	r6,r16,29144 <__divdf3+0x130>
   291a0:	003fe406 	br	29134 <__divdf3+0x120>
   291a4:	9809883a 	mov	r4,r19
   291a8:	d9800415 	stw	r6,16(sp)
   291ac:	0029b680 	call	29b68 <__pack_d>
   291b0:	dfc01217 	ldw	ra,72(sp)
   291b4:	dcc01117 	ldw	r19,68(sp)
   291b8:	dc801017 	ldw	r18,64(sp)
   291bc:	dc400f17 	ldw	r17,60(sp)
   291c0:	dc000e17 	ldw	r16,56(sp)
   291c4:	dec01304 	addi	sp,sp,76
   291c8:	f800283a 	ret
   291cc:	00803fc4 	movi	r2,255
   291d0:	7090703a 	and	r8,r14,r2
   291d4:	00802004 	movi	r2,128
   291d8:	0007883a 	mov	r3,zero
   291dc:	0013883a 	mov	r9,zero
   291e0:	40800d26 	beq	r8,r2,29218 <__divdf3+0x204>
   291e4:	dbc00815 	stw	r15,32(sp)
   291e8:	db800715 	stw	r14,28(sp)
   291ec:	003fab06 	br	2909c <__divdf3+0x88>
   291f0:	343fc92e 	bgeu	r6,r16,29118 <__divdf3+0x104>
   291f4:	3185883a 	add	r2,r6,r6
   291f8:	1189803a 	cmpltu	r4,r2,r6
   291fc:	39c7883a 	add	r3,r7,r7
   29200:	20c9883a 	add	r4,r4,r3
   29204:	297fffc4 	addi	r5,r5,-1
   29208:	100d883a 	mov	r6,r2
   2920c:	200f883a 	mov	r7,r4
   29210:	d9400615 	stw	r5,24(sp)
   29214:	003fc006 	br	29118 <__divdf3+0x104>
   29218:	483ff21e 	bne	r9,zero,291e4 <__divdf3+0x1d0>
   2921c:	01004004 	movi	r4,256
   29220:	7104703a 	and	r2,r14,r4
   29224:	10c4b03a 	or	r2,r2,r3
   29228:	103fee1e 	bne	r2,zero,291e4 <__divdf3+0x1d0>
   2922c:	31c4b03a 	or	r2,r6,r7
   29230:	103fec26 	beq	r2,zero,291e4 <__divdf3+0x1d0>
   29234:	7205883a 	add	r2,r14,r8
   29238:	1391803a 	cmpltu	r8,r2,r14
   2923c:	43d1883a 	add	r8,r8,r15
   29240:	013fc004 	movi	r4,-256
   29244:	111c703a 	and	r14,r2,r4
   29248:	401f883a 	mov	r15,r8
   2924c:	003fe506 	br	291e4 <__divdf3+0x1d0>
   29250:	8009883a 	mov	r4,r16
   29254:	003f9206 	br	290a0 <__divdf3+0x8c>
   29258:	9809883a 	mov	r4,r19
   2925c:	d8000715 	stw	zero,28(sp)
   29260:	d8000815 	stw	zero,32(sp)
   29264:	d8000615 	stw	zero,24(sp)
   29268:	003f8d06 	br	290a0 <__divdf3+0x8c>

0002926c <__eqdf2>:
   2926c:	deffef04 	addi	sp,sp,-68
   29270:	dc400f15 	stw	r17,60(sp)
   29274:	dc400404 	addi	r17,sp,16
   29278:	2005883a 	mov	r2,r4
   2927c:	2807883a 	mov	r3,r5
   29280:	dc000e15 	stw	r16,56(sp)
   29284:	d809883a 	mov	r4,sp
   29288:	880b883a 	mov	r5,r17
   2928c:	dc000904 	addi	r16,sp,36
   29290:	d8c00115 	stw	r3,4(sp)
   29294:	d8800015 	stw	r2,0(sp)
   29298:	d9800215 	stw	r6,8(sp)
   2929c:	dfc01015 	stw	ra,64(sp)
   292a0:	d9c00315 	stw	r7,12(sp)
   292a4:	0029e7c0 	call	29e7c <__unpack_d>
   292a8:	d9000204 	addi	r4,sp,8
   292ac:	800b883a 	mov	r5,r16
   292b0:	0029e7c0 	call	29e7c <__unpack_d>
   292b4:	d8800417 	ldw	r2,16(sp)
   292b8:	00c00044 	movi	r3,1
   292bc:	180d883a 	mov	r6,r3
   292c0:	1880062e 	bgeu	r3,r2,292dc <__eqdf2+0x70>
   292c4:	d8800917 	ldw	r2,36(sp)
   292c8:	8809883a 	mov	r4,r17
   292cc:	800b883a 	mov	r5,r16
   292d0:	1880022e 	bgeu	r3,r2,292dc <__eqdf2+0x70>
   292d4:	0029fb40 	call	29fb4 <__fpcmp_parts_d>
   292d8:	100d883a 	mov	r6,r2
   292dc:	3005883a 	mov	r2,r6
   292e0:	dfc01017 	ldw	ra,64(sp)
   292e4:	dc400f17 	ldw	r17,60(sp)
   292e8:	dc000e17 	ldw	r16,56(sp)
   292ec:	dec01104 	addi	sp,sp,68
   292f0:	f800283a 	ret

000292f4 <__nedf2>:
   292f4:	deffef04 	addi	sp,sp,-68
   292f8:	dc400f15 	stw	r17,60(sp)
   292fc:	dc400404 	addi	r17,sp,16
   29300:	2005883a 	mov	r2,r4
   29304:	2807883a 	mov	r3,r5
   29308:	dc000e15 	stw	r16,56(sp)
   2930c:	d809883a 	mov	r4,sp
   29310:	880b883a 	mov	r5,r17
   29314:	dc000904 	addi	r16,sp,36
   29318:	d8c00115 	stw	r3,4(sp)
   2931c:	d8800015 	stw	r2,0(sp)
   29320:	d9800215 	stw	r6,8(sp)
   29324:	dfc01015 	stw	ra,64(sp)
   29328:	d9c00315 	stw	r7,12(sp)
   2932c:	0029e7c0 	call	29e7c <__unpack_d>
   29330:	d9000204 	addi	r4,sp,8
   29334:	800b883a 	mov	r5,r16
   29338:	0029e7c0 	call	29e7c <__unpack_d>
   2933c:	d8800417 	ldw	r2,16(sp)
   29340:	00c00044 	movi	r3,1
   29344:	180d883a 	mov	r6,r3
   29348:	1880062e 	bgeu	r3,r2,29364 <__nedf2+0x70>
   2934c:	d8800917 	ldw	r2,36(sp)
   29350:	8809883a 	mov	r4,r17
   29354:	800b883a 	mov	r5,r16
   29358:	1880022e 	bgeu	r3,r2,29364 <__nedf2+0x70>
   2935c:	0029fb40 	call	29fb4 <__fpcmp_parts_d>
   29360:	100d883a 	mov	r6,r2
   29364:	3005883a 	mov	r2,r6
   29368:	dfc01017 	ldw	ra,64(sp)
   2936c:	dc400f17 	ldw	r17,60(sp)
   29370:	dc000e17 	ldw	r16,56(sp)
   29374:	dec01104 	addi	sp,sp,68
   29378:	f800283a 	ret

0002937c <__gtdf2>:
   2937c:	deffef04 	addi	sp,sp,-68
   29380:	dc400f15 	stw	r17,60(sp)
   29384:	dc400404 	addi	r17,sp,16
   29388:	2005883a 	mov	r2,r4
   2938c:	2807883a 	mov	r3,r5
   29390:	dc000e15 	stw	r16,56(sp)
   29394:	d809883a 	mov	r4,sp
   29398:	880b883a 	mov	r5,r17
   2939c:	dc000904 	addi	r16,sp,36
   293a0:	d8c00115 	stw	r3,4(sp)
   293a4:	d8800015 	stw	r2,0(sp)
   293a8:	d9800215 	stw	r6,8(sp)
   293ac:	dfc01015 	stw	ra,64(sp)
   293b0:	d9c00315 	stw	r7,12(sp)
   293b4:	0029e7c0 	call	29e7c <__unpack_d>
   293b8:	d9000204 	addi	r4,sp,8
   293bc:	800b883a 	mov	r5,r16
   293c0:	0029e7c0 	call	29e7c <__unpack_d>
   293c4:	d8800417 	ldw	r2,16(sp)
   293c8:	00c00044 	movi	r3,1
   293cc:	01bfffc4 	movi	r6,-1
   293d0:	1880062e 	bgeu	r3,r2,293ec <__gtdf2+0x70>
   293d4:	d8800917 	ldw	r2,36(sp)
   293d8:	8809883a 	mov	r4,r17
   293dc:	800b883a 	mov	r5,r16
   293e0:	1880022e 	bgeu	r3,r2,293ec <__gtdf2+0x70>
   293e4:	0029fb40 	call	29fb4 <__fpcmp_parts_d>
   293e8:	100d883a 	mov	r6,r2
   293ec:	3005883a 	mov	r2,r6
   293f0:	dfc01017 	ldw	ra,64(sp)
   293f4:	dc400f17 	ldw	r17,60(sp)
   293f8:	dc000e17 	ldw	r16,56(sp)
   293fc:	dec01104 	addi	sp,sp,68
   29400:	f800283a 	ret

00029404 <__gedf2>:
   29404:	deffef04 	addi	sp,sp,-68
   29408:	dc400f15 	stw	r17,60(sp)
   2940c:	dc400404 	addi	r17,sp,16
   29410:	2005883a 	mov	r2,r4
   29414:	2807883a 	mov	r3,r5
   29418:	dc000e15 	stw	r16,56(sp)
   2941c:	d809883a 	mov	r4,sp
   29420:	880b883a 	mov	r5,r17
   29424:	dc000904 	addi	r16,sp,36
   29428:	d8c00115 	stw	r3,4(sp)
   2942c:	d8800015 	stw	r2,0(sp)
   29430:	d9800215 	stw	r6,8(sp)
   29434:	dfc01015 	stw	ra,64(sp)
   29438:	d9c00315 	stw	r7,12(sp)
   2943c:	0029e7c0 	call	29e7c <__unpack_d>
   29440:	d9000204 	addi	r4,sp,8
   29444:	800b883a 	mov	r5,r16
   29448:	0029e7c0 	call	29e7c <__unpack_d>
   2944c:	d8800417 	ldw	r2,16(sp)
   29450:	00c00044 	movi	r3,1
   29454:	01bfffc4 	movi	r6,-1
   29458:	1880062e 	bgeu	r3,r2,29474 <__gedf2+0x70>
   2945c:	d8800917 	ldw	r2,36(sp)
   29460:	8809883a 	mov	r4,r17
   29464:	800b883a 	mov	r5,r16
   29468:	1880022e 	bgeu	r3,r2,29474 <__gedf2+0x70>
   2946c:	0029fb40 	call	29fb4 <__fpcmp_parts_d>
   29470:	100d883a 	mov	r6,r2
   29474:	3005883a 	mov	r2,r6
   29478:	dfc01017 	ldw	ra,64(sp)
   2947c:	dc400f17 	ldw	r17,60(sp)
   29480:	dc000e17 	ldw	r16,56(sp)
   29484:	dec01104 	addi	sp,sp,68
   29488:	f800283a 	ret

0002948c <__ltdf2>:
   2948c:	deffef04 	addi	sp,sp,-68
   29490:	dc400f15 	stw	r17,60(sp)
   29494:	dc400404 	addi	r17,sp,16
   29498:	2005883a 	mov	r2,r4
   2949c:	2807883a 	mov	r3,r5
   294a0:	dc000e15 	stw	r16,56(sp)
   294a4:	d809883a 	mov	r4,sp
   294a8:	880b883a 	mov	r5,r17
   294ac:	dc000904 	addi	r16,sp,36
   294b0:	d8c00115 	stw	r3,4(sp)
   294b4:	d8800015 	stw	r2,0(sp)
   294b8:	d9800215 	stw	r6,8(sp)
   294bc:	dfc01015 	stw	ra,64(sp)
   294c0:	d9c00315 	stw	r7,12(sp)
   294c4:	0029e7c0 	call	29e7c <__unpack_d>
   294c8:	d9000204 	addi	r4,sp,8
   294cc:	800b883a 	mov	r5,r16
   294d0:	0029e7c0 	call	29e7c <__unpack_d>
   294d4:	d8800417 	ldw	r2,16(sp)
   294d8:	00c00044 	movi	r3,1
   294dc:	180d883a 	mov	r6,r3
   294e0:	1880062e 	bgeu	r3,r2,294fc <__ltdf2+0x70>
   294e4:	d8800917 	ldw	r2,36(sp)
   294e8:	8809883a 	mov	r4,r17
   294ec:	800b883a 	mov	r5,r16
   294f0:	1880022e 	bgeu	r3,r2,294fc <__ltdf2+0x70>
   294f4:	0029fb40 	call	29fb4 <__fpcmp_parts_d>
   294f8:	100d883a 	mov	r6,r2
   294fc:	3005883a 	mov	r2,r6
   29500:	dfc01017 	ldw	ra,64(sp)
   29504:	dc400f17 	ldw	r17,60(sp)
   29508:	dc000e17 	ldw	r16,56(sp)
   2950c:	dec01104 	addi	sp,sp,68
   29510:	f800283a 	ret

00029514 <__floatsidf>:
   29514:	2006d7fa 	srli	r3,r4,31
   29518:	defff604 	addi	sp,sp,-40
   2951c:	008000c4 	movi	r2,3
   29520:	dfc00915 	stw	ra,36(sp)
   29524:	dcc00815 	stw	r19,32(sp)
   29528:	dc800715 	stw	r18,28(sp)
   2952c:	dc400615 	stw	r17,24(sp)
   29530:	dc000515 	stw	r16,20(sp)
   29534:	d8800015 	stw	r2,0(sp)
   29538:	d8c00115 	stw	r3,4(sp)
   2953c:	20000f1e 	bne	r4,zero,2957c <__floatsidf+0x68>
   29540:	00800084 	movi	r2,2
   29544:	d8800015 	stw	r2,0(sp)
   29548:	d809883a 	mov	r4,sp
   2954c:	0029b680 	call	29b68 <__pack_d>
   29550:	1009883a 	mov	r4,r2
   29554:	180b883a 	mov	r5,r3
   29558:	2005883a 	mov	r2,r4
   2955c:	2807883a 	mov	r3,r5
   29560:	dfc00917 	ldw	ra,36(sp)
   29564:	dcc00817 	ldw	r19,32(sp)
   29568:	dc800717 	ldw	r18,28(sp)
   2956c:	dc400617 	ldw	r17,24(sp)
   29570:	dc000517 	ldw	r16,20(sp)
   29574:	dec00a04 	addi	sp,sp,40
   29578:	f800283a 	ret
   2957c:	00800f04 	movi	r2,60
   29580:	1807003a 	cmpeq	r3,r3,zero
   29584:	d8800215 	stw	r2,8(sp)
   29588:	18001126 	beq	r3,zero,295d0 <__floatsidf+0xbc>
   2958c:	0027883a 	mov	r19,zero
   29590:	2025883a 	mov	r18,r4
   29594:	d9000315 	stw	r4,12(sp)
   29598:	dcc00415 	stw	r19,16(sp)
   2959c:	0029ae80 	call	29ae8 <__clzsi2>
   295a0:	11000744 	addi	r4,r2,29
   295a4:	013fe80e 	bge	zero,r4,29548 <__floatsidf+0x34>
   295a8:	10bfff44 	addi	r2,r2,-3
   295ac:	10000c16 	blt	r2,zero,295e0 <__floatsidf+0xcc>
   295b0:	90a2983a 	sll	r17,r18,r2
   295b4:	0021883a 	mov	r16,zero
   295b8:	d8800217 	ldw	r2,8(sp)
   295bc:	dc400415 	stw	r17,16(sp)
   295c0:	dc000315 	stw	r16,12(sp)
   295c4:	1105c83a 	sub	r2,r2,r4
   295c8:	d8800215 	stw	r2,8(sp)
   295cc:	003fde06 	br	29548 <__floatsidf+0x34>
   295d0:	00a00034 	movhi	r2,32768
   295d4:	20800a26 	beq	r4,r2,29600 <__floatsidf+0xec>
   295d8:	0109c83a 	sub	r4,zero,r4
   295dc:	003feb06 	br	2958c <__floatsidf+0x78>
   295e0:	9006d07a 	srli	r3,r18,1
   295e4:	008007c4 	movi	r2,31
   295e8:	1105c83a 	sub	r2,r2,r4
   295ec:	1886d83a 	srl	r3,r3,r2
   295f0:	9922983a 	sll	r17,r19,r4
   295f4:	9120983a 	sll	r16,r18,r4
   295f8:	1c62b03a 	or	r17,r3,r17
   295fc:	003fee06 	br	295b8 <__floatsidf+0xa4>
   29600:	0009883a 	mov	r4,zero
   29604:	01707834 	movhi	r5,49632
   29608:	003fd306 	br	29558 <__floatsidf+0x44>

0002960c <__fixdfsi>:
   2960c:	defff804 	addi	sp,sp,-32
   29610:	2005883a 	mov	r2,r4
   29614:	2807883a 	mov	r3,r5
   29618:	d809883a 	mov	r4,sp
   2961c:	d9400204 	addi	r5,sp,8
   29620:	d8c00115 	stw	r3,4(sp)
   29624:	d8800015 	stw	r2,0(sp)
   29628:	dfc00715 	stw	ra,28(sp)
   2962c:	0029e7c0 	call	29e7c <__unpack_d>
   29630:	d8c00217 	ldw	r3,8(sp)
   29634:	00800084 	movi	r2,2
   29638:	1880051e 	bne	r3,r2,29650 <__fixdfsi+0x44>
   2963c:	0007883a 	mov	r3,zero
   29640:	1805883a 	mov	r2,r3
   29644:	dfc00717 	ldw	ra,28(sp)
   29648:	dec00804 	addi	sp,sp,32
   2964c:	f800283a 	ret
   29650:	00800044 	movi	r2,1
   29654:	10fff92e 	bgeu	r2,r3,2963c <__fixdfsi+0x30>
   29658:	00800104 	movi	r2,4
   2965c:	18800426 	beq	r3,r2,29670 <__fixdfsi+0x64>
   29660:	d8c00417 	ldw	r3,16(sp)
   29664:	183ff516 	blt	r3,zero,2963c <__fixdfsi+0x30>
   29668:	00800784 	movi	r2,30
   2966c:	10c0080e 	bge	r2,r3,29690 <__fixdfsi+0x84>
   29670:	d8800317 	ldw	r2,12(sp)
   29674:	1000121e 	bne	r2,zero,296c0 <__fixdfsi+0xb4>
   29678:	00e00034 	movhi	r3,32768
   2967c:	18ffffc4 	addi	r3,r3,-1
   29680:	1805883a 	mov	r2,r3
   29684:	dfc00717 	ldw	ra,28(sp)
   29688:	dec00804 	addi	sp,sp,32
   2968c:	f800283a 	ret
   29690:	00800f04 	movi	r2,60
   29694:	10d1c83a 	sub	r8,r2,r3
   29698:	40bff804 	addi	r2,r8,-32
   2969c:	d9800517 	ldw	r6,20(sp)
   296a0:	d9c00617 	ldw	r7,24(sp)
   296a4:	10000816 	blt	r2,zero,296c8 <__fixdfsi+0xbc>
   296a8:	3888d83a 	srl	r4,r7,r2
   296ac:	d8800317 	ldw	r2,12(sp)
   296b0:	2007883a 	mov	r3,r4
   296b4:	103fe226 	beq	r2,zero,29640 <__fixdfsi+0x34>
   296b8:	0107c83a 	sub	r3,zero,r4
   296bc:	003fe006 	br	29640 <__fixdfsi+0x34>
   296c0:	00e00034 	movhi	r3,32768
   296c4:	003fde06 	br	29640 <__fixdfsi+0x34>
   296c8:	39c7883a 	add	r3,r7,r7
   296cc:	008007c4 	movi	r2,31
   296d0:	1205c83a 	sub	r2,r2,r8
   296d4:	1886983a 	sll	r3,r3,r2
   296d8:	3208d83a 	srl	r4,r6,r8
   296dc:	1908b03a 	or	r4,r3,r4
   296e0:	003ff206 	br	296ac <__fixdfsi+0xa0>

000296e4 <__floatunsidf>:
   296e4:	defff204 	addi	sp,sp,-56
   296e8:	dfc00d15 	stw	ra,52(sp)
   296ec:	ddc00c15 	stw	r23,48(sp)
   296f0:	dd800b15 	stw	r22,44(sp)
   296f4:	dd400a15 	stw	r21,40(sp)
   296f8:	dd000915 	stw	r20,36(sp)
   296fc:	dcc00815 	stw	r19,32(sp)
   29700:	dc800715 	stw	r18,28(sp)
   29704:	dc400615 	stw	r17,24(sp)
   29708:	dc000515 	stw	r16,20(sp)
   2970c:	d8000115 	stw	zero,4(sp)
   29710:	20000f1e 	bne	r4,zero,29750 <__floatunsidf+0x6c>
   29714:	00800084 	movi	r2,2
   29718:	d8800015 	stw	r2,0(sp)
   2971c:	d809883a 	mov	r4,sp
   29720:	0029b680 	call	29b68 <__pack_d>
   29724:	dfc00d17 	ldw	ra,52(sp)
   29728:	ddc00c17 	ldw	r23,48(sp)
   2972c:	dd800b17 	ldw	r22,44(sp)
   29730:	dd400a17 	ldw	r21,40(sp)
   29734:	dd000917 	ldw	r20,36(sp)
   29738:	dcc00817 	ldw	r19,32(sp)
   2973c:	dc800717 	ldw	r18,28(sp)
   29740:	dc400617 	ldw	r17,24(sp)
   29744:	dc000517 	ldw	r16,20(sp)
   29748:	dec00e04 	addi	sp,sp,56
   2974c:	f800283a 	ret
   29750:	008000c4 	movi	r2,3
   29754:	00c00f04 	movi	r3,60
   29758:	002f883a 	mov	r23,zero
   2975c:	202d883a 	mov	r22,r4
   29760:	d8800015 	stw	r2,0(sp)
   29764:	d8c00215 	stw	r3,8(sp)
   29768:	d9000315 	stw	r4,12(sp)
   2976c:	ddc00415 	stw	r23,16(sp)
   29770:	0029ae80 	call	29ae8 <__clzsi2>
   29774:	12400744 	addi	r9,r2,29
   29778:	48000b16 	blt	r9,zero,297a8 <__floatunsidf+0xc4>
   2977c:	483fe726 	beq	r9,zero,2971c <__floatunsidf+0x38>
   29780:	10bfff44 	addi	r2,r2,-3
   29784:	10002e16 	blt	r2,zero,29840 <__floatunsidf+0x15c>
   29788:	b0a2983a 	sll	r17,r22,r2
   2978c:	0021883a 	mov	r16,zero
   29790:	d8800217 	ldw	r2,8(sp)
   29794:	dc400415 	stw	r17,16(sp)
   29798:	dc000315 	stw	r16,12(sp)
   2979c:	1245c83a 	sub	r2,r2,r9
   297a0:	d8800215 	stw	r2,8(sp)
   297a4:	003fdd06 	br	2971c <__floatunsidf+0x38>
   297a8:	0255c83a 	sub	r10,zero,r9
   297ac:	51bff804 	addi	r6,r10,-32
   297b0:	30001b16 	blt	r6,zero,29820 <__floatunsidf+0x13c>
   297b4:	b9a8d83a 	srl	r20,r23,r6
   297b8:	002b883a 	mov	r21,zero
   297bc:	000f883a 	mov	r7,zero
   297c0:	01000044 	movi	r4,1
   297c4:	0011883a 	mov	r8,zero
   297c8:	30002516 	blt	r6,zero,29860 <__floatunsidf+0x17c>
   297cc:	21a6983a 	sll	r19,r4,r6
   297d0:	0025883a 	mov	r18,zero
   297d4:	00bfffc4 	movi	r2,-1
   297d8:	9089883a 	add	r4,r18,r2
   297dc:	988b883a 	add	r5,r19,r2
   297e0:	248d803a 	cmpltu	r6,r4,r18
   297e4:	314b883a 	add	r5,r6,r5
   297e8:	b104703a 	and	r2,r22,r4
   297ec:	b946703a 	and	r3,r23,r5
   297f0:	10c4b03a 	or	r2,r2,r3
   297f4:	10000226 	beq	r2,zero,29800 <__floatunsidf+0x11c>
   297f8:	01c00044 	movi	r7,1
   297fc:	0011883a 	mov	r8,zero
   29800:	d9000217 	ldw	r4,8(sp)
   29804:	a1c4b03a 	or	r2,r20,r7
   29808:	aa06b03a 	or	r3,r21,r8
   2980c:	2249c83a 	sub	r4,r4,r9
   29810:	d8c00415 	stw	r3,16(sp)
   29814:	d9000215 	stw	r4,8(sp)
   29818:	d8800315 	stw	r2,12(sp)
   2981c:	003fbf06 	br	2971c <__floatunsidf+0x38>
   29820:	bdc7883a 	add	r3,r23,r23
   29824:	008007c4 	movi	r2,31
   29828:	1285c83a 	sub	r2,r2,r10
   2982c:	1886983a 	sll	r3,r3,r2
   29830:	b2a8d83a 	srl	r20,r22,r10
   29834:	baaad83a 	srl	r21,r23,r10
   29838:	1d28b03a 	or	r20,r3,r20
   2983c:	003fdf06 	br	297bc <__floatunsidf+0xd8>
   29840:	b006d07a 	srli	r3,r22,1
   29844:	008007c4 	movi	r2,31
   29848:	1245c83a 	sub	r2,r2,r9
   2984c:	1886d83a 	srl	r3,r3,r2
   29850:	ba62983a 	sll	r17,r23,r9
   29854:	b260983a 	sll	r16,r22,r9
   29858:	1c62b03a 	or	r17,r3,r17
   2985c:	003fcc06 	br	29790 <__floatunsidf+0xac>
   29860:	2006d07a 	srli	r3,r4,1
   29864:	008007c4 	movi	r2,31
   29868:	1285c83a 	sub	r2,r2,r10
   2986c:	18a6d83a 	srl	r19,r3,r2
   29870:	22a4983a 	sll	r18,r4,r10
   29874:	003fd706 	br	297d4 <__floatunsidf+0xf0>

00029878 <udivmodsi4>:
   29878:	29001b2e 	bgeu	r5,r4,298e8 <udivmodsi4+0x70>
   2987c:	28001a16 	blt	r5,zero,298e8 <udivmodsi4+0x70>
   29880:	00800044 	movi	r2,1
   29884:	0007883a 	mov	r3,zero
   29888:	01c007c4 	movi	r7,31
   2988c:	00000306 	br	2989c <udivmodsi4+0x24>
   29890:	19c01326 	beq	r3,r7,298e0 <udivmodsi4+0x68>
   29894:	18c00044 	addi	r3,r3,1
   29898:	28000416 	blt	r5,zero,298ac <udivmodsi4+0x34>
   2989c:	294b883a 	add	r5,r5,r5
   298a0:	1085883a 	add	r2,r2,r2
   298a4:	293ffa36 	bltu	r5,r4,29890 <udivmodsi4+0x18>
   298a8:	10000d26 	beq	r2,zero,298e0 <udivmodsi4+0x68>
   298ac:	0007883a 	mov	r3,zero
   298b0:	21400236 	bltu	r4,r5,298bc <udivmodsi4+0x44>
   298b4:	2149c83a 	sub	r4,r4,r5
   298b8:	1886b03a 	or	r3,r3,r2
   298bc:	1004d07a 	srli	r2,r2,1
   298c0:	280ad07a 	srli	r5,r5,1
   298c4:	103ffa1e 	bne	r2,zero,298b0 <udivmodsi4+0x38>
   298c8:	30000226 	beq	r6,zero,298d4 <udivmodsi4+0x5c>
   298cc:	2005883a 	mov	r2,r4
   298d0:	f800283a 	ret
   298d4:	1809883a 	mov	r4,r3
   298d8:	2005883a 	mov	r2,r4
   298dc:	f800283a 	ret
   298e0:	0007883a 	mov	r3,zero
   298e4:	003ff806 	br	298c8 <udivmodsi4+0x50>
   298e8:	00800044 	movi	r2,1
   298ec:	0007883a 	mov	r3,zero
   298f0:	003fef06 	br	298b0 <udivmodsi4+0x38>

000298f4 <__divsi3>:
   298f4:	defffe04 	addi	sp,sp,-8
   298f8:	dc000015 	stw	r16,0(sp)
   298fc:	dfc00115 	stw	ra,4(sp)
   29900:	0021883a 	mov	r16,zero
   29904:	20000c16 	blt	r4,zero,29938 <__divsi3+0x44>
   29908:	000d883a 	mov	r6,zero
   2990c:	28000e16 	blt	r5,zero,29948 <__divsi3+0x54>
   29910:	00298780 	call	29878 <udivmodsi4>
   29914:	1007883a 	mov	r3,r2
   29918:	8005003a 	cmpeq	r2,r16,zero
   2991c:	1000011e 	bne	r2,zero,29924 <__divsi3+0x30>
   29920:	00c7c83a 	sub	r3,zero,r3
   29924:	1805883a 	mov	r2,r3
   29928:	dfc00117 	ldw	ra,4(sp)
   2992c:	dc000017 	ldw	r16,0(sp)
   29930:	dec00204 	addi	sp,sp,8
   29934:	f800283a 	ret
   29938:	0109c83a 	sub	r4,zero,r4
   2993c:	04000044 	movi	r16,1
   29940:	000d883a 	mov	r6,zero
   29944:	283ff20e 	bge	r5,zero,29910 <__divsi3+0x1c>
   29948:	014bc83a 	sub	r5,zero,r5
   2994c:	8021003a 	cmpeq	r16,r16,zero
   29950:	003fef06 	br	29910 <__divsi3+0x1c>

00029954 <__modsi3>:
   29954:	deffff04 	addi	sp,sp,-4
   29958:	dfc00015 	stw	ra,0(sp)
   2995c:	01800044 	movi	r6,1
   29960:	2807883a 	mov	r3,r5
   29964:	20000416 	blt	r4,zero,29978 <__modsi3+0x24>
   29968:	28000c16 	blt	r5,zero,2999c <__modsi3+0x48>
   2996c:	dfc00017 	ldw	ra,0(sp)
   29970:	dec00104 	addi	sp,sp,4
   29974:	00298781 	jmpi	29878 <udivmodsi4>
   29978:	0109c83a 	sub	r4,zero,r4
   2997c:	28000b16 	blt	r5,zero,299ac <__modsi3+0x58>
   29980:	180b883a 	mov	r5,r3
   29984:	01800044 	movi	r6,1
   29988:	00298780 	call	29878 <udivmodsi4>
   2998c:	0085c83a 	sub	r2,zero,r2
   29990:	dfc00017 	ldw	ra,0(sp)
   29994:	dec00104 	addi	sp,sp,4
   29998:	f800283a 	ret
   2999c:	014bc83a 	sub	r5,zero,r5
   299a0:	dfc00017 	ldw	ra,0(sp)
   299a4:	dec00104 	addi	sp,sp,4
   299a8:	00298781 	jmpi	29878 <udivmodsi4>
   299ac:	0147c83a 	sub	r3,zero,r5
   299b0:	003ff306 	br	29980 <__modsi3+0x2c>

000299b4 <__udivsi3>:
   299b4:	000d883a 	mov	r6,zero
   299b8:	00298781 	jmpi	29878 <udivmodsi4>

000299bc <__umodsi3>:
   299bc:	01800044 	movi	r6,1
   299c0:	00298781 	jmpi	29878 <udivmodsi4>

000299c4 <__muldi3>:
   299c4:	defff204 	addi	sp,sp,-56
   299c8:	df000c15 	stw	fp,48(sp)
   299cc:	3038d43a 	srli	fp,r6,16
   299d0:	dd000815 	stw	r20,32(sp)
   299d4:	dc400515 	stw	r17,20(sp)
   299d8:	2028d43a 	srli	r20,r4,16
   299dc:	247fffcc 	andi	r17,r4,65535
   299e0:	dc000415 	stw	r16,16(sp)
   299e4:	343fffcc 	andi	r16,r6,65535
   299e8:	dcc00715 	stw	r19,28(sp)
   299ec:	d9000015 	stw	r4,0(sp)
   299f0:	2827883a 	mov	r19,r5
   299f4:	8809883a 	mov	r4,r17
   299f8:	d9400115 	stw	r5,4(sp)
   299fc:	800b883a 	mov	r5,r16
   29a00:	d9800215 	stw	r6,8(sp)
   29a04:	dfc00d15 	stw	ra,52(sp)
   29a08:	d9c00315 	stw	r7,12(sp)
   29a0c:	dd800a15 	stw	r22,40(sp)
   29a10:	dd400915 	stw	r21,36(sp)
   29a14:	302d883a 	mov	r22,r6
   29a18:	ddc00b15 	stw	r23,44(sp)
   29a1c:	dc800615 	stw	r18,24(sp)
   29a20:	00206100 	call	20610 <__mulsi3>
   29a24:	8809883a 	mov	r4,r17
   29a28:	e00b883a 	mov	r5,fp
   29a2c:	102b883a 	mov	r21,r2
   29a30:	00206100 	call	20610 <__mulsi3>
   29a34:	800b883a 	mov	r5,r16
   29a38:	a009883a 	mov	r4,r20
   29a3c:	1023883a 	mov	r17,r2
   29a40:	00206100 	call	20610 <__mulsi3>
   29a44:	a009883a 	mov	r4,r20
   29a48:	e00b883a 	mov	r5,fp
   29a4c:	1021883a 	mov	r16,r2
   29a50:	00206100 	call	20610 <__mulsi3>
   29a54:	a8ffffcc 	andi	r3,r21,65535
   29a58:	a82ad43a 	srli	r21,r21,16
   29a5c:	8c23883a 	add	r17,r17,r16
   29a60:	1011883a 	mov	r8,r2
   29a64:	ac6b883a 	add	r21,r21,r17
   29a68:	a804943a 	slli	r2,r21,16
   29a6c:	b009883a 	mov	r4,r22
   29a70:	980b883a 	mov	r5,r19
   29a74:	10c7883a 	add	r3,r2,r3
   29a78:	a812d43a 	srli	r9,r21,16
   29a7c:	180d883a 	mov	r6,r3
   29a80:	ac00022e 	bgeu	r21,r16,29a8c <__muldi3+0xc8>
   29a84:	00800074 	movhi	r2,1
   29a88:	4091883a 	add	r8,r8,r2
   29a8c:	4267883a 	add	r19,r8,r9
   29a90:	302d883a 	mov	r22,r6
   29a94:	00206100 	call	20610 <__mulsi3>
   29a98:	d9400317 	ldw	r5,12(sp)
   29a9c:	d9000017 	ldw	r4,0(sp)
   29aa0:	1023883a 	mov	r17,r2
   29aa4:	00206100 	call	20610 <__mulsi3>
   29aa8:	14cb883a 	add	r5,r2,r19
   29aac:	894b883a 	add	r5,r17,r5
   29ab0:	b005883a 	mov	r2,r22
   29ab4:	2807883a 	mov	r3,r5
   29ab8:	dfc00d17 	ldw	ra,52(sp)
   29abc:	df000c17 	ldw	fp,48(sp)
   29ac0:	ddc00b17 	ldw	r23,44(sp)
   29ac4:	dd800a17 	ldw	r22,40(sp)
   29ac8:	dd400917 	ldw	r21,36(sp)
   29acc:	dd000817 	ldw	r20,32(sp)
   29ad0:	dcc00717 	ldw	r19,28(sp)
   29ad4:	dc800617 	ldw	r18,24(sp)
   29ad8:	dc400517 	ldw	r17,20(sp)
   29adc:	dc000417 	ldw	r16,16(sp)
   29ae0:	dec00e04 	addi	sp,sp,56
   29ae4:	f800283a 	ret

00029ae8 <__clzsi2>:
   29ae8:	00bfffd4 	movui	r2,65535
   29aec:	11000e36 	bltu	r2,r4,29b28 <__clzsi2+0x40>
   29af0:	00803fc4 	movi	r2,255
   29af4:	01400204 	movi	r5,8
   29af8:	0007883a 	mov	r3,zero
   29afc:	11001036 	bltu	r2,r4,29b40 <__clzsi2+0x58>
   29b00:	000b883a 	mov	r5,zero
   29b04:	20c6d83a 	srl	r3,r4,r3
   29b08:	008000f4 	movhi	r2,3
   29b0c:	10b3a504 	addi	r2,r2,-12652
   29b10:	1887883a 	add	r3,r3,r2
   29b14:	18800003 	ldbu	r2,0(r3)
   29b18:	00c00804 	movi	r3,32
   29b1c:	2885883a 	add	r2,r5,r2
   29b20:	1885c83a 	sub	r2,r3,r2
   29b24:	f800283a 	ret
   29b28:	01400404 	movi	r5,16
   29b2c:	00804034 	movhi	r2,256
   29b30:	10bfffc4 	addi	r2,r2,-1
   29b34:	2807883a 	mov	r3,r5
   29b38:	113ff22e 	bgeu	r2,r4,29b04 <__clzsi2+0x1c>
   29b3c:	01400604 	movi	r5,24
   29b40:	2807883a 	mov	r3,r5
   29b44:	20c6d83a 	srl	r3,r4,r3
   29b48:	008000f4 	movhi	r2,3
   29b4c:	10b3a504 	addi	r2,r2,-12652
   29b50:	1887883a 	add	r3,r3,r2
   29b54:	18800003 	ldbu	r2,0(r3)
   29b58:	00c00804 	movi	r3,32
   29b5c:	2885883a 	add	r2,r5,r2
   29b60:	1885c83a 	sub	r2,r3,r2
   29b64:	f800283a 	ret

00029b68 <__pack_d>:
   29b68:	20c00017 	ldw	r3,0(r4)
   29b6c:	defffd04 	addi	sp,sp,-12
   29b70:	dc000015 	stw	r16,0(sp)
   29b74:	dc800215 	stw	r18,8(sp)
   29b78:	dc400115 	stw	r17,4(sp)
   29b7c:	00800044 	movi	r2,1
   29b80:	22000317 	ldw	r8,12(r4)
   29b84:	001f883a 	mov	r15,zero
   29b88:	22400417 	ldw	r9,16(r4)
   29b8c:	24000117 	ldw	r16,4(r4)
   29b90:	10c0552e 	bgeu	r2,r3,29ce8 <__pack_d+0x180>
   29b94:	00800104 	movi	r2,4
   29b98:	18804f26 	beq	r3,r2,29cd8 <__pack_d+0x170>
   29b9c:	00800084 	movi	r2,2
   29ba0:	18800226 	beq	r3,r2,29bac <__pack_d+0x44>
   29ba4:	4244b03a 	or	r2,r8,r9
   29ba8:	10001a1e 	bne	r2,zero,29c14 <__pack_d+0xac>
   29bac:	000d883a 	mov	r6,zero
   29bb0:	000f883a 	mov	r7,zero
   29bb4:	0011883a 	mov	r8,zero
   29bb8:	00800434 	movhi	r2,16
   29bbc:	10bfffc4 	addi	r2,r2,-1
   29bc0:	301d883a 	mov	r14,r6
   29bc4:	3884703a 	and	r2,r7,r2
   29bc8:	400a953a 	slli	r5,r8,20
   29bcc:	79bffc2c 	andhi	r6,r15,65520
   29bd0:	308cb03a 	or	r6,r6,r2
   29bd4:	00e00434 	movhi	r3,32784
   29bd8:	18ffffc4 	addi	r3,r3,-1
   29bdc:	800497fa 	slli	r2,r16,31
   29be0:	30c6703a 	and	r3,r6,r3
   29be4:	1946b03a 	or	r3,r3,r5
   29be8:	01600034 	movhi	r5,32768
   29bec:	297fffc4 	addi	r5,r5,-1
   29bf0:	194a703a 	and	r5,r3,r5
   29bf4:	288ab03a 	or	r5,r5,r2
   29bf8:	2807883a 	mov	r3,r5
   29bfc:	7005883a 	mov	r2,r14
   29c00:	dc800217 	ldw	r18,8(sp)
   29c04:	dc400117 	ldw	r17,4(sp)
   29c08:	dc000017 	ldw	r16,0(sp)
   29c0c:	dec00304 	addi	sp,sp,12
   29c10:	f800283a 	ret
   29c14:	21000217 	ldw	r4,8(r4)
   29c18:	00bf0084 	movi	r2,-1022
   29c1c:	20803f16 	blt	r4,r2,29d1c <__pack_d+0x1b4>
   29c20:	0080ffc4 	movi	r2,1023
   29c24:	11002c16 	blt	r2,r4,29cd8 <__pack_d+0x170>
   29c28:	00803fc4 	movi	r2,255
   29c2c:	408c703a 	and	r6,r8,r2
   29c30:	00802004 	movi	r2,128
   29c34:	0007883a 	mov	r3,zero
   29c38:	000f883a 	mov	r7,zero
   29c3c:	2280ffc4 	addi	r10,r4,1023
   29c40:	30801e26 	beq	r6,r2,29cbc <__pack_d+0x154>
   29c44:	00801fc4 	movi	r2,127
   29c48:	4089883a 	add	r4,r8,r2
   29c4c:	220d803a 	cmpltu	r6,r4,r8
   29c50:	324d883a 	add	r6,r6,r9
   29c54:	2011883a 	mov	r8,r4
   29c58:	3013883a 	mov	r9,r6
   29c5c:	00880034 	movhi	r2,8192
   29c60:	10bfffc4 	addi	r2,r2,-1
   29c64:	12400d36 	bltu	r2,r9,29c9c <__pack_d+0x134>
   29c68:	4804963a 	slli	r2,r9,24
   29c6c:	400cd23a 	srli	r6,r8,8
   29c70:	480ed23a 	srli	r7,r9,8
   29c74:	013fffc4 	movi	r4,-1
   29c78:	118cb03a 	or	r6,r2,r6
   29c7c:	01400434 	movhi	r5,16
   29c80:	297fffc4 	addi	r5,r5,-1
   29c84:	3104703a 	and	r2,r6,r4
   29c88:	3946703a 	and	r3,r7,r5
   29c8c:	5201ffcc 	andi	r8,r10,2047
   29c90:	100d883a 	mov	r6,r2
   29c94:	180f883a 	mov	r7,r3
   29c98:	003fc706 	br	29bb8 <__pack_d+0x50>
   29c9c:	480897fa 	slli	r4,r9,31
   29ca0:	4004d07a 	srli	r2,r8,1
   29ca4:	4806d07a 	srli	r3,r9,1
   29ca8:	52800044 	addi	r10,r10,1
   29cac:	2084b03a 	or	r2,r4,r2
   29cb0:	1011883a 	mov	r8,r2
   29cb4:	1813883a 	mov	r9,r3
   29cb8:	003feb06 	br	29c68 <__pack_d+0x100>
   29cbc:	383fe11e 	bne	r7,zero,29c44 <__pack_d+0xdc>
   29cc0:	01004004 	movi	r4,256
   29cc4:	4104703a 	and	r2,r8,r4
   29cc8:	10c4b03a 	or	r2,r2,r3
   29ccc:	103fe326 	beq	r2,zero,29c5c <__pack_d+0xf4>
   29cd0:	3005883a 	mov	r2,r6
   29cd4:	003fdc06 	br	29c48 <__pack_d+0xe0>
   29cd8:	000d883a 	mov	r6,zero
   29cdc:	000f883a 	mov	r7,zero
   29ce0:	0201ffc4 	movi	r8,2047
   29ce4:	003fb406 	br	29bb8 <__pack_d+0x50>
   29ce8:	0005883a 	mov	r2,zero
   29cec:	00c00234 	movhi	r3,8
   29cf0:	408cb03a 	or	r6,r8,r2
   29cf4:	48ceb03a 	or	r7,r9,r3
   29cf8:	013fffc4 	movi	r4,-1
   29cfc:	01400434 	movhi	r5,16
   29d00:	297fffc4 	addi	r5,r5,-1
   29d04:	3104703a 	and	r2,r6,r4
   29d08:	3946703a 	and	r3,r7,r5
   29d0c:	100d883a 	mov	r6,r2
   29d10:	180f883a 	mov	r7,r3
   29d14:	0201ffc4 	movi	r8,2047
   29d18:	003fa706 	br	29bb8 <__pack_d+0x50>
   29d1c:	1109c83a 	sub	r4,r2,r4
   29d20:	00800e04 	movi	r2,56
   29d24:	11004316 	blt	r2,r4,29e34 <__pack_d+0x2cc>
   29d28:	21fff804 	addi	r7,r4,-32
   29d2c:	38004516 	blt	r7,zero,29e44 <__pack_d+0x2dc>
   29d30:	49d8d83a 	srl	r12,r9,r7
   29d34:	001b883a 	mov	r13,zero
   29d38:	0023883a 	mov	r17,zero
   29d3c:	01400044 	movi	r5,1
   29d40:	0025883a 	mov	r18,zero
   29d44:	38004716 	blt	r7,zero,29e64 <__pack_d+0x2fc>
   29d48:	29d6983a 	sll	r11,r5,r7
   29d4c:	0015883a 	mov	r10,zero
   29d50:	00bfffc4 	movi	r2,-1
   29d54:	5089883a 	add	r4,r10,r2
   29d58:	588b883a 	add	r5,r11,r2
   29d5c:	228d803a 	cmpltu	r6,r4,r10
   29d60:	314b883a 	add	r5,r6,r5
   29d64:	4104703a 	and	r2,r8,r4
   29d68:	4946703a 	and	r3,r9,r5
   29d6c:	10c4b03a 	or	r2,r2,r3
   29d70:	10000226 	beq	r2,zero,29d7c <__pack_d+0x214>
   29d74:	04400044 	movi	r17,1
   29d78:	0025883a 	mov	r18,zero
   29d7c:	00803fc4 	movi	r2,255
   29d80:	644eb03a 	or	r7,r12,r17
   29d84:	3892703a 	and	r9,r7,r2
   29d88:	00802004 	movi	r2,128
   29d8c:	6c90b03a 	or	r8,r13,r18
   29d90:	0015883a 	mov	r10,zero
   29d94:	48801626 	beq	r9,r2,29df0 <__pack_d+0x288>
   29d98:	01001fc4 	movi	r4,127
   29d9c:	3905883a 	add	r2,r7,r4
   29da0:	11cd803a 	cmpltu	r6,r2,r7
   29da4:	320d883a 	add	r6,r6,r8
   29da8:	100f883a 	mov	r7,r2
   29dac:	00840034 	movhi	r2,4096
   29db0:	10bfffc4 	addi	r2,r2,-1
   29db4:	3011883a 	mov	r8,r6
   29db8:	0007883a 	mov	r3,zero
   29dbc:	11801b36 	bltu	r2,r6,29e2c <__pack_d+0x2c4>
   29dc0:	4004963a 	slli	r2,r8,24
   29dc4:	3808d23a 	srli	r4,r7,8
   29dc8:	400ad23a 	srli	r5,r8,8
   29dcc:	1813883a 	mov	r9,r3
   29dd0:	1108b03a 	or	r4,r2,r4
   29dd4:	00bfffc4 	movi	r2,-1
   29dd8:	00c00434 	movhi	r3,16
   29ddc:	18ffffc4 	addi	r3,r3,-1
   29de0:	208c703a 	and	r6,r4,r2
   29de4:	28ce703a 	and	r7,r5,r3
   29de8:	4a01ffcc 	andi	r8,r9,2047
   29dec:	003f7206 	br	29bb8 <__pack_d+0x50>
   29df0:	503fe91e 	bne	r10,zero,29d98 <__pack_d+0x230>
   29df4:	01004004 	movi	r4,256
   29df8:	3904703a 	and	r2,r7,r4
   29dfc:	0007883a 	mov	r3,zero
   29e00:	10c4b03a 	or	r2,r2,r3
   29e04:	10000626 	beq	r2,zero,29e20 <__pack_d+0x2b8>
   29e08:	3a45883a 	add	r2,r7,r9
   29e0c:	11cd803a 	cmpltu	r6,r2,r7
   29e10:	320d883a 	add	r6,r6,r8
   29e14:	100f883a 	mov	r7,r2
   29e18:	3011883a 	mov	r8,r6
   29e1c:	0007883a 	mov	r3,zero
   29e20:	00840034 	movhi	r2,4096
   29e24:	10bfffc4 	addi	r2,r2,-1
   29e28:	123fe52e 	bgeu	r2,r8,29dc0 <__pack_d+0x258>
   29e2c:	00c00044 	movi	r3,1
   29e30:	003fe306 	br	29dc0 <__pack_d+0x258>
   29e34:	0009883a 	mov	r4,zero
   29e38:	0013883a 	mov	r9,zero
   29e3c:	000b883a 	mov	r5,zero
   29e40:	003fe406 	br	29dd4 <__pack_d+0x26c>
   29e44:	4a47883a 	add	r3,r9,r9
   29e48:	008007c4 	movi	r2,31
   29e4c:	1105c83a 	sub	r2,r2,r4
   29e50:	1886983a 	sll	r3,r3,r2
   29e54:	4118d83a 	srl	r12,r8,r4
   29e58:	491ad83a 	srl	r13,r9,r4
   29e5c:	1b18b03a 	or	r12,r3,r12
   29e60:	003fb506 	br	29d38 <__pack_d+0x1d0>
   29e64:	2806d07a 	srli	r3,r5,1
   29e68:	008007c4 	movi	r2,31
   29e6c:	1105c83a 	sub	r2,r2,r4
   29e70:	1896d83a 	srl	r11,r3,r2
   29e74:	2914983a 	sll	r10,r5,r4
   29e78:	003fb506 	br	29d50 <__pack_d+0x1e8>

00029e7c <__unpack_d>:
   29e7c:	20c00117 	ldw	r3,4(r4)
   29e80:	22400017 	ldw	r9,0(r4)
   29e84:	00800434 	movhi	r2,16
   29e88:	10bfffc4 	addi	r2,r2,-1
   29e8c:	1808d53a 	srli	r4,r3,20
   29e90:	180cd7fa 	srli	r6,r3,31
   29e94:	1894703a 	and	r10,r3,r2
   29e98:	2201ffcc 	andi	r8,r4,2047
   29e9c:	281b883a 	mov	r13,r5
   29ea0:	4817883a 	mov	r11,r9
   29ea4:	29800115 	stw	r6,4(r5)
   29ea8:	5019883a 	mov	r12,r10
   29eac:	40001e1e 	bne	r8,zero,29f28 <__unpack_d+0xac>
   29eb0:	4a84b03a 	or	r2,r9,r10
   29eb4:	10001926 	beq	r2,zero,29f1c <__unpack_d+0xa0>
   29eb8:	4804d63a 	srli	r2,r9,24
   29ebc:	500c923a 	slli	r6,r10,8
   29ec0:	013f0084 	movi	r4,-1022
   29ec4:	00c40034 	movhi	r3,4096
   29ec8:	18ffffc4 	addi	r3,r3,-1
   29ecc:	118cb03a 	or	r6,r2,r6
   29ed0:	008000c4 	movi	r2,3
   29ed4:	480a923a 	slli	r5,r9,8
   29ed8:	68800015 	stw	r2,0(r13)
   29edc:	69000215 	stw	r4,8(r13)
   29ee0:	19800b36 	bltu	r3,r6,29f10 <__unpack_d+0x94>
   29ee4:	200f883a 	mov	r7,r4
   29ee8:	1811883a 	mov	r8,r3
   29eec:	2945883a 	add	r2,r5,r5
   29ef0:	1149803a 	cmpltu	r4,r2,r5
   29ef4:	3187883a 	add	r3,r6,r6
   29ef8:	20c9883a 	add	r4,r4,r3
   29efc:	100b883a 	mov	r5,r2
   29f00:	200d883a 	mov	r6,r4
   29f04:	39ffffc4 	addi	r7,r7,-1
   29f08:	413ff82e 	bgeu	r8,r4,29eec <__unpack_d+0x70>
   29f0c:	69c00215 	stw	r7,8(r13)
   29f10:	69800415 	stw	r6,16(r13)
   29f14:	69400315 	stw	r5,12(r13)
   29f18:	f800283a 	ret
   29f1c:	00800084 	movi	r2,2
   29f20:	28800015 	stw	r2,0(r5)
   29f24:	f800283a 	ret
   29f28:	0081ffc4 	movi	r2,2047
   29f2c:	40800f26 	beq	r8,r2,29f6c <__unpack_d+0xf0>
   29f30:	480cd63a 	srli	r6,r9,24
   29f34:	5006923a 	slli	r3,r10,8
   29f38:	4804923a 	slli	r2,r9,8
   29f3c:	0009883a 	mov	r4,zero
   29f40:	30c6b03a 	or	r3,r6,r3
   29f44:	01440034 	movhi	r5,4096
   29f48:	110cb03a 	or	r6,r2,r4
   29f4c:	423f0044 	addi	r8,r8,-1023
   29f50:	194eb03a 	or	r7,r3,r5
   29f54:	008000c4 	movi	r2,3
   29f58:	69c00415 	stw	r7,16(r13)
   29f5c:	6a000215 	stw	r8,8(r13)
   29f60:	68800015 	stw	r2,0(r13)
   29f64:	69800315 	stw	r6,12(r13)
   29f68:	f800283a 	ret
   29f6c:	4a84b03a 	or	r2,r9,r10
   29f70:	1000031e 	bne	r2,zero,29f80 <__unpack_d+0x104>
   29f74:	00800104 	movi	r2,4
   29f78:	28800015 	stw	r2,0(r5)
   29f7c:	f800283a 	ret
   29f80:	0009883a 	mov	r4,zero
   29f84:	01400234 	movhi	r5,8
   29f88:	4904703a 	and	r2,r9,r4
   29f8c:	5146703a 	and	r3,r10,r5
   29f90:	10c4b03a 	or	r2,r2,r3
   29f94:	10000526 	beq	r2,zero,29fac <__unpack_d+0x130>
   29f98:	00800044 	movi	r2,1
   29f9c:	68800015 	stw	r2,0(r13)
   29fa0:	6b000415 	stw	r12,16(r13)
   29fa4:	6ac00315 	stw	r11,12(r13)
   29fa8:	f800283a 	ret
   29fac:	68000015 	stw	zero,0(r13)
   29fb0:	003ffb06 	br	29fa0 <__unpack_d+0x124>

00029fb4 <__fpcmp_parts_d>:
   29fb4:	21800017 	ldw	r6,0(r4)
   29fb8:	00c00044 	movi	r3,1
   29fbc:	19800a2e 	bgeu	r3,r6,29fe8 <__fpcmp_parts_d+0x34>
   29fc0:	28800017 	ldw	r2,0(r5)
   29fc4:	1880082e 	bgeu	r3,r2,29fe8 <__fpcmp_parts_d+0x34>
   29fc8:	00c00104 	movi	r3,4
   29fcc:	30c02626 	beq	r6,r3,2a068 <__fpcmp_parts_d+0xb4>
   29fd0:	10c02226 	beq	r2,r3,2a05c <__fpcmp_parts_d+0xa8>
   29fd4:	00c00084 	movi	r3,2
   29fd8:	30c00526 	beq	r6,r3,29ff0 <__fpcmp_parts_d+0x3c>
   29fdc:	10c0071e 	bne	r2,r3,29ffc <__fpcmp_parts_d+0x48>
   29fe0:	20800117 	ldw	r2,4(r4)
   29fe4:	1000091e 	bne	r2,zero,2a00c <__fpcmp_parts_d+0x58>
   29fe8:	00800044 	movi	r2,1
   29fec:	f800283a 	ret
   29ff0:	10c01a1e 	bne	r2,r3,2a05c <__fpcmp_parts_d+0xa8>
   29ff4:	0005883a 	mov	r2,zero
   29ff8:	f800283a 	ret
   29ffc:	22000117 	ldw	r8,4(r4)
   2a000:	28800117 	ldw	r2,4(r5)
   2a004:	40800326 	beq	r8,r2,2a014 <__fpcmp_parts_d+0x60>
   2a008:	403ff726 	beq	r8,zero,29fe8 <__fpcmp_parts_d+0x34>
   2a00c:	00bfffc4 	movi	r2,-1
   2a010:	f800283a 	ret
   2a014:	20c00217 	ldw	r3,8(r4)
   2a018:	28800217 	ldw	r2,8(r5)
   2a01c:	10fffa16 	blt	r2,r3,2a008 <__fpcmp_parts_d+0x54>
   2a020:	18800916 	blt	r3,r2,2a048 <__fpcmp_parts_d+0x94>
   2a024:	21c00417 	ldw	r7,16(r4)
   2a028:	28c00417 	ldw	r3,16(r5)
   2a02c:	21800317 	ldw	r6,12(r4)
   2a030:	28800317 	ldw	r2,12(r5)
   2a034:	19fff436 	bltu	r3,r7,2a008 <__fpcmp_parts_d+0x54>
   2a038:	38c00526 	beq	r7,r3,2a050 <__fpcmp_parts_d+0x9c>
   2a03c:	38c00236 	bltu	r7,r3,2a048 <__fpcmp_parts_d+0x94>
   2a040:	19ffec1e 	bne	r3,r7,29ff4 <__fpcmp_parts_d+0x40>
   2a044:	30bfeb2e 	bgeu	r6,r2,29ff4 <__fpcmp_parts_d+0x40>
   2a048:	403fe71e 	bne	r8,zero,29fe8 <__fpcmp_parts_d+0x34>
   2a04c:	003fef06 	br	2a00c <__fpcmp_parts_d+0x58>
   2a050:	11bffa2e 	bgeu	r2,r6,2a03c <__fpcmp_parts_d+0x88>
   2a054:	403fe426 	beq	r8,zero,29fe8 <__fpcmp_parts_d+0x34>
   2a058:	003fec06 	br	2a00c <__fpcmp_parts_d+0x58>
   2a05c:	28800117 	ldw	r2,4(r5)
   2a060:	103fe11e 	bne	r2,zero,29fe8 <__fpcmp_parts_d+0x34>
   2a064:	003fe906 	br	2a00c <__fpcmp_parts_d+0x58>
   2a068:	11bfdd1e 	bne	r2,r6,29fe0 <__fpcmp_parts_d+0x2c>
   2a06c:	28c00117 	ldw	r3,4(r5)
   2a070:	20800117 	ldw	r2,4(r4)
   2a074:	1885c83a 	sub	r2,r3,r2
   2a078:	f800283a 	ret

0002a07c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2a07c:	defff804 	addi	sp,sp,-32
   2a080:	dfc00715 	stw	ra,28(sp)
   2a084:	df000615 	stw	fp,24(sp)
   2a088:	df000604 	addi	fp,sp,24
   2a08c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2a090:	e0bffc17 	ldw	r2,-16(fp)
   2a094:	1004803a 	cmplt	r2,r2,zero
   2a098:	1000091e 	bne	r2,zero,2a0c0 <close+0x44>
   2a09c:	e13ffc17 	ldw	r4,-16(fp)
   2a0a0:	01400304 	movi	r5,12
   2a0a4:	00206100 	call	20610 <__mulsi3>
   2a0a8:	1007883a 	mov	r3,r2
   2a0ac:	008000f4 	movhi	r2,3
   2a0b0:	10b60104 	addi	r2,r2,-10236
   2a0b4:	1887883a 	add	r3,r3,r2
   2a0b8:	e0ffff15 	stw	r3,-4(fp)
   2a0bc:	00000106 	br	2a0c4 <close+0x48>
   2a0c0:	e03fff15 	stw	zero,-4(fp)
   2a0c4:	e0bfff17 	ldw	r2,-4(fp)
   2a0c8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   2a0cc:	e0bffb17 	ldw	r2,-20(fp)
   2a0d0:	1005003a 	cmpeq	r2,r2,zero
   2a0d4:	10001d1e 	bne	r2,zero,2a14c <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2a0d8:	e0bffb17 	ldw	r2,-20(fp)
   2a0dc:	10800017 	ldw	r2,0(r2)
   2a0e0:	10800417 	ldw	r2,16(r2)
   2a0e4:	1005003a 	cmpeq	r2,r2,zero
   2a0e8:	1000071e 	bne	r2,zero,2a108 <close+0x8c>
   2a0ec:	e0bffb17 	ldw	r2,-20(fp)
   2a0f0:	10800017 	ldw	r2,0(r2)
   2a0f4:	10800417 	ldw	r2,16(r2)
   2a0f8:	e13ffb17 	ldw	r4,-20(fp)
   2a0fc:	103ee83a 	callr	r2
   2a100:	e0bffe15 	stw	r2,-8(fp)
   2a104:	00000106 	br	2a10c <close+0x90>
   2a108:	e03ffe15 	stw	zero,-8(fp)
   2a10c:	e0bffe17 	ldw	r2,-8(fp)
   2a110:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2a114:	e13ffc17 	ldw	r4,-16(fp)
   2a118:	002aa940 	call	2aa94 <alt_release_fd>
    if (rval < 0)
   2a11c:	e0bffa17 	ldw	r2,-24(fp)
   2a120:	1004403a 	cmpge	r2,r2,zero
   2a124:	1000071e 	bne	r2,zero,2a144 <close+0xc8>
    {
      ALT_ERRNO = -rval;
   2a128:	002a17c0 	call	2a17c <alt_get_errno>
   2a12c:	e0fffa17 	ldw	r3,-24(fp)
   2a130:	00c7c83a 	sub	r3,zero,r3
   2a134:	10c00015 	stw	r3,0(r2)
      return -1;
   2a138:	00bfffc4 	movi	r2,-1
   2a13c:	e0bffd15 	stw	r2,-12(fp)
   2a140:	00000806 	br	2a164 <close+0xe8>
    }
    return 0;
   2a144:	e03ffd15 	stw	zero,-12(fp)
   2a148:	00000606 	br	2a164 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2a14c:	002a17c0 	call	2a17c <alt_get_errno>
   2a150:	1007883a 	mov	r3,r2
   2a154:	00801444 	movi	r2,81
   2a158:	18800015 	stw	r2,0(r3)
    return -1;
   2a15c:	00bfffc4 	movi	r2,-1
   2a160:	e0bffd15 	stw	r2,-12(fp)
   2a164:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   2a168:	e037883a 	mov	sp,fp
   2a16c:	dfc00117 	ldw	ra,4(sp)
   2a170:	df000017 	ldw	fp,0(sp)
   2a174:	dec00204 	addi	sp,sp,8
   2a178:	f800283a 	ret

0002a17c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2a17c:	defffd04 	addi	sp,sp,-12
   2a180:	dfc00215 	stw	ra,8(sp)
   2a184:	df000115 	stw	fp,4(sp)
   2a188:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2a18c:	008000f4 	movhi	r2,3
   2a190:	10ba8404 	addi	r2,r2,-5616
   2a194:	10800017 	ldw	r2,0(r2)
   2a198:	1005003a 	cmpeq	r2,r2,zero
   2a19c:	1000061e 	bne	r2,zero,2a1b8 <alt_get_errno+0x3c>
   2a1a0:	008000f4 	movhi	r2,3
   2a1a4:	10ba8404 	addi	r2,r2,-5616
   2a1a8:	10800017 	ldw	r2,0(r2)
   2a1ac:	103ee83a 	callr	r2
   2a1b0:	e0bfff15 	stw	r2,-4(fp)
   2a1b4:	00000306 	br	2a1c4 <alt_get_errno+0x48>
   2a1b8:	008000f4 	movhi	r2,3
   2a1bc:	10812604 	addi	r2,r2,1176
   2a1c0:	e0bfff15 	stw	r2,-4(fp)
   2a1c4:	e0bfff17 	ldw	r2,-4(fp)
}
   2a1c8:	e037883a 	mov	sp,fp
   2a1cc:	dfc00117 	ldw	ra,4(sp)
   2a1d0:	df000017 	ldw	fp,0(sp)
   2a1d4:	dec00204 	addi	sp,sp,8
   2a1d8:	f800283a 	ret

0002a1dc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2a1dc:	defffc04 	addi	sp,sp,-16
   2a1e0:	df000315 	stw	fp,12(sp)
   2a1e4:	df000304 	addi	fp,sp,12
   2a1e8:	e13ffd15 	stw	r4,-12(fp)
   2a1ec:	e17ffe15 	stw	r5,-8(fp)
   2a1f0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   2a1f4:	e0bfff17 	ldw	r2,-4(fp)
}
   2a1f8:	e037883a 	mov	sp,fp
   2a1fc:	df000017 	ldw	fp,0(sp)
   2a200:	dec00104 	addi	sp,sp,4
   2a204:	f800283a 	ret

0002a208 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2a208:	defff904 	addi	sp,sp,-28
   2a20c:	dfc00615 	stw	ra,24(sp)
   2a210:	df000515 	stw	fp,20(sp)
   2a214:	df000504 	addi	fp,sp,20
   2a218:	e13ffc15 	stw	r4,-16(fp)
   2a21c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2a220:	e0bffc17 	ldw	r2,-16(fp)
   2a224:	1004803a 	cmplt	r2,r2,zero
   2a228:	1000091e 	bne	r2,zero,2a250 <fstat+0x48>
   2a22c:	e13ffc17 	ldw	r4,-16(fp)
   2a230:	01400304 	movi	r5,12
   2a234:	00206100 	call	20610 <__mulsi3>
   2a238:	1007883a 	mov	r3,r2
   2a23c:	008000f4 	movhi	r2,3
   2a240:	10b60104 	addi	r2,r2,-10236
   2a244:	1887883a 	add	r3,r3,r2
   2a248:	e0ffff15 	stw	r3,-4(fp)
   2a24c:	00000106 	br	2a254 <fstat+0x4c>
   2a250:	e03fff15 	stw	zero,-4(fp)
   2a254:	e0bfff17 	ldw	r2,-4(fp)
   2a258:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2a25c:	e0bffb17 	ldw	r2,-20(fp)
   2a260:	1005003a 	cmpeq	r2,r2,zero
   2a264:	1000121e 	bne	r2,zero,2a2b0 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   2a268:	e0bffb17 	ldw	r2,-20(fp)
   2a26c:	10800017 	ldw	r2,0(r2)
   2a270:	10800817 	ldw	r2,32(r2)
   2a274:	1005003a 	cmpeq	r2,r2,zero
   2a278:	1000081e 	bne	r2,zero,2a29c <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
   2a27c:	e0bffb17 	ldw	r2,-20(fp)
   2a280:	10800017 	ldw	r2,0(r2)
   2a284:	10800817 	ldw	r2,32(r2)
   2a288:	e13ffb17 	ldw	r4,-20(fp)
   2a28c:	e17ffd17 	ldw	r5,-12(fp)
   2a290:	103ee83a 	callr	r2
   2a294:	e0bffe15 	stw	r2,-8(fp)
   2a298:	00000b06 	br	2a2c8 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   2a29c:	e0fffd17 	ldw	r3,-12(fp)
   2a2a0:	00880004 	movi	r2,8192
   2a2a4:	18800115 	stw	r2,4(r3)
      return 0;
   2a2a8:	e03ffe15 	stw	zero,-8(fp)
   2a2ac:	00000606 	br	2a2c8 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2a2b0:	002a2e00 	call	2a2e0 <alt_get_errno>
   2a2b4:	1007883a 	mov	r3,r2
   2a2b8:	00801444 	movi	r2,81
   2a2bc:	18800015 	stw	r2,0(r3)
    return -1;
   2a2c0:	00bfffc4 	movi	r2,-1
   2a2c4:	e0bffe15 	stw	r2,-8(fp)
   2a2c8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   2a2cc:	e037883a 	mov	sp,fp
   2a2d0:	dfc00117 	ldw	ra,4(sp)
   2a2d4:	df000017 	ldw	fp,0(sp)
   2a2d8:	dec00204 	addi	sp,sp,8
   2a2dc:	f800283a 	ret

0002a2e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2a2e0:	defffd04 	addi	sp,sp,-12
   2a2e4:	dfc00215 	stw	ra,8(sp)
   2a2e8:	df000115 	stw	fp,4(sp)
   2a2ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2a2f0:	008000f4 	movhi	r2,3
   2a2f4:	10ba8404 	addi	r2,r2,-5616
   2a2f8:	10800017 	ldw	r2,0(r2)
   2a2fc:	1005003a 	cmpeq	r2,r2,zero
   2a300:	1000061e 	bne	r2,zero,2a31c <alt_get_errno+0x3c>
   2a304:	008000f4 	movhi	r2,3
   2a308:	10ba8404 	addi	r2,r2,-5616
   2a30c:	10800017 	ldw	r2,0(r2)
   2a310:	103ee83a 	callr	r2
   2a314:	e0bfff15 	stw	r2,-4(fp)
   2a318:	00000306 	br	2a328 <alt_get_errno+0x48>
   2a31c:	008000f4 	movhi	r2,3
   2a320:	10812604 	addi	r2,r2,1176
   2a324:	e0bfff15 	stw	r2,-4(fp)
   2a328:	e0bfff17 	ldw	r2,-4(fp)
}
   2a32c:	e037883a 	mov	sp,fp
   2a330:	dfc00117 	ldw	ra,4(sp)
   2a334:	df000017 	ldw	fp,0(sp)
   2a338:	dec00204 	addi	sp,sp,8
   2a33c:	f800283a 	ret

0002a340 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   2a340:	deffef04 	addi	sp,sp,-68
   2a344:	df001015 	stw	fp,64(sp)
   2a348:	df001004 	addi	fp,sp,64
   2a34c:	e13ffc15 	stw	r4,-16(fp)
   2a350:	e17ffd15 	stw	r5,-12(fp)
   2a354:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
   2a358:	00bffa84 	movi	r2,-22
   2a35c:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   2a360:	e0bffc17 	ldw	r2,-16(fp)
   2a364:	10800828 	cmpgeui	r2,r2,32
   2a368:	1000601e 	bne	r2,zero,2a4ec <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2a36c:	0005303a 	rdctl	r2,status
   2a370:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2a374:	e0fff917 	ldw	r3,-28(fp)
   2a378:	00bfff84 	movi	r2,-2
   2a37c:	1884703a 	and	r2,r3,r2
   2a380:	1001703a 	wrctl	status,r2
  
  return context;
   2a384:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   2a388:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
   2a38c:	e0bffc17 	ldw	r2,-16(fp)
   2a390:	00c000f4 	movhi	r3,3
   2a394:	18c13704 	addi	r3,r3,1244
   2a398:	100490fa 	slli	r2,r2,3
   2a39c:	10c7883a 	add	r3,r2,r3
   2a3a0:	e0bffe17 	ldw	r2,-8(fp)
   2a3a4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
   2a3a8:	e0bffc17 	ldw	r2,-16(fp)
   2a3ac:	00c000f4 	movhi	r3,3
   2a3b0:	18c13704 	addi	r3,r3,1244
   2a3b4:	100490fa 	slli	r2,r2,3
   2a3b8:	10c5883a 	add	r2,r2,r3
   2a3bc:	10c00104 	addi	r3,r2,4
   2a3c0:	e0bffd17 	ldw	r2,-12(fp)
   2a3c4:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   2a3c8:	e0bffe17 	ldw	r2,-8(fp)
   2a3cc:	1005003a 	cmpeq	r2,r2,zero
   2a3d0:	1000201e 	bne	r2,zero,2a454 <alt_irq_register+0x114>
   2a3d4:	e0bffc17 	ldw	r2,-16(fp)
   2a3d8:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2a3dc:	0005303a 	rdctl	r2,status
   2a3e0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2a3e4:	e0fff617 	ldw	r3,-40(fp)
   2a3e8:	00bfff84 	movi	r2,-2
   2a3ec:	1884703a 	and	r2,r3,r2
   2a3f0:	1001703a 	wrctl	status,r2
  
  return context;
   2a3f4:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2a3f8:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   2a3fc:	e0fff717 	ldw	r3,-36(fp)
   2a400:	00800044 	movi	r2,1
   2a404:	10c4983a 	sll	r2,r2,r3
   2a408:	1007883a 	mov	r3,r2
   2a40c:	008000f4 	movhi	r2,3
   2a410:	10812704 	addi	r2,r2,1180
   2a414:	10800017 	ldw	r2,0(r2)
   2a418:	1886b03a 	or	r3,r3,r2
   2a41c:	008000f4 	movhi	r2,3
   2a420:	10812704 	addi	r2,r2,1180
   2a424:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2a428:	008000f4 	movhi	r2,3
   2a42c:	10812704 	addi	r2,r2,1180
   2a430:	10800017 	ldw	r2,0(r2)
   2a434:	100170fa 	wrctl	ienable,r2
   2a438:	e0bff817 	ldw	r2,-32(fp)
   2a43c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2a440:	e0bff517 	ldw	r2,-44(fp)
   2a444:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2a448:	0005883a 	mov	r2,zero
   2a44c:	e0bfff15 	stw	r2,-4(fp)
   2a450:	00002006 	br	2a4d4 <alt_irq_register+0x194>
   2a454:	e0bffc17 	ldw	r2,-16(fp)
   2a458:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2a45c:	0005303a 	rdctl	r2,status
   2a460:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2a464:	e0fff217 	ldw	r3,-56(fp)
   2a468:	00bfff84 	movi	r2,-2
   2a46c:	1884703a 	and	r2,r3,r2
   2a470:	1001703a 	wrctl	status,r2
  
  return context;
   2a474:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2a478:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
   2a47c:	e0fff317 	ldw	r3,-52(fp)
   2a480:	00800044 	movi	r2,1
   2a484:	10c4983a 	sll	r2,r2,r3
   2a488:	0084303a 	nor	r2,zero,r2
   2a48c:	1007883a 	mov	r3,r2
   2a490:	008000f4 	movhi	r2,3
   2a494:	10812704 	addi	r2,r2,1180
   2a498:	10800017 	ldw	r2,0(r2)
   2a49c:	1886703a 	and	r3,r3,r2
   2a4a0:	008000f4 	movhi	r2,3
   2a4a4:	10812704 	addi	r2,r2,1180
   2a4a8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2a4ac:	008000f4 	movhi	r2,3
   2a4b0:	10812704 	addi	r2,r2,1180
   2a4b4:	10800017 	ldw	r2,0(r2)
   2a4b8:	100170fa 	wrctl	ienable,r2
   2a4bc:	e0bff417 	ldw	r2,-48(fp)
   2a4c0:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2a4c4:	e0bff117 	ldw	r2,-60(fp)
   2a4c8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2a4cc:	0005883a 	mov	r2,zero
   2a4d0:	e0bfff15 	stw	r2,-4(fp)
   2a4d4:	e0bfff17 	ldw	r2,-4(fp)
   2a4d8:	e0bffb15 	stw	r2,-20(fp)
   2a4dc:	e0bffa17 	ldw	r2,-24(fp)
   2a4e0:	e0bff015 	stw	r2,-64(fp)
   2a4e4:	e0bff017 	ldw	r2,-64(fp)
   2a4e8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   2a4ec:	e0bffb17 	ldw	r2,-20(fp)
}
   2a4f0:	e037883a 	mov	sp,fp
   2a4f4:	df000017 	ldw	fp,0(sp)
   2a4f8:	dec00104 	addi	sp,sp,4
   2a4fc:	f800283a 	ret

0002a500 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2a500:	deffeb04 	addi	sp,sp,-84
   2a504:	dfc01415 	stw	ra,80(sp)
   2a508:	df001315 	stw	fp,76(sp)
   2a50c:	df001304 	addi	fp,sp,76
   2a510:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2a514:	e0bffd17 	ldw	r2,-12(fp)
   2a518:	1004803a 	cmplt	r2,r2,zero
   2a51c:	1000091e 	bne	r2,zero,2a544 <isatty+0x44>
   2a520:	e13ffd17 	ldw	r4,-12(fp)
   2a524:	01400304 	movi	r5,12
   2a528:	00206100 	call	20610 <__mulsi3>
   2a52c:	1007883a 	mov	r3,r2
   2a530:	008000f4 	movhi	r2,3
   2a534:	10b60104 	addi	r2,r2,-10236
   2a538:	1887883a 	add	r3,r3,r2
   2a53c:	e0ffff15 	stw	r3,-4(fp)
   2a540:	00000106 	br	2a548 <isatty+0x48>
   2a544:	e03fff15 	stw	zero,-4(fp)
   2a548:	e0bfff17 	ldw	r2,-4(fp)
   2a54c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   2a550:	e0bfed17 	ldw	r2,-76(fp)
   2a554:	1005003a 	cmpeq	r2,r2,zero
   2a558:	10000f1e 	bne	r2,zero,2a598 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   2a55c:	e0bfed17 	ldw	r2,-76(fp)
   2a560:	10800017 	ldw	r2,0(r2)
   2a564:	10800817 	ldw	r2,32(r2)
   2a568:	1004c03a 	cmpne	r2,r2,zero
   2a56c:	1000031e 	bne	r2,zero,2a57c <isatty+0x7c>
    {
      return 1;
   2a570:	00800044 	movi	r2,1
   2a574:	e0bffe15 	stw	r2,-8(fp)
   2a578:	00000c06 	br	2a5ac <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   2a57c:	e17fee04 	addi	r5,fp,-72
   2a580:	e13ffd17 	ldw	r4,-12(fp)
   2a584:	002a2080 	call	2a208 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   2a588:	e0bfef17 	ldw	r2,-68(fp)
   2a58c:	10880020 	cmpeqi	r2,r2,8192
   2a590:	e0bffe15 	stw	r2,-8(fp)
   2a594:	00000506 	br	2a5ac <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2a598:	002a5c40 	call	2a5c4 <alt_get_errno>
   2a59c:	1007883a 	mov	r3,r2
   2a5a0:	00801444 	movi	r2,81
   2a5a4:	18800015 	stw	r2,0(r3)
    return 0;
   2a5a8:	e03ffe15 	stw	zero,-8(fp)
   2a5ac:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   2a5b0:	e037883a 	mov	sp,fp
   2a5b4:	dfc00117 	ldw	ra,4(sp)
   2a5b8:	df000017 	ldw	fp,0(sp)
   2a5bc:	dec00204 	addi	sp,sp,8
   2a5c0:	f800283a 	ret

0002a5c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2a5c4:	defffd04 	addi	sp,sp,-12
   2a5c8:	dfc00215 	stw	ra,8(sp)
   2a5cc:	df000115 	stw	fp,4(sp)
   2a5d0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2a5d4:	008000f4 	movhi	r2,3
   2a5d8:	10ba8404 	addi	r2,r2,-5616
   2a5dc:	10800017 	ldw	r2,0(r2)
   2a5e0:	1005003a 	cmpeq	r2,r2,zero
   2a5e4:	1000061e 	bne	r2,zero,2a600 <alt_get_errno+0x3c>
   2a5e8:	008000f4 	movhi	r2,3
   2a5ec:	10ba8404 	addi	r2,r2,-5616
   2a5f0:	10800017 	ldw	r2,0(r2)
   2a5f4:	103ee83a 	callr	r2
   2a5f8:	e0bfff15 	stw	r2,-4(fp)
   2a5fc:	00000306 	br	2a60c <alt_get_errno+0x48>
   2a600:	008000f4 	movhi	r2,3
   2a604:	10812604 	addi	r2,r2,1176
   2a608:	e0bfff15 	stw	r2,-4(fp)
   2a60c:	e0bfff17 	ldw	r2,-4(fp)
}
   2a610:	e037883a 	mov	sp,fp
   2a614:	dfc00117 	ldw	ra,4(sp)
   2a618:	df000017 	ldw	fp,0(sp)
   2a61c:	dec00204 	addi	sp,sp,8
   2a620:	f800283a 	ret

0002a624 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2a624:	defffe04 	addi	sp,sp,-8
   2a628:	dfc00115 	stw	ra,4(sp)
   2a62c:	df000015 	stw	fp,0(sp)
   2a630:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2a634:	010000f4 	movhi	r4,3
   2a638:	213a8904 	addi	r4,r4,-5596
   2a63c:	014000f4 	movhi	r5,3
   2a640:	2973f204 	addi	r5,r5,-12344
   2a644:	018000f4 	movhi	r6,3
   2a648:	31ba8904 	addi	r6,r6,-5596
   2a64c:	002a6a40 	call	2a6a4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2a650:	010000b4 	movhi	r4,2
   2a654:	21000804 	addi	r4,r4,32
   2a658:	014000b4 	movhi	r5,2
   2a65c:	29400804 	addi	r5,r5,32
   2a660:	018000b4 	movhi	r6,2
   2a664:	31806d04 	addi	r6,r6,436
   2a668:	002a6a40 	call	2a6a4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2a66c:	010000f4 	movhi	r4,3
   2a670:	2132f404 	addi	r4,r4,-13360
   2a674:	014000f4 	movhi	r5,3
   2a678:	2972f404 	addi	r5,r5,-13360
   2a67c:	018000f4 	movhi	r6,3
   2a680:	31b3f204 	addi	r6,r6,-12344
   2a684:	002a6a40 	call	2a6a4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2a688:	002b9fc0 	call	2b9fc <alt_dcache_flush_all>
  alt_icache_flush_all();
   2a68c:	002bbf40 	call	2bbf4 <alt_icache_flush_all>
}
   2a690:	e037883a 	mov	sp,fp
   2a694:	dfc00117 	ldw	ra,4(sp)
   2a698:	df000017 	ldw	fp,0(sp)
   2a69c:	dec00204 	addi	sp,sp,8
   2a6a0:	f800283a 	ret

0002a6a4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2a6a4:	defffc04 	addi	sp,sp,-16
   2a6a8:	df000315 	stw	fp,12(sp)
   2a6ac:	df000304 	addi	fp,sp,12
   2a6b0:	e13ffd15 	stw	r4,-12(fp)
   2a6b4:	e17ffe15 	stw	r5,-8(fp)
   2a6b8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   2a6bc:	e0fffe17 	ldw	r3,-8(fp)
   2a6c0:	e0bffd17 	ldw	r2,-12(fp)
   2a6c4:	18800e26 	beq	r3,r2,2a700 <alt_load_section+0x5c>
  {
    while( to != end )
   2a6c8:	00000a06 	br	2a6f4 <alt_load_section+0x50>
    {
      *to++ = *from++;
   2a6cc:	e0bffd17 	ldw	r2,-12(fp)
   2a6d0:	10c00017 	ldw	r3,0(r2)
   2a6d4:	e0bffe17 	ldw	r2,-8(fp)
   2a6d8:	10c00015 	stw	r3,0(r2)
   2a6dc:	e0bffe17 	ldw	r2,-8(fp)
   2a6e0:	10800104 	addi	r2,r2,4
   2a6e4:	e0bffe15 	stw	r2,-8(fp)
   2a6e8:	e0bffd17 	ldw	r2,-12(fp)
   2a6ec:	10800104 	addi	r2,r2,4
   2a6f0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2a6f4:	e0fffe17 	ldw	r3,-8(fp)
   2a6f8:	e0bfff17 	ldw	r2,-4(fp)
   2a6fc:	18bff31e 	bne	r3,r2,2a6cc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   2a700:	e037883a 	mov	sp,fp
   2a704:	df000017 	ldw	fp,0(sp)
   2a708:	dec00104 	addi	sp,sp,4
   2a70c:	f800283a 	ret

0002a710 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   2a710:	defff804 	addi	sp,sp,-32
   2a714:	dfc00715 	stw	ra,28(sp)
   2a718:	df000615 	stw	fp,24(sp)
   2a71c:	df000604 	addi	fp,sp,24
   2a720:	e13ffc15 	stw	r4,-16(fp)
   2a724:	e17ffd15 	stw	r5,-12(fp)
   2a728:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2a72c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2a730:	e0bffc17 	ldw	r2,-16(fp)
   2a734:	1004803a 	cmplt	r2,r2,zero
   2a738:	1000091e 	bne	r2,zero,2a760 <lseek+0x50>
   2a73c:	e13ffc17 	ldw	r4,-16(fp)
   2a740:	01400304 	movi	r5,12
   2a744:	00206100 	call	20610 <__mulsi3>
   2a748:	1007883a 	mov	r3,r2
   2a74c:	008000f4 	movhi	r2,3
   2a750:	10b60104 	addi	r2,r2,-10236
   2a754:	1887883a 	add	r3,r3,r2
   2a758:	e0ffff15 	stw	r3,-4(fp)
   2a75c:	00000106 	br	2a764 <lseek+0x54>
   2a760:	e03fff15 	stw	zero,-4(fp)
   2a764:	e0bfff17 	ldw	r2,-4(fp)
   2a768:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   2a76c:	e0bffb17 	ldw	r2,-20(fp)
   2a770:	1005003a 	cmpeq	r2,r2,zero
   2a774:	1000111e 	bne	r2,zero,2a7bc <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2a778:	e0bffb17 	ldw	r2,-20(fp)
   2a77c:	10800017 	ldw	r2,0(r2)
   2a780:	10800717 	ldw	r2,28(r2)
   2a784:	1005003a 	cmpeq	r2,r2,zero
   2a788:	1000091e 	bne	r2,zero,2a7b0 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2a78c:	e0bffb17 	ldw	r2,-20(fp)
   2a790:	10800017 	ldw	r2,0(r2)
   2a794:	10800717 	ldw	r2,28(r2)
   2a798:	e13ffb17 	ldw	r4,-20(fp)
   2a79c:	e17ffd17 	ldw	r5,-12(fp)
   2a7a0:	e1bffe17 	ldw	r6,-8(fp)
   2a7a4:	103ee83a 	callr	r2
   2a7a8:	e0bffa15 	stw	r2,-24(fp)
   2a7ac:	00000506 	br	2a7c4 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2a7b0:	00bfde84 	movi	r2,-134
   2a7b4:	e0bffa15 	stw	r2,-24(fp)
   2a7b8:	00000206 	br	2a7c4 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
   2a7bc:	00bfebc4 	movi	r2,-81
   2a7c0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   2a7c4:	e0bffa17 	ldw	r2,-24(fp)
   2a7c8:	1004403a 	cmpge	r2,r2,zero
   2a7cc:	1000071e 	bne	r2,zero,2a7ec <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
   2a7d0:	002a8040 	call	2a804 <alt_get_errno>
   2a7d4:	1007883a 	mov	r3,r2
   2a7d8:	e0bffa17 	ldw	r2,-24(fp)
   2a7dc:	0085c83a 	sub	r2,zero,r2
   2a7e0:	18800015 	stw	r2,0(r3)
    rc = -1;
   2a7e4:	00bfffc4 	movi	r2,-1
   2a7e8:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   2a7ec:	e0bffa17 	ldw	r2,-24(fp)
}
   2a7f0:	e037883a 	mov	sp,fp
   2a7f4:	dfc00117 	ldw	ra,4(sp)
   2a7f8:	df000017 	ldw	fp,0(sp)
   2a7fc:	dec00204 	addi	sp,sp,8
   2a800:	f800283a 	ret

0002a804 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2a804:	defffd04 	addi	sp,sp,-12
   2a808:	dfc00215 	stw	ra,8(sp)
   2a80c:	df000115 	stw	fp,4(sp)
   2a810:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2a814:	008000f4 	movhi	r2,3
   2a818:	10ba8404 	addi	r2,r2,-5616
   2a81c:	10800017 	ldw	r2,0(r2)
   2a820:	1005003a 	cmpeq	r2,r2,zero
   2a824:	1000061e 	bne	r2,zero,2a840 <alt_get_errno+0x3c>
   2a828:	008000f4 	movhi	r2,3
   2a82c:	10ba8404 	addi	r2,r2,-5616
   2a830:	10800017 	ldw	r2,0(r2)
   2a834:	103ee83a 	callr	r2
   2a838:	e0bfff15 	stw	r2,-4(fp)
   2a83c:	00000306 	br	2a84c <alt_get_errno+0x48>
   2a840:	008000f4 	movhi	r2,3
   2a844:	10812604 	addi	r2,r2,1176
   2a848:	e0bfff15 	stw	r2,-4(fp)
   2a84c:	e0bfff17 	ldw	r2,-4(fp)
}
   2a850:	e037883a 	mov	sp,fp
   2a854:	dfc00117 	ldw	ra,4(sp)
   2a858:	df000017 	ldw	fp,0(sp)
   2a85c:	dec00204 	addi	sp,sp,8
   2a860:	f800283a 	ret

0002a864 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2a864:	defffd04 	addi	sp,sp,-12
   2a868:	dfc00215 	stw	ra,8(sp)
   2a86c:	df000115 	stw	fp,4(sp)
   2a870:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2a874:	0009883a 	mov	r4,zero
   2a878:	002ad4c0 	call	2ad4c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2a87c:	002ad800 	call	2ad80 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   2a880:	010000f4 	movhi	r4,3
   2a884:	2133e804 	addi	r4,r4,-12384
   2a888:	014000f4 	movhi	r5,3
   2a88c:	2973e804 	addi	r5,r5,-12384
   2a890:	018000f4 	movhi	r6,3
   2a894:	31b3e804 	addi	r6,r6,-12384
   2a898:	002bfb40 	call	2bfb4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2a89c:	002bb2c0 	call	2bb2c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2a8a0:	010000f4 	movhi	r4,3
   2a8a4:	212ee404 	addi	r4,r4,-17520
   2a8a8:	002c7580 	call	2c758 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2a8ac:	d126af17 	ldw	r4,-25924(gp)
   2a8b0:	d166b017 	ldw	r5,-25920(gp)
   2a8b4:	d1a6b117 	ldw	r6,-25916(gp)
   2a8b8:	002059c0 	call	2059c <main>
   2a8bc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2a8c0:	01000044 	movi	r4,1
   2a8c4:	002a07c0 	call	2a07c <close>
  exit (result);
   2a8c8:	e13fff17 	ldw	r4,-4(fp)
   2a8cc:	002c76c0 	call	2c76c <exit>

0002a8d0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   2a8d0:	defffe04 	addi	sp,sp,-8
   2a8d4:	df000115 	stw	fp,4(sp)
   2a8d8:	df000104 	addi	fp,sp,4
   2a8dc:	e13fff15 	stw	r4,-4(fp)
}
   2a8e0:	e037883a 	mov	sp,fp
   2a8e4:	df000017 	ldw	fp,0(sp)
   2a8e8:	dec00104 	addi	sp,sp,4
   2a8ec:	f800283a 	ret

0002a8f0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2a8f0:	defffe04 	addi	sp,sp,-8
   2a8f4:	df000115 	stw	fp,4(sp)
   2a8f8:	df000104 	addi	fp,sp,4
   2a8fc:	e13fff15 	stw	r4,-4(fp)
}
   2a900:	e037883a 	mov	sp,fp
   2a904:	df000017 	ldw	fp,0(sp)
   2a908:	dec00104 	addi	sp,sp,4
   2a90c:	f800283a 	ret

0002a910 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   2a910:	defff704 	addi	sp,sp,-36
   2a914:	dfc00815 	stw	ra,32(sp)
   2a918:	df000715 	stw	fp,28(sp)
   2a91c:	df000704 	addi	fp,sp,28
   2a920:	e13ffb15 	stw	r4,-20(fp)
   2a924:	e17ffc15 	stw	r5,-16(fp)
   2a928:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2a92c:	e0bffb17 	ldw	r2,-20(fp)
   2a930:	1004803a 	cmplt	r2,r2,zero
   2a934:	1000091e 	bne	r2,zero,2a95c <read+0x4c>
   2a938:	e13ffb17 	ldw	r4,-20(fp)
   2a93c:	01400304 	movi	r5,12
   2a940:	00206100 	call	20610 <__mulsi3>
   2a944:	1007883a 	mov	r3,r2
   2a948:	008000f4 	movhi	r2,3
   2a94c:	10b60104 	addi	r2,r2,-10236
   2a950:	1887883a 	add	r3,r3,r2
   2a954:	e0ffff15 	stw	r3,-4(fp)
   2a958:	00000106 	br	2a960 <read+0x50>
   2a95c:	e03fff15 	stw	zero,-4(fp)
   2a960:	e0bfff17 	ldw	r2,-4(fp)
   2a964:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   2a968:	e0bffa17 	ldw	r2,-24(fp)
   2a96c:	1005003a 	cmpeq	r2,r2,zero
   2a970:	1000241e 	bne	r2,zero,2aa04 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2a974:	e0bffa17 	ldw	r2,-24(fp)
   2a978:	10800217 	ldw	r2,8(r2)
   2a97c:	108000cc 	andi	r2,r2,3
   2a980:	10800060 	cmpeqi	r2,r2,1
   2a984:	10001a1e 	bne	r2,zero,2a9f0 <read+0xe0>
   2a988:	e0bffa17 	ldw	r2,-24(fp)
   2a98c:	10800017 	ldw	r2,0(r2)
   2a990:	10800517 	ldw	r2,20(r2)
   2a994:	1005003a 	cmpeq	r2,r2,zero
   2a998:	1000151e 	bne	r2,zero,2a9f0 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2a99c:	e0bffa17 	ldw	r2,-24(fp)
   2a9a0:	10800017 	ldw	r2,0(r2)
   2a9a4:	10800517 	ldw	r2,20(r2)
   2a9a8:	e17ffc17 	ldw	r5,-16(fp)
   2a9ac:	e1bffd17 	ldw	r6,-12(fp)
   2a9b0:	e13ffa17 	ldw	r4,-24(fp)
   2a9b4:	103ee83a 	callr	r2
   2a9b8:	e0bff915 	stw	r2,-28(fp)
   2a9bc:	e0bff917 	ldw	r2,-28(fp)
   2a9c0:	1004403a 	cmpge	r2,r2,zero
   2a9c4:	1000071e 	bne	r2,zero,2a9e4 <read+0xd4>
        {
          ALT_ERRNO = -rval;
   2a9c8:	002aa340 	call	2aa34 <alt_get_errno>
   2a9cc:	e0fff917 	ldw	r3,-28(fp)
   2a9d0:	00c7c83a 	sub	r3,zero,r3
   2a9d4:	10c00015 	stw	r3,0(r2)
          return -1;
   2a9d8:	00bfffc4 	movi	r2,-1
   2a9dc:	e0bffe15 	stw	r2,-8(fp)
   2a9e0:	00000e06 	br	2aa1c <read+0x10c>
        }
        return rval;
   2a9e4:	e0bff917 	ldw	r2,-28(fp)
   2a9e8:	e0bffe15 	stw	r2,-8(fp)
   2a9ec:	00000b06 	br	2aa1c <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2a9f0:	002aa340 	call	2aa34 <alt_get_errno>
   2a9f4:	1007883a 	mov	r3,r2
   2a9f8:	00800344 	movi	r2,13
   2a9fc:	18800015 	stw	r2,0(r3)
   2aa00:	00000406 	br	2aa14 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   2aa04:	002aa340 	call	2aa34 <alt_get_errno>
   2aa08:	1007883a 	mov	r3,r2
   2aa0c:	00801444 	movi	r2,81
   2aa10:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2aa14:	00bfffc4 	movi	r2,-1
   2aa18:	e0bffe15 	stw	r2,-8(fp)
   2aa1c:	e0bffe17 	ldw	r2,-8(fp)
}
   2aa20:	e037883a 	mov	sp,fp
   2aa24:	dfc00117 	ldw	ra,4(sp)
   2aa28:	df000017 	ldw	fp,0(sp)
   2aa2c:	dec00204 	addi	sp,sp,8
   2aa30:	f800283a 	ret

0002aa34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2aa34:	defffd04 	addi	sp,sp,-12
   2aa38:	dfc00215 	stw	ra,8(sp)
   2aa3c:	df000115 	stw	fp,4(sp)
   2aa40:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2aa44:	008000f4 	movhi	r2,3
   2aa48:	10ba8404 	addi	r2,r2,-5616
   2aa4c:	10800017 	ldw	r2,0(r2)
   2aa50:	1005003a 	cmpeq	r2,r2,zero
   2aa54:	1000061e 	bne	r2,zero,2aa70 <alt_get_errno+0x3c>
   2aa58:	008000f4 	movhi	r2,3
   2aa5c:	10ba8404 	addi	r2,r2,-5616
   2aa60:	10800017 	ldw	r2,0(r2)
   2aa64:	103ee83a 	callr	r2
   2aa68:	e0bfff15 	stw	r2,-4(fp)
   2aa6c:	00000306 	br	2aa7c <alt_get_errno+0x48>
   2aa70:	008000f4 	movhi	r2,3
   2aa74:	10812604 	addi	r2,r2,1176
   2aa78:	e0bfff15 	stw	r2,-4(fp)
   2aa7c:	e0bfff17 	ldw	r2,-4(fp)
}
   2aa80:	e037883a 	mov	sp,fp
   2aa84:	dfc00117 	ldw	ra,4(sp)
   2aa88:	df000017 	ldw	fp,0(sp)
   2aa8c:	dec00204 	addi	sp,sp,8
   2aa90:	f800283a 	ret

0002aa94 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   2aa94:	defffc04 	addi	sp,sp,-16
   2aa98:	dfc00315 	stw	ra,12(sp)
   2aa9c:	df000215 	stw	fp,8(sp)
   2aaa0:	dc000115 	stw	r16,4(sp)
   2aaa4:	df000104 	addi	fp,sp,4
   2aaa8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   2aaac:	e0bfff17 	ldw	r2,-4(fp)
   2aab0:	108000d0 	cmplti	r2,r2,3
   2aab4:	10000f1e 	bne	r2,zero,2aaf4 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   2aab8:	e13fff17 	ldw	r4,-4(fp)
   2aabc:	040000f4 	movhi	r16,3
   2aac0:	84360104 	addi	r16,r16,-10236
   2aac4:	01400304 	movi	r5,12
   2aac8:	00206100 	call	20610 <__mulsi3>
   2aacc:	1405883a 	add	r2,r2,r16
   2aad0:	10800204 	addi	r2,r2,8
   2aad4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   2aad8:	e13fff17 	ldw	r4,-4(fp)
   2aadc:	040000f4 	movhi	r16,3
   2aae0:	84360104 	addi	r16,r16,-10236
   2aae4:	01400304 	movi	r5,12
   2aae8:	00206100 	call	20610 <__mulsi3>
   2aaec:	1405883a 	add	r2,r2,r16
   2aaf0:	10000015 	stw	zero,0(r2)
  }
}
   2aaf4:	e037883a 	mov	sp,fp
   2aaf8:	dfc00217 	ldw	ra,8(sp)
   2aafc:	df000117 	ldw	fp,4(sp)
   2ab00:	dc000017 	ldw	r16,0(sp)
   2ab04:	dec00304 	addi	sp,sp,12
   2ab08:	f800283a 	ret

0002ab0c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   2ab0c:	defff804 	addi	sp,sp,-32
   2ab10:	df000715 	stw	fp,28(sp)
   2ab14:	df000704 	addi	fp,sp,28
   2ab18:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2ab1c:	0005303a 	rdctl	r2,status
   2ab20:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ab24:	e0fffb17 	ldw	r3,-20(fp)
   2ab28:	00bfff84 	movi	r2,-2
   2ab2c:	1884703a 	and	r2,r3,r2
   2ab30:	1001703a 	wrctl	status,r2
  
  return context;
   2ab34:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   2ab38:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   2ab3c:	d0a00d17 	ldw	r2,-32716(gp)
   2ab40:	10c000c4 	addi	r3,r2,3
   2ab44:	00bfff04 	movi	r2,-4
   2ab48:	1884703a 	and	r2,r3,r2
   2ab4c:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   2ab50:	d0e00d17 	ldw	r3,-32716(gp)
   2ab54:	e0bffe17 	ldw	r2,-8(fp)
   2ab58:	1887883a 	add	r3,r3,r2
   2ab5c:	00800134 	movhi	r2,4
   2ab60:	10800004 	addi	r2,r2,0
   2ab64:	10c0072e 	bgeu	r2,r3,2ab84 <sbrk+0x78>
   2ab68:	e0bffd17 	ldw	r2,-12(fp)
   2ab6c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ab70:	e0bffa17 	ldw	r2,-24(fp)
   2ab74:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   2ab78:	00bfffc4 	movi	r2,-1
   2ab7c:	e0bfff15 	stw	r2,-4(fp)
   2ab80:	00000c06 	br	2abb4 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   2ab84:	d0a00d17 	ldw	r2,-32716(gp)
   2ab88:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   2ab8c:	d0e00d17 	ldw	r3,-32716(gp)
   2ab90:	e0bffe17 	ldw	r2,-8(fp)
   2ab94:	1885883a 	add	r2,r3,r2
   2ab98:	d0a00d15 	stw	r2,-32716(gp)
   2ab9c:	e0bffd17 	ldw	r2,-12(fp)
   2aba0:	e0bff915 	stw	r2,-28(fp)
   2aba4:	e0bff917 	ldw	r2,-28(fp)
   2aba8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   2abac:	e0bffc17 	ldw	r2,-16(fp)
   2abb0:	e0bfff15 	stw	r2,-4(fp)
   2abb4:	e0bfff17 	ldw	r2,-4(fp)
} 
   2abb8:	e037883a 	mov	sp,fp
   2abbc:	df000017 	ldw	fp,0(sp)
   2abc0:	dec00104 	addi	sp,sp,4
   2abc4:	f800283a 	ret

0002abc8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2abc8:	defff704 	addi	sp,sp,-36
   2abcc:	dfc00815 	stw	ra,32(sp)
   2abd0:	df000715 	stw	fp,28(sp)
   2abd4:	df000704 	addi	fp,sp,28
   2abd8:	e13ffb15 	stw	r4,-20(fp)
   2abdc:	e17ffc15 	stw	r5,-16(fp)
   2abe0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2abe4:	e0bffb17 	ldw	r2,-20(fp)
   2abe8:	1004803a 	cmplt	r2,r2,zero
   2abec:	1000091e 	bne	r2,zero,2ac14 <write+0x4c>
   2abf0:	e13ffb17 	ldw	r4,-20(fp)
   2abf4:	01400304 	movi	r5,12
   2abf8:	00206100 	call	20610 <__mulsi3>
   2abfc:	1007883a 	mov	r3,r2
   2ac00:	008000f4 	movhi	r2,3
   2ac04:	10b60104 	addi	r2,r2,-10236
   2ac08:	1887883a 	add	r3,r3,r2
   2ac0c:	e0ffff15 	stw	r3,-4(fp)
   2ac10:	00000106 	br	2ac18 <write+0x50>
   2ac14:	e03fff15 	stw	zero,-4(fp)
   2ac18:	e0bfff17 	ldw	r2,-4(fp)
   2ac1c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   2ac20:	e0bffa17 	ldw	r2,-24(fp)
   2ac24:	1005003a 	cmpeq	r2,r2,zero
   2ac28:	1000241e 	bne	r2,zero,2acbc <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   2ac2c:	e0bffa17 	ldw	r2,-24(fp)
   2ac30:	10800217 	ldw	r2,8(r2)
   2ac34:	108000cc 	andi	r2,r2,3
   2ac38:	1005003a 	cmpeq	r2,r2,zero
   2ac3c:	10001a1e 	bne	r2,zero,2aca8 <write+0xe0>
   2ac40:	e0bffa17 	ldw	r2,-24(fp)
   2ac44:	10800017 	ldw	r2,0(r2)
   2ac48:	10800617 	ldw	r2,24(r2)
   2ac4c:	1005003a 	cmpeq	r2,r2,zero
   2ac50:	1000151e 	bne	r2,zero,2aca8 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   2ac54:	e0bffa17 	ldw	r2,-24(fp)
   2ac58:	10800017 	ldw	r2,0(r2)
   2ac5c:	10800617 	ldw	r2,24(r2)
   2ac60:	e17ffc17 	ldw	r5,-16(fp)
   2ac64:	e1bffd17 	ldw	r6,-12(fp)
   2ac68:	e13ffa17 	ldw	r4,-24(fp)
   2ac6c:	103ee83a 	callr	r2
   2ac70:	e0bff915 	stw	r2,-28(fp)
   2ac74:	e0bff917 	ldw	r2,-28(fp)
   2ac78:	1004403a 	cmpge	r2,r2,zero
   2ac7c:	1000071e 	bne	r2,zero,2ac9c <write+0xd4>
      {
        ALT_ERRNO = -rval;
   2ac80:	002acec0 	call	2acec <alt_get_errno>
   2ac84:	e0fff917 	ldw	r3,-28(fp)
   2ac88:	00c7c83a 	sub	r3,zero,r3
   2ac8c:	10c00015 	stw	r3,0(r2)
        return -1;
   2ac90:	00bfffc4 	movi	r2,-1
   2ac94:	e0bffe15 	stw	r2,-8(fp)
   2ac98:	00000e06 	br	2acd4 <write+0x10c>
      }
      return rval;
   2ac9c:	e0bff917 	ldw	r2,-28(fp)
   2aca0:	e0bffe15 	stw	r2,-8(fp)
   2aca4:	00000b06 	br	2acd4 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2aca8:	002acec0 	call	2acec <alt_get_errno>
   2acac:	1007883a 	mov	r3,r2
   2acb0:	00800344 	movi	r2,13
   2acb4:	18800015 	stw	r2,0(r3)
   2acb8:	00000406 	br	2accc <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2acbc:	002acec0 	call	2acec <alt_get_errno>
   2acc0:	1007883a 	mov	r3,r2
   2acc4:	00801444 	movi	r2,81
   2acc8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2accc:	00bfffc4 	movi	r2,-1
   2acd0:	e0bffe15 	stw	r2,-8(fp)
   2acd4:	e0bffe17 	ldw	r2,-8(fp)
}
   2acd8:	e037883a 	mov	sp,fp
   2acdc:	dfc00117 	ldw	ra,4(sp)
   2ace0:	df000017 	ldw	fp,0(sp)
   2ace4:	dec00204 	addi	sp,sp,8
   2ace8:	f800283a 	ret

0002acec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2acec:	defffd04 	addi	sp,sp,-12
   2acf0:	dfc00215 	stw	ra,8(sp)
   2acf4:	df000115 	stw	fp,4(sp)
   2acf8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2acfc:	008000f4 	movhi	r2,3
   2ad00:	10ba8404 	addi	r2,r2,-5616
   2ad04:	10800017 	ldw	r2,0(r2)
   2ad08:	1005003a 	cmpeq	r2,r2,zero
   2ad0c:	1000061e 	bne	r2,zero,2ad28 <alt_get_errno+0x3c>
   2ad10:	008000f4 	movhi	r2,3
   2ad14:	10ba8404 	addi	r2,r2,-5616
   2ad18:	10800017 	ldw	r2,0(r2)
   2ad1c:	103ee83a 	callr	r2
   2ad20:	e0bfff15 	stw	r2,-4(fp)
   2ad24:	00000306 	br	2ad34 <alt_get_errno+0x48>
   2ad28:	008000f4 	movhi	r2,3
   2ad2c:	10812604 	addi	r2,r2,1176
   2ad30:	e0bfff15 	stw	r2,-4(fp)
   2ad34:	e0bfff17 	ldw	r2,-4(fp)
}
   2ad38:	e037883a 	mov	sp,fp
   2ad3c:	dfc00117 	ldw	ra,4(sp)
   2ad40:	df000017 	ldw	fp,0(sp)
   2ad44:	dec00204 	addi	sp,sp,8
   2ad48:	f800283a 	ret

0002ad4c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2ad4c:	defffd04 	addi	sp,sp,-12
   2ad50:	dfc00215 	stw	ra,8(sp)
   2ad54:	df000115 	stw	fp,4(sp)
   2ad58:	df000104 	addi	fp,sp,4
   2ad5c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_0, cpu_0);
   2ad60:	002c4b40 	call	2c4b4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2ad64:	00800044 	movi	r2,1
   2ad68:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2ad6c:	e037883a 	mov	sp,fp
   2ad70:	dfc00117 	ldw	ra,4(sp)
   2ad74:	df000017 	ldw	fp,0(sp)
   2ad78:	dec00204 	addi	sp,sp,8
   2ad7c:	f800283a 	ret

0002ad80 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2ad80:	defffe04 	addi	sp,sp,-8
   2ad84:	dfc00115 	stw	ra,4(sp)
   2ad88:	df000015 	stw	fp,0(sp)
   2ad8c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   2ad90:	010000f4 	movhi	r4,3
   2ad94:	21366b04 	addi	r4,r4,-9812
   2ad98:	000b883a 	mov	r5,zero
   2ad9c:	000d883a 	mov	r6,zero
   2ada0:	002af440 	call	2af44 <altera_avalon_jtag_uart_init>
   2ada4:	010000f4 	movhi	r4,3
   2ada8:	21366104 	addi	r4,r4,-9852
   2adac:	002adc40 	call	2adc4 <alt_dev_reg>
}
   2adb0:	e037883a 	mov	sp,fp
   2adb4:	dfc00117 	ldw	ra,4(sp)
   2adb8:	df000017 	ldw	fp,0(sp)
   2adbc:	dec00204 	addi	sp,sp,8
   2adc0:	f800283a 	ret

0002adc4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2adc4:	defffd04 	addi	sp,sp,-12
   2adc8:	dfc00215 	stw	ra,8(sp)
   2adcc:	df000115 	stw	fp,4(sp)
   2add0:	df000104 	addi	fp,sp,4
   2add4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   2add8:	e13fff17 	ldw	r4,-4(fp)
   2addc:	014000f4 	movhi	r5,3
   2ade0:	297a8104 	addi	r5,r5,-5628
   2ade4:	002ba180 	call	2ba18 <alt_dev_llist_insert>
}
   2ade8:	e037883a 	mov	sp,fp
   2adec:	dfc00117 	ldw	ra,4(sp)
   2adf0:	df000017 	ldw	fp,0(sp)
   2adf4:	dec00204 	addi	sp,sp,8
   2adf8:	f800283a 	ret

0002adfc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2adfc:	defffa04 	addi	sp,sp,-24
   2ae00:	dfc00515 	stw	ra,20(sp)
   2ae04:	df000415 	stw	fp,16(sp)
   2ae08:	df000404 	addi	fp,sp,16
   2ae0c:	e13ffd15 	stw	r4,-12(fp)
   2ae10:	e17ffe15 	stw	r5,-8(fp)
   2ae14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2ae18:	e0bffd17 	ldw	r2,-12(fp)
   2ae1c:	10800017 	ldw	r2,0(r2)
   2ae20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2ae24:	e0bffc17 	ldw	r2,-16(fp)
   2ae28:	11000a04 	addi	r4,r2,40
   2ae2c:	e0bffd17 	ldw	r2,-12(fp)
   2ae30:	11c00217 	ldw	r7,8(r2)
   2ae34:	e17ffe17 	ldw	r5,-8(fp)
   2ae38:	e1bfff17 	ldw	r6,-4(fp)
   2ae3c:	002b4440 	call	2b444 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2ae40:	e037883a 	mov	sp,fp
   2ae44:	dfc00117 	ldw	ra,4(sp)
   2ae48:	df000017 	ldw	fp,0(sp)
   2ae4c:	dec00204 	addi	sp,sp,8
   2ae50:	f800283a 	ret

0002ae54 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2ae54:	defffa04 	addi	sp,sp,-24
   2ae58:	dfc00515 	stw	ra,20(sp)
   2ae5c:	df000415 	stw	fp,16(sp)
   2ae60:	df000404 	addi	fp,sp,16
   2ae64:	e13ffd15 	stw	r4,-12(fp)
   2ae68:	e17ffe15 	stw	r5,-8(fp)
   2ae6c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2ae70:	e0bffd17 	ldw	r2,-12(fp)
   2ae74:	10800017 	ldw	r2,0(r2)
   2ae78:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2ae7c:	e0bffc17 	ldw	r2,-16(fp)
   2ae80:	11000a04 	addi	r4,r2,40
   2ae84:	e0bffd17 	ldw	r2,-12(fp)
   2ae88:	11c00217 	ldw	r7,8(r2)
   2ae8c:	e17ffe17 	ldw	r5,-8(fp)
   2ae90:	e1bfff17 	ldw	r6,-4(fp)
   2ae94:	002b6680 	call	2b668 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2ae98:	e037883a 	mov	sp,fp
   2ae9c:	dfc00117 	ldw	ra,4(sp)
   2aea0:	df000017 	ldw	fp,0(sp)
   2aea4:	dec00204 	addi	sp,sp,8
   2aea8:	f800283a 	ret

0002aeac <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   2aeac:	defffc04 	addi	sp,sp,-16
   2aeb0:	dfc00315 	stw	ra,12(sp)
   2aeb4:	df000215 	stw	fp,8(sp)
   2aeb8:	df000204 	addi	fp,sp,8
   2aebc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2aec0:	e0bfff17 	ldw	r2,-4(fp)
   2aec4:	10800017 	ldw	r2,0(r2)
   2aec8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   2aecc:	e0bffe17 	ldw	r2,-8(fp)
   2aed0:	11000a04 	addi	r4,r2,40
   2aed4:	e0bfff17 	ldw	r2,-4(fp)
   2aed8:	11400217 	ldw	r5,8(r2)
   2aedc:	002b2dc0 	call	2b2dc <altera_avalon_jtag_uart_close>
}
   2aee0:	e037883a 	mov	sp,fp
   2aee4:	dfc00117 	ldw	ra,4(sp)
   2aee8:	df000017 	ldw	fp,0(sp)
   2aeec:	dec00204 	addi	sp,sp,8
   2aef0:	f800283a 	ret

0002aef4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2aef4:	defffa04 	addi	sp,sp,-24
   2aef8:	dfc00515 	stw	ra,20(sp)
   2aefc:	df000415 	stw	fp,16(sp)
   2af00:	df000404 	addi	fp,sp,16
   2af04:	e13ffd15 	stw	r4,-12(fp)
   2af08:	e17ffe15 	stw	r5,-8(fp)
   2af0c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2af10:	e0bffd17 	ldw	r2,-12(fp)
   2af14:	10800017 	ldw	r2,0(r2)
   2af18:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   2af1c:	e0bffc17 	ldw	r2,-16(fp)
   2af20:	11000a04 	addi	r4,r2,40
   2af24:	e17ffe17 	ldw	r5,-8(fp)
   2af28:	e1bfff17 	ldw	r6,-4(fp)
   2af2c:	002b3500 	call	2b350 <altera_avalon_jtag_uart_ioctl>
}
   2af30:	e037883a 	mov	sp,fp
   2af34:	dfc00117 	ldw	ra,4(sp)
   2af38:	df000017 	ldw	fp,0(sp)
   2af3c:	dec00204 	addi	sp,sp,8
   2af40:	f800283a 	ret

0002af44 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   2af44:	defffa04 	addi	sp,sp,-24
   2af48:	dfc00515 	stw	ra,20(sp)
   2af4c:	df000415 	stw	fp,16(sp)
   2af50:	df000404 	addi	fp,sp,16
   2af54:	e13ffd15 	stw	r4,-12(fp)
   2af58:	e17ffe15 	stw	r5,-8(fp)
   2af5c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2af60:	e0fffd17 	ldw	r3,-12(fp)
   2af64:	00800044 	movi	r2,1
   2af68:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   2af6c:	e0bffd17 	ldw	r2,-12(fp)
   2af70:	10800017 	ldw	r2,0(r2)
   2af74:	11000104 	addi	r4,r2,4
   2af78:	e0bffd17 	ldw	r2,-12(fp)
   2af7c:	10800817 	ldw	r2,32(r2)
   2af80:	1007883a 	mov	r3,r2
   2af84:	2005883a 	mov	r2,r4
   2af88:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   2af8c:	e13ffe17 	ldw	r4,-8(fp)
   2af90:	e17fff17 	ldw	r5,-4(fp)
   2af94:	d8000015 	stw	zero,0(sp)
   2af98:	018000f4 	movhi	r6,3
   2af9c:	31ac0104 	addi	r6,r6,-20476
   2afa0:	e1fffd17 	ldw	r7,-12(fp)
   2afa4:	002bc100 	call	2bc10 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   2afa8:	e0bffd17 	ldw	r2,-12(fp)
   2afac:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   2afb0:	e0bffd17 	ldw	r2,-12(fp)
   2afb4:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2afb8:	008000f4 	movhi	r2,3
   2afbc:	10812b04 	addi	r2,r2,1196
   2afc0:	10800017 	ldw	r2,0(r2)
   2afc4:	100b883a 	mov	r5,r2
   2afc8:	018000f4 	movhi	r6,3
   2afcc:	31ac8b04 	addi	r6,r6,-19924
   2afd0:	e1fffd17 	ldw	r7,-12(fp)
   2afd4:	002b8a80 	call	2b8a8 <alt_alarm_start>
   2afd8:	1004403a 	cmpge	r2,r2,zero
   2afdc:	1000041e 	bne	r2,zero,2aff0 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   2afe0:	e0fffd17 	ldw	r3,-12(fp)
   2afe4:	00a00034 	movhi	r2,32768
   2afe8:	10bfffc4 	addi	r2,r2,-1
   2afec:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   2aff0:	e037883a 	mov	sp,fp
   2aff4:	dfc00117 	ldw	ra,4(sp)
   2aff8:	df000017 	ldw	fp,0(sp)
   2affc:	dec00204 	addi	sp,sp,8
   2b000:	f800283a 	ret

0002b004 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   2b004:	defff804 	addi	sp,sp,-32
   2b008:	df000715 	stw	fp,28(sp)
   2b00c:	df000704 	addi	fp,sp,28
   2b010:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   2b014:	e0bfff17 	ldw	r2,-4(fp)
   2b018:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   2b01c:	e0bffe17 	ldw	r2,-8(fp)
   2b020:	10800017 	ldw	r2,0(r2)
   2b024:	e0bffd15 	stw	r2,-12(fp)
   2b028:	00000006 	br	2b02c <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2b02c:	e0bffd17 	ldw	r2,-12(fp)
   2b030:	10800104 	addi	r2,r2,4
   2b034:	10800037 	ldwio	r2,0(r2)
   2b038:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   2b03c:	e0bffc17 	ldw	r2,-16(fp)
   2b040:	1080c00c 	andi	r2,r2,768
   2b044:	1005003a 	cmpeq	r2,r2,zero
   2b048:	1000741e 	bne	r2,zero,2b21c <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   2b04c:	e0bffc17 	ldw	r2,-16(fp)
   2b050:	1080400c 	andi	r2,r2,256
   2b054:	1005003a 	cmpeq	r2,r2,zero
   2b058:	1000351e 	bne	r2,zero,2b130 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   2b05c:	00800074 	movhi	r2,1
   2b060:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2b064:	e0bffe17 	ldw	r2,-8(fp)
   2b068:	10800a17 	ldw	r2,40(r2)
   2b06c:	10800044 	addi	r2,r2,1
   2b070:	1081ffcc 	andi	r2,r2,2047
   2b074:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   2b078:	e0bffe17 	ldw	r2,-8(fp)
   2b07c:	10c00b17 	ldw	r3,44(r2)
   2b080:	e0bffa17 	ldw	r2,-24(fp)
   2b084:	18801626 	beq	r3,r2,2b0e0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2b088:	e0bffd17 	ldw	r2,-12(fp)
   2b08c:	10800037 	ldwio	r2,0(r2)
   2b090:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   2b094:	e0bffb17 	ldw	r2,-20(fp)
   2b098:	10a0000c 	andi	r2,r2,32768
   2b09c:	1005003a 	cmpeq	r2,r2,zero
   2b0a0:	10000f1e 	bne	r2,zero,2b0e0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   2b0a4:	e0bffe17 	ldw	r2,-8(fp)
   2b0a8:	10c00a17 	ldw	r3,40(r2)
   2b0ac:	e0bffb17 	ldw	r2,-20(fp)
   2b0b0:	1009883a 	mov	r4,r2
   2b0b4:	e0bffe17 	ldw	r2,-8(fp)
   2b0b8:	1885883a 	add	r2,r3,r2
   2b0bc:	10800e04 	addi	r2,r2,56
   2b0c0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2b0c4:	e0bffe17 	ldw	r2,-8(fp)
   2b0c8:	10800a17 	ldw	r2,40(r2)
   2b0cc:	10800044 	addi	r2,r2,1
   2b0d0:	10c1ffcc 	andi	r3,r2,2047
   2b0d4:	e0bffe17 	ldw	r2,-8(fp)
   2b0d8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   2b0dc:	003fe106 	br	2b064 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   2b0e0:	e0bffb17 	ldw	r2,-20(fp)
   2b0e4:	10bfffec 	andhi	r2,r2,65535
   2b0e8:	1005003a 	cmpeq	r2,r2,zero
   2b0ec:	1000101e 	bne	r2,zero,2b130 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2b0f0:	e0bffe17 	ldw	r2,-8(fp)
   2b0f4:	10c00817 	ldw	r3,32(r2)
   2b0f8:	00bfff84 	movi	r2,-2
   2b0fc:	1886703a 	and	r3,r3,r2
   2b100:	e0bffe17 	ldw	r2,-8(fp)
   2b104:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   2b108:	e0bffd17 	ldw	r2,-12(fp)
   2b10c:	11000104 	addi	r4,r2,4
   2b110:	e0bffe17 	ldw	r2,-8(fp)
   2b114:	10800817 	ldw	r2,32(r2)
   2b118:	1007883a 	mov	r3,r2
   2b11c:	2005883a 	mov	r2,r4
   2b120:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2b124:	e0bffd17 	ldw	r2,-12(fp)
   2b128:	10800104 	addi	r2,r2,4
   2b12c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   2b130:	e0bffc17 	ldw	r2,-16(fp)
   2b134:	1080800c 	andi	r2,r2,512
   2b138:	1005003a 	cmpeq	r2,r2,zero
   2b13c:	103fbb1e 	bne	r2,zero,2b02c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   2b140:	e0bffc17 	ldw	r2,-16(fp)
   2b144:	10bfffec 	andhi	r2,r2,65535
   2b148:	1004d43a 	srli	r2,r2,16
   2b14c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   2b150:	00001506 	br	2b1a8 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   2b154:	e13ffd17 	ldw	r4,-12(fp)
   2b158:	e0bffe17 	ldw	r2,-8(fp)
   2b15c:	10c00d17 	ldw	r3,52(r2)
   2b160:	e0bffe17 	ldw	r2,-8(fp)
   2b164:	1885883a 	add	r2,r3,r2
   2b168:	10820e04 	addi	r2,r2,2104
   2b16c:	10800003 	ldbu	r2,0(r2)
   2b170:	10c03fcc 	andi	r3,r2,255
   2b174:	18c0201c 	xori	r3,r3,128
   2b178:	18ffe004 	addi	r3,r3,-128
   2b17c:	2005883a 	mov	r2,r4
   2b180:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2b184:	e0bffe17 	ldw	r2,-8(fp)
   2b188:	10800d17 	ldw	r2,52(r2)
   2b18c:	10800044 	addi	r2,r2,1
   2b190:	10c1ffcc 	andi	r3,r2,2047
   2b194:	e0bffe17 	ldw	r2,-8(fp)
   2b198:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   2b19c:	e0bff917 	ldw	r2,-28(fp)
   2b1a0:	10bfffc4 	addi	r2,r2,-1
   2b1a4:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   2b1a8:	e0bff917 	ldw	r2,-28(fp)
   2b1ac:	1005003a 	cmpeq	r2,r2,zero
   2b1b0:	1000051e 	bne	r2,zero,2b1c8 <altera_avalon_jtag_uart_irq+0x1c4>
   2b1b4:	e0bffe17 	ldw	r2,-8(fp)
   2b1b8:	10c00d17 	ldw	r3,52(r2)
   2b1bc:	e0bffe17 	ldw	r2,-8(fp)
   2b1c0:	10800c17 	ldw	r2,48(r2)
   2b1c4:	18bfe31e 	bne	r3,r2,2b154 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   2b1c8:	e0bff917 	ldw	r2,-28(fp)
   2b1cc:	1005003a 	cmpeq	r2,r2,zero
   2b1d0:	103f961e 	bne	r2,zero,2b02c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2b1d4:	e0bffe17 	ldw	r2,-8(fp)
   2b1d8:	10c00817 	ldw	r3,32(r2)
   2b1dc:	00bfff44 	movi	r2,-3
   2b1e0:	1886703a 	and	r3,r3,r2
   2b1e4:	e0bffe17 	ldw	r2,-8(fp)
   2b1e8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2b1ec:	e0bffe17 	ldw	r2,-8(fp)
   2b1f0:	10800017 	ldw	r2,0(r2)
   2b1f4:	11000104 	addi	r4,r2,4
   2b1f8:	e0bffe17 	ldw	r2,-8(fp)
   2b1fc:	10800817 	ldw	r2,32(r2)
   2b200:	1007883a 	mov	r3,r2
   2b204:	2005883a 	mov	r2,r4
   2b208:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2b20c:	e0bffd17 	ldw	r2,-12(fp)
   2b210:	10800104 	addi	r2,r2,4
   2b214:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   2b218:	003f8406 	br	2b02c <altera_avalon_jtag_uart_irq+0x28>
}
   2b21c:	e037883a 	mov	sp,fp
   2b220:	df000017 	ldw	fp,0(sp)
   2b224:	dec00104 	addi	sp,sp,4
   2b228:	f800283a 	ret

0002b22c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   2b22c:	defffc04 	addi	sp,sp,-16
   2b230:	df000315 	stw	fp,12(sp)
   2b234:	df000304 	addi	fp,sp,12
   2b238:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   2b23c:	e0bfff17 	ldw	r2,-4(fp)
   2b240:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   2b244:	e0bffe17 	ldw	r2,-8(fp)
   2b248:	10800017 	ldw	r2,0(r2)
   2b24c:	10800104 	addi	r2,r2,4
   2b250:	10800037 	ldwio	r2,0(r2)
   2b254:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   2b258:	e0bffd17 	ldw	r2,-12(fp)
   2b25c:	1081000c 	andi	r2,r2,1024
   2b260:	1005003a 	cmpeq	r2,r2,zero
   2b264:	10000c1e 	bne	r2,zero,2b298 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   2b268:	e0bffe17 	ldw	r2,-8(fp)
   2b26c:	10800017 	ldw	r2,0(r2)
   2b270:	11000104 	addi	r4,r2,4
   2b274:	e0bffe17 	ldw	r2,-8(fp)
   2b278:	10800817 	ldw	r2,32(r2)
   2b27c:	10810014 	ori	r2,r2,1024
   2b280:	1007883a 	mov	r3,r2
   2b284:	2005883a 	mov	r2,r4
   2b288:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   2b28c:	e0bffe17 	ldw	r2,-8(fp)
   2b290:	10000915 	stw	zero,36(r2)
   2b294:	00000a06 	br	2b2c0 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   2b298:	e0bffe17 	ldw	r2,-8(fp)
   2b29c:	10c00917 	ldw	r3,36(r2)
   2b2a0:	00a00034 	movhi	r2,32768
   2b2a4:	10bfff04 	addi	r2,r2,-4
   2b2a8:	10c00536 	bltu	r2,r3,2b2c0 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   2b2ac:	e0bffe17 	ldw	r2,-8(fp)
   2b2b0:	10800917 	ldw	r2,36(r2)
   2b2b4:	10c00044 	addi	r3,r2,1
   2b2b8:	e0bffe17 	ldw	r2,-8(fp)
   2b2bc:	10c00915 	stw	r3,36(r2)
   2b2c0:	008000f4 	movhi	r2,3
   2b2c4:	10812b04 	addi	r2,r2,1196
   2b2c8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   2b2cc:	e037883a 	mov	sp,fp
   2b2d0:	df000017 	ldw	fp,0(sp)
   2b2d4:	dec00104 	addi	sp,sp,4
   2b2d8:	f800283a 	ret

0002b2dc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   2b2dc:	defffc04 	addi	sp,sp,-16
   2b2e0:	df000315 	stw	fp,12(sp)
   2b2e4:	df000304 	addi	fp,sp,12
   2b2e8:	e13ffd15 	stw	r4,-12(fp)
   2b2ec:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2b2f0:	00000706 	br	2b310 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   2b2f4:	e0bffe17 	ldw	r2,-8(fp)
   2b2f8:	1090000c 	andi	r2,r2,16384
   2b2fc:	1005003a 	cmpeq	r2,r2,zero
   2b300:	1000031e 	bne	r2,zero,2b310 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   2b304:	00bffd44 	movi	r2,-11
   2b308:	e0bfff15 	stw	r2,-4(fp)
   2b30c:	00000b06 	br	2b33c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2b310:	e0bffd17 	ldw	r2,-12(fp)
   2b314:	10c00d17 	ldw	r3,52(r2)
   2b318:	e0bffd17 	ldw	r2,-12(fp)
   2b31c:	10800c17 	ldw	r2,48(r2)
   2b320:	18800526 	beq	r3,r2,2b338 <altera_avalon_jtag_uart_close+0x5c>
   2b324:	e0bffd17 	ldw	r2,-12(fp)
   2b328:	10c00917 	ldw	r3,36(r2)
   2b32c:	e0bffd17 	ldw	r2,-12(fp)
   2b330:	10800117 	ldw	r2,4(r2)
   2b334:	18bfef36 	bltu	r3,r2,2b2f4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2b338:	e03fff15 	stw	zero,-4(fp)
   2b33c:	e0bfff17 	ldw	r2,-4(fp)
}
   2b340:	e037883a 	mov	sp,fp
   2b344:	df000017 	ldw	fp,0(sp)
   2b348:	dec00104 	addi	sp,sp,4
   2b34c:	f800283a 	ret

0002b350 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   2b350:	defff804 	addi	sp,sp,-32
   2b354:	df000715 	stw	fp,28(sp)
   2b358:	df000704 	addi	fp,sp,28
   2b35c:	e13ffb15 	stw	r4,-20(fp)
   2b360:	e17ffc15 	stw	r5,-16(fp)
   2b364:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   2b368:	00bff9c4 	movi	r2,-25
   2b36c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   2b370:	e0bffc17 	ldw	r2,-16(fp)
   2b374:	e0bfff15 	stw	r2,-4(fp)
   2b378:	e0ffff17 	ldw	r3,-4(fp)
   2b37c:	189a8060 	cmpeqi	r2,r3,27137
   2b380:	1000041e 	bne	r2,zero,2b394 <altera_avalon_jtag_uart_ioctl+0x44>
   2b384:	e0ffff17 	ldw	r3,-4(fp)
   2b388:	189a80a0 	cmpeqi	r2,r3,27138
   2b38c:	10001b1e 	bne	r2,zero,2b3fc <altera_avalon_jtag_uart_ioctl+0xac>
   2b390:	00002706 	br	2b430 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   2b394:	e0bffb17 	ldw	r2,-20(fp)
   2b398:	10c00117 	ldw	r3,4(r2)
   2b39c:	00a00034 	movhi	r2,32768
   2b3a0:	10bfffc4 	addi	r2,r2,-1
   2b3a4:	18802226 	beq	r3,r2,2b430 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   2b3a8:	e0bffd17 	ldw	r2,-12(fp)
   2b3ac:	10800017 	ldw	r2,0(r2)
   2b3b0:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   2b3b4:	e0bff917 	ldw	r2,-28(fp)
   2b3b8:	10800090 	cmplti	r2,r2,2
   2b3bc:	1000071e 	bne	r2,zero,2b3dc <altera_avalon_jtag_uart_ioctl+0x8c>
   2b3c0:	e0fff917 	ldw	r3,-28(fp)
   2b3c4:	00a00034 	movhi	r2,32768
   2b3c8:	10bfffc4 	addi	r2,r2,-1
   2b3cc:	18800326 	beq	r3,r2,2b3dc <altera_avalon_jtag_uart_ioctl+0x8c>
   2b3d0:	e0bff917 	ldw	r2,-28(fp)
   2b3d4:	e0bffe15 	stw	r2,-8(fp)
   2b3d8:	00000306 	br	2b3e8 <altera_avalon_jtag_uart_ioctl+0x98>
   2b3dc:	00e00034 	movhi	r3,32768
   2b3e0:	18ffff84 	addi	r3,r3,-2
   2b3e4:	e0fffe15 	stw	r3,-8(fp)
   2b3e8:	e0bffb17 	ldw	r2,-20(fp)
   2b3ec:	e0fffe17 	ldw	r3,-8(fp)
   2b3f0:	10c00115 	stw	r3,4(r2)
      rc = 0;
   2b3f4:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   2b3f8:	00000d06 	br	2b430 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   2b3fc:	e0bffb17 	ldw	r2,-20(fp)
   2b400:	10c00117 	ldw	r3,4(r2)
   2b404:	00a00034 	movhi	r2,32768
   2b408:	10bfffc4 	addi	r2,r2,-1
   2b40c:	18800826 	beq	r3,r2,2b430 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   2b410:	e13ffd17 	ldw	r4,-12(fp)
   2b414:	e0bffb17 	ldw	r2,-20(fp)
   2b418:	10c00917 	ldw	r3,36(r2)
   2b41c:	e0bffb17 	ldw	r2,-20(fp)
   2b420:	10800117 	ldw	r2,4(r2)
   2b424:	1885803a 	cmpltu	r2,r3,r2
   2b428:	20800015 	stw	r2,0(r4)
      rc = 0;
   2b42c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   2b430:	e0bffa17 	ldw	r2,-24(fp)
}
   2b434:	e037883a 	mov	sp,fp
   2b438:	df000017 	ldw	fp,0(sp)
   2b43c:	dec00104 	addi	sp,sp,4
   2b440:	f800283a 	ret

0002b444 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   2b444:	defff204 	addi	sp,sp,-56
   2b448:	dfc00d15 	stw	ra,52(sp)
   2b44c:	df000c15 	stw	fp,48(sp)
   2b450:	df000c04 	addi	fp,sp,48
   2b454:	e13ffb15 	stw	r4,-20(fp)
   2b458:	e17ffc15 	stw	r5,-16(fp)
   2b45c:	e1bffd15 	stw	r6,-12(fp)
   2b460:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   2b464:	e0bffc17 	ldw	r2,-16(fp)
   2b468:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2b46c:	00004806 	br	2b590 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   2b470:	e0bffb17 	ldw	r2,-20(fp)
   2b474:	10800a17 	ldw	r2,40(r2)
   2b478:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   2b47c:	e0bffb17 	ldw	r2,-20(fp)
   2b480:	10800b17 	ldw	r2,44(r2)
   2b484:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   2b488:	e0fff717 	ldw	r3,-36(fp)
   2b48c:	e0bff617 	ldw	r2,-40(fp)
   2b490:	18800536 	bltu	r3,r2,2b4a8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   2b494:	e0bff717 	ldw	r2,-36(fp)
   2b498:	e0fff617 	ldw	r3,-40(fp)
   2b49c:	10c5c83a 	sub	r2,r2,r3
   2b4a0:	e0bff815 	stw	r2,-32(fp)
   2b4a4:	00000406 	br	2b4b8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   2b4a8:	00820004 	movi	r2,2048
   2b4ac:	e0fff617 	ldw	r3,-40(fp)
   2b4b0:	10c5c83a 	sub	r2,r2,r3
   2b4b4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   2b4b8:	e0bff817 	ldw	r2,-32(fp)
   2b4bc:	1005003a 	cmpeq	r2,r2,zero
   2b4c0:	10001f1e 	bne	r2,zero,2b540 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   2b4c4:	e0fffd17 	ldw	r3,-12(fp)
   2b4c8:	e0bff817 	ldw	r2,-32(fp)
   2b4cc:	1880022e 	bgeu	r3,r2,2b4d8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   2b4d0:	e0bffd17 	ldw	r2,-12(fp)
   2b4d4:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   2b4d8:	e0bffb17 	ldw	r2,-20(fp)
   2b4dc:	10c00e04 	addi	r3,r2,56
   2b4e0:	e0bff617 	ldw	r2,-40(fp)
   2b4e4:	1887883a 	add	r3,r3,r2
   2b4e8:	e0bffa17 	ldw	r2,-24(fp)
   2b4ec:	1009883a 	mov	r4,r2
   2b4f0:	180b883a 	mov	r5,r3
   2b4f4:	e1bff817 	ldw	r6,-32(fp)
   2b4f8:	0025a580 	call	25a58 <memcpy>
      ptr   += n;
   2b4fc:	e0fff817 	ldw	r3,-32(fp)
   2b500:	e0bffa17 	ldw	r2,-24(fp)
   2b504:	10c5883a 	add	r2,r2,r3
   2b508:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   2b50c:	e0fffd17 	ldw	r3,-12(fp)
   2b510:	e0bff817 	ldw	r2,-32(fp)
   2b514:	1885c83a 	sub	r2,r3,r2
   2b518:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2b51c:	e0fff617 	ldw	r3,-40(fp)
   2b520:	e0bff817 	ldw	r2,-32(fp)
   2b524:	1885883a 	add	r2,r3,r2
   2b528:	10c1ffcc 	andi	r3,r2,2047
   2b52c:	e0bffb17 	ldw	r2,-20(fp)
   2b530:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   2b534:	e0bffd17 	ldw	r2,-12(fp)
   2b538:	10800048 	cmpgei	r2,r2,1
   2b53c:	103fcc1e 	bne	r2,zero,2b470 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   2b540:	e0fffa17 	ldw	r3,-24(fp)
   2b544:	e0bffc17 	ldw	r2,-16(fp)
   2b548:	1880141e 	bne	r3,r2,2b59c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   2b54c:	e0bffe17 	ldw	r2,-8(fp)
   2b550:	1090000c 	andi	r2,r2,16384
   2b554:	1004c03a 	cmpne	r2,r2,zero
   2b558:	1000101e 	bne	r2,zero,2b59c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   2b55c:	e0bffb17 	ldw	r2,-20(fp)
   2b560:	10c00a17 	ldw	r3,40(r2)
   2b564:	e0bff717 	ldw	r2,-36(fp)
   2b568:	1880051e 	bne	r3,r2,2b580 <altera_avalon_jtag_uart_read+0x13c>
   2b56c:	e0bffb17 	ldw	r2,-20(fp)
   2b570:	10c00917 	ldw	r3,36(r2)
   2b574:	e0bffb17 	ldw	r2,-20(fp)
   2b578:	10800117 	ldw	r2,4(r2)
   2b57c:	18bff736 	bltu	r3,r2,2b55c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   2b580:	e0bffb17 	ldw	r2,-20(fp)
   2b584:	10c00a17 	ldw	r3,40(r2)
   2b588:	e0bff717 	ldw	r2,-36(fp)
   2b58c:	18800326 	beq	r3,r2,2b59c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2b590:	e0bffd17 	ldw	r2,-12(fp)
   2b594:	10800048 	cmpgei	r2,r2,1
   2b598:	103fb51e 	bne	r2,zero,2b470 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   2b59c:	e0fffa17 	ldw	r3,-24(fp)
   2b5a0:	e0bffc17 	ldw	r2,-16(fp)
   2b5a4:	18801926 	beq	r3,r2,2b60c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2b5a8:	0005303a 	rdctl	r2,status
   2b5ac:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2b5b0:	e0fff517 	ldw	r3,-44(fp)
   2b5b4:	00bfff84 	movi	r2,-2
   2b5b8:	1884703a 	and	r2,r3,r2
   2b5bc:	1001703a 	wrctl	status,r2
  
  return context;
   2b5c0:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   2b5c4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2b5c8:	e0bffb17 	ldw	r2,-20(fp)
   2b5cc:	10800817 	ldw	r2,32(r2)
   2b5d0:	10c00054 	ori	r3,r2,1
   2b5d4:	e0bffb17 	ldw	r2,-20(fp)
   2b5d8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2b5dc:	e0bffb17 	ldw	r2,-20(fp)
   2b5e0:	10800017 	ldw	r2,0(r2)
   2b5e4:	11000104 	addi	r4,r2,4
   2b5e8:	e0bffb17 	ldw	r2,-20(fp)
   2b5ec:	10800817 	ldw	r2,32(r2)
   2b5f0:	1007883a 	mov	r3,r2
   2b5f4:	2005883a 	mov	r2,r4
   2b5f8:	10c00035 	stwio	r3,0(r2)
   2b5fc:	e0bff917 	ldw	r2,-28(fp)
   2b600:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2b604:	e0bff417 	ldw	r2,-48(fp)
   2b608:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   2b60c:	e0fffa17 	ldw	r3,-24(fp)
   2b610:	e0bffc17 	ldw	r2,-16(fp)
   2b614:	18800526 	beq	r3,r2,2b62c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   2b618:	e0fffa17 	ldw	r3,-24(fp)
   2b61c:	e0bffc17 	ldw	r2,-16(fp)
   2b620:	1887c83a 	sub	r3,r3,r2
   2b624:	e0ffff15 	stw	r3,-4(fp)
   2b628:	00000906 	br	2b650 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   2b62c:	e0bffe17 	ldw	r2,-8(fp)
   2b630:	1090000c 	andi	r2,r2,16384
   2b634:	1005003a 	cmpeq	r2,r2,zero
   2b638:	1000031e 	bne	r2,zero,2b648 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   2b63c:	00bffd44 	movi	r2,-11
   2b640:	e0bfff15 	stw	r2,-4(fp)
   2b644:	00000206 	br	2b650 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   2b648:	00bffec4 	movi	r2,-5
   2b64c:	e0bfff15 	stw	r2,-4(fp)
   2b650:	e0bfff17 	ldw	r2,-4(fp)
}
   2b654:	e037883a 	mov	sp,fp
   2b658:	dfc00117 	ldw	ra,4(sp)
   2b65c:	df000017 	ldw	fp,0(sp)
   2b660:	dec00204 	addi	sp,sp,8
   2b664:	f800283a 	ret

0002b668 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2b668:	defff204 	addi	sp,sp,-56
   2b66c:	dfc00d15 	stw	ra,52(sp)
   2b670:	df000c15 	stw	fp,48(sp)
   2b674:	df000c04 	addi	fp,sp,48
   2b678:	e13ffb15 	stw	r4,-20(fp)
   2b67c:	e17ffc15 	stw	r5,-16(fp)
   2b680:	e1bffd15 	stw	r6,-12(fp)
   2b684:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   2b688:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   2b68c:	e0bffc17 	ldw	r2,-16(fp)
   2b690:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2b694:	00003a06 	br	2b780 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   2b698:	e0bffb17 	ldw	r2,-20(fp)
   2b69c:	10800c17 	ldw	r2,48(r2)
   2b6a0:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   2b6a4:	e0bffb17 	ldw	r2,-20(fp)
   2b6a8:	10800d17 	ldw	r2,52(r2)
   2b6ac:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   2b6b0:	e0fffa17 	ldw	r3,-24(fp)
   2b6b4:	e0bff917 	ldw	r2,-28(fp)
   2b6b8:	1880062e 	bgeu	r3,r2,2b6d4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   2b6bc:	e0fff917 	ldw	r3,-28(fp)
   2b6c0:	e0bffa17 	ldw	r2,-24(fp)
   2b6c4:	1885c83a 	sub	r2,r3,r2
   2b6c8:	10bfffc4 	addi	r2,r2,-1
   2b6cc:	e0bff815 	stw	r2,-32(fp)
   2b6d0:	00000c06 	br	2b704 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   2b6d4:	e0bff917 	ldw	r2,-28(fp)
   2b6d8:	1005003a 	cmpeq	r2,r2,zero
   2b6dc:	1000051e 	bne	r2,zero,2b6f4 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   2b6e0:	00820004 	movi	r2,2048
   2b6e4:	e0fffa17 	ldw	r3,-24(fp)
   2b6e8:	10c5c83a 	sub	r2,r2,r3
   2b6ec:	e0bff815 	stw	r2,-32(fp)
   2b6f0:	00000406 	br	2b704 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   2b6f4:	0081ffc4 	movi	r2,2047
   2b6f8:	e0fffa17 	ldw	r3,-24(fp)
   2b6fc:	10c5c83a 	sub	r2,r2,r3
   2b700:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   2b704:	e0bff817 	ldw	r2,-32(fp)
   2b708:	1005003a 	cmpeq	r2,r2,zero
   2b70c:	10001f1e 	bne	r2,zero,2b78c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   2b710:	e0fffd17 	ldw	r3,-12(fp)
   2b714:	e0bff817 	ldw	r2,-32(fp)
   2b718:	1880022e 	bgeu	r3,r2,2b724 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   2b71c:	e0bffd17 	ldw	r2,-12(fp)
   2b720:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   2b724:	e0bffb17 	ldw	r2,-20(fp)
   2b728:	10c20e04 	addi	r3,r2,2104
   2b72c:	e0bffa17 	ldw	r2,-24(fp)
   2b730:	1885883a 	add	r2,r3,r2
   2b734:	e0fffc17 	ldw	r3,-16(fp)
   2b738:	1009883a 	mov	r4,r2
   2b73c:	180b883a 	mov	r5,r3
   2b740:	e1bff817 	ldw	r6,-32(fp)
   2b744:	0025a580 	call	25a58 <memcpy>
      ptr   += n;
   2b748:	e0fff817 	ldw	r3,-32(fp)
   2b74c:	e0bffc17 	ldw	r2,-16(fp)
   2b750:	10c5883a 	add	r2,r2,r3
   2b754:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   2b758:	e0fffd17 	ldw	r3,-12(fp)
   2b75c:	e0bff817 	ldw	r2,-32(fp)
   2b760:	1885c83a 	sub	r2,r3,r2
   2b764:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2b768:	e0fffa17 	ldw	r3,-24(fp)
   2b76c:	e0bff817 	ldw	r2,-32(fp)
   2b770:	1885883a 	add	r2,r3,r2
   2b774:	10c1ffcc 	andi	r3,r2,2047
   2b778:	e0bffb17 	ldw	r2,-20(fp)
   2b77c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2b780:	e0bffd17 	ldw	r2,-12(fp)
   2b784:	10800048 	cmpgei	r2,r2,1
   2b788:	103fc31e 	bne	r2,zero,2b698 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2b78c:	0005303a 	rdctl	r2,status
   2b790:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2b794:	e0fff517 	ldw	r3,-44(fp)
   2b798:	00bfff84 	movi	r2,-2
   2b79c:	1884703a 	and	r2,r3,r2
   2b7a0:	1001703a 	wrctl	status,r2
  
  return context;
   2b7a4:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   2b7a8:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2b7ac:	e0bffb17 	ldw	r2,-20(fp)
   2b7b0:	10800817 	ldw	r2,32(r2)
   2b7b4:	10c00094 	ori	r3,r2,2
   2b7b8:	e0bffb17 	ldw	r2,-20(fp)
   2b7bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2b7c0:	e0bffb17 	ldw	r2,-20(fp)
   2b7c4:	10800017 	ldw	r2,0(r2)
   2b7c8:	11000104 	addi	r4,r2,4
   2b7cc:	e0bffb17 	ldw	r2,-20(fp)
   2b7d0:	10800817 	ldw	r2,32(r2)
   2b7d4:	1007883a 	mov	r3,r2
   2b7d8:	2005883a 	mov	r2,r4
   2b7dc:	10c00035 	stwio	r3,0(r2)
   2b7e0:	e0bff717 	ldw	r2,-36(fp)
   2b7e4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2b7e8:	e0bff417 	ldw	r2,-48(fp)
   2b7ec:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   2b7f0:	e0bffd17 	ldw	r2,-12(fp)
   2b7f4:	10800050 	cmplti	r2,r2,1
   2b7f8:	1000111e 	bne	r2,zero,2b840 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   2b7fc:	e0bffe17 	ldw	r2,-8(fp)
   2b800:	1090000c 	andi	r2,r2,16384
   2b804:	1004c03a 	cmpne	r2,r2,zero
   2b808:	1000101e 	bne	r2,zero,2b84c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   2b80c:	e0bffb17 	ldw	r2,-20(fp)
   2b810:	10c00d17 	ldw	r3,52(r2)
   2b814:	e0bff917 	ldw	r2,-28(fp)
   2b818:	1880051e 	bne	r3,r2,2b830 <altera_avalon_jtag_uart_write+0x1c8>
   2b81c:	e0bffb17 	ldw	r2,-20(fp)
   2b820:	10c00917 	ldw	r3,36(r2)
   2b824:	e0bffb17 	ldw	r2,-20(fp)
   2b828:	10800117 	ldw	r2,4(r2)
   2b82c:	18bff736 	bltu	r3,r2,2b80c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   2b830:	e0bffb17 	ldw	r2,-20(fp)
   2b834:	10c00d17 	ldw	r3,52(r2)
   2b838:	e0bff917 	ldw	r2,-28(fp)
   2b83c:	18800326 	beq	r3,r2,2b84c <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   2b840:	e0bffd17 	ldw	r2,-12(fp)
   2b844:	10800048 	cmpgei	r2,r2,1
   2b848:	103fcd1e 	bne	r2,zero,2b780 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   2b84c:	e0fffc17 	ldw	r3,-16(fp)
   2b850:	e0bff617 	ldw	r2,-40(fp)
   2b854:	18800526 	beq	r3,r2,2b86c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   2b858:	e0fffc17 	ldw	r3,-16(fp)
   2b85c:	e0bff617 	ldw	r2,-40(fp)
   2b860:	1887c83a 	sub	r3,r3,r2
   2b864:	e0ffff15 	stw	r3,-4(fp)
   2b868:	00000906 	br	2b890 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   2b86c:	e0bffe17 	ldw	r2,-8(fp)
   2b870:	1090000c 	andi	r2,r2,16384
   2b874:	1005003a 	cmpeq	r2,r2,zero
   2b878:	1000031e 	bne	r2,zero,2b888 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   2b87c:	00bffd44 	movi	r2,-11
   2b880:	e0bfff15 	stw	r2,-4(fp)
   2b884:	00000206 	br	2b890 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   2b888:	00bffec4 	movi	r2,-5
   2b88c:	e0bfff15 	stw	r2,-4(fp)
   2b890:	e0bfff17 	ldw	r2,-4(fp)
}
   2b894:	e037883a 	mov	sp,fp
   2b898:	dfc00117 	ldw	ra,4(sp)
   2b89c:	df000017 	ldw	fp,0(sp)
   2b8a0:	dec00204 	addi	sp,sp,8
   2b8a4:	f800283a 	ret

0002b8a8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   2b8a8:	defff404 	addi	sp,sp,-48
   2b8ac:	df000b15 	stw	fp,44(sp)
   2b8b0:	df000b04 	addi	fp,sp,44
   2b8b4:	e13ffb15 	stw	r4,-20(fp)
   2b8b8:	e17ffc15 	stw	r5,-16(fp)
   2b8bc:	e1bffd15 	stw	r6,-12(fp)
   2b8c0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   2b8c4:	e03ff915 	stw	zero,-28(fp)
   2b8c8:	008000f4 	movhi	r2,3
   2b8cc:	10812b04 	addi	r2,r2,1196
   2b8d0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   2b8d4:	1005003a 	cmpeq	r2,r2,zero
   2b8d8:	1000411e 	bne	r2,zero,2b9e0 <alt_alarm_start+0x138>
  {
    if (alarm)
   2b8dc:	e0bffb17 	ldw	r2,-20(fp)
   2b8e0:	1005003a 	cmpeq	r2,r2,zero
   2b8e4:	10003b1e 	bne	r2,zero,2b9d4 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   2b8e8:	e0fffb17 	ldw	r3,-20(fp)
   2b8ec:	e0bffd17 	ldw	r2,-12(fp)
   2b8f0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   2b8f4:	e0fffb17 	ldw	r3,-20(fp)
   2b8f8:	e0bffe17 	ldw	r2,-8(fp)
   2b8fc:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2b900:	0005303a 	rdctl	r2,status
   2b904:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2b908:	e0fff817 	ldw	r3,-32(fp)
   2b90c:	00bfff84 	movi	r2,-2
   2b910:	1884703a 	and	r2,r3,r2
   2b914:	1001703a 	wrctl	status,r2
  
  return context;
   2b918:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   2b91c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   2b920:	008000f4 	movhi	r2,3
   2b924:	10812c04 	addi	r2,r2,1200
   2b928:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   2b92c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   2b930:	e0fffc17 	ldw	r3,-16(fp)
   2b934:	e0bff917 	ldw	r2,-28(fp)
   2b938:	1885883a 	add	r2,r3,r2
   2b93c:	10c00044 	addi	r3,r2,1
   2b940:	e0bffb17 	ldw	r2,-20(fp)
   2b944:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   2b948:	e0bffb17 	ldw	r2,-20(fp)
   2b94c:	10c00217 	ldw	r3,8(r2)
   2b950:	e0bff917 	ldw	r2,-28(fp)
   2b954:	1880042e 	bgeu	r3,r2,2b968 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   2b958:	e0fffb17 	ldw	r3,-20(fp)
   2b95c:	00800044 	movi	r2,1
   2b960:	18800405 	stb	r2,16(r3)
   2b964:	00000206 	br	2b970 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   2b968:	e0bffb17 	ldw	r2,-20(fp)
   2b96c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   2b970:	e0fffb17 	ldw	r3,-20(fp)
   2b974:	008000f4 	movhi	r2,3
   2b978:	10ba8704 	addi	r2,r2,-5604
   2b97c:	e0bff615 	stw	r2,-40(fp)
   2b980:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2b984:	e0fff717 	ldw	r3,-36(fp)
   2b988:	e0bff617 	ldw	r2,-40(fp)
   2b98c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   2b990:	e0bff617 	ldw	r2,-40(fp)
   2b994:	10c00017 	ldw	r3,0(r2)
   2b998:	e0bff717 	ldw	r2,-36(fp)
   2b99c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2b9a0:	e0bff617 	ldw	r2,-40(fp)
   2b9a4:	10c00017 	ldw	r3,0(r2)
   2b9a8:	e0bff717 	ldw	r2,-36(fp)
   2b9ac:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   2b9b0:	e0fff617 	ldw	r3,-40(fp)
   2b9b4:	e0bff717 	ldw	r2,-36(fp)
   2b9b8:	18800015 	stw	r2,0(r3)
   2b9bc:	e0bffa17 	ldw	r2,-24(fp)
   2b9c0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2b9c4:	e0bff517 	ldw	r2,-44(fp)
   2b9c8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   2b9cc:	e03fff15 	stw	zero,-4(fp)
   2b9d0:	00000506 	br	2b9e8 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   2b9d4:	00bffa84 	movi	r2,-22
   2b9d8:	e0bfff15 	stw	r2,-4(fp)
   2b9dc:	00000206 	br	2b9e8 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   2b9e0:	00bfde84 	movi	r2,-134
   2b9e4:	e0bfff15 	stw	r2,-4(fp)
   2b9e8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   2b9ec:	e037883a 	mov	sp,fp
   2b9f0:	df000017 	ldw	fp,0(sp)
   2b9f4:	dec00104 	addi	sp,sp,4
   2b9f8:	f800283a 	ret

0002b9fc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2b9fc:	deffff04 	addi	sp,sp,-4
   2ba00:	df000015 	stw	fp,0(sp)
   2ba04:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2ba08:	e037883a 	mov	sp,fp
   2ba0c:	df000017 	ldw	fp,0(sp)
   2ba10:	dec00104 	addi	sp,sp,4
   2ba14:	f800283a 	ret

0002ba18 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2ba18:	defff904 	addi	sp,sp,-28
   2ba1c:	dfc00615 	stw	ra,24(sp)
   2ba20:	df000515 	stw	fp,20(sp)
   2ba24:	df000504 	addi	fp,sp,20
   2ba28:	e13ffd15 	stw	r4,-12(fp)
   2ba2c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   2ba30:	e0bffd17 	ldw	r2,-12(fp)
   2ba34:	1005003a 	cmpeq	r2,r2,zero
   2ba38:	1000041e 	bne	r2,zero,2ba4c <alt_dev_llist_insert+0x34>
   2ba3c:	e0bffd17 	ldw	r2,-12(fp)
   2ba40:	10800217 	ldw	r2,8(r2)
   2ba44:	1004c03a 	cmpne	r2,r2,zero
   2ba48:	1000071e 	bne	r2,zero,2ba68 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   2ba4c:	002bacc0 	call	2bacc <alt_get_errno>
   2ba50:	1007883a 	mov	r3,r2
   2ba54:	00800584 	movi	r2,22
   2ba58:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   2ba5c:	00bffa84 	movi	r2,-22
   2ba60:	e0bfff15 	stw	r2,-4(fp)
   2ba64:	00001306 	br	2bab4 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   2ba68:	e0fffd17 	ldw	r3,-12(fp)
   2ba6c:	e0bffe17 	ldw	r2,-8(fp)
   2ba70:	e0bffb15 	stw	r2,-20(fp)
   2ba74:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2ba78:	e0fffc17 	ldw	r3,-16(fp)
   2ba7c:	e0bffb17 	ldw	r2,-20(fp)
   2ba80:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   2ba84:	e0bffb17 	ldw	r2,-20(fp)
   2ba88:	10c00017 	ldw	r3,0(r2)
   2ba8c:	e0bffc17 	ldw	r2,-16(fp)
   2ba90:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2ba94:	e0bffb17 	ldw	r2,-20(fp)
   2ba98:	10c00017 	ldw	r3,0(r2)
   2ba9c:	e0bffc17 	ldw	r2,-16(fp)
   2baa0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   2baa4:	e0fffb17 	ldw	r3,-20(fp)
   2baa8:	e0bffc17 	ldw	r2,-16(fp)
   2baac:	18800015 	stw	r2,0(r3)

  return 0;  
   2bab0:	e03fff15 	stw	zero,-4(fp)
   2bab4:	e0bfff17 	ldw	r2,-4(fp)
}
   2bab8:	e037883a 	mov	sp,fp
   2babc:	dfc00117 	ldw	ra,4(sp)
   2bac0:	df000017 	ldw	fp,0(sp)
   2bac4:	dec00204 	addi	sp,sp,8
   2bac8:	f800283a 	ret

0002bacc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2bacc:	defffd04 	addi	sp,sp,-12
   2bad0:	dfc00215 	stw	ra,8(sp)
   2bad4:	df000115 	stw	fp,4(sp)
   2bad8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2badc:	008000f4 	movhi	r2,3
   2bae0:	10ba8404 	addi	r2,r2,-5616
   2bae4:	10800017 	ldw	r2,0(r2)
   2bae8:	1005003a 	cmpeq	r2,r2,zero
   2baec:	1000061e 	bne	r2,zero,2bb08 <alt_get_errno+0x3c>
   2baf0:	008000f4 	movhi	r2,3
   2baf4:	10ba8404 	addi	r2,r2,-5616
   2baf8:	10800017 	ldw	r2,0(r2)
   2bafc:	103ee83a 	callr	r2
   2bb00:	e0bfff15 	stw	r2,-4(fp)
   2bb04:	00000306 	br	2bb14 <alt_get_errno+0x48>
   2bb08:	008000f4 	movhi	r2,3
   2bb0c:	10812604 	addi	r2,r2,1176
   2bb10:	e0bfff15 	stw	r2,-4(fp)
   2bb14:	e0bfff17 	ldw	r2,-4(fp)
}
   2bb18:	e037883a 	mov	sp,fp
   2bb1c:	dfc00117 	ldw	ra,4(sp)
   2bb20:	df000017 	ldw	fp,0(sp)
   2bb24:	dec00204 	addi	sp,sp,8
   2bb28:	f800283a 	ret

0002bb2c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   2bb2c:	defffd04 	addi	sp,sp,-12
   2bb30:	dfc00215 	stw	ra,8(sp)
   2bb34:	df000115 	stw	fp,4(sp)
   2bb38:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2bb3c:	00bfff04 	movi	r2,-4
   2bb40:	00c000f4 	movhi	r3,3
   2bb44:	18f2f404 	addi	r3,r3,-13360
   2bb48:	1885883a 	add	r2,r3,r2
   2bb4c:	e0bfff15 	stw	r2,-4(fp)
   2bb50:	00000606 	br	2bb6c <_do_ctors+0x40>
        (*ctor) (); 
   2bb54:	e0bfff17 	ldw	r2,-4(fp)
   2bb58:	10800017 	ldw	r2,0(r2)
   2bb5c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2bb60:	e0bfff17 	ldw	r2,-4(fp)
   2bb64:	10bfff04 	addi	r2,r2,-4
   2bb68:	e0bfff15 	stw	r2,-4(fp)
   2bb6c:	e0ffff17 	ldw	r3,-4(fp)
   2bb70:	008000f4 	movhi	r2,3
   2bb74:	10b2f304 	addi	r2,r2,-13364
   2bb78:	18bff62e 	bgeu	r3,r2,2bb54 <_do_ctors+0x28>
        (*ctor) (); 
}
   2bb7c:	e037883a 	mov	sp,fp
   2bb80:	dfc00117 	ldw	ra,4(sp)
   2bb84:	df000017 	ldw	fp,0(sp)
   2bb88:	dec00204 	addi	sp,sp,8
   2bb8c:	f800283a 	ret

0002bb90 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   2bb90:	defffd04 	addi	sp,sp,-12
   2bb94:	dfc00215 	stw	ra,8(sp)
   2bb98:	df000115 	stw	fp,4(sp)
   2bb9c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2bba0:	00bfff04 	movi	r2,-4
   2bba4:	00c000f4 	movhi	r3,3
   2bba8:	18f2f404 	addi	r3,r3,-13360
   2bbac:	1885883a 	add	r2,r3,r2
   2bbb0:	e0bfff15 	stw	r2,-4(fp)
   2bbb4:	00000606 	br	2bbd0 <_do_dtors+0x40>
        (*dtor) (); 
   2bbb8:	e0bfff17 	ldw	r2,-4(fp)
   2bbbc:	10800017 	ldw	r2,0(r2)
   2bbc0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2bbc4:	e0bfff17 	ldw	r2,-4(fp)
   2bbc8:	10bfff04 	addi	r2,r2,-4
   2bbcc:	e0bfff15 	stw	r2,-4(fp)
   2bbd0:	e0ffff17 	ldw	r3,-4(fp)
   2bbd4:	008000f4 	movhi	r2,3
   2bbd8:	10b2f404 	addi	r2,r2,-13360
   2bbdc:	18bff62e 	bgeu	r3,r2,2bbb8 <_do_dtors+0x28>
        (*dtor) (); 
}
   2bbe0:	e037883a 	mov	sp,fp
   2bbe4:	dfc00117 	ldw	ra,4(sp)
   2bbe8:	df000017 	ldw	fp,0(sp)
   2bbec:	dec00204 	addi	sp,sp,8
   2bbf0:	f800283a 	ret

0002bbf4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2bbf4:	deffff04 	addi	sp,sp,-4
   2bbf8:	df000015 	stw	fp,0(sp)
   2bbfc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   2bc00:	e037883a 	mov	sp,fp
   2bc04:	df000017 	ldw	fp,0(sp)
   2bc08:	dec00104 	addi	sp,sp,4
   2bc0c:	f800283a 	ret

0002bc10 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2bc10:	defff904 	addi	sp,sp,-28
   2bc14:	dfc00615 	stw	ra,24(sp)
   2bc18:	df000515 	stw	fp,20(sp)
   2bc1c:	df000504 	addi	fp,sp,20
   2bc20:	e13ffc15 	stw	r4,-16(fp)
   2bc24:	e17ffd15 	stw	r5,-12(fp)
   2bc28:	e1bffe15 	stw	r6,-8(fp)
   2bc2c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   2bc30:	e0800217 	ldw	r2,8(fp)
   2bc34:	d8800015 	stw	r2,0(sp)
   2bc38:	e13ffc17 	ldw	r4,-16(fp)
   2bc3c:	e17ffd17 	ldw	r5,-12(fp)
   2bc40:	e1bffe17 	ldw	r6,-8(fp)
   2bc44:	e1ffff17 	ldw	r7,-4(fp)
   2bc48:	002bde40 	call	2bde4 <alt_iic_isr_register>
}  
   2bc4c:	e037883a 	mov	sp,fp
   2bc50:	dfc00117 	ldw	ra,4(sp)
   2bc54:	df000017 	ldw	fp,0(sp)
   2bc58:	dec00204 	addi	sp,sp,8
   2bc5c:	f800283a 	ret

0002bc60 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   2bc60:	defff904 	addi	sp,sp,-28
   2bc64:	df000615 	stw	fp,24(sp)
   2bc68:	df000604 	addi	fp,sp,24
   2bc6c:	e13ffe15 	stw	r4,-8(fp)
   2bc70:	e17fff15 	stw	r5,-4(fp)
   2bc74:	e0bfff17 	ldw	r2,-4(fp)
   2bc78:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2bc7c:	0005303a 	rdctl	r2,status
   2bc80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2bc84:	e0fffb17 	ldw	r3,-20(fp)
   2bc88:	00bfff84 	movi	r2,-2
   2bc8c:	1884703a 	and	r2,r3,r2
   2bc90:	1001703a 	wrctl	status,r2
  
  return context;
   2bc94:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2bc98:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   2bc9c:	e0fffc17 	ldw	r3,-16(fp)
   2bca0:	00800044 	movi	r2,1
   2bca4:	10c4983a 	sll	r2,r2,r3
   2bca8:	1007883a 	mov	r3,r2
   2bcac:	008000f4 	movhi	r2,3
   2bcb0:	10812704 	addi	r2,r2,1180
   2bcb4:	10800017 	ldw	r2,0(r2)
   2bcb8:	1886b03a 	or	r3,r3,r2
   2bcbc:	008000f4 	movhi	r2,3
   2bcc0:	10812704 	addi	r2,r2,1180
   2bcc4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2bcc8:	008000f4 	movhi	r2,3
   2bccc:	10812704 	addi	r2,r2,1180
   2bcd0:	10800017 	ldw	r2,0(r2)
   2bcd4:	100170fa 	wrctl	ienable,r2
   2bcd8:	e0bffd17 	ldw	r2,-12(fp)
   2bcdc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2bce0:	e0bffa17 	ldw	r2,-24(fp)
   2bce4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2bce8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   2bcec:	e037883a 	mov	sp,fp
   2bcf0:	df000017 	ldw	fp,0(sp)
   2bcf4:	dec00104 	addi	sp,sp,4
   2bcf8:	f800283a 	ret

0002bcfc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   2bcfc:	defff904 	addi	sp,sp,-28
   2bd00:	df000615 	stw	fp,24(sp)
   2bd04:	df000604 	addi	fp,sp,24
   2bd08:	e13ffe15 	stw	r4,-8(fp)
   2bd0c:	e17fff15 	stw	r5,-4(fp)
   2bd10:	e0bfff17 	ldw	r2,-4(fp)
   2bd14:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2bd18:	0005303a 	rdctl	r2,status
   2bd1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2bd20:	e0fffb17 	ldw	r3,-20(fp)
   2bd24:	00bfff84 	movi	r2,-2
   2bd28:	1884703a 	and	r2,r3,r2
   2bd2c:	1001703a 	wrctl	status,r2
  
  return context;
   2bd30:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2bd34:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   2bd38:	e0fffc17 	ldw	r3,-16(fp)
   2bd3c:	00800044 	movi	r2,1
   2bd40:	10c4983a 	sll	r2,r2,r3
   2bd44:	0084303a 	nor	r2,zero,r2
   2bd48:	1007883a 	mov	r3,r2
   2bd4c:	008000f4 	movhi	r2,3
   2bd50:	10812704 	addi	r2,r2,1180
   2bd54:	10800017 	ldw	r2,0(r2)
   2bd58:	1886703a 	and	r3,r3,r2
   2bd5c:	008000f4 	movhi	r2,3
   2bd60:	10812704 	addi	r2,r2,1180
   2bd64:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2bd68:	008000f4 	movhi	r2,3
   2bd6c:	10812704 	addi	r2,r2,1180
   2bd70:	10800017 	ldw	r2,0(r2)
   2bd74:	100170fa 	wrctl	ienable,r2
   2bd78:	e0bffd17 	ldw	r2,-12(fp)
   2bd7c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2bd80:	e0bffa17 	ldw	r2,-24(fp)
   2bd84:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2bd88:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   2bd8c:	e037883a 	mov	sp,fp
   2bd90:	df000017 	ldw	fp,0(sp)
   2bd94:	dec00104 	addi	sp,sp,4
   2bd98:	f800283a 	ret

0002bd9c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   2bd9c:	defffc04 	addi	sp,sp,-16
   2bda0:	df000315 	stw	fp,12(sp)
   2bda4:	df000304 	addi	fp,sp,12
   2bda8:	e13ffe15 	stw	r4,-8(fp)
   2bdac:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   2bdb0:	000530fa 	rdctl	r2,ienable
   2bdb4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   2bdb8:	e0ffff17 	ldw	r3,-4(fp)
   2bdbc:	00800044 	movi	r2,1
   2bdc0:	10c4983a 	sll	r2,r2,r3
   2bdc4:	1007883a 	mov	r3,r2
   2bdc8:	e0bffd17 	ldw	r2,-12(fp)
   2bdcc:	1884703a 	and	r2,r3,r2
   2bdd0:	1004c03a 	cmpne	r2,r2,zero
}
   2bdd4:	e037883a 	mov	sp,fp
   2bdd8:	df000017 	ldw	fp,0(sp)
   2bddc:	dec00104 	addi	sp,sp,4
   2bde0:	f800283a 	ret

0002bde4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2bde4:	defff404 	addi	sp,sp,-48
   2bde8:	dfc00b15 	stw	ra,44(sp)
   2bdec:	df000a15 	stw	fp,40(sp)
   2bdf0:	df000a04 	addi	fp,sp,40
   2bdf4:	e13ffb15 	stw	r4,-20(fp)
   2bdf8:	e17ffc15 	stw	r5,-16(fp)
   2bdfc:	e1bffd15 	stw	r6,-12(fp)
   2be00:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   2be04:	00bffa84 	movi	r2,-22
   2be08:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   2be0c:	e0bffc17 	ldw	r2,-16(fp)
   2be10:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   2be14:	e0bff917 	ldw	r2,-28(fp)
   2be18:	10800808 	cmpgei	r2,r2,32
   2be1c:	1000291e 	bne	r2,zero,2bec4 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2be20:	0005303a 	rdctl	r2,status
   2be24:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2be28:	e0fff717 	ldw	r3,-36(fp)
   2be2c:	00bfff84 	movi	r2,-2
   2be30:	1884703a 	and	r2,r3,r2
   2be34:	1001703a 	wrctl	status,r2
  
  return context;
   2be38:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   2be3c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   2be40:	e0bff917 	ldw	r2,-28(fp)
   2be44:	00c000f4 	movhi	r3,3
   2be48:	18c13704 	addi	r3,r3,1244
   2be4c:	100490fa 	slli	r2,r2,3
   2be50:	10c7883a 	add	r3,r2,r3
   2be54:	e0bffd17 	ldw	r2,-12(fp)
   2be58:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   2be5c:	e0bff917 	ldw	r2,-28(fp)
   2be60:	00c000f4 	movhi	r3,3
   2be64:	18c13704 	addi	r3,r3,1244
   2be68:	100490fa 	slli	r2,r2,3
   2be6c:	10c5883a 	add	r2,r2,r3
   2be70:	10c00104 	addi	r3,r2,4
   2be74:	e0bffe17 	ldw	r2,-8(fp)
   2be78:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   2be7c:	e0bffd17 	ldw	r2,-12(fp)
   2be80:	1005003a 	cmpeq	r2,r2,zero
   2be84:	1000051e 	bne	r2,zero,2be9c <alt_iic_isr_register+0xb8>
   2be88:	e17ff917 	ldw	r5,-28(fp)
   2be8c:	e13ffb17 	ldw	r4,-20(fp)
   2be90:	002bc600 	call	2bc60 <alt_ic_irq_enable>
   2be94:	e0bfff15 	stw	r2,-4(fp)
   2be98:	00000406 	br	2beac <alt_iic_isr_register+0xc8>
   2be9c:	e17ff917 	ldw	r5,-28(fp)
   2bea0:	e13ffb17 	ldw	r4,-20(fp)
   2bea4:	002bcfc0 	call	2bcfc <alt_ic_irq_disable>
   2bea8:	e0bfff15 	stw	r2,-4(fp)
   2beac:	e0bfff17 	ldw	r2,-4(fp)
   2beb0:	e0bffa15 	stw	r2,-24(fp)
   2beb4:	e0bff817 	ldw	r2,-32(fp)
   2beb8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2bebc:	e0bff617 	ldw	r2,-40(fp)
   2bec0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   2bec4:	e0bffa17 	ldw	r2,-24(fp)
}
   2bec8:	e037883a 	mov	sp,fp
   2becc:	dfc00117 	ldw	ra,4(sp)
   2bed0:	df000017 	ldw	fp,0(sp)
   2bed4:	dec00204 	addi	sp,sp,8
   2bed8:	f800283a 	ret

0002bedc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   2bedc:	defff804 	addi	sp,sp,-32
   2bee0:	dfc00715 	stw	ra,28(sp)
   2bee4:	df000615 	stw	fp,24(sp)
   2bee8:	dc000515 	stw	r16,20(sp)
   2beec:	df000504 	addi	fp,sp,20
   2bef0:	e13ffc15 	stw	r4,-16(fp)
   2bef4:	e17ffd15 	stw	r5,-12(fp)
   2bef8:	e1bffe15 	stw	r6,-8(fp)
   2befc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   2bf00:	e13ffd17 	ldw	r4,-12(fp)
   2bf04:	e17ffe17 	ldw	r5,-8(fp)
   2bf08:	e1bfff17 	ldw	r6,-4(fp)
   2bf0c:	002c1240 	call	2c124 <open>
   2bf10:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   2bf14:	e0bffb17 	ldw	r2,-20(fp)
   2bf18:	1004803a 	cmplt	r2,r2,zero
   2bf1c:	10001f1e 	bne	r2,zero,2bf9c <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   2bf20:	e13ffb17 	ldw	r4,-20(fp)
   2bf24:	040000f4 	movhi	r16,3
   2bf28:	84360104 	addi	r16,r16,-10236
   2bf2c:	01400304 	movi	r5,12
   2bf30:	00206100 	call	20610 <__mulsi3>
   2bf34:	1405883a 	add	r2,r2,r16
   2bf38:	10c00017 	ldw	r3,0(r2)
   2bf3c:	e0bffc17 	ldw	r2,-16(fp)
   2bf40:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   2bf44:	e13ffb17 	ldw	r4,-20(fp)
   2bf48:	040000f4 	movhi	r16,3
   2bf4c:	84360104 	addi	r16,r16,-10236
   2bf50:	01400304 	movi	r5,12
   2bf54:	00206100 	call	20610 <__mulsi3>
   2bf58:	1405883a 	add	r2,r2,r16
   2bf5c:	10800104 	addi	r2,r2,4
   2bf60:	10c00017 	ldw	r3,0(r2)
   2bf64:	e0bffc17 	ldw	r2,-16(fp)
   2bf68:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   2bf6c:	e13ffb17 	ldw	r4,-20(fp)
   2bf70:	040000f4 	movhi	r16,3
   2bf74:	84360104 	addi	r16,r16,-10236
   2bf78:	01400304 	movi	r5,12
   2bf7c:	00206100 	call	20610 <__mulsi3>
   2bf80:	1405883a 	add	r2,r2,r16
   2bf84:	10800204 	addi	r2,r2,8
   2bf88:	10c00017 	ldw	r3,0(r2)
   2bf8c:	e0bffc17 	ldw	r2,-16(fp)
   2bf90:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   2bf94:	e13ffb17 	ldw	r4,-20(fp)
   2bf98:	002aa940 	call	2aa94 <alt_release_fd>
  }
} 
   2bf9c:	e037883a 	mov	sp,fp
   2bfa0:	dfc00217 	ldw	ra,8(sp)
   2bfa4:	df000117 	ldw	fp,4(sp)
   2bfa8:	dc000017 	ldw	r16,0(sp)
   2bfac:	dec00304 	addi	sp,sp,12
   2bfb0:	f800283a 	ret

0002bfb4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   2bfb4:	defffb04 	addi	sp,sp,-20
   2bfb8:	dfc00415 	stw	ra,16(sp)
   2bfbc:	df000315 	stw	fp,12(sp)
   2bfc0:	df000304 	addi	fp,sp,12
   2bfc4:	e13ffd15 	stw	r4,-12(fp)
   2bfc8:	e17ffe15 	stw	r5,-8(fp)
   2bfcc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   2bfd0:	010000f4 	movhi	r4,3
   2bfd4:	21360404 	addi	r4,r4,-10224
   2bfd8:	e17ffd17 	ldw	r5,-12(fp)
   2bfdc:	01800044 	movi	r6,1
   2bfe0:	01c07fc4 	movi	r7,511
   2bfe4:	002bedc0 	call	2bedc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   2bfe8:	010000f4 	movhi	r4,3
   2bfec:	21360104 	addi	r4,r4,-10236
   2bff0:	e17ffe17 	ldw	r5,-8(fp)
   2bff4:	000d883a 	mov	r6,zero
   2bff8:	01c07fc4 	movi	r7,511
   2bffc:	002bedc0 	call	2bedc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   2c000:	010000f4 	movhi	r4,3
   2c004:	21360704 	addi	r4,r4,-10212
   2c008:	e17fff17 	ldw	r5,-4(fp)
   2c00c:	01800044 	movi	r6,1
   2c010:	01c07fc4 	movi	r7,511
   2c014:	002bedc0 	call	2bedc <alt_open_fd>
}  
   2c018:	e037883a 	mov	sp,fp
   2c01c:	dfc00117 	ldw	ra,4(sp)
   2c020:	df000017 	ldw	fp,0(sp)
   2c024:	dec00204 	addi	sp,sp,8
   2c028:	f800283a 	ret

0002c02c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   2c02c:	defffa04 	addi	sp,sp,-24
   2c030:	dfc00515 	stw	ra,20(sp)
   2c034:	df000415 	stw	fp,16(sp)
   2c038:	dc000315 	stw	r16,12(sp)
   2c03c:	df000304 	addi	fp,sp,12
   2c040:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   2c044:	e0bffe17 	ldw	r2,-8(fp)
   2c048:	10800217 	ldw	r2,8(r2)
   2c04c:	10d00034 	orhi	r3,r2,16384
   2c050:	e0bffe17 	ldw	r2,-8(fp)
   2c054:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2c058:	e03ffd15 	stw	zero,-12(fp)
   2c05c:	00002306 	br	2c0ec <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2c060:	e13ffd17 	ldw	r4,-12(fp)
   2c064:	040000f4 	movhi	r16,3
   2c068:	84360104 	addi	r16,r16,-10236
   2c06c:	01400304 	movi	r5,12
   2c070:	00206100 	call	20610 <__mulsi3>
   2c074:	1405883a 	add	r2,r2,r16
   2c078:	10c00017 	ldw	r3,0(r2)
   2c07c:	e0bffe17 	ldw	r2,-8(fp)
   2c080:	10800017 	ldw	r2,0(r2)
   2c084:	1880161e 	bne	r3,r2,2c0e0 <alt_file_locked+0xb4>
   2c088:	e13ffd17 	ldw	r4,-12(fp)
   2c08c:	040000f4 	movhi	r16,3
   2c090:	84360104 	addi	r16,r16,-10236
   2c094:	01400304 	movi	r5,12
   2c098:	00206100 	call	20610 <__mulsi3>
   2c09c:	1405883a 	add	r2,r2,r16
   2c0a0:	10800204 	addi	r2,r2,8
   2c0a4:	10800017 	ldw	r2,0(r2)
   2c0a8:	1004403a 	cmpge	r2,r2,zero
   2c0ac:	10000c1e 	bne	r2,zero,2c0e0 <alt_file_locked+0xb4>
   2c0b0:	e13ffd17 	ldw	r4,-12(fp)
   2c0b4:	01400304 	movi	r5,12
   2c0b8:	00206100 	call	20610 <__mulsi3>
   2c0bc:	1007883a 	mov	r3,r2
   2c0c0:	008000f4 	movhi	r2,3
   2c0c4:	10b60104 	addi	r2,r2,-10236
   2c0c8:	1887883a 	add	r3,r3,r2
   2c0cc:	e0bffe17 	ldw	r2,-8(fp)
   2c0d0:	18800326 	beq	r3,r2,2c0e0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   2c0d4:	00bffcc4 	movi	r2,-13
   2c0d8:	e0bfff15 	stw	r2,-4(fp)
   2c0dc:	00000a06 	br	2c108 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2c0e0:	e0bffd17 	ldw	r2,-12(fp)
   2c0e4:	10800044 	addi	r2,r2,1
   2c0e8:	e0bffd15 	stw	r2,-12(fp)
   2c0ec:	008000f4 	movhi	r2,3
   2c0f0:	10ba8304 	addi	r2,r2,-5620
   2c0f4:	10800017 	ldw	r2,0(r2)
   2c0f8:	1007883a 	mov	r3,r2
   2c0fc:	e0bffd17 	ldw	r2,-12(fp)
   2c100:	18bfd72e 	bgeu	r3,r2,2c060 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   2c104:	e03fff15 	stw	zero,-4(fp)
   2c108:	e0bfff17 	ldw	r2,-4(fp)
}
   2c10c:	e037883a 	mov	sp,fp
   2c110:	dfc00217 	ldw	ra,8(sp)
   2c114:	df000117 	ldw	fp,4(sp)
   2c118:	dc000017 	ldw	r16,0(sp)
   2c11c:	dec00304 	addi	sp,sp,12
   2c120:	f800283a 	ret

0002c124 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   2c124:	defff404 	addi	sp,sp,-48
   2c128:	dfc00b15 	stw	ra,44(sp)
   2c12c:	df000a15 	stw	fp,40(sp)
   2c130:	df000a04 	addi	fp,sp,40
   2c134:	e13ffb15 	stw	r4,-20(fp)
   2c138:	e17ffc15 	stw	r5,-16(fp)
   2c13c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   2c140:	00bfffc4 	movi	r2,-1
   2c144:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   2c148:	00bffb44 	movi	r2,-19
   2c14c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   2c150:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   2c154:	e13ffb17 	ldw	r4,-20(fp)
   2c158:	014000f4 	movhi	r5,3
   2c15c:	297a8104 	addi	r5,r5,-5628
   2c160:	002c4d40 	call	2c4d4 <alt_find_dev>
   2c164:	e0bffa15 	stw	r2,-24(fp)
   2c168:	e0bffa17 	ldw	r2,-24(fp)
   2c16c:	1004c03a 	cmpne	r2,r2,zero
   2c170:	1000051e 	bne	r2,zero,2c188 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   2c174:	e13ffb17 	ldw	r4,-20(fp)
   2c178:	002c5680 	call	2c568 <alt_find_file>
   2c17c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   2c180:	00800044 	movi	r2,1
   2c184:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   2c188:	e0bffa17 	ldw	r2,-24(fp)
   2c18c:	1005003a 	cmpeq	r2,r2,zero
   2c190:	1000311e 	bne	r2,zero,2c258 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   2c194:	e13ffa17 	ldw	r4,-24(fp)
   2c198:	002c6880 	call	2c688 <alt_get_fd>
   2c19c:	e0bff815 	stw	r2,-32(fp)
   2c1a0:	e0bff817 	ldw	r2,-32(fp)
   2c1a4:	1004403a 	cmpge	r2,r2,zero
   2c1a8:	1000031e 	bne	r2,zero,2c1b8 <open+0x94>
    {
      status = index;
   2c1ac:	e0bff817 	ldw	r2,-32(fp)
   2c1b0:	e0bff715 	stw	r2,-36(fp)
   2c1b4:	00002a06 	br	2c260 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   2c1b8:	e13ff817 	ldw	r4,-32(fp)
   2c1bc:	01400304 	movi	r5,12
   2c1c0:	00206100 	call	20610 <__mulsi3>
   2c1c4:	1007883a 	mov	r3,r2
   2c1c8:	008000f4 	movhi	r2,3
   2c1cc:	10b60104 	addi	r2,r2,-10236
   2c1d0:	1885883a 	add	r2,r3,r2
   2c1d4:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   2c1d8:	e0fffc17 	ldw	r3,-16(fp)
   2c1dc:	00900034 	movhi	r2,16384
   2c1e0:	10bfffc4 	addi	r2,r2,-1
   2c1e4:	1886703a 	and	r3,r3,r2
   2c1e8:	e0bff917 	ldw	r2,-28(fp)
   2c1ec:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   2c1f0:	e0bff617 	ldw	r2,-40(fp)
   2c1f4:	1004c03a 	cmpne	r2,r2,zero
   2c1f8:	1000061e 	bne	r2,zero,2c214 <open+0xf0>
   2c1fc:	e13ff917 	ldw	r4,-28(fp)
   2c200:	002c02c0 	call	2c02c <alt_file_locked>
   2c204:	e0bff715 	stw	r2,-36(fp)
   2c208:	e0bff717 	ldw	r2,-36(fp)
   2c20c:	1004803a 	cmplt	r2,r2,zero
   2c210:	1000131e 	bne	r2,zero,2c260 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   2c214:	e0bffa17 	ldw	r2,-24(fp)
   2c218:	10800317 	ldw	r2,12(r2)
   2c21c:	1005003a 	cmpeq	r2,r2,zero
   2c220:	1000091e 	bne	r2,zero,2c248 <open+0x124>
   2c224:	e0bffa17 	ldw	r2,-24(fp)
   2c228:	10800317 	ldw	r2,12(r2)
   2c22c:	e13ff917 	ldw	r4,-28(fp)
   2c230:	e17ffb17 	ldw	r5,-20(fp)
   2c234:	e1bffc17 	ldw	r6,-16(fp)
   2c238:	e1fffd17 	ldw	r7,-12(fp)
   2c23c:	103ee83a 	callr	r2
   2c240:	e0bfff15 	stw	r2,-4(fp)
   2c244:	00000106 	br	2c24c <open+0x128>
   2c248:	e03fff15 	stw	zero,-4(fp)
   2c24c:	e0bfff17 	ldw	r2,-4(fp)
   2c250:	e0bff715 	stw	r2,-36(fp)
   2c254:	00000206 	br	2c260 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   2c258:	00bffb44 	movi	r2,-19
   2c25c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   2c260:	e0bff717 	ldw	r2,-36(fp)
   2c264:	1004403a 	cmpge	r2,r2,zero
   2c268:	1000091e 	bne	r2,zero,2c290 <open+0x16c>
  {
    alt_release_fd (index);  
   2c26c:	e13ff817 	ldw	r4,-32(fp)
   2c270:	002aa940 	call	2aa94 <alt_release_fd>
    ALT_ERRNO = -status;
   2c274:	002c2b00 	call	2c2b0 <alt_get_errno>
   2c278:	e0fff717 	ldw	r3,-36(fp)
   2c27c:	00c7c83a 	sub	r3,zero,r3
   2c280:	10c00015 	stw	r3,0(r2)
    return -1;
   2c284:	00bfffc4 	movi	r2,-1
   2c288:	e0bffe15 	stw	r2,-8(fp)
   2c28c:	00000206 	br	2c298 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   2c290:	e0bff817 	ldw	r2,-32(fp)
   2c294:	e0bffe15 	stw	r2,-8(fp)
   2c298:	e0bffe17 	ldw	r2,-8(fp)
}
   2c29c:	e037883a 	mov	sp,fp
   2c2a0:	dfc00117 	ldw	ra,4(sp)
   2c2a4:	df000017 	ldw	fp,0(sp)
   2c2a8:	dec00204 	addi	sp,sp,8
   2c2ac:	f800283a 	ret

0002c2b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2c2b0:	defffd04 	addi	sp,sp,-12
   2c2b4:	dfc00215 	stw	ra,8(sp)
   2c2b8:	df000115 	stw	fp,4(sp)
   2c2bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   2c2c0:	008000f4 	movhi	r2,3
   2c2c4:	10ba8404 	addi	r2,r2,-5616
   2c2c8:	10800017 	ldw	r2,0(r2)
   2c2cc:	1005003a 	cmpeq	r2,r2,zero
   2c2d0:	1000061e 	bne	r2,zero,2c2ec <alt_get_errno+0x3c>
   2c2d4:	008000f4 	movhi	r2,3
   2c2d8:	10ba8404 	addi	r2,r2,-5616
   2c2dc:	10800017 	ldw	r2,0(r2)
   2c2e0:	103ee83a 	callr	r2
   2c2e4:	e0bfff15 	stw	r2,-4(fp)
   2c2e8:	00000306 	br	2c2f8 <alt_get_errno+0x48>
   2c2ec:	008000f4 	movhi	r2,3
   2c2f0:	10812604 	addi	r2,r2,1176
   2c2f4:	e0bfff15 	stw	r2,-4(fp)
   2c2f8:	e0bfff17 	ldw	r2,-4(fp)
}
   2c2fc:	e037883a 	mov	sp,fp
   2c300:	dfc00117 	ldw	ra,4(sp)
   2c304:	df000017 	ldw	fp,0(sp)
   2c308:	dec00204 	addi	sp,sp,8
   2c30c:	f800283a 	ret

0002c310 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   2c310:	defffa04 	addi	sp,sp,-24
   2c314:	df000515 	stw	fp,20(sp)
   2c318:	df000504 	addi	fp,sp,20
   2c31c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2c320:	0005303a 	rdctl	r2,status
   2c324:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2c328:	e0fffd17 	ldw	r3,-12(fp)
   2c32c:	00bfff84 	movi	r2,-2
   2c330:	1884703a 	and	r2,r3,r2
   2c334:	1001703a 	wrctl	status,r2
  
  return context;
   2c338:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   2c33c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   2c340:	e0bfff17 	ldw	r2,-4(fp)
   2c344:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   2c348:	e0bffc17 	ldw	r2,-16(fp)
   2c34c:	10c00017 	ldw	r3,0(r2)
   2c350:	e0bffc17 	ldw	r2,-16(fp)
   2c354:	10800117 	ldw	r2,4(r2)
   2c358:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   2c35c:	e0bffc17 	ldw	r2,-16(fp)
   2c360:	10c00117 	ldw	r3,4(r2)
   2c364:	e0bffc17 	ldw	r2,-16(fp)
   2c368:	10800017 	ldw	r2,0(r2)
   2c36c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   2c370:	e0fffc17 	ldw	r3,-16(fp)
   2c374:	e0bffc17 	ldw	r2,-16(fp)
   2c378:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   2c37c:	e0fffc17 	ldw	r3,-16(fp)
   2c380:	e0bffc17 	ldw	r2,-16(fp)
   2c384:	18800015 	stw	r2,0(r3)
   2c388:	e0bffe17 	ldw	r2,-8(fp)
   2c38c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2c390:	e0bffb17 	ldw	r2,-20(fp)
   2c394:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   2c398:	e037883a 	mov	sp,fp
   2c39c:	df000017 	ldw	fp,0(sp)
   2c3a0:	dec00104 	addi	sp,sp,4
   2c3a4:	f800283a 	ret

0002c3a8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   2c3a8:	defffb04 	addi	sp,sp,-20
   2c3ac:	dfc00415 	stw	ra,16(sp)
   2c3b0:	df000315 	stw	fp,12(sp)
   2c3b4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   2c3b8:	d0a00e17 	ldw	r2,-32712(gp)
   2c3bc:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   2c3c0:	d0a6b317 	ldw	r2,-25908(gp)
   2c3c4:	10800044 	addi	r2,r2,1
   2c3c8:	d0a6b315 	stw	r2,-25908(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2c3cc:	00003106 	br	2c494 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   2c3d0:	e0bffe17 	ldw	r2,-8(fp)
   2c3d4:	10800017 	ldw	r2,0(r2)
   2c3d8:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   2c3dc:	e0bffe17 	ldw	r2,-8(fp)
   2c3e0:	10800403 	ldbu	r2,16(r2)
   2c3e4:	10803fcc 	andi	r2,r2,255
   2c3e8:	1005003a 	cmpeq	r2,r2,zero
   2c3ec:	1000051e 	bne	r2,zero,2c404 <alt_tick+0x5c>
   2c3f0:	d0a6b317 	ldw	r2,-25908(gp)
   2c3f4:	1004c03a 	cmpne	r2,r2,zero
   2c3f8:	1000021e 	bne	r2,zero,2c404 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   2c3fc:	e0bffe17 	ldw	r2,-8(fp)
   2c400:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   2c404:	e0bffe17 	ldw	r2,-8(fp)
   2c408:	10c00217 	ldw	r3,8(r2)
   2c40c:	d0a6b317 	ldw	r2,-25908(gp)
   2c410:	10c01e36 	bltu	r2,r3,2c48c <alt_tick+0xe4>
   2c414:	e0bffe17 	ldw	r2,-8(fp)
   2c418:	10800403 	ldbu	r2,16(r2)
   2c41c:	10803fcc 	andi	r2,r2,255
   2c420:	1004c03a 	cmpne	r2,r2,zero
   2c424:	1000191e 	bne	r2,zero,2c48c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   2c428:	e0bffe17 	ldw	r2,-8(fp)
   2c42c:	10c00317 	ldw	r3,12(r2)
   2c430:	e0bffe17 	ldw	r2,-8(fp)
   2c434:	11000517 	ldw	r4,20(r2)
   2c438:	183ee83a 	callr	r3
   2c43c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   2c440:	e0bffd17 	ldw	r2,-12(fp)
   2c444:	1004c03a 	cmpne	r2,r2,zero
   2c448:	1000031e 	bne	r2,zero,2c458 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   2c44c:	e13ffe17 	ldw	r4,-8(fp)
   2c450:	002c3100 	call	2c310 <alt_alarm_stop>
   2c454:	00000d06 	br	2c48c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   2c458:	e0bffe17 	ldw	r2,-8(fp)
   2c45c:	10c00217 	ldw	r3,8(r2)
   2c460:	e0bffd17 	ldw	r2,-12(fp)
   2c464:	1887883a 	add	r3,r3,r2
   2c468:	e0bffe17 	ldw	r2,-8(fp)
   2c46c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   2c470:	e0bffe17 	ldw	r2,-8(fp)
   2c474:	10c00217 	ldw	r3,8(r2)
   2c478:	d0a6b317 	ldw	r2,-25908(gp)
   2c47c:	1880032e 	bgeu	r3,r2,2c48c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   2c480:	e0fffe17 	ldw	r3,-8(fp)
   2c484:	00800044 	movi	r2,1
   2c488:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   2c48c:	e0bfff17 	ldw	r2,-4(fp)
   2c490:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2c494:	d0e00e04 	addi	r3,gp,-32712
   2c498:	e0bffe17 	ldw	r2,-8(fp)
   2c49c:	10ffcc1e 	bne	r2,r3,2c3d0 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   2c4a0:	e037883a 	mov	sp,fp
   2c4a4:	dfc00117 	ldw	ra,4(sp)
   2c4a8:	df000017 	ldw	fp,0(sp)
   2c4ac:	dec00204 	addi	sp,sp,8
   2c4b0:	f800283a 	ret

0002c4b4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   2c4b4:	deffff04 	addi	sp,sp,-4
   2c4b8:	df000015 	stw	fp,0(sp)
   2c4bc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   2c4c0:	000170fa 	wrctl	ienable,zero
}
   2c4c4:	e037883a 	mov	sp,fp
   2c4c8:	df000017 	ldw	fp,0(sp)
   2c4cc:	dec00104 	addi	sp,sp,4
   2c4d0:	f800283a 	ret

0002c4d4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   2c4d4:	defff904 	addi	sp,sp,-28
   2c4d8:	dfc00615 	stw	ra,24(sp)
   2c4dc:	df000515 	stw	fp,20(sp)
   2c4e0:	df000504 	addi	fp,sp,20
   2c4e4:	e13ffd15 	stw	r4,-12(fp)
   2c4e8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   2c4ec:	e0bffe17 	ldw	r2,-8(fp)
   2c4f0:	10800017 	ldw	r2,0(r2)
   2c4f4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   2c4f8:	e13ffd17 	ldw	r4,-12(fp)
   2c4fc:	00207740 	call	20774 <strlen>
   2c500:	10800044 	addi	r2,r2,1
   2c504:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2c508:	00000d06 	br	2c540 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2c50c:	e0bffc17 	ldw	r2,-16(fp)
   2c510:	11000217 	ldw	r4,8(r2)
   2c514:	e1bffb17 	ldw	r6,-20(fp)
   2c518:	e17ffd17 	ldw	r5,-12(fp)
   2c51c:	002c7a40 	call	2c7a4 <memcmp>
   2c520:	1004c03a 	cmpne	r2,r2,zero
   2c524:	1000031e 	bne	r2,zero,2c534 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   2c528:	e0bffc17 	ldw	r2,-16(fp)
   2c52c:	e0bfff15 	stw	r2,-4(fp)
   2c530:	00000706 	br	2c550 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   2c534:	e0bffc17 	ldw	r2,-16(fp)
   2c538:	10800017 	ldw	r2,0(r2)
   2c53c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2c540:	e0fffe17 	ldw	r3,-8(fp)
   2c544:	e0bffc17 	ldw	r2,-16(fp)
   2c548:	10fff01e 	bne	r2,r3,2c50c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2c54c:	e03fff15 	stw	zero,-4(fp)
   2c550:	e0bfff17 	ldw	r2,-4(fp)
}
   2c554:	e037883a 	mov	sp,fp
   2c558:	dfc00117 	ldw	ra,4(sp)
   2c55c:	df000017 	ldw	fp,0(sp)
   2c560:	dec00204 	addi	sp,sp,8
   2c564:	f800283a 	ret

0002c568 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   2c568:	defffa04 	addi	sp,sp,-24
   2c56c:	dfc00515 	stw	ra,20(sp)
   2c570:	df000415 	stw	fp,16(sp)
   2c574:	df000404 	addi	fp,sp,16
   2c578:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   2c57c:	008000f4 	movhi	r2,3
   2c580:	10ba7f04 	addi	r2,r2,-5636
   2c584:	10800017 	ldw	r2,0(r2)
   2c588:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2c58c:	00003306 	br	2c65c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   2c590:	e0bffd17 	ldw	r2,-12(fp)
   2c594:	11000217 	ldw	r4,8(r2)
   2c598:	00207740 	call	20774 <strlen>
   2c59c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   2c5a0:	e0bffd17 	ldw	r2,-12(fp)
   2c5a4:	10c00217 	ldw	r3,8(r2)
   2c5a8:	e0bffc17 	ldw	r2,-16(fp)
   2c5ac:	1885883a 	add	r2,r3,r2
   2c5b0:	10bfffc4 	addi	r2,r2,-1
   2c5b4:	10800003 	ldbu	r2,0(r2)
   2c5b8:	10803fcc 	andi	r2,r2,255
   2c5bc:	1080201c 	xori	r2,r2,128
   2c5c0:	10bfe004 	addi	r2,r2,-128
   2c5c4:	10800bd8 	cmpnei	r2,r2,47
   2c5c8:	1000031e 	bne	r2,zero,2c5d8 <alt_find_file+0x70>
    {
      len -= 1;
   2c5cc:	e0bffc17 	ldw	r2,-16(fp)
   2c5d0:	10bfffc4 	addi	r2,r2,-1
   2c5d4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2c5d8:	e0bffc17 	ldw	r2,-16(fp)
   2c5dc:	1007883a 	mov	r3,r2
   2c5e0:	e0bffe17 	ldw	r2,-8(fp)
   2c5e4:	1885883a 	add	r2,r3,r2
   2c5e8:	10800003 	ldbu	r2,0(r2)
   2c5ec:	10803fcc 	andi	r2,r2,255
   2c5f0:	1080201c 	xori	r2,r2,128
   2c5f4:	10bfe004 	addi	r2,r2,-128
   2c5f8:	10800be0 	cmpeqi	r2,r2,47
   2c5fc:	10000a1e 	bne	r2,zero,2c628 <alt_find_file+0xc0>
   2c600:	e0bffc17 	ldw	r2,-16(fp)
   2c604:	1007883a 	mov	r3,r2
   2c608:	e0bffe17 	ldw	r2,-8(fp)
   2c60c:	1885883a 	add	r2,r3,r2
   2c610:	10800003 	ldbu	r2,0(r2)
   2c614:	10803fcc 	andi	r2,r2,255
   2c618:	1080201c 	xori	r2,r2,128
   2c61c:	10bfe004 	addi	r2,r2,-128
   2c620:	1004c03a 	cmpne	r2,r2,zero
   2c624:	10000a1e 	bne	r2,zero,2c650 <alt_find_file+0xe8>
   2c628:	e0bffd17 	ldw	r2,-12(fp)
   2c62c:	11000217 	ldw	r4,8(r2)
   2c630:	e1bffc17 	ldw	r6,-16(fp)
   2c634:	e17ffe17 	ldw	r5,-8(fp)
   2c638:	002c7a40 	call	2c7a4 <memcmp>
   2c63c:	1004c03a 	cmpne	r2,r2,zero
   2c640:	1000031e 	bne	r2,zero,2c650 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   2c644:	e0bffd17 	ldw	r2,-12(fp)
   2c648:	e0bfff15 	stw	r2,-4(fp)
   2c64c:	00000806 	br	2c670 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   2c650:	e0bffd17 	ldw	r2,-12(fp)
   2c654:	10800017 	ldw	r2,0(r2)
   2c658:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2c65c:	00c000f4 	movhi	r3,3
   2c660:	18fa7f04 	addi	r3,r3,-5636
   2c664:	e0bffd17 	ldw	r2,-12(fp)
   2c668:	10ffc91e 	bne	r2,r3,2c590 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   2c66c:	e03fff15 	stw	zero,-4(fp)
   2c670:	e0bfff17 	ldw	r2,-4(fp)
}
   2c674:	e037883a 	mov	sp,fp
   2c678:	dfc00117 	ldw	ra,4(sp)
   2c67c:	df000017 	ldw	fp,0(sp)
   2c680:	dec00204 	addi	sp,sp,8
   2c684:	f800283a 	ret

0002c688 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   2c688:	defffa04 	addi	sp,sp,-24
   2c68c:	dfc00515 	stw	ra,20(sp)
   2c690:	df000415 	stw	fp,16(sp)
   2c694:	dc000315 	stw	r16,12(sp)
   2c698:	df000304 	addi	fp,sp,12
   2c69c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   2c6a0:	00bffa04 	movi	r2,-24
   2c6a4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2c6a8:	e03ffe15 	stw	zero,-8(fp)
   2c6ac:	00002006 	br	2c730 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   2c6b0:	e13ffe17 	ldw	r4,-8(fp)
   2c6b4:	040000f4 	movhi	r16,3
   2c6b8:	84360104 	addi	r16,r16,-10236
   2c6bc:	01400304 	movi	r5,12
   2c6c0:	00206100 	call	20610 <__mulsi3>
   2c6c4:	1405883a 	add	r2,r2,r16
   2c6c8:	10800017 	ldw	r2,0(r2)
   2c6cc:	1004c03a 	cmpne	r2,r2,zero
   2c6d0:	1000141e 	bne	r2,zero,2c724 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   2c6d4:	e13ffe17 	ldw	r4,-8(fp)
   2c6d8:	040000f4 	movhi	r16,3
   2c6dc:	84360104 	addi	r16,r16,-10236
   2c6e0:	01400304 	movi	r5,12
   2c6e4:	00206100 	call	20610 <__mulsi3>
   2c6e8:	1407883a 	add	r3,r2,r16
   2c6ec:	e0bfff17 	ldw	r2,-4(fp)
   2c6f0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   2c6f4:	008000f4 	movhi	r2,3
   2c6f8:	10ba8304 	addi	r2,r2,-5620
   2c6fc:	10c00017 	ldw	r3,0(r2)
   2c700:	e0bffe17 	ldw	r2,-8(fp)
   2c704:	1880040e 	bge	r3,r2,2c718 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   2c708:	00c000f4 	movhi	r3,3
   2c70c:	18fa8304 	addi	r3,r3,-5620
   2c710:	e0bffe17 	ldw	r2,-8(fp)
   2c714:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   2c718:	e0bffe17 	ldw	r2,-8(fp)
   2c71c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   2c720:	00000606 	br	2c73c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2c724:	e0bffe17 	ldw	r2,-8(fp)
   2c728:	10800044 	addi	r2,r2,1
   2c72c:	e0bffe15 	stw	r2,-8(fp)
   2c730:	e0bffe17 	ldw	r2,-8(fp)
   2c734:	10800810 	cmplti	r2,r2,32
   2c738:	103fdd1e 	bne	r2,zero,2c6b0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   2c73c:	e0bffd17 	ldw	r2,-12(fp)
}
   2c740:	e037883a 	mov	sp,fp
   2c744:	dfc00217 	ldw	ra,8(sp)
   2c748:	df000117 	ldw	fp,4(sp)
   2c74c:	dc000017 	ldw	r16,0(sp)
   2c750:	dec00304 	addi	sp,sp,12
   2c754:	f800283a 	ret

0002c758 <atexit>:
   2c758:	200b883a 	mov	r5,r4
   2c75c:	000d883a 	mov	r6,zero
   2c760:	0009883a 	mov	r4,zero
   2c764:	000f883a 	mov	r7,zero
   2c768:	002c8181 	jmpi	2c818 <__register_exitproc>

0002c76c <exit>:
   2c76c:	defffe04 	addi	sp,sp,-8
   2c770:	000b883a 	mov	r5,zero
   2c774:	dc000015 	stw	r16,0(sp)
   2c778:	dfc00115 	stw	ra,4(sp)
   2c77c:	2021883a 	mov	r16,r4
   2c780:	002c9500 	call	2c950 <__call_exitprocs>
   2c784:	008000f4 	movhi	r2,3
   2c788:	10ba7a04 	addi	r2,r2,-5656
   2c78c:	11000017 	ldw	r4,0(r2)
   2c790:	20800f17 	ldw	r2,60(r4)
   2c794:	10000126 	beq	r2,zero,2c79c <exit+0x30>
   2c798:	103ee83a 	callr	r2
   2c79c:	8009883a 	mov	r4,r16
   2c7a0:	002cb400 	call	2cb40 <_exit>

0002c7a4 <memcmp>:
   2c7a4:	00c000c4 	movi	r3,3
   2c7a8:	1980032e 	bgeu	r3,r6,2c7b8 <memcmp+0x14>
   2c7ac:	2144b03a 	or	r2,r4,r5
   2c7b0:	10c4703a 	and	r2,r2,r3
   2c7b4:	10000f26 	beq	r2,zero,2c7f4 <memcmp+0x50>
   2c7b8:	31ffffc4 	addi	r7,r6,-1
   2c7bc:	3000061e 	bne	r6,zero,2c7d8 <memcmp+0x34>
   2c7c0:	00000a06 	br	2c7ec <memcmp+0x48>
   2c7c4:	39ffffc4 	addi	r7,r7,-1
   2c7c8:	00bfffc4 	movi	r2,-1
   2c7cc:	21000044 	addi	r4,r4,1
   2c7d0:	29400044 	addi	r5,r5,1
   2c7d4:	38800526 	beq	r7,r2,2c7ec <memcmp+0x48>
   2c7d8:	20c00003 	ldbu	r3,0(r4)
   2c7dc:	28800003 	ldbu	r2,0(r5)
   2c7e0:	18bff826 	beq	r3,r2,2c7c4 <memcmp+0x20>
   2c7e4:	1885c83a 	sub	r2,r3,r2
   2c7e8:	f800283a 	ret
   2c7ec:	0005883a 	mov	r2,zero
   2c7f0:	f800283a 	ret
   2c7f4:	180f883a 	mov	r7,r3
   2c7f8:	20c00017 	ldw	r3,0(r4)
   2c7fc:	28800017 	ldw	r2,0(r5)
   2c800:	18bfed1e 	bne	r3,r2,2c7b8 <memcmp+0x14>
   2c804:	31bfff04 	addi	r6,r6,-4
   2c808:	21000104 	addi	r4,r4,4
   2c80c:	29400104 	addi	r5,r5,4
   2c810:	39bff936 	bltu	r7,r6,2c7f8 <memcmp+0x54>
   2c814:	003fe806 	br	2c7b8 <memcmp+0x14>

0002c818 <__register_exitproc>:
   2c818:	defffa04 	addi	sp,sp,-24
   2c81c:	008000f4 	movhi	r2,3
   2c820:	10ba7a04 	addi	r2,r2,-5656
   2c824:	dc000015 	stw	r16,0(sp)
   2c828:	14000017 	ldw	r16,0(r2)
   2c82c:	dd000415 	stw	r20,16(sp)
   2c830:	2829883a 	mov	r20,r5
   2c834:	81405217 	ldw	r5,328(r16)
   2c838:	dcc00315 	stw	r19,12(sp)
   2c83c:	dc800215 	stw	r18,8(sp)
   2c840:	dc400115 	stw	r17,4(sp)
   2c844:	dfc00515 	stw	ra,20(sp)
   2c848:	2023883a 	mov	r17,r4
   2c84c:	3027883a 	mov	r19,r6
   2c850:	3825883a 	mov	r18,r7
   2c854:	28002526 	beq	r5,zero,2c8ec <__register_exitproc+0xd4>
   2c858:	29000117 	ldw	r4,4(r5)
   2c85c:	008007c4 	movi	r2,31
   2c860:	11002716 	blt	r2,r4,2c900 <__register_exitproc+0xe8>
   2c864:	8800101e 	bne	r17,zero,2c8a8 <__register_exitproc+0x90>
   2c868:	2105883a 	add	r2,r4,r4
   2c86c:	1085883a 	add	r2,r2,r2
   2c870:	20c00044 	addi	r3,r4,1
   2c874:	1145883a 	add	r2,r2,r5
   2c878:	0009883a 	mov	r4,zero
   2c87c:	15000215 	stw	r20,8(r2)
   2c880:	28c00115 	stw	r3,4(r5)
   2c884:	2005883a 	mov	r2,r4
   2c888:	dfc00517 	ldw	ra,20(sp)
   2c88c:	dd000417 	ldw	r20,16(sp)
   2c890:	dcc00317 	ldw	r19,12(sp)
   2c894:	dc800217 	ldw	r18,8(sp)
   2c898:	dc400117 	ldw	r17,4(sp)
   2c89c:	dc000017 	ldw	r16,0(sp)
   2c8a0:	dec00604 	addi	sp,sp,24
   2c8a4:	f800283a 	ret
   2c8a8:	29802204 	addi	r6,r5,136
   2c8ac:	00800044 	movi	r2,1
   2c8b0:	110e983a 	sll	r7,r2,r4
   2c8b4:	30c04017 	ldw	r3,256(r6)
   2c8b8:	2105883a 	add	r2,r4,r4
   2c8bc:	1085883a 	add	r2,r2,r2
   2c8c0:	1185883a 	add	r2,r2,r6
   2c8c4:	19c6b03a 	or	r3,r3,r7
   2c8c8:	14802015 	stw	r18,128(r2)
   2c8cc:	14c00015 	stw	r19,0(r2)
   2c8d0:	00800084 	movi	r2,2
   2c8d4:	30c04015 	stw	r3,256(r6)
   2c8d8:	88bfe31e 	bne	r17,r2,2c868 <__register_exitproc+0x50>
   2c8dc:	30804117 	ldw	r2,260(r6)
   2c8e0:	11c4b03a 	or	r2,r2,r7
   2c8e4:	30804115 	stw	r2,260(r6)
   2c8e8:	003fdf06 	br	2c868 <__register_exitproc+0x50>
   2c8ec:	008000f4 	movhi	r2,3
   2c8f0:	10817704 	addi	r2,r2,1500
   2c8f4:	100b883a 	mov	r5,r2
   2c8f8:	80805215 	stw	r2,328(r16)
   2c8fc:	003fd606 	br	2c858 <__register_exitproc+0x40>
   2c900:	00800034 	movhi	r2,0
   2c904:	10800004 	addi	r2,r2,0
   2c908:	1000021e 	bne	r2,zero,2c914 <__register_exitproc+0xfc>
   2c90c:	013fffc4 	movi	r4,-1
   2c910:	003fdc06 	br	2c884 <__register_exitproc+0x6c>
   2c914:	01006404 	movi	r4,400
   2c918:	103ee83a 	callr	r2
   2c91c:	1007883a 	mov	r3,r2
   2c920:	103ffa26 	beq	r2,zero,2c90c <__register_exitproc+0xf4>
   2c924:	80805217 	ldw	r2,328(r16)
   2c928:	180b883a 	mov	r5,r3
   2c92c:	18000115 	stw	zero,4(r3)
   2c930:	18800015 	stw	r2,0(r3)
   2c934:	80c05215 	stw	r3,328(r16)
   2c938:	18006215 	stw	zero,392(r3)
   2c93c:	18006315 	stw	zero,396(r3)
   2c940:	0009883a 	mov	r4,zero
   2c944:	883fc826 	beq	r17,zero,2c868 <__register_exitproc+0x50>
   2c948:	003fd706 	br	2c8a8 <__register_exitproc+0x90>

0002c94c <register_fini>:
   2c94c:	f800283a 	ret

0002c950 <__call_exitprocs>:
   2c950:	008000f4 	movhi	r2,3
   2c954:	10ba7a04 	addi	r2,r2,-5656
   2c958:	10800017 	ldw	r2,0(r2)
   2c95c:	defff304 	addi	sp,sp,-52
   2c960:	df000b15 	stw	fp,44(sp)
   2c964:	d8800115 	stw	r2,4(sp)
   2c968:	00800034 	movhi	r2,0
   2c96c:	10800004 	addi	r2,r2,0
   2c970:	1005003a 	cmpeq	r2,r2,zero
   2c974:	d8800215 	stw	r2,8(sp)
   2c978:	d8800117 	ldw	r2,4(sp)
   2c97c:	dd400815 	stw	r21,32(sp)
   2c980:	dd000715 	stw	r20,28(sp)
   2c984:	10805204 	addi	r2,r2,328
   2c988:	dfc00c15 	stw	ra,48(sp)
   2c98c:	ddc00a15 	stw	r23,40(sp)
   2c990:	dd800915 	stw	r22,36(sp)
   2c994:	dcc00615 	stw	r19,24(sp)
   2c998:	dc800515 	stw	r18,20(sp)
   2c99c:	dc400415 	stw	r17,16(sp)
   2c9a0:	dc000315 	stw	r16,12(sp)
   2c9a4:	282b883a 	mov	r21,r5
   2c9a8:	2039883a 	mov	fp,r4
   2c9ac:	d8800015 	stw	r2,0(sp)
   2c9b0:	2829003a 	cmpeq	r20,r5,zero
   2c9b4:	d8800117 	ldw	r2,4(sp)
   2c9b8:	14405217 	ldw	r17,328(r2)
   2c9bc:	88001026 	beq	r17,zero,2ca00 <__call_exitprocs+0xb0>
   2c9c0:	ddc00017 	ldw	r23,0(sp)
   2c9c4:	88800117 	ldw	r2,4(r17)
   2c9c8:	8c802204 	addi	r18,r17,136
   2c9cc:	143fffc4 	addi	r16,r2,-1
   2c9d0:	80000916 	blt	r16,zero,2c9f8 <__call_exitprocs+0xa8>
   2c9d4:	05bfffc4 	movi	r22,-1
   2c9d8:	a000151e 	bne	r20,zero,2ca30 <__call_exitprocs+0xe0>
   2c9dc:	8409883a 	add	r4,r16,r16
   2c9e0:	2105883a 	add	r2,r4,r4
   2c9e4:	1485883a 	add	r2,r2,r18
   2c9e8:	10c02017 	ldw	r3,128(r2)
   2c9ec:	a8c01126 	beq	r21,r3,2ca34 <__call_exitprocs+0xe4>
   2c9f0:	843fffc4 	addi	r16,r16,-1
   2c9f4:	85bff81e 	bne	r16,r22,2c9d8 <__call_exitprocs+0x88>
   2c9f8:	d8800217 	ldw	r2,8(sp)
   2c9fc:	10003126 	beq	r2,zero,2cac4 <__call_exitprocs+0x174>
   2ca00:	dfc00c17 	ldw	ra,48(sp)
   2ca04:	df000b17 	ldw	fp,44(sp)
   2ca08:	ddc00a17 	ldw	r23,40(sp)
   2ca0c:	dd800917 	ldw	r22,36(sp)
   2ca10:	dd400817 	ldw	r21,32(sp)
   2ca14:	dd000717 	ldw	r20,28(sp)
   2ca18:	dcc00617 	ldw	r19,24(sp)
   2ca1c:	dc800517 	ldw	r18,20(sp)
   2ca20:	dc400417 	ldw	r17,16(sp)
   2ca24:	dc000317 	ldw	r16,12(sp)
   2ca28:	dec00d04 	addi	sp,sp,52
   2ca2c:	f800283a 	ret
   2ca30:	8409883a 	add	r4,r16,r16
   2ca34:	88c00117 	ldw	r3,4(r17)
   2ca38:	2105883a 	add	r2,r4,r4
   2ca3c:	1445883a 	add	r2,r2,r17
   2ca40:	18ffffc4 	addi	r3,r3,-1
   2ca44:	11800217 	ldw	r6,8(r2)
   2ca48:	1c001526 	beq	r3,r16,2caa0 <__call_exitprocs+0x150>
   2ca4c:	10000215 	stw	zero,8(r2)
   2ca50:	303fe726 	beq	r6,zero,2c9f0 <__call_exitprocs+0xa0>
   2ca54:	00c00044 	movi	r3,1
   2ca58:	1c06983a 	sll	r3,r3,r16
   2ca5c:	90804017 	ldw	r2,256(r18)
   2ca60:	8cc00117 	ldw	r19,4(r17)
   2ca64:	1884703a 	and	r2,r3,r2
   2ca68:	10001426 	beq	r2,zero,2cabc <__call_exitprocs+0x16c>
   2ca6c:	90804117 	ldw	r2,260(r18)
   2ca70:	1884703a 	and	r2,r3,r2
   2ca74:	10000c1e 	bne	r2,zero,2caa8 <__call_exitprocs+0x158>
   2ca78:	2105883a 	add	r2,r4,r4
   2ca7c:	1485883a 	add	r2,r2,r18
   2ca80:	11400017 	ldw	r5,0(r2)
   2ca84:	e009883a 	mov	r4,fp
   2ca88:	303ee83a 	callr	r6
   2ca8c:	88800117 	ldw	r2,4(r17)
   2ca90:	98bfc81e 	bne	r19,r2,2c9b4 <__call_exitprocs+0x64>
   2ca94:	b8800017 	ldw	r2,0(r23)
   2ca98:	147fd526 	beq	r2,r17,2c9f0 <__call_exitprocs+0xa0>
   2ca9c:	003fc506 	br	2c9b4 <__call_exitprocs+0x64>
   2caa0:	8c000115 	stw	r16,4(r17)
   2caa4:	003fea06 	br	2ca50 <__call_exitprocs+0x100>
   2caa8:	2105883a 	add	r2,r4,r4
   2caac:	1485883a 	add	r2,r2,r18
   2cab0:	11000017 	ldw	r4,0(r2)
   2cab4:	303ee83a 	callr	r6
   2cab8:	003ff406 	br	2ca8c <__call_exitprocs+0x13c>
   2cabc:	303ee83a 	callr	r6
   2cac0:	003ff206 	br	2ca8c <__call_exitprocs+0x13c>
   2cac4:	88800117 	ldw	r2,4(r17)
   2cac8:	1000081e 	bne	r2,zero,2caec <__call_exitprocs+0x19c>
   2cacc:	89000017 	ldw	r4,0(r17)
   2cad0:	20000726 	beq	r4,zero,2caf0 <__call_exitprocs+0x1a0>
   2cad4:	b9000015 	stw	r4,0(r23)
   2cad8:	8809883a 	mov	r4,r17
   2cadc:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   2cae0:	bc400017 	ldw	r17,0(r23)
   2cae4:	883fb71e 	bne	r17,zero,2c9c4 <__call_exitprocs+0x74>
   2cae8:	003fc506 	br	2ca00 <__call_exitprocs+0xb0>
   2caec:	89000017 	ldw	r4,0(r17)
   2caf0:	882f883a 	mov	r23,r17
   2caf4:	2023883a 	mov	r17,r4
   2caf8:	883fb21e 	bne	r17,zero,2c9c4 <__call_exitprocs+0x74>
   2cafc:	003fc006 	br	2ca00 <__call_exitprocs+0xb0>

0002cb00 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   2cb00:	defffd04 	addi	sp,sp,-12
   2cb04:	df000215 	stw	fp,8(sp)
   2cb08:	df000204 	addi	fp,sp,8
   2cb0c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   2cb10:	e0bfff17 	ldw	r2,-4(fp)
   2cb14:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   2cb18:	e0bffe17 	ldw	r2,-8(fp)
   2cb1c:	1005003a 	cmpeq	r2,r2,zero
   2cb20:	1000021e 	bne	r2,zero,2cb2c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   2cb24:	002af070 	cmpltui	zero,zero,43969
   2cb28:	00000106 	br	2cb30 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   2cb2c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   2cb30:	e037883a 	mov	sp,fp
   2cb34:	df000017 	ldw	fp,0(sp)
   2cb38:	dec00104 	addi	sp,sp,4
   2cb3c:	f800283a 	ret

0002cb40 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   2cb40:	defffd04 	addi	sp,sp,-12
   2cb44:	dfc00215 	stw	ra,8(sp)
   2cb48:	df000115 	stw	fp,4(sp)
   2cb4c:	df000104 	addi	fp,sp,4
   2cb50:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   2cb54:	e13fff17 	ldw	r4,-4(fp)
   2cb58:	002cb000 	call	2cb00 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   2cb5c:	003fff06 	br	2cb5c <_exit+0x1c>
   2cb60:	00000010 	cmplti	zero,zero,0
   2cb64:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   2cb68:	00527a01 	jmpi	527a0 <__alt_data_end+0x127a0>
   2cb6c:	011f7c01 	jmpi	11f7c0 <__alt_data_end+0xdf7c0>
   2cb70:	001b0c0b 	ldhu	zero,27696(zero)
   2cb74:	00000028 	cmpgeui	zero,zero,0
   2cb78:	00000018 	cmpnei	zero,zero,0
   2cb7c:	00027a80 	call	27a8 <__alt_mem_onchip_memory2_0-0x1d858>
   2cb80:	0000066c 	andhi	zero,zero,25
   2cb84:	3c0e4400 	call	3c0e440 <__alt_data_end+0x3bce440>
   2cb88:	910a9074 	orhi	r4,r18,10817
   2cb8c:	94089209 	0x94089209
   2cb90:	97049606 	br	2ddec <jtag_uart_0+0x468>
   2cb94:	93019f03 	ldbu	r12,1660(r18)
   2cb98:	9c059507 	ldb	r16,5716(r19)
   2cb9c:	00000002 	0x2
   2cba0:	00000028 	cmpgeui	zero,zero,0
   2cba4:	00000044 	movi	zero,1
   2cba8:	000280ec 	andhi	zero,zero,2563
   2cbac:	00000660 	cmpeqi	zero,zero,25
   2cbb0:	400e4400 	call	400e440 <__alt_data_end+0x3fce440>
   2cbb4:	92099170 	cmpltui	r8,r18,9797
   2cbb8:	96069408 	cmpgei	et,r18,6736
   2cbbc:	9c039704 	addi	r16,r19,3676
   2cbc0:	90019f02 	0x90019f02
   2cbc4:	9507930a 	0x9507930a
   2cbc8:	00000005 	stb	zero,0(zero)
   2cbcc:	0002c94c 	andi	zero,zero,2853
