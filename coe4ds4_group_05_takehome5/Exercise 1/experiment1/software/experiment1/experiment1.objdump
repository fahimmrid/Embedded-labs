
experiment1.elf:     file format elf32-littlenios2
experiment1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000201b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x000054f8 memsz 0x000054f8 flags r-x
    LOAD off    0x00006518 vaddr 0x00025518 paddr 0x00026f60 align 2**12
         filesz 0x00001a48 memsz 0x00001a48 flags rw-
    LOAD off    0x000089a8 vaddr 0x000289a8 paddr 0x000289a8 align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005314  000201b4  000201b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  000254c8  000254c8  000064c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a48  00025518  00026f60  00006518  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  000289a8  000289a8  000089a8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00007f60  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000008d8  00000000  00000000  00007f88  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000d1a  00000000  00000000  00008860  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001957d  00000000  00000000  0000957a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004dcc  00000000  00000000  00022af7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c5c6  00000000  00000000  000278c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000fcc  00000000  00000000  00033e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000171c  00000000  00000000  00034e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003e18  00000000  00000000  00036574  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0003a38c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  0003a3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003c9f7  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0003c9fa  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003c9ff  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003ca00  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0003ca01  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0003ca0c  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0003ca17  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0003ca22  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000037  00000000  00000000  0003ca2d  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0003d805  00000000  00000000  0003ca64  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
000201b4 l    d  .text	00000000 .text
000254c8 l    d  .rodata	00000000 .rodata
00025518 l    d  .rwdata	00000000 .rwdata
000289a8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000201ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00025518 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00021b5c l     F .text	00000058 std
00021c68 l     F .text	00000008 __fp_lock
00021c70 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00022ca0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00022d00 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00022e04 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00022f28 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00023008 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00023168 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00023398 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00026f50 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00023650 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00025ec8 l     O .rwdata	00001060 jtag_uart_0
00023728 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00023968 l     F .text	00000228 altera_avalon_jtag_uart_irq
00023b90 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00024430 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00024840 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00024990 l     F .text	000000f8 alt_file_locked
00024c14 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000252b0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00025464 l     F .text	00000040 alt_sim_halt
00022a08 g     F .text	00000070 _isatty_r
000231c8 g     F .text	0000006c alt_main
00020224 g     F .text	000000a0 _puts_r
000289f8 g     O .bss	00000100 alt_irq
00022a78 g     F .text	00000078 _lseek_r
00026f60 g       *ABS*	00000000 __flash_rwdata_start
00028c88 g       *ABS*	00000000 __alt_heap_start
00022644 g     F .text	00000068 __sseek
00021bc4 g     F .text	000000a4 __sinit
00021cc4 g     F .text	0000009c __sfmoreglue
00023254 g     F .text	00000020 __malloc_unlock
000210ac g     F .text	000000e0 memmove
00021cb4 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00022994 g     F .text	00000074 _fstat_r
000289b4 g     O .bss	00000004 errno
000289bc g     O .bss	00000004 alt_argv
0002ef28 g       *ABS*	00000000 _gp
00025d48 g     O .rwdata	00000180 alt_fd_list
00024e38 g     F .text	00000094 alt_find_dev
0002100c g     F .text	000000a0 memcpy
00021ca8 g     F .text	0000000c _cleanup_r
00024918 g     F .text	00000078 alt_io_redirect
000254c8 g       *ABS*	00000000 __DTOR_END__
000202c4 g     F .text	00000014 puts
00023da8 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00022e64 g     F .text	000000c4 isatty
000289a8 g     O .bss	00000004 __malloc_top_pad
0002034c g     F .text	0000049c __sfvwrite_r
00021780 g     F .text	00000070 _sbrk_r
00022af0 g     F .text	00000078 _read_r
00026f48 g     O .rwdata	00000004 alt_max_fd
00022870 g     F .text	00000110 _fclose_r
00021b28 g     F .text	00000034 fflush
000289ac g     O .bss	00000004 __malloc_max_sbrked_mem
00023074 g     F .text	000000f4 lseek
00026f2c g     O .rwdata	00000004 _global_impure_ptr
0002118c g     F .text	000005f4 _realloc_r
00028c88 g       *ABS*	00000000 __bss_end
00024748 g     F .text	000000f8 alt_iic_isr_register
00024d0c g     F .text	0000010c alt_tick
00021c90 g     F .text	00000018 __fp_lock_all
00024700 g     F .text	00000048 alt_ic_irq_enabled
00024c74 g     F .text	00000098 alt_alarm_stop
000289c4 g     O .bss	00000004 alt_irq_active
000200ec g     F .exceptions	000000c8 alt_irq_handler
00025d20 g     O .rwdata	00000028 alt_dev_null
00024360 g     F .text	0000001c alt_dcache_flush_all
00026f60 g       *ABS*	00000000 __ram_rwdata_end
00026f40 g     O .rwdata	00000008 alt_dev_list
0002352c g     F .text	00000124 write
00025518 g       *ABS*	00000000 __ram_rodata_end
00022d2c g     F .text	000000d8 fstat
00028c88 g       *ABS*	00000000 end
000238a8 g     F .text	000000c0 altera_avalon_jtag_uart_init
000254c4 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
00023fcc g     F .text	00000240 altera_avalon_jtag_uart_write
00021bb4 g     F .text	00000004 __sfp_lock_acquire
00020f28 g     F .text	000000e4 memchr
00021f7c g     F .text	00000314 _free_r
000252b4 g     F .text	000001b0 __call_exitprocs
00026f34 g     O .rwdata	00000004 __malloc_sbrk_base
000201b4 g     F .text	0000003c _start
000289c8 g     O .bss	00000004 _alt_tick_rate
000289cc g     O .bss	00000004 _alt_nticks
00023274 g     F .text	00000124 read
000236e4 g     F .text	00000044 alt_sys_init
0002517c g     F .text	00000134 __register_exitproc
00023c40 g     F .text	00000074 altera_avalon_jtag_uart_close
00022b68 g     F .text	00000038 __mulsi3
00025518 g       *ABS*	00000000 __ram_rwdata_start
000254c8 g       *ABS*	00000000 __ram_rodata_start
000289d0 g     O .bss	00000028 __malloc_current_mallinfo
00023760 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00024fec g     F .text	000000d0 alt_get_fd
00022800 g     F .text	00000070 _close_r
00025108 g     F .text	00000074 memcmp
00023810 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00028c88 g       *ABS*	00000000 __alt_stack_base
00023858 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
000217f0 g     F .text	0000013c __swsetup_r
00021d60 g     F .text	000000f0 __sfp
00025918 g     O .rwdata	00000408 __malloc_av_
00021bc0 g     F .text	00000004 __sinit_lock_release
00022728 g     F .text	00000060 __sread
00024ecc g     F .text	00000120 alt_find_file
0002437c g     F .text	000000b4 alt_dev_llist_insert
00023234 g     F .text	00000020 __malloc_lock
00023470 g     F .text	000000bc sbrk
0002192c g     F .text	000001fc _fflush_r
000289a8 g       *ABS*	00000000 __bss_start
000225a4 g     F .text	00000098 memset
000201f0 g     F .text	00000034 main
000289c0 g     O .bss	00000004 alt_envp
000289b0 g     O .bss	00000004 __malloc_max_total_mem
000237b8 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0002263c g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
00022980 g     F .text	00000014 fclose
00028af8 g     O .bss	00000190 _atexit0
000207e8 g     F .text	00000740 _malloc_r
00026f4c g     O .rwdata	00000004 alt_errno
00022358 g     F .text	000000b8 _fwalk
00021e50 g     F .text	0000012c _malloc_trim_r
000254c8 g       *ABS*	00000000 __CTOR_END__
000254c8 g       *ABS*	00000000 __flash_rodata_start
000254c8 g       *ABS*	00000000 __DTOR_LIST__
000236b0 g     F .text	00000034 alt_irq_init
000233f8 g     F .text	00000078 alt_release_fd
000250bc g     F .text	00000014 atexit
00022788 g     F .text	00000078 _write_r
00026f28 g     O .rwdata	00000004 _impure_ptr
000289b8 g     O .bss	00000004 alt_argc
000244f4 g     F .text	00000064 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00021c78 g     F .text	00000018 __fp_unlock_all
00026f38 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00024574 g     F .text	00000050 alt_ic_isr_register
00026f60 g       *ABS*	00000000 _edata
00028c88 g       *ABS*	00000000 _end
000201b4 g       *ABS*	00000000 __ram_exceptions_end
00023cb4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00024660 g     F .text	000000a0 alt_ic_irq_disable
000226ac g     F .text	0000007c __swrite
00026f30 g     O .rwdata	00000004 __malloc_trim_threshold
00024e18 g     F .text	00000020 altera_nios2_qsys_irq_init
000250d0 g     F .text	00000038 exit
00022290 g     F .text	000000c8 _fwalk_reent
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00021bb8 g     F .text	00000004 __sfp_lock_release
000254a4 g     F .text	00000020 _exit
0002420c g     F .text	00000154 alt_alarm_start
00022410 g     F .text	00000194 __smakebuf_r
000202d8 g     F .text	00000074 strlen
00024a88 g     F .text	0000018c open
00024558 g     F .text	0000001c alt_icache_flush_all
00026f54 g     O .rwdata	00000004 alt_priority_mask
000245c4 g     F .text	0000009c alt_ic_irq_enable
00026f58 g     O .rwdata	00000008 alt_alarm_list
00024490 g     F .text	00000064 _do_ctors
00022ba0 g     F .text	00000100 close
00022f88 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00021bbc g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08406d14 	ori	at,at,436
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   20044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200ec0 	call	200ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000306 	br	20098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   2008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   20094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   20098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   2009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   200c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   200e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200e8:	ef80083a 	eret

000200ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200ec:	defff904 	addi	sp,sp,-28
   200f0:	dfc00615 	stw	ra,24(sp)
   200f4:	df000515 	stw	fp,20(sp)
   200f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   200fc:	0005313a 	rdctl	r2,ipending
   20100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   20104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   20108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   2010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20110:	00800044 	movi	r2,1
   20114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   20118:	e0ffff17 	ldw	r3,-4(fp)
   2011c:	e0bffe17 	ldw	r2,-8(fp)
   20120:	1884703a 	and	r2,r3,r2
   20124:	1005003a 	cmpeq	r2,r2,zero
   20128:	1000161e 	bne	r2,zero,20184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2012c:	e0bffd17 	ldw	r2,-12(fp)
   20130:	00c000f4 	movhi	r3,3
   20134:	18e27e04 	addi	r3,r3,-30216
   20138:	100490fa 	slli	r2,r2,3
   2013c:	10c5883a 	add	r2,r2,r3
   20140:	11400017 	ldw	r5,0(r2)
   20144:	e0bffd17 	ldw	r2,-12(fp)
   20148:	00c000f4 	movhi	r3,3
   2014c:	18e27e04 	addi	r3,r3,-30216
   20150:	100490fa 	slli	r2,r2,3
   20154:	10c5883a 	add	r2,r2,r3
   20158:	10800104 	addi	r2,r2,4
   2015c:	11000017 	ldw	r4,0(r2)
   20160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20164:	0005313a 	rdctl	r2,ipending
   20168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   2016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   20170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   20174:	e0bfff17 	ldw	r2,-4(fp)
   20178:	1004c03a 	cmpne	r2,r2,zero
   2017c:	103fe31e 	bne	r2,zero,2010c <alt_irq_handler+0x20>
   20180:	00000706 	br	201a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   20184:	e0bffe17 	ldw	r2,-8(fp)
   20188:	1085883a 	add	r2,r2,r2
   2018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   20190:	e0bffd17 	ldw	r2,-12(fp)
   20194:	10800044 	addi	r2,r2,1
   20198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   2019c:	003fde06 	br	20118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   201a0:	e037883a 	mov	sp,fp
   201a4:	dfc00117 	ldw	ra,4(sp)
   201a8:	df000017 	ldw	fp,0(sp)
   201ac:	dec00204 	addi	sp,sp,8
   201b0:	f800283a 	ret

Disassembly of section .text:

000201b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   201b4:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   201b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   201bc:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   201c0:	d6bbca14 	ori	gp,gp,61224
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   201c4:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   201c8:	10a26a14 	ori	r2,r2,35240

    movhi r3, %hi(__bss_end)
   201cc:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   201d0:	18e32214 	ori	r3,r3,35976

    beq r2, r3, 1f
   201d4:	10c00326 	beq	r2,r3,201e4 <_start+0x30>

0:
    stw zero, (r2)
   201d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   201dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   201e0:	10fffd36 	bltu	r2,r3,201d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   201e4:	0022f880 	call	22f88 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   201e8:	00231c80 	call	231c8 <alt_main>

000201ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   201ec:	003fff06 	br	201ec <alt_after_alt_main>

000201f0 <main>:
 */

#include <stdio.h>

int main()
{
   201f0:	defffe04 	addi	sp,sp,-8
   201f4:	dfc00115 	stw	ra,4(sp)
   201f8:	df000015 	stw	fp,0(sp)
   201fc:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
   20200:	010000b4 	movhi	r4,2
   20204:	21153204 	addi	r4,r4,21704
   20208:	00202c40 	call	202c4 <puts>

  return 0;
   2020c:	0005883a 	mov	r2,zero
}
   20210:	e037883a 	mov	sp,fp
   20214:	dfc00117 	ldw	ra,4(sp)
   20218:	df000017 	ldw	fp,0(sp)
   2021c:	dec00204 	addi	sp,sp,8
   20220:	f800283a 	ret

00020224 <_puts_r>:
   20224:	defff604 	addi	sp,sp,-40
   20228:	dc400715 	stw	r17,28(sp)
   2022c:	2023883a 	mov	r17,r4
   20230:	2809883a 	mov	r4,r5
   20234:	dfc00915 	stw	ra,36(sp)
   20238:	dcc00815 	stw	r19,32(sp)
   2023c:	2827883a 	mov	r19,r5
   20240:	00202d80 	call	202d8 <strlen>
   20244:	89400217 	ldw	r5,8(r17)
   20248:	00c000b4 	movhi	r3,2
   2024c:	18d53704 	addi	r3,r3,21724
   20250:	01c00044 	movi	r7,1
   20254:	12000044 	addi	r8,r2,1
   20258:	d8c00515 	stw	r3,20(sp)
   2025c:	d9c00615 	stw	r7,24(sp)
   20260:	d8c00304 	addi	r3,sp,12
   20264:	01c00084 	movi	r7,2
   20268:	8809883a 	mov	r4,r17
   2026c:	d80d883a 	mov	r6,sp
   20270:	d8c00015 	stw	r3,0(sp)
   20274:	dcc00315 	stw	r19,12(sp)
   20278:	da000215 	stw	r8,8(sp)
   2027c:	d9c00115 	stw	r7,4(sp)
   20280:	d8800415 	stw	r2,16(sp)
   20284:	002034c0 	call	2034c <__sfvwrite_r>
   20288:	00ffffc4 	movi	r3,-1
   2028c:	10000626 	beq	r2,zero,202a8 <_puts_r+0x84>
   20290:	1805883a 	mov	r2,r3
   20294:	dfc00917 	ldw	ra,36(sp)
   20298:	dcc00817 	ldw	r19,32(sp)
   2029c:	dc400717 	ldw	r17,28(sp)
   202a0:	dec00a04 	addi	sp,sp,40
   202a4:	f800283a 	ret
   202a8:	00c00284 	movi	r3,10
   202ac:	1805883a 	mov	r2,r3
   202b0:	dfc00917 	ldw	ra,36(sp)
   202b4:	dcc00817 	ldw	r19,32(sp)
   202b8:	dc400717 	ldw	r17,28(sp)
   202bc:	dec00a04 	addi	sp,sp,40
   202c0:	f800283a 	ret

000202c4 <puts>:
   202c4:	008000b4 	movhi	r2,2
   202c8:	109bca04 	addi	r2,r2,28456
   202cc:	200b883a 	mov	r5,r4
   202d0:	11000017 	ldw	r4,0(r2)
   202d4:	00202241 	jmpi	20224 <_puts_r>

000202d8 <strlen>:
   202d8:	208000cc 	andi	r2,r4,3
   202dc:	2011883a 	mov	r8,r4
   202e0:	1000161e 	bne	r2,zero,2033c <strlen+0x64>
   202e4:	20c00017 	ldw	r3,0(r4)
   202e8:	017fbff4 	movhi	r5,65279
   202ec:	297fbfc4 	addi	r5,r5,-257
   202f0:	01e02074 	movhi	r7,32897
   202f4:	39e02004 	addi	r7,r7,-32640
   202f8:	1945883a 	add	r2,r3,r5
   202fc:	11c4703a 	and	r2,r2,r7
   20300:	00c6303a 	nor	r3,zero,r3
   20304:	1886703a 	and	r3,r3,r2
   20308:	18000c1e 	bne	r3,zero,2033c <strlen+0x64>
   2030c:	280d883a 	mov	r6,r5
   20310:	380b883a 	mov	r5,r7
   20314:	21000104 	addi	r4,r4,4
   20318:	20800017 	ldw	r2,0(r4)
   2031c:	1187883a 	add	r3,r2,r6
   20320:	1946703a 	and	r3,r3,r5
   20324:	0084303a 	nor	r2,zero,r2
   20328:	10c4703a 	and	r2,r2,r3
   2032c:	103ff926 	beq	r2,zero,20314 <strlen+0x3c>
   20330:	20800007 	ldb	r2,0(r4)
   20334:	10000326 	beq	r2,zero,20344 <strlen+0x6c>
   20338:	21000044 	addi	r4,r4,1
   2033c:	20800007 	ldb	r2,0(r4)
   20340:	103ffd1e 	bne	r2,zero,20338 <strlen+0x60>
   20344:	2205c83a 	sub	r2,r4,r8
   20348:	f800283a 	ret

0002034c <__sfvwrite_r>:
   2034c:	30800217 	ldw	r2,8(r6)
   20350:	defff504 	addi	sp,sp,-44
   20354:	df000915 	stw	fp,36(sp)
   20358:	dd800715 	stw	r22,28(sp)
   2035c:	dc800315 	stw	r18,12(sp)
   20360:	dfc00a15 	stw	ra,40(sp)
   20364:	ddc00815 	stw	r23,32(sp)
   20368:	dd400615 	stw	r21,24(sp)
   2036c:	dd000515 	stw	r20,20(sp)
   20370:	dcc00415 	stw	r19,16(sp)
   20374:	dc400215 	stw	r17,8(sp)
   20378:	dc000115 	stw	r16,4(sp)
   2037c:	302d883a 	mov	r22,r6
   20380:	2039883a 	mov	fp,r4
   20384:	2825883a 	mov	r18,r5
   20388:	10001c26 	beq	r2,zero,203fc <__sfvwrite_r+0xb0>
   2038c:	29c0030b 	ldhu	r7,12(r5)
   20390:	3880020c 	andi	r2,r7,8
   20394:	10002726 	beq	r2,zero,20434 <__sfvwrite_r+0xe8>
   20398:	28800417 	ldw	r2,16(r5)
   2039c:	10002526 	beq	r2,zero,20434 <__sfvwrite_r+0xe8>
   203a0:	3880008c 	andi	r2,r7,2
   203a4:	b5400017 	ldw	r21,0(r22)
   203a8:	10002826 	beq	r2,zero,2044c <__sfvwrite_r+0x100>
   203ac:	0021883a 	mov	r16,zero
   203b0:	0023883a 	mov	r17,zero
   203b4:	880d883a 	mov	r6,r17
   203b8:	e009883a 	mov	r4,fp
   203bc:	00810004 	movi	r2,1024
   203c0:	80006e26 	beq	r16,zero,2057c <__sfvwrite_r+0x230>
   203c4:	800f883a 	mov	r7,r16
   203c8:	91400717 	ldw	r5,28(r18)
   203cc:	1400012e 	bgeu	r2,r16,203d4 <__sfvwrite_r+0x88>
   203d0:	100f883a 	mov	r7,r2
   203d4:	90c00917 	ldw	r3,36(r18)
   203d8:	183ee83a 	callr	r3
   203dc:	1007883a 	mov	r3,r2
   203e0:	80a1c83a 	sub	r16,r16,r2
   203e4:	88a3883a 	add	r17,r17,r2
   203e8:	00806d0e 	bge	zero,r2,205a0 <__sfvwrite_r+0x254>
   203ec:	b0800217 	ldw	r2,8(r22)
   203f0:	10c5c83a 	sub	r2,r2,r3
   203f4:	b0800215 	stw	r2,8(r22)
   203f8:	103fee1e 	bne	r2,zero,203b4 <__sfvwrite_r+0x68>
   203fc:	0009883a 	mov	r4,zero
   20400:	2005883a 	mov	r2,r4
   20404:	dfc00a17 	ldw	ra,40(sp)
   20408:	df000917 	ldw	fp,36(sp)
   2040c:	ddc00817 	ldw	r23,32(sp)
   20410:	dd800717 	ldw	r22,28(sp)
   20414:	dd400617 	ldw	r21,24(sp)
   20418:	dd000517 	ldw	r20,20(sp)
   2041c:	dcc00417 	ldw	r19,16(sp)
   20420:	dc800317 	ldw	r18,12(sp)
   20424:	dc400217 	ldw	r17,8(sp)
   20428:	dc000117 	ldw	r16,4(sp)
   2042c:	dec00b04 	addi	sp,sp,44
   20430:	f800283a 	ret
   20434:	00217f00 	call	217f0 <__swsetup_r>
   20438:	1000e41e 	bne	r2,zero,207cc <__sfvwrite_r+0x480>
   2043c:	91c0030b 	ldhu	r7,12(r18)
   20440:	b5400017 	ldw	r21,0(r22)
   20444:	3880008c 	andi	r2,r7,2
   20448:	103fd81e 	bne	r2,zero,203ac <__sfvwrite_r+0x60>
   2044c:	3880004c 	andi	r2,r7,1
   20450:	1005003a 	cmpeq	r2,r2,zero
   20454:	10005726 	beq	r2,zero,205b4 <__sfvwrite_r+0x268>
   20458:	0029883a 	mov	r20,zero
   2045c:	002f883a 	mov	r23,zero
   20460:	a0004226 	beq	r20,zero,2056c <__sfvwrite_r+0x220>
   20464:	3880800c 	andi	r2,r7,512
   20468:	94000217 	ldw	r16,8(r18)
   2046c:	10008b26 	beq	r2,zero,2069c <__sfvwrite_r+0x350>
   20470:	800d883a 	mov	r6,r16
   20474:	a400a536 	bltu	r20,r16,2070c <__sfvwrite_r+0x3c0>
   20478:	3881200c 	andi	r2,r7,1152
   2047c:	10002726 	beq	r2,zero,2051c <__sfvwrite_r+0x1d0>
   20480:	90800517 	ldw	r2,20(r18)
   20484:	92000417 	ldw	r8,16(r18)
   20488:	91400017 	ldw	r5,0(r18)
   2048c:	1087883a 	add	r3,r2,r2
   20490:	1887883a 	add	r3,r3,r2
   20494:	1808d7fa 	srli	r4,r3,31
   20498:	2a21c83a 	sub	r16,r5,r8
   2049c:	80800044 	addi	r2,r16,1
   204a0:	20c9883a 	add	r4,r4,r3
   204a4:	2027d07a 	srai	r19,r4,1
   204a8:	a085883a 	add	r2,r20,r2
   204ac:	980d883a 	mov	r6,r19
   204b0:	9880022e 	bgeu	r19,r2,204bc <__sfvwrite_r+0x170>
   204b4:	1027883a 	mov	r19,r2
   204b8:	100d883a 	mov	r6,r2
   204bc:	3881000c 	andi	r2,r7,1024
   204c0:	1000b826 	beq	r2,zero,207a4 <__sfvwrite_r+0x458>
   204c4:	300b883a 	mov	r5,r6
   204c8:	e009883a 	mov	r4,fp
   204cc:	00207e80 	call	207e8 <_malloc_r>
   204d0:	10003126 	beq	r2,zero,20598 <__sfvwrite_r+0x24c>
   204d4:	91400417 	ldw	r5,16(r18)
   204d8:	1009883a 	mov	r4,r2
   204dc:	800d883a 	mov	r6,r16
   204e0:	1023883a 	mov	r17,r2
   204e4:	002100c0 	call	2100c <memcpy>
   204e8:	90c0030b 	ldhu	r3,12(r18)
   204ec:	00beffc4 	movi	r2,-1025
   204f0:	1886703a 	and	r3,r3,r2
   204f4:	18c02014 	ori	r3,r3,128
   204f8:	90c0030d 	sth	r3,12(r18)
   204fc:	9c07c83a 	sub	r3,r19,r16
   20500:	8c05883a 	add	r2,r17,r16
   20504:	a00d883a 	mov	r6,r20
   20508:	a021883a 	mov	r16,r20
   2050c:	90800015 	stw	r2,0(r18)
   20510:	90c00215 	stw	r3,8(r18)
   20514:	94400415 	stw	r17,16(r18)
   20518:	94c00515 	stw	r19,20(r18)
   2051c:	91000017 	ldw	r4,0(r18)
   20520:	b80b883a 	mov	r5,r23
   20524:	a023883a 	mov	r17,r20
   20528:	00210ac0 	call	210ac <memmove>
   2052c:	90c00217 	ldw	r3,8(r18)
   20530:	90800017 	ldw	r2,0(r18)
   20534:	a027883a 	mov	r19,r20
   20538:	1c07c83a 	sub	r3,r3,r16
   2053c:	1405883a 	add	r2,r2,r16
   20540:	90c00215 	stw	r3,8(r18)
   20544:	a021883a 	mov	r16,r20
   20548:	90800015 	stw	r2,0(r18)
   2054c:	b0800217 	ldw	r2,8(r22)
   20550:	1405c83a 	sub	r2,r2,r16
   20554:	b0800215 	stw	r2,8(r22)
   20558:	103fa826 	beq	r2,zero,203fc <__sfvwrite_r+0xb0>
   2055c:	a469c83a 	sub	r20,r20,r17
   20560:	91c0030b 	ldhu	r7,12(r18)
   20564:	bcef883a 	add	r23,r23,r19
   20568:	a03fbe1e 	bne	r20,zero,20464 <__sfvwrite_r+0x118>
   2056c:	adc00017 	ldw	r23,0(r21)
   20570:	ad000117 	ldw	r20,4(r21)
   20574:	ad400204 	addi	r21,r21,8
   20578:	003fb906 	br	20460 <__sfvwrite_r+0x114>
   2057c:	ac400017 	ldw	r17,0(r21)
   20580:	ac000117 	ldw	r16,4(r21)
   20584:	ad400204 	addi	r21,r21,8
   20588:	003f8a06 	br	203b4 <__sfvwrite_r+0x68>
   2058c:	91400417 	ldw	r5,16(r18)
   20590:	e009883a 	mov	r4,fp
   20594:	0021f7c0 	call	21f7c <_free_r>
   20598:	00800304 	movi	r2,12
   2059c:	e0800015 	stw	r2,0(fp)
   205a0:	9080030b 	ldhu	r2,12(r18)
   205a4:	013fffc4 	movi	r4,-1
   205a8:	10801014 	ori	r2,r2,64
   205ac:	9080030d 	sth	r2,12(r18)
   205b0:	003f9306 	br	20400 <__sfvwrite_r+0xb4>
   205b4:	0027883a 	mov	r19,zero
   205b8:	002f883a 	mov	r23,zero
   205bc:	d8000015 	stw	zero,0(sp)
   205c0:	0029883a 	mov	r20,zero
   205c4:	98001e26 	beq	r19,zero,20640 <__sfvwrite_r+0x2f4>
   205c8:	d8c00017 	ldw	r3,0(sp)
   205cc:	1804c03a 	cmpne	r2,r3,zero
   205d0:	10005e26 	beq	r2,zero,2074c <__sfvwrite_r+0x400>
   205d4:	9821883a 	mov	r16,r19
   205d8:	a4c0012e 	bgeu	r20,r19,205e0 <__sfvwrite_r+0x294>
   205dc:	a021883a 	mov	r16,r20
   205e0:	91000017 	ldw	r4,0(r18)
   205e4:	90800417 	ldw	r2,16(r18)
   205e8:	91800217 	ldw	r6,8(r18)
   205ec:	91c00517 	ldw	r7,20(r18)
   205f0:	1100022e 	bgeu	r2,r4,205fc <__sfvwrite_r+0x2b0>
   205f4:	31e3883a 	add	r17,r6,r7
   205f8:	8c001616 	blt	r17,r16,20654 <__sfvwrite_r+0x308>
   205fc:	81c03816 	blt	r16,r7,206e0 <__sfvwrite_r+0x394>
   20600:	90c00917 	ldw	r3,36(r18)
   20604:	91400717 	ldw	r5,28(r18)
   20608:	e009883a 	mov	r4,fp
   2060c:	b80d883a 	mov	r6,r23
   20610:	183ee83a 	callr	r3
   20614:	1023883a 	mov	r17,r2
   20618:	00bfe10e 	bge	zero,r2,205a0 <__sfvwrite_r+0x254>
   2061c:	a469c83a 	sub	r20,r20,r17
   20620:	a0001826 	beq	r20,zero,20684 <__sfvwrite_r+0x338>
   20624:	b0800217 	ldw	r2,8(r22)
   20628:	1445c83a 	sub	r2,r2,r17
   2062c:	b0800215 	stw	r2,8(r22)
   20630:	103f7226 	beq	r2,zero,203fc <__sfvwrite_r+0xb0>
   20634:	9c67c83a 	sub	r19,r19,r17
   20638:	bc6f883a 	add	r23,r23,r17
   2063c:	983fe21e 	bne	r19,zero,205c8 <__sfvwrite_r+0x27c>
   20640:	adc00017 	ldw	r23,0(r21)
   20644:	acc00117 	ldw	r19,4(r21)
   20648:	ad400204 	addi	r21,r21,8
   2064c:	d8000015 	stw	zero,0(sp)
   20650:	003fdc06 	br	205c4 <__sfvwrite_r+0x278>
   20654:	b80b883a 	mov	r5,r23
   20658:	880d883a 	mov	r6,r17
   2065c:	00210ac0 	call	210ac <memmove>
   20660:	90c00017 	ldw	r3,0(r18)
   20664:	e009883a 	mov	r4,fp
   20668:	900b883a 	mov	r5,r18
   2066c:	1c47883a 	add	r3,r3,r17
   20670:	90c00015 	stw	r3,0(r18)
   20674:	002192c0 	call	2192c <_fflush_r>
   20678:	103fc91e 	bne	r2,zero,205a0 <__sfvwrite_r+0x254>
   2067c:	a469c83a 	sub	r20,r20,r17
   20680:	a03fe81e 	bne	r20,zero,20624 <__sfvwrite_r+0x2d8>
   20684:	e009883a 	mov	r4,fp
   20688:	900b883a 	mov	r5,r18
   2068c:	002192c0 	call	2192c <_fflush_r>
   20690:	103fc31e 	bne	r2,zero,205a0 <__sfvwrite_r+0x254>
   20694:	d8000015 	stw	zero,0(sp)
   20698:	003fe206 	br	20624 <__sfvwrite_r+0x2d8>
   2069c:	91000017 	ldw	r4,0(r18)
   206a0:	90800417 	ldw	r2,16(r18)
   206a4:	1100022e 	bgeu	r2,r4,206b0 <__sfvwrite_r+0x364>
   206a8:	8023883a 	mov	r17,r16
   206ac:	85003136 	bltu	r16,r20,20774 <__sfvwrite_r+0x428>
   206b0:	91c00517 	ldw	r7,20(r18)
   206b4:	a1c01836 	bltu	r20,r7,20718 <__sfvwrite_r+0x3cc>
   206b8:	90c00917 	ldw	r3,36(r18)
   206bc:	91400717 	ldw	r5,28(r18)
   206c0:	e009883a 	mov	r4,fp
   206c4:	b80d883a 	mov	r6,r23
   206c8:	183ee83a 	callr	r3
   206cc:	1021883a 	mov	r16,r2
   206d0:	00bfb30e 	bge	zero,r2,205a0 <__sfvwrite_r+0x254>
   206d4:	1023883a 	mov	r17,r2
   206d8:	1027883a 	mov	r19,r2
   206dc:	003f9b06 	br	2054c <__sfvwrite_r+0x200>
   206e0:	b80b883a 	mov	r5,r23
   206e4:	800d883a 	mov	r6,r16
   206e8:	00210ac0 	call	210ac <memmove>
   206ec:	90c00217 	ldw	r3,8(r18)
   206f0:	90800017 	ldw	r2,0(r18)
   206f4:	8023883a 	mov	r17,r16
   206f8:	1c07c83a 	sub	r3,r3,r16
   206fc:	1405883a 	add	r2,r2,r16
   20700:	90c00215 	stw	r3,8(r18)
   20704:	90800015 	stw	r2,0(r18)
   20708:	003fc406 	br	2061c <__sfvwrite_r+0x2d0>
   2070c:	a00d883a 	mov	r6,r20
   20710:	a021883a 	mov	r16,r20
   20714:	003f8106 	br	2051c <__sfvwrite_r+0x1d0>
   20718:	b80b883a 	mov	r5,r23
   2071c:	a00d883a 	mov	r6,r20
   20720:	00210ac0 	call	210ac <memmove>
   20724:	90c00217 	ldw	r3,8(r18)
   20728:	90800017 	ldw	r2,0(r18)
   2072c:	a021883a 	mov	r16,r20
   20730:	1d07c83a 	sub	r3,r3,r20
   20734:	1505883a 	add	r2,r2,r20
   20738:	a023883a 	mov	r17,r20
   2073c:	a027883a 	mov	r19,r20
   20740:	90c00215 	stw	r3,8(r18)
   20744:	90800015 	stw	r2,0(r18)
   20748:	003f8006 	br	2054c <__sfvwrite_r+0x200>
   2074c:	b809883a 	mov	r4,r23
   20750:	01400284 	movi	r5,10
   20754:	980d883a 	mov	r6,r19
   20758:	0020f280 	call	20f28 <memchr>
   2075c:	10001726 	beq	r2,zero,207bc <__sfvwrite_r+0x470>
   20760:	15c5c83a 	sub	r2,r2,r23
   20764:	15000044 	addi	r20,r2,1
   20768:	00800044 	movi	r2,1
   2076c:	d8800015 	stw	r2,0(sp)
   20770:	003f9806 	br	205d4 <__sfvwrite_r+0x288>
   20774:	b80b883a 	mov	r5,r23
   20778:	800d883a 	mov	r6,r16
   2077c:	00210ac0 	call	210ac <memmove>
   20780:	90c00017 	ldw	r3,0(r18)
   20784:	e009883a 	mov	r4,fp
   20788:	900b883a 	mov	r5,r18
   2078c:	1c07883a 	add	r3,r3,r16
   20790:	90c00015 	stw	r3,0(r18)
   20794:	8027883a 	mov	r19,r16
   20798:	002192c0 	call	2192c <_fflush_r>
   2079c:	103f6b26 	beq	r2,zero,2054c <__sfvwrite_r+0x200>
   207a0:	003f7f06 	br	205a0 <__sfvwrite_r+0x254>
   207a4:	400b883a 	mov	r5,r8
   207a8:	e009883a 	mov	r4,fp
   207ac:	002118c0 	call	2118c <_realloc_r>
   207b0:	103f7626 	beq	r2,zero,2058c <__sfvwrite_r+0x240>
   207b4:	1023883a 	mov	r17,r2
   207b8:	003f5006 	br	204fc <__sfvwrite_r+0x1b0>
   207bc:	00c00044 	movi	r3,1
   207c0:	9d000044 	addi	r20,r19,1
   207c4:	d8c00015 	stw	r3,0(sp)
   207c8:	003f8206 	br	205d4 <__sfvwrite_r+0x288>
   207cc:	9080030b 	ldhu	r2,12(r18)
   207d0:	00c00244 	movi	r3,9
   207d4:	013fffc4 	movi	r4,-1
   207d8:	10801014 	ori	r2,r2,64
   207dc:	9080030d 	sth	r2,12(r18)
   207e0:	e0c00015 	stw	r3,0(fp)
   207e4:	003f0606 	br	20400 <__sfvwrite_r+0xb4>

000207e8 <_malloc_r>:
   207e8:	defff604 	addi	sp,sp,-40
   207ec:	28c002c4 	addi	r3,r5,11
   207f0:	00800584 	movi	r2,22
   207f4:	dc800215 	stw	r18,8(sp)
   207f8:	dfc00915 	stw	ra,36(sp)
   207fc:	df000815 	stw	fp,32(sp)
   20800:	ddc00715 	stw	r23,28(sp)
   20804:	dd800615 	stw	r22,24(sp)
   20808:	dd400515 	stw	r21,20(sp)
   2080c:	dd000415 	stw	r20,16(sp)
   20810:	dcc00315 	stw	r19,12(sp)
   20814:	dc400115 	stw	r17,4(sp)
   20818:	dc000015 	stw	r16,0(sp)
   2081c:	2025883a 	mov	r18,r4
   20820:	10c01236 	bltu	r2,r3,2086c <_malloc_r+0x84>
   20824:	04400404 	movi	r17,16
   20828:	8940142e 	bgeu	r17,r5,2087c <_malloc_r+0x94>
   2082c:	00800304 	movi	r2,12
   20830:	0007883a 	mov	r3,zero
   20834:	90800015 	stw	r2,0(r18)
   20838:	1805883a 	mov	r2,r3
   2083c:	dfc00917 	ldw	ra,36(sp)
   20840:	df000817 	ldw	fp,32(sp)
   20844:	ddc00717 	ldw	r23,28(sp)
   20848:	dd800617 	ldw	r22,24(sp)
   2084c:	dd400517 	ldw	r21,20(sp)
   20850:	dd000417 	ldw	r20,16(sp)
   20854:	dcc00317 	ldw	r19,12(sp)
   20858:	dc800217 	ldw	r18,8(sp)
   2085c:	dc400117 	ldw	r17,4(sp)
   20860:	dc000017 	ldw	r16,0(sp)
   20864:	dec00a04 	addi	sp,sp,40
   20868:	f800283a 	ret
   2086c:	00bffe04 	movi	r2,-8
   20870:	18a2703a 	and	r17,r3,r2
   20874:	883fed16 	blt	r17,zero,2082c <_malloc_r+0x44>
   20878:	897fec36 	bltu	r17,r5,2082c <_malloc_r+0x44>
   2087c:	9009883a 	mov	r4,r18
   20880:	00232340 	call	23234 <__malloc_lock>
   20884:	00807dc4 	movi	r2,503
   20888:	14402b2e 	bgeu	r2,r17,20938 <_malloc_r+0x150>
   2088c:	8806d27a 	srli	r3,r17,9
   20890:	18003f1e 	bne	r3,zero,20990 <_malloc_r+0x1a8>
   20894:	880cd0fa 	srli	r6,r17,3
   20898:	300490fa 	slli	r2,r6,3
   2089c:	02c000b4 	movhi	r11,2
   208a0:	5ad64604 	addi	r11,r11,22808
   208a4:	12cb883a 	add	r5,r2,r11
   208a8:	2c000317 	ldw	r16,12(r5)
   208ac:	580f883a 	mov	r7,r11
   208b0:	2c00041e 	bne	r5,r16,208c4 <_malloc_r+0xdc>
   208b4:	00000a06 	br	208e0 <_malloc_r+0xf8>
   208b8:	1800860e 	bge	r3,zero,20ad4 <_malloc_r+0x2ec>
   208bc:	84000317 	ldw	r16,12(r16)
   208c0:	2c000726 	beq	r5,r16,208e0 <_malloc_r+0xf8>
   208c4:	80800117 	ldw	r2,4(r16)
   208c8:	00ffff04 	movi	r3,-4
   208cc:	10c8703a 	and	r4,r2,r3
   208d0:	2447c83a 	sub	r3,r4,r17
   208d4:	008003c4 	movi	r2,15
   208d8:	10fff70e 	bge	r2,r3,208b8 <_malloc_r+0xd0>
   208dc:	31bfffc4 	addi	r6,r6,-1
   208e0:	32400044 	addi	r9,r6,1
   208e4:	028000b4 	movhi	r10,2
   208e8:	52964804 	addi	r10,r10,22816
   208ec:	54000217 	ldw	r16,8(r10)
   208f0:	8280a026 	beq	r16,r10,20b74 <_malloc_r+0x38c>
   208f4:	80800117 	ldw	r2,4(r16)
   208f8:	00ffff04 	movi	r3,-4
   208fc:	10ca703a 	and	r5,r2,r3
   20900:	2c4dc83a 	sub	r6,r5,r17
   20904:	008003c4 	movi	r2,15
   20908:	11808316 	blt	r2,r6,20b18 <_malloc_r+0x330>
   2090c:	52800315 	stw	r10,12(r10)
   20910:	52800215 	stw	r10,8(r10)
   20914:	30002916 	blt	r6,zero,209bc <_malloc_r+0x1d4>
   20918:	8147883a 	add	r3,r16,r5
   2091c:	18800117 	ldw	r2,4(r3)
   20920:	9009883a 	mov	r4,r18
   20924:	10800054 	ori	r2,r2,1
   20928:	18800115 	stw	r2,4(r3)
   2092c:	00232540 	call	23254 <__malloc_unlock>
   20930:	80c00204 	addi	r3,r16,8
   20934:	003fc006 	br	20838 <_malloc_r+0x50>
   20938:	02c000b4 	movhi	r11,2
   2093c:	5ad64604 	addi	r11,r11,22808
   20940:	8ac5883a 	add	r2,r17,r11
   20944:	14000317 	ldw	r16,12(r2)
   20948:	580f883a 	mov	r7,r11
   2094c:	8806d0fa 	srli	r3,r17,3
   20950:	14006c26 	beq	r2,r16,20b04 <_malloc_r+0x31c>
   20954:	80c00117 	ldw	r3,4(r16)
   20958:	00bfff04 	movi	r2,-4
   2095c:	81800317 	ldw	r6,12(r16)
   20960:	1886703a 	and	r3,r3,r2
   20964:	80c7883a 	add	r3,r16,r3
   20968:	18800117 	ldw	r2,4(r3)
   2096c:	81400217 	ldw	r5,8(r16)
   20970:	9009883a 	mov	r4,r18
   20974:	10800054 	ori	r2,r2,1
   20978:	18800115 	stw	r2,4(r3)
   2097c:	31400215 	stw	r5,8(r6)
   20980:	29800315 	stw	r6,12(r5)
   20984:	00232540 	call	23254 <__malloc_unlock>
   20988:	80c00204 	addi	r3,r16,8
   2098c:	003faa06 	br	20838 <_malloc_r+0x50>
   20990:	00800104 	movi	r2,4
   20994:	10c0052e 	bgeu	r2,r3,209ac <_malloc_r+0x1c4>
   20998:	00800504 	movi	r2,20
   2099c:	10c07836 	bltu	r2,r3,20b80 <_malloc_r+0x398>
   209a0:	198016c4 	addi	r6,r3,91
   209a4:	300490fa 	slli	r2,r6,3
   209a8:	003fbc06 	br	2089c <_malloc_r+0xb4>
   209ac:	8804d1ba 	srli	r2,r17,6
   209b0:	11800e04 	addi	r6,r2,56
   209b4:	300490fa 	slli	r2,r6,3
   209b8:	003fb806 	br	2089c <_malloc_r+0xb4>
   209bc:	00807fc4 	movi	r2,511
   209c0:	1140bb36 	bltu	r2,r5,20cb0 <_malloc_r+0x4c8>
   209c4:	2806d0fa 	srli	r3,r5,3
   209c8:	573ffe04 	addi	fp,r10,-8
   209cc:	00800044 	movi	r2,1
   209d0:	180890fa 	slli	r4,r3,3
   209d4:	1807d0ba 	srai	r3,r3,2
   209d8:	e1c00117 	ldw	r7,4(fp)
   209dc:	5909883a 	add	r4,r11,r4
   209e0:	21400217 	ldw	r5,8(r4)
   209e4:	10c4983a 	sll	r2,r2,r3
   209e8:	81000315 	stw	r4,12(r16)
   209ec:	81400215 	stw	r5,8(r16)
   209f0:	388eb03a 	or	r7,r7,r2
   209f4:	2c000315 	stw	r16,12(r5)
   209f8:	24000215 	stw	r16,8(r4)
   209fc:	e1c00115 	stw	r7,4(fp)
   20a00:	4807883a 	mov	r3,r9
   20a04:	4800cd16 	blt	r9,zero,20d3c <_malloc_r+0x554>
   20a08:	1807d0ba 	srai	r3,r3,2
   20a0c:	00800044 	movi	r2,1
   20a10:	10c8983a 	sll	r4,r2,r3
   20a14:	39004436 	bltu	r7,r4,20b28 <_malloc_r+0x340>
   20a18:	21c4703a 	and	r2,r4,r7
   20a1c:	10000a1e 	bne	r2,zero,20a48 <_malloc_r+0x260>
   20a20:	2109883a 	add	r4,r4,r4
   20a24:	00bfff04 	movi	r2,-4
   20a28:	4884703a 	and	r2,r9,r2
   20a2c:	3906703a 	and	r3,r7,r4
   20a30:	12400104 	addi	r9,r2,4
   20a34:	1800041e 	bne	r3,zero,20a48 <_malloc_r+0x260>
   20a38:	2109883a 	add	r4,r4,r4
   20a3c:	3904703a 	and	r2,r7,r4
   20a40:	4a400104 	addi	r9,r9,4
   20a44:	103ffc26 	beq	r2,zero,20a38 <_malloc_r+0x250>
   20a48:	480490fa 	slli	r2,r9,3
   20a4c:	4819883a 	mov	r12,r9
   20a50:	023fff04 	movi	r8,-4
   20a54:	589b883a 	add	r13,r11,r2
   20a58:	6807883a 	mov	r3,r13
   20a5c:	014003c4 	movi	r5,15
   20a60:	1c000317 	ldw	r16,12(r3)
   20a64:	1c00041e 	bne	r3,r16,20a78 <_malloc_r+0x290>
   20a68:	0000a706 	br	20d08 <_malloc_r+0x520>
   20a6c:	3000ab0e 	bge	r6,zero,20d1c <_malloc_r+0x534>
   20a70:	84000317 	ldw	r16,12(r16)
   20a74:	1c00a426 	beq	r3,r16,20d08 <_malloc_r+0x520>
   20a78:	80800117 	ldw	r2,4(r16)
   20a7c:	1204703a 	and	r2,r2,r8
   20a80:	144dc83a 	sub	r6,r2,r17
   20a84:	29bff90e 	bge	r5,r6,20a6c <_malloc_r+0x284>
   20a88:	81000317 	ldw	r4,12(r16)
   20a8c:	80c00217 	ldw	r3,8(r16)
   20a90:	89400054 	ori	r5,r17,1
   20a94:	8445883a 	add	r2,r16,r17
   20a98:	20c00215 	stw	r3,8(r4)
   20a9c:	19000315 	stw	r4,12(r3)
   20aa0:	81400115 	stw	r5,4(r16)
   20aa4:	1187883a 	add	r3,r2,r6
   20aa8:	31000054 	ori	r4,r6,1
   20aac:	50800315 	stw	r2,12(r10)
   20ab0:	50800215 	stw	r2,8(r10)
   20ab4:	19800015 	stw	r6,0(r3)
   20ab8:	11000115 	stw	r4,4(r2)
   20abc:	12800215 	stw	r10,8(r2)
   20ac0:	12800315 	stw	r10,12(r2)
   20ac4:	9009883a 	mov	r4,r18
   20ac8:	00232540 	call	23254 <__malloc_unlock>
   20acc:	80c00204 	addi	r3,r16,8
   20ad0:	003f5906 	br	20838 <_malloc_r+0x50>
   20ad4:	8109883a 	add	r4,r16,r4
   20ad8:	20800117 	ldw	r2,4(r4)
   20adc:	80c00217 	ldw	r3,8(r16)
   20ae0:	81400317 	ldw	r5,12(r16)
   20ae4:	10800054 	ori	r2,r2,1
   20ae8:	20800115 	stw	r2,4(r4)
   20aec:	28c00215 	stw	r3,8(r5)
   20af0:	19400315 	stw	r5,12(r3)
   20af4:	9009883a 	mov	r4,r18
   20af8:	00232540 	call	23254 <__malloc_unlock>
   20afc:	80c00204 	addi	r3,r16,8
   20b00:	003f4d06 	br	20838 <_malloc_r+0x50>
   20b04:	80800204 	addi	r2,r16,8
   20b08:	14000317 	ldw	r16,12(r2)
   20b0c:	143f911e 	bne	r2,r16,20954 <_malloc_r+0x16c>
   20b10:	1a400084 	addi	r9,r3,2
   20b14:	003f7306 	br	208e4 <_malloc_r+0xfc>
   20b18:	88c00054 	ori	r3,r17,1
   20b1c:	8445883a 	add	r2,r16,r17
   20b20:	80c00115 	stw	r3,4(r16)
   20b24:	003fdf06 	br	20aa4 <_malloc_r+0x2bc>
   20b28:	e4000217 	ldw	r16,8(fp)
   20b2c:	00bfff04 	movi	r2,-4
   20b30:	80c00117 	ldw	r3,4(r16)
   20b34:	802d883a 	mov	r22,r16
   20b38:	18aa703a 	and	r21,r3,r2
   20b3c:	ac401636 	bltu	r21,r17,20b98 <_malloc_r+0x3b0>
   20b40:	ac49c83a 	sub	r4,r21,r17
   20b44:	008003c4 	movi	r2,15
   20b48:	1100130e 	bge	r2,r4,20b98 <_malloc_r+0x3b0>
   20b4c:	88800054 	ori	r2,r17,1
   20b50:	8447883a 	add	r3,r16,r17
   20b54:	80800115 	stw	r2,4(r16)
   20b58:	20800054 	ori	r2,r4,1
   20b5c:	18800115 	stw	r2,4(r3)
   20b60:	e0c00215 	stw	r3,8(fp)
   20b64:	9009883a 	mov	r4,r18
   20b68:	00232540 	call	23254 <__malloc_unlock>
   20b6c:	80c00204 	addi	r3,r16,8
   20b70:	003f3106 	br	20838 <_malloc_r+0x50>
   20b74:	39c00117 	ldw	r7,4(r7)
   20b78:	573ffe04 	addi	fp,r10,-8
   20b7c:	003fa006 	br	20a00 <_malloc_r+0x218>
   20b80:	00801504 	movi	r2,84
   20b84:	10c06736 	bltu	r2,r3,20d24 <_malloc_r+0x53c>
   20b88:	8804d33a 	srli	r2,r17,12
   20b8c:	11801b84 	addi	r6,r2,110
   20b90:	300490fa 	slli	r2,r6,3
   20b94:	003f4106 	br	2089c <_malloc_r+0xb4>
   20b98:	d0a6a017 	ldw	r2,-25984(gp)
   20b9c:	d0e00317 	ldw	r3,-32756(gp)
   20ba0:	053fffc4 	movi	r20,-1
   20ba4:	10800404 	addi	r2,r2,16
   20ba8:	88a7883a 	add	r19,r17,r2
   20bac:	1d000326 	beq	r3,r20,20bbc <_malloc_r+0x3d4>
   20bb0:	98c3ffc4 	addi	r3,r19,4095
   20bb4:	00bc0004 	movi	r2,-4096
   20bb8:	18a6703a 	and	r19,r3,r2
   20bbc:	9009883a 	mov	r4,r18
   20bc0:	980b883a 	mov	r5,r19
   20bc4:	00217800 	call	21780 <_sbrk_r>
   20bc8:	1009883a 	mov	r4,r2
   20bcc:	15000426 	beq	r2,r20,20be0 <_malloc_r+0x3f8>
   20bd0:	854b883a 	add	r5,r16,r21
   20bd4:	1029883a 	mov	r20,r2
   20bd8:	11405a2e 	bgeu	r2,r5,20d44 <_malloc_r+0x55c>
   20bdc:	87000c26 	beq	r16,fp,20c10 <_malloc_r+0x428>
   20be0:	e4000217 	ldw	r16,8(fp)
   20be4:	80c00117 	ldw	r3,4(r16)
   20be8:	00bfff04 	movi	r2,-4
   20bec:	1884703a 	and	r2,r3,r2
   20bf0:	14400336 	bltu	r2,r17,20c00 <_malloc_r+0x418>
   20bf4:	1449c83a 	sub	r4,r2,r17
   20bf8:	008003c4 	movi	r2,15
   20bfc:	113fd316 	blt	r2,r4,20b4c <_malloc_r+0x364>
   20c00:	9009883a 	mov	r4,r18
   20c04:	00232540 	call	23254 <__malloc_unlock>
   20c08:	0007883a 	mov	r3,zero
   20c0c:	003f0a06 	br	20838 <_malloc_r+0x50>
   20c10:	05c000f4 	movhi	r23,3
   20c14:	bde27404 	addi	r23,r23,-30256
   20c18:	b8800017 	ldw	r2,0(r23)
   20c1c:	988d883a 	add	r6,r19,r2
   20c20:	b9800015 	stw	r6,0(r23)
   20c24:	d0e00317 	ldw	r3,-32756(gp)
   20c28:	00bfffc4 	movi	r2,-1
   20c2c:	18808e26 	beq	r3,r2,20e68 <_malloc_r+0x680>
   20c30:	2145c83a 	sub	r2,r4,r5
   20c34:	3085883a 	add	r2,r6,r2
   20c38:	b8800015 	stw	r2,0(r23)
   20c3c:	20c001cc 	andi	r3,r4,7
   20c40:	18005f1e 	bne	r3,zero,20dc0 <_malloc_r+0x5d8>
   20c44:	000b883a 	mov	r5,zero
   20c48:	a4c5883a 	add	r2,r20,r19
   20c4c:	1083ffcc 	andi	r2,r2,4095
   20c50:	00c40004 	movi	r3,4096
   20c54:	1887c83a 	sub	r3,r3,r2
   20c58:	28e7883a 	add	r19,r5,r3
   20c5c:	9009883a 	mov	r4,r18
   20c60:	980b883a 	mov	r5,r19
   20c64:	00217800 	call	21780 <_sbrk_r>
   20c68:	1007883a 	mov	r3,r2
   20c6c:	00bfffc4 	movi	r2,-1
   20c70:	18807a26 	beq	r3,r2,20e5c <_malloc_r+0x674>
   20c74:	1d05c83a 	sub	r2,r3,r20
   20c78:	9885883a 	add	r2,r19,r2
   20c7c:	10c00054 	ori	r3,r2,1
   20c80:	b8800017 	ldw	r2,0(r23)
   20c84:	a021883a 	mov	r16,r20
   20c88:	a0c00115 	stw	r3,4(r20)
   20c8c:	9885883a 	add	r2,r19,r2
   20c90:	b8800015 	stw	r2,0(r23)
   20c94:	e5000215 	stw	r20,8(fp)
   20c98:	b7003626 	beq	r22,fp,20d74 <_malloc_r+0x58c>
   20c9c:	018003c4 	movi	r6,15
   20ca0:	35404b36 	bltu	r6,r21,20dd0 <_malloc_r+0x5e8>
   20ca4:	00800044 	movi	r2,1
   20ca8:	a0800115 	stw	r2,4(r20)
   20cac:	003fcd06 	br	20be4 <_malloc_r+0x3fc>
   20cb0:	2808d27a 	srli	r4,r5,9
   20cb4:	2000371e 	bne	r4,zero,20d94 <_malloc_r+0x5ac>
   20cb8:	2808d0fa 	srli	r4,r5,3
   20cbc:	200690fa 	slli	r3,r4,3
   20cc0:	1ad1883a 	add	r8,r3,r11
   20cc4:	41800217 	ldw	r6,8(r8)
   20cc8:	41805b26 	beq	r8,r6,20e38 <_malloc_r+0x650>
   20ccc:	30800117 	ldw	r2,4(r6)
   20cd0:	00ffff04 	movi	r3,-4
   20cd4:	10c4703a 	and	r2,r2,r3
   20cd8:	2880022e 	bgeu	r5,r2,20ce4 <_malloc_r+0x4fc>
   20cdc:	31800217 	ldw	r6,8(r6)
   20ce0:	41bffa1e 	bne	r8,r6,20ccc <_malloc_r+0x4e4>
   20ce4:	32000317 	ldw	r8,12(r6)
   20ce8:	39c00117 	ldw	r7,4(r7)
   20cec:	82000315 	stw	r8,12(r16)
   20cf0:	81800215 	stw	r6,8(r16)
   20cf4:	070000b4 	movhi	fp,2
   20cf8:	e7164604 	addi	fp,fp,22808
   20cfc:	34000315 	stw	r16,12(r6)
   20d00:	44000215 	stw	r16,8(r8)
   20d04:	003f3e06 	br	20a00 <_malloc_r+0x218>
   20d08:	63000044 	addi	r12,r12,1
   20d0c:	608000cc 	andi	r2,r12,3
   20d10:	10005d26 	beq	r2,zero,20e88 <_malloc_r+0x6a0>
   20d14:	18c00204 	addi	r3,r3,8
   20d18:	003f5106 	br	20a60 <_malloc_r+0x278>
   20d1c:	8089883a 	add	r4,r16,r2
   20d20:	003f6d06 	br	20ad8 <_malloc_r+0x2f0>
   20d24:	00805504 	movi	r2,340
   20d28:	10c02036 	bltu	r2,r3,20dac <_malloc_r+0x5c4>
   20d2c:	8804d3fa 	srli	r2,r17,15
   20d30:	11801dc4 	addi	r6,r2,119
   20d34:	300490fa 	slli	r2,r6,3
   20d38:	003ed806 	br	2089c <_malloc_r+0xb4>
   20d3c:	48c000c4 	addi	r3,r9,3
   20d40:	003f3106 	br	20a08 <_malloc_r+0x220>
   20d44:	05c000f4 	movhi	r23,3
   20d48:	bde27404 	addi	r23,r23,-30256
   20d4c:	b8800017 	ldw	r2,0(r23)
   20d50:	988d883a 	add	r6,r19,r2
   20d54:	b9800015 	stw	r6,0(r23)
   20d58:	293fb21e 	bne	r5,r4,20c24 <_malloc_r+0x43c>
   20d5c:	2083ffcc 	andi	r2,r4,4095
   20d60:	103fb01e 	bne	r2,zero,20c24 <_malloc_r+0x43c>
   20d64:	e4000217 	ldw	r16,8(fp)
   20d68:	9d45883a 	add	r2,r19,r21
   20d6c:	10800054 	ori	r2,r2,1
   20d70:	80800115 	stw	r2,4(r16)
   20d74:	b8c00017 	ldw	r3,0(r23)
   20d78:	d0a6a117 	ldw	r2,-25980(gp)
   20d7c:	10c0012e 	bgeu	r2,r3,20d84 <_malloc_r+0x59c>
   20d80:	d0e6a115 	stw	r3,-25980(gp)
   20d84:	d0a6a217 	ldw	r2,-25976(gp)
   20d88:	10ff962e 	bgeu	r2,r3,20be4 <_malloc_r+0x3fc>
   20d8c:	d0e6a215 	stw	r3,-25976(gp)
   20d90:	003f9406 	br	20be4 <_malloc_r+0x3fc>
   20d94:	00800104 	movi	r2,4
   20d98:	11001e36 	bltu	r2,r4,20e14 <_malloc_r+0x62c>
   20d9c:	2804d1ba 	srli	r2,r5,6
   20da0:	11000e04 	addi	r4,r2,56
   20da4:	200690fa 	slli	r3,r4,3
   20da8:	003fc506 	br	20cc0 <_malloc_r+0x4d8>
   20dac:	00815504 	movi	r2,1364
   20db0:	10c01d2e 	bgeu	r2,r3,20e28 <_malloc_r+0x640>
   20db4:	01801f84 	movi	r6,126
   20db8:	0080fc04 	movi	r2,1008
   20dbc:	003eb706 	br	2089c <_malloc_r+0xb4>
   20dc0:	00800204 	movi	r2,8
   20dc4:	10cbc83a 	sub	r5,r2,r3
   20dc8:	2169883a 	add	r20,r4,r5
   20dcc:	003f9e06 	br	20c48 <_malloc_r+0x460>
   20dd0:	00bffe04 	movi	r2,-8
   20dd4:	a93ffd04 	addi	r4,r21,-12
   20dd8:	2088703a 	and	r4,r4,r2
   20ddc:	b10b883a 	add	r5,r22,r4
   20de0:	00c00144 	movi	r3,5
   20de4:	28c00215 	stw	r3,8(r5)
   20de8:	28c00115 	stw	r3,4(r5)
   20dec:	b0800117 	ldw	r2,4(r22)
   20df0:	1080004c 	andi	r2,r2,1
   20df4:	2084b03a 	or	r2,r4,r2
   20df8:	b0800115 	stw	r2,4(r22)
   20dfc:	313fdd2e 	bgeu	r6,r4,20d74 <_malloc_r+0x58c>
   20e00:	b1400204 	addi	r5,r22,8
   20e04:	9009883a 	mov	r4,r18
   20e08:	0021f7c0 	call	21f7c <_free_r>
   20e0c:	e4000217 	ldw	r16,8(fp)
   20e10:	003fd806 	br	20d74 <_malloc_r+0x58c>
   20e14:	00800504 	movi	r2,20
   20e18:	11001536 	bltu	r2,r4,20e70 <_malloc_r+0x688>
   20e1c:	210016c4 	addi	r4,r4,91
   20e20:	200690fa 	slli	r3,r4,3
   20e24:	003fa606 	br	20cc0 <_malloc_r+0x4d8>
   20e28:	8804d4ba 	srli	r2,r17,18
   20e2c:	11801f04 	addi	r6,r2,124
   20e30:	300490fa 	slli	r2,r6,3
   20e34:	003e9906 	br	2089c <_malloc_r+0xb4>
   20e38:	2009d0ba 	srai	r4,r4,2
   20e3c:	014000b4 	movhi	r5,2
   20e40:	29564604 	addi	r5,r5,22808
   20e44:	00c00044 	movi	r3,1
   20e48:	28800117 	ldw	r2,4(r5)
   20e4c:	1906983a 	sll	r3,r3,r4
   20e50:	10c4b03a 	or	r2,r2,r3
   20e54:	28800115 	stw	r2,4(r5)
   20e58:	003fa306 	br	20ce8 <_malloc_r+0x500>
   20e5c:	0027883a 	mov	r19,zero
   20e60:	00c00044 	movi	r3,1
   20e64:	003f8606 	br	20c80 <_malloc_r+0x498>
   20e68:	d1200315 	stw	r4,-32756(gp)
   20e6c:	003f7306 	br	20c3c <_malloc_r+0x454>
   20e70:	00801504 	movi	r2,84
   20e74:	11001936 	bltu	r2,r4,20edc <_malloc_r+0x6f4>
   20e78:	2804d33a 	srli	r2,r5,12
   20e7c:	11001b84 	addi	r4,r2,110
   20e80:	200690fa 	slli	r3,r4,3
   20e84:	003f8e06 	br	20cc0 <_malloc_r+0x4d8>
   20e88:	480b883a 	mov	r5,r9
   20e8c:	6807883a 	mov	r3,r13
   20e90:	288000cc 	andi	r2,r5,3
   20e94:	18fffe04 	addi	r3,r3,-8
   20e98:	297fffc4 	addi	r5,r5,-1
   20e9c:	10001526 	beq	r2,zero,20ef4 <_malloc_r+0x70c>
   20ea0:	18800217 	ldw	r2,8(r3)
   20ea4:	10fffa26 	beq	r2,r3,20e90 <_malloc_r+0x6a8>
   20ea8:	2109883a 	add	r4,r4,r4
   20eac:	393f1e36 	bltu	r7,r4,20b28 <_malloc_r+0x340>
   20eb0:	203f1d26 	beq	r4,zero,20b28 <_malloc_r+0x340>
   20eb4:	21c4703a 	and	r2,r4,r7
   20eb8:	10000226 	beq	r2,zero,20ec4 <_malloc_r+0x6dc>
   20ebc:	6013883a 	mov	r9,r12
   20ec0:	003ee106 	br	20a48 <_malloc_r+0x260>
   20ec4:	2109883a 	add	r4,r4,r4
   20ec8:	3904703a 	and	r2,r7,r4
   20ecc:	63000104 	addi	r12,r12,4
   20ed0:	103ffc26 	beq	r2,zero,20ec4 <_malloc_r+0x6dc>
   20ed4:	6013883a 	mov	r9,r12
   20ed8:	003edb06 	br	20a48 <_malloc_r+0x260>
   20edc:	00805504 	movi	r2,340
   20ee0:	11000836 	bltu	r2,r4,20f04 <_malloc_r+0x71c>
   20ee4:	2804d3fa 	srli	r2,r5,15
   20ee8:	11001dc4 	addi	r4,r2,119
   20eec:	200690fa 	slli	r3,r4,3
   20ef0:	003f7306 	br	20cc0 <_malloc_r+0x4d8>
   20ef4:	0104303a 	nor	r2,zero,r4
   20ef8:	388e703a 	and	r7,r7,r2
   20efc:	e1c00115 	stw	r7,4(fp)
   20f00:	003fe906 	br	20ea8 <_malloc_r+0x6c0>
   20f04:	00815504 	movi	r2,1364
   20f08:	1100032e 	bgeu	r2,r4,20f18 <_malloc_r+0x730>
   20f0c:	01001f84 	movi	r4,126
   20f10:	00c0fc04 	movi	r3,1008
   20f14:	003f6a06 	br	20cc0 <_malloc_r+0x4d8>
   20f18:	2804d4ba 	srli	r2,r5,18
   20f1c:	11001f04 	addi	r4,r2,124
   20f20:	200690fa 	slli	r3,r4,3
   20f24:	003f6606 	br	20cc0 <_malloc_r+0x4d8>

00020f28 <memchr>:
   20f28:	008000c4 	movi	r2,3
   20f2c:	29403fcc 	andi	r5,r5,255
   20f30:	2007883a 	mov	r3,r4
   20f34:	1180022e 	bgeu	r2,r6,20f40 <memchr+0x18>
   20f38:	2084703a 	and	r2,r4,r2
   20f3c:	10000b26 	beq	r2,zero,20f6c <memchr+0x44>
   20f40:	313fffc4 	addi	r4,r6,-1
   20f44:	3000051e 	bne	r6,zero,20f5c <memchr+0x34>
   20f48:	00002c06 	br	20ffc <memchr+0xd4>
   20f4c:	213fffc4 	addi	r4,r4,-1
   20f50:	00bfffc4 	movi	r2,-1
   20f54:	18c00044 	addi	r3,r3,1
   20f58:	20802826 	beq	r4,r2,20ffc <memchr+0xd4>
   20f5c:	18800003 	ldbu	r2,0(r3)
   20f60:	28bffa1e 	bne	r5,r2,20f4c <memchr+0x24>
   20f64:	1805883a 	mov	r2,r3
   20f68:	f800283a 	ret
   20f6c:	0011883a 	mov	r8,zero
   20f70:	0007883a 	mov	r3,zero
   20f74:	01c00104 	movi	r7,4
   20f78:	4004923a 	slli	r2,r8,8
   20f7c:	18c00044 	addi	r3,r3,1
   20f80:	1151883a 	add	r8,r2,r5
   20f84:	19fffc1e 	bne	r3,r7,20f78 <memchr+0x50>
   20f88:	02bfbff4 	movhi	r10,65279
   20f8c:	52bfbfc4 	addi	r10,r10,-257
   20f90:	02602074 	movhi	r9,32897
   20f94:	4a602004 	addi	r9,r9,-32640
   20f98:	02c000c4 	movi	r11,3
   20f9c:	20800017 	ldw	r2,0(r4)
   20fa0:	31bfff04 	addi	r6,r6,-4
   20fa4:	200f883a 	mov	r7,r4
   20fa8:	1204f03a 	xor	r2,r2,r8
   20fac:	1287883a 	add	r3,r2,r10
   20fb0:	1a46703a 	and	r3,r3,r9
   20fb4:	0084303a 	nor	r2,zero,r2
   20fb8:	10c4703a 	and	r2,r2,r3
   20fbc:	10000b26 	beq	r2,zero,20fec <memchr+0xc4>
   20fc0:	20800003 	ldbu	r2,0(r4)
   20fc4:	28800f26 	beq	r5,r2,21004 <memchr+0xdc>
   20fc8:	20800043 	ldbu	r2,1(r4)
   20fcc:	21c00044 	addi	r7,r4,1
   20fd0:	28800c26 	beq	r5,r2,21004 <memchr+0xdc>
   20fd4:	20800083 	ldbu	r2,2(r4)
   20fd8:	21c00084 	addi	r7,r4,2
   20fdc:	28800926 	beq	r5,r2,21004 <memchr+0xdc>
   20fe0:	208000c3 	ldbu	r2,3(r4)
   20fe4:	21c000c4 	addi	r7,r4,3
   20fe8:	28800626 	beq	r5,r2,21004 <memchr+0xdc>
   20fec:	21000104 	addi	r4,r4,4
   20ff0:	59bfea36 	bltu	r11,r6,20f9c <memchr+0x74>
   20ff4:	2007883a 	mov	r3,r4
   20ff8:	003fd106 	br	20f40 <memchr+0x18>
   20ffc:	0005883a 	mov	r2,zero
   21000:	f800283a 	ret
   21004:	3805883a 	mov	r2,r7
   21008:	f800283a 	ret

0002100c <memcpy>:
   2100c:	01c003c4 	movi	r7,15
   21010:	2007883a 	mov	r3,r4
   21014:	3980032e 	bgeu	r7,r6,21024 <memcpy+0x18>
   21018:	2904b03a 	or	r2,r5,r4
   2101c:	108000cc 	andi	r2,r2,3
   21020:	10000926 	beq	r2,zero,21048 <memcpy+0x3c>
   21024:	30000626 	beq	r6,zero,21040 <memcpy+0x34>
   21028:	30cd883a 	add	r6,r6,r3
   2102c:	28800003 	ldbu	r2,0(r5)
   21030:	29400044 	addi	r5,r5,1
   21034:	18800005 	stb	r2,0(r3)
   21038:	18c00044 	addi	r3,r3,1
   2103c:	30fffb1e 	bne	r6,r3,2102c <memcpy+0x20>
   21040:	2005883a 	mov	r2,r4
   21044:	f800283a 	ret
   21048:	3811883a 	mov	r8,r7
   2104c:	200f883a 	mov	r7,r4
   21050:	28c00017 	ldw	r3,0(r5)
   21054:	31bffc04 	addi	r6,r6,-16
   21058:	38c00015 	stw	r3,0(r7)
   2105c:	28800117 	ldw	r2,4(r5)
   21060:	38800115 	stw	r2,4(r7)
   21064:	28c00217 	ldw	r3,8(r5)
   21068:	38c00215 	stw	r3,8(r7)
   2106c:	28800317 	ldw	r2,12(r5)
   21070:	29400404 	addi	r5,r5,16
   21074:	38800315 	stw	r2,12(r7)
   21078:	39c00404 	addi	r7,r7,16
   2107c:	41bff436 	bltu	r8,r6,21050 <memcpy+0x44>
   21080:	008000c4 	movi	r2,3
   21084:	1180072e 	bgeu	r2,r6,210a4 <memcpy+0x98>
   21088:	1007883a 	mov	r3,r2
   2108c:	28800017 	ldw	r2,0(r5)
   21090:	31bfff04 	addi	r6,r6,-4
   21094:	29400104 	addi	r5,r5,4
   21098:	38800015 	stw	r2,0(r7)
   2109c:	39c00104 	addi	r7,r7,4
   210a0:	19bffa36 	bltu	r3,r6,2108c <memcpy+0x80>
   210a4:	3807883a 	mov	r3,r7
   210a8:	003fde06 	br	21024 <memcpy+0x18>

000210ac <memmove>:
   210ac:	2807883a 	mov	r3,r5
   210b0:	2011883a 	mov	r8,r4
   210b4:	29000c2e 	bgeu	r5,r4,210e8 <memmove+0x3c>
   210b8:	298f883a 	add	r7,r5,r6
   210bc:	21c00a2e 	bgeu	r4,r7,210e8 <memmove+0x3c>
   210c0:	30000726 	beq	r6,zero,210e0 <memmove+0x34>
   210c4:	2187883a 	add	r3,r4,r6
   210c8:	198dc83a 	sub	r6,r3,r6
   210cc:	39ffffc4 	addi	r7,r7,-1
   210d0:	38800003 	ldbu	r2,0(r7)
   210d4:	18ffffc4 	addi	r3,r3,-1
   210d8:	18800005 	stb	r2,0(r3)
   210dc:	19bffb1e 	bne	r3,r6,210cc <memmove+0x20>
   210e0:	2005883a 	mov	r2,r4
   210e4:	f800283a 	ret
   210e8:	01c003c4 	movi	r7,15
   210ec:	39800a36 	bltu	r7,r6,21118 <memmove+0x6c>
   210f0:	303ffb26 	beq	r6,zero,210e0 <memmove+0x34>
   210f4:	400f883a 	mov	r7,r8
   210f8:	320d883a 	add	r6,r6,r8
   210fc:	28800003 	ldbu	r2,0(r5)
   21100:	29400044 	addi	r5,r5,1
   21104:	38800005 	stb	r2,0(r7)
   21108:	39c00044 	addi	r7,r7,1
   2110c:	39bffb1e 	bne	r7,r6,210fc <memmove+0x50>
   21110:	2005883a 	mov	r2,r4
   21114:	f800283a 	ret
   21118:	1904b03a 	or	r2,r3,r4
   2111c:	108000cc 	andi	r2,r2,3
   21120:	103ff31e 	bne	r2,zero,210f0 <memmove+0x44>
   21124:	3811883a 	mov	r8,r7
   21128:	180b883a 	mov	r5,r3
   2112c:	200f883a 	mov	r7,r4
   21130:	28c00017 	ldw	r3,0(r5)
   21134:	31bffc04 	addi	r6,r6,-16
   21138:	38c00015 	stw	r3,0(r7)
   2113c:	28800117 	ldw	r2,4(r5)
   21140:	38800115 	stw	r2,4(r7)
   21144:	28c00217 	ldw	r3,8(r5)
   21148:	38c00215 	stw	r3,8(r7)
   2114c:	28800317 	ldw	r2,12(r5)
   21150:	29400404 	addi	r5,r5,16
   21154:	38800315 	stw	r2,12(r7)
   21158:	39c00404 	addi	r7,r7,16
   2115c:	41bff436 	bltu	r8,r6,21130 <memmove+0x84>
   21160:	008000c4 	movi	r2,3
   21164:	1180072e 	bgeu	r2,r6,21184 <memmove+0xd8>
   21168:	1007883a 	mov	r3,r2
   2116c:	28800017 	ldw	r2,0(r5)
   21170:	31bfff04 	addi	r6,r6,-4
   21174:	29400104 	addi	r5,r5,4
   21178:	38800015 	stw	r2,0(r7)
   2117c:	39c00104 	addi	r7,r7,4
   21180:	19bffa36 	bltu	r3,r6,2116c <memmove+0xc0>
   21184:	3811883a 	mov	r8,r7
   21188:	003fd906 	br	210f0 <memmove+0x44>

0002118c <_realloc_r>:
   2118c:	defff404 	addi	sp,sp,-48
   21190:	dd800815 	stw	r22,32(sp)
   21194:	dc800415 	stw	r18,16(sp)
   21198:	dc400315 	stw	r17,12(sp)
   2119c:	dfc00b15 	stw	ra,44(sp)
   211a0:	df000a15 	stw	fp,40(sp)
   211a4:	ddc00915 	stw	r23,36(sp)
   211a8:	dd400715 	stw	r21,28(sp)
   211ac:	dd000615 	stw	r20,24(sp)
   211b0:	dcc00515 	stw	r19,20(sp)
   211b4:	dc000215 	stw	r16,8(sp)
   211b8:	2825883a 	mov	r18,r5
   211bc:	3023883a 	mov	r17,r6
   211c0:	202d883a 	mov	r22,r4
   211c4:	2800c926 	beq	r5,zero,214ec <_realloc_r+0x360>
   211c8:	00232340 	call	23234 <__malloc_lock>
   211cc:	943ffe04 	addi	r16,r18,-8
   211d0:	88c002c4 	addi	r3,r17,11
   211d4:	00800584 	movi	r2,22
   211d8:	82000117 	ldw	r8,4(r16)
   211dc:	10c01b2e 	bgeu	r2,r3,2124c <_realloc_r+0xc0>
   211e0:	00bffe04 	movi	r2,-8
   211e4:	188e703a 	and	r7,r3,r2
   211e8:	3839883a 	mov	fp,r7
   211ec:	38001a16 	blt	r7,zero,21258 <_realloc_r+0xcc>
   211f0:	e4401936 	bltu	fp,r17,21258 <_realloc_r+0xcc>
   211f4:	013fff04 	movi	r4,-4
   211f8:	4126703a 	and	r19,r8,r4
   211fc:	99c02616 	blt	r19,r7,21298 <_realloc_r+0x10c>
   21200:	802b883a 	mov	r21,r16
   21204:	9829883a 	mov	r20,r19
   21208:	84000204 	addi	r16,r16,8
   2120c:	a80f883a 	mov	r7,r21
   21210:	a70dc83a 	sub	r6,r20,fp
   21214:	008003c4 	movi	r2,15
   21218:	1180c136 	bltu	r2,r6,21520 <_realloc_r+0x394>
   2121c:	38800117 	ldw	r2,4(r7)
   21220:	a549883a 	add	r4,r20,r21
   21224:	1080004c 	andi	r2,r2,1
   21228:	a084b03a 	or	r2,r20,r2
   2122c:	38800115 	stw	r2,4(r7)
   21230:	20c00117 	ldw	r3,4(r4)
   21234:	18c00054 	ori	r3,r3,1
   21238:	20c00115 	stw	r3,4(r4)
   2123c:	b009883a 	mov	r4,r22
   21240:	00232540 	call	23254 <__malloc_unlock>
   21244:	8023883a 	mov	r17,r16
   21248:	00000606 	br	21264 <_realloc_r+0xd8>
   2124c:	01c00404 	movi	r7,16
   21250:	3839883a 	mov	fp,r7
   21254:	e47fe72e 	bgeu	fp,r17,211f4 <_realloc_r+0x68>
   21258:	00800304 	movi	r2,12
   2125c:	0023883a 	mov	r17,zero
   21260:	b0800015 	stw	r2,0(r22)
   21264:	8805883a 	mov	r2,r17
   21268:	dfc00b17 	ldw	ra,44(sp)
   2126c:	df000a17 	ldw	fp,40(sp)
   21270:	ddc00917 	ldw	r23,36(sp)
   21274:	dd800817 	ldw	r22,32(sp)
   21278:	dd400717 	ldw	r21,28(sp)
   2127c:	dd000617 	ldw	r20,24(sp)
   21280:	dcc00517 	ldw	r19,20(sp)
   21284:	dc800417 	ldw	r18,16(sp)
   21288:	dc400317 	ldw	r17,12(sp)
   2128c:	dc000217 	ldw	r16,8(sp)
   21290:	dec00c04 	addi	sp,sp,48
   21294:	f800283a 	ret
   21298:	008000b4 	movhi	r2,2
   2129c:	10964604 	addi	r2,r2,22808
   212a0:	12400217 	ldw	r9,8(r2)
   212a4:	84cd883a 	add	r6,r16,r19
   212a8:	802b883a 	mov	r21,r16
   212ac:	3240b926 	beq	r6,r9,21594 <_realloc_r+0x408>
   212b0:	31400117 	ldw	r5,4(r6)
   212b4:	00bfff84 	movi	r2,-2
   212b8:	2884703a 	and	r2,r5,r2
   212bc:	1185883a 	add	r2,r2,r6
   212c0:	10c00117 	ldw	r3,4(r2)
   212c4:	18c0004c 	andi	r3,r3,1
   212c8:	1807003a 	cmpeq	r3,r3,zero
   212cc:	1800a326 	beq	r3,zero,2155c <_realloc_r+0x3d0>
   212d0:	2908703a 	and	r4,r5,r4
   212d4:	9929883a 	add	r20,r19,r4
   212d8:	a1c0a30e 	bge	r20,r7,21568 <_realloc_r+0x3dc>
   212dc:	4080004c 	andi	r2,r8,1
   212e0:	1000551e 	bne	r2,zero,21438 <_realloc_r+0x2ac>
   212e4:	80800017 	ldw	r2,0(r16)
   212e8:	80afc83a 	sub	r23,r16,r2
   212ec:	b8c00117 	ldw	r3,4(r23)
   212f0:	00bfff04 	movi	r2,-4
   212f4:	1884703a 	and	r2,r3,r2
   212f8:	30002e26 	beq	r6,zero,213b4 <_realloc_r+0x228>
   212fc:	3240b926 	beq	r6,r9,215e4 <_realloc_r+0x458>
   21300:	98a9883a 	add	r20,r19,r2
   21304:	2509883a 	add	r4,r4,r20
   21308:	d9000015 	stw	r4,0(sp)
   2130c:	21c02a16 	blt	r4,r7,213b8 <_realloc_r+0x22c>
   21310:	30800317 	ldw	r2,12(r6)
   21314:	30c00217 	ldw	r3,8(r6)
   21318:	01400904 	movi	r5,36
   2131c:	99bfff04 	addi	r6,r19,-4
   21320:	18800315 	stw	r2,12(r3)
   21324:	10c00215 	stw	r3,8(r2)
   21328:	b9000317 	ldw	r4,12(r23)
   2132c:	b8800217 	ldw	r2,8(r23)
   21330:	b82b883a 	mov	r21,r23
   21334:	bc000204 	addi	r16,r23,8
   21338:	20800215 	stw	r2,8(r4)
   2133c:	11000315 	stw	r4,12(r2)
   21340:	2980e436 	bltu	r5,r6,216d4 <_realloc_r+0x548>
   21344:	008004c4 	movi	r2,19
   21348:	9009883a 	mov	r4,r18
   2134c:	8011883a 	mov	r8,r16
   21350:	11800f2e 	bgeu	r2,r6,21390 <_realloc_r+0x204>
   21354:	90800017 	ldw	r2,0(r18)
   21358:	ba000404 	addi	r8,r23,16
   2135c:	91000204 	addi	r4,r18,8
   21360:	b8800215 	stw	r2,8(r23)
   21364:	90c00117 	ldw	r3,4(r18)
   21368:	008006c4 	movi	r2,27
   2136c:	b8c00315 	stw	r3,12(r23)
   21370:	1180072e 	bgeu	r2,r6,21390 <_realloc_r+0x204>
   21374:	90c00217 	ldw	r3,8(r18)
   21378:	ba000604 	addi	r8,r23,24
   2137c:	91000404 	addi	r4,r18,16
   21380:	b8c00415 	stw	r3,16(r23)
   21384:	90800317 	ldw	r2,12(r18)
   21388:	b8800515 	stw	r2,20(r23)
   2138c:	3140e726 	beq	r6,r5,2172c <_realloc_r+0x5a0>
   21390:	20800017 	ldw	r2,0(r4)
   21394:	dd000017 	ldw	r20,0(sp)
   21398:	b80f883a 	mov	r7,r23
   2139c:	40800015 	stw	r2,0(r8)
   213a0:	20c00117 	ldw	r3,4(r4)
   213a4:	40c00115 	stw	r3,4(r8)
   213a8:	20800217 	ldw	r2,8(r4)
   213ac:	40800215 	stw	r2,8(r8)
   213b0:	003f9706 	br	21210 <_realloc_r+0x84>
   213b4:	98a9883a 	add	r20,r19,r2
   213b8:	a1c01f16 	blt	r20,r7,21438 <_realloc_r+0x2ac>
   213bc:	b8c00317 	ldw	r3,12(r23)
   213c0:	b8800217 	ldw	r2,8(r23)
   213c4:	99bfff04 	addi	r6,r19,-4
   213c8:	01400904 	movi	r5,36
   213cc:	b82b883a 	mov	r21,r23
   213d0:	18800215 	stw	r2,8(r3)
   213d4:	10c00315 	stw	r3,12(r2)
   213d8:	bc000204 	addi	r16,r23,8
   213dc:	2980c336 	bltu	r5,r6,216ec <_realloc_r+0x560>
   213e0:	008004c4 	movi	r2,19
   213e4:	9009883a 	mov	r4,r18
   213e8:	8011883a 	mov	r8,r16
   213ec:	11800f2e 	bgeu	r2,r6,2142c <_realloc_r+0x2a0>
   213f0:	90800017 	ldw	r2,0(r18)
   213f4:	ba000404 	addi	r8,r23,16
   213f8:	91000204 	addi	r4,r18,8
   213fc:	b8800215 	stw	r2,8(r23)
   21400:	90c00117 	ldw	r3,4(r18)
   21404:	008006c4 	movi	r2,27
   21408:	b8c00315 	stw	r3,12(r23)
   2140c:	1180072e 	bgeu	r2,r6,2142c <_realloc_r+0x2a0>
   21410:	90c00217 	ldw	r3,8(r18)
   21414:	ba000604 	addi	r8,r23,24
   21418:	91000404 	addi	r4,r18,16
   2141c:	b8c00415 	stw	r3,16(r23)
   21420:	90800317 	ldw	r2,12(r18)
   21424:	b8800515 	stw	r2,20(r23)
   21428:	3140c726 	beq	r6,r5,21748 <_realloc_r+0x5bc>
   2142c:	20800017 	ldw	r2,0(r4)
   21430:	b80f883a 	mov	r7,r23
   21434:	003fd906 	br	2139c <_realloc_r+0x210>
   21438:	880b883a 	mov	r5,r17
   2143c:	b009883a 	mov	r4,r22
   21440:	00207e80 	call	207e8 <_malloc_r>
   21444:	1023883a 	mov	r17,r2
   21448:	10002526 	beq	r2,zero,214e0 <_realloc_r+0x354>
   2144c:	80800117 	ldw	r2,4(r16)
   21450:	00ffff84 	movi	r3,-2
   21454:	893ffe04 	addi	r4,r17,-8
   21458:	10c4703a 	and	r2,r2,r3
   2145c:	8085883a 	add	r2,r16,r2
   21460:	20809526 	beq	r4,r2,216b8 <_realloc_r+0x52c>
   21464:	99bfff04 	addi	r6,r19,-4
   21468:	01c00904 	movi	r7,36
   2146c:	39804536 	bltu	r7,r6,21584 <_realloc_r+0x3f8>
   21470:	008004c4 	movi	r2,19
   21474:	9009883a 	mov	r4,r18
   21478:	880b883a 	mov	r5,r17
   2147c:	11800f2e 	bgeu	r2,r6,214bc <_realloc_r+0x330>
   21480:	90800017 	ldw	r2,0(r18)
   21484:	89400204 	addi	r5,r17,8
   21488:	91000204 	addi	r4,r18,8
   2148c:	88800015 	stw	r2,0(r17)
   21490:	90c00117 	ldw	r3,4(r18)
   21494:	008006c4 	movi	r2,27
   21498:	88c00115 	stw	r3,4(r17)
   2149c:	1180072e 	bgeu	r2,r6,214bc <_realloc_r+0x330>
   214a0:	90c00217 	ldw	r3,8(r18)
   214a4:	89400404 	addi	r5,r17,16
   214a8:	91000404 	addi	r4,r18,16
   214ac:	88c00215 	stw	r3,8(r17)
   214b0:	90800317 	ldw	r2,12(r18)
   214b4:	88800315 	stw	r2,12(r17)
   214b8:	31c09126 	beq	r6,r7,21700 <_realloc_r+0x574>
   214bc:	20800017 	ldw	r2,0(r4)
   214c0:	28800015 	stw	r2,0(r5)
   214c4:	20c00117 	ldw	r3,4(r4)
   214c8:	28c00115 	stw	r3,4(r5)
   214cc:	20800217 	ldw	r2,8(r4)
   214d0:	28800215 	stw	r2,8(r5)
   214d4:	900b883a 	mov	r5,r18
   214d8:	b009883a 	mov	r4,r22
   214dc:	0021f7c0 	call	21f7c <_free_r>
   214e0:	b009883a 	mov	r4,r22
   214e4:	00232540 	call	23254 <__malloc_unlock>
   214e8:	003f5e06 	br	21264 <_realloc_r+0xd8>
   214ec:	300b883a 	mov	r5,r6
   214f0:	dfc00b17 	ldw	ra,44(sp)
   214f4:	df000a17 	ldw	fp,40(sp)
   214f8:	ddc00917 	ldw	r23,36(sp)
   214fc:	dd800817 	ldw	r22,32(sp)
   21500:	dd400717 	ldw	r21,28(sp)
   21504:	dd000617 	ldw	r20,24(sp)
   21508:	dcc00517 	ldw	r19,20(sp)
   2150c:	dc800417 	ldw	r18,16(sp)
   21510:	dc400317 	ldw	r17,12(sp)
   21514:	dc000217 	ldw	r16,8(sp)
   21518:	dec00c04 	addi	sp,sp,48
   2151c:	00207e81 	jmpi	207e8 <_malloc_r>
   21520:	38800117 	ldw	r2,4(r7)
   21524:	e54b883a 	add	r5,fp,r21
   21528:	31000054 	ori	r4,r6,1
   2152c:	1080004c 	andi	r2,r2,1
   21530:	1704b03a 	or	r2,r2,fp
   21534:	38800115 	stw	r2,4(r7)
   21538:	29000115 	stw	r4,4(r5)
   2153c:	2987883a 	add	r3,r5,r6
   21540:	18800117 	ldw	r2,4(r3)
   21544:	29400204 	addi	r5,r5,8
   21548:	b009883a 	mov	r4,r22
   2154c:	10800054 	ori	r2,r2,1
   21550:	18800115 	stw	r2,4(r3)
   21554:	0021f7c0 	call	21f7c <_free_r>
   21558:	003f3806 	br	2123c <_realloc_r+0xb0>
   2155c:	000d883a 	mov	r6,zero
   21560:	0009883a 	mov	r4,zero
   21564:	003f5d06 	br	212dc <_realloc_r+0x150>
   21568:	30c00217 	ldw	r3,8(r6)
   2156c:	30800317 	ldw	r2,12(r6)
   21570:	800f883a 	mov	r7,r16
   21574:	84000204 	addi	r16,r16,8
   21578:	10c00215 	stw	r3,8(r2)
   2157c:	18800315 	stw	r2,12(r3)
   21580:	003f2306 	br	21210 <_realloc_r+0x84>
   21584:	8809883a 	mov	r4,r17
   21588:	900b883a 	mov	r5,r18
   2158c:	00210ac0 	call	210ac <memmove>
   21590:	003fd006 	br	214d4 <_realloc_r+0x348>
   21594:	30800117 	ldw	r2,4(r6)
   21598:	e0c00404 	addi	r3,fp,16
   2159c:	1108703a 	and	r4,r2,r4
   215a0:	9905883a 	add	r2,r19,r4
   215a4:	10ff4d16 	blt	r2,r3,212dc <_realloc_r+0x150>
   215a8:	1705c83a 	sub	r2,r2,fp
   215ac:	870b883a 	add	r5,r16,fp
   215b0:	10800054 	ori	r2,r2,1
   215b4:	28800115 	stw	r2,4(r5)
   215b8:	80c00117 	ldw	r3,4(r16)
   215bc:	008000b4 	movhi	r2,2
   215c0:	10964604 	addi	r2,r2,22808
   215c4:	b009883a 	mov	r4,r22
   215c8:	18c0004c 	andi	r3,r3,1
   215cc:	e0c6b03a 	or	r3,fp,r3
   215d0:	11400215 	stw	r5,8(r2)
   215d4:	80c00115 	stw	r3,4(r16)
   215d8:	00232540 	call	23254 <__malloc_unlock>
   215dc:	84400204 	addi	r17,r16,8
   215e0:	003f2006 	br	21264 <_realloc_r+0xd8>
   215e4:	98a9883a 	add	r20,r19,r2
   215e8:	2509883a 	add	r4,r4,r20
   215ec:	e0800404 	addi	r2,fp,16
   215f0:	d9000115 	stw	r4,4(sp)
   215f4:	20bf7016 	blt	r4,r2,213b8 <_realloc_r+0x22c>
   215f8:	b8c00317 	ldw	r3,12(r23)
   215fc:	b8800217 	ldw	r2,8(r23)
   21600:	99bfff04 	addi	r6,r19,-4
   21604:	01400904 	movi	r5,36
   21608:	18800215 	stw	r2,8(r3)
   2160c:	10c00315 	stw	r3,12(r2)
   21610:	bc400204 	addi	r17,r23,8
   21614:	29804136 	bltu	r5,r6,2171c <_realloc_r+0x590>
   21618:	008004c4 	movi	r2,19
   2161c:	9009883a 	mov	r4,r18
   21620:	880f883a 	mov	r7,r17
   21624:	11800f2e 	bgeu	r2,r6,21664 <_realloc_r+0x4d8>
   21628:	90800017 	ldw	r2,0(r18)
   2162c:	b9c00404 	addi	r7,r23,16
   21630:	91000204 	addi	r4,r18,8
   21634:	b8800215 	stw	r2,8(r23)
   21638:	90c00117 	ldw	r3,4(r18)
   2163c:	008006c4 	movi	r2,27
   21640:	b8c00315 	stw	r3,12(r23)
   21644:	1180072e 	bgeu	r2,r6,21664 <_realloc_r+0x4d8>
   21648:	90c00217 	ldw	r3,8(r18)
   2164c:	b9c00604 	addi	r7,r23,24
   21650:	91000404 	addi	r4,r18,16
   21654:	b8c00415 	stw	r3,16(r23)
   21658:	90800317 	ldw	r2,12(r18)
   2165c:	b8800515 	stw	r2,20(r23)
   21660:	31404026 	beq	r6,r5,21764 <_realloc_r+0x5d8>
   21664:	20800017 	ldw	r2,0(r4)
   21668:	38800015 	stw	r2,0(r7)
   2166c:	20c00117 	ldw	r3,4(r4)
   21670:	38c00115 	stw	r3,4(r7)
   21674:	20800217 	ldw	r2,8(r4)
   21678:	38800215 	stw	r2,8(r7)
   2167c:	d8c00117 	ldw	r3,4(sp)
   21680:	bf0b883a 	add	r5,r23,fp
   21684:	b009883a 	mov	r4,r22
   21688:	1f05c83a 	sub	r2,r3,fp
   2168c:	10800054 	ori	r2,r2,1
   21690:	28800115 	stw	r2,4(r5)
   21694:	b8c00117 	ldw	r3,4(r23)
   21698:	008000b4 	movhi	r2,2
   2169c:	10964604 	addi	r2,r2,22808
   216a0:	11400215 	stw	r5,8(r2)
   216a4:	18c0004c 	andi	r3,r3,1
   216a8:	e0c6b03a 	or	r3,fp,r3
   216ac:	b8c00115 	stw	r3,4(r23)
   216b0:	00232540 	call	23254 <__malloc_unlock>
   216b4:	003eeb06 	br	21264 <_realloc_r+0xd8>
   216b8:	20800117 	ldw	r2,4(r4)
   216bc:	00ffff04 	movi	r3,-4
   216c0:	800f883a 	mov	r7,r16
   216c4:	10c4703a 	and	r2,r2,r3
   216c8:	98a9883a 	add	r20,r19,r2
   216cc:	84000204 	addi	r16,r16,8
   216d0:	003ecf06 	br	21210 <_realloc_r+0x84>
   216d4:	900b883a 	mov	r5,r18
   216d8:	8009883a 	mov	r4,r16
   216dc:	00210ac0 	call	210ac <memmove>
   216e0:	dd000017 	ldw	r20,0(sp)
   216e4:	b80f883a 	mov	r7,r23
   216e8:	003ec906 	br	21210 <_realloc_r+0x84>
   216ec:	900b883a 	mov	r5,r18
   216f0:	8009883a 	mov	r4,r16
   216f4:	00210ac0 	call	210ac <memmove>
   216f8:	b80f883a 	mov	r7,r23
   216fc:	003ec406 	br	21210 <_realloc_r+0x84>
   21700:	90c00417 	ldw	r3,16(r18)
   21704:	89400604 	addi	r5,r17,24
   21708:	91000604 	addi	r4,r18,24
   2170c:	88c00415 	stw	r3,16(r17)
   21710:	90800517 	ldw	r2,20(r18)
   21714:	88800515 	stw	r2,20(r17)
   21718:	003f6806 	br	214bc <_realloc_r+0x330>
   2171c:	900b883a 	mov	r5,r18
   21720:	8809883a 	mov	r4,r17
   21724:	00210ac0 	call	210ac <memmove>
   21728:	003fd406 	br	2167c <_realloc_r+0x4f0>
   2172c:	90c00417 	ldw	r3,16(r18)
   21730:	91000604 	addi	r4,r18,24
   21734:	ba000804 	addi	r8,r23,32
   21738:	b8c00615 	stw	r3,24(r23)
   2173c:	90800517 	ldw	r2,20(r18)
   21740:	b8800715 	stw	r2,28(r23)
   21744:	003f1206 	br	21390 <_realloc_r+0x204>
   21748:	90c00417 	ldw	r3,16(r18)
   2174c:	91000604 	addi	r4,r18,24
   21750:	ba000804 	addi	r8,r23,32
   21754:	b8c00615 	stw	r3,24(r23)
   21758:	90800517 	ldw	r2,20(r18)
   2175c:	b8800715 	stw	r2,28(r23)
   21760:	003f3206 	br	2142c <_realloc_r+0x2a0>
   21764:	90c00417 	ldw	r3,16(r18)
   21768:	91000604 	addi	r4,r18,24
   2176c:	b9c00804 	addi	r7,r23,32
   21770:	b8c00615 	stw	r3,24(r23)
   21774:	90800517 	ldw	r2,20(r18)
   21778:	b8800715 	stw	r2,28(r23)
   2177c:	003fb906 	br	21664 <_realloc_r+0x4d8>

00021780 <_sbrk_r>:
   21780:	defffd04 	addi	sp,sp,-12
   21784:	dc000015 	stw	r16,0(sp)
   21788:	040000f4 	movhi	r16,3
   2178c:	84226d04 	addi	r16,r16,-30284
   21790:	dc400115 	stw	r17,4(sp)
   21794:	80000015 	stw	zero,0(r16)
   21798:	2023883a 	mov	r17,r4
   2179c:	2809883a 	mov	r4,r5
   217a0:	dfc00215 	stw	ra,8(sp)
   217a4:	00234700 	call	23470 <sbrk>
   217a8:	1007883a 	mov	r3,r2
   217ac:	00bfffc4 	movi	r2,-1
   217b0:	18800626 	beq	r3,r2,217cc <_sbrk_r+0x4c>
   217b4:	1805883a 	mov	r2,r3
   217b8:	dfc00217 	ldw	ra,8(sp)
   217bc:	dc400117 	ldw	r17,4(sp)
   217c0:	dc000017 	ldw	r16,0(sp)
   217c4:	dec00304 	addi	sp,sp,12
   217c8:	f800283a 	ret
   217cc:	80800017 	ldw	r2,0(r16)
   217d0:	103ff826 	beq	r2,zero,217b4 <_sbrk_r+0x34>
   217d4:	88800015 	stw	r2,0(r17)
   217d8:	1805883a 	mov	r2,r3
   217dc:	dfc00217 	ldw	ra,8(sp)
   217e0:	dc400117 	ldw	r17,4(sp)
   217e4:	dc000017 	ldw	r16,0(sp)
   217e8:	dec00304 	addi	sp,sp,12
   217ec:	f800283a 	ret

000217f0 <__swsetup_r>:
   217f0:	008000b4 	movhi	r2,2
   217f4:	109bca04 	addi	r2,r2,28456
   217f8:	10c00017 	ldw	r3,0(r2)
   217fc:	defffd04 	addi	sp,sp,-12
   21800:	dc400115 	stw	r17,4(sp)
   21804:	dc000015 	stw	r16,0(sp)
   21808:	dfc00215 	stw	ra,8(sp)
   2180c:	2023883a 	mov	r17,r4
   21810:	2821883a 	mov	r16,r5
   21814:	18000226 	beq	r3,zero,21820 <__swsetup_r+0x30>
   21818:	18800e17 	ldw	r2,56(r3)
   2181c:	10001f26 	beq	r2,zero,2189c <__swsetup_r+0xac>
   21820:	8100030b 	ldhu	r4,12(r16)
   21824:	2080020c 	andi	r2,r4,8
   21828:	10002826 	beq	r2,zero,218cc <__swsetup_r+0xdc>
   2182c:	81400417 	ldw	r5,16(r16)
   21830:	28001d26 	beq	r5,zero,218a8 <__swsetup_r+0xb8>
   21834:	2080004c 	andi	r2,r4,1
   21838:	1005003a 	cmpeq	r2,r2,zero
   2183c:	10000b26 	beq	r2,zero,2186c <__swsetup_r+0x7c>
   21840:	2080008c 	andi	r2,r4,2
   21844:	10001226 	beq	r2,zero,21890 <__swsetup_r+0xa0>
   21848:	0005883a 	mov	r2,zero
   2184c:	80800215 	stw	r2,8(r16)
   21850:	28000b26 	beq	r5,zero,21880 <__swsetup_r+0x90>
   21854:	0005883a 	mov	r2,zero
   21858:	dfc00217 	ldw	ra,8(sp)
   2185c:	dc400117 	ldw	r17,4(sp)
   21860:	dc000017 	ldw	r16,0(sp)
   21864:	dec00304 	addi	sp,sp,12
   21868:	f800283a 	ret
   2186c:	80800517 	ldw	r2,20(r16)
   21870:	80000215 	stw	zero,8(r16)
   21874:	0085c83a 	sub	r2,zero,r2
   21878:	80800615 	stw	r2,24(r16)
   2187c:	283ff51e 	bne	r5,zero,21854 <__swsetup_r+0x64>
   21880:	2080200c 	andi	r2,r4,128
   21884:	103ff326 	beq	r2,zero,21854 <__swsetup_r+0x64>
   21888:	00bfffc4 	movi	r2,-1
   2188c:	003ff206 	br	21858 <__swsetup_r+0x68>
   21890:	80800517 	ldw	r2,20(r16)
   21894:	80800215 	stw	r2,8(r16)
   21898:	003fed06 	br	21850 <__swsetup_r+0x60>
   2189c:	1809883a 	mov	r4,r3
   218a0:	0021bc40 	call	21bc4 <__sinit>
   218a4:	003fde06 	br	21820 <__swsetup_r+0x30>
   218a8:	20c0a00c 	andi	r3,r4,640
   218ac:	00808004 	movi	r2,512
   218b0:	18bfe026 	beq	r3,r2,21834 <__swsetup_r+0x44>
   218b4:	8809883a 	mov	r4,r17
   218b8:	800b883a 	mov	r5,r16
   218bc:	00224100 	call	22410 <__smakebuf_r>
   218c0:	8100030b 	ldhu	r4,12(r16)
   218c4:	81400417 	ldw	r5,16(r16)
   218c8:	003fda06 	br	21834 <__swsetup_r+0x44>
   218cc:	2080040c 	andi	r2,r4,16
   218d0:	103fed26 	beq	r2,zero,21888 <__swsetup_r+0x98>
   218d4:	2080010c 	andi	r2,r4,4
   218d8:	10001226 	beq	r2,zero,21924 <__swsetup_r+0x134>
   218dc:	81400c17 	ldw	r5,48(r16)
   218e0:	28000526 	beq	r5,zero,218f8 <__swsetup_r+0x108>
   218e4:	80801004 	addi	r2,r16,64
   218e8:	28800226 	beq	r5,r2,218f4 <__swsetup_r+0x104>
   218ec:	8809883a 	mov	r4,r17
   218f0:	0021f7c0 	call	21f7c <_free_r>
   218f4:	80000c15 	stw	zero,48(r16)
   218f8:	8080030b 	ldhu	r2,12(r16)
   218fc:	81400417 	ldw	r5,16(r16)
   21900:	80000115 	stw	zero,4(r16)
   21904:	10bff6cc 	andi	r2,r2,65499
   21908:	8080030d 	sth	r2,12(r16)
   2190c:	81400015 	stw	r5,0(r16)
   21910:	8080030b 	ldhu	r2,12(r16)
   21914:	10800214 	ori	r2,r2,8
   21918:	113fffcc 	andi	r4,r2,65535
   2191c:	8080030d 	sth	r2,12(r16)
   21920:	003fc306 	br	21830 <__swsetup_r+0x40>
   21924:	81400417 	ldw	r5,16(r16)
   21928:	003ff906 	br	21910 <__swsetup_r+0x120>

0002192c <_fflush_r>:
   2192c:	defffb04 	addi	sp,sp,-20
   21930:	dcc00315 	stw	r19,12(sp)
   21934:	dc800215 	stw	r18,8(sp)
   21938:	dfc00415 	stw	ra,16(sp)
   2193c:	dc400115 	stw	r17,4(sp)
   21940:	dc000015 	stw	r16,0(sp)
   21944:	2027883a 	mov	r19,r4
   21948:	2825883a 	mov	r18,r5
   2194c:	20000226 	beq	r4,zero,21958 <_fflush_r+0x2c>
   21950:	20800e17 	ldw	r2,56(r4)
   21954:	10005626 	beq	r2,zero,21ab0 <_fflush_r+0x184>
   21958:	9100030b 	ldhu	r4,12(r18)
   2195c:	20ffffcc 	andi	r3,r4,65535
   21960:	18e0001c 	xori	r3,r3,32768
   21964:	18e00004 	addi	r3,r3,-32768
   21968:	1880020c 	andi	r2,r3,8
   2196c:	1000261e 	bne	r2,zero,21a08 <_fflush_r+0xdc>
   21970:	90c00117 	ldw	r3,4(r18)
   21974:	20820014 	ori	r2,r4,2048
   21978:	9080030d 	sth	r2,12(r18)
   2197c:	1009883a 	mov	r4,r2
   21980:	00c0400e 	bge	zero,r3,21a84 <_fflush_r+0x158>
   21984:	92000a17 	ldw	r8,40(r18)
   21988:	40004026 	beq	r8,zero,21a8c <_fflush_r+0x160>
   2198c:	2084000c 	andi	r2,r4,4096
   21990:	10005326 	beq	r2,zero,21ae0 <_fflush_r+0x1b4>
   21994:	94001417 	ldw	r16,80(r18)
   21998:	9080030b 	ldhu	r2,12(r18)
   2199c:	1080010c 	andi	r2,r2,4
   219a0:	1000481e 	bne	r2,zero,21ac4 <_fflush_r+0x198>
   219a4:	91400717 	ldw	r5,28(r18)
   219a8:	9809883a 	mov	r4,r19
   219ac:	800d883a 	mov	r6,r16
   219b0:	000f883a 	mov	r7,zero
   219b4:	403ee83a 	callr	r8
   219b8:	8080261e 	bne	r16,r2,21a54 <_fflush_r+0x128>
   219bc:	9080030b 	ldhu	r2,12(r18)
   219c0:	91000417 	ldw	r4,16(r18)
   219c4:	90000115 	stw	zero,4(r18)
   219c8:	10bdffcc 	andi	r2,r2,63487
   219cc:	10ffffcc 	andi	r3,r2,65535
   219d0:	18c4000c 	andi	r3,r3,4096
   219d4:	9080030d 	sth	r2,12(r18)
   219d8:	91000015 	stw	r4,0(r18)
   219dc:	18002b26 	beq	r3,zero,21a8c <_fflush_r+0x160>
   219e0:	0007883a 	mov	r3,zero
   219e4:	1805883a 	mov	r2,r3
   219e8:	94001415 	stw	r16,80(r18)
   219ec:	dfc00417 	ldw	ra,16(sp)
   219f0:	dcc00317 	ldw	r19,12(sp)
   219f4:	dc800217 	ldw	r18,8(sp)
   219f8:	dc400117 	ldw	r17,4(sp)
   219fc:	dc000017 	ldw	r16,0(sp)
   21a00:	dec00504 	addi	sp,sp,20
   21a04:	f800283a 	ret
   21a08:	94400417 	ldw	r17,16(r18)
   21a0c:	88001f26 	beq	r17,zero,21a8c <_fflush_r+0x160>
   21a10:	90800017 	ldw	r2,0(r18)
   21a14:	18c000cc 	andi	r3,r3,3
   21a18:	94400015 	stw	r17,0(r18)
   21a1c:	1461c83a 	sub	r16,r2,r17
   21a20:	18002526 	beq	r3,zero,21ab8 <_fflush_r+0x18c>
   21a24:	0005883a 	mov	r2,zero
   21a28:	90800215 	stw	r2,8(r18)
   21a2c:	0400170e 	bge	zero,r16,21a8c <_fflush_r+0x160>
   21a30:	90c00917 	ldw	r3,36(r18)
   21a34:	91400717 	ldw	r5,28(r18)
   21a38:	880d883a 	mov	r6,r17
   21a3c:	800f883a 	mov	r7,r16
   21a40:	9809883a 	mov	r4,r19
   21a44:	183ee83a 	callr	r3
   21a48:	88a3883a 	add	r17,r17,r2
   21a4c:	80a1c83a 	sub	r16,r16,r2
   21a50:	00bff616 	blt	zero,r2,21a2c <_fflush_r+0x100>
   21a54:	9080030b 	ldhu	r2,12(r18)
   21a58:	00ffffc4 	movi	r3,-1
   21a5c:	10801014 	ori	r2,r2,64
   21a60:	9080030d 	sth	r2,12(r18)
   21a64:	1805883a 	mov	r2,r3
   21a68:	dfc00417 	ldw	ra,16(sp)
   21a6c:	dcc00317 	ldw	r19,12(sp)
   21a70:	dc800217 	ldw	r18,8(sp)
   21a74:	dc400117 	ldw	r17,4(sp)
   21a78:	dc000017 	ldw	r16,0(sp)
   21a7c:	dec00504 	addi	sp,sp,20
   21a80:	f800283a 	ret
   21a84:	90800f17 	ldw	r2,60(r18)
   21a88:	00bfbe16 	blt	zero,r2,21984 <_fflush_r+0x58>
   21a8c:	0007883a 	mov	r3,zero
   21a90:	1805883a 	mov	r2,r3
   21a94:	dfc00417 	ldw	ra,16(sp)
   21a98:	dcc00317 	ldw	r19,12(sp)
   21a9c:	dc800217 	ldw	r18,8(sp)
   21aa0:	dc400117 	ldw	r17,4(sp)
   21aa4:	dc000017 	ldw	r16,0(sp)
   21aa8:	dec00504 	addi	sp,sp,20
   21aac:	f800283a 	ret
   21ab0:	0021bc40 	call	21bc4 <__sinit>
   21ab4:	003fa806 	br	21958 <_fflush_r+0x2c>
   21ab8:	90800517 	ldw	r2,20(r18)
   21abc:	90800215 	stw	r2,8(r18)
   21ac0:	003fda06 	br	21a2c <_fflush_r+0x100>
   21ac4:	90800117 	ldw	r2,4(r18)
   21ac8:	90c00c17 	ldw	r3,48(r18)
   21acc:	80a1c83a 	sub	r16,r16,r2
   21ad0:	183fb426 	beq	r3,zero,219a4 <_fflush_r+0x78>
   21ad4:	90800f17 	ldw	r2,60(r18)
   21ad8:	80a1c83a 	sub	r16,r16,r2
   21adc:	003fb106 	br	219a4 <_fflush_r+0x78>
   21ae0:	91400717 	ldw	r5,28(r18)
   21ae4:	9809883a 	mov	r4,r19
   21ae8:	000d883a 	mov	r6,zero
   21aec:	01c00044 	movi	r7,1
   21af0:	403ee83a 	callr	r8
   21af4:	1021883a 	mov	r16,r2
   21af8:	00bfffc4 	movi	r2,-1
   21afc:	80800226 	beq	r16,r2,21b08 <_fflush_r+0x1dc>
   21b00:	92000a17 	ldw	r8,40(r18)
   21b04:	003fa406 	br	21998 <_fflush_r+0x6c>
   21b08:	98c00017 	ldw	r3,0(r19)
   21b0c:	00800744 	movi	r2,29
   21b10:	18bfde26 	beq	r3,r2,21a8c <_fflush_r+0x160>
   21b14:	9080030b 	ldhu	r2,12(r18)
   21b18:	8007883a 	mov	r3,r16
   21b1c:	10801014 	ori	r2,r2,64
   21b20:	9080030d 	sth	r2,12(r18)
   21b24:	003fcf06 	br	21a64 <_fflush_r+0x138>

00021b28 <fflush>:
   21b28:	014000b4 	movhi	r5,2
   21b2c:	29464b04 	addi	r5,r5,6444
   21b30:	2007883a 	mov	r3,r4
   21b34:	20000526 	beq	r4,zero,21b4c <fflush+0x24>
   21b38:	008000b4 	movhi	r2,2
   21b3c:	109bca04 	addi	r2,r2,28456
   21b40:	11000017 	ldw	r4,0(r2)
   21b44:	180b883a 	mov	r5,r3
   21b48:	002192c1 	jmpi	2192c <_fflush_r>
   21b4c:	008000b4 	movhi	r2,2
   21b50:	109bcb04 	addi	r2,r2,28460
   21b54:	11000017 	ldw	r4,0(r2)
   21b58:	00222901 	jmpi	22290 <_fwalk_reent>

00021b5c <std>:
   21b5c:	008000b4 	movhi	r2,2
   21b60:	10898f04 	addi	r2,r2,9788
   21b64:	20800b15 	stw	r2,44(r4)
   21b68:	008000b4 	movhi	r2,2
   21b6c:	1089ca04 	addi	r2,r2,10024
   21b70:	20800815 	stw	r2,32(r4)
   21b74:	00c000b4 	movhi	r3,2
   21b78:	18c9ab04 	addi	r3,r3,9900
   21b7c:	008000b4 	movhi	r2,2
   21b80:	10899104 	addi	r2,r2,9796
   21b84:	2140030d 	sth	r5,12(r4)
   21b88:	2180038d 	sth	r6,14(r4)
   21b8c:	20c00915 	stw	r3,36(r4)
   21b90:	20800a15 	stw	r2,40(r4)
   21b94:	20000015 	stw	zero,0(r4)
   21b98:	20000115 	stw	zero,4(r4)
   21b9c:	20000215 	stw	zero,8(r4)
   21ba0:	20000415 	stw	zero,16(r4)
   21ba4:	20000515 	stw	zero,20(r4)
   21ba8:	20000615 	stw	zero,24(r4)
   21bac:	21000715 	stw	r4,28(r4)
   21bb0:	f800283a 	ret

00021bb4 <__sfp_lock_acquire>:
   21bb4:	f800283a 	ret

00021bb8 <__sfp_lock_release>:
   21bb8:	f800283a 	ret

00021bbc <__sinit_lock_acquire>:
   21bbc:	f800283a 	ret

00021bc0 <__sinit_lock_release>:
   21bc0:	f800283a 	ret

00021bc4 <__sinit>:
   21bc4:	20800e17 	ldw	r2,56(r4)
   21bc8:	defffd04 	addi	sp,sp,-12
   21bcc:	dc400115 	stw	r17,4(sp)
   21bd0:	dc000015 	stw	r16,0(sp)
   21bd4:	dfc00215 	stw	ra,8(sp)
   21bd8:	04400044 	movi	r17,1
   21bdc:	01400104 	movi	r5,4
   21be0:	000d883a 	mov	r6,zero
   21be4:	2021883a 	mov	r16,r4
   21be8:	2200bb04 	addi	r8,r4,748
   21bec:	200f883a 	mov	r7,r4
   21bf0:	10000526 	beq	r2,zero,21c08 <__sinit+0x44>
   21bf4:	dfc00217 	ldw	ra,8(sp)
   21bf8:	dc400117 	ldw	r17,4(sp)
   21bfc:	dc000017 	ldw	r16,0(sp)
   21c00:	dec00304 	addi	sp,sp,12
   21c04:	f800283a 	ret
   21c08:	21000117 	ldw	r4,4(r4)
   21c0c:	008000b4 	movhi	r2,2
   21c10:	10872a04 	addi	r2,r2,7336
   21c14:	00c000c4 	movi	r3,3
   21c18:	80800f15 	stw	r2,60(r16)
   21c1c:	80c0b915 	stw	r3,740(r16)
   21c20:	8200ba15 	stw	r8,744(r16)
   21c24:	84400e15 	stw	r17,56(r16)
   21c28:	8000b815 	stw	zero,736(r16)
   21c2c:	0021b5c0 	call	21b5c <std>
   21c30:	81000217 	ldw	r4,8(r16)
   21c34:	880d883a 	mov	r6,r17
   21c38:	800f883a 	mov	r7,r16
   21c3c:	01400284 	movi	r5,10
   21c40:	0021b5c0 	call	21b5c <std>
   21c44:	81000317 	ldw	r4,12(r16)
   21c48:	800f883a 	mov	r7,r16
   21c4c:	01400484 	movi	r5,18
   21c50:	01800084 	movi	r6,2
   21c54:	dfc00217 	ldw	ra,8(sp)
   21c58:	dc400117 	ldw	r17,4(sp)
   21c5c:	dc000017 	ldw	r16,0(sp)
   21c60:	dec00304 	addi	sp,sp,12
   21c64:	0021b5c1 	jmpi	21b5c <std>

00021c68 <__fp_lock>:
   21c68:	0005883a 	mov	r2,zero
   21c6c:	f800283a 	ret

00021c70 <__fp_unlock>:
   21c70:	0005883a 	mov	r2,zero
   21c74:	f800283a 	ret

00021c78 <__fp_unlock_all>:
   21c78:	008000b4 	movhi	r2,2
   21c7c:	109bca04 	addi	r2,r2,28456
   21c80:	11000017 	ldw	r4,0(r2)
   21c84:	014000b4 	movhi	r5,2
   21c88:	29471c04 	addi	r5,r5,7280
   21c8c:	00223581 	jmpi	22358 <_fwalk>

00021c90 <__fp_lock_all>:
   21c90:	008000b4 	movhi	r2,2
   21c94:	109bca04 	addi	r2,r2,28456
   21c98:	11000017 	ldw	r4,0(r2)
   21c9c:	014000b4 	movhi	r5,2
   21ca0:	29471a04 	addi	r5,r5,7272
   21ca4:	00223581 	jmpi	22358 <_fwalk>

00021ca8 <_cleanup_r>:
   21ca8:	014000b4 	movhi	r5,2
   21cac:	294a6004 	addi	r5,r5,10624
   21cb0:	00223581 	jmpi	22358 <_fwalk>

00021cb4 <_cleanup>:
   21cb4:	008000b4 	movhi	r2,2
   21cb8:	109bcb04 	addi	r2,r2,28460
   21cbc:	11000017 	ldw	r4,0(r2)
   21cc0:	0021ca81 	jmpi	21ca8 <_cleanup_r>

00021cc4 <__sfmoreglue>:
   21cc4:	defffc04 	addi	sp,sp,-16
   21cc8:	dc000015 	stw	r16,0(sp)
   21ccc:	2821883a 	mov	r16,r5
   21cd0:	dc400115 	stw	r17,4(sp)
   21cd4:	01401704 	movi	r5,92
   21cd8:	2023883a 	mov	r17,r4
   21cdc:	8009883a 	mov	r4,r16
   21ce0:	dfc00315 	stw	ra,12(sp)
   21ce4:	dcc00215 	stw	r19,8(sp)
   21ce8:	0022b680 	call	22b68 <__mulsi3>
   21cec:	11400304 	addi	r5,r2,12
   21cf0:	8809883a 	mov	r4,r17
   21cf4:	1027883a 	mov	r19,r2
   21cf8:	00207e80 	call	207e8 <_malloc_r>
   21cfc:	10c00304 	addi	r3,r2,12
   21d00:	1023883a 	mov	r17,r2
   21d04:	1809883a 	mov	r4,r3
   21d08:	980d883a 	mov	r6,r19
   21d0c:	000b883a 	mov	r5,zero
   21d10:	10000b26 	beq	r2,zero,21d40 <__sfmoreglue+0x7c>
   21d14:	14000115 	stw	r16,4(r2)
   21d18:	10c00215 	stw	r3,8(r2)
   21d1c:	10000015 	stw	zero,0(r2)
   21d20:	00225a40 	call	225a4 <memset>
   21d24:	8805883a 	mov	r2,r17
   21d28:	dfc00317 	ldw	ra,12(sp)
   21d2c:	dcc00217 	ldw	r19,8(sp)
   21d30:	dc400117 	ldw	r17,4(sp)
   21d34:	dc000017 	ldw	r16,0(sp)
   21d38:	dec00404 	addi	sp,sp,16
   21d3c:	f800283a 	ret
   21d40:	0023883a 	mov	r17,zero
   21d44:	8805883a 	mov	r2,r17
   21d48:	dfc00317 	ldw	ra,12(sp)
   21d4c:	dcc00217 	ldw	r19,8(sp)
   21d50:	dc400117 	ldw	r17,4(sp)
   21d54:	dc000017 	ldw	r16,0(sp)
   21d58:	dec00404 	addi	sp,sp,16
   21d5c:	f800283a 	ret

00021d60 <__sfp>:
   21d60:	defffd04 	addi	sp,sp,-12
   21d64:	008000b4 	movhi	r2,2
   21d68:	109bcb04 	addi	r2,r2,28460
   21d6c:	dc000015 	stw	r16,0(sp)
   21d70:	14000017 	ldw	r16,0(r2)
   21d74:	dc400115 	stw	r17,4(sp)
   21d78:	dfc00215 	stw	ra,8(sp)
   21d7c:	80800e17 	ldw	r2,56(r16)
   21d80:	2023883a 	mov	r17,r4
   21d84:	10002626 	beq	r2,zero,21e20 <__sfp+0xc0>
   21d88:	8400b804 	addi	r16,r16,736
   21d8c:	80800117 	ldw	r2,4(r16)
   21d90:	81000217 	ldw	r4,8(r16)
   21d94:	10ffffc4 	addi	r3,r2,-1
   21d98:	18000916 	blt	r3,zero,21dc0 <__sfp+0x60>
   21d9c:	2080030f 	ldh	r2,12(r4)
   21da0:	10000b26 	beq	r2,zero,21dd0 <__sfp+0x70>
   21da4:	017fffc4 	movi	r5,-1
   21da8:	00000206 	br	21db4 <__sfp+0x54>
   21dac:	2080030f 	ldh	r2,12(r4)
   21db0:	10000726 	beq	r2,zero,21dd0 <__sfp+0x70>
   21db4:	18ffffc4 	addi	r3,r3,-1
   21db8:	21001704 	addi	r4,r4,92
   21dbc:	197ffb1e 	bne	r3,r5,21dac <__sfp+0x4c>
   21dc0:	80800017 	ldw	r2,0(r16)
   21dc4:	10001926 	beq	r2,zero,21e2c <__sfp+0xcc>
   21dc8:	1021883a 	mov	r16,r2
   21dcc:	003fef06 	br	21d8c <__sfp+0x2c>
   21dd0:	00bfffc4 	movi	r2,-1
   21dd4:	00c00044 	movi	r3,1
   21dd8:	2080038d 	sth	r2,14(r4)
   21ddc:	20c0030d 	sth	r3,12(r4)
   21de0:	20000015 	stw	zero,0(r4)
   21de4:	20000215 	stw	zero,8(r4)
   21de8:	20000115 	stw	zero,4(r4)
   21dec:	20000415 	stw	zero,16(r4)
   21df0:	20000515 	stw	zero,20(r4)
   21df4:	20000615 	stw	zero,24(r4)
   21df8:	20000c15 	stw	zero,48(r4)
   21dfc:	20000d15 	stw	zero,52(r4)
   21e00:	20001115 	stw	zero,68(r4)
   21e04:	20001215 	stw	zero,72(r4)
   21e08:	2005883a 	mov	r2,r4
   21e0c:	dfc00217 	ldw	ra,8(sp)
   21e10:	dc400117 	ldw	r17,4(sp)
   21e14:	dc000017 	ldw	r16,0(sp)
   21e18:	dec00304 	addi	sp,sp,12
   21e1c:	f800283a 	ret
   21e20:	8009883a 	mov	r4,r16
   21e24:	0021bc40 	call	21bc4 <__sinit>
   21e28:	003fd706 	br	21d88 <__sfp+0x28>
   21e2c:	8809883a 	mov	r4,r17
   21e30:	01400104 	movi	r5,4
   21e34:	0021cc40 	call	21cc4 <__sfmoreglue>
   21e38:	80800015 	stw	r2,0(r16)
   21e3c:	103fe21e 	bne	r2,zero,21dc8 <__sfp+0x68>
   21e40:	00800304 	movi	r2,12
   21e44:	0009883a 	mov	r4,zero
   21e48:	88800015 	stw	r2,0(r17)
   21e4c:	003fee06 	br	21e08 <__sfp+0xa8>

00021e50 <_malloc_trim_r>:
   21e50:	defffb04 	addi	sp,sp,-20
   21e54:	dcc00315 	stw	r19,12(sp)
   21e58:	04c000b4 	movhi	r19,2
   21e5c:	9cd64604 	addi	r19,r19,22808
   21e60:	dc800215 	stw	r18,8(sp)
   21e64:	dc400115 	stw	r17,4(sp)
   21e68:	dc000015 	stw	r16,0(sp)
   21e6c:	2823883a 	mov	r17,r5
   21e70:	2025883a 	mov	r18,r4
   21e74:	dfc00415 	stw	ra,16(sp)
   21e78:	00232340 	call	23234 <__malloc_lock>
   21e7c:	98800217 	ldw	r2,8(r19)
   21e80:	9009883a 	mov	r4,r18
   21e84:	000b883a 	mov	r5,zero
   21e88:	10c00117 	ldw	r3,4(r2)
   21e8c:	00bfff04 	movi	r2,-4
   21e90:	18a0703a 	and	r16,r3,r2
   21e94:	8463c83a 	sub	r17,r16,r17
   21e98:	8c43fbc4 	addi	r17,r17,4079
   21e9c:	8822d33a 	srli	r17,r17,12
   21ea0:	0083ffc4 	movi	r2,4095
   21ea4:	8c7fffc4 	addi	r17,r17,-1
   21ea8:	8822933a 	slli	r17,r17,12
   21eac:	1440060e 	bge	r2,r17,21ec8 <_malloc_trim_r+0x78>
   21eb0:	00217800 	call	21780 <_sbrk_r>
   21eb4:	98c00217 	ldw	r3,8(r19)
   21eb8:	9009883a 	mov	r4,r18
   21ebc:	044bc83a 	sub	r5,zero,r17
   21ec0:	80c7883a 	add	r3,r16,r3
   21ec4:	10c00926 	beq	r2,r3,21eec <_malloc_trim_r+0x9c>
   21ec8:	00232540 	call	23254 <__malloc_unlock>
   21ecc:	0005883a 	mov	r2,zero
   21ed0:	dfc00417 	ldw	ra,16(sp)
   21ed4:	dcc00317 	ldw	r19,12(sp)
   21ed8:	dc800217 	ldw	r18,8(sp)
   21edc:	dc400117 	ldw	r17,4(sp)
   21ee0:	dc000017 	ldw	r16,0(sp)
   21ee4:	dec00504 	addi	sp,sp,20
   21ee8:	f800283a 	ret
   21eec:	9009883a 	mov	r4,r18
   21ef0:	00217800 	call	21780 <_sbrk_r>
   21ef4:	844dc83a 	sub	r6,r16,r17
   21ef8:	00ffffc4 	movi	r3,-1
   21efc:	9009883a 	mov	r4,r18
   21f00:	000b883a 	mov	r5,zero
   21f04:	01c000f4 	movhi	r7,3
   21f08:	39e27404 	addi	r7,r7,-30256
   21f0c:	31800054 	ori	r6,r6,1
   21f10:	10c00926 	beq	r2,r3,21f38 <_malloc_trim_r+0xe8>
   21f14:	38800017 	ldw	r2,0(r7)
   21f18:	98c00217 	ldw	r3,8(r19)
   21f1c:	9009883a 	mov	r4,r18
   21f20:	1445c83a 	sub	r2,r2,r17
   21f24:	38800015 	stw	r2,0(r7)
   21f28:	19800115 	stw	r6,4(r3)
   21f2c:	00232540 	call	23254 <__malloc_unlock>
   21f30:	00800044 	movi	r2,1
   21f34:	003fe606 	br	21ed0 <_malloc_trim_r+0x80>
   21f38:	00217800 	call	21780 <_sbrk_r>
   21f3c:	99800217 	ldw	r6,8(r19)
   21f40:	100f883a 	mov	r7,r2
   21f44:	9009883a 	mov	r4,r18
   21f48:	1187c83a 	sub	r3,r2,r6
   21f4c:	008003c4 	movi	r2,15
   21f50:	19400054 	ori	r5,r3,1
   21f54:	10ffdc0e 	bge	r2,r3,21ec8 <_malloc_trim_r+0x78>
   21f58:	008000b4 	movhi	r2,2
   21f5c:	109bcd04 	addi	r2,r2,28468
   21f60:	10c00017 	ldw	r3,0(r2)
   21f64:	008000f4 	movhi	r2,3
   21f68:	10a27404 	addi	r2,r2,-30256
   21f6c:	31400115 	stw	r5,4(r6)
   21f70:	38c7c83a 	sub	r3,r7,r3
   21f74:	10c00015 	stw	r3,0(r2)
   21f78:	003fd306 	br	21ec8 <_malloc_trim_r+0x78>

00021f7c <_free_r>:
   21f7c:	defffd04 	addi	sp,sp,-12
   21f80:	dc400115 	stw	r17,4(sp)
   21f84:	dc000015 	stw	r16,0(sp)
   21f88:	dfc00215 	stw	ra,8(sp)
   21f8c:	2821883a 	mov	r16,r5
   21f90:	2023883a 	mov	r17,r4
   21f94:	28005a26 	beq	r5,zero,22100 <_free_r+0x184>
   21f98:	00232340 	call	23234 <__malloc_lock>
   21f9c:	823ffe04 	addi	r8,r16,-8
   21fa0:	41400117 	ldw	r5,4(r8)
   21fa4:	00bfff84 	movi	r2,-2
   21fa8:	028000b4 	movhi	r10,2
   21fac:	52964604 	addi	r10,r10,22808
   21fb0:	288e703a 	and	r7,r5,r2
   21fb4:	41cd883a 	add	r6,r8,r7
   21fb8:	30c00117 	ldw	r3,4(r6)
   21fbc:	51000217 	ldw	r4,8(r10)
   21fc0:	00bfff04 	movi	r2,-4
   21fc4:	1892703a 	and	r9,r3,r2
   21fc8:	5017883a 	mov	r11,r10
   21fcc:	31006726 	beq	r6,r4,2216c <_free_r+0x1f0>
   21fd0:	2880004c 	andi	r2,r5,1
   21fd4:	1005003a 	cmpeq	r2,r2,zero
   21fd8:	32400115 	stw	r9,4(r6)
   21fdc:	10001a1e 	bne	r2,zero,22048 <_free_r+0xcc>
   21fe0:	000b883a 	mov	r5,zero
   21fe4:	3247883a 	add	r3,r6,r9
   21fe8:	18800117 	ldw	r2,4(r3)
   21fec:	1080004c 	andi	r2,r2,1
   21ff0:	1000231e 	bne	r2,zero,22080 <_free_r+0x104>
   21ff4:	280ac03a 	cmpne	r5,r5,zero
   21ff8:	3a4f883a 	add	r7,r7,r9
   21ffc:	2800451e 	bne	r5,zero,22114 <_free_r+0x198>
   22000:	31000217 	ldw	r4,8(r6)
   22004:	008000b4 	movhi	r2,2
   22008:	10964804 	addi	r2,r2,22816
   2200c:	20807b26 	beq	r4,r2,221fc <_free_r+0x280>
   22010:	30800317 	ldw	r2,12(r6)
   22014:	3a07883a 	add	r3,r7,r8
   22018:	19c00015 	stw	r7,0(r3)
   2201c:	11000215 	stw	r4,8(r2)
   22020:	20800315 	stw	r2,12(r4)
   22024:	38800054 	ori	r2,r7,1
   22028:	40800115 	stw	r2,4(r8)
   2202c:	28001a26 	beq	r5,zero,22098 <_free_r+0x11c>
   22030:	8809883a 	mov	r4,r17
   22034:	dfc00217 	ldw	ra,8(sp)
   22038:	dc400117 	ldw	r17,4(sp)
   2203c:	dc000017 	ldw	r16,0(sp)
   22040:	dec00304 	addi	sp,sp,12
   22044:	00232541 	jmpi	23254 <__malloc_unlock>
   22048:	80bffe17 	ldw	r2,-8(r16)
   2204c:	50c00204 	addi	r3,r10,8
   22050:	4091c83a 	sub	r8,r8,r2
   22054:	41000217 	ldw	r4,8(r8)
   22058:	388f883a 	add	r7,r7,r2
   2205c:	20c06126 	beq	r4,r3,221e4 <_free_r+0x268>
   22060:	40800317 	ldw	r2,12(r8)
   22064:	3247883a 	add	r3,r6,r9
   22068:	000b883a 	mov	r5,zero
   2206c:	11000215 	stw	r4,8(r2)
   22070:	20800315 	stw	r2,12(r4)
   22074:	18800117 	ldw	r2,4(r3)
   22078:	1080004c 	andi	r2,r2,1
   2207c:	103fdd26 	beq	r2,zero,21ff4 <_free_r+0x78>
   22080:	38800054 	ori	r2,r7,1
   22084:	3a07883a 	add	r3,r7,r8
   22088:	280ac03a 	cmpne	r5,r5,zero
   2208c:	40800115 	stw	r2,4(r8)
   22090:	19c00015 	stw	r7,0(r3)
   22094:	283fe61e 	bne	r5,zero,22030 <_free_r+0xb4>
   22098:	00807fc4 	movi	r2,511
   2209c:	11c01f2e 	bgeu	r2,r7,2211c <_free_r+0x1a0>
   220a0:	3806d27a 	srli	r3,r7,9
   220a4:	1800481e 	bne	r3,zero,221c8 <_free_r+0x24c>
   220a8:	3804d0fa 	srli	r2,r7,3
   220ac:	100690fa 	slli	r3,r2,3
   220b0:	1acd883a 	add	r6,r3,r11
   220b4:	31400217 	ldw	r5,8(r6)
   220b8:	31405926 	beq	r6,r5,22220 <_free_r+0x2a4>
   220bc:	28800117 	ldw	r2,4(r5)
   220c0:	00ffff04 	movi	r3,-4
   220c4:	10c4703a 	and	r2,r2,r3
   220c8:	3880022e 	bgeu	r7,r2,220d4 <_free_r+0x158>
   220cc:	29400217 	ldw	r5,8(r5)
   220d0:	317ffa1e 	bne	r6,r5,220bc <_free_r+0x140>
   220d4:	29800317 	ldw	r6,12(r5)
   220d8:	41800315 	stw	r6,12(r8)
   220dc:	41400215 	stw	r5,8(r8)
   220e0:	8809883a 	mov	r4,r17
   220e4:	2a000315 	stw	r8,12(r5)
   220e8:	32000215 	stw	r8,8(r6)
   220ec:	dfc00217 	ldw	ra,8(sp)
   220f0:	dc400117 	ldw	r17,4(sp)
   220f4:	dc000017 	ldw	r16,0(sp)
   220f8:	dec00304 	addi	sp,sp,12
   220fc:	00232541 	jmpi	23254 <__malloc_unlock>
   22100:	dfc00217 	ldw	ra,8(sp)
   22104:	dc400117 	ldw	r17,4(sp)
   22108:	dc000017 	ldw	r16,0(sp)
   2210c:	dec00304 	addi	sp,sp,12
   22110:	f800283a 	ret
   22114:	31000217 	ldw	r4,8(r6)
   22118:	003fbd06 	br	22010 <_free_r+0x94>
   2211c:	3806d0fa 	srli	r3,r7,3
   22120:	00800044 	movi	r2,1
   22124:	51400117 	ldw	r5,4(r10)
   22128:	180890fa 	slli	r4,r3,3
   2212c:	1807d0ba 	srai	r3,r3,2
   22130:	22c9883a 	add	r4,r4,r11
   22134:	21800217 	ldw	r6,8(r4)
   22138:	10c4983a 	sll	r2,r2,r3
   2213c:	41000315 	stw	r4,12(r8)
   22140:	41800215 	stw	r6,8(r8)
   22144:	288ab03a 	or	r5,r5,r2
   22148:	22000215 	stw	r8,8(r4)
   2214c:	8809883a 	mov	r4,r17
   22150:	51400115 	stw	r5,4(r10)
   22154:	32000315 	stw	r8,12(r6)
   22158:	dfc00217 	ldw	ra,8(sp)
   2215c:	dc400117 	ldw	r17,4(sp)
   22160:	dc000017 	ldw	r16,0(sp)
   22164:	dec00304 	addi	sp,sp,12
   22168:	00232541 	jmpi	23254 <__malloc_unlock>
   2216c:	2880004c 	andi	r2,r5,1
   22170:	3a4d883a 	add	r6,r7,r9
   22174:	1000071e 	bne	r2,zero,22194 <_free_r+0x218>
   22178:	80bffe17 	ldw	r2,-8(r16)
   2217c:	4091c83a 	sub	r8,r8,r2
   22180:	41000317 	ldw	r4,12(r8)
   22184:	40c00217 	ldw	r3,8(r8)
   22188:	308d883a 	add	r6,r6,r2
   2218c:	20c00215 	stw	r3,8(r4)
   22190:	19000315 	stw	r4,12(r3)
   22194:	008000b4 	movhi	r2,2
   22198:	109bcc04 	addi	r2,r2,28464
   2219c:	11000017 	ldw	r4,0(r2)
   221a0:	30c00054 	ori	r3,r6,1
   221a4:	52000215 	stw	r8,8(r10)
   221a8:	40c00115 	stw	r3,4(r8)
   221ac:	313fa036 	bltu	r6,r4,22030 <_free_r+0xb4>
   221b0:	008000f4 	movhi	r2,3
   221b4:	10a26a04 	addi	r2,r2,-30296
   221b8:	11400017 	ldw	r5,0(r2)
   221bc:	8809883a 	mov	r4,r17
   221c0:	0021e500 	call	21e50 <_malloc_trim_r>
   221c4:	003f9a06 	br	22030 <_free_r+0xb4>
   221c8:	00800104 	movi	r2,4
   221cc:	10c0072e 	bgeu	r2,r3,221ec <_free_r+0x270>
   221d0:	00800504 	movi	r2,20
   221d4:	10c01936 	bltu	r2,r3,2223c <_free_r+0x2c0>
   221d8:	188016c4 	addi	r2,r3,91
   221dc:	100690fa 	slli	r3,r2,3
   221e0:	003fb306 	br	220b0 <_free_r+0x134>
   221e4:	01400044 	movi	r5,1
   221e8:	003f7e06 	br	21fe4 <_free_r+0x68>
   221ec:	3804d1ba 	srli	r2,r7,6
   221f0:	10800e04 	addi	r2,r2,56
   221f4:	100690fa 	slli	r3,r2,3
   221f8:	003fad06 	br	220b0 <_free_r+0x134>
   221fc:	22000315 	stw	r8,12(r4)
   22200:	22000215 	stw	r8,8(r4)
   22204:	3a05883a 	add	r2,r7,r8
   22208:	38c00054 	ori	r3,r7,1
   2220c:	11c00015 	stw	r7,0(r2)
   22210:	41000215 	stw	r4,8(r8)
   22214:	40c00115 	stw	r3,4(r8)
   22218:	41000315 	stw	r4,12(r8)
   2221c:	003f8406 	br	22030 <_free_r+0xb4>
   22220:	1005d0ba 	srai	r2,r2,2
   22224:	00c00044 	movi	r3,1
   22228:	51000117 	ldw	r4,4(r10)
   2222c:	1886983a 	sll	r3,r3,r2
   22230:	20c8b03a 	or	r4,r4,r3
   22234:	51000115 	stw	r4,4(r10)
   22238:	003fa706 	br	220d8 <_free_r+0x15c>
   2223c:	00801504 	movi	r2,84
   22240:	10c00436 	bltu	r2,r3,22254 <_free_r+0x2d8>
   22244:	3804d33a 	srli	r2,r7,12
   22248:	10801b84 	addi	r2,r2,110
   2224c:	100690fa 	slli	r3,r2,3
   22250:	003f9706 	br	220b0 <_free_r+0x134>
   22254:	00805504 	movi	r2,340
   22258:	10c00436 	bltu	r2,r3,2226c <_free_r+0x2f0>
   2225c:	3804d3fa 	srli	r2,r7,15
   22260:	10801dc4 	addi	r2,r2,119
   22264:	100690fa 	slli	r3,r2,3
   22268:	003f9106 	br	220b0 <_free_r+0x134>
   2226c:	00815504 	movi	r2,1364
   22270:	10c0032e 	bgeu	r2,r3,22280 <_free_r+0x304>
   22274:	00801f84 	movi	r2,126
   22278:	00c0fc04 	movi	r3,1008
   2227c:	003f8c06 	br	220b0 <_free_r+0x134>
   22280:	3804d4ba 	srli	r2,r7,18
   22284:	10801f04 	addi	r2,r2,124
   22288:	100690fa 	slli	r3,r2,3
   2228c:	003f8806 	br	220b0 <_free_r+0x134>

00022290 <_fwalk_reent>:
   22290:	defff704 	addi	sp,sp,-36
   22294:	dcc00315 	stw	r19,12(sp)
   22298:	24c0b804 	addi	r19,r4,736
   2229c:	dd800615 	stw	r22,24(sp)
   222a0:	dd400515 	stw	r21,20(sp)
   222a4:	dfc00815 	stw	ra,32(sp)
   222a8:	ddc00715 	stw	r23,28(sp)
   222ac:	dd000415 	stw	r20,16(sp)
   222b0:	dc800215 	stw	r18,8(sp)
   222b4:	dc400115 	stw	r17,4(sp)
   222b8:	dc000015 	stw	r16,0(sp)
   222bc:	202b883a 	mov	r21,r4
   222c0:	282d883a 	mov	r22,r5
   222c4:	0021bb40 	call	21bb4 <__sfp_lock_acquire>
   222c8:	98002126 	beq	r19,zero,22350 <_fwalk_reent+0xc0>
   222cc:	002f883a 	mov	r23,zero
   222d0:	9c800117 	ldw	r18,4(r19)
   222d4:	9c000217 	ldw	r16,8(r19)
   222d8:	90bfffc4 	addi	r2,r18,-1
   222dc:	10000d16 	blt	r2,zero,22314 <_fwalk_reent+0x84>
   222e0:	0023883a 	mov	r17,zero
   222e4:	053fffc4 	movi	r20,-1
   222e8:	8080030f 	ldh	r2,12(r16)
   222ec:	8c400044 	addi	r17,r17,1
   222f0:	10000626 	beq	r2,zero,2230c <_fwalk_reent+0x7c>
   222f4:	8080038f 	ldh	r2,14(r16)
   222f8:	800b883a 	mov	r5,r16
   222fc:	a809883a 	mov	r4,r21
   22300:	15000226 	beq	r2,r20,2230c <_fwalk_reent+0x7c>
   22304:	b03ee83a 	callr	r22
   22308:	b8aeb03a 	or	r23,r23,r2
   2230c:	84001704 	addi	r16,r16,92
   22310:	947ff51e 	bne	r18,r17,222e8 <_fwalk_reent+0x58>
   22314:	9cc00017 	ldw	r19,0(r19)
   22318:	983fed1e 	bne	r19,zero,222d0 <_fwalk_reent+0x40>
   2231c:	0021bb80 	call	21bb8 <__sfp_lock_release>
   22320:	b805883a 	mov	r2,r23
   22324:	dfc00817 	ldw	ra,32(sp)
   22328:	ddc00717 	ldw	r23,28(sp)
   2232c:	dd800617 	ldw	r22,24(sp)
   22330:	dd400517 	ldw	r21,20(sp)
   22334:	dd000417 	ldw	r20,16(sp)
   22338:	dcc00317 	ldw	r19,12(sp)
   2233c:	dc800217 	ldw	r18,8(sp)
   22340:	dc400117 	ldw	r17,4(sp)
   22344:	dc000017 	ldw	r16,0(sp)
   22348:	dec00904 	addi	sp,sp,36
   2234c:	f800283a 	ret
   22350:	002f883a 	mov	r23,zero
   22354:	003ff106 	br	2231c <_fwalk_reent+0x8c>

00022358 <_fwalk>:
   22358:	defff804 	addi	sp,sp,-32
   2235c:	dcc00315 	stw	r19,12(sp)
   22360:	24c0b804 	addi	r19,r4,736
   22364:	dd400515 	stw	r21,20(sp)
   22368:	dfc00715 	stw	ra,28(sp)
   2236c:	dd800615 	stw	r22,24(sp)
   22370:	dd000415 	stw	r20,16(sp)
   22374:	dc800215 	stw	r18,8(sp)
   22378:	dc400115 	stw	r17,4(sp)
   2237c:	dc000015 	stw	r16,0(sp)
   22380:	282b883a 	mov	r21,r5
   22384:	0021bb40 	call	21bb4 <__sfp_lock_acquire>
   22388:	98001f26 	beq	r19,zero,22408 <_fwalk+0xb0>
   2238c:	002d883a 	mov	r22,zero
   22390:	9c800117 	ldw	r18,4(r19)
   22394:	9c000217 	ldw	r16,8(r19)
   22398:	90bfffc4 	addi	r2,r18,-1
   2239c:	10000c16 	blt	r2,zero,223d0 <_fwalk+0x78>
   223a0:	0023883a 	mov	r17,zero
   223a4:	053fffc4 	movi	r20,-1
   223a8:	8080030f 	ldh	r2,12(r16)
   223ac:	8c400044 	addi	r17,r17,1
   223b0:	10000526 	beq	r2,zero,223c8 <_fwalk+0x70>
   223b4:	8080038f 	ldh	r2,14(r16)
   223b8:	8009883a 	mov	r4,r16
   223bc:	15000226 	beq	r2,r20,223c8 <_fwalk+0x70>
   223c0:	a83ee83a 	callr	r21
   223c4:	b0acb03a 	or	r22,r22,r2
   223c8:	84001704 	addi	r16,r16,92
   223cc:	947ff61e 	bne	r18,r17,223a8 <_fwalk+0x50>
   223d0:	9cc00017 	ldw	r19,0(r19)
   223d4:	983fee1e 	bne	r19,zero,22390 <_fwalk+0x38>
   223d8:	0021bb80 	call	21bb8 <__sfp_lock_release>
   223dc:	b005883a 	mov	r2,r22
   223e0:	dfc00717 	ldw	ra,28(sp)
   223e4:	dd800617 	ldw	r22,24(sp)
   223e8:	dd400517 	ldw	r21,20(sp)
   223ec:	dd000417 	ldw	r20,16(sp)
   223f0:	dcc00317 	ldw	r19,12(sp)
   223f4:	dc800217 	ldw	r18,8(sp)
   223f8:	dc400117 	ldw	r17,4(sp)
   223fc:	dc000017 	ldw	r16,0(sp)
   22400:	dec00804 	addi	sp,sp,32
   22404:	f800283a 	ret
   22408:	002d883a 	mov	r22,zero
   2240c:	003ff206 	br	223d8 <_fwalk+0x80>

00022410 <__smakebuf_r>:
   22410:	2880030b 	ldhu	r2,12(r5)
   22414:	deffed04 	addi	sp,sp,-76
   22418:	dc401015 	stw	r17,64(sp)
   2241c:	1080008c 	andi	r2,r2,2
   22420:	dc000f15 	stw	r16,60(sp)
   22424:	dfc01215 	stw	ra,72(sp)
   22428:	dc801115 	stw	r18,68(sp)
   2242c:	2821883a 	mov	r16,r5
   22430:	2023883a 	mov	r17,r4
   22434:	10000b26 	beq	r2,zero,22464 <__smakebuf_r+0x54>
   22438:	28c010c4 	addi	r3,r5,67
   2243c:	00800044 	movi	r2,1
   22440:	28800515 	stw	r2,20(r5)
   22444:	28c00415 	stw	r3,16(r5)
   22448:	28c00015 	stw	r3,0(r5)
   2244c:	dfc01217 	ldw	ra,72(sp)
   22450:	dc801117 	ldw	r18,68(sp)
   22454:	dc401017 	ldw	r17,64(sp)
   22458:	dc000f17 	ldw	r16,60(sp)
   2245c:	dec01304 	addi	sp,sp,76
   22460:	f800283a 	ret
   22464:	2940038f 	ldh	r5,14(r5)
   22468:	28002116 	blt	r5,zero,224f0 <__smakebuf_r+0xe0>
   2246c:	d80d883a 	mov	r6,sp
   22470:	00229940 	call	22994 <_fstat_r>
   22474:	10001e16 	blt	r2,zero,224f0 <__smakebuf_r+0xe0>
   22478:	d8800117 	ldw	r2,4(sp)
   2247c:	00e00014 	movui	r3,32768
   22480:	113c000c 	andi	r4,r2,61440
   22484:	20c03126 	beq	r4,r3,2254c <__smakebuf_r+0x13c>
   22488:	8080030b 	ldhu	r2,12(r16)
   2248c:	00c80004 	movi	r3,8192
   22490:	10820014 	ori	r2,r2,2048
   22494:	8080030d 	sth	r2,12(r16)
   22498:	20c01e26 	beq	r4,r3,22514 <__smakebuf_r+0x104>
   2249c:	04810004 	movi	r18,1024
   224a0:	8809883a 	mov	r4,r17
   224a4:	900b883a 	mov	r5,r18
   224a8:	00207e80 	call	207e8 <_malloc_r>
   224ac:	1009883a 	mov	r4,r2
   224b0:	10003126 	beq	r2,zero,22578 <__smakebuf_r+0x168>
   224b4:	80c0030b 	ldhu	r3,12(r16)
   224b8:	008000b4 	movhi	r2,2
   224bc:	10872a04 	addi	r2,r2,7336
   224c0:	88800f15 	stw	r2,60(r17)
   224c4:	18c02014 	ori	r3,r3,128
   224c8:	84800515 	stw	r18,20(r16)
   224cc:	80c0030d 	sth	r3,12(r16)
   224d0:	81000415 	stw	r4,16(r16)
   224d4:	81000015 	stw	r4,0(r16)
   224d8:	dfc01217 	ldw	ra,72(sp)
   224dc:	dc801117 	ldw	r18,68(sp)
   224e0:	dc401017 	ldw	r17,64(sp)
   224e4:	dc000f17 	ldw	r16,60(sp)
   224e8:	dec01304 	addi	sp,sp,76
   224ec:	f800283a 	ret
   224f0:	80c0030b 	ldhu	r3,12(r16)
   224f4:	1880200c 	andi	r2,r3,128
   224f8:	10000426 	beq	r2,zero,2250c <__smakebuf_r+0xfc>
   224fc:	04801004 	movi	r18,64
   22500:	18820014 	ori	r2,r3,2048
   22504:	8080030d 	sth	r2,12(r16)
   22508:	003fe506 	br	224a0 <__smakebuf_r+0x90>
   2250c:	04810004 	movi	r18,1024
   22510:	003ffb06 	br	22500 <__smakebuf_r+0xf0>
   22514:	8140038f 	ldh	r5,14(r16)
   22518:	8809883a 	mov	r4,r17
   2251c:	0022a080 	call	22a08 <_isatty_r>
   22520:	103fde26 	beq	r2,zero,2249c <__smakebuf_r+0x8c>
   22524:	8080030b 	ldhu	r2,12(r16)
   22528:	80c010c4 	addi	r3,r16,67
   2252c:	04810004 	movi	r18,1024
   22530:	10800054 	ori	r2,r2,1
   22534:	8080030d 	sth	r2,12(r16)
   22538:	00800044 	movi	r2,1
   2253c:	80c00415 	stw	r3,16(r16)
   22540:	80800515 	stw	r2,20(r16)
   22544:	80c00015 	stw	r3,0(r16)
   22548:	003fd506 	br	224a0 <__smakebuf_r+0x90>
   2254c:	80c00a17 	ldw	r3,40(r16)
   22550:	008000b4 	movhi	r2,2
   22554:	10899104 	addi	r2,r2,9796
   22558:	18bfcb1e 	bne	r3,r2,22488 <__smakebuf_r+0x78>
   2255c:	8080030b 	ldhu	r2,12(r16)
   22560:	00c10004 	movi	r3,1024
   22564:	1825883a 	mov	r18,r3
   22568:	10c4b03a 	or	r2,r2,r3
   2256c:	8080030d 	sth	r2,12(r16)
   22570:	80c01315 	stw	r3,76(r16)
   22574:	003fca06 	br	224a0 <__smakebuf_r+0x90>
   22578:	8100030b 	ldhu	r4,12(r16)
   2257c:	2080800c 	andi	r2,r4,512
   22580:	103fb21e 	bne	r2,zero,2244c <__smakebuf_r+0x3c>
   22584:	80c010c4 	addi	r3,r16,67
   22588:	21000094 	ori	r4,r4,2
   2258c:	00800044 	movi	r2,1
   22590:	80800515 	stw	r2,20(r16)
   22594:	8100030d 	sth	r4,12(r16)
   22598:	80c00415 	stw	r3,16(r16)
   2259c:	80c00015 	stw	r3,0(r16)
   225a0:	003faa06 	br	2244c <__smakebuf_r+0x3c>

000225a4 <memset>:
   225a4:	008000c4 	movi	r2,3
   225a8:	29403fcc 	andi	r5,r5,255
   225ac:	2007883a 	mov	r3,r4
   225b0:	1180022e 	bgeu	r2,r6,225bc <memset+0x18>
   225b4:	2084703a 	and	r2,r4,r2
   225b8:	10000826 	beq	r2,zero,225dc <memset+0x38>
   225bc:	30000526 	beq	r6,zero,225d4 <memset+0x30>
   225c0:	2805883a 	mov	r2,r5
   225c4:	30cd883a 	add	r6,r6,r3
   225c8:	18800005 	stb	r2,0(r3)
   225cc:	18c00044 	addi	r3,r3,1
   225d0:	19bffd1e 	bne	r3,r6,225c8 <memset+0x24>
   225d4:	2005883a 	mov	r2,r4
   225d8:	f800283a 	ret
   225dc:	2804923a 	slli	r2,r5,8
   225e0:	020003c4 	movi	r8,15
   225e4:	200f883a 	mov	r7,r4
   225e8:	2884b03a 	or	r2,r5,r2
   225ec:	1006943a 	slli	r3,r2,16
   225f0:	10c6b03a 	or	r3,r2,r3
   225f4:	41800a2e 	bgeu	r8,r6,22620 <memset+0x7c>
   225f8:	4005883a 	mov	r2,r8
   225fc:	31bffc04 	addi	r6,r6,-16
   22600:	38c00015 	stw	r3,0(r7)
   22604:	38c00115 	stw	r3,4(r7)
   22608:	38c00215 	stw	r3,8(r7)
   2260c:	38c00315 	stw	r3,12(r7)
   22610:	39c00404 	addi	r7,r7,16
   22614:	11bff936 	bltu	r2,r6,225fc <memset+0x58>
   22618:	008000c4 	movi	r2,3
   2261c:	1180052e 	bgeu	r2,r6,22634 <memset+0x90>
   22620:	31bfff04 	addi	r6,r6,-4
   22624:	008000c4 	movi	r2,3
   22628:	38c00015 	stw	r3,0(r7)
   2262c:	39c00104 	addi	r7,r7,4
   22630:	11bffb36 	bltu	r2,r6,22620 <memset+0x7c>
   22634:	3807883a 	mov	r3,r7
   22638:	003fe006 	br	225bc <memset+0x18>

0002263c <__sclose>:
   2263c:	2940038f 	ldh	r5,14(r5)
   22640:	00228001 	jmpi	22800 <_close_r>

00022644 <__sseek>:
   22644:	defffe04 	addi	sp,sp,-8
   22648:	dc000015 	stw	r16,0(sp)
   2264c:	2821883a 	mov	r16,r5
   22650:	2940038f 	ldh	r5,14(r5)
   22654:	dfc00115 	stw	ra,4(sp)
   22658:	0022a780 	call	22a78 <_lseek_r>
   2265c:	1007883a 	mov	r3,r2
   22660:	00bfffc4 	movi	r2,-1
   22664:	18800926 	beq	r3,r2,2268c <__sseek+0x48>
   22668:	8080030b 	ldhu	r2,12(r16)
   2266c:	80c01415 	stw	r3,80(r16)
   22670:	10840014 	ori	r2,r2,4096
   22674:	8080030d 	sth	r2,12(r16)
   22678:	1805883a 	mov	r2,r3
   2267c:	dfc00117 	ldw	ra,4(sp)
   22680:	dc000017 	ldw	r16,0(sp)
   22684:	dec00204 	addi	sp,sp,8
   22688:	f800283a 	ret
   2268c:	8080030b 	ldhu	r2,12(r16)
   22690:	10bbffcc 	andi	r2,r2,61439
   22694:	8080030d 	sth	r2,12(r16)
   22698:	1805883a 	mov	r2,r3
   2269c:	dfc00117 	ldw	ra,4(sp)
   226a0:	dc000017 	ldw	r16,0(sp)
   226a4:	dec00204 	addi	sp,sp,8
   226a8:	f800283a 	ret

000226ac <__swrite>:
   226ac:	2880030b 	ldhu	r2,12(r5)
   226b0:	defffb04 	addi	sp,sp,-20
   226b4:	dcc00315 	stw	r19,12(sp)
   226b8:	1080400c 	andi	r2,r2,256
   226bc:	dc800215 	stw	r18,8(sp)
   226c0:	dc400115 	stw	r17,4(sp)
   226c4:	dc000015 	stw	r16,0(sp)
   226c8:	3027883a 	mov	r19,r6
   226cc:	3825883a 	mov	r18,r7
   226d0:	dfc00415 	stw	ra,16(sp)
   226d4:	2821883a 	mov	r16,r5
   226d8:	000d883a 	mov	r6,zero
   226dc:	01c00084 	movi	r7,2
   226e0:	2023883a 	mov	r17,r4
   226e4:	10000226 	beq	r2,zero,226f0 <__swrite+0x44>
   226e8:	2940038f 	ldh	r5,14(r5)
   226ec:	0022a780 	call	22a78 <_lseek_r>
   226f0:	8080030b 	ldhu	r2,12(r16)
   226f4:	8140038f 	ldh	r5,14(r16)
   226f8:	8809883a 	mov	r4,r17
   226fc:	10bbffcc 	andi	r2,r2,61439
   22700:	980d883a 	mov	r6,r19
   22704:	900f883a 	mov	r7,r18
   22708:	8080030d 	sth	r2,12(r16)
   2270c:	dfc00417 	ldw	ra,16(sp)
   22710:	dcc00317 	ldw	r19,12(sp)
   22714:	dc800217 	ldw	r18,8(sp)
   22718:	dc400117 	ldw	r17,4(sp)
   2271c:	dc000017 	ldw	r16,0(sp)
   22720:	dec00504 	addi	sp,sp,20
   22724:	00227881 	jmpi	22788 <_write_r>

00022728 <__sread>:
   22728:	defffe04 	addi	sp,sp,-8
   2272c:	dc000015 	stw	r16,0(sp)
   22730:	2821883a 	mov	r16,r5
   22734:	2940038f 	ldh	r5,14(r5)
   22738:	dfc00115 	stw	ra,4(sp)
   2273c:	0022af00 	call	22af0 <_read_r>
   22740:	1007883a 	mov	r3,r2
   22744:	10000816 	blt	r2,zero,22768 <__sread+0x40>
   22748:	80801417 	ldw	r2,80(r16)
   2274c:	10c5883a 	add	r2,r2,r3
   22750:	80801415 	stw	r2,80(r16)
   22754:	1805883a 	mov	r2,r3
   22758:	dfc00117 	ldw	ra,4(sp)
   2275c:	dc000017 	ldw	r16,0(sp)
   22760:	dec00204 	addi	sp,sp,8
   22764:	f800283a 	ret
   22768:	8080030b 	ldhu	r2,12(r16)
   2276c:	10bbffcc 	andi	r2,r2,61439
   22770:	8080030d 	sth	r2,12(r16)
   22774:	1805883a 	mov	r2,r3
   22778:	dfc00117 	ldw	ra,4(sp)
   2277c:	dc000017 	ldw	r16,0(sp)
   22780:	dec00204 	addi	sp,sp,8
   22784:	f800283a 	ret

00022788 <_write_r>:
   22788:	defffd04 	addi	sp,sp,-12
   2278c:	dc000015 	stw	r16,0(sp)
   22790:	040000f4 	movhi	r16,3
   22794:	84226d04 	addi	r16,r16,-30284
   22798:	dc400115 	stw	r17,4(sp)
   2279c:	80000015 	stw	zero,0(r16)
   227a0:	2023883a 	mov	r17,r4
   227a4:	2809883a 	mov	r4,r5
   227a8:	300b883a 	mov	r5,r6
   227ac:	380d883a 	mov	r6,r7
   227b0:	dfc00215 	stw	ra,8(sp)
   227b4:	002352c0 	call	2352c <write>
   227b8:	1007883a 	mov	r3,r2
   227bc:	00bfffc4 	movi	r2,-1
   227c0:	18800626 	beq	r3,r2,227dc <_write_r+0x54>
   227c4:	1805883a 	mov	r2,r3
   227c8:	dfc00217 	ldw	ra,8(sp)
   227cc:	dc400117 	ldw	r17,4(sp)
   227d0:	dc000017 	ldw	r16,0(sp)
   227d4:	dec00304 	addi	sp,sp,12
   227d8:	f800283a 	ret
   227dc:	80800017 	ldw	r2,0(r16)
   227e0:	103ff826 	beq	r2,zero,227c4 <_write_r+0x3c>
   227e4:	88800015 	stw	r2,0(r17)
   227e8:	1805883a 	mov	r2,r3
   227ec:	dfc00217 	ldw	ra,8(sp)
   227f0:	dc400117 	ldw	r17,4(sp)
   227f4:	dc000017 	ldw	r16,0(sp)
   227f8:	dec00304 	addi	sp,sp,12
   227fc:	f800283a 	ret

00022800 <_close_r>:
   22800:	defffd04 	addi	sp,sp,-12
   22804:	dc000015 	stw	r16,0(sp)
   22808:	040000f4 	movhi	r16,3
   2280c:	84226d04 	addi	r16,r16,-30284
   22810:	dc400115 	stw	r17,4(sp)
   22814:	80000015 	stw	zero,0(r16)
   22818:	2023883a 	mov	r17,r4
   2281c:	2809883a 	mov	r4,r5
   22820:	dfc00215 	stw	ra,8(sp)
   22824:	0022ba00 	call	22ba0 <close>
   22828:	1007883a 	mov	r3,r2
   2282c:	00bfffc4 	movi	r2,-1
   22830:	18800626 	beq	r3,r2,2284c <_close_r+0x4c>
   22834:	1805883a 	mov	r2,r3
   22838:	dfc00217 	ldw	ra,8(sp)
   2283c:	dc400117 	ldw	r17,4(sp)
   22840:	dc000017 	ldw	r16,0(sp)
   22844:	dec00304 	addi	sp,sp,12
   22848:	f800283a 	ret
   2284c:	80800017 	ldw	r2,0(r16)
   22850:	103ff826 	beq	r2,zero,22834 <_close_r+0x34>
   22854:	88800015 	stw	r2,0(r17)
   22858:	1805883a 	mov	r2,r3
   2285c:	dfc00217 	ldw	ra,8(sp)
   22860:	dc400117 	ldw	r17,4(sp)
   22864:	dc000017 	ldw	r16,0(sp)
   22868:	dec00304 	addi	sp,sp,12
   2286c:	f800283a 	ret

00022870 <_fclose_r>:
   22870:	defffc04 	addi	sp,sp,-16
   22874:	dc400115 	stw	r17,4(sp)
   22878:	dc000015 	stw	r16,0(sp)
   2287c:	dfc00315 	stw	ra,12(sp)
   22880:	dc800215 	stw	r18,8(sp)
   22884:	2821883a 	mov	r16,r5
   22888:	2023883a 	mov	r17,r4
   2288c:	28002926 	beq	r5,zero,22934 <_fclose_r+0xc4>
   22890:	0021bb40 	call	21bb4 <__sfp_lock_acquire>
   22894:	88000226 	beq	r17,zero,228a0 <_fclose_r+0x30>
   22898:	88800e17 	ldw	r2,56(r17)
   2289c:	10002d26 	beq	r2,zero,22954 <_fclose_r+0xe4>
   228a0:	8080030f 	ldh	r2,12(r16)
   228a4:	10002226 	beq	r2,zero,22930 <_fclose_r+0xc0>
   228a8:	8809883a 	mov	r4,r17
   228ac:	800b883a 	mov	r5,r16
   228b0:	002192c0 	call	2192c <_fflush_r>
   228b4:	1025883a 	mov	r18,r2
   228b8:	80800b17 	ldw	r2,44(r16)
   228bc:	10000426 	beq	r2,zero,228d0 <_fclose_r+0x60>
   228c0:	81400717 	ldw	r5,28(r16)
   228c4:	8809883a 	mov	r4,r17
   228c8:	103ee83a 	callr	r2
   228cc:	10002a16 	blt	r2,zero,22978 <_fclose_r+0x108>
   228d0:	8080030b 	ldhu	r2,12(r16)
   228d4:	1080200c 	andi	r2,r2,128
   228d8:	1000231e 	bne	r2,zero,22968 <_fclose_r+0xf8>
   228dc:	81400c17 	ldw	r5,48(r16)
   228e0:	28000526 	beq	r5,zero,228f8 <_fclose_r+0x88>
   228e4:	80801004 	addi	r2,r16,64
   228e8:	28800226 	beq	r5,r2,228f4 <_fclose_r+0x84>
   228ec:	8809883a 	mov	r4,r17
   228f0:	0021f7c0 	call	21f7c <_free_r>
   228f4:	80000c15 	stw	zero,48(r16)
   228f8:	81401117 	ldw	r5,68(r16)
   228fc:	28000326 	beq	r5,zero,2290c <_fclose_r+0x9c>
   22900:	8809883a 	mov	r4,r17
   22904:	0021f7c0 	call	21f7c <_free_r>
   22908:	80001115 	stw	zero,68(r16)
   2290c:	8000030d 	sth	zero,12(r16)
   22910:	0021bb80 	call	21bb8 <__sfp_lock_release>
   22914:	9005883a 	mov	r2,r18
   22918:	dfc00317 	ldw	ra,12(sp)
   2291c:	dc800217 	ldw	r18,8(sp)
   22920:	dc400117 	ldw	r17,4(sp)
   22924:	dc000017 	ldw	r16,0(sp)
   22928:	dec00404 	addi	sp,sp,16
   2292c:	f800283a 	ret
   22930:	0021bb80 	call	21bb8 <__sfp_lock_release>
   22934:	0025883a 	mov	r18,zero
   22938:	9005883a 	mov	r2,r18
   2293c:	dfc00317 	ldw	ra,12(sp)
   22940:	dc800217 	ldw	r18,8(sp)
   22944:	dc400117 	ldw	r17,4(sp)
   22948:	dc000017 	ldw	r16,0(sp)
   2294c:	dec00404 	addi	sp,sp,16
   22950:	f800283a 	ret
   22954:	8809883a 	mov	r4,r17
   22958:	0021bc40 	call	21bc4 <__sinit>
   2295c:	8080030f 	ldh	r2,12(r16)
   22960:	103fd11e 	bne	r2,zero,228a8 <_fclose_r+0x38>
   22964:	003ff206 	br	22930 <_fclose_r+0xc0>
   22968:	81400417 	ldw	r5,16(r16)
   2296c:	8809883a 	mov	r4,r17
   22970:	0021f7c0 	call	21f7c <_free_r>
   22974:	003fd906 	br	228dc <_fclose_r+0x6c>
   22978:	04bfffc4 	movi	r18,-1
   2297c:	003fd406 	br	228d0 <_fclose_r+0x60>

00022980 <fclose>:
   22980:	008000b4 	movhi	r2,2
   22984:	109bca04 	addi	r2,r2,28456
   22988:	200b883a 	mov	r5,r4
   2298c:	11000017 	ldw	r4,0(r2)
   22990:	00228701 	jmpi	22870 <_fclose_r>

00022994 <_fstat_r>:
   22994:	defffd04 	addi	sp,sp,-12
   22998:	dc000015 	stw	r16,0(sp)
   2299c:	040000f4 	movhi	r16,3
   229a0:	84226d04 	addi	r16,r16,-30284
   229a4:	dc400115 	stw	r17,4(sp)
   229a8:	80000015 	stw	zero,0(r16)
   229ac:	2023883a 	mov	r17,r4
   229b0:	2809883a 	mov	r4,r5
   229b4:	300b883a 	mov	r5,r6
   229b8:	dfc00215 	stw	ra,8(sp)
   229bc:	0022d2c0 	call	22d2c <fstat>
   229c0:	1007883a 	mov	r3,r2
   229c4:	00bfffc4 	movi	r2,-1
   229c8:	18800626 	beq	r3,r2,229e4 <_fstat_r+0x50>
   229cc:	1805883a 	mov	r2,r3
   229d0:	dfc00217 	ldw	ra,8(sp)
   229d4:	dc400117 	ldw	r17,4(sp)
   229d8:	dc000017 	ldw	r16,0(sp)
   229dc:	dec00304 	addi	sp,sp,12
   229e0:	f800283a 	ret
   229e4:	80800017 	ldw	r2,0(r16)
   229e8:	103ff826 	beq	r2,zero,229cc <_fstat_r+0x38>
   229ec:	88800015 	stw	r2,0(r17)
   229f0:	1805883a 	mov	r2,r3
   229f4:	dfc00217 	ldw	ra,8(sp)
   229f8:	dc400117 	ldw	r17,4(sp)
   229fc:	dc000017 	ldw	r16,0(sp)
   22a00:	dec00304 	addi	sp,sp,12
   22a04:	f800283a 	ret

00022a08 <_isatty_r>:
   22a08:	defffd04 	addi	sp,sp,-12
   22a0c:	dc000015 	stw	r16,0(sp)
   22a10:	040000f4 	movhi	r16,3
   22a14:	84226d04 	addi	r16,r16,-30284
   22a18:	dc400115 	stw	r17,4(sp)
   22a1c:	80000015 	stw	zero,0(r16)
   22a20:	2023883a 	mov	r17,r4
   22a24:	2809883a 	mov	r4,r5
   22a28:	dfc00215 	stw	ra,8(sp)
   22a2c:	0022e640 	call	22e64 <isatty>
   22a30:	1007883a 	mov	r3,r2
   22a34:	00bfffc4 	movi	r2,-1
   22a38:	18800626 	beq	r3,r2,22a54 <_isatty_r+0x4c>
   22a3c:	1805883a 	mov	r2,r3
   22a40:	dfc00217 	ldw	ra,8(sp)
   22a44:	dc400117 	ldw	r17,4(sp)
   22a48:	dc000017 	ldw	r16,0(sp)
   22a4c:	dec00304 	addi	sp,sp,12
   22a50:	f800283a 	ret
   22a54:	80800017 	ldw	r2,0(r16)
   22a58:	103ff826 	beq	r2,zero,22a3c <_isatty_r+0x34>
   22a5c:	88800015 	stw	r2,0(r17)
   22a60:	1805883a 	mov	r2,r3
   22a64:	dfc00217 	ldw	ra,8(sp)
   22a68:	dc400117 	ldw	r17,4(sp)
   22a6c:	dc000017 	ldw	r16,0(sp)
   22a70:	dec00304 	addi	sp,sp,12
   22a74:	f800283a 	ret

00022a78 <_lseek_r>:
   22a78:	defffd04 	addi	sp,sp,-12
   22a7c:	dc000015 	stw	r16,0(sp)
   22a80:	040000f4 	movhi	r16,3
   22a84:	84226d04 	addi	r16,r16,-30284
   22a88:	dc400115 	stw	r17,4(sp)
   22a8c:	80000015 	stw	zero,0(r16)
   22a90:	2023883a 	mov	r17,r4
   22a94:	2809883a 	mov	r4,r5
   22a98:	300b883a 	mov	r5,r6
   22a9c:	380d883a 	mov	r6,r7
   22aa0:	dfc00215 	stw	ra,8(sp)
   22aa4:	00230740 	call	23074 <lseek>
   22aa8:	1007883a 	mov	r3,r2
   22aac:	00bfffc4 	movi	r2,-1
   22ab0:	18800626 	beq	r3,r2,22acc <_lseek_r+0x54>
   22ab4:	1805883a 	mov	r2,r3
   22ab8:	dfc00217 	ldw	ra,8(sp)
   22abc:	dc400117 	ldw	r17,4(sp)
   22ac0:	dc000017 	ldw	r16,0(sp)
   22ac4:	dec00304 	addi	sp,sp,12
   22ac8:	f800283a 	ret
   22acc:	80800017 	ldw	r2,0(r16)
   22ad0:	103ff826 	beq	r2,zero,22ab4 <_lseek_r+0x3c>
   22ad4:	88800015 	stw	r2,0(r17)
   22ad8:	1805883a 	mov	r2,r3
   22adc:	dfc00217 	ldw	ra,8(sp)
   22ae0:	dc400117 	ldw	r17,4(sp)
   22ae4:	dc000017 	ldw	r16,0(sp)
   22ae8:	dec00304 	addi	sp,sp,12
   22aec:	f800283a 	ret

00022af0 <_read_r>:
   22af0:	defffd04 	addi	sp,sp,-12
   22af4:	dc000015 	stw	r16,0(sp)
   22af8:	040000f4 	movhi	r16,3
   22afc:	84226d04 	addi	r16,r16,-30284
   22b00:	dc400115 	stw	r17,4(sp)
   22b04:	80000015 	stw	zero,0(r16)
   22b08:	2023883a 	mov	r17,r4
   22b0c:	2809883a 	mov	r4,r5
   22b10:	300b883a 	mov	r5,r6
   22b14:	380d883a 	mov	r6,r7
   22b18:	dfc00215 	stw	ra,8(sp)
   22b1c:	00232740 	call	23274 <read>
   22b20:	1007883a 	mov	r3,r2
   22b24:	00bfffc4 	movi	r2,-1
   22b28:	18800626 	beq	r3,r2,22b44 <_read_r+0x54>
   22b2c:	1805883a 	mov	r2,r3
   22b30:	dfc00217 	ldw	ra,8(sp)
   22b34:	dc400117 	ldw	r17,4(sp)
   22b38:	dc000017 	ldw	r16,0(sp)
   22b3c:	dec00304 	addi	sp,sp,12
   22b40:	f800283a 	ret
   22b44:	80800017 	ldw	r2,0(r16)
   22b48:	103ff826 	beq	r2,zero,22b2c <_read_r+0x3c>
   22b4c:	88800015 	stw	r2,0(r17)
   22b50:	1805883a 	mov	r2,r3
   22b54:	dfc00217 	ldw	ra,8(sp)
   22b58:	dc400117 	ldw	r17,4(sp)
   22b5c:	dc000017 	ldw	r16,0(sp)
   22b60:	dec00304 	addi	sp,sp,12
   22b64:	f800283a 	ret

00022b68 <__mulsi3>:
   22b68:	20000a26 	beq	r4,zero,22b94 <__mulsi3+0x2c>
   22b6c:	0007883a 	mov	r3,zero
   22b70:	2080004c 	andi	r2,r4,1
   22b74:	1005003a 	cmpeq	r2,r2,zero
   22b78:	2008d07a 	srli	r4,r4,1
   22b7c:	1000011e 	bne	r2,zero,22b84 <__mulsi3+0x1c>
   22b80:	1947883a 	add	r3,r3,r5
   22b84:	294b883a 	add	r5,r5,r5
   22b88:	203ff91e 	bne	r4,zero,22b70 <__mulsi3+0x8>
   22b8c:	1805883a 	mov	r2,r3
   22b90:	f800283a 	ret
   22b94:	0007883a 	mov	r3,zero
   22b98:	1805883a 	mov	r2,r3
   22b9c:	f800283a 	ret

00022ba0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   22ba0:	defff804 	addi	sp,sp,-32
   22ba4:	dfc00715 	stw	ra,28(sp)
   22ba8:	df000615 	stw	fp,24(sp)
   22bac:	df000604 	addi	fp,sp,24
   22bb0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   22bb4:	e0bffc17 	ldw	r2,-16(fp)
   22bb8:	1004803a 	cmplt	r2,r2,zero
   22bbc:	1000091e 	bne	r2,zero,22be4 <close+0x44>
   22bc0:	e13ffc17 	ldw	r4,-16(fp)
   22bc4:	01400304 	movi	r5,12
   22bc8:	0022b680 	call	22b68 <__mulsi3>
   22bcc:	1007883a 	mov	r3,r2
   22bd0:	008000b4 	movhi	r2,2
   22bd4:	10975204 	addi	r2,r2,23880
   22bd8:	1887883a 	add	r3,r3,r2
   22bdc:	e0ffff15 	stw	r3,-4(fp)
   22be0:	00000106 	br	22be8 <close+0x48>
   22be4:	e03fff15 	stw	zero,-4(fp)
   22be8:	e0bfff17 	ldw	r2,-4(fp)
   22bec:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   22bf0:	e0bffb17 	ldw	r2,-20(fp)
   22bf4:	1005003a 	cmpeq	r2,r2,zero
   22bf8:	10001d1e 	bne	r2,zero,22c70 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   22bfc:	e0bffb17 	ldw	r2,-20(fp)
   22c00:	10800017 	ldw	r2,0(r2)
   22c04:	10800417 	ldw	r2,16(r2)
   22c08:	1005003a 	cmpeq	r2,r2,zero
   22c0c:	1000071e 	bne	r2,zero,22c2c <close+0x8c>
   22c10:	e0bffb17 	ldw	r2,-20(fp)
   22c14:	10800017 	ldw	r2,0(r2)
   22c18:	10800417 	ldw	r2,16(r2)
   22c1c:	e13ffb17 	ldw	r4,-20(fp)
   22c20:	103ee83a 	callr	r2
   22c24:	e0bffe15 	stw	r2,-8(fp)
   22c28:	00000106 	br	22c30 <close+0x90>
   22c2c:	e03ffe15 	stw	zero,-8(fp)
   22c30:	e0bffe17 	ldw	r2,-8(fp)
   22c34:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   22c38:	e13ffc17 	ldw	r4,-16(fp)
   22c3c:	00233f80 	call	233f8 <alt_release_fd>
    if (rval < 0)
   22c40:	e0bffa17 	ldw	r2,-24(fp)
   22c44:	1004403a 	cmpge	r2,r2,zero
   22c48:	1000071e 	bne	r2,zero,22c68 <close+0xc8>
    {
      ALT_ERRNO = -rval;
   22c4c:	0022ca00 	call	22ca0 <alt_get_errno>
   22c50:	e0fffa17 	ldw	r3,-24(fp)
   22c54:	00c7c83a 	sub	r3,zero,r3
   22c58:	10c00015 	stw	r3,0(r2)
      return -1;
   22c5c:	00bfffc4 	movi	r2,-1
   22c60:	e0bffd15 	stw	r2,-12(fp)
   22c64:	00000806 	br	22c88 <close+0xe8>
    }
    return 0;
   22c68:	e03ffd15 	stw	zero,-12(fp)
   22c6c:	00000606 	br	22c88 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   22c70:	0022ca00 	call	22ca0 <alt_get_errno>
   22c74:	1007883a 	mov	r3,r2
   22c78:	00801444 	movi	r2,81
   22c7c:	18800015 	stw	r2,0(r3)
    return -1;
   22c80:	00bfffc4 	movi	r2,-1
   22c84:	e0bffd15 	stw	r2,-12(fp)
   22c88:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   22c8c:	e037883a 	mov	sp,fp
   22c90:	dfc00117 	ldw	ra,4(sp)
   22c94:	df000017 	ldw	fp,0(sp)
   22c98:	dec00204 	addi	sp,sp,8
   22c9c:	f800283a 	ret

00022ca0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22ca0:	defffd04 	addi	sp,sp,-12
   22ca4:	dfc00215 	stw	ra,8(sp)
   22ca8:	df000115 	stw	fp,4(sp)
   22cac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   22cb0:	008000b4 	movhi	r2,2
   22cb4:	109bd304 	addi	r2,r2,28492
   22cb8:	10800017 	ldw	r2,0(r2)
   22cbc:	1005003a 	cmpeq	r2,r2,zero
   22cc0:	1000061e 	bne	r2,zero,22cdc <alt_get_errno+0x3c>
   22cc4:	008000b4 	movhi	r2,2
   22cc8:	109bd304 	addi	r2,r2,28492
   22ccc:	10800017 	ldw	r2,0(r2)
   22cd0:	103ee83a 	callr	r2
   22cd4:	e0bfff15 	stw	r2,-4(fp)
   22cd8:	00000306 	br	22ce8 <alt_get_errno+0x48>
   22cdc:	008000f4 	movhi	r2,3
   22ce0:	10a26d04 	addi	r2,r2,-30284
   22ce4:	e0bfff15 	stw	r2,-4(fp)
   22ce8:	e0bfff17 	ldw	r2,-4(fp)
}
   22cec:	e037883a 	mov	sp,fp
   22cf0:	dfc00117 	ldw	ra,4(sp)
   22cf4:	df000017 	ldw	fp,0(sp)
   22cf8:	dec00204 	addi	sp,sp,8
   22cfc:	f800283a 	ret

00022d00 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   22d00:	defffc04 	addi	sp,sp,-16
   22d04:	df000315 	stw	fp,12(sp)
   22d08:	df000304 	addi	fp,sp,12
   22d0c:	e13ffd15 	stw	r4,-12(fp)
   22d10:	e17ffe15 	stw	r5,-8(fp)
   22d14:	e1bfff15 	stw	r6,-4(fp)
  return len;
   22d18:	e0bfff17 	ldw	r2,-4(fp)
}
   22d1c:	e037883a 	mov	sp,fp
   22d20:	df000017 	ldw	fp,0(sp)
   22d24:	dec00104 	addi	sp,sp,4
   22d28:	f800283a 	ret

00022d2c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   22d2c:	defff904 	addi	sp,sp,-28
   22d30:	dfc00615 	stw	ra,24(sp)
   22d34:	df000515 	stw	fp,20(sp)
   22d38:	df000504 	addi	fp,sp,20
   22d3c:	e13ffc15 	stw	r4,-16(fp)
   22d40:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   22d44:	e0bffc17 	ldw	r2,-16(fp)
   22d48:	1004803a 	cmplt	r2,r2,zero
   22d4c:	1000091e 	bne	r2,zero,22d74 <fstat+0x48>
   22d50:	e13ffc17 	ldw	r4,-16(fp)
   22d54:	01400304 	movi	r5,12
   22d58:	0022b680 	call	22b68 <__mulsi3>
   22d5c:	1007883a 	mov	r3,r2
   22d60:	008000b4 	movhi	r2,2
   22d64:	10975204 	addi	r2,r2,23880
   22d68:	1887883a 	add	r3,r3,r2
   22d6c:	e0ffff15 	stw	r3,-4(fp)
   22d70:	00000106 	br	22d78 <fstat+0x4c>
   22d74:	e03fff15 	stw	zero,-4(fp)
   22d78:	e0bfff17 	ldw	r2,-4(fp)
   22d7c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   22d80:	e0bffb17 	ldw	r2,-20(fp)
   22d84:	1005003a 	cmpeq	r2,r2,zero
   22d88:	1000121e 	bne	r2,zero,22dd4 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   22d8c:	e0bffb17 	ldw	r2,-20(fp)
   22d90:	10800017 	ldw	r2,0(r2)
   22d94:	10800817 	ldw	r2,32(r2)
   22d98:	1005003a 	cmpeq	r2,r2,zero
   22d9c:	1000081e 	bne	r2,zero,22dc0 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
   22da0:	e0bffb17 	ldw	r2,-20(fp)
   22da4:	10800017 	ldw	r2,0(r2)
   22da8:	10800817 	ldw	r2,32(r2)
   22dac:	e13ffb17 	ldw	r4,-20(fp)
   22db0:	e17ffd17 	ldw	r5,-12(fp)
   22db4:	103ee83a 	callr	r2
   22db8:	e0bffe15 	stw	r2,-8(fp)
   22dbc:	00000b06 	br	22dec <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   22dc0:	e0fffd17 	ldw	r3,-12(fp)
   22dc4:	00880004 	movi	r2,8192
   22dc8:	18800115 	stw	r2,4(r3)
      return 0;
   22dcc:	e03ffe15 	stw	zero,-8(fp)
   22dd0:	00000606 	br	22dec <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   22dd4:	0022e040 	call	22e04 <alt_get_errno>
   22dd8:	1007883a 	mov	r3,r2
   22ddc:	00801444 	movi	r2,81
   22de0:	18800015 	stw	r2,0(r3)
    return -1;
   22de4:	00bfffc4 	movi	r2,-1
   22de8:	e0bffe15 	stw	r2,-8(fp)
   22dec:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   22df0:	e037883a 	mov	sp,fp
   22df4:	dfc00117 	ldw	ra,4(sp)
   22df8:	df000017 	ldw	fp,0(sp)
   22dfc:	dec00204 	addi	sp,sp,8
   22e00:	f800283a 	ret

00022e04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22e04:	defffd04 	addi	sp,sp,-12
   22e08:	dfc00215 	stw	ra,8(sp)
   22e0c:	df000115 	stw	fp,4(sp)
   22e10:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   22e14:	008000b4 	movhi	r2,2
   22e18:	109bd304 	addi	r2,r2,28492
   22e1c:	10800017 	ldw	r2,0(r2)
   22e20:	1005003a 	cmpeq	r2,r2,zero
   22e24:	1000061e 	bne	r2,zero,22e40 <alt_get_errno+0x3c>
   22e28:	008000b4 	movhi	r2,2
   22e2c:	109bd304 	addi	r2,r2,28492
   22e30:	10800017 	ldw	r2,0(r2)
   22e34:	103ee83a 	callr	r2
   22e38:	e0bfff15 	stw	r2,-4(fp)
   22e3c:	00000306 	br	22e4c <alt_get_errno+0x48>
   22e40:	008000f4 	movhi	r2,3
   22e44:	10a26d04 	addi	r2,r2,-30284
   22e48:	e0bfff15 	stw	r2,-4(fp)
   22e4c:	e0bfff17 	ldw	r2,-4(fp)
}
   22e50:	e037883a 	mov	sp,fp
   22e54:	dfc00117 	ldw	ra,4(sp)
   22e58:	df000017 	ldw	fp,0(sp)
   22e5c:	dec00204 	addi	sp,sp,8
   22e60:	f800283a 	ret

00022e64 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   22e64:	deffeb04 	addi	sp,sp,-84
   22e68:	dfc01415 	stw	ra,80(sp)
   22e6c:	df001315 	stw	fp,76(sp)
   22e70:	df001304 	addi	fp,sp,76
   22e74:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   22e78:	e0bffd17 	ldw	r2,-12(fp)
   22e7c:	1004803a 	cmplt	r2,r2,zero
   22e80:	1000091e 	bne	r2,zero,22ea8 <isatty+0x44>
   22e84:	e13ffd17 	ldw	r4,-12(fp)
   22e88:	01400304 	movi	r5,12
   22e8c:	0022b680 	call	22b68 <__mulsi3>
   22e90:	1007883a 	mov	r3,r2
   22e94:	008000b4 	movhi	r2,2
   22e98:	10975204 	addi	r2,r2,23880
   22e9c:	1887883a 	add	r3,r3,r2
   22ea0:	e0ffff15 	stw	r3,-4(fp)
   22ea4:	00000106 	br	22eac <isatty+0x48>
   22ea8:	e03fff15 	stw	zero,-4(fp)
   22eac:	e0bfff17 	ldw	r2,-4(fp)
   22eb0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   22eb4:	e0bfed17 	ldw	r2,-76(fp)
   22eb8:	1005003a 	cmpeq	r2,r2,zero
   22ebc:	10000f1e 	bne	r2,zero,22efc <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   22ec0:	e0bfed17 	ldw	r2,-76(fp)
   22ec4:	10800017 	ldw	r2,0(r2)
   22ec8:	10800817 	ldw	r2,32(r2)
   22ecc:	1004c03a 	cmpne	r2,r2,zero
   22ed0:	1000031e 	bne	r2,zero,22ee0 <isatty+0x7c>
    {
      return 1;
   22ed4:	00800044 	movi	r2,1
   22ed8:	e0bffe15 	stw	r2,-8(fp)
   22edc:	00000c06 	br	22f10 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   22ee0:	e17fee04 	addi	r5,fp,-72
   22ee4:	e13ffd17 	ldw	r4,-12(fp)
   22ee8:	0022d2c0 	call	22d2c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   22eec:	e0bfef17 	ldw	r2,-68(fp)
   22ef0:	10880020 	cmpeqi	r2,r2,8192
   22ef4:	e0bffe15 	stw	r2,-8(fp)
   22ef8:	00000506 	br	22f10 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   22efc:	0022f280 	call	22f28 <alt_get_errno>
   22f00:	1007883a 	mov	r3,r2
   22f04:	00801444 	movi	r2,81
   22f08:	18800015 	stw	r2,0(r3)
    return 0;
   22f0c:	e03ffe15 	stw	zero,-8(fp)
   22f10:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   22f14:	e037883a 	mov	sp,fp
   22f18:	dfc00117 	ldw	ra,4(sp)
   22f1c:	df000017 	ldw	fp,0(sp)
   22f20:	dec00204 	addi	sp,sp,8
   22f24:	f800283a 	ret

00022f28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22f28:	defffd04 	addi	sp,sp,-12
   22f2c:	dfc00215 	stw	ra,8(sp)
   22f30:	df000115 	stw	fp,4(sp)
   22f34:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   22f38:	008000b4 	movhi	r2,2
   22f3c:	109bd304 	addi	r2,r2,28492
   22f40:	10800017 	ldw	r2,0(r2)
   22f44:	1005003a 	cmpeq	r2,r2,zero
   22f48:	1000061e 	bne	r2,zero,22f64 <alt_get_errno+0x3c>
   22f4c:	008000b4 	movhi	r2,2
   22f50:	109bd304 	addi	r2,r2,28492
   22f54:	10800017 	ldw	r2,0(r2)
   22f58:	103ee83a 	callr	r2
   22f5c:	e0bfff15 	stw	r2,-4(fp)
   22f60:	00000306 	br	22f70 <alt_get_errno+0x48>
   22f64:	008000f4 	movhi	r2,3
   22f68:	10a26d04 	addi	r2,r2,-30284
   22f6c:	e0bfff15 	stw	r2,-4(fp)
   22f70:	e0bfff17 	ldw	r2,-4(fp)
}
   22f74:	e037883a 	mov	sp,fp
   22f78:	dfc00117 	ldw	ra,4(sp)
   22f7c:	df000017 	ldw	fp,0(sp)
   22f80:	dec00204 	addi	sp,sp,8
   22f84:	f800283a 	ret

00022f88 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   22f88:	defffe04 	addi	sp,sp,-8
   22f8c:	dfc00115 	stw	ra,4(sp)
   22f90:	df000015 	stw	fp,0(sp)
   22f94:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   22f98:	010000b4 	movhi	r4,2
   22f9c:	211bd804 	addi	r4,r4,28512
   22fa0:	014000b4 	movhi	r5,2
   22fa4:	29554604 	addi	r5,r5,21784
   22fa8:	018000b4 	movhi	r6,2
   22fac:	319bd804 	addi	r6,r6,28512
   22fb0:	00230080 	call	23008 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   22fb4:	010000b4 	movhi	r4,2
   22fb8:	21000804 	addi	r4,r4,32
   22fbc:	014000b4 	movhi	r5,2
   22fc0:	29400804 	addi	r5,r5,32
   22fc4:	018000b4 	movhi	r6,2
   22fc8:	31806d04 	addi	r6,r6,436
   22fcc:	00230080 	call	23008 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   22fd0:	010000b4 	movhi	r4,2
   22fd4:	21153204 	addi	r4,r4,21704
   22fd8:	014000b4 	movhi	r5,2
   22fdc:	29553204 	addi	r5,r5,21704
   22fe0:	018000b4 	movhi	r6,2
   22fe4:	31954604 	addi	r6,r6,21784
   22fe8:	00230080 	call	23008 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   22fec:	00243600 	call	24360 <alt_dcache_flush_all>
  alt_icache_flush_all();
   22ff0:	00245580 	call	24558 <alt_icache_flush_all>
}
   22ff4:	e037883a 	mov	sp,fp
   22ff8:	dfc00117 	ldw	ra,4(sp)
   22ffc:	df000017 	ldw	fp,0(sp)
   23000:	dec00204 	addi	sp,sp,8
   23004:	f800283a 	ret

00023008 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   23008:	defffc04 	addi	sp,sp,-16
   2300c:	df000315 	stw	fp,12(sp)
   23010:	df000304 	addi	fp,sp,12
   23014:	e13ffd15 	stw	r4,-12(fp)
   23018:	e17ffe15 	stw	r5,-8(fp)
   2301c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   23020:	e0fffe17 	ldw	r3,-8(fp)
   23024:	e0bffd17 	ldw	r2,-12(fp)
   23028:	18800e26 	beq	r3,r2,23064 <alt_load_section+0x5c>
  {
    while( to != end )
   2302c:	00000a06 	br	23058 <alt_load_section+0x50>
    {
      *to++ = *from++;
   23030:	e0bffd17 	ldw	r2,-12(fp)
   23034:	10c00017 	ldw	r3,0(r2)
   23038:	e0bffe17 	ldw	r2,-8(fp)
   2303c:	10c00015 	stw	r3,0(r2)
   23040:	e0bffe17 	ldw	r2,-8(fp)
   23044:	10800104 	addi	r2,r2,4
   23048:	e0bffe15 	stw	r2,-8(fp)
   2304c:	e0bffd17 	ldw	r2,-12(fp)
   23050:	10800104 	addi	r2,r2,4
   23054:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   23058:	e0fffe17 	ldw	r3,-8(fp)
   2305c:	e0bfff17 	ldw	r2,-4(fp)
   23060:	18bff31e 	bne	r3,r2,23030 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   23064:	e037883a 	mov	sp,fp
   23068:	df000017 	ldw	fp,0(sp)
   2306c:	dec00104 	addi	sp,sp,4
   23070:	f800283a 	ret

00023074 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   23074:	defff804 	addi	sp,sp,-32
   23078:	dfc00715 	stw	ra,28(sp)
   2307c:	df000615 	stw	fp,24(sp)
   23080:	df000604 	addi	fp,sp,24
   23084:	e13ffc15 	stw	r4,-16(fp)
   23088:	e17ffd15 	stw	r5,-12(fp)
   2308c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   23090:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23094:	e0bffc17 	ldw	r2,-16(fp)
   23098:	1004803a 	cmplt	r2,r2,zero
   2309c:	1000091e 	bne	r2,zero,230c4 <lseek+0x50>
   230a0:	e13ffc17 	ldw	r4,-16(fp)
   230a4:	01400304 	movi	r5,12
   230a8:	0022b680 	call	22b68 <__mulsi3>
   230ac:	1007883a 	mov	r3,r2
   230b0:	008000b4 	movhi	r2,2
   230b4:	10975204 	addi	r2,r2,23880
   230b8:	1887883a 	add	r3,r3,r2
   230bc:	e0ffff15 	stw	r3,-4(fp)
   230c0:	00000106 	br	230c8 <lseek+0x54>
   230c4:	e03fff15 	stw	zero,-4(fp)
   230c8:	e0bfff17 	ldw	r2,-4(fp)
   230cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   230d0:	e0bffb17 	ldw	r2,-20(fp)
   230d4:	1005003a 	cmpeq	r2,r2,zero
   230d8:	1000111e 	bne	r2,zero,23120 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   230dc:	e0bffb17 	ldw	r2,-20(fp)
   230e0:	10800017 	ldw	r2,0(r2)
   230e4:	10800717 	ldw	r2,28(r2)
   230e8:	1005003a 	cmpeq	r2,r2,zero
   230ec:	1000091e 	bne	r2,zero,23114 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   230f0:	e0bffb17 	ldw	r2,-20(fp)
   230f4:	10800017 	ldw	r2,0(r2)
   230f8:	10800717 	ldw	r2,28(r2)
   230fc:	e13ffb17 	ldw	r4,-20(fp)
   23100:	e17ffd17 	ldw	r5,-12(fp)
   23104:	e1bffe17 	ldw	r6,-8(fp)
   23108:	103ee83a 	callr	r2
   2310c:	e0bffa15 	stw	r2,-24(fp)
   23110:	00000506 	br	23128 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   23114:	00bfde84 	movi	r2,-134
   23118:	e0bffa15 	stw	r2,-24(fp)
   2311c:	00000206 	br	23128 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
   23120:	00bfebc4 	movi	r2,-81
   23124:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   23128:	e0bffa17 	ldw	r2,-24(fp)
   2312c:	1004403a 	cmpge	r2,r2,zero
   23130:	1000071e 	bne	r2,zero,23150 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
   23134:	00231680 	call	23168 <alt_get_errno>
   23138:	1007883a 	mov	r3,r2
   2313c:	e0bffa17 	ldw	r2,-24(fp)
   23140:	0085c83a 	sub	r2,zero,r2
   23144:	18800015 	stw	r2,0(r3)
    rc = -1;
   23148:	00bfffc4 	movi	r2,-1
   2314c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   23150:	e0bffa17 	ldw	r2,-24(fp)
}
   23154:	e037883a 	mov	sp,fp
   23158:	dfc00117 	ldw	ra,4(sp)
   2315c:	df000017 	ldw	fp,0(sp)
   23160:	dec00204 	addi	sp,sp,8
   23164:	f800283a 	ret

00023168 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23168:	defffd04 	addi	sp,sp,-12
   2316c:	dfc00215 	stw	ra,8(sp)
   23170:	df000115 	stw	fp,4(sp)
   23174:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   23178:	008000b4 	movhi	r2,2
   2317c:	109bd304 	addi	r2,r2,28492
   23180:	10800017 	ldw	r2,0(r2)
   23184:	1005003a 	cmpeq	r2,r2,zero
   23188:	1000061e 	bne	r2,zero,231a4 <alt_get_errno+0x3c>
   2318c:	008000b4 	movhi	r2,2
   23190:	109bd304 	addi	r2,r2,28492
   23194:	10800017 	ldw	r2,0(r2)
   23198:	103ee83a 	callr	r2
   2319c:	e0bfff15 	stw	r2,-4(fp)
   231a0:	00000306 	br	231b0 <alt_get_errno+0x48>
   231a4:	008000f4 	movhi	r2,3
   231a8:	10a26d04 	addi	r2,r2,-30284
   231ac:	e0bfff15 	stw	r2,-4(fp)
   231b0:	e0bfff17 	ldw	r2,-4(fp)
}
   231b4:	e037883a 	mov	sp,fp
   231b8:	dfc00117 	ldw	ra,4(sp)
   231bc:	df000017 	ldw	fp,0(sp)
   231c0:	dec00204 	addi	sp,sp,8
   231c4:	f800283a 	ret

000231c8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   231c8:	defffd04 	addi	sp,sp,-12
   231cc:	dfc00215 	stw	ra,8(sp)
   231d0:	df000115 	stw	fp,4(sp)
   231d4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   231d8:	0009883a 	mov	r4,zero
   231dc:	00236b00 	call	236b0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   231e0:	00236e40 	call	236e4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   231e4:	010000b4 	movhi	r4,2
   231e8:	21153c04 	addi	r4,r4,21744
   231ec:	014000b4 	movhi	r5,2
   231f0:	29553c04 	addi	r5,r5,21744
   231f4:	018000b4 	movhi	r6,2
   231f8:	31953c04 	addi	r6,r6,21744
   231fc:	00249180 	call	24918 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   23200:	00244900 	call	24490 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   23204:	010000b4 	movhi	r4,2
   23208:	21113d04 	addi	r4,r4,17652
   2320c:	00250bc0 	call	250bc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   23210:	d126a417 	ldw	r4,-25968(gp)
   23214:	d166a517 	ldw	r5,-25964(gp)
   23218:	d1a6a617 	ldw	r6,-25960(gp)
   2321c:	00201f00 	call	201f0 <main>
   23220:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   23224:	01000044 	movi	r4,1
   23228:	0022ba00 	call	22ba0 <close>
  exit (result);
   2322c:	e13fff17 	ldw	r4,-4(fp)
   23230:	00250d00 	call	250d0 <exit>

00023234 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   23234:	defffe04 	addi	sp,sp,-8
   23238:	df000115 	stw	fp,4(sp)
   2323c:	df000104 	addi	fp,sp,4
   23240:	e13fff15 	stw	r4,-4(fp)
}
   23244:	e037883a 	mov	sp,fp
   23248:	df000017 	ldw	fp,0(sp)
   2324c:	dec00104 	addi	sp,sp,4
   23250:	f800283a 	ret

00023254 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   23254:	defffe04 	addi	sp,sp,-8
   23258:	df000115 	stw	fp,4(sp)
   2325c:	df000104 	addi	fp,sp,4
   23260:	e13fff15 	stw	r4,-4(fp)
}
   23264:	e037883a 	mov	sp,fp
   23268:	df000017 	ldw	fp,0(sp)
   2326c:	dec00104 	addi	sp,sp,4
   23270:	f800283a 	ret

00023274 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   23274:	defff704 	addi	sp,sp,-36
   23278:	dfc00815 	stw	ra,32(sp)
   2327c:	df000715 	stw	fp,28(sp)
   23280:	df000704 	addi	fp,sp,28
   23284:	e13ffb15 	stw	r4,-20(fp)
   23288:	e17ffc15 	stw	r5,-16(fp)
   2328c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23290:	e0bffb17 	ldw	r2,-20(fp)
   23294:	1004803a 	cmplt	r2,r2,zero
   23298:	1000091e 	bne	r2,zero,232c0 <read+0x4c>
   2329c:	e13ffb17 	ldw	r4,-20(fp)
   232a0:	01400304 	movi	r5,12
   232a4:	0022b680 	call	22b68 <__mulsi3>
   232a8:	1007883a 	mov	r3,r2
   232ac:	008000b4 	movhi	r2,2
   232b0:	10975204 	addi	r2,r2,23880
   232b4:	1887883a 	add	r3,r3,r2
   232b8:	e0ffff15 	stw	r3,-4(fp)
   232bc:	00000106 	br	232c4 <read+0x50>
   232c0:	e03fff15 	stw	zero,-4(fp)
   232c4:	e0bfff17 	ldw	r2,-4(fp)
   232c8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   232cc:	e0bffa17 	ldw	r2,-24(fp)
   232d0:	1005003a 	cmpeq	r2,r2,zero
   232d4:	1000241e 	bne	r2,zero,23368 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   232d8:	e0bffa17 	ldw	r2,-24(fp)
   232dc:	10800217 	ldw	r2,8(r2)
   232e0:	108000cc 	andi	r2,r2,3
   232e4:	10800060 	cmpeqi	r2,r2,1
   232e8:	10001a1e 	bne	r2,zero,23354 <read+0xe0>
   232ec:	e0bffa17 	ldw	r2,-24(fp)
   232f0:	10800017 	ldw	r2,0(r2)
   232f4:	10800517 	ldw	r2,20(r2)
   232f8:	1005003a 	cmpeq	r2,r2,zero
   232fc:	1000151e 	bne	r2,zero,23354 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   23300:	e0bffa17 	ldw	r2,-24(fp)
   23304:	10800017 	ldw	r2,0(r2)
   23308:	10800517 	ldw	r2,20(r2)
   2330c:	e17ffc17 	ldw	r5,-16(fp)
   23310:	e1bffd17 	ldw	r6,-12(fp)
   23314:	e13ffa17 	ldw	r4,-24(fp)
   23318:	103ee83a 	callr	r2
   2331c:	e0bff915 	stw	r2,-28(fp)
   23320:	e0bff917 	ldw	r2,-28(fp)
   23324:	1004403a 	cmpge	r2,r2,zero
   23328:	1000071e 	bne	r2,zero,23348 <read+0xd4>
        {
          ALT_ERRNO = -rval;
   2332c:	00233980 	call	23398 <alt_get_errno>
   23330:	e0fff917 	ldw	r3,-28(fp)
   23334:	00c7c83a 	sub	r3,zero,r3
   23338:	10c00015 	stw	r3,0(r2)
          return -1;
   2333c:	00bfffc4 	movi	r2,-1
   23340:	e0bffe15 	stw	r2,-8(fp)
   23344:	00000e06 	br	23380 <read+0x10c>
        }
        return rval;
   23348:	e0bff917 	ldw	r2,-28(fp)
   2334c:	e0bffe15 	stw	r2,-8(fp)
   23350:	00000b06 	br	23380 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
   23354:	00233980 	call	23398 <alt_get_errno>
   23358:	1007883a 	mov	r3,r2
   2335c:	00800344 	movi	r2,13
   23360:	18800015 	stw	r2,0(r3)
   23364:	00000406 	br	23378 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   23368:	00233980 	call	23398 <alt_get_errno>
   2336c:	1007883a 	mov	r3,r2
   23370:	00801444 	movi	r2,81
   23374:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23378:	00bfffc4 	movi	r2,-1
   2337c:	e0bffe15 	stw	r2,-8(fp)
   23380:	e0bffe17 	ldw	r2,-8(fp)
}
   23384:	e037883a 	mov	sp,fp
   23388:	dfc00117 	ldw	ra,4(sp)
   2338c:	df000017 	ldw	fp,0(sp)
   23390:	dec00204 	addi	sp,sp,8
   23394:	f800283a 	ret

00023398 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23398:	defffd04 	addi	sp,sp,-12
   2339c:	dfc00215 	stw	ra,8(sp)
   233a0:	df000115 	stw	fp,4(sp)
   233a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   233a8:	008000b4 	movhi	r2,2
   233ac:	109bd304 	addi	r2,r2,28492
   233b0:	10800017 	ldw	r2,0(r2)
   233b4:	1005003a 	cmpeq	r2,r2,zero
   233b8:	1000061e 	bne	r2,zero,233d4 <alt_get_errno+0x3c>
   233bc:	008000b4 	movhi	r2,2
   233c0:	109bd304 	addi	r2,r2,28492
   233c4:	10800017 	ldw	r2,0(r2)
   233c8:	103ee83a 	callr	r2
   233cc:	e0bfff15 	stw	r2,-4(fp)
   233d0:	00000306 	br	233e0 <alt_get_errno+0x48>
   233d4:	008000f4 	movhi	r2,3
   233d8:	10a26d04 	addi	r2,r2,-30284
   233dc:	e0bfff15 	stw	r2,-4(fp)
   233e0:	e0bfff17 	ldw	r2,-4(fp)
}
   233e4:	e037883a 	mov	sp,fp
   233e8:	dfc00117 	ldw	ra,4(sp)
   233ec:	df000017 	ldw	fp,0(sp)
   233f0:	dec00204 	addi	sp,sp,8
   233f4:	f800283a 	ret

000233f8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   233f8:	defffc04 	addi	sp,sp,-16
   233fc:	dfc00315 	stw	ra,12(sp)
   23400:	df000215 	stw	fp,8(sp)
   23404:	dc000115 	stw	r16,4(sp)
   23408:	df000104 	addi	fp,sp,4
   2340c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   23410:	e0bfff17 	ldw	r2,-4(fp)
   23414:	108000d0 	cmplti	r2,r2,3
   23418:	10000f1e 	bne	r2,zero,23458 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   2341c:	e13fff17 	ldw	r4,-4(fp)
   23420:	040000b4 	movhi	r16,2
   23424:	84175204 	addi	r16,r16,23880
   23428:	01400304 	movi	r5,12
   2342c:	0022b680 	call	22b68 <__mulsi3>
   23430:	1405883a 	add	r2,r2,r16
   23434:	10800204 	addi	r2,r2,8
   23438:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   2343c:	e13fff17 	ldw	r4,-4(fp)
   23440:	040000b4 	movhi	r16,2
   23444:	84175204 	addi	r16,r16,23880
   23448:	01400304 	movi	r5,12
   2344c:	0022b680 	call	22b68 <__mulsi3>
   23450:	1405883a 	add	r2,r2,r16
   23454:	10000015 	stw	zero,0(r2)
  }
}
   23458:	e037883a 	mov	sp,fp
   2345c:	dfc00217 	ldw	ra,8(sp)
   23460:	df000117 	ldw	fp,4(sp)
   23464:	dc000017 	ldw	r16,0(sp)
   23468:	dec00304 	addi	sp,sp,12
   2346c:	f800283a 	ret

00023470 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   23470:	defff804 	addi	sp,sp,-32
   23474:	df000715 	stw	fp,28(sp)
   23478:	df000704 	addi	fp,sp,28
   2347c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23480:	0005303a 	rdctl	r2,status
   23484:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23488:	e0fffb17 	ldw	r3,-20(fp)
   2348c:	00bfff84 	movi	r2,-2
   23490:	1884703a 	and	r2,r3,r2
   23494:	1001703a 	wrctl	status,r2
  
  return context;
   23498:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   2349c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   234a0:	d0a00a17 	ldw	r2,-32728(gp)
   234a4:	10c000c4 	addi	r3,r2,3
   234a8:	00bfff04 	movi	r2,-4
   234ac:	1884703a 	and	r2,r3,r2
   234b0:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   234b4:	d0e00a17 	ldw	r3,-32728(gp)
   234b8:	e0bffe17 	ldw	r2,-8(fp)
   234bc:	1887883a 	add	r3,r3,r2
   234c0:	00800134 	movhi	r2,4
   234c4:	10800004 	addi	r2,r2,0
   234c8:	10c0072e 	bgeu	r2,r3,234e8 <sbrk+0x78>
   234cc:	e0bffd17 	ldw	r2,-12(fp)
   234d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   234d4:	e0bffa17 	ldw	r2,-24(fp)
   234d8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   234dc:	00bfffc4 	movi	r2,-1
   234e0:	e0bfff15 	stw	r2,-4(fp)
   234e4:	00000c06 	br	23518 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   234e8:	d0a00a17 	ldw	r2,-32728(gp)
   234ec:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   234f0:	d0e00a17 	ldw	r3,-32728(gp)
   234f4:	e0bffe17 	ldw	r2,-8(fp)
   234f8:	1885883a 	add	r2,r3,r2
   234fc:	d0a00a15 	stw	r2,-32728(gp)
   23500:	e0bffd17 	ldw	r2,-12(fp)
   23504:	e0bff915 	stw	r2,-28(fp)
   23508:	e0bff917 	ldw	r2,-28(fp)
   2350c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   23510:	e0bffc17 	ldw	r2,-16(fp)
   23514:	e0bfff15 	stw	r2,-4(fp)
   23518:	e0bfff17 	ldw	r2,-4(fp)
} 
   2351c:	e037883a 	mov	sp,fp
   23520:	df000017 	ldw	fp,0(sp)
   23524:	dec00104 	addi	sp,sp,4
   23528:	f800283a 	ret

0002352c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2352c:	defff704 	addi	sp,sp,-36
   23530:	dfc00815 	stw	ra,32(sp)
   23534:	df000715 	stw	fp,28(sp)
   23538:	df000704 	addi	fp,sp,28
   2353c:	e13ffb15 	stw	r4,-20(fp)
   23540:	e17ffc15 	stw	r5,-16(fp)
   23544:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23548:	e0bffb17 	ldw	r2,-20(fp)
   2354c:	1004803a 	cmplt	r2,r2,zero
   23550:	1000091e 	bne	r2,zero,23578 <write+0x4c>
   23554:	e13ffb17 	ldw	r4,-20(fp)
   23558:	01400304 	movi	r5,12
   2355c:	0022b680 	call	22b68 <__mulsi3>
   23560:	1007883a 	mov	r3,r2
   23564:	008000b4 	movhi	r2,2
   23568:	10975204 	addi	r2,r2,23880
   2356c:	1887883a 	add	r3,r3,r2
   23570:	e0ffff15 	stw	r3,-4(fp)
   23574:	00000106 	br	2357c <write+0x50>
   23578:	e03fff15 	stw	zero,-4(fp)
   2357c:	e0bfff17 	ldw	r2,-4(fp)
   23580:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   23584:	e0bffa17 	ldw	r2,-24(fp)
   23588:	1005003a 	cmpeq	r2,r2,zero
   2358c:	1000241e 	bne	r2,zero,23620 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   23590:	e0bffa17 	ldw	r2,-24(fp)
   23594:	10800217 	ldw	r2,8(r2)
   23598:	108000cc 	andi	r2,r2,3
   2359c:	1005003a 	cmpeq	r2,r2,zero
   235a0:	10001a1e 	bne	r2,zero,2360c <write+0xe0>
   235a4:	e0bffa17 	ldw	r2,-24(fp)
   235a8:	10800017 	ldw	r2,0(r2)
   235ac:	10800617 	ldw	r2,24(r2)
   235b0:	1005003a 	cmpeq	r2,r2,zero
   235b4:	1000151e 	bne	r2,zero,2360c <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   235b8:	e0bffa17 	ldw	r2,-24(fp)
   235bc:	10800017 	ldw	r2,0(r2)
   235c0:	10800617 	ldw	r2,24(r2)
   235c4:	e17ffc17 	ldw	r5,-16(fp)
   235c8:	e1bffd17 	ldw	r6,-12(fp)
   235cc:	e13ffa17 	ldw	r4,-24(fp)
   235d0:	103ee83a 	callr	r2
   235d4:	e0bff915 	stw	r2,-28(fp)
   235d8:	e0bff917 	ldw	r2,-28(fp)
   235dc:	1004403a 	cmpge	r2,r2,zero
   235e0:	1000071e 	bne	r2,zero,23600 <write+0xd4>
      {
        ALT_ERRNO = -rval;
   235e4:	00236500 	call	23650 <alt_get_errno>
   235e8:	e0fff917 	ldw	r3,-28(fp)
   235ec:	00c7c83a 	sub	r3,zero,r3
   235f0:	10c00015 	stw	r3,0(r2)
        return -1;
   235f4:	00bfffc4 	movi	r2,-1
   235f8:	e0bffe15 	stw	r2,-8(fp)
   235fc:	00000e06 	br	23638 <write+0x10c>
      }
      return rval;
   23600:	e0bff917 	ldw	r2,-28(fp)
   23604:	e0bffe15 	stw	r2,-8(fp)
   23608:	00000b06 	br	23638 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2360c:	00236500 	call	23650 <alt_get_errno>
   23610:	1007883a 	mov	r3,r2
   23614:	00800344 	movi	r2,13
   23618:	18800015 	stw	r2,0(r3)
   2361c:	00000406 	br	23630 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   23620:	00236500 	call	23650 <alt_get_errno>
   23624:	1007883a 	mov	r3,r2
   23628:	00801444 	movi	r2,81
   2362c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23630:	00bfffc4 	movi	r2,-1
   23634:	e0bffe15 	stw	r2,-8(fp)
   23638:	e0bffe17 	ldw	r2,-8(fp)
}
   2363c:	e037883a 	mov	sp,fp
   23640:	dfc00117 	ldw	ra,4(sp)
   23644:	df000017 	ldw	fp,0(sp)
   23648:	dec00204 	addi	sp,sp,8
   2364c:	f800283a 	ret

00023650 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23650:	defffd04 	addi	sp,sp,-12
   23654:	dfc00215 	stw	ra,8(sp)
   23658:	df000115 	stw	fp,4(sp)
   2365c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   23660:	008000b4 	movhi	r2,2
   23664:	109bd304 	addi	r2,r2,28492
   23668:	10800017 	ldw	r2,0(r2)
   2366c:	1005003a 	cmpeq	r2,r2,zero
   23670:	1000061e 	bne	r2,zero,2368c <alt_get_errno+0x3c>
   23674:	008000b4 	movhi	r2,2
   23678:	109bd304 	addi	r2,r2,28492
   2367c:	10800017 	ldw	r2,0(r2)
   23680:	103ee83a 	callr	r2
   23684:	e0bfff15 	stw	r2,-4(fp)
   23688:	00000306 	br	23698 <alt_get_errno+0x48>
   2368c:	008000f4 	movhi	r2,3
   23690:	10a26d04 	addi	r2,r2,-30284
   23694:	e0bfff15 	stw	r2,-4(fp)
   23698:	e0bfff17 	ldw	r2,-4(fp)
}
   2369c:	e037883a 	mov	sp,fp
   236a0:	dfc00117 	ldw	ra,4(sp)
   236a4:	df000017 	ldw	fp,0(sp)
   236a8:	dec00204 	addi	sp,sp,8
   236ac:	f800283a 	ret

000236b0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   236b0:	defffd04 	addi	sp,sp,-12
   236b4:	dfc00215 	stw	ra,8(sp)
   236b8:	df000115 	stw	fp,4(sp)
   236bc:	df000104 	addi	fp,sp,4
   236c0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_0, cpu_0);
   236c4:	0024e180 	call	24e18 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   236c8:	00800044 	movi	r2,1
   236cc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   236d0:	e037883a 	mov	sp,fp
   236d4:	dfc00117 	ldw	ra,4(sp)
   236d8:	df000017 	ldw	fp,0(sp)
   236dc:	dec00204 	addi	sp,sp,8
   236e0:	f800283a 	ret

000236e4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   236e4:	defffe04 	addi	sp,sp,-8
   236e8:	dfc00115 	stw	ra,4(sp)
   236ec:	df000015 	stw	fp,0(sp)
   236f0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   236f4:	010000b4 	movhi	r4,2
   236f8:	2117bc04 	addi	r4,r4,24304
   236fc:	000b883a 	mov	r5,zero
   23700:	000d883a 	mov	r6,zero
   23704:	00238a80 	call	238a8 <altera_avalon_jtag_uart_init>
   23708:	010000b4 	movhi	r4,2
   2370c:	2117b204 	addi	r4,r4,24264
   23710:	00237280 	call	23728 <alt_dev_reg>
}
   23714:	e037883a 	mov	sp,fp
   23718:	dfc00117 	ldw	ra,4(sp)
   2371c:	df000017 	ldw	fp,0(sp)
   23720:	dec00204 	addi	sp,sp,8
   23724:	f800283a 	ret

00023728 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   23728:	defffd04 	addi	sp,sp,-12
   2372c:	dfc00215 	stw	ra,8(sp)
   23730:	df000115 	stw	fp,4(sp)
   23734:	df000104 	addi	fp,sp,4
   23738:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   2373c:	e13fff17 	ldw	r4,-4(fp)
   23740:	014000b4 	movhi	r5,2
   23744:	295bd004 	addi	r5,r5,28480
   23748:	002437c0 	call	2437c <alt_dev_llist_insert>
}
   2374c:	e037883a 	mov	sp,fp
   23750:	dfc00117 	ldw	ra,4(sp)
   23754:	df000017 	ldw	fp,0(sp)
   23758:	dec00204 	addi	sp,sp,8
   2375c:	f800283a 	ret

00023760 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   23760:	defffa04 	addi	sp,sp,-24
   23764:	dfc00515 	stw	ra,20(sp)
   23768:	df000415 	stw	fp,16(sp)
   2376c:	df000404 	addi	fp,sp,16
   23770:	e13ffd15 	stw	r4,-12(fp)
   23774:	e17ffe15 	stw	r5,-8(fp)
   23778:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2377c:	e0bffd17 	ldw	r2,-12(fp)
   23780:	10800017 	ldw	r2,0(r2)
   23784:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   23788:	e0bffc17 	ldw	r2,-16(fp)
   2378c:	11000a04 	addi	r4,r2,40
   23790:	e0bffd17 	ldw	r2,-12(fp)
   23794:	11c00217 	ldw	r7,8(r2)
   23798:	e17ffe17 	ldw	r5,-8(fp)
   2379c:	e1bfff17 	ldw	r6,-4(fp)
   237a0:	0023da80 	call	23da8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   237a4:	e037883a 	mov	sp,fp
   237a8:	dfc00117 	ldw	ra,4(sp)
   237ac:	df000017 	ldw	fp,0(sp)
   237b0:	dec00204 	addi	sp,sp,8
   237b4:	f800283a 	ret

000237b8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   237b8:	defffa04 	addi	sp,sp,-24
   237bc:	dfc00515 	stw	ra,20(sp)
   237c0:	df000415 	stw	fp,16(sp)
   237c4:	df000404 	addi	fp,sp,16
   237c8:	e13ffd15 	stw	r4,-12(fp)
   237cc:	e17ffe15 	stw	r5,-8(fp)
   237d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   237d4:	e0bffd17 	ldw	r2,-12(fp)
   237d8:	10800017 	ldw	r2,0(r2)
   237dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   237e0:	e0bffc17 	ldw	r2,-16(fp)
   237e4:	11000a04 	addi	r4,r2,40
   237e8:	e0bffd17 	ldw	r2,-12(fp)
   237ec:	11c00217 	ldw	r7,8(r2)
   237f0:	e17ffe17 	ldw	r5,-8(fp)
   237f4:	e1bfff17 	ldw	r6,-4(fp)
   237f8:	0023fcc0 	call	23fcc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   237fc:	e037883a 	mov	sp,fp
   23800:	dfc00117 	ldw	ra,4(sp)
   23804:	df000017 	ldw	fp,0(sp)
   23808:	dec00204 	addi	sp,sp,8
   2380c:	f800283a 	ret

00023810 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   23810:	defffc04 	addi	sp,sp,-16
   23814:	dfc00315 	stw	ra,12(sp)
   23818:	df000215 	stw	fp,8(sp)
   2381c:	df000204 	addi	fp,sp,8
   23820:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23824:	e0bfff17 	ldw	r2,-4(fp)
   23828:	10800017 	ldw	r2,0(r2)
   2382c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   23830:	e0bffe17 	ldw	r2,-8(fp)
   23834:	11000a04 	addi	r4,r2,40
   23838:	e0bfff17 	ldw	r2,-4(fp)
   2383c:	11400217 	ldw	r5,8(r2)
   23840:	0023c400 	call	23c40 <altera_avalon_jtag_uart_close>
}
   23844:	e037883a 	mov	sp,fp
   23848:	dfc00117 	ldw	ra,4(sp)
   2384c:	df000017 	ldw	fp,0(sp)
   23850:	dec00204 	addi	sp,sp,8
   23854:	f800283a 	ret

00023858 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   23858:	defffa04 	addi	sp,sp,-24
   2385c:	dfc00515 	stw	ra,20(sp)
   23860:	df000415 	stw	fp,16(sp)
   23864:	df000404 	addi	fp,sp,16
   23868:	e13ffd15 	stw	r4,-12(fp)
   2386c:	e17ffe15 	stw	r5,-8(fp)
   23870:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   23874:	e0bffd17 	ldw	r2,-12(fp)
   23878:	10800017 	ldw	r2,0(r2)
   2387c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   23880:	e0bffc17 	ldw	r2,-16(fp)
   23884:	11000a04 	addi	r4,r2,40
   23888:	e17ffe17 	ldw	r5,-8(fp)
   2388c:	e1bfff17 	ldw	r6,-4(fp)
   23890:	0023cb40 	call	23cb4 <altera_avalon_jtag_uart_ioctl>
}
   23894:	e037883a 	mov	sp,fp
   23898:	dfc00117 	ldw	ra,4(sp)
   2389c:	df000017 	ldw	fp,0(sp)
   238a0:	dec00204 	addi	sp,sp,8
   238a4:	f800283a 	ret

000238a8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   238a8:	defffa04 	addi	sp,sp,-24
   238ac:	dfc00515 	stw	ra,20(sp)
   238b0:	df000415 	stw	fp,16(sp)
   238b4:	df000404 	addi	fp,sp,16
   238b8:	e13ffd15 	stw	r4,-12(fp)
   238bc:	e17ffe15 	stw	r5,-8(fp)
   238c0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   238c4:	e0fffd17 	ldw	r3,-12(fp)
   238c8:	00800044 	movi	r2,1
   238cc:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   238d0:	e0bffd17 	ldw	r2,-12(fp)
   238d4:	10800017 	ldw	r2,0(r2)
   238d8:	11000104 	addi	r4,r2,4
   238dc:	e0bffd17 	ldw	r2,-12(fp)
   238e0:	10800817 	ldw	r2,32(r2)
   238e4:	1007883a 	mov	r3,r2
   238e8:	2005883a 	mov	r2,r4
   238ec:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   238f0:	e13ffe17 	ldw	r4,-8(fp)
   238f4:	e17fff17 	ldw	r5,-4(fp)
   238f8:	d8000015 	stw	zero,0(sp)
   238fc:	018000b4 	movhi	r6,2
   23900:	318e5a04 	addi	r6,r6,14696
   23904:	e1fffd17 	ldw	r7,-12(fp)
   23908:	00245740 	call	24574 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   2390c:	e0bffd17 	ldw	r2,-12(fp)
   23910:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   23914:	e0bffd17 	ldw	r2,-12(fp)
   23918:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2391c:	008000f4 	movhi	r2,3
   23920:	10a27204 	addi	r2,r2,-30264
   23924:	10800017 	ldw	r2,0(r2)
   23928:	100b883a 	mov	r5,r2
   2392c:	018000b4 	movhi	r6,2
   23930:	318ee404 	addi	r6,r6,15248
   23934:	e1fffd17 	ldw	r7,-12(fp)
   23938:	002420c0 	call	2420c <alt_alarm_start>
   2393c:	1004403a 	cmpge	r2,r2,zero
   23940:	1000041e 	bne	r2,zero,23954 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   23944:	e0fffd17 	ldw	r3,-12(fp)
   23948:	00a00034 	movhi	r2,32768
   2394c:	10bfffc4 	addi	r2,r2,-1
   23950:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   23954:	e037883a 	mov	sp,fp
   23958:	dfc00117 	ldw	ra,4(sp)
   2395c:	df000017 	ldw	fp,0(sp)
   23960:	dec00204 	addi	sp,sp,8
   23964:	f800283a 	ret

00023968 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   23968:	defff804 	addi	sp,sp,-32
   2396c:	df000715 	stw	fp,28(sp)
   23970:	df000704 	addi	fp,sp,28
   23974:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   23978:	e0bfff17 	ldw	r2,-4(fp)
   2397c:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   23980:	e0bffe17 	ldw	r2,-8(fp)
   23984:	10800017 	ldw	r2,0(r2)
   23988:	e0bffd15 	stw	r2,-12(fp)
   2398c:	00000006 	br	23990 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23990:	e0bffd17 	ldw	r2,-12(fp)
   23994:	10800104 	addi	r2,r2,4
   23998:	10800037 	ldwio	r2,0(r2)
   2399c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   239a0:	e0bffc17 	ldw	r2,-16(fp)
   239a4:	1080c00c 	andi	r2,r2,768
   239a8:	1005003a 	cmpeq	r2,r2,zero
   239ac:	1000741e 	bne	r2,zero,23b80 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   239b0:	e0bffc17 	ldw	r2,-16(fp)
   239b4:	1080400c 	andi	r2,r2,256
   239b8:	1005003a 	cmpeq	r2,r2,zero
   239bc:	1000351e 	bne	r2,zero,23a94 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   239c0:	00800074 	movhi	r2,1
   239c4:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   239c8:	e0bffe17 	ldw	r2,-8(fp)
   239cc:	10800a17 	ldw	r2,40(r2)
   239d0:	10800044 	addi	r2,r2,1
   239d4:	1081ffcc 	andi	r2,r2,2047
   239d8:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   239dc:	e0bffe17 	ldw	r2,-8(fp)
   239e0:	10c00b17 	ldw	r3,44(r2)
   239e4:	e0bffa17 	ldw	r2,-24(fp)
   239e8:	18801626 	beq	r3,r2,23a44 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   239ec:	e0bffd17 	ldw	r2,-12(fp)
   239f0:	10800037 	ldwio	r2,0(r2)
   239f4:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   239f8:	e0bffb17 	ldw	r2,-20(fp)
   239fc:	10a0000c 	andi	r2,r2,32768
   23a00:	1005003a 	cmpeq	r2,r2,zero
   23a04:	10000f1e 	bne	r2,zero,23a44 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   23a08:	e0bffe17 	ldw	r2,-8(fp)
   23a0c:	10c00a17 	ldw	r3,40(r2)
   23a10:	e0bffb17 	ldw	r2,-20(fp)
   23a14:	1009883a 	mov	r4,r2
   23a18:	e0bffe17 	ldw	r2,-8(fp)
   23a1c:	1885883a 	add	r2,r3,r2
   23a20:	10800e04 	addi	r2,r2,56
   23a24:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23a28:	e0bffe17 	ldw	r2,-8(fp)
   23a2c:	10800a17 	ldw	r2,40(r2)
   23a30:	10800044 	addi	r2,r2,1
   23a34:	10c1ffcc 	andi	r3,r2,2047
   23a38:	e0bffe17 	ldw	r2,-8(fp)
   23a3c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   23a40:	003fe106 	br	239c8 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   23a44:	e0bffb17 	ldw	r2,-20(fp)
   23a48:	10bfffec 	andhi	r2,r2,65535
   23a4c:	1005003a 	cmpeq	r2,r2,zero
   23a50:	1000101e 	bne	r2,zero,23a94 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23a54:	e0bffe17 	ldw	r2,-8(fp)
   23a58:	10c00817 	ldw	r3,32(r2)
   23a5c:	00bfff84 	movi	r2,-2
   23a60:	1886703a 	and	r3,r3,r2
   23a64:	e0bffe17 	ldw	r2,-8(fp)
   23a68:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   23a6c:	e0bffd17 	ldw	r2,-12(fp)
   23a70:	11000104 	addi	r4,r2,4
   23a74:	e0bffe17 	ldw	r2,-8(fp)
   23a78:	10800817 	ldw	r2,32(r2)
   23a7c:	1007883a 	mov	r3,r2
   23a80:	2005883a 	mov	r2,r4
   23a84:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23a88:	e0bffd17 	ldw	r2,-12(fp)
   23a8c:	10800104 	addi	r2,r2,4
   23a90:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   23a94:	e0bffc17 	ldw	r2,-16(fp)
   23a98:	1080800c 	andi	r2,r2,512
   23a9c:	1005003a 	cmpeq	r2,r2,zero
   23aa0:	103fbb1e 	bne	r2,zero,23990 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   23aa4:	e0bffc17 	ldw	r2,-16(fp)
   23aa8:	10bfffec 	andhi	r2,r2,65535
   23aac:	1004d43a 	srli	r2,r2,16
   23ab0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   23ab4:	00001506 	br	23b0c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   23ab8:	e13ffd17 	ldw	r4,-12(fp)
   23abc:	e0bffe17 	ldw	r2,-8(fp)
   23ac0:	10c00d17 	ldw	r3,52(r2)
   23ac4:	e0bffe17 	ldw	r2,-8(fp)
   23ac8:	1885883a 	add	r2,r3,r2
   23acc:	10820e04 	addi	r2,r2,2104
   23ad0:	10800003 	ldbu	r2,0(r2)
   23ad4:	10c03fcc 	andi	r3,r2,255
   23ad8:	18c0201c 	xori	r3,r3,128
   23adc:	18ffe004 	addi	r3,r3,-128
   23ae0:	2005883a 	mov	r2,r4
   23ae4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23ae8:	e0bffe17 	ldw	r2,-8(fp)
   23aec:	10800d17 	ldw	r2,52(r2)
   23af0:	10800044 	addi	r2,r2,1
   23af4:	10c1ffcc 	andi	r3,r2,2047
   23af8:	e0bffe17 	ldw	r2,-8(fp)
   23afc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   23b00:	e0bff917 	ldw	r2,-28(fp)
   23b04:	10bfffc4 	addi	r2,r2,-1
   23b08:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   23b0c:	e0bff917 	ldw	r2,-28(fp)
   23b10:	1005003a 	cmpeq	r2,r2,zero
   23b14:	1000051e 	bne	r2,zero,23b2c <altera_avalon_jtag_uart_irq+0x1c4>
   23b18:	e0bffe17 	ldw	r2,-8(fp)
   23b1c:	10c00d17 	ldw	r3,52(r2)
   23b20:	e0bffe17 	ldw	r2,-8(fp)
   23b24:	10800c17 	ldw	r2,48(r2)
   23b28:	18bfe31e 	bne	r3,r2,23ab8 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   23b2c:	e0bff917 	ldw	r2,-28(fp)
   23b30:	1005003a 	cmpeq	r2,r2,zero
   23b34:	103f961e 	bne	r2,zero,23990 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   23b38:	e0bffe17 	ldw	r2,-8(fp)
   23b3c:	10c00817 	ldw	r3,32(r2)
   23b40:	00bfff44 	movi	r2,-3
   23b44:	1886703a 	and	r3,r3,r2
   23b48:	e0bffe17 	ldw	r2,-8(fp)
   23b4c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   23b50:	e0bffe17 	ldw	r2,-8(fp)
   23b54:	10800017 	ldw	r2,0(r2)
   23b58:	11000104 	addi	r4,r2,4
   23b5c:	e0bffe17 	ldw	r2,-8(fp)
   23b60:	10800817 	ldw	r2,32(r2)
   23b64:	1007883a 	mov	r3,r2
   23b68:	2005883a 	mov	r2,r4
   23b6c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23b70:	e0bffd17 	ldw	r2,-12(fp)
   23b74:	10800104 	addi	r2,r2,4
   23b78:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   23b7c:	003f8406 	br	23990 <altera_avalon_jtag_uart_irq+0x28>
}
   23b80:	e037883a 	mov	sp,fp
   23b84:	df000017 	ldw	fp,0(sp)
   23b88:	dec00104 	addi	sp,sp,4
   23b8c:	f800283a 	ret

00023b90 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   23b90:	defffc04 	addi	sp,sp,-16
   23b94:	df000315 	stw	fp,12(sp)
   23b98:	df000304 	addi	fp,sp,12
   23b9c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   23ba0:	e0bfff17 	ldw	r2,-4(fp)
   23ba4:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   23ba8:	e0bffe17 	ldw	r2,-8(fp)
   23bac:	10800017 	ldw	r2,0(r2)
   23bb0:	10800104 	addi	r2,r2,4
   23bb4:	10800037 	ldwio	r2,0(r2)
   23bb8:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   23bbc:	e0bffd17 	ldw	r2,-12(fp)
   23bc0:	1081000c 	andi	r2,r2,1024
   23bc4:	1005003a 	cmpeq	r2,r2,zero
   23bc8:	10000c1e 	bne	r2,zero,23bfc <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   23bcc:	e0bffe17 	ldw	r2,-8(fp)
   23bd0:	10800017 	ldw	r2,0(r2)
   23bd4:	11000104 	addi	r4,r2,4
   23bd8:	e0bffe17 	ldw	r2,-8(fp)
   23bdc:	10800817 	ldw	r2,32(r2)
   23be0:	10810014 	ori	r2,r2,1024
   23be4:	1007883a 	mov	r3,r2
   23be8:	2005883a 	mov	r2,r4
   23bec:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   23bf0:	e0bffe17 	ldw	r2,-8(fp)
   23bf4:	10000915 	stw	zero,36(r2)
   23bf8:	00000a06 	br	23c24 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   23bfc:	e0bffe17 	ldw	r2,-8(fp)
   23c00:	10c00917 	ldw	r3,36(r2)
   23c04:	00a00034 	movhi	r2,32768
   23c08:	10bfff04 	addi	r2,r2,-4
   23c0c:	10c00536 	bltu	r2,r3,23c24 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   23c10:	e0bffe17 	ldw	r2,-8(fp)
   23c14:	10800917 	ldw	r2,36(r2)
   23c18:	10c00044 	addi	r3,r2,1
   23c1c:	e0bffe17 	ldw	r2,-8(fp)
   23c20:	10c00915 	stw	r3,36(r2)
   23c24:	008000f4 	movhi	r2,3
   23c28:	10a27204 	addi	r2,r2,-30264
   23c2c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   23c30:	e037883a 	mov	sp,fp
   23c34:	df000017 	ldw	fp,0(sp)
   23c38:	dec00104 	addi	sp,sp,4
   23c3c:	f800283a 	ret

00023c40 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   23c40:	defffc04 	addi	sp,sp,-16
   23c44:	df000315 	stw	fp,12(sp)
   23c48:	df000304 	addi	fp,sp,12
   23c4c:	e13ffd15 	stw	r4,-12(fp)
   23c50:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   23c54:	00000706 	br	23c74 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   23c58:	e0bffe17 	ldw	r2,-8(fp)
   23c5c:	1090000c 	andi	r2,r2,16384
   23c60:	1005003a 	cmpeq	r2,r2,zero
   23c64:	1000031e 	bne	r2,zero,23c74 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   23c68:	00bffd44 	movi	r2,-11
   23c6c:	e0bfff15 	stw	r2,-4(fp)
   23c70:	00000b06 	br	23ca0 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   23c74:	e0bffd17 	ldw	r2,-12(fp)
   23c78:	10c00d17 	ldw	r3,52(r2)
   23c7c:	e0bffd17 	ldw	r2,-12(fp)
   23c80:	10800c17 	ldw	r2,48(r2)
   23c84:	18800526 	beq	r3,r2,23c9c <altera_avalon_jtag_uart_close+0x5c>
   23c88:	e0bffd17 	ldw	r2,-12(fp)
   23c8c:	10c00917 	ldw	r3,36(r2)
   23c90:	e0bffd17 	ldw	r2,-12(fp)
   23c94:	10800117 	ldw	r2,4(r2)
   23c98:	18bfef36 	bltu	r3,r2,23c58 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   23c9c:	e03fff15 	stw	zero,-4(fp)
   23ca0:	e0bfff17 	ldw	r2,-4(fp)
}
   23ca4:	e037883a 	mov	sp,fp
   23ca8:	df000017 	ldw	fp,0(sp)
   23cac:	dec00104 	addi	sp,sp,4
   23cb0:	f800283a 	ret

00023cb4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   23cb4:	defff804 	addi	sp,sp,-32
   23cb8:	df000715 	stw	fp,28(sp)
   23cbc:	df000704 	addi	fp,sp,28
   23cc0:	e13ffb15 	stw	r4,-20(fp)
   23cc4:	e17ffc15 	stw	r5,-16(fp)
   23cc8:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   23ccc:	00bff9c4 	movi	r2,-25
   23cd0:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   23cd4:	e0bffc17 	ldw	r2,-16(fp)
   23cd8:	e0bfff15 	stw	r2,-4(fp)
   23cdc:	e0ffff17 	ldw	r3,-4(fp)
   23ce0:	189a8060 	cmpeqi	r2,r3,27137
   23ce4:	1000041e 	bne	r2,zero,23cf8 <altera_avalon_jtag_uart_ioctl+0x44>
   23ce8:	e0ffff17 	ldw	r3,-4(fp)
   23cec:	189a80a0 	cmpeqi	r2,r3,27138
   23cf0:	10001b1e 	bne	r2,zero,23d60 <altera_avalon_jtag_uart_ioctl+0xac>
   23cf4:	00002706 	br	23d94 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   23cf8:	e0bffb17 	ldw	r2,-20(fp)
   23cfc:	10c00117 	ldw	r3,4(r2)
   23d00:	00a00034 	movhi	r2,32768
   23d04:	10bfffc4 	addi	r2,r2,-1
   23d08:	18802226 	beq	r3,r2,23d94 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   23d0c:	e0bffd17 	ldw	r2,-12(fp)
   23d10:	10800017 	ldw	r2,0(r2)
   23d14:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   23d18:	e0bff917 	ldw	r2,-28(fp)
   23d1c:	10800090 	cmplti	r2,r2,2
   23d20:	1000071e 	bne	r2,zero,23d40 <altera_avalon_jtag_uart_ioctl+0x8c>
   23d24:	e0fff917 	ldw	r3,-28(fp)
   23d28:	00a00034 	movhi	r2,32768
   23d2c:	10bfffc4 	addi	r2,r2,-1
   23d30:	18800326 	beq	r3,r2,23d40 <altera_avalon_jtag_uart_ioctl+0x8c>
   23d34:	e0bff917 	ldw	r2,-28(fp)
   23d38:	e0bffe15 	stw	r2,-8(fp)
   23d3c:	00000306 	br	23d4c <altera_avalon_jtag_uart_ioctl+0x98>
   23d40:	00e00034 	movhi	r3,32768
   23d44:	18ffff84 	addi	r3,r3,-2
   23d48:	e0fffe15 	stw	r3,-8(fp)
   23d4c:	e0bffb17 	ldw	r2,-20(fp)
   23d50:	e0fffe17 	ldw	r3,-8(fp)
   23d54:	10c00115 	stw	r3,4(r2)
      rc = 0;
   23d58:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   23d5c:	00000d06 	br	23d94 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   23d60:	e0bffb17 	ldw	r2,-20(fp)
   23d64:	10c00117 	ldw	r3,4(r2)
   23d68:	00a00034 	movhi	r2,32768
   23d6c:	10bfffc4 	addi	r2,r2,-1
   23d70:	18800826 	beq	r3,r2,23d94 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   23d74:	e13ffd17 	ldw	r4,-12(fp)
   23d78:	e0bffb17 	ldw	r2,-20(fp)
   23d7c:	10c00917 	ldw	r3,36(r2)
   23d80:	e0bffb17 	ldw	r2,-20(fp)
   23d84:	10800117 	ldw	r2,4(r2)
   23d88:	1885803a 	cmpltu	r2,r3,r2
   23d8c:	20800015 	stw	r2,0(r4)
      rc = 0;
   23d90:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   23d94:	e0bffa17 	ldw	r2,-24(fp)
}
   23d98:	e037883a 	mov	sp,fp
   23d9c:	df000017 	ldw	fp,0(sp)
   23da0:	dec00104 	addi	sp,sp,4
   23da4:	f800283a 	ret

00023da8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   23da8:	defff204 	addi	sp,sp,-56
   23dac:	dfc00d15 	stw	ra,52(sp)
   23db0:	df000c15 	stw	fp,48(sp)
   23db4:	df000c04 	addi	fp,sp,48
   23db8:	e13ffb15 	stw	r4,-20(fp)
   23dbc:	e17ffc15 	stw	r5,-16(fp)
   23dc0:	e1bffd15 	stw	r6,-12(fp)
   23dc4:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   23dc8:	e0bffc17 	ldw	r2,-16(fp)
   23dcc:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   23dd0:	00004806 	br	23ef4 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   23dd4:	e0bffb17 	ldw	r2,-20(fp)
   23dd8:	10800a17 	ldw	r2,40(r2)
   23ddc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   23de0:	e0bffb17 	ldw	r2,-20(fp)
   23de4:	10800b17 	ldw	r2,44(r2)
   23de8:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   23dec:	e0fff717 	ldw	r3,-36(fp)
   23df0:	e0bff617 	ldw	r2,-40(fp)
   23df4:	18800536 	bltu	r3,r2,23e0c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   23df8:	e0bff717 	ldw	r2,-36(fp)
   23dfc:	e0fff617 	ldw	r3,-40(fp)
   23e00:	10c5c83a 	sub	r2,r2,r3
   23e04:	e0bff815 	stw	r2,-32(fp)
   23e08:	00000406 	br	23e1c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   23e0c:	00820004 	movi	r2,2048
   23e10:	e0fff617 	ldw	r3,-40(fp)
   23e14:	10c5c83a 	sub	r2,r2,r3
   23e18:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   23e1c:	e0bff817 	ldw	r2,-32(fp)
   23e20:	1005003a 	cmpeq	r2,r2,zero
   23e24:	10001f1e 	bne	r2,zero,23ea4 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   23e28:	e0fffd17 	ldw	r3,-12(fp)
   23e2c:	e0bff817 	ldw	r2,-32(fp)
   23e30:	1880022e 	bgeu	r3,r2,23e3c <altera_avalon_jtag_uart_read+0x94>
        n = space;
   23e34:	e0bffd17 	ldw	r2,-12(fp)
   23e38:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   23e3c:	e0bffb17 	ldw	r2,-20(fp)
   23e40:	10c00e04 	addi	r3,r2,56
   23e44:	e0bff617 	ldw	r2,-40(fp)
   23e48:	1887883a 	add	r3,r3,r2
   23e4c:	e0bffa17 	ldw	r2,-24(fp)
   23e50:	1009883a 	mov	r4,r2
   23e54:	180b883a 	mov	r5,r3
   23e58:	e1bff817 	ldw	r6,-32(fp)
   23e5c:	002100c0 	call	2100c <memcpy>
      ptr   += n;
   23e60:	e0fff817 	ldw	r3,-32(fp)
   23e64:	e0bffa17 	ldw	r2,-24(fp)
   23e68:	10c5883a 	add	r2,r2,r3
   23e6c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   23e70:	e0fffd17 	ldw	r3,-12(fp)
   23e74:	e0bff817 	ldw	r2,-32(fp)
   23e78:	1885c83a 	sub	r2,r3,r2
   23e7c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23e80:	e0fff617 	ldw	r3,-40(fp)
   23e84:	e0bff817 	ldw	r2,-32(fp)
   23e88:	1885883a 	add	r2,r3,r2
   23e8c:	10c1ffcc 	andi	r3,r2,2047
   23e90:	e0bffb17 	ldw	r2,-20(fp)
   23e94:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   23e98:	e0bffd17 	ldw	r2,-12(fp)
   23e9c:	10800048 	cmpgei	r2,r2,1
   23ea0:	103fcc1e 	bne	r2,zero,23dd4 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   23ea4:	e0fffa17 	ldw	r3,-24(fp)
   23ea8:	e0bffc17 	ldw	r2,-16(fp)
   23eac:	1880141e 	bne	r3,r2,23f00 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   23eb0:	e0bffe17 	ldw	r2,-8(fp)
   23eb4:	1090000c 	andi	r2,r2,16384
   23eb8:	1004c03a 	cmpne	r2,r2,zero
   23ebc:	1000101e 	bne	r2,zero,23f00 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   23ec0:	e0bffb17 	ldw	r2,-20(fp)
   23ec4:	10c00a17 	ldw	r3,40(r2)
   23ec8:	e0bff717 	ldw	r2,-36(fp)
   23ecc:	1880051e 	bne	r3,r2,23ee4 <altera_avalon_jtag_uart_read+0x13c>
   23ed0:	e0bffb17 	ldw	r2,-20(fp)
   23ed4:	10c00917 	ldw	r3,36(r2)
   23ed8:	e0bffb17 	ldw	r2,-20(fp)
   23edc:	10800117 	ldw	r2,4(r2)
   23ee0:	18bff736 	bltu	r3,r2,23ec0 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   23ee4:	e0bffb17 	ldw	r2,-20(fp)
   23ee8:	10c00a17 	ldw	r3,40(r2)
   23eec:	e0bff717 	ldw	r2,-36(fp)
   23ef0:	18800326 	beq	r3,r2,23f00 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   23ef4:	e0bffd17 	ldw	r2,-12(fp)
   23ef8:	10800048 	cmpgei	r2,r2,1
   23efc:	103fb51e 	bne	r2,zero,23dd4 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   23f00:	e0fffa17 	ldw	r3,-24(fp)
   23f04:	e0bffc17 	ldw	r2,-16(fp)
   23f08:	18801926 	beq	r3,r2,23f70 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23f0c:	0005303a 	rdctl	r2,status
   23f10:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23f14:	e0fff517 	ldw	r3,-44(fp)
   23f18:	00bfff84 	movi	r2,-2
   23f1c:	1884703a 	and	r2,r3,r2
   23f20:	1001703a 	wrctl	status,r2
  
  return context;
   23f24:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   23f28:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23f2c:	e0bffb17 	ldw	r2,-20(fp)
   23f30:	10800817 	ldw	r2,32(r2)
   23f34:	10c00054 	ori	r3,r2,1
   23f38:	e0bffb17 	ldw	r2,-20(fp)
   23f3c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   23f40:	e0bffb17 	ldw	r2,-20(fp)
   23f44:	10800017 	ldw	r2,0(r2)
   23f48:	11000104 	addi	r4,r2,4
   23f4c:	e0bffb17 	ldw	r2,-20(fp)
   23f50:	10800817 	ldw	r2,32(r2)
   23f54:	1007883a 	mov	r3,r2
   23f58:	2005883a 	mov	r2,r4
   23f5c:	10c00035 	stwio	r3,0(r2)
   23f60:	e0bff917 	ldw	r2,-28(fp)
   23f64:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23f68:	e0bff417 	ldw	r2,-48(fp)
   23f6c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   23f70:	e0fffa17 	ldw	r3,-24(fp)
   23f74:	e0bffc17 	ldw	r2,-16(fp)
   23f78:	18800526 	beq	r3,r2,23f90 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   23f7c:	e0fffa17 	ldw	r3,-24(fp)
   23f80:	e0bffc17 	ldw	r2,-16(fp)
   23f84:	1887c83a 	sub	r3,r3,r2
   23f88:	e0ffff15 	stw	r3,-4(fp)
   23f8c:	00000906 	br	23fb4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   23f90:	e0bffe17 	ldw	r2,-8(fp)
   23f94:	1090000c 	andi	r2,r2,16384
   23f98:	1005003a 	cmpeq	r2,r2,zero
   23f9c:	1000031e 	bne	r2,zero,23fac <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   23fa0:	00bffd44 	movi	r2,-11
   23fa4:	e0bfff15 	stw	r2,-4(fp)
   23fa8:	00000206 	br	23fb4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   23fac:	00bffec4 	movi	r2,-5
   23fb0:	e0bfff15 	stw	r2,-4(fp)
   23fb4:	e0bfff17 	ldw	r2,-4(fp)
}
   23fb8:	e037883a 	mov	sp,fp
   23fbc:	dfc00117 	ldw	ra,4(sp)
   23fc0:	df000017 	ldw	fp,0(sp)
   23fc4:	dec00204 	addi	sp,sp,8
   23fc8:	f800283a 	ret

00023fcc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   23fcc:	defff204 	addi	sp,sp,-56
   23fd0:	dfc00d15 	stw	ra,52(sp)
   23fd4:	df000c15 	stw	fp,48(sp)
   23fd8:	df000c04 	addi	fp,sp,48
   23fdc:	e13ffb15 	stw	r4,-20(fp)
   23fe0:	e17ffc15 	stw	r5,-16(fp)
   23fe4:	e1bffd15 	stw	r6,-12(fp)
   23fe8:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   23fec:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   23ff0:	e0bffc17 	ldw	r2,-16(fp)
   23ff4:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   23ff8:	00003a06 	br	240e4 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   23ffc:	e0bffb17 	ldw	r2,-20(fp)
   24000:	10800c17 	ldw	r2,48(r2)
   24004:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   24008:	e0bffb17 	ldw	r2,-20(fp)
   2400c:	10800d17 	ldw	r2,52(r2)
   24010:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   24014:	e0fffa17 	ldw	r3,-24(fp)
   24018:	e0bff917 	ldw	r2,-28(fp)
   2401c:	1880062e 	bgeu	r3,r2,24038 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   24020:	e0fff917 	ldw	r3,-28(fp)
   24024:	e0bffa17 	ldw	r2,-24(fp)
   24028:	1885c83a 	sub	r2,r3,r2
   2402c:	10bfffc4 	addi	r2,r2,-1
   24030:	e0bff815 	stw	r2,-32(fp)
   24034:	00000c06 	br	24068 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   24038:	e0bff917 	ldw	r2,-28(fp)
   2403c:	1005003a 	cmpeq	r2,r2,zero
   24040:	1000051e 	bne	r2,zero,24058 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   24044:	00820004 	movi	r2,2048
   24048:	e0fffa17 	ldw	r3,-24(fp)
   2404c:	10c5c83a 	sub	r2,r2,r3
   24050:	e0bff815 	stw	r2,-32(fp)
   24054:	00000406 	br	24068 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   24058:	0081ffc4 	movi	r2,2047
   2405c:	e0fffa17 	ldw	r3,-24(fp)
   24060:	10c5c83a 	sub	r2,r2,r3
   24064:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   24068:	e0bff817 	ldw	r2,-32(fp)
   2406c:	1005003a 	cmpeq	r2,r2,zero
   24070:	10001f1e 	bne	r2,zero,240f0 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   24074:	e0fffd17 	ldw	r3,-12(fp)
   24078:	e0bff817 	ldw	r2,-32(fp)
   2407c:	1880022e 	bgeu	r3,r2,24088 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   24080:	e0bffd17 	ldw	r2,-12(fp)
   24084:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   24088:	e0bffb17 	ldw	r2,-20(fp)
   2408c:	10c20e04 	addi	r3,r2,2104
   24090:	e0bffa17 	ldw	r2,-24(fp)
   24094:	1885883a 	add	r2,r3,r2
   24098:	e0fffc17 	ldw	r3,-16(fp)
   2409c:	1009883a 	mov	r4,r2
   240a0:	180b883a 	mov	r5,r3
   240a4:	e1bff817 	ldw	r6,-32(fp)
   240a8:	002100c0 	call	2100c <memcpy>
      ptr   += n;
   240ac:	e0fff817 	ldw	r3,-32(fp)
   240b0:	e0bffc17 	ldw	r2,-16(fp)
   240b4:	10c5883a 	add	r2,r2,r3
   240b8:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   240bc:	e0fffd17 	ldw	r3,-12(fp)
   240c0:	e0bff817 	ldw	r2,-32(fp)
   240c4:	1885c83a 	sub	r2,r3,r2
   240c8:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   240cc:	e0fffa17 	ldw	r3,-24(fp)
   240d0:	e0bff817 	ldw	r2,-32(fp)
   240d4:	1885883a 	add	r2,r3,r2
   240d8:	10c1ffcc 	andi	r3,r2,2047
   240dc:	e0bffb17 	ldw	r2,-20(fp)
   240e0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   240e4:	e0bffd17 	ldw	r2,-12(fp)
   240e8:	10800048 	cmpgei	r2,r2,1
   240ec:	103fc31e 	bne	r2,zero,23ffc <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   240f0:	0005303a 	rdctl	r2,status
   240f4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   240f8:	e0fff517 	ldw	r3,-44(fp)
   240fc:	00bfff84 	movi	r2,-2
   24100:	1884703a 	and	r2,r3,r2
   24104:	1001703a 	wrctl	status,r2
  
  return context;
   24108:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   2410c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   24110:	e0bffb17 	ldw	r2,-20(fp)
   24114:	10800817 	ldw	r2,32(r2)
   24118:	10c00094 	ori	r3,r2,2
   2411c:	e0bffb17 	ldw	r2,-20(fp)
   24120:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   24124:	e0bffb17 	ldw	r2,-20(fp)
   24128:	10800017 	ldw	r2,0(r2)
   2412c:	11000104 	addi	r4,r2,4
   24130:	e0bffb17 	ldw	r2,-20(fp)
   24134:	10800817 	ldw	r2,32(r2)
   24138:	1007883a 	mov	r3,r2
   2413c:	2005883a 	mov	r2,r4
   24140:	10c00035 	stwio	r3,0(r2)
   24144:	e0bff717 	ldw	r2,-36(fp)
   24148:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2414c:	e0bff417 	ldw	r2,-48(fp)
   24150:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   24154:	e0bffd17 	ldw	r2,-12(fp)
   24158:	10800050 	cmplti	r2,r2,1
   2415c:	1000111e 	bne	r2,zero,241a4 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   24160:	e0bffe17 	ldw	r2,-8(fp)
   24164:	1090000c 	andi	r2,r2,16384
   24168:	1004c03a 	cmpne	r2,r2,zero
   2416c:	1000101e 	bne	r2,zero,241b0 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   24170:	e0bffb17 	ldw	r2,-20(fp)
   24174:	10c00d17 	ldw	r3,52(r2)
   24178:	e0bff917 	ldw	r2,-28(fp)
   2417c:	1880051e 	bne	r3,r2,24194 <altera_avalon_jtag_uart_write+0x1c8>
   24180:	e0bffb17 	ldw	r2,-20(fp)
   24184:	10c00917 	ldw	r3,36(r2)
   24188:	e0bffb17 	ldw	r2,-20(fp)
   2418c:	10800117 	ldw	r2,4(r2)
   24190:	18bff736 	bltu	r3,r2,24170 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   24194:	e0bffb17 	ldw	r2,-20(fp)
   24198:	10c00d17 	ldw	r3,52(r2)
   2419c:	e0bff917 	ldw	r2,-28(fp)
   241a0:	18800326 	beq	r3,r2,241b0 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   241a4:	e0bffd17 	ldw	r2,-12(fp)
   241a8:	10800048 	cmpgei	r2,r2,1
   241ac:	103fcd1e 	bne	r2,zero,240e4 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   241b0:	e0fffc17 	ldw	r3,-16(fp)
   241b4:	e0bff617 	ldw	r2,-40(fp)
   241b8:	18800526 	beq	r3,r2,241d0 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   241bc:	e0fffc17 	ldw	r3,-16(fp)
   241c0:	e0bff617 	ldw	r2,-40(fp)
   241c4:	1887c83a 	sub	r3,r3,r2
   241c8:	e0ffff15 	stw	r3,-4(fp)
   241cc:	00000906 	br	241f4 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   241d0:	e0bffe17 	ldw	r2,-8(fp)
   241d4:	1090000c 	andi	r2,r2,16384
   241d8:	1005003a 	cmpeq	r2,r2,zero
   241dc:	1000031e 	bne	r2,zero,241ec <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   241e0:	00bffd44 	movi	r2,-11
   241e4:	e0bfff15 	stw	r2,-4(fp)
   241e8:	00000206 	br	241f4 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   241ec:	00bffec4 	movi	r2,-5
   241f0:	e0bfff15 	stw	r2,-4(fp)
   241f4:	e0bfff17 	ldw	r2,-4(fp)
}
   241f8:	e037883a 	mov	sp,fp
   241fc:	dfc00117 	ldw	ra,4(sp)
   24200:	df000017 	ldw	fp,0(sp)
   24204:	dec00204 	addi	sp,sp,8
   24208:	f800283a 	ret

0002420c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   2420c:	defff404 	addi	sp,sp,-48
   24210:	df000b15 	stw	fp,44(sp)
   24214:	df000b04 	addi	fp,sp,44
   24218:	e13ffb15 	stw	r4,-20(fp)
   2421c:	e17ffc15 	stw	r5,-16(fp)
   24220:	e1bffd15 	stw	r6,-12(fp)
   24224:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   24228:	e03ff915 	stw	zero,-28(fp)
   2422c:	008000f4 	movhi	r2,3
   24230:	10a27204 	addi	r2,r2,-30264
   24234:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   24238:	1005003a 	cmpeq	r2,r2,zero
   2423c:	1000411e 	bne	r2,zero,24344 <alt_alarm_start+0x138>
  {
    if (alarm)
   24240:	e0bffb17 	ldw	r2,-20(fp)
   24244:	1005003a 	cmpeq	r2,r2,zero
   24248:	10003b1e 	bne	r2,zero,24338 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   2424c:	e0fffb17 	ldw	r3,-20(fp)
   24250:	e0bffd17 	ldw	r2,-12(fp)
   24254:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   24258:	e0fffb17 	ldw	r3,-20(fp)
   2425c:	e0bffe17 	ldw	r2,-8(fp)
   24260:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24264:	0005303a 	rdctl	r2,status
   24268:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2426c:	e0fff817 	ldw	r3,-32(fp)
   24270:	00bfff84 	movi	r2,-2
   24274:	1884703a 	and	r2,r3,r2
   24278:	1001703a 	wrctl	status,r2
  
  return context;
   2427c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   24280:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   24284:	008000f4 	movhi	r2,3
   24288:	10a27304 	addi	r2,r2,-30260
   2428c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   24290:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   24294:	e0fffc17 	ldw	r3,-16(fp)
   24298:	e0bff917 	ldw	r2,-28(fp)
   2429c:	1885883a 	add	r2,r3,r2
   242a0:	10c00044 	addi	r3,r2,1
   242a4:	e0bffb17 	ldw	r2,-20(fp)
   242a8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   242ac:	e0bffb17 	ldw	r2,-20(fp)
   242b0:	10c00217 	ldw	r3,8(r2)
   242b4:	e0bff917 	ldw	r2,-28(fp)
   242b8:	1880042e 	bgeu	r3,r2,242cc <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   242bc:	e0fffb17 	ldw	r3,-20(fp)
   242c0:	00800044 	movi	r2,1
   242c4:	18800405 	stb	r2,16(r3)
   242c8:	00000206 	br	242d4 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   242cc:	e0bffb17 	ldw	r2,-20(fp)
   242d0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   242d4:	e0fffb17 	ldw	r3,-20(fp)
   242d8:	008000b4 	movhi	r2,2
   242dc:	109bd604 	addi	r2,r2,28504
   242e0:	e0bff615 	stw	r2,-40(fp)
   242e4:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   242e8:	e0fff717 	ldw	r3,-36(fp)
   242ec:	e0bff617 	ldw	r2,-40(fp)
   242f0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   242f4:	e0bff617 	ldw	r2,-40(fp)
   242f8:	10c00017 	ldw	r3,0(r2)
   242fc:	e0bff717 	ldw	r2,-36(fp)
   24300:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   24304:	e0bff617 	ldw	r2,-40(fp)
   24308:	10c00017 	ldw	r3,0(r2)
   2430c:	e0bff717 	ldw	r2,-36(fp)
   24310:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   24314:	e0fff617 	ldw	r3,-40(fp)
   24318:	e0bff717 	ldw	r2,-36(fp)
   2431c:	18800015 	stw	r2,0(r3)
   24320:	e0bffa17 	ldw	r2,-24(fp)
   24324:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24328:	e0bff517 	ldw	r2,-44(fp)
   2432c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   24330:	e03fff15 	stw	zero,-4(fp)
   24334:	00000506 	br	2434c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   24338:	00bffa84 	movi	r2,-22
   2433c:	e0bfff15 	stw	r2,-4(fp)
   24340:	00000206 	br	2434c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   24344:	00bfde84 	movi	r2,-134
   24348:	e0bfff15 	stw	r2,-4(fp)
   2434c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   24350:	e037883a 	mov	sp,fp
   24354:	df000017 	ldw	fp,0(sp)
   24358:	dec00104 	addi	sp,sp,4
   2435c:	f800283a 	ret

00024360 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   24360:	deffff04 	addi	sp,sp,-4
   24364:	df000015 	stw	fp,0(sp)
   24368:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2436c:	e037883a 	mov	sp,fp
   24370:	df000017 	ldw	fp,0(sp)
   24374:	dec00104 	addi	sp,sp,4
   24378:	f800283a 	ret

0002437c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2437c:	defff904 	addi	sp,sp,-28
   24380:	dfc00615 	stw	ra,24(sp)
   24384:	df000515 	stw	fp,20(sp)
   24388:	df000504 	addi	fp,sp,20
   2438c:	e13ffd15 	stw	r4,-12(fp)
   24390:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   24394:	e0bffd17 	ldw	r2,-12(fp)
   24398:	1005003a 	cmpeq	r2,r2,zero
   2439c:	1000041e 	bne	r2,zero,243b0 <alt_dev_llist_insert+0x34>
   243a0:	e0bffd17 	ldw	r2,-12(fp)
   243a4:	10800217 	ldw	r2,8(r2)
   243a8:	1004c03a 	cmpne	r2,r2,zero
   243ac:	1000071e 	bne	r2,zero,243cc <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   243b0:	00244300 	call	24430 <alt_get_errno>
   243b4:	1007883a 	mov	r3,r2
   243b8:	00800584 	movi	r2,22
   243bc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   243c0:	00bffa84 	movi	r2,-22
   243c4:	e0bfff15 	stw	r2,-4(fp)
   243c8:	00001306 	br	24418 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   243cc:	e0fffd17 	ldw	r3,-12(fp)
   243d0:	e0bffe17 	ldw	r2,-8(fp)
   243d4:	e0bffb15 	stw	r2,-20(fp)
   243d8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   243dc:	e0fffc17 	ldw	r3,-16(fp)
   243e0:	e0bffb17 	ldw	r2,-20(fp)
   243e4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   243e8:	e0bffb17 	ldw	r2,-20(fp)
   243ec:	10c00017 	ldw	r3,0(r2)
   243f0:	e0bffc17 	ldw	r2,-16(fp)
   243f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   243f8:	e0bffb17 	ldw	r2,-20(fp)
   243fc:	10c00017 	ldw	r3,0(r2)
   24400:	e0bffc17 	ldw	r2,-16(fp)
   24404:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   24408:	e0fffb17 	ldw	r3,-20(fp)
   2440c:	e0bffc17 	ldw	r2,-16(fp)
   24410:	18800015 	stw	r2,0(r3)

  return 0;  
   24414:	e03fff15 	stw	zero,-4(fp)
   24418:	e0bfff17 	ldw	r2,-4(fp)
}
   2441c:	e037883a 	mov	sp,fp
   24420:	dfc00117 	ldw	ra,4(sp)
   24424:	df000017 	ldw	fp,0(sp)
   24428:	dec00204 	addi	sp,sp,8
   2442c:	f800283a 	ret

00024430 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24430:	defffd04 	addi	sp,sp,-12
   24434:	dfc00215 	stw	ra,8(sp)
   24438:	df000115 	stw	fp,4(sp)
   2443c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   24440:	008000b4 	movhi	r2,2
   24444:	109bd304 	addi	r2,r2,28492
   24448:	10800017 	ldw	r2,0(r2)
   2444c:	1005003a 	cmpeq	r2,r2,zero
   24450:	1000061e 	bne	r2,zero,2446c <alt_get_errno+0x3c>
   24454:	008000b4 	movhi	r2,2
   24458:	109bd304 	addi	r2,r2,28492
   2445c:	10800017 	ldw	r2,0(r2)
   24460:	103ee83a 	callr	r2
   24464:	e0bfff15 	stw	r2,-4(fp)
   24468:	00000306 	br	24478 <alt_get_errno+0x48>
   2446c:	008000f4 	movhi	r2,3
   24470:	10a26d04 	addi	r2,r2,-30284
   24474:	e0bfff15 	stw	r2,-4(fp)
   24478:	e0bfff17 	ldw	r2,-4(fp)
}
   2447c:	e037883a 	mov	sp,fp
   24480:	dfc00117 	ldw	ra,4(sp)
   24484:	df000017 	ldw	fp,0(sp)
   24488:	dec00204 	addi	sp,sp,8
   2448c:	f800283a 	ret

00024490 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   24490:	defffd04 	addi	sp,sp,-12
   24494:	dfc00215 	stw	ra,8(sp)
   24498:	df000115 	stw	fp,4(sp)
   2449c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   244a0:	00bfff04 	movi	r2,-4
   244a4:	00c000b4 	movhi	r3,2
   244a8:	18d53204 	addi	r3,r3,21704
   244ac:	1885883a 	add	r2,r3,r2
   244b0:	e0bfff15 	stw	r2,-4(fp)
   244b4:	00000606 	br	244d0 <_do_ctors+0x40>
        (*ctor) (); 
   244b8:	e0bfff17 	ldw	r2,-4(fp)
   244bc:	10800017 	ldw	r2,0(r2)
   244c0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   244c4:	e0bfff17 	ldw	r2,-4(fp)
   244c8:	10bfff04 	addi	r2,r2,-4
   244cc:	e0bfff15 	stw	r2,-4(fp)
   244d0:	e0ffff17 	ldw	r3,-4(fp)
   244d4:	008000b4 	movhi	r2,2
   244d8:	10953104 	addi	r2,r2,21700
   244dc:	18bff62e 	bgeu	r3,r2,244b8 <_do_ctors+0x28>
        (*ctor) (); 
}
   244e0:	e037883a 	mov	sp,fp
   244e4:	dfc00117 	ldw	ra,4(sp)
   244e8:	df000017 	ldw	fp,0(sp)
   244ec:	dec00204 	addi	sp,sp,8
   244f0:	f800283a 	ret

000244f4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   244f4:	defffd04 	addi	sp,sp,-12
   244f8:	dfc00215 	stw	ra,8(sp)
   244fc:	df000115 	stw	fp,4(sp)
   24500:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   24504:	00bfff04 	movi	r2,-4
   24508:	00c000b4 	movhi	r3,2
   2450c:	18d53204 	addi	r3,r3,21704
   24510:	1885883a 	add	r2,r3,r2
   24514:	e0bfff15 	stw	r2,-4(fp)
   24518:	00000606 	br	24534 <_do_dtors+0x40>
        (*dtor) (); 
   2451c:	e0bfff17 	ldw	r2,-4(fp)
   24520:	10800017 	ldw	r2,0(r2)
   24524:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   24528:	e0bfff17 	ldw	r2,-4(fp)
   2452c:	10bfff04 	addi	r2,r2,-4
   24530:	e0bfff15 	stw	r2,-4(fp)
   24534:	e0ffff17 	ldw	r3,-4(fp)
   24538:	008000b4 	movhi	r2,2
   2453c:	10953204 	addi	r2,r2,21704
   24540:	18bff62e 	bgeu	r3,r2,2451c <_do_dtors+0x28>
        (*dtor) (); 
}
   24544:	e037883a 	mov	sp,fp
   24548:	dfc00117 	ldw	ra,4(sp)
   2454c:	df000017 	ldw	fp,0(sp)
   24550:	dec00204 	addi	sp,sp,8
   24554:	f800283a 	ret

00024558 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   24558:	deffff04 	addi	sp,sp,-4
   2455c:	df000015 	stw	fp,0(sp)
   24560:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   24564:	e037883a 	mov	sp,fp
   24568:	df000017 	ldw	fp,0(sp)
   2456c:	dec00104 	addi	sp,sp,4
   24570:	f800283a 	ret

00024574 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   24574:	defff904 	addi	sp,sp,-28
   24578:	dfc00615 	stw	ra,24(sp)
   2457c:	df000515 	stw	fp,20(sp)
   24580:	df000504 	addi	fp,sp,20
   24584:	e13ffc15 	stw	r4,-16(fp)
   24588:	e17ffd15 	stw	r5,-12(fp)
   2458c:	e1bffe15 	stw	r6,-8(fp)
   24590:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   24594:	e0800217 	ldw	r2,8(fp)
   24598:	d8800015 	stw	r2,0(sp)
   2459c:	e13ffc17 	ldw	r4,-16(fp)
   245a0:	e17ffd17 	ldw	r5,-12(fp)
   245a4:	e1bffe17 	ldw	r6,-8(fp)
   245a8:	e1ffff17 	ldw	r7,-4(fp)
   245ac:	00247480 	call	24748 <alt_iic_isr_register>
}  
   245b0:	e037883a 	mov	sp,fp
   245b4:	dfc00117 	ldw	ra,4(sp)
   245b8:	df000017 	ldw	fp,0(sp)
   245bc:	dec00204 	addi	sp,sp,8
   245c0:	f800283a 	ret

000245c4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   245c4:	defff904 	addi	sp,sp,-28
   245c8:	df000615 	stw	fp,24(sp)
   245cc:	df000604 	addi	fp,sp,24
   245d0:	e13ffe15 	stw	r4,-8(fp)
   245d4:	e17fff15 	stw	r5,-4(fp)
   245d8:	e0bfff17 	ldw	r2,-4(fp)
   245dc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   245e0:	0005303a 	rdctl	r2,status
   245e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   245e8:	e0fffb17 	ldw	r3,-20(fp)
   245ec:	00bfff84 	movi	r2,-2
   245f0:	1884703a 	and	r2,r3,r2
   245f4:	1001703a 	wrctl	status,r2
  
  return context;
   245f8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   245fc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   24600:	e0fffc17 	ldw	r3,-16(fp)
   24604:	00800044 	movi	r2,1
   24608:	10c4983a 	sll	r2,r2,r3
   2460c:	1007883a 	mov	r3,r2
   24610:	008000f4 	movhi	r2,3
   24614:	10a27104 	addi	r2,r2,-30268
   24618:	10800017 	ldw	r2,0(r2)
   2461c:	1886b03a 	or	r3,r3,r2
   24620:	008000f4 	movhi	r2,3
   24624:	10a27104 	addi	r2,r2,-30268
   24628:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2462c:	008000f4 	movhi	r2,3
   24630:	10a27104 	addi	r2,r2,-30268
   24634:	10800017 	ldw	r2,0(r2)
   24638:	100170fa 	wrctl	ienable,r2
   2463c:	e0bffd17 	ldw	r2,-12(fp)
   24640:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24644:	e0bffa17 	ldw	r2,-24(fp)
   24648:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2464c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   24650:	e037883a 	mov	sp,fp
   24654:	df000017 	ldw	fp,0(sp)
   24658:	dec00104 	addi	sp,sp,4
   2465c:	f800283a 	ret

00024660 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   24660:	defff904 	addi	sp,sp,-28
   24664:	df000615 	stw	fp,24(sp)
   24668:	df000604 	addi	fp,sp,24
   2466c:	e13ffe15 	stw	r4,-8(fp)
   24670:	e17fff15 	stw	r5,-4(fp)
   24674:	e0bfff17 	ldw	r2,-4(fp)
   24678:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2467c:	0005303a 	rdctl	r2,status
   24680:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24684:	e0fffb17 	ldw	r3,-20(fp)
   24688:	00bfff84 	movi	r2,-2
   2468c:	1884703a 	and	r2,r3,r2
   24690:	1001703a 	wrctl	status,r2
  
  return context;
   24694:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   24698:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   2469c:	e0fffc17 	ldw	r3,-16(fp)
   246a0:	00800044 	movi	r2,1
   246a4:	10c4983a 	sll	r2,r2,r3
   246a8:	0084303a 	nor	r2,zero,r2
   246ac:	1007883a 	mov	r3,r2
   246b0:	008000f4 	movhi	r2,3
   246b4:	10a27104 	addi	r2,r2,-30268
   246b8:	10800017 	ldw	r2,0(r2)
   246bc:	1886703a 	and	r3,r3,r2
   246c0:	008000f4 	movhi	r2,3
   246c4:	10a27104 	addi	r2,r2,-30268
   246c8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   246cc:	008000f4 	movhi	r2,3
   246d0:	10a27104 	addi	r2,r2,-30268
   246d4:	10800017 	ldw	r2,0(r2)
   246d8:	100170fa 	wrctl	ienable,r2
   246dc:	e0bffd17 	ldw	r2,-12(fp)
   246e0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   246e4:	e0bffa17 	ldw	r2,-24(fp)
   246e8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   246ec:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   246f0:	e037883a 	mov	sp,fp
   246f4:	df000017 	ldw	fp,0(sp)
   246f8:	dec00104 	addi	sp,sp,4
   246fc:	f800283a 	ret

00024700 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   24700:	defffc04 	addi	sp,sp,-16
   24704:	df000315 	stw	fp,12(sp)
   24708:	df000304 	addi	fp,sp,12
   2470c:	e13ffe15 	stw	r4,-8(fp)
   24710:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   24714:	000530fa 	rdctl	r2,ienable
   24718:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   2471c:	e0ffff17 	ldw	r3,-4(fp)
   24720:	00800044 	movi	r2,1
   24724:	10c4983a 	sll	r2,r2,r3
   24728:	1007883a 	mov	r3,r2
   2472c:	e0bffd17 	ldw	r2,-12(fp)
   24730:	1884703a 	and	r2,r3,r2
   24734:	1004c03a 	cmpne	r2,r2,zero
}
   24738:	e037883a 	mov	sp,fp
   2473c:	df000017 	ldw	fp,0(sp)
   24740:	dec00104 	addi	sp,sp,4
   24744:	f800283a 	ret

00024748 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   24748:	defff404 	addi	sp,sp,-48
   2474c:	dfc00b15 	stw	ra,44(sp)
   24750:	df000a15 	stw	fp,40(sp)
   24754:	df000a04 	addi	fp,sp,40
   24758:	e13ffb15 	stw	r4,-20(fp)
   2475c:	e17ffc15 	stw	r5,-16(fp)
   24760:	e1bffd15 	stw	r6,-12(fp)
   24764:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   24768:	00bffa84 	movi	r2,-22
   2476c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   24770:	e0bffc17 	ldw	r2,-16(fp)
   24774:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   24778:	e0bff917 	ldw	r2,-28(fp)
   2477c:	10800808 	cmpgei	r2,r2,32
   24780:	1000291e 	bne	r2,zero,24828 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24784:	0005303a 	rdctl	r2,status
   24788:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2478c:	e0fff717 	ldw	r3,-36(fp)
   24790:	00bfff84 	movi	r2,-2
   24794:	1884703a 	and	r2,r3,r2
   24798:	1001703a 	wrctl	status,r2
  
  return context;
   2479c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   247a0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   247a4:	e0bff917 	ldw	r2,-28(fp)
   247a8:	00c000f4 	movhi	r3,3
   247ac:	18e27e04 	addi	r3,r3,-30216
   247b0:	100490fa 	slli	r2,r2,3
   247b4:	10c7883a 	add	r3,r2,r3
   247b8:	e0bffd17 	ldw	r2,-12(fp)
   247bc:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   247c0:	e0bff917 	ldw	r2,-28(fp)
   247c4:	00c000f4 	movhi	r3,3
   247c8:	18e27e04 	addi	r3,r3,-30216
   247cc:	100490fa 	slli	r2,r2,3
   247d0:	10c5883a 	add	r2,r2,r3
   247d4:	10c00104 	addi	r3,r2,4
   247d8:	e0bffe17 	ldw	r2,-8(fp)
   247dc:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   247e0:	e0bffd17 	ldw	r2,-12(fp)
   247e4:	1005003a 	cmpeq	r2,r2,zero
   247e8:	1000051e 	bne	r2,zero,24800 <alt_iic_isr_register+0xb8>
   247ec:	e17ff917 	ldw	r5,-28(fp)
   247f0:	e13ffb17 	ldw	r4,-20(fp)
   247f4:	00245c40 	call	245c4 <alt_ic_irq_enable>
   247f8:	e0bfff15 	stw	r2,-4(fp)
   247fc:	00000406 	br	24810 <alt_iic_isr_register+0xc8>
   24800:	e17ff917 	ldw	r5,-28(fp)
   24804:	e13ffb17 	ldw	r4,-20(fp)
   24808:	00246600 	call	24660 <alt_ic_irq_disable>
   2480c:	e0bfff15 	stw	r2,-4(fp)
   24810:	e0bfff17 	ldw	r2,-4(fp)
   24814:	e0bffa15 	stw	r2,-24(fp)
   24818:	e0bff817 	ldw	r2,-32(fp)
   2481c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24820:	e0bff617 	ldw	r2,-40(fp)
   24824:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   24828:	e0bffa17 	ldw	r2,-24(fp)
}
   2482c:	e037883a 	mov	sp,fp
   24830:	dfc00117 	ldw	ra,4(sp)
   24834:	df000017 	ldw	fp,0(sp)
   24838:	dec00204 	addi	sp,sp,8
   2483c:	f800283a 	ret

00024840 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   24840:	defff804 	addi	sp,sp,-32
   24844:	dfc00715 	stw	ra,28(sp)
   24848:	df000615 	stw	fp,24(sp)
   2484c:	dc000515 	stw	r16,20(sp)
   24850:	df000504 	addi	fp,sp,20
   24854:	e13ffc15 	stw	r4,-16(fp)
   24858:	e17ffd15 	stw	r5,-12(fp)
   2485c:	e1bffe15 	stw	r6,-8(fp)
   24860:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   24864:	e13ffd17 	ldw	r4,-12(fp)
   24868:	e17ffe17 	ldw	r5,-8(fp)
   2486c:	e1bfff17 	ldw	r6,-4(fp)
   24870:	0024a880 	call	24a88 <open>
   24874:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   24878:	e0bffb17 	ldw	r2,-20(fp)
   2487c:	1004803a 	cmplt	r2,r2,zero
   24880:	10001f1e 	bne	r2,zero,24900 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   24884:	e13ffb17 	ldw	r4,-20(fp)
   24888:	040000b4 	movhi	r16,2
   2488c:	84175204 	addi	r16,r16,23880
   24890:	01400304 	movi	r5,12
   24894:	0022b680 	call	22b68 <__mulsi3>
   24898:	1405883a 	add	r2,r2,r16
   2489c:	10c00017 	ldw	r3,0(r2)
   248a0:	e0bffc17 	ldw	r2,-16(fp)
   248a4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   248a8:	e13ffb17 	ldw	r4,-20(fp)
   248ac:	040000b4 	movhi	r16,2
   248b0:	84175204 	addi	r16,r16,23880
   248b4:	01400304 	movi	r5,12
   248b8:	0022b680 	call	22b68 <__mulsi3>
   248bc:	1405883a 	add	r2,r2,r16
   248c0:	10800104 	addi	r2,r2,4
   248c4:	10c00017 	ldw	r3,0(r2)
   248c8:	e0bffc17 	ldw	r2,-16(fp)
   248cc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   248d0:	e13ffb17 	ldw	r4,-20(fp)
   248d4:	040000b4 	movhi	r16,2
   248d8:	84175204 	addi	r16,r16,23880
   248dc:	01400304 	movi	r5,12
   248e0:	0022b680 	call	22b68 <__mulsi3>
   248e4:	1405883a 	add	r2,r2,r16
   248e8:	10800204 	addi	r2,r2,8
   248ec:	10c00017 	ldw	r3,0(r2)
   248f0:	e0bffc17 	ldw	r2,-16(fp)
   248f4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   248f8:	e13ffb17 	ldw	r4,-20(fp)
   248fc:	00233f80 	call	233f8 <alt_release_fd>
  }
} 
   24900:	e037883a 	mov	sp,fp
   24904:	dfc00217 	ldw	ra,8(sp)
   24908:	df000117 	ldw	fp,4(sp)
   2490c:	dc000017 	ldw	r16,0(sp)
   24910:	dec00304 	addi	sp,sp,12
   24914:	f800283a 	ret

00024918 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   24918:	defffb04 	addi	sp,sp,-20
   2491c:	dfc00415 	stw	ra,16(sp)
   24920:	df000315 	stw	fp,12(sp)
   24924:	df000304 	addi	fp,sp,12
   24928:	e13ffd15 	stw	r4,-12(fp)
   2492c:	e17ffe15 	stw	r5,-8(fp)
   24930:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   24934:	010000b4 	movhi	r4,2
   24938:	21175504 	addi	r4,r4,23892
   2493c:	e17ffd17 	ldw	r5,-12(fp)
   24940:	01800044 	movi	r6,1
   24944:	01c07fc4 	movi	r7,511
   24948:	00248400 	call	24840 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   2494c:	010000b4 	movhi	r4,2
   24950:	21175204 	addi	r4,r4,23880
   24954:	e17ffe17 	ldw	r5,-8(fp)
   24958:	000d883a 	mov	r6,zero
   2495c:	01c07fc4 	movi	r7,511
   24960:	00248400 	call	24840 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   24964:	010000b4 	movhi	r4,2
   24968:	21175804 	addi	r4,r4,23904
   2496c:	e17fff17 	ldw	r5,-4(fp)
   24970:	01800044 	movi	r6,1
   24974:	01c07fc4 	movi	r7,511
   24978:	00248400 	call	24840 <alt_open_fd>
}  
   2497c:	e037883a 	mov	sp,fp
   24980:	dfc00117 	ldw	ra,4(sp)
   24984:	df000017 	ldw	fp,0(sp)
   24988:	dec00204 	addi	sp,sp,8
   2498c:	f800283a 	ret

00024990 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   24990:	defffa04 	addi	sp,sp,-24
   24994:	dfc00515 	stw	ra,20(sp)
   24998:	df000415 	stw	fp,16(sp)
   2499c:	dc000315 	stw	r16,12(sp)
   249a0:	df000304 	addi	fp,sp,12
   249a4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   249a8:	e0bffe17 	ldw	r2,-8(fp)
   249ac:	10800217 	ldw	r2,8(r2)
   249b0:	10d00034 	orhi	r3,r2,16384
   249b4:	e0bffe17 	ldw	r2,-8(fp)
   249b8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   249bc:	e03ffd15 	stw	zero,-12(fp)
   249c0:	00002306 	br	24a50 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   249c4:	e13ffd17 	ldw	r4,-12(fp)
   249c8:	040000b4 	movhi	r16,2
   249cc:	84175204 	addi	r16,r16,23880
   249d0:	01400304 	movi	r5,12
   249d4:	0022b680 	call	22b68 <__mulsi3>
   249d8:	1405883a 	add	r2,r2,r16
   249dc:	10c00017 	ldw	r3,0(r2)
   249e0:	e0bffe17 	ldw	r2,-8(fp)
   249e4:	10800017 	ldw	r2,0(r2)
   249e8:	1880161e 	bne	r3,r2,24a44 <alt_file_locked+0xb4>
   249ec:	e13ffd17 	ldw	r4,-12(fp)
   249f0:	040000b4 	movhi	r16,2
   249f4:	84175204 	addi	r16,r16,23880
   249f8:	01400304 	movi	r5,12
   249fc:	0022b680 	call	22b68 <__mulsi3>
   24a00:	1405883a 	add	r2,r2,r16
   24a04:	10800204 	addi	r2,r2,8
   24a08:	10800017 	ldw	r2,0(r2)
   24a0c:	1004403a 	cmpge	r2,r2,zero
   24a10:	10000c1e 	bne	r2,zero,24a44 <alt_file_locked+0xb4>
   24a14:	e13ffd17 	ldw	r4,-12(fp)
   24a18:	01400304 	movi	r5,12
   24a1c:	0022b680 	call	22b68 <__mulsi3>
   24a20:	1007883a 	mov	r3,r2
   24a24:	008000b4 	movhi	r2,2
   24a28:	10975204 	addi	r2,r2,23880
   24a2c:	1887883a 	add	r3,r3,r2
   24a30:	e0bffe17 	ldw	r2,-8(fp)
   24a34:	18800326 	beq	r3,r2,24a44 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   24a38:	00bffcc4 	movi	r2,-13
   24a3c:	e0bfff15 	stw	r2,-4(fp)
   24a40:	00000a06 	br	24a6c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   24a44:	e0bffd17 	ldw	r2,-12(fp)
   24a48:	10800044 	addi	r2,r2,1
   24a4c:	e0bffd15 	stw	r2,-12(fp)
   24a50:	008000b4 	movhi	r2,2
   24a54:	109bd204 	addi	r2,r2,28488
   24a58:	10800017 	ldw	r2,0(r2)
   24a5c:	1007883a 	mov	r3,r2
   24a60:	e0bffd17 	ldw	r2,-12(fp)
   24a64:	18bfd72e 	bgeu	r3,r2,249c4 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   24a68:	e03fff15 	stw	zero,-4(fp)
   24a6c:	e0bfff17 	ldw	r2,-4(fp)
}
   24a70:	e037883a 	mov	sp,fp
   24a74:	dfc00217 	ldw	ra,8(sp)
   24a78:	df000117 	ldw	fp,4(sp)
   24a7c:	dc000017 	ldw	r16,0(sp)
   24a80:	dec00304 	addi	sp,sp,12
   24a84:	f800283a 	ret

00024a88 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   24a88:	defff404 	addi	sp,sp,-48
   24a8c:	dfc00b15 	stw	ra,44(sp)
   24a90:	df000a15 	stw	fp,40(sp)
   24a94:	df000a04 	addi	fp,sp,40
   24a98:	e13ffb15 	stw	r4,-20(fp)
   24a9c:	e17ffc15 	stw	r5,-16(fp)
   24aa0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   24aa4:	00bfffc4 	movi	r2,-1
   24aa8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   24aac:	00bffb44 	movi	r2,-19
   24ab0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   24ab4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   24ab8:	e13ffb17 	ldw	r4,-20(fp)
   24abc:	014000b4 	movhi	r5,2
   24ac0:	295bd004 	addi	r5,r5,28480
   24ac4:	0024e380 	call	24e38 <alt_find_dev>
   24ac8:	e0bffa15 	stw	r2,-24(fp)
   24acc:	e0bffa17 	ldw	r2,-24(fp)
   24ad0:	1004c03a 	cmpne	r2,r2,zero
   24ad4:	1000051e 	bne	r2,zero,24aec <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   24ad8:	e13ffb17 	ldw	r4,-20(fp)
   24adc:	0024ecc0 	call	24ecc <alt_find_file>
   24ae0:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   24ae4:	00800044 	movi	r2,1
   24ae8:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   24aec:	e0bffa17 	ldw	r2,-24(fp)
   24af0:	1005003a 	cmpeq	r2,r2,zero
   24af4:	1000311e 	bne	r2,zero,24bbc <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   24af8:	e13ffa17 	ldw	r4,-24(fp)
   24afc:	0024fec0 	call	24fec <alt_get_fd>
   24b00:	e0bff815 	stw	r2,-32(fp)
   24b04:	e0bff817 	ldw	r2,-32(fp)
   24b08:	1004403a 	cmpge	r2,r2,zero
   24b0c:	1000031e 	bne	r2,zero,24b1c <open+0x94>
    {
      status = index;
   24b10:	e0bff817 	ldw	r2,-32(fp)
   24b14:	e0bff715 	stw	r2,-36(fp)
   24b18:	00002a06 	br	24bc4 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   24b1c:	e13ff817 	ldw	r4,-32(fp)
   24b20:	01400304 	movi	r5,12
   24b24:	0022b680 	call	22b68 <__mulsi3>
   24b28:	1007883a 	mov	r3,r2
   24b2c:	008000b4 	movhi	r2,2
   24b30:	10975204 	addi	r2,r2,23880
   24b34:	1885883a 	add	r2,r3,r2
   24b38:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   24b3c:	e0fffc17 	ldw	r3,-16(fp)
   24b40:	00900034 	movhi	r2,16384
   24b44:	10bfffc4 	addi	r2,r2,-1
   24b48:	1886703a 	and	r3,r3,r2
   24b4c:	e0bff917 	ldw	r2,-28(fp)
   24b50:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   24b54:	e0bff617 	ldw	r2,-40(fp)
   24b58:	1004c03a 	cmpne	r2,r2,zero
   24b5c:	1000061e 	bne	r2,zero,24b78 <open+0xf0>
   24b60:	e13ff917 	ldw	r4,-28(fp)
   24b64:	00249900 	call	24990 <alt_file_locked>
   24b68:	e0bff715 	stw	r2,-36(fp)
   24b6c:	e0bff717 	ldw	r2,-36(fp)
   24b70:	1004803a 	cmplt	r2,r2,zero
   24b74:	1000131e 	bne	r2,zero,24bc4 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   24b78:	e0bffa17 	ldw	r2,-24(fp)
   24b7c:	10800317 	ldw	r2,12(r2)
   24b80:	1005003a 	cmpeq	r2,r2,zero
   24b84:	1000091e 	bne	r2,zero,24bac <open+0x124>
   24b88:	e0bffa17 	ldw	r2,-24(fp)
   24b8c:	10800317 	ldw	r2,12(r2)
   24b90:	e13ff917 	ldw	r4,-28(fp)
   24b94:	e17ffb17 	ldw	r5,-20(fp)
   24b98:	e1bffc17 	ldw	r6,-16(fp)
   24b9c:	e1fffd17 	ldw	r7,-12(fp)
   24ba0:	103ee83a 	callr	r2
   24ba4:	e0bfff15 	stw	r2,-4(fp)
   24ba8:	00000106 	br	24bb0 <open+0x128>
   24bac:	e03fff15 	stw	zero,-4(fp)
   24bb0:	e0bfff17 	ldw	r2,-4(fp)
   24bb4:	e0bff715 	stw	r2,-36(fp)
   24bb8:	00000206 	br	24bc4 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   24bbc:	00bffb44 	movi	r2,-19
   24bc0:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   24bc4:	e0bff717 	ldw	r2,-36(fp)
   24bc8:	1004403a 	cmpge	r2,r2,zero
   24bcc:	1000091e 	bne	r2,zero,24bf4 <open+0x16c>
  {
    alt_release_fd (index);  
   24bd0:	e13ff817 	ldw	r4,-32(fp)
   24bd4:	00233f80 	call	233f8 <alt_release_fd>
    ALT_ERRNO = -status;
   24bd8:	0024c140 	call	24c14 <alt_get_errno>
   24bdc:	e0fff717 	ldw	r3,-36(fp)
   24be0:	00c7c83a 	sub	r3,zero,r3
   24be4:	10c00015 	stw	r3,0(r2)
    return -1;
   24be8:	00bfffc4 	movi	r2,-1
   24bec:	e0bffe15 	stw	r2,-8(fp)
   24bf0:	00000206 	br	24bfc <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   24bf4:	e0bff817 	ldw	r2,-32(fp)
   24bf8:	e0bffe15 	stw	r2,-8(fp)
   24bfc:	e0bffe17 	ldw	r2,-8(fp)
}
   24c00:	e037883a 	mov	sp,fp
   24c04:	dfc00117 	ldw	ra,4(sp)
   24c08:	df000017 	ldw	fp,0(sp)
   24c0c:	dec00204 	addi	sp,sp,8
   24c10:	f800283a 	ret

00024c14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24c14:	defffd04 	addi	sp,sp,-12
   24c18:	dfc00215 	stw	ra,8(sp)
   24c1c:	df000115 	stw	fp,4(sp)
   24c20:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   24c24:	008000b4 	movhi	r2,2
   24c28:	109bd304 	addi	r2,r2,28492
   24c2c:	10800017 	ldw	r2,0(r2)
   24c30:	1005003a 	cmpeq	r2,r2,zero
   24c34:	1000061e 	bne	r2,zero,24c50 <alt_get_errno+0x3c>
   24c38:	008000b4 	movhi	r2,2
   24c3c:	109bd304 	addi	r2,r2,28492
   24c40:	10800017 	ldw	r2,0(r2)
   24c44:	103ee83a 	callr	r2
   24c48:	e0bfff15 	stw	r2,-4(fp)
   24c4c:	00000306 	br	24c5c <alt_get_errno+0x48>
   24c50:	008000f4 	movhi	r2,3
   24c54:	10a26d04 	addi	r2,r2,-30284
   24c58:	e0bfff15 	stw	r2,-4(fp)
   24c5c:	e0bfff17 	ldw	r2,-4(fp)
}
   24c60:	e037883a 	mov	sp,fp
   24c64:	dfc00117 	ldw	ra,4(sp)
   24c68:	df000017 	ldw	fp,0(sp)
   24c6c:	dec00204 	addi	sp,sp,8
   24c70:	f800283a 	ret

00024c74 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   24c74:	defffa04 	addi	sp,sp,-24
   24c78:	df000515 	stw	fp,20(sp)
   24c7c:	df000504 	addi	fp,sp,20
   24c80:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24c84:	0005303a 	rdctl	r2,status
   24c88:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24c8c:	e0fffd17 	ldw	r3,-12(fp)
   24c90:	00bfff84 	movi	r2,-2
   24c94:	1884703a 	and	r2,r3,r2
   24c98:	1001703a 	wrctl	status,r2
  
  return context;
   24c9c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   24ca0:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   24ca4:	e0bfff17 	ldw	r2,-4(fp)
   24ca8:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   24cac:	e0bffc17 	ldw	r2,-16(fp)
   24cb0:	10c00017 	ldw	r3,0(r2)
   24cb4:	e0bffc17 	ldw	r2,-16(fp)
   24cb8:	10800117 	ldw	r2,4(r2)
   24cbc:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   24cc0:	e0bffc17 	ldw	r2,-16(fp)
   24cc4:	10c00117 	ldw	r3,4(r2)
   24cc8:	e0bffc17 	ldw	r2,-16(fp)
   24ccc:	10800017 	ldw	r2,0(r2)
   24cd0:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   24cd4:	e0fffc17 	ldw	r3,-16(fp)
   24cd8:	e0bffc17 	ldw	r2,-16(fp)
   24cdc:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   24ce0:	e0fffc17 	ldw	r3,-16(fp)
   24ce4:	e0bffc17 	ldw	r2,-16(fp)
   24ce8:	18800015 	stw	r2,0(r3)
   24cec:	e0bffe17 	ldw	r2,-8(fp)
   24cf0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24cf4:	e0bffb17 	ldw	r2,-20(fp)
   24cf8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   24cfc:	e037883a 	mov	sp,fp
   24d00:	df000017 	ldw	fp,0(sp)
   24d04:	dec00104 	addi	sp,sp,4
   24d08:	f800283a 	ret

00024d0c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   24d0c:	defffb04 	addi	sp,sp,-20
   24d10:	dfc00415 	stw	ra,16(sp)
   24d14:	df000315 	stw	fp,12(sp)
   24d18:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   24d1c:	d0a00c17 	ldw	r2,-32720(gp)
   24d20:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   24d24:	d0a6a917 	ldw	r2,-25948(gp)
   24d28:	10800044 	addi	r2,r2,1
   24d2c:	d0a6a915 	stw	r2,-25948(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   24d30:	00003106 	br	24df8 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   24d34:	e0bffe17 	ldw	r2,-8(fp)
   24d38:	10800017 	ldw	r2,0(r2)
   24d3c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   24d40:	e0bffe17 	ldw	r2,-8(fp)
   24d44:	10800403 	ldbu	r2,16(r2)
   24d48:	10803fcc 	andi	r2,r2,255
   24d4c:	1005003a 	cmpeq	r2,r2,zero
   24d50:	1000051e 	bne	r2,zero,24d68 <alt_tick+0x5c>
   24d54:	d0a6a917 	ldw	r2,-25948(gp)
   24d58:	1004c03a 	cmpne	r2,r2,zero
   24d5c:	1000021e 	bne	r2,zero,24d68 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   24d60:	e0bffe17 	ldw	r2,-8(fp)
   24d64:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   24d68:	e0bffe17 	ldw	r2,-8(fp)
   24d6c:	10c00217 	ldw	r3,8(r2)
   24d70:	d0a6a917 	ldw	r2,-25948(gp)
   24d74:	10c01e36 	bltu	r2,r3,24df0 <alt_tick+0xe4>
   24d78:	e0bffe17 	ldw	r2,-8(fp)
   24d7c:	10800403 	ldbu	r2,16(r2)
   24d80:	10803fcc 	andi	r2,r2,255
   24d84:	1004c03a 	cmpne	r2,r2,zero
   24d88:	1000191e 	bne	r2,zero,24df0 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   24d8c:	e0bffe17 	ldw	r2,-8(fp)
   24d90:	10c00317 	ldw	r3,12(r2)
   24d94:	e0bffe17 	ldw	r2,-8(fp)
   24d98:	11000517 	ldw	r4,20(r2)
   24d9c:	183ee83a 	callr	r3
   24da0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   24da4:	e0bffd17 	ldw	r2,-12(fp)
   24da8:	1004c03a 	cmpne	r2,r2,zero
   24dac:	1000031e 	bne	r2,zero,24dbc <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   24db0:	e13ffe17 	ldw	r4,-8(fp)
   24db4:	0024c740 	call	24c74 <alt_alarm_stop>
   24db8:	00000d06 	br	24df0 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   24dbc:	e0bffe17 	ldw	r2,-8(fp)
   24dc0:	10c00217 	ldw	r3,8(r2)
   24dc4:	e0bffd17 	ldw	r2,-12(fp)
   24dc8:	1887883a 	add	r3,r3,r2
   24dcc:	e0bffe17 	ldw	r2,-8(fp)
   24dd0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   24dd4:	e0bffe17 	ldw	r2,-8(fp)
   24dd8:	10c00217 	ldw	r3,8(r2)
   24ddc:	d0a6a917 	ldw	r2,-25948(gp)
   24de0:	1880032e 	bgeu	r3,r2,24df0 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   24de4:	e0fffe17 	ldw	r3,-8(fp)
   24de8:	00800044 	movi	r2,1
   24dec:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   24df0:	e0bfff17 	ldw	r2,-4(fp)
   24df4:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   24df8:	d0e00c04 	addi	r3,gp,-32720
   24dfc:	e0bffe17 	ldw	r2,-8(fp)
   24e00:	10ffcc1e 	bne	r2,r3,24d34 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   24e04:	e037883a 	mov	sp,fp
   24e08:	dfc00117 	ldw	ra,4(sp)
   24e0c:	df000017 	ldw	fp,0(sp)
   24e10:	dec00204 	addi	sp,sp,8
   24e14:	f800283a 	ret

00024e18 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   24e18:	deffff04 	addi	sp,sp,-4
   24e1c:	df000015 	stw	fp,0(sp)
   24e20:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   24e24:	000170fa 	wrctl	ienable,zero
}
   24e28:	e037883a 	mov	sp,fp
   24e2c:	df000017 	ldw	fp,0(sp)
   24e30:	dec00104 	addi	sp,sp,4
   24e34:	f800283a 	ret

00024e38 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   24e38:	defff904 	addi	sp,sp,-28
   24e3c:	dfc00615 	stw	ra,24(sp)
   24e40:	df000515 	stw	fp,20(sp)
   24e44:	df000504 	addi	fp,sp,20
   24e48:	e13ffd15 	stw	r4,-12(fp)
   24e4c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   24e50:	e0bffe17 	ldw	r2,-8(fp)
   24e54:	10800017 	ldw	r2,0(r2)
   24e58:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   24e5c:	e13ffd17 	ldw	r4,-12(fp)
   24e60:	00202d80 	call	202d8 <strlen>
   24e64:	10800044 	addi	r2,r2,1
   24e68:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   24e6c:	00000d06 	br	24ea4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   24e70:	e0bffc17 	ldw	r2,-16(fp)
   24e74:	11000217 	ldw	r4,8(r2)
   24e78:	e1bffb17 	ldw	r6,-20(fp)
   24e7c:	e17ffd17 	ldw	r5,-12(fp)
   24e80:	00251080 	call	25108 <memcmp>
   24e84:	1004c03a 	cmpne	r2,r2,zero
   24e88:	1000031e 	bne	r2,zero,24e98 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   24e8c:	e0bffc17 	ldw	r2,-16(fp)
   24e90:	e0bfff15 	stw	r2,-4(fp)
   24e94:	00000706 	br	24eb4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   24e98:	e0bffc17 	ldw	r2,-16(fp)
   24e9c:	10800017 	ldw	r2,0(r2)
   24ea0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   24ea4:	e0fffe17 	ldw	r3,-8(fp)
   24ea8:	e0bffc17 	ldw	r2,-16(fp)
   24eac:	10fff01e 	bne	r2,r3,24e70 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   24eb0:	e03fff15 	stw	zero,-4(fp)
   24eb4:	e0bfff17 	ldw	r2,-4(fp)
}
   24eb8:	e037883a 	mov	sp,fp
   24ebc:	dfc00117 	ldw	ra,4(sp)
   24ec0:	df000017 	ldw	fp,0(sp)
   24ec4:	dec00204 	addi	sp,sp,8
   24ec8:	f800283a 	ret

00024ecc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   24ecc:	defffa04 	addi	sp,sp,-24
   24ed0:	dfc00515 	stw	ra,20(sp)
   24ed4:	df000415 	stw	fp,16(sp)
   24ed8:	df000404 	addi	fp,sp,16
   24edc:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   24ee0:	008000b4 	movhi	r2,2
   24ee4:	109bce04 	addi	r2,r2,28472
   24ee8:	10800017 	ldw	r2,0(r2)
   24eec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   24ef0:	00003306 	br	24fc0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   24ef4:	e0bffd17 	ldw	r2,-12(fp)
   24ef8:	11000217 	ldw	r4,8(r2)
   24efc:	00202d80 	call	202d8 <strlen>
   24f00:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   24f04:	e0bffd17 	ldw	r2,-12(fp)
   24f08:	10c00217 	ldw	r3,8(r2)
   24f0c:	e0bffc17 	ldw	r2,-16(fp)
   24f10:	1885883a 	add	r2,r3,r2
   24f14:	10bfffc4 	addi	r2,r2,-1
   24f18:	10800003 	ldbu	r2,0(r2)
   24f1c:	10803fcc 	andi	r2,r2,255
   24f20:	1080201c 	xori	r2,r2,128
   24f24:	10bfe004 	addi	r2,r2,-128
   24f28:	10800bd8 	cmpnei	r2,r2,47
   24f2c:	1000031e 	bne	r2,zero,24f3c <alt_find_file+0x70>
    {
      len -= 1;
   24f30:	e0bffc17 	ldw	r2,-16(fp)
   24f34:	10bfffc4 	addi	r2,r2,-1
   24f38:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   24f3c:	e0bffc17 	ldw	r2,-16(fp)
   24f40:	1007883a 	mov	r3,r2
   24f44:	e0bffe17 	ldw	r2,-8(fp)
   24f48:	1885883a 	add	r2,r3,r2
   24f4c:	10800003 	ldbu	r2,0(r2)
   24f50:	10803fcc 	andi	r2,r2,255
   24f54:	1080201c 	xori	r2,r2,128
   24f58:	10bfe004 	addi	r2,r2,-128
   24f5c:	10800be0 	cmpeqi	r2,r2,47
   24f60:	10000a1e 	bne	r2,zero,24f8c <alt_find_file+0xc0>
   24f64:	e0bffc17 	ldw	r2,-16(fp)
   24f68:	1007883a 	mov	r3,r2
   24f6c:	e0bffe17 	ldw	r2,-8(fp)
   24f70:	1885883a 	add	r2,r3,r2
   24f74:	10800003 	ldbu	r2,0(r2)
   24f78:	10803fcc 	andi	r2,r2,255
   24f7c:	1080201c 	xori	r2,r2,128
   24f80:	10bfe004 	addi	r2,r2,-128
   24f84:	1004c03a 	cmpne	r2,r2,zero
   24f88:	10000a1e 	bne	r2,zero,24fb4 <alt_find_file+0xe8>
   24f8c:	e0bffd17 	ldw	r2,-12(fp)
   24f90:	11000217 	ldw	r4,8(r2)
   24f94:	e1bffc17 	ldw	r6,-16(fp)
   24f98:	e17ffe17 	ldw	r5,-8(fp)
   24f9c:	00251080 	call	25108 <memcmp>
   24fa0:	1004c03a 	cmpne	r2,r2,zero
   24fa4:	1000031e 	bne	r2,zero,24fb4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   24fa8:	e0bffd17 	ldw	r2,-12(fp)
   24fac:	e0bfff15 	stw	r2,-4(fp)
   24fb0:	00000806 	br	24fd4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   24fb4:	e0bffd17 	ldw	r2,-12(fp)
   24fb8:	10800017 	ldw	r2,0(r2)
   24fbc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   24fc0:	00c000b4 	movhi	r3,2
   24fc4:	18dbce04 	addi	r3,r3,28472
   24fc8:	e0bffd17 	ldw	r2,-12(fp)
   24fcc:	10ffc91e 	bne	r2,r3,24ef4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   24fd0:	e03fff15 	stw	zero,-4(fp)
   24fd4:	e0bfff17 	ldw	r2,-4(fp)
}
   24fd8:	e037883a 	mov	sp,fp
   24fdc:	dfc00117 	ldw	ra,4(sp)
   24fe0:	df000017 	ldw	fp,0(sp)
   24fe4:	dec00204 	addi	sp,sp,8
   24fe8:	f800283a 	ret

00024fec <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   24fec:	defffa04 	addi	sp,sp,-24
   24ff0:	dfc00515 	stw	ra,20(sp)
   24ff4:	df000415 	stw	fp,16(sp)
   24ff8:	dc000315 	stw	r16,12(sp)
   24ffc:	df000304 	addi	fp,sp,12
   25000:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   25004:	00bffa04 	movi	r2,-24
   25008:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2500c:	e03ffe15 	stw	zero,-8(fp)
   25010:	00002006 	br	25094 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   25014:	e13ffe17 	ldw	r4,-8(fp)
   25018:	040000b4 	movhi	r16,2
   2501c:	84175204 	addi	r16,r16,23880
   25020:	01400304 	movi	r5,12
   25024:	0022b680 	call	22b68 <__mulsi3>
   25028:	1405883a 	add	r2,r2,r16
   2502c:	10800017 	ldw	r2,0(r2)
   25030:	1004c03a 	cmpne	r2,r2,zero
   25034:	1000141e 	bne	r2,zero,25088 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   25038:	e13ffe17 	ldw	r4,-8(fp)
   2503c:	040000b4 	movhi	r16,2
   25040:	84175204 	addi	r16,r16,23880
   25044:	01400304 	movi	r5,12
   25048:	0022b680 	call	22b68 <__mulsi3>
   2504c:	1407883a 	add	r3,r2,r16
   25050:	e0bfff17 	ldw	r2,-4(fp)
   25054:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   25058:	008000b4 	movhi	r2,2
   2505c:	109bd204 	addi	r2,r2,28488
   25060:	10c00017 	ldw	r3,0(r2)
   25064:	e0bffe17 	ldw	r2,-8(fp)
   25068:	1880040e 	bge	r3,r2,2507c <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   2506c:	00c000b4 	movhi	r3,2
   25070:	18dbd204 	addi	r3,r3,28488
   25074:	e0bffe17 	ldw	r2,-8(fp)
   25078:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   2507c:	e0bffe17 	ldw	r2,-8(fp)
   25080:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   25084:	00000606 	br	250a0 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   25088:	e0bffe17 	ldw	r2,-8(fp)
   2508c:	10800044 	addi	r2,r2,1
   25090:	e0bffe15 	stw	r2,-8(fp)
   25094:	e0bffe17 	ldw	r2,-8(fp)
   25098:	10800810 	cmplti	r2,r2,32
   2509c:	103fdd1e 	bne	r2,zero,25014 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   250a0:	e0bffd17 	ldw	r2,-12(fp)
}
   250a4:	e037883a 	mov	sp,fp
   250a8:	dfc00217 	ldw	ra,8(sp)
   250ac:	df000117 	ldw	fp,4(sp)
   250b0:	dc000017 	ldw	r16,0(sp)
   250b4:	dec00304 	addi	sp,sp,12
   250b8:	f800283a 	ret

000250bc <atexit>:
   250bc:	200b883a 	mov	r5,r4
   250c0:	000d883a 	mov	r6,zero
   250c4:	0009883a 	mov	r4,zero
   250c8:	000f883a 	mov	r7,zero
   250cc:	002517c1 	jmpi	2517c <__register_exitproc>

000250d0 <exit>:
   250d0:	defffe04 	addi	sp,sp,-8
   250d4:	000b883a 	mov	r5,zero
   250d8:	dc000015 	stw	r16,0(sp)
   250dc:	dfc00115 	stw	ra,4(sp)
   250e0:	2021883a 	mov	r16,r4
   250e4:	00252b40 	call	252b4 <__call_exitprocs>
   250e8:	008000b4 	movhi	r2,2
   250ec:	109bcb04 	addi	r2,r2,28460
   250f0:	11000017 	ldw	r4,0(r2)
   250f4:	20800f17 	ldw	r2,60(r4)
   250f8:	10000126 	beq	r2,zero,25100 <exit+0x30>
   250fc:	103ee83a 	callr	r2
   25100:	8009883a 	mov	r4,r16
   25104:	00254a40 	call	254a4 <_exit>

00025108 <memcmp>:
   25108:	00c000c4 	movi	r3,3
   2510c:	1980032e 	bgeu	r3,r6,2511c <memcmp+0x14>
   25110:	2144b03a 	or	r2,r4,r5
   25114:	10c4703a 	and	r2,r2,r3
   25118:	10000f26 	beq	r2,zero,25158 <memcmp+0x50>
   2511c:	31ffffc4 	addi	r7,r6,-1
   25120:	3000061e 	bne	r6,zero,2513c <memcmp+0x34>
   25124:	00000a06 	br	25150 <memcmp+0x48>
   25128:	39ffffc4 	addi	r7,r7,-1
   2512c:	00bfffc4 	movi	r2,-1
   25130:	21000044 	addi	r4,r4,1
   25134:	29400044 	addi	r5,r5,1
   25138:	38800526 	beq	r7,r2,25150 <memcmp+0x48>
   2513c:	20c00003 	ldbu	r3,0(r4)
   25140:	28800003 	ldbu	r2,0(r5)
   25144:	18bff826 	beq	r3,r2,25128 <memcmp+0x20>
   25148:	1885c83a 	sub	r2,r3,r2
   2514c:	f800283a 	ret
   25150:	0005883a 	mov	r2,zero
   25154:	f800283a 	ret
   25158:	180f883a 	mov	r7,r3
   2515c:	20c00017 	ldw	r3,0(r4)
   25160:	28800017 	ldw	r2,0(r5)
   25164:	18bfed1e 	bne	r3,r2,2511c <memcmp+0x14>
   25168:	31bfff04 	addi	r6,r6,-4
   2516c:	21000104 	addi	r4,r4,4
   25170:	29400104 	addi	r5,r5,4
   25174:	39bff936 	bltu	r7,r6,2515c <memcmp+0x54>
   25178:	003fe806 	br	2511c <memcmp+0x14>

0002517c <__register_exitproc>:
   2517c:	defffa04 	addi	sp,sp,-24
   25180:	008000b4 	movhi	r2,2
   25184:	109bcb04 	addi	r2,r2,28460
   25188:	dc000015 	stw	r16,0(sp)
   2518c:	14000017 	ldw	r16,0(r2)
   25190:	dd000415 	stw	r20,16(sp)
   25194:	2829883a 	mov	r20,r5
   25198:	81405217 	ldw	r5,328(r16)
   2519c:	dcc00315 	stw	r19,12(sp)
   251a0:	dc800215 	stw	r18,8(sp)
   251a4:	dc400115 	stw	r17,4(sp)
   251a8:	dfc00515 	stw	ra,20(sp)
   251ac:	2023883a 	mov	r17,r4
   251b0:	3027883a 	mov	r19,r6
   251b4:	3825883a 	mov	r18,r7
   251b8:	28002526 	beq	r5,zero,25250 <__register_exitproc+0xd4>
   251bc:	29000117 	ldw	r4,4(r5)
   251c0:	008007c4 	movi	r2,31
   251c4:	11002716 	blt	r2,r4,25264 <__register_exitproc+0xe8>
   251c8:	8800101e 	bne	r17,zero,2520c <__register_exitproc+0x90>
   251cc:	2105883a 	add	r2,r4,r4
   251d0:	1085883a 	add	r2,r2,r2
   251d4:	20c00044 	addi	r3,r4,1
   251d8:	1145883a 	add	r2,r2,r5
   251dc:	0009883a 	mov	r4,zero
   251e0:	15000215 	stw	r20,8(r2)
   251e4:	28c00115 	stw	r3,4(r5)
   251e8:	2005883a 	mov	r2,r4
   251ec:	dfc00517 	ldw	ra,20(sp)
   251f0:	dd000417 	ldw	r20,16(sp)
   251f4:	dcc00317 	ldw	r19,12(sp)
   251f8:	dc800217 	ldw	r18,8(sp)
   251fc:	dc400117 	ldw	r17,4(sp)
   25200:	dc000017 	ldw	r16,0(sp)
   25204:	dec00604 	addi	sp,sp,24
   25208:	f800283a 	ret
   2520c:	29802204 	addi	r6,r5,136
   25210:	00800044 	movi	r2,1
   25214:	110e983a 	sll	r7,r2,r4
   25218:	30c04017 	ldw	r3,256(r6)
   2521c:	2105883a 	add	r2,r4,r4
   25220:	1085883a 	add	r2,r2,r2
   25224:	1185883a 	add	r2,r2,r6
   25228:	19c6b03a 	or	r3,r3,r7
   2522c:	14802015 	stw	r18,128(r2)
   25230:	14c00015 	stw	r19,0(r2)
   25234:	00800084 	movi	r2,2
   25238:	30c04015 	stw	r3,256(r6)
   2523c:	88bfe31e 	bne	r17,r2,251cc <__register_exitproc+0x50>
   25240:	30804117 	ldw	r2,260(r6)
   25244:	11c4b03a 	or	r2,r2,r7
   25248:	30804115 	stw	r2,260(r6)
   2524c:	003fdf06 	br	251cc <__register_exitproc+0x50>
   25250:	008000f4 	movhi	r2,3
   25254:	10a2be04 	addi	r2,r2,-29960
   25258:	100b883a 	mov	r5,r2
   2525c:	80805215 	stw	r2,328(r16)
   25260:	003fd606 	br	251bc <__register_exitproc+0x40>
   25264:	00800034 	movhi	r2,0
   25268:	10800004 	addi	r2,r2,0
   2526c:	1000021e 	bne	r2,zero,25278 <__register_exitproc+0xfc>
   25270:	013fffc4 	movi	r4,-1
   25274:	003fdc06 	br	251e8 <__register_exitproc+0x6c>
   25278:	01006404 	movi	r4,400
   2527c:	103ee83a 	callr	r2
   25280:	1007883a 	mov	r3,r2
   25284:	103ffa26 	beq	r2,zero,25270 <__register_exitproc+0xf4>
   25288:	80805217 	ldw	r2,328(r16)
   2528c:	180b883a 	mov	r5,r3
   25290:	18000115 	stw	zero,4(r3)
   25294:	18800015 	stw	r2,0(r3)
   25298:	80c05215 	stw	r3,328(r16)
   2529c:	18006215 	stw	zero,392(r3)
   252a0:	18006315 	stw	zero,396(r3)
   252a4:	0009883a 	mov	r4,zero
   252a8:	883fc826 	beq	r17,zero,251cc <__register_exitproc+0x50>
   252ac:	003fd706 	br	2520c <__register_exitproc+0x90>

000252b0 <register_fini>:
   252b0:	f800283a 	ret

000252b4 <__call_exitprocs>:
   252b4:	008000b4 	movhi	r2,2
   252b8:	109bcb04 	addi	r2,r2,28460
   252bc:	10800017 	ldw	r2,0(r2)
   252c0:	defff304 	addi	sp,sp,-52
   252c4:	df000b15 	stw	fp,44(sp)
   252c8:	d8800115 	stw	r2,4(sp)
   252cc:	00800034 	movhi	r2,0
   252d0:	10800004 	addi	r2,r2,0
   252d4:	1005003a 	cmpeq	r2,r2,zero
   252d8:	d8800215 	stw	r2,8(sp)
   252dc:	d8800117 	ldw	r2,4(sp)
   252e0:	dd400815 	stw	r21,32(sp)
   252e4:	dd000715 	stw	r20,28(sp)
   252e8:	10805204 	addi	r2,r2,328
   252ec:	dfc00c15 	stw	ra,48(sp)
   252f0:	ddc00a15 	stw	r23,40(sp)
   252f4:	dd800915 	stw	r22,36(sp)
   252f8:	dcc00615 	stw	r19,24(sp)
   252fc:	dc800515 	stw	r18,20(sp)
   25300:	dc400415 	stw	r17,16(sp)
   25304:	dc000315 	stw	r16,12(sp)
   25308:	282b883a 	mov	r21,r5
   2530c:	2039883a 	mov	fp,r4
   25310:	d8800015 	stw	r2,0(sp)
   25314:	2829003a 	cmpeq	r20,r5,zero
   25318:	d8800117 	ldw	r2,4(sp)
   2531c:	14405217 	ldw	r17,328(r2)
   25320:	88001026 	beq	r17,zero,25364 <__call_exitprocs+0xb0>
   25324:	ddc00017 	ldw	r23,0(sp)
   25328:	88800117 	ldw	r2,4(r17)
   2532c:	8c802204 	addi	r18,r17,136
   25330:	143fffc4 	addi	r16,r2,-1
   25334:	80000916 	blt	r16,zero,2535c <__call_exitprocs+0xa8>
   25338:	05bfffc4 	movi	r22,-1
   2533c:	a000151e 	bne	r20,zero,25394 <__call_exitprocs+0xe0>
   25340:	8409883a 	add	r4,r16,r16
   25344:	2105883a 	add	r2,r4,r4
   25348:	1485883a 	add	r2,r2,r18
   2534c:	10c02017 	ldw	r3,128(r2)
   25350:	a8c01126 	beq	r21,r3,25398 <__call_exitprocs+0xe4>
   25354:	843fffc4 	addi	r16,r16,-1
   25358:	85bff81e 	bne	r16,r22,2533c <__call_exitprocs+0x88>
   2535c:	d8800217 	ldw	r2,8(sp)
   25360:	10003126 	beq	r2,zero,25428 <__call_exitprocs+0x174>
   25364:	dfc00c17 	ldw	ra,48(sp)
   25368:	df000b17 	ldw	fp,44(sp)
   2536c:	ddc00a17 	ldw	r23,40(sp)
   25370:	dd800917 	ldw	r22,36(sp)
   25374:	dd400817 	ldw	r21,32(sp)
   25378:	dd000717 	ldw	r20,28(sp)
   2537c:	dcc00617 	ldw	r19,24(sp)
   25380:	dc800517 	ldw	r18,20(sp)
   25384:	dc400417 	ldw	r17,16(sp)
   25388:	dc000317 	ldw	r16,12(sp)
   2538c:	dec00d04 	addi	sp,sp,52
   25390:	f800283a 	ret
   25394:	8409883a 	add	r4,r16,r16
   25398:	88c00117 	ldw	r3,4(r17)
   2539c:	2105883a 	add	r2,r4,r4
   253a0:	1445883a 	add	r2,r2,r17
   253a4:	18ffffc4 	addi	r3,r3,-1
   253a8:	11800217 	ldw	r6,8(r2)
   253ac:	1c001526 	beq	r3,r16,25404 <__call_exitprocs+0x150>
   253b0:	10000215 	stw	zero,8(r2)
   253b4:	303fe726 	beq	r6,zero,25354 <__call_exitprocs+0xa0>
   253b8:	00c00044 	movi	r3,1
   253bc:	1c06983a 	sll	r3,r3,r16
   253c0:	90804017 	ldw	r2,256(r18)
   253c4:	8cc00117 	ldw	r19,4(r17)
   253c8:	1884703a 	and	r2,r3,r2
   253cc:	10001426 	beq	r2,zero,25420 <__call_exitprocs+0x16c>
   253d0:	90804117 	ldw	r2,260(r18)
   253d4:	1884703a 	and	r2,r3,r2
   253d8:	10000c1e 	bne	r2,zero,2540c <__call_exitprocs+0x158>
   253dc:	2105883a 	add	r2,r4,r4
   253e0:	1485883a 	add	r2,r2,r18
   253e4:	11400017 	ldw	r5,0(r2)
   253e8:	e009883a 	mov	r4,fp
   253ec:	303ee83a 	callr	r6
   253f0:	88800117 	ldw	r2,4(r17)
   253f4:	98bfc81e 	bne	r19,r2,25318 <__call_exitprocs+0x64>
   253f8:	b8800017 	ldw	r2,0(r23)
   253fc:	147fd526 	beq	r2,r17,25354 <__call_exitprocs+0xa0>
   25400:	003fc506 	br	25318 <__call_exitprocs+0x64>
   25404:	8c000115 	stw	r16,4(r17)
   25408:	003fea06 	br	253b4 <__call_exitprocs+0x100>
   2540c:	2105883a 	add	r2,r4,r4
   25410:	1485883a 	add	r2,r2,r18
   25414:	11000017 	ldw	r4,0(r2)
   25418:	303ee83a 	callr	r6
   2541c:	003ff406 	br	253f0 <__call_exitprocs+0x13c>
   25420:	303ee83a 	callr	r6
   25424:	003ff206 	br	253f0 <__call_exitprocs+0x13c>
   25428:	88800117 	ldw	r2,4(r17)
   2542c:	1000081e 	bne	r2,zero,25450 <__call_exitprocs+0x19c>
   25430:	89000017 	ldw	r4,0(r17)
   25434:	20000726 	beq	r4,zero,25454 <__call_exitprocs+0x1a0>
   25438:	b9000015 	stw	r4,0(r23)
   2543c:	8809883a 	mov	r4,r17
   25440:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   25444:	bc400017 	ldw	r17,0(r23)
   25448:	883fb71e 	bne	r17,zero,25328 <__call_exitprocs+0x74>
   2544c:	003fc506 	br	25364 <__call_exitprocs+0xb0>
   25450:	89000017 	ldw	r4,0(r17)
   25454:	882f883a 	mov	r23,r17
   25458:	2023883a 	mov	r17,r4
   2545c:	883fb21e 	bne	r17,zero,25328 <__call_exitprocs+0x74>
   25460:	003fc006 	br	25364 <__call_exitprocs+0xb0>

00025464 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   25464:	defffd04 	addi	sp,sp,-12
   25468:	df000215 	stw	fp,8(sp)
   2546c:	df000204 	addi	fp,sp,8
   25470:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   25474:	e0bfff17 	ldw	r2,-4(fp)
   25478:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   2547c:	e0bffe17 	ldw	r2,-8(fp)
   25480:	1005003a 	cmpeq	r2,r2,zero
   25484:	1000021e 	bne	r2,zero,25490 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   25488:	002af070 	cmpltui	zero,zero,43969
   2548c:	00000106 	br	25494 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   25490:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   25494:	e037883a 	mov	sp,fp
   25498:	df000017 	ldw	fp,0(sp)
   2549c:	dec00104 	addi	sp,sp,4
   254a0:	f800283a 	ret

000254a4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   254a4:	defffd04 	addi	sp,sp,-12
   254a8:	dfc00215 	stw	ra,8(sp)
   254ac:	df000115 	stw	fp,4(sp)
   254b0:	df000104 	addi	fp,sp,4
   254b4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   254b8:	e13fff17 	ldw	r4,-4(fp)
   254bc:	00254640 	call	25464 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   254c0:	003fff06 	br	254c0 <_exit+0x1c>
   254c4:	000252b0 	cmpltui	zero,zero,2378
