
experiment1b.elf:     file format elf32-littlenios2
experiment1b.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x0000d660 memsz 0x0000d660 flags r-x
    LOAD off    0x0000e680 vaddr 0x0008d680 paddr 0x0008f0dc align 2**12
         filesz 0x00001a5c memsz 0x00001a5c flags rw-
    LOAD off    0x00010b38 vaddr 0x00090b38 paddr 0x00090b38 align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d08c  000801b4  000801b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000440  0008d240  0008d240  0000e240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  0008d680  0008f0dc  0000e680  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  00090b38  00090b38  00010b38  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000100dc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000cf8  00000000  00000000  00010100  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001543  00000000  00000000  00010df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023669  00000000  00000000  0001233b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007c7f  00000000  00000000  000359a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00014771  00000000  00000000  0003d623  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001a88  00000000  00000000  00051d94  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000022bf  00000000  00000000  0005381c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c0b9  00000000  00000000  00055adb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00061b94  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  00061ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000656a5  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000656a8  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000656ad  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000656ae  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000656af  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000656ba  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000656c5  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  000656d0  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000025  00000000  00000000  000656dc  2**0
                  CONTENTS, READONLY
 26 .jdi          0000490f  00000000  00000000  00065701  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000484c4  00000000  00000000  0006a010  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801b4 l    d  .text	00000000 .text
0008d240 l    d  .rodata	00000000 .rodata
0008d680 l    d  .rwdata	00000000 .rwdata
00090b38 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000801ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 PB_button.c
00000000 l    df *ABS*	00000000 custom_counter_0.c
00000000 l    df *ABS*	00000000 custom_counter_1.c
00000000 l    df *ABS*	00000000 experiment1b.c
00000000 l    df *ABS*	00000000 switch.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00080e20 l     F .text	00000058 __sprint_r
0008d3ae l     O .rodata	00000010 blanks.3452
0008d39e l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00082e9c l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000848c4 l     F .text	00000058 std
000849d0 l     F .text	00000008 __fp_lock
000849d8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0008d680 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0008f0a8 l     O .rwdata	00000004 charset
0008d3e4 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0008d52c l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00088d84 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00089eb0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0008a7ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0008a84c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0008a950 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0008ac34 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0008ad14 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008ae74 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0008b0a4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0008f0d0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0008b35c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0008e03c l     O .rwdata	00001060 jtag_uart_0
0008b434 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0008b674 l     F .text	00000228 altera_avalon_jtag_uart_irq
0008b89c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0008c13c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0008c54c l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0008c69c l     F .text	000000f8 alt_file_locked
0008c920 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0008cfbc l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0008d170 l     F .text	00000040 alt_sim_halt
000866b4 g     F .text	00000094 _mprec_log10
000867a0 g     F .text	00000088 __any_on
00087f58 g     F .text	00000070 _isatty_r
0008d504 g     O .rodata	00000028 __mprec_tinytens
0008aed4 g     F .text	0000006c alt_main
00080cf8 g     F .text	000000a0 _puts_r
00090b94 g     O .bss	00000100 alt_irq
00087fc8 g     F .text	00000078 _lseek_r
0008f0dc g       *ABS*	00000000 __flash_rwdata_start
000898a4 g     F .text	00000088 __eqdf2
00090e24 g       *ABS*	00000000 __alt_heap_start
00080c80 g     F .text	00000044 printf
00087a10 g     F .text	00000068 __sseek
0008492c g     F .text	000000a4 __sinit
00085638 g     F .text	00000084 _setlocale_r
00084a2c g     F .text	0000009c __sfmoreglue
0008065c g     F .text	00000058 handle_counter_1_expire_interrupts
0008af60 g     F .text	00000020 __malloc_unlock
00080778 g     F .text	00000048 init_counter_1_irq
00080c24 g     F .text	0000005c init_switch_irq
00080340 g     F .text	000000b0 KEY3_Pressed
00086130 g     F .text	000000e0 memmove
00084a1c g     F .text	00000010 _cleanup
00086828 g     F .text	000000bc _Balloc
000899b4 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000000c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
00080614 g     F .text	00000048 init_counter_0_irq
00087ee4 g     F .text	00000074 _fstat_r
00090b50 g     O .bss	00000004 errno
00090b5c g     O .bss	00000004 alt_argv
0009709c g       *ABS*	00000000 _gp
0008debc g     O .rwdata	00000180 alt_fd_list
000806f8 g     F .text	00000028 read_counter_1
0008cb44 g     F .text	00000094 alt_find_dev
00086090 g     F .text	000000a0 memcpy
00084a10 g     F .text	0000000c _cleanup_r
00089b4c g     F .text	000000f8 __floatsidf
0008c624 g     F .text	00000078 alt_io_redirect
00089ac4 g     F .text	00000088 __ltdf2
0008d240 g       *ABS*	00000000 __DTOR_END__
00080d98 g     F .text	00000014 puts
00086604 g     F .text	000000b0 __ratio
0008bab4 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00080cc4 g     F .text	00000034 _printf_r
00089fec g     F .text	00000008 __udivsi3
0008ab70 g     F .text	000000c4 isatty
0008d414 g     O .rodata	000000c8 __mprec_tens
00085614 g     F .text	00000008 __locale_charset
00090b44 g     O .bss	00000004 __malloc_top_pad
0008f0a4 g     O .rwdata	00000004 __mb_cur_max
0008561c g     F .text	0000000c _localeconv_r
00086f8c g     F .text	0000003c __i2b
00084ff8 g     F .text	0000049c __sfvwrite_r
00087998 g     F .text	00000070 _sbrk_r
00088040 g     F .text	00000078 _read_r
0008da80 g     O .rwdata	0000000c __lc_ctype
0008f0c4 g     O .rwdata	00000004 alt_max_fd
0008a4ec g     F .text	00000138 __unpack_d
00087dc0 g     F .text	00000110 _fclose_r
00084890 g     F .text	00000034 fflush
00090b48 g     O .bss	00000004 __malloc_max_sbrked_mem
0008a9b0 g     F .text	000001c0 alt_irq_register
00089214 g     F .text	00000074 __adddf3
000805e4 g     F .text	00000030 load_counter_0_config
000864e4 g     F .text	00000120 __b2d
00088724 g     F .text	00000660 __umoddi3
0008ad80 g     F .text	000000f4 lseek
0008f0a0 g     O .rwdata	00000004 _global_impure_ptr
00087334 g     F .text	000005f4 _realloc_r
00090e24 g       *ABS*	00000000 __bss_end
0008c454 g     F .text	000000f8 alt_iic_isr_register
0008ca18 g     F .text	0000010c alt_tick
000880b8 g     F .text	0000066c __udivdi3
0008d4dc g     O .rodata	00000028 __mprec_bigtens
00087214 g     F .text	00000120 __s2b
00089d1c g     F .text	00000194 __floatunsidf
00086404 g     F .text	00000060 __mcmp
000849f8 g     F .text	00000018 __fp_lock_all
0008c40c g     F .text	00000048 alt_ic_irq_enabled
0008c980 g     F .text	00000098 alt_alarm_stop
00090b54 g     O .bss	00000004 alt_irq_active
000800ec g     F .exceptions	000000c8 alt_irq_handler
0008de94 g     O .rwdata	00000028 alt_dev_null
00080298 g     F .text	000000a8 KEY2_Pressed
000804d4 g     F .text	0000007c handle_counter_0_expire_interrupts
0008c06c g     F .text	0000001c alt_dcache_flush_all
000862d0 g     F .text	00000070 __hi0bits
00089c44 g     F .text	000000d8 __fixdfsi
0008f0dc g       *ABS*	00000000 __ram_rwdata_end
0008f0bc g     O .rwdata	00000008 alt_dev_list
00080748 g     F .text	00000030 load_counter_1_config
0008b238 g     F .text	00000124 write
0008d680 g       *ABS*	00000000 __ram_rodata_end
0008a878 g     F .text	000000d8 fstat
000870f4 g     F .text	00000120 __pow5mult
00090b38 g     O .bss	00000004 __nlocale_changed
00089ff4 g     F .text	00000008 __umodsi3
000806b4 g     F .text	00000044 reset_counter_1
00090e24 g       *ABS*	00000000 end
0008b5b4 g     F .text	000000c0 altera_avalon_jtag_uart_init
0008d23c g       *ABS*	00000000 __CTOR_LIST__
00100000 g       *ABS*	00000000 __alt_stack_pointer
0008a158 g     F .text	00000080 __clzsi2
0008bcd8 g     F .text	00000240 altera_avalon_jtag_uart_write
0008491c g     F .text	00000004 __sfp_lock_acquire
00085fac g     F .text	000000e4 memchr
00080e78 g     F .text	00001ec4 ___vfprintf_internal_r
00084ce4 g     F .text	00000314 _free_r
0008cfc0 g     F .text	000001b0 __call_exitprocs
00090b3c g     O .bss	00000004 __mlocale_changed
0008f0b0 g     O .rwdata	00000004 __malloc_sbrk_base
000801b4 g     F .text	0000003c _start
00090b64 g     O .bss	00000004 _alt_tick_rate
00086bec g     F .text	0000014c __lshift
00080594 g     F .text	00000028 read_counter_0
00090b68 g     O .bss	00000004 _alt_nticks
0008af80 g     F .text	00000124 read
0008b3f0 g     F .text	00000044 alt_sys_init
0008ce88 g     F .text	00000134 __register_exitproc
00080550 g     F .text	00000044 reset_counter_0
00086d38 g     F .text	00000254 __multiply
0008b94c g     F .text	00000074 altera_avalon_jtag_uart_close
00089ffc g     F .text	00000038 __mulsi3
0008d680 g       *ABS*	00000000 __ram_rwdata_start
0008d240 g       *ABS*	00000000 __ram_rodata_start
00090b6c g     O .bss	00000028 __malloc_current_mallinfo
000868e4 g     F .text	0000017c __d2b
000801f0 g     F .text	000000a8 KEY1_Pressed
000807c0 g     F .text	00000160 disp_seven_seg
0008b46c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0008ccf8 g     F .text	000000d0 alt_get_fd
0008a624 g     F .text	000000c8 __fpcmp_parts_d
00087d50 g     F .text	00000070 _close_r
0008ce14 g     F .text	00000074 memcmp
0008b51c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00090e24 g       *ABS*	00000000 __alt_stack_base
0008b564 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00082d60 g     F .text	0000013c __swsetup_r
0008964c g     F .text	00000258 __divdf3
00084ac8 g     F .text	000000f0 __sfp
00086748 g     F .text	00000058 __copybits
0008da8c g     O .rwdata	00000408 __malloc_av_
00084928 g     F .text	00000004 __sinit_lock_release
00089288 g     F .text	000003c4 __muldf3
000805bc g     F .text	00000028 read_counter_0_interrupt
00087af4 g     F .text	00000060 __sread
0008cbd8 g     F .text	00000120 alt_find_file
0008c088 g     F .text	000000b4 alt_dev_llist_insert
0008af40 g     F .text	00000020 __malloc_lock
0008b17c g     F .text	000000bc sbrk
00084694 g     F .text	000001fc _fflush_r
00087c88 g     F .text	000000c8 _calloc_r
00090b38 g       *ABS*	00000000 __bss_start
00086210 g     F .text	00000098 memset
00080920 g     F .text	000002b4 main
00090b60 g     O .bss	00000004 alt_envp
00090b4c g     O .bss	00000004 __malloc_max_total_mem
0008b4c4 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00087a08 g     F .text	00000008 __sclose
00100000 g       *ABS*	00000000 __alt_heap_limit
00087ed0 g     F .text	00000014 fclose
00090c94 g     O .bss	00000190 _atexit0
000830e0 g     F .text	000015b4 _dtoa_r
0008586c g     F .text	00000740 _malloc_r
0008f0c8 g     O .rwdata	00000004 alt_errno
0008555c g     F .text	000000b8 _fwalk
00089f2c g     F .text	00000060 __divsi3
0008d538 g     O .rodata	00000014 __thenan_df
00084bb8 g     F .text	0000012c _malloc_trim_r
0008d240 g       *ABS*	00000000 __CTOR_END__
00087b54 g     F .text	000000bc strcmp
0008d240 g       *ABS*	00000000 __flash_rodata_start
0008d240 g       *ABS*	00000000 __DTOR_LIST__
0008992c g     F .text	00000088 __nedf2
00080000 g       *ABS*	00000000 __alt_mem_sram_0
0008b3bc g     F .text	00000034 alt_irq_init
0008b104 g     F .text	00000078 alt_release_fd
0008047c g     F .text	00000058 init_button_irq
0008d54c g     O .rodata	00000100 __clz_tab
00090b40 g     O .bss	00000004 _PathLocale
0008cdc8 g     F .text	00000014 atexit
00087c10 g     F .text	00000078 _write_r
000856bc g     F .text	0000001c setlocale
0008f09c g     O .rwdata	00000004 _impure_ptr
00090b58 g     O .bss	00000004 alt_argc
0008c200 g     F .text	00000064 _do_dtors
00080020 g       .exceptions	00000000 alt_irq_entry
00086464 g     F .text	00000080 __ulp
00087928 g     F .text	00000040 __isinfd
000849e0 g     F .text	00000018 __fp_unlock_all
0008f0b4 g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
00085628 g     F .text	00000010 localeconv
0008c280 g     F .text	00000050 alt_ic_isr_register
0008f0dc g       *ABS*	00000000 _edata
00090e24 g       *ABS*	00000000 _end
000801b4 g       *ABS*	00000000 __ram_exceptions_end
0008b9c0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0008c36c g     F .text	000000a0 alt_ic_irq_disable
00087a78 g     F .text	0000007c __swrite
0008f0ac g     O .rwdata	00000004 __malloc_trim_threshold
00080bd4 g     F .text	00000050 handle_switch_interrupts
0008cb24 g     F .text	00000020 altera_nios2_qsys_irq_init
0008cddc g     F .text	00000038 exit
00085494 g     F .text	000000c8 _fwalk_reent
00080720 g     F .text	00000028 read_counter_1_interrupt
00086a60 g     F .text	0000018c __mdiff
00089f8c g     F .text	00000060 __modsi3
00100000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00084920 g     F .text	00000004 __sfp_lock_release
0008d1b0 g     F .text	00000020 _exit
00087968 g     F .text	00000030 __isnand
0008bf18 g     F .text	00000154 alt_alarm_start
0008a034 g     F .text	00000124 __muldi3
000856d8 g     F .text	00000194 __smakebuf_r
00080dac g     F .text	00000074 strlen
0008c794 g     F .text	0000018c open
00089a3c g     F .text	00000088 __gedf2
0008c264 g     F .text	0000001c alt_icache_flush_all
0008f0cc g     O .rwdata	00000004 alt_priority_mask
0008c2d0 g     F .text	0000009c alt_ic_irq_enable
00082d3c g     F .text	00000024 __vfprintf_internal
00089194 g     F .text	00000080 __subdf3
00086340 g     F .text	000000c4 __lo0bits
0008f0d4 g     O .rwdata	00000008 alt_alarm_list
0008c19c g     F .text	00000064 _do_ctors
000803f0 g     F .text	0000008c handle_button_interrupts
0008a6ec g     F .text	00000100 close
0008ac94 g     F .text	00000080 alt_load
0008a1d8 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00084924 g     F .text	00000004 __sinit_lock_acquire
00086fc8 g     F .text	0000012c __multadd
000862a8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08406d14 	ori	at,at,436
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   800fc:	0005313a 	rdctl	r2,ipending
   80100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   80104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   80108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   8010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80110:	00800044 	movi	r2,1
   80114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80118:	e0ffff17 	ldw	r3,-4(fp)
   8011c:	e0bffe17 	ldw	r2,-8(fp)
   80120:	1884703a 	and	r2,r3,r2
   80124:	1005003a 	cmpeq	r2,r2,zero
   80128:	1000161e 	bne	r2,zero,80184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	e0bffd17 	ldw	r2,-12(fp)
   80130:	00c00274 	movhi	r3,9
   80134:	18c2e504 	addi	r3,r3,2964
   80138:	100490fa 	slli	r2,r2,3
   8013c:	10c5883a 	add	r2,r2,r3
   80140:	11400017 	ldw	r5,0(r2)
   80144:	e0bffd17 	ldw	r2,-12(fp)
   80148:	00c00274 	movhi	r3,9
   8014c:	18c2e504 	addi	r3,r3,2964
   80150:	100490fa 	slli	r2,r2,3
   80154:	10c5883a 	add	r2,r2,r3
   80158:	10800104 	addi	r2,r2,4
   8015c:	11000017 	ldw	r4,0(r2)
   80160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80164:	0005313a 	rdctl	r2,ipending
   80168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   8016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   80174:	e0bfff17 	ldw	r2,-4(fp)
   80178:	1004c03a 	cmpne	r2,r2,zero
   8017c:	103fe31e 	bne	r2,zero,8010c <alt_irq_handler+0x20>
   80180:	00000706 	br	801a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80184:	e0bffe17 	ldw	r2,-8(fp)
   80188:	1085883a 	add	r2,r2,r2
   8018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   80190:	e0bffd17 	ldw	r2,-12(fp)
   80194:	10800044 	addi	r2,r2,1
   80198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   8019c:	003fde06 	br	80118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a0:	e037883a 	mov	sp,fp
   801a4:	dfc00117 	ldw	ra,4(sp)
   801a8:	df000017 	ldw	fp,0(sp)
   801ac:	dec00204 	addi	sp,sp,8
   801b0:	f800283a 	ret

Disassembly of section .text:

000801b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801b4:	06c00434 	movhi	sp,16
    ori sp, sp, %lo(__alt_stack_pointer)
   801b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   801bc:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   801c0:	d69c2714 	ori	gp,gp,28828
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801c4:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   801c8:	1082ce14 	ori	r2,r2,2872

    movhi r3, %hi(__bss_end)
   801cc:	00c00274 	movhi	r3,9
    ori r3, r3, %lo(__bss_end)
   801d0:	18c38914 	ori	r3,r3,3620

    beq r2, r3, 1f
   801d4:	10c00326 	beq	r2,r3,801e4 <_start+0x30>

0:
    stw zero, (r2)
   801d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801e0:	10fffd36 	bltu	r2,r3,801d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801e4:	008ac940 	call	8ac94 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801e8:	008aed40 	call	8aed4 <alt_main>

000801ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801ec:	003fff06 	br	801ec <alt_after_alt_main>

000801f0 <KEY1_Pressed>:

//void KEY0_Pressed() {
	//reset_counter();
//}

void KEY1_Pressed(elevator *data) {
   801f0:	defffc04 	addi	sp,sp,-16
   801f4:	dfc00315 	stw	ra,12(sp)
   801f8:	df000215 	stw	fp,8(sp)
   801fc:	df000204 	addi	fp,sp,8
   80200:	e13fff15 	stw	r4,-4(fp)
	int val;
	printf("button 1 pressed\n");
   80204:	01000274 	movhi	r4,9
   80208:	21349004 	addi	r4,r4,-11712
   8020c:	0080d980 	call	80d98 <puts>
	if(((IORD(PUSH_BUTTON_I_BASE,0)>>1)&0x1)==0){
   80210:	00800434 	movhi	r2,16
   80214:	10840404 	addi	r2,r2,4112
   80218:	10800037 	ldwio	r2,0(r2)
   8021c:	1005d07a 	srai	r2,r2,1
   80220:	1080004c 	andi	r2,r2,1
   80224:	1004c03a 	cmpne	r2,r2,zero
   80228:	1000161e 	bne	r2,zero,80284 <KEY1_Pressed+0x94>
		if((*data).drc==0&&(*data).door_open==0&& (*data).door_hold==0){
   8022c:	e0bfff17 	ldw	r2,-4(fp)
   80230:	10800217 	ldw	r2,8(r2)
   80234:	1004c03a 	cmpne	r2,r2,zero
   80238:	1000121e 	bne	r2,zero,80284 <KEY1_Pressed+0x94>
   8023c:	e0bfff17 	ldw	r2,-4(fp)
   80240:	10800017 	ldw	r2,0(r2)
   80244:	1004c03a 	cmpne	r2,r2,zero
   80248:	10000e1e 	bne	r2,zero,80284 <KEY1_Pressed+0x94>
   8024c:	e0bfff17 	ldw	r2,-4(fp)
   80250:	10800117 	ldw	r2,4(r2)
   80254:	1004c03a 	cmpne	r2,r2,zero
   80258:	10000a1e 	bne	r2,zero,80284 <KEY1_Pressed+0x94>
			val=(IORD(SWITCH_I_BASE, 0) & 0x18000) >> 15;
   8025c:	00800434 	movhi	r2,16
   80260:	10840004 	addi	r2,r2,4096
   80264:	10c00037 	ldwio	r3,0(r2)
   80268:	008000b4 	movhi	r2,2
   8026c:	10a00004 	addi	r2,r2,-32768
   80270:	1884703a 	and	r2,r3,r2
   80274:	1005d3fa 	srai	r2,r2,15
   80278:	e0bffe15 	stw	r2,-8(fp)
			load_counter_1_config(val);
   8027c:	e13ffe17 	ldw	r4,-8(fp)
   80280:	00807480 	call	80748 <load_counter_1_config>
		}
	}

}
   80284:	e037883a 	mov	sp,fp
   80288:	dfc00117 	ldw	ra,4(sp)
   8028c:	df000017 	ldw	fp,0(sp)
   80290:	dec00204 	addi	sp,sp,8
   80294:	f800283a 	ret

00080298 <KEY2_Pressed>:

void KEY2_Pressed(elevator *data) {
   80298:	defffc04 	addi	sp,sp,-16
   8029c:	dfc00315 	stw	ra,12(sp)
   802a0:	df000215 	stw	fp,8(sp)
   802a4:	df000204 	addi	fp,sp,8
   802a8:	e13fff15 	stw	r4,-4(fp)
	int val;
	printf("button 2 pressed\n");
   802ac:	01000274 	movhi	r4,9
   802b0:	21349504 	addi	r4,r4,-11692
   802b4:	0080d980 	call	80d98 <puts>
	if(((IORD(PUSH_BUTTON_I_BASE,0)>>2)&0x1)==0){
   802b8:	00800434 	movhi	r2,16
   802bc:	10840404 	addi	r2,r2,4112
   802c0:	10800037 	ldwio	r2,0(r2)
   802c4:	1005d0ba 	srai	r2,r2,2
   802c8:	1080004c 	andi	r2,r2,1
   802cc:	1004c03a 	cmpne	r2,r2,zero
   802d0:	1000161e 	bne	r2,zero,8032c <KEY2_Pressed+0x94>
		if((*data).drc==0&&(*data).door_open==0&& (*data).door_hold==0){
   802d4:	e0bfff17 	ldw	r2,-4(fp)
   802d8:	10800217 	ldw	r2,8(r2)
   802dc:	1004c03a 	cmpne	r2,r2,zero
   802e0:	1000121e 	bne	r2,zero,8032c <KEY2_Pressed+0x94>
   802e4:	e0bfff17 	ldw	r2,-4(fp)
   802e8:	10800017 	ldw	r2,0(r2)
   802ec:	1004c03a 	cmpne	r2,r2,zero
   802f0:	10000e1e 	bne	r2,zero,8032c <KEY2_Pressed+0x94>
   802f4:	e0bfff17 	ldw	r2,-4(fp)
   802f8:	10800117 	ldw	r2,4(r2)
   802fc:	1004c03a 	cmpne	r2,r2,zero
   80300:	10000a1e 	bne	r2,zero,8032c <KEY2_Pressed+0x94>
			val=(IORD(SWITCH_I_BASE, 0) & 0x18000) >> 15;
   80304:	00800434 	movhi	r2,16
   80308:	10840004 	addi	r2,r2,4096
   8030c:	10c00037 	ldwio	r3,0(r2)
   80310:	008000b4 	movhi	r2,2
   80314:	10a00004 	addi	r2,r2,-32768
   80318:	1884703a 	and	r2,r3,r2
   8031c:	1005d3fa 	srai	r2,r2,15
   80320:	e0bffe15 	stw	r2,-8(fp)
			load_counter_0_config(val);
   80324:	e13ffe17 	ldw	r4,-8(fp)
   80328:	00805e40 	call	805e4 <load_counter_0_config>
			}
		}
}
   8032c:	e037883a 	mov	sp,fp
   80330:	dfc00117 	ldw	ra,4(sp)
   80334:	df000017 	ldw	fp,0(sp)
   80338:	dec00204 	addi	sp,sp,8
   8033c:	f800283a 	ret

00080340 <KEY3_Pressed>:

void KEY3_Pressed(elevator *data) {
   80340:	defffd04 	addi	sp,sp,-12
   80344:	dfc00215 	stw	ra,8(sp)
   80348:	df000115 	stw	fp,4(sp)
   8034c:	df000104 	addi	fp,sp,4
   80350:	e13fff15 	stw	r4,-4(fp)
		printf("button 3 pressed\n");
   80354:	01000274 	movhi	r4,9
   80358:	21349a04 	addi	r4,r4,-11672
   8035c:	0080d980 	call	80d98 <puts>
		if((*data).drc==0||(*data).door_open==1||(*data).door_hold==1){
   80360:	e0bfff17 	ldw	r2,-4(fp)
   80364:	10800217 	ldw	r2,8(r2)
   80368:	1005003a 	cmpeq	r2,r2,zero
   8036c:	1000081e 	bne	r2,zero,80390 <KEY3_Pressed+0x50>
   80370:	e0bfff17 	ldw	r2,-4(fp)
   80374:	10800017 	ldw	r2,0(r2)
   80378:	10800060 	cmpeqi	r2,r2,1
   8037c:	1000041e 	bne	r2,zero,80390 <KEY3_Pressed+0x50>
   80380:	e0bfff17 	ldw	r2,-4(fp)
   80384:	10800117 	ldw	r2,4(r2)
   80388:	10800058 	cmpnei	r2,r2,1
   8038c:	1000131e 	bne	r2,zero,803dc <KEY3_Pressed+0x9c>
			if(((IORD(PUSH_BUTTON_I_BASE,0)>>3)&0x1)==0){
   80390:	00800434 	movhi	r2,16
   80394:	10840404 	addi	r2,r2,4112
   80398:	10800037 	ldwio	r2,0(r2)
   8039c:	1005d0fa 	srai	r2,r2,3
   803a0:	1080004c 	andi	r2,r2,1
   803a4:	1004c03a 	cmpne	r2,r2,zero
   803a8:	1000071e 	bne	r2,zero,803c8 <KEY3_Pressed+0x88>
				printf("door kept open\n");
   803ac:	01000274 	movhi	r4,9
   803b0:	21349f04 	addi	r4,r4,-11652
   803b4:	0080d980 	call	80d98 <puts>
				(*data).door_hold=1;
   803b8:	e0ffff17 	ldw	r3,-4(fp)
   803bc:	00800044 	movi	r2,1
   803c0:	18800115 	stw	r2,4(r3)
   803c4:	00000506 	br	803dc <KEY3_Pressed+0x9c>
			}else {
				printf("door is now close\n");
   803c8:	01000274 	movhi	r4,9
   803cc:	2134a304 	addi	r4,r4,-11636
   803d0:	0080d980 	call	80d98 <puts>
				(*data).door_hold=0;
   803d4:	e0bfff17 	ldw	r2,-4(fp)
   803d8:	10000115 	stw	zero,4(r2)
			}

		}

}
   803dc:	e037883a 	mov	sp,fp
   803e0:	dfc00117 	ldw	ra,4(sp)
   803e4:	df000017 	ldw	fp,0(sp)
   803e8:	dec00204 	addi	sp,sp,8
   803ec:	f800283a 	ret

000803f0 <handle_button_interrupts>:

// ISR when any PB is pressed
void handle_button_interrupts(elevator *data)
{
   803f0:	defffc04 	addi	sp,sp,-16
   803f4:	dfc00315 	stw	ra,12(sp)
   803f8:	df000215 	stw	fp,8(sp)
   803fc:	df000204 	addi	fp,sp,8
   80400:	e13ffe15 	stw	r4,-8(fp)
	//IOWR(LED_GREEN_O_BASE, 0, IORD(PUSH_BUTTON_I_BASE, 3)*IORD(PUSH_BUTTON_I_BASE, 3));
	
	switch(IORD(PUSH_BUTTON_I_BASE, 3)) {
   80404:	00800434 	movhi	r2,16
   80408:	10840704 	addi	r2,r2,4124
   8040c:	10800037 	ldwio	r2,0(r2)
   80410:	e0bfff15 	stw	r2,-4(fp)
   80414:	e0ffff17 	ldw	r3,-4(fp)
   80418:	18800120 	cmpeqi	r2,r3,4
   8041c:	10000a1e 	bne	r2,zero,80448 <handle_button_interrupts+0x58>
   80420:	e0ffff17 	ldw	r3,-4(fp)
   80424:	18800220 	cmpeqi	r2,r3,8
   80428:	10000a1e 	bne	r2,zero,80454 <handle_button_interrupts+0x64>
   8042c:	e0ffff17 	ldw	r3,-4(fp)
   80430:	188000a0 	cmpeqi	r2,r3,2
   80434:	1000011e 	bne	r2,zero,8043c <handle_button_interrupts+0x4c>
   80438:	00000806 	br	8045c <handle_button_interrupts+0x6c>
	//case 1: KEY0_Pressed(); break;
	case 2: KEY1_Pressed(data); break;
   8043c:	e13ffe17 	ldw	r4,-8(fp)
   80440:	00801f00 	call	801f0 <KEY1_Pressed>
   80444:	00000506 	br	8045c <handle_button_interrupts+0x6c>
	case 4: KEY2_Pressed(data); break;
   80448:	e13ffe17 	ldw	r4,-8(fp)
   8044c:	00802980 	call	80298 <KEY2_Pressed>
   80450:	00000206 	br	8045c <handle_button_interrupts+0x6c>
	case 8: KEY3_Pressed(data); break;
   80454:	e13ffe17 	ldw	r4,-8(fp)
   80458:	00803400 	call	80340 <KEY3_Pressed>
	}
	IOWR(PUSH_BUTTON_I_BASE, 3, 0x0);
   8045c:	00800434 	movhi	r2,16
   80460:	10840704 	addi	r2,r2,4124
   80464:	10000035 	stwio	zero,0(r2)
}
   80468:	e037883a 	mov	sp,fp
   8046c:	dfc00117 	ldw	ra,4(sp)
   80470:	df000017 	ldw	fp,0(sp)
   80474:	dec00204 	addi	sp,sp,8
   80478:	f800283a 	ret

0008047c <init_button_irq>:

// Function for initializing the ISR of the PBs
// The PBs are setup to generate interrupt on falling edge,
// and the interrupt is captured when the edge comes
void init_button_irq(elevator *data) {
   8047c:	defffd04 	addi	sp,sp,-12
   80480:	dfc00215 	stw	ra,8(sp)
   80484:	df000115 	stw	fp,4(sp)
   80488:	df000104 	addi	fp,sp,4
   8048c:	e13fff15 	stw	r4,-4(fp)
  // Enable all 4 button interrupts
  IOWR(PUSH_BUTTON_I_BASE, 2, BUTTON_INT_MASK);
   80490:	00800434 	movhi	r2,16
   80494:	10840604 	addi	r2,r2,4120
   80498:	00c003c4 	movi	r3,15
   8049c:	10c00035 	stwio	r3,0(r2)

  // Reset the edge capture register
  IOWR(PUSH_BUTTON_I_BASE, 3, 0x0);
   804a0:	00800434 	movhi	r2,16
   804a4:	10840704 	addi	r2,r2,4124
   804a8:	10000035 	stwio	zero,0(r2)

  // Register the interrupt handler
  alt_irq_register(PUSH_BUTTON_I_IRQ, (void*)data, (void*)handle_button_interrupts );
   804ac:	01000084 	movi	r4,2
   804b0:	e17fff17 	ldw	r5,-4(fp)
   804b4:	01800234 	movhi	r6,8
   804b8:	3180fc04 	addi	r6,r6,1008
   804bc:	008a9b00 	call	8a9b0 <alt_irq_register>
}
   804c0:	e037883a 	mov	sp,fp
   804c4:	dfc00117 	ldw	ra,4(sp)
   804c8:	df000017 	ldw	fp,0(sp)
   804cc:	dec00204 	addi	sp,sp,8
   804d0:	f800283a 	ret

000804d4 <handle_counter_0_expire_interrupts>:

#include "define.h"

// ISR when the counter is expired
void handle_counter_0_expire_interrupts(elevator *data)
{
   804d4:	defffe04 	addi	sp,sp,-8
   804d8:	df000115 	stw	fp,4(sp)
   804dc:	df000104 	addi	fp,sp,4
   804e0:	e13fff15 	stw	r4,-4(fp)
    if((*data).drc==1){
   804e4:	e0bfff17 	ldw	r2,-4(fp)
   804e8:	10800217 	ldw	r2,8(r2)
   804ec:	10800058 	cmpnei	r2,r2,1
   804f0:	1000051e 	bne	r2,zero,80508 <handle_counter_0_expire_interrupts+0x34>
    	(*data).cur_flo=(*data).cur_flo+1;
   804f4:	e0bfff17 	ldw	r2,-4(fp)
   804f8:	10800417 	ldw	r2,16(r2)
   804fc:	10c00044 	addi	r3,r2,1
   80500:	e0bfff17 	ldw	r2,-4(fp)
   80504:	10c00415 	stw	r3,16(r2)
    }
    if((*data).drc==-1){
   80508:	e0bfff17 	ldw	r2,-4(fp)
   8050c:	10800217 	ldw	r2,8(r2)
   80510:	10bfffd8 	cmpnei	r2,r2,-1
   80514:	1000051e 	bne	r2,zero,8052c <handle_counter_0_expire_interrupts+0x58>
    	(*data).cur_flo=(*data).cur_flo-1;
   80518:	e0bfff17 	ldw	r2,-4(fp)
   8051c:	10800417 	ldw	r2,16(r2)
   80520:	10ffffc4 	addi	r3,r2,-1
   80524:	e0bfff17 	ldw	r2,-4(fp)
   80528:	10c00415 	stw	r3,16(r2)
    }
	//printf("Counter expires\n");
	(*data).betweenflo=0;
   8052c:	e0bfff17 	ldw	r2,-4(fp)
   80530:	10000515 	stw	zero,20(r2)
	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 2, 0);
   80534:	00800434 	movhi	r2,16
   80538:	10841204 	addi	r2,r2,4168
   8053c:	10000035 	stwio	zero,0(r2)

}
   80540:	e037883a 	mov	sp,fp
   80544:	df000017 	ldw	fp,0(sp)
   80548:	dec00104 	addi	sp,sp,4
   8054c:	f800283a 	ret

00080550 <reset_counter_0>:

void reset_counter_0() {
   80550:	deffff04 	addi	sp,sp,-4
   80554:	df000015 	stw	fp,0(sp)
   80558:	d839883a 	mov	fp,sp
	//printf("Resetting counter value\n");

	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 1, 1);
   8055c:	00c00434 	movhi	r3,16
   80560:	18c41104 	addi	r3,r3,4164
   80564:	00800044 	movi	r2,1
   80568:	18800035 	stwio	r2,0(r3)
	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 1, 0);
   8056c:	00800434 	movhi	r2,16
   80570:	10841104 	addi	r2,r2,4164
   80574:	10000035 	stwio	zero,0(r2)

	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 2, 0);
   80578:	00800434 	movhi	r2,16
   8057c:	10841204 	addi	r2,r2,4168
   80580:	10000035 	stwio	zero,0(r2)
}
   80584:	e037883a 	mov	sp,fp
   80588:	df000017 	ldw	fp,0(sp)
   8058c:	dec00104 	addi	sp,sp,4
   80590:	f800283a 	ret

00080594 <read_counter_0>:

int read_counter_0() {
   80594:	deffff04 	addi	sp,sp,-4
   80598:	df000015 	stw	fp,0(sp)
   8059c:	d839883a 	mov	fp,sp
	return IORD(CUSTOM_COUNTER_COMPONENT_0_BASE, 0);
   805a0:	00800434 	movhi	r2,16
   805a4:	10841004 	addi	r2,r2,4160
   805a8:	10800037 	ldwio	r2,0(r2)
}
   805ac:	e037883a 	mov	sp,fp
   805b0:	df000017 	ldw	fp,0(sp)
   805b4:	dec00104 	addi	sp,sp,4
   805b8:	f800283a 	ret

000805bc <read_counter_0_interrupt>:

int read_counter_0_interrupt() {
   805bc:	deffff04 	addi	sp,sp,-4
   805c0:	df000015 	stw	fp,0(sp)
   805c4:	d839883a 	mov	fp,sp
	return IORD(CUSTOM_COUNTER_COMPONENT_0_BASE, 2);
   805c8:	00800434 	movhi	r2,16
   805cc:	10841204 	addi	r2,r2,4168
   805d0:	10800037 	ldwio	r2,0(r2)
}
   805d4:	e037883a 	mov	sp,fp
   805d8:	df000017 	ldw	fp,0(sp)
   805dc:	dec00104 	addi	sp,sp,4
   805e0:	f800283a 	ret

000805e4 <load_counter_0_config>:

void load_counter_0_config(int config) {
   805e4:	defffe04 	addi	sp,sp,-8
   805e8:	df000115 	stw	fp,4(sp)
   805ec:	df000104 	addi	fp,sp,4
   805f0:	e13fff15 	stw	r4,-4(fp)
	//printf("Loading counter config %d\n", config);

	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 3, config);
   805f4:	00c00434 	movhi	r3,16
   805f8:	18c41304 	addi	r3,r3,4172
   805fc:	e0bfff17 	ldw	r2,-4(fp)
   80600:	18800035 	stwio	r2,0(r3)
}
   80604:	e037883a 	mov	sp,fp
   80608:	df000017 	ldw	fp,0(sp)
   8060c:	dec00104 	addi	sp,sp,4
   80610:	f800283a 	ret

00080614 <init_counter_0_irq>:

// Function for initializing the ISR of the Counter
void init_counter_0_irq(elevator *data) {
   80614:	defffd04 	addi	sp,sp,-12
   80618:	dfc00215 	stw	ra,8(sp)
   8061c:	df000115 	stw	fp,4(sp)
   80620:	df000104 	addi	fp,sp,4
   80624:	e13fff15 	stw	r4,-4(fp)
	IOWR(CUSTOM_COUNTER_COMPONENT_0_BASE, 2, 0);
   80628:	00800434 	movhi	r2,16
   8062c:	10841204 	addi	r2,r2,4168
   80630:	10000035 	stwio	zero,0(r2)

	alt_irq_register(CUSTOM_COUNTER_COMPONENT_0_IRQ, (void*)data, (void*)handle_counter_0_expire_interrupts );
   80634:	01000044 	movi	r4,1
   80638:	e17fff17 	ldw	r5,-4(fp)
   8063c:	01800234 	movhi	r6,8
   80640:	31813504 	addi	r6,r6,1236
   80644:	008a9b00 	call	8a9b0 <alt_irq_register>
}
   80648:	e037883a 	mov	sp,fp
   8064c:	dfc00117 	ldw	ra,4(sp)
   80650:	df000017 	ldw	fp,0(sp)
   80654:	dec00204 	addi	sp,sp,8
   80658:	f800283a 	ret

0008065c <handle_counter_1_expire_interrupts>:

#include "define.h"

// ISR when the counter is expired
void handle_counter_1_expire_interrupts(elevator *data)
{
   8065c:	defffd04 	addi	sp,sp,-12
   80660:	dfc00215 	stw	ra,8(sp)
   80664:	df000115 	stw	fp,4(sp)
   80668:	df000104 	addi	fp,sp,4
   8066c:	e13fff15 	stw	r4,-4(fp)
	if((*data).door_hold!=1){
   80670:	e0bfff17 	ldw	r2,-4(fp)
   80674:	10800117 	ldw	r2,4(r2)
   80678:	10800060 	cmpeqi	r2,r2,1
   8067c:	1000081e 	bne	r2,zero,806a0 <handle_counter_1_expire_interrupts+0x44>
	printf("door closed\n");
   80680:	01000274 	movhi	r4,9
   80684:	2134a804 	addi	r4,r4,-11616
   80688:	0080d980 	call	80d98 <puts>
	(*data).door_open=0;
   8068c:	e0bfff17 	ldw	r2,-4(fp)
   80690:	10000015 	stw	zero,0(r2)
	IOWR(CUSTOM_COUNTER_COMPONENT_1_BASE, 2, 0);
   80694:	00800434 	movhi	r2,16
   80698:	10841604 	addi	r2,r2,4184
   8069c:	10000035 	stwio	zero,0(r2)
	}
}
   806a0:	e037883a 	mov	sp,fp
   806a4:	dfc00117 	ldw	ra,4(sp)
   806a8:	df000017 	ldw	fp,0(sp)
   806ac:	dec00204 	addi	sp,sp,8
   806b0:	f800283a 	ret

000806b4 <reset_counter_1>:

void reset_counter_1() {
   806b4:	deffff04 	addi	sp,sp,-4
   806b8:	df000015 	stw	fp,0(sp)
   806bc:	d839883a 	mov	fp,sp
	//printf("Resetting counter value\n");

	IOWR(CUSTOM_COUNTER_COMPONENT_1_BASE, 1, 1);
   806c0:	00c00434 	movhi	r3,16
   806c4:	18c41504 	addi	r3,r3,4180
   806c8:	00800044 	movi	r2,1
   806cc:	18800035 	stwio	r2,0(r3)
	IOWR(CUSTOM_COUNTER_COMPONENT_1_BASE, 1, 0);
   806d0:	00800434 	movhi	r2,16
   806d4:	10841504 	addi	r2,r2,4180
   806d8:	10000035 	stwio	zero,0(r2)

	IOWR(CUSTOM_COUNTER_COMPONENT_1_BASE, 2, 0);
   806dc:	00800434 	movhi	r2,16
   806e0:	10841604 	addi	r2,r2,4184
   806e4:	10000035 	stwio	zero,0(r2)
}
   806e8:	e037883a 	mov	sp,fp
   806ec:	df000017 	ldw	fp,0(sp)
   806f0:	dec00104 	addi	sp,sp,4
   806f4:	f800283a 	ret

000806f8 <read_counter_1>:

int read_counter_1() {
   806f8:	deffff04 	addi	sp,sp,-4
   806fc:	df000015 	stw	fp,0(sp)
   80700:	d839883a 	mov	fp,sp
	return IORD(CUSTOM_COUNTER_COMPONENT_1_BASE, 0);
   80704:	00800434 	movhi	r2,16
   80708:	10841404 	addi	r2,r2,4176
   8070c:	10800037 	ldwio	r2,0(r2)
}
   80710:	e037883a 	mov	sp,fp
   80714:	df000017 	ldw	fp,0(sp)
   80718:	dec00104 	addi	sp,sp,4
   8071c:	f800283a 	ret

00080720 <read_counter_1_interrupt>:

int read_counter_1_interrupt() {
   80720:	deffff04 	addi	sp,sp,-4
   80724:	df000015 	stw	fp,0(sp)
   80728:	d839883a 	mov	fp,sp
	return IORD(CUSTOM_COUNTER_COMPONENT_1_BASE, 2);
   8072c:	00800434 	movhi	r2,16
   80730:	10841604 	addi	r2,r2,4184
   80734:	10800037 	ldwio	r2,0(r2)
}
   80738:	e037883a 	mov	sp,fp
   8073c:	df000017 	ldw	fp,0(sp)
   80740:	dec00104 	addi	sp,sp,4
   80744:	f800283a 	ret

00080748 <load_counter_1_config>:

void load_counter_1_config(int config) {
   80748:	defffe04 	addi	sp,sp,-8
   8074c:	df000115 	stw	fp,4(sp)
   80750:	df000104 	addi	fp,sp,4
   80754:	e13fff15 	stw	r4,-4(fp)
	//printf("Loading counter config %d\n", config);

	IOWR(CUSTOM_COUNTER_COMPONENT_1_BASE, 3, config);
   80758:	00c00434 	movhi	r3,16
   8075c:	18c41704 	addi	r3,r3,4188
   80760:	e0bfff17 	ldw	r2,-4(fp)
   80764:	18800035 	stwio	r2,0(r3)
}
   80768:	e037883a 	mov	sp,fp
   8076c:	df000017 	ldw	fp,0(sp)
   80770:	dec00104 	addi	sp,sp,4
   80774:	f800283a 	ret

00080778 <init_counter_1_irq>:

// Function for initializing the ISR of the Counter
void init_counter_1_irq(elevator *data) {
   80778:	defffd04 	addi	sp,sp,-12
   8077c:	dfc00215 	stw	ra,8(sp)
   80780:	df000115 	stw	fp,4(sp)
   80784:	df000104 	addi	fp,sp,4
   80788:	e13fff15 	stw	r4,-4(fp)
	IOWR(CUSTOM_COUNTER_COMPONENT_1_BASE, 2, 0);
   8078c:	00800434 	movhi	r2,16
   80790:	10841604 	addi	r2,r2,4184
   80794:	10000035 	stwio	zero,0(r2)

	alt_irq_register(CUSTOM_COUNTER_COMPONENT_1_IRQ, (void*)data, (void*)handle_counter_1_expire_interrupts );
   80798:	010000c4 	movi	r4,3
   8079c:	e17fff17 	ldw	r5,-4(fp)
   807a0:	01800234 	movhi	r6,8
   807a4:	31819704 	addi	r6,r6,1628
   807a8:	008a9b00 	call	8a9b0 <alt_irq_register>
}
   807ac:	e037883a 	mov	sp,fp
   807b0:	dfc00117 	ldw	ra,4(sp)
   807b4:	df000017 	ldw	fp,0(sp)
   807b8:	dec00204 	addi	sp,sp,8
   807bc:	f800283a 	ret

000807c0 <disp_seven_seg>:
 */

#include <stdio.h>
#include "define.h"

alt_u16 disp_seven_seg(alt_u8 val) {
   807c0:	defffc04 	addi	sp,sp,-16
   807c4:	df000315 	stw	fp,12(sp)
   807c8:	df000304 	addi	fp,sp,12
   807cc:	e13ffd05 	stb	r4,-12(fp)
    switch (val) {
   807d0:	e0bffd03 	ldbu	r2,-12(fp)
   807d4:	e0bfff15 	stw	r2,-4(fp)
   807d8:	e0ffff17 	ldw	r3,-4(fp)
   807dc:	18800428 	cmpgeui	r2,r3,16
   807e0:	1000481e 	bne	r2,zero,80904 <disp_seven_seg+0x144>
   807e4:	e13fff17 	ldw	r4,-4(fp)
   807e8:	e13fff17 	ldw	r4,-4(fp)
   807ec:	2105883a 	add	r2,r4,r4
   807f0:	1087883a 	add	r3,r2,r2
   807f4:	00800234 	movhi	r2,8
   807f8:	10820204 	addi	r2,r2,2056
   807fc:	1885883a 	add	r2,r3,r2
   80800:	10800017 	ldw	r2,0(r2)
   80804:	1000683a 	jmp	r2
   80808:	00080848 	cmpgei	zero,zero,8225
   8080c:	00080854 	movui	zero,8225
   80810:	00080860 	cmpeqi	zero,zero,8225
   80814:	0008086c 	andhi	zero,zero,8225
   80818:	00080878 	rdprs	zero,zero,8225
   8081c:	00080884 	movi	zero,8226
   80820:	00080890 	cmplti	zero,zero,8226
   80824:	0008089c 	xori	zero,zero,8226
   80828:	000808a8 	cmpgeui	zero,zero,8226
   8082c:	000808b0 	cmpltui	zero,zero,8226
   80830:	000808bc 	xorhi	zero,zero,8226
   80834:	000808c8 	cmpgei	zero,zero,8227
   80838:	000808d4 	movui	zero,8227
   8083c:	000808e0 	cmpeqi	zero,zero,8227
   80840:	000808ec 	andhi	zero,zero,8227
   80844:	000808f8 	rdprs	zero,zero,8227
        case  0 : return 0x40;
   80848:	00801004 	movi	r2,64
   8084c:	e0bffe15 	stw	r2,-8(fp)
   80850:	00002e06 	br	8090c <disp_seven_seg+0x14c>
        case  1 : return 0x79;
   80854:	00c01e44 	movi	r3,121
   80858:	e0fffe15 	stw	r3,-8(fp)
   8085c:	00002b06 	br	8090c <disp_seven_seg+0x14c>
        case  2 : return 0x24;
   80860:	01000904 	movi	r4,36
   80864:	e13ffe15 	stw	r4,-8(fp)
   80868:	00002806 	br	8090c <disp_seven_seg+0x14c>
        case  3 : return 0x30;
   8086c:	00800c04 	movi	r2,48
   80870:	e0bffe15 	stw	r2,-8(fp)
   80874:	00002506 	br	8090c <disp_seven_seg+0x14c>
        case  4 : return 0x19;
   80878:	00c00644 	movi	r3,25
   8087c:	e0fffe15 	stw	r3,-8(fp)
   80880:	00002206 	br	8090c <disp_seven_seg+0x14c>
        case  5 : return 0x12;
   80884:	01000484 	movi	r4,18
   80888:	e13ffe15 	stw	r4,-8(fp)
   8088c:	00001f06 	br	8090c <disp_seven_seg+0x14c>
        case  6 : return 0x02;
   80890:	00800084 	movi	r2,2
   80894:	e0bffe15 	stw	r2,-8(fp)
   80898:	00001c06 	br	8090c <disp_seven_seg+0x14c>
        case  7 : return 0x78;
   8089c:	00c01e04 	movi	r3,120
   808a0:	e0fffe15 	stw	r3,-8(fp)
   808a4:	00001906 	br	8090c <disp_seven_seg+0x14c>
        case  8 : return 0x00;
   808a8:	e03ffe15 	stw	zero,-8(fp)
   808ac:	00001706 	br	8090c <disp_seven_seg+0x14c>
        case  9 : return 0x18;
   808b0:	01000604 	movi	r4,24
   808b4:	e13ffe15 	stw	r4,-8(fp)
   808b8:	00001406 	br	8090c <disp_seven_seg+0x14c>
        case 10 : return 0x08;
   808bc:	00800204 	movi	r2,8
   808c0:	e0bffe15 	stw	r2,-8(fp)
   808c4:	00001106 	br	8090c <disp_seven_seg+0x14c>
        case 11 : return 0x03;
   808c8:	00c000c4 	movi	r3,3
   808cc:	e0fffe15 	stw	r3,-8(fp)
   808d0:	00000e06 	br	8090c <disp_seven_seg+0x14c>
        case 12 : return 0x46;
   808d4:	01001184 	movi	r4,70
   808d8:	e13ffe15 	stw	r4,-8(fp)
   808dc:	00000b06 	br	8090c <disp_seven_seg+0x14c>
        case 13 : return 0x21;
   808e0:	00800844 	movi	r2,33
   808e4:	e0bffe15 	stw	r2,-8(fp)
   808e8:	00000806 	br	8090c <disp_seven_seg+0x14c>
        case 14 : return 0x06;
   808ec:	00c00184 	movi	r3,6
   808f0:	e0fffe15 	stw	r3,-8(fp)
   808f4:	00000506 	br	8090c <disp_seven_seg+0x14c>
        case 15 : return 0x0e;
   808f8:	01000384 	movi	r4,14
   808fc:	e13ffe15 	stw	r4,-8(fp)
   80900:	00000206 	br	8090c <disp_seven_seg+0x14c>
        default : return 0x7f;
   80904:	00801fc4 	movi	r2,127
   80908:	e0bffe15 	stw	r2,-8(fp)
   8090c:	e0bffe17 	ldw	r2,-8(fp)
    }
}
   80910:	e037883a 	mov	sp,fp
   80914:	df000017 	ldw	fp,0(sp)
   80918:	dec00104 	addi	sp,sp,4
   8091c:	f800283a 	ret

00080920 <main>:

int main()
{
   80920:	defff804 	addi	sp,sp,-32
   80924:	dfc00715 	stw	ra,28(sp)
   80928:	df000615 	stw	fp,24(sp)
   8092c:	df000604 	addi	fp,sp,24
    elevator data;
	data.door_open = 0;
   80930:	e03ffa15 	stw	zero,-24(fp)
	data.door_hold = 0;
   80934:	e03ffb15 	stw	zero,-20(fp)
	data.drc = 0;
   80938:	e03ffc15 	stw	zero,-16(fp)
	data.instruction = 0;
   8093c:	e03ffd15 	stw	zero,-12(fp)
	data.cur_flo = 0;
   80940:	e03ffe15 	stw	zero,-8(fp)
	data.betweenflo = 0;
   80944:	e03fff15 	stw	zero,-4(fp)



    init_button_irq(&data);
   80948:	e13ffa04 	addi	r4,fp,-24
   8094c:	008047c0 	call	8047c <init_button_irq>
	init_counter_0_irq(&data);
   80950:	e13ffa04 	addi	r4,fp,-24
   80954:	00806140 	call	80614 <init_counter_0_irq>
	init_counter_1_irq(&data);
   80958:	e13ffa04 	addi	r4,fp,-24
   8095c:	00807780 	call	80778 <init_counter_1_irq>
    init_switch_irq(&data);
   80960:	e13ffa04 	addi	r4,fp,-24
   80964:	0080c240 	call	80c24 <init_switch_irq>
	printf("elevator is ready to use\n");
   80968:	01000274 	movhi	r4,9
   8096c:	2134ab04 	addi	r4,r4,-11604
   80970:	0080d980 	call	80d98 <puts>
   80974:	00000006 	br	80978 <main+0x58>



	while(1){
		IOWR(LED_RED_O_BASE, 0, data.instruction);
   80978:	e0fffd17 	ldw	r3,-12(fp)
   8097c:	00800434 	movhi	r2,16
   80980:	10840804 	addi	r2,r2,4128
   80984:	10c00035 	stwio	r3,0(r2)
		IOWR(SEVEN_SEGMENT_N_O_BASE, 0, disp_seven_seg(data.cur_flo));
   80988:	e0bffe17 	ldw	r2,-8(fp)
   8098c:	11003fcc 	andi	r4,r2,255
   80990:	00807c00 	call	807c0 <disp_seven_seg>
   80994:	10ffffcc 	andi	r3,r2,65535
   80998:	00800434 	movhi	r2,16
   8099c:	10841804 	addi	r2,r2,4192
   809a0:	10c00035 	stwio	r3,0(r2)

		if(data.betweenflo==0){
   809a4:	e0bfff17 	ldw	r2,-4(fp)
   809a8:	1004c03a 	cmpne	r2,r2,zero
   809ac:	103ff21e 	bne	r2,zero,80978 <main+0x58>
			if(data.drc==0){
   809b0:	e0bffc17 	ldw	r2,-16(fp)
   809b4:	1004c03a 	cmpne	r2,r2,zero
   809b8:	1000171e 	bne	r2,zero,80a18 <main+0xf8>
				if(data.door_open==0&&data.door_hold==0){
   809bc:	e0bffa17 	ldw	r2,-24(fp)
   809c0:	1004c03a 	cmpne	r2,r2,zero
   809c4:	103fec1e 	bne	r2,zero,80978 <main+0x58>
   809c8:	e0bffb17 	ldw	r2,-20(fp)
   809cc:	1004c03a 	cmpne	r2,r2,zero
   809d0:	103fe91e 	bne	r2,zero,80978 <main+0x58>
					if(data.instruction!=0){
   809d4:	e0bffd17 	ldw	r2,-12(fp)
   809d8:	1005003a 	cmpeq	r2,r2,zero
   809dc:	103fe61e 	bne	r2,zero,80978 <main+0x58>
						if((data.instruction>>data.cur_flo)==0){
   809e0:	e0fffd17 	ldw	r3,-12(fp)
   809e4:	e0bffe17 	ldw	r2,-8(fp)
   809e8:	1885d83a 	sra	r2,r3,r2
   809ec:	1004c03a 	cmpne	r2,r2,zero
   809f0:	1000031e 	bne	r2,zero,80a00 <main+0xe0>
							//printf("elevator start going down\n");
							data.drc=-1;
   809f4:	00bfffc4 	movi	r2,-1
   809f8:	e0bffc15 	stw	r2,-16(fp)
   809fc:	00000206 	br	80a08 <main+0xe8>
						}else{
							//printf("elevator start going up\n");
							data.drc=1;
   80a00:	00800044 	movi	r2,1
   80a04:	e0bffc15 	stw	r2,-16(fp)
						}
						data.betweenflo=1;
   80a08:	00800044 	movi	r2,1
   80a0c:	e0bfff15 	stw	r2,-4(fp)
						reset_counter_0();
   80a10:	00805500 	call	80550 <reset_counter_0>
   80a14:	003fd806 	br	80978 <main+0x58>

					}

				}
			}else{
				if (((data.instruction >> data.cur_flo) & 0x1) == 1) {
   80a18:	e0fffd17 	ldw	r3,-12(fp)
   80a1c:	e0bffe17 	ldw	r2,-8(fp)
   80a20:	1885d83a 	sra	r2,r3,r2
   80a24:	1080004c 	andi	r2,r2,1
   80a28:	10803fcc 	andi	r2,r2,255
   80a2c:	1005003a 	cmpeq	r2,r2,zero
   80a30:	10000f1e 	bne	r2,zero,80a70 <main+0x150>
					data.instruction = data.instruction & ~(0x1 << data.cur_flo);
   80a34:	e13ffd17 	ldw	r4,-12(fp)
   80a38:	e0fffe17 	ldw	r3,-8(fp)
   80a3c:	00800044 	movi	r2,1
   80a40:	10c4983a 	sll	r2,r2,r3
   80a44:	0084303a 	nor	r2,zero,r2
   80a48:	2084703a 	and	r2,r4,r2
   80a4c:	e0bffd15 	stw	r2,-12(fp)

					data.door_open = 1;
   80a50:	00800044 	movi	r2,1
   80a54:	e0bffa15 	stw	r2,-24(fp)
					printf("elevator at floor %d, door open\n",data.cur_flo);
   80a58:	e17ffe17 	ldw	r5,-8(fp)
   80a5c:	01000274 	movhi	r4,9
   80a60:	2134b204 	addi	r4,r4,-11576
   80a64:	0080c800 	call	80c80 <printf>
					reset_counter_1();
   80a68:	00806b40 	call	806b4 <reset_counter_1>
   80a6c:	003fc206 	br	80978 <main+0x58>
				} else {
					if(data.door_open==0 && data.door_hold==0){
   80a70:	e0bffa17 	ldw	r2,-24(fp)
   80a74:	1004c03a 	cmpne	r2,r2,zero
   80a78:	103fbf1e 	bne	r2,zero,80978 <main+0x58>
   80a7c:	e0bffb17 	ldw	r2,-20(fp)
   80a80:	1004c03a 	cmpne	r2,r2,zero
   80a84:	103fbc1e 	bne	r2,zero,80978 <main+0x58>
						if(data.drc==1){
   80a88:	e0bffc17 	ldw	r2,-16(fp)
   80a8c:	10800058 	cmpnei	r2,r2,1
   80a90:	1000261e 	bne	r2,zero,80b2c <main+0x20c>
							if(data.cur_flo<11){
   80a94:	e0bffe17 	ldw	r2,-8(fp)
   80a98:	108002c8 	cmpgei	r2,r2,11
   80a9c:	1000181e 	bne	r2,zero,80b00 <main+0x1e0>
								if((data.instruction>>data.cur_flo)!=0){
   80aa0:	e0fffd17 	ldw	r3,-12(fp)
   80aa4:	e0bffe17 	ldw	r2,-8(fp)
   80aa8:	1885d83a 	sra	r2,r3,r2
   80aac:	1005003a 	cmpeq	r2,r2,zero
   80ab0:	1000081e 	bne	r2,zero,80ad4 <main+0x1b4>
									printf("elevator at floor %d, keeps going up\n",data.cur_flo);
   80ab4:	e17ffe17 	ldw	r5,-8(fp)
   80ab8:	01000274 	movhi	r4,9
   80abc:	2134bb04 	addi	r4,r4,-11540
   80ac0:	0080c800 	call	80c80 <printf>
								    data.betweenflo=1;
   80ac4:	00800044 	movi	r2,1
   80ac8:	e0bfff15 	stw	r2,-4(fp)
								    reset_counter_0();
   80acc:	00805500 	call	80550 <reset_counter_0>
   80ad0:	003fa906 	br	80978 <main+0x58>
							    }else{
									if(data.instruction==0){
   80ad4:	e0bffd17 	ldw	r2,-12(fp)
   80ad8:	1004c03a 	cmpne	r2,r2,zero
   80adc:	1000021e 	bne	r2,zero,80ae8 <main+0x1c8>
										//printf("elevator at floor %d,elevator stopped\n",data.cur_flo);
									    data.drc=0;
   80ae0:	e03ffc15 	stw	zero,-16(fp)
   80ae4:	003fa406 	br	80978 <main+0x58>
								    }else{
										//printf("elevator at floor %d, and going down\n",data.cur_flo);
									    data.drc=-1;
   80ae8:	00bfffc4 	movi	r2,-1
   80aec:	e0bffc15 	stw	r2,-16(fp)
									    data.betweenflo=1;
   80af0:	00800044 	movi	r2,1
   80af4:	e0bfff15 	stw	r2,-4(fp)
									    reset_counter_0();
   80af8:	00805500 	call	80550 <reset_counter_0>
   80afc:	003f9e06 	br	80978 <main+0x58>
								         }
							        }
						       }else{
								   if(data.instruction==0){
   80b00:	e0bffd17 	ldw	r2,-12(fp)
   80b04:	1004c03a 	cmpne	r2,r2,zero
   80b08:	1000021e 	bne	r2,zero,80b14 <main+0x1f4>
									   //printf("elevator stopped at the top floor\n");
									   data.drc=0;
   80b0c:	e03ffc15 	stw	zero,-16(fp)
   80b10:	003f9906 	br	80978 <main+0x58>
									   }else{
										   //printf("elevator reach the top floor\n");
									       data.drc=-1;
   80b14:	00bfffc4 	movi	r2,-1
   80b18:	e0bffc15 	stw	r2,-16(fp)
									       data.betweenflo=1;
   80b1c:	00800044 	movi	r2,1
   80b20:	e0bfff15 	stw	r2,-4(fp)
									       reset_counter_0();}
   80b24:	00805500 	call	80550 <reset_counter_0>
   80b28:	003f9306 	br	80978 <main+0x58>
						        }
							}else{
								if (data.cur_flo > 0) {
   80b2c:	e0bffe17 	ldw	r2,-8(fp)
   80b30:	10800050 	cmplti	r2,r2,1
   80b34:	10001c1e 	bne	r2,zero,80ba8 <main+0x288>
									if ((data.instruction & ((~(0xFFF << data.cur_flo)) & 0xFFF)) != 0) {
   80b38:	e13ffd17 	ldw	r4,-12(fp)
   80b3c:	e0fffe17 	ldw	r3,-8(fp)
   80b40:	0083ffc4 	movi	r2,4095
   80b44:	10c4983a 	sll	r2,r2,r3
   80b48:	0084303a 	nor	r2,zero,r2
   80b4c:	2084703a 	and	r2,r4,r2
   80b50:	1083ffcc 	andi	r2,r2,4095
   80b54:	1005003a 	cmpeq	r2,r2,zero
   80b58:	1000081e 	bne	r2,zero,80b7c <main+0x25c>
								    printf("elevator at floor %d, keeps going down\n", data.cur_flo);
   80b5c:	e17ffe17 	ldw	r5,-8(fp)
   80b60:	01000274 	movhi	r4,9
   80b64:	2134c504 	addi	r4,r4,-11500
   80b68:	0080c800 	call	80c80 <printf>
								    data.betweenflo = 1;
   80b6c:	00800044 	movi	r2,1
   80b70:	e0bfff15 	stw	r2,-4(fp)
								    reset_counter_0();
   80b74:	00805500 	call	80550 <reset_counter_0>
   80b78:	003f7f06 	br	80978 <main+0x58>
									} else {
										if (data.instruction != 0) {
   80b7c:	e0bffd17 	ldw	r2,-12(fp)
   80b80:	1005003a 	cmpeq	r2,r2,zero
   80b84:	1000061e 	bne	r2,zero,80ba0 <main+0x280>
											//printf("elevator at floor %d, now goes up\n", data.cur_flo);
										    data.drc = 1;
   80b88:	00800044 	movi	r2,1
   80b8c:	e0bffc15 	stw	r2,-16(fp)
										    data.betweenflo = 1;
   80b90:	00800044 	movi	r2,1
   80b94:	e0bfff15 	stw	r2,-4(fp)
										    reset_counter_0();
   80b98:	00805500 	call	80550 <reset_counter_0>
   80b9c:	003f7606 	br	80978 <main+0x58>
											} else {
												//printf("elevator stopped\n");
		                                        data.drc = 0;}
   80ba0:	e03ffc15 	stw	zero,-16(fp)
   80ba4:	003f7406 	br	80978 <main+0x58>
											}
								} else {
								    if (data.instruction != 0) {
   80ba8:	e0bffd17 	ldw	r2,-12(fp)
   80bac:	1005003a 	cmpeq	r2,r2,zero
   80bb0:	1000061e 	bne	r2,zero,80bcc <main+0x2ac>
										//printf("elevator reach the bottom floor\n");
									    data.drc = 1;
   80bb4:	00800044 	movi	r2,1
   80bb8:	e0bffc15 	stw	r2,-16(fp)
									    data.betweenflo = 1;
   80bbc:	00800044 	movi	r2,1
   80bc0:	e0bfff15 	stw	r2,-4(fp)
									    reset_counter_0();
   80bc4:	00805500 	call	80550 <reset_counter_0>
   80bc8:	003f6b06 	br	80978 <main+0x58>
										} else {
											//printf("elevator stop at the bottom floor\n");
									        // no more request
									        data.drc = 0;}
   80bcc:	e03ffc15 	stw	zero,-16(fp)
			    }

		}


	}
   80bd0:	003f6906 	br	80978 <main+0x58>

00080bd4 <handle_switch_interrupts>:

#include "define.h"

extern volatile int instruction;

void handle_switch_interrupts(elevator *data){
   80bd4:	defffe04 	addi	sp,sp,-8
   80bd8:	df000115 	stw	fp,4(sp)
   80bdc:	df000104 	addi	fp,sp,4
   80be0:	e13fff15 	stw	r4,-4(fp)
	(*data).instruction=(*data).instruction | (IORD(SWITCH_I_BASE,3)& 0XFFF);
   80be4:	e0bfff17 	ldw	r2,-4(fp)
   80be8:	10c00317 	ldw	r3,12(r2)
   80bec:	00800434 	movhi	r2,16
   80bf0:	10840304 	addi	r2,r2,4108
   80bf4:	10800037 	ldwio	r2,0(r2)
   80bf8:	1083ffcc 	andi	r2,r2,4095
   80bfc:	1886b03a 	or	r3,r3,r2
   80c00:	e0bfff17 	ldw	r2,-4(fp)
   80c04:	10c00315 	stw	r3,12(r2)
	IOWR(SWITCH_I_BASE,3,0X0);
   80c08:	00800434 	movhi	r2,16
   80c0c:	10840304 	addi	r2,r2,4108
   80c10:	10000035 	stwio	zero,0(r2)
}
   80c14:	e037883a 	mov	sp,fp
   80c18:	df000017 	ldw	fp,0(sp)
   80c1c:	dec00104 	addi	sp,sp,4
   80c20:	f800283a 	ret

00080c24 <init_switch_irq>:

void init_switch_irq(elevator *data){
   80c24:	defffd04 	addi	sp,sp,-12
   80c28:	dfc00215 	stw	ra,8(sp)
   80c2c:	df000115 	stw	fp,4(sp)
   80c30:	df000104 	addi	fp,sp,4
   80c34:	e13fff15 	stw	r4,-4(fp)
	IOWR(SWITCH_I_BASE,2,0x18FFF);
   80c38:	00800434 	movhi	r2,16
   80c3c:	10840204 	addi	r2,r2,4104
   80c40:	00c000b4 	movhi	r3,2
   80c44:	18e3ffc4 	addi	r3,r3,-28673
   80c48:	10c00035 	stwio	r3,0(r2)
	IOWR(SWITCH_I_BASE,3,0x0);
   80c4c:	00800434 	movhi	r2,16
   80c50:	10840304 	addi	r2,r2,4108
   80c54:	10000035 	stwio	zero,0(r2)
	
	alt_irq_register(SWITCH_I_IRQ, (void*)data, (void*)handle_switch_interrupts);
   80c58:	01000104 	movi	r4,4
   80c5c:	e17fff17 	ldw	r5,-4(fp)
   80c60:	01800234 	movhi	r6,8
   80c64:	3182f504 	addi	r6,r6,3028
   80c68:	008a9b00 	call	8a9b0 <alt_irq_register>
}
   80c6c:	e037883a 	mov	sp,fp
   80c70:	dfc00117 	ldw	ra,4(sp)
   80c74:	df000017 	ldw	fp,0(sp)
   80c78:	dec00204 	addi	sp,sp,8
   80c7c:	f800283a 	ret

00080c80 <printf>:
   80c80:	defffb04 	addi	sp,sp,-20
   80c84:	dfc00115 	stw	ra,4(sp)
   80c88:	d9400215 	stw	r5,8(sp)
   80c8c:	d9800315 	stw	r6,12(sp)
   80c90:	d9c00415 	stw	r7,16(sp)
   80c94:	00800274 	movhi	r2,9
   80c98:	10bc2704 	addi	r2,r2,-3940
   80c9c:	10c00017 	ldw	r3,0(r2)
   80ca0:	200b883a 	mov	r5,r4
   80ca4:	d8800204 	addi	r2,sp,8
   80ca8:	19000217 	ldw	r4,8(r3)
   80cac:	100d883a 	mov	r6,r2
   80cb0:	d8800015 	stw	r2,0(sp)
   80cb4:	0082d3c0 	call	82d3c <__vfprintf_internal>
   80cb8:	dfc00117 	ldw	ra,4(sp)
   80cbc:	dec00504 	addi	sp,sp,20
   80cc0:	f800283a 	ret

00080cc4 <_printf_r>:
   80cc4:	defffc04 	addi	sp,sp,-16
   80cc8:	dfc00115 	stw	ra,4(sp)
   80ccc:	d9800215 	stw	r6,8(sp)
   80cd0:	d9c00315 	stw	r7,12(sp)
   80cd4:	280d883a 	mov	r6,r5
   80cd8:	21400217 	ldw	r5,8(r4)
   80cdc:	d8c00204 	addi	r3,sp,8
   80ce0:	180f883a 	mov	r7,r3
   80ce4:	d8c00015 	stw	r3,0(sp)
   80ce8:	0080e780 	call	80e78 <___vfprintf_internal_r>
   80cec:	dfc00117 	ldw	ra,4(sp)
   80cf0:	dec00404 	addi	sp,sp,16
   80cf4:	f800283a 	ret

00080cf8 <_puts_r>:
   80cf8:	defff604 	addi	sp,sp,-40
   80cfc:	dc400715 	stw	r17,28(sp)
   80d00:	2023883a 	mov	r17,r4
   80d04:	2809883a 	mov	r4,r5
   80d08:	dfc00915 	stw	ra,36(sp)
   80d0c:	dcc00815 	stw	r19,32(sp)
   80d10:	2827883a 	mov	r19,r5
   80d14:	0080dac0 	call	80dac <strlen>
   80d18:	89400217 	ldw	r5,8(r17)
   80d1c:	00c00274 	movhi	r3,9
   80d20:	18f4cf04 	addi	r3,r3,-11460
   80d24:	01c00044 	movi	r7,1
   80d28:	12000044 	addi	r8,r2,1
   80d2c:	d8c00515 	stw	r3,20(sp)
   80d30:	d9c00615 	stw	r7,24(sp)
   80d34:	d8c00304 	addi	r3,sp,12
   80d38:	01c00084 	movi	r7,2
   80d3c:	8809883a 	mov	r4,r17
   80d40:	d80d883a 	mov	r6,sp
   80d44:	d8c00015 	stw	r3,0(sp)
   80d48:	dcc00315 	stw	r19,12(sp)
   80d4c:	da000215 	stw	r8,8(sp)
   80d50:	d9c00115 	stw	r7,4(sp)
   80d54:	d8800415 	stw	r2,16(sp)
   80d58:	0084ff80 	call	84ff8 <__sfvwrite_r>
   80d5c:	00ffffc4 	movi	r3,-1
   80d60:	10000626 	beq	r2,zero,80d7c <_puts_r+0x84>
   80d64:	1805883a 	mov	r2,r3
   80d68:	dfc00917 	ldw	ra,36(sp)
   80d6c:	dcc00817 	ldw	r19,32(sp)
   80d70:	dc400717 	ldw	r17,28(sp)
   80d74:	dec00a04 	addi	sp,sp,40
   80d78:	f800283a 	ret
   80d7c:	00c00284 	movi	r3,10
   80d80:	1805883a 	mov	r2,r3
   80d84:	dfc00917 	ldw	ra,36(sp)
   80d88:	dcc00817 	ldw	r19,32(sp)
   80d8c:	dc400717 	ldw	r17,28(sp)
   80d90:	dec00a04 	addi	sp,sp,40
   80d94:	f800283a 	ret

00080d98 <puts>:
   80d98:	00800274 	movhi	r2,9
   80d9c:	10bc2704 	addi	r2,r2,-3940
   80da0:	200b883a 	mov	r5,r4
   80da4:	11000017 	ldw	r4,0(r2)
   80da8:	0080cf81 	jmpi	80cf8 <_puts_r>

00080dac <strlen>:
   80dac:	208000cc 	andi	r2,r4,3
   80db0:	2011883a 	mov	r8,r4
   80db4:	1000161e 	bne	r2,zero,80e10 <strlen+0x64>
   80db8:	20c00017 	ldw	r3,0(r4)
   80dbc:	017fbff4 	movhi	r5,65279
   80dc0:	297fbfc4 	addi	r5,r5,-257
   80dc4:	01e02074 	movhi	r7,32897
   80dc8:	39e02004 	addi	r7,r7,-32640
   80dcc:	1945883a 	add	r2,r3,r5
   80dd0:	11c4703a 	and	r2,r2,r7
   80dd4:	00c6303a 	nor	r3,zero,r3
   80dd8:	1886703a 	and	r3,r3,r2
   80ddc:	18000c1e 	bne	r3,zero,80e10 <strlen+0x64>
   80de0:	280d883a 	mov	r6,r5
   80de4:	380b883a 	mov	r5,r7
   80de8:	21000104 	addi	r4,r4,4
   80dec:	20800017 	ldw	r2,0(r4)
   80df0:	1187883a 	add	r3,r2,r6
   80df4:	1946703a 	and	r3,r3,r5
   80df8:	0084303a 	nor	r2,zero,r2
   80dfc:	10c4703a 	and	r2,r2,r3
   80e00:	103ff926 	beq	r2,zero,80de8 <strlen+0x3c>
   80e04:	20800007 	ldb	r2,0(r4)
   80e08:	10000326 	beq	r2,zero,80e18 <strlen+0x6c>
   80e0c:	21000044 	addi	r4,r4,1
   80e10:	20800007 	ldb	r2,0(r4)
   80e14:	103ffd1e 	bne	r2,zero,80e0c <strlen+0x60>
   80e18:	2205c83a 	sub	r2,r4,r8
   80e1c:	f800283a 	ret

00080e20 <__sprint_r>:
   80e20:	30800217 	ldw	r2,8(r6)
   80e24:	defffe04 	addi	sp,sp,-8
   80e28:	dc000015 	stw	r16,0(sp)
   80e2c:	dfc00115 	stw	ra,4(sp)
   80e30:	3021883a 	mov	r16,r6
   80e34:	0007883a 	mov	r3,zero
   80e38:	1000061e 	bne	r2,zero,80e54 <__sprint_r+0x34>
   80e3c:	1805883a 	mov	r2,r3
   80e40:	30000115 	stw	zero,4(r6)
   80e44:	dfc00117 	ldw	ra,4(sp)
   80e48:	dc000017 	ldw	r16,0(sp)
   80e4c:	dec00204 	addi	sp,sp,8
   80e50:	f800283a 	ret
   80e54:	0084ff80 	call	84ff8 <__sfvwrite_r>
   80e58:	1007883a 	mov	r3,r2
   80e5c:	1805883a 	mov	r2,r3
   80e60:	80000115 	stw	zero,4(r16)
   80e64:	80000215 	stw	zero,8(r16)
   80e68:	dfc00117 	ldw	ra,4(sp)
   80e6c:	dc000017 	ldw	r16,0(sp)
   80e70:	dec00204 	addi	sp,sp,8
   80e74:	f800283a 	ret

00080e78 <___vfprintf_internal_r>:
   80e78:	defea404 	addi	sp,sp,-1392
   80e7c:	dd815815 	stw	r22,1376(sp)
   80e80:	dc015215 	stw	r16,1352(sp)
   80e84:	d9c15115 	stw	r7,1348(sp)
   80e88:	dfc15b15 	stw	ra,1388(sp)
   80e8c:	df015a15 	stw	fp,1384(sp)
   80e90:	ddc15915 	stw	r23,1380(sp)
   80e94:	dd415715 	stw	r21,1372(sp)
   80e98:	dd015615 	stw	r20,1368(sp)
   80e9c:	dcc15515 	stw	r19,1364(sp)
   80ea0:	dc815415 	stw	r18,1360(sp)
   80ea4:	dc415315 	stw	r17,1356(sp)
   80ea8:	282d883a 	mov	r22,r5
   80eac:	3021883a 	mov	r16,r6
   80eb0:	d9014f15 	stw	r4,1340(sp)
   80eb4:	008561c0 	call	8561c <_localeconv_r>
   80eb8:	10800017 	ldw	r2,0(r2)
   80ebc:	d9c15117 	ldw	r7,1348(sp)
   80ec0:	d8814915 	stw	r2,1316(sp)
   80ec4:	d8814f17 	ldw	r2,1340(sp)
   80ec8:	10000226 	beq	r2,zero,80ed4 <___vfprintf_internal_r+0x5c>
   80ecc:	10800e17 	ldw	r2,56(r2)
   80ed0:	10020d26 	beq	r2,zero,81708 <___vfprintf_internal_r+0x890>
   80ed4:	b080030b 	ldhu	r2,12(r22)
   80ed8:	1080020c 	andi	r2,r2,8
   80edc:	10020e26 	beq	r2,zero,81718 <___vfprintf_internal_r+0x8a0>
   80ee0:	b0800417 	ldw	r2,16(r22)
   80ee4:	10020c26 	beq	r2,zero,81718 <___vfprintf_internal_r+0x8a0>
   80ee8:	b200030b 	ldhu	r8,12(r22)
   80eec:	00800284 	movi	r2,10
   80ef0:	40c0068c 	andi	r3,r8,26
   80ef4:	18802f1e 	bne	r3,r2,80fb4 <___vfprintf_internal_r+0x13c>
   80ef8:	b080038f 	ldh	r2,14(r22)
   80efc:	10002d16 	blt	r2,zero,80fb4 <___vfprintf_internal_r+0x13c>
   80f00:	b240038b 	ldhu	r9,14(r22)
   80f04:	b2800717 	ldw	r10,28(r22)
   80f08:	b2c00917 	ldw	r11,36(r22)
   80f0c:	d9014f17 	ldw	r4,1340(sp)
   80f10:	dc402904 	addi	r17,sp,164
   80f14:	d8804004 	addi	r2,sp,256
   80f18:	00c10004 	movi	r3,1024
   80f1c:	423fff4c 	andi	r8,r8,65533
   80f20:	800d883a 	mov	r6,r16
   80f24:	880b883a 	mov	r5,r17
   80f28:	da002c0d 	sth	r8,176(sp)
   80f2c:	da402c8d 	sth	r9,178(sp)
   80f30:	da803015 	stw	r10,192(sp)
   80f34:	dac03215 	stw	r11,200(sp)
   80f38:	d8802d15 	stw	r2,180(sp)
   80f3c:	d8c02e15 	stw	r3,184(sp)
   80f40:	d8802915 	stw	r2,164(sp)
   80f44:	d8c02b15 	stw	r3,172(sp)
   80f48:	d8002f15 	stw	zero,188(sp)
   80f4c:	0080e780 	call	80e78 <___vfprintf_internal_r>
   80f50:	d8814b15 	stw	r2,1324(sp)
   80f54:	10000416 	blt	r2,zero,80f68 <___vfprintf_internal_r+0xf0>
   80f58:	d9014f17 	ldw	r4,1340(sp)
   80f5c:	880b883a 	mov	r5,r17
   80f60:	00846940 	call	84694 <_fflush_r>
   80f64:	1002321e 	bne	r2,zero,81830 <___vfprintf_internal_r+0x9b8>
   80f68:	d8802c0b 	ldhu	r2,176(sp)
   80f6c:	1080100c 	andi	r2,r2,64
   80f70:	10000326 	beq	r2,zero,80f80 <___vfprintf_internal_r+0x108>
   80f74:	b080030b 	ldhu	r2,12(r22)
   80f78:	10801014 	ori	r2,r2,64
   80f7c:	b080030d 	sth	r2,12(r22)
   80f80:	d8814b17 	ldw	r2,1324(sp)
   80f84:	dfc15b17 	ldw	ra,1388(sp)
   80f88:	df015a17 	ldw	fp,1384(sp)
   80f8c:	ddc15917 	ldw	r23,1380(sp)
   80f90:	dd815817 	ldw	r22,1376(sp)
   80f94:	dd415717 	ldw	r21,1372(sp)
   80f98:	dd015617 	ldw	r20,1368(sp)
   80f9c:	dcc15517 	ldw	r19,1364(sp)
   80fa0:	dc815417 	ldw	r18,1360(sp)
   80fa4:	dc415317 	ldw	r17,1356(sp)
   80fa8:	dc015217 	ldw	r16,1352(sp)
   80fac:	dec15c04 	addi	sp,sp,1392
   80fb0:	f800283a 	ret
   80fb4:	0005883a 	mov	r2,zero
   80fb8:	0007883a 	mov	r3,zero
   80fbc:	dd401904 	addi	r21,sp,100
   80fc0:	d8814215 	stw	r2,1288(sp)
   80fc4:	802f883a 	mov	r23,r16
   80fc8:	d8c14315 	stw	r3,1292(sp)
   80fcc:	d8014b15 	stw	zero,1324(sp)
   80fd0:	d8014815 	stw	zero,1312(sp)
   80fd4:	d8014415 	stw	zero,1296(sp)
   80fd8:	d8014715 	stw	zero,1308(sp)
   80fdc:	dd400c15 	stw	r21,48(sp)
   80fe0:	d8000e15 	stw	zero,56(sp)
   80fe4:	d8000d15 	stw	zero,52(sp)
   80fe8:	b8800007 	ldb	r2,0(r23)
   80fec:	10001926 	beq	r2,zero,81054 <___vfprintf_internal_r+0x1dc>
   80ff0:	00c00944 	movi	r3,37
   80ff4:	10c01726 	beq	r2,r3,81054 <___vfprintf_internal_r+0x1dc>
   80ff8:	b821883a 	mov	r16,r23
   80ffc:	00000106 	br	81004 <___vfprintf_internal_r+0x18c>
   81000:	10c00326 	beq	r2,r3,81010 <___vfprintf_internal_r+0x198>
   81004:	84000044 	addi	r16,r16,1
   81008:	80800007 	ldb	r2,0(r16)
   8100c:	103ffc1e 	bne	r2,zero,81000 <___vfprintf_internal_r+0x188>
   81010:	85e7c83a 	sub	r19,r16,r23
   81014:	98000e26 	beq	r19,zero,81050 <___vfprintf_internal_r+0x1d8>
   81018:	dc800e17 	ldw	r18,56(sp)
   8101c:	dc400d17 	ldw	r17,52(sp)
   81020:	008001c4 	movi	r2,7
   81024:	94e5883a 	add	r18,r18,r19
   81028:	8c400044 	addi	r17,r17,1
   8102c:	adc00015 	stw	r23,0(r21)
   81030:	dc800e15 	stw	r18,56(sp)
   81034:	acc00115 	stw	r19,4(r21)
   81038:	dc400d15 	stw	r17,52(sp)
   8103c:	14428b16 	blt	r2,r17,81a6c <___vfprintf_internal_r+0xbf4>
   81040:	ad400204 	addi	r21,r21,8
   81044:	d9014b17 	ldw	r4,1324(sp)
   81048:	24c9883a 	add	r4,r4,r19
   8104c:	d9014b15 	stw	r4,1324(sp)
   81050:	802f883a 	mov	r23,r16
   81054:	b8800007 	ldb	r2,0(r23)
   81058:	10013c26 	beq	r2,zero,8154c <___vfprintf_internal_r+0x6d4>
   8105c:	bdc00044 	addi	r23,r23,1
   81060:	d8000405 	stb	zero,16(sp)
   81064:	b8c00007 	ldb	r3,0(r23)
   81068:	04ffffc4 	movi	r19,-1
   8106c:	d8014c15 	stw	zero,1328(sp)
   81070:	d8014a15 	stw	zero,1320(sp)
   81074:	d8c14d15 	stw	r3,1332(sp)
   81078:	bdc00044 	addi	r23,r23,1
   8107c:	d9414d17 	ldw	r5,1332(sp)
   81080:	00801604 	movi	r2,88
   81084:	28fff804 	addi	r3,r5,-32
   81088:	10c06036 	bltu	r2,r3,8120c <___vfprintf_internal_r+0x394>
   8108c:	18c5883a 	add	r2,r3,r3
   81090:	1085883a 	add	r2,r2,r2
   81094:	00c00234 	movhi	r3,8
   81098:	18c42a04 	addi	r3,r3,4264
   8109c:	10c5883a 	add	r2,r2,r3
   810a0:	11000017 	ldw	r4,0(r2)
   810a4:	2000683a 	jmp	r4
   810a8:	0008201c 	xori	zero,zero,8320
   810ac:	0008120c 	andi	zero,zero,8264
   810b0:	0008120c 	andi	zero,zero,8264
   810b4:	00082008 	cmpgei	zero,zero,8320
   810b8:	0008120c 	andi	zero,zero,8264
   810bc:	0008120c 	andi	zero,zero,8264
   810c0:	0008120c 	andi	zero,zero,8264
   810c4:	0008120c 	andi	zero,zero,8264
   810c8:	0008120c 	andi	zero,zero,8264
   810cc:	0008120c 	andi	zero,zero,8264
   810d0:	00081de8 	cmpgeui	zero,zero,8311
   810d4:	00081ff8 	rdprs	zero,zero,8319
   810d8:	0008120c 	andi	zero,zero,8264
   810dc:	00081e00 	call	81e0 <__alt_mem_sram_0-0x77e20>
   810e0:	000820a0 	cmpeqi	zero,zero,8322
   810e4:	0008120c 	andi	zero,zero,8264
   810e8:	0008208c 	andi	zero,zero,8322
   810ec:	00082048 	cmpgei	zero,zero,8321
   810f0:	00082048 	cmpgei	zero,zero,8321
   810f4:	00082048 	cmpgei	zero,zero,8321
   810f8:	00082048 	cmpgei	zero,zero,8321
   810fc:	00082048 	cmpgei	zero,zero,8321
   81100:	00082048 	cmpgei	zero,zero,8321
   81104:	00082048 	cmpgei	zero,zero,8321
   81108:	00082048 	cmpgei	zero,zero,8321
   8110c:	00082048 	cmpgei	zero,zero,8321
   81110:	0008120c 	andi	zero,zero,8264
   81114:	0008120c 	andi	zero,zero,8264
   81118:	0008120c 	andi	zero,zero,8264
   8111c:	0008120c 	andi	zero,zero,8264
   81120:	0008120c 	andi	zero,zero,8264
   81124:	0008120c 	andi	zero,zero,8264
   81128:	0008120c 	andi	zero,zero,8264
   8112c:	0008120c 	andi	zero,zero,8264
   81130:	0008120c 	andi	zero,zero,8264
   81134:	0008120c 	andi	zero,zero,8264
   81138:	00081864 	muli	zero,zero,8289
   8113c:	00081ed0 	cmplti	zero,zero,8315
   81140:	0008120c 	andi	zero,zero,8264
   81144:	00081ed0 	cmplti	zero,zero,8315
   81148:	0008120c 	andi	zero,zero,8264
   8114c:	0008120c 	andi	zero,zero,8264
   81150:	0008120c 	andi	zero,zero,8264
   81154:	0008120c 	andi	zero,zero,8264
   81158:	00082034 	movhi	zero,8320
   8115c:	0008120c 	andi	zero,zero,8264
   81160:	0008120c 	andi	zero,zero,8264
   81164:	00081918 	cmpnei	zero,zero,8292
   81168:	0008120c 	andi	zero,zero,8264
   8116c:	0008120c 	andi	zero,zero,8264
   81170:	0008120c 	andi	zero,zero,8264
   81174:	0008120c 	andi	zero,zero,8264
   81178:	0008120c 	andi	zero,zero,8264
   8117c:	00081964 	muli	zero,zero,8293
   81180:	0008120c 	andi	zero,zero,8264
   81184:	0008120c 	andi	zero,zero,8264
   81188:	00081f84 	movi	zero,8318
   8118c:	0008120c 	andi	zero,zero,8264
   81190:	0008120c 	andi	zero,zero,8264
   81194:	0008120c 	andi	zero,zero,8264
   81198:	0008120c 	andi	zero,zero,8264
   8119c:	0008120c 	andi	zero,zero,8264
   811a0:	0008120c 	andi	zero,zero,8264
   811a4:	0008120c 	andi	zero,zero,8264
   811a8:	0008120c 	andi	zero,zero,8264
   811ac:	0008120c 	andi	zero,zero,8264
   811b0:	0008120c 	andi	zero,zero,8264
   811b4:	00081f58 	cmpnei	zero,zero,8317
   811b8:	00081870 	cmpltui	zero,zero,8289
   811bc:	00081ed0 	cmplti	zero,zero,8315
   811c0:	00081ed0 	cmplti	zero,zero,8315
   811c4:	00081ed0 	cmplti	zero,zero,8315
   811c8:	00081ebc 	xorhi	zero,zero,8314
   811cc:	00081870 	cmpltui	zero,zero,8289
   811d0:	0008120c 	andi	zero,zero,8264
   811d4:	0008120c 	andi	zero,zero,8264
   811d8:	00081e44 	movi	zero,8313
   811dc:	0008120c 	andi	zero,zero,8264
   811e0:	00081e14 	movui	zero,8312
   811e4:	00081924 	muli	zero,zero,8292
   811e8:	00081e74 	movhi	zero,8313
   811ec:	00081e60 	cmpeqi	zero,zero,8313
   811f0:	0008120c 	andi	zero,zero,8264
   811f4:	00082108 	cmpgei	zero,zero,8324
   811f8:	0008120c 	andi	zero,zero,8264
   811fc:	00081970 	cmpltui	zero,zero,8293
   81200:	0008120c 	andi	zero,zero,8264
   81204:	0008120c 	andi	zero,zero,8264
   81208:	00081fe8 	cmpgeui	zero,zero,8319
   8120c:	d9014d17 	ldw	r4,1332(sp)
   81210:	2000ce26 	beq	r4,zero,8154c <___vfprintf_internal_r+0x6d4>
   81214:	01400044 	movi	r5,1
   81218:	d9800f04 	addi	r6,sp,60
   8121c:	d9c14015 	stw	r7,1280(sp)
   81220:	d9414515 	stw	r5,1300(sp)
   81224:	d9814115 	stw	r6,1284(sp)
   81228:	280f883a 	mov	r7,r5
   8122c:	d9000f05 	stb	r4,60(sp)
   81230:	d8000405 	stb	zero,16(sp)
   81234:	d8014615 	stw	zero,1304(sp)
   81238:	d8c14c17 	ldw	r3,1328(sp)
   8123c:	1880008c 	andi	r2,r3,2
   81240:	1005003a 	cmpeq	r2,r2,zero
   81244:	d8815015 	stw	r2,1344(sp)
   81248:	1000031e 	bne	r2,zero,81258 <___vfprintf_internal_r+0x3e0>
   8124c:	d9014517 	ldw	r4,1300(sp)
   81250:	21000084 	addi	r4,r4,2
   81254:	d9014515 	stw	r4,1300(sp)
   81258:	d9414c17 	ldw	r5,1328(sp)
   8125c:	2940210c 	andi	r5,r5,132
   81260:	d9414e15 	stw	r5,1336(sp)
   81264:	28002d1e 	bne	r5,zero,8131c <___vfprintf_internal_r+0x4a4>
   81268:	d9814a17 	ldw	r6,1320(sp)
   8126c:	d8814517 	ldw	r2,1300(sp)
   81270:	30a1c83a 	sub	r16,r6,r2
   81274:	0400290e 	bge	zero,r16,8131c <___vfprintf_internal_r+0x4a4>
   81278:	00800404 	movi	r2,16
   8127c:	14045e0e 	bge	r2,r16,823f8 <___vfprintf_internal_r+0x1580>
   81280:	dc800e17 	ldw	r18,56(sp)
   81284:	dc400d17 	ldw	r17,52(sp)
   81288:	1027883a 	mov	r19,r2
   8128c:	07000274 	movhi	fp,9
   81290:	e734eb84 	addi	fp,fp,-11346
   81294:	050001c4 	movi	r20,7
   81298:	00000306 	br	812a8 <___vfprintf_internal_r+0x430>
   8129c:	843ffc04 	addi	r16,r16,-16
   812a0:	ad400204 	addi	r21,r21,8
   812a4:	9c00130e 	bge	r19,r16,812f4 <___vfprintf_internal_r+0x47c>
   812a8:	94800404 	addi	r18,r18,16
   812ac:	8c400044 	addi	r17,r17,1
   812b0:	af000015 	stw	fp,0(r21)
   812b4:	acc00115 	stw	r19,4(r21)
   812b8:	dc800e15 	stw	r18,56(sp)
   812bc:	dc400d15 	stw	r17,52(sp)
   812c0:	a47ff60e 	bge	r20,r17,8129c <___vfprintf_internal_r+0x424>
   812c4:	d9014f17 	ldw	r4,1340(sp)
   812c8:	b00b883a 	mov	r5,r22
   812cc:	d9800c04 	addi	r6,sp,48
   812d0:	d9c15115 	stw	r7,1348(sp)
   812d4:	0080e200 	call	80e20 <__sprint_r>
   812d8:	d9c15117 	ldw	r7,1348(sp)
   812dc:	10009e1e 	bne	r2,zero,81558 <___vfprintf_internal_r+0x6e0>
   812e0:	843ffc04 	addi	r16,r16,-16
   812e4:	dc800e17 	ldw	r18,56(sp)
   812e8:	dc400d17 	ldw	r17,52(sp)
   812ec:	dd401904 	addi	r21,sp,100
   812f0:	9c3fed16 	blt	r19,r16,812a8 <___vfprintf_internal_r+0x430>
   812f4:	9425883a 	add	r18,r18,r16
   812f8:	8c400044 	addi	r17,r17,1
   812fc:	008001c4 	movi	r2,7
   81300:	af000015 	stw	fp,0(r21)
   81304:	ac000115 	stw	r16,4(r21)
   81308:	dc800e15 	stw	r18,56(sp)
   8130c:	dc400d15 	stw	r17,52(sp)
   81310:	1441f516 	blt	r2,r17,81ae8 <___vfprintf_internal_r+0xc70>
   81314:	ad400204 	addi	r21,r21,8
   81318:	00000206 	br	81324 <___vfprintf_internal_r+0x4ac>
   8131c:	dc800e17 	ldw	r18,56(sp)
   81320:	dc400d17 	ldw	r17,52(sp)
   81324:	d8800407 	ldb	r2,16(sp)
   81328:	10000b26 	beq	r2,zero,81358 <___vfprintf_internal_r+0x4e0>
   8132c:	00800044 	movi	r2,1
   81330:	94800044 	addi	r18,r18,1
   81334:	8c400044 	addi	r17,r17,1
   81338:	a8800115 	stw	r2,4(r21)
   8133c:	d8c00404 	addi	r3,sp,16
   81340:	008001c4 	movi	r2,7
   81344:	a8c00015 	stw	r3,0(r21)
   81348:	dc800e15 	stw	r18,56(sp)
   8134c:	dc400d15 	stw	r17,52(sp)
   81350:	1441da16 	blt	r2,r17,81abc <___vfprintf_internal_r+0xc44>
   81354:	ad400204 	addi	r21,r21,8
   81358:	d9015017 	ldw	r4,1344(sp)
   8135c:	20000b1e 	bne	r4,zero,8138c <___vfprintf_internal_r+0x514>
   81360:	d8800444 	addi	r2,sp,17
   81364:	94800084 	addi	r18,r18,2
   81368:	8c400044 	addi	r17,r17,1
   8136c:	a8800015 	stw	r2,0(r21)
   81370:	00c00084 	movi	r3,2
   81374:	008001c4 	movi	r2,7
   81378:	a8c00115 	stw	r3,4(r21)
   8137c:	dc800e15 	stw	r18,56(sp)
   81380:	dc400d15 	stw	r17,52(sp)
   81384:	1441c216 	blt	r2,r17,81a90 <___vfprintf_internal_r+0xc18>
   81388:	ad400204 	addi	r21,r21,8
   8138c:	d9414e17 	ldw	r5,1336(sp)
   81390:	00802004 	movi	r2,128
   81394:	2880b126 	beq	r5,r2,8165c <___vfprintf_internal_r+0x7e4>
   81398:	d8c14617 	ldw	r3,1304(sp)
   8139c:	19e1c83a 	sub	r16,r3,r7
   813a0:	0400260e 	bge	zero,r16,8143c <___vfprintf_internal_r+0x5c4>
   813a4:	00800404 	movi	r2,16
   813a8:	1403cf0e 	bge	r2,r16,822e8 <___vfprintf_internal_r+0x1470>
   813ac:	1027883a 	mov	r19,r2
   813b0:	07000274 	movhi	fp,9
   813b4:	e734e784 	addi	fp,fp,-11362
   813b8:	050001c4 	movi	r20,7
   813bc:	00000306 	br	813cc <___vfprintf_internal_r+0x554>
   813c0:	843ffc04 	addi	r16,r16,-16
   813c4:	ad400204 	addi	r21,r21,8
   813c8:	9c00130e 	bge	r19,r16,81418 <___vfprintf_internal_r+0x5a0>
   813cc:	94800404 	addi	r18,r18,16
   813d0:	8c400044 	addi	r17,r17,1
   813d4:	af000015 	stw	fp,0(r21)
   813d8:	acc00115 	stw	r19,4(r21)
   813dc:	dc800e15 	stw	r18,56(sp)
   813e0:	dc400d15 	stw	r17,52(sp)
   813e4:	a47ff60e 	bge	r20,r17,813c0 <___vfprintf_internal_r+0x548>
   813e8:	d9014f17 	ldw	r4,1340(sp)
   813ec:	b00b883a 	mov	r5,r22
   813f0:	d9800c04 	addi	r6,sp,48
   813f4:	d9c15115 	stw	r7,1348(sp)
   813f8:	0080e200 	call	80e20 <__sprint_r>
   813fc:	d9c15117 	ldw	r7,1348(sp)
   81400:	1000551e 	bne	r2,zero,81558 <___vfprintf_internal_r+0x6e0>
   81404:	843ffc04 	addi	r16,r16,-16
   81408:	dc800e17 	ldw	r18,56(sp)
   8140c:	dc400d17 	ldw	r17,52(sp)
   81410:	dd401904 	addi	r21,sp,100
   81414:	9c3fed16 	blt	r19,r16,813cc <___vfprintf_internal_r+0x554>
   81418:	9425883a 	add	r18,r18,r16
   8141c:	8c400044 	addi	r17,r17,1
   81420:	008001c4 	movi	r2,7
   81424:	af000015 	stw	fp,0(r21)
   81428:	ac000115 	stw	r16,4(r21)
   8142c:	dc800e15 	stw	r18,56(sp)
   81430:	dc400d15 	stw	r17,52(sp)
   81434:	14418216 	blt	r2,r17,81a40 <___vfprintf_internal_r+0xbc8>
   81438:	ad400204 	addi	r21,r21,8
   8143c:	d9014c17 	ldw	r4,1328(sp)
   81440:	2080400c 	andi	r2,r4,256
   81444:	10004a1e 	bne	r2,zero,81570 <___vfprintf_internal_r+0x6f8>
   81448:	d9414117 	ldw	r5,1284(sp)
   8144c:	91e5883a 	add	r18,r18,r7
   81450:	8c400044 	addi	r17,r17,1
   81454:	008001c4 	movi	r2,7
   81458:	a9400015 	stw	r5,0(r21)
   8145c:	a9c00115 	stw	r7,4(r21)
   81460:	dc800e15 	stw	r18,56(sp)
   81464:	dc400d15 	stw	r17,52(sp)
   81468:	14416716 	blt	r2,r17,81a08 <___vfprintf_internal_r+0xb90>
   8146c:	a8c00204 	addi	r3,r21,8
   81470:	d9814c17 	ldw	r6,1328(sp)
   81474:	3080010c 	andi	r2,r6,4
   81478:	10002826 	beq	r2,zero,8151c <___vfprintf_internal_r+0x6a4>
   8147c:	d8814a17 	ldw	r2,1320(sp)
   81480:	d9014517 	ldw	r4,1300(sp)
   81484:	1121c83a 	sub	r16,r2,r4
   81488:	0400240e 	bge	zero,r16,8151c <___vfprintf_internal_r+0x6a4>
   8148c:	00800404 	movi	r2,16
   81490:	1404550e 	bge	r2,r16,825e8 <___vfprintf_internal_r+0x1770>
   81494:	dc400d17 	ldw	r17,52(sp)
   81498:	1027883a 	mov	r19,r2
   8149c:	07000274 	movhi	fp,9
   814a0:	e734eb84 	addi	fp,fp,-11346
   814a4:	050001c4 	movi	r20,7
   814a8:	00000306 	br	814b8 <___vfprintf_internal_r+0x640>
   814ac:	843ffc04 	addi	r16,r16,-16
   814b0:	18c00204 	addi	r3,r3,8
   814b4:	9c00110e 	bge	r19,r16,814fc <___vfprintf_internal_r+0x684>
   814b8:	94800404 	addi	r18,r18,16
   814bc:	8c400044 	addi	r17,r17,1
   814c0:	1f000015 	stw	fp,0(r3)
   814c4:	1cc00115 	stw	r19,4(r3)
   814c8:	dc800e15 	stw	r18,56(sp)
   814cc:	dc400d15 	stw	r17,52(sp)
   814d0:	a47ff60e 	bge	r20,r17,814ac <___vfprintf_internal_r+0x634>
   814d4:	d9014f17 	ldw	r4,1340(sp)
   814d8:	b00b883a 	mov	r5,r22
   814dc:	d9800c04 	addi	r6,sp,48
   814e0:	0080e200 	call	80e20 <__sprint_r>
   814e4:	10001c1e 	bne	r2,zero,81558 <___vfprintf_internal_r+0x6e0>
   814e8:	843ffc04 	addi	r16,r16,-16
   814ec:	dc800e17 	ldw	r18,56(sp)
   814f0:	dc400d17 	ldw	r17,52(sp)
   814f4:	d8c01904 	addi	r3,sp,100
   814f8:	9c3fef16 	blt	r19,r16,814b8 <___vfprintf_internal_r+0x640>
   814fc:	9425883a 	add	r18,r18,r16
   81500:	8c400044 	addi	r17,r17,1
   81504:	008001c4 	movi	r2,7
   81508:	1f000015 	stw	fp,0(r3)
   8150c:	1c000115 	stw	r16,4(r3)
   81510:	dc800e15 	stw	r18,56(sp)
   81514:	dc400d15 	stw	r17,52(sp)
   81518:	1440cb16 	blt	r2,r17,81848 <___vfprintf_internal_r+0x9d0>
   8151c:	d8814a17 	ldw	r2,1320(sp)
   81520:	d9414517 	ldw	r5,1300(sp)
   81524:	1140010e 	bge	r2,r5,8152c <___vfprintf_internal_r+0x6b4>
   81528:	2805883a 	mov	r2,r5
   8152c:	d9814b17 	ldw	r6,1324(sp)
   81530:	308d883a 	add	r6,r6,r2
   81534:	d9814b15 	stw	r6,1324(sp)
   81538:	90013b1e 	bne	r18,zero,81a28 <___vfprintf_internal_r+0xbb0>
   8153c:	d9c14017 	ldw	r7,1280(sp)
   81540:	dd401904 	addi	r21,sp,100
   81544:	d8000d15 	stw	zero,52(sp)
   81548:	003ea706 	br	80fe8 <___vfprintf_internal_r+0x170>
   8154c:	d8800e17 	ldw	r2,56(sp)
   81550:	1005451e 	bne	r2,zero,82a68 <___vfprintf_internal_r+0x1bf0>
   81554:	d8000d15 	stw	zero,52(sp)
   81558:	b080030b 	ldhu	r2,12(r22)
   8155c:	1080100c 	andi	r2,r2,64
   81560:	103e8726 	beq	r2,zero,80f80 <___vfprintf_internal_r+0x108>
   81564:	00bfffc4 	movi	r2,-1
   81568:	d8814b15 	stw	r2,1324(sp)
   8156c:	003e8406 	br	80f80 <___vfprintf_internal_r+0x108>
   81570:	d9814d17 	ldw	r6,1332(sp)
   81574:	00801944 	movi	r2,101
   81578:	11806e16 	blt	r2,r6,81734 <___vfprintf_internal_r+0x8bc>
   8157c:	d9414717 	ldw	r5,1308(sp)
   81580:	00c00044 	movi	r3,1
   81584:	1943490e 	bge	r3,r5,822ac <___vfprintf_internal_r+0x1434>
   81588:	d8814117 	ldw	r2,1284(sp)
   8158c:	94800044 	addi	r18,r18,1
   81590:	8c400044 	addi	r17,r17,1
   81594:	a8800015 	stw	r2,0(r21)
   81598:	008001c4 	movi	r2,7
   8159c:	a8c00115 	stw	r3,4(r21)
   815a0:	dc800e15 	stw	r18,56(sp)
   815a4:	dc400d15 	stw	r17,52(sp)
   815a8:	1441ca16 	blt	r2,r17,81cd4 <___vfprintf_internal_r+0xe5c>
   815ac:	a8c00204 	addi	r3,r21,8
   815b0:	d9014917 	ldw	r4,1316(sp)
   815b4:	00800044 	movi	r2,1
   815b8:	94800044 	addi	r18,r18,1
   815bc:	8c400044 	addi	r17,r17,1
   815c0:	18800115 	stw	r2,4(r3)
   815c4:	008001c4 	movi	r2,7
   815c8:	19000015 	stw	r4,0(r3)
   815cc:	dc800e15 	stw	r18,56(sp)
   815d0:	dc400d15 	stw	r17,52(sp)
   815d4:	1441b616 	blt	r2,r17,81cb0 <___vfprintf_internal_r+0xe38>
   815d8:	1cc00204 	addi	r19,r3,8
   815dc:	d9014217 	ldw	r4,1288(sp)
   815e0:	d9414317 	ldw	r5,1292(sp)
   815e4:	000d883a 	mov	r6,zero
   815e8:	000f883a 	mov	r7,zero
   815ec:	008992c0 	call	8992c <__nedf2>
   815f0:	10017426 	beq	r2,zero,81bc4 <___vfprintf_internal_r+0xd4c>
   815f4:	d9414717 	ldw	r5,1308(sp)
   815f8:	d9814117 	ldw	r6,1284(sp)
   815fc:	8c400044 	addi	r17,r17,1
   81600:	2c85883a 	add	r2,r5,r18
   81604:	14bfffc4 	addi	r18,r2,-1
   81608:	28bfffc4 	addi	r2,r5,-1
   8160c:	30c00044 	addi	r3,r6,1
   81610:	98800115 	stw	r2,4(r19)
   81614:	008001c4 	movi	r2,7
   81618:	98c00015 	stw	r3,0(r19)
   8161c:	dc800e15 	stw	r18,56(sp)
   81620:	dc400d15 	stw	r17,52(sp)
   81624:	14418e16 	blt	r2,r17,81c60 <___vfprintf_internal_r+0xde8>
   81628:	9cc00204 	addi	r19,r19,8
   8162c:	d9414817 	ldw	r5,1312(sp)
   81630:	d8800804 	addi	r2,sp,32
   81634:	8c400044 	addi	r17,r17,1
   81638:	9165883a 	add	r18,r18,r5
   8163c:	98800015 	stw	r2,0(r19)
   81640:	008001c4 	movi	r2,7
   81644:	99400115 	stw	r5,4(r19)
   81648:	dc800e15 	stw	r18,56(sp)
   8164c:	dc400d15 	stw	r17,52(sp)
   81650:	1440ed16 	blt	r2,r17,81a08 <___vfprintf_internal_r+0xb90>
   81654:	98c00204 	addi	r3,r19,8
   81658:	003f8506 	br	81470 <___vfprintf_internal_r+0x5f8>
   8165c:	d9814a17 	ldw	r6,1320(sp)
   81660:	d8814517 	ldw	r2,1300(sp)
   81664:	30a1c83a 	sub	r16,r6,r2
   81668:	043f4b0e 	bge	zero,r16,81398 <___vfprintf_internal_r+0x520>
   8166c:	00800404 	movi	r2,16
   81670:	14043a0e 	bge	r2,r16,8275c <___vfprintf_internal_r+0x18e4>
   81674:	1027883a 	mov	r19,r2
   81678:	07000274 	movhi	fp,9
   8167c:	e734e784 	addi	fp,fp,-11362
   81680:	050001c4 	movi	r20,7
   81684:	00000306 	br	81694 <___vfprintf_internal_r+0x81c>
   81688:	843ffc04 	addi	r16,r16,-16
   8168c:	ad400204 	addi	r21,r21,8
   81690:	9c00130e 	bge	r19,r16,816e0 <___vfprintf_internal_r+0x868>
   81694:	94800404 	addi	r18,r18,16
   81698:	8c400044 	addi	r17,r17,1
   8169c:	af000015 	stw	fp,0(r21)
   816a0:	acc00115 	stw	r19,4(r21)
   816a4:	dc800e15 	stw	r18,56(sp)
   816a8:	dc400d15 	stw	r17,52(sp)
   816ac:	a47ff60e 	bge	r20,r17,81688 <___vfprintf_internal_r+0x810>
   816b0:	d9014f17 	ldw	r4,1340(sp)
   816b4:	b00b883a 	mov	r5,r22
   816b8:	d9800c04 	addi	r6,sp,48
   816bc:	d9c15115 	stw	r7,1348(sp)
   816c0:	0080e200 	call	80e20 <__sprint_r>
   816c4:	d9c15117 	ldw	r7,1348(sp)
   816c8:	103fa31e 	bne	r2,zero,81558 <___vfprintf_internal_r+0x6e0>
   816cc:	843ffc04 	addi	r16,r16,-16
   816d0:	dc800e17 	ldw	r18,56(sp)
   816d4:	dc400d17 	ldw	r17,52(sp)
   816d8:	dd401904 	addi	r21,sp,100
   816dc:	9c3fed16 	blt	r19,r16,81694 <___vfprintf_internal_r+0x81c>
   816e0:	9425883a 	add	r18,r18,r16
   816e4:	8c400044 	addi	r17,r17,1
   816e8:	008001c4 	movi	r2,7
   816ec:	af000015 	stw	fp,0(r21)
   816f0:	ac000115 	stw	r16,4(r21)
   816f4:	dc800e15 	stw	r18,56(sp)
   816f8:	dc400d15 	stw	r17,52(sp)
   816fc:	14416116 	blt	r2,r17,81c84 <___vfprintf_internal_r+0xe0c>
   81700:	ad400204 	addi	r21,r21,8
   81704:	003f2406 	br	81398 <___vfprintf_internal_r+0x520>
   81708:	d9014f17 	ldw	r4,1340(sp)
   8170c:	008492c0 	call	8492c <__sinit>
   81710:	d9c15117 	ldw	r7,1348(sp)
   81714:	003def06 	br	80ed4 <___vfprintf_internal_r+0x5c>
   81718:	d9014f17 	ldw	r4,1340(sp)
   8171c:	b00b883a 	mov	r5,r22
   81720:	d9c15115 	stw	r7,1348(sp)
   81724:	0082d600 	call	82d60 <__swsetup_r>
   81728:	d9c15117 	ldw	r7,1348(sp)
   8172c:	103dee26 	beq	r2,zero,80ee8 <___vfprintf_internal_r+0x70>
   81730:	003f8c06 	br	81564 <___vfprintf_internal_r+0x6ec>
   81734:	d9014217 	ldw	r4,1288(sp)
   81738:	d9414317 	ldw	r5,1292(sp)
   8173c:	000d883a 	mov	r6,zero
   81740:	000f883a 	mov	r7,zero
   81744:	00898a40 	call	898a4 <__eqdf2>
   81748:	1000f21e 	bne	r2,zero,81b14 <___vfprintf_internal_r+0xc9c>
   8174c:	00800274 	movhi	r2,9
   81750:	10b4e704 	addi	r2,r2,-11364
   81754:	94800044 	addi	r18,r18,1
   81758:	8c400044 	addi	r17,r17,1
   8175c:	a8800015 	stw	r2,0(r21)
   81760:	00c00044 	movi	r3,1
   81764:	008001c4 	movi	r2,7
   81768:	a8c00115 	stw	r3,4(r21)
   8176c:	dc800e15 	stw	r18,56(sp)
   81770:	dc400d15 	stw	r17,52(sp)
   81774:	14430016 	blt	r2,r17,82378 <___vfprintf_internal_r+0x1500>
   81778:	a8c00204 	addi	r3,r21,8
   8177c:	d8800517 	ldw	r2,20(sp)
   81780:	d9014717 	ldw	r4,1308(sp)
   81784:	11015c0e 	bge	r2,r4,81cf8 <___vfprintf_internal_r+0xe80>
   81788:	dc400d17 	ldw	r17,52(sp)
   8178c:	d9814917 	ldw	r6,1316(sp)
   81790:	00800044 	movi	r2,1
   81794:	94800044 	addi	r18,r18,1
   81798:	8c400044 	addi	r17,r17,1
   8179c:	18800115 	stw	r2,4(r3)
   817a0:	008001c4 	movi	r2,7
   817a4:	19800015 	stw	r6,0(r3)
   817a8:	dc800e15 	stw	r18,56(sp)
   817ac:	dc400d15 	stw	r17,52(sp)
   817b0:	14431616 	blt	r2,r17,8240c <___vfprintf_internal_r+0x1594>
   817b4:	18c00204 	addi	r3,r3,8
   817b8:	d8814717 	ldw	r2,1308(sp)
   817bc:	143fffc4 	addi	r16,r2,-1
   817c0:	043f2b0e 	bge	zero,r16,81470 <___vfprintf_internal_r+0x5f8>
   817c4:	00800404 	movi	r2,16
   817c8:	1402a80e 	bge	r2,r16,8226c <___vfprintf_internal_r+0x13f4>
   817cc:	dc400d17 	ldw	r17,52(sp)
   817d0:	1027883a 	mov	r19,r2
   817d4:	07000274 	movhi	fp,9
   817d8:	e734e784 	addi	fp,fp,-11362
   817dc:	050001c4 	movi	r20,7
   817e0:	00000306 	br	817f0 <___vfprintf_internal_r+0x978>
   817e4:	18c00204 	addi	r3,r3,8
   817e8:	843ffc04 	addi	r16,r16,-16
   817ec:	9c02a20e 	bge	r19,r16,82278 <___vfprintf_internal_r+0x1400>
   817f0:	94800404 	addi	r18,r18,16
   817f4:	8c400044 	addi	r17,r17,1
   817f8:	1f000015 	stw	fp,0(r3)
   817fc:	1cc00115 	stw	r19,4(r3)
   81800:	dc800e15 	stw	r18,56(sp)
   81804:	dc400d15 	stw	r17,52(sp)
   81808:	a47ff60e 	bge	r20,r17,817e4 <___vfprintf_internal_r+0x96c>
   8180c:	d9014f17 	ldw	r4,1340(sp)
   81810:	b00b883a 	mov	r5,r22
   81814:	d9800c04 	addi	r6,sp,48
   81818:	0080e200 	call	80e20 <__sprint_r>
   8181c:	103f4e1e 	bne	r2,zero,81558 <___vfprintf_internal_r+0x6e0>
   81820:	dc800e17 	ldw	r18,56(sp)
   81824:	dc400d17 	ldw	r17,52(sp)
   81828:	d8c01904 	addi	r3,sp,100
   8182c:	003fee06 	br	817e8 <___vfprintf_internal_r+0x970>
   81830:	d8802c0b 	ldhu	r2,176(sp)
   81834:	00ffffc4 	movi	r3,-1
   81838:	d8c14b15 	stw	r3,1324(sp)
   8183c:	1080100c 	andi	r2,r2,64
   81840:	103dcc1e 	bne	r2,zero,80f74 <___vfprintf_internal_r+0xfc>
   81844:	003dce06 	br	80f80 <___vfprintf_internal_r+0x108>
   81848:	d9014f17 	ldw	r4,1340(sp)
   8184c:	b00b883a 	mov	r5,r22
   81850:	d9800c04 	addi	r6,sp,48
   81854:	0080e200 	call	80e20 <__sprint_r>
   81858:	103f3f1e 	bne	r2,zero,81558 <___vfprintf_internal_r+0x6e0>
   8185c:	dc800e17 	ldw	r18,56(sp)
   81860:	003f2e06 	br	8151c <___vfprintf_internal_r+0x6a4>
   81864:	d9414c17 	ldw	r5,1328(sp)
   81868:	29400414 	ori	r5,r5,16
   8186c:	d9414c15 	stw	r5,1328(sp)
   81870:	d9814c17 	ldw	r6,1328(sp)
   81874:	3080080c 	andi	r2,r6,32
   81878:	10014f1e 	bne	r2,zero,81db8 <___vfprintf_internal_r+0xf40>
   8187c:	d8c14c17 	ldw	r3,1328(sp)
   81880:	1880040c 	andi	r2,r3,16
   81884:	1002f01e 	bne	r2,zero,82448 <___vfprintf_internal_r+0x15d0>
   81888:	d9014c17 	ldw	r4,1328(sp)
   8188c:	2080100c 	andi	r2,r4,64
   81890:	1002ed26 	beq	r2,zero,82448 <___vfprintf_internal_r+0x15d0>
   81894:	3880000f 	ldh	r2,0(r7)
   81898:	39c00104 	addi	r7,r7,4
   8189c:	d9c14015 	stw	r7,1280(sp)
   818a0:	1023d7fa 	srai	r17,r2,31
   818a4:	1021883a 	mov	r16,r2
   818a8:	88037816 	blt	r17,zero,8268c <___vfprintf_internal_r+0x1814>
   818ac:	01000044 	movi	r4,1
   818b0:	98000416 	blt	r19,zero,818c4 <___vfprintf_internal_r+0xa4c>
   818b4:	d8c14c17 	ldw	r3,1328(sp)
   818b8:	00bfdfc4 	movi	r2,-129
   818bc:	1886703a 	and	r3,r3,r2
   818c0:	d8c14c15 	stw	r3,1328(sp)
   818c4:	8444b03a 	or	r2,r16,r17
   818c8:	10022c1e 	bne	r2,zero,8217c <___vfprintf_internal_r+0x1304>
   818cc:	98022b1e 	bne	r19,zero,8217c <___vfprintf_internal_r+0x1304>
   818d0:	20803fcc 	andi	r2,r4,255
   818d4:	1002a126 	beq	r2,zero,8235c <___vfprintf_internal_r+0x14e4>
   818d8:	d8c01904 	addi	r3,sp,100
   818dc:	dd000f04 	addi	r20,sp,60
   818e0:	d8c14115 	stw	r3,1284(sp)
   818e4:	d8c14117 	ldw	r3,1284(sp)
   818e8:	dcc14515 	stw	r19,1300(sp)
   818ec:	a0c5c83a 	sub	r2,r20,r3
   818f0:	11c00a04 	addi	r7,r2,40
   818f4:	99c0010e 	bge	r19,r7,818fc <___vfprintf_internal_r+0xa84>
   818f8:	d9c14515 	stw	r7,1300(sp)
   818fc:	dcc14615 	stw	r19,1304(sp)
   81900:	d8800407 	ldb	r2,16(sp)
   81904:	103e4c26 	beq	r2,zero,81238 <___vfprintf_internal_r+0x3c0>
   81908:	d8814517 	ldw	r2,1300(sp)
   8190c:	10800044 	addi	r2,r2,1
   81910:	d8814515 	stw	r2,1300(sp)
   81914:	003e4806 	br	81238 <___vfprintf_internal_r+0x3c0>
   81918:	d9814c17 	ldw	r6,1328(sp)
   8191c:	31800414 	ori	r6,r6,16
   81920:	d9814c15 	stw	r6,1328(sp)
   81924:	d8c14c17 	ldw	r3,1328(sp)
   81928:	1880080c 	andi	r2,r3,32
   8192c:	1001271e 	bne	r2,zero,81dcc <___vfprintf_internal_r+0xf54>
   81930:	d9414c17 	ldw	r5,1328(sp)
   81934:	2880040c 	andi	r2,r5,16
   81938:	1002bc1e 	bne	r2,zero,8242c <___vfprintf_internal_r+0x15b4>
   8193c:	d9814c17 	ldw	r6,1328(sp)
   81940:	3080100c 	andi	r2,r6,64
   81944:	1002b926 	beq	r2,zero,8242c <___vfprintf_internal_r+0x15b4>
   81948:	3c00000b 	ldhu	r16,0(r7)
   8194c:	0009883a 	mov	r4,zero
   81950:	39c00104 	addi	r7,r7,4
   81954:	0023883a 	mov	r17,zero
   81958:	d9c14015 	stw	r7,1280(sp)
   8195c:	d8000405 	stb	zero,16(sp)
   81960:	003fd306 	br	818b0 <___vfprintf_internal_r+0xa38>
   81964:	d9014c17 	ldw	r4,1328(sp)
   81968:	21000414 	ori	r4,r4,16
   8196c:	d9014c15 	stw	r4,1328(sp)
   81970:	d9414c17 	ldw	r5,1328(sp)
   81974:	2880080c 	andi	r2,r5,32
   81978:	1001081e 	bne	r2,zero,81d9c <___vfprintf_internal_r+0xf24>
   8197c:	d8c14c17 	ldw	r3,1328(sp)
   81980:	1880040c 	andi	r2,r3,16
   81984:	1002b61e 	bne	r2,zero,82460 <___vfprintf_internal_r+0x15e8>
   81988:	d9014c17 	ldw	r4,1328(sp)
   8198c:	2080100c 	andi	r2,r4,64
   81990:	1002b326 	beq	r2,zero,82460 <___vfprintf_internal_r+0x15e8>
   81994:	3c00000b 	ldhu	r16,0(r7)
   81998:	01000044 	movi	r4,1
   8199c:	39c00104 	addi	r7,r7,4
   819a0:	0023883a 	mov	r17,zero
   819a4:	d9c14015 	stw	r7,1280(sp)
   819a8:	d8000405 	stb	zero,16(sp)
   819ac:	003fc006 	br	818b0 <___vfprintf_internal_r+0xa38>
   819b0:	d9014f17 	ldw	r4,1340(sp)
   819b4:	b00b883a 	mov	r5,r22
   819b8:	d9800c04 	addi	r6,sp,48
   819bc:	0080e200 	call	80e20 <__sprint_r>
   819c0:	103ee51e 	bne	r2,zero,81558 <___vfprintf_internal_r+0x6e0>
   819c4:	dc800e17 	ldw	r18,56(sp)
   819c8:	d8c01904 	addi	r3,sp,100
   819cc:	d9814c17 	ldw	r6,1328(sp)
   819d0:	3080004c 	andi	r2,r6,1
   819d4:	1005003a 	cmpeq	r2,r2,zero
   819d8:	103ea51e 	bne	r2,zero,81470 <___vfprintf_internal_r+0x5f8>
   819dc:	00800044 	movi	r2,1
   819e0:	dc400d17 	ldw	r17,52(sp)
   819e4:	18800115 	stw	r2,4(r3)
   819e8:	d8814917 	ldw	r2,1316(sp)
   819ec:	94800044 	addi	r18,r18,1
   819f0:	8c400044 	addi	r17,r17,1
   819f4:	18800015 	stw	r2,0(r3)
   819f8:	008001c4 	movi	r2,7
   819fc:	dc800e15 	stw	r18,56(sp)
   81a00:	dc400d15 	stw	r17,52(sp)
   81a04:	1442240e 	bge	r2,r17,82298 <___vfprintf_internal_r+0x1420>
   81a08:	d9014f17 	ldw	r4,1340(sp)
   81a0c:	b00b883a 	mov	r5,r22
   81a10:	d9800c04 	addi	r6,sp,48
   81a14:	0080e200 	call	80e20 <__sprint_r>
   81a18:	103ecf1e 	bne	r2,zero,81558 <___vfprintf_internal_r+0x6e0>
   81a1c:	dc800e17 	ldw	r18,56(sp)
   81a20:	d8c01904 	addi	r3,sp,100
   81a24:	003e9206 	br	81470 <___vfprintf_internal_r+0x5f8>
   81a28:	d9014f17 	ldw	r4,1340(sp)
   81a2c:	b00b883a 	mov	r5,r22
   81a30:	d9800c04 	addi	r6,sp,48
   81a34:	0080e200 	call	80e20 <__sprint_r>
   81a38:	103ec026 	beq	r2,zero,8153c <___vfprintf_internal_r+0x6c4>
   81a3c:	003ec606 	br	81558 <___vfprintf_internal_r+0x6e0>
   81a40:	d9014f17 	ldw	r4,1340(sp)
   81a44:	b00b883a 	mov	r5,r22
   81a48:	d9800c04 	addi	r6,sp,48
   81a4c:	d9c15115 	stw	r7,1348(sp)
   81a50:	0080e200 	call	80e20 <__sprint_r>
   81a54:	d9c15117 	ldw	r7,1348(sp)
   81a58:	103ebf1e 	bne	r2,zero,81558 <___vfprintf_internal_r+0x6e0>
   81a5c:	dc800e17 	ldw	r18,56(sp)
   81a60:	dc400d17 	ldw	r17,52(sp)
   81a64:	dd401904 	addi	r21,sp,100
   81a68:	003e7406 	br	8143c <___vfprintf_internal_r+0x5c4>
   81a6c:	d9014f17 	ldw	r4,1340(sp)
   81a70:	b00b883a 	mov	r5,r22
   81a74:	d9800c04 	addi	r6,sp,48
   81a78:	d9c15115 	stw	r7,1348(sp)
   81a7c:	0080e200 	call	80e20 <__sprint_r>
   81a80:	d9c15117 	ldw	r7,1348(sp)
   81a84:	103eb41e 	bne	r2,zero,81558 <___vfprintf_internal_r+0x6e0>
   81a88:	dd401904 	addi	r21,sp,100
   81a8c:	003d6d06 	br	81044 <___vfprintf_internal_r+0x1cc>
   81a90:	d9014f17 	ldw	r4,1340(sp)
   81a94:	b00b883a 	mov	r5,r22
   81a98:	d9800c04 	addi	r6,sp,48
   81a9c:	d9c15115 	stw	r7,1348(sp)
   81aa0:	0080e200 	call	80e20 <__sprint_r>
   81aa4:	d9c15117 	ldw	r7,1348(sp)
   81aa8:	103eab1e 	bne	r2,zero,81558 <___vfprintf_internal_r+0x6e0>
   81aac:	dc800e17 	ldw	r18,56(sp)
   81ab0:	dc400d17 	ldw	r17,52(sp)
   81ab4:	dd401904 	addi	r21,sp,100
   81ab8:	003e3406 	br	8138c <___vfprintf_internal_r+0x514>
   81abc:	d9014f17 	ldw	r4,1340(sp)
   81ac0:	b00b883a 	mov	r5,r22
   81ac4:	d9800c04 	addi	r6,sp,48
   81ac8:	d9c15115 	stw	r7,1348(sp)
   81acc:	0080e200 	call	80e20 <__sprint_r>
   81ad0:	d9c15117 	ldw	r7,1348(sp)
   81ad4:	103ea01e 	bne	r2,zero,81558 <___vfprintf_internal_r+0x6e0>
   81ad8:	dc800e17 	ldw	r18,56(sp)
   81adc:	dc400d17 	ldw	r17,52(sp)
   81ae0:	dd401904 	addi	r21,sp,100
   81ae4:	003e1c06 	br	81358 <___vfprintf_internal_r+0x4e0>
   81ae8:	d9014f17 	ldw	r4,1340(sp)
   81aec:	b00b883a 	mov	r5,r22
   81af0:	d9800c04 	addi	r6,sp,48
   81af4:	d9c15115 	stw	r7,1348(sp)
   81af8:	0080e200 	call	80e20 <__sprint_r>
   81afc:	d9c15117 	ldw	r7,1348(sp)
   81b00:	103e951e 	bne	r2,zero,81558 <___vfprintf_internal_r+0x6e0>
   81b04:	dc800e17 	ldw	r18,56(sp)
   81b08:	dc400d17 	ldw	r17,52(sp)
   81b0c:	dd401904 	addi	r21,sp,100
   81b10:	003e0406 	br	81324 <___vfprintf_internal_r+0x4ac>
   81b14:	d9000517 	ldw	r4,20(sp)
   81b18:	0102580e 	bge	zero,r4,8247c <___vfprintf_internal_r+0x1604>
   81b1c:	d9814717 	ldw	r6,1308(sp)
   81b20:	21807a16 	blt	r4,r6,81d0c <___vfprintf_internal_r+0xe94>
   81b24:	d8814117 	ldw	r2,1284(sp)
   81b28:	91a5883a 	add	r18,r18,r6
   81b2c:	8c400044 	addi	r17,r17,1
   81b30:	a8800015 	stw	r2,0(r21)
   81b34:	008001c4 	movi	r2,7
   81b38:	a9800115 	stw	r6,4(r21)
   81b3c:	dc800e15 	stw	r18,56(sp)
   81b40:	dc400d15 	stw	r17,52(sp)
   81b44:	1442fc16 	blt	r2,r17,82738 <___vfprintf_internal_r+0x18c0>
   81b48:	a8c00204 	addi	r3,r21,8
   81b4c:	d9414717 	ldw	r5,1308(sp)
   81b50:	2161c83a 	sub	r16,r4,r5
   81b54:	043f9d0e 	bge	zero,r16,819cc <___vfprintf_internal_r+0xb54>
   81b58:	00800404 	movi	r2,16
   81b5c:	1402190e 	bge	r2,r16,823c4 <___vfprintf_internal_r+0x154c>
   81b60:	dc400d17 	ldw	r17,52(sp)
   81b64:	1027883a 	mov	r19,r2
   81b68:	07000274 	movhi	fp,9
   81b6c:	e734e784 	addi	fp,fp,-11362
   81b70:	050001c4 	movi	r20,7
   81b74:	00000306 	br	81b84 <___vfprintf_internal_r+0xd0c>
   81b78:	18c00204 	addi	r3,r3,8
   81b7c:	843ffc04 	addi	r16,r16,-16
   81b80:	9c02130e 	bge	r19,r16,823d0 <___vfprintf_internal_r+0x1558>
   81b84:	94800404 	addi	r18,r18,16
   81b88:	8c400044 	addi	r17,r17,1
   81b8c:	1f000015 	stw	fp,0(r3)
   81b90:	1cc00115 	stw	r19,4(r3)
   81b94:	dc800e15 	stw	r18,56(sp)
   81b98:	dc400d15 	stw	r17,52(sp)
   81b9c:	a47ff60e 	bge	r20,r17,81b78 <___vfprintf_internal_r+0xd00>
   81ba0:	d9014f17 	ldw	r4,1340(sp)
   81ba4:	b00b883a 	mov	r5,r22
   81ba8:	d9800c04 	addi	r6,sp,48
   81bac:	0080e200 	call	80e20 <__sprint_r>
   81bb0:	103e691e 	bne	r2,zero,81558 <___vfprintf_internal_r+0x6e0>
   81bb4:	dc800e17 	ldw	r18,56(sp)
   81bb8:	dc400d17 	ldw	r17,52(sp)
   81bbc:	d8c01904 	addi	r3,sp,100
   81bc0:	003fee06 	br	81b7c <___vfprintf_internal_r+0xd04>
   81bc4:	d8814717 	ldw	r2,1308(sp)
   81bc8:	143fffc4 	addi	r16,r2,-1
   81bcc:	043e970e 	bge	zero,r16,8162c <___vfprintf_internal_r+0x7b4>
   81bd0:	00800404 	movi	r2,16
   81bd4:	1400180e 	bge	r2,r16,81c38 <___vfprintf_internal_r+0xdc0>
   81bd8:	1029883a 	mov	r20,r2
   81bdc:	07000274 	movhi	fp,9
   81be0:	e734e784 	addi	fp,fp,-11362
   81be4:	054001c4 	movi	r21,7
   81be8:	00000306 	br	81bf8 <___vfprintf_internal_r+0xd80>
   81bec:	9cc00204 	addi	r19,r19,8
   81bf0:	843ffc04 	addi	r16,r16,-16
   81bf4:	a400120e 	bge	r20,r16,81c40 <___vfprintf_internal_r+0xdc8>
   81bf8:	94800404 	addi	r18,r18,16
   81bfc:	8c400044 	addi	r17,r17,1
   81c00:	9f000015 	stw	fp,0(r19)
   81c04:	9d000115 	stw	r20,4(r19)
   81c08:	dc800e15 	stw	r18,56(sp)
   81c0c:	dc400d15 	stw	r17,52(sp)
   81c10:	ac7ff60e 	bge	r21,r17,81bec <___vfprintf_internal_r+0xd74>
   81c14:	d9014f17 	ldw	r4,1340(sp)
   81c18:	b00b883a 	mov	r5,r22
   81c1c:	d9800c04 	addi	r6,sp,48
   81c20:	0080e200 	call	80e20 <__sprint_r>
   81c24:	103e4c1e 	bne	r2,zero,81558 <___vfprintf_internal_r+0x6e0>
   81c28:	dc800e17 	ldw	r18,56(sp)
   81c2c:	dc400d17 	ldw	r17,52(sp)
   81c30:	dcc01904 	addi	r19,sp,100
   81c34:	003fee06 	br	81bf0 <___vfprintf_internal_r+0xd78>
   81c38:	07000274 	movhi	fp,9
   81c3c:	e734e784 	addi	fp,fp,-11362
   81c40:	9425883a 	add	r18,r18,r16
   81c44:	8c400044 	addi	r17,r17,1
   81c48:	008001c4 	movi	r2,7
   81c4c:	9f000015 	stw	fp,0(r19)
   81c50:	9c000115 	stw	r16,4(r19)
   81c54:	dc800e15 	stw	r18,56(sp)
   81c58:	dc400d15 	stw	r17,52(sp)
   81c5c:	147e720e 	bge	r2,r17,81628 <___vfprintf_internal_r+0x7b0>
   81c60:	d9014f17 	ldw	r4,1340(sp)
   81c64:	b00b883a 	mov	r5,r22
   81c68:	d9800c04 	addi	r6,sp,48
   81c6c:	0080e200 	call	80e20 <__sprint_r>
   81c70:	103e391e 	bne	r2,zero,81558 <___vfprintf_internal_r+0x6e0>
   81c74:	dc800e17 	ldw	r18,56(sp)
   81c78:	dc400d17 	ldw	r17,52(sp)
   81c7c:	dcc01904 	addi	r19,sp,100
   81c80:	003e6a06 	br	8162c <___vfprintf_internal_r+0x7b4>
   81c84:	d9014f17 	ldw	r4,1340(sp)
   81c88:	b00b883a 	mov	r5,r22
   81c8c:	d9800c04 	addi	r6,sp,48
   81c90:	d9c15115 	stw	r7,1348(sp)
   81c94:	0080e200 	call	80e20 <__sprint_r>
   81c98:	d9c15117 	ldw	r7,1348(sp)
   81c9c:	103e2e1e 	bne	r2,zero,81558 <___vfprintf_internal_r+0x6e0>
   81ca0:	dc800e17 	ldw	r18,56(sp)
   81ca4:	dc400d17 	ldw	r17,52(sp)
   81ca8:	dd401904 	addi	r21,sp,100
   81cac:	003dba06 	br	81398 <___vfprintf_internal_r+0x520>
   81cb0:	d9014f17 	ldw	r4,1340(sp)
   81cb4:	b00b883a 	mov	r5,r22
   81cb8:	d9800c04 	addi	r6,sp,48
   81cbc:	0080e200 	call	80e20 <__sprint_r>
   81cc0:	103e251e 	bne	r2,zero,81558 <___vfprintf_internal_r+0x6e0>
   81cc4:	dc800e17 	ldw	r18,56(sp)
   81cc8:	dc400d17 	ldw	r17,52(sp)
   81ccc:	dcc01904 	addi	r19,sp,100
   81cd0:	003e4206 	br	815dc <___vfprintf_internal_r+0x764>
   81cd4:	d9014f17 	ldw	r4,1340(sp)
   81cd8:	b00b883a 	mov	r5,r22
   81cdc:	d9800c04 	addi	r6,sp,48
   81ce0:	0080e200 	call	80e20 <__sprint_r>
   81ce4:	103e1c1e 	bne	r2,zero,81558 <___vfprintf_internal_r+0x6e0>
   81ce8:	dc800e17 	ldw	r18,56(sp)
   81cec:	dc400d17 	ldw	r17,52(sp)
   81cf0:	d8c01904 	addi	r3,sp,100
   81cf4:	003e2e06 	br	815b0 <___vfprintf_internal_r+0x738>
   81cf8:	d9414c17 	ldw	r5,1328(sp)
   81cfc:	2880004c 	andi	r2,r5,1
   81d00:	1005003a 	cmpeq	r2,r2,zero
   81d04:	103dda1e 	bne	r2,zero,81470 <___vfprintf_internal_r+0x5f8>
   81d08:	003e9f06 	br	81788 <___vfprintf_internal_r+0x910>
   81d0c:	d8c14117 	ldw	r3,1284(sp)
   81d10:	9125883a 	add	r18,r18,r4
   81d14:	8c400044 	addi	r17,r17,1
   81d18:	008001c4 	movi	r2,7
   81d1c:	a8c00015 	stw	r3,0(r21)
   81d20:	a9000115 	stw	r4,4(r21)
   81d24:	dc800e15 	stw	r18,56(sp)
   81d28:	dc400d15 	stw	r17,52(sp)
   81d2c:	14426c16 	blt	r2,r17,826e0 <___vfprintf_internal_r+0x1868>
   81d30:	a8c00204 	addi	r3,r21,8
   81d34:	d9414917 	ldw	r5,1316(sp)
   81d38:	00800044 	movi	r2,1
   81d3c:	94800044 	addi	r18,r18,1
   81d40:	8c400044 	addi	r17,r17,1
   81d44:	18800115 	stw	r2,4(r3)
   81d48:	008001c4 	movi	r2,7
   81d4c:	19400015 	stw	r5,0(r3)
   81d50:	dc800e15 	stw	r18,56(sp)
   81d54:	dc400d15 	stw	r17,52(sp)
   81d58:	2021883a 	mov	r16,r4
   81d5c:	14425616 	blt	r2,r17,826b8 <___vfprintf_internal_r+0x1840>
   81d60:	19400204 	addi	r5,r3,8
   81d64:	d9814717 	ldw	r6,1308(sp)
   81d68:	8c400044 	addi	r17,r17,1
   81d6c:	dc400d15 	stw	r17,52(sp)
   81d70:	3107c83a 	sub	r3,r6,r4
   81d74:	d9014117 	ldw	r4,1284(sp)
   81d78:	90e5883a 	add	r18,r18,r3
   81d7c:	28c00115 	stw	r3,4(r5)
   81d80:	8105883a 	add	r2,r16,r4
   81d84:	28800015 	stw	r2,0(r5)
   81d88:	008001c4 	movi	r2,7
   81d8c:	dc800e15 	stw	r18,56(sp)
   81d90:	147f1d16 	blt	r2,r17,81a08 <___vfprintf_internal_r+0xb90>
   81d94:	28c00204 	addi	r3,r5,8
   81d98:	003db506 	br	81470 <___vfprintf_internal_r+0x5f8>
   81d9c:	3c000017 	ldw	r16,0(r7)
   81da0:	3c400117 	ldw	r17,4(r7)
   81da4:	39800204 	addi	r6,r7,8
   81da8:	01000044 	movi	r4,1
   81dac:	d9814015 	stw	r6,1280(sp)
   81db0:	d8000405 	stb	zero,16(sp)
   81db4:	003ebe06 	br	818b0 <___vfprintf_internal_r+0xa38>
   81db8:	3c000017 	ldw	r16,0(r7)
   81dbc:	3c400117 	ldw	r17,4(r7)
   81dc0:	38800204 	addi	r2,r7,8
   81dc4:	d8814015 	stw	r2,1280(sp)
   81dc8:	003eb706 	br	818a8 <___vfprintf_internal_r+0xa30>
   81dcc:	3c000017 	ldw	r16,0(r7)
   81dd0:	3c400117 	ldw	r17,4(r7)
   81dd4:	39000204 	addi	r4,r7,8
   81dd8:	d9014015 	stw	r4,1280(sp)
   81ddc:	0009883a 	mov	r4,zero
   81de0:	d8000405 	stb	zero,16(sp)
   81de4:	003eb206 	br	818b0 <___vfprintf_internal_r+0xa38>
   81de8:	38c00017 	ldw	r3,0(r7)
   81dec:	39c00104 	addi	r7,r7,4
   81df0:	d8c14a15 	stw	r3,1320(sp)
   81df4:	1800d70e 	bge	r3,zero,82154 <___vfprintf_internal_r+0x12dc>
   81df8:	00c7c83a 	sub	r3,zero,r3
   81dfc:	d8c14a15 	stw	r3,1320(sp)
   81e00:	d9014c17 	ldw	r4,1328(sp)
   81e04:	b8c00007 	ldb	r3,0(r23)
   81e08:	21000114 	ori	r4,r4,4
   81e0c:	d9014c15 	stw	r4,1328(sp)
   81e10:	003c9806 	br	81074 <___vfprintf_internal_r+0x1fc>
   81e14:	d9814c17 	ldw	r6,1328(sp)
   81e18:	3080080c 	andi	r2,r6,32
   81e1c:	1001f626 	beq	r2,zero,825f8 <___vfprintf_internal_r+0x1780>
   81e20:	d9014b17 	ldw	r4,1324(sp)
   81e24:	38800017 	ldw	r2,0(r7)
   81e28:	39c00104 	addi	r7,r7,4
   81e2c:	d9c14015 	stw	r7,1280(sp)
   81e30:	2007d7fa 	srai	r3,r4,31
   81e34:	d9c14017 	ldw	r7,1280(sp)
   81e38:	11000015 	stw	r4,0(r2)
   81e3c:	10c00115 	stw	r3,4(r2)
   81e40:	003c6906 	br	80fe8 <___vfprintf_internal_r+0x170>
   81e44:	b8c00007 	ldb	r3,0(r23)
   81e48:	00801b04 	movi	r2,108
   81e4c:	18825526 	beq	r3,r2,827a4 <___vfprintf_internal_r+0x192c>
   81e50:	d9414c17 	ldw	r5,1328(sp)
   81e54:	29400414 	ori	r5,r5,16
   81e58:	d9414c15 	stw	r5,1328(sp)
   81e5c:	003c8506 	br	81074 <___vfprintf_internal_r+0x1fc>
   81e60:	d9814c17 	ldw	r6,1328(sp)
   81e64:	b8c00007 	ldb	r3,0(r23)
   81e68:	31800814 	ori	r6,r6,32
   81e6c:	d9814c15 	stw	r6,1328(sp)
   81e70:	003c8006 	br	81074 <___vfprintf_internal_r+0x1fc>
   81e74:	d8814c17 	ldw	r2,1328(sp)
   81e78:	3c000017 	ldw	r16,0(r7)
   81e7c:	00c01e04 	movi	r3,120
   81e80:	10800094 	ori	r2,r2,2
   81e84:	d8814c15 	stw	r2,1328(sp)
   81e88:	39c00104 	addi	r7,r7,4
   81e8c:	01400274 	movhi	r5,9
   81e90:	2974d004 	addi	r5,r5,-11456
   81e94:	00800c04 	movi	r2,48
   81e98:	0023883a 	mov	r17,zero
   81e9c:	01000084 	movi	r4,2
   81ea0:	d9c14015 	stw	r7,1280(sp)
   81ea4:	d8c14d15 	stw	r3,1332(sp)
   81ea8:	d9414415 	stw	r5,1296(sp)
   81eac:	d8800445 	stb	r2,17(sp)
   81eb0:	d8c00485 	stb	r3,18(sp)
   81eb4:	d8000405 	stb	zero,16(sp)
   81eb8:	003e7d06 	br	818b0 <___vfprintf_internal_r+0xa38>
   81ebc:	d8814c17 	ldw	r2,1328(sp)
   81ec0:	b8c00007 	ldb	r3,0(r23)
   81ec4:	10801014 	ori	r2,r2,64
   81ec8:	d8814c15 	stw	r2,1328(sp)
   81ecc:	003c6906 	br	81074 <___vfprintf_internal_r+0x1fc>
   81ed0:	d9414c17 	ldw	r5,1328(sp)
   81ed4:	2880020c 	andi	r2,r5,8
   81ed8:	1001e526 	beq	r2,zero,82670 <___vfprintf_internal_r+0x17f8>
   81edc:	39800017 	ldw	r6,0(r7)
   81ee0:	38800204 	addi	r2,r7,8
   81ee4:	d8814015 	stw	r2,1280(sp)
   81ee8:	d9814215 	stw	r6,1288(sp)
   81eec:	39c00117 	ldw	r7,4(r7)
   81ef0:	d9c14315 	stw	r7,1292(sp)
   81ef4:	d9014217 	ldw	r4,1288(sp)
   81ef8:	d9414317 	ldw	r5,1292(sp)
   81efc:	00879280 	call	87928 <__isinfd>
   81f00:	10021d26 	beq	r2,zero,82778 <___vfprintf_internal_r+0x1900>
   81f04:	d9014217 	ldw	r4,1288(sp)
   81f08:	d9414317 	ldw	r5,1292(sp)
   81f0c:	000d883a 	mov	r6,zero
   81f10:	000f883a 	mov	r7,zero
   81f14:	0089ac40 	call	89ac4 <__ltdf2>
   81f18:	1002d016 	blt	r2,zero,82a5c <___vfprintf_internal_r+0x1be4>
   81f1c:	d9414d17 	ldw	r5,1332(sp)
   81f20:	008011c4 	movi	r2,71
   81f24:	11421016 	blt	r2,r5,82768 <___vfprintf_internal_r+0x18f0>
   81f28:	01800274 	movhi	r6,9
   81f2c:	31b4d504 	addi	r6,r6,-11436
   81f30:	d9814115 	stw	r6,1284(sp)
   81f34:	d9014c17 	ldw	r4,1328(sp)
   81f38:	00c000c4 	movi	r3,3
   81f3c:	00bfdfc4 	movi	r2,-129
   81f40:	2088703a 	and	r4,r4,r2
   81f44:	180f883a 	mov	r7,r3
   81f48:	d8c14515 	stw	r3,1300(sp)
   81f4c:	d9014c15 	stw	r4,1328(sp)
   81f50:	d8014615 	stw	zero,1304(sp)
   81f54:	003e6a06 	br	81900 <___vfprintf_internal_r+0xa88>
   81f58:	38800017 	ldw	r2,0(r7)
   81f5c:	00c00044 	movi	r3,1
   81f60:	39c00104 	addi	r7,r7,4
   81f64:	d9c14015 	stw	r7,1280(sp)
   81f68:	d9000f04 	addi	r4,sp,60
   81f6c:	180f883a 	mov	r7,r3
   81f70:	d8c14515 	stw	r3,1300(sp)
   81f74:	d9014115 	stw	r4,1284(sp)
   81f78:	d8800f05 	stb	r2,60(sp)
   81f7c:	d8000405 	stb	zero,16(sp)
   81f80:	003cac06 	br	81234 <___vfprintf_internal_r+0x3bc>
   81f84:	01400274 	movhi	r5,9
   81f88:	2974db04 	addi	r5,r5,-11412
   81f8c:	d9414415 	stw	r5,1296(sp)
   81f90:	d9814c17 	ldw	r6,1328(sp)
   81f94:	3080080c 	andi	r2,r6,32
   81f98:	1000ff26 	beq	r2,zero,82398 <___vfprintf_internal_r+0x1520>
   81f9c:	3c000017 	ldw	r16,0(r7)
   81fa0:	3c400117 	ldw	r17,4(r7)
   81fa4:	38800204 	addi	r2,r7,8
   81fa8:	d8814015 	stw	r2,1280(sp)
   81fac:	d9414c17 	ldw	r5,1328(sp)
   81fb0:	2880004c 	andi	r2,r5,1
   81fb4:	1005003a 	cmpeq	r2,r2,zero
   81fb8:	1000b91e 	bne	r2,zero,822a0 <___vfprintf_internal_r+0x1428>
   81fbc:	8444b03a 	or	r2,r16,r17
   81fc0:	1000b726 	beq	r2,zero,822a0 <___vfprintf_internal_r+0x1428>
   81fc4:	d9814d17 	ldw	r6,1332(sp)
   81fc8:	29400094 	ori	r5,r5,2
   81fcc:	00800c04 	movi	r2,48
   81fd0:	01000084 	movi	r4,2
   81fd4:	d9414c15 	stw	r5,1328(sp)
   81fd8:	d8800445 	stb	r2,17(sp)
   81fdc:	d9800485 	stb	r6,18(sp)
   81fe0:	d8000405 	stb	zero,16(sp)
   81fe4:	003e3206 	br	818b0 <___vfprintf_internal_r+0xa38>
   81fe8:	01800274 	movhi	r6,9
   81fec:	31b4d004 	addi	r6,r6,-11456
   81ff0:	d9814415 	stw	r6,1296(sp)
   81ff4:	003fe606 	br	81f90 <___vfprintf_internal_r+0x1118>
   81ff8:	00800ac4 	movi	r2,43
   81ffc:	d8800405 	stb	r2,16(sp)
   82000:	b8c00007 	ldb	r3,0(r23)
   82004:	003c1b06 	br	81074 <___vfprintf_internal_r+0x1fc>
   82008:	d8814c17 	ldw	r2,1328(sp)
   8200c:	b8c00007 	ldb	r3,0(r23)
   82010:	10800054 	ori	r2,r2,1
   82014:	d8814c15 	stw	r2,1328(sp)
   82018:	003c1606 	br	81074 <___vfprintf_internal_r+0x1fc>
   8201c:	d8800407 	ldb	r2,16(sp)
   82020:	10004c1e 	bne	r2,zero,82154 <___vfprintf_internal_r+0x12dc>
   82024:	00800804 	movi	r2,32
   82028:	d8800405 	stb	r2,16(sp)
   8202c:	b8c00007 	ldb	r3,0(r23)
   82030:	003c1006 	br	81074 <___vfprintf_internal_r+0x1fc>
   82034:	d9814c17 	ldw	r6,1328(sp)
   82038:	b8c00007 	ldb	r3,0(r23)
   8203c:	31800214 	ori	r6,r6,8
   82040:	d9814c15 	stw	r6,1328(sp)
   82044:	003c0b06 	br	81074 <___vfprintf_internal_r+0x1fc>
   82048:	0009883a 	mov	r4,zero
   8204c:	04000244 	movi	r16,9
   82050:	01400284 	movi	r5,10
   82054:	d9c15115 	stw	r7,1348(sp)
   82058:	0089ffc0 	call	89ffc <__mulsi3>
   8205c:	b9000007 	ldb	r4,0(r23)
   82060:	d8c14d17 	ldw	r3,1332(sp)
   82064:	bdc00044 	addi	r23,r23,1
   82068:	d9014d15 	stw	r4,1332(sp)
   8206c:	d9414d17 	ldw	r5,1332(sp)
   82070:	1885883a 	add	r2,r3,r2
   82074:	113ff404 	addi	r4,r2,-48
   82078:	28bff404 	addi	r2,r5,-48
   8207c:	d9c15117 	ldw	r7,1348(sp)
   82080:	80bff32e 	bgeu	r16,r2,82050 <___vfprintf_internal_r+0x11d8>
   82084:	d9014a15 	stw	r4,1320(sp)
   82088:	003bfc06 	br	8107c <___vfprintf_internal_r+0x204>
   8208c:	d8814c17 	ldw	r2,1328(sp)
   82090:	b8c00007 	ldb	r3,0(r23)
   82094:	10802014 	ori	r2,r2,128
   82098:	d8814c15 	stw	r2,1328(sp)
   8209c:	003bf506 	br	81074 <___vfprintf_internal_r+0x1fc>
   820a0:	b8c00007 	ldb	r3,0(r23)
   820a4:	00800a84 	movi	r2,42
   820a8:	bdc00044 	addi	r23,r23,1
   820ac:	18831826 	beq	r3,r2,82d10 <___vfprintf_internal_r+0x1e98>
   820b0:	d8c14d15 	stw	r3,1332(sp)
   820b4:	18bff404 	addi	r2,r3,-48
   820b8:	00c00244 	movi	r3,9
   820bc:	18827b36 	bltu	r3,r2,82aac <___vfprintf_internal_r+0x1c34>
   820c0:	1821883a 	mov	r16,r3
   820c4:	0009883a 	mov	r4,zero
   820c8:	01400284 	movi	r5,10
   820cc:	d9c15115 	stw	r7,1348(sp)
   820d0:	0089ffc0 	call	89ffc <__mulsi3>
   820d4:	d9414d17 	ldw	r5,1332(sp)
   820d8:	b9800007 	ldb	r6,0(r23)
   820dc:	d9c15117 	ldw	r7,1348(sp)
   820e0:	1145883a 	add	r2,r2,r5
   820e4:	113ff404 	addi	r4,r2,-48
   820e8:	30bff404 	addi	r2,r6,-48
   820ec:	d9814d15 	stw	r6,1332(sp)
   820f0:	bdc00044 	addi	r23,r23,1
   820f4:	80bff42e 	bgeu	r16,r2,820c8 <___vfprintf_internal_r+0x1250>
   820f8:	2027883a 	mov	r19,r4
   820fc:	203bdf0e 	bge	r4,zero,8107c <___vfprintf_internal_r+0x204>
   82100:	04ffffc4 	movi	r19,-1
   82104:	003bdd06 	br	8107c <___vfprintf_internal_r+0x204>
   82108:	d8000405 	stb	zero,16(sp)
   8210c:	39800017 	ldw	r6,0(r7)
   82110:	39c00104 	addi	r7,r7,4
   82114:	d9c14015 	stw	r7,1280(sp)
   82118:	d9814115 	stw	r6,1284(sp)
   8211c:	3001c926 	beq	r6,zero,82844 <___vfprintf_internal_r+0x19cc>
   82120:	98000e16 	blt	r19,zero,8215c <___vfprintf_internal_r+0x12e4>
   82124:	d9014117 	ldw	r4,1284(sp)
   82128:	000b883a 	mov	r5,zero
   8212c:	980d883a 	mov	r6,r19
   82130:	0085fac0 	call	85fac <memchr>
   82134:	10025926 	beq	r2,zero,82a9c <___vfprintf_internal_r+0x1c24>
   82138:	d8c14117 	ldw	r3,1284(sp)
   8213c:	10cfc83a 	sub	r7,r2,r3
   82140:	99c19e16 	blt	r19,r7,827bc <___vfprintf_internal_r+0x1944>
   82144:	d9c14515 	stw	r7,1300(sp)
   82148:	38000916 	blt	r7,zero,82170 <___vfprintf_internal_r+0x12f8>
   8214c:	d8014615 	stw	zero,1304(sp)
   82150:	003deb06 	br	81900 <___vfprintf_internal_r+0xa88>
   82154:	b8c00007 	ldb	r3,0(r23)
   82158:	003bc606 	br	81074 <___vfprintf_internal_r+0x1fc>
   8215c:	d9014117 	ldw	r4,1284(sp)
   82160:	0080dac0 	call	80dac <strlen>
   82164:	d8814515 	stw	r2,1300(sp)
   82168:	100f883a 	mov	r7,r2
   8216c:	103ff70e 	bge	r2,zero,8214c <___vfprintf_internal_r+0x12d4>
   82170:	d8014515 	stw	zero,1300(sp)
   82174:	d8014615 	stw	zero,1304(sp)
   82178:	003de106 	br	81900 <___vfprintf_internal_r+0xa88>
   8217c:	20c03fcc 	andi	r3,r4,255
   82180:	00800044 	movi	r2,1
   82184:	18802d26 	beq	r3,r2,8223c <___vfprintf_internal_r+0x13c4>
   82188:	18800e36 	bltu	r3,r2,821c4 <___vfprintf_internal_r+0x134c>
   8218c:	00800084 	movi	r2,2
   82190:	1880fa26 	beq	r3,r2,8257c <___vfprintf_internal_r+0x1704>
   82194:	01000274 	movhi	r4,9
   82198:	2134e004 	addi	r4,r4,-11392
   8219c:	0080dac0 	call	80dac <strlen>
   821a0:	100f883a 	mov	r7,r2
   821a4:	dcc14515 	stw	r19,1300(sp)
   821a8:	9880010e 	bge	r19,r2,821b0 <___vfprintf_internal_r+0x1338>
   821ac:	d8814515 	stw	r2,1300(sp)
   821b0:	00800274 	movhi	r2,9
   821b4:	10b4e004 	addi	r2,r2,-11392
   821b8:	dcc14615 	stw	r19,1304(sp)
   821bc:	d8814115 	stw	r2,1284(sp)
   821c0:	003dcf06 	br	81900 <___vfprintf_internal_r+0xa88>
   821c4:	d9401904 	addi	r5,sp,100
   821c8:	dd000f04 	addi	r20,sp,60
   821cc:	d9414115 	stw	r5,1284(sp)
   821d0:	880a977a 	slli	r5,r17,29
   821d4:	d9814117 	ldw	r6,1284(sp)
   821d8:	8004d0fa 	srli	r2,r16,3
   821dc:	8806d0fa 	srli	r3,r17,3
   821e0:	810001cc 	andi	r4,r16,7
   821e4:	2884b03a 	or	r2,r5,r2
   821e8:	31bfffc4 	addi	r6,r6,-1
   821ec:	21000c04 	addi	r4,r4,48
   821f0:	d9814115 	stw	r6,1284(sp)
   821f4:	10cab03a 	or	r5,r2,r3
   821f8:	31000005 	stb	r4,0(r6)
   821fc:	1021883a 	mov	r16,r2
   82200:	1823883a 	mov	r17,r3
   82204:	283ff21e 	bne	r5,zero,821d0 <___vfprintf_internal_r+0x1358>
   82208:	d8c14c17 	ldw	r3,1328(sp)
   8220c:	1880004c 	andi	r2,r3,1
   82210:	1005003a 	cmpeq	r2,r2,zero
   82214:	103db31e 	bne	r2,zero,818e4 <___vfprintf_internal_r+0xa6c>
   82218:	20803fcc 	andi	r2,r4,255
   8221c:	1080201c 	xori	r2,r2,128
   82220:	10bfe004 	addi	r2,r2,-128
   82224:	00c00c04 	movi	r3,48
   82228:	10fdae26 	beq	r2,r3,818e4 <___vfprintf_internal_r+0xa6c>
   8222c:	31bfffc4 	addi	r6,r6,-1
   82230:	d9814115 	stw	r6,1284(sp)
   82234:	30c00005 	stb	r3,0(r6)
   82238:	003daa06 	br	818e4 <___vfprintf_internal_r+0xa6c>
   8223c:	88800068 	cmpgeui	r2,r17,1
   82240:	10002c1e 	bne	r2,zero,822f4 <___vfprintf_internal_r+0x147c>
   82244:	8800021e 	bne	r17,zero,82250 <___vfprintf_internal_r+0x13d8>
   82248:	00800244 	movi	r2,9
   8224c:	14002936 	bltu	r2,r16,822f4 <___vfprintf_internal_r+0x147c>
   82250:	d90018c4 	addi	r4,sp,99
   82254:	dd000f04 	addi	r20,sp,60
   82258:	d9014115 	stw	r4,1284(sp)
   8225c:	d9014117 	ldw	r4,1284(sp)
   82260:	80800c04 	addi	r2,r16,48
   82264:	20800005 	stb	r2,0(r4)
   82268:	003d9e06 	br	818e4 <___vfprintf_internal_r+0xa6c>
   8226c:	dc400d17 	ldw	r17,52(sp)
   82270:	07000274 	movhi	fp,9
   82274:	e734e784 	addi	fp,fp,-11362
   82278:	9425883a 	add	r18,r18,r16
   8227c:	8c400044 	addi	r17,r17,1
   82280:	008001c4 	movi	r2,7
   82284:	1f000015 	stw	fp,0(r3)
   82288:	1c000115 	stw	r16,4(r3)
   8228c:	dc800e15 	stw	r18,56(sp)
   82290:	dc400d15 	stw	r17,52(sp)
   82294:	147ddc16 	blt	r2,r17,81a08 <___vfprintf_internal_r+0xb90>
   82298:	18c00204 	addi	r3,r3,8
   8229c:	003c7406 	br	81470 <___vfprintf_internal_r+0x5f8>
   822a0:	01000084 	movi	r4,2
   822a4:	d8000405 	stb	zero,16(sp)
   822a8:	003d8106 	br	818b0 <___vfprintf_internal_r+0xa38>
   822ac:	d9814c17 	ldw	r6,1328(sp)
   822b0:	30c4703a 	and	r2,r6,r3
   822b4:	1005003a 	cmpeq	r2,r2,zero
   822b8:	103cb326 	beq	r2,zero,81588 <___vfprintf_internal_r+0x710>
   822bc:	d9014117 	ldw	r4,1284(sp)
   822c0:	94800044 	addi	r18,r18,1
   822c4:	8c400044 	addi	r17,r17,1
   822c8:	008001c4 	movi	r2,7
   822cc:	a9000015 	stw	r4,0(r21)
   822d0:	a8c00115 	stw	r3,4(r21)
   822d4:	dc800e15 	stw	r18,56(sp)
   822d8:	dc400d15 	stw	r17,52(sp)
   822dc:	147e6016 	blt	r2,r17,81c60 <___vfprintf_internal_r+0xde8>
   822e0:	acc00204 	addi	r19,r21,8
   822e4:	003cd106 	br	8162c <___vfprintf_internal_r+0x7b4>
   822e8:	07000274 	movhi	fp,9
   822ec:	e734e784 	addi	fp,fp,-11362
   822f0:	003c4906 	br	81418 <___vfprintf_internal_r+0x5a0>
   822f4:	dd000f04 	addi	r20,sp,60
   822f8:	dc801904 	addi	r18,sp,100
   822fc:	8009883a 	mov	r4,r16
   82300:	880b883a 	mov	r5,r17
   82304:	01800284 	movi	r6,10
   82308:	000f883a 	mov	r7,zero
   8230c:	00887240 	call	88724 <__umoddi3>
   82310:	12000c04 	addi	r8,r2,48
   82314:	94bfffc4 	addi	r18,r18,-1
   82318:	8009883a 	mov	r4,r16
   8231c:	880b883a 	mov	r5,r17
   82320:	01800284 	movi	r6,10
   82324:	000f883a 	mov	r7,zero
   82328:	92000005 	stb	r8,0(r18)
   8232c:	00880b80 	call	880b8 <__udivdi3>
   82330:	1009883a 	mov	r4,r2
   82334:	1021883a 	mov	r16,r2
   82338:	18800068 	cmpgeui	r2,r3,1
   8233c:	1823883a 	mov	r17,r3
   82340:	103fee1e 	bne	r2,zero,822fc <___vfprintf_internal_r+0x1484>
   82344:	1800021e 	bne	r3,zero,82350 <___vfprintf_internal_r+0x14d8>
   82348:	00800244 	movi	r2,9
   8234c:	113feb36 	bltu	r2,r4,822fc <___vfprintf_internal_r+0x1484>
   82350:	94bfffc4 	addi	r18,r18,-1
   82354:	dc814115 	stw	r18,1284(sp)
   82358:	003fc006 	br	8225c <___vfprintf_internal_r+0x13e4>
   8235c:	d9014c17 	ldw	r4,1328(sp)
   82360:	2080004c 	andi	r2,r4,1
   82364:	10009a1e 	bne	r2,zero,825d0 <___vfprintf_internal_r+0x1758>
   82368:	d9401904 	addi	r5,sp,100
   8236c:	dd000f04 	addi	r20,sp,60
   82370:	d9414115 	stw	r5,1284(sp)
   82374:	003d5b06 	br	818e4 <___vfprintf_internal_r+0xa6c>
   82378:	d9014f17 	ldw	r4,1340(sp)
   8237c:	b00b883a 	mov	r5,r22
   82380:	d9800c04 	addi	r6,sp,48
   82384:	0080e200 	call	80e20 <__sprint_r>
   82388:	103c731e 	bne	r2,zero,81558 <___vfprintf_internal_r+0x6e0>
   8238c:	dc800e17 	ldw	r18,56(sp)
   82390:	d8c01904 	addi	r3,sp,100
   82394:	003cf906 	br	8177c <___vfprintf_internal_r+0x904>
   82398:	d8c14c17 	ldw	r3,1328(sp)
   8239c:	1880040c 	andi	r2,r3,16
   823a0:	1000711e 	bne	r2,zero,82568 <___vfprintf_internal_r+0x16f0>
   823a4:	d9014c17 	ldw	r4,1328(sp)
   823a8:	2080100c 	andi	r2,r4,64
   823ac:	10006e26 	beq	r2,zero,82568 <___vfprintf_internal_r+0x16f0>
   823b0:	3c00000b 	ldhu	r16,0(r7)
   823b4:	0023883a 	mov	r17,zero
   823b8:	39c00104 	addi	r7,r7,4
   823bc:	d9c14015 	stw	r7,1280(sp)
   823c0:	003efa06 	br	81fac <___vfprintf_internal_r+0x1134>
   823c4:	dc400d17 	ldw	r17,52(sp)
   823c8:	07000274 	movhi	fp,9
   823cc:	e734e784 	addi	fp,fp,-11362
   823d0:	9425883a 	add	r18,r18,r16
   823d4:	8c400044 	addi	r17,r17,1
   823d8:	008001c4 	movi	r2,7
   823dc:	1f000015 	stw	fp,0(r3)
   823e0:	1c000115 	stw	r16,4(r3)
   823e4:	dc800e15 	stw	r18,56(sp)
   823e8:	dc400d15 	stw	r17,52(sp)
   823ec:	147d7016 	blt	r2,r17,819b0 <___vfprintf_internal_r+0xb38>
   823f0:	18c00204 	addi	r3,r3,8
   823f4:	003d7506 	br	819cc <___vfprintf_internal_r+0xb54>
   823f8:	dc800e17 	ldw	r18,56(sp)
   823fc:	dc400d17 	ldw	r17,52(sp)
   82400:	07000274 	movhi	fp,9
   82404:	e734eb84 	addi	fp,fp,-11346
   82408:	003bba06 	br	812f4 <___vfprintf_internal_r+0x47c>
   8240c:	d9014f17 	ldw	r4,1340(sp)
   82410:	b00b883a 	mov	r5,r22
   82414:	d9800c04 	addi	r6,sp,48
   82418:	0080e200 	call	80e20 <__sprint_r>
   8241c:	103c4e1e 	bne	r2,zero,81558 <___vfprintf_internal_r+0x6e0>
   82420:	dc800e17 	ldw	r18,56(sp)
   82424:	d8c01904 	addi	r3,sp,100
   82428:	003ce306 	br	817b8 <___vfprintf_internal_r+0x940>
   8242c:	3c000017 	ldw	r16,0(r7)
   82430:	0009883a 	mov	r4,zero
   82434:	39c00104 	addi	r7,r7,4
   82438:	0023883a 	mov	r17,zero
   8243c:	d9c14015 	stw	r7,1280(sp)
   82440:	d8000405 	stb	zero,16(sp)
   82444:	003d1a06 	br	818b0 <___vfprintf_internal_r+0xa38>
   82448:	38800017 	ldw	r2,0(r7)
   8244c:	39c00104 	addi	r7,r7,4
   82450:	d9c14015 	stw	r7,1280(sp)
   82454:	1023d7fa 	srai	r17,r2,31
   82458:	1021883a 	mov	r16,r2
   8245c:	003d1206 	br	818a8 <___vfprintf_internal_r+0xa30>
   82460:	3c000017 	ldw	r16,0(r7)
   82464:	01000044 	movi	r4,1
   82468:	39c00104 	addi	r7,r7,4
   8246c:	0023883a 	mov	r17,zero
   82470:	d9c14015 	stw	r7,1280(sp)
   82474:	d8000405 	stb	zero,16(sp)
   82478:	003d0d06 	br	818b0 <___vfprintf_internal_r+0xa38>
   8247c:	00800274 	movhi	r2,9
   82480:	10b4e704 	addi	r2,r2,-11364
   82484:	94800044 	addi	r18,r18,1
   82488:	8c400044 	addi	r17,r17,1
   8248c:	a8800015 	stw	r2,0(r21)
   82490:	00c00044 	movi	r3,1
   82494:	008001c4 	movi	r2,7
   82498:	a8c00115 	stw	r3,4(r21)
   8249c:	dc800e15 	stw	r18,56(sp)
   824a0:	dc400d15 	stw	r17,52(sp)
   824a4:	1440ca16 	blt	r2,r17,827d0 <___vfprintf_internal_r+0x1958>
   824a8:	a8c00204 	addi	r3,r21,8
   824ac:	2000061e 	bne	r4,zero,824c8 <___vfprintf_internal_r+0x1650>
   824b0:	d9414717 	ldw	r5,1308(sp)
   824b4:	2800041e 	bne	r5,zero,824c8 <___vfprintf_internal_r+0x1650>
   824b8:	d9814c17 	ldw	r6,1328(sp)
   824bc:	3080004c 	andi	r2,r6,1
   824c0:	1005003a 	cmpeq	r2,r2,zero
   824c4:	103bea1e 	bne	r2,zero,81470 <___vfprintf_internal_r+0x5f8>
   824c8:	00800044 	movi	r2,1
   824cc:	dc400d17 	ldw	r17,52(sp)
   824d0:	18800115 	stw	r2,4(r3)
   824d4:	d8814917 	ldw	r2,1316(sp)
   824d8:	94800044 	addi	r18,r18,1
   824dc:	8c400044 	addi	r17,r17,1
   824e0:	18800015 	stw	r2,0(r3)
   824e4:	008001c4 	movi	r2,7
   824e8:	dc800e15 	stw	r18,56(sp)
   824ec:	dc400d15 	stw	r17,52(sp)
   824f0:	1440ca16 	blt	r2,r17,8281c <___vfprintf_internal_r+0x19a4>
   824f4:	18c00204 	addi	r3,r3,8
   824f8:	0121c83a 	sub	r16,zero,r4
   824fc:	0400500e 	bge	zero,r16,82640 <___vfprintf_internal_r+0x17c8>
   82500:	00800404 	movi	r2,16
   82504:	1400800e 	bge	r2,r16,82708 <___vfprintf_internal_r+0x1890>
   82508:	1027883a 	mov	r19,r2
   8250c:	07000274 	movhi	fp,9
   82510:	e734e784 	addi	fp,fp,-11362
   82514:	050001c4 	movi	r20,7
   82518:	00000306 	br	82528 <___vfprintf_internal_r+0x16b0>
   8251c:	18c00204 	addi	r3,r3,8
   82520:	843ffc04 	addi	r16,r16,-16
   82524:	9c007a0e 	bge	r19,r16,82710 <___vfprintf_internal_r+0x1898>
   82528:	94800404 	addi	r18,r18,16
   8252c:	8c400044 	addi	r17,r17,1
   82530:	1f000015 	stw	fp,0(r3)
   82534:	1cc00115 	stw	r19,4(r3)
   82538:	dc800e15 	stw	r18,56(sp)
   8253c:	dc400d15 	stw	r17,52(sp)
   82540:	a47ff60e 	bge	r20,r17,8251c <___vfprintf_internal_r+0x16a4>
   82544:	d9014f17 	ldw	r4,1340(sp)
   82548:	b00b883a 	mov	r5,r22
   8254c:	d9800c04 	addi	r6,sp,48
   82550:	0080e200 	call	80e20 <__sprint_r>
   82554:	103c001e 	bne	r2,zero,81558 <___vfprintf_internal_r+0x6e0>
   82558:	dc800e17 	ldw	r18,56(sp)
   8255c:	dc400d17 	ldw	r17,52(sp)
   82560:	d8c01904 	addi	r3,sp,100
   82564:	003fee06 	br	82520 <___vfprintf_internal_r+0x16a8>
   82568:	3c000017 	ldw	r16,0(r7)
   8256c:	0023883a 	mov	r17,zero
   82570:	39c00104 	addi	r7,r7,4
   82574:	d9c14015 	stw	r7,1280(sp)
   82578:	003e8c06 	br	81fac <___vfprintf_internal_r+0x1134>
   8257c:	d9401904 	addi	r5,sp,100
   82580:	dd000f04 	addi	r20,sp,60
   82584:	d9414115 	stw	r5,1284(sp)
   82588:	d9814417 	ldw	r6,1296(sp)
   8258c:	880a973a 	slli	r5,r17,28
   82590:	8004d13a 	srli	r2,r16,4
   82594:	810003cc 	andi	r4,r16,15
   82598:	3109883a 	add	r4,r6,r4
   8259c:	2884b03a 	or	r2,r5,r2
   825a0:	21400003 	ldbu	r5,0(r4)
   825a4:	d9014117 	ldw	r4,1284(sp)
   825a8:	8806d13a 	srli	r3,r17,4
   825ac:	1021883a 	mov	r16,r2
   825b0:	213fffc4 	addi	r4,r4,-1
   825b4:	d9014115 	stw	r4,1284(sp)
   825b8:	d9814117 	ldw	r6,1284(sp)
   825bc:	10c8b03a 	or	r4,r2,r3
   825c0:	1823883a 	mov	r17,r3
   825c4:	31400005 	stb	r5,0(r6)
   825c8:	203fef1e 	bne	r4,zero,82588 <___vfprintf_internal_r+0x1710>
   825cc:	003cc506 	br	818e4 <___vfprintf_internal_r+0xa6c>
   825d0:	00800c04 	movi	r2,48
   825d4:	d98018c4 	addi	r6,sp,99
   825d8:	dd000f04 	addi	r20,sp,60
   825dc:	d88018c5 	stb	r2,99(sp)
   825e0:	d9814115 	stw	r6,1284(sp)
   825e4:	003cbf06 	br	818e4 <___vfprintf_internal_r+0xa6c>
   825e8:	dc400d17 	ldw	r17,52(sp)
   825ec:	07000274 	movhi	fp,9
   825f0:	e734eb84 	addi	fp,fp,-11346
   825f4:	003bc106 	br	814fc <___vfprintf_internal_r+0x684>
   825f8:	d9414c17 	ldw	r5,1328(sp)
   825fc:	2880040c 	andi	r2,r5,16
   82600:	10007c26 	beq	r2,zero,827f4 <___vfprintf_internal_r+0x197c>
   82604:	38800017 	ldw	r2,0(r7)
   82608:	39c00104 	addi	r7,r7,4
   8260c:	d9c14015 	stw	r7,1280(sp)
   82610:	d9814b17 	ldw	r6,1324(sp)
   82614:	d9c14017 	ldw	r7,1280(sp)
   82618:	11800015 	stw	r6,0(r2)
   8261c:	003a7206 	br	80fe8 <___vfprintf_internal_r+0x170>
   82620:	d9014f17 	ldw	r4,1340(sp)
   82624:	b00b883a 	mov	r5,r22
   82628:	d9800c04 	addi	r6,sp,48
   8262c:	0080e200 	call	80e20 <__sprint_r>
   82630:	103bc91e 	bne	r2,zero,81558 <___vfprintf_internal_r+0x6e0>
   82634:	dc800e17 	ldw	r18,56(sp)
   82638:	dc400d17 	ldw	r17,52(sp)
   8263c:	d8c01904 	addi	r3,sp,100
   82640:	d9014717 	ldw	r4,1308(sp)
   82644:	d9414117 	ldw	r5,1284(sp)
   82648:	8c400044 	addi	r17,r17,1
   8264c:	9125883a 	add	r18,r18,r4
   82650:	008001c4 	movi	r2,7
   82654:	19400015 	stw	r5,0(r3)
   82658:	19000115 	stw	r4,4(r3)
   8265c:	dc800e15 	stw	r18,56(sp)
   82660:	dc400d15 	stw	r17,52(sp)
   82664:	147ce816 	blt	r2,r17,81a08 <___vfprintf_internal_r+0xb90>
   82668:	18c00204 	addi	r3,r3,8
   8266c:	003b8006 	br	81470 <___vfprintf_internal_r+0x5f8>
   82670:	38c00017 	ldw	r3,0(r7)
   82674:	39000204 	addi	r4,r7,8
   82678:	d9014015 	stw	r4,1280(sp)
   8267c:	d8c14215 	stw	r3,1288(sp)
   82680:	39c00117 	ldw	r7,4(r7)
   82684:	d9c14315 	stw	r7,1292(sp)
   82688:	003e1a06 	br	81ef4 <___vfprintf_internal_r+0x107c>
   8268c:	0005883a 	mov	r2,zero
   82690:	1409c83a 	sub	r4,r2,r16
   82694:	1105803a 	cmpltu	r2,r2,r4
   82698:	044bc83a 	sub	r5,zero,r17
   8269c:	2885c83a 	sub	r2,r5,r2
   826a0:	2021883a 	mov	r16,r4
   826a4:	1023883a 	mov	r17,r2
   826a8:	01000044 	movi	r4,1
   826ac:	00800b44 	movi	r2,45
   826b0:	d8800405 	stb	r2,16(sp)
   826b4:	003c7e06 	br	818b0 <___vfprintf_internal_r+0xa38>
   826b8:	d9014f17 	ldw	r4,1340(sp)
   826bc:	b00b883a 	mov	r5,r22
   826c0:	d9800c04 	addi	r6,sp,48
   826c4:	0080e200 	call	80e20 <__sprint_r>
   826c8:	103ba31e 	bne	r2,zero,81558 <___vfprintf_internal_r+0x6e0>
   826cc:	dc800e17 	ldw	r18,56(sp)
   826d0:	dc400d17 	ldw	r17,52(sp)
   826d4:	d9000517 	ldw	r4,20(sp)
   826d8:	d9401904 	addi	r5,sp,100
   826dc:	003da106 	br	81d64 <___vfprintf_internal_r+0xeec>
   826e0:	d9014f17 	ldw	r4,1340(sp)
   826e4:	b00b883a 	mov	r5,r22
   826e8:	d9800c04 	addi	r6,sp,48
   826ec:	0080e200 	call	80e20 <__sprint_r>
   826f0:	103b991e 	bne	r2,zero,81558 <___vfprintf_internal_r+0x6e0>
   826f4:	dc800e17 	ldw	r18,56(sp)
   826f8:	dc400d17 	ldw	r17,52(sp)
   826fc:	d9000517 	ldw	r4,20(sp)
   82700:	d8c01904 	addi	r3,sp,100
   82704:	003d8b06 	br	81d34 <___vfprintf_internal_r+0xebc>
   82708:	07000274 	movhi	fp,9
   8270c:	e734e784 	addi	fp,fp,-11362
   82710:	9425883a 	add	r18,r18,r16
   82714:	8c400044 	addi	r17,r17,1
   82718:	008001c4 	movi	r2,7
   8271c:	1f000015 	stw	fp,0(r3)
   82720:	1c000115 	stw	r16,4(r3)
   82724:	dc800e15 	stw	r18,56(sp)
   82728:	dc400d15 	stw	r17,52(sp)
   8272c:	147fbc16 	blt	r2,r17,82620 <___vfprintf_internal_r+0x17a8>
   82730:	18c00204 	addi	r3,r3,8
   82734:	003fc206 	br	82640 <___vfprintf_internal_r+0x17c8>
   82738:	d9014f17 	ldw	r4,1340(sp)
   8273c:	b00b883a 	mov	r5,r22
   82740:	d9800c04 	addi	r6,sp,48
   82744:	0080e200 	call	80e20 <__sprint_r>
   82748:	103b831e 	bne	r2,zero,81558 <___vfprintf_internal_r+0x6e0>
   8274c:	dc800e17 	ldw	r18,56(sp)
   82750:	d9000517 	ldw	r4,20(sp)
   82754:	d8c01904 	addi	r3,sp,100
   82758:	003cfc06 	br	81b4c <___vfprintf_internal_r+0xcd4>
   8275c:	07000274 	movhi	fp,9
   82760:	e734e784 	addi	fp,fp,-11362
   82764:	003bde06 	br	816e0 <___vfprintf_internal_r+0x868>
   82768:	00800274 	movhi	r2,9
   8276c:	10b4d604 	addi	r2,r2,-11432
   82770:	d8814115 	stw	r2,1284(sp)
   82774:	003def06 	br	81f34 <___vfprintf_internal_r+0x10bc>
   82778:	d9014217 	ldw	r4,1288(sp)
   8277c:	d9414317 	ldw	r5,1292(sp)
   82780:	00879680 	call	87968 <__isnand>
   82784:	10003926 	beq	r2,zero,8286c <___vfprintf_internal_r+0x19f4>
   82788:	d9414d17 	ldw	r5,1332(sp)
   8278c:	008011c4 	movi	r2,71
   82790:	1140ce16 	blt	r2,r5,82acc <___vfprintf_internal_r+0x1c54>
   82794:	01800274 	movhi	r6,9
   82798:	31b4d704 	addi	r6,r6,-11428
   8279c:	d9814115 	stw	r6,1284(sp)
   827a0:	003de406 	br	81f34 <___vfprintf_internal_r+0x10bc>
   827a4:	d9014c17 	ldw	r4,1328(sp)
   827a8:	bdc00044 	addi	r23,r23,1
   827ac:	b8c00007 	ldb	r3,0(r23)
   827b0:	21000814 	ori	r4,r4,32
   827b4:	d9014c15 	stw	r4,1328(sp)
   827b8:	003a2e06 	br	81074 <___vfprintf_internal_r+0x1fc>
   827bc:	dcc14515 	stw	r19,1300(sp)
   827c0:	98011016 	blt	r19,zero,82c04 <___vfprintf_internal_r+0x1d8c>
   827c4:	980f883a 	mov	r7,r19
   827c8:	d8014615 	stw	zero,1304(sp)
   827cc:	003c4c06 	br	81900 <___vfprintf_internal_r+0xa88>
   827d0:	d9014f17 	ldw	r4,1340(sp)
   827d4:	b00b883a 	mov	r5,r22
   827d8:	d9800c04 	addi	r6,sp,48
   827dc:	0080e200 	call	80e20 <__sprint_r>
   827e0:	103b5d1e 	bne	r2,zero,81558 <___vfprintf_internal_r+0x6e0>
   827e4:	dc800e17 	ldw	r18,56(sp)
   827e8:	d9000517 	ldw	r4,20(sp)
   827ec:	d8c01904 	addi	r3,sp,100
   827f0:	003f2e06 	br	824ac <___vfprintf_internal_r+0x1634>
   827f4:	d8c14c17 	ldw	r3,1328(sp)
   827f8:	1880100c 	andi	r2,r3,64
   827fc:	1000a026 	beq	r2,zero,82a80 <___vfprintf_internal_r+0x1c08>
   82800:	38800017 	ldw	r2,0(r7)
   82804:	39c00104 	addi	r7,r7,4
   82808:	d9c14015 	stw	r7,1280(sp)
   8280c:	d9014b17 	ldw	r4,1324(sp)
   82810:	d9c14017 	ldw	r7,1280(sp)
   82814:	1100000d 	sth	r4,0(r2)
   82818:	0039f306 	br	80fe8 <___vfprintf_internal_r+0x170>
   8281c:	d9014f17 	ldw	r4,1340(sp)
   82820:	b00b883a 	mov	r5,r22
   82824:	d9800c04 	addi	r6,sp,48
   82828:	0080e200 	call	80e20 <__sprint_r>
   8282c:	103b4a1e 	bne	r2,zero,81558 <___vfprintf_internal_r+0x6e0>
   82830:	dc800e17 	ldw	r18,56(sp)
   82834:	dc400d17 	ldw	r17,52(sp)
   82838:	d9000517 	ldw	r4,20(sp)
   8283c:	d8c01904 	addi	r3,sp,100
   82840:	003f2d06 	br	824f8 <___vfprintf_internal_r+0x1680>
   82844:	00800184 	movi	r2,6
   82848:	14c09a36 	bltu	r2,r19,82ab4 <___vfprintf_internal_r+0x1c3c>
   8284c:	dcc14515 	stw	r19,1300(sp)
   82850:	9800010e 	bge	r19,zero,82858 <___vfprintf_internal_r+0x19e0>
   82854:	d8014515 	stw	zero,1300(sp)
   82858:	00800274 	movhi	r2,9
   8285c:	10b4d904 	addi	r2,r2,-11420
   82860:	980f883a 	mov	r7,r19
   82864:	d8814115 	stw	r2,1284(sp)
   82868:	003a7206 	br	81234 <___vfprintf_internal_r+0x3bc>
   8286c:	00bfffc4 	movi	r2,-1
   82870:	9880e226 	beq	r19,r2,82bfc <___vfprintf_internal_r+0x1d84>
   82874:	d9414d17 	ldw	r5,1332(sp)
   82878:	008019c4 	movi	r2,103
   8287c:	2880dc26 	beq	r5,r2,82bf0 <___vfprintf_internal_r+0x1d78>
   82880:	008011c4 	movi	r2,71
   82884:	2880da26 	beq	r5,r2,82bf0 <___vfprintf_internal_r+0x1d78>
   82888:	d9414c17 	ldw	r5,1328(sp)
   8288c:	d9014317 	ldw	r4,1292(sp)
   82890:	d9814217 	ldw	r6,1288(sp)
   82894:	29404014 	ori	r5,r5,256
   82898:	d9414c15 	stw	r5,1328(sp)
   8289c:	2000cc16 	blt	r4,zero,82bd0 <___vfprintf_internal_r+0x1d58>
   828a0:	3021883a 	mov	r16,r6
   828a4:	2023883a 	mov	r17,r4
   828a8:	0039883a 	mov	fp,zero
   828ac:	d9414d17 	ldw	r5,1332(sp)
   828b0:	00801984 	movi	r2,102
   828b4:	2880b726 	beq	r5,r2,82b94 <___vfprintf_internal_r+0x1d1c>
   828b8:	00801184 	movi	r2,70
   828bc:	2880b526 	beq	r5,r2,82b94 <___vfprintf_internal_r+0x1d1c>
   828c0:	00801944 	movi	r2,101
   828c4:	2880c826 	beq	r5,r2,82be8 <___vfprintf_internal_r+0x1d70>
   828c8:	00801144 	movi	r2,69
   828cc:	2880c626 	beq	r5,r2,82be8 <___vfprintf_internal_r+0x1d70>
   828d0:	9829883a 	mov	r20,r19
   828d4:	d9014f17 	ldw	r4,1340(sp)
   828d8:	d8800504 	addi	r2,sp,20
   828dc:	880d883a 	mov	r6,r17
   828e0:	d8800115 	stw	r2,4(sp)
   828e4:	d8c00604 	addi	r3,sp,24
   828e8:	d8800704 	addi	r2,sp,28
   828ec:	800b883a 	mov	r5,r16
   828f0:	01c00084 	movi	r7,2
   828f4:	d8c00215 	stw	r3,8(sp)
   828f8:	d8800315 	stw	r2,12(sp)
   828fc:	dd000015 	stw	r20,0(sp)
   82900:	00830e00 	call	830e0 <_dtoa_r>
   82904:	d9814d17 	ldw	r6,1332(sp)
   82908:	d8814115 	stw	r2,1284(sp)
   8290c:	008019c4 	movi	r2,103
   82910:	30809526 	beq	r6,r2,82b68 <___vfprintf_internal_r+0x1cf0>
   82914:	d8c14d17 	ldw	r3,1332(sp)
   82918:	008011c4 	movi	r2,71
   8291c:	18809226 	beq	r3,r2,82b68 <___vfprintf_internal_r+0x1cf0>
   82920:	d9414117 	ldw	r5,1284(sp)
   82924:	d9814d17 	ldw	r6,1332(sp)
   82928:	00801984 	movi	r2,102
   8292c:	2d25883a 	add	r18,r5,r20
   82930:	30808626 	beq	r6,r2,82b4c <___vfprintf_internal_r+0x1cd4>
   82934:	00801184 	movi	r2,70
   82938:	30808426 	beq	r6,r2,82b4c <___vfprintf_internal_r+0x1cd4>
   8293c:	000d883a 	mov	r6,zero
   82940:	000f883a 	mov	r7,zero
   82944:	880b883a 	mov	r5,r17
   82948:	8009883a 	mov	r4,r16
   8294c:	00898a40 	call	898a4 <__eqdf2>
   82950:	1000751e 	bne	r2,zero,82b28 <___vfprintf_internal_r+0x1cb0>
   82954:	9005883a 	mov	r2,r18
   82958:	dc800715 	stw	r18,28(sp)
   8295c:	d9014117 	ldw	r4,1284(sp)
   82960:	d9414d17 	ldw	r5,1332(sp)
   82964:	00c019c4 	movi	r3,103
   82968:	1125c83a 	sub	r18,r2,r4
   8296c:	28c06826 	beq	r5,r3,82b10 <___vfprintf_internal_r+0x1c98>
   82970:	008011c4 	movi	r2,71
   82974:	28806626 	beq	r5,r2,82b10 <___vfprintf_internal_r+0x1c98>
   82978:	d9000517 	ldw	r4,20(sp)
   8297c:	d8c14d17 	ldw	r3,1332(sp)
   82980:	00801944 	movi	r2,101
   82984:	10c05516 	blt	r2,r3,82adc <___vfprintf_internal_r+0x1c64>
   82988:	213fffc4 	addi	r4,r4,-1
   8298c:	d9000515 	stw	r4,20(sp)
   82990:	d8c00805 	stb	r3,32(sp)
   82994:	2021883a 	mov	r16,r4
   82998:	2000c116 	blt	r4,zero,82ca0 <___vfprintf_internal_r+0x1e28>
   8299c:	00800ac4 	movi	r2,43
   829a0:	d8800845 	stb	r2,33(sp)
   829a4:	00800244 	movi	r2,9
   829a8:	1400af0e 	bge	r2,r16,82c68 <___vfprintf_internal_r+0x1df0>
   829ac:	1027883a 	mov	r19,r2
   829b0:	dc400b84 	addi	r17,sp,46
   829b4:	8009883a 	mov	r4,r16
   829b8:	01400284 	movi	r5,10
   829bc:	0089f8c0 	call	89f8c <__modsi3>
   829c0:	10800c04 	addi	r2,r2,48
   829c4:	8c7fffc4 	addi	r17,r17,-1
   829c8:	8009883a 	mov	r4,r16
   829cc:	01400284 	movi	r5,10
   829d0:	88800005 	stb	r2,0(r17)
   829d4:	0089f2c0 	call	89f2c <__divsi3>
   829d8:	1021883a 	mov	r16,r2
   829dc:	98bff516 	blt	r19,r2,829b4 <___vfprintf_internal_r+0x1b3c>
   829e0:	10c00c04 	addi	r3,r2,48
   829e4:	d88009c4 	addi	r2,sp,39
   829e8:	108001c4 	addi	r2,r2,7
   829ec:	897fffc4 	addi	r5,r17,-1
   829f0:	88ffffc5 	stb	r3,-1(r17)
   829f4:	2880a72e 	bgeu	r5,r2,82c94 <___vfprintf_internal_r+0x1e1c>
   829f8:	1009883a 	mov	r4,r2
   829fc:	d9800804 	addi	r6,sp,32
   82a00:	d8c00884 	addi	r3,sp,34
   82a04:	28800003 	ldbu	r2,0(r5)
   82a08:	29400044 	addi	r5,r5,1
   82a0c:	18800005 	stb	r2,0(r3)
   82a10:	18c00044 	addi	r3,r3,1
   82a14:	293ffb36 	bltu	r5,r4,82a04 <___vfprintf_internal_r+0x1b8c>
   82a18:	1987c83a 	sub	r3,r3,r6
   82a1c:	00800044 	movi	r2,1
   82a20:	d8c14815 	stw	r3,1312(sp)
   82a24:	90cf883a 	add	r7,r18,r3
   82a28:	1480960e 	bge	r2,r18,82c84 <___vfprintf_internal_r+0x1e0c>
   82a2c:	39c00044 	addi	r7,r7,1
   82a30:	d9c14515 	stw	r7,1300(sp)
   82a34:	38003416 	blt	r7,zero,82b08 <___vfprintf_internal_r+0x1c90>
   82a38:	e0803fcc 	andi	r2,fp,255
   82a3c:	1080201c 	xori	r2,r2,128
   82a40:	10bfe004 	addi	r2,r2,-128
   82a44:	10004e26 	beq	r2,zero,82b80 <___vfprintf_internal_r+0x1d08>
   82a48:	00800b44 	movi	r2,45
   82a4c:	dc814715 	stw	r18,1308(sp)
   82a50:	d8014615 	stw	zero,1304(sp)
   82a54:	d8800405 	stb	r2,16(sp)
   82a58:	003bab06 	br	81908 <___vfprintf_internal_r+0xa90>
   82a5c:	00800b44 	movi	r2,45
   82a60:	d8800405 	stb	r2,16(sp)
   82a64:	003d2d06 	br	81f1c <___vfprintf_internal_r+0x10a4>
   82a68:	d9014f17 	ldw	r4,1340(sp)
   82a6c:	b00b883a 	mov	r5,r22
   82a70:	d9800c04 	addi	r6,sp,48
   82a74:	0080e200 	call	80e20 <__sprint_r>
   82a78:	103ab71e 	bne	r2,zero,81558 <___vfprintf_internal_r+0x6e0>
   82a7c:	003ab506 	br	81554 <___vfprintf_internal_r+0x6dc>
   82a80:	38800017 	ldw	r2,0(r7)
   82a84:	39c00104 	addi	r7,r7,4
   82a88:	d9c14015 	stw	r7,1280(sp)
   82a8c:	d9414b17 	ldw	r5,1324(sp)
   82a90:	d9c14017 	ldw	r7,1280(sp)
   82a94:	11400015 	stw	r5,0(r2)
   82a98:	00395306 	br	80fe8 <___vfprintf_internal_r+0x170>
   82a9c:	980f883a 	mov	r7,r19
   82aa0:	dcc14515 	stw	r19,1300(sp)
   82aa4:	d8014615 	stw	zero,1304(sp)
   82aa8:	003b9506 	br	81900 <___vfprintf_internal_r+0xa88>
   82aac:	0027883a 	mov	r19,zero
   82ab0:	00397206 	br	8107c <___vfprintf_internal_r+0x204>
   82ab4:	00c00274 	movhi	r3,9
   82ab8:	18f4d904 	addi	r3,r3,-11420
   82abc:	100f883a 	mov	r7,r2
   82ac0:	d8814515 	stw	r2,1300(sp)
   82ac4:	d8c14115 	stw	r3,1284(sp)
   82ac8:	0039da06 	br	81234 <___vfprintf_internal_r+0x3bc>
   82acc:	00800274 	movhi	r2,9
   82ad0:	10b4d804 	addi	r2,r2,-11424
   82ad4:	d8814115 	stw	r2,1284(sp)
   82ad8:	003d1606 	br	81f34 <___vfprintf_internal_r+0x10bc>
   82adc:	d9414d17 	ldw	r5,1332(sp)
   82ae0:	00801984 	movi	r2,102
   82ae4:	28804926 	beq	r5,r2,82c0c <___vfprintf_internal_r+0x1d94>
   82ae8:	200f883a 	mov	r7,r4
   82aec:	24805716 	blt	r4,r18,82c4c <___vfprintf_internal_r+0x1dd4>
   82af0:	d9414c17 	ldw	r5,1328(sp)
   82af4:	2880004c 	andi	r2,r5,1
   82af8:	10000126 	beq	r2,zero,82b00 <___vfprintf_internal_r+0x1c88>
   82afc:	21c00044 	addi	r7,r4,1
   82b00:	d9c14515 	stw	r7,1300(sp)
   82b04:	383fcc0e 	bge	r7,zero,82a38 <___vfprintf_internal_r+0x1bc0>
   82b08:	d8014515 	stw	zero,1300(sp)
   82b0c:	003fca06 	br	82a38 <___vfprintf_internal_r+0x1bc0>
   82b10:	d9000517 	ldw	r4,20(sp)
   82b14:	00bfff04 	movi	r2,-4
   82b18:	1100480e 	bge	r2,r4,82c3c <___vfprintf_internal_r+0x1dc4>
   82b1c:	99004716 	blt	r19,r4,82c3c <___vfprintf_internal_r+0x1dc4>
   82b20:	d8c14d15 	stw	r3,1332(sp)
   82b24:	003ff006 	br	82ae8 <___vfprintf_internal_r+0x1c70>
   82b28:	d8800717 	ldw	r2,28(sp)
   82b2c:	14bf8b2e 	bgeu	r2,r18,8295c <___vfprintf_internal_r+0x1ae4>
   82b30:	9007883a 	mov	r3,r18
   82b34:	01000c04 	movi	r4,48
   82b38:	11000005 	stb	r4,0(r2)
   82b3c:	10800044 	addi	r2,r2,1
   82b40:	d8800715 	stw	r2,28(sp)
   82b44:	18bffc1e 	bne	r3,r2,82b38 <___vfprintf_internal_r+0x1cc0>
   82b48:	003f8406 	br	8295c <___vfprintf_internal_r+0x1ae4>
   82b4c:	d8814117 	ldw	r2,1284(sp)
   82b50:	10c00007 	ldb	r3,0(r2)
   82b54:	00800c04 	movi	r2,48
   82b58:	18805b26 	beq	r3,r2,82cc8 <___vfprintf_internal_r+0x1e50>
   82b5c:	d9000517 	ldw	r4,20(sp)
   82b60:	9125883a 	add	r18,r18,r4
   82b64:	003f7506 	br	8293c <___vfprintf_internal_r+0x1ac4>
   82b68:	d9014c17 	ldw	r4,1328(sp)
   82b6c:	2080004c 	andi	r2,r4,1
   82b70:	1005003a 	cmpeq	r2,r2,zero
   82b74:	103f6a26 	beq	r2,zero,82920 <___vfprintf_internal_r+0x1aa8>
   82b78:	d8800717 	ldw	r2,28(sp)
   82b7c:	003f7706 	br	8295c <___vfprintf_internal_r+0x1ae4>
   82b80:	d9c14515 	stw	r7,1300(sp)
   82b84:	38004d16 	blt	r7,zero,82cbc <___vfprintf_internal_r+0x1e44>
   82b88:	dc814715 	stw	r18,1308(sp)
   82b8c:	d8014615 	stw	zero,1304(sp)
   82b90:	003b5b06 	br	81900 <___vfprintf_internal_r+0xa88>
   82b94:	d9014f17 	ldw	r4,1340(sp)
   82b98:	d8800504 	addi	r2,sp,20
   82b9c:	d8800115 	stw	r2,4(sp)
   82ba0:	d8c00604 	addi	r3,sp,24
   82ba4:	d8800704 	addi	r2,sp,28
   82ba8:	800b883a 	mov	r5,r16
   82bac:	880d883a 	mov	r6,r17
   82bb0:	01c000c4 	movi	r7,3
   82bb4:	d8c00215 	stw	r3,8(sp)
   82bb8:	d8800315 	stw	r2,12(sp)
   82bbc:	dcc00015 	stw	r19,0(sp)
   82bc0:	9829883a 	mov	r20,r19
   82bc4:	00830e00 	call	830e0 <_dtoa_r>
   82bc8:	d8814115 	stw	r2,1284(sp)
   82bcc:	003f5106 	br	82914 <___vfprintf_internal_r+0x1a9c>
   82bd0:	d8c14217 	ldw	r3,1288(sp)
   82bd4:	d9014317 	ldw	r4,1292(sp)
   82bd8:	07000b44 	movi	fp,45
   82bdc:	1821883a 	mov	r16,r3
   82be0:	2460003c 	xorhi	r17,r4,32768
   82be4:	003f3106 	br	828ac <___vfprintf_internal_r+0x1a34>
   82be8:	9d000044 	addi	r20,r19,1
   82bec:	003f3906 	br	828d4 <___vfprintf_internal_r+0x1a5c>
   82bf0:	983f251e 	bne	r19,zero,82888 <___vfprintf_internal_r+0x1a10>
   82bf4:	04c00044 	movi	r19,1
   82bf8:	003f2306 	br	82888 <___vfprintf_internal_r+0x1a10>
   82bfc:	04c00184 	movi	r19,6
   82c00:	003f2106 	br	82888 <___vfprintf_internal_r+0x1a10>
   82c04:	d8014515 	stw	zero,1300(sp)
   82c08:	003eee06 	br	827c4 <___vfprintf_internal_r+0x194c>
   82c0c:	200f883a 	mov	r7,r4
   82c10:	0100370e 	bge	zero,r4,82cf0 <___vfprintf_internal_r+0x1e78>
   82c14:	9800031e 	bne	r19,zero,82c24 <___vfprintf_internal_r+0x1dac>
   82c18:	d9814c17 	ldw	r6,1328(sp)
   82c1c:	3080004c 	andi	r2,r6,1
   82c20:	103fb726 	beq	r2,zero,82b00 <___vfprintf_internal_r+0x1c88>
   82c24:	20800044 	addi	r2,r4,1
   82c28:	98a7883a 	add	r19,r19,r2
   82c2c:	dcc14515 	stw	r19,1300(sp)
   82c30:	980f883a 	mov	r7,r19
   82c34:	983f800e 	bge	r19,zero,82a38 <___vfprintf_internal_r+0x1bc0>
   82c38:	003fb306 	br	82b08 <___vfprintf_internal_r+0x1c90>
   82c3c:	d9814d17 	ldw	r6,1332(sp)
   82c40:	31bfff84 	addi	r6,r6,-2
   82c44:	d9814d15 	stw	r6,1332(sp)
   82c48:	003f4c06 	br	8297c <___vfprintf_internal_r+0x1b04>
   82c4c:	0100180e 	bge	zero,r4,82cb0 <___vfprintf_internal_r+0x1e38>
   82c50:	00800044 	movi	r2,1
   82c54:	1485883a 	add	r2,r2,r18
   82c58:	d8814515 	stw	r2,1300(sp)
   82c5c:	100f883a 	mov	r7,r2
   82c60:	103f750e 	bge	r2,zero,82a38 <___vfprintf_internal_r+0x1bc0>
   82c64:	003fa806 	br	82b08 <___vfprintf_internal_r+0x1c90>
   82c68:	80c00c04 	addi	r3,r16,48
   82c6c:	00800c04 	movi	r2,48
   82c70:	d8c008c5 	stb	r3,35(sp)
   82c74:	d9800804 	addi	r6,sp,32
   82c78:	d8c00904 	addi	r3,sp,36
   82c7c:	d8800885 	stb	r2,34(sp)
   82c80:	003f6506 	br	82a18 <___vfprintf_internal_r+0x1ba0>
   82c84:	d9014c17 	ldw	r4,1328(sp)
   82c88:	2084703a 	and	r2,r4,r2
   82c8c:	103f9c26 	beq	r2,zero,82b00 <___vfprintf_internal_r+0x1c88>
   82c90:	003f6606 	br	82a2c <___vfprintf_internal_r+0x1bb4>
   82c94:	d9800804 	addi	r6,sp,32
   82c98:	d8c00884 	addi	r3,sp,34
   82c9c:	003f5e06 	br	82a18 <___vfprintf_internal_r+0x1ba0>
   82ca0:	00800b44 	movi	r2,45
   82ca4:	0121c83a 	sub	r16,zero,r4
   82ca8:	d8800845 	stb	r2,33(sp)
   82cac:	003f3d06 	br	829a4 <___vfprintf_internal_r+0x1b2c>
   82cb0:	00800084 	movi	r2,2
   82cb4:	1105c83a 	sub	r2,r2,r4
   82cb8:	003fe606 	br	82c54 <___vfprintf_internal_r+0x1ddc>
   82cbc:	d8014515 	stw	zero,1300(sp)
   82cc0:	dc814715 	stw	r18,1308(sp)
   82cc4:	003fb106 	br	82b8c <___vfprintf_internal_r+0x1d14>
   82cc8:	000d883a 	mov	r6,zero
   82ccc:	000f883a 	mov	r7,zero
   82cd0:	8009883a 	mov	r4,r16
   82cd4:	880b883a 	mov	r5,r17
   82cd8:	008992c0 	call	8992c <__nedf2>
   82cdc:	103f9f26 	beq	r2,zero,82b5c <___vfprintf_internal_r+0x1ce4>
   82ce0:	00800044 	movi	r2,1
   82ce4:	1509c83a 	sub	r4,r2,r20
   82ce8:	d9000515 	stw	r4,20(sp)
   82cec:	003f9b06 	br	82b5c <___vfprintf_internal_r+0x1ce4>
   82cf0:	98000d1e 	bne	r19,zero,82d28 <___vfprintf_internal_r+0x1eb0>
   82cf4:	d8c14c17 	ldw	r3,1328(sp)
   82cf8:	1880004c 	andi	r2,r3,1
   82cfc:	10000a1e 	bne	r2,zero,82d28 <___vfprintf_internal_r+0x1eb0>
   82d00:	01000044 	movi	r4,1
   82d04:	200f883a 	mov	r7,r4
   82d08:	d9014515 	stw	r4,1300(sp)
   82d0c:	003f4a06 	br	82a38 <___vfprintf_internal_r+0x1bc0>
   82d10:	3cc00017 	ldw	r19,0(r7)
   82d14:	39c00104 	addi	r7,r7,4
   82d18:	983d0e0e 	bge	r19,zero,82154 <___vfprintf_internal_r+0x12dc>
   82d1c:	b8c00007 	ldb	r3,0(r23)
   82d20:	04ffffc4 	movi	r19,-1
   82d24:	0038d306 	br	81074 <___vfprintf_internal_r+0x1fc>
   82d28:	9cc00084 	addi	r19,r19,2
   82d2c:	dcc14515 	stw	r19,1300(sp)
   82d30:	980f883a 	mov	r7,r19
   82d34:	983f400e 	bge	r19,zero,82a38 <___vfprintf_internal_r+0x1bc0>
   82d38:	003f7306 	br	82b08 <___vfprintf_internal_r+0x1c90>

00082d3c <__vfprintf_internal>:
   82d3c:	00800274 	movhi	r2,9
   82d40:	10bc2704 	addi	r2,r2,-3940
   82d44:	2013883a 	mov	r9,r4
   82d48:	11000017 	ldw	r4,0(r2)
   82d4c:	2805883a 	mov	r2,r5
   82d50:	300f883a 	mov	r7,r6
   82d54:	480b883a 	mov	r5,r9
   82d58:	100d883a 	mov	r6,r2
   82d5c:	0080e781 	jmpi	80e78 <___vfprintf_internal_r>

00082d60 <__swsetup_r>:
   82d60:	00800274 	movhi	r2,9
   82d64:	10bc2704 	addi	r2,r2,-3940
   82d68:	10c00017 	ldw	r3,0(r2)
   82d6c:	defffd04 	addi	sp,sp,-12
   82d70:	dc400115 	stw	r17,4(sp)
   82d74:	dc000015 	stw	r16,0(sp)
   82d78:	dfc00215 	stw	ra,8(sp)
   82d7c:	2023883a 	mov	r17,r4
   82d80:	2821883a 	mov	r16,r5
   82d84:	18000226 	beq	r3,zero,82d90 <__swsetup_r+0x30>
   82d88:	18800e17 	ldw	r2,56(r3)
   82d8c:	10001f26 	beq	r2,zero,82e0c <__swsetup_r+0xac>
   82d90:	8100030b 	ldhu	r4,12(r16)
   82d94:	2080020c 	andi	r2,r4,8
   82d98:	10002826 	beq	r2,zero,82e3c <__swsetup_r+0xdc>
   82d9c:	81400417 	ldw	r5,16(r16)
   82da0:	28001d26 	beq	r5,zero,82e18 <__swsetup_r+0xb8>
   82da4:	2080004c 	andi	r2,r4,1
   82da8:	1005003a 	cmpeq	r2,r2,zero
   82dac:	10000b26 	beq	r2,zero,82ddc <__swsetup_r+0x7c>
   82db0:	2080008c 	andi	r2,r4,2
   82db4:	10001226 	beq	r2,zero,82e00 <__swsetup_r+0xa0>
   82db8:	0005883a 	mov	r2,zero
   82dbc:	80800215 	stw	r2,8(r16)
   82dc0:	28000b26 	beq	r5,zero,82df0 <__swsetup_r+0x90>
   82dc4:	0005883a 	mov	r2,zero
   82dc8:	dfc00217 	ldw	ra,8(sp)
   82dcc:	dc400117 	ldw	r17,4(sp)
   82dd0:	dc000017 	ldw	r16,0(sp)
   82dd4:	dec00304 	addi	sp,sp,12
   82dd8:	f800283a 	ret
   82ddc:	80800517 	ldw	r2,20(r16)
   82de0:	80000215 	stw	zero,8(r16)
   82de4:	0085c83a 	sub	r2,zero,r2
   82de8:	80800615 	stw	r2,24(r16)
   82dec:	283ff51e 	bne	r5,zero,82dc4 <__swsetup_r+0x64>
   82df0:	2080200c 	andi	r2,r4,128
   82df4:	103ff326 	beq	r2,zero,82dc4 <__swsetup_r+0x64>
   82df8:	00bfffc4 	movi	r2,-1
   82dfc:	003ff206 	br	82dc8 <__swsetup_r+0x68>
   82e00:	80800517 	ldw	r2,20(r16)
   82e04:	80800215 	stw	r2,8(r16)
   82e08:	003fed06 	br	82dc0 <__swsetup_r+0x60>
   82e0c:	1809883a 	mov	r4,r3
   82e10:	008492c0 	call	8492c <__sinit>
   82e14:	003fde06 	br	82d90 <__swsetup_r+0x30>
   82e18:	20c0a00c 	andi	r3,r4,640
   82e1c:	00808004 	movi	r2,512
   82e20:	18bfe026 	beq	r3,r2,82da4 <__swsetup_r+0x44>
   82e24:	8809883a 	mov	r4,r17
   82e28:	800b883a 	mov	r5,r16
   82e2c:	00856d80 	call	856d8 <__smakebuf_r>
   82e30:	8100030b 	ldhu	r4,12(r16)
   82e34:	81400417 	ldw	r5,16(r16)
   82e38:	003fda06 	br	82da4 <__swsetup_r+0x44>
   82e3c:	2080040c 	andi	r2,r4,16
   82e40:	103fed26 	beq	r2,zero,82df8 <__swsetup_r+0x98>
   82e44:	2080010c 	andi	r2,r4,4
   82e48:	10001226 	beq	r2,zero,82e94 <__swsetup_r+0x134>
   82e4c:	81400c17 	ldw	r5,48(r16)
   82e50:	28000526 	beq	r5,zero,82e68 <__swsetup_r+0x108>
   82e54:	80801004 	addi	r2,r16,64
   82e58:	28800226 	beq	r5,r2,82e64 <__swsetup_r+0x104>
   82e5c:	8809883a 	mov	r4,r17
   82e60:	0084ce40 	call	84ce4 <_free_r>
   82e64:	80000c15 	stw	zero,48(r16)
   82e68:	8080030b 	ldhu	r2,12(r16)
   82e6c:	81400417 	ldw	r5,16(r16)
   82e70:	80000115 	stw	zero,4(r16)
   82e74:	10bff6cc 	andi	r2,r2,65499
   82e78:	8080030d 	sth	r2,12(r16)
   82e7c:	81400015 	stw	r5,0(r16)
   82e80:	8080030b 	ldhu	r2,12(r16)
   82e84:	10800214 	ori	r2,r2,8
   82e88:	113fffcc 	andi	r4,r2,65535
   82e8c:	8080030d 	sth	r2,12(r16)
   82e90:	003fc306 	br	82da0 <__swsetup_r+0x40>
   82e94:	81400417 	ldw	r5,16(r16)
   82e98:	003ff906 	br	82e80 <__swsetup_r+0x120>

00082e9c <quorem>:
   82e9c:	28c00417 	ldw	r3,16(r5)
   82ea0:	20800417 	ldw	r2,16(r4)
   82ea4:	defff104 	addi	sp,sp,-60
   82ea8:	dfc00e15 	stw	ra,56(sp)
   82eac:	df000d15 	stw	fp,52(sp)
   82eb0:	ddc00c15 	stw	r23,48(sp)
   82eb4:	dd800b15 	stw	r22,44(sp)
   82eb8:	dd400a15 	stw	r21,40(sp)
   82ebc:	dd000915 	stw	r20,36(sp)
   82ec0:	dcc00815 	stw	r19,32(sp)
   82ec4:	dc800715 	stw	r18,28(sp)
   82ec8:	dc400615 	stw	r17,24(sp)
   82ecc:	dc000515 	stw	r16,20(sp)
   82ed0:	d9000315 	stw	r4,12(sp)
   82ed4:	d9400415 	stw	r5,16(sp)
   82ed8:	10c07f16 	blt	r2,r3,830d8 <quorem+0x23c>
   82edc:	1d3fffc4 	addi	r20,r3,-1
   82ee0:	d8c00417 	ldw	r3,16(sp)
   82ee4:	d9000317 	ldw	r4,12(sp)
   82ee8:	a505883a 	add	r2,r20,r20
   82eec:	1085883a 	add	r2,r2,r2
   82ef0:	1cc00504 	addi	r19,r3,20
   82ef4:	25c00504 	addi	r23,r4,20
   82ef8:	98ad883a 	add	r22,r19,r2
   82efc:	15c7883a 	add	r3,r2,r23
   82f00:	b1400017 	ldw	r5,0(r22)
   82f04:	19000017 	ldw	r4,0(r3)
   82f08:	d8c00015 	stw	r3,0(sp)
   82f0c:	29400044 	addi	r5,r5,1
   82f10:	d9000215 	stw	r4,8(sp)
   82f14:	0089fec0 	call	89fec <__udivsi3>
   82f18:	1039883a 	mov	fp,r2
   82f1c:	10003d1e 	bne	r2,zero,83014 <quorem+0x178>
   82f20:	d9400417 	ldw	r5,16(sp)
   82f24:	d9000317 	ldw	r4,12(sp)
   82f28:	00864040 	call	86404 <__mcmp>
   82f2c:	10002c16 	blt	r2,zero,82fe0 <quorem+0x144>
   82f30:	e7000044 	addi	fp,fp,1
   82f34:	b80f883a 	mov	r7,r23
   82f38:	0011883a 	mov	r8,zero
   82f3c:	0009883a 	mov	r4,zero
   82f40:	99400017 	ldw	r5,0(r19)
   82f44:	38c00017 	ldw	r3,0(r7)
   82f48:	9cc00104 	addi	r19,r19,4
   82f4c:	28bfffcc 	andi	r2,r5,65535
   82f50:	2085883a 	add	r2,r4,r2
   82f54:	11bfffcc 	andi	r6,r2,65535
   82f58:	193fffcc 	andi	r4,r3,65535
   82f5c:	1004d43a 	srli	r2,r2,16
   82f60:	280ad43a 	srli	r5,r5,16
   82f64:	2189c83a 	sub	r4,r4,r6
   82f68:	2209883a 	add	r4,r4,r8
   82f6c:	1806d43a 	srli	r3,r3,16
   82f70:	288b883a 	add	r5,r5,r2
   82f74:	200dd43a 	srai	r6,r4,16
   82f78:	28bfffcc 	andi	r2,r5,65535
   82f7c:	1887c83a 	sub	r3,r3,r2
   82f80:	1987883a 	add	r3,r3,r6
   82f84:	3900000d 	sth	r4,0(r7)
   82f88:	38c0008d 	sth	r3,2(r7)
   82f8c:	2808d43a 	srli	r4,r5,16
   82f90:	39c00104 	addi	r7,r7,4
   82f94:	1811d43a 	srai	r8,r3,16
   82f98:	b4ffe92e 	bgeu	r22,r19,82f40 <quorem+0xa4>
   82f9c:	a505883a 	add	r2,r20,r20
   82fa0:	1085883a 	add	r2,r2,r2
   82fa4:	b885883a 	add	r2,r23,r2
   82fa8:	10c00017 	ldw	r3,0(r2)
   82fac:	18000c1e 	bne	r3,zero,82fe0 <quorem+0x144>
   82fb0:	113fff04 	addi	r4,r2,-4
   82fb4:	b900082e 	bgeu	r23,r4,82fd8 <quorem+0x13c>
   82fb8:	10bfff17 	ldw	r2,-4(r2)
   82fbc:	10000326 	beq	r2,zero,82fcc <quorem+0x130>
   82fc0:	00000506 	br	82fd8 <quorem+0x13c>
   82fc4:	20800017 	ldw	r2,0(r4)
   82fc8:	1000031e 	bne	r2,zero,82fd8 <quorem+0x13c>
   82fcc:	213fff04 	addi	r4,r4,-4
   82fd0:	a53fffc4 	addi	r20,r20,-1
   82fd4:	b93ffb36 	bltu	r23,r4,82fc4 <quorem+0x128>
   82fd8:	d9000317 	ldw	r4,12(sp)
   82fdc:	25000415 	stw	r20,16(r4)
   82fe0:	e005883a 	mov	r2,fp
   82fe4:	dfc00e17 	ldw	ra,56(sp)
   82fe8:	df000d17 	ldw	fp,52(sp)
   82fec:	ddc00c17 	ldw	r23,48(sp)
   82ff0:	dd800b17 	ldw	r22,44(sp)
   82ff4:	dd400a17 	ldw	r21,40(sp)
   82ff8:	dd000917 	ldw	r20,36(sp)
   82ffc:	dcc00817 	ldw	r19,32(sp)
   83000:	dc800717 	ldw	r18,28(sp)
   83004:	dc400617 	ldw	r17,24(sp)
   83008:	dc000517 	ldw	r16,20(sp)
   8300c:	dec00f04 	addi	sp,sp,60
   83010:	f800283a 	ret
   83014:	b823883a 	mov	r17,r23
   83018:	9825883a 	mov	r18,r19
   8301c:	d8000115 	stw	zero,4(sp)
   83020:	002b883a 	mov	r21,zero
   83024:	94000017 	ldw	r16,0(r18)
   83028:	e009883a 	mov	r4,fp
   8302c:	94800104 	addi	r18,r18,4
   83030:	817fffcc 	andi	r5,r16,65535
   83034:	0089ffc0 	call	89ffc <__mulsi3>
   83038:	800ad43a 	srli	r5,r16,16
   8303c:	e009883a 	mov	r4,fp
   83040:	a8a1883a 	add	r16,r21,r2
   83044:	0089ffc0 	call	89ffc <__mulsi3>
   83048:	89000017 	ldw	r4,0(r17)
   8304c:	80ffffcc 	andi	r3,r16,65535
   83050:	8020d43a 	srli	r16,r16,16
   83054:	217fffcc 	andi	r5,r4,65535
   83058:	28cbc83a 	sub	r5,r5,r3
   8305c:	d8c00117 	ldw	r3,4(sp)
   83060:	2008d43a 	srli	r4,r4,16
   83064:	1405883a 	add	r2,r2,r16
   83068:	28cb883a 	add	r5,r5,r3
   8306c:	280dd43a 	srai	r6,r5,16
   83070:	10ffffcc 	andi	r3,r2,65535
   83074:	20c9c83a 	sub	r4,r4,r3
   83078:	2189883a 	add	r4,r4,r6
   8307c:	8900008d 	sth	r4,2(r17)
   83080:	2009d43a 	srai	r4,r4,16
   83084:	8940000d 	sth	r5,0(r17)
   83088:	102ad43a 	srli	r21,r2,16
   8308c:	8c400104 	addi	r17,r17,4
   83090:	d9000115 	stw	r4,4(sp)
   83094:	b4bfe32e 	bgeu	r22,r18,83024 <quorem+0x188>
   83098:	d9000217 	ldw	r4,8(sp)
   8309c:	203fa01e 	bne	r4,zero,82f20 <quorem+0x84>
   830a0:	d8800017 	ldw	r2,0(sp)
   830a4:	10ffff04 	addi	r3,r2,-4
   830a8:	b8c0082e 	bgeu	r23,r3,830cc <quorem+0x230>
   830ac:	10bfff17 	ldw	r2,-4(r2)
   830b0:	10000326 	beq	r2,zero,830c0 <quorem+0x224>
   830b4:	00000506 	br	830cc <quorem+0x230>
   830b8:	18800017 	ldw	r2,0(r3)
   830bc:	1000031e 	bne	r2,zero,830cc <quorem+0x230>
   830c0:	18ffff04 	addi	r3,r3,-4
   830c4:	a53fffc4 	addi	r20,r20,-1
   830c8:	b8fffb36 	bltu	r23,r3,830b8 <quorem+0x21c>
   830cc:	d8c00317 	ldw	r3,12(sp)
   830d0:	1d000415 	stw	r20,16(r3)
   830d4:	003f9206 	br	82f20 <quorem+0x84>
   830d8:	0005883a 	mov	r2,zero
   830dc:	003fc106 	br	82fe4 <quorem+0x148>

000830e0 <_dtoa_r>:
   830e0:	22001017 	ldw	r8,64(r4)
   830e4:	deffda04 	addi	sp,sp,-152
   830e8:	dd402115 	stw	r21,132(sp)
   830ec:	dd002015 	stw	r20,128(sp)
   830f0:	dc801e15 	stw	r18,120(sp)
   830f4:	dc401d15 	stw	r17,116(sp)
   830f8:	dfc02515 	stw	ra,148(sp)
   830fc:	df002415 	stw	fp,144(sp)
   83100:	ddc02315 	stw	r23,140(sp)
   83104:	dd802215 	stw	r22,136(sp)
   83108:	dcc01f15 	stw	r19,124(sp)
   8310c:	dc001c15 	stw	r16,112(sp)
   83110:	d9001615 	stw	r4,88(sp)
   83114:	3023883a 	mov	r17,r6
   83118:	2829883a 	mov	r20,r5
   8311c:	d9c01715 	stw	r7,92(sp)
   83120:	dc802817 	ldw	r18,160(sp)
   83124:	302b883a 	mov	r21,r6
   83128:	40000a26 	beq	r8,zero,83154 <_dtoa_r+0x74>
   8312c:	20801117 	ldw	r2,68(r4)
   83130:	400b883a 	mov	r5,r8
   83134:	40800115 	stw	r2,4(r8)
   83138:	20c01117 	ldw	r3,68(r4)
   8313c:	00800044 	movi	r2,1
   83140:	10c4983a 	sll	r2,r2,r3
   83144:	40800215 	stw	r2,8(r8)
   83148:	00862a80 	call	862a8 <_Bfree>
   8314c:	d8c01617 	ldw	r3,88(sp)
   83150:	18001015 	stw	zero,64(r3)
   83154:	8800a316 	blt	r17,zero,833e4 <_dtoa_r+0x304>
   83158:	90000015 	stw	zero,0(r18)
   8315c:	a8dffc2c 	andhi	r3,r21,32752
   83160:	009ffc34 	movhi	r2,32752
   83164:	18809126 	beq	r3,r2,833ac <_dtoa_r+0x2cc>
   83168:	000d883a 	mov	r6,zero
   8316c:	000f883a 	mov	r7,zero
   83170:	a009883a 	mov	r4,r20
   83174:	a80b883a 	mov	r5,r21
   83178:	dd001215 	stw	r20,72(sp)
   8317c:	dd401315 	stw	r21,76(sp)
   83180:	008992c0 	call	8992c <__nedf2>
   83184:	1000171e 	bne	r2,zero,831e4 <_dtoa_r+0x104>
   83188:	d9802717 	ldw	r6,156(sp)
   8318c:	00800044 	movi	r2,1
   83190:	30800015 	stw	r2,0(r6)
   83194:	d8802917 	ldw	r2,164(sp)
   83198:	10029b26 	beq	r2,zero,83c08 <_dtoa_r+0xb28>
   8319c:	d9002917 	ldw	r4,164(sp)
   831a0:	00800274 	movhi	r2,9
   831a4:	10b4e744 	addi	r2,r2,-11363
   831a8:	10ffffc4 	addi	r3,r2,-1
   831ac:	20800015 	stw	r2,0(r4)
   831b0:	1805883a 	mov	r2,r3
   831b4:	dfc02517 	ldw	ra,148(sp)
   831b8:	df002417 	ldw	fp,144(sp)
   831bc:	ddc02317 	ldw	r23,140(sp)
   831c0:	dd802217 	ldw	r22,136(sp)
   831c4:	dd402117 	ldw	r21,132(sp)
   831c8:	dd002017 	ldw	r20,128(sp)
   831cc:	dcc01f17 	ldw	r19,124(sp)
   831d0:	dc801e17 	ldw	r18,120(sp)
   831d4:	dc401d17 	ldw	r17,116(sp)
   831d8:	dc001c17 	ldw	r16,112(sp)
   831dc:	dec02604 	addi	sp,sp,152
   831e0:	f800283a 	ret
   831e4:	d9001617 	ldw	r4,88(sp)
   831e8:	d9401217 	ldw	r5,72(sp)
   831ec:	d8800104 	addi	r2,sp,4
   831f0:	a80d883a 	mov	r6,r21
   831f4:	d9c00204 	addi	r7,sp,8
   831f8:	d8800015 	stw	r2,0(sp)
   831fc:	00868e40 	call	868e4 <__d2b>
   83200:	d8800715 	stw	r2,28(sp)
   83204:	a804d53a 	srli	r2,r21,20
   83208:	1101ffcc 	andi	r4,r2,2047
   8320c:	20008626 	beq	r4,zero,83428 <_dtoa_r+0x348>
   83210:	d8c01217 	ldw	r3,72(sp)
   83214:	00800434 	movhi	r2,16
   83218:	10bfffc4 	addi	r2,r2,-1
   8321c:	ddc00117 	ldw	r23,4(sp)
   83220:	a884703a 	and	r2,r21,r2
   83224:	1811883a 	mov	r8,r3
   83228:	124ffc34 	orhi	r9,r2,16368
   8322c:	25bf0044 	addi	r22,r4,-1023
   83230:	d8000815 	stw	zero,32(sp)
   83234:	0005883a 	mov	r2,zero
   83238:	00cffe34 	movhi	r3,16376
   8323c:	480b883a 	mov	r5,r9
   83240:	4009883a 	mov	r4,r8
   83244:	180f883a 	mov	r7,r3
   83248:	100d883a 	mov	r6,r2
   8324c:	00891940 	call	89194 <__subdf3>
   83250:	0218dbf4 	movhi	r8,25455
   83254:	4210d844 	addi	r8,r8,17249
   83258:	024ff4f4 	movhi	r9,16339
   8325c:	4a61e9c4 	addi	r9,r9,-30809
   83260:	480f883a 	mov	r7,r9
   83264:	400d883a 	mov	r6,r8
   83268:	180b883a 	mov	r5,r3
   8326c:	1009883a 	mov	r4,r2
   83270:	00892880 	call	89288 <__muldf3>
   83274:	0222d874 	movhi	r8,35681
   83278:	42322cc4 	addi	r8,r8,-14157
   8327c:	024ff1f4 	movhi	r9,16327
   83280:	4a628a04 	addi	r9,r9,-30168
   83284:	480f883a 	mov	r7,r9
   83288:	400d883a 	mov	r6,r8
   8328c:	180b883a 	mov	r5,r3
   83290:	1009883a 	mov	r4,r2
   83294:	00892140 	call	89214 <__adddf3>
   83298:	b009883a 	mov	r4,r22
   8329c:	1021883a 	mov	r16,r2
   832a0:	1823883a 	mov	r17,r3
   832a4:	0089b4c0 	call	89b4c <__floatsidf>
   832a8:	021427f4 	movhi	r8,20639
   832ac:	421e7ec4 	addi	r8,r8,31227
   832b0:	024ff4f4 	movhi	r9,16339
   832b4:	4a5104c4 	addi	r9,r9,17427
   832b8:	480f883a 	mov	r7,r9
   832bc:	400d883a 	mov	r6,r8
   832c0:	180b883a 	mov	r5,r3
   832c4:	1009883a 	mov	r4,r2
   832c8:	00892880 	call	89288 <__muldf3>
   832cc:	180f883a 	mov	r7,r3
   832d0:	880b883a 	mov	r5,r17
   832d4:	100d883a 	mov	r6,r2
   832d8:	8009883a 	mov	r4,r16
   832dc:	00892140 	call	89214 <__adddf3>
   832e0:	1009883a 	mov	r4,r2
   832e4:	180b883a 	mov	r5,r3
   832e8:	1021883a 	mov	r16,r2
   832ec:	1823883a 	mov	r17,r3
   832f0:	0089c440 	call	89c44 <__fixdfsi>
   832f4:	000d883a 	mov	r6,zero
   832f8:	000f883a 	mov	r7,zero
   832fc:	8009883a 	mov	r4,r16
   83300:	880b883a 	mov	r5,r17
   83304:	d8800d15 	stw	r2,52(sp)
   83308:	0089ac40 	call	89ac4 <__ltdf2>
   8330c:	10031716 	blt	r2,zero,83f6c <_dtoa_r+0xe8c>
   83310:	d8c00d17 	ldw	r3,52(sp)
   83314:	00800584 	movi	r2,22
   83318:	10c1482e 	bgeu	r2,r3,8383c <_dtoa_r+0x75c>
   8331c:	01000044 	movi	r4,1
   83320:	d9000c15 	stw	r4,48(sp)
   83324:	bd85c83a 	sub	r2,r23,r22
   83328:	11bfffc4 	addi	r6,r2,-1
   8332c:	30030b16 	blt	r6,zero,83f5c <_dtoa_r+0xe7c>
   83330:	d9800a15 	stw	r6,40(sp)
   83334:	d8001115 	stw	zero,68(sp)
   83338:	d8c00d17 	ldw	r3,52(sp)
   8333c:	1802ff16 	blt	r3,zero,83f3c <_dtoa_r+0xe5c>
   83340:	d9000a17 	ldw	r4,40(sp)
   83344:	d8c00915 	stw	r3,36(sp)
   83348:	d8001015 	stw	zero,64(sp)
   8334c:	20c9883a 	add	r4,r4,r3
   83350:	d9000a15 	stw	r4,40(sp)
   83354:	d9001717 	ldw	r4,92(sp)
   83358:	00800244 	movi	r2,9
   8335c:	11004636 	bltu	r2,r4,83478 <_dtoa_r+0x398>
   83360:	00800144 	movi	r2,5
   83364:	11020416 	blt	r2,r4,83b78 <_dtoa_r+0xa98>
   83368:	04400044 	movi	r17,1
   8336c:	d8c01717 	ldw	r3,92(sp)
   83370:	00800144 	movi	r2,5
   83374:	10c1ed36 	bltu	r2,r3,83b2c <_dtoa_r+0xa4c>
   83378:	18c5883a 	add	r2,r3,r3
   8337c:	1085883a 	add	r2,r2,r2
   83380:	00c00234 	movhi	r3,8
   83384:	18cce504 	addi	r3,r3,13204
   83388:	10c5883a 	add	r2,r2,r3
   8338c:	11000017 	ldw	r4,0(r2)
   83390:	2000683a 	jmp	r4
   83394:	00083480 	call	8348 <__alt_mem_sram_0-0x77cb8>
   83398:	00083480 	call	8348 <__alt_mem_sram_0-0x77cb8>
   8339c:	00083e80 	call	83e8 <__alt_mem_sram_0-0x77c18>
   833a0:	00083e58 	cmpnei	zero,zero,8441
   833a4:	00083e9c 	xori	zero,zero,8442
   833a8:	00083ea8 	cmpgeui	zero,zero,8442
   833ac:	d9002717 	ldw	r4,156(sp)
   833b0:	0089c3c4 	movi	r2,9999
   833b4:	20800015 	stw	r2,0(r4)
   833b8:	a0001026 	beq	r20,zero,833fc <_dtoa_r+0x31c>
   833bc:	00c00274 	movhi	r3,9
   833c0:	18f4f304 	addi	r3,r3,-11316
   833c4:	d9802917 	ldw	r6,164(sp)
   833c8:	303f7926 	beq	r6,zero,831b0 <_dtoa_r+0xd0>
   833cc:	188000c7 	ldb	r2,3(r3)
   833d0:	190000c4 	addi	r4,r3,3
   833d4:	1000101e 	bne	r2,zero,83418 <_dtoa_r+0x338>
   833d8:	d8802917 	ldw	r2,164(sp)
   833dc:	11000015 	stw	r4,0(r2)
   833e0:	003f7306 	br	831b0 <_dtoa_r+0xd0>
   833e4:	00a00034 	movhi	r2,32768
   833e8:	10bfffc4 	addi	r2,r2,-1
   833ec:	00c00044 	movi	r3,1
   833f0:	88aa703a 	and	r21,r17,r2
   833f4:	90c00015 	stw	r3,0(r18)
   833f8:	003f5806 	br	8315c <_dtoa_r+0x7c>
   833fc:	00800434 	movhi	r2,16
   83400:	10bfffc4 	addi	r2,r2,-1
   83404:	a884703a 	and	r2,r21,r2
   83408:	103fec1e 	bne	r2,zero,833bc <_dtoa_r+0x2dc>
   8340c:	00c00274 	movhi	r3,9
   83410:	18f4f004 	addi	r3,r3,-11328
   83414:	003feb06 	br	833c4 <_dtoa_r+0x2e4>
   83418:	d8802917 	ldw	r2,164(sp)
   8341c:	19000204 	addi	r4,r3,8
   83420:	11000015 	stw	r4,0(r2)
   83424:	003f6206 	br	831b0 <_dtoa_r+0xd0>
   83428:	ddc00117 	ldw	r23,4(sp)
   8342c:	d8800217 	ldw	r2,8(sp)
   83430:	01000804 	movi	r4,32
   83434:	b8c10c84 	addi	r3,r23,1074
   83438:	18a3883a 	add	r17,r3,r2
   8343c:	2441b80e 	bge	r4,r17,83b20 <_dtoa_r+0xa40>
   83440:	00c01004 	movi	r3,64
   83444:	1c47c83a 	sub	r3,r3,r17
   83448:	88bff804 	addi	r2,r17,-32
   8344c:	a8c6983a 	sll	r3,r21,r3
   83450:	a084d83a 	srl	r2,r20,r2
   83454:	1888b03a 	or	r4,r3,r2
   83458:	0089d1c0 	call	89d1c <__floatunsidf>
   8345c:	1011883a 	mov	r8,r2
   83460:	00bf8434 	movhi	r2,65040
   83464:	01000044 	movi	r4,1
   83468:	10d3883a 	add	r9,r2,r3
   8346c:	8dbef344 	addi	r22,r17,-1075
   83470:	d9000815 	stw	r4,32(sp)
   83474:	003f6f06 	br	83234 <_dtoa_r+0x154>
   83478:	d8001715 	stw	zero,92(sp)
   8347c:	04400044 	movi	r17,1
   83480:	00bfffc4 	movi	r2,-1
   83484:	00c00044 	movi	r3,1
   83488:	d8800e15 	stw	r2,56(sp)
   8348c:	d8002615 	stw	zero,152(sp)
   83490:	d8800f15 	stw	r2,60(sp)
   83494:	d8c00b15 	stw	r3,44(sp)
   83498:	1021883a 	mov	r16,r2
   8349c:	d8801617 	ldw	r2,88(sp)
   834a0:	10001115 	stw	zero,68(r2)
   834a4:	d8801617 	ldw	r2,88(sp)
   834a8:	11401117 	ldw	r5,68(r2)
   834ac:	1009883a 	mov	r4,r2
   834b0:	00868280 	call	86828 <_Balloc>
   834b4:	d8c01617 	ldw	r3,88(sp)
   834b8:	d8800515 	stw	r2,20(sp)
   834bc:	18801015 	stw	r2,64(r3)
   834c0:	00800384 	movi	r2,14
   834c4:	14006836 	bltu	r2,r16,83668 <_dtoa_r+0x588>
   834c8:	8805003a 	cmpeq	r2,r17,zero
   834cc:	1000661e 	bne	r2,zero,83668 <_dtoa_r+0x588>
   834d0:	d9000d17 	ldw	r4,52(sp)
   834d4:	0102300e 	bge	zero,r4,83d98 <_dtoa_r+0xcb8>
   834d8:	208003cc 	andi	r2,r4,15
   834dc:	100490fa 	slli	r2,r2,3
   834e0:	2025d13a 	srai	r18,r4,4
   834e4:	00c00274 	movhi	r3,9
   834e8:	18f50504 	addi	r3,r3,-11244
   834ec:	10c5883a 	add	r2,r2,r3
   834f0:	90c0040c 	andi	r3,r18,16
   834f4:	14000017 	ldw	r16,0(r2)
   834f8:	14400117 	ldw	r17,4(r2)
   834fc:	18036a1e 	bne	r3,zero,842a8 <_dtoa_r+0x11c8>
   83500:	05800084 	movi	r22,2
   83504:	90001026 	beq	r18,zero,83548 <_dtoa_r+0x468>
   83508:	04c00274 	movhi	r19,9
   8350c:	9cf53704 	addi	r19,r19,-11044
   83510:	9080004c 	andi	r2,r18,1
   83514:	1005003a 	cmpeq	r2,r2,zero
   83518:	1000081e 	bne	r2,zero,8353c <_dtoa_r+0x45c>
   8351c:	99800017 	ldw	r6,0(r19)
   83520:	99c00117 	ldw	r7,4(r19)
   83524:	880b883a 	mov	r5,r17
   83528:	8009883a 	mov	r4,r16
   8352c:	00892880 	call	89288 <__muldf3>
   83530:	1021883a 	mov	r16,r2
   83534:	b5800044 	addi	r22,r22,1
   83538:	1823883a 	mov	r17,r3
   8353c:	9025d07a 	srai	r18,r18,1
   83540:	9cc00204 	addi	r19,r19,8
   83544:	903ff21e 	bne	r18,zero,83510 <_dtoa_r+0x430>
   83548:	a80b883a 	mov	r5,r21
   8354c:	a009883a 	mov	r4,r20
   83550:	880f883a 	mov	r7,r17
   83554:	800d883a 	mov	r6,r16
   83558:	008964c0 	call	8964c <__divdf3>
   8355c:	1029883a 	mov	r20,r2
   83560:	182b883a 	mov	r21,r3
   83564:	d8c00c17 	ldw	r3,48(sp)
   83568:	1805003a 	cmpeq	r2,r3,zero
   8356c:	1000081e 	bne	r2,zero,83590 <_dtoa_r+0x4b0>
   83570:	0005883a 	mov	r2,zero
   83574:	00cffc34 	movhi	r3,16368
   83578:	180f883a 	mov	r7,r3
   8357c:	a009883a 	mov	r4,r20
   83580:	a80b883a 	mov	r5,r21
   83584:	100d883a 	mov	r6,r2
   83588:	0089ac40 	call	89ac4 <__ltdf2>
   8358c:	1003fe16 	blt	r2,zero,84588 <_dtoa_r+0x14a8>
   83590:	b009883a 	mov	r4,r22
   83594:	0089b4c0 	call	89b4c <__floatsidf>
   83598:	180b883a 	mov	r5,r3
   8359c:	1009883a 	mov	r4,r2
   835a0:	a00d883a 	mov	r6,r20
   835a4:	a80f883a 	mov	r7,r21
   835a8:	00892880 	call	89288 <__muldf3>
   835ac:	0011883a 	mov	r8,zero
   835b0:	02500734 	movhi	r9,16412
   835b4:	1009883a 	mov	r4,r2
   835b8:	180b883a 	mov	r5,r3
   835bc:	480f883a 	mov	r7,r9
   835c0:	400d883a 	mov	r6,r8
   835c4:	00892140 	call	89214 <__adddf3>
   835c8:	d9000f17 	ldw	r4,60(sp)
   835cc:	102d883a 	mov	r22,r2
   835d0:	00bf3034 	movhi	r2,64704
   835d4:	18b9883a 	add	fp,r3,r2
   835d8:	e02f883a 	mov	r23,fp
   835dc:	20028f1e 	bne	r4,zero,8401c <_dtoa_r+0xf3c>
   835e0:	0005883a 	mov	r2,zero
   835e4:	00d00534 	movhi	r3,16404
   835e8:	a009883a 	mov	r4,r20
   835ec:	a80b883a 	mov	r5,r21
   835f0:	180f883a 	mov	r7,r3
   835f4:	100d883a 	mov	r6,r2
   835f8:	00891940 	call	89194 <__subdf3>
   835fc:	1009883a 	mov	r4,r2
   83600:	e00f883a 	mov	r7,fp
   83604:	180b883a 	mov	r5,r3
   83608:	b00d883a 	mov	r6,r22
   8360c:	1025883a 	mov	r18,r2
   83610:	1827883a 	mov	r19,r3
   83614:	00899b40 	call	899b4 <__gtdf2>
   83618:	00834f16 	blt	zero,r2,84358 <_dtoa_r+0x1278>
   8361c:	e0e0003c 	xorhi	r3,fp,32768
   83620:	9009883a 	mov	r4,r18
   83624:	980b883a 	mov	r5,r19
   83628:	180f883a 	mov	r7,r3
   8362c:	b00d883a 	mov	r6,r22
   83630:	0089ac40 	call	89ac4 <__ltdf2>
   83634:	1000080e 	bge	r2,zero,83658 <_dtoa_r+0x578>
   83638:	0027883a 	mov	r19,zero
   8363c:	0025883a 	mov	r18,zero
   83640:	d8802617 	ldw	r2,152(sp)
   83644:	df000517 	ldw	fp,20(sp)
   83648:	d8000615 	stw	zero,24(sp)
   8364c:	0084303a 	nor	r2,zero,r2
   83650:	d8800d15 	stw	r2,52(sp)
   83654:	00019b06 	br	83cc4 <_dtoa_r+0xbe4>
   83658:	d9801217 	ldw	r6,72(sp)
   8365c:	d8801317 	ldw	r2,76(sp)
   83660:	3029883a 	mov	r20,r6
   83664:	102b883a 	mov	r21,r2
   83668:	d8c00217 	ldw	r3,8(sp)
   8366c:	18008516 	blt	r3,zero,83884 <_dtoa_r+0x7a4>
   83670:	d9000d17 	ldw	r4,52(sp)
   83674:	00800384 	movi	r2,14
   83678:	11008216 	blt	r2,r4,83884 <_dtoa_r+0x7a4>
   8367c:	200490fa 	slli	r2,r4,3
   83680:	d9802617 	ldw	r6,152(sp)
   83684:	00c00274 	movhi	r3,9
   83688:	18f50504 	addi	r3,r3,-11244
   8368c:	10c5883a 	add	r2,r2,r3
   83690:	14800017 	ldw	r18,0(r2)
   83694:	14c00117 	ldw	r19,4(r2)
   83698:	30031e16 	blt	r6,zero,84314 <_dtoa_r+0x1234>
   8369c:	d9000517 	ldw	r4,20(sp)
   836a0:	d8c00f17 	ldw	r3,60(sp)
   836a4:	a823883a 	mov	r17,r21
   836a8:	a021883a 	mov	r16,r20
   836ac:	192b883a 	add	r21,r3,r4
   836b0:	2039883a 	mov	fp,r4
   836b4:	00000f06 	br	836f4 <_dtoa_r+0x614>
   836b8:	0005883a 	mov	r2,zero
   836bc:	00d00934 	movhi	r3,16420
   836c0:	5009883a 	mov	r4,r10
   836c4:	580b883a 	mov	r5,r11
   836c8:	180f883a 	mov	r7,r3
   836cc:	100d883a 	mov	r6,r2
   836d0:	00892880 	call	89288 <__muldf3>
   836d4:	180b883a 	mov	r5,r3
   836d8:	000d883a 	mov	r6,zero
   836dc:	000f883a 	mov	r7,zero
   836e0:	1009883a 	mov	r4,r2
   836e4:	1021883a 	mov	r16,r2
   836e8:	1823883a 	mov	r17,r3
   836ec:	008992c0 	call	8992c <__nedf2>
   836f0:	10004526 	beq	r2,zero,83808 <_dtoa_r+0x728>
   836f4:	900d883a 	mov	r6,r18
   836f8:	980f883a 	mov	r7,r19
   836fc:	8009883a 	mov	r4,r16
   83700:	880b883a 	mov	r5,r17
   83704:	008964c0 	call	8964c <__divdf3>
   83708:	180b883a 	mov	r5,r3
   8370c:	1009883a 	mov	r4,r2
   83710:	0089c440 	call	89c44 <__fixdfsi>
   83714:	1009883a 	mov	r4,r2
   83718:	1029883a 	mov	r20,r2
   8371c:	0089b4c0 	call	89b4c <__floatsidf>
   83720:	180f883a 	mov	r7,r3
   83724:	9009883a 	mov	r4,r18
   83728:	980b883a 	mov	r5,r19
   8372c:	100d883a 	mov	r6,r2
   83730:	00892880 	call	89288 <__muldf3>
   83734:	180f883a 	mov	r7,r3
   83738:	880b883a 	mov	r5,r17
   8373c:	8009883a 	mov	r4,r16
   83740:	100d883a 	mov	r6,r2
   83744:	00891940 	call	89194 <__subdf3>
   83748:	1015883a 	mov	r10,r2
   8374c:	a0800c04 	addi	r2,r20,48
   83750:	e0800005 	stb	r2,0(fp)
   83754:	e7000044 	addi	fp,fp,1
   83758:	1817883a 	mov	r11,r3
   8375c:	e57fd61e 	bne	fp,r21,836b8 <_dtoa_r+0x5d8>
   83760:	500d883a 	mov	r6,r10
   83764:	180f883a 	mov	r7,r3
   83768:	5009883a 	mov	r4,r10
   8376c:	180b883a 	mov	r5,r3
   83770:	00892140 	call	89214 <__adddf3>
   83774:	100d883a 	mov	r6,r2
   83778:	9009883a 	mov	r4,r18
   8377c:	980b883a 	mov	r5,r19
   83780:	180f883a 	mov	r7,r3
   83784:	1021883a 	mov	r16,r2
   83788:	1823883a 	mov	r17,r3
   8378c:	0089ac40 	call	89ac4 <__ltdf2>
   83790:	10000816 	blt	r2,zero,837b4 <_dtoa_r+0x6d4>
   83794:	980b883a 	mov	r5,r19
   83798:	800d883a 	mov	r6,r16
   8379c:	880f883a 	mov	r7,r17
   837a0:	9009883a 	mov	r4,r18
   837a4:	00898a40 	call	898a4 <__eqdf2>
   837a8:	1000171e 	bne	r2,zero,83808 <_dtoa_r+0x728>
   837ac:	a080004c 	andi	r2,r20,1
   837b0:	10001526 	beq	r2,zero,83808 <_dtoa_r+0x728>
   837b4:	d8800d17 	ldw	r2,52(sp)
   837b8:	d8800415 	stw	r2,16(sp)
   837bc:	e009883a 	mov	r4,fp
   837c0:	213fffc4 	addi	r4,r4,-1
   837c4:	20c00007 	ldb	r3,0(r4)
   837c8:	00800e44 	movi	r2,57
   837cc:	1880081e 	bne	r3,r2,837f0 <_dtoa_r+0x710>
   837d0:	d8800517 	ldw	r2,20(sp)
   837d4:	113ffa1e 	bne	r2,r4,837c0 <_dtoa_r+0x6e0>
   837d8:	d8c00417 	ldw	r3,16(sp)
   837dc:	d9800517 	ldw	r6,20(sp)
   837e0:	00800c04 	movi	r2,48
   837e4:	18c00044 	addi	r3,r3,1
   837e8:	d8c00415 	stw	r3,16(sp)
   837ec:	30800005 	stb	r2,0(r6)
   837f0:	20800003 	ldbu	r2,0(r4)
   837f4:	d8c00417 	ldw	r3,16(sp)
   837f8:	27000044 	addi	fp,r4,1
   837fc:	10800044 	addi	r2,r2,1
   83800:	d8c00d15 	stw	r3,52(sp)
   83804:	20800005 	stb	r2,0(r4)
   83808:	d9001617 	ldw	r4,88(sp)
   8380c:	d9400717 	ldw	r5,28(sp)
   83810:	00862a80 	call	862a8 <_Bfree>
   83814:	e0000005 	stb	zero,0(fp)
   83818:	d9800d17 	ldw	r6,52(sp)
   8381c:	d8c02717 	ldw	r3,156(sp)
   83820:	d9002917 	ldw	r4,164(sp)
   83824:	30800044 	addi	r2,r6,1
   83828:	18800015 	stw	r2,0(r3)
   8382c:	20029c26 	beq	r4,zero,842a0 <_dtoa_r+0x11c0>
   83830:	d8c00517 	ldw	r3,20(sp)
   83834:	27000015 	stw	fp,0(r4)
   83838:	003e5d06 	br	831b0 <_dtoa_r+0xd0>
   8383c:	d9800d17 	ldw	r6,52(sp)
   83840:	00c00274 	movhi	r3,9
   83844:	18f50504 	addi	r3,r3,-11244
   83848:	d9001217 	ldw	r4,72(sp)
   8384c:	300490fa 	slli	r2,r6,3
   83850:	d9401317 	ldw	r5,76(sp)
   83854:	10c5883a 	add	r2,r2,r3
   83858:	12000017 	ldw	r8,0(r2)
   8385c:	12400117 	ldw	r9,4(r2)
   83860:	400d883a 	mov	r6,r8
   83864:	480f883a 	mov	r7,r9
   83868:	0089ac40 	call	89ac4 <__ltdf2>
   8386c:	1000030e 	bge	r2,zero,8387c <_dtoa_r+0x79c>
   83870:	d8800d17 	ldw	r2,52(sp)
   83874:	10bfffc4 	addi	r2,r2,-1
   83878:	d8800d15 	stw	r2,52(sp)
   8387c:	d8000c15 	stw	zero,48(sp)
   83880:	003ea806 	br	83324 <_dtoa_r+0x244>
   83884:	d9000b17 	ldw	r4,44(sp)
   83888:	202cc03a 	cmpne	r22,r4,zero
   8388c:	b000c71e 	bne	r22,zero,83bac <_dtoa_r+0xacc>
   83890:	dc001117 	ldw	r16,68(sp)
   83894:	dc801017 	ldw	r18,64(sp)
   83898:	0027883a 	mov	r19,zero
   8389c:	04000b0e 	bge	zero,r16,838cc <_dtoa_r+0x7ec>
   838a0:	d8c00a17 	ldw	r3,40(sp)
   838a4:	00c0090e 	bge	zero,r3,838cc <_dtoa_r+0x7ec>
   838a8:	8005883a 	mov	r2,r16
   838ac:	1c011316 	blt	r3,r16,83cfc <_dtoa_r+0xc1c>
   838b0:	d9000a17 	ldw	r4,40(sp)
   838b4:	d9801117 	ldw	r6,68(sp)
   838b8:	80a1c83a 	sub	r16,r16,r2
   838bc:	2089c83a 	sub	r4,r4,r2
   838c0:	308dc83a 	sub	r6,r6,r2
   838c4:	d9000a15 	stw	r4,40(sp)
   838c8:	d9801115 	stw	r6,68(sp)
   838cc:	d8801017 	ldw	r2,64(sp)
   838d0:	0080150e 	bge	zero,r2,83928 <_dtoa_r+0x848>
   838d4:	d8c00b17 	ldw	r3,44(sp)
   838d8:	1805003a 	cmpeq	r2,r3,zero
   838dc:	1001c91e 	bne	r2,zero,84004 <_dtoa_r+0xf24>
   838e0:	04800e0e 	bge	zero,r18,8391c <_dtoa_r+0x83c>
   838e4:	d9001617 	ldw	r4,88(sp)
   838e8:	980b883a 	mov	r5,r19
   838ec:	900d883a 	mov	r6,r18
   838f0:	00870f40 	call	870f4 <__pow5mult>
   838f4:	d9001617 	ldw	r4,88(sp)
   838f8:	d9800717 	ldw	r6,28(sp)
   838fc:	100b883a 	mov	r5,r2
   83900:	1027883a 	mov	r19,r2
   83904:	0086d380 	call	86d38 <__multiply>
   83908:	d9001617 	ldw	r4,88(sp)
   8390c:	d9400717 	ldw	r5,28(sp)
   83910:	1023883a 	mov	r17,r2
   83914:	00862a80 	call	862a8 <_Bfree>
   83918:	dc400715 	stw	r17,28(sp)
   8391c:	d9001017 	ldw	r4,64(sp)
   83920:	248dc83a 	sub	r6,r4,r18
   83924:	30010e1e 	bne	r6,zero,83d60 <_dtoa_r+0xc80>
   83928:	d9001617 	ldw	r4,88(sp)
   8392c:	04400044 	movi	r17,1
   83930:	880b883a 	mov	r5,r17
   83934:	0086f8c0 	call	86f8c <__i2b>
   83938:	d9800917 	ldw	r6,36(sp)
   8393c:	1025883a 	mov	r18,r2
   83940:	0180040e 	bge	zero,r6,83954 <_dtoa_r+0x874>
   83944:	d9001617 	ldw	r4,88(sp)
   83948:	100b883a 	mov	r5,r2
   8394c:	00870f40 	call	870f4 <__pow5mult>
   83950:	1025883a 	mov	r18,r2
   83954:	d8801717 	ldw	r2,92(sp)
   83958:	8880f30e 	bge	r17,r2,83d28 <_dtoa_r+0xc48>
   8395c:	0023883a 	mov	r17,zero
   83960:	d9800917 	ldw	r6,36(sp)
   83964:	30019e1e 	bne	r6,zero,83fe0 <_dtoa_r+0xf00>
   83968:	00c00044 	movi	r3,1
   8396c:	d9000a17 	ldw	r4,40(sp)
   83970:	20c5883a 	add	r2,r4,r3
   83974:	10c007cc 	andi	r3,r2,31
   83978:	1800841e 	bne	r3,zero,83b8c <_dtoa_r+0xaac>
   8397c:	00800704 	movi	r2,28
   83980:	d9000a17 	ldw	r4,40(sp)
   83984:	d9801117 	ldw	r6,68(sp)
   83988:	80a1883a 	add	r16,r16,r2
   8398c:	2089883a 	add	r4,r4,r2
   83990:	308d883a 	add	r6,r6,r2
   83994:	d9000a15 	stw	r4,40(sp)
   83998:	d9801115 	stw	r6,68(sp)
   8399c:	d8801117 	ldw	r2,68(sp)
   839a0:	0080050e 	bge	zero,r2,839b8 <_dtoa_r+0x8d8>
   839a4:	d9400717 	ldw	r5,28(sp)
   839a8:	d9001617 	ldw	r4,88(sp)
   839ac:	100d883a 	mov	r6,r2
   839b0:	0086bec0 	call	86bec <__lshift>
   839b4:	d8800715 	stw	r2,28(sp)
   839b8:	d8c00a17 	ldw	r3,40(sp)
   839bc:	00c0050e 	bge	zero,r3,839d4 <_dtoa_r+0x8f4>
   839c0:	d9001617 	ldw	r4,88(sp)
   839c4:	900b883a 	mov	r5,r18
   839c8:	180d883a 	mov	r6,r3
   839cc:	0086bec0 	call	86bec <__lshift>
   839d0:	1025883a 	mov	r18,r2
   839d4:	d9000c17 	ldw	r4,48(sp)
   839d8:	2005003a 	cmpeq	r2,r4,zero
   839dc:	10016f26 	beq	r2,zero,83f9c <_dtoa_r+0xebc>
   839e0:	d9000f17 	ldw	r4,60(sp)
   839e4:	0102170e 	bge	zero,r4,84244 <_dtoa_r+0x1164>
   839e8:	d9800b17 	ldw	r6,44(sp)
   839ec:	3005003a 	cmpeq	r2,r6,zero
   839f0:	1000881e 	bne	r2,zero,83c14 <_dtoa_r+0xb34>
   839f4:	0400050e 	bge	zero,r16,83a0c <_dtoa_r+0x92c>
   839f8:	d9001617 	ldw	r4,88(sp)
   839fc:	980b883a 	mov	r5,r19
   83a00:	800d883a 	mov	r6,r16
   83a04:	0086bec0 	call	86bec <__lshift>
   83a08:	1027883a 	mov	r19,r2
   83a0c:	8804c03a 	cmpne	r2,r17,zero
   83a10:	1002541e 	bne	r2,zero,84364 <_dtoa_r+0x1284>
   83a14:	980b883a 	mov	r5,r19
   83a18:	dd800517 	ldw	r22,20(sp)
   83a1c:	dcc00615 	stw	r19,24(sp)
   83a20:	a700004c 	andi	fp,r20,1
   83a24:	2827883a 	mov	r19,r5
   83a28:	d9000717 	ldw	r4,28(sp)
   83a2c:	900b883a 	mov	r5,r18
   83a30:	0082e9c0 	call	82e9c <quorem>
   83a34:	d9000717 	ldw	r4,28(sp)
   83a38:	d9400617 	ldw	r5,24(sp)
   83a3c:	1023883a 	mov	r17,r2
   83a40:	8dc00c04 	addi	r23,r17,48
   83a44:	00864040 	call	86404 <__mcmp>
   83a48:	d9001617 	ldw	r4,88(sp)
   83a4c:	900b883a 	mov	r5,r18
   83a50:	980d883a 	mov	r6,r19
   83a54:	1029883a 	mov	r20,r2
   83a58:	0086a600 	call	86a60 <__mdiff>
   83a5c:	102b883a 	mov	r21,r2
   83a60:	10800317 	ldw	r2,12(r2)
   83a64:	1001281e 	bne	r2,zero,83f08 <_dtoa_r+0xe28>
   83a68:	d9000717 	ldw	r4,28(sp)
   83a6c:	a80b883a 	mov	r5,r21
   83a70:	00864040 	call	86404 <__mcmp>
   83a74:	d9001617 	ldw	r4,88(sp)
   83a78:	1021883a 	mov	r16,r2
   83a7c:	a80b883a 	mov	r5,r21
   83a80:	00862a80 	call	862a8 <_Bfree>
   83a84:	8000041e 	bne	r16,zero,83a98 <_dtoa_r+0x9b8>
   83a88:	d8801717 	ldw	r2,92(sp)
   83a8c:	1000021e 	bne	r2,zero,83a98 <_dtoa_r+0x9b8>
   83a90:	e004c03a 	cmpne	r2,fp,zero
   83a94:	10011726 	beq	r2,zero,83ef4 <_dtoa_r+0xe14>
   83a98:	a0010616 	blt	r20,zero,83eb4 <_dtoa_r+0xdd4>
   83a9c:	a000041e 	bne	r20,zero,83ab0 <_dtoa_r+0x9d0>
   83aa0:	d8c01717 	ldw	r3,92(sp)
   83aa4:	1800021e 	bne	r3,zero,83ab0 <_dtoa_r+0x9d0>
   83aa8:	e004c03a 	cmpne	r2,fp,zero
   83aac:	10010126 	beq	r2,zero,83eb4 <_dtoa_r+0xdd4>
   83ab0:	04023d16 	blt	zero,r16,843a8 <_dtoa_r+0x12c8>
   83ab4:	b5c00005 	stb	r23,0(r22)
   83ab8:	d9800517 	ldw	r6,20(sp)
   83abc:	d9000f17 	ldw	r4,60(sp)
   83ac0:	b5800044 	addi	r22,r22,1
   83ac4:	3105883a 	add	r2,r6,r4
   83ac8:	b0806526 	beq	r22,r2,83c60 <_dtoa_r+0xb80>
   83acc:	d9400717 	ldw	r5,28(sp)
   83ad0:	d9001617 	ldw	r4,88(sp)
   83ad4:	01800284 	movi	r6,10
   83ad8:	000f883a 	mov	r7,zero
   83adc:	0086fc80 	call	86fc8 <__multadd>
   83ae0:	d8800715 	stw	r2,28(sp)
   83ae4:	d8800617 	ldw	r2,24(sp)
   83ae8:	14c10c26 	beq	r2,r19,83f1c <_dtoa_r+0xe3c>
   83aec:	d9400617 	ldw	r5,24(sp)
   83af0:	d9001617 	ldw	r4,88(sp)
   83af4:	01800284 	movi	r6,10
   83af8:	000f883a 	mov	r7,zero
   83afc:	0086fc80 	call	86fc8 <__multadd>
   83b00:	d9001617 	ldw	r4,88(sp)
   83b04:	980b883a 	mov	r5,r19
   83b08:	01800284 	movi	r6,10
   83b0c:	000f883a 	mov	r7,zero
   83b10:	d8800615 	stw	r2,24(sp)
   83b14:	0086fc80 	call	86fc8 <__multadd>
   83b18:	1027883a 	mov	r19,r2
   83b1c:	003fc206 	br	83a28 <_dtoa_r+0x948>
   83b20:	2445c83a 	sub	r2,r4,r17
   83b24:	a088983a 	sll	r4,r20,r2
   83b28:	003e4b06 	br	83458 <_dtoa_r+0x378>
   83b2c:	01bfffc4 	movi	r6,-1
   83b30:	00800044 	movi	r2,1
   83b34:	d9800e15 	stw	r6,56(sp)
   83b38:	d9800f15 	stw	r6,60(sp)
   83b3c:	d8800b15 	stw	r2,44(sp)
   83b40:	d8c01617 	ldw	r3,88(sp)
   83b44:	008005c4 	movi	r2,23
   83b48:	18001115 	stw	zero,68(r3)
   83b4c:	1580082e 	bgeu	r2,r22,83b70 <_dtoa_r+0xa90>
   83b50:	00c00104 	movi	r3,4
   83b54:	0009883a 	mov	r4,zero
   83b58:	18c7883a 	add	r3,r3,r3
   83b5c:	18800504 	addi	r2,r3,20
   83b60:	21000044 	addi	r4,r4,1
   83b64:	b0bffc2e 	bgeu	r22,r2,83b58 <_dtoa_r+0xa78>
   83b68:	d9801617 	ldw	r6,88(sp)
   83b6c:	31001115 	stw	r4,68(r6)
   83b70:	dc000f17 	ldw	r16,60(sp)
   83b74:	003e4b06 	br	834a4 <_dtoa_r+0x3c4>
   83b78:	d9801717 	ldw	r6,92(sp)
   83b7c:	0023883a 	mov	r17,zero
   83b80:	31bfff04 	addi	r6,r6,-4
   83b84:	d9801715 	stw	r6,92(sp)
   83b88:	003df806 	br	8336c <_dtoa_r+0x28c>
   83b8c:	00800804 	movi	r2,32
   83b90:	10c9c83a 	sub	r4,r2,r3
   83b94:	00c00104 	movi	r3,4
   83b98:	19005a16 	blt	r3,r4,83d04 <_dtoa_r+0xc24>
   83b9c:	008000c4 	movi	r2,3
   83ba0:	113f7e16 	blt	r2,r4,8399c <_dtoa_r+0x8bc>
   83ba4:	20800704 	addi	r2,r4,28
   83ba8:	003f7506 	br	83980 <_dtoa_r+0x8a0>
   83bac:	d9801717 	ldw	r6,92(sp)
   83bb0:	00800044 	movi	r2,1
   83bb4:	1180a10e 	bge	r2,r6,83e3c <_dtoa_r+0xd5c>
   83bb8:	d9800f17 	ldw	r6,60(sp)
   83bbc:	d8c01017 	ldw	r3,64(sp)
   83bc0:	30bfffc4 	addi	r2,r6,-1
   83bc4:	1881c616 	blt	r3,r2,842e0 <_dtoa_r+0x1200>
   83bc8:	18a5c83a 	sub	r18,r3,r2
   83bcc:	d8800f17 	ldw	r2,60(sp)
   83bd0:	10026216 	blt	r2,zero,8455c <_dtoa_r+0x147c>
   83bd4:	dc001117 	ldw	r16,68(sp)
   83bd8:	1007883a 	mov	r3,r2
   83bdc:	d9800a17 	ldw	r6,40(sp)
   83be0:	d8801117 	ldw	r2,68(sp)
   83be4:	d9001617 	ldw	r4,88(sp)
   83be8:	30cd883a 	add	r6,r6,r3
   83bec:	10c5883a 	add	r2,r2,r3
   83bf0:	01400044 	movi	r5,1
   83bf4:	d9800a15 	stw	r6,40(sp)
   83bf8:	d8801115 	stw	r2,68(sp)
   83bfc:	0086f8c0 	call	86f8c <__i2b>
   83c00:	1027883a 	mov	r19,r2
   83c04:	003f2506 	br	8389c <_dtoa_r+0x7bc>
   83c08:	00c00274 	movhi	r3,9
   83c0c:	18f4e704 	addi	r3,r3,-11364
   83c10:	003d6706 	br	831b0 <_dtoa_r+0xd0>
   83c14:	dd800517 	ldw	r22,20(sp)
   83c18:	04000044 	movi	r16,1
   83c1c:	00000706 	br	83c3c <_dtoa_r+0xb5c>
   83c20:	d9400717 	ldw	r5,28(sp)
   83c24:	d9001617 	ldw	r4,88(sp)
   83c28:	01800284 	movi	r6,10
   83c2c:	000f883a 	mov	r7,zero
   83c30:	0086fc80 	call	86fc8 <__multadd>
   83c34:	d8800715 	stw	r2,28(sp)
   83c38:	84000044 	addi	r16,r16,1
   83c3c:	d9000717 	ldw	r4,28(sp)
   83c40:	900b883a 	mov	r5,r18
   83c44:	0082e9c0 	call	82e9c <quorem>
   83c48:	15c00c04 	addi	r23,r2,48
   83c4c:	b5c00005 	stb	r23,0(r22)
   83c50:	d8c00f17 	ldw	r3,60(sp)
   83c54:	b5800044 	addi	r22,r22,1
   83c58:	80fff116 	blt	r16,r3,83c20 <_dtoa_r+0xb40>
   83c5c:	d8000615 	stw	zero,24(sp)
   83c60:	d9400717 	ldw	r5,28(sp)
   83c64:	d9001617 	ldw	r4,88(sp)
   83c68:	01800044 	movi	r6,1
   83c6c:	0086bec0 	call	86bec <__lshift>
   83c70:	1009883a 	mov	r4,r2
   83c74:	900b883a 	mov	r5,r18
   83c78:	d8800715 	stw	r2,28(sp)
   83c7c:	00864040 	call	86404 <__mcmp>
   83c80:	00803c0e 	bge	zero,r2,83d74 <_dtoa_r+0xc94>
   83c84:	b009883a 	mov	r4,r22
   83c88:	213fffc4 	addi	r4,r4,-1
   83c8c:	21400003 	ldbu	r5,0(r4)
   83c90:	00800e44 	movi	r2,57
   83c94:	28c03fcc 	andi	r3,r5,255
   83c98:	18c0201c 	xori	r3,r3,128
   83c9c:	18ffe004 	addi	r3,r3,-128
   83ca0:	1881981e 	bne	r3,r2,84304 <_dtoa_r+0x1224>
   83ca4:	d9800517 	ldw	r6,20(sp)
   83ca8:	21bff71e 	bne	r4,r6,83c88 <_dtoa_r+0xba8>
   83cac:	d8800d17 	ldw	r2,52(sp)
   83cb0:	37000044 	addi	fp,r6,1
   83cb4:	10800044 	addi	r2,r2,1
   83cb8:	d8800d15 	stw	r2,52(sp)
   83cbc:	00800c44 	movi	r2,49
   83cc0:	30800005 	stb	r2,0(r6)
   83cc4:	d9001617 	ldw	r4,88(sp)
   83cc8:	900b883a 	mov	r5,r18
   83ccc:	00862a80 	call	862a8 <_Bfree>
   83cd0:	983ecd26 	beq	r19,zero,83808 <_dtoa_r+0x728>
   83cd4:	d8c00617 	ldw	r3,24(sp)
   83cd8:	18000426 	beq	r3,zero,83cec <_dtoa_r+0xc0c>
   83cdc:	1cc00326 	beq	r3,r19,83cec <_dtoa_r+0xc0c>
   83ce0:	d9001617 	ldw	r4,88(sp)
   83ce4:	180b883a 	mov	r5,r3
   83ce8:	00862a80 	call	862a8 <_Bfree>
   83cec:	d9001617 	ldw	r4,88(sp)
   83cf0:	980b883a 	mov	r5,r19
   83cf4:	00862a80 	call	862a8 <_Bfree>
   83cf8:	003ec306 	br	83808 <_dtoa_r+0x728>
   83cfc:	1805883a 	mov	r2,r3
   83d00:	003eeb06 	br	838b0 <_dtoa_r+0x7d0>
   83d04:	d9800a17 	ldw	r6,40(sp)
   83d08:	d8c01117 	ldw	r3,68(sp)
   83d0c:	20bfff04 	addi	r2,r4,-4
   83d10:	308d883a 	add	r6,r6,r2
   83d14:	1887883a 	add	r3,r3,r2
   83d18:	80a1883a 	add	r16,r16,r2
   83d1c:	d9800a15 	stw	r6,40(sp)
   83d20:	d8c01115 	stw	r3,68(sp)
   83d24:	003f1d06 	br	8399c <_dtoa_r+0x8bc>
   83d28:	a03f0c1e 	bne	r20,zero,8395c <_dtoa_r+0x87c>
   83d2c:	00800434 	movhi	r2,16
   83d30:	10bfffc4 	addi	r2,r2,-1
   83d34:	a884703a 	and	r2,r21,r2
   83d38:	103f081e 	bne	r2,zero,8395c <_dtoa_r+0x87c>
   83d3c:	a89ffc2c 	andhi	r2,r21,32752
   83d40:	103f0626 	beq	r2,zero,8395c <_dtoa_r+0x87c>
   83d44:	d8c01117 	ldw	r3,68(sp)
   83d48:	d9000a17 	ldw	r4,40(sp)
   83d4c:	18c00044 	addi	r3,r3,1
   83d50:	21000044 	addi	r4,r4,1
   83d54:	d8c01115 	stw	r3,68(sp)
   83d58:	d9000a15 	stw	r4,40(sp)
   83d5c:	003f0006 	br	83960 <_dtoa_r+0x880>
   83d60:	d9400717 	ldw	r5,28(sp)
   83d64:	d9001617 	ldw	r4,88(sp)
   83d68:	00870f40 	call	870f4 <__pow5mult>
   83d6c:	d8800715 	stw	r2,28(sp)
   83d70:	003eed06 	br	83928 <_dtoa_r+0x848>
   83d74:	1000021e 	bne	r2,zero,83d80 <_dtoa_r+0xca0>
   83d78:	b880004c 	andi	r2,r23,1
   83d7c:	103fc11e 	bne	r2,zero,83c84 <_dtoa_r+0xba4>
   83d80:	b5bfffc4 	addi	r22,r22,-1
   83d84:	b0c00007 	ldb	r3,0(r22)
   83d88:	00800c04 	movi	r2,48
   83d8c:	18bffc26 	beq	r3,r2,83d80 <_dtoa_r+0xca0>
   83d90:	b7000044 	addi	fp,r22,1
   83d94:	003fcb06 	br	83cc4 <_dtoa_r+0xbe4>
   83d98:	d9800d17 	ldw	r6,52(sp)
   83d9c:	018fc83a 	sub	r7,zero,r6
   83da0:	3801f726 	beq	r7,zero,84580 <_dtoa_r+0x14a0>
   83da4:	398003cc 	andi	r6,r7,15
   83da8:	300c90fa 	slli	r6,r6,3
   83dac:	01400274 	movhi	r5,9
   83db0:	29750504 	addi	r5,r5,-11244
   83db4:	d9001217 	ldw	r4,72(sp)
   83db8:	314d883a 	add	r6,r6,r5
   83dbc:	30c00117 	ldw	r3,4(r6)
   83dc0:	30800017 	ldw	r2,0(r6)
   83dc4:	d9401317 	ldw	r5,76(sp)
   83dc8:	3821d13a 	srai	r16,r7,4
   83dcc:	100d883a 	mov	r6,r2
   83dd0:	180f883a 	mov	r7,r3
   83dd4:	00892880 	call	89288 <__muldf3>
   83dd8:	1011883a 	mov	r8,r2
   83ddc:	1813883a 	mov	r9,r3
   83de0:	1029883a 	mov	r20,r2
   83de4:	182b883a 	mov	r21,r3
   83de8:	8001e526 	beq	r16,zero,84580 <_dtoa_r+0x14a0>
   83dec:	05800084 	movi	r22,2
   83df0:	04400274 	movhi	r17,9
   83df4:	8c753704 	addi	r17,r17,-11044
   83df8:	8080004c 	andi	r2,r16,1
   83dfc:	1005003a 	cmpeq	r2,r2,zero
   83e00:	1000081e 	bne	r2,zero,83e24 <_dtoa_r+0xd44>
   83e04:	89800017 	ldw	r6,0(r17)
   83e08:	89c00117 	ldw	r7,4(r17)
   83e0c:	480b883a 	mov	r5,r9
   83e10:	4009883a 	mov	r4,r8
   83e14:	00892880 	call	89288 <__muldf3>
   83e18:	1011883a 	mov	r8,r2
   83e1c:	b5800044 	addi	r22,r22,1
   83e20:	1813883a 	mov	r9,r3
   83e24:	8021d07a 	srai	r16,r16,1
   83e28:	8c400204 	addi	r17,r17,8
   83e2c:	803ff21e 	bne	r16,zero,83df8 <_dtoa_r+0xd18>
   83e30:	4029883a 	mov	r20,r8
   83e34:	482b883a 	mov	r21,r9
   83e38:	003dca06 	br	83564 <_dtoa_r+0x484>
   83e3c:	d9000817 	ldw	r4,32(sp)
   83e40:	2005003a 	cmpeq	r2,r4,zero
   83e44:	1001f61e 	bne	r2,zero,84620 <_dtoa_r+0x1540>
   83e48:	dc001117 	ldw	r16,68(sp)
   83e4c:	dc801017 	ldw	r18,64(sp)
   83e50:	18c10cc4 	addi	r3,r3,1075
   83e54:	003f6106 	br	83bdc <_dtoa_r+0xafc>
   83e58:	d8000b15 	stw	zero,44(sp)
   83e5c:	d9802617 	ldw	r6,152(sp)
   83e60:	d8c00d17 	ldw	r3,52(sp)
   83e64:	30800044 	addi	r2,r6,1
   83e68:	18ad883a 	add	r22,r3,r2
   83e6c:	b13fffc4 	addi	r4,r22,-1
   83e70:	d9000e15 	stw	r4,56(sp)
   83e74:	0581f60e 	bge	zero,r22,84650 <_dtoa_r+0x1570>
   83e78:	dd800f15 	stw	r22,60(sp)
   83e7c:	003f3006 	br	83b40 <_dtoa_r+0xa60>
   83e80:	d8000b15 	stw	zero,44(sp)
   83e84:	d9002617 	ldw	r4,152(sp)
   83e88:	0101eb0e 	bge	zero,r4,84638 <_dtoa_r+0x1558>
   83e8c:	202d883a 	mov	r22,r4
   83e90:	d9000e15 	stw	r4,56(sp)
   83e94:	d9000f15 	stw	r4,60(sp)
   83e98:	003f2906 	br	83b40 <_dtoa_r+0xa60>
   83e9c:	01800044 	movi	r6,1
   83ea0:	d9800b15 	stw	r6,44(sp)
   83ea4:	003ff706 	br	83e84 <_dtoa_r+0xda4>
   83ea8:	01000044 	movi	r4,1
   83eac:	d9000b15 	stw	r4,44(sp)
   83eb0:	003fea06 	br	83e5c <_dtoa_r+0xd7c>
   83eb4:	04000c0e 	bge	zero,r16,83ee8 <_dtoa_r+0xe08>
   83eb8:	d9400717 	ldw	r5,28(sp)
   83ebc:	d9001617 	ldw	r4,88(sp)
   83ec0:	01800044 	movi	r6,1
   83ec4:	0086bec0 	call	86bec <__lshift>
   83ec8:	1009883a 	mov	r4,r2
   83ecc:	900b883a 	mov	r5,r18
   83ed0:	d8800715 	stw	r2,28(sp)
   83ed4:	00864040 	call	86404 <__mcmp>
   83ed8:	0081e00e 	bge	zero,r2,8465c <_dtoa_r+0x157c>
   83edc:	bdc00044 	addi	r23,r23,1
   83ee0:	00800e84 	movi	r2,58
   83ee4:	b881a226 	beq	r23,r2,84570 <_dtoa_r+0x1490>
   83ee8:	b7000044 	addi	fp,r22,1
   83eec:	b5c00005 	stb	r23,0(r22)
   83ef0:	003f7406 	br	83cc4 <_dtoa_r+0xbe4>
   83ef4:	00800e44 	movi	r2,57
   83ef8:	b8819d26 	beq	r23,r2,84570 <_dtoa_r+0x1490>
   83efc:	053ffa0e 	bge	zero,r20,83ee8 <_dtoa_r+0xe08>
   83f00:	8dc00c44 	addi	r23,r17,49
   83f04:	003ff806 	br	83ee8 <_dtoa_r+0xe08>
   83f08:	d9001617 	ldw	r4,88(sp)
   83f0c:	a80b883a 	mov	r5,r21
   83f10:	04000044 	movi	r16,1
   83f14:	00862a80 	call	862a8 <_Bfree>
   83f18:	003edf06 	br	83a98 <_dtoa_r+0x9b8>
   83f1c:	d9001617 	ldw	r4,88(sp)
   83f20:	980b883a 	mov	r5,r19
   83f24:	01800284 	movi	r6,10
   83f28:	000f883a 	mov	r7,zero
   83f2c:	0086fc80 	call	86fc8 <__multadd>
   83f30:	1027883a 	mov	r19,r2
   83f34:	d8800615 	stw	r2,24(sp)
   83f38:	003ebb06 	br	83a28 <_dtoa_r+0x948>
   83f3c:	d9801117 	ldw	r6,68(sp)
   83f40:	d8800d17 	ldw	r2,52(sp)
   83f44:	d8000915 	stw	zero,36(sp)
   83f48:	308dc83a 	sub	r6,r6,r2
   83f4c:	0087c83a 	sub	r3,zero,r2
   83f50:	d9801115 	stw	r6,68(sp)
   83f54:	d8c01015 	stw	r3,64(sp)
   83f58:	003cfe06 	br	83354 <_dtoa_r+0x274>
   83f5c:	018dc83a 	sub	r6,zero,r6
   83f60:	d9801115 	stw	r6,68(sp)
   83f64:	d8000a15 	stw	zero,40(sp)
   83f68:	003cf306 	br	83338 <_dtoa_r+0x258>
   83f6c:	d9000d17 	ldw	r4,52(sp)
   83f70:	0089b4c0 	call	89b4c <__floatsidf>
   83f74:	880b883a 	mov	r5,r17
   83f78:	8009883a 	mov	r4,r16
   83f7c:	180f883a 	mov	r7,r3
   83f80:	100d883a 	mov	r6,r2
   83f84:	008992c0 	call	8992c <__nedf2>
   83f88:	103ce126 	beq	r2,zero,83310 <_dtoa_r+0x230>
   83f8c:	d9800d17 	ldw	r6,52(sp)
   83f90:	31bfffc4 	addi	r6,r6,-1
   83f94:	d9800d15 	stw	r6,52(sp)
   83f98:	003cdd06 	br	83310 <_dtoa_r+0x230>
   83f9c:	d9000717 	ldw	r4,28(sp)
   83fa0:	900b883a 	mov	r5,r18
   83fa4:	00864040 	call	86404 <__mcmp>
   83fa8:	103e8d0e 	bge	r2,zero,839e0 <_dtoa_r+0x900>
   83fac:	d9400717 	ldw	r5,28(sp)
   83fb0:	d9001617 	ldw	r4,88(sp)
   83fb4:	01800284 	movi	r6,10
   83fb8:	000f883a 	mov	r7,zero
   83fbc:	0086fc80 	call	86fc8 <__multadd>
   83fc0:	d9800d17 	ldw	r6,52(sp)
   83fc4:	d8800715 	stw	r2,28(sp)
   83fc8:	31bfffc4 	addi	r6,r6,-1
   83fcc:	d9800d15 	stw	r6,52(sp)
   83fd0:	b001a71e 	bne	r22,zero,84670 <_dtoa_r+0x1590>
   83fd4:	d8800e17 	ldw	r2,56(sp)
   83fd8:	d8800f15 	stw	r2,60(sp)
   83fdc:	003e8006 	br	839e0 <_dtoa_r+0x900>
   83fe0:	90800417 	ldw	r2,16(r18)
   83fe4:	1085883a 	add	r2,r2,r2
   83fe8:	1085883a 	add	r2,r2,r2
   83fec:	1485883a 	add	r2,r2,r18
   83ff0:	11000417 	ldw	r4,16(r2)
   83ff4:	00862d00 	call	862d0 <__hi0bits>
   83ff8:	00c00804 	movi	r3,32
   83ffc:	1887c83a 	sub	r3,r3,r2
   84000:	003e5a06 	br	8396c <_dtoa_r+0x88c>
   84004:	d9400717 	ldw	r5,28(sp)
   84008:	d9801017 	ldw	r6,64(sp)
   8400c:	d9001617 	ldw	r4,88(sp)
   84010:	00870f40 	call	870f4 <__pow5mult>
   84014:	d8800715 	stw	r2,28(sp)
   84018:	003e4306 	br	83928 <_dtoa_r+0x848>
   8401c:	d9800f17 	ldw	r6,60(sp)
   84020:	d8800d17 	ldw	r2,52(sp)
   84024:	d9800315 	stw	r6,12(sp)
   84028:	d8800415 	stw	r2,16(sp)
   8402c:	d8c00b17 	ldw	r3,44(sp)
   84030:	1805003a 	cmpeq	r2,r3,zero
   84034:	1000e21e 	bne	r2,zero,843c0 <_dtoa_r+0x12e0>
   84038:	d9000317 	ldw	r4,12(sp)
   8403c:	0005883a 	mov	r2,zero
   84040:	00cff834 	movhi	r3,16352
   84044:	200c90fa 	slli	r6,r4,3
   84048:	01000274 	movhi	r4,9
   8404c:	21350504 	addi	r4,r4,-11244
   84050:	180b883a 	mov	r5,r3
   84054:	310d883a 	add	r6,r6,r4
   84058:	327fff17 	ldw	r9,-4(r6)
   8405c:	323ffe17 	ldw	r8,-8(r6)
   84060:	1009883a 	mov	r4,r2
   84064:	480f883a 	mov	r7,r9
   84068:	400d883a 	mov	r6,r8
   8406c:	008964c0 	call	8964c <__divdf3>
   84070:	180b883a 	mov	r5,r3
   84074:	b00d883a 	mov	r6,r22
   84078:	b80f883a 	mov	r7,r23
   8407c:	1009883a 	mov	r4,r2
   84080:	00891940 	call	89194 <__subdf3>
   84084:	a80b883a 	mov	r5,r21
   84088:	a009883a 	mov	r4,r20
   8408c:	d8c01915 	stw	r3,100(sp)
   84090:	d8801815 	stw	r2,96(sp)
   84094:	0089c440 	call	89c44 <__fixdfsi>
   84098:	1009883a 	mov	r4,r2
   8409c:	1027883a 	mov	r19,r2
   840a0:	0089b4c0 	call	89b4c <__floatsidf>
   840a4:	a80b883a 	mov	r5,r21
   840a8:	a009883a 	mov	r4,r20
   840ac:	180f883a 	mov	r7,r3
   840b0:	100d883a 	mov	r6,r2
   840b4:	00891940 	call	89194 <__subdf3>
   840b8:	d9801817 	ldw	r6,96(sp)
   840bc:	1823883a 	mov	r17,r3
   840c0:	d8801415 	stw	r2,80(sp)
   840c4:	302d883a 	mov	r22,r6
   840c8:	d9800517 	ldw	r6,20(sp)
   840cc:	9cc00c04 	addi	r19,r19,48
   840d0:	dc401515 	stw	r17,84(sp)
   840d4:	d8c01917 	ldw	r3,100(sp)
   840d8:	34c00005 	stb	r19,0(r6)
   840dc:	d8800517 	ldw	r2,20(sp)
   840e0:	d9401917 	ldw	r5,100(sp)
   840e4:	d9801417 	ldw	r6,80(sp)
   840e8:	b009883a 	mov	r4,r22
   840ec:	880f883a 	mov	r7,r17
   840f0:	182f883a 	mov	r23,r3
   840f4:	17000044 	addi	fp,r2,1
   840f8:	00899b40 	call	899b4 <__gtdf2>
   840fc:	00804e16 	blt	zero,r2,84238 <_dtoa_r+0x1158>
   84100:	d9801417 	ldw	r6,80(sp)
   84104:	0005883a 	mov	r2,zero
   84108:	00cffc34 	movhi	r3,16368
   8410c:	180b883a 	mov	r5,r3
   84110:	880f883a 	mov	r7,r17
   84114:	1009883a 	mov	r4,r2
   84118:	00891940 	call	89194 <__subdf3>
   8411c:	d9401917 	ldw	r5,100(sp)
   84120:	180f883a 	mov	r7,r3
   84124:	b009883a 	mov	r4,r22
   84128:	100d883a 	mov	r6,r2
   8412c:	00899b40 	call	899b4 <__gtdf2>
   84130:	00bda216 	blt	zero,r2,837bc <_dtoa_r+0x6dc>
   84134:	d8c00317 	ldw	r3,12(sp)
   84138:	00800044 	movi	r2,1
   8413c:	10c01216 	blt	r2,r3,84188 <_dtoa_r+0x10a8>
   84140:	003d4506 	br	83658 <_dtoa_r+0x578>
   84144:	d9801417 	ldw	r6,80(sp)
   84148:	0005883a 	mov	r2,zero
   8414c:	00cffc34 	movhi	r3,16368
   84150:	180b883a 	mov	r5,r3
   84154:	880f883a 	mov	r7,r17
   84158:	1009883a 	mov	r4,r2
   8415c:	00891940 	call	89194 <__subdf3>
   84160:	d9c01b17 	ldw	r7,108(sp)
   84164:	180b883a 	mov	r5,r3
   84168:	1009883a 	mov	r4,r2
   8416c:	b00d883a 	mov	r6,r22
   84170:	0089ac40 	call	89ac4 <__ltdf2>
   84174:	103d9116 	blt	r2,zero,837bc <_dtoa_r+0x6dc>
   84178:	d9800517 	ldw	r6,20(sp)
   8417c:	d9000317 	ldw	r4,12(sp)
   84180:	3105883a 	add	r2,r6,r4
   84184:	e0bd3426 	beq	fp,r2,83658 <_dtoa_r+0x578>
   84188:	04500934 	movhi	r17,16420
   8418c:	0021883a 	mov	r16,zero
   84190:	b80b883a 	mov	r5,r23
   84194:	b009883a 	mov	r4,r22
   84198:	800d883a 	mov	r6,r16
   8419c:	880f883a 	mov	r7,r17
   841a0:	00892880 	call	89288 <__muldf3>
   841a4:	d9401517 	ldw	r5,84(sp)
   841a8:	d9001417 	ldw	r4,80(sp)
   841ac:	880f883a 	mov	r7,r17
   841b0:	000d883a 	mov	r6,zero
   841b4:	d8801a15 	stw	r2,104(sp)
   841b8:	d8c01b15 	stw	r3,108(sp)
   841bc:	00892880 	call	89288 <__muldf3>
   841c0:	180b883a 	mov	r5,r3
   841c4:	1009883a 	mov	r4,r2
   841c8:	1823883a 	mov	r17,r3
   841cc:	1021883a 	mov	r16,r2
   841d0:	0089c440 	call	89c44 <__fixdfsi>
   841d4:	1009883a 	mov	r4,r2
   841d8:	102b883a 	mov	r21,r2
   841dc:	0089b4c0 	call	89b4c <__floatsidf>
   841e0:	880b883a 	mov	r5,r17
   841e4:	8009883a 	mov	r4,r16
   841e8:	180f883a 	mov	r7,r3
   841ec:	100d883a 	mov	r6,r2
   841f0:	00891940 	call	89194 <__subdf3>
   841f4:	1021883a 	mov	r16,r2
   841f8:	d9001b17 	ldw	r4,108(sp)
   841fc:	1823883a 	mov	r17,r3
   84200:	dc001415 	stw	r16,80(sp)
   84204:	ad400c04 	addi	r21,r21,48
   84208:	dc401515 	stw	r17,84(sp)
   8420c:	d8801a17 	ldw	r2,104(sp)
   84210:	e5400005 	stb	r21,0(fp)
   84214:	202f883a 	mov	r23,r4
   84218:	d9c01b17 	ldw	r7,108(sp)
   8421c:	d9001417 	ldw	r4,80(sp)
   84220:	880b883a 	mov	r5,r17
   84224:	100d883a 	mov	r6,r2
   84228:	102d883a 	mov	r22,r2
   8422c:	e7000044 	addi	fp,fp,1
   84230:	0089ac40 	call	89ac4 <__ltdf2>
   84234:	103fc30e 	bge	r2,zero,84144 <_dtoa_r+0x1064>
   84238:	d9000417 	ldw	r4,16(sp)
   8423c:	d9000d15 	stw	r4,52(sp)
   84240:	003d7106 	br	83808 <_dtoa_r+0x728>
   84244:	d9801717 	ldw	r6,92(sp)
   84248:	00800084 	movi	r2,2
   8424c:	11bde60e 	bge	r2,r6,839e8 <_dtoa_r+0x908>
   84250:	203cfb1e 	bne	r4,zero,83640 <_dtoa_r+0x560>
   84254:	d9001617 	ldw	r4,88(sp)
   84258:	900b883a 	mov	r5,r18
   8425c:	01800144 	movi	r6,5
   84260:	000f883a 	mov	r7,zero
   84264:	0086fc80 	call	86fc8 <__multadd>
   84268:	d9000717 	ldw	r4,28(sp)
   8426c:	100b883a 	mov	r5,r2
   84270:	1025883a 	mov	r18,r2
   84274:	00864040 	call	86404 <__mcmp>
   84278:	00bcf10e 	bge	zero,r2,83640 <_dtoa_r+0x560>
   8427c:	d8c00d17 	ldw	r3,52(sp)
   84280:	d9000517 	ldw	r4,20(sp)
   84284:	d8000615 	stw	zero,24(sp)
   84288:	18c00044 	addi	r3,r3,1
   8428c:	d8c00d15 	stw	r3,52(sp)
   84290:	00800c44 	movi	r2,49
   84294:	27000044 	addi	fp,r4,1
   84298:	20800005 	stb	r2,0(r4)
   8429c:	003e8906 	br	83cc4 <_dtoa_r+0xbe4>
   842a0:	d8c00517 	ldw	r3,20(sp)
   842a4:	003bc206 	br	831b0 <_dtoa_r+0xd0>
   842a8:	01800274 	movhi	r6,9
   842ac:	31b53704 	addi	r6,r6,-11044
   842b0:	30c00917 	ldw	r3,36(r6)
   842b4:	30800817 	ldw	r2,32(r6)
   842b8:	d9001217 	ldw	r4,72(sp)
   842bc:	d9401317 	ldw	r5,76(sp)
   842c0:	180f883a 	mov	r7,r3
   842c4:	100d883a 	mov	r6,r2
   842c8:	008964c0 	call	8964c <__divdf3>
   842cc:	948003cc 	andi	r18,r18,15
   842d0:	058000c4 	movi	r22,3
   842d4:	1029883a 	mov	r20,r2
   842d8:	182b883a 	mov	r21,r3
   842dc:	003c8906 	br	83504 <_dtoa_r+0x424>
   842e0:	d9001017 	ldw	r4,64(sp)
   842e4:	d9800917 	ldw	r6,36(sp)
   842e8:	0025883a 	mov	r18,zero
   842ec:	1105c83a 	sub	r2,r2,r4
   842f0:	2089883a 	add	r4,r4,r2
   842f4:	308d883a 	add	r6,r6,r2
   842f8:	d9001015 	stw	r4,64(sp)
   842fc:	d9800915 	stw	r6,36(sp)
   84300:	003e3206 	br	83bcc <_dtoa_r+0xaec>
   84304:	28800044 	addi	r2,r5,1
   84308:	27000044 	addi	fp,r4,1
   8430c:	20800005 	stb	r2,0(r4)
   84310:	003e6c06 	br	83cc4 <_dtoa_r+0xbe4>
   84314:	d8800f17 	ldw	r2,60(sp)
   84318:	00bce016 	blt	zero,r2,8369c <_dtoa_r+0x5bc>
   8431c:	d9800f17 	ldw	r6,60(sp)
   84320:	303cc51e 	bne	r6,zero,83638 <_dtoa_r+0x558>
   84324:	0005883a 	mov	r2,zero
   84328:	00d00534 	movhi	r3,16404
   8432c:	980b883a 	mov	r5,r19
   84330:	180f883a 	mov	r7,r3
   84334:	9009883a 	mov	r4,r18
   84338:	100d883a 	mov	r6,r2
   8433c:	00892880 	call	89288 <__muldf3>
   84340:	180b883a 	mov	r5,r3
   84344:	a80f883a 	mov	r7,r21
   84348:	1009883a 	mov	r4,r2
   8434c:	a00d883a 	mov	r6,r20
   84350:	0089a3c0 	call	89a3c <__gedf2>
   84354:	103cb80e 	bge	r2,zero,83638 <_dtoa_r+0x558>
   84358:	0027883a 	mov	r19,zero
   8435c:	0025883a 	mov	r18,zero
   84360:	003fc606 	br	8427c <_dtoa_r+0x119c>
   84364:	99400117 	ldw	r5,4(r19)
   84368:	d9001617 	ldw	r4,88(sp)
   8436c:	00868280 	call	86828 <_Balloc>
   84370:	99800417 	ldw	r6,16(r19)
   84374:	11000304 	addi	r4,r2,12
   84378:	99400304 	addi	r5,r19,12
   8437c:	318d883a 	add	r6,r6,r6
   84380:	318d883a 	add	r6,r6,r6
   84384:	31800204 	addi	r6,r6,8
   84388:	1023883a 	mov	r17,r2
   8438c:	00860900 	call	86090 <memcpy>
   84390:	d9001617 	ldw	r4,88(sp)
   84394:	880b883a 	mov	r5,r17
   84398:	01800044 	movi	r6,1
   8439c:	0086bec0 	call	86bec <__lshift>
   843a0:	100b883a 	mov	r5,r2
   843a4:	003d9c06 	br	83a18 <_dtoa_r+0x938>
   843a8:	00800e44 	movi	r2,57
   843ac:	b8807026 	beq	r23,r2,84570 <_dtoa_r+0x1490>
   843b0:	b8800044 	addi	r2,r23,1
   843b4:	b7000044 	addi	fp,r22,1
   843b8:	b0800005 	stb	r2,0(r22)
   843bc:	003e4106 	br	83cc4 <_dtoa_r+0xbe4>
   843c0:	d8800317 	ldw	r2,12(sp)
   843c4:	01800274 	movhi	r6,9
   843c8:	31b50504 	addi	r6,r6,-11244
   843cc:	b009883a 	mov	r4,r22
   843d0:	100e90fa 	slli	r7,r2,3
   843d4:	b80b883a 	mov	r5,r23
   843d8:	398f883a 	add	r7,r7,r6
   843dc:	38bffe17 	ldw	r2,-8(r7)
   843e0:	d9800517 	ldw	r6,20(sp)
   843e4:	38ffff17 	ldw	r3,-4(r7)
   843e8:	37000044 	addi	fp,r6,1
   843ec:	180f883a 	mov	r7,r3
   843f0:	100d883a 	mov	r6,r2
   843f4:	00892880 	call	89288 <__muldf3>
   843f8:	a80b883a 	mov	r5,r21
   843fc:	a009883a 	mov	r4,r20
   84400:	182f883a 	mov	r23,r3
   84404:	102d883a 	mov	r22,r2
   84408:	0089c440 	call	89c44 <__fixdfsi>
   8440c:	1009883a 	mov	r4,r2
   84410:	1027883a 	mov	r19,r2
   84414:	0089b4c0 	call	89b4c <__floatsidf>
   84418:	a80b883a 	mov	r5,r21
   8441c:	a009883a 	mov	r4,r20
   84420:	180f883a 	mov	r7,r3
   84424:	100d883a 	mov	r6,r2
   84428:	00891940 	call	89194 <__subdf3>
   8442c:	180b883a 	mov	r5,r3
   84430:	d8c00517 	ldw	r3,20(sp)
   84434:	9cc00c04 	addi	r19,r19,48
   84438:	1009883a 	mov	r4,r2
   8443c:	1cc00005 	stb	r19,0(r3)
   84440:	2021883a 	mov	r16,r4
   84444:	d9000317 	ldw	r4,12(sp)
   84448:	00800044 	movi	r2,1
   8444c:	2823883a 	mov	r17,r5
   84450:	20802226 	beq	r4,r2,844dc <_dtoa_r+0x13fc>
   84454:	1029883a 	mov	r20,r2
   84458:	0005883a 	mov	r2,zero
   8445c:	00d00934 	movhi	r3,16420
   84460:	180f883a 	mov	r7,r3
   84464:	100d883a 	mov	r6,r2
   84468:	880b883a 	mov	r5,r17
   8446c:	8009883a 	mov	r4,r16
   84470:	00892880 	call	89288 <__muldf3>
   84474:	180b883a 	mov	r5,r3
   84478:	1009883a 	mov	r4,r2
   8447c:	1823883a 	mov	r17,r3
   84480:	1021883a 	mov	r16,r2
   84484:	0089c440 	call	89c44 <__fixdfsi>
   84488:	1009883a 	mov	r4,r2
   8448c:	102b883a 	mov	r21,r2
   84490:	0089b4c0 	call	89b4c <__floatsidf>
   84494:	880b883a 	mov	r5,r17
   84498:	8009883a 	mov	r4,r16
   8449c:	180f883a 	mov	r7,r3
   844a0:	100d883a 	mov	r6,r2
   844a4:	00891940 	call	89194 <__subdf3>
   844a8:	180b883a 	mov	r5,r3
   844ac:	d8c00517 	ldw	r3,20(sp)
   844b0:	1009883a 	mov	r4,r2
   844b4:	ad400c04 	addi	r21,r21,48
   844b8:	1d05883a 	add	r2,r3,r20
   844bc:	15400005 	stb	r21,0(r2)
   844c0:	2021883a 	mov	r16,r4
   844c4:	d9000317 	ldw	r4,12(sp)
   844c8:	a5000044 	addi	r20,r20,1
   844cc:	2823883a 	mov	r17,r5
   844d0:	a13fe11e 	bne	r20,r4,84458 <_dtoa_r+0x1378>
   844d4:	e505883a 	add	r2,fp,r20
   844d8:	173fffc4 	addi	fp,r2,-1
   844dc:	0025883a 	mov	r18,zero
   844e0:	04cff834 	movhi	r19,16352
   844e4:	b009883a 	mov	r4,r22
   844e8:	b80b883a 	mov	r5,r23
   844ec:	900d883a 	mov	r6,r18
   844f0:	980f883a 	mov	r7,r19
   844f4:	00892140 	call	89214 <__adddf3>
   844f8:	180b883a 	mov	r5,r3
   844fc:	1009883a 	mov	r4,r2
   84500:	800d883a 	mov	r6,r16
   84504:	880f883a 	mov	r7,r17
   84508:	0089ac40 	call	89ac4 <__ltdf2>
   8450c:	103cab16 	blt	r2,zero,837bc <_dtoa_r+0x6dc>
   84510:	0009883a 	mov	r4,zero
   84514:	980b883a 	mov	r5,r19
   84518:	b80f883a 	mov	r7,r23
   8451c:	b00d883a 	mov	r6,r22
   84520:	00891940 	call	89194 <__subdf3>
   84524:	180b883a 	mov	r5,r3
   84528:	880f883a 	mov	r7,r17
   8452c:	1009883a 	mov	r4,r2
   84530:	800d883a 	mov	r6,r16
   84534:	00899b40 	call	899b4 <__gtdf2>
   84538:	00bc470e 	bge	zero,r2,83658 <_dtoa_r+0x578>
   8453c:	00c00c04 	movi	r3,48
   84540:	e73fffc4 	addi	fp,fp,-1
   84544:	e0800007 	ldb	r2,0(fp)
   84548:	10fffd26 	beq	r2,r3,84540 <_dtoa_r+0x1460>
   8454c:	d9800417 	ldw	r6,16(sp)
   84550:	e7000044 	addi	fp,fp,1
   84554:	d9800d15 	stw	r6,52(sp)
   84558:	003cab06 	br	83808 <_dtoa_r+0x728>
   8455c:	d8c00f17 	ldw	r3,60(sp)
   84560:	d9001117 	ldw	r4,68(sp)
   84564:	20e1c83a 	sub	r16,r4,r3
   84568:	0007883a 	mov	r3,zero
   8456c:	003d9b06 	br	83bdc <_dtoa_r+0xafc>
   84570:	00800e44 	movi	r2,57
   84574:	b0800005 	stb	r2,0(r22)
   84578:	b5800044 	addi	r22,r22,1
   8457c:	003dc106 	br	83c84 <_dtoa_r+0xba4>
   84580:	05800084 	movi	r22,2
   84584:	003bf706 	br	83564 <_dtoa_r+0x484>
   84588:	d9000f17 	ldw	r4,60(sp)
   8458c:	013c000e 	bge	zero,r4,83590 <_dtoa_r+0x4b0>
   84590:	d9800e17 	ldw	r6,56(sp)
   84594:	01bc300e 	bge	zero,r6,83658 <_dtoa_r+0x578>
   84598:	0005883a 	mov	r2,zero
   8459c:	00d00934 	movhi	r3,16420
   845a0:	a80b883a 	mov	r5,r21
   845a4:	180f883a 	mov	r7,r3
   845a8:	a009883a 	mov	r4,r20
   845ac:	100d883a 	mov	r6,r2
   845b0:	00892880 	call	89288 <__muldf3>
   845b4:	b1000044 	addi	r4,r22,1
   845b8:	1021883a 	mov	r16,r2
   845bc:	1823883a 	mov	r17,r3
   845c0:	0089b4c0 	call	89b4c <__floatsidf>
   845c4:	880b883a 	mov	r5,r17
   845c8:	8009883a 	mov	r4,r16
   845cc:	180f883a 	mov	r7,r3
   845d0:	100d883a 	mov	r6,r2
   845d4:	00892880 	call	89288 <__muldf3>
   845d8:	0011883a 	mov	r8,zero
   845dc:	02500734 	movhi	r9,16412
   845e0:	180b883a 	mov	r5,r3
   845e4:	480f883a 	mov	r7,r9
   845e8:	1009883a 	mov	r4,r2
   845ec:	400d883a 	mov	r6,r8
   845f0:	00892140 	call	89214 <__adddf3>
   845f4:	102d883a 	mov	r22,r2
   845f8:	00bf3034 	movhi	r2,64704
   845fc:	10ef883a 	add	r23,r2,r3
   84600:	d8800d17 	ldw	r2,52(sp)
   84604:	d8c00e17 	ldw	r3,56(sp)
   84608:	8029883a 	mov	r20,r16
   8460c:	10bfffc4 	addi	r2,r2,-1
   84610:	882b883a 	mov	r21,r17
   84614:	d8800415 	stw	r2,16(sp)
   84618:	d8c00315 	stw	r3,12(sp)
   8461c:	003e8306 	br	8402c <_dtoa_r+0xf4c>
   84620:	d8800117 	ldw	r2,4(sp)
   84624:	dc001117 	ldw	r16,68(sp)
   84628:	dc801017 	ldw	r18,64(sp)
   8462c:	00c00d84 	movi	r3,54
   84630:	1887c83a 	sub	r3,r3,r2
   84634:	003d6906 	br	83bdc <_dtoa_r+0xafc>
   84638:	01800044 	movi	r6,1
   8463c:	3021883a 	mov	r16,r6
   84640:	d9800f15 	stw	r6,60(sp)
   84644:	d9802615 	stw	r6,152(sp)
   84648:	d9800e15 	stw	r6,56(sp)
   8464c:	003b9306 	br	8349c <_dtoa_r+0x3bc>
   84650:	b021883a 	mov	r16,r22
   84654:	dd800f15 	stw	r22,60(sp)
   84658:	003b9006 	br	8349c <_dtoa_r+0x3bc>
   8465c:	103e221e 	bne	r2,zero,83ee8 <_dtoa_r+0xe08>
   84660:	b880004c 	andi	r2,r23,1
   84664:	1005003a 	cmpeq	r2,r2,zero
   84668:	103e1f1e 	bne	r2,zero,83ee8 <_dtoa_r+0xe08>
   8466c:	003e1b06 	br	83edc <_dtoa_r+0xdfc>
   84670:	d9001617 	ldw	r4,88(sp)
   84674:	980b883a 	mov	r5,r19
   84678:	01800284 	movi	r6,10
   8467c:	000f883a 	mov	r7,zero
   84680:	0086fc80 	call	86fc8 <__multadd>
   84684:	d8c00e17 	ldw	r3,56(sp)
   84688:	1027883a 	mov	r19,r2
   8468c:	d8c00f15 	stw	r3,60(sp)
   84690:	003cd306 	br	839e0 <_dtoa_r+0x900>

00084694 <_fflush_r>:
   84694:	defffb04 	addi	sp,sp,-20
   84698:	dcc00315 	stw	r19,12(sp)
   8469c:	dc800215 	stw	r18,8(sp)
   846a0:	dfc00415 	stw	ra,16(sp)
   846a4:	dc400115 	stw	r17,4(sp)
   846a8:	dc000015 	stw	r16,0(sp)
   846ac:	2027883a 	mov	r19,r4
   846b0:	2825883a 	mov	r18,r5
   846b4:	20000226 	beq	r4,zero,846c0 <_fflush_r+0x2c>
   846b8:	20800e17 	ldw	r2,56(r4)
   846bc:	10005626 	beq	r2,zero,84818 <_fflush_r+0x184>
   846c0:	9100030b 	ldhu	r4,12(r18)
   846c4:	20ffffcc 	andi	r3,r4,65535
   846c8:	18e0001c 	xori	r3,r3,32768
   846cc:	18e00004 	addi	r3,r3,-32768
   846d0:	1880020c 	andi	r2,r3,8
   846d4:	1000261e 	bne	r2,zero,84770 <_fflush_r+0xdc>
   846d8:	90c00117 	ldw	r3,4(r18)
   846dc:	20820014 	ori	r2,r4,2048
   846e0:	9080030d 	sth	r2,12(r18)
   846e4:	1009883a 	mov	r4,r2
   846e8:	00c0400e 	bge	zero,r3,847ec <_fflush_r+0x158>
   846ec:	92000a17 	ldw	r8,40(r18)
   846f0:	40004026 	beq	r8,zero,847f4 <_fflush_r+0x160>
   846f4:	2084000c 	andi	r2,r4,4096
   846f8:	10005326 	beq	r2,zero,84848 <_fflush_r+0x1b4>
   846fc:	94001417 	ldw	r16,80(r18)
   84700:	9080030b 	ldhu	r2,12(r18)
   84704:	1080010c 	andi	r2,r2,4
   84708:	1000481e 	bne	r2,zero,8482c <_fflush_r+0x198>
   8470c:	91400717 	ldw	r5,28(r18)
   84710:	9809883a 	mov	r4,r19
   84714:	800d883a 	mov	r6,r16
   84718:	000f883a 	mov	r7,zero
   8471c:	403ee83a 	callr	r8
   84720:	8080261e 	bne	r16,r2,847bc <_fflush_r+0x128>
   84724:	9080030b 	ldhu	r2,12(r18)
   84728:	91000417 	ldw	r4,16(r18)
   8472c:	90000115 	stw	zero,4(r18)
   84730:	10bdffcc 	andi	r2,r2,63487
   84734:	10ffffcc 	andi	r3,r2,65535
   84738:	18c4000c 	andi	r3,r3,4096
   8473c:	9080030d 	sth	r2,12(r18)
   84740:	91000015 	stw	r4,0(r18)
   84744:	18002b26 	beq	r3,zero,847f4 <_fflush_r+0x160>
   84748:	0007883a 	mov	r3,zero
   8474c:	1805883a 	mov	r2,r3
   84750:	94001415 	stw	r16,80(r18)
   84754:	dfc00417 	ldw	ra,16(sp)
   84758:	dcc00317 	ldw	r19,12(sp)
   8475c:	dc800217 	ldw	r18,8(sp)
   84760:	dc400117 	ldw	r17,4(sp)
   84764:	dc000017 	ldw	r16,0(sp)
   84768:	dec00504 	addi	sp,sp,20
   8476c:	f800283a 	ret
   84770:	94400417 	ldw	r17,16(r18)
   84774:	88001f26 	beq	r17,zero,847f4 <_fflush_r+0x160>
   84778:	90800017 	ldw	r2,0(r18)
   8477c:	18c000cc 	andi	r3,r3,3
   84780:	94400015 	stw	r17,0(r18)
   84784:	1461c83a 	sub	r16,r2,r17
   84788:	18002526 	beq	r3,zero,84820 <_fflush_r+0x18c>
   8478c:	0005883a 	mov	r2,zero
   84790:	90800215 	stw	r2,8(r18)
   84794:	0400170e 	bge	zero,r16,847f4 <_fflush_r+0x160>
   84798:	90c00917 	ldw	r3,36(r18)
   8479c:	91400717 	ldw	r5,28(r18)
   847a0:	880d883a 	mov	r6,r17
   847a4:	800f883a 	mov	r7,r16
   847a8:	9809883a 	mov	r4,r19
   847ac:	183ee83a 	callr	r3
   847b0:	88a3883a 	add	r17,r17,r2
   847b4:	80a1c83a 	sub	r16,r16,r2
   847b8:	00bff616 	blt	zero,r2,84794 <_fflush_r+0x100>
   847bc:	9080030b 	ldhu	r2,12(r18)
   847c0:	00ffffc4 	movi	r3,-1
   847c4:	10801014 	ori	r2,r2,64
   847c8:	9080030d 	sth	r2,12(r18)
   847cc:	1805883a 	mov	r2,r3
   847d0:	dfc00417 	ldw	ra,16(sp)
   847d4:	dcc00317 	ldw	r19,12(sp)
   847d8:	dc800217 	ldw	r18,8(sp)
   847dc:	dc400117 	ldw	r17,4(sp)
   847e0:	dc000017 	ldw	r16,0(sp)
   847e4:	dec00504 	addi	sp,sp,20
   847e8:	f800283a 	ret
   847ec:	90800f17 	ldw	r2,60(r18)
   847f0:	00bfbe16 	blt	zero,r2,846ec <_fflush_r+0x58>
   847f4:	0007883a 	mov	r3,zero
   847f8:	1805883a 	mov	r2,r3
   847fc:	dfc00417 	ldw	ra,16(sp)
   84800:	dcc00317 	ldw	r19,12(sp)
   84804:	dc800217 	ldw	r18,8(sp)
   84808:	dc400117 	ldw	r17,4(sp)
   8480c:	dc000017 	ldw	r16,0(sp)
   84810:	dec00504 	addi	sp,sp,20
   84814:	f800283a 	ret
   84818:	008492c0 	call	8492c <__sinit>
   8481c:	003fa806 	br	846c0 <_fflush_r+0x2c>
   84820:	90800517 	ldw	r2,20(r18)
   84824:	90800215 	stw	r2,8(r18)
   84828:	003fda06 	br	84794 <_fflush_r+0x100>
   8482c:	90800117 	ldw	r2,4(r18)
   84830:	90c00c17 	ldw	r3,48(r18)
   84834:	80a1c83a 	sub	r16,r16,r2
   84838:	183fb426 	beq	r3,zero,8470c <_fflush_r+0x78>
   8483c:	90800f17 	ldw	r2,60(r18)
   84840:	80a1c83a 	sub	r16,r16,r2
   84844:	003fb106 	br	8470c <_fflush_r+0x78>
   84848:	91400717 	ldw	r5,28(r18)
   8484c:	9809883a 	mov	r4,r19
   84850:	000d883a 	mov	r6,zero
   84854:	01c00044 	movi	r7,1
   84858:	403ee83a 	callr	r8
   8485c:	1021883a 	mov	r16,r2
   84860:	00bfffc4 	movi	r2,-1
   84864:	80800226 	beq	r16,r2,84870 <_fflush_r+0x1dc>
   84868:	92000a17 	ldw	r8,40(r18)
   8486c:	003fa406 	br	84700 <_fflush_r+0x6c>
   84870:	98c00017 	ldw	r3,0(r19)
   84874:	00800744 	movi	r2,29
   84878:	18bfde26 	beq	r3,r2,847f4 <_fflush_r+0x160>
   8487c:	9080030b 	ldhu	r2,12(r18)
   84880:	8007883a 	mov	r3,r16
   84884:	10801014 	ori	r2,r2,64
   84888:	9080030d 	sth	r2,12(r18)
   8488c:	003fcf06 	br	847cc <_fflush_r+0x138>

00084890 <fflush>:
   84890:	01400234 	movhi	r5,8
   84894:	2951a504 	addi	r5,r5,18068
   84898:	2007883a 	mov	r3,r4
   8489c:	20000526 	beq	r4,zero,848b4 <fflush+0x24>
   848a0:	00800274 	movhi	r2,9
   848a4:	10bc2704 	addi	r2,r2,-3940
   848a8:	11000017 	ldw	r4,0(r2)
   848ac:	180b883a 	mov	r5,r3
   848b0:	00846941 	jmpi	84694 <_fflush_r>
   848b4:	00800274 	movhi	r2,9
   848b8:	10bc2804 	addi	r2,r2,-3936
   848bc:	11000017 	ldw	r4,0(r2)
   848c0:	00854941 	jmpi	85494 <_fwalk_reent>

000848c4 <std>:
   848c4:	00800234 	movhi	r2,8
   848c8:	109e8204 	addi	r2,r2,31240
   848cc:	20800b15 	stw	r2,44(r4)
   848d0:	00800234 	movhi	r2,8
   848d4:	109ebd04 	addi	r2,r2,31476
   848d8:	20800815 	stw	r2,32(r4)
   848dc:	00c00234 	movhi	r3,8
   848e0:	18de9e04 	addi	r3,r3,31352
   848e4:	00800234 	movhi	r2,8
   848e8:	109e8404 	addi	r2,r2,31248
   848ec:	2140030d 	sth	r5,12(r4)
   848f0:	2180038d 	sth	r6,14(r4)
   848f4:	20c00915 	stw	r3,36(r4)
   848f8:	20800a15 	stw	r2,40(r4)
   848fc:	20000015 	stw	zero,0(r4)
   84900:	20000115 	stw	zero,4(r4)
   84904:	20000215 	stw	zero,8(r4)
   84908:	20000415 	stw	zero,16(r4)
   8490c:	20000515 	stw	zero,20(r4)
   84910:	20000615 	stw	zero,24(r4)
   84914:	21000715 	stw	r4,28(r4)
   84918:	f800283a 	ret

0008491c <__sfp_lock_acquire>:
   8491c:	f800283a 	ret

00084920 <__sfp_lock_release>:
   84920:	f800283a 	ret

00084924 <__sinit_lock_acquire>:
   84924:	f800283a 	ret

00084928 <__sinit_lock_release>:
   84928:	f800283a 	ret

0008492c <__sinit>:
   8492c:	20800e17 	ldw	r2,56(r4)
   84930:	defffd04 	addi	sp,sp,-12
   84934:	dc400115 	stw	r17,4(sp)
   84938:	dc000015 	stw	r16,0(sp)
   8493c:	dfc00215 	stw	ra,8(sp)
   84940:	04400044 	movi	r17,1
   84944:	01400104 	movi	r5,4
   84948:	000d883a 	mov	r6,zero
   8494c:	2021883a 	mov	r16,r4
   84950:	2200bb04 	addi	r8,r4,748
   84954:	200f883a 	mov	r7,r4
   84958:	10000526 	beq	r2,zero,84970 <__sinit+0x44>
   8495c:	dfc00217 	ldw	ra,8(sp)
   84960:	dc400117 	ldw	r17,4(sp)
   84964:	dc000017 	ldw	r16,0(sp)
   84968:	dec00304 	addi	sp,sp,12
   8496c:	f800283a 	ret
   84970:	21000117 	ldw	r4,4(r4)
   84974:	00800234 	movhi	r2,8
   84978:	10928404 	addi	r2,r2,18960
   8497c:	00c000c4 	movi	r3,3
   84980:	80800f15 	stw	r2,60(r16)
   84984:	80c0b915 	stw	r3,740(r16)
   84988:	8200ba15 	stw	r8,744(r16)
   8498c:	84400e15 	stw	r17,56(r16)
   84990:	8000b815 	stw	zero,736(r16)
   84994:	00848c40 	call	848c4 <std>
   84998:	81000217 	ldw	r4,8(r16)
   8499c:	880d883a 	mov	r6,r17
   849a0:	800f883a 	mov	r7,r16
   849a4:	01400284 	movi	r5,10
   849a8:	00848c40 	call	848c4 <std>
   849ac:	81000317 	ldw	r4,12(r16)
   849b0:	800f883a 	mov	r7,r16
   849b4:	01400484 	movi	r5,18
   849b8:	01800084 	movi	r6,2
   849bc:	dfc00217 	ldw	ra,8(sp)
   849c0:	dc400117 	ldw	r17,4(sp)
   849c4:	dc000017 	ldw	r16,0(sp)
   849c8:	dec00304 	addi	sp,sp,12
   849cc:	00848c41 	jmpi	848c4 <std>

000849d0 <__fp_lock>:
   849d0:	0005883a 	mov	r2,zero
   849d4:	f800283a 	ret

000849d8 <__fp_unlock>:
   849d8:	0005883a 	mov	r2,zero
   849dc:	f800283a 	ret

000849e0 <__fp_unlock_all>:
   849e0:	00800274 	movhi	r2,9
   849e4:	10bc2704 	addi	r2,r2,-3940
   849e8:	11000017 	ldw	r4,0(r2)
   849ec:	01400234 	movhi	r5,8
   849f0:	29527604 	addi	r5,r5,18904
   849f4:	008555c1 	jmpi	8555c <_fwalk>

000849f8 <__fp_lock_all>:
   849f8:	00800274 	movhi	r2,9
   849fc:	10bc2704 	addi	r2,r2,-3940
   84a00:	11000017 	ldw	r4,0(r2)
   84a04:	01400234 	movhi	r5,8
   84a08:	29527404 	addi	r5,r5,18896
   84a0c:	008555c1 	jmpi	8555c <_fwalk>

00084a10 <_cleanup_r>:
   84a10:	01400234 	movhi	r5,8
   84a14:	295fb404 	addi	r5,r5,32464
   84a18:	008555c1 	jmpi	8555c <_fwalk>

00084a1c <_cleanup>:
   84a1c:	00800274 	movhi	r2,9
   84a20:	10bc2804 	addi	r2,r2,-3936
   84a24:	11000017 	ldw	r4,0(r2)
   84a28:	0084a101 	jmpi	84a10 <_cleanup_r>

00084a2c <__sfmoreglue>:
   84a2c:	defffc04 	addi	sp,sp,-16
   84a30:	dc000015 	stw	r16,0(sp)
   84a34:	2821883a 	mov	r16,r5
   84a38:	dc400115 	stw	r17,4(sp)
   84a3c:	01401704 	movi	r5,92
   84a40:	2023883a 	mov	r17,r4
   84a44:	8009883a 	mov	r4,r16
   84a48:	dfc00315 	stw	ra,12(sp)
   84a4c:	dcc00215 	stw	r19,8(sp)
   84a50:	0089ffc0 	call	89ffc <__mulsi3>
   84a54:	11400304 	addi	r5,r2,12
   84a58:	8809883a 	mov	r4,r17
   84a5c:	1027883a 	mov	r19,r2
   84a60:	008586c0 	call	8586c <_malloc_r>
   84a64:	10c00304 	addi	r3,r2,12
   84a68:	1023883a 	mov	r17,r2
   84a6c:	1809883a 	mov	r4,r3
   84a70:	980d883a 	mov	r6,r19
   84a74:	000b883a 	mov	r5,zero
   84a78:	10000b26 	beq	r2,zero,84aa8 <__sfmoreglue+0x7c>
   84a7c:	14000115 	stw	r16,4(r2)
   84a80:	10c00215 	stw	r3,8(r2)
   84a84:	10000015 	stw	zero,0(r2)
   84a88:	00862100 	call	86210 <memset>
   84a8c:	8805883a 	mov	r2,r17
   84a90:	dfc00317 	ldw	ra,12(sp)
   84a94:	dcc00217 	ldw	r19,8(sp)
   84a98:	dc400117 	ldw	r17,4(sp)
   84a9c:	dc000017 	ldw	r16,0(sp)
   84aa0:	dec00404 	addi	sp,sp,16
   84aa4:	f800283a 	ret
   84aa8:	0023883a 	mov	r17,zero
   84aac:	8805883a 	mov	r2,r17
   84ab0:	dfc00317 	ldw	ra,12(sp)
   84ab4:	dcc00217 	ldw	r19,8(sp)
   84ab8:	dc400117 	ldw	r17,4(sp)
   84abc:	dc000017 	ldw	r16,0(sp)
   84ac0:	dec00404 	addi	sp,sp,16
   84ac4:	f800283a 	ret

00084ac8 <__sfp>:
   84ac8:	defffd04 	addi	sp,sp,-12
   84acc:	00800274 	movhi	r2,9
   84ad0:	10bc2804 	addi	r2,r2,-3936
   84ad4:	dc000015 	stw	r16,0(sp)
   84ad8:	14000017 	ldw	r16,0(r2)
   84adc:	dc400115 	stw	r17,4(sp)
   84ae0:	dfc00215 	stw	ra,8(sp)
   84ae4:	80800e17 	ldw	r2,56(r16)
   84ae8:	2023883a 	mov	r17,r4
   84aec:	10002626 	beq	r2,zero,84b88 <__sfp+0xc0>
   84af0:	8400b804 	addi	r16,r16,736
   84af4:	80800117 	ldw	r2,4(r16)
   84af8:	81000217 	ldw	r4,8(r16)
   84afc:	10ffffc4 	addi	r3,r2,-1
   84b00:	18000916 	blt	r3,zero,84b28 <__sfp+0x60>
   84b04:	2080030f 	ldh	r2,12(r4)
   84b08:	10000b26 	beq	r2,zero,84b38 <__sfp+0x70>
   84b0c:	017fffc4 	movi	r5,-1
   84b10:	00000206 	br	84b1c <__sfp+0x54>
   84b14:	2080030f 	ldh	r2,12(r4)
   84b18:	10000726 	beq	r2,zero,84b38 <__sfp+0x70>
   84b1c:	18ffffc4 	addi	r3,r3,-1
   84b20:	21001704 	addi	r4,r4,92
   84b24:	197ffb1e 	bne	r3,r5,84b14 <__sfp+0x4c>
   84b28:	80800017 	ldw	r2,0(r16)
   84b2c:	10001926 	beq	r2,zero,84b94 <__sfp+0xcc>
   84b30:	1021883a 	mov	r16,r2
   84b34:	003fef06 	br	84af4 <__sfp+0x2c>
   84b38:	00bfffc4 	movi	r2,-1
   84b3c:	00c00044 	movi	r3,1
   84b40:	2080038d 	sth	r2,14(r4)
   84b44:	20c0030d 	sth	r3,12(r4)
   84b48:	20000015 	stw	zero,0(r4)
   84b4c:	20000215 	stw	zero,8(r4)
   84b50:	20000115 	stw	zero,4(r4)
   84b54:	20000415 	stw	zero,16(r4)
   84b58:	20000515 	stw	zero,20(r4)
   84b5c:	20000615 	stw	zero,24(r4)
   84b60:	20000c15 	stw	zero,48(r4)
   84b64:	20000d15 	stw	zero,52(r4)
   84b68:	20001115 	stw	zero,68(r4)
   84b6c:	20001215 	stw	zero,72(r4)
   84b70:	2005883a 	mov	r2,r4
   84b74:	dfc00217 	ldw	ra,8(sp)
   84b78:	dc400117 	ldw	r17,4(sp)
   84b7c:	dc000017 	ldw	r16,0(sp)
   84b80:	dec00304 	addi	sp,sp,12
   84b84:	f800283a 	ret
   84b88:	8009883a 	mov	r4,r16
   84b8c:	008492c0 	call	8492c <__sinit>
   84b90:	003fd706 	br	84af0 <__sfp+0x28>
   84b94:	8809883a 	mov	r4,r17
   84b98:	01400104 	movi	r5,4
   84b9c:	0084a2c0 	call	84a2c <__sfmoreglue>
   84ba0:	80800015 	stw	r2,0(r16)
   84ba4:	103fe21e 	bne	r2,zero,84b30 <__sfp+0x68>
   84ba8:	00800304 	movi	r2,12
   84bac:	0009883a 	mov	r4,zero
   84bb0:	88800015 	stw	r2,0(r17)
   84bb4:	003fee06 	br	84b70 <__sfp+0xa8>

00084bb8 <_malloc_trim_r>:
   84bb8:	defffb04 	addi	sp,sp,-20
   84bbc:	dcc00315 	stw	r19,12(sp)
   84bc0:	04c00274 	movhi	r19,9
   84bc4:	9cf6a304 	addi	r19,r19,-9588
   84bc8:	dc800215 	stw	r18,8(sp)
   84bcc:	dc400115 	stw	r17,4(sp)
   84bd0:	dc000015 	stw	r16,0(sp)
   84bd4:	2823883a 	mov	r17,r5
   84bd8:	2025883a 	mov	r18,r4
   84bdc:	dfc00415 	stw	ra,16(sp)
   84be0:	008af400 	call	8af40 <__malloc_lock>
   84be4:	98800217 	ldw	r2,8(r19)
   84be8:	9009883a 	mov	r4,r18
   84bec:	000b883a 	mov	r5,zero
   84bf0:	10c00117 	ldw	r3,4(r2)
   84bf4:	00bfff04 	movi	r2,-4
   84bf8:	18a0703a 	and	r16,r3,r2
   84bfc:	8463c83a 	sub	r17,r16,r17
   84c00:	8c43fbc4 	addi	r17,r17,4079
   84c04:	8822d33a 	srli	r17,r17,12
   84c08:	0083ffc4 	movi	r2,4095
   84c0c:	8c7fffc4 	addi	r17,r17,-1
   84c10:	8822933a 	slli	r17,r17,12
   84c14:	1440060e 	bge	r2,r17,84c30 <_malloc_trim_r+0x78>
   84c18:	00879980 	call	87998 <_sbrk_r>
   84c1c:	98c00217 	ldw	r3,8(r19)
   84c20:	9009883a 	mov	r4,r18
   84c24:	044bc83a 	sub	r5,zero,r17
   84c28:	80c7883a 	add	r3,r16,r3
   84c2c:	10c00926 	beq	r2,r3,84c54 <_malloc_trim_r+0x9c>
   84c30:	008af600 	call	8af60 <__malloc_unlock>
   84c34:	0005883a 	mov	r2,zero
   84c38:	dfc00417 	ldw	ra,16(sp)
   84c3c:	dcc00317 	ldw	r19,12(sp)
   84c40:	dc800217 	ldw	r18,8(sp)
   84c44:	dc400117 	ldw	r17,4(sp)
   84c48:	dc000017 	ldw	r16,0(sp)
   84c4c:	dec00504 	addi	sp,sp,20
   84c50:	f800283a 	ret
   84c54:	9009883a 	mov	r4,r18
   84c58:	00879980 	call	87998 <_sbrk_r>
   84c5c:	844dc83a 	sub	r6,r16,r17
   84c60:	00ffffc4 	movi	r3,-1
   84c64:	9009883a 	mov	r4,r18
   84c68:	000b883a 	mov	r5,zero
   84c6c:	01c00274 	movhi	r7,9
   84c70:	39c2db04 	addi	r7,r7,2924
   84c74:	31800054 	ori	r6,r6,1
   84c78:	10c00926 	beq	r2,r3,84ca0 <_malloc_trim_r+0xe8>
   84c7c:	38800017 	ldw	r2,0(r7)
   84c80:	98c00217 	ldw	r3,8(r19)
   84c84:	9009883a 	mov	r4,r18
   84c88:	1445c83a 	sub	r2,r2,r17
   84c8c:	38800015 	stw	r2,0(r7)
   84c90:	19800115 	stw	r6,4(r3)
   84c94:	008af600 	call	8af60 <__malloc_unlock>
   84c98:	00800044 	movi	r2,1
   84c9c:	003fe606 	br	84c38 <_malloc_trim_r+0x80>
   84ca0:	00879980 	call	87998 <_sbrk_r>
   84ca4:	99800217 	ldw	r6,8(r19)
   84ca8:	100f883a 	mov	r7,r2
   84cac:	9009883a 	mov	r4,r18
   84cb0:	1187c83a 	sub	r3,r2,r6
   84cb4:	008003c4 	movi	r2,15
   84cb8:	19400054 	ori	r5,r3,1
   84cbc:	10ffdc0e 	bge	r2,r3,84c30 <_malloc_trim_r+0x78>
   84cc0:	00800274 	movhi	r2,9
   84cc4:	10bc2c04 	addi	r2,r2,-3920
   84cc8:	10c00017 	ldw	r3,0(r2)
   84ccc:	00800274 	movhi	r2,9
   84cd0:	1082db04 	addi	r2,r2,2924
   84cd4:	31400115 	stw	r5,4(r6)
   84cd8:	38c7c83a 	sub	r3,r7,r3
   84cdc:	10c00015 	stw	r3,0(r2)
   84ce0:	003fd306 	br	84c30 <_malloc_trim_r+0x78>

00084ce4 <_free_r>:
   84ce4:	defffd04 	addi	sp,sp,-12
   84ce8:	dc400115 	stw	r17,4(sp)
   84cec:	dc000015 	stw	r16,0(sp)
   84cf0:	dfc00215 	stw	ra,8(sp)
   84cf4:	2821883a 	mov	r16,r5
   84cf8:	2023883a 	mov	r17,r4
   84cfc:	28005a26 	beq	r5,zero,84e68 <_free_r+0x184>
   84d00:	008af400 	call	8af40 <__malloc_lock>
   84d04:	823ffe04 	addi	r8,r16,-8
   84d08:	41400117 	ldw	r5,4(r8)
   84d0c:	00bfff84 	movi	r2,-2
   84d10:	02800274 	movhi	r10,9
   84d14:	52b6a304 	addi	r10,r10,-9588
   84d18:	288e703a 	and	r7,r5,r2
   84d1c:	41cd883a 	add	r6,r8,r7
   84d20:	30c00117 	ldw	r3,4(r6)
   84d24:	51000217 	ldw	r4,8(r10)
   84d28:	00bfff04 	movi	r2,-4
   84d2c:	1892703a 	and	r9,r3,r2
   84d30:	5017883a 	mov	r11,r10
   84d34:	31006726 	beq	r6,r4,84ed4 <_free_r+0x1f0>
   84d38:	2880004c 	andi	r2,r5,1
   84d3c:	1005003a 	cmpeq	r2,r2,zero
   84d40:	32400115 	stw	r9,4(r6)
   84d44:	10001a1e 	bne	r2,zero,84db0 <_free_r+0xcc>
   84d48:	000b883a 	mov	r5,zero
   84d4c:	3247883a 	add	r3,r6,r9
   84d50:	18800117 	ldw	r2,4(r3)
   84d54:	1080004c 	andi	r2,r2,1
   84d58:	1000231e 	bne	r2,zero,84de8 <_free_r+0x104>
   84d5c:	280ac03a 	cmpne	r5,r5,zero
   84d60:	3a4f883a 	add	r7,r7,r9
   84d64:	2800451e 	bne	r5,zero,84e7c <_free_r+0x198>
   84d68:	31000217 	ldw	r4,8(r6)
   84d6c:	00800274 	movhi	r2,9
   84d70:	10b6a504 	addi	r2,r2,-9580
   84d74:	20807b26 	beq	r4,r2,84f64 <_free_r+0x280>
   84d78:	30800317 	ldw	r2,12(r6)
   84d7c:	3a07883a 	add	r3,r7,r8
   84d80:	19c00015 	stw	r7,0(r3)
   84d84:	11000215 	stw	r4,8(r2)
   84d88:	20800315 	stw	r2,12(r4)
   84d8c:	38800054 	ori	r2,r7,1
   84d90:	40800115 	stw	r2,4(r8)
   84d94:	28001a26 	beq	r5,zero,84e00 <_free_r+0x11c>
   84d98:	8809883a 	mov	r4,r17
   84d9c:	dfc00217 	ldw	ra,8(sp)
   84da0:	dc400117 	ldw	r17,4(sp)
   84da4:	dc000017 	ldw	r16,0(sp)
   84da8:	dec00304 	addi	sp,sp,12
   84dac:	008af601 	jmpi	8af60 <__malloc_unlock>
   84db0:	80bffe17 	ldw	r2,-8(r16)
   84db4:	50c00204 	addi	r3,r10,8
   84db8:	4091c83a 	sub	r8,r8,r2
   84dbc:	41000217 	ldw	r4,8(r8)
   84dc0:	388f883a 	add	r7,r7,r2
   84dc4:	20c06126 	beq	r4,r3,84f4c <_free_r+0x268>
   84dc8:	40800317 	ldw	r2,12(r8)
   84dcc:	3247883a 	add	r3,r6,r9
   84dd0:	000b883a 	mov	r5,zero
   84dd4:	11000215 	stw	r4,8(r2)
   84dd8:	20800315 	stw	r2,12(r4)
   84ddc:	18800117 	ldw	r2,4(r3)
   84de0:	1080004c 	andi	r2,r2,1
   84de4:	103fdd26 	beq	r2,zero,84d5c <_free_r+0x78>
   84de8:	38800054 	ori	r2,r7,1
   84dec:	3a07883a 	add	r3,r7,r8
   84df0:	280ac03a 	cmpne	r5,r5,zero
   84df4:	40800115 	stw	r2,4(r8)
   84df8:	19c00015 	stw	r7,0(r3)
   84dfc:	283fe61e 	bne	r5,zero,84d98 <_free_r+0xb4>
   84e00:	00807fc4 	movi	r2,511
   84e04:	11c01f2e 	bgeu	r2,r7,84e84 <_free_r+0x1a0>
   84e08:	3806d27a 	srli	r3,r7,9
   84e0c:	1800481e 	bne	r3,zero,84f30 <_free_r+0x24c>
   84e10:	3804d0fa 	srli	r2,r7,3
   84e14:	100690fa 	slli	r3,r2,3
   84e18:	1acd883a 	add	r6,r3,r11
   84e1c:	31400217 	ldw	r5,8(r6)
   84e20:	31405926 	beq	r6,r5,84f88 <_free_r+0x2a4>
   84e24:	28800117 	ldw	r2,4(r5)
   84e28:	00ffff04 	movi	r3,-4
   84e2c:	10c4703a 	and	r2,r2,r3
   84e30:	3880022e 	bgeu	r7,r2,84e3c <_free_r+0x158>
   84e34:	29400217 	ldw	r5,8(r5)
   84e38:	317ffa1e 	bne	r6,r5,84e24 <_free_r+0x140>
   84e3c:	29800317 	ldw	r6,12(r5)
   84e40:	41800315 	stw	r6,12(r8)
   84e44:	41400215 	stw	r5,8(r8)
   84e48:	8809883a 	mov	r4,r17
   84e4c:	2a000315 	stw	r8,12(r5)
   84e50:	32000215 	stw	r8,8(r6)
   84e54:	dfc00217 	ldw	ra,8(sp)
   84e58:	dc400117 	ldw	r17,4(sp)
   84e5c:	dc000017 	ldw	r16,0(sp)
   84e60:	dec00304 	addi	sp,sp,12
   84e64:	008af601 	jmpi	8af60 <__malloc_unlock>
   84e68:	dfc00217 	ldw	ra,8(sp)
   84e6c:	dc400117 	ldw	r17,4(sp)
   84e70:	dc000017 	ldw	r16,0(sp)
   84e74:	dec00304 	addi	sp,sp,12
   84e78:	f800283a 	ret
   84e7c:	31000217 	ldw	r4,8(r6)
   84e80:	003fbd06 	br	84d78 <_free_r+0x94>
   84e84:	3806d0fa 	srli	r3,r7,3
   84e88:	00800044 	movi	r2,1
   84e8c:	51400117 	ldw	r5,4(r10)
   84e90:	180890fa 	slli	r4,r3,3
   84e94:	1807d0ba 	srai	r3,r3,2
   84e98:	22c9883a 	add	r4,r4,r11
   84e9c:	21800217 	ldw	r6,8(r4)
   84ea0:	10c4983a 	sll	r2,r2,r3
   84ea4:	41000315 	stw	r4,12(r8)
   84ea8:	41800215 	stw	r6,8(r8)
   84eac:	288ab03a 	or	r5,r5,r2
   84eb0:	22000215 	stw	r8,8(r4)
   84eb4:	8809883a 	mov	r4,r17
   84eb8:	51400115 	stw	r5,4(r10)
   84ebc:	32000315 	stw	r8,12(r6)
   84ec0:	dfc00217 	ldw	ra,8(sp)
   84ec4:	dc400117 	ldw	r17,4(sp)
   84ec8:	dc000017 	ldw	r16,0(sp)
   84ecc:	dec00304 	addi	sp,sp,12
   84ed0:	008af601 	jmpi	8af60 <__malloc_unlock>
   84ed4:	2880004c 	andi	r2,r5,1
   84ed8:	3a4d883a 	add	r6,r7,r9
   84edc:	1000071e 	bne	r2,zero,84efc <_free_r+0x218>
   84ee0:	80bffe17 	ldw	r2,-8(r16)
   84ee4:	4091c83a 	sub	r8,r8,r2
   84ee8:	41000317 	ldw	r4,12(r8)
   84eec:	40c00217 	ldw	r3,8(r8)
   84ef0:	308d883a 	add	r6,r6,r2
   84ef4:	20c00215 	stw	r3,8(r4)
   84ef8:	19000315 	stw	r4,12(r3)
   84efc:	00800274 	movhi	r2,9
   84f00:	10bc2b04 	addi	r2,r2,-3924
   84f04:	11000017 	ldw	r4,0(r2)
   84f08:	30c00054 	ori	r3,r6,1
   84f0c:	52000215 	stw	r8,8(r10)
   84f10:	40c00115 	stw	r3,4(r8)
   84f14:	313fa036 	bltu	r6,r4,84d98 <_free_r+0xb4>
   84f18:	00800274 	movhi	r2,9
   84f1c:	1082d104 	addi	r2,r2,2884
   84f20:	11400017 	ldw	r5,0(r2)
   84f24:	8809883a 	mov	r4,r17
   84f28:	0084bb80 	call	84bb8 <_malloc_trim_r>
   84f2c:	003f9a06 	br	84d98 <_free_r+0xb4>
   84f30:	00800104 	movi	r2,4
   84f34:	10c0072e 	bgeu	r2,r3,84f54 <_free_r+0x270>
   84f38:	00800504 	movi	r2,20
   84f3c:	10c01936 	bltu	r2,r3,84fa4 <_free_r+0x2c0>
   84f40:	188016c4 	addi	r2,r3,91
   84f44:	100690fa 	slli	r3,r2,3
   84f48:	003fb306 	br	84e18 <_free_r+0x134>
   84f4c:	01400044 	movi	r5,1
   84f50:	003f7e06 	br	84d4c <_free_r+0x68>
   84f54:	3804d1ba 	srli	r2,r7,6
   84f58:	10800e04 	addi	r2,r2,56
   84f5c:	100690fa 	slli	r3,r2,3
   84f60:	003fad06 	br	84e18 <_free_r+0x134>
   84f64:	22000315 	stw	r8,12(r4)
   84f68:	22000215 	stw	r8,8(r4)
   84f6c:	3a05883a 	add	r2,r7,r8
   84f70:	38c00054 	ori	r3,r7,1
   84f74:	11c00015 	stw	r7,0(r2)
   84f78:	41000215 	stw	r4,8(r8)
   84f7c:	40c00115 	stw	r3,4(r8)
   84f80:	41000315 	stw	r4,12(r8)
   84f84:	003f8406 	br	84d98 <_free_r+0xb4>
   84f88:	1005d0ba 	srai	r2,r2,2
   84f8c:	00c00044 	movi	r3,1
   84f90:	51000117 	ldw	r4,4(r10)
   84f94:	1886983a 	sll	r3,r3,r2
   84f98:	20c8b03a 	or	r4,r4,r3
   84f9c:	51000115 	stw	r4,4(r10)
   84fa0:	003fa706 	br	84e40 <_free_r+0x15c>
   84fa4:	00801504 	movi	r2,84
   84fa8:	10c00436 	bltu	r2,r3,84fbc <_free_r+0x2d8>
   84fac:	3804d33a 	srli	r2,r7,12
   84fb0:	10801b84 	addi	r2,r2,110
   84fb4:	100690fa 	slli	r3,r2,3
   84fb8:	003f9706 	br	84e18 <_free_r+0x134>
   84fbc:	00805504 	movi	r2,340
   84fc0:	10c00436 	bltu	r2,r3,84fd4 <_free_r+0x2f0>
   84fc4:	3804d3fa 	srli	r2,r7,15
   84fc8:	10801dc4 	addi	r2,r2,119
   84fcc:	100690fa 	slli	r3,r2,3
   84fd0:	003f9106 	br	84e18 <_free_r+0x134>
   84fd4:	00815504 	movi	r2,1364
   84fd8:	10c0032e 	bgeu	r2,r3,84fe8 <_free_r+0x304>
   84fdc:	00801f84 	movi	r2,126
   84fe0:	00c0fc04 	movi	r3,1008
   84fe4:	003f8c06 	br	84e18 <_free_r+0x134>
   84fe8:	3804d4ba 	srli	r2,r7,18
   84fec:	10801f04 	addi	r2,r2,124
   84ff0:	100690fa 	slli	r3,r2,3
   84ff4:	003f8806 	br	84e18 <_free_r+0x134>

00084ff8 <__sfvwrite_r>:
   84ff8:	30800217 	ldw	r2,8(r6)
   84ffc:	defff504 	addi	sp,sp,-44
   85000:	df000915 	stw	fp,36(sp)
   85004:	dd800715 	stw	r22,28(sp)
   85008:	dc800315 	stw	r18,12(sp)
   8500c:	dfc00a15 	stw	ra,40(sp)
   85010:	ddc00815 	stw	r23,32(sp)
   85014:	dd400615 	stw	r21,24(sp)
   85018:	dd000515 	stw	r20,20(sp)
   8501c:	dcc00415 	stw	r19,16(sp)
   85020:	dc400215 	stw	r17,8(sp)
   85024:	dc000115 	stw	r16,4(sp)
   85028:	302d883a 	mov	r22,r6
   8502c:	2039883a 	mov	fp,r4
   85030:	2825883a 	mov	r18,r5
   85034:	10001c26 	beq	r2,zero,850a8 <__sfvwrite_r+0xb0>
   85038:	29c0030b 	ldhu	r7,12(r5)
   8503c:	3880020c 	andi	r2,r7,8
   85040:	10002726 	beq	r2,zero,850e0 <__sfvwrite_r+0xe8>
   85044:	28800417 	ldw	r2,16(r5)
   85048:	10002526 	beq	r2,zero,850e0 <__sfvwrite_r+0xe8>
   8504c:	3880008c 	andi	r2,r7,2
   85050:	b5400017 	ldw	r21,0(r22)
   85054:	10002826 	beq	r2,zero,850f8 <__sfvwrite_r+0x100>
   85058:	0021883a 	mov	r16,zero
   8505c:	0023883a 	mov	r17,zero
   85060:	880d883a 	mov	r6,r17
   85064:	e009883a 	mov	r4,fp
   85068:	00810004 	movi	r2,1024
   8506c:	80006e26 	beq	r16,zero,85228 <__sfvwrite_r+0x230>
   85070:	800f883a 	mov	r7,r16
   85074:	91400717 	ldw	r5,28(r18)
   85078:	1400012e 	bgeu	r2,r16,85080 <__sfvwrite_r+0x88>
   8507c:	100f883a 	mov	r7,r2
   85080:	90c00917 	ldw	r3,36(r18)
   85084:	183ee83a 	callr	r3
   85088:	1007883a 	mov	r3,r2
   8508c:	80a1c83a 	sub	r16,r16,r2
   85090:	88a3883a 	add	r17,r17,r2
   85094:	00806d0e 	bge	zero,r2,8524c <__sfvwrite_r+0x254>
   85098:	b0800217 	ldw	r2,8(r22)
   8509c:	10c5c83a 	sub	r2,r2,r3
   850a0:	b0800215 	stw	r2,8(r22)
   850a4:	103fee1e 	bne	r2,zero,85060 <__sfvwrite_r+0x68>
   850a8:	0009883a 	mov	r4,zero
   850ac:	2005883a 	mov	r2,r4
   850b0:	dfc00a17 	ldw	ra,40(sp)
   850b4:	df000917 	ldw	fp,36(sp)
   850b8:	ddc00817 	ldw	r23,32(sp)
   850bc:	dd800717 	ldw	r22,28(sp)
   850c0:	dd400617 	ldw	r21,24(sp)
   850c4:	dd000517 	ldw	r20,20(sp)
   850c8:	dcc00417 	ldw	r19,16(sp)
   850cc:	dc800317 	ldw	r18,12(sp)
   850d0:	dc400217 	ldw	r17,8(sp)
   850d4:	dc000117 	ldw	r16,4(sp)
   850d8:	dec00b04 	addi	sp,sp,44
   850dc:	f800283a 	ret
   850e0:	0082d600 	call	82d60 <__swsetup_r>
   850e4:	1000e41e 	bne	r2,zero,85478 <__sfvwrite_r+0x480>
   850e8:	91c0030b 	ldhu	r7,12(r18)
   850ec:	b5400017 	ldw	r21,0(r22)
   850f0:	3880008c 	andi	r2,r7,2
   850f4:	103fd81e 	bne	r2,zero,85058 <__sfvwrite_r+0x60>
   850f8:	3880004c 	andi	r2,r7,1
   850fc:	1005003a 	cmpeq	r2,r2,zero
   85100:	10005726 	beq	r2,zero,85260 <__sfvwrite_r+0x268>
   85104:	0029883a 	mov	r20,zero
   85108:	002f883a 	mov	r23,zero
   8510c:	a0004226 	beq	r20,zero,85218 <__sfvwrite_r+0x220>
   85110:	3880800c 	andi	r2,r7,512
   85114:	94000217 	ldw	r16,8(r18)
   85118:	10008b26 	beq	r2,zero,85348 <__sfvwrite_r+0x350>
   8511c:	800d883a 	mov	r6,r16
   85120:	a400a536 	bltu	r20,r16,853b8 <__sfvwrite_r+0x3c0>
   85124:	3881200c 	andi	r2,r7,1152
   85128:	10002726 	beq	r2,zero,851c8 <__sfvwrite_r+0x1d0>
   8512c:	90800517 	ldw	r2,20(r18)
   85130:	92000417 	ldw	r8,16(r18)
   85134:	91400017 	ldw	r5,0(r18)
   85138:	1087883a 	add	r3,r2,r2
   8513c:	1887883a 	add	r3,r3,r2
   85140:	1808d7fa 	srli	r4,r3,31
   85144:	2a21c83a 	sub	r16,r5,r8
   85148:	80800044 	addi	r2,r16,1
   8514c:	20c9883a 	add	r4,r4,r3
   85150:	2027d07a 	srai	r19,r4,1
   85154:	a085883a 	add	r2,r20,r2
   85158:	980d883a 	mov	r6,r19
   8515c:	9880022e 	bgeu	r19,r2,85168 <__sfvwrite_r+0x170>
   85160:	1027883a 	mov	r19,r2
   85164:	100d883a 	mov	r6,r2
   85168:	3881000c 	andi	r2,r7,1024
   8516c:	1000b826 	beq	r2,zero,85450 <__sfvwrite_r+0x458>
   85170:	300b883a 	mov	r5,r6
   85174:	e009883a 	mov	r4,fp
   85178:	008586c0 	call	8586c <_malloc_r>
   8517c:	10003126 	beq	r2,zero,85244 <__sfvwrite_r+0x24c>
   85180:	91400417 	ldw	r5,16(r18)
   85184:	1009883a 	mov	r4,r2
   85188:	800d883a 	mov	r6,r16
   8518c:	1023883a 	mov	r17,r2
   85190:	00860900 	call	86090 <memcpy>
   85194:	90c0030b 	ldhu	r3,12(r18)
   85198:	00beffc4 	movi	r2,-1025
   8519c:	1886703a 	and	r3,r3,r2
   851a0:	18c02014 	ori	r3,r3,128
   851a4:	90c0030d 	sth	r3,12(r18)
   851a8:	9c07c83a 	sub	r3,r19,r16
   851ac:	8c05883a 	add	r2,r17,r16
   851b0:	a00d883a 	mov	r6,r20
   851b4:	a021883a 	mov	r16,r20
   851b8:	90800015 	stw	r2,0(r18)
   851bc:	90c00215 	stw	r3,8(r18)
   851c0:	94400415 	stw	r17,16(r18)
   851c4:	94c00515 	stw	r19,20(r18)
   851c8:	91000017 	ldw	r4,0(r18)
   851cc:	b80b883a 	mov	r5,r23
   851d0:	a023883a 	mov	r17,r20
   851d4:	00861300 	call	86130 <memmove>
   851d8:	90c00217 	ldw	r3,8(r18)
   851dc:	90800017 	ldw	r2,0(r18)
   851e0:	a027883a 	mov	r19,r20
   851e4:	1c07c83a 	sub	r3,r3,r16
   851e8:	1405883a 	add	r2,r2,r16
   851ec:	90c00215 	stw	r3,8(r18)
   851f0:	a021883a 	mov	r16,r20
   851f4:	90800015 	stw	r2,0(r18)
   851f8:	b0800217 	ldw	r2,8(r22)
   851fc:	1405c83a 	sub	r2,r2,r16
   85200:	b0800215 	stw	r2,8(r22)
   85204:	103fa826 	beq	r2,zero,850a8 <__sfvwrite_r+0xb0>
   85208:	a469c83a 	sub	r20,r20,r17
   8520c:	91c0030b 	ldhu	r7,12(r18)
   85210:	bcef883a 	add	r23,r23,r19
   85214:	a03fbe1e 	bne	r20,zero,85110 <__sfvwrite_r+0x118>
   85218:	adc00017 	ldw	r23,0(r21)
   8521c:	ad000117 	ldw	r20,4(r21)
   85220:	ad400204 	addi	r21,r21,8
   85224:	003fb906 	br	8510c <__sfvwrite_r+0x114>
   85228:	ac400017 	ldw	r17,0(r21)
   8522c:	ac000117 	ldw	r16,4(r21)
   85230:	ad400204 	addi	r21,r21,8
   85234:	003f8a06 	br	85060 <__sfvwrite_r+0x68>
   85238:	91400417 	ldw	r5,16(r18)
   8523c:	e009883a 	mov	r4,fp
   85240:	0084ce40 	call	84ce4 <_free_r>
   85244:	00800304 	movi	r2,12
   85248:	e0800015 	stw	r2,0(fp)
   8524c:	9080030b 	ldhu	r2,12(r18)
   85250:	013fffc4 	movi	r4,-1
   85254:	10801014 	ori	r2,r2,64
   85258:	9080030d 	sth	r2,12(r18)
   8525c:	003f9306 	br	850ac <__sfvwrite_r+0xb4>
   85260:	0027883a 	mov	r19,zero
   85264:	002f883a 	mov	r23,zero
   85268:	d8000015 	stw	zero,0(sp)
   8526c:	0029883a 	mov	r20,zero
   85270:	98001e26 	beq	r19,zero,852ec <__sfvwrite_r+0x2f4>
   85274:	d8c00017 	ldw	r3,0(sp)
   85278:	1804c03a 	cmpne	r2,r3,zero
   8527c:	10005e26 	beq	r2,zero,853f8 <__sfvwrite_r+0x400>
   85280:	9821883a 	mov	r16,r19
   85284:	a4c0012e 	bgeu	r20,r19,8528c <__sfvwrite_r+0x294>
   85288:	a021883a 	mov	r16,r20
   8528c:	91000017 	ldw	r4,0(r18)
   85290:	90800417 	ldw	r2,16(r18)
   85294:	91800217 	ldw	r6,8(r18)
   85298:	91c00517 	ldw	r7,20(r18)
   8529c:	1100022e 	bgeu	r2,r4,852a8 <__sfvwrite_r+0x2b0>
   852a0:	31e3883a 	add	r17,r6,r7
   852a4:	8c001616 	blt	r17,r16,85300 <__sfvwrite_r+0x308>
   852a8:	81c03816 	blt	r16,r7,8538c <__sfvwrite_r+0x394>
   852ac:	90c00917 	ldw	r3,36(r18)
   852b0:	91400717 	ldw	r5,28(r18)
   852b4:	e009883a 	mov	r4,fp
   852b8:	b80d883a 	mov	r6,r23
   852bc:	183ee83a 	callr	r3
   852c0:	1023883a 	mov	r17,r2
   852c4:	00bfe10e 	bge	zero,r2,8524c <__sfvwrite_r+0x254>
   852c8:	a469c83a 	sub	r20,r20,r17
   852cc:	a0001826 	beq	r20,zero,85330 <__sfvwrite_r+0x338>
   852d0:	b0800217 	ldw	r2,8(r22)
   852d4:	1445c83a 	sub	r2,r2,r17
   852d8:	b0800215 	stw	r2,8(r22)
   852dc:	103f7226 	beq	r2,zero,850a8 <__sfvwrite_r+0xb0>
   852e0:	9c67c83a 	sub	r19,r19,r17
   852e4:	bc6f883a 	add	r23,r23,r17
   852e8:	983fe21e 	bne	r19,zero,85274 <__sfvwrite_r+0x27c>
   852ec:	adc00017 	ldw	r23,0(r21)
   852f0:	acc00117 	ldw	r19,4(r21)
   852f4:	ad400204 	addi	r21,r21,8
   852f8:	d8000015 	stw	zero,0(sp)
   852fc:	003fdc06 	br	85270 <__sfvwrite_r+0x278>
   85300:	b80b883a 	mov	r5,r23
   85304:	880d883a 	mov	r6,r17
   85308:	00861300 	call	86130 <memmove>
   8530c:	90c00017 	ldw	r3,0(r18)
   85310:	e009883a 	mov	r4,fp
   85314:	900b883a 	mov	r5,r18
   85318:	1c47883a 	add	r3,r3,r17
   8531c:	90c00015 	stw	r3,0(r18)
   85320:	00846940 	call	84694 <_fflush_r>
   85324:	103fc91e 	bne	r2,zero,8524c <__sfvwrite_r+0x254>
   85328:	a469c83a 	sub	r20,r20,r17
   8532c:	a03fe81e 	bne	r20,zero,852d0 <__sfvwrite_r+0x2d8>
   85330:	e009883a 	mov	r4,fp
   85334:	900b883a 	mov	r5,r18
   85338:	00846940 	call	84694 <_fflush_r>
   8533c:	103fc31e 	bne	r2,zero,8524c <__sfvwrite_r+0x254>
   85340:	d8000015 	stw	zero,0(sp)
   85344:	003fe206 	br	852d0 <__sfvwrite_r+0x2d8>
   85348:	91000017 	ldw	r4,0(r18)
   8534c:	90800417 	ldw	r2,16(r18)
   85350:	1100022e 	bgeu	r2,r4,8535c <__sfvwrite_r+0x364>
   85354:	8023883a 	mov	r17,r16
   85358:	85003136 	bltu	r16,r20,85420 <__sfvwrite_r+0x428>
   8535c:	91c00517 	ldw	r7,20(r18)
   85360:	a1c01836 	bltu	r20,r7,853c4 <__sfvwrite_r+0x3cc>
   85364:	90c00917 	ldw	r3,36(r18)
   85368:	91400717 	ldw	r5,28(r18)
   8536c:	e009883a 	mov	r4,fp
   85370:	b80d883a 	mov	r6,r23
   85374:	183ee83a 	callr	r3
   85378:	1021883a 	mov	r16,r2
   8537c:	00bfb30e 	bge	zero,r2,8524c <__sfvwrite_r+0x254>
   85380:	1023883a 	mov	r17,r2
   85384:	1027883a 	mov	r19,r2
   85388:	003f9b06 	br	851f8 <__sfvwrite_r+0x200>
   8538c:	b80b883a 	mov	r5,r23
   85390:	800d883a 	mov	r6,r16
   85394:	00861300 	call	86130 <memmove>
   85398:	90c00217 	ldw	r3,8(r18)
   8539c:	90800017 	ldw	r2,0(r18)
   853a0:	8023883a 	mov	r17,r16
   853a4:	1c07c83a 	sub	r3,r3,r16
   853a8:	1405883a 	add	r2,r2,r16
   853ac:	90c00215 	stw	r3,8(r18)
   853b0:	90800015 	stw	r2,0(r18)
   853b4:	003fc406 	br	852c8 <__sfvwrite_r+0x2d0>
   853b8:	a00d883a 	mov	r6,r20
   853bc:	a021883a 	mov	r16,r20
   853c0:	003f8106 	br	851c8 <__sfvwrite_r+0x1d0>
   853c4:	b80b883a 	mov	r5,r23
   853c8:	a00d883a 	mov	r6,r20
   853cc:	00861300 	call	86130 <memmove>
   853d0:	90c00217 	ldw	r3,8(r18)
   853d4:	90800017 	ldw	r2,0(r18)
   853d8:	a021883a 	mov	r16,r20
   853dc:	1d07c83a 	sub	r3,r3,r20
   853e0:	1505883a 	add	r2,r2,r20
   853e4:	a023883a 	mov	r17,r20
   853e8:	a027883a 	mov	r19,r20
   853ec:	90c00215 	stw	r3,8(r18)
   853f0:	90800015 	stw	r2,0(r18)
   853f4:	003f8006 	br	851f8 <__sfvwrite_r+0x200>
   853f8:	b809883a 	mov	r4,r23
   853fc:	01400284 	movi	r5,10
   85400:	980d883a 	mov	r6,r19
   85404:	0085fac0 	call	85fac <memchr>
   85408:	10001726 	beq	r2,zero,85468 <__sfvwrite_r+0x470>
   8540c:	15c5c83a 	sub	r2,r2,r23
   85410:	15000044 	addi	r20,r2,1
   85414:	00800044 	movi	r2,1
   85418:	d8800015 	stw	r2,0(sp)
   8541c:	003f9806 	br	85280 <__sfvwrite_r+0x288>
   85420:	b80b883a 	mov	r5,r23
   85424:	800d883a 	mov	r6,r16
   85428:	00861300 	call	86130 <memmove>
   8542c:	90c00017 	ldw	r3,0(r18)
   85430:	e009883a 	mov	r4,fp
   85434:	900b883a 	mov	r5,r18
   85438:	1c07883a 	add	r3,r3,r16
   8543c:	90c00015 	stw	r3,0(r18)
   85440:	8027883a 	mov	r19,r16
   85444:	00846940 	call	84694 <_fflush_r>
   85448:	103f6b26 	beq	r2,zero,851f8 <__sfvwrite_r+0x200>
   8544c:	003f7f06 	br	8524c <__sfvwrite_r+0x254>
   85450:	400b883a 	mov	r5,r8
   85454:	e009883a 	mov	r4,fp
   85458:	00873340 	call	87334 <_realloc_r>
   8545c:	103f7626 	beq	r2,zero,85238 <__sfvwrite_r+0x240>
   85460:	1023883a 	mov	r17,r2
   85464:	003f5006 	br	851a8 <__sfvwrite_r+0x1b0>
   85468:	00c00044 	movi	r3,1
   8546c:	9d000044 	addi	r20,r19,1
   85470:	d8c00015 	stw	r3,0(sp)
   85474:	003f8206 	br	85280 <__sfvwrite_r+0x288>
   85478:	9080030b 	ldhu	r2,12(r18)
   8547c:	00c00244 	movi	r3,9
   85480:	013fffc4 	movi	r4,-1
   85484:	10801014 	ori	r2,r2,64
   85488:	9080030d 	sth	r2,12(r18)
   8548c:	e0c00015 	stw	r3,0(fp)
   85490:	003f0606 	br	850ac <__sfvwrite_r+0xb4>

00085494 <_fwalk_reent>:
   85494:	defff704 	addi	sp,sp,-36
   85498:	dcc00315 	stw	r19,12(sp)
   8549c:	24c0b804 	addi	r19,r4,736
   854a0:	dd800615 	stw	r22,24(sp)
   854a4:	dd400515 	stw	r21,20(sp)
   854a8:	dfc00815 	stw	ra,32(sp)
   854ac:	ddc00715 	stw	r23,28(sp)
   854b0:	dd000415 	stw	r20,16(sp)
   854b4:	dc800215 	stw	r18,8(sp)
   854b8:	dc400115 	stw	r17,4(sp)
   854bc:	dc000015 	stw	r16,0(sp)
   854c0:	202b883a 	mov	r21,r4
   854c4:	282d883a 	mov	r22,r5
   854c8:	008491c0 	call	8491c <__sfp_lock_acquire>
   854cc:	98002126 	beq	r19,zero,85554 <_fwalk_reent+0xc0>
   854d0:	002f883a 	mov	r23,zero
   854d4:	9c800117 	ldw	r18,4(r19)
   854d8:	9c000217 	ldw	r16,8(r19)
   854dc:	90bfffc4 	addi	r2,r18,-1
   854e0:	10000d16 	blt	r2,zero,85518 <_fwalk_reent+0x84>
   854e4:	0023883a 	mov	r17,zero
   854e8:	053fffc4 	movi	r20,-1
   854ec:	8080030f 	ldh	r2,12(r16)
   854f0:	8c400044 	addi	r17,r17,1
   854f4:	10000626 	beq	r2,zero,85510 <_fwalk_reent+0x7c>
   854f8:	8080038f 	ldh	r2,14(r16)
   854fc:	800b883a 	mov	r5,r16
   85500:	a809883a 	mov	r4,r21
   85504:	15000226 	beq	r2,r20,85510 <_fwalk_reent+0x7c>
   85508:	b03ee83a 	callr	r22
   8550c:	b8aeb03a 	or	r23,r23,r2
   85510:	84001704 	addi	r16,r16,92
   85514:	947ff51e 	bne	r18,r17,854ec <_fwalk_reent+0x58>
   85518:	9cc00017 	ldw	r19,0(r19)
   8551c:	983fed1e 	bne	r19,zero,854d4 <_fwalk_reent+0x40>
   85520:	00849200 	call	84920 <__sfp_lock_release>
   85524:	b805883a 	mov	r2,r23
   85528:	dfc00817 	ldw	ra,32(sp)
   8552c:	ddc00717 	ldw	r23,28(sp)
   85530:	dd800617 	ldw	r22,24(sp)
   85534:	dd400517 	ldw	r21,20(sp)
   85538:	dd000417 	ldw	r20,16(sp)
   8553c:	dcc00317 	ldw	r19,12(sp)
   85540:	dc800217 	ldw	r18,8(sp)
   85544:	dc400117 	ldw	r17,4(sp)
   85548:	dc000017 	ldw	r16,0(sp)
   8554c:	dec00904 	addi	sp,sp,36
   85550:	f800283a 	ret
   85554:	002f883a 	mov	r23,zero
   85558:	003ff106 	br	85520 <_fwalk_reent+0x8c>

0008555c <_fwalk>:
   8555c:	defff804 	addi	sp,sp,-32
   85560:	dcc00315 	stw	r19,12(sp)
   85564:	24c0b804 	addi	r19,r4,736
   85568:	dd400515 	stw	r21,20(sp)
   8556c:	dfc00715 	stw	ra,28(sp)
   85570:	dd800615 	stw	r22,24(sp)
   85574:	dd000415 	stw	r20,16(sp)
   85578:	dc800215 	stw	r18,8(sp)
   8557c:	dc400115 	stw	r17,4(sp)
   85580:	dc000015 	stw	r16,0(sp)
   85584:	282b883a 	mov	r21,r5
   85588:	008491c0 	call	8491c <__sfp_lock_acquire>
   8558c:	98001f26 	beq	r19,zero,8560c <_fwalk+0xb0>
   85590:	002d883a 	mov	r22,zero
   85594:	9c800117 	ldw	r18,4(r19)
   85598:	9c000217 	ldw	r16,8(r19)
   8559c:	90bfffc4 	addi	r2,r18,-1
   855a0:	10000c16 	blt	r2,zero,855d4 <_fwalk+0x78>
   855a4:	0023883a 	mov	r17,zero
   855a8:	053fffc4 	movi	r20,-1
   855ac:	8080030f 	ldh	r2,12(r16)
   855b0:	8c400044 	addi	r17,r17,1
   855b4:	10000526 	beq	r2,zero,855cc <_fwalk+0x70>
   855b8:	8080038f 	ldh	r2,14(r16)
   855bc:	8009883a 	mov	r4,r16
   855c0:	15000226 	beq	r2,r20,855cc <_fwalk+0x70>
   855c4:	a83ee83a 	callr	r21
   855c8:	b0acb03a 	or	r22,r22,r2
   855cc:	84001704 	addi	r16,r16,92
   855d0:	947ff61e 	bne	r18,r17,855ac <_fwalk+0x50>
   855d4:	9cc00017 	ldw	r19,0(r19)
   855d8:	983fee1e 	bne	r19,zero,85594 <_fwalk+0x38>
   855dc:	00849200 	call	84920 <__sfp_lock_release>
   855e0:	b005883a 	mov	r2,r22
   855e4:	dfc00717 	ldw	ra,28(sp)
   855e8:	dd800617 	ldw	r22,24(sp)
   855ec:	dd400517 	ldw	r21,20(sp)
   855f0:	dd000417 	ldw	r20,16(sp)
   855f4:	dcc00317 	ldw	r19,12(sp)
   855f8:	dc800217 	ldw	r18,8(sp)
   855fc:	dc400117 	ldw	r17,4(sp)
   85600:	dc000017 	ldw	r16,0(sp)
   85604:	dec00804 	addi	sp,sp,32
   85608:	f800283a 	ret
   8560c:	002d883a 	mov	r22,zero
   85610:	003ff206 	br	855dc <_fwalk+0x80>

00085614 <__locale_charset>:
   85614:	d0a00317 	ldw	r2,-32756(gp)
   85618:	f800283a 	ret

0008561c <_localeconv_r>:
   8561c:	00800274 	movhi	r2,9
   85620:	10b4f904 	addi	r2,r2,-11292
   85624:	f800283a 	ret

00085628 <localeconv>:
   85628:	00800274 	movhi	r2,9
   8562c:	10bc2704 	addi	r2,r2,-3940
   85630:	11000017 	ldw	r4,0(r2)
   85634:	008561c1 	jmpi	8561c <_localeconv_r>

00085638 <_setlocale_r>:
   85638:	defffc04 	addi	sp,sp,-16
   8563c:	00c00274 	movhi	r3,9
   85640:	18f4f404 	addi	r3,r3,-11312
   85644:	dc800215 	stw	r18,8(sp)
   85648:	dc400115 	stw	r17,4(sp)
   8564c:	dc000015 	stw	r16,0(sp)
   85650:	2023883a 	mov	r17,r4
   85654:	2825883a 	mov	r18,r5
   85658:	dfc00315 	stw	ra,12(sp)
   8565c:	3021883a 	mov	r16,r6
   85660:	3009883a 	mov	r4,r6
   85664:	180b883a 	mov	r5,r3
   85668:	30000926 	beq	r6,zero,85690 <_setlocale_r+0x58>
   8566c:	0087b540 	call	87b54 <strcmp>
   85670:	8009883a 	mov	r4,r16
   85674:	01400274 	movhi	r5,9
   85678:	2974df04 	addi	r5,r5,-11396
   8567c:	10000b1e 	bne	r2,zero,856ac <_setlocale_r+0x74>
   85680:	8c000d15 	stw	r16,52(r17)
   85684:	8c800c15 	stw	r18,48(r17)
   85688:	00c00274 	movhi	r3,9
   8568c:	18f4f404 	addi	r3,r3,-11312
   85690:	1805883a 	mov	r2,r3
   85694:	dfc00317 	ldw	ra,12(sp)
   85698:	dc800217 	ldw	r18,8(sp)
   8569c:	dc400117 	ldw	r17,4(sp)
   856a0:	dc000017 	ldw	r16,0(sp)
   856a4:	dec00404 	addi	sp,sp,16
   856a8:	f800283a 	ret
   856ac:	0087b540 	call	87b54 <strcmp>
   856b0:	0007883a 	mov	r3,zero
   856b4:	103ff226 	beq	r2,zero,85680 <_setlocale_r+0x48>
   856b8:	003ff506 	br	85690 <_setlocale_r+0x58>

000856bc <setlocale>:
   856bc:	01800274 	movhi	r6,9
   856c0:	31bc2704 	addi	r6,r6,-3940
   856c4:	2007883a 	mov	r3,r4
   856c8:	31000017 	ldw	r4,0(r6)
   856cc:	280d883a 	mov	r6,r5
   856d0:	180b883a 	mov	r5,r3
   856d4:	00856381 	jmpi	85638 <_setlocale_r>

000856d8 <__smakebuf_r>:
   856d8:	2880030b 	ldhu	r2,12(r5)
   856dc:	deffed04 	addi	sp,sp,-76
   856e0:	dc401015 	stw	r17,64(sp)
   856e4:	1080008c 	andi	r2,r2,2
   856e8:	dc000f15 	stw	r16,60(sp)
   856ec:	dfc01215 	stw	ra,72(sp)
   856f0:	dc801115 	stw	r18,68(sp)
   856f4:	2821883a 	mov	r16,r5
   856f8:	2023883a 	mov	r17,r4
   856fc:	10000b26 	beq	r2,zero,8572c <__smakebuf_r+0x54>
   85700:	28c010c4 	addi	r3,r5,67
   85704:	00800044 	movi	r2,1
   85708:	28800515 	stw	r2,20(r5)
   8570c:	28c00415 	stw	r3,16(r5)
   85710:	28c00015 	stw	r3,0(r5)
   85714:	dfc01217 	ldw	ra,72(sp)
   85718:	dc801117 	ldw	r18,68(sp)
   8571c:	dc401017 	ldw	r17,64(sp)
   85720:	dc000f17 	ldw	r16,60(sp)
   85724:	dec01304 	addi	sp,sp,76
   85728:	f800283a 	ret
   8572c:	2940038f 	ldh	r5,14(r5)
   85730:	28002116 	blt	r5,zero,857b8 <__smakebuf_r+0xe0>
   85734:	d80d883a 	mov	r6,sp
   85738:	0087ee40 	call	87ee4 <_fstat_r>
   8573c:	10001e16 	blt	r2,zero,857b8 <__smakebuf_r+0xe0>
   85740:	d8800117 	ldw	r2,4(sp)
   85744:	00e00014 	movui	r3,32768
   85748:	113c000c 	andi	r4,r2,61440
   8574c:	20c03126 	beq	r4,r3,85814 <__smakebuf_r+0x13c>
   85750:	8080030b 	ldhu	r2,12(r16)
   85754:	00c80004 	movi	r3,8192
   85758:	10820014 	ori	r2,r2,2048
   8575c:	8080030d 	sth	r2,12(r16)
   85760:	20c01e26 	beq	r4,r3,857dc <__smakebuf_r+0x104>
   85764:	04810004 	movi	r18,1024
   85768:	8809883a 	mov	r4,r17
   8576c:	900b883a 	mov	r5,r18
   85770:	008586c0 	call	8586c <_malloc_r>
   85774:	1009883a 	mov	r4,r2
   85778:	10003126 	beq	r2,zero,85840 <__smakebuf_r+0x168>
   8577c:	80c0030b 	ldhu	r3,12(r16)
   85780:	00800234 	movhi	r2,8
   85784:	10928404 	addi	r2,r2,18960
   85788:	88800f15 	stw	r2,60(r17)
   8578c:	18c02014 	ori	r3,r3,128
   85790:	84800515 	stw	r18,20(r16)
   85794:	80c0030d 	sth	r3,12(r16)
   85798:	81000415 	stw	r4,16(r16)
   8579c:	81000015 	stw	r4,0(r16)
   857a0:	dfc01217 	ldw	ra,72(sp)
   857a4:	dc801117 	ldw	r18,68(sp)
   857a8:	dc401017 	ldw	r17,64(sp)
   857ac:	dc000f17 	ldw	r16,60(sp)
   857b0:	dec01304 	addi	sp,sp,76
   857b4:	f800283a 	ret
   857b8:	80c0030b 	ldhu	r3,12(r16)
   857bc:	1880200c 	andi	r2,r3,128
   857c0:	10000426 	beq	r2,zero,857d4 <__smakebuf_r+0xfc>
   857c4:	04801004 	movi	r18,64
   857c8:	18820014 	ori	r2,r3,2048
   857cc:	8080030d 	sth	r2,12(r16)
   857d0:	003fe506 	br	85768 <__smakebuf_r+0x90>
   857d4:	04810004 	movi	r18,1024
   857d8:	003ffb06 	br	857c8 <__smakebuf_r+0xf0>
   857dc:	8140038f 	ldh	r5,14(r16)
   857e0:	8809883a 	mov	r4,r17
   857e4:	0087f580 	call	87f58 <_isatty_r>
   857e8:	103fde26 	beq	r2,zero,85764 <__smakebuf_r+0x8c>
   857ec:	8080030b 	ldhu	r2,12(r16)
   857f0:	80c010c4 	addi	r3,r16,67
   857f4:	04810004 	movi	r18,1024
   857f8:	10800054 	ori	r2,r2,1
   857fc:	8080030d 	sth	r2,12(r16)
   85800:	00800044 	movi	r2,1
   85804:	80c00415 	stw	r3,16(r16)
   85808:	80800515 	stw	r2,20(r16)
   8580c:	80c00015 	stw	r3,0(r16)
   85810:	003fd506 	br	85768 <__smakebuf_r+0x90>
   85814:	80c00a17 	ldw	r3,40(r16)
   85818:	00800234 	movhi	r2,8
   8581c:	109e8404 	addi	r2,r2,31248
   85820:	18bfcb1e 	bne	r3,r2,85750 <__smakebuf_r+0x78>
   85824:	8080030b 	ldhu	r2,12(r16)
   85828:	00c10004 	movi	r3,1024
   8582c:	1825883a 	mov	r18,r3
   85830:	10c4b03a 	or	r2,r2,r3
   85834:	8080030d 	sth	r2,12(r16)
   85838:	80c01315 	stw	r3,76(r16)
   8583c:	003fca06 	br	85768 <__smakebuf_r+0x90>
   85840:	8100030b 	ldhu	r4,12(r16)
   85844:	2080800c 	andi	r2,r4,512
   85848:	103fb21e 	bne	r2,zero,85714 <__smakebuf_r+0x3c>
   8584c:	80c010c4 	addi	r3,r16,67
   85850:	21000094 	ori	r4,r4,2
   85854:	00800044 	movi	r2,1
   85858:	80800515 	stw	r2,20(r16)
   8585c:	8100030d 	sth	r4,12(r16)
   85860:	80c00415 	stw	r3,16(r16)
   85864:	80c00015 	stw	r3,0(r16)
   85868:	003faa06 	br	85714 <__smakebuf_r+0x3c>

0008586c <_malloc_r>:
   8586c:	defff604 	addi	sp,sp,-40
   85870:	28c002c4 	addi	r3,r5,11
   85874:	00800584 	movi	r2,22
   85878:	dc800215 	stw	r18,8(sp)
   8587c:	dfc00915 	stw	ra,36(sp)
   85880:	df000815 	stw	fp,32(sp)
   85884:	ddc00715 	stw	r23,28(sp)
   85888:	dd800615 	stw	r22,24(sp)
   8588c:	dd400515 	stw	r21,20(sp)
   85890:	dd000415 	stw	r20,16(sp)
   85894:	dcc00315 	stw	r19,12(sp)
   85898:	dc400115 	stw	r17,4(sp)
   8589c:	dc000015 	stw	r16,0(sp)
   858a0:	2025883a 	mov	r18,r4
   858a4:	10c01236 	bltu	r2,r3,858f0 <_malloc_r+0x84>
   858a8:	04400404 	movi	r17,16
   858ac:	8940142e 	bgeu	r17,r5,85900 <_malloc_r+0x94>
   858b0:	00800304 	movi	r2,12
   858b4:	0007883a 	mov	r3,zero
   858b8:	90800015 	stw	r2,0(r18)
   858bc:	1805883a 	mov	r2,r3
   858c0:	dfc00917 	ldw	ra,36(sp)
   858c4:	df000817 	ldw	fp,32(sp)
   858c8:	ddc00717 	ldw	r23,28(sp)
   858cc:	dd800617 	ldw	r22,24(sp)
   858d0:	dd400517 	ldw	r21,20(sp)
   858d4:	dd000417 	ldw	r20,16(sp)
   858d8:	dcc00317 	ldw	r19,12(sp)
   858dc:	dc800217 	ldw	r18,8(sp)
   858e0:	dc400117 	ldw	r17,4(sp)
   858e4:	dc000017 	ldw	r16,0(sp)
   858e8:	dec00a04 	addi	sp,sp,40
   858ec:	f800283a 	ret
   858f0:	00bffe04 	movi	r2,-8
   858f4:	18a2703a 	and	r17,r3,r2
   858f8:	883fed16 	blt	r17,zero,858b0 <_malloc_r+0x44>
   858fc:	897fec36 	bltu	r17,r5,858b0 <_malloc_r+0x44>
   85900:	9009883a 	mov	r4,r18
   85904:	008af400 	call	8af40 <__malloc_lock>
   85908:	00807dc4 	movi	r2,503
   8590c:	14402b2e 	bgeu	r2,r17,859bc <_malloc_r+0x150>
   85910:	8806d27a 	srli	r3,r17,9
   85914:	18003f1e 	bne	r3,zero,85a14 <_malloc_r+0x1a8>
   85918:	880cd0fa 	srli	r6,r17,3
   8591c:	300490fa 	slli	r2,r6,3
   85920:	02c00274 	movhi	r11,9
   85924:	5af6a304 	addi	r11,r11,-9588
   85928:	12cb883a 	add	r5,r2,r11
   8592c:	2c000317 	ldw	r16,12(r5)
   85930:	580f883a 	mov	r7,r11
   85934:	2c00041e 	bne	r5,r16,85948 <_malloc_r+0xdc>
   85938:	00000a06 	br	85964 <_malloc_r+0xf8>
   8593c:	1800860e 	bge	r3,zero,85b58 <_malloc_r+0x2ec>
   85940:	84000317 	ldw	r16,12(r16)
   85944:	2c000726 	beq	r5,r16,85964 <_malloc_r+0xf8>
   85948:	80800117 	ldw	r2,4(r16)
   8594c:	00ffff04 	movi	r3,-4
   85950:	10c8703a 	and	r4,r2,r3
   85954:	2447c83a 	sub	r3,r4,r17
   85958:	008003c4 	movi	r2,15
   8595c:	10fff70e 	bge	r2,r3,8593c <_malloc_r+0xd0>
   85960:	31bfffc4 	addi	r6,r6,-1
   85964:	32400044 	addi	r9,r6,1
   85968:	02800274 	movhi	r10,9
   8596c:	52b6a504 	addi	r10,r10,-9580
   85970:	54000217 	ldw	r16,8(r10)
   85974:	8280a026 	beq	r16,r10,85bf8 <_malloc_r+0x38c>
   85978:	80800117 	ldw	r2,4(r16)
   8597c:	00ffff04 	movi	r3,-4
   85980:	10ca703a 	and	r5,r2,r3
   85984:	2c4dc83a 	sub	r6,r5,r17
   85988:	008003c4 	movi	r2,15
   8598c:	11808316 	blt	r2,r6,85b9c <_malloc_r+0x330>
   85990:	52800315 	stw	r10,12(r10)
   85994:	52800215 	stw	r10,8(r10)
   85998:	30002916 	blt	r6,zero,85a40 <_malloc_r+0x1d4>
   8599c:	8147883a 	add	r3,r16,r5
   859a0:	18800117 	ldw	r2,4(r3)
   859a4:	9009883a 	mov	r4,r18
   859a8:	10800054 	ori	r2,r2,1
   859ac:	18800115 	stw	r2,4(r3)
   859b0:	008af600 	call	8af60 <__malloc_unlock>
   859b4:	80c00204 	addi	r3,r16,8
   859b8:	003fc006 	br	858bc <_malloc_r+0x50>
   859bc:	02c00274 	movhi	r11,9
   859c0:	5af6a304 	addi	r11,r11,-9588
   859c4:	8ac5883a 	add	r2,r17,r11
   859c8:	14000317 	ldw	r16,12(r2)
   859cc:	580f883a 	mov	r7,r11
   859d0:	8806d0fa 	srli	r3,r17,3
   859d4:	14006c26 	beq	r2,r16,85b88 <_malloc_r+0x31c>
   859d8:	80c00117 	ldw	r3,4(r16)
   859dc:	00bfff04 	movi	r2,-4
   859e0:	81800317 	ldw	r6,12(r16)
   859e4:	1886703a 	and	r3,r3,r2
   859e8:	80c7883a 	add	r3,r16,r3
   859ec:	18800117 	ldw	r2,4(r3)
   859f0:	81400217 	ldw	r5,8(r16)
   859f4:	9009883a 	mov	r4,r18
   859f8:	10800054 	ori	r2,r2,1
   859fc:	18800115 	stw	r2,4(r3)
   85a00:	31400215 	stw	r5,8(r6)
   85a04:	29800315 	stw	r6,12(r5)
   85a08:	008af600 	call	8af60 <__malloc_unlock>
   85a0c:	80c00204 	addi	r3,r16,8
   85a10:	003faa06 	br	858bc <_malloc_r+0x50>
   85a14:	00800104 	movi	r2,4
   85a18:	10c0052e 	bgeu	r2,r3,85a30 <_malloc_r+0x1c4>
   85a1c:	00800504 	movi	r2,20
   85a20:	10c07836 	bltu	r2,r3,85c04 <_malloc_r+0x398>
   85a24:	198016c4 	addi	r6,r3,91
   85a28:	300490fa 	slli	r2,r6,3
   85a2c:	003fbc06 	br	85920 <_malloc_r+0xb4>
   85a30:	8804d1ba 	srli	r2,r17,6
   85a34:	11800e04 	addi	r6,r2,56
   85a38:	300490fa 	slli	r2,r6,3
   85a3c:	003fb806 	br	85920 <_malloc_r+0xb4>
   85a40:	00807fc4 	movi	r2,511
   85a44:	1140bb36 	bltu	r2,r5,85d34 <_malloc_r+0x4c8>
   85a48:	2806d0fa 	srli	r3,r5,3
   85a4c:	573ffe04 	addi	fp,r10,-8
   85a50:	00800044 	movi	r2,1
   85a54:	180890fa 	slli	r4,r3,3
   85a58:	1807d0ba 	srai	r3,r3,2
   85a5c:	e1c00117 	ldw	r7,4(fp)
   85a60:	5909883a 	add	r4,r11,r4
   85a64:	21400217 	ldw	r5,8(r4)
   85a68:	10c4983a 	sll	r2,r2,r3
   85a6c:	81000315 	stw	r4,12(r16)
   85a70:	81400215 	stw	r5,8(r16)
   85a74:	388eb03a 	or	r7,r7,r2
   85a78:	2c000315 	stw	r16,12(r5)
   85a7c:	24000215 	stw	r16,8(r4)
   85a80:	e1c00115 	stw	r7,4(fp)
   85a84:	4807883a 	mov	r3,r9
   85a88:	4800cd16 	blt	r9,zero,85dc0 <_malloc_r+0x554>
   85a8c:	1807d0ba 	srai	r3,r3,2
   85a90:	00800044 	movi	r2,1
   85a94:	10c8983a 	sll	r4,r2,r3
   85a98:	39004436 	bltu	r7,r4,85bac <_malloc_r+0x340>
   85a9c:	21c4703a 	and	r2,r4,r7
   85aa0:	10000a1e 	bne	r2,zero,85acc <_malloc_r+0x260>
   85aa4:	2109883a 	add	r4,r4,r4
   85aa8:	00bfff04 	movi	r2,-4
   85aac:	4884703a 	and	r2,r9,r2
   85ab0:	3906703a 	and	r3,r7,r4
   85ab4:	12400104 	addi	r9,r2,4
   85ab8:	1800041e 	bne	r3,zero,85acc <_malloc_r+0x260>
   85abc:	2109883a 	add	r4,r4,r4
   85ac0:	3904703a 	and	r2,r7,r4
   85ac4:	4a400104 	addi	r9,r9,4
   85ac8:	103ffc26 	beq	r2,zero,85abc <_malloc_r+0x250>
   85acc:	480490fa 	slli	r2,r9,3
   85ad0:	4819883a 	mov	r12,r9
   85ad4:	023fff04 	movi	r8,-4
   85ad8:	589b883a 	add	r13,r11,r2
   85adc:	6807883a 	mov	r3,r13
   85ae0:	014003c4 	movi	r5,15
   85ae4:	1c000317 	ldw	r16,12(r3)
   85ae8:	1c00041e 	bne	r3,r16,85afc <_malloc_r+0x290>
   85aec:	0000a706 	br	85d8c <_malloc_r+0x520>
   85af0:	3000ab0e 	bge	r6,zero,85da0 <_malloc_r+0x534>
   85af4:	84000317 	ldw	r16,12(r16)
   85af8:	1c00a426 	beq	r3,r16,85d8c <_malloc_r+0x520>
   85afc:	80800117 	ldw	r2,4(r16)
   85b00:	1204703a 	and	r2,r2,r8
   85b04:	144dc83a 	sub	r6,r2,r17
   85b08:	29bff90e 	bge	r5,r6,85af0 <_malloc_r+0x284>
   85b0c:	81000317 	ldw	r4,12(r16)
   85b10:	80c00217 	ldw	r3,8(r16)
   85b14:	89400054 	ori	r5,r17,1
   85b18:	8445883a 	add	r2,r16,r17
   85b1c:	20c00215 	stw	r3,8(r4)
   85b20:	19000315 	stw	r4,12(r3)
   85b24:	81400115 	stw	r5,4(r16)
   85b28:	1187883a 	add	r3,r2,r6
   85b2c:	31000054 	ori	r4,r6,1
   85b30:	50800315 	stw	r2,12(r10)
   85b34:	50800215 	stw	r2,8(r10)
   85b38:	19800015 	stw	r6,0(r3)
   85b3c:	11000115 	stw	r4,4(r2)
   85b40:	12800215 	stw	r10,8(r2)
   85b44:	12800315 	stw	r10,12(r2)
   85b48:	9009883a 	mov	r4,r18
   85b4c:	008af600 	call	8af60 <__malloc_unlock>
   85b50:	80c00204 	addi	r3,r16,8
   85b54:	003f5906 	br	858bc <_malloc_r+0x50>
   85b58:	8109883a 	add	r4,r16,r4
   85b5c:	20800117 	ldw	r2,4(r4)
   85b60:	80c00217 	ldw	r3,8(r16)
   85b64:	81400317 	ldw	r5,12(r16)
   85b68:	10800054 	ori	r2,r2,1
   85b6c:	20800115 	stw	r2,4(r4)
   85b70:	28c00215 	stw	r3,8(r5)
   85b74:	19400315 	stw	r5,12(r3)
   85b78:	9009883a 	mov	r4,r18
   85b7c:	008af600 	call	8af60 <__malloc_unlock>
   85b80:	80c00204 	addi	r3,r16,8
   85b84:	003f4d06 	br	858bc <_malloc_r+0x50>
   85b88:	80800204 	addi	r2,r16,8
   85b8c:	14000317 	ldw	r16,12(r2)
   85b90:	143f911e 	bne	r2,r16,859d8 <_malloc_r+0x16c>
   85b94:	1a400084 	addi	r9,r3,2
   85b98:	003f7306 	br	85968 <_malloc_r+0xfc>
   85b9c:	88c00054 	ori	r3,r17,1
   85ba0:	8445883a 	add	r2,r16,r17
   85ba4:	80c00115 	stw	r3,4(r16)
   85ba8:	003fdf06 	br	85b28 <_malloc_r+0x2bc>
   85bac:	e4000217 	ldw	r16,8(fp)
   85bb0:	00bfff04 	movi	r2,-4
   85bb4:	80c00117 	ldw	r3,4(r16)
   85bb8:	802d883a 	mov	r22,r16
   85bbc:	18aa703a 	and	r21,r3,r2
   85bc0:	ac401636 	bltu	r21,r17,85c1c <_malloc_r+0x3b0>
   85bc4:	ac49c83a 	sub	r4,r21,r17
   85bc8:	008003c4 	movi	r2,15
   85bcc:	1100130e 	bge	r2,r4,85c1c <_malloc_r+0x3b0>
   85bd0:	88800054 	ori	r2,r17,1
   85bd4:	8447883a 	add	r3,r16,r17
   85bd8:	80800115 	stw	r2,4(r16)
   85bdc:	20800054 	ori	r2,r4,1
   85be0:	18800115 	stw	r2,4(r3)
   85be4:	e0c00215 	stw	r3,8(fp)
   85be8:	9009883a 	mov	r4,r18
   85bec:	008af600 	call	8af60 <__malloc_unlock>
   85bf0:	80c00204 	addi	r3,r16,8
   85bf4:	003f3106 	br	858bc <_malloc_r+0x50>
   85bf8:	39c00117 	ldw	r7,4(r7)
   85bfc:	573ffe04 	addi	fp,r10,-8
   85c00:	003fa006 	br	85a84 <_malloc_r+0x218>
   85c04:	00801504 	movi	r2,84
   85c08:	10c06736 	bltu	r2,r3,85da8 <_malloc_r+0x53c>
   85c0c:	8804d33a 	srli	r2,r17,12
   85c10:	11801b84 	addi	r6,r2,110
   85c14:	300490fa 	slli	r2,r6,3
   85c18:	003f4106 	br	85920 <_malloc_r+0xb4>
   85c1c:	d0a6aa17 	ldw	r2,-25944(gp)
   85c20:	d0e00517 	ldw	r3,-32748(gp)
   85c24:	053fffc4 	movi	r20,-1
   85c28:	10800404 	addi	r2,r2,16
   85c2c:	88a7883a 	add	r19,r17,r2
   85c30:	1d000326 	beq	r3,r20,85c40 <_malloc_r+0x3d4>
   85c34:	98c3ffc4 	addi	r3,r19,4095
   85c38:	00bc0004 	movi	r2,-4096
   85c3c:	18a6703a 	and	r19,r3,r2
   85c40:	9009883a 	mov	r4,r18
   85c44:	980b883a 	mov	r5,r19
   85c48:	00879980 	call	87998 <_sbrk_r>
   85c4c:	1009883a 	mov	r4,r2
   85c50:	15000426 	beq	r2,r20,85c64 <_malloc_r+0x3f8>
   85c54:	854b883a 	add	r5,r16,r21
   85c58:	1029883a 	mov	r20,r2
   85c5c:	11405a2e 	bgeu	r2,r5,85dc8 <_malloc_r+0x55c>
   85c60:	87000c26 	beq	r16,fp,85c94 <_malloc_r+0x428>
   85c64:	e4000217 	ldw	r16,8(fp)
   85c68:	80c00117 	ldw	r3,4(r16)
   85c6c:	00bfff04 	movi	r2,-4
   85c70:	1884703a 	and	r2,r3,r2
   85c74:	14400336 	bltu	r2,r17,85c84 <_malloc_r+0x418>
   85c78:	1449c83a 	sub	r4,r2,r17
   85c7c:	008003c4 	movi	r2,15
   85c80:	113fd316 	blt	r2,r4,85bd0 <_malloc_r+0x364>
   85c84:	9009883a 	mov	r4,r18
   85c88:	008af600 	call	8af60 <__malloc_unlock>
   85c8c:	0007883a 	mov	r3,zero
   85c90:	003f0a06 	br	858bc <_malloc_r+0x50>
   85c94:	05c00274 	movhi	r23,9
   85c98:	bdc2db04 	addi	r23,r23,2924
   85c9c:	b8800017 	ldw	r2,0(r23)
   85ca0:	988d883a 	add	r6,r19,r2
   85ca4:	b9800015 	stw	r6,0(r23)
   85ca8:	d0e00517 	ldw	r3,-32748(gp)
   85cac:	00bfffc4 	movi	r2,-1
   85cb0:	18808e26 	beq	r3,r2,85eec <_malloc_r+0x680>
   85cb4:	2145c83a 	sub	r2,r4,r5
   85cb8:	3085883a 	add	r2,r6,r2
   85cbc:	b8800015 	stw	r2,0(r23)
   85cc0:	20c001cc 	andi	r3,r4,7
   85cc4:	18005f1e 	bne	r3,zero,85e44 <_malloc_r+0x5d8>
   85cc8:	000b883a 	mov	r5,zero
   85ccc:	a4c5883a 	add	r2,r20,r19
   85cd0:	1083ffcc 	andi	r2,r2,4095
   85cd4:	00c40004 	movi	r3,4096
   85cd8:	1887c83a 	sub	r3,r3,r2
   85cdc:	28e7883a 	add	r19,r5,r3
   85ce0:	9009883a 	mov	r4,r18
   85ce4:	980b883a 	mov	r5,r19
   85ce8:	00879980 	call	87998 <_sbrk_r>
   85cec:	1007883a 	mov	r3,r2
   85cf0:	00bfffc4 	movi	r2,-1
   85cf4:	18807a26 	beq	r3,r2,85ee0 <_malloc_r+0x674>
   85cf8:	1d05c83a 	sub	r2,r3,r20
   85cfc:	9885883a 	add	r2,r19,r2
   85d00:	10c00054 	ori	r3,r2,1
   85d04:	b8800017 	ldw	r2,0(r23)
   85d08:	a021883a 	mov	r16,r20
   85d0c:	a0c00115 	stw	r3,4(r20)
   85d10:	9885883a 	add	r2,r19,r2
   85d14:	b8800015 	stw	r2,0(r23)
   85d18:	e5000215 	stw	r20,8(fp)
   85d1c:	b7003626 	beq	r22,fp,85df8 <_malloc_r+0x58c>
   85d20:	018003c4 	movi	r6,15
   85d24:	35404b36 	bltu	r6,r21,85e54 <_malloc_r+0x5e8>
   85d28:	00800044 	movi	r2,1
   85d2c:	a0800115 	stw	r2,4(r20)
   85d30:	003fcd06 	br	85c68 <_malloc_r+0x3fc>
   85d34:	2808d27a 	srli	r4,r5,9
   85d38:	2000371e 	bne	r4,zero,85e18 <_malloc_r+0x5ac>
   85d3c:	2808d0fa 	srli	r4,r5,3
   85d40:	200690fa 	slli	r3,r4,3
   85d44:	1ad1883a 	add	r8,r3,r11
   85d48:	41800217 	ldw	r6,8(r8)
   85d4c:	41805b26 	beq	r8,r6,85ebc <_malloc_r+0x650>
   85d50:	30800117 	ldw	r2,4(r6)
   85d54:	00ffff04 	movi	r3,-4
   85d58:	10c4703a 	and	r2,r2,r3
   85d5c:	2880022e 	bgeu	r5,r2,85d68 <_malloc_r+0x4fc>
   85d60:	31800217 	ldw	r6,8(r6)
   85d64:	41bffa1e 	bne	r8,r6,85d50 <_malloc_r+0x4e4>
   85d68:	32000317 	ldw	r8,12(r6)
   85d6c:	39c00117 	ldw	r7,4(r7)
   85d70:	82000315 	stw	r8,12(r16)
   85d74:	81800215 	stw	r6,8(r16)
   85d78:	07000274 	movhi	fp,9
   85d7c:	e736a304 	addi	fp,fp,-9588
   85d80:	34000315 	stw	r16,12(r6)
   85d84:	44000215 	stw	r16,8(r8)
   85d88:	003f3e06 	br	85a84 <_malloc_r+0x218>
   85d8c:	63000044 	addi	r12,r12,1
   85d90:	608000cc 	andi	r2,r12,3
   85d94:	10005d26 	beq	r2,zero,85f0c <_malloc_r+0x6a0>
   85d98:	18c00204 	addi	r3,r3,8
   85d9c:	003f5106 	br	85ae4 <_malloc_r+0x278>
   85da0:	8089883a 	add	r4,r16,r2
   85da4:	003f6d06 	br	85b5c <_malloc_r+0x2f0>
   85da8:	00805504 	movi	r2,340
   85dac:	10c02036 	bltu	r2,r3,85e30 <_malloc_r+0x5c4>
   85db0:	8804d3fa 	srli	r2,r17,15
   85db4:	11801dc4 	addi	r6,r2,119
   85db8:	300490fa 	slli	r2,r6,3
   85dbc:	003ed806 	br	85920 <_malloc_r+0xb4>
   85dc0:	48c000c4 	addi	r3,r9,3
   85dc4:	003f3106 	br	85a8c <_malloc_r+0x220>
   85dc8:	05c00274 	movhi	r23,9
   85dcc:	bdc2db04 	addi	r23,r23,2924
   85dd0:	b8800017 	ldw	r2,0(r23)
   85dd4:	988d883a 	add	r6,r19,r2
   85dd8:	b9800015 	stw	r6,0(r23)
   85ddc:	293fb21e 	bne	r5,r4,85ca8 <_malloc_r+0x43c>
   85de0:	2083ffcc 	andi	r2,r4,4095
   85de4:	103fb01e 	bne	r2,zero,85ca8 <_malloc_r+0x43c>
   85de8:	e4000217 	ldw	r16,8(fp)
   85dec:	9d45883a 	add	r2,r19,r21
   85df0:	10800054 	ori	r2,r2,1
   85df4:	80800115 	stw	r2,4(r16)
   85df8:	b8c00017 	ldw	r3,0(r23)
   85dfc:	d0a6ab17 	ldw	r2,-25940(gp)
   85e00:	10c0012e 	bgeu	r2,r3,85e08 <_malloc_r+0x59c>
   85e04:	d0e6ab15 	stw	r3,-25940(gp)
   85e08:	d0a6ac17 	ldw	r2,-25936(gp)
   85e0c:	10ff962e 	bgeu	r2,r3,85c68 <_malloc_r+0x3fc>
   85e10:	d0e6ac15 	stw	r3,-25936(gp)
   85e14:	003f9406 	br	85c68 <_malloc_r+0x3fc>
   85e18:	00800104 	movi	r2,4
   85e1c:	11001e36 	bltu	r2,r4,85e98 <_malloc_r+0x62c>
   85e20:	2804d1ba 	srli	r2,r5,6
   85e24:	11000e04 	addi	r4,r2,56
   85e28:	200690fa 	slli	r3,r4,3
   85e2c:	003fc506 	br	85d44 <_malloc_r+0x4d8>
   85e30:	00815504 	movi	r2,1364
   85e34:	10c01d2e 	bgeu	r2,r3,85eac <_malloc_r+0x640>
   85e38:	01801f84 	movi	r6,126
   85e3c:	0080fc04 	movi	r2,1008
   85e40:	003eb706 	br	85920 <_malloc_r+0xb4>
   85e44:	00800204 	movi	r2,8
   85e48:	10cbc83a 	sub	r5,r2,r3
   85e4c:	2169883a 	add	r20,r4,r5
   85e50:	003f9e06 	br	85ccc <_malloc_r+0x460>
   85e54:	00bffe04 	movi	r2,-8
   85e58:	a93ffd04 	addi	r4,r21,-12
   85e5c:	2088703a 	and	r4,r4,r2
   85e60:	b10b883a 	add	r5,r22,r4
   85e64:	00c00144 	movi	r3,5
   85e68:	28c00215 	stw	r3,8(r5)
   85e6c:	28c00115 	stw	r3,4(r5)
   85e70:	b0800117 	ldw	r2,4(r22)
   85e74:	1080004c 	andi	r2,r2,1
   85e78:	2084b03a 	or	r2,r4,r2
   85e7c:	b0800115 	stw	r2,4(r22)
   85e80:	313fdd2e 	bgeu	r6,r4,85df8 <_malloc_r+0x58c>
   85e84:	b1400204 	addi	r5,r22,8
   85e88:	9009883a 	mov	r4,r18
   85e8c:	0084ce40 	call	84ce4 <_free_r>
   85e90:	e4000217 	ldw	r16,8(fp)
   85e94:	003fd806 	br	85df8 <_malloc_r+0x58c>
   85e98:	00800504 	movi	r2,20
   85e9c:	11001536 	bltu	r2,r4,85ef4 <_malloc_r+0x688>
   85ea0:	210016c4 	addi	r4,r4,91
   85ea4:	200690fa 	slli	r3,r4,3
   85ea8:	003fa606 	br	85d44 <_malloc_r+0x4d8>
   85eac:	8804d4ba 	srli	r2,r17,18
   85eb0:	11801f04 	addi	r6,r2,124
   85eb4:	300490fa 	slli	r2,r6,3
   85eb8:	003e9906 	br	85920 <_malloc_r+0xb4>
   85ebc:	2009d0ba 	srai	r4,r4,2
   85ec0:	01400274 	movhi	r5,9
   85ec4:	2976a304 	addi	r5,r5,-9588
   85ec8:	00c00044 	movi	r3,1
   85ecc:	28800117 	ldw	r2,4(r5)
   85ed0:	1906983a 	sll	r3,r3,r4
   85ed4:	10c4b03a 	or	r2,r2,r3
   85ed8:	28800115 	stw	r2,4(r5)
   85edc:	003fa306 	br	85d6c <_malloc_r+0x500>
   85ee0:	0027883a 	mov	r19,zero
   85ee4:	00c00044 	movi	r3,1
   85ee8:	003f8606 	br	85d04 <_malloc_r+0x498>
   85eec:	d1200515 	stw	r4,-32748(gp)
   85ef0:	003f7306 	br	85cc0 <_malloc_r+0x454>
   85ef4:	00801504 	movi	r2,84
   85ef8:	11001936 	bltu	r2,r4,85f60 <_malloc_r+0x6f4>
   85efc:	2804d33a 	srli	r2,r5,12
   85f00:	11001b84 	addi	r4,r2,110
   85f04:	200690fa 	slli	r3,r4,3
   85f08:	003f8e06 	br	85d44 <_malloc_r+0x4d8>
   85f0c:	480b883a 	mov	r5,r9
   85f10:	6807883a 	mov	r3,r13
   85f14:	288000cc 	andi	r2,r5,3
   85f18:	18fffe04 	addi	r3,r3,-8
   85f1c:	297fffc4 	addi	r5,r5,-1
   85f20:	10001526 	beq	r2,zero,85f78 <_malloc_r+0x70c>
   85f24:	18800217 	ldw	r2,8(r3)
   85f28:	10fffa26 	beq	r2,r3,85f14 <_malloc_r+0x6a8>
   85f2c:	2109883a 	add	r4,r4,r4
   85f30:	393f1e36 	bltu	r7,r4,85bac <_malloc_r+0x340>
   85f34:	203f1d26 	beq	r4,zero,85bac <_malloc_r+0x340>
   85f38:	21c4703a 	and	r2,r4,r7
   85f3c:	10000226 	beq	r2,zero,85f48 <_malloc_r+0x6dc>
   85f40:	6013883a 	mov	r9,r12
   85f44:	003ee106 	br	85acc <_malloc_r+0x260>
   85f48:	2109883a 	add	r4,r4,r4
   85f4c:	3904703a 	and	r2,r7,r4
   85f50:	63000104 	addi	r12,r12,4
   85f54:	103ffc26 	beq	r2,zero,85f48 <_malloc_r+0x6dc>
   85f58:	6013883a 	mov	r9,r12
   85f5c:	003edb06 	br	85acc <_malloc_r+0x260>
   85f60:	00805504 	movi	r2,340
   85f64:	11000836 	bltu	r2,r4,85f88 <_malloc_r+0x71c>
   85f68:	2804d3fa 	srli	r2,r5,15
   85f6c:	11001dc4 	addi	r4,r2,119
   85f70:	200690fa 	slli	r3,r4,3
   85f74:	003f7306 	br	85d44 <_malloc_r+0x4d8>
   85f78:	0104303a 	nor	r2,zero,r4
   85f7c:	388e703a 	and	r7,r7,r2
   85f80:	e1c00115 	stw	r7,4(fp)
   85f84:	003fe906 	br	85f2c <_malloc_r+0x6c0>
   85f88:	00815504 	movi	r2,1364
   85f8c:	1100032e 	bgeu	r2,r4,85f9c <_malloc_r+0x730>
   85f90:	01001f84 	movi	r4,126
   85f94:	00c0fc04 	movi	r3,1008
   85f98:	003f6a06 	br	85d44 <_malloc_r+0x4d8>
   85f9c:	2804d4ba 	srli	r2,r5,18
   85fa0:	11001f04 	addi	r4,r2,124
   85fa4:	200690fa 	slli	r3,r4,3
   85fa8:	003f6606 	br	85d44 <_malloc_r+0x4d8>

00085fac <memchr>:
   85fac:	008000c4 	movi	r2,3
   85fb0:	29403fcc 	andi	r5,r5,255
   85fb4:	2007883a 	mov	r3,r4
   85fb8:	1180022e 	bgeu	r2,r6,85fc4 <memchr+0x18>
   85fbc:	2084703a 	and	r2,r4,r2
   85fc0:	10000b26 	beq	r2,zero,85ff0 <memchr+0x44>
   85fc4:	313fffc4 	addi	r4,r6,-1
   85fc8:	3000051e 	bne	r6,zero,85fe0 <memchr+0x34>
   85fcc:	00002c06 	br	86080 <memchr+0xd4>
   85fd0:	213fffc4 	addi	r4,r4,-1
   85fd4:	00bfffc4 	movi	r2,-1
   85fd8:	18c00044 	addi	r3,r3,1
   85fdc:	20802826 	beq	r4,r2,86080 <memchr+0xd4>
   85fe0:	18800003 	ldbu	r2,0(r3)
   85fe4:	28bffa1e 	bne	r5,r2,85fd0 <memchr+0x24>
   85fe8:	1805883a 	mov	r2,r3
   85fec:	f800283a 	ret
   85ff0:	0011883a 	mov	r8,zero
   85ff4:	0007883a 	mov	r3,zero
   85ff8:	01c00104 	movi	r7,4
   85ffc:	4004923a 	slli	r2,r8,8
   86000:	18c00044 	addi	r3,r3,1
   86004:	1151883a 	add	r8,r2,r5
   86008:	19fffc1e 	bne	r3,r7,85ffc <memchr+0x50>
   8600c:	02bfbff4 	movhi	r10,65279
   86010:	52bfbfc4 	addi	r10,r10,-257
   86014:	02602074 	movhi	r9,32897
   86018:	4a602004 	addi	r9,r9,-32640
   8601c:	02c000c4 	movi	r11,3
   86020:	20800017 	ldw	r2,0(r4)
   86024:	31bfff04 	addi	r6,r6,-4
   86028:	200f883a 	mov	r7,r4
   8602c:	1204f03a 	xor	r2,r2,r8
   86030:	1287883a 	add	r3,r2,r10
   86034:	1a46703a 	and	r3,r3,r9
   86038:	0084303a 	nor	r2,zero,r2
   8603c:	10c4703a 	and	r2,r2,r3
   86040:	10000b26 	beq	r2,zero,86070 <memchr+0xc4>
   86044:	20800003 	ldbu	r2,0(r4)
   86048:	28800f26 	beq	r5,r2,86088 <memchr+0xdc>
   8604c:	20800043 	ldbu	r2,1(r4)
   86050:	21c00044 	addi	r7,r4,1
   86054:	28800c26 	beq	r5,r2,86088 <memchr+0xdc>
   86058:	20800083 	ldbu	r2,2(r4)
   8605c:	21c00084 	addi	r7,r4,2
   86060:	28800926 	beq	r5,r2,86088 <memchr+0xdc>
   86064:	208000c3 	ldbu	r2,3(r4)
   86068:	21c000c4 	addi	r7,r4,3
   8606c:	28800626 	beq	r5,r2,86088 <memchr+0xdc>
   86070:	21000104 	addi	r4,r4,4
   86074:	59bfea36 	bltu	r11,r6,86020 <memchr+0x74>
   86078:	2007883a 	mov	r3,r4
   8607c:	003fd106 	br	85fc4 <memchr+0x18>
   86080:	0005883a 	mov	r2,zero
   86084:	f800283a 	ret
   86088:	3805883a 	mov	r2,r7
   8608c:	f800283a 	ret

00086090 <memcpy>:
   86090:	01c003c4 	movi	r7,15
   86094:	2007883a 	mov	r3,r4
   86098:	3980032e 	bgeu	r7,r6,860a8 <memcpy+0x18>
   8609c:	2904b03a 	or	r2,r5,r4
   860a0:	108000cc 	andi	r2,r2,3
   860a4:	10000926 	beq	r2,zero,860cc <memcpy+0x3c>
   860a8:	30000626 	beq	r6,zero,860c4 <memcpy+0x34>
   860ac:	30cd883a 	add	r6,r6,r3
   860b0:	28800003 	ldbu	r2,0(r5)
   860b4:	29400044 	addi	r5,r5,1
   860b8:	18800005 	stb	r2,0(r3)
   860bc:	18c00044 	addi	r3,r3,1
   860c0:	30fffb1e 	bne	r6,r3,860b0 <memcpy+0x20>
   860c4:	2005883a 	mov	r2,r4
   860c8:	f800283a 	ret
   860cc:	3811883a 	mov	r8,r7
   860d0:	200f883a 	mov	r7,r4
   860d4:	28c00017 	ldw	r3,0(r5)
   860d8:	31bffc04 	addi	r6,r6,-16
   860dc:	38c00015 	stw	r3,0(r7)
   860e0:	28800117 	ldw	r2,4(r5)
   860e4:	38800115 	stw	r2,4(r7)
   860e8:	28c00217 	ldw	r3,8(r5)
   860ec:	38c00215 	stw	r3,8(r7)
   860f0:	28800317 	ldw	r2,12(r5)
   860f4:	29400404 	addi	r5,r5,16
   860f8:	38800315 	stw	r2,12(r7)
   860fc:	39c00404 	addi	r7,r7,16
   86100:	41bff436 	bltu	r8,r6,860d4 <memcpy+0x44>
   86104:	008000c4 	movi	r2,3
   86108:	1180072e 	bgeu	r2,r6,86128 <memcpy+0x98>
   8610c:	1007883a 	mov	r3,r2
   86110:	28800017 	ldw	r2,0(r5)
   86114:	31bfff04 	addi	r6,r6,-4
   86118:	29400104 	addi	r5,r5,4
   8611c:	38800015 	stw	r2,0(r7)
   86120:	39c00104 	addi	r7,r7,4
   86124:	19bffa36 	bltu	r3,r6,86110 <memcpy+0x80>
   86128:	3807883a 	mov	r3,r7
   8612c:	003fde06 	br	860a8 <memcpy+0x18>

00086130 <memmove>:
   86130:	2807883a 	mov	r3,r5
   86134:	2011883a 	mov	r8,r4
   86138:	29000c2e 	bgeu	r5,r4,8616c <memmove+0x3c>
   8613c:	298f883a 	add	r7,r5,r6
   86140:	21c00a2e 	bgeu	r4,r7,8616c <memmove+0x3c>
   86144:	30000726 	beq	r6,zero,86164 <memmove+0x34>
   86148:	2187883a 	add	r3,r4,r6
   8614c:	198dc83a 	sub	r6,r3,r6
   86150:	39ffffc4 	addi	r7,r7,-1
   86154:	38800003 	ldbu	r2,0(r7)
   86158:	18ffffc4 	addi	r3,r3,-1
   8615c:	18800005 	stb	r2,0(r3)
   86160:	19bffb1e 	bne	r3,r6,86150 <memmove+0x20>
   86164:	2005883a 	mov	r2,r4
   86168:	f800283a 	ret
   8616c:	01c003c4 	movi	r7,15
   86170:	39800a36 	bltu	r7,r6,8619c <memmove+0x6c>
   86174:	303ffb26 	beq	r6,zero,86164 <memmove+0x34>
   86178:	400f883a 	mov	r7,r8
   8617c:	320d883a 	add	r6,r6,r8
   86180:	28800003 	ldbu	r2,0(r5)
   86184:	29400044 	addi	r5,r5,1
   86188:	38800005 	stb	r2,0(r7)
   8618c:	39c00044 	addi	r7,r7,1
   86190:	39bffb1e 	bne	r7,r6,86180 <memmove+0x50>
   86194:	2005883a 	mov	r2,r4
   86198:	f800283a 	ret
   8619c:	1904b03a 	or	r2,r3,r4
   861a0:	108000cc 	andi	r2,r2,3
   861a4:	103ff31e 	bne	r2,zero,86174 <memmove+0x44>
   861a8:	3811883a 	mov	r8,r7
   861ac:	180b883a 	mov	r5,r3
   861b0:	200f883a 	mov	r7,r4
   861b4:	28c00017 	ldw	r3,0(r5)
   861b8:	31bffc04 	addi	r6,r6,-16
   861bc:	38c00015 	stw	r3,0(r7)
   861c0:	28800117 	ldw	r2,4(r5)
   861c4:	38800115 	stw	r2,4(r7)
   861c8:	28c00217 	ldw	r3,8(r5)
   861cc:	38c00215 	stw	r3,8(r7)
   861d0:	28800317 	ldw	r2,12(r5)
   861d4:	29400404 	addi	r5,r5,16
   861d8:	38800315 	stw	r2,12(r7)
   861dc:	39c00404 	addi	r7,r7,16
   861e0:	41bff436 	bltu	r8,r6,861b4 <memmove+0x84>
   861e4:	008000c4 	movi	r2,3
   861e8:	1180072e 	bgeu	r2,r6,86208 <memmove+0xd8>
   861ec:	1007883a 	mov	r3,r2
   861f0:	28800017 	ldw	r2,0(r5)
   861f4:	31bfff04 	addi	r6,r6,-4
   861f8:	29400104 	addi	r5,r5,4
   861fc:	38800015 	stw	r2,0(r7)
   86200:	39c00104 	addi	r7,r7,4
   86204:	19bffa36 	bltu	r3,r6,861f0 <memmove+0xc0>
   86208:	3811883a 	mov	r8,r7
   8620c:	003fd906 	br	86174 <memmove+0x44>

00086210 <memset>:
   86210:	008000c4 	movi	r2,3
   86214:	29403fcc 	andi	r5,r5,255
   86218:	2007883a 	mov	r3,r4
   8621c:	1180022e 	bgeu	r2,r6,86228 <memset+0x18>
   86220:	2084703a 	and	r2,r4,r2
   86224:	10000826 	beq	r2,zero,86248 <memset+0x38>
   86228:	30000526 	beq	r6,zero,86240 <memset+0x30>
   8622c:	2805883a 	mov	r2,r5
   86230:	30cd883a 	add	r6,r6,r3
   86234:	18800005 	stb	r2,0(r3)
   86238:	18c00044 	addi	r3,r3,1
   8623c:	19bffd1e 	bne	r3,r6,86234 <memset+0x24>
   86240:	2005883a 	mov	r2,r4
   86244:	f800283a 	ret
   86248:	2804923a 	slli	r2,r5,8
   8624c:	020003c4 	movi	r8,15
   86250:	200f883a 	mov	r7,r4
   86254:	2884b03a 	or	r2,r5,r2
   86258:	1006943a 	slli	r3,r2,16
   8625c:	10c6b03a 	or	r3,r2,r3
   86260:	41800a2e 	bgeu	r8,r6,8628c <memset+0x7c>
   86264:	4005883a 	mov	r2,r8
   86268:	31bffc04 	addi	r6,r6,-16
   8626c:	38c00015 	stw	r3,0(r7)
   86270:	38c00115 	stw	r3,4(r7)
   86274:	38c00215 	stw	r3,8(r7)
   86278:	38c00315 	stw	r3,12(r7)
   8627c:	39c00404 	addi	r7,r7,16
   86280:	11bff936 	bltu	r2,r6,86268 <memset+0x58>
   86284:	008000c4 	movi	r2,3
   86288:	1180052e 	bgeu	r2,r6,862a0 <memset+0x90>
   8628c:	31bfff04 	addi	r6,r6,-4
   86290:	008000c4 	movi	r2,3
   86294:	38c00015 	stw	r3,0(r7)
   86298:	39c00104 	addi	r7,r7,4
   8629c:	11bffb36 	bltu	r2,r6,8628c <memset+0x7c>
   862a0:	3807883a 	mov	r3,r7
   862a4:	003fe006 	br	86228 <memset+0x18>

000862a8 <_Bfree>:
   862a8:	28000826 	beq	r5,zero,862cc <_Bfree+0x24>
   862ac:	28800117 	ldw	r2,4(r5)
   862b0:	21001317 	ldw	r4,76(r4)
   862b4:	1085883a 	add	r2,r2,r2
   862b8:	1085883a 	add	r2,r2,r2
   862bc:	1105883a 	add	r2,r2,r4
   862c0:	10c00017 	ldw	r3,0(r2)
   862c4:	28c00015 	stw	r3,0(r5)
   862c8:	11400015 	stw	r5,0(r2)
   862cc:	f800283a 	ret

000862d0 <__hi0bits>:
   862d0:	20bfffec 	andhi	r2,r4,65535
   862d4:	10001426 	beq	r2,zero,86328 <__hi0bits+0x58>
   862d8:	0007883a 	mov	r3,zero
   862dc:	20bfc02c 	andhi	r2,r4,65280
   862e0:	1000021e 	bne	r2,zero,862ec <__hi0bits+0x1c>
   862e4:	2008923a 	slli	r4,r4,8
   862e8:	18c00204 	addi	r3,r3,8
   862ec:	20bc002c 	andhi	r2,r4,61440
   862f0:	1000021e 	bne	r2,zero,862fc <__hi0bits+0x2c>
   862f4:	2008913a 	slli	r4,r4,4
   862f8:	18c00104 	addi	r3,r3,4
   862fc:	20b0002c 	andhi	r2,r4,49152
   86300:	1000031e 	bne	r2,zero,86310 <__hi0bits+0x40>
   86304:	2105883a 	add	r2,r4,r4
   86308:	18c00084 	addi	r3,r3,2
   8630c:	1089883a 	add	r4,r2,r2
   86310:	20000316 	blt	r4,zero,86320 <__hi0bits+0x50>
   86314:	2090002c 	andhi	r2,r4,16384
   86318:	10000626 	beq	r2,zero,86334 <__hi0bits+0x64>
   8631c:	18c00044 	addi	r3,r3,1
   86320:	1805883a 	mov	r2,r3
   86324:	f800283a 	ret
   86328:	2008943a 	slli	r4,r4,16
   8632c:	00c00404 	movi	r3,16
   86330:	003fea06 	br	862dc <__hi0bits+0xc>
   86334:	00c00804 	movi	r3,32
   86338:	1805883a 	mov	r2,r3
   8633c:	f800283a 	ret

00086340 <__lo0bits>:
   86340:	20c00017 	ldw	r3,0(r4)
   86344:	188001cc 	andi	r2,r3,7
   86348:	10000a26 	beq	r2,zero,86374 <__lo0bits+0x34>
   8634c:	1880004c 	andi	r2,r3,1
   86350:	1005003a 	cmpeq	r2,r2,zero
   86354:	10002126 	beq	r2,zero,863dc <__lo0bits+0x9c>
   86358:	1880008c 	andi	r2,r3,2
   8635c:	1000251e 	bne	r2,zero,863f4 <__lo0bits+0xb4>
   86360:	1804d0ba 	srli	r2,r3,2
   86364:	01400084 	movi	r5,2
   86368:	20800015 	stw	r2,0(r4)
   8636c:	2805883a 	mov	r2,r5
   86370:	f800283a 	ret
   86374:	18bfffcc 	andi	r2,r3,65535
   86378:	10001526 	beq	r2,zero,863d0 <__lo0bits+0x90>
   8637c:	000b883a 	mov	r5,zero
   86380:	18803fcc 	andi	r2,r3,255
   86384:	1000021e 	bne	r2,zero,86390 <__lo0bits+0x50>
   86388:	1806d23a 	srli	r3,r3,8
   8638c:	29400204 	addi	r5,r5,8
   86390:	188003cc 	andi	r2,r3,15
   86394:	1000021e 	bne	r2,zero,863a0 <__lo0bits+0x60>
   86398:	1806d13a 	srli	r3,r3,4
   8639c:	29400104 	addi	r5,r5,4
   863a0:	188000cc 	andi	r2,r3,3
   863a4:	1000021e 	bne	r2,zero,863b0 <__lo0bits+0x70>
   863a8:	1806d0ba 	srli	r3,r3,2
   863ac:	29400084 	addi	r5,r5,2
   863b0:	1880004c 	andi	r2,r3,1
   863b4:	1000031e 	bne	r2,zero,863c4 <__lo0bits+0x84>
   863b8:	1806d07a 	srli	r3,r3,1
   863bc:	18000a26 	beq	r3,zero,863e8 <__lo0bits+0xa8>
   863c0:	29400044 	addi	r5,r5,1
   863c4:	2805883a 	mov	r2,r5
   863c8:	20c00015 	stw	r3,0(r4)
   863cc:	f800283a 	ret
   863d0:	1806d43a 	srli	r3,r3,16
   863d4:	01400404 	movi	r5,16
   863d8:	003fe906 	br	86380 <__lo0bits+0x40>
   863dc:	000b883a 	mov	r5,zero
   863e0:	2805883a 	mov	r2,r5
   863e4:	f800283a 	ret
   863e8:	01400804 	movi	r5,32
   863ec:	2805883a 	mov	r2,r5
   863f0:	f800283a 	ret
   863f4:	1804d07a 	srli	r2,r3,1
   863f8:	01400044 	movi	r5,1
   863fc:	20800015 	stw	r2,0(r4)
   86400:	003fda06 	br	8636c <__lo0bits+0x2c>

00086404 <__mcmp>:
   86404:	20800417 	ldw	r2,16(r4)
   86408:	28c00417 	ldw	r3,16(r5)
   8640c:	10cfc83a 	sub	r7,r2,r3
   86410:	38000c1e 	bne	r7,zero,86444 <__mcmp+0x40>
   86414:	18c5883a 	add	r2,r3,r3
   86418:	1085883a 	add	r2,r2,r2
   8641c:	10c00504 	addi	r3,r2,20
   86420:	21000504 	addi	r4,r4,20
   86424:	28cb883a 	add	r5,r5,r3
   86428:	2085883a 	add	r2,r4,r2
   8642c:	10bfff04 	addi	r2,r2,-4
   86430:	297fff04 	addi	r5,r5,-4
   86434:	11800017 	ldw	r6,0(r2)
   86438:	28c00017 	ldw	r3,0(r5)
   8643c:	30c0031e 	bne	r6,r3,8644c <__mcmp+0x48>
   86440:	20bffa36 	bltu	r4,r2,8642c <__mcmp+0x28>
   86444:	3805883a 	mov	r2,r7
   86448:	f800283a 	ret
   8644c:	30c00336 	bltu	r6,r3,8645c <__mcmp+0x58>
   86450:	01c00044 	movi	r7,1
   86454:	3805883a 	mov	r2,r7
   86458:	f800283a 	ret
   8645c:	01ffffc4 	movi	r7,-1
   86460:	003ff806 	br	86444 <__mcmp+0x40>

00086464 <__ulp>:
   86464:	295ffc2c 	andhi	r5,r5,32752
   86468:	013f3034 	movhi	r4,64704
   8646c:	290b883a 	add	r5,r5,r4
   86470:	0145c83a 	sub	r2,zero,r5
   86474:	1007d53a 	srai	r3,r2,20
   86478:	000d883a 	mov	r6,zero
   8647c:	0140040e 	bge	zero,r5,86490 <__ulp+0x2c>
   86480:	280f883a 	mov	r7,r5
   86484:	3807883a 	mov	r3,r7
   86488:	3005883a 	mov	r2,r6
   8648c:	f800283a 	ret
   86490:	008004c4 	movi	r2,19
   86494:	193ffb04 	addi	r4,r3,-20
   86498:	10c00c0e 	bge	r2,r3,864cc <__ulp+0x68>
   8649c:	008007c4 	movi	r2,31
   864a0:	1107c83a 	sub	r3,r2,r4
   864a4:	00800784 	movi	r2,30
   864a8:	01400044 	movi	r5,1
   864ac:	11000216 	blt	r2,r4,864b8 <__ulp+0x54>
   864b0:	00800044 	movi	r2,1
   864b4:	10ca983a 	sll	r5,r2,r3
   864b8:	000f883a 	mov	r7,zero
   864bc:	280d883a 	mov	r6,r5
   864c0:	3807883a 	mov	r3,r7
   864c4:	3005883a 	mov	r2,r6
   864c8:	f800283a 	ret
   864cc:	00800234 	movhi	r2,8
   864d0:	10cfd83a 	sra	r7,r2,r3
   864d4:	000d883a 	mov	r6,zero
   864d8:	3005883a 	mov	r2,r6
   864dc:	3807883a 	mov	r3,r7
   864e0:	f800283a 	ret

000864e4 <__b2d>:
   864e4:	20800417 	ldw	r2,16(r4)
   864e8:	defff904 	addi	sp,sp,-28
   864ec:	dd000415 	stw	r20,16(sp)
   864f0:	1085883a 	add	r2,r2,r2
   864f4:	25000504 	addi	r20,r4,20
   864f8:	1085883a 	add	r2,r2,r2
   864fc:	dc000015 	stw	r16,0(sp)
   86500:	a0a1883a 	add	r16,r20,r2
   86504:	dd400515 	stw	r21,20(sp)
   86508:	857fff17 	ldw	r21,-4(r16)
   8650c:	dc400115 	stw	r17,4(sp)
   86510:	dfc00615 	stw	ra,24(sp)
   86514:	a809883a 	mov	r4,r21
   86518:	2823883a 	mov	r17,r5
   8651c:	dcc00315 	stw	r19,12(sp)
   86520:	dc800215 	stw	r18,8(sp)
   86524:	00862d00 	call	862d0 <__hi0bits>
   86528:	100b883a 	mov	r5,r2
   8652c:	00800804 	movi	r2,32
   86530:	1145c83a 	sub	r2,r2,r5
   86534:	88800015 	stw	r2,0(r17)
   86538:	00800284 	movi	r2,10
   8653c:	80ffff04 	addi	r3,r16,-4
   86540:	11401416 	blt	r2,r5,86594 <__b2d+0xb0>
   86544:	008002c4 	movi	r2,11
   86548:	1149c83a 	sub	r4,r2,r5
   8654c:	a0c02736 	bltu	r20,r3,865ec <__b2d+0x108>
   86550:	000d883a 	mov	r6,zero
   86554:	28800544 	addi	r2,r5,21
   86558:	a906d83a 	srl	r3,r21,r4
   8655c:	a884983a 	sll	r2,r21,r2
   86560:	1ccffc34 	orhi	r19,r3,16368
   86564:	11a4b03a 	or	r18,r2,r6
   86568:	9005883a 	mov	r2,r18
   8656c:	9807883a 	mov	r3,r19
   86570:	dfc00617 	ldw	ra,24(sp)
   86574:	dd400517 	ldw	r21,20(sp)
   86578:	dd000417 	ldw	r20,16(sp)
   8657c:	dcc00317 	ldw	r19,12(sp)
   86580:	dc800217 	ldw	r18,8(sp)
   86584:	dc400117 	ldw	r17,4(sp)
   86588:	dc000017 	ldw	r16,0(sp)
   8658c:	dec00704 	addi	sp,sp,28
   86590:	f800283a 	ret
   86594:	a0c00e36 	bltu	r20,r3,865d0 <__b2d+0xec>
   86598:	293ffd44 	addi	r4,r5,-11
   8659c:	000d883a 	mov	r6,zero
   865a0:	20000f26 	beq	r4,zero,865e0 <__b2d+0xfc>
   865a4:	00800804 	movi	r2,32
   865a8:	110bc83a 	sub	r5,r2,r4
   865ac:	a0c01236 	bltu	r20,r3,865f8 <__b2d+0x114>
   865b0:	000f883a 	mov	r7,zero
   865b4:	a904983a 	sll	r2,r21,r4
   865b8:	3146d83a 	srl	r3,r6,r5
   865bc:	3108983a 	sll	r4,r6,r4
   865c0:	108ffc34 	orhi	r2,r2,16368
   865c4:	18a6b03a 	or	r19,r3,r2
   865c8:	3924b03a 	or	r18,r7,r4
   865cc:	003fe606 	br	86568 <__b2d+0x84>
   865d0:	293ffd44 	addi	r4,r5,-11
   865d4:	81bffe17 	ldw	r6,-8(r16)
   865d8:	80fffe04 	addi	r3,r16,-8
   865dc:	203ff11e 	bne	r4,zero,865a4 <__b2d+0xc0>
   865e0:	accffc34 	orhi	r19,r21,16368
   865e4:	3025883a 	mov	r18,r6
   865e8:	003fdf06 	br	86568 <__b2d+0x84>
   865ec:	18bfff17 	ldw	r2,-4(r3)
   865f0:	110cd83a 	srl	r6,r2,r4
   865f4:	003fd706 	br	86554 <__b2d+0x70>
   865f8:	18bfff17 	ldw	r2,-4(r3)
   865fc:	114ed83a 	srl	r7,r2,r5
   86600:	003fec06 	br	865b4 <__b2d+0xd0>

00086604 <__ratio>:
   86604:	defff904 	addi	sp,sp,-28
   86608:	dc400215 	stw	r17,8(sp)
   8660c:	2823883a 	mov	r17,r5
   86610:	d80b883a 	mov	r5,sp
   86614:	dfc00615 	stw	ra,24(sp)
   86618:	dd000515 	stw	r20,20(sp)
   8661c:	dcc00415 	stw	r19,16(sp)
   86620:	dc800315 	stw	r18,12(sp)
   86624:	2025883a 	mov	r18,r4
   86628:	00864e40 	call	864e4 <__b2d>
   8662c:	8809883a 	mov	r4,r17
   86630:	d9400104 	addi	r5,sp,4
   86634:	1027883a 	mov	r19,r2
   86638:	1829883a 	mov	r20,r3
   8663c:	00864e40 	call	864e4 <__b2d>
   86640:	89000417 	ldw	r4,16(r17)
   86644:	91c00417 	ldw	r7,16(r18)
   86648:	d9800117 	ldw	r6,4(sp)
   8664c:	180b883a 	mov	r5,r3
   86650:	390fc83a 	sub	r7,r7,r4
   86654:	1009883a 	mov	r4,r2
   86658:	d8800017 	ldw	r2,0(sp)
   8665c:	380e917a 	slli	r7,r7,5
   86660:	2011883a 	mov	r8,r4
   86664:	1185c83a 	sub	r2,r2,r6
   86668:	11c5883a 	add	r2,r2,r7
   8666c:	1006953a 	slli	r3,r2,20
   86670:	2813883a 	mov	r9,r5
   86674:	00800d0e 	bge	zero,r2,866ac <__ratio+0xa8>
   86678:	1d29883a 	add	r20,r3,r20
   8667c:	a00b883a 	mov	r5,r20
   86680:	480f883a 	mov	r7,r9
   86684:	9809883a 	mov	r4,r19
   86688:	400d883a 	mov	r6,r8
   8668c:	008964c0 	call	8964c <__divdf3>
   86690:	dfc00617 	ldw	ra,24(sp)
   86694:	dd000517 	ldw	r20,20(sp)
   86698:	dcc00417 	ldw	r19,16(sp)
   8669c:	dc800317 	ldw	r18,12(sp)
   866a0:	dc400217 	ldw	r17,8(sp)
   866a4:	dec00704 	addi	sp,sp,28
   866a8:	f800283a 	ret
   866ac:	28d3c83a 	sub	r9,r5,r3
   866b0:	003ff206 	br	8667c <__ratio+0x78>

000866b4 <_mprec_log10>:
   866b4:	defffe04 	addi	sp,sp,-8
   866b8:	008005c4 	movi	r2,23
   866bc:	dc000015 	stw	r16,0(sp)
   866c0:	dfc00115 	stw	ra,4(sp)
   866c4:	2021883a 	mov	r16,r4
   866c8:	11000c16 	blt	r2,r4,866fc <_mprec_log10+0x48>
   866cc:	200490fa 	slli	r2,r4,3
   866d0:	00c00274 	movhi	r3,9
   866d4:	18f50504 	addi	r3,r3,-11244
   866d8:	10c5883a 	add	r2,r2,r3
   866dc:	12400117 	ldw	r9,4(r2)
   866e0:	12000017 	ldw	r8,0(r2)
   866e4:	4807883a 	mov	r3,r9
   866e8:	4005883a 	mov	r2,r8
   866ec:	dfc00117 	ldw	ra,4(sp)
   866f0:	dc000017 	ldw	r16,0(sp)
   866f4:	dec00204 	addi	sp,sp,8
   866f8:	f800283a 	ret
   866fc:	0011883a 	mov	r8,zero
   86700:	024ffc34 	movhi	r9,16368
   86704:	0005883a 	mov	r2,zero
   86708:	00d00934 	movhi	r3,16420
   8670c:	480b883a 	mov	r5,r9
   86710:	4009883a 	mov	r4,r8
   86714:	180f883a 	mov	r7,r3
   86718:	100d883a 	mov	r6,r2
   8671c:	00892880 	call	89288 <__muldf3>
   86720:	843fffc4 	addi	r16,r16,-1
   86724:	1011883a 	mov	r8,r2
   86728:	1813883a 	mov	r9,r3
   8672c:	803ff51e 	bne	r16,zero,86704 <_mprec_log10+0x50>
   86730:	4005883a 	mov	r2,r8
   86734:	4807883a 	mov	r3,r9
   86738:	dfc00117 	ldw	ra,4(sp)
   8673c:	dc000017 	ldw	r16,0(sp)
   86740:	dec00204 	addi	sp,sp,8
   86744:	f800283a 	ret

00086748 <__copybits>:
   86748:	297fffc4 	addi	r5,r5,-1
   8674c:	30800417 	ldw	r2,16(r6)
   86750:	280bd17a 	srai	r5,r5,5
   86754:	31800504 	addi	r6,r6,20
   86758:	1085883a 	add	r2,r2,r2
   8675c:	294b883a 	add	r5,r5,r5
   86760:	294b883a 	add	r5,r5,r5
   86764:	1085883a 	add	r2,r2,r2
   86768:	290b883a 	add	r5,r5,r4
   8676c:	3087883a 	add	r3,r6,r2
   86770:	29400104 	addi	r5,r5,4
   86774:	30c0052e 	bgeu	r6,r3,8678c <__copybits+0x44>
   86778:	30800017 	ldw	r2,0(r6)
   8677c:	31800104 	addi	r6,r6,4
   86780:	20800015 	stw	r2,0(r4)
   86784:	21000104 	addi	r4,r4,4
   86788:	30fffb36 	bltu	r6,r3,86778 <__copybits+0x30>
   8678c:	2140032e 	bgeu	r4,r5,8679c <__copybits+0x54>
   86790:	20000015 	stw	zero,0(r4)
   86794:	21000104 	addi	r4,r4,4
   86798:	217ffd36 	bltu	r4,r5,86790 <__copybits+0x48>
   8679c:	f800283a 	ret

000867a0 <__any_on>:
   867a0:	20800417 	ldw	r2,16(r4)
   867a4:	2807d17a 	srai	r3,r5,5
   867a8:	21000504 	addi	r4,r4,20
   867ac:	10c00d0e 	bge	r2,r3,867e4 <__any_on+0x44>
   867b0:	1085883a 	add	r2,r2,r2
   867b4:	1085883a 	add	r2,r2,r2
   867b8:	208d883a 	add	r6,r4,r2
   867bc:	2180182e 	bgeu	r4,r6,86820 <__any_on+0x80>
   867c0:	30bfff17 	ldw	r2,-4(r6)
   867c4:	30ffff04 	addi	r3,r6,-4
   867c8:	1000041e 	bne	r2,zero,867dc <__any_on+0x3c>
   867cc:	20c0142e 	bgeu	r4,r3,86820 <__any_on+0x80>
   867d0:	18ffff04 	addi	r3,r3,-4
   867d4:	18800017 	ldw	r2,0(r3)
   867d8:	103ffc26 	beq	r2,zero,867cc <__any_on+0x2c>
   867dc:	00800044 	movi	r2,1
   867e0:	f800283a 	ret
   867e4:	18800a0e 	bge	r3,r2,86810 <__any_on+0x70>
   867e8:	294007cc 	andi	r5,r5,31
   867ec:	28000826 	beq	r5,zero,86810 <__any_on+0x70>
   867f0:	18c5883a 	add	r2,r3,r3
   867f4:	1085883a 	add	r2,r2,r2
   867f8:	208d883a 	add	r6,r4,r2
   867fc:	30c00017 	ldw	r3,0(r6)
   86800:	1944d83a 	srl	r2,r3,r5
   86804:	1144983a 	sll	r2,r2,r5
   86808:	18bff41e 	bne	r3,r2,867dc <__any_on+0x3c>
   8680c:	003feb06 	br	867bc <__any_on+0x1c>
   86810:	18c5883a 	add	r2,r3,r3
   86814:	1085883a 	add	r2,r2,r2
   86818:	208d883a 	add	r6,r4,r2
   8681c:	003fe706 	br	867bc <__any_on+0x1c>
   86820:	0005883a 	mov	r2,zero
   86824:	f800283a 	ret

00086828 <_Balloc>:
   86828:	20c01317 	ldw	r3,76(r4)
   8682c:	defffb04 	addi	sp,sp,-20
   86830:	dcc00315 	stw	r19,12(sp)
   86834:	dc800215 	stw	r18,8(sp)
   86838:	dfc00415 	stw	ra,16(sp)
   8683c:	2825883a 	mov	r18,r5
   86840:	dc400115 	stw	r17,4(sp)
   86844:	dc000015 	stw	r16,0(sp)
   86848:	2027883a 	mov	r19,r4
   8684c:	01800404 	movi	r6,16
   86850:	01400104 	movi	r5,4
   86854:	18001726 	beq	r3,zero,868b4 <_Balloc+0x8c>
   86858:	01400044 	movi	r5,1
   8685c:	9485883a 	add	r2,r18,r18
   86860:	2ca2983a 	sll	r17,r5,r18
   86864:	1085883a 	add	r2,r2,r2
   86868:	10c7883a 	add	r3,r2,r3
   8686c:	1c000017 	ldw	r16,0(r3)
   86870:	8c4d883a 	add	r6,r17,r17
   86874:	318d883a 	add	r6,r6,r6
   86878:	9809883a 	mov	r4,r19
   8687c:	31800504 	addi	r6,r6,20
   86880:	80001226 	beq	r16,zero,868cc <_Balloc+0xa4>
   86884:	80800017 	ldw	r2,0(r16)
   86888:	18800015 	stw	r2,0(r3)
   8688c:	80000415 	stw	zero,16(r16)
   86890:	80000315 	stw	zero,12(r16)
   86894:	8005883a 	mov	r2,r16
   86898:	dfc00417 	ldw	ra,16(sp)
   8689c:	dcc00317 	ldw	r19,12(sp)
   868a0:	dc800217 	ldw	r18,8(sp)
   868a4:	dc400117 	ldw	r17,4(sp)
   868a8:	dc000017 	ldw	r16,0(sp)
   868ac:	dec00504 	addi	sp,sp,20
   868b0:	f800283a 	ret
   868b4:	0087c880 	call	87c88 <_calloc_r>
   868b8:	1007883a 	mov	r3,r2
   868bc:	0021883a 	mov	r16,zero
   868c0:	98801315 	stw	r2,76(r19)
   868c4:	103fe41e 	bne	r2,zero,86858 <_Balloc+0x30>
   868c8:	003ff206 	br	86894 <_Balloc+0x6c>
   868cc:	0087c880 	call	87c88 <_calloc_r>
   868d0:	103ff026 	beq	r2,zero,86894 <_Balloc+0x6c>
   868d4:	1021883a 	mov	r16,r2
   868d8:	14800115 	stw	r18,4(r2)
   868dc:	14400215 	stw	r17,8(r2)
   868e0:	003fea06 	br	8688c <_Balloc+0x64>

000868e4 <__d2b>:
   868e4:	defff504 	addi	sp,sp,-44
   868e8:	dcc00515 	stw	r19,20(sp)
   868ec:	04c00044 	movi	r19,1
   868f0:	dc000215 	stw	r16,8(sp)
   868f4:	2821883a 	mov	r16,r5
   868f8:	980b883a 	mov	r5,r19
   868fc:	ddc00915 	stw	r23,36(sp)
   86900:	dd800815 	stw	r22,32(sp)
   86904:	dd400715 	stw	r21,28(sp)
   86908:	dd000615 	stw	r20,24(sp)
   8690c:	dc800415 	stw	r18,16(sp)
   86910:	dc400315 	stw	r17,12(sp)
   86914:	dfc00a15 	stw	ra,40(sp)
   86918:	3023883a 	mov	r17,r6
   8691c:	382d883a 	mov	r22,r7
   86920:	ddc00b17 	ldw	r23,44(sp)
   86924:	00868280 	call	86828 <_Balloc>
   86928:	1025883a 	mov	r18,r2
   8692c:	00a00034 	movhi	r2,32768
   86930:	10bfffc4 	addi	r2,r2,-1
   86934:	8888703a 	and	r4,r17,r2
   86938:	202ad53a 	srli	r21,r4,20
   8693c:	00800434 	movhi	r2,16
   86940:	10bfffc4 	addi	r2,r2,-1
   86944:	8886703a 	and	r3,r17,r2
   86948:	a829003a 	cmpeq	r20,r21,zero
   8694c:	800b883a 	mov	r5,r16
   86950:	d8c00115 	stw	r3,4(sp)
   86954:	94000504 	addi	r16,r18,20
   86958:	a000021e 	bne	r20,zero,86964 <__d2b+0x80>
   8695c:	18c00434 	orhi	r3,r3,16
   86960:	d8c00115 	stw	r3,4(sp)
   86964:	28002726 	beq	r5,zero,86a04 <__d2b+0x120>
   86968:	d809883a 	mov	r4,sp
   8696c:	d9400015 	stw	r5,0(sp)
   86970:	00863400 	call	86340 <__lo0bits>
   86974:	100d883a 	mov	r6,r2
   86978:	10003526 	beq	r2,zero,86a50 <__d2b+0x16c>
   8697c:	d8c00117 	ldw	r3,4(sp)
   86980:	00800804 	movi	r2,32
   86984:	1185c83a 	sub	r2,r2,r6
   86988:	d9000017 	ldw	r4,0(sp)
   8698c:	1886983a 	sll	r3,r3,r2
   86990:	1906b03a 	or	r3,r3,r4
   86994:	90c00515 	stw	r3,20(r18)
   86998:	d8c00117 	ldw	r3,4(sp)
   8699c:	1986d83a 	srl	r3,r3,r6
   869a0:	d8c00115 	stw	r3,4(sp)
   869a4:	180b003a 	cmpeq	r5,r3,zero
   869a8:	00800084 	movi	r2,2
   869ac:	114bc83a 	sub	r5,r2,r5
   869b0:	80c00115 	stw	r3,4(r16)
   869b4:	91400415 	stw	r5,16(r18)
   869b8:	a0001a1e 	bne	r20,zero,86a24 <__d2b+0x140>
   869bc:	3545883a 	add	r2,r6,r21
   869c0:	10bef344 	addi	r2,r2,-1075
   869c4:	00c00d44 	movi	r3,53
   869c8:	b0800015 	stw	r2,0(r22)
   869cc:	1987c83a 	sub	r3,r3,r6
   869d0:	b8c00015 	stw	r3,0(r23)
   869d4:	9005883a 	mov	r2,r18
   869d8:	dfc00a17 	ldw	ra,40(sp)
   869dc:	ddc00917 	ldw	r23,36(sp)
   869e0:	dd800817 	ldw	r22,32(sp)
   869e4:	dd400717 	ldw	r21,28(sp)
   869e8:	dd000617 	ldw	r20,24(sp)
   869ec:	dcc00517 	ldw	r19,20(sp)
   869f0:	dc800417 	ldw	r18,16(sp)
   869f4:	dc400317 	ldw	r17,12(sp)
   869f8:	dc000217 	ldw	r16,8(sp)
   869fc:	dec00b04 	addi	sp,sp,44
   86a00:	f800283a 	ret
   86a04:	d9000104 	addi	r4,sp,4
   86a08:	00863400 	call	86340 <__lo0bits>
   86a0c:	11800804 	addi	r6,r2,32
   86a10:	d8800117 	ldw	r2,4(sp)
   86a14:	94c00415 	stw	r19,16(r18)
   86a18:	980b883a 	mov	r5,r19
   86a1c:	90800515 	stw	r2,20(r18)
   86a20:	a03fe626 	beq	r20,zero,869bc <__d2b+0xd8>
   86a24:	2945883a 	add	r2,r5,r5
   86a28:	1085883a 	add	r2,r2,r2
   86a2c:	1405883a 	add	r2,r2,r16
   86a30:	113fff17 	ldw	r4,-4(r2)
   86a34:	30fef384 	addi	r3,r6,-1074
   86a38:	2820917a 	slli	r16,r5,5
   86a3c:	b0c00015 	stw	r3,0(r22)
   86a40:	00862d00 	call	862d0 <__hi0bits>
   86a44:	80a1c83a 	sub	r16,r16,r2
   86a48:	bc000015 	stw	r16,0(r23)
   86a4c:	003fe106 	br	869d4 <__d2b+0xf0>
   86a50:	d8800017 	ldw	r2,0(sp)
   86a54:	90800515 	stw	r2,20(r18)
   86a58:	d8c00117 	ldw	r3,4(sp)
   86a5c:	003fd106 	br	869a4 <__d2b+0xc0>

00086a60 <__mdiff>:
   86a60:	defffb04 	addi	sp,sp,-20
   86a64:	dc000015 	stw	r16,0(sp)
   86a68:	2821883a 	mov	r16,r5
   86a6c:	dc800215 	stw	r18,8(sp)
   86a70:	300b883a 	mov	r5,r6
   86a74:	2025883a 	mov	r18,r4
   86a78:	8009883a 	mov	r4,r16
   86a7c:	dc400115 	stw	r17,4(sp)
   86a80:	dfc00415 	stw	ra,16(sp)
   86a84:	dcc00315 	stw	r19,12(sp)
   86a88:	3023883a 	mov	r17,r6
   86a8c:	00864040 	call	86404 <__mcmp>
   86a90:	10004226 	beq	r2,zero,86b9c <__mdiff+0x13c>
   86a94:	10005016 	blt	r2,zero,86bd8 <__mdiff+0x178>
   86a98:	0027883a 	mov	r19,zero
   86a9c:	81400117 	ldw	r5,4(r16)
   86aa0:	9009883a 	mov	r4,r18
   86aa4:	00868280 	call	86828 <_Balloc>
   86aa8:	1019883a 	mov	r12,r2
   86aac:	82800417 	ldw	r10,16(r16)
   86ab0:	88800417 	ldw	r2,16(r17)
   86ab4:	81800504 	addi	r6,r16,20
   86ab8:	5287883a 	add	r3,r10,r10
   86abc:	1085883a 	add	r2,r2,r2
   86ac0:	18c7883a 	add	r3,r3,r3
   86ac4:	1085883a 	add	r2,r2,r2
   86ac8:	8a000504 	addi	r8,r17,20
   86acc:	64c00315 	stw	r19,12(r12)
   86ad0:	30db883a 	add	r13,r6,r3
   86ad4:	4097883a 	add	r11,r8,r2
   86ad8:	61c00504 	addi	r7,r12,20
   86adc:	0013883a 	mov	r9,zero
   86ae0:	31000017 	ldw	r4,0(r6)
   86ae4:	41400017 	ldw	r5,0(r8)
   86ae8:	42000104 	addi	r8,r8,4
   86aec:	20bfffcc 	andi	r2,r4,65535
   86af0:	28ffffcc 	andi	r3,r5,65535
   86af4:	10c5c83a 	sub	r2,r2,r3
   86af8:	1245883a 	add	r2,r2,r9
   86afc:	2008d43a 	srli	r4,r4,16
   86b00:	280ad43a 	srli	r5,r5,16
   86b04:	1007d43a 	srai	r3,r2,16
   86b08:	3880000d 	sth	r2,0(r7)
   86b0c:	2149c83a 	sub	r4,r4,r5
   86b10:	20c9883a 	add	r4,r4,r3
   86b14:	3900008d 	sth	r4,2(r7)
   86b18:	31800104 	addi	r6,r6,4
   86b1c:	39c00104 	addi	r7,r7,4
   86b20:	2013d43a 	srai	r9,r4,16
   86b24:	42ffee36 	bltu	r8,r11,86ae0 <__mdiff+0x80>
   86b28:	33400c2e 	bgeu	r6,r13,86b5c <__mdiff+0xfc>
   86b2c:	30800017 	ldw	r2,0(r6)
   86b30:	31800104 	addi	r6,r6,4
   86b34:	10ffffcc 	andi	r3,r2,65535
   86b38:	1a47883a 	add	r3,r3,r9
   86b3c:	1004d43a 	srli	r2,r2,16
   86b40:	1809d43a 	srai	r4,r3,16
   86b44:	38c0000d 	sth	r3,0(r7)
   86b48:	1105883a 	add	r2,r2,r4
   86b4c:	3880008d 	sth	r2,2(r7)
   86b50:	1013d43a 	srai	r9,r2,16
   86b54:	39c00104 	addi	r7,r7,4
   86b58:	337ff436 	bltu	r6,r13,86b2c <__mdiff+0xcc>
   86b5c:	38bfff17 	ldw	r2,-4(r7)
   86b60:	38ffff04 	addi	r3,r7,-4
   86b64:	1000041e 	bne	r2,zero,86b78 <__mdiff+0x118>
   86b68:	18ffff04 	addi	r3,r3,-4
   86b6c:	18800017 	ldw	r2,0(r3)
   86b70:	52bfffc4 	addi	r10,r10,-1
   86b74:	103ffc26 	beq	r2,zero,86b68 <__mdiff+0x108>
   86b78:	6005883a 	mov	r2,r12
   86b7c:	62800415 	stw	r10,16(r12)
   86b80:	dfc00417 	ldw	ra,16(sp)
   86b84:	dcc00317 	ldw	r19,12(sp)
   86b88:	dc800217 	ldw	r18,8(sp)
   86b8c:	dc400117 	ldw	r17,4(sp)
   86b90:	dc000017 	ldw	r16,0(sp)
   86b94:	dec00504 	addi	sp,sp,20
   86b98:	f800283a 	ret
   86b9c:	9009883a 	mov	r4,r18
   86ba0:	000b883a 	mov	r5,zero
   86ba4:	00868280 	call	86828 <_Balloc>
   86ba8:	1019883a 	mov	r12,r2
   86bac:	00800044 	movi	r2,1
   86bb0:	60800415 	stw	r2,16(r12)
   86bb4:	6005883a 	mov	r2,r12
   86bb8:	60000515 	stw	zero,20(r12)
   86bbc:	dfc00417 	ldw	ra,16(sp)
   86bc0:	dcc00317 	ldw	r19,12(sp)
   86bc4:	dc800217 	ldw	r18,8(sp)
   86bc8:	dc400117 	ldw	r17,4(sp)
   86bcc:	dc000017 	ldw	r16,0(sp)
   86bd0:	dec00504 	addi	sp,sp,20
   86bd4:	f800283a 	ret
   86bd8:	880d883a 	mov	r6,r17
   86bdc:	04c00044 	movi	r19,1
   86be0:	8023883a 	mov	r17,r16
   86be4:	3021883a 	mov	r16,r6
   86be8:	003fac06 	br	86a9c <__mdiff+0x3c>

00086bec <__lshift>:
   86bec:	defff904 	addi	sp,sp,-28
   86bf0:	28800417 	ldw	r2,16(r5)
   86bf4:	dc000015 	stw	r16,0(sp)
   86bf8:	3021d17a 	srai	r16,r6,5
   86bfc:	28c00217 	ldw	r3,8(r5)
   86c00:	10800044 	addi	r2,r2,1
   86c04:	dc400115 	stw	r17,4(sp)
   86c08:	80a3883a 	add	r17,r16,r2
   86c0c:	dd400515 	stw	r21,20(sp)
   86c10:	dd000415 	stw	r20,16(sp)
   86c14:	dc800215 	stw	r18,8(sp)
   86c18:	dfc00615 	stw	ra,24(sp)
   86c1c:	2825883a 	mov	r18,r5
   86c20:	dcc00315 	stw	r19,12(sp)
   86c24:	3029883a 	mov	r20,r6
   86c28:	202b883a 	mov	r21,r4
   86c2c:	29400117 	ldw	r5,4(r5)
   86c30:	1c40030e 	bge	r3,r17,86c40 <__lshift+0x54>
   86c34:	18c7883a 	add	r3,r3,r3
   86c38:	29400044 	addi	r5,r5,1
   86c3c:	1c7ffd16 	blt	r3,r17,86c34 <__lshift+0x48>
   86c40:	a809883a 	mov	r4,r21
   86c44:	00868280 	call	86828 <_Balloc>
   86c48:	1027883a 	mov	r19,r2
   86c4c:	11400504 	addi	r5,r2,20
   86c50:	0400090e 	bge	zero,r16,86c78 <__lshift+0x8c>
   86c54:	2805883a 	mov	r2,r5
   86c58:	0007883a 	mov	r3,zero
   86c5c:	18c00044 	addi	r3,r3,1
   86c60:	10000015 	stw	zero,0(r2)
   86c64:	10800104 	addi	r2,r2,4
   86c68:	80fffc1e 	bne	r16,r3,86c5c <__lshift+0x70>
   86c6c:	8405883a 	add	r2,r16,r16
   86c70:	1085883a 	add	r2,r2,r2
   86c74:	288b883a 	add	r5,r5,r2
   86c78:	90800417 	ldw	r2,16(r18)
   86c7c:	91000504 	addi	r4,r18,20
   86c80:	a18007cc 	andi	r6,r20,31
   86c84:	1085883a 	add	r2,r2,r2
   86c88:	1085883a 	add	r2,r2,r2
   86c8c:	208f883a 	add	r7,r4,r2
   86c90:	30001e26 	beq	r6,zero,86d0c <__lshift+0x120>
   86c94:	00800804 	movi	r2,32
   86c98:	1191c83a 	sub	r8,r2,r6
   86c9c:	0007883a 	mov	r3,zero
   86ca0:	20800017 	ldw	r2,0(r4)
   86ca4:	1184983a 	sll	r2,r2,r6
   86ca8:	1884b03a 	or	r2,r3,r2
   86cac:	28800015 	stw	r2,0(r5)
   86cb0:	20c00017 	ldw	r3,0(r4)
   86cb4:	21000104 	addi	r4,r4,4
   86cb8:	29400104 	addi	r5,r5,4
   86cbc:	1a06d83a 	srl	r3,r3,r8
   86cc0:	21fff736 	bltu	r4,r7,86ca0 <__lshift+0xb4>
   86cc4:	28c00015 	stw	r3,0(r5)
   86cc8:	18000126 	beq	r3,zero,86cd0 <__lshift+0xe4>
   86ccc:	8c400044 	addi	r17,r17,1
   86cd0:	88bfffc4 	addi	r2,r17,-1
   86cd4:	98800415 	stw	r2,16(r19)
   86cd8:	a809883a 	mov	r4,r21
   86cdc:	900b883a 	mov	r5,r18
   86ce0:	00862a80 	call	862a8 <_Bfree>
   86ce4:	9805883a 	mov	r2,r19
   86ce8:	dfc00617 	ldw	ra,24(sp)
   86cec:	dd400517 	ldw	r21,20(sp)
   86cf0:	dd000417 	ldw	r20,16(sp)
   86cf4:	dcc00317 	ldw	r19,12(sp)
   86cf8:	dc800217 	ldw	r18,8(sp)
   86cfc:	dc400117 	ldw	r17,4(sp)
   86d00:	dc000017 	ldw	r16,0(sp)
   86d04:	dec00704 	addi	sp,sp,28
   86d08:	f800283a 	ret
   86d0c:	20800017 	ldw	r2,0(r4)
   86d10:	21000104 	addi	r4,r4,4
   86d14:	28800015 	stw	r2,0(r5)
   86d18:	29400104 	addi	r5,r5,4
   86d1c:	21ffec2e 	bgeu	r4,r7,86cd0 <__lshift+0xe4>
   86d20:	20800017 	ldw	r2,0(r4)
   86d24:	21000104 	addi	r4,r4,4
   86d28:	28800015 	stw	r2,0(r5)
   86d2c:	29400104 	addi	r5,r5,4
   86d30:	21fff636 	bltu	r4,r7,86d0c <__lshift+0x120>
   86d34:	003fe606 	br	86cd0 <__lshift+0xe4>

00086d38 <__multiply>:
   86d38:	defff004 	addi	sp,sp,-64
   86d3c:	dc800815 	stw	r18,32(sp)
   86d40:	dc400715 	stw	r17,28(sp)
   86d44:	2c800417 	ldw	r18,16(r5)
   86d48:	34400417 	ldw	r17,16(r6)
   86d4c:	dcc00915 	stw	r19,36(sp)
   86d50:	dc000615 	stw	r16,24(sp)
   86d54:	dfc00f15 	stw	ra,60(sp)
   86d58:	df000e15 	stw	fp,56(sp)
   86d5c:	ddc00d15 	stw	r23,52(sp)
   86d60:	dd800c15 	stw	r22,48(sp)
   86d64:	dd400b15 	stw	r21,44(sp)
   86d68:	dd000a15 	stw	r20,40(sp)
   86d6c:	2821883a 	mov	r16,r5
   86d70:	3027883a 	mov	r19,r6
   86d74:	9440040e 	bge	r18,r17,86d88 <__multiply+0x50>
   86d78:	8825883a 	mov	r18,r17
   86d7c:	2c400417 	ldw	r17,16(r5)
   86d80:	2827883a 	mov	r19,r5
   86d84:	3021883a 	mov	r16,r6
   86d88:	80800217 	ldw	r2,8(r16)
   86d8c:	9447883a 	add	r3,r18,r17
   86d90:	d8c00415 	stw	r3,16(sp)
   86d94:	81400117 	ldw	r5,4(r16)
   86d98:	10c0010e 	bge	r2,r3,86da0 <__multiply+0x68>
   86d9c:	29400044 	addi	r5,r5,1
   86da0:	00868280 	call	86828 <_Balloc>
   86da4:	d8800515 	stw	r2,20(sp)
   86da8:	d9000417 	ldw	r4,16(sp)
   86dac:	d8c00517 	ldw	r3,20(sp)
   86db0:	2105883a 	add	r2,r4,r4
   86db4:	1085883a 	add	r2,r2,r2
   86db8:	19000504 	addi	r4,r3,20
   86dbc:	2085883a 	add	r2,r4,r2
   86dc0:	d8800315 	stw	r2,12(sp)
   86dc4:	2080052e 	bgeu	r4,r2,86ddc <__multiply+0xa4>
   86dc8:	2005883a 	mov	r2,r4
   86dcc:	d8c00317 	ldw	r3,12(sp)
   86dd0:	10000015 	stw	zero,0(r2)
   86dd4:	10800104 	addi	r2,r2,4
   86dd8:	10fffc36 	bltu	r2,r3,86dcc <__multiply+0x94>
   86ddc:	8c45883a 	add	r2,r17,r17
   86de0:	9487883a 	add	r3,r18,r18
   86de4:	9dc00504 	addi	r23,r19,20
   86de8:	1085883a 	add	r2,r2,r2
   86dec:	84000504 	addi	r16,r16,20
   86df0:	18c7883a 	add	r3,r3,r3
   86df4:	b885883a 	add	r2,r23,r2
   86df8:	dc000015 	stw	r16,0(sp)
   86dfc:	d8800215 	stw	r2,8(sp)
   86e00:	80f9883a 	add	fp,r16,r3
   86e04:	b880432e 	bgeu	r23,r2,86f14 <__multiply+0x1dc>
   86e08:	d9000115 	stw	r4,4(sp)
   86e0c:	b9000017 	ldw	r4,0(r23)
   86e10:	253fffcc 	andi	r20,r4,65535
   86e14:	a0001a26 	beq	r20,zero,86e80 <__multiply+0x148>
   86e18:	dcc00017 	ldw	r19,0(sp)
   86e1c:	dc800117 	ldw	r18,4(sp)
   86e20:	002b883a 	mov	r21,zero
   86e24:	9c400017 	ldw	r17,0(r19)
   86e28:	94000017 	ldw	r16,0(r18)
   86e2c:	a009883a 	mov	r4,r20
   86e30:	897fffcc 	andi	r5,r17,65535
   86e34:	0089ffc0 	call	89ffc <__mulsi3>
   86e38:	880ad43a 	srli	r5,r17,16
   86e3c:	80ffffcc 	andi	r3,r16,65535
   86e40:	a8c7883a 	add	r3,r21,r3
   86e44:	a009883a 	mov	r4,r20
   86e48:	10e3883a 	add	r17,r2,r3
   86e4c:	8020d43a 	srli	r16,r16,16
   86e50:	0089ffc0 	call	89ffc <__mulsi3>
   86e54:	8806d43a 	srli	r3,r17,16
   86e58:	1405883a 	add	r2,r2,r16
   86e5c:	9cc00104 	addi	r19,r19,4
   86e60:	1887883a 	add	r3,r3,r2
   86e64:	90c0008d 	sth	r3,2(r18)
   86e68:	9440000d 	sth	r17,0(r18)
   86e6c:	182ad43a 	srli	r21,r3,16
   86e70:	94800104 	addi	r18,r18,4
   86e74:	9f3feb36 	bltu	r19,fp,86e24 <__multiply+0xec>
   86e78:	95400015 	stw	r21,0(r18)
   86e7c:	b9000017 	ldw	r4,0(r23)
   86e80:	202ad43a 	srli	r21,r4,16
   86e84:	a8001c26 	beq	r21,zero,86ef8 <__multiply+0x1c0>
   86e88:	d9000117 	ldw	r4,4(sp)
   86e8c:	dd000017 	ldw	r20,0(sp)
   86e90:	002d883a 	mov	r22,zero
   86e94:	24c00017 	ldw	r19,0(r4)
   86e98:	2025883a 	mov	r18,r4
   86e9c:	9823883a 	mov	r17,r19
   86ea0:	a4000017 	ldw	r16,0(r20)
   86ea4:	a809883a 	mov	r4,r21
   86ea8:	a5000104 	addi	r20,r20,4
   86eac:	817fffcc 	andi	r5,r16,65535
   86eb0:	0089ffc0 	call	89ffc <__mulsi3>
   86eb4:	8806d43a 	srli	r3,r17,16
   86eb8:	800ad43a 	srli	r5,r16,16
   86ebc:	94c0000d 	sth	r19,0(r18)
   86ec0:	b0c7883a 	add	r3,r22,r3
   86ec4:	10e1883a 	add	r16,r2,r3
   86ec8:	9400008d 	sth	r16,2(r18)
   86ecc:	a809883a 	mov	r4,r21
   86ed0:	94800104 	addi	r18,r18,4
   86ed4:	0089ffc0 	call	89ffc <__mulsi3>
   86ed8:	94400017 	ldw	r17,0(r18)
   86edc:	8020d43a 	srli	r16,r16,16
   86ee0:	88ffffcc 	andi	r3,r17,65535
   86ee4:	10c5883a 	add	r2,r2,r3
   86ee8:	80a7883a 	add	r19,r16,r2
   86eec:	982cd43a 	srli	r22,r19,16
   86ef0:	a73feb36 	bltu	r20,fp,86ea0 <__multiply+0x168>
   86ef4:	94c00015 	stw	r19,0(r18)
   86ef8:	d8800217 	ldw	r2,8(sp)
   86efc:	bdc00104 	addi	r23,r23,4
   86f00:	b880042e 	bgeu	r23,r2,86f14 <__multiply+0x1dc>
   86f04:	d8c00117 	ldw	r3,4(sp)
   86f08:	18c00104 	addi	r3,r3,4
   86f0c:	d8c00115 	stw	r3,4(sp)
   86f10:	003fbe06 	br	86e0c <__multiply+0xd4>
   86f14:	d9000417 	ldw	r4,16(sp)
   86f18:	01000c0e 	bge	zero,r4,86f4c <__multiply+0x214>
   86f1c:	d8c00317 	ldw	r3,12(sp)
   86f20:	18bfff17 	ldw	r2,-4(r3)
   86f24:	18ffff04 	addi	r3,r3,-4
   86f28:	10000326 	beq	r2,zero,86f38 <__multiply+0x200>
   86f2c:	00000706 	br	86f4c <__multiply+0x214>
   86f30:	18800017 	ldw	r2,0(r3)
   86f34:	1000051e 	bne	r2,zero,86f4c <__multiply+0x214>
   86f38:	d9000417 	ldw	r4,16(sp)
   86f3c:	18ffff04 	addi	r3,r3,-4
   86f40:	213fffc4 	addi	r4,r4,-1
   86f44:	d9000415 	stw	r4,16(sp)
   86f48:	203ff91e 	bne	r4,zero,86f30 <__multiply+0x1f8>
   86f4c:	d8800417 	ldw	r2,16(sp)
   86f50:	d8c00517 	ldw	r3,20(sp)
   86f54:	18800415 	stw	r2,16(r3)
   86f58:	1805883a 	mov	r2,r3
   86f5c:	dfc00f17 	ldw	ra,60(sp)
   86f60:	df000e17 	ldw	fp,56(sp)
   86f64:	ddc00d17 	ldw	r23,52(sp)
   86f68:	dd800c17 	ldw	r22,48(sp)
   86f6c:	dd400b17 	ldw	r21,44(sp)
   86f70:	dd000a17 	ldw	r20,40(sp)
   86f74:	dcc00917 	ldw	r19,36(sp)
   86f78:	dc800817 	ldw	r18,32(sp)
   86f7c:	dc400717 	ldw	r17,28(sp)
   86f80:	dc000617 	ldw	r16,24(sp)
   86f84:	dec01004 	addi	sp,sp,64
   86f88:	f800283a 	ret

00086f8c <__i2b>:
   86f8c:	defffd04 	addi	sp,sp,-12
   86f90:	dc000015 	stw	r16,0(sp)
   86f94:	04000044 	movi	r16,1
   86f98:	dc800115 	stw	r18,4(sp)
   86f9c:	2825883a 	mov	r18,r5
   86fa0:	800b883a 	mov	r5,r16
   86fa4:	dfc00215 	stw	ra,8(sp)
   86fa8:	00868280 	call	86828 <_Balloc>
   86fac:	14000415 	stw	r16,16(r2)
   86fb0:	14800515 	stw	r18,20(r2)
   86fb4:	dfc00217 	ldw	ra,8(sp)
   86fb8:	dc800117 	ldw	r18,4(sp)
   86fbc:	dc000017 	ldw	r16,0(sp)
   86fc0:	dec00304 	addi	sp,sp,12
   86fc4:	f800283a 	ret

00086fc8 <__multadd>:
   86fc8:	defff604 	addi	sp,sp,-40
   86fcc:	dd800615 	stw	r22,24(sp)
   86fd0:	2d800417 	ldw	r22,16(r5)
   86fd4:	df000815 	stw	fp,32(sp)
   86fd8:	ddc00715 	stw	r23,28(sp)
   86fdc:	dd400515 	stw	r21,20(sp)
   86fe0:	dd000415 	stw	r20,16(sp)
   86fe4:	dcc00315 	stw	r19,12(sp)
   86fe8:	dc800215 	stw	r18,8(sp)
   86fec:	dfc00915 	stw	ra,36(sp)
   86ff0:	dc400115 	stw	r17,4(sp)
   86ff4:	dc000015 	stw	r16,0(sp)
   86ff8:	282f883a 	mov	r23,r5
   86ffc:	2039883a 	mov	fp,r4
   87000:	302b883a 	mov	r21,r6
   87004:	3829883a 	mov	r20,r7
   87008:	2c800504 	addi	r18,r5,20
   8700c:	0027883a 	mov	r19,zero
   87010:	94400017 	ldw	r17,0(r18)
   87014:	a80b883a 	mov	r5,r21
   87018:	9cc00044 	addi	r19,r19,1
   8701c:	893fffcc 	andi	r4,r17,65535
   87020:	0089ffc0 	call	89ffc <__mulsi3>
   87024:	8808d43a 	srli	r4,r17,16
   87028:	1521883a 	add	r16,r2,r20
   8702c:	a80b883a 	mov	r5,r21
   87030:	0089ffc0 	call	89ffc <__mulsi3>
   87034:	8008d43a 	srli	r4,r16,16
   87038:	843fffcc 	andi	r16,r16,65535
   8703c:	1105883a 	add	r2,r2,r4
   87040:	1006943a 	slli	r3,r2,16
   87044:	1028d43a 	srli	r20,r2,16
   87048:	1c07883a 	add	r3,r3,r16
   8704c:	90c00015 	stw	r3,0(r18)
   87050:	94800104 	addi	r18,r18,4
   87054:	9dbfee16 	blt	r19,r22,87010 <__multadd+0x48>
   87058:	a0000826 	beq	r20,zero,8707c <__multadd+0xb4>
   8705c:	b8800217 	ldw	r2,8(r23)
   87060:	b080130e 	bge	r22,r2,870b0 <__multadd+0xe8>
   87064:	b585883a 	add	r2,r22,r22
   87068:	1085883a 	add	r2,r2,r2
   8706c:	15c5883a 	add	r2,r2,r23
   87070:	b0c00044 	addi	r3,r22,1
   87074:	15000515 	stw	r20,20(r2)
   87078:	b8c00415 	stw	r3,16(r23)
   8707c:	b805883a 	mov	r2,r23
   87080:	dfc00917 	ldw	ra,36(sp)
   87084:	df000817 	ldw	fp,32(sp)
   87088:	ddc00717 	ldw	r23,28(sp)
   8708c:	dd800617 	ldw	r22,24(sp)
   87090:	dd400517 	ldw	r21,20(sp)
   87094:	dd000417 	ldw	r20,16(sp)
   87098:	dcc00317 	ldw	r19,12(sp)
   8709c:	dc800217 	ldw	r18,8(sp)
   870a0:	dc400117 	ldw	r17,4(sp)
   870a4:	dc000017 	ldw	r16,0(sp)
   870a8:	dec00a04 	addi	sp,sp,40
   870ac:	f800283a 	ret
   870b0:	b9400117 	ldw	r5,4(r23)
   870b4:	e009883a 	mov	r4,fp
   870b8:	29400044 	addi	r5,r5,1
   870bc:	00868280 	call	86828 <_Balloc>
   870c0:	b9800417 	ldw	r6,16(r23)
   870c4:	b9400304 	addi	r5,r23,12
   870c8:	11000304 	addi	r4,r2,12
   870cc:	318d883a 	add	r6,r6,r6
   870d0:	318d883a 	add	r6,r6,r6
   870d4:	31800204 	addi	r6,r6,8
   870d8:	1023883a 	mov	r17,r2
   870dc:	00860900 	call	86090 <memcpy>
   870e0:	b80b883a 	mov	r5,r23
   870e4:	e009883a 	mov	r4,fp
   870e8:	00862a80 	call	862a8 <_Bfree>
   870ec:	882f883a 	mov	r23,r17
   870f0:	003fdc06 	br	87064 <__multadd+0x9c>

000870f4 <__pow5mult>:
   870f4:	defffa04 	addi	sp,sp,-24
   870f8:	308000cc 	andi	r2,r6,3
   870fc:	dd000415 	stw	r20,16(sp)
   87100:	dcc00315 	stw	r19,12(sp)
   87104:	dc000015 	stw	r16,0(sp)
   87108:	dfc00515 	stw	ra,20(sp)
   8710c:	dc800215 	stw	r18,8(sp)
   87110:	dc400115 	stw	r17,4(sp)
   87114:	3021883a 	mov	r16,r6
   87118:	2027883a 	mov	r19,r4
   8711c:	2829883a 	mov	r20,r5
   87120:	10002b1e 	bne	r2,zero,871d0 <__pow5mult+0xdc>
   87124:	8025d0ba 	srai	r18,r16,2
   87128:	90001b26 	beq	r18,zero,87198 <__pow5mult+0xa4>
   8712c:	9c001217 	ldw	r16,72(r19)
   87130:	8000081e 	bne	r16,zero,87154 <__pow5mult+0x60>
   87134:	00003006 	br	871f8 <__pow5mult+0x104>
   87138:	800b883a 	mov	r5,r16
   8713c:	800d883a 	mov	r6,r16
   87140:	9809883a 	mov	r4,r19
   87144:	90001426 	beq	r18,zero,87198 <__pow5mult+0xa4>
   87148:	80800017 	ldw	r2,0(r16)
   8714c:	10001b26 	beq	r2,zero,871bc <__pow5mult+0xc8>
   87150:	1021883a 	mov	r16,r2
   87154:	9080004c 	andi	r2,r18,1
   87158:	1005003a 	cmpeq	r2,r2,zero
   8715c:	9025d07a 	srai	r18,r18,1
   87160:	800d883a 	mov	r6,r16
   87164:	9809883a 	mov	r4,r19
   87168:	a00b883a 	mov	r5,r20
   8716c:	103ff21e 	bne	r2,zero,87138 <__pow5mult+0x44>
   87170:	0086d380 	call	86d38 <__multiply>
   87174:	a00b883a 	mov	r5,r20
   87178:	9809883a 	mov	r4,r19
   8717c:	1023883a 	mov	r17,r2
   87180:	00862a80 	call	862a8 <_Bfree>
   87184:	8829883a 	mov	r20,r17
   87188:	800b883a 	mov	r5,r16
   8718c:	800d883a 	mov	r6,r16
   87190:	9809883a 	mov	r4,r19
   87194:	903fec1e 	bne	r18,zero,87148 <__pow5mult+0x54>
   87198:	a005883a 	mov	r2,r20
   8719c:	dfc00517 	ldw	ra,20(sp)
   871a0:	dd000417 	ldw	r20,16(sp)
   871a4:	dcc00317 	ldw	r19,12(sp)
   871a8:	dc800217 	ldw	r18,8(sp)
   871ac:	dc400117 	ldw	r17,4(sp)
   871b0:	dc000017 	ldw	r16,0(sp)
   871b4:	dec00604 	addi	sp,sp,24
   871b8:	f800283a 	ret
   871bc:	0086d380 	call	86d38 <__multiply>
   871c0:	80800015 	stw	r2,0(r16)
   871c4:	1021883a 	mov	r16,r2
   871c8:	10000015 	stw	zero,0(r2)
   871cc:	003fe106 	br	87154 <__pow5mult+0x60>
   871d0:	1085883a 	add	r2,r2,r2
   871d4:	00c00274 	movhi	r3,9
   871d8:	18f54b04 	addi	r3,r3,-10964
   871dc:	1085883a 	add	r2,r2,r2
   871e0:	10c5883a 	add	r2,r2,r3
   871e4:	11bfff17 	ldw	r6,-4(r2)
   871e8:	000f883a 	mov	r7,zero
   871ec:	0086fc80 	call	86fc8 <__multadd>
   871f0:	1029883a 	mov	r20,r2
   871f4:	003fcb06 	br	87124 <__pow5mult+0x30>
   871f8:	9809883a 	mov	r4,r19
   871fc:	01409c44 	movi	r5,625
   87200:	0086f8c0 	call	86f8c <__i2b>
   87204:	98801215 	stw	r2,72(r19)
   87208:	1021883a 	mov	r16,r2
   8720c:	10000015 	stw	zero,0(r2)
   87210:	003fd006 	br	87154 <__pow5mult+0x60>

00087214 <__s2b>:
   87214:	defff904 	addi	sp,sp,-28
   87218:	dcc00315 	stw	r19,12(sp)
   8721c:	dc800215 	stw	r18,8(sp)
   87220:	2827883a 	mov	r19,r5
   87224:	2025883a 	mov	r18,r4
   87228:	01400244 	movi	r5,9
   8722c:	39000204 	addi	r4,r7,8
   87230:	dd000415 	stw	r20,16(sp)
   87234:	dc400115 	stw	r17,4(sp)
   87238:	dfc00615 	stw	ra,24(sp)
   8723c:	dd400515 	stw	r21,20(sp)
   87240:	dc000015 	stw	r16,0(sp)
   87244:	3829883a 	mov	r20,r7
   87248:	3023883a 	mov	r17,r6
   8724c:	0089f2c0 	call	89f2c <__divsi3>
   87250:	00c00044 	movi	r3,1
   87254:	1880350e 	bge	r3,r2,8732c <__s2b+0x118>
   87258:	000b883a 	mov	r5,zero
   8725c:	18c7883a 	add	r3,r3,r3
   87260:	29400044 	addi	r5,r5,1
   87264:	18bffd16 	blt	r3,r2,8725c <__s2b+0x48>
   87268:	9009883a 	mov	r4,r18
   8726c:	00868280 	call	86828 <_Balloc>
   87270:	1011883a 	mov	r8,r2
   87274:	d8800717 	ldw	r2,28(sp)
   87278:	00c00044 	movi	r3,1
   8727c:	01800244 	movi	r6,9
   87280:	40800515 	stw	r2,20(r8)
   87284:	40c00415 	stw	r3,16(r8)
   87288:	3440260e 	bge	r6,r17,87324 <__s2b+0x110>
   8728c:	3021883a 	mov	r16,r6
   87290:	99ab883a 	add	r21,r19,r6
   87294:	9c05883a 	add	r2,r19,r16
   87298:	11c00007 	ldb	r7,0(r2)
   8729c:	400b883a 	mov	r5,r8
   872a0:	9009883a 	mov	r4,r18
   872a4:	39fff404 	addi	r7,r7,-48
   872a8:	01800284 	movi	r6,10
   872ac:	0086fc80 	call	86fc8 <__multadd>
   872b0:	84000044 	addi	r16,r16,1
   872b4:	1011883a 	mov	r8,r2
   872b8:	8c3ff61e 	bne	r17,r16,87294 <__s2b+0x80>
   872bc:	ac45883a 	add	r2,r21,r17
   872c0:	117ffe04 	addi	r5,r2,-8
   872c4:	880d883a 	mov	r6,r17
   872c8:	35000c0e 	bge	r6,r20,872fc <__s2b+0xe8>
   872cc:	a185c83a 	sub	r2,r20,r6
   872d0:	2821883a 	mov	r16,r5
   872d4:	28a3883a 	add	r17,r5,r2
   872d8:	81c00007 	ldb	r7,0(r16)
   872dc:	400b883a 	mov	r5,r8
   872e0:	9009883a 	mov	r4,r18
   872e4:	39fff404 	addi	r7,r7,-48
   872e8:	01800284 	movi	r6,10
   872ec:	0086fc80 	call	86fc8 <__multadd>
   872f0:	84000044 	addi	r16,r16,1
   872f4:	1011883a 	mov	r8,r2
   872f8:	847ff71e 	bne	r16,r17,872d8 <__s2b+0xc4>
   872fc:	4005883a 	mov	r2,r8
   87300:	dfc00617 	ldw	ra,24(sp)
   87304:	dd400517 	ldw	r21,20(sp)
   87308:	dd000417 	ldw	r20,16(sp)
   8730c:	dcc00317 	ldw	r19,12(sp)
   87310:	dc800217 	ldw	r18,8(sp)
   87314:	dc400117 	ldw	r17,4(sp)
   87318:	dc000017 	ldw	r16,0(sp)
   8731c:	dec00704 	addi	sp,sp,28
   87320:	f800283a 	ret
   87324:	99400284 	addi	r5,r19,10
   87328:	003fe706 	br	872c8 <__s2b+0xb4>
   8732c:	000b883a 	mov	r5,zero
   87330:	003fcd06 	br	87268 <__s2b+0x54>

00087334 <_realloc_r>:
   87334:	defff404 	addi	sp,sp,-48
   87338:	dd800815 	stw	r22,32(sp)
   8733c:	dc800415 	stw	r18,16(sp)
   87340:	dc400315 	stw	r17,12(sp)
   87344:	dfc00b15 	stw	ra,44(sp)
   87348:	df000a15 	stw	fp,40(sp)
   8734c:	ddc00915 	stw	r23,36(sp)
   87350:	dd400715 	stw	r21,28(sp)
   87354:	dd000615 	stw	r20,24(sp)
   87358:	dcc00515 	stw	r19,20(sp)
   8735c:	dc000215 	stw	r16,8(sp)
   87360:	2825883a 	mov	r18,r5
   87364:	3023883a 	mov	r17,r6
   87368:	202d883a 	mov	r22,r4
   8736c:	2800c926 	beq	r5,zero,87694 <_realloc_r+0x360>
   87370:	008af400 	call	8af40 <__malloc_lock>
   87374:	943ffe04 	addi	r16,r18,-8
   87378:	88c002c4 	addi	r3,r17,11
   8737c:	00800584 	movi	r2,22
   87380:	82000117 	ldw	r8,4(r16)
   87384:	10c01b2e 	bgeu	r2,r3,873f4 <_realloc_r+0xc0>
   87388:	00bffe04 	movi	r2,-8
   8738c:	188e703a 	and	r7,r3,r2
   87390:	3839883a 	mov	fp,r7
   87394:	38001a16 	blt	r7,zero,87400 <_realloc_r+0xcc>
   87398:	e4401936 	bltu	fp,r17,87400 <_realloc_r+0xcc>
   8739c:	013fff04 	movi	r4,-4
   873a0:	4126703a 	and	r19,r8,r4
   873a4:	99c02616 	blt	r19,r7,87440 <_realloc_r+0x10c>
   873a8:	802b883a 	mov	r21,r16
   873ac:	9829883a 	mov	r20,r19
   873b0:	84000204 	addi	r16,r16,8
   873b4:	a80f883a 	mov	r7,r21
   873b8:	a70dc83a 	sub	r6,r20,fp
   873bc:	008003c4 	movi	r2,15
   873c0:	1180c136 	bltu	r2,r6,876c8 <_realloc_r+0x394>
   873c4:	38800117 	ldw	r2,4(r7)
   873c8:	a549883a 	add	r4,r20,r21
   873cc:	1080004c 	andi	r2,r2,1
   873d0:	a084b03a 	or	r2,r20,r2
   873d4:	38800115 	stw	r2,4(r7)
   873d8:	20c00117 	ldw	r3,4(r4)
   873dc:	18c00054 	ori	r3,r3,1
   873e0:	20c00115 	stw	r3,4(r4)
   873e4:	b009883a 	mov	r4,r22
   873e8:	008af600 	call	8af60 <__malloc_unlock>
   873ec:	8023883a 	mov	r17,r16
   873f0:	00000606 	br	8740c <_realloc_r+0xd8>
   873f4:	01c00404 	movi	r7,16
   873f8:	3839883a 	mov	fp,r7
   873fc:	e47fe72e 	bgeu	fp,r17,8739c <_realloc_r+0x68>
   87400:	00800304 	movi	r2,12
   87404:	0023883a 	mov	r17,zero
   87408:	b0800015 	stw	r2,0(r22)
   8740c:	8805883a 	mov	r2,r17
   87410:	dfc00b17 	ldw	ra,44(sp)
   87414:	df000a17 	ldw	fp,40(sp)
   87418:	ddc00917 	ldw	r23,36(sp)
   8741c:	dd800817 	ldw	r22,32(sp)
   87420:	dd400717 	ldw	r21,28(sp)
   87424:	dd000617 	ldw	r20,24(sp)
   87428:	dcc00517 	ldw	r19,20(sp)
   8742c:	dc800417 	ldw	r18,16(sp)
   87430:	dc400317 	ldw	r17,12(sp)
   87434:	dc000217 	ldw	r16,8(sp)
   87438:	dec00c04 	addi	sp,sp,48
   8743c:	f800283a 	ret
   87440:	00800274 	movhi	r2,9
   87444:	10b6a304 	addi	r2,r2,-9588
   87448:	12400217 	ldw	r9,8(r2)
   8744c:	84cd883a 	add	r6,r16,r19
   87450:	802b883a 	mov	r21,r16
   87454:	3240b926 	beq	r6,r9,8773c <_realloc_r+0x408>
   87458:	31400117 	ldw	r5,4(r6)
   8745c:	00bfff84 	movi	r2,-2
   87460:	2884703a 	and	r2,r5,r2
   87464:	1185883a 	add	r2,r2,r6
   87468:	10c00117 	ldw	r3,4(r2)
   8746c:	18c0004c 	andi	r3,r3,1
   87470:	1807003a 	cmpeq	r3,r3,zero
   87474:	1800a326 	beq	r3,zero,87704 <_realloc_r+0x3d0>
   87478:	2908703a 	and	r4,r5,r4
   8747c:	9929883a 	add	r20,r19,r4
   87480:	a1c0a30e 	bge	r20,r7,87710 <_realloc_r+0x3dc>
   87484:	4080004c 	andi	r2,r8,1
   87488:	1000551e 	bne	r2,zero,875e0 <_realloc_r+0x2ac>
   8748c:	80800017 	ldw	r2,0(r16)
   87490:	80afc83a 	sub	r23,r16,r2
   87494:	b8c00117 	ldw	r3,4(r23)
   87498:	00bfff04 	movi	r2,-4
   8749c:	1884703a 	and	r2,r3,r2
   874a0:	30002e26 	beq	r6,zero,8755c <_realloc_r+0x228>
   874a4:	3240b926 	beq	r6,r9,8778c <_realloc_r+0x458>
   874a8:	98a9883a 	add	r20,r19,r2
   874ac:	2509883a 	add	r4,r4,r20
   874b0:	d9000015 	stw	r4,0(sp)
   874b4:	21c02a16 	blt	r4,r7,87560 <_realloc_r+0x22c>
   874b8:	30800317 	ldw	r2,12(r6)
   874bc:	30c00217 	ldw	r3,8(r6)
   874c0:	01400904 	movi	r5,36
   874c4:	99bfff04 	addi	r6,r19,-4
   874c8:	18800315 	stw	r2,12(r3)
   874cc:	10c00215 	stw	r3,8(r2)
   874d0:	b9000317 	ldw	r4,12(r23)
   874d4:	b8800217 	ldw	r2,8(r23)
   874d8:	b82b883a 	mov	r21,r23
   874dc:	bc000204 	addi	r16,r23,8
   874e0:	20800215 	stw	r2,8(r4)
   874e4:	11000315 	stw	r4,12(r2)
   874e8:	2980e436 	bltu	r5,r6,8787c <_realloc_r+0x548>
   874ec:	008004c4 	movi	r2,19
   874f0:	9009883a 	mov	r4,r18
   874f4:	8011883a 	mov	r8,r16
   874f8:	11800f2e 	bgeu	r2,r6,87538 <_realloc_r+0x204>
   874fc:	90800017 	ldw	r2,0(r18)
   87500:	ba000404 	addi	r8,r23,16
   87504:	91000204 	addi	r4,r18,8
   87508:	b8800215 	stw	r2,8(r23)
   8750c:	90c00117 	ldw	r3,4(r18)
   87510:	008006c4 	movi	r2,27
   87514:	b8c00315 	stw	r3,12(r23)
   87518:	1180072e 	bgeu	r2,r6,87538 <_realloc_r+0x204>
   8751c:	90c00217 	ldw	r3,8(r18)
   87520:	ba000604 	addi	r8,r23,24
   87524:	91000404 	addi	r4,r18,16
   87528:	b8c00415 	stw	r3,16(r23)
   8752c:	90800317 	ldw	r2,12(r18)
   87530:	b8800515 	stw	r2,20(r23)
   87534:	3140e726 	beq	r6,r5,878d4 <_realloc_r+0x5a0>
   87538:	20800017 	ldw	r2,0(r4)
   8753c:	dd000017 	ldw	r20,0(sp)
   87540:	b80f883a 	mov	r7,r23
   87544:	40800015 	stw	r2,0(r8)
   87548:	20c00117 	ldw	r3,4(r4)
   8754c:	40c00115 	stw	r3,4(r8)
   87550:	20800217 	ldw	r2,8(r4)
   87554:	40800215 	stw	r2,8(r8)
   87558:	003f9706 	br	873b8 <_realloc_r+0x84>
   8755c:	98a9883a 	add	r20,r19,r2
   87560:	a1c01f16 	blt	r20,r7,875e0 <_realloc_r+0x2ac>
   87564:	b8c00317 	ldw	r3,12(r23)
   87568:	b8800217 	ldw	r2,8(r23)
   8756c:	99bfff04 	addi	r6,r19,-4
   87570:	01400904 	movi	r5,36
   87574:	b82b883a 	mov	r21,r23
   87578:	18800215 	stw	r2,8(r3)
   8757c:	10c00315 	stw	r3,12(r2)
   87580:	bc000204 	addi	r16,r23,8
   87584:	2980c336 	bltu	r5,r6,87894 <_realloc_r+0x560>
   87588:	008004c4 	movi	r2,19
   8758c:	9009883a 	mov	r4,r18
   87590:	8011883a 	mov	r8,r16
   87594:	11800f2e 	bgeu	r2,r6,875d4 <_realloc_r+0x2a0>
   87598:	90800017 	ldw	r2,0(r18)
   8759c:	ba000404 	addi	r8,r23,16
   875a0:	91000204 	addi	r4,r18,8
   875a4:	b8800215 	stw	r2,8(r23)
   875a8:	90c00117 	ldw	r3,4(r18)
   875ac:	008006c4 	movi	r2,27
   875b0:	b8c00315 	stw	r3,12(r23)
   875b4:	1180072e 	bgeu	r2,r6,875d4 <_realloc_r+0x2a0>
   875b8:	90c00217 	ldw	r3,8(r18)
   875bc:	ba000604 	addi	r8,r23,24
   875c0:	91000404 	addi	r4,r18,16
   875c4:	b8c00415 	stw	r3,16(r23)
   875c8:	90800317 	ldw	r2,12(r18)
   875cc:	b8800515 	stw	r2,20(r23)
   875d0:	3140c726 	beq	r6,r5,878f0 <_realloc_r+0x5bc>
   875d4:	20800017 	ldw	r2,0(r4)
   875d8:	b80f883a 	mov	r7,r23
   875dc:	003fd906 	br	87544 <_realloc_r+0x210>
   875e0:	880b883a 	mov	r5,r17
   875e4:	b009883a 	mov	r4,r22
   875e8:	008586c0 	call	8586c <_malloc_r>
   875ec:	1023883a 	mov	r17,r2
   875f0:	10002526 	beq	r2,zero,87688 <_realloc_r+0x354>
   875f4:	80800117 	ldw	r2,4(r16)
   875f8:	00ffff84 	movi	r3,-2
   875fc:	893ffe04 	addi	r4,r17,-8
   87600:	10c4703a 	and	r2,r2,r3
   87604:	8085883a 	add	r2,r16,r2
   87608:	20809526 	beq	r4,r2,87860 <_realloc_r+0x52c>
   8760c:	99bfff04 	addi	r6,r19,-4
   87610:	01c00904 	movi	r7,36
   87614:	39804536 	bltu	r7,r6,8772c <_realloc_r+0x3f8>
   87618:	008004c4 	movi	r2,19
   8761c:	9009883a 	mov	r4,r18
   87620:	880b883a 	mov	r5,r17
   87624:	11800f2e 	bgeu	r2,r6,87664 <_realloc_r+0x330>
   87628:	90800017 	ldw	r2,0(r18)
   8762c:	89400204 	addi	r5,r17,8
   87630:	91000204 	addi	r4,r18,8
   87634:	88800015 	stw	r2,0(r17)
   87638:	90c00117 	ldw	r3,4(r18)
   8763c:	008006c4 	movi	r2,27
   87640:	88c00115 	stw	r3,4(r17)
   87644:	1180072e 	bgeu	r2,r6,87664 <_realloc_r+0x330>
   87648:	90c00217 	ldw	r3,8(r18)
   8764c:	89400404 	addi	r5,r17,16
   87650:	91000404 	addi	r4,r18,16
   87654:	88c00215 	stw	r3,8(r17)
   87658:	90800317 	ldw	r2,12(r18)
   8765c:	88800315 	stw	r2,12(r17)
   87660:	31c09126 	beq	r6,r7,878a8 <_realloc_r+0x574>
   87664:	20800017 	ldw	r2,0(r4)
   87668:	28800015 	stw	r2,0(r5)
   8766c:	20c00117 	ldw	r3,4(r4)
   87670:	28c00115 	stw	r3,4(r5)
   87674:	20800217 	ldw	r2,8(r4)
   87678:	28800215 	stw	r2,8(r5)
   8767c:	900b883a 	mov	r5,r18
   87680:	b009883a 	mov	r4,r22
   87684:	0084ce40 	call	84ce4 <_free_r>
   87688:	b009883a 	mov	r4,r22
   8768c:	008af600 	call	8af60 <__malloc_unlock>
   87690:	003f5e06 	br	8740c <_realloc_r+0xd8>
   87694:	300b883a 	mov	r5,r6
   87698:	dfc00b17 	ldw	ra,44(sp)
   8769c:	df000a17 	ldw	fp,40(sp)
   876a0:	ddc00917 	ldw	r23,36(sp)
   876a4:	dd800817 	ldw	r22,32(sp)
   876a8:	dd400717 	ldw	r21,28(sp)
   876ac:	dd000617 	ldw	r20,24(sp)
   876b0:	dcc00517 	ldw	r19,20(sp)
   876b4:	dc800417 	ldw	r18,16(sp)
   876b8:	dc400317 	ldw	r17,12(sp)
   876bc:	dc000217 	ldw	r16,8(sp)
   876c0:	dec00c04 	addi	sp,sp,48
   876c4:	008586c1 	jmpi	8586c <_malloc_r>
   876c8:	38800117 	ldw	r2,4(r7)
   876cc:	e54b883a 	add	r5,fp,r21
   876d0:	31000054 	ori	r4,r6,1
   876d4:	1080004c 	andi	r2,r2,1
   876d8:	1704b03a 	or	r2,r2,fp
   876dc:	38800115 	stw	r2,4(r7)
   876e0:	29000115 	stw	r4,4(r5)
   876e4:	2987883a 	add	r3,r5,r6
   876e8:	18800117 	ldw	r2,4(r3)
   876ec:	29400204 	addi	r5,r5,8
   876f0:	b009883a 	mov	r4,r22
   876f4:	10800054 	ori	r2,r2,1
   876f8:	18800115 	stw	r2,4(r3)
   876fc:	0084ce40 	call	84ce4 <_free_r>
   87700:	003f3806 	br	873e4 <_realloc_r+0xb0>
   87704:	000d883a 	mov	r6,zero
   87708:	0009883a 	mov	r4,zero
   8770c:	003f5d06 	br	87484 <_realloc_r+0x150>
   87710:	30c00217 	ldw	r3,8(r6)
   87714:	30800317 	ldw	r2,12(r6)
   87718:	800f883a 	mov	r7,r16
   8771c:	84000204 	addi	r16,r16,8
   87720:	10c00215 	stw	r3,8(r2)
   87724:	18800315 	stw	r2,12(r3)
   87728:	003f2306 	br	873b8 <_realloc_r+0x84>
   8772c:	8809883a 	mov	r4,r17
   87730:	900b883a 	mov	r5,r18
   87734:	00861300 	call	86130 <memmove>
   87738:	003fd006 	br	8767c <_realloc_r+0x348>
   8773c:	30800117 	ldw	r2,4(r6)
   87740:	e0c00404 	addi	r3,fp,16
   87744:	1108703a 	and	r4,r2,r4
   87748:	9905883a 	add	r2,r19,r4
   8774c:	10ff4d16 	blt	r2,r3,87484 <_realloc_r+0x150>
   87750:	1705c83a 	sub	r2,r2,fp
   87754:	870b883a 	add	r5,r16,fp
   87758:	10800054 	ori	r2,r2,1
   8775c:	28800115 	stw	r2,4(r5)
   87760:	80c00117 	ldw	r3,4(r16)
   87764:	00800274 	movhi	r2,9
   87768:	10b6a304 	addi	r2,r2,-9588
   8776c:	b009883a 	mov	r4,r22
   87770:	18c0004c 	andi	r3,r3,1
   87774:	e0c6b03a 	or	r3,fp,r3
   87778:	11400215 	stw	r5,8(r2)
   8777c:	80c00115 	stw	r3,4(r16)
   87780:	008af600 	call	8af60 <__malloc_unlock>
   87784:	84400204 	addi	r17,r16,8
   87788:	003f2006 	br	8740c <_realloc_r+0xd8>
   8778c:	98a9883a 	add	r20,r19,r2
   87790:	2509883a 	add	r4,r4,r20
   87794:	e0800404 	addi	r2,fp,16
   87798:	d9000115 	stw	r4,4(sp)
   8779c:	20bf7016 	blt	r4,r2,87560 <_realloc_r+0x22c>
   877a0:	b8c00317 	ldw	r3,12(r23)
   877a4:	b8800217 	ldw	r2,8(r23)
   877a8:	99bfff04 	addi	r6,r19,-4
   877ac:	01400904 	movi	r5,36
   877b0:	18800215 	stw	r2,8(r3)
   877b4:	10c00315 	stw	r3,12(r2)
   877b8:	bc400204 	addi	r17,r23,8
   877bc:	29804136 	bltu	r5,r6,878c4 <_realloc_r+0x590>
   877c0:	008004c4 	movi	r2,19
   877c4:	9009883a 	mov	r4,r18
   877c8:	880f883a 	mov	r7,r17
   877cc:	11800f2e 	bgeu	r2,r6,8780c <_realloc_r+0x4d8>
   877d0:	90800017 	ldw	r2,0(r18)
   877d4:	b9c00404 	addi	r7,r23,16
   877d8:	91000204 	addi	r4,r18,8
   877dc:	b8800215 	stw	r2,8(r23)
   877e0:	90c00117 	ldw	r3,4(r18)
   877e4:	008006c4 	movi	r2,27
   877e8:	b8c00315 	stw	r3,12(r23)
   877ec:	1180072e 	bgeu	r2,r6,8780c <_realloc_r+0x4d8>
   877f0:	90c00217 	ldw	r3,8(r18)
   877f4:	b9c00604 	addi	r7,r23,24
   877f8:	91000404 	addi	r4,r18,16
   877fc:	b8c00415 	stw	r3,16(r23)
   87800:	90800317 	ldw	r2,12(r18)
   87804:	b8800515 	stw	r2,20(r23)
   87808:	31404026 	beq	r6,r5,8790c <_realloc_r+0x5d8>
   8780c:	20800017 	ldw	r2,0(r4)
   87810:	38800015 	stw	r2,0(r7)
   87814:	20c00117 	ldw	r3,4(r4)
   87818:	38c00115 	stw	r3,4(r7)
   8781c:	20800217 	ldw	r2,8(r4)
   87820:	38800215 	stw	r2,8(r7)
   87824:	d8c00117 	ldw	r3,4(sp)
   87828:	bf0b883a 	add	r5,r23,fp
   8782c:	b009883a 	mov	r4,r22
   87830:	1f05c83a 	sub	r2,r3,fp
   87834:	10800054 	ori	r2,r2,1
   87838:	28800115 	stw	r2,4(r5)
   8783c:	b8c00117 	ldw	r3,4(r23)
   87840:	00800274 	movhi	r2,9
   87844:	10b6a304 	addi	r2,r2,-9588
   87848:	11400215 	stw	r5,8(r2)
   8784c:	18c0004c 	andi	r3,r3,1
   87850:	e0c6b03a 	or	r3,fp,r3
   87854:	b8c00115 	stw	r3,4(r23)
   87858:	008af600 	call	8af60 <__malloc_unlock>
   8785c:	003eeb06 	br	8740c <_realloc_r+0xd8>
   87860:	20800117 	ldw	r2,4(r4)
   87864:	00ffff04 	movi	r3,-4
   87868:	800f883a 	mov	r7,r16
   8786c:	10c4703a 	and	r2,r2,r3
   87870:	98a9883a 	add	r20,r19,r2
   87874:	84000204 	addi	r16,r16,8
   87878:	003ecf06 	br	873b8 <_realloc_r+0x84>
   8787c:	900b883a 	mov	r5,r18
   87880:	8009883a 	mov	r4,r16
   87884:	00861300 	call	86130 <memmove>
   87888:	dd000017 	ldw	r20,0(sp)
   8788c:	b80f883a 	mov	r7,r23
   87890:	003ec906 	br	873b8 <_realloc_r+0x84>
   87894:	900b883a 	mov	r5,r18
   87898:	8009883a 	mov	r4,r16
   8789c:	00861300 	call	86130 <memmove>
   878a0:	b80f883a 	mov	r7,r23
   878a4:	003ec406 	br	873b8 <_realloc_r+0x84>
   878a8:	90c00417 	ldw	r3,16(r18)
   878ac:	89400604 	addi	r5,r17,24
   878b0:	91000604 	addi	r4,r18,24
   878b4:	88c00415 	stw	r3,16(r17)
   878b8:	90800517 	ldw	r2,20(r18)
   878bc:	88800515 	stw	r2,20(r17)
   878c0:	003f6806 	br	87664 <_realloc_r+0x330>
   878c4:	900b883a 	mov	r5,r18
   878c8:	8809883a 	mov	r4,r17
   878cc:	00861300 	call	86130 <memmove>
   878d0:	003fd406 	br	87824 <_realloc_r+0x4f0>
   878d4:	90c00417 	ldw	r3,16(r18)
   878d8:	91000604 	addi	r4,r18,24
   878dc:	ba000804 	addi	r8,r23,32
   878e0:	b8c00615 	stw	r3,24(r23)
   878e4:	90800517 	ldw	r2,20(r18)
   878e8:	b8800715 	stw	r2,28(r23)
   878ec:	003f1206 	br	87538 <_realloc_r+0x204>
   878f0:	90c00417 	ldw	r3,16(r18)
   878f4:	91000604 	addi	r4,r18,24
   878f8:	ba000804 	addi	r8,r23,32
   878fc:	b8c00615 	stw	r3,24(r23)
   87900:	90800517 	ldw	r2,20(r18)
   87904:	b8800715 	stw	r2,28(r23)
   87908:	003f3206 	br	875d4 <_realloc_r+0x2a0>
   8790c:	90c00417 	ldw	r3,16(r18)
   87910:	91000604 	addi	r4,r18,24
   87914:	b9c00804 	addi	r7,r23,32
   87918:	b8c00615 	stw	r3,24(r23)
   8791c:	90800517 	ldw	r2,20(r18)
   87920:	b8800715 	stw	r2,28(r23)
   87924:	003fb906 	br	8780c <_realloc_r+0x4d8>

00087928 <__isinfd>:
   87928:	200d883a 	mov	r6,r4
   8792c:	0109c83a 	sub	r4,zero,r4
   87930:	2188b03a 	or	r4,r4,r6
   87934:	2008d7fa 	srli	r4,r4,31
   87938:	00a00034 	movhi	r2,32768
   8793c:	10bfffc4 	addi	r2,r2,-1
   87940:	1144703a 	and	r2,r2,r5
   87944:	2088b03a 	or	r4,r4,r2
   87948:	009ffc34 	movhi	r2,32752
   8794c:	1105c83a 	sub	r2,r2,r4
   87950:	0087c83a 	sub	r3,zero,r2
   87954:	10c4b03a 	or	r2,r2,r3
   87958:	1004d7fa 	srli	r2,r2,31
   8795c:	00c00044 	movi	r3,1
   87960:	1885c83a 	sub	r2,r3,r2
   87964:	f800283a 	ret

00087968 <__isnand>:
   87968:	200d883a 	mov	r6,r4
   8796c:	0109c83a 	sub	r4,zero,r4
   87970:	2188b03a 	or	r4,r4,r6
   87974:	2008d7fa 	srli	r4,r4,31
   87978:	00a00034 	movhi	r2,32768
   8797c:	10bfffc4 	addi	r2,r2,-1
   87980:	1144703a 	and	r2,r2,r5
   87984:	2088b03a 	or	r4,r4,r2
   87988:	009ffc34 	movhi	r2,32752
   8798c:	1105c83a 	sub	r2,r2,r4
   87990:	1004d7fa 	srli	r2,r2,31
   87994:	f800283a 	ret

00087998 <_sbrk_r>:
   87998:	defffd04 	addi	sp,sp,-12
   8799c:	dc000015 	stw	r16,0(sp)
   879a0:	04000274 	movhi	r16,9
   879a4:	8402d404 	addi	r16,r16,2896
   879a8:	dc400115 	stw	r17,4(sp)
   879ac:	80000015 	stw	zero,0(r16)
   879b0:	2023883a 	mov	r17,r4
   879b4:	2809883a 	mov	r4,r5
   879b8:	dfc00215 	stw	ra,8(sp)
   879bc:	008b17c0 	call	8b17c <sbrk>
   879c0:	1007883a 	mov	r3,r2
   879c4:	00bfffc4 	movi	r2,-1
   879c8:	18800626 	beq	r3,r2,879e4 <_sbrk_r+0x4c>
   879cc:	1805883a 	mov	r2,r3
   879d0:	dfc00217 	ldw	ra,8(sp)
   879d4:	dc400117 	ldw	r17,4(sp)
   879d8:	dc000017 	ldw	r16,0(sp)
   879dc:	dec00304 	addi	sp,sp,12
   879e0:	f800283a 	ret
   879e4:	80800017 	ldw	r2,0(r16)
   879e8:	103ff826 	beq	r2,zero,879cc <_sbrk_r+0x34>
   879ec:	88800015 	stw	r2,0(r17)
   879f0:	1805883a 	mov	r2,r3
   879f4:	dfc00217 	ldw	ra,8(sp)
   879f8:	dc400117 	ldw	r17,4(sp)
   879fc:	dc000017 	ldw	r16,0(sp)
   87a00:	dec00304 	addi	sp,sp,12
   87a04:	f800283a 	ret

00087a08 <__sclose>:
   87a08:	2940038f 	ldh	r5,14(r5)
   87a0c:	0087d501 	jmpi	87d50 <_close_r>

00087a10 <__sseek>:
   87a10:	defffe04 	addi	sp,sp,-8
   87a14:	dc000015 	stw	r16,0(sp)
   87a18:	2821883a 	mov	r16,r5
   87a1c:	2940038f 	ldh	r5,14(r5)
   87a20:	dfc00115 	stw	ra,4(sp)
   87a24:	0087fc80 	call	87fc8 <_lseek_r>
   87a28:	1007883a 	mov	r3,r2
   87a2c:	00bfffc4 	movi	r2,-1
   87a30:	18800926 	beq	r3,r2,87a58 <__sseek+0x48>
   87a34:	8080030b 	ldhu	r2,12(r16)
   87a38:	80c01415 	stw	r3,80(r16)
   87a3c:	10840014 	ori	r2,r2,4096
   87a40:	8080030d 	sth	r2,12(r16)
   87a44:	1805883a 	mov	r2,r3
   87a48:	dfc00117 	ldw	ra,4(sp)
   87a4c:	dc000017 	ldw	r16,0(sp)
   87a50:	dec00204 	addi	sp,sp,8
   87a54:	f800283a 	ret
   87a58:	8080030b 	ldhu	r2,12(r16)
   87a5c:	10bbffcc 	andi	r2,r2,61439
   87a60:	8080030d 	sth	r2,12(r16)
   87a64:	1805883a 	mov	r2,r3
   87a68:	dfc00117 	ldw	ra,4(sp)
   87a6c:	dc000017 	ldw	r16,0(sp)
   87a70:	dec00204 	addi	sp,sp,8
   87a74:	f800283a 	ret

00087a78 <__swrite>:
   87a78:	2880030b 	ldhu	r2,12(r5)
   87a7c:	defffb04 	addi	sp,sp,-20
   87a80:	dcc00315 	stw	r19,12(sp)
   87a84:	1080400c 	andi	r2,r2,256
   87a88:	dc800215 	stw	r18,8(sp)
   87a8c:	dc400115 	stw	r17,4(sp)
   87a90:	dc000015 	stw	r16,0(sp)
   87a94:	3027883a 	mov	r19,r6
   87a98:	3825883a 	mov	r18,r7
   87a9c:	dfc00415 	stw	ra,16(sp)
   87aa0:	2821883a 	mov	r16,r5
   87aa4:	000d883a 	mov	r6,zero
   87aa8:	01c00084 	movi	r7,2
   87aac:	2023883a 	mov	r17,r4
   87ab0:	10000226 	beq	r2,zero,87abc <__swrite+0x44>
   87ab4:	2940038f 	ldh	r5,14(r5)
   87ab8:	0087fc80 	call	87fc8 <_lseek_r>
   87abc:	8080030b 	ldhu	r2,12(r16)
   87ac0:	8140038f 	ldh	r5,14(r16)
   87ac4:	8809883a 	mov	r4,r17
   87ac8:	10bbffcc 	andi	r2,r2,61439
   87acc:	980d883a 	mov	r6,r19
   87ad0:	900f883a 	mov	r7,r18
   87ad4:	8080030d 	sth	r2,12(r16)
   87ad8:	dfc00417 	ldw	ra,16(sp)
   87adc:	dcc00317 	ldw	r19,12(sp)
   87ae0:	dc800217 	ldw	r18,8(sp)
   87ae4:	dc400117 	ldw	r17,4(sp)
   87ae8:	dc000017 	ldw	r16,0(sp)
   87aec:	dec00504 	addi	sp,sp,20
   87af0:	0087c101 	jmpi	87c10 <_write_r>

00087af4 <__sread>:
   87af4:	defffe04 	addi	sp,sp,-8
   87af8:	dc000015 	stw	r16,0(sp)
   87afc:	2821883a 	mov	r16,r5
   87b00:	2940038f 	ldh	r5,14(r5)
   87b04:	dfc00115 	stw	ra,4(sp)
   87b08:	00880400 	call	88040 <_read_r>
   87b0c:	1007883a 	mov	r3,r2
   87b10:	10000816 	blt	r2,zero,87b34 <__sread+0x40>
   87b14:	80801417 	ldw	r2,80(r16)
   87b18:	10c5883a 	add	r2,r2,r3
   87b1c:	80801415 	stw	r2,80(r16)
   87b20:	1805883a 	mov	r2,r3
   87b24:	dfc00117 	ldw	ra,4(sp)
   87b28:	dc000017 	ldw	r16,0(sp)
   87b2c:	dec00204 	addi	sp,sp,8
   87b30:	f800283a 	ret
   87b34:	8080030b 	ldhu	r2,12(r16)
   87b38:	10bbffcc 	andi	r2,r2,61439
   87b3c:	8080030d 	sth	r2,12(r16)
   87b40:	1805883a 	mov	r2,r3
   87b44:	dfc00117 	ldw	ra,4(sp)
   87b48:	dc000017 	ldw	r16,0(sp)
   87b4c:	dec00204 	addi	sp,sp,8
   87b50:	f800283a 	ret

00087b54 <strcmp>:
   87b54:	2144b03a 	or	r2,r4,r5
   87b58:	108000cc 	andi	r2,r2,3
   87b5c:	10001d1e 	bne	r2,zero,87bd4 <strcmp+0x80>
   87b60:	200f883a 	mov	r7,r4
   87b64:	28800017 	ldw	r2,0(r5)
   87b68:	21000017 	ldw	r4,0(r4)
   87b6c:	280d883a 	mov	r6,r5
   87b70:	2080161e 	bne	r4,r2,87bcc <strcmp+0x78>
   87b74:	023fbff4 	movhi	r8,65279
   87b78:	423fbfc4 	addi	r8,r8,-257
   87b7c:	2207883a 	add	r3,r4,r8
   87b80:	01602074 	movhi	r5,32897
   87b84:	29602004 	addi	r5,r5,-32640
   87b88:	1946703a 	and	r3,r3,r5
   87b8c:	0104303a 	nor	r2,zero,r4
   87b90:	10c4703a 	and	r2,r2,r3
   87b94:	10001c1e 	bne	r2,zero,87c08 <strcmp+0xb4>
   87b98:	4013883a 	mov	r9,r8
   87b9c:	2811883a 	mov	r8,r5
   87ba0:	00000106 	br	87ba8 <strcmp+0x54>
   87ba4:	1800181e 	bne	r3,zero,87c08 <strcmp+0xb4>
   87ba8:	39c00104 	addi	r7,r7,4
   87bac:	39000017 	ldw	r4,0(r7)
   87bb0:	31800104 	addi	r6,r6,4
   87bb4:	31400017 	ldw	r5,0(r6)
   87bb8:	2245883a 	add	r2,r4,r9
   87bbc:	1204703a 	and	r2,r2,r8
   87bc0:	0106303a 	nor	r3,zero,r4
   87bc4:	1886703a 	and	r3,r3,r2
   87bc8:	217ff626 	beq	r4,r5,87ba4 <strcmp+0x50>
   87bcc:	3809883a 	mov	r4,r7
   87bd0:	300b883a 	mov	r5,r6
   87bd4:	20c00007 	ldb	r3,0(r4)
   87bd8:	1800051e 	bne	r3,zero,87bf0 <strcmp+0x9c>
   87bdc:	00000606 	br	87bf8 <strcmp+0xa4>
   87be0:	21000044 	addi	r4,r4,1
   87be4:	20c00007 	ldb	r3,0(r4)
   87be8:	29400044 	addi	r5,r5,1
   87bec:	18000226 	beq	r3,zero,87bf8 <strcmp+0xa4>
   87bf0:	28800007 	ldb	r2,0(r5)
   87bf4:	18bffa26 	beq	r3,r2,87be0 <strcmp+0x8c>
   87bf8:	20c00003 	ldbu	r3,0(r4)
   87bfc:	28800003 	ldbu	r2,0(r5)
   87c00:	1885c83a 	sub	r2,r3,r2
   87c04:	f800283a 	ret
   87c08:	0005883a 	mov	r2,zero
   87c0c:	f800283a 	ret

00087c10 <_write_r>:
   87c10:	defffd04 	addi	sp,sp,-12
   87c14:	dc000015 	stw	r16,0(sp)
   87c18:	04000274 	movhi	r16,9
   87c1c:	8402d404 	addi	r16,r16,2896
   87c20:	dc400115 	stw	r17,4(sp)
   87c24:	80000015 	stw	zero,0(r16)
   87c28:	2023883a 	mov	r17,r4
   87c2c:	2809883a 	mov	r4,r5
   87c30:	300b883a 	mov	r5,r6
   87c34:	380d883a 	mov	r6,r7
   87c38:	dfc00215 	stw	ra,8(sp)
   87c3c:	008b2380 	call	8b238 <write>
   87c40:	1007883a 	mov	r3,r2
   87c44:	00bfffc4 	movi	r2,-1
   87c48:	18800626 	beq	r3,r2,87c64 <_write_r+0x54>
   87c4c:	1805883a 	mov	r2,r3
   87c50:	dfc00217 	ldw	ra,8(sp)
   87c54:	dc400117 	ldw	r17,4(sp)
   87c58:	dc000017 	ldw	r16,0(sp)
   87c5c:	dec00304 	addi	sp,sp,12
   87c60:	f800283a 	ret
   87c64:	80800017 	ldw	r2,0(r16)
   87c68:	103ff826 	beq	r2,zero,87c4c <_write_r+0x3c>
   87c6c:	88800015 	stw	r2,0(r17)
   87c70:	1805883a 	mov	r2,r3
   87c74:	dfc00217 	ldw	ra,8(sp)
   87c78:	dc400117 	ldw	r17,4(sp)
   87c7c:	dc000017 	ldw	r16,0(sp)
   87c80:	dec00304 	addi	sp,sp,12
   87c84:	f800283a 	ret

00087c88 <_calloc_r>:
   87c88:	defffe04 	addi	sp,sp,-8
   87c8c:	dc400015 	stw	r17,0(sp)
   87c90:	2023883a 	mov	r17,r4
   87c94:	2809883a 	mov	r4,r5
   87c98:	300b883a 	mov	r5,r6
   87c9c:	dfc00115 	stw	ra,4(sp)
   87ca0:	0089ffc0 	call	89ffc <__mulsi3>
   87ca4:	100b883a 	mov	r5,r2
   87ca8:	8809883a 	mov	r4,r17
   87cac:	008586c0 	call	8586c <_malloc_r>
   87cb0:	1023883a 	mov	r17,r2
   87cb4:	01c00904 	movi	r7,36
   87cb8:	10000d26 	beq	r2,zero,87cf0 <_calloc_r+0x68>
   87cbc:	10ffff17 	ldw	r3,-4(r2)
   87cc0:	1009883a 	mov	r4,r2
   87cc4:	00bfff04 	movi	r2,-4
   87cc8:	1886703a 	and	r3,r3,r2
   87ccc:	1887883a 	add	r3,r3,r2
   87cd0:	180d883a 	mov	r6,r3
   87cd4:	000b883a 	mov	r5,zero
   87cd8:	38c01736 	bltu	r7,r3,87d38 <_calloc_r+0xb0>
   87cdc:	008004c4 	movi	r2,19
   87ce0:	10c00836 	bltu	r2,r3,87d04 <_calloc_r+0x7c>
   87ce4:	20000215 	stw	zero,8(r4)
   87ce8:	20000015 	stw	zero,0(r4)
   87cec:	20000115 	stw	zero,4(r4)
   87cf0:	8805883a 	mov	r2,r17
   87cf4:	dfc00117 	ldw	ra,4(sp)
   87cf8:	dc400017 	ldw	r17,0(sp)
   87cfc:	dec00204 	addi	sp,sp,8
   87d00:	f800283a 	ret
   87d04:	008006c4 	movi	r2,27
   87d08:	88000015 	stw	zero,0(r17)
   87d0c:	88000115 	stw	zero,4(r17)
   87d10:	89000204 	addi	r4,r17,8
   87d14:	10fff32e 	bgeu	r2,r3,87ce4 <_calloc_r+0x5c>
   87d18:	88000215 	stw	zero,8(r17)
   87d1c:	88000315 	stw	zero,12(r17)
   87d20:	89000404 	addi	r4,r17,16
   87d24:	19ffef1e 	bne	r3,r7,87ce4 <_calloc_r+0x5c>
   87d28:	89000604 	addi	r4,r17,24
   87d2c:	88000415 	stw	zero,16(r17)
   87d30:	88000515 	stw	zero,20(r17)
   87d34:	003feb06 	br	87ce4 <_calloc_r+0x5c>
   87d38:	00862100 	call	86210 <memset>
   87d3c:	8805883a 	mov	r2,r17
   87d40:	dfc00117 	ldw	ra,4(sp)
   87d44:	dc400017 	ldw	r17,0(sp)
   87d48:	dec00204 	addi	sp,sp,8
   87d4c:	f800283a 	ret

00087d50 <_close_r>:
   87d50:	defffd04 	addi	sp,sp,-12
   87d54:	dc000015 	stw	r16,0(sp)
   87d58:	04000274 	movhi	r16,9
   87d5c:	8402d404 	addi	r16,r16,2896
   87d60:	dc400115 	stw	r17,4(sp)
   87d64:	80000015 	stw	zero,0(r16)
   87d68:	2023883a 	mov	r17,r4
   87d6c:	2809883a 	mov	r4,r5
   87d70:	dfc00215 	stw	ra,8(sp)
   87d74:	008a6ec0 	call	8a6ec <close>
   87d78:	1007883a 	mov	r3,r2
   87d7c:	00bfffc4 	movi	r2,-1
   87d80:	18800626 	beq	r3,r2,87d9c <_close_r+0x4c>
   87d84:	1805883a 	mov	r2,r3
   87d88:	dfc00217 	ldw	ra,8(sp)
   87d8c:	dc400117 	ldw	r17,4(sp)
   87d90:	dc000017 	ldw	r16,0(sp)
   87d94:	dec00304 	addi	sp,sp,12
   87d98:	f800283a 	ret
   87d9c:	80800017 	ldw	r2,0(r16)
   87da0:	103ff826 	beq	r2,zero,87d84 <_close_r+0x34>
   87da4:	88800015 	stw	r2,0(r17)
   87da8:	1805883a 	mov	r2,r3
   87dac:	dfc00217 	ldw	ra,8(sp)
   87db0:	dc400117 	ldw	r17,4(sp)
   87db4:	dc000017 	ldw	r16,0(sp)
   87db8:	dec00304 	addi	sp,sp,12
   87dbc:	f800283a 	ret

00087dc0 <_fclose_r>:
   87dc0:	defffc04 	addi	sp,sp,-16
   87dc4:	dc400115 	stw	r17,4(sp)
   87dc8:	dc000015 	stw	r16,0(sp)
   87dcc:	dfc00315 	stw	ra,12(sp)
   87dd0:	dc800215 	stw	r18,8(sp)
   87dd4:	2821883a 	mov	r16,r5
   87dd8:	2023883a 	mov	r17,r4
   87ddc:	28002926 	beq	r5,zero,87e84 <_fclose_r+0xc4>
   87de0:	008491c0 	call	8491c <__sfp_lock_acquire>
   87de4:	88000226 	beq	r17,zero,87df0 <_fclose_r+0x30>
   87de8:	88800e17 	ldw	r2,56(r17)
   87dec:	10002d26 	beq	r2,zero,87ea4 <_fclose_r+0xe4>
   87df0:	8080030f 	ldh	r2,12(r16)
   87df4:	10002226 	beq	r2,zero,87e80 <_fclose_r+0xc0>
   87df8:	8809883a 	mov	r4,r17
   87dfc:	800b883a 	mov	r5,r16
   87e00:	00846940 	call	84694 <_fflush_r>
   87e04:	1025883a 	mov	r18,r2
   87e08:	80800b17 	ldw	r2,44(r16)
   87e0c:	10000426 	beq	r2,zero,87e20 <_fclose_r+0x60>
   87e10:	81400717 	ldw	r5,28(r16)
   87e14:	8809883a 	mov	r4,r17
   87e18:	103ee83a 	callr	r2
   87e1c:	10002a16 	blt	r2,zero,87ec8 <_fclose_r+0x108>
   87e20:	8080030b 	ldhu	r2,12(r16)
   87e24:	1080200c 	andi	r2,r2,128
   87e28:	1000231e 	bne	r2,zero,87eb8 <_fclose_r+0xf8>
   87e2c:	81400c17 	ldw	r5,48(r16)
   87e30:	28000526 	beq	r5,zero,87e48 <_fclose_r+0x88>
   87e34:	80801004 	addi	r2,r16,64
   87e38:	28800226 	beq	r5,r2,87e44 <_fclose_r+0x84>
   87e3c:	8809883a 	mov	r4,r17
   87e40:	0084ce40 	call	84ce4 <_free_r>
   87e44:	80000c15 	stw	zero,48(r16)
   87e48:	81401117 	ldw	r5,68(r16)
   87e4c:	28000326 	beq	r5,zero,87e5c <_fclose_r+0x9c>
   87e50:	8809883a 	mov	r4,r17
   87e54:	0084ce40 	call	84ce4 <_free_r>
   87e58:	80001115 	stw	zero,68(r16)
   87e5c:	8000030d 	sth	zero,12(r16)
   87e60:	00849200 	call	84920 <__sfp_lock_release>
   87e64:	9005883a 	mov	r2,r18
   87e68:	dfc00317 	ldw	ra,12(sp)
   87e6c:	dc800217 	ldw	r18,8(sp)
   87e70:	dc400117 	ldw	r17,4(sp)
   87e74:	dc000017 	ldw	r16,0(sp)
   87e78:	dec00404 	addi	sp,sp,16
   87e7c:	f800283a 	ret
   87e80:	00849200 	call	84920 <__sfp_lock_release>
   87e84:	0025883a 	mov	r18,zero
   87e88:	9005883a 	mov	r2,r18
   87e8c:	dfc00317 	ldw	ra,12(sp)
   87e90:	dc800217 	ldw	r18,8(sp)
   87e94:	dc400117 	ldw	r17,4(sp)
   87e98:	dc000017 	ldw	r16,0(sp)
   87e9c:	dec00404 	addi	sp,sp,16
   87ea0:	f800283a 	ret
   87ea4:	8809883a 	mov	r4,r17
   87ea8:	008492c0 	call	8492c <__sinit>
   87eac:	8080030f 	ldh	r2,12(r16)
   87eb0:	103fd11e 	bne	r2,zero,87df8 <_fclose_r+0x38>
   87eb4:	003ff206 	br	87e80 <_fclose_r+0xc0>
   87eb8:	81400417 	ldw	r5,16(r16)
   87ebc:	8809883a 	mov	r4,r17
   87ec0:	0084ce40 	call	84ce4 <_free_r>
   87ec4:	003fd906 	br	87e2c <_fclose_r+0x6c>
   87ec8:	04bfffc4 	movi	r18,-1
   87ecc:	003fd406 	br	87e20 <_fclose_r+0x60>

00087ed0 <fclose>:
   87ed0:	00800274 	movhi	r2,9
   87ed4:	10bc2704 	addi	r2,r2,-3940
   87ed8:	200b883a 	mov	r5,r4
   87edc:	11000017 	ldw	r4,0(r2)
   87ee0:	0087dc01 	jmpi	87dc0 <_fclose_r>

00087ee4 <_fstat_r>:
   87ee4:	defffd04 	addi	sp,sp,-12
   87ee8:	dc000015 	stw	r16,0(sp)
   87eec:	04000274 	movhi	r16,9
   87ef0:	8402d404 	addi	r16,r16,2896
   87ef4:	dc400115 	stw	r17,4(sp)
   87ef8:	80000015 	stw	zero,0(r16)
   87efc:	2023883a 	mov	r17,r4
   87f00:	2809883a 	mov	r4,r5
   87f04:	300b883a 	mov	r5,r6
   87f08:	dfc00215 	stw	ra,8(sp)
   87f0c:	008a8780 	call	8a878 <fstat>
   87f10:	1007883a 	mov	r3,r2
   87f14:	00bfffc4 	movi	r2,-1
   87f18:	18800626 	beq	r3,r2,87f34 <_fstat_r+0x50>
   87f1c:	1805883a 	mov	r2,r3
   87f20:	dfc00217 	ldw	ra,8(sp)
   87f24:	dc400117 	ldw	r17,4(sp)
   87f28:	dc000017 	ldw	r16,0(sp)
   87f2c:	dec00304 	addi	sp,sp,12
   87f30:	f800283a 	ret
   87f34:	80800017 	ldw	r2,0(r16)
   87f38:	103ff826 	beq	r2,zero,87f1c <_fstat_r+0x38>
   87f3c:	88800015 	stw	r2,0(r17)
   87f40:	1805883a 	mov	r2,r3
   87f44:	dfc00217 	ldw	ra,8(sp)
   87f48:	dc400117 	ldw	r17,4(sp)
   87f4c:	dc000017 	ldw	r16,0(sp)
   87f50:	dec00304 	addi	sp,sp,12
   87f54:	f800283a 	ret

00087f58 <_isatty_r>:
   87f58:	defffd04 	addi	sp,sp,-12
   87f5c:	dc000015 	stw	r16,0(sp)
   87f60:	04000274 	movhi	r16,9
   87f64:	8402d404 	addi	r16,r16,2896
   87f68:	dc400115 	stw	r17,4(sp)
   87f6c:	80000015 	stw	zero,0(r16)
   87f70:	2023883a 	mov	r17,r4
   87f74:	2809883a 	mov	r4,r5
   87f78:	dfc00215 	stw	ra,8(sp)
   87f7c:	008ab700 	call	8ab70 <isatty>
   87f80:	1007883a 	mov	r3,r2
   87f84:	00bfffc4 	movi	r2,-1
   87f88:	18800626 	beq	r3,r2,87fa4 <_isatty_r+0x4c>
   87f8c:	1805883a 	mov	r2,r3
   87f90:	dfc00217 	ldw	ra,8(sp)
   87f94:	dc400117 	ldw	r17,4(sp)
   87f98:	dc000017 	ldw	r16,0(sp)
   87f9c:	dec00304 	addi	sp,sp,12
   87fa0:	f800283a 	ret
   87fa4:	80800017 	ldw	r2,0(r16)
   87fa8:	103ff826 	beq	r2,zero,87f8c <_isatty_r+0x34>
   87fac:	88800015 	stw	r2,0(r17)
   87fb0:	1805883a 	mov	r2,r3
   87fb4:	dfc00217 	ldw	ra,8(sp)
   87fb8:	dc400117 	ldw	r17,4(sp)
   87fbc:	dc000017 	ldw	r16,0(sp)
   87fc0:	dec00304 	addi	sp,sp,12
   87fc4:	f800283a 	ret

00087fc8 <_lseek_r>:
   87fc8:	defffd04 	addi	sp,sp,-12
   87fcc:	dc000015 	stw	r16,0(sp)
   87fd0:	04000274 	movhi	r16,9
   87fd4:	8402d404 	addi	r16,r16,2896
   87fd8:	dc400115 	stw	r17,4(sp)
   87fdc:	80000015 	stw	zero,0(r16)
   87fe0:	2023883a 	mov	r17,r4
   87fe4:	2809883a 	mov	r4,r5
   87fe8:	300b883a 	mov	r5,r6
   87fec:	380d883a 	mov	r6,r7
   87ff0:	dfc00215 	stw	ra,8(sp)
   87ff4:	008ad800 	call	8ad80 <lseek>
   87ff8:	1007883a 	mov	r3,r2
   87ffc:	00bfffc4 	movi	r2,-1
   88000:	18800626 	beq	r3,r2,8801c <_lseek_r+0x54>
   88004:	1805883a 	mov	r2,r3
   88008:	dfc00217 	ldw	ra,8(sp)
   8800c:	dc400117 	ldw	r17,4(sp)
   88010:	dc000017 	ldw	r16,0(sp)
   88014:	dec00304 	addi	sp,sp,12
   88018:	f800283a 	ret
   8801c:	80800017 	ldw	r2,0(r16)
   88020:	103ff826 	beq	r2,zero,88004 <_lseek_r+0x3c>
   88024:	88800015 	stw	r2,0(r17)
   88028:	1805883a 	mov	r2,r3
   8802c:	dfc00217 	ldw	ra,8(sp)
   88030:	dc400117 	ldw	r17,4(sp)
   88034:	dc000017 	ldw	r16,0(sp)
   88038:	dec00304 	addi	sp,sp,12
   8803c:	f800283a 	ret

00088040 <_read_r>:
   88040:	defffd04 	addi	sp,sp,-12
   88044:	dc000015 	stw	r16,0(sp)
   88048:	04000274 	movhi	r16,9
   8804c:	8402d404 	addi	r16,r16,2896
   88050:	dc400115 	stw	r17,4(sp)
   88054:	80000015 	stw	zero,0(r16)
   88058:	2023883a 	mov	r17,r4
   8805c:	2809883a 	mov	r4,r5
   88060:	300b883a 	mov	r5,r6
   88064:	380d883a 	mov	r6,r7
   88068:	dfc00215 	stw	ra,8(sp)
   8806c:	008af800 	call	8af80 <read>
   88070:	1007883a 	mov	r3,r2
   88074:	00bfffc4 	movi	r2,-1
   88078:	18800626 	beq	r3,r2,88094 <_read_r+0x54>
   8807c:	1805883a 	mov	r2,r3
   88080:	dfc00217 	ldw	ra,8(sp)
   88084:	dc400117 	ldw	r17,4(sp)
   88088:	dc000017 	ldw	r16,0(sp)
   8808c:	dec00304 	addi	sp,sp,12
   88090:	f800283a 	ret
   88094:	80800017 	ldw	r2,0(r16)
   88098:	103ff826 	beq	r2,zero,8807c <_read_r+0x3c>
   8809c:	88800015 	stw	r2,0(r17)
   880a0:	1805883a 	mov	r2,r3
   880a4:	dfc00217 	ldw	ra,8(sp)
   880a8:	dc400117 	ldw	r17,4(sp)
   880ac:	dc000017 	ldw	r16,0(sp)
   880b0:	dec00304 	addi	sp,sp,12
   880b4:	f800283a 	ret

000880b8 <__udivdi3>:
   880b8:	defff104 	addi	sp,sp,-60
   880bc:	0015883a 	mov	r10,zero
   880c0:	2005883a 	mov	r2,r4
   880c4:	3011883a 	mov	r8,r6
   880c8:	df000d15 	stw	fp,52(sp)
   880cc:	dd400a15 	stw	r21,40(sp)
   880d0:	dcc00815 	stw	r19,32(sp)
   880d4:	dfc00e15 	stw	ra,56(sp)
   880d8:	ddc00c15 	stw	r23,48(sp)
   880dc:	dd800b15 	stw	r22,44(sp)
   880e0:	dd000915 	stw	r20,36(sp)
   880e4:	dc800715 	stw	r18,28(sp)
   880e8:	dc400615 	stw	r17,24(sp)
   880ec:	dc000515 	stw	r16,20(sp)
   880f0:	da800315 	stw	r10,12(sp)
   880f4:	4027883a 	mov	r19,r8
   880f8:	1039883a 	mov	fp,r2
   880fc:	282b883a 	mov	r21,r5
   88100:	da800415 	stw	r10,16(sp)
   88104:	3800401e 	bne	r7,zero,88208 <__udivdi3+0x150>
   88108:	2a006536 	bltu	r5,r8,882a0 <__udivdi3+0x1e8>
   8810c:	4000b526 	beq	r8,zero,883e4 <__udivdi3+0x32c>
   88110:	00bfffd4 	movui	r2,65535
   88114:	14c0ad36 	bltu	r2,r19,883cc <__udivdi3+0x314>
   88118:	00803fc4 	movi	r2,255
   8811c:	14c15e36 	bltu	r2,r19,88698 <__udivdi3+0x5e0>
   88120:	000b883a 	mov	r5,zero
   88124:	0005883a 	mov	r2,zero
   88128:	9884d83a 	srl	r2,r19,r2
   8812c:	01000274 	movhi	r4,9
   88130:	21355304 	addi	r4,r4,-10932
   88134:	01800804 	movi	r6,32
   88138:	1105883a 	add	r2,r2,r4
   8813c:	10c00003 	ldbu	r3,0(r2)
   88140:	28c7883a 	add	r3,r5,r3
   88144:	30e9c83a 	sub	r20,r6,r3
   88148:	a0010a1e 	bne	r20,zero,88574 <__udivdi3+0x4bc>
   8814c:	982ed43a 	srli	r23,r19,16
   88150:	acebc83a 	sub	r21,r21,r19
   88154:	9dbfffcc 	andi	r22,r19,65535
   88158:	05000044 	movi	r20,1
   8815c:	a809883a 	mov	r4,r21
   88160:	b80b883a 	mov	r5,r23
   88164:	0089fec0 	call	89fec <__udivsi3>
   88168:	100b883a 	mov	r5,r2
   8816c:	b009883a 	mov	r4,r22
   88170:	1021883a 	mov	r16,r2
   88174:	0089ffc0 	call	89ffc <__mulsi3>
   88178:	a809883a 	mov	r4,r21
   8817c:	b80b883a 	mov	r5,r23
   88180:	1023883a 	mov	r17,r2
   88184:	0089ff40 	call	89ff4 <__umodsi3>
   88188:	1004943a 	slli	r2,r2,16
   8818c:	e006d43a 	srli	r3,fp,16
   88190:	10c4b03a 	or	r2,r2,r3
   88194:	1440042e 	bgeu	r2,r17,881a8 <__udivdi3+0xf0>
   88198:	14c5883a 	add	r2,r2,r19
   8819c:	843fffc4 	addi	r16,r16,-1
   881a0:	14c00136 	bltu	r2,r19,881a8 <__udivdi3+0xf0>
   881a4:	14415c36 	bltu	r2,r17,88718 <__udivdi3+0x660>
   881a8:	1463c83a 	sub	r17,r2,r17
   881ac:	8809883a 	mov	r4,r17
   881b0:	b80b883a 	mov	r5,r23
   881b4:	0089fec0 	call	89fec <__udivsi3>
   881b8:	100b883a 	mov	r5,r2
   881bc:	b009883a 	mov	r4,r22
   881c0:	102b883a 	mov	r21,r2
   881c4:	0089ffc0 	call	89ffc <__mulsi3>
   881c8:	8809883a 	mov	r4,r17
   881cc:	b80b883a 	mov	r5,r23
   881d0:	1025883a 	mov	r18,r2
   881d4:	0089ff40 	call	89ff4 <__umodsi3>
   881d8:	1004943a 	slli	r2,r2,16
   881dc:	e0ffffcc 	andi	r3,fp,65535
   881e0:	10c4b03a 	or	r2,r2,r3
   881e4:	1480042e 	bgeu	r2,r18,881f8 <__udivdi3+0x140>
   881e8:	9885883a 	add	r2,r19,r2
   881ec:	ad7fffc4 	addi	r21,r21,-1
   881f0:	14c00136 	bltu	r2,r19,881f8 <__udivdi3+0x140>
   881f4:	14813c36 	bltu	r2,r18,886e8 <__udivdi3+0x630>
   881f8:	8004943a 	slli	r2,r16,16
   881fc:	a009883a 	mov	r4,r20
   88200:	a884b03a 	or	r2,r21,r2
   88204:	00001506 	br	8825c <__udivdi3+0x1a4>
   88208:	380d883a 	mov	r6,r7
   8820c:	29c06c36 	bltu	r5,r7,883c0 <__udivdi3+0x308>
   88210:	00bfffd4 	movui	r2,65535
   88214:	11c06436 	bltu	r2,r7,883a8 <__udivdi3+0x2f0>
   88218:	00803fc4 	movi	r2,255
   8821c:	11c11836 	bltu	r2,r7,88680 <__udivdi3+0x5c8>
   88220:	000b883a 	mov	r5,zero
   88224:	0005883a 	mov	r2,zero
   88228:	3084d83a 	srl	r2,r6,r2
   8822c:	01000274 	movhi	r4,9
   88230:	21355304 	addi	r4,r4,-10932
   88234:	01c00804 	movi	r7,32
   88238:	1105883a 	add	r2,r2,r4
   8823c:	10c00003 	ldbu	r3,0(r2)
   88240:	28c7883a 	add	r3,r5,r3
   88244:	38edc83a 	sub	r22,r7,r3
   88248:	b000731e 	bne	r22,zero,88418 <__udivdi3+0x360>
   8824c:	35400136 	bltu	r6,r21,88254 <__udivdi3+0x19c>
   88250:	e4c05b36 	bltu	fp,r19,883c0 <__udivdi3+0x308>
   88254:	00800044 	movi	r2,1
   88258:	0009883a 	mov	r4,zero
   8825c:	d8800315 	stw	r2,12(sp)
   88260:	d9400317 	ldw	r5,12(sp)
   88264:	d9000415 	stw	r4,16(sp)
   88268:	2007883a 	mov	r3,r4
   8826c:	2805883a 	mov	r2,r5
   88270:	dfc00e17 	ldw	ra,56(sp)
   88274:	df000d17 	ldw	fp,52(sp)
   88278:	ddc00c17 	ldw	r23,48(sp)
   8827c:	dd800b17 	ldw	r22,44(sp)
   88280:	dd400a17 	ldw	r21,40(sp)
   88284:	dd000917 	ldw	r20,36(sp)
   88288:	dcc00817 	ldw	r19,32(sp)
   8828c:	dc800717 	ldw	r18,28(sp)
   88290:	dc400617 	ldw	r17,24(sp)
   88294:	dc000517 	ldw	r16,20(sp)
   88298:	dec00f04 	addi	sp,sp,60
   8829c:	f800283a 	ret
   882a0:	00bfffd4 	movui	r2,65535
   882a4:	12005636 	bltu	r2,r8,88400 <__udivdi3+0x348>
   882a8:	00803fc4 	movi	r2,255
   882ac:	12010036 	bltu	r2,r8,886b0 <__udivdi3+0x5f8>
   882b0:	000b883a 	mov	r5,zero
   882b4:	0005883a 	mov	r2,zero
   882b8:	9884d83a 	srl	r2,r19,r2
   882bc:	01000274 	movhi	r4,9
   882c0:	21355304 	addi	r4,r4,-10932
   882c4:	01800804 	movi	r6,32
   882c8:	1105883a 	add	r2,r2,r4
   882cc:	10c00003 	ldbu	r3,0(r2)
   882d0:	28c7883a 	add	r3,r5,r3
   882d4:	30cbc83a 	sub	r5,r6,r3
   882d8:	28000626 	beq	r5,zero,882f4 <__udivdi3+0x23c>
   882dc:	3145c83a 	sub	r2,r6,r5
   882e0:	e084d83a 	srl	r2,fp,r2
   882e4:	a946983a 	sll	r3,r21,r5
   882e8:	e178983a 	sll	fp,fp,r5
   882ec:	9966983a 	sll	r19,r19,r5
   882f0:	18aab03a 	or	r21,r3,r2
   882f4:	982ed43a 	srli	r23,r19,16
   882f8:	a809883a 	mov	r4,r21
   882fc:	9cbfffcc 	andi	r18,r19,65535
   88300:	b80b883a 	mov	r5,r23
   88304:	0089fec0 	call	89fec <__udivsi3>
   88308:	100b883a 	mov	r5,r2
   8830c:	9009883a 	mov	r4,r18
   88310:	1021883a 	mov	r16,r2
   88314:	0089ffc0 	call	89ffc <__mulsi3>
   88318:	a809883a 	mov	r4,r21
   8831c:	b80b883a 	mov	r5,r23
   88320:	1023883a 	mov	r17,r2
   88324:	0089ff40 	call	89ff4 <__umodsi3>
   88328:	1004943a 	slli	r2,r2,16
   8832c:	e006d43a 	srli	r3,fp,16
   88330:	10c4b03a 	or	r2,r2,r3
   88334:	1440042e 	bgeu	r2,r17,88348 <__udivdi3+0x290>
   88338:	14c5883a 	add	r2,r2,r19
   8833c:	843fffc4 	addi	r16,r16,-1
   88340:	14c00136 	bltu	r2,r19,88348 <__udivdi3+0x290>
   88344:	1440ea36 	bltu	r2,r17,886f0 <__udivdi3+0x638>
   88348:	1463c83a 	sub	r17,r2,r17
   8834c:	8809883a 	mov	r4,r17
   88350:	b80b883a 	mov	r5,r23
   88354:	0089fec0 	call	89fec <__udivsi3>
   88358:	100b883a 	mov	r5,r2
   8835c:	9009883a 	mov	r4,r18
   88360:	102b883a 	mov	r21,r2
   88364:	0089ffc0 	call	89ffc <__mulsi3>
   88368:	8809883a 	mov	r4,r17
   8836c:	b80b883a 	mov	r5,r23
   88370:	1025883a 	mov	r18,r2
   88374:	0089ff40 	call	89ff4 <__umodsi3>
   88378:	1004943a 	slli	r2,r2,16
   8837c:	e0ffffcc 	andi	r3,fp,65535
   88380:	10c4b03a 	or	r2,r2,r3
   88384:	1480042e 	bgeu	r2,r18,88398 <__udivdi3+0x2e0>
   88388:	9885883a 	add	r2,r19,r2
   8838c:	ad7fffc4 	addi	r21,r21,-1
   88390:	14c00136 	bltu	r2,r19,88398 <__udivdi3+0x2e0>
   88394:	1480d936 	bltu	r2,r18,886fc <__udivdi3+0x644>
   88398:	8004943a 	slli	r2,r16,16
   8839c:	0009883a 	mov	r4,zero
   883a0:	a884b03a 	or	r2,r21,r2
   883a4:	003fad06 	br	8825c <__udivdi3+0x1a4>
   883a8:	00804034 	movhi	r2,256
   883ac:	10bfffc4 	addi	r2,r2,-1
   883b0:	11c0b636 	bltu	r2,r7,8868c <__udivdi3+0x5d4>
   883b4:	01400404 	movi	r5,16
   883b8:	2805883a 	mov	r2,r5
   883bc:	003f9a06 	br	88228 <__udivdi3+0x170>
   883c0:	0005883a 	mov	r2,zero
   883c4:	0009883a 	mov	r4,zero
   883c8:	003fa406 	br	8825c <__udivdi3+0x1a4>
   883cc:	00804034 	movhi	r2,256
   883d0:	10bfffc4 	addi	r2,r2,-1
   883d4:	14c0b336 	bltu	r2,r19,886a4 <__udivdi3+0x5ec>
   883d8:	01400404 	movi	r5,16
   883dc:	2805883a 	mov	r2,r5
   883e0:	003f5106 	br	88128 <__udivdi3+0x70>
   883e4:	01000044 	movi	r4,1
   883e8:	000b883a 	mov	r5,zero
   883ec:	0089fec0 	call	89fec <__udivsi3>
   883f0:	1027883a 	mov	r19,r2
   883f4:	00bfffd4 	movui	r2,65535
   883f8:	14fff436 	bltu	r2,r19,883cc <__udivdi3+0x314>
   883fc:	003f4606 	br	88118 <__udivdi3+0x60>
   88400:	00804034 	movhi	r2,256
   88404:	10bfffc4 	addi	r2,r2,-1
   88408:	1200ac36 	bltu	r2,r8,886bc <__udivdi3+0x604>
   8840c:	01400404 	movi	r5,16
   88410:	2805883a 	mov	r2,r5
   88414:	003fa806 	br	882b8 <__udivdi3+0x200>
   88418:	3d85c83a 	sub	r2,r7,r22
   8841c:	3588983a 	sll	r4,r6,r22
   88420:	9886d83a 	srl	r3,r19,r2
   88424:	a8a2d83a 	srl	r17,r21,r2
   88428:	e084d83a 	srl	r2,fp,r2
   8842c:	20eeb03a 	or	r23,r4,r3
   88430:	b824d43a 	srli	r18,r23,16
   88434:	ad86983a 	sll	r3,r21,r22
   88438:	8809883a 	mov	r4,r17
   8843c:	900b883a 	mov	r5,r18
   88440:	1886b03a 	or	r3,r3,r2
   88444:	d8c00115 	stw	r3,4(sp)
   88448:	bc3fffcc 	andi	r16,r23,65535
   8844c:	0089fec0 	call	89fec <__udivsi3>
   88450:	100b883a 	mov	r5,r2
   88454:	8009883a 	mov	r4,r16
   88458:	1029883a 	mov	r20,r2
   8845c:	0089ffc0 	call	89ffc <__mulsi3>
   88460:	900b883a 	mov	r5,r18
   88464:	8809883a 	mov	r4,r17
   88468:	102b883a 	mov	r21,r2
   8846c:	0089ff40 	call	89ff4 <__umodsi3>
   88470:	d9400117 	ldw	r5,4(sp)
   88474:	1004943a 	slli	r2,r2,16
   88478:	9da6983a 	sll	r19,r19,r22
   8847c:	2806d43a 	srli	r3,r5,16
   88480:	10c4b03a 	or	r2,r2,r3
   88484:	1540032e 	bgeu	r2,r21,88494 <__udivdi3+0x3dc>
   88488:	15c5883a 	add	r2,r2,r23
   8848c:	a53fffc4 	addi	r20,r20,-1
   88490:	15c0912e 	bgeu	r2,r23,886d8 <__udivdi3+0x620>
   88494:	1563c83a 	sub	r17,r2,r21
   88498:	8809883a 	mov	r4,r17
   8849c:	900b883a 	mov	r5,r18
   884a0:	0089fec0 	call	89fec <__udivsi3>
   884a4:	100b883a 	mov	r5,r2
   884a8:	8009883a 	mov	r4,r16
   884ac:	102b883a 	mov	r21,r2
   884b0:	0089ffc0 	call	89ffc <__mulsi3>
   884b4:	8809883a 	mov	r4,r17
   884b8:	900b883a 	mov	r5,r18
   884bc:	1021883a 	mov	r16,r2
   884c0:	0089ff40 	call	89ff4 <__umodsi3>
   884c4:	da800117 	ldw	r10,4(sp)
   884c8:	1004943a 	slli	r2,r2,16
   884cc:	50ffffcc 	andi	r3,r10,65535
   884d0:	10c6b03a 	or	r3,r2,r3
   884d4:	1c00032e 	bgeu	r3,r16,884e4 <__udivdi3+0x42c>
   884d8:	1dc7883a 	add	r3,r3,r23
   884dc:	ad7fffc4 	addi	r21,r21,-1
   884e0:	1dc0792e 	bgeu	r3,r23,886c8 <__udivdi3+0x610>
   884e4:	a004943a 	slli	r2,r20,16
   884e8:	982ed43a 	srli	r23,r19,16
   884ec:	9cffffcc 	andi	r19,r19,65535
   884f0:	a8a4b03a 	or	r18,r21,r2
   884f4:	947fffcc 	andi	r17,r18,65535
   884f8:	902ad43a 	srli	r21,r18,16
   884fc:	8809883a 	mov	r4,r17
   88500:	980b883a 	mov	r5,r19
   88504:	1c21c83a 	sub	r16,r3,r16
   88508:	0089ffc0 	call	89ffc <__mulsi3>
   8850c:	8809883a 	mov	r4,r17
   88510:	b80b883a 	mov	r5,r23
   88514:	1029883a 	mov	r20,r2
   88518:	0089ffc0 	call	89ffc <__mulsi3>
   8851c:	980b883a 	mov	r5,r19
   88520:	a809883a 	mov	r4,r21
   88524:	1023883a 	mov	r17,r2
   88528:	0089ffc0 	call	89ffc <__mulsi3>
   8852c:	a809883a 	mov	r4,r21
   88530:	b80b883a 	mov	r5,r23
   88534:	1027883a 	mov	r19,r2
   88538:	0089ffc0 	call	89ffc <__mulsi3>
   8853c:	1009883a 	mov	r4,r2
   88540:	a004d43a 	srli	r2,r20,16
   88544:	8ce3883a 	add	r17,r17,r19
   88548:	1447883a 	add	r3,r2,r17
   8854c:	1cc0022e 	bgeu	r3,r19,88558 <__udivdi3+0x4a0>
   88550:	00800074 	movhi	r2,1
   88554:	2089883a 	add	r4,r4,r2
   88558:	1804d43a 	srli	r2,r3,16
   8855c:	2085883a 	add	r2,r4,r2
   88560:	80804436 	bltu	r16,r2,88674 <__udivdi3+0x5bc>
   88564:	80803e26 	beq	r16,r2,88660 <__udivdi3+0x5a8>
   88568:	9005883a 	mov	r2,r18
   8856c:	0009883a 	mov	r4,zero
   88570:	003f3a06 	br	8825c <__udivdi3+0x1a4>
   88574:	9d26983a 	sll	r19,r19,r20
   88578:	3505c83a 	sub	r2,r6,r20
   8857c:	a8a2d83a 	srl	r17,r21,r2
   88580:	982ed43a 	srli	r23,r19,16
   88584:	e084d83a 	srl	r2,fp,r2
   88588:	ad06983a 	sll	r3,r21,r20
   8858c:	8809883a 	mov	r4,r17
   88590:	b80b883a 	mov	r5,r23
   88594:	1886b03a 	or	r3,r3,r2
   88598:	d8c00015 	stw	r3,0(sp)
   8859c:	9dbfffcc 	andi	r22,r19,65535
   885a0:	0089fec0 	call	89fec <__udivsi3>
   885a4:	100b883a 	mov	r5,r2
   885a8:	b009883a 	mov	r4,r22
   885ac:	d8800215 	stw	r2,8(sp)
   885b0:	0089ffc0 	call	89ffc <__mulsi3>
   885b4:	8809883a 	mov	r4,r17
   885b8:	b80b883a 	mov	r5,r23
   885bc:	102b883a 	mov	r21,r2
   885c0:	0089ff40 	call	89ff4 <__umodsi3>
   885c4:	d9000017 	ldw	r4,0(sp)
   885c8:	1004943a 	slli	r2,r2,16
   885cc:	2006d43a 	srli	r3,r4,16
   885d0:	10c4b03a 	or	r2,r2,r3
   885d4:	1540052e 	bgeu	r2,r21,885ec <__udivdi3+0x534>
   885d8:	d9400217 	ldw	r5,8(sp)
   885dc:	14c5883a 	add	r2,r2,r19
   885e0:	297fffc4 	addi	r5,r5,-1
   885e4:	d9400215 	stw	r5,8(sp)
   885e8:	14c0462e 	bgeu	r2,r19,88704 <__udivdi3+0x64c>
   885ec:	1563c83a 	sub	r17,r2,r21
   885f0:	8809883a 	mov	r4,r17
   885f4:	b80b883a 	mov	r5,r23
   885f8:	0089fec0 	call	89fec <__udivsi3>
   885fc:	100b883a 	mov	r5,r2
   88600:	b009883a 	mov	r4,r22
   88604:	1025883a 	mov	r18,r2
   88608:	0089ffc0 	call	89ffc <__mulsi3>
   8860c:	8809883a 	mov	r4,r17
   88610:	b80b883a 	mov	r5,r23
   88614:	1021883a 	mov	r16,r2
   88618:	0089ff40 	call	89ff4 <__umodsi3>
   8861c:	da800017 	ldw	r10,0(sp)
   88620:	1004943a 	slli	r2,r2,16
   88624:	50ffffcc 	andi	r3,r10,65535
   88628:	10c6b03a 	or	r3,r2,r3
   8862c:	1c00062e 	bgeu	r3,r16,88648 <__udivdi3+0x590>
   88630:	1cc7883a 	add	r3,r3,r19
   88634:	94bfffc4 	addi	r18,r18,-1
   88638:	1cc00336 	bltu	r3,r19,88648 <__udivdi3+0x590>
   8863c:	1c00022e 	bgeu	r3,r16,88648 <__udivdi3+0x590>
   88640:	94bfffc4 	addi	r18,r18,-1
   88644:	1cc7883a 	add	r3,r3,r19
   88648:	d9000217 	ldw	r4,8(sp)
   8864c:	e538983a 	sll	fp,fp,r20
   88650:	1c2bc83a 	sub	r21,r3,r16
   88654:	2004943a 	slli	r2,r4,16
   88658:	90a8b03a 	or	r20,r18,r2
   8865c:	003ebf06 	br	8815c <__udivdi3+0xa4>
   88660:	1804943a 	slli	r2,r3,16
   88664:	e588983a 	sll	r4,fp,r22
   88668:	a0ffffcc 	andi	r3,r20,65535
   8866c:	10c5883a 	add	r2,r2,r3
   88670:	20bfbd2e 	bgeu	r4,r2,88568 <__udivdi3+0x4b0>
   88674:	90bfffc4 	addi	r2,r18,-1
   88678:	0009883a 	mov	r4,zero
   8867c:	003ef706 	br	8825c <__udivdi3+0x1a4>
   88680:	01400204 	movi	r5,8
   88684:	2805883a 	mov	r2,r5
   88688:	003ee706 	br	88228 <__udivdi3+0x170>
   8868c:	01400604 	movi	r5,24
   88690:	2805883a 	mov	r2,r5
   88694:	003ee406 	br	88228 <__udivdi3+0x170>
   88698:	01400204 	movi	r5,8
   8869c:	2805883a 	mov	r2,r5
   886a0:	003ea106 	br	88128 <__udivdi3+0x70>
   886a4:	01400604 	movi	r5,24
   886a8:	2805883a 	mov	r2,r5
   886ac:	003e9e06 	br	88128 <__udivdi3+0x70>
   886b0:	01400204 	movi	r5,8
   886b4:	2805883a 	mov	r2,r5
   886b8:	003eff06 	br	882b8 <__udivdi3+0x200>
   886bc:	01400604 	movi	r5,24
   886c0:	2805883a 	mov	r2,r5
   886c4:	003efc06 	br	882b8 <__udivdi3+0x200>
   886c8:	1c3f862e 	bgeu	r3,r16,884e4 <__udivdi3+0x42c>
   886cc:	1dc7883a 	add	r3,r3,r23
   886d0:	ad7fffc4 	addi	r21,r21,-1
   886d4:	003f8306 	br	884e4 <__udivdi3+0x42c>
   886d8:	157f6e2e 	bgeu	r2,r21,88494 <__udivdi3+0x3dc>
   886dc:	a53fffc4 	addi	r20,r20,-1
   886e0:	15c5883a 	add	r2,r2,r23
   886e4:	003f6b06 	br	88494 <__udivdi3+0x3dc>
   886e8:	ad7fffc4 	addi	r21,r21,-1
   886ec:	003ec206 	br	881f8 <__udivdi3+0x140>
   886f0:	843fffc4 	addi	r16,r16,-1
   886f4:	14c5883a 	add	r2,r2,r19
   886f8:	003f1306 	br	88348 <__udivdi3+0x290>
   886fc:	ad7fffc4 	addi	r21,r21,-1
   88700:	003f2506 	br	88398 <__udivdi3+0x2e0>
   88704:	157fb92e 	bgeu	r2,r21,885ec <__udivdi3+0x534>
   88708:	297fffc4 	addi	r5,r5,-1
   8870c:	14c5883a 	add	r2,r2,r19
   88710:	d9400215 	stw	r5,8(sp)
   88714:	003fb506 	br	885ec <__udivdi3+0x534>
   88718:	843fffc4 	addi	r16,r16,-1
   8871c:	14c5883a 	add	r2,r2,r19
   88720:	003ea106 	br	881a8 <__udivdi3+0xf0>

00088724 <__umoddi3>:
   88724:	defff004 	addi	sp,sp,-64
   88728:	3011883a 	mov	r8,r6
   8872c:	000d883a 	mov	r6,zero
   88730:	dd400b15 	stw	r21,44(sp)
   88734:	dcc00915 	stw	r19,36(sp)
   88738:	dc000615 	stw	r16,24(sp)
   8873c:	dfc00f15 	stw	ra,60(sp)
   88740:	df000e15 	stw	fp,56(sp)
   88744:	ddc00d15 	stw	r23,52(sp)
   88748:	dd800c15 	stw	r22,48(sp)
   8874c:	dd000a15 	stw	r20,40(sp)
   88750:	dc800815 	stw	r18,32(sp)
   88754:	dc400715 	stw	r17,28(sp)
   88758:	2817883a 	mov	r11,r5
   8875c:	d9800415 	stw	r6,16(sp)
   88760:	4027883a 	mov	r19,r8
   88764:	d9800515 	stw	r6,20(sp)
   88768:	2021883a 	mov	r16,r4
   8876c:	282b883a 	mov	r21,r5
   88770:	38002c1e 	bne	r7,zero,88824 <__umoddi3+0x100>
   88774:	2a005636 	bltu	r5,r8,888d0 <__umoddi3+0x1ac>
   88778:	40009a26 	beq	r8,zero,889e4 <__umoddi3+0x2c0>
   8877c:	00bfffd4 	movui	r2,65535
   88780:	14c09236 	bltu	r2,r19,889cc <__umoddi3+0x2a8>
   88784:	00803fc4 	movi	r2,255
   88788:	14c15c36 	bltu	r2,r19,88cfc <__umoddi3+0x5d8>
   8878c:	000b883a 	mov	r5,zero
   88790:	0005883a 	mov	r2,zero
   88794:	9884d83a 	srl	r2,r19,r2
   88798:	01000274 	movhi	r4,9
   8879c:	21355304 	addi	r4,r4,-10932
   887a0:	01800804 	movi	r6,32
   887a4:	1105883a 	add	r2,r2,r4
   887a8:	10c00003 	ldbu	r3,0(r2)
   887ac:	28c7883a 	add	r3,r5,r3
   887b0:	30e5c83a 	sub	r18,r6,r3
   887b4:	9000a41e 	bne	r18,zero,88a48 <__umoddi3+0x324>
   887b8:	982ed43a 	srli	r23,r19,16
   887bc:	acebc83a 	sub	r21,r21,r19
   887c0:	9d3fffcc 	andi	r20,r19,65535
   887c4:	002d883a 	mov	r22,zero
   887c8:	a809883a 	mov	r4,r21
   887cc:	b80b883a 	mov	r5,r23
   887d0:	0089fec0 	call	89fec <__udivsi3>
   887d4:	100b883a 	mov	r5,r2
   887d8:	a009883a 	mov	r4,r20
   887dc:	0089ffc0 	call	89ffc <__mulsi3>
   887e0:	a809883a 	mov	r4,r21
   887e4:	b80b883a 	mov	r5,r23
   887e8:	1023883a 	mov	r17,r2
   887ec:	0089ff40 	call	89ff4 <__umodsi3>
   887f0:	1004943a 	slli	r2,r2,16
   887f4:	8006d43a 	srli	r3,r16,16
   887f8:	10c4b03a 	or	r2,r2,r3
   887fc:	1440032e 	bgeu	r2,r17,8880c <__umoddi3+0xe8>
   88800:	14c5883a 	add	r2,r2,r19
   88804:	14c00136 	bltu	r2,r19,8880c <__umoddi3+0xe8>
   88808:	14415836 	bltu	r2,r17,88d6c <__umoddi3+0x648>
   8880c:	1463c83a 	sub	r17,r2,r17
   88810:	8809883a 	mov	r4,r17
   88814:	b80b883a 	mov	r5,r23
   88818:	0089fec0 	call	89fec <__udivsi3>
   8881c:	a009883a 	mov	r4,r20
   88820:	00005306 	br	88970 <__umoddi3+0x24c>
   88824:	380d883a 	mov	r6,r7
   88828:	29c0132e 	bgeu	r5,r7,88878 <__umoddi3+0x154>
   8882c:	d9000415 	stw	r4,16(sp)
   88830:	d9400515 	stw	r5,20(sp)
   88834:	d9400417 	ldw	r5,16(sp)
   88838:	5813883a 	mov	r9,r11
   8883c:	2811883a 	mov	r8,r5
   88840:	4005883a 	mov	r2,r8
   88844:	4807883a 	mov	r3,r9
   88848:	dfc00f17 	ldw	ra,60(sp)
   8884c:	df000e17 	ldw	fp,56(sp)
   88850:	ddc00d17 	ldw	r23,52(sp)
   88854:	dd800c17 	ldw	r22,48(sp)
   88858:	dd400b17 	ldw	r21,44(sp)
   8885c:	dd000a17 	ldw	r20,40(sp)
   88860:	dcc00917 	ldw	r19,36(sp)
   88864:	dc800817 	ldw	r18,32(sp)
   88868:	dc400717 	ldw	r17,28(sp)
   8886c:	dc000617 	ldw	r16,24(sp)
   88870:	dec01004 	addi	sp,sp,64
   88874:	f800283a 	ret
   88878:	00bfffd4 	movui	r2,65535
   8887c:	11c06636 	bltu	r2,r7,88a18 <__umoddi3+0x2f4>
   88880:	00803fc4 	movi	r2,255
   88884:	11c12036 	bltu	r2,r7,88d08 <__umoddi3+0x5e4>
   88888:	000b883a 	mov	r5,zero
   8888c:	0005883a 	mov	r2,zero
   88890:	3084d83a 	srl	r2,r6,r2
   88894:	01000274 	movhi	r4,9
   88898:	21355304 	addi	r4,r4,-10932
   8889c:	01c00804 	movi	r7,32
   888a0:	1105883a 	add	r2,r2,r4
   888a4:	10c00003 	ldbu	r3,0(r2)
   888a8:	28c7883a 	add	r3,r5,r3
   888ac:	38e5c83a 	sub	r18,r7,r3
   888b0:	9000941e 	bne	r18,zero,88b04 <__umoddi3+0x3e0>
   888b4:	35405e36 	bltu	r6,r21,88a30 <__umoddi3+0x30c>
   888b8:	84c05d2e 	bgeu	r16,r19,88a30 <__umoddi3+0x30c>
   888bc:	8011883a 	mov	r8,r16
   888c0:	a813883a 	mov	r9,r21
   888c4:	dc000415 	stw	r16,16(sp)
   888c8:	dd400515 	stw	r21,20(sp)
   888cc:	003fdc06 	br	88840 <__umoddi3+0x11c>
   888d0:	00bfffd4 	movui	r2,65535
   888d4:	12004a36 	bltu	r2,r8,88a00 <__umoddi3+0x2dc>
   888d8:	00803fc4 	movi	r2,255
   888dc:	12010d36 	bltu	r2,r8,88d14 <__umoddi3+0x5f0>
   888e0:	000b883a 	mov	r5,zero
   888e4:	0005883a 	mov	r2,zero
   888e8:	9884d83a 	srl	r2,r19,r2
   888ec:	01000274 	movhi	r4,9
   888f0:	21355304 	addi	r4,r4,-10932
   888f4:	01800804 	movi	r6,32
   888f8:	1105883a 	add	r2,r2,r4
   888fc:	10c00003 	ldbu	r3,0(r2)
   88900:	28c7883a 	add	r3,r5,r3
   88904:	30c7c83a 	sub	r3,r6,r3
   88908:	1800dc1e 	bne	r3,zero,88c7c <__umoddi3+0x558>
   8890c:	002d883a 	mov	r22,zero
   88910:	982ed43a 	srli	r23,r19,16
   88914:	a809883a 	mov	r4,r21
   88918:	9cbfffcc 	andi	r18,r19,65535
   8891c:	b80b883a 	mov	r5,r23
   88920:	0089fec0 	call	89fec <__udivsi3>
   88924:	100b883a 	mov	r5,r2
   88928:	9009883a 	mov	r4,r18
   8892c:	0089ffc0 	call	89ffc <__mulsi3>
   88930:	a809883a 	mov	r4,r21
   88934:	b80b883a 	mov	r5,r23
   88938:	1023883a 	mov	r17,r2
   8893c:	0089ff40 	call	89ff4 <__umodsi3>
   88940:	1004943a 	slli	r2,r2,16
   88944:	8006d43a 	srli	r3,r16,16
   88948:	10c4b03a 	or	r2,r2,r3
   8894c:	1440032e 	bgeu	r2,r17,8895c <__umoddi3+0x238>
   88950:	14c5883a 	add	r2,r2,r19
   88954:	14c00136 	bltu	r2,r19,8895c <__umoddi3+0x238>
   88958:	14410236 	bltu	r2,r17,88d64 <__umoddi3+0x640>
   8895c:	1463c83a 	sub	r17,r2,r17
   88960:	8809883a 	mov	r4,r17
   88964:	b80b883a 	mov	r5,r23
   88968:	0089fec0 	call	89fec <__udivsi3>
   8896c:	9009883a 	mov	r4,r18
   88970:	100b883a 	mov	r5,r2
   88974:	0089ffc0 	call	89ffc <__mulsi3>
   88978:	8809883a 	mov	r4,r17
   8897c:	b80b883a 	mov	r5,r23
   88980:	102b883a 	mov	r21,r2
   88984:	0089ff40 	call	89ff4 <__umodsi3>
   88988:	1004943a 	slli	r2,r2,16
   8898c:	80ffffcc 	andi	r3,r16,65535
   88990:	10c4b03a 	or	r2,r2,r3
   88994:	1540042e 	bgeu	r2,r21,889a8 <__umoddi3+0x284>
   88998:	14c5883a 	add	r2,r2,r19
   8899c:	14c00236 	bltu	r2,r19,889a8 <__umoddi3+0x284>
   889a0:	1540012e 	bgeu	r2,r21,889a8 <__umoddi3+0x284>
   889a4:	14c5883a 	add	r2,r2,r19
   889a8:	1545c83a 	sub	r2,r2,r21
   889ac:	1584d83a 	srl	r2,r2,r22
   889b0:	0013883a 	mov	r9,zero
   889b4:	d8800415 	stw	r2,16(sp)
   889b8:	d8c00417 	ldw	r3,16(sp)
   889bc:	0005883a 	mov	r2,zero
   889c0:	d8800515 	stw	r2,20(sp)
   889c4:	1811883a 	mov	r8,r3
   889c8:	003f9d06 	br	88840 <__umoddi3+0x11c>
   889cc:	00804034 	movhi	r2,256
   889d0:	10bfffc4 	addi	r2,r2,-1
   889d4:	14c0c636 	bltu	r2,r19,88cf0 <__umoddi3+0x5cc>
   889d8:	01400404 	movi	r5,16
   889dc:	2805883a 	mov	r2,r5
   889e0:	003f6c06 	br	88794 <__umoddi3+0x70>
   889e4:	01000044 	movi	r4,1
   889e8:	000b883a 	mov	r5,zero
   889ec:	0089fec0 	call	89fec <__udivsi3>
   889f0:	1027883a 	mov	r19,r2
   889f4:	00bfffd4 	movui	r2,65535
   889f8:	14fff436 	bltu	r2,r19,889cc <__umoddi3+0x2a8>
   889fc:	003f6106 	br	88784 <__umoddi3+0x60>
   88a00:	00804034 	movhi	r2,256
   88a04:	10bfffc4 	addi	r2,r2,-1
   88a08:	1200c536 	bltu	r2,r8,88d20 <__umoddi3+0x5fc>
   88a0c:	01400404 	movi	r5,16
   88a10:	2805883a 	mov	r2,r5
   88a14:	003fb406 	br	888e8 <__umoddi3+0x1c4>
   88a18:	00804034 	movhi	r2,256
   88a1c:	10bfffc4 	addi	r2,r2,-1
   88a20:	11c0c236 	bltu	r2,r7,88d2c <__umoddi3+0x608>
   88a24:	01400404 	movi	r5,16
   88a28:	2805883a 	mov	r2,r5
   88a2c:	003f9806 	br	88890 <__umoddi3+0x16c>
   88a30:	84c9c83a 	sub	r4,r16,r19
   88a34:	8105803a 	cmpltu	r2,r16,r4
   88a38:	a987c83a 	sub	r3,r21,r6
   88a3c:	18abc83a 	sub	r21,r3,r2
   88a40:	2021883a 	mov	r16,r4
   88a44:	003f9d06 	br	888bc <__umoddi3+0x198>
   88a48:	9ca6983a 	sll	r19,r19,r18
   88a4c:	3485c83a 	sub	r2,r6,r18
   88a50:	a8a2d83a 	srl	r17,r21,r2
   88a54:	982ed43a 	srli	r23,r19,16
   88a58:	ac86983a 	sll	r3,r21,r18
   88a5c:	8084d83a 	srl	r2,r16,r2
   88a60:	8809883a 	mov	r4,r17
   88a64:	b80b883a 	mov	r5,r23
   88a68:	18b8b03a 	or	fp,r3,r2
   88a6c:	9d3fffcc 	andi	r20,r19,65535
   88a70:	0089fec0 	call	89fec <__udivsi3>
   88a74:	100b883a 	mov	r5,r2
   88a78:	a009883a 	mov	r4,r20
   88a7c:	0089ffc0 	call	89ffc <__mulsi3>
   88a80:	8809883a 	mov	r4,r17
   88a84:	b80b883a 	mov	r5,r23
   88a88:	102b883a 	mov	r21,r2
   88a8c:	0089ff40 	call	89ff4 <__umodsi3>
   88a90:	1004943a 	slli	r2,r2,16
   88a94:	e006d43a 	srli	r3,fp,16
   88a98:	902d883a 	mov	r22,r18
   88a9c:	10c4b03a 	or	r2,r2,r3
   88aa0:	1540022e 	bgeu	r2,r21,88aac <__umoddi3+0x388>
   88aa4:	14c5883a 	add	r2,r2,r19
   88aa8:	14c0ab2e 	bgeu	r2,r19,88d58 <__umoddi3+0x634>
   88aac:	1563c83a 	sub	r17,r2,r21
   88ab0:	8809883a 	mov	r4,r17
   88ab4:	b80b883a 	mov	r5,r23
   88ab8:	0089fec0 	call	89fec <__udivsi3>
   88abc:	100b883a 	mov	r5,r2
   88ac0:	a009883a 	mov	r4,r20
   88ac4:	0089ffc0 	call	89ffc <__mulsi3>
   88ac8:	8809883a 	mov	r4,r17
   88acc:	b80b883a 	mov	r5,r23
   88ad0:	102b883a 	mov	r21,r2
   88ad4:	0089ff40 	call	89ff4 <__umodsi3>
   88ad8:	1004943a 	slli	r2,r2,16
   88adc:	e0ffffcc 	andi	r3,fp,65535
   88ae0:	10c4b03a 	or	r2,r2,r3
   88ae4:	1540042e 	bgeu	r2,r21,88af8 <__umoddi3+0x3d4>
   88ae8:	14c5883a 	add	r2,r2,r19
   88aec:	14c00236 	bltu	r2,r19,88af8 <__umoddi3+0x3d4>
   88af0:	1540012e 	bgeu	r2,r21,88af8 <__umoddi3+0x3d4>
   88af4:	14c5883a 	add	r2,r2,r19
   88af8:	84a0983a 	sll	r16,r16,r18
   88afc:	156bc83a 	sub	r21,r2,r21
   88b00:	003f3106 	br	887c8 <__umoddi3+0xa4>
   88b04:	3c8fc83a 	sub	r7,r7,r18
   88b08:	3486983a 	sll	r3,r6,r18
   88b0c:	99c4d83a 	srl	r2,r19,r7
   88b10:	a9e2d83a 	srl	r17,r21,r7
   88b14:	ac8c983a 	sll	r6,r21,r18
   88b18:	18acb03a 	or	r22,r3,r2
   88b1c:	b02ed43a 	srli	r23,r22,16
   88b20:	81c4d83a 	srl	r2,r16,r7
   88b24:	8809883a 	mov	r4,r17
   88b28:	b80b883a 	mov	r5,r23
   88b2c:	308cb03a 	or	r6,r6,r2
   88b30:	d9c00315 	stw	r7,12(sp)
   88b34:	d9800215 	stw	r6,8(sp)
   88b38:	b53fffcc 	andi	r20,r22,65535
   88b3c:	0089fec0 	call	89fec <__udivsi3>
   88b40:	100b883a 	mov	r5,r2
   88b44:	a009883a 	mov	r4,r20
   88b48:	1039883a 	mov	fp,r2
   88b4c:	0089ffc0 	call	89ffc <__mulsi3>
   88b50:	8809883a 	mov	r4,r17
   88b54:	b80b883a 	mov	r5,r23
   88b58:	102b883a 	mov	r21,r2
   88b5c:	0089ff40 	call	89ff4 <__umodsi3>
   88b60:	d9000217 	ldw	r4,8(sp)
   88b64:	1004943a 	slli	r2,r2,16
   88b68:	9ca6983a 	sll	r19,r19,r18
   88b6c:	2006d43a 	srli	r3,r4,16
   88b70:	84a0983a 	sll	r16,r16,r18
   88b74:	dcc00015 	stw	r19,0(sp)
   88b78:	10c4b03a 	or	r2,r2,r3
   88b7c:	dc000115 	stw	r16,4(sp)
   88b80:	1540032e 	bgeu	r2,r21,88b90 <__umoddi3+0x46c>
   88b84:	1585883a 	add	r2,r2,r22
   88b88:	e73fffc4 	addi	fp,fp,-1
   88b8c:	15806e2e 	bgeu	r2,r22,88d48 <__umoddi3+0x624>
   88b90:	1563c83a 	sub	r17,r2,r21
   88b94:	8809883a 	mov	r4,r17
   88b98:	b80b883a 	mov	r5,r23
   88b9c:	0089fec0 	call	89fec <__udivsi3>
   88ba0:	100b883a 	mov	r5,r2
   88ba4:	a009883a 	mov	r4,r20
   88ba8:	1021883a 	mov	r16,r2
   88bac:	0089ffc0 	call	89ffc <__mulsi3>
   88bb0:	b80b883a 	mov	r5,r23
   88bb4:	8809883a 	mov	r4,r17
   88bb8:	1029883a 	mov	r20,r2
   88bbc:	0089ff40 	call	89ff4 <__umodsi3>
   88bc0:	d9400217 	ldw	r5,8(sp)
   88bc4:	1004943a 	slli	r2,r2,16
   88bc8:	28ffffcc 	andi	r3,r5,65535
   88bcc:	10c4b03a 	or	r2,r2,r3
   88bd0:	1500032e 	bgeu	r2,r20,88be0 <__umoddi3+0x4bc>
   88bd4:	1585883a 	add	r2,r2,r22
   88bd8:	843fffc4 	addi	r16,r16,-1
   88bdc:	1580562e 	bgeu	r2,r22,88d38 <__umoddi3+0x614>
   88be0:	d9800017 	ldw	r6,0(sp)
   88be4:	e022943a 	slli	r17,fp,16
   88be8:	302ed43a 	srli	r23,r6,16
   88bec:	8462b03a 	or	r17,r16,r17
   88bf0:	34ffffcc 	andi	r19,r6,65535
   88bf4:	882ad43a 	srli	r21,r17,16
   88bf8:	8c7fffcc 	andi	r17,r17,65535
   88bfc:	8809883a 	mov	r4,r17
   88c00:	980b883a 	mov	r5,r19
   88c04:	1521c83a 	sub	r16,r2,r20
   88c08:	0089ffc0 	call	89ffc <__mulsi3>
   88c0c:	8809883a 	mov	r4,r17
   88c10:	b80b883a 	mov	r5,r23
   88c14:	1029883a 	mov	r20,r2
   88c18:	0089ffc0 	call	89ffc <__mulsi3>
   88c1c:	980b883a 	mov	r5,r19
   88c20:	a809883a 	mov	r4,r21
   88c24:	1023883a 	mov	r17,r2
   88c28:	0089ffc0 	call	89ffc <__mulsi3>
   88c2c:	a809883a 	mov	r4,r21
   88c30:	b80b883a 	mov	r5,r23
   88c34:	1027883a 	mov	r19,r2
   88c38:	0089ffc0 	call	89ffc <__mulsi3>
   88c3c:	100b883a 	mov	r5,r2
   88c40:	a004d43a 	srli	r2,r20,16
   88c44:	8ce3883a 	add	r17,r17,r19
   88c48:	1449883a 	add	r4,r2,r17
   88c4c:	24c0022e 	bgeu	r4,r19,88c58 <__umoddi3+0x534>
   88c50:	00800074 	movhi	r2,1
   88c54:	288b883a 	add	r5,r5,r2
   88c58:	2004d43a 	srli	r2,r4,16
   88c5c:	2008943a 	slli	r4,r4,16
   88c60:	a0ffffcc 	andi	r3,r20,65535
   88c64:	288d883a 	add	r6,r5,r2
   88c68:	20c9883a 	add	r4,r4,r3
   88c6c:	81800b36 	bltu	r16,r6,88c9c <__umoddi3+0x578>
   88c70:	81804026 	beq	r16,r6,88d74 <__umoddi3+0x650>
   88c74:	818dc83a 	sub	r6,r16,r6
   88c78:	00000f06 	br	88cb8 <__umoddi3+0x594>
   88c7c:	30c5c83a 	sub	r2,r6,r3
   88c80:	182d883a 	mov	r22,r3
   88c84:	8084d83a 	srl	r2,r16,r2
   88c88:	a8c6983a 	sll	r3,r21,r3
   88c8c:	9da6983a 	sll	r19,r19,r22
   88c90:	85a0983a 	sll	r16,r16,r22
   88c94:	18aab03a 	or	r21,r3,r2
   88c98:	003f1d06 	br	88910 <__umoddi3+0x1ec>
   88c9c:	d8c00017 	ldw	r3,0(sp)
   88ca0:	20c5c83a 	sub	r2,r4,r3
   88ca4:	2089803a 	cmpltu	r4,r4,r2
   88ca8:	3587c83a 	sub	r3,r6,r22
   88cac:	1907c83a 	sub	r3,r3,r4
   88cb0:	80cdc83a 	sub	r6,r16,r3
   88cb4:	1009883a 	mov	r4,r2
   88cb8:	d9400117 	ldw	r5,4(sp)
   88cbc:	2905c83a 	sub	r2,r5,r4
   88cc0:	2887803a 	cmpltu	r3,r5,r2
   88cc4:	30c7c83a 	sub	r3,r6,r3
   88cc8:	d9800317 	ldw	r6,12(sp)
   88ccc:	1484d83a 	srl	r2,r2,r18
   88cd0:	1988983a 	sll	r4,r3,r6
   88cd4:	1c86d83a 	srl	r3,r3,r18
   88cd8:	2088b03a 	or	r4,r4,r2
   88cdc:	2011883a 	mov	r8,r4
   88ce0:	1813883a 	mov	r9,r3
   88ce4:	d9000415 	stw	r4,16(sp)
   88ce8:	d8c00515 	stw	r3,20(sp)
   88cec:	003ed406 	br	88840 <__umoddi3+0x11c>
   88cf0:	01400604 	movi	r5,24
   88cf4:	2805883a 	mov	r2,r5
   88cf8:	003ea606 	br	88794 <__umoddi3+0x70>
   88cfc:	01400204 	movi	r5,8
   88d00:	2805883a 	mov	r2,r5
   88d04:	003ea306 	br	88794 <__umoddi3+0x70>
   88d08:	01400204 	movi	r5,8
   88d0c:	2805883a 	mov	r2,r5
   88d10:	003edf06 	br	88890 <__umoddi3+0x16c>
   88d14:	01400204 	movi	r5,8
   88d18:	2805883a 	mov	r2,r5
   88d1c:	003ef206 	br	888e8 <__umoddi3+0x1c4>
   88d20:	01400604 	movi	r5,24
   88d24:	2805883a 	mov	r2,r5
   88d28:	003eef06 	br	888e8 <__umoddi3+0x1c4>
   88d2c:	01400604 	movi	r5,24
   88d30:	2805883a 	mov	r2,r5
   88d34:	003ed606 	br	88890 <__umoddi3+0x16c>
   88d38:	153fa92e 	bgeu	r2,r20,88be0 <__umoddi3+0x4bc>
   88d3c:	843fffc4 	addi	r16,r16,-1
   88d40:	1585883a 	add	r2,r2,r22
   88d44:	003fa606 	br	88be0 <__umoddi3+0x4bc>
   88d48:	157f912e 	bgeu	r2,r21,88b90 <__umoddi3+0x46c>
   88d4c:	e73fffc4 	addi	fp,fp,-1
   88d50:	1585883a 	add	r2,r2,r22
   88d54:	003f8e06 	br	88b90 <__umoddi3+0x46c>
   88d58:	157f542e 	bgeu	r2,r21,88aac <__umoddi3+0x388>
   88d5c:	14c5883a 	add	r2,r2,r19
   88d60:	003f5206 	br	88aac <__umoddi3+0x388>
   88d64:	14c5883a 	add	r2,r2,r19
   88d68:	003efc06 	br	8895c <__umoddi3+0x238>
   88d6c:	14c5883a 	add	r2,r2,r19
   88d70:	003ea606 	br	8880c <__umoddi3+0xe8>
   88d74:	d8800117 	ldw	r2,4(sp)
   88d78:	113fc836 	bltu	r2,r4,88c9c <__umoddi3+0x578>
   88d7c:	000d883a 	mov	r6,zero
   88d80:	003fcd06 	br	88cb8 <__umoddi3+0x594>

00088d84 <_fpadd_parts>:
   88d84:	defff804 	addi	sp,sp,-32
   88d88:	dcc00315 	stw	r19,12(sp)
   88d8c:	2027883a 	mov	r19,r4
   88d90:	21000017 	ldw	r4,0(r4)
   88d94:	00c00044 	movi	r3,1
   88d98:	dd400515 	stw	r21,20(sp)
   88d9c:	dd000415 	stw	r20,16(sp)
   88da0:	ddc00715 	stw	r23,28(sp)
   88da4:	dd800615 	stw	r22,24(sp)
   88da8:	dc800215 	stw	r18,8(sp)
   88dac:	dc400115 	stw	r17,4(sp)
   88db0:	dc000015 	stw	r16,0(sp)
   88db4:	282b883a 	mov	r21,r5
   88db8:	3029883a 	mov	r20,r6
   88dbc:	1900632e 	bgeu	r3,r4,88f4c <_fpadd_parts+0x1c8>
   88dc0:	28800017 	ldw	r2,0(r5)
   88dc4:	1880812e 	bgeu	r3,r2,88fcc <_fpadd_parts+0x248>
   88dc8:	00c00104 	movi	r3,4
   88dcc:	20c0dc26 	beq	r4,r3,89140 <_fpadd_parts+0x3bc>
   88dd0:	10c07e26 	beq	r2,r3,88fcc <_fpadd_parts+0x248>
   88dd4:	00c00084 	movi	r3,2
   88dd8:	10c06726 	beq	r2,r3,88f78 <_fpadd_parts+0x1f4>
   88ddc:	20c07b26 	beq	r4,r3,88fcc <_fpadd_parts+0x248>
   88de0:	9dc00217 	ldw	r23,8(r19)
   88de4:	28c00217 	ldw	r3,8(r5)
   88de8:	9c400317 	ldw	r17,12(r19)
   88dec:	2bc00317 	ldw	r15,12(r5)
   88df0:	b8cdc83a 	sub	r6,r23,r3
   88df4:	9c800417 	ldw	r18,16(r19)
   88df8:	2c000417 	ldw	r16,16(r5)
   88dfc:	3009883a 	mov	r4,r6
   88e00:	30009716 	blt	r6,zero,89060 <_fpadd_parts+0x2dc>
   88e04:	00800fc4 	movi	r2,63
   88e08:	11806b16 	blt	r2,r6,88fb8 <_fpadd_parts+0x234>
   88e0c:	0100a40e 	bge	zero,r4,890a0 <_fpadd_parts+0x31c>
   88e10:	35bff804 	addi	r22,r6,-32
   88e14:	b000bc16 	blt	r22,zero,89108 <_fpadd_parts+0x384>
   88e18:	8596d83a 	srl	r11,r16,r22
   88e1c:	0019883a 	mov	r12,zero
   88e20:	0013883a 	mov	r9,zero
   88e24:	01000044 	movi	r4,1
   88e28:	0015883a 	mov	r10,zero
   88e2c:	b000be16 	blt	r22,zero,89128 <_fpadd_parts+0x3a4>
   88e30:	2590983a 	sll	r8,r4,r22
   88e34:	000f883a 	mov	r7,zero
   88e38:	00bfffc4 	movi	r2,-1
   88e3c:	3889883a 	add	r4,r7,r2
   88e40:	408b883a 	add	r5,r8,r2
   88e44:	21cd803a 	cmpltu	r6,r4,r7
   88e48:	314b883a 	add	r5,r6,r5
   88e4c:	7904703a 	and	r2,r15,r4
   88e50:	8146703a 	and	r3,r16,r5
   88e54:	10c4b03a 	or	r2,r2,r3
   88e58:	10000226 	beq	r2,zero,88e64 <_fpadd_parts+0xe0>
   88e5c:	02400044 	movi	r9,1
   88e60:	0015883a 	mov	r10,zero
   88e64:	5a5eb03a 	or	r15,r11,r9
   88e68:	62a0b03a 	or	r16,r12,r10
   88e6c:	99400117 	ldw	r5,4(r19)
   88e70:	a8800117 	ldw	r2,4(r21)
   88e74:	28806e26 	beq	r5,r2,89030 <_fpadd_parts+0x2ac>
   88e78:	28006626 	beq	r5,zero,89014 <_fpadd_parts+0x290>
   88e7c:	7c45c83a 	sub	r2,r15,r17
   88e80:	7889803a 	cmpltu	r4,r15,r2
   88e84:	8487c83a 	sub	r3,r16,r18
   88e88:	1909c83a 	sub	r4,r3,r4
   88e8c:	100d883a 	mov	r6,r2
   88e90:	200f883a 	mov	r7,r4
   88e94:	38007716 	blt	r7,zero,89074 <_fpadd_parts+0x2f0>
   88e98:	a5c00215 	stw	r23,8(r20)
   88e9c:	a1c00415 	stw	r7,16(r20)
   88ea0:	a0000115 	stw	zero,4(r20)
   88ea4:	a1800315 	stw	r6,12(r20)
   88ea8:	a2000317 	ldw	r8,12(r20)
   88eac:	a2400417 	ldw	r9,16(r20)
   88eb0:	00bfffc4 	movi	r2,-1
   88eb4:	408b883a 	add	r5,r8,r2
   88eb8:	2a09803a 	cmpltu	r4,r5,r8
   88ebc:	488d883a 	add	r6,r9,r2
   88ec0:	01c40034 	movhi	r7,4096
   88ec4:	39ffffc4 	addi	r7,r7,-1
   88ec8:	218d883a 	add	r6,r4,r6
   88ecc:	39801736 	bltu	r7,r6,88f2c <_fpadd_parts+0x1a8>
   88ed0:	31c06526 	beq	r6,r7,89068 <_fpadd_parts+0x2e4>
   88ed4:	a3000217 	ldw	r12,8(r20)
   88ed8:	4209883a 	add	r4,r8,r8
   88edc:	00bfffc4 	movi	r2,-1
   88ee0:	220f803a 	cmpltu	r7,r4,r8
   88ee4:	4a4b883a 	add	r5,r9,r9
   88ee8:	394f883a 	add	r7,r7,r5
   88eec:	2095883a 	add	r10,r4,r2
   88ef0:	3897883a 	add	r11,r7,r2
   88ef4:	510d803a 	cmpltu	r6,r10,r4
   88ef8:	6099883a 	add	r12,r12,r2
   88efc:	32d7883a 	add	r11,r6,r11
   88f00:	00840034 	movhi	r2,4096
   88f04:	10bfffc4 	addi	r2,r2,-1
   88f08:	2011883a 	mov	r8,r4
   88f0c:	3813883a 	mov	r9,r7
   88f10:	a1000315 	stw	r4,12(r20)
   88f14:	a1c00415 	stw	r7,16(r20)
   88f18:	a3000215 	stw	r12,8(r20)
   88f1c:	12c00336 	bltu	r2,r11,88f2c <_fpadd_parts+0x1a8>
   88f20:	58bfed1e 	bne	r11,r2,88ed8 <_fpadd_parts+0x154>
   88f24:	00bfff84 	movi	r2,-2
   88f28:	12bfeb2e 	bgeu	r2,r10,88ed8 <_fpadd_parts+0x154>
   88f2c:	a2800417 	ldw	r10,16(r20)
   88f30:	008000c4 	movi	r2,3
   88f34:	00c80034 	movhi	r3,8192
   88f38:	18ffffc4 	addi	r3,r3,-1
   88f3c:	a2400317 	ldw	r9,12(r20)
   88f40:	a0800015 	stw	r2,0(r20)
   88f44:	1a802336 	bltu	r3,r10,88fd4 <_fpadd_parts+0x250>
   88f48:	a027883a 	mov	r19,r20
   88f4c:	9805883a 	mov	r2,r19
   88f50:	ddc00717 	ldw	r23,28(sp)
   88f54:	dd800617 	ldw	r22,24(sp)
   88f58:	dd400517 	ldw	r21,20(sp)
   88f5c:	dd000417 	ldw	r20,16(sp)
   88f60:	dcc00317 	ldw	r19,12(sp)
   88f64:	dc800217 	ldw	r18,8(sp)
   88f68:	dc400117 	ldw	r17,4(sp)
   88f6c:	dc000017 	ldw	r16,0(sp)
   88f70:	dec00804 	addi	sp,sp,32
   88f74:	f800283a 	ret
   88f78:	20fff41e 	bne	r4,r3,88f4c <_fpadd_parts+0x1c8>
   88f7c:	31000015 	stw	r4,0(r6)
   88f80:	98800117 	ldw	r2,4(r19)
   88f84:	30800115 	stw	r2,4(r6)
   88f88:	98c00217 	ldw	r3,8(r19)
   88f8c:	30c00215 	stw	r3,8(r6)
   88f90:	98800317 	ldw	r2,12(r19)
   88f94:	30800315 	stw	r2,12(r6)
   88f98:	98c00417 	ldw	r3,16(r19)
   88f9c:	30c00415 	stw	r3,16(r6)
   88fa0:	98800117 	ldw	r2,4(r19)
   88fa4:	28c00117 	ldw	r3,4(r5)
   88fa8:	3027883a 	mov	r19,r6
   88fac:	10c4703a 	and	r2,r2,r3
   88fb0:	30800115 	stw	r2,4(r6)
   88fb4:	003fe506 	br	88f4c <_fpadd_parts+0x1c8>
   88fb8:	1dc02616 	blt	r3,r23,89054 <_fpadd_parts+0x2d0>
   88fbc:	0023883a 	mov	r17,zero
   88fc0:	182f883a 	mov	r23,r3
   88fc4:	0025883a 	mov	r18,zero
   88fc8:	003fa806 	br	88e6c <_fpadd_parts+0xe8>
   88fcc:	a827883a 	mov	r19,r21
   88fd0:	003fde06 	br	88f4c <_fpadd_parts+0x1c8>
   88fd4:	01800044 	movi	r6,1
   88fd8:	500497fa 	slli	r2,r10,31
   88fdc:	4808d07a 	srli	r4,r9,1
   88fe0:	518ad83a 	srl	r5,r10,r6
   88fe4:	a2000217 	ldw	r8,8(r20)
   88fe8:	1108b03a 	or	r4,r2,r4
   88fec:	0007883a 	mov	r3,zero
   88ff0:	4984703a 	and	r2,r9,r6
   88ff4:	208cb03a 	or	r6,r4,r2
   88ff8:	28ceb03a 	or	r7,r5,r3
   88ffc:	42000044 	addi	r8,r8,1
   89000:	a027883a 	mov	r19,r20
   89004:	a1c00415 	stw	r7,16(r20)
   89008:	a2000215 	stw	r8,8(r20)
   8900c:	a1800315 	stw	r6,12(r20)
   89010:	003fce06 	br	88f4c <_fpadd_parts+0x1c8>
   89014:	8bc5c83a 	sub	r2,r17,r15
   89018:	8889803a 	cmpltu	r4,r17,r2
   8901c:	9407c83a 	sub	r3,r18,r16
   89020:	1909c83a 	sub	r4,r3,r4
   89024:	100d883a 	mov	r6,r2
   89028:	200f883a 	mov	r7,r4
   8902c:	003f9906 	br	88e94 <_fpadd_parts+0x110>
   89030:	7c45883a 	add	r2,r15,r17
   89034:	13c9803a 	cmpltu	r4,r2,r15
   89038:	8487883a 	add	r3,r16,r18
   8903c:	20c9883a 	add	r4,r4,r3
   89040:	a1400115 	stw	r5,4(r20)
   89044:	a5c00215 	stw	r23,8(r20)
   89048:	a0800315 	stw	r2,12(r20)
   8904c:	a1000415 	stw	r4,16(r20)
   89050:	003fb606 	br	88f2c <_fpadd_parts+0x1a8>
   89054:	001f883a 	mov	r15,zero
   89058:	0021883a 	mov	r16,zero
   8905c:	003f8306 	br	88e6c <_fpadd_parts+0xe8>
   89060:	018dc83a 	sub	r6,zero,r6
   89064:	003f6706 	br	88e04 <_fpadd_parts+0x80>
   89068:	00bfff84 	movi	r2,-2
   8906c:	117faf36 	bltu	r2,r5,88f2c <_fpadd_parts+0x1a8>
   89070:	003f9806 	br	88ed4 <_fpadd_parts+0x150>
   89074:	0005883a 	mov	r2,zero
   89078:	1189c83a 	sub	r4,r2,r6
   8907c:	1105803a 	cmpltu	r2,r2,r4
   89080:	01cbc83a 	sub	r5,zero,r7
   89084:	2885c83a 	sub	r2,r5,r2
   89088:	01800044 	movi	r6,1
   8908c:	a1800115 	stw	r6,4(r20)
   89090:	a5c00215 	stw	r23,8(r20)
   89094:	a1000315 	stw	r4,12(r20)
   89098:	a0800415 	stw	r2,16(r20)
   8909c:	003f8206 	br	88ea8 <_fpadd_parts+0x124>
   890a0:	203f7226 	beq	r4,zero,88e6c <_fpadd_parts+0xe8>
   890a4:	35bff804 	addi	r22,r6,-32
   890a8:	b9af883a 	add	r23,r23,r6
   890ac:	b0003116 	blt	r22,zero,89174 <_fpadd_parts+0x3f0>
   890b0:	959ad83a 	srl	r13,r18,r22
   890b4:	001d883a 	mov	r14,zero
   890b8:	000f883a 	mov	r7,zero
   890bc:	01000044 	movi	r4,1
   890c0:	0011883a 	mov	r8,zero
   890c4:	b0002516 	blt	r22,zero,8915c <_fpadd_parts+0x3d8>
   890c8:	2594983a 	sll	r10,r4,r22
   890cc:	0013883a 	mov	r9,zero
   890d0:	00bfffc4 	movi	r2,-1
   890d4:	4889883a 	add	r4,r9,r2
   890d8:	508b883a 	add	r5,r10,r2
   890dc:	224d803a 	cmpltu	r6,r4,r9
   890e0:	314b883a 	add	r5,r6,r5
   890e4:	8904703a 	and	r2,r17,r4
   890e8:	9146703a 	and	r3,r18,r5
   890ec:	10c4b03a 	or	r2,r2,r3
   890f0:	10000226 	beq	r2,zero,890fc <_fpadd_parts+0x378>
   890f4:	01c00044 	movi	r7,1
   890f8:	0011883a 	mov	r8,zero
   890fc:	69e2b03a 	or	r17,r13,r7
   89100:	7224b03a 	or	r18,r14,r8
   89104:	003f5906 	br	88e6c <_fpadd_parts+0xe8>
   89108:	8407883a 	add	r3,r16,r16
   8910c:	008007c4 	movi	r2,31
   89110:	1185c83a 	sub	r2,r2,r6
   89114:	1886983a 	sll	r3,r3,r2
   89118:	7996d83a 	srl	r11,r15,r6
   8911c:	8198d83a 	srl	r12,r16,r6
   89120:	1ad6b03a 	or	r11,r3,r11
   89124:	003f3e06 	br	88e20 <_fpadd_parts+0x9c>
   89128:	2006d07a 	srli	r3,r4,1
   8912c:	008007c4 	movi	r2,31
   89130:	1185c83a 	sub	r2,r2,r6
   89134:	1890d83a 	srl	r8,r3,r2
   89138:	218e983a 	sll	r7,r4,r6
   8913c:	003f3e06 	br	88e38 <_fpadd_parts+0xb4>
   89140:	113f821e 	bne	r2,r4,88f4c <_fpadd_parts+0x1c8>
   89144:	28c00117 	ldw	r3,4(r5)
   89148:	98800117 	ldw	r2,4(r19)
   8914c:	10ff7f26 	beq	r2,r3,88f4c <_fpadd_parts+0x1c8>
   89150:	04c00274 	movhi	r19,9
   89154:	9cf54e04 	addi	r19,r19,-10952
   89158:	003f7c06 	br	88f4c <_fpadd_parts+0x1c8>
   8915c:	2006d07a 	srli	r3,r4,1
   89160:	008007c4 	movi	r2,31
   89164:	1185c83a 	sub	r2,r2,r6
   89168:	1894d83a 	srl	r10,r3,r2
   8916c:	2192983a 	sll	r9,r4,r6
   89170:	003fd706 	br	890d0 <_fpadd_parts+0x34c>
   89174:	9487883a 	add	r3,r18,r18
   89178:	008007c4 	movi	r2,31
   8917c:	1185c83a 	sub	r2,r2,r6
   89180:	1886983a 	sll	r3,r3,r2
   89184:	899ad83a 	srl	r13,r17,r6
   89188:	919cd83a 	srl	r14,r18,r6
   8918c:	1b5ab03a 	or	r13,r3,r13
   89190:	003fc906 	br	890b8 <_fpadd_parts+0x334>

00089194 <__subdf3>:
   89194:	deffea04 	addi	sp,sp,-88
   89198:	dcc01415 	stw	r19,80(sp)
   8919c:	dcc00404 	addi	r19,sp,16
   891a0:	2011883a 	mov	r8,r4
   891a4:	2813883a 	mov	r9,r5
   891a8:	dc401315 	stw	r17,76(sp)
   891ac:	d809883a 	mov	r4,sp
   891b0:	980b883a 	mov	r5,r19
   891b4:	dc400904 	addi	r17,sp,36
   891b8:	dfc01515 	stw	ra,84(sp)
   891bc:	da400115 	stw	r9,4(sp)
   891c0:	d9c00315 	stw	r7,12(sp)
   891c4:	da000015 	stw	r8,0(sp)
   891c8:	d9800215 	stw	r6,8(sp)
   891cc:	008a4ec0 	call	8a4ec <__unpack_d>
   891d0:	d9000204 	addi	r4,sp,8
   891d4:	880b883a 	mov	r5,r17
   891d8:	008a4ec0 	call	8a4ec <__unpack_d>
   891dc:	d8800a17 	ldw	r2,40(sp)
   891e0:	880b883a 	mov	r5,r17
   891e4:	9809883a 	mov	r4,r19
   891e8:	d9800e04 	addi	r6,sp,56
   891ec:	1080005c 	xori	r2,r2,1
   891f0:	d8800a15 	stw	r2,40(sp)
   891f4:	0088d840 	call	88d84 <_fpadd_parts>
   891f8:	1009883a 	mov	r4,r2
   891fc:	008a1d80 	call	8a1d8 <__pack_d>
   89200:	dfc01517 	ldw	ra,84(sp)
   89204:	dcc01417 	ldw	r19,80(sp)
   89208:	dc401317 	ldw	r17,76(sp)
   8920c:	dec01604 	addi	sp,sp,88
   89210:	f800283a 	ret

00089214 <__adddf3>:
   89214:	deffea04 	addi	sp,sp,-88
   89218:	dcc01415 	stw	r19,80(sp)
   8921c:	dcc00404 	addi	r19,sp,16
   89220:	2011883a 	mov	r8,r4
   89224:	2813883a 	mov	r9,r5
   89228:	dc401315 	stw	r17,76(sp)
   8922c:	d809883a 	mov	r4,sp
   89230:	980b883a 	mov	r5,r19
   89234:	dc400904 	addi	r17,sp,36
   89238:	dfc01515 	stw	ra,84(sp)
   8923c:	da400115 	stw	r9,4(sp)
   89240:	d9c00315 	stw	r7,12(sp)
   89244:	da000015 	stw	r8,0(sp)
   89248:	d9800215 	stw	r6,8(sp)
   8924c:	008a4ec0 	call	8a4ec <__unpack_d>
   89250:	d9000204 	addi	r4,sp,8
   89254:	880b883a 	mov	r5,r17
   89258:	008a4ec0 	call	8a4ec <__unpack_d>
   8925c:	d9800e04 	addi	r6,sp,56
   89260:	9809883a 	mov	r4,r19
   89264:	880b883a 	mov	r5,r17
   89268:	0088d840 	call	88d84 <_fpadd_parts>
   8926c:	1009883a 	mov	r4,r2
   89270:	008a1d80 	call	8a1d8 <__pack_d>
   89274:	dfc01517 	ldw	ra,84(sp)
   89278:	dcc01417 	ldw	r19,80(sp)
   8927c:	dc401317 	ldw	r17,76(sp)
   89280:	dec01604 	addi	sp,sp,88
   89284:	f800283a 	ret

00089288 <__muldf3>:
   89288:	deffe004 	addi	sp,sp,-128
   8928c:	dc401815 	stw	r17,96(sp)
   89290:	dc400404 	addi	r17,sp,16
   89294:	2011883a 	mov	r8,r4
   89298:	2813883a 	mov	r9,r5
   8929c:	dc001715 	stw	r16,92(sp)
   892a0:	d809883a 	mov	r4,sp
   892a4:	880b883a 	mov	r5,r17
   892a8:	dc000904 	addi	r16,sp,36
   892ac:	dfc01f15 	stw	ra,124(sp)
   892b0:	da400115 	stw	r9,4(sp)
   892b4:	d9c00315 	stw	r7,12(sp)
   892b8:	da000015 	stw	r8,0(sp)
   892bc:	d9800215 	stw	r6,8(sp)
   892c0:	ddc01e15 	stw	r23,120(sp)
   892c4:	dd801d15 	stw	r22,116(sp)
   892c8:	dd401c15 	stw	r21,112(sp)
   892cc:	dd001b15 	stw	r20,108(sp)
   892d0:	dcc01a15 	stw	r19,104(sp)
   892d4:	dc801915 	stw	r18,100(sp)
   892d8:	008a4ec0 	call	8a4ec <__unpack_d>
   892dc:	d9000204 	addi	r4,sp,8
   892e0:	800b883a 	mov	r5,r16
   892e4:	008a4ec0 	call	8a4ec <__unpack_d>
   892e8:	d9000417 	ldw	r4,16(sp)
   892ec:	00800044 	movi	r2,1
   892f0:	1100102e 	bgeu	r2,r4,89334 <__muldf3+0xac>
   892f4:	d8c00917 	ldw	r3,36(sp)
   892f8:	10c0062e 	bgeu	r2,r3,89314 <__muldf3+0x8c>
   892fc:	00800104 	movi	r2,4
   89300:	20800a26 	beq	r4,r2,8932c <__muldf3+0xa4>
   89304:	1880cc26 	beq	r3,r2,89638 <__muldf3+0x3b0>
   89308:	00800084 	movi	r2,2
   8930c:	20800926 	beq	r4,r2,89334 <__muldf3+0xac>
   89310:	1880191e 	bne	r3,r2,89378 <__muldf3+0xf0>
   89314:	d8c00a17 	ldw	r3,40(sp)
   89318:	d8800517 	ldw	r2,20(sp)
   8931c:	8009883a 	mov	r4,r16
   89320:	10c4c03a 	cmpne	r2,r2,r3
   89324:	d8800a15 	stw	r2,40(sp)
   89328:	00000706 	br	89348 <__muldf3+0xc0>
   8932c:	00800084 	movi	r2,2
   89330:	1880c326 	beq	r3,r2,89640 <__muldf3+0x3b8>
   89334:	d8800517 	ldw	r2,20(sp)
   89338:	d8c00a17 	ldw	r3,40(sp)
   8933c:	8809883a 	mov	r4,r17
   89340:	10c4c03a 	cmpne	r2,r2,r3
   89344:	d8800515 	stw	r2,20(sp)
   89348:	008a1d80 	call	8a1d8 <__pack_d>
   8934c:	dfc01f17 	ldw	ra,124(sp)
   89350:	ddc01e17 	ldw	r23,120(sp)
   89354:	dd801d17 	ldw	r22,116(sp)
   89358:	dd401c17 	ldw	r21,112(sp)
   8935c:	dd001b17 	ldw	r20,108(sp)
   89360:	dcc01a17 	ldw	r19,104(sp)
   89364:	dc801917 	ldw	r18,100(sp)
   89368:	dc401817 	ldw	r17,96(sp)
   8936c:	dc001717 	ldw	r16,92(sp)
   89370:	dec02004 	addi	sp,sp,128
   89374:	f800283a 	ret
   89378:	dd800717 	ldw	r22,28(sp)
   8937c:	dc800c17 	ldw	r18,48(sp)
   89380:	002b883a 	mov	r21,zero
   89384:	0023883a 	mov	r17,zero
   89388:	a80b883a 	mov	r5,r21
   8938c:	b00d883a 	mov	r6,r22
   89390:	880f883a 	mov	r7,r17
   89394:	ddc00817 	ldw	r23,32(sp)
   89398:	dcc00d17 	ldw	r19,52(sp)
   8939c:	9009883a 	mov	r4,r18
   893a0:	008a0340 	call	8a034 <__muldi3>
   893a4:	001b883a 	mov	r13,zero
   893a8:	680f883a 	mov	r7,r13
   893ac:	b009883a 	mov	r4,r22
   893b0:	000b883a 	mov	r5,zero
   893b4:	980d883a 	mov	r6,r19
   893b8:	b82d883a 	mov	r22,r23
   893bc:	002f883a 	mov	r23,zero
   893c0:	db401615 	stw	r13,88(sp)
   893c4:	d8801315 	stw	r2,76(sp)
   893c8:	d8c01415 	stw	r3,80(sp)
   893cc:	dcc01515 	stw	r19,84(sp)
   893d0:	008a0340 	call	8a034 <__muldi3>
   893d4:	b00d883a 	mov	r6,r22
   893d8:	000b883a 	mov	r5,zero
   893dc:	9009883a 	mov	r4,r18
   893e0:	b80f883a 	mov	r7,r23
   893e4:	1021883a 	mov	r16,r2
   893e8:	1823883a 	mov	r17,r3
   893ec:	008a0340 	call	8a034 <__muldi3>
   893f0:	8085883a 	add	r2,r16,r2
   893f4:	140d803a 	cmpltu	r6,r2,r16
   893f8:	88c7883a 	add	r3,r17,r3
   893fc:	30cd883a 	add	r6,r6,r3
   89400:	1029883a 	mov	r20,r2
   89404:	302b883a 	mov	r21,r6
   89408:	da801317 	ldw	r10,76(sp)
   8940c:	dac01417 	ldw	r11,80(sp)
   89410:	db001517 	ldw	r12,84(sp)
   89414:	db401617 	ldw	r13,88(sp)
   89418:	3440612e 	bgeu	r6,r17,895a0 <__muldf3+0x318>
   8941c:	0009883a 	mov	r4,zero
   89420:	5105883a 	add	r2,r10,r4
   89424:	128d803a 	cmpltu	r6,r2,r10
   89428:	5d07883a 	add	r3,r11,r20
   8942c:	30cd883a 	add	r6,r6,r3
   89430:	0021883a 	mov	r16,zero
   89434:	04400044 	movi	r17,1
   89438:	1025883a 	mov	r18,r2
   8943c:	3027883a 	mov	r19,r6
   89440:	32c06236 	bltu	r6,r11,895cc <__muldf3+0x344>
   89444:	59807a26 	beq	r11,r6,89630 <__muldf3+0x3a8>
   89448:	680b883a 	mov	r5,r13
   8944c:	b80f883a 	mov	r7,r23
   89450:	6009883a 	mov	r4,r12
   89454:	b00d883a 	mov	r6,r22
   89458:	008a0340 	call	8a034 <__muldi3>
   8945c:	1009883a 	mov	r4,r2
   89460:	000f883a 	mov	r7,zero
   89464:	1545883a 	add	r2,r2,r21
   89468:	1111803a 	cmpltu	r8,r2,r4
   8946c:	19c7883a 	add	r3,r3,r7
   89470:	40c7883a 	add	r3,r8,r3
   89474:	88cb883a 	add	r5,r17,r3
   89478:	d8c00617 	ldw	r3,24(sp)
   8947c:	8089883a 	add	r4,r16,r2
   89480:	d8800b17 	ldw	r2,44(sp)
   89484:	18c00104 	addi	r3,r3,4
   89488:	240d803a 	cmpltu	r6,r4,r16
   8948c:	10c7883a 	add	r3,r2,r3
   89490:	2013883a 	mov	r9,r4
   89494:	d8800a17 	ldw	r2,40(sp)
   89498:	d9000517 	ldw	r4,20(sp)
   8949c:	314d883a 	add	r6,r6,r5
   894a0:	3015883a 	mov	r10,r6
   894a4:	2088c03a 	cmpne	r4,r4,r2
   894a8:	00880034 	movhi	r2,8192
   894ac:	10bfffc4 	addi	r2,r2,-1
   894b0:	d9000f15 	stw	r4,60(sp)
   894b4:	d8c01015 	stw	r3,64(sp)
   894b8:	1180162e 	bgeu	r2,r6,89514 <__muldf3+0x28c>
   894bc:	1811883a 	mov	r8,r3
   894c0:	101f883a 	mov	r15,r2
   894c4:	980497fa 	slli	r2,r19,31
   894c8:	9016d07a 	srli	r11,r18,1
   894cc:	500697fa 	slli	r3,r10,31
   894d0:	480cd07a 	srli	r6,r9,1
   894d4:	500ed07a 	srli	r7,r10,1
   894d8:	12d6b03a 	or	r11,r2,r11
   894dc:	00800044 	movi	r2,1
   894e0:	198cb03a 	or	r6,r3,r6
   894e4:	4888703a 	and	r4,r9,r2
   894e8:	9818d07a 	srli	r12,r19,1
   894ec:	001b883a 	mov	r13,zero
   894f0:	03a00034 	movhi	r14,32768
   894f4:	3013883a 	mov	r9,r6
   894f8:	3815883a 	mov	r10,r7
   894fc:	4091883a 	add	r8,r8,r2
   89500:	20000226 	beq	r4,zero,8950c <__muldf3+0x284>
   89504:	5b64b03a 	or	r18,r11,r13
   89508:	63a6b03a 	or	r19,r12,r14
   8950c:	7abfed36 	bltu	r15,r10,894c4 <__muldf3+0x23c>
   89510:	da001015 	stw	r8,64(sp)
   89514:	00840034 	movhi	r2,4096
   89518:	10bfffc4 	addi	r2,r2,-1
   8951c:	12801436 	bltu	r2,r10,89570 <__muldf3+0x2e8>
   89520:	da001017 	ldw	r8,64(sp)
   89524:	101f883a 	mov	r15,r2
   89528:	4a45883a 	add	r2,r9,r9
   8952c:	124d803a 	cmpltu	r6,r2,r9
   89530:	5287883a 	add	r3,r10,r10
   89534:	9497883a 	add	r11,r18,r18
   89538:	5c8f803a 	cmpltu	r7,r11,r18
   8953c:	9cd9883a 	add	r12,r19,r19
   89540:	01000044 	movi	r4,1
   89544:	30cd883a 	add	r6,r6,r3
   89548:	3b0f883a 	add	r7,r7,r12
   8954c:	423fffc4 	addi	r8,r8,-1
   89550:	1013883a 	mov	r9,r2
   89554:	3015883a 	mov	r10,r6
   89558:	111ab03a 	or	r13,r2,r4
   8955c:	98003016 	blt	r19,zero,89620 <__muldf3+0x398>
   89560:	5825883a 	mov	r18,r11
   89564:	3827883a 	mov	r19,r7
   89568:	7abfef2e 	bgeu	r15,r10,89528 <__muldf3+0x2a0>
   8956c:	da001015 	stw	r8,64(sp)
   89570:	00803fc4 	movi	r2,255
   89574:	488e703a 	and	r7,r9,r2
   89578:	00802004 	movi	r2,128
   8957c:	0007883a 	mov	r3,zero
   89580:	0011883a 	mov	r8,zero
   89584:	38801826 	beq	r7,r2,895e8 <__muldf3+0x360>
   89588:	008000c4 	movi	r2,3
   8958c:	d9000e04 	addi	r4,sp,56
   89590:	da801215 	stw	r10,72(sp)
   89594:	d8800e15 	stw	r2,56(sp)
   89598:	da401115 	stw	r9,68(sp)
   8959c:	003f6a06 	br	89348 <__muldf3+0xc0>
   895a0:	89802126 	beq	r17,r6,89628 <__muldf3+0x3a0>
   895a4:	0009883a 	mov	r4,zero
   895a8:	5105883a 	add	r2,r10,r4
   895ac:	128d803a 	cmpltu	r6,r2,r10
   895b0:	5d07883a 	add	r3,r11,r20
   895b4:	30cd883a 	add	r6,r6,r3
   895b8:	0021883a 	mov	r16,zero
   895bc:	0023883a 	mov	r17,zero
   895c0:	1025883a 	mov	r18,r2
   895c4:	3027883a 	mov	r19,r6
   895c8:	32ff9e2e 	bgeu	r6,r11,89444 <__muldf3+0x1bc>
   895cc:	00800044 	movi	r2,1
   895d0:	8089883a 	add	r4,r16,r2
   895d4:	240d803a 	cmpltu	r6,r4,r16
   895d8:	344d883a 	add	r6,r6,r17
   895dc:	2021883a 	mov	r16,r4
   895e0:	3023883a 	mov	r17,r6
   895e4:	003f9806 	br	89448 <__muldf3+0x1c0>
   895e8:	403fe71e 	bne	r8,zero,89588 <__muldf3+0x300>
   895ec:	01004004 	movi	r4,256
   895f0:	4904703a 	and	r2,r9,r4
   895f4:	10c4b03a 	or	r2,r2,r3
   895f8:	103fe31e 	bne	r2,zero,89588 <__muldf3+0x300>
   895fc:	94c4b03a 	or	r2,r18,r19
   89600:	103fe126 	beq	r2,zero,89588 <__muldf3+0x300>
   89604:	49c5883a 	add	r2,r9,r7
   89608:	1251803a 	cmpltu	r8,r2,r9
   8960c:	4291883a 	add	r8,r8,r10
   89610:	013fc004 	movi	r4,-256
   89614:	1112703a 	and	r9,r2,r4
   89618:	4015883a 	mov	r10,r8
   8961c:	003fda06 	br	89588 <__muldf3+0x300>
   89620:	6813883a 	mov	r9,r13
   89624:	003fce06 	br	89560 <__muldf3+0x2d8>
   89628:	143f7c36 	bltu	r2,r16,8941c <__muldf3+0x194>
   8962c:	003fdd06 	br	895a4 <__muldf3+0x31c>
   89630:	12bf852e 	bgeu	r2,r10,89448 <__muldf3+0x1c0>
   89634:	003fe506 	br	895cc <__muldf3+0x344>
   89638:	00800084 	movi	r2,2
   8963c:	20bf351e 	bne	r4,r2,89314 <__muldf3+0x8c>
   89640:	01000274 	movhi	r4,9
   89644:	21354e04 	addi	r4,r4,-10952
   89648:	003f3f06 	br	89348 <__muldf3+0xc0>

0008964c <__divdf3>:
   8964c:	deffed04 	addi	sp,sp,-76
   89650:	dcc01115 	stw	r19,68(sp)
   89654:	dcc00404 	addi	r19,sp,16
   89658:	2011883a 	mov	r8,r4
   8965c:	2813883a 	mov	r9,r5
   89660:	dc000e15 	stw	r16,56(sp)
   89664:	d809883a 	mov	r4,sp
   89668:	980b883a 	mov	r5,r19
   8966c:	dc000904 	addi	r16,sp,36
   89670:	dfc01215 	stw	ra,72(sp)
   89674:	da400115 	stw	r9,4(sp)
   89678:	d9c00315 	stw	r7,12(sp)
   8967c:	da000015 	stw	r8,0(sp)
   89680:	d9800215 	stw	r6,8(sp)
   89684:	dc801015 	stw	r18,64(sp)
   89688:	dc400f15 	stw	r17,60(sp)
   8968c:	008a4ec0 	call	8a4ec <__unpack_d>
   89690:	d9000204 	addi	r4,sp,8
   89694:	800b883a 	mov	r5,r16
   89698:	008a4ec0 	call	8a4ec <__unpack_d>
   8969c:	d9000417 	ldw	r4,16(sp)
   896a0:	00800044 	movi	r2,1
   896a4:	11000b2e 	bgeu	r2,r4,896d4 <__divdf3+0x88>
   896a8:	d9400917 	ldw	r5,36(sp)
   896ac:	1140762e 	bgeu	r2,r5,89888 <__divdf3+0x23c>
   896b0:	d8800517 	ldw	r2,20(sp)
   896b4:	d8c00a17 	ldw	r3,40(sp)
   896b8:	01800104 	movi	r6,4
   896bc:	10c4f03a 	xor	r2,r2,r3
   896c0:	d8800515 	stw	r2,20(sp)
   896c4:	21800226 	beq	r4,r6,896d0 <__divdf3+0x84>
   896c8:	00800084 	movi	r2,2
   896cc:	2080141e 	bne	r4,r2,89720 <__divdf3+0xd4>
   896d0:	29000926 	beq	r5,r4,896f8 <__divdf3+0xac>
   896d4:	9809883a 	mov	r4,r19
   896d8:	008a1d80 	call	8a1d8 <__pack_d>
   896dc:	dfc01217 	ldw	ra,72(sp)
   896e0:	dcc01117 	ldw	r19,68(sp)
   896e4:	dc801017 	ldw	r18,64(sp)
   896e8:	dc400f17 	ldw	r17,60(sp)
   896ec:	dc000e17 	ldw	r16,56(sp)
   896f0:	dec01304 	addi	sp,sp,76
   896f4:	f800283a 	ret
   896f8:	01000274 	movhi	r4,9
   896fc:	21354e04 	addi	r4,r4,-10952
   89700:	008a1d80 	call	8a1d8 <__pack_d>
   89704:	dfc01217 	ldw	ra,72(sp)
   89708:	dcc01117 	ldw	r19,68(sp)
   8970c:	dc801017 	ldw	r18,64(sp)
   89710:	dc400f17 	ldw	r17,60(sp)
   89714:	dc000e17 	ldw	r16,56(sp)
   89718:	dec01304 	addi	sp,sp,76
   8971c:	f800283a 	ret
   89720:	29805b26 	beq	r5,r6,89890 <__divdf3+0x244>
   89724:	28802d26 	beq	r5,r2,897dc <__divdf3+0x190>
   89728:	d8c00617 	ldw	r3,24(sp)
   8972c:	d8800b17 	ldw	r2,44(sp)
   89730:	d9c00817 	ldw	r7,32(sp)
   89734:	dc400d17 	ldw	r17,52(sp)
   89738:	188bc83a 	sub	r5,r3,r2
   8973c:	d9800717 	ldw	r6,28(sp)
   89740:	dc000c17 	ldw	r16,48(sp)
   89744:	d9400615 	stw	r5,24(sp)
   89748:	3c403836 	bltu	r7,r17,8982c <__divdf3+0x1e0>
   8974c:	89c03626 	beq	r17,r7,89828 <__divdf3+0x1dc>
   89750:	0015883a 	mov	r10,zero
   89754:	001d883a 	mov	r14,zero
   89758:	02c40034 	movhi	r11,4096
   8975c:	001f883a 	mov	r15,zero
   89760:	003f883a 	mov	ra,zero
   89764:	04800f44 	movi	r18,61
   89768:	00000f06 	br	897a8 <__divdf3+0x15c>
   8976c:	601d883a 	mov	r14,r12
   89770:	681f883a 	mov	r15,r13
   89774:	400d883a 	mov	r6,r8
   89778:	100f883a 	mov	r7,r2
   8977c:	3191883a 	add	r8,r6,r6
   89780:	5808d07a 	srli	r4,r11,1
   89784:	4185803a 	cmpltu	r2,r8,r6
   89788:	39d3883a 	add	r9,r7,r7
   8978c:	28c6b03a 	or	r3,r5,r3
   89790:	1245883a 	add	r2,r2,r9
   89794:	1815883a 	mov	r10,r3
   89798:	2017883a 	mov	r11,r4
   8979c:	400d883a 	mov	r6,r8
   897a0:	100f883a 	mov	r7,r2
   897a4:	fc801726 	beq	ra,r18,89804 <__divdf3+0x1b8>
   897a8:	580a97fa 	slli	r5,r11,31
   897ac:	5006d07a 	srli	r3,r10,1
   897b0:	ffc00044 	addi	ra,ra,1
   897b4:	3c7ff136 	bltu	r7,r17,8977c <__divdf3+0x130>
   897b8:	3411c83a 	sub	r8,r6,r16
   897bc:	3205803a 	cmpltu	r2,r6,r8
   897c0:	3c53c83a 	sub	r9,r7,r17
   897c4:	7298b03a 	or	r12,r14,r10
   897c8:	7adab03a 	or	r13,r15,r11
   897cc:	4885c83a 	sub	r2,r9,r2
   897d0:	89ffe61e 	bne	r17,r7,8976c <__divdf3+0x120>
   897d4:	343fe936 	bltu	r6,r16,8977c <__divdf3+0x130>
   897d8:	003fe406 	br	8976c <__divdf3+0x120>
   897dc:	9809883a 	mov	r4,r19
   897e0:	d9800415 	stw	r6,16(sp)
   897e4:	008a1d80 	call	8a1d8 <__pack_d>
   897e8:	dfc01217 	ldw	ra,72(sp)
   897ec:	dcc01117 	ldw	r19,68(sp)
   897f0:	dc801017 	ldw	r18,64(sp)
   897f4:	dc400f17 	ldw	r17,60(sp)
   897f8:	dc000e17 	ldw	r16,56(sp)
   897fc:	dec01304 	addi	sp,sp,76
   89800:	f800283a 	ret
   89804:	00803fc4 	movi	r2,255
   89808:	7090703a 	and	r8,r14,r2
   8980c:	00802004 	movi	r2,128
   89810:	0007883a 	mov	r3,zero
   89814:	0013883a 	mov	r9,zero
   89818:	40800d26 	beq	r8,r2,89850 <__divdf3+0x204>
   8981c:	dbc00815 	stw	r15,32(sp)
   89820:	db800715 	stw	r14,28(sp)
   89824:	003fab06 	br	896d4 <__divdf3+0x88>
   89828:	343fc92e 	bgeu	r6,r16,89750 <__divdf3+0x104>
   8982c:	3185883a 	add	r2,r6,r6
   89830:	1189803a 	cmpltu	r4,r2,r6
   89834:	39c7883a 	add	r3,r7,r7
   89838:	20c9883a 	add	r4,r4,r3
   8983c:	297fffc4 	addi	r5,r5,-1
   89840:	100d883a 	mov	r6,r2
   89844:	200f883a 	mov	r7,r4
   89848:	d9400615 	stw	r5,24(sp)
   8984c:	003fc006 	br	89750 <__divdf3+0x104>
   89850:	483ff21e 	bne	r9,zero,8981c <__divdf3+0x1d0>
   89854:	01004004 	movi	r4,256
   89858:	7104703a 	and	r2,r14,r4
   8985c:	10c4b03a 	or	r2,r2,r3
   89860:	103fee1e 	bne	r2,zero,8981c <__divdf3+0x1d0>
   89864:	31c4b03a 	or	r2,r6,r7
   89868:	103fec26 	beq	r2,zero,8981c <__divdf3+0x1d0>
   8986c:	7205883a 	add	r2,r14,r8
   89870:	1391803a 	cmpltu	r8,r2,r14
   89874:	43d1883a 	add	r8,r8,r15
   89878:	013fc004 	movi	r4,-256
   8987c:	111c703a 	and	r14,r2,r4
   89880:	401f883a 	mov	r15,r8
   89884:	003fe506 	br	8981c <__divdf3+0x1d0>
   89888:	8009883a 	mov	r4,r16
   8988c:	003f9206 	br	896d8 <__divdf3+0x8c>
   89890:	9809883a 	mov	r4,r19
   89894:	d8000715 	stw	zero,28(sp)
   89898:	d8000815 	stw	zero,32(sp)
   8989c:	d8000615 	stw	zero,24(sp)
   898a0:	003f8d06 	br	896d8 <__divdf3+0x8c>

000898a4 <__eqdf2>:
   898a4:	deffef04 	addi	sp,sp,-68
   898a8:	dc400f15 	stw	r17,60(sp)
   898ac:	dc400404 	addi	r17,sp,16
   898b0:	2005883a 	mov	r2,r4
   898b4:	2807883a 	mov	r3,r5
   898b8:	dc000e15 	stw	r16,56(sp)
   898bc:	d809883a 	mov	r4,sp
   898c0:	880b883a 	mov	r5,r17
   898c4:	dc000904 	addi	r16,sp,36
   898c8:	d8c00115 	stw	r3,4(sp)
   898cc:	d8800015 	stw	r2,0(sp)
   898d0:	d9800215 	stw	r6,8(sp)
   898d4:	dfc01015 	stw	ra,64(sp)
   898d8:	d9c00315 	stw	r7,12(sp)
   898dc:	008a4ec0 	call	8a4ec <__unpack_d>
   898e0:	d9000204 	addi	r4,sp,8
   898e4:	800b883a 	mov	r5,r16
   898e8:	008a4ec0 	call	8a4ec <__unpack_d>
   898ec:	d8800417 	ldw	r2,16(sp)
   898f0:	00c00044 	movi	r3,1
   898f4:	180d883a 	mov	r6,r3
   898f8:	1880062e 	bgeu	r3,r2,89914 <__eqdf2+0x70>
   898fc:	d8800917 	ldw	r2,36(sp)
   89900:	8809883a 	mov	r4,r17
   89904:	800b883a 	mov	r5,r16
   89908:	1880022e 	bgeu	r3,r2,89914 <__eqdf2+0x70>
   8990c:	008a6240 	call	8a624 <__fpcmp_parts_d>
   89910:	100d883a 	mov	r6,r2
   89914:	3005883a 	mov	r2,r6
   89918:	dfc01017 	ldw	ra,64(sp)
   8991c:	dc400f17 	ldw	r17,60(sp)
   89920:	dc000e17 	ldw	r16,56(sp)
   89924:	dec01104 	addi	sp,sp,68
   89928:	f800283a 	ret

0008992c <__nedf2>:
   8992c:	deffef04 	addi	sp,sp,-68
   89930:	dc400f15 	stw	r17,60(sp)
   89934:	dc400404 	addi	r17,sp,16
   89938:	2005883a 	mov	r2,r4
   8993c:	2807883a 	mov	r3,r5
   89940:	dc000e15 	stw	r16,56(sp)
   89944:	d809883a 	mov	r4,sp
   89948:	880b883a 	mov	r5,r17
   8994c:	dc000904 	addi	r16,sp,36
   89950:	d8c00115 	stw	r3,4(sp)
   89954:	d8800015 	stw	r2,0(sp)
   89958:	d9800215 	stw	r6,8(sp)
   8995c:	dfc01015 	stw	ra,64(sp)
   89960:	d9c00315 	stw	r7,12(sp)
   89964:	008a4ec0 	call	8a4ec <__unpack_d>
   89968:	d9000204 	addi	r4,sp,8
   8996c:	800b883a 	mov	r5,r16
   89970:	008a4ec0 	call	8a4ec <__unpack_d>
   89974:	d8800417 	ldw	r2,16(sp)
   89978:	00c00044 	movi	r3,1
   8997c:	180d883a 	mov	r6,r3
   89980:	1880062e 	bgeu	r3,r2,8999c <__nedf2+0x70>
   89984:	d8800917 	ldw	r2,36(sp)
   89988:	8809883a 	mov	r4,r17
   8998c:	800b883a 	mov	r5,r16
   89990:	1880022e 	bgeu	r3,r2,8999c <__nedf2+0x70>
   89994:	008a6240 	call	8a624 <__fpcmp_parts_d>
   89998:	100d883a 	mov	r6,r2
   8999c:	3005883a 	mov	r2,r6
   899a0:	dfc01017 	ldw	ra,64(sp)
   899a4:	dc400f17 	ldw	r17,60(sp)
   899a8:	dc000e17 	ldw	r16,56(sp)
   899ac:	dec01104 	addi	sp,sp,68
   899b0:	f800283a 	ret

000899b4 <__gtdf2>:
   899b4:	deffef04 	addi	sp,sp,-68
   899b8:	dc400f15 	stw	r17,60(sp)
   899bc:	dc400404 	addi	r17,sp,16
   899c0:	2005883a 	mov	r2,r4
   899c4:	2807883a 	mov	r3,r5
   899c8:	dc000e15 	stw	r16,56(sp)
   899cc:	d809883a 	mov	r4,sp
   899d0:	880b883a 	mov	r5,r17
   899d4:	dc000904 	addi	r16,sp,36
   899d8:	d8c00115 	stw	r3,4(sp)
   899dc:	d8800015 	stw	r2,0(sp)
   899e0:	d9800215 	stw	r6,8(sp)
   899e4:	dfc01015 	stw	ra,64(sp)
   899e8:	d9c00315 	stw	r7,12(sp)
   899ec:	008a4ec0 	call	8a4ec <__unpack_d>
   899f0:	d9000204 	addi	r4,sp,8
   899f4:	800b883a 	mov	r5,r16
   899f8:	008a4ec0 	call	8a4ec <__unpack_d>
   899fc:	d8800417 	ldw	r2,16(sp)
   89a00:	00c00044 	movi	r3,1
   89a04:	01bfffc4 	movi	r6,-1
   89a08:	1880062e 	bgeu	r3,r2,89a24 <__gtdf2+0x70>
   89a0c:	d8800917 	ldw	r2,36(sp)
   89a10:	8809883a 	mov	r4,r17
   89a14:	800b883a 	mov	r5,r16
   89a18:	1880022e 	bgeu	r3,r2,89a24 <__gtdf2+0x70>
   89a1c:	008a6240 	call	8a624 <__fpcmp_parts_d>
   89a20:	100d883a 	mov	r6,r2
   89a24:	3005883a 	mov	r2,r6
   89a28:	dfc01017 	ldw	ra,64(sp)
   89a2c:	dc400f17 	ldw	r17,60(sp)
   89a30:	dc000e17 	ldw	r16,56(sp)
   89a34:	dec01104 	addi	sp,sp,68
   89a38:	f800283a 	ret

00089a3c <__gedf2>:
   89a3c:	deffef04 	addi	sp,sp,-68
   89a40:	dc400f15 	stw	r17,60(sp)
   89a44:	dc400404 	addi	r17,sp,16
   89a48:	2005883a 	mov	r2,r4
   89a4c:	2807883a 	mov	r3,r5
   89a50:	dc000e15 	stw	r16,56(sp)
   89a54:	d809883a 	mov	r4,sp
   89a58:	880b883a 	mov	r5,r17
   89a5c:	dc000904 	addi	r16,sp,36
   89a60:	d8c00115 	stw	r3,4(sp)
   89a64:	d8800015 	stw	r2,0(sp)
   89a68:	d9800215 	stw	r6,8(sp)
   89a6c:	dfc01015 	stw	ra,64(sp)
   89a70:	d9c00315 	stw	r7,12(sp)
   89a74:	008a4ec0 	call	8a4ec <__unpack_d>
   89a78:	d9000204 	addi	r4,sp,8
   89a7c:	800b883a 	mov	r5,r16
   89a80:	008a4ec0 	call	8a4ec <__unpack_d>
   89a84:	d8800417 	ldw	r2,16(sp)
   89a88:	00c00044 	movi	r3,1
   89a8c:	01bfffc4 	movi	r6,-1
   89a90:	1880062e 	bgeu	r3,r2,89aac <__gedf2+0x70>
   89a94:	d8800917 	ldw	r2,36(sp)
   89a98:	8809883a 	mov	r4,r17
   89a9c:	800b883a 	mov	r5,r16
   89aa0:	1880022e 	bgeu	r3,r2,89aac <__gedf2+0x70>
   89aa4:	008a6240 	call	8a624 <__fpcmp_parts_d>
   89aa8:	100d883a 	mov	r6,r2
   89aac:	3005883a 	mov	r2,r6
   89ab0:	dfc01017 	ldw	ra,64(sp)
   89ab4:	dc400f17 	ldw	r17,60(sp)
   89ab8:	dc000e17 	ldw	r16,56(sp)
   89abc:	dec01104 	addi	sp,sp,68
   89ac0:	f800283a 	ret

00089ac4 <__ltdf2>:
   89ac4:	deffef04 	addi	sp,sp,-68
   89ac8:	dc400f15 	stw	r17,60(sp)
   89acc:	dc400404 	addi	r17,sp,16
   89ad0:	2005883a 	mov	r2,r4
   89ad4:	2807883a 	mov	r3,r5
   89ad8:	dc000e15 	stw	r16,56(sp)
   89adc:	d809883a 	mov	r4,sp
   89ae0:	880b883a 	mov	r5,r17
   89ae4:	dc000904 	addi	r16,sp,36
   89ae8:	d8c00115 	stw	r3,4(sp)
   89aec:	d8800015 	stw	r2,0(sp)
   89af0:	d9800215 	stw	r6,8(sp)
   89af4:	dfc01015 	stw	ra,64(sp)
   89af8:	d9c00315 	stw	r7,12(sp)
   89afc:	008a4ec0 	call	8a4ec <__unpack_d>
   89b00:	d9000204 	addi	r4,sp,8
   89b04:	800b883a 	mov	r5,r16
   89b08:	008a4ec0 	call	8a4ec <__unpack_d>
   89b0c:	d8800417 	ldw	r2,16(sp)
   89b10:	00c00044 	movi	r3,1
   89b14:	180d883a 	mov	r6,r3
   89b18:	1880062e 	bgeu	r3,r2,89b34 <__ltdf2+0x70>
   89b1c:	d8800917 	ldw	r2,36(sp)
   89b20:	8809883a 	mov	r4,r17
   89b24:	800b883a 	mov	r5,r16
   89b28:	1880022e 	bgeu	r3,r2,89b34 <__ltdf2+0x70>
   89b2c:	008a6240 	call	8a624 <__fpcmp_parts_d>
   89b30:	100d883a 	mov	r6,r2
   89b34:	3005883a 	mov	r2,r6
   89b38:	dfc01017 	ldw	ra,64(sp)
   89b3c:	dc400f17 	ldw	r17,60(sp)
   89b40:	dc000e17 	ldw	r16,56(sp)
   89b44:	dec01104 	addi	sp,sp,68
   89b48:	f800283a 	ret

00089b4c <__floatsidf>:
   89b4c:	2006d7fa 	srli	r3,r4,31
   89b50:	defff604 	addi	sp,sp,-40
   89b54:	008000c4 	movi	r2,3
   89b58:	dfc00915 	stw	ra,36(sp)
   89b5c:	dcc00815 	stw	r19,32(sp)
   89b60:	dc800715 	stw	r18,28(sp)
   89b64:	dc400615 	stw	r17,24(sp)
   89b68:	dc000515 	stw	r16,20(sp)
   89b6c:	d8800015 	stw	r2,0(sp)
   89b70:	d8c00115 	stw	r3,4(sp)
   89b74:	20000f1e 	bne	r4,zero,89bb4 <__floatsidf+0x68>
   89b78:	00800084 	movi	r2,2
   89b7c:	d8800015 	stw	r2,0(sp)
   89b80:	d809883a 	mov	r4,sp
   89b84:	008a1d80 	call	8a1d8 <__pack_d>
   89b88:	1009883a 	mov	r4,r2
   89b8c:	180b883a 	mov	r5,r3
   89b90:	2005883a 	mov	r2,r4
   89b94:	2807883a 	mov	r3,r5
   89b98:	dfc00917 	ldw	ra,36(sp)
   89b9c:	dcc00817 	ldw	r19,32(sp)
   89ba0:	dc800717 	ldw	r18,28(sp)
   89ba4:	dc400617 	ldw	r17,24(sp)
   89ba8:	dc000517 	ldw	r16,20(sp)
   89bac:	dec00a04 	addi	sp,sp,40
   89bb0:	f800283a 	ret
   89bb4:	00800f04 	movi	r2,60
   89bb8:	1807003a 	cmpeq	r3,r3,zero
   89bbc:	d8800215 	stw	r2,8(sp)
   89bc0:	18001126 	beq	r3,zero,89c08 <__floatsidf+0xbc>
   89bc4:	0027883a 	mov	r19,zero
   89bc8:	2025883a 	mov	r18,r4
   89bcc:	d9000315 	stw	r4,12(sp)
   89bd0:	dcc00415 	stw	r19,16(sp)
   89bd4:	008a1580 	call	8a158 <__clzsi2>
   89bd8:	11000744 	addi	r4,r2,29
   89bdc:	013fe80e 	bge	zero,r4,89b80 <__floatsidf+0x34>
   89be0:	10bfff44 	addi	r2,r2,-3
   89be4:	10000c16 	blt	r2,zero,89c18 <__floatsidf+0xcc>
   89be8:	90a2983a 	sll	r17,r18,r2
   89bec:	0021883a 	mov	r16,zero
   89bf0:	d8800217 	ldw	r2,8(sp)
   89bf4:	dc400415 	stw	r17,16(sp)
   89bf8:	dc000315 	stw	r16,12(sp)
   89bfc:	1105c83a 	sub	r2,r2,r4
   89c00:	d8800215 	stw	r2,8(sp)
   89c04:	003fde06 	br	89b80 <__floatsidf+0x34>
   89c08:	00a00034 	movhi	r2,32768
   89c0c:	20800a26 	beq	r4,r2,89c38 <__floatsidf+0xec>
   89c10:	0109c83a 	sub	r4,zero,r4
   89c14:	003feb06 	br	89bc4 <__floatsidf+0x78>
   89c18:	9006d07a 	srli	r3,r18,1
   89c1c:	008007c4 	movi	r2,31
   89c20:	1105c83a 	sub	r2,r2,r4
   89c24:	1886d83a 	srl	r3,r3,r2
   89c28:	9922983a 	sll	r17,r19,r4
   89c2c:	9120983a 	sll	r16,r18,r4
   89c30:	1c62b03a 	or	r17,r3,r17
   89c34:	003fee06 	br	89bf0 <__floatsidf+0xa4>
   89c38:	0009883a 	mov	r4,zero
   89c3c:	01707834 	movhi	r5,49632
   89c40:	003fd306 	br	89b90 <__floatsidf+0x44>

00089c44 <__fixdfsi>:
   89c44:	defff804 	addi	sp,sp,-32
   89c48:	2005883a 	mov	r2,r4
   89c4c:	2807883a 	mov	r3,r5
   89c50:	d809883a 	mov	r4,sp
   89c54:	d9400204 	addi	r5,sp,8
   89c58:	d8c00115 	stw	r3,4(sp)
   89c5c:	d8800015 	stw	r2,0(sp)
   89c60:	dfc00715 	stw	ra,28(sp)
   89c64:	008a4ec0 	call	8a4ec <__unpack_d>
   89c68:	d8c00217 	ldw	r3,8(sp)
   89c6c:	00800084 	movi	r2,2
   89c70:	1880051e 	bne	r3,r2,89c88 <__fixdfsi+0x44>
   89c74:	0007883a 	mov	r3,zero
   89c78:	1805883a 	mov	r2,r3
   89c7c:	dfc00717 	ldw	ra,28(sp)
   89c80:	dec00804 	addi	sp,sp,32
   89c84:	f800283a 	ret
   89c88:	00800044 	movi	r2,1
   89c8c:	10fff92e 	bgeu	r2,r3,89c74 <__fixdfsi+0x30>
   89c90:	00800104 	movi	r2,4
   89c94:	18800426 	beq	r3,r2,89ca8 <__fixdfsi+0x64>
   89c98:	d8c00417 	ldw	r3,16(sp)
   89c9c:	183ff516 	blt	r3,zero,89c74 <__fixdfsi+0x30>
   89ca0:	00800784 	movi	r2,30
   89ca4:	10c0080e 	bge	r2,r3,89cc8 <__fixdfsi+0x84>
   89ca8:	d8800317 	ldw	r2,12(sp)
   89cac:	1000121e 	bne	r2,zero,89cf8 <__fixdfsi+0xb4>
   89cb0:	00e00034 	movhi	r3,32768
   89cb4:	18ffffc4 	addi	r3,r3,-1
   89cb8:	1805883a 	mov	r2,r3
   89cbc:	dfc00717 	ldw	ra,28(sp)
   89cc0:	dec00804 	addi	sp,sp,32
   89cc4:	f800283a 	ret
   89cc8:	00800f04 	movi	r2,60
   89ccc:	10d1c83a 	sub	r8,r2,r3
   89cd0:	40bff804 	addi	r2,r8,-32
   89cd4:	d9800517 	ldw	r6,20(sp)
   89cd8:	d9c00617 	ldw	r7,24(sp)
   89cdc:	10000816 	blt	r2,zero,89d00 <__fixdfsi+0xbc>
   89ce0:	3888d83a 	srl	r4,r7,r2
   89ce4:	d8800317 	ldw	r2,12(sp)
   89ce8:	2007883a 	mov	r3,r4
   89cec:	103fe226 	beq	r2,zero,89c78 <__fixdfsi+0x34>
   89cf0:	0107c83a 	sub	r3,zero,r4
   89cf4:	003fe006 	br	89c78 <__fixdfsi+0x34>
   89cf8:	00e00034 	movhi	r3,32768
   89cfc:	003fde06 	br	89c78 <__fixdfsi+0x34>
   89d00:	39c7883a 	add	r3,r7,r7
   89d04:	008007c4 	movi	r2,31
   89d08:	1205c83a 	sub	r2,r2,r8
   89d0c:	1886983a 	sll	r3,r3,r2
   89d10:	3208d83a 	srl	r4,r6,r8
   89d14:	1908b03a 	or	r4,r3,r4
   89d18:	003ff206 	br	89ce4 <__fixdfsi+0xa0>

00089d1c <__floatunsidf>:
   89d1c:	defff204 	addi	sp,sp,-56
   89d20:	dfc00d15 	stw	ra,52(sp)
   89d24:	ddc00c15 	stw	r23,48(sp)
   89d28:	dd800b15 	stw	r22,44(sp)
   89d2c:	dd400a15 	stw	r21,40(sp)
   89d30:	dd000915 	stw	r20,36(sp)
   89d34:	dcc00815 	stw	r19,32(sp)
   89d38:	dc800715 	stw	r18,28(sp)
   89d3c:	dc400615 	stw	r17,24(sp)
   89d40:	dc000515 	stw	r16,20(sp)
   89d44:	d8000115 	stw	zero,4(sp)
   89d48:	20000f1e 	bne	r4,zero,89d88 <__floatunsidf+0x6c>
   89d4c:	00800084 	movi	r2,2
   89d50:	d8800015 	stw	r2,0(sp)
   89d54:	d809883a 	mov	r4,sp
   89d58:	008a1d80 	call	8a1d8 <__pack_d>
   89d5c:	dfc00d17 	ldw	ra,52(sp)
   89d60:	ddc00c17 	ldw	r23,48(sp)
   89d64:	dd800b17 	ldw	r22,44(sp)
   89d68:	dd400a17 	ldw	r21,40(sp)
   89d6c:	dd000917 	ldw	r20,36(sp)
   89d70:	dcc00817 	ldw	r19,32(sp)
   89d74:	dc800717 	ldw	r18,28(sp)
   89d78:	dc400617 	ldw	r17,24(sp)
   89d7c:	dc000517 	ldw	r16,20(sp)
   89d80:	dec00e04 	addi	sp,sp,56
   89d84:	f800283a 	ret
   89d88:	008000c4 	movi	r2,3
   89d8c:	00c00f04 	movi	r3,60
   89d90:	002f883a 	mov	r23,zero
   89d94:	202d883a 	mov	r22,r4
   89d98:	d8800015 	stw	r2,0(sp)
   89d9c:	d8c00215 	stw	r3,8(sp)
   89da0:	d9000315 	stw	r4,12(sp)
   89da4:	ddc00415 	stw	r23,16(sp)
   89da8:	008a1580 	call	8a158 <__clzsi2>
   89dac:	12400744 	addi	r9,r2,29
   89db0:	48000b16 	blt	r9,zero,89de0 <__floatunsidf+0xc4>
   89db4:	483fe726 	beq	r9,zero,89d54 <__floatunsidf+0x38>
   89db8:	10bfff44 	addi	r2,r2,-3
   89dbc:	10002e16 	blt	r2,zero,89e78 <__floatunsidf+0x15c>
   89dc0:	b0a2983a 	sll	r17,r22,r2
   89dc4:	0021883a 	mov	r16,zero
   89dc8:	d8800217 	ldw	r2,8(sp)
   89dcc:	dc400415 	stw	r17,16(sp)
   89dd0:	dc000315 	stw	r16,12(sp)
   89dd4:	1245c83a 	sub	r2,r2,r9
   89dd8:	d8800215 	stw	r2,8(sp)
   89ddc:	003fdd06 	br	89d54 <__floatunsidf+0x38>
   89de0:	0255c83a 	sub	r10,zero,r9
   89de4:	51bff804 	addi	r6,r10,-32
   89de8:	30001b16 	blt	r6,zero,89e58 <__floatunsidf+0x13c>
   89dec:	b9a8d83a 	srl	r20,r23,r6
   89df0:	002b883a 	mov	r21,zero
   89df4:	000f883a 	mov	r7,zero
   89df8:	01000044 	movi	r4,1
   89dfc:	0011883a 	mov	r8,zero
   89e00:	30002516 	blt	r6,zero,89e98 <__floatunsidf+0x17c>
   89e04:	21a6983a 	sll	r19,r4,r6
   89e08:	0025883a 	mov	r18,zero
   89e0c:	00bfffc4 	movi	r2,-1
   89e10:	9089883a 	add	r4,r18,r2
   89e14:	988b883a 	add	r5,r19,r2
   89e18:	248d803a 	cmpltu	r6,r4,r18
   89e1c:	314b883a 	add	r5,r6,r5
   89e20:	b104703a 	and	r2,r22,r4
   89e24:	b946703a 	and	r3,r23,r5
   89e28:	10c4b03a 	or	r2,r2,r3
   89e2c:	10000226 	beq	r2,zero,89e38 <__floatunsidf+0x11c>
   89e30:	01c00044 	movi	r7,1
   89e34:	0011883a 	mov	r8,zero
   89e38:	d9000217 	ldw	r4,8(sp)
   89e3c:	a1c4b03a 	or	r2,r20,r7
   89e40:	aa06b03a 	or	r3,r21,r8
   89e44:	2249c83a 	sub	r4,r4,r9
   89e48:	d8c00415 	stw	r3,16(sp)
   89e4c:	d9000215 	stw	r4,8(sp)
   89e50:	d8800315 	stw	r2,12(sp)
   89e54:	003fbf06 	br	89d54 <__floatunsidf+0x38>
   89e58:	bdc7883a 	add	r3,r23,r23
   89e5c:	008007c4 	movi	r2,31
   89e60:	1285c83a 	sub	r2,r2,r10
   89e64:	1886983a 	sll	r3,r3,r2
   89e68:	b2a8d83a 	srl	r20,r22,r10
   89e6c:	baaad83a 	srl	r21,r23,r10
   89e70:	1d28b03a 	or	r20,r3,r20
   89e74:	003fdf06 	br	89df4 <__floatunsidf+0xd8>
   89e78:	b006d07a 	srli	r3,r22,1
   89e7c:	008007c4 	movi	r2,31
   89e80:	1245c83a 	sub	r2,r2,r9
   89e84:	1886d83a 	srl	r3,r3,r2
   89e88:	ba62983a 	sll	r17,r23,r9
   89e8c:	b260983a 	sll	r16,r22,r9
   89e90:	1c62b03a 	or	r17,r3,r17
   89e94:	003fcc06 	br	89dc8 <__floatunsidf+0xac>
   89e98:	2006d07a 	srli	r3,r4,1
   89e9c:	008007c4 	movi	r2,31
   89ea0:	1285c83a 	sub	r2,r2,r10
   89ea4:	18a6d83a 	srl	r19,r3,r2
   89ea8:	22a4983a 	sll	r18,r4,r10
   89eac:	003fd706 	br	89e0c <__floatunsidf+0xf0>

00089eb0 <udivmodsi4>:
   89eb0:	29001b2e 	bgeu	r5,r4,89f20 <udivmodsi4+0x70>
   89eb4:	28001a16 	blt	r5,zero,89f20 <udivmodsi4+0x70>
   89eb8:	00800044 	movi	r2,1
   89ebc:	0007883a 	mov	r3,zero
   89ec0:	01c007c4 	movi	r7,31
   89ec4:	00000306 	br	89ed4 <udivmodsi4+0x24>
   89ec8:	19c01326 	beq	r3,r7,89f18 <udivmodsi4+0x68>
   89ecc:	18c00044 	addi	r3,r3,1
   89ed0:	28000416 	blt	r5,zero,89ee4 <udivmodsi4+0x34>
   89ed4:	294b883a 	add	r5,r5,r5
   89ed8:	1085883a 	add	r2,r2,r2
   89edc:	293ffa36 	bltu	r5,r4,89ec8 <udivmodsi4+0x18>
   89ee0:	10000d26 	beq	r2,zero,89f18 <udivmodsi4+0x68>
   89ee4:	0007883a 	mov	r3,zero
   89ee8:	21400236 	bltu	r4,r5,89ef4 <udivmodsi4+0x44>
   89eec:	2149c83a 	sub	r4,r4,r5
   89ef0:	1886b03a 	or	r3,r3,r2
   89ef4:	1004d07a 	srli	r2,r2,1
   89ef8:	280ad07a 	srli	r5,r5,1
   89efc:	103ffa1e 	bne	r2,zero,89ee8 <udivmodsi4+0x38>
   89f00:	30000226 	beq	r6,zero,89f0c <udivmodsi4+0x5c>
   89f04:	2005883a 	mov	r2,r4
   89f08:	f800283a 	ret
   89f0c:	1809883a 	mov	r4,r3
   89f10:	2005883a 	mov	r2,r4
   89f14:	f800283a 	ret
   89f18:	0007883a 	mov	r3,zero
   89f1c:	003ff806 	br	89f00 <udivmodsi4+0x50>
   89f20:	00800044 	movi	r2,1
   89f24:	0007883a 	mov	r3,zero
   89f28:	003fef06 	br	89ee8 <udivmodsi4+0x38>

00089f2c <__divsi3>:
   89f2c:	defffe04 	addi	sp,sp,-8
   89f30:	dc000015 	stw	r16,0(sp)
   89f34:	dfc00115 	stw	ra,4(sp)
   89f38:	0021883a 	mov	r16,zero
   89f3c:	20000c16 	blt	r4,zero,89f70 <__divsi3+0x44>
   89f40:	000d883a 	mov	r6,zero
   89f44:	28000e16 	blt	r5,zero,89f80 <__divsi3+0x54>
   89f48:	0089eb00 	call	89eb0 <udivmodsi4>
   89f4c:	1007883a 	mov	r3,r2
   89f50:	8005003a 	cmpeq	r2,r16,zero
   89f54:	1000011e 	bne	r2,zero,89f5c <__divsi3+0x30>
   89f58:	00c7c83a 	sub	r3,zero,r3
   89f5c:	1805883a 	mov	r2,r3
   89f60:	dfc00117 	ldw	ra,4(sp)
   89f64:	dc000017 	ldw	r16,0(sp)
   89f68:	dec00204 	addi	sp,sp,8
   89f6c:	f800283a 	ret
   89f70:	0109c83a 	sub	r4,zero,r4
   89f74:	04000044 	movi	r16,1
   89f78:	000d883a 	mov	r6,zero
   89f7c:	283ff20e 	bge	r5,zero,89f48 <__divsi3+0x1c>
   89f80:	014bc83a 	sub	r5,zero,r5
   89f84:	8021003a 	cmpeq	r16,r16,zero
   89f88:	003fef06 	br	89f48 <__divsi3+0x1c>

00089f8c <__modsi3>:
   89f8c:	deffff04 	addi	sp,sp,-4
   89f90:	dfc00015 	stw	ra,0(sp)
   89f94:	01800044 	movi	r6,1
   89f98:	2807883a 	mov	r3,r5
   89f9c:	20000416 	blt	r4,zero,89fb0 <__modsi3+0x24>
   89fa0:	28000c16 	blt	r5,zero,89fd4 <__modsi3+0x48>
   89fa4:	dfc00017 	ldw	ra,0(sp)
   89fa8:	dec00104 	addi	sp,sp,4
   89fac:	0089eb01 	jmpi	89eb0 <udivmodsi4>
   89fb0:	0109c83a 	sub	r4,zero,r4
   89fb4:	28000b16 	blt	r5,zero,89fe4 <__modsi3+0x58>
   89fb8:	180b883a 	mov	r5,r3
   89fbc:	01800044 	movi	r6,1
   89fc0:	0089eb00 	call	89eb0 <udivmodsi4>
   89fc4:	0085c83a 	sub	r2,zero,r2
   89fc8:	dfc00017 	ldw	ra,0(sp)
   89fcc:	dec00104 	addi	sp,sp,4
   89fd0:	f800283a 	ret
   89fd4:	014bc83a 	sub	r5,zero,r5
   89fd8:	dfc00017 	ldw	ra,0(sp)
   89fdc:	dec00104 	addi	sp,sp,4
   89fe0:	0089eb01 	jmpi	89eb0 <udivmodsi4>
   89fe4:	0147c83a 	sub	r3,zero,r5
   89fe8:	003ff306 	br	89fb8 <__modsi3+0x2c>

00089fec <__udivsi3>:
   89fec:	000d883a 	mov	r6,zero
   89ff0:	0089eb01 	jmpi	89eb0 <udivmodsi4>

00089ff4 <__umodsi3>:
   89ff4:	01800044 	movi	r6,1
   89ff8:	0089eb01 	jmpi	89eb0 <udivmodsi4>

00089ffc <__mulsi3>:
   89ffc:	20000a26 	beq	r4,zero,8a028 <__mulsi3+0x2c>
   8a000:	0007883a 	mov	r3,zero
   8a004:	2080004c 	andi	r2,r4,1
   8a008:	1005003a 	cmpeq	r2,r2,zero
   8a00c:	2008d07a 	srli	r4,r4,1
   8a010:	1000011e 	bne	r2,zero,8a018 <__mulsi3+0x1c>
   8a014:	1947883a 	add	r3,r3,r5
   8a018:	294b883a 	add	r5,r5,r5
   8a01c:	203ff91e 	bne	r4,zero,8a004 <__mulsi3+0x8>
   8a020:	1805883a 	mov	r2,r3
   8a024:	f800283a 	ret
   8a028:	0007883a 	mov	r3,zero
   8a02c:	1805883a 	mov	r2,r3
   8a030:	f800283a 	ret

0008a034 <__muldi3>:
   8a034:	defff204 	addi	sp,sp,-56
   8a038:	df000c15 	stw	fp,48(sp)
   8a03c:	3038d43a 	srli	fp,r6,16
   8a040:	dd000815 	stw	r20,32(sp)
   8a044:	dc400515 	stw	r17,20(sp)
   8a048:	2028d43a 	srli	r20,r4,16
   8a04c:	247fffcc 	andi	r17,r4,65535
   8a050:	dc000415 	stw	r16,16(sp)
   8a054:	343fffcc 	andi	r16,r6,65535
   8a058:	dcc00715 	stw	r19,28(sp)
   8a05c:	d9000015 	stw	r4,0(sp)
   8a060:	2827883a 	mov	r19,r5
   8a064:	8809883a 	mov	r4,r17
   8a068:	d9400115 	stw	r5,4(sp)
   8a06c:	800b883a 	mov	r5,r16
   8a070:	d9800215 	stw	r6,8(sp)
   8a074:	dfc00d15 	stw	ra,52(sp)
   8a078:	d9c00315 	stw	r7,12(sp)
   8a07c:	dd800a15 	stw	r22,40(sp)
   8a080:	dd400915 	stw	r21,36(sp)
   8a084:	302d883a 	mov	r22,r6
   8a088:	ddc00b15 	stw	r23,44(sp)
   8a08c:	dc800615 	stw	r18,24(sp)
   8a090:	0089ffc0 	call	89ffc <__mulsi3>
   8a094:	8809883a 	mov	r4,r17
   8a098:	e00b883a 	mov	r5,fp
   8a09c:	102b883a 	mov	r21,r2
   8a0a0:	0089ffc0 	call	89ffc <__mulsi3>
   8a0a4:	800b883a 	mov	r5,r16
   8a0a8:	a009883a 	mov	r4,r20
   8a0ac:	1023883a 	mov	r17,r2
   8a0b0:	0089ffc0 	call	89ffc <__mulsi3>
   8a0b4:	a009883a 	mov	r4,r20
   8a0b8:	e00b883a 	mov	r5,fp
   8a0bc:	1021883a 	mov	r16,r2
   8a0c0:	0089ffc0 	call	89ffc <__mulsi3>
   8a0c4:	a8ffffcc 	andi	r3,r21,65535
   8a0c8:	a82ad43a 	srli	r21,r21,16
   8a0cc:	8c23883a 	add	r17,r17,r16
   8a0d0:	1011883a 	mov	r8,r2
   8a0d4:	ac6b883a 	add	r21,r21,r17
   8a0d8:	a804943a 	slli	r2,r21,16
   8a0dc:	b009883a 	mov	r4,r22
   8a0e0:	980b883a 	mov	r5,r19
   8a0e4:	10c7883a 	add	r3,r2,r3
   8a0e8:	a812d43a 	srli	r9,r21,16
   8a0ec:	180d883a 	mov	r6,r3
   8a0f0:	ac00022e 	bgeu	r21,r16,8a0fc <__muldi3+0xc8>
   8a0f4:	00800074 	movhi	r2,1
   8a0f8:	4091883a 	add	r8,r8,r2
   8a0fc:	4267883a 	add	r19,r8,r9
   8a100:	302d883a 	mov	r22,r6
   8a104:	0089ffc0 	call	89ffc <__mulsi3>
   8a108:	d9400317 	ldw	r5,12(sp)
   8a10c:	d9000017 	ldw	r4,0(sp)
   8a110:	1023883a 	mov	r17,r2
   8a114:	0089ffc0 	call	89ffc <__mulsi3>
   8a118:	14cb883a 	add	r5,r2,r19
   8a11c:	894b883a 	add	r5,r17,r5
   8a120:	b005883a 	mov	r2,r22
   8a124:	2807883a 	mov	r3,r5
   8a128:	dfc00d17 	ldw	ra,52(sp)
   8a12c:	df000c17 	ldw	fp,48(sp)
   8a130:	ddc00b17 	ldw	r23,44(sp)
   8a134:	dd800a17 	ldw	r22,40(sp)
   8a138:	dd400917 	ldw	r21,36(sp)
   8a13c:	dd000817 	ldw	r20,32(sp)
   8a140:	dcc00717 	ldw	r19,28(sp)
   8a144:	dc800617 	ldw	r18,24(sp)
   8a148:	dc400517 	ldw	r17,20(sp)
   8a14c:	dc000417 	ldw	r16,16(sp)
   8a150:	dec00e04 	addi	sp,sp,56
   8a154:	f800283a 	ret

0008a158 <__clzsi2>:
   8a158:	00bfffd4 	movui	r2,65535
   8a15c:	11000e36 	bltu	r2,r4,8a198 <__clzsi2+0x40>
   8a160:	00803fc4 	movi	r2,255
   8a164:	01400204 	movi	r5,8
   8a168:	0007883a 	mov	r3,zero
   8a16c:	11001036 	bltu	r2,r4,8a1b0 <__clzsi2+0x58>
   8a170:	000b883a 	mov	r5,zero
   8a174:	20c6d83a 	srl	r3,r4,r3
   8a178:	00800274 	movhi	r2,9
   8a17c:	10b55304 	addi	r2,r2,-10932
   8a180:	1887883a 	add	r3,r3,r2
   8a184:	18800003 	ldbu	r2,0(r3)
   8a188:	00c00804 	movi	r3,32
   8a18c:	2885883a 	add	r2,r5,r2
   8a190:	1885c83a 	sub	r2,r3,r2
   8a194:	f800283a 	ret
   8a198:	01400404 	movi	r5,16
   8a19c:	00804034 	movhi	r2,256
   8a1a0:	10bfffc4 	addi	r2,r2,-1
   8a1a4:	2807883a 	mov	r3,r5
   8a1a8:	113ff22e 	bgeu	r2,r4,8a174 <__clzsi2+0x1c>
   8a1ac:	01400604 	movi	r5,24
   8a1b0:	2807883a 	mov	r3,r5
   8a1b4:	20c6d83a 	srl	r3,r4,r3
   8a1b8:	00800274 	movhi	r2,9
   8a1bc:	10b55304 	addi	r2,r2,-10932
   8a1c0:	1887883a 	add	r3,r3,r2
   8a1c4:	18800003 	ldbu	r2,0(r3)
   8a1c8:	00c00804 	movi	r3,32
   8a1cc:	2885883a 	add	r2,r5,r2
   8a1d0:	1885c83a 	sub	r2,r3,r2
   8a1d4:	f800283a 	ret

0008a1d8 <__pack_d>:
   8a1d8:	20c00017 	ldw	r3,0(r4)
   8a1dc:	defffd04 	addi	sp,sp,-12
   8a1e0:	dc000015 	stw	r16,0(sp)
   8a1e4:	dc800215 	stw	r18,8(sp)
   8a1e8:	dc400115 	stw	r17,4(sp)
   8a1ec:	00800044 	movi	r2,1
   8a1f0:	22000317 	ldw	r8,12(r4)
   8a1f4:	001f883a 	mov	r15,zero
   8a1f8:	22400417 	ldw	r9,16(r4)
   8a1fc:	24000117 	ldw	r16,4(r4)
   8a200:	10c0552e 	bgeu	r2,r3,8a358 <__pack_d+0x180>
   8a204:	00800104 	movi	r2,4
   8a208:	18804f26 	beq	r3,r2,8a348 <__pack_d+0x170>
   8a20c:	00800084 	movi	r2,2
   8a210:	18800226 	beq	r3,r2,8a21c <__pack_d+0x44>
   8a214:	4244b03a 	or	r2,r8,r9
   8a218:	10001a1e 	bne	r2,zero,8a284 <__pack_d+0xac>
   8a21c:	000d883a 	mov	r6,zero
   8a220:	000f883a 	mov	r7,zero
   8a224:	0011883a 	mov	r8,zero
   8a228:	00800434 	movhi	r2,16
   8a22c:	10bfffc4 	addi	r2,r2,-1
   8a230:	301d883a 	mov	r14,r6
   8a234:	3884703a 	and	r2,r7,r2
   8a238:	400a953a 	slli	r5,r8,20
   8a23c:	79bffc2c 	andhi	r6,r15,65520
   8a240:	308cb03a 	or	r6,r6,r2
   8a244:	00e00434 	movhi	r3,32784
   8a248:	18ffffc4 	addi	r3,r3,-1
   8a24c:	800497fa 	slli	r2,r16,31
   8a250:	30c6703a 	and	r3,r6,r3
   8a254:	1946b03a 	or	r3,r3,r5
   8a258:	01600034 	movhi	r5,32768
   8a25c:	297fffc4 	addi	r5,r5,-1
   8a260:	194a703a 	and	r5,r3,r5
   8a264:	288ab03a 	or	r5,r5,r2
   8a268:	2807883a 	mov	r3,r5
   8a26c:	7005883a 	mov	r2,r14
   8a270:	dc800217 	ldw	r18,8(sp)
   8a274:	dc400117 	ldw	r17,4(sp)
   8a278:	dc000017 	ldw	r16,0(sp)
   8a27c:	dec00304 	addi	sp,sp,12
   8a280:	f800283a 	ret
   8a284:	21000217 	ldw	r4,8(r4)
   8a288:	00bf0084 	movi	r2,-1022
   8a28c:	20803f16 	blt	r4,r2,8a38c <__pack_d+0x1b4>
   8a290:	0080ffc4 	movi	r2,1023
   8a294:	11002c16 	blt	r2,r4,8a348 <__pack_d+0x170>
   8a298:	00803fc4 	movi	r2,255
   8a29c:	408c703a 	and	r6,r8,r2
   8a2a0:	00802004 	movi	r2,128
   8a2a4:	0007883a 	mov	r3,zero
   8a2a8:	000f883a 	mov	r7,zero
   8a2ac:	2280ffc4 	addi	r10,r4,1023
   8a2b0:	30801e26 	beq	r6,r2,8a32c <__pack_d+0x154>
   8a2b4:	00801fc4 	movi	r2,127
   8a2b8:	4089883a 	add	r4,r8,r2
   8a2bc:	220d803a 	cmpltu	r6,r4,r8
   8a2c0:	324d883a 	add	r6,r6,r9
   8a2c4:	2011883a 	mov	r8,r4
   8a2c8:	3013883a 	mov	r9,r6
   8a2cc:	00880034 	movhi	r2,8192
   8a2d0:	10bfffc4 	addi	r2,r2,-1
   8a2d4:	12400d36 	bltu	r2,r9,8a30c <__pack_d+0x134>
   8a2d8:	4804963a 	slli	r2,r9,24
   8a2dc:	400cd23a 	srli	r6,r8,8
   8a2e0:	480ed23a 	srli	r7,r9,8
   8a2e4:	013fffc4 	movi	r4,-1
   8a2e8:	118cb03a 	or	r6,r2,r6
   8a2ec:	01400434 	movhi	r5,16
   8a2f0:	297fffc4 	addi	r5,r5,-1
   8a2f4:	3104703a 	and	r2,r6,r4
   8a2f8:	3946703a 	and	r3,r7,r5
   8a2fc:	5201ffcc 	andi	r8,r10,2047
   8a300:	100d883a 	mov	r6,r2
   8a304:	180f883a 	mov	r7,r3
   8a308:	003fc706 	br	8a228 <__pack_d+0x50>
   8a30c:	480897fa 	slli	r4,r9,31
   8a310:	4004d07a 	srli	r2,r8,1
   8a314:	4806d07a 	srli	r3,r9,1
   8a318:	52800044 	addi	r10,r10,1
   8a31c:	2084b03a 	or	r2,r4,r2
   8a320:	1011883a 	mov	r8,r2
   8a324:	1813883a 	mov	r9,r3
   8a328:	003feb06 	br	8a2d8 <__pack_d+0x100>
   8a32c:	383fe11e 	bne	r7,zero,8a2b4 <__pack_d+0xdc>
   8a330:	01004004 	movi	r4,256
   8a334:	4104703a 	and	r2,r8,r4
   8a338:	10c4b03a 	or	r2,r2,r3
   8a33c:	103fe326 	beq	r2,zero,8a2cc <__pack_d+0xf4>
   8a340:	3005883a 	mov	r2,r6
   8a344:	003fdc06 	br	8a2b8 <__pack_d+0xe0>
   8a348:	000d883a 	mov	r6,zero
   8a34c:	000f883a 	mov	r7,zero
   8a350:	0201ffc4 	movi	r8,2047
   8a354:	003fb406 	br	8a228 <__pack_d+0x50>
   8a358:	0005883a 	mov	r2,zero
   8a35c:	00c00234 	movhi	r3,8
   8a360:	408cb03a 	or	r6,r8,r2
   8a364:	48ceb03a 	or	r7,r9,r3
   8a368:	013fffc4 	movi	r4,-1
   8a36c:	01400434 	movhi	r5,16
   8a370:	297fffc4 	addi	r5,r5,-1
   8a374:	3104703a 	and	r2,r6,r4
   8a378:	3946703a 	and	r3,r7,r5
   8a37c:	100d883a 	mov	r6,r2
   8a380:	180f883a 	mov	r7,r3
   8a384:	0201ffc4 	movi	r8,2047
   8a388:	003fa706 	br	8a228 <__pack_d+0x50>
   8a38c:	1109c83a 	sub	r4,r2,r4
   8a390:	00800e04 	movi	r2,56
   8a394:	11004316 	blt	r2,r4,8a4a4 <__pack_d+0x2cc>
   8a398:	21fff804 	addi	r7,r4,-32
   8a39c:	38004516 	blt	r7,zero,8a4b4 <__pack_d+0x2dc>
   8a3a0:	49d8d83a 	srl	r12,r9,r7
   8a3a4:	001b883a 	mov	r13,zero
   8a3a8:	0023883a 	mov	r17,zero
   8a3ac:	01400044 	movi	r5,1
   8a3b0:	0025883a 	mov	r18,zero
   8a3b4:	38004716 	blt	r7,zero,8a4d4 <__pack_d+0x2fc>
   8a3b8:	29d6983a 	sll	r11,r5,r7
   8a3bc:	0015883a 	mov	r10,zero
   8a3c0:	00bfffc4 	movi	r2,-1
   8a3c4:	5089883a 	add	r4,r10,r2
   8a3c8:	588b883a 	add	r5,r11,r2
   8a3cc:	228d803a 	cmpltu	r6,r4,r10
   8a3d0:	314b883a 	add	r5,r6,r5
   8a3d4:	4104703a 	and	r2,r8,r4
   8a3d8:	4946703a 	and	r3,r9,r5
   8a3dc:	10c4b03a 	or	r2,r2,r3
   8a3e0:	10000226 	beq	r2,zero,8a3ec <__pack_d+0x214>
   8a3e4:	04400044 	movi	r17,1
   8a3e8:	0025883a 	mov	r18,zero
   8a3ec:	00803fc4 	movi	r2,255
   8a3f0:	644eb03a 	or	r7,r12,r17
   8a3f4:	3892703a 	and	r9,r7,r2
   8a3f8:	00802004 	movi	r2,128
   8a3fc:	6c90b03a 	or	r8,r13,r18
   8a400:	0015883a 	mov	r10,zero
   8a404:	48801626 	beq	r9,r2,8a460 <__pack_d+0x288>
   8a408:	01001fc4 	movi	r4,127
   8a40c:	3905883a 	add	r2,r7,r4
   8a410:	11cd803a 	cmpltu	r6,r2,r7
   8a414:	320d883a 	add	r6,r6,r8
   8a418:	100f883a 	mov	r7,r2
   8a41c:	00840034 	movhi	r2,4096
   8a420:	10bfffc4 	addi	r2,r2,-1
   8a424:	3011883a 	mov	r8,r6
   8a428:	0007883a 	mov	r3,zero
   8a42c:	11801b36 	bltu	r2,r6,8a49c <__pack_d+0x2c4>
   8a430:	4004963a 	slli	r2,r8,24
   8a434:	3808d23a 	srli	r4,r7,8
   8a438:	400ad23a 	srli	r5,r8,8
   8a43c:	1813883a 	mov	r9,r3
   8a440:	1108b03a 	or	r4,r2,r4
   8a444:	00bfffc4 	movi	r2,-1
   8a448:	00c00434 	movhi	r3,16
   8a44c:	18ffffc4 	addi	r3,r3,-1
   8a450:	208c703a 	and	r6,r4,r2
   8a454:	28ce703a 	and	r7,r5,r3
   8a458:	4a01ffcc 	andi	r8,r9,2047
   8a45c:	003f7206 	br	8a228 <__pack_d+0x50>
   8a460:	503fe91e 	bne	r10,zero,8a408 <__pack_d+0x230>
   8a464:	01004004 	movi	r4,256
   8a468:	3904703a 	and	r2,r7,r4
   8a46c:	0007883a 	mov	r3,zero
   8a470:	10c4b03a 	or	r2,r2,r3
   8a474:	10000626 	beq	r2,zero,8a490 <__pack_d+0x2b8>
   8a478:	3a45883a 	add	r2,r7,r9
   8a47c:	11cd803a 	cmpltu	r6,r2,r7
   8a480:	320d883a 	add	r6,r6,r8
   8a484:	100f883a 	mov	r7,r2
   8a488:	3011883a 	mov	r8,r6
   8a48c:	0007883a 	mov	r3,zero
   8a490:	00840034 	movhi	r2,4096
   8a494:	10bfffc4 	addi	r2,r2,-1
   8a498:	123fe52e 	bgeu	r2,r8,8a430 <__pack_d+0x258>
   8a49c:	00c00044 	movi	r3,1
   8a4a0:	003fe306 	br	8a430 <__pack_d+0x258>
   8a4a4:	0009883a 	mov	r4,zero
   8a4a8:	0013883a 	mov	r9,zero
   8a4ac:	000b883a 	mov	r5,zero
   8a4b0:	003fe406 	br	8a444 <__pack_d+0x26c>
   8a4b4:	4a47883a 	add	r3,r9,r9
   8a4b8:	008007c4 	movi	r2,31
   8a4bc:	1105c83a 	sub	r2,r2,r4
   8a4c0:	1886983a 	sll	r3,r3,r2
   8a4c4:	4118d83a 	srl	r12,r8,r4
   8a4c8:	491ad83a 	srl	r13,r9,r4
   8a4cc:	1b18b03a 	or	r12,r3,r12
   8a4d0:	003fb506 	br	8a3a8 <__pack_d+0x1d0>
   8a4d4:	2806d07a 	srli	r3,r5,1
   8a4d8:	008007c4 	movi	r2,31
   8a4dc:	1105c83a 	sub	r2,r2,r4
   8a4e0:	1896d83a 	srl	r11,r3,r2
   8a4e4:	2914983a 	sll	r10,r5,r4
   8a4e8:	003fb506 	br	8a3c0 <__pack_d+0x1e8>

0008a4ec <__unpack_d>:
   8a4ec:	20c00117 	ldw	r3,4(r4)
   8a4f0:	22400017 	ldw	r9,0(r4)
   8a4f4:	00800434 	movhi	r2,16
   8a4f8:	10bfffc4 	addi	r2,r2,-1
   8a4fc:	1808d53a 	srli	r4,r3,20
   8a500:	180cd7fa 	srli	r6,r3,31
   8a504:	1894703a 	and	r10,r3,r2
   8a508:	2201ffcc 	andi	r8,r4,2047
   8a50c:	281b883a 	mov	r13,r5
   8a510:	4817883a 	mov	r11,r9
   8a514:	29800115 	stw	r6,4(r5)
   8a518:	5019883a 	mov	r12,r10
   8a51c:	40001e1e 	bne	r8,zero,8a598 <__unpack_d+0xac>
   8a520:	4a84b03a 	or	r2,r9,r10
   8a524:	10001926 	beq	r2,zero,8a58c <__unpack_d+0xa0>
   8a528:	4804d63a 	srli	r2,r9,24
   8a52c:	500c923a 	slli	r6,r10,8
   8a530:	013f0084 	movi	r4,-1022
   8a534:	00c40034 	movhi	r3,4096
   8a538:	18ffffc4 	addi	r3,r3,-1
   8a53c:	118cb03a 	or	r6,r2,r6
   8a540:	008000c4 	movi	r2,3
   8a544:	480a923a 	slli	r5,r9,8
   8a548:	68800015 	stw	r2,0(r13)
   8a54c:	69000215 	stw	r4,8(r13)
   8a550:	19800b36 	bltu	r3,r6,8a580 <__unpack_d+0x94>
   8a554:	200f883a 	mov	r7,r4
   8a558:	1811883a 	mov	r8,r3
   8a55c:	2945883a 	add	r2,r5,r5
   8a560:	1149803a 	cmpltu	r4,r2,r5
   8a564:	3187883a 	add	r3,r6,r6
   8a568:	20c9883a 	add	r4,r4,r3
   8a56c:	100b883a 	mov	r5,r2
   8a570:	200d883a 	mov	r6,r4
   8a574:	39ffffc4 	addi	r7,r7,-1
   8a578:	413ff82e 	bgeu	r8,r4,8a55c <__unpack_d+0x70>
   8a57c:	69c00215 	stw	r7,8(r13)
   8a580:	69800415 	stw	r6,16(r13)
   8a584:	69400315 	stw	r5,12(r13)
   8a588:	f800283a 	ret
   8a58c:	00800084 	movi	r2,2
   8a590:	28800015 	stw	r2,0(r5)
   8a594:	f800283a 	ret
   8a598:	0081ffc4 	movi	r2,2047
   8a59c:	40800f26 	beq	r8,r2,8a5dc <__unpack_d+0xf0>
   8a5a0:	480cd63a 	srli	r6,r9,24
   8a5a4:	5006923a 	slli	r3,r10,8
   8a5a8:	4804923a 	slli	r2,r9,8
   8a5ac:	0009883a 	mov	r4,zero
   8a5b0:	30c6b03a 	or	r3,r6,r3
   8a5b4:	01440034 	movhi	r5,4096
   8a5b8:	110cb03a 	or	r6,r2,r4
   8a5bc:	423f0044 	addi	r8,r8,-1023
   8a5c0:	194eb03a 	or	r7,r3,r5
   8a5c4:	008000c4 	movi	r2,3
   8a5c8:	69c00415 	stw	r7,16(r13)
   8a5cc:	6a000215 	stw	r8,8(r13)
   8a5d0:	68800015 	stw	r2,0(r13)
   8a5d4:	69800315 	stw	r6,12(r13)
   8a5d8:	f800283a 	ret
   8a5dc:	4a84b03a 	or	r2,r9,r10
   8a5e0:	1000031e 	bne	r2,zero,8a5f0 <__unpack_d+0x104>
   8a5e4:	00800104 	movi	r2,4
   8a5e8:	28800015 	stw	r2,0(r5)
   8a5ec:	f800283a 	ret
   8a5f0:	0009883a 	mov	r4,zero
   8a5f4:	01400234 	movhi	r5,8
   8a5f8:	4904703a 	and	r2,r9,r4
   8a5fc:	5146703a 	and	r3,r10,r5
   8a600:	10c4b03a 	or	r2,r2,r3
   8a604:	10000526 	beq	r2,zero,8a61c <__unpack_d+0x130>
   8a608:	00800044 	movi	r2,1
   8a60c:	68800015 	stw	r2,0(r13)
   8a610:	6b000415 	stw	r12,16(r13)
   8a614:	6ac00315 	stw	r11,12(r13)
   8a618:	f800283a 	ret
   8a61c:	68000015 	stw	zero,0(r13)
   8a620:	003ffb06 	br	8a610 <__unpack_d+0x124>

0008a624 <__fpcmp_parts_d>:
   8a624:	21800017 	ldw	r6,0(r4)
   8a628:	00c00044 	movi	r3,1
   8a62c:	19800a2e 	bgeu	r3,r6,8a658 <__fpcmp_parts_d+0x34>
   8a630:	28800017 	ldw	r2,0(r5)
   8a634:	1880082e 	bgeu	r3,r2,8a658 <__fpcmp_parts_d+0x34>
   8a638:	00c00104 	movi	r3,4
   8a63c:	30c02626 	beq	r6,r3,8a6d8 <__fpcmp_parts_d+0xb4>
   8a640:	10c02226 	beq	r2,r3,8a6cc <__fpcmp_parts_d+0xa8>
   8a644:	00c00084 	movi	r3,2
   8a648:	30c00526 	beq	r6,r3,8a660 <__fpcmp_parts_d+0x3c>
   8a64c:	10c0071e 	bne	r2,r3,8a66c <__fpcmp_parts_d+0x48>
   8a650:	20800117 	ldw	r2,4(r4)
   8a654:	1000091e 	bne	r2,zero,8a67c <__fpcmp_parts_d+0x58>
   8a658:	00800044 	movi	r2,1
   8a65c:	f800283a 	ret
   8a660:	10c01a1e 	bne	r2,r3,8a6cc <__fpcmp_parts_d+0xa8>
   8a664:	0005883a 	mov	r2,zero
   8a668:	f800283a 	ret
   8a66c:	22000117 	ldw	r8,4(r4)
   8a670:	28800117 	ldw	r2,4(r5)
   8a674:	40800326 	beq	r8,r2,8a684 <__fpcmp_parts_d+0x60>
   8a678:	403ff726 	beq	r8,zero,8a658 <__fpcmp_parts_d+0x34>
   8a67c:	00bfffc4 	movi	r2,-1
   8a680:	f800283a 	ret
   8a684:	20c00217 	ldw	r3,8(r4)
   8a688:	28800217 	ldw	r2,8(r5)
   8a68c:	10fffa16 	blt	r2,r3,8a678 <__fpcmp_parts_d+0x54>
   8a690:	18800916 	blt	r3,r2,8a6b8 <__fpcmp_parts_d+0x94>
   8a694:	21c00417 	ldw	r7,16(r4)
   8a698:	28c00417 	ldw	r3,16(r5)
   8a69c:	21800317 	ldw	r6,12(r4)
   8a6a0:	28800317 	ldw	r2,12(r5)
   8a6a4:	19fff436 	bltu	r3,r7,8a678 <__fpcmp_parts_d+0x54>
   8a6a8:	38c00526 	beq	r7,r3,8a6c0 <__fpcmp_parts_d+0x9c>
   8a6ac:	38c00236 	bltu	r7,r3,8a6b8 <__fpcmp_parts_d+0x94>
   8a6b0:	19ffec1e 	bne	r3,r7,8a664 <__fpcmp_parts_d+0x40>
   8a6b4:	30bfeb2e 	bgeu	r6,r2,8a664 <__fpcmp_parts_d+0x40>
   8a6b8:	403fe71e 	bne	r8,zero,8a658 <__fpcmp_parts_d+0x34>
   8a6bc:	003fef06 	br	8a67c <__fpcmp_parts_d+0x58>
   8a6c0:	11bffa2e 	bgeu	r2,r6,8a6ac <__fpcmp_parts_d+0x88>
   8a6c4:	403fe426 	beq	r8,zero,8a658 <__fpcmp_parts_d+0x34>
   8a6c8:	003fec06 	br	8a67c <__fpcmp_parts_d+0x58>
   8a6cc:	28800117 	ldw	r2,4(r5)
   8a6d0:	103fe11e 	bne	r2,zero,8a658 <__fpcmp_parts_d+0x34>
   8a6d4:	003fe906 	br	8a67c <__fpcmp_parts_d+0x58>
   8a6d8:	11bfdd1e 	bne	r2,r6,8a650 <__fpcmp_parts_d+0x2c>
   8a6dc:	28c00117 	ldw	r3,4(r5)
   8a6e0:	20800117 	ldw	r2,4(r4)
   8a6e4:	1885c83a 	sub	r2,r3,r2
   8a6e8:	f800283a 	ret

0008a6ec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8a6ec:	defff804 	addi	sp,sp,-32
   8a6f0:	dfc00715 	stw	ra,28(sp)
   8a6f4:	df000615 	stw	fp,24(sp)
   8a6f8:	df000604 	addi	fp,sp,24
   8a6fc:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8a700:	e0bffc17 	ldw	r2,-16(fp)
   8a704:	1004803a 	cmplt	r2,r2,zero
   8a708:	1000091e 	bne	r2,zero,8a730 <close+0x44>
   8a70c:	e13ffc17 	ldw	r4,-16(fp)
   8a710:	01400304 	movi	r5,12
   8a714:	0089ffc0 	call	89ffc <__mulsi3>
   8a718:	1007883a 	mov	r3,r2
   8a71c:	00800274 	movhi	r2,9
   8a720:	10b7af04 	addi	r2,r2,-8516
   8a724:	1887883a 	add	r3,r3,r2
   8a728:	e0ffff15 	stw	r3,-4(fp)
   8a72c:	00000106 	br	8a734 <close+0x48>
   8a730:	e03fff15 	stw	zero,-4(fp)
   8a734:	e0bfff17 	ldw	r2,-4(fp)
   8a738:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   8a73c:	e0bffb17 	ldw	r2,-20(fp)
   8a740:	1005003a 	cmpeq	r2,r2,zero
   8a744:	10001d1e 	bne	r2,zero,8a7bc <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8a748:	e0bffb17 	ldw	r2,-20(fp)
   8a74c:	10800017 	ldw	r2,0(r2)
   8a750:	10800417 	ldw	r2,16(r2)
   8a754:	1005003a 	cmpeq	r2,r2,zero
   8a758:	1000071e 	bne	r2,zero,8a778 <close+0x8c>
   8a75c:	e0bffb17 	ldw	r2,-20(fp)
   8a760:	10800017 	ldw	r2,0(r2)
   8a764:	10800417 	ldw	r2,16(r2)
   8a768:	e13ffb17 	ldw	r4,-20(fp)
   8a76c:	103ee83a 	callr	r2
   8a770:	e0bffe15 	stw	r2,-8(fp)
   8a774:	00000106 	br	8a77c <close+0x90>
   8a778:	e03ffe15 	stw	zero,-8(fp)
   8a77c:	e0bffe17 	ldw	r2,-8(fp)
   8a780:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8a784:	e13ffc17 	ldw	r4,-16(fp)
   8a788:	008b1040 	call	8b104 <alt_release_fd>
    if (rval < 0)
   8a78c:	e0bffa17 	ldw	r2,-24(fp)
   8a790:	1004403a 	cmpge	r2,r2,zero
   8a794:	1000071e 	bne	r2,zero,8a7b4 <close+0xc8>
    {
      ALT_ERRNO = -rval;
   8a798:	008a7ec0 	call	8a7ec <alt_get_errno>
   8a79c:	e0fffa17 	ldw	r3,-24(fp)
   8a7a0:	00c7c83a 	sub	r3,zero,r3
   8a7a4:	10c00015 	stw	r3,0(r2)
      return -1;
   8a7a8:	00bfffc4 	movi	r2,-1
   8a7ac:	e0bffd15 	stw	r2,-12(fp)
   8a7b0:	00000806 	br	8a7d4 <close+0xe8>
    }
    return 0;
   8a7b4:	e03ffd15 	stw	zero,-12(fp)
   8a7b8:	00000606 	br	8a7d4 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8a7bc:	008a7ec0 	call	8a7ec <alt_get_errno>
   8a7c0:	1007883a 	mov	r3,r2
   8a7c4:	00801444 	movi	r2,81
   8a7c8:	18800015 	stw	r2,0(r3)
    return -1;
   8a7cc:	00bfffc4 	movi	r2,-1
   8a7d0:	e0bffd15 	stw	r2,-12(fp)
   8a7d4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   8a7d8:	e037883a 	mov	sp,fp
   8a7dc:	dfc00117 	ldw	ra,4(sp)
   8a7e0:	df000017 	ldw	fp,0(sp)
   8a7e4:	dec00204 	addi	sp,sp,8
   8a7e8:	f800283a 	ret

0008a7ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8a7ec:	defffd04 	addi	sp,sp,-12
   8a7f0:	dfc00215 	stw	ra,8(sp)
   8a7f4:	df000115 	stw	fp,4(sp)
   8a7f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8a7fc:	00800274 	movhi	r2,9
   8a800:	10bc3204 	addi	r2,r2,-3896
   8a804:	10800017 	ldw	r2,0(r2)
   8a808:	1005003a 	cmpeq	r2,r2,zero
   8a80c:	1000061e 	bne	r2,zero,8a828 <alt_get_errno+0x3c>
   8a810:	00800274 	movhi	r2,9
   8a814:	10bc3204 	addi	r2,r2,-3896
   8a818:	10800017 	ldw	r2,0(r2)
   8a81c:	103ee83a 	callr	r2
   8a820:	e0bfff15 	stw	r2,-4(fp)
   8a824:	00000306 	br	8a834 <alt_get_errno+0x48>
   8a828:	00800274 	movhi	r2,9
   8a82c:	1082d404 	addi	r2,r2,2896
   8a830:	e0bfff15 	stw	r2,-4(fp)
   8a834:	e0bfff17 	ldw	r2,-4(fp)
}
   8a838:	e037883a 	mov	sp,fp
   8a83c:	dfc00117 	ldw	ra,4(sp)
   8a840:	df000017 	ldw	fp,0(sp)
   8a844:	dec00204 	addi	sp,sp,8
   8a848:	f800283a 	ret

0008a84c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   8a84c:	defffc04 	addi	sp,sp,-16
   8a850:	df000315 	stw	fp,12(sp)
   8a854:	df000304 	addi	fp,sp,12
   8a858:	e13ffd15 	stw	r4,-12(fp)
   8a85c:	e17ffe15 	stw	r5,-8(fp)
   8a860:	e1bfff15 	stw	r6,-4(fp)
  return len;
   8a864:	e0bfff17 	ldw	r2,-4(fp)
}
   8a868:	e037883a 	mov	sp,fp
   8a86c:	df000017 	ldw	fp,0(sp)
   8a870:	dec00104 	addi	sp,sp,4
   8a874:	f800283a 	ret

0008a878 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8a878:	defff904 	addi	sp,sp,-28
   8a87c:	dfc00615 	stw	ra,24(sp)
   8a880:	df000515 	stw	fp,20(sp)
   8a884:	df000504 	addi	fp,sp,20
   8a888:	e13ffc15 	stw	r4,-16(fp)
   8a88c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8a890:	e0bffc17 	ldw	r2,-16(fp)
   8a894:	1004803a 	cmplt	r2,r2,zero
   8a898:	1000091e 	bne	r2,zero,8a8c0 <fstat+0x48>
   8a89c:	e13ffc17 	ldw	r4,-16(fp)
   8a8a0:	01400304 	movi	r5,12
   8a8a4:	0089ffc0 	call	89ffc <__mulsi3>
   8a8a8:	1007883a 	mov	r3,r2
   8a8ac:	00800274 	movhi	r2,9
   8a8b0:	10b7af04 	addi	r2,r2,-8516
   8a8b4:	1887883a 	add	r3,r3,r2
   8a8b8:	e0ffff15 	stw	r3,-4(fp)
   8a8bc:	00000106 	br	8a8c4 <fstat+0x4c>
   8a8c0:	e03fff15 	stw	zero,-4(fp)
   8a8c4:	e0bfff17 	ldw	r2,-4(fp)
   8a8c8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8a8cc:	e0bffb17 	ldw	r2,-20(fp)
   8a8d0:	1005003a 	cmpeq	r2,r2,zero
   8a8d4:	1000121e 	bne	r2,zero,8a920 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8a8d8:	e0bffb17 	ldw	r2,-20(fp)
   8a8dc:	10800017 	ldw	r2,0(r2)
   8a8e0:	10800817 	ldw	r2,32(r2)
   8a8e4:	1005003a 	cmpeq	r2,r2,zero
   8a8e8:	1000081e 	bne	r2,zero,8a90c <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
   8a8ec:	e0bffb17 	ldw	r2,-20(fp)
   8a8f0:	10800017 	ldw	r2,0(r2)
   8a8f4:	10800817 	ldw	r2,32(r2)
   8a8f8:	e13ffb17 	ldw	r4,-20(fp)
   8a8fc:	e17ffd17 	ldw	r5,-12(fp)
   8a900:	103ee83a 	callr	r2
   8a904:	e0bffe15 	stw	r2,-8(fp)
   8a908:	00000b06 	br	8a938 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8a90c:	e0fffd17 	ldw	r3,-12(fp)
   8a910:	00880004 	movi	r2,8192
   8a914:	18800115 	stw	r2,4(r3)
      return 0;
   8a918:	e03ffe15 	stw	zero,-8(fp)
   8a91c:	00000606 	br	8a938 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8a920:	008a9500 	call	8a950 <alt_get_errno>
   8a924:	1007883a 	mov	r3,r2
   8a928:	00801444 	movi	r2,81
   8a92c:	18800015 	stw	r2,0(r3)
    return -1;
   8a930:	00bfffc4 	movi	r2,-1
   8a934:	e0bffe15 	stw	r2,-8(fp)
   8a938:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   8a93c:	e037883a 	mov	sp,fp
   8a940:	dfc00117 	ldw	ra,4(sp)
   8a944:	df000017 	ldw	fp,0(sp)
   8a948:	dec00204 	addi	sp,sp,8
   8a94c:	f800283a 	ret

0008a950 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8a950:	defffd04 	addi	sp,sp,-12
   8a954:	dfc00215 	stw	ra,8(sp)
   8a958:	df000115 	stw	fp,4(sp)
   8a95c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8a960:	00800274 	movhi	r2,9
   8a964:	10bc3204 	addi	r2,r2,-3896
   8a968:	10800017 	ldw	r2,0(r2)
   8a96c:	1005003a 	cmpeq	r2,r2,zero
   8a970:	1000061e 	bne	r2,zero,8a98c <alt_get_errno+0x3c>
   8a974:	00800274 	movhi	r2,9
   8a978:	10bc3204 	addi	r2,r2,-3896
   8a97c:	10800017 	ldw	r2,0(r2)
   8a980:	103ee83a 	callr	r2
   8a984:	e0bfff15 	stw	r2,-4(fp)
   8a988:	00000306 	br	8a998 <alt_get_errno+0x48>
   8a98c:	00800274 	movhi	r2,9
   8a990:	1082d404 	addi	r2,r2,2896
   8a994:	e0bfff15 	stw	r2,-4(fp)
   8a998:	e0bfff17 	ldw	r2,-4(fp)
}
   8a99c:	e037883a 	mov	sp,fp
   8a9a0:	dfc00117 	ldw	ra,4(sp)
   8a9a4:	df000017 	ldw	fp,0(sp)
   8a9a8:	dec00204 	addi	sp,sp,8
   8a9ac:	f800283a 	ret

0008a9b0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   8a9b0:	deffef04 	addi	sp,sp,-68
   8a9b4:	df001015 	stw	fp,64(sp)
   8a9b8:	df001004 	addi	fp,sp,64
   8a9bc:	e13ffc15 	stw	r4,-16(fp)
   8a9c0:	e17ffd15 	stw	r5,-12(fp)
   8a9c4:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
   8a9c8:	00bffa84 	movi	r2,-22
   8a9cc:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8a9d0:	e0bffc17 	ldw	r2,-16(fp)
   8a9d4:	10800828 	cmpgeui	r2,r2,32
   8a9d8:	1000601e 	bne	r2,zero,8ab5c <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8a9dc:	0005303a 	rdctl	r2,status
   8a9e0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8a9e4:	e0fff917 	ldw	r3,-28(fp)
   8a9e8:	00bfff84 	movi	r2,-2
   8a9ec:	1884703a 	and	r2,r3,r2
   8a9f0:	1001703a 	wrctl	status,r2
  
  return context;
   8a9f4:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   8a9f8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
   8a9fc:	e0bffc17 	ldw	r2,-16(fp)
   8aa00:	00c00274 	movhi	r3,9
   8aa04:	18c2e504 	addi	r3,r3,2964
   8aa08:	100490fa 	slli	r2,r2,3
   8aa0c:	10c7883a 	add	r3,r2,r3
   8aa10:	e0bffe17 	ldw	r2,-8(fp)
   8aa14:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
   8aa18:	e0bffc17 	ldw	r2,-16(fp)
   8aa1c:	00c00274 	movhi	r3,9
   8aa20:	18c2e504 	addi	r3,r3,2964
   8aa24:	100490fa 	slli	r2,r2,3
   8aa28:	10c5883a 	add	r2,r2,r3
   8aa2c:	10c00104 	addi	r3,r2,4
   8aa30:	e0bffd17 	ldw	r2,-12(fp)
   8aa34:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   8aa38:	e0bffe17 	ldw	r2,-8(fp)
   8aa3c:	1005003a 	cmpeq	r2,r2,zero
   8aa40:	1000201e 	bne	r2,zero,8aac4 <alt_irq_register+0x114>
   8aa44:	e0bffc17 	ldw	r2,-16(fp)
   8aa48:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8aa4c:	0005303a 	rdctl	r2,status
   8aa50:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8aa54:	e0fff617 	ldw	r3,-40(fp)
   8aa58:	00bfff84 	movi	r2,-2
   8aa5c:	1884703a 	and	r2,r3,r2
   8aa60:	1001703a 	wrctl	status,r2
  
  return context;
   8aa64:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8aa68:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   8aa6c:	e0fff717 	ldw	r3,-36(fp)
   8aa70:	00800044 	movi	r2,1
   8aa74:	10c4983a 	sll	r2,r2,r3
   8aa78:	1007883a 	mov	r3,r2
   8aa7c:	00800274 	movhi	r2,9
   8aa80:	1082d504 	addi	r2,r2,2900
   8aa84:	10800017 	ldw	r2,0(r2)
   8aa88:	1886b03a 	or	r3,r3,r2
   8aa8c:	00800274 	movhi	r2,9
   8aa90:	1082d504 	addi	r2,r2,2900
   8aa94:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8aa98:	00800274 	movhi	r2,9
   8aa9c:	1082d504 	addi	r2,r2,2900
   8aaa0:	10800017 	ldw	r2,0(r2)
   8aaa4:	100170fa 	wrctl	ienable,r2
   8aaa8:	e0bff817 	ldw	r2,-32(fp)
   8aaac:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8aab0:	e0bff517 	ldw	r2,-44(fp)
   8aab4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8aab8:	0005883a 	mov	r2,zero
   8aabc:	e0bfff15 	stw	r2,-4(fp)
   8aac0:	00002006 	br	8ab44 <alt_irq_register+0x194>
   8aac4:	e0bffc17 	ldw	r2,-16(fp)
   8aac8:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8aacc:	0005303a 	rdctl	r2,status
   8aad0:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8aad4:	e0fff217 	ldw	r3,-56(fp)
   8aad8:	00bfff84 	movi	r2,-2
   8aadc:	1884703a 	and	r2,r3,r2
   8aae0:	1001703a 	wrctl	status,r2
  
  return context;
   8aae4:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8aae8:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
   8aaec:	e0fff317 	ldw	r3,-52(fp)
   8aaf0:	00800044 	movi	r2,1
   8aaf4:	10c4983a 	sll	r2,r2,r3
   8aaf8:	0084303a 	nor	r2,zero,r2
   8aafc:	1007883a 	mov	r3,r2
   8ab00:	00800274 	movhi	r2,9
   8ab04:	1082d504 	addi	r2,r2,2900
   8ab08:	10800017 	ldw	r2,0(r2)
   8ab0c:	1886703a 	and	r3,r3,r2
   8ab10:	00800274 	movhi	r2,9
   8ab14:	1082d504 	addi	r2,r2,2900
   8ab18:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8ab1c:	00800274 	movhi	r2,9
   8ab20:	1082d504 	addi	r2,r2,2900
   8ab24:	10800017 	ldw	r2,0(r2)
   8ab28:	100170fa 	wrctl	ienable,r2
   8ab2c:	e0bff417 	ldw	r2,-48(fp)
   8ab30:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ab34:	e0bff117 	ldw	r2,-60(fp)
   8ab38:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8ab3c:	0005883a 	mov	r2,zero
   8ab40:	e0bfff15 	stw	r2,-4(fp)
   8ab44:	e0bfff17 	ldw	r2,-4(fp)
   8ab48:	e0bffb15 	stw	r2,-20(fp)
   8ab4c:	e0bffa17 	ldw	r2,-24(fp)
   8ab50:	e0bff015 	stw	r2,-64(fp)
   8ab54:	e0bff017 	ldw	r2,-64(fp)
   8ab58:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   8ab5c:	e0bffb17 	ldw	r2,-20(fp)
}
   8ab60:	e037883a 	mov	sp,fp
   8ab64:	df000017 	ldw	fp,0(sp)
   8ab68:	dec00104 	addi	sp,sp,4
   8ab6c:	f800283a 	ret

0008ab70 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8ab70:	deffeb04 	addi	sp,sp,-84
   8ab74:	dfc01415 	stw	ra,80(sp)
   8ab78:	df001315 	stw	fp,76(sp)
   8ab7c:	df001304 	addi	fp,sp,76
   8ab80:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8ab84:	e0bffd17 	ldw	r2,-12(fp)
   8ab88:	1004803a 	cmplt	r2,r2,zero
   8ab8c:	1000091e 	bne	r2,zero,8abb4 <isatty+0x44>
   8ab90:	e13ffd17 	ldw	r4,-12(fp)
   8ab94:	01400304 	movi	r5,12
   8ab98:	0089ffc0 	call	89ffc <__mulsi3>
   8ab9c:	1007883a 	mov	r3,r2
   8aba0:	00800274 	movhi	r2,9
   8aba4:	10b7af04 	addi	r2,r2,-8516
   8aba8:	1887883a 	add	r3,r3,r2
   8abac:	e0ffff15 	stw	r3,-4(fp)
   8abb0:	00000106 	br	8abb8 <isatty+0x48>
   8abb4:	e03fff15 	stw	zero,-4(fp)
   8abb8:	e0bfff17 	ldw	r2,-4(fp)
   8abbc:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   8abc0:	e0bfed17 	ldw	r2,-76(fp)
   8abc4:	1005003a 	cmpeq	r2,r2,zero
   8abc8:	10000f1e 	bne	r2,zero,8ac08 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8abcc:	e0bfed17 	ldw	r2,-76(fp)
   8abd0:	10800017 	ldw	r2,0(r2)
   8abd4:	10800817 	ldw	r2,32(r2)
   8abd8:	1004c03a 	cmpne	r2,r2,zero
   8abdc:	1000031e 	bne	r2,zero,8abec <isatty+0x7c>
    {
      return 1;
   8abe0:	00800044 	movi	r2,1
   8abe4:	e0bffe15 	stw	r2,-8(fp)
   8abe8:	00000c06 	br	8ac1c <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8abec:	e17fee04 	addi	r5,fp,-72
   8abf0:	e13ffd17 	ldw	r4,-12(fp)
   8abf4:	008a8780 	call	8a878 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8abf8:	e0bfef17 	ldw	r2,-68(fp)
   8abfc:	10880020 	cmpeqi	r2,r2,8192
   8ac00:	e0bffe15 	stw	r2,-8(fp)
   8ac04:	00000506 	br	8ac1c <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8ac08:	008ac340 	call	8ac34 <alt_get_errno>
   8ac0c:	1007883a 	mov	r3,r2
   8ac10:	00801444 	movi	r2,81
   8ac14:	18800015 	stw	r2,0(r3)
    return 0;
   8ac18:	e03ffe15 	stw	zero,-8(fp)
   8ac1c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   8ac20:	e037883a 	mov	sp,fp
   8ac24:	dfc00117 	ldw	ra,4(sp)
   8ac28:	df000017 	ldw	fp,0(sp)
   8ac2c:	dec00204 	addi	sp,sp,8
   8ac30:	f800283a 	ret

0008ac34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8ac34:	defffd04 	addi	sp,sp,-12
   8ac38:	dfc00215 	stw	ra,8(sp)
   8ac3c:	df000115 	stw	fp,4(sp)
   8ac40:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8ac44:	00800274 	movhi	r2,9
   8ac48:	10bc3204 	addi	r2,r2,-3896
   8ac4c:	10800017 	ldw	r2,0(r2)
   8ac50:	1005003a 	cmpeq	r2,r2,zero
   8ac54:	1000061e 	bne	r2,zero,8ac70 <alt_get_errno+0x3c>
   8ac58:	00800274 	movhi	r2,9
   8ac5c:	10bc3204 	addi	r2,r2,-3896
   8ac60:	10800017 	ldw	r2,0(r2)
   8ac64:	103ee83a 	callr	r2
   8ac68:	e0bfff15 	stw	r2,-4(fp)
   8ac6c:	00000306 	br	8ac7c <alt_get_errno+0x48>
   8ac70:	00800274 	movhi	r2,9
   8ac74:	1082d404 	addi	r2,r2,2896
   8ac78:	e0bfff15 	stw	r2,-4(fp)
   8ac7c:	e0bfff17 	ldw	r2,-4(fp)
}
   8ac80:	e037883a 	mov	sp,fp
   8ac84:	dfc00117 	ldw	ra,4(sp)
   8ac88:	df000017 	ldw	fp,0(sp)
   8ac8c:	dec00204 	addi	sp,sp,8
   8ac90:	f800283a 	ret

0008ac94 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8ac94:	defffe04 	addi	sp,sp,-8
   8ac98:	dfc00115 	stw	ra,4(sp)
   8ac9c:	df000015 	stw	fp,0(sp)
   8aca0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   8aca4:	01000274 	movhi	r4,9
   8aca8:	213c3704 	addi	r4,r4,-3876
   8acac:	01400274 	movhi	r5,9
   8acb0:	2975a004 	addi	r5,r5,-10624
   8acb4:	01800274 	movhi	r6,9
   8acb8:	31bc3704 	addi	r6,r6,-3876
   8acbc:	008ad140 	call	8ad14 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8acc0:	01000234 	movhi	r4,8
   8acc4:	21000804 	addi	r4,r4,32
   8acc8:	01400234 	movhi	r5,8
   8accc:	29400804 	addi	r5,r5,32
   8acd0:	01800234 	movhi	r6,8
   8acd4:	31806d04 	addi	r6,r6,436
   8acd8:	008ad140 	call	8ad14 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   8acdc:	01000274 	movhi	r4,9
   8ace0:	21349004 	addi	r4,r4,-11712
   8ace4:	01400274 	movhi	r5,9
   8ace8:	29749004 	addi	r5,r5,-11712
   8acec:	01800274 	movhi	r6,9
   8acf0:	31b5a004 	addi	r6,r6,-10624
   8acf4:	008ad140 	call	8ad14 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8acf8:	008c06c0 	call	8c06c <alt_dcache_flush_all>
  alt_icache_flush_all();
   8acfc:	008c2640 	call	8c264 <alt_icache_flush_all>
}
   8ad00:	e037883a 	mov	sp,fp
   8ad04:	dfc00117 	ldw	ra,4(sp)
   8ad08:	df000017 	ldw	fp,0(sp)
   8ad0c:	dec00204 	addi	sp,sp,8
   8ad10:	f800283a 	ret

0008ad14 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   8ad14:	defffc04 	addi	sp,sp,-16
   8ad18:	df000315 	stw	fp,12(sp)
   8ad1c:	df000304 	addi	fp,sp,12
   8ad20:	e13ffd15 	stw	r4,-12(fp)
   8ad24:	e17ffe15 	stw	r5,-8(fp)
   8ad28:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   8ad2c:	e0fffe17 	ldw	r3,-8(fp)
   8ad30:	e0bffd17 	ldw	r2,-12(fp)
   8ad34:	18800e26 	beq	r3,r2,8ad70 <alt_load_section+0x5c>
  {
    while( to != end )
   8ad38:	00000a06 	br	8ad64 <alt_load_section+0x50>
    {
      *to++ = *from++;
   8ad3c:	e0bffd17 	ldw	r2,-12(fp)
   8ad40:	10c00017 	ldw	r3,0(r2)
   8ad44:	e0bffe17 	ldw	r2,-8(fp)
   8ad48:	10c00015 	stw	r3,0(r2)
   8ad4c:	e0bffe17 	ldw	r2,-8(fp)
   8ad50:	10800104 	addi	r2,r2,4
   8ad54:	e0bffe15 	stw	r2,-8(fp)
   8ad58:	e0bffd17 	ldw	r2,-12(fp)
   8ad5c:	10800104 	addi	r2,r2,4
   8ad60:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8ad64:	e0fffe17 	ldw	r3,-8(fp)
   8ad68:	e0bfff17 	ldw	r2,-4(fp)
   8ad6c:	18bff31e 	bne	r3,r2,8ad3c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   8ad70:	e037883a 	mov	sp,fp
   8ad74:	df000017 	ldw	fp,0(sp)
   8ad78:	dec00104 	addi	sp,sp,4
   8ad7c:	f800283a 	ret

0008ad80 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8ad80:	defff804 	addi	sp,sp,-32
   8ad84:	dfc00715 	stw	ra,28(sp)
   8ad88:	df000615 	stw	fp,24(sp)
   8ad8c:	df000604 	addi	fp,sp,24
   8ad90:	e13ffc15 	stw	r4,-16(fp)
   8ad94:	e17ffd15 	stw	r5,-12(fp)
   8ad98:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   8ad9c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8ada0:	e0bffc17 	ldw	r2,-16(fp)
   8ada4:	1004803a 	cmplt	r2,r2,zero
   8ada8:	1000091e 	bne	r2,zero,8add0 <lseek+0x50>
   8adac:	e13ffc17 	ldw	r4,-16(fp)
   8adb0:	01400304 	movi	r5,12
   8adb4:	0089ffc0 	call	89ffc <__mulsi3>
   8adb8:	1007883a 	mov	r3,r2
   8adbc:	00800274 	movhi	r2,9
   8adc0:	10b7af04 	addi	r2,r2,-8516
   8adc4:	1887883a 	add	r3,r3,r2
   8adc8:	e0ffff15 	stw	r3,-4(fp)
   8adcc:	00000106 	br	8add4 <lseek+0x54>
   8add0:	e03fff15 	stw	zero,-4(fp)
   8add4:	e0bfff17 	ldw	r2,-4(fp)
   8add8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   8addc:	e0bffb17 	ldw	r2,-20(fp)
   8ade0:	1005003a 	cmpeq	r2,r2,zero
   8ade4:	1000111e 	bne	r2,zero,8ae2c <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8ade8:	e0bffb17 	ldw	r2,-20(fp)
   8adec:	10800017 	ldw	r2,0(r2)
   8adf0:	10800717 	ldw	r2,28(r2)
   8adf4:	1005003a 	cmpeq	r2,r2,zero
   8adf8:	1000091e 	bne	r2,zero,8ae20 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8adfc:	e0bffb17 	ldw	r2,-20(fp)
   8ae00:	10800017 	ldw	r2,0(r2)
   8ae04:	10800717 	ldw	r2,28(r2)
   8ae08:	e13ffb17 	ldw	r4,-20(fp)
   8ae0c:	e17ffd17 	ldw	r5,-12(fp)
   8ae10:	e1bffe17 	ldw	r6,-8(fp)
   8ae14:	103ee83a 	callr	r2
   8ae18:	e0bffa15 	stw	r2,-24(fp)
   8ae1c:	00000506 	br	8ae34 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8ae20:	00bfde84 	movi	r2,-134
   8ae24:	e0bffa15 	stw	r2,-24(fp)
   8ae28:	00000206 	br	8ae34 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
   8ae2c:	00bfebc4 	movi	r2,-81
   8ae30:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   8ae34:	e0bffa17 	ldw	r2,-24(fp)
   8ae38:	1004403a 	cmpge	r2,r2,zero
   8ae3c:	1000071e 	bne	r2,zero,8ae5c <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
   8ae40:	008ae740 	call	8ae74 <alt_get_errno>
   8ae44:	1007883a 	mov	r3,r2
   8ae48:	e0bffa17 	ldw	r2,-24(fp)
   8ae4c:	0085c83a 	sub	r2,zero,r2
   8ae50:	18800015 	stw	r2,0(r3)
    rc = -1;
   8ae54:	00bfffc4 	movi	r2,-1
   8ae58:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   8ae5c:	e0bffa17 	ldw	r2,-24(fp)
}
   8ae60:	e037883a 	mov	sp,fp
   8ae64:	dfc00117 	ldw	ra,4(sp)
   8ae68:	df000017 	ldw	fp,0(sp)
   8ae6c:	dec00204 	addi	sp,sp,8
   8ae70:	f800283a 	ret

0008ae74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8ae74:	defffd04 	addi	sp,sp,-12
   8ae78:	dfc00215 	stw	ra,8(sp)
   8ae7c:	df000115 	stw	fp,4(sp)
   8ae80:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8ae84:	00800274 	movhi	r2,9
   8ae88:	10bc3204 	addi	r2,r2,-3896
   8ae8c:	10800017 	ldw	r2,0(r2)
   8ae90:	1005003a 	cmpeq	r2,r2,zero
   8ae94:	1000061e 	bne	r2,zero,8aeb0 <alt_get_errno+0x3c>
   8ae98:	00800274 	movhi	r2,9
   8ae9c:	10bc3204 	addi	r2,r2,-3896
   8aea0:	10800017 	ldw	r2,0(r2)
   8aea4:	103ee83a 	callr	r2
   8aea8:	e0bfff15 	stw	r2,-4(fp)
   8aeac:	00000306 	br	8aebc <alt_get_errno+0x48>
   8aeb0:	00800274 	movhi	r2,9
   8aeb4:	1082d404 	addi	r2,r2,2896
   8aeb8:	e0bfff15 	stw	r2,-4(fp)
   8aebc:	e0bfff17 	ldw	r2,-4(fp)
}
   8aec0:	e037883a 	mov	sp,fp
   8aec4:	dfc00117 	ldw	ra,4(sp)
   8aec8:	df000017 	ldw	fp,0(sp)
   8aecc:	dec00204 	addi	sp,sp,8
   8aed0:	f800283a 	ret

0008aed4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8aed4:	defffd04 	addi	sp,sp,-12
   8aed8:	dfc00215 	stw	ra,8(sp)
   8aedc:	df000115 	stw	fp,4(sp)
   8aee0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8aee4:	0009883a 	mov	r4,zero
   8aee8:	008b3bc0 	call	8b3bc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8aeec:	008b3f00 	call	8b3f0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8aef0:	01000274 	movhi	r4,9
   8aef4:	21359604 	addi	r4,r4,-10664
   8aef8:	01400274 	movhi	r5,9
   8aefc:	29759604 	addi	r5,r5,-10664
   8af00:	01800274 	movhi	r6,9
   8af04:	31b59604 	addi	r6,r6,-10664
   8af08:	008c6240 	call	8c624 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8af0c:	008c19c0 	call	8c19c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8af10:	01000274 	movhi	r4,9
   8af14:	21308004 	addi	r4,r4,-15872
   8af18:	008cdc80 	call	8cdc8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8af1c:	d126af17 	ldw	r4,-25924(gp)
   8af20:	d166b017 	ldw	r5,-25920(gp)
   8af24:	d1a6b117 	ldw	r6,-25916(gp)
   8af28:	00809200 	call	80920 <main>
   8af2c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8af30:	01000044 	movi	r4,1
   8af34:	008a6ec0 	call	8a6ec <close>
  exit (result);
   8af38:	e13fff17 	ldw	r4,-4(fp)
   8af3c:	008cddc0 	call	8cddc <exit>

0008af40 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   8af40:	defffe04 	addi	sp,sp,-8
   8af44:	df000115 	stw	fp,4(sp)
   8af48:	df000104 	addi	fp,sp,4
   8af4c:	e13fff15 	stw	r4,-4(fp)
}
   8af50:	e037883a 	mov	sp,fp
   8af54:	df000017 	ldw	fp,0(sp)
   8af58:	dec00104 	addi	sp,sp,4
   8af5c:	f800283a 	ret

0008af60 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8af60:	defffe04 	addi	sp,sp,-8
   8af64:	df000115 	stw	fp,4(sp)
   8af68:	df000104 	addi	fp,sp,4
   8af6c:	e13fff15 	stw	r4,-4(fp)
}
   8af70:	e037883a 	mov	sp,fp
   8af74:	df000017 	ldw	fp,0(sp)
   8af78:	dec00104 	addi	sp,sp,4
   8af7c:	f800283a 	ret

0008af80 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8af80:	defff704 	addi	sp,sp,-36
   8af84:	dfc00815 	stw	ra,32(sp)
   8af88:	df000715 	stw	fp,28(sp)
   8af8c:	df000704 	addi	fp,sp,28
   8af90:	e13ffb15 	stw	r4,-20(fp)
   8af94:	e17ffc15 	stw	r5,-16(fp)
   8af98:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8af9c:	e0bffb17 	ldw	r2,-20(fp)
   8afa0:	1004803a 	cmplt	r2,r2,zero
   8afa4:	1000091e 	bne	r2,zero,8afcc <read+0x4c>
   8afa8:	e13ffb17 	ldw	r4,-20(fp)
   8afac:	01400304 	movi	r5,12
   8afb0:	0089ffc0 	call	89ffc <__mulsi3>
   8afb4:	1007883a 	mov	r3,r2
   8afb8:	00800274 	movhi	r2,9
   8afbc:	10b7af04 	addi	r2,r2,-8516
   8afc0:	1887883a 	add	r3,r3,r2
   8afc4:	e0ffff15 	stw	r3,-4(fp)
   8afc8:	00000106 	br	8afd0 <read+0x50>
   8afcc:	e03fff15 	stw	zero,-4(fp)
   8afd0:	e0bfff17 	ldw	r2,-4(fp)
   8afd4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8afd8:	e0bffa17 	ldw	r2,-24(fp)
   8afdc:	1005003a 	cmpeq	r2,r2,zero
   8afe0:	1000241e 	bne	r2,zero,8b074 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8afe4:	e0bffa17 	ldw	r2,-24(fp)
   8afe8:	10800217 	ldw	r2,8(r2)
   8afec:	108000cc 	andi	r2,r2,3
   8aff0:	10800060 	cmpeqi	r2,r2,1
   8aff4:	10001a1e 	bne	r2,zero,8b060 <read+0xe0>
   8aff8:	e0bffa17 	ldw	r2,-24(fp)
   8affc:	10800017 	ldw	r2,0(r2)
   8b000:	10800517 	ldw	r2,20(r2)
   8b004:	1005003a 	cmpeq	r2,r2,zero
   8b008:	1000151e 	bne	r2,zero,8b060 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8b00c:	e0bffa17 	ldw	r2,-24(fp)
   8b010:	10800017 	ldw	r2,0(r2)
   8b014:	10800517 	ldw	r2,20(r2)
   8b018:	e17ffc17 	ldw	r5,-16(fp)
   8b01c:	e1bffd17 	ldw	r6,-12(fp)
   8b020:	e13ffa17 	ldw	r4,-24(fp)
   8b024:	103ee83a 	callr	r2
   8b028:	e0bff915 	stw	r2,-28(fp)
   8b02c:	e0bff917 	ldw	r2,-28(fp)
   8b030:	1004403a 	cmpge	r2,r2,zero
   8b034:	1000071e 	bne	r2,zero,8b054 <read+0xd4>
        {
          ALT_ERRNO = -rval;
   8b038:	008b0a40 	call	8b0a4 <alt_get_errno>
   8b03c:	e0fff917 	ldw	r3,-28(fp)
   8b040:	00c7c83a 	sub	r3,zero,r3
   8b044:	10c00015 	stw	r3,0(r2)
          return -1;
   8b048:	00bfffc4 	movi	r2,-1
   8b04c:	e0bffe15 	stw	r2,-8(fp)
   8b050:	00000e06 	br	8b08c <read+0x10c>
        }
        return rval;
   8b054:	e0bff917 	ldw	r2,-28(fp)
   8b058:	e0bffe15 	stw	r2,-8(fp)
   8b05c:	00000b06 	br	8b08c <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8b060:	008b0a40 	call	8b0a4 <alt_get_errno>
   8b064:	1007883a 	mov	r3,r2
   8b068:	00800344 	movi	r2,13
   8b06c:	18800015 	stw	r2,0(r3)
   8b070:	00000406 	br	8b084 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8b074:	008b0a40 	call	8b0a4 <alt_get_errno>
   8b078:	1007883a 	mov	r3,r2
   8b07c:	00801444 	movi	r2,81
   8b080:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8b084:	00bfffc4 	movi	r2,-1
   8b088:	e0bffe15 	stw	r2,-8(fp)
   8b08c:	e0bffe17 	ldw	r2,-8(fp)
}
   8b090:	e037883a 	mov	sp,fp
   8b094:	dfc00117 	ldw	ra,4(sp)
   8b098:	df000017 	ldw	fp,0(sp)
   8b09c:	dec00204 	addi	sp,sp,8
   8b0a0:	f800283a 	ret

0008b0a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b0a4:	defffd04 	addi	sp,sp,-12
   8b0a8:	dfc00215 	stw	ra,8(sp)
   8b0ac:	df000115 	stw	fp,4(sp)
   8b0b0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8b0b4:	00800274 	movhi	r2,9
   8b0b8:	10bc3204 	addi	r2,r2,-3896
   8b0bc:	10800017 	ldw	r2,0(r2)
   8b0c0:	1005003a 	cmpeq	r2,r2,zero
   8b0c4:	1000061e 	bne	r2,zero,8b0e0 <alt_get_errno+0x3c>
   8b0c8:	00800274 	movhi	r2,9
   8b0cc:	10bc3204 	addi	r2,r2,-3896
   8b0d0:	10800017 	ldw	r2,0(r2)
   8b0d4:	103ee83a 	callr	r2
   8b0d8:	e0bfff15 	stw	r2,-4(fp)
   8b0dc:	00000306 	br	8b0ec <alt_get_errno+0x48>
   8b0e0:	00800274 	movhi	r2,9
   8b0e4:	1082d404 	addi	r2,r2,2896
   8b0e8:	e0bfff15 	stw	r2,-4(fp)
   8b0ec:	e0bfff17 	ldw	r2,-4(fp)
}
   8b0f0:	e037883a 	mov	sp,fp
   8b0f4:	dfc00117 	ldw	ra,4(sp)
   8b0f8:	df000017 	ldw	fp,0(sp)
   8b0fc:	dec00204 	addi	sp,sp,8
   8b100:	f800283a 	ret

0008b104 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8b104:	defffc04 	addi	sp,sp,-16
   8b108:	dfc00315 	stw	ra,12(sp)
   8b10c:	df000215 	stw	fp,8(sp)
   8b110:	dc000115 	stw	r16,4(sp)
   8b114:	df000104 	addi	fp,sp,4
   8b118:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   8b11c:	e0bfff17 	ldw	r2,-4(fp)
   8b120:	108000d0 	cmplti	r2,r2,3
   8b124:	10000f1e 	bne	r2,zero,8b164 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   8b128:	e13fff17 	ldw	r4,-4(fp)
   8b12c:	04000274 	movhi	r16,9
   8b130:	8437af04 	addi	r16,r16,-8516
   8b134:	01400304 	movi	r5,12
   8b138:	0089ffc0 	call	89ffc <__mulsi3>
   8b13c:	1405883a 	add	r2,r2,r16
   8b140:	10800204 	addi	r2,r2,8
   8b144:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8b148:	e13fff17 	ldw	r4,-4(fp)
   8b14c:	04000274 	movhi	r16,9
   8b150:	8437af04 	addi	r16,r16,-8516
   8b154:	01400304 	movi	r5,12
   8b158:	0089ffc0 	call	89ffc <__mulsi3>
   8b15c:	1405883a 	add	r2,r2,r16
   8b160:	10000015 	stw	zero,0(r2)
  }
}
   8b164:	e037883a 	mov	sp,fp
   8b168:	dfc00217 	ldw	ra,8(sp)
   8b16c:	df000117 	ldw	fp,4(sp)
   8b170:	dc000017 	ldw	r16,0(sp)
   8b174:	dec00304 	addi	sp,sp,12
   8b178:	f800283a 	ret

0008b17c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8b17c:	defff804 	addi	sp,sp,-32
   8b180:	df000715 	stw	fp,28(sp)
   8b184:	df000704 	addi	fp,sp,28
   8b188:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b18c:	0005303a 	rdctl	r2,status
   8b190:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b194:	e0fffb17 	ldw	r3,-20(fp)
   8b198:	00bfff84 	movi	r2,-2
   8b19c:	1884703a 	and	r2,r3,r2
   8b1a0:	1001703a 	wrctl	status,r2
  
  return context;
   8b1a4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8b1a8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8b1ac:	d0a00d17 	ldw	r2,-32716(gp)
   8b1b0:	10c000c4 	addi	r3,r2,3
   8b1b4:	00bfff04 	movi	r2,-4
   8b1b8:	1884703a 	and	r2,r3,r2
   8b1bc:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8b1c0:	d0e00d17 	ldw	r3,-32716(gp)
   8b1c4:	e0bffe17 	ldw	r2,-8(fp)
   8b1c8:	1887883a 	add	r3,r3,r2
   8b1cc:	00800434 	movhi	r2,16
   8b1d0:	10800004 	addi	r2,r2,0
   8b1d4:	10c0072e 	bgeu	r2,r3,8b1f4 <sbrk+0x78>
   8b1d8:	e0bffd17 	ldw	r2,-12(fp)
   8b1dc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b1e0:	e0bffa17 	ldw	r2,-24(fp)
   8b1e4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8b1e8:	00bfffc4 	movi	r2,-1
   8b1ec:	e0bfff15 	stw	r2,-4(fp)
   8b1f0:	00000c06 	br	8b224 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   8b1f4:	d0a00d17 	ldw	r2,-32716(gp)
   8b1f8:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   8b1fc:	d0e00d17 	ldw	r3,-32716(gp)
   8b200:	e0bffe17 	ldw	r2,-8(fp)
   8b204:	1885883a 	add	r2,r3,r2
   8b208:	d0a00d15 	stw	r2,-32716(gp)
   8b20c:	e0bffd17 	ldw	r2,-12(fp)
   8b210:	e0bff915 	stw	r2,-28(fp)
   8b214:	e0bff917 	ldw	r2,-28(fp)
   8b218:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8b21c:	e0bffc17 	ldw	r2,-16(fp)
   8b220:	e0bfff15 	stw	r2,-4(fp)
   8b224:	e0bfff17 	ldw	r2,-4(fp)
} 
   8b228:	e037883a 	mov	sp,fp
   8b22c:	df000017 	ldw	fp,0(sp)
   8b230:	dec00104 	addi	sp,sp,4
   8b234:	f800283a 	ret

0008b238 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8b238:	defff704 	addi	sp,sp,-36
   8b23c:	dfc00815 	stw	ra,32(sp)
   8b240:	df000715 	stw	fp,28(sp)
   8b244:	df000704 	addi	fp,sp,28
   8b248:	e13ffb15 	stw	r4,-20(fp)
   8b24c:	e17ffc15 	stw	r5,-16(fp)
   8b250:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b254:	e0bffb17 	ldw	r2,-20(fp)
   8b258:	1004803a 	cmplt	r2,r2,zero
   8b25c:	1000091e 	bne	r2,zero,8b284 <write+0x4c>
   8b260:	e13ffb17 	ldw	r4,-20(fp)
   8b264:	01400304 	movi	r5,12
   8b268:	0089ffc0 	call	89ffc <__mulsi3>
   8b26c:	1007883a 	mov	r3,r2
   8b270:	00800274 	movhi	r2,9
   8b274:	10b7af04 	addi	r2,r2,-8516
   8b278:	1887883a 	add	r3,r3,r2
   8b27c:	e0ffff15 	stw	r3,-4(fp)
   8b280:	00000106 	br	8b288 <write+0x50>
   8b284:	e03fff15 	stw	zero,-4(fp)
   8b288:	e0bfff17 	ldw	r2,-4(fp)
   8b28c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8b290:	e0bffa17 	ldw	r2,-24(fp)
   8b294:	1005003a 	cmpeq	r2,r2,zero
   8b298:	1000241e 	bne	r2,zero,8b32c <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8b29c:	e0bffa17 	ldw	r2,-24(fp)
   8b2a0:	10800217 	ldw	r2,8(r2)
   8b2a4:	108000cc 	andi	r2,r2,3
   8b2a8:	1005003a 	cmpeq	r2,r2,zero
   8b2ac:	10001a1e 	bne	r2,zero,8b318 <write+0xe0>
   8b2b0:	e0bffa17 	ldw	r2,-24(fp)
   8b2b4:	10800017 	ldw	r2,0(r2)
   8b2b8:	10800617 	ldw	r2,24(r2)
   8b2bc:	1005003a 	cmpeq	r2,r2,zero
   8b2c0:	1000151e 	bne	r2,zero,8b318 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8b2c4:	e0bffa17 	ldw	r2,-24(fp)
   8b2c8:	10800017 	ldw	r2,0(r2)
   8b2cc:	10800617 	ldw	r2,24(r2)
   8b2d0:	e17ffc17 	ldw	r5,-16(fp)
   8b2d4:	e1bffd17 	ldw	r6,-12(fp)
   8b2d8:	e13ffa17 	ldw	r4,-24(fp)
   8b2dc:	103ee83a 	callr	r2
   8b2e0:	e0bff915 	stw	r2,-28(fp)
   8b2e4:	e0bff917 	ldw	r2,-28(fp)
   8b2e8:	1004403a 	cmpge	r2,r2,zero
   8b2ec:	1000071e 	bne	r2,zero,8b30c <write+0xd4>
      {
        ALT_ERRNO = -rval;
   8b2f0:	008b35c0 	call	8b35c <alt_get_errno>
   8b2f4:	e0fff917 	ldw	r3,-28(fp)
   8b2f8:	00c7c83a 	sub	r3,zero,r3
   8b2fc:	10c00015 	stw	r3,0(r2)
        return -1;
   8b300:	00bfffc4 	movi	r2,-1
   8b304:	e0bffe15 	stw	r2,-8(fp)
   8b308:	00000e06 	br	8b344 <write+0x10c>
      }
      return rval;
   8b30c:	e0bff917 	ldw	r2,-28(fp)
   8b310:	e0bffe15 	stw	r2,-8(fp)
   8b314:	00000b06 	br	8b344 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8b318:	008b35c0 	call	8b35c <alt_get_errno>
   8b31c:	1007883a 	mov	r3,r2
   8b320:	00800344 	movi	r2,13
   8b324:	18800015 	stw	r2,0(r3)
   8b328:	00000406 	br	8b33c <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8b32c:	008b35c0 	call	8b35c <alt_get_errno>
   8b330:	1007883a 	mov	r3,r2
   8b334:	00801444 	movi	r2,81
   8b338:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8b33c:	00bfffc4 	movi	r2,-1
   8b340:	e0bffe15 	stw	r2,-8(fp)
   8b344:	e0bffe17 	ldw	r2,-8(fp)
}
   8b348:	e037883a 	mov	sp,fp
   8b34c:	dfc00117 	ldw	ra,4(sp)
   8b350:	df000017 	ldw	fp,0(sp)
   8b354:	dec00204 	addi	sp,sp,8
   8b358:	f800283a 	ret

0008b35c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b35c:	defffd04 	addi	sp,sp,-12
   8b360:	dfc00215 	stw	ra,8(sp)
   8b364:	df000115 	stw	fp,4(sp)
   8b368:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8b36c:	00800274 	movhi	r2,9
   8b370:	10bc3204 	addi	r2,r2,-3896
   8b374:	10800017 	ldw	r2,0(r2)
   8b378:	1005003a 	cmpeq	r2,r2,zero
   8b37c:	1000061e 	bne	r2,zero,8b398 <alt_get_errno+0x3c>
   8b380:	00800274 	movhi	r2,9
   8b384:	10bc3204 	addi	r2,r2,-3896
   8b388:	10800017 	ldw	r2,0(r2)
   8b38c:	103ee83a 	callr	r2
   8b390:	e0bfff15 	stw	r2,-4(fp)
   8b394:	00000306 	br	8b3a4 <alt_get_errno+0x48>
   8b398:	00800274 	movhi	r2,9
   8b39c:	1082d404 	addi	r2,r2,2896
   8b3a0:	e0bfff15 	stw	r2,-4(fp)
   8b3a4:	e0bfff17 	ldw	r2,-4(fp)
}
   8b3a8:	e037883a 	mov	sp,fp
   8b3ac:	dfc00117 	ldw	ra,4(sp)
   8b3b0:	df000017 	ldw	fp,0(sp)
   8b3b4:	dec00204 	addi	sp,sp,8
   8b3b8:	f800283a 	ret

0008b3bc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8b3bc:	defffd04 	addi	sp,sp,-12
   8b3c0:	dfc00215 	stw	ra,8(sp)
   8b3c4:	df000115 	stw	fp,4(sp)
   8b3c8:	df000104 	addi	fp,sp,4
   8b3cc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_0, cpu_0);
   8b3d0:	008cb240 	call	8cb24 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8b3d4:	00800044 	movi	r2,1
   8b3d8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8b3dc:	e037883a 	mov	sp,fp
   8b3e0:	dfc00117 	ldw	ra,4(sp)
   8b3e4:	df000017 	ldw	fp,0(sp)
   8b3e8:	dec00204 	addi	sp,sp,8
   8b3ec:	f800283a 	ret

0008b3f0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8b3f0:	defffe04 	addi	sp,sp,-8
   8b3f4:	dfc00115 	stw	ra,4(sp)
   8b3f8:	df000015 	stw	fp,0(sp)
   8b3fc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   8b400:	01000274 	movhi	r4,9
   8b404:	21381904 	addi	r4,r4,-8092
   8b408:	000b883a 	mov	r5,zero
   8b40c:	000d883a 	mov	r6,zero
   8b410:	008b5b40 	call	8b5b4 <altera_avalon_jtag_uart_init>
   8b414:	01000274 	movhi	r4,9
   8b418:	21380f04 	addi	r4,r4,-8132
   8b41c:	008b4340 	call	8b434 <alt_dev_reg>
}
   8b420:	e037883a 	mov	sp,fp
   8b424:	dfc00117 	ldw	ra,4(sp)
   8b428:	df000017 	ldw	fp,0(sp)
   8b42c:	dec00204 	addi	sp,sp,8
   8b430:	f800283a 	ret

0008b434 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   8b434:	defffd04 	addi	sp,sp,-12
   8b438:	dfc00215 	stw	ra,8(sp)
   8b43c:	df000115 	stw	fp,4(sp)
   8b440:	df000104 	addi	fp,sp,4
   8b444:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8b448:	e13fff17 	ldw	r4,-4(fp)
   8b44c:	01400274 	movhi	r5,9
   8b450:	297c2f04 	addi	r5,r5,-3908
   8b454:	008c0880 	call	8c088 <alt_dev_llist_insert>
}
   8b458:	e037883a 	mov	sp,fp
   8b45c:	dfc00117 	ldw	ra,4(sp)
   8b460:	df000017 	ldw	fp,0(sp)
   8b464:	dec00204 	addi	sp,sp,8
   8b468:	f800283a 	ret

0008b46c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8b46c:	defffa04 	addi	sp,sp,-24
   8b470:	dfc00515 	stw	ra,20(sp)
   8b474:	df000415 	stw	fp,16(sp)
   8b478:	df000404 	addi	fp,sp,16
   8b47c:	e13ffd15 	stw	r4,-12(fp)
   8b480:	e17ffe15 	stw	r5,-8(fp)
   8b484:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8b488:	e0bffd17 	ldw	r2,-12(fp)
   8b48c:	10800017 	ldw	r2,0(r2)
   8b490:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8b494:	e0bffc17 	ldw	r2,-16(fp)
   8b498:	11000a04 	addi	r4,r2,40
   8b49c:	e0bffd17 	ldw	r2,-12(fp)
   8b4a0:	11c00217 	ldw	r7,8(r2)
   8b4a4:	e17ffe17 	ldw	r5,-8(fp)
   8b4a8:	e1bfff17 	ldw	r6,-4(fp)
   8b4ac:	008bab40 	call	8bab4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   8b4b0:	e037883a 	mov	sp,fp
   8b4b4:	dfc00117 	ldw	ra,4(sp)
   8b4b8:	df000017 	ldw	fp,0(sp)
   8b4bc:	dec00204 	addi	sp,sp,8
   8b4c0:	f800283a 	ret

0008b4c4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8b4c4:	defffa04 	addi	sp,sp,-24
   8b4c8:	dfc00515 	stw	ra,20(sp)
   8b4cc:	df000415 	stw	fp,16(sp)
   8b4d0:	df000404 	addi	fp,sp,16
   8b4d4:	e13ffd15 	stw	r4,-12(fp)
   8b4d8:	e17ffe15 	stw	r5,-8(fp)
   8b4dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8b4e0:	e0bffd17 	ldw	r2,-12(fp)
   8b4e4:	10800017 	ldw	r2,0(r2)
   8b4e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8b4ec:	e0bffc17 	ldw	r2,-16(fp)
   8b4f0:	11000a04 	addi	r4,r2,40
   8b4f4:	e0bffd17 	ldw	r2,-12(fp)
   8b4f8:	11c00217 	ldw	r7,8(r2)
   8b4fc:	e17ffe17 	ldw	r5,-8(fp)
   8b500:	e1bfff17 	ldw	r6,-4(fp)
   8b504:	008bcd80 	call	8bcd8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   8b508:	e037883a 	mov	sp,fp
   8b50c:	dfc00117 	ldw	ra,4(sp)
   8b510:	df000017 	ldw	fp,0(sp)
   8b514:	dec00204 	addi	sp,sp,8
   8b518:	f800283a 	ret

0008b51c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   8b51c:	defffc04 	addi	sp,sp,-16
   8b520:	dfc00315 	stw	ra,12(sp)
   8b524:	df000215 	stw	fp,8(sp)
   8b528:	df000204 	addi	fp,sp,8
   8b52c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8b530:	e0bfff17 	ldw	r2,-4(fp)
   8b534:	10800017 	ldw	r2,0(r2)
   8b538:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   8b53c:	e0bffe17 	ldw	r2,-8(fp)
   8b540:	11000a04 	addi	r4,r2,40
   8b544:	e0bfff17 	ldw	r2,-4(fp)
   8b548:	11400217 	ldw	r5,8(r2)
   8b54c:	008b94c0 	call	8b94c <altera_avalon_jtag_uart_close>
}
   8b550:	e037883a 	mov	sp,fp
   8b554:	dfc00117 	ldw	ra,4(sp)
   8b558:	df000017 	ldw	fp,0(sp)
   8b55c:	dec00204 	addi	sp,sp,8
   8b560:	f800283a 	ret

0008b564 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   8b564:	defffa04 	addi	sp,sp,-24
   8b568:	dfc00515 	stw	ra,20(sp)
   8b56c:	df000415 	stw	fp,16(sp)
   8b570:	df000404 	addi	fp,sp,16
   8b574:	e13ffd15 	stw	r4,-12(fp)
   8b578:	e17ffe15 	stw	r5,-8(fp)
   8b57c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   8b580:	e0bffd17 	ldw	r2,-12(fp)
   8b584:	10800017 	ldw	r2,0(r2)
   8b588:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   8b58c:	e0bffc17 	ldw	r2,-16(fp)
   8b590:	11000a04 	addi	r4,r2,40
   8b594:	e17ffe17 	ldw	r5,-8(fp)
   8b598:	e1bfff17 	ldw	r6,-4(fp)
   8b59c:	008b9c00 	call	8b9c0 <altera_avalon_jtag_uart_ioctl>
}
   8b5a0:	e037883a 	mov	sp,fp
   8b5a4:	dfc00117 	ldw	ra,4(sp)
   8b5a8:	df000017 	ldw	fp,0(sp)
   8b5ac:	dec00204 	addi	sp,sp,8
   8b5b0:	f800283a 	ret

0008b5b4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8b5b4:	defffa04 	addi	sp,sp,-24
   8b5b8:	dfc00515 	stw	ra,20(sp)
   8b5bc:	df000415 	stw	fp,16(sp)
   8b5c0:	df000404 	addi	fp,sp,16
   8b5c4:	e13ffd15 	stw	r4,-12(fp)
   8b5c8:	e17ffe15 	stw	r5,-8(fp)
   8b5cc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8b5d0:	e0fffd17 	ldw	r3,-12(fp)
   8b5d4:	00800044 	movi	r2,1
   8b5d8:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8b5dc:	e0bffd17 	ldw	r2,-12(fp)
   8b5e0:	10800017 	ldw	r2,0(r2)
   8b5e4:	11000104 	addi	r4,r2,4
   8b5e8:	e0bffd17 	ldw	r2,-12(fp)
   8b5ec:	10800817 	ldw	r2,32(r2)
   8b5f0:	1007883a 	mov	r3,r2
   8b5f4:	2005883a 	mov	r2,r4
   8b5f8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   8b5fc:	e13ffe17 	ldw	r4,-8(fp)
   8b600:	e17fff17 	ldw	r5,-4(fp)
   8b604:	d8000015 	stw	zero,0(sp)
   8b608:	01800274 	movhi	r6,9
   8b60c:	31ad9d04 	addi	r6,r6,-18828
   8b610:	e1fffd17 	ldw	r7,-12(fp)
   8b614:	008c2800 	call	8c280 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   8b618:	e0bffd17 	ldw	r2,-12(fp)
   8b61c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8b620:	e0bffd17 	ldw	r2,-12(fp)
   8b624:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8b628:	00800274 	movhi	r2,9
   8b62c:	1082d904 	addi	r2,r2,2916
   8b630:	10800017 	ldw	r2,0(r2)
   8b634:	100b883a 	mov	r5,r2
   8b638:	01800274 	movhi	r6,9
   8b63c:	31ae2704 	addi	r6,r6,-18276
   8b640:	e1fffd17 	ldw	r7,-12(fp)
   8b644:	008bf180 	call	8bf18 <alt_alarm_start>
   8b648:	1004403a 	cmpge	r2,r2,zero
   8b64c:	1000041e 	bne	r2,zero,8b660 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   8b650:	e0fffd17 	ldw	r3,-12(fp)
   8b654:	00a00034 	movhi	r2,32768
   8b658:	10bfffc4 	addi	r2,r2,-1
   8b65c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   8b660:	e037883a 	mov	sp,fp
   8b664:	dfc00117 	ldw	ra,4(sp)
   8b668:	df000017 	ldw	fp,0(sp)
   8b66c:	dec00204 	addi	sp,sp,8
   8b670:	f800283a 	ret

0008b674 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   8b674:	defff804 	addi	sp,sp,-32
   8b678:	df000715 	stw	fp,28(sp)
   8b67c:	df000704 	addi	fp,sp,28
   8b680:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   8b684:	e0bfff17 	ldw	r2,-4(fp)
   8b688:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   8b68c:	e0bffe17 	ldw	r2,-8(fp)
   8b690:	10800017 	ldw	r2,0(r2)
   8b694:	e0bffd15 	stw	r2,-12(fp)
   8b698:	00000006 	br	8b69c <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8b69c:	e0bffd17 	ldw	r2,-12(fp)
   8b6a0:	10800104 	addi	r2,r2,4
   8b6a4:	10800037 	ldwio	r2,0(r2)
   8b6a8:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8b6ac:	e0bffc17 	ldw	r2,-16(fp)
   8b6b0:	1080c00c 	andi	r2,r2,768
   8b6b4:	1005003a 	cmpeq	r2,r2,zero
   8b6b8:	1000741e 	bne	r2,zero,8b88c <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   8b6bc:	e0bffc17 	ldw	r2,-16(fp)
   8b6c0:	1080400c 	andi	r2,r2,256
   8b6c4:	1005003a 	cmpeq	r2,r2,zero
   8b6c8:	1000351e 	bne	r2,zero,8b7a0 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   8b6cc:	00800074 	movhi	r2,1
   8b6d0:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8b6d4:	e0bffe17 	ldw	r2,-8(fp)
   8b6d8:	10800a17 	ldw	r2,40(r2)
   8b6dc:	10800044 	addi	r2,r2,1
   8b6e0:	1081ffcc 	andi	r2,r2,2047
   8b6e4:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   8b6e8:	e0bffe17 	ldw	r2,-8(fp)
   8b6ec:	10c00b17 	ldw	r3,44(r2)
   8b6f0:	e0bffa17 	ldw	r2,-24(fp)
   8b6f4:	18801626 	beq	r3,r2,8b750 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8b6f8:	e0bffd17 	ldw	r2,-12(fp)
   8b6fc:	10800037 	ldwio	r2,0(r2)
   8b700:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   8b704:	e0bffb17 	ldw	r2,-20(fp)
   8b708:	10a0000c 	andi	r2,r2,32768
   8b70c:	1005003a 	cmpeq	r2,r2,zero
   8b710:	10000f1e 	bne	r2,zero,8b750 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8b714:	e0bffe17 	ldw	r2,-8(fp)
   8b718:	10c00a17 	ldw	r3,40(r2)
   8b71c:	e0bffb17 	ldw	r2,-20(fp)
   8b720:	1009883a 	mov	r4,r2
   8b724:	e0bffe17 	ldw	r2,-8(fp)
   8b728:	1885883a 	add	r2,r3,r2
   8b72c:	10800e04 	addi	r2,r2,56
   8b730:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8b734:	e0bffe17 	ldw	r2,-8(fp)
   8b738:	10800a17 	ldw	r2,40(r2)
   8b73c:	10800044 	addi	r2,r2,1
   8b740:	10c1ffcc 	andi	r3,r2,2047
   8b744:	e0bffe17 	ldw	r2,-8(fp)
   8b748:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   8b74c:	003fe106 	br	8b6d4 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   8b750:	e0bffb17 	ldw	r2,-20(fp)
   8b754:	10bfffec 	andhi	r2,r2,65535
   8b758:	1005003a 	cmpeq	r2,r2,zero
   8b75c:	1000101e 	bne	r2,zero,8b7a0 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8b760:	e0bffe17 	ldw	r2,-8(fp)
   8b764:	10c00817 	ldw	r3,32(r2)
   8b768:	00bfff84 	movi	r2,-2
   8b76c:	1886703a 	and	r3,r3,r2
   8b770:	e0bffe17 	ldw	r2,-8(fp)
   8b774:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8b778:	e0bffd17 	ldw	r2,-12(fp)
   8b77c:	11000104 	addi	r4,r2,4
   8b780:	e0bffe17 	ldw	r2,-8(fp)
   8b784:	10800817 	ldw	r2,32(r2)
   8b788:	1007883a 	mov	r3,r2
   8b78c:	2005883a 	mov	r2,r4
   8b790:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8b794:	e0bffd17 	ldw	r2,-12(fp)
   8b798:	10800104 	addi	r2,r2,4
   8b79c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   8b7a0:	e0bffc17 	ldw	r2,-16(fp)
   8b7a4:	1080800c 	andi	r2,r2,512
   8b7a8:	1005003a 	cmpeq	r2,r2,zero
   8b7ac:	103fbb1e 	bne	r2,zero,8b69c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   8b7b0:	e0bffc17 	ldw	r2,-16(fp)
   8b7b4:	10bfffec 	andhi	r2,r2,65535
   8b7b8:	1004d43a 	srli	r2,r2,16
   8b7bc:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   8b7c0:	00001506 	br	8b818 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8b7c4:	e13ffd17 	ldw	r4,-12(fp)
   8b7c8:	e0bffe17 	ldw	r2,-8(fp)
   8b7cc:	10c00d17 	ldw	r3,52(r2)
   8b7d0:	e0bffe17 	ldw	r2,-8(fp)
   8b7d4:	1885883a 	add	r2,r3,r2
   8b7d8:	10820e04 	addi	r2,r2,2104
   8b7dc:	10800003 	ldbu	r2,0(r2)
   8b7e0:	10c03fcc 	andi	r3,r2,255
   8b7e4:	18c0201c 	xori	r3,r3,128
   8b7e8:	18ffe004 	addi	r3,r3,-128
   8b7ec:	2005883a 	mov	r2,r4
   8b7f0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8b7f4:	e0bffe17 	ldw	r2,-8(fp)
   8b7f8:	10800d17 	ldw	r2,52(r2)
   8b7fc:	10800044 	addi	r2,r2,1
   8b800:	10c1ffcc 	andi	r3,r2,2047
   8b804:	e0bffe17 	ldw	r2,-8(fp)
   8b808:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   8b80c:	e0bff917 	ldw	r2,-28(fp)
   8b810:	10bfffc4 	addi	r2,r2,-1
   8b814:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   8b818:	e0bff917 	ldw	r2,-28(fp)
   8b81c:	1005003a 	cmpeq	r2,r2,zero
   8b820:	1000051e 	bne	r2,zero,8b838 <altera_avalon_jtag_uart_irq+0x1c4>
   8b824:	e0bffe17 	ldw	r2,-8(fp)
   8b828:	10c00d17 	ldw	r3,52(r2)
   8b82c:	e0bffe17 	ldw	r2,-8(fp)
   8b830:	10800c17 	ldw	r2,48(r2)
   8b834:	18bfe31e 	bne	r3,r2,8b7c4 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   8b838:	e0bff917 	ldw	r2,-28(fp)
   8b83c:	1005003a 	cmpeq	r2,r2,zero
   8b840:	103f961e 	bne	r2,zero,8b69c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8b844:	e0bffe17 	ldw	r2,-8(fp)
   8b848:	10c00817 	ldw	r3,32(r2)
   8b84c:	00bfff44 	movi	r2,-3
   8b850:	1886703a 	and	r3,r3,r2
   8b854:	e0bffe17 	ldw	r2,-8(fp)
   8b858:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8b85c:	e0bffe17 	ldw	r2,-8(fp)
   8b860:	10800017 	ldw	r2,0(r2)
   8b864:	11000104 	addi	r4,r2,4
   8b868:	e0bffe17 	ldw	r2,-8(fp)
   8b86c:	10800817 	ldw	r2,32(r2)
   8b870:	1007883a 	mov	r3,r2
   8b874:	2005883a 	mov	r2,r4
   8b878:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8b87c:	e0bffd17 	ldw	r2,-12(fp)
   8b880:	10800104 	addi	r2,r2,4
   8b884:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   8b888:	003f8406 	br	8b69c <altera_avalon_jtag_uart_irq+0x28>
}
   8b88c:	e037883a 	mov	sp,fp
   8b890:	df000017 	ldw	fp,0(sp)
   8b894:	dec00104 	addi	sp,sp,4
   8b898:	f800283a 	ret

0008b89c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   8b89c:	defffc04 	addi	sp,sp,-16
   8b8a0:	df000315 	stw	fp,12(sp)
   8b8a4:	df000304 	addi	fp,sp,12
   8b8a8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   8b8ac:	e0bfff17 	ldw	r2,-4(fp)
   8b8b0:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   8b8b4:	e0bffe17 	ldw	r2,-8(fp)
   8b8b8:	10800017 	ldw	r2,0(r2)
   8b8bc:	10800104 	addi	r2,r2,4
   8b8c0:	10800037 	ldwio	r2,0(r2)
   8b8c4:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8b8c8:	e0bffd17 	ldw	r2,-12(fp)
   8b8cc:	1081000c 	andi	r2,r2,1024
   8b8d0:	1005003a 	cmpeq	r2,r2,zero
   8b8d4:	10000c1e 	bne	r2,zero,8b908 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8b8d8:	e0bffe17 	ldw	r2,-8(fp)
   8b8dc:	10800017 	ldw	r2,0(r2)
   8b8e0:	11000104 	addi	r4,r2,4
   8b8e4:	e0bffe17 	ldw	r2,-8(fp)
   8b8e8:	10800817 	ldw	r2,32(r2)
   8b8ec:	10810014 	ori	r2,r2,1024
   8b8f0:	1007883a 	mov	r3,r2
   8b8f4:	2005883a 	mov	r2,r4
   8b8f8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   8b8fc:	e0bffe17 	ldw	r2,-8(fp)
   8b900:	10000915 	stw	zero,36(r2)
   8b904:	00000a06 	br	8b930 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   8b908:	e0bffe17 	ldw	r2,-8(fp)
   8b90c:	10c00917 	ldw	r3,36(r2)
   8b910:	00a00034 	movhi	r2,32768
   8b914:	10bfff04 	addi	r2,r2,-4
   8b918:	10c00536 	bltu	r2,r3,8b930 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   8b91c:	e0bffe17 	ldw	r2,-8(fp)
   8b920:	10800917 	ldw	r2,36(r2)
   8b924:	10c00044 	addi	r3,r2,1
   8b928:	e0bffe17 	ldw	r2,-8(fp)
   8b92c:	10c00915 	stw	r3,36(r2)
   8b930:	00800274 	movhi	r2,9
   8b934:	1082d904 	addi	r2,r2,2916
   8b938:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   8b93c:	e037883a 	mov	sp,fp
   8b940:	df000017 	ldw	fp,0(sp)
   8b944:	dec00104 	addi	sp,sp,4
   8b948:	f800283a 	ret

0008b94c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   8b94c:	defffc04 	addi	sp,sp,-16
   8b950:	df000315 	stw	fp,12(sp)
   8b954:	df000304 	addi	fp,sp,12
   8b958:	e13ffd15 	stw	r4,-12(fp)
   8b95c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8b960:	00000706 	br	8b980 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   8b964:	e0bffe17 	ldw	r2,-8(fp)
   8b968:	1090000c 	andi	r2,r2,16384
   8b96c:	1005003a 	cmpeq	r2,r2,zero
   8b970:	1000031e 	bne	r2,zero,8b980 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   8b974:	00bffd44 	movi	r2,-11
   8b978:	e0bfff15 	stw	r2,-4(fp)
   8b97c:	00000b06 	br	8b9ac <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8b980:	e0bffd17 	ldw	r2,-12(fp)
   8b984:	10c00d17 	ldw	r3,52(r2)
   8b988:	e0bffd17 	ldw	r2,-12(fp)
   8b98c:	10800c17 	ldw	r2,48(r2)
   8b990:	18800526 	beq	r3,r2,8b9a8 <altera_avalon_jtag_uart_close+0x5c>
   8b994:	e0bffd17 	ldw	r2,-12(fp)
   8b998:	10c00917 	ldw	r3,36(r2)
   8b99c:	e0bffd17 	ldw	r2,-12(fp)
   8b9a0:	10800117 	ldw	r2,4(r2)
   8b9a4:	18bfef36 	bltu	r3,r2,8b964 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8b9a8:	e03fff15 	stw	zero,-4(fp)
   8b9ac:	e0bfff17 	ldw	r2,-4(fp)
}
   8b9b0:	e037883a 	mov	sp,fp
   8b9b4:	df000017 	ldw	fp,0(sp)
   8b9b8:	dec00104 	addi	sp,sp,4
   8b9bc:	f800283a 	ret

0008b9c0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   8b9c0:	defff804 	addi	sp,sp,-32
   8b9c4:	df000715 	stw	fp,28(sp)
   8b9c8:	df000704 	addi	fp,sp,28
   8b9cc:	e13ffb15 	stw	r4,-20(fp)
   8b9d0:	e17ffc15 	stw	r5,-16(fp)
   8b9d4:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   8b9d8:	00bff9c4 	movi	r2,-25
   8b9dc:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   8b9e0:	e0bffc17 	ldw	r2,-16(fp)
   8b9e4:	e0bfff15 	stw	r2,-4(fp)
   8b9e8:	e0ffff17 	ldw	r3,-4(fp)
   8b9ec:	189a8060 	cmpeqi	r2,r3,27137
   8b9f0:	1000041e 	bne	r2,zero,8ba04 <altera_avalon_jtag_uart_ioctl+0x44>
   8b9f4:	e0ffff17 	ldw	r3,-4(fp)
   8b9f8:	189a80a0 	cmpeqi	r2,r3,27138
   8b9fc:	10001b1e 	bne	r2,zero,8ba6c <altera_avalon_jtag_uart_ioctl+0xac>
   8ba00:	00002706 	br	8baa0 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   8ba04:	e0bffb17 	ldw	r2,-20(fp)
   8ba08:	10c00117 	ldw	r3,4(r2)
   8ba0c:	00a00034 	movhi	r2,32768
   8ba10:	10bfffc4 	addi	r2,r2,-1
   8ba14:	18802226 	beq	r3,r2,8baa0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   8ba18:	e0bffd17 	ldw	r2,-12(fp)
   8ba1c:	10800017 	ldw	r2,0(r2)
   8ba20:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   8ba24:	e0bff917 	ldw	r2,-28(fp)
   8ba28:	10800090 	cmplti	r2,r2,2
   8ba2c:	1000071e 	bne	r2,zero,8ba4c <altera_avalon_jtag_uart_ioctl+0x8c>
   8ba30:	e0fff917 	ldw	r3,-28(fp)
   8ba34:	00a00034 	movhi	r2,32768
   8ba38:	10bfffc4 	addi	r2,r2,-1
   8ba3c:	18800326 	beq	r3,r2,8ba4c <altera_avalon_jtag_uart_ioctl+0x8c>
   8ba40:	e0bff917 	ldw	r2,-28(fp)
   8ba44:	e0bffe15 	stw	r2,-8(fp)
   8ba48:	00000306 	br	8ba58 <altera_avalon_jtag_uart_ioctl+0x98>
   8ba4c:	00e00034 	movhi	r3,32768
   8ba50:	18ffff84 	addi	r3,r3,-2
   8ba54:	e0fffe15 	stw	r3,-8(fp)
   8ba58:	e0bffb17 	ldw	r2,-20(fp)
   8ba5c:	e0fffe17 	ldw	r3,-8(fp)
   8ba60:	10c00115 	stw	r3,4(r2)
      rc = 0;
   8ba64:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   8ba68:	00000d06 	br	8baa0 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   8ba6c:	e0bffb17 	ldw	r2,-20(fp)
   8ba70:	10c00117 	ldw	r3,4(r2)
   8ba74:	00a00034 	movhi	r2,32768
   8ba78:	10bfffc4 	addi	r2,r2,-1
   8ba7c:	18800826 	beq	r3,r2,8baa0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8ba80:	e13ffd17 	ldw	r4,-12(fp)
   8ba84:	e0bffb17 	ldw	r2,-20(fp)
   8ba88:	10c00917 	ldw	r3,36(r2)
   8ba8c:	e0bffb17 	ldw	r2,-20(fp)
   8ba90:	10800117 	ldw	r2,4(r2)
   8ba94:	1885803a 	cmpltu	r2,r3,r2
   8ba98:	20800015 	stw	r2,0(r4)
      rc = 0;
   8ba9c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   8baa0:	e0bffa17 	ldw	r2,-24(fp)
}
   8baa4:	e037883a 	mov	sp,fp
   8baa8:	df000017 	ldw	fp,0(sp)
   8baac:	dec00104 	addi	sp,sp,4
   8bab0:	f800283a 	ret

0008bab4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8bab4:	defff204 	addi	sp,sp,-56
   8bab8:	dfc00d15 	stw	ra,52(sp)
   8babc:	df000c15 	stw	fp,48(sp)
   8bac0:	df000c04 	addi	fp,sp,48
   8bac4:	e13ffb15 	stw	r4,-20(fp)
   8bac8:	e17ffc15 	stw	r5,-16(fp)
   8bacc:	e1bffd15 	stw	r6,-12(fp)
   8bad0:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   8bad4:	e0bffc17 	ldw	r2,-16(fp)
   8bad8:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8badc:	00004806 	br	8bc00 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8bae0:	e0bffb17 	ldw	r2,-20(fp)
   8bae4:	10800a17 	ldw	r2,40(r2)
   8bae8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   8baec:	e0bffb17 	ldw	r2,-20(fp)
   8baf0:	10800b17 	ldw	r2,44(r2)
   8baf4:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   8baf8:	e0fff717 	ldw	r3,-36(fp)
   8bafc:	e0bff617 	ldw	r2,-40(fp)
   8bb00:	18800536 	bltu	r3,r2,8bb18 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   8bb04:	e0bff717 	ldw	r2,-36(fp)
   8bb08:	e0fff617 	ldw	r3,-40(fp)
   8bb0c:	10c5c83a 	sub	r2,r2,r3
   8bb10:	e0bff815 	stw	r2,-32(fp)
   8bb14:	00000406 	br	8bb28 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   8bb18:	00820004 	movi	r2,2048
   8bb1c:	e0fff617 	ldw	r3,-40(fp)
   8bb20:	10c5c83a 	sub	r2,r2,r3
   8bb24:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   8bb28:	e0bff817 	ldw	r2,-32(fp)
   8bb2c:	1005003a 	cmpeq	r2,r2,zero
   8bb30:	10001f1e 	bne	r2,zero,8bbb0 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   8bb34:	e0fffd17 	ldw	r3,-12(fp)
   8bb38:	e0bff817 	ldw	r2,-32(fp)
   8bb3c:	1880022e 	bgeu	r3,r2,8bb48 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   8bb40:	e0bffd17 	ldw	r2,-12(fp)
   8bb44:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   8bb48:	e0bffb17 	ldw	r2,-20(fp)
   8bb4c:	10c00e04 	addi	r3,r2,56
   8bb50:	e0bff617 	ldw	r2,-40(fp)
   8bb54:	1887883a 	add	r3,r3,r2
   8bb58:	e0bffa17 	ldw	r2,-24(fp)
   8bb5c:	1009883a 	mov	r4,r2
   8bb60:	180b883a 	mov	r5,r3
   8bb64:	e1bff817 	ldw	r6,-32(fp)
   8bb68:	00860900 	call	86090 <memcpy>
      ptr   += n;
   8bb6c:	e0fff817 	ldw	r3,-32(fp)
   8bb70:	e0bffa17 	ldw	r2,-24(fp)
   8bb74:	10c5883a 	add	r2,r2,r3
   8bb78:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   8bb7c:	e0fffd17 	ldw	r3,-12(fp)
   8bb80:	e0bff817 	ldw	r2,-32(fp)
   8bb84:	1885c83a 	sub	r2,r3,r2
   8bb88:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8bb8c:	e0fff617 	ldw	r3,-40(fp)
   8bb90:	e0bff817 	ldw	r2,-32(fp)
   8bb94:	1885883a 	add	r2,r3,r2
   8bb98:	10c1ffcc 	andi	r3,r2,2047
   8bb9c:	e0bffb17 	ldw	r2,-20(fp)
   8bba0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   8bba4:	e0bffd17 	ldw	r2,-12(fp)
   8bba8:	10800048 	cmpgei	r2,r2,1
   8bbac:	103fcc1e 	bne	r2,zero,8bae0 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   8bbb0:	e0fffa17 	ldw	r3,-24(fp)
   8bbb4:	e0bffc17 	ldw	r2,-16(fp)
   8bbb8:	1880141e 	bne	r3,r2,8bc0c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8bbbc:	e0bffe17 	ldw	r2,-8(fp)
   8bbc0:	1090000c 	andi	r2,r2,16384
   8bbc4:	1004c03a 	cmpne	r2,r2,zero
   8bbc8:	1000101e 	bne	r2,zero,8bc0c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   8bbcc:	e0bffb17 	ldw	r2,-20(fp)
   8bbd0:	10c00a17 	ldw	r3,40(r2)
   8bbd4:	e0bff717 	ldw	r2,-36(fp)
   8bbd8:	1880051e 	bne	r3,r2,8bbf0 <altera_avalon_jtag_uart_read+0x13c>
   8bbdc:	e0bffb17 	ldw	r2,-20(fp)
   8bbe0:	10c00917 	ldw	r3,36(r2)
   8bbe4:	e0bffb17 	ldw	r2,-20(fp)
   8bbe8:	10800117 	ldw	r2,4(r2)
   8bbec:	18bff736 	bltu	r3,r2,8bbcc <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   8bbf0:	e0bffb17 	ldw	r2,-20(fp)
   8bbf4:	10c00a17 	ldw	r3,40(r2)
   8bbf8:	e0bff717 	ldw	r2,-36(fp)
   8bbfc:	18800326 	beq	r3,r2,8bc0c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8bc00:	e0bffd17 	ldw	r2,-12(fp)
   8bc04:	10800048 	cmpgei	r2,r2,1
   8bc08:	103fb51e 	bne	r2,zero,8bae0 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   8bc0c:	e0fffa17 	ldw	r3,-24(fp)
   8bc10:	e0bffc17 	ldw	r2,-16(fp)
   8bc14:	18801926 	beq	r3,r2,8bc7c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8bc18:	0005303a 	rdctl	r2,status
   8bc1c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8bc20:	e0fff517 	ldw	r3,-44(fp)
   8bc24:	00bfff84 	movi	r2,-2
   8bc28:	1884703a 	and	r2,r3,r2
   8bc2c:	1001703a 	wrctl	status,r2
  
  return context;
   8bc30:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   8bc34:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8bc38:	e0bffb17 	ldw	r2,-20(fp)
   8bc3c:	10800817 	ldw	r2,32(r2)
   8bc40:	10c00054 	ori	r3,r2,1
   8bc44:	e0bffb17 	ldw	r2,-20(fp)
   8bc48:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8bc4c:	e0bffb17 	ldw	r2,-20(fp)
   8bc50:	10800017 	ldw	r2,0(r2)
   8bc54:	11000104 	addi	r4,r2,4
   8bc58:	e0bffb17 	ldw	r2,-20(fp)
   8bc5c:	10800817 	ldw	r2,32(r2)
   8bc60:	1007883a 	mov	r3,r2
   8bc64:	2005883a 	mov	r2,r4
   8bc68:	10c00035 	stwio	r3,0(r2)
   8bc6c:	e0bff917 	ldw	r2,-28(fp)
   8bc70:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8bc74:	e0bff417 	ldw	r2,-48(fp)
   8bc78:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   8bc7c:	e0fffa17 	ldw	r3,-24(fp)
   8bc80:	e0bffc17 	ldw	r2,-16(fp)
   8bc84:	18800526 	beq	r3,r2,8bc9c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   8bc88:	e0fffa17 	ldw	r3,-24(fp)
   8bc8c:	e0bffc17 	ldw	r2,-16(fp)
   8bc90:	1887c83a 	sub	r3,r3,r2
   8bc94:	e0ffff15 	stw	r3,-4(fp)
   8bc98:	00000906 	br	8bcc0 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   8bc9c:	e0bffe17 	ldw	r2,-8(fp)
   8bca0:	1090000c 	andi	r2,r2,16384
   8bca4:	1005003a 	cmpeq	r2,r2,zero
   8bca8:	1000031e 	bne	r2,zero,8bcb8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   8bcac:	00bffd44 	movi	r2,-11
   8bcb0:	e0bfff15 	stw	r2,-4(fp)
   8bcb4:	00000206 	br	8bcc0 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   8bcb8:	00bffec4 	movi	r2,-5
   8bcbc:	e0bfff15 	stw	r2,-4(fp)
   8bcc0:	e0bfff17 	ldw	r2,-4(fp)
}
   8bcc4:	e037883a 	mov	sp,fp
   8bcc8:	dfc00117 	ldw	ra,4(sp)
   8bccc:	df000017 	ldw	fp,0(sp)
   8bcd0:	dec00204 	addi	sp,sp,8
   8bcd4:	f800283a 	ret

0008bcd8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8bcd8:	defff204 	addi	sp,sp,-56
   8bcdc:	dfc00d15 	stw	ra,52(sp)
   8bce0:	df000c15 	stw	fp,48(sp)
   8bce4:	df000c04 	addi	fp,sp,48
   8bce8:	e13ffb15 	stw	r4,-20(fp)
   8bcec:	e17ffc15 	stw	r5,-16(fp)
   8bcf0:	e1bffd15 	stw	r6,-12(fp)
   8bcf4:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   8bcf8:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   8bcfc:	e0bffc17 	ldw	r2,-16(fp)
   8bd00:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8bd04:	00003a06 	br	8bdf0 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8bd08:	e0bffb17 	ldw	r2,-20(fp)
   8bd0c:	10800c17 	ldw	r2,48(r2)
   8bd10:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   8bd14:	e0bffb17 	ldw	r2,-20(fp)
   8bd18:	10800d17 	ldw	r2,52(r2)
   8bd1c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   8bd20:	e0fffa17 	ldw	r3,-24(fp)
   8bd24:	e0bff917 	ldw	r2,-28(fp)
   8bd28:	1880062e 	bgeu	r3,r2,8bd44 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   8bd2c:	e0fff917 	ldw	r3,-28(fp)
   8bd30:	e0bffa17 	ldw	r2,-24(fp)
   8bd34:	1885c83a 	sub	r2,r3,r2
   8bd38:	10bfffc4 	addi	r2,r2,-1
   8bd3c:	e0bff815 	stw	r2,-32(fp)
   8bd40:	00000c06 	br	8bd74 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   8bd44:	e0bff917 	ldw	r2,-28(fp)
   8bd48:	1005003a 	cmpeq	r2,r2,zero
   8bd4c:	1000051e 	bne	r2,zero,8bd64 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8bd50:	00820004 	movi	r2,2048
   8bd54:	e0fffa17 	ldw	r3,-24(fp)
   8bd58:	10c5c83a 	sub	r2,r2,r3
   8bd5c:	e0bff815 	stw	r2,-32(fp)
   8bd60:	00000406 	br	8bd74 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8bd64:	0081ffc4 	movi	r2,2047
   8bd68:	e0fffa17 	ldw	r3,-24(fp)
   8bd6c:	10c5c83a 	sub	r2,r2,r3
   8bd70:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   8bd74:	e0bff817 	ldw	r2,-32(fp)
   8bd78:	1005003a 	cmpeq	r2,r2,zero
   8bd7c:	10001f1e 	bne	r2,zero,8bdfc <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   8bd80:	e0fffd17 	ldw	r3,-12(fp)
   8bd84:	e0bff817 	ldw	r2,-32(fp)
   8bd88:	1880022e 	bgeu	r3,r2,8bd94 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   8bd8c:	e0bffd17 	ldw	r2,-12(fp)
   8bd90:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   8bd94:	e0bffb17 	ldw	r2,-20(fp)
   8bd98:	10c20e04 	addi	r3,r2,2104
   8bd9c:	e0bffa17 	ldw	r2,-24(fp)
   8bda0:	1885883a 	add	r2,r3,r2
   8bda4:	e0fffc17 	ldw	r3,-16(fp)
   8bda8:	1009883a 	mov	r4,r2
   8bdac:	180b883a 	mov	r5,r3
   8bdb0:	e1bff817 	ldw	r6,-32(fp)
   8bdb4:	00860900 	call	86090 <memcpy>
      ptr   += n;
   8bdb8:	e0fff817 	ldw	r3,-32(fp)
   8bdbc:	e0bffc17 	ldw	r2,-16(fp)
   8bdc0:	10c5883a 	add	r2,r2,r3
   8bdc4:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   8bdc8:	e0fffd17 	ldw	r3,-12(fp)
   8bdcc:	e0bff817 	ldw	r2,-32(fp)
   8bdd0:	1885c83a 	sub	r2,r3,r2
   8bdd4:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8bdd8:	e0fffa17 	ldw	r3,-24(fp)
   8bddc:	e0bff817 	ldw	r2,-32(fp)
   8bde0:	1885883a 	add	r2,r3,r2
   8bde4:	10c1ffcc 	andi	r3,r2,2047
   8bde8:	e0bffb17 	ldw	r2,-20(fp)
   8bdec:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8bdf0:	e0bffd17 	ldw	r2,-12(fp)
   8bdf4:	10800048 	cmpgei	r2,r2,1
   8bdf8:	103fc31e 	bne	r2,zero,8bd08 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8bdfc:	0005303a 	rdctl	r2,status
   8be00:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8be04:	e0fff517 	ldw	r3,-44(fp)
   8be08:	00bfff84 	movi	r2,-2
   8be0c:	1884703a 	and	r2,r3,r2
   8be10:	1001703a 	wrctl	status,r2
  
  return context;
   8be14:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   8be18:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8be1c:	e0bffb17 	ldw	r2,-20(fp)
   8be20:	10800817 	ldw	r2,32(r2)
   8be24:	10c00094 	ori	r3,r2,2
   8be28:	e0bffb17 	ldw	r2,-20(fp)
   8be2c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8be30:	e0bffb17 	ldw	r2,-20(fp)
   8be34:	10800017 	ldw	r2,0(r2)
   8be38:	11000104 	addi	r4,r2,4
   8be3c:	e0bffb17 	ldw	r2,-20(fp)
   8be40:	10800817 	ldw	r2,32(r2)
   8be44:	1007883a 	mov	r3,r2
   8be48:	2005883a 	mov	r2,r4
   8be4c:	10c00035 	stwio	r3,0(r2)
   8be50:	e0bff717 	ldw	r2,-36(fp)
   8be54:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8be58:	e0bff417 	ldw	r2,-48(fp)
   8be5c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   8be60:	e0bffd17 	ldw	r2,-12(fp)
   8be64:	10800050 	cmplti	r2,r2,1
   8be68:	1000111e 	bne	r2,zero,8beb0 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   8be6c:	e0bffe17 	ldw	r2,-8(fp)
   8be70:	1090000c 	andi	r2,r2,16384
   8be74:	1004c03a 	cmpne	r2,r2,zero
   8be78:	1000101e 	bne	r2,zero,8bebc <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   8be7c:	e0bffb17 	ldw	r2,-20(fp)
   8be80:	10c00d17 	ldw	r3,52(r2)
   8be84:	e0bff917 	ldw	r2,-28(fp)
   8be88:	1880051e 	bne	r3,r2,8bea0 <altera_avalon_jtag_uart_write+0x1c8>
   8be8c:	e0bffb17 	ldw	r2,-20(fp)
   8be90:	10c00917 	ldw	r3,36(r2)
   8be94:	e0bffb17 	ldw	r2,-20(fp)
   8be98:	10800117 	ldw	r2,4(r2)
   8be9c:	18bff736 	bltu	r3,r2,8be7c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   8bea0:	e0bffb17 	ldw	r2,-20(fp)
   8bea4:	10c00d17 	ldw	r3,52(r2)
   8bea8:	e0bff917 	ldw	r2,-28(fp)
   8beac:	18800326 	beq	r3,r2,8bebc <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   8beb0:	e0bffd17 	ldw	r2,-12(fp)
   8beb4:	10800048 	cmpgei	r2,r2,1
   8beb8:	103fcd1e 	bne	r2,zero,8bdf0 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   8bebc:	e0fffc17 	ldw	r3,-16(fp)
   8bec0:	e0bff617 	ldw	r2,-40(fp)
   8bec4:	18800526 	beq	r3,r2,8bedc <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   8bec8:	e0fffc17 	ldw	r3,-16(fp)
   8becc:	e0bff617 	ldw	r2,-40(fp)
   8bed0:	1887c83a 	sub	r3,r3,r2
   8bed4:	e0ffff15 	stw	r3,-4(fp)
   8bed8:	00000906 	br	8bf00 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   8bedc:	e0bffe17 	ldw	r2,-8(fp)
   8bee0:	1090000c 	andi	r2,r2,16384
   8bee4:	1005003a 	cmpeq	r2,r2,zero
   8bee8:	1000031e 	bne	r2,zero,8bef8 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   8beec:	00bffd44 	movi	r2,-11
   8bef0:	e0bfff15 	stw	r2,-4(fp)
   8bef4:	00000206 	br	8bf00 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   8bef8:	00bffec4 	movi	r2,-5
   8befc:	e0bfff15 	stw	r2,-4(fp)
   8bf00:	e0bfff17 	ldw	r2,-4(fp)
}
   8bf04:	e037883a 	mov	sp,fp
   8bf08:	dfc00117 	ldw	ra,4(sp)
   8bf0c:	df000017 	ldw	fp,0(sp)
   8bf10:	dec00204 	addi	sp,sp,8
   8bf14:	f800283a 	ret

0008bf18 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   8bf18:	defff404 	addi	sp,sp,-48
   8bf1c:	df000b15 	stw	fp,44(sp)
   8bf20:	df000b04 	addi	fp,sp,44
   8bf24:	e13ffb15 	stw	r4,-20(fp)
   8bf28:	e17ffc15 	stw	r5,-16(fp)
   8bf2c:	e1bffd15 	stw	r6,-12(fp)
   8bf30:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   8bf34:	e03ff915 	stw	zero,-28(fp)
   8bf38:	00800274 	movhi	r2,9
   8bf3c:	1082d904 	addi	r2,r2,2916
   8bf40:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   8bf44:	1005003a 	cmpeq	r2,r2,zero
   8bf48:	1000411e 	bne	r2,zero,8c050 <alt_alarm_start+0x138>
  {
    if (alarm)
   8bf4c:	e0bffb17 	ldw	r2,-20(fp)
   8bf50:	1005003a 	cmpeq	r2,r2,zero
   8bf54:	10003b1e 	bne	r2,zero,8c044 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   8bf58:	e0fffb17 	ldw	r3,-20(fp)
   8bf5c:	e0bffd17 	ldw	r2,-12(fp)
   8bf60:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   8bf64:	e0fffb17 	ldw	r3,-20(fp)
   8bf68:	e0bffe17 	ldw	r2,-8(fp)
   8bf6c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8bf70:	0005303a 	rdctl	r2,status
   8bf74:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8bf78:	e0fff817 	ldw	r3,-32(fp)
   8bf7c:	00bfff84 	movi	r2,-2
   8bf80:	1884703a 	and	r2,r3,r2
   8bf84:	1001703a 	wrctl	status,r2
  
  return context;
   8bf88:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   8bf8c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   8bf90:	00800274 	movhi	r2,9
   8bf94:	1082da04 	addi	r2,r2,2920
   8bf98:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   8bf9c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   8bfa0:	e0fffc17 	ldw	r3,-16(fp)
   8bfa4:	e0bff917 	ldw	r2,-28(fp)
   8bfa8:	1885883a 	add	r2,r3,r2
   8bfac:	10c00044 	addi	r3,r2,1
   8bfb0:	e0bffb17 	ldw	r2,-20(fp)
   8bfb4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   8bfb8:	e0bffb17 	ldw	r2,-20(fp)
   8bfbc:	10c00217 	ldw	r3,8(r2)
   8bfc0:	e0bff917 	ldw	r2,-28(fp)
   8bfc4:	1880042e 	bgeu	r3,r2,8bfd8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   8bfc8:	e0fffb17 	ldw	r3,-20(fp)
   8bfcc:	00800044 	movi	r2,1
   8bfd0:	18800405 	stb	r2,16(r3)
   8bfd4:	00000206 	br	8bfe0 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   8bfd8:	e0bffb17 	ldw	r2,-20(fp)
   8bfdc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   8bfe0:	e0fffb17 	ldw	r3,-20(fp)
   8bfe4:	00800274 	movhi	r2,9
   8bfe8:	10bc3504 	addi	r2,r2,-3884
   8bfec:	e0bff615 	stw	r2,-40(fp)
   8bff0:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8bff4:	e0fff717 	ldw	r3,-36(fp)
   8bff8:	e0bff617 	ldw	r2,-40(fp)
   8bffc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   8c000:	e0bff617 	ldw	r2,-40(fp)
   8c004:	10c00017 	ldw	r3,0(r2)
   8c008:	e0bff717 	ldw	r2,-36(fp)
   8c00c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8c010:	e0bff617 	ldw	r2,-40(fp)
   8c014:	10c00017 	ldw	r3,0(r2)
   8c018:	e0bff717 	ldw	r2,-36(fp)
   8c01c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   8c020:	e0fff617 	ldw	r3,-40(fp)
   8c024:	e0bff717 	ldw	r2,-36(fp)
   8c028:	18800015 	stw	r2,0(r3)
   8c02c:	e0bffa17 	ldw	r2,-24(fp)
   8c030:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c034:	e0bff517 	ldw	r2,-44(fp)
   8c038:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   8c03c:	e03fff15 	stw	zero,-4(fp)
   8c040:	00000506 	br	8c058 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   8c044:	00bffa84 	movi	r2,-22
   8c048:	e0bfff15 	stw	r2,-4(fp)
   8c04c:	00000206 	br	8c058 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   8c050:	00bfde84 	movi	r2,-134
   8c054:	e0bfff15 	stw	r2,-4(fp)
   8c058:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   8c05c:	e037883a 	mov	sp,fp
   8c060:	df000017 	ldw	fp,0(sp)
   8c064:	dec00104 	addi	sp,sp,4
   8c068:	f800283a 	ret

0008c06c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   8c06c:	deffff04 	addi	sp,sp,-4
   8c070:	df000015 	stw	fp,0(sp)
   8c074:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   8c078:	e037883a 	mov	sp,fp
   8c07c:	df000017 	ldw	fp,0(sp)
   8c080:	dec00104 	addi	sp,sp,4
   8c084:	f800283a 	ret

0008c088 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   8c088:	defff904 	addi	sp,sp,-28
   8c08c:	dfc00615 	stw	ra,24(sp)
   8c090:	df000515 	stw	fp,20(sp)
   8c094:	df000504 	addi	fp,sp,20
   8c098:	e13ffd15 	stw	r4,-12(fp)
   8c09c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   8c0a0:	e0bffd17 	ldw	r2,-12(fp)
   8c0a4:	1005003a 	cmpeq	r2,r2,zero
   8c0a8:	1000041e 	bne	r2,zero,8c0bc <alt_dev_llist_insert+0x34>
   8c0ac:	e0bffd17 	ldw	r2,-12(fp)
   8c0b0:	10800217 	ldw	r2,8(r2)
   8c0b4:	1004c03a 	cmpne	r2,r2,zero
   8c0b8:	1000071e 	bne	r2,zero,8c0d8 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   8c0bc:	008c13c0 	call	8c13c <alt_get_errno>
   8c0c0:	1007883a 	mov	r3,r2
   8c0c4:	00800584 	movi	r2,22
   8c0c8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   8c0cc:	00bffa84 	movi	r2,-22
   8c0d0:	e0bfff15 	stw	r2,-4(fp)
   8c0d4:	00001306 	br	8c124 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   8c0d8:	e0fffd17 	ldw	r3,-12(fp)
   8c0dc:	e0bffe17 	ldw	r2,-8(fp)
   8c0e0:	e0bffb15 	stw	r2,-20(fp)
   8c0e4:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8c0e8:	e0fffc17 	ldw	r3,-16(fp)
   8c0ec:	e0bffb17 	ldw	r2,-20(fp)
   8c0f0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   8c0f4:	e0bffb17 	ldw	r2,-20(fp)
   8c0f8:	10c00017 	ldw	r3,0(r2)
   8c0fc:	e0bffc17 	ldw	r2,-16(fp)
   8c100:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8c104:	e0bffb17 	ldw	r2,-20(fp)
   8c108:	10c00017 	ldw	r3,0(r2)
   8c10c:	e0bffc17 	ldw	r2,-16(fp)
   8c110:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   8c114:	e0fffb17 	ldw	r3,-20(fp)
   8c118:	e0bffc17 	ldw	r2,-16(fp)
   8c11c:	18800015 	stw	r2,0(r3)

  return 0;  
   8c120:	e03fff15 	stw	zero,-4(fp)
   8c124:	e0bfff17 	ldw	r2,-4(fp)
}
   8c128:	e037883a 	mov	sp,fp
   8c12c:	dfc00117 	ldw	ra,4(sp)
   8c130:	df000017 	ldw	fp,0(sp)
   8c134:	dec00204 	addi	sp,sp,8
   8c138:	f800283a 	ret

0008c13c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8c13c:	defffd04 	addi	sp,sp,-12
   8c140:	dfc00215 	stw	ra,8(sp)
   8c144:	df000115 	stw	fp,4(sp)
   8c148:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8c14c:	00800274 	movhi	r2,9
   8c150:	10bc3204 	addi	r2,r2,-3896
   8c154:	10800017 	ldw	r2,0(r2)
   8c158:	1005003a 	cmpeq	r2,r2,zero
   8c15c:	1000061e 	bne	r2,zero,8c178 <alt_get_errno+0x3c>
   8c160:	00800274 	movhi	r2,9
   8c164:	10bc3204 	addi	r2,r2,-3896
   8c168:	10800017 	ldw	r2,0(r2)
   8c16c:	103ee83a 	callr	r2
   8c170:	e0bfff15 	stw	r2,-4(fp)
   8c174:	00000306 	br	8c184 <alt_get_errno+0x48>
   8c178:	00800274 	movhi	r2,9
   8c17c:	1082d404 	addi	r2,r2,2896
   8c180:	e0bfff15 	stw	r2,-4(fp)
   8c184:	e0bfff17 	ldw	r2,-4(fp)
}
   8c188:	e037883a 	mov	sp,fp
   8c18c:	dfc00117 	ldw	ra,4(sp)
   8c190:	df000017 	ldw	fp,0(sp)
   8c194:	dec00204 	addi	sp,sp,8
   8c198:	f800283a 	ret

0008c19c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   8c19c:	defffd04 	addi	sp,sp,-12
   8c1a0:	dfc00215 	stw	ra,8(sp)
   8c1a4:	df000115 	stw	fp,4(sp)
   8c1a8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8c1ac:	00bfff04 	movi	r2,-4
   8c1b0:	00c00274 	movhi	r3,9
   8c1b4:	18f49004 	addi	r3,r3,-11712
   8c1b8:	1885883a 	add	r2,r3,r2
   8c1bc:	e0bfff15 	stw	r2,-4(fp)
   8c1c0:	00000606 	br	8c1dc <_do_ctors+0x40>
        (*ctor) (); 
   8c1c4:	e0bfff17 	ldw	r2,-4(fp)
   8c1c8:	10800017 	ldw	r2,0(r2)
   8c1cc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8c1d0:	e0bfff17 	ldw	r2,-4(fp)
   8c1d4:	10bfff04 	addi	r2,r2,-4
   8c1d8:	e0bfff15 	stw	r2,-4(fp)
   8c1dc:	e0ffff17 	ldw	r3,-4(fp)
   8c1e0:	00800274 	movhi	r2,9
   8c1e4:	10b48f04 	addi	r2,r2,-11716
   8c1e8:	18bff62e 	bgeu	r3,r2,8c1c4 <_do_ctors+0x28>
        (*ctor) (); 
}
   8c1ec:	e037883a 	mov	sp,fp
   8c1f0:	dfc00117 	ldw	ra,4(sp)
   8c1f4:	df000017 	ldw	fp,0(sp)
   8c1f8:	dec00204 	addi	sp,sp,8
   8c1fc:	f800283a 	ret

0008c200 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   8c200:	defffd04 	addi	sp,sp,-12
   8c204:	dfc00215 	stw	ra,8(sp)
   8c208:	df000115 	stw	fp,4(sp)
   8c20c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8c210:	00bfff04 	movi	r2,-4
   8c214:	00c00274 	movhi	r3,9
   8c218:	18f49004 	addi	r3,r3,-11712
   8c21c:	1885883a 	add	r2,r3,r2
   8c220:	e0bfff15 	stw	r2,-4(fp)
   8c224:	00000606 	br	8c240 <_do_dtors+0x40>
        (*dtor) (); 
   8c228:	e0bfff17 	ldw	r2,-4(fp)
   8c22c:	10800017 	ldw	r2,0(r2)
   8c230:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8c234:	e0bfff17 	ldw	r2,-4(fp)
   8c238:	10bfff04 	addi	r2,r2,-4
   8c23c:	e0bfff15 	stw	r2,-4(fp)
   8c240:	e0ffff17 	ldw	r3,-4(fp)
   8c244:	00800274 	movhi	r2,9
   8c248:	10b49004 	addi	r2,r2,-11712
   8c24c:	18bff62e 	bgeu	r3,r2,8c228 <_do_dtors+0x28>
        (*dtor) (); 
}
   8c250:	e037883a 	mov	sp,fp
   8c254:	dfc00117 	ldw	ra,4(sp)
   8c258:	df000017 	ldw	fp,0(sp)
   8c25c:	dec00204 	addi	sp,sp,8
   8c260:	f800283a 	ret

0008c264 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   8c264:	deffff04 	addi	sp,sp,-4
   8c268:	df000015 	stw	fp,0(sp)
   8c26c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   8c270:	e037883a 	mov	sp,fp
   8c274:	df000017 	ldw	fp,0(sp)
   8c278:	dec00104 	addi	sp,sp,4
   8c27c:	f800283a 	ret

0008c280 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8c280:	defff904 	addi	sp,sp,-28
   8c284:	dfc00615 	stw	ra,24(sp)
   8c288:	df000515 	stw	fp,20(sp)
   8c28c:	df000504 	addi	fp,sp,20
   8c290:	e13ffc15 	stw	r4,-16(fp)
   8c294:	e17ffd15 	stw	r5,-12(fp)
   8c298:	e1bffe15 	stw	r6,-8(fp)
   8c29c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   8c2a0:	e0800217 	ldw	r2,8(fp)
   8c2a4:	d8800015 	stw	r2,0(sp)
   8c2a8:	e13ffc17 	ldw	r4,-16(fp)
   8c2ac:	e17ffd17 	ldw	r5,-12(fp)
   8c2b0:	e1bffe17 	ldw	r6,-8(fp)
   8c2b4:	e1ffff17 	ldw	r7,-4(fp)
   8c2b8:	008c4540 	call	8c454 <alt_iic_isr_register>
}  
   8c2bc:	e037883a 	mov	sp,fp
   8c2c0:	dfc00117 	ldw	ra,4(sp)
   8c2c4:	df000017 	ldw	fp,0(sp)
   8c2c8:	dec00204 	addi	sp,sp,8
   8c2cc:	f800283a 	ret

0008c2d0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   8c2d0:	defff904 	addi	sp,sp,-28
   8c2d4:	df000615 	stw	fp,24(sp)
   8c2d8:	df000604 	addi	fp,sp,24
   8c2dc:	e13ffe15 	stw	r4,-8(fp)
   8c2e0:	e17fff15 	stw	r5,-4(fp)
   8c2e4:	e0bfff17 	ldw	r2,-4(fp)
   8c2e8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c2ec:	0005303a 	rdctl	r2,status
   8c2f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c2f4:	e0fffb17 	ldw	r3,-20(fp)
   8c2f8:	00bfff84 	movi	r2,-2
   8c2fc:	1884703a 	and	r2,r3,r2
   8c300:	1001703a 	wrctl	status,r2
  
  return context;
   8c304:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8c308:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   8c30c:	e0fffc17 	ldw	r3,-16(fp)
   8c310:	00800044 	movi	r2,1
   8c314:	10c4983a 	sll	r2,r2,r3
   8c318:	1007883a 	mov	r3,r2
   8c31c:	00800274 	movhi	r2,9
   8c320:	1082d504 	addi	r2,r2,2900
   8c324:	10800017 	ldw	r2,0(r2)
   8c328:	1886b03a 	or	r3,r3,r2
   8c32c:	00800274 	movhi	r2,9
   8c330:	1082d504 	addi	r2,r2,2900
   8c334:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8c338:	00800274 	movhi	r2,9
   8c33c:	1082d504 	addi	r2,r2,2900
   8c340:	10800017 	ldw	r2,0(r2)
   8c344:	100170fa 	wrctl	ienable,r2
   8c348:	e0bffd17 	ldw	r2,-12(fp)
   8c34c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c350:	e0bffa17 	ldw	r2,-24(fp)
   8c354:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8c358:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   8c35c:	e037883a 	mov	sp,fp
   8c360:	df000017 	ldw	fp,0(sp)
   8c364:	dec00104 	addi	sp,sp,4
   8c368:	f800283a 	ret

0008c36c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   8c36c:	defff904 	addi	sp,sp,-28
   8c370:	df000615 	stw	fp,24(sp)
   8c374:	df000604 	addi	fp,sp,24
   8c378:	e13ffe15 	stw	r4,-8(fp)
   8c37c:	e17fff15 	stw	r5,-4(fp)
   8c380:	e0bfff17 	ldw	r2,-4(fp)
   8c384:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c388:	0005303a 	rdctl	r2,status
   8c38c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c390:	e0fffb17 	ldw	r3,-20(fp)
   8c394:	00bfff84 	movi	r2,-2
   8c398:	1884703a 	and	r2,r3,r2
   8c39c:	1001703a 	wrctl	status,r2
  
  return context;
   8c3a0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8c3a4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   8c3a8:	e0fffc17 	ldw	r3,-16(fp)
   8c3ac:	00800044 	movi	r2,1
   8c3b0:	10c4983a 	sll	r2,r2,r3
   8c3b4:	0084303a 	nor	r2,zero,r2
   8c3b8:	1007883a 	mov	r3,r2
   8c3bc:	00800274 	movhi	r2,9
   8c3c0:	1082d504 	addi	r2,r2,2900
   8c3c4:	10800017 	ldw	r2,0(r2)
   8c3c8:	1886703a 	and	r3,r3,r2
   8c3cc:	00800274 	movhi	r2,9
   8c3d0:	1082d504 	addi	r2,r2,2900
   8c3d4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8c3d8:	00800274 	movhi	r2,9
   8c3dc:	1082d504 	addi	r2,r2,2900
   8c3e0:	10800017 	ldw	r2,0(r2)
   8c3e4:	100170fa 	wrctl	ienable,r2
   8c3e8:	e0bffd17 	ldw	r2,-12(fp)
   8c3ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c3f0:	e0bffa17 	ldw	r2,-24(fp)
   8c3f4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8c3f8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   8c3fc:	e037883a 	mov	sp,fp
   8c400:	df000017 	ldw	fp,0(sp)
   8c404:	dec00104 	addi	sp,sp,4
   8c408:	f800283a 	ret

0008c40c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   8c40c:	defffc04 	addi	sp,sp,-16
   8c410:	df000315 	stw	fp,12(sp)
   8c414:	df000304 	addi	fp,sp,12
   8c418:	e13ffe15 	stw	r4,-8(fp)
   8c41c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   8c420:	000530fa 	rdctl	r2,ienable
   8c424:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   8c428:	e0ffff17 	ldw	r3,-4(fp)
   8c42c:	00800044 	movi	r2,1
   8c430:	10c4983a 	sll	r2,r2,r3
   8c434:	1007883a 	mov	r3,r2
   8c438:	e0bffd17 	ldw	r2,-12(fp)
   8c43c:	1884703a 	and	r2,r3,r2
   8c440:	1004c03a 	cmpne	r2,r2,zero
}
   8c444:	e037883a 	mov	sp,fp
   8c448:	df000017 	ldw	fp,0(sp)
   8c44c:	dec00104 	addi	sp,sp,4
   8c450:	f800283a 	ret

0008c454 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8c454:	defff404 	addi	sp,sp,-48
   8c458:	dfc00b15 	stw	ra,44(sp)
   8c45c:	df000a15 	stw	fp,40(sp)
   8c460:	df000a04 	addi	fp,sp,40
   8c464:	e13ffb15 	stw	r4,-20(fp)
   8c468:	e17ffc15 	stw	r5,-16(fp)
   8c46c:	e1bffd15 	stw	r6,-12(fp)
   8c470:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   8c474:	00bffa84 	movi	r2,-22
   8c478:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   8c47c:	e0bffc17 	ldw	r2,-16(fp)
   8c480:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8c484:	e0bff917 	ldw	r2,-28(fp)
   8c488:	10800808 	cmpgei	r2,r2,32
   8c48c:	1000291e 	bne	r2,zero,8c534 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c490:	0005303a 	rdctl	r2,status
   8c494:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c498:	e0fff717 	ldw	r3,-36(fp)
   8c49c:	00bfff84 	movi	r2,-2
   8c4a0:	1884703a 	and	r2,r3,r2
   8c4a4:	1001703a 	wrctl	status,r2
  
  return context;
   8c4a8:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   8c4ac:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   8c4b0:	e0bff917 	ldw	r2,-28(fp)
   8c4b4:	00c00274 	movhi	r3,9
   8c4b8:	18c2e504 	addi	r3,r3,2964
   8c4bc:	100490fa 	slli	r2,r2,3
   8c4c0:	10c7883a 	add	r3,r2,r3
   8c4c4:	e0bffd17 	ldw	r2,-12(fp)
   8c4c8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   8c4cc:	e0bff917 	ldw	r2,-28(fp)
   8c4d0:	00c00274 	movhi	r3,9
   8c4d4:	18c2e504 	addi	r3,r3,2964
   8c4d8:	100490fa 	slli	r2,r2,3
   8c4dc:	10c5883a 	add	r2,r2,r3
   8c4e0:	10c00104 	addi	r3,r2,4
   8c4e4:	e0bffe17 	ldw	r2,-8(fp)
   8c4e8:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8c4ec:	e0bffd17 	ldw	r2,-12(fp)
   8c4f0:	1005003a 	cmpeq	r2,r2,zero
   8c4f4:	1000051e 	bne	r2,zero,8c50c <alt_iic_isr_register+0xb8>
   8c4f8:	e17ff917 	ldw	r5,-28(fp)
   8c4fc:	e13ffb17 	ldw	r4,-20(fp)
   8c500:	008c2d00 	call	8c2d0 <alt_ic_irq_enable>
   8c504:	e0bfff15 	stw	r2,-4(fp)
   8c508:	00000406 	br	8c51c <alt_iic_isr_register+0xc8>
   8c50c:	e17ff917 	ldw	r5,-28(fp)
   8c510:	e13ffb17 	ldw	r4,-20(fp)
   8c514:	008c36c0 	call	8c36c <alt_ic_irq_disable>
   8c518:	e0bfff15 	stw	r2,-4(fp)
   8c51c:	e0bfff17 	ldw	r2,-4(fp)
   8c520:	e0bffa15 	stw	r2,-24(fp)
   8c524:	e0bff817 	ldw	r2,-32(fp)
   8c528:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c52c:	e0bff617 	ldw	r2,-40(fp)
   8c530:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   8c534:	e0bffa17 	ldw	r2,-24(fp)
}
   8c538:	e037883a 	mov	sp,fp
   8c53c:	dfc00117 	ldw	ra,4(sp)
   8c540:	df000017 	ldw	fp,0(sp)
   8c544:	dec00204 	addi	sp,sp,8
   8c548:	f800283a 	ret

0008c54c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   8c54c:	defff804 	addi	sp,sp,-32
   8c550:	dfc00715 	stw	ra,28(sp)
   8c554:	df000615 	stw	fp,24(sp)
   8c558:	dc000515 	stw	r16,20(sp)
   8c55c:	df000504 	addi	fp,sp,20
   8c560:	e13ffc15 	stw	r4,-16(fp)
   8c564:	e17ffd15 	stw	r5,-12(fp)
   8c568:	e1bffe15 	stw	r6,-8(fp)
   8c56c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   8c570:	e13ffd17 	ldw	r4,-12(fp)
   8c574:	e17ffe17 	ldw	r5,-8(fp)
   8c578:	e1bfff17 	ldw	r6,-4(fp)
   8c57c:	008c7940 	call	8c794 <open>
   8c580:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   8c584:	e0bffb17 	ldw	r2,-20(fp)
   8c588:	1004803a 	cmplt	r2,r2,zero
   8c58c:	10001f1e 	bne	r2,zero,8c60c <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   8c590:	e13ffb17 	ldw	r4,-20(fp)
   8c594:	04000274 	movhi	r16,9
   8c598:	8437af04 	addi	r16,r16,-8516
   8c59c:	01400304 	movi	r5,12
   8c5a0:	0089ffc0 	call	89ffc <__mulsi3>
   8c5a4:	1405883a 	add	r2,r2,r16
   8c5a8:	10c00017 	ldw	r3,0(r2)
   8c5ac:	e0bffc17 	ldw	r2,-16(fp)
   8c5b0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   8c5b4:	e13ffb17 	ldw	r4,-20(fp)
   8c5b8:	04000274 	movhi	r16,9
   8c5bc:	8437af04 	addi	r16,r16,-8516
   8c5c0:	01400304 	movi	r5,12
   8c5c4:	0089ffc0 	call	89ffc <__mulsi3>
   8c5c8:	1405883a 	add	r2,r2,r16
   8c5cc:	10800104 	addi	r2,r2,4
   8c5d0:	10c00017 	ldw	r3,0(r2)
   8c5d4:	e0bffc17 	ldw	r2,-16(fp)
   8c5d8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   8c5dc:	e13ffb17 	ldw	r4,-20(fp)
   8c5e0:	04000274 	movhi	r16,9
   8c5e4:	8437af04 	addi	r16,r16,-8516
   8c5e8:	01400304 	movi	r5,12
   8c5ec:	0089ffc0 	call	89ffc <__mulsi3>
   8c5f0:	1405883a 	add	r2,r2,r16
   8c5f4:	10800204 	addi	r2,r2,8
   8c5f8:	10c00017 	ldw	r3,0(r2)
   8c5fc:	e0bffc17 	ldw	r2,-16(fp)
   8c600:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   8c604:	e13ffb17 	ldw	r4,-20(fp)
   8c608:	008b1040 	call	8b104 <alt_release_fd>
  }
} 
   8c60c:	e037883a 	mov	sp,fp
   8c610:	dfc00217 	ldw	ra,8(sp)
   8c614:	df000117 	ldw	fp,4(sp)
   8c618:	dc000017 	ldw	r16,0(sp)
   8c61c:	dec00304 	addi	sp,sp,12
   8c620:	f800283a 	ret

0008c624 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   8c624:	defffb04 	addi	sp,sp,-20
   8c628:	dfc00415 	stw	ra,16(sp)
   8c62c:	df000315 	stw	fp,12(sp)
   8c630:	df000304 	addi	fp,sp,12
   8c634:	e13ffd15 	stw	r4,-12(fp)
   8c638:	e17ffe15 	stw	r5,-8(fp)
   8c63c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   8c640:	01000274 	movhi	r4,9
   8c644:	2137b204 	addi	r4,r4,-8504
   8c648:	e17ffd17 	ldw	r5,-12(fp)
   8c64c:	01800044 	movi	r6,1
   8c650:	01c07fc4 	movi	r7,511
   8c654:	008c54c0 	call	8c54c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   8c658:	01000274 	movhi	r4,9
   8c65c:	2137af04 	addi	r4,r4,-8516
   8c660:	e17ffe17 	ldw	r5,-8(fp)
   8c664:	000d883a 	mov	r6,zero
   8c668:	01c07fc4 	movi	r7,511
   8c66c:	008c54c0 	call	8c54c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   8c670:	01000274 	movhi	r4,9
   8c674:	2137b504 	addi	r4,r4,-8492
   8c678:	e17fff17 	ldw	r5,-4(fp)
   8c67c:	01800044 	movi	r6,1
   8c680:	01c07fc4 	movi	r7,511
   8c684:	008c54c0 	call	8c54c <alt_open_fd>
}  
   8c688:	e037883a 	mov	sp,fp
   8c68c:	dfc00117 	ldw	ra,4(sp)
   8c690:	df000017 	ldw	fp,0(sp)
   8c694:	dec00204 	addi	sp,sp,8
   8c698:	f800283a 	ret

0008c69c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   8c69c:	defffa04 	addi	sp,sp,-24
   8c6a0:	dfc00515 	stw	ra,20(sp)
   8c6a4:	df000415 	stw	fp,16(sp)
   8c6a8:	dc000315 	stw	r16,12(sp)
   8c6ac:	df000304 	addi	fp,sp,12
   8c6b0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   8c6b4:	e0bffe17 	ldw	r2,-8(fp)
   8c6b8:	10800217 	ldw	r2,8(r2)
   8c6bc:	10d00034 	orhi	r3,r2,16384
   8c6c0:	e0bffe17 	ldw	r2,-8(fp)
   8c6c4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8c6c8:	e03ffd15 	stw	zero,-12(fp)
   8c6cc:	00002306 	br	8c75c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   8c6d0:	e13ffd17 	ldw	r4,-12(fp)
   8c6d4:	04000274 	movhi	r16,9
   8c6d8:	8437af04 	addi	r16,r16,-8516
   8c6dc:	01400304 	movi	r5,12
   8c6e0:	0089ffc0 	call	89ffc <__mulsi3>
   8c6e4:	1405883a 	add	r2,r2,r16
   8c6e8:	10c00017 	ldw	r3,0(r2)
   8c6ec:	e0bffe17 	ldw	r2,-8(fp)
   8c6f0:	10800017 	ldw	r2,0(r2)
   8c6f4:	1880161e 	bne	r3,r2,8c750 <alt_file_locked+0xb4>
   8c6f8:	e13ffd17 	ldw	r4,-12(fp)
   8c6fc:	04000274 	movhi	r16,9
   8c700:	8437af04 	addi	r16,r16,-8516
   8c704:	01400304 	movi	r5,12
   8c708:	0089ffc0 	call	89ffc <__mulsi3>
   8c70c:	1405883a 	add	r2,r2,r16
   8c710:	10800204 	addi	r2,r2,8
   8c714:	10800017 	ldw	r2,0(r2)
   8c718:	1004403a 	cmpge	r2,r2,zero
   8c71c:	10000c1e 	bne	r2,zero,8c750 <alt_file_locked+0xb4>
   8c720:	e13ffd17 	ldw	r4,-12(fp)
   8c724:	01400304 	movi	r5,12
   8c728:	0089ffc0 	call	89ffc <__mulsi3>
   8c72c:	1007883a 	mov	r3,r2
   8c730:	00800274 	movhi	r2,9
   8c734:	10b7af04 	addi	r2,r2,-8516
   8c738:	1887883a 	add	r3,r3,r2
   8c73c:	e0bffe17 	ldw	r2,-8(fp)
   8c740:	18800326 	beq	r3,r2,8c750 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   8c744:	00bffcc4 	movi	r2,-13
   8c748:	e0bfff15 	stw	r2,-4(fp)
   8c74c:	00000a06 	br	8c778 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8c750:	e0bffd17 	ldw	r2,-12(fp)
   8c754:	10800044 	addi	r2,r2,1
   8c758:	e0bffd15 	stw	r2,-12(fp)
   8c75c:	00800274 	movhi	r2,9
   8c760:	10bc3104 	addi	r2,r2,-3900
   8c764:	10800017 	ldw	r2,0(r2)
   8c768:	1007883a 	mov	r3,r2
   8c76c:	e0bffd17 	ldw	r2,-12(fp)
   8c770:	18bfd72e 	bgeu	r3,r2,8c6d0 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   8c774:	e03fff15 	stw	zero,-4(fp)
   8c778:	e0bfff17 	ldw	r2,-4(fp)
}
   8c77c:	e037883a 	mov	sp,fp
   8c780:	dfc00217 	ldw	ra,8(sp)
   8c784:	df000117 	ldw	fp,4(sp)
   8c788:	dc000017 	ldw	r16,0(sp)
   8c78c:	dec00304 	addi	sp,sp,12
   8c790:	f800283a 	ret

0008c794 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   8c794:	defff404 	addi	sp,sp,-48
   8c798:	dfc00b15 	stw	ra,44(sp)
   8c79c:	df000a15 	stw	fp,40(sp)
   8c7a0:	df000a04 	addi	fp,sp,40
   8c7a4:	e13ffb15 	stw	r4,-20(fp)
   8c7a8:	e17ffc15 	stw	r5,-16(fp)
   8c7ac:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   8c7b0:	00bfffc4 	movi	r2,-1
   8c7b4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   8c7b8:	00bffb44 	movi	r2,-19
   8c7bc:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   8c7c0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   8c7c4:	e13ffb17 	ldw	r4,-20(fp)
   8c7c8:	01400274 	movhi	r5,9
   8c7cc:	297c2f04 	addi	r5,r5,-3908
   8c7d0:	008cb440 	call	8cb44 <alt_find_dev>
   8c7d4:	e0bffa15 	stw	r2,-24(fp)
   8c7d8:	e0bffa17 	ldw	r2,-24(fp)
   8c7dc:	1004c03a 	cmpne	r2,r2,zero
   8c7e0:	1000051e 	bne	r2,zero,8c7f8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   8c7e4:	e13ffb17 	ldw	r4,-20(fp)
   8c7e8:	008cbd80 	call	8cbd8 <alt_find_file>
   8c7ec:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   8c7f0:	00800044 	movi	r2,1
   8c7f4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   8c7f8:	e0bffa17 	ldw	r2,-24(fp)
   8c7fc:	1005003a 	cmpeq	r2,r2,zero
   8c800:	1000311e 	bne	r2,zero,8c8c8 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   8c804:	e13ffa17 	ldw	r4,-24(fp)
   8c808:	008ccf80 	call	8ccf8 <alt_get_fd>
   8c80c:	e0bff815 	stw	r2,-32(fp)
   8c810:	e0bff817 	ldw	r2,-32(fp)
   8c814:	1004403a 	cmpge	r2,r2,zero
   8c818:	1000031e 	bne	r2,zero,8c828 <open+0x94>
    {
      status = index;
   8c81c:	e0bff817 	ldw	r2,-32(fp)
   8c820:	e0bff715 	stw	r2,-36(fp)
   8c824:	00002a06 	br	8c8d0 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   8c828:	e13ff817 	ldw	r4,-32(fp)
   8c82c:	01400304 	movi	r5,12
   8c830:	0089ffc0 	call	89ffc <__mulsi3>
   8c834:	1007883a 	mov	r3,r2
   8c838:	00800274 	movhi	r2,9
   8c83c:	10b7af04 	addi	r2,r2,-8516
   8c840:	1885883a 	add	r2,r3,r2
   8c844:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   8c848:	e0fffc17 	ldw	r3,-16(fp)
   8c84c:	00900034 	movhi	r2,16384
   8c850:	10bfffc4 	addi	r2,r2,-1
   8c854:	1886703a 	and	r3,r3,r2
   8c858:	e0bff917 	ldw	r2,-28(fp)
   8c85c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   8c860:	e0bff617 	ldw	r2,-40(fp)
   8c864:	1004c03a 	cmpne	r2,r2,zero
   8c868:	1000061e 	bne	r2,zero,8c884 <open+0xf0>
   8c86c:	e13ff917 	ldw	r4,-28(fp)
   8c870:	008c69c0 	call	8c69c <alt_file_locked>
   8c874:	e0bff715 	stw	r2,-36(fp)
   8c878:	e0bff717 	ldw	r2,-36(fp)
   8c87c:	1004803a 	cmplt	r2,r2,zero
   8c880:	1000131e 	bne	r2,zero,8c8d0 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   8c884:	e0bffa17 	ldw	r2,-24(fp)
   8c888:	10800317 	ldw	r2,12(r2)
   8c88c:	1005003a 	cmpeq	r2,r2,zero
   8c890:	1000091e 	bne	r2,zero,8c8b8 <open+0x124>
   8c894:	e0bffa17 	ldw	r2,-24(fp)
   8c898:	10800317 	ldw	r2,12(r2)
   8c89c:	e13ff917 	ldw	r4,-28(fp)
   8c8a0:	e17ffb17 	ldw	r5,-20(fp)
   8c8a4:	e1bffc17 	ldw	r6,-16(fp)
   8c8a8:	e1fffd17 	ldw	r7,-12(fp)
   8c8ac:	103ee83a 	callr	r2
   8c8b0:	e0bfff15 	stw	r2,-4(fp)
   8c8b4:	00000106 	br	8c8bc <open+0x128>
   8c8b8:	e03fff15 	stw	zero,-4(fp)
   8c8bc:	e0bfff17 	ldw	r2,-4(fp)
   8c8c0:	e0bff715 	stw	r2,-36(fp)
   8c8c4:	00000206 	br	8c8d0 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   8c8c8:	00bffb44 	movi	r2,-19
   8c8cc:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   8c8d0:	e0bff717 	ldw	r2,-36(fp)
   8c8d4:	1004403a 	cmpge	r2,r2,zero
   8c8d8:	1000091e 	bne	r2,zero,8c900 <open+0x16c>
  {
    alt_release_fd (index);  
   8c8dc:	e13ff817 	ldw	r4,-32(fp)
   8c8e0:	008b1040 	call	8b104 <alt_release_fd>
    ALT_ERRNO = -status;
   8c8e4:	008c9200 	call	8c920 <alt_get_errno>
   8c8e8:	e0fff717 	ldw	r3,-36(fp)
   8c8ec:	00c7c83a 	sub	r3,zero,r3
   8c8f0:	10c00015 	stw	r3,0(r2)
    return -1;
   8c8f4:	00bfffc4 	movi	r2,-1
   8c8f8:	e0bffe15 	stw	r2,-8(fp)
   8c8fc:	00000206 	br	8c908 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   8c900:	e0bff817 	ldw	r2,-32(fp)
   8c904:	e0bffe15 	stw	r2,-8(fp)
   8c908:	e0bffe17 	ldw	r2,-8(fp)
}
   8c90c:	e037883a 	mov	sp,fp
   8c910:	dfc00117 	ldw	ra,4(sp)
   8c914:	df000017 	ldw	fp,0(sp)
   8c918:	dec00204 	addi	sp,sp,8
   8c91c:	f800283a 	ret

0008c920 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8c920:	defffd04 	addi	sp,sp,-12
   8c924:	dfc00215 	stw	ra,8(sp)
   8c928:	df000115 	stw	fp,4(sp)
   8c92c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8c930:	00800274 	movhi	r2,9
   8c934:	10bc3204 	addi	r2,r2,-3896
   8c938:	10800017 	ldw	r2,0(r2)
   8c93c:	1005003a 	cmpeq	r2,r2,zero
   8c940:	1000061e 	bne	r2,zero,8c95c <alt_get_errno+0x3c>
   8c944:	00800274 	movhi	r2,9
   8c948:	10bc3204 	addi	r2,r2,-3896
   8c94c:	10800017 	ldw	r2,0(r2)
   8c950:	103ee83a 	callr	r2
   8c954:	e0bfff15 	stw	r2,-4(fp)
   8c958:	00000306 	br	8c968 <alt_get_errno+0x48>
   8c95c:	00800274 	movhi	r2,9
   8c960:	1082d404 	addi	r2,r2,2896
   8c964:	e0bfff15 	stw	r2,-4(fp)
   8c968:	e0bfff17 	ldw	r2,-4(fp)
}
   8c96c:	e037883a 	mov	sp,fp
   8c970:	dfc00117 	ldw	ra,4(sp)
   8c974:	df000017 	ldw	fp,0(sp)
   8c978:	dec00204 	addi	sp,sp,8
   8c97c:	f800283a 	ret

0008c980 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   8c980:	defffa04 	addi	sp,sp,-24
   8c984:	df000515 	stw	fp,20(sp)
   8c988:	df000504 	addi	fp,sp,20
   8c98c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c990:	0005303a 	rdctl	r2,status
   8c994:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c998:	e0fffd17 	ldw	r3,-12(fp)
   8c99c:	00bfff84 	movi	r2,-2
   8c9a0:	1884703a 	and	r2,r3,r2
   8c9a4:	1001703a 	wrctl	status,r2
  
  return context;
   8c9a8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   8c9ac:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   8c9b0:	e0bfff17 	ldw	r2,-4(fp)
   8c9b4:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8c9b8:	e0bffc17 	ldw	r2,-16(fp)
   8c9bc:	10c00017 	ldw	r3,0(r2)
   8c9c0:	e0bffc17 	ldw	r2,-16(fp)
   8c9c4:	10800117 	ldw	r2,4(r2)
   8c9c8:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   8c9cc:	e0bffc17 	ldw	r2,-16(fp)
   8c9d0:	10c00117 	ldw	r3,4(r2)
   8c9d4:	e0bffc17 	ldw	r2,-16(fp)
   8c9d8:	10800017 	ldw	r2,0(r2)
   8c9dc:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   8c9e0:	e0fffc17 	ldw	r3,-16(fp)
   8c9e4:	e0bffc17 	ldw	r2,-16(fp)
   8c9e8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   8c9ec:	e0fffc17 	ldw	r3,-16(fp)
   8c9f0:	e0bffc17 	ldw	r2,-16(fp)
   8c9f4:	18800015 	stw	r2,0(r3)
   8c9f8:	e0bffe17 	ldw	r2,-8(fp)
   8c9fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ca00:	e0bffb17 	ldw	r2,-20(fp)
   8ca04:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   8ca08:	e037883a 	mov	sp,fp
   8ca0c:	df000017 	ldw	fp,0(sp)
   8ca10:	dec00104 	addi	sp,sp,4
   8ca14:	f800283a 	ret

0008ca18 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   8ca18:	defffb04 	addi	sp,sp,-20
   8ca1c:	dfc00415 	stw	ra,16(sp)
   8ca20:	df000315 	stw	fp,12(sp)
   8ca24:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   8ca28:	d0a00e17 	ldw	r2,-32712(gp)
   8ca2c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   8ca30:	d0a6b317 	ldw	r2,-25908(gp)
   8ca34:	10800044 	addi	r2,r2,1
   8ca38:	d0a6b315 	stw	r2,-25908(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8ca3c:	00003106 	br	8cb04 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   8ca40:	e0bffe17 	ldw	r2,-8(fp)
   8ca44:	10800017 	ldw	r2,0(r2)
   8ca48:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8ca4c:	e0bffe17 	ldw	r2,-8(fp)
   8ca50:	10800403 	ldbu	r2,16(r2)
   8ca54:	10803fcc 	andi	r2,r2,255
   8ca58:	1005003a 	cmpeq	r2,r2,zero
   8ca5c:	1000051e 	bne	r2,zero,8ca74 <alt_tick+0x5c>
   8ca60:	d0a6b317 	ldw	r2,-25908(gp)
   8ca64:	1004c03a 	cmpne	r2,r2,zero
   8ca68:	1000021e 	bne	r2,zero,8ca74 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   8ca6c:	e0bffe17 	ldw	r2,-8(fp)
   8ca70:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   8ca74:	e0bffe17 	ldw	r2,-8(fp)
   8ca78:	10c00217 	ldw	r3,8(r2)
   8ca7c:	d0a6b317 	ldw	r2,-25908(gp)
   8ca80:	10c01e36 	bltu	r2,r3,8cafc <alt_tick+0xe4>
   8ca84:	e0bffe17 	ldw	r2,-8(fp)
   8ca88:	10800403 	ldbu	r2,16(r2)
   8ca8c:	10803fcc 	andi	r2,r2,255
   8ca90:	1004c03a 	cmpne	r2,r2,zero
   8ca94:	1000191e 	bne	r2,zero,8cafc <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   8ca98:	e0bffe17 	ldw	r2,-8(fp)
   8ca9c:	10c00317 	ldw	r3,12(r2)
   8caa0:	e0bffe17 	ldw	r2,-8(fp)
   8caa4:	11000517 	ldw	r4,20(r2)
   8caa8:	183ee83a 	callr	r3
   8caac:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   8cab0:	e0bffd17 	ldw	r2,-12(fp)
   8cab4:	1004c03a 	cmpne	r2,r2,zero
   8cab8:	1000031e 	bne	r2,zero,8cac8 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   8cabc:	e13ffe17 	ldw	r4,-8(fp)
   8cac0:	008c9800 	call	8c980 <alt_alarm_stop>
   8cac4:	00000d06 	br	8cafc <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   8cac8:	e0bffe17 	ldw	r2,-8(fp)
   8cacc:	10c00217 	ldw	r3,8(r2)
   8cad0:	e0bffd17 	ldw	r2,-12(fp)
   8cad4:	1887883a 	add	r3,r3,r2
   8cad8:	e0bffe17 	ldw	r2,-8(fp)
   8cadc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   8cae0:	e0bffe17 	ldw	r2,-8(fp)
   8cae4:	10c00217 	ldw	r3,8(r2)
   8cae8:	d0a6b317 	ldw	r2,-25908(gp)
   8caec:	1880032e 	bgeu	r3,r2,8cafc <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   8caf0:	e0fffe17 	ldw	r3,-8(fp)
   8caf4:	00800044 	movi	r2,1
   8caf8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   8cafc:	e0bfff17 	ldw	r2,-4(fp)
   8cb00:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8cb04:	d0e00e04 	addi	r3,gp,-32712
   8cb08:	e0bffe17 	ldw	r2,-8(fp)
   8cb0c:	10ffcc1e 	bne	r2,r3,8ca40 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   8cb10:	e037883a 	mov	sp,fp
   8cb14:	dfc00117 	ldw	ra,4(sp)
   8cb18:	df000017 	ldw	fp,0(sp)
   8cb1c:	dec00204 	addi	sp,sp,8
   8cb20:	f800283a 	ret

0008cb24 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   8cb24:	deffff04 	addi	sp,sp,-4
   8cb28:	df000015 	stw	fp,0(sp)
   8cb2c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   8cb30:	000170fa 	wrctl	ienable,zero
}
   8cb34:	e037883a 	mov	sp,fp
   8cb38:	df000017 	ldw	fp,0(sp)
   8cb3c:	dec00104 	addi	sp,sp,4
   8cb40:	f800283a 	ret

0008cb44 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   8cb44:	defff904 	addi	sp,sp,-28
   8cb48:	dfc00615 	stw	ra,24(sp)
   8cb4c:	df000515 	stw	fp,20(sp)
   8cb50:	df000504 	addi	fp,sp,20
   8cb54:	e13ffd15 	stw	r4,-12(fp)
   8cb58:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   8cb5c:	e0bffe17 	ldw	r2,-8(fp)
   8cb60:	10800017 	ldw	r2,0(r2)
   8cb64:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   8cb68:	e13ffd17 	ldw	r4,-12(fp)
   8cb6c:	0080dac0 	call	80dac <strlen>
   8cb70:	10800044 	addi	r2,r2,1
   8cb74:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8cb78:	00000d06 	br	8cbb0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   8cb7c:	e0bffc17 	ldw	r2,-16(fp)
   8cb80:	11000217 	ldw	r4,8(r2)
   8cb84:	e1bffb17 	ldw	r6,-20(fp)
   8cb88:	e17ffd17 	ldw	r5,-12(fp)
   8cb8c:	008ce140 	call	8ce14 <memcmp>
   8cb90:	1004c03a 	cmpne	r2,r2,zero
   8cb94:	1000031e 	bne	r2,zero,8cba4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   8cb98:	e0bffc17 	ldw	r2,-16(fp)
   8cb9c:	e0bfff15 	stw	r2,-4(fp)
   8cba0:	00000706 	br	8cbc0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   8cba4:	e0bffc17 	ldw	r2,-16(fp)
   8cba8:	10800017 	ldw	r2,0(r2)
   8cbac:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8cbb0:	e0fffe17 	ldw	r3,-8(fp)
   8cbb4:	e0bffc17 	ldw	r2,-16(fp)
   8cbb8:	10fff01e 	bne	r2,r3,8cb7c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   8cbbc:	e03fff15 	stw	zero,-4(fp)
   8cbc0:	e0bfff17 	ldw	r2,-4(fp)
}
   8cbc4:	e037883a 	mov	sp,fp
   8cbc8:	dfc00117 	ldw	ra,4(sp)
   8cbcc:	df000017 	ldw	fp,0(sp)
   8cbd0:	dec00204 	addi	sp,sp,8
   8cbd4:	f800283a 	ret

0008cbd8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   8cbd8:	defffa04 	addi	sp,sp,-24
   8cbdc:	dfc00515 	stw	ra,20(sp)
   8cbe0:	df000415 	stw	fp,16(sp)
   8cbe4:	df000404 	addi	fp,sp,16
   8cbe8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   8cbec:	00800274 	movhi	r2,9
   8cbf0:	10bc2d04 	addi	r2,r2,-3916
   8cbf4:	10800017 	ldw	r2,0(r2)
   8cbf8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8cbfc:	00003306 	br	8cccc <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   8cc00:	e0bffd17 	ldw	r2,-12(fp)
   8cc04:	11000217 	ldw	r4,8(r2)
   8cc08:	0080dac0 	call	80dac <strlen>
   8cc0c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   8cc10:	e0bffd17 	ldw	r2,-12(fp)
   8cc14:	10c00217 	ldw	r3,8(r2)
   8cc18:	e0bffc17 	ldw	r2,-16(fp)
   8cc1c:	1885883a 	add	r2,r3,r2
   8cc20:	10bfffc4 	addi	r2,r2,-1
   8cc24:	10800003 	ldbu	r2,0(r2)
   8cc28:	10803fcc 	andi	r2,r2,255
   8cc2c:	1080201c 	xori	r2,r2,128
   8cc30:	10bfe004 	addi	r2,r2,-128
   8cc34:	10800bd8 	cmpnei	r2,r2,47
   8cc38:	1000031e 	bne	r2,zero,8cc48 <alt_find_file+0x70>
    {
      len -= 1;
   8cc3c:	e0bffc17 	ldw	r2,-16(fp)
   8cc40:	10bfffc4 	addi	r2,r2,-1
   8cc44:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8cc48:	e0bffc17 	ldw	r2,-16(fp)
   8cc4c:	1007883a 	mov	r3,r2
   8cc50:	e0bffe17 	ldw	r2,-8(fp)
   8cc54:	1885883a 	add	r2,r3,r2
   8cc58:	10800003 	ldbu	r2,0(r2)
   8cc5c:	10803fcc 	andi	r2,r2,255
   8cc60:	1080201c 	xori	r2,r2,128
   8cc64:	10bfe004 	addi	r2,r2,-128
   8cc68:	10800be0 	cmpeqi	r2,r2,47
   8cc6c:	10000a1e 	bne	r2,zero,8cc98 <alt_find_file+0xc0>
   8cc70:	e0bffc17 	ldw	r2,-16(fp)
   8cc74:	1007883a 	mov	r3,r2
   8cc78:	e0bffe17 	ldw	r2,-8(fp)
   8cc7c:	1885883a 	add	r2,r3,r2
   8cc80:	10800003 	ldbu	r2,0(r2)
   8cc84:	10803fcc 	andi	r2,r2,255
   8cc88:	1080201c 	xori	r2,r2,128
   8cc8c:	10bfe004 	addi	r2,r2,-128
   8cc90:	1004c03a 	cmpne	r2,r2,zero
   8cc94:	10000a1e 	bne	r2,zero,8ccc0 <alt_find_file+0xe8>
   8cc98:	e0bffd17 	ldw	r2,-12(fp)
   8cc9c:	11000217 	ldw	r4,8(r2)
   8cca0:	e1bffc17 	ldw	r6,-16(fp)
   8cca4:	e17ffe17 	ldw	r5,-8(fp)
   8cca8:	008ce140 	call	8ce14 <memcmp>
   8ccac:	1004c03a 	cmpne	r2,r2,zero
   8ccb0:	1000031e 	bne	r2,zero,8ccc0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   8ccb4:	e0bffd17 	ldw	r2,-12(fp)
   8ccb8:	e0bfff15 	stw	r2,-4(fp)
   8ccbc:	00000806 	br	8cce0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   8ccc0:	e0bffd17 	ldw	r2,-12(fp)
   8ccc4:	10800017 	ldw	r2,0(r2)
   8ccc8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8cccc:	00c00274 	movhi	r3,9
   8ccd0:	18fc2d04 	addi	r3,r3,-3916
   8ccd4:	e0bffd17 	ldw	r2,-12(fp)
   8ccd8:	10ffc91e 	bne	r2,r3,8cc00 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   8ccdc:	e03fff15 	stw	zero,-4(fp)
   8cce0:	e0bfff17 	ldw	r2,-4(fp)
}
   8cce4:	e037883a 	mov	sp,fp
   8cce8:	dfc00117 	ldw	ra,4(sp)
   8ccec:	df000017 	ldw	fp,0(sp)
   8ccf0:	dec00204 	addi	sp,sp,8
   8ccf4:	f800283a 	ret

0008ccf8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   8ccf8:	defffa04 	addi	sp,sp,-24
   8ccfc:	dfc00515 	stw	ra,20(sp)
   8cd00:	df000415 	stw	fp,16(sp)
   8cd04:	dc000315 	stw	r16,12(sp)
   8cd08:	df000304 	addi	fp,sp,12
   8cd0c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   8cd10:	00bffa04 	movi	r2,-24
   8cd14:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8cd18:	e03ffe15 	stw	zero,-8(fp)
   8cd1c:	00002006 	br	8cda0 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   8cd20:	e13ffe17 	ldw	r4,-8(fp)
   8cd24:	04000274 	movhi	r16,9
   8cd28:	8437af04 	addi	r16,r16,-8516
   8cd2c:	01400304 	movi	r5,12
   8cd30:	0089ffc0 	call	89ffc <__mulsi3>
   8cd34:	1405883a 	add	r2,r2,r16
   8cd38:	10800017 	ldw	r2,0(r2)
   8cd3c:	1004c03a 	cmpne	r2,r2,zero
   8cd40:	1000141e 	bne	r2,zero,8cd94 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   8cd44:	e13ffe17 	ldw	r4,-8(fp)
   8cd48:	04000274 	movhi	r16,9
   8cd4c:	8437af04 	addi	r16,r16,-8516
   8cd50:	01400304 	movi	r5,12
   8cd54:	0089ffc0 	call	89ffc <__mulsi3>
   8cd58:	1407883a 	add	r3,r2,r16
   8cd5c:	e0bfff17 	ldw	r2,-4(fp)
   8cd60:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   8cd64:	00800274 	movhi	r2,9
   8cd68:	10bc3104 	addi	r2,r2,-3900
   8cd6c:	10c00017 	ldw	r3,0(r2)
   8cd70:	e0bffe17 	ldw	r2,-8(fp)
   8cd74:	1880040e 	bge	r3,r2,8cd88 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   8cd78:	00c00274 	movhi	r3,9
   8cd7c:	18fc3104 	addi	r3,r3,-3900
   8cd80:	e0bffe17 	ldw	r2,-8(fp)
   8cd84:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   8cd88:	e0bffe17 	ldw	r2,-8(fp)
   8cd8c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   8cd90:	00000606 	br	8cdac <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8cd94:	e0bffe17 	ldw	r2,-8(fp)
   8cd98:	10800044 	addi	r2,r2,1
   8cd9c:	e0bffe15 	stw	r2,-8(fp)
   8cda0:	e0bffe17 	ldw	r2,-8(fp)
   8cda4:	10800810 	cmplti	r2,r2,32
   8cda8:	103fdd1e 	bne	r2,zero,8cd20 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   8cdac:	e0bffd17 	ldw	r2,-12(fp)
}
   8cdb0:	e037883a 	mov	sp,fp
   8cdb4:	dfc00217 	ldw	ra,8(sp)
   8cdb8:	df000117 	ldw	fp,4(sp)
   8cdbc:	dc000017 	ldw	r16,0(sp)
   8cdc0:	dec00304 	addi	sp,sp,12
   8cdc4:	f800283a 	ret

0008cdc8 <atexit>:
   8cdc8:	200b883a 	mov	r5,r4
   8cdcc:	000d883a 	mov	r6,zero
   8cdd0:	0009883a 	mov	r4,zero
   8cdd4:	000f883a 	mov	r7,zero
   8cdd8:	008ce881 	jmpi	8ce88 <__register_exitproc>

0008cddc <exit>:
   8cddc:	defffe04 	addi	sp,sp,-8
   8cde0:	000b883a 	mov	r5,zero
   8cde4:	dc000015 	stw	r16,0(sp)
   8cde8:	dfc00115 	stw	ra,4(sp)
   8cdec:	2021883a 	mov	r16,r4
   8cdf0:	008cfc00 	call	8cfc0 <__call_exitprocs>
   8cdf4:	00800274 	movhi	r2,9
   8cdf8:	10bc2804 	addi	r2,r2,-3936
   8cdfc:	11000017 	ldw	r4,0(r2)
   8ce00:	20800f17 	ldw	r2,60(r4)
   8ce04:	10000126 	beq	r2,zero,8ce0c <exit+0x30>
   8ce08:	103ee83a 	callr	r2
   8ce0c:	8009883a 	mov	r4,r16
   8ce10:	008d1b00 	call	8d1b0 <_exit>

0008ce14 <memcmp>:
   8ce14:	00c000c4 	movi	r3,3
   8ce18:	1980032e 	bgeu	r3,r6,8ce28 <memcmp+0x14>
   8ce1c:	2144b03a 	or	r2,r4,r5
   8ce20:	10c4703a 	and	r2,r2,r3
   8ce24:	10000f26 	beq	r2,zero,8ce64 <memcmp+0x50>
   8ce28:	31ffffc4 	addi	r7,r6,-1
   8ce2c:	3000061e 	bne	r6,zero,8ce48 <memcmp+0x34>
   8ce30:	00000a06 	br	8ce5c <memcmp+0x48>
   8ce34:	39ffffc4 	addi	r7,r7,-1
   8ce38:	00bfffc4 	movi	r2,-1
   8ce3c:	21000044 	addi	r4,r4,1
   8ce40:	29400044 	addi	r5,r5,1
   8ce44:	38800526 	beq	r7,r2,8ce5c <memcmp+0x48>
   8ce48:	20c00003 	ldbu	r3,0(r4)
   8ce4c:	28800003 	ldbu	r2,0(r5)
   8ce50:	18bff826 	beq	r3,r2,8ce34 <memcmp+0x20>
   8ce54:	1885c83a 	sub	r2,r3,r2
   8ce58:	f800283a 	ret
   8ce5c:	0005883a 	mov	r2,zero
   8ce60:	f800283a 	ret
   8ce64:	180f883a 	mov	r7,r3
   8ce68:	20c00017 	ldw	r3,0(r4)
   8ce6c:	28800017 	ldw	r2,0(r5)
   8ce70:	18bfed1e 	bne	r3,r2,8ce28 <memcmp+0x14>
   8ce74:	31bfff04 	addi	r6,r6,-4
   8ce78:	21000104 	addi	r4,r4,4
   8ce7c:	29400104 	addi	r5,r5,4
   8ce80:	39bff936 	bltu	r7,r6,8ce68 <memcmp+0x54>
   8ce84:	003fe806 	br	8ce28 <memcmp+0x14>

0008ce88 <__register_exitproc>:
   8ce88:	defffa04 	addi	sp,sp,-24
   8ce8c:	00800274 	movhi	r2,9
   8ce90:	10bc2804 	addi	r2,r2,-3936
   8ce94:	dc000015 	stw	r16,0(sp)
   8ce98:	14000017 	ldw	r16,0(r2)
   8ce9c:	dd000415 	stw	r20,16(sp)
   8cea0:	2829883a 	mov	r20,r5
   8cea4:	81405217 	ldw	r5,328(r16)
   8cea8:	dcc00315 	stw	r19,12(sp)
   8ceac:	dc800215 	stw	r18,8(sp)
   8ceb0:	dc400115 	stw	r17,4(sp)
   8ceb4:	dfc00515 	stw	ra,20(sp)
   8ceb8:	2023883a 	mov	r17,r4
   8cebc:	3027883a 	mov	r19,r6
   8cec0:	3825883a 	mov	r18,r7
   8cec4:	28002526 	beq	r5,zero,8cf5c <__register_exitproc+0xd4>
   8cec8:	29000117 	ldw	r4,4(r5)
   8cecc:	008007c4 	movi	r2,31
   8ced0:	11002716 	blt	r2,r4,8cf70 <__register_exitproc+0xe8>
   8ced4:	8800101e 	bne	r17,zero,8cf18 <__register_exitproc+0x90>
   8ced8:	2105883a 	add	r2,r4,r4
   8cedc:	1085883a 	add	r2,r2,r2
   8cee0:	20c00044 	addi	r3,r4,1
   8cee4:	1145883a 	add	r2,r2,r5
   8cee8:	0009883a 	mov	r4,zero
   8ceec:	15000215 	stw	r20,8(r2)
   8cef0:	28c00115 	stw	r3,4(r5)
   8cef4:	2005883a 	mov	r2,r4
   8cef8:	dfc00517 	ldw	ra,20(sp)
   8cefc:	dd000417 	ldw	r20,16(sp)
   8cf00:	dcc00317 	ldw	r19,12(sp)
   8cf04:	dc800217 	ldw	r18,8(sp)
   8cf08:	dc400117 	ldw	r17,4(sp)
   8cf0c:	dc000017 	ldw	r16,0(sp)
   8cf10:	dec00604 	addi	sp,sp,24
   8cf14:	f800283a 	ret
   8cf18:	29802204 	addi	r6,r5,136
   8cf1c:	00800044 	movi	r2,1
   8cf20:	110e983a 	sll	r7,r2,r4
   8cf24:	30c04017 	ldw	r3,256(r6)
   8cf28:	2105883a 	add	r2,r4,r4
   8cf2c:	1085883a 	add	r2,r2,r2
   8cf30:	1185883a 	add	r2,r2,r6
   8cf34:	19c6b03a 	or	r3,r3,r7
   8cf38:	14802015 	stw	r18,128(r2)
   8cf3c:	14c00015 	stw	r19,0(r2)
   8cf40:	00800084 	movi	r2,2
   8cf44:	30c04015 	stw	r3,256(r6)
   8cf48:	88bfe31e 	bne	r17,r2,8ced8 <__register_exitproc+0x50>
   8cf4c:	30804117 	ldw	r2,260(r6)
   8cf50:	11c4b03a 	or	r2,r2,r7
   8cf54:	30804115 	stw	r2,260(r6)
   8cf58:	003fdf06 	br	8ced8 <__register_exitproc+0x50>
   8cf5c:	00800274 	movhi	r2,9
   8cf60:	10832504 	addi	r2,r2,3220
   8cf64:	100b883a 	mov	r5,r2
   8cf68:	80805215 	stw	r2,328(r16)
   8cf6c:	003fd606 	br	8cec8 <__register_exitproc+0x40>
   8cf70:	00800034 	movhi	r2,0
   8cf74:	10800004 	addi	r2,r2,0
   8cf78:	1000021e 	bne	r2,zero,8cf84 <__register_exitproc+0xfc>
   8cf7c:	013fffc4 	movi	r4,-1
   8cf80:	003fdc06 	br	8cef4 <__register_exitproc+0x6c>
   8cf84:	01006404 	movi	r4,400
   8cf88:	103ee83a 	callr	r2
   8cf8c:	1007883a 	mov	r3,r2
   8cf90:	103ffa26 	beq	r2,zero,8cf7c <__register_exitproc+0xf4>
   8cf94:	80805217 	ldw	r2,328(r16)
   8cf98:	180b883a 	mov	r5,r3
   8cf9c:	18000115 	stw	zero,4(r3)
   8cfa0:	18800015 	stw	r2,0(r3)
   8cfa4:	80c05215 	stw	r3,328(r16)
   8cfa8:	18006215 	stw	zero,392(r3)
   8cfac:	18006315 	stw	zero,396(r3)
   8cfb0:	0009883a 	mov	r4,zero
   8cfb4:	883fc826 	beq	r17,zero,8ced8 <__register_exitproc+0x50>
   8cfb8:	003fd706 	br	8cf18 <__register_exitproc+0x90>

0008cfbc <register_fini>:
   8cfbc:	f800283a 	ret

0008cfc0 <__call_exitprocs>:
   8cfc0:	00800274 	movhi	r2,9
   8cfc4:	10bc2804 	addi	r2,r2,-3936
   8cfc8:	10800017 	ldw	r2,0(r2)
   8cfcc:	defff304 	addi	sp,sp,-52
   8cfd0:	df000b15 	stw	fp,44(sp)
   8cfd4:	d8800115 	stw	r2,4(sp)
   8cfd8:	00800034 	movhi	r2,0
   8cfdc:	10800004 	addi	r2,r2,0
   8cfe0:	1005003a 	cmpeq	r2,r2,zero
   8cfe4:	d8800215 	stw	r2,8(sp)
   8cfe8:	d8800117 	ldw	r2,4(sp)
   8cfec:	dd400815 	stw	r21,32(sp)
   8cff0:	dd000715 	stw	r20,28(sp)
   8cff4:	10805204 	addi	r2,r2,328
   8cff8:	dfc00c15 	stw	ra,48(sp)
   8cffc:	ddc00a15 	stw	r23,40(sp)
   8d000:	dd800915 	stw	r22,36(sp)
   8d004:	dcc00615 	stw	r19,24(sp)
   8d008:	dc800515 	stw	r18,20(sp)
   8d00c:	dc400415 	stw	r17,16(sp)
   8d010:	dc000315 	stw	r16,12(sp)
   8d014:	282b883a 	mov	r21,r5
   8d018:	2039883a 	mov	fp,r4
   8d01c:	d8800015 	stw	r2,0(sp)
   8d020:	2829003a 	cmpeq	r20,r5,zero
   8d024:	d8800117 	ldw	r2,4(sp)
   8d028:	14405217 	ldw	r17,328(r2)
   8d02c:	88001026 	beq	r17,zero,8d070 <__call_exitprocs+0xb0>
   8d030:	ddc00017 	ldw	r23,0(sp)
   8d034:	88800117 	ldw	r2,4(r17)
   8d038:	8c802204 	addi	r18,r17,136
   8d03c:	143fffc4 	addi	r16,r2,-1
   8d040:	80000916 	blt	r16,zero,8d068 <__call_exitprocs+0xa8>
   8d044:	05bfffc4 	movi	r22,-1
   8d048:	a000151e 	bne	r20,zero,8d0a0 <__call_exitprocs+0xe0>
   8d04c:	8409883a 	add	r4,r16,r16
   8d050:	2105883a 	add	r2,r4,r4
   8d054:	1485883a 	add	r2,r2,r18
   8d058:	10c02017 	ldw	r3,128(r2)
   8d05c:	a8c01126 	beq	r21,r3,8d0a4 <__call_exitprocs+0xe4>
   8d060:	843fffc4 	addi	r16,r16,-1
   8d064:	85bff81e 	bne	r16,r22,8d048 <__call_exitprocs+0x88>
   8d068:	d8800217 	ldw	r2,8(sp)
   8d06c:	10003126 	beq	r2,zero,8d134 <__call_exitprocs+0x174>
   8d070:	dfc00c17 	ldw	ra,48(sp)
   8d074:	df000b17 	ldw	fp,44(sp)
   8d078:	ddc00a17 	ldw	r23,40(sp)
   8d07c:	dd800917 	ldw	r22,36(sp)
   8d080:	dd400817 	ldw	r21,32(sp)
   8d084:	dd000717 	ldw	r20,28(sp)
   8d088:	dcc00617 	ldw	r19,24(sp)
   8d08c:	dc800517 	ldw	r18,20(sp)
   8d090:	dc400417 	ldw	r17,16(sp)
   8d094:	dc000317 	ldw	r16,12(sp)
   8d098:	dec00d04 	addi	sp,sp,52
   8d09c:	f800283a 	ret
   8d0a0:	8409883a 	add	r4,r16,r16
   8d0a4:	88c00117 	ldw	r3,4(r17)
   8d0a8:	2105883a 	add	r2,r4,r4
   8d0ac:	1445883a 	add	r2,r2,r17
   8d0b0:	18ffffc4 	addi	r3,r3,-1
   8d0b4:	11800217 	ldw	r6,8(r2)
   8d0b8:	1c001526 	beq	r3,r16,8d110 <__call_exitprocs+0x150>
   8d0bc:	10000215 	stw	zero,8(r2)
   8d0c0:	303fe726 	beq	r6,zero,8d060 <__call_exitprocs+0xa0>
   8d0c4:	00c00044 	movi	r3,1
   8d0c8:	1c06983a 	sll	r3,r3,r16
   8d0cc:	90804017 	ldw	r2,256(r18)
   8d0d0:	8cc00117 	ldw	r19,4(r17)
   8d0d4:	1884703a 	and	r2,r3,r2
   8d0d8:	10001426 	beq	r2,zero,8d12c <__call_exitprocs+0x16c>
   8d0dc:	90804117 	ldw	r2,260(r18)
   8d0e0:	1884703a 	and	r2,r3,r2
   8d0e4:	10000c1e 	bne	r2,zero,8d118 <__call_exitprocs+0x158>
   8d0e8:	2105883a 	add	r2,r4,r4
   8d0ec:	1485883a 	add	r2,r2,r18
   8d0f0:	11400017 	ldw	r5,0(r2)
   8d0f4:	e009883a 	mov	r4,fp
   8d0f8:	303ee83a 	callr	r6
   8d0fc:	88800117 	ldw	r2,4(r17)
   8d100:	98bfc81e 	bne	r19,r2,8d024 <__call_exitprocs+0x64>
   8d104:	b8800017 	ldw	r2,0(r23)
   8d108:	147fd526 	beq	r2,r17,8d060 <__call_exitprocs+0xa0>
   8d10c:	003fc506 	br	8d024 <__call_exitprocs+0x64>
   8d110:	8c000115 	stw	r16,4(r17)
   8d114:	003fea06 	br	8d0c0 <__call_exitprocs+0x100>
   8d118:	2105883a 	add	r2,r4,r4
   8d11c:	1485883a 	add	r2,r2,r18
   8d120:	11000017 	ldw	r4,0(r2)
   8d124:	303ee83a 	callr	r6
   8d128:	003ff406 	br	8d0fc <__call_exitprocs+0x13c>
   8d12c:	303ee83a 	callr	r6
   8d130:	003ff206 	br	8d0fc <__call_exitprocs+0x13c>
   8d134:	88800117 	ldw	r2,4(r17)
   8d138:	1000081e 	bne	r2,zero,8d15c <__call_exitprocs+0x19c>
   8d13c:	89000017 	ldw	r4,0(r17)
   8d140:	20000726 	beq	r4,zero,8d160 <__call_exitprocs+0x1a0>
   8d144:	b9000015 	stw	r4,0(r23)
   8d148:	8809883a 	mov	r4,r17
   8d14c:	00000000 	call	0 <__alt_mem_sram_0-0x80000>
   8d150:	bc400017 	ldw	r17,0(r23)
   8d154:	883fb71e 	bne	r17,zero,8d034 <__call_exitprocs+0x74>
   8d158:	003fc506 	br	8d070 <__call_exitprocs+0xb0>
   8d15c:	89000017 	ldw	r4,0(r17)
   8d160:	882f883a 	mov	r23,r17
   8d164:	2023883a 	mov	r17,r4
   8d168:	883fb21e 	bne	r17,zero,8d034 <__call_exitprocs+0x74>
   8d16c:	003fc006 	br	8d070 <__call_exitprocs+0xb0>

0008d170 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   8d170:	defffd04 	addi	sp,sp,-12
   8d174:	df000215 	stw	fp,8(sp)
   8d178:	df000204 	addi	fp,sp,8
   8d17c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   8d180:	e0bfff17 	ldw	r2,-4(fp)
   8d184:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   8d188:	e0bffe17 	ldw	r2,-8(fp)
   8d18c:	1005003a 	cmpeq	r2,r2,zero
   8d190:	1000021e 	bne	r2,zero,8d19c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   8d194:	002af070 	cmpltui	zero,zero,43969
   8d198:	00000106 	br	8d1a0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   8d19c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   8d1a0:	e037883a 	mov	sp,fp
   8d1a4:	df000017 	ldw	fp,0(sp)
   8d1a8:	dec00104 	addi	sp,sp,4
   8d1ac:	f800283a 	ret

0008d1b0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   8d1b0:	defffd04 	addi	sp,sp,-12
   8d1b4:	dfc00215 	stw	ra,8(sp)
   8d1b8:	df000115 	stw	fp,4(sp)
   8d1bc:	df000104 	addi	fp,sp,4
   8d1c0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   8d1c4:	e13fff17 	ldw	r4,-4(fp)
   8d1c8:	008d1700 	call	8d170 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   8d1cc:	003fff06 	br	8d1cc <_exit+0x1c>
   8d1d0:	00000010 	cmplti	zero,zero,0
   8d1d4:	00000000 	call	0 <__alt_mem_sram_0-0x80000>
   8d1d8:	00527a01 	jmpi	527a0 <__alt_mem_sram_0-0x2d860>
   8d1dc:	011f7c01 	jmpi	11f7c0 <__alt_data_end+0x1f7c0>
   8d1e0:	001b0c0b 	ldhu	zero,27696(zero)
   8d1e4:	00000028 	cmpgeui	zero,zero,0
   8d1e8:	00000018 	cmpnei	zero,zero,0
   8d1ec:	000880b8 	rdprs	zero,zero,8706
   8d1f0:	0000066c 	andhi	zero,zero,25
   8d1f4:	3c0e4400 	call	3c0e440 <__alt_data_end+0x3b0e440>
   8d1f8:	910a9074 	orhi	r4,r18,10817
   8d1fc:	94089209 	0x94089209
   8d200:	97049606 	br	8e45c <jtag_uart_0+0x420>
   8d204:	93019f03 	ldbu	r12,1660(r18)
   8d208:	9c059507 	ldb	r16,5716(r19)
   8d20c:	00000002 	0x2
   8d210:	00000028 	cmpgeui	zero,zero,0
   8d214:	00000044 	movi	zero,1
   8d218:	00088724 	muli	zero,zero,8732
   8d21c:	00000660 	cmpeqi	zero,zero,25
   8d220:	400e4400 	call	400e440 <__alt_data_end+0x3f0e440>
   8d224:	92099170 	cmpltui	r8,r18,9797
   8d228:	96069408 	cmpgei	et,r18,6736
   8d22c:	9c039704 	addi	r16,r19,3676
   8d230:	90019f02 	0x90019f02
   8d234:	9507930a 	0x9507930a
   8d238:	00000005 	stb	zero,0(zero)
   8d23c:	0008cfbc 	xorhi	zero,zero,9022
