
experiment3_cpu1.elf:     file format elf32-littlenios2
experiment3_cpu1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x0000e728 memsz 0x0000e728 flags r-x
    LOAD off    0x0000f748 vaddr 0x0008e748 paddr 0x000901bc align 2**12
         filesz 0x00001a74 memsz 0x00001a74 flags rw-
    LOAD off    0x00011c30 vaddr 0x00091c30 paddr 0x00091c30 align 2**12
         filesz 0x00000000 memsz 0x000002f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000df70  000801b4  000801b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000624  0008e124  0008e124  0000f124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a74  0008e748  000901bc  0000f748  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f0  00091c30  00091c30  00011c30  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000111bc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d98  00000000  00000000  000111e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001699  00000000  00000000  00011f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00027218  00000000  00000000  00013611  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008586  00000000  00000000  0003a829  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001556d  00000000  00000000  00042daf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001c78  00000000  00000000  0005831c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000245a  00000000  00000000  00059f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c641  00000000  00000000  0005c3ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00068a30  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  00068a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006c809  2**0
                  CONTENTS, READONLY
 18 .cpu          00000004  00000000  00000000  0006c80c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006c810  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006c811  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0006c812  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0006c81d  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0006c828  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0006c833  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000036  00000000  00000000  0006c83e  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00087a8f  00000000  00000000  0006c874  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801b4 l    d  .text	00000000 .text
0008e124 l    d  .rodata	00000000 .rodata
0008e748 l    d  .rwdata	00000000 .rwdata
00091c30 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000801ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 experiment3_cpu1.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
000810c0 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00081d74 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00082f18 l     F .text	00000058 __sprint_r
0008e56e l     O .rodata	00000010 blanks.3452
0008e55e l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00084f94 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000869bc l     F .text	00000058 std
00086ac8 l     F .text	00000008 __fp_lock
00086ad0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0008eb50 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00090188 l     O .rwdata	00000004 charset
0008e5a4 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0008e6ec l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0008b044 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0008b0a4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0008b1a8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0008b48c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0008b56c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008b6cc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0008b8fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000901a8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0008bbb4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0008f104 l     O .rwdata	00001060 jtag_uart_0
00090164 l     O .rwdata	00000010 message_buffer_mutex
0008bcc0 l     F .text	00000038 alt_dev_reg
0008bcf8 l     F .text	0000006c alt_avalon_mutex_reg
0008bd64 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0008bfcc l     F .text	00000228 altera_avalon_jtag_uart_irq
0008c1f4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
0008c870 l     F .text	0000007c alt_mutex_trylock
0008c944 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0008ccfc l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0008d020 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0008d4c4 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0008d614 l     F .text	000000f8 alt_file_locked
0008d898 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0008dea0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0008e054 l     F .text	00000040 alt_sim_halt
00082cc8 g     F .text	0000001c putchar
0008806c g     F .text	00000094 _mprec_log10
00088158 g     F .text	00000088 __any_on
00089bd8 g     F .text	00000070 _isatty_r
0008e6c4 g     O .rodata	00000028 __mprec_tinytens
0008b72c g     F .text	0000006c alt_main
00082cec g     F .text	000000a0 _puts_r
00091c90 g     O .bss	00000100 alt_irq
00089c48 g     F .text	00000078 _lseek_r
000901bc g       *ABS*	00000000 __flash_rwdata_start
0008aa04 g     F .text	00000088 __eqdf2
00091f20 g       *ABS*	00000000 __alt_heap_start
00100000 g       *ABS*	00000000 __alt_mem_message_buffer_ram
00082c50 g     F .text	00000044 printf
00089544 g     F .text	00000068 __sseek
00086a24 g     F .text	000000a4 __sinit
0008ccd8 g     F .text	00000024 alt_get_cpu_freq
00089744 g     F .text	00000130 __swbuf_r
00091c31 g     O .bss	00000001 b
00087730 g     F .text	00000084 _setlocale_r
00086b24 g     F .text	0000009c __sfmoreglue
0008b7b8 g     F .text	00000020 __malloc_unlock
00087ae8 g     F .text	000000e0 memmove
00086b14 g     F .text	00000010 _cleanup
0008ca04 g     F .text	00000040 altera_avalon_mutex_trylock
000881e0 g     F .text	000000bc _Balloc
0008ab14 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000000c __reset
0008caa0 g     F .text	0000007c altera_avalon_mutex_is_mine
00080020 g       *ABS*	00000000 __flash_exceptions_start
00089b64 g     F .text	00000074 _fstat_r
00091c40 g     O .bss	00000004 errno
00091c58 g     O .bss	00000004 alt_argv
00098174 g       *ABS*	00000000 _gp
0008ef84 g     O .rwdata	00000180 alt_fd_list
00082ce4 g     F .text	00000008 _putchar_r
0008d148 g     F .text	00000094 alt_find_dev
00087a48 g     F .text	000000a0 memcpy
00086b08 g     F .text	0000000c _cleanup_r
0008acac g     F .text	000000f8 __floatsidf
0008d59c g     F .text	00000078 alt_io_redirect
000806e4 g     F .text	00000030 delete_array
0008ac24 g     F .text	00000088 __ltdf2
0008e124 g       *ABS*	00000000 __DTOR_END__
00082d8c g     F .text	00000014 puts
00087fbc g     F .text	000000b0 __ratio
0008c40c g     F .text	00000224 altera_avalon_jtag_uart_read
000824fc g     F .text	00000014 malloc
00082c94 g     F .text	00000034 _printf_r
00081eb0 g     F .text	00000008 __udivsi3
0008b3c8 g     F .text	000000c4 isatty
0008e5d4 g     O .rodata	000000c8 __mprec_tens
0008770c g     F .text	00000008 __locale_charset
00091c34 g     O .bss	00000004 __malloc_top_pad
0008cc78 g     F .text	00000040 perf_get_num_starts
00090184 g     O .rwdata	00000004 __mb_cur_max
00087714 g     F .text	0000000c _localeconv_r
00088944 g     F .text	0000003c __i2b
000870f0 g     F .text	0000049c __sfvwrite_r
00082e34 g     F .text	00000070 _sbrk_r
00089cc0 g     F .text	00000078 _read_r
000801f0 g     F .text	000000a4 handle_cpu1_button_interrupts
0008ef50 g     O .rwdata	0000000c __lc_ctype
0009019c g     O .rwdata	00000004 alt_max_fd
00082378 g     F .text	00000138 __unpack_d
00089a40 g     F .text	00000110 _fclose_r
00086988 g     F .text	00000034 fflush
00091c38 g     O .bss	00000004 __malloc_max_sbrked_mem
0008b208 g     F .text	000001c0 alt_irq_register
00081550 g     F .text	00000074 __adddf3
00087e9c g     F .text	00000120 __b2d
0008a3a4 g     F .text	00000660 __umoddi3
0008b5d8 g     F .text	000000f4 lseek
0008cb1c g     F .text	00000058 altera_avalon_mutex_first_lock
00090180 g     O .rwdata	00000004 _global_impure_ptr
00088ed8 g     F .text	000005f4 _realloc_r
00091f20 g       *ABS*	00000000 __bss_end
0008d3cc g     F .text	000000f8 alt_iic_isr_register
0008d990 g     F .text	0000010c alt_tick
0008031c g     F .text	00000080 found_value_in_array
00089d38 g     F .text	0000066c __udivdi3
0008e69c g     O .rodata	00000028 __mprec_bigtens
00088bcc g     F .text	00000120 __s2b
00081be0 g     F .text	00000194 __floatunsidf
00087dbc g     F .text	00000060 __mcmp
00086af0 g     F .text	00000018 __fp_lock_all
0008d384 g     F .text	00000048 alt_ic_irq_enabled
0008d8f8 g     F .text	00000098 alt_alarm_stop
00091c50 g     O .bss	00000004 alt_irq_active
000800ec g     F .exceptions	000000c8 alt_irq_handler
0008ef5c g     O .rwdata	00000028 alt_dev_null
0008c8ec g     F .text	00000058 altera_avalon_mutex_open
000808a4 g     F .text	000000a4 print_subsequence
0008cf50 g     F .text	0000001c alt_dcache_flush_all
00087c88 g     F .text	00000070 __hi0bits
0008ada4 g     F .text	000000d8 __fixdfsi
000901bc g       *ABS*	00000000 __ram_rwdata_end
00090194 g     O .rwdata	00000008 alt_dev_list
0008ba90 g     F .text	00000124 write
00088df0 g     F .text	000000e8 _putc_r
000901ac g     O .rwdata	00000008 alt_mutex_list
0008e748 g       *ABS*	00000000 __ram_rodata_end
0008b0d0 g     F .text	000000d8 fstat
00088aac g     F .text	00000120 __pow5mult
00091c44 g     O .bss	00000004 __nlocale_changed
00081eb8 g     F .text	00000008 __umodsi3
00091f20 g       *ABS*	00000000 end
0008bf0c g     F .text	000000c0 altera_avalon_jtag_uart_init
0008e120 g       *ABS*	00000000 __CTOR_LIST__
00100000 g       *ABS*	00000000 __alt_stack_pointer
0008cd6c g     F .text	00000090 alt_avalon_timer_sc_init
00081fe4 g     F .text	00000080 __clzsi2
0008c630 g     F .text	00000240 altera_avalon_jtag_uart_write
00086a14 g     F .text	00000004 __sfp_lock_acquire
00087964 g     F .text	000000e4 memchr
00082f70 g     F .text	00001ec4 ___vfprintf_internal_r
00086ddc g     F .text	00000314 _free_r
00080294 g     F .text	00000088 print_array
0008dea4 g     F .text	000001b0 __call_exitprocs
00091c48 g     O .bss	00000004 __mlocale_changed
00090178 g     O .rwdata	00000004 __malloc_sbrk_base
000801b4 g     F .text	0000003c _start
00091c60 g     O .bss	00000004 _alt_tick_rate
00081038 g     F .text	00000088 __floatundidf
00082dbc g     F .text	00000078 rand
000885a4 g     F .text	0000014c __lshift
00091c64 g     O .bss	00000004 _alt_nticks
0008b7d8 g     F .text	00000124 read
0008bc48 g     F .text	00000078 alt_sys_init
0008dd6c g     F .text	00000134 __register_exitproc
0008ca44 g     F .text	0000005c altera_avalon_mutex_unlock
000886f0 g     F .text	00000254 __multiply
0008c2a4 g     F .text	00000074 altera_avalon_jtag_uart_close
000824b0 g     F .text	00000038 __mulsi3
0008e748 g       *ABS*	00000000 __ram_rwdata_start
0008e124 g       *ABS*	00000000 __ram_rodata_start
00091c68 g     O .bss	00000028 __malloc_current_mallinfo
0008829c g     F .text	0000017c __d2b
0008bdc4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0008dbdc g     F .text	000000d0 alt_get_fd
0008ae7c g     F .text	000000c8 __fpcmp_parts_d
000899d0 g     F .text	00000070 _close_r
0008cb74 g     F .text	000000b0 perf_get_section_time
0008dcf8 g     F .text	00000074 memcmp
0008be74 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00091f20 g       *ABS*	00000000 __alt_stack_base
0008bebc g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00084e58 g     F .text	0000013c __swsetup_r
00081988 g     F .text	00000258 __divdf3
00086bc0 g     F .text	000000f0 __sfp
00088100 g     F .text	00000058 __copybits
0008cc24 g     F .text	00000054 perf_get_total_time
0008e748 g     O .rwdata	00000408 __malloc_av_
00086a20 g     F .text	00000004 __sinit_lock_release
000815c4 g     F .text	000003c4 __muldf3
00089628 g     F .text	00000060 __sread
0008dabc g     F .text	00000120 alt_find_file
0008cf6c g     F .text	000000b4 alt_dev_llist_insert
0008b798 g     F .text	00000020 __malloc_lock
0008b9d4 g     F .text	000000bc sbrk
0008678c g     F .text	000001fc _fflush_r
00089908 g     F .text	000000c8 _calloc_r
00091c30 g       *ABS*	00000000 __bss_start
00087bc8 g     F .text	00000098 memset
00080948 g     F .text	000006f0 main
00091c5c g     O .bss	00000004 alt_envp
00091c3c g     O .bss	00000004 __malloc_max_total_mem
0008be1c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00089874 g     F .text	0000001c __swbuf
00082da0 g     F .text	0000001c srand
0008953c g     F .text	00000008 __sclose
00100000 g       *ABS*	00000000 __alt_heap_limit
00089b50 g     F .text	00000014 fclose
00091d90 g     O .bss	00000190 _atexit0
0008c9c4 g     F .text	00000040 altera_avalon_mutex_lock
000851d8 g     F .text	000015b4 _dtoa_r
00082510 g     F .text	00000740 _malloc_r
000901a0 g     O .rwdata	00000004 alt_errno
00087654 g     F .text	000000b8 _fwalk
00088cec g     F .text	00000104 putc
00081df0 g     F .text	00000060 __divsi3
0008e3e8 g     O .rodata	00000014 __thenan_df
00086cb0 g     F .text	0000012c _malloc_trim_r
0008e124 g       *ABS*	00000000 __CTOR_END__
00089688 g     F .text	000000bc strcmp
0008e124 g       *ABS*	00000000 __flash_rodata_start
0008e124 g       *ABS*	00000000 __DTOR_LIST__
0008aa8c g     F .text	00000088 __nedf2
00080000 g       *ABS*	00000000 __alt_mem_sram_0
0008bc14 g     F .text	00000034 alt_irq_init
0008b95c g     F .text	00000078 alt_release_fd
0008e3fc g     O .rodata	00000100 __clz_tab
00091c4c g     O .bss	00000004 _PathLocale
0008dcac g     F .text	00000014 atexit
00089890 g     F .text	00000078 _write_r
000877b4 g     F .text	0000001c setlocale
0009017c g     O .rwdata	00000004 _impure_ptr
00091c54 g     O .bss	00000004 alt_argc
0008d0e4 g     F .text	00000064 _do_dtors
00080020 g       .exceptions	00000000 alt_irq_entry
00087e1c g     F .text	00000080 __ulp
000894cc g     F .text	00000040 __isinfd
00086ad8 g     F .text	00000018 __fp_unlock_all
0009018c g     O .rwdata	00000008 alt_fs_list
00080480 g     F .text	00000264 generate_random_array
00080020 g       *ABS*	00000000 __ram_exceptions_start
00087720 g     F .text	00000010 localeconv
0008d1f8 g     F .text	00000050 alt_ic_isr_register
000901bc g       *ABS*	00000000 _edata
00091f20 g       *ABS*	00000000 _end
000801b4 g       *ABS*	00000000 __ram_exceptions_end
0008c318 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0008d2e4 g     F .text	000000a0 alt_ic_irq_disable
000895ac g     F .text	0000007c __swrite
00090174 g     O .rwdata	00000004 __malloc_trim_threshold
0008ccb8 g     F .text	00000020 alt_get_performance_counter_base
0008da9c g     F .text	00000020 altera_nios2_qsys_irq_init
0008dcc0 g     F .text	00000038 exit
00091c30 g     O .bss	00000001 a
0008758c g     F .text	000000c8 _fwalk_reent
00088418 g     F .text	0000018c __mdiff
00081e50 g     F .text	00000060 __modsi3
00100000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00086a18 g     F .text	00000004 __sfp_lock_release
00080714 g     F .text	00000190 find_max_subsequence
0008e094 g     F .text	00000020 _exit
0008950c g     F .text	00000030 __isnand
0008cdfc g     F .text	00000154 alt_alarm_start
00081ec0 g     F .text	00000124 __muldi3
000877d0 g     F .text	00000194 __smakebuf_r
00082ea4 g     F .text	00000074 strlen
0008d70c g     F .text	0000018c open
0008ab9c g     F .text	00000088 __gedf2
0008d1dc g     F .text	0000001c alt_icache_flush_all
000901a4 g     O .rwdata	00000004 alt_priority_mask
0008d248 g     F .text	0000009c alt_ic_irq_enable
00084e34 g     F .text	00000024 __vfprintf_internal
0008c9a4 g     F .text	00000020 altera_avalon_mutex_close
000814d0 g     F .text	00000080 __subdf3
00087cf8 g     F .text	000000c4 __lo0bits
000901b4 g     O .rwdata	00000008 alt_alarm_list
0008d080 g     F .text	00000064 _do_ctors
0008039c g     F .text	000000e4 reshuffle_subsequence
0008af44 g     F .text	00000100 close
0008b4ec g     F .text	00000080 alt_load
00082064 g     F .text	00000314 __pack_d
000824e8 g     F .text	00000014 free
00086a1c g     F .text	00000004 __sinit_lock_acquire
00088980 g     F .text	0000012c __multadd
00087c60 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08406d14 	ori	at,at,436
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   800fc:	0005313a 	rdctl	r2,ipending
   80100:	e0bffc15 	stw	r2,-16(fp)

  return active;
   80104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   80108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   8010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80110:	00800044 	movi	r2,1
   80114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80118:	e0ffff17 	ldw	r3,-4(fp)
   8011c:	e0bffe17 	ldw	r2,-8(fp)
   80120:	1884703a 	and	r2,r3,r2
   80124:	1005003a 	cmpeq	r2,r2,zero
   80128:	1000161e 	bne	r2,zero,80184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	e0bffd17 	ldw	r2,-12(fp)
   80130:	00c00274 	movhi	r3,9
   80134:	18c72404 	addi	r3,r3,7312
   80138:	100490fa 	slli	r2,r2,3
   8013c:	10c5883a 	add	r2,r2,r3
   80140:	11400017 	ldw	r5,0(r2)
   80144:	e0bffd17 	ldw	r2,-12(fp)
   80148:	00c00274 	movhi	r3,9
   8014c:	18c72404 	addi	r3,r3,7312
   80150:	100490fa 	slli	r2,r2,3
   80154:	10c5883a 	add	r2,r2,r3
   80158:	10800104 	addi	r2,r2,4
   8015c:	11000017 	ldw	r4,0(r2)
   80160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80164:	0005313a 	rdctl	r2,ipending
   80168:	e0bffb15 	stw	r2,-20(fp)

  return active;
   8016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   80174:	e0bfff17 	ldw	r2,-4(fp)
   80178:	1004c03a 	cmpne	r2,r2,zero
   8017c:	103fe31e 	bne	r2,zero,8010c <alt_irq_handler+0x20>
   80180:	00000706 	br	801a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80184:	e0bffe17 	ldw	r2,-8(fp)
   80188:	1085883a 	add	r2,r2,r2
   8018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
   80190:	e0bffd17 	ldw	r2,-12(fp)
   80194:	10800044 	addi	r2,r2,1
   80198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   8019c:	003fde06 	br	80118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a0:	e037883a 	mov	sp,fp
   801a4:	dfc00117 	ldw	ra,4(sp)
   801a8:	df000017 	ldw	fp,0(sp)
   801ac:	dec00204 	addi	sp,sp,8
   801b0:	f800283a 	ret

Disassembly of section .text:

000801b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801b4:	06c00434 	movhi	sp,16
    ori sp, sp, %lo(__alt_stack_pointer)
   801b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   801bc:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   801c0:	d6a05d14 	ori	gp,gp,33140
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801c4:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   801c8:	10870c14 	ori	r2,r2,7216

    movhi r3, %hi(__bss_end)
   801cc:	00c00274 	movhi	r3,9
    ori r3, r3, %lo(__bss_end)
   801d0:	18c7c814 	ori	r3,r3,7968

    beq r2, r3, 1f
   801d4:	10c00326 	beq	r2,r3,801e4 <_start+0x30>

0:
    stw zero, (r2)
   801d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801e0:	10fffd36 	bltu	r2,r3,801d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801e4:	008b4ec0 	call	8b4ec <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801e8:	008b72c0 	call	8b72c <alt_main>

000801ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801ec:	003fff06 	br	801ec <alt_after_alt_main>

000801f0 <handle_cpu1_button_interrupts>:


// Global functions
unsigned char a = 0;
		unsigned char b = 0;
void handle_cpu1_button_interrupts(int *count) { //without this syntax didnt run
   801f0:	defffc04 	addi	sp,sp,-16
   801f4:	dfc00315 	stw	ra,12(sp)
   801f8:	df000215 	stw	fp,8(sp)
   801fc:	df000204 	addi	fp,sp,8
   80200:	e13ffe15 	stw	r4,-8(fp)
	switch(IORD(CPU1_PB_BUTTON_I_BASE, 3)) {
   80204:	00800434 	movhi	r2,16
   80208:	10882f04 	addi	r2,r2,8380
   8020c:	10800037 	ldwio	r2,0(r2)
   80210:	e0bfff15 	stw	r2,-4(fp)
   80214:	e0ffff17 	ldw	r3,-4(fp)
   80218:	18800060 	cmpeqi	r2,r3,1
   8021c:	1000041e 	bne	r2,zero,80230 <handle_cpu1_button_interrupts+0x40>
   80220:	e0ffff17 	ldw	r3,-4(fp)
   80224:	188000a0 	cmpeqi	r2,r3,2
   80228:	10000a1e 	bne	r2,zero,80254 <handle_cpu1_button_interrupts+0x64>
   8022c:	00001106 	br	80274 <handle_cpu1_button_interrupts+0x84>
	case 1: printf("CPU1 PB0 pressed: Please Wait \n"); *count = *count + 1; break;
   80230:	01000274 	movhi	r4,9
   80234:	21384904 	addi	r4,r4,-7900
   80238:	0082d8c0 	call	82d8c <puts>
   8023c:	e0bffe17 	ldw	r2,-8(fp)
   80240:	10800017 	ldw	r2,0(r2)
   80244:	10c00044 	addi	r3,r2,1
   80248:	e0bffe17 	ldw	r2,-8(fp)
   8024c:	10c00015 	stw	r3,0(r2)
   80250:	00000806 	br	80274 <handle_cpu1_button_interrupts+0x84>
	case 2: printf("CPU1 PB1 pressed: Please Wait \n"); *count = *count + 1; break;
   80254:	01000274 	movhi	r4,9
   80258:	21385104 	addi	r4,r4,-7868
   8025c:	0082d8c0 	call	82d8c <puts>
   80260:	e0bffe17 	ldw	r2,-8(fp)
   80264:	10800017 	ldw	r2,0(r2)
   80268:	10c00044 	addi	r3,r2,1
   8026c:	e0bffe17 	ldw	r2,-8(fp)
   80270:	10c00015 	stw	r3,0(r2)
	}
	IOWR(CPU1_PB_BUTTON_I_BASE, 3, 0x0);
   80274:	00800434 	movhi	r2,16
   80278:	10882f04 	addi	r2,r2,8380
   8027c:	10000035 	stwio	zero,0(r2)
}
   80280:	e037883a 	mov	sp,fp
   80284:	dfc00117 	ldw	ra,4(sp)
   80288:	df000017 	ldw	fp,0(sp)
   8028c:	dec00204 	addi	sp,sp,8
   80290:	f800283a 	ret

00080294 <print_array>:

//---------------- LAB 3 EXERCISE 3 ----------------------
//----------------------------------------------------------------------------------------------------------------------------------------------
void print_array(unsigned short int *array,
                 unsigned short int size)
{
   80294:	defffb04 	addi	sp,sp,-20
   80298:	dfc00415 	stw	ra,16(sp)
   8029c:	df000315 	stw	fp,12(sp)
   802a0:	df000304 	addi	fp,sp,12
   802a4:	e13ffe15 	stw	r4,-8(fp)
   802a8:	e17fff0d 	sth	r5,-4(fp)
    unsigned int short i;
    printf("Array: ");
   802ac:	01000274 	movhi	r4,9
   802b0:	21385904 	addi	r4,r4,-7836
   802b4:	0082c500 	call	82c50 <printf>
    for (i=0; i<size; i++)
   802b8:	e03ffd0d 	sth	zero,-12(fp)
   802bc:	00000d06 	br	802f4 <print_array+0x60>
        printf("%d ", array[i]);
   802c0:	e0bffd0b 	ldhu	r2,-12(fp)
   802c4:	1085883a 	add	r2,r2,r2
   802c8:	1007883a 	mov	r3,r2
   802cc:	e0bffe17 	ldw	r2,-8(fp)
   802d0:	1885883a 	add	r2,r3,r2
   802d4:	1080000b 	ldhu	r2,0(r2)
   802d8:	117fffcc 	andi	r5,r2,65535
   802dc:	01000274 	movhi	r4,9
   802e0:	21385b04 	addi	r4,r4,-7828
   802e4:	0082c500 	call	82c50 <printf>
void print_array(unsigned short int *array,
                 unsigned short int size)
{
    unsigned int short i;
    printf("Array: ");
    for (i=0; i<size; i++)
   802e8:	e0bffd0b 	ldhu	r2,-12(fp)
   802ec:	10800044 	addi	r2,r2,1
   802f0:	e0bffd0d 	sth	r2,-12(fp)
   802f4:	e0fffd0b 	ldhu	r3,-12(fp)
   802f8:	e0bfff0b 	ldhu	r2,-4(fp)
   802fc:	18bff036 	bltu	r3,r2,802c0 <print_array+0x2c>
        printf("%d ", array[i]);
    printf("\n");
   80300:	01000284 	movi	r4,10
   80304:	0082cc80 	call	82cc8 <putchar>
}
   80308:	e037883a 	mov	sp,fp
   8030c:	dfc00117 	ldw	ra,4(sp)
   80310:	df000017 	ldw	fp,0(sp)
   80314:	dec00204 	addi	sp,sp,8
   80318:	f800283a 	ret

0008031c <found_value_in_array>:

unsigned char found_value_in_array(unsigned short int *array,
                                   unsigned short int size,
                                   unsigned short int value)
{
   8031c:	defffa04 	addi	sp,sp,-24
   80320:	df000515 	stw	fp,20(sp)
   80324:	df000504 	addi	fp,sp,20
   80328:	e13ffc15 	stw	r4,-16(fp)
   8032c:	e17ffd0d 	sth	r5,-12(fp)
   80330:	e1bffe0d 	sth	r6,-8(fp)
    unsigned int short i;
    for (i=0; i<size; i++)
   80334:	e03ffb0d 	sth	zero,-20(fp)
   80338:	00000f06 	br	80378 <found_value_in_array+0x5c>
        if (array[i] == value)
   8033c:	e0bffb0b 	ldhu	r2,-20(fp)
   80340:	1085883a 	add	r2,r2,r2
   80344:	1007883a 	mov	r3,r2
   80348:	e0bffc17 	ldw	r2,-16(fp)
   8034c:	1885883a 	add	r2,r3,r2
   80350:	1080000b 	ldhu	r2,0(r2)
   80354:	10ffffcc 	andi	r3,r2,65535
   80358:	e0bffe0b 	ldhu	r2,-8(fp)
   8035c:	1880031e 	bne	r3,r2,8036c <found_value_in_array+0x50>
            return 1;
   80360:	00800044 	movi	r2,1
   80364:	e0bfff15 	stw	r2,-4(fp)
   80368:	00000706 	br	80388 <found_value_in_array+0x6c>
unsigned char found_value_in_array(unsigned short int *array,
                                   unsigned short int size,
                                   unsigned short int value)
{
    unsigned int short i;
    for (i=0; i<size; i++)
   8036c:	e0bffb0b 	ldhu	r2,-20(fp)
   80370:	10800044 	addi	r2,r2,1
   80374:	e0bffb0d 	sth	r2,-20(fp)
   80378:	e0fffb0b 	ldhu	r3,-20(fp)
   8037c:	e0bffd0b 	ldhu	r2,-12(fp)
   80380:	18bfee36 	bltu	r3,r2,8033c <found_value_in_array+0x20>
        if (array[i] == value)
            return 1;
    return 0;
   80384:	e03fff15 	stw	zero,-4(fp)
   80388:	e0bfff17 	ldw	r2,-4(fp)
}
   8038c:	e037883a 	mov	sp,fp
   80390:	df000017 	ldw	fp,0(sp)
   80394:	dec00104 	addi	sp,sp,4
   80398:	f800283a 	ret

0008039c <reshuffle_subsequence>:

void reshuffle_subsequence(unsigned short int *array,
                           unsigned short int start_pos,
                           unsigned short int sub_length)
{
   8039c:	defff904 	addi	sp,sp,-28
   803a0:	dfc00615 	stw	ra,24(sp)
   803a4:	df000515 	stw	fp,20(sp)
   803a8:	df000504 	addi	fp,sp,20
   803ac:	e13ffd15 	stw	r4,-12(fp)
   803b0:	e17ffe0d 	sth	r5,-8(fp)
   803b4:	e1bfff0d 	sth	r6,-4(fp)
    unsigned int short i;
    for (i=start_pos; i<start_pos+sub_length; i++) {
   803b8:	e0bffe0b 	ldhu	r2,-8(fp)
   803bc:	e0bffc0d 	sth	r2,-16(fp)
   803c0:	00002506 	br	80458 <reshuffle_subsequence+0xbc>
        unsigned short int j = start_pos + (unsigned short int)(rand() % sub_length);
   803c4:	0082dbc0 	call	82dbc <rand>
   803c8:	1009883a 	mov	r4,r2
   803cc:	e17fff0b 	ldhu	r5,-4(fp)
   803d0:	0081e500 	call	81e50 <__modsi3>
   803d4:	1007883a 	mov	r3,r2
   803d8:	e0bffe0b 	ldhu	r2,-8(fp)
   803dc:	1885883a 	add	r2,r3,r2
   803e0:	e0bffb8d 	sth	r2,-18(fp)
        unsigned short int tmp = array[i];
   803e4:	e0bffc0b 	ldhu	r2,-16(fp)
   803e8:	1085883a 	add	r2,r2,r2
   803ec:	1007883a 	mov	r3,r2
   803f0:	e0bffd17 	ldw	r2,-12(fp)
   803f4:	1885883a 	add	r2,r3,r2
   803f8:	1080000b 	ldhu	r2,0(r2)
   803fc:	e0bffb0d 	sth	r2,-20(fp)
        array[i] = array[j];
   80400:	e0bffc0b 	ldhu	r2,-16(fp)
   80404:	1085883a 	add	r2,r2,r2
   80408:	1007883a 	mov	r3,r2
   8040c:	e0bffd17 	ldw	r2,-12(fp)
   80410:	1889883a 	add	r4,r3,r2
   80414:	e0bffb8b 	ldhu	r2,-18(fp)
   80418:	1085883a 	add	r2,r2,r2
   8041c:	1007883a 	mov	r3,r2
   80420:	e0bffd17 	ldw	r2,-12(fp)
   80424:	1885883a 	add	r2,r3,r2
   80428:	1080000b 	ldhu	r2,0(r2)
   8042c:	2080000d 	sth	r2,0(r4)
        array[j] = tmp;
   80430:	e0bffb8b 	ldhu	r2,-18(fp)
   80434:	1085883a 	add	r2,r2,r2
   80438:	1007883a 	mov	r3,r2
   8043c:	e0bffd17 	ldw	r2,-12(fp)
   80440:	1887883a 	add	r3,r3,r2
   80444:	e0bffb0b 	ldhu	r2,-20(fp)
   80448:	1880000d 	sth	r2,0(r3)
void reshuffle_subsequence(unsigned short int *array,
                           unsigned short int start_pos,
                           unsigned short int sub_length)
{
    unsigned int short i;
    for (i=start_pos; i<start_pos+sub_length; i++) {
   8044c:	e0bffc0b 	ldhu	r2,-16(fp)
   80450:	10800044 	addi	r2,r2,1
   80454:	e0bffc0d 	sth	r2,-16(fp)
   80458:	e13ffc0b 	ldhu	r4,-16(fp)
   8045c:	e0fffe0b 	ldhu	r3,-8(fp)
   80460:	e0bfff0b 	ldhu	r2,-4(fp)
   80464:	1885883a 	add	r2,r3,r2
   80468:	20bfd616 	blt	r4,r2,803c4 <reshuffle_subsequence+0x28>
        unsigned short int j = start_pos + (unsigned short int)(rand() % sub_length);
        unsigned short int tmp = array[i];
        array[i] = array[j];
        array[j] = tmp;
    }
}
   8046c:	e037883a 	mov	sp,fp
   80470:	dfc00117 	ldw	ra,4(sp)
   80474:	df000017 	ldw	fp,0(sp)
   80478:	dec00204 	addi	sp,sp,8
   8047c:	f800283a 	ret

00080480 <generate_random_array>:

unsigned short int* generate_random_array(unsigned int size)
{
   80480:	defff604 	addi	sp,sp,-40
   80484:	dfc00915 	stw	ra,36(sp)
   80488:	df000815 	stw	fp,32(sp)
   8048c:	df000804 	addi	fp,sp,32
   80490:	e13ffc15 	stw	r4,-16(fp)
    unsigned short int *array = malloc(sizeof(unsigned short int)*size);
   80494:	e0bffc17 	ldw	r2,-16(fp)
   80498:	1085883a 	add	r2,r2,r2
   8049c:	1009883a 	mov	r4,r2
   804a0:	00824fc0 	call	824fc <malloc>
   804a4:	e0bffb15 	stw	r2,-20(fp)
    unsigned int short i;
    for (i=0; i<size; i++)
   804a8:	e03ffa0d 	sth	zero,-24(fp)
   804ac:	00008406 	br	806c0 <generate_random_array+0x240>
    {
        unsigned short int sub_avoid = (unsigned short int)(rand() % SUB_FREQUENCY);
   804b0:	0082dbc0 	call	82dbc <rand>
   804b4:	1009883a 	mov	r4,r2
   804b8:	01400c84 	movi	r5,50
   804bc:	0081e500 	call	81e50 <__modsi3>
   804c0:	e0bff98d 	sth	r2,-26(fp)
        unsigned short int sub_length = (unsigned short int)(rand() % (SUB_MAX_LENGTH-2))+2;
   804c4:	0082dbc0 	call	82dbc <rand>
   804c8:	1007883a 	mov	r3,r2
   804cc:	00a00034 	movhi	r2,32768
   804d0:	108001c4 	addi	r2,r2,7
   804d4:	1886703a 	and	r3,r3,r2
   804d8:	e0fffd15 	stw	r3,-12(fp)
   804dc:	e0fffd17 	ldw	r3,-12(fp)
   804e0:	1804403a 	cmpge	r2,r3,zero
   804e4:	10000a1e 	bne	r2,zero,80510 <generate_random_array+0x90>
   804e8:	e0bffd17 	ldw	r2,-12(fp)
   804ec:	10bfffc4 	addi	r2,r2,-1
   804f0:	e0bffd15 	stw	r2,-12(fp)
   804f4:	00bffe04 	movi	r2,-8
   804f8:	e0fffd17 	ldw	r3,-12(fp)
   804fc:	1886b03a 	or	r3,r3,r2
   80500:	e0fffd15 	stw	r3,-12(fp)
   80504:	e0bffd17 	ldw	r2,-12(fp)
   80508:	10800044 	addi	r2,r2,1
   8050c:	e0bffd15 	stw	r2,-12(fp)
   80510:	e0bffd17 	ldw	r2,-12(fp)
   80514:	10800084 	addi	r2,r2,2
   80518:	e0bff90d 	sth	r2,-28(fp)
        unsigned short int value = (unsigned short int)(rand() % MAX_VALUE);
   8051c:	0082dbc0 	call	82dbc <rand>
   80520:	1007883a 	mov	r3,r2
   80524:	00a00074 	movhi	r2,32769
   80528:	10bfffc4 	addi	r2,r2,-1
   8052c:	1886703a 	and	r3,r3,r2
   80530:	e0fffe15 	stw	r3,-8(fp)
   80534:	e0fffe17 	ldw	r3,-8(fp)
   80538:	1804403a 	cmpge	r2,r3,zero
   8053c:	1000091e 	bne	r2,zero,80564 <generate_random_array+0xe4>
   80540:	e0bffe17 	ldw	r2,-8(fp)
   80544:	10bfffc4 	addi	r2,r2,-1
   80548:	e0bffe15 	stw	r2,-8(fp)
   8054c:	e0fffe17 	ldw	r3,-8(fp)
   80550:	18fffff4 	orhi	r3,r3,65535
   80554:	e0fffe15 	stw	r3,-8(fp)
   80558:	e0bffe17 	ldw	r2,-8(fp)
   8055c:	10800044 	addi	r2,r2,1
   80560:	e0bffe15 	stw	r2,-8(fp)
   80564:	e0bffe17 	ldw	r2,-8(fp)
   80568:	e0bff88d 	sth	r2,-30(fp)
        if ((!sub_avoid) && ((i+sub_length) < size)) {
   8056c:	e0bff98b 	ldhu	r2,-26(fp)
   80570:	1004c03a 	cmpne	r2,r2,zero
   80574:	1000411e 	bne	r2,zero,8067c <generate_random_array+0x1fc>
   80578:	e0fffa0b 	ldhu	r3,-24(fp)
   8057c:	e0bff90b 	ldhu	r2,-28(fp)
   80580:	1885883a 	add	r2,r3,r2
   80584:	1007883a 	mov	r3,r2
   80588:	e0bffc17 	ldw	r2,-16(fp)
   8058c:	18803b2e 	bgeu	r3,r2,8067c <generate_random_array+0x1fc>
            unsigned short int j;
            for (j=0; j<sub_length; j++) {
   80590:	e03ff80d 	sth	zero,-32(fp)
   80594:	00001906 	br	805fc <generate_random_array+0x17c>
                if (found_value_in_array(array, i+j, value)) {
   80598:	e0fffa0b 	ldhu	r3,-24(fp)
   8059c:	e0bff80b 	ldhu	r2,-32(fp)
   805a0:	1885883a 	add	r2,r3,r2
   805a4:	117fffcc 	andi	r5,r2,65535
   805a8:	e1bff88b 	ldhu	r6,-30(fp)
   805ac:	e13ffb17 	ldw	r4,-20(fp)
   805b0:	008031c0 	call	8031c <found_value_in_array>
   805b4:	10803fcc 	andi	r2,r2,255
   805b8:	1004c03a 	cmpne	r2,r2,zero
   805bc:	1000121e 	bne	r2,zero,80608 <generate_random_array+0x188>
                    break;
                } else {
                    array[i+j] = value;
   805c0:	e0fffa0b 	ldhu	r3,-24(fp)
   805c4:	e0bff80b 	ldhu	r2,-32(fp)
   805c8:	1885883a 	add	r2,r3,r2
   805cc:	1085883a 	add	r2,r2,r2
   805d0:	1007883a 	mov	r3,r2
   805d4:	e0bffb17 	ldw	r2,-20(fp)
   805d8:	1887883a 	add	r3,r3,r2
   805dc:	e0bff88b 	ldhu	r2,-30(fp)
   805e0:	1880000d 	sth	r2,0(r3)
                    value++;
   805e4:	e0bff88b 	ldhu	r2,-30(fp)
   805e8:	10800044 	addi	r2,r2,1
   805ec:	e0bff88d 	sth	r2,-30(fp)
        unsigned short int sub_avoid = (unsigned short int)(rand() % SUB_FREQUENCY);
        unsigned short int sub_length = (unsigned short int)(rand() % (SUB_MAX_LENGTH-2))+2;
        unsigned short int value = (unsigned short int)(rand() % MAX_VALUE);
        if ((!sub_avoid) && ((i+sub_length) < size)) {
            unsigned short int j;
            for (j=0; j<sub_length; j++) {
   805f0:	e0bff80b 	ldhu	r2,-32(fp)
   805f4:	10800044 	addi	r2,r2,1
   805f8:	e0bff80d 	sth	r2,-32(fp)
   805fc:	e0fff80b 	ldhu	r3,-32(fp)
   80600:	e0bff90b 	ldhu	r2,-28(fp)
   80604:	18bfe436 	bltu	r3,r2,80598 <generate_random_array+0x118>
                    array[i+j] = value;
                    value++;
                }
            }
            // printf("Generated subsequence of length %d starting at start_arr %d\n", j, i);
            reshuffle_subsequence(array, i, j);
   80608:	e17ffa0b 	ldhu	r5,-24(fp)
   8060c:	e1bff80b 	ldhu	r6,-32(fp)
   80610:	e13ffb17 	ldw	r4,-20(fp)
   80614:	008039c0 	call	8039c <reshuffle_subsequence>
            i += j-1;
   80618:	e0fffa0b 	ldhu	r3,-24(fp)
   8061c:	e0bff80b 	ldhu	r2,-32(fp)
   80620:	1885883a 	add	r2,r3,r2
   80624:	10bfffc4 	addi	r2,r2,-1
   80628:	e0bffa0d 	sth	r2,-24(fp)
    for (i=0; i<size; i++)
    {
        unsigned short int sub_avoid = (unsigned short int)(rand() % SUB_FREQUENCY);
        unsigned short int sub_length = (unsigned short int)(rand() % (SUB_MAX_LENGTH-2))+2;
        unsigned short int value = (unsigned short int)(rand() % MAX_VALUE);
        if ((!sub_avoid) && ((i+sub_length) < size)) {
   8062c:	00002106 	br	806b4 <generate_random_array+0x234>
            // printf("Generated subsequence of length %d starting at start_arr %d\n", j, i);
            reshuffle_subsequence(array, i, j);
            i += j-1;
        } else {
            while (found_value_in_array(array, i, value))
                value = (unsigned short int)(rand() % MAX_VALUE);
   80630:	0082dbc0 	call	82dbc <rand>
   80634:	00e00074 	movhi	r3,32769
   80638:	18ffffc4 	addi	r3,r3,-1
   8063c:	10c4703a 	and	r2,r2,r3
   80640:	e0bfff15 	stw	r2,-4(fp)
   80644:	e0ffff17 	ldw	r3,-4(fp)
   80648:	1804403a 	cmpge	r2,r3,zero
   8064c:	1000091e 	bne	r2,zero,80674 <generate_random_array+0x1f4>
   80650:	e0bfff17 	ldw	r2,-4(fp)
   80654:	10bfffc4 	addi	r2,r2,-1
   80658:	e0bfff15 	stw	r2,-4(fp)
   8065c:	e0ffff17 	ldw	r3,-4(fp)
   80660:	18fffff4 	orhi	r3,r3,65535
   80664:	e0ffff15 	stw	r3,-4(fp)
   80668:	e0bfff17 	ldw	r2,-4(fp)
   8066c:	10800044 	addi	r2,r2,1
   80670:	e0bfff15 	stw	r2,-4(fp)
   80674:	e0bfff17 	ldw	r2,-4(fp)
   80678:	e0bff88d 	sth	r2,-30(fp)
            }
            // printf("Generated subsequence of length %d starting at start_arr %d\n", j, i);
            reshuffle_subsequence(array, i, j);
            i += j-1;
        } else {
            while (found_value_in_array(array, i, value))
   8067c:	e17ffa0b 	ldhu	r5,-24(fp)
   80680:	e1bff88b 	ldhu	r6,-30(fp)
   80684:	e13ffb17 	ldw	r4,-20(fp)
   80688:	008031c0 	call	8031c <found_value_in_array>
   8068c:	10803fcc 	andi	r2,r2,255
   80690:	1004c03a 	cmpne	r2,r2,zero
   80694:	103fe61e 	bne	r2,zero,80630 <generate_random_array+0x1b0>
                value = (unsigned short int)(rand() % MAX_VALUE);
            array[i] = value;
   80698:	e0bffa0b 	ldhu	r2,-24(fp)
   8069c:	1085883a 	add	r2,r2,r2
   806a0:	1007883a 	mov	r3,r2
   806a4:	e0bffb17 	ldw	r2,-20(fp)
   806a8:	1887883a 	add	r3,r3,r2
   806ac:	e0bff88b 	ldhu	r2,-30(fp)
   806b0:	1880000d 	sth	r2,0(r3)

unsigned short int* generate_random_array(unsigned int size)
{
    unsigned short int *array = malloc(sizeof(unsigned short int)*size);
    unsigned int short i;
    for (i=0; i<size; i++)
   806b4:	e0bffa0b 	ldhu	r2,-24(fp)
   806b8:	10800044 	addi	r2,r2,1
   806bc:	e0bffa0d 	sth	r2,-24(fp)
   806c0:	e0fffa0b 	ldhu	r3,-24(fp)
   806c4:	e0bffc17 	ldw	r2,-16(fp)
   806c8:	18bf7936 	bltu	r3,r2,804b0 <generate_random_array+0x30>
            while (found_value_in_array(array, i, value))
                value = (unsigned short int)(rand() % MAX_VALUE);
            array[i] = value;
        }
    }
    return array;
   806cc:	e0bffb17 	ldw	r2,-20(fp)
}
   806d0:	e037883a 	mov	sp,fp
   806d4:	dfc00117 	ldw	ra,4(sp)
   806d8:	df000017 	ldw	fp,0(sp)
   806dc:	dec00204 	addi	sp,sp,8
   806e0:	f800283a 	ret

000806e4 <delete_array>:

void delete_array(unsigned short int *array)
{
   806e4:	defffd04 	addi	sp,sp,-12
   806e8:	dfc00215 	stw	ra,8(sp)
   806ec:	df000115 	stw	fp,4(sp)
   806f0:	df000104 	addi	fp,sp,4
   806f4:	e13fff15 	stw	r4,-4(fp)
    free(array);
   806f8:	e13fff17 	ldw	r4,-4(fp)
   806fc:	00824e80 	call	824e8 <free>
}
   80700:	e037883a 	mov	sp,fp
   80704:	dfc00117 	ldw	ra,4(sp)
   80708:	df000017 	ldw	fp,0(sp)
   8070c:	dec00204 	addi	sp,sp,8
   80710:	f800283a 	ret

00080714 <find_max_subsequence>:

void find_max_subsequence(unsigned short int *array,
                          unsigned short int size,
                          unsigned short int *start_pos,
                          unsigned short int *sub_length)
{
   80714:	defff904 	addi	sp,sp,-28
   80718:	df000615 	stw	fp,24(sp)
   8071c:	df000604 	addi	fp,sp,24
   80720:	e13ffc15 	stw	r4,-16(fp)
   80724:	e1bffe15 	stw	r6,-8(fp)
   80728:	e1ffff15 	stw	r7,-4(fp)
   8072c:	e17ffd0d 	sth	r5,-12(fp)
    unsigned int short i;
    for (i=0; i<size; i++) {
   80730:	e03ffb8d 	sth	zero,-18(fp)
   80734:	00005406 	br	80888 <find_max_subsequence+0x174>
        unsigned short int sub_min = array[i];
   80738:	e0bffb8b 	ldhu	r2,-18(fp)
   8073c:	1085883a 	add	r2,r2,r2
   80740:	1007883a 	mov	r3,r2
   80744:	e0bffc17 	ldw	r2,-16(fp)
   80748:	1885883a 	add	r2,r3,r2
   8074c:	1080000b 	ldhu	r2,0(r2)
   80750:	e0bffb0d 	sth	r2,-20(fp)
        unsigned short int sub_max = array[i];
   80754:	e0bffb8b 	ldhu	r2,-18(fp)
   80758:	1085883a 	add	r2,r2,r2
   8075c:	1007883a 	mov	r3,r2
   80760:	e0bffc17 	ldw	r2,-16(fp)
   80764:	1885883a 	add	r2,r3,r2
   80768:	1080000b 	ldhu	r2,0(r2)
   8076c:	e0bffa8d 	sth	r2,-22(fp)
        unsigned int short j;
        for (j=i+1; j<size; j++) {
   80770:	e0bffb8b 	ldhu	r2,-18(fp)
   80774:	10800044 	addi	r2,r2,1
   80778:	e0bffa0d 	sth	r2,-24(fp)
   8077c:	00003c06 	br	80870 <find_max_subsequence+0x15c>
            if (array[j] < sub_min) sub_min = array[j];
   80780:	e0bffa0b 	ldhu	r2,-24(fp)
   80784:	1085883a 	add	r2,r2,r2
   80788:	1007883a 	mov	r3,r2
   8078c:	e0bffc17 	ldw	r2,-16(fp)
   80790:	1885883a 	add	r2,r3,r2
   80794:	1080000b 	ldhu	r2,0(r2)
   80798:	10ffffcc 	andi	r3,r2,65535
   8079c:	e0bffb0b 	ldhu	r2,-20(fp)
   807a0:	1880072e 	bgeu	r3,r2,807c0 <find_max_subsequence+0xac>
   807a4:	e0bffa0b 	ldhu	r2,-24(fp)
   807a8:	1085883a 	add	r2,r2,r2
   807ac:	1007883a 	mov	r3,r2
   807b0:	e0bffc17 	ldw	r2,-16(fp)
   807b4:	1885883a 	add	r2,r3,r2
   807b8:	1080000b 	ldhu	r2,0(r2)
   807bc:	e0bffb0d 	sth	r2,-20(fp)
            if (array[j] > sub_max) sub_max = array[j];
   807c0:	e0bffa0b 	ldhu	r2,-24(fp)
   807c4:	1085883a 	add	r2,r2,r2
   807c8:	1007883a 	mov	r3,r2
   807cc:	e0bffc17 	ldw	r2,-16(fp)
   807d0:	1885883a 	add	r2,r3,r2
   807d4:	1080000b 	ldhu	r2,0(r2)
   807d8:	10ffffcc 	andi	r3,r2,65535
   807dc:	e0bffa8b 	ldhu	r2,-22(fp)
   807e0:	10c0072e 	bgeu	r2,r3,80800 <find_max_subsequence+0xec>
   807e4:	e0bffa0b 	ldhu	r2,-24(fp)
   807e8:	1085883a 	add	r2,r2,r2
   807ec:	1007883a 	mov	r3,r2
   807f0:	e0bffc17 	ldw	r2,-16(fp)
   807f4:	1885883a 	add	r2,r3,r2
   807f8:	1080000b 	ldhu	r2,0(r2)
   807fc:	e0bffa8d 	sth	r2,-22(fp)
            // detect neighbourhood in subsequence
            if ((sub_max - sub_min) == (j - i)) {
   80800:	e0fffa8b 	ldhu	r3,-22(fp)
   80804:	e0bffb0b 	ldhu	r2,-20(fp)
   80808:	1889c83a 	sub	r4,r3,r2
   8080c:	e0fffa0b 	ldhu	r3,-24(fp)
   80810:	e0bffb8b 	ldhu	r2,-18(fp)
   80814:	1885c83a 	sub	r2,r3,r2
   80818:	2080121e 	bne	r4,r2,80864 <find_max_subsequence+0x150>
                // update starting position and subsequence length
                if ((*sub_length) < (sub_max - sub_min + 1)) {
   8081c:	e0bfff17 	ldw	r2,-4(fp)
   80820:	1080000b 	ldhu	r2,0(r2)
   80824:	113fffcc 	andi	r4,r2,65535
   80828:	e0fffa8b 	ldhu	r3,-22(fp)
   8082c:	e0bffb0b 	ldhu	r2,-20(fp)
   80830:	1885c83a 	sub	r2,r3,r2
   80834:	10800044 	addi	r2,r2,1
   80838:	20800a0e 	bge	r4,r2,80864 <find_max_subsequence+0x150>
                    *start_pos = i;
   8083c:	e0fffe17 	ldw	r3,-8(fp)
   80840:	e0bffb8b 	ldhu	r2,-18(fp)
   80844:	1880000d 	sth	r2,0(r3)
                    *sub_length = sub_max - sub_min + 1;
   80848:	e0fffa8b 	ldhu	r3,-22(fp)
   8084c:	e0bffb0b 	ldhu	r2,-20(fp)
   80850:	1885c83a 	sub	r2,r3,r2
   80854:	10800044 	addi	r2,r2,1
   80858:	1007883a 	mov	r3,r2
   8085c:	e0bfff17 	ldw	r2,-4(fp)
   80860:	10c0000d 	sth	r3,0(r2)
    unsigned int short i;
    for (i=0; i<size; i++) {
        unsigned short int sub_min = array[i];
        unsigned short int sub_max = array[i];
        unsigned int short j;
        for (j=i+1; j<size; j++) {
   80864:	e0bffa0b 	ldhu	r2,-24(fp)
   80868:	10800044 	addi	r2,r2,1
   8086c:	e0bffa0d 	sth	r2,-24(fp)
   80870:	e0fffa0b 	ldhu	r3,-24(fp)
   80874:	e0bffd0b 	ldhu	r2,-12(fp)
   80878:	18bfc136 	bltu	r3,r2,80780 <find_max_subsequence+0x6c>
                          unsigned short int size,
                          unsigned short int *start_pos,
                          unsigned short int *sub_length)
{
    unsigned int short i;
    for (i=0; i<size; i++) {
   8087c:	e0bffb8b 	ldhu	r2,-18(fp)
   80880:	10800044 	addi	r2,r2,1
   80884:	e0bffb8d 	sth	r2,-18(fp)
   80888:	e0fffb8b 	ldhu	r3,-18(fp)
   8088c:	e0bffd0b 	ldhu	r2,-12(fp)
   80890:	18bfa936 	bltu	r3,r2,80738 <find_max_subsequence+0x24>
                }
                // printf("Found subsequence at position %d\n", i);
            }
        }
    }
}
   80894:	e037883a 	mov	sp,fp
   80898:	df000017 	ldw	fp,0(sp)
   8089c:	dec00104 	addi	sp,sp,4
   808a0:	f800283a 	ret

000808a4 <print_subsequence>:

void print_subsequence(unsigned short int *array,
                       unsigned short int start_pos,
                       unsigned short int sub_length)
{
   808a4:	defffa04 	addi	sp,sp,-24
   808a8:	dfc00515 	stw	ra,20(sp)
   808ac:	df000415 	stw	fp,16(sp)
   808b0:	df000404 	addi	fp,sp,16
   808b4:	e13ffd15 	stw	r4,-12(fp)
   808b8:	e17ffe0d 	sth	r5,-8(fp)
   808bc:	e1bfff0d 	sth	r6,-4(fp)
    unsigned int short i;
    printf("\nSubsequence of length %d starting at position %d: ", sub_length, start_pos);
   808c0:	e17fff0b 	ldhu	r5,-4(fp)
   808c4:	e1bffe0b 	ldhu	r6,-8(fp)
   808c8:	01000274 	movhi	r4,9
   808cc:	21385c04 	addi	r4,r4,-7824
   808d0:	0082c500 	call	82c50 <printf>
    for (i=start_pos; i<start_pos+sub_length; i++)
   808d4:	e0bffe0b 	ldhu	r2,-8(fp)
   808d8:	e0bffc0d 	sth	r2,-16(fp)
   808dc:	00000d06 	br	80914 <print_subsequence+0x70>
        printf("%d ", array[i]);
   808e0:	e0bffc0b 	ldhu	r2,-16(fp)
   808e4:	1085883a 	add	r2,r2,r2
   808e8:	1007883a 	mov	r3,r2
   808ec:	e0bffd17 	ldw	r2,-12(fp)
   808f0:	1885883a 	add	r2,r3,r2
   808f4:	1080000b 	ldhu	r2,0(r2)
   808f8:	117fffcc 	andi	r5,r2,65535
   808fc:	01000274 	movhi	r4,9
   80900:	21385b04 	addi	r4,r4,-7828
   80904:	0082c500 	call	82c50 <printf>
                       unsigned short int start_pos,
                       unsigned short int sub_length)
{
    unsigned int short i;
    printf("\nSubsequence of length %d starting at position %d: ", sub_length, start_pos);
    for (i=start_pos; i<start_pos+sub_length; i++)
   80908:	e0bffc0b 	ldhu	r2,-16(fp)
   8090c:	10800044 	addi	r2,r2,1
   80910:	e0bffc0d 	sth	r2,-16(fp)
   80914:	e13ffc0b 	ldhu	r4,-16(fp)
   80918:	e0fffe0b 	ldhu	r3,-8(fp)
   8091c:	e0bfff0b 	ldhu	r2,-4(fp)
   80920:	1885883a 	add	r2,r3,r2
   80924:	20bfee16 	blt	r4,r2,808e0 <print_subsequence+0x3c>
        printf("%d ", array[i]);
    printf("\n\n");
   80928:	01000274 	movhi	r4,9
   8092c:	21386904 	addi	r4,r4,-7772
   80930:	0082d8c0 	call	82d8c <puts>
}
   80934:	e037883a 	mov	sp,fp
   80938:	dfc00117 	ldw	ra,4(sp)
   8093c:	df000017 	ldw	fp,0(sp)
   80940:	dec00204 	addi	sp,sp,8
   80944:	f800283a 	ret

00080948 <main>:
//----------------------------------------------------------------------------------------------------------------------------------------------
// The main function



int main() {
   80948:	deffeb04 	addi	sp,sp,-84
   8094c:	dfc01415 	stw	ra,80(sp)
   80950:	df001315 	stw	fp,76(sp)
   80954:	dc401215 	stw	r17,72(sp)
   80958:	dc001115 	stw	r16,68(sp)
   8095c:	df001104 	addi	fp,sp,68
	unsigned int num_iteration; //# of times cpu runs
	unsigned int PB_count;
	unsigned short int start_pos;
	unsigned short int sub_length;

	alt_mutex_dev* mutex = NULL;
   80960:	e03ffa15 	stw	zero,-24(fp)
	unsigned int id;
	unsigned int value;
	unsigned int count = 0;
   80964:	e03ff715 	stw	zero,-36(fp)

	int SIZE;

	//unsigned short int *final_set;

	void *performance_name = NULL;
   80968:	e03ff315 	stw	zero,-52(fp)
	message_buffer_struct *message;

	// Get our processor ID (add 1 so it matches the cpu name in SOPC Builder)
		NIOS2_READ_CPUID(id);
   8096c:	0005317a 	rdctl	r2,cpuid
   80970:	e0bff915 	stw	r2,-28(fp)

	printf("COE4DS4 Winter19\n");
   80974:	01000274 	movhi	r4,9
   80978:	21386a04 	addi	r4,r4,-7768
   8097c:	0082d8c0 	call	82d8c <puts>
	printf("Lab7     exp.  3\n\n");
   80980:	01000274 	movhi	r4,9
   80984:	21386f04 	addi	r4,r4,-7748
   80988:	0082d8c0 	call	82d8c <puts>
	printf("Press Push button 1 or 2 :\n");
   8098c:	01000274 	movhi	r4,9
   80990:	21387404 	addi	r4,r4,-7728
   80994:	0082d8c0 	call	82d8c <puts>

	// Value can be any non-zero value
	value = 1;
   80998:	00800044 	movi	r2,1
   8099c:	e0bff815 	stw	r2,-32(fp)

	// Reading switches 15-8 for CPU1
	switches = IORD(CPU1_SWITCH_I_BASE, 0);
   809a0:	00800434 	movhi	r2,16
   809a4:	10883004 	addi	r2,r2,8384
   809a8:	10800037 	ldwio	r2,0(r2)
   809ac:	e0bffd15 	stw	r2,-12(fp)
	swit_buf = switches;
   809b0:	e0bffd17 	ldw	r2,-12(fp)
   809b4:	e0bffc15 	stw	r2,-16(fp)
	unsigned int seed = switches;
   809b8:	e0bffd17 	ldw	r2,-12(fp)
   809bc:	e0bff115 	stw	r2,-60(fp)
	srand(seed);
   809c0:	e13ff117 	ldw	r4,-60(fp)
   809c4:	0082da00 	call	82da0 <srand>

	// Enable all button interrupts
		PB_count = 0;
   809c8:	e03ffe15 	stw	zero,-8(fp)
		IOWR(CPU1_PB_BUTTON_I_BASE, 2, 0x3);
   809cc:	00c00434 	movhi	r3,16
   809d0:	18c82e04 	addi	r3,r3,8376
   809d4:	008000c4 	movi	r2,3
   809d8:	18800035 	stwio	r2,0(r3)
		IOWR(CPU1_PB_BUTTON_I_BASE, 3, 0x0);
   809dc:	00800434 	movhi	r2,16
   809e0:	10882f04 	addi	r2,r2,8380
   809e4:	10000035 	stwio	zero,0(r2)
		alt_irq_register(CPU1_PB_BUTTON_I_IRQ, (void*)&PB_count, (void*)handle_cpu1_button_interrupts );
   809e8:	e17ffe04 	addi	r5,fp,-8
   809ec:	01000084 	movi	r4,2
   809f0:	01800234 	movhi	r6,8
   809f4:	31807c04 	addi	r6,r6,496
   809f8:	008b2080 	call	8b208 <alt_irq_register>

	 while (message->flag != CPU1_WAIT_FLAG);
	 */

	// Initialize the message buffer location
	message = (message_buffer_struct*)MESSAGE_BUFFER_BASE;
   809fc:	00800434 	movhi	r2,16
   80a00:	e0bff215 	stw	r2,-56(fp)

	// Okay, now we'll open the real mutex
	// It's not actually a mutex to share the jtag_uart, but to share a message
	// buffer which CPU1 is responsible for reading and printing to the jtag_uart.
	mutex = altera_avalon_mutex_open(MESSAGE_BUFFER_MUTEX_NAME);
   80a04:	01000274 	movhi	r4,9
   80a08:	21387b04 	addi	r4,r4,-7700
   80a0c:	008c8ec0 	call	8c8ec <altera_avalon_mutex_open>
   80a10:	e0bffa15 	stw	r2,-24(fp)

	performance_name = (void *)CPU1_PERFORMANCE_COUNTER_BASE;
   80a14:	00800434 	movhi	r2,16
   80a18:	10880004 	addi	r2,r2,8192
   80a1c:	e0bff315 	stw	r2,-52(fp)

//	message->CPU_2_Flag = NO_MESSAGE  ;

//	buf[message]

	if (mutex) {
   80a20:	e0bffa17 	ldw	r2,-24(fp)
   80a24:	1005003a 	cmpeq	r2,r2,zero
   80a28:	10017b1e 	bne	r2,zero,81018 <main+0x6d0>
   80a2c:	00000006 	br	80a30 <main+0xe8>
		//message->flag = NO_MESSAGE;
		while(1) {
			SIZE = (rand() % 2001) + 400;
   80a30:	0082dbc0 	call	82dbc <rand>
   80a34:	1009883a 	mov	r4,r2
   80a38:	0141f444 	movi	r5,2001
   80a3c:	0081e500 	call	81e50 <__modsi3>
   80a40:	10806404 	addi	r2,r2,400
   80a44:	e0bff415 	stw	r2,-48(fp)

			start_pos = 0;
   80a48:	e03fff0d 	sth	zero,-4(fp)
			sub_length = 1;
   80a4c:	00800044 	movi	r2,1
   80a50:	e0bfff8d 	sth	r2,-2(fp)
			//printf("PB count = %d\n", PB_count);
			while (altera_avalon_mutex_trylock(mutex, value) != LOCK_SUCCESS);
   80a54:	e13ffa17 	ldw	r4,-24(fp)
   80a58:	e17ff817 	ldw	r5,-32(fp)
   80a5c:	008ca040 	call	8ca04 <altera_avalon_mutex_trylock>
   80a60:	1004c03a 	cmpne	r2,r2,zero
   80a64:	103ffb1e 	bne	r2,zero,80a54 <main+0x10c>

			message->cpu2_start = 0;
   80a68:	e0bff217 	ldw	r2,-56(fp)
   80a6c:	1003fe8d 	sth	zero,4090(r2)
			message->cpu2_length = 1;
   80a70:	e0fff217 	ldw	r3,-56(fp)
   80a74:	00800044 	movi	r2,1
   80a78:	1883ff0d 	sth	r2,4092(r3)
			altera_avalon_mutex_unlock(mutex);
   80a7c:	e13ffa17 	ldw	r4,-24(fp)
   80a80:	008ca440 	call	8ca44 <altera_avalon_mutex_unlock>

			if (PB_count > 0) {
   80a84:	e0bffe17 	ldw	r2,-8(fp)
   80a88:	1005003a 	cmpeq	r2,r2,zero
   80a8c:	103fe81e 	bne	r2,zero,80a30 <main+0xe8>
			     PB_count = 0;
   80a90:	e03ffe15 	stw	zero,-8(fp)

				 PERF_RESET(CPU1_PERFORMANCE_COUNTER_BASE);
   80a94:	00c00434 	movhi	r3,16
   80a98:	18c80004 	addi	r3,r3,8192
   80a9c:	00800044 	movi	r2,1
   80aa0:	18800035 	stwio	r2,0(r3)
			     PERF_START_MEASURING(performance_name);
   80aa4:	e0bff317 	ldw	r2,-52(fp)
   80aa8:	10800104 	addi	r2,r2,4
   80aac:	10000035 	stwio	zero,0(r2)

			    //if ((a == 1 || b ==1)) {// generate random seq

				//while (PB_count) PB_count--;
				 array_store = generate_random_array(SIZE);
   80ab0:	e13ff417 	ldw	r4,-48(fp)
   80ab4:	00804800 	call	80480 <generate_random_array>
   80ab8:	e0bff515 	stw	r2,-44(fp)
				 printf("Generated array:\n");
   80abc:	01000274 	movhi	r4,9
   80ac0:	21388204 	addi	r4,r4,-7672
   80ac4:	0082d8c0 	call	82d8c <puts>
				 print_array(array_store, SIZE);
   80ac8:	e0bff417 	ldw	r2,-48(fp)
   80acc:	117fffcc 	andi	r5,r2,65535
   80ad0:	e13ff517 	ldw	r4,-44(fp)
   80ad4:	00802940 	call	80294 <print_array>

//---------------------------P 2--------------
				 PERF_BEGIN(performance_name, 2);
   80ad8:	e0bff317 	ldw	r2,-52(fp)
   80adc:	10800904 	addi	r2,r2,36
   80ae0:	10000035 	stwio	zero,0(r2)

				 find_max_subsequence(array_store, SIZE, &start_pos, &sub_length);
   80ae4:	e0bff417 	ldw	r2,-48(fp)
   80ae8:	117fffcc 	andi	r5,r2,65535
   80aec:	e1bfff04 	addi	r6,fp,-4
   80af0:	e1ffff84 	addi	r7,fp,-2
   80af4:	e13ff517 	ldw	r4,-44(fp)
   80af8:	00807140 	call	80714 <find_max_subsequence>

				 PERF_END(performance_name, 2);
   80afc:	e0bff317 	ldw	r2,-52(fp)
   80b00:	10800804 	addi	r2,r2,32
   80b04:	10000035 	stwio	zero,0(r2)
 //---------------------------P 2--------------

				 print_subsequence(array_store, start_pos, sub_length);
   80b08:	e0bfff0b 	ldhu	r2,-4(fp)
   80b0c:	117fffcc 	andi	r5,r2,65535
   80b10:	e0bfff8b 	ldhu	r2,-2(fp)
   80b14:	11bfffcc 	andi	r6,r2,65535
   80b18:	e13ff517 	ldw	r4,-44(fp)
   80b1c:	00808a40 	call	808a4 <print_subsequence>

				 while (altera_avalon_mutex_trylock(mutex, value) != LOCK_SUCCESS);
   80b20:	e13ffa17 	ldw	r4,-24(fp)
   80b24:	e17ff817 	ldw	r5,-32(fp)
   80b28:	008ca040 	call	8ca04 <altera_avalon_mutex_trylock>
   80b2c:	1004c03a 	cmpne	r2,r2,zero
   80b30:	103ffb1e 	bne	r2,zero,80b20 <main+0x1d8>


				 printf("CPU 2 is ready to search! \n");
   80b34:	01000274 	movhi	r4,9
   80b38:	21388704 	addi	r4,r4,-7652
   80b3c:	0082d8c0 	call	82d8c <puts>
				 if (SIZE > BUF_SIZE) { //Send as many ele to cpu2
   80b40:	e0bff417 	ldw	r2,-48(fp)
   80b44:	1081fed0 	cmplti	r2,r2,2043
   80b48:	1000151e 	bne	r2,zero,80ba0 <main+0x258>
					 for (i = 0; i < BUF_SIZE; i++) {
   80b4c:	e03ff08d 	sth	zero,-62(fp)
   80b50:	00000f06 	br	80b90 <main+0x248>
						 message->buf[i] = array_store[i];
   80b54:	e17ff08b 	ldhu	r5,-62(fp)
   80b58:	e0bff08b 	ldhu	r2,-62(fp)
   80b5c:	1085883a 	add	r2,r2,r2
   80b60:	1007883a 	mov	r3,r2
   80b64:	e0bff517 	ldw	r2,-44(fp)
   80b68:	1885883a 	add	r2,r3,r2
   80b6c:	1100000b 	ldhu	r4,0(r2)
   80b70:	e0fff217 	ldw	r3,-56(fp)
   80b74:	2945883a 	add	r2,r5,r5
   80b78:	10c5883a 	add	r2,r2,r3
   80b7c:	10800184 	addi	r2,r2,6
   80b80:	1100000d 	sth	r4,0(r2)
				 while (altera_avalon_mutex_trylock(mutex, value) != LOCK_SUCCESS);


				 printf("CPU 2 is ready to search! \n");
				 if (SIZE > BUF_SIZE) { //Send as many ele to cpu2
					 for (i = 0; i < BUF_SIZE; i++) {
   80b84:	e0bff08b 	ldhu	r2,-62(fp)
   80b88:	10800044 	addi	r2,r2,1
   80b8c:	e0bff08d 	sth	r2,-62(fp)
   80b90:	e0bff08b 	ldhu	r2,-62(fp)
   80b94:	1081feb0 	cmpltui	r2,r2,2042
   80b98:	103fee1e 	bne	r2,zero,80b54 <main+0x20c>
   80b9c:	00001406 	br	80bf0 <main+0x2a8>
						 message->buf[i] = array_store[i];
					 }
				 }

				 else {
					 for (i = 0; i < SIZE; i++) {
   80ba0:	e03ff08d 	sth	zero,-62(fp)
   80ba4:	00000f06 	br	80be4 <main+0x29c>
						 message->buf[i] = array_store[i];
   80ba8:	e17ff08b 	ldhu	r5,-62(fp)
   80bac:	e0bff08b 	ldhu	r2,-62(fp)
   80bb0:	1085883a 	add	r2,r2,r2
   80bb4:	1007883a 	mov	r3,r2
   80bb8:	e0bff517 	ldw	r2,-44(fp)
   80bbc:	1885883a 	add	r2,r3,r2
   80bc0:	1100000b 	ldhu	r4,0(r2)
   80bc4:	e0fff217 	ldw	r3,-56(fp)
   80bc8:	2945883a 	add	r2,r5,r5
   80bcc:	10c5883a 	add	r2,r2,r3
   80bd0:	10800184 	addi	r2,r2,6
   80bd4:	1100000d 	sth	r4,0(r2)
						 message->buf[i] = array_store[i];
					 }
				 }

				 else {
					 for (i = 0; i < SIZE; i++) {
   80bd8:	e0bff08b 	ldhu	r2,-62(fp)
   80bdc:	10800044 	addi	r2,r2,1
   80be0:	e0bff08d 	sth	r2,-62(fp)
   80be4:	e0fff08b 	ldhu	r3,-62(fp)
   80be8:	e0bff417 	ldw	r2,-48(fp)
   80bec:	18bfee16 	blt	r3,r2,80ba8 <main+0x260>
							//printf(" %d", message->buf[i] \n");
					 }
				 }

				// printf("Array from CPU1 transferred to CPU2!\n");
				 	 message->buf_size = SIZE;
   80bf0:	e0bff417 	ldw	r2,-48(fp)
   80bf4:	1007883a 	mov	r3,r2
   80bf8:	e0bff217 	ldw	r2,-56(fp)
   80bfc:	10c0008d 	sth	r3,2(r2)
				 	 message->start_arr = 1;
   80c00:	e0fff217 	ldw	r3,-56(fp)
   80c04:	00800044 	movi	r2,1
   80c08:	1880010d 	sth	r2,4(r3)
				 message->flag = CPU2_WAIT_FLAG;
   80c0c:	e0fff217 	ldw	r3,-56(fp)
   80c10:	00800084 	movi	r2,2
   80c14:	18800005 	stb	r2,0(r3)
				 altera_avalon_mutex_unlock(mutex);
   80c18:	e13ffa17 	ldw	r4,-24(fp)
   80c1c:	008ca440 	call	8ca44 <altera_avalon_mutex_unlock>


				 printf("Press Push button 2 or 3 \n");
   80c20:	01000274 	movhi	r4,9
   80c24:	21388e04 	addi	r4,r4,-7624
   80c28:	0082d8c0 	call	82d8c <puts>
				 while ((*(char volatile *)(&(message->flag))) != CPU1_WAIT_FLAG);
   80c2c:	e0bff217 	ldw	r2,-56(fp)
   80c30:	10800003 	ldbu	r2,0(r2)
   80c34:	10803fcc 	andi	r2,r2,255
   80c38:	1080201c 	xori	r2,r2,128
   80c3c:	10bfe004 	addi	r2,r2,-128
   80c40:	10800058 	cmpnei	r2,r2,1
   80c44:	103ff91e 	bne	r2,zero,80c2c <main+0x2e4>

				 //printf("came back to CPU1 \n"); //debug
				 if (SIZE > BUF_SIZE) {
   80c48:	e0bff417 	ldw	r2,-48(fp)
   80c4c:	1081fed0 	cmplti	r2,r2,2043
   80c50:	1000231e 	bne	r2,zero,80ce0 <main+0x398>
					 while (altera_avalon_mutex_trylock(mutex, value) != LOCK_SUCCESS);
   80c54:	e13ffa17 	ldw	r4,-24(fp)
   80c58:	e17ff817 	ldw	r5,-32(fp)
   80c5c:	008ca040 	call	8ca04 <altera_avalon_mutex_trylock>
   80c60:	1004c03a 	cmpne	r2,r2,zero
   80c64:	103ffb1e 	bne	r2,zero,80c54 <main+0x30c>
					 for (i = 0; i < SIZE - BUF_SIZE; i++) {
   80c68:	e03ff08d 	sth	zero,-62(fp)
   80c6c:	00001006 	br	80cb0 <main+0x368>
						 message->buf[i] = array_store[BUF_SIZE + i];
   80c70:	e17ff08b 	ldhu	r5,-62(fp)
   80c74:	e0bff08b 	ldhu	r2,-62(fp)
   80c78:	1085883a 	add	r2,r2,r2
   80c7c:	1007883a 	mov	r3,r2
   80c80:	e0bff517 	ldw	r2,-44(fp)
   80c84:	1885883a 	add	r2,r3,r2
   80c88:	1083fd04 	addi	r2,r2,4084
   80c8c:	1100000b 	ldhu	r4,0(r2)
   80c90:	e0fff217 	ldw	r3,-56(fp)
   80c94:	2945883a 	add	r2,r5,r5
   80c98:	10c5883a 	add	r2,r2,r3
   80c9c:	10800184 	addi	r2,r2,6
   80ca0:	1100000d 	sth	r4,0(r2)
				 while ((*(char volatile *)(&(message->flag))) != CPU1_WAIT_FLAG);

				 //printf("came back to CPU1 \n"); //debug
				 if (SIZE > BUF_SIZE) {
					 while (altera_avalon_mutex_trylock(mutex, value) != LOCK_SUCCESS);
					 for (i = 0; i < SIZE - BUF_SIZE; i++) {
   80ca4:	e0bff08b 	ldhu	r2,-62(fp)
   80ca8:	10800044 	addi	r2,r2,1
   80cac:	e0bff08d 	sth	r2,-62(fp)
   80cb0:	e0bff08b 	ldhu	r2,-62(fp)
   80cb4:	e0fff417 	ldw	r3,-48(fp)
   80cb8:	18fe0184 	addi	r3,r3,-2042
   80cbc:	10ffec16 	blt	r2,r3,80c70 <main+0x328>
						 message->buf[i] = array_store[BUF_SIZE + i];
					 }

					  message->flag = CPU2_WAIT_FLAG;
   80cc0:	e0fff217 	ldw	r3,-56(fp)
   80cc4:	00800084 	movi	r2,2
   80cc8:	18800005 	stb	r2,0(r3)
					 altera_avalon_mutex_unlock(mutex);
   80ccc:	e13ffa17 	ldw	r4,-24(fp)
   80cd0:	008ca440 	call	8ca44 <altera_avalon_mutex_unlock>
					 printf("More data sent!");
   80cd4:	01000274 	movhi	r4,9
   80cd8:	21389504 	addi	r4,r4,-7596
   80cdc:	0082c500 	call	82c50 <printf>
				 }
				 while ((*(char volatile *)(&(message->flag))) != CPU1_WAIT_FLAG);
   80ce0:	e0bff217 	ldw	r2,-56(fp)
   80ce4:	10800003 	ldbu	r2,0(r2)
   80ce8:	10803fcc 	andi	r2,r2,255
   80cec:	1080201c 	xori	r2,r2,128
   80cf0:	10bfe004 	addi	r2,r2,-128
   80cf4:	10800058 	cmpnei	r2,r2,1
   80cf8:	103ff91e 	bne	r2,zero,80ce0 <main+0x398>

				 printf("Completed! (Debugging purposes) \n");
   80cfc:	01000274 	movhi	r4,9
   80d00:	21389904 	addi	r4,r4,-7580
   80d04:	0082d8c0 	call	82d8c <puts>

//----------------PERFORMANCE COUNTER 1-------------

				PERF_BEGIN(performance_name, 1);
   80d08:	e0bff317 	ldw	r2,-52(fp)
   80d0c:	10800504 	addi	r2,r2,20
   80d10:	10000035 	stwio	zero,0(r2)

				 printf("Finding longest for CPU1 (half of array)  \n");
   80d14:	01000274 	movhi	r4,9
   80d18:	2138a204 	addi	r4,r4,-7544
   80d1c:	0082d8c0 	call	82d8c <puts>
				 //doing Half the size search, from middle to end*****
				 //****- modified longest seq****
				 for (i = SIZE / 2; i < SIZE; i++) {
   80d20:	e0fff417 	ldw	r3,-48(fp)
   80d24:	1804d7fa 	srli	r2,r3,31
   80d28:	10c5883a 	add	r2,r2,r3
   80d2c:	1005d07a 	srai	r2,r2,1
   80d30:	e0bff08d 	sth	r2,-62(fp)
   80d34:	00005006 	br	80e78 <main+0x530>
					 unsigned short int sub_min = array_store[i];
   80d38:	e0bff08b 	ldhu	r2,-62(fp)
   80d3c:	1085883a 	add	r2,r2,r2
   80d40:	1007883a 	mov	r3,r2
   80d44:	e0bff517 	ldw	r2,-44(fp)
   80d48:	1885883a 	add	r2,r3,r2
   80d4c:	1080000b 	ldhu	r2,0(r2)
   80d50:	e0bfef8d 	sth	r2,-66(fp)
					 unsigned short int sub_max = array_store[i];
   80d54:	e0bff08b 	ldhu	r2,-62(fp)
   80d58:	1085883a 	add	r2,r2,r2
   80d5c:	1007883a 	mov	r3,r2
   80d60:	e0bff517 	ldw	r2,-44(fp)
   80d64:	1885883a 	add	r2,r3,r2
   80d68:	1080000b 	ldhu	r2,0(r2)
   80d6c:	e0bfef0d 	sth	r2,-68(fp)
					 for (j=i+1; j < SIZE; j++) {
   80d70:	e0bff08b 	ldhu	r2,-62(fp)
   80d74:	10800044 	addi	r2,r2,1
   80d78:	e0bff00d 	sth	r2,-64(fp)
   80d7c:	00003806 	br	80e60 <main+0x518>
						 if (array_store[j] < sub_min) sub_min = array_store[j];
   80d80:	e0bff00b 	ldhu	r2,-64(fp)
   80d84:	1085883a 	add	r2,r2,r2
   80d88:	1007883a 	mov	r3,r2
   80d8c:	e0bff517 	ldw	r2,-44(fp)
   80d90:	1885883a 	add	r2,r3,r2
   80d94:	1080000b 	ldhu	r2,0(r2)
   80d98:	10ffffcc 	andi	r3,r2,65535
   80d9c:	e0bfef8b 	ldhu	r2,-66(fp)
   80da0:	1880072e 	bgeu	r3,r2,80dc0 <main+0x478>
   80da4:	e0bff00b 	ldhu	r2,-64(fp)
   80da8:	1085883a 	add	r2,r2,r2
   80dac:	1007883a 	mov	r3,r2
   80db0:	e0bff517 	ldw	r2,-44(fp)
   80db4:	1885883a 	add	r2,r3,r2
   80db8:	1080000b 	ldhu	r2,0(r2)
   80dbc:	e0bfef8d 	sth	r2,-66(fp)
						 if (array_store[j] > sub_max) sub_max = array_store[j];
   80dc0:	e0bff00b 	ldhu	r2,-64(fp)
   80dc4:	1085883a 	add	r2,r2,r2
   80dc8:	1007883a 	mov	r3,r2
   80dcc:	e0bff517 	ldw	r2,-44(fp)
   80dd0:	1885883a 	add	r2,r3,r2
   80dd4:	1080000b 	ldhu	r2,0(r2)
   80dd8:	10ffffcc 	andi	r3,r2,65535
   80ddc:	e0bfef0b 	ldhu	r2,-68(fp)
   80de0:	10c0072e 	bgeu	r2,r3,80e00 <main+0x4b8>
   80de4:	e0bff00b 	ldhu	r2,-64(fp)
   80de8:	1085883a 	add	r2,r2,r2
   80dec:	1007883a 	mov	r3,r2
   80df0:	e0bff517 	ldw	r2,-44(fp)
   80df4:	1885883a 	add	r2,r3,r2
   80df8:	1080000b 	ldhu	r2,0(r2)
   80dfc:	e0bfef0d 	sth	r2,-68(fp)
						 // detect neighbourhood in subsequence
						 if ((sub_max - sub_min) == (j - i)) {
   80e00:	e0ffef0b 	ldhu	r3,-68(fp)
   80e04:	e0bfef8b 	ldhu	r2,-66(fp)
   80e08:	1889c83a 	sub	r4,r3,r2
   80e0c:	e0fff00b 	ldhu	r3,-64(fp)
   80e10:	e0bff08b 	ldhu	r2,-62(fp)
   80e14:	1885c83a 	sub	r2,r3,r2
   80e18:	20800e1e 	bne	r4,r2,80e54 <main+0x50c>
							 // update starting position and subsequence length
							 if ((sub_length) < (sub_max - sub_min + 1)) {
   80e1c:	e0bfff8b 	ldhu	r2,-2(fp)
   80e20:	113fffcc 	andi	r4,r2,65535
   80e24:	e0ffef0b 	ldhu	r3,-68(fp)
   80e28:	e0bfef8b 	ldhu	r2,-66(fp)
   80e2c:	1885c83a 	sub	r2,r3,r2
   80e30:	10800044 	addi	r2,r2,1
   80e34:	2080070e 	bge	r4,r2,80e54 <main+0x50c>
								 start_pos = i;
   80e38:	e0bff08b 	ldhu	r2,-62(fp)
   80e3c:	e0bfff0d 	sth	r2,-4(fp)
								 sub_length = sub_max - sub_min + 1;
   80e40:	e0ffef0b 	ldhu	r3,-68(fp)
   80e44:	e0bfef8b 	ldhu	r2,-66(fp)
   80e48:	1885c83a 	sub	r2,r3,r2
   80e4c:	10800044 	addi	r2,r2,1
   80e50:	e0bfff8d 	sth	r2,-2(fp)
				 //doing Half the size search, from middle to end*****
				 //****- modified longest seq****
				 for (i = SIZE / 2; i < SIZE; i++) {
					 unsigned short int sub_min = array_store[i];
					 unsigned short int sub_max = array_store[i];
					 for (j=i+1; j < SIZE; j++) {
   80e54:	e0bff00b 	ldhu	r2,-64(fp)
   80e58:	10800044 	addi	r2,r2,1
   80e5c:	e0bff00d 	sth	r2,-64(fp)
   80e60:	e0fff00b 	ldhu	r3,-64(fp)
   80e64:	e0bff417 	ldw	r2,-48(fp)
   80e68:	18bfc516 	blt	r3,r2,80d80 <main+0x438>
				PERF_BEGIN(performance_name, 1);

				 printf("Finding longest for CPU1 (half of array)  \n");
				 //doing Half the size search, from middle to end*****
				 //****- modified longest seq****
				 for (i = SIZE / 2; i < SIZE; i++) {
   80e6c:	e0bff08b 	ldhu	r2,-62(fp)
   80e70:	10800044 	addi	r2,r2,1
   80e74:	e0bff08d 	sth	r2,-62(fp)
   80e78:	e0fff08b 	ldhu	r3,-62(fp)
   80e7c:	e0bff417 	ldw	r2,-48(fp)
   80e80:	18bfad16 	blt	r3,r2,80d38 <main+0x3f0>

				 }

//----------------------- PERFORMAANCE COUNTER 1 DONE

				printf("Modifed sorting complete, continue to CPU2!\n");
   80e84:	01000274 	movhi	r4,9
   80e88:	2138ad04 	addi	r4,r4,-7500
   80e8c:	0082d8c0 	call	82d8c <puts>
				while ((*(char volatile *)(&(message->flag))) != CPU1_WAIT_FLAG);
   80e90:	e0bff217 	ldw	r2,-56(fp)
   80e94:	10800003 	ldbu	r2,0(r2)
   80e98:	10803fcc 	andi	r2,r2,255
   80e9c:	1080201c 	xori	r2,r2,128
   80ea0:	10bfe004 	addi	r2,r2,-128
   80ea4:	10800058 	cmpnei	r2,r2,1
   80ea8:	103ff91e 	bne	r2,zero,80e90 <main+0x548>
				while (altera_avalon_mutex_trylock(mutex, value) != LOCK_SUCCESS);
   80eac:	e13ffa17 	ldw	r4,-24(fp)
   80eb0:	e17ff817 	ldw	r5,-32(fp)
   80eb4:	008ca040 	call	8ca04 <altera_avalon_mutex_trylock>
   80eb8:	1004c03a 	cmpne	r2,r2,zero
   80ebc:	103ffb1e 	bne	r2,zero,80eac <main+0x564>

				 PERF_END(performance_name, 1);
   80ec0:	e0bff317 	ldw	r2,-52(fp)
   80ec4:	10800404 	addi	r2,r2,16
   80ec8:	10000035 	stwio	zero,0(r2)

				if (message->cpu2_length > sub_length) {
   80ecc:	e0bff217 	ldw	r2,-56(fp)
   80ed0:	1083ff0b 	ldhu	r2,4092(r2)
   80ed4:	e0ffff8b 	ldhu	r3,-2(fp)
   80ed8:	113fffcc 	andi	r4,r2,65535
   80edc:	18bfffcc 	andi	r2,r3,65535
   80ee0:	1100062e 	bgeu	r2,r4,80efc <main+0x5b4>
					sub_length = message->cpu2_length;
   80ee4:	e0bff217 	ldw	r2,-56(fp)
   80ee8:	1083ff0b 	ldhu	r2,4092(r2)
   80eec:	e0bfff8d 	sth	r2,-2(fp)
					start_pos = message->cpu2_start;
   80ef0:	e0bff217 	ldw	r2,-56(fp)
   80ef4:	1083fe8b 	ldhu	r2,4090(r2)
   80ef8:	e0bfff0d 	sth	r2,-4(fp)
				}
				altera_avalon_mutex_unlock(mutex);
   80efc:	e13ffa17 	ldw	r4,-24(fp)
   80f00:	008ca440 	call	8ca44 <altera_avalon_mutex_unlock>

				printf("Searching on both CPU complete, longest subsequence obtained!\n");
   80f04:	01000274 	movhi	r4,9
   80f08:	2138b804 	addi	r4,r4,-7456
   80f0c:	0082d8c0 	call	82d8c <puts>

				print_subsequence(array_store, start_pos, sub_length);
   80f10:	e0bfff0b 	ldhu	r2,-4(fp)
   80f14:	117fffcc 	andi	r5,r2,65535
   80f18:	e0bfff8b 	ldhu	r2,-2(fp)
   80f1c:	11bfffcc 	andi	r6,r2,65535
   80f20:	e13ff517 	ldw	r4,-44(fp)
   80f24:	00808a40 	call	808a4 <print_subsequence>

				//PERFORMANCE COUNTER RESULTS ----

				printf("PERFORMANCE RESULTS: \n");
   80f28:	01000274 	movhi	r4,9
   80f2c:	2138c804 	addi	r4,r4,-7392
   80f30:	0082d8c0 	call	82d8c <puts>

				printf("Measuring Only CPU1 performance: %d clock cycles for finding subseqeunce\n" ,(unsigned int)perf_get_section_time(performance_name, 2));
   80f34:	e13ff317 	ldw	r4,-52(fp)
   80f38:	01400084 	movi	r5,2
   80f3c:	008cb740 	call	8cb74 <perf_get_section_time>
   80f40:	1009883a 	mov	r4,r2
   80f44:	180b883a 	mov	r5,r3
   80f48:	200b883a 	mov	r5,r4
   80f4c:	01000274 	movhi	r4,9
   80f50:	2138ce04 	addi	r4,r4,-7368
   80f54:	0082c500 	call	82c50 <printf>
				printf("Measuring concurrent performance: %d clock cycles for finding subseqeunce\n",(unsigned int)perf_get_section_time(performance_name, 1));
   80f58:	e13ff317 	ldw	r4,-52(fp)
   80f5c:	01400044 	movi	r5,1
   80f60:	008cb740 	call	8cb74 <perf_get_section_time>
   80f64:	1009883a 	mov	r4,r2
   80f68:	180b883a 	mov	r5,r3
   80f6c:	200b883a 	mov	r5,r4
   80f70:	01000274 	movhi	r4,9
   80f74:	2138e104 	addi	r4,r4,-7292
   80f78:	0082c500 	call	82c50 <printf>

				printf("**Speed up is: %4.2fx\n", ((double)perf_get_section_time(performance_name, 2))/((double)perf_get_section_time(performance_name, 1)));
   80f7c:	e13ff317 	ldw	r4,-52(fp)
   80f80:	01400084 	movi	r5,2
   80f84:	008cb740 	call	8cb74 <perf_get_section_time>
   80f88:	100b883a 	mov	r5,r2
   80f8c:	180d883a 	mov	r6,r3
   80f90:	2809883a 	mov	r4,r5
   80f94:	300b883a 	mov	r5,r6
   80f98:	00810380 	call	81038 <__floatundidf>
   80f9c:	1021883a 	mov	r16,r2
   80fa0:	1823883a 	mov	r17,r3
   80fa4:	e13ff317 	ldw	r4,-52(fp)
   80fa8:	01400044 	movi	r5,1
   80fac:	008cb740 	call	8cb74 <perf_get_section_time>
   80fb0:	100b883a 	mov	r5,r2
   80fb4:	180d883a 	mov	r6,r3
   80fb8:	2809883a 	mov	r4,r5
   80fbc:	300b883a 	mov	r5,r6
   80fc0:	00810380 	call	81038 <__floatundidf>
   80fc4:	100f883a 	mov	r7,r2
   80fc8:	1811883a 	mov	r8,r3
   80fcc:	8009883a 	mov	r4,r16
   80fd0:	880b883a 	mov	r5,r17
   80fd4:	380d883a 	mov	r6,r7
   80fd8:	400f883a 	mov	r7,r8
   80fdc:	00819880 	call	81988 <__divdf3>
   80fe0:	1009883a 	mov	r4,r2
   80fe4:	180b883a 	mov	r5,r3
   80fe8:	2005883a 	mov	r2,r4
   80fec:	2807883a 	mov	r3,r5
   80ff0:	01000274 	movhi	r4,9
   80ff4:	2138f404 	addi	r4,r4,-7216
   80ff8:	100b883a 	mov	r5,r2
   80ffc:	180d883a 	mov	r6,r3
   81000:	0082c500 	call	82c50 <printf>

				PERF_STOP_MEASURING(performance_name);
   81004:	e0bff317 	ldw	r2,-52(fp)
   81008:	10000035 	stwio	zero,0(r2)


				free(array_store);
   8100c:	e13ff517 	ldw	r4,-44(fp)
   81010:	00824e80 	call	824e8 <free>

			}

		//	swit_buf = switches;
		//	switches = IORD(CPU1_SWITCH_I_BASE, 0);
		}
   81014:	003e8606 	br	80a30 <main+0xe8>
	}


	return(0);
   81018:	0005883a 	mov	r2,zero
}
   8101c:	e037883a 	mov	sp,fp
   81020:	dfc00317 	ldw	ra,12(sp)
   81024:	df000217 	ldw	fp,8(sp)
   81028:	dc400117 	ldw	r17,4(sp)
   8102c:	dc000017 	ldw	r16,0(sp)
   81030:	dec00404 	addi	sp,sp,16
   81034:	f800283a 	ret

00081038 <__floatundidf>:
   81038:	defffb04 	addi	sp,sp,-20
   8103c:	dc800215 	stw	r18,8(sp)
   81040:	2025883a 	mov	r18,r4
   81044:	2809883a 	mov	r4,r5
   81048:	dfc00415 	stw	ra,16(sp)
   8104c:	dc400115 	stw	r17,4(sp)
   81050:	dc000015 	stw	r16,0(sp)
   81054:	dcc00315 	stw	r19,12(sp)
   81058:	0081be00 	call	81be0 <__floatunsidf>
   8105c:	100d883a 	mov	r6,r2
   81060:	180f883a 	mov	r7,r3
   81064:	0005883a 	mov	r2,zero
   81068:	00d07c34 	movhi	r3,16880
   8106c:	380b883a 	mov	r5,r7
   81070:	3009883a 	mov	r4,r6
   81074:	180f883a 	mov	r7,r3
   81078:	100d883a 	mov	r6,r2
   8107c:	00815c40 	call	815c4 <__muldf3>
   81080:	9009883a 	mov	r4,r18
   81084:	1021883a 	mov	r16,r2
   81088:	1823883a 	mov	r17,r3
   8108c:	0081be00 	call	81be0 <__floatunsidf>
   81090:	880b883a 	mov	r5,r17
   81094:	8009883a 	mov	r4,r16
   81098:	180f883a 	mov	r7,r3
   8109c:	100d883a 	mov	r6,r2
   810a0:	00815500 	call	81550 <__adddf3>
   810a4:	dfc00417 	ldw	ra,16(sp)
   810a8:	dcc00317 	ldw	r19,12(sp)
   810ac:	dc800217 	ldw	r18,8(sp)
   810b0:	dc400117 	ldw	r17,4(sp)
   810b4:	dc000017 	ldw	r16,0(sp)
   810b8:	dec00504 	addi	sp,sp,20
   810bc:	f800283a 	ret

000810c0 <_fpadd_parts>:
   810c0:	defff804 	addi	sp,sp,-32
   810c4:	dcc00315 	stw	r19,12(sp)
   810c8:	2027883a 	mov	r19,r4
   810cc:	21000017 	ldw	r4,0(r4)
   810d0:	00c00044 	movi	r3,1
   810d4:	dd400515 	stw	r21,20(sp)
   810d8:	dd000415 	stw	r20,16(sp)
   810dc:	ddc00715 	stw	r23,28(sp)
   810e0:	dd800615 	stw	r22,24(sp)
   810e4:	dc800215 	stw	r18,8(sp)
   810e8:	dc400115 	stw	r17,4(sp)
   810ec:	dc000015 	stw	r16,0(sp)
   810f0:	282b883a 	mov	r21,r5
   810f4:	3029883a 	mov	r20,r6
   810f8:	1900632e 	bgeu	r3,r4,81288 <_fpadd_parts+0x1c8>
   810fc:	28800017 	ldw	r2,0(r5)
   81100:	1880812e 	bgeu	r3,r2,81308 <_fpadd_parts+0x248>
   81104:	00c00104 	movi	r3,4
   81108:	20c0dc26 	beq	r4,r3,8147c <_fpadd_parts+0x3bc>
   8110c:	10c07e26 	beq	r2,r3,81308 <_fpadd_parts+0x248>
   81110:	00c00084 	movi	r3,2
   81114:	10c06726 	beq	r2,r3,812b4 <_fpadd_parts+0x1f4>
   81118:	20c07b26 	beq	r4,r3,81308 <_fpadd_parts+0x248>
   8111c:	9dc00217 	ldw	r23,8(r19)
   81120:	28c00217 	ldw	r3,8(r5)
   81124:	9c400317 	ldw	r17,12(r19)
   81128:	2bc00317 	ldw	r15,12(r5)
   8112c:	b8cdc83a 	sub	r6,r23,r3
   81130:	9c800417 	ldw	r18,16(r19)
   81134:	2c000417 	ldw	r16,16(r5)
   81138:	3009883a 	mov	r4,r6
   8113c:	30009716 	blt	r6,zero,8139c <_fpadd_parts+0x2dc>
   81140:	00800fc4 	movi	r2,63
   81144:	11806b16 	blt	r2,r6,812f4 <_fpadd_parts+0x234>
   81148:	0100a40e 	bge	zero,r4,813dc <_fpadd_parts+0x31c>
   8114c:	35bff804 	addi	r22,r6,-32
   81150:	b000bc16 	blt	r22,zero,81444 <_fpadd_parts+0x384>
   81154:	8596d83a 	srl	r11,r16,r22
   81158:	0019883a 	mov	r12,zero
   8115c:	0013883a 	mov	r9,zero
   81160:	01000044 	movi	r4,1
   81164:	0015883a 	mov	r10,zero
   81168:	b000be16 	blt	r22,zero,81464 <_fpadd_parts+0x3a4>
   8116c:	2590983a 	sll	r8,r4,r22
   81170:	000f883a 	mov	r7,zero
   81174:	00bfffc4 	movi	r2,-1
   81178:	3889883a 	add	r4,r7,r2
   8117c:	408b883a 	add	r5,r8,r2
   81180:	21cd803a 	cmpltu	r6,r4,r7
   81184:	314b883a 	add	r5,r6,r5
   81188:	7904703a 	and	r2,r15,r4
   8118c:	8146703a 	and	r3,r16,r5
   81190:	10c4b03a 	or	r2,r2,r3
   81194:	10000226 	beq	r2,zero,811a0 <_fpadd_parts+0xe0>
   81198:	02400044 	movi	r9,1
   8119c:	0015883a 	mov	r10,zero
   811a0:	5a5eb03a 	or	r15,r11,r9
   811a4:	62a0b03a 	or	r16,r12,r10
   811a8:	99400117 	ldw	r5,4(r19)
   811ac:	a8800117 	ldw	r2,4(r21)
   811b0:	28806e26 	beq	r5,r2,8136c <_fpadd_parts+0x2ac>
   811b4:	28006626 	beq	r5,zero,81350 <_fpadd_parts+0x290>
   811b8:	7c45c83a 	sub	r2,r15,r17
   811bc:	7889803a 	cmpltu	r4,r15,r2
   811c0:	8487c83a 	sub	r3,r16,r18
   811c4:	1909c83a 	sub	r4,r3,r4
   811c8:	100d883a 	mov	r6,r2
   811cc:	200f883a 	mov	r7,r4
   811d0:	38007716 	blt	r7,zero,813b0 <_fpadd_parts+0x2f0>
   811d4:	a5c00215 	stw	r23,8(r20)
   811d8:	a1c00415 	stw	r7,16(r20)
   811dc:	a0000115 	stw	zero,4(r20)
   811e0:	a1800315 	stw	r6,12(r20)
   811e4:	a2000317 	ldw	r8,12(r20)
   811e8:	a2400417 	ldw	r9,16(r20)
   811ec:	00bfffc4 	movi	r2,-1
   811f0:	408b883a 	add	r5,r8,r2
   811f4:	2a09803a 	cmpltu	r4,r5,r8
   811f8:	488d883a 	add	r6,r9,r2
   811fc:	01c40034 	movhi	r7,4096
   81200:	39ffffc4 	addi	r7,r7,-1
   81204:	218d883a 	add	r6,r4,r6
   81208:	39801736 	bltu	r7,r6,81268 <_fpadd_parts+0x1a8>
   8120c:	31c06526 	beq	r6,r7,813a4 <_fpadd_parts+0x2e4>
   81210:	a3000217 	ldw	r12,8(r20)
   81214:	4209883a 	add	r4,r8,r8
   81218:	00bfffc4 	movi	r2,-1
   8121c:	220f803a 	cmpltu	r7,r4,r8
   81220:	4a4b883a 	add	r5,r9,r9
   81224:	394f883a 	add	r7,r7,r5
   81228:	2095883a 	add	r10,r4,r2
   8122c:	3897883a 	add	r11,r7,r2
   81230:	510d803a 	cmpltu	r6,r10,r4
   81234:	6099883a 	add	r12,r12,r2
   81238:	32d7883a 	add	r11,r6,r11
   8123c:	00840034 	movhi	r2,4096
   81240:	10bfffc4 	addi	r2,r2,-1
   81244:	2011883a 	mov	r8,r4
   81248:	3813883a 	mov	r9,r7
   8124c:	a1000315 	stw	r4,12(r20)
   81250:	a1c00415 	stw	r7,16(r20)
   81254:	a3000215 	stw	r12,8(r20)
   81258:	12c00336 	bltu	r2,r11,81268 <_fpadd_parts+0x1a8>
   8125c:	58bfed1e 	bne	r11,r2,81214 <_fpadd_parts+0x154>
   81260:	00bfff84 	movi	r2,-2
   81264:	12bfeb2e 	bgeu	r2,r10,81214 <_fpadd_parts+0x154>
   81268:	a2800417 	ldw	r10,16(r20)
   8126c:	008000c4 	movi	r2,3
   81270:	00c80034 	movhi	r3,8192
   81274:	18ffffc4 	addi	r3,r3,-1
   81278:	a2400317 	ldw	r9,12(r20)
   8127c:	a0800015 	stw	r2,0(r20)
   81280:	1a802336 	bltu	r3,r10,81310 <_fpadd_parts+0x250>
   81284:	a027883a 	mov	r19,r20
   81288:	9805883a 	mov	r2,r19
   8128c:	ddc00717 	ldw	r23,28(sp)
   81290:	dd800617 	ldw	r22,24(sp)
   81294:	dd400517 	ldw	r21,20(sp)
   81298:	dd000417 	ldw	r20,16(sp)
   8129c:	dcc00317 	ldw	r19,12(sp)
   812a0:	dc800217 	ldw	r18,8(sp)
   812a4:	dc400117 	ldw	r17,4(sp)
   812a8:	dc000017 	ldw	r16,0(sp)
   812ac:	dec00804 	addi	sp,sp,32
   812b0:	f800283a 	ret
   812b4:	20fff41e 	bne	r4,r3,81288 <_fpadd_parts+0x1c8>
   812b8:	31000015 	stw	r4,0(r6)
   812bc:	98800117 	ldw	r2,4(r19)
   812c0:	30800115 	stw	r2,4(r6)
   812c4:	98c00217 	ldw	r3,8(r19)
   812c8:	30c00215 	stw	r3,8(r6)
   812cc:	98800317 	ldw	r2,12(r19)
   812d0:	30800315 	stw	r2,12(r6)
   812d4:	98c00417 	ldw	r3,16(r19)
   812d8:	30c00415 	stw	r3,16(r6)
   812dc:	98800117 	ldw	r2,4(r19)
   812e0:	28c00117 	ldw	r3,4(r5)
   812e4:	3027883a 	mov	r19,r6
   812e8:	10c4703a 	and	r2,r2,r3
   812ec:	30800115 	stw	r2,4(r6)
   812f0:	003fe506 	br	81288 <_fpadd_parts+0x1c8>
   812f4:	1dc02616 	blt	r3,r23,81390 <_fpadd_parts+0x2d0>
   812f8:	0023883a 	mov	r17,zero
   812fc:	182f883a 	mov	r23,r3
   81300:	0025883a 	mov	r18,zero
   81304:	003fa806 	br	811a8 <_fpadd_parts+0xe8>
   81308:	a827883a 	mov	r19,r21
   8130c:	003fde06 	br	81288 <_fpadd_parts+0x1c8>
   81310:	01800044 	movi	r6,1
   81314:	500497fa 	slli	r2,r10,31
   81318:	4808d07a 	srli	r4,r9,1
   8131c:	518ad83a 	srl	r5,r10,r6
   81320:	a2000217 	ldw	r8,8(r20)
   81324:	1108b03a 	or	r4,r2,r4
   81328:	0007883a 	mov	r3,zero
   8132c:	4984703a 	and	r2,r9,r6
   81330:	208cb03a 	or	r6,r4,r2
   81334:	28ceb03a 	or	r7,r5,r3
   81338:	42000044 	addi	r8,r8,1
   8133c:	a027883a 	mov	r19,r20
   81340:	a1c00415 	stw	r7,16(r20)
   81344:	a2000215 	stw	r8,8(r20)
   81348:	a1800315 	stw	r6,12(r20)
   8134c:	003fce06 	br	81288 <_fpadd_parts+0x1c8>
   81350:	8bc5c83a 	sub	r2,r17,r15
   81354:	8889803a 	cmpltu	r4,r17,r2
   81358:	9407c83a 	sub	r3,r18,r16
   8135c:	1909c83a 	sub	r4,r3,r4
   81360:	100d883a 	mov	r6,r2
   81364:	200f883a 	mov	r7,r4
   81368:	003f9906 	br	811d0 <_fpadd_parts+0x110>
   8136c:	7c45883a 	add	r2,r15,r17
   81370:	13c9803a 	cmpltu	r4,r2,r15
   81374:	8487883a 	add	r3,r16,r18
   81378:	20c9883a 	add	r4,r4,r3
   8137c:	a1400115 	stw	r5,4(r20)
   81380:	a5c00215 	stw	r23,8(r20)
   81384:	a0800315 	stw	r2,12(r20)
   81388:	a1000415 	stw	r4,16(r20)
   8138c:	003fb606 	br	81268 <_fpadd_parts+0x1a8>
   81390:	001f883a 	mov	r15,zero
   81394:	0021883a 	mov	r16,zero
   81398:	003f8306 	br	811a8 <_fpadd_parts+0xe8>
   8139c:	018dc83a 	sub	r6,zero,r6
   813a0:	003f6706 	br	81140 <_fpadd_parts+0x80>
   813a4:	00bfff84 	movi	r2,-2
   813a8:	117faf36 	bltu	r2,r5,81268 <_fpadd_parts+0x1a8>
   813ac:	003f9806 	br	81210 <_fpadd_parts+0x150>
   813b0:	0005883a 	mov	r2,zero
   813b4:	1189c83a 	sub	r4,r2,r6
   813b8:	1105803a 	cmpltu	r2,r2,r4
   813bc:	01cbc83a 	sub	r5,zero,r7
   813c0:	2885c83a 	sub	r2,r5,r2
   813c4:	01800044 	movi	r6,1
   813c8:	a1800115 	stw	r6,4(r20)
   813cc:	a5c00215 	stw	r23,8(r20)
   813d0:	a1000315 	stw	r4,12(r20)
   813d4:	a0800415 	stw	r2,16(r20)
   813d8:	003f8206 	br	811e4 <_fpadd_parts+0x124>
   813dc:	203f7226 	beq	r4,zero,811a8 <_fpadd_parts+0xe8>
   813e0:	35bff804 	addi	r22,r6,-32
   813e4:	b9af883a 	add	r23,r23,r6
   813e8:	b0003116 	blt	r22,zero,814b0 <_fpadd_parts+0x3f0>
   813ec:	959ad83a 	srl	r13,r18,r22
   813f0:	001d883a 	mov	r14,zero
   813f4:	000f883a 	mov	r7,zero
   813f8:	01000044 	movi	r4,1
   813fc:	0011883a 	mov	r8,zero
   81400:	b0002516 	blt	r22,zero,81498 <_fpadd_parts+0x3d8>
   81404:	2594983a 	sll	r10,r4,r22
   81408:	0013883a 	mov	r9,zero
   8140c:	00bfffc4 	movi	r2,-1
   81410:	4889883a 	add	r4,r9,r2
   81414:	508b883a 	add	r5,r10,r2
   81418:	224d803a 	cmpltu	r6,r4,r9
   8141c:	314b883a 	add	r5,r6,r5
   81420:	8904703a 	and	r2,r17,r4
   81424:	9146703a 	and	r3,r18,r5
   81428:	10c4b03a 	or	r2,r2,r3
   8142c:	10000226 	beq	r2,zero,81438 <_fpadd_parts+0x378>
   81430:	01c00044 	movi	r7,1
   81434:	0011883a 	mov	r8,zero
   81438:	69e2b03a 	or	r17,r13,r7
   8143c:	7224b03a 	or	r18,r14,r8
   81440:	003f5906 	br	811a8 <_fpadd_parts+0xe8>
   81444:	8407883a 	add	r3,r16,r16
   81448:	008007c4 	movi	r2,31
   8144c:	1185c83a 	sub	r2,r2,r6
   81450:	1886983a 	sll	r3,r3,r2
   81454:	7996d83a 	srl	r11,r15,r6
   81458:	8198d83a 	srl	r12,r16,r6
   8145c:	1ad6b03a 	or	r11,r3,r11
   81460:	003f3e06 	br	8115c <_fpadd_parts+0x9c>
   81464:	2006d07a 	srli	r3,r4,1
   81468:	008007c4 	movi	r2,31
   8146c:	1185c83a 	sub	r2,r2,r6
   81470:	1890d83a 	srl	r8,r3,r2
   81474:	218e983a 	sll	r7,r4,r6
   81478:	003f3e06 	br	81174 <_fpadd_parts+0xb4>
   8147c:	113f821e 	bne	r2,r4,81288 <_fpadd_parts+0x1c8>
   81480:	28c00117 	ldw	r3,4(r5)
   81484:	98800117 	ldw	r2,4(r19)
   81488:	10ff7f26 	beq	r2,r3,81288 <_fpadd_parts+0x1c8>
   8148c:	04c00274 	movhi	r19,9
   81490:	9cf8fa04 	addi	r19,r19,-7192
   81494:	003f7c06 	br	81288 <_fpadd_parts+0x1c8>
   81498:	2006d07a 	srli	r3,r4,1
   8149c:	008007c4 	movi	r2,31
   814a0:	1185c83a 	sub	r2,r2,r6
   814a4:	1894d83a 	srl	r10,r3,r2
   814a8:	2192983a 	sll	r9,r4,r6
   814ac:	003fd706 	br	8140c <_fpadd_parts+0x34c>
   814b0:	9487883a 	add	r3,r18,r18
   814b4:	008007c4 	movi	r2,31
   814b8:	1185c83a 	sub	r2,r2,r6
   814bc:	1886983a 	sll	r3,r3,r2
   814c0:	899ad83a 	srl	r13,r17,r6
   814c4:	919cd83a 	srl	r14,r18,r6
   814c8:	1b5ab03a 	or	r13,r3,r13
   814cc:	003fc906 	br	813f4 <_fpadd_parts+0x334>

000814d0 <__subdf3>:
   814d0:	deffea04 	addi	sp,sp,-88
   814d4:	dcc01415 	stw	r19,80(sp)
   814d8:	dcc00404 	addi	r19,sp,16
   814dc:	2011883a 	mov	r8,r4
   814e0:	2813883a 	mov	r9,r5
   814e4:	dc401315 	stw	r17,76(sp)
   814e8:	d809883a 	mov	r4,sp
   814ec:	980b883a 	mov	r5,r19
   814f0:	dc400904 	addi	r17,sp,36
   814f4:	dfc01515 	stw	ra,84(sp)
   814f8:	da400115 	stw	r9,4(sp)
   814fc:	d9c00315 	stw	r7,12(sp)
   81500:	da000015 	stw	r8,0(sp)
   81504:	d9800215 	stw	r6,8(sp)
   81508:	00823780 	call	82378 <__unpack_d>
   8150c:	d9000204 	addi	r4,sp,8
   81510:	880b883a 	mov	r5,r17
   81514:	00823780 	call	82378 <__unpack_d>
   81518:	d8800a17 	ldw	r2,40(sp)
   8151c:	880b883a 	mov	r5,r17
   81520:	9809883a 	mov	r4,r19
   81524:	d9800e04 	addi	r6,sp,56
   81528:	1080005c 	xori	r2,r2,1
   8152c:	d8800a15 	stw	r2,40(sp)
   81530:	00810c00 	call	810c0 <_fpadd_parts>
   81534:	1009883a 	mov	r4,r2
   81538:	00820640 	call	82064 <__pack_d>
   8153c:	dfc01517 	ldw	ra,84(sp)
   81540:	dcc01417 	ldw	r19,80(sp)
   81544:	dc401317 	ldw	r17,76(sp)
   81548:	dec01604 	addi	sp,sp,88
   8154c:	f800283a 	ret

00081550 <__adddf3>:
   81550:	deffea04 	addi	sp,sp,-88
   81554:	dcc01415 	stw	r19,80(sp)
   81558:	dcc00404 	addi	r19,sp,16
   8155c:	2011883a 	mov	r8,r4
   81560:	2813883a 	mov	r9,r5
   81564:	dc401315 	stw	r17,76(sp)
   81568:	d809883a 	mov	r4,sp
   8156c:	980b883a 	mov	r5,r19
   81570:	dc400904 	addi	r17,sp,36
   81574:	dfc01515 	stw	ra,84(sp)
   81578:	da400115 	stw	r9,4(sp)
   8157c:	d9c00315 	stw	r7,12(sp)
   81580:	da000015 	stw	r8,0(sp)
   81584:	d9800215 	stw	r6,8(sp)
   81588:	00823780 	call	82378 <__unpack_d>
   8158c:	d9000204 	addi	r4,sp,8
   81590:	880b883a 	mov	r5,r17
   81594:	00823780 	call	82378 <__unpack_d>
   81598:	d9800e04 	addi	r6,sp,56
   8159c:	9809883a 	mov	r4,r19
   815a0:	880b883a 	mov	r5,r17
   815a4:	00810c00 	call	810c0 <_fpadd_parts>
   815a8:	1009883a 	mov	r4,r2
   815ac:	00820640 	call	82064 <__pack_d>
   815b0:	dfc01517 	ldw	ra,84(sp)
   815b4:	dcc01417 	ldw	r19,80(sp)
   815b8:	dc401317 	ldw	r17,76(sp)
   815bc:	dec01604 	addi	sp,sp,88
   815c0:	f800283a 	ret

000815c4 <__muldf3>:
   815c4:	deffe004 	addi	sp,sp,-128
   815c8:	dc401815 	stw	r17,96(sp)
   815cc:	dc400404 	addi	r17,sp,16
   815d0:	2011883a 	mov	r8,r4
   815d4:	2813883a 	mov	r9,r5
   815d8:	dc001715 	stw	r16,92(sp)
   815dc:	d809883a 	mov	r4,sp
   815e0:	880b883a 	mov	r5,r17
   815e4:	dc000904 	addi	r16,sp,36
   815e8:	dfc01f15 	stw	ra,124(sp)
   815ec:	da400115 	stw	r9,4(sp)
   815f0:	d9c00315 	stw	r7,12(sp)
   815f4:	da000015 	stw	r8,0(sp)
   815f8:	d9800215 	stw	r6,8(sp)
   815fc:	ddc01e15 	stw	r23,120(sp)
   81600:	dd801d15 	stw	r22,116(sp)
   81604:	dd401c15 	stw	r21,112(sp)
   81608:	dd001b15 	stw	r20,108(sp)
   8160c:	dcc01a15 	stw	r19,104(sp)
   81610:	dc801915 	stw	r18,100(sp)
   81614:	00823780 	call	82378 <__unpack_d>
   81618:	d9000204 	addi	r4,sp,8
   8161c:	800b883a 	mov	r5,r16
   81620:	00823780 	call	82378 <__unpack_d>
   81624:	d9000417 	ldw	r4,16(sp)
   81628:	00800044 	movi	r2,1
   8162c:	1100102e 	bgeu	r2,r4,81670 <__muldf3+0xac>
   81630:	d8c00917 	ldw	r3,36(sp)
   81634:	10c0062e 	bgeu	r2,r3,81650 <__muldf3+0x8c>
   81638:	00800104 	movi	r2,4
   8163c:	20800a26 	beq	r4,r2,81668 <__muldf3+0xa4>
   81640:	1880cc26 	beq	r3,r2,81974 <__muldf3+0x3b0>
   81644:	00800084 	movi	r2,2
   81648:	20800926 	beq	r4,r2,81670 <__muldf3+0xac>
   8164c:	1880191e 	bne	r3,r2,816b4 <__muldf3+0xf0>
   81650:	d8c00a17 	ldw	r3,40(sp)
   81654:	d8800517 	ldw	r2,20(sp)
   81658:	8009883a 	mov	r4,r16
   8165c:	10c4c03a 	cmpne	r2,r2,r3
   81660:	d8800a15 	stw	r2,40(sp)
   81664:	00000706 	br	81684 <__muldf3+0xc0>
   81668:	00800084 	movi	r2,2
   8166c:	1880c326 	beq	r3,r2,8197c <__muldf3+0x3b8>
   81670:	d8800517 	ldw	r2,20(sp)
   81674:	d8c00a17 	ldw	r3,40(sp)
   81678:	8809883a 	mov	r4,r17
   8167c:	10c4c03a 	cmpne	r2,r2,r3
   81680:	d8800515 	stw	r2,20(sp)
   81684:	00820640 	call	82064 <__pack_d>
   81688:	dfc01f17 	ldw	ra,124(sp)
   8168c:	ddc01e17 	ldw	r23,120(sp)
   81690:	dd801d17 	ldw	r22,116(sp)
   81694:	dd401c17 	ldw	r21,112(sp)
   81698:	dd001b17 	ldw	r20,108(sp)
   8169c:	dcc01a17 	ldw	r19,104(sp)
   816a0:	dc801917 	ldw	r18,100(sp)
   816a4:	dc401817 	ldw	r17,96(sp)
   816a8:	dc001717 	ldw	r16,92(sp)
   816ac:	dec02004 	addi	sp,sp,128
   816b0:	f800283a 	ret
   816b4:	dd800717 	ldw	r22,28(sp)
   816b8:	dc800c17 	ldw	r18,48(sp)
   816bc:	002b883a 	mov	r21,zero
   816c0:	0023883a 	mov	r17,zero
   816c4:	a80b883a 	mov	r5,r21
   816c8:	b00d883a 	mov	r6,r22
   816cc:	880f883a 	mov	r7,r17
   816d0:	ddc00817 	ldw	r23,32(sp)
   816d4:	dcc00d17 	ldw	r19,52(sp)
   816d8:	9009883a 	mov	r4,r18
   816dc:	0081ec00 	call	81ec0 <__muldi3>
   816e0:	001b883a 	mov	r13,zero
   816e4:	680f883a 	mov	r7,r13
   816e8:	b009883a 	mov	r4,r22
   816ec:	000b883a 	mov	r5,zero
   816f0:	980d883a 	mov	r6,r19
   816f4:	b82d883a 	mov	r22,r23
   816f8:	002f883a 	mov	r23,zero
   816fc:	db401615 	stw	r13,88(sp)
   81700:	d8801315 	stw	r2,76(sp)
   81704:	d8c01415 	stw	r3,80(sp)
   81708:	dcc01515 	stw	r19,84(sp)
   8170c:	0081ec00 	call	81ec0 <__muldi3>
   81710:	b00d883a 	mov	r6,r22
   81714:	000b883a 	mov	r5,zero
   81718:	9009883a 	mov	r4,r18
   8171c:	b80f883a 	mov	r7,r23
   81720:	1021883a 	mov	r16,r2
   81724:	1823883a 	mov	r17,r3
   81728:	0081ec00 	call	81ec0 <__muldi3>
   8172c:	8085883a 	add	r2,r16,r2
   81730:	140d803a 	cmpltu	r6,r2,r16
   81734:	88c7883a 	add	r3,r17,r3
   81738:	30cd883a 	add	r6,r6,r3
   8173c:	1029883a 	mov	r20,r2
   81740:	302b883a 	mov	r21,r6
   81744:	da801317 	ldw	r10,76(sp)
   81748:	dac01417 	ldw	r11,80(sp)
   8174c:	db001517 	ldw	r12,84(sp)
   81750:	db401617 	ldw	r13,88(sp)
   81754:	3440612e 	bgeu	r6,r17,818dc <__muldf3+0x318>
   81758:	0009883a 	mov	r4,zero
   8175c:	5105883a 	add	r2,r10,r4
   81760:	128d803a 	cmpltu	r6,r2,r10
   81764:	5d07883a 	add	r3,r11,r20
   81768:	30cd883a 	add	r6,r6,r3
   8176c:	0021883a 	mov	r16,zero
   81770:	04400044 	movi	r17,1
   81774:	1025883a 	mov	r18,r2
   81778:	3027883a 	mov	r19,r6
   8177c:	32c06236 	bltu	r6,r11,81908 <__muldf3+0x344>
   81780:	59807a26 	beq	r11,r6,8196c <__muldf3+0x3a8>
   81784:	680b883a 	mov	r5,r13
   81788:	b80f883a 	mov	r7,r23
   8178c:	6009883a 	mov	r4,r12
   81790:	b00d883a 	mov	r6,r22
   81794:	0081ec00 	call	81ec0 <__muldi3>
   81798:	1009883a 	mov	r4,r2
   8179c:	000f883a 	mov	r7,zero
   817a0:	1545883a 	add	r2,r2,r21
   817a4:	1111803a 	cmpltu	r8,r2,r4
   817a8:	19c7883a 	add	r3,r3,r7
   817ac:	40c7883a 	add	r3,r8,r3
   817b0:	88cb883a 	add	r5,r17,r3
   817b4:	d8c00617 	ldw	r3,24(sp)
   817b8:	8089883a 	add	r4,r16,r2
   817bc:	d8800b17 	ldw	r2,44(sp)
   817c0:	18c00104 	addi	r3,r3,4
   817c4:	240d803a 	cmpltu	r6,r4,r16
   817c8:	10c7883a 	add	r3,r2,r3
   817cc:	2013883a 	mov	r9,r4
   817d0:	d8800a17 	ldw	r2,40(sp)
   817d4:	d9000517 	ldw	r4,20(sp)
   817d8:	314d883a 	add	r6,r6,r5
   817dc:	3015883a 	mov	r10,r6
   817e0:	2088c03a 	cmpne	r4,r4,r2
   817e4:	00880034 	movhi	r2,8192
   817e8:	10bfffc4 	addi	r2,r2,-1
   817ec:	d9000f15 	stw	r4,60(sp)
   817f0:	d8c01015 	stw	r3,64(sp)
   817f4:	1180162e 	bgeu	r2,r6,81850 <__muldf3+0x28c>
   817f8:	1811883a 	mov	r8,r3
   817fc:	101f883a 	mov	r15,r2
   81800:	980497fa 	slli	r2,r19,31
   81804:	9016d07a 	srli	r11,r18,1
   81808:	500697fa 	slli	r3,r10,31
   8180c:	480cd07a 	srli	r6,r9,1
   81810:	500ed07a 	srli	r7,r10,1
   81814:	12d6b03a 	or	r11,r2,r11
   81818:	00800044 	movi	r2,1
   8181c:	198cb03a 	or	r6,r3,r6
   81820:	4888703a 	and	r4,r9,r2
   81824:	9818d07a 	srli	r12,r19,1
   81828:	001b883a 	mov	r13,zero
   8182c:	03a00034 	movhi	r14,32768
   81830:	3013883a 	mov	r9,r6
   81834:	3815883a 	mov	r10,r7
   81838:	4091883a 	add	r8,r8,r2
   8183c:	20000226 	beq	r4,zero,81848 <__muldf3+0x284>
   81840:	5b64b03a 	or	r18,r11,r13
   81844:	63a6b03a 	or	r19,r12,r14
   81848:	7abfed36 	bltu	r15,r10,81800 <__muldf3+0x23c>
   8184c:	da001015 	stw	r8,64(sp)
   81850:	00840034 	movhi	r2,4096
   81854:	10bfffc4 	addi	r2,r2,-1
   81858:	12801436 	bltu	r2,r10,818ac <__muldf3+0x2e8>
   8185c:	da001017 	ldw	r8,64(sp)
   81860:	101f883a 	mov	r15,r2
   81864:	4a45883a 	add	r2,r9,r9
   81868:	124d803a 	cmpltu	r6,r2,r9
   8186c:	5287883a 	add	r3,r10,r10
   81870:	9497883a 	add	r11,r18,r18
   81874:	5c8f803a 	cmpltu	r7,r11,r18
   81878:	9cd9883a 	add	r12,r19,r19
   8187c:	01000044 	movi	r4,1
   81880:	30cd883a 	add	r6,r6,r3
   81884:	3b0f883a 	add	r7,r7,r12
   81888:	423fffc4 	addi	r8,r8,-1
   8188c:	1013883a 	mov	r9,r2
   81890:	3015883a 	mov	r10,r6
   81894:	111ab03a 	or	r13,r2,r4
   81898:	98003016 	blt	r19,zero,8195c <__muldf3+0x398>
   8189c:	5825883a 	mov	r18,r11
   818a0:	3827883a 	mov	r19,r7
   818a4:	7abfef2e 	bgeu	r15,r10,81864 <__muldf3+0x2a0>
   818a8:	da001015 	stw	r8,64(sp)
   818ac:	00803fc4 	movi	r2,255
   818b0:	488e703a 	and	r7,r9,r2
   818b4:	00802004 	movi	r2,128
   818b8:	0007883a 	mov	r3,zero
   818bc:	0011883a 	mov	r8,zero
   818c0:	38801826 	beq	r7,r2,81924 <__muldf3+0x360>
   818c4:	008000c4 	movi	r2,3
   818c8:	d9000e04 	addi	r4,sp,56
   818cc:	da801215 	stw	r10,72(sp)
   818d0:	d8800e15 	stw	r2,56(sp)
   818d4:	da401115 	stw	r9,68(sp)
   818d8:	003f6a06 	br	81684 <__muldf3+0xc0>
   818dc:	89802126 	beq	r17,r6,81964 <__muldf3+0x3a0>
   818e0:	0009883a 	mov	r4,zero
   818e4:	5105883a 	add	r2,r10,r4
   818e8:	128d803a 	cmpltu	r6,r2,r10
   818ec:	5d07883a 	add	r3,r11,r20
   818f0:	30cd883a 	add	r6,r6,r3
   818f4:	0021883a 	mov	r16,zero
   818f8:	0023883a 	mov	r17,zero
   818fc:	1025883a 	mov	r18,r2
   81900:	3027883a 	mov	r19,r6
   81904:	32ff9e2e 	bgeu	r6,r11,81780 <__muldf3+0x1bc>
   81908:	00800044 	movi	r2,1
   8190c:	8089883a 	add	r4,r16,r2
   81910:	240d803a 	cmpltu	r6,r4,r16
   81914:	344d883a 	add	r6,r6,r17
   81918:	2021883a 	mov	r16,r4
   8191c:	3023883a 	mov	r17,r6
   81920:	003f9806 	br	81784 <__muldf3+0x1c0>
   81924:	403fe71e 	bne	r8,zero,818c4 <__muldf3+0x300>
   81928:	01004004 	movi	r4,256
   8192c:	4904703a 	and	r2,r9,r4
   81930:	10c4b03a 	or	r2,r2,r3
   81934:	103fe31e 	bne	r2,zero,818c4 <__muldf3+0x300>
   81938:	94c4b03a 	or	r2,r18,r19
   8193c:	103fe126 	beq	r2,zero,818c4 <__muldf3+0x300>
   81940:	49c5883a 	add	r2,r9,r7
   81944:	1251803a 	cmpltu	r8,r2,r9
   81948:	4291883a 	add	r8,r8,r10
   8194c:	013fc004 	movi	r4,-256
   81950:	1112703a 	and	r9,r2,r4
   81954:	4015883a 	mov	r10,r8
   81958:	003fda06 	br	818c4 <__muldf3+0x300>
   8195c:	6813883a 	mov	r9,r13
   81960:	003fce06 	br	8189c <__muldf3+0x2d8>
   81964:	143f7c36 	bltu	r2,r16,81758 <__muldf3+0x194>
   81968:	003fdd06 	br	818e0 <__muldf3+0x31c>
   8196c:	12bf852e 	bgeu	r2,r10,81784 <__muldf3+0x1c0>
   81970:	003fe506 	br	81908 <__muldf3+0x344>
   81974:	00800084 	movi	r2,2
   81978:	20bf351e 	bne	r4,r2,81650 <__muldf3+0x8c>
   8197c:	01000274 	movhi	r4,9
   81980:	2138fa04 	addi	r4,r4,-7192
   81984:	003f3f06 	br	81684 <__muldf3+0xc0>

00081988 <__divdf3>:
   81988:	deffed04 	addi	sp,sp,-76
   8198c:	dcc01115 	stw	r19,68(sp)
   81990:	dcc00404 	addi	r19,sp,16
   81994:	2011883a 	mov	r8,r4
   81998:	2813883a 	mov	r9,r5
   8199c:	dc000e15 	stw	r16,56(sp)
   819a0:	d809883a 	mov	r4,sp
   819a4:	980b883a 	mov	r5,r19
   819a8:	dc000904 	addi	r16,sp,36
   819ac:	dfc01215 	stw	ra,72(sp)
   819b0:	da400115 	stw	r9,4(sp)
   819b4:	d9c00315 	stw	r7,12(sp)
   819b8:	da000015 	stw	r8,0(sp)
   819bc:	d9800215 	stw	r6,8(sp)
   819c0:	dc801015 	stw	r18,64(sp)
   819c4:	dc400f15 	stw	r17,60(sp)
   819c8:	00823780 	call	82378 <__unpack_d>
   819cc:	d9000204 	addi	r4,sp,8
   819d0:	800b883a 	mov	r5,r16
   819d4:	00823780 	call	82378 <__unpack_d>
   819d8:	d9000417 	ldw	r4,16(sp)
   819dc:	00800044 	movi	r2,1
   819e0:	11000b2e 	bgeu	r2,r4,81a10 <__divdf3+0x88>
   819e4:	d9400917 	ldw	r5,36(sp)
   819e8:	1140762e 	bgeu	r2,r5,81bc4 <__divdf3+0x23c>
   819ec:	d8800517 	ldw	r2,20(sp)
   819f0:	d8c00a17 	ldw	r3,40(sp)
   819f4:	01800104 	movi	r6,4
   819f8:	10c4f03a 	xor	r2,r2,r3
   819fc:	d8800515 	stw	r2,20(sp)
   81a00:	21800226 	beq	r4,r6,81a0c <__divdf3+0x84>
   81a04:	00800084 	movi	r2,2
   81a08:	2080141e 	bne	r4,r2,81a5c <__divdf3+0xd4>
   81a0c:	29000926 	beq	r5,r4,81a34 <__divdf3+0xac>
   81a10:	9809883a 	mov	r4,r19
   81a14:	00820640 	call	82064 <__pack_d>
   81a18:	dfc01217 	ldw	ra,72(sp)
   81a1c:	dcc01117 	ldw	r19,68(sp)
   81a20:	dc801017 	ldw	r18,64(sp)
   81a24:	dc400f17 	ldw	r17,60(sp)
   81a28:	dc000e17 	ldw	r16,56(sp)
   81a2c:	dec01304 	addi	sp,sp,76
   81a30:	f800283a 	ret
   81a34:	01000274 	movhi	r4,9
   81a38:	2138fa04 	addi	r4,r4,-7192
   81a3c:	00820640 	call	82064 <__pack_d>
   81a40:	dfc01217 	ldw	ra,72(sp)
   81a44:	dcc01117 	ldw	r19,68(sp)
   81a48:	dc801017 	ldw	r18,64(sp)
   81a4c:	dc400f17 	ldw	r17,60(sp)
   81a50:	dc000e17 	ldw	r16,56(sp)
   81a54:	dec01304 	addi	sp,sp,76
   81a58:	f800283a 	ret
   81a5c:	29805b26 	beq	r5,r6,81bcc <__divdf3+0x244>
   81a60:	28802d26 	beq	r5,r2,81b18 <__divdf3+0x190>
   81a64:	d8c00617 	ldw	r3,24(sp)
   81a68:	d8800b17 	ldw	r2,44(sp)
   81a6c:	d9c00817 	ldw	r7,32(sp)
   81a70:	dc400d17 	ldw	r17,52(sp)
   81a74:	188bc83a 	sub	r5,r3,r2
   81a78:	d9800717 	ldw	r6,28(sp)
   81a7c:	dc000c17 	ldw	r16,48(sp)
   81a80:	d9400615 	stw	r5,24(sp)
   81a84:	3c403836 	bltu	r7,r17,81b68 <__divdf3+0x1e0>
   81a88:	89c03626 	beq	r17,r7,81b64 <__divdf3+0x1dc>
   81a8c:	0015883a 	mov	r10,zero
   81a90:	001d883a 	mov	r14,zero
   81a94:	02c40034 	movhi	r11,4096
   81a98:	001f883a 	mov	r15,zero
   81a9c:	003f883a 	mov	ra,zero
   81aa0:	04800f44 	movi	r18,61
   81aa4:	00000f06 	br	81ae4 <__divdf3+0x15c>
   81aa8:	601d883a 	mov	r14,r12
   81aac:	681f883a 	mov	r15,r13
   81ab0:	400d883a 	mov	r6,r8
   81ab4:	100f883a 	mov	r7,r2
   81ab8:	3191883a 	add	r8,r6,r6
   81abc:	5808d07a 	srli	r4,r11,1
   81ac0:	4185803a 	cmpltu	r2,r8,r6
   81ac4:	39d3883a 	add	r9,r7,r7
   81ac8:	28c6b03a 	or	r3,r5,r3
   81acc:	1245883a 	add	r2,r2,r9
   81ad0:	1815883a 	mov	r10,r3
   81ad4:	2017883a 	mov	r11,r4
   81ad8:	400d883a 	mov	r6,r8
   81adc:	100f883a 	mov	r7,r2
   81ae0:	fc801726 	beq	ra,r18,81b40 <__divdf3+0x1b8>
   81ae4:	580a97fa 	slli	r5,r11,31
   81ae8:	5006d07a 	srli	r3,r10,1
   81aec:	ffc00044 	addi	ra,ra,1
   81af0:	3c7ff136 	bltu	r7,r17,81ab8 <__divdf3+0x130>
   81af4:	3411c83a 	sub	r8,r6,r16
   81af8:	3205803a 	cmpltu	r2,r6,r8
   81afc:	3c53c83a 	sub	r9,r7,r17
   81b00:	7298b03a 	or	r12,r14,r10
   81b04:	7adab03a 	or	r13,r15,r11
   81b08:	4885c83a 	sub	r2,r9,r2
   81b0c:	89ffe61e 	bne	r17,r7,81aa8 <__divdf3+0x120>
   81b10:	343fe936 	bltu	r6,r16,81ab8 <__divdf3+0x130>
   81b14:	003fe406 	br	81aa8 <__divdf3+0x120>
   81b18:	9809883a 	mov	r4,r19
   81b1c:	d9800415 	stw	r6,16(sp)
   81b20:	00820640 	call	82064 <__pack_d>
   81b24:	dfc01217 	ldw	ra,72(sp)
   81b28:	dcc01117 	ldw	r19,68(sp)
   81b2c:	dc801017 	ldw	r18,64(sp)
   81b30:	dc400f17 	ldw	r17,60(sp)
   81b34:	dc000e17 	ldw	r16,56(sp)
   81b38:	dec01304 	addi	sp,sp,76
   81b3c:	f800283a 	ret
   81b40:	00803fc4 	movi	r2,255
   81b44:	7090703a 	and	r8,r14,r2
   81b48:	00802004 	movi	r2,128
   81b4c:	0007883a 	mov	r3,zero
   81b50:	0013883a 	mov	r9,zero
   81b54:	40800d26 	beq	r8,r2,81b8c <__divdf3+0x204>
   81b58:	dbc00815 	stw	r15,32(sp)
   81b5c:	db800715 	stw	r14,28(sp)
   81b60:	003fab06 	br	81a10 <__divdf3+0x88>
   81b64:	343fc92e 	bgeu	r6,r16,81a8c <__divdf3+0x104>
   81b68:	3185883a 	add	r2,r6,r6
   81b6c:	1189803a 	cmpltu	r4,r2,r6
   81b70:	39c7883a 	add	r3,r7,r7
   81b74:	20c9883a 	add	r4,r4,r3
   81b78:	297fffc4 	addi	r5,r5,-1
   81b7c:	100d883a 	mov	r6,r2
   81b80:	200f883a 	mov	r7,r4
   81b84:	d9400615 	stw	r5,24(sp)
   81b88:	003fc006 	br	81a8c <__divdf3+0x104>
   81b8c:	483ff21e 	bne	r9,zero,81b58 <__divdf3+0x1d0>
   81b90:	01004004 	movi	r4,256
   81b94:	7104703a 	and	r2,r14,r4
   81b98:	10c4b03a 	or	r2,r2,r3
   81b9c:	103fee1e 	bne	r2,zero,81b58 <__divdf3+0x1d0>
   81ba0:	31c4b03a 	or	r2,r6,r7
   81ba4:	103fec26 	beq	r2,zero,81b58 <__divdf3+0x1d0>
   81ba8:	7205883a 	add	r2,r14,r8
   81bac:	1391803a 	cmpltu	r8,r2,r14
   81bb0:	43d1883a 	add	r8,r8,r15
   81bb4:	013fc004 	movi	r4,-256
   81bb8:	111c703a 	and	r14,r2,r4
   81bbc:	401f883a 	mov	r15,r8
   81bc0:	003fe506 	br	81b58 <__divdf3+0x1d0>
   81bc4:	8009883a 	mov	r4,r16
   81bc8:	003f9206 	br	81a14 <__divdf3+0x8c>
   81bcc:	9809883a 	mov	r4,r19
   81bd0:	d8000715 	stw	zero,28(sp)
   81bd4:	d8000815 	stw	zero,32(sp)
   81bd8:	d8000615 	stw	zero,24(sp)
   81bdc:	003f8d06 	br	81a14 <__divdf3+0x8c>

00081be0 <__floatunsidf>:
   81be0:	defff204 	addi	sp,sp,-56
   81be4:	dfc00d15 	stw	ra,52(sp)
   81be8:	ddc00c15 	stw	r23,48(sp)
   81bec:	dd800b15 	stw	r22,44(sp)
   81bf0:	dd400a15 	stw	r21,40(sp)
   81bf4:	dd000915 	stw	r20,36(sp)
   81bf8:	dcc00815 	stw	r19,32(sp)
   81bfc:	dc800715 	stw	r18,28(sp)
   81c00:	dc400615 	stw	r17,24(sp)
   81c04:	dc000515 	stw	r16,20(sp)
   81c08:	d8000115 	stw	zero,4(sp)
   81c0c:	20000f1e 	bne	r4,zero,81c4c <__floatunsidf+0x6c>
   81c10:	00800084 	movi	r2,2
   81c14:	d8800015 	stw	r2,0(sp)
   81c18:	d809883a 	mov	r4,sp
   81c1c:	00820640 	call	82064 <__pack_d>
   81c20:	dfc00d17 	ldw	ra,52(sp)
   81c24:	ddc00c17 	ldw	r23,48(sp)
   81c28:	dd800b17 	ldw	r22,44(sp)
   81c2c:	dd400a17 	ldw	r21,40(sp)
   81c30:	dd000917 	ldw	r20,36(sp)
   81c34:	dcc00817 	ldw	r19,32(sp)
   81c38:	dc800717 	ldw	r18,28(sp)
   81c3c:	dc400617 	ldw	r17,24(sp)
   81c40:	dc000517 	ldw	r16,20(sp)
   81c44:	dec00e04 	addi	sp,sp,56
   81c48:	f800283a 	ret
   81c4c:	008000c4 	movi	r2,3
   81c50:	00c00f04 	movi	r3,60
   81c54:	002f883a 	mov	r23,zero
   81c58:	202d883a 	mov	r22,r4
   81c5c:	d8800015 	stw	r2,0(sp)
   81c60:	d8c00215 	stw	r3,8(sp)
   81c64:	d9000315 	stw	r4,12(sp)
   81c68:	ddc00415 	stw	r23,16(sp)
   81c6c:	0081fe40 	call	81fe4 <__clzsi2>
   81c70:	12400744 	addi	r9,r2,29
   81c74:	48000b16 	blt	r9,zero,81ca4 <__floatunsidf+0xc4>
   81c78:	483fe726 	beq	r9,zero,81c18 <__floatunsidf+0x38>
   81c7c:	10bfff44 	addi	r2,r2,-3
   81c80:	10002e16 	blt	r2,zero,81d3c <__floatunsidf+0x15c>
   81c84:	b0a2983a 	sll	r17,r22,r2
   81c88:	0021883a 	mov	r16,zero
   81c8c:	d8800217 	ldw	r2,8(sp)
   81c90:	dc400415 	stw	r17,16(sp)
   81c94:	dc000315 	stw	r16,12(sp)
   81c98:	1245c83a 	sub	r2,r2,r9
   81c9c:	d8800215 	stw	r2,8(sp)
   81ca0:	003fdd06 	br	81c18 <__floatunsidf+0x38>
   81ca4:	0255c83a 	sub	r10,zero,r9
   81ca8:	51bff804 	addi	r6,r10,-32
   81cac:	30001b16 	blt	r6,zero,81d1c <__floatunsidf+0x13c>
   81cb0:	b9a8d83a 	srl	r20,r23,r6
   81cb4:	002b883a 	mov	r21,zero
   81cb8:	000f883a 	mov	r7,zero
   81cbc:	01000044 	movi	r4,1
   81cc0:	0011883a 	mov	r8,zero
   81cc4:	30002516 	blt	r6,zero,81d5c <__floatunsidf+0x17c>
   81cc8:	21a6983a 	sll	r19,r4,r6
   81ccc:	0025883a 	mov	r18,zero
   81cd0:	00bfffc4 	movi	r2,-1
   81cd4:	9089883a 	add	r4,r18,r2
   81cd8:	988b883a 	add	r5,r19,r2
   81cdc:	248d803a 	cmpltu	r6,r4,r18
   81ce0:	314b883a 	add	r5,r6,r5
   81ce4:	b104703a 	and	r2,r22,r4
   81ce8:	b946703a 	and	r3,r23,r5
   81cec:	10c4b03a 	or	r2,r2,r3
   81cf0:	10000226 	beq	r2,zero,81cfc <__floatunsidf+0x11c>
   81cf4:	01c00044 	movi	r7,1
   81cf8:	0011883a 	mov	r8,zero
   81cfc:	d9000217 	ldw	r4,8(sp)
   81d00:	a1c4b03a 	or	r2,r20,r7
   81d04:	aa06b03a 	or	r3,r21,r8
   81d08:	2249c83a 	sub	r4,r4,r9
   81d0c:	d8c00415 	stw	r3,16(sp)
   81d10:	d9000215 	stw	r4,8(sp)
   81d14:	d8800315 	stw	r2,12(sp)
   81d18:	003fbf06 	br	81c18 <__floatunsidf+0x38>
   81d1c:	bdc7883a 	add	r3,r23,r23
   81d20:	008007c4 	movi	r2,31
   81d24:	1285c83a 	sub	r2,r2,r10
   81d28:	1886983a 	sll	r3,r3,r2
   81d2c:	b2a8d83a 	srl	r20,r22,r10
   81d30:	baaad83a 	srl	r21,r23,r10
   81d34:	1d28b03a 	or	r20,r3,r20
   81d38:	003fdf06 	br	81cb8 <__floatunsidf+0xd8>
   81d3c:	b006d07a 	srli	r3,r22,1
   81d40:	008007c4 	movi	r2,31
   81d44:	1245c83a 	sub	r2,r2,r9
   81d48:	1886d83a 	srl	r3,r3,r2
   81d4c:	ba62983a 	sll	r17,r23,r9
   81d50:	b260983a 	sll	r16,r22,r9
   81d54:	1c62b03a 	or	r17,r3,r17
   81d58:	003fcc06 	br	81c8c <__floatunsidf+0xac>
   81d5c:	2006d07a 	srli	r3,r4,1
   81d60:	008007c4 	movi	r2,31
   81d64:	1285c83a 	sub	r2,r2,r10
   81d68:	18a6d83a 	srl	r19,r3,r2
   81d6c:	22a4983a 	sll	r18,r4,r10
   81d70:	003fd706 	br	81cd0 <__floatunsidf+0xf0>

00081d74 <udivmodsi4>:
   81d74:	29001b2e 	bgeu	r5,r4,81de4 <udivmodsi4+0x70>
   81d78:	28001a16 	blt	r5,zero,81de4 <udivmodsi4+0x70>
   81d7c:	00800044 	movi	r2,1
   81d80:	0007883a 	mov	r3,zero
   81d84:	01c007c4 	movi	r7,31
   81d88:	00000306 	br	81d98 <udivmodsi4+0x24>
   81d8c:	19c01326 	beq	r3,r7,81ddc <udivmodsi4+0x68>
   81d90:	18c00044 	addi	r3,r3,1
   81d94:	28000416 	blt	r5,zero,81da8 <udivmodsi4+0x34>
   81d98:	294b883a 	add	r5,r5,r5
   81d9c:	1085883a 	add	r2,r2,r2
   81da0:	293ffa36 	bltu	r5,r4,81d8c <udivmodsi4+0x18>
   81da4:	10000d26 	beq	r2,zero,81ddc <udivmodsi4+0x68>
   81da8:	0007883a 	mov	r3,zero
   81dac:	21400236 	bltu	r4,r5,81db8 <udivmodsi4+0x44>
   81db0:	2149c83a 	sub	r4,r4,r5
   81db4:	1886b03a 	or	r3,r3,r2
   81db8:	1004d07a 	srli	r2,r2,1
   81dbc:	280ad07a 	srli	r5,r5,1
   81dc0:	103ffa1e 	bne	r2,zero,81dac <udivmodsi4+0x38>
   81dc4:	30000226 	beq	r6,zero,81dd0 <udivmodsi4+0x5c>
   81dc8:	2005883a 	mov	r2,r4
   81dcc:	f800283a 	ret
   81dd0:	1809883a 	mov	r4,r3
   81dd4:	2005883a 	mov	r2,r4
   81dd8:	f800283a 	ret
   81ddc:	0007883a 	mov	r3,zero
   81de0:	003ff806 	br	81dc4 <udivmodsi4+0x50>
   81de4:	00800044 	movi	r2,1
   81de8:	0007883a 	mov	r3,zero
   81dec:	003fef06 	br	81dac <udivmodsi4+0x38>

00081df0 <__divsi3>:
   81df0:	defffe04 	addi	sp,sp,-8
   81df4:	dc000015 	stw	r16,0(sp)
   81df8:	dfc00115 	stw	ra,4(sp)
   81dfc:	0021883a 	mov	r16,zero
   81e00:	20000c16 	blt	r4,zero,81e34 <__divsi3+0x44>
   81e04:	000d883a 	mov	r6,zero
   81e08:	28000e16 	blt	r5,zero,81e44 <__divsi3+0x54>
   81e0c:	0081d740 	call	81d74 <udivmodsi4>
   81e10:	1007883a 	mov	r3,r2
   81e14:	8005003a 	cmpeq	r2,r16,zero
   81e18:	1000011e 	bne	r2,zero,81e20 <__divsi3+0x30>
   81e1c:	00c7c83a 	sub	r3,zero,r3
   81e20:	1805883a 	mov	r2,r3
   81e24:	dfc00117 	ldw	ra,4(sp)
   81e28:	dc000017 	ldw	r16,0(sp)
   81e2c:	dec00204 	addi	sp,sp,8
   81e30:	f800283a 	ret
   81e34:	0109c83a 	sub	r4,zero,r4
   81e38:	04000044 	movi	r16,1
   81e3c:	000d883a 	mov	r6,zero
   81e40:	283ff20e 	bge	r5,zero,81e0c <__divsi3+0x1c>
   81e44:	014bc83a 	sub	r5,zero,r5
   81e48:	8021003a 	cmpeq	r16,r16,zero
   81e4c:	003fef06 	br	81e0c <__divsi3+0x1c>

00081e50 <__modsi3>:
   81e50:	deffff04 	addi	sp,sp,-4
   81e54:	dfc00015 	stw	ra,0(sp)
   81e58:	01800044 	movi	r6,1
   81e5c:	2807883a 	mov	r3,r5
   81e60:	20000416 	blt	r4,zero,81e74 <__modsi3+0x24>
   81e64:	28000c16 	blt	r5,zero,81e98 <__modsi3+0x48>
   81e68:	dfc00017 	ldw	ra,0(sp)
   81e6c:	dec00104 	addi	sp,sp,4
   81e70:	0081d741 	jmpi	81d74 <udivmodsi4>
   81e74:	0109c83a 	sub	r4,zero,r4
   81e78:	28000b16 	blt	r5,zero,81ea8 <__modsi3+0x58>
   81e7c:	180b883a 	mov	r5,r3
   81e80:	01800044 	movi	r6,1
   81e84:	0081d740 	call	81d74 <udivmodsi4>
   81e88:	0085c83a 	sub	r2,zero,r2
   81e8c:	dfc00017 	ldw	ra,0(sp)
   81e90:	dec00104 	addi	sp,sp,4
   81e94:	f800283a 	ret
   81e98:	014bc83a 	sub	r5,zero,r5
   81e9c:	dfc00017 	ldw	ra,0(sp)
   81ea0:	dec00104 	addi	sp,sp,4
   81ea4:	0081d741 	jmpi	81d74 <udivmodsi4>
   81ea8:	0147c83a 	sub	r3,zero,r5
   81eac:	003ff306 	br	81e7c <__modsi3+0x2c>

00081eb0 <__udivsi3>:
   81eb0:	000d883a 	mov	r6,zero
   81eb4:	0081d741 	jmpi	81d74 <udivmodsi4>

00081eb8 <__umodsi3>:
   81eb8:	01800044 	movi	r6,1
   81ebc:	0081d741 	jmpi	81d74 <udivmodsi4>

00081ec0 <__muldi3>:
   81ec0:	defff204 	addi	sp,sp,-56
   81ec4:	df000c15 	stw	fp,48(sp)
   81ec8:	3038d43a 	srli	fp,r6,16
   81ecc:	dd000815 	stw	r20,32(sp)
   81ed0:	dc400515 	stw	r17,20(sp)
   81ed4:	2028d43a 	srli	r20,r4,16
   81ed8:	247fffcc 	andi	r17,r4,65535
   81edc:	dc000415 	stw	r16,16(sp)
   81ee0:	343fffcc 	andi	r16,r6,65535
   81ee4:	dcc00715 	stw	r19,28(sp)
   81ee8:	d9000015 	stw	r4,0(sp)
   81eec:	2827883a 	mov	r19,r5
   81ef0:	8809883a 	mov	r4,r17
   81ef4:	d9400115 	stw	r5,4(sp)
   81ef8:	800b883a 	mov	r5,r16
   81efc:	d9800215 	stw	r6,8(sp)
   81f00:	dfc00d15 	stw	ra,52(sp)
   81f04:	d9c00315 	stw	r7,12(sp)
   81f08:	dd800a15 	stw	r22,40(sp)
   81f0c:	dd400915 	stw	r21,36(sp)
   81f10:	302d883a 	mov	r22,r6
   81f14:	ddc00b15 	stw	r23,44(sp)
   81f18:	dc800615 	stw	r18,24(sp)
   81f1c:	00824b00 	call	824b0 <__mulsi3>
   81f20:	8809883a 	mov	r4,r17
   81f24:	e00b883a 	mov	r5,fp
   81f28:	102b883a 	mov	r21,r2
   81f2c:	00824b00 	call	824b0 <__mulsi3>
   81f30:	800b883a 	mov	r5,r16
   81f34:	a009883a 	mov	r4,r20
   81f38:	1023883a 	mov	r17,r2
   81f3c:	00824b00 	call	824b0 <__mulsi3>
   81f40:	a009883a 	mov	r4,r20
   81f44:	e00b883a 	mov	r5,fp
   81f48:	1021883a 	mov	r16,r2
   81f4c:	00824b00 	call	824b0 <__mulsi3>
   81f50:	a8ffffcc 	andi	r3,r21,65535
   81f54:	a82ad43a 	srli	r21,r21,16
   81f58:	8c23883a 	add	r17,r17,r16
   81f5c:	1011883a 	mov	r8,r2
   81f60:	ac6b883a 	add	r21,r21,r17
   81f64:	a804943a 	slli	r2,r21,16
   81f68:	b009883a 	mov	r4,r22
   81f6c:	980b883a 	mov	r5,r19
   81f70:	10c7883a 	add	r3,r2,r3
   81f74:	a812d43a 	srli	r9,r21,16
   81f78:	180d883a 	mov	r6,r3
   81f7c:	ac00022e 	bgeu	r21,r16,81f88 <__muldi3+0xc8>
   81f80:	00800074 	movhi	r2,1
   81f84:	4091883a 	add	r8,r8,r2
   81f88:	4267883a 	add	r19,r8,r9
   81f8c:	302d883a 	mov	r22,r6
   81f90:	00824b00 	call	824b0 <__mulsi3>
   81f94:	d9400317 	ldw	r5,12(sp)
   81f98:	d9000017 	ldw	r4,0(sp)
   81f9c:	1023883a 	mov	r17,r2
   81fa0:	00824b00 	call	824b0 <__mulsi3>
   81fa4:	14cb883a 	add	r5,r2,r19
   81fa8:	894b883a 	add	r5,r17,r5
   81fac:	b005883a 	mov	r2,r22
   81fb0:	2807883a 	mov	r3,r5
   81fb4:	dfc00d17 	ldw	ra,52(sp)
   81fb8:	df000c17 	ldw	fp,48(sp)
   81fbc:	ddc00b17 	ldw	r23,44(sp)
   81fc0:	dd800a17 	ldw	r22,40(sp)
   81fc4:	dd400917 	ldw	r21,36(sp)
   81fc8:	dd000817 	ldw	r20,32(sp)
   81fcc:	dcc00717 	ldw	r19,28(sp)
   81fd0:	dc800617 	ldw	r18,24(sp)
   81fd4:	dc400517 	ldw	r17,20(sp)
   81fd8:	dc000417 	ldw	r16,16(sp)
   81fdc:	dec00e04 	addi	sp,sp,56
   81fe0:	f800283a 	ret

00081fe4 <__clzsi2>:
   81fe4:	00bfffd4 	movui	r2,65535
   81fe8:	11000e36 	bltu	r2,r4,82024 <__clzsi2+0x40>
   81fec:	00803fc4 	movi	r2,255
   81ff0:	01400204 	movi	r5,8
   81ff4:	0007883a 	mov	r3,zero
   81ff8:	11001036 	bltu	r2,r4,8203c <__clzsi2+0x58>
   81ffc:	000b883a 	mov	r5,zero
   82000:	20c6d83a 	srl	r3,r4,r3
   82004:	00800274 	movhi	r2,9
   82008:	10b8ff04 	addi	r2,r2,-7172
   8200c:	1887883a 	add	r3,r3,r2
   82010:	18800003 	ldbu	r2,0(r3)
   82014:	00c00804 	movi	r3,32
   82018:	2885883a 	add	r2,r5,r2
   8201c:	1885c83a 	sub	r2,r3,r2
   82020:	f800283a 	ret
   82024:	01400404 	movi	r5,16
   82028:	00804034 	movhi	r2,256
   8202c:	10bfffc4 	addi	r2,r2,-1
   82030:	2807883a 	mov	r3,r5
   82034:	113ff22e 	bgeu	r2,r4,82000 <__clzsi2+0x1c>
   82038:	01400604 	movi	r5,24
   8203c:	2807883a 	mov	r3,r5
   82040:	20c6d83a 	srl	r3,r4,r3
   82044:	00800274 	movhi	r2,9
   82048:	10b8ff04 	addi	r2,r2,-7172
   8204c:	1887883a 	add	r3,r3,r2
   82050:	18800003 	ldbu	r2,0(r3)
   82054:	00c00804 	movi	r3,32
   82058:	2885883a 	add	r2,r5,r2
   8205c:	1885c83a 	sub	r2,r3,r2
   82060:	f800283a 	ret

00082064 <__pack_d>:
   82064:	20c00017 	ldw	r3,0(r4)
   82068:	defffd04 	addi	sp,sp,-12
   8206c:	dc000015 	stw	r16,0(sp)
   82070:	dc800215 	stw	r18,8(sp)
   82074:	dc400115 	stw	r17,4(sp)
   82078:	00800044 	movi	r2,1
   8207c:	22000317 	ldw	r8,12(r4)
   82080:	001f883a 	mov	r15,zero
   82084:	22400417 	ldw	r9,16(r4)
   82088:	24000117 	ldw	r16,4(r4)
   8208c:	10c0552e 	bgeu	r2,r3,821e4 <__pack_d+0x180>
   82090:	00800104 	movi	r2,4
   82094:	18804f26 	beq	r3,r2,821d4 <__pack_d+0x170>
   82098:	00800084 	movi	r2,2
   8209c:	18800226 	beq	r3,r2,820a8 <__pack_d+0x44>
   820a0:	4244b03a 	or	r2,r8,r9
   820a4:	10001a1e 	bne	r2,zero,82110 <__pack_d+0xac>
   820a8:	000d883a 	mov	r6,zero
   820ac:	000f883a 	mov	r7,zero
   820b0:	0011883a 	mov	r8,zero
   820b4:	00800434 	movhi	r2,16
   820b8:	10bfffc4 	addi	r2,r2,-1
   820bc:	301d883a 	mov	r14,r6
   820c0:	3884703a 	and	r2,r7,r2
   820c4:	400a953a 	slli	r5,r8,20
   820c8:	79bffc2c 	andhi	r6,r15,65520
   820cc:	308cb03a 	or	r6,r6,r2
   820d0:	00e00434 	movhi	r3,32784
   820d4:	18ffffc4 	addi	r3,r3,-1
   820d8:	800497fa 	slli	r2,r16,31
   820dc:	30c6703a 	and	r3,r6,r3
   820e0:	1946b03a 	or	r3,r3,r5
   820e4:	01600034 	movhi	r5,32768
   820e8:	297fffc4 	addi	r5,r5,-1
   820ec:	194a703a 	and	r5,r3,r5
   820f0:	288ab03a 	or	r5,r5,r2
   820f4:	2807883a 	mov	r3,r5
   820f8:	7005883a 	mov	r2,r14
   820fc:	dc800217 	ldw	r18,8(sp)
   82100:	dc400117 	ldw	r17,4(sp)
   82104:	dc000017 	ldw	r16,0(sp)
   82108:	dec00304 	addi	sp,sp,12
   8210c:	f800283a 	ret
   82110:	21000217 	ldw	r4,8(r4)
   82114:	00bf0084 	movi	r2,-1022
   82118:	20803f16 	blt	r4,r2,82218 <__pack_d+0x1b4>
   8211c:	0080ffc4 	movi	r2,1023
   82120:	11002c16 	blt	r2,r4,821d4 <__pack_d+0x170>
   82124:	00803fc4 	movi	r2,255
   82128:	408c703a 	and	r6,r8,r2
   8212c:	00802004 	movi	r2,128
   82130:	0007883a 	mov	r3,zero
   82134:	000f883a 	mov	r7,zero
   82138:	2280ffc4 	addi	r10,r4,1023
   8213c:	30801e26 	beq	r6,r2,821b8 <__pack_d+0x154>
   82140:	00801fc4 	movi	r2,127
   82144:	4089883a 	add	r4,r8,r2
   82148:	220d803a 	cmpltu	r6,r4,r8
   8214c:	324d883a 	add	r6,r6,r9
   82150:	2011883a 	mov	r8,r4
   82154:	3013883a 	mov	r9,r6
   82158:	00880034 	movhi	r2,8192
   8215c:	10bfffc4 	addi	r2,r2,-1
   82160:	12400d36 	bltu	r2,r9,82198 <__pack_d+0x134>
   82164:	4804963a 	slli	r2,r9,24
   82168:	400cd23a 	srli	r6,r8,8
   8216c:	480ed23a 	srli	r7,r9,8
   82170:	013fffc4 	movi	r4,-1
   82174:	118cb03a 	or	r6,r2,r6
   82178:	01400434 	movhi	r5,16
   8217c:	297fffc4 	addi	r5,r5,-1
   82180:	3104703a 	and	r2,r6,r4
   82184:	3946703a 	and	r3,r7,r5
   82188:	5201ffcc 	andi	r8,r10,2047
   8218c:	100d883a 	mov	r6,r2
   82190:	180f883a 	mov	r7,r3
   82194:	003fc706 	br	820b4 <__pack_d+0x50>
   82198:	480897fa 	slli	r4,r9,31
   8219c:	4004d07a 	srli	r2,r8,1
   821a0:	4806d07a 	srli	r3,r9,1
   821a4:	52800044 	addi	r10,r10,1
   821a8:	2084b03a 	or	r2,r4,r2
   821ac:	1011883a 	mov	r8,r2
   821b0:	1813883a 	mov	r9,r3
   821b4:	003feb06 	br	82164 <__pack_d+0x100>
   821b8:	383fe11e 	bne	r7,zero,82140 <__pack_d+0xdc>
   821bc:	01004004 	movi	r4,256
   821c0:	4104703a 	and	r2,r8,r4
   821c4:	10c4b03a 	or	r2,r2,r3
   821c8:	103fe326 	beq	r2,zero,82158 <__pack_d+0xf4>
   821cc:	3005883a 	mov	r2,r6
   821d0:	003fdc06 	br	82144 <__pack_d+0xe0>
   821d4:	000d883a 	mov	r6,zero
   821d8:	000f883a 	mov	r7,zero
   821dc:	0201ffc4 	movi	r8,2047
   821e0:	003fb406 	br	820b4 <__pack_d+0x50>
   821e4:	0005883a 	mov	r2,zero
   821e8:	00c00234 	movhi	r3,8
   821ec:	408cb03a 	or	r6,r8,r2
   821f0:	48ceb03a 	or	r7,r9,r3
   821f4:	013fffc4 	movi	r4,-1
   821f8:	01400434 	movhi	r5,16
   821fc:	297fffc4 	addi	r5,r5,-1
   82200:	3104703a 	and	r2,r6,r4
   82204:	3946703a 	and	r3,r7,r5
   82208:	100d883a 	mov	r6,r2
   8220c:	180f883a 	mov	r7,r3
   82210:	0201ffc4 	movi	r8,2047
   82214:	003fa706 	br	820b4 <__pack_d+0x50>
   82218:	1109c83a 	sub	r4,r2,r4
   8221c:	00800e04 	movi	r2,56
   82220:	11004316 	blt	r2,r4,82330 <__pack_d+0x2cc>
   82224:	21fff804 	addi	r7,r4,-32
   82228:	38004516 	blt	r7,zero,82340 <__pack_d+0x2dc>
   8222c:	49d8d83a 	srl	r12,r9,r7
   82230:	001b883a 	mov	r13,zero
   82234:	0023883a 	mov	r17,zero
   82238:	01400044 	movi	r5,1
   8223c:	0025883a 	mov	r18,zero
   82240:	38004716 	blt	r7,zero,82360 <__pack_d+0x2fc>
   82244:	29d6983a 	sll	r11,r5,r7
   82248:	0015883a 	mov	r10,zero
   8224c:	00bfffc4 	movi	r2,-1
   82250:	5089883a 	add	r4,r10,r2
   82254:	588b883a 	add	r5,r11,r2
   82258:	228d803a 	cmpltu	r6,r4,r10
   8225c:	314b883a 	add	r5,r6,r5
   82260:	4104703a 	and	r2,r8,r4
   82264:	4946703a 	and	r3,r9,r5
   82268:	10c4b03a 	or	r2,r2,r3
   8226c:	10000226 	beq	r2,zero,82278 <__pack_d+0x214>
   82270:	04400044 	movi	r17,1
   82274:	0025883a 	mov	r18,zero
   82278:	00803fc4 	movi	r2,255
   8227c:	644eb03a 	or	r7,r12,r17
   82280:	3892703a 	and	r9,r7,r2
   82284:	00802004 	movi	r2,128
   82288:	6c90b03a 	or	r8,r13,r18
   8228c:	0015883a 	mov	r10,zero
   82290:	48801626 	beq	r9,r2,822ec <__pack_d+0x288>
   82294:	01001fc4 	movi	r4,127
   82298:	3905883a 	add	r2,r7,r4
   8229c:	11cd803a 	cmpltu	r6,r2,r7
   822a0:	320d883a 	add	r6,r6,r8
   822a4:	100f883a 	mov	r7,r2
   822a8:	00840034 	movhi	r2,4096
   822ac:	10bfffc4 	addi	r2,r2,-1
   822b0:	3011883a 	mov	r8,r6
   822b4:	0007883a 	mov	r3,zero
   822b8:	11801b36 	bltu	r2,r6,82328 <__pack_d+0x2c4>
   822bc:	4004963a 	slli	r2,r8,24
   822c0:	3808d23a 	srli	r4,r7,8
   822c4:	400ad23a 	srli	r5,r8,8
   822c8:	1813883a 	mov	r9,r3
   822cc:	1108b03a 	or	r4,r2,r4
   822d0:	00bfffc4 	movi	r2,-1
   822d4:	00c00434 	movhi	r3,16
   822d8:	18ffffc4 	addi	r3,r3,-1
   822dc:	208c703a 	and	r6,r4,r2
   822e0:	28ce703a 	and	r7,r5,r3
   822e4:	4a01ffcc 	andi	r8,r9,2047
   822e8:	003f7206 	br	820b4 <__pack_d+0x50>
   822ec:	503fe91e 	bne	r10,zero,82294 <__pack_d+0x230>
   822f0:	01004004 	movi	r4,256
   822f4:	3904703a 	and	r2,r7,r4
   822f8:	0007883a 	mov	r3,zero
   822fc:	10c4b03a 	or	r2,r2,r3
   82300:	10000626 	beq	r2,zero,8231c <__pack_d+0x2b8>
   82304:	3a45883a 	add	r2,r7,r9
   82308:	11cd803a 	cmpltu	r6,r2,r7
   8230c:	320d883a 	add	r6,r6,r8
   82310:	100f883a 	mov	r7,r2
   82314:	3011883a 	mov	r8,r6
   82318:	0007883a 	mov	r3,zero
   8231c:	00840034 	movhi	r2,4096
   82320:	10bfffc4 	addi	r2,r2,-1
   82324:	123fe52e 	bgeu	r2,r8,822bc <__pack_d+0x258>
   82328:	00c00044 	movi	r3,1
   8232c:	003fe306 	br	822bc <__pack_d+0x258>
   82330:	0009883a 	mov	r4,zero
   82334:	0013883a 	mov	r9,zero
   82338:	000b883a 	mov	r5,zero
   8233c:	003fe406 	br	822d0 <__pack_d+0x26c>
   82340:	4a47883a 	add	r3,r9,r9
   82344:	008007c4 	movi	r2,31
   82348:	1105c83a 	sub	r2,r2,r4
   8234c:	1886983a 	sll	r3,r3,r2
   82350:	4118d83a 	srl	r12,r8,r4
   82354:	491ad83a 	srl	r13,r9,r4
   82358:	1b18b03a 	or	r12,r3,r12
   8235c:	003fb506 	br	82234 <__pack_d+0x1d0>
   82360:	2806d07a 	srli	r3,r5,1
   82364:	008007c4 	movi	r2,31
   82368:	1105c83a 	sub	r2,r2,r4
   8236c:	1896d83a 	srl	r11,r3,r2
   82370:	2914983a 	sll	r10,r5,r4
   82374:	003fb506 	br	8224c <__pack_d+0x1e8>

00082378 <__unpack_d>:
   82378:	20c00117 	ldw	r3,4(r4)
   8237c:	22400017 	ldw	r9,0(r4)
   82380:	00800434 	movhi	r2,16
   82384:	10bfffc4 	addi	r2,r2,-1
   82388:	1808d53a 	srli	r4,r3,20
   8238c:	180cd7fa 	srli	r6,r3,31
   82390:	1894703a 	and	r10,r3,r2
   82394:	2201ffcc 	andi	r8,r4,2047
   82398:	281b883a 	mov	r13,r5
   8239c:	4817883a 	mov	r11,r9
   823a0:	29800115 	stw	r6,4(r5)
   823a4:	5019883a 	mov	r12,r10
   823a8:	40001e1e 	bne	r8,zero,82424 <__unpack_d+0xac>
   823ac:	4a84b03a 	or	r2,r9,r10
   823b0:	10001926 	beq	r2,zero,82418 <__unpack_d+0xa0>
   823b4:	4804d63a 	srli	r2,r9,24
   823b8:	500c923a 	slli	r6,r10,8
   823bc:	013f0084 	movi	r4,-1022
   823c0:	00c40034 	movhi	r3,4096
   823c4:	18ffffc4 	addi	r3,r3,-1
   823c8:	118cb03a 	or	r6,r2,r6
   823cc:	008000c4 	movi	r2,3
   823d0:	480a923a 	slli	r5,r9,8
   823d4:	68800015 	stw	r2,0(r13)
   823d8:	69000215 	stw	r4,8(r13)
   823dc:	19800b36 	bltu	r3,r6,8240c <__unpack_d+0x94>
   823e0:	200f883a 	mov	r7,r4
   823e4:	1811883a 	mov	r8,r3
   823e8:	2945883a 	add	r2,r5,r5
   823ec:	1149803a 	cmpltu	r4,r2,r5
   823f0:	3187883a 	add	r3,r6,r6
   823f4:	20c9883a 	add	r4,r4,r3
   823f8:	100b883a 	mov	r5,r2
   823fc:	200d883a 	mov	r6,r4
   82400:	39ffffc4 	addi	r7,r7,-1
   82404:	413ff82e 	bgeu	r8,r4,823e8 <__unpack_d+0x70>
   82408:	69c00215 	stw	r7,8(r13)
   8240c:	69800415 	stw	r6,16(r13)
   82410:	69400315 	stw	r5,12(r13)
   82414:	f800283a 	ret
   82418:	00800084 	movi	r2,2
   8241c:	28800015 	stw	r2,0(r5)
   82420:	f800283a 	ret
   82424:	0081ffc4 	movi	r2,2047
   82428:	40800f26 	beq	r8,r2,82468 <__unpack_d+0xf0>
   8242c:	480cd63a 	srli	r6,r9,24
   82430:	5006923a 	slli	r3,r10,8
   82434:	4804923a 	slli	r2,r9,8
   82438:	0009883a 	mov	r4,zero
   8243c:	30c6b03a 	or	r3,r6,r3
   82440:	01440034 	movhi	r5,4096
   82444:	110cb03a 	or	r6,r2,r4
   82448:	423f0044 	addi	r8,r8,-1023
   8244c:	194eb03a 	or	r7,r3,r5
   82450:	008000c4 	movi	r2,3
   82454:	69c00415 	stw	r7,16(r13)
   82458:	6a000215 	stw	r8,8(r13)
   8245c:	68800015 	stw	r2,0(r13)
   82460:	69800315 	stw	r6,12(r13)
   82464:	f800283a 	ret
   82468:	4a84b03a 	or	r2,r9,r10
   8246c:	1000031e 	bne	r2,zero,8247c <__unpack_d+0x104>
   82470:	00800104 	movi	r2,4
   82474:	28800015 	stw	r2,0(r5)
   82478:	f800283a 	ret
   8247c:	0009883a 	mov	r4,zero
   82480:	01400234 	movhi	r5,8
   82484:	4904703a 	and	r2,r9,r4
   82488:	5146703a 	and	r3,r10,r5
   8248c:	10c4b03a 	or	r2,r2,r3
   82490:	10000526 	beq	r2,zero,824a8 <__unpack_d+0x130>
   82494:	00800044 	movi	r2,1
   82498:	68800015 	stw	r2,0(r13)
   8249c:	6b000415 	stw	r12,16(r13)
   824a0:	6ac00315 	stw	r11,12(r13)
   824a4:	f800283a 	ret
   824a8:	68000015 	stw	zero,0(r13)
   824ac:	003ffb06 	br	8249c <__unpack_d+0x124>

000824b0 <__mulsi3>:
   824b0:	20000a26 	beq	r4,zero,824dc <__mulsi3+0x2c>
   824b4:	0007883a 	mov	r3,zero
   824b8:	2080004c 	andi	r2,r4,1
   824bc:	1005003a 	cmpeq	r2,r2,zero
   824c0:	2008d07a 	srli	r4,r4,1
   824c4:	1000011e 	bne	r2,zero,824cc <__mulsi3+0x1c>
   824c8:	1947883a 	add	r3,r3,r5
   824cc:	294b883a 	add	r5,r5,r5
   824d0:	203ff91e 	bne	r4,zero,824b8 <__mulsi3+0x8>
   824d4:	1805883a 	mov	r2,r3
   824d8:	f800283a 	ret
   824dc:	0007883a 	mov	r3,zero
   824e0:	1805883a 	mov	r2,r3
   824e4:	f800283a 	ret

000824e8 <free>:
   824e8:	00800274 	movhi	r2,9
   824ec:	10805f04 	addi	r2,r2,380
   824f0:	200b883a 	mov	r5,r4
   824f4:	11000017 	ldw	r4,0(r2)
   824f8:	0086ddc1 	jmpi	86ddc <_free_r>

000824fc <malloc>:
   824fc:	00800274 	movhi	r2,9
   82500:	10805f04 	addi	r2,r2,380
   82504:	200b883a 	mov	r5,r4
   82508:	11000017 	ldw	r4,0(r2)
   8250c:	00825101 	jmpi	82510 <_malloc_r>

00082510 <_malloc_r>:
   82510:	defff604 	addi	sp,sp,-40
   82514:	28c002c4 	addi	r3,r5,11
   82518:	00800584 	movi	r2,22
   8251c:	dc800215 	stw	r18,8(sp)
   82520:	dfc00915 	stw	ra,36(sp)
   82524:	df000815 	stw	fp,32(sp)
   82528:	ddc00715 	stw	r23,28(sp)
   8252c:	dd800615 	stw	r22,24(sp)
   82530:	dd400515 	stw	r21,20(sp)
   82534:	dd000415 	stw	r20,16(sp)
   82538:	dcc00315 	stw	r19,12(sp)
   8253c:	dc400115 	stw	r17,4(sp)
   82540:	dc000015 	stw	r16,0(sp)
   82544:	2025883a 	mov	r18,r4
   82548:	10c01236 	bltu	r2,r3,82594 <_malloc_r+0x84>
   8254c:	04400404 	movi	r17,16
   82550:	8940142e 	bgeu	r17,r5,825a4 <_malloc_r+0x94>
   82554:	00800304 	movi	r2,12
   82558:	0007883a 	mov	r3,zero
   8255c:	90800015 	stw	r2,0(r18)
   82560:	1805883a 	mov	r2,r3
   82564:	dfc00917 	ldw	ra,36(sp)
   82568:	df000817 	ldw	fp,32(sp)
   8256c:	ddc00717 	ldw	r23,28(sp)
   82570:	dd800617 	ldw	r22,24(sp)
   82574:	dd400517 	ldw	r21,20(sp)
   82578:	dd000417 	ldw	r20,16(sp)
   8257c:	dcc00317 	ldw	r19,12(sp)
   82580:	dc800217 	ldw	r18,8(sp)
   82584:	dc400117 	ldw	r17,4(sp)
   82588:	dc000017 	ldw	r16,0(sp)
   8258c:	dec00a04 	addi	sp,sp,40
   82590:	f800283a 	ret
   82594:	00bffe04 	movi	r2,-8
   82598:	18a2703a 	and	r17,r3,r2
   8259c:	883fed16 	blt	r17,zero,82554 <_malloc_r+0x44>
   825a0:	897fec36 	bltu	r17,r5,82554 <_malloc_r+0x44>
   825a4:	9009883a 	mov	r4,r18
   825a8:	008b7980 	call	8b798 <__malloc_lock>
   825ac:	00807dc4 	movi	r2,503
   825b0:	14402b2e 	bgeu	r2,r17,82660 <_malloc_r+0x150>
   825b4:	8806d27a 	srli	r3,r17,9
   825b8:	18003f1e 	bne	r3,zero,826b8 <_malloc_r+0x1a8>
   825bc:	880cd0fa 	srli	r6,r17,3
   825c0:	300490fa 	slli	r2,r6,3
   825c4:	02c00274 	movhi	r11,9
   825c8:	5af9d204 	addi	r11,r11,-6328
   825cc:	12cb883a 	add	r5,r2,r11
   825d0:	2c000317 	ldw	r16,12(r5)
   825d4:	580f883a 	mov	r7,r11
   825d8:	2c00041e 	bne	r5,r16,825ec <_malloc_r+0xdc>
   825dc:	00000a06 	br	82608 <_malloc_r+0xf8>
   825e0:	1800860e 	bge	r3,zero,827fc <_malloc_r+0x2ec>
   825e4:	84000317 	ldw	r16,12(r16)
   825e8:	2c000726 	beq	r5,r16,82608 <_malloc_r+0xf8>
   825ec:	80800117 	ldw	r2,4(r16)
   825f0:	00ffff04 	movi	r3,-4
   825f4:	10c8703a 	and	r4,r2,r3
   825f8:	2447c83a 	sub	r3,r4,r17
   825fc:	008003c4 	movi	r2,15
   82600:	10fff70e 	bge	r2,r3,825e0 <_malloc_r+0xd0>
   82604:	31bfffc4 	addi	r6,r6,-1
   82608:	32400044 	addi	r9,r6,1
   8260c:	02800274 	movhi	r10,9
   82610:	52b9d404 	addi	r10,r10,-6320
   82614:	54000217 	ldw	r16,8(r10)
   82618:	8280a026 	beq	r16,r10,8289c <_malloc_r+0x38c>
   8261c:	80800117 	ldw	r2,4(r16)
   82620:	00ffff04 	movi	r3,-4
   82624:	10ca703a 	and	r5,r2,r3
   82628:	2c4dc83a 	sub	r6,r5,r17
   8262c:	008003c4 	movi	r2,15
   82630:	11808316 	blt	r2,r6,82840 <_malloc_r+0x330>
   82634:	52800315 	stw	r10,12(r10)
   82638:	52800215 	stw	r10,8(r10)
   8263c:	30002916 	blt	r6,zero,826e4 <_malloc_r+0x1d4>
   82640:	8147883a 	add	r3,r16,r5
   82644:	18800117 	ldw	r2,4(r3)
   82648:	9009883a 	mov	r4,r18
   8264c:	10800054 	ori	r2,r2,1
   82650:	18800115 	stw	r2,4(r3)
   82654:	008b7b80 	call	8b7b8 <__malloc_unlock>
   82658:	80c00204 	addi	r3,r16,8
   8265c:	003fc006 	br	82560 <_malloc_r+0x50>
   82660:	02c00274 	movhi	r11,9
   82664:	5af9d204 	addi	r11,r11,-6328
   82668:	8ac5883a 	add	r2,r17,r11
   8266c:	14000317 	ldw	r16,12(r2)
   82670:	580f883a 	mov	r7,r11
   82674:	8806d0fa 	srli	r3,r17,3
   82678:	14006c26 	beq	r2,r16,8282c <_malloc_r+0x31c>
   8267c:	80c00117 	ldw	r3,4(r16)
   82680:	00bfff04 	movi	r2,-4
   82684:	81800317 	ldw	r6,12(r16)
   82688:	1886703a 	and	r3,r3,r2
   8268c:	80c7883a 	add	r3,r16,r3
   82690:	18800117 	ldw	r2,4(r3)
   82694:	81400217 	ldw	r5,8(r16)
   82698:	9009883a 	mov	r4,r18
   8269c:	10800054 	ori	r2,r2,1
   826a0:	18800115 	stw	r2,4(r3)
   826a4:	31400215 	stw	r5,8(r6)
   826a8:	29800315 	stw	r6,12(r5)
   826ac:	008b7b80 	call	8b7b8 <__malloc_unlock>
   826b0:	80c00204 	addi	r3,r16,8
   826b4:	003faa06 	br	82560 <_malloc_r+0x50>
   826b8:	00800104 	movi	r2,4
   826bc:	10c0052e 	bgeu	r2,r3,826d4 <_malloc_r+0x1c4>
   826c0:	00800504 	movi	r2,20
   826c4:	10c07836 	bltu	r2,r3,828a8 <_malloc_r+0x398>
   826c8:	198016c4 	addi	r6,r3,91
   826cc:	300490fa 	slli	r2,r6,3
   826d0:	003fbc06 	br	825c4 <_malloc_r+0xb4>
   826d4:	8804d1ba 	srli	r2,r17,6
   826d8:	11800e04 	addi	r6,r2,56
   826dc:	300490fa 	slli	r2,r6,3
   826e0:	003fb806 	br	825c4 <_malloc_r+0xb4>
   826e4:	00807fc4 	movi	r2,511
   826e8:	1140bb36 	bltu	r2,r5,829d8 <_malloc_r+0x4c8>
   826ec:	2806d0fa 	srli	r3,r5,3
   826f0:	573ffe04 	addi	fp,r10,-8
   826f4:	00800044 	movi	r2,1
   826f8:	180890fa 	slli	r4,r3,3
   826fc:	1807d0ba 	srai	r3,r3,2
   82700:	e1c00117 	ldw	r7,4(fp)
   82704:	5909883a 	add	r4,r11,r4
   82708:	21400217 	ldw	r5,8(r4)
   8270c:	10c4983a 	sll	r2,r2,r3
   82710:	81000315 	stw	r4,12(r16)
   82714:	81400215 	stw	r5,8(r16)
   82718:	388eb03a 	or	r7,r7,r2
   8271c:	2c000315 	stw	r16,12(r5)
   82720:	24000215 	stw	r16,8(r4)
   82724:	e1c00115 	stw	r7,4(fp)
   82728:	4807883a 	mov	r3,r9
   8272c:	4800cd16 	blt	r9,zero,82a64 <_malloc_r+0x554>
   82730:	1807d0ba 	srai	r3,r3,2
   82734:	00800044 	movi	r2,1
   82738:	10c8983a 	sll	r4,r2,r3
   8273c:	39004436 	bltu	r7,r4,82850 <_malloc_r+0x340>
   82740:	21c4703a 	and	r2,r4,r7
   82744:	10000a1e 	bne	r2,zero,82770 <_malloc_r+0x260>
   82748:	2109883a 	add	r4,r4,r4
   8274c:	00bfff04 	movi	r2,-4
   82750:	4884703a 	and	r2,r9,r2
   82754:	3906703a 	and	r3,r7,r4
   82758:	12400104 	addi	r9,r2,4
   8275c:	1800041e 	bne	r3,zero,82770 <_malloc_r+0x260>
   82760:	2109883a 	add	r4,r4,r4
   82764:	3904703a 	and	r2,r7,r4
   82768:	4a400104 	addi	r9,r9,4
   8276c:	103ffc26 	beq	r2,zero,82760 <_malloc_r+0x250>
   82770:	480490fa 	slli	r2,r9,3
   82774:	4819883a 	mov	r12,r9
   82778:	023fff04 	movi	r8,-4
   8277c:	589b883a 	add	r13,r11,r2
   82780:	6807883a 	mov	r3,r13
   82784:	014003c4 	movi	r5,15
   82788:	1c000317 	ldw	r16,12(r3)
   8278c:	1c00041e 	bne	r3,r16,827a0 <_malloc_r+0x290>
   82790:	0000a706 	br	82a30 <_malloc_r+0x520>
   82794:	3000ab0e 	bge	r6,zero,82a44 <_malloc_r+0x534>
   82798:	84000317 	ldw	r16,12(r16)
   8279c:	1c00a426 	beq	r3,r16,82a30 <_malloc_r+0x520>
   827a0:	80800117 	ldw	r2,4(r16)
   827a4:	1204703a 	and	r2,r2,r8
   827a8:	144dc83a 	sub	r6,r2,r17
   827ac:	29bff90e 	bge	r5,r6,82794 <_malloc_r+0x284>
   827b0:	81000317 	ldw	r4,12(r16)
   827b4:	80c00217 	ldw	r3,8(r16)
   827b8:	89400054 	ori	r5,r17,1
   827bc:	8445883a 	add	r2,r16,r17
   827c0:	20c00215 	stw	r3,8(r4)
   827c4:	19000315 	stw	r4,12(r3)
   827c8:	81400115 	stw	r5,4(r16)
   827cc:	1187883a 	add	r3,r2,r6
   827d0:	31000054 	ori	r4,r6,1
   827d4:	50800315 	stw	r2,12(r10)
   827d8:	50800215 	stw	r2,8(r10)
   827dc:	19800015 	stw	r6,0(r3)
   827e0:	11000115 	stw	r4,4(r2)
   827e4:	12800215 	stw	r10,8(r2)
   827e8:	12800315 	stw	r10,12(r2)
   827ec:	9009883a 	mov	r4,r18
   827f0:	008b7b80 	call	8b7b8 <__malloc_unlock>
   827f4:	80c00204 	addi	r3,r16,8
   827f8:	003f5906 	br	82560 <_malloc_r+0x50>
   827fc:	8109883a 	add	r4,r16,r4
   82800:	20800117 	ldw	r2,4(r4)
   82804:	80c00217 	ldw	r3,8(r16)
   82808:	81400317 	ldw	r5,12(r16)
   8280c:	10800054 	ori	r2,r2,1
   82810:	20800115 	stw	r2,4(r4)
   82814:	28c00215 	stw	r3,8(r5)
   82818:	19400315 	stw	r5,12(r3)
   8281c:	9009883a 	mov	r4,r18
   82820:	008b7b80 	call	8b7b8 <__malloc_unlock>
   82824:	80c00204 	addi	r3,r16,8
   82828:	003f4d06 	br	82560 <_malloc_r+0x50>
   8282c:	80800204 	addi	r2,r16,8
   82830:	14000317 	ldw	r16,12(r2)
   82834:	143f911e 	bne	r2,r16,8267c <_malloc_r+0x16c>
   82838:	1a400084 	addi	r9,r3,2
   8283c:	003f7306 	br	8260c <_malloc_r+0xfc>
   82840:	88c00054 	ori	r3,r17,1
   82844:	8445883a 	add	r2,r16,r17
   82848:	80c00115 	stw	r3,4(r16)
   8284c:	003fdf06 	br	827cc <_malloc_r+0x2bc>
   82850:	e4000217 	ldw	r16,8(fp)
   82854:	00bfff04 	movi	r2,-4
   82858:	80c00117 	ldw	r3,4(r16)
   8285c:	802d883a 	mov	r22,r16
   82860:	18aa703a 	and	r21,r3,r2
   82864:	ac401636 	bltu	r21,r17,828c0 <_malloc_r+0x3b0>
   82868:	ac49c83a 	sub	r4,r21,r17
   8286c:	008003c4 	movi	r2,15
   82870:	1100130e 	bge	r2,r4,828c0 <_malloc_r+0x3b0>
   82874:	88800054 	ori	r2,r17,1
   82878:	8447883a 	add	r3,r16,r17
   8287c:	80800115 	stw	r2,4(r16)
   82880:	20800054 	ori	r2,r4,1
   82884:	18800115 	stw	r2,4(r3)
   82888:	e0c00215 	stw	r3,8(fp)
   8288c:	9009883a 	mov	r4,r18
   82890:	008b7b80 	call	8b7b8 <__malloc_unlock>
   82894:	80c00204 	addi	r3,r16,8
   82898:	003f3106 	br	82560 <_malloc_r+0x50>
   8289c:	39c00117 	ldw	r7,4(r7)
   828a0:	573ffe04 	addi	fp,r10,-8
   828a4:	003fa006 	br	82728 <_malloc_r+0x218>
   828a8:	00801504 	movi	r2,84
   828ac:	10c06736 	bltu	r2,r3,82a4c <_malloc_r+0x53c>
   828b0:	8804d33a 	srli	r2,r17,12
   828b4:	11801b84 	addi	r6,r2,110
   828b8:	300490fa 	slli	r2,r6,3
   828bc:	003f4106 	br	825c4 <_malloc_r+0xb4>
   828c0:	d0a6b017 	ldw	r2,-25920(gp)
   828c4:	d0e00117 	ldw	r3,-32764(gp)
   828c8:	053fffc4 	movi	r20,-1
   828cc:	10800404 	addi	r2,r2,16
   828d0:	88a7883a 	add	r19,r17,r2
   828d4:	1d000326 	beq	r3,r20,828e4 <_malloc_r+0x3d4>
   828d8:	98c3ffc4 	addi	r3,r19,4095
   828dc:	00bc0004 	movi	r2,-4096
   828e0:	18a6703a 	and	r19,r3,r2
   828e4:	9009883a 	mov	r4,r18
   828e8:	980b883a 	mov	r5,r19
   828ec:	0082e340 	call	82e34 <_sbrk_r>
   828f0:	1009883a 	mov	r4,r2
   828f4:	15000426 	beq	r2,r20,82908 <_malloc_r+0x3f8>
   828f8:	854b883a 	add	r5,r16,r21
   828fc:	1029883a 	mov	r20,r2
   82900:	11405a2e 	bgeu	r2,r5,82a6c <_malloc_r+0x55c>
   82904:	87000c26 	beq	r16,fp,82938 <_malloc_r+0x428>
   82908:	e4000217 	ldw	r16,8(fp)
   8290c:	80c00117 	ldw	r3,4(r16)
   82910:	00bfff04 	movi	r2,-4
   82914:	1884703a 	and	r2,r3,r2
   82918:	14400336 	bltu	r2,r17,82928 <_malloc_r+0x418>
   8291c:	1449c83a 	sub	r4,r2,r17
   82920:	008003c4 	movi	r2,15
   82924:	113fd316 	blt	r2,r4,82874 <_malloc_r+0x364>
   82928:	9009883a 	mov	r4,r18
   8292c:	008b7b80 	call	8b7b8 <__malloc_unlock>
   82930:	0007883a 	mov	r3,zero
   82934:	003f0a06 	br	82560 <_malloc_r+0x50>
   82938:	05c00274 	movhi	r23,9
   8293c:	bdc71a04 	addi	r23,r23,7272
   82940:	b8800017 	ldw	r2,0(r23)
   82944:	988d883a 	add	r6,r19,r2
   82948:	b9800015 	stw	r6,0(r23)
   8294c:	d0e00117 	ldw	r3,-32764(gp)
   82950:	00bfffc4 	movi	r2,-1
   82954:	18808e26 	beq	r3,r2,82b90 <_malloc_r+0x680>
   82958:	2145c83a 	sub	r2,r4,r5
   8295c:	3085883a 	add	r2,r6,r2
   82960:	b8800015 	stw	r2,0(r23)
   82964:	20c001cc 	andi	r3,r4,7
   82968:	18005f1e 	bne	r3,zero,82ae8 <_malloc_r+0x5d8>
   8296c:	000b883a 	mov	r5,zero
   82970:	a4c5883a 	add	r2,r20,r19
   82974:	1083ffcc 	andi	r2,r2,4095
   82978:	00c40004 	movi	r3,4096
   8297c:	1887c83a 	sub	r3,r3,r2
   82980:	28e7883a 	add	r19,r5,r3
   82984:	9009883a 	mov	r4,r18
   82988:	980b883a 	mov	r5,r19
   8298c:	0082e340 	call	82e34 <_sbrk_r>
   82990:	1007883a 	mov	r3,r2
   82994:	00bfffc4 	movi	r2,-1
   82998:	18807a26 	beq	r3,r2,82b84 <_malloc_r+0x674>
   8299c:	1d05c83a 	sub	r2,r3,r20
   829a0:	9885883a 	add	r2,r19,r2
   829a4:	10c00054 	ori	r3,r2,1
   829a8:	b8800017 	ldw	r2,0(r23)
   829ac:	a021883a 	mov	r16,r20
   829b0:	a0c00115 	stw	r3,4(r20)
   829b4:	9885883a 	add	r2,r19,r2
   829b8:	b8800015 	stw	r2,0(r23)
   829bc:	e5000215 	stw	r20,8(fp)
   829c0:	b7003626 	beq	r22,fp,82a9c <_malloc_r+0x58c>
   829c4:	018003c4 	movi	r6,15
   829c8:	35404b36 	bltu	r6,r21,82af8 <_malloc_r+0x5e8>
   829cc:	00800044 	movi	r2,1
   829d0:	a0800115 	stw	r2,4(r20)
   829d4:	003fcd06 	br	8290c <_malloc_r+0x3fc>
   829d8:	2808d27a 	srli	r4,r5,9
   829dc:	2000371e 	bne	r4,zero,82abc <_malloc_r+0x5ac>
   829e0:	2808d0fa 	srli	r4,r5,3
   829e4:	200690fa 	slli	r3,r4,3
   829e8:	1ad1883a 	add	r8,r3,r11
   829ec:	41800217 	ldw	r6,8(r8)
   829f0:	41805b26 	beq	r8,r6,82b60 <_malloc_r+0x650>
   829f4:	30800117 	ldw	r2,4(r6)
   829f8:	00ffff04 	movi	r3,-4
   829fc:	10c4703a 	and	r2,r2,r3
   82a00:	2880022e 	bgeu	r5,r2,82a0c <_malloc_r+0x4fc>
   82a04:	31800217 	ldw	r6,8(r6)
   82a08:	41bffa1e 	bne	r8,r6,829f4 <_malloc_r+0x4e4>
   82a0c:	32000317 	ldw	r8,12(r6)
   82a10:	39c00117 	ldw	r7,4(r7)
   82a14:	82000315 	stw	r8,12(r16)
   82a18:	81800215 	stw	r6,8(r16)
   82a1c:	07000274 	movhi	fp,9
   82a20:	e739d204 	addi	fp,fp,-6328
   82a24:	34000315 	stw	r16,12(r6)
   82a28:	44000215 	stw	r16,8(r8)
   82a2c:	003f3e06 	br	82728 <_malloc_r+0x218>
   82a30:	63000044 	addi	r12,r12,1
   82a34:	608000cc 	andi	r2,r12,3
   82a38:	10005d26 	beq	r2,zero,82bb0 <_malloc_r+0x6a0>
   82a3c:	18c00204 	addi	r3,r3,8
   82a40:	003f5106 	br	82788 <_malloc_r+0x278>
   82a44:	8089883a 	add	r4,r16,r2
   82a48:	003f6d06 	br	82800 <_malloc_r+0x2f0>
   82a4c:	00805504 	movi	r2,340
   82a50:	10c02036 	bltu	r2,r3,82ad4 <_malloc_r+0x5c4>
   82a54:	8804d3fa 	srli	r2,r17,15
   82a58:	11801dc4 	addi	r6,r2,119
   82a5c:	300490fa 	slli	r2,r6,3
   82a60:	003ed806 	br	825c4 <_malloc_r+0xb4>
   82a64:	48c000c4 	addi	r3,r9,3
   82a68:	003f3106 	br	82730 <_malloc_r+0x220>
   82a6c:	05c00274 	movhi	r23,9
   82a70:	bdc71a04 	addi	r23,r23,7272
   82a74:	b8800017 	ldw	r2,0(r23)
   82a78:	988d883a 	add	r6,r19,r2
   82a7c:	b9800015 	stw	r6,0(r23)
   82a80:	293fb21e 	bne	r5,r4,8294c <_malloc_r+0x43c>
   82a84:	2083ffcc 	andi	r2,r4,4095
   82a88:	103fb01e 	bne	r2,zero,8294c <_malloc_r+0x43c>
   82a8c:	e4000217 	ldw	r16,8(fp)
   82a90:	9d45883a 	add	r2,r19,r21
   82a94:	10800054 	ori	r2,r2,1
   82a98:	80800115 	stw	r2,4(r16)
   82a9c:	b8c00017 	ldw	r3,0(r23)
   82aa0:	d0a6b117 	ldw	r2,-25916(gp)
   82aa4:	10c0012e 	bgeu	r2,r3,82aac <_malloc_r+0x59c>
   82aa8:	d0e6b115 	stw	r3,-25916(gp)
   82aac:	d0a6b217 	ldw	r2,-25912(gp)
   82ab0:	10ff962e 	bgeu	r2,r3,8290c <_malloc_r+0x3fc>
   82ab4:	d0e6b215 	stw	r3,-25912(gp)
   82ab8:	003f9406 	br	8290c <_malloc_r+0x3fc>
   82abc:	00800104 	movi	r2,4
   82ac0:	11001e36 	bltu	r2,r4,82b3c <_malloc_r+0x62c>
   82ac4:	2804d1ba 	srli	r2,r5,6
   82ac8:	11000e04 	addi	r4,r2,56
   82acc:	200690fa 	slli	r3,r4,3
   82ad0:	003fc506 	br	829e8 <_malloc_r+0x4d8>
   82ad4:	00815504 	movi	r2,1364
   82ad8:	10c01d2e 	bgeu	r2,r3,82b50 <_malloc_r+0x640>
   82adc:	01801f84 	movi	r6,126
   82ae0:	0080fc04 	movi	r2,1008
   82ae4:	003eb706 	br	825c4 <_malloc_r+0xb4>
   82ae8:	00800204 	movi	r2,8
   82aec:	10cbc83a 	sub	r5,r2,r3
   82af0:	2169883a 	add	r20,r4,r5
   82af4:	003f9e06 	br	82970 <_malloc_r+0x460>
   82af8:	00bffe04 	movi	r2,-8
   82afc:	a93ffd04 	addi	r4,r21,-12
   82b00:	2088703a 	and	r4,r4,r2
   82b04:	b10b883a 	add	r5,r22,r4
   82b08:	00c00144 	movi	r3,5
   82b0c:	28c00215 	stw	r3,8(r5)
   82b10:	28c00115 	stw	r3,4(r5)
   82b14:	b0800117 	ldw	r2,4(r22)
   82b18:	1080004c 	andi	r2,r2,1
   82b1c:	2084b03a 	or	r2,r4,r2
   82b20:	b0800115 	stw	r2,4(r22)
   82b24:	313fdd2e 	bgeu	r6,r4,82a9c <_malloc_r+0x58c>
   82b28:	b1400204 	addi	r5,r22,8
   82b2c:	9009883a 	mov	r4,r18
   82b30:	0086ddc0 	call	86ddc <_free_r>
   82b34:	e4000217 	ldw	r16,8(fp)
   82b38:	003fd806 	br	82a9c <_malloc_r+0x58c>
   82b3c:	00800504 	movi	r2,20
   82b40:	11001536 	bltu	r2,r4,82b98 <_malloc_r+0x688>
   82b44:	210016c4 	addi	r4,r4,91
   82b48:	200690fa 	slli	r3,r4,3
   82b4c:	003fa606 	br	829e8 <_malloc_r+0x4d8>
   82b50:	8804d4ba 	srli	r2,r17,18
   82b54:	11801f04 	addi	r6,r2,124
   82b58:	300490fa 	slli	r2,r6,3
   82b5c:	003e9906 	br	825c4 <_malloc_r+0xb4>
   82b60:	2009d0ba 	srai	r4,r4,2
   82b64:	01400274 	movhi	r5,9
   82b68:	2979d204 	addi	r5,r5,-6328
   82b6c:	00c00044 	movi	r3,1
   82b70:	28800117 	ldw	r2,4(r5)
   82b74:	1906983a 	sll	r3,r3,r4
   82b78:	10c4b03a 	or	r2,r2,r3
   82b7c:	28800115 	stw	r2,4(r5)
   82b80:	003fa306 	br	82a10 <_malloc_r+0x500>
   82b84:	0027883a 	mov	r19,zero
   82b88:	00c00044 	movi	r3,1
   82b8c:	003f8606 	br	829a8 <_malloc_r+0x498>
   82b90:	d1200115 	stw	r4,-32764(gp)
   82b94:	003f7306 	br	82964 <_malloc_r+0x454>
   82b98:	00801504 	movi	r2,84
   82b9c:	11001936 	bltu	r2,r4,82c04 <_malloc_r+0x6f4>
   82ba0:	2804d33a 	srli	r2,r5,12
   82ba4:	11001b84 	addi	r4,r2,110
   82ba8:	200690fa 	slli	r3,r4,3
   82bac:	003f8e06 	br	829e8 <_malloc_r+0x4d8>
   82bb0:	480b883a 	mov	r5,r9
   82bb4:	6807883a 	mov	r3,r13
   82bb8:	288000cc 	andi	r2,r5,3
   82bbc:	18fffe04 	addi	r3,r3,-8
   82bc0:	297fffc4 	addi	r5,r5,-1
   82bc4:	10001526 	beq	r2,zero,82c1c <_malloc_r+0x70c>
   82bc8:	18800217 	ldw	r2,8(r3)
   82bcc:	10fffa26 	beq	r2,r3,82bb8 <_malloc_r+0x6a8>
   82bd0:	2109883a 	add	r4,r4,r4
   82bd4:	393f1e36 	bltu	r7,r4,82850 <_malloc_r+0x340>
   82bd8:	203f1d26 	beq	r4,zero,82850 <_malloc_r+0x340>
   82bdc:	21c4703a 	and	r2,r4,r7
   82be0:	10000226 	beq	r2,zero,82bec <_malloc_r+0x6dc>
   82be4:	6013883a 	mov	r9,r12
   82be8:	003ee106 	br	82770 <_malloc_r+0x260>
   82bec:	2109883a 	add	r4,r4,r4
   82bf0:	3904703a 	and	r2,r7,r4
   82bf4:	63000104 	addi	r12,r12,4
   82bf8:	103ffc26 	beq	r2,zero,82bec <_malloc_r+0x6dc>
   82bfc:	6013883a 	mov	r9,r12
   82c00:	003edb06 	br	82770 <_malloc_r+0x260>
   82c04:	00805504 	movi	r2,340
   82c08:	11000836 	bltu	r2,r4,82c2c <_malloc_r+0x71c>
   82c0c:	2804d3fa 	srli	r2,r5,15
   82c10:	11001dc4 	addi	r4,r2,119
   82c14:	200690fa 	slli	r3,r4,3
   82c18:	003f7306 	br	829e8 <_malloc_r+0x4d8>
   82c1c:	0104303a 	nor	r2,zero,r4
   82c20:	388e703a 	and	r7,r7,r2
   82c24:	e1c00115 	stw	r7,4(fp)
   82c28:	003fe906 	br	82bd0 <_malloc_r+0x6c0>
   82c2c:	00815504 	movi	r2,1364
   82c30:	1100032e 	bgeu	r2,r4,82c40 <_malloc_r+0x730>
   82c34:	01001f84 	movi	r4,126
   82c38:	00c0fc04 	movi	r3,1008
   82c3c:	003f6a06 	br	829e8 <_malloc_r+0x4d8>
   82c40:	2804d4ba 	srli	r2,r5,18
   82c44:	11001f04 	addi	r4,r2,124
   82c48:	200690fa 	slli	r3,r4,3
   82c4c:	003f6606 	br	829e8 <_malloc_r+0x4d8>

00082c50 <printf>:
   82c50:	defffb04 	addi	sp,sp,-20
   82c54:	dfc00115 	stw	ra,4(sp)
   82c58:	d9400215 	stw	r5,8(sp)
   82c5c:	d9800315 	stw	r6,12(sp)
   82c60:	d9c00415 	stw	r7,16(sp)
   82c64:	00800274 	movhi	r2,9
   82c68:	10805f04 	addi	r2,r2,380
   82c6c:	10c00017 	ldw	r3,0(r2)
   82c70:	200b883a 	mov	r5,r4
   82c74:	d8800204 	addi	r2,sp,8
   82c78:	19000217 	ldw	r4,8(r3)
   82c7c:	100d883a 	mov	r6,r2
   82c80:	d8800015 	stw	r2,0(sp)
   82c84:	0084e340 	call	84e34 <__vfprintf_internal>
   82c88:	dfc00117 	ldw	ra,4(sp)
   82c8c:	dec00504 	addi	sp,sp,20
   82c90:	f800283a 	ret

00082c94 <_printf_r>:
   82c94:	defffc04 	addi	sp,sp,-16
   82c98:	dfc00115 	stw	ra,4(sp)
   82c9c:	d9800215 	stw	r6,8(sp)
   82ca0:	d9c00315 	stw	r7,12(sp)
   82ca4:	280d883a 	mov	r6,r5
   82ca8:	21400217 	ldw	r5,8(r4)
   82cac:	d8c00204 	addi	r3,sp,8
   82cb0:	180f883a 	mov	r7,r3
   82cb4:	d8c00015 	stw	r3,0(sp)
   82cb8:	0082f700 	call	82f70 <___vfprintf_internal_r>
   82cbc:	dfc00117 	ldw	ra,4(sp)
   82cc0:	dec00404 	addi	sp,sp,16
   82cc4:	f800283a 	ret

00082cc8 <putchar>:
   82cc8:	00800274 	movhi	r2,9
   82ccc:	10805f04 	addi	r2,r2,380
   82cd0:	11800017 	ldw	r6,0(r2)
   82cd4:	200b883a 	mov	r5,r4
   82cd8:	3009883a 	mov	r4,r6
   82cdc:	31800217 	ldw	r6,8(r6)
   82ce0:	0088df01 	jmpi	88df0 <_putc_r>

00082ce4 <_putchar_r>:
   82ce4:	21800217 	ldw	r6,8(r4)
   82ce8:	0088df01 	jmpi	88df0 <_putc_r>

00082cec <_puts_r>:
   82cec:	defff604 	addi	sp,sp,-40
   82cf0:	dc400715 	stw	r17,28(sp)
   82cf4:	2023883a 	mov	r17,r4
   82cf8:	2809883a 	mov	r4,r5
   82cfc:	dfc00915 	stw	ra,36(sp)
   82d00:	dcc00815 	stw	r19,32(sp)
   82d04:	2827883a 	mov	r19,r5
   82d08:	0082ea40 	call	82ea4 <strlen>
   82d0c:	89400217 	ldw	r5,8(r17)
   82d10:	00c00274 	movhi	r3,9
   82d14:	18f93f04 	addi	r3,r3,-6916
   82d18:	01c00044 	movi	r7,1
   82d1c:	12000044 	addi	r8,r2,1
   82d20:	d8c00515 	stw	r3,20(sp)
   82d24:	d9c00615 	stw	r7,24(sp)
   82d28:	d8c00304 	addi	r3,sp,12
   82d2c:	01c00084 	movi	r7,2
   82d30:	8809883a 	mov	r4,r17
   82d34:	d80d883a 	mov	r6,sp
   82d38:	d8c00015 	stw	r3,0(sp)
   82d3c:	dcc00315 	stw	r19,12(sp)
   82d40:	da000215 	stw	r8,8(sp)
   82d44:	d9c00115 	stw	r7,4(sp)
   82d48:	d8800415 	stw	r2,16(sp)
   82d4c:	00870f00 	call	870f0 <__sfvwrite_r>
   82d50:	00ffffc4 	movi	r3,-1
   82d54:	10000626 	beq	r2,zero,82d70 <_puts_r+0x84>
   82d58:	1805883a 	mov	r2,r3
   82d5c:	dfc00917 	ldw	ra,36(sp)
   82d60:	dcc00817 	ldw	r19,32(sp)
   82d64:	dc400717 	ldw	r17,28(sp)
   82d68:	dec00a04 	addi	sp,sp,40
   82d6c:	f800283a 	ret
   82d70:	00c00284 	movi	r3,10
   82d74:	1805883a 	mov	r2,r3
   82d78:	dfc00917 	ldw	ra,36(sp)
   82d7c:	dcc00817 	ldw	r19,32(sp)
   82d80:	dc400717 	ldw	r17,28(sp)
   82d84:	dec00a04 	addi	sp,sp,40
   82d88:	f800283a 	ret

00082d8c <puts>:
   82d8c:	00800274 	movhi	r2,9
   82d90:	10805f04 	addi	r2,r2,380
   82d94:	200b883a 	mov	r5,r4
   82d98:	11000017 	ldw	r4,0(r2)
   82d9c:	0082cec1 	jmpi	82cec <_puts_r>

00082da0 <srand>:
   82da0:	00800274 	movhi	r2,9
   82da4:	10805f04 	addi	r2,r2,380
   82da8:	11400017 	ldw	r5,0(r2)
   82dac:	0007883a 	mov	r3,zero
   82db0:	28c02a15 	stw	r3,168(r5)
   82db4:	29002915 	stw	r4,164(r5)
   82db8:	f800283a 	ret

00082dbc <rand>:
   82dbc:	defffe04 	addi	sp,sp,-8
   82dc0:	00800274 	movhi	r2,9
   82dc4:	10805f04 	addi	r2,r2,380
   82dc8:	dc000015 	stw	r16,0(sp)
   82dcc:	14000017 	ldw	r16,0(r2)
   82dd0:	dfc00115 	stw	ra,4(sp)
   82dd4:	00932574 	movhi	r2,19605
   82dd8:	109fcb44 	addi	r2,r2,32557
   82ddc:	82002917 	ldw	r8,164(r16)
   82de0:	82402a17 	ldw	r9,168(r16)
   82de4:	00d614b4 	movhi	r3,22610
   82de8:	18fd0b44 	addi	r3,r3,-3027
   82dec:	4009883a 	mov	r4,r8
   82df0:	180f883a 	mov	r7,r3
   82df4:	100d883a 	mov	r6,r2
   82df8:	480b883a 	mov	r5,r9
   82dfc:	0081ec00 	call	81ec0 <__muldi3>
   82e00:	02000044 	movi	r8,1
   82e04:	1209883a 	add	r4,r2,r8
   82e08:	2095803a 	cmpltu	r10,r4,r2
   82e0c:	50d5883a 	add	r10,r10,r3
   82e10:	81002915 	stw	r4,164(r16)
   82e14:	01200034 	movhi	r4,32768
   82e18:	213fffc4 	addi	r4,r4,-1
   82e1c:	2284703a 	and	r2,r4,r10
   82e20:	82802a15 	stw	r10,168(r16)
   82e24:	dfc00117 	ldw	ra,4(sp)
   82e28:	dc000017 	ldw	r16,0(sp)
   82e2c:	dec00204 	addi	sp,sp,8
   82e30:	f800283a 	ret

00082e34 <_sbrk_r>:
   82e34:	defffd04 	addi	sp,sp,-12
   82e38:	dc000015 	stw	r16,0(sp)
   82e3c:	04000274 	movhi	r16,9
   82e40:	84071004 	addi	r16,r16,7232
   82e44:	dc400115 	stw	r17,4(sp)
   82e48:	80000015 	stw	zero,0(r16)
   82e4c:	2023883a 	mov	r17,r4
   82e50:	2809883a 	mov	r4,r5
   82e54:	dfc00215 	stw	ra,8(sp)
   82e58:	008b9d40 	call	8b9d4 <sbrk>
   82e5c:	1007883a 	mov	r3,r2
   82e60:	00bfffc4 	movi	r2,-1
   82e64:	18800626 	beq	r3,r2,82e80 <_sbrk_r+0x4c>
   82e68:	1805883a 	mov	r2,r3
   82e6c:	dfc00217 	ldw	ra,8(sp)
   82e70:	dc400117 	ldw	r17,4(sp)
   82e74:	dc000017 	ldw	r16,0(sp)
   82e78:	dec00304 	addi	sp,sp,12
   82e7c:	f800283a 	ret
   82e80:	80800017 	ldw	r2,0(r16)
   82e84:	103ff826 	beq	r2,zero,82e68 <_sbrk_r+0x34>
   82e88:	88800015 	stw	r2,0(r17)
   82e8c:	1805883a 	mov	r2,r3
   82e90:	dfc00217 	ldw	ra,8(sp)
   82e94:	dc400117 	ldw	r17,4(sp)
   82e98:	dc000017 	ldw	r16,0(sp)
   82e9c:	dec00304 	addi	sp,sp,12
   82ea0:	f800283a 	ret

00082ea4 <strlen>:
   82ea4:	208000cc 	andi	r2,r4,3
   82ea8:	2011883a 	mov	r8,r4
   82eac:	1000161e 	bne	r2,zero,82f08 <strlen+0x64>
   82eb0:	20c00017 	ldw	r3,0(r4)
   82eb4:	017fbff4 	movhi	r5,65279
   82eb8:	297fbfc4 	addi	r5,r5,-257
   82ebc:	01e02074 	movhi	r7,32897
   82ec0:	39e02004 	addi	r7,r7,-32640
   82ec4:	1945883a 	add	r2,r3,r5
   82ec8:	11c4703a 	and	r2,r2,r7
   82ecc:	00c6303a 	nor	r3,zero,r3
   82ed0:	1886703a 	and	r3,r3,r2
   82ed4:	18000c1e 	bne	r3,zero,82f08 <strlen+0x64>
   82ed8:	280d883a 	mov	r6,r5
   82edc:	380b883a 	mov	r5,r7
   82ee0:	21000104 	addi	r4,r4,4
   82ee4:	20800017 	ldw	r2,0(r4)
   82ee8:	1187883a 	add	r3,r2,r6
   82eec:	1946703a 	and	r3,r3,r5
   82ef0:	0084303a 	nor	r2,zero,r2
   82ef4:	10c4703a 	and	r2,r2,r3
   82ef8:	103ff926 	beq	r2,zero,82ee0 <strlen+0x3c>
   82efc:	20800007 	ldb	r2,0(r4)
   82f00:	10000326 	beq	r2,zero,82f10 <strlen+0x6c>
   82f04:	21000044 	addi	r4,r4,1
   82f08:	20800007 	ldb	r2,0(r4)
   82f0c:	103ffd1e 	bne	r2,zero,82f04 <strlen+0x60>
   82f10:	2205c83a 	sub	r2,r4,r8
   82f14:	f800283a 	ret

00082f18 <__sprint_r>:
   82f18:	30800217 	ldw	r2,8(r6)
   82f1c:	defffe04 	addi	sp,sp,-8
   82f20:	dc000015 	stw	r16,0(sp)
   82f24:	dfc00115 	stw	ra,4(sp)
   82f28:	3021883a 	mov	r16,r6
   82f2c:	0007883a 	mov	r3,zero
   82f30:	1000061e 	bne	r2,zero,82f4c <__sprint_r+0x34>
   82f34:	1805883a 	mov	r2,r3
   82f38:	30000115 	stw	zero,4(r6)
   82f3c:	dfc00117 	ldw	ra,4(sp)
   82f40:	dc000017 	ldw	r16,0(sp)
   82f44:	dec00204 	addi	sp,sp,8
   82f48:	f800283a 	ret
   82f4c:	00870f00 	call	870f0 <__sfvwrite_r>
   82f50:	1007883a 	mov	r3,r2
   82f54:	1805883a 	mov	r2,r3
   82f58:	80000115 	stw	zero,4(r16)
   82f5c:	80000215 	stw	zero,8(r16)
   82f60:	dfc00117 	ldw	ra,4(sp)
   82f64:	dc000017 	ldw	r16,0(sp)
   82f68:	dec00204 	addi	sp,sp,8
   82f6c:	f800283a 	ret

00082f70 <___vfprintf_internal_r>:
   82f70:	defea404 	addi	sp,sp,-1392
   82f74:	dd815815 	stw	r22,1376(sp)
   82f78:	dc015215 	stw	r16,1352(sp)
   82f7c:	d9c15115 	stw	r7,1348(sp)
   82f80:	dfc15b15 	stw	ra,1388(sp)
   82f84:	df015a15 	stw	fp,1384(sp)
   82f88:	ddc15915 	stw	r23,1380(sp)
   82f8c:	dd415715 	stw	r21,1372(sp)
   82f90:	dd015615 	stw	r20,1368(sp)
   82f94:	dcc15515 	stw	r19,1364(sp)
   82f98:	dc815415 	stw	r18,1360(sp)
   82f9c:	dc415315 	stw	r17,1356(sp)
   82fa0:	282d883a 	mov	r22,r5
   82fa4:	3021883a 	mov	r16,r6
   82fa8:	d9014f15 	stw	r4,1340(sp)
   82fac:	00877140 	call	87714 <_localeconv_r>
   82fb0:	10800017 	ldw	r2,0(r2)
   82fb4:	d9c15117 	ldw	r7,1348(sp)
   82fb8:	d8814915 	stw	r2,1316(sp)
   82fbc:	d8814f17 	ldw	r2,1340(sp)
   82fc0:	10000226 	beq	r2,zero,82fcc <___vfprintf_internal_r+0x5c>
   82fc4:	10800e17 	ldw	r2,56(r2)
   82fc8:	10020d26 	beq	r2,zero,83800 <___vfprintf_internal_r+0x890>
   82fcc:	b080030b 	ldhu	r2,12(r22)
   82fd0:	1080020c 	andi	r2,r2,8
   82fd4:	10020e26 	beq	r2,zero,83810 <___vfprintf_internal_r+0x8a0>
   82fd8:	b0800417 	ldw	r2,16(r22)
   82fdc:	10020c26 	beq	r2,zero,83810 <___vfprintf_internal_r+0x8a0>
   82fe0:	b200030b 	ldhu	r8,12(r22)
   82fe4:	00800284 	movi	r2,10
   82fe8:	40c0068c 	andi	r3,r8,26
   82fec:	18802f1e 	bne	r3,r2,830ac <___vfprintf_internal_r+0x13c>
   82ff0:	b080038f 	ldh	r2,14(r22)
   82ff4:	10002d16 	blt	r2,zero,830ac <___vfprintf_internal_r+0x13c>
   82ff8:	b240038b 	ldhu	r9,14(r22)
   82ffc:	b2800717 	ldw	r10,28(r22)
   83000:	b2c00917 	ldw	r11,36(r22)
   83004:	d9014f17 	ldw	r4,1340(sp)
   83008:	dc402904 	addi	r17,sp,164
   8300c:	d8804004 	addi	r2,sp,256
   83010:	00c10004 	movi	r3,1024
   83014:	423fff4c 	andi	r8,r8,65533
   83018:	800d883a 	mov	r6,r16
   8301c:	880b883a 	mov	r5,r17
   83020:	da002c0d 	sth	r8,176(sp)
   83024:	da402c8d 	sth	r9,178(sp)
   83028:	da803015 	stw	r10,192(sp)
   8302c:	dac03215 	stw	r11,200(sp)
   83030:	d8802d15 	stw	r2,180(sp)
   83034:	d8c02e15 	stw	r3,184(sp)
   83038:	d8802915 	stw	r2,164(sp)
   8303c:	d8c02b15 	stw	r3,172(sp)
   83040:	d8002f15 	stw	zero,188(sp)
   83044:	0082f700 	call	82f70 <___vfprintf_internal_r>
   83048:	d8814b15 	stw	r2,1324(sp)
   8304c:	10000416 	blt	r2,zero,83060 <___vfprintf_internal_r+0xf0>
   83050:	d9014f17 	ldw	r4,1340(sp)
   83054:	880b883a 	mov	r5,r17
   83058:	008678c0 	call	8678c <_fflush_r>
   8305c:	1002321e 	bne	r2,zero,83928 <___vfprintf_internal_r+0x9b8>
   83060:	d8802c0b 	ldhu	r2,176(sp)
   83064:	1080100c 	andi	r2,r2,64
   83068:	10000326 	beq	r2,zero,83078 <___vfprintf_internal_r+0x108>
   8306c:	b080030b 	ldhu	r2,12(r22)
   83070:	10801014 	ori	r2,r2,64
   83074:	b080030d 	sth	r2,12(r22)
   83078:	d8814b17 	ldw	r2,1324(sp)
   8307c:	dfc15b17 	ldw	ra,1388(sp)
   83080:	df015a17 	ldw	fp,1384(sp)
   83084:	ddc15917 	ldw	r23,1380(sp)
   83088:	dd815817 	ldw	r22,1376(sp)
   8308c:	dd415717 	ldw	r21,1372(sp)
   83090:	dd015617 	ldw	r20,1368(sp)
   83094:	dcc15517 	ldw	r19,1364(sp)
   83098:	dc815417 	ldw	r18,1360(sp)
   8309c:	dc415317 	ldw	r17,1356(sp)
   830a0:	dc015217 	ldw	r16,1352(sp)
   830a4:	dec15c04 	addi	sp,sp,1392
   830a8:	f800283a 	ret
   830ac:	0005883a 	mov	r2,zero
   830b0:	0007883a 	mov	r3,zero
   830b4:	dd401904 	addi	r21,sp,100
   830b8:	d8814215 	stw	r2,1288(sp)
   830bc:	802f883a 	mov	r23,r16
   830c0:	d8c14315 	stw	r3,1292(sp)
   830c4:	d8014b15 	stw	zero,1324(sp)
   830c8:	d8014815 	stw	zero,1312(sp)
   830cc:	d8014415 	stw	zero,1296(sp)
   830d0:	d8014715 	stw	zero,1308(sp)
   830d4:	dd400c15 	stw	r21,48(sp)
   830d8:	d8000e15 	stw	zero,56(sp)
   830dc:	d8000d15 	stw	zero,52(sp)
   830e0:	b8800007 	ldb	r2,0(r23)
   830e4:	10001926 	beq	r2,zero,8314c <___vfprintf_internal_r+0x1dc>
   830e8:	00c00944 	movi	r3,37
   830ec:	10c01726 	beq	r2,r3,8314c <___vfprintf_internal_r+0x1dc>
   830f0:	b821883a 	mov	r16,r23
   830f4:	00000106 	br	830fc <___vfprintf_internal_r+0x18c>
   830f8:	10c00326 	beq	r2,r3,83108 <___vfprintf_internal_r+0x198>
   830fc:	84000044 	addi	r16,r16,1
   83100:	80800007 	ldb	r2,0(r16)
   83104:	103ffc1e 	bne	r2,zero,830f8 <___vfprintf_internal_r+0x188>
   83108:	85e7c83a 	sub	r19,r16,r23
   8310c:	98000e26 	beq	r19,zero,83148 <___vfprintf_internal_r+0x1d8>
   83110:	dc800e17 	ldw	r18,56(sp)
   83114:	dc400d17 	ldw	r17,52(sp)
   83118:	008001c4 	movi	r2,7
   8311c:	94e5883a 	add	r18,r18,r19
   83120:	8c400044 	addi	r17,r17,1
   83124:	adc00015 	stw	r23,0(r21)
   83128:	dc800e15 	stw	r18,56(sp)
   8312c:	acc00115 	stw	r19,4(r21)
   83130:	dc400d15 	stw	r17,52(sp)
   83134:	14428b16 	blt	r2,r17,83b64 <___vfprintf_internal_r+0xbf4>
   83138:	ad400204 	addi	r21,r21,8
   8313c:	d9014b17 	ldw	r4,1324(sp)
   83140:	24c9883a 	add	r4,r4,r19
   83144:	d9014b15 	stw	r4,1324(sp)
   83148:	802f883a 	mov	r23,r16
   8314c:	b8800007 	ldb	r2,0(r23)
   83150:	10013c26 	beq	r2,zero,83644 <___vfprintf_internal_r+0x6d4>
   83154:	bdc00044 	addi	r23,r23,1
   83158:	d8000405 	stb	zero,16(sp)
   8315c:	b8c00007 	ldb	r3,0(r23)
   83160:	04ffffc4 	movi	r19,-1
   83164:	d8014c15 	stw	zero,1328(sp)
   83168:	d8014a15 	stw	zero,1320(sp)
   8316c:	d8c14d15 	stw	r3,1332(sp)
   83170:	bdc00044 	addi	r23,r23,1
   83174:	d9414d17 	ldw	r5,1332(sp)
   83178:	00801604 	movi	r2,88
   8317c:	28fff804 	addi	r3,r5,-32
   83180:	10c06036 	bltu	r2,r3,83304 <___vfprintf_internal_r+0x394>
   83184:	18c5883a 	add	r2,r3,r3
   83188:	1085883a 	add	r2,r2,r2
   8318c:	00c00234 	movhi	r3,8
   83190:	18cc6804 	addi	r3,r3,12704
   83194:	10c5883a 	add	r2,r2,r3
   83198:	11000017 	ldw	r4,0(r2)
   8319c:	2000683a 	jmp	r4
   831a0:	00084114 	movui	zero,8452
   831a4:	00083304 	movi	zero,8396
   831a8:	00083304 	movi	zero,8396
   831ac:	00084100 	call	8410 <__alt_mem_sram_0-0x77bf0>
   831b0:	00083304 	movi	zero,8396
   831b4:	00083304 	movi	zero,8396
   831b8:	00083304 	movi	zero,8396
   831bc:	00083304 	movi	zero,8396
   831c0:	00083304 	movi	zero,8396
   831c4:	00083304 	movi	zero,8396
   831c8:	00083ee0 	cmpeqi	zero,zero,8443
   831cc:	000840f0 	cmpltui	zero,zero,8451
   831d0:	00083304 	movi	zero,8396
   831d4:	00083ef8 	rdprs	zero,zero,8443
   831d8:	00084198 	cmpnei	zero,zero,8454
   831dc:	00083304 	movi	zero,8396
   831e0:	00084184 	movi	zero,8454
   831e4:	00084140 	call	8414 <__alt_mem_sram_0-0x77bec>
   831e8:	00084140 	call	8414 <__alt_mem_sram_0-0x77bec>
   831ec:	00084140 	call	8414 <__alt_mem_sram_0-0x77bec>
   831f0:	00084140 	call	8414 <__alt_mem_sram_0-0x77bec>
   831f4:	00084140 	call	8414 <__alt_mem_sram_0-0x77bec>
   831f8:	00084140 	call	8414 <__alt_mem_sram_0-0x77bec>
   831fc:	00084140 	call	8414 <__alt_mem_sram_0-0x77bec>
   83200:	00084140 	call	8414 <__alt_mem_sram_0-0x77bec>
   83204:	00084140 	call	8414 <__alt_mem_sram_0-0x77bec>
   83208:	00083304 	movi	zero,8396
   8320c:	00083304 	movi	zero,8396
   83210:	00083304 	movi	zero,8396
   83214:	00083304 	movi	zero,8396
   83218:	00083304 	movi	zero,8396
   8321c:	00083304 	movi	zero,8396
   83220:	00083304 	movi	zero,8396
   83224:	00083304 	movi	zero,8396
   83228:	00083304 	movi	zero,8396
   8322c:	00083304 	movi	zero,8396
   83230:	0008395c 	xori	zero,zero,8421
   83234:	00083fc8 	cmpgei	zero,zero,8447
   83238:	00083304 	movi	zero,8396
   8323c:	00083fc8 	cmpgei	zero,zero,8447
   83240:	00083304 	movi	zero,8396
   83244:	00083304 	movi	zero,8396
   83248:	00083304 	movi	zero,8396
   8324c:	00083304 	movi	zero,8396
   83250:	0008412c 	andhi	zero,zero,8452
   83254:	00083304 	movi	zero,8396
   83258:	00083304 	movi	zero,8396
   8325c:	00083a10 	cmplti	zero,zero,8424
   83260:	00083304 	movi	zero,8396
   83264:	00083304 	movi	zero,8396
   83268:	00083304 	movi	zero,8396
   8326c:	00083304 	movi	zero,8396
   83270:	00083304 	movi	zero,8396
   83274:	00083a5c 	xori	zero,zero,8425
   83278:	00083304 	movi	zero,8396
   8327c:	00083304 	movi	zero,8396
   83280:	0008407c 	xorhi	zero,zero,8449
   83284:	00083304 	movi	zero,8396
   83288:	00083304 	movi	zero,8396
   8328c:	00083304 	movi	zero,8396
   83290:	00083304 	movi	zero,8396
   83294:	00083304 	movi	zero,8396
   83298:	00083304 	movi	zero,8396
   8329c:	00083304 	movi	zero,8396
   832a0:	00083304 	movi	zero,8396
   832a4:	00083304 	movi	zero,8396
   832a8:	00083304 	movi	zero,8396
   832ac:	00084050 	cmplti	zero,zero,8449
   832b0:	00083968 	cmpgeui	zero,zero,8421
   832b4:	00083fc8 	cmpgei	zero,zero,8447
   832b8:	00083fc8 	cmpgei	zero,zero,8447
   832bc:	00083fc8 	cmpgei	zero,zero,8447
   832c0:	00083fb4 	movhi	zero,8446
   832c4:	00083968 	cmpgeui	zero,zero,8421
   832c8:	00083304 	movi	zero,8396
   832cc:	00083304 	movi	zero,8396
   832d0:	00083f3c 	xorhi	zero,zero,8444
   832d4:	00083304 	movi	zero,8396
   832d8:	00083f0c 	andi	zero,zero,8444
   832dc:	00083a1c 	xori	zero,zero,8424
   832e0:	00083f6c 	andhi	zero,zero,8445
   832e4:	00083f58 	cmpnei	zero,zero,8445
   832e8:	00083304 	movi	zero,8396
   832ec:	00084200 	call	8420 <__alt_mem_sram_0-0x77be0>
   832f0:	00083304 	movi	zero,8396
   832f4:	00083a68 	cmpgeui	zero,zero,8425
   832f8:	00083304 	movi	zero,8396
   832fc:	00083304 	movi	zero,8396
   83300:	000840e0 	cmpeqi	zero,zero,8451
   83304:	d9014d17 	ldw	r4,1332(sp)
   83308:	2000ce26 	beq	r4,zero,83644 <___vfprintf_internal_r+0x6d4>
   8330c:	01400044 	movi	r5,1
   83310:	d9800f04 	addi	r6,sp,60
   83314:	d9c14015 	stw	r7,1280(sp)
   83318:	d9414515 	stw	r5,1300(sp)
   8331c:	d9814115 	stw	r6,1284(sp)
   83320:	280f883a 	mov	r7,r5
   83324:	d9000f05 	stb	r4,60(sp)
   83328:	d8000405 	stb	zero,16(sp)
   8332c:	d8014615 	stw	zero,1304(sp)
   83330:	d8c14c17 	ldw	r3,1328(sp)
   83334:	1880008c 	andi	r2,r3,2
   83338:	1005003a 	cmpeq	r2,r2,zero
   8333c:	d8815015 	stw	r2,1344(sp)
   83340:	1000031e 	bne	r2,zero,83350 <___vfprintf_internal_r+0x3e0>
   83344:	d9014517 	ldw	r4,1300(sp)
   83348:	21000084 	addi	r4,r4,2
   8334c:	d9014515 	stw	r4,1300(sp)
   83350:	d9414c17 	ldw	r5,1328(sp)
   83354:	2940210c 	andi	r5,r5,132
   83358:	d9414e15 	stw	r5,1336(sp)
   8335c:	28002d1e 	bne	r5,zero,83414 <___vfprintf_internal_r+0x4a4>
   83360:	d9814a17 	ldw	r6,1320(sp)
   83364:	d8814517 	ldw	r2,1300(sp)
   83368:	30a1c83a 	sub	r16,r6,r2
   8336c:	0400290e 	bge	zero,r16,83414 <___vfprintf_internal_r+0x4a4>
   83370:	00800404 	movi	r2,16
   83374:	14045e0e 	bge	r2,r16,844f0 <___vfprintf_internal_r+0x1580>
   83378:	dc800e17 	ldw	r18,56(sp)
   8337c:	dc400d17 	ldw	r17,52(sp)
   83380:	1027883a 	mov	r19,r2
   83384:	07000274 	movhi	fp,9
   83388:	e7395b84 	addi	fp,fp,-6802
   8338c:	050001c4 	movi	r20,7
   83390:	00000306 	br	833a0 <___vfprintf_internal_r+0x430>
   83394:	843ffc04 	addi	r16,r16,-16
   83398:	ad400204 	addi	r21,r21,8
   8339c:	9c00130e 	bge	r19,r16,833ec <___vfprintf_internal_r+0x47c>
   833a0:	94800404 	addi	r18,r18,16
   833a4:	8c400044 	addi	r17,r17,1
   833a8:	af000015 	stw	fp,0(r21)
   833ac:	acc00115 	stw	r19,4(r21)
   833b0:	dc800e15 	stw	r18,56(sp)
   833b4:	dc400d15 	stw	r17,52(sp)
   833b8:	a47ff60e 	bge	r20,r17,83394 <___vfprintf_internal_r+0x424>
   833bc:	d9014f17 	ldw	r4,1340(sp)
   833c0:	b00b883a 	mov	r5,r22
   833c4:	d9800c04 	addi	r6,sp,48
   833c8:	d9c15115 	stw	r7,1348(sp)
   833cc:	0082f180 	call	82f18 <__sprint_r>
   833d0:	d9c15117 	ldw	r7,1348(sp)
   833d4:	10009e1e 	bne	r2,zero,83650 <___vfprintf_internal_r+0x6e0>
   833d8:	843ffc04 	addi	r16,r16,-16
   833dc:	dc800e17 	ldw	r18,56(sp)
   833e0:	dc400d17 	ldw	r17,52(sp)
   833e4:	dd401904 	addi	r21,sp,100
   833e8:	9c3fed16 	blt	r19,r16,833a0 <___vfprintf_internal_r+0x430>
   833ec:	9425883a 	add	r18,r18,r16
   833f0:	8c400044 	addi	r17,r17,1
   833f4:	008001c4 	movi	r2,7
   833f8:	af000015 	stw	fp,0(r21)
   833fc:	ac000115 	stw	r16,4(r21)
   83400:	dc800e15 	stw	r18,56(sp)
   83404:	dc400d15 	stw	r17,52(sp)
   83408:	1441f516 	blt	r2,r17,83be0 <___vfprintf_internal_r+0xc70>
   8340c:	ad400204 	addi	r21,r21,8
   83410:	00000206 	br	8341c <___vfprintf_internal_r+0x4ac>
   83414:	dc800e17 	ldw	r18,56(sp)
   83418:	dc400d17 	ldw	r17,52(sp)
   8341c:	d8800407 	ldb	r2,16(sp)
   83420:	10000b26 	beq	r2,zero,83450 <___vfprintf_internal_r+0x4e0>
   83424:	00800044 	movi	r2,1
   83428:	94800044 	addi	r18,r18,1
   8342c:	8c400044 	addi	r17,r17,1
   83430:	a8800115 	stw	r2,4(r21)
   83434:	d8c00404 	addi	r3,sp,16
   83438:	008001c4 	movi	r2,7
   8343c:	a8c00015 	stw	r3,0(r21)
   83440:	dc800e15 	stw	r18,56(sp)
   83444:	dc400d15 	stw	r17,52(sp)
   83448:	1441da16 	blt	r2,r17,83bb4 <___vfprintf_internal_r+0xc44>
   8344c:	ad400204 	addi	r21,r21,8
   83450:	d9015017 	ldw	r4,1344(sp)
   83454:	20000b1e 	bne	r4,zero,83484 <___vfprintf_internal_r+0x514>
   83458:	d8800444 	addi	r2,sp,17
   8345c:	94800084 	addi	r18,r18,2
   83460:	8c400044 	addi	r17,r17,1
   83464:	a8800015 	stw	r2,0(r21)
   83468:	00c00084 	movi	r3,2
   8346c:	008001c4 	movi	r2,7
   83470:	a8c00115 	stw	r3,4(r21)
   83474:	dc800e15 	stw	r18,56(sp)
   83478:	dc400d15 	stw	r17,52(sp)
   8347c:	1441c216 	blt	r2,r17,83b88 <___vfprintf_internal_r+0xc18>
   83480:	ad400204 	addi	r21,r21,8
   83484:	d9414e17 	ldw	r5,1336(sp)
   83488:	00802004 	movi	r2,128
   8348c:	2880b126 	beq	r5,r2,83754 <___vfprintf_internal_r+0x7e4>
   83490:	d8c14617 	ldw	r3,1304(sp)
   83494:	19e1c83a 	sub	r16,r3,r7
   83498:	0400260e 	bge	zero,r16,83534 <___vfprintf_internal_r+0x5c4>
   8349c:	00800404 	movi	r2,16
   834a0:	1403cf0e 	bge	r2,r16,843e0 <___vfprintf_internal_r+0x1470>
   834a4:	1027883a 	mov	r19,r2
   834a8:	07000274 	movhi	fp,9
   834ac:	e7395784 	addi	fp,fp,-6818
   834b0:	050001c4 	movi	r20,7
   834b4:	00000306 	br	834c4 <___vfprintf_internal_r+0x554>
   834b8:	843ffc04 	addi	r16,r16,-16
   834bc:	ad400204 	addi	r21,r21,8
   834c0:	9c00130e 	bge	r19,r16,83510 <___vfprintf_internal_r+0x5a0>
   834c4:	94800404 	addi	r18,r18,16
   834c8:	8c400044 	addi	r17,r17,1
   834cc:	af000015 	stw	fp,0(r21)
   834d0:	acc00115 	stw	r19,4(r21)
   834d4:	dc800e15 	stw	r18,56(sp)
   834d8:	dc400d15 	stw	r17,52(sp)
   834dc:	a47ff60e 	bge	r20,r17,834b8 <___vfprintf_internal_r+0x548>
   834e0:	d9014f17 	ldw	r4,1340(sp)
   834e4:	b00b883a 	mov	r5,r22
   834e8:	d9800c04 	addi	r6,sp,48
   834ec:	d9c15115 	stw	r7,1348(sp)
   834f0:	0082f180 	call	82f18 <__sprint_r>
   834f4:	d9c15117 	ldw	r7,1348(sp)
   834f8:	1000551e 	bne	r2,zero,83650 <___vfprintf_internal_r+0x6e0>
   834fc:	843ffc04 	addi	r16,r16,-16
   83500:	dc800e17 	ldw	r18,56(sp)
   83504:	dc400d17 	ldw	r17,52(sp)
   83508:	dd401904 	addi	r21,sp,100
   8350c:	9c3fed16 	blt	r19,r16,834c4 <___vfprintf_internal_r+0x554>
   83510:	9425883a 	add	r18,r18,r16
   83514:	8c400044 	addi	r17,r17,1
   83518:	008001c4 	movi	r2,7
   8351c:	af000015 	stw	fp,0(r21)
   83520:	ac000115 	stw	r16,4(r21)
   83524:	dc800e15 	stw	r18,56(sp)
   83528:	dc400d15 	stw	r17,52(sp)
   8352c:	14418216 	blt	r2,r17,83b38 <___vfprintf_internal_r+0xbc8>
   83530:	ad400204 	addi	r21,r21,8
   83534:	d9014c17 	ldw	r4,1328(sp)
   83538:	2080400c 	andi	r2,r4,256
   8353c:	10004a1e 	bne	r2,zero,83668 <___vfprintf_internal_r+0x6f8>
   83540:	d9414117 	ldw	r5,1284(sp)
   83544:	91e5883a 	add	r18,r18,r7
   83548:	8c400044 	addi	r17,r17,1
   8354c:	008001c4 	movi	r2,7
   83550:	a9400015 	stw	r5,0(r21)
   83554:	a9c00115 	stw	r7,4(r21)
   83558:	dc800e15 	stw	r18,56(sp)
   8355c:	dc400d15 	stw	r17,52(sp)
   83560:	14416716 	blt	r2,r17,83b00 <___vfprintf_internal_r+0xb90>
   83564:	a8c00204 	addi	r3,r21,8
   83568:	d9814c17 	ldw	r6,1328(sp)
   8356c:	3080010c 	andi	r2,r6,4
   83570:	10002826 	beq	r2,zero,83614 <___vfprintf_internal_r+0x6a4>
   83574:	d8814a17 	ldw	r2,1320(sp)
   83578:	d9014517 	ldw	r4,1300(sp)
   8357c:	1121c83a 	sub	r16,r2,r4
   83580:	0400240e 	bge	zero,r16,83614 <___vfprintf_internal_r+0x6a4>
   83584:	00800404 	movi	r2,16
   83588:	1404550e 	bge	r2,r16,846e0 <___vfprintf_internal_r+0x1770>
   8358c:	dc400d17 	ldw	r17,52(sp)
   83590:	1027883a 	mov	r19,r2
   83594:	07000274 	movhi	fp,9
   83598:	e7395b84 	addi	fp,fp,-6802
   8359c:	050001c4 	movi	r20,7
   835a0:	00000306 	br	835b0 <___vfprintf_internal_r+0x640>
   835a4:	843ffc04 	addi	r16,r16,-16
   835a8:	18c00204 	addi	r3,r3,8
   835ac:	9c00110e 	bge	r19,r16,835f4 <___vfprintf_internal_r+0x684>
   835b0:	94800404 	addi	r18,r18,16
   835b4:	8c400044 	addi	r17,r17,1
   835b8:	1f000015 	stw	fp,0(r3)
   835bc:	1cc00115 	stw	r19,4(r3)
   835c0:	dc800e15 	stw	r18,56(sp)
   835c4:	dc400d15 	stw	r17,52(sp)
   835c8:	a47ff60e 	bge	r20,r17,835a4 <___vfprintf_internal_r+0x634>
   835cc:	d9014f17 	ldw	r4,1340(sp)
   835d0:	b00b883a 	mov	r5,r22
   835d4:	d9800c04 	addi	r6,sp,48
   835d8:	0082f180 	call	82f18 <__sprint_r>
   835dc:	10001c1e 	bne	r2,zero,83650 <___vfprintf_internal_r+0x6e0>
   835e0:	843ffc04 	addi	r16,r16,-16
   835e4:	dc800e17 	ldw	r18,56(sp)
   835e8:	dc400d17 	ldw	r17,52(sp)
   835ec:	d8c01904 	addi	r3,sp,100
   835f0:	9c3fef16 	blt	r19,r16,835b0 <___vfprintf_internal_r+0x640>
   835f4:	9425883a 	add	r18,r18,r16
   835f8:	8c400044 	addi	r17,r17,1
   835fc:	008001c4 	movi	r2,7
   83600:	1f000015 	stw	fp,0(r3)
   83604:	1c000115 	stw	r16,4(r3)
   83608:	dc800e15 	stw	r18,56(sp)
   8360c:	dc400d15 	stw	r17,52(sp)
   83610:	1440cb16 	blt	r2,r17,83940 <___vfprintf_internal_r+0x9d0>
   83614:	d8814a17 	ldw	r2,1320(sp)
   83618:	d9414517 	ldw	r5,1300(sp)
   8361c:	1140010e 	bge	r2,r5,83624 <___vfprintf_internal_r+0x6b4>
   83620:	2805883a 	mov	r2,r5
   83624:	d9814b17 	ldw	r6,1324(sp)
   83628:	308d883a 	add	r6,r6,r2
   8362c:	d9814b15 	stw	r6,1324(sp)
   83630:	90013b1e 	bne	r18,zero,83b20 <___vfprintf_internal_r+0xbb0>
   83634:	d9c14017 	ldw	r7,1280(sp)
   83638:	dd401904 	addi	r21,sp,100
   8363c:	d8000d15 	stw	zero,52(sp)
   83640:	003ea706 	br	830e0 <___vfprintf_internal_r+0x170>
   83644:	d8800e17 	ldw	r2,56(sp)
   83648:	1005451e 	bne	r2,zero,84b60 <___vfprintf_internal_r+0x1bf0>
   8364c:	d8000d15 	stw	zero,52(sp)
   83650:	b080030b 	ldhu	r2,12(r22)
   83654:	1080100c 	andi	r2,r2,64
   83658:	103e8726 	beq	r2,zero,83078 <___vfprintf_internal_r+0x108>
   8365c:	00bfffc4 	movi	r2,-1
   83660:	d8814b15 	stw	r2,1324(sp)
   83664:	003e8406 	br	83078 <___vfprintf_internal_r+0x108>
   83668:	d9814d17 	ldw	r6,1332(sp)
   8366c:	00801944 	movi	r2,101
   83670:	11806e16 	blt	r2,r6,8382c <___vfprintf_internal_r+0x8bc>
   83674:	d9414717 	ldw	r5,1308(sp)
   83678:	00c00044 	movi	r3,1
   8367c:	1943490e 	bge	r3,r5,843a4 <___vfprintf_internal_r+0x1434>
   83680:	d8814117 	ldw	r2,1284(sp)
   83684:	94800044 	addi	r18,r18,1
   83688:	8c400044 	addi	r17,r17,1
   8368c:	a8800015 	stw	r2,0(r21)
   83690:	008001c4 	movi	r2,7
   83694:	a8c00115 	stw	r3,4(r21)
   83698:	dc800e15 	stw	r18,56(sp)
   8369c:	dc400d15 	stw	r17,52(sp)
   836a0:	1441ca16 	blt	r2,r17,83dcc <___vfprintf_internal_r+0xe5c>
   836a4:	a8c00204 	addi	r3,r21,8
   836a8:	d9014917 	ldw	r4,1316(sp)
   836ac:	00800044 	movi	r2,1
   836b0:	94800044 	addi	r18,r18,1
   836b4:	8c400044 	addi	r17,r17,1
   836b8:	18800115 	stw	r2,4(r3)
   836bc:	008001c4 	movi	r2,7
   836c0:	19000015 	stw	r4,0(r3)
   836c4:	dc800e15 	stw	r18,56(sp)
   836c8:	dc400d15 	stw	r17,52(sp)
   836cc:	1441b616 	blt	r2,r17,83da8 <___vfprintf_internal_r+0xe38>
   836d0:	1cc00204 	addi	r19,r3,8
   836d4:	d9014217 	ldw	r4,1288(sp)
   836d8:	d9414317 	ldw	r5,1292(sp)
   836dc:	000d883a 	mov	r6,zero
   836e0:	000f883a 	mov	r7,zero
   836e4:	008aa8c0 	call	8aa8c <__nedf2>
   836e8:	10017426 	beq	r2,zero,83cbc <___vfprintf_internal_r+0xd4c>
   836ec:	d9414717 	ldw	r5,1308(sp)
   836f0:	d9814117 	ldw	r6,1284(sp)
   836f4:	8c400044 	addi	r17,r17,1
   836f8:	2c85883a 	add	r2,r5,r18
   836fc:	14bfffc4 	addi	r18,r2,-1
   83700:	28bfffc4 	addi	r2,r5,-1
   83704:	30c00044 	addi	r3,r6,1
   83708:	98800115 	stw	r2,4(r19)
   8370c:	008001c4 	movi	r2,7
   83710:	98c00015 	stw	r3,0(r19)
   83714:	dc800e15 	stw	r18,56(sp)
   83718:	dc400d15 	stw	r17,52(sp)
   8371c:	14418e16 	blt	r2,r17,83d58 <___vfprintf_internal_r+0xde8>
   83720:	9cc00204 	addi	r19,r19,8
   83724:	d9414817 	ldw	r5,1312(sp)
   83728:	d8800804 	addi	r2,sp,32
   8372c:	8c400044 	addi	r17,r17,1
   83730:	9165883a 	add	r18,r18,r5
   83734:	98800015 	stw	r2,0(r19)
   83738:	008001c4 	movi	r2,7
   8373c:	99400115 	stw	r5,4(r19)
   83740:	dc800e15 	stw	r18,56(sp)
   83744:	dc400d15 	stw	r17,52(sp)
   83748:	1440ed16 	blt	r2,r17,83b00 <___vfprintf_internal_r+0xb90>
   8374c:	98c00204 	addi	r3,r19,8
   83750:	003f8506 	br	83568 <___vfprintf_internal_r+0x5f8>
   83754:	d9814a17 	ldw	r6,1320(sp)
   83758:	d8814517 	ldw	r2,1300(sp)
   8375c:	30a1c83a 	sub	r16,r6,r2
   83760:	043f4b0e 	bge	zero,r16,83490 <___vfprintf_internal_r+0x520>
   83764:	00800404 	movi	r2,16
   83768:	14043a0e 	bge	r2,r16,84854 <___vfprintf_internal_r+0x18e4>
   8376c:	1027883a 	mov	r19,r2
   83770:	07000274 	movhi	fp,9
   83774:	e7395784 	addi	fp,fp,-6818
   83778:	050001c4 	movi	r20,7
   8377c:	00000306 	br	8378c <___vfprintf_internal_r+0x81c>
   83780:	843ffc04 	addi	r16,r16,-16
   83784:	ad400204 	addi	r21,r21,8
   83788:	9c00130e 	bge	r19,r16,837d8 <___vfprintf_internal_r+0x868>
   8378c:	94800404 	addi	r18,r18,16
   83790:	8c400044 	addi	r17,r17,1
   83794:	af000015 	stw	fp,0(r21)
   83798:	acc00115 	stw	r19,4(r21)
   8379c:	dc800e15 	stw	r18,56(sp)
   837a0:	dc400d15 	stw	r17,52(sp)
   837a4:	a47ff60e 	bge	r20,r17,83780 <___vfprintf_internal_r+0x810>
   837a8:	d9014f17 	ldw	r4,1340(sp)
   837ac:	b00b883a 	mov	r5,r22
   837b0:	d9800c04 	addi	r6,sp,48
   837b4:	d9c15115 	stw	r7,1348(sp)
   837b8:	0082f180 	call	82f18 <__sprint_r>
   837bc:	d9c15117 	ldw	r7,1348(sp)
   837c0:	103fa31e 	bne	r2,zero,83650 <___vfprintf_internal_r+0x6e0>
   837c4:	843ffc04 	addi	r16,r16,-16
   837c8:	dc800e17 	ldw	r18,56(sp)
   837cc:	dc400d17 	ldw	r17,52(sp)
   837d0:	dd401904 	addi	r21,sp,100
   837d4:	9c3fed16 	blt	r19,r16,8378c <___vfprintf_internal_r+0x81c>
   837d8:	9425883a 	add	r18,r18,r16
   837dc:	8c400044 	addi	r17,r17,1
   837e0:	008001c4 	movi	r2,7
   837e4:	af000015 	stw	fp,0(r21)
   837e8:	ac000115 	stw	r16,4(r21)
   837ec:	dc800e15 	stw	r18,56(sp)
   837f0:	dc400d15 	stw	r17,52(sp)
   837f4:	14416116 	blt	r2,r17,83d7c <___vfprintf_internal_r+0xe0c>
   837f8:	ad400204 	addi	r21,r21,8
   837fc:	003f2406 	br	83490 <___vfprintf_internal_r+0x520>
   83800:	d9014f17 	ldw	r4,1340(sp)
   83804:	0086a240 	call	86a24 <__sinit>
   83808:	d9c15117 	ldw	r7,1348(sp)
   8380c:	003def06 	br	82fcc <___vfprintf_internal_r+0x5c>
   83810:	d9014f17 	ldw	r4,1340(sp)
   83814:	b00b883a 	mov	r5,r22
   83818:	d9c15115 	stw	r7,1348(sp)
   8381c:	0084e580 	call	84e58 <__swsetup_r>
   83820:	d9c15117 	ldw	r7,1348(sp)
   83824:	103dee26 	beq	r2,zero,82fe0 <___vfprintf_internal_r+0x70>
   83828:	003f8c06 	br	8365c <___vfprintf_internal_r+0x6ec>
   8382c:	d9014217 	ldw	r4,1288(sp)
   83830:	d9414317 	ldw	r5,1292(sp)
   83834:	000d883a 	mov	r6,zero
   83838:	000f883a 	mov	r7,zero
   8383c:	008aa040 	call	8aa04 <__eqdf2>
   83840:	1000f21e 	bne	r2,zero,83c0c <___vfprintf_internal_r+0xc9c>
   83844:	00800274 	movhi	r2,9
   83848:	10b95704 	addi	r2,r2,-6820
   8384c:	94800044 	addi	r18,r18,1
   83850:	8c400044 	addi	r17,r17,1
   83854:	a8800015 	stw	r2,0(r21)
   83858:	00c00044 	movi	r3,1
   8385c:	008001c4 	movi	r2,7
   83860:	a8c00115 	stw	r3,4(r21)
   83864:	dc800e15 	stw	r18,56(sp)
   83868:	dc400d15 	stw	r17,52(sp)
   8386c:	14430016 	blt	r2,r17,84470 <___vfprintf_internal_r+0x1500>
   83870:	a8c00204 	addi	r3,r21,8
   83874:	d8800517 	ldw	r2,20(sp)
   83878:	d9014717 	ldw	r4,1308(sp)
   8387c:	11015c0e 	bge	r2,r4,83df0 <___vfprintf_internal_r+0xe80>
   83880:	dc400d17 	ldw	r17,52(sp)
   83884:	d9814917 	ldw	r6,1316(sp)
   83888:	00800044 	movi	r2,1
   8388c:	94800044 	addi	r18,r18,1
   83890:	8c400044 	addi	r17,r17,1
   83894:	18800115 	stw	r2,4(r3)
   83898:	008001c4 	movi	r2,7
   8389c:	19800015 	stw	r6,0(r3)
   838a0:	dc800e15 	stw	r18,56(sp)
   838a4:	dc400d15 	stw	r17,52(sp)
   838a8:	14431616 	blt	r2,r17,84504 <___vfprintf_internal_r+0x1594>
   838ac:	18c00204 	addi	r3,r3,8
   838b0:	d8814717 	ldw	r2,1308(sp)
   838b4:	143fffc4 	addi	r16,r2,-1
   838b8:	043f2b0e 	bge	zero,r16,83568 <___vfprintf_internal_r+0x5f8>
   838bc:	00800404 	movi	r2,16
   838c0:	1402a80e 	bge	r2,r16,84364 <___vfprintf_internal_r+0x13f4>
   838c4:	dc400d17 	ldw	r17,52(sp)
   838c8:	1027883a 	mov	r19,r2
   838cc:	07000274 	movhi	fp,9
   838d0:	e7395784 	addi	fp,fp,-6818
   838d4:	050001c4 	movi	r20,7
   838d8:	00000306 	br	838e8 <___vfprintf_internal_r+0x978>
   838dc:	18c00204 	addi	r3,r3,8
   838e0:	843ffc04 	addi	r16,r16,-16
   838e4:	9c02a20e 	bge	r19,r16,84370 <___vfprintf_internal_r+0x1400>
   838e8:	94800404 	addi	r18,r18,16
   838ec:	8c400044 	addi	r17,r17,1
   838f0:	1f000015 	stw	fp,0(r3)
   838f4:	1cc00115 	stw	r19,4(r3)
   838f8:	dc800e15 	stw	r18,56(sp)
   838fc:	dc400d15 	stw	r17,52(sp)
   83900:	a47ff60e 	bge	r20,r17,838dc <___vfprintf_internal_r+0x96c>
   83904:	d9014f17 	ldw	r4,1340(sp)
   83908:	b00b883a 	mov	r5,r22
   8390c:	d9800c04 	addi	r6,sp,48
   83910:	0082f180 	call	82f18 <__sprint_r>
   83914:	103f4e1e 	bne	r2,zero,83650 <___vfprintf_internal_r+0x6e0>
   83918:	dc800e17 	ldw	r18,56(sp)
   8391c:	dc400d17 	ldw	r17,52(sp)
   83920:	d8c01904 	addi	r3,sp,100
   83924:	003fee06 	br	838e0 <___vfprintf_internal_r+0x970>
   83928:	d8802c0b 	ldhu	r2,176(sp)
   8392c:	00ffffc4 	movi	r3,-1
   83930:	d8c14b15 	stw	r3,1324(sp)
   83934:	1080100c 	andi	r2,r2,64
   83938:	103dcc1e 	bne	r2,zero,8306c <___vfprintf_internal_r+0xfc>
   8393c:	003dce06 	br	83078 <___vfprintf_internal_r+0x108>
   83940:	d9014f17 	ldw	r4,1340(sp)
   83944:	b00b883a 	mov	r5,r22
   83948:	d9800c04 	addi	r6,sp,48
   8394c:	0082f180 	call	82f18 <__sprint_r>
   83950:	103f3f1e 	bne	r2,zero,83650 <___vfprintf_internal_r+0x6e0>
   83954:	dc800e17 	ldw	r18,56(sp)
   83958:	003f2e06 	br	83614 <___vfprintf_internal_r+0x6a4>
   8395c:	d9414c17 	ldw	r5,1328(sp)
   83960:	29400414 	ori	r5,r5,16
   83964:	d9414c15 	stw	r5,1328(sp)
   83968:	d9814c17 	ldw	r6,1328(sp)
   8396c:	3080080c 	andi	r2,r6,32
   83970:	10014f1e 	bne	r2,zero,83eb0 <___vfprintf_internal_r+0xf40>
   83974:	d8c14c17 	ldw	r3,1328(sp)
   83978:	1880040c 	andi	r2,r3,16
   8397c:	1002f01e 	bne	r2,zero,84540 <___vfprintf_internal_r+0x15d0>
   83980:	d9014c17 	ldw	r4,1328(sp)
   83984:	2080100c 	andi	r2,r4,64
   83988:	1002ed26 	beq	r2,zero,84540 <___vfprintf_internal_r+0x15d0>
   8398c:	3880000f 	ldh	r2,0(r7)
   83990:	39c00104 	addi	r7,r7,4
   83994:	d9c14015 	stw	r7,1280(sp)
   83998:	1023d7fa 	srai	r17,r2,31
   8399c:	1021883a 	mov	r16,r2
   839a0:	88037816 	blt	r17,zero,84784 <___vfprintf_internal_r+0x1814>
   839a4:	01000044 	movi	r4,1
   839a8:	98000416 	blt	r19,zero,839bc <___vfprintf_internal_r+0xa4c>
   839ac:	d8c14c17 	ldw	r3,1328(sp)
   839b0:	00bfdfc4 	movi	r2,-129
   839b4:	1886703a 	and	r3,r3,r2
   839b8:	d8c14c15 	stw	r3,1328(sp)
   839bc:	8444b03a 	or	r2,r16,r17
   839c0:	10022c1e 	bne	r2,zero,84274 <___vfprintf_internal_r+0x1304>
   839c4:	98022b1e 	bne	r19,zero,84274 <___vfprintf_internal_r+0x1304>
   839c8:	20803fcc 	andi	r2,r4,255
   839cc:	1002a126 	beq	r2,zero,84454 <___vfprintf_internal_r+0x14e4>
   839d0:	d8c01904 	addi	r3,sp,100
   839d4:	dd000f04 	addi	r20,sp,60
   839d8:	d8c14115 	stw	r3,1284(sp)
   839dc:	d8c14117 	ldw	r3,1284(sp)
   839e0:	dcc14515 	stw	r19,1300(sp)
   839e4:	a0c5c83a 	sub	r2,r20,r3
   839e8:	11c00a04 	addi	r7,r2,40
   839ec:	99c0010e 	bge	r19,r7,839f4 <___vfprintf_internal_r+0xa84>
   839f0:	d9c14515 	stw	r7,1300(sp)
   839f4:	dcc14615 	stw	r19,1304(sp)
   839f8:	d8800407 	ldb	r2,16(sp)
   839fc:	103e4c26 	beq	r2,zero,83330 <___vfprintf_internal_r+0x3c0>
   83a00:	d8814517 	ldw	r2,1300(sp)
   83a04:	10800044 	addi	r2,r2,1
   83a08:	d8814515 	stw	r2,1300(sp)
   83a0c:	003e4806 	br	83330 <___vfprintf_internal_r+0x3c0>
   83a10:	d9814c17 	ldw	r6,1328(sp)
   83a14:	31800414 	ori	r6,r6,16
   83a18:	d9814c15 	stw	r6,1328(sp)
   83a1c:	d8c14c17 	ldw	r3,1328(sp)
   83a20:	1880080c 	andi	r2,r3,32
   83a24:	1001271e 	bne	r2,zero,83ec4 <___vfprintf_internal_r+0xf54>
   83a28:	d9414c17 	ldw	r5,1328(sp)
   83a2c:	2880040c 	andi	r2,r5,16
   83a30:	1002bc1e 	bne	r2,zero,84524 <___vfprintf_internal_r+0x15b4>
   83a34:	d9814c17 	ldw	r6,1328(sp)
   83a38:	3080100c 	andi	r2,r6,64
   83a3c:	1002b926 	beq	r2,zero,84524 <___vfprintf_internal_r+0x15b4>
   83a40:	3c00000b 	ldhu	r16,0(r7)
   83a44:	0009883a 	mov	r4,zero
   83a48:	39c00104 	addi	r7,r7,4
   83a4c:	0023883a 	mov	r17,zero
   83a50:	d9c14015 	stw	r7,1280(sp)
   83a54:	d8000405 	stb	zero,16(sp)
   83a58:	003fd306 	br	839a8 <___vfprintf_internal_r+0xa38>
   83a5c:	d9014c17 	ldw	r4,1328(sp)
   83a60:	21000414 	ori	r4,r4,16
   83a64:	d9014c15 	stw	r4,1328(sp)
   83a68:	d9414c17 	ldw	r5,1328(sp)
   83a6c:	2880080c 	andi	r2,r5,32
   83a70:	1001081e 	bne	r2,zero,83e94 <___vfprintf_internal_r+0xf24>
   83a74:	d8c14c17 	ldw	r3,1328(sp)
   83a78:	1880040c 	andi	r2,r3,16
   83a7c:	1002b61e 	bne	r2,zero,84558 <___vfprintf_internal_r+0x15e8>
   83a80:	d9014c17 	ldw	r4,1328(sp)
   83a84:	2080100c 	andi	r2,r4,64
   83a88:	1002b326 	beq	r2,zero,84558 <___vfprintf_internal_r+0x15e8>
   83a8c:	3c00000b 	ldhu	r16,0(r7)
   83a90:	01000044 	movi	r4,1
   83a94:	39c00104 	addi	r7,r7,4
   83a98:	0023883a 	mov	r17,zero
   83a9c:	d9c14015 	stw	r7,1280(sp)
   83aa0:	d8000405 	stb	zero,16(sp)
   83aa4:	003fc006 	br	839a8 <___vfprintf_internal_r+0xa38>
   83aa8:	d9014f17 	ldw	r4,1340(sp)
   83aac:	b00b883a 	mov	r5,r22
   83ab0:	d9800c04 	addi	r6,sp,48
   83ab4:	0082f180 	call	82f18 <__sprint_r>
   83ab8:	103ee51e 	bne	r2,zero,83650 <___vfprintf_internal_r+0x6e0>
   83abc:	dc800e17 	ldw	r18,56(sp)
   83ac0:	d8c01904 	addi	r3,sp,100
   83ac4:	d9814c17 	ldw	r6,1328(sp)
   83ac8:	3080004c 	andi	r2,r6,1
   83acc:	1005003a 	cmpeq	r2,r2,zero
   83ad0:	103ea51e 	bne	r2,zero,83568 <___vfprintf_internal_r+0x5f8>
   83ad4:	00800044 	movi	r2,1
   83ad8:	dc400d17 	ldw	r17,52(sp)
   83adc:	18800115 	stw	r2,4(r3)
   83ae0:	d8814917 	ldw	r2,1316(sp)
   83ae4:	94800044 	addi	r18,r18,1
   83ae8:	8c400044 	addi	r17,r17,1
   83aec:	18800015 	stw	r2,0(r3)
   83af0:	008001c4 	movi	r2,7
   83af4:	dc800e15 	stw	r18,56(sp)
   83af8:	dc400d15 	stw	r17,52(sp)
   83afc:	1442240e 	bge	r2,r17,84390 <___vfprintf_internal_r+0x1420>
   83b00:	d9014f17 	ldw	r4,1340(sp)
   83b04:	b00b883a 	mov	r5,r22
   83b08:	d9800c04 	addi	r6,sp,48
   83b0c:	0082f180 	call	82f18 <__sprint_r>
   83b10:	103ecf1e 	bne	r2,zero,83650 <___vfprintf_internal_r+0x6e0>
   83b14:	dc800e17 	ldw	r18,56(sp)
   83b18:	d8c01904 	addi	r3,sp,100
   83b1c:	003e9206 	br	83568 <___vfprintf_internal_r+0x5f8>
   83b20:	d9014f17 	ldw	r4,1340(sp)
   83b24:	b00b883a 	mov	r5,r22
   83b28:	d9800c04 	addi	r6,sp,48
   83b2c:	0082f180 	call	82f18 <__sprint_r>
   83b30:	103ec026 	beq	r2,zero,83634 <___vfprintf_internal_r+0x6c4>
   83b34:	003ec606 	br	83650 <___vfprintf_internal_r+0x6e0>
   83b38:	d9014f17 	ldw	r4,1340(sp)
   83b3c:	b00b883a 	mov	r5,r22
   83b40:	d9800c04 	addi	r6,sp,48
   83b44:	d9c15115 	stw	r7,1348(sp)
   83b48:	0082f180 	call	82f18 <__sprint_r>
   83b4c:	d9c15117 	ldw	r7,1348(sp)
   83b50:	103ebf1e 	bne	r2,zero,83650 <___vfprintf_internal_r+0x6e0>
   83b54:	dc800e17 	ldw	r18,56(sp)
   83b58:	dc400d17 	ldw	r17,52(sp)
   83b5c:	dd401904 	addi	r21,sp,100
   83b60:	003e7406 	br	83534 <___vfprintf_internal_r+0x5c4>
   83b64:	d9014f17 	ldw	r4,1340(sp)
   83b68:	b00b883a 	mov	r5,r22
   83b6c:	d9800c04 	addi	r6,sp,48
   83b70:	d9c15115 	stw	r7,1348(sp)
   83b74:	0082f180 	call	82f18 <__sprint_r>
   83b78:	d9c15117 	ldw	r7,1348(sp)
   83b7c:	103eb41e 	bne	r2,zero,83650 <___vfprintf_internal_r+0x6e0>
   83b80:	dd401904 	addi	r21,sp,100
   83b84:	003d6d06 	br	8313c <___vfprintf_internal_r+0x1cc>
   83b88:	d9014f17 	ldw	r4,1340(sp)
   83b8c:	b00b883a 	mov	r5,r22
   83b90:	d9800c04 	addi	r6,sp,48
   83b94:	d9c15115 	stw	r7,1348(sp)
   83b98:	0082f180 	call	82f18 <__sprint_r>
   83b9c:	d9c15117 	ldw	r7,1348(sp)
   83ba0:	103eab1e 	bne	r2,zero,83650 <___vfprintf_internal_r+0x6e0>
   83ba4:	dc800e17 	ldw	r18,56(sp)
   83ba8:	dc400d17 	ldw	r17,52(sp)
   83bac:	dd401904 	addi	r21,sp,100
   83bb0:	003e3406 	br	83484 <___vfprintf_internal_r+0x514>
   83bb4:	d9014f17 	ldw	r4,1340(sp)
   83bb8:	b00b883a 	mov	r5,r22
   83bbc:	d9800c04 	addi	r6,sp,48
   83bc0:	d9c15115 	stw	r7,1348(sp)
   83bc4:	0082f180 	call	82f18 <__sprint_r>
   83bc8:	d9c15117 	ldw	r7,1348(sp)
   83bcc:	103ea01e 	bne	r2,zero,83650 <___vfprintf_internal_r+0x6e0>
   83bd0:	dc800e17 	ldw	r18,56(sp)
   83bd4:	dc400d17 	ldw	r17,52(sp)
   83bd8:	dd401904 	addi	r21,sp,100
   83bdc:	003e1c06 	br	83450 <___vfprintf_internal_r+0x4e0>
   83be0:	d9014f17 	ldw	r4,1340(sp)
   83be4:	b00b883a 	mov	r5,r22
   83be8:	d9800c04 	addi	r6,sp,48
   83bec:	d9c15115 	stw	r7,1348(sp)
   83bf0:	0082f180 	call	82f18 <__sprint_r>
   83bf4:	d9c15117 	ldw	r7,1348(sp)
   83bf8:	103e951e 	bne	r2,zero,83650 <___vfprintf_internal_r+0x6e0>
   83bfc:	dc800e17 	ldw	r18,56(sp)
   83c00:	dc400d17 	ldw	r17,52(sp)
   83c04:	dd401904 	addi	r21,sp,100
   83c08:	003e0406 	br	8341c <___vfprintf_internal_r+0x4ac>
   83c0c:	d9000517 	ldw	r4,20(sp)
   83c10:	0102580e 	bge	zero,r4,84574 <___vfprintf_internal_r+0x1604>
   83c14:	d9814717 	ldw	r6,1308(sp)
   83c18:	21807a16 	blt	r4,r6,83e04 <___vfprintf_internal_r+0xe94>
   83c1c:	d8814117 	ldw	r2,1284(sp)
   83c20:	91a5883a 	add	r18,r18,r6
   83c24:	8c400044 	addi	r17,r17,1
   83c28:	a8800015 	stw	r2,0(r21)
   83c2c:	008001c4 	movi	r2,7
   83c30:	a9800115 	stw	r6,4(r21)
   83c34:	dc800e15 	stw	r18,56(sp)
   83c38:	dc400d15 	stw	r17,52(sp)
   83c3c:	1442fc16 	blt	r2,r17,84830 <___vfprintf_internal_r+0x18c0>
   83c40:	a8c00204 	addi	r3,r21,8
   83c44:	d9414717 	ldw	r5,1308(sp)
   83c48:	2161c83a 	sub	r16,r4,r5
   83c4c:	043f9d0e 	bge	zero,r16,83ac4 <___vfprintf_internal_r+0xb54>
   83c50:	00800404 	movi	r2,16
   83c54:	1402190e 	bge	r2,r16,844bc <___vfprintf_internal_r+0x154c>
   83c58:	dc400d17 	ldw	r17,52(sp)
   83c5c:	1027883a 	mov	r19,r2
   83c60:	07000274 	movhi	fp,9
   83c64:	e7395784 	addi	fp,fp,-6818
   83c68:	050001c4 	movi	r20,7
   83c6c:	00000306 	br	83c7c <___vfprintf_internal_r+0xd0c>
   83c70:	18c00204 	addi	r3,r3,8
   83c74:	843ffc04 	addi	r16,r16,-16
   83c78:	9c02130e 	bge	r19,r16,844c8 <___vfprintf_internal_r+0x1558>
   83c7c:	94800404 	addi	r18,r18,16
   83c80:	8c400044 	addi	r17,r17,1
   83c84:	1f000015 	stw	fp,0(r3)
   83c88:	1cc00115 	stw	r19,4(r3)
   83c8c:	dc800e15 	stw	r18,56(sp)
   83c90:	dc400d15 	stw	r17,52(sp)
   83c94:	a47ff60e 	bge	r20,r17,83c70 <___vfprintf_internal_r+0xd00>
   83c98:	d9014f17 	ldw	r4,1340(sp)
   83c9c:	b00b883a 	mov	r5,r22
   83ca0:	d9800c04 	addi	r6,sp,48
   83ca4:	0082f180 	call	82f18 <__sprint_r>
   83ca8:	103e691e 	bne	r2,zero,83650 <___vfprintf_internal_r+0x6e0>
   83cac:	dc800e17 	ldw	r18,56(sp)
   83cb0:	dc400d17 	ldw	r17,52(sp)
   83cb4:	d8c01904 	addi	r3,sp,100
   83cb8:	003fee06 	br	83c74 <___vfprintf_internal_r+0xd04>
   83cbc:	d8814717 	ldw	r2,1308(sp)
   83cc0:	143fffc4 	addi	r16,r2,-1
   83cc4:	043e970e 	bge	zero,r16,83724 <___vfprintf_internal_r+0x7b4>
   83cc8:	00800404 	movi	r2,16
   83ccc:	1400180e 	bge	r2,r16,83d30 <___vfprintf_internal_r+0xdc0>
   83cd0:	1029883a 	mov	r20,r2
   83cd4:	07000274 	movhi	fp,9
   83cd8:	e7395784 	addi	fp,fp,-6818
   83cdc:	054001c4 	movi	r21,7
   83ce0:	00000306 	br	83cf0 <___vfprintf_internal_r+0xd80>
   83ce4:	9cc00204 	addi	r19,r19,8
   83ce8:	843ffc04 	addi	r16,r16,-16
   83cec:	a400120e 	bge	r20,r16,83d38 <___vfprintf_internal_r+0xdc8>
   83cf0:	94800404 	addi	r18,r18,16
   83cf4:	8c400044 	addi	r17,r17,1
   83cf8:	9f000015 	stw	fp,0(r19)
   83cfc:	9d000115 	stw	r20,4(r19)
   83d00:	dc800e15 	stw	r18,56(sp)
   83d04:	dc400d15 	stw	r17,52(sp)
   83d08:	ac7ff60e 	bge	r21,r17,83ce4 <___vfprintf_internal_r+0xd74>
   83d0c:	d9014f17 	ldw	r4,1340(sp)
   83d10:	b00b883a 	mov	r5,r22
   83d14:	d9800c04 	addi	r6,sp,48
   83d18:	0082f180 	call	82f18 <__sprint_r>
   83d1c:	103e4c1e 	bne	r2,zero,83650 <___vfprintf_internal_r+0x6e0>
   83d20:	dc800e17 	ldw	r18,56(sp)
   83d24:	dc400d17 	ldw	r17,52(sp)
   83d28:	dcc01904 	addi	r19,sp,100
   83d2c:	003fee06 	br	83ce8 <___vfprintf_internal_r+0xd78>
   83d30:	07000274 	movhi	fp,9
   83d34:	e7395784 	addi	fp,fp,-6818
   83d38:	9425883a 	add	r18,r18,r16
   83d3c:	8c400044 	addi	r17,r17,1
   83d40:	008001c4 	movi	r2,7
   83d44:	9f000015 	stw	fp,0(r19)
   83d48:	9c000115 	stw	r16,4(r19)
   83d4c:	dc800e15 	stw	r18,56(sp)
   83d50:	dc400d15 	stw	r17,52(sp)
   83d54:	147e720e 	bge	r2,r17,83720 <___vfprintf_internal_r+0x7b0>
   83d58:	d9014f17 	ldw	r4,1340(sp)
   83d5c:	b00b883a 	mov	r5,r22
   83d60:	d9800c04 	addi	r6,sp,48
   83d64:	0082f180 	call	82f18 <__sprint_r>
   83d68:	103e391e 	bne	r2,zero,83650 <___vfprintf_internal_r+0x6e0>
   83d6c:	dc800e17 	ldw	r18,56(sp)
   83d70:	dc400d17 	ldw	r17,52(sp)
   83d74:	dcc01904 	addi	r19,sp,100
   83d78:	003e6a06 	br	83724 <___vfprintf_internal_r+0x7b4>
   83d7c:	d9014f17 	ldw	r4,1340(sp)
   83d80:	b00b883a 	mov	r5,r22
   83d84:	d9800c04 	addi	r6,sp,48
   83d88:	d9c15115 	stw	r7,1348(sp)
   83d8c:	0082f180 	call	82f18 <__sprint_r>
   83d90:	d9c15117 	ldw	r7,1348(sp)
   83d94:	103e2e1e 	bne	r2,zero,83650 <___vfprintf_internal_r+0x6e0>
   83d98:	dc800e17 	ldw	r18,56(sp)
   83d9c:	dc400d17 	ldw	r17,52(sp)
   83da0:	dd401904 	addi	r21,sp,100
   83da4:	003dba06 	br	83490 <___vfprintf_internal_r+0x520>
   83da8:	d9014f17 	ldw	r4,1340(sp)
   83dac:	b00b883a 	mov	r5,r22
   83db0:	d9800c04 	addi	r6,sp,48
   83db4:	0082f180 	call	82f18 <__sprint_r>
   83db8:	103e251e 	bne	r2,zero,83650 <___vfprintf_internal_r+0x6e0>
   83dbc:	dc800e17 	ldw	r18,56(sp)
   83dc0:	dc400d17 	ldw	r17,52(sp)
   83dc4:	dcc01904 	addi	r19,sp,100
   83dc8:	003e4206 	br	836d4 <___vfprintf_internal_r+0x764>
   83dcc:	d9014f17 	ldw	r4,1340(sp)
   83dd0:	b00b883a 	mov	r5,r22
   83dd4:	d9800c04 	addi	r6,sp,48
   83dd8:	0082f180 	call	82f18 <__sprint_r>
   83ddc:	103e1c1e 	bne	r2,zero,83650 <___vfprintf_internal_r+0x6e0>
   83de0:	dc800e17 	ldw	r18,56(sp)
   83de4:	dc400d17 	ldw	r17,52(sp)
   83de8:	d8c01904 	addi	r3,sp,100
   83dec:	003e2e06 	br	836a8 <___vfprintf_internal_r+0x738>
   83df0:	d9414c17 	ldw	r5,1328(sp)
   83df4:	2880004c 	andi	r2,r5,1
   83df8:	1005003a 	cmpeq	r2,r2,zero
   83dfc:	103dda1e 	bne	r2,zero,83568 <___vfprintf_internal_r+0x5f8>
   83e00:	003e9f06 	br	83880 <___vfprintf_internal_r+0x910>
   83e04:	d8c14117 	ldw	r3,1284(sp)
   83e08:	9125883a 	add	r18,r18,r4
   83e0c:	8c400044 	addi	r17,r17,1
   83e10:	008001c4 	movi	r2,7
   83e14:	a8c00015 	stw	r3,0(r21)
   83e18:	a9000115 	stw	r4,4(r21)
   83e1c:	dc800e15 	stw	r18,56(sp)
   83e20:	dc400d15 	stw	r17,52(sp)
   83e24:	14426c16 	blt	r2,r17,847d8 <___vfprintf_internal_r+0x1868>
   83e28:	a8c00204 	addi	r3,r21,8
   83e2c:	d9414917 	ldw	r5,1316(sp)
   83e30:	00800044 	movi	r2,1
   83e34:	94800044 	addi	r18,r18,1
   83e38:	8c400044 	addi	r17,r17,1
   83e3c:	18800115 	stw	r2,4(r3)
   83e40:	008001c4 	movi	r2,7
   83e44:	19400015 	stw	r5,0(r3)
   83e48:	dc800e15 	stw	r18,56(sp)
   83e4c:	dc400d15 	stw	r17,52(sp)
   83e50:	2021883a 	mov	r16,r4
   83e54:	14425616 	blt	r2,r17,847b0 <___vfprintf_internal_r+0x1840>
   83e58:	19400204 	addi	r5,r3,8
   83e5c:	d9814717 	ldw	r6,1308(sp)
   83e60:	8c400044 	addi	r17,r17,1
   83e64:	dc400d15 	stw	r17,52(sp)
   83e68:	3107c83a 	sub	r3,r6,r4
   83e6c:	d9014117 	ldw	r4,1284(sp)
   83e70:	90e5883a 	add	r18,r18,r3
   83e74:	28c00115 	stw	r3,4(r5)
   83e78:	8105883a 	add	r2,r16,r4
   83e7c:	28800015 	stw	r2,0(r5)
   83e80:	008001c4 	movi	r2,7
   83e84:	dc800e15 	stw	r18,56(sp)
   83e88:	147f1d16 	blt	r2,r17,83b00 <___vfprintf_internal_r+0xb90>
   83e8c:	28c00204 	addi	r3,r5,8
   83e90:	003db506 	br	83568 <___vfprintf_internal_r+0x5f8>
   83e94:	3c000017 	ldw	r16,0(r7)
   83e98:	3c400117 	ldw	r17,4(r7)
   83e9c:	39800204 	addi	r6,r7,8
   83ea0:	01000044 	movi	r4,1
   83ea4:	d9814015 	stw	r6,1280(sp)
   83ea8:	d8000405 	stb	zero,16(sp)
   83eac:	003ebe06 	br	839a8 <___vfprintf_internal_r+0xa38>
   83eb0:	3c000017 	ldw	r16,0(r7)
   83eb4:	3c400117 	ldw	r17,4(r7)
   83eb8:	38800204 	addi	r2,r7,8
   83ebc:	d8814015 	stw	r2,1280(sp)
   83ec0:	003eb706 	br	839a0 <___vfprintf_internal_r+0xa30>
   83ec4:	3c000017 	ldw	r16,0(r7)
   83ec8:	3c400117 	ldw	r17,4(r7)
   83ecc:	39000204 	addi	r4,r7,8
   83ed0:	d9014015 	stw	r4,1280(sp)
   83ed4:	0009883a 	mov	r4,zero
   83ed8:	d8000405 	stb	zero,16(sp)
   83edc:	003eb206 	br	839a8 <___vfprintf_internal_r+0xa38>
   83ee0:	38c00017 	ldw	r3,0(r7)
   83ee4:	39c00104 	addi	r7,r7,4
   83ee8:	d8c14a15 	stw	r3,1320(sp)
   83eec:	1800d70e 	bge	r3,zero,8424c <___vfprintf_internal_r+0x12dc>
   83ef0:	00c7c83a 	sub	r3,zero,r3
   83ef4:	d8c14a15 	stw	r3,1320(sp)
   83ef8:	d9014c17 	ldw	r4,1328(sp)
   83efc:	b8c00007 	ldb	r3,0(r23)
   83f00:	21000114 	ori	r4,r4,4
   83f04:	d9014c15 	stw	r4,1328(sp)
   83f08:	003c9806 	br	8316c <___vfprintf_internal_r+0x1fc>
   83f0c:	d9814c17 	ldw	r6,1328(sp)
   83f10:	3080080c 	andi	r2,r6,32
   83f14:	1001f626 	beq	r2,zero,846f0 <___vfprintf_internal_r+0x1780>
   83f18:	d9014b17 	ldw	r4,1324(sp)
   83f1c:	38800017 	ldw	r2,0(r7)
   83f20:	39c00104 	addi	r7,r7,4
   83f24:	d9c14015 	stw	r7,1280(sp)
   83f28:	2007d7fa 	srai	r3,r4,31
   83f2c:	d9c14017 	ldw	r7,1280(sp)
   83f30:	11000015 	stw	r4,0(r2)
   83f34:	10c00115 	stw	r3,4(r2)
   83f38:	003c6906 	br	830e0 <___vfprintf_internal_r+0x170>
   83f3c:	b8c00007 	ldb	r3,0(r23)
   83f40:	00801b04 	movi	r2,108
   83f44:	18825526 	beq	r3,r2,8489c <___vfprintf_internal_r+0x192c>
   83f48:	d9414c17 	ldw	r5,1328(sp)
   83f4c:	29400414 	ori	r5,r5,16
   83f50:	d9414c15 	stw	r5,1328(sp)
   83f54:	003c8506 	br	8316c <___vfprintf_internal_r+0x1fc>
   83f58:	d9814c17 	ldw	r6,1328(sp)
   83f5c:	b8c00007 	ldb	r3,0(r23)
   83f60:	31800814 	ori	r6,r6,32
   83f64:	d9814c15 	stw	r6,1328(sp)
   83f68:	003c8006 	br	8316c <___vfprintf_internal_r+0x1fc>
   83f6c:	d8814c17 	ldw	r2,1328(sp)
   83f70:	3c000017 	ldw	r16,0(r7)
   83f74:	00c01e04 	movi	r3,120
   83f78:	10800094 	ori	r2,r2,2
   83f7c:	d8814c15 	stw	r2,1328(sp)
   83f80:	39c00104 	addi	r7,r7,4
   83f84:	01400274 	movhi	r5,9
   83f88:	29794004 	addi	r5,r5,-6912
   83f8c:	00800c04 	movi	r2,48
   83f90:	0023883a 	mov	r17,zero
   83f94:	01000084 	movi	r4,2
   83f98:	d9c14015 	stw	r7,1280(sp)
   83f9c:	d8c14d15 	stw	r3,1332(sp)
   83fa0:	d9414415 	stw	r5,1296(sp)
   83fa4:	d8800445 	stb	r2,17(sp)
   83fa8:	d8c00485 	stb	r3,18(sp)
   83fac:	d8000405 	stb	zero,16(sp)
   83fb0:	003e7d06 	br	839a8 <___vfprintf_internal_r+0xa38>
   83fb4:	d8814c17 	ldw	r2,1328(sp)
   83fb8:	b8c00007 	ldb	r3,0(r23)
   83fbc:	10801014 	ori	r2,r2,64
   83fc0:	d8814c15 	stw	r2,1328(sp)
   83fc4:	003c6906 	br	8316c <___vfprintf_internal_r+0x1fc>
   83fc8:	d9414c17 	ldw	r5,1328(sp)
   83fcc:	2880020c 	andi	r2,r5,8
   83fd0:	1001e526 	beq	r2,zero,84768 <___vfprintf_internal_r+0x17f8>
   83fd4:	39800017 	ldw	r6,0(r7)
   83fd8:	38800204 	addi	r2,r7,8
   83fdc:	d8814015 	stw	r2,1280(sp)
   83fe0:	d9814215 	stw	r6,1288(sp)
   83fe4:	39c00117 	ldw	r7,4(r7)
   83fe8:	d9c14315 	stw	r7,1292(sp)
   83fec:	d9014217 	ldw	r4,1288(sp)
   83ff0:	d9414317 	ldw	r5,1292(sp)
   83ff4:	00894cc0 	call	894cc <__isinfd>
   83ff8:	10021d26 	beq	r2,zero,84870 <___vfprintf_internal_r+0x1900>
   83ffc:	d9014217 	ldw	r4,1288(sp)
   84000:	d9414317 	ldw	r5,1292(sp)
   84004:	000d883a 	mov	r6,zero
   84008:	000f883a 	mov	r7,zero
   8400c:	008ac240 	call	8ac24 <__ltdf2>
   84010:	1002d016 	blt	r2,zero,84b54 <___vfprintf_internal_r+0x1be4>
   84014:	d9414d17 	ldw	r5,1332(sp)
   84018:	008011c4 	movi	r2,71
   8401c:	11421016 	blt	r2,r5,84860 <___vfprintf_internal_r+0x18f0>
   84020:	01800274 	movhi	r6,9
   84024:	31b94504 	addi	r6,r6,-6892
   84028:	d9814115 	stw	r6,1284(sp)
   8402c:	d9014c17 	ldw	r4,1328(sp)
   84030:	00c000c4 	movi	r3,3
   84034:	00bfdfc4 	movi	r2,-129
   84038:	2088703a 	and	r4,r4,r2
   8403c:	180f883a 	mov	r7,r3
   84040:	d8c14515 	stw	r3,1300(sp)
   84044:	d9014c15 	stw	r4,1328(sp)
   84048:	d8014615 	stw	zero,1304(sp)
   8404c:	003e6a06 	br	839f8 <___vfprintf_internal_r+0xa88>
   84050:	38800017 	ldw	r2,0(r7)
   84054:	00c00044 	movi	r3,1
   84058:	39c00104 	addi	r7,r7,4
   8405c:	d9c14015 	stw	r7,1280(sp)
   84060:	d9000f04 	addi	r4,sp,60
   84064:	180f883a 	mov	r7,r3
   84068:	d8c14515 	stw	r3,1300(sp)
   8406c:	d9014115 	stw	r4,1284(sp)
   84070:	d8800f05 	stb	r2,60(sp)
   84074:	d8000405 	stb	zero,16(sp)
   84078:	003cac06 	br	8332c <___vfprintf_internal_r+0x3bc>
   8407c:	01400274 	movhi	r5,9
   84080:	29794b04 	addi	r5,r5,-6868
   84084:	d9414415 	stw	r5,1296(sp)
   84088:	d9814c17 	ldw	r6,1328(sp)
   8408c:	3080080c 	andi	r2,r6,32
   84090:	1000ff26 	beq	r2,zero,84490 <___vfprintf_internal_r+0x1520>
   84094:	3c000017 	ldw	r16,0(r7)
   84098:	3c400117 	ldw	r17,4(r7)
   8409c:	38800204 	addi	r2,r7,8
   840a0:	d8814015 	stw	r2,1280(sp)
   840a4:	d9414c17 	ldw	r5,1328(sp)
   840a8:	2880004c 	andi	r2,r5,1
   840ac:	1005003a 	cmpeq	r2,r2,zero
   840b0:	1000b91e 	bne	r2,zero,84398 <___vfprintf_internal_r+0x1428>
   840b4:	8444b03a 	or	r2,r16,r17
   840b8:	1000b726 	beq	r2,zero,84398 <___vfprintf_internal_r+0x1428>
   840bc:	d9814d17 	ldw	r6,1332(sp)
   840c0:	29400094 	ori	r5,r5,2
   840c4:	00800c04 	movi	r2,48
   840c8:	01000084 	movi	r4,2
   840cc:	d9414c15 	stw	r5,1328(sp)
   840d0:	d8800445 	stb	r2,17(sp)
   840d4:	d9800485 	stb	r6,18(sp)
   840d8:	d8000405 	stb	zero,16(sp)
   840dc:	003e3206 	br	839a8 <___vfprintf_internal_r+0xa38>
   840e0:	01800274 	movhi	r6,9
   840e4:	31b94004 	addi	r6,r6,-6912
   840e8:	d9814415 	stw	r6,1296(sp)
   840ec:	003fe606 	br	84088 <___vfprintf_internal_r+0x1118>
   840f0:	00800ac4 	movi	r2,43
   840f4:	d8800405 	stb	r2,16(sp)
   840f8:	b8c00007 	ldb	r3,0(r23)
   840fc:	003c1b06 	br	8316c <___vfprintf_internal_r+0x1fc>
   84100:	d8814c17 	ldw	r2,1328(sp)
   84104:	b8c00007 	ldb	r3,0(r23)
   84108:	10800054 	ori	r2,r2,1
   8410c:	d8814c15 	stw	r2,1328(sp)
   84110:	003c1606 	br	8316c <___vfprintf_internal_r+0x1fc>
   84114:	d8800407 	ldb	r2,16(sp)
   84118:	10004c1e 	bne	r2,zero,8424c <___vfprintf_internal_r+0x12dc>
   8411c:	00800804 	movi	r2,32
   84120:	d8800405 	stb	r2,16(sp)
   84124:	b8c00007 	ldb	r3,0(r23)
   84128:	003c1006 	br	8316c <___vfprintf_internal_r+0x1fc>
   8412c:	d9814c17 	ldw	r6,1328(sp)
   84130:	b8c00007 	ldb	r3,0(r23)
   84134:	31800214 	ori	r6,r6,8
   84138:	d9814c15 	stw	r6,1328(sp)
   8413c:	003c0b06 	br	8316c <___vfprintf_internal_r+0x1fc>
   84140:	0009883a 	mov	r4,zero
   84144:	04000244 	movi	r16,9
   84148:	01400284 	movi	r5,10
   8414c:	d9c15115 	stw	r7,1348(sp)
   84150:	00824b00 	call	824b0 <__mulsi3>
   84154:	b9000007 	ldb	r4,0(r23)
   84158:	d8c14d17 	ldw	r3,1332(sp)
   8415c:	bdc00044 	addi	r23,r23,1
   84160:	d9014d15 	stw	r4,1332(sp)
   84164:	d9414d17 	ldw	r5,1332(sp)
   84168:	1885883a 	add	r2,r3,r2
   8416c:	113ff404 	addi	r4,r2,-48
   84170:	28bff404 	addi	r2,r5,-48
   84174:	d9c15117 	ldw	r7,1348(sp)
   84178:	80bff32e 	bgeu	r16,r2,84148 <___vfprintf_internal_r+0x11d8>
   8417c:	d9014a15 	stw	r4,1320(sp)
   84180:	003bfc06 	br	83174 <___vfprintf_internal_r+0x204>
   84184:	d8814c17 	ldw	r2,1328(sp)
   84188:	b8c00007 	ldb	r3,0(r23)
   8418c:	10802014 	ori	r2,r2,128
   84190:	d8814c15 	stw	r2,1328(sp)
   84194:	003bf506 	br	8316c <___vfprintf_internal_r+0x1fc>
   84198:	b8c00007 	ldb	r3,0(r23)
   8419c:	00800a84 	movi	r2,42
   841a0:	bdc00044 	addi	r23,r23,1
   841a4:	18831826 	beq	r3,r2,84e08 <___vfprintf_internal_r+0x1e98>
   841a8:	d8c14d15 	stw	r3,1332(sp)
   841ac:	18bff404 	addi	r2,r3,-48
   841b0:	00c00244 	movi	r3,9
   841b4:	18827b36 	bltu	r3,r2,84ba4 <___vfprintf_internal_r+0x1c34>
   841b8:	1821883a 	mov	r16,r3
   841bc:	0009883a 	mov	r4,zero
   841c0:	01400284 	movi	r5,10
   841c4:	d9c15115 	stw	r7,1348(sp)
   841c8:	00824b00 	call	824b0 <__mulsi3>
   841cc:	d9414d17 	ldw	r5,1332(sp)
   841d0:	b9800007 	ldb	r6,0(r23)
   841d4:	d9c15117 	ldw	r7,1348(sp)
   841d8:	1145883a 	add	r2,r2,r5
   841dc:	113ff404 	addi	r4,r2,-48
   841e0:	30bff404 	addi	r2,r6,-48
   841e4:	d9814d15 	stw	r6,1332(sp)
   841e8:	bdc00044 	addi	r23,r23,1
   841ec:	80bff42e 	bgeu	r16,r2,841c0 <___vfprintf_internal_r+0x1250>
   841f0:	2027883a 	mov	r19,r4
   841f4:	203bdf0e 	bge	r4,zero,83174 <___vfprintf_internal_r+0x204>
   841f8:	04ffffc4 	movi	r19,-1
   841fc:	003bdd06 	br	83174 <___vfprintf_internal_r+0x204>
   84200:	d8000405 	stb	zero,16(sp)
   84204:	39800017 	ldw	r6,0(r7)
   84208:	39c00104 	addi	r7,r7,4
   8420c:	d9c14015 	stw	r7,1280(sp)
   84210:	d9814115 	stw	r6,1284(sp)
   84214:	3001c926 	beq	r6,zero,8493c <___vfprintf_internal_r+0x19cc>
   84218:	98000e16 	blt	r19,zero,84254 <___vfprintf_internal_r+0x12e4>
   8421c:	d9014117 	ldw	r4,1284(sp)
   84220:	000b883a 	mov	r5,zero
   84224:	980d883a 	mov	r6,r19
   84228:	00879640 	call	87964 <memchr>
   8422c:	10025926 	beq	r2,zero,84b94 <___vfprintf_internal_r+0x1c24>
   84230:	d8c14117 	ldw	r3,1284(sp)
   84234:	10cfc83a 	sub	r7,r2,r3
   84238:	99c19e16 	blt	r19,r7,848b4 <___vfprintf_internal_r+0x1944>
   8423c:	d9c14515 	stw	r7,1300(sp)
   84240:	38000916 	blt	r7,zero,84268 <___vfprintf_internal_r+0x12f8>
   84244:	d8014615 	stw	zero,1304(sp)
   84248:	003deb06 	br	839f8 <___vfprintf_internal_r+0xa88>
   8424c:	b8c00007 	ldb	r3,0(r23)
   84250:	003bc606 	br	8316c <___vfprintf_internal_r+0x1fc>
   84254:	d9014117 	ldw	r4,1284(sp)
   84258:	0082ea40 	call	82ea4 <strlen>
   8425c:	d8814515 	stw	r2,1300(sp)
   84260:	100f883a 	mov	r7,r2
   84264:	103ff70e 	bge	r2,zero,84244 <___vfprintf_internal_r+0x12d4>
   84268:	d8014515 	stw	zero,1300(sp)
   8426c:	d8014615 	stw	zero,1304(sp)
   84270:	003de106 	br	839f8 <___vfprintf_internal_r+0xa88>
   84274:	20c03fcc 	andi	r3,r4,255
   84278:	00800044 	movi	r2,1
   8427c:	18802d26 	beq	r3,r2,84334 <___vfprintf_internal_r+0x13c4>
   84280:	18800e36 	bltu	r3,r2,842bc <___vfprintf_internal_r+0x134c>
   84284:	00800084 	movi	r2,2
   84288:	1880fa26 	beq	r3,r2,84674 <___vfprintf_internal_r+0x1704>
   8428c:	01000274 	movhi	r4,9
   84290:	21395004 	addi	r4,r4,-6848
   84294:	0082ea40 	call	82ea4 <strlen>
   84298:	100f883a 	mov	r7,r2
   8429c:	dcc14515 	stw	r19,1300(sp)
   842a0:	9880010e 	bge	r19,r2,842a8 <___vfprintf_internal_r+0x1338>
   842a4:	d8814515 	stw	r2,1300(sp)
   842a8:	00800274 	movhi	r2,9
   842ac:	10b95004 	addi	r2,r2,-6848
   842b0:	dcc14615 	stw	r19,1304(sp)
   842b4:	d8814115 	stw	r2,1284(sp)
   842b8:	003dcf06 	br	839f8 <___vfprintf_internal_r+0xa88>
   842bc:	d9401904 	addi	r5,sp,100
   842c0:	dd000f04 	addi	r20,sp,60
   842c4:	d9414115 	stw	r5,1284(sp)
   842c8:	880a977a 	slli	r5,r17,29
   842cc:	d9814117 	ldw	r6,1284(sp)
   842d0:	8004d0fa 	srli	r2,r16,3
   842d4:	8806d0fa 	srli	r3,r17,3
   842d8:	810001cc 	andi	r4,r16,7
   842dc:	2884b03a 	or	r2,r5,r2
   842e0:	31bfffc4 	addi	r6,r6,-1
   842e4:	21000c04 	addi	r4,r4,48
   842e8:	d9814115 	stw	r6,1284(sp)
   842ec:	10cab03a 	or	r5,r2,r3
   842f0:	31000005 	stb	r4,0(r6)
   842f4:	1021883a 	mov	r16,r2
   842f8:	1823883a 	mov	r17,r3
   842fc:	283ff21e 	bne	r5,zero,842c8 <___vfprintf_internal_r+0x1358>
   84300:	d8c14c17 	ldw	r3,1328(sp)
   84304:	1880004c 	andi	r2,r3,1
   84308:	1005003a 	cmpeq	r2,r2,zero
   8430c:	103db31e 	bne	r2,zero,839dc <___vfprintf_internal_r+0xa6c>
   84310:	20803fcc 	andi	r2,r4,255
   84314:	1080201c 	xori	r2,r2,128
   84318:	10bfe004 	addi	r2,r2,-128
   8431c:	00c00c04 	movi	r3,48
   84320:	10fdae26 	beq	r2,r3,839dc <___vfprintf_internal_r+0xa6c>
   84324:	31bfffc4 	addi	r6,r6,-1
   84328:	d9814115 	stw	r6,1284(sp)
   8432c:	30c00005 	stb	r3,0(r6)
   84330:	003daa06 	br	839dc <___vfprintf_internal_r+0xa6c>
   84334:	88800068 	cmpgeui	r2,r17,1
   84338:	10002c1e 	bne	r2,zero,843ec <___vfprintf_internal_r+0x147c>
   8433c:	8800021e 	bne	r17,zero,84348 <___vfprintf_internal_r+0x13d8>
   84340:	00800244 	movi	r2,9
   84344:	14002936 	bltu	r2,r16,843ec <___vfprintf_internal_r+0x147c>
   84348:	d90018c4 	addi	r4,sp,99
   8434c:	dd000f04 	addi	r20,sp,60
   84350:	d9014115 	stw	r4,1284(sp)
   84354:	d9014117 	ldw	r4,1284(sp)
   84358:	80800c04 	addi	r2,r16,48
   8435c:	20800005 	stb	r2,0(r4)
   84360:	003d9e06 	br	839dc <___vfprintf_internal_r+0xa6c>
   84364:	dc400d17 	ldw	r17,52(sp)
   84368:	07000274 	movhi	fp,9
   8436c:	e7395784 	addi	fp,fp,-6818
   84370:	9425883a 	add	r18,r18,r16
   84374:	8c400044 	addi	r17,r17,1
   84378:	008001c4 	movi	r2,7
   8437c:	1f000015 	stw	fp,0(r3)
   84380:	1c000115 	stw	r16,4(r3)
   84384:	dc800e15 	stw	r18,56(sp)
   84388:	dc400d15 	stw	r17,52(sp)
   8438c:	147ddc16 	blt	r2,r17,83b00 <___vfprintf_internal_r+0xb90>
   84390:	18c00204 	addi	r3,r3,8
   84394:	003c7406 	br	83568 <___vfprintf_internal_r+0x5f8>
   84398:	01000084 	movi	r4,2
   8439c:	d8000405 	stb	zero,16(sp)
   843a0:	003d8106 	br	839a8 <___vfprintf_internal_r+0xa38>
   843a4:	d9814c17 	ldw	r6,1328(sp)
   843a8:	30c4703a 	and	r2,r6,r3
   843ac:	1005003a 	cmpeq	r2,r2,zero
   843b0:	103cb326 	beq	r2,zero,83680 <___vfprintf_internal_r+0x710>
   843b4:	d9014117 	ldw	r4,1284(sp)
   843b8:	94800044 	addi	r18,r18,1
   843bc:	8c400044 	addi	r17,r17,1
   843c0:	008001c4 	movi	r2,7
   843c4:	a9000015 	stw	r4,0(r21)
   843c8:	a8c00115 	stw	r3,4(r21)
   843cc:	dc800e15 	stw	r18,56(sp)
   843d0:	dc400d15 	stw	r17,52(sp)
   843d4:	147e6016 	blt	r2,r17,83d58 <___vfprintf_internal_r+0xde8>
   843d8:	acc00204 	addi	r19,r21,8
   843dc:	003cd106 	br	83724 <___vfprintf_internal_r+0x7b4>
   843e0:	07000274 	movhi	fp,9
   843e4:	e7395784 	addi	fp,fp,-6818
   843e8:	003c4906 	br	83510 <___vfprintf_internal_r+0x5a0>
   843ec:	dd000f04 	addi	r20,sp,60
   843f0:	dc801904 	addi	r18,sp,100
   843f4:	8009883a 	mov	r4,r16
   843f8:	880b883a 	mov	r5,r17
   843fc:	01800284 	movi	r6,10
   84400:	000f883a 	mov	r7,zero
   84404:	008a3a40 	call	8a3a4 <__umoddi3>
   84408:	12000c04 	addi	r8,r2,48
   8440c:	94bfffc4 	addi	r18,r18,-1
   84410:	8009883a 	mov	r4,r16
   84414:	880b883a 	mov	r5,r17
   84418:	01800284 	movi	r6,10
   8441c:	000f883a 	mov	r7,zero
   84420:	92000005 	stb	r8,0(r18)
   84424:	0089d380 	call	89d38 <__udivdi3>
   84428:	1009883a 	mov	r4,r2
   8442c:	1021883a 	mov	r16,r2
   84430:	18800068 	cmpgeui	r2,r3,1
   84434:	1823883a 	mov	r17,r3
   84438:	103fee1e 	bne	r2,zero,843f4 <___vfprintf_internal_r+0x1484>
   8443c:	1800021e 	bne	r3,zero,84448 <___vfprintf_internal_r+0x14d8>
   84440:	00800244 	movi	r2,9
   84444:	113feb36 	bltu	r2,r4,843f4 <___vfprintf_internal_r+0x1484>
   84448:	94bfffc4 	addi	r18,r18,-1
   8444c:	dc814115 	stw	r18,1284(sp)
   84450:	003fc006 	br	84354 <___vfprintf_internal_r+0x13e4>
   84454:	d9014c17 	ldw	r4,1328(sp)
   84458:	2080004c 	andi	r2,r4,1
   8445c:	10009a1e 	bne	r2,zero,846c8 <___vfprintf_internal_r+0x1758>
   84460:	d9401904 	addi	r5,sp,100
   84464:	dd000f04 	addi	r20,sp,60
   84468:	d9414115 	stw	r5,1284(sp)
   8446c:	003d5b06 	br	839dc <___vfprintf_internal_r+0xa6c>
   84470:	d9014f17 	ldw	r4,1340(sp)
   84474:	b00b883a 	mov	r5,r22
   84478:	d9800c04 	addi	r6,sp,48
   8447c:	0082f180 	call	82f18 <__sprint_r>
   84480:	103c731e 	bne	r2,zero,83650 <___vfprintf_internal_r+0x6e0>
   84484:	dc800e17 	ldw	r18,56(sp)
   84488:	d8c01904 	addi	r3,sp,100
   8448c:	003cf906 	br	83874 <___vfprintf_internal_r+0x904>
   84490:	d8c14c17 	ldw	r3,1328(sp)
   84494:	1880040c 	andi	r2,r3,16
   84498:	1000711e 	bne	r2,zero,84660 <___vfprintf_internal_r+0x16f0>
   8449c:	d9014c17 	ldw	r4,1328(sp)
   844a0:	2080100c 	andi	r2,r4,64
   844a4:	10006e26 	beq	r2,zero,84660 <___vfprintf_internal_r+0x16f0>
   844a8:	3c00000b 	ldhu	r16,0(r7)
   844ac:	0023883a 	mov	r17,zero
   844b0:	39c00104 	addi	r7,r7,4
   844b4:	d9c14015 	stw	r7,1280(sp)
   844b8:	003efa06 	br	840a4 <___vfprintf_internal_r+0x1134>
   844bc:	dc400d17 	ldw	r17,52(sp)
   844c0:	07000274 	movhi	fp,9
   844c4:	e7395784 	addi	fp,fp,-6818
   844c8:	9425883a 	add	r18,r18,r16
   844cc:	8c400044 	addi	r17,r17,1
   844d0:	008001c4 	movi	r2,7
   844d4:	1f000015 	stw	fp,0(r3)
   844d8:	1c000115 	stw	r16,4(r3)
   844dc:	dc800e15 	stw	r18,56(sp)
   844e0:	dc400d15 	stw	r17,52(sp)
   844e4:	147d7016 	blt	r2,r17,83aa8 <___vfprintf_internal_r+0xb38>
   844e8:	18c00204 	addi	r3,r3,8
   844ec:	003d7506 	br	83ac4 <___vfprintf_internal_r+0xb54>
   844f0:	dc800e17 	ldw	r18,56(sp)
   844f4:	dc400d17 	ldw	r17,52(sp)
   844f8:	07000274 	movhi	fp,9
   844fc:	e7395b84 	addi	fp,fp,-6802
   84500:	003bba06 	br	833ec <___vfprintf_internal_r+0x47c>
   84504:	d9014f17 	ldw	r4,1340(sp)
   84508:	b00b883a 	mov	r5,r22
   8450c:	d9800c04 	addi	r6,sp,48
   84510:	0082f180 	call	82f18 <__sprint_r>
   84514:	103c4e1e 	bne	r2,zero,83650 <___vfprintf_internal_r+0x6e0>
   84518:	dc800e17 	ldw	r18,56(sp)
   8451c:	d8c01904 	addi	r3,sp,100
   84520:	003ce306 	br	838b0 <___vfprintf_internal_r+0x940>
   84524:	3c000017 	ldw	r16,0(r7)
   84528:	0009883a 	mov	r4,zero
   8452c:	39c00104 	addi	r7,r7,4
   84530:	0023883a 	mov	r17,zero
   84534:	d9c14015 	stw	r7,1280(sp)
   84538:	d8000405 	stb	zero,16(sp)
   8453c:	003d1a06 	br	839a8 <___vfprintf_internal_r+0xa38>
   84540:	38800017 	ldw	r2,0(r7)
   84544:	39c00104 	addi	r7,r7,4
   84548:	d9c14015 	stw	r7,1280(sp)
   8454c:	1023d7fa 	srai	r17,r2,31
   84550:	1021883a 	mov	r16,r2
   84554:	003d1206 	br	839a0 <___vfprintf_internal_r+0xa30>
   84558:	3c000017 	ldw	r16,0(r7)
   8455c:	01000044 	movi	r4,1
   84560:	39c00104 	addi	r7,r7,4
   84564:	0023883a 	mov	r17,zero
   84568:	d9c14015 	stw	r7,1280(sp)
   8456c:	d8000405 	stb	zero,16(sp)
   84570:	003d0d06 	br	839a8 <___vfprintf_internal_r+0xa38>
   84574:	00800274 	movhi	r2,9
   84578:	10b95704 	addi	r2,r2,-6820
   8457c:	94800044 	addi	r18,r18,1
   84580:	8c400044 	addi	r17,r17,1
   84584:	a8800015 	stw	r2,0(r21)
   84588:	00c00044 	movi	r3,1
   8458c:	008001c4 	movi	r2,7
   84590:	a8c00115 	stw	r3,4(r21)
   84594:	dc800e15 	stw	r18,56(sp)
   84598:	dc400d15 	stw	r17,52(sp)
   8459c:	1440ca16 	blt	r2,r17,848c8 <___vfprintf_internal_r+0x1958>
   845a0:	a8c00204 	addi	r3,r21,8
   845a4:	2000061e 	bne	r4,zero,845c0 <___vfprintf_internal_r+0x1650>
   845a8:	d9414717 	ldw	r5,1308(sp)
   845ac:	2800041e 	bne	r5,zero,845c0 <___vfprintf_internal_r+0x1650>
   845b0:	d9814c17 	ldw	r6,1328(sp)
   845b4:	3080004c 	andi	r2,r6,1
   845b8:	1005003a 	cmpeq	r2,r2,zero
   845bc:	103bea1e 	bne	r2,zero,83568 <___vfprintf_internal_r+0x5f8>
   845c0:	00800044 	movi	r2,1
   845c4:	dc400d17 	ldw	r17,52(sp)
   845c8:	18800115 	stw	r2,4(r3)
   845cc:	d8814917 	ldw	r2,1316(sp)
   845d0:	94800044 	addi	r18,r18,1
   845d4:	8c400044 	addi	r17,r17,1
   845d8:	18800015 	stw	r2,0(r3)
   845dc:	008001c4 	movi	r2,7
   845e0:	dc800e15 	stw	r18,56(sp)
   845e4:	dc400d15 	stw	r17,52(sp)
   845e8:	1440ca16 	blt	r2,r17,84914 <___vfprintf_internal_r+0x19a4>
   845ec:	18c00204 	addi	r3,r3,8
   845f0:	0121c83a 	sub	r16,zero,r4
   845f4:	0400500e 	bge	zero,r16,84738 <___vfprintf_internal_r+0x17c8>
   845f8:	00800404 	movi	r2,16
   845fc:	1400800e 	bge	r2,r16,84800 <___vfprintf_internal_r+0x1890>
   84600:	1027883a 	mov	r19,r2
   84604:	07000274 	movhi	fp,9
   84608:	e7395784 	addi	fp,fp,-6818
   8460c:	050001c4 	movi	r20,7
   84610:	00000306 	br	84620 <___vfprintf_internal_r+0x16b0>
   84614:	18c00204 	addi	r3,r3,8
   84618:	843ffc04 	addi	r16,r16,-16
   8461c:	9c007a0e 	bge	r19,r16,84808 <___vfprintf_internal_r+0x1898>
   84620:	94800404 	addi	r18,r18,16
   84624:	8c400044 	addi	r17,r17,1
   84628:	1f000015 	stw	fp,0(r3)
   8462c:	1cc00115 	stw	r19,4(r3)
   84630:	dc800e15 	stw	r18,56(sp)
   84634:	dc400d15 	stw	r17,52(sp)
   84638:	a47ff60e 	bge	r20,r17,84614 <___vfprintf_internal_r+0x16a4>
   8463c:	d9014f17 	ldw	r4,1340(sp)
   84640:	b00b883a 	mov	r5,r22
   84644:	d9800c04 	addi	r6,sp,48
   84648:	0082f180 	call	82f18 <__sprint_r>
   8464c:	103c001e 	bne	r2,zero,83650 <___vfprintf_internal_r+0x6e0>
   84650:	dc800e17 	ldw	r18,56(sp)
   84654:	dc400d17 	ldw	r17,52(sp)
   84658:	d8c01904 	addi	r3,sp,100
   8465c:	003fee06 	br	84618 <___vfprintf_internal_r+0x16a8>
   84660:	3c000017 	ldw	r16,0(r7)
   84664:	0023883a 	mov	r17,zero
   84668:	39c00104 	addi	r7,r7,4
   8466c:	d9c14015 	stw	r7,1280(sp)
   84670:	003e8c06 	br	840a4 <___vfprintf_internal_r+0x1134>
   84674:	d9401904 	addi	r5,sp,100
   84678:	dd000f04 	addi	r20,sp,60
   8467c:	d9414115 	stw	r5,1284(sp)
   84680:	d9814417 	ldw	r6,1296(sp)
   84684:	880a973a 	slli	r5,r17,28
   84688:	8004d13a 	srli	r2,r16,4
   8468c:	810003cc 	andi	r4,r16,15
   84690:	3109883a 	add	r4,r6,r4
   84694:	2884b03a 	or	r2,r5,r2
   84698:	21400003 	ldbu	r5,0(r4)
   8469c:	d9014117 	ldw	r4,1284(sp)
   846a0:	8806d13a 	srli	r3,r17,4
   846a4:	1021883a 	mov	r16,r2
   846a8:	213fffc4 	addi	r4,r4,-1
   846ac:	d9014115 	stw	r4,1284(sp)
   846b0:	d9814117 	ldw	r6,1284(sp)
   846b4:	10c8b03a 	or	r4,r2,r3
   846b8:	1823883a 	mov	r17,r3
   846bc:	31400005 	stb	r5,0(r6)
   846c0:	203fef1e 	bne	r4,zero,84680 <___vfprintf_internal_r+0x1710>
   846c4:	003cc506 	br	839dc <___vfprintf_internal_r+0xa6c>
   846c8:	00800c04 	movi	r2,48
   846cc:	d98018c4 	addi	r6,sp,99
   846d0:	dd000f04 	addi	r20,sp,60
   846d4:	d88018c5 	stb	r2,99(sp)
   846d8:	d9814115 	stw	r6,1284(sp)
   846dc:	003cbf06 	br	839dc <___vfprintf_internal_r+0xa6c>
   846e0:	dc400d17 	ldw	r17,52(sp)
   846e4:	07000274 	movhi	fp,9
   846e8:	e7395b84 	addi	fp,fp,-6802
   846ec:	003bc106 	br	835f4 <___vfprintf_internal_r+0x684>
   846f0:	d9414c17 	ldw	r5,1328(sp)
   846f4:	2880040c 	andi	r2,r5,16
   846f8:	10007c26 	beq	r2,zero,848ec <___vfprintf_internal_r+0x197c>
   846fc:	38800017 	ldw	r2,0(r7)
   84700:	39c00104 	addi	r7,r7,4
   84704:	d9c14015 	stw	r7,1280(sp)
   84708:	d9814b17 	ldw	r6,1324(sp)
   8470c:	d9c14017 	ldw	r7,1280(sp)
   84710:	11800015 	stw	r6,0(r2)
   84714:	003a7206 	br	830e0 <___vfprintf_internal_r+0x170>
   84718:	d9014f17 	ldw	r4,1340(sp)
   8471c:	b00b883a 	mov	r5,r22
   84720:	d9800c04 	addi	r6,sp,48
   84724:	0082f180 	call	82f18 <__sprint_r>
   84728:	103bc91e 	bne	r2,zero,83650 <___vfprintf_internal_r+0x6e0>
   8472c:	dc800e17 	ldw	r18,56(sp)
   84730:	dc400d17 	ldw	r17,52(sp)
   84734:	d8c01904 	addi	r3,sp,100
   84738:	d9014717 	ldw	r4,1308(sp)
   8473c:	d9414117 	ldw	r5,1284(sp)
   84740:	8c400044 	addi	r17,r17,1
   84744:	9125883a 	add	r18,r18,r4
   84748:	008001c4 	movi	r2,7
   8474c:	19400015 	stw	r5,0(r3)
   84750:	19000115 	stw	r4,4(r3)
   84754:	dc800e15 	stw	r18,56(sp)
   84758:	dc400d15 	stw	r17,52(sp)
   8475c:	147ce816 	blt	r2,r17,83b00 <___vfprintf_internal_r+0xb90>
   84760:	18c00204 	addi	r3,r3,8
   84764:	003b8006 	br	83568 <___vfprintf_internal_r+0x5f8>
   84768:	38c00017 	ldw	r3,0(r7)
   8476c:	39000204 	addi	r4,r7,8
   84770:	d9014015 	stw	r4,1280(sp)
   84774:	d8c14215 	stw	r3,1288(sp)
   84778:	39c00117 	ldw	r7,4(r7)
   8477c:	d9c14315 	stw	r7,1292(sp)
   84780:	003e1a06 	br	83fec <___vfprintf_internal_r+0x107c>
   84784:	0005883a 	mov	r2,zero
   84788:	1409c83a 	sub	r4,r2,r16
   8478c:	1105803a 	cmpltu	r2,r2,r4
   84790:	044bc83a 	sub	r5,zero,r17
   84794:	2885c83a 	sub	r2,r5,r2
   84798:	2021883a 	mov	r16,r4
   8479c:	1023883a 	mov	r17,r2
   847a0:	01000044 	movi	r4,1
   847a4:	00800b44 	movi	r2,45
   847a8:	d8800405 	stb	r2,16(sp)
   847ac:	003c7e06 	br	839a8 <___vfprintf_internal_r+0xa38>
   847b0:	d9014f17 	ldw	r4,1340(sp)
   847b4:	b00b883a 	mov	r5,r22
   847b8:	d9800c04 	addi	r6,sp,48
   847bc:	0082f180 	call	82f18 <__sprint_r>
   847c0:	103ba31e 	bne	r2,zero,83650 <___vfprintf_internal_r+0x6e0>
   847c4:	dc800e17 	ldw	r18,56(sp)
   847c8:	dc400d17 	ldw	r17,52(sp)
   847cc:	d9000517 	ldw	r4,20(sp)
   847d0:	d9401904 	addi	r5,sp,100
   847d4:	003da106 	br	83e5c <___vfprintf_internal_r+0xeec>
   847d8:	d9014f17 	ldw	r4,1340(sp)
   847dc:	b00b883a 	mov	r5,r22
   847e0:	d9800c04 	addi	r6,sp,48
   847e4:	0082f180 	call	82f18 <__sprint_r>
   847e8:	103b991e 	bne	r2,zero,83650 <___vfprintf_internal_r+0x6e0>
   847ec:	dc800e17 	ldw	r18,56(sp)
   847f0:	dc400d17 	ldw	r17,52(sp)
   847f4:	d9000517 	ldw	r4,20(sp)
   847f8:	d8c01904 	addi	r3,sp,100
   847fc:	003d8b06 	br	83e2c <___vfprintf_internal_r+0xebc>
   84800:	07000274 	movhi	fp,9
   84804:	e7395784 	addi	fp,fp,-6818
   84808:	9425883a 	add	r18,r18,r16
   8480c:	8c400044 	addi	r17,r17,1
   84810:	008001c4 	movi	r2,7
   84814:	1f000015 	stw	fp,0(r3)
   84818:	1c000115 	stw	r16,4(r3)
   8481c:	dc800e15 	stw	r18,56(sp)
   84820:	dc400d15 	stw	r17,52(sp)
   84824:	147fbc16 	blt	r2,r17,84718 <___vfprintf_internal_r+0x17a8>
   84828:	18c00204 	addi	r3,r3,8
   8482c:	003fc206 	br	84738 <___vfprintf_internal_r+0x17c8>
   84830:	d9014f17 	ldw	r4,1340(sp)
   84834:	b00b883a 	mov	r5,r22
   84838:	d9800c04 	addi	r6,sp,48
   8483c:	0082f180 	call	82f18 <__sprint_r>
   84840:	103b831e 	bne	r2,zero,83650 <___vfprintf_internal_r+0x6e0>
   84844:	dc800e17 	ldw	r18,56(sp)
   84848:	d9000517 	ldw	r4,20(sp)
   8484c:	d8c01904 	addi	r3,sp,100
   84850:	003cfc06 	br	83c44 <___vfprintf_internal_r+0xcd4>
   84854:	07000274 	movhi	fp,9
   84858:	e7395784 	addi	fp,fp,-6818
   8485c:	003bde06 	br	837d8 <___vfprintf_internal_r+0x868>
   84860:	00800274 	movhi	r2,9
   84864:	10b94604 	addi	r2,r2,-6888
   84868:	d8814115 	stw	r2,1284(sp)
   8486c:	003def06 	br	8402c <___vfprintf_internal_r+0x10bc>
   84870:	d9014217 	ldw	r4,1288(sp)
   84874:	d9414317 	ldw	r5,1292(sp)
   84878:	008950c0 	call	8950c <__isnand>
   8487c:	10003926 	beq	r2,zero,84964 <___vfprintf_internal_r+0x19f4>
   84880:	d9414d17 	ldw	r5,1332(sp)
   84884:	008011c4 	movi	r2,71
   84888:	1140ce16 	blt	r2,r5,84bc4 <___vfprintf_internal_r+0x1c54>
   8488c:	01800274 	movhi	r6,9
   84890:	31b94704 	addi	r6,r6,-6884
   84894:	d9814115 	stw	r6,1284(sp)
   84898:	003de406 	br	8402c <___vfprintf_internal_r+0x10bc>
   8489c:	d9014c17 	ldw	r4,1328(sp)
   848a0:	bdc00044 	addi	r23,r23,1
   848a4:	b8c00007 	ldb	r3,0(r23)
   848a8:	21000814 	ori	r4,r4,32
   848ac:	d9014c15 	stw	r4,1328(sp)
   848b0:	003a2e06 	br	8316c <___vfprintf_internal_r+0x1fc>
   848b4:	dcc14515 	stw	r19,1300(sp)
   848b8:	98011016 	blt	r19,zero,84cfc <___vfprintf_internal_r+0x1d8c>
   848bc:	980f883a 	mov	r7,r19
   848c0:	d8014615 	stw	zero,1304(sp)
   848c4:	003c4c06 	br	839f8 <___vfprintf_internal_r+0xa88>
   848c8:	d9014f17 	ldw	r4,1340(sp)
   848cc:	b00b883a 	mov	r5,r22
   848d0:	d9800c04 	addi	r6,sp,48
   848d4:	0082f180 	call	82f18 <__sprint_r>
   848d8:	103b5d1e 	bne	r2,zero,83650 <___vfprintf_internal_r+0x6e0>
   848dc:	dc800e17 	ldw	r18,56(sp)
   848e0:	d9000517 	ldw	r4,20(sp)
   848e4:	d8c01904 	addi	r3,sp,100
   848e8:	003f2e06 	br	845a4 <___vfprintf_internal_r+0x1634>
   848ec:	d8c14c17 	ldw	r3,1328(sp)
   848f0:	1880100c 	andi	r2,r3,64
   848f4:	1000a026 	beq	r2,zero,84b78 <___vfprintf_internal_r+0x1c08>
   848f8:	38800017 	ldw	r2,0(r7)
   848fc:	39c00104 	addi	r7,r7,4
   84900:	d9c14015 	stw	r7,1280(sp)
   84904:	d9014b17 	ldw	r4,1324(sp)
   84908:	d9c14017 	ldw	r7,1280(sp)
   8490c:	1100000d 	sth	r4,0(r2)
   84910:	0039f306 	br	830e0 <___vfprintf_internal_r+0x170>
   84914:	d9014f17 	ldw	r4,1340(sp)
   84918:	b00b883a 	mov	r5,r22
   8491c:	d9800c04 	addi	r6,sp,48
   84920:	0082f180 	call	82f18 <__sprint_r>
   84924:	103b4a1e 	bne	r2,zero,83650 <___vfprintf_internal_r+0x6e0>
   84928:	dc800e17 	ldw	r18,56(sp)
   8492c:	dc400d17 	ldw	r17,52(sp)
   84930:	d9000517 	ldw	r4,20(sp)
   84934:	d8c01904 	addi	r3,sp,100
   84938:	003f2d06 	br	845f0 <___vfprintf_internal_r+0x1680>
   8493c:	00800184 	movi	r2,6
   84940:	14c09a36 	bltu	r2,r19,84bac <___vfprintf_internal_r+0x1c3c>
   84944:	dcc14515 	stw	r19,1300(sp)
   84948:	9800010e 	bge	r19,zero,84950 <___vfprintf_internal_r+0x19e0>
   8494c:	d8014515 	stw	zero,1300(sp)
   84950:	00800274 	movhi	r2,9
   84954:	10b94904 	addi	r2,r2,-6876
   84958:	980f883a 	mov	r7,r19
   8495c:	d8814115 	stw	r2,1284(sp)
   84960:	003a7206 	br	8332c <___vfprintf_internal_r+0x3bc>
   84964:	00bfffc4 	movi	r2,-1
   84968:	9880e226 	beq	r19,r2,84cf4 <___vfprintf_internal_r+0x1d84>
   8496c:	d9414d17 	ldw	r5,1332(sp)
   84970:	008019c4 	movi	r2,103
   84974:	2880dc26 	beq	r5,r2,84ce8 <___vfprintf_internal_r+0x1d78>
   84978:	008011c4 	movi	r2,71
   8497c:	2880da26 	beq	r5,r2,84ce8 <___vfprintf_internal_r+0x1d78>
   84980:	d9414c17 	ldw	r5,1328(sp)
   84984:	d9014317 	ldw	r4,1292(sp)
   84988:	d9814217 	ldw	r6,1288(sp)
   8498c:	29404014 	ori	r5,r5,256
   84990:	d9414c15 	stw	r5,1328(sp)
   84994:	2000cc16 	blt	r4,zero,84cc8 <___vfprintf_internal_r+0x1d58>
   84998:	3021883a 	mov	r16,r6
   8499c:	2023883a 	mov	r17,r4
   849a0:	0039883a 	mov	fp,zero
   849a4:	d9414d17 	ldw	r5,1332(sp)
   849a8:	00801984 	movi	r2,102
   849ac:	2880b726 	beq	r5,r2,84c8c <___vfprintf_internal_r+0x1d1c>
   849b0:	00801184 	movi	r2,70
   849b4:	2880b526 	beq	r5,r2,84c8c <___vfprintf_internal_r+0x1d1c>
   849b8:	00801944 	movi	r2,101
   849bc:	2880c826 	beq	r5,r2,84ce0 <___vfprintf_internal_r+0x1d70>
   849c0:	00801144 	movi	r2,69
   849c4:	2880c626 	beq	r5,r2,84ce0 <___vfprintf_internal_r+0x1d70>
   849c8:	9829883a 	mov	r20,r19
   849cc:	d9014f17 	ldw	r4,1340(sp)
   849d0:	d8800504 	addi	r2,sp,20
   849d4:	880d883a 	mov	r6,r17
   849d8:	d8800115 	stw	r2,4(sp)
   849dc:	d8c00604 	addi	r3,sp,24
   849e0:	d8800704 	addi	r2,sp,28
   849e4:	800b883a 	mov	r5,r16
   849e8:	01c00084 	movi	r7,2
   849ec:	d8c00215 	stw	r3,8(sp)
   849f0:	d8800315 	stw	r2,12(sp)
   849f4:	dd000015 	stw	r20,0(sp)
   849f8:	00851d80 	call	851d8 <_dtoa_r>
   849fc:	d9814d17 	ldw	r6,1332(sp)
   84a00:	d8814115 	stw	r2,1284(sp)
   84a04:	008019c4 	movi	r2,103
   84a08:	30809526 	beq	r6,r2,84c60 <___vfprintf_internal_r+0x1cf0>
   84a0c:	d8c14d17 	ldw	r3,1332(sp)
   84a10:	008011c4 	movi	r2,71
   84a14:	18809226 	beq	r3,r2,84c60 <___vfprintf_internal_r+0x1cf0>
   84a18:	d9414117 	ldw	r5,1284(sp)
   84a1c:	d9814d17 	ldw	r6,1332(sp)
   84a20:	00801984 	movi	r2,102
   84a24:	2d25883a 	add	r18,r5,r20
   84a28:	30808626 	beq	r6,r2,84c44 <___vfprintf_internal_r+0x1cd4>
   84a2c:	00801184 	movi	r2,70
   84a30:	30808426 	beq	r6,r2,84c44 <___vfprintf_internal_r+0x1cd4>
   84a34:	000d883a 	mov	r6,zero
   84a38:	000f883a 	mov	r7,zero
   84a3c:	880b883a 	mov	r5,r17
   84a40:	8009883a 	mov	r4,r16
   84a44:	008aa040 	call	8aa04 <__eqdf2>
   84a48:	1000751e 	bne	r2,zero,84c20 <___vfprintf_internal_r+0x1cb0>
   84a4c:	9005883a 	mov	r2,r18
   84a50:	dc800715 	stw	r18,28(sp)
   84a54:	d9014117 	ldw	r4,1284(sp)
   84a58:	d9414d17 	ldw	r5,1332(sp)
   84a5c:	00c019c4 	movi	r3,103
   84a60:	1125c83a 	sub	r18,r2,r4
   84a64:	28c06826 	beq	r5,r3,84c08 <___vfprintf_internal_r+0x1c98>
   84a68:	008011c4 	movi	r2,71
   84a6c:	28806626 	beq	r5,r2,84c08 <___vfprintf_internal_r+0x1c98>
   84a70:	d9000517 	ldw	r4,20(sp)
   84a74:	d8c14d17 	ldw	r3,1332(sp)
   84a78:	00801944 	movi	r2,101
   84a7c:	10c05516 	blt	r2,r3,84bd4 <___vfprintf_internal_r+0x1c64>
   84a80:	213fffc4 	addi	r4,r4,-1
   84a84:	d9000515 	stw	r4,20(sp)
   84a88:	d8c00805 	stb	r3,32(sp)
   84a8c:	2021883a 	mov	r16,r4
   84a90:	2000c116 	blt	r4,zero,84d98 <___vfprintf_internal_r+0x1e28>
   84a94:	00800ac4 	movi	r2,43
   84a98:	d8800845 	stb	r2,33(sp)
   84a9c:	00800244 	movi	r2,9
   84aa0:	1400af0e 	bge	r2,r16,84d60 <___vfprintf_internal_r+0x1df0>
   84aa4:	1027883a 	mov	r19,r2
   84aa8:	dc400b84 	addi	r17,sp,46
   84aac:	8009883a 	mov	r4,r16
   84ab0:	01400284 	movi	r5,10
   84ab4:	0081e500 	call	81e50 <__modsi3>
   84ab8:	10800c04 	addi	r2,r2,48
   84abc:	8c7fffc4 	addi	r17,r17,-1
   84ac0:	8009883a 	mov	r4,r16
   84ac4:	01400284 	movi	r5,10
   84ac8:	88800005 	stb	r2,0(r17)
   84acc:	0081df00 	call	81df0 <__divsi3>
   84ad0:	1021883a 	mov	r16,r2
   84ad4:	98bff516 	blt	r19,r2,84aac <___vfprintf_internal_r+0x1b3c>
   84ad8:	10c00c04 	addi	r3,r2,48
   84adc:	d88009c4 	addi	r2,sp,39
   84ae0:	108001c4 	addi	r2,r2,7
   84ae4:	897fffc4 	addi	r5,r17,-1
   84ae8:	88ffffc5 	stb	r3,-1(r17)
   84aec:	2880a72e 	bgeu	r5,r2,84d8c <___vfprintf_internal_r+0x1e1c>
   84af0:	1009883a 	mov	r4,r2
   84af4:	d9800804 	addi	r6,sp,32
   84af8:	d8c00884 	addi	r3,sp,34
   84afc:	28800003 	ldbu	r2,0(r5)
   84b00:	29400044 	addi	r5,r5,1
   84b04:	18800005 	stb	r2,0(r3)
   84b08:	18c00044 	addi	r3,r3,1
   84b0c:	293ffb36 	bltu	r5,r4,84afc <___vfprintf_internal_r+0x1b8c>
   84b10:	1987c83a 	sub	r3,r3,r6
   84b14:	00800044 	movi	r2,1
   84b18:	d8c14815 	stw	r3,1312(sp)
   84b1c:	90cf883a 	add	r7,r18,r3
   84b20:	1480960e 	bge	r2,r18,84d7c <___vfprintf_internal_r+0x1e0c>
   84b24:	39c00044 	addi	r7,r7,1
   84b28:	d9c14515 	stw	r7,1300(sp)
   84b2c:	38003416 	blt	r7,zero,84c00 <___vfprintf_internal_r+0x1c90>
   84b30:	e0803fcc 	andi	r2,fp,255
   84b34:	1080201c 	xori	r2,r2,128
   84b38:	10bfe004 	addi	r2,r2,-128
   84b3c:	10004e26 	beq	r2,zero,84c78 <___vfprintf_internal_r+0x1d08>
   84b40:	00800b44 	movi	r2,45
   84b44:	dc814715 	stw	r18,1308(sp)
   84b48:	d8014615 	stw	zero,1304(sp)
   84b4c:	d8800405 	stb	r2,16(sp)
   84b50:	003bab06 	br	83a00 <___vfprintf_internal_r+0xa90>
   84b54:	00800b44 	movi	r2,45
   84b58:	d8800405 	stb	r2,16(sp)
   84b5c:	003d2d06 	br	84014 <___vfprintf_internal_r+0x10a4>
   84b60:	d9014f17 	ldw	r4,1340(sp)
   84b64:	b00b883a 	mov	r5,r22
   84b68:	d9800c04 	addi	r6,sp,48
   84b6c:	0082f180 	call	82f18 <__sprint_r>
   84b70:	103ab71e 	bne	r2,zero,83650 <___vfprintf_internal_r+0x6e0>
   84b74:	003ab506 	br	8364c <___vfprintf_internal_r+0x6dc>
   84b78:	38800017 	ldw	r2,0(r7)
   84b7c:	39c00104 	addi	r7,r7,4
   84b80:	d9c14015 	stw	r7,1280(sp)
   84b84:	d9414b17 	ldw	r5,1324(sp)
   84b88:	d9c14017 	ldw	r7,1280(sp)
   84b8c:	11400015 	stw	r5,0(r2)
   84b90:	00395306 	br	830e0 <___vfprintf_internal_r+0x170>
   84b94:	980f883a 	mov	r7,r19
   84b98:	dcc14515 	stw	r19,1300(sp)
   84b9c:	d8014615 	stw	zero,1304(sp)
   84ba0:	003b9506 	br	839f8 <___vfprintf_internal_r+0xa88>
   84ba4:	0027883a 	mov	r19,zero
   84ba8:	00397206 	br	83174 <___vfprintf_internal_r+0x204>
   84bac:	00c00274 	movhi	r3,9
   84bb0:	18f94904 	addi	r3,r3,-6876
   84bb4:	100f883a 	mov	r7,r2
   84bb8:	d8814515 	stw	r2,1300(sp)
   84bbc:	d8c14115 	stw	r3,1284(sp)
   84bc0:	0039da06 	br	8332c <___vfprintf_internal_r+0x3bc>
   84bc4:	00800274 	movhi	r2,9
   84bc8:	10b94804 	addi	r2,r2,-6880
   84bcc:	d8814115 	stw	r2,1284(sp)
   84bd0:	003d1606 	br	8402c <___vfprintf_internal_r+0x10bc>
   84bd4:	d9414d17 	ldw	r5,1332(sp)
   84bd8:	00801984 	movi	r2,102
   84bdc:	28804926 	beq	r5,r2,84d04 <___vfprintf_internal_r+0x1d94>
   84be0:	200f883a 	mov	r7,r4
   84be4:	24805716 	blt	r4,r18,84d44 <___vfprintf_internal_r+0x1dd4>
   84be8:	d9414c17 	ldw	r5,1328(sp)
   84bec:	2880004c 	andi	r2,r5,1
   84bf0:	10000126 	beq	r2,zero,84bf8 <___vfprintf_internal_r+0x1c88>
   84bf4:	21c00044 	addi	r7,r4,1
   84bf8:	d9c14515 	stw	r7,1300(sp)
   84bfc:	383fcc0e 	bge	r7,zero,84b30 <___vfprintf_internal_r+0x1bc0>
   84c00:	d8014515 	stw	zero,1300(sp)
   84c04:	003fca06 	br	84b30 <___vfprintf_internal_r+0x1bc0>
   84c08:	d9000517 	ldw	r4,20(sp)
   84c0c:	00bfff04 	movi	r2,-4
   84c10:	1100480e 	bge	r2,r4,84d34 <___vfprintf_internal_r+0x1dc4>
   84c14:	99004716 	blt	r19,r4,84d34 <___vfprintf_internal_r+0x1dc4>
   84c18:	d8c14d15 	stw	r3,1332(sp)
   84c1c:	003ff006 	br	84be0 <___vfprintf_internal_r+0x1c70>
   84c20:	d8800717 	ldw	r2,28(sp)
   84c24:	14bf8b2e 	bgeu	r2,r18,84a54 <___vfprintf_internal_r+0x1ae4>
   84c28:	9007883a 	mov	r3,r18
   84c2c:	01000c04 	movi	r4,48
   84c30:	11000005 	stb	r4,0(r2)
   84c34:	10800044 	addi	r2,r2,1
   84c38:	d8800715 	stw	r2,28(sp)
   84c3c:	18bffc1e 	bne	r3,r2,84c30 <___vfprintf_internal_r+0x1cc0>
   84c40:	003f8406 	br	84a54 <___vfprintf_internal_r+0x1ae4>
   84c44:	d8814117 	ldw	r2,1284(sp)
   84c48:	10c00007 	ldb	r3,0(r2)
   84c4c:	00800c04 	movi	r2,48
   84c50:	18805b26 	beq	r3,r2,84dc0 <___vfprintf_internal_r+0x1e50>
   84c54:	d9000517 	ldw	r4,20(sp)
   84c58:	9125883a 	add	r18,r18,r4
   84c5c:	003f7506 	br	84a34 <___vfprintf_internal_r+0x1ac4>
   84c60:	d9014c17 	ldw	r4,1328(sp)
   84c64:	2080004c 	andi	r2,r4,1
   84c68:	1005003a 	cmpeq	r2,r2,zero
   84c6c:	103f6a26 	beq	r2,zero,84a18 <___vfprintf_internal_r+0x1aa8>
   84c70:	d8800717 	ldw	r2,28(sp)
   84c74:	003f7706 	br	84a54 <___vfprintf_internal_r+0x1ae4>
   84c78:	d9c14515 	stw	r7,1300(sp)
   84c7c:	38004d16 	blt	r7,zero,84db4 <___vfprintf_internal_r+0x1e44>
   84c80:	dc814715 	stw	r18,1308(sp)
   84c84:	d8014615 	stw	zero,1304(sp)
   84c88:	003b5b06 	br	839f8 <___vfprintf_internal_r+0xa88>
   84c8c:	d9014f17 	ldw	r4,1340(sp)
   84c90:	d8800504 	addi	r2,sp,20
   84c94:	d8800115 	stw	r2,4(sp)
   84c98:	d8c00604 	addi	r3,sp,24
   84c9c:	d8800704 	addi	r2,sp,28
   84ca0:	800b883a 	mov	r5,r16
   84ca4:	880d883a 	mov	r6,r17
   84ca8:	01c000c4 	movi	r7,3
   84cac:	d8c00215 	stw	r3,8(sp)
   84cb0:	d8800315 	stw	r2,12(sp)
   84cb4:	dcc00015 	stw	r19,0(sp)
   84cb8:	9829883a 	mov	r20,r19
   84cbc:	00851d80 	call	851d8 <_dtoa_r>
   84cc0:	d8814115 	stw	r2,1284(sp)
   84cc4:	003f5106 	br	84a0c <___vfprintf_internal_r+0x1a9c>
   84cc8:	d8c14217 	ldw	r3,1288(sp)
   84ccc:	d9014317 	ldw	r4,1292(sp)
   84cd0:	07000b44 	movi	fp,45
   84cd4:	1821883a 	mov	r16,r3
   84cd8:	2460003c 	xorhi	r17,r4,32768
   84cdc:	003f3106 	br	849a4 <___vfprintf_internal_r+0x1a34>
   84ce0:	9d000044 	addi	r20,r19,1
   84ce4:	003f3906 	br	849cc <___vfprintf_internal_r+0x1a5c>
   84ce8:	983f251e 	bne	r19,zero,84980 <___vfprintf_internal_r+0x1a10>
   84cec:	04c00044 	movi	r19,1
   84cf0:	003f2306 	br	84980 <___vfprintf_internal_r+0x1a10>
   84cf4:	04c00184 	movi	r19,6
   84cf8:	003f2106 	br	84980 <___vfprintf_internal_r+0x1a10>
   84cfc:	d8014515 	stw	zero,1300(sp)
   84d00:	003eee06 	br	848bc <___vfprintf_internal_r+0x194c>
   84d04:	200f883a 	mov	r7,r4
   84d08:	0100370e 	bge	zero,r4,84de8 <___vfprintf_internal_r+0x1e78>
   84d0c:	9800031e 	bne	r19,zero,84d1c <___vfprintf_internal_r+0x1dac>
   84d10:	d9814c17 	ldw	r6,1328(sp)
   84d14:	3080004c 	andi	r2,r6,1
   84d18:	103fb726 	beq	r2,zero,84bf8 <___vfprintf_internal_r+0x1c88>
   84d1c:	20800044 	addi	r2,r4,1
   84d20:	98a7883a 	add	r19,r19,r2
   84d24:	dcc14515 	stw	r19,1300(sp)
   84d28:	980f883a 	mov	r7,r19
   84d2c:	983f800e 	bge	r19,zero,84b30 <___vfprintf_internal_r+0x1bc0>
   84d30:	003fb306 	br	84c00 <___vfprintf_internal_r+0x1c90>
   84d34:	d9814d17 	ldw	r6,1332(sp)
   84d38:	31bfff84 	addi	r6,r6,-2
   84d3c:	d9814d15 	stw	r6,1332(sp)
   84d40:	003f4c06 	br	84a74 <___vfprintf_internal_r+0x1b04>
   84d44:	0100180e 	bge	zero,r4,84da8 <___vfprintf_internal_r+0x1e38>
   84d48:	00800044 	movi	r2,1
   84d4c:	1485883a 	add	r2,r2,r18
   84d50:	d8814515 	stw	r2,1300(sp)
   84d54:	100f883a 	mov	r7,r2
   84d58:	103f750e 	bge	r2,zero,84b30 <___vfprintf_internal_r+0x1bc0>
   84d5c:	003fa806 	br	84c00 <___vfprintf_internal_r+0x1c90>
   84d60:	80c00c04 	addi	r3,r16,48
   84d64:	00800c04 	movi	r2,48
   84d68:	d8c008c5 	stb	r3,35(sp)
   84d6c:	d9800804 	addi	r6,sp,32
   84d70:	d8c00904 	addi	r3,sp,36
   84d74:	d8800885 	stb	r2,34(sp)
   84d78:	003f6506 	br	84b10 <___vfprintf_internal_r+0x1ba0>
   84d7c:	d9014c17 	ldw	r4,1328(sp)
   84d80:	2084703a 	and	r2,r4,r2
   84d84:	103f9c26 	beq	r2,zero,84bf8 <___vfprintf_internal_r+0x1c88>
   84d88:	003f6606 	br	84b24 <___vfprintf_internal_r+0x1bb4>
   84d8c:	d9800804 	addi	r6,sp,32
   84d90:	d8c00884 	addi	r3,sp,34
   84d94:	003f5e06 	br	84b10 <___vfprintf_internal_r+0x1ba0>
   84d98:	00800b44 	movi	r2,45
   84d9c:	0121c83a 	sub	r16,zero,r4
   84da0:	d8800845 	stb	r2,33(sp)
   84da4:	003f3d06 	br	84a9c <___vfprintf_internal_r+0x1b2c>
   84da8:	00800084 	movi	r2,2
   84dac:	1105c83a 	sub	r2,r2,r4
   84db0:	003fe606 	br	84d4c <___vfprintf_internal_r+0x1ddc>
   84db4:	d8014515 	stw	zero,1300(sp)
   84db8:	dc814715 	stw	r18,1308(sp)
   84dbc:	003fb106 	br	84c84 <___vfprintf_internal_r+0x1d14>
   84dc0:	000d883a 	mov	r6,zero
   84dc4:	000f883a 	mov	r7,zero
   84dc8:	8009883a 	mov	r4,r16
   84dcc:	880b883a 	mov	r5,r17
   84dd0:	008aa8c0 	call	8aa8c <__nedf2>
   84dd4:	103f9f26 	beq	r2,zero,84c54 <___vfprintf_internal_r+0x1ce4>
   84dd8:	00800044 	movi	r2,1
   84ddc:	1509c83a 	sub	r4,r2,r20
   84de0:	d9000515 	stw	r4,20(sp)
   84de4:	003f9b06 	br	84c54 <___vfprintf_internal_r+0x1ce4>
   84de8:	98000d1e 	bne	r19,zero,84e20 <___vfprintf_internal_r+0x1eb0>
   84dec:	d8c14c17 	ldw	r3,1328(sp)
   84df0:	1880004c 	andi	r2,r3,1
   84df4:	10000a1e 	bne	r2,zero,84e20 <___vfprintf_internal_r+0x1eb0>
   84df8:	01000044 	movi	r4,1
   84dfc:	200f883a 	mov	r7,r4
   84e00:	d9014515 	stw	r4,1300(sp)
   84e04:	003f4a06 	br	84b30 <___vfprintf_internal_r+0x1bc0>
   84e08:	3cc00017 	ldw	r19,0(r7)
   84e0c:	39c00104 	addi	r7,r7,4
   84e10:	983d0e0e 	bge	r19,zero,8424c <___vfprintf_internal_r+0x12dc>
   84e14:	b8c00007 	ldb	r3,0(r23)
   84e18:	04ffffc4 	movi	r19,-1
   84e1c:	0038d306 	br	8316c <___vfprintf_internal_r+0x1fc>
   84e20:	9cc00084 	addi	r19,r19,2
   84e24:	dcc14515 	stw	r19,1300(sp)
   84e28:	980f883a 	mov	r7,r19
   84e2c:	983f400e 	bge	r19,zero,84b30 <___vfprintf_internal_r+0x1bc0>
   84e30:	003f7306 	br	84c00 <___vfprintf_internal_r+0x1c90>

00084e34 <__vfprintf_internal>:
   84e34:	00800274 	movhi	r2,9
   84e38:	10805f04 	addi	r2,r2,380
   84e3c:	2013883a 	mov	r9,r4
   84e40:	11000017 	ldw	r4,0(r2)
   84e44:	2805883a 	mov	r2,r5
   84e48:	300f883a 	mov	r7,r6
   84e4c:	480b883a 	mov	r5,r9
   84e50:	100d883a 	mov	r6,r2
   84e54:	0082f701 	jmpi	82f70 <___vfprintf_internal_r>

00084e58 <__swsetup_r>:
   84e58:	00800274 	movhi	r2,9
   84e5c:	10805f04 	addi	r2,r2,380
   84e60:	10c00017 	ldw	r3,0(r2)
   84e64:	defffd04 	addi	sp,sp,-12
   84e68:	dc400115 	stw	r17,4(sp)
   84e6c:	dc000015 	stw	r16,0(sp)
   84e70:	dfc00215 	stw	ra,8(sp)
   84e74:	2023883a 	mov	r17,r4
   84e78:	2821883a 	mov	r16,r5
   84e7c:	18000226 	beq	r3,zero,84e88 <__swsetup_r+0x30>
   84e80:	18800e17 	ldw	r2,56(r3)
   84e84:	10001f26 	beq	r2,zero,84f04 <__swsetup_r+0xac>
   84e88:	8100030b 	ldhu	r4,12(r16)
   84e8c:	2080020c 	andi	r2,r4,8
   84e90:	10002826 	beq	r2,zero,84f34 <__swsetup_r+0xdc>
   84e94:	81400417 	ldw	r5,16(r16)
   84e98:	28001d26 	beq	r5,zero,84f10 <__swsetup_r+0xb8>
   84e9c:	2080004c 	andi	r2,r4,1
   84ea0:	1005003a 	cmpeq	r2,r2,zero
   84ea4:	10000b26 	beq	r2,zero,84ed4 <__swsetup_r+0x7c>
   84ea8:	2080008c 	andi	r2,r4,2
   84eac:	10001226 	beq	r2,zero,84ef8 <__swsetup_r+0xa0>
   84eb0:	0005883a 	mov	r2,zero
   84eb4:	80800215 	stw	r2,8(r16)
   84eb8:	28000b26 	beq	r5,zero,84ee8 <__swsetup_r+0x90>
   84ebc:	0005883a 	mov	r2,zero
   84ec0:	dfc00217 	ldw	ra,8(sp)
   84ec4:	dc400117 	ldw	r17,4(sp)
   84ec8:	dc000017 	ldw	r16,0(sp)
   84ecc:	dec00304 	addi	sp,sp,12
   84ed0:	f800283a 	ret
   84ed4:	80800517 	ldw	r2,20(r16)
   84ed8:	80000215 	stw	zero,8(r16)
   84edc:	0085c83a 	sub	r2,zero,r2
   84ee0:	80800615 	stw	r2,24(r16)
   84ee4:	283ff51e 	bne	r5,zero,84ebc <__swsetup_r+0x64>
   84ee8:	2080200c 	andi	r2,r4,128
   84eec:	103ff326 	beq	r2,zero,84ebc <__swsetup_r+0x64>
   84ef0:	00bfffc4 	movi	r2,-1
   84ef4:	003ff206 	br	84ec0 <__swsetup_r+0x68>
   84ef8:	80800517 	ldw	r2,20(r16)
   84efc:	80800215 	stw	r2,8(r16)
   84f00:	003fed06 	br	84eb8 <__swsetup_r+0x60>
   84f04:	1809883a 	mov	r4,r3
   84f08:	0086a240 	call	86a24 <__sinit>
   84f0c:	003fde06 	br	84e88 <__swsetup_r+0x30>
   84f10:	20c0a00c 	andi	r3,r4,640
   84f14:	00808004 	movi	r2,512
   84f18:	18bfe026 	beq	r3,r2,84e9c <__swsetup_r+0x44>
   84f1c:	8809883a 	mov	r4,r17
   84f20:	800b883a 	mov	r5,r16
   84f24:	00877d00 	call	877d0 <__smakebuf_r>
   84f28:	8100030b 	ldhu	r4,12(r16)
   84f2c:	81400417 	ldw	r5,16(r16)
   84f30:	003fda06 	br	84e9c <__swsetup_r+0x44>
   84f34:	2080040c 	andi	r2,r4,16
   84f38:	103fed26 	beq	r2,zero,84ef0 <__swsetup_r+0x98>
   84f3c:	2080010c 	andi	r2,r4,4
   84f40:	10001226 	beq	r2,zero,84f8c <__swsetup_r+0x134>
   84f44:	81400c17 	ldw	r5,48(r16)
   84f48:	28000526 	beq	r5,zero,84f60 <__swsetup_r+0x108>
   84f4c:	80801004 	addi	r2,r16,64
   84f50:	28800226 	beq	r5,r2,84f5c <__swsetup_r+0x104>
   84f54:	8809883a 	mov	r4,r17
   84f58:	0086ddc0 	call	86ddc <_free_r>
   84f5c:	80000c15 	stw	zero,48(r16)
   84f60:	8080030b 	ldhu	r2,12(r16)
   84f64:	81400417 	ldw	r5,16(r16)
   84f68:	80000115 	stw	zero,4(r16)
   84f6c:	10bff6cc 	andi	r2,r2,65499
   84f70:	8080030d 	sth	r2,12(r16)
   84f74:	81400015 	stw	r5,0(r16)
   84f78:	8080030b 	ldhu	r2,12(r16)
   84f7c:	10800214 	ori	r2,r2,8
   84f80:	113fffcc 	andi	r4,r2,65535
   84f84:	8080030d 	sth	r2,12(r16)
   84f88:	003fc306 	br	84e98 <__swsetup_r+0x40>
   84f8c:	81400417 	ldw	r5,16(r16)
   84f90:	003ff906 	br	84f78 <__swsetup_r+0x120>

00084f94 <quorem>:
   84f94:	28c00417 	ldw	r3,16(r5)
   84f98:	20800417 	ldw	r2,16(r4)
   84f9c:	defff104 	addi	sp,sp,-60
   84fa0:	dfc00e15 	stw	ra,56(sp)
   84fa4:	df000d15 	stw	fp,52(sp)
   84fa8:	ddc00c15 	stw	r23,48(sp)
   84fac:	dd800b15 	stw	r22,44(sp)
   84fb0:	dd400a15 	stw	r21,40(sp)
   84fb4:	dd000915 	stw	r20,36(sp)
   84fb8:	dcc00815 	stw	r19,32(sp)
   84fbc:	dc800715 	stw	r18,28(sp)
   84fc0:	dc400615 	stw	r17,24(sp)
   84fc4:	dc000515 	stw	r16,20(sp)
   84fc8:	d9000315 	stw	r4,12(sp)
   84fcc:	d9400415 	stw	r5,16(sp)
   84fd0:	10c07f16 	blt	r2,r3,851d0 <quorem+0x23c>
   84fd4:	1d3fffc4 	addi	r20,r3,-1
   84fd8:	d8c00417 	ldw	r3,16(sp)
   84fdc:	d9000317 	ldw	r4,12(sp)
   84fe0:	a505883a 	add	r2,r20,r20
   84fe4:	1085883a 	add	r2,r2,r2
   84fe8:	1cc00504 	addi	r19,r3,20
   84fec:	25c00504 	addi	r23,r4,20
   84ff0:	98ad883a 	add	r22,r19,r2
   84ff4:	15c7883a 	add	r3,r2,r23
   84ff8:	b1400017 	ldw	r5,0(r22)
   84ffc:	19000017 	ldw	r4,0(r3)
   85000:	d8c00015 	stw	r3,0(sp)
   85004:	29400044 	addi	r5,r5,1
   85008:	d9000215 	stw	r4,8(sp)
   8500c:	0081eb00 	call	81eb0 <__udivsi3>
   85010:	1039883a 	mov	fp,r2
   85014:	10003d1e 	bne	r2,zero,8510c <quorem+0x178>
   85018:	d9400417 	ldw	r5,16(sp)
   8501c:	d9000317 	ldw	r4,12(sp)
   85020:	0087dbc0 	call	87dbc <__mcmp>
   85024:	10002c16 	blt	r2,zero,850d8 <quorem+0x144>
   85028:	e7000044 	addi	fp,fp,1
   8502c:	b80f883a 	mov	r7,r23
   85030:	0011883a 	mov	r8,zero
   85034:	0009883a 	mov	r4,zero
   85038:	99400017 	ldw	r5,0(r19)
   8503c:	38c00017 	ldw	r3,0(r7)
   85040:	9cc00104 	addi	r19,r19,4
   85044:	28bfffcc 	andi	r2,r5,65535
   85048:	2085883a 	add	r2,r4,r2
   8504c:	11bfffcc 	andi	r6,r2,65535
   85050:	193fffcc 	andi	r4,r3,65535
   85054:	1004d43a 	srli	r2,r2,16
   85058:	280ad43a 	srli	r5,r5,16
   8505c:	2189c83a 	sub	r4,r4,r6
   85060:	2209883a 	add	r4,r4,r8
   85064:	1806d43a 	srli	r3,r3,16
   85068:	288b883a 	add	r5,r5,r2
   8506c:	200dd43a 	srai	r6,r4,16
   85070:	28bfffcc 	andi	r2,r5,65535
   85074:	1887c83a 	sub	r3,r3,r2
   85078:	1987883a 	add	r3,r3,r6
   8507c:	3900000d 	sth	r4,0(r7)
   85080:	38c0008d 	sth	r3,2(r7)
   85084:	2808d43a 	srli	r4,r5,16
   85088:	39c00104 	addi	r7,r7,4
   8508c:	1811d43a 	srai	r8,r3,16
   85090:	b4ffe92e 	bgeu	r22,r19,85038 <quorem+0xa4>
   85094:	a505883a 	add	r2,r20,r20
   85098:	1085883a 	add	r2,r2,r2
   8509c:	b885883a 	add	r2,r23,r2
   850a0:	10c00017 	ldw	r3,0(r2)
   850a4:	18000c1e 	bne	r3,zero,850d8 <quorem+0x144>
   850a8:	113fff04 	addi	r4,r2,-4
   850ac:	b900082e 	bgeu	r23,r4,850d0 <quorem+0x13c>
   850b0:	10bfff17 	ldw	r2,-4(r2)
   850b4:	10000326 	beq	r2,zero,850c4 <quorem+0x130>
   850b8:	00000506 	br	850d0 <quorem+0x13c>
   850bc:	20800017 	ldw	r2,0(r4)
   850c0:	1000031e 	bne	r2,zero,850d0 <quorem+0x13c>
   850c4:	213fff04 	addi	r4,r4,-4
   850c8:	a53fffc4 	addi	r20,r20,-1
   850cc:	b93ffb36 	bltu	r23,r4,850bc <quorem+0x128>
   850d0:	d9000317 	ldw	r4,12(sp)
   850d4:	25000415 	stw	r20,16(r4)
   850d8:	e005883a 	mov	r2,fp
   850dc:	dfc00e17 	ldw	ra,56(sp)
   850e0:	df000d17 	ldw	fp,52(sp)
   850e4:	ddc00c17 	ldw	r23,48(sp)
   850e8:	dd800b17 	ldw	r22,44(sp)
   850ec:	dd400a17 	ldw	r21,40(sp)
   850f0:	dd000917 	ldw	r20,36(sp)
   850f4:	dcc00817 	ldw	r19,32(sp)
   850f8:	dc800717 	ldw	r18,28(sp)
   850fc:	dc400617 	ldw	r17,24(sp)
   85100:	dc000517 	ldw	r16,20(sp)
   85104:	dec00f04 	addi	sp,sp,60
   85108:	f800283a 	ret
   8510c:	b823883a 	mov	r17,r23
   85110:	9825883a 	mov	r18,r19
   85114:	d8000115 	stw	zero,4(sp)
   85118:	002b883a 	mov	r21,zero
   8511c:	94000017 	ldw	r16,0(r18)
   85120:	e009883a 	mov	r4,fp
   85124:	94800104 	addi	r18,r18,4
   85128:	817fffcc 	andi	r5,r16,65535
   8512c:	00824b00 	call	824b0 <__mulsi3>
   85130:	800ad43a 	srli	r5,r16,16
   85134:	e009883a 	mov	r4,fp
   85138:	a8a1883a 	add	r16,r21,r2
   8513c:	00824b00 	call	824b0 <__mulsi3>
   85140:	89000017 	ldw	r4,0(r17)
   85144:	80ffffcc 	andi	r3,r16,65535
   85148:	8020d43a 	srli	r16,r16,16
   8514c:	217fffcc 	andi	r5,r4,65535
   85150:	28cbc83a 	sub	r5,r5,r3
   85154:	d8c00117 	ldw	r3,4(sp)
   85158:	2008d43a 	srli	r4,r4,16
   8515c:	1405883a 	add	r2,r2,r16
   85160:	28cb883a 	add	r5,r5,r3
   85164:	280dd43a 	srai	r6,r5,16
   85168:	10ffffcc 	andi	r3,r2,65535
   8516c:	20c9c83a 	sub	r4,r4,r3
   85170:	2189883a 	add	r4,r4,r6
   85174:	8900008d 	sth	r4,2(r17)
   85178:	2009d43a 	srai	r4,r4,16
   8517c:	8940000d 	sth	r5,0(r17)
   85180:	102ad43a 	srli	r21,r2,16
   85184:	8c400104 	addi	r17,r17,4
   85188:	d9000115 	stw	r4,4(sp)
   8518c:	b4bfe32e 	bgeu	r22,r18,8511c <quorem+0x188>
   85190:	d9000217 	ldw	r4,8(sp)
   85194:	203fa01e 	bne	r4,zero,85018 <quorem+0x84>
   85198:	d8800017 	ldw	r2,0(sp)
   8519c:	10ffff04 	addi	r3,r2,-4
   851a0:	b8c0082e 	bgeu	r23,r3,851c4 <quorem+0x230>
   851a4:	10bfff17 	ldw	r2,-4(r2)
   851a8:	10000326 	beq	r2,zero,851b8 <quorem+0x224>
   851ac:	00000506 	br	851c4 <quorem+0x230>
   851b0:	18800017 	ldw	r2,0(r3)
   851b4:	1000031e 	bne	r2,zero,851c4 <quorem+0x230>
   851b8:	18ffff04 	addi	r3,r3,-4
   851bc:	a53fffc4 	addi	r20,r20,-1
   851c0:	b8fffb36 	bltu	r23,r3,851b0 <quorem+0x21c>
   851c4:	d8c00317 	ldw	r3,12(sp)
   851c8:	1d000415 	stw	r20,16(r3)
   851cc:	003f9206 	br	85018 <quorem+0x84>
   851d0:	0005883a 	mov	r2,zero
   851d4:	003fc106 	br	850dc <quorem+0x148>

000851d8 <_dtoa_r>:
   851d8:	22001017 	ldw	r8,64(r4)
   851dc:	deffda04 	addi	sp,sp,-152
   851e0:	dd402115 	stw	r21,132(sp)
   851e4:	dd002015 	stw	r20,128(sp)
   851e8:	dc801e15 	stw	r18,120(sp)
   851ec:	dc401d15 	stw	r17,116(sp)
   851f0:	dfc02515 	stw	ra,148(sp)
   851f4:	df002415 	stw	fp,144(sp)
   851f8:	ddc02315 	stw	r23,140(sp)
   851fc:	dd802215 	stw	r22,136(sp)
   85200:	dcc01f15 	stw	r19,124(sp)
   85204:	dc001c15 	stw	r16,112(sp)
   85208:	d9001615 	stw	r4,88(sp)
   8520c:	3023883a 	mov	r17,r6
   85210:	2829883a 	mov	r20,r5
   85214:	d9c01715 	stw	r7,92(sp)
   85218:	dc802817 	ldw	r18,160(sp)
   8521c:	302b883a 	mov	r21,r6
   85220:	40000a26 	beq	r8,zero,8524c <_dtoa_r+0x74>
   85224:	20801117 	ldw	r2,68(r4)
   85228:	400b883a 	mov	r5,r8
   8522c:	40800115 	stw	r2,4(r8)
   85230:	20c01117 	ldw	r3,68(r4)
   85234:	00800044 	movi	r2,1
   85238:	10c4983a 	sll	r2,r2,r3
   8523c:	40800215 	stw	r2,8(r8)
   85240:	0087c600 	call	87c60 <_Bfree>
   85244:	d8c01617 	ldw	r3,88(sp)
   85248:	18001015 	stw	zero,64(r3)
   8524c:	8800a316 	blt	r17,zero,854dc <_dtoa_r+0x304>
   85250:	90000015 	stw	zero,0(r18)
   85254:	a8dffc2c 	andhi	r3,r21,32752
   85258:	009ffc34 	movhi	r2,32752
   8525c:	18809126 	beq	r3,r2,854a4 <_dtoa_r+0x2cc>
   85260:	000d883a 	mov	r6,zero
   85264:	000f883a 	mov	r7,zero
   85268:	a009883a 	mov	r4,r20
   8526c:	a80b883a 	mov	r5,r21
   85270:	dd001215 	stw	r20,72(sp)
   85274:	dd401315 	stw	r21,76(sp)
   85278:	008aa8c0 	call	8aa8c <__nedf2>
   8527c:	1000171e 	bne	r2,zero,852dc <_dtoa_r+0x104>
   85280:	d9802717 	ldw	r6,156(sp)
   85284:	00800044 	movi	r2,1
   85288:	30800015 	stw	r2,0(r6)
   8528c:	d8802917 	ldw	r2,164(sp)
   85290:	10029b26 	beq	r2,zero,85d00 <_dtoa_r+0xb28>
   85294:	d9002917 	ldw	r4,164(sp)
   85298:	00800274 	movhi	r2,9
   8529c:	10b95744 	addi	r2,r2,-6819
   852a0:	10ffffc4 	addi	r3,r2,-1
   852a4:	20800015 	stw	r2,0(r4)
   852a8:	1805883a 	mov	r2,r3
   852ac:	dfc02517 	ldw	ra,148(sp)
   852b0:	df002417 	ldw	fp,144(sp)
   852b4:	ddc02317 	ldw	r23,140(sp)
   852b8:	dd802217 	ldw	r22,136(sp)
   852bc:	dd402117 	ldw	r21,132(sp)
   852c0:	dd002017 	ldw	r20,128(sp)
   852c4:	dcc01f17 	ldw	r19,124(sp)
   852c8:	dc801e17 	ldw	r18,120(sp)
   852cc:	dc401d17 	ldw	r17,116(sp)
   852d0:	dc001c17 	ldw	r16,112(sp)
   852d4:	dec02604 	addi	sp,sp,152
   852d8:	f800283a 	ret
   852dc:	d9001617 	ldw	r4,88(sp)
   852e0:	d9401217 	ldw	r5,72(sp)
   852e4:	d8800104 	addi	r2,sp,4
   852e8:	a80d883a 	mov	r6,r21
   852ec:	d9c00204 	addi	r7,sp,8
   852f0:	d8800015 	stw	r2,0(sp)
   852f4:	008829c0 	call	8829c <__d2b>
   852f8:	d8800715 	stw	r2,28(sp)
   852fc:	a804d53a 	srli	r2,r21,20
   85300:	1101ffcc 	andi	r4,r2,2047
   85304:	20008626 	beq	r4,zero,85520 <_dtoa_r+0x348>
   85308:	d8c01217 	ldw	r3,72(sp)
   8530c:	00800434 	movhi	r2,16
   85310:	10bfffc4 	addi	r2,r2,-1
   85314:	ddc00117 	ldw	r23,4(sp)
   85318:	a884703a 	and	r2,r21,r2
   8531c:	1811883a 	mov	r8,r3
   85320:	124ffc34 	orhi	r9,r2,16368
   85324:	25bf0044 	addi	r22,r4,-1023
   85328:	d8000815 	stw	zero,32(sp)
   8532c:	0005883a 	mov	r2,zero
   85330:	00cffe34 	movhi	r3,16376
   85334:	480b883a 	mov	r5,r9
   85338:	4009883a 	mov	r4,r8
   8533c:	180f883a 	mov	r7,r3
   85340:	100d883a 	mov	r6,r2
   85344:	00814d00 	call	814d0 <__subdf3>
   85348:	0218dbf4 	movhi	r8,25455
   8534c:	4210d844 	addi	r8,r8,17249
   85350:	024ff4f4 	movhi	r9,16339
   85354:	4a61e9c4 	addi	r9,r9,-30809
   85358:	480f883a 	mov	r7,r9
   8535c:	400d883a 	mov	r6,r8
   85360:	180b883a 	mov	r5,r3
   85364:	1009883a 	mov	r4,r2
   85368:	00815c40 	call	815c4 <__muldf3>
   8536c:	0222d874 	movhi	r8,35681
   85370:	42322cc4 	addi	r8,r8,-14157
   85374:	024ff1f4 	movhi	r9,16327
   85378:	4a628a04 	addi	r9,r9,-30168
   8537c:	480f883a 	mov	r7,r9
   85380:	400d883a 	mov	r6,r8
   85384:	180b883a 	mov	r5,r3
   85388:	1009883a 	mov	r4,r2
   8538c:	00815500 	call	81550 <__adddf3>
   85390:	b009883a 	mov	r4,r22
   85394:	1021883a 	mov	r16,r2
   85398:	1823883a 	mov	r17,r3
   8539c:	008acac0 	call	8acac <__floatsidf>
   853a0:	021427f4 	movhi	r8,20639
   853a4:	421e7ec4 	addi	r8,r8,31227
   853a8:	024ff4f4 	movhi	r9,16339
   853ac:	4a5104c4 	addi	r9,r9,17427
   853b0:	480f883a 	mov	r7,r9
   853b4:	400d883a 	mov	r6,r8
   853b8:	180b883a 	mov	r5,r3
   853bc:	1009883a 	mov	r4,r2
   853c0:	00815c40 	call	815c4 <__muldf3>
   853c4:	180f883a 	mov	r7,r3
   853c8:	880b883a 	mov	r5,r17
   853cc:	100d883a 	mov	r6,r2
   853d0:	8009883a 	mov	r4,r16
   853d4:	00815500 	call	81550 <__adddf3>
   853d8:	1009883a 	mov	r4,r2
   853dc:	180b883a 	mov	r5,r3
   853e0:	1021883a 	mov	r16,r2
   853e4:	1823883a 	mov	r17,r3
   853e8:	008ada40 	call	8ada4 <__fixdfsi>
   853ec:	000d883a 	mov	r6,zero
   853f0:	000f883a 	mov	r7,zero
   853f4:	8009883a 	mov	r4,r16
   853f8:	880b883a 	mov	r5,r17
   853fc:	d8800d15 	stw	r2,52(sp)
   85400:	008ac240 	call	8ac24 <__ltdf2>
   85404:	10031716 	blt	r2,zero,86064 <_dtoa_r+0xe8c>
   85408:	d8c00d17 	ldw	r3,52(sp)
   8540c:	00800584 	movi	r2,22
   85410:	10c1482e 	bgeu	r2,r3,85934 <_dtoa_r+0x75c>
   85414:	01000044 	movi	r4,1
   85418:	d9000c15 	stw	r4,48(sp)
   8541c:	bd85c83a 	sub	r2,r23,r22
   85420:	11bfffc4 	addi	r6,r2,-1
   85424:	30030b16 	blt	r6,zero,86054 <_dtoa_r+0xe7c>
   85428:	d9800a15 	stw	r6,40(sp)
   8542c:	d8001115 	stw	zero,68(sp)
   85430:	d8c00d17 	ldw	r3,52(sp)
   85434:	1802ff16 	blt	r3,zero,86034 <_dtoa_r+0xe5c>
   85438:	d9000a17 	ldw	r4,40(sp)
   8543c:	d8c00915 	stw	r3,36(sp)
   85440:	d8001015 	stw	zero,64(sp)
   85444:	20c9883a 	add	r4,r4,r3
   85448:	d9000a15 	stw	r4,40(sp)
   8544c:	d9001717 	ldw	r4,92(sp)
   85450:	00800244 	movi	r2,9
   85454:	11004636 	bltu	r2,r4,85570 <_dtoa_r+0x398>
   85458:	00800144 	movi	r2,5
   8545c:	11020416 	blt	r2,r4,85c70 <_dtoa_r+0xa98>
   85460:	04400044 	movi	r17,1
   85464:	d8c01717 	ldw	r3,92(sp)
   85468:	00800144 	movi	r2,5
   8546c:	10c1ed36 	bltu	r2,r3,85c24 <_dtoa_r+0xa4c>
   85470:	18c5883a 	add	r2,r3,r3
   85474:	1085883a 	add	r2,r2,r2
   85478:	00c00234 	movhi	r3,8
   8547c:	18d52304 	addi	r3,r3,21644
   85480:	10c5883a 	add	r2,r2,r3
   85484:	11000017 	ldw	r4,0(r2)
   85488:	2000683a 	jmp	r4
   8548c:	00085578 	rdprs	zero,zero,8533
   85490:	00085578 	rdprs	zero,zero,8533
   85494:	00085f78 	rdprs	zero,zero,8573
   85498:	00085f50 	cmplti	zero,zero,8573
   8549c:	00085f94 	movui	zero,8574
   854a0:	00085fa0 	cmpeqi	zero,zero,8574
   854a4:	d9002717 	ldw	r4,156(sp)
   854a8:	0089c3c4 	movi	r2,9999
   854ac:	20800015 	stw	r2,0(r4)
   854b0:	a0001026 	beq	r20,zero,854f4 <_dtoa_r+0x31c>
   854b4:	00c00274 	movhi	r3,9
   854b8:	18f96304 	addi	r3,r3,-6772
   854bc:	d9802917 	ldw	r6,164(sp)
   854c0:	303f7926 	beq	r6,zero,852a8 <_dtoa_r+0xd0>
   854c4:	188000c7 	ldb	r2,3(r3)
   854c8:	190000c4 	addi	r4,r3,3
   854cc:	1000101e 	bne	r2,zero,85510 <_dtoa_r+0x338>
   854d0:	d8802917 	ldw	r2,164(sp)
   854d4:	11000015 	stw	r4,0(r2)
   854d8:	003f7306 	br	852a8 <_dtoa_r+0xd0>
   854dc:	00a00034 	movhi	r2,32768
   854e0:	10bfffc4 	addi	r2,r2,-1
   854e4:	00c00044 	movi	r3,1
   854e8:	88aa703a 	and	r21,r17,r2
   854ec:	90c00015 	stw	r3,0(r18)
   854f0:	003f5806 	br	85254 <_dtoa_r+0x7c>
   854f4:	00800434 	movhi	r2,16
   854f8:	10bfffc4 	addi	r2,r2,-1
   854fc:	a884703a 	and	r2,r21,r2
   85500:	103fec1e 	bne	r2,zero,854b4 <_dtoa_r+0x2dc>
   85504:	00c00274 	movhi	r3,9
   85508:	18f96004 	addi	r3,r3,-6784
   8550c:	003feb06 	br	854bc <_dtoa_r+0x2e4>
   85510:	d8802917 	ldw	r2,164(sp)
   85514:	19000204 	addi	r4,r3,8
   85518:	11000015 	stw	r4,0(r2)
   8551c:	003f6206 	br	852a8 <_dtoa_r+0xd0>
   85520:	ddc00117 	ldw	r23,4(sp)
   85524:	d8800217 	ldw	r2,8(sp)
   85528:	01000804 	movi	r4,32
   8552c:	b8c10c84 	addi	r3,r23,1074
   85530:	18a3883a 	add	r17,r3,r2
   85534:	2441b80e 	bge	r4,r17,85c18 <_dtoa_r+0xa40>
   85538:	00c01004 	movi	r3,64
   8553c:	1c47c83a 	sub	r3,r3,r17
   85540:	88bff804 	addi	r2,r17,-32
   85544:	a8c6983a 	sll	r3,r21,r3
   85548:	a084d83a 	srl	r2,r20,r2
   8554c:	1888b03a 	or	r4,r3,r2
   85550:	0081be00 	call	81be0 <__floatunsidf>
   85554:	1011883a 	mov	r8,r2
   85558:	00bf8434 	movhi	r2,65040
   8555c:	01000044 	movi	r4,1
   85560:	10d3883a 	add	r9,r2,r3
   85564:	8dbef344 	addi	r22,r17,-1075
   85568:	d9000815 	stw	r4,32(sp)
   8556c:	003f6f06 	br	8532c <_dtoa_r+0x154>
   85570:	d8001715 	stw	zero,92(sp)
   85574:	04400044 	movi	r17,1
   85578:	00bfffc4 	movi	r2,-1
   8557c:	00c00044 	movi	r3,1
   85580:	d8800e15 	stw	r2,56(sp)
   85584:	d8002615 	stw	zero,152(sp)
   85588:	d8800f15 	stw	r2,60(sp)
   8558c:	d8c00b15 	stw	r3,44(sp)
   85590:	1021883a 	mov	r16,r2
   85594:	d8801617 	ldw	r2,88(sp)
   85598:	10001115 	stw	zero,68(r2)
   8559c:	d8801617 	ldw	r2,88(sp)
   855a0:	11401117 	ldw	r5,68(r2)
   855a4:	1009883a 	mov	r4,r2
   855a8:	00881e00 	call	881e0 <_Balloc>
   855ac:	d8c01617 	ldw	r3,88(sp)
   855b0:	d8800515 	stw	r2,20(sp)
   855b4:	18801015 	stw	r2,64(r3)
   855b8:	00800384 	movi	r2,14
   855bc:	14006836 	bltu	r2,r16,85760 <_dtoa_r+0x588>
   855c0:	8805003a 	cmpeq	r2,r17,zero
   855c4:	1000661e 	bne	r2,zero,85760 <_dtoa_r+0x588>
   855c8:	d9000d17 	ldw	r4,52(sp)
   855cc:	0102300e 	bge	zero,r4,85e90 <_dtoa_r+0xcb8>
   855d0:	208003cc 	andi	r2,r4,15
   855d4:	100490fa 	slli	r2,r2,3
   855d8:	2025d13a 	srai	r18,r4,4
   855dc:	00c00274 	movhi	r3,9
   855e0:	18f97504 	addi	r3,r3,-6700
   855e4:	10c5883a 	add	r2,r2,r3
   855e8:	90c0040c 	andi	r3,r18,16
   855ec:	14000017 	ldw	r16,0(r2)
   855f0:	14400117 	ldw	r17,4(r2)
   855f4:	18036a1e 	bne	r3,zero,863a0 <_dtoa_r+0x11c8>
   855f8:	05800084 	movi	r22,2
   855fc:	90001026 	beq	r18,zero,85640 <_dtoa_r+0x468>
   85600:	04c00274 	movhi	r19,9
   85604:	9cf9a704 	addi	r19,r19,-6500
   85608:	9080004c 	andi	r2,r18,1
   8560c:	1005003a 	cmpeq	r2,r2,zero
   85610:	1000081e 	bne	r2,zero,85634 <_dtoa_r+0x45c>
   85614:	99800017 	ldw	r6,0(r19)
   85618:	99c00117 	ldw	r7,4(r19)
   8561c:	880b883a 	mov	r5,r17
   85620:	8009883a 	mov	r4,r16
   85624:	00815c40 	call	815c4 <__muldf3>
   85628:	1021883a 	mov	r16,r2
   8562c:	b5800044 	addi	r22,r22,1
   85630:	1823883a 	mov	r17,r3
   85634:	9025d07a 	srai	r18,r18,1
   85638:	9cc00204 	addi	r19,r19,8
   8563c:	903ff21e 	bne	r18,zero,85608 <_dtoa_r+0x430>
   85640:	a80b883a 	mov	r5,r21
   85644:	a009883a 	mov	r4,r20
   85648:	880f883a 	mov	r7,r17
   8564c:	800d883a 	mov	r6,r16
   85650:	00819880 	call	81988 <__divdf3>
   85654:	1029883a 	mov	r20,r2
   85658:	182b883a 	mov	r21,r3
   8565c:	d8c00c17 	ldw	r3,48(sp)
   85660:	1805003a 	cmpeq	r2,r3,zero
   85664:	1000081e 	bne	r2,zero,85688 <_dtoa_r+0x4b0>
   85668:	0005883a 	mov	r2,zero
   8566c:	00cffc34 	movhi	r3,16368
   85670:	180f883a 	mov	r7,r3
   85674:	a009883a 	mov	r4,r20
   85678:	a80b883a 	mov	r5,r21
   8567c:	100d883a 	mov	r6,r2
   85680:	008ac240 	call	8ac24 <__ltdf2>
   85684:	1003fe16 	blt	r2,zero,86680 <_dtoa_r+0x14a8>
   85688:	b009883a 	mov	r4,r22
   8568c:	008acac0 	call	8acac <__floatsidf>
   85690:	180b883a 	mov	r5,r3
   85694:	1009883a 	mov	r4,r2
   85698:	a00d883a 	mov	r6,r20
   8569c:	a80f883a 	mov	r7,r21
   856a0:	00815c40 	call	815c4 <__muldf3>
   856a4:	0011883a 	mov	r8,zero
   856a8:	02500734 	movhi	r9,16412
   856ac:	1009883a 	mov	r4,r2
   856b0:	180b883a 	mov	r5,r3
   856b4:	480f883a 	mov	r7,r9
   856b8:	400d883a 	mov	r6,r8
   856bc:	00815500 	call	81550 <__adddf3>
   856c0:	d9000f17 	ldw	r4,60(sp)
   856c4:	102d883a 	mov	r22,r2
   856c8:	00bf3034 	movhi	r2,64704
   856cc:	18b9883a 	add	fp,r3,r2
   856d0:	e02f883a 	mov	r23,fp
   856d4:	20028f1e 	bne	r4,zero,86114 <_dtoa_r+0xf3c>
   856d8:	0005883a 	mov	r2,zero
   856dc:	00d00534 	movhi	r3,16404
   856e0:	a009883a 	mov	r4,r20
   856e4:	a80b883a 	mov	r5,r21
   856e8:	180f883a 	mov	r7,r3
   856ec:	100d883a 	mov	r6,r2
   856f0:	00814d00 	call	814d0 <__subdf3>
   856f4:	1009883a 	mov	r4,r2
   856f8:	e00f883a 	mov	r7,fp
   856fc:	180b883a 	mov	r5,r3
   85700:	b00d883a 	mov	r6,r22
   85704:	1025883a 	mov	r18,r2
   85708:	1827883a 	mov	r19,r3
   8570c:	008ab140 	call	8ab14 <__gtdf2>
   85710:	00834f16 	blt	zero,r2,86450 <_dtoa_r+0x1278>
   85714:	e0e0003c 	xorhi	r3,fp,32768
   85718:	9009883a 	mov	r4,r18
   8571c:	980b883a 	mov	r5,r19
   85720:	180f883a 	mov	r7,r3
   85724:	b00d883a 	mov	r6,r22
   85728:	008ac240 	call	8ac24 <__ltdf2>
   8572c:	1000080e 	bge	r2,zero,85750 <_dtoa_r+0x578>
   85730:	0027883a 	mov	r19,zero
   85734:	0025883a 	mov	r18,zero
   85738:	d8802617 	ldw	r2,152(sp)
   8573c:	df000517 	ldw	fp,20(sp)
   85740:	d8000615 	stw	zero,24(sp)
   85744:	0084303a 	nor	r2,zero,r2
   85748:	d8800d15 	stw	r2,52(sp)
   8574c:	00019b06 	br	85dbc <_dtoa_r+0xbe4>
   85750:	d9801217 	ldw	r6,72(sp)
   85754:	d8801317 	ldw	r2,76(sp)
   85758:	3029883a 	mov	r20,r6
   8575c:	102b883a 	mov	r21,r2
   85760:	d8c00217 	ldw	r3,8(sp)
   85764:	18008516 	blt	r3,zero,8597c <_dtoa_r+0x7a4>
   85768:	d9000d17 	ldw	r4,52(sp)
   8576c:	00800384 	movi	r2,14
   85770:	11008216 	blt	r2,r4,8597c <_dtoa_r+0x7a4>
   85774:	200490fa 	slli	r2,r4,3
   85778:	d9802617 	ldw	r6,152(sp)
   8577c:	00c00274 	movhi	r3,9
   85780:	18f97504 	addi	r3,r3,-6700
   85784:	10c5883a 	add	r2,r2,r3
   85788:	14800017 	ldw	r18,0(r2)
   8578c:	14c00117 	ldw	r19,4(r2)
   85790:	30031e16 	blt	r6,zero,8640c <_dtoa_r+0x1234>
   85794:	d9000517 	ldw	r4,20(sp)
   85798:	d8c00f17 	ldw	r3,60(sp)
   8579c:	a823883a 	mov	r17,r21
   857a0:	a021883a 	mov	r16,r20
   857a4:	192b883a 	add	r21,r3,r4
   857a8:	2039883a 	mov	fp,r4
   857ac:	00000f06 	br	857ec <_dtoa_r+0x614>
   857b0:	0005883a 	mov	r2,zero
   857b4:	00d00934 	movhi	r3,16420
   857b8:	5009883a 	mov	r4,r10
   857bc:	580b883a 	mov	r5,r11
   857c0:	180f883a 	mov	r7,r3
   857c4:	100d883a 	mov	r6,r2
   857c8:	00815c40 	call	815c4 <__muldf3>
   857cc:	180b883a 	mov	r5,r3
   857d0:	000d883a 	mov	r6,zero
   857d4:	000f883a 	mov	r7,zero
   857d8:	1009883a 	mov	r4,r2
   857dc:	1021883a 	mov	r16,r2
   857e0:	1823883a 	mov	r17,r3
   857e4:	008aa8c0 	call	8aa8c <__nedf2>
   857e8:	10004526 	beq	r2,zero,85900 <_dtoa_r+0x728>
   857ec:	900d883a 	mov	r6,r18
   857f0:	980f883a 	mov	r7,r19
   857f4:	8009883a 	mov	r4,r16
   857f8:	880b883a 	mov	r5,r17
   857fc:	00819880 	call	81988 <__divdf3>
   85800:	180b883a 	mov	r5,r3
   85804:	1009883a 	mov	r4,r2
   85808:	008ada40 	call	8ada4 <__fixdfsi>
   8580c:	1009883a 	mov	r4,r2
   85810:	1029883a 	mov	r20,r2
   85814:	008acac0 	call	8acac <__floatsidf>
   85818:	180f883a 	mov	r7,r3
   8581c:	9009883a 	mov	r4,r18
   85820:	980b883a 	mov	r5,r19
   85824:	100d883a 	mov	r6,r2
   85828:	00815c40 	call	815c4 <__muldf3>
   8582c:	180f883a 	mov	r7,r3
   85830:	880b883a 	mov	r5,r17
   85834:	8009883a 	mov	r4,r16
   85838:	100d883a 	mov	r6,r2
   8583c:	00814d00 	call	814d0 <__subdf3>
   85840:	1015883a 	mov	r10,r2
   85844:	a0800c04 	addi	r2,r20,48
   85848:	e0800005 	stb	r2,0(fp)
   8584c:	e7000044 	addi	fp,fp,1
   85850:	1817883a 	mov	r11,r3
   85854:	e57fd61e 	bne	fp,r21,857b0 <_dtoa_r+0x5d8>
   85858:	500d883a 	mov	r6,r10
   8585c:	180f883a 	mov	r7,r3
   85860:	5009883a 	mov	r4,r10
   85864:	180b883a 	mov	r5,r3
   85868:	00815500 	call	81550 <__adddf3>
   8586c:	100d883a 	mov	r6,r2
   85870:	9009883a 	mov	r4,r18
   85874:	980b883a 	mov	r5,r19
   85878:	180f883a 	mov	r7,r3
   8587c:	1021883a 	mov	r16,r2
   85880:	1823883a 	mov	r17,r3
   85884:	008ac240 	call	8ac24 <__ltdf2>
   85888:	10000816 	blt	r2,zero,858ac <_dtoa_r+0x6d4>
   8588c:	980b883a 	mov	r5,r19
   85890:	800d883a 	mov	r6,r16
   85894:	880f883a 	mov	r7,r17
   85898:	9009883a 	mov	r4,r18
   8589c:	008aa040 	call	8aa04 <__eqdf2>
   858a0:	1000171e 	bne	r2,zero,85900 <_dtoa_r+0x728>
   858a4:	a080004c 	andi	r2,r20,1
   858a8:	10001526 	beq	r2,zero,85900 <_dtoa_r+0x728>
   858ac:	d8800d17 	ldw	r2,52(sp)
   858b0:	d8800415 	stw	r2,16(sp)
   858b4:	e009883a 	mov	r4,fp
   858b8:	213fffc4 	addi	r4,r4,-1
   858bc:	20c00007 	ldb	r3,0(r4)
   858c0:	00800e44 	movi	r2,57
   858c4:	1880081e 	bne	r3,r2,858e8 <_dtoa_r+0x710>
   858c8:	d8800517 	ldw	r2,20(sp)
   858cc:	113ffa1e 	bne	r2,r4,858b8 <_dtoa_r+0x6e0>
   858d0:	d8c00417 	ldw	r3,16(sp)
   858d4:	d9800517 	ldw	r6,20(sp)
   858d8:	00800c04 	movi	r2,48
   858dc:	18c00044 	addi	r3,r3,1
   858e0:	d8c00415 	stw	r3,16(sp)
   858e4:	30800005 	stb	r2,0(r6)
   858e8:	20800003 	ldbu	r2,0(r4)
   858ec:	d8c00417 	ldw	r3,16(sp)
   858f0:	27000044 	addi	fp,r4,1
   858f4:	10800044 	addi	r2,r2,1
   858f8:	d8c00d15 	stw	r3,52(sp)
   858fc:	20800005 	stb	r2,0(r4)
   85900:	d9001617 	ldw	r4,88(sp)
   85904:	d9400717 	ldw	r5,28(sp)
   85908:	0087c600 	call	87c60 <_Bfree>
   8590c:	e0000005 	stb	zero,0(fp)
   85910:	d9800d17 	ldw	r6,52(sp)
   85914:	d8c02717 	ldw	r3,156(sp)
   85918:	d9002917 	ldw	r4,164(sp)
   8591c:	30800044 	addi	r2,r6,1
   85920:	18800015 	stw	r2,0(r3)
   85924:	20029c26 	beq	r4,zero,86398 <_dtoa_r+0x11c0>
   85928:	d8c00517 	ldw	r3,20(sp)
   8592c:	27000015 	stw	fp,0(r4)
   85930:	003e5d06 	br	852a8 <_dtoa_r+0xd0>
   85934:	d9800d17 	ldw	r6,52(sp)
   85938:	00c00274 	movhi	r3,9
   8593c:	18f97504 	addi	r3,r3,-6700
   85940:	d9001217 	ldw	r4,72(sp)
   85944:	300490fa 	slli	r2,r6,3
   85948:	d9401317 	ldw	r5,76(sp)
   8594c:	10c5883a 	add	r2,r2,r3
   85950:	12000017 	ldw	r8,0(r2)
   85954:	12400117 	ldw	r9,4(r2)
   85958:	400d883a 	mov	r6,r8
   8595c:	480f883a 	mov	r7,r9
   85960:	008ac240 	call	8ac24 <__ltdf2>
   85964:	1000030e 	bge	r2,zero,85974 <_dtoa_r+0x79c>
   85968:	d8800d17 	ldw	r2,52(sp)
   8596c:	10bfffc4 	addi	r2,r2,-1
   85970:	d8800d15 	stw	r2,52(sp)
   85974:	d8000c15 	stw	zero,48(sp)
   85978:	003ea806 	br	8541c <_dtoa_r+0x244>
   8597c:	d9000b17 	ldw	r4,44(sp)
   85980:	202cc03a 	cmpne	r22,r4,zero
   85984:	b000c71e 	bne	r22,zero,85ca4 <_dtoa_r+0xacc>
   85988:	dc001117 	ldw	r16,68(sp)
   8598c:	dc801017 	ldw	r18,64(sp)
   85990:	0027883a 	mov	r19,zero
   85994:	04000b0e 	bge	zero,r16,859c4 <_dtoa_r+0x7ec>
   85998:	d8c00a17 	ldw	r3,40(sp)
   8599c:	00c0090e 	bge	zero,r3,859c4 <_dtoa_r+0x7ec>
   859a0:	8005883a 	mov	r2,r16
   859a4:	1c011316 	blt	r3,r16,85df4 <_dtoa_r+0xc1c>
   859a8:	d9000a17 	ldw	r4,40(sp)
   859ac:	d9801117 	ldw	r6,68(sp)
   859b0:	80a1c83a 	sub	r16,r16,r2
   859b4:	2089c83a 	sub	r4,r4,r2
   859b8:	308dc83a 	sub	r6,r6,r2
   859bc:	d9000a15 	stw	r4,40(sp)
   859c0:	d9801115 	stw	r6,68(sp)
   859c4:	d8801017 	ldw	r2,64(sp)
   859c8:	0080150e 	bge	zero,r2,85a20 <_dtoa_r+0x848>
   859cc:	d8c00b17 	ldw	r3,44(sp)
   859d0:	1805003a 	cmpeq	r2,r3,zero
   859d4:	1001c91e 	bne	r2,zero,860fc <_dtoa_r+0xf24>
   859d8:	04800e0e 	bge	zero,r18,85a14 <_dtoa_r+0x83c>
   859dc:	d9001617 	ldw	r4,88(sp)
   859e0:	980b883a 	mov	r5,r19
   859e4:	900d883a 	mov	r6,r18
   859e8:	0088aac0 	call	88aac <__pow5mult>
   859ec:	d9001617 	ldw	r4,88(sp)
   859f0:	d9800717 	ldw	r6,28(sp)
   859f4:	100b883a 	mov	r5,r2
   859f8:	1027883a 	mov	r19,r2
   859fc:	00886f00 	call	886f0 <__multiply>
   85a00:	d9001617 	ldw	r4,88(sp)
   85a04:	d9400717 	ldw	r5,28(sp)
   85a08:	1023883a 	mov	r17,r2
   85a0c:	0087c600 	call	87c60 <_Bfree>
   85a10:	dc400715 	stw	r17,28(sp)
   85a14:	d9001017 	ldw	r4,64(sp)
   85a18:	248dc83a 	sub	r6,r4,r18
   85a1c:	30010e1e 	bne	r6,zero,85e58 <_dtoa_r+0xc80>
   85a20:	d9001617 	ldw	r4,88(sp)
   85a24:	04400044 	movi	r17,1
   85a28:	880b883a 	mov	r5,r17
   85a2c:	00889440 	call	88944 <__i2b>
   85a30:	d9800917 	ldw	r6,36(sp)
   85a34:	1025883a 	mov	r18,r2
   85a38:	0180040e 	bge	zero,r6,85a4c <_dtoa_r+0x874>
   85a3c:	d9001617 	ldw	r4,88(sp)
   85a40:	100b883a 	mov	r5,r2
   85a44:	0088aac0 	call	88aac <__pow5mult>
   85a48:	1025883a 	mov	r18,r2
   85a4c:	d8801717 	ldw	r2,92(sp)
   85a50:	8880f30e 	bge	r17,r2,85e20 <_dtoa_r+0xc48>
   85a54:	0023883a 	mov	r17,zero
   85a58:	d9800917 	ldw	r6,36(sp)
   85a5c:	30019e1e 	bne	r6,zero,860d8 <_dtoa_r+0xf00>
   85a60:	00c00044 	movi	r3,1
   85a64:	d9000a17 	ldw	r4,40(sp)
   85a68:	20c5883a 	add	r2,r4,r3
   85a6c:	10c007cc 	andi	r3,r2,31
   85a70:	1800841e 	bne	r3,zero,85c84 <_dtoa_r+0xaac>
   85a74:	00800704 	movi	r2,28
   85a78:	d9000a17 	ldw	r4,40(sp)
   85a7c:	d9801117 	ldw	r6,68(sp)
   85a80:	80a1883a 	add	r16,r16,r2
   85a84:	2089883a 	add	r4,r4,r2
   85a88:	308d883a 	add	r6,r6,r2
   85a8c:	d9000a15 	stw	r4,40(sp)
   85a90:	d9801115 	stw	r6,68(sp)
   85a94:	d8801117 	ldw	r2,68(sp)
   85a98:	0080050e 	bge	zero,r2,85ab0 <_dtoa_r+0x8d8>
   85a9c:	d9400717 	ldw	r5,28(sp)
   85aa0:	d9001617 	ldw	r4,88(sp)
   85aa4:	100d883a 	mov	r6,r2
   85aa8:	00885a40 	call	885a4 <__lshift>
   85aac:	d8800715 	stw	r2,28(sp)
   85ab0:	d8c00a17 	ldw	r3,40(sp)
   85ab4:	00c0050e 	bge	zero,r3,85acc <_dtoa_r+0x8f4>
   85ab8:	d9001617 	ldw	r4,88(sp)
   85abc:	900b883a 	mov	r5,r18
   85ac0:	180d883a 	mov	r6,r3
   85ac4:	00885a40 	call	885a4 <__lshift>
   85ac8:	1025883a 	mov	r18,r2
   85acc:	d9000c17 	ldw	r4,48(sp)
   85ad0:	2005003a 	cmpeq	r2,r4,zero
   85ad4:	10016f26 	beq	r2,zero,86094 <_dtoa_r+0xebc>
   85ad8:	d9000f17 	ldw	r4,60(sp)
   85adc:	0102170e 	bge	zero,r4,8633c <_dtoa_r+0x1164>
   85ae0:	d9800b17 	ldw	r6,44(sp)
   85ae4:	3005003a 	cmpeq	r2,r6,zero
   85ae8:	1000881e 	bne	r2,zero,85d0c <_dtoa_r+0xb34>
   85aec:	0400050e 	bge	zero,r16,85b04 <_dtoa_r+0x92c>
   85af0:	d9001617 	ldw	r4,88(sp)
   85af4:	980b883a 	mov	r5,r19
   85af8:	800d883a 	mov	r6,r16
   85afc:	00885a40 	call	885a4 <__lshift>
   85b00:	1027883a 	mov	r19,r2
   85b04:	8804c03a 	cmpne	r2,r17,zero
   85b08:	1002541e 	bne	r2,zero,8645c <_dtoa_r+0x1284>
   85b0c:	980b883a 	mov	r5,r19
   85b10:	dd800517 	ldw	r22,20(sp)
   85b14:	dcc00615 	stw	r19,24(sp)
   85b18:	a700004c 	andi	fp,r20,1
   85b1c:	2827883a 	mov	r19,r5
   85b20:	d9000717 	ldw	r4,28(sp)
   85b24:	900b883a 	mov	r5,r18
   85b28:	0084f940 	call	84f94 <quorem>
   85b2c:	d9000717 	ldw	r4,28(sp)
   85b30:	d9400617 	ldw	r5,24(sp)
   85b34:	1023883a 	mov	r17,r2
   85b38:	8dc00c04 	addi	r23,r17,48
   85b3c:	0087dbc0 	call	87dbc <__mcmp>
   85b40:	d9001617 	ldw	r4,88(sp)
   85b44:	900b883a 	mov	r5,r18
   85b48:	980d883a 	mov	r6,r19
   85b4c:	1029883a 	mov	r20,r2
   85b50:	00884180 	call	88418 <__mdiff>
   85b54:	102b883a 	mov	r21,r2
   85b58:	10800317 	ldw	r2,12(r2)
   85b5c:	1001281e 	bne	r2,zero,86000 <_dtoa_r+0xe28>
   85b60:	d9000717 	ldw	r4,28(sp)
   85b64:	a80b883a 	mov	r5,r21
   85b68:	0087dbc0 	call	87dbc <__mcmp>
   85b6c:	d9001617 	ldw	r4,88(sp)
   85b70:	1021883a 	mov	r16,r2
   85b74:	a80b883a 	mov	r5,r21
   85b78:	0087c600 	call	87c60 <_Bfree>
   85b7c:	8000041e 	bne	r16,zero,85b90 <_dtoa_r+0x9b8>
   85b80:	d8801717 	ldw	r2,92(sp)
   85b84:	1000021e 	bne	r2,zero,85b90 <_dtoa_r+0x9b8>
   85b88:	e004c03a 	cmpne	r2,fp,zero
   85b8c:	10011726 	beq	r2,zero,85fec <_dtoa_r+0xe14>
   85b90:	a0010616 	blt	r20,zero,85fac <_dtoa_r+0xdd4>
   85b94:	a000041e 	bne	r20,zero,85ba8 <_dtoa_r+0x9d0>
   85b98:	d8c01717 	ldw	r3,92(sp)
   85b9c:	1800021e 	bne	r3,zero,85ba8 <_dtoa_r+0x9d0>
   85ba0:	e004c03a 	cmpne	r2,fp,zero
   85ba4:	10010126 	beq	r2,zero,85fac <_dtoa_r+0xdd4>
   85ba8:	04023d16 	blt	zero,r16,864a0 <_dtoa_r+0x12c8>
   85bac:	b5c00005 	stb	r23,0(r22)
   85bb0:	d9800517 	ldw	r6,20(sp)
   85bb4:	d9000f17 	ldw	r4,60(sp)
   85bb8:	b5800044 	addi	r22,r22,1
   85bbc:	3105883a 	add	r2,r6,r4
   85bc0:	b0806526 	beq	r22,r2,85d58 <_dtoa_r+0xb80>
   85bc4:	d9400717 	ldw	r5,28(sp)
   85bc8:	d9001617 	ldw	r4,88(sp)
   85bcc:	01800284 	movi	r6,10
   85bd0:	000f883a 	mov	r7,zero
   85bd4:	00889800 	call	88980 <__multadd>
   85bd8:	d8800715 	stw	r2,28(sp)
   85bdc:	d8800617 	ldw	r2,24(sp)
   85be0:	14c10c26 	beq	r2,r19,86014 <_dtoa_r+0xe3c>
   85be4:	d9400617 	ldw	r5,24(sp)
   85be8:	d9001617 	ldw	r4,88(sp)
   85bec:	01800284 	movi	r6,10
   85bf0:	000f883a 	mov	r7,zero
   85bf4:	00889800 	call	88980 <__multadd>
   85bf8:	d9001617 	ldw	r4,88(sp)
   85bfc:	980b883a 	mov	r5,r19
   85c00:	01800284 	movi	r6,10
   85c04:	000f883a 	mov	r7,zero
   85c08:	d8800615 	stw	r2,24(sp)
   85c0c:	00889800 	call	88980 <__multadd>
   85c10:	1027883a 	mov	r19,r2
   85c14:	003fc206 	br	85b20 <_dtoa_r+0x948>
   85c18:	2445c83a 	sub	r2,r4,r17
   85c1c:	a088983a 	sll	r4,r20,r2
   85c20:	003e4b06 	br	85550 <_dtoa_r+0x378>
   85c24:	01bfffc4 	movi	r6,-1
   85c28:	00800044 	movi	r2,1
   85c2c:	d9800e15 	stw	r6,56(sp)
   85c30:	d9800f15 	stw	r6,60(sp)
   85c34:	d8800b15 	stw	r2,44(sp)
   85c38:	d8c01617 	ldw	r3,88(sp)
   85c3c:	008005c4 	movi	r2,23
   85c40:	18001115 	stw	zero,68(r3)
   85c44:	1580082e 	bgeu	r2,r22,85c68 <_dtoa_r+0xa90>
   85c48:	00c00104 	movi	r3,4
   85c4c:	0009883a 	mov	r4,zero
   85c50:	18c7883a 	add	r3,r3,r3
   85c54:	18800504 	addi	r2,r3,20
   85c58:	21000044 	addi	r4,r4,1
   85c5c:	b0bffc2e 	bgeu	r22,r2,85c50 <_dtoa_r+0xa78>
   85c60:	d9801617 	ldw	r6,88(sp)
   85c64:	31001115 	stw	r4,68(r6)
   85c68:	dc000f17 	ldw	r16,60(sp)
   85c6c:	003e4b06 	br	8559c <_dtoa_r+0x3c4>
   85c70:	d9801717 	ldw	r6,92(sp)
   85c74:	0023883a 	mov	r17,zero
   85c78:	31bfff04 	addi	r6,r6,-4
   85c7c:	d9801715 	stw	r6,92(sp)
   85c80:	003df806 	br	85464 <_dtoa_r+0x28c>
   85c84:	00800804 	movi	r2,32
   85c88:	10c9c83a 	sub	r4,r2,r3
   85c8c:	00c00104 	movi	r3,4
   85c90:	19005a16 	blt	r3,r4,85dfc <_dtoa_r+0xc24>
   85c94:	008000c4 	movi	r2,3
   85c98:	113f7e16 	blt	r2,r4,85a94 <_dtoa_r+0x8bc>
   85c9c:	20800704 	addi	r2,r4,28
   85ca0:	003f7506 	br	85a78 <_dtoa_r+0x8a0>
   85ca4:	d9801717 	ldw	r6,92(sp)
   85ca8:	00800044 	movi	r2,1
   85cac:	1180a10e 	bge	r2,r6,85f34 <_dtoa_r+0xd5c>
   85cb0:	d9800f17 	ldw	r6,60(sp)
   85cb4:	d8c01017 	ldw	r3,64(sp)
   85cb8:	30bfffc4 	addi	r2,r6,-1
   85cbc:	1881c616 	blt	r3,r2,863d8 <_dtoa_r+0x1200>
   85cc0:	18a5c83a 	sub	r18,r3,r2
   85cc4:	d8800f17 	ldw	r2,60(sp)
   85cc8:	10026216 	blt	r2,zero,86654 <_dtoa_r+0x147c>
   85ccc:	dc001117 	ldw	r16,68(sp)
   85cd0:	1007883a 	mov	r3,r2
   85cd4:	d9800a17 	ldw	r6,40(sp)
   85cd8:	d8801117 	ldw	r2,68(sp)
   85cdc:	d9001617 	ldw	r4,88(sp)
   85ce0:	30cd883a 	add	r6,r6,r3
   85ce4:	10c5883a 	add	r2,r2,r3
   85ce8:	01400044 	movi	r5,1
   85cec:	d9800a15 	stw	r6,40(sp)
   85cf0:	d8801115 	stw	r2,68(sp)
   85cf4:	00889440 	call	88944 <__i2b>
   85cf8:	1027883a 	mov	r19,r2
   85cfc:	003f2506 	br	85994 <_dtoa_r+0x7bc>
   85d00:	00c00274 	movhi	r3,9
   85d04:	18f95704 	addi	r3,r3,-6820
   85d08:	003d6706 	br	852a8 <_dtoa_r+0xd0>
   85d0c:	dd800517 	ldw	r22,20(sp)
   85d10:	04000044 	movi	r16,1
   85d14:	00000706 	br	85d34 <_dtoa_r+0xb5c>
   85d18:	d9400717 	ldw	r5,28(sp)
   85d1c:	d9001617 	ldw	r4,88(sp)
   85d20:	01800284 	movi	r6,10
   85d24:	000f883a 	mov	r7,zero
   85d28:	00889800 	call	88980 <__multadd>
   85d2c:	d8800715 	stw	r2,28(sp)
   85d30:	84000044 	addi	r16,r16,1
   85d34:	d9000717 	ldw	r4,28(sp)
   85d38:	900b883a 	mov	r5,r18
   85d3c:	0084f940 	call	84f94 <quorem>
   85d40:	15c00c04 	addi	r23,r2,48
   85d44:	b5c00005 	stb	r23,0(r22)
   85d48:	d8c00f17 	ldw	r3,60(sp)
   85d4c:	b5800044 	addi	r22,r22,1
   85d50:	80fff116 	blt	r16,r3,85d18 <_dtoa_r+0xb40>
   85d54:	d8000615 	stw	zero,24(sp)
   85d58:	d9400717 	ldw	r5,28(sp)
   85d5c:	d9001617 	ldw	r4,88(sp)
   85d60:	01800044 	movi	r6,1
   85d64:	00885a40 	call	885a4 <__lshift>
   85d68:	1009883a 	mov	r4,r2
   85d6c:	900b883a 	mov	r5,r18
   85d70:	d8800715 	stw	r2,28(sp)
   85d74:	0087dbc0 	call	87dbc <__mcmp>
   85d78:	00803c0e 	bge	zero,r2,85e6c <_dtoa_r+0xc94>
   85d7c:	b009883a 	mov	r4,r22
   85d80:	213fffc4 	addi	r4,r4,-1
   85d84:	21400003 	ldbu	r5,0(r4)
   85d88:	00800e44 	movi	r2,57
   85d8c:	28c03fcc 	andi	r3,r5,255
   85d90:	18c0201c 	xori	r3,r3,128
   85d94:	18ffe004 	addi	r3,r3,-128
   85d98:	1881981e 	bne	r3,r2,863fc <_dtoa_r+0x1224>
   85d9c:	d9800517 	ldw	r6,20(sp)
   85da0:	21bff71e 	bne	r4,r6,85d80 <_dtoa_r+0xba8>
   85da4:	d8800d17 	ldw	r2,52(sp)
   85da8:	37000044 	addi	fp,r6,1
   85dac:	10800044 	addi	r2,r2,1
   85db0:	d8800d15 	stw	r2,52(sp)
   85db4:	00800c44 	movi	r2,49
   85db8:	30800005 	stb	r2,0(r6)
   85dbc:	d9001617 	ldw	r4,88(sp)
   85dc0:	900b883a 	mov	r5,r18
   85dc4:	0087c600 	call	87c60 <_Bfree>
   85dc8:	983ecd26 	beq	r19,zero,85900 <_dtoa_r+0x728>
   85dcc:	d8c00617 	ldw	r3,24(sp)
   85dd0:	18000426 	beq	r3,zero,85de4 <_dtoa_r+0xc0c>
   85dd4:	1cc00326 	beq	r3,r19,85de4 <_dtoa_r+0xc0c>
   85dd8:	d9001617 	ldw	r4,88(sp)
   85ddc:	180b883a 	mov	r5,r3
   85de0:	0087c600 	call	87c60 <_Bfree>
   85de4:	d9001617 	ldw	r4,88(sp)
   85de8:	980b883a 	mov	r5,r19
   85dec:	0087c600 	call	87c60 <_Bfree>
   85df0:	003ec306 	br	85900 <_dtoa_r+0x728>
   85df4:	1805883a 	mov	r2,r3
   85df8:	003eeb06 	br	859a8 <_dtoa_r+0x7d0>
   85dfc:	d9800a17 	ldw	r6,40(sp)
   85e00:	d8c01117 	ldw	r3,68(sp)
   85e04:	20bfff04 	addi	r2,r4,-4
   85e08:	308d883a 	add	r6,r6,r2
   85e0c:	1887883a 	add	r3,r3,r2
   85e10:	80a1883a 	add	r16,r16,r2
   85e14:	d9800a15 	stw	r6,40(sp)
   85e18:	d8c01115 	stw	r3,68(sp)
   85e1c:	003f1d06 	br	85a94 <_dtoa_r+0x8bc>
   85e20:	a03f0c1e 	bne	r20,zero,85a54 <_dtoa_r+0x87c>
   85e24:	00800434 	movhi	r2,16
   85e28:	10bfffc4 	addi	r2,r2,-1
   85e2c:	a884703a 	and	r2,r21,r2
   85e30:	103f081e 	bne	r2,zero,85a54 <_dtoa_r+0x87c>
   85e34:	a89ffc2c 	andhi	r2,r21,32752
   85e38:	103f0626 	beq	r2,zero,85a54 <_dtoa_r+0x87c>
   85e3c:	d8c01117 	ldw	r3,68(sp)
   85e40:	d9000a17 	ldw	r4,40(sp)
   85e44:	18c00044 	addi	r3,r3,1
   85e48:	21000044 	addi	r4,r4,1
   85e4c:	d8c01115 	stw	r3,68(sp)
   85e50:	d9000a15 	stw	r4,40(sp)
   85e54:	003f0006 	br	85a58 <_dtoa_r+0x880>
   85e58:	d9400717 	ldw	r5,28(sp)
   85e5c:	d9001617 	ldw	r4,88(sp)
   85e60:	0088aac0 	call	88aac <__pow5mult>
   85e64:	d8800715 	stw	r2,28(sp)
   85e68:	003eed06 	br	85a20 <_dtoa_r+0x848>
   85e6c:	1000021e 	bne	r2,zero,85e78 <_dtoa_r+0xca0>
   85e70:	b880004c 	andi	r2,r23,1
   85e74:	103fc11e 	bne	r2,zero,85d7c <_dtoa_r+0xba4>
   85e78:	b5bfffc4 	addi	r22,r22,-1
   85e7c:	b0c00007 	ldb	r3,0(r22)
   85e80:	00800c04 	movi	r2,48
   85e84:	18bffc26 	beq	r3,r2,85e78 <_dtoa_r+0xca0>
   85e88:	b7000044 	addi	fp,r22,1
   85e8c:	003fcb06 	br	85dbc <_dtoa_r+0xbe4>
   85e90:	d9800d17 	ldw	r6,52(sp)
   85e94:	018fc83a 	sub	r7,zero,r6
   85e98:	3801f726 	beq	r7,zero,86678 <_dtoa_r+0x14a0>
   85e9c:	398003cc 	andi	r6,r7,15
   85ea0:	300c90fa 	slli	r6,r6,3
   85ea4:	01400274 	movhi	r5,9
   85ea8:	29797504 	addi	r5,r5,-6700
   85eac:	d9001217 	ldw	r4,72(sp)
   85eb0:	314d883a 	add	r6,r6,r5
   85eb4:	30c00117 	ldw	r3,4(r6)
   85eb8:	30800017 	ldw	r2,0(r6)
   85ebc:	d9401317 	ldw	r5,76(sp)
   85ec0:	3821d13a 	srai	r16,r7,4
   85ec4:	100d883a 	mov	r6,r2
   85ec8:	180f883a 	mov	r7,r3
   85ecc:	00815c40 	call	815c4 <__muldf3>
   85ed0:	1011883a 	mov	r8,r2
   85ed4:	1813883a 	mov	r9,r3
   85ed8:	1029883a 	mov	r20,r2
   85edc:	182b883a 	mov	r21,r3
   85ee0:	8001e526 	beq	r16,zero,86678 <_dtoa_r+0x14a0>
   85ee4:	05800084 	movi	r22,2
   85ee8:	04400274 	movhi	r17,9
   85eec:	8c79a704 	addi	r17,r17,-6500
   85ef0:	8080004c 	andi	r2,r16,1
   85ef4:	1005003a 	cmpeq	r2,r2,zero
   85ef8:	1000081e 	bne	r2,zero,85f1c <_dtoa_r+0xd44>
   85efc:	89800017 	ldw	r6,0(r17)
   85f00:	89c00117 	ldw	r7,4(r17)
   85f04:	480b883a 	mov	r5,r9
   85f08:	4009883a 	mov	r4,r8
   85f0c:	00815c40 	call	815c4 <__muldf3>
   85f10:	1011883a 	mov	r8,r2
   85f14:	b5800044 	addi	r22,r22,1
   85f18:	1813883a 	mov	r9,r3
   85f1c:	8021d07a 	srai	r16,r16,1
   85f20:	8c400204 	addi	r17,r17,8
   85f24:	803ff21e 	bne	r16,zero,85ef0 <_dtoa_r+0xd18>
   85f28:	4029883a 	mov	r20,r8
   85f2c:	482b883a 	mov	r21,r9
   85f30:	003dca06 	br	8565c <_dtoa_r+0x484>
   85f34:	d9000817 	ldw	r4,32(sp)
   85f38:	2005003a 	cmpeq	r2,r4,zero
   85f3c:	1001f61e 	bne	r2,zero,86718 <_dtoa_r+0x1540>
   85f40:	dc001117 	ldw	r16,68(sp)
   85f44:	dc801017 	ldw	r18,64(sp)
   85f48:	18c10cc4 	addi	r3,r3,1075
   85f4c:	003f6106 	br	85cd4 <_dtoa_r+0xafc>
   85f50:	d8000b15 	stw	zero,44(sp)
   85f54:	d9802617 	ldw	r6,152(sp)
   85f58:	d8c00d17 	ldw	r3,52(sp)
   85f5c:	30800044 	addi	r2,r6,1
   85f60:	18ad883a 	add	r22,r3,r2
   85f64:	b13fffc4 	addi	r4,r22,-1
   85f68:	d9000e15 	stw	r4,56(sp)
   85f6c:	0581f60e 	bge	zero,r22,86748 <_dtoa_r+0x1570>
   85f70:	dd800f15 	stw	r22,60(sp)
   85f74:	003f3006 	br	85c38 <_dtoa_r+0xa60>
   85f78:	d8000b15 	stw	zero,44(sp)
   85f7c:	d9002617 	ldw	r4,152(sp)
   85f80:	0101eb0e 	bge	zero,r4,86730 <_dtoa_r+0x1558>
   85f84:	202d883a 	mov	r22,r4
   85f88:	d9000e15 	stw	r4,56(sp)
   85f8c:	d9000f15 	stw	r4,60(sp)
   85f90:	003f2906 	br	85c38 <_dtoa_r+0xa60>
   85f94:	01800044 	movi	r6,1
   85f98:	d9800b15 	stw	r6,44(sp)
   85f9c:	003ff706 	br	85f7c <_dtoa_r+0xda4>
   85fa0:	01000044 	movi	r4,1
   85fa4:	d9000b15 	stw	r4,44(sp)
   85fa8:	003fea06 	br	85f54 <_dtoa_r+0xd7c>
   85fac:	04000c0e 	bge	zero,r16,85fe0 <_dtoa_r+0xe08>
   85fb0:	d9400717 	ldw	r5,28(sp)
   85fb4:	d9001617 	ldw	r4,88(sp)
   85fb8:	01800044 	movi	r6,1
   85fbc:	00885a40 	call	885a4 <__lshift>
   85fc0:	1009883a 	mov	r4,r2
   85fc4:	900b883a 	mov	r5,r18
   85fc8:	d8800715 	stw	r2,28(sp)
   85fcc:	0087dbc0 	call	87dbc <__mcmp>
   85fd0:	0081e00e 	bge	zero,r2,86754 <_dtoa_r+0x157c>
   85fd4:	bdc00044 	addi	r23,r23,1
   85fd8:	00800e84 	movi	r2,58
   85fdc:	b881a226 	beq	r23,r2,86668 <_dtoa_r+0x1490>
   85fe0:	b7000044 	addi	fp,r22,1
   85fe4:	b5c00005 	stb	r23,0(r22)
   85fe8:	003f7406 	br	85dbc <_dtoa_r+0xbe4>
   85fec:	00800e44 	movi	r2,57
   85ff0:	b8819d26 	beq	r23,r2,86668 <_dtoa_r+0x1490>
   85ff4:	053ffa0e 	bge	zero,r20,85fe0 <_dtoa_r+0xe08>
   85ff8:	8dc00c44 	addi	r23,r17,49
   85ffc:	003ff806 	br	85fe0 <_dtoa_r+0xe08>
   86000:	d9001617 	ldw	r4,88(sp)
   86004:	a80b883a 	mov	r5,r21
   86008:	04000044 	movi	r16,1
   8600c:	0087c600 	call	87c60 <_Bfree>
   86010:	003edf06 	br	85b90 <_dtoa_r+0x9b8>
   86014:	d9001617 	ldw	r4,88(sp)
   86018:	980b883a 	mov	r5,r19
   8601c:	01800284 	movi	r6,10
   86020:	000f883a 	mov	r7,zero
   86024:	00889800 	call	88980 <__multadd>
   86028:	1027883a 	mov	r19,r2
   8602c:	d8800615 	stw	r2,24(sp)
   86030:	003ebb06 	br	85b20 <_dtoa_r+0x948>
   86034:	d9801117 	ldw	r6,68(sp)
   86038:	d8800d17 	ldw	r2,52(sp)
   8603c:	d8000915 	stw	zero,36(sp)
   86040:	308dc83a 	sub	r6,r6,r2
   86044:	0087c83a 	sub	r3,zero,r2
   86048:	d9801115 	stw	r6,68(sp)
   8604c:	d8c01015 	stw	r3,64(sp)
   86050:	003cfe06 	br	8544c <_dtoa_r+0x274>
   86054:	018dc83a 	sub	r6,zero,r6
   86058:	d9801115 	stw	r6,68(sp)
   8605c:	d8000a15 	stw	zero,40(sp)
   86060:	003cf306 	br	85430 <_dtoa_r+0x258>
   86064:	d9000d17 	ldw	r4,52(sp)
   86068:	008acac0 	call	8acac <__floatsidf>
   8606c:	880b883a 	mov	r5,r17
   86070:	8009883a 	mov	r4,r16
   86074:	180f883a 	mov	r7,r3
   86078:	100d883a 	mov	r6,r2
   8607c:	008aa8c0 	call	8aa8c <__nedf2>
   86080:	103ce126 	beq	r2,zero,85408 <_dtoa_r+0x230>
   86084:	d9800d17 	ldw	r6,52(sp)
   86088:	31bfffc4 	addi	r6,r6,-1
   8608c:	d9800d15 	stw	r6,52(sp)
   86090:	003cdd06 	br	85408 <_dtoa_r+0x230>
   86094:	d9000717 	ldw	r4,28(sp)
   86098:	900b883a 	mov	r5,r18
   8609c:	0087dbc0 	call	87dbc <__mcmp>
   860a0:	103e8d0e 	bge	r2,zero,85ad8 <_dtoa_r+0x900>
   860a4:	d9400717 	ldw	r5,28(sp)
   860a8:	d9001617 	ldw	r4,88(sp)
   860ac:	01800284 	movi	r6,10
   860b0:	000f883a 	mov	r7,zero
   860b4:	00889800 	call	88980 <__multadd>
   860b8:	d9800d17 	ldw	r6,52(sp)
   860bc:	d8800715 	stw	r2,28(sp)
   860c0:	31bfffc4 	addi	r6,r6,-1
   860c4:	d9800d15 	stw	r6,52(sp)
   860c8:	b001a71e 	bne	r22,zero,86768 <_dtoa_r+0x1590>
   860cc:	d8800e17 	ldw	r2,56(sp)
   860d0:	d8800f15 	stw	r2,60(sp)
   860d4:	003e8006 	br	85ad8 <_dtoa_r+0x900>
   860d8:	90800417 	ldw	r2,16(r18)
   860dc:	1085883a 	add	r2,r2,r2
   860e0:	1085883a 	add	r2,r2,r2
   860e4:	1485883a 	add	r2,r2,r18
   860e8:	11000417 	ldw	r4,16(r2)
   860ec:	0087c880 	call	87c88 <__hi0bits>
   860f0:	00c00804 	movi	r3,32
   860f4:	1887c83a 	sub	r3,r3,r2
   860f8:	003e5a06 	br	85a64 <_dtoa_r+0x88c>
   860fc:	d9400717 	ldw	r5,28(sp)
   86100:	d9801017 	ldw	r6,64(sp)
   86104:	d9001617 	ldw	r4,88(sp)
   86108:	0088aac0 	call	88aac <__pow5mult>
   8610c:	d8800715 	stw	r2,28(sp)
   86110:	003e4306 	br	85a20 <_dtoa_r+0x848>
   86114:	d9800f17 	ldw	r6,60(sp)
   86118:	d8800d17 	ldw	r2,52(sp)
   8611c:	d9800315 	stw	r6,12(sp)
   86120:	d8800415 	stw	r2,16(sp)
   86124:	d8c00b17 	ldw	r3,44(sp)
   86128:	1805003a 	cmpeq	r2,r3,zero
   8612c:	1000e21e 	bne	r2,zero,864b8 <_dtoa_r+0x12e0>
   86130:	d9000317 	ldw	r4,12(sp)
   86134:	0005883a 	mov	r2,zero
   86138:	00cff834 	movhi	r3,16352
   8613c:	200c90fa 	slli	r6,r4,3
   86140:	01000274 	movhi	r4,9
   86144:	21397504 	addi	r4,r4,-6700
   86148:	180b883a 	mov	r5,r3
   8614c:	310d883a 	add	r6,r6,r4
   86150:	327fff17 	ldw	r9,-4(r6)
   86154:	323ffe17 	ldw	r8,-8(r6)
   86158:	1009883a 	mov	r4,r2
   8615c:	480f883a 	mov	r7,r9
   86160:	400d883a 	mov	r6,r8
   86164:	00819880 	call	81988 <__divdf3>
   86168:	180b883a 	mov	r5,r3
   8616c:	b00d883a 	mov	r6,r22
   86170:	b80f883a 	mov	r7,r23
   86174:	1009883a 	mov	r4,r2
   86178:	00814d00 	call	814d0 <__subdf3>
   8617c:	a80b883a 	mov	r5,r21
   86180:	a009883a 	mov	r4,r20
   86184:	d8c01915 	stw	r3,100(sp)
   86188:	d8801815 	stw	r2,96(sp)
   8618c:	008ada40 	call	8ada4 <__fixdfsi>
   86190:	1009883a 	mov	r4,r2
   86194:	1027883a 	mov	r19,r2
   86198:	008acac0 	call	8acac <__floatsidf>
   8619c:	a80b883a 	mov	r5,r21
   861a0:	a009883a 	mov	r4,r20
   861a4:	180f883a 	mov	r7,r3
   861a8:	100d883a 	mov	r6,r2
   861ac:	00814d00 	call	814d0 <__subdf3>
   861b0:	d9801817 	ldw	r6,96(sp)
   861b4:	1823883a 	mov	r17,r3
   861b8:	d8801415 	stw	r2,80(sp)
   861bc:	302d883a 	mov	r22,r6
   861c0:	d9800517 	ldw	r6,20(sp)
   861c4:	9cc00c04 	addi	r19,r19,48
   861c8:	dc401515 	stw	r17,84(sp)
   861cc:	d8c01917 	ldw	r3,100(sp)
   861d0:	34c00005 	stb	r19,0(r6)
   861d4:	d8800517 	ldw	r2,20(sp)
   861d8:	d9401917 	ldw	r5,100(sp)
   861dc:	d9801417 	ldw	r6,80(sp)
   861e0:	b009883a 	mov	r4,r22
   861e4:	880f883a 	mov	r7,r17
   861e8:	182f883a 	mov	r23,r3
   861ec:	17000044 	addi	fp,r2,1
   861f0:	008ab140 	call	8ab14 <__gtdf2>
   861f4:	00804e16 	blt	zero,r2,86330 <_dtoa_r+0x1158>
   861f8:	d9801417 	ldw	r6,80(sp)
   861fc:	0005883a 	mov	r2,zero
   86200:	00cffc34 	movhi	r3,16368
   86204:	180b883a 	mov	r5,r3
   86208:	880f883a 	mov	r7,r17
   8620c:	1009883a 	mov	r4,r2
   86210:	00814d00 	call	814d0 <__subdf3>
   86214:	d9401917 	ldw	r5,100(sp)
   86218:	180f883a 	mov	r7,r3
   8621c:	b009883a 	mov	r4,r22
   86220:	100d883a 	mov	r6,r2
   86224:	008ab140 	call	8ab14 <__gtdf2>
   86228:	00bda216 	blt	zero,r2,858b4 <_dtoa_r+0x6dc>
   8622c:	d8c00317 	ldw	r3,12(sp)
   86230:	00800044 	movi	r2,1
   86234:	10c01216 	blt	r2,r3,86280 <_dtoa_r+0x10a8>
   86238:	003d4506 	br	85750 <_dtoa_r+0x578>
   8623c:	d9801417 	ldw	r6,80(sp)
   86240:	0005883a 	mov	r2,zero
   86244:	00cffc34 	movhi	r3,16368
   86248:	180b883a 	mov	r5,r3
   8624c:	880f883a 	mov	r7,r17
   86250:	1009883a 	mov	r4,r2
   86254:	00814d00 	call	814d0 <__subdf3>
   86258:	d9c01b17 	ldw	r7,108(sp)
   8625c:	180b883a 	mov	r5,r3
   86260:	1009883a 	mov	r4,r2
   86264:	b00d883a 	mov	r6,r22
   86268:	008ac240 	call	8ac24 <__ltdf2>
   8626c:	103d9116 	blt	r2,zero,858b4 <_dtoa_r+0x6dc>
   86270:	d9800517 	ldw	r6,20(sp)
   86274:	d9000317 	ldw	r4,12(sp)
   86278:	3105883a 	add	r2,r6,r4
   8627c:	e0bd3426 	beq	fp,r2,85750 <_dtoa_r+0x578>
   86280:	04500934 	movhi	r17,16420
   86284:	0021883a 	mov	r16,zero
   86288:	b80b883a 	mov	r5,r23
   8628c:	b009883a 	mov	r4,r22
   86290:	800d883a 	mov	r6,r16
   86294:	880f883a 	mov	r7,r17
   86298:	00815c40 	call	815c4 <__muldf3>
   8629c:	d9401517 	ldw	r5,84(sp)
   862a0:	d9001417 	ldw	r4,80(sp)
   862a4:	880f883a 	mov	r7,r17
   862a8:	000d883a 	mov	r6,zero
   862ac:	d8801a15 	stw	r2,104(sp)
   862b0:	d8c01b15 	stw	r3,108(sp)
   862b4:	00815c40 	call	815c4 <__muldf3>
   862b8:	180b883a 	mov	r5,r3
   862bc:	1009883a 	mov	r4,r2
   862c0:	1823883a 	mov	r17,r3
   862c4:	1021883a 	mov	r16,r2
   862c8:	008ada40 	call	8ada4 <__fixdfsi>
   862cc:	1009883a 	mov	r4,r2
   862d0:	102b883a 	mov	r21,r2
   862d4:	008acac0 	call	8acac <__floatsidf>
   862d8:	880b883a 	mov	r5,r17
   862dc:	8009883a 	mov	r4,r16
   862e0:	180f883a 	mov	r7,r3
   862e4:	100d883a 	mov	r6,r2
   862e8:	00814d00 	call	814d0 <__subdf3>
   862ec:	1021883a 	mov	r16,r2
   862f0:	d9001b17 	ldw	r4,108(sp)
   862f4:	1823883a 	mov	r17,r3
   862f8:	dc001415 	stw	r16,80(sp)
   862fc:	ad400c04 	addi	r21,r21,48
   86300:	dc401515 	stw	r17,84(sp)
   86304:	d8801a17 	ldw	r2,104(sp)
   86308:	e5400005 	stb	r21,0(fp)
   8630c:	202f883a 	mov	r23,r4
   86310:	d9c01b17 	ldw	r7,108(sp)
   86314:	d9001417 	ldw	r4,80(sp)
   86318:	880b883a 	mov	r5,r17
   8631c:	100d883a 	mov	r6,r2
   86320:	102d883a 	mov	r22,r2
   86324:	e7000044 	addi	fp,fp,1
   86328:	008ac240 	call	8ac24 <__ltdf2>
   8632c:	103fc30e 	bge	r2,zero,8623c <_dtoa_r+0x1064>
   86330:	d9000417 	ldw	r4,16(sp)
   86334:	d9000d15 	stw	r4,52(sp)
   86338:	003d7106 	br	85900 <_dtoa_r+0x728>
   8633c:	d9801717 	ldw	r6,92(sp)
   86340:	00800084 	movi	r2,2
   86344:	11bde60e 	bge	r2,r6,85ae0 <_dtoa_r+0x908>
   86348:	203cfb1e 	bne	r4,zero,85738 <_dtoa_r+0x560>
   8634c:	d9001617 	ldw	r4,88(sp)
   86350:	900b883a 	mov	r5,r18
   86354:	01800144 	movi	r6,5
   86358:	000f883a 	mov	r7,zero
   8635c:	00889800 	call	88980 <__multadd>
   86360:	d9000717 	ldw	r4,28(sp)
   86364:	100b883a 	mov	r5,r2
   86368:	1025883a 	mov	r18,r2
   8636c:	0087dbc0 	call	87dbc <__mcmp>
   86370:	00bcf10e 	bge	zero,r2,85738 <_dtoa_r+0x560>
   86374:	d8c00d17 	ldw	r3,52(sp)
   86378:	d9000517 	ldw	r4,20(sp)
   8637c:	d8000615 	stw	zero,24(sp)
   86380:	18c00044 	addi	r3,r3,1
   86384:	d8c00d15 	stw	r3,52(sp)
   86388:	00800c44 	movi	r2,49
   8638c:	27000044 	addi	fp,r4,1
   86390:	20800005 	stb	r2,0(r4)
   86394:	003e8906 	br	85dbc <_dtoa_r+0xbe4>
   86398:	d8c00517 	ldw	r3,20(sp)
   8639c:	003bc206 	br	852a8 <_dtoa_r+0xd0>
   863a0:	01800274 	movhi	r6,9
   863a4:	31b9a704 	addi	r6,r6,-6500
   863a8:	30c00917 	ldw	r3,36(r6)
   863ac:	30800817 	ldw	r2,32(r6)
   863b0:	d9001217 	ldw	r4,72(sp)
   863b4:	d9401317 	ldw	r5,76(sp)
   863b8:	180f883a 	mov	r7,r3
   863bc:	100d883a 	mov	r6,r2
   863c0:	00819880 	call	81988 <__divdf3>
   863c4:	948003cc 	andi	r18,r18,15
   863c8:	058000c4 	movi	r22,3
   863cc:	1029883a 	mov	r20,r2
   863d0:	182b883a 	mov	r21,r3
   863d4:	003c8906 	br	855fc <_dtoa_r+0x424>
   863d8:	d9001017 	ldw	r4,64(sp)
   863dc:	d9800917 	ldw	r6,36(sp)
   863e0:	0025883a 	mov	r18,zero
   863e4:	1105c83a 	sub	r2,r2,r4
   863e8:	2089883a 	add	r4,r4,r2
   863ec:	308d883a 	add	r6,r6,r2
   863f0:	d9001015 	stw	r4,64(sp)
   863f4:	d9800915 	stw	r6,36(sp)
   863f8:	003e3206 	br	85cc4 <_dtoa_r+0xaec>
   863fc:	28800044 	addi	r2,r5,1
   86400:	27000044 	addi	fp,r4,1
   86404:	20800005 	stb	r2,0(r4)
   86408:	003e6c06 	br	85dbc <_dtoa_r+0xbe4>
   8640c:	d8800f17 	ldw	r2,60(sp)
   86410:	00bce016 	blt	zero,r2,85794 <_dtoa_r+0x5bc>
   86414:	d9800f17 	ldw	r6,60(sp)
   86418:	303cc51e 	bne	r6,zero,85730 <_dtoa_r+0x558>
   8641c:	0005883a 	mov	r2,zero
   86420:	00d00534 	movhi	r3,16404
   86424:	980b883a 	mov	r5,r19
   86428:	180f883a 	mov	r7,r3
   8642c:	9009883a 	mov	r4,r18
   86430:	100d883a 	mov	r6,r2
   86434:	00815c40 	call	815c4 <__muldf3>
   86438:	180b883a 	mov	r5,r3
   8643c:	a80f883a 	mov	r7,r21
   86440:	1009883a 	mov	r4,r2
   86444:	a00d883a 	mov	r6,r20
   86448:	008ab9c0 	call	8ab9c <__gedf2>
   8644c:	103cb80e 	bge	r2,zero,85730 <_dtoa_r+0x558>
   86450:	0027883a 	mov	r19,zero
   86454:	0025883a 	mov	r18,zero
   86458:	003fc606 	br	86374 <_dtoa_r+0x119c>
   8645c:	99400117 	ldw	r5,4(r19)
   86460:	d9001617 	ldw	r4,88(sp)
   86464:	00881e00 	call	881e0 <_Balloc>
   86468:	99800417 	ldw	r6,16(r19)
   8646c:	11000304 	addi	r4,r2,12
   86470:	99400304 	addi	r5,r19,12
   86474:	318d883a 	add	r6,r6,r6
   86478:	318d883a 	add	r6,r6,r6
   8647c:	31800204 	addi	r6,r6,8
   86480:	1023883a 	mov	r17,r2
   86484:	0087a480 	call	87a48 <memcpy>
   86488:	d9001617 	ldw	r4,88(sp)
   8648c:	880b883a 	mov	r5,r17
   86490:	01800044 	movi	r6,1
   86494:	00885a40 	call	885a4 <__lshift>
   86498:	100b883a 	mov	r5,r2
   8649c:	003d9c06 	br	85b10 <_dtoa_r+0x938>
   864a0:	00800e44 	movi	r2,57
   864a4:	b8807026 	beq	r23,r2,86668 <_dtoa_r+0x1490>
   864a8:	b8800044 	addi	r2,r23,1
   864ac:	b7000044 	addi	fp,r22,1
   864b0:	b0800005 	stb	r2,0(r22)
   864b4:	003e4106 	br	85dbc <_dtoa_r+0xbe4>
   864b8:	d8800317 	ldw	r2,12(sp)
   864bc:	01800274 	movhi	r6,9
   864c0:	31b97504 	addi	r6,r6,-6700
   864c4:	b009883a 	mov	r4,r22
   864c8:	100e90fa 	slli	r7,r2,3
   864cc:	b80b883a 	mov	r5,r23
   864d0:	398f883a 	add	r7,r7,r6
   864d4:	38bffe17 	ldw	r2,-8(r7)
   864d8:	d9800517 	ldw	r6,20(sp)
   864dc:	38ffff17 	ldw	r3,-4(r7)
   864e0:	37000044 	addi	fp,r6,1
   864e4:	180f883a 	mov	r7,r3
   864e8:	100d883a 	mov	r6,r2
   864ec:	00815c40 	call	815c4 <__muldf3>
   864f0:	a80b883a 	mov	r5,r21
   864f4:	a009883a 	mov	r4,r20
   864f8:	182f883a 	mov	r23,r3
   864fc:	102d883a 	mov	r22,r2
   86500:	008ada40 	call	8ada4 <__fixdfsi>
   86504:	1009883a 	mov	r4,r2
   86508:	1027883a 	mov	r19,r2
   8650c:	008acac0 	call	8acac <__floatsidf>
   86510:	a80b883a 	mov	r5,r21
   86514:	a009883a 	mov	r4,r20
   86518:	180f883a 	mov	r7,r3
   8651c:	100d883a 	mov	r6,r2
   86520:	00814d00 	call	814d0 <__subdf3>
   86524:	180b883a 	mov	r5,r3
   86528:	d8c00517 	ldw	r3,20(sp)
   8652c:	9cc00c04 	addi	r19,r19,48
   86530:	1009883a 	mov	r4,r2
   86534:	1cc00005 	stb	r19,0(r3)
   86538:	2021883a 	mov	r16,r4
   8653c:	d9000317 	ldw	r4,12(sp)
   86540:	00800044 	movi	r2,1
   86544:	2823883a 	mov	r17,r5
   86548:	20802226 	beq	r4,r2,865d4 <_dtoa_r+0x13fc>
   8654c:	1029883a 	mov	r20,r2
   86550:	0005883a 	mov	r2,zero
   86554:	00d00934 	movhi	r3,16420
   86558:	180f883a 	mov	r7,r3
   8655c:	100d883a 	mov	r6,r2
   86560:	880b883a 	mov	r5,r17
   86564:	8009883a 	mov	r4,r16
   86568:	00815c40 	call	815c4 <__muldf3>
   8656c:	180b883a 	mov	r5,r3
   86570:	1009883a 	mov	r4,r2
   86574:	1823883a 	mov	r17,r3
   86578:	1021883a 	mov	r16,r2
   8657c:	008ada40 	call	8ada4 <__fixdfsi>
   86580:	1009883a 	mov	r4,r2
   86584:	102b883a 	mov	r21,r2
   86588:	008acac0 	call	8acac <__floatsidf>
   8658c:	880b883a 	mov	r5,r17
   86590:	8009883a 	mov	r4,r16
   86594:	180f883a 	mov	r7,r3
   86598:	100d883a 	mov	r6,r2
   8659c:	00814d00 	call	814d0 <__subdf3>
   865a0:	180b883a 	mov	r5,r3
   865a4:	d8c00517 	ldw	r3,20(sp)
   865a8:	1009883a 	mov	r4,r2
   865ac:	ad400c04 	addi	r21,r21,48
   865b0:	1d05883a 	add	r2,r3,r20
   865b4:	15400005 	stb	r21,0(r2)
   865b8:	2021883a 	mov	r16,r4
   865bc:	d9000317 	ldw	r4,12(sp)
   865c0:	a5000044 	addi	r20,r20,1
   865c4:	2823883a 	mov	r17,r5
   865c8:	a13fe11e 	bne	r20,r4,86550 <_dtoa_r+0x1378>
   865cc:	e505883a 	add	r2,fp,r20
   865d0:	173fffc4 	addi	fp,r2,-1
   865d4:	0025883a 	mov	r18,zero
   865d8:	04cff834 	movhi	r19,16352
   865dc:	b009883a 	mov	r4,r22
   865e0:	b80b883a 	mov	r5,r23
   865e4:	900d883a 	mov	r6,r18
   865e8:	980f883a 	mov	r7,r19
   865ec:	00815500 	call	81550 <__adddf3>
   865f0:	180b883a 	mov	r5,r3
   865f4:	1009883a 	mov	r4,r2
   865f8:	800d883a 	mov	r6,r16
   865fc:	880f883a 	mov	r7,r17
   86600:	008ac240 	call	8ac24 <__ltdf2>
   86604:	103cab16 	blt	r2,zero,858b4 <_dtoa_r+0x6dc>
   86608:	0009883a 	mov	r4,zero
   8660c:	980b883a 	mov	r5,r19
   86610:	b80f883a 	mov	r7,r23
   86614:	b00d883a 	mov	r6,r22
   86618:	00814d00 	call	814d0 <__subdf3>
   8661c:	180b883a 	mov	r5,r3
   86620:	880f883a 	mov	r7,r17
   86624:	1009883a 	mov	r4,r2
   86628:	800d883a 	mov	r6,r16
   8662c:	008ab140 	call	8ab14 <__gtdf2>
   86630:	00bc470e 	bge	zero,r2,85750 <_dtoa_r+0x578>
   86634:	00c00c04 	movi	r3,48
   86638:	e73fffc4 	addi	fp,fp,-1
   8663c:	e0800007 	ldb	r2,0(fp)
   86640:	10fffd26 	beq	r2,r3,86638 <_dtoa_r+0x1460>
   86644:	d9800417 	ldw	r6,16(sp)
   86648:	e7000044 	addi	fp,fp,1
   8664c:	d9800d15 	stw	r6,52(sp)
   86650:	003cab06 	br	85900 <_dtoa_r+0x728>
   86654:	d8c00f17 	ldw	r3,60(sp)
   86658:	d9001117 	ldw	r4,68(sp)
   8665c:	20e1c83a 	sub	r16,r4,r3
   86660:	0007883a 	mov	r3,zero
   86664:	003d9b06 	br	85cd4 <_dtoa_r+0xafc>
   86668:	00800e44 	movi	r2,57
   8666c:	b0800005 	stb	r2,0(r22)
   86670:	b5800044 	addi	r22,r22,1
   86674:	003dc106 	br	85d7c <_dtoa_r+0xba4>
   86678:	05800084 	movi	r22,2
   8667c:	003bf706 	br	8565c <_dtoa_r+0x484>
   86680:	d9000f17 	ldw	r4,60(sp)
   86684:	013c000e 	bge	zero,r4,85688 <_dtoa_r+0x4b0>
   86688:	d9800e17 	ldw	r6,56(sp)
   8668c:	01bc300e 	bge	zero,r6,85750 <_dtoa_r+0x578>
   86690:	0005883a 	mov	r2,zero
   86694:	00d00934 	movhi	r3,16420
   86698:	a80b883a 	mov	r5,r21
   8669c:	180f883a 	mov	r7,r3
   866a0:	a009883a 	mov	r4,r20
   866a4:	100d883a 	mov	r6,r2
   866a8:	00815c40 	call	815c4 <__muldf3>
   866ac:	b1000044 	addi	r4,r22,1
   866b0:	1021883a 	mov	r16,r2
   866b4:	1823883a 	mov	r17,r3
   866b8:	008acac0 	call	8acac <__floatsidf>
   866bc:	880b883a 	mov	r5,r17
   866c0:	8009883a 	mov	r4,r16
   866c4:	180f883a 	mov	r7,r3
   866c8:	100d883a 	mov	r6,r2
   866cc:	00815c40 	call	815c4 <__muldf3>
   866d0:	0011883a 	mov	r8,zero
   866d4:	02500734 	movhi	r9,16412
   866d8:	180b883a 	mov	r5,r3
   866dc:	480f883a 	mov	r7,r9
   866e0:	1009883a 	mov	r4,r2
   866e4:	400d883a 	mov	r6,r8
   866e8:	00815500 	call	81550 <__adddf3>
   866ec:	102d883a 	mov	r22,r2
   866f0:	00bf3034 	movhi	r2,64704
   866f4:	10ef883a 	add	r23,r2,r3
   866f8:	d8800d17 	ldw	r2,52(sp)
   866fc:	d8c00e17 	ldw	r3,56(sp)
   86700:	8029883a 	mov	r20,r16
   86704:	10bfffc4 	addi	r2,r2,-1
   86708:	882b883a 	mov	r21,r17
   8670c:	d8800415 	stw	r2,16(sp)
   86710:	d8c00315 	stw	r3,12(sp)
   86714:	003e8306 	br	86124 <_dtoa_r+0xf4c>
   86718:	d8800117 	ldw	r2,4(sp)
   8671c:	dc001117 	ldw	r16,68(sp)
   86720:	dc801017 	ldw	r18,64(sp)
   86724:	00c00d84 	movi	r3,54
   86728:	1887c83a 	sub	r3,r3,r2
   8672c:	003d6906 	br	85cd4 <_dtoa_r+0xafc>
   86730:	01800044 	movi	r6,1
   86734:	3021883a 	mov	r16,r6
   86738:	d9800f15 	stw	r6,60(sp)
   8673c:	d9802615 	stw	r6,152(sp)
   86740:	d9800e15 	stw	r6,56(sp)
   86744:	003b9306 	br	85594 <_dtoa_r+0x3bc>
   86748:	b021883a 	mov	r16,r22
   8674c:	dd800f15 	stw	r22,60(sp)
   86750:	003b9006 	br	85594 <_dtoa_r+0x3bc>
   86754:	103e221e 	bne	r2,zero,85fe0 <_dtoa_r+0xe08>
   86758:	b880004c 	andi	r2,r23,1
   8675c:	1005003a 	cmpeq	r2,r2,zero
   86760:	103e1f1e 	bne	r2,zero,85fe0 <_dtoa_r+0xe08>
   86764:	003e1b06 	br	85fd4 <_dtoa_r+0xdfc>
   86768:	d9001617 	ldw	r4,88(sp)
   8676c:	980b883a 	mov	r5,r19
   86770:	01800284 	movi	r6,10
   86774:	000f883a 	mov	r7,zero
   86778:	00889800 	call	88980 <__multadd>
   8677c:	d8c00e17 	ldw	r3,56(sp)
   86780:	1027883a 	mov	r19,r2
   86784:	d8c00f15 	stw	r3,60(sp)
   86788:	003cd306 	br	85ad8 <_dtoa_r+0x900>

0008678c <_fflush_r>:
   8678c:	defffb04 	addi	sp,sp,-20
   86790:	dcc00315 	stw	r19,12(sp)
   86794:	dc800215 	stw	r18,8(sp)
   86798:	dfc00415 	stw	ra,16(sp)
   8679c:	dc400115 	stw	r17,4(sp)
   867a0:	dc000015 	stw	r16,0(sp)
   867a4:	2027883a 	mov	r19,r4
   867a8:	2825883a 	mov	r18,r5
   867ac:	20000226 	beq	r4,zero,867b8 <_fflush_r+0x2c>
   867b0:	20800e17 	ldw	r2,56(r4)
   867b4:	10005626 	beq	r2,zero,86910 <_fflush_r+0x184>
   867b8:	9100030b 	ldhu	r4,12(r18)
   867bc:	20ffffcc 	andi	r3,r4,65535
   867c0:	18e0001c 	xori	r3,r3,32768
   867c4:	18e00004 	addi	r3,r3,-32768
   867c8:	1880020c 	andi	r2,r3,8
   867cc:	1000261e 	bne	r2,zero,86868 <_fflush_r+0xdc>
   867d0:	90c00117 	ldw	r3,4(r18)
   867d4:	20820014 	ori	r2,r4,2048
   867d8:	9080030d 	sth	r2,12(r18)
   867dc:	1009883a 	mov	r4,r2
   867e0:	00c0400e 	bge	zero,r3,868e4 <_fflush_r+0x158>
   867e4:	92000a17 	ldw	r8,40(r18)
   867e8:	40004026 	beq	r8,zero,868ec <_fflush_r+0x160>
   867ec:	2084000c 	andi	r2,r4,4096
   867f0:	10005326 	beq	r2,zero,86940 <_fflush_r+0x1b4>
   867f4:	94001417 	ldw	r16,80(r18)
   867f8:	9080030b 	ldhu	r2,12(r18)
   867fc:	1080010c 	andi	r2,r2,4
   86800:	1000481e 	bne	r2,zero,86924 <_fflush_r+0x198>
   86804:	91400717 	ldw	r5,28(r18)
   86808:	9809883a 	mov	r4,r19
   8680c:	800d883a 	mov	r6,r16
   86810:	000f883a 	mov	r7,zero
   86814:	403ee83a 	callr	r8
   86818:	8080261e 	bne	r16,r2,868b4 <_fflush_r+0x128>
   8681c:	9080030b 	ldhu	r2,12(r18)
   86820:	91000417 	ldw	r4,16(r18)
   86824:	90000115 	stw	zero,4(r18)
   86828:	10bdffcc 	andi	r2,r2,63487
   8682c:	10ffffcc 	andi	r3,r2,65535
   86830:	18c4000c 	andi	r3,r3,4096
   86834:	9080030d 	sth	r2,12(r18)
   86838:	91000015 	stw	r4,0(r18)
   8683c:	18002b26 	beq	r3,zero,868ec <_fflush_r+0x160>
   86840:	0007883a 	mov	r3,zero
   86844:	1805883a 	mov	r2,r3
   86848:	94001415 	stw	r16,80(r18)
   8684c:	dfc00417 	ldw	ra,16(sp)
   86850:	dcc00317 	ldw	r19,12(sp)
   86854:	dc800217 	ldw	r18,8(sp)
   86858:	dc400117 	ldw	r17,4(sp)
   8685c:	dc000017 	ldw	r16,0(sp)
   86860:	dec00504 	addi	sp,sp,20
   86864:	f800283a 	ret
   86868:	94400417 	ldw	r17,16(r18)
   8686c:	88001f26 	beq	r17,zero,868ec <_fflush_r+0x160>
   86870:	90800017 	ldw	r2,0(r18)
   86874:	18c000cc 	andi	r3,r3,3
   86878:	94400015 	stw	r17,0(r18)
   8687c:	1461c83a 	sub	r16,r2,r17
   86880:	18002526 	beq	r3,zero,86918 <_fflush_r+0x18c>
   86884:	0005883a 	mov	r2,zero
   86888:	90800215 	stw	r2,8(r18)
   8688c:	0400170e 	bge	zero,r16,868ec <_fflush_r+0x160>
   86890:	90c00917 	ldw	r3,36(r18)
   86894:	91400717 	ldw	r5,28(r18)
   86898:	880d883a 	mov	r6,r17
   8689c:	800f883a 	mov	r7,r16
   868a0:	9809883a 	mov	r4,r19
   868a4:	183ee83a 	callr	r3
   868a8:	88a3883a 	add	r17,r17,r2
   868ac:	80a1c83a 	sub	r16,r16,r2
   868b0:	00bff616 	blt	zero,r2,8688c <_fflush_r+0x100>
   868b4:	9080030b 	ldhu	r2,12(r18)
   868b8:	00ffffc4 	movi	r3,-1
   868bc:	10801014 	ori	r2,r2,64
   868c0:	9080030d 	sth	r2,12(r18)
   868c4:	1805883a 	mov	r2,r3
   868c8:	dfc00417 	ldw	ra,16(sp)
   868cc:	dcc00317 	ldw	r19,12(sp)
   868d0:	dc800217 	ldw	r18,8(sp)
   868d4:	dc400117 	ldw	r17,4(sp)
   868d8:	dc000017 	ldw	r16,0(sp)
   868dc:	dec00504 	addi	sp,sp,20
   868e0:	f800283a 	ret
   868e4:	90800f17 	ldw	r2,60(r18)
   868e8:	00bfbe16 	blt	zero,r2,867e4 <_fflush_r+0x58>
   868ec:	0007883a 	mov	r3,zero
   868f0:	1805883a 	mov	r2,r3
   868f4:	dfc00417 	ldw	ra,16(sp)
   868f8:	dcc00317 	ldw	r19,12(sp)
   868fc:	dc800217 	ldw	r18,8(sp)
   86900:	dc400117 	ldw	r17,4(sp)
   86904:	dc000017 	ldw	r16,0(sp)
   86908:	dec00504 	addi	sp,sp,20
   8690c:	f800283a 	ret
   86910:	0086a240 	call	86a24 <__sinit>
   86914:	003fa806 	br	867b8 <_fflush_r+0x2c>
   86918:	90800517 	ldw	r2,20(r18)
   8691c:	90800215 	stw	r2,8(r18)
   86920:	003fda06 	br	8688c <_fflush_r+0x100>
   86924:	90800117 	ldw	r2,4(r18)
   86928:	90c00c17 	ldw	r3,48(r18)
   8692c:	80a1c83a 	sub	r16,r16,r2
   86930:	183fb426 	beq	r3,zero,86804 <_fflush_r+0x78>
   86934:	90800f17 	ldw	r2,60(r18)
   86938:	80a1c83a 	sub	r16,r16,r2
   8693c:	003fb106 	br	86804 <_fflush_r+0x78>
   86940:	91400717 	ldw	r5,28(r18)
   86944:	9809883a 	mov	r4,r19
   86948:	000d883a 	mov	r6,zero
   8694c:	01c00044 	movi	r7,1
   86950:	403ee83a 	callr	r8
   86954:	1021883a 	mov	r16,r2
   86958:	00bfffc4 	movi	r2,-1
   8695c:	80800226 	beq	r16,r2,86968 <_fflush_r+0x1dc>
   86960:	92000a17 	ldw	r8,40(r18)
   86964:	003fa406 	br	867f8 <_fflush_r+0x6c>
   86968:	98c00017 	ldw	r3,0(r19)
   8696c:	00800744 	movi	r2,29
   86970:	18bfde26 	beq	r3,r2,868ec <_fflush_r+0x160>
   86974:	9080030b 	ldhu	r2,12(r18)
   86978:	8007883a 	mov	r3,r16
   8697c:	10801014 	ori	r2,r2,64
   86980:	9080030d 	sth	r2,12(r18)
   86984:	003fcf06 	br	868c4 <_fflush_r+0x138>

00086988 <fflush>:
   86988:	01400234 	movhi	r5,8
   8698c:	2959e304 	addi	r5,r5,26508
   86990:	2007883a 	mov	r3,r4
   86994:	20000526 	beq	r4,zero,869ac <fflush+0x24>
   86998:	00800274 	movhi	r2,9
   8699c:	10805f04 	addi	r2,r2,380
   869a0:	11000017 	ldw	r4,0(r2)
   869a4:	180b883a 	mov	r5,r3
   869a8:	008678c1 	jmpi	8678c <_fflush_r>
   869ac:	00800274 	movhi	r2,9
   869b0:	10806004 	addi	r2,r2,384
   869b4:	11000017 	ldw	r4,0(r2)
   869b8:	008758c1 	jmpi	8758c <_fwalk_reent>

000869bc <std>:
   869bc:	00800274 	movhi	r2,9
   869c0:	10a54f04 	addi	r2,r2,-27332
   869c4:	20800b15 	stw	r2,44(r4)
   869c8:	00800274 	movhi	r2,9
   869cc:	10a58a04 	addi	r2,r2,-27096
   869d0:	20800815 	stw	r2,32(r4)
   869d4:	00c00274 	movhi	r3,9
   869d8:	18e56b04 	addi	r3,r3,-27220
   869dc:	00800274 	movhi	r2,9
   869e0:	10a55104 	addi	r2,r2,-27324
   869e4:	2140030d 	sth	r5,12(r4)
   869e8:	2180038d 	sth	r6,14(r4)
   869ec:	20c00915 	stw	r3,36(r4)
   869f0:	20800a15 	stw	r2,40(r4)
   869f4:	20000015 	stw	zero,0(r4)
   869f8:	20000115 	stw	zero,4(r4)
   869fc:	20000215 	stw	zero,8(r4)
   86a00:	20000415 	stw	zero,16(r4)
   86a04:	20000515 	stw	zero,20(r4)
   86a08:	20000615 	stw	zero,24(r4)
   86a0c:	21000715 	stw	r4,28(r4)
   86a10:	f800283a 	ret

00086a14 <__sfp_lock_acquire>:
   86a14:	f800283a 	ret

00086a18 <__sfp_lock_release>:
   86a18:	f800283a 	ret

00086a1c <__sinit_lock_acquire>:
   86a1c:	f800283a 	ret

00086a20 <__sinit_lock_release>:
   86a20:	f800283a 	ret

00086a24 <__sinit>:
   86a24:	20800e17 	ldw	r2,56(r4)
   86a28:	defffd04 	addi	sp,sp,-12
   86a2c:	dc400115 	stw	r17,4(sp)
   86a30:	dc000015 	stw	r16,0(sp)
   86a34:	dfc00215 	stw	ra,8(sp)
   86a38:	04400044 	movi	r17,1
   86a3c:	01400104 	movi	r5,4
   86a40:	000d883a 	mov	r6,zero
   86a44:	2021883a 	mov	r16,r4
   86a48:	2200bb04 	addi	r8,r4,748
   86a4c:	200f883a 	mov	r7,r4
   86a50:	10000526 	beq	r2,zero,86a68 <__sinit+0x44>
   86a54:	dfc00217 	ldw	ra,8(sp)
   86a58:	dc400117 	ldw	r17,4(sp)
   86a5c:	dc000017 	ldw	r16,0(sp)
   86a60:	dec00304 	addi	sp,sp,12
   86a64:	f800283a 	ret
   86a68:	21000117 	ldw	r4,4(r4)
   86a6c:	00800234 	movhi	r2,8
   86a70:	109ac204 	addi	r2,r2,27400
   86a74:	00c000c4 	movi	r3,3
   86a78:	80800f15 	stw	r2,60(r16)
   86a7c:	80c0b915 	stw	r3,740(r16)
   86a80:	8200ba15 	stw	r8,744(r16)
   86a84:	84400e15 	stw	r17,56(r16)
   86a88:	8000b815 	stw	zero,736(r16)
   86a8c:	00869bc0 	call	869bc <std>
   86a90:	81000217 	ldw	r4,8(r16)
   86a94:	880d883a 	mov	r6,r17
   86a98:	800f883a 	mov	r7,r16
   86a9c:	01400284 	movi	r5,10
   86aa0:	00869bc0 	call	869bc <std>
   86aa4:	81000317 	ldw	r4,12(r16)
   86aa8:	800f883a 	mov	r7,r16
   86aac:	01400484 	movi	r5,18
   86ab0:	01800084 	movi	r6,2
   86ab4:	dfc00217 	ldw	ra,8(sp)
   86ab8:	dc400117 	ldw	r17,4(sp)
   86abc:	dc000017 	ldw	r16,0(sp)
   86ac0:	dec00304 	addi	sp,sp,12
   86ac4:	00869bc1 	jmpi	869bc <std>

00086ac8 <__fp_lock>:
   86ac8:	0005883a 	mov	r2,zero
   86acc:	f800283a 	ret

00086ad0 <__fp_unlock>:
   86ad0:	0005883a 	mov	r2,zero
   86ad4:	f800283a 	ret

00086ad8 <__fp_unlock_all>:
   86ad8:	00800274 	movhi	r2,9
   86adc:	10805f04 	addi	r2,r2,380
   86ae0:	11000017 	ldw	r4,0(r2)
   86ae4:	01400234 	movhi	r5,8
   86ae8:	295ab404 	addi	r5,r5,27344
   86aec:	00876541 	jmpi	87654 <_fwalk>

00086af0 <__fp_lock_all>:
   86af0:	00800274 	movhi	r2,9
   86af4:	10805f04 	addi	r2,r2,380
   86af8:	11000017 	ldw	r4,0(r2)
   86afc:	01400234 	movhi	r5,8
   86b00:	295ab204 	addi	r5,r5,27336
   86b04:	00876541 	jmpi	87654 <_fwalk>

00086b08 <_cleanup_r>:
   86b08:	01400274 	movhi	r5,9
   86b0c:	2966d404 	addi	r5,r5,-25776
   86b10:	00876541 	jmpi	87654 <_fwalk>

00086b14 <_cleanup>:
   86b14:	00800274 	movhi	r2,9
   86b18:	10806004 	addi	r2,r2,384
   86b1c:	11000017 	ldw	r4,0(r2)
   86b20:	0086b081 	jmpi	86b08 <_cleanup_r>

00086b24 <__sfmoreglue>:
   86b24:	defffc04 	addi	sp,sp,-16
   86b28:	dc000015 	stw	r16,0(sp)
   86b2c:	2821883a 	mov	r16,r5
   86b30:	dc400115 	stw	r17,4(sp)
   86b34:	01401704 	movi	r5,92
   86b38:	2023883a 	mov	r17,r4
   86b3c:	8009883a 	mov	r4,r16
   86b40:	dfc00315 	stw	ra,12(sp)
   86b44:	dcc00215 	stw	r19,8(sp)
   86b48:	00824b00 	call	824b0 <__mulsi3>
   86b4c:	11400304 	addi	r5,r2,12
   86b50:	8809883a 	mov	r4,r17
   86b54:	1027883a 	mov	r19,r2
   86b58:	00825100 	call	82510 <_malloc_r>
   86b5c:	10c00304 	addi	r3,r2,12
   86b60:	1023883a 	mov	r17,r2
   86b64:	1809883a 	mov	r4,r3
   86b68:	980d883a 	mov	r6,r19
   86b6c:	000b883a 	mov	r5,zero
   86b70:	10000b26 	beq	r2,zero,86ba0 <__sfmoreglue+0x7c>
   86b74:	14000115 	stw	r16,4(r2)
   86b78:	10c00215 	stw	r3,8(r2)
   86b7c:	10000015 	stw	zero,0(r2)
   86b80:	0087bc80 	call	87bc8 <memset>
   86b84:	8805883a 	mov	r2,r17
   86b88:	dfc00317 	ldw	ra,12(sp)
   86b8c:	dcc00217 	ldw	r19,8(sp)
   86b90:	dc400117 	ldw	r17,4(sp)
   86b94:	dc000017 	ldw	r16,0(sp)
   86b98:	dec00404 	addi	sp,sp,16
   86b9c:	f800283a 	ret
   86ba0:	0023883a 	mov	r17,zero
   86ba4:	8805883a 	mov	r2,r17
   86ba8:	dfc00317 	ldw	ra,12(sp)
   86bac:	dcc00217 	ldw	r19,8(sp)
   86bb0:	dc400117 	ldw	r17,4(sp)
   86bb4:	dc000017 	ldw	r16,0(sp)
   86bb8:	dec00404 	addi	sp,sp,16
   86bbc:	f800283a 	ret

00086bc0 <__sfp>:
   86bc0:	defffd04 	addi	sp,sp,-12
   86bc4:	00800274 	movhi	r2,9
   86bc8:	10806004 	addi	r2,r2,384
   86bcc:	dc000015 	stw	r16,0(sp)
   86bd0:	14000017 	ldw	r16,0(r2)
   86bd4:	dc400115 	stw	r17,4(sp)
   86bd8:	dfc00215 	stw	ra,8(sp)
   86bdc:	80800e17 	ldw	r2,56(r16)
   86be0:	2023883a 	mov	r17,r4
   86be4:	10002626 	beq	r2,zero,86c80 <__sfp+0xc0>
   86be8:	8400b804 	addi	r16,r16,736
   86bec:	80800117 	ldw	r2,4(r16)
   86bf0:	81000217 	ldw	r4,8(r16)
   86bf4:	10ffffc4 	addi	r3,r2,-1
   86bf8:	18000916 	blt	r3,zero,86c20 <__sfp+0x60>
   86bfc:	2080030f 	ldh	r2,12(r4)
   86c00:	10000b26 	beq	r2,zero,86c30 <__sfp+0x70>
   86c04:	017fffc4 	movi	r5,-1
   86c08:	00000206 	br	86c14 <__sfp+0x54>
   86c0c:	2080030f 	ldh	r2,12(r4)
   86c10:	10000726 	beq	r2,zero,86c30 <__sfp+0x70>
   86c14:	18ffffc4 	addi	r3,r3,-1
   86c18:	21001704 	addi	r4,r4,92
   86c1c:	197ffb1e 	bne	r3,r5,86c0c <__sfp+0x4c>
   86c20:	80800017 	ldw	r2,0(r16)
   86c24:	10001926 	beq	r2,zero,86c8c <__sfp+0xcc>
   86c28:	1021883a 	mov	r16,r2
   86c2c:	003fef06 	br	86bec <__sfp+0x2c>
   86c30:	00bfffc4 	movi	r2,-1
   86c34:	00c00044 	movi	r3,1
   86c38:	2080038d 	sth	r2,14(r4)
   86c3c:	20c0030d 	sth	r3,12(r4)
   86c40:	20000015 	stw	zero,0(r4)
   86c44:	20000215 	stw	zero,8(r4)
   86c48:	20000115 	stw	zero,4(r4)
   86c4c:	20000415 	stw	zero,16(r4)
   86c50:	20000515 	stw	zero,20(r4)
   86c54:	20000615 	stw	zero,24(r4)
   86c58:	20000c15 	stw	zero,48(r4)
   86c5c:	20000d15 	stw	zero,52(r4)
   86c60:	20001115 	stw	zero,68(r4)
   86c64:	20001215 	stw	zero,72(r4)
   86c68:	2005883a 	mov	r2,r4
   86c6c:	dfc00217 	ldw	ra,8(sp)
   86c70:	dc400117 	ldw	r17,4(sp)
   86c74:	dc000017 	ldw	r16,0(sp)
   86c78:	dec00304 	addi	sp,sp,12
   86c7c:	f800283a 	ret
   86c80:	8009883a 	mov	r4,r16
   86c84:	0086a240 	call	86a24 <__sinit>
   86c88:	003fd706 	br	86be8 <__sfp+0x28>
   86c8c:	8809883a 	mov	r4,r17
   86c90:	01400104 	movi	r5,4
   86c94:	0086b240 	call	86b24 <__sfmoreglue>
   86c98:	80800015 	stw	r2,0(r16)
   86c9c:	103fe21e 	bne	r2,zero,86c28 <__sfp+0x68>
   86ca0:	00800304 	movi	r2,12
   86ca4:	0009883a 	mov	r4,zero
   86ca8:	88800015 	stw	r2,0(r17)
   86cac:	003fee06 	br	86c68 <__sfp+0xa8>

00086cb0 <_malloc_trim_r>:
   86cb0:	defffb04 	addi	sp,sp,-20
   86cb4:	dcc00315 	stw	r19,12(sp)
   86cb8:	04c00274 	movhi	r19,9
   86cbc:	9cf9d204 	addi	r19,r19,-6328
   86cc0:	dc800215 	stw	r18,8(sp)
   86cc4:	dc400115 	stw	r17,4(sp)
   86cc8:	dc000015 	stw	r16,0(sp)
   86ccc:	2823883a 	mov	r17,r5
   86cd0:	2025883a 	mov	r18,r4
   86cd4:	dfc00415 	stw	ra,16(sp)
   86cd8:	008b7980 	call	8b798 <__malloc_lock>
   86cdc:	98800217 	ldw	r2,8(r19)
   86ce0:	9009883a 	mov	r4,r18
   86ce4:	000b883a 	mov	r5,zero
   86ce8:	10c00117 	ldw	r3,4(r2)
   86cec:	00bfff04 	movi	r2,-4
   86cf0:	18a0703a 	and	r16,r3,r2
   86cf4:	8463c83a 	sub	r17,r16,r17
   86cf8:	8c43fbc4 	addi	r17,r17,4079
   86cfc:	8822d33a 	srli	r17,r17,12
   86d00:	0083ffc4 	movi	r2,4095
   86d04:	8c7fffc4 	addi	r17,r17,-1
   86d08:	8822933a 	slli	r17,r17,12
   86d0c:	1440060e 	bge	r2,r17,86d28 <_malloc_trim_r+0x78>
   86d10:	0082e340 	call	82e34 <_sbrk_r>
   86d14:	98c00217 	ldw	r3,8(r19)
   86d18:	9009883a 	mov	r4,r18
   86d1c:	044bc83a 	sub	r5,zero,r17
   86d20:	80c7883a 	add	r3,r16,r3
   86d24:	10c00926 	beq	r2,r3,86d4c <_malloc_trim_r+0x9c>
   86d28:	008b7b80 	call	8b7b8 <__malloc_unlock>
   86d2c:	0005883a 	mov	r2,zero
   86d30:	dfc00417 	ldw	ra,16(sp)
   86d34:	dcc00317 	ldw	r19,12(sp)
   86d38:	dc800217 	ldw	r18,8(sp)
   86d3c:	dc400117 	ldw	r17,4(sp)
   86d40:	dc000017 	ldw	r16,0(sp)
   86d44:	dec00504 	addi	sp,sp,20
   86d48:	f800283a 	ret
   86d4c:	9009883a 	mov	r4,r18
   86d50:	0082e340 	call	82e34 <_sbrk_r>
   86d54:	844dc83a 	sub	r6,r16,r17
   86d58:	00ffffc4 	movi	r3,-1
   86d5c:	9009883a 	mov	r4,r18
   86d60:	000b883a 	mov	r5,zero
   86d64:	01c00274 	movhi	r7,9
   86d68:	39c71a04 	addi	r7,r7,7272
   86d6c:	31800054 	ori	r6,r6,1
   86d70:	10c00926 	beq	r2,r3,86d98 <_malloc_trim_r+0xe8>
   86d74:	38800017 	ldw	r2,0(r7)
   86d78:	98c00217 	ldw	r3,8(r19)
   86d7c:	9009883a 	mov	r4,r18
   86d80:	1445c83a 	sub	r2,r2,r17
   86d84:	38800015 	stw	r2,0(r7)
   86d88:	19800115 	stw	r6,4(r3)
   86d8c:	008b7b80 	call	8b7b8 <__malloc_unlock>
   86d90:	00800044 	movi	r2,1
   86d94:	003fe606 	br	86d30 <_malloc_trim_r+0x80>
   86d98:	0082e340 	call	82e34 <_sbrk_r>
   86d9c:	99800217 	ldw	r6,8(r19)
   86da0:	100f883a 	mov	r7,r2
   86da4:	9009883a 	mov	r4,r18
   86da8:	1187c83a 	sub	r3,r2,r6
   86dac:	008003c4 	movi	r2,15
   86db0:	19400054 	ori	r5,r3,1
   86db4:	10ffdc0e 	bge	r2,r3,86d28 <_malloc_trim_r+0x78>
   86db8:	00800274 	movhi	r2,9
   86dbc:	10805e04 	addi	r2,r2,376
   86dc0:	10c00017 	ldw	r3,0(r2)
   86dc4:	00800274 	movhi	r2,9
   86dc8:	10871a04 	addi	r2,r2,7272
   86dcc:	31400115 	stw	r5,4(r6)
   86dd0:	38c7c83a 	sub	r3,r7,r3
   86dd4:	10c00015 	stw	r3,0(r2)
   86dd8:	003fd306 	br	86d28 <_malloc_trim_r+0x78>

00086ddc <_free_r>:
   86ddc:	defffd04 	addi	sp,sp,-12
   86de0:	dc400115 	stw	r17,4(sp)
   86de4:	dc000015 	stw	r16,0(sp)
   86de8:	dfc00215 	stw	ra,8(sp)
   86dec:	2821883a 	mov	r16,r5
   86df0:	2023883a 	mov	r17,r4
   86df4:	28005a26 	beq	r5,zero,86f60 <_free_r+0x184>
   86df8:	008b7980 	call	8b798 <__malloc_lock>
   86dfc:	823ffe04 	addi	r8,r16,-8
   86e00:	41400117 	ldw	r5,4(r8)
   86e04:	00bfff84 	movi	r2,-2
   86e08:	02800274 	movhi	r10,9
   86e0c:	52b9d204 	addi	r10,r10,-6328
   86e10:	288e703a 	and	r7,r5,r2
   86e14:	41cd883a 	add	r6,r8,r7
   86e18:	30c00117 	ldw	r3,4(r6)
   86e1c:	51000217 	ldw	r4,8(r10)
   86e20:	00bfff04 	movi	r2,-4
   86e24:	1892703a 	and	r9,r3,r2
   86e28:	5017883a 	mov	r11,r10
   86e2c:	31006726 	beq	r6,r4,86fcc <_free_r+0x1f0>
   86e30:	2880004c 	andi	r2,r5,1
   86e34:	1005003a 	cmpeq	r2,r2,zero
   86e38:	32400115 	stw	r9,4(r6)
   86e3c:	10001a1e 	bne	r2,zero,86ea8 <_free_r+0xcc>
   86e40:	000b883a 	mov	r5,zero
   86e44:	3247883a 	add	r3,r6,r9
   86e48:	18800117 	ldw	r2,4(r3)
   86e4c:	1080004c 	andi	r2,r2,1
   86e50:	1000231e 	bne	r2,zero,86ee0 <_free_r+0x104>
   86e54:	280ac03a 	cmpne	r5,r5,zero
   86e58:	3a4f883a 	add	r7,r7,r9
   86e5c:	2800451e 	bne	r5,zero,86f74 <_free_r+0x198>
   86e60:	31000217 	ldw	r4,8(r6)
   86e64:	00800274 	movhi	r2,9
   86e68:	10b9d404 	addi	r2,r2,-6320
   86e6c:	20807b26 	beq	r4,r2,8705c <_free_r+0x280>
   86e70:	30800317 	ldw	r2,12(r6)
   86e74:	3a07883a 	add	r3,r7,r8
   86e78:	19c00015 	stw	r7,0(r3)
   86e7c:	11000215 	stw	r4,8(r2)
   86e80:	20800315 	stw	r2,12(r4)
   86e84:	38800054 	ori	r2,r7,1
   86e88:	40800115 	stw	r2,4(r8)
   86e8c:	28001a26 	beq	r5,zero,86ef8 <_free_r+0x11c>
   86e90:	8809883a 	mov	r4,r17
   86e94:	dfc00217 	ldw	ra,8(sp)
   86e98:	dc400117 	ldw	r17,4(sp)
   86e9c:	dc000017 	ldw	r16,0(sp)
   86ea0:	dec00304 	addi	sp,sp,12
   86ea4:	008b7b81 	jmpi	8b7b8 <__malloc_unlock>
   86ea8:	80bffe17 	ldw	r2,-8(r16)
   86eac:	50c00204 	addi	r3,r10,8
   86eb0:	4091c83a 	sub	r8,r8,r2
   86eb4:	41000217 	ldw	r4,8(r8)
   86eb8:	388f883a 	add	r7,r7,r2
   86ebc:	20c06126 	beq	r4,r3,87044 <_free_r+0x268>
   86ec0:	40800317 	ldw	r2,12(r8)
   86ec4:	3247883a 	add	r3,r6,r9
   86ec8:	000b883a 	mov	r5,zero
   86ecc:	11000215 	stw	r4,8(r2)
   86ed0:	20800315 	stw	r2,12(r4)
   86ed4:	18800117 	ldw	r2,4(r3)
   86ed8:	1080004c 	andi	r2,r2,1
   86edc:	103fdd26 	beq	r2,zero,86e54 <_free_r+0x78>
   86ee0:	38800054 	ori	r2,r7,1
   86ee4:	3a07883a 	add	r3,r7,r8
   86ee8:	280ac03a 	cmpne	r5,r5,zero
   86eec:	40800115 	stw	r2,4(r8)
   86ef0:	19c00015 	stw	r7,0(r3)
   86ef4:	283fe61e 	bne	r5,zero,86e90 <_free_r+0xb4>
   86ef8:	00807fc4 	movi	r2,511
   86efc:	11c01f2e 	bgeu	r2,r7,86f7c <_free_r+0x1a0>
   86f00:	3806d27a 	srli	r3,r7,9
   86f04:	1800481e 	bne	r3,zero,87028 <_free_r+0x24c>
   86f08:	3804d0fa 	srli	r2,r7,3
   86f0c:	100690fa 	slli	r3,r2,3
   86f10:	1acd883a 	add	r6,r3,r11
   86f14:	31400217 	ldw	r5,8(r6)
   86f18:	31405926 	beq	r6,r5,87080 <_free_r+0x2a4>
   86f1c:	28800117 	ldw	r2,4(r5)
   86f20:	00ffff04 	movi	r3,-4
   86f24:	10c4703a 	and	r2,r2,r3
   86f28:	3880022e 	bgeu	r7,r2,86f34 <_free_r+0x158>
   86f2c:	29400217 	ldw	r5,8(r5)
   86f30:	317ffa1e 	bne	r6,r5,86f1c <_free_r+0x140>
   86f34:	29800317 	ldw	r6,12(r5)
   86f38:	41800315 	stw	r6,12(r8)
   86f3c:	41400215 	stw	r5,8(r8)
   86f40:	8809883a 	mov	r4,r17
   86f44:	2a000315 	stw	r8,12(r5)
   86f48:	32000215 	stw	r8,8(r6)
   86f4c:	dfc00217 	ldw	ra,8(sp)
   86f50:	dc400117 	ldw	r17,4(sp)
   86f54:	dc000017 	ldw	r16,0(sp)
   86f58:	dec00304 	addi	sp,sp,12
   86f5c:	008b7b81 	jmpi	8b7b8 <__malloc_unlock>
   86f60:	dfc00217 	ldw	ra,8(sp)
   86f64:	dc400117 	ldw	r17,4(sp)
   86f68:	dc000017 	ldw	r16,0(sp)
   86f6c:	dec00304 	addi	sp,sp,12
   86f70:	f800283a 	ret
   86f74:	31000217 	ldw	r4,8(r6)
   86f78:	003fbd06 	br	86e70 <_free_r+0x94>
   86f7c:	3806d0fa 	srli	r3,r7,3
   86f80:	00800044 	movi	r2,1
   86f84:	51400117 	ldw	r5,4(r10)
   86f88:	180890fa 	slli	r4,r3,3
   86f8c:	1807d0ba 	srai	r3,r3,2
   86f90:	22c9883a 	add	r4,r4,r11
   86f94:	21800217 	ldw	r6,8(r4)
   86f98:	10c4983a 	sll	r2,r2,r3
   86f9c:	41000315 	stw	r4,12(r8)
   86fa0:	41800215 	stw	r6,8(r8)
   86fa4:	288ab03a 	or	r5,r5,r2
   86fa8:	22000215 	stw	r8,8(r4)
   86fac:	8809883a 	mov	r4,r17
   86fb0:	51400115 	stw	r5,4(r10)
   86fb4:	32000315 	stw	r8,12(r6)
   86fb8:	dfc00217 	ldw	ra,8(sp)
   86fbc:	dc400117 	ldw	r17,4(sp)
   86fc0:	dc000017 	ldw	r16,0(sp)
   86fc4:	dec00304 	addi	sp,sp,12
   86fc8:	008b7b81 	jmpi	8b7b8 <__malloc_unlock>
   86fcc:	2880004c 	andi	r2,r5,1
   86fd0:	3a4d883a 	add	r6,r7,r9
   86fd4:	1000071e 	bne	r2,zero,86ff4 <_free_r+0x218>
   86fd8:	80bffe17 	ldw	r2,-8(r16)
   86fdc:	4091c83a 	sub	r8,r8,r2
   86fe0:	41000317 	ldw	r4,12(r8)
   86fe4:	40c00217 	ldw	r3,8(r8)
   86fe8:	308d883a 	add	r6,r6,r2
   86fec:	20c00215 	stw	r3,8(r4)
   86ff0:	19000315 	stw	r4,12(r3)
   86ff4:	00800274 	movhi	r2,9
   86ff8:	10805d04 	addi	r2,r2,372
   86ffc:	11000017 	ldw	r4,0(r2)
   87000:	30c00054 	ori	r3,r6,1
   87004:	52000215 	stw	r8,8(r10)
   87008:	40c00115 	stw	r3,4(r8)
   8700c:	313fa036 	bltu	r6,r4,86e90 <_free_r+0xb4>
   87010:	00800274 	movhi	r2,9
   87014:	10870d04 	addi	r2,r2,7220
   87018:	11400017 	ldw	r5,0(r2)
   8701c:	8809883a 	mov	r4,r17
   87020:	0086cb00 	call	86cb0 <_malloc_trim_r>
   87024:	003f9a06 	br	86e90 <_free_r+0xb4>
   87028:	00800104 	movi	r2,4
   8702c:	10c0072e 	bgeu	r2,r3,8704c <_free_r+0x270>
   87030:	00800504 	movi	r2,20
   87034:	10c01936 	bltu	r2,r3,8709c <_free_r+0x2c0>
   87038:	188016c4 	addi	r2,r3,91
   8703c:	100690fa 	slli	r3,r2,3
   87040:	003fb306 	br	86f10 <_free_r+0x134>
   87044:	01400044 	movi	r5,1
   87048:	003f7e06 	br	86e44 <_free_r+0x68>
   8704c:	3804d1ba 	srli	r2,r7,6
   87050:	10800e04 	addi	r2,r2,56
   87054:	100690fa 	slli	r3,r2,3
   87058:	003fad06 	br	86f10 <_free_r+0x134>
   8705c:	22000315 	stw	r8,12(r4)
   87060:	22000215 	stw	r8,8(r4)
   87064:	3a05883a 	add	r2,r7,r8
   87068:	38c00054 	ori	r3,r7,1
   8706c:	11c00015 	stw	r7,0(r2)
   87070:	41000215 	stw	r4,8(r8)
   87074:	40c00115 	stw	r3,4(r8)
   87078:	41000315 	stw	r4,12(r8)
   8707c:	003f8406 	br	86e90 <_free_r+0xb4>
   87080:	1005d0ba 	srai	r2,r2,2
   87084:	00c00044 	movi	r3,1
   87088:	51000117 	ldw	r4,4(r10)
   8708c:	1886983a 	sll	r3,r3,r2
   87090:	20c8b03a 	or	r4,r4,r3
   87094:	51000115 	stw	r4,4(r10)
   87098:	003fa706 	br	86f38 <_free_r+0x15c>
   8709c:	00801504 	movi	r2,84
   870a0:	10c00436 	bltu	r2,r3,870b4 <_free_r+0x2d8>
   870a4:	3804d33a 	srli	r2,r7,12
   870a8:	10801b84 	addi	r2,r2,110
   870ac:	100690fa 	slli	r3,r2,3
   870b0:	003f9706 	br	86f10 <_free_r+0x134>
   870b4:	00805504 	movi	r2,340
   870b8:	10c00436 	bltu	r2,r3,870cc <_free_r+0x2f0>
   870bc:	3804d3fa 	srli	r2,r7,15
   870c0:	10801dc4 	addi	r2,r2,119
   870c4:	100690fa 	slli	r3,r2,3
   870c8:	003f9106 	br	86f10 <_free_r+0x134>
   870cc:	00815504 	movi	r2,1364
   870d0:	10c0032e 	bgeu	r2,r3,870e0 <_free_r+0x304>
   870d4:	00801f84 	movi	r2,126
   870d8:	00c0fc04 	movi	r3,1008
   870dc:	003f8c06 	br	86f10 <_free_r+0x134>
   870e0:	3804d4ba 	srli	r2,r7,18
   870e4:	10801f04 	addi	r2,r2,124
   870e8:	100690fa 	slli	r3,r2,3
   870ec:	003f8806 	br	86f10 <_free_r+0x134>

000870f0 <__sfvwrite_r>:
   870f0:	30800217 	ldw	r2,8(r6)
   870f4:	defff504 	addi	sp,sp,-44
   870f8:	df000915 	stw	fp,36(sp)
   870fc:	dd800715 	stw	r22,28(sp)
   87100:	dc800315 	stw	r18,12(sp)
   87104:	dfc00a15 	stw	ra,40(sp)
   87108:	ddc00815 	stw	r23,32(sp)
   8710c:	dd400615 	stw	r21,24(sp)
   87110:	dd000515 	stw	r20,20(sp)
   87114:	dcc00415 	stw	r19,16(sp)
   87118:	dc400215 	stw	r17,8(sp)
   8711c:	dc000115 	stw	r16,4(sp)
   87120:	302d883a 	mov	r22,r6
   87124:	2039883a 	mov	fp,r4
   87128:	2825883a 	mov	r18,r5
   8712c:	10001c26 	beq	r2,zero,871a0 <__sfvwrite_r+0xb0>
   87130:	29c0030b 	ldhu	r7,12(r5)
   87134:	3880020c 	andi	r2,r7,8
   87138:	10002726 	beq	r2,zero,871d8 <__sfvwrite_r+0xe8>
   8713c:	28800417 	ldw	r2,16(r5)
   87140:	10002526 	beq	r2,zero,871d8 <__sfvwrite_r+0xe8>
   87144:	3880008c 	andi	r2,r7,2
   87148:	b5400017 	ldw	r21,0(r22)
   8714c:	10002826 	beq	r2,zero,871f0 <__sfvwrite_r+0x100>
   87150:	0021883a 	mov	r16,zero
   87154:	0023883a 	mov	r17,zero
   87158:	880d883a 	mov	r6,r17
   8715c:	e009883a 	mov	r4,fp
   87160:	00810004 	movi	r2,1024
   87164:	80006e26 	beq	r16,zero,87320 <__sfvwrite_r+0x230>
   87168:	800f883a 	mov	r7,r16
   8716c:	91400717 	ldw	r5,28(r18)
   87170:	1400012e 	bgeu	r2,r16,87178 <__sfvwrite_r+0x88>
   87174:	100f883a 	mov	r7,r2
   87178:	90c00917 	ldw	r3,36(r18)
   8717c:	183ee83a 	callr	r3
   87180:	1007883a 	mov	r3,r2
   87184:	80a1c83a 	sub	r16,r16,r2
   87188:	88a3883a 	add	r17,r17,r2
   8718c:	00806d0e 	bge	zero,r2,87344 <__sfvwrite_r+0x254>
   87190:	b0800217 	ldw	r2,8(r22)
   87194:	10c5c83a 	sub	r2,r2,r3
   87198:	b0800215 	stw	r2,8(r22)
   8719c:	103fee1e 	bne	r2,zero,87158 <__sfvwrite_r+0x68>
   871a0:	0009883a 	mov	r4,zero
   871a4:	2005883a 	mov	r2,r4
   871a8:	dfc00a17 	ldw	ra,40(sp)
   871ac:	df000917 	ldw	fp,36(sp)
   871b0:	ddc00817 	ldw	r23,32(sp)
   871b4:	dd800717 	ldw	r22,28(sp)
   871b8:	dd400617 	ldw	r21,24(sp)
   871bc:	dd000517 	ldw	r20,20(sp)
   871c0:	dcc00417 	ldw	r19,16(sp)
   871c4:	dc800317 	ldw	r18,12(sp)
   871c8:	dc400217 	ldw	r17,8(sp)
   871cc:	dc000117 	ldw	r16,4(sp)
   871d0:	dec00b04 	addi	sp,sp,44
   871d4:	f800283a 	ret
   871d8:	0084e580 	call	84e58 <__swsetup_r>
   871dc:	1000e41e 	bne	r2,zero,87570 <__sfvwrite_r+0x480>
   871e0:	91c0030b 	ldhu	r7,12(r18)
   871e4:	b5400017 	ldw	r21,0(r22)
   871e8:	3880008c 	andi	r2,r7,2
   871ec:	103fd81e 	bne	r2,zero,87150 <__sfvwrite_r+0x60>
   871f0:	3880004c 	andi	r2,r7,1
   871f4:	1005003a 	cmpeq	r2,r2,zero
   871f8:	10005726 	beq	r2,zero,87358 <__sfvwrite_r+0x268>
   871fc:	0029883a 	mov	r20,zero
   87200:	002f883a 	mov	r23,zero
   87204:	a0004226 	beq	r20,zero,87310 <__sfvwrite_r+0x220>
   87208:	3880800c 	andi	r2,r7,512
   8720c:	94000217 	ldw	r16,8(r18)
   87210:	10008b26 	beq	r2,zero,87440 <__sfvwrite_r+0x350>
   87214:	800d883a 	mov	r6,r16
   87218:	a400a536 	bltu	r20,r16,874b0 <__sfvwrite_r+0x3c0>
   8721c:	3881200c 	andi	r2,r7,1152
   87220:	10002726 	beq	r2,zero,872c0 <__sfvwrite_r+0x1d0>
   87224:	90800517 	ldw	r2,20(r18)
   87228:	92000417 	ldw	r8,16(r18)
   8722c:	91400017 	ldw	r5,0(r18)
   87230:	1087883a 	add	r3,r2,r2
   87234:	1887883a 	add	r3,r3,r2
   87238:	1808d7fa 	srli	r4,r3,31
   8723c:	2a21c83a 	sub	r16,r5,r8
   87240:	80800044 	addi	r2,r16,1
   87244:	20c9883a 	add	r4,r4,r3
   87248:	2027d07a 	srai	r19,r4,1
   8724c:	a085883a 	add	r2,r20,r2
   87250:	980d883a 	mov	r6,r19
   87254:	9880022e 	bgeu	r19,r2,87260 <__sfvwrite_r+0x170>
   87258:	1027883a 	mov	r19,r2
   8725c:	100d883a 	mov	r6,r2
   87260:	3881000c 	andi	r2,r7,1024
   87264:	1000b826 	beq	r2,zero,87548 <__sfvwrite_r+0x458>
   87268:	300b883a 	mov	r5,r6
   8726c:	e009883a 	mov	r4,fp
   87270:	00825100 	call	82510 <_malloc_r>
   87274:	10003126 	beq	r2,zero,8733c <__sfvwrite_r+0x24c>
   87278:	91400417 	ldw	r5,16(r18)
   8727c:	1009883a 	mov	r4,r2
   87280:	800d883a 	mov	r6,r16
   87284:	1023883a 	mov	r17,r2
   87288:	0087a480 	call	87a48 <memcpy>
   8728c:	90c0030b 	ldhu	r3,12(r18)
   87290:	00beffc4 	movi	r2,-1025
   87294:	1886703a 	and	r3,r3,r2
   87298:	18c02014 	ori	r3,r3,128
   8729c:	90c0030d 	sth	r3,12(r18)
   872a0:	9c07c83a 	sub	r3,r19,r16
   872a4:	8c05883a 	add	r2,r17,r16
   872a8:	a00d883a 	mov	r6,r20
   872ac:	a021883a 	mov	r16,r20
   872b0:	90800015 	stw	r2,0(r18)
   872b4:	90c00215 	stw	r3,8(r18)
   872b8:	94400415 	stw	r17,16(r18)
   872bc:	94c00515 	stw	r19,20(r18)
   872c0:	91000017 	ldw	r4,0(r18)
   872c4:	b80b883a 	mov	r5,r23
   872c8:	a023883a 	mov	r17,r20
   872cc:	0087ae80 	call	87ae8 <memmove>
   872d0:	90c00217 	ldw	r3,8(r18)
   872d4:	90800017 	ldw	r2,0(r18)
   872d8:	a027883a 	mov	r19,r20
   872dc:	1c07c83a 	sub	r3,r3,r16
   872e0:	1405883a 	add	r2,r2,r16
   872e4:	90c00215 	stw	r3,8(r18)
   872e8:	a021883a 	mov	r16,r20
   872ec:	90800015 	stw	r2,0(r18)
   872f0:	b0800217 	ldw	r2,8(r22)
   872f4:	1405c83a 	sub	r2,r2,r16
   872f8:	b0800215 	stw	r2,8(r22)
   872fc:	103fa826 	beq	r2,zero,871a0 <__sfvwrite_r+0xb0>
   87300:	a469c83a 	sub	r20,r20,r17
   87304:	91c0030b 	ldhu	r7,12(r18)
   87308:	bcef883a 	add	r23,r23,r19
   8730c:	a03fbe1e 	bne	r20,zero,87208 <__sfvwrite_r+0x118>
   87310:	adc00017 	ldw	r23,0(r21)
   87314:	ad000117 	ldw	r20,4(r21)
   87318:	ad400204 	addi	r21,r21,8
   8731c:	003fb906 	br	87204 <__sfvwrite_r+0x114>
   87320:	ac400017 	ldw	r17,0(r21)
   87324:	ac000117 	ldw	r16,4(r21)
   87328:	ad400204 	addi	r21,r21,8
   8732c:	003f8a06 	br	87158 <__sfvwrite_r+0x68>
   87330:	91400417 	ldw	r5,16(r18)
   87334:	e009883a 	mov	r4,fp
   87338:	0086ddc0 	call	86ddc <_free_r>
   8733c:	00800304 	movi	r2,12
   87340:	e0800015 	stw	r2,0(fp)
   87344:	9080030b 	ldhu	r2,12(r18)
   87348:	013fffc4 	movi	r4,-1
   8734c:	10801014 	ori	r2,r2,64
   87350:	9080030d 	sth	r2,12(r18)
   87354:	003f9306 	br	871a4 <__sfvwrite_r+0xb4>
   87358:	0027883a 	mov	r19,zero
   8735c:	002f883a 	mov	r23,zero
   87360:	d8000015 	stw	zero,0(sp)
   87364:	0029883a 	mov	r20,zero
   87368:	98001e26 	beq	r19,zero,873e4 <__sfvwrite_r+0x2f4>
   8736c:	d8c00017 	ldw	r3,0(sp)
   87370:	1804c03a 	cmpne	r2,r3,zero
   87374:	10005e26 	beq	r2,zero,874f0 <__sfvwrite_r+0x400>
   87378:	9821883a 	mov	r16,r19
   8737c:	a4c0012e 	bgeu	r20,r19,87384 <__sfvwrite_r+0x294>
   87380:	a021883a 	mov	r16,r20
   87384:	91000017 	ldw	r4,0(r18)
   87388:	90800417 	ldw	r2,16(r18)
   8738c:	91800217 	ldw	r6,8(r18)
   87390:	91c00517 	ldw	r7,20(r18)
   87394:	1100022e 	bgeu	r2,r4,873a0 <__sfvwrite_r+0x2b0>
   87398:	31e3883a 	add	r17,r6,r7
   8739c:	8c001616 	blt	r17,r16,873f8 <__sfvwrite_r+0x308>
   873a0:	81c03816 	blt	r16,r7,87484 <__sfvwrite_r+0x394>
   873a4:	90c00917 	ldw	r3,36(r18)
   873a8:	91400717 	ldw	r5,28(r18)
   873ac:	e009883a 	mov	r4,fp
   873b0:	b80d883a 	mov	r6,r23
   873b4:	183ee83a 	callr	r3
   873b8:	1023883a 	mov	r17,r2
   873bc:	00bfe10e 	bge	zero,r2,87344 <__sfvwrite_r+0x254>
   873c0:	a469c83a 	sub	r20,r20,r17
   873c4:	a0001826 	beq	r20,zero,87428 <__sfvwrite_r+0x338>
   873c8:	b0800217 	ldw	r2,8(r22)
   873cc:	1445c83a 	sub	r2,r2,r17
   873d0:	b0800215 	stw	r2,8(r22)
   873d4:	103f7226 	beq	r2,zero,871a0 <__sfvwrite_r+0xb0>
   873d8:	9c67c83a 	sub	r19,r19,r17
   873dc:	bc6f883a 	add	r23,r23,r17
   873e0:	983fe21e 	bne	r19,zero,8736c <__sfvwrite_r+0x27c>
   873e4:	adc00017 	ldw	r23,0(r21)
   873e8:	acc00117 	ldw	r19,4(r21)
   873ec:	ad400204 	addi	r21,r21,8
   873f0:	d8000015 	stw	zero,0(sp)
   873f4:	003fdc06 	br	87368 <__sfvwrite_r+0x278>
   873f8:	b80b883a 	mov	r5,r23
   873fc:	880d883a 	mov	r6,r17
   87400:	0087ae80 	call	87ae8 <memmove>
   87404:	90c00017 	ldw	r3,0(r18)
   87408:	e009883a 	mov	r4,fp
   8740c:	900b883a 	mov	r5,r18
   87410:	1c47883a 	add	r3,r3,r17
   87414:	90c00015 	stw	r3,0(r18)
   87418:	008678c0 	call	8678c <_fflush_r>
   8741c:	103fc91e 	bne	r2,zero,87344 <__sfvwrite_r+0x254>
   87420:	a469c83a 	sub	r20,r20,r17
   87424:	a03fe81e 	bne	r20,zero,873c8 <__sfvwrite_r+0x2d8>
   87428:	e009883a 	mov	r4,fp
   8742c:	900b883a 	mov	r5,r18
   87430:	008678c0 	call	8678c <_fflush_r>
   87434:	103fc31e 	bne	r2,zero,87344 <__sfvwrite_r+0x254>
   87438:	d8000015 	stw	zero,0(sp)
   8743c:	003fe206 	br	873c8 <__sfvwrite_r+0x2d8>
   87440:	91000017 	ldw	r4,0(r18)
   87444:	90800417 	ldw	r2,16(r18)
   87448:	1100022e 	bgeu	r2,r4,87454 <__sfvwrite_r+0x364>
   8744c:	8023883a 	mov	r17,r16
   87450:	85003136 	bltu	r16,r20,87518 <__sfvwrite_r+0x428>
   87454:	91c00517 	ldw	r7,20(r18)
   87458:	a1c01836 	bltu	r20,r7,874bc <__sfvwrite_r+0x3cc>
   8745c:	90c00917 	ldw	r3,36(r18)
   87460:	91400717 	ldw	r5,28(r18)
   87464:	e009883a 	mov	r4,fp
   87468:	b80d883a 	mov	r6,r23
   8746c:	183ee83a 	callr	r3
   87470:	1021883a 	mov	r16,r2
   87474:	00bfb30e 	bge	zero,r2,87344 <__sfvwrite_r+0x254>
   87478:	1023883a 	mov	r17,r2
   8747c:	1027883a 	mov	r19,r2
   87480:	003f9b06 	br	872f0 <__sfvwrite_r+0x200>
   87484:	b80b883a 	mov	r5,r23
   87488:	800d883a 	mov	r6,r16
   8748c:	0087ae80 	call	87ae8 <memmove>
   87490:	90c00217 	ldw	r3,8(r18)
   87494:	90800017 	ldw	r2,0(r18)
   87498:	8023883a 	mov	r17,r16
   8749c:	1c07c83a 	sub	r3,r3,r16
   874a0:	1405883a 	add	r2,r2,r16
   874a4:	90c00215 	stw	r3,8(r18)
   874a8:	90800015 	stw	r2,0(r18)
   874ac:	003fc406 	br	873c0 <__sfvwrite_r+0x2d0>
   874b0:	a00d883a 	mov	r6,r20
   874b4:	a021883a 	mov	r16,r20
   874b8:	003f8106 	br	872c0 <__sfvwrite_r+0x1d0>
   874bc:	b80b883a 	mov	r5,r23
   874c0:	a00d883a 	mov	r6,r20
   874c4:	0087ae80 	call	87ae8 <memmove>
   874c8:	90c00217 	ldw	r3,8(r18)
   874cc:	90800017 	ldw	r2,0(r18)
   874d0:	a021883a 	mov	r16,r20
   874d4:	1d07c83a 	sub	r3,r3,r20
   874d8:	1505883a 	add	r2,r2,r20
   874dc:	a023883a 	mov	r17,r20
   874e0:	a027883a 	mov	r19,r20
   874e4:	90c00215 	stw	r3,8(r18)
   874e8:	90800015 	stw	r2,0(r18)
   874ec:	003f8006 	br	872f0 <__sfvwrite_r+0x200>
   874f0:	b809883a 	mov	r4,r23
   874f4:	01400284 	movi	r5,10
   874f8:	980d883a 	mov	r6,r19
   874fc:	00879640 	call	87964 <memchr>
   87500:	10001726 	beq	r2,zero,87560 <__sfvwrite_r+0x470>
   87504:	15c5c83a 	sub	r2,r2,r23
   87508:	15000044 	addi	r20,r2,1
   8750c:	00800044 	movi	r2,1
   87510:	d8800015 	stw	r2,0(sp)
   87514:	003f9806 	br	87378 <__sfvwrite_r+0x288>
   87518:	b80b883a 	mov	r5,r23
   8751c:	800d883a 	mov	r6,r16
   87520:	0087ae80 	call	87ae8 <memmove>
   87524:	90c00017 	ldw	r3,0(r18)
   87528:	e009883a 	mov	r4,fp
   8752c:	900b883a 	mov	r5,r18
   87530:	1c07883a 	add	r3,r3,r16
   87534:	90c00015 	stw	r3,0(r18)
   87538:	8027883a 	mov	r19,r16
   8753c:	008678c0 	call	8678c <_fflush_r>
   87540:	103f6b26 	beq	r2,zero,872f0 <__sfvwrite_r+0x200>
   87544:	003f7f06 	br	87344 <__sfvwrite_r+0x254>
   87548:	400b883a 	mov	r5,r8
   8754c:	e009883a 	mov	r4,fp
   87550:	0088ed80 	call	88ed8 <_realloc_r>
   87554:	103f7626 	beq	r2,zero,87330 <__sfvwrite_r+0x240>
   87558:	1023883a 	mov	r17,r2
   8755c:	003f5006 	br	872a0 <__sfvwrite_r+0x1b0>
   87560:	00c00044 	movi	r3,1
   87564:	9d000044 	addi	r20,r19,1
   87568:	d8c00015 	stw	r3,0(sp)
   8756c:	003f8206 	br	87378 <__sfvwrite_r+0x288>
   87570:	9080030b 	ldhu	r2,12(r18)
   87574:	00c00244 	movi	r3,9
   87578:	013fffc4 	movi	r4,-1
   8757c:	10801014 	ori	r2,r2,64
   87580:	9080030d 	sth	r2,12(r18)
   87584:	e0c00015 	stw	r3,0(fp)
   87588:	003f0606 	br	871a4 <__sfvwrite_r+0xb4>

0008758c <_fwalk_reent>:
   8758c:	defff704 	addi	sp,sp,-36
   87590:	dcc00315 	stw	r19,12(sp)
   87594:	24c0b804 	addi	r19,r4,736
   87598:	dd800615 	stw	r22,24(sp)
   8759c:	dd400515 	stw	r21,20(sp)
   875a0:	dfc00815 	stw	ra,32(sp)
   875a4:	ddc00715 	stw	r23,28(sp)
   875a8:	dd000415 	stw	r20,16(sp)
   875ac:	dc800215 	stw	r18,8(sp)
   875b0:	dc400115 	stw	r17,4(sp)
   875b4:	dc000015 	stw	r16,0(sp)
   875b8:	202b883a 	mov	r21,r4
   875bc:	282d883a 	mov	r22,r5
   875c0:	0086a140 	call	86a14 <__sfp_lock_acquire>
   875c4:	98002126 	beq	r19,zero,8764c <_fwalk_reent+0xc0>
   875c8:	002f883a 	mov	r23,zero
   875cc:	9c800117 	ldw	r18,4(r19)
   875d0:	9c000217 	ldw	r16,8(r19)
   875d4:	90bfffc4 	addi	r2,r18,-1
   875d8:	10000d16 	blt	r2,zero,87610 <_fwalk_reent+0x84>
   875dc:	0023883a 	mov	r17,zero
   875e0:	053fffc4 	movi	r20,-1
   875e4:	8080030f 	ldh	r2,12(r16)
   875e8:	8c400044 	addi	r17,r17,1
   875ec:	10000626 	beq	r2,zero,87608 <_fwalk_reent+0x7c>
   875f0:	8080038f 	ldh	r2,14(r16)
   875f4:	800b883a 	mov	r5,r16
   875f8:	a809883a 	mov	r4,r21
   875fc:	15000226 	beq	r2,r20,87608 <_fwalk_reent+0x7c>
   87600:	b03ee83a 	callr	r22
   87604:	b8aeb03a 	or	r23,r23,r2
   87608:	84001704 	addi	r16,r16,92
   8760c:	947ff51e 	bne	r18,r17,875e4 <_fwalk_reent+0x58>
   87610:	9cc00017 	ldw	r19,0(r19)
   87614:	983fed1e 	bne	r19,zero,875cc <_fwalk_reent+0x40>
   87618:	0086a180 	call	86a18 <__sfp_lock_release>
   8761c:	b805883a 	mov	r2,r23
   87620:	dfc00817 	ldw	ra,32(sp)
   87624:	ddc00717 	ldw	r23,28(sp)
   87628:	dd800617 	ldw	r22,24(sp)
   8762c:	dd400517 	ldw	r21,20(sp)
   87630:	dd000417 	ldw	r20,16(sp)
   87634:	dcc00317 	ldw	r19,12(sp)
   87638:	dc800217 	ldw	r18,8(sp)
   8763c:	dc400117 	ldw	r17,4(sp)
   87640:	dc000017 	ldw	r16,0(sp)
   87644:	dec00904 	addi	sp,sp,36
   87648:	f800283a 	ret
   8764c:	002f883a 	mov	r23,zero
   87650:	003ff106 	br	87618 <_fwalk_reent+0x8c>

00087654 <_fwalk>:
   87654:	defff804 	addi	sp,sp,-32
   87658:	dcc00315 	stw	r19,12(sp)
   8765c:	24c0b804 	addi	r19,r4,736
   87660:	dd400515 	stw	r21,20(sp)
   87664:	dfc00715 	stw	ra,28(sp)
   87668:	dd800615 	stw	r22,24(sp)
   8766c:	dd000415 	stw	r20,16(sp)
   87670:	dc800215 	stw	r18,8(sp)
   87674:	dc400115 	stw	r17,4(sp)
   87678:	dc000015 	stw	r16,0(sp)
   8767c:	282b883a 	mov	r21,r5
   87680:	0086a140 	call	86a14 <__sfp_lock_acquire>
   87684:	98001f26 	beq	r19,zero,87704 <_fwalk+0xb0>
   87688:	002d883a 	mov	r22,zero
   8768c:	9c800117 	ldw	r18,4(r19)
   87690:	9c000217 	ldw	r16,8(r19)
   87694:	90bfffc4 	addi	r2,r18,-1
   87698:	10000c16 	blt	r2,zero,876cc <_fwalk+0x78>
   8769c:	0023883a 	mov	r17,zero
   876a0:	053fffc4 	movi	r20,-1
   876a4:	8080030f 	ldh	r2,12(r16)
   876a8:	8c400044 	addi	r17,r17,1
   876ac:	10000526 	beq	r2,zero,876c4 <_fwalk+0x70>
   876b0:	8080038f 	ldh	r2,14(r16)
   876b4:	8009883a 	mov	r4,r16
   876b8:	15000226 	beq	r2,r20,876c4 <_fwalk+0x70>
   876bc:	a83ee83a 	callr	r21
   876c0:	b0acb03a 	or	r22,r22,r2
   876c4:	84001704 	addi	r16,r16,92
   876c8:	947ff61e 	bne	r18,r17,876a4 <_fwalk+0x50>
   876cc:	9cc00017 	ldw	r19,0(r19)
   876d0:	983fee1e 	bne	r19,zero,8768c <_fwalk+0x38>
   876d4:	0086a180 	call	86a18 <__sfp_lock_release>
   876d8:	b005883a 	mov	r2,r22
   876dc:	dfc00717 	ldw	ra,28(sp)
   876e0:	dd800617 	ldw	r22,24(sp)
   876e4:	dd400517 	ldw	r21,20(sp)
   876e8:	dd000417 	ldw	r20,16(sp)
   876ec:	dcc00317 	ldw	r19,12(sp)
   876f0:	dc800217 	ldw	r18,8(sp)
   876f4:	dc400117 	ldw	r17,4(sp)
   876f8:	dc000017 	ldw	r16,0(sp)
   876fc:	dec00804 	addi	sp,sp,32
   87700:	f800283a 	ret
   87704:	002d883a 	mov	r22,zero
   87708:	003ff206 	br	876d4 <_fwalk+0x80>

0008770c <__locale_charset>:
   8770c:	d0a00517 	ldw	r2,-32748(gp)
   87710:	f800283a 	ret

00087714 <_localeconv_r>:
   87714:	00800274 	movhi	r2,9
   87718:	10b96904 	addi	r2,r2,-6748
   8771c:	f800283a 	ret

00087720 <localeconv>:
   87720:	00800274 	movhi	r2,9
   87724:	10805f04 	addi	r2,r2,380
   87728:	11000017 	ldw	r4,0(r2)
   8772c:	00877141 	jmpi	87714 <_localeconv_r>

00087730 <_setlocale_r>:
   87730:	defffc04 	addi	sp,sp,-16
   87734:	00c00274 	movhi	r3,9
   87738:	18f96404 	addi	r3,r3,-6768
   8773c:	dc800215 	stw	r18,8(sp)
   87740:	dc400115 	stw	r17,4(sp)
   87744:	dc000015 	stw	r16,0(sp)
   87748:	2023883a 	mov	r17,r4
   8774c:	2825883a 	mov	r18,r5
   87750:	dfc00315 	stw	ra,12(sp)
   87754:	3021883a 	mov	r16,r6
   87758:	3009883a 	mov	r4,r6
   8775c:	180b883a 	mov	r5,r3
   87760:	30000926 	beq	r6,zero,87788 <_setlocale_r+0x58>
   87764:	00896880 	call	89688 <strcmp>
   87768:	8009883a 	mov	r4,r16
   8776c:	01400274 	movhi	r5,9
   87770:	29794f04 	addi	r5,r5,-6852
   87774:	10000b1e 	bne	r2,zero,877a4 <_setlocale_r+0x74>
   87778:	8c000d15 	stw	r16,52(r17)
   8777c:	8c800c15 	stw	r18,48(r17)
   87780:	00c00274 	movhi	r3,9
   87784:	18f96404 	addi	r3,r3,-6768
   87788:	1805883a 	mov	r2,r3
   8778c:	dfc00317 	ldw	ra,12(sp)
   87790:	dc800217 	ldw	r18,8(sp)
   87794:	dc400117 	ldw	r17,4(sp)
   87798:	dc000017 	ldw	r16,0(sp)
   8779c:	dec00404 	addi	sp,sp,16
   877a0:	f800283a 	ret
   877a4:	00896880 	call	89688 <strcmp>
   877a8:	0007883a 	mov	r3,zero
   877ac:	103ff226 	beq	r2,zero,87778 <_setlocale_r+0x48>
   877b0:	003ff506 	br	87788 <_setlocale_r+0x58>

000877b4 <setlocale>:
   877b4:	01800274 	movhi	r6,9
   877b8:	31805f04 	addi	r6,r6,380
   877bc:	2007883a 	mov	r3,r4
   877c0:	31000017 	ldw	r4,0(r6)
   877c4:	280d883a 	mov	r6,r5
   877c8:	180b883a 	mov	r5,r3
   877cc:	00877301 	jmpi	87730 <_setlocale_r>

000877d0 <__smakebuf_r>:
   877d0:	2880030b 	ldhu	r2,12(r5)
   877d4:	deffed04 	addi	sp,sp,-76
   877d8:	dc401015 	stw	r17,64(sp)
   877dc:	1080008c 	andi	r2,r2,2
   877e0:	dc000f15 	stw	r16,60(sp)
   877e4:	dfc01215 	stw	ra,72(sp)
   877e8:	dc801115 	stw	r18,68(sp)
   877ec:	2821883a 	mov	r16,r5
   877f0:	2023883a 	mov	r17,r4
   877f4:	10000b26 	beq	r2,zero,87824 <__smakebuf_r+0x54>
   877f8:	28c010c4 	addi	r3,r5,67
   877fc:	00800044 	movi	r2,1
   87800:	28800515 	stw	r2,20(r5)
   87804:	28c00415 	stw	r3,16(r5)
   87808:	28c00015 	stw	r3,0(r5)
   8780c:	dfc01217 	ldw	ra,72(sp)
   87810:	dc801117 	ldw	r18,68(sp)
   87814:	dc401017 	ldw	r17,64(sp)
   87818:	dc000f17 	ldw	r16,60(sp)
   8781c:	dec01304 	addi	sp,sp,76
   87820:	f800283a 	ret
   87824:	2940038f 	ldh	r5,14(r5)
   87828:	28002116 	blt	r5,zero,878b0 <__smakebuf_r+0xe0>
   8782c:	d80d883a 	mov	r6,sp
   87830:	0089b640 	call	89b64 <_fstat_r>
   87834:	10001e16 	blt	r2,zero,878b0 <__smakebuf_r+0xe0>
   87838:	d8800117 	ldw	r2,4(sp)
   8783c:	00e00014 	movui	r3,32768
   87840:	113c000c 	andi	r4,r2,61440
   87844:	20c03126 	beq	r4,r3,8790c <__smakebuf_r+0x13c>
   87848:	8080030b 	ldhu	r2,12(r16)
   8784c:	00c80004 	movi	r3,8192
   87850:	10820014 	ori	r2,r2,2048
   87854:	8080030d 	sth	r2,12(r16)
   87858:	20c01e26 	beq	r4,r3,878d4 <__smakebuf_r+0x104>
   8785c:	04810004 	movi	r18,1024
   87860:	8809883a 	mov	r4,r17
   87864:	900b883a 	mov	r5,r18
   87868:	00825100 	call	82510 <_malloc_r>
   8786c:	1009883a 	mov	r4,r2
   87870:	10003126 	beq	r2,zero,87938 <__smakebuf_r+0x168>
   87874:	80c0030b 	ldhu	r3,12(r16)
   87878:	00800234 	movhi	r2,8
   8787c:	109ac204 	addi	r2,r2,27400
   87880:	88800f15 	stw	r2,60(r17)
   87884:	18c02014 	ori	r3,r3,128
   87888:	84800515 	stw	r18,20(r16)
   8788c:	80c0030d 	sth	r3,12(r16)
   87890:	81000415 	stw	r4,16(r16)
   87894:	81000015 	stw	r4,0(r16)
   87898:	dfc01217 	ldw	ra,72(sp)
   8789c:	dc801117 	ldw	r18,68(sp)
   878a0:	dc401017 	ldw	r17,64(sp)
   878a4:	dc000f17 	ldw	r16,60(sp)
   878a8:	dec01304 	addi	sp,sp,76
   878ac:	f800283a 	ret
   878b0:	80c0030b 	ldhu	r3,12(r16)
   878b4:	1880200c 	andi	r2,r3,128
   878b8:	10000426 	beq	r2,zero,878cc <__smakebuf_r+0xfc>
   878bc:	04801004 	movi	r18,64
   878c0:	18820014 	ori	r2,r3,2048
   878c4:	8080030d 	sth	r2,12(r16)
   878c8:	003fe506 	br	87860 <__smakebuf_r+0x90>
   878cc:	04810004 	movi	r18,1024
   878d0:	003ffb06 	br	878c0 <__smakebuf_r+0xf0>
   878d4:	8140038f 	ldh	r5,14(r16)
   878d8:	8809883a 	mov	r4,r17
   878dc:	0089bd80 	call	89bd8 <_isatty_r>
   878e0:	103fde26 	beq	r2,zero,8785c <__smakebuf_r+0x8c>
   878e4:	8080030b 	ldhu	r2,12(r16)
   878e8:	80c010c4 	addi	r3,r16,67
   878ec:	04810004 	movi	r18,1024
   878f0:	10800054 	ori	r2,r2,1
   878f4:	8080030d 	sth	r2,12(r16)
   878f8:	00800044 	movi	r2,1
   878fc:	80c00415 	stw	r3,16(r16)
   87900:	80800515 	stw	r2,20(r16)
   87904:	80c00015 	stw	r3,0(r16)
   87908:	003fd506 	br	87860 <__smakebuf_r+0x90>
   8790c:	80c00a17 	ldw	r3,40(r16)
   87910:	00800274 	movhi	r2,9
   87914:	10a55104 	addi	r2,r2,-27324
   87918:	18bfcb1e 	bne	r3,r2,87848 <__smakebuf_r+0x78>
   8791c:	8080030b 	ldhu	r2,12(r16)
   87920:	00c10004 	movi	r3,1024
   87924:	1825883a 	mov	r18,r3
   87928:	10c4b03a 	or	r2,r2,r3
   8792c:	8080030d 	sth	r2,12(r16)
   87930:	80c01315 	stw	r3,76(r16)
   87934:	003fca06 	br	87860 <__smakebuf_r+0x90>
   87938:	8100030b 	ldhu	r4,12(r16)
   8793c:	2080800c 	andi	r2,r4,512
   87940:	103fb21e 	bne	r2,zero,8780c <__smakebuf_r+0x3c>
   87944:	80c010c4 	addi	r3,r16,67
   87948:	21000094 	ori	r4,r4,2
   8794c:	00800044 	movi	r2,1
   87950:	80800515 	stw	r2,20(r16)
   87954:	8100030d 	sth	r4,12(r16)
   87958:	80c00415 	stw	r3,16(r16)
   8795c:	80c00015 	stw	r3,0(r16)
   87960:	003faa06 	br	8780c <__smakebuf_r+0x3c>

00087964 <memchr>:
   87964:	008000c4 	movi	r2,3
   87968:	29403fcc 	andi	r5,r5,255
   8796c:	2007883a 	mov	r3,r4
   87970:	1180022e 	bgeu	r2,r6,8797c <memchr+0x18>
   87974:	2084703a 	and	r2,r4,r2
   87978:	10000b26 	beq	r2,zero,879a8 <memchr+0x44>
   8797c:	313fffc4 	addi	r4,r6,-1
   87980:	3000051e 	bne	r6,zero,87998 <memchr+0x34>
   87984:	00002c06 	br	87a38 <memchr+0xd4>
   87988:	213fffc4 	addi	r4,r4,-1
   8798c:	00bfffc4 	movi	r2,-1
   87990:	18c00044 	addi	r3,r3,1
   87994:	20802826 	beq	r4,r2,87a38 <memchr+0xd4>
   87998:	18800003 	ldbu	r2,0(r3)
   8799c:	28bffa1e 	bne	r5,r2,87988 <memchr+0x24>
   879a0:	1805883a 	mov	r2,r3
   879a4:	f800283a 	ret
   879a8:	0011883a 	mov	r8,zero
   879ac:	0007883a 	mov	r3,zero
   879b0:	01c00104 	movi	r7,4
   879b4:	4004923a 	slli	r2,r8,8
   879b8:	18c00044 	addi	r3,r3,1
   879bc:	1151883a 	add	r8,r2,r5
   879c0:	19fffc1e 	bne	r3,r7,879b4 <memchr+0x50>
   879c4:	02bfbff4 	movhi	r10,65279
   879c8:	52bfbfc4 	addi	r10,r10,-257
   879cc:	02602074 	movhi	r9,32897
   879d0:	4a602004 	addi	r9,r9,-32640
   879d4:	02c000c4 	movi	r11,3
   879d8:	20800017 	ldw	r2,0(r4)
   879dc:	31bfff04 	addi	r6,r6,-4
   879e0:	200f883a 	mov	r7,r4
   879e4:	1204f03a 	xor	r2,r2,r8
   879e8:	1287883a 	add	r3,r2,r10
   879ec:	1a46703a 	and	r3,r3,r9
   879f0:	0084303a 	nor	r2,zero,r2
   879f4:	10c4703a 	and	r2,r2,r3
   879f8:	10000b26 	beq	r2,zero,87a28 <memchr+0xc4>
   879fc:	20800003 	ldbu	r2,0(r4)
   87a00:	28800f26 	beq	r5,r2,87a40 <memchr+0xdc>
   87a04:	20800043 	ldbu	r2,1(r4)
   87a08:	21c00044 	addi	r7,r4,1
   87a0c:	28800c26 	beq	r5,r2,87a40 <memchr+0xdc>
   87a10:	20800083 	ldbu	r2,2(r4)
   87a14:	21c00084 	addi	r7,r4,2
   87a18:	28800926 	beq	r5,r2,87a40 <memchr+0xdc>
   87a1c:	208000c3 	ldbu	r2,3(r4)
   87a20:	21c000c4 	addi	r7,r4,3
   87a24:	28800626 	beq	r5,r2,87a40 <memchr+0xdc>
   87a28:	21000104 	addi	r4,r4,4
   87a2c:	59bfea36 	bltu	r11,r6,879d8 <memchr+0x74>
   87a30:	2007883a 	mov	r3,r4
   87a34:	003fd106 	br	8797c <memchr+0x18>
   87a38:	0005883a 	mov	r2,zero
   87a3c:	f800283a 	ret
   87a40:	3805883a 	mov	r2,r7
   87a44:	f800283a 	ret

00087a48 <memcpy>:
   87a48:	01c003c4 	movi	r7,15
   87a4c:	2007883a 	mov	r3,r4
   87a50:	3980032e 	bgeu	r7,r6,87a60 <memcpy+0x18>
   87a54:	2904b03a 	or	r2,r5,r4
   87a58:	108000cc 	andi	r2,r2,3
   87a5c:	10000926 	beq	r2,zero,87a84 <memcpy+0x3c>
   87a60:	30000626 	beq	r6,zero,87a7c <memcpy+0x34>
   87a64:	30cd883a 	add	r6,r6,r3
   87a68:	28800003 	ldbu	r2,0(r5)
   87a6c:	29400044 	addi	r5,r5,1
   87a70:	18800005 	stb	r2,0(r3)
   87a74:	18c00044 	addi	r3,r3,1
   87a78:	30fffb1e 	bne	r6,r3,87a68 <memcpy+0x20>
   87a7c:	2005883a 	mov	r2,r4
   87a80:	f800283a 	ret
   87a84:	3811883a 	mov	r8,r7
   87a88:	200f883a 	mov	r7,r4
   87a8c:	28c00017 	ldw	r3,0(r5)
   87a90:	31bffc04 	addi	r6,r6,-16
   87a94:	38c00015 	stw	r3,0(r7)
   87a98:	28800117 	ldw	r2,4(r5)
   87a9c:	38800115 	stw	r2,4(r7)
   87aa0:	28c00217 	ldw	r3,8(r5)
   87aa4:	38c00215 	stw	r3,8(r7)
   87aa8:	28800317 	ldw	r2,12(r5)
   87aac:	29400404 	addi	r5,r5,16
   87ab0:	38800315 	stw	r2,12(r7)
   87ab4:	39c00404 	addi	r7,r7,16
   87ab8:	41bff436 	bltu	r8,r6,87a8c <memcpy+0x44>
   87abc:	008000c4 	movi	r2,3
   87ac0:	1180072e 	bgeu	r2,r6,87ae0 <memcpy+0x98>
   87ac4:	1007883a 	mov	r3,r2
   87ac8:	28800017 	ldw	r2,0(r5)
   87acc:	31bfff04 	addi	r6,r6,-4
   87ad0:	29400104 	addi	r5,r5,4
   87ad4:	38800015 	stw	r2,0(r7)
   87ad8:	39c00104 	addi	r7,r7,4
   87adc:	19bffa36 	bltu	r3,r6,87ac8 <memcpy+0x80>
   87ae0:	3807883a 	mov	r3,r7
   87ae4:	003fde06 	br	87a60 <memcpy+0x18>

00087ae8 <memmove>:
   87ae8:	2807883a 	mov	r3,r5
   87aec:	2011883a 	mov	r8,r4
   87af0:	29000c2e 	bgeu	r5,r4,87b24 <memmove+0x3c>
   87af4:	298f883a 	add	r7,r5,r6
   87af8:	21c00a2e 	bgeu	r4,r7,87b24 <memmove+0x3c>
   87afc:	30000726 	beq	r6,zero,87b1c <memmove+0x34>
   87b00:	2187883a 	add	r3,r4,r6
   87b04:	198dc83a 	sub	r6,r3,r6
   87b08:	39ffffc4 	addi	r7,r7,-1
   87b0c:	38800003 	ldbu	r2,0(r7)
   87b10:	18ffffc4 	addi	r3,r3,-1
   87b14:	18800005 	stb	r2,0(r3)
   87b18:	19bffb1e 	bne	r3,r6,87b08 <memmove+0x20>
   87b1c:	2005883a 	mov	r2,r4
   87b20:	f800283a 	ret
   87b24:	01c003c4 	movi	r7,15
   87b28:	39800a36 	bltu	r7,r6,87b54 <memmove+0x6c>
   87b2c:	303ffb26 	beq	r6,zero,87b1c <memmove+0x34>
   87b30:	400f883a 	mov	r7,r8
   87b34:	320d883a 	add	r6,r6,r8
   87b38:	28800003 	ldbu	r2,0(r5)
   87b3c:	29400044 	addi	r5,r5,1
   87b40:	38800005 	stb	r2,0(r7)
   87b44:	39c00044 	addi	r7,r7,1
   87b48:	39bffb1e 	bne	r7,r6,87b38 <memmove+0x50>
   87b4c:	2005883a 	mov	r2,r4
   87b50:	f800283a 	ret
   87b54:	1904b03a 	or	r2,r3,r4
   87b58:	108000cc 	andi	r2,r2,3
   87b5c:	103ff31e 	bne	r2,zero,87b2c <memmove+0x44>
   87b60:	3811883a 	mov	r8,r7
   87b64:	180b883a 	mov	r5,r3
   87b68:	200f883a 	mov	r7,r4
   87b6c:	28c00017 	ldw	r3,0(r5)
   87b70:	31bffc04 	addi	r6,r6,-16
   87b74:	38c00015 	stw	r3,0(r7)
   87b78:	28800117 	ldw	r2,4(r5)
   87b7c:	38800115 	stw	r2,4(r7)
   87b80:	28c00217 	ldw	r3,8(r5)
   87b84:	38c00215 	stw	r3,8(r7)
   87b88:	28800317 	ldw	r2,12(r5)
   87b8c:	29400404 	addi	r5,r5,16
   87b90:	38800315 	stw	r2,12(r7)
   87b94:	39c00404 	addi	r7,r7,16
   87b98:	41bff436 	bltu	r8,r6,87b6c <memmove+0x84>
   87b9c:	008000c4 	movi	r2,3
   87ba0:	1180072e 	bgeu	r2,r6,87bc0 <memmove+0xd8>
   87ba4:	1007883a 	mov	r3,r2
   87ba8:	28800017 	ldw	r2,0(r5)
   87bac:	31bfff04 	addi	r6,r6,-4
   87bb0:	29400104 	addi	r5,r5,4
   87bb4:	38800015 	stw	r2,0(r7)
   87bb8:	39c00104 	addi	r7,r7,4
   87bbc:	19bffa36 	bltu	r3,r6,87ba8 <memmove+0xc0>
   87bc0:	3811883a 	mov	r8,r7
   87bc4:	003fd906 	br	87b2c <memmove+0x44>

00087bc8 <memset>:
   87bc8:	008000c4 	movi	r2,3
   87bcc:	29403fcc 	andi	r5,r5,255
   87bd0:	2007883a 	mov	r3,r4
   87bd4:	1180022e 	bgeu	r2,r6,87be0 <memset+0x18>
   87bd8:	2084703a 	and	r2,r4,r2
   87bdc:	10000826 	beq	r2,zero,87c00 <memset+0x38>
   87be0:	30000526 	beq	r6,zero,87bf8 <memset+0x30>
   87be4:	2805883a 	mov	r2,r5
   87be8:	30cd883a 	add	r6,r6,r3
   87bec:	18800005 	stb	r2,0(r3)
   87bf0:	18c00044 	addi	r3,r3,1
   87bf4:	19bffd1e 	bne	r3,r6,87bec <memset+0x24>
   87bf8:	2005883a 	mov	r2,r4
   87bfc:	f800283a 	ret
   87c00:	2804923a 	slli	r2,r5,8
   87c04:	020003c4 	movi	r8,15
   87c08:	200f883a 	mov	r7,r4
   87c0c:	2884b03a 	or	r2,r5,r2
   87c10:	1006943a 	slli	r3,r2,16
   87c14:	10c6b03a 	or	r3,r2,r3
   87c18:	41800a2e 	bgeu	r8,r6,87c44 <memset+0x7c>
   87c1c:	4005883a 	mov	r2,r8
   87c20:	31bffc04 	addi	r6,r6,-16
   87c24:	38c00015 	stw	r3,0(r7)
   87c28:	38c00115 	stw	r3,4(r7)
   87c2c:	38c00215 	stw	r3,8(r7)
   87c30:	38c00315 	stw	r3,12(r7)
   87c34:	39c00404 	addi	r7,r7,16
   87c38:	11bff936 	bltu	r2,r6,87c20 <memset+0x58>
   87c3c:	008000c4 	movi	r2,3
   87c40:	1180052e 	bgeu	r2,r6,87c58 <memset+0x90>
   87c44:	31bfff04 	addi	r6,r6,-4
   87c48:	008000c4 	movi	r2,3
   87c4c:	38c00015 	stw	r3,0(r7)
   87c50:	39c00104 	addi	r7,r7,4
   87c54:	11bffb36 	bltu	r2,r6,87c44 <memset+0x7c>
   87c58:	3807883a 	mov	r3,r7
   87c5c:	003fe006 	br	87be0 <memset+0x18>

00087c60 <_Bfree>:
   87c60:	28000826 	beq	r5,zero,87c84 <_Bfree+0x24>
   87c64:	28800117 	ldw	r2,4(r5)
   87c68:	21001317 	ldw	r4,76(r4)
   87c6c:	1085883a 	add	r2,r2,r2
   87c70:	1085883a 	add	r2,r2,r2
   87c74:	1105883a 	add	r2,r2,r4
   87c78:	10c00017 	ldw	r3,0(r2)
   87c7c:	28c00015 	stw	r3,0(r5)
   87c80:	11400015 	stw	r5,0(r2)
   87c84:	f800283a 	ret

00087c88 <__hi0bits>:
   87c88:	20bfffec 	andhi	r2,r4,65535
   87c8c:	10001426 	beq	r2,zero,87ce0 <__hi0bits+0x58>
   87c90:	0007883a 	mov	r3,zero
   87c94:	20bfc02c 	andhi	r2,r4,65280
   87c98:	1000021e 	bne	r2,zero,87ca4 <__hi0bits+0x1c>
   87c9c:	2008923a 	slli	r4,r4,8
   87ca0:	18c00204 	addi	r3,r3,8
   87ca4:	20bc002c 	andhi	r2,r4,61440
   87ca8:	1000021e 	bne	r2,zero,87cb4 <__hi0bits+0x2c>
   87cac:	2008913a 	slli	r4,r4,4
   87cb0:	18c00104 	addi	r3,r3,4
   87cb4:	20b0002c 	andhi	r2,r4,49152
   87cb8:	1000031e 	bne	r2,zero,87cc8 <__hi0bits+0x40>
   87cbc:	2105883a 	add	r2,r4,r4
   87cc0:	18c00084 	addi	r3,r3,2
   87cc4:	1089883a 	add	r4,r2,r2
   87cc8:	20000316 	blt	r4,zero,87cd8 <__hi0bits+0x50>
   87ccc:	2090002c 	andhi	r2,r4,16384
   87cd0:	10000626 	beq	r2,zero,87cec <__hi0bits+0x64>
   87cd4:	18c00044 	addi	r3,r3,1
   87cd8:	1805883a 	mov	r2,r3
   87cdc:	f800283a 	ret
   87ce0:	2008943a 	slli	r4,r4,16
   87ce4:	00c00404 	movi	r3,16
   87ce8:	003fea06 	br	87c94 <__hi0bits+0xc>
   87cec:	00c00804 	movi	r3,32
   87cf0:	1805883a 	mov	r2,r3
   87cf4:	f800283a 	ret

00087cf8 <__lo0bits>:
   87cf8:	20c00017 	ldw	r3,0(r4)
   87cfc:	188001cc 	andi	r2,r3,7
   87d00:	10000a26 	beq	r2,zero,87d2c <__lo0bits+0x34>
   87d04:	1880004c 	andi	r2,r3,1
   87d08:	1005003a 	cmpeq	r2,r2,zero
   87d0c:	10002126 	beq	r2,zero,87d94 <__lo0bits+0x9c>
   87d10:	1880008c 	andi	r2,r3,2
   87d14:	1000251e 	bne	r2,zero,87dac <__lo0bits+0xb4>
   87d18:	1804d0ba 	srli	r2,r3,2
   87d1c:	01400084 	movi	r5,2
   87d20:	20800015 	stw	r2,0(r4)
   87d24:	2805883a 	mov	r2,r5
   87d28:	f800283a 	ret
   87d2c:	18bfffcc 	andi	r2,r3,65535
   87d30:	10001526 	beq	r2,zero,87d88 <__lo0bits+0x90>
   87d34:	000b883a 	mov	r5,zero
   87d38:	18803fcc 	andi	r2,r3,255
   87d3c:	1000021e 	bne	r2,zero,87d48 <__lo0bits+0x50>
   87d40:	1806d23a 	srli	r3,r3,8
   87d44:	29400204 	addi	r5,r5,8
   87d48:	188003cc 	andi	r2,r3,15
   87d4c:	1000021e 	bne	r2,zero,87d58 <__lo0bits+0x60>
   87d50:	1806d13a 	srli	r3,r3,4
   87d54:	29400104 	addi	r5,r5,4
   87d58:	188000cc 	andi	r2,r3,3
   87d5c:	1000021e 	bne	r2,zero,87d68 <__lo0bits+0x70>
   87d60:	1806d0ba 	srli	r3,r3,2
   87d64:	29400084 	addi	r5,r5,2
   87d68:	1880004c 	andi	r2,r3,1
   87d6c:	1000031e 	bne	r2,zero,87d7c <__lo0bits+0x84>
   87d70:	1806d07a 	srli	r3,r3,1
   87d74:	18000a26 	beq	r3,zero,87da0 <__lo0bits+0xa8>
   87d78:	29400044 	addi	r5,r5,1
   87d7c:	2805883a 	mov	r2,r5
   87d80:	20c00015 	stw	r3,0(r4)
   87d84:	f800283a 	ret
   87d88:	1806d43a 	srli	r3,r3,16
   87d8c:	01400404 	movi	r5,16
   87d90:	003fe906 	br	87d38 <__lo0bits+0x40>
   87d94:	000b883a 	mov	r5,zero
   87d98:	2805883a 	mov	r2,r5
   87d9c:	f800283a 	ret
   87da0:	01400804 	movi	r5,32
   87da4:	2805883a 	mov	r2,r5
   87da8:	f800283a 	ret
   87dac:	1804d07a 	srli	r2,r3,1
   87db0:	01400044 	movi	r5,1
   87db4:	20800015 	stw	r2,0(r4)
   87db8:	003fda06 	br	87d24 <__lo0bits+0x2c>

00087dbc <__mcmp>:
   87dbc:	20800417 	ldw	r2,16(r4)
   87dc0:	28c00417 	ldw	r3,16(r5)
   87dc4:	10cfc83a 	sub	r7,r2,r3
   87dc8:	38000c1e 	bne	r7,zero,87dfc <__mcmp+0x40>
   87dcc:	18c5883a 	add	r2,r3,r3
   87dd0:	1085883a 	add	r2,r2,r2
   87dd4:	10c00504 	addi	r3,r2,20
   87dd8:	21000504 	addi	r4,r4,20
   87ddc:	28cb883a 	add	r5,r5,r3
   87de0:	2085883a 	add	r2,r4,r2
   87de4:	10bfff04 	addi	r2,r2,-4
   87de8:	297fff04 	addi	r5,r5,-4
   87dec:	11800017 	ldw	r6,0(r2)
   87df0:	28c00017 	ldw	r3,0(r5)
   87df4:	30c0031e 	bne	r6,r3,87e04 <__mcmp+0x48>
   87df8:	20bffa36 	bltu	r4,r2,87de4 <__mcmp+0x28>
   87dfc:	3805883a 	mov	r2,r7
   87e00:	f800283a 	ret
   87e04:	30c00336 	bltu	r6,r3,87e14 <__mcmp+0x58>
   87e08:	01c00044 	movi	r7,1
   87e0c:	3805883a 	mov	r2,r7
   87e10:	f800283a 	ret
   87e14:	01ffffc4 	movi	r7,-1
   87e18:	003ff806 	br	87dfc <__mcmp+0x40>

00087e1c <__ulp>:
   87e1c:	295ffc2c 	andhi	r5,r5,32752
   87e20:	013f3034 	movhi	r4,64704
   87e24:	290b883a 	add	r5,r5,r4
   87e28:	0145c83a 	sub	r2,zero,r5
   87e2c:	1007d53a 	srai	r3,r2,20
   87e30:	000d883a 	mov	r6,zero
   87e34:	0140040e 	bge	zero,r5,87e48 <__ulp+0x2c>
   87e38:	280f883a 	mov	r7,r5
   87e3c:	3807883a 	mov	r3,r7
   87e40:	3005883a 	mov	r2,r6
   87e44:	f800283a 	ret
   87e48:	008004c4 	movi	r2,19
   87e4c:	193ffb04 	addi	r4,r3,-20
   87e50:	10c00c0e 	bge	r2,r3,87e84 <__ulp+0x68>
   87e54:	008007c4 	movi	r2,31
   87e58:	1107c83a 	sub	r3,r2,r4
   87e5c:	00800784 	movi	r2,30
   87e60:	01400044 	movi	r5,1
   87e64:	11000216 	blt	r2,r4,87e70 <__ulp+0x54>
   87e68:	00800044 	movi	r2,1
   87e6c:	10ca983a 	sll	r5,r2,r3
   87e70:	000f883a 	mov	r7,zero
   87e74:	280d883a 	mov	r6,r5
   87e78:	3807883a 	mov	r3,r7
   87e7c:	3005883a 	mov	r2,r6
   87e80:	f800283a 	ret
   87e84:	00800234 	movhi	r2,8
   87e88:	10cfd83a 	sra	r7,r2,r3
   87e8c:	000d883a 	mov	r6,zero
   87e90:	3005883a 	mov	r2,r6
   87e94:	3807883a 	mov	r3,r7
   87e98:	f800283a 	ret

00087e9c <__b2d>:
   87e9c:	20800417 	ldw	r2,16(r4)
   87ea0:	defff904 	addi	sp,sp,-28
   87ea4:	dd000415 	stw	r20,16(sp)
   87ea8:	1085883a 	add	r2,r2,r2
   87eac:	25000504 	addi	r20,r4,20
   87eb0:	1085883a 	add	r2,r2,r2
   87eb4:	dc000015 	stw	r16,0(sp)
   87eb8:	a0a1883a 	add	r16,r20,r2
   87ebc:	dd400515 	stw	r21,20(sp)
   87ec0:	857fff17 	ldw	r21,-4(r16)
   87ec4:	dc400115 	stw	r17,4(sp)
   87ec8:	dfc00615 	stw	ra,24(sp)
   87ecc:	a809883a 	mov	r4,r21
   87ed0:	2823883a 	mov	r17,r5
   87ed4:	dcc00315 	stw	r19,12(sp)
   87ed8:	dc800215 	stw	r18,8(sp)
   87edc:	0087c880 	call	87c88 <__hi0bits>
   87ee0:	100b883a 	mov	r5,r2
   87ee4:	00800804 	movi	r2,32
   87ee8:	1145c83a 	sub	r2,r2,r5
   87eec:	88800015 	stw	r2,0(r17)
   87ef0:	00800284 	movi	r2,10
   87ef4:	80ffff04 	addi	r3,r16,-4
   87ef8:	11401416 	blt	r2,r5,87f4c <__b2d+0xb0>
   87efc:	008002c4 	movi	r2,11
   87f00:	1149c83a 	sub	r4,r2,r5
   87f04:	a0c02736 	bltu	r20,r3,87fa4 <__b2d+0x108>
   87f08:	000d883a 	mov	r6,zero
   87f0c:	28800544 	addi	r2,r5,21
   87f10:	a906d83a 	srl	r3,r21,r4
   87f14:	a884983a 	sll	r2,r21,r2
   87f18:	1ccffc34 	orhi	r19,r3,16368
   87f1c:	11a4b03a 	or	r18,r2,r6
   87f20:	9005883a 	mov	r2,r18
   87f24:	9807883a 	mov	r3,r19
   87f28:	dfc00617 	ldw	ra,24(sp)
   87f2c:	dd400517 	ldw	r21,20(sp)
   87f30:	dd000417 	ldw	r20,16(sp)
   87f34:	dcc00317 	ldw	r19,12(sp)
   87f38:	dc800217 	ldw	r18,8(sp)
   87f3c:	dc400117 	ldw	r17,4(sp)
   87f40:	dc000017 	ldw	r16,0(sp)
   87f44:	dec00704 	addi	sp,sp,28
   87f48:	f800283a 	ret
   87f4c:	a0c00e36 	bltu	r20,r3,87f88 <__b2d+0xec>
   87f50:	293ffd44 	addi	r4,r5,-11
   87f54:	000d883a 	mov	r6,zero
   87f58:	20000f26 	beq	r4,zero,87f98 <__b2d+0xfc>
   87f5c:	00800804 	movi	r2,32
   87f60:	110bc83a 	sub	r5,r2,r4
   87f64:	a0c01236 	bltu	r20,r3,87fb0 <__b2d+0x114>
   87f68:	000f883a 	mov	r7,zero
   87f6c:	a904983a 	sll	r2,r21,r4
   87f70:	3146d83a 	srl	r3,r6,r5
   87f74:	3108983a 	sll	r4,r6,r4
   87f78:	108ffc34 	orhi	r2,r2,16368
   87f7c:	18a6b03a 	or	r19,r3,r2
   87f80:	3924b03a 	or	r18,r7,r4
   87f84:	003fe606 	br	87f20 <__b2d+0x84>
   87f88:	293ffd44 	addi	r4,r5,-11
   87f8c:	81bffe17 	ldw	r6,-8(r16)
   87f90:	80fffe04 	addi	r3,r16,-8
   87f94:	203ff11e 	bne	r4,zero,87f5c <__b2d+0xc0>
   87f98:	accffc34 	orhi	r19,r21,16368
   87f9c:	3025883a 	mov	r18,r6
   87fa0:	003fdf06 	br	87f20 <__b2d+0x84>
   87fa4:	18bfff17 	ldw	r2,-4(r3)
   87fa8:	110cd83a 	srl	r6,r2,r4
   87fac:	003fd706 	br	87f0c <__b2d+0x70>
   87fb0:	18bfff17 	ldw	r2,-4(r3)
   87fb4:	114ed83a 	srl	r7,r2,r5
   87fb8:	003fec06 	br	87f6c <__b2d+0xd0>

00087fbc <__ratio>:
   87fbc:	defff904 	addi	sp,sp,-28
   87fc0:	dc400215 	stw	r17,8(sp)
   87fc4:	2823883a 	mov	r17,r5
   87fc8:	d80b883a 	mov	r5,sp
   87fcc:	dfc00615 	stw	ra,24(sp)
   87fd0:	dd000515 	stw	r20,20(sp)
   87fd4:	dcc00415 	stw	r19,16(sp)
   87fd8:	dc800315 	stw	r18,12(sp)
   87fdc:	2025883a 	mov	r18,r4
   87fe0:	0087e9c0 	call	87e9c <__b2d>
   87fe4:	8809883a 	mov	r4,r17
   87fe8:	d9400104 	addi	r5,sp,4
   87fec:	1027883a 	mov	r19,r2
   87ff0:	1829883a 	mov	r20,r3
   87ff4:	0087e9c0 	call	87e9c <__b2d>
   87ff8:	89000417 	ldw	r4,16(r17)
   87ffc:	91c00417 	ldw	r7,16(r18)
   88000:	d9800117 	ldw	r6,4(sp)
   88004:	180b883a 	mov	r5,r3
   88008:	390fc83a 	sub	r7,r7,r4
   8800c:	1009883a 	mov	r4,r2
   88010:	d8800017 	ldw	r2,0(sp)
   88014:	380e917a 	slli	r7,r7,5
   88018:	2011883a 	mov	r8,r4
   8801c:	1185c83a 	sub	r2,r2,r6
   88020:	11c5883a 	add	r2,r2,r7
   88024:	1006953a 	slli	r3,r2,20
   88028:	2813883a 	mov	r9,r5
   8802c:	00800d0e 	bge	zero,r2,88064 <__ratio+0xa8>
   88030:	1d29883a 	add	r20,r3,r20
   88034:	a00b883a 	mov	r5,r20
   88038:	480f883a 	mov	r7,r9
   8803c:	9809883a 	mov	r4,r19
   88040:	400d883a 	mov	r6,r8
   88044:	00819880 	call	81988 <__divdf3>
   88048:	dfc00617 	ldw	ra,24(sp)
   8804c:	dd000517 	ldw	r20,20(sp)
   88050:	dcc00417 	ldw	r19,16(sp)
   88054:	dc800317 	ldw	r18,12(sp)
   88058:	dc400217 	ldw	r17,8(sp)
   8805c:	dec00704 	addi	sp,sp,28
   88060:	f800283a 	ret
   88064:	28d3c83a 	sub	r9,r5,r3
   88068:	003ff206 	br	88034 <__ratio+0x78>

0008806c <_mprec_log10>:
   8806c:	defffe04 	addi	sp,sp,-8
   88070:	008005c4 	movi	r2,23
   88074:	dc000015 	stw	r16,0(sp)
   88078:	dfc00115 	stw	ra,4(sp)
   8807c:	2021883a 	mov	r16,r4
   88080:	11000c16 	blt	r2,r4,880b4 <_mprec_log10+0x48>
   88084:	200490fa 	slli	r2,r4,3
   88088:	00c00274 	movhi	r3,9
   8808c:	18f97504 	addi	r3,r3,-6700
   88090:	10c5883a 	add	r2,r2,r3
   88094:	12400117 	ldw	r9,4(r2)
   88098:	12000017 	ldw	r8,0(r2)
   8809c:	4807883a 	mov	r3,r9
   880a0:	4005883a 	mov	r2,r8
   880a4:	dfc00117 	ldw	ra,4(sp)
   880a8:	dc000017 	ldw	r16,0(sp)
   880ac:	dec00204 	addi	sp,sp,8
   880b0:	f800283a 	ret
   880b4:	0011883a 	mov	r8,zero
   880b8:	024ffc34 	movhi	r9,16368
   880bc:	0005883a 	mov	r2,zero
   880c0:	00d00934 	movhi	r3,16420
   880c4:	480b883a 	mov	r5,r9
   880c8:	4009883a 	mov	r4,r8
   880cc:	180f883a 	mov	r7,r3
   880d0:	100d883a 	mov	r6,r2
   880d4:	00815c40 	call	815c4 <__muldf3>
   880d8:	843fffc4 	addi	r16,r16,-1
   880dc:	1011883a 	mov	r8,r2
   880e0:	1813883a 	mov	r9,r3
   880e4:	803ff51e 	bne	r16,zero,880bc <_mprec_log10+0x50>
   880e8:	4005883a 	mov	r2,r8
   880ec:	4807883a 	mov	r3,r9
   880f0:	dfc00117 	ldw	ra,4(sp)
   880f4:	dc000017 	ldw	r16,0(sp)
   880f8:	dec00204 	addi	sp,sp,8
   880fc:	f800283a 	ret

00088100 <__copybits>:
   88100:	297fffc4 	addi	r5,r5,-1
   88104:	30800417 	ldw	r2,16(r6)
   88108:	280bd17a 	srai	r5,r5,5
   8810c:	31800504 	addi	r6,r6,20
   88110:	1085883a 	add	r2,r2,r2
   88114:	294b883a 	add	r5,r5,r5
   88118:	294b883a 	add	r5,r5,r5
   8811c:	1085883a 	add	r2,r2,r2
   88120:	290b883a 	add	r5,r5,r4
   88124:	3087883a 	add	r3,r6,r2
   88128:	29400104 	addi	r5,r5,4
   8812c:	30c0052e 	bgeu	r6,r3,88144 <__copybits+0x44>
   88130:	30800017 	ldw	r2,0(r6)
   88134:	31800104 	addi	r6,r6,4
   88138:	20800015 	stw	r2,0(r4)
   8813c:	21000104 	addi	r4,r4,4
   88140:	30fffb36 	bltu	r6,r3,88130 <__copybits+0x30>
   88144:	2140032e 	bgeu	r4,r5,88154 <__copybits+0x54>
   88148:	20000015 	stw	zero,0(r4)
   8814c:	21000104 	addi	r4,r4,4
   88150:	217ffd36 	bltu	r4,r5,88148 <__copybits+0x48>
   88154:	f800283a 	ret

00088158 <__any_on>:
   88158:	20800417 	ldw	r2,16(r4)
   8815c:	2807d17a 	srai	r3,r5,5
   88160:	21000504 	addi	r4,r4,20
   88164:	10c00d0e 	bge	r2,r3,8819c <__any_on+0x44>
   88168:	1085883a 	add	r2,r2,r2
   8816c:	1085883a 	add	r2,r2,r2
   88170:	208d883a 	add	r6,r4,r2
   88174:	2180182e 	bgeu	r4,r6,881d8 <__any_on+0x80>
   88178:	30bfff17 	ldw	r2,-4(r6)
   8817c:	30ffff04 	addi	r3,r6,-4
   88180:	1000041e 	bne	r2,zero,88194 <__any_on+0x3c>
   88184:	20c0142e 	bgeu	r4,r3,881d8 <__any_on+0x80>
   88188:	18ffff04 	addi	r3,r3,-4
   8818c:	18800017 	ldw	r2,0(r3)
   88190:	103ffc26 	beq	r2,zero,88184 <__any_on+0x2c>
   88194:	00800044 	movi	r2,1
   88198:	f800283a 	ret
   8819c:	18800a0e 	bge	r3,r2,881c8 <__any_on+0x70>
   881a0:	294007cc 	andi	r5,r5,31
   881a4:	28000826 	beq	r5,zero,881c8 <__any_on+0x70>
   881a8:	18c5883a 	add	r2,r3,r3
   881ac:	1085883a 	add	r2,r2,r2
   881b0:	208d883a 	add	r6,r4,r2
   881b4:	30c00017 	ldw	r3,0(r6)
   881b8:	1944d83a 	srl	r2,r3,r5
   881bc:	1144983a 	sll	r2,r2,r5
   881c0:	18bff41e 	bne	r3,r2,88194 <__any_on+0x3c>
   881c4:	003feb06 	br	88174 <__any_on+0x1c>
   881c8:	18c5883a 	add	r2,r3,r3
   881cc:	1085883a 	add	r2,r2,r2
   881d0:	208d883a 	add	r6,r4,r2
   881d4:	003fe706 	br	88174 <__any_on+0x1c>
   881d8:	0005883a 	mov	r2,zero
   881dc:	f800283a 	ret

000881e0 <_Balloc>:
   881e0:	20c01317 	ldw	r3,76(r4)
   881e4:	defffb04 	addi	sp,sp,-20
   881e8:	dcc00315 	stw	r19,12(sp)
   881ec:	dc800215 	stw	r18,8(sp)
   881f0:	dfc00415 	stw	ra,16(sp)
   881f4:	2825883a 	mov	r18,r5
   881f8:	dc400115 	stw	r17,4(sp)
   881fc:	dc000015 	stw	r16,0(sp)
   88200:	2027883a 	mov	r19,r4
   88204:	01800404 	movi	r6,16
   88208:	01400104 	movi	r5,4
   8820c:	18001726 	beq	r3,zero,8826c <_Balloc+0x8c>
   88210:	01400044 	movi	r5,1
   88214:	9485883a 	add	r2,r18,r18
   88218:	2ca2983a 	sll	r17,r5,r18
   8821c:	1085883a 	add	r2,r2,r2
   88220:	10c7883a 	add	r3,r2,r3
   88224:	1c000017 	ldw	r16,0(r3)
   88228:	8c4d883a 	add	r6,r17,r17
   8822c:	318d883a 	add	r6,r6,r6
   88230:	9809883a 	mov	r4,r19
   88234:	31800504 	addi	r6,r6,20
   88238:	80001226 	beq	r16,zero,88284 <_Balloc+0xa4>
   8823c:	80800017 	ldw	r2,0(r16)
   88240:	18800015 	stw	r2,0(r3)
   88244:	80000415 	stw	zero,16(r16)
   88248:	80000315 	stw	zero,12(r16)
   8824c:	8005883a 	mov	r2,r16
   88250:	dfc00417 	ldw	ra,16(sp)
   88254:	dcc00317 	ldw	r19,12(sp)
   88258:	dc800217 	ldw	r18,8(sp)
   8825c:	dc400117 	ldw	r17,4(sp)
   88260:	dc000017 	ldw	r16,0(sp)
   88264:	dec00504 	addi	sp,sp,20
   88268:	f800283a 	ret
   8826c:	00899080 	call	89908 <_calloc_r>
   88270:	1007883a 	mov	r3,r2
   88274:	0021883a 	mov	r16,zero
   88278:	98801315 	stw	r2,76(r19)
   8827c:	103fe41e 	bne	r2,zero,88210 <_Balloc+0x30>
   88280:	003ff206 	br	8824c <_Balloc+0x6c>
   88284:	00899080 	call	89908 <_calloc_r>
   88288:	103ff026 	beq	r2,zero,8824c <_Balloc+0x6c>
   8828c:	1021883a 	mov	r16,r2
   88290:	14800115 	stw	r18,4(r2)
   88294:	14400215 	stw	r17,8(r2)
   88298:	003fea06 	br	88244 <_Balloc+0x64>

0008829c <__d2b>:
   8829c:	defff504 	addi	sp,sp,-44
   882a0:	dcc00515 	stw	r19,20(sp)
   882a4:	04c00044 	movi	r19,1
   882a8:	dc000215 	stw	r16,8(sp)
   882ac:	2821883a 	mov	r16,r5
   882b0:	980b883a 	mov	r5,r19
   882b4:	ddc00915 	stw	r23,36(sp)
   882b8:	dd800815 	stw	r22,32(sp)
   882bc:	dd400715 	stw	r21,28(sp)
   882c0:	dd000615 	stw	r20,24(sp)
   882c4:	dc800415 	stw	r18,16(sp)
   882c8:	dc400315 	stw	r17,12(sp)
   882cc:	dfc00a15 	stw	ra,40(sp)
   882d0:	3023883a 	mov	r17,r6
   882d4:	382d883a 	mov	r22,r7
   882d8:	ddc00b17 	ldw	r23,44(sp)
   882dc:	00881e00 	call	881e0 <_Balloc>
   882e0:	1025883a 	mov	r18,r2
   882e4:	00a00034 	movhi	r2,32768
   882e8:	10bfffc4 	addi	r2,r2,-1
   882ec:	8888703a 	and	r4,r17,r2
   882f0:	202ad53a 	srli	r21,r4,20
   882f4:	00800434 	movhi	r2,16
   882f8:	10bfffc4 	addi	r2,r2,-1
   882fc:	8886703a 	and	r3,r17,r2
   88300:	a829003a 	cmpeq	r20,r21,zero
   88304:	800b883a 	mov	r5,r16
   88308:	d8c00115 	stw	r3,4(sp)
   8830c:	94000504 	addi	r16,r18,20
   88310:	a000021e 	bne	r20,zero,8831c <__d2b+0x80>
   88314:	18c00434 	orhi	r3,r3,16
   88318:	d8c00115 	stw	r3,4(sp)
   8831c:	28002726 	beq	r5,zero,883bc <__d2b+0x120>
   88320:	d809883a 	mov	r4,sp
   88324:	d9400015 	stw	r5,0(sp)
   88328:	0087cf80 	call	87cf8 <__lo0bits>
   8832c:	100d883a 	mov	r6,r2
   88330:	10003526 	beq	r2,zero,88408 <__d2b+0x16c>
   88334:	d8c00117 	ldw	r3,4(sp)
   88338:	00800804 	movi	r2,32
   8833c:	1185c83a 	sub	r2,r2,r6
   88340:	d9000017 	ldw	r4,0(sp)
   88344:	1886983a 	sll	r3,r3,r2
   88348:	1906b03a 	or	r3,r3,r4
   8834c:	90c00515 	stw	r3,20(r18)
   88350:	d8c00117 	ldw	r3,4(sp)
   88354:	1986d83a 	srl	r3,r3,r6
   88358:	d8c00115 	stw	r3,4(sp)
   8835c:	180b003a 	cmpeq	r5,r3,zero
   88360:	00800084 	movi	r2,2
   88364:	114bc83a 	sub	r5,r2,r5
   88368:	80c00115 	stw	r3,4(r16)
   8836c:	91400415 	stw	r5,16(r18)
   88370:	a0001a1e 	bne	r20,zero,883dc <__d2b+0x140>
   88374:	3545883a 	add	r2,r6,r21
   88378:	10bef344 	addi	r2,r2,-1075
   8837c:	00c00d44 	movi	r3,53
   88380:	b0800015 	stw	r2,0(r22)
   88384:	1987c83a 	sub	r3,r3,r6
   88388:	b8c00015 	stw	r3,0(r23)
   8838c:	9005883a 	mov	r2,r18
   88390:	dfc00a17 	ldw	ra,40(sp)
   88394:	ddc00917 	ldw	r23,36(sp)
   88398:	dd800817 	ldw	r22,32(sp)
   8839c:	dd400717 	ldw	r21,28(sp)
   883a0:	dd000617 	ldw	r20,24(sp)
   883a4:	dcc00517 	ldw	r19,20(sp)
   883a8:	dc800417 	ldw	r18,16(sp)
   883ac:	dc400317 	ldw	r17,12(sp)
   883b0:	dc000217 	ldw	r16,8(sp)
   883b4:	dec00b04 	addi	sp,sp,44
   883b8:	f800283a 	ret
   883bc:	d9000104 	addi	r4,sp,4
   883c0:	0087cf80 	call	87cf8 <__lo0bits>
   883c4:	11800804 	addi	r6,r2,32
   883c8:	d8800117 	ldw	r2,4(sp)
   883cc:	94c00415 	stw	r19,16(r18)
   883d0:	980b883a 	mov	r5,r19
   883d4:	90800515 	stw	r2,20(r18)
   883d8:	a03fe626 	beq	r20,zero,88374 <__d2b+0xd8>
   883dc:	2945883a 	add	r2,r5,r5
   883e0:	1085883a 	add	r2,r2,r2
   883e4:	1405883a 	add	r2,r2,r16
   883e8:	113fff17 	ldw	r4,-4(r2)
   883ec:	30fef384 	addi	r3,r6,-1074
   883f0:	2820917a 	slli	r16,r5,5
   883f4:	b0c00015 	stw	r3,0(r22)
   883f8:	0087c880 	call	87c88 <__hi0bits>
   883fc:	80a1c83a 	sub	r16,r16,r2
   88400:	bc000015 	stw	r16,0(r23)
   88404:	003fe106 	br	8838c <__d2b+0xf0>
   88408:	d8800017 	ldw	r2,0(sp)
   8840c:	90800515 	stw	r2,20(r18)
   88410:	d8c00117 	ldw	r3,4(sp)
   88414:	003fd106 	br	8835c <__d2b+0xc0>

00088418 <__mdiff>:
   88418:	defffb04 	addi	sp,sp,-20
   8841c:	dc000015 	stw	r16,0(sp)
   88420:	2821883a 	mov	r16,r5
   88424:	dc800215 	stw	r18,8(sp)
   88428:	300b883a 	mov	r5,r6
   8842c:	2025883a 	mov	r18,r4
   88430:	8009883a 	mov	r4,r16
   88434:	dc400115 	stw	r17,4(sp)
   88438:	dfc00415 	stw	ra,16(sp)
   8843c:	dcc00315 	stw	r19,12(sp)
   88440:	3023883a 	mov	r17,r6
   88444:	0087dbc0 	call	87dbc <__mcmp>
   88448:	10004226 	beq	r2,zero,88554 <__mdiff+0x13c>
   8844c:	10005016 	blt	r2,zero,88590 <__mdiff+0x178>
   88450:	0027883a 	mov	r19,zero
   88454:	81400117 	ldw	r5,4(r16)
   88458:	9009883a 	mov	r4,r18
   8845c:	00881e00 	call	881e0 <_Balloc>
   88460:	1019883a 	mov	r12,r2
   88464:	82800417 	ldw	r10,16(r16)
   88468:	88800417 	ldw	r2,16(r17)
   8846c:	81800504 	addi	r6,r16,20
   88470:	5287883a 	add	r3,r10,r10
   88474:	1085883a 	add	r2,r2,r2
   88478:	18c7883a 	add	r3,r3,r3
   8847c:	1085883a 	add	r2,r2,r2
   88480:	8a000504 	addi	r8,r17,20
   88484:	64c00315 	stw	r19,12(r12)
   88488:	30db883a 	add	r13,r6,r3
   8848c:	4097883a 	add	r11,r8,r2
   88490:	61c00504 	addi	r7,r12,20
   88494:	0013883a 	mov	r9,zero
   88498:	31000017 	ldw	r4,0(r6)
   8849c:	41400017 	ldw	r5,0(r8)
   884a0:	42000104 	addi	r8,r8,4
   884a4:	20bfffcc 	andi	r2,r4,65535
   884a8:	28ffffcc 	andi	r3,r5,65535
   884ac:	10c5c83a 	sub	r2,r2,r3
   884b0:	1245883a 	add	r2,r2,r9
   884b4:	2008d43a 	srli	r4,r4,16
   884b8:	280ad43a 	srli	r5,r5,16
   884bc:	1007d43a 	srai	r3,r2,16
   884c0:	3880000d 	sth	r2,0(r7)
   884c4:	2149c83a 	sub	r4,r4,r5
   884c8:	20c9883a 	add	r4,r4,r3
   884cc:	3900008d 	sth	r4,2(r7)
   884d0:	31800104 	addi	r6,r6,4
   884d4:	39c00104 	addi	r7,r7,4
   884d8:	2013d43a 	srai	r9,r4,16
   884dc:	42ffee36 	bltu	r8,r11,88498 <__mdiff+0x80>
   884e0:	33400c2e 	bgeu	r6,r13,88514 <__mdiff+0xfc>
   884e4:	30800017 	ldw	r2,0(r6)
   884e8:	31800104 	addi	r6,r6,4
   884ec:	10ffffcc 	andi	r3,r2,65535
   884f0:	1a47883a 	add	r3,r3,r9
   884f4:	1004d43a 	srli	r2,r2,16
   884f8:	1809d43a 	srai	r4,r3,16
   884fc:	38c0000d 	sth	r3,0(r7)
   88500:	1105883a 	add	r2,r2,r4
   88504:	3880008d 	sth	r2,2(r7)
   88508:	1013d43a 	srai	r9,r2,16
   8850c:	39c00104 	addi	r7,r7,4
   88510:	337ff436 	bltu	r6,r13,884e4 <__mdiff+0xcc>
   88514:	38bfff17 	ldw	r2,-4(r7)
   88518:	38ffff04 	addi	r3,r7,-4
   8851c:	1000041e 	bne	r2,zero,88530 <__mdiff+0x118>
   88520:	18ffff04 	addi	r3,r3,-4
   88524:	18800017 	ldw	r2,0(r3)
   88528:	52bfffc4 	addi	r10,r10,-1
   8852c:	103ffc26 	beq	r2,zero,88520 <__mdiff+0x108>
   88530:	6005883a 	mov	r2,r12
   88534:	62800415 	stw	r10,16(r12)
   88538:	dfc00417 	ldw	ra,16(sp)
   8853c:	dcc00317 	ldw	r19,12(sp)
   88540:	dc800217 	ldw	r18,8(sp)
   88544:	dc400117 	ldw	r17,4(sp)
   88548:	dc000017 	ldw	r16,0(sp)
   8854c:	dec00504 	addi	sp,sp,20
   88550:	f800283a 	ret
   88554:	9009883a 	mov	r4,r18
   88558:	000b883a 	mov	r5,zero
   8855c:	00881e00 	call	881e0 <_Balloc>
   88560:	1019883a 	mov	r12,r2
   88564:	00800044 	movi	r2,1
   88568:	60800415 	stw	r2,16(r12)
   8856c:	6005883a 	mov	r2,r12
   88570:	60000515 	stw	zero,20(r12)
   88574:	dfc00417 	ldw	ra,16(sp)
   88578:	dcc00317 	ldw	r19,12(sp)
   8857c:	dc800217 	ldw	r18,8(sp)
   88580:	dc400117 	ldw	r17,4(sp)
   88584:	dc000017 	ldw	r16,0(sp)
   88588:	dec00504 	addi	sp,sp,20
   8858c:	f800283a 	ret
   88590:	880d883a 	mov	r6,r17
   88594:	04c00044 	movi	r19,1
   88598:	8023883a 	mov	r17,r16
   8859c:	3021883a 	mov	r16,r6
   885a0:	003fac06 	br	88454 <__mdiff+0x3c>

000885a4 <__lshift>:
   885a4:	defff904 	addi	sp,sp,-28
   885a8:	28800417 	ldw	r2,16(r5)
   885ac:	dc000015 	stw	r16,0(sp)
   885b0:	3021d17a 	srai	r16,r6,5
   885b4:	28c00217 	ldw	r3,8(r5)
   885b8:	10800044 	addi	r2,r2,1
   885bc:	dc400115 	stw	r17,4(sp)
   885c0:	80a3883a 	add	r17,r16,r2
   885c4:	dd400515 	stw	r21,20(sp)
   885c8:	dd000415 	stw	r20,16(sp)
   885cc:	dc800215 	stw	r18,8(sp)
   885d0:	dfc00615 	stw	ra,24(sp)
   885d4:	2825883a 	mov	r18,r5
   885d8:	dcc00315 	stw	r19,12(sp)
   885dc:	3029883a 	mov	r20,r6
   885e0:	202b883a 	mov	r21,r4
   885e4:	29400117 	ldw	r5,4(r5)
   885e8:	1c40030e 	bge	r3,r17,885f8 <__lshift+0x54>
   885ec:	18c7883a 	add	r3,r3,r3
   885f0:	29400044 	addi	r5,r5,1
   885f4:	1c7ffd16 	blt	r3,r17,885ec <__lshift+0x48>
   885f8:	a809883a 	mov	r4,r21
   885fc:	00881e00 	call	881e0 <_Balloc>
   88600:	1027883a 	mov	r19,r2
   88604:	11400504 	addi	r5,r2,20
   88608:	0400090e 	bge	zero,r16,88630 <__lshift+0x8c>
   8860c:	2805883a 	mov	r2,r5
   88610:	0007883a 	mov	r3,zero
   88614:	18c00044 	addi	r3,r3,1
   88618:	10000015 	stw	zero,0(r2)
   8861c:	10800104 	addi	r2,r2,4
   88620:	80fffc1e 	bne	r16,r3,88614 <__lshift+0x70>
   88624:	8405883a 	add	r2,r16,r16
   88628:	1085883a 	add	r2,r2,r2
   8862c:	288b883a 	add	r5,r5,r2
   88630:	90800417 	ldw	r2,16(r18)
   88634:	91000504 	addi	r4,r18,20
   88638:	a18007cc 	andi	r6,r20,31
   8863c:	1085883a 	add	r2,r2,r2
   88640:	1085883a 	add	r2,r2,r2
   88644:	208f883a 	add	r7,r4,r2
   88648:	30001e26 	beq	r6,zero,886c4 <__lshift+0x120>
   8864c:	00800804 	movi	r2,32
   88650:	1191c83a 	sub	r8,r2,r6
   88654:	0007883a 	mov	r3,zero
   88658:	20800017 	ldw	r2,0(r4)
   8865c:	1184983a 	sll	r2,r2,r6
   88660:	1884b03a 	or	r2,r3,r2
   88664:	28800015 	stw	r2,0(r5)
   88668:	20c00017 	ldw	r3,0(r4)
   8866c:	21000104 	addi	r4,r4,4
   88670:	29400104 	addi	r5,r5,4
   88674:	1a06d83a 	srl	r3,r3,r8
   88678:	21fff736 	bltu	r4,r7,88658 <__lshift+0xb4>
   8867c:	28c00015 	stw	r3,0(r5)
   88680:	18000126 	beq	r3,zero,88688 <__lshift+0xe4>
   88684:	8c400044 	addi	r17,r17,1
   88688:	88bfffc4 	addi	r2,r17,-1
   8868c:	98800415 	stw	r2,16(r19)
   88690:	a809883a 	mov	r4,r21
   88694:	900b883a 	mov	r5,r18
   88698:	0087c600 	call	87c60 <_Bfree>
   8869c:	9805883a 	mov	r2,r19
   886a0:	dfc00617 	ldw	ra,24(sp)
   886a4:	dd400517 	ldw	r21,20(sp)
   886a8:	dd000417 	ldw	r20,16(sp)
   886ac:	dcc00317 	ldw	r19,12(sp)
   886b0:	dc800217 	ldw	r18,8(sp)
   886b4:	dc400117 	ldw	r17,4(sp)
   886b8:	dc000017 	ldw	r16,0(sp)
   886bc:	dec00704 	addi	sp,sp,28
   886c0:	f800283a 	ret
   886c4:	20800017 	ldw	r2,0(r4)
   886c8:	21000104 	addi	r4,r4,4
   886cc:	28800015 	stw	r2,0(r5)
   886d0:	29400104 	addi	r5,r5,4
   886d4:	21ffec2e 	bgeu	r4,r7,88688 <__lshift+0xe4>
   886d8:	20800017 	ldw	r2,0(r4)
   886dc:	21000104 	addi	r4,r4,4
   886e0:	28800015 	stw	r2,0(r5)
   886e4:	29400104 	addi	r5,r5,4
   886e8:	21fff636 	bltu	r4,r7,886c4 <__lshift+0x120>
   886ec:	003fe606 	br	88688 <__lshift+0xe4>

000886f0 <__multiply>:
   886f0:	defff004 	addi	sp,sp,-64
   886f4:	dc800815 	stw	r18,32(sp)
   886f8:	dc400715 	stw	r17,28(sp)
   886fc:	2c800417 	ldw	r18,16(r5)
   88700:	34400417 	ldw	r17,16(r6)
   88704:	dcc00915 	stw	r19,36(sp)
   88708:	dc000615 	stw	r16,24(sp)
   8870c:	dfc00f15 	stw	ra,60(sp)
   88710:	df000e15 	stw	fp,56(sp)
   88714:	ddc00d15 	stw	r23,52(sp)
   88718:	dd800c15 	stw	r22,48(sp)
   8871c:	dd400b15 	stw	r21,44(sp)
   88720:	dd000a15 	stw	r20,40(sp)
   88724:	2821883a 	mov	r16,r5
   88728:	3027883a 	mov	r19,r6
   8872c:	9440040e 	bge	r18,r17,88740 <__multiply+0x50>
   88730:	8825883a 	mov	r18,r17
   88734:	2c400417 	ldw	r17,16(r5)
   88738:	2827883a 	mov	r19,r5
   8873c:	3021883a 	mov	r16,r6
   88740:	80800217 	ldw	r2,8(r16)
   88744:	9447883a 	add	r3,r18,r17
   88748:	d8c00415 	stw	r3,16(sp)
   8874c:	81400117 	ldw	r5,4(r16)
   88750:	10c0010e 	bge	r2,r3,88758 <__multiply+0x68>
   88754:	29400044 	addi	r5,r5,1
   88758:	00881e00 	call	881e0 <_Balloc>
   8875c:	d8800515 	stw	r2,20(sp)
   88760:	d9000417 	ldw	r4,16(sp)
   88764:	d8c00517 	ldw	r3,20(sp)
   88768:	2105883a 	add	r2,r4,r4
   8876c:	1085883a 	add	r2,r2,r2
   88770:	19000504 	addi	r4,r3,20
   88774:	2085883a 	add	r2,r4,r2
   88778:	d8800315 	stw	r2,12(sp)
   8877c:	2080052e 	bgeu	r4,r2,88794 <__multiply+0xa4>
   88780:	2005883a 	mov	r2,r4
   88784:	d8c00317 	ldw	r3,12(sp)
   88788:	10000015 	stw	zero,0(r2)
   8878c:	10800104 	addi	r2,r2,4
   88790:	10fffc36 	bltu	r2,r3,88784 <__multiply+0x94>
   88794:	8c45883a 	add	r2,r17,r17
   88798:	9487883a 	add	r3,r18,r18
   8879c:	9dc00504 	addi	r23,r19,20
   887a0:	1085883a 	add	r2,r2,r2
   887a4:	84000504 	addi	r16,r16,20
   887a8:	18c7883a 	add	r3,r3,r3
   887ac:	b885883a 	add	r2,r23,r2
   887b0:	dc000015 	stw	r16,0(sp)
   887b4:	d8800215 	stw	r2,8(sp)
   887b8:	80f9883a 	add	fp,r16,r3
   887bc:	b880432e 	bgeu	r23,r2,888cc <__multiply+0x1dc>
   887c0:	d9000115 	stw	r4,4(sp)
   887c4:	b9000017 	ldw	r4,0(r23)
   887c8:	253fffcc 	andi	r20,r4,65535
   887cc:	a0001a26 	beq	r20,zero,88838 <__multiply+0x148>
   887d0:	dcc00017 	ldw	r19,0(sp)
   887d4:	dc800117 	ldw	r18,4(sp)
   887d8:	002b883a 	mov	r21,zero
   887dc:	9c400017 	ldw	r17,0(r19)
   887e0:	94000017 	ldw	r16,0(r18)
   887e4:	a009883a 	mov	r4,r20
   887e8:	897fffcc 	andi	r5,r17,65535
   887ec:	00824b00 	call	824b0 <__mulsi3>
   887f0:	880ad43a 	srli	r5,r17,16
   887f4:	80ffffcc 	andi	r3,r16,65535
   887f8:	a8c7883a 	add	r3,r21,r3
   887fc:	a009883a 	mov	r4,r20
   88800:	10e3883a 	add	r17,r2,r3
   88804:	8020d43a 	srli	r16,r16,16
   88808:	00824b00 	call	824b0 <__mulsi3>
   8880c:	8806d43a 	srli	r3,r17,16
   88810:	1405883a 	add	r2,r2,r16
   88814:	9cc00104 	addi	r19,r19,4
   88818:	1887883a 	add	r3,r3,r2
   8881c:	90c0008d 	sth	r3,2(r18)
   88820:	9440000d 	sth	r17,0(r18)
   88824:	182ad43a 	srli	r21,r3,16
   88828:	94800104 	addi	r18,r18,4
   8882c:	9f3feb36 	bltu	r19,fp,887dc <__multiply+0xec>
   88830:	95400015 	stw	r21,0(r18)
   88834:	b9000017 	ldw	r4,0(r23)
   88838:	202ad43a 	srli	r21,r4,16
   8883c:	a8001c26 	beq	r21,zero,888b0 <__multiply+0x1c0>
   88840:	d9000117 	ldw	r4,4(sp)
   88844:	dd000017 	ldw	r20,0(sp)
   88848:	002d883a 	mov	r22,zero
   8884c:	24c00017 	ldw	r19,0(r4)
   88850:	2025883a 	mov	r18,r4
   88854:	9823883a 	mov	r17,r19
   88858:	a4000017 	ldw	r16,0(r20)
   8885c:	a809883a 	mov	r4,r21
   88860:	a5000104 	addi	r20,r20,4
   88864:	817fffcc 	andi	r5,r16,65535
   88868:	00824b00 	call	824b0 <__mulsi3>
   8886c:	8806d43a 	srli	r3,r17,16
   88870:	800ad43a 	srli	r5,r16,16
   88874:	94c0000d 	sth	r19,0(r18)
   88878:	b0c7883a 	add	r3,r22,r3
   8887c:	10e1883a 	add	r16,r2,r3
   88880:	9400008d 	sth	r16,2(r18)
   88884:	a809883a 	mov	r4,r21
   88888:	94800104 	addi	r18,r18,4
   8888c:	00824b00 	call	824b0 <__mulsi3>
   88890:	94400017 	ldw	r17,0(r18)
   88894:	8020d43a 	srli	r16,r16,16
   88898:	88ffffcc 	andi	r3,r17,65535
   8889c:	10c5883a 	add	r2,r2,r3
   888a0:	80a7883a 	add	r19,r16,r2
   888a4:	982cd43a 	srli	r22,r19,16
   888a8:	a73feb36 	bltu	r20,fp,88858 <__multiply+0x168>
   888ac:	94c00015 	stw	r19,0(r18)
   888b0:	d8800217 	ldw	r2,8(sp)
   888b4:	bdc00104 	addi	r23,r23,4
   888b8:	b880042e 	bgeu	r23,r2,888cc <__multiply+0x1dc>
   888bc:	d8c00117 	ldw	r3,4(sp)
   888c0:	18c00104 	addi	r3,r3,4
   888c4:	d8c00115 	stw	r3,4(sp)
   888c8:	003fbe06 	br	887c4 <__multiply+0xd4>
   888cc:	d9000417 	ldw	r4,16(sp)
   888d0:	01000c0e 	bge	zero,r4,88904 <__multiply+0x214>
   888d4:	d8c00317 	ldw	r3,12(sp)
   888d8:	18bfff17 	ldw	r2,-4(r3)
   888dc:	18ffff04 	addi	r3,r3,-4
   888e0:	10000326 	beq	r2,zero,888f0 <__multiply+0x200>
   888e4:	00000706 	br	88904 <__multiply+0x214>
   888e8:	18800017 	ldw	r2,0(r3)
   888ec:	1000051e 	bne	r2,zero,88904 <__multiply+0x214>
   888f0:	d9000417 	ldw	r4,16(sp)
   888f4:	18ffff04 	addi	r3,r3,-4
   888f8:	213fffc4 	addi	r4,r4,-1
   888fc:	d9000415 	stw	r4,16(sp)
   88900:	203ff91e 	bne	r4,zero,888e8 <__multiply+0x1f8>
   88904:	d8800417 	ldw	r2,16(sp)
   88908:	d8c00517 	ldw	r3,20(sp)
   8890c:	18800415 	stw	r2,16(r3)
   88910:	1805883a 	mov	r2,r3
   88914:	dfc00f17 	ldw	ra,60(sp)
   88918:	df000e17 	ldw	fp,56(sp)
   8891c:	ddc00d17 	ldw	r23,52(sp)
   88920:	dd800c17 	ldw	r22,48(sp)
   88924:	dd400b17 	ldw	r21,44(sp)
   88928:	dd000a17 	ldw	r20,40(sp)
   8892c:	dcc00917 	ldw	r19,36(sp)
   88930:	dc800817 	ldw	r18,32(sp)
   88934:	dc400717 	ldw	r17,28(sp)
   88938:	dc000617 	ldw	r16,24(sp)
   8893c:	dec01004 	addi	sp,sp,64
   88940:	f800283a 	ret

00088944 <__i2b>:
   88944:	defffd04 	addi	sp,sp,-12
   88948:	dc000015 	stw	r16,0(sp)
   8894c:	04000044 	movi	r16,1
   88950:	dc800115 	stw	r18,4(sp)
   88954:	2825883a 	mov	r18,r5
   88958:	800b883a 	mov	r5,r16
   8895c:	dfc00215 	stw	ra,8(sp)
   88960:	00881e00 	call	881e0 <_Balloc>
   88964:	14000415 	stw	r16,16(r2)
   88968:	14800515 	stw	r18,20(r2)
   8896c:	dfc00217 	ldw	ra,8(sp)
   88970:	dc800117 	ldw	r18,4(sp)
   88974:	dc000017 	ldw	r16,0(sp)
   88978:	dec00304 	addi	sp,sp,12
   8897c:	f800283a 	ret

00088980 <__multadd>:
   88980:	defff604 	addi	sp,sp,-40
   88984:	dd800615 	stw	r22,24(sp)
   88988:	2d800417 	ldw	r22,16(r5)
   8898c:	df000815 	stw	fp,32(sp)
   88990:	ddc00715 	stw	r23,28(sp)
   88994:	dd400515 	stw	r21,20(sp)
   88998:	dd000415 	stw	r20,16(sp)
   8899c:	dcc00315 	stw	r19,12(sp)
   889a0:	dc800215 	stw	r18,8(sp)
   889a4:	dfc00915 	stw	ra,36(sp)
   889a8:	dc400115 	stw	r17,4(sp)
   889ac:	dc000015 	stw	r16,0(sp)
   889b0:	282f883a 	mov	r23,r5
   889b4:	2039883a 	mov	fp,r4
   889b8:	302b883a 	mov	r21,r6
   889bc:	3829883a 	mov	r20,r7
   889c0:	2c800504 	addi	r18,r5,20
   889c4:	0027883a 	mov	r19,zero
   889c8:	94400017 	ldw	r17,0(r18)
   889cc:	a80b883a 	mov	r5,r21
   889d0:	9cc00044 	addi	r19,r19,1
   889d4:	893fffcc 	andi	r4,r17,65535
   889d8:	00824b00 	call	824b0 <__mulsi3>
   889dc:	8808d43a 	srli	r4,r17,16
   889e0:	1521883a 	add	r16,r2,r20
   889e4:	a80b883a 	mov	r5,r21
   889e8:	00824b00 	call	824b0 <__mulsi3>
   889ec:	8008d43a 	srli	r4,r16,16
   889f0:	843fffcc 	andi	r16,r16,65535
   889f4:	1105883a 	add	r2,r2,r4
   889f8:	1006943a 	slli	r3,r2,16
   889fc:	1028d43a 	srli	r20,r2,16
   88a00:	1c07883a 	add	r3,r3,r16
   88a04:	90c00015 	stw	r3,0(r18)
   88a08:	94800104 	addi	r18,r18,4
   88a0c:	9dbfee16 	blt	r19,r22,889c8 <__multadd+0x48>
   88a10:	a0000826 	beq	r20,zero,88a34 <__multadd+0xb4>
   88a14:	b8800217 	ldw	r2,8(r23)
   88a18:	b080130e 	bge	r22,r2,88a68 <__multadd+0xe8>
   88a1c:	b585883a 	add	r2,r22,r22
   88a20:	1085883a 	add	r2,r2,r2
   88a24:	15c5883a 	add	r2,r2,r23
   88a28:	b0c00044 	addi	r3,r22,1
   88a2c:	15000515 	stw	r20,20(r2)
   88a30:	b8c00415 	stw	r3,16(r23)
   88a34:	b805883a 	mov	r2,r23
   88a38:	dfc00917 	ldw	ra,36(sp)
   88a3c:	df000817 	ldw	fp,32(sp)
   88a40:	ddc00717 	ldw	r23,28(sp)
   88a44:	dd800617 	ldw	r22,24(sp)
   88a48:	dd400517 	ldw	r21,20(sp)
   88a4c:	dd000417 	ldw	r20,16(sp)
   88a50:	dcc00317 	ldw	r19,12(sp)
   88a54:	dc800217 	ldw	r18,8(sp)
   88a58:	dc400117 	ldw	r17,4(sp)
   88a5c:	dc000017 	ldw	r16,0(sp)
   88a60:	dec00a04 	addi	sp,sp,40
   88a64:	f800283a 	ret
   88a68:	b9400117 	ldw	r5,4(r23)
   88a6c:	e009883a 	mov	r4,fp
   88a70:	29400044 	addi	r5,r5,1
   88a74:	00881e00 	call	881e0 <_Balloc>
   88a78:	b9800417 	ldw	r6,16(r23)
   88a7c:	b9400304 	addi	r5,r23,12
   88a80:	11000304 	addi	r4,r2,12
   88a84:	318d883a 	add	r6,r6,r6
   88a88:	318d883a 	add	r6,r6,r6
   88a8c:	31800204 	addi	r6,r6,8
   88a90:	1023883a 	mov	r17,r2
   88a94:	0087a480 	call	87a48 <memcpy>
   88a98:	b80b883a 	mov	r5,r23
   88a9c:	e009883a 	mov	r4,fp
   88aa0:	0087c600 	call	87c60 <_Bfree>
   88aa4:	882f883a 	mov	r23,r17
   88aa8:	003fdc06 	br	88a1c <__multadd+0x9c>

00088aac <__pow5mult>:
   88aac:	defffa04 	addi	sp,sp,-24
   88ab0:	308000cc 	andi	r2,r6,3
   88ab4:	dd000415 	stw	r20,16(sp)
   88ab8:	dcc00315 	stw	r19,12(sp)
   88abc:	dc000015 	stw	r16,0(sp)
   88ac0:	dfc00515 	stw	ra,20(sp)
   88ac4:	dc800215 	stw	r18,8(sp)
   88ac8:	dc400115 	stw	r17,4(sp)
   88acc:	3021883a 	mov	r16,r6
   88ad0:	2027883a 	mov	r19,r4
   88ad4:	2829883a 	mov	r20,r5
   88ad8:	10002b1e 	bne	r2,zero,88b88 <__pow5mult+0xdc>
   88adc:	8025d0ba 	srai	r18,r16,2
   88ae0:	90001b26 	beq	r18,zero,88b50 <__pow5mult+0xa4>
   88ae4:	9c001217 	ldw	r16,72(r19)
   88ae8:	8000081e 	bne	r16,zero,88b0c <__pow5mult+0x60>
   88aec:	00003006 	br	88bb0 <__pow5mult+0x104>
   88af0:	800b883a 	mov	r5,r16
   88af4:	800d883a 	mov	r6,r16
   88af8:	9809883a 	mov	r4,r19
   88afc:	90001426 	beq	r18,zero,88b50 <__pow5mult+0xa4>
   88b00:	80800017 	ldw	r2,0(r16)
   88b04:	10001b26 	beq	r2,zero,88b74 <__pow5mult+0xc8>
   88b08:	1021883a 	mov	r16,r2
   88b0c:	9080004c 	andi	r2,r18,1
   88b10:	1005003a 	cmpeq	r2,r2,zero
   88b14:	9025d07a 	srai	r18,r18,1
   88b18:	800d883a 	mov	r6,r16
   88b1c:	9809883a 	mov	r4,r19
   88b20:	a00b883a 	mov	r5,r20
   88b24:	103ff21e 	bne	r2,zero,88af0 <__pow5mult+0x44>
   88b28:	00886f00 	call	886f0 <__multiply>
   88b2c:	a00b883a 	mov	r5,r20
   88b30:	9809883a 	mov	r4,r19
   88b34:	1023883a 	mov	r17,r2
   88b38:	0087c600 	call	87c60 <_Bfree>
   88b3c:	8829883a 	mov	r20,r17
   88b40:	800b883a 	mov	r5,r16
   88b44:	800d883a 	mov	r6,r16
   88b48:	9809883a 	mov	r4,r19
   88b4c:	903fec1e 	bne	r18,zero,88b00 <__pow5mult+0x54>
   88b50:	a005883a 	mov	r2,r20
   88b54:	dfc00517 	ldw	ra,20(sp)
   88b58:	dd000417 	ldw	r20,16(sp)
   88b5c:	dcc00317 	ldw	r19,12(sp)
   88b60:	dc800217 	ldw	r18,8(sp)
   88b64:	dc400117 	ldw	r17,4(sp)
   88b68:	dc000017 	ldw	r16,0(sp)
   88b6c:	dec00604 	addi	sp,sp,24
   88b70:	f800283a 	ret
   88b74:	00886f00 	call	886f0 <__multiply>
   88b78:	80800015 	stw	r2,0(r16)
   88b7c:	1021883a 	mov	r16,r2
   88b80:	10000015 	stw	zero,0(r2)
   88b84:	003fe106 	br	88b0c <__pow5mult+0x60>
   88b88:	1085883a 	add	r2,r2,r2
   88b8c:	00c00274 	movhi	r3,9
   88b90:	18f9bb04 	addi	r3,r3,-6420
   88b94:	1085883a 	add	r2,r2,r2
   88b98:	10c5883a 	add	r2,r2,r3
   88b9c:	11bfff17 	ldw	r6,-4(r2)
   88ba0:	000f883a 	mov	r7,zero
   88ba4:	00889800 	call	88980 <__multadd>
   88ba8:	1029883a 	mov	r20,r2
   88bac:	003fcb06 	br	88adc <__pow5mult+0x30>
   88bb0:	9809883a 	mov	r4,r19
   88bb4:	01409c44 	movi	r5,625
   88bb8:	00889440 	call	88944 <__i2b>
   88bbc:	98801215 	stw	r2,72(r19)
   88bc0:	1021883a 	mov	r16,r2
   88bc4:	10000015 	stw	zero,0(r2)
   88bc8:	003fd006 	br	88b0c <__pow5mult+0x60>

00088bcc <__s2b>:
   88bcc:	defff904 	addi	sp,sp,-28
   88bd0:	dcc00315 	stw	r19,12(sp)
   88bd4:	dc800215 	stw	r18,8(sp)
   88bd8:	2827883a 	mov	r19,r5
   88bdc:	2025883a 	mov	r18,r4
   88be0:	01400244 	movi	r5,9
   88be4:	39000204 	addi	r4,r7,8
   88be8:	dd000415 	stw	r20,16(sp)
   88bec:	dc400115 	stw	r17,4(sp)
   88bf0:	dfc00615 	stw	ra,24(sp)
   88bf4:	dd400515 	stw	r21,20(sp)
   88bf8:	dc000015 	stw	r16,0(sp)
   88bfc:	3829883a 	mov	r20,r7
   88c00:	3023883a 	mov	r17,r6
   88c04:	0081df00 	call	81df0 <__divsi3>
   88c08:	00c00044 	movi	r3,1
   88c0c:	1880350e 	bge	r3,r2,88ce4 <__s2b+0x118>
   88c10:	000b883a 	mov	r5,zero
   88c14:	18c7883a 	add	r3,r3,r3
   88c18:	29400044 	addi	r5,r5,1
   88c1c:	18bffd16 	blt	r3,r2,88c14 <__s2b+0x48>
   88c20:	9009883a 	mov	r4,r18
   88c24:	00881e00 	call	881e0 <_Balloc>
   88c28:	1011883a 	mov	r8,r2
   88c2c:	d8800717 	ldw	r2,28(sp)
   88c30:	00c00044 	movi	r3,1
   88c34:	01800244 	movi	r6,9
   88c38:	40800515 	stw	r2,20(r8)
   88c3c:	40c00415 	stw	r3,16(r8)
   88c40:	3440260e 	bge	r6,r17,88cdc <__s2b+0x110>
   88c44:	3021883a 	mov	r16,r6
   88c48:	99ab883a 	add	r21,r19,r6
   88c4c:	9c05883a 	add	r2,r19,r16
   88c50:	11c00007 	ldb	r7,0(r2)
   88c54:	400b883a 	mov	r5,r8
   88c58:	9009883a 	mov	r4,r18
   88c5c:	39fff404 	addi	r7,r7,-48
   88c60:	01800284 	movi	r6,10
   88c64:	00889800 	call	88980 <__multadd>
   88c68:	84000044 	addi	r16,r16,1
   88c6c:	1011883a 	mov	r8,r2
   88c70:	8c3ff61e 	bne	r17,r16,88c4c <__s2b+0x80>
   88c74:	ac45883a 	add	r2,r21,r17
   88c78:	117ffe04 	addi	r5,r2,-8
   88c7c:	880d883a 	mov	r6,r17
   88c80:	35000c0e 	bge	r6,r20,88cb4 <__s2b+0xe8>
   88c84:	a185c83a 	sub	r2,r20,r6
   88c88:	2821883a 	mov	r16,r5
   88c8c:	28a3883a 	add	r17,r5,r2
   88c90:	81c00007 	ldb	r7,0(r16)
   88c94:	400b883a 	mov	r5,r8
   88c98:	9009883a 	mov	r4,r18
   88c9c:	39fff404 	addi	r7,r7,-48
   88ca0:	01800284 	movi	r6,10
   88ca4:	00889800 	call	88980 <__multadd>
   88ca8:	84000044 	addi	r16,r16,1
   88cac:	1011883a 	mov	r8,r2
   88cb0:	847ff71e 	bne	r16,r17,88c90 <__s2b+0xc4>
   88cb4:	4005883a 	mov	r2,r8
   88cb8:	dfc00617 	ldw	ra,24(sp)
   88cbc:	dd400517 	ldw	r21,20(sp)
   88cc0:	dd000417 	ldw	r20,16(sp)
   88cc4:	dcc00317 	ldw	r19,12(sp)
   88cc8:	dc800217 	ldw	r18,8(sp)
   88ccc:	dc400117 	ldw	r17,4(sp)
   88cd0:	dc000017 	ldw	r16,0(sp)
   88cd4:	dec00704 	addi	sp,sp,28
   88cd8:	f800283a 	ret
   88cdc:	99400284 	addi	r5,r19,10
   88ce0:	003fe706 	br	88c80 <__s2b+0xb4>
   88ce4:	000b883a 	mov	r5,zero
   88ce8:	003fcd06 	br	88c20 <__s2b+0x54>

00088cec <putc>:
   88cec:	defffc04 	addi	sp,sp,-16
   88cf0:	dc800215 	stw	r18,8(sp)
   88cf4:	04800274 	movhi	r18,9
   88cf8:	94805f04 	addi	r18,r18,380
   88cfc:	90c00017 	ldw	r3,0(r18)
   88d00:	dc400115 	stw	r17,4(sp)
   88d04:	dc000015 	stw	r16,0(sp)
   88d08:	dfc00315 	stw	ra,12(sp)
   88d0c:	2023883a 	mov	r17,r4
   88d10:	2821883a 	mov	r16,r5
   88d14:	18000226 	beq	r3,zero,88d20 <putc+0x34>
   88d18:	18800e17 	ldw	r2,56(r3)
   88d1c:	10001126 	beq	r2,zero,88d64 <putc+0x78>
   88d20:	80800217 	ldw	r2,8(r16)
   88d24:	10ffffc4 	addi	r3,r2,-1
   88d28:	80c00215 	stw	r3,8(r16)
   88d2c:	18001316 	blt	r3,zero,88d7c <putc+0x90>
   88d30:	80800017 	ldw	r2,0(r16)
   88d34:	14400005 	stb	r17,0(r2)
   88d38:	80c00017 	ldw	r3,0(r16)
   88d3c:	18800044 	addi	r2,r3,1
   88d40:	18c00003 	ldbu	r3,0(r3)
   88d44:	80800015 	stw	r2,0(r16)
   88d48:	1805883a 	mov	r2,r3
   88d4c:	dfc00317 	ldw	ra,12(sp)
   88d50:	dc800217 	ldw	r18,8(sp)
   88d54:	dc400117 	ldw	r17,4(sp)
   88d58:	dc000017 	ldw	r16,0(sp)
   88d5c:	dec00404 	addi	sp,sp,16
   88d60:	f800283a 	ret
   88d64:	1809883a 	mov	r4,r3
   88d68:	0086a240 	call	86a24 <__sinit>
   88d6c:	80800217 	ldw	r2,8(r16)
   88d70:	10ffffc4 	addi	r3,r2,-1
   88d74:	80c00215 	stw	r3,8(r16)
   88d78:	183fed0e 	bge	r3,zero,88d30 <putc+0x44>
   88d7c:	80800617 	ldw	r2,24(r16)
   88d80:	18800f16 	blt	r3,r2,88dc0 <putc+0xd4>
   88d84:	80800017 	ldw	r2,0(r16)
   88d88:	14400005 	stb	r17,0(r2)
   88d8c:	81000017 	ldw	r4,0(r16)
   88d90:	00800284 	movi	r2,10
   88d94:	20c00003 	ldbu	r3,0(r4)
   88d98:	18801226 	beq	r3,r2,88de4 <putc+0xf8>
   88d9c:	20800044 	addi	r2,r4,1
   88da0:	80800015 	stw	r2,0(r16)
   88da4:	1805883a 	mov	r2,r3
   88da8:	dfc00317 	ldw	ra,12(sp)
   88dac:	dc800217 	ldw	r18,8(sp)
   88db0:	dc400117 	ldw	r17,4(sp)
   88db4:	dc000017 	ldw	r16,0(sp)
   88db8:	dec00404 	addi	sp,sp,16
   88dbc:	f800283a 	ret
   88dc0:	91000017 	ldw	r4,0(r18)
   88dc4:	880b883a 	mov	r5,r17
   88dc8:	800d883a 	mov	r6,r16
   88dcc:	dfc00317 	ldw	ra,12(sp)
   88dd0:	dc800217 	ldw	r18,8(sp)
   88dd4:	dc400117 	ldw	r17,4(sp)
   88dd8:	dc000017 	ldw	r16,0(sp)
   88ddc:	dec00404 	addi	sp,sp,16
   88de0:	00897441 	jmpi	89744 <__swbuf_r>
   88de4:	91000017 	ldw	r4,0(r18)
   88de8:	180b883a 	mov	r5,r3
   88dec:	003ff606 	br	88dc8 <putc+0xdc>

00088df0 <_putc_r>:
   88df0:	defffc04 	addi	sp,sp,-16
   88df4:	dc400215 	stw	r17,8(sp)
   88df8:	dc000115 	stw	r16,4(sp)
   88dfc:	dfc00315 	stw	ra,12(sp)
   88e00:	2021883a 	mov	r16,r4
   88e04:	2823883a 	mov	r17,r5
   88e08:	20000226 	beq	r4,zero,88e14 <_putc_r+0x24>
   88e0c:	20800e17 	ldw	r2,56(r4)
   88e10:	10001026 	beq	r2,zero,88e54 <_putc_r+0x64>
   88e14:	30800217 	ldw	r2,8(r6)
   88e18:	10ffffc4 	addi	r3,r2,-1
   88e1c:	30c00215 	stw	r3,8(r6)
   88e20:	18001316 	blt	r3,zero,88e70 <_putc_r+0x80>
   88e24:	30800017 	ldw	r2,0(r6)
   88e28:	14400005 	stb	r17,0(r2)
   88e2c:	30c00017 	ldw	r3,0(r6)
   88e30:	18800044 	addi	r2,r3,1
   88e34:	18c00003 	ldbu	r3,0(r3)
   88e38:	30800015 	stw	r2,0(r6)
   88e3c:	1805883a 	mov	r2,r3
   88e40:	dfc00317 	ldw	ra,12(sp)
   88e44:	dc400217 	ldw	r17,8(sp)
   88e48:	dc000117 	ldw	r16,4(sp)
   88e4c:	dec00404 	addi	sp,sp,16
   88e50:	f800283a 	ret
   88e54:	d9800015 	stw	r6,0(sp)
   88e58:	0086a240 	call	86a24 <__sinit>
   88e5c:	d9800017 	ldw	r6,0(sp)
   88e60:	30800217 	ldw	r2,8(r6)
   88e64:	10ffffc4 	addi	r3,r2,-1
   88e68:	30c00215 	stw	r3,8(r6)
   88e6c:	183fed0e 	bge	r3,zero,88e24 <_putc_r+0x34>
   88e70:	30800617 	ldw	r2,24(r6)
   88e74:	18800e16 	blt	r3,r2,88eb0 <_putc_r+0xc0>
   88e78:	30800017 	ldw	r2,0(r6)
   88e7c:	14400005 	stb	r17,0(r2)
   88e80:	31000017 	ldw	r4,0(r6)
   88e84:	00800284 	movi	r2,10
   88e88:	20c00003 	ldbu	r3,0(r4)
   88e8c:	18800f26 	beq	r3,r2,88ecc <_putc_r+0xdc>
   88e90:	20800044 	addi	r2,r4,1
   88e94:	30800015 	stw	r2,0(r6)
   88e98:	1805883a 	mov	r2,r3
   88e9c:	dfc00317 	ldw	ra,12(sp)
   88ea0:	dc400217 	ldw	r17,8(sp)
   88ea4:	dc000117 	ldw	r16,4(sp)
   88ea8:	dec00404 	addi	sp,sp,16
   88eac:	f800283a 	ret
   88eb0:	8009883a 	mov	r4,r16
   88eb4:	880b883a 	mov	r5,r17
   88eb8:	dfc00317 	ldw	ra,12(sp)
   88ebc:	dc400217 	ldw	r17,8(sp)
   88ec0:	dc000117 	ldw	r16,4(sp)
   88ec4:	dec00404 	addi	sp,sp,16
   88ec8:	00897441 	jmpi	89744 <__swbuf_r>
   88ecc:	8009883a 	mov	r4,r16
   88ed0:	180b883a 	mov	r5,r3
   88ed4:	003ff806 	br	88eb8 <_putc_r+0xc8>

00088ed8 <_realloc_r>:
   88ed8:	defff404 	addi	sp,sp,-48
   88edc:	dd800815 	stw	r22,32(sp)
   88ee0:	dc800415 	stw	r18,16(sp)
   88ee4:	dc400315 	stw	r17,12(sp)
   88ee8:	dfc00b15 	stw	ra,44(sp)
   88eec:	df000a15 	stw	fp,40(sp)
   88ef0:	ddc00915 	stw	r23,36(sp)
   88ef4:	dd400715 	stw	r21,28(sp)
   88ef8:	dd000615 	stw	r20,24(sp)
   88efc:	dcc00515 	stw	r19,20(sp)
   88f00:	dc000215 	stw	r16,8(sp)
   88f04:	2825883a 	mov	r18,r5
   88f08:	3023883a 	mov	r17,r6
   88f0c:	202d883a 	mov	r22,r4
   88f10:	2800c926 	beq	r5,zero,89238 <_realloc_r+0x360>
   88f14:	008b7980 	call	8b798 <__malloc_lock>
   88f18:	943ffe04 	addi	r16,r18,-8
   88f1c:	88c002c4 	addi	r3,r17,11
   88f20:	00800584 	movi	r2,22
   88f24:	82000117 	ldw	r8,4(r16)
   88f28:	10c01b2e 	bgeu	r2,r3,88f98 <_realloc_r+0xc0>
   88f2c:	00bffe04 	movi	r2,-8
   88f30:	188e703a 	and	r7,r3,r2
   88f34:	3839883a 	mov	fp,r7
   88f38:	38001a16 	blt	r7,zero,88fa4 <_realloc_r+0xcc>
   88f3c:	e4401936 	bltu	fp,r17,88fa4 <_realloc_r+0xcc>
   88f40:	013fff04 	movi	r4,-4
   88f44:	4126703a 	and	r19,r8,r4
   88f48:	99c02616 	blt	r19,r7,88fe4 <_realloc_r+0x10c>
   88f4c:	802b883a 	mov	r21,r16
   88f50:	9829883a 	mov	r20,r19
   88f54:	84000204 	addi	r16,r16,8
   88f58:	a80f883a 	mov	r7,r21
   88f5c:	a70dc83a 	sub	r6,r20,fp
   88f60:	008003c4 	movi	r2,15
   88f64:	1180c136 	bltu	r2,r6,8926c <_realloc_r+0x394>
   88f68:	38800117 	ldw	r2,4(r7)
   88f6c:	a549883a 	add	r4,r20,r21
   88f70:	1080004c 	andi	r2,r2,1
   88f74:	a084b03a 	or	r2,r20,r2
   88f78:	38800115 	stw	r2,4(r7)
   88f7c:	20c00117 	ldw	r3,4(r4)
   88f80:	18c00054 	ori	r3,r3,1
   88f84:	20c00115 	stw	r3,4(r4)
   88f88:	b009883a 	mov	r4,r22
   88f8c:	008b7b80 	call	8b7b8 <__malloc_unlock>
   88f90:	8023883a 	mov	r17,r16
   88f94:	00000606 	br	88fb0 <_realloc_r+0xd8>
   88f98:	01c00404 	movi	r7,16
   88f9c:	3839883a 	mov	fp,r7
   88fa0:	e47fe72e 	bgeu	fp,r17,88f40 <_realloc_r+0x68>
   88fa4:	00800304 	movi	r2,12
   88fa8:	0023883a 	mov	r17,zero
   88fac:	b0800015 	stw	r2,0(r22)
   88fb0:	8805883a 	mov	r2,r17
   88fb4:	dfc00b17 	ldw	ra,44(sp)
   88fb8:	df000a17 	ldw	fp,40(sp)
   88fbc:	ddc00917 	ldw	r23,36(sp)
   88fc0:	dd800817 	ldw	r22,32(sp)
   88fc4:	dd400717 	ldw	r21,28(sp)
   88fc8:	dd000617 	ldw	r20,24(sp)
   88fcc:	dcc00517 	ldw	r19,20(sp)
   88fd0:	dc800417 	ldw	r18,16(sp)
   88fd4:	dc400317 	ldw	r17,12(sp)
   88fd8:	dc000217 	ldw	r16,8(sp)
   88fdc:	dec00c04 	addi	sp,sp,48
   88fe0:	f800283a 	ret
   88fe4:	00800274 	movhi	r2,9
   88fe8:	10b9d204 	addi	r2,r2,-6328
   88fec:	12400217 	ldw	r9,8(r2)
   88ff0:	84cd883a 	add	r6,r16,r19
   88ff4:	802b883a 	mov	r21,r16
   88ff8:	3240b926 	beq	r6,r9,892e0 <_realloc_r+0x408>
   88ffc:	31400117 	ldw	r5,4(r6)
   89000:	00bfff84 	movi	r2,-2
   89004:	2884703a 	and	r2,r5,r2
   89008:	1185883a 	add	r2,r2,r6
   8900c:	10c00117 	ldw	r3,4(r2)
   89010:	18c0004c 	andi	r3,r3,1
   89014:	1807003a 	cmpeq	r3,r3,zero
   89018:	1800a326 	beq	r3,zero,892a8 <_realloc_r+0x3d0>
   8901c:	2908703a 	and	r4,r5,r4
   89020:	9929883a 	add	r20,r19,r4
   89024:	a1c0a30e 	bge	r20,r7,892b4 <_realloc_r+0x3dc>
   89028:	4080004c 	andi	r2,r8,1
   8902c:	1000551e 	bne	r2,zero,89184 <_realloc_r+0x2ac>
   89030:	80800017 	ldw	r2,0(r16)
   89034:	80afc83a 	sub	r23,r16,r2
   89038:	b8c00117 	ldw	r3,4(r23)
   8903c:	00bfff04 	movi	r2,-4
   89040:	1884703a 	and	r2,r3,r2
   89044:	30002e26 	beq	r6,zero,89100 <_realloc_r+0x228>
   89048:	3240b926 	beq	r6,r9,89330 <_realloc_r+0x458>
   8904c:	98a9883a 	add	r20,r19,r2
   89050:	2509883a 	add	r4,r4,r20
   89054:	d9000015 	stw	r4,0(sp)
   89058:	21c02a16 	blt	r4,r7,89104 <_realloc_r+0x22c>
   8905c:	30800317 	ldw	r2,12(r6)
   89060:	30c00217 	ldw	r3,8(r6)
   89064:	01400904 	movi	r5,36
   89068:	99bfff04 	addi	r6,r19,-4
   8906c:	18800315 	stw	r2,12(r3)
   89070:	10c00215 	stw	r3,8(r2)
   89074:	b9000317 	ldw	r4,12(r23)
   89078:	b8800217 	ldw	r2,8(r23)
   8907c:	b82b883a 	mov	r21,r23
   89080:	bc000204 	addi	r16,r23,8
   89084:	20800215 	stw	r2,8(r4)
   89088:	11000315 	stw	r4,12(r2)
   8908c:	2980e436 	bltu	r5,r6,89420 <_realloc_r+0x548>
   89090:	008004c4 	movi	r2,19
   89094:	9009883a 	mov	r4,r18
   89098:	8011883a 	mov	r8,r16
   8909c:	11800f2e 	bgeu	r2,r6,890dc <_realloc_r+0x204>
   890a0:	90800017 	ldw	r2,0(r18)
   890a4:	ba000404 	addi	r8,r23,16
   890a8:	91000204 	addi	r4,r18,8
   890ac:	b8800215 	stw	r2,8(r23)
   890b0:	90c00117 	ldw	r3,4(r18)
   890b4:	008006c4 	movi	r2,27
   890b8:	b8c00315 	stw	r3,12(r23)
   890bc:	1180072e 	bgeu	r2,r6,890dc <_realloc_r+0x204>
   890c0:	90c00217 	ldw	r3,8(r18)
   890c4:	ba000604 	addi	r8,r23,24
   890c8:	91000404 	addi	r4,r18,16
   890cc:	b8c00415 	stw	r3,16(r23)
   890d0:	90800317 	ldw	r2,12(r18)
   890d4:	b8800515 	stw	r2,20(r23)
   890d8:	3140e726 	beq	r6,r5,89478 <_realloc_r+0x5a0>
   890dc:	20800017 	ldw	r2,0(r4)
   890e0:	dd000017 	ldw	r20,0(sp)
   890e4:	b80f883a 	mov	r7,r23
   890e8:	40800015 	stw	r2,0(r8)
   890ec:	20c00117 	ldw	r3,4(r4)
   890f0:	40c00115 	stw	r3,4(r8)
   890f4:	20800217 	ldw	r2,8(r4)
   890f8:	40800215 	stw	r2,8(r8)
   890fc:	003f9706 	br	88f5c <_realloc_r+0x84>
   89100:	98a9883a 	add	r20,r19,r2
   89104:	a1c01f16 	blt	r20,r7,89184 <_realloc_r+0x2ac>
   89108:	b8c00317 	ldw	r3,12(r23)
   8910c:	b8800217 	ldw	r2,8(r23)
   89110:	99bfff04 	addi	r6,r19,-4
   89114:	01400904 	movi	r5,36
   89118:	b82b883a 	mov	r21,r23
   8911c:	18800215 	stw	r2,8(r3)
   89120:	10c00315 	stw	r3,12(r2)
   89124:	bc000204 	addi	r16,r23,8
   89128:	2980c336 	bltu	r5,r6,89438 <_realloc_r+0x560>
   8912c:	008004c4 	movi	r2,19
   89130:	9009883a 	mov	r4,r18
   89134:	8011883a 	mov	r8,r16
   89138:	11800f2e 	bgeu	r2,r6,89178 <_realloc_r+0x2a0>
   8913c:	90800017 	ldw	r2,0(r18)
   89140:	ba000404 	addi	r8,r23,16
   89144:	91000204 	addi	r4,r18,8
   89148:	b8800215 	stw	r2,8(r23)
   8914c:	90c00117 	ldw	r3,4(r18)
   89150:	008006c4 	movi	r2,27
   89154:	b8c00315 	stw	r3,12(r23)
   89158:	1180072e 	bgeu	r2,r6,89178 <_realloc_r+0x2a0>
   8915c:	90c00217 	ldw	r3,8(r18)
   89160:	ba000604 	addi	r8,r23,24
   89164:	91000404 	addi	r4,r18,16
   89168:	b8c00415 	stw	r3,16(r23)
   8916c:	90800317 	ldw	r2,12(r18)
   89170:	b8800515 	stw	r2,20(r23)
   89174:	3140c726 	beq	r6,r5,89494 <_realloc_r+0x5bc>
   89178:	20800017 	ldw	r2,0(r4)
   8917c:	b80f883a 	mov	r7,r23
   89180:	003fd906 	br	890e8 <_realloc_r+0x210>
   89184:	880b883a 	mov	r5,r17
   89188:	b009883a 	mov	r4,r22
   8918c:	00825100 	call	82510 <_malloc_r>
   89190:	1023883a 	mov	r17,r2
   89194:	10002526 	beq	r2,zero,8922c <_realloc_r+0x354>
   89198:	80800117 	ldw	r2,4(r16)
   8919c:	00ffff84 	movi	r3,-2
   891a0:	893ffe04 	addi	r4,r17,-8
   891a4:	10c4703a 	and	r2,r2,r3
   891a8:	8085883a 	add	r2,r16,r2
   891ac:	20809526 	beq	r4,r2,89404 <_realloc_r+0x52c>
   891b0:	99bfff04 	addi	r6,r19,-4
   891b4:	01c00904 	movi	r7,36
   891b8:	39804536 	bltu	r7,r6,892d0 <_realloc_r+0x3f8>
   891bc:	008004c4 	movi	r2,19
   891c0:	9009883a 	mov	r4,r18
   891c4:	880b883a 	mov	r5,r17
   891c8:	11800f2e 	bgeu	r2,r6,89208 <_realloc_r+0x330>
   891cc:	90800017 	ldw	r2,0(r18)
   891d0:	89400204 	addi	r5,r17,8
   891d4:	91000204 	addi	r4,r18,8
   891d8:	88800015 	stw	r2,0(r17)
   891dc:	90c00117 	ldw	r3,4(r18)
   891e0:	008006c4 	movi	r2,27
   891e4:	88c00115 	stw	r3,4(r17)
   891e8:	1180072e 	bgeu	r2,r6,89208 <_realloc_r+0x330>
   891ec:	90c00217 	ldw	r3,8(r18)
   891f0:	89400404 	addi	r5,r17,16
   891f4:	91000404 	addi	r4,r18,16
   891f8:	88c00215 	stw	r3,8(r17)
   891fc:	90800317 	ldw	r2,12(r18)
   89200:	88800315 	stw	r2,12(r17)
   89204:	31c09126 	beq	r6,r7,8944c <_realloc_r+0x574>
   89208:	20800017 	ldw	r2,0(r4)
   8920c:	28800015 	stw	r2,0(r5)
   89210:	20c00117 	ldw	r3,4(r4)
   89214:	28c00115 	stw	r3,4(r5)
   89218:	20800217 	ldw	r2,8(r4)
   8921c:	28800215 	stw	r2,8(r5)
   89220:	900b883a 	mov	r5,r18
   89224:	b009883a 	mov	r4,r22
   89228:	0086ddc0 	call	86ddc <_free_r>
   8922c:	b009883a 	mov	r4,r22
   89230:	008b7b80 	call	8b7b8 <__malloc_unlock>
   89234:	003f5e06 	br	88fb0 <_realloc_r+0xd8>
   89238:	300b883a 	mov	r5,r6
   8923c:	dfc00b17 	ldw	ra,44(sp)
   89240:	df000a17 	ldw	fp,40(sp)
   89244:	ddc00917 	ldw	r23,36(sp)
   89248:	dd800817 	ldw	r22,32(sp)
   8924c:	dd400717 	ldw	r21,28(sp)
   89250:	dd000617 	ldw	r20,24(sp)
   89254:	dcc00517 	ldw	r19,20(sp)
   89258:	dc800417 	ldw	r18,16(sp)
   8925c:	dc400317 	ldw	r17,12(sp)
   89260:	dc000217 	ldw	r16,8(sp)
   89264:	dec00c04 	addi	sp,sp,48
   89268:	00825101 	jmpi	82510 <_malloc_r>
   8926c:	38800117 	ldw	r2,4(r7)
   89270:	e54b883a 	add	r5,fp,r21
   89274:	31000054 	ori	r4,r6,1
   89278:	1080004c 	andi	r2,r2,1
   8927c:	1704b03a 	or	r2,r2,fp
   89280:	38800115 	stw	r2,4(r7)
   89284:	29000115 	stw	r4,4(r5)
   89288:	2987883a 	add	r3,r5,r6
   8928c:	18800117 	ldw	r2,4(r3)
   89290:	29400204 	addi	r5,r5,8
   89294:	b009883a 	mov	r4,r22
   89298:	10800054 	ori	r2,r2,1
   8929c:	18800115 	stw	r2,4(r3)
   892a0:	0086ddc0 	call	86ddc <_free_r>
   892a4:	003f3806 	br	88f88 <_realloc_r+0xb0>
   892a8:	000d883a 	mov	r6,zero
   892ac:	0009883a 	mov	r4,zero
   892b0:	003f5d06 	br	89028 <_realloc_r+0x150>
   892b4:	30c00217 	ldw	r3,8(r6)
   892b8:	30800317 	ldw	r2,12(r6)
   892bc:	800f883a 	mov	r7,r16
   892c0:	84000204 	addi	r16,r16,8
   892c4:	10c00215 	stw	r3,8(r2)
   892c8:	18800315 	stw	r2,12(r3)
   892cc:	003f2306 	br	88f5c <_realloc_r+0x84>
   892d0:	8809883a 	mov	r4,r17
   892d4:	900b883a 	mov	r5,r18
   892d8:	0087ae80 	call	87ae8 <memmove>
   892dc:	003fd006 	br	89220 <_realloc_r+0x348>
   892e0:	30800117 	ldw	r2,4(r6)
   892e4:	e0c00404 	addi	r3,fp,16
   892e8:	1108703a 	and	r4,r2,r4
   892ec:	9905883a 	add	r2,r19,r4
   892f0:	10ff4d16 	blt	r2,r3,89028 <_realloc_r+0x150>
   892f4:	1705c83a 	sub	r2,r2,fp
   892f8:	870b883a 	add	r5,r16,fp
   892fc:	10800054 	ori	r2,r2,1
   89300:	28800115 	stw	r2,4(r5)
   89304:	80c00117 	ldw	r3,4(r16)
   89308:	00800274 	movhi	r2,9
   8930c:	10b9d204 	addi	r2,r2,-6328
   89310:	b009883a 	mov	r4,r22
   89314:	18c0004c 	andi	r3,r3,1
   89318:	e0c6b03a 	or	r3,fp,r3
   8931c:	11400215 	stw	r5,8(r2)
   89320:	80c00115 	stw	r3,4(r16)
   89324:	008b7b80 	call	8b7b8 <__malloc_unlock>
   89328:	84400204 	addi	r17,r16,8
   8932c:	003f2006 	br	88fb0 <_realloc_r+0xd8>
   89330:	98a9883a 	add	r20,r19,r2
   89334:	2509883a 	add	r4,r4,r20
   89338:	e0800404 	addi	r2,fp,16
   8933c:	d9000115 	stw	r4,4(sp)
   89340:	20bf7016 	blt	r4,r2,89104 <_realloc_r+0x22c>
   89344:	b8c00317 	ldw	r3,12(r23)
   89348:	b8800217 	ldw	r2,8(r23)
   8934c:	99bfff04 	addi	r6,r19,-4
   89350:	01400904 	movi	r5,36
   89354:	18800215 	stw	r2,8(r3)
   89358:	10c00315 	stw	r3,12(r2)
   8935c:	bc400204 	addi	r17,r23,8
   89360:	29804136 	bltu	r5,r6,89468 <_realloc_r+0x590>
   89364:	008004c4 	movi	r2,19
   89368:	9009883a 	mov	r4,r18
   8936c:	880f883a 	mov	r7,r17
   89370:	11800f2e 	bgeu	r2,r6,893b0 <_realloc_r+0x4d8>
   89374:	90800017 	ldw	r2,0(r18)
   89378:	b9c00404 	addi	r7,r23,16
   8937c:	91000204 	addi	r4,r18,8
   89380:	b8800215 	stw	r2,8(r23)
   89384:	90c00117 	ldw	r3,4(r18)
   89388:	008006c4 	movi	r2,27
   8938c:	b8c00315 	stw	r3,12(r23)
   89390:	1180072e 	bgeu	r2,r6,893b0 <_realloc_r+0x4d8>
   89394:	90c00217 	ldw	r3,8(r18)
   89398:	b9c00604 	addi	r7,r23,24
   8939c:	91000404 	addi	r4,r18,16
   893a0:	b8c00415 	stw	r3,16(r23)
   893a4:	90800317 	ldw	r2,12(r18)
   893a8:	b8800515 	stw	r2,20(r23)
   893ac:	31404026 	beq	r6,r5,894b0 <_realloc_r+0x5d8>
   893b0:	20800017 	ldw	r2,0(r4)
   893b4:	38800015 	stw	r2,0(r7)
   893b8:	20c00117 	ldw	r3,4(r4)
   893bc:	38c00115 	stw	r3,4(r7)
   893c0:	20800217 	ldw	r2,8(r4)
   893c4:	38800215 	stw	r2,8(r7)
   893c8:	d8c00117 	ldw	r3,4(sp)
   893cc:	bf0b883a 	add	r5,r23,fp
   893d0:	b009883a 	mov	r4,r22
   893d4:	1f05c83a 	sub	r2,r3,fp
   893d8:	10800054 	ori	r2,r2,1
   893dc:	28800115 	stw	r2,4(r5)
   893e0:	b8c00117 	ldw	r3,4(r23)
   893e4:	00800274 	movhi	r2,9
   893e8:	10b9d204 	addi	r2,r2,-6328
   893ec:	11400215 	stw	r5,8(r2)
   893f0:	18c0004c 	andi	r3,r3,1
   893f4:	e0c6b03a 	or	r3,fp,r3
   893f8:	b8c00115 	stw	r3,4(r23)
   893fc:	008b7b80 	call	8b7b8 <__malloc_unlock>
   89400:	003eeb06 	br	88fb0 <_realloc_r+0xd8>
   89404:	20800117 	ldw	r2,4(r4)
   89408:	00ffff04 	movi	r3,-4
   8940c:	800f883a 	mov	r7,r16
   89410:	10c4703a 	and	r2,r2,r3
   89414:	98a9883a 	add	r20,r19,r2
   89418:	84000204 	addi	r16,r16,8
   8941c:	003ecf06 	br	88f5c <_realloc_r+0x84>
   89420:	900b883a 	mov	r5,r18
   89424:	8009883a 	mov	r4,r16
   89428:	0087ae80 	call	87ae8 <memmove>
   8942c:	dd000017 	ldw	r20,0(sp)
   89430:	b80f883a 	mov	r7,r23
   89434:	003ec906 	br	88f5c <_realloc_r+0x84>
   89438:	900b883a 	mov	r5,r18
   8943c:	8009883a 	mov	r4,r16
   89440:	0087ae80 	call	87ae8 <memmove>
   89444:	b80f883a 	mov	r7,r23
   89448:	003ec406 	br	88f5c <_realloc_r+0x84>
   8944c:	90c00417 	ldw	r3,16(r18)
   89450:	89400604 	addi	r5,r17,24
   89454:	91000604 	addi	r4,r18,24
   89458:	88c00415 	stw	r3,16(r17)
   8945c:	90800517 	ldw	r2,20(r18)
   89460:	88800515 	stw	r2,20(r17)
   89464:	003f6806 	br	89208 <_realloc_r+0x330>
   89468:	900b883a 	mov	r5,r18
   8946c:	8809883a 	mov	r4,r17
   89470:	0087ae80 	call	87ae8 <memmove>
   89474:	003fd406 	br	893c8 <_realloc_r+0x4f0>
   89478:	90c00417 	ldw	r3,16(r18)
   8947c:	91000604 	addi	r4,r18,24
   89480:	ba000804 	addi	r8,r23,32
   89484:	b8c00615 	stw	r3,24(r23)
   89488:	90800517 	ldw	r2,20(r18)
   8948c:	b8800715 	stw	r2,28(r23)
   89490:	003f1206 	br	890dc <_realloc_r+0x204>
   89494:	90c00417 	ldw	r3,16(r18)
   89498:	91000604 	addi	r4,r18,24
   8949c:	ba000804 	addi	r8,r23,32
   894a0:	b8c00615 	stw	r3,24(r23)
   894a4:	90800517 	ldw	r2,20(r18)
   894a8:	b8800715 	stw	r2,28(r23)
   894ac:	003f3206 	br	89178 <_realloc_r+0x2a0>
   894b0:	90c00417 	ldw	r3,16(r18)
   894b4:	91000604 	addi	r4,r18,24
   894b8:	b9c00804 	addi	r7,r23,32
   894bc:	b8c00615 	stw	r3,24(r23)
   894c0:	90800517 	ldw	r2,20(r18)
   894c4:	b8800715 	stw	r2,28(r23)
   894c8:	003fb906 	br	893b0 <_realloc_r+0x4d8>

000894cc <__isinfd>:
   894cc:	200d883a 	mov	r6,r4
   894d0:	0109c83a 	sub	r4,zero,r4
   894d4:	2188b03a 	or	r4,r4,r6
   894d8:	2008d7fa 	srli	r4,r4,31
   894dc:	00a00034 	movhi	r2,32768
   894e0:	10bfffc4 	addi	r2,r2,-1
   894e4:	1144703a 	and	r2,r2,r5
   894e8:	2088b03a 	or	r4,r4,r2
   894ec:	009ffc34 	movhi	r2,32752
   894f0:	1105c83a 	sub	r2,r2,r4
   894f4:	0087c83a 	sub	r3,zero,r2
   894f8:	10c4b03a 	or	r2,r2,r3
   894fc:	1004d7fa 	srli	r2,r2,31
   89500:	00c00044 	movi	r3,1
   89504:	1885c83a 	sub	r2,r3,r2
   89508:	f800283a 	ret

0008950c <__isnand>:
   8950c:	200d883a 	mov	r6,r4
   89510:	0109c83a 	sub	r4,zero,r4
   89514:	2188b03a 	or	r4,r4,r6
   89518:	2008d7fa 	srli	r4,r4,31
   8951c:	00a00034 	movhi	r2,32768
   89520:	10bfffc4 	addi	r2,r2,-1
   89524:	1144703a 	and	r2,r2,r5
   89528:	2088b03a 	or	r4,r4,r2
   8952c:	009ffc34 	movhi	r2,32752
   89530:	1105c83a 	sub	r2,r2,r4
   89534:	1004d7fa 	srli	r2,r2,31
   89538:	f800283a 	ret

0008953c <__sclose>:
   8953c:	2940038f 	ldh	r5,14(r5)
   89540:	00899d01 	jmpi	899d0 <_close_r>

00089544 <__sseek>:
   89544:	defffe04 	addi	sp,sp,-8
   89548:	dc000015 	stw	r16,0(sp)
   8954c:	2821883a 	mov	r16,r5
   89550:	2940038f 	ldh	r5,14(r5)
   89554:	dfc00115 	stw	ra,4(sp)
   89558:	0089c480 	call	89c48 <_lseek_r>
   8955c:	1007883a 	mov	r3,r2
   89560:	00bfffc4 	movi	r2,-1
   89564:	18800926 	beq	r3,r2,8958c <__sseek+0x48>
   89568:	8080030b 	ldhu	r2,12(r16)
   8956c:	80c01415 	stw	r3,80(r16)
   89570:	10840014 	ori	r2,r2,4096
   89574:	8080030d 	sth	r2,12(r16)
   89578:	1805883a 	mov	r2,r3
   8957c:	dfc00117 	ldw	ra,4(sp)
   89580:	dc000017 	ldw	r16,0(sp)
   89584:	dec00204 	addi	sp,sp,8
   89588:	f800283a 	ret
   8958c:	8080030b 	ldhu	r2,12(r16)
   89590:	10bbffcc 	andi	r2,r2,61439
   89594:	8080030d 	sth	r2,12(r16)
   89598:	1805883a 	mov	r2,r3
   8959c:	dfc00117 	ldw	ra,4(sp)
   895a0:	dc000017 	ldw	r16,0(sp)
   895a4:	dec00204 	addi	sp,sp,8
   895a8:	f800283a 	ret

000895ac <__swrite>:
   895ac:	2880030b 	ldhu	r2,12(r5)
   895b0:	defffb04 	addi	sp,sp,-20
   895b4:	dcc00315 	stw	r19,12(sp)
   895b8:	1080400c 	andi	r2,r2,256
   895bc:	dc800215 	stw	r18,8(sp)
   895c0:	dc400115 	stw	r17,4(sp)
   895c4:	dc000015 	stw	r16,0(sp)
   895c8:	3027883a 	mov	r19,r6
   895cc:	3825883a 	mov	r18,r7
   895d0:	dfc00415 	stw	ra,16(sp)
   895d4:	2821883a 	mov	r16,r5
   895d8:	000d883a 	mov	r6,zero
   895dc:	01c00084 	movi	r7,2
   895e0:	2023883a 	mov	r17,r4
   895e4:	10000226 	beq	r2,zero,895f0 <__swrite+0x44>
   895e8:	2940038f 	ldh	r5,14(r5)
   895ec:	0089c480 	call	89c48 <_lseek_r>
   895f0:	8080030b 	ldhu	r2,12(r16)
   895f4:	8140038f 	ldh	r5,14(r16)
   895f8:	8809883a 	mov	r4,r17
   895fc:	10bbffcc 	andi	r2,r2,61439
   89600:	980d883a 	mov	r6,r19
   89604:	900f883a 	mov	r7,r18
   89608:	8080030d 	sth	r2,12(r16)
   8960c:	dfc00417 	ldw	ra,16(sp)
   89610:	dcc00317 	ldw	r19,12(sp)
   89614:	dc800217 	ldw	r18,8(sp)
   89618:	dc400117 	ldw	r17,4(sp)
   8961c:	dc000017 	ldw	r16,0(sp)
   89620:	dec00504 	addi	sp,sp,20
   89624:	00898901 	jmpi	89890 <_write_r>

00089628 <__sread>:
   89628:	defffe04 	addi	sp,sp,-8
   8962c:	dc000015 	stw	r16,0(sp)
   89630:	2821883a 	mov	r16,r5
   89634:	2940038f 	ldh	r5,14(r5)
   89638:	dfc00115 	stw	ra,4(sp)
   8963c:	0089cc00 	call	89cc0 <_read_r>
   89640:	1007883a 	mov	r3,r2
   89644:	10000816 	blt	r2,zero,89668 <__sread+0x40>
   89648:	80801417 	ldw	r2,80(r16)
   8964c:	10c5883a 	add	r2,r2,r3
   89650:	80801415 	stw	r2,80(r16)
   89654:	1805883a 	mov	r2,r3
   89658:	dfc00117 	ldw	ra,4(sp)
   8965c:	dc000017 	ldw	r16,0(sp)
   89660:	dec00204 	addi	sp,sp,8
   89664:	f800283a 	ret
   89668:	8080030b 	ldhu	r2,12(r16)
   8966c:	10bbffcc 	andi	r2,r2,61439
   89670:	8080030d 	sth	r2,12(r16)
   89674:	1805883a 	mov	r2,r3
   89678:	dfc00117 	ldw	ra,4(sp)
   8967c:	dc000017 	ldw	r16,0(sp)
   89680:	dec00204 	addi	sp,sp,8
   89684:	f800283a 	ret

00089688 <strcmp>:
   89688:	2144b03a 	or	r2,r4,r5
   8968c:	108000cc 	andi	r2,r2,3
   89690:	10001d1e 	bne	r2,zero,89708 <strcmp+0x80>
   89694:	200f883a 	mov	r7,r4
   89698:	28800017 	ldw	r2,0(r5)
   8969c:	21000017 	ldw	r4,0(r4)
   896a0:	280d883a 	mov	r6,r5
   896a4:	2080161e 	bne	r4,r2,89700 <strcmp+0x78>
   896a8:	023fbff4 	movhi	r8,65279
   896ac:	423fbfc4 	addi	r8,r8,-257
   896b0:	2207883a 	add	r3,r4,r8
   896b4:	01602074 	movhi	r5,32897
   896b8:	29602004 	addi	r5,r5,-32640
   896bc:	1946703a 	and	r3,r3,r5
   896c0:	0104303a 	nor	r2,zero,r4
   896c4:	10c4703a 	and	r2,r2,r3
   896c8:	10001c1e 	bne	r2,zero,8973c <strcmp+0xb4>
   896cc:	4013883a 	mov	r9,r8
   896d0:	2811883a 	mov	r8,r5
   896d4:	00000106 	br	896dc <strcmp+0x54>
   896d8:	1800181e 	bne	r3,zero,8973c <strcmp+0xb4>
   896dc:	39c00104 	addi	r7,r7,4
   896e0:	39000017 	ldw	r4,0(r7)
   896e4:	31800104 	addi	r6,r6,4
   896e8:	31400017 	ldw	r5,0(r6)
   896ec:	2245883a 	add	r2,r4,r9
   896f0:	1204703a 	and	r2,r2,r8
   896f4:	0106303a 	nor	r3,zero,r4
   896f8:	1886703a 	and	r3,r3,r2
   896fc:	217ff626 	beq	r4,r5,896d8 <strcmp+0x50>
   89700:	3809883a 	mov	r4,r7
   89704:	300b883a 	mov	r5,r6
   89708:	20c00007 	ldb	r3,0(r4)
   8970c:	1800051e 	bne	r3,zero,89724 <strcmp+0x9c>
   89710:	00000606 	br	8972c <strcmp+0xa4>
   89714:	21000044 	addi	r4,r4,1
   89718:	20c00007 	ldb	r3,0(r4)
   8971c:	29400044 	addi	r5,r5,1
   89720:	18000226 	beq	r3,zero,8972c <strcmp+0xa4>
   89724:	28800007 	ldb	r2,0(r5)
   89728:	18bffa26 	beq	r3,r2,89714 <strcmp+0x8c>
   8972c:	20c00003 	ldbu	r3,0(r4)
   89730:	28800003 	ldbu	r2,0(r5)
   89734:	1885c83a 	sub	r2,r3,r2
   89738:	f800283a 	ret
   8973c:	0005883a 	mov	r2,zero
   89740:	f800283a 	ret

00089744 <__swbuf_r>:
   89744:	defffc04 	addi	sp,sp,-16
   89748:	dc400215 	stw	r17,8(sp)
   8974c:	dc000115 	stw	r16,4(sp)
   89750:	dfc00315 	stw	ra,12(sp)
   89754:	2023883a 	mov	r17,r4
   89758:	2821883a 	mov	r16,r5
   8975c:	20000226 	beq	r4,zero,89768 <__swbuf_r+0x24>
   89760:	20800e17 	ldw	r2,56(r4)
   89764:	10002f26 	beq	r2,zero,89824 <__swbuf_r+0xe0>
   89768:	3080030b 	ldhu	r2,12(r6)
   8976c:	30c00617 	ldw	r3,24(r6)
   89770:	1080020c 	andi	r2,r2,8
   89774:	30c00215 	stw	r3,8(r6)
   89778:	10002226 	beq	r2,zero,89804 <__swbuf_r+0xc0>
   8977c:	30c00417 	ldw	r3,16(r6)
   89780:	18002026 	beq	r3,zero,89804 <__swbuf_r+0xc0>
   89784:	31000017 	ldw	r4,0(r6)
   89788:	30800517 	ldw	r2,20(r6)
   8978c:	20c7c83a 	sub	r3,r4,r3
   89790:	18802f0e 	bge	r3,r2,89850 <__swbuf_r+0x10c>
   89794:	19400044 	addi	r5,r3,1
   89798:	30800217 	ldw	r2,8(r6)
   8979c:	84003fcc 	andi	r16,r16,255
   897a0:	20c00044 	addi	r3,r4,1
   897a4:	10bfffc4 	addi	r2,r2,-1
   897a8:	30800215 	stw	r2,8(r6)
   897ac:	24000005 	stb	r16,0(r4)
   897b0:	30800517 	ldw	r2,20(r6)
   897b4:	30c00015 	stw	r3,0(r6)
   897b8:	11400c26 	beq	r2,r5,897ec <__swbuf_r+0xa8>
   897bc:	3080030b 	ldhu	r2,12(r6)
   897c0:	1080004c 	andi	r2,r2,1
   897c4:	1005003a 	cmpeq	r2,r2,zero
   897c8:	10000626 	beq	r2,zero,897e4 <__swbuf_r+0xa0>
   897cc:	8005883a 	mov	r2,r16
   897d0:	dfc00317 	ldw	ra,12(sp)
   897d4:	dc400217 	ldw	r17,8(sp)
   897d8:	dc000117 	ldw	r16,4(sp)
   897dc:	dec00404 	addi	sp,sp,16
   897e0:	f800283a 	ret
   897e4:	00800284 	movi	r2,10
   897e8:	80bff81e 	bne	r16,r2,897cc <__swbuf_r+0x88>
   897ec:	8809883a 	mov	r4,r17
   897f0:	300b883a 	mov	r5,r6
   897f4:	008678c0 	call	8678c <_fflush_r>
   897f8:	103ff426 	beq	r2,zero,897cc <__swbuf_r+0x88>
   897fc:	043fffc4 	movi	r16,-1
   89800:	003ff206 	br	897cc <__swbuf_r+0x88>
   89804:	300b883a 	mov	r5,r6
   89808:	8809883a 	mov	r4,r17
   8980c:	d9800015 	stw	r6,0(sp)
   89810:	0084e580 	call	84e58 <__swsetup_r>
   89814:	d9800017 	ldw	r6,0(sp)
   89818:	1000061e 	bne	r2,zero,89834 <__swbuf_r+0xf0>
   8981c:	30c00417 	ldw	r3,16(r6)
   89820:	003fd806 	br	89784 <__swbuf_r+0x40>
   89824:	d9800015 	stw	r6,0(sp)
   89828:	0086a240 	call	86a24 <__sinit>
   8982c:	d9800017 	ldw	r6,0(sp)
   89830:	003fcd06 	br	89768 <__swbuf_r+0x24>
   89834:	3080030b 	ldhu	r2,12(r6)
   89838:	00c00244 	movi	r3,9
   8983c:	043fffc4 	movi	r16,-1
   89840:	10801014 	ori	r2,r2,64
   89844:	3080030d 	sth	r2,12(r6)
   89848:	88c00015 	stw	r3,0(r17)
   8984c:	003fdf06 	br	897cc <__swbuf_r+0x88>
   89850:	300b883a 	mov	r5,r6
   89854:	8809883a 	mov	r4,r17
   89858:	d9800015 	stw	r6,0(sp)
   8985c:	008678c0 	call	8678c <_fflush_r>
   89860:	d9800017 	ldw	r6,0(sp)
   89864:	103fe51e 	bne	r2,zero,897fc <__swbuf_r+0xb8>
   89868:	31000017 	ldw	r4,0(r6)
   8986c:	01400044 	movi	r5,1
   89870:	003fc906 	br	89798 <__swbuf_r+0x54>

00089874 <__swbuf>:
   89874:	01800274 	movhi	r6,9
   89878:	31805f04 	addi	r6,r6,380
   8987c:	2007883a 	mov	r3,r4
   89880:	31000017 	ldw	r4,0(r6)
   89884:	280d883a 	mov	r6,r5
   89888:	180b883a 	mov	r5,r3
   8988c:	00897441 	jmpi	89744 <__swbuf_r>

00089890 <_write_r>:
   89890:	defffd04 	addi	sp,sp,-12
   89894:	dc000015 	stw	r16,0(sp)
   89898:	04000274 	movhi	r16,9
   8989c:	84071004 	addi	r16,r16,7232
   898a0:	dc400115 	stw	r17,4(sp)
   898a4:	80000015 	stw	zero,0(r16)
   898a8:	2023883a 	mov	r17,r4
   898ac:	2809883a 	mov	r4,r5
   898b0:	300b883a 	mov	r5,r6
   898b4:	380d883a 	mov	r6,r7
   898b8:	dfc00215 	stw	ra,8(sp)
   898bc:	008ba900 	call	8ba90 <write>
   898c0:	1007883a 	mov	r3,r2
   898c4:	00bfffc4 	movi	r2,-1
   898c8:	18800626 	beq	r3,r2,898e4 <_write_r+0x54>
   898cc:	1805883a 	mov	r2,r3
   898d0:	dfc00217 	ldw	ra,8(sp)
   898d4:	dc400117 	ldw	r17,4(sp)
   898d8:	dc000017 	ldw	r16,0(sp)
   898dc:	dec00304 	addi	sp,sp,12
   898e0:	f800283a 	ret
   898e4:	80800017 	ldw	r2,0(r16)
   898e8:	103ff826 	beq	r2,zero,898cc <_write_r+0x3c>
   898ec:	88800015 	stw	r2,0(r17)
   898f0:	1805883a 	mov	r2,r3
   898f4:	dfc00217 	ldw	ra,8(sp)
   898f8:	dc400117 	ldw	r17,4(sp)
   898fc:	dc000017 	ldw	r16,0(sp)
   89900:	dec00304 	addi	sp,sp,12
   89904:	f800283a 	ret

00089908 <_calloc_r>:
   89908:	defffe04 	addi	sp,sp,-8
   8990c:	dc400015 	stw	r17,0(sp)
   89910:	2023883a 	mov	r17,r4
   89914:	2809883a 	mov	r4,r5
   89918:	300b883a 	mov	r5,r6
   8991c:	dfc00115 	stw	ra,4(sp)
   89920:	00824b00 	call	824b0 <__mulsi3>
   89924:	100b883a 	mov	r5,r2
   89928:	8809883a 	mov	r4,r17
   8992c:	00825100 	call	82510 <_malloc_r>
   89930:	1023883a 	mov	r17,r2
   89934:	01c00904 	movi	r7,36
   89938:	10000d26 	beq	r2,zero,89970 <_calloc_r+0x68>
   8993c:	10ffff17 	ldw	r3,-4(r2)
   89940:	1009883a 	mov	r4,r2
   89944:	00bfff04 	movi	r2,-4
   89948:	1886703a 	and	r3,r3,r2
   8994c:	1887883a 	add	r3,r3,r2
   89950:	180d883a 	mov	r6,r3
   89954:	000b883a 	mov	r5,zero
   89958:	38c01736 	bltu	r7,r3,899b8 <_calloc_r+0xb0>
   8995c:	008004c4 	movi	r2,19
   89960:	10c00836 	bltu	r2,r3,89984 <_calloc_r+0x7c>
   89964:	20000215 	stw	zero,8(r4)
   89968:	20000015 	stw	zero,0(r4)
   8996c:	20000115 	stw	zero,4(r4)
   89970:	8805883a 	mov	r2,r17
   89974:	dfc00117 	ldw	ra,4(sp)
   89978:	dc400017 	ldw	r17,0(sp)
   8997c:	dec00204 	addi	sp,sp,8
   89980:	f800283a 	ret
   89984:	008006c4 	movi	r2,27
   89988:	88000015 	stw	zero,0(r17)
   8998c:	88000115 	stw	zero,4(r17)
   89990:	89000204 	addi	r4,r17,8
   89994:	10fff32e 	bgeu	r2,r3,89964 <_calloc_r+0x5c>
   89998:	88000215 	stw	zero,8(r17)
   8999c:	88000315 	stw	zero,12(r17)
   899a0:	89000404 	addi	r4,r17,16
   899a4:	19ffef1e 	bne	r3,r7,89964 <_calloc_r+0x5c>
   899a8:	89000604 	addi	r4,r17,24
   899ac:	88000415 	stw	zero,16(r17)
   899b0:	88000515 	stw	zero,20(r17)
   899b4:	003feb06 	br	89964 <_calloc_r+0x5c>
   899b8:	0087bc80 	call	87bc8 <memset>
   899bc:	8805883a 	mov	r2,r17
   899c0:	dfc00117 	ldw	ra,4(sp)
   899c4:	dc400017 	ldw	r17,0(sp)
   899c8:	dec00204 	addi	sp,sp,8
   899cc:	f800283a 	ret

000899d0 <_close_r>:
   899d0:	defffd04 	addi	sp,sp,-12
   899d4:	dc000015 	stw	r16,0(sp)
   899d8:	04000274 	movhi	r16,9
   899dc:	84071004 	addi	r16,r16,7232
   899e0:	dc400115 	stw	r17,4(sp)
   899e4:	80000015 	stw	zero,0(r16)
   899e8:	2023883a 	mov	r17,r4
   899ec:	2809883a 	mov	r4,r5
   899f0:	dfc00215 	stw	ra,8(sp)
   899f4:	008af440 	call	8af44 <close>
   899f8:	1007883a 	mov	r3,r2
   899fc:	00bfffc4 	movi	r2,-1
   89a00:	18800626 	beq	r3,r2,89a1c <_close_r+0x4c>
   89a04:	1805883a 	mov	r2,r3
   89a08:	dfc00217 	ldw	ra,8(sp)
   89a0c:	dc400117 	ldw	r17,4(sp)
   89a10:	dc000017 	ldw	r16,0(sp)
   89a14:	dec00304 	addi	sp,sp,12
   89a18:	f800283a 	ret
   89a1c:	80800017 	ldw	r2,0(r16)
   89a20:	103ff826 	beq	r2,zero,89a04 <_close_r+0x34>
   89a24:	88800015 	stw	r2,0(r17)
   89a28:	1805883a 	mov	r2,r3
   89a2c:	dfc00217 	ldw	ra,8(sp)
   89a30:	dc400117 	ldw	r17,4(sp)
   89a34:	dc000017 	ldw	r16,0(sp)
   89a38:	dec00304 	addi	sp,sp,12
   89a3c:	f800283a 	ret

00089a40 <_fclose_r>:
   89a40:	defffc04 	addi	sp,sp,-16
   89a44:	dc400115 	stw	r17,4(sp)
   89a48:	dc000015 	stw	r16,0(sp)
   89a4c:	dfc00315 	stw	ra,12(sp)
   89a50:	dc800215 	stw	r18,8(sp)
   89a54:	2821883a 	mov	r16,r5
   89a58:	2023883a 	mov	r17,r4
   89a5c:	28002926 	beq	r5,zero,89b04 <_fclose_r+0xc4>
   89a60:	0086a140 	call	86a14 <__sfp_lock_acquire>
   89a64:	88000226 	beq	r17,zero,89a70 <_fclose_r+0x30>
   89a68:	88800e17 	ldw	r2,56(r17)
   89a6c:	10002d26 	beq	r2,zero,89b24 <_fclose_r+0xe4>
   89a70:	8080030f 	ldh	r2,12(r16)
   89a74:	10002226 	beq	r2,zero,89b00 <_fclose_r+0xc0>
   89a78:	8809883a 	mov	r4,r17
   89a7c:	800b883a 	mov	r5,r16
   89a80:	008678c0 	call	8678c <_fflush_r>
   89a84:	1025883a 	mov	r18,r2
   89a88:	80800b17 	ldw	r2,44(r16)
   89a8c:	10000426 	beq	r2,zero,89aa0 <_fclose_r+0x60>
   89a90:	81400717 	ldw	r5,28(r16)
   89a94:	8809883a 	mov	r4,r17
   89a98:	103ee83a 	callr	r2
   89a9c:	10002a16 	blt	r2,zero,89b48 <_fclose_r+0x108>
   89aa0:	8080030b 	ldhu	r2,12(r16)
   89aa4:	1080200c 	andi	r2,r2,128
   89aa8:	1000231e 	bne	r2,zero,89b38 <_fclose_r+0xf8>
   89aac:	81400c17 	ldw	r5,48(r16)
   89ab0:	28000526 	beq	r5,zero,89ac8 <_fclose_r+0x88>
   89ab4:	80801004 	addi	r2,r16,64
   89ab8:	28800226 	beq	r5,r2,89ac4 <_fclose_r+0x84>
   89abc:	8809883a 	mov	r4,r17
   89ac0:	0086ddc0 	call	86ddc <_free_r>
   89ac4:	80000c15 	stw	zero,48(r16)
   89ac8:	81401117 	ldw	r5,68(r16)
   89acc:	28000326 	beq	r5,zero,89adc <_fclose_r+0x9c>
   89ad0:	8809883a 	mov	r4,r17
   89ad4:	0086ddc0 	call	86ddc <_free_r>
   89ad8:	80001115 	stw	zero,68(r16)
   89adc:	8000030d 	sth	zero,12(r16)
   89ae0:	0086a180 	call	86a18 <__sfp_lock_release>
   89ae4:	9005883a 	mov	r2,r18
   89ae8:	dfc00317 	ldw	ra,12(sp)
   89aec:	dc800217 	ldw	r18,8(sp)
   89af0:	dc400117 	ldw	r17,4(sp)
   89af4:	dc000017 	ldw	r16,0(sp)
   89af8:	dec00404 	addi	sp,sp,16
   89afc:	f800283a 	ret
   89b00:	0086a180 	call	86a18 <__sfp_lock_release>
   89b04:	0025883a 	mov	r18,zero
   89b08:	9005883a 	mov	r2,r18
   89b0c:	dfc00317 	ldw	ra,12(sp)
   89b10:	dc800217 	ldw	r18,8(sp)
   89b14:	dc400117 	ldw	r17,4(sp)
   89b18:	dc000017 	ldw	r16,0(sp)
   89b1c:	dec00404 	addi	sp,sp,16
   89b20:	f800283a 	ret
   89b24:	8809883a 	mov	r4,r17
   89b28:	0086a240 	call	86a24 <__sinit>
   89b2c:	8080030f 	ldh	r2,12(r16)
   89b30:	103fd11e 	bne	r2,zero,89a78 <_fclose_r+0x38>
   89b34:	003ff206 	br	89b00 <_fclose_r+0xc0>
   89b38:	81400417 	ldw	r5,16(r16)
   89b3c:	8809883a 	mov	r4,r17
   89b40:	0086ddc0 	call	86ddc <_free_r>
   89b44:	003fd906 	br	89aac <_fclose_r+0x6c>
   89b48:	04bfffc4 	movi	r18,-1
   89b4c:	003fd406 	br	89aa0 <_fclose_r+0x60>

00089b50 <fclose>:
   89b50:	00800274 	movhi	r2,9
   89b54:	10805f04 	addi	r2,r2,380
   89b58:	200b883a 	mov	r5,r4
   89b5c:	11000017 	ldw	r4,0(r2)
   89b60:	0089a401 	jmpi	89a40 <_fclose_r>

00089b64 <_fstat_r>:
   89b64:	defffd04 	addi	sp,sp,-12
   89b68:	dc000015 	stw	r16,0(sp)
   89b6c:	04000274 	movhi	r16,9
   89b70:	84071004 	addi	r16,r16,7232
   89b74:	dc400115 	stw	r17,4(sp)
   89b78:	80000015 	stw	zero,0(r16)
   89b7c:	2023883a 	mov	r17,r4
   89b80:	2809883a 	mov	r4,r5
   89b84:	300b883a 	mov	r5,r6
   89b88:	dfc00215 	stw	ra,8(sp)
   89b8c:	008b0d00 	call	8b0d0 <fstat>
   89b90:	1007883a 	mov	r3,r2
   89b94:	00bfffc4 	movi	r2,-1
   89b98:	18800626 	beq	r3,r2,89bb4 <_fstat_r+0x50>
   89b9c:	1805883a 	mov	r2,r3
   89ba0:	dfc00217 	ldw	ra,8(sp)
   89ba4:	dc400117 	ldw	r17,4(sp)
   89ba8:	dc000017 	ldw	r16,0(sp)
   89bac:	dec00304 	addi	sp,sp,12
   89bb0:	f800283a 	ret
   89bb4:	80800017 	ldw	r2,0(r16)
   89bb8:	103ff826 	beq	r2,zero,89b9c <_fstat_r+0x38>
   89bbc:	88800015 	stw	r2,0(r17)
   89bc0:	1805883a 	mov	r2,r3
   89bc4:	dfc00217 	ldw	ra,8(sp)
   89bc8:	dc400117 	ldw	r17,4(sp)
   89bcc:	dc000017 	ldw	r16,0(sp)
   89bd0:	dec00304 	addi	sp,sp,12
   89bd4:	f800283a 	ret

00089bd8 <_isatty_r>:
   89bd8:	defffd04 	addi	sp,sp,-12
   89bdc:	dc000015 	stw	r16,0(sp)
   89be0:	04000274 	movhi	r16,9
   89be4:	84071004 	addi	r16,r16,7232
   89be8:	dc400115 	stw	r17,4(sp)
   89bec:	80000015 	stw	zero,0(r16)
   89bf0:	2023883a 	mov	r17,r4
   89bf4:	2809883a 	mov	r4,r5
   89bf8:	dfc00215 	stw	ra,8(sp)
   89bfc:	008b3c80 	call	8b3c8 <isatty>
   89c00:	1007883a 	mov	r3,r2
   89c04:	00bfffc4 	movi	r2,-1
   89c08:	18800626 	beq	r3,r2,89c24 <_isatty_r+0x4c>
   89c0c:	1805883a 	mov	r2,r3
   89c10:	dfc00217 	ldw	ra,8(sp)
   89c14:	dc400117 	ldw	r17,4(sp)
   89c18:	dc000017 	ldw	r16,0(sp)
   89c1c:	dec00304 	addi	sp,sp,12
   89c20:	f800283a 	ret
   89c24:	80800017 	ldw	r2,0(r16)
   89c28:	103ff826 	beq	r2,zero,89c0c <_isatty_r+0x34>
   89c2c:	88800015 	stw	r2,0(r17)
   89c30:	1805883a 	mov	r2,r3
   89c34:	dfc00217 	ldw	ra,8(sp)
   89c38:	dc400117 	ldw	r17,4(sp)
   89c3c:	dc000017 	ldw	r16,0(sp)
   89c40:	dec00304 	addi	sp,sp,12
   89c44:	f800283a 	ret

00089c48 <_lseek_r>:
   89c48:	defffd04 	addi	sp,sp,-12
   89c4c:	dc000015 	stw	r16,0(sp)
   89c50:	04000274 	movhi	r16,9
   89c54:	84071004 	addi	r16,r16,7232
   89c58:	dc400115 	stw	r17,4(sp)
   89c5c:	80000015 	stw	zero,0(r16)
   89c60:	2023883a 	mov	r17,r4
   89c64:	2809883a 	mov	r4,r5
   89c68:	300b883a 	mov	r5,r6
   89c6c:	380d883a 	mov	r6,r7
   89c70:	dfc00215 	stw	ra,8(sp)
   89c74:	008b5d80 	call	8b5d8 <lseek>
   89c78:	1007883a 	mov	r3,r2
   89c7c:	00bfffc4 	movi	r2,-1
   89c80:	18800626 	beq	r3,r2,89c9c <_lseek_r+0x54>
   89c84:	1805883a 	mov	r2,r3
   89c88:	dfc00217 	ldw	ra,8(sp)
   89c8c:	dc400117 	ldw	r17,4(sp)
   89c90:	dc000017 	ldw	r16,0(sp)
   89c94:	dec00304 	addi	sp,sp,12
   89c98:	f800283a 	ret
   89c9c:	80800017 	ldw	r2,0(r16)
   89ca0:	103ff826 	beq	r2,zero,89c84 <_lseek_r+0x3c>
   89ca4:	88800015 	stw	r2,0(r17)
   89ca8:	1805883a 	mov	r2,r3
   89cac:	dfc00217 	ldw	ra,8(sp)
   89cb0:	dc400117 	ldw	r17,4(sp)
   89cb4:	dc000017 	ldw	r16,0(sp)
   89cb8:	dec00304 	addi	sp,sp,12
   89cbc:	f800283a 	ret

00089cc0 <_read_r>:
   89cc0:	defffd04 	addi	sp,sp,-12
   89cc4:	dc000015 	stw	r16,0(sp)
   89cc8:	04000274 	movhi	r16,9
   89ccc:	84071004 	addi	r16,r16,7232
   89cd0:	dc400115 	stw	r17,4(sp)
   89cd4:	80000015 	stw	zero,0(r16)
   89cd8:	2023883a 	mov	r17,r4
   89cdc:	2809883a 	mov	r4,r5
   89ce0:	300b883a 	mov	r5,r6
   89ce4:	380d883a 	mov	r6,r7
   89ce8:	dfc00215 	stw	ra,8(sp)
   89cec:	008b7d80 	call	8b7d8 <read>
   89cf0:	1007883a 	mov	r3,r2
   89cf4:	00bfffc4 	movi	r2,-1
   89cf8:	18800626 	beq	r3,r2,89d14 <_read_r+0x54>
   89cfc:	1805883a 	mov	r2,r3
   89d00:	dfc00217 	ldw	ra,8(sp)
   89d04:	dc400117 	ldw	r17,4(sp)
   89d08:	dc000017 	ldw	r16,0(sp)
   89d0c:	dec00304 	addi	sp,sp,12
   89d10:	f800283a 	ret
   89d14:	80800017 	ldw	r2,0(r16)
   89d18:	103ff826 	beq	r2,zero,89cfc <_read_r+0x3c>
   89d1c:	88800015 	stw	r2,0(r17)
   89d20:	1805883a 	mov	r2,r3
   89d24:	dfc00217 	ldw	ra,8(sp)
   89d28:	dc400117 	ldw	r17,4(sp)
   89d2c:	dc000017 	ldw	r16,0(sp)
   89d30:	dec00304 	addi	sp,sp,12
   89d34:	f800283a 	ret

00089d38 <__udivdi3>:
   89d38:	defff104 	addi	sp,sp,-60
   89d3c:	0015883a 	mov	r10,zero
   89d40:	2005883a 	mov	r2,r4
   89d44:	3011883a 	mov	r8,r6
   89d48:	df000d15 	stw	fp,52(sp)
   89d4c:	dd400a15 	stw	r21,40(sp)
   89d50:	dcc00815 	stw	r19,32(sp)
   89d54:	dfc00e15 	stw	ra,56(sp)
   89d58:	ddc00c15 	stw	r23,48(sp)
   89d5c:	dd800b15 	stw	r22,44(sp)
   89d60:	dd000915 	stw	r20,36(sp)
   89d64:	dc800715 	stw	r18,28(sp)
   89d68:	dc400615 	stw	r17,24(sp)
   89d6c:	dc000515 	stw	r16,20(sp)
   89d70:	da800315 	stw	r10,12(sp)
   89d74:	4027883a 	mov	r19,r8
   89d78:	1039883a 	mov	fp,r2
   89d7c:	282b883a 	mov	r21,r5
   89d80:	da800415 	stw	r10,16(sp)
   89d84:	3800401e 	bne	r7,zero,89e88 <__udivdi3+0x150>
   89d88:	2a006536 	bltu	r5,r8,89f20 <__udivdi3+0x1e8>
   89d8c:	4000b526 	beq	r8,zero,8a064 <__udivdi3+0x32c>
   89d90:	00bfffd4 	movui	r2,65535
   89d94:	14c0ad36 	bltu	r2,r19,8a04c <__udivdi3+0x314>
   89d98:	00803fc4 	movi	r2,255
   89d9c:	14c15e36 	bltu	r2,r19,8a318 <__udivdi3+0x5e0>
   89da0:	000b883a 	mov	r5,zero
   89da4:	0005883a 	mov	r2,zero
   89da8:	9884d83a 	srl	r2,r19,r2
   89dac:	01000274 	movhi	r4,9
   89db0:	2138ff04 	addi	r4,r4,-7172
   89db4:	01800804 	movi	r6,32
   89db8:	1105883a 	add	r2,r2,r4
   89dbc:	10c00003 	ldbu	r3,0(r2)
   89dc0:	28c7883a 	add	r3,r5,r3
   89dc4:	30e9c83a 	sub	r20,r6,r3
   89dc8:	a0010a1e 	bne	r20,zero,8a1f4 <__udivdi3+0x4bc>
   89dcc:	982ed43a 	srli	r23,r19,16
   89dd0:	acebc83a 	sub	r21,r21,r19
   89dd4:	9dbfffcc 	andi	r22,r19,65535
   89dd8:	05000044 	movi	r20,1
   89ddc:	a809883a 	mov	r4,r21
   89de0:	b80b883a 	mov	r5,r23
   89de4:	0081eb00 	call	81eb0 <__udivsi3>
   89de8:	100b883a 	mov	r5,r2
   89dec:	b009883a 	mov	r4,r22
   89df0:	1021883a 	mov	r16,r2
   89df4:	00824b00 	call	824b0 <__mulsi3>
   89df8:	a809883a 	mov	r4,r21
   89dfc:	b80b883a 	mov	r5,r23
   89e00:	1023883a 	mov	r17,r2
   89e04:	0081eb80 	call	81eb8 <__umodsi3>
   89e08:	1004943a 	slli	r2,r2,16
   89e0c:	e006d43a 	srli	r3,fp,16
   89e10:	10c4b03a 	or	r2,r2,r3
   89e14:	1440042e 	bgeu	r2,r17,89e28 <__udivdi3+0xf0>
   89e18:	14c5883a 	add	r2,r2,r19
   89e1c:	843fffc4 	addi	r16,r16,-1
   89e20:	14c00136 	bltu	r2,r19,89e28 <__udivdi3+0xf0>
   89e24:	14415c36 	bltu	r2,r17,8a398 <__udivdi3+0x660>
   89e28:	1463c83a 	sub	r17,r2,r17
   89e2c:	8809883a 	mov	r4,r17
   89e30:	b80b883a 	mov	r5,r23
   89e34:	0081eb00 	call	81eb0 <__udivsi3>
   89e38:	100b883a 	mov	r5,r2
   89e3c:	b009883a 	mov	r4,r22
   89e40:	102b883a 	mov	r21,r2
   89e44:	00824b00 	call	824b0 <__mulsi3>
   89e48:	8809883a 	mov	r4,r17
   89e4c:	b80b883a 	mov	r5,r23
   89e50:	1025883a 	mov	r18,r2
   89e54:	0081eb80 	call	81eb8 <__umodsi3>
   89e58:	1004943a 	slli	r2,r2,16
   89e5c:	e0ffffcc 	andi	r3,fp,65535
   89e60:	10c4b03a 	or	r2,r2,r3
   89e64:	1480042e 	bgeu	r2,r18,89e78 <__udivdi3+0x140>
   89e68:	9885883a 	add	r2,r19,r2
   89e6c:	ad7fffc4 	addi	r21,r21,-1
   89e70:	14c00136 	bltu	r2,r19,89e78 <__udivdi3+0x140>
   89e74:	14813c36 	bltu	r2,r18,8a368 <__udivdi3+0x630>
   89e78:	8004943a 	slli	r2,r16,16
   89e7c:	a009883a 	mov	r4,r20
   89e80:	a884b03a 	or	r2,r21,r2
   89e84:	00001506 	br	89edc <__udivdi3+0x1a4>
   89e88:	380d883a 	mov	r6,r7
   89e8c:	29c06c36 	bltu	r5,r7,8a040 <__udivdi3+0x308>
   89e90:	00bfffd4 	movui	r2,65535
   89e94:	11c06436 	bltu	r2,r7,8a028 <__udivdi3+0x2f0>
   89e98:	00803fc4 	movi	r2,255
   89e9c:	11c11836 	bltu	r2,r7,8a300 <__udivdi3+0x5c8>
   89ea0:	000b883a 	mov	r5,zero
   89ea4:	0005883a 	mov	r2,zero
   89ea8:	3084d83a 	srl	r2,r6,r2
   89eac:	01000274 	movhi	r4,9
   89eb0:	2138ff04 	addi	r4,r4,-7172
   89eb4:	01c00804 	movi	r7,32
   89eb8:	1105883a 	add	r2,r2,r4
   89ebc:	10c00003 	ldbu	r3,0(r2)
   89ec0:	28c7883a 	add	r3,r5,r3
   89ec4:	38edc83a 	sub	r22,r7,r3
   89ec8:	b000731e 	bne	r22,zero,8a098 <__udivdi3+0x360>
   89ecc:	35400136 	bltu	r6,r21,89ed4 <__udivdi3+0x19c>
   89ed0:	e4c05b36 	bltu	fp,r19,8a040 <__udivdi3+0x308>
   89ed4:	00800044 	movi	r2,1
   89ed8:	0009883a 	mov	r4,zero
   89edc:	d8800315 	stw	r2,12(sp)
   89ee0:	d9400317 	ldw	r5,12(sp)
   89ee4:	d9000415 	stw	r4,16(sp)
   89ee8:	2007883a 	mov	r3,r4
   89eec:	2805883a 	mov	r2,r5
   89ef0:	dfc00e17 	ldw	ra,56(sp)
   89ef4:	df000d17 	ldw	fp,52(sp)
   89ef8:	ddc00c17 	ldw	r23,48(sp)
   89efc:	dd800b17 	ldw	r22,44(sp)
   89f00:	dd400a17 	ldw	r21,40(sp)
   89f04:	dd000917 	ldw	r20,36(sp)
   89f08:	dcc00817 	ldw	r19,32(sp)
   89f0c:	dc800717 	ldw	r18,28(sp)
   89f10:	dc400617 	ldw	r17,24(sp)
   89f14:	dc000517 	ldw	r16,20(sp)
   89f18:	dec00f04 	addi	sp,sp,60
   89f1c:	f800283a 	ret
   89f20:	00bfffd4 	movui	r2,65535
   89f24:	12005636 	bltu	r2,r8,8a080 <__udivdi3+0x348>
   89f28:	00803fc4 	movi	r2,255
   89f2c:	12010036 	bltu	r2,r8,8a330 <__udivdi3+0x5f8>
   89f30:	000b883a 	mov	r5,zero
   89f34:	0005883a 	mov	r2,zero
   89f38:	9884d83a 	srl	r2,r19,r2
   89f3c:	01000274 	movhi	r4,9
   89f40:	2138ff04 	addi	r4,r4,-7172
   89f44:	01800804 	movi	r6,32
   89f48:	1105883a 	add	r2,r2,r4
   89f4c:	10c00003 	ldbu	r3,0(r2)
   89f50:	28c7883a 	add	r3,r5,r3
   89f54:	30cbc83a 	sub	r5,r6,r3
   89f58:	28000626 	beq	r5,zero,89f74 <__udivdi3+0x23c>
   89f5c:	3145c83a 	sub	r2,r6,r5
   89f60:	e084d83a 	srl	r2,fp,r2
   89f64:	a946983a 	sll	r3,r21,r5
   89f68:	e178983a 	sll	fp,fp,r5
   89f6c:	9966983a 	sll	r19,r19,r5
   89f70:	18aab03a 	or	r21,r3,r2
   89f74:	982ed43a 	srli	r23,r19,16
   89f78:	a809883a 	mov	r4,r21
   89f7c:	9cbfffcc 	andi	r18,r19,65535
   89f80:	b80b883a 	mov	r5,r23
   89f84:	0081eb00 	call	81eb0 <__udivsi3>
   89f88:	100b883a 	mov	r5,r2
   89f8c:	9009883a 	mov	r4,r18
   89f90:	1021883a 	mov	r16,r2
   89f94:	00824b00 	call	824b0 <__mulsi3>
   89f98:	a809883a 	mov	r4,r21
   89f9c:	b80b883a 	mov	r5,r23
   89fa0:	1023883a 	mov	r17,r2
   89fa4:	0081eb80 	call	81eb8 <__umodsi3>
   89fa8:	1004943a 	slli	r2,r2,16
   89fac:	e006d43a 	srli	r3,fp,16
   89fb0:	10c4b03a 	or	r2,r2,r3
   89fb4:	1440042e 	bgeu	r2,r17,89fc8 <__udivdi3+0x290>
   89fb8:	14c5883a 	add	r2,r2,r19
   89fbc:	843fffc4 	addi	r16,r16,-1
   89fc0:	14c00136 	bltu	r2,r19,89fc8 <__udivdi3+0x290>
   89fc4:	1440ea36 	bltu	r2,r17,8a370 <__udivdi3+0x638>
   89fc8:	1463c83a 	sub	r17,r2,r17
   89fcc:	8809883a 	mov	r4,r17
   89fd0:	b80b883a 	mov	r5,r23
   89fd4:	0081eb00 	call	81eb0 <__udivsi3>
   89fd8:	100b883a 	mov	r5,r2
   89fdc:	9009883a 	mov	r4,r18
   89fe0:	102b883a 	mov	r21,r2
   89fe4:	00824b00 	call	824b0 <__mulsi3>
   89fe8:	8809883a 	mov	r4,r17
   89fec:	b80b883a 	mov	r5,r23
   89ff0:	1025883a 	mov	r18,r2
   89ff4:	0081eb80 	call	81eb8 <__umodsi3>
   89ff8:	1004943a 	slli	r2,r2,16
   89ffc:	e0ffffcc 	andi	r3,fp,65535
   8a000:	10c4b03a 	or	r2,r2,r3
   8a004:	1480042e 	bgeu	r2,r18,8a018 <__udivdi3+0x2e0>
   8a008:	9885883a 	add	r2,r19,r2
   8a00c:	ad7fffc4 	addi	r21,r21,-1
   8a010:	14c00136 	bltu	r2,r19,8a018 <__udivdi3+0x2e0>
   8a014:	1480d936 	bltu	r2,r18,8a37c <__udivdi3+0x644>
   8a018:	8004943a 	slli	r2,r16,16
   8a01c:	0009883a 	mov	r4,zero
   8a020:	a884b03a 	or	r2,r21,r2
   8a024:	003fad06 	br	89edc <__udivdi3+0x1a4>
   8a028:	00804034 	movhi	r2,256
   8a02c:	10bfffc4 	addi	r2,r2,-1
   8a030:	11c0b636 	bltu	r2,r7,8a30c <__udivdi3+0x5d4>
   8a034:	01400404 	movi	r5,16
   8a038:	2805883a 	mov	r2,r5
   8a03c:	003f9a06 	br	89ea8 <__udivdi3+0x170>
   8a040:	0005883a 	mov	r2,zero
   8a044:	0009883a 	mov	r4,zero
   8a048:	003fa406 	br	89edc <__udivdi3+0x1a4>
   8a04c:	00804034 	movhi	r2,256
   8a050:	10bfffc4 	addi	r2,r2,-1
   8a054:	14c0b336 	bltu	r2,r19,8a324 <__udivdi3+0x5ec>
   8a058:	01400404 	movi	r5,16
   8a05c:	2805883a 	mov	r2,r5
   8a060:	003f5106 	br	89da8 <__udivdi3+0x70>
   8a064:	01000044 	movi	r4,1
   8a068:	000b883a 	mov	r5,zero
   8a06c:	0081eb00 	call	81eb0 <__udivsi3>
   8a070:	1027883a 	mov	r19,r2
   8a074:	00bfffd4 	movui	r2,65535
   8a078:	14fff436 	bltu	r2,r19,8a04c <__udivdi3+0x314>
   8a07c:	003f4606 	br	89d98 <__udivdi3+0x60>
   8a080:	00804034 	movhi	r2,256
   8a084:	10bfffc4 	addi	r2,r2,-1
   8a088:	1200ac36 	bltu	r2,r8,8a33c <__udivdi3+0x604>
   8a08c:	01400404 	movi	r5,16
   8a090:	2805883a 	mov	r2,r5
   8a094:	003fa806 	br	89f38 <__udivdi3+0x200>
   8a098:	3d85c83a 	sub	r2,r7,r22
   8a09c:	3588983a 	sll	r4,r6,r22
   8a0a0:	9886d83a 	srl	r3,r19,r2
   8a0a4:	a8a2d83a 	srl	r17,r21,r2
   8a0a8:	e084d83a 	srl	r2,fp,r2
   8a0ac:	20eeb03a 	or	r23,r4,r3
   8a0b0:	b824d43a 	srli	r18,r23,16
   8a0b4:	ad86983a 	sll	r3,r21,r22
   8a0b8:	8809883a 	mov	r4,r17
   8a0bc:	900b883a 	mov	r5,r18
   8a0c0:	1886b03a 	or	r3,r3,r2
   8a0c4:	d8c00115 	stw	r3,4(sp)
   8a0c8:	bc3fffcc 	andi	r16,r23,65535
   8a0cc:	0081eb00 	call	81eb0 <__udivsi3>
   8a0d0:	100b883a 	mov	r5,r2
   8a0d4:	8009883a 	mov	r4,r16
   8a0d8:	1029883a 	mov	r20,r2
   8a0dc:	00824b00 	call	824b0 <__mulsi3>
   8a0e0:	900b883a 	mov	r5,r18
   8a0e4:	8809883a 	mov	r4,r17
   8a0e8:	102b883a 	mov	r21,r2
   8a0ec:	0081eb80 	call	81eb8 <__umodsi3>
   8a0f0:	d9400117 	ldw	r5,4(sp)
   8a0f4:	1004943a 	slli	r2,r2,16
   8a0f8:	9da6983a 	sll	r19,r19,r22
   8a0fc:	2806d43a 	srli	r3,r5,16
   8a100:	10c4b03a 	or	r2,r2,r3
   8a104:	1540032e 	bgeu	r2,r21,8a114 <__udivdi3+0x3dc>
   8a108:	15c5883a 	add	r2,r2,r23
   8a10c:	a53fffc4 	addi	r20,r20,-1
   8a110:	15c0912e 	bgeu	r2,r23,8a358 <__udivdi3+0x620>
   8a114:	1563c83a 	sub	r17,r2,r21
   8a118:	8809883a 	mov	r4,r17
   8a11c:	900b883a 	mov	r5,r18
   8a120:	0081eb00 	call	81eb0 <__udivsi3>
   8a124:	100b883a 	mov	r5,r2
   8a128:	8009883a 	mov	r4,r16
   8a12c:	102b883a 	mov	r21,r2
   8a130:	00824b00 	call	824b0 <__mulsi3>
   8a134:	8809883a 	mov	r4,r17
   8a138:	900b883a 	mov	r5,r18
   8a13c:	1021883a 	mov	r16,r2
   8a140:	0081eb80 	call	81eb8 <__umodsi3>
   8a144:	da800117 	ldw	r10,4(sp)
   8a148:	1004943a 	slli	r2,r2,16
   8a14c:	50ffffcc 	andi	r3,r10,65535
   8a150:	10c6b03a 	or	r3,r2,r3
   8a154:	1c00032e 	bgeu	r3,r16,8a164 <__udivdi3+0x42c>
   8a158:	1dc7883a 	add	r3,r3,r23
   8a15c:	ad7fffc4 	addi	r21,r21,-1
   8a160:	1dc0792e 	bgeu	r3,r23,8a348 <__udivdi3+0x610>
   8a164:	a004943a 	slli	r2,r20,16
   8a168:	982ed43a 	srli	r23,r19,16
   8a16c:	9cffffcc 	andi	r19,r19,65535
   8a170:	a8a4b03a 	or	r18,r21,r2
   8a174:	947fffcc 	andi	r17,r18,65535
   8a178:	902ad43a 	srli	r21,r18,16
   8a17c:	8809883a 	mov	r4,r17
   8a180:	980b883a 	mov	r5,r19
   8a184:	1c21c83a 	sub	r16,r3,r16
   8a188:	00824b00 	call	824b0 <__mulsi3>
   8a18c:	8809883a 	mov	r4,r17
   8a190:	b80b883a 	mov	r5,r23
   8a194:	1029883a 	mov	r20,r2
   8a198:	00824b00 	call	824b0 <__mulsi3>
   8a19c:	980b883a 	mov	r5,r19
   8a1a0:	a809883a 	mov	r4,r21
   8a1a4:	1023883a 	mov	r17,r2
   8a1a8:	00824b00 	call	824b0 <__mulsi3>
   8a1ac:	a809883a 	mov	r4,r21
   8a1b0:	b80b883a 	mov	r5,r23
   8a1b4:	1027883a 	mov	r19,r2
   8a1b8:	00824b00 	call	824b0 <__mulsi3>
   8a1bc:	1009883a 	mov	r4,r2
   8a1c0:	a004d43a 	srli	r2,r20,16
   8a1c4:	8ce3883a 	add	r17,r17,r19
   8a1c8:	1447883a 	add	r3,r2,r17
   8a1cc:	1cc0022e 	bgeu	r3,r19,8a1d8 <__udivdi3+0x4a0>
   8a1d0:	00800074 	movhi	r2,1
   8a1d4:	2089883a 	add	r4,r4,r2
   8a1d8:	1804d43a 	srli	r2,r3,16
   8a1dc:	2085883a 	add	r2,r4,r2
   8a1e0:	80804436 	bltu	r16,r2,8a2f4 <__udivdi3+0x5bc>
   8a1e4:	80803e26 	beq	r16,r2,8a2e0 <__udivdi3+0x5a8>
   8a1e8:	9005883a 	mov	r2,r18
   8a1ec:	0009883a 	mov	r4,zero
   8a1f0:	003f3a06 	br	89edc <__udivdi3+0x1a4>
   8a1f4:	9d26983a 	sll	r19,r19,r20
   8a1f8:	3505c83a 	sub	r2,r6,r20
   8a1fc:	a8a2d83a 	srl	r17,r21,r2
   8a200:	982ed43a 	srli	r23,r19,16
   8a204:	e084d83a 	srl	r2,fp,r2
   8a208:	ad06983a 	sll	r3,r21,r20
   8a20c:	8809883a 	mov	r4,r17
   8a210:	b80b883a 	mov	r5,r23
   8a214:	1886b03a 	or	r3,r3,r2
   8a218:	d8c00015 	stw	r3,0(sp)
   8a21c:	9dbfffcc 	andi	r22,r19,65535
   8a220:	0081eb00 	call	81eb0 <__udivsi3>
   8a224:	100b883a 	mov	r5,r2
   8a228:	b009883a 	mov	r4,r22
   8a22c:	d8800215 	stw	r2,8(sp)
   8a230:	00824b00 	call	824b0 <__mulsi3>
   8a234:	8809883a 	mov	r4,r17
   8a238:	b80b883a 	mov	r5,r23
   8a23c:	102b883a 	mov	r21,r2
   8a240:	0081eb80 	call	81eb8 <__umodsi3>
   8a244:	d9000017 	ldw	r4,0(sp)
   8a248:	1004943a 	slli	r2,r2,16
   8a24c:	2006d43a 	srli	r3,r4,16
   8a250:	10c4b03a 	or	r2,r2,r3
   8a254:	1540052e 	bgeu	r2,r21,8a26c <__udivdi3+0x534>
   8a258:	d9400217 	ldw	r5,8(sp)
   8a25c:	14c5883a 	add	r2,r2,r19
   8a260:	297fffc4 	addi	r5,r5,-1
   8a264:	d9400215 	stw	r5,8(sp)
   8a268:	14c0462e 	bgeu	r2,r19,8a384 <__udivdi3+0x64c>
   8a26c:	1563c83a 	sub	r17,r2,r21
   8a270:	8809883a 	mov	r4,r17
   8a274:	b80b883a 	mov	r5,r23
   8a278:	0081eb00 	call	81eb0 <__udivsi3>
   8a27c:	100b883a 	mov	r5,r2
   8a280:	b009883a 	mov	r4,r22
   8a284:	1025883a 	mov	r18,r2
   8a288:	00824b00 	call	824b0 <__mulsi3>
   8a28c:	8809883a 	mov	r4,r17
   8a290:	b80b883a 	mov	r5,r23
   8a294:	1021883a 	mov	r16,r2
   8a298:	0081eb80 	call	81eb8 <__umodsi3>
   8a29c:	da800017 	ldw	r10,0(sp)
   8a2a0:	1004943a 	slli	r2,r2,16
   8a2a4:	50ffffcc 	andi	r3,r10,65535
   8a2a8:	10c6b03a 	or	r3,r2,r3
   8a2ac:	1c00062e 	bgeu	r3,r16,8a2c8 <__udivdi3+0x590>
   8a2b0:	1cc7883a 	add	r3,r3,r19
   8a2b4:	94bfffc4 	addi	r18,r18,-1
   8a2b8:	1cc00336 	bltu	r3,r19,8a2c8 <__udivdi3+0x590>
   8a2bc:	1c00022e 	bgeu	r3,r16,8a2c8 <__udivdi3+0x590>
   8a2c0:	94bfffc4 	addi	r18,r18,-1
   8a2c4:	1cc7883a 	add	r3,r3,r19
   8a2c8:	d9000217 	ldw	r4,8(sp)
   8a2cc:	e538983a 	sll	fp,fp,r20
   8a2d0:	1c2bc83a 	sub	r21,r3,r16
   8a2d4:	2004943a 	slli	r2,r4,16
   8a2d8:	90a8b03a 	or	r20,r18,r2
   8a2dc:	003ebf06 	br	89ddc <__udivdi3+0xa4>
   8a2e0:	1804943a 	slli	r2,r3,16
   8a2e4:	e588983a 	sll	r4,fp,r22
   8a2e8:	a0ffffcc 	andi	r3,r20,65535
   8a2ec:	10c5883a 	add	r2,r2,r3
   8a2f0:	20bfbd2e 	bgeu	r4,r2,8a1e8 <__udivdi3+0x4b0>
   8a2f4:	90bfffc4 	addi	r2,r18,-1
   8a2f8:	0009883a 	mov	r4,zero
   8a2fc:	003ef706 	br	89edc <__udivdi3+0x1a4>
   8a300:	01400204 	movi	r5,8
   8a304:	2805883a 	mov	r2,r5
   8a308:	003ee706 	br	89ea8 <__udivdi3+0x170>
   8a30c:	01400604 	movi	r5,24
   8a310:	2805883a 	mov	r2,r5
   8a314:	003ee406 	br	89ea8 <__udivdi3+0x170>
   8a318:	01400204 	movi	r5,8
   8a31c:	2805883a 	mov	r2,r5
   8a320:	003ea106 	br	89da8 <__udivdi3+0x70>
   8a324:	01400604 	movi	r5,24
   8a328:	2805883a 	mov	r2,r5
   8a32c:	003e9e06 	br	89da8 <__udivdi3+0x70>
   8a330:	01400204 	movi	r5,8
   8a334:	2805883a 	mov	r2,r5
   8a338:	003eff06 	br	89f38 <__udivdi3+0x200>
   8a33c:	01400604 	movi	r5,24
   8a340:	2805883a 	mov	r2,r5
   8a344:	003efc06 	br	89f38 <__udivdi3+0x200>
   8a348:	1c3f862e 	bgeu	r3,r16,8a164 <__udivdi3+0x42c>
   8a34c:	1dc7883a 	add	r3,r3,r23
   8a350:	ad7fffc4 	addi	r21,r21,-1
   8a354:	003f8306 	br	8a164 <__udivdi3+0x42c>
   8a358:	157f6e2e 	bgeu	r2,r21,8a114 <__udivdi3+0x3dc>
   8a35c:	a53fffc4 	addi	r20,r20,-1
   8a360:	15c5883a 	add	r2,r2,r23
   8a364:	003f6b06 	br	8a114 <__udivdi3+0x3dc>
   8a368:	ad7fffc4 	addi	r21,r21,-1
   8a36c:	003ec206 	br	89e78 <__udivdi3+0x140>
   8a370:	843fffc4 	addi	r16,r16,-1
   8a374:	14c5883a 	add	r2,r2,r19
   8a378:	003f1306 	br	89fc8 <__udivdi3+0x290>
   8a37c:	ad7fffc4 	addi	r21,r21,-1
   8a380:	003f2506 	br	8a018 <__udivdi3+0x2e0>
   8a384:	157fb92e 	bgeu	r2,r21,8a26c <__udivdi3+0x534>
   8a388:	297fffc4 	addi	r5,r5,-1
   8a38c:	14c5883a 	add	r2,r2,r19
   8a390:	d9400215 	stw	r5,8(sp)
   8a394:	003fb506 	br	8a26c <__udivdi3+0x534>
   8a398:	843fffc4 	addi	r16,r16,-1
   8a39c:	14c5883a 	add	r2,r2,r19
   8a3a0:	003ea106 	br	89e28 <__udivdi3+0xf0>

0008a3a4 <__umoddi3>:
   8a3a4:	defff004 	addi	sp,sp,-64
   8a3a8:	3011883a 	mov	r8,r6
   8a3ac:	000d883a 	mov	r6,zero
   8a3b0:	dd400b15 	stw	r21,44(sp)
   8a3b4:	dcc00915 	stw	r19,36(sp)
   8a3b8:	dc000615 	stw	r16,24(sp)
   8a3bc:	dfc00f15 	stw	ra,60(sp)
   8a3c0:	df000e15 	stw	fp,56(sp)
   8a3c4:	ddc00d15 	stw	r23,52(sp)
   8a3c8:	dd800c15 	stw	r22,48(sp)
   8a3cc:	dd000a15 	stw	r20,40(sp)
   8a3d0:	dc800815 	stw	r18,32(sp)
   8a3d4:	dc400715 	stw	r17,28(sp)
   8a3d8:	2817883a 	mov	r11,r5
   8a3dc:	d9800415 	stw	r6,16(sp)
   8a3e0:	4027883a 	mov	r19,r8
   8a3e4:	d9800515 	stw	r6,20(sp)
   8a3e8:	2021883a 	mov	r16,r4
   8a3ec:	282b883a 	mov	r21,r5
   8a3f0:	38002c1e 	bne	r7,zero,8a4a4 <__umoddi3+0x100>
   8a3f4:	2a005636 	bltu	r5,r8,8a550 <__umoddi3+0x1ac>
   8a3f8:	40009a26 	beq	r8,zero,8a664 <__umoddi3+0x2c0>
   8a3fc:	00bfffd4 	movui	r2,65535
   8a400:	14c09236 	bltu	r2,r19,8a64c <__umoddi3+0x2a8>
   8a404:	00803fc4 	movi	r2,255
   8a408:	14c15c36 	bltu	r2,r19,8a97c <__umoddi3+0x5d8>
   8a40c:	000b883a 	mov	r5,zero
   8a410:	0005883a 	mov	r2,zero
   8a414:	9884d83a 	srl	r2,r19,r2
   8a418:	01000274 	movhi	r4,9
   8a41c:	2138ff04 	addi	r4,r4,-7172
   8a420:	01800804 	movi	r6,32
   8a424:	1105883a 	add	r2,r2,r4
   8a428:	10c00003 	ldbu	r3,0(r2)
   8a42c:	28c7883a 	add	r3,r5,r3
   8a430:	30e5c83a 	sub	r18,r6,r3
   8a434:	9000a41e 	bne	r18,zero,8a6c8 <__umoddi3+0x324>
   8a438:	982ed43a 	srli	r23,r19,16
   8a43c:	acebc83a 	sub	r21,r21,r19
   8a440:	9d3fffcc 	andi	r20,r19,65535
   8a444:	002d883a 	mov	r22,zero
   8a448:	a809883a 	mov	r4,r21
   8a44c:	b80b883a 	mov	r5,r23
   8a450:	0081eb00 	call	81eb0 <__udivsi3>
   8a454:	100b883a 	mov	r5,r2
   8a458:	a009883a 	mov	r4,r20
   8a45c:	00824b00 	call	824b0 <__mulsi3>
   8a460:	a809883a 	mov	r4,r21
   8a464:	b80b883a 	mov	r5,r23
   8a468:	1023883a 	mov	r17,r2
   8a46c:	0081eb80 	call	81eb8 <__umodsi3>
   8a470:	1004943a 	slli	r2,r2,16
   8a474:	8006d43a 	srli	r3,r16,16
   8a478:	10c4b03a 	or	r2,r2,r3
   8a47c:	1440032e 	bgeu	r2,r17,8a48c <__umoddi3+0xe8>
   8a480:	14c5883a 	add	r2,r2,r19
   8a484:	14c00136 	bltu	r2,r19,8a48c <__umoddi3+0xe8>
   8a488:	14415836 	bltu	r2,r17,8a9ec <__umoddi3+0x648>
   8a48c:	1463c83a 	sub	r17,r2,r17
   8a490:	8809883a 	mov	r4,r17
   8a494:	b80b883a 	mov	r5,r23
   8a498:	0081eb00 	call	81eb0 <__udivsi3>
   8a49c:	a009883a 	mov	r4,r20
   8a4a0:	00005306 	br	8a5f0 <__umoddi3+0x24c>
   8a4a4:	380d883a 	mov	r6,r7
   8a4a8:	29c0132e 	bgeu	r5,r7,8a4f8 <__umoddi3+0x154>
   8a4ac:	d9000415 	stw	r4,16(sp)
   8a4b0:	d9400515 	stw	r5,20(sp)
   8a4b4:	d9400417 	ldw	r5,16(sp)
   8a4b8:	5813883a 	mov	r9,r11
   8a4bc:	2811883a 	mov	r8,r5
   8a4c0:	4005883a 	mov	r2,r8
   8a4c4:	4807883a 	mov	r3,r9
   8a4c8:	dfc00f17 	ldw	ra,60(sp)
   8a4cc:	df000e17 	ldw	fp,56(sp)
   8a4d0:	ddc00d17 	ldw	r23,52(sp)
   8a4d4:	dd800c17 	ldw	r22,48(sp)
   8a4d8:	dd400b17 	ldw	r21,44(sp)
   8a4dc:	dd000a17 	ldw	r20,40(sp)
   8a4e0:	dcc00917 	ldw	r19,36(sp)
   8a4e4:	dc800817 	ldw	r18,32(sp)
   8a4e8:	dc400717 	ldw	r17,28(sp)
   8a4ec:	dc000617 	ldw	r16,24(sp)
   8a4f0:	dec01004 	addi	sp,sp,64
   8a4f4:	f800283a 	ret
   8a4f8:	00bfffd4 	movui	r2,65535
   8a4fc:	11c06636 	bltu	r2,r7,8a698 <__umoddi3+0x2f4>
   8a500:	00803fc4 	movi	r2,255
   8a504:	11c12036 	bltu	r2,r7,8a988 <__umoddi3+0x5e4>
   8a508:	000b883a 	mov	r5,zero
   8a50c:	0005883a 	mov	r2,zero
   8a510:	3084d83a 	srl	r2,r6,r2
   8a514:	01000274 	movhi	r4,9
   8a518:	2138ff04 	addi	r4,r4,-7172
   8a51c:	01c00804 	movi	r7,32
   8a520:	1105883a 	add	r2,r2,r4
   8a524:	10c00003 	ldbu	r3,0(r2)
   8a528:	28c7883a 	add	r3,r5,r3
   8a52c:	38e5c83a 	sub	r18,r7,r3
   8a530:	9000941e 	bne	r18,zero,8a784 <__umoddi3+0x3e0>
   8a534:	35405e36 	bltu	r6,r21,8a6b0 <__umoddi3+0x30c>
   8a538:	84c05d2e 	bgeu	r16,r19,8a6b0 <__umoddi3+0x30c>
   8a53c:	8011883a 	mov	r8,r16
   8a540:	a813883a 	mov	r9,r21
   8a544:	dc000415 	stw	r16,16(sp)
   8a548:	dd400515 	stw	r21,20(sp)
   8a54c:	003fdc06 	br	8a4c0 <__umoddi3+0x11c>
   8a550:	00bfffd4 	movui	r2,65535
   8a554:	12004a36 	bltu	r2,r8,8a680 <__umoddi3+0x2dc>
   8a558:	00803fc4 	movi	r2,255
   8a55c:	12010d36 	bltu	r2,r8,8a994 <__umoddi3+0x5f0>
   8a560:	000b883a 	mov	r5,zero
   8a564:	0005883a 	mov	r2,zero
   8a568:	9884d83a 	srl	r2,r19,r2
   8a56c:	01000274 	movhi	r4,9
   8a570:	2138ff04 	addi	r4,r4,-7172
   8a574:	01800804 	movi	r6,32
   8a578:	1105883a 	add	r2,r2,r4
   8a57c:	10c00003 	ldbu	r3,0(r2)
   8a580:	28c7883a 	add	r3,r5,r3
   8a584:	30c7c83a 	sub	r3,r6,r3
   8a588:	1800dc1e 	bne	r3,zero,8a8fc <__umoddi3+0x558>
   8a58c:	002d883a 	mov	r22,zero
   8a590:	982ed43a 	srli	r23,r19,16
   8a594:	a809883a 	mov	r4,r21
   8a598:	9cbfffcc 	andi	r18,r19,65535
   8a59c:	b80b883a 	mov	r5,r23
   8a5a0:	0081eb00 	call	81eb0 <__udivsi3>
   8a5a4:	100b883a 	mov	r5,r2
   8a5a8:	9009883a 	mov	r4,r18
   8a5ac:	00824b00 	call	824b0 <__mulsi3>
   8a5b0:	a809883a 	mov	r4,r21
   8a5b4:	b80b883a 	mov	r5,r23
   8a5b8:	1023883a 	mov	r17,r2
   8a5bc:	0081eb80 	call	81eb8 <__umodsi3>
   8a5c0:	1004943a 	slli	r2,r2,16
   8a5c4:	8006d43a 	srli	r3,r16,16
   8a5c8:	10c4b03a 	or	r2,r2,r3
   8a5cc:	1440032e 	bgeu	r2,r17,8a5dc <__umoddi3+0x238>
   8a5d0:	14c5883a 	add	r2,r2,r19
   8a5d4:	14c00136 	bltu	r2,r19,8a5dc <__umoddi3+0x238>
   8a5d8:	14410236 	bltu	r2,r17,8a9e4 <__umoddi3+0x640>
   8a5dc:	1463c83a 	sub	r17,r2,r17
   8a5e0:	8809883a 	mov	r4,r17
   8a5e4:	b80b883a 	mov	r5,r23
   8a5e8:	0081eb00 	call	81eb0 <__udivsi3>
   8a5ec:	9009883a 	mov	r4,r18
   8a5f0:	100b883a 	mov	r5,r2
   8a5f4:	00824b00 	call	824b0 <__mulsi3>
   8a5f8:	8809883a 	mov	r4,r17
   8a5fc:	b80b883a 	mov	r5,r23
   8a600:	102b883a 	mov	r21,r2
   8a604:	0081eb80 	call	81eb8 <__umodsi3>
   8a608:	1004943a 	slli	r2,r2,16
   8a60c:	80ffffcc 	andi	r3,r16,65535
   8a610:	10c4b03a 	or	r2,r2,r3
   8a614:	1540042e 	bgeu	r2,r21,8a628 <__umoddi3+0x284>
   8a618:	14c5883a 	add	r2,r2,r19
   8a61c:	14c00236 	bltu	r2,r19,8a628 <__umoddi3+0x284>
   8a620:	1540012e 	bgeu	r2,r21,8a628 <__umoddi3+0x284>
   8a624:	14c5883a 	add	r2,r2,r19
   8a628:	1545c83a 	sub	r2,r2,r21
   8a62c:	1584d83a 	srl	r2,r2,r22
   8a630:	0013883a 	mov	r9,zero
   8a634:	d8800415 	stw	r2,16(sp)
   8a638:	d8c00417 	ldw	r3,16(sp)
   8a63c:	0005883a 	mov	r2,zero
   8a640:	d8800515 	stw	r2,20(sp)
   8a644:	1811883a 	mov	r8,r3
   8a648:	003f9d06 	br	8a4c0 <__umoddi3+0x11c>
   8a64c:	00804034 	movhi	r2,256
   8a650:	10bfffc4 	addi	r2,r2,-1
   8a654:	14c0c636 	bltu	r2,r19,8a970 <__umoddi3+0x5cc>
   8a658:	01400404 	movi	r5,16
   8a65c:	2805883a 	mov	r2,r5
   8a660:	003f6c06 	br	8a414 <__umoddi3+0x70>
   8a664:	01000044 	movi	r4,1
   8a668:	000b883a 	mov	r5,zero
   8a66c:	0081eb00 	call	81eb0 <__udivsi3>
   8a670:	1027883a 	mov	r19,r2
   8a674:	00bfffd4 	movui	r2,65535
   8a678:	14fff436 	bltu	r2,r19,8a64c <__umoddi3+0x2a8>
   8a67c:	003f6106 	br	8a404 <__umoddi3+0x60>
   8a680:	00804034 	movhi	r2,256
   8a684:	10bfffc4 	addi	r2,r2,-1
   8a688:	1200c536 	bltu	r2,r8,8a9a0 <__umoddi3+0x5fc>
   8a68c:	01400404 	movi	r5,16
   8a690:	2805883a 	mov	r2,r5
   8a694:	003fb406 	br	8a568 <__umoddi3+0x1c4>
   8a698:	00804034 	movhi	r2,256
   8a69c:	10bfffc4 	addi	r2,r2,-1
   8a6a0:	11c0c236 	bltu	r2,r7,8a9ac <__umoddi3+0x608>
   8a6a4:	01400404 	movi	r5,16
   8a6a8:	2805883a 	mov	r2,r5
   8a6ac:	003f9806 	br	8a510 <__umoddi3+0x16c>
   8a6b0:	84c9c83a 	sub	r4,r16,r19
   8a6b4:	8105803a 	cmpltu	r2,r16,r4
   8a6b8:	a987c83a 	sub	r3,r21,r6
   8a6bc:	18abc83a 	sub	r21,r3,r2
   8a6c0:	2021883a 	mov	r16,r4
   8a6c4:	003f9d06 	br	8a53c <__umoddi3+0x198>
   8a6c8:	9ca6983a 	sll	r19,r19,r18
   8a6cc:	3485c83a 	sub	r2,r6,r18
   8a6d0:	a8a2d83a 	srl	r17,r21,r2
   8a6d4:	982ed43a 	srli	r23,r19,16
   8a6d8:	ac86983a 	sll	r3,r21,r18
   8a6dc:	8084d83a 	srl	r2,r16,r2
   8a6e0:	8809883a 	mov	r4,r17
   8a6e4:	b80b883a 	mov	r5,r23
   8a6e8:	18b8b03a 	or	fp,r3,r2
   8a6ec:	9d3fffcc 	andi	r20,r19,65535
   8a6f0:	0081eb00 	call	81eb0 <__udivsi3>
   8a6f4:	100b883a 	mov	r5,r2
   8a6f8:	a009883a 	mov	r4,r20
   8a6fc:	00824b00 	call	824b0 <__mulsi3>
   8a700:	8809883a 	mov	r4,r17
   8a704:	b80b883a 	mov	r5,r23
   8a708:	102b883a 	mov	r21,r2
   8a70c:	0081eb80 	call	81eb8 <__umodsi3>
   8a710:	1004943a 	slli	r2,r2,16
   8a714:	e006d43a 	srli	r3,fp,16
   8a718:	902d883a 	mov	r22,r18
   8a71c:	10c4b03a 	or	r2,r2,r3
   8a720:	1540022e 	bgeu	r2,r21,8a72c <__umoddi3+0x388>
   8a724:	14c5883a 	add	r2,r2,r19
   8a728:	14c0ab2e 	bgeu	r2,r19,8a9d8 <__umoddi3+0x634>
   8a72c:	1563c83a 	sub	r17,r2,r21
   8a730:	8809883a 	mov	r4,r17
   8a734:	b80b883a 	mov	r5,r23
   8a738:	0081eb00 	call	81eb0 <__udivsi3>
   8a73c:	100b883a 	mov	r5,r2
   8a740:	a009883a 	mov	r4,r20
   8a744:	00824b00 	call	824b0 <__mulsi3>
   8a748:	8809883a 	mov	r4,r17
   8a74c:	b80b883a 	mov	r5,r23
   8a750:	102b883a 	mov	r21,r2
   8a754:	0081eb80 	call	81eb8 <__umodsi3>
   8a758:	1004943a 	slli	r2,r2,16
   8a75c:	e0ffffcc 	andi	r3,fp,65535
   8a760:	10c4b03a 	or	r2,r2,r3
   8a764:	1540042e 	bgeu	r2,r21,8a778 <__umoddi3+0x3d4>
   8a768:	14c5883a 	add	r2,r2,r19
   8a76c:	14c00236 	bltu	r2,r19,8a778 <__umoddi3+0x3d4>
   8a770:	1540012e 	bgeu	r2,r21,8a778 <__umoddi3+0x3d4>
   8a774:	14c5883a 	add	r2,r2,r19
   8a778:	84a0983a 	sll	r16,r16,r18
   8a77c:	156bc83a 	sub	r21,r2,r21
   8a780:	003f3106 	br	8a448 <__umoddi3+0xa4>
   8a784:	3c8fc83a 	sub	r7,r7,r18
   8a788:	3486983a 	sll	r3,r6,r18
   8a78c:	99c4d83a 	srl	r2,r19,r7
   8a790:	a9e2d83a 	srl	r17,r21,r7
   8a794:	ac8c983a 	sll	r6,r21,r18
   8a798:	18acb03a 	or	r22,r3,r2
   8a79c:	b02ed43a 	srli	r23,r22,16
   8a7a0:	81c4d83a 	srl	r2,r16,r7
   8a7a4:	8809883a 	mov	r4,r17
   8a7a8:	b80b883a 	mov	r5,r23
   8a7ac:	308cb03a 	or	r6,r6,r2
   8a7b0:	d9c00315 	stw	r7,12(sp)
   8a7b4:	d9800215 	stw	r6,8(sp)
   8a7b8:	b53fffcc 	andi	r20,r22,65535
   8a7bc:	0081eb00 	call	81eb0 <__udivsi3>
   8a7c0:	100b883a 	mov	r5,r2
   8a7c4:	a009883a 	mov	r4,r20
   8a7c8:	1039883a 	mov	fp,r2
   8a7cc:	00824b00 	call	824b0 <__mulsi3>
   8a7d0:	8809883a 	mov	r4,r17
   8a7d4:	b80b883a 	mov	r5,r23
   8a7d8:	102b883a 	mov	r21,r2
   8a7dc:	0081eb80 	call	81eb8 <__umodsi3>
   8a7e0:	d9000217 	ldw	r4,8(sp)
   8a7e4:	1004943a 	slli	r2,r2,16
   8a7e8:	9ca6983a 	sll	r19,r19,r18
   8a7ec:	2006d43a 	srli	r3,r4,16
   8a7f0:	84a0983a 	sll	r16,r16,r18
   8a7f4:	dcc00015 	stw	r19,0(sp)
   8a7f8:	10c4b03a 	or	r2,r2,r3
   8a7fc:	dc000115 	stw	r16,4(sp)
   8a800:	1540032e 	bgeu	r2,r21,8a810 <__umoddi3+0x46c>
   8a804:	1585883a 	add	r2,r2,r22
   8a808:	e73fffc4 	addi	fp,fp,-1
   8a80c:	15806e2e 	bgeu	r2,r22,8a9c8 <__umoddi3+0x624>
   8a810:	1563c83a 	sub	r17,r2,r21
   8a814:	8809883a 	mov	r4,r17
   8a818:	b80b883a 	mov	r5,r23
   8a81c:	0081eb00 	call	81eb0 <__udivsi3>
   8a820:	100b883a 	mov	r5,r2
   8a824:	a009883a 	mov	r4,r20
   8a828:	1021883a 	mov	r16,r2
   8a82c:	00824b00 	call	824b0 <__mulsi3>
   8a830:	b80b883a 	mov	r5,r23
   8a834:	8809883a 	mov	r4,r17
   8a838:	1029883a 	mov	r20,r2
   8a83c:	0081eb80 	call	81eb8 <__umodsi3>
   8a840:	d9400217 	ldw	r5,8(sp)
   8a844:	1004943a 	slli	r2,r2,16
   8a848:	28ffffcc 	andi	r3,r5,65535
   8a84c:	10c4b03a 	or	r2,r2,r3
   8a850:	1500032e 	bgeu	r2,r20,8a860 <__umoddi3+0x4bc>
   8a854:	1585883a 	add	r2,r2,r22
   8a858:	843fffc4 	addi	r16,r16,-1
   8a85c:	1580562e 	bgeu	r2,r22,8a9b8 <__umoddi3+0x614>
   8a860:	d9800017 	ldw	r6,0(sp)
   8a864:	e022943a 	slli	r17,fp,16
   8a868:	302ed43a 	srli	r23,r6,16
   8a86c:	8462b03a 	or	r17,r16,r17
   8a870:	34ffffcc 	andi	r19,r6,65535
   8a874:	882ad43a 	srli	r21,r17,16
   8a878:	8c7fffcc 	andi	r17,r17,65535
   8a87c:	8809883a 	mov	r4,r17
   8a880:	980b883a 	mov	r5,r19
   8a884:	1521c83a 	sub	r16,r2,r20
   8a888:	00824b00 	call	824b0 <__mulsi3>
   8a88c:	8809883a 	mov	r4,r17
   8a890:	b80b883a 	mov	r5,r23
   8a894:	1029883a 	mov	r20,r2
   8a898:	00824b00 	call	824b0 <__mulsi3>
   8a89c:	980b883a 	mov	r5,r19
   8a8a0:	a809883a 	mov	r4,r21
   8a8a4:	1023883a 	mov	r17,r2
   8a8a8:	00824b00 	call	824b0 <__mulsi3>
   8a8ac:	a809883a 	mov	r4,r21
   8a8b0:	b80b883a 	mov	r5,r23
   8a8b4:	1027883a 	mov	r19,r2
   8a8b8:	00824b00 	call	824b0 <__mulsi3>
   8a8bc:	100b883a 	mov	r5,r2
   8a8c0:	a004d43a 	srli	r2,r20,16
   8a8c4:	8ce3883a 	add	r17,r17,r19
   8a8c8:	1449883a 	add	r4,r2,r17
   8a8cc:	24c0022e 	bgeu	r4,r19,8a8d8 <__umoddi3+0x534>
   8a8d0:	00800074 	movhi	r2,1
   8a8d4:	288b883a 	add	r5,r5,r2
   8a8d8:	2004d43a 	srli	r2,r4,16
   8a8dc:	2008943a 	slli	r4,r4,16
   8a8e0:	a0ffffcc 	andi	r3,r20,65535
   8a8e4:	288d883a 	add	r6,r5,r2
   8a8e8:	20c9883a 	add	r4,r4,r3
   8a8ec:	81800b36 	bltu	r16,r6,8a91c <__umoddi3+0x578>
   8a8f0:	81804026 	beq	r16,r6,8a9f4 <__umoddi3+0x650>
   8a8f4:	818dc83a 	sub	r6,r16,r6
   8a8f8:	00000f06 	br	8a938 <__umoddi3+0x594>
   8a8fc:	30c5c83a 	sub	r2,r6,r3
   8a900:	182d883a 	mov	r22,r3
   8a904:	8084d83a 	srl	r2,r16,r2
   8a908:	a8c6983a 	sll	r3,r21,r3
   8a90c:	9da6983a 	sll	r19,r19,r22
   8a910:	85a0983a 	sll	r16,r16,r22
   8a914:	18aab03a 	or	r21,r3,r2
   8a918:	003f1d06 	br	8a590 <__umoddi3+0x1ec>
   8a91c:	d8c00017 	ldw	r3,0(sp)
   8a920:	20c5c83a 	sub	r2,r4,r3
   8a924:	2089803a 	cmpltu	r4,r4,r2
   8a928:	3587c83a 	sub	r3,r6,r22
   8a92c:	1907c83a 	sub	r3,r3,r4
   8a930:	80cdc83a 	sub	r6,r16,r3
   8a934:	1009883a 	mov	r4,r2
   8a938:	d9400117 	ldw	r5,4(sp)
   8a93c:	2905c83a 	sub	r2,r5,r4
   8a940:	2887803a 	cmpltu	r3,r5,r2
   8a944:	30c7c83a 	sub	r3,r6,r3
   8a948:	d9800317 	ldw	r6,12(sp)
   8a94c:	1484d83a 	srl	r2,r2,r18
   8a950:	1988983a 	sll	r4,r3,r6
   8a954:	1c86d83a 	srl	r3,r3,r18
   8a958:	2088b03a 	or	r4,r4,r2
   8a95c:	2011883a 	mov	r8,r4
   8a960:	1813883a 	mov	r9,r3
   8a964:	d9000415 	stw	r4,16(sp)
   8a968:	d8c00515 	stw	r3,20(sp)
   8a96c:	003ed406 	br	8a4c0 <__umoddi3+0x11c>
   8a970:	01400604 	movi	r5,24
   8a974:	2805883a 	mov	r2,r5
   8a978:	003ea606 	br	8a414 <__umoddi3+0x70>
   8a97c:	01400204 	movi	r5,8
   8a980:	2805883a 	mov	r2,r5
   8a984:	003ea306 	br	8a414 <__umoddi3+0x70>
   8a988:	01400204 	movi	r5,8
   8a98c:	2805883a 	mov	r2,r5
   8a990:	003edf06 	br	8a510 <__umoddi3+0x16c>
   8a994:	01400204 	movi	r5,8
   8a998:	2805883a 	mov	r2,r5
   8a99c:	003ef206 	br	8a568 <__umoddi3+0x1c4>
   8a9a0:	01400604 	movi	r5,24
   8a9a4:	2805883a 	mov	r2,r5
   8a9a8:	003eef06 	br	8a568 <__umoddi3+0x1c4>
   8a9ac:	01400604 	movi	r5,24
   8a9b0:	2805883a 	mov	r2,r5
   8a9b4:	003ed606 	br	8a510 <__umoddi3+0x16c>
   8a9b8:	153fa92e 	bgeu	r2,r20,8a860 <__umoddi3+0x4bc>
   8a9bc:	843fffc4 	addi	r16,r16,-1
   8a9c0:	1585883a 	add	r2,r2,r22
   8a9c4:	003fa606 	br	8a860 <__umoddi3+0x4bc>
   8a9c8:	157f912e 	bgeu	r2,r21,8a810 <__umoddi3+0x46c>
   8a9cc:	e73fffc4 	addi	fp,fp,-1
   8a9d0:	1585883a 	add	r2,r2,r22
   8a9d4:	003f8e06 	br	8a810 <__umoddi3+0x46c>
   8a9d8:	157f542e 	bgeu	r2,r21,8a72c <__umoddi3+0x388>
   8a9dc:	14c5883a 	add	r2,r2,r19
   8a9e0:	003f5206 	br	8a72c <__umoddi3+0x388>
   8a9e4:	14c5883a 	add	r2,r2,r19
   8a9e8:	003efc06 	br	8a5dc <__umoddi3+0x238>
   8a9ec:	14c5883a 	add	r2,r2,r19
   8a9f0:	003ea606 	br	8a48c <__umoddi3+0xe8>
   8a9f4:	d8800117 	ldw	r2,4(sp)
   8a9f8:	113fc836 	bltu	r2,r4,8a91c <__umoddi3+0x578>
   8a9fc:	000d883a 	mov	r6,zero
   8aa00:	003fcd06 	br	8a938 <__umoddi3+0x594>

0008aa04 <__eqdf2>:
   8aa04:	deffef04 	addi	sp,sp,-68
   8aa08:	dc400f15 	stw	r17,60(sp)
   8aa0c:	dc400404 	addi	r17,sp,16
   8aa10:	2005883a 	mov	r2,r4
   8aa14:	2807883a 	mov	r3,r5
   8aa18:	dc000e15 	stw	r16,56(sp)
   8aa1c:	d809883a 	mov	r4,sp
   8aa20:	880b883a 	mov	r5,r17
   8aa24:	dc000904 	addi	r16,sp,36
   8aa28:	d8c00115 	stw	r3,4(sp)
   8aa2c:	d8800015 	stw	r2,0(sp)
   8aa30:	d9800215 	stw	r6,8(sp)
   8aa34:	dfc01015 	stw	ra,64(sp)
   8aa38:	d9c00315 	stw	r7,12(sp)
   8aa3c:	00823780 	call	82378 <__unpack_d>
   8aa40:	d9000204 	addi	r4,sp,8
   8aa44:	800b883a 	mov	r5,r16
   8aa48:	00823780 	call	82378 <__unpack_d>
   8aa4c:	d8800417 	ldw	r2,16(sp)
   8aa50:	00c00044 	movi	r3,1
   8aa54:	180d883a 	mov	r6,r3
   8aa58:	1880062e 	bgeu	r3,r2,8aa74 <__eqdf2+0x70>
   8aa5c:	d8800917 	ldw	r2,36(sp)
   8aa60:	8809883a 	mov	r4,r17
   8aa64:	800b883a 	mov	r5,r16
   8aa68:	1880022e 	bgeu	r3,r2,8aa74 <__eqdf2+0x70>
   8aa6c:	008ae7c0 	call	8ae7c <__fpcmp_parts_d>
   8aa70:	100d883a 	mov	r6,r2
   8aa74:	3005883a 	mov	r2,r6
   8aa78:	dfc01017 	ldw	ra,64(sp)
   8aa7c:	dc400f17 	ldw	r17,60(sp)
   8aa80:	dc000e17 	ldw	r16,56(sp)
   8aa84:	dec01104 	addi	sp,sp,68
   8aa88:	f800283a 	ret

0008aa8c <__nedf2>:
   8aa8c:	deffef04 	addi	sp,sp,-68
   8aa90:	dc400f15 	stw	r17,60(sp)
   8aa94:	dc400404 	addi	r17,sp,16
   8aa98:	2005883a 	mov	r2,r4
   8aa9c:	2807883a 	mov	r3,r5
   8aaa0:	dc000e15 	stw	r16,56(sp)
   8aaa4:	d809883a 	mov	r4,sp
   8aaa8:	880b883a 	mov	r5,r17
   8aaac:	dc000904 	addi	r16,sp,36
   8aab0:	d8c00115 	stw	r3,4(sp)
   8aab4:	d8800015 	stw	r2,0(sp)
   8aab8:	d9800215 	stw	r6,8(sp)
   8aabc:	dfc01015 	stw	ra,64(sp)
   8aac0:	d9c00315 	stw	r7,12(sp)
   8aac4:	00823780 	call	82378 <__unpack_d>
   8aac8:	d9000204 	addi	r4,sp,8
   8aacc:	800b883a 	mov	r5,r16
   8aad0:	00823780 	call	82378 <__unpack_d>
   8aad4:	d8800417 	ldw	r2,16(sp)
   8aad8:	00c00044 	movi	r3,1
   8aadc:	180d883a 	mov	r6,r3
   8aae0:	1880062e 	bgeu	r3,r2,8aafc <__nedf2+0x70>
   8aae4:	d8800917 	ldw	r2,36(sp)
   8aae8:	8809883a 	mov	r4,r17
   8aaec:	800b883a 	mov	r5,r16
   8aaf0:	1880022e 	bgeu	r3,r2,8aafc <__nedf2+0x70>
   8aaf4:	008ae7c0 	call	8ae7c <__fpcmp_parts_d>
   8aaf8:	100d883a 	mov	r6,r2
   8aafc:	3005883a 	mov	r2,r6
   8ab00:	dfc01017 	ldw	ra,64(sp)
   8ab04:	dc400f17 	ldw	r17,60(sp)
   8ab08:	dc000e17 	ldw	r16,56(sp)
   8ab0c:	dec01104 	addi	sp,sp,68
   8ab10:	f800283a 	ret

0008ab14 <__gtdf2>:
   8ab14:	deffef04 	addi	sp,sp,-68
   8ab18:	dc400f15 	stw	r17,60(sp)
   8ab1c:	dc400404 	addi	r17,sp,16
   8ab20:	2005883a 	mov	r2,r4
   8ab24:	2807883a 	mov	r3,r5
   8ab28:	dc000e15 	stw	r16,56(sp)
   8ab2c:	d809883a 	mov	r4,sp
   8ab30:	880b883a 	mov	r5,r17
   8ab34:	dc000904 	addi	r16,sp,36
   8ab38:	d8c00115 	stw	r3,4(sp)
   8ab3c:	d8800015 	stw	r2,0(sp)
   8ab40:	d9800215 	stw	r6,8(sp)
   8ab44:	dfc01015 	stw	ra,64(sp)
   8ab48:	d9c00315 	stw	r7,12(sp)
   8ab4c:	00823780 	call	82378 <__unpack_d>
   8ab50:	d9000204 	addi	r4,sp,8
   8ab54:	800b883a 	mov	r5,r16
   8ab58:	00823780 	call	82378 <__unpack_d>
   8ab5c:	d8800417 	ldw	r2,16(sp)
   8ab60:	00c00044 	movi	r3,1
   8ab64:	01bfffc4 	movi	r6,-1
   8ab68:	1880062e 	bgeu	r3,r2,8ab84 <__gtdf2+0x70>
   8ab6c:	d8800917 	ldw	r2,36(sp)
   8ab70:	8809883a 	mov	r4,r17
   8ab74:	800b883a 	mov	r5,r16
   8ab78:	1880022e 	bgeu	r3,r2,8ab84 <__gtdf2+0x70>
   8ab7c:	008ae7c0 	call	8ae7c <__fpcmp_parts_d>
   8ab80:	100d883a 	mov	r6,r2
   8ab84:	3005883a 	mov	r2,r6
   8ab88:	dfc01017 	ldw	ra,64(sp)
   8ab8c:	dc400f17 	ldw	r17,60(sp)
   8ab90:	dc000e17 	ldw	r16,56(sp)
   8ab94:	dec01104 	addi	sp,sp,68
   8ab98:	f800283a 	ret

0008ab9c <__gedf2>:
   8ab9c:	deffef04 	addi	sp,sp,-68
   8aba0:	dc400f15 	stw	r17,60(sp)
   8aba4:	dc400404 	addi	r17,sp,16
   8aba8:	2005883a 	mov	r2,r4
   8abac:	2807883a 	mov	r3,r5
   8abb0:	dc000e15 	stw	r16,56(sp)
   8abb4:	d809883a 	mov	r4,sp
   8abb8:	880b883a 	mov	r5,r17
   8abbc:	dc000904 	addi	r16,sp,36
   8abc0:	d8c00115 	stw	r3,4(sp)
   8abc4:	d8800015 	stw	r2,0(sp)
   8abc8:	d9800215 	stw	r6,8(sp)
   8abcc:	dfc01015 	stw	ra,64(sp)
   8abd0:	d9c00315 	stw	r7,12(sp)
   8abd4:	00823780 	call	82378 <__unpack_d>
   8abd8:	d9000204 	addi	r4,sp,8
   8abdc:	800b883a 	mov	r5,r16
   8abe0:	00823780 	call	82378 <__unpack_d>
   8abe4:	d8800417 	ldw	r2,16(sp)
   8abe8:	00c00044 	movi	r3,1
   8abec:	01bfffc4 	movi	r6,-1
   8abf0:	1880062e 	bgeu	r3,r2,8ac0c <__gedf2+0x70>
   8abf4:	d8800917 	ldw	r2,36(sp)
   8abf8:	8809883a 	mov	r4,r17
   8abfc:	800b883a 	mov	r5,r16
   8ac00:	1880022e 	bgeu	r3,r2,8ac0c <__gedf2+0x70>
   8ac04:	008ae7c0 	call	8ae7c <__fpcmp_parts_d>
   8ac08:	100d883a 	mov	r6,r2
   8ac0c:	3005883a 	mov	r2,r6
   8ac10:	dfc01017 	ldw	ra,64(sp)
   8ac14:	dc400f17 	ldw	r17,60(sp)
   8ac18:	dc000e17 	ldw	r16,56(sp)
   8ac1c:	dec01104 	addi	sp,sp,68
   8ac20:	f800283a 	ret

0008ac24 <__ltdf2>:
   8ac24:	deffef04 	addi	sp,sp,-68
   8ac28:	dc400f15 	stw	r17,60(sp)
   8ac2c:	dc400404 	addi	r17,sp,16
   8ac30:	2005883a 	mov	r2,r4
   8ac34:	2807883a 	mov	r3,r5
   8ac38:	dc000e15 	stw	r16,56(sp)
   8ac3c:	d809883a 	mov	r4,sp
   8ac40:	880b883a 	mov	r5,r17
   8ac44:	dc000904 	addi	r16,sp,36
   8ac48:	d8c00115 	stw	r3,4(sp)
   8ac4c:	d8800015 	stw	r2,0(sp)
   8ac50:	d9800215 	stw	r6,8(sp)
   8ac54:	dfc01015 	stw	ra,64(sp)
   8ac58:	d9c00315 	stw	r7,12(sp)
   8ac5c:	00823780 	call	82378 <__unpack_d>
   8ac60:	d9000204 	addi	r4,sp,8
   8ac64:	800b883a 	mov	r5,r16
   8ac68:	00823780 	call	82378 <__unpack_d>
   8ac6c:	d8800417 	ldw	r2,16(sp)
   8ac70:	00c00044 	movi	r3,1
   8ac74:	180d883a 	mov	r6,r3
   8ac78:	1880062e 	bgeu	r3,r2,8ac94 <__ltdf2+0x70>
   8ac7c:	d8800917 	ldw	r2,36(sp)
   8ac80:	8809883a 	mov	r4,r17
   8ac84:	800b883a 	mov	r5,r16
   8ac88:	1880022e 	bgeu	r3,r2,8ac94 <__ltdf2+0x70>
   8ac8c:	008ae7c0 	call	8ae7c <__fpcmp_parts_d>
   8ac90:	100d883a 	mov	r6,r2
   8ac94:	3005883a 	mov	r2,r6
   8ac98:	dfc01017 	ldw	ra,64(sp)
   8ac9c:	dc400f17 	ldw	r17,60(sp)
   8aca0:	dc000e17 	ldw	r16,56(sp)
   8aca4:	dec01104 	addi	sp,sp,68
   8aca8:	f800283a 	ret

0008acac <__floatsidf>:
   8acac:	2006d7fa 	srli	r3,r4,31
   8acb0:	defff604 	addi	sp,sp,-40
   8acb4:	008000c4 	movi	r2,3
   8acb8:	dfc00915 	stw	ra,36(sp)
   8acbc:	dcc00815 	stw	r19,32(sp)
   8acc0:	dc800715 	stw	r18,28(sp)
   8acc4:	dc400615 	stw	r17,24(sp)
   8acc8:	dc000515 	stw	r16,20(sp)
   8accc:	d8800015 	stw	r2,0(sp)
   8acd0:	d8c00115 	stw	r3,4(sp)
   8acd4:	20000f1e 	bne	r4,zero,8ad14 <__floatsidf+0x68>
   8acd8:	00800084 	movi	r2,2
   8acdc:	d8800015 	stw	r2,0(sp)
   8ace0:	d809883a 	mov	r4,sp
   8ace4:	00820640 	call	82064 <__pack_d>
   8ace8:	1009883a 	mov	r4,r2
   8acec:	180b883a 	mov	r5,r3
   8acf0:	2005883a 	mov	r2,r4
   8acf4:	2807883a 	mov	r3,r5
   8acf8:	dfc00917 	ldw	ra,36(sp)
   8acfc:	dcc00817 	ldw	r19,32(sp)
   8ad00:	dc800717 	ldw	r18,28(sp)
   8ad04:	dc400617 	ldw	r17,24(sp)
   8ad08:	dc000517 	ldw	r16,20(sp)
   8ad0c:	dec00a04 	addi	sp,sp,40
   8ad10:	f800283a 	ret
   8ad14:	00800f04 	movi	r2,60
   8ad18:	1807003a 	cmpeq	r3,r3,zero
   8ad1c:	d8800215 	stw	r2,8(sp)
   8ad20:	18001126 	beq	r3,zero,8ad68 <__floatsidf+0xbc>
   8ad24:	0027883a 	mov	r19,zero
   8ad28:	2025883a 	mov	r18,r4
   8ad2c:	d9000315 	stw	r4,12(sp)
   8ad30:	dcc00415 	stw	r19,16(sp)
   8ad34:	0081fe40 	call	81fe4 <__clzsi2>
   8ad38:	11000744 	addi	r4,r2,29
   8ad3c:	013fe80e 	bge	zero,r4,8ace0 <__floatsidf+0x34>
   8ad40:	10bfff44 	addi	r2,r2,-3
   8ad44:	10000c16 	blt	r2,zero,8ad78 <__floatsidf+0xcc>
   8ad48:	90a2983a 	sll	r17,r18,r2
   8ad4c:	0021883a 	mov	r16,zero
   8ad50:	d8800217 	ldw	r2,8(sp)
   8ad54:	dc400415 	stw	r17,16(sp)
   8ad58:	dc000315 	stw	r16,12(sp)
   8ad5c:	1105c83a 	sub	r2,r2,r4
   8ad60:	d8800215 	stw	r2,8(sp)
   8ad64:	003fde06 	br	8ace0 <__floatsidf+0x34>
   8ad68:	00a00034 	movhi	r2,32768
   8ad6c:	20800a26 	beq	r4,r2,8ad98 <__floatsidf+0xec>
   8ad70:	0109c83a 	sub	r4,zero,r4
   8ad74:	003feb06 	br	8ad24 <__floatsidf+0x78>
   8ad78:	9006d07a 	srli	r3,r18,1
   8ad7c:	008007c4 	movi	r2,31
   8ad80:	1105c83a 	sub	r2,r2,r4
   8ad84:	1886d83a 	srl	r3,r3,r2
   8ad88:	9922983a 	sll	r17,r19,r4
   8ad8c:	9120983a 	sll	r16,r18,r4
   8ad90:	1c62b03a 	or	r17,r3,r17
   8ad94:	003fee06 	br	8ad50 <__floatsidf+0xa4>
   8ad98:	0009883a 	mov	r4,zero
   8ad9c:	01707834 	movhi	r5,49632
   8ada0:	003fd306 	br	8acf0 <__floatsidf+0x44>

0008ada4 <__fixdfsi>:
   8ada4:	defff804 	addi	sp,sp,-32
   8ada8:	2005883a 	mov	r2,r4
   8adac:	2807883a 	mov	r3,r5
   8adb0:	d809883a 	mov	r4,sp
   8adb4:	d9400204 	addi	r5,sp,8
   8adb8:	d8c00115 	stw	r3,4(sp)
   8adbc:	d8800015 	stw	r2,0(sp)
   8adc0:	dfc00715 	stw	ra,28(sp)
   8adc4:	00823780 	call	82378 <__unpack_d>
   8adc8:	d8c00217 	ldw	r3,8(sp)
   8adcc:	00800084 	movi	r2,2
   8add0:	1880051e 	bne	r3,r2,8ade8 <__fixdfsi+0x44>
   8add4:	0007883a 	mov	r3,zero
   8add8:	1805883a 	mov	r2,r3
   8addc:	dfc00717 	ldw	ra,28(sp)
   8ade0:	dec00804 	addi	sp,sp,32
   8ade4:	f800283a 	ret
   8ade8:	00800044 	movi	r2,1
   8adec:	10fff92e 	bgeu	r2,r3,8add4 <__fixdfsi+0x30>
   8adf0:	00800104 	movi	r2,4
   8adf4:	18800426 	beq	r3,r2,8ae08 <__fixdfsi+0x64>
   8adf8:	d8c00417 	ldw	r3,16(sp)
   8adfc:	183ff516 	blt	r3,zero,8add4 <__fixdfsi+0x30>
   8ae00:	00800784 	movi	r2,30
   8ae04:	10c0080e 	bge	r2,r3,8ae28 <__fixdfsi+0x84>
   8ae08:	d8800317 	ldw	r2,12(sp)
   8ae0c:	1000121e 	bne	r2,zero,8ae58 <__fixdfsi+0xb4>
   8ae10:	00e00034 	movhi	r3,32768
   8ae14:	18ffffc4 	addi	r3,r3,-1
   8ae18:	1805883a 	mov	r2,r3
   8ae1c:	dfc00717 	ldw	ra,28(sp)
   8ae20:	dec00804 	addi	sp,sp,32
   8ae24:	f800283a 	ret
   8ae28:	00800f04 	movi	r2,60
   8ae2c:	10d1c83a 	sub	r8,r2,r3
   8ae30:	40bff804 	addi	r2,r8,-32
   8ae34:	d9800517 	ldw	r6,20(sp)
   8ae38:	d9c00617 	ldw	r7,24(sp)
   8ae3c:	10000816 	blt	r2,zero,8ae60 <__fixdfsi+0xbc>
   8ae40:	3888d83a 	srl	r4,r7,r2
   8ae44:	d8800317 	ldw	r2,12(sp)
   8ae48:	2007883a 	mov	r3,r4
   8ae4c:	103fe226 	beq	r2,zero,8add8 <__fixdfsi+0x34>
   8ae50:	0107c83a 	sub	r3,zero,r4
   8ae54:	003fe006 	br	8add8 <__fixdfsi+0x34>
   8ae58:	00e00034 	movhi	r3,32768
   8ae5c:	003fde06 	br	8add8 <__fixdfsi+0x34>
   8ae60:	39c7883a 	add	r3,r7,r7
   8ae64:	008007c4 	movi	r2,31
   8ae68:	1205c83a 	sub	r2,r2,r8
   8ae6c:	1886983a 	sll	r3,r3,r2
   8ae70:	3208d83a 	srl	r4,r6,r8
   8ae74:	1908b03a 	or	r4,r3,r4
   8ae78:	003ff206 	br	8ae44 <__fixdfsi+0xa0>

0008ae7c <__fpcmp_parts_d>:
   8ae7c:	21800017 	ldw	r6,0(r4)
   8ae80:	00c00044 	movi	r3,1
   8ae84:	19800a2e 	bgeu	r3,r6,8aeb0 <__fpcmp_parts_d+0x34>
   8ae88:	28800017 	ldw	r2,0(r5)
   8ae8c:	1880082e 	bgeu	r3,r2,8aeb0 <__fpcmp_parts_d+0x34>
   8ae90:	00c00104 	movi	r3,4
   8ae94:	30c02626 	beq	r6,r3,8af30 <__fpcmp_parts_d+0xb4>
   8ae98:	10c02226 	beq	r2,r3,8af24 <__fpcmp_parts_d+0xa8>
   8ae9c:	00c00084 	movi	r3,2
   8aea0:	30c00526 	beq	r6,r3,8aeb8 <__fpcmp_parts_d+0x3c>
   8aea4:	10c0071e 	bne	r2,r3,8aec4 <__fpcmp_parts_d+0x48>
   8aea8:	20800117 	ldw	r2,4(r4)
   8aeac:	1000091e 	bne	r2,zero,8aed4 <__fpcmp_parts_d+0x58>
   8aeb0:	00800044 	movi	r2,1
   8aeb4:	f800283a 	ret
   8aeb8:	10c01a1e 	bne	r2,r3,8af24 <__fpcmp_parts_d+0xa8>
   8aebc:	0005883a 	mov	r2,zero
   8aec0:	f800283a 	ret
   8aec4:	22000117 	ldw	r8,4(r4)
   8aec8:	28800117 	ldw	r2,4(r5)
   8aecc:	40800326 	beq	r8,r2,8aedc <__fpcmp_parts_d+0x60>
   8aed0:	403ff726 	beq	r8,zero,8aeb0 <__fpcmp_parts_d+0x34>
   8aed4:	00bfffc4 	movi	r2,-1
   8aed8:	f800283a 	ret
   8aedc:	20c00217 	ldw	r3,8(r4)
   8aee0:	28800217 	ldw	r2,8(r5)
   8aee4:	10fffa16 	blt	r2,r3,8aed0 <__fpcmp_parts_d+0x54>
   8aee8:	18800916 	blt	r3,r2,8af10 <__fpcmp_parts_d+0x94>
   8aeec:	21c00417 	ldw	r7,16(r4)
   8aef0:	28c00417 	ldw	r3,16(r5)
   8aef4:	21800317 	ldw	r6,12(r4)
   8aef8:	28800317 	ldw	r2,12(r5)
   8aefc:	19fff436 	bltu	r3,r7,8aed0 <__fpcmp_parts_d+0x54>
   8af00:	38c00526 	beq	r7,r3,8af18 <__fpcmp_parts_d+0x9c>
   8af04:	38c00236 	bltu	r7,r3,8af10 <__fpcmp_parts_d+0x94>
   8af08:	19ffec1e 	bne	r3,r7,8aebc <__fpcmp_parts_d+0x40>
   8af0c:	30bfeb2e 	bgeu	r6,r2,8aebc <__fpcmp_parts_d+0x40>
   8af10:	403fe71e 	bne	r8,zero,8aeb0 <__fpcmp_parts_d+0x34>
   8af14:	003fef06 	br	8aed4 <__fpcmp_parts_d+0x58>
   8af18:	11bffa2e 	bgeu	r2,r6,8af04 <__fpcmp_parts_d+0x88>
   8af1c:	403fe426 	beq	r8,zero,8aeb0 <__fpcmp_parts_d+0x34>
   8af20:	003fec06 	br	8aed4 <__fpcmp_parts_d+0x58>
   8af24:	28800117 	ldw	r2,4(r5)
   8af28:	103fe11e 	bne	r2,zero,8aeb0 <__fpcmp_parts_d+0x34>
   8af2c:	003fe906 	br	8aed4 <__fpcmp_parts_d+0x58>
   8af30:	11bfdd1e 	bne	r2,r6,8aea8 <__fpcmp_parts_d+0x2c>
   8af34:	28c00117 	ldw	r3,4(r5)
   8af38:	20800117 	ldw	r2,4(r4)
   8af3c:	1885c83a 	sub	r2,r3,r2
   8af40:	f800283a 	ret

0008af44 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8af44:	defff804 	addi	sp,sp,-32
   8af48:	dfc00715 	stw	ra,28(sp)
   8af4c:	df000615 	stw	fp,24(sp)
   8af50:	df000604 	addi	fp,sp,24
   8af54:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8af58:	e0bffc17 	ldw	r2,-16(fp)
   8af5c:	1004803a 	cmplt	r2,r2,zero
   8af60:	1000091e 	bne	r2,zero,8af88 <close+0x44>
   8af64:	e13ffc17 	ldw	r4,-16(fp)
   8af68:	01400304 	movi	r5,12
   8af6c:	00824b00 	call	824b0 <__mulsi3>
   8af70:	1007883a 	mov	r3,r2
   8af74:	00800274 	movhi	r2,9
   8af78:	10bbe104 	addi	r2,r2,-4220
   8af7c:	1887883a 	add	r3,r3,r2
   8af80:	e0ffff15 	stw	r3,-4(fp)
   8af84:	00000106 	br	8af8c <close+0x48>
   8af88:	e03fff15 	stw	zero,-4(fp)
   8af8c:	e0bfff17 	ldw	r2,-4(fp)
   8af90:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   8af94:	e0bffb17 	ldw	r2,-20(fp)
   8af98:	1005003a 	cmpeq	r2,r2,zero
   8af9c:	10001d1e 	bne	r2,zero,8b014 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8afa0:	e0bffb17 	ldw	r2,-20(fp)
   8afa4:	10800017 	ldw	r2,0(r2)
   8afa8:	10800417 	ldw	r2,16(r2)
   8afac:	1005003a 	cmpeq	r2,r2,zero
   8afb0:	1000071e 	bne	r2,zero,8afd0 <close+0x8c>
   8afb4:	e0bffb17 	ldw	r2,-20(fp)
   8afb8:	10800017 	ldw	r2,0(r2)
   8afbc:	10800417 	ldw	r2,16(r2)
   8afc0:	e13ffb17 	ldw	r4,-20(fp)
   8afc4:	103ee83a 	callr	r2
   8afc8:	e0bffe15 	stw	r2,-8(fp)
   8afcc:	00000106 	br	8afd4 <close+0x90>
   8afd0:	e03ffe15 	stw	zero,-8(fp)
   8afd4:	e0bffe17 	ldw	r2,-8(fp)
   8afd8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8afdc:	e13ffc17 	ldw	r4,-16(fp)
   8afe0:	008b95c0 	call	8b95c <alt_release_fd>
    if (rval < 0)
   8afe4:	e0bffa17 	ldw	r2,-24(fp)
   8afe8:	1004403a 	cmpge	r2,r2,zero
   8afec:	1000071e 	bne	r2,zero,8b00c <close+0xc8>
    {
      ALT_ERRNO = -rval;
   8aff0:	008b0440 	call	8b044 <alt_get_errno>
   8aff4:	e0fffa17 	ldw	r3,-24(fp)
   8aff8:	00c7c83a 	sub	r3,zero,r3
   8affc:	10c00015 	stw	r3,0(r2)
      return -1;
   8b000:	00bfffc4 	movi	r2,-1
   8b004:	e0bffd15 	stw	r2,-12(fp)
   8b008:	00000806 	br	8b02c <close+0xe8>
    }
    return 0;
   8b00c:	e03ffd15 	stw	zero,-12(fp)
   8b010:	00000606 	br	8b02c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8b014:	008b0440 	call	8b044 <alt_get_errno>
   8b018:	1007883a 	mov	r3,r2
   8b01c:	00801444 	movi	r2,81
   8b020:	18800015 	stw	r2,0(r3)
    return -1;
   8b024:	00bfffc4 	movi	r2,-1
   8b028:	e0bffd15 	stw	r2,-12(fp)
   8b02c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   8b030:	e037883a 	mov	sp,fp
   8b034:	dfc00117 	ldw	ra,4(sp)
   8b038:	df000017 	ldw	fp,0(sp)
   8b03c:	dec00204 	addi	sp,sp,8
   8b040:	f800283a 	ret

0008b044 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b044:	defffd04 	addi	sp,sp,-12
   8b048:	dfc00215 	stw	ra,8(sp)
   8b04c:	df000115 	stw	fp,4(sp)
   8b050:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8b054:	00800274 	movhi	r2,9
   8b058:	10806804 	addi	r2,r2,416
   8b05c:	10800017 	ldw	r2,0(r2)
   8b060:	1005003a 	cmpeq	r2,r2,zero
   8b064:	1000061e 	bne	r2,zero,8b080 <alt_get_errno+0x3c>
   8b068:	00800274 	movhi	r2,9
   8b06c:	10806804 	addi	r2,r2,416
   8b070:	10800017 	ldw	r2,0(r2)
   8b074:	103ee83a 	callr	r2
   8b078:	e0bfff15 	stw	r2,-4(fp)
   8b07c:	00000306 	br	8b08c <alt_get_errno+0x48>
   8b080:	00800274 	movhi	r2,9
   8b084:	10871004 	addi	r2,r2,7232
   8b088:	e0bfff15 	stw	r2,-4(fp)
   8b08c:	e0bfff17 	ldw	r2,-4(fp)
}
   8b090:	e037883a 	mov	sp,fp
   8b094:	dfc00117 	ldw	ra,4(sp)
   8b098:	df000017 	ldw	fp,0(sp)
   8b09c:	dec00204 	addi	sp,sp,8
   8b0a0:	f800283a 	ret

0008b0a4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   8b0a4:	defffc04 	addi	sp,sp,-16
   8b0a8:	df000315 	stw	fp,12(sp)
   8b0ac:	df000304 	addi	fp,sp,12
   8b0b0:	e13ffd15 	stw	r4,-12(fp)
   8b0b4:	e17ffe15 	stw	r5,-8(fp)
   8b0b8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   8b0bc:	e0bfff17 	ldw	r2,-4(fp)
}
   8b0c0:	e037883a 	mov	sp,fp
   8b0c4:	df000017 	ldw	fp,0(sp)
   8b0c8:	dec00104 	addi	sp,sp,4
   8b0cc:	f800283a 	ret

0008b0d0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8b0d0:	defff904 	addi	sp,sp,-28
   8b0d4:	dfc00615 	stw	ra,24(sp)
   8b0d8:	df000515 	stw	fp,20(sp)
   8b0dc:	df000504 	addi	fp,sp,20
   8b0e0:	e13ffc15 	stw	r4,-16(fp)
   8b0e4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b0e8:	e0bffc17 	ldw	r2,-16(fp)
   8b0ec:	1004803a 	cmplt	r2,r2,zero
   8b0f0:	1000091e 	bne	r2,zero,8b118 <fstat+0x48>
   8b0f4:	e13ffc17 	ldw	r4,-16(fp)
   8b0f8:	01400304 	movi	r5,12
   8b0fc:	00824b00 	call	824b0 <__mulsi3>
   8b100:	1007883a 	mov	r3,r2
   8b104:	00800274 	movhi	r2,9
   8b108:	10bbe104 	addi	r2,r2,-4220
   8b10c:	1887883a 	add	r3,r3,r2
   8b110:	e0ffff15 	stw	r3,-4(fp)
   8b114:	00000106 	br	8b11c <fstat+0x4c>
   8b118:	e03fff15 	stw	zero,-4(fp)
   8b11c:	e0bfff17 	ldw	r2,-4(fp)
   8b120:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8b124:	e0bffb17 	ldw	r2,-20(fp)
   8b128:	1005003a 	cmpeq	r2,r2,zero
   8b12c:	1000121e 	bne	r2,zero,8b178 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8b130:	e0bffb17 	ldw	r2,-20(fp)
   8b134:	10800017 	ldw	r2,0(r2)
   8b138:	10800817 	ldw	r2,32(r2)
   8b13c:	1005003a 	cmpeq	r2,r2,zero
   8b140:	1000081e 	bne	r2,zero,8b164 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
   8b144:	e0bffb17 	ldw	r2,-20(fp)
   8b148:	10800017 	ldw	r2,0(r2)
   8b14c:	10800817 	ldw	r2,32(r2)
   8b150:	e13ffb17 	ldw	r4,-20(fp)
   8b154:	e17ffd17 	ldw	r5,-12(fp)
   8b158:	103ee83a 	callr	r2
   8b15c:	e0bffe15 	stw	r2,-8(fp)
   8b160:	00000b06 	br	8b190 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8b164:	e0fffd17 	ldw	r3,-12(fp)
   8b168:	00880004 	movi	r2,8192
   8b16c:	18800115 	stw	r2,4(r3)
      return 0;
   8b170:	e03ffe15 	stw	zero,-8(fp)
   8b174:	00000606 	br	8b190 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8b178:	008b1a80 	call	8b1a8 <alt_get_errno>
   8b17c:	1007883a 	mov	r3,r2
   8b180:	00801444 	movi	r2,81
   8b184:	18800015 	stw	r2,0(r3)
    return -1;
   8b188:	00bfffc4 	movi	r2,-1
   8b18c:	e0bffe15 	stw	r2,-8(fp)
   8b190:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   8b194:	e037883a 	mov	sp,fp
   8b198:	dfc00117 	ldw	ra,4(sp)
   8b19c:	df000017 	ldw	fp,0(sp)
   8b1a0:	dec00204 	addi	sp,sp,8
   8b1a4:	f800283a 	ret

0008b1a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b1a8:	defffd04 	addi	sp,sp,-12
   8b1ac:	dfc00215 	stw	ra,8(sp)
   8b1b0:	df000115 	stw	fp,4(sp)
   8b1b4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8b1b8:	00800274 	movhi	r2,9
   8b1bc:	10806804 	addi	r2,r2,416
   8b1c0:	10800017 	ldw	r2,0(r2)
   8b1c4:	1005003a 	cmpeq	r2,r2,zero
   8b1c8:	1000061e 	bne	r2,zero,8b1e4 <alt_get_errno+0x3c>
   8b1cc:	00800274 	movhi	r2,9
   8b1d0:	10806804 	addi	r2,r2,416
   8b1d4:	10800017 	ldw	r2,0(r2)
   8b1d8:	103ee83a 	callr	r2
   8b1dc:	e0bfff15 	stw	r2,-4(fp)
   8b1e0:	00000306 	br	8b1f0 <alt_get_errno+0x48>
   8b1e4:	00800274 	movhi	r2,9
   8b1e8:	10871004 	addi	r2,r2,7232
   8b1ec:	e0bfff15 	stw	r2,-4(fp)
   8b1f0:	e0bfff17 	ldw	r2,-4(fp)
}
   8b1f4:	e037883a 	mov	sp,fp
   8b1f8:	dfc00117 	ldw	ra,4(sp)
   8b1fc:	df000017 	ldw	fp,0(sp)
   8b200:	dec00204 	addi	sp,sp,8
   8b204:	f800283a 	ret

0008b208 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   8b208:	deffef04 	addi	sp,sp,-68
   8b20c:	df001015 	stw	fp,64(sp)
   8b210:	df001004 	addi	fp,sp,64
   8b214:	e13ffc15 	stw	r4,-16(fp)
   8b218:	e17ffd15 	stw	r5,-12(fp)
   8b21c:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
   8b220:	00bffa84 	movi	r2,-22
   8b224:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8b228:	e0bffc17 	ldw	r2,-16(fp)
   8b22c:	10800828 	cmpgeui	r2,r2,32
   8b230:	1000601e 	bne	r2,zero,8b3b4 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b234:	0005303a 	rdctl	r2,status
   8b238:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b23c:	e0fff917 	ldw	r3,-28(fp)
   8b240:	00bfff84 	movi	r2,-2
   8b244:	1884703a 	and	r2,r3,r2
   8b248:	1001703a 	wrctl	status,r2
  
  return context;
   8b24c:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   8b250:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
   8b254:	e0bffc17 	ldw	r2,-16(fp)
   8b258:	00c00274 	movhi	r3,9
   8b25c:	18c72404 	addi	r3,r3,7312
   8b260:	100490fa 	slli	r2,r2,3
   8b264:	10c7883a 	add	r3,r2,r3
   8b268:	e0bffe17 	ldw	r2,-8(fp)
   8b26c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
   8b270:	e0bffc17 	ldw	r2,-16(fp)
   8b274:	00c00274 	movhi	r3,9
   8b278:	18c72404 	addi	r3,r3,7312
   8b27c:	100490fa 	slli	r2,r2,3
   8b280:	10c5883a 	add	r2,r2,r3
   8b284:	10c00104 	addi	r3,r2,4
   8b288:	e0bffd17 	ldw	r2,-12(fp)
   8b28c:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   8b290:	e0bffe17 	ldw	r2,-8(fp)
   8b294:	1005003a 	cmpeq	r2,r2,zero
   8b298:	1000201e 	bne	r2,zero,8b31c <alt_irq_register+0x114>
   8b29c:	e0bffc17 	ldw	r2,-16(fp)
   8b2a0:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b2a4:	0005303a 	rdctl	r2,status
   8b2a8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b2ac:	e0fff617 	ldw	r3,-40(fp)
   8b2b0:	00bfff84 	movi	r2,-2
   8b2b4:	1884703a 	and	r2,r3,r2
   8b2b8:	1001703a 	wrctl	status,r2
  
  return context;
   8b2bc:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8b2c0:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   8b2c4:	e0fff717 	ldw	r3,-36(fp)
   8b2c8:	00800044 	movi	r2,1
   8b2cc:	10c4983a 	sll	r2,r2,r3
   8b2d0:	1007883a 	mov	r3,r2
   8b2d4:	00800274 	movhi	r2,9
   8b2d8:	10871404 	addi	r2,r2,7248
   8b2dc:	10800017 	ldw	r2,0(r2)
   8b2e0:	1886b03a 	or	r3,r3,r2
   8b2e4:	00800274 	movhi	r2,9
   8b2e8:	10871404 	addi	r2,r2,7248
   8b2ec:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8b2f0:	00800274 	movhi	r2,9
   8b2f4:	10871404 	addi	r2,r2,7248
   8b2f8:	10800017 	ldw	r2,0(r2)
   8b2fc:	100170fa 	wrctl	ienable,r2
   8b300:	e0bff817 	ldw	r2,-32(fp)
   8b304:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b308:	e0bff517 	ldw	r2,-44(fp)
   8b30c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8b310:	0005883a 	mov	r2,zero
   8b314:	e0bfff15 	stw	r2,-4(fp)
   8b318:	00002006 	br	8b39c <alt_irq_register+0x194>
   8b31c:	e0bffc17 	ldw	r2,-16(fp)
   8b320:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b324:	0005303a 	rdctl	r2,status
   8b328:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b32c:	e0fff217 	ldw	r3,-56(fp)
   8b330:	00bfff84 	movi	r2,-2
   8b334:	1884703a 	and	r2,r3,r2
   8b338:	1001703a 	wrctl	status,r2
  
  return context;
   8b33c:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8b340:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
   8b344:	e0fff317 	ldw	r3,-52(fp)
   8b348:	00800044 	movi	r2,1
   8b34c:	10c4983a 	sll	r2,r2,r3
   8b350:	0084303a 	nor	r2,zero,r2
   8b354:	1007883a 	mov	r3,r2
   8b358:	00800274 	movhi	r2,9
   8b35c:	10871404 	addi	r2,r2,7248
   8b360:	10800017 	ldw	r2,0(r2)
   8b364:	1886703a 	and	r3,r3,r2
   8b368:	00800274 	movhi	r2,9
   8b36c:	10871404 	addi	r2,r2,7248
   8b370:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8b374:	00800274 	movhi	r2,9
   8b378:	10871404 	addi	r2,r2,7248
   8b37c:	10800017 	ldw	r2,0(r2)
   8b380:	100170fa 	wrctl	ienable,r2
   8b384:	e0bff417 	ldw	r2,-48(fp)
   8b388:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b38c:	e0bff117 	ldw	r2,-60(fp)
   8b390:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8b394:	0005883a 	mov	r2,zero
   8b398:	e0bfff15 	stw	r2,-4(fp)
   8b39c:	e0bfff17 	ldw	r2,-4(fp)
   8b3a0:	e0bffb15 	stw	r2,-20(fp)
   8b3a4:	e0bffa17 	ldw	r2,-24(fp)
   8b3a8:	e0bff015 	stw	r2,-64(fp)
   8b3ac:	e0bff017 	ldw	r2,-64(fp)
   8b3b0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   8b3b4:	e0bffb17 	ldw	r2,-20(fp)
}
   8b3b8:	e037883a 	mov	sp,fp
   8b3bc:	df000017 	ldw	fp,0(sp)
   8b3c0:	dec00104 	addi	sp,sp,4
   8b3c4:	f800283a 	ret

0008b3c8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8b3c8:	deffeb04 	addi	sp,sp,-84
   8b3cc:	dfc01415 	stw	ra,80(sp)
   8b3d0:	df001315 	stw	fp,76(sp)
   8b3d4:	df001304 	addi	fp,sp,76
   8b3d8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b3dc:	e0bffd17 	ldw	r2,-12(fp)
   8b3e0:	1004803a 	cmplt	r2,r2,zero
   8b3e4:	1000091e 	bne	r2,zero,8b40c <isatty+0x44>
   8b3e8:	e13ffd17 	ldw	r4,-12(fp)
   8b3ec:	01400304 	movi	r5,12
   8b3f0:	00824b00 	call	824b0 <__mulsi3>
   8b3f4:	1007883a 	mov	r3,r2
   8b3f8:	00800274 	movhi	r2,9
   8b3fc:	10bbe104 	addi	r2,r2,-4220
   8b400:	1887883a 	add	r3,r3,r2
   8b404:	e0ffff15 	stw	r3,-4(fp)
   8b408:	00000106 	br	8b410 <isatty+0x48>
   8b40c:	e03fff15 	stw	zero,-4(fp)
   8b410:	e0bfff17 	ldw	r2,-4(fp)
   8b414:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   8b418:	e0bfed17 	ldw	r2,-76(fp)
   8b41c:	1005003a 	cmpeq	r2,r2,zero
   8b420:	10000f1e 	bne	r2,zero,8b460 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8b424:	e0bfed17 	ldw	r2,-76(fp)
   8b428:	10800017 	ldw	r2,0(r2)
   8b42c:	10800817 	ldw	r2,32(r2)
   8b430:	1004c03a 	cmpne	r2,r2,zero
   8b434:	1000031e 	bne	r2,zero,8b444 <isatty+0x7c>
    {
      return 1;
   8b438:	00800044 	movi	r2,1
   8b43c:	e0bffe15 	stw	r2,-8(fp)
   8b440:	00000c06 	br	8b474 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8b444:	e17fee04 	addi	r5,fp,-72
   8b448:	e13ffd17 	ldw	r4,-12(fp)
   8b44c:	008b0d00 	call	8b0d0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8b450:	e0bfef17 	ldw	r2,-68(fp)
   8b454:	10880020 	cmpeqi	r2,r2,8192
   8b458:	e0bffe15 	stw	r2,-8(fp)
   8b45c:	00000506 	br	8b474 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8b460:	008b48c0 	call	8b48c <alt_get_errno>
   8b464:	1007883a 	mov	r3,r2
   8b468:	00801444 	movi	r2,81
   8b46c:	18800015 	stw	r2,0(r3)
    return 0;
   8b470:	e03ffe15 	stw	zero,-8(fp)
   8b474:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   8b478:	e037883a 	mov	sp,fp
   8b47c:	dfc00117 	ldw	ra,4(sp)
   8b480:	df000017 	ldw	fp,0(sp)
   8b484:	dec00204 	addi	sp,sp,8
   8b488:	f800283a 	ret

0008b48c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b48c:	defffd04 	addi	sp,sp,-12
   8b490:	dfc00215 	stw	ra,8(sp)
   8b494:	df000115 	stw	fp,4(sp)
   8b498:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8b49c:	00800274 	movhi	r2,9
   8b4a0:	10806804 	addi	r2,r2,416
   8b4a4:	10800017 	ldw	r2,0(r2)
   8b4a8:	1005003a 	cmpeq	r2,r2,zero
   8b4ac:	1000061e 	bne	r2,zero,8b4c8 <alt_get_errno+0x3c>
   8b4b0:	00800274 	movhi	r2,9
   8b4b4:	10806804 	addi	r2,r2,416
   8b4b8:	10800017 	ldw	r2,0(r2)
   8b4bc:	103ee83a 	callr	r2
   8b4c0:	e0bfff15 	stw	r2,-4(fp)
   8b4c4:	00000306 	br	8b4d4 <alt_get_errno+0x48>
   8b4c8:	00800274 	movhi	r2,9
   8b4cc:	10871004 	addi	r2,r2,7232
   8b4d0:	e0bfff15 	stw	r2,-4(fp)
   8b4d4:	e0bfff17 	ldw	r2,-4(fp)
}
   8b4d8:	e037883a 	mov	sp,fp
   8b4dc:	dfc00117 	ldw	ra,4(sp)
   8b4e0:	df000017 	ldw	fp,0(sp)
   8b4e4:	dec00204 	addi	sp,sp,8
   8b4e8:	f800283a 	ret

0008b4ec <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8b4ec:	defffe04 	addi	sp,sp,-8
   8b4f0:	dfc00115 	stw	ra,4(sp)
   8b4f4:	df000015 	stw	fp,0(sp)
   8b4f8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   8b4fc:	01000274 	movhi	r4,9
   8b500:	21006f04 	addi	r4,r4,444
   8b504:	01400274 	movhi	r5,9
   8b508:	2979d204 	addi	r5,r5,-6328
   8b50c:	01800274 	movhi	r6,9
   8b510:	31806f04 	addi	r6,r6,444
   8b514:	008b56c0 	call	8b56c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8b518:	01000234 	movhi	r4,8
   8b51c:	21000804 	addi	r4,r4,32
   8b520:	01400234 	movhi	r5,8
   8b524:	29400804 	addi	r5,r5,32
   8b528:	01800234 	movhi	r6,8
   8b52c:	31806d04 	addi	r6,r6,436
   8b530:	008b56c0 	call	8b56c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   8b534:	01000274 	movhi	r4,9
   8b538:	21384904 	addi	r4,r4,-7900
   8b53c:	01400274 	movhi	r5,9
   8b540:	29784904 	addi	r5,r5,-7900
   8b544:	01800274 	movhi	r6,9
   8b548:	31b9d204 	addi	r6,r6,-6328
   8b54c:	008b56c0 	call	8b56c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8b550:	008cf500 	call	8cf50 <alt_dcache_flush_all>
  alt_icache_flush_all();
   8b554:	008d1dc0 	call	8d1dc <alt_icache_flush_all>
}
   8b558:	e037883a 	mov	sp,fp
   8b55c:	dfc00117 	ldw	ra,4(sp)
   8b560:	df000017 	ldw	fp,0(sp)
   8b564:	dec00204 	addi	sp,sp,8
   8b568:	f800283a 	ret

0008b56c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   8b56c:	defffc04 	addi	sp,sp,-16
   8b570:	df000315 	stw	fp,12(sp)
   8b574:	df000304 	addi	fp,sp,12
   8b578:	e13ffd15 	stw	r4,-12(fp)
   8b57c:	e17ffe15 	stw	r5,-8(fp)
   8b580:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   8b584:	e0fffe17 	ldw	r3,-8(fp)
   8b588:	e0bffd17 	ldw	r2,-12(fp)
   8b58c:	18800e26 	beq	r3,r2,8b5c8 <alt_load_section+0x5c>
  {
    while( to != end )
   8b590:	00000a06 	br	8b5bc <alt_load_section+0x50>
    {
      *to++ = *from++;
   8b594:	e0bffd17 	ldw	r2,-12(fp)
   8b598:	10c00017 	ldw	r3,0(r2)
   8b59c:	e0bffe17 	ldw	r2,-8(fp)
   8b5a0:	10c00015 	stw	r3,0(r2)
   8b5a4:	e0bffe17 	ldw	r2,-8(fp)
   8b5a8:	10800104 	addi	r2,r2,4
   8b5ac:	e0bffe15 	stw	r2,-8(fp)
   8b5b0:	e0bffd17 	ldw	r2,-12(fp)
   8b5b4:	10800104 	addi	r2,r2,4
   8b5b8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8b5bc:	e0fffe17 	ldw	r3,-8(fp)
   8b5c0:	e0bfff17 	ldw	r2,-4(fp)
   8b5c4:	18bff31e 	bne	r3,r2,8b594 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   8b5c8:	e037883a 	mov	sp,fp
   8b5cc:	df000017 	ldw	fp,0(sp)
   8b5d0:	dec00104 	addi	sp,sp,4
   8b5d4:	f800283a 	ret

0008b5d8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8b5d8:	defff804 	addi	sp,sp,-32
   8b5dc:	dfc00715 	stw	ra,28(sp)
   8b5e0:	df000615 	stw	fp,24(sp)
   8b5e4:	df000604 	addi	fp,sp,24
   8b5e8:	e13ffc15 	stw	r4,-16(fp)
   8b5ec:	e17ffd15 	stw	r5,-12(fp)
   8b5f0:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   8b5f4:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b5f8:	e0bffc17 	ldw	r2,-16(fp)
   8b5fc:	1004803a 	cmplt	r2,r2,zero
   8b600:	1000091e 	bne	r2,zero,8b628 <lseek+0x50>
   8b604:	e13ffc17 	ldw	r4,-16(fp)
   8b608:	01400304 	movi	r5,12
   8b60c:	00824b00 	call	824b0 <__mulsi3>
   8b610:	1007883a 	mov	r3,r2
   8b614:	00800274 	movhi	r2,9
   8b618:	10bbe104 	addi	r2,r2,-4220
   8b61c:	1887883a 	add	r3,r3,r2
   8b620:	e0ffff15 	stw	r3,-4(fp)
   8b624:	00000106 	br	8b62c <lseek+0x54>
   8b628:	e03fff15 	stw	zero,-4(fp)
   8b62c:	e0bfff17 	ldw	r2,-4(fp)
   8b630:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   8b634:	e0bffb17 	ldw	r2,-20(fp)
   8b638:	1005003a 	cmpeq	r2,r2,zero
   8b63c:	1000111e 	bne	r2,zero,8b684 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8b640:	e0bffb17 	ldw	r2,-20(fp)
   8b644:	10800017 	ldw	r2,0(r2)
   8b648:	10800717 	ldw	r2,28(r2)
   8b64c:	1005003a 	cmpeq	r2,r2,zero
   8b650:	1000091e 	bne	r2,zero,8b678 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8b654:	e0bffb17 	ldw	r2,-20(fp)
   8b658:	10800017 	ldw	r2,0(r2)
   8b65c:	10800717 	ldw	r2,28(r2)
   8b660:	e13ffb17 	ldw	r4,-20(fp)
   8b664:	e17ffd17 	ldw	r5,-12(fp)
   8b668:	e1bffe17 	ldw	r6,-8(fp)
   8b66c:	103ee83a 	callr	r2
   8b670:	e0bffa15 	stw	r2,-24(fp)
   8b674:	00000506 	br	8b68c <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8b678:	00bfde84 	movi	r2,-134
   8b67c:	e0bffa15 	stw	r2,-24(fp)
   8b680:	00000206 	br	8b68c <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
   8b684:	00bfebc4 	movi	r2,-81
   8b688:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   8b68c:	e0bffa17 	ldw	r2,-24(fp)
   8b690:	1004403a 	cmpge	r2,r2,zero
   8b694:	1000071e 	bne	r2,zero,8b6b4 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
   8b698:	008b6cc0 	call	8b6cc <alt_get_errno>
   8b69c:	1007883a 	mov	r3,r2
   8b6a0:	e0bffa17 	ldw	r2,-24(fp)
   8b6a4:	0085c83a 	sub	r2,zero,r2
   8b6a8:	18800015 	stw	r2,0(r3)
    rc = -1;
   8b6ac:	00bfffc4 	movi	r2,-1
   8b6b0:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   8b6b4:	e0bffa17 	ldw	r2,-24(fp)
}
   8b6b8:	e037883a 	mov	sp,fp
   8b6bc:	dfc00117 	ldw	ra,4(sp)
   8b6c0:	df000017 	ldw	fp,0(sp)
   8b6c4:	dec00204 	addi	sp,sp,8
   8b6c8:	f800283a 	ret

0008b6cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b6cc:	defffd04 	addi	sp,sp,-12
   8b6d0:	dfc00215 	stw	ra,8(sp)
   8b6d4:	df000115 	stw	fp,4(sp)
   8b6d8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8b6dc:	00800274 	movhi	r2,9
   8b6e0:	10806804 	addi	r2,r2,416
   8b6e4:	10800017 	ldw	r2,0(r2)
   8b6e8:	1005003a 	cmpeq	r2,r2,zero
   8b6ec:	1000061e 	bne	r2,zero,8b708 <alt_get_errno+0x3c>
   8b6f0:	00800274 	movhi	r2,9
   8b6f4:	10806804 	addi	r2,r2,416
   8b6f8:	10800017 	ldw	r2,0(r2)
   8b6fc:	103ee83a 	callr	r2
   8b700:	e0bfff15 	stw	r2,-4(fp)
   8b704:	00000306 	br	8b714 <alt_get_errno+0x48>
   8b708:	00800274 	movhi	r2,9
   8b70c:	10871004 	addi	r2,r2,7232
   8b710:	e0bfff15 	stw	r2,-4(fp)
   8b714:	e0bfff17 	ldw	r2,-4(fp)
}
   8b718:	e037883a 	mov	sp,fp
   8b71c:	dfc00117 	ldw	ra,4(sp)
   8b720:	df000017 	ldw	fp,0(sp)
   8b724:	dec00204 	addi	sp,sp,8
   8b728:	f800283a 	ret

0008b72c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8b72c:	defffd04 	addi	sp,sp,-12
   8b730:	dfc00215 	stw	ra,8(sp)
   8b734:	df000115 	stw	fp,4(sp)
   8b738:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8b73c:	0009883a 	mov	r4,zero
   8b740:	008bc140 	call	8bc14 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8b744:	008bc480 	call	8bc48 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8b748:	01000274 	movhi	r4,9
   8b74c:	2139c104 	addi	r4,r4,-6396
   8b750:	01400274 	movhi	r5,9
   8b754:	2979c104 	addi	r5,r5,-6396
   8b758:	01800274 	movhi	r6,9
   8b75c:	31b9c104 	addi	r6,r6,-6396
   8b760:	008d59c0 	call	8d59c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8b764:	008d0800 	call	8d080 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8b768:	01000274 	movhi	r4,9
   8b76c:	21343904 	addi	r4,r4,-12060
   8b770:	008dcac0 	call	8dcac <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8b774:	d126b817 	ldw	r4,-25888(gp)
   8b778:	d166b917 	ldw	r5,-25884(gp)
   8b77c:	d1a6ba17 	ldw	r6,-25880(gp)
   8b780:	00809480 	call	80948 <main>
   8b784:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8b788:	01000044 	movi	r4,1
   8b78c:	008af440 	call	8af44 <close>
  exit (result);
   8b790:	e13fff17 	ldw	r4,-4(fp)
   8b794:	008dcc00 	call	8dcc0 <exit>

0008b798 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   8b798:	defffe04 	addi	sp,sp,-8
   8b79c:	df000115 	stw	fp,4(sp)
   8b7a0:	df000104 	addi	fp,sp,4
   8b7a4:	e13fff15 	stw	r4,-4(fp)
}
   8b7a8:	e037883a 	mov	sp,fp
   8b7ac:	df000017 	ldw	fp,0(sp)
   8b7b0:	dec00104 	addi	sp,sp,4
   8b7b4:	f800283a 	ret

0008b7b8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8b7b8:	defffe04 	addi	sp,sp,-8
   8b7bc:	df000115 	stw	fp,4(sp)
   8b7c0:	df000104 	addi	fp,sp,4
   8b7c4:	e13fff15 	stw	r4,-4(fp)
}
   8b7c8:	e037883a 	mov	sp,fp
   8b7cc:	df000017 	ldw	fp,0(sp)
   8b7d0:	dec00104 	addi	sp,sp,4
   8b7d4:	f800283a 	ret

0008b7d8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8b7d8:	defff704 	addi	sp,sp,-36
   8b7dc:	dfc00815 	stw	ra,32(sp)
   8b7e0:	df000715 	stw	fp,28(sp)
   8b7e4:	df000704 	addi	fp,sp,28
   8b7e8:	e13ffb15 	stw	r4,-20(fp)
   8b7ec:	e17ffc15 	stw	r5,-16(fp)
   8b7f0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8b7f4:	e0bffb17 	ldw	r2,-20(fp)
   8b7f8:	1004803a 	cmplt	r2,r2,zero
   8b7fc:	1000091e 	bne	r2,zero,8b824 <read+0x4c>
   8b800:	e13ffb17 	ldw	r4,-20(fp)
   8b804:	01400304 	movi	r5,12
   8b808:	00824b00 	call	824b0 <__mulsi3>
   8b80c:	1007883a 	mov	r3,r2
   8b810:	00800274 	movhi	r2,9
   8b814:	10bbe104 	addi	r2,r2,-4220
   8b818:	1887883a 	add	r3,r3,r2
   8b81c:	e0ffff15 	stw	r3,-4(fp)
   8b820:	00000106 	br	8b828 <read+0x50>
   8b824:	e03fff15 	stw	zero,-4(fp)
   8b828:	e0bfff17 	ldw	r2,-4(fp)
   8b82c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8b830:	e0bffa17 	ldw	r2,-24(fp)
   8b834:	1005003a 	cmpeq	r2,r2,zero
   8b838:	1000241e 	bne	r2,zero,8b8cc <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8b83c:	e0bffa17 	ldw	r2,-24(fp)
   8b840:	10800217 	ldw	r2,8(r2)
   8b844:	108000cc 	andi	r2,r2,3
   8b848:	10800060 	cmpeqi	r2,r2,1
   8b84c:	10001a1e 	bne	r2,zero,8b8b8 <read+0xe0>
   8b850:	e0bffa17 	ldw	r2,-24(fp)
   8b854:	10800017 	ldw	r2,0(r2)
   8b858:	10800517 	ldw	r2,20(r2)
   8b85c:	1005003a 	cmpeq	r2,r2,zero
   8b860:	1000151e 	bne	r2,zero,8b8b8 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8b864:	e0bffa17 	ldw	r2,-24(fp)
   8b868:	10800017 	ldw	r2,0(r2)
   8b86c:	10800517 	ldw	r2,20(r2)
   8b870:	e17ffc17 	ldw	r5,-16(fp)
   8b874:	e1bffd17 	ldw	r6,-12(fp)
   8b878:	e13ffa17 	ldw	r4,-24(fp)
   8b87c:	103ee83a 	callr	r2
   8b880:	e0bff915 	stw	r2,-28(fp)
   8b884:	e0bff917 	ldw	r2,-28(fp)
   8b888:	1004403a 	cmpge	r2,r2,zero
   8b88c:	1000071e 	bne	r2,zero,8b8ac <read+0xd4>
        {
          ALT_ERRNO = -rval;
   8b890:	008b8fc0 	call	8b8fc <alt_get_errno>
   8b894:	e0fff917 	ldw	r3,-28(fp)
   8b898:	00c7c83a 	sub	r3,zero,r3
   8b89c:	10c00015 	stw	r3,0(r2)
          return -1;
   8b8a0:	00bfffc4 	movi	r2,-1
   8b8a4:	e0bffe15 	stw	r2,-8(fp)
   8b8a8:	00000e06 	br	8b8e4 <read+0x10c>
        }
        return rval;
   8b8ac:	e0bff917 	ldw	r2,-28(fp)
   8b8b0:	e0bffe15 	stw	r2,-8(fp)
   8b8b4:	00000b06 	br	8b8e4 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8b8b8:	008b8fc0 	call	8b8fc <alt_get_errno>
   8b8bc:	1007883a 	mov	r3,r2
   8b8c0:	00800344 	movi	r2,13
   8b8c4:	18800015 	stw	r2,0(r3)
   8b8c8:	00000406 	br	8b8dc <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8b8cc:	008b8fc0 	call	8b8fc <alt_get_errno>
   8b8d0:	1007883a 	mov	r3,r2
   8b8d4:	00801444 	movi	r2,81
   8b8d8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8b8dc:	00bfffc4 	movi	r2,-1
   8b8e0:	e0bffe15 	stw	r2,-8(fp)
   8b8e4:	e0bffe17 	ldw	r2,-8(fp)
}
   8b8e8:	e037883a 	mov	sp,fp
   8b8ec:	dfc00117 	ldw	ra,4(sp)
   8b8f0:	df000017 	ldw	fp,0(sp)
   8b8f4:	dec00204 	addi	sp,sp,8
   8b8f8:	f800283a 	ret

0008b8fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8b8fc:	defffd04 	addi	sp,sp,-12
   8b900:	dfc00215 	stw	ra,8(sp)
   8b904:	df000115 	stw	fp,4(sp)
   8b908:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8b90c:	00800274 	movhi	r2,9
   8b910:	10806804 	addi	r2,r2,416
   8b914:	10800017 	ldw	r2,0(r2)
   8b918:	1005003a 	cmpeq	r2,r2,zero
   8b91c:	1000061e 	bne	r2,zero,8b938 <alt_get_errno+0x3c>
   8b920:	00800274 	movhi	r2,9
   8b924:	10806804 	addi	r2,r2,416
   8b928:	10800017 	ldw	r2,0(r2)
   8b92c:	103ee83a 	callr	r2
   8b930:	e0bfff15 	stw	r2,-4(fp)
   8b934:	00000306 	br	8b944 <alt_get_errno+0x48>
   8b938:	00800274 	movhi	r2,9
   8b93c:	10871004 	addi	r2,r2,7232
   8b940:	e0bfff15 	stw	r2,-4(fp)
   8b944:	e0bfff17 	ldw	r2,-4(fp)
}
   8b948:	e037883a 	mov	sp,fp
   8b94c:	dfc00117 	ldw	ra,4(sp)
   8b950:	df000017 	ldw	fp,0(sp)
   8b954:	dec00204 	addi	sp,sp,8
   8b958:	f800283a 	ret

0008b95c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8b95c:	defffc04 	addi	sp,sp,-16
   8b960:	dfc00315 	stw	ra,12(sp)
   8b964:	df000215 	stw	fp,8(sp)
   8b968:	dc000115 	stw	r16,4(sp)
   8b96c:	df000104 	addi	fp,sp,4
   8b970:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   8b974:	e0bfff17 	ldw	r2,-4(fp)
   8b978:	108000d0 	cmplti	r2,r2,3
   8b97c:	10000f1e 	bne	r2,zero,8b9bc <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   8b980:	e13fff17 	ldw	r4,-4(fp)
   8b984:	04000274 	movhi	r16,9
   8b988:	843be104 	addi	r16,r16,-4220
   8b98c:	01400304 	movi	r5,12
   8b990:	00824b00 	call	824b0 <__mulsi3>
   8b994:	1405883a 	add	r2,r2,r16
   8b998:	10800204 	addi	r2,r2,8
   8b99c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8b9a0:	e13fff17 	ldw	r4,-4(fp)
   8b9a4:	04000274 	movhi	r16,9
   8b9a8:	843be104 	addi	r16,r16,-4220
   8b9ac:	01400304 	movi	r5,12
   8b9b0:	00824b00 	call	824b0 <__mulsi3>
   8b9b4:	1405883a 	add	r2,r2,r16
   8b9b8:	10000015 	stw	zero,0(r2)
  }
}
   8b9bc:	e037883a 	mov	sp,fp
   8b9c0:	dfc00217 	ldw	ra,8(sp)
   8b9c4:	df000117 	ldw	fp,4(sp)
   8b9c8:	dc000017 	ldw	r16,0(sp)
   8b9cc:	dec00304 	addi	sp,sp,12
   8b9d0:	f800283a 	ret

0008b9d4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8b9d4:	defff804 	addi	sp,sp,-32
   8b9d8:	df000715 	stw	fp,28(sp)
   8b9dc:	df000704 	addi	fp,sp,28
   8b9e0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b9e4:	0005303a 	rdctl	r2,status
   8b9e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b9ec:	e0fffb17 	ldw	r3,-20(fp)
   8b9f0:	00bfff84 	movi	r2,-2
   8b9f4:	1884703a 	and	r2,r3,r2
   8b9f8:	1001703a 	wrctl	status,r2
  
  return context;
   8b9fc:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8ba00:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8ba04:	d0a00d17 	ldw	r2,-32716(gp)
   8ba08:	10c000c4 	addi	r3,r2,3
   8ba0c:	00bfff04 	movi	r2,-4
   8ba10:	1884703a 	and	r2,r3,r2
   8ba14:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8ba18:	d0e00d17 	ldw	r3,-32716(gp)
   8ba1c:	e0bffe17 	ldw	r2,-8(fp)
   8ba20:	1887883a 	add	r3,r3,r2
   8ba24:	00800434 	movhi	r2,16
   8ba28:	10800004 	addi	r2,r2,0
   8ba2c:	10c0072e 	bgeu	r2,r3,8ba4c <sbrk+0x78>
   8ba30:	e0bffd17 	ldw	r2,-12(fp)
   8ba34:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ba38:	e0bffa17 	ldw	r2,-24(fp)
   8ba3c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8ba40:	00bfffc4 	movi	r2,-1
   8ba44:	e0bfff15 	stw	r2,-4(fp)
   8ba48:	00000c06 	br	8ba7c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   8ba4c:	d0a00d17 	ldw	r2,-32716(gp)
   8ba50:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   8ba54:	d0e00d17 	ldw	r3,-32716(gp)
   8ba58:	e0bffe17 	ldw	r2,-8(fp)
   8ba5c:	1885883a 	add	r2,r3,r2
   8ba60:	d0a00d15 	stw	r2,-32716(gp)
   8ba64:	e0bffd17 	ldw	r2,-12(fp)
   8ba68:	e0bff915 	stw	r2,-28(fp)
   8ba6c:	e0bff917 	ldw	r2,-28(fp)
   8ba70:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8ba74:	e0bffc17 	ldw	r2,-16(fp)
   8ba78:	e0bfff15 	stw	r2,-4(fp)
   8ba7c:	e0bfff17 	ldw	r2,-4(fp)
} 
   8ba80:	e037883a 	mov	sp,fp
   8ba84:	df000017 	ldw	fp,0(sp)
   8ba88:	dec00104 	addi	sp,sp,4
   8ba8c:	f800283a 	ret

0008ba90 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8ba90:	defff704 	addi	sp,sp,-36
   8ba94:	dfc00815 	stw	ra,32(sp)
   8ba98:	df000715 	stw	fp,28(sp)
   8ba9c:	df000704 	addi	fp,sp,28
   8baa0:	e13ffb15 	stw	r4,-20(fp)
   8baa4:	e17ffc15 	stw	r5,-16(fp)
   8baa8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8baac:	e0bffb17 	ldw	r2,-20(fp)
   8bab0:	1004803a 	cmplt	r2,r2,zero
   8bab4:	1000091e 	bne	r2,zero,8badc <write+0x4c>
   8bab8:	e13ffb17 	ldw	r4,-20(fp)
   8babc:	01400304 	movi	r5,12
   8bac0:	00824b00 	call	824b0 <__mulsi3>
   8bac4:	1007883a 	mov	r3,r2
   8bac8:	00800274 	movhi	r2,9
   8bacc:	10bbe104 	addi	r2,r2,-4220
   8bad0:	1887883a 	add	r3,r3,r2
   8bad4:	e0ffff15 	stw	r3,-4(fp)
   8bad8:	00000106 	br	8bae0 <write+0x50>
   8badc:	e03fff15 	stw	zero,-4(fp)
   8bae0:	e0bfff17 	ldw	r2,-4(fp)
   8bae4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   8bae8:	e0bffa17 	ldw	r2,-24(fp)
   8baec:	1005003a 	cmpeq	r2,r2,zero
   8baf0:	1000241e 	bne	r2,zero,8bb84 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8baf4:	e0bffa17 	ldw	r2,-24(fp)
   8baf8:	10800217 	ldw	r2,8(r2)
   8bafc:	108000cc 	andi	r2,r2,3
   8bb00:	1005003a 	cmpeq	r2,r2,zero
   8bb04:	10001a1e 	bne	r2,zero,8bb70 <write+0xe0>
   8bb08:	e0bffa17 	ldw	r2,-24(fp)
   8bb0c:	10800017 	ldw	r2,0(r2)
   8bb10:	10800617 	ldw	r2,24(r2)
   8bb14:	1005003a 	cmpeq	r2,r2,zero
   8bb18:	1000151e 	bne	r2,zero,8bb70 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8bb1c:	e0bffa17 	ldw	r2,-24(fp)
   8bb20:	10800017 	ldw	r2,0(r2)
   8bb24:	10800617 	ldw	r2,24(r2)
   8bb28:	e17ffc17 	ldw	r5,-16(fp)
   8bb2c:	e1bffd17 	ldw	r6,-12(fp)
   8bb30:	e13ffa17 	ldw	r4,-24(fp)
   8bb34:	103ee83a 	callr	r2
   8bb38:	e0bff915 	stw	r2,-28(fp)
   8bb3c:	e0bff917 	ldw	r2,-28(fp)
   8bb40:	1004403a 	cmpge	r2,r2,zero
   8bb44:	1000071e 	bne	r2,zero,8bb64 <write+0xd4>
      {
        ALT_ERRNO = -rval;
   8bb48:	008bbb40 	call	8bbb4 <alt_get_errno>
   8bb4c:	e0fff917 	ldw	r3,-28(fp)
   8bb50:	00c7c83a 	sub	r3,zero,r3
   8bb54:	10c00015 	stw	r3,0(r2)
        return -1;
   8bb58:	00bfffc4 	movi	r2,-1
   8bb5c:	e0bffe15 	stw	r2,-8(fp)
   8bb60:	00000e06 	br	8bb9c <write+0x10c>
      }
      return rval;
   8bb64:	e0bff917 	ldw	r2,-28(fp)
   8bb68:	e0bffe15 	stw	r2,-8(fp)
   8bb6c:	00000b06 	br	8bb9c <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8bb70:	008bbb40 	call	8bbb4 <alt_get_errno>
   8bb74:	1007883a 	mov	r3,r2
   8bb78:	00800344 	movi	r2,13
   8bb7c:	18800015 	stw	r2,0(r3)
   8bb80:	00000406 	br	8bb94 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8bb84:	008bbb40 	call	8bbb4 <alt_get_errno>
   8bb88:	1007883a 	mov	r3,r2
   8bb8c:	00801444 	movi	r2,81
   8bb90:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8bb94:	00bfffc4 	movi	r2,-1
   8bb98:	e0bffe15 	stw	r2,-8(fp)
   8bb9c:	e0bffe17 	ldw	r2,-8(fp)
}
   8bba0:	e037883a 	mov	sp,fp
   8bba4:	dfc00117 	ldw	ra,4(sp)
   8bba8:	df000017 	ldw	fp,0(sp)
   8bbac:	dec00204 	addi	sp,sp,8
   8bbb0:	f800283a 	ret

0008bbb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8bbb4:	defffd04 	addi	sp,sp,-12
   8bbb8:	dfc00215 	stw	ra,8(sp)
   8bbbc:	df000115 	stw	fp,4(sp)
   8bbc0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8bbc4:	00800274 	movhi	r2,9
   8bbc8:	10806804 	addi	r2,r2,416
   8bbcc:	10800017 	ldw	r2,0(r2)
   8bbd0:	1005003a 	cmpeq	r2,r2,zero
   8bbd4:	1000061e 	bne	r2,zero,8bbf0 <alt_get_errno+0x3c>
   8bbd8:	00800274 	movhi	r2,9
   8bbdc:	10806804 	addi	r2,r2,416
   8bbe0:	10800017 	ldw	r2,0(r2)
   8bbe4:	103ee83a 	callr	r2
   8bbe8:	e0bfff15 	stw	r2,-4(fp)
   8bbec:	00000306 	br	8bbfc <alt_get_errno+0x48>
   8bbf0:	00800274 	movhi	r2,9
   8bbf4:	10871004 	addi	r2,r2,7232
   8bbf8:	e0bfff15 	stw	r2,-4(fp)
   8bbfc:	e0bfff17 	ldw	r2,-4(fp)
}
   8bc00:	e037883a 	mov	sp,fp
   8bc04:	dfc00117 	ldw	ra,4(sp)
   8bc08:	df000017 	ldw	fp,0(sp)
   8bc0c:	dec00204 	addi	sp,sp,8
   8bc10:	f800283a 	ret

0008bc14 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8bc14:	defffd04 	addi	sp,sp,-12
   8bc18:	dfc00215 	stw	ra,8(sp)
   8bc1c:	df000115 	stw	fp,4(sp)
   8bc20:	df000104 	addi	fp,sp,4
   8bc24:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU1, cpu1);
   8bc28:	008da9c0 	call	8da9c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8bc2c:	00800044 	movi	r2,1
   8bc30:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8bc34:	e037883a 	mov	sp,fp
   8bc38:	dfc00117 	ldw	ra,4(sp)
   8bc3c:	df000017 	ldw	fp,0(sp)
   8bc40:	dec00204 	addi	sp,sp,8
   8bc44:	f800283a 	ret

0008bc48 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8bc48:	defffe04 	addi	sp,sp,-8
   8bc4c:	dfc00115 	stw	ra,4(sp)
   8bc50:	df000015 	stw	fp,0(sp)
   8bc54:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( CPU1_TIMER, cpu1_timer);
   8bc58:	01000434 	movhi	r4,16
   8bc5c:	21082004 	addi	r4,r4,8320
   8bc60:	000b883a 	mov	r5,zero
   8bc64:	01800044 	movi	r6,1
   8bc68:	01c01904 	movi	r7,100
   8bc6c:	008cd6c0 	call	8cd6c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   8bc70:	01000274 	movhi	r4,9
   8bc74:	213c4b04 	addi	r4,r4,-3796
   8bc78:	000b883a 	mov	r5,zero
   8bc7c:	000d883a 	mov	r6,zero
   8bc80:	008bf0c0 	call	8bf0c <altera_avalon_jtag_uart_init>
   8bc84:	01000274 	movhi	r4,9
   8bc88:	213c4104 	addi	r4,r4,-3836
   8bc8c:	008bcc00 	call	8bcc0 <alt_dev_reg>
    ALTERA_AVALON_MUTEX_INIT ( MESSAGE_BUFFER_MUTEX, message_buffer_mutex);
   8bc90:	01000274 	movhi	r4,9
   8bc94:	21005904 	addi	r4,r4,356
   8bc98:	008bcf80 	call	8bcf8 <alt_avalon_mutex_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( CPU1_PERFORMANCE_COUNTER, cpu1_performance_counter);
   8bc9c:	00c00434 	movhi	r3,16
   8bca0:	18c80004 	addi	r3,r3,8192
   8bca4:	00800044 	movi	r2,1
   8bca8:	18800035 	stwio	r2,0(r3)
}
   8bcac:	e037883a 	mov	sp,fp
   8bcb0:	dfc00117 	ldw	ra,4(sp)
   8bcb4:	df000017 	ldw	fp,0(sp)
   8bcb8:	dec00204 	addi	sp,sp,8
   8bcbc:	f800283a 	ret

0008bcc0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   8bcc0:	defffd04 	addi	sp,sp,-12
   8bcc4:	dfc00215 	stw	ra,8(sp)
   8bcc8:	df000115 	stw	fp,4(sp)
   8bccc:	df000104 	addi	fp,sp,4
   8bcd0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8bcd4:	e13fff17 	ldw	r4,-4(fp)
   8bcd8:	01400274 	movhi	r5,9
   8bcdc:	29406504 	addi	r5,r5,404
   8bce0:	008cf6c0 	call	8cf6c <alt_dev_llist_insert>
}
   8bce4:	e037883a 	mov	sp,fp
   8bce8:	dfc00117 	ldw	ra,4(sp)
   8bcec:	df000017 	ldw	fp,0(sp)
   8bcf0:	dec00204 	addi	sp,sp,8
   8bcf4:	f800283a 	ret

0008bcf8 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
   8bcf8:	defffc04 	addi	sp,sp,-16
   8bcfc:	dfc00315 	stw	ra,12(sp)
   8bd00:	df000215 	stw	fp,8(sp)
   8bd04:	df000204 	addi	fp,sp,8
   8bd08:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   8bd0c:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
   8bd10:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
   8bd14:	e0bffe17 	ldw	r2,-8(fp)
   8bd18:	1004c03a 	cmpne	r2,r2,zero
   8bd1c:	1000061e 	bne	r2,zero,8bd38 <alt_avalon_mutex_reg+0x40>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
   8bd20:	e13fff17 	ldw	r4,-4(fp)
   8bd24:	01400274 	movhi	r5,9
   8bd28:	29406b04 	addi	r5,r5,428
   8bd2c:	008cf6c0 	call	8cf6c <alt_dev_llist_insert>
   8bd30:	e0bffe15 	stw	r2,-8(fp)
   8bd34:	00000506 	br	8bd4c <alt_avalon_mutex_reg+0x54>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
   8bd38:	008bd640 	call	8bd64 <alt_get_errno>
   8bd3c:	00c00304 	movi	r3,12
   8bd40:	10c00015 	stw	r3,0(r2)
    ret_code = -ENOMEM;
   8bd44:	00bffd04 	movi	r2,-12
   8bd48:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
   8bd4c:	e0bffe17 	ldw	r2,-8(fp)
}
   8bd50:	e037883a 	mov	sp,fp
   8bd54:	dfc00117 	ldw	ra,4(sp)
   8bd58:	df000017 	ldw	fp,0(sp)
   8bd5c:	dec00204 	addi	sp,sp,8
   8bd60:	f800283a 	ret

0008bd64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8bd64:	defffd04 	addi	sp,sp,-12
   8bd68:	dfc00215 	stw	ra,8(sp)
   8bd6c:	df000115 	stw	fp,4(sp)
   8bd70:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8bd74:	00800274 	movhi	r2,9
   8bd78:	10806804 	addi	r2,r2,416
   8bd7c:	10800017 	ldw	r2,0(r2)
   8bd80:	1005003a 	cmpeq	r2,r2,zero
   8bd84:	1000061e 	bne	r2,zero,8bda0 <alt_get_errno+0x3c>
   8bd88:	00800274 	movhi	r2,9
   8bd8c:	10806804 	addi	r2,r2,416
   8bd90:	10800017 	ldw	r2,0(r2)
   8bd94:	103ee83a 	callr	r2
   8bd98:	e0bfff15 	stw	r2,-4(fp)
   8bd9c:	00000306 	br	8bdac <alt_get_errno+0x48>
   8bda0:	00800274 	movhi	r2,9
   8bda4:	10871004 	addi	r2,r2,7232
   8bda8:	e0bfff15 	stw	r2,-4(fp)
   8bdac:	e0bfff17 	ldw	r2,-4(fp)
}
   8bdb0:	e037883a 	mov	sp,fp
   8bdb4:	dfc00117 	ldw	ra,4(sp)
   8bdb8:	df000017 	ldw	fp,0(sp)
   8bdbc:	dec00204 	addi	sp,sp,8
   8bdc0:	f800283a 	ret

0008bdc4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8bdc4:	defffa04 	addi	sp,sp,-24
   8bdc8:	dfc00515 	stw	ra,20(sp)
   8bdcc:	df000415 	stw	fp,16(sp)
   8bdd0:	df000404 	addi	fp,sp,16
   8bdd4:	e13ffd15 	stw	r4,-12(fp)
   8bdd8:	e17ffe15 	stw	r5,-8(fp)
   8bddc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8bde0:	e0bffd17 	ldw	r2,-12(fp)
   8bde4:	10800017 	ldw	r2,0(r2)
   8bde8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8bdec:	e0bffc17 	ldw	r2,-16(fp)
   8bdf0:	11000a04 	addi	r4,r2,40
   8bdf4:	e0bffd17 	ldw	r2,-12(fp)
   8bdf8:	11c00217 	ldw	r7,8(r2)
   8bdfc:	e17ffe17 	ldw	r5,-8(fp)
   8be00:	e1bfff17 	ldw	r6,-4(fp)
   8be04:	008c40c0 	call	8c40c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   8be08:	e037883a 	mov	sp,fp
   8be0c:	dfc00117 	ldw	ra,4(sp)
   8be10:	df000017 	ldw	fp,0(sp)
   8be14:	dec00204 	addi	sp,sp,8
   8be18:	f800283a 	ret

0008be1c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8be1c:	defffa04 	addi	sp,sp,-24
   8be20:	dfc00515 	stw	ra,20(sp)
   8be24:	df000415 	stw	fp,16(sp)
   8be28:	df000404 	addi	fp,sp,16
   8be2c:	e13ffd15 	stw	r4,-12(fp)
   8be30:	e17ffe15 	stw	r5,-8(fp)
   8be34:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8be38:	e0bffd17 	ldw	r2,-12(fp)
   8be3c:	10800017 	ldw	r2,0(r2)
   8be40:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8be44:	e0bffc17 	ldw	r2,-16(fp)
   8be48:	11000a04 	addi	r4,r2,40
   8be4c:	e0bffd17 	ldw	r2,-12(fp)
   8be50:	11c00217 	ldw	r7,8(r2)
   8be54:	e17ffe17 	ldw	r5,-8(fp)
   8be58:	e1bfff17 	ldw	r6,-4(fp)
   8be5c:	008c6300 	call	8c630 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   8be60:	e037883a 	mov	sp,fp
   8be64:	dfc00117 	ldw	ra,4(sp)
   8be68:	df000017 	ldw	fp,0(sp)
   8be6c:	dec00204 	addi	sp,sp,8
   8be70:	f800283a 	ret

0008be74 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   8be74:	defffc04 	addi	sp,sp,-16
   8be78:	dfc00315 	stw	ra,12(sp)
   8be7c:	df000215 	stw	fp,8(sp)
   8be80:	df000204 	addi	fp,sp,8
   8be84:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8be88:	e0bfff17 	ldw	r2,-4(fp)
   8be8c:	10800017 	ldw	r2,0(r2)
   8be90:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   8be94:	e0bffe17 	ldw	r2,-8(fp)
   8be98:	11000a04 	addi	r4,r2,40
   8be9c:	e0bfff17 	ldw	r2,-4(fp)
   8bea0:	11400217 	ldw	r5,8(r2)
   8bea4:	008c2a40 	call	8c2a4 <altera_avalon_jtag_uart_close>
}
   8bea8:	e037883a 	mov	sp,fp
   8beac:	dfc00117 	ldw	ra,4(sp)
   8beb0:	df000017 	ldw	fp,0(sp)
   8beb4:	dec00204 	addi	sp,sp,8
   8beb8:	f800283a 	ret

0008bebc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   8bebc:	defffa04 	addi	sp,sp,-24
   8bec0:	dfc00515 	stw	ra,20(sp)
   8bec4:	df000415 	stw	fp,16(sp)
   8bec8:	df000404 	addi	fp,sp,16
   8becc:	e13ffd15 	stw	r4,-12(fp)
   8bed0:	e17ffe15 	stw	r5,-8(fp)
   8bed4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   8bed8:	e0bffd17 	ldw	r2,-12(fp)
   8bedc:	10800017 	ldw	r2,0(r2)
   8bee0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   8bee4:	e0bffc17 	ldw	r2,-16(fp)
   8bee8:	11000a04 	addi	r4,r2,40
   8beec:	e17ffe17 	ldw	r5,-8(fp)
   8bef0:	e1bfff17 	ldw	r6,-4(fp)
   8bef4:	008c3180 	call	8c318 <altera_avalon_jtag_uart_ioctl>
}
   8bef8:	e037883a 	mov	sp,fp
   8befc:	dfc00117 	ldw	ra,4(sp)
   8bf00:	df000017 	ldw	fp,0(sp)
   8bf04:	dec00204 	addi	sp,sp,8
   8bf08:	f800283a 	ret

0008bf0c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8bf0c:	defffa04 	addi	sp,sp,-24
   8bf10:	dfc00515 	stw	ra,20(sp)
   8bf14:	df000415 	stw	fp,16(sp)
   8bf18:	df000404 	addi	fp,sp,16
   8bf1c:	e13ffd15 	stw	r4,-12(fp)
   8bf20:	e17ffe15 	stw	r5,-8(fp)
   8bf24:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8bf28:	e0fffd17 	ldw	r3,-12(fp)
   8bf2c:	00800044 	movi	r2,1
   8bf30:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8bf34:	e0bffd17 	ldw	r2,-12(fp)
   8bf38:	10800017 	ldw	r2,0(r2)
   8bf3c:	11000104 	addi	r4,r2,4
   8bf40:	e0bffd17 	ldw	r2,-12(fp)
   8bf44:	10800817 	ldw	r2,32(r2)
   8bf48:	1007883a 	mov	r3,r2
   8bf4c:	2005883a 	mov	r2,r4
   8bf50:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   8bf54:	e13ffe17 	ldw	r4,-8(fp)
   8bf58:	e17fff17 	ldw	r5,-4(fp)
   8bf5c:	d8000015 	stw	zero,0(sp)
   8bf60:	01800274 	movhi	r6,9
   8bf64:	31aff304 	addi	r6,r6,-16436
   8bf68:	e1fffd17 	ldw	r7,-12(fp)
   8bf6c:	008d1f80 	call	8d1f8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   8bf70:	e0bffd17 	ldw	r2,-12(fp)
   8bf74:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8bf78:	e0bffd17 	ldw	r2,-12(fp)
   8bf7c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8bf80:	00800274 	movhi	r2,9
   8bf84:	10871804 	addi	r2,r2,7264
   8bf88:	10800017 	ldw	r2,0(r2)
   8bf8c:	100b883a 	mov	r5,r2
   8bf90:	01800274 	movhi	r6,9
   8bf94:	31b07d04 	addi	r6,r6,-15884
   8bf98:	e1fffd17 	ldw	r7,-12(fp)
   8bf9c:	008cdfc0 	call	8cdfc <alt_alarm_start>
   8bfa0:	1004403a 	cmpge	r2,r2,zero
   8bfa4:	1000041e 	bne	r2,zero,8bfb8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   8bfa8:	e0fffd17 	ldw	r3,-12(fp)
   8bfac:	00a00034 	movhi	r2,32768
   8bfb0:	10bfffc4 	addi	r2,r2,-1
   8bfb4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   8bfb8:	e037883a 	mov	sp,fp
   8bfbc:	dfc00117 	ldw	ra,4(sp)
   8bfc0:	df000017 	ldw	fp,0(sp)
   8bfc4:	dec00204 	addi	sp,sp,8
   8bfc8:	f800283a 	ret

0008bfcc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   8bfcc:	defff804 	addi	sp,sp,-32
   8bfd0:	df000715 	stw	fp,28(sp)
   8bfd4:	df000704 	addi	fp,sp,28
   8bfd8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   8bfdc:	e0bfff17 	ldw	r2,-4(fp)
   8bfe0:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   8bfe4:	e0bffe17 	ldw	r2,-8(fp)
   8bfe8:	10800017 	ldw	r2,0(r2)
   8bfec:	e0bffd15 	stw	r2,-12(fp)
   8bff0:	00000006 	br	8bff4 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8bff4:	e0bffd17 	ldw	r2,-12(fp)
   8bff8:	10800104 	addi	r2,r2,4
   8bffc:	10800037 	ldwio	r2,0(r2)
   8c000:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8c004:	e0bffc17 	ldw	r2,-16(fp)
   8c008:	1080c00c 	andi	r2,r2,768
   8c00c:	1005003a 	cmpeq	r2,r2,zero
   8c010:	1000741e 	bne	r2,zero,8c1e4 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   8c014:	e0bffc17 	ldw	r2,-16(fp)
   8c018:	1080400c 	andi	r2,r2,256
   8c01c:	1005003a 	cmpeq	r2,r2,zero
   8c020:	1000351e 	bne	r2,zero,8c0f8 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   8c024:	00800074 	movhi	r2,1
   8c028:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c02c:	e0bffe17 	ldw	r2,-8(fp)
   8c030:	10800a17 	ldw	r2,40(r2)
   8c034:	10800044 	addi	r2,r2,1
   8c038:	1081ffcc 	andi	r2,r2,2047
   8c03c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   8c040:	e0bffe17 	ldw	r2,-8(fp)
   8c044:	10c00b17 	ldw	r3,44(r2)
   8c048:	e0bffa17 	ldw	r2,-24(fp)
   8c04c:	18801626 	beq	r3,r2,8c0a8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8c050:	e0bffd17 	ldw	r2,-12(fp)
   8c054:	10800037 	ldwio	r2,0(r2)
   8c058:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   8c05c:	e0bffb17 	ldw	r2,-20(fp)
   8c060:	10a0000c 	andi	r2,r2,32768
   8c064:	1005003a 	cmpeq	r2,r2,zero
   8c068:	10000f1e 	bne	r2,zero,8c0a8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8c06c:	e0bffe17 	ldw	r2,-8(fp)
   8c070:	10c00a17 	ldw	r3,40(r2)
   8c074:	e0bffb17 	ldw	r2,-20(fp)
   8c078:	1009883a 	mov	r4,r2
   8c07c:	e0bffe17 	ldw	r2,-8(fp)
   8c080:	1885883a 	add	r2,r3,r2
   8c084:	10800e04 	addi	r2,r2,56
   8c088:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c08c:	e0bffe17 	ldw	r2,-8(fp)
   8c090:	10800a17 	ldw	r2,40(r2)
   8c094:	10800044 	addi	r2,r2,1
   8c098:	10c1ffcc 	andi	r3,r2,2047
   8c09c:	e0bffe17 	ldw	r2,-8(fp)
   8c0a0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   8c0a4:	003fe106 	br	8c02c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   8c0a8:	e0bffb17 	ldw	r2,-20(fp)
   8c0ac:	10bfffec 	andhi	r2,r2,65535
   8c0b0:	1005003a 	cmpeq	r2,r2,zero
   8c0b4:	1000101e 	bne	r2,zero,8c0f8 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8c0b8:	e0bffe17 	ldw	r2,-8(fp)
   8c0bc:	10c00817 	ldw	r3,32(r2)
   8c0c0:	00bfff84 	movi	r2,-2
   8c0c4:	1886703a 	and	r3,r3,r2
   8c0c8:	e0bffe17 	ldw	r2,-8(fp)
   8c0cc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8c0d0:	e0bffd17 	ldw	r2,-12(fp)
   8c0d4:	11000104 	addi	r4,r2,4
   8c0d8:	e0bffe17 	ldw	r2,-8(fp)
   8c0dc:	10800817 	ldw	r2,32(r2)
   8c0e0:	1007883a 	mov	r3,r2
   8c0e4:	2005883a 	mov	r2,r4
   8c0e8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8c0ec:	e0bffd17 	ldw	r2,-12(fp)
   8c0f0:	10800104 	addi	r2,r2,4
   8c0f4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   8c0f8:	e0bffc17 	ldw	r2,-16(fp)
   8c0fc:	1080800c 	andi	r2,r2,512
   8c100:	1005003a 	cmpeq	r2,r2,zero
   8c104:	103fbb1e 	bne	r2,zero,8bff4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   8c108:	e0bffc17 	ldw	r2,-16(fp)
   8c10c:	10bfffec 	andhi	r2,r2,65535
   8c110:	1004d43a 	srli	r2,r2,16
   8c114:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   8c118:	00001506 	br	8c170 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8c11c:	e13ffd17 	ldw	r4,-12(fp)
   8c120:	e0bffe17 	ldw	r2,-8(fp)
   8c124:	10c00d17 	ldw	r3,52(r2)
   8c128:	e0bffe17 	ldw	r2,-8(fp)
   8c12c:	1885883a 	add	r2,r3,r2
   8c130:	10820e04 	addi	r2,r2,2104
   8c134:	10800003 	ldbu	r2,0(r2)
   8c138:	10c03fcc 	andi	r3,r2,255
   8c13c:	18c0201c 	xori	r3,r3,128
   8c140:	18ffe004 	addi	r3,r3,-128
   8c144:	2005883a 	mov	r2,r4
   8c148:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c14c:	e0bffe17 	ldw	r2,-8(fp)
   8c150:	10800d17 	ldw	r2,52(r2)
   8c154:	10800044 	addi	r2,r2,1
   8c158:	10c1ffcc 	andi	r3,r2,2047
   8c15c:	e0bffe17 	ldw	r2,-8(fp)
   8c160:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   8c164:	e0bff917 	ldw	r2,-28(fp)
   8c168:	10bfffc4 	addi	r2,r2,-1
   8c16c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   8c170:	e0bff917 	ldw	r2,-28(fp)
   8c174:	1005003a 	cmpeq	r2,r2,zero
   8c178:	1000051e 	bne	r2,zero,8c190 <altera_avalon_jtag_uart_irq+0x1c4>
   8c17c:	e0bffe17 	ldw	r2,-8(fp)
   8c180:	10c00d17 	ldw	r3,52(r2)
   8c184:	e0bffe17 	ldw	r2,-8(fp)
   8c188:	10800c17 	ldw	r2,48(r2)
   8c18c:	18bfe31e 	bne	r3,r2,8c11c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   8c190:	e0bff917 	ldw	r2,-28(fp)
   8c194:	1005003a 	cmpeq	r2,r2,zero
   8c198:	103f961e 	bne	r2,zero,8bff4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8c19c:	e0bffe17 	ldw	r2,-8(fp)
   8c1a0:	10c00817 	ldw	r3,32(r2)
   8c1a4:	00bfff44 	movi	r2,-3
   8c1a8:	1886703a 	and	r3,r3,r2
   8c1ac:	e0bffe17 	ldw	r2,-8(fp)
   8c1b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8c1b4:	e0bffe17 	ldw	r2,-8(fp)
   8c1b8:	10800017 	ldw	r2,0(r2)
   8c1bc:	11000104 	addi	r4,r2,4
   8c1c0:	e0bffe17 	ldw	r2,-8(fp)
   8c1c4:	10800817 	ldw	r2,32(r2)
   8c1c8:	1007883a 	mov	r3,r2
   8c1cc:	2005883a 	mov	r2,r4
   8c1d0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8c1d4:	e0bffd17 	ldw	r2,-12(fp)
   8c1d8:	10800104 	addi	r2,r2,4
   8c1dc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   8c1e0:	003f8406 	br	8bff4 <altera_avalon_jtag_uart_irq+0x28>
}
   8c1e4:	e037883a 	mov	sp,fp
   8c1e8:	df000017 	ldw	fp,0(sp)
   8c1ec:	dec00104 	addi	sp,sp,4
   8c1f0:	f800283a 	ret

0008c1f4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   8c1f4:	defffc04 	addi	sp,sp,-16
   8c1f8:	df000315 	stw	fp,12(sp)
   8c1fc:	df000304 	addi	fp,sp,12
   8c200:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   8c204:	e0bfff17 	ldw	r2,-4(fp)
   8c208:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   8c20c:	e0bffe17 	ldw	r2,-8(fp)
   8c210:	10800017 	ldw	r2,0(r2)
   8c214:	10800104 	addi	r2,r2,4
   8c218:	10800037 	ldwio	r2,0(r2)
   8c21c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8c220:	e0bffd17 	ldw	r2,-12(fp)
   8c224:	1081000c 	andi	r2,r2,1024
   8c228:	1005003a 	cmpeq	r2,r2,zero
   8c22c:	10000c1e 	bne	r2,zero,8c260 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8c230:	e0bffe17 	ldw	r2,-8(fp)
   8c234:	10800017 	ldw	r2,0(r2)
   8c238:	11000104 	addi	r4,r2,4
   8c23c:	e0bffe17 	ldw	r2,-8(fp)
   8c240:	10800817 	ldw	r2,32(r2)
   8c244:	10810014 	ori	r2,r2,1024
   8c248:	1007883a 	mov	r3,r2
   8c24c:	2005883a 	mov	r2,r4
   8c250:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   8c254:	e0bffe17 	ldw	r2,-8(fp)
   8c258:	10000915 	stw	zero,36(r2)
   8c25c:	00000a06 	br	8c288 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   8c260:	e0bffe17 	ldw	r2,-8(fp)
   8c264:	10c00917 	ldw	r3,36(r2)
   8c268:	00a00034 	movhi	r2,32768
   8c26c:	10bfff04 	addi	r2,r2,-4
   8c270:	10c00536 	bltu	r2,r3,8c288 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   8c274:	e0bffe17 	ldw	r2,-8(fp)
   8c278:	10800917 	ldw	r2,36(r2)
   8c27c:	10c00044 	addi	r3,r2,1
   8c280:	e0bffe17 	ldw	r2,-8(fp)
   8c284:	10c00915 	stw	r3,36(r2)
   8c288:	00800274 	movhi	r2,9
   8c28c:	10871804 	addi	r2,r2,7264
   8c290:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   8c294:	e037883a 	mov	sp,fp
   8c298:	df000017 	ldw	fp,0(sp)
   8c29c:	dec00104 	addi	sp,sp,4
   8c2a0:	f800283a 	ret

0008c2a4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   8c2a4:	defffc04 	addi	sp,sp,-16
   8c2a8:	df000315 	stw	fp,12(sp)
   8c2ac:	df000304 	addi	fp,sp,12
   8c2b0:	e13ffd15 	stw	r4,-12(fp)
   8c2b4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8c2b8:	00000706 	br	8c2d8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   8c2bc:	e0bffe17 	ldw	r2,-8(fp)
   8c2c0:	1090000c 	andi	r2,r2,16384
   8c2c4:	1005003a 	cmpeq	r2,r2,zero
   8c2c8:	1000031e 	bne	r2,zero,8c2d8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   8c2cc:	00bffd44 	movi	r2,-11
   8c2d0:	e0bfff15 	stw	r2,-4(fp)
   8c2d4:	00000b06 	br	8c304 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8c2d8:	e0bffd17 	ldw	r2,-12(fp)
   8c2dc:	10c00d17 	ldw	r3,52(r2)
   8c2e0:	e0bffd17 	ldw	r2,-12(fp)
   8c2e4:	10800c17 	ldw	r2,48(r2)
   8c2e8:	18800526 	beq	r3,r2,8c300 <altera_avalon_jtag_uart_close+0x5c>
   8c2ec:	e0bffd17 	ldw	r2,-12(fp)
   8c2f0:	10c00917 	ldw	r3,36(r2)
   8c2f4:	e0bffd17 	ldw	r2,-12(fp)
   8c2f8:	10800117 	ldw	r2,4(r2)
   8c2fc:	18bfef36 	bltu	r3,r2,8c2bc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8c300:	e03fff15 	stw	zero,-4(fp)
   8c304:	e0bfff17 	ldw	r2,-4(fp)
}
   8c308:	e037883a 	mov	sp,fp
   8c30c:	df000017 	ldw	fp,0(sp)
   8c310:	dec00104 	addi	sp,sp,4
   8c314:	f800283a 	ret

0008c318 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   8c318:	defff804 	addi	sp,sp,-32
   8c31c:	df000715 	stw	fp,28(sp)
   8c320:	df000704 	addi	fp,sp,28
   8c324:	e13ffb15 	stw	r4,-20(fp)
   8c328:	e17ffc15 	stw	r5,-16(fp)
   8c32c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   8c330:	00bff9c4 	movi	r2,-25
   8c334:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   8c338:	e0bffc17 	ldw	r2,-16(fp)
   8c33c:	e0bfff15 	stw	r2,-4(fp)
   8c340:	e0ffff17 	ldw	r3,-4(fp)
   8c344:	189a8060 	cmpeqi	r2,r3,27137
   8c348:	1000041e 	bne	r2,zero,8c35c <altera_avalon_jtag_uart_ioctl+0x44>
   8c34c:	e0ffff17 	ldw	r3,-4(fp)
   8c350:	189a80a0 	cmpeqi	r2,r3,27138
   8c354:	10001b1e 	bne	r2,zero,8c3c4 <altera_avalon_jtag_uart_ioctl+0xac>
   8c358:	00002706 	br	8c3f8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   8c35c:	e0bffb17 	ldw	r2,-20(fp)
   8c360:	10c00117 	ldw	r3,4(r2)
   8c364:	00a00034 	movhi	r2,32768
   8c368:	10bfffc4 	addi	r2,r2,-1
   8c36c:	18802226 	beq	r3,r2,8c3f8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   8c370:	e0bffd17 	ldw	r2,-12(fp)
   8c374:	10800017 	ldw	r2,0(r2)
   8c378:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   8c37c:	e0bff917 	ldw	r2,-28(fp)
   8c380:	10800090 	cmplti	r2,r2,2
   8c384:	1000071e 	bne	r2,zero,8c3a4 <altera_avalon_jtag_uart_ioctl+0x8c>
   8c388:	e0fff917 	ldw	r3,-28(fp)
   8c38c:	00a00034 	movhi	r2,32768
   8c390:	10bfffc4 	addi	r2,r2,-1
   8c394:	18800326 	beq	r3,r2,8c3a4 <altera_avalon_jtag_uart_ioctl+0x8c>
   8c398:	e0bff917 	ldw	r2,-28(fp)
   8c39c:	e0bffe15 	stw	r2,-8(fp)
   8c3a0:	00000306 	br	8c3b0 <altera_avalon_jtag_uart_ioctl+0x98>
   8c3a4:	00e00034 	movhi	r3,32768
   8c3a8:	18ffff84 	addi	r3,r3,-2
   8c3ac:	e0fffe15 	stw	r3,-8(fp)
   8c3b0:	e0bffb17 	ldw	r2,-20(fp)
   8c3b4:	e0fffe17 	ldw	r3,-8(fp)
   8c3b8:	10c00115 	stw	r3,4(r2)
      rc = 0;
   8c3bc:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   8c3c0:	00000d06 	br	8c3f8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   8c3c4:	e0bffb17 	ldw	r2,-20(fp)
   8c3c8:	10c00117 	ldw	r3,4(r2)
   8c3cc:	00a00034 	movhi	r2,32768
   8c3d0:	10bfffc4 	addi	r2,r2,-1
   8c3d4:	18800826 	beq	r3,r2,8c3f8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8c3d8:	e13ffd17 	ldw	r4,-12(fp)
   8c3dc:	e0bffb17 	ldw	r2,-20(fp)
   8c3e0:	10c00917 	ldw	r3,36(r2)
   8c3e4:	e0bffb17 	ldw	r2,-20(fp)
   8c3e8:	10800117 	ldw	r2,4(r2)
   8c3ec:	1885803a 	cmpltu	r2,r3,r2
   8c3f0:	20800015 	stw	r2,0(r4)
      rc = 0;
   8c3f4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   8c3f8:	e0bffa17 	ldw	r2,-24(fp)
}
   8c3fc:	e037883a 	mov	sp,fp
   8c400:	df000017 	ldw	fp,0(sp)
   8c404:	dec00104 	addi	sp,sp,4
   8c408:	f800283a 	ret

0008c40c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8c40c:	defff204 	addi	sp,sp,-56
   8c410:	dfc00d15 	stw	ra,52(sp)
   8c414:	df000c15 	stw	fp,48(sp)
   8c418:	df000c04 	addi	fp,sp,48
   8c41c:	e13ffb15 	stw	r4,-20(fp)
   8c420:	e17ffc15 	stw	r5,-16(fp)
   8c424:	e1bffd15 	stw	r6,-12(fp)
   8c428:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   8c42c:	e0bffc17 	ldw	r2,-16(fp)
   8c430:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8c434:	00004806 	br	8c558 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8c438:	e0bffb17 	ldw	r2,-20(fp)
   8c43c:	10800a17 	ldw	r2,40(r2)
   8c440:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   8c444:	e0bffb17 	ldw	r2,-20(fp)
   8c448:	10800b17 	ldw	r2,44(r2)
   8c44c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   8c450:	e0fff717 	ldw	r3,-36(fp)
   8c454:	e0bff617 	ldw	r2,-40(fp)
   8c458:	18800536 	bltu	r3,r2,8c470 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   8c45c:	e0bff717 	ldw	r2,-36(fp)
   8c460:	e0fff617 	ldw	r3,-40(fp)
   8c464:	10c5c83a 	sub	r2,r2,r3
   8c468:	e0bff815 	stw	r2,-32(fp)
   8c46c:	00000406 	br	8c480 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   8c470:	00820004 	movi	r2,2048
   8c474:	e0fff617 	ldw	r3,-40(fp)
   8c478:	10c5c83a 	sub	r2,r2,r3
   8c47c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   8c480:	e0bff817 	ldw	r2,-32(fp)
   8c484:	1005003a 	cmpeq	r2,r2,zero
   8c488:	10001f1e 	bne	r2,zero,8c508 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   8c48c:	e0fffd17 	ldw	r3,-12(fp)
   8c490:	e0bff817 	ldw	r2,-32(fp)
   8c494:	1880022e 	bgeu	r3,r2,8c4a0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   8c498:	e0bffd17 	ldw	r2,-12(fp)
   8c49c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   8c4a0:	e0bffb17 	ldw	r2,-20(fp)
   8c4a4:	10c00e04 	addi	r3,r2,56
   8c4a8:	e0bff617 	ldw	r2,-40(fp)
   8c4ac:	1887883a 	add	r3,r3,r2
   8c4b0:	e0bffa17 	ldw	r2,-24(fp)
   8c4b4:	1009883a 	mov	r4,r2
   8c4b8:	180b883a 	mov	r5,r3
   8c4bc:	e1bff817 	ldw	r6,-32(fp)
   8c4c0:	0087a480 	call	87a48 <memcpy>
      ptr   += n;
   8c4c4:	e0fff817 	ldw	r3,-32(fp)
   8c4c8:	e0bffa17 	ldw	r2,-24(fp)
   8c4cc:	10c5883a 	add	r2,r2,r3
   8c4d0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   8c4d4:	e0fffd17 	ldw	r3,-12(fp)
   8c4d8:	e0bff817 	ldw	r2,-32(fp)
   8c4dc:	1885c83a 	sub	r2,r3,r2
   8c4e0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c4e4:	e0fff617 	ldw	r3,-40(fp)
   8c4e8:	e0bff817 	ldw	r2,-32(fp)
   8c4ec:	1885883a 	add	r2,r3,r2
   8c4f0:	10c1ffcc 	andi	r3,r2,2047
   8c4f4:	e0bffb17 	ldw	r2,-20(fp)
   8c4f8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   8c4fc:	e0bffd17 	ldw	r2,-12(fp)
   8c500:	10800048 	cmpgei	r2,r2,1
   8c504:	103fcc1e 	bne	r2,zero,8c438 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   8c508:	e0fffa17 	ldw	r3,-24(fp)
   8c50c:	e0bffc17 	ldw	r2,-16(fp)
   8c510:	1880141e 	bne	r3,r2,8c564 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8c514:	e0bffe17 	ldw	r2,-8(fp)
   8c518:	1090000c 	andi	r2,r2,16384
   8c51c:	1004c03a 	cmpne	r2,r2,zero
   8c520:	1000101e 	bne	r2,zero,8c564 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   8c524:	e0bffb17 	ldw	r2,-20(fp)
   8c528:	10c00a17 	ldw	r3,40(r2)
   8c52c:	e0bff717 	ldw	r2,-36(fp)
   8c530:	1880051e 	bne	r3,r2,8c548 <altera_avalon_jtag_uart_read+0x13c>
   8c534:	e0bffb17 	ldw	r2,-20(fp)
   8c538:	10c00917 	ldw	r3,36(r2)
   8c53c:	e0bffb17 	ldw	r2,-20(fp)
   8c540:	10800117 	ldw	r2,4(r2)
   8c544:	18bff736 	bltu	r3,r2,8c524 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   8c548:	e0bffb17 	ldw	r2,-20(fp)
   8c54c:	10c00a17 	ldw	r3,40(r2)
   8c550:	e0bff717 	ldw	r2,-36(fp)
   8c554:	18800326 	beq	r3,r2,8c564 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8c558:	e0bffd17 	ldw	r2,-12(fp)
   8c55c:	10800048 	cmpgei	r2,r2,1
   8c560:	103fb51e 	bne	r2,zero,8c438 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   8c564:	e0fffa17 	ldw	r3,-24(fp)
   8c568:	e0bffc17 	ldw	r2,-16(fp)
   8c56c:	18801926 	beq	r3,r2,8c5d4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c570:	0005303a 	rdctl	r2,status
   8c574:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c578:	e0fff517 	ldw	r3,-44(fp)
   8c57c:	00bfff84 	movi	r2,-2
   8c580:	1884703a 	and	r2,r3,r2
   8c584:	1001703a 	wrctl	status,r2
  
  return context;
   8c588:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   8c58c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8c590:	e0bffb17 	ldw	r2,-20(fp)
   8c594:	10800817 	ldw	r2,32(r2)
   8c598:	10c00054 	ori	r3,r2,1
   8c59c:	e0bffb17 	ldw	r2,-20(fp)
   8c5a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8c5a4:	e0bffb17 	ldw	r2,-20(fp)
   8c5a8:	10800017 	ldw	r2,0(r2)
   8c5ac:	11000104 	addi	r4,r2,4
   8c5b0:	e0bffb17 	ldw	r2,-20(fp)
   8c5b4:	10800817 	ldw	r2,32(r2)
   8c5b8:	1007883a 	mov	r3,r2
   8c5bc:	2005883a 	mov	r2,r4
   8c5c0:	10c00035 	stwio	r3,0(r2)
   8c5c4:	e0bff917 	ldw	r2,-28(fp)
   8c5c8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c5cc:	e0bff417 	ldw	r2,-48(fp)
   8c5d0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   8c5d4:	e0fffa17 	ldw	r3,-24(fp)
   8c5d8:	e0bffc17 	ldw	r2,-16(fp)
   8c5dc:	18800526 	beq	r3,r2,8c5f4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   8c5e0:	e0fffa17 	ldw	r3,-24(fp)
   8c5e4:	e0bffc17 	ldw	r2,-16(fp)
   8c5e8:	1887c83a 	sub	r3,r3,r2
   8c5ec:	e0ffff15 	stw	r3,-4(fp)
   8c5f0:	00000906 	br	8c618 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   8c5f4:	e0bffe17 	ldw	r2,-8(fp)
   8c5f8:	1090000c 	andi	r2,r2,16384
   8c5fc:	1005003a 	cmpeq	r2,r2,zero
   8c600:	1000031e 	bne	r2,zero,8c610 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   8c604:	00bffd44 	movi	r2,-11
   8c608:	e0bfff15 	stw	r2,-4(fp)
   8c60c:	00000206 	br	8c618 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   8c610:	00bffec4 	movi	r2,-5
   8c614:	e0bfff15 	stw	r2,-4(fp)
   8c618:	e0bfff17 	ldw	r2,-4(fp)
}
   8c61c:	e037883a 	mov	sp,fp
   8c620:	dfc00117 	ldw	ra,4(sp)
   8c624:	df000017 	ldw	fp,0(sp)
   8c628:	dec00204 	addi	sp,sp,8
   8c62c:	f800283a 	ret

0008c630 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8c630:	defff204 	addi	sp,sp,-56
   8c634:	dfc00d15 	stw	ra,52(sp)
   8c638:	df000c15 	stw	fp,48(sp)
   8c63c:	df000c04 	addi	fp,sp,48
   8c640:	e13ffb15 	stw	r4,-20(fp)
   8c644:	e17ffc15 	stw	r5,-16(fp)
   8c648:	e1bffd15 	stw	r6,-12(fp)
   8c64c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   8c650:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   8c654:	e0bffc17 	ldw	r2,-16(fp)
   8c658:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8c65c:	00003a06 	br	8c748 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8c660:	e0bffb17 	ldw	r2,-20(fp)
   8c664:	10800c17 	ldw	r2,48(r2)
   8c668:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   8c66c:	e0bffb17 	ldw	r2,-20(fp)
   8c670:	10800d17 	ldw	r2,52(r2)
   8c674:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   8c678:	e0fffa17 	ldw	r3,-24(fp)
   8c67c:	e0bff917 	ldw	r2,-28(fp)
   8c680:	1880062e 	bgeu	r3,r2,8c69c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   8c684:	e0fff917 	ldw	r3,-28(fp)
   8c688:	e0bffa17 	ldw	r2,-24(fp)
   8c68c:	1885c83a 	sub	r2,r3,r2
   8c690:	10bfffc4 	addi	r2,r2,-1
   8c694:	e0bff815 	stw	r2,-32(fp)
   8c698:	00000c06 	br	8c6cc <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   8c69c:	e0bff917 	ldw	r2,-28(fp)
   8c6a0:	1005003a 	cmpeq	r2,r2,zero
   8c6a4:	1000051e 	bne	r2,zero,8c6bc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8c6a8:	00820004 	movi	r2,2048
   8c6ac:	e0fffa17 	ldw	r3,-24(fp)
   8c6b0:	10c5c83a 	sub	r2,r2,r3
   8c6b4:	e0bff815 	stw	r2,-32(fp)
   8c6b8:	00000406 	br	8c6cc <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8c6bc:	0081ffc4 	movi	r2,2047
   8c6c0:	e0fffa17 	ldw	r3,-24(fp)
   8c6c4:	10c5c83a 	sub	r2,r2,r3
   8c6c8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   8c6cc:	e0bff817 	ldw	r2,-32(fp)
   8c6d0:	1005003a 	cmpeq	r2,r2,zero
   8c6d4:	10001f1e 	bne	r2,zero,8c754 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   8c6d8:	e0fffd17 	ldw	r3,-12(fp)
   8c6dc:	e0bff817 	ldw	r2,-32(fp)
   8c6e0:	1880022e 	bgeu	r3,r2,8c6ec <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   8c6e4:	e0bffd17 	ldw	r2,-12(fp)
   8c6e8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   8c6ec:	e0bffb17 	ldw	r2,-20(fp)
   8c6f0:	10c20e04 	addi	r3,r2,2104
   8c6f4:	e0bffa17 	ldw	r2,-24(fp)
   8c6f8:	1885883a 	add	r2,r3,r2
   8c6fc:	e0fffc17 	ldw	r3,-16(fp)
   8c700:	1009883a 	mov	r4,r2
   8c704:	180b883a 	mov	r5,r3
   8c708:	e1bff817 	ldw	r6,-32(fp)
   8c70c:	0087a480 	call	87a48 <memcpy>
      ptr   += n;
   8c710:	e0fff817 	ldw	r3,-32(fp)
   8c714:	e0bffc17 	ldw	r2,-16(fp)
   8c718:	10c5883a 	add	r2,r2,r3
   8c71c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   8c720:	e0fffd17 	ldw	r3,-12(fp)
   8c724:	e0bff817 	ldw	r2,-32(fp)
   8c728:	1885c83a 	sub	r2,r3,r2
   8c72c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c730:	e0fffa17 	ldw	r3,-24(fp)
   8c734:	e0bff817 	ldw	r2,-32(fp)
   8c738:	1885883a 	add	r2,r3,r2
   8c73c:	10c1ffcc 	andi	r3,r2,2047
   8c740:	e0bffb17 	ldw	r2,-20(fp)
   8c744:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8c748:	e0bffd17 	ldw	r2,-12(fp)
   8c74c:	10800048 	cmpgei	r2,r2,1
   8c750:	103fc31e 	bne	r2,zero,8c660 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c754:	0005303a 	rdctl	r2,status
   8c758:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c75c:	e0fff517 	ldw	r3,-44(fp)
   8c760:	00bfff84 	movi	r2,-2
   8c764:	1884703a 	and	r2,r3,r2
   8c768:	1001703a 	wrctl	status,r2
  
  return context;
   8c76c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   8c770:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8c774:	e0bffb17 	ldw	r2,-20(fp)
   8c778:	10800817 	ldw	r2,32(r2)
   8c77c:	10c00094 	ori	r3,r2,2
   8c780:	e0bffb17 	ldw	r2,-20(fp)
   8c784:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8c788:	e0bffb17 	ldw	r2,-20(fp)
   8c78c:	10800017 	ldw	r2,0(r2)
   8c790:	11000104 	addi	r4,r2,4
   8c794:	e0bffb17 	ldw	r2,-20(fp)
   8c798:	10800817 	ldw	r2,32(r2)
   8c79c:	1007883a 	mov	r3,r2
   8c7a0:	2005883a 	mov	r2,r4
   8c7a4:	10c00035 	stwio	r3,0(r2)
   8c7a8:	e0bff717 	ldw	r2,-36(fp)
   8c7ac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c7b0:	e0bff417 	ldw	r2,-48(fp)
   8c7b4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   8c7b8:	e0bffd17 	ldw	r2,-12(fp)
   8c7bc:	10800050 	cmplti	r2,r2,1
   8c7c0:	1000111e 	bne	r2,zero,8c808 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   8c7c4:	e0bffe17 	ldw	r2,-8(fp)
   8c7c8:	1090000c 	andi	r2,r2,16384
   8c7cc:	1004c03a 	cmpne	r2,r2,zero
   8c7d0:	1000101e 	bne	r2,zero,8c814 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   8c7d4:	e0bffb17 	ldw	r2,-20(fp)
   8c7d8:	10c00d17 	ldw	r3,52(r2)
   8c7dc:	e0bff917 	ldw	r2,-28(fp)
   8c7e0:	1880051e 	bne	r3,r2,8c7f8 <altera_avalon_jtag_uart_write+0x1c8>
   8c7e4:	e0bffb17 	ldw	r2,-20(fp)
   8c7e8:	10c00917 	ldw	r3,36(r2)
   8c7ec:	e0bffb17 	ldw	r2,-20(fp)
   8c7f0:	10800117 	ldw	r2,4(r2)
   8c7f4:	18bff736 	bltu	r3,r2,8c7d4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   8c7f8:	e0bffb17 	ldw	r2,-20(fp)
   8c7fc:	10c00d17 	ldw	r3,52(r2)
   8c800:	e0bff917 	ldw	r2,-28(fp)
   8c804:	18800326 	beq	r3,r2,8c814 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
   8c808:	e0bffd17 	ldw	r2,-12(fp)
   8c80c:	10800048 	cmpgei	r2,r2,1
   8c810:	103fcd1e 	bne	r2,zero,8c748 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   8c814:	e0fffc17 	ldw	r3,-16(fp)
   8c818:	e0bff617 	ldw	r2,-40(fp)
   8c81c:	18800526 	beq	r3,r2,8c834 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   8c820:	e0fffc17 	ldw	r3,-16(fp)
   8c824:	e0bff617 	ldw	r2,-40(fp)
   8c828:	1887c83a 	sub	r3,r3,r2
   8c82c:	e0ffff15 	stw	r3,-4(fp)
   8c830:	00000906 	br	8c858 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   8c834:	e0bffe17 	ldw	r2,-8(fp)
   8c838:	1090000c 	andi	r2,r2,16384
   8c83c:	1005003a 	cmpeq	r2,r2,zero
   8c840:	1000031e 	bne	r2,zero,8c850 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   8c844:	00bffd44 	movi	r2,-11
   8c848:	e0bfff15 	stw	r2,-4(fp)
   8c84c:	00000206 	br	8c858 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
   8c850:	00bffec4 	movi	r2,-5
   8c854:	e0bfff15 	stw	r2,-4(fp)
   8c858:	e0bfff17 	ldw	r2,-4(fp)
}
   8c85c:	e037883a 	mov	sp,fp
   8c860:	dfc00117 	ldw	ra,4(sp)
   8c864:	df000017 	ldw	fp,0(sp)
   8c868:	dec00204 	addi	sp,sp,8
   8c86c:	f800283a 	ret

0008c870 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
   8c870:	defff904 	addi	sp,sp,-28
   8c874:	df000615 	stw	fp,24(sp)
   8c878:	df000604 	addi	fp,sp,24
   8c87c:	e13ffe15 	stw	r4,-8(fp)
   8c880:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
   8c884:	00bfffc4 	movi	r2,-1
   8c888:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
   8c88c:	0005317a 	rdctl	r2,cpuid
   8c890:	e0bffd15 	stw	r2,-12(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
   8c894:	e0bffd17 	ldw	r2,-12(fp)
   8c898:	1006943a 	slli	r3,r2,16
   8c89c:	e0bfff17 	ldw	r2,-4(fp)
   8c8a0:	1884b03a 	or	r2,r3,r2
   8c8a4:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
   8c8a8:	e0bffe17 	ldw	r2,-8(fp)
   8c8ac:	10800317 	ldw	r2,12(r2)
   8c8b0:	e0fffc17 	ldw	r3,-16(fp)
   8c8b4:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
   8c8b8:	e0bffe17 	ldw	r2,-8(fp)
   8c8bc:	10800317 	ldw	r2,12(r2)
   8c8c0:	10800037 	ldwio	r2,0(r2)
   8c8c4:	e0bffb15 	stw	r2,-20(fp)

  if ( check == data)
   8c8c8:	e0fffb17 	ldw	r3,-20(fp)
   8c8cc:	e0bffc17 	ldw	r2,-16(fp)
   8c8d0:	1880011e 	bne	r3,r2,8c8d8 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
   8c8d4:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
   8c8d8:	e0bffa17 	ldw	r2,-24(fp)
}
   8c8dc:	e037883a 	mov	sp,fp
   8c8e0:	df000017 	ldw	fp,0(sp)
   8c8e4:	dec00104 	addi	sp,sp,4
   8c8e8:	f800283a 	ret

0008c8ec <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
   8c8ec:	defffc04 	addi	sp,sp,-16
   8c8f0:	dfc00315 	stw	ra,12(sp)
   8c8f4:	df000215 	stw	fp,8(sp)
   8c8f8:	df000204 	addi	fp,sp,8
   8c8fc:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
   8c900:	e13fff17 	ldw	r4,-4(fp)
   8c904:	d1600e04 	addi	r5,gp,-32712
   8c908:	008d1480 	call	8d148 <alt_find_dev>
   8c90c:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
   8c910:	e0bffe17 	ldw	r2,-8(fp)
   8c914:	1004c03a 	cmpne	r2,r2,zero
   8c918:	1000041e 	bne	r2,zero,8c92c <altera_avalon_mutex_open+0x40>
  {
    ALT_ERRNO = ENODEV;
   8c91c:	008c9440 	call	8c944 <alt_get_errno>
   8c920:	1007883a 	mov	r3,r2
   8c924:	008004c4 	movi	r2,19
   8c928:	18800015 	stw	r2,0(r3)
  }

  return dev;
   8c92c:	e0bffe17 	ldw	r2,-8(fp)
}
   8c930:	e037883a 	mov	sp,fp
   8c934:	dfc00117 	ldw	ra,4(sp)
   8c938:	df000017 	ldw	fp,0(sp)
   8c93c:	dec00204 	addi	sp,sp,8
   8c940:	f800283a 	ret

0008c944 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8c944:	defffd04 	addi	sp,sp,-12
   8c948:	dfc00215 	stw	ra,8(sp)
   8c94c:	df000115 	stw	fp,4(sp)
   8c950:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8c954:	00800274 	movhi	r2,9
   8c958:	10806804 	addi	r2,r2,416
   8c95c:	10800017 	ldw	r2,0(r2)
   8c960:	1005003a 	cmpeq	r2,r2,zero
   8c964:	1000061e 	bne	r2,zero,8c980 <alt_get_errno+0x3c>
   8c968:	00800274 	movhi	r2,9
   8c96c:	10806804 	addi	r2,r2,416
   8c970:	10800017 	ldw	r2,0(r2)
   8c974:	103ee83a 	callr	r2
   8c978:	e0bfff15 	stw	r2,-4(fp)
   8c97c:	00000306 	br	8c98c <alt_get_errno+0x48>
   8c980:	00800274 	movhi	r2,9
   8c984:	10871004 	addi	r2,r2,7232
   8c988:	e0bfff15 	stw	r2,-4(fp)
   8c98c:	e0bfff17 	ldw	r2,-4(fp)
}
   8c990:	e037883a 	mov	sp,fp
   8c994:	dfc00117 	ldw	ra,4(sp)
   8c998:	df000017 	ldw	fp,0(sp)
   8c99c:	dec00204 	addi	sp,sp,8
   8c9a0:	f800283a 	ret

0008c9a4 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
   8c9a4:	defffe04 	addi	sp,sp,-8
   8c9a8:	df000115 	stw	fp,4(sp)
   8c9ac:	df000104 	addi	fp,sp,4
   8c9b0:	e13fff15 	stw	r4,-4(fp)
  return;
}
   8c9b4:	e037883a 	mov	sp,fp
   8c9b8:	df000017 	ldw	fp,0(sp)
   8c9bc:	dec00104 	addi	sp,sp,4
   8c9c0:	f800283a 	ret

0008c9c4 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
   8c9c4:	defffc04 	addi	sp,sp,-16
   8c9c8:	dfc00315 	stw	ra,12(sp)
   8c9cc:	df000215 	stw	fp,8(sp)
   8c9d0:	df000204 	addi	fp,sp,8
   8c9d4:	e13ffe15 	stw	r4,-8(fp)
   8c9d8:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
   8c9dc:	e13ffe17 	ldw	r4,-8(fp)
   8c9e0:	e17fff17 	ldw	r5,-4(fp)
   8c9e4:	008c8700 	call	8c870 <alt_mutex_trylock>
   8c9e8:	1004c03a 	cmpne	r2,r2,zero
   8c9ec:	103ffb1e 	bne	r2,zero,8c9dc <altera_avalon_mutex_lock+0x18>
}
   8c9f0:	e037883a 	mov	sp,fp
   8c9f4:	dfc00117 	ldw	ra,4(sp)
   8c9f8:	df000017 	ldw	fp,0(sp)
   8c9fc:	dec00204 	addi	sp,sp,8
   8ca00:	f800283a 	ret

0008ca04 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
   8ca04:	defffb04 	addi	sp,sp,-20
   8ca08:	dfc00415 	stw	ra,16(sp)
   8ca0c:	df000315 	stw	fp,12(sp)
   8ca10:	df000304 	addi	fp,sp,12
   8ca14:	e13ffe15 	stw	r4,-8(fp)
   8ca18:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
   8ca1c:	e13ffe17 	ldw	r4,-8(fp)
   8ca20:	e17fff17 	ldw	r5,-4(fp)
   8ca24:	008c8700 	call	8c870 <alt_mutex_trylock>
   8ca28:	e0bffd15 	stw	r2,-12(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
   8ca2c:	e0bffd17 	ldw	r2,-12(fp)
}
   8ca30:	e037883a 	mov	sp,fp
   8ca34:	dfc00117 	ldw	ra,4(sp)
   8ca38:	df000017 	ldw	fp,0(sp)
   8ca3c:	dec00204 	addi	sp,sp,8
   8ca40:	f800283a 	ret

0008ca44 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
   8ca44:	defffd04 	addi	sp,sp,-12
   8ca48:	df000215 	stw	fp,8(sp)
   8ca4c:	df000204 	addi	fp,sp,8
   8ca50:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
   8ca54:	0005317a 	rdctl	r2,cpuid
   8ca58:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
   8ca5c:	e0bfff17 	ldw	r2,-4(fp)
   8ca60:	10800317 	ldw	r2,12(r2)
   8ca64:	10800104 	addi	r2,r2,4
   8ca68:	1007883a 	mov	r3,r2
   8ca6c:	00800044 	movi	r2,1
   8ca70:	18800035 	stwio	r2,0(r3)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
   8ca74:	e0bfff17 	ldw	r2,-4(fp)
   8ca78:	11000317 	ldw	r4,12(r2)
   8ca7c:	e0bffe17 	ldw	r2,-8(fp)
   8ca80:	1004943a 	slli	r2,r2,16
   8ca84:	1007883a 	mov	r3,r2
   8ca88:	2005883a 	mov	r2,r4
   8ca8c:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
   8ca90:	e037883a 	mov	sp,fp
   8ca94:	df000017 	ldw	fp,0(sp)
   8ca98:	dec00104 	addi	sp,sp,4
   8ca9c:	f800283a 	ret

0008caa0 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
   8caa0:	defff904 	addi	sp,sp,-28
   8caa4:	df000615 	stw	fp,24(sp)
   8caa8:	df000604 	addi	fp,sp,24
   8caac:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
   8cab0:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
   8cab4:	0005317a 	rdctl	r2,cpuid
   8cab8:	e0bffe15 	stw	r2,-8(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
   8cabc:	e0bfff17 	ldw	r2,-4(fp)
   8cac0:	10800317 	ldw	r2,12(r2)
   8cac4:	10800037 	ldwio	r2,0(r2)
   8cac8:	e0bffd15 	stw	r2,-12(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
   8cacc:	e0bffd17 	ldw	r2,-12(fp)
   8cad0:	10bfffec 	andhi	r2,r2,65535
   8cad4:	1004d43a 	srli	r2,r2,16
   8cad8:	e0bffc15 	stw	r2,-16(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
   8cadc:	e0fffc17 	ldw	r3,-16(fp)
   8cae0:	e0bffe17 	ldw	r2,-8(fp)
   8cae4:	1880081e 	bne	r3,r2,8cb08 <altera_avalon_mutex_is_mine+0x68>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
   8cae8:	e0bffd17 	ldw	r2,-12(fp)
   8caec:	10bfffcc 	andi	r2,r2,65535
   8caf0:	e0bffb15 	stw	r2,-20(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
   8caf4:	e0bffb17 	ldw	r2,-20(fp)
   8caf8:	1005003a 	cmpeq	r2,r2,zero
   8cafc:	1000021e 	bne	r2,zero,8cb08 <altera_avalon_mutex_is_mine+0x68>
    {
      ret_code = 1;
   8cb00:	00800044 	movi	r2,1
   8cb04:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
   8cb08:	e0bffa17 	ldw	r2,-24(fp)
}
   8cb0c:	e037883a 	mov	sp,fp
   8cb10:	df000017 	ldw	fp,0(sp)
   8cb14:	dec00104 	addi	sp,sp,4
   8cb18:	f800283a 	ret

0008cb1c <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
   8cb1c:	defffc04 	addi	sp,sp,-16
   8cb20:	df000315 	stw	fp,12(sp)
   8cb24:	df000304 	addi	fp,sp,12
   8cb28:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
   8cb2c:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
   8cb30:	e0bfff17 	ldw	r2,-4(fp)
   8cb34:	10800317 	ldw	r2,12(r2)
   8cb38:	10800104 	addi	r2,r2,4
   8cb3c:	10800037 	ldwio	r2,0(r2)
   8cb40:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
   8cb44:	e0bffe17 	ldw	r2,-8(fp)
   8cb48:	1080004c 	andi	r2,r2,1
   8cb4c:	10803fcc 	andi	r2,r2,255
   8cb50:	1005003a 	cmpeq	r2,r2,zero
   8cb54:	1000021e 	bne	r2,zero,8cb60 <altera_avalon_mutex_first_lock+0x44>
  {
    ret_code = 1;
   8cb58:	00800044 	movi	r2,1
   8cb5c:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
   8cb60:	e0bffd17 	ldw	r2,-12(fp)
}
   8cb64:	e037883a 	mov	sp,fp
   8cb68:	df000017 	ldw	fp,0(sp)
   8cb6c:	dec00104 	addi	sp,sp,4
   8cb70:	f800283a 	ret

0008cb74 <perf_get_section_time>:

#include "altera_avalon_performance_counter.h"
#include "system.h"

alt_u64 perf_get_section_time (void* hw_base_address, int which_section)
{
   8cb74:	defff904 	addi	sp,sp,-28
   8cb78:	df000615 	stw	fp,24(sp)
   8cb7c:	df000604 	addi	fp,sp,24
   8cb80:	e13ffe15 	stw	r4,-8(fp)
   8cb84:	e17fff15 	stw	r5,-4(fp)
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;
   8cb88:	e03ffa15 	stw	zero,-24(fp)
   8cb8c:	e03ffb15 	stw	zero,-20(fp)

  PERF_STOP_MEASURING(hw_base_address);
   8cb90:	e0bffe17 	ldw	r2,-8(fp)
   8cb94:	10000035 	stwio	zero,0(r2)
  lo = IORD(hw_base_address, ( which_section*4   ));
   8cb98:	e0bfff17 	ldw	r2,-4(fp)
   8cb9c:	1004913a 	slli	r2,r2,4
   8cba0:	1007883a 	mov	r3,r2
   8cba4:	e0bffe17 	ldw	r2,-8(fp)
   8cba8:	1885883a 	add	r2,r3,r2
   8cbac:	10800037 	ldwio	r2,0(r2)
   8cbb0:	e0bffd15 	stw	r2,-12(fp)
  hi = IORD(hw_base_address, ((which_section*4)+1));
   8cbb4:	e0bfff17 	ldw	r2,-4(fp)
   8cbb8:	1004913a 	slli	r2,r2,4
   8cbbc:	1007883a 	mov	r3,r2
   8cbc0:	e0bffe17 	ldw	r2,-8(fp)
   8cbc4:	1885883a 	add	r2,r3,r2
   8cbc8:	10800104 	addi	r2,r2,4
   8cbcc:	10800037 	ldwio	r2,0(r2)
   8cbd0:	e0bffc15 	stw	r2,-16(fp)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
   8cbd4:	e0bffc17 	ldw	r2,-16(fp)
   8cbd8:	0007883a 	mov	r3,zero
   8cbdc:	100a983a 	sll	r5,r2,zero
   8cbe0:	0009883a 	mov	r4,zero
   8cbe4:	e0bffd17 	ldw	r2,-12(fp)
   8cbe8:	0007883a 	mov	r3,zero
   8cbec:	208cb03a 	or	r6,r4,r2
   8cbf0:	e1bffa15 	stw	r6,-24(fp)
   8cbf4:	28c4b03a 	or	r2,r5,r3
   8cbf8:	e0bffb15 	stw	r2,-20(fp)
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
   8cbfc:	e17ffa17 	ldw	r5,-24(fp)
   8cc00:	e1bffb17 	ldw	r6,-20(fp)
   8cc04:	2807883a 	mov	r3,r5
   8cc08:	3009883a 	mov	r4,r6
}
   8cc0c:	1805883a 	mov	r2,r3
   8cc10:	2007883a 	mov	r3,r4
   8cc14:	e037883a 	mov	sp,fp
   8cc18:	df000017 	ldw	fp,0(sp)
   8cc1c:	dec00104 	addi	sp,sp,4
   8cc20:	f800283a 	ret

0008cc24 <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
   8cc24:	defffd04 	addi	sp,sp,-12
   8cc28:	dfc00215 	stw	ra,8(sp)
   8cc2c:	df000115 	stw	fp,4(sp)
   8cc30:	df000104 	addi	fp,sp,4
   8cc34:	e13fff15 	stw	r4,-4(fp)
  return perf_get_section_time (hw_base_address, 0);
   8cc38:	e13fff17 	ldw	r4,-4(fp)
   8cc3c:	000b883a 	mov	r5,zero
   8cc40:	008cb740 	call	8cb74 <perf_get_section_time>
   8cc44:	1009883a 	mov	r4,r2
   8cc48:	180b883a 	mov	r5,r3
   8cc4c:	200d883a 	mov	r6,r4
   8cc50:	280f883a 	mov	r7,r5
   8cc54:	3007883a 	mov	r3,r6
   8cc58:	3809883a 	mov	r4,r7
}
   8cc5c:	1805883a 	mov	r2,r3
   8cc60:	2007883a 	mov	r3,r4
   8cc64:	e037883a 	mov	sp,fp
   8cc68:	dfc00117 	ldw	ra,4(sp)
   8cc6c:	df000017 	ldw	fp,0(sp)
   8cc70:	dec00204 	addi	sp,sp,8
   8cc74:	f800283a 	ret

0008cc78 <perf_get_num_starts>:

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
   8cc78:	defffd04 	addi	sp,sp,-12
   8cc7c:	df000215 	stw	fp,8(sp)
   8cc80:	df000204 	addi	fp,sp,8
   8cc84:	e13ffe15 	stw	r4,-8(fp)
   8cc88:	e17fff15 	stw	r5,-4(fp)
  return IORD(hw_base_address, ((which_section*4)+2));
   8cc8c:	e0bfff17 	ldw	r2,-4(fp)
   8cc90:	1004913a 	slli	r2,r2,4
   8cc94:	1007883a 	mov	r3,r2
   8cc98:	e0bffe17 	ldw	r2,-8(fp)
   8cc9c:	1885883a 	add	r2,r3,r2
   8cca0:	10800204 	addi	r2,r2,8
   8cca4:	10800037 	ldwio	r2,0(r2)
}
   8cca8:	e037883a 	mov	sp,fp
   8ccac:	df000017 	ldw	fp,0(sp)
   8ccb0:	dec00104 	addi	sp,sp,4
   8ccb4:	f800283a 	ret

0008ccb8 <alt_get_performance_counter_base>:
 * in Nios II IDE just like is done for the system clock timer and
 * timestamp timer.
 */
void* 
alt_get_performance_counter_base()
{
   8ccb8:	deffff04 	addi	sp,sp,-4
   8ccbc:	df000015 	stw	fp,0(sp)
   8ccc0:	d839883a 	mov	fp,sp
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
#else
    return (void*)0;
   8ccc4:	0005883a 	mov	r2,zero
#endif
}
   8ccc8:	e037883a 	mov	sp,fp
   8cccc:	df000017 	ldw	fp,0(sp)
   8ccd0:	dec00104 	addi	sp,sp,4
   8ccd4:	f800283a 	ret

0008ccd8 <alt_get_cpu_freq>:
 * If the performance counter peripheral is in a different time domain,
 * this won't necessarily be the same frequency of the CPU.
 */
alt_u32 
alt_get_cpu_freq()
{
   8ccd8:	deffff04 	addi	sp,sp,-4
   8ccdc:	df000015 	stw	fp,0(sp)
   8cce0:	d839883a 	mov	fp,sp
    return ALT_CPU_FREQ;
   8cce4:	0080bef4 	movhi	r2,763
   8cce8:	10bc2004 	addi	r2,r2,-3968
}
   8ccec:	e037883a 	mov	sp,fp
   8ccf0:	df000017 	ldw	fp,0(sp)
   8ccf4:	dec00104 	addi	sp,sp,4
   8ccf8:	f800283a 	ret

0008ccfc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   8ccfc:	defffa04 	addi	sp,sp,-24
   8cd00:	dfc00515 	stw	ra,20(sp)
   8cd04:	df000415 	stw	fp,16(sp)
   8cd08:	df000404 	addi	fp,sp,16
   8cd0c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   8cd10:	e0bfff17 	ldw	r2,-4(fp)
   8cd14:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   8cd18:	e0bfff17 	ldw	r2,-4(fp)
   8cd1c:	10800104 	addi	r2,r2,4
   8cd20:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8cd24:	0005303a 	rdctl	r2,status
   8cd28:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8cd2c:	e0fffd17 	ldw	r3,-12(fp)
   8cd30:	00bfff84 	movi	r2,-2
   8cd34:	1884703a 	and	r2,r3,r2
   8cd38:	1001703a 	wrctl	status,r2
  
  return context;
   8cd3c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   8cd40:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   8cd44:	008d9900 	call	8d990 <alt_tick>
   8cd48:	e0bffe17 	ldw	r2,-8(fp)
   8cd4c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8cd50:	e0bffc17 	ldw	r2,-16(fp)
   8cd54:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   8cd58:	e037883a 	mov	sp,fp
   8cd5c:	dfc00117 	ldw	ra,4(sp)
   8cd60:	df000017 	ldw	fp,0(sp)
   8cd64:	dec00204 	addi	sp,sp,8
   8cd68:	f800283a 	ret

0008cd6c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   8cd6c:	defff804 	addi	sp,sp,-32
   8cd70:	dfc00715 	stw	ra,28(sp)
   8cd74:	df000615 	stw	fp,24(sp)
   8cd78:	df000604 	addi	fp,sp,24
   8cd7c:	e13ffc15 	stw	r4,-16(fp)
   8cd80:	e17ffd15 	stw	r5,-12(fp)
   8cd84:	e1bffe15 	stw	r6,-8(fp)
   8cd88:	e1ffff15 	stw	r7,-4(fp)
   8cd8c:	e0bfff17 	ldw	r2,-4(fp)
   8cd90:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   8cd94:	00800274 	movhi	r2,9
   8cd98:	10871804 	addi	r2,r2,7264
   8cd9c:	10800017 	ldw	r2,0(r2)
   8cda0:	1004c03a 	cmpne	r2,r2,zero
   8cda4:	1000041e 	bne	r2,zero,8cdb8 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   8cda8:	00c00274 	movhi	r3,9
   8cdac:	18c71804 	addi	r3,r3,7264
   8cdb0:	e0bffb17 	ldw	r2,-20(fp)
   8cdb4:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   8cdb8:	e0bffc17 	ldw	r2,-16(fp)
   8cdbc:	10800104 	addi	r2,r2,4
   8cdc0:	1007883a 	mov	r3,r2
   8cdc4:	008001c4 	movi	r2,7
   8cdc8:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   8cdcc:	d8000015 	stw	zero,0(sp)
   8cdd0:	e13ffd17 	ldw	r4,-12(fp)
   8cdd4:	e17ffe17 	ldw	r5,-8(fp)
   8cdd8:	01800274 	movhi	r6,9
   8cddc:	31b33f04 	addi	r6,r6,-13060
   8cde0:	e1fffc17 	ldw	r7,-16(fp)
   8cde4:	008d1f80 	call	8d1f8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   8cde8:	e037883a 	mov	sp,fp
   8cdec:	dfc00117 	ldw	ra,4(sp)
   8cdf0:	df000017 	ldw	fp,0(sp)
   8cdf4:	dec00204 	addi	sp,sp,8
   8cdf8:	f800283a 	ret

0008cdfc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   8cdfc:	defff404 	addi	sp,sp,-48
   8ce00:	df000b15 	stw	fp,44(sp)
   8ce04:	df000b04 	addi	fp,sp,44
   8ce08:	e13ffb15 	stw	r4,-20(fp)
   8ce0c:	e17ffc15 	stw	r5,-16(fp)
   8ce10:	e1bffd15 	stw	r6,-12(fp)
   8ce14:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   8ce18:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8ce1c:	00800274 	movhi	r2,9
   8ce20:	10871804 	addi	r2,r2,7264
   8ce24:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   8ce28:	1005003a 	cmpeq	r2,r2,zero
   8ce2c:	1000411e 	bne	r2,zero,8cf34 <alt_alarm_start+0x138>
  {
    if (alarm)
   8ce30:	e0bffb17 	ldw	r2,-20(fp)
   8ce34:	1005003a 	cmpeq	r2,r2,zero
   8ce38:	10003b1e 	bne	r2,zero,8cf28 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   8ce3c:	e0fffb17 	ldw	r3,-20(fp)
   8ce40:	e0bffd17 	ldw	r2,-12(fp)
   8ce44:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   8ce48:	e0fffb17 	ldw	r3,-20(fp)
   8ce4c:	e0bffe17 	ldw	r2,-8(fp)
   8ce50:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ce54:	0005303a 	rdctl	r2,status
   8ce58:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ce5c:	e0fff817 	ldw	r3,-32(fp)
   8ce60:	00bfff84 	movi	r2,-2
   8ce64:	1884703a 	and	r2,r3,r2
   8ce68:	1001703a 	wrctl	status,r2
  
  return context;
   8ce6c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   8ce70:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   8ce74:	00800274 	movhi	r2,9
   8ce78:	10871904 	addi	r2,r2,7268
   8ce7c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   8ce80:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   8ce84:	e0fffc17 	ldw	r3,-16(fp)
   8ce88:	e0bff917 	ldw	r2,-28(fp)
   8ce8c:	1885883a 	add	r2,r3,r2
   8ce90:	10c00044 	addi	r3,r2,1
   8ce94:	e0bffb17 	ldw	r2,-20(fp)
   8ce98:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   8ce9c:	e0bffb17 	ldw	r2,-20(fp)
   8cea0:	10c00217 	ldw	r3,8(r2)
   8cea4:	e0bff917 	ldw	r2,-28(fp)
   8cea8:	1880042e 	bgeu	r3,r2,8cebc <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   8ceac:	e0fffb17 	ldw	r3,-20(fp)
   8ceb0:	00800044 	movi	r2,1
   8ceb4:	18800405 	stb	r2,16(r3)
   8ceb8:	00000206 	br	8cec4 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   8cebc:	e0bffb17 	ldw	r2,-20(fp)
   8cec0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   8cec4:	e0fffb17 	ldw	r3,-20(fp)
   8cec8:	00800274 	movhi	r2,9
   8cecc:	10806d04 	addi	r2,r2,436
   8ced0:	e0bff615 	stw	r2,-40(fp)
   8ced4:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8ced8:	e0fff717 	ldw	r3,-36(fp)
   8cedc:	e0bff617 	ldw	r2,-40(fp)
   8cee0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   8cee4:	e0bff617 	ldw	r2,-40(fp)
   8cee8:	10c00017 	ldw	r3,0(r2)
   8ceec:	e0bff717 	ldw	r2,-36(fp)
   8cef0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8cef4:	e0bff617 	ldw	r2,-40(fp)
   8cef8:	10c00017 	ldw	r3,0(r2)
   8cefc:	e0bff717 	ldw	r2,-36(fp)
   8cf00:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   8cf04:	e0fff617 	ldw	r3,-40(fp)
   8cf08:	e0bff717 	ldw	r2,-36(fp)
   8cf0c:	18800015 	stw	r2,0(r3)
   8cf10:	e0bffa17 	ldw	r2,-24(fp)
   8cf14:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8cf18:	e0bff517 	ldw	r2,-44(fp)
   8cf1c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   8cf20:	e03fff15 	stw	zero,-4(fp)
   8cf24:	00000506 	br	8cf3c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   8cf28:	00bffa84 	movi	r2,-22
   8cf2c:	e0bfff15 	stw	r2,-4(fp)
   8cf30:	00000206 	br	8cf3c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   8cf34:	00bfde84 	movi	r2,-134
   8cf38:	e0bfff15 	stw	r2,-4(fp)
   8cf3c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   8cf40:	e037883a 	mov	sp,fp
   8cf44:	df000017 	ldw	fp,0(sp)
   8cf48:	dec00104 	addi	sp,sp,4
   8cf4c:	f800283a 	ret

0008cf50 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   8cf50:	deffff04 	addi	sp,sp,-4
   8cf54:	df000015 	stw	fp,0(sp)
   8cf58:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   8cf5c:	e037883a 	mov	sp,fp
   8cf60:	df000017 	ldw	fp,0(sp)
   8cf64:	dec00104 	addi	sp,sp,4
   8cf68:	f800283a 	ret

0008cf6c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   8cf6c:	defff904 	addi	sp,sp,-28
   8cf70:	dfc00615 	stw	ra,24(sp)
   8cf74:	df000515 	stw	fp,20(sp)
   8cf78:	df000504 	addi	fp,sp,20
   8cf7c:	e13ffd15 	stw	r4,-12(fp)
   8cf80:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   8cf84:	e0bffd17 	ldw	r2,-12(fp)
   8cf88:	1005003a 	cmpeq	r2,r2,zero
   8cf8c:	1000041e 	bne	r2,zero,8cfa0 <alt_dev_llist_insert+0x34>
   8cf90:	e0bffd17 	ldw	r2,-12(fp)
   8cf94:	10800217 	ldw	r2,8(r2)
   8cf98:	1004c03a 	cmpne	r2,r2,zero
   8cf9c:	1000071e 	bne	r2,zero,8cfbc <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   8cfa0:	008d0200 	call	8d020 <alt_get_errno>
   8cfa4:	1007883a 	mov	r3,r2
   8cfa8:	00800584 	movi	r2,22
   8cfac:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   8cfb0:	00bffa84 	movi	r2,-22
   8cfb4:	e0bfff15 	stw	r2,-4(fp)
   8cfb8:	00001306 	br	8d008 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   8cfbc:	e0fffd17 	ldw	r3,-12(fp)
   8cfc0:	e0bffe17 	ldw	r2,-8(fp)
   8cfc4:	e0bffb15 	stw	r2,-20(fp)
   8cfc8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8cfcc:	e0fffc17 	ldw	r3,-16(fp)
   8cfd0:	e0bffb17 	ldw	r2,-20(fp)
   8cfd4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   8cfd8:	e0bffb17 	ldw	r2,-20(fp)
   8cfdc:	10c00017 	ldw	r3,0(r2)
   8cfe0:	e0bffc17 	ldw	r2,-16(fp)
   8cfe4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8cfe8:	e0bffb17 	ldw	r2,-20(fp)
   8cfec:	10c00017 	ldw	r3,0(r2)
   8cff0:	e0bffc17 	ldw	r2,-16(fp)
   8cff4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   8cff8:	e0fffb17 	ldw	r3,-20(fp)
   8cffc:	e0bffc17 	ldw	r2,-16(fp)
   8d000:	18800015 	stw	r2,0(r3)

  return 0;  
   8d004:	e03fff15 	stw	zero,-4(fp)
   8d008:	e0bfff17 	ldw	r2,-4(fp)
}
   8d00c:	e037883a 	mov	sp,fp
   8d010:	dfc00117 	ldw	ra,4(sp)
   8d014:	df000017 	ldw	fp,0(sp)
   8d018:	dec00204 	addi	sp,sp,8
   8d01c:	f800283a 	ret

0008d020 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8d020:	defffd04 	addi	sp,sp,-12
   8d024:	dfc00215 	stw	ra,8(sp)
   8d028:	df000115 	stw	fp,4(sp)
   8d02c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8d030:	00800274 	movhi	r2,9
   8d034:	10806804 	addi	r2,r2,416
   8d038:	10800017 	ldw	r2,0(r2)
   8d03c:	1005003a 	cmpeq	r2,r2,zero
   8d040:	1000061e 	bne	r2,zero,8d05c <alt_get_errno+0x3c>
   8d044:	00800274 	movhi	r2,9
   8d048:	10806804 	addi	r2,r2,416
   8d04c:	10800017 	ldw	r2,0(r2)
   8d050:	103ee83a 	callr	r2
   8d054:	e0bfff15 	stw	r2,-4(fp)
   8d058:	00000306 	br	8d068 <alt_get_errno+0x48>
   8d05c:	00800274 	movhi	r2,9
   8d060:	10871004 	addi	r2,r2,7232
   8d064:	e0bfff15 	stw	r2,-4(fp)
   8d068:	e0bfff17 	ldw	r2,-4(fp)
}
   8d06c:	e037883a 	mov	sp,fp
   8d070:	dfc00117 	ldw	ra,4(sp)
   8d074:	df000017 	ldw	fp,0(sp)
   8d078:	dec00204 	addi	sp,sp,8
   8d07c:	f800283a 	ret

0008d080 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   8d080:	defffd04 	addi	sp,sp,-12
   8d084:	dfc00215 	stw	ra,8(sp)
   8d088:	df000115 	stw	fp,4(sp)
   8d08c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8d090:	00bfff04 	movi	r2,-4
   8d094:	00c00274 	movhi	r3,9
   8d098:	18f84904 	addi	r3,r3,-7900
   8d09c:	1885883a 	add	r2,r3,r2
   8d0a0:	e0bfff15 	stw	r2,-4(fp)
   8d0a4:	00000606 	br	8d0c0 <_do_ctors+0x40>
        (*ctor) (); 
   8d0a8:	e0bfff17 	ldw	r2,-4(fp)
   8d0ac:	10800017 	ldw	r2,0(r2)
   8d0b0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8d0b4:	e0bfff17 	ldw	r2,-4(fp)
   8d0b8:	10bfff04 	addi	r2,r2,-4
   8d0bc:	e0bfff15 	stw	r2,-4(fp)
   8d0c0:	e0ffff17 	ldw	r3,-4(fp)
   8d0c4:	00800274 	movhi	r2,9
   8d0c8:	10b84804 	addi	r2,r2,-7904
   8d0cc:	18bff62e 	bgeu	r3,r2,8d0a8 <_do_ctors+0x28>
        (*ctor) (); 
}
   8d0d0:	e037883a 	mov	sp,fp
   8d0d4:	dfc00117 	ldw	ra,4(sp)
   8d0d8:	df000017 	ldw	fp,0(sp)
   8d0dc:	dec00204 	addi	sp,sp,8
   8d0e0:	f800283a 	ret

0008d0e4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   8d0e4:	defffd04 	addi	sp,sp,-12
   8d0e8:	dfc00215 	stw	ra,8(sp)
   8d0ec:	df000115 	stw	fp,4(sp)
   8d0f0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8d0f4:	00bfff04 	movi	r2,-4
   8d0f8:	00c00274 	movhi	r3,9
   8d0fc:	18f84904 	addi	r3,r3,-7900
   8d100:	1885883a 	add	r2,r3,r2
   8d104:	e0bfff15 	stw	r2,-4(fp)
   8d108:	00000606 	br	8d124 <_do_dtors+0x40>
        (*dtor) (); 
   8d10c:	e0bfff17 	ldw	r2,-4(fp)
   8d110:	10800017 	ldw	r2,0(r2)
   8d114:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8d118:	e0bfff17 	ldw	r2,-4(fp)
   8d11c:	10bfff04 	addi	r2,r2,-4
   8d120:	e0bfff15 	stw	r2,-4(fp)
   8d124:	e0ffff17 	ldw	r3,-4(fp)
   8d128:	00800274 	movhi	r2,9
   8d12c:	10b84904 	addi	r2,r2,-7900
   8d130:	18bff62e 	bgeu	r3,r2,8d10c <_do_dtors+0x28>
        (*dtor) (); 
}
   8d134:	e037883a 	mov	sp,fp
   8d138:	dfc00117 	ldw	ra,4(sp)
   8d13c:	df000017 	ldw	fp,0(sp)
   8d140:	dec00204 	addi	sp,sp,8
   8d144:	f800283a 	ret

0008d148 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   8d148:	defff904 	addi	sp,sp,-28
   8d14c:	dfc00615 	stw	ra,24(sp)
   8d150:	df000515 	stw	fp,20(sp)
   8d154:	df000504 	addi	fp,sp,20
   8d158:	e13ffd15 	stw	r4,-12(fp)
   8d15c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   8d160:	e0bffe17 	ldw	r2,-8(fp)
   8d164:	10800017 	ldw	r2,0(r2)
   8d168:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   8d16c:	e13ffd17 	ldw	r4,-12(fp)
   8d170:	0082ea40 	call	82ea4 <strlen>
   8d174:	10800044 	addi	r2,r2,1
   8d178:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8d17c:	00000d06 	br	8d1b4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   8d180:	e0bffc17 	ldw	r2,-16(fp)
   8d184:	11000217 	ldw	r4,8(r2)
   8d188:	e1bffb17 	ldw	r6,-20(fp)
   8d18c:	e17ffd17 	ldw	r5,-12(fp)
   8d190:	008dcf80 	call	8dcf8 <memcmp>
   8d194:	1004c03a 	cmpne	r2,r2,zero
   8d198:	1000031e 	bne	r2,zero,8d1a8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   8d19c:	e0bffc17 	ldw	r2,-16(fp)
   8d1a0:	e0bfff15 	stw	r2,-4(fp)
   8d1a4:	00000706 	br	8d1c4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   8d1a8:	e0bffc17 	ldw	r2,-16(fp)
   8d1ac:	10800017 	ldw	r2,0(r2)
   8d1b0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8d1b4:	e0fffe17 	ldw	r3,-8(fp)
   8d1b8:	e0bffc17 	ldw	r2,-16(fp)
   8d1bc:	10fff01e 	bne	r2,r3,8d180 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   8d1c0:	e03fff15 	stw	zero,-4(fp)
   8d1c4:	e0bfff17 	ldw	r2,-4(fp)
}
   8d1c8:	e037883a 	mov	sp,fp
   8d1cc:	dfc00117 	ldw	ra,4(sp)
   8d1d0:	df000017 	ldw	fp,0(sp)
   8d1d4:	dec00204 	addi	sp,sp,8
   8d1d8:	f800283a 	ret

0008d1dc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   8d1dc:	deffff04 	addi	sp,sp,-4
   8d1e0:	df000015 	stw	fp,0(sp)
   8d1e4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   8d1e8:	e037883a 	mov	sp,fp
   8d1ec:	df000017 	ldw	fp,0(sp)
   8d1f0:	dec00104 	addi	sp,sp,4
   8d1f4:	f800283a 	ret

0008d1f8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8d1f8:	defff904 	addi	sp,sp,-28
   8d1fc:	dfc00615 	stw	ra,24(sp)
   8d200:	df000515 	stw	fp,20(sp)
   8d204:	df000504 	addi	fp,sp,20
   8d208:	e13ffc15 	stw	r4,-16(fp)
   8d20c:	e17ffd15 	stw	r5,-12(fp)
   8d210:	e1bffe15 	stw	r6,-8(fp)
   8d214:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   8d218:	e0800217 	ldw	r2,8(fp)
   8d21c:	d8800015 	stw	r2,0(sp)
   8d220:	e13ffc17 	ldw	r4,-16(fp)
   8d224:	e17ffd17 	ldw	r5,-12(fp)
   8d228:	e1bffe17 	ldw	r6,-8(fp)
   8d22c:	e1ffff17 	ldw	r7,-4(fp)
   8d230:	008d3cc0 	call	8d3cc <alt_iic_isr_register>
}  
   8d234:	e037883a 	mov	sp,fp
   8d238:	dfc00117 	ldw	ra,4(sp)
   8d23c:	df000017 	ldw	fp,0(sp)
   8d240:	dec00204 	addi	sp,sp,8
   8d244:	f800283a 	ret

0008d248 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   8d248:	defff904 	addi	sp,sp,-28
   8d24c:	df000615 	stw	fp,24(sp)
   8d250:	df000604 	addi	fp,sp,24
   8d254:	e13ffe15 	stw	r4,-8(fp)
   8d258:	e17fff15 	stw	r5,-4(fp)
   8d25c:	e0bfff17 	ldw	r2,-4(fp)
   8d260:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d264:	0005303a 	rdctl	r2,status
   8d268:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d26c:	e0fffb17 	ldw	r3,-20(fp)
   8d270:	00bfff84 	movi	r2,-2
   8d274:	1884703a 	and	r2,r3,r2
   8d278:	1001703a 	wrctl	status,r2
  
  return context;
   8d27c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8d280:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   8d284:	e0fffc17 	ldw	r3,-16(fp)
   8d288:	00800044 	movi	r2,1
   8d28c:	10c4983a 	sll	r2,r2,r3
   8d290:	1007883a 	mov	r3,r2
   8d294:	00800274 	movhi	r2,9
   8d298:	10871404 	addi	r2,r2,7248
   8d29c:	10800017 	ldw	r2,0(r2)
   8d2a0:	1886b03a 	or	r3,r3,r2
   8d2a4:	00800274 	movhi	r2,9
   8d2a8:	10871404 	addi	r2,r2,7248
   8d2ac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8d2b0:	00800274 	movhi	r2,9
   8d2b4:	10871404 	addi	r2,r2,7248
   8d2b8:	10800017 	ldw	r2,0(r2)
   8d2bc:	100170fa 	wrctl	ienable,r2
   8d2c0:	e0bffd17 	ldw	r2,-12(fp)
   8d2c4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d2c8:	e0bffa17 	ldw	r2,-24(fp)
   8d2cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8d2d0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   8d2d4:	e037883a 	mov	sp,fp
   8d2d8:	df000017 	ldw	fp,0(sp)
   8d2dc:	dec00104 	addi	sp,sp,4
   8d2e0:	f800283a 	ret

0008d2e4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   8d2e4:	defff904 	addi	sp,sp,-28
   8d2e8:	df000615 	stw	fp,24(sp)
   8d2ec:	df000604 	addi	fp,sp,24
   8d2f0:	e13ffe15 	stw	r4,-8(fp)
   8d2f4:	e17fff15 	stw	r5,-4(fp)
   8d2f8:	e0bfff17 	ldw	r2,-4(fp)
   8d2fc:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d300:	0005303a 	rdctl	r2,status
   8d304:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d308:	e0fffb17 	ldw	r3,-20(fp)
   8d30c:	00bfff84 	movi	r2,-2
   8d310:	1884703a 	and	r2,r3,r2
   8d314:	1001703a 	wrctl	status,r2
  
  return context;
   8d318:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8d31c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   8d320:	e0fffc17 	ldw	r3,-16(fp)
   8d324:	00800044 	movi	r2,1
   8d328:	10c4983a 	sll	r2,r2,r3
   8d32c:	0084303a 	nor	r2,zero,r2
   8d330:	1007883a 	mov	r3,r2
   8d334:	00800274 	movhi	r2,9
   8d338:	10871404 	addi	r2,r2,7248
   8d33c:	10800017 	ldw	r2,0(r2)
   8d340:	1886703a 	and	r3,r3,r2
   8d344:	00800274 	movhi	r2,9
   8d348:	10871404 	addi	r2,r2,7248
   8d34c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8d350:	00800274 	movhi	r2,9
   8d354:	10871404 	addi	r2,r2,7248
   8d358:	10800017 	ldw	r2,0(r2)
   8d35c:	100170fa 	wrctl	ienable,r2
   8d360:	e0bffd17 	ldw	r2,-12(fp)
   8d364:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d368:	e0bffa17 	ldw	r2,-24(fp)
   8d36c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8d370:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   8d374:	e037883a 	mov	sp,fp
   8d378:	df000017 	ldw	fp,0(sp)
   8d37c:	dec00104 	addi	sp,sp,4
   8d380:	f800283a 	ret

0008d384 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   8d384:	defffc04 	addi	sp,sp,-16
   8d388:	df000315 	stw	fp,12(sp)
   8d38c:	df000304 	addi	fp,sp,12
   8d390:	e13ffe15 	stw	r4,-8(fp)
   8d394:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   8d398:	000530fa 	rdctl	r2,ienable
   8d39c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   8d3a0:	e0ffff17 	ldw	r3,-4(fp)
   8d3a4:	00800044 	movi	r2,1
   8d3a8:	10c4983a 	sll	r2,r2,r3
   8d3ac:	1007883a 	mov	r3,r2
   8d3b0:	e0bffd17 	ldw	r2,-12(fp)
   8d3b4:	1884703a 	and	r2,r3,r2
   8d3b8:	1004c03a 	cmpne	r2,r2,zero
}
   8d3bc:	e037883a 	mov	sp,fp
   8d3c0:	df000017 	ldw	fp,0(sp)
   8d3c4:	dec00104 	addi	sp,sp,4
   8d3c8:	f800283a 	ret

0008d3cc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8d3cc:	defff404 	addi	sp,sp,-48
   8d3d0:	dfc00b15 	stw	ra,44(sp)
   8d3d4:	df000a15 	stw	fp,40(sp)
   8d3d8:	df000a04 	addi	fp,sp,40
   8d3dc:	e13ffb15 	stw	r4,-20(fp)
   8d3e0:	e17ffc15 	stw	r5,-16(fp)
   8d3e4:	e1bffd15 	stw	r6,-12(fp)
   8d3e8:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   8d3ec:	00bffa84 	movi	r2,-22
   8d3f0:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   8d3f4:	e0bffc17 	ldw	r2,-16(fp)
   8d3f8:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8d3fc:	e0bff917 	ldw	r2,-28(fp)
   8d400:	10800808 	cmpgei	r2,r2,32
   8d404:	1000291e 	bne	r2,zero,8d4ac <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d408:	0005303a 	rdctl	r2,status
   8d40c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d410:	e0fff717 	ldw	r3,-36(fp)
   8d414:	00bfff84 	movi	r2,-2
   8d418:	1884703a 	and	r2,r3,r2
   8d41c:	1001703a 	wrctl	status,r2
  
  return context;
   8d420:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   8d424:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   8d428:	e0bff917 	ldw	r2,-28(fp)
   8d42c:	00c00274 	movhi	r3,9
   8d430:	18c72404 	addi	r3,r3,7312
   8d434:	100490fa 	slli	r2,r2,3
   8d438:	10c7883a 	add	r3,r2,r3
   8d43c:	e0bffd17 	ldw	r2,-12(fp)
   8d440:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   8d444:	e0bff917 	ldw	r2,-28(fp)
   8d448:	00c00274 	movhi	r3,9
   8d44c:	18c72404 	addi	r3,r3,7312
   8d450:	100490fa 	slli	r2,r2,3
   8d454:	10c5883a 	add	r2,r2,r3
   8d458:	10c00104 	addi	r3,r2,4
   8d45c:	e0bffe17 	ldw	r2,-8(fp)
   8d460:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8d464:	e0bffd17 	ldw	r2,-12(fp)
   8d468:	1005003a 	cmpeq	r2,r2,zero
   8d46c:	1000051e 	bne	r2,zero,8d484 <alt_iic_isr_register+0xb8>
   8d470:	e17ff917 	ldw	r5,-28(fp)
   8d474:	e13ffb17 	ldw	r4,-20(fp)
   8d478:	008d2480 	call	8d248 <alt_ic_irq_enable>
   8d47c:	e0bfff15 	stw	r2,-4(fp)
   8d480:	00000406 	br	8d494 <alt_iic_isr_register+0xc8>
   8d484:	e17ff917 	ldw	r5,-28(fp)
   8d488:	e13ffb17 	ldw	r4,-20(fp)
   8d48c:	008d2e40 	call	8d2e4 <alt_ic_irq_disable>
   8d490:	e0bfff15 	stw	r2,-4(fp)
   8d494:	e0bfff17 	ldw	r2,-4(fp)
   8d498:	e0bffa15 	stw	r2,-24(fp)
   8d49c:	e0bff817 	ldw	r2,-32(fp)
   8d4a0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d4a4:	e0bff617 	ldw	r2,-40(fp)
   8d4a8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   8d4ac:	e0bffa17 	ldw	r2,-24(fp)
}
   8d4b0:	e037883a 	mov	sp,fp
   8d4b4:	dfc00117 	ldw	ra,4(sp)
   8d4b8:	df000017 	ldw	fp,0(sp)
   8d4bc:	dec00204 	addi	sp,sp,8
   8d4c0:	f800283a 	ret

0008d4c4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   8d4c4:	defff804 	addi	sp,sp,-32
   8d4c8:	dfc00715 	stw	ra,28(sp)
   8d4cc:	df000615 	stw	fp,24(sp)
   8d4d0:	dc000515 	stw	r16,20(sp)
   8d4d4:	df000504 	addi	fp,sp,20
   8d4d8:	e13ffc15 	stw	r4,-16(fp)
   8d4dc:	e17ffd15 	stw	r5,-12(fp)
   8d4e0:	e1bffe15 	stw	r6,-8(fp)
   8d4e4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   8d4e8:	e13ffd17 	ldw	r4,-12(fp)
   8d4ec:	e17ffe17 	ldw	r5,-8(fp)
   8d4f0:	e1bfff17 	ldw	r6,-4(fp)
   8d4f4:	008d70c0 	call	8d70c <open>
   8d4f8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   8d4fc:	e0bffb17 	ldw	r2,-20(fp)
   8d500:	1004803a 	cmplt	r2,r2,zero
   8d504:	10001f1e 	bne	r2,zero,8d584 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   8d508:	e13ffb17 	ldw	r4,-20(fp)
   8d50c:	04000274 	movhi	r16,9
   8d510:	843be104 	addi	r16,r16,-4220
   8d514:	01400304 	movi	r5,12
   8d518:	00824b00 	call	824b0 <__mulsi3>
   8d51c:	1405883a 	add	r2,r2,r16
   8d520:	10c00017 	ldw	r3,0(r2)
   8d524:	e0bffc17 	ldw	r2,-16(fp)
   8d528:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   8d52c:	e13ffb17 	ldw	r4,-20(fp)
   8d530:	04000274 	movhi	r16,9
   8d534:	843be104 	addi	r16,r16,-4220
   8d538:	01400304 	movi	r5,12
   8d53c:	00824b00 	call	824b0 <__mulsi3>
   8d540:	1405883a 	add	r2,r2,r16
   8d544:	10800104 	addi	r2,r2,4
   8d548:	10c00017 	ldw	r3,0(r2)
   8d54c:	e0bffc17 	ldw	r2,-16(fp)
   8d550:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   8d554:	e13ffb17 	ldw	r4,-20(fp)
   8d558:	04000274 	movhi	r16,9
   8d55c:	843be104 	addi	r16,r16,-4220
   8d560:	01400304 	movi	r5,12
   8d564:	00824b00 	call	824b0 <__mulsi3>
   8d568:	1405883a 	add	r2,r2,r16
   8d56c:	10800204 	addi	r2,r2,8
   8d570:	10c00017 	ldw	r3,0(r2)
   8d574:	e0bffc17 	ldw	r2,-16(fp)
   8d578:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   8d57c:	e13ffb17 	ldw	r4,-20(fp)
   8d580:	008b95c0 	call	8b95c <alt_release_fd>
  }
} 
   8d584:	e037883a 	mov	sp,fp
   8d588:	dfc00217 	ldw	ra,8(sp)
   8d58c:	df000117 	ldw	fp,4(sp)
   8d590:	dc000017 	ldw	r16,0(sp)
   8d594:	dec00304 	addi	sp,sp,12
   8d598:	f800283a 	ret

0008d59c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   8d59c:	defffb04 	addi	sp,sp,-20
   8d5a0:	dfc00415 	stw	ra,16(sp)
   8d5a4:	df000315 	stw	fp,12(sp)
   8d5a8:	df000304 	addi	fp,sp,12
   8d5ac:	e13ffd15 	stw	r4,-12(fp)
   8d5b0:	e17ffe15 	stw	r5,-8(fp)
   8d5b4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   8d5b8:	01000274 	movhi	r4,9
   8d5bc:	213be404 	addi	r4,r4,-4208
   8d5c0:	e17ffd17 	ldw	r5,-12(fp)
   8d5c4:	01800044 	movi	r6,1
   8d5c8:	01c07fc4 	movi	r7,511
   8d5cc:	008d4c40 	call	8d4c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   8d5d0:	01000274 	movhi	r4,9
   8d5d4:	213be104 	addi	r4,r4,-4220
   8d5d8:	e17ffe17 	ldw	r5,-8(fp)
   8d5dc:	000d883a 	mov	r6,zero
   8d5e0:	01c07fc4 	movi	r7,511
   8d5e4:	008d4c40 	call	8d4c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   8d5e8:	01000274 	movhi	r4,9
   8d5ec:	213be704 	addi	r4,r4,-4196
   8d5f0:	e17fff17 	ldw	r5,-4(fp)
   8d5f4:	01800044 	movi	r6,1
   8d5f8:	01c07fc4 	movi	r7,511
   8d5fc:	008d4c40 	call	8d4c4 <alt_open_fd>
}  
   8d600:	e037883a 	mov	sp,fp
   8d604:	dfc00117 	ldw	ra,4(sp)
   8d608:	df000017 	ldw	fp,0(sp)
   8d60c:	dec00204 	addi	sp,sp,8
   8d610:	f800283a 	ret

0008d614 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   8d614:	defffa04 	addi	sp,sp,-24
   8d618:	dfc00515 	stw	ra,20(sp)
   8d61c:	df000415 	stw	fp,16(sp)
   8d620:	dc000315 	stw	r16,12(sp)
   8d624:	df000304 	addi	fp,sp,12
   8d628:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   8d62c:	e0bffe17 	ldw	r2,-8(fp)
   8d630:	10800217 	ldw	r2,8(r2)
   8d634:	10d00034 	orhi	r3,r2,16384
   8d638:	e0bffe17 	ldw	r2,-8(fp)
   8d63c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8d640:	e03ffd15 	stw	zero,-12(fp)
   8d644:	00002306 	br	8d6d4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   8d648:	e13ffd17 	ldw	r4,-12(fp)
   8d64c:	04000274 	movhi	r16,9
   8d650:	843be104 	addi	r16,r16,-4220
   8d654:	01400304 	movi	r5,12
   8d658:	00824b00 	call	824b0 <__mulsi3>
   8d65c:	1405883a 	add	r2,r2,r16
   8d660:	10c00017 	ldw	r3,0(r2)
   8d664:	e0bffe17 	ldw	r2,-8(fp)
   8d668:	10800017 	ldw	r2,0(r2)
   8d66c:	1880161e 	bne	r3,r2,8d6c8 <alt_file_locked+0xb4>
   8d670:	e13ffd17 	ldw	r4,-12(fp)
   8d674:	04000274 	movhi	r16,9
   8d678:	843be104 	addi	r16,r16,-4220
   8d67c:	01400304 	movi	r5,12
   8d680:	00824b00 	call	824b0 <__mulsi3>
   8d684:	1405883a 	add	r2,r2,r16
   8d688:	10800204 	addi	r2,r2,8
   8d68c:	10800017 	ldw	r2,0(r2)
   8d690:	1004403a 	cmpge	r2,r2,zero
   8d694:	10000c1e 	bne	r2,zero,8d6c8 <alt_file_locked+0xb4>
   8d698:	e13ffd17 	ldw	r4,-12(fp)
   8d69c:	01400304 	movi	r5,12
   8d6a0:	00824b00 	call	824b0 <__mulsi3>
   8d6a4:	1007883a 	mov	r3,r2
   8d6a8:	00800274 	movhi	r2,9
   8d6ac:	10bbe104 	addi	r2,r2,-4220
   8d6b0:	1887883a 	add	r3,r3,r2
   8d6b4:	e0bffe17 	ldw	r2,-8(fp)
   8d6b8:	18800326 	beq	r3,r2,8d6c8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   8d6bc:	00bffcc4 	movi	r2,-13
   8d6c0:	e0bfff15 	stw	r2,-4(fp)
   8d6c4:	00000a06 	br	8d6f0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8d6c8:	e0bffd17 	ldw	r2,-12(fp)
   8d6cc:	10800044 	addi	r2,r2,1
   8d6d0:	e0bffd15 	stw	r2,-12(fp)
   8d6d4:	00800274 	movhi	r2,9
   8d6d8:	10806704 	addi	r2,r2,412
   8d6dc:	10800017 	ldw	r2,0(r2)
   8d6e0:	1007883a 	mov	r3,r2
   8d6e4:	e0bffd17 	ldw	r2,-12(fp)
   8d6e8:	18bfd72e 	bgeu	r3,r2,8d648 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   8d6ec:	e03fff15 	stw	zero,-4(fp)
   8d6f0:	e0bfff17 	ldw	r2,-4(fp)
}
   8d6f4:	e037883a 	mov	sp,fp
   8d6f8:	dfc00217 	ldw	ra,8(sp)
   8d6fc:	df000117 	ldw	fp,4(sp)
   8d700:	dc000017 	ldw	r16,0(sp)
   8d704:	dec00304 	addi	sp,sp,12
   8d708:	f800283a 	ret

0008d70c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   8d70c:	defff404 	addi	sp,sp,-48
   8d710:	dfc00b15 	stw	ra,44(sp)
   8d714:	df000a15 	stw	fp,40(sp)
   8d718:	df000a04 	addi	fp,sp,40
   8d71c:	e13ffb15 	stw	r4,-20(fp)
   8d720:	e17ffc15 	stw	r5,-16(fp)
   8d724:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   8d728:	00bfffc4 	movi	r2,-1
   8d72c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   8d730:	00bffb44 	movi	r2,-19
   8d734:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   8d738:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   8d73c:	e13ffb17 	ldw	r4,-20(fp)
   8d740:	01400274 	movhi	r5,9
   8d744:	29406504 	addi	r5,r5,404
   8d748:	008d1480 	call	8d148 <alt_find_dev>
   8d74c:	e0bffa15 	stw	r2,-24(fp)
   8d750:	e0bffa17 	ldw	r2,-24(fp)
   8d754:	1004c03a 	cmpne	r2,r2,zero
   8d758:	1000051e 	bne	r2,zero,8d770 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   8d75c:	e13ffb17 	ldw	r4,-20(fp)
   8d760:	008dabc0 	call	8dabc <alt_find_file>
   8d764:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   8d768:	00800044 	movi	r2,1
   8d76c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   8d770:	e0bffa17 	ldw	r2,-24(fp)
   8d774:	1005003a 	cmpeq	r2,r2,zero
   8d778:	1000311e 	bne	r2,zero,8d840 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   8d77c:	e13ffa17 	ldw	r4,-24(fp)
   8d780:	008dbdc0 	call	8dbdc <alt_get_fd>
   8d784:	e0bff815 	stw	r2,-32(fp)
   8d788:	e0bff817 	ldw	r2,-32(fp)
   8d78c:	1004403a 	cmpge	r2,r2,zero
   8d790:	1000031e 	bne	r2,zero,8d7a0 <open+0x94>
    {
      status = index;
   8d794:	e0bff817 	ldw	r2,-32(fp)
   8d798:	e0bff715 	stw	r2,-36(fp)
   8d79c:	00002a06 	br	8d848 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   8d7a0:	e13ff817 	ldw	r4,-32(fp)
   8d7a4:	01400304 	movi	r5,12
   8d7a8:	00824b00 	call	824b0 <__mulsi3>
   8d7ac:	1007883a 	mov	r3,r2
   8d7b0:	00800274 	movhi	r2,9
   8d7b4:	10bbe104 	addi	r2,r2,-4220
   8d7b8:	1885883a 	add	r2,r3,r2
   8d7bc:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   8d7c0:	e0fffc17 	ldw	r3,-16(fp)
   8d7c4:	00900034 	movhi	r2,16384
   8d7c8:	10bfffc4 	addi	r2,r2,-1
   8d7cc:	1886703a 	and	r3,r3,r2
   8d7d0:	e0bff917 	ldw	r2,-28(fp)
   8d7d4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   8d7d8:	e0bff617 	ldw	r2,-40(fp)
   8d7dc:	1004c03a 	cmpne	r2,r2,zero
   8d7e0:	1000061e 	bne	r2,zero,8d7fc <open+0xf0>
   8d7e4:	e13ff917 	ldw	r4,-28(fp)
   8d7e8:	008d6140 	call	8d614 <alt_file_locked>
   8d7ec:	e0bff715 	stw	r2,-36(fp)
   8d7f0:	e0bff717 	ldw	r2,-36(fp)
   8d7f4:	1004803a 	cmplt	r2,r2,zero
   8d7f8:	1000131e 	bne	r2,zero,8d848 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   8d7fc:	e0bffa17 	ldw	r2,-24(fp)
   8d800:	10800317 	ldw	r2,12(r2)
   8d804:	1005003a 	cmpeq	r2,r2,zero
   8d808:	1000091e 	bne	r2,zero,8d830 <open+0x124>
   8d80c:	e0bffa17 	ldw	r2,-24(fp)
   8d810:	10800317 	ldw	r2,12(r2)
   8d814:	e13ff917 	ldw	r4,-28(fp)
   8d818:	e17ffb17 	ldw	r5,-20(fp)
   8d81c:	e1bffc17 	ldw	r6,-16(fp)
   8d820:	e1fffd17 	ldw	r7,-12(fp)
   8d824:	103ee83a 	callr	r2
   8d828:	e0bfff15 	stw	r2,-4(fp)
   8d82c:	00000106 	br	8d834 <open+0x128>
   8d830:	e03fff15 	stw	zero,-4(fp)
   8d834:	e0bfff17 	ldw	r2,-4(fp)
   8d838:	e0bff715 	stw	r2,-36(fp)
   8d83c:	00000206 	br	8d848 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   8d840:	00bffb44 	movi	r2,-19
   8d844:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   8d848:	e0bff717 	ldw	r2,-36(fp)
   8d84c:	1004403a 	cmpge	r2,r2,zero
   8d850:	1000091e 	bne	r2,zero,8d878 <open+0x16c>
  {
    alt_release_fd (index);  
   8d854:	e13ff817 	ldw	r4,-32(fp)
   8d858:	008b95c0 	call	8b95c <alt_release_fd>
    ALT_ERRNO = -status;
   8d85c:	008d8980 	call	8d898 <alt_get_errno>
   8d860:	e0fff717 	ldw	r3,-36(fp)
   8d864:	00c7c83a 	sub	r3,zero,r3
   8d868:	10c00015 	stw	r3,0(r2)
    return -1;
   8d86c:	00bfffc4 	movi	r2,-1
   8d870:	e0bffe15 	stw	r2,-8(fp)
   8d874:	00000206 	br	8d880 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   8d878:	e0bff817 	ldw	r2,-32(fp)
   8d87c:	e0bffe15 	stw	r2,-8(fp)
   8d880:	e0bffe17 	ldw	r2,-8(fp)
}
   8d884:	e037883a 	mov	sp,fp
   8d888:	dfc00117 	ldw	ra,4(sp)
   8d88c:	df000017 	ldw	fp,0(sp)
   8d890:	dec00204 	addi	sp,sp,8
   8d894:	f800283a 	ret

0008d898 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8d898:	defffd04 	addi	sp,sp,-12
   8d89c:	dfc00215 	stw	ra,8(sp)
   8d8a0:	df000115 	stw	fp,4(sp)
   8d8a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   8d8a8:	00800274 	movhi	r2,9
   8d8ac:	10806804 	addi	r2,r2,416
   8d8b0:	10800017 	ldw	r2,0(r2)
   8d8b4:	1005003a 	cmpeq	r2,r2,zero
   8d8b8:	1000061e 	bne	r2,zero,8d8d4 <alt_get_errno+0x3c>
   8d8bc:	00800274 	movhi	r2,9
   8d8c0:	10806804 	addi	r2,r2,416
   8d8c4:	10800017 	ldw	r2,0(r2)
   8d8c8:	103ee83a 	callr	r2
   8d8cc:	e0bfff15 	stw	r2,-4(fp)
   8d8d0:	00000306 	br	8d8e0 <alt_get_errno+0x48>
   8d8d4:	00800274 	movhi	r2,9
   8d8d8:	10871004 	addi	r2,r2,7232
   8d8dc:	e0bfff15 	stw	r2,-4(fp)
   8d8e0:	e0bfff17 	ldw	r2,-4(fp)
}
   8d8e4:	e037883a 	mov	sp,fp
   8d8e8:	dfc00117 	ldw	ra,4(sp)
   8d8ec:	df000017 	ldw	fp,0(sp)
   8d8f0:	dec00204 	addi	sp,sp,8
   8d8f4:	f800283a 	ret

0008d8f8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   8d8f8:	defffa04 	addi	sp,sp,-24
   8d8fc:	df000515 	stw	fp,20(sp)
   8d900:	df000504 	addi	fp,sp,20
   8d904:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8d908:	0005303a 	rdctl	r2,status
   8d90c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8d910:	e0fffd17 	ldw	r3,-12(fp)
   8d914:	00bfff84 	movi	r2,-2
   8d918:	1884703a 	and	r2,r3,r2
   8d91c:	1001703a 	wrctl	status,r2
  
  return context;
   8d920:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   8d924:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   8d928:	e0bfff17 	ldw	r2,-4(fp)
   8d92c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8d930:	e0bffc17 	ldw	r2,-16(fp)
   8d934:	10c00017 	ldw	r3,0(r2)
   8d938:	e0bffc17 	ldw	r2,-16(fp)
   8d93c:	10800117 	ldw	r2,4(r2)
   8d940:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   8d944:	e0bffc17 	ldw	r2,-16(fp)
   8d948:	10c00117 	ldw	r3,4(r2)
   8d94c:	e0bffc17 	ldw	r2,-16(fp)
   8d950:	10800017 	ldw	r2,0(r2)
   8d954:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   8d958:	e0fffc17 	ldw	r3,-16(fp)
   8d95c:	e0bffc17 	ldw	r2,-16(fp)
   8d960:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   8d964:	e0fffc17 	ldw	r3,-16(fp)
   8d968:	e0bffc17 	ldw	r2,-16(fp)
   8d96c:	18800015 	stw	r2,0(r3)
   8d970:	e0bffe17 	ldw	r2,-8(fp)
   8d974:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8d978:	e0bffb17 	ldw	r2,-20(fp)
   8d97c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   8d980:	e037883a 	mov	sp,fp
   8d984:	df000017 	ldw	fp,0(sp)
   8d988:	dec00104 	addi	sp,sp,4
   8d98c:	f800283a 	ret

0008d990 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   8d990:	defffb04 	addi	sp,sp,-20
   8d994:	dfc00415 	stw	ra,16(sp)
   8d998:	df000315 	stw	fp,12(sp)
   8d99c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   8d9a0:	d0a01017 	ldw	r2,-32704(gp)
   8d9a4:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   8d9a8:	d0a6bc17 	ldw	r2,-25872(gp)
   8d9ac:	10800044 	addi	r2,r2,1
   8d9b0:	d0a6bc15 	stw	r2,-25872(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8d9b4:	00003106 	br	8da7c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   8d9b8:	e0bffe17 	ldw	r2,-8(fp)
   8d9bc:	10800017 	ldw	r2,0(r2)
   8d9c0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8d9c4:	e0bffe17 	ldw	r2,-8(fp)
   8d9c8:	10800403 	ldbu	r2,16(r2)
   8d9cc:	10803fcc 	andi	r2,r2,255
   8d9d0:	1005003a 	cmpeq	r2,r2,zero
   8d9d4:	1000051e 	bne	r2,zero,8d9ec <alt_tick+0x5c>
   8d9d8:	d0a6bc17 	ldw	r2,-25872(gp)
   8d9dc:	1004c03a 	cmpne	r2,r2,zero
   8d9e0:	1000021e 	bne	r2,zero,8d9ec <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   8d9e4:	e0bffe17 	ldw	r2,-8(fp)
   8d9e8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   8d9ec:	e0bffe17 	ldw	r2,-8(fp)
   8d9f0:	10c00217 	ldw	r3,8(r2)
   8d9f4:	d0a6bc17 	ldw	r2,-25872(gp)
   8d9f8:	10c01e36 	bltu	r2,r3,8da74 <alt_tick+0xe4>
   8d9fc:	e0bffe17 	ldw	r2,-8(fp)
   8da00:	10800403 	ldbu	r2,16(r2)
   8da04:	10803fcc 	andi	r2,r2,255
   8da08:	1004c03a 	cmpne	r2,r2,zero
   8da0c:	1000191e 	bne	r2,zero,8da74 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   8da10:	e0bffe17 	ldw	r2,-8(fp)
   8da14:	10c00317 	ldw	r3,12(r2)
   8da18:	e0bffe17 	ldw	r2,-8(fp)
   8da1c:	11000517 	ldw	r4,20(r2)
   8da20:	183ee83a 	callr	r3
   8da24:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   8da28:	e0bffd17 	ldw	r2,-12(fp)
   8da2c:	1004c03a 	cmpne	r2,r2,zero
   8da30:	1000031e 	bne	r2,zero,8da40 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   8da34:	e13ffe17 	ldw	r4,-8(fp)
   8da38:	008d8f80 	call	8d8f8 <alt_alarm_stop>
   8da3c:	00000d06 	br	8da74 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   8da40:	e0bffe17 	ldw	r2,-8(fp)
   8da44:	10c00217 	ldw	r3,8(r2)
   8da48:	e0bffd17 	ldw	r2,-12(fp)
   8da4c:	1887883a 	add	r3,r3,r2
   8da50:	e0bffe17 	ldw	r2,-8(fp)
   8da54:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   8da58:	e0bffe17 	ldw	r2,-8(fp)
   8da5c:	10c00217 	ldw	r3,8(r2)
   8da60:	d0a6bc17 	ldw	r2,-25872(gp)
   8da64:	1880032e 	bgeu	r3,r2,8da74 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   8da68:	e0fffe17 	ldw	r3,-8(fp)
   8da6c:	00800044 	movi	r2,1
   8da70:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   8da74:	e0bfff17 	ldw	r2,-4(fp)
   8da78:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8da7c:	d0e01004 	addi	r3,gp,-32704
   8da80:	e0bffe17 	ldw	r2,-8(fp)
   8da84:	10ffcc1e 	bne	r2,r3,8d9b8 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   8da88:	e037883a 	mov	sp,fp
   8da8c:	dfc00117 	ldw	ra,4(sp)
   8da90:	df000017 	ldw	fp,0(sp)
   8da94:	dec00204 	addi	sp,sp,8
   8da98:	f800283a 	ret

0008da9c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   8da9c:	deffff04 	addi	sp,sp,-4
   8daa0:	df000015 	stw	fp,0(sp)
   8daa4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   8daa8:	000170fa 	wrctl	ienable,zero
}
   8daac:	e037883a 	mov	sp,fp
   8dab0:	df000017 	ldw	fp,0(sp)
   8dab4:	dec00104 	addi	sp,sp,4
   8dab8:	f800283a 	ret

0008dabc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   8dabc:	defffa04 	addi	sp,sp,-24
   8dac0:	dfc00515 	stw	ra,20(sp)
   8dac4:	df000415 	stw	fp,16(sp)
   8dac8:	df000404 	addi	fp,sp,16
   8dacc:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   8dad0:	00800274 	movhi	r2,9
   8dad4:	10806304 	addi	r2,r2,396
   8dad8:	10800017 	ldw	r2,0(r2)
   8dadc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8dae0:	00003306 	br	8dbb0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   8dae4:	e0bffd17 	ldw	r2,-12(fp)
   8dae8:	11000217 	ldw	r4,8(r2)
   8daec:	0082ea40 	call	82ea4 <strlen>
   8daf0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   8daf4:	e0bffd17 	ldw	r2,-12(fp)
   8daf8:	10c00217 	ldw	r3,8(r2)
   8dafc:	e0bffc17 	ldw	r2,-16(fp)
   8db00:	1885883a 	add	r2,r3,r2
   8db04:	10bfffc4 	addi	r2,r2,-1
   8db08:	10800003 	ldbu	r2,0(r2)
   8db0c:	10803fcc 	andi	r2,r2,255
   8db10:	1080201c 	xori	r2,r2,128
   8db14:	10bfe004 	addi	r2,r2,-128
   8db18:	10800bd8 	cmpnei	r2,r2,47
   8db1c:	1000031e 	bne	r2,zero,8db2c <alt_find_file+0x70>
    {
      len -= 1;
   8db20:	e0bffc17 	ldw	r2,-16(fp)
   8db24:	10bfffc4 	addi	r2,r2,-1
   8db28:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8db2c:	e0bffc17 	ldw	r2,-16(fp)
   8db30:	1007883a 	mov	r3,r2
   8db34:	e0bffe17 	ldw	r2,-8(fp)
   8db38:	1885883a 	add	r2,r3,r2
   8db3c:	10800003 	ldbu	r2,0(r2)
   8db40:	10803fcc 	andi	r2,r2,255
   8db44:	1080201c 	xori	r2,r2,128
   8db48:	10bfe004 	addi	r2,r2,-128
   8db4c:	10800be0 	cmpeqi	r2,r2,47
   8db50:	10000a1e 	bne	r2,zero,8db7c <alt_find_file+0xc0>
   8db54:	e0bffc17 	ldw	r2,-16(fp)
   8db58:	1007883a 	mov	r3,r2
   8db5c:	e0bffe17 	ldw	r2,-8(fp)
   8db60:	1885883a 	add	r2,r3,r2
   8db64:	10800003 	ldbu	r2,0(r2)
   8db68:	10803fcc 	andi	r2,r2,255
   8db6c:	1080201c 	xori	r2,r2,128
   8db70:	10bfe004 	addi	r2,r2,-128
   8db74:	1004c03a 	cmpne	r2,r2,zero
   8db78:	10000a1e 	bne	r2,zero,8dba4 <alt_find_file+0xe8>
   8db7c:	e0bffd17 	ldw	r2,-12(fp)
   8db80:	11000217 	ldw	r4,8(r2)
   8db84:	e1bffc17 	ldw	r6,-16(fp)
   8db88:	e17ffe17 	ldw	r5,-8(fp)
   8db8c:	008dcf80 	call	8dcf8 <memcmp>
   8db90:	1004c03a 	cmpne	r2,r2,zero
   8db94:	1000031e 	bne	r2,zero,8dba4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   8db98:	e0bffd17 	ldw	r2,-12(fp)
   8db9c:	e0bfff15 	stw	r2,-4(fp)
   8dba0:	00000806 	br	8dbc4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   8dba4:	e0bffd17 	ldw	r2,-12(fp)
   8dba8:	10800017 	ldw	r2,0(r2)
   8dbac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8dbb0:	00c00274 	movhi	r3,9
   8dbb4:	18c06304 	addi	r3,r3,396
   8dbb8:	e0bffd17 	ldw	r2,-12(fp)
   8dbbc:	10ffc91e 	bne	r2,r3,8dae4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   8dbc0:	e03fff15 	stw	zero,-4(fp)
   8dbc4:	e0bfff17 	ldw	r2,-4(fp)
}
   8dbc8:	e037883a 	mov	sp,fp
   8dbcc:	dfc00117 	ldw	ra,4(sp)
   8dbd0:	df000017 	ldw	fp,0(sp)
   8dbd4:	dec00204 	addi	sp,sp,8
   8dbd8:	f800283a 	ret

0008dbdc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   8dbdc:	defffa04 	addi	sp,sp,-24
   8dbe0:	dfc00515 	stw	ra,20(sp)
   8dbe4:	df000415 	stw	fp,16(sp)
   8dbe8:	dc000315 	stw	r16,12(sp)
   8dbec:	df000304 	addi	fp,sp,12
   8dbf0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   8dbf4:	00bffa04 	movi	r2,-24
   8dbf8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8dbfc:	e03ffe15 	stw	zero,-8(fp)
   8dc00:	00002006 	br	8dc84 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   8dc04:	e13ffe17 	ldw	r4,-8(fp)
   8dc08:	04000274 	movhi	r16,9
   8dc0c:	843be104 	addi	r16,r16,-4220
   8dc10:	01400304 	movi	r5,12
   8dc14:	00824b00 	call	824b0 <__mulsi3>
   8dc18:	1405883a 	add	r2,r2,r16
   8dc1c:	10800017 	ldw	r2,0(r2)
   8dc20:	1004c03a 	cmpne	r2,r2,zero
   8dc24:	1000141e 	bne	r2,zero,8dc78 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   8dc28:	e13ffe17 	ldw	r4,-8(fp)
   8dc2c:	04000274 	movhi	r16,9
   8dc30:	843be104 	addi	r16,r16,-4220
   8dc34:	01400304 	movi	r5,12
   8dc38:	00824b00 	call	824b0 <__mulsi3>
   8dc3c:	1407883a 	add	r3,r2,r16
   8dc40:	e0bfff17 	ldw	r2,-4(fp)
   8dc44:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   8dc48:	00800274 	movhi	r2,9
   8dc4c:	10806704 	addi	r2,r2,412
   8dc50:	10c00017 	ldw	r3,0(r2)
   8dc54:	e0bffe17 	ldw	r2,-8(fp)
   8dc58:	1880040e 	bge	r3,r2,8dc6c <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   8dc5c:	00c00274 	movhi	r3,9
   8dc60:	18c06704 	addi	r3,r3,412
   8dc64:	e0bffe17 	ldw	r2,-8(fp)
   8dc68:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   8dc6c:	e0bffe17 	ldw	r2,-8(fp)
   8dc70:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   8dc74:	00000606 	br	8dc90 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8dc78:	e0bffe17 	ldw	r2,-8(fp)
   8dc7c:	10800044 	addi	r2,r2,1
   8dc80:	e0bffe15 	stw	r2,-8(fp)
   8dc84:	e0bffe17 	ldw	r2,-8(fp)
   8dc88:	10800810 	cmplti	r2,r2,32
   8dc8c:	103fdd1e 	bne	r2,zero,8dc04 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   8dc90:	e0bffd17 	ldw	r2,-12(fp)
}
   8dc94:	e037883a 	mov	sp,fp
   8dc98:	dfc00217 	ldw	ra,8(sp)
   8dc9c:	df000117 	ldw	fp,4(sp)
   8dca0:	dc000017 	ldw	r16,0(sp)
   8dca4:	dec00304 	addi	sp,sp,12
   8dca8:	f800283a 	ret

0008dcac <atexit>:
   8dcac:	200b883a 	mov	r5,r4
   8dcb0:	000d883a 	mov	r6,zero
   8dcb4:	0009883a 	mov	r4,zero
   8dcb8:	000f883a 	mov	r7,zero
   8dcbc:	008dd6c1 	jmpi	8dd6c <__register_exitproc>

0008dcc0 <exit>:
   8dcc0:	defffe04 	addi	sp,sp,-8
   8dcc4:	000b883a 	mov	r5,zero
   8dcc8:	dc000015 	stw	r16,0(sp)
   8dccc:	dfc00115 	stw	ra,4(sp)
   8dcd0:	2021883a 	mov	r16,r4
   8dcd4:	008dea40 	call	8dea4 <__call_exitprocs>
   8dcd8:	00800274 	movhi	r2,9
   8dcdc:	10806004 	addi	r2,r2,384
   8dce0:	11000017 	ldw	r4,0(r2)
   8dce4:	20800f17 	ldw	r2,60(r4)
   8dce8:	10000126 	beq	r2,zero,8dcf0 <exit+0x30>
   8dcec:	103ee83a 	callr	r2
   8dcf0:	8009883a 	mov	r4,r16
   8dcf4:	008e0940 	call	8e094 <_exit>

0008dcf8 <memcmp>:
   8dcf8:	00c000c4 	movi	r3,3
   8dcfc:	1980032e 	bgeu	r3,r6,8dd0c <memcmp+0x14>
   8dd00:	2144b03a 	or	r2,r4,r5
   8dd04:	10c4703a 	and	r2,r2,r3
   8dd08:	10000f26 	beq	r2,zero,8dd48 <memcmp+0x50>
   8dd0c:	31ffffc4 	addi	r7,r6,-1
   8dd10:	3000061e 	bne	r6,zero,8dd2c <memcmp+0x34>
   8dd14:	00000a06 	br	8dd40 <memcmp+0x48>
   8dd18:	39ffffc4 	addi	r7,r7,-1
   8dd1c:	00bfffc4 	movi	r2,-1
   8dd20:	21000044 	addi	r4,r4,1
   8dd24:	29400044 	addi	r5,r5,1
   8dd28:	38800526 	beq	r7,r2,8dd40 <memcmp+0x48>
   8dd2c:	20c00003 	ldbu	r3,0(r4)
   8dd30:	28800003 	ldbu	r2,0(r5)
   8dd34:	18bff826 	beq	r3,r2,8dd18 <memcmp+0x20>
   8dd38:	1885c83a 	sub	r2,r3,r2
   8dd3c:	f800283a 	ret
   8dd40:	0005883a 	mov	r2,zero
   8dd44:	f800283a 	ret
   8dd48:	180f883a 	mov	r7,r3
   8dd4c:	20c00017 	ldw	r3,0(r4)
   8dd50:	28800017 	ldw	r2,0(r5)
   8dd54:	18bfed1e 	bne	r3,r2,8dd0c <memcmp+0x14>
   8dd58:	31bfff04 	addi	r6,r6,-4
   8dd5c:	21000104 	addi	r4,r4,4
   8dd60:	29400104 	addi	r5,r5,4
   8dd64:	39bff936 	bltu	r7,r6,8dd4c <memcmp+0x54>
   8dd68:	003fe806 	br	8dd0c <memcmp+0x14>

0008dd6c <__register_exitproc>:
   8dd6c:	defffa04 	addi	sp,sp,-24
   8dd70:	00800274 	movhi	r2,9
   8dd74:	10806004 	addi	r2,r2,384
   8dd78:	dc000015 	stw	r16,0(sp)
   8dd7c:	14000017 	ldw	r16,0(r2)
   8dd80:	dd000415 	stw	r20,16(sp)
   8dd84:	2829883a 	mov	r20,r5
   8dd88:	81405217 	ldw	r5,328(r16)
   8dd8c:	dcc00315 	stw	r19,12(sp)
   8dd90:	dc800215 	stw	r18,8(sp)
   8dd94:	dc400115 	stw	r17,4(sp)
   8dd98:	dfc00515 	stw	ra,20(sp)
   8dd9c:	2023883a 	mov	r17,r4
   8dda0:	3027883a 	mov	r19,r6
   8dda4:	3825883a 	mov	r18,r7
   8dda8:	28002526 	beq	r5,zero,8de40 <__register_exitproc+0xd4>
   8ddac:	29000117 	ldw	r4,4(r5)
   8ddb0:	008007c4 	movi	r2,31
   8ddb4:	11002716 	blt	r2,r4,8de54 <__register_exitproc+0xe8>
   8ddb8:	8800101e 	bne	r17,zero,8ddfc <__register_exitproc+0x90>
   8ddbc:	2105883a 	add	r2,r4,r4
   8ddc0:	1085883a 	add	r2,r2,r2
   8ddc4:	20c00044 	addi	r3,r4,1
   8ddc8:	1145883a 	add	r2,r2,r5
   8ddcc:	0009883a 	mov	r4,zero
   8ddd0:	15000215 	stw	r20,8(r2)
   8ddd4:	28c00115 	stw	r3,4(r5)
   8ddd8:	2005883a 	mov	r2,r4
   8dddc:	dfc00517 	ldw	ra,20(sp)
   8dde0:	dd000417 	ldw	r20,16(sp)
   8dde4:	dcc00317 	ldw	r19,12(sp)
   8dde8:	dc800217 	ldw	r18,8(sp)
   8ddec:	dc400117 	ldw	r17,4(sp)
   8ddf0:	dc000017 	ldw	r16,0(sp)
   8ddf4:	dec00604 	addi	sp,sp,24
   8ddf8:	f800283a 	ret
   8ddfc:	29802204 	addi	r6,r5,136
   8de00:	00800044 	movi	r2,1
   8de04:	110e983a 	sll	r7,r2,r4
   8de08:	30c04017 	ldw	r3,256(r6)
   8de0c:	2105883a 	add	r2,r4,r4
   8de10:	1085883a 	add	r2,r2,r2
   8de14:	1185883a 	add	r2,r2,r6
   8de18:	19c6b03a 	or	r3,r3,r7
   8de1c:	14802015 	stw	r18,128(r2)
   8de20:	14c00015 	stw	r19,0(r2)
   8de24:	00800084 	movi	r2,2
   8de28:	30c04015 	stw	r3,256(r6)
   8de2c:	88bfe31e 	bne	r17,r2,8ddbc <__register_exitproc+0x50>
   8de30:	30804117 	ldw	r2,260(r6)
   8de34:	11c4b03a 	or	r2,r2,r7
   8de38:	30804115 	stw	r2,260(r6)
   8de3c:	003fdf06 	br	8ddbc <__register_exitproc+0x50>
   8de40:	00800274 	movhi	r2,9
   8de44:	10876404 	addi	r2,r2,7568
   8de48:	100b883a 	mov	r5,r2
   8de4c:	80805215 	stw	r2,328(r16)
   8de50:	003fd606 	br	8ddac <__register_exitproc+0x40>
   8de54:	00800234 	movhi	r2,8
   8de58:	10893f04 	addi	r2,r2,9468
   8de5c:	1000021e 	bne	r2,zero,8de68 <__register_exitproc+0xfc>
   8de60:	013fffc4 	movi	r4,-1
   8de64:	003fdc06 	br	8ddd8 <__register_exitproc+0x6c>
   8de68:	01006404 	movi	r4,400
   8de6c:	103ee83a 	callr	r2
   8de70:	1007883a 	mov	r3,r2
   8de74:	103ffa26 	beq	r2,zero,8de60 <__register_exitproc+0xf4>
   8de78:	80805217 	ldw	r2,328(r16)
   8de7c:	180b883a 	mov	r5,r3
   8de80:	18000115 	stw	zero,4(r3)
   8de84:	18800015 	stw	r2,0(r3)
   8de88:	80c05215 	stw	r3,328(r16)
   8de8c:	18006215 	stw	zero,392(r3)
   8de90:	18006315 	stw	zero,396(r3)
   8de94:	0009883a 	mov	r4,zero
   8de98:	883fc826 	beq	r17,zero,8ddbc <__register_exitproc+0x50>
   8de9c:	003fd706 	br	8ddfc <__register_exitproc+0x90>

0008dea0 <register_fini>:
   8dea0:	f800283a 	ret

0008dea4 <__call_exitprocs>:
   8dea4:	00800274 	movhi	r2,9
   8dea8:	10806004 	addi	r2,r2,384
   8deac:	10800017 	ldw	r2,0(r2)
   8deb0:	defff304 	addi	sp,sp,-52
   8deb4:	df000b15 	stw	fp,44(sp)
   8deb8:	d8800115 	stw	r2,4(sp)
   8debc:	00800234 	movhi	r2,8
   8dec0:	10893a04 	addi	r2,r2,9448
   8dec4:	1005003a 	cmpeq	r2,r2,zero
   8dec8:	d8800215 	stw	r2,8(sp)
   8decc:	d8800117 	ldw	r2,4(sp)
   8ded0:	dd400815 	stw	r21,32(sp)
   8ded4:	dd000715 	stw	r20,28(sp)
   8ded8:	10805204 	addi	r2,r2,328
   8dedc:	dfc00c15 	stw	ra,48(sp)
   8dee0:	ddc00a15 	stw	r23,40(sp)
   8dee4:	dd800915 	stw	r22,36(sp)
   8dee8:	dcc00615 	stw	r19,24(sp)
   8deec:	dc800515 	stw	r18,20(sp)
   8def0:	dc400415 	stw	r17,16(sp)
   8def4:	dc000315 	stw	r16,12(sp)
   8def8:	282b883a 	mov	r21,r5
   8defc:	2039883a 	mov	fp,r4
   8df00:	d8800015 	stw	r2,0(sp)
   8df04:	2829003a 	cmpeq	r20,r5,zero
   8df08:	d8800117 	ldw	r2,4(sp)
   8df0c:	14405217 	ldw	r17,328(r2)
   8df10:	88001026 	beq	r17,zero,8df54 <__call_exitprocs+0xb0>
   8df14:	ddc00017 	ldw	r23,0(sp)
   8df18:	88800117 	ldw	r2,4(r17)
   8df1c:	8c802204 	addi	r18,r17,136
   8df20:	143fffc4 	addi	r16,r2,-1
   8df24:	80000916 	blt	r16,zero,8df4c <__call_exitprocs+0xa8>
   8df28:	05bfffc4 	movi	r22,-1
   8df2c:	a000151e 	bne	r20,zero,8df84 <__call_exitprocs+0xe0>
   8df30:	8409883a 	add	r4,r16,r16
   8df34:	2105883a 	add	r2,r4,r4
   8df38:	1485883a 	add	r2,r2,r18
   8df3c:	10c02017 	ldw	r3,128(r2)
   8df40:	a8c01126 	beq	r21,r3,8df88 <__call_exitprocs+0xe4>
   8df44:	843fffc4 	addi	r16,r16,-1
   8df48:	85bff81e 	bne	r16,r22,8df2c <__call_exitprocs+0x88>
   8df4c:	d8800217 	ldw	r2,8(sp)
   8df50:	10003126 	beq	r2,zero,8e018 <__call_exitprocs+0x174>
   8df54:	dfc00c17 	ldw	ra,48(sp)
   8df58:	df000b17 	ldw	fp,44(sp)
   8df5c:	ddc00a17 	ldw	r23,40(sp)
   8df60:	dd800917 	ldw	r22,36(sp)
   8df64:	dd400817 	ldw	r21,32(sp)
   8df68:	dd000717 	ldw	r20,28(sp)
   8df6c:	dcc00617 	ldw	r19,24(sp)
   8df70:	dc800517 	ldw	r18,20(sp)
   8df74:	dc400417 	ldw	r17,16(sp)
   8df78:	dc000317 	ldw	r16,12(sp)
   8df7c:	dec00d04 	addi	sp,sp,52
   8df80:	f800283a 	ret
   8df84:	8409883a 	add	r4,r16,r16
   8df88:	88c00117 	ldw	r3,4(r17)
   8df8c:	2105883a 	add	r2,r4,r4
   8df90:	1445883a 	add	r2,r2,r17
   8df94:	18ffffc4 	addi	r3,r3,-1
   8df98:	11800217 	ldw	r6,8(r2)
   8df9c:	1c001526 	beq	r3,r16,8dff4 <__call_exitprocs+0x150>
   8dfa0:	10000215 	stw	zero,8(r2)
   8dfa4:	303fe726 	beq	r6,zero,8df44 <__call_exitprocs+0xa0>
   8dfa8:	00c00044 	movi	r3,1
   8dfac:	1c06983a 	sll	r3,r3,r16
   8dfb0:	90804017 	ldw	r2,256(r18)
   8dfb4:	8cc00117 	ldw	r19,4(r17)
   8dfb8:	1884703a 	and	r2,r3,r2
   8dfbc:	10001426 	beq	r2,zero,8e010 <__call_exitprocs+0x16c>
   8dfc0:	90804117 	ldw	r2,260(r18)
   8dfc4:	1884703a 	and	r2,r3,r2
   8dfc8:	10000c1e 	bne	r2,zero,8dffc <__call_exitprocs+0x158>
   8dfcc:	2105883a 	add	r2,r4,r4
   8dfd0:	1485883a 	add	r2,r2,r18
   8dfd4:	11400017 	ldw	r5,0(r2)
   8dfd8:	e009883a 	mov	r4,fp
   8dfdc:	303ee83a 	callr	r6
   8dfe0:	88800117 	ldw	r2,4(r17)
   8dfe4:	98bfc81e 	bne	r19,r2,8df08 <__call_exitprocs+0x64>
   8dfe8:	b8800017 	ldw	r2,0(r23)
   8dfec:	147fd526 	beq	r2,r17,8df44 <__call_exitprocs+0xa0>
   8dff0:	003fc506 	br	8df08 <__call_exitprocs+0x64>
   8dff4:	8c000115 	stw	r16,4(r17)
   8dff8:	003fea06 	br	8dfa4 <__call_exitprocs+0x100>
   8dffc:	2105883a 	add	r2,r4,r4
   8e000:	1485883a 	add	r2,r2,r18
   8e004:	11000017 	ldw	r4,0(r2)
   8e008:	303ee83a 	callr	r6
   8e00c:	003ff406 	br	8dfe0 <__call_exitprocs+0x13c>
   8e010:	303ee83a 	callr	r6
   8e014:	003ff206 	br	8dfe0 <__call_exitprocs+0x13c>
   8e018:	88800117 	ldw	r2,4(r17)
   8e01c:	1000081e 	bne	r2,zero,8e040 <__call_exitprocs+0x19c>
   8e020:	89000017 	ldw	r4,0(r17)
   8e024:	20000726 	beq	r4,zero,8e044 <__call_exitprocs+0x1a0>
   8e028:	b9000015 	stw	r4,0(r23)
   8e02c:	8809883a 	mov	r4,r17
   8e030:	00824e80 	call	824e8 <free>
   8e034:	bc400017 	ldw	r17,0(r23)
   8e038:	883fb71e 	bne	r17,zero,8df18 <__call_exitprocs+0x74>
   8e03c:	003fc506 	br	8df54 <__call_exitprocs+0xb0>
   8e040:	89000017 	ldw	r4,0(r17)
   8e044:	882f883a 	mov	r23,r17
   8e048:	2023883a 	mov	r17,r4
   8e04c:	883fb21e 	bne	r17,zero,8df18 <__call_exitprocs+0x74>
   8e050:	003fc006 	br	8df54 <__call_exitprocs+0xb0>

0008e054 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   8e054:	defffd04 	addi	sp,sp,-12
   8e058:	df000215 	stw	fp,8(sp)
   8e05c:	df000204 	addi	fp,sp,8
   8e060:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   8e064:	e0bfff17 	ldw	r2,-4(fp)
   8e068:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   8e06c:	e0bffe17 	ldw	r2,-8(fp)
   8e070:	1005003a 	cmpeq	r2,r2,zero
   8e074:	1000021e 	bne	r2,zero,8e080 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   8e078:	002af070 	cmpltui	zero,zero,43969
   8e07c:	00000106 	br	8e084 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   8e080:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   8e084:	e037883a 	mov	sp,fp
   8e088:	df000017 	ldw	fp,0(sp)
   8e08c:	dec00104 	addi	sp,sp,4
   8e090:	f800283a 	ret

0008e094 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   8e094:	defffd04 	addi	sp,sp,-12
   8e098:	dfc00215 	stw	ra,8(sp)
   8e09c:	df000115 	stw	fp,4(sp)
   8e0a0:	df000104 	addi	fp,sp,4
   8e0a4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   8e0a8:	e13fff17 	ldw	r4,-4(fp)
   8e0ac:	008e0540 	call	8e054 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   8e0b0:	003fff06 	br	8e0b0 <_exit+0x1c>
   8e0b4:	00000010 	cmplti	zero,zero,0
   8e0b8:	00000000 	call	0 <__alt_mem_sram_0-0x80000>
   8e0bc:	00527a01 	jmpi	527a0 <__alt_mem_sram_0-0x2d860>
   8e0c0:	011f7c01 	jmpi	11f7c0 <__alt_data_end+0x1f7c0>
   8e0c4:	001b0c0b 	ldhu	zero,27696(zero)
   8e0c8:	00000028 	cmpgeui	zero,zero,0
   8e0cc:	00000018 	cmpnei	zero,zero,0
   8e0d0:	00089d38 	rdprs	zero,zero,8820
   8e0d4:	0000066c 	andhi	zero,zero,25
   8e0d8:	3c0e4400 	call	3c0e440 <__alt_data_end+0x3b0e440>
   8e0dc:	910a9074 	orhi	r4,r18,10817
   8e0e0:	94089209 	0x94089209
   8e0e4:	97049606 	br	8f340 <jtag_uart_0+0x23c>
   8e0e8:	93019f03 	ldbu	r12,1660(r18)
   8e0ec:	9c059507 	ldb	r16,5716(r19)
   8e0f0:	00000002 	0x2
   8e0f4:	00000028 	cmpgeui	zero,zero,0
   8e0f8:	00000044 	movi	zero,1
   8e0fc:	0008a3a4 	muli	zero,zero,8846
   8e100:	00000660 	cmpeqi	zero,zero,25
   8e104:	400e4400 	call	400e440 <__alt_data_end+0x3f0e440>
   8e108:	92099170 	cmpltui	r8,r18,9797
   8e10c:	96069408 	cmpgei	et,r18,6736
   8e110:	9c039704 	addi	r16,r19,3676
   8e114:	90019f02 	0x90019f02
   8e118:	9507930a 	0x9507930a
   8e11c:	00000005 	stb	zero,0(zero)
   8e120:	0008dea0 	cmpeqi	zero,zero,9082
