
experiment3_cpu2.elf:     file format elf32-littlenios2
experiment3_cpu2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008140

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00001ab8 memsz 0x00001ab8 flags r-x
    LOAD off    0x00002ad8 vaddr 0x00009ad8 paddr 0x0000a094 align 2**12
         filesz 0x000005bc memsz 0x000005bc flags rw-
    LOAD off    0x00003650 vaddr 0x0000a650 paddr 0x0000a650 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000120  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000192c  00008140  00008140  00001140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000006c  00009a6c  00009a6c  00002a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000005bc  00009ad8  0000a094  00002ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  0000a650  0000a650  00003650  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00003094  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000003d8  00000000  00000000  000030b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000008e3  00000000  00000000  00003490  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000065a3  00000000  00000000  00003d73  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001f66  00000000  00000000  0000a316  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00005547  00000000  00000000  0000c27c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000620  00000000  00000000  000117c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000016f4  00000000  00000000  00011de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001cb8  00000000  00000000  000134d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00015190  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000148  00000000  00000000  000151a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00016d02  2**0
                  CONTENTS, READONLY
 18 .cpu          00000004  00000000  00000000  00016d05  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00016d09  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00016d0a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00016d0b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00016d0f  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  00016d13  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00016d17  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000036  00000000  00000000  00016d22  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00087a8f  00000000  00000000  00016d58  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008140 l    d  .text	00000000 .text
00009a6c l    d  .rodata	00000000 .rodata
00009ad8 l    d  .rwdata	00000000 .rwdata
0000a650 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00008178 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 experiment3_cpu2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 impure.c
00009ee0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00009194 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000a068 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00009fc0 l     O .rwdata	00000010 message_buffer_mutex
00009fd0 l     O .rwdata	0000002c cpu2_character_lcd_0
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
00009474 l     F .text	00000028 alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00009584 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009814 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00009220 g     F .text	0000002c alt_main
0000a6a0 g     O .bss	00000100 alt_irq
0000a094 g       *ABS*	00000000 __flash_rwdata_start
00009648 g     F .text	00000010 alt_up_character_lcd_send_cmd
0000a7a0 g       *ABS*	00000000 __alt_heap_start
00100000 g       *ABS*	00000000 __alt_mem_message_buffer_ram
00009250 g     F .text	00000004 __malloc_unlock
00009530 g     F .text	00000004 altera_avalon_mutex_trylock
00000000  w      *UND*	00000000 __errno
000095c0 g     F .text	00000018 get_DDRAM_addr
00008000 g     F .entry	0000000c __reset
0000942c g     F .text	00000028 altera_avalon_mutex_is_mine
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000a65c g     O .bss	00000004 errno
0000a668 g     O .bss	00000004 alt_argv
00012054 g       *ABS*	00000000 _gp
0000a024 g     O .rwdata	00000030 alt_fd_list
0000988c g     F .text	00000070 alt_find_dev
00009618 g     F .text	00000020 alt_up_character_lcd_write_fd
000084f0 g     F .text	00000014 malloc
0000a650 g     O .bss	00000004 __malloc_top_pad
00008c44 g     F .text	00000070 _sbrk_r
0000a08c g     O .rwdata	00000004 alt_max_fd
0000a654 g     O .bss	00000004 __malloc_max_sbrked_mem
000090f4 g     F .text	000000a0 alt_irq_register
0000941c g     F .text	00000010 altera_avalon_mutex_first_lock
0000a060 g     O .rwdata	00000004 _global_impure_ptr
0000a7a0 g       *ABS*	00000000 __bss_end
0000999c g     F .text	0000006c alt_iic_isr_register
000092d8 g     F .text	000000ac alt_tick
00009900 g     F .text	00000018 alt_ic_irq_enabled
000092a4 g     F .text	00000034 alt_alarm_stop
0000a660 g     O .bss	00000004 alt_irq_active
000080ec g     F .exceptions	00000054 alt_irq_handler
00009ffc g     O .rwdata	00000028 alt_dev_null
0000949c g     F .text	00000058 altera_avalon_mutex_open
00009658 g     F .text	00000008 alt_up_character_lcd_cursor_blink_on
00009810 g     F .text	00000004 alt_dcache_flush_all
0000a094 g       *ABS*	00000000 __ram_rwdata_end
0000a084 g     O .rwdata	00000008 alt_dev_list
0000a074 g     O .rwdata	00000008 alt_mutex_list
00009ad8 g       *ABS*	00000000 __ram_rodata_end
0000a7a0 g       *ABS*	00000000 end
00010000 g       *ABS*	00000000 __alt_stack_pointer
00009534 g     F .text	00000050 alt_avalon_timer_sc_init
000095f4 g     F .text	00000024 alt_up_character_lcd_write
00008de0 g     F .text	00000314 _free_r
0000a058 g     O .rwdata	00000004 __malloc_sbrk_base
00008140 g     F .text	0000003c _start
0000a670 g     O .bss	00000004 _alt_tick_rate
0000a674 g     O .bss	00000004 _alt_nticks
00009384 g     F .text	00000074 alt_sys_init
000096cc g     F .text	00000070 alt_up_character_lcd_shift_display
00009454 g     F .text	00000020 altera_avalon_mutex_unlock
00009668 g     F .text	00000064 alt_up_character_lcd_erase_pos
00009ad8 g       *ABS*	00000000 __ram_rwdata_start
00009a6c g       *ABS*	00000000 __ram_rodata_start
0000a678 g     O .bss	00000028 __malloc_current_mallinfo
00009a10 g     F .text	0000003c memcmp
0000a7a0 g       *ABS*	00000000 __alt_stack_base
00009ad8 g     O .rwdata	00000408 __malloc_av_
0000981c g     F .text	00000070 alt_dev_llist_insert
0000924c g     F .text	00000004 __malloc_lock
00009254 g     F .text	00000050 sbrk
0000a650 g       *ABS*	00000000 __bss_start
000081c4 g     F .text	00000318 main
0000a66c g     O .bss	00000004 alt_envp
0000a658 g     O .bss	00000004 __malloc_max_total_mem
0000973c g     F .text	00000070 alt_up_character_lcd_shift_cursor
00010000 g       *ABS*	00000000 __alt_heap_limit
000094f4 g     F .text	0000003c altera_avalon_mutex_lock
00008504 g     F .text	00000740 _malloc_r
0000a090 g     O .rwdata	00000004 alt_errno
00009804 g     F .text	0000000c alt_up_character_lcd_open_dev
00008cb4 g     F .text	0000012c _malloc_trim_r
0000817c g     F .text	00000048 handle_cpu2_button_interrupts
00009638 g     F .text	00000010 alt_up_character_lcd_init
00009a6c g       *ABS*	00000000 __flash_rodata_start
000093f8 g     F .text	00000020 alt_irq_init
00009660 g     F .text	00000008 alt_up_character_lcd_cursor_off
00008000 g       *ABS*	00000000 __alt_mem_cpu2_onchip_ram
0000a05c g     O .rwdata	00000004 _impure_ptr
0000a664 g     O .bss	00000004 alt_argc
00008020 g       .exceptions	00000000 alt_irq_entry
0000a07c g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00009998 g     F .text	00000004 alt_ic_isr_register
0000a094 g       *ABS*	00000000 _edata
0000a7a0 g       *ABS*	00000000 _end
00008140 g       *ABS*	00000000 __ram_exceptions_end
00009958 g     F .text	00000040 alt_ic_irq_disable
0000a054 g     O .rwdata	00000004 __malloc_trim_threshold
00009a08 g     F .text	00000008 altera_nios2_qsys_irq_init
0000800c g       .entry	00000000 exit
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
000095d8 g     F .text	0000001c alt_up_character_lcd_string
0000800c g       .entry	00000000 _exit
00009a4c g     F .text	00000020 strlen
000098fc g     F .text	00000004 alt_icache_flush_all
000097ac g     F .text	00000058 alt_up_character_lcd_set_cursor_pos
0000a064 g     O .rwdata	00000004 alt_priority_mask
00009918 g     F .text	00000040 alt_ic_irq_enable
00009418 g     F .text	00000004 altera_avalon_mutex_close
0000a06c g     O .rwdata	00000008 alt_alarm_list
000091b4 g     F .text	0000006c alt_load
000084dc g     F .text	00000014 free



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08605014 	ori	at,at,33088
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
    8044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080ec0 	call	80ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000306 	br	8098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
    808c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
    8094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    8098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    809c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
    80c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
    80e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80e8:	ef80083a 	eret

000080ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80ec:	deffff04 	addi	sp,sp,-4
    80f0:	dfc00015 	stw	ra,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    80f4:	0009313a 	rdctl	r4,ipending
    80f8:	00c00044 	movi	r3,1
    80fc:	01400074 	movhi	r5,1
    8100:	2969a804 	addi	r5,r5,-22880
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    8104:	20c4703a 	and	r2,r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    8108:	18c7883a 	add	r3,r3,r3
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    810c:	10000726 	beq	r2,zero,812c <alt_irq_handler+0x40>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    8110:	29000117 	ldw	r4,4(r5)
    8114:	28800017 	ldw	r2,0(r5)
    8118:	103ee83a 	callr	r2
    811c:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    8120:	10000426 	beq	r2,zero,8134 <alt_irq_handler+0x48>
    8124:	1009883a 	mov	r4,r2
    8128:	003ff306 	br	80f8 <alt_irq_handler+0xc>
    812c:	29400204 	addi	r5,r5,8
    8130:	003ff406 	br	8104 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    8134:	dfc00017 	ldw	ra,0(sp)
    8138:	dec00104 	addi	sp,sp,4
    813c:	f800283a 	ret

Disassembly of section .text:

00008140 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8140:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8144:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    8148:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    814c:	d6881514 	ori	gp,gp,8276
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8150:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8154:	10a99414 	ori	r2,r2,42576

    movhi r3, %hi(__bss_end)
    8158:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    815c:	18e9e814 	ori	r3,r3,42912

    beq r2, r3, 1f
    8160:	10c00326 	beq	r2,r3,8170 <_start+0x30>

0:
    stw zero, (r2)
    8164:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8168:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    816c:	10fffd36 	bltu	r2,r3,8164 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8170:	00091b40 	call	91b4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8174:	00092200 	call	9220 <alt_main>

00008178 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8178:	003fff06 	br	8178 <alt_after_alt_main>

0000817c <handle_cpu2_button_interrupts>:
// Global functions
void handle_cpu2_button_interrupts(int *count) {
    // alt_up_character_lcd_set_cursor_pos((alt_up_character_lcd_dev *)lcd_0, 0, 0);
    // alt_up_character_lcd_string((alt_up_character_lcd_dev *)lcd_0, "CPU2 PB pressed!");

	switch(IORD(CPU2_PB_BUTTON_I_BASE, 3)) {
    817c:	00800074 	movhi	r2,1
    8180:	10842304 	addi	r2,r2,4236
    8184:	10c00037 	ldwio	r3,0(r2)
    8188:	00800044 	movi	r2,1
    818c:	18800326 	beq	r3,r2,819c <handle_cpu2_button_interrupts+0x20>
    8190:	00800084 	movi	r2,2
    8194:	1880071e 	bne	r3,r2,81b4 <handle_cpu2_button_interrupts+0x38>
    8198:	00000306 	br	81a8 <handle_cpu2_button_interrupts+0x2c>
		case 1: *count = *count + 1;  break;
    819c:	20800017 	ldw	r2,0(r4)
    81a0:	10c5883a 	add	r2,r2,r3
    81a4:	00000206 	br	81b0 <handle_cpu2_button_interrupts+0x34>
		case 2: *count = *count + 1;  break;
    81a8:	20800017 	ldw	r2,0(r4)
    81ac:	10800044 	addi	r2,r2,1
    81b0:	20800015 	stw	r2,0(r4)

	}

	IOWR(CPU2_PB_BUTTON_I_BASE, 3, 0x0);
    81b4:	00800074 	movhi	r2,1
    81b8:	10842304 	addi	r2,r2,4236
    81bc:	10000035 	stwio	zero,0(r2)
}
    81c0:	f800283a 	ret

000081c4 <main>:



// The main function
int main() {
    81c4:	defff604 	addi	sp,sp,-40
   // unsigned short int *final_set;

	message_buffer_struct *message;
	
	PB_count = 0;
	IOWR(CPU2_PB_BUTTON_I_BASE, 2, 0x3);
    81c8:	00c000c4 	movi	r3,3
    81cc:	00800074 	movhi	r2,1
    81d0:	10842204 	addi	r2,r2,4232
}



// The main function
int main() {
    81d4:	dfc00915 	stw	ra,36(sp)
    81d8:	ddc00815 	stw	r23,32(sp)
    81dc:	dd800715 	stw	r22,28(sp)
    81e0:	dd400615 	stw	r21,24(sp)
    81e4:	dd000515 	stw	r20,20(sp)
    81e8:	dcc00415 	stw	r19,16(sp)
    81ec:	dc800315 	stw	r18,12(sp)
    81f0:	dc400215 	stw	r17,8(sp)
    81f4:	dc000115 	stw	r16,4(sp)
    unsigned short int sub_length = 1;
   // unsigned short int *final_set;

	message_buffer_struct *message;
	
	PB_count = 0;
    81f8:	d8000015 	stw	zero,0(sp)
	IOWR(CPU2_PB_BUTTON_I_BASE, 2, 0x3);
    81fc:	10c00035 	stwio	r3,0(r2)
	IOWR(CPU2_PB_BUTTON_I_BASE, 3, 0x0);
    8200:	10800104 	addi	r2,r2,4
    8204:	10000035 	stwio	zero,0(r2)
	alt_irq_register(CPU2_PB_BUTTON_I_IRQ, (void*)&PB_count, (void*)handle_cpu2_button_interrupts );
    8208:	d80b883a 	mov	r5,sp
    820c:	01800074 	movhi	r6,1
    8210:	31a05f04 	addi	r6,r6,-32388
    8214:	01000044 	movi	r4,1
    8218:	00090f40 	call	90f4 <alt_irq_register>
  
   	lcd_0 = alt_up_character_lcd_open_dev(CPU2_CHARACTER_LCD_0_NAME);
    821c:	01000074 	movhi	r4,1
    8220:	21269b04 	addi	r4,r4,-26004
    8224:	00098040 	call	9804 <alt_up_character_lcd_open_dev>
        
    alt_up_character_lcd_init(lcd_0);
    8228:	1009883a 	mov	r4,r2
	PB_count = 0;
	IOWR(CPU2_PB_BUTTON_I_BASE, 2, 0x3);
	IOWR(CPU2_PB_BUTTON_I_BASE, 3, 0x0);
	alt_irq_register(CPU2_PB_BUTTON_I_IRQ, (void*)&PB_count, (void*)handle_cpu2_button_interrupts );
  
   	lcd_0 = alt_up_character_lcd_open_dev(CPU2_CHARACTER_LCD_0_NAME);
    822c:	1021883a 	mov	r16,r2
        
    alt_up_character_lcd_init(lcd_0);
    8230:	00096380 	call	9638 <alt_up_character_lcd_init>
    
    alt_up_character_lcd_string(lcd_0, "COE4DS4 Winter19");
    8234:	01400074 	movhi	r5,1
    8238:	2966a204 	addi	r5,r5,-25976
    823c:	8009883a 	mov	r4,r16
    8240:	00095d80 	call	95d8 <alt_up_character_lcd_string>
    
    alt_up_character_lcd_set_cursor_pos(lcd_0, 0, 1);
    8244:	01800044 	movi	r6,1
    8248:	8009883a 	mov	r4,r16
    824c:	000b883a 	mov	r5,zero
    8250:	00097ac0 	call	97ac <alt_up_character_lcd_set_cursor_pos>
    
    alt_up_character_lcd_string(lcd_0, "Lab7     exp.  3");
    8254:	8009883a 	mov	r4,r16
    8258:	01400074 	movhi	r5,1
    825c:	2966a704 	addi	r5,r5,-25956
    8260:	00095d80 	call	95d8 <alt_up_character_lcd_string>
    
    // Reading switches 7-0 for CPU2
    switches = IORD(CPU2_SWITCH_I_BASE, 0);
    8264:	00800074 	movhi	r2,1
    8268:	10841c04 	addi	r2,r2,4208
    826c:	10c00037 	ldwio	r3,0(r2)

	// Get our processor ID (add 1 so it matches the cpu name in SOPC Builder)
	NIOS2_READ_CPUID(id);
    8270:	0007317a 	rdctl	r3,cpuid

	// Value can be any non-zero value
	value = 1;

	switches = IORD(CPU2_SWITCH_I_BASE, 0);
    8274:	10800037 	ldwio	r2,0(r2)
	message = (message_buffer_struct*)MESSAGE_BUFFER_BASE;

	// Okay, now we'll open the real mutex
	// It's not actually a mutex to share the jtag_uart, but to share a message
	// buffer which CPU1 is responsible for reading and printing to the jtag_uart.
	mutex = altera_avalon_mutex_open(MESSAGE_BUFFER_MUTEX_NAME);
    8278:	01000074 	movhi	r4,1
    827c:	2126ac04 	addi	r4,r4,-25936
    8280:	000949c0 	call	949c <altera_avalon_mutex_open>
    8284:	1023883a 	mov	r17,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    8288:	00800074 	movhi	r2,1
    828c:	10a99d04 	addi	r2,r2,-22924
    8290:	10800017 	ldw	r2,0(r2)
	// Here we initialize delay tracking variable.
	ticks_at_last_message = alt_nticks();

	int i, j;

	if (mutex) {
    8294:	88008526 	beq	r17,zero,84ac <main+0x2e8>
    8298:	002f883a 	mov	r23,zero
    829c:	05800044 	movi	r22,1
		//message->buf[0] = NO_MESSAGE;

		while(1) {
			if (PB_count > 0) {
    82a0:	d8800017 	ldw	r2,0(sp)
    82a4:	103ffe26 	beq	r2,zero,82a0 <main+0xdc>
				      PB_count = 0;
    82a8:	d8000015 	stw	zero,0(sp)
    82ac:	05400434 	movhi	r21,16
    82b0:	00c00084 	movi	r3,2

				while ((*(char volatile *)(&(message->flag))) != CPU2_WAIT_FLAG);
    82b4:	a8800003 	ldbu	r2,0(r21)
    82b8:	10803fcc 	andi	r2,r2,255
    82bc:	1080201c 	xori	r2,r2,128
    82c0:	10bfe004 	addi	r2,r2,-128
    82c4:	10fffb1e 	bne	r2,r3,82b4 <main+0xf0>

				data_set = (unsigned short int *)malloc(sizeof(unsigned short int) * message->buf_size);
    82c8:	a900008b 	ldhu	r4,2(r21)
    82cc:	2109883a 	add	r4,r4,r4
    82d0:	00084f00 	call	84f0 <malloc>
				unsigned short int SIZE = message->buf_size;
    82d4:	acc0008b 	ldhu	r19,2(r21)
			if (PB_count > 0) {
				      PB_count = 0;

				while ((*(char volatile *)(&(message->flag))) != CPU2_WAIT_FLAG);

				data_set = (unsigned short int *)malloc(sizeof(unsigned short int) * message->buf_size);
    82d8:	1029883a 	mov	r20,r2
    82dc:	1025883a 	mov	r18,r2
				unsigned short int SIZE = message->buf_size;

				if (SIZE > BUF_SIZE) {
    82e0:	00c1fe84 	movi	r3,2042
    82e4:	98bfffcc 	andi	r2,r19,65535
    82e8:	18800336 	bltu	r3,r2,82f8 <main+0x134>
    82ec:	a009883a 	mov	r4,r20
    82f0:	000b883a 	mov	r5,zero
    82f4:	00000f06 	br	8334 <main+0x170>
    82f8:	180d883a 	mov	r6,r3
    82fc:	0009883a 	mov	r4,zero
    8300:	a007883a 	mov	r3,r20
    8304:	01400434 	movhi	r5,16
					for (i = 0; i < BUF_SIZE; i++) {
						data_set[i] = message->buf[i];
    8308:	2105883a 	add	r2,r4,r4
    830c:	1145883a 	add	r2,r2,r5
    8310:	1080018b 	ldhu	r2,6(r2)

				data_set = (unsigned short int *)malloc(sizeof(unsigned short int) * message->buf_size);
				unsigned short int SIZE = message->buf_size;

				if (SIZE > BUF_SIZE) {
					for (i = 0; i < BUF_SIZE; i++) {
    8314:	21000044 	addi	r4,r4,1
						data_set[i] = message->buf[i];
    8318:	1880000d 	sth	r2,0(r3)

				data_set = (unsigned short int *)malloc(sizeof(unsigned short int) * message->buf_size);
				unsigned short int SIZE = message->buf_size;

				if (SIZE > BUF_SIZE) {
					for (i = 0; i < BUF_SIZE; i++) {
    831c:	18c00084 	addi	r3,r3,2
    8320:	21800a26 	beq	r4,r6,834c <main+0x188>
    8324:	003ff806 	br	8308 <main+0x144>
						data_set[i] = message->buf[i];
					}
				}
				else {
					for (i = 0; i < SIZE; i++) {
						data_set[i] = message->buf[i];
    8328:	1880018b 	ldhu	r2,6(r3)
					for (i = 0; i < BUF_SIZE; i++) {
						data_set[i] = message->buf[i];
					}
				}
				else {
					for (i = 0; i < SIZE; i++) {
    832c:	29400044 	addi	r5,r5,1
						data_set[i] = message->buf[i];
    8330:	20bfff8d 	sth	r2,-2(r4)
    8334:	2945883a 	add	r2,r5,r5
    8338:	00c00434 	movhi	r3,16
    833c:	10c7883a 	add	r3,r2,r3
					for (i = 0; i < BUF_SIZE; i++) {
						data_set[i] = message->buf[i];
					}
				}
				else {
					for (i = 0; i < SIZE; i++) {
    8340:	98bfffcc 	andi	r2,r19,65535
    8344:	21000084 	addi	r4,r4,2
    8348:	28bff71e 	bne	r5,r2,8328 <main+0x164>
						data_set[i] = message->buf[i];
					}
				}

				while (altera_avalon_mutex_trylock(mutex, value) != LOCK_SUCCESS);
    834c:	04000044 	movi	r16,1
    8350:	8809883a 	mov	r4,r17
    8354:	800b883a 	mov	r5,r16
    8358:	00095300 	call	9530 <altera_avalon_mutex_trylock>
    835c:	103ffb1e 	bne	r2,zero,834c <main+0x188>
				message->flag = CPU1_WAIT_FLAG;
    8360:	00800434 	movhi	r2,16
				altera_avalon_mutex_unlock(mutex);
    8364:	8809883a 	mov	r4,r17
						data_set[i] = message->buf[i];
					}
				}

				while (altera_avalon_mutex_trylock(mutex, value) != LOCK_SUCCESS);
				message->flag = CPU1_WAIT_FLAG;
    8368:	14000005 	stb	r16,0(r2)
				altera_avalon_mutex_unlock(mutex);
    836c:	00094540 	call	9454 <altera_avalon_mutex_unlock>
    8370:	00c00084 	movi	r3,2

				while ((*(char volatile *)(&(message->flag))) != CPU2_WAIT_FLAG);
    8374:	a8800003 	ldbu	r2,0(r21)
    8378:	10803fcc 	andi	r2,r2,255
    837c:	1080201c 	xori	r2,r2,128
    8380:	10bfe004 	addi	r2,r2,-128
    8384:	10fffb1e 	bne	r2,r3,8374 <main+0x1b0>

				if (SIZE > BUF_SIZE) {
    8388:	98ffffcc 	andi	r3,r19,65535
    838c:	0081fe84 	movi	r2,2042
    8390:	10c00b2e 	bgeu	r2,r3,83c0 <main+0x1fc>
    8394:	193e0184 	addi	r4,r3,-2042
    8398:	01400434 	movhi	r5,16
    839c:	0007883a 	mov	r3,zero
    83a0:	00000306 	br	83b0 <main+0x1ec>
					for (i = 0; i < SIZE - BUF_SIZE; i++) {
						data_set[i + BUF_SIZE] = message->buf[i];
    83a4:	1080018b 	ldhu	r2,6(r2)
				altera_avalon_mutex_unlock(mutex);

				while ((*(char volatile *)(&(message->flag))) != CPU2_WAIT_FLAG);

				if (SIZE > BUF_SIZE) {
					for (i = 0; i < SIZE - BUF_SIZE; i++) {
    83a8:	18c00044 	addi	r3,r3,1
						data_set[i + BUF_SIZE] = message->buf[i];
    83ac:	9083fc8d 	sth	r2,4082(r18)
    83b0:	18c5883a 	add	r2,r3,r3
    83b4:	1145883a 	add	r2,r2,r5
				altera_avalon_mutex_unlock(mutex);

				while ((*(char volatile *)(&(message->flag))) != CPU2_WAIT_FLAG);

				if (SIZE > BUF_SIZE) {
					for (i = 0; i < SIZE - BUF_SIZE; i++) {
    83b8:	94800084 	addi	r18,r18,2
    83bc:	193ff91e 	bne	r3,r4,83a4 <main+0x1e0>
						data_set[i + BUF_SIZE] = message->buf[i];
					}
				}


				while (altera_avalon_mutex_trylock(mutex, value) != LOCK_SUCCESS);
    83c0:	04000044 	movi	r16,1
    83c4:	8809883a 	mov	r4,r17
    83c8:	800b883a 	mov	r5,r16
    83cc:	00095300 	call	9530 <altera_avalon_mutex_trylock>
    83d0:	103ffb1e 	bne	r2,zero,83c0 <main+0x1fc>
				message->flag = CPU1_WAIT_FLAG;
    83d4:	00800434 	movhi	r2,16
    83d8:	14000005 	stb	r16,0(r2)
				altera_avalon_mutex_unlock(mutex);
    83dc:	8809883a 	mov	r4,r17
    83e0:	00094540 	call	9454 <altera_avalon_mutex_unlock>
    83e4:	98bfffcc 	andi	r2,r19,65535
    83e8:	141ed83a 	srl	r15,r2,r16
    83ec:	a1c00084 	addi	r7,r20,2
    83f0:	0017883a 	mov	r11,zero
    83f4:	00001e06 	br	8470 <main+0x2ac>



				for (i = 0; i < SIZE / 2; i++) {
					 unsigned short int sub_min = data_set[i];
    83f8:	393fff8b 	ldhu	r4,-2(r7)
    83fc:	3811883a 	mov	r8,r7
    8400:	02400044 	movi	r9,1
    8404:	200b883a 	mov	r5,r4
    8408:	9bbfffcc 	andi	r14,r19,65535
    840c:	00001006 	br	8450 <main+0x28c>
					 unsigned short int sub_max = data_set[i];
					 for (j=i+1; j < SIZE; j++) {
						 if (data_set[j] < sub_min) sub_min = data_set[j];
    8410:	4080000b 	ldhu	r2,0(r8)
						 // detect neighbourhood in subsequence
						 if ((sub_max - sub_min) == (j - i)) {
							 // update starting position and subsequence length
							 if ((sub_length) < (sub_max - sub_min + 1)) {
								 start_pos = i;
								 sub_length = sub_max - sub_min + 1;
    8414:	42000084 	addi	r8,r8,2

				for (i = 0; i < SIZE / 2; i++) {
					 unsigned short int sub_min = data_set[i];
					 unsigned short int sub_max = data_set[i];
					 for (j=i+1; j < SIZE; j++) {
						 if (data_set[j] < sub_min) sub_min = data_set[j];
    8418:	10ffffcc 	andi	r3,r2,65535
    841c:	1980012e 	bgeu	r3,r6,8424 <main+0x260>
    8420:	1009883a 	mov	r4,r2
						 if (data_set[j] > sub_max) sub_max = data_set[j];
						 // detect neighbourhood in subsequence
						 if ((sub_max - sub_min) == (j - i)) {
    8424:	21bfffcc 	andi	r6,r4,65535

				for (i = 0; i < SIZE / 2; i++) {
					 unsigned short int sub_min = data_set[i];
					 unsigned short int sub_max = data_set[i];
					 for (j=i+1; j < SIZE; j++) {
						 if (data_set[j] < sub_min) sub_min = data_set[j];
    8428:	50c0012e 	bgeu	r10,r3,8430 <main+0x26c>
    842c:	100b883a 	mov	r5,r2
						 if (data_set[j] > sub_max) sub_max = data_set[j];
						 // detect neighbourhood in subsequence
						 if ((sub_max - sub_min) == (j - i)) {
    8430:	28bfffcc 	andi	r2,r5,65535
    8434:	1185c83a 	sub	r2,r2,r6
    8438:	1240041e 	bne	r2,r9,844c <main+0x288>
							 // update starting position and subsequence length
							 if ((sub_length) < (sub_max - sub_min + 1)) {
								 start_pos = i;
								 sub_length = sub_max - sub_min + 1;
    843c:	2905c83a 	sub	r2,r5,r4
						 if (data_set[j] < sub_min) sub_min = data_set[j];
						 if (data_set[j] > sub_max) sub_max = data_set[j];
						 // detect neighbourhood in subsequence
						 if ((sub_max - sub_min) == (j - i)) {
							 // update starting position and subsequence length
							 if ((sub_length) < (sub_max - sub_min + 1)) {
    8440:	6b00020e 	bge	r13,r12,844c <main+0x288>
								 start_pos = i;
								 sub_length = sub_max - sub_min + 1;
    8444:	15800044 	addi	r22,r2,1
						 if (data_set[j] < sub_min) sub_min = data_set[j];
						 if (data_set[j] > sub_max) sub_max = data_set[j];
						 // detect neighbourhood in subsequence
						 if ((sub_max - sub_min) == (j - i)) {
							 // update starting position and subsequence length
							 if ((sub_length) < (sub_max - sub_min + 1)) {
    8448:	582f883a 	mov	r23,r11
								 start_pos = i;
								 sub_length = sub_max - sub_min + 1;
    844c:	4a400044 	addi	r9,r9,1


				for (i = 0; i < SIZE / 2; i++) {
					 unsigned short int sub_min = data_set[i];
					 unsigned short int sub_max = data_set[i];
					 for (j=i+1; j < SIZE; j++) {
    8450:	5a45883a 	add	r2,r11,r9
						 if (data_set[j] < sub_min) sub_min = data_set[j];
						 if (data_set[j] > sub_max) sub_max = data_set[j];
						 // detect neighbourhood in subsequence
						 if ((sub_max - sub_min) == (j - i)) {
							 // update starting position and subsequence length
							 if ((sub_length) < (sub_max - sub_min + 1)) {
    8454:	b37fffcc 	andi	r13,r22,65535
    8458:	4b000044 	addi	r12,r9,1

				for (i = 0; i < SIZE / 2; i++) {
					 unsigned short int sub_min = data_set[i];
					 unsigned short int sub_max = data_set[i];
					 for (j=i+1; j < SIZE; j++) {
						 if (data_set[j] < sub_min) sub_min = data_set[j];
    845c:	21bfffcc 	andi	r6,r4,65535
    8460:	2abfffcc 	andi	r10,r5,65535


				for (i = 0; i < SIZE / 2; i++) {
					 unsigned short int sub_min = data_set[i];
					 unsigned short int sub_max = data_set[i];
					 for (j=i+1; j < SIZE; j++) {
    8464:	13bfea16 	blt	r2,r14,8410 <main+0x24c>
    8468:	5ac00044 	addi	r11,r11,1
    846c:	39c00084 	addi	r7,r7,2
				message->flag = CPU1_WAIT_FLAG;
				altera_avalon_mutex_unlock(mutex);



				for (i = 0; i < SIZE / 2; i++) {
    8470:	5bffe116 	blt	r11,r15,83f8 <main+0x234>
//						altera_avalon_mutex_unlock(mutex);


				 }

				while (altera_avalon_mutex_trylock(mutex, value) != LOCK_SUCCESS);
    8474:	04000044 	movi	r16,1
    8478:	8809883a 	mov	r4,r17
    847c:	800b883a 	mov	r5,r16
    8480:	00095300 	call	9530 <altera_avalon_mutex_trylock>
    8484:	103ffb1e 	bne	r2,zero,8474 <main+0x2b0>
				message->cpu2_start = start_pos;
    8488:	00800434 	movhi	r2,16
				message->cpu2_length = sub_length;
				message->flag = CPU1_WAIT_FLAG;
				altera_avalon_mutex_unlock(mutex);
    848c:	8809883a 	mov	r4,r17
				 }

				while (altera_avalon_mutex_trylock(mutex, value) != LOCK_SUCCESS);
				message->cpu2_start = start_pos;
				message->cpu2_length = sub_length;
				message->flag = CPU1_WAIT_FLAG;
    8490:	14000005 	stb	r16,0(r2)


				 }

				while (altera_avalon_mutex_trylock(mutex, value) != LOCK_SUCCESS);
				message->cpu2_start = start_pos;
    8494:	15c3fe8d 	sth	r23,4090(r2)
				message->cpu2_length = sub_length;
    8498:	1583ff0d 	sth	r22,4092(r2)
				message->flag = CPU1_WAIT_FLAG;
				altera_avalon_mutex_unlock(mutex);
    849c:	00094540 	call	9454 <altera_avalon_mutex_unlock>

				free(data_set);
    84a0:	a009883a 	mov	r4,r20
    84a4:	00084dc0 	call	84dc <free>
    84a8:	003f7d06 	br	82a0 <main+0xdc>




	return(0);
}
    84ac:	0005883a 	mov	r2,zero
    84b0:	dfc00917 	ldw	ra,36(sp)
    84b4:	ddc00817 	ldw	r23,32(sp)
    84b8:	dd800717 	ldw	r22,28(sp)
    84bc:	dd400617 	ldw	r21,24(sp)
    84c0:	dd000517 	ldw	r20,20(sp)
    84c4:	dcc00417 	ldw	r19,16(sp)
    84c8:	dc800317 	ldw	r18,12(sp)
    84cc:	dc400217 	ldw	r17,8(sp)
    84d0:	dc000117 	ldw	r16,4(sp)
    84d4:	dec00a04 	addi	sp,sp,40
    84d8:	f800283a 	ret

000084dc <free>:
    84dc:	00800074 	movhi	r2,1
    84e0:	10a81704 	addi	r2,r2,-24484
    84e4:	200b883a 	mov	r5,r4
    84e8:	11000017 	ldw	r4,0(r2)
    84ec:	0008de01 	jmpi	8de0 <_free_r>

000084f0 <malloc>:
    84f0:	00800074 	movhi	r2,1
    84f4:	10a81704 	addi	r2,r2,-24484
    84f8:	200b883a 	mov	r5,r4
    84fc:	11000017 	ldw	r4,0(r2)
    8500:	00085041 	jmpi	8504 <_malloc_r>

00008504 <_malloc_r>:
    8504:	defff604 	addi	sp,sp,-40
    8508:	28c002c4 	addi	r3,r5,11
    850c:	00800584 	movi	r2,22
    8510:	dc800215 	stw	r18,8(sp)
    8514:	dfc00915 	stw	ra,36(sp)
    8518:	df000815 	stw	fp,32(sp)
    851c:	ddc00715 	stw	r23,28(sp)
    8520:	dd800615 	stw	r22,24(sp)
    8524:	dd400515 	stw	r21,20(sp)
    8528:	dd000415 	stw	r20,16(sp)
    852c:	dcc00315 	stw	r19,12(sp)
    8530:	dc400115 	stw	r17,4(sp)
    8534:	dc000015 	stw	r16,0(sp)
    8538:	2025883a 	mov	r18,r4
    853c:	10c01236 	bltu	r2,r3,8588 <_malloc_r+0x84>
    8540:	04400404 	movi	r17,16
    8544:	8940142e 	bgeu	r17,r5,8598 <_malloc_r+0x94>
    8548:	00800304 	movi	r2,12
    854c:	0007883a 	mov	r3,zero
    8550:	90800015 	stw	r2,0(r18)
    8554:	1805883a 	mov	r2,r3
    8558:	dfc00917 	ldw	ra,36(sp)
    855c:	df000817 	ldw	fp,32(sp)
    8560:	ddc00717 	ldw	r23,28(sp)
    8564:	dd800617 	ldw	r22,24(sp)
    8568:	dd400517 	ldw	r21,20(sp)
    856c:	dd000417 	ldw	r20,16(sp)
    8570:	dcc00317 	ldw	r19,12(sp)
    8574:	dc800217 	ldw	r18,8(sp)
    8578:	dc400117 	ldw	r17,4(sp)
    857c:	dc000017 	ldw	r16,0(sp)
    8580:	dec00a04 	addi	sp,sp,40
    8584:	f800283a 	ret
    8588:	00bffe04 	movi	r2,-8
    858c:	18a2703a 	and	r17,r3,r2
    8590:	883fed16 	blt	r17,zero,8548 <_malloc_r+0x44>
    8594:	897fec36 	bltu	r17,r5,8548 <_malloc_r+0x44>
    8598:	9009883a 	mov	r4,r18
    859c:	000924c0 	call	924c <__malloc_lock>
    85a0:	00807dc4 	movi	r2,503
    85a4:	14402b2e 	bgeu	r2,r17,8654 <_malloc_r+0x150>
    85a8:	8806d27a 	srli	r3,r17,9
    85ac:	18003f1e 	bne	r3,zero,86ac <_malloc_r+0x1a8>
    85b0:	880cd0fa 	srli	r6,r17,3
    85b4:	300490fa 	slli	r2,r6,3
    85b8:	02c00074 	movhi	r11,1
    85bc:	5ae6b604 	addi	r11,r11,-25896
    85c0:	12cb883a 	add	r5,r2,r11
    85c4:	2c000317 	ldw	r16,12(r5)
    85c8:	580f883a 	mov	r7,r11
    85cc:	2c00041e 	bne	r5,r16,85e0 <_malloc_r+0xdc>
    85d0:	00000a06 	br	85fc <_malloc_r+0xf8>
    85d4:	1800860e 	bge	r3,zero,87f0 <_malloc_r+0x2ec>
    85d8:	84000317 	ldw	r16,12(r16)
    85dc:	2c000726 	beq	r5,r16,85fc <_malloc_r+0xf8>
    85e0:	80800117 	ldw	r2,4(r16)
    85e4:	00ffff04 	movi	r3,-4
    85e8:	10c8703a 	and	r4,r2,r3
    85ec:	2447c83a 	sub	r3,r4,r17
    85f0:	008003c4 	movi	r2,15
    85f4:	10fff70e 	bge	r2,r3,85d4 <_malloc_r+0xd0>
    85f8:	31bfffc4 	addi	r6,r6,-1
    85fc:	32400044 	addi	r9,r6,1
    8600:	02800074 	movhi	r10,1
    8604:	52a6b804 	addi	r10,r10,-25888
    8608:	54000217 	ldw	r16,8(r10)
    860c:	8280a026 	beq	r16,r10,8890 <_malloc_r+0x38c>
    8610:	80800117 	ldw	r2,4(r16)
    8614:	00ffff04 	movi	r3,-4
    8618:	10ca703a 	and	r5,r2,r3
    861c:	2c4dc83a 	sub	r6,r5,r17
    8620:	008003c4 	movi	r2,15
    8624:	11808316 	blt	r2,r6,8834 <_malloc_r+0x330>
    8628:	52800315 	stw	r10,12(r10)
    862c:	52800215 	stw	r10,8(r10)
    8630:	30002916 	blt	r6,zero,86d8 <_malloc_r+0x1d4>
    8634:	8147883a 	add	r3,r16,r5
    8638:	18800117 	ldw	r2,4(r3)
    863c:	9009883a 	mov	r4,r18
    8640:	10800054 	ori	r2,r2,1
    8644:	18800115 	stw	r2,4(r3)
    8648:	00092500 	call	9250 <__malloc_unlock>
    864c:	80c00204 	addi	r3,r16,8
    8650:	003fc006 	br	8554 <_malloc_r+0x50>
    8654:	02c00074 	movhi	r11,1
    8658:	5ae6b604 	addi	r11,r11,-25896
    865c:	8ac5883a 	add	r2,r17,r11
    8660:	14000317 	ldw	r16,12(r2)
    8664:	580f883a 	mov	r7,r11
    8668:	8806d0fa 	srli	r3,r17,3
    866c:	14006c26 	beq	r2,r16,8820 <_malloc_r+0x31c>
    8670:	80c00117 	ldw	r3,4(r16)
    8674:	00bfff04 	movi	r2,-4
    8678:	81800317 	ldw	r6,12(r16)
    867c:	1886703a 	and	r3,r3,r2
    8680:	80c7883a 	add	r3,r16,r3
    8684:	18800117 	ldw	r2,4(r3)
    8688:	81400217 	ldw	r5,8(r16)
    868c:	9009883a 	mov	r4,r18
    8690:	10800054 	ori	r2,r2,1
    8694:	18800115 	stw	r2,4(r3)
    8698:	31400215 	stw	r5,8(r6)
    869c:	29800315 	stw	r6,12(r5)
    86a0:	00092500 	call	9250 <__malloc_unlock>
    86a4:	80c00204 	addi	r3,r16,8
    86a8:	003faa06 	br	8554 <_malloc_r+0x50>
    86ac:	00800104 	movi	r2,4
    86b0:	10c0052e 	bgeu	r2,r3,86c8 <_malloc_r+0x1c4>
    86b4:	00800504 	movi	r2,20
    86b8:	10c07836 	bltu	r2,r3,889c <_malloc_r+0x398>
    86bc:	198016c4 	addi	r6,r3,91
    86c0:	300490fa 	slli	r2,r6,3
    86c4:	003fbc06 	br	85b8 <_malloc_r+0xb4>
    86c8:	8804d1ba 	srli	r2,r17,6
    86cc:	11800e04 	addi	r6,r2,56
    86d0:	300490fa 	slli	r2,r6,3
    86d4:	003fb806 	br	85b8 <_malloc_r+0xb4>
    86d8:	00807fc4 	movi	r2,511
    86dc:	1140bb36 	bltu	r2,r5,89cc <_malloc_r+0x4c8>
    86e0:	2806d0fa 	srli	r3,r5,3
    86e4:	573ffe04 	addi	fp,r10,-8
    86e8:	00800044 	movi	r2,1
    86ec:	180890fa 	slli	r4,r3,3
    86f0:	1807d0ba 	srai	r3,r3,2
    86f4:	e1c00117 	ldw	r7,4(fp)
    86f8:	5909883a 	add	r4,r11,r4
    86fc:	21400217 	ldw	r5,8(r4)
    8700:	10c4983a 	sll	r2,r2,r3
    8704:	81000315 	stw	r4,12(r16)
    8708:	81400215 	stw	r5,8(r16)
    870c:	388eb03a 	or	r7,r7,r2
    8710:	2c000315 	stw	r16,12(r5)
    8714:	24000215 	stw	r16,8(r4)
    8718:	e1c00115 	stw	r7,4(fp)
    871c:	4807883a 	mov	r3,r9
    8720:	4800cd16 	blt	r9,zero,8a58 <_malloc_r+0x554>
    8724:	1807d0ba 	srai	r3,r3,2
    8728:	00800044 	movi	r2,1
    872c:	10c8983a 	sll	r4,r2,r3
    8730:	39004436 	bltu	r7,r4,8844 <_malloc_r+0x340>
    8734:	21c4703a 	and	r2,r4,r7
    8738:	10000a1e 	bne	r2,zero,8764 <_malloc_r+0x260>
    873c:	2109883a 	add	r4,r4,r4
    8740:	00bfff04 	movi	r2,-4
    8744:	4884703a 	and	r2,r9,r2
    8748:	3906703a 	and	r3,r7,r4
    874c:	12400104 	addi	r9,r2,4
    8750:	1800041e 	bne	r3,zero,8764 <_malloc_r+0x260>
    8754:	2109883a 	add	r4,r4,r4
    8758:	3904703a 	and	r2,r7,r4
    875c:	4a400104 	addi	r9,r9,4
    8760:	103ffc26 	beq	r2,zero,8754 <_malloc_r+0x250>
    8764:	480490fa 	slli	r2,r9,3
    8768:	4819883a 	mov	r12,r9
    876c:	023fff04 	movi	r8,-4
    8770:	589b883a 	add	r13,r11,r2
    8774:	6807883a 	mov	r3,r13
    8778:	014003c4 	movi	r5,15
    877c:	1c000317 	ldw	r16,12(r3)
    8780:	1c00041e 	bne	r3,r16,8794 <_malloc_r+0x290>
    8784:	0000a706 	br	8a24 <_malloc_r+0x520>
    8788:	3000ab0e 	bge	r6,zero,8a38 <_malloc_r+0x534>
    878c:	84000317 	ldw	r16,12(r16)
    8790:	1c00a426 	beq	r3,r16,8a24 <_malloc_r+0x520>
    8794:	80800117 	ldw	r2,4(r16)
    8798:	1204703a 	and	r2,r2,r8
    879c:	144dc83a 	sub	r6,r2,r17
    87a0:	29bff90e 	bge	r5,r6,8788 <_malloc_r+0x284>
    87a4:	81000317 	ldw	r4,12(r16)
    87a8:	80c00217 	ldw	r3,8(r16)
    87ac:	89400054 	ori	r5,r17,1
    87b0:	8445883a 	add	r2,r16,r17
    87b4:	20c00215 	stw	r3,8(r4)
    87b8:	19000315 	stw	r4,12(r3)
    87bc:	81400115 	stw	r5,4(r16)
    87c0:	1187883a 	add	r3,r2,r6
    87c4:	31000054 	ori	r4,r6,1
    87c8:	50800315 	stw	r2,12(r10)
    87cc:	50800215 	stw	r2,8(r10)
    87d0:	19800015 	stw	r6,0(r3)
    87d4:	11000115 	stw	r4,4(r2)
    87d8:	12800215 	stw	r10,8(r2)
    87dc:	12800315 	stw	r10,12(r2)
    87e0:	9009883a 	mov	r4,r18
    87e4:	00092500 	call	9250 <__malloc_unlock>
    87e8:	80c00204 	addi	r3,r16,8
    87ec:	003f5906 	br	8554 <_malloc_r+0x50>
    87f0:	8109883a 	add	r4,r16,r4
    87f4:	20800117 	ldw	r2,4(r4)
    87f8:	80c00217 	ldw	r3,8(r16)
    87fc:	81400317 	ldw	r5,12(r16)
    8800:	10800054 	ori	r2,r2,1
    8804:	20800115 	stw	r2,4(r4)
    8808:	28c00215 	stw	r3,8(r5)
    880c:	19400315 	stw	r5,12(r3)
    8810:	9009883a 	mov	r4,r18
    8814:	00092500 	call	9250 <__malloc_unlock>
    8818:	80c00204 	addi	r3,r16,8
    881c:	003f4d06 	br	8554 <_malloc_r+0x50>
    8820:	80800204 	addi	r2,r16,8
    8824:	14000317 	ldw	r16,12(r2)
    8828:	143f911e 	bne	r2,r16,8670 <_malloc_r+0x16c>
    882c:	1a400084 	addi	r9,r3,2
    8830:	003f7306 	br	8600 <_malloc_r+0xfc>
    8834:	88c00054 	ori	r3,r17,1
    8838:	8445883a 	add	r2,r16,r17
    883c:	80c00115 	stw	r3,4(r16)
    8840:	003fdf06 	br	87c0 <_malloc_r+0x2bc>
    8844:	e4000217 	ldw	r16,8(fp)
    8848:	00bfff04 	movi	r2,-4
    884c:	80c00117 	ldw	r3,4(r16)
    8850:	802d883a 	mov	r22,r16
    8854:	18aa703a 	and	r21,r3,r2
    8858:	ac401636 	bltu	r21,r17,88b4 <_malloc_r+0x3b0>
    885c:	ac49c83a 	sub	r4,r21,r17
    8860:	008003c4 	movi	r2,15
    8864:	1100130e 	bge	r2,r4,88b4 <_malloc_r+0x3b0>
    8868:	88800054 	ori	r2,r17,1
    886c:	8447883a 	add	r3,r16,r17
    8870:	80800115 	stw	r2,4(r16)
    8874:	20800054 	ori	r2,r4,1
    8878:	18800115 	stw	r2,4(r3)
    887c:	e0c00215 	stw	r3,8(fp)
    8880:	9009883a 	mov	r4,r18
    8884:	00092500 	call	9250 <__malloc_unlock>
    8888:	80c00204 	addi	r3,r16,8
    888c:	003f3106 	br	8554 <_malloc_r+0x50>
    8890:	39c00117 	ldw	r7,4(r7)
    8894:	573ffe04 	addi	fp,r10,-8
    8898:	003fa006 	br	871c <_malloc_r+0x218>
    889c:	00801504 	movi	r2,84
    88a0:	10c06736 	bltu	r2,r3,8a40 <_malloc_r+0x53c>
    88a4:	8804d33a 	srli	r2,r17,12
    88a8:	11801b84 	addi	r6,r2,110
    88ac:	300490fa 	slli	r2,r6,3
    88b0:	003f4106 	br	85b8 <_malloc_r+0xb4>
    88b4:	d0a17f17 	ldw	r2,-31236(gp)
    88b8:	d0e00117 	ldw	r3,-32764(gp)
    88bc:	053fffc4 	movi	r20,-1
    88c0:	10800404 	addi	r2,r2,16
    88c4:	88a7883a 	add	r19,r17,r2
    88c8:	1d000326 	beq	r3,r20,88d8 <_malloc_r+0x3d4>
    88cc:	98c01fc4 	addi	r3,r19,127
    88d0:	00bfe004 	movi	r2,-128
    88d4:	18a6703a 	and	r19,r3,r2
    88d8:	9009883a 	mov	r4,r18
    88dc:	980b883a 	mov	r5,r19
    88e0:	0008c440 	call	8c44 <_sbrk_r>
    88e4:	1009883a 	mov	r4,r2
    88e8:	15000426 	beq	r2,r20,88fc <_malloc_r+0x3f8>
    88ec:	854b883a 	add	r5,r16,r21
    88f0:	1029883a 	mov	r20,r2
    88f4:	11405a2e 	bgeu	r2,r5,8a60 <_malloc_r+0x55c>
    88f8:	87000c26 	beq	r16,fp,892c <_malloc_r+0x428>
    88fc:	e4000217 	ldw	r16,8(fp)
    8900:	80c00117 	ldw	r3,4(r16)
    8904:	00bfff04 	movi	r2,-4
    8908:	1884703a 	and	r2,r3,r2
    890c:	14400336 	bltu	r2,r17,891c <_malloc_r+0x418>
    8910:	1449c83a 	sub	r4,r2,r17
    8914:	008003c4 	movi	r2,15
    8918:	113fd316 	blt	r2,r4,8868 <_malloc_r+0x364>
    891c:	9009883a 	mov	r4,r18
    8920:	00092500 	call	9250 <__malloc_unlock>
    8924:	0007883a 	mov	r3,zero
    8928:	003f0a06 	br	8554 <_malloc_r+0x50>
    892c:	05c00074 	movhi	r23,1
    8930:	bde99e04 	addi	r23,r23,-22920
    8934:	b8800017 	ldw	r2,0(r23)
    8938:	988d883a 	add	r6,r19,r2
    893c:	b9800015 	stw	r6,0(r23)
    8940:	d0e00117 	ldw	r3,-32764(gp)
    8944:	00bfffc4 	movi	r2,-1
    8948:	18808e26 	beq	r3,r2,8b84 <_malloc_r+0x680>
    894c:	2145c83a 	sub	r2,r4,r5
    8950:	3085883a 	add	r2,r6,r2
    8954:	b8800015 	stw	r2,0(r23)
    8958:	20c001cc 	andi	r3,r4,7
    895c:	18005f1e 	bne	r3,zero,8adc <_malloc_r+0x5d8>
    8960:	000b883a 	mov	r5,zero
    8964:	a4c5883a 	add	r2,r20,r19
    8968:	10801fcc 	andi	r2,r2,127
    896c:	00c02004 	movi	r3,128
    8970:	1887c83a 	sub	r3,r3,r2
    8974:	28e7883a 	add	r19,r5,r3
    8978:	9009883a 	mov	r4,r18
    897c:	980b883a 	mov	r5,r19
    8980:	0008c440 	call	8c44 <_sbrk_r>
    8984:	1007883a 	mov	r3,r2
    8988:	00bfffc4 	movi	r2,-1
    898c:	18807a26 	beq	r3,r2,8b78 <_malloc_r+0x674>
    8990:	1d05c83a 	sub	r2,r3,r20
    8994:	9885883a 	add	r2,r19,r2
    8998:	10c00054 	ori	r3,r2,1
    899c:	b8800017 	ldw	r2,0(r23)
    89a0:	a021883a 	mov	r16,r20
    89a4:	a0c00115 	stw	r3,4(r20)
    89a8:	9885883a 	add	r2,r19,r2
    89ac:	b8800015 	stw	r2,0(r23)
    89b0:	e5000215 	stw	r20,8(fp)
    89b4:	b7003626 	beq	r22,fp,8a90 <_malloc_r+0x58c>
    89b8:	018003c4 	movi	r6,15
    89bc:	35404b36 	bltu	r6,r21,8aec <_malloc_r+0x5e8>
    89c0:	00800044 	movi	r2,1
    89c4:	a0800115 	stw	r2,4(r20)
    89c8:	003fcd06 	br	8900 <_malloc_r+0x3fc>
    89cc:	2808d27a 	srli	r4,r5,9
    89d0:	2000371e 	bne	r4,zero,8ab0 <_malloc_r+0x5ac>
    89d4:	2808d0fa 	srli	r4,r5,3
    89d8:	200690fa 	slli	r3,r4,3
    89dc:	58d1883a 	add	r8,r11,r3
    89e0:	41800217 	ldw	r6,8(r8)
    89e4:	41805b26 	beq	r8,r6,8b54 <_malloc_r+0x650>
    89e8:	30800117 	ldw	r2,4(r6)
    89ec:	00ffff04 	movi	r3,-4
    89f0:	10c4703a 	and	r2,r2,r3
    89f4:	2880022e 	bgeu	r5,r2,8a00 <_malloc_r+0x4fc>
    89f8:	31800217 	ldw	r6,8(r6)
    89fc:	41bffa1e 	bne	r8,r6,89e8 <_malloc_r+0x4e4>
    8a00:	32000317 	ldw	r8,12(r6)
    8a04:	39c00117 	ldw	r7,4(r7)
    8a08:	82000315 	stw	r8,12(r16)
    8a0c:	81800215 	stw	r6,8(r16)
    8a10:	07000074 	movhi	fp,1
    8a14:	e726b604 	addi	fp,fp,-25896
    8a18:	34000315 	stw	r16,12(r6)
    8a1c:	44000215 	stw	r16,8(r8)
    8a20:	003f3e06 	br	871c <_malloc_r+0x218>
    8a24:	63000044 	addi	r12,r12,1
    8a28:	608000cc 	andi	r2,r12,3
    8a2c:	10005d26 	beq	r2,zero,8ba4 <_malloc_r+0x6a0>
    8a30:	18c00204 	addi	r3,r3,8
    8a34:	003f5106 	br	877c <_malloc_r+0x278>
    8a38:	8089883a 	add	r4,r16,r2
    8a3c:	003f6d06 	br	87f4 <_malloc_r+0x2f0>
    8a40:	00805504 	movi	r2,340
    8a44:	10c02036 	bltu	r2,r3,8ac8 <_malloc_r+0x5c4>
    8a48:	8804d3fa 	srli	r2,r17,15
    8a4c:	11801dc4 	addi	r6,r2,119
    8a50:	300490fa 	slli	r2,r6,3
    8a54:	003ed806 	br	85b8 <_malloc_r+0xb4>
    8a58:	48c000c4 	addi	r3,r9,3
    8a5c:	003f3106 	br	8724 <_malloc_r+0x220>
    8a60:	05c00074 	movhi	r23,1
    8a64:	bde99e04 	addi	r23,r23,-22920
    8a68:	b8800017 	ldw	r2,0(r23)
    8a6c:	988d883a 	add	r6,r19,r2
    8a70:	b9800015 	stw	r6,0(r23)
    8a74:	293fb21e 	bne	r5,r4,8940 <_malloc_r+0x43c>
    8a78:	20801fcc 	andi	r2,r4,127
    8a7c:	103fb01e 	bne	r2,zero,8940 <_malloc_r+0x43c>
    8a80:	e4000217 	ldw	r16,8(fp)
    8a84:	9d45883a 	add	r2,r19,r21
    8a88:	10800054 	ori	r2,r2,1
    8a8c:	80800115 	stw	r2,4(r16)
    8a90:	b8c00017 	ldw	r3,0(r23)
    8a94:	d0a18017 	ldw	r2,-31232(gp)
    8a98:	10c0012e 	bgeu	r2,r3,8aa0 <_malloc_r+0x59c>
    8a9c:	d0e18015 	stw	r3,-31232(gp)
    8aa0:	d0a18117 	ldw	r2,-31228(gp)
    8aa4:	10ff962e 	bgeu	r2,r3,8900 <_malloc_r+0x3fc>
    8aa8:	d0e18115 	stw	r3,-31228(gp)
    8aac:	003f9406 	br	8900 <_malloc_r+0x3fc>
    8ab0:	00800104 	movi	r2,4
    8ab4:	11001e36 	bltu	r2,r4,8b30 <_malloc_r+0x62c>
    8ab8:	2804d1ba 	srli	r2,r5,6
    8abc:	11000e04 	addi	r4,r2,56
    8ac0:	200690fa 	slli	r3,r4,3
    8ac4:	003fc506 	br	89dc <_malloc_r+0x4d8>
    8ac8:	00815504 	movi	r2,1364
    8acc:	10c01d2e 	bgeu	r2,r3,8b44 <_malloc_r+0x640>
    8ad0:	01801f84 	movi	r6,126
    8ad4:	0080fc04 	movi	r2,1008
    8ad8:	003eb706 	br	85b8 <_malloc_r+0xb4>
    8adc:	00800204 	movi	r2,8
    8ae0:	10cbc83a 	sub	r5,r2,r3
    8ae4:	2169883a 	add	r20,r4,r5
    8ae8:	003f9e06 	br	8964 <_malloc_r+0x460>
    8aec:	00bffe04 	movi	r2,-8
    8af0:	a93ffd04 	addi	r4,r21,-12
    8af4:	2088703a 	and	r4,r4,r2
    8af8:	b10b883a 	add	r5,r22,r4
    8afc:	00c00144 	movi	r3,5
    8b00:	28c00215 	stw	r3,8(r5)
    8b04:	28c00115 	stw	r3,4(r5)
    8b08:	b0800117 	ldw	r2,4(r22)
    8b0c:	1080004c 	andi	r2,r2,1
    8b10:	2084b03a 	or	r2,r4,r2
    8b14:	b0800115 	stw	r2,4(r22)
    8b18:	313fdd2e 	bgeu	r6,r4,8a90 <_malloc_r+0x58c>
    8b1c:	b1400204 	addi	r5,r22,8
    8b20:	9009883a 	mov	r4,r18
    8b24:	0008de00 	call	8de0 <_free_r>
    8b28:	e4000217 	ldw	r16,8(fp)
    8b2c:	003fd806 	br	8a90 <_malloc_r+0x58c>
    8b30:	00800504 	movi	r2,20
    8b34:	11001536 	bltu	r2,r4,8b8c <_malloc_r+0x688>
    8b38:	210016c4 	addi	r4,r4,91
    8b3c:	200690fa 	slli	r3,r4,3
    8b40:	003fa606 	br	89dc <_malloc_r+0x4d8>
    8b44:	8804d4ba 	srli	r2,r17,18
    8b48:	11801f04 	addi	r6,r2,124
    8b4c:	300490fa 	slli	r2,r6,3
    8b50:	003e9906 	br	85b8 <_malloc_r+0xb4>
    8b54:	2009d0ba 	srai	r4,r4,2
    8b58:	01400074 	movhi	r5,1
    8b5c:	2966b604 	addi	r5,r5,-25896
    8b60:	00c00044 	movi	r3,1
    8b64:	28800117 	ldw	r2,4(r5)
    8b68:	1906983a 	sll	r3,r3,r4
    8b6c:	10c4b03a 	or	r2,r2,r3
    8b70:	28800115 	stw	r2,4(r5)
    8b74:	003fa306 	br	8a04 <_malloc_r+0x500>
    8b78:	0027883a 	mov	r19,zero
    8b7c:	00c00044 	movi	r3,1
    8b80:	003f8606 	br	899c <_malloc_r+0x498>
    8b84:	d1200115 	stw	r4,-32764(gp)
    8b88:	003f7306 	br	8958 <_malloc_r+0x454>
    8b8c:	00801504 	movi	r2,84
    8b90:	11001936 	bltu	r2,r4,8bf8 <_malloc_r+0x6f4>
    8b94:	2804d33a 	srli	r2,r5,12
    8b98:	11001b84 	addi	r4,r2,110
    8b9c:	200690fa 	slli	r3,r4,3
    8ba0:	003f8e06 	br	89dc <_malloc_r+0x4d8>
    8ba4:	480b883a 	mov	r5,r9
    8ba8:	6807883a 	mov	r3,r13
    8bac:	288000cc 	andi	r2,r5,3
    8bb0:	18fffe04 	addi	r3,r3,-8
    8bb4:	297fffc4 	addi	r5,r5,-1
    8bb8:	10001526 	beq	r2,zero,8c10 <_malloc_r+0x70c>
    8bbc:	18800217 	ldw	r2,8(r3)
    8bc0:	10fffa26 	beq	r2,r3,8bac <_malloc_r+0x6a8>
    8bc4:	2109883a 	add	r4,r4,r4
    8bc8:	393f1e36 	bltu	r7,r4,8844 <_malloc_r+0x340>
    8bcc:	203f1d26 	beq	r4,zero,8844 <_malloc_r+0x340>
    8bd0:	21c4703a 	and	r2,r4,r7
    8bd4:	10000226 	beq	r2,zero,8be0 <_malloc_r+0x6dc>
    8bd8:	6013883a 	mov	r9,r12
    8bdc:	003ee106 	br	8764 <_malloc_r+0x260>
    8be0:	2109883a 	add	r4,r4,r4
    8be4:	3904703a 	and	r2,r7,r4
    8be8:	63000104 	addi	r12,r12,4
    8bec:	103ffc26 	beq	r2,zero,8be0 <_malloc_r+0x6dc>
    8bf0:	6013883a 	mov	r9,r12
    8bf4:	003edb06 	br	8764 <_malloc_r+0x260>
    8bf8:	00805504 	movi	r2,340
    8bfc:	11000836 	bltu	r2,r4,8c20 <_malloc_r+0x71c>
    8c00:	2804d3fa 	srli	r2,r5,15
    8c04:	11001dc4 	addi	r4,r2,119
    8c08:	200690fa 	slli	r3,r4,3
    8c0c:	003f7306 	br	89dc <_malloc_r+0x4d8>
    8c10:	0104303a 	nor	r2,zero,r4
    8c14:	388e703a 	and	r7,r7,r2
    8c18:	e1c00115 	stw	r7,4(fp)
    8c1c:	003fe906 	br	8bc4 <_malloc_r+0x6c0>
    8c20:	00815504 	movi	r2,1364
    8c24:	1100032e 	bgeu	r2,r4,8c34 <_malloc_r+0x730>
    8c28:	01001f84 	movi	r4,126
    8c2c:	00c0fc04 	movi	r3,1008
    8c30:	003f6a06 	br	89dc <_malloc_r+0x4d8>
    8c34:	2804d4ba 	srli	r2,r5,18
    8c38:	11001f04 	addi	r4,r2,124
    8c3c:	200690fa 	slli	r3,r4,3
    8c40:	003f6606 	br	89dc <_malloc_r+0x4d8>

00008c44 <_sbrk_r>:
    8c44:	defffd04 	addi	sp,sp,-12
    8c48:	dc000015 	stw	r16,0(sp)
    8c4c:	04000074 	movhi	r16,1
    8c50:	84299704 	addi	r16,r16,-22948
    8c54:	dc400115 	stw	r17,4(sp)
    8c58:	80000015 	stw	zero,0(r16)
    8c5c:	2023883a 	mov	r17,r4
    8c60:	2809883a 	mov	r4,r5
    8c64:	dfc00215 	stw	ra,8(sp)
    8c68:	00092540 	call	9254 <sbrk>
    8c6c:	1007883a 	mov	r3,r2
    8c70:	00bfffc4 	movi	r2,-1
    8c74:	18800626 	beq	r3,r2,8c90 <_sbrk_r+0x4c>
    8c78:	1805883a 	mov	r2,r3
    8c7c:	dfc00217 	ldw	ra,8(sp)
    8c80:	dc400117 	ldw	r17,4(sp)
    8c84:	dc000017 	ldw	r16,0(sp)
    8c88:	dec00304 	addi	sp,sp,12
    8c8c:	f800283a 	ret
    8c90:	80800017 	ldw	r2,0(r16)
    8c94:	103ff826 	beq	r2,zero,8c78 <_sbrk_r+0x34>
    8c98:	88800015 	stw	r2,0(r17)
    8c9c:	1805883a 	mov	r2,r3
    8ca0:	dfc00217 	ldw	ra,8(sp)
    8ca4:	dc400117 	ldw	r17,4(sp)
    8ca8:	dc000017 	ldw	r16,0(sp)
    8cac:	dec00304 	addi	sp,sp,12
    8cb0:	f800283a 	ret

00008cb4 <_malloc_trim_r>:
    8cb4:	defffb04 	addi	sp,sp,-20
    8cb8:	dcc00315 	stw	r19,12(sp)
    8cbc:	04c00074 	movhi	r19,1
    8cc0:	9ce6b604 	addi	r19,r19,-25896
    8cc4:	dc800215 	stw	r18,8(sp)
    8cc8:	dc400115 	stw	r17,4(sp)
    8ccc:	dc000015 	stw	r16,0(sp)
    8cd0:	2823883a 	mov	r17,r5
    8cd4:	2025883a 	mov	r18,r4
    8cd8:	dfc00415 	stw	ra,16(sp)
    8cdc:	000924c0 	call	924c <__malloc_lock>
    8ce0:	98800217 	ldw	r2,8(r19)
    8ce4:	9009883a 	mov	r4,r18
    8ce8:	000b883a 	mov	r5,zero
    8cec:	10c00117 	ldw	r3,4(r2)
    8cf0:	00bfff04 	movi	r2,-4
    8cf4:	18a0703a 	and	r16,r3,r2
    8cf8:	8463c83a 	sub	r17,r16,r17
    8cfc:	8c401bc4 	addi	r17,r17,111
    8d00:	8822d1fa 	srli	r17,r17,7
    8d04:	00801fc4 	movi	r2,127
    8d08:	8c7fffc4 	addi	r17,r17,-1
    8d0c:	882291fa 	slli	r17,r17,7
    8d10:	1440060e 	bge	r2,r17,8d2c <_malloc_trim_r+0x78>
    8d14:	0008c440 	call	8c44 <_sbrk_r>
    8d18:	98c00217 	ldw	r3,8(r19)
    8d1c:	9009883a 	mov	r4,r18
    8d20:	044bc83a 	sub	r5,zero,r17
    8d24:	80c7883a 	add	r3,r16,r3
    8d28:	10c00926 	beq	r2,r3,8d50 <_malloc_trim_r+0x9c>
    8d2c:	00092500 	call	9250 <__malloc_unlock>
    8d30:	0005883a 	mov	r2,zero
    8d34:	dfc00417 	ldw	ra,16(sp)
    8d38:	dcc00317 	ldw	r19,12(sp)
    8d3c:	dc800217 	ldw	r18,8(sp)
    8d40:	dc400117 	ldw	r17,4(sp)
    8d44:	dc000017 	ldw	r16,0(sp)
    8d48:	dec00504 	addi	sp,sp,20
    8d4c:	f800283a 	ret
    8d50:	9009883a 	mov	r4,r18
    8d54:	0008c440 	call	8c44 <_sbrk_r>
    8d58:	844dc83a 	sub	r6,r16,r17
    8d5c:	00ffffc4 	movi	r3,-1
    8d60:	9009883a 	mov	r4,r18
    8d64:	000b883a 	mov	r5,zero
    8d68:	01c00074 	movhi	r7,1
    8d6c:	39e99e04 	addi	r7,r7,-22920
    8d70:	31800054 	ori	r6,r6,1
    8d74:	10c00926 	beq	r2,r3,8d9c <_malloc_trim_r+0xe8>
    8d78:	38800017 	ldw	r2,0(r7)
    8d7c:	98c00217 	ldw	r3,8(r19)
    8d80:	9009883a 	mov	r4,r18
    8d84:	1445c83a 	sub	r2,r2,r17
    8d88:	38800015 	stw	r2,0(r7)
    8d8c:	19800115 	stw	r6,4(r3)
    8d90:	00092500 	call	9250 <__malloc_unlock>
    8d94:	00800044 	movi	r2,1
    8d98:	003fe606 	br	8d34 <_malloc_trim_r+0x80>
    8d9c:	0008c440 	call	8c44 <_sbrk_r>
    8da0:	99800217 	ldw	r6,8(r19)
    8da4:	100f883a 	mov	r7,r2
    8da8:	9009883a 	mov	r4,r18
    8dac:	1187c83a 	sub	r3,r2,r6
    8db0:	008003c4 	movi	r2,15
    8db4:	19400054 	ori	r5,r3,1
    8db8:	10ffdc0e 	bge	r2,r3,8d2c <_malloc_trim_r+0x78>
    8dbc:	00800074 	movhi	r2,1
    8dc0:	10a81604 	addi	r2,r2,-24488
    8dc4:	10c00017 	ldw	r3,0(r2)
    8dc8:	00800074 	movhi	r2,1
    8dcc:	10a99e04 	addi	r2,r2,-22920
    8dd0:	31400115 	stw	r5,4(r6)
    8dd4:	38c7c83a 	sub	r3,r7,r3
    8dd8:	10c00015 	stw	r3,0(r2)
    8ddc:	003fd306 	br	8d2c <_malloc_trim_r+0x78>

00008de0 <_free_r>:
    8de0:	defffd04 	addi	sp,sp,-12
    8de4:	dc400115 	stw	r17,4(sp)
    8de8:	dc000015 	stw	r16,0(sp)
    8dec:	dfc00215 	stw	ra,8(sp)
    8df0:	2821883a 	mov	r16,r5
    8df4:	2023883a 	mov	r17,r4
    8df8:	28005a26 	beq	r5,zero,8f64 <_free_r+0x184>
    8dfc:	000924c0 	call	924c <__malloc_lock>
    8e00:	823ffe04 	addi	r8,r16,-8
    8e04:	41400117 	ldw	r5,4(r8)
    8e08:	00bfff84 	movi	r2,-2
    8e0c:	02800074 	movhi	r10,1
    8e10:	52a6b604 	addi	r10,r10,-25896
    8e14:	288e703a 	and	r7,r5,r2
    8e18:	41cd883a 	add	r6,r8,r7
    8e1c:	30c00117 	ldw	r3,4(r6)
    8e20:	51000217 	ldw	r4,8(r10)
    8e24:	00bfff04 	movi	r2,-4
    8e28:	1892703a 	and	r9,r3,r2
    8e2c:	5017883a 	mov	r11,r10
    8e30:	31006726 	beq	r6,r4,8fd0 <_free_r+0x1f0>
    8e34:	2880004c 	andi	r2,r5,1
    8e38:	1005003a 	cmpeq	r2,r2,zero
    8e3c:	32400115 	stw	r9,4(r6)
    8e40:	10001a1e 	bne	r2,zero,8eac <_free_r+0xcc>
    8e44:	000b883a 	mov	r5,zero
    8e48:	3247883a 	add	r3,r6,r9
    8e4c:	18800117 	ldw	r2,4(r3)
    8e50:	1080004c 	andi	r2,r2,1
    8e54:	1000231e 	bne	r2,zero,8ee4 <_free_r+0x104>
    8e58:	280ac03a 	cmpne	r5,r5,zero
    8e5c:	3a4f883a 	add	r7,r7,r9
    8e60:	2800451e 	bne	r5,zero,8f78 <_free_r+0x198>
    8e64:	31000217 	ldw	r4,8(r6)
    8e68:	00800074 	movhi	r2,1
    8e6c:	10a6b804 	addi	r2,r2,-25888
    8e70:	20807b26 	beq	r4,r2,9060 <_free_r+0x280>
    8e74:	30800317 	ldw	r2,12(r6)
    8e78:	3a07883a 	add	r3,r7,r8
    8e7c:	19c00015 	stw	r7,0(r3)
    8e80:	11000215 	stw	r4,8(r2)
    8e84:	20800315 	stw	r2,12(r4)
    8e88:	38800054 	ori	r2,r7,1
    8e8c:	40800115 	stw	r2,4(r8)
    8e90:	28001a26 	beq	r5,zero,8efc <_free_r+0x11c>
    8e94:	8809883a 	mov	r4,r17
    8e98:	dfc00217 	ldw	ra,8(sp)
    8e9c:	dc400117 	ldw	r17,4(sp)
    8ea0:	dc000017 	ldw	r16,0(sp)
    8ea4:	dec00304 	addi	sp,sp,12
    8ea8:	00092501 	jmpi	9250 <__malloc_unlock>
    8eac:	80bffe17 	ldw	r2,-8(r16)
    8eb0:	50c00204 	addi	r3,r10,8
    8eb4:	4091c83a 	sub	r8,r8,r2
    8eb8:	41000217 	ldw	r4,8(r8)
    8ebc:	388f883a 	add	r7,r7,r2
    8ec0:	20c06126 	beq	r4,r3,9048 <_free_r+0x268>
    8ec4:	40800317 	ldw	r2,12(r8)
    8ec8:	3247883a 	add	r3,r6,r9
    8ecc:	000b883a 	mov	r5,zero
    8ed0:	11000215 	stw	r4,8(r2)
    8ed4:	20800315 	stw	r2,12(r4)
    8ed8:	18800117 	ldw	r2,4(r3)
    8edc:	1080004c 	andi	r2,r2,1
    8ee0:	103fdd26 	beq	r2,zero,8e58 <_free_r+0x78>
    8ee4:	38800054 	ori	r2,r7,1
    8ee8:	3a07883a 	add	r3,r7,r8
    8eec:	280ac03a 	cmpne	r5,r5,zero
    8ef0:	40800115 	stw	r2,4(r8)
    8ef4:	19c00015 	stw	r7,0(r3)
    8ef8:	283fe61e 	bne	r5,zero,8e94 <_free_r+0xb4>
    8efc:	00807fc4 	movi	r2,511
    8f00:	11c01f2e 	bgeu	r2,r7,8f80 <_free_r+0x1a0>
    8f04:	3806d27a 	srli	r3,r7,9
    8f08:	1800481e 	bne	r3,zero,902c <_free_r+0x24c>
    8f0c:	3804d0fa 	srli	r2,r7,3
    8f10:	100690fa 	slli	r3,r2,3
    8f14:	1acd883a 	add	r6,r3,r11
    8f18:	31400217 	ldw	r5,8(r6)
    8f1c:	31405926 	beq	r6,r5,9084 <_free_r+0x2a4>
    8f20:	28800117 	ldw	r2,4(r5)
    8f24:	00ffff04 	movi	r3,-4
    8f28:	10c4703a 	and	r2,r2,r3
    8f2c:	3880022e 	bgeu	r7,r2,8f38 <_free_r+0x158>
    8f30:	29400217 	ldw	r5,8(r5)
    8f34:	317ffa1e 	bne	r6,r5,8f20 <_free_r+0x140>
    8f38:	29800317 	ldw	r6,12(r5)
    8f3c:	41800315 	stw	r6,12(r8)
    8f40:	41400215 	stw	r5,8(r8)
    8f44:	8809883a 	mov	r4,r17
    8f48:	2a000315 	stw	r8,12(r5)
    8f4c:	32000215 	stw	r8,8(r6)
    8f50:	dfc00217 	ldw	ra,8(sp)
    8f54:	dc400117 	ldw	r17,4(sp)
    8f58:	dc000017 	ldw	r16,0(sp)
    8f5c:	dec00304 	addi	sp,sp,12
    8f60:	00092501 	jmpi	9250 <__malloc_unlock>
    8f64:	dfc00217 	ldw	ra,8(sp)
    8f68:	dc400117 	ldw	r17,4(sp)
    8f6c:	dc000017 	ldw	r16,0(sp)
    8f70:	dec00304 	addi	sp,sp,12
    8f74:	f800283a 	ret
    8f78:	31000217 	ldw	r4,8(r6)
    8f7c:	003fbd06 	br	8e74 <_free_r+0x94>
    8f80:	3806d0fa 	srli	r3,r7,3
    8f84:	00800044 	movi	r2,1
    8f88:	51400117 	ldw	r5,4(r10)
    8f8c:	180890fa 	slli	r4,r3,3
    8f90:	1807d0ba 	srai	r3,r3,2
    8f94:	22c9883a 	add	r4,r4,r11
    8f98:	21800217 	ldw	r6,8(r4)
    8f9c:	10c4983a 	sll	r2,r2,r3
    8fa0:	41000315 	stw	r4,12(r8)
    8fa4:	41800215 	stw	r6,8(r8)
    8fa8:	288ab03a 	or	r5,r5,r2
    8fac:	22000215 	stw	r8,8(r4)
    8fb0:	8809883a 	mov	r4,r17
    8fb4:	51400115 	stw	r5,4(r10)
    8fb8:	32000315 	stw	r8,12(r6)
    8fbc:	dfc00217 	ldw	ra,8(sp)
    8fc0:	dc400117 	ldw	r17,4(sp)
    8fc4:	dc000017 	ldw	r16,0(sp)
    8fc8:	dec00304 	addi	sp,sp,12
    8fcc:	00092501 	jmpi	9250 <__malloc_unlock>
    8fd0:	2880004c 	andi	r2,r5,1
    8fd4:	3a4d883a 	add	r6,r7,r9
    8fd8:	1000071e 	bne	r2,zero,8ff8 <_free_r+0x218>
    8fdc:	80bffe17 	ldw	r2,-8(r16)
    8fe0:	4091c83a 	sub	r8,r8,r2
    8fe4:	41000317 	ldw	r4,12(r8)
    8fe8:	40c00217 	ldw	r3,8(r8)
    8fec:	308d883a 	add	r6,r6,r2
    8ff0:	20c00215 	stw	r3,8(r4)
    8ff4:	19000315 	stw	r4,12(r3)
    8ff8:	00800074 	movhi	r2,1
    8ffc:	10a81504 	addi	r2,r2,-24492
    9000:	11000017 	ldw	r4,0(r2)
    9004:	30c00054 	ori	r3,r6,1
    9008:	52000215 	stw	r8,8(r10)
    900c:	40c00115 	stw	r3,4(r8)
    9010:	313fa036 	bltu	r6,r4,8e94 <_free_r+0xb4>
    9014:	00800074 	movhi	r2,1
    9018:	10a99404 	addi	r2,r2,-22960
    901c:	11400017 	ldw	r5,0(r2)
    9020:	8809883a 	mov	r4,r17
    9024:	0008cb40 	call	8cb4 <_malloc_trim_r>
    9028:	003f9a06 	br	8e94 <_free_r+0xb4>
    902c:	00800104 	movi	r2,4
    9030:	10c0072e 	bgeu	r2,r3,9050 <_free_r+0x270>
    9034:	00800504 	movi	r2,20
    9038:	10c01936 	bltu	r2,r3,90a0 <_free_r+0x2c0>
    903c:	188016c4 	addi	r2,r3,91
    9040:	100690fa 	slli	r3,r2,3
    9044:	003fb306 	br	8f14 <_free_r+0x134>
    9048:	01400044 	movi	r5,1
    904c:	003f7e06 	br	8e48 <_free_r+0x68>
    9050:	3804d1ba 	srli	r2,r7,6
    9054:	10800e04 	addi	r2,r2,56
    9058:	100690fa 	slli	r3,r2,3
    905c:	003fad06 	br	8f14 <_free_r+0x134>
    9060:	22000315 	stw	r8,12(r4)
    9064:	22000215 	stw	r8,8(r4)
    9068:	3a05883a 	add	r2,r7,r8
    906c:	38c00054 	ori	r3,r7,1
    9070:	11c00015 	stw	r7,0(r2)
    9074:	41000215 	stw	r4,8(r8)
    9078:	40c00115 	stw	r3,4(r8)
    907c:	41000315 	stw	r4,12(r8)
    9080:	003f8406 	br	8e94 <_free_r+0xb4>
    9084:	1005d0ba 	srai	r2,r2,2
    9088:	00c00044 	movi	r3,1
    908c:	51000117 	ldw	r4,4(r10)
    9090:	1886983a 	sll	r3,r3,r2
    9094:	20c8b03a 	or	r4,r4,r3
    9098:	51000115 	stw	r4,4(r10)
    909c:	003fa706 	br	8f3c <_free_r+0x15c>
    90a0:	00801504 	movi	r2,84
    90a4:	10c00436 	bltu	r2,r3,90b8 <_free_r+0x2d8>
    90a8:	3804d33a 	srli	r2,r7,12
    90ac:	10801b84 	addi	r2,r2,110
    90b0:	100690fa 	slli	r3,r2,3
    90b4:	003f9706 	br	8f14 <_free_r+0x134>
    90b8:	00805504 	movi	r2,340
    90bc:	10c00436 	bltu	r2,r3,90d0 <_free_r+0x2f0>
    90c0:	3804d3fa 	srli	r2,r7,15
    90c4:	10801dc4 	addi	r2,r2,119
    90c8:	100690fa 	slli	r3,r2,3
    90cc:	003f9106 	br	8f14 <_free_r+0x134>
    90d0:	00815504 	movi	r2,1364
    90d4:	10c0032e 	bgeu	r2,r3,90e4 <_free_r+0x304>
    90d8:	00801f84 	movi	r2,126
    90dc:	00c0fc04 	movi	r3,1008
    90e0:	003f8c06 	br	8f14 <_free_r+0x134>
    90e4:	3804d4ba 	srli	r2,r7,18
    90e8:	10801f04 	addi	r2,r2,124
    90ec:	100690fa 	slli	r3,r2,3
    90f0:	003f8806 	br	8f14 <_free_r+0x134>

000090f4 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    90f4:	008007c4 	movi	r2,31
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    90f8:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    90fc:	00fffa84 	movi	r3,-22
    9100:	11002236 	bltu	r2,r4,918c <alt_irq_register+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9104:	0015303a 	rdctl	r10,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9108:	027fff84 	movi	r9,-2
    910c:	5244703a 	and	r2,r10,r9
    9110:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    9114:	200490fa 	slli	r2,r4,3
    9118:	00c00074 	movhi	r3,1
    911c:	18e9a804 	addi	r3,r3,-22880
    9120:	02000074 	movhi	r8,1
    9124:	42299804 	addi	r8,r8,-22944
    9128:	10c5883a 	add	r2,r2,r3
    alt_irq[id].context = context;
    912c:	11400115 	stw	r5,4(r2)
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    9130:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    9134:	30000826 	beq	r6,zero,9158 <alt_irq_register+0x64>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9138:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    913c:	2244703a 	and	r2,r4,r9
    9140:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    9144:	00c00044 	movi	r3,1
    9148:	19c6983a 	sll	r3,r3,r7
    914c:	40800017 	ldw	r2,0(r8)
    9150:	10c4b03a 	or	r2,r2,r3
    9154:	00000706 	br	9174 <alt_irq_register+0x80>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9158:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    915c:	2244703a 	and	r2,r4,r9
    9160:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    9164:	00ffff84 	movi	r3,-2
    9168:	19c6183a 	rol	r3,r3,r7
    916c:	40800017 	ldw	r2,0(r8)
    9170:	10c4703a 	and	r2,r2,r3
    9174:	40800015 	stw	r2,0(r8)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9178:	40800017 	ldw	r2,0(r8)
    917c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9180:	2001703a 	wrctl	status,r4
    9184:	5001703a 	wrctl	status,r10
    9188:	0007883a 	mov	r3,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
    918c:	1805883a 	mov	r2,r3
    9190:	f800283a 	ret

00009194 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    9194:	2900051e 	bne	r5,r4,91ac <alt_load_section+0x18>
    9198:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    919c:	20800017 	ldw	r2,0(r4)
    91a0:	21000104 	addi	r4,r4,4
    91a4:	28800015 	stw	r2,0(r5)
    91a8:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    91ac:	29bffb1e 	bne	r5,r6,919c <alt_load_section+0x8>
    91b0:	f800283a 	ret

000091b4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    91b4:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    91b8:	01000074 	movhi	r4,1
    91bc:	21282504 	addi	r4,r4,-24428
    91c0:	01400074 	movhi	r5,1
    91c4:	2966b604 	addi	r5,r5,-25896
    91c8:	01800074 	movhi	r6,1
    91cc:	31a82504 	addi	r6,r6,-24428
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    91d0:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    91d4:	00091940 	call	9194 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    91d8:	01000074 	movhi	r4,1
    91dc:	21200804 	addi	r4,r4,-32736
    91e0:	01400074 	movhi	r5,1
    91e4:	29600804 	addi	r5,r5,-32736
    91e8:	01800074 	movhi	r6,1
    91ec:	31a05004 	addi	r6,r6,-32448
    91f0:	00091940 	call	9194 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    91f4:	01000074 	movhi	r4,1
    91f8:	21269b04 	addi	r4,r4,-26004
    91fc:	01400074 	movhi	r5,1
    9200:	29669b04 	addi	r5,r5,-26004
    9204:	01800074 	movhi	r6,1
    9208:	31a6b604 	addi	r6,r6,-25896
    920c:	00091940 	call	9194 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    9210:	00098100 	call	9810 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    9214:	dfc00017 	ldw	ra,0(sp)
    9218:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    921c:	00098fc1 	jmpi	98fc <alt_icache_flush_all>

00009220 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    9220:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    9224:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    9228:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    922c:	00093f80 	call	93f8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    9230:	00093840 	call	9384 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    9234:	d1218417 	ldw	r4,-31216(gp)
    9238:	d1618517 	ldw	r5,-31212(gp)
    923c:	d1a18617 	ldw	r6,-31208(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    9240:	dfc00017 	ldw	ra,0(sp)
    9244:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    9248:	00081c41 	jmpi	81c4 <main>

0000924c <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
}
    924c:	f800283a 	ret

00009250 <__malloc_unlock>:
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
}
    9250:	f800283a 	ret

00009254 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9254:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9258:	00bfff84 	movi	r2,-2
    925c:	2884703a 	and	r2,r5,r2
    9260:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    9264:	d0a00517 	ldw	r2,-32748(gp)
    9268:	00ffff04 	movi	r3,-4
    926c:	108000c4 	addi	r2,r2,3
    9270:	10c6703a 	and	r3,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    9274:	1909883a 	add	r4,r3,r4
    9278:	00800074 	movhi	r2,1
    927c:	10800004 	addi	r2,r2,0
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    9280:	d0e00515 	stw	r3,-32748(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    9284:	1100032e 	bgeu	r2,r4,9294 <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9288:	2801703a 	wrctl	status,r5
    928c:	00ffffc4 	movi	r3,-1
    9290:	00000206 	br	929c <sbrk+0x48>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    9294:	d1200515 	stw	r4,-32748(gp)
    9298:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    929c:	1805883a 	mov	r2,r3
    92a0:	f800283a 	ret

000092a4 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    92a4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    92a8:	00bfff84 	movi	r2,-2
    92ac:	2884703a 	and	r2,r5,r2
    92b0:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    92b4:	20c00017 	ldw	r3,0(r4)
    92b8:	20800117 	ldw	r2,4(r4)
    92bc:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    92c0:	20800117 	ldw	r2,4(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    92c4:	21000115 	stw	r4,4(r4)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
    92c8:	10c00015 	stw	r3,0(r2)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
    92cc:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    92d0:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
    92d4:	f800283a 	ret

000092d8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    92d8:	defffd04 	addi	sp,sp,-12

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    92dc:	d0a18817 	ldw	r2,-31200(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    92e0:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    92e4:	d4200617 	ldw	r16,-32744(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    92e8:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    92ec:	dfc00215 	stw	ra,8(sp)
    92f0:	dc400115 	stw	r17,4(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    92f4:	d0a18815 	stw	r2,-31200(gp)
    92f8:	00001b06 	br	9368 <alt_tick+0x90>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    92fc:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    9300:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    9304:	10000326 	beq	r2,zero,9314 <alt_tick+0x3c>
    9308:	d0a18817 	ldw	r2,-31200(gp)
    930c:	1000011e 	bne	r2,zero,9314 <alt_tick+0x3c>
    {
      alarm->rollover = 0;
    9310:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    9314:	d0e18817 	ldw	r3,-31200(gp)
    9318:	80800217 	ldw	r2,8(r16)
    931c:	18801136 	bltu	r3,r2,9364 <alt_tick+0x8c>
    9320:	80800403 	ldbu	r2,16(r16)
    9324:	10000f1e 	bne	r2,zero,9364 <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
    9328:	81000517 	ldw	r4,20(r16)
    932c:	80800317 	ldw	r2,12(r16)
    9330:	103ee83a 	callr	r2
    9334:	1009883a 	mov	r4,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    9338:	1000031e 	bne	r2,zero,9348 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
    933c:	8009883a 	mov	r4,r16
    9340:	00092a40 	call	92a4 <alt_alarm_stop>
    9344:	00000706 	br	9364 <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
    9348:	80800217 	ldw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    934c:	d0e18817 	ldw	r3,-31200(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
    9350:	1105883a 	add	r2,r2,r4
    9354:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    9358:	10c0022e 	bgeu	r2,r3,9364 <alt_tick+0x8c>
        {
          alarm->rollover = 1;
    935c:	00800044 	movi	r2,1
    9360:	80800405 	stb	r2,16(r16)
    9364:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    9368:	d0a00604 	addi	r2,gp,-32744
    936c:	80bfe31e 	bne	r16,r2,92fc <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    9370:	dfc00217 	ldw	ra,8(sp)
    9374:	dc400117 	ldw	r17,4(sp)
    9378:	dc000017 	ldw	r16,0(sp)
    937c:	dec00304 	addi	sp,sp,12
    9380:	f800283a 	ret

00009384 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    9384:	defffe04 	addi	sp,sp,-8
    ALTERA_AVALON_TIMER_INIT ( CPU2_TIMER, cpu2_timer);
    9388:	000d883a 	mov	r6,zero
    938c:	01c01904 	movi	r7,100
    9390:	01000074 	movhi	r4,1
    9394:	21041004 	addi	r4,r4,4160
    9398:	000b883a 	mov	r5,zero
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    939c:	dfc00115 	stw	ra,4(sp)
    93a0:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( CPU2_TIMER, cpu2_timer);
    93a4:	00095340 	call	9534 <alt_avalon_timer_sc_init>
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
  if (!ret_code)
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
    93a8:	01000074 	movhi	r4,1
    93ac:	2127f004 	addi	r4,r4,-24640
    93b0:	01400074 	movhi	r5,1
    93b4:	29681d04 	addi	r5,r5,-24460
    93b8:	000981c0 	call	981c <alt_dev_llist_insert>
    ALTERA_AVALON_MUTEX_INIT ( MESSAGE_BUFFER_MUTEX, message_buffer_mutex);
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( CPU2_PERFORMANCE_COUNTER, cpu2_performance_counter);
    93bc:	00800044 	movi	r2,1
    93c0:	00c00074 	movhi	r3,1
    93c4:	18c40004 	addi	r3,r3,4096
    93c8:	18800035 	stwio	r2,0(r3)
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CPU2_CHARACTER_LCD_0, cpu2_character_lcd_0);
    93cc:	04000074 	movhi	r16,1
    93d0:	8427f404 	addi	r16,r16,-24624
    93d4:	8009883a 	mov	r4,r16
    93d8:	00096380 	call	9638 <alt_up_character_lcd_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    93dc:	01400074 	movhi	r5,1
    93e0:	29682104 	addi	r5,r5,-24444
    93e4:	8009883a 	mov	r4,r16
}
    93e8:	dfc00117 	ldw	ra,4(sp)
    93ec:	dc000017 	ldw	r16,0(sp)
    93f0:	dec00204 	addi	sp,sp,8
    93f4:	000981c1 	jmpi	981c <alt_dev_llist_insert>

000093f8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    93f8:	deffff04 	addi	sp,sp,-4
    93fc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU2, cpu2);
    9400:	0009a080 	call	9a08 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    9404:	00800044 	movi	r2,1
    9408:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    940c:	dfc00017 	ldw	ra,0(sp)
    9410:	dec00104 	addi	sp,sp,4
    9414:	f800283a 	ret

00009418 <altera_avalon_mutex_close>:
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
  return;
}
    9418:	f800283a 	ret

0000941c <altera_avalon_mutex_first_lock>:
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
  alt_u32 data;
  int ret_code = 0;

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
    941c:	20800317 	ldw	r2,12(r4)
    9420:	10800137 	ldwio	r2,4(r2)
  {
    ret_code = 1;
  }

  return ret_code;
}
    9424:	1080004c 	andi	r2,r2,1
    9428:	f800283a 	ret

0000942c <altera_avalon_mutex_is_mine>:
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
  alt_u32 id, data, owner, value;
  int ret_code = 0;

  NIOS2_READ_CPUID(id);
    942c:	000b317a 	rdctl	r5,cpuid

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
    9430:	20800317 	ldw	r2,12(r4)
    9434:	10800037 	ldwio	r2,0(r2)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
    9438:	0009883a 	mov	r4,zero
    943c:	1006d43a 	srli	r3,r2,16
    9440:	10bfffcc 	andi	r2,r2,65535
    9444:	1940011e 	bne	r3,r5,944c <altera_avalon_mutex_is_mine+0x20>
    9448:	1008c03a 	cmpne	r4,r2,zero
      ret_code = 1;
    }
  }

  return ret_code;
}
    944c:	2005883a 	mov	r2,r4
    9450:	f800283a 	ret

00009454 <altera_avalon_mutex_unlock>:
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
  alt_u32 id;
  NIOS2_READ_CPUID(id);
    9454:	0007317a 	rdctl	r3,cpuid

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
    9458:	21400317 	ldw	r5,12(r4)
    945c:	00800044 	movi	r2,1
    9460:	28800135 	stwio	r2,4(r5)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
    9464:	20800317 	ldw	r2,12(r4)
    9468:	1806943a 	slli	r3,r3,16
    946c:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
    9470:	f800283a 	ret

00009474 <alt_mutex_trylock>:
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  alt_u32 id, data, check;
  int ret_code = -1;

  NIOS2_READ_CPUID(id);
    9474:	0007317a 	rdctl	r3,cpuid

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
    9478:	1806943a 	slli	r3,r3,16

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
    947c:	20800317 	ldw	r2,12(r4)
  int ret_code = -1;

  NIOS2_READ_CPUID(id);

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
    9480:	1946b03a 	or	r3,r3,r5

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
    9484:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
    9488:	20800317 	ldw	r2,12(r4)
    948c:	10800037 	ldwio	r2,0(r2)

  if ( check == data)
    9490:	10c4c03a 	cmpne	r2,r2,r3
  {
    ret_code = 0;
  }

  return ret_code;
}
    9494:	0085c83a 	sub	r2,zero,r2
    9498:	f800283a 	ret

0000949c <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
    949c:	defffe04 	addi	sp,sp,-8
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
    94a0:	d1600804 	addi	r5,gp,-32736
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
    94a4:	dc000015 	stw	r16,0(sp)
    94a8:	dfc00115 	stw	ra,4(sp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
    94ac:	000988c0 	call	988c <alt_find_dev>
    94b0:	1021883a 	mov	r16,r2

  if (NULL == dev)
    94b4:	10000a1e 	bne	r2,zero,94e0 <altera_avalon_mutex_open+0x44>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    94b8:	00800074 	movhi	r2,1
    94bc:	10a82404 	addi	r2,r2,-24432
    94c0:	10800017 	ldw	r2,0(r2)
    94c4:	00c00074 	movhi	r3,1
    94c8:	18e99704 	addi	r3,r3,-22948
    94cc:	10000226 	beq	r2,zero,94d8 <altera_avalon_mutex_open+0x3c>
    94d0:	103ee83a 	callr	r2
    94d4:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = ENODEV;
    94d8:	008004c4 	movi	r2,19
    94dc:	18800015 	stw	r2,0(r3)
  }

  return dev;
}
    94e0:	8005883a 	mov	r2,r16
    94e4:	dfc00117 	ldw	ra,4(sp)
    94e8:	dc000017 	ldw	r16,0(sp)
    94ec:	dec00204 	addi	sp,sp,8
    94f0:	f800283a 	ret

000094f4 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
    94f4:	defffd04 	addi	sp,sp,-12
    94f8:	dc400115 	stw	r17,4(sp)
    94fc:	dc000015 	stw	r16,0(sp)
    9500:	dfc00215 	stw	ra,8(sp)
    9504:	2023883a 	mov	r17,r4
    9508:	2821883a 	mov	r16,r5
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
    950c:	8809883a 	mov	r4,r17
    9510:	800b883a 	mov	r5,r16
    9514:	00094740 	call	9474 <alt_mutex_trylock>
    9518:	103ffc1e 	bne	r2,zero,950c <altera_avalon_mutex_lock+0x18>
}
    951c:	dfc00217 	ldw	ra,8(sp)
    9520:	dc400117 	ldw	r17,4(sp)
    9524:	dc000017 	ldw	r16,0(sp)
    9528:	dec00304 	addi	sp,sp,12
    952c:	f800283a 	ret

00009530 <altera_avalon_mutex_trylock>:
{
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
    9530:	00094741 	jmpi	9474 <alt_mutex_trylock>

00009534 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    9534:	02000074 	movhi	r8,1
    9538:	42299c04 	addi	r8,r8,-22928
    953c:	40800017 	ldw	r2,0(r8)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    9540:	defffe04 	addi	sp,sp,-8
    9544:	3807883a 	mov	r3,r7
    9548:	dfc00115 	stw	ra,4(sp)
    954c:	200f883a 	mov	r7,r4
    9550:	1000011e 	bne	r2,zero,9558 <alt_avalon_timer_sc_init+0x24>
  {
    _alt_tick_rate = nticks;
    9554:	40c00015 	stw	r3,0(r8)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    9558:	008001c4 	movi	r2,7
    955c:	38800135 	stwio	r2,4(r7)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    9560:	2809883a 	mov	r4,r5
    9564:	300b883a 	mov	r5,r6
    9568:	01800074 	movhi	r6,1
    956c:	31a56104 	addi	r6,r6,-27260
    9570:	d8000015 	stw	zero,0(sp)
    9574:	00099980 	call	9998 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    9578:	dfc00117 	ldw	ra,4(sp)
    957c:	dec00204 	addi	sp,sp,8
    9580:	f800283a 	ret

00009584 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    9584:	defffe04 	addi	sp,sp,-8
    9588:	dfc00115 	stw	ra,4(sp)
    958c:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    9590:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    9594:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9598:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    959c:	00bfff84 	movi	r2,-2
    95a0:	8084703a 	and	r2,r16,r2
    95a4:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    95a8:	00092d80 	call	92d8 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    95ac:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    95b0:	dfc00117 	ldw	ra,4(sp)
    95b4:	dc000017 	ldw	r16,0(sp)
    95b8:	dec00204 	addi	sp,sp,8
    95bc:	f800283a 	ret

000095c0 <get_DDRAM_addr>:
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
	{
		addr |= x_pos;
    95c0:	2005883a 	mov	r2,r4
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
    95c4:	28000126 	beq	r5,zero,95cc <get_DDRAM_addr+0xc>
		addr |= x_pos;
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
    95c8:	20801014 	ori	r2,r4,64
    95cc:	10803fcc 	andi	r2,r2,255
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
}
    95d0:	10802014 	ori	r2,r2,128
    95d4:	f800283a 	ret

000095d8 <alt_up_character_lcd_string>:
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    95d8:	00000306 	br	95e8 <alt_up_character_lcd_string+0x10>
	while ( *ptr )
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    95dc:	20800a17 	ldw	r2,40(r4)
    95e0:	10c00065 	stbio	r3,1(r2)
		++ptr;
    95e4:	29400044 	addi	r5,r5,1
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    95e8:	28c00007 	ldb	r3,0(r5)
    95ec:	183ffb1e 	bne	r3,zero,95dc <alt_up_character_lcd_string+0x4>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    95f0:	f800283a 	ret

000095f4 <alt_up_character_lcd_write>:

  return dev;
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    95f4:	000f883a 	mov	r7,zero
    95f8:	00000406 	br	960c <alt_up_character_lcd_write+0x18>
	unsigned int i;
	for (i = 0; i < len; i++)
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    95fc:	10c00007 	ldb	r3,0(r2)
    9600:	20800a17 	ldw	r2,40(r4)
    9604:	10c00065 	stbio	r3,1(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    9608:	39c00044 	addi	r7,r7,1
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    960c:	29c5883a 	add	r2,r5,r7
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    9610:	39bffa1e 	bne	r7,r6,95fc <alt_up_character_lcd_write+0x8>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    9614:	f800283a 	ret

00009618 <alt_up_character_lcd_write_fd>:
}

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    9618:	21000017 	ldw	r4,0(r4)
	}
}

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    961c:	deffff04 	addi	sp,sp,-4
    9620:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    9624:	00095f40 	call	95f4 <alt_up_character_lcd_write>
	return 0;
}
    9628:	0005883a 	mov	r2,zero
    962c:	dfc00017 	ldw	ra,0(sp)
    9630:	dec00104 	addi	sp,sp,4
    9634:	f800283a 	ret

00009638 <alt_up_character_lcd_init>:
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    9638:	20c00a17 	ldw	r3,40(r4)
    963c:	00800044 	movi	r2,1
    9640:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    9644:	f800283a 	ret

00009648 <alt_up_character_lcd_send_cmd>:
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    9648:	20800a17 	ldw	r2,40(r4)
    964c:	29403fcc 	andi	r5,r5,255
    9650:	11400025 	stbio	r5,0(r2)
}
    9654:	f800283a 	ret

00009658 <alt_up_character_lcd_cursor_blink_on>:
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
}

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    9658:	014003c4 	movi	r5,15
    965c:	00096481 	jmpi	9648 <alt_up_character_lcd_send_cmd>

00009660 <alt_up_character_lcd_cursor_off>:
	return 0;
}

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    9660:	01400304 	movi	r5,12
    9664:	00096481 	jmpi	9648 <alt_up_character_lcd_send_cmd>

00009668 <alt_up_character_lcd_erase_pos>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    9668:	defffe04 	addi	sp,sp,-8
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    966c:	008009c4 	movi	r2,39
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    9670:	dc000015 	stw	r16,0(sp)
    9674:	dfc00115 	stw	ra,4(sp)
    9678:	2807883a 	mov	r3,r5
    967c:	2021883a 	mov	r16,r4
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    9680:	11400d36 	bltu	r2,r5,96b8 <alt_up_character_lcd_erase_pos+0x50>
    9684:	00800044 	movi	r2,1
		return -1;

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    9688:	300b883a 	mov	r5,r6
    968c:	1809883a 	mov	r4,r3
}

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    9690:	11800936 	bltu	r2,r6,96b8 <alt_up_character_lcd_erase_pos+0x50>
		return -1;

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    9694:	00095c00 	call	95c0 <get_DDRAM_addr>
    9698:	11403fcc 	andi	r5,r2,255
    969c:	8009883a 	mov	r4,r16
    96a0:	00096480 	call	9648 <alt_up_character_lcd_send_cmd>
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    96a4:	80c00a17 	ldw	r3,40(r16)
    96a8:	00800084 	movi	r2,2
    96ac:	18800065 	stbio	r2,1(r3)
    96b0:	0005883a 	mov	r2,zero
    96b4:	00000106 	br	96bc <alt_up_character_lcd_erase_pos+0x54>
	return 0;
    96b8:	00bfffc4 	movi	r2,-1
}
    96bc:	dfc00117 	ldw	ra,4(sp)
    96c0:	dc000017 	ldw	r16,0(sp)
    96c4:	dec00204 	addi	sp,sp,8
    96c8:	f800283a 	ret

000096cc <alt_up_character_lcd_shift_display>:
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    96cc:	defffc04 	addi	sp,sp,-16
    96d0:	dc400115 	stw	r17,4(sp)
    96d4:	dfc00315 	stw	ra,12(sp)
    96d8:	dc800215 	stw	r18,8(sp)
    96dc:	dc000015 	stw	r16,0(sp)
    96e0:	2023883a 	mov	r17,r4
	if (x_right_shift_offset == 0) 
    96e4:	28000f26 	beq	r5,zero,9724 <alt_up_character_lcd_shift_display+0x58>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    96e8:	01400216 	blt	zero,r5,96f4 <alt_up_character_lcd_shift_display+0x28>
    96ec:	04800604 	movi	r18,24
    96f0:	00000106 	br	96f8 <alt_up_character_lcd_shift_display+0x2c>
    96f4:	04800704 	movi	r18,28
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    96f8:	2800010e 	bge	r5,zero,9700 <alt_up_character_lcd_shift_display+0x34>
    96fc:	014bc83a 	sub	r5,zero,r5
    9700:	2821883a 	mov	r16,r5
    9704:	00000106 	br	970c <alt_up_character_lcd_shift_display+0x40>
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    9708:	00096480 	call	9648 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    970c:	843fffc4 	addi	r16,r16,-1
    9710:	80c03fcc 	andi	r3,r16,255
    9714:	00803fc4 	movi	r2,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    9718:	8809883a 	mov	r4,r17
    971c:	91403fcc 	andi	r5,r18,255
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    9720:	18bff91e 	bne	r3,r2,9708 <alt_up_character_lcd_shift_display+0x3c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    9724:	dfc00317 	ldw	ra,12(sp)
    9728:	dc800217 	ldw	r18,8(sp)
    972c:	dc400117 	ldw	r17,4(sp)
    9730:	dc000017 	ldw	r16,0(sp)
    9734:	dec00404 	addi	sp,sp,16
    9738:	f800283a 	ret

0000973c <alt_up_character_lcd_shift_cursor>:
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
}

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    973c:	defffc04 	addi	sp,sp,-16
    9740:	dc400115 	stw	r17,4(sp)
    9744:	dfc00315 	stw	ra,12(sp)
    9748:	dc800215 	stw	r18,8(sp)
    974c:	dc000015 	stw	r16,0(sp)
    9750:	2023883a 	mov	r17,r4
	if (x_right_shift_offset == 0) 
    9754:	28000f26 	beq	r5,zero,9794 <alt_up_character_lcd_shift_cursor+0x58>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    9758:	01400216 	blt	zero,r5,9764 <alt_up_character_lcd_shift_cursor+0x28>
    975c:	04800404 	movi	r18,16
    9760:	00000106 	br	9768 <alt_up_character_lcd_shift_cursor+0x2c>
    9764:	04800504 	movi	r18,20
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    9768:	2800010e 	bge	r5,zero,9770 <alt_up_character_lcd_shift_cursor+0x34>
    976c:	014bc83a 	sub	r5,zero,r5
    9770:	2821883a 	mov	r16,r5
    9774:	00000106 	br	977c <alt_up_character_lcd_shift_cursor+0x40>
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    9778:	00096480 	call	9648 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    977c:	843fffc4 	addi	r16,r16,-1
    9780:	80c03fcc 	andi	r3,r16,255
    9784:	00803fc4 	movi	r2,255
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    9788:	8809883a 	mov	r4,r17
    978c:	91403fcc 	andi	r5,r18,255
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    9790:	18bff91e 	bne	r3,r2,9778 <alt_up_character_lcd_shift_cursor+0x3c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    9794:	dfc00317 	ldw	ra,12(sp)
    9798:	dc800217 	ldw	r18,8(sp)
    979c:	dc400117 	ldw	r17,4(sp)
    97a0:	dc000017 	ldw	r16,0(sp)
    97a4:	dec00404 	addi	sp,sp,16
    97a8:	f800283a 	ret

000097ac <alt_up_character_lcd_set_cursor_pos>:
	return 0;
}

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    97ac:	defffe04 	addi	sp,sp,-8
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    97b0:	008009c4 	movi	r2,39
	return 0;
}

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    97b4:	dc000015 	stw	r16,0(sp)
    97b8:	dfc00115 	stw	ra,4(sp)
    97bc:	2807883a 	mov	r3,r5
    97c0:	2021883a 	mov	r16,r4
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    97c4:	11400a36 	bltu	r2,r5,97f0 <alt_up_character_lcd_set_cursor_pos+0x44>
    97c8:	00800044 	movi	r2,1
		// invalid argument
		return -1;
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    97cc:	300b883a 	mov	r5,r6
    97d0:	1809883a 	mov	r4,r3

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    97d4:	11800636 	bltu	r2,r6,97f0 <alt_up_character_lcd_set_cursor_pos+0x44>
		// invalid argument
		return -1;
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    97d8:	00095c00 	call	95c0 <get_DDRAM_addr>
    97dc:	11403fcc 	andi	r5,r2,255
    97e0:	8009883a 	mov	r4,r16
    97e4:	00096480 	call	9648 <alt_up_character_lcd_send_cmd>
    97e8:	0005883a 	mov	r2,zero
    97ec:	00000106 	br	97f4 <alt_up_character_lcd_set_cursor_pos+0x48>
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
    97f0:	00bfffc4 	movi	r2,-1
}
    97f4:	dfc00117 	ldw	ra,4(sp)
    97f8:	dc000017 	ldw	r16,0(sp)
    97fc:	dec00204 	addi	sp,sp,8
    9800:	f800283a 	ret

00009804 <alt_up_character_lcd_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    9804:	01400074 	movhi	r5,1
    9808:	29682104 	addi	r5,r5,-24444
    980c:	000988c1 	jmpi	988c <alt_find_dev>

00009810 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9810:	f800283a 	ret

00009814 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    9814:	3005883a 	mov	r2,r6
    9818:	f800283a 	ret

0000981c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    981c:	deffff04 	addi	sp,sp,-4
    9820:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    9824:	20000326 	beq	r4,zero,9834 <alt_dev_llist_insert+0x18>
    9828:	20800217 	ldw	r2,8(r4)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
  list->next           = entry;
    982c:	000d883a 	mov	r6,zero
    9830:	10000c1e 	bne	r2,zero,9864 <alt_dev_llist_insert+0x48>
    9834:	00800074 	movhi	r2,1
    9838:	10a82404 	addi	r2,r2,-24432
    983c:	10800017 	ldw	r2,0(r2)
    9840:	00c00074 	movhi	r3,1
    9844:	18e99704 	addi	r3,r3,-22948
    9848:	10000226 	beq	r2,zero,9854 <alt_dev_llist_insert+0x38>
    984c:	103ee83a 	callr	r2
    9850:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
    9854:	00800584 	movi	r2,22
    9858:	01bffa84 	movi	r6,-22
    985c:	18800015 	stw	r2,0(r3)
    9860:	00000606 	br	987c <alt_dev_llist_insert+0x60>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
    9864:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    9868:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    986c:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    9870:	28800017 	ldw	r2,0(r5)
  list->next           = entry;
    9874:	29000015 	stw	r4,0(r5)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
    9878:	11000115 	stw	r4,4(r2)
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    987c:	3005883a 	mov	r2,r6
    9880:	dfc00017 	ldw	ra,0(sp)
    9884:	dec00104 	addi	sp,sp,4
    9888:	f800283a 	ret

0000988c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    988c:	defffb04 	addi	sp,sp,-20
    9890:	dcc00315 	stw	r19,12(sp)
    9894:	dc800215 	stw	r18,8(sp)
    9898:	dc400115 	stw	r17,4(sp)
    989c:	dc000015 	stw	r16,0(sp)
    98a0:	dfc00415 	stw	ra,16(sp)
  alt_dev* next = (alt_dev*) llist->next;
    98a4:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    98a8:	2823883a 	mov	r17,r5
    98ac:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
    98b0:	0009a4c0 	call	9a4c <strlen>
    98b4:	14800044 	addi	r18,r2,1
    98b8:	00000406 	br	98cc <alt_find_dev+0x40>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    98bc:	81000217 	ldw	r4,8(r16)
    98c0:	0009a100 	call	9a10 <memcmp>
    98c4:	10000526 	beq	r2,zero,98dc <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    98c8:	84000017 	ldw	r16,0(r16)
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    98cc:	980b883a 	mov	r5,r19
    98d0:	900d883a 	mov	r6,r18
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    98d4:	847ff91e 	bne	r16,r17,98bc <alt_find_dev+0x30>
    98d8:	0021883a 	mov	r16,zero
  }
  
  /* No match found */
  
  return NULL;
}
    98dc:	8005883a 	mov	r2,r16
    98e0:	dfc00417 	ldw	ra,16(sp)
    98e4:	dcc00317 	ldw	r19,12(sp)
    98e8:	dc800217 	ldw	r18,8(sp)
    98ec:	dc400117 	ldw	r17,4(sp)
    98f0:	dc000017 	ldw	r16,0(sp)
    98f4:	dec00504 	addi	sp,sp,20
    98f8:	f800283a 	ret

000098fc <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    98fc:	f800283a 	ret

00009900 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    9900:	000530fa 	rdctl	r2,ienable
    9904:	00c00044 	movi	r3,1
    9908:	1946983a 	sll	r3,r3,r5
    990c:	10c4703a 	and	r2,r2,r3

    return (irq_enabled & (1 << irq)) ? 1: 0;
}
    9910:	1004c03a 	cmpne	r2,r2,zero
    9914:	f800283a 	ret

00009918 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9918:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    991c:	00bfff84 	movi	r2,-2
    9920:	3084703a 	and	r2,r6,r2
    9924:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    9928:	01000074 	movhi	r4,1
    992c:	21299804 	addi	r4,r4,-22944
    9930:	00c00044 	movi	r3,1
    9934:	20800017 	ldw	r2,0(r4)
    9938:	1946983a 	sll	r3,r3,r5
    993c:	10c4b03a 	or	r2,r2,r3
    9940:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9944:	20800017 	ldw	r2,0(r4)
    9948:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    994c:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    9950:	0005883a 	mov	r2,zero
    9954:	f800283a 	ret

00009958 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9958:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    995c:	00bfff84 	movi	r2,-2
    9960:	3084703a 	and	r2,r6,r2
    9964:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    9968:	01000074 	movhi	r4,1
    996c:	21299804 	addi	r4,r4,-22944
    9970:	00ffff84 	movi	r3,-2
    9974:	20800017 	ldw	r2,0(r4)
    9978:	1946183a 	rol	r3,r3,r5
    997c:	10c4703a 	and	r2,r2,r3
    9980:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9984:	20800017 	ldw	r2,0(r4)
    9988:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    998c:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    9990:	0005883a 	mov	r2,zero
    9994:	f800283a 	ret

00009998 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    9998:	000999c1 	jmpi	999c <alt_iic_isr_register>

0000999c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    999c:	defffe04 	addi	sp,sp,-8
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    99a0:	008007c4 	movi	r2,31
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    99a4:	dfc00115 	stw	ra,4(sp)
    99a8:	dc000015 	stw	r16,0(sp)
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    99ac:	00fffa84 	movi	r3,-22
    99b0:	11401016 	blt	r2,r5,99f4 <alt_iic_isr_register+0x58>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    99b4:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    99b8:	00bfff84 	movi	r2,-2
    99bc:	8084703a 	and	r2,r16,r2
    99c0:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    99c4:	280490fa 	slli	r2,r5,3
    99c8:	00c00074 	movhi	r3,1
    99cc:	18e9a804 	addi	r3,r3,-22880
    99d0:	10c5883a 	add	r2,r2,r3
    alt_irq[id].context = isr_context;
    99d4:	11c00115 	stw	r7,4(r2)
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    99d8:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    99dc:	30000226 	beq	r6,zero,99e8 <alt_iic_isr_register+0x4c>
    99e0:	00099180 	call	9918 <alt_ic_irq_enable>
    99e4:	00000106 	br	99ec <alt_iic_isr_register+0x50>
    99e8:	00099580 	call	9958 <alt_ic_irq_disable>
    99ec:	1007883a 	mov	r3,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    99f0:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    99f4:	1805883a 	mov	r2,r3
    99f8:	dfc00117 	ldw	ra,4(sp)
    99fc:	dc000017 	ldw	r16,0(sp)
    9a00:	dec00204 	addi	sp,sp,8
    9a04:	f800283a 	ret

00009a08 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    9a08:	000170fa 	wrctl	ienable,zero
}
    9a0c:	f800283a 	ret

00009a10 <memcmp>:
    9a10:	31ffffc4 	addi	r7,r6,-1
    9a14:	3000061e 	bne	r6,zero,9a30 <memcmp+0x20>
    9a18:	00000a06 	br	9a44 <memcmp+0x34>
    9a1c:	39ffffc4 	addi	r7,r7,-1
    9a20:	00bfffc4 	movi	r2,-1
    9a24:	21000044 	addi	r4,r4,1
    9a28:	29400044 	addi	r5,r5,1
    9a2c:	38800526 	beq	r7,r2,9a44 <memcmp+0x34>
    9a30:	20c00003 	ldbu	r3,0(r4)
    9a34:	28800003 	ldbu	r2,0(r5)
    9a38:	18bff826 	beq	r3,r2,9a1c <memcmp+0xc>
    9a3c:	1885c83a 	sub	r2,r3,r2
    9a40:	f800283a 	ret
    9a44:	0005883a 	mov	r2,zero
    9a48:	f800283a 	ret

00009a4c <strlen>:
    9a4c:	20800007 	ldb	r2,0(r4)
    9a50:	10000526 	beq	r2,zero,9a68 <strlen+0x1c>
    9a54:	2007883a 	mov	r3,r4
    9a58:	18c00044 	addi	r3,r3,1
    9a5c:	18800007 	ldb	r2,0(r3)
    9a60:	103ffd1e 	bne	r2,zero,9a58 <strlen+0xc>
    9a64:	1905c83a 	sub	r2,r3,r4
    9a68:	f800283a 	ret
