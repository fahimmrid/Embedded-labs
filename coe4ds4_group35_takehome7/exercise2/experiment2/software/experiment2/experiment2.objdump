
experiment2.elf:     file format elf32-littlenios2
experiment2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x000201d4 memsz 0x000201d4 flags r-x
    LOAD off    0x000211f4 vaddr 0x000a01f4 paddr 0x000a1d34 align 2**12
         filesz 0x00001b40 memsz 0x00001b40 flags rw-
    LOAD off    0x00023874 vaddr 0x000a3874 paddr 0x000a3874 align 2**12
         filesz 0x00000000 memsz 0x00015554 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001f48c  000801bc  000801bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000bac  0009f648  0009f648  00020648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b40  000a01f4  000a1d34  000211f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00015554  000a3874  000a3874  00023874  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00022d34  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000f98  00000000  00000000  00022d58  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002cef  00000000  00000000  00023cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000399f9  00000000  00000000  000269df  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a86b  00000000  00000000  000603d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00021968  00000000  00000000  0006ac43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002f20  00000000  00000000  0008c5ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000029d1  00000000  00000000  0008f4cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e363  00000000  00000000  00091e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000a0200  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009f8  00000000  00000000  000a0210  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  000a667d  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000a6683  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000a6688  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000a6689  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000a668a  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000a6695  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000a66a0  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000a66ab  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000024  00000000  00000000  000a66b6  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     000505eb  00000000  00000000  000a66da  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801bc l    d  .text	00000000 .text
0009f648 l    d  .rodata	00000000 .rodata
000a01f4 l    d  .rwdata	00000000 .rwdata
000a3874 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000801f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 PB_button.c
00000000 l    df *ABS*	00000000 SD_card_controller.c
00000000 l    df *ABS*	00000000 alt_ucosii_simple_error_check.c
00000000 l    df *ABS*	00000000 experiment2.c
00000000 l    df *ABS*	00000000 tasks.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00087698 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
000a01f4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00087c00 l     F .text	00000058 __sprint_r
0009fdda l     O .rodata	00000010 blanks.3452
0009fdca l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00089c7c l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0008b6a4 l     F .text	00000058 std
0008b7b0 l     F .text	00000008 __fp_lock
0008b7b8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
000a1c84 l     O .rwdata	00000004 charset
0009fe0c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0009ff54 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0008fe9c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00091780 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000917e0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000918e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00091bc8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00091ca8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00091e08 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00092054 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000a1cac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0009230c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
000a1cb0 l     O .rwdata	00000004 lockid
000a3904 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
000a1cb4 l     O .rwdata	00000004 lockid
000a390c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00093d44 l     F .text	00000044 OS_InitMisc
00093d88 l     F .text	0000006c OS_InitRdyList
00093eec l     F .text	000000e0 OS_InitTCBList
00093c68 l     F .text	000000dc OS_InitEventList
00093df4 l     F .text	0000007c OS_InitTaskIdle
00093e70 l     F .text	0000007c OS_InitTaskStat
00094160 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00096080 l     F .text	00000110 OS_FlagTaskRdy
00095dd8 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_mutex.c
000988b4 l     F .text	000001c8 OSMutex_RdyAtPrio
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000a0bb0 l     O .rwdata	0000106c jtag_uart_0
000a1c1c l     O .rwdata	0000002c character_lcd_0
000a1c48 l     O .rwdata	0000002c SD_CARD_0
0009ca30 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0009cce8 l     F .text	000002c4 altera_avalon_jtag_uart_irq
0009cfac l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0009d7c4 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0009e018 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0009e4bc l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0009e60c l     F .text	000000f8 alt_file_locked
0009e890 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0009f3b8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0009f56c l     F .text	00000040 alt_sim_halt
000a387c g     O .bss	00000004 aux_status_register
000879e0 g     F .text	0000001c putchar
000a38a0 g     O .bss	00000004 MemoryPartition
0008d494 g     F .text	00000094 _mprec_log10
000a1d02 g     O .rwdata	00000002 OSTaskNameSize
0008d580 g     F .text	00000088 __any_on
0008f070 g     F .text	00000070 _isatty_r
0009ff2c g     O .rodata	00000028 __mprec_tinytens
00091e68 g     F .text	000000c8 alt_main
000a567c g     O .bss	0000006c compute_Y_tcb
00087a04 g     F .text	000000a0 _puts_r
000b8b38 g     O .bss	00000100 alt_irq
0008f0e0 g     F .text	00000078 _lseek_r
00097600 g     F .text	000000d4 OS_MemInit
000a1d34 g       *ABS*	00000000 __flash_rwdata_start
0009c908 g     F .text	00000064 OSTimeSet
000a56e8 g     O .bss	00002000 compute_Y_stk
0009d940 g     F .text	00000034 alt_up_character_lcd_send_cmd
000909bc g     F .text	00000088 __eqdf2
000807a8 g     F .text	00000158 Check_for_Master_Boot_Record
000928c0 g     F .text	000006b4 OSEventPendMulti
000b8dc8 g       *ABS*	00000000 __alt_heap_start
0009ee98 g     F .text	00000020 OSTaskCreateHook
000a38a4 g     O .bss	00000004 SDMutex
00087968 g     F .text	00000044 printf
000a1cda g     O .rwdata	00000002 OSMboxEn
00092fc8 g     F .text	0000007c OSIntEnter
0008e9dc g     F .text	00000068 __sseek
0008b70c g     F .text	000000a4 __sinit
0008ebdc g     F .text	00000130 __swbuf_r
000a1cea g     O .rwdata	00000002 OSQEn
0008c418 g     F .text	00000084 _setlocale_r
0008b80c g     F .text	0000009c __sfmoreglue
0009257c g     F .text	000000d0 __malloc_unlock
0009eef4 g     F .text	0000001c OSTaskStatHook
000a3914 g     O .bss	00000001 OSLockNesting
000a3898 g     O .bss	00000004 current_sector_modified
000802c4 g     F .text	00000044 KEY3_Pressed
000a1d28 g     O .rwdata	00000002 OSDataSize
000a3915 g     O .bss	00000001 OSRunning
00084d20 g     F .text	00000178 SD_presence_detect_task
000a38a8 g     O .bss	00000004 SDCardFlag
0008cf10 g     F .text	000000e0 memmove
0009ef2c g     F .text	0000001c OSInitHookBegin
000a1d20 g     O .rwdata	00000002 OSTmrSize
0008b7fc g     F .text	00000010 _cleanup
0008d608 g     F .text	000000bc _Balloc
000804ec g     F .text	00000050 Save_Modified_Sector
000a3918 g     O .bss	00000004 OSIdleCtr
000837f4 g     F .text	00000090 sd_card_set_attributes
00082ef8 g     F .text	0000004c sd_card_is_Present
00090acc g     F .text	00000088 __gtdf2
0009eb64 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0009d8c4 g     F .text	0000007c get_DDRAM_addr
00094494 g     F .text	000002e0 OS_TCBInit
000a38ac g     O .bss	00000004 YImageWidthMailbox
00080000 g     F .entry	0000000c __reset
000a3894 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
000a1d26 g     O .rwdata	00000002 OSTmrWheelTblSize
00080020 g       *ABS*	00000000 __flash_exceptions_start
000a1cc6 g     O .rwdata	00000002 OSEventSize
000a391c g     O .bss	00000001 OSPrioHighRdy
0008effc g     F .text	00000074 _fstat_r
0009eeb8 g     F .text	00000020 OSTaskDelHook
000a38ec g     O .bss	00000004 errno
0009eb44 g       .text	00000000 OSStartHighRdy
0009b0c0 g     F .text	00000200 OSTaskCreateExt
00084978 g     F .text	0000003c initialize_task
000958f4 g     F .text	00000068 OSFlagPendGetFlagsRdy
000a1d06 g     O .rwdata	00000002 OSTaskStatStkSize
00094900 g     F .text	00000334 OSFlagAccept
000990e4 g     F .text	000000c8 OSQFlush
00098a7c g     F .text	00000154 OSQAccept
000a38fc g     O .bss	00000004 alt_argv
000a9c74 g       *ABS*	00000000 _gp
0009aeec g     F .text	000001d4 OSTaskCreate
000a388c g     O .bss	00000004 command_argument_register
0009a978 g     F .text	00000574 OSTaskChangePrio
000a3910 g     O .bss	00000004 alt_heapsem
00094774 g     F .text	0000018c OSDebugInit
0009b2c0 g     F .text	0000040c OSTaskDel
000976d4 g     F .text	000001d8 OSMutexAccept
000a0a30 g     O .rwdata	00000180 alt_fd_list
000b5914 g     O .bss	00000370 OSFlagTbl
000879fc g     F .text	00000008 _putchar_r
00093a44 g     F .text	000000b8 OS_EventTaskRemove
0008278c g     F .text	0000011c find_first_empty_record_in_root_directory
0009e140 g     F .text	00000094 alt_find_dev
0008ce70 g     F .text	000000a0 memcpy
000a1cf0 g     O .rwdata	00000002 OSRdyTblSize
0009dad8 g     F .text	0000004c alt_up_character_lcd_write_fd
0008b7f0 g     F .text	0000000c _cleanup_r
00090c64 g     F .text	000000f8 __floatsidf
0009e594 g     F .text	00000078 alt_io_redirect
00090bdc g     F .text	00000088 __ltdf2
0009f648 g       *ABS*	00000000 __DTOR_END__
00084aac g     F .text	000001f0 init_OS_data_structs
00087aa4 g     F .text	00000014 puts
000a38b0 g     O .bss	00000004 YImageHeightMailbox
0009264c g     F .text	00000130 OSEventNameGet
000a1cd4 g     O .rwdata	00000002 OSFlagMax
000823bc g     F .text	00000194 find_first_empty_cluster
00097e18 g     F .text	00000690 OSMutexPend
0008d3e4 g     F .text	000000b0 __ratio
00093044 g     F .text	00000100 OSIntExit
000a1d0e g     O .rwdata	00000002 OSTCBSize
000a391d g     O .bss	00000001 OSPrioCur
0009d228 g     F .text	000002c0 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000879ac g     F .text	00000034 _printf_r
000877d4 g     F .text	00000008 __udivsi3
00091b04 g     F .text	000000c4 isatty
000a1cf4 g     O .rwdata	00000002 OSStkWidth
0009fe3c g     O .rodata	000000c8 __mprec_tens
000a1ce8 g     O .rwdata	00000002 OSPtrSize
0008c3f4 g     F .text	00000008 __locale_charset
000a1cc8 g     O .rwdata	00000002 OSEventTblSize
0009eab8 g       .text	00000000 OSCtxSw
000a38e0 g     O .bss	00000004 __malloc_top_pad
000a3920 g     O .bss	00000004 OSTCBList
000a38f0 g     O .bss	00000004 alt_fd_list_lock
000a1c80 g     O .rwdata	00000004 __mb_cur_max
00082f44 g     F .text	0000008c sd_card_is_FAT16
0008c3fc g     F .text	0000000c _localeconv_r
0008dd6c g     F .text	0000003c __i2b
0008bdd8 g     F .text	0000049c __sfvwrite_r
00081698 g     F .text	000000c0 get_dir_divider_location
000a76e8 g     O .bss	0000006c process_Y_tcb
000a3efc g     O .bss	00000200 ReadQueue2
000b5c84 g     O .bss	00000c30 OSMemTbl
000a3924 g     O .bss	00000001 OSTickStepState
0008e964 g     F .text	00000070 _sbrk_r
00081338 g     F .text	000000d0 filename_to_upper_case
000a1cec g     O .rwdata	00000002 OSQMax
00097ab0 g     F .text	00000368 OSMutexDel
000b68b4 g     O .bss	00000800 OSTaskStatStk
000971e8 g     F .text	0000010c OSMemNameGet
00080900 g     F .text	000001c8 Read_File_Record_At_Offset
000869ac g     F .text	00000814 compute_Y_task
000a1ccc g     O .rwdata	00000002 OSFlagEn
0008f158 g     F .text	00000078 _read_r
000a1d12 g     O .rwdata	00000002 OSTimeTickHookEn
00096190 g     F .text	000000ac OS_FlagUnlink
00099648 g     F .text	00000180 OSQPost
00083910 g     F .text	0000037c sd_card_read
000a05f4 g     O .rwdata	0000000c __lc_ctype
000a1ca0 g     O .rwdata	00000004 alt_max_fd
00094020 g     F .text	0000006c OS_MemCopy
0009408c g     F .text	000000d4 OS_Sched
00091480 g     F .text	00000138 __unpack_d
0008eed8 g     F .text	00000110 _fclose_r
00081f58 g     F .text	00000464 find_file_in_directory
000970e4 g     F .text	00000104 OSMemGet
00083884 g     F .text	0000008c sd_card_get_attributes
00096d98 g     F .text	00000130 OSMboxQuery
0009b9f4 g     F .text	000001c4 OSTaskNameSet
0008b670 g     F .text	00000034 fflush
000a38e4 g     O .bss	00000004 __malloc_max_sbrked_mem
000a3928 g     O .bss	00000004 OSCtxSwCtr
0009ef10 g     F .text	0000001c OSTimeTickHook
00091944 g     F .text	000001c0 alt_irq_register
000a1cd6 g     O .rwdata	00000002 OSFlagNameSize
00093afc g     F .text	00000104 OS_EventTaskRemoveMulti
0009032c g     F .text	00000074 __adddf3
000938f0 g     F .text	00000154 OS_EventTaskWaitMulti
0008d2c4 g     F .text	00000120 __b2d
000a1cee g     O .rwdata	00000002 OSQSize
0008f83c g     F .text	00000660 __umoddi3
00091d14 g     F .text	000000f4 lseek
0009a224 g     F .text	0000027c OSSemPend
000a1c7c g     O .rwdata	00000004 _global_impure_ptr
000a7754 g     O .bss	00000010 PBSemaphore
00081a44 g     F .text	00000514 get_home_directory_cluster_for_file
0008e300 g     F .text	000005f4 _realloc_r
000a1cd8 g     O .rwdata	00000002 OSLowestPrio
000b8dc8 g       *ABS*	00000000 __bss_end
0009e3c4 g     F .text	000000f8 alt_iic_isr_register
0009ef80 g     F .text	00000020 OSTCBInitHook
000a1d1e g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0009e988 g     F .text	00000110 alt_tick
00096ad8 g     F .text	00000134 OSMboxPost
0008f1d0 g     F .text	0000066c __udivdi3
000a1cc0 g     O .rwdata	00000002 OSEventEn
0009ff04 g     O .rodata	00000028 __mprec_bigtens
0008dff4 g     F .text	00000120 __s2b
000a1d1a g     O .rwdata	00000002 OSTmrCfgNameSize
00090e34 g     F .text	00000194 __floatunsidf
0008d1e4 g     F .text	00000060 __mcmp
000a389c g     O .bss	00000004 current_sector_index
0008b7d8 g     F .text	00000018 __fp_lock_all
0009e37c g     F .text	00000048 alt_ic_irq_enabled
00095f9c g     F .text	000000e4 OS_FlagInit
0009e8f0 g     F .text	00000098 alt_alarm_stop
000806d0 g     F .text	000000d8 mark_cluster
000a1cfc g     O .rwdata	00000002 OSTaskIdleStkSize
000a38f4 g     O .bss	00000004 alt_irq_active
00099db0 g     F .text	000000c0 OSSemAccept
00097414 g     F .text	000000f0 OSMemPut
00096ec8 g     F .text	0000021c OSMemCreate
000a392c g     O .bss	00000004 OSIdleCtrMax
000800ec g     F .exceptions	000000d0 alt_irq_handler
000a0a08 g     O .rwdata	00000028 alt_dev_null
000a1d10 g     O .rwdata	00000002 OSTicksPerSec
00080280 g     F .text	00000044 KEY2_Pressed
000828a8 g     F .text	000001b8 convert_filename_to_name_extension
0009ddc0 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0009eab8 g       .text	00000000 OSIntCtxSw
0009df48 g     F .text	0000001c alt_dcache_flush_all
0008d0b0 g     F .text	00000070 __hi0bits
000a3878 g     O .bss	00000004 is_sd_card_formated_as_FAT16
00090d5c g     F .text	000000d8 __fixdfsi
00087400 g     F .text	00000298 task_launcher
00085e48 g     F .text	00000b64 SD_write_task
00082550 g     F .text	0000023c find_first_empty_record_in_a_subdirectory
000a7764 g     O .bss	00002000 SD_presence_detect_stk
000a3930 g     O .bss	00000004 OSTCBFreeList
000a1d34 g       *ABS*	00000000 __ram_rwdata_end
0009a4a0 g     F .text	0000017c OSSemPendAbort
000a40fc g     O .bss	00000200 ReadQueue
000a1c98 g     O .rwdata	00000008 alt_dev_list
000a38b4 g     O .bss	00000004 WriteImageHeightMailbox
000921e8 g     F .text	00000124 write
0008e218 g     F .text	000000e8 _putc_r
000a1d14 g     O .rwdata	00000002 OSVersionNbr
000a01f4 g       *ABS*	00000000 __ram_rodata_end
0009180c g     F .text	000000d8 fstat
0008781c g     F .text	0000002c fprintf
000a1cbc g     O .rwdata	00000004 OSEndiannessTest
0008ded4 g     F .text	00000120 __pow5mult
000a38d4 g     O .bss	00000004 __nlocale_changed
000877dc g     F .text	00000008 __umodsi3
000a1cce g     O .rwdata	00000002 OSFlagGrpSize
000b8dc8 g       *ABS*	00000000 end
0009cbb0 g     F .text	00000138 altera_avalon_jtag_uart_init
00094304 g     F .text	000000c8 OS_TaskStat
0009f644 g       *ABS*	00000000 __CTOR_LIST__
00100000 g       *ABS*	00000000 __alt_stack_pointer
0009d834 g     F .text	00000090 alt_avalon_timer_sc_init
000910ec g     F .text	00000080 __clzsi2
0009d4e8 g     F .text	000002dc altera_avalon_jtag_uart_write
0008b6fc g     F .text	00000004 __sfp_lock_acquire
0008cd8c g     F .text	000000e4 memchr
00093fcc g     F .text	00000054 OS_MemClr
0009d9e8 g     F .text	00000078 alt_up_character_lcd_write
00087c58 g     F .text	00001ec4 ___vfprintf_internal_r
0009eb88 g     F .text	00000310 OSTaskStkInit
00087b2c g     F .text	00000060 _sprintf_r
0008bac4 g     F .text	00000314 _free_r
0009364c g     F .text	00000194 OS_EventTaskRdy
0009f3bc g     F .text	000001b0 __call_exitprocs
000a3934 g     O .bss	00000001 OSCPUUsage
000a38d8 g     O .bss	00000004 __mlocale_changed
000a1c8c g     O .rwdata	00000004 __malloc_sbrk_base
000801bc g     F .text	0000003c _start
000a3964 g     O .bss	00000004 _alt_tick_rate
000991ac g     F .text	00000320 OSQPend
0009c3b8 g     F .text	0000014c OSTimeDly
0008d9cc g     F .text	0000014c __lshift
000a3968 g     O .bss	00000004 _alt_nticks
00091f30 g     F .text	00000124 read
0009c9a0 g     F .text	00000090 alt_sys_init
0009dc4c g     F .text	000000b0 alt_up_character_lcd_shift_display
0009f284 g     F .text	00000134 __register_exitproc
000a3935 g     O .bss	00000001 OSTaskCtr
0009c504 g     F .text	00000190 OSTimeDlyHMSM
0008db18 g     F .text	00000254 __multiply
0009dcfc g     F .text	00000090 alt_up_character_lcd_erase_pos
000a42fc g     O .bss	00001180 line_buf
0009d0c0 g     F .text	00000074 altera_avalon_jtag_uart_close
000877e4 g     F .text	00000038 __mulsi3
000a01f4 g       *ABS*	00000000 __ram_rwdata_start
0009f648 g       *ABS*	00000000 __ram_rodata_start
000a396c g     O .bss	00000028 __malloc_current_mallinfo
000a1cc2 g     O .rwdata	00000002 OSEventMax
0008d6c4 g     F .text	0000017c __d2b
0009a61c g     F .text	00000128 OSSemPost
000a9764 g     O .bss	00002000 process_Y_stk
0008023c g     F .text	00000044 KEY1_Pressed
000a3874 g     O .bss	00000004 initialized
000931d0 g     F .text	000000e4 OSSchedUnlock
000ab764 g     O .bss	00002000 SD_read_stk
0009ca68 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0009f0c0 g     F .text	00000104 alt_get_fd
000a3938 g     O .bss	00000004 OSMemFreeList
00093324 g     F .text	000000ac OSStatInit
000a3994 g     O .bss	00000014 search_data
00095d04 g     F .text	000000d4 OSFlagQuery
000915b8 g     F .text	000000c8 __fpcmp_parts_d
000a1cf8 g     O .rwdata	00000002 OSTaskCreateExtEn
0008ee68 g     F .text	00000070 _close_r
0009f210 g     F .text	00000074 memcmp
00093630 g     F .text	0000001c OS_Dummy
0009cb18 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
000a547c g     O .bss	00000200 WriteQueue
000b8dc8 g       *ABS*	00000000 __alt_stack_base
0009cb60 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0008787c g     F .text	000000ac _fwrite_r
00082fd0 g     F .text	000000d4 sd_card_find_first
00089b40 g     F .text	0000013c __swsetup_r
000b70b4 g     O .bss	000001e0 OSQTbl
00090764 g     F .text	00000258 __divdf3
0008b8a8 g     F .text	000000f0 __sfp
000a39a8 g     O .bss	00000054 boot_sector_data
0008d528 g     F .text	00000058 __copybits
000a0600 g     O .rwdata	00000408 __malloc_av_
0008b708 g     F .text	00000004 __sinit_lock_release
000a393c g     O .bss	00000004 OSTCBHighRdy
000903a0 g     F .text	000003c4 __muldf3
0008eac0 g     F .text	00000060 __sread
000a3940 g     O .bss	00000004 OSQFreeList
0009efa0 g     F .text	00000120 alt_find_file
0009df64 g     F .text	000000b4 alt_dev_llist_insert
00092474 g     F .text	00000108 __malloc_lock
00087848 g     F .text	00000034 _fprintf_r
0009212c g     F .text	000000bc sbrk
0009277c g     F .text	00000144 OSEventNameSet
0008b474 g     F .text	000001fc _fflush_r
0008eda0 g     F .text	000000c8 _calloc_r
000a3944 g     O .bss	00000001 OSRdyGrp
0008568c g     F .text	000007bc SD_ReadQ_2
000a3874 g       *ABS*	00000000 __bss_start
0008cff0 g     F .text	00000098 memset
000849b4 g     F .text	000000f8 main
000a3900 g     O .bss	00000004 alt_envp
000a38e8 g     O .bss	00000004 __malloc_max_total_mem
000a38b8 g     O .bss	00000004 ReadImageHeightMailbox
0009cac0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0008ed0c g     F .text	0000001c __swbuf
000a38bc g     O .bss	00000008 SDReadQueue
000a0094 g     O .rodata	00000100 OSUnMapTbl
000a1cf2 g     O .rwdata	00000002 OSSemEn
00080430 g     F .text	000000bc Write_Sector_Data
0009db9c g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0009595c g     F .text	000003a8 OSFlagPost
0008e9d4 g     F .text	00000008 __sclose
00084494 g     F .text	000004e4 alt_ucosii_simple_error_handler
00100000 g       *ABS*	00000000 __alt_heap_limit
0008efe8 g     F .text	00000014 fclose
000937e0 g     F .text	00000110 OS_EventTaskWait
000943cc g     F .text	000000c8 OS_TaskStatStkChk
000b8c38 g     O .bss	00000190 _atexit0
0009b6cc g     F .text	00000170 OSTaskDelReq
00089ec0 g     F .text	000015b4 _dtoa_r
0008c64c g     F .text	00000740 _malloc_r
000ad764 g     O .bss	0000006c SD_read_tcb
000978ac g     F .text	00000204 OSMutexCreate
000a1ca4 g     O .rwdata	00000004 alt_errno
000932b4 g     F .text	00000070 OSStart
00092418 g     F .text	0000005c __env_unlock
000ad7d0 g     O .bss	00002000 SD_read2_stk
0008c33c g     F .text	000000b8 _fwalk
0009bbb8 g     F .text	00000218 OSTaskResume
00097504 g     F .text	000000fc OSMemQuery
000a1d04 g     O .rwdata	00000002 OSTaskStatEn
000a1cde g     O .rwdata	00000002 OSMemMax
000997c8 g     F .text	00000188 OSQPostFront
0008e114 g     F .text	00000104 putc
00087714 g     F .text	00000060 __divsi3
000a3945 g     O .bss	00000003 OSRdyTbl
000a1cb8 g     O .rwdata	00000002 OSDebugEn
0009ff60 g     O .rodata	00000014 __thenan_df
0009d9a8 g     F .text	00000040 alt_up_character_lcd_open_dev
0008b998 g     F .text	0000012c _malloc_trim_r
0009f648 g       *ABS*	00000000 __CTOR_END__
000a1cd0 g     O .rwdata	00000002 OSFlagNodeSize
000a3880 g     O .bss	00000004 status_register
000a1d18 g     O .rwdata	00000002 OSTmrCfgMax
0009d974 g     F .text	00000034 alt_up_character_lcd_init
0008eb20 g     F .text	000000bc strcmp
000a3888 g     O .bss	00000004 command_register
00098bd0 g     F .text	00000214 OSQCreate
0009b83c g     F .text	000001b8 OSTaskNameGet
0009f648 g       *ABS*	00000000 __flash_rodata_start
00099950 g     F .text	00000234 OSQPostOpt
000933d0 g     F .text	00000240 OSTimeTick
000a1d00 g     O .rwdata	00000002 OSTaskMax
0009f648 g       *ABS*	00000000 __DTOR_LIST__
00099e70 g     F .text	00000114 OSSemCreate
000a1d24 g     O .rwdata	00000002 OSTmrWheelSize
0009870c g     F .text	000001a8 OSMutexQuery
00090a44 g     F .text	00000088 __nedf2
000a1cfa g     O .rwdata	00000002 OSTaskDelEn
00080000 g       *ABS*	00000000 __alt_mem_sram_0
0009a744 g     F .text	00000130 OSSemQuery
00098de4 g     F .text	00000300 OSQDel
000994cc g     F .text	0000017c OSQPendAbort
0009c96c g     F .text	00000034 alt_irq_init
000920b4 g     F .text	00000078 alt_release_fd
0008062c g     F .text	000000a4 get_cluster_flag
000a38c4 g     O .bss	00000004 SDWriteQueue
000803dc g     F .text	00000054 init_button_irq
00087ab8 g     F .text	00000074 sprintf
0009dd8c g     F .text	00000034 alt_up_character_lcd_cursor_off
0009ff74 g     O .rodata	00000100 __clz_tab
00080ac8 g     F .text	000001f8 Write_File_Record_At_Offset
000a38dc g     O .bss	00000004 _PathLocale
000af7d0 g     O .bss	00002000 SD_write_stk
00083c8c g     F .text	000005f0 sd_card_write
0009f1c4 g     F .text	00000014 atexit
0008ed28 g     F .text	00000078 _write_r
00093144 g     F .text	0000008c OSSchedLock
0008c49c g     F .text	0000001c setlocale
000871c0 g     F .text	00000240 process_Y_task
00094c34 g     F .text	0000013c OSFlagCreate
00080cc0 g     F .text	00000554 Check_for_DOS_FAT
00082a60 g     F .text	000002ec create_file
00084c9c g     F .text	00000084 init_create_tasks
000a1c78 g     O .rwdata	00000004 _impure_ptr
000a3884 g     O .bss	00000004 CSD_register_w0
000a38f8 g     O .bss	00000004 alt_argc
0009e0dc g     F .text	00000064 _do_dtors
000a1cca g     O .rwdata	00000002 OSEventMultiEn
00084e98 g     F .text	000007f4 SD_read_task
000b17d0 g     O .bss	0000006c SD_read2_tcb
00094d70 g     F .text	000002a8 OSFlagDel
000a3948 g     O .bss	00000004 OSEventFreeList
0009695c g     F .text	0000017c OSMboxPendAbort
00080020 g       .exceptions	00000000 alt_irq_entry
0008d244 g     F .text	00000080 __ulp
0008e8f4 g     F .text	00000040 __isinfd
000a1d16 g     O .rwdata	00000002 OSTmrEn
000952b0 g     F .text	00000644 OSFlagPend
0008b7c0 g     F .text	00000018 __fp_unlock_all
000a1c90 g     O .rwdata	00000008 alt_fs_list
00084450 g     F .text	00000044 alt_ucosii_check_return_code
00081408 g     F .text	00000290 check_file_name_for_FAT16_compliance
000941d0 g     F .text	00000080 OS_StrCopy
000a1ce0 g     O .rwdata	00000002 OSMemNameSize
0009ef48 g     F .text	0000001c OSInitHookEnd
00080020 g       *ABS*	00000000 __ram_exceptions_start
000a1d0c g     O .rwdata	00000002 OSTCBPrioTblMax
0008c408 g     F .text	00000010 localeconv
000a1d08 g     O .rwdata	00000002 OSTaskStatStkChkEn
000962e0 g     F .text	00000114 OSMboxCreate
0009e1f0 g     F .text	00000050 alt_ic_isr_register
000a1cdc g     O .rwdata	00000002 OSMemEn
00087928 g     F .text	00000040 fwrite
000a3890 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
000a1ce6 g     O .rwdata	00000002 OSMutexEn
000a1d34 g       *ABS*	00000000 _edata
000801f8 g     F .text	00000044 KEY0_Pressed
000b8dc8 g       *ABS*	00000000 _end
000a39fc g     O .bss	00000500 active_files
000a394c g     O .bss	00000001 OSIntNesting
000801bc g       *ABS*	00000000 __ram_exceptions_end
00082d4c g     F .text	00000154 copy_file_record_name_to_string
0009d134 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0009c694 g     F .text	00000210 OSTimeDlyResume
00081214 g     F .text	00000124 Look_for_FAT16
0009515c g     F .text	00000154 OSFlagNameSet
00096694 g     F .text	000002c8 OSMboxPend
0009bdd0 g     F .text	000001fc OSTaskStkChk
0009e2dc g     F .text	000000a0 alt_ic_irq_disable
000a1ce2 g     O .rwdata	00000002 OSMemSize
0008ea44 g     F .text	0000007c __swrite
000a1c88 g     O .rwdata	00000004 __malloc_trim_threshold
0009ea98 g     F .text	00000020 altera_nios2_qsys_irq_init
000a3950 g     O .bss	00000004 OSTCBCur
0009f1d8 g     F .text	00000038 exit
000984a8 g     F .text	00000264 OSMutexPost
000a38c8 g     O .bss	00000004 WriteImageWidthMailbox
000a1ce4 g     O .rwdata	00000002 OSMemTblSize
0008c274 g     F .text	000000c8 _fwalk_reent
0008d840 g     F .text	0000018c __mdiff
00087774 g     F .text	00000060 __modsi3
0008053c g     F .text	000000f0 Read_Sector_Data
0009623c g     F .text	000000a4 OSMboxAccept
00100000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00082ea0 g     F .text	00000058 sd_card_open_dev
0008b700 g     F .text	00000004 __sfp_lock_release
00092f74 g     F .text	00000054 OSInit
0009c1f8 g     F .text	00000144 OSTaskQuery
0009da60 g     F .text	00000078 alt_up_character_lcd_string
00099d04 g     F .text	000000ac OS_QInit
00094250 g     F .text	00000058 OS_StrLen
000b183c g     O .bss	0000006c SD_presence_detect_tcb
000972f4 g     F .text	00000120 OSMemNameSet
000a1c74 g     O .rwdata	00000004 performance_name
000a1cfe g     O .rwdata	00000002 OSTaskProfileEn
000a3954 g     O .bss	00000004 OSTime
000b18a8 g     O .bss	00002000 initialize_task_stk
000b7294 g     O .bss	00000800 OSTaskIdleStk
0009f5ac g     F .text	0000002c _exit
0008e934 g     F .text	00000030 __isnand
00096c0c g     F .text	0000018c OSMboxPostOpt
0009ddf4 g     F .text	00000154 alt_alarm_start
00095018 g     F .text	00000144 OSFlagNameGet
0009c8a4 g     F .text	00000064 OSTimeGet
00090fc8 g     F .text	00000124 __muldi3
0008c4b8 g     F .text	00000194 __smakebuf_r
00087b8c g     F .text	00000074 strlen
0009eed8 g     F .text	0000001c OSTaskSwHook
0009e704 g     F .text	0000018c open
000b7a94 g     O .bss	00000b40 OSEventTbl
00090b54 g     F .text	00000088 __gedf2
000b85d4 g     O .bss	00000510 OSTCBTbl
0009a874 g     F .text	00000104 OSSemSet
0009e1d4 g     F .text	0000001c alt_icache_flush_all
000a38cc g     O .bss	00000004 YMailbox
000a38d0 g     O .bss	00000004 ReadImageWidthMailbox
0009db24 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
000a1ca8 g     O .rwdata	00000004 alt_priority_mask
000830a4 g     F .text	000003a8 sd_card_find_next
00099f84 g     F .text	000002a0 OSSemDel
000a3958 g     O .bss	00000004 OSFlagFreeList
0009e240 g     F .text	0000009c alt_ic_irq_enable
000a1cc4 g     O .rwdata	00000002 OSEventNameSize
000963f4 g     F .text	000002a0 OSMboxDel
00089b1c g     F .text	00000024 __vfprintf_internal
000a395c g     O .bss	00000001 OSStatRdy
000b8ae4 g     O .bss	00000054 OSTCBPrioTbl
0009236c g     F .text	000000ac __env_lock
000a1d0a g     O .rwdata	00000002 OSTaskSwHookEn
000902ac g     F .text	00000080 __subdf3
000b38a8 g     O .bss	0000006c SD_write_tcb
0008427c g     F .text	000001d4 sd_card_fclose
0008d120 g     F .text	000000c4 __lo0bits
000a1d2c g     O .rwdata	00000008 alt_alarm_list
000b3914 g     O .bss	00002000 task_launcher_stk
000a1cd2 g     O .rwdata	00000002 OSFlagWidth
0009e078 g     F .text	00000064 _do_ctors
00080308 g     F .text	000000d4 handle_button_interrupts
00091680 g     F .text	00000100 close
000a3908 g     O .bss	00000004 alt_envsem
000a3960 g     O .bss	00000004 OSIdleCtrRun
00093610 g     F .text	00000020 OSVersion
000a1d1c g     O .rwdata	00000002 OSTmrCfgWheelSize
00091c28 g     F .text	00000080 alt_load
0009c33c g     F .text	0000007c OS_TaskStkClr
0009116c g     F .text	00000314 __pack_d
000a1cf6 g     O .rwdata	00000002 OSTaskCreateEn
00081758 g     F .text	000002ec match_file_record_to_name_ext
00093c00 g     F .text	00000068 OS_EventWaitListInit
0009ef64 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
0008b704 g     F .text	00000004 __sinit_lock_acquire
0008dda8 g     F .text	0000012c __multadd
0009bfcc g     F .text	0000022c OSTaskSuspend
0008d088 g     F .text	00000028 _Bfree
0008344c g     F .text	000003a8 sd_card_fopen
000942a8 g     F .text	0000005c OS_TaskIdle
000a1d22 g     O .rwdata	00000002 OSTmrTblSize
00099b84 g     F .text	00000180 OSQQuery



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08406f14 	ori	at,at,444
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   80044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   800fc:	0092fc80 	call	92fc8 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80100:	0005313a 	rdctl	r2,ipending
   80104:	e0bffc15 	stw	r2,-16(fp)

  return active;
   80108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8010c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   80110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80114:	00800044 	movi	r2,1
   80118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8011c:	e0ffff17 	ldw	r3,-4(fp)
   80120:	e0bffe17 	ldw	r2,-8(fp)
   80124:	1884703a 	and	r2,r3,r2
   80128:	1005003a 	cmpeq	r2,r2,zero
   8012c:	1000161e 	bne	r2,zero,80188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   80130:	e0bffd17 	ldw	r2,-12(fp)
   80134:	00c00334 	movhi	r3,12
   80138:	18e2ce04 	addi	r3,r3,-29896
   8013c:	100490fa 	slli	r2,r2,3
   80140:	10c5883a 	add	r2,r2,r3
   80144:	11400017 	ldw	r5,0(r2)
   80148:	e0bffd17 	ldw	r2,-12(fp)
   8014c:	00c00334 	movhi	r3,12
   80150:	18e2ce04 	addi	r3,r3,-29896
   80154:	100490fa 	slli	r2,r2,3
   80158:	10c5883a 	add	r2,r2,r3
   8015c:	10800104 	addi	r2,r2,4
   80160:	11000017 	ldw	r4,0(r2)
   80164:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80168:	0005313a 	rdctl	r2,ipending
   8016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
   80170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   80178:	e0bfff17 	ldw	r2,-4(fp)
   8017c:	1004c03a 	cmpne	r2,r2,zero
   80180:	103fe31e 	bne	r2,zero,80110 <alt_irq_handler+0x24>
   80184:	00000706 	br	801a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80188:	e0bffe17 	ldw	r2,-8(fp)
   8018c:	1085883a 	add	r2,r2,r2
   80190:	e0bffe15 	stw	r2,-8(fp)
      i++;
   80194:	e0bffd17 	ldw	r2,-12(fp)
   80198:	10800044 	addi	r2,r2,1
   8019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a0:	003fde06 	br	8011c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801a4:	00930440 	call	93044 <OSIntExit>
}
   801a8:	e037883a 	mov	sp,fp
   801ac:	dfc00117 	ldw	ra,4(sp)
   801b0:	df000017 	ldw	fp,0(sp)
   801b4:	dec00204 	addi	sp,sp,8
   801b8:	f800283a 	ret

Disassembly of section .text:

000801bc <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801bc:	06c00434 	movhi	sp,16
    ori sp, sp, %lo(__alt_stack_pointer)
   801c0:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   801c4:	068002b4 	movhi	gp,10
    ori gp, gp, %lo(_gp)
   801c8:	d6a71d14 	ori	gp,gp,40052
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801cc:	008002b4 	movhi	r2,10
    ori r2, r2, %lo(__bss_start)
   801d0:	108e1d14 	ori	r2,r2,14452

    movhi r3, %hi(__bss_end)
   801d4:	00c002f4 	movhi	r3,11
    ori r3, r3, %lo(__bss_end)
   801d8:	18e37214 	ori	r3,r3,36296

    beq r2, r3, 1f
   801dc:	10c00326 	beq	r2,r3,801ec <_start+0x30>

0:
    stw zero, (r2)
   801e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801e8:	10fffd36 	bltu	r2,r3,801e0 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801ec:	0091c280 	call	91c28 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801f0:	0091e680 	call	91e68 <alt_main>

000801f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   801f4:	003fff06 	br	801f4 <alt_after_alt_main>

000801f8 <KEY0_Pressed>:

// Semaphore from uCOS
extern OS_EVENT *PBSemaphore[];

// Function for post semaphore when PB0 is pressed
void KEY0_Pressed() {
   801f8:	defffd04 	addi	sp,sp,-12
   801fc:	dfc00215 	stw	ra,8(sp)
   80200:	df000115 	stw	fp,4(sp)
   80204:	df000104 	addi	fp,sp,4
	INT8U return_code = OS_NO_ERR;
   80208:	e03fff05 	stb	zero,-4(fp)

	return_code = OSSemPost(PBSemaphore[0]);
   8020c:	008002b4 	movhi	r2,10
   80210:	109dd504 	addi	r2,r2,30548
   80214:	11000017 	ldw	r4,0(r2)
   80218:	009a61c0 	call	9a61c <OSSemPost>
   8021c:	e0bfff05 	stb	r2,-4(fp)
	alt_ucosii_check_return_code(return_code);
   80220:	e13fff03 	ldbu	r4,-4(fp)
   80224:	00844500 	call	84450 <alt_ucosii_check_return_code>
}
   80228:	e037883a 	mov	sp,fp
   8022c:	dfc00117 	ldw	ra,4(sp)
   80230:	df000017 	ldw	fp,0(sp)
   80234:	dec00204 	addi	sp,sp,8
   80238:	f800283a 	ret

0008023c <KEY1_Pressed>:

// Function for post semaphore when PB1 is pressed
void KEY1_Pressed() {
   8023c:	defffd04 	addi	sp,sp,-12
   80240:	dfc00215 	stw	ra,8(sp)
   80244:	df000115 	stw	fp,4(sp)
   80248:	df000104 	addi	fp,sp,4
	INT8U return_code = OS_NO_ERR;
   8024c:	e03fff05 	stb	zero,-4(fp)

	return_code = OSSemPost(PBSemaphore[1]);
   80250:	008002b4 	movhi	r2,10
   80254:	109dd504 	addi	r2,r2,30548
   80258:	11000117 	ldw	r4,4(r2)
   8025c:	009a61c0 	call	9a61c <OSSemPost>
   80260:	e0bfff05 	stb	r2,-4(fp)
	alt_ucosii_check_return_code(return_code);
   80264:	e13fff03 	ldbu	r4,-4(fp)
   80268:	00844500 	call	84450 <alt_ucosii_check_return_code>
}
   8026c:	e037883a 	mov	sp,fp
   80270:	dfc00117 	ldw	ra,4(sp)
   80274:	df000017 	ldw	fp,0(sp)
   80278:	dec00204 	addi	sp,sp,8
   8027c:	f800283a 	ret

00080280 <KEY2_Pressed>:

// Function for post semaphore when PB2 is pressed
void KEY2_Pressed() {
   80280:	defffd04 	addi	sp,sp,-12
   80284:	dfc00215 	stw	ra,8(sp)
   80288:	df000115 	stw	fp,4(sp)
   8028c:	df000104 	addi	fp,sp,4
	INT8U return_code = OS_NO_ERR;
   80290:	e03fff05 	stb	zero,-4(fp)

	return_code = OSSemPost(PBSemaphore[2]);
   80294:	008002b4 	movhi	r2,10
   80298:	109dd504 	addi	r2,r2,30548
   8029c:	11000217 	ldw	r4,8(r2)
   802a0:	009a61c0 	call	9a61c <OSSemPost>
   802a4:	e0bfff05 	stb	r2,-4(fp)
	alt_ucosii_check_return_code(return_code);
   802a8:	e13fff03 	ldbu	r4,-4(fp)
   802ac:	00844500 	call	84450 <alt_ucosii_check_return_code>
}
   802b0:	e037883a 	mov	sp,fp
   802b4:	dfc00117 	ldw	ra,4(sp)
   802b8:	df000017 	ldw	fp,0(sp)
   802bc:	dec00204 	addi	sp,sp,8
   802c0:	f800283a 	ret

000802c4 <KEY3_Pressed>:

// Function for post semaphore when PB3 is pressed
void KEY3_Pressed() {
   802c4:	defffd04 	addi	sp,sp,-12
   802c8:	dfc00215 	stw	ra,8(sp)
   802cc:	df000115 	stw	fp,4(sp)
   802d0:	df000104 	addi	fp,sp,4
	INT8U return_code = OS_NO_ERR;
   802d4:	e03fff05 	stb	zero,-4(fp)

	return_code = OSSemPost(PBSemaphore[3]);
   802d8:	008002b4 	movhi	r2,10
   802dc:	109dd504 	addi	r2,r2,30548
   802e0:	11000317 	ldw	r4,12(r2)
   802e4:	009a61c0 	call	9a61c <OSSemPost>
   802e8:	e0bfff05 	stb	r2,-4(fp)
	alt_ucosii_check_return_code(return_code);
   802ec:	e13fff03 	ldbu	r4,-4(fp)
   802f0:	00844500 	call	84450 <alt_ucosii_check_return_code>
}
   802f4:	e037883a 	mov	sp,fp
   802f8:	dfc00117 	ldw	ra,4(sp)
   802fc:	df000017 	ldw	fp,0(sp)
   80300:	dec00204 	addi	sp,sp,8
   80304:	f800283a 	ret

00080308 <handle_button_interrupts>:
// ISR when any PB is pressed
void handle_button_interrupts()
{
   80308:	defffd04 	addi	sp,sp,-12
   8030c:	dfc00215 	stw	ra,8(sp)
   80310:	df000115 	stw	fp,4(sp)
   80314:	df000104 	addi	fp,sp,4
	OSIntEnter();
   80318:	0092fc80 	call	92fc8 <OSIntEnter>

	outport(LED_GREEN_O_BASE,get_pio_edge_cap(PUSH_BUTTON_I_BASE)*get_pio_edge_cap(PUSH_BUTTON_I_BASE));
   8031c:	00800434 	movhi	r2,16
   80320:	10852304 	addi	r2,r2,5260
   80324:	11000037 	ldwio	r4,0(r2)
   80328:	00800434 	movhi	r2,16
   8032c:	10852304 	addi	r2,r2,5260
   80330:	11400037 	ldwio	r5,0(r2)
   80334:	00877e40 	call	877e4 <__mulsi3>
   80338:	1007883a 	mov	r3,r2
   8033c:	00800434 	movhi	r2,16
   80340:	10851804 	addi	r2,r2,5216
   80344:	10c00035 	stwio	r3,0(r2)
	switch(get_pio_edge_cap(PUSH_BUTTON_I_BASE)) {
   80348:	00800434 	movhi	r2,16
   8034c:	10852304 	addi	r2,r2,5260
   80350:	10800037 	ldwio	r2,0(r2)
   80354:	e0bfff15 	stw	r2,-4(fp)
   80358:	e0ffff17 	ldw	r3,-4(fp)
   8035c:	188000a0 	cmpeqi	r2,r3,2
   80360:	1000101e 	bne	r2,zero,803a4 <handle_button_interrupts+0x9c>
   80364:	e0ffff17 	ldw	r3,-4(fp)
   80368:	188000c8 	cmpgei	r2,r3,3
   8036c:	1000041e 	bne	r2,zero,80380 <handle_button_interrupts+0x78>
   80370:	e0ffff17 	ldw	r3,-4(fp)
   80374:	18800060 	cmpeqi	r2,r3,1
   80378:	1000081e 	bne	r2,zero,8039c <handle_button_interrupts+0x94>
   8037c:	00000e06 	br	803b8 <handle_button_interrupts+0xb0>
   80380:	e0ffff17 	ldw	r3,-4(fp)
   80384:	18800120 	cmpeqi	r2,r3,4
   80388:	1000081e 	bne	r2,zero,803ac <handle_button_interrupts+0xa4>
   8038c:	e0ffff17 	ldw	r3,-4(fp)
   80390:	18800220 	cmpeqi	r2,r3,8
   80394:	1000071e 	bne	r2,zero,803b4 <handle_button_interrupts+0xac>
   80398:	00000706 	br	803b8 <handle_button_interrupts+0xb0>
	case 1: KEY0_Pressed(); break;
   8039c:	00801f80 	call	801f8 <KEY0_Pressed>
   803a0:	00000506 	br	803b8 <handle_button_interrupts+0xb0>
	case 2: KEY1_Pressed(); break;
   803a4:	008023c0 	call	8023c <KEY1_Pressed>
   803a8:	00000306 	br	803b8 <handle_button_interrupts+0xb0>
	case 4: KEY2_Pressed(); break;
   803ac:	00802800 	call	80280 <KEY2_Pressed>
   803b0:	00000106 	br	803b8 <handle_button_interrupts+0xb0>
	case 8: KEY3_Pressed(); break;
   803b4:	00802c40 	call	802c4 <KEY3_Pressed>
	}
	set_pio_edge_cap(PUSH_BUTTON_I_BASE,0x0);
   803b8:	00800434 	movhi	r2,16
   803bc:	10852304 	addi	r2,r2,5260
   803c0:	10000035 	stwio	zero,0(r2)

	OSIntExit();
   803c4:	00930440 	call	93044 <OSIntExit>
}
   803c8:	e037883a 	mov	sp,fp
   803cc:	dfc00117 	ldw	ra,4(sp)
   803d0:	df000017 	ldw	fp,0(sp)
   803d4:	dec00204 	addi	sp,sp,8
   803d8:	f800283a 	ret

000803dc <init_button_irq>:

// Function for initializing the ISR of the PBs
// The PBs are setup to generate interrupt on falling edge,
// and the interrupt is captured when the edge comes
void init_button_irq() {
   803dc:	defffe04 	addi	sp,sp,-8
   803e0:	dfc00115 	stw	ra,4(sp)
   803e4:	df000015 	stw	fp,0(sp)
   803e8:	d839883a 	mov	fp,sp
  // Enable all 4 button interrupts
  set_pio_irq_mask(PUSH_BUTTON_I_BASE, BUTTON_INT_MASK);
   803ec:	00800434 	movhi	r2,16
   803f0:	10852204 	addi	r2,r2,5256
   803f4:	00c003c4 	movi	r3,15
   803f8:	10c00035 	stwio	r3,0(r2)

  // Reset the edge capture register
  set_pio_edge_cap(PUSH_BUTTON_I_BASE, 0x0);
   803fc:	00800434 	movhi	r2,16
   80400:	10852304 	addi	r2,r2,5260
   80404:	10000035 	stwio	zero,0(r2)

  // Register the interrupt handler
  alt_irq_register( PUSH_BUTTON_I_IRQ, NULL, (void*)handle_button_interrupts );
   80408:	01000084 	movi	r4,2
   8040c:	000b883a 	mov	r5,zero
   80410:	01800234 	movhi	r6,8
   80414:	3180c204 	addi	r6,r6,776
   80418:	00919440 	call	91944 <alt_irq_register>
}
   8041c:	e037883a 	mov	sp,fp
   80420:	dfc00117 	ldw	ra,4(sp)
   80424:	df000017 	ldw	fp,0(sp)
   80428:	dec00204 	addi	sp,sp,8
   8042c:	f800283a 	ret

00080430 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
   80430:	defffa04 	addi	sp,sp,-24
   80434:	dfc00515 	stw	ra,20(sp)
   80438:	df000415 	stw	fp,16(sp)
   8043c:	df000404 	addi	fp,sp,16
   80440:	e13ffe15 	stw	r4,-8(fp)
   80444:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
   80448:	e03ffd15 	stw	zero,-12(fp)
    
    if (sd_card_is_Present())
   8044c:	0082ef80 	call	82ef8 <sd_card_is_Present>
   80450:	1005003a 	cmpeq	r2,r2,zero
   80454:	10001f1e 	bne	r2,zero,804d4 <Write_Sector_Data+0xa4>
    {
        short int reg_state = 0xff;
   80458:	00803fc4 	movi	r2,255
   8045c:	e0bffc0d 	sth	r2,-16(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        *command_argument_register = (sector_index + partition_offset)*512;
   80460:	d1270617 	ldw	r4,-25576(gp)
   80464:	e0fffe17 	ldw	r3,-8(fp)
   80468:	e0bfff17 	ldw	r2,-4(fp)
   8046c:	1885883a 	add	r2,r3,r2
   80470:	1004927a 	slli	r2,r2,9
   80474:	20800015 	stw	r2,0(r4)
        *command_register = CMD_WRITE_BLOCK;
   80478:	d0e70517 	ldw	r3,-25580(gp)
   8047c:	00800604 	movi	r2,24
   80480:	1880000d 	sth	r2,0(r3)
        do {
            reg_state = *aux_status_register;
   80484:	d0a70217 	ldw	r2,-25592(gp)
   80488:	1080000b 	ldhu	r2,0(r2)
   8048c:	e0bffc0d 	sth	r2,-16(fp)
        } while ((reg_state & 0x04)!=0);
   80490:	e0bffc0b 	ldhu	r2,-16(fp)
   80494:	10bfffcc 	andi	r2,r2,65535
   80498:	1080010c 	andi	r2,r2,4
   8049c:	1004c03a 	cmpne	r2,r2,zero
   804a0:	103ff81e 	bne	r2,zero,80484 <Write_Sector_Data+0x54>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
   804a4:	e0bffc0b 	ldhu	r2,-16(fp)
   804a8:	10bfffcc 	andi	r2,r2,65535
   804ac:	1080040c 	andi	r2,r2,16
   804b0:	1004c03a 	cmpne	r2,r2,zero
   804b4:	1000071e 	bne	r2,zero,804d4 <Write_Sector_Data+0xa4>
        {
            result = true;
   804b8:	00800044 	movi	r2,1
   804bc:	e0bffd15 	stw	r2,-12(fp)
            current_sector_modified = false;
   804c0:	d0270915 	stw	zero,-25564(gp)
            current_sector_index = sector_index+partition_offset;
   804c4:	e0fffe17 	ldw	r3,-8(fp)
   804c8:	e0bfff17 	ldw	r2,-4(fp)
   804cc:	1885883a 	add	r2,r3,r2
   804d0:	d0a70a15 	stw	r2,-25560(gp)
        }
    }
    return result;
   804d4:	e0bffd17 	ldw	r2,-12(fp)
}
   804d8:	e037883a 	mov	sp,fp
   804dc:	dfc00117 	ldw	ra,4(sp)
   804e0:	df000017 	ldw	fp,0(sp)
   804e4:	dec00204 	addi	sp,sp,8
   804e8:	f800283a 	ret

000804ec <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
   804ec:	defffd04 	addi	sp,sp,-12
   804f0:	dfc00215 	stw	ra,8(sp)
   804f4:	df000115 	stw	fp,4(sp)
   804f8:	df000104 	addi	fp,sp,4
    bool result = true;
   804fc:	00800044 	movi	r2,1
   80500:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
   80504:	d0a70917 	ldw	r2,-25564(gp)
   80508:	1005003a 	cmpeq	r2,r2,zero
   8050c:	1000051e 	bne	r2,zero,80524 <Save_Modified_Sector+0x38>
    {
        result = Write_Sector_Data(current_sector_index, 0);
   80510:	d0a70a17 	ldw	r2,-25560(gp)
   80514:	1009883a 	mov	r4,r2
   80518:	000b883a 	mov	r5,zero
   8051c:	00804300 	call	80430 <Write_Sector_Data>
   80520:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
   80524:	e0bfff17 	ldw	r2,-4(fp)
}
   80528:	e037883a 	mov	sp,fp
   8052c:	dfc00117 	ldw	ra,4(sp)
   80530:	df000017 	ldw	fp,0(sp)
   80534:	dec00204 	addi	sp,sp,8
   80538:	f800283a 	ret

0008053c <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
   8053c:	defff904 	addi	sp,sp,-28
   80540:	dfc00615 	stw	ra,24(sp)
   80544:	df000515 	stw	fp,20(sp)
   80548:	df000504 	addi	fp,sp,20
   8054c:	e13ffd15 	stw	r4,-12(fp)
   80550:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
   80554:	e03ffc15 	stw	zero,-16(fp)
    
	if (sd_card_is_Present())
   80558:	0082ef80 	call	82ef8 <sd_card_is_Present>
   8055c:	1005003a 	cmpeq	r2,r2,zero
   80560:	10002a1e 	bne	r2,zero,8060c <Read_Sector_Data+0xd0>
	{
		short int reg_state = 0xff;
   80564:	00803fc4 	movi	r2,255
   80568:	e0bffb0d 	sth	r2,-20(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
   8056c:	d0a70917 	ldw	r2,-25564(gp)
   80570:	1005003a 	cmpeq	r2,r2,zero
   80574:	1000081e 	bne	r2,zero,80598 <Read_Sector_Data+0x5c>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
   80578:	d0a70a17 	ldw	r2,-25560(gp)
   8057c:	1009883a 	mov	r4,r2
   80580:	000b883a 	mov	r5,zero
   80584:	00804300 	call	80430 <Write_Sector_Data>
   80588:	1004c03a 	cmpne	r2,r2,zero
   8058c:	1000021e 	bne	r2,zero,80598 <Read_Sector_Data+0x5c>
            {
                return false;
   80590:	e03fff15 	stw	zero,-4(fp)
   80594:	00001f06 	br	80614 <Read_Sector_Data+0xd8>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		*command_argument_register = (sector_index + partition_offset)*512;
   80598:	d1270617 	ldw	r4,-25576(gp)
   8059c:	e0fffd17 	ldw	r3,-12(fp)
   805a0:	e0bffe17 	ldw	r2,-8(fp)
   805a4:	1885883a 	add	r2,r3,r2
   805a8:	1004927a 	slli	r2,r2,9
   805ac:	20800015 	stw	r2,0(r4)
		*command_register = CMD_READ_BLOCK;
   805b0:	d0e70517 	ldw	r3,-25580(gp)
   805b4:	00800444 	movi	r2,17
   805b8:	1880000d 	sth	r2,0(r3)
		do {
			reg_state = *aux_status_register;
   805bc:	d0a70217 	ldw	r2,-25592(gp)
   805c0:	1080000b 	ldhu	r2,0(r2)
   805c4:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04)!=0);
   805c8:	e0bffb0b 	ldhu	r2,-20(fp)
   805cc:	10bfffcc 	andi	r2,r2,65535
   805d0:	1080010c 	andi	r2,r2,4
   805d4:	1004c03a 	cmpne	r2,r2,zero
   805d8:	103ff81e 	bne	r2,zero,805bc <Read_Sector_Data+0x80>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
   805dc:	e0bffb0b 	ldhu	r2,-20(fp)
   805e0:	10bfffcc 	andi	r2,r2,65535
   805e4:	1080040c 	andi	r2,r2,16
   805e8:	1004c03a 	cmpne	r2,r2,zero
   805ec:	1000071e 	bne	r2,zero,8060c <Read_Sector_Data+0xd0>
		{
			result = true;
   805f0:	00800044 	movi	r2,1
   805f4:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
   805f8:	d0270915 	stw	zero,-25564(gp)
            current_sector_index = sector_index+partition_offset;
   805fc:	e0fffd17 	ldw	r3,-12(fp)
   80600:	e0bffe17 	ldw	r2,-8(fp)
   80604:	1885883a 	add	r2,r3,r2
   80608:	d0a70a15 	stw	r2,-25560(gp)
		}
	}
	return result;
   8060c:	e0bffc17 	ldw	r2,-16(fp)
   80610:	e0bfff15 	stw	r2,-4(fp)
   80614:	e0bfff17 	ldw	r2,-4(fp)
}
   80618:	e037883a 	mov	sp,fp
   8061c:	dfc00117 	ldw	ra,4(sp)
   80620:	df000017 	ldw	fp,0(sp)
   80624:	dec00204 	addi	sp,sp,8
   80628:	f800283a 	ret

0008062c <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
   8062c:	defffa04 	addi	sp,sp,-24
   80630:	dfc00515 	stw	ra,20(sp)
   80634:	df000415 	stw	fp,16(sp)
   80638:	df000404 	addi	fp,sp,16
   8063c:	e13ffd15 	stw	r4,-12(fp)
   80640:	e17ffe15 	stw	r5,-8(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
   80644:	e0bffd17 	ldw	r2,-12(fp)
   80648:	1006d23a 	srli	r3,r2,8
   8064c:	d0a70717 	ldw	r2,-25572(gp)
   80650:	1885883a 	add	r2,r3,r2
   80654:	e0bffc15 	stw	r2,-16(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
   80658:	008002b4 	movhi	r2,10
   8065c:	108e6a04 	addi	r2,r2,14760
   80660:	10c01117 	ldw	r3,68(r2)
   80664:	e0bffc17 	ldw	r2,-16(fp)
   80668:	10c5883a 	add	r2,r2,r3
   8066c:	e0bffc15 	stw	r2,-16(fp)
     
    if (sector_index != current_sector_index)
   80670:	d0e70a17 	ldw	r3,-25560(gp)
   80674:	e0bffc17 	ldw	r2,-16(fp)
   80678:	10c00726 	beq	r2,r3,80698 <get_cluster_flag+0x6c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
   8067c:	e13ffc17 	ldw	r4,-16(fp)
   80680:	000b883a 	mov	r5,zero
   80684:	008053c0 	call	8053c <Read_Sector_Data>
   80688:	1004c03a 	cmpne	r2,r2,zero
   8068c:	1000021e 	bne	r2,zero,80698 <get_cluster_flag+0x6c>
        {
            return false;
   80690:	e03fff15 	stw	zero,-4(fp)
   80694:	00000806 	br	806b8 <get_cluster_flag+0x8c>
        }
    }
    *flag = (*((volatile unsigned short int *) SD_CARD_BUFFER(SD_CARD_0_BASE, 2*(cluster_index % 256))));
   80698:	e0bffd17 	ldw	r2,-12(fp)
   8069c:	10803fcc 	andi	r2,r2,255
   806a0:	1085883a 	add	r2,r2,r2
   806a4:	10c0000b 	ldhu	r3,0(r2)
   806a8:	e0bffe17 	ldw	r2,-8(fp)
   806ac:	10c0000d 	sth	r3,0(r2)
    return true;
   806b0:	00800044 	movi	r2,1
   806b4:	e0bfff15 	stw	r2,-4(fp)
   806b8:	e0bfff17 	ldw	r2,-4(fp)
}
   806bc:	e037883a 	mov	sp,fp
   806c0:	dfc00117 	ldw	ra,4(sp)
   806c4:	df000017 	ldw	fp,0(sp)
   806c8:	dec00204 	addi	sp,sp,8
   806cc:	f800283a 	ret

000806d0 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
   806d0:	defff904 	addi	sp,sp,-28
   806d4:	dfc00615 	stw	ra,24(sp)
   806d8:	df000515 	stw	fp,20(sp)
   806dc:	df000504 	addi	fp,sp,20
   806e0:	e13ffc15 	stw	r4,-16(fp)
   806e4:	e1bffe15 	stw	r6,-8(fp)
   806e8:	e17ffd0d 	sth	r5,-12(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
   806ec:	e0bffc17 	ldw	r2,-16(fp)
   806f0:	1006d23a 	srli	r3,r2,8
   806f4:	d0a70717 	ldw	r2,-25572(gp)
   806f8:	1885883a 	add	r2,r3,r2
   806fc:	e0bffb15 	stw	r2,-20(fp)
    
    if (first_fat)
   80700:	e0bffe17 	ldw	r2,-8(fp)
   80704:	1005003a 	cmpeq	r2,r2,zero
   80708:	1000071e 	bne	r2,zero,80728 <mark_cluster+0x58>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
   8070c:	008002b4 	movhi	r2,10
   80710:	108e6a04 	addi	r2,r2,14760
   80714:	10c01117 	ldw	r3,68(r2)
   80718:	e0bffb17 	ldw	r2,-20(fp)
   8071c:	10c5883a 	add	r2,r2,r3
   80720:	e0bffb15 	stw	r2,-20(fp)
   80724:	00000606 	br	80740 <mark_cluster+0x70>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
   80728:	008002b4 	movhi	r2,10
   8072c:	108e6a04 	addi	r2,r2,14760
   80730:	10c01217 	ldw	r3,72(r2)
   80734:	e0bffb17 	ldw	r2,-20(fp)
   80738:	10c5883a 	add	r2,r2,r3
   8073c:	e0bffb15 	stw	r2,-20(fp)
    }
     
    if (sector_index != current_sector_index)
   80740:	d0e70a17 	ldw	r3,-25560(gp)
   80744:	e0bffb17 	ldw	r2,-20(fp)
   80748:	10c00726 	beq	r2,r3,80768 <mark_cluster+0x98>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
   8074c:	e13ffb17 	ldw	r4,-20(fp)
   80750:	000b883a 	mov	r5,zero
   80754:	008053c0 	call	8053c <Read_Sector_Data>
   80758:	1004c03a 	cmpne	r2,r2,zero
   8075c:	1000021e 	bne	r2,zero,80768 <mark_cluster+0x98>
        {
            return false;
   80760:	e03fff15 	stw	zero,-4(fp)
   80764:	00000a06 	br	80790 <mark_cluster+0xc0>
        }
    }
    (*((volatile short int *) SD_CARD_BUFFER(SD_CARD_0_BASE, 2*(cluster_index % 256)))) = flag;
   80768:	e0bffc17 	ldw	r2,-16(fp)
   8076c:	10803fcc 	andi	r2,r2,255
   80770:	1085883a 	add	r2,r2,r2
   80774:	1007883a 	mov	r3,r2
   80778:	e0bffd0b 	ldhu	r2,-12(fp)
   8077c:	1880000d 	sth	r2,0(r3)
    current_sector_modified = true;
   80780:	00800044 	movi	r2,1
   80784:	d0a70915 	stw	r2,-25564(gp)
    return true;
   80788:	00800044 	movi	r2,1
   8078c:	e0bfff15 	stw	r2,-4(fp)
   80790:	e0bfff17 	ldw	r2,-4(fp)
}
   80794:	e037883a 	mov	sp,fp
   80798:	dfc00117 	ldw	ra,4(sp)
   8079c:	df000017 	ldw	fp,0(sp)
   807a0:	dec00204 	addi	sp,sp,8
   807a4:	f800283a 	ret

000807a8 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
   807a8:	defff704 	addi	sp,sp,-36
   807ac:	dfc00815 	stw	ra,32(sp)
   807b0:	df000715 	stw	fp,28(sp)
   807b4:	df000704 	addi	fp,sp,28
	bool result = false;
   807b8:	e03fff15 	stw	zero,-4(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
   807bc:	0009883a 	mov	r4,zero
   807c0:	000b883a 	mov	r5,zero
   807c4:	008053c0 	call	8053c <Read_Sector_Data>
   807c8:	1005003a 	cmpeq	r2,r2,zero
   807cc:	1000461e 	bne	r2,zero,808e8 <Check_for_Master_Boot_Record+0x140>
	{
		end =  (*((volatile short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, 0x1fe)));
   807d0:	00807f84 	movi	r2,510
   807d4:	1080000b 	ldhu	r2,0(r2)
   807d8:	10bfffcc 	andi	r2,r2,65535
   807dc:	10a0001c 	xori	r2,r2,32768
   807e0:	10a00004 	addi	r2,r2,-32768
   807e4:	e0bffd15 	stw	r2,-12(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
   807e8:	e0bffd17 	ldw	r2,-12(fp)
   807ec:	10ffffcc 	andi	r3,r2,65535
   807f0:	00aa9554 	movui	r2,43605
   807f4:	18803c1e 	bne	r3,r2,808e8 <Check_for_Master_Boot_Record+0x140>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
   807f8:	e03ffe15 	stw	zero,-8(fp)
   807fc:	00003706 	br	808dc <Check_for_Master_Boot_Record+0x134>
			{
				int partition_data_offset = (index * 16) + 0x01be;
   80800:	e0bffe17 	ldw	r2,-8(fp)
   80804:	1004913a 	slli	r2,r2,4
   80808:	10806f84 	addi	r2,r2,446
   8080c:	e0bffa15 	stw	r2,-24(fp)
				char type;
		        
				// Read Partition type
				type = (*((volatile unsigned char *)SD_CARD_BUFFER(SD_CARD_0_BASE, partition_data_offset + 0x04)));
   80810:	e0bffa17 	ldw	r2,-24(fp)
   80814:	10800104 	addi	r2,r2,4
   80818:	10800003 	ldbu	r2,0(r2)
   8081c:	e0bff905 	stb	r2,-28(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
   80820:	e0bff907 	ldb	r2,-28(fp)
   80824:	10800060 	cmpeqi	r2,r2,1
   80828:	1000091e 	bne	r2,zero,80850 <Check_for_Master_Boot_Record+0xa8>
   8082c:	e0bff907 	ldb	r2,-28(fp)
   80830:	10800120 	cmpeqi	r2,r2,4
   80834:	1000061e 	bne	r2,zero,80850 <Check_for_Master_Boot_Record+0xa8>
   80838:	e0bff907 	ldb	r2,-28(fp)
   8083c:	108001a0 	cmpeqi	r2,r2,6
   80840:	1000031e 	bne	r2,zero,80850 <Check_for_Master_Boot_Record+0xa8>
   80844:	e0bff907 	ldb	r2,-28(fp)
   80848:	10800398 	cmpnei	r2,r2,14
   8084c:	1000201e 	bne	r2,zero,808d0 <Check_for_Master_Boot_Record+0x128>
				{
					// Get partition offset and size.
					offset = ((*((unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, partition_data_offset + 0x0A))) << 16) | (*((unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, partition_data_offset + 0x08)));
   80850:	e0bffa17 	ldw	r2,-24(fp)
   80854:	10800284 	addi	r2,r2,10
   80858:	1080000b 	ldhu	r2,0(r2)
   8085c:	10bfffcc 	andi	r2,r2,65535
   80860:	1006943a 	slli	r3,r2,16
   80864:	e0bffa17 	ldw	r2,-24(fp)
   80868:	10800204 	addi	r2,r2,8
   8086c:	1080000b 	ldhu	r2,0(r2)
   80870:	10bfffcc 	andi	r2,r2,65535
   80874:	1884b03a 	or	r2,r3,r2
   80878:	e0bffc15 	stw	r2,-16(fp)
					partition_size = ((*((unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, partition_data_offset + 0x0E))) << 16) | (*((unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, partition_data_offset + 0x0C)));
   8087c:	e0bffa17 	ldw	r2,-24(fp)
   80880:	10800384 	addi	r2,r2,14
   80884:	1080000b 	ldhu	r2,0(r2)
   80888:	10bfffcc 	andi	r2,r2,65535
   8088c:	1006943a 	slli	r3,r2,16
   80890:	e0bffa17 	ldw	r2,-24(fp)
   80894:	10800304 	addi	r2,r2,12
   80898:	1080000b 	ldhu	r2,0(r2)
   8089c:	10bfffcc 	andi	r2,r2,65535
   808a0:	1884b03a 	or	r2,r3,r2
   808a4:	e0bffb15 	stw	r2,-20(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
   808a8:	e0bffb17 	ldw	r2,-20(fp)
   808ac:	10800050 	cmplti	r2,r2,1
   808b0:	1000071e 	bne	r2,zero,808d0 <Check_for_Master_Boot_Record+0x128>
					{
						result = true;
   808b4:	00800044 	movi	r2,1
   808b8:	e0bfff15 	stw	r2,-4(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
   808bc:	e0bffb17 	ldw	r2,-20(fp)
   808c0:	d0a70815 	stw	r2,-25568(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
   808c4:	e0bffc17 	ldw	r2,-16(fp)
   808c8:	d0a70715 	stw	r2,-25572(gp)
						break;
   808cc:	00000606 	br	808e8 <Check_for_Master_Boot_Record+0x140>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
   808d0:	e0bffe17 	ldw	r2,-8(fp)
   808d4:	10800044 	addi	r2,r2,1
   808d8:	e0bffe15 	stw	r2,-8(fp)
   808dc:	e0bffe17 	ldw	r2,-8(fp)
   808e0:	10800110 	cmplti	r2,r2,4
   808e4:	103fc61e 	bne	r2,zero,80800 <Check_for_Master_Boot_Record+0x58>
				}
			}
		}
	}

	return result;
   808e8:	e0bfff17 	ldw	r2,-4(fp)
}
   808ec:	e037883a 	mov	sp,fp
   808f0:	dfc00117 	ldw	ra,4(sp)
   808f4:	df000017 	ldw	fp,0(sp)
   808f8:	dec00204 	addi	sp,sp,8
   808fc:	f800283a 	ret

00080900 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
   80900:	defff804 	addi	sp,sp,-32
   80904:	dfc00715 	stw	ra,28(sp)
   80908:	df000615 	stw	fp,24(sp)
   8090c:	df000604 	addi	fp,sp,24
   80910:	e13ffc15 	stw	r4,-16(fp)
   80914:	e17ffd15 	stw	r5,-12(fp)
   80918:	e1bffe15 	stw	r6,-8(fp)
   8091c:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
   80920:	e03ffb15 	stw	zero,-20(fp)
	if (((offset & 0x01f) == 0) && (sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   80924:	e0bffc17 	ldw	r2,-16(fp)
   80928:	108007cc 	andi	r2,r2,31
   8092c:	1004c03a 	cmpne	r2,r2,zero
   80930:	10005f1e 	bne	r2,zero,80ab0 <Read_File_Record_At_Offset+0x1b0>
   80934:	0082ef80 	call	82ef8 <sd_card_is_Present>
   80938:	1005003a 	cmpeq	r2,r2,zero
   8093c:	10005c1e 	bne	r2,zero,80ab0 <Read_File_Record_At_Offset+0x1b0>
   80940:	d0a70117 	ldw	r2,-25596(gp)
   80944:	1005003a 	cmpeq	r2,r2,zero
   80948:	1000591e 	bne	r2,zero,80ab0 <Read_File_Record_At_Offset+0x1b0>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
   8094c:	e03ffa15 	stw	zero,-24(fp)
   80950:	00000c06 	br	80984 <Read_File_Record_At_Offset+0x84>
		{
			record->name[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+counter));
   80954:	e13ffa17 	ldw	r4,-24(fp)
   80958:	e0fffc17 	ldw	r3,-16(fp)
   8095c:	e0bffa17 	ldw	r2,-24(fp)
   80960:	1885883a 	add	r2,r3,r2
   80964:	10800003 	ldbu	r2,0(r2)
   80968:	1007883a 	mov	r3,r2
   8096c:	e0bffd17 	ldw	r2,-12(fp)
   80970:	1105883a 	add	r2,r2,r4
   80974:	10c00005 	stb	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
   80978:	e0bffa17 	ldw	r2,-24(fp)
   8097c:	10800044 	addi	r2,r2,1
   80980:	e0bffa15 	stw	r2,-24(fp)
   80984:	e0bffa17 	ldw	r2,-24(fp)
   80988:	10800210 	cmplti	r2,r2,8
   8098c:	103ff11e 	bne	r2,zero,80954 <Read_File_Record_At_Offset+0x54>
		{
			record->name[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+counter));
		}        
		for (counter = 0; counter < 3; counter++)
   80990:	e03ffa15 	stw	zero,-24(fp)
   80994:	00000e06 	br	809d0 <Read_File_Record_At_Offset+0xd0>
		{
			record->extension[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+counter+8));
   80998:	e13ffa17 	ldw	r4,-24(fp)
   8099c:	e0fffc17 	ldw	r3,-16(fp)
   809a0:	e0bffa17 	ldw	r2,-24(fp)
   809a4:	1885883a 	add	r2,r3,r2
   809a8:	10800204 	addi	r2,r2,8
   809ac:	10800003 	ldbu	r2,0(r2)
   809b0:	1007883a 	mov	r3,r2
   809b4:	e0bffd17 	ldw	r2,-12(fp)
   809b8:	2085883a 	add	r2,r4,r2
   809bc:	10800204 	addi	r2,r2,8
   809c0:	10c00005 	stb	r3,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+counter));
		}        
		for (counter = 0; counter < 3; counter++)
   809c4:	e0bffa17 	ldw	r2,-24(fp)
   809c8:	10800044 	addi	r2,r2,1
   809cc:	e0bffa15 	stw	r2,-24(fp)
   809d0:	e0bffa17 	ldw	r2,-24(fp)
   809d4:	108000d0 	cmplti	r2,r2,3
   809d8:	103fef1e 	bne	r2,zero,80998 <Read_File_Record_At_Offset+0x98>
		{
			record->extension[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+counter+8));
		}        
		record->attributes          =   *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+11));
   809dc:	e0bffc17 	ldw	r2,-16(fp)
   809e0:	108002c4 	addi	r2,r2,11
   809e4:	10800003 	ldbu	r2,0(r2)
   809e8:	1007883a 	mov	r3,r2
   809ec:	e0bffd17 	ldw	r2,-12(fp)
   809f0:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+14));
   809f4:	e0bffc17 	ldw	r2,-16(fp)
   809f8:	10800384 	addi	r2,r2,14
   809fc:	10c0000b 	ldhu	r3,0(r2)
   80a00:	e0bffd17 	ldw	r2,-12(fp)
   80a04:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+16));
   80a08:	e0bffc17 	ldw	r2,-16(fp)
   80a0c:	10800404 	addi	r2,r2,16
   80a10:	10c0000b 	ldhu	r3,0(r2)
   80a14:	e0bffd17 	ldw	r2,-12(fp)
   80a18:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+18));
   80a1c:	e0bffc17 	ldw	r2,-16(fp)
   80a20:	10800484 	addi	r2,r2,18
   80a24:	10c0000b 	ldhu	r3,0(r2)
   80a28:	e0bffd17 	ldw	r2,-12(fp)
   80a2c:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	*((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+22));
   80a30:	e0bffc17 	ldw	r2,-16(fp)
   80a34:	10800584 	addi	r2,r2,22
   80a38:	10c0000b 	ldhu	r3,0(r2)
   80a3c:	e0bffd17 	ldw	r2,-12(fp)
   80a40:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	*((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+24));
   80a44:	e0bffc17 	ldw	r2,-16(fp)
   80a48:	10800604 	addi	r2,r2,24
   80a4c:	10c0000b 	ldhu	r3,0(r2)
   80a50:	e0bffd17 	ldw	r2,-12(fp)
   80a54:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	*((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+26));
   80a58:	e0bffc17 	ldw	r2,-16(fp)
   80a5c:	10800684 	addi	r2,r2,26
   80a60:	10c0000b 	ldhu	r3,0(r2)
   80a64:	e0bffd17 	ldw	r2,-12(fp)
   80a68:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	*((volatile unsigned int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+28));
   80a6c:	e0bffc17 	ldw	r2,-16(fp)
   80a70:	10800704 	addi	r2,r2,28
   80a74:	10c00017 	ldw	r3,0(r2)
   80a78:	e0bffd17 	ldw	r2,-12(fp)
   80a7c:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
   80a80:	e0fffd17 	ldw	r3,-12(fp)
   80a84:	e0bffe17 	ldw	r2,-8(fp)
   80a88:	18800a15 	stw	r2,40(r3)
		record->file_record_sector_in_cluster = sector_in_cluster;
   80a8c:	e0fffd17 	ldw	r3,-12(fp)
   80a90:	e0bfff17 	ldw	r2,-4(fp)
   80a94:	18800b15 	stw	r2,44(r3)
		record->file_record_offset = offset;
   80a98:	e0bffc17 	ldw	r2,-16(fp)
   80a9c:	1007883a 	mov	r3,r2
   80aa0:	e0bffd17 	ldw	r2,-12(fp)
   80aa4:	10c00c0d 	sth	r3,48(r2)
		result = true;
   80aa8:	00800044 	movi	r2,1
   80aac:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
   80ab0:	e0bffb17 	ldw	r2,-20(fp)
}
   80ab4:	e037883a 	mov	sp,fp
   80ab8:	dfc00117 	ldw	ra,4(sp)
   80abc:	df000017 	ldw	fp,0(sp)
   80ac0:	dec00204 	addi	sp,sp,8
   80ac4:	f800283a 	ret

00080ac8 <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
   80ac8:	defff904 	addi	sp,sp,-28
   80acc:	dfc00615 	stw	ra,24(sp)
   80ad0:	df000515 	stw	fp,20(sp)
   80ad4:	df000504 	addi	fp,sp,20
   80ad8:	e13ffe15 	stw	r4,-8(fp)
   80adc:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
   80ae0:	e03ffd15 	stw	zero,-12(fp)
    if (((offset & 0x01f) == 0) && (sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   80ae4:	e0bffe17 	ldw	r2,-8(fp)
   80ae8:	108007cc 	andi	r2,r2,31
   80aec:	1004c03a 	cmpne	r2,r2,zero
   80af0:	10006d1e 	bne	r2,zero,80ca8 <Write_File_Record_At_Offset+0x1e0>
   80af4:	0082ef80 	call	82ef8 <sd_card_is_Present>
   80af8:	1005003a 	cmpeq	r2,r2,zero
   80afc:	10006a1e 	bne	r2,zero,80ca8 <Write_File_Record_At_Offset+0x1e0>
   80b00:	d0a70117 	ldw	r2,-25596(gp)
   80b04:	1005003a 	cmpeq	r2,r2,zero
   80b08:	1000671e 	bne	r2,zero,80ca8 <Write_File_Record_At_Offset+0x1e0>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
   80b0c:	e03ffc15 	stw	zero,-16(fp)
   80b10:	00001b06 	br	80b80 <Write_File_Record_At_Offset+0xb8>
        {
            short int two_chars = (short int) record->name[counter+1];
   80b14:	e0bffc17 	ldw	r2,-16(fp)
   80b18:	10c00044 	addi	r3,r2,1
   80b1c:	e0bfff17 	ldw	r2,-4(fp)
   80b20:	10c5883a 	add	r2,r2,r3
   80b24:	10800003 	ldbu	r2,0(r2)
   80b28:	10803fcc 	andi	r2,r2,255
   80b2c:	e0bffb0d 	sth	r2,-20(fp)
            two_chars = two_chars << 8;
   80b30:	e0bffb0f 	ldh	r2,-20(fp)
   80b34:	1004923a 	slli	r2,r2,8
   80b38:	e0bffb0d 	sth	r2,-20(fp)
            two_chars = two_chars | record->name[counter];
   80b3c:	e0fffc17 	ldw	r3,-16(fp)
   80b40:	e0bfff17 	ldw	r2,-4(fp)
   80b44:	10c5883a 	add	r2,r2,r3
   80b48:	10800003 	ldbu	r2,0(r2)
   80b4c:	10c03fcc 	andi	r3,r2,255
   80b50:	e0bffb0b 	ldhu	r2,-20(fp)
   80b54:	10c4b03a 	or	r2,r2,r3
   80b58:	e0bffb0d 	sth	r2,-20(fp)
            *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+counter)) = two_chars;
   80b5c:	e0fffe17 	ldw	r3,-8(fp)
   80b60:	e0bffc17 	ldw	r2,-16(fp)
   80b64:	1885883a 	add	r2,r3,r2
   80b68:	1007883a 	mov	r3,r2
   80b6c:	e0bffb0b 	ldhu	r2,-20(fp)
   80b70:	1880000d 	sth	r2,0(r3)
    bool result = false;
    if (((offset & 0x01f) == 0) && (sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
   80b74:	e0bffc17 	ldw	r2,-16(fp)
   80b78:	10800084 	addi	r2,r2,2
   80b7c:	e0bffc15 	stw	r2,-16(fp)
   80b80:	e0bffc17 	ldw	r2,-16(fp)
   80b84:	10800210 	cmplti	r2,r2,8
   80b88:	103fe21e 	bne	r2,zero,80b14 <Write_File_Record_At_Offset+0x4c>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+counter)) = two_chars;
        }        
        for (counter = 0; counter < 3; counter++)
   80b8c:	e03ffc15 	stw	zero,-16(fp)
   80b90:	00000e06 	br	80bcc <Write_File_Record_At_Offset+0x104>
        {
            *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+counter+8)) = record->extension[counter];
   80b94:	e0fffe17 	ldw	r3,-8(fp)
   80b98:	e0bffc17 	ldw	r2,-16(fp)
   80b9c:	1885883a 	add	r2,r3,r2
   80ba0:	10800204 	addi	r2,r2,8
   80ba4:	1009883a 	mov	r4,r2
   80ba8:	e0fffc17 	ldw	r3,-16(fp)
   80bac:	e0bfff17 	ldw	r2,-4(fp)
   80bb0:	1885883a 	add	r2,r3,r2
   80bb4:	10800204 	addi	r2,r2,8
   80bb8:	10800003 	ldbu	r2,0(r2)
   80bbc:	20800005 	stb	r2,0(r4)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+counter)) = two_chars;
        }        
        for (counter = 0; counter < 3; counter++)
   80bc0:	e0bffc17 	ldw	r2,-16(fp)
   80bc4:	10800044 	addi	r2,r2,1
   80bc8:	e0bffc15 	stw	r2,-16(fp)
   80bcc:	e0bffc17 	ldw	r2,-16(fp)
   80bd0:	108000d0 	cmplti	r2,r2,3
   80bd4:	103fef1e 	bne	r2,zero,80b94 <Write_File_Record_At_Offset+0xcc>
        {
            *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+counter+8)) = record->extension[counter];
        }        
        *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+11))  =   record->attributes;
   80bd8:	e0bffe17 	ldw	r2,-8(fp)
   80bdc:	108002c4 	addi	r2,r2,11
   80be0:	1007883a 	mov	r3,r2
   80be4:	e0bfff17 	ldw	r2,-4(fp)
   80be8:	108002c3 	ldbu	r2,11(r2)
   80bec:	18800005 	stb	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+14)) = record->create_time;
   80bf0:	e0bffe17 	ldw	r2,-8(fp)
   80bf4:	10800384 	addi	r2,r2,14
   80bf8:	1007883a 	mov	r3,r2
   80bfc:	e0bfff17 	ldw	r2,-4(fp)
   80c00:	1080030b 	ldhu	r2,12(r2)
   80c04:	1880000d 	sth	r2,0(r3)
        *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+16)) = record->create_date;
   80c08:	e0bffe17 	ldw	r2,-8(fp)
   80c0c:	10800404 	addi	r2,r2,16
   80c10:	1007883a 	mov	r3,r2
   80c14:	e0bfff17 	ldw	r2,-4(fp)
   80c18:	1080038b 	ldhu	r2,14(r2)
   80c1c:	1880000d 	sth	r2,0(r3)
        *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+18)) = record->last_access_date;
   80c20:	e0bffe17 	ldw	r2,-8(fp)
   80c24:	10800484 	addi	r2,r2,18
   80c28:	1007883a 	mov	r3,r2
   80c2c:	e0bfff17 	ldw	r2,-4(fp)
   80c30:	1080040b 	ldhu	r2,16(r2)
   80c34:	1880000d 	sth	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+22)) = record->last_modified_time;
   80c38:	e0bffe17 	ldw	r2,-8(fp)
   80c3c:	10800584 	addi	r2,r2,22
   80c40:	1007883a 	mov	r3,r2
   80c44:	e0bfff17 	ldw	r2,-4(fp)
   80c48:	1080048b 	ldhu	r2,18(r2)
   80c4c:	1880000d 	sth	r2,0(r3)
        *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+24)) = record->last_modified_date;
   80c50:	e0bffe17 	ldw	r2,-8(fp)
   80c54:	10800604 	addi	r2,r2,24
   80c58:	1007883a 	mov	r3,r2
   80c5c:	e0bfff17 	ldw	r2,-4(fp)
   80c60:	1080050b 	ldhu	r2,20(r2)
   80c64:	1880000d 	sth	r2,0(r3)
        *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+26)) = record->start_cluster_index;
   80c68:	e0bffe17 	ldw	r2,-8(fp)
   80c6c:	10800684 	addi	r2,r2,26
   80c70:	1007883a 	mov	r3,r2
   80c74:	e0bfff17 	ldw	r2,-4(fp)
   80c78:	1080058b 	ldhu	r2,22(r2)
   80c7c:	1880000d 	sth	r2,0(r3)
        *((volatile unsigned int *)SD_CARD_BUFFER(SD_CARD_0_BASE, offset+28)) = record->file_size_in_bytes;
   80c80:	e0bffe17 	ldw	r2,-8(fp)
   80c84:	10800704 	addi	r2,r2,28
   80c88:	1007883a 	mov	r3,r2
   80c8c:	e0bfff17 	ldw	r2,-4(fp)
   80c90:	10800617 	ldw	r2,24(r2)
   80c94:	18800015 	stw	r2,0(r3)
        current_sector_modified = true;                  
   80c98:	00800044 	movi	r2,1
   80c9c:	d0a70915 	stw	r2,-25564(gp)
        result = true;
   80ca0:	00800044 	movi	r2,1
   80ca4:	e0bffd15 	stw	r2,-12(fp)
    }
    return result;
   80ca8:	e0bffd17 	ldw	r2,-12(fp)
}
   80cac:	e037883a 	mov	sp,fp
   80cb0:	dfc00117 	ldw	ra,4(sp)
   80cb4:	df000017 	ldw	fp,0(sp)
   80cb8:	dec00204 	addi	sp,sp,8
   80cbc:	f800283a 	ret

00080cc0 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
   80cc0:	defff904 	addi	sp,sp,-28
   80cc4:	dfc00615 	stw	ra,24(sp)
   80cc8:	df000515 	stw	fp,20(sp)
   80ccc:	dc000415 	stw	r16,16(sp)
   80cd0:	df000404 	addi	fp,sp,16
   80cd4:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
   80cd8:	e03ffe15 	stw	zero,-8(fp)
	int counter = 0;
   80cdc:	e03ffd15 	stw	zero,-12(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
   80ce0:	0009883a 	mov	r4,zero
   80ce4:	e17fff17 	ldw	r5,-4(fp)
   80ce8:	008053c0 	call	8053c <Read_Sector_Data>
   80cec:	e0bffe15 	stw	r2,-8(fp)
	end =  (*((volatile short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, 0x1fe)));
   80cf0:	00807f84 	movi	r2,510
   80cf4:	1080000b 	ldhu	r2,0(r2)
   80cf8:	e0bffc0d 	sth	r2,-16(fp)
	if (((end & 0xffff) == 0xaa55) && (result))
   80cfc:	e0bffc0f 	ldh	r2,-16(fp)
   80d00:	10ffffcc 	andi	r3,r2,65535
   80d04:	00aa9554 	movui	r2,43605
   80d08:	18813a1e 	bne	r3,r2,811f4 <Check_for_DOS_FAT+0x534>
   80d0c:	e0bffe17 	ldw	r2,-8(fp)
   80d10:	1005003a 	cmpeq	r2,r2,zero
   80d14:	1001371e 	bne	r2,zero,811f4 <Check_for_DOS_FAT+0x534>
	{        
		boot_sector_data.jump_instruction[0] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 0));
   80d18:	0005883a 	mov	r2,zero
   80d1c:	10800003 	ldbu	r2,0(r2)
   80d20:	1007883a 	mov	r3,r2
   80d24:	008002b4 	movhi	r2,10
   80d28:	108e6a04 	addi	r2,r2,14760
   80d2c:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 1));
   80d30:	00800044 	movi	r2,1
   80d34:	10800003 	ldbu	r2,0(r2)
   80d38:	1007883a 	mov	r3,r2
   80d3c:	008002b4 	movhi	r2,10
   80d40:	108e6a04 	addi	r2,r2,14760
   80d44:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 2));
   80d48:	00800084 	movi	r2,2
   80d4c:	10800003 	ldbu	r2,0(r2)
   80d50:	1007883a 	mov	r3,r2
   80d54:	008002b4 	movhi	r2,10
   80d58:	108e6a04 	addi	r2,r2,14760
   80d5c:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
   80d60:	e03ffd15 	stw	zero,-12(fp)
   80d64:	00000b06 	br	80d94 <Check_for_DOS_FAT+0xd4>
		{
			boot_sector_data.OEM_name[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 3+counter));
   80d68:	e13ffd17 	ldw	r4,-12(fp)
   80d6c:	e0bffd17 	ldw	r2,-12(fp)
   80d70:	108000c4 	addi	r2,r2,3
   80d74:	10c00003 	ldbu	r3,0(r2)
   80d78:	008002b4 	movhi	r2,10
   80d7c:	108e6a04 	addi	r2,r2,14760
   80d80:	1105883a 	add	r2,r2,r4
   80d84:	10c000c5 	stb	r3,3(r2)
	if (((end & 0xffff) == 0xaa55) && (result))
	{        
		boot_sector_data.jump_instruction[0] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 0));
		boot_sector_data.jump_instruction[1] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 1));
		boot_sector_data.jump_instruction[2] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 2));
		for (counter = 0; counter < 8; counter++)
   80d88:	e0bffd17 	ldw	r2,-12(fp)
   80d8c:	10800044 	addi	r2,r2,1
   80d90:	e0bffd15 	stw	r2,-12(fp)
   80d94:	e0bffd17 	ldw	r2,-12(fp)
   80d98:	10800210 	cmplti	r2,r2,8
   80d9c:	103ff21e 	bne	r2,zero,80d68 <Check_for_DOS_FAT+0xa8>
		{
			boot_sector_data.OEM_name[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 3+counter));
		}
		boot_sector_data.sector_size_in_bytes = (*((volatile unsigned char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 12)) << 8 ) | (*((char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 11)));
   80da0:	00800304 	movi	r2,12
   80da4:	10800003 	ldbu	r2,0(r2)
   80da8:	10803fcc 	andi	r2,r2,255
   80dac:	1004923a 	slli	r2,r2,8
   80db0:	1007883a 	mov	r3,r2
   80db4:	008002c4 	movi	r2,11
   80db8:	10800003 	ldbu	r2,0(r2)
   80dbc:	10803fcc 	andi	r2,r2,255
   80dc0:	1080201c 	xori	r2,r2,128
   80dc4:	10bfe004 	addi	r2,r2,-128
   80dc8:	1884b03a 	or	r2,r3,r2
   80dcc:	1007883a 	mov	r3,r2
   80dd0:	008002b4 	movhi	r2,10
   80dd4:	108e6a04 	addi	r2,r2,14760
   80dd8:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = *((volatile unsigned char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 13));
   80ddc:	00800344 	movi	r2,13
   80de0:	10c00003 	ldbu	r3,0(r2)
   80de4:	008002b4 	movhi	r2,10
   80de8:	108e6a04 	addi	r2,r2,14760
   80dec:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, 14));
   80df0:	00800384 	movi	r2,14
   80df4:	10c0000b 	ldhu	r3,0(r2)
   80df8:	008002b4 	movhi	r2,10
   80dfc:	108e6a04 	addi	r2,r2,14760
   80e00:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = *((volatile unsigned char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 16));
   80e04:	00800404 	movi	r2,16
   80e08:	10c00003 	ldbu	r3,0(r2)
   80e0c:	008002b4 	movhi	r2,10
   80e10:	108e6a04 	addi	r2,r2,14760
   80e14:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(*((volatile unsigned char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 18)))) << 8 ) | (*((unsigned char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 17)));
   80e18:	00800484 	movi	r2,18
   80e1c:	10800003 	ldbu	r2,0(r2)
   80e20:	10803fcc 	andi	r2,r2,255
   80e24:	1004923a 	slli	r2,r2,8
   80e28:	1007883a 	mov	r3,r2
   80e2c:	00800444 	movi	r2,17
   80e30:	10800003 	ldbu	r2,0(r2)
   80e34:	10803fcc 	andi	r2,r2,255
   80e38:	1884b03a 	or	r2,r3,r2
   80e3c:	1007883a 	mov	r3,r2
   80e40:	008002b4 	movhi	r2,10
   80e44:	108e6a04 	addi	r2,r2,14760
   80e48:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = ((*((volatile unsigned char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 20))) << 8) | (*((unsigned char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 19)));
   80e4c:	00800504 	movi	r2,20
   80e50:	10800003 	ldbu	r2,0(r2)
   80e54:	10803fcc 	andi	r2,r2,255
   80e58:	1004923a 	slli	r2,r2,8
   80e5c:	1007883a 	mov	r3,r2
   80e60:	008004c4 	movi	r2,19
   80e64:	10800003 	ldbu	r2,0(r2)
   80e68:	10803fcc 	andi	r2,r2,255
   80e6c:	1884b03a 	or	r2,r3,r2
   80e70:	1007883a 	mov	r3,r2
   80e74:	008002b4 	movhi	r2,10
   80e78:	108e6a04 	addi	r2,r2,14760
   80e7c:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = *((volatile unsigned char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 21));
   80e80:	00800544 	movi	r2,21
   80e84:	10c00003 	ldbu	r3,0(r2)
   80e88:	008002b4 	movhi	r2,10
   80e8c:	108e6a04 	addi	r2,r2,14760
   80e90:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, 22));
   80e94:	00800584 	movi	r2,22
   80e98:	10c0000b 	ldhu	r3,0(r2)
   80e9c:	008002b4 	movhi	r2,10
   80ea0:	108e6a04 	addi	r2,r2,14760
   80ea4:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, 24));
   80ea8:	00800604 	movi	r2,24
   80eac:	10c0000b 	ldhu	r3,0(r2)
   80eb0:	008002b4 	movhi	r2,10
   80eb4:	108e6a04 	addi	r2,r2,14760
   80eb8:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = *((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, 26));
   80ebc:	00800684 	movi	r2,26
   80ec0:	10c0000b 	ldhu	r3,0(r2)
   80ec4:	008002b4 	movhi	r2,10
   80ec8:	108e6a04 	addi	r2,r2,14760
   80ecc:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = *((volatile unsigned int *)SD_CARD_BUFFER(SD_CARD_0_BASE, 28));
   80ed0:	00800704 	movi	r2,28
   80ed4:	10c00017 	ldw	r3,0(r2)
   80ed8:	008002b4 	movhi	r2,10
   80edc:	108e6a04 	addi	r2,r2,14760
   80ee0:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = *((volatile unsigned int *)SD_CARD_BUFFER(SD_CARD_0_BASE, 32));
   80ee4:	00800804 	movi	r2,32
   80ee8:	10c00017 	ldw	r3,0(r2)
   80eec:	008002b4 	movhi	r2,10
   80ef0:	108e6a04 	addi	r2,r2,14760
   80ef4:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = *((volatile unsigned char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 36));
   80ef8:	00800904 	movi	r2,36
   80efc:	10c00003 	ldbu	r3,0(r2)
   80f00:	008002b4 	movhi	r2,10
   80f04:	108e6a04 	addi	r2,r2,14760
   80f08:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = *((volatile unsigned char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 37));
   80f0c:	00800944 	movi	r2,37
   80f10:	10c00003 	ldbu	r3,0(r2)
   80f14:	008002b4 	movhi	r2,10
   80f18:	108e6a04 	addi	r2,r2,14760
   80f1c:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = *((volatile unsigned char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 38));
   80f20:	00800984 	movi	r2,38
   80f24:	10c00003 	ldbu	r3,0(r2)
   80f28:	008002b4 	movhi	r2,10
   80f2c:	108e6a04 	addi	r2,r2,14760
   80f30:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
   80f34:	008002b4 	movhi	r2,10
   80f38:	108e6a04 	addi	r2,r2,14760
   80f3c:	1080040b 	ldhu	r2,16(r2)
   80f40:	10ffffcc 	andi	r3,r2,65535
   80f44:	008002b4 	movhi	r2,10
   80f48:	108e6a04 	addi	r2,r2,14760
   80f4c:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
   80f50:	008002b4 	movhi	r2,10
   80f54:	108e6a04 	addi	r2,r2,14760
   80f58:	10c01117 	ldw	r3,68(r2)
   80f5c:	008002b4 	movhi	r2,10
   80f60:	108e6a04 	addi	r2,r2,14760
   80f64:	1080068b 	ldhu	r2,26(r2)
   80f68:	10bfffcc 	andi	r2,r2,65535
   80f6c:	1887883a 	add	r3,r3,r2
   80f70:	008002b4 	movhi	r2,10
   80f74:	108e6a04 	addi	r2,r2,14760
   80f78:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
   80f7c:	008002b4 	movhi	r2,10
   80f80:	108e6a04 	addi	r2,r2,14760
   80f84:	10c01217 	ldw	r3,72(r2)
   80f88:	008002b4 	movhi	r2,10
   80f8c:	108e6a04 	addi	r2,r2,14760
   80f90:	1080068b 	ldhu	r2,26(r2)
   80f94:	10bfffcc 	andi	r2,r2,65535
   80f98:	1887883a 	add	r3,r3,r2
   80f9c:	008002b4 	movhi	r2,10
   80fa0:	108e6a04 	addi	r2,r2,14760
   80fa4:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
   80fa8:	008002b4 	movhi	r2,10
   80fac:	108e6a04 	addi	r2,r2,14760
   80fb0:	14001317 	ldw	r16,76(r2)
   80fb4:	008002b4 	movhi	r2,10
   80fb8:	108e6a04 	addi	r2,r2,14760
   80fbc:	1080050b 	ldhu	r2,20(r2)
   80fc0:	10bfffcc 	andi	r2,r2,65535
   80fc4:	1008917a 	slli	r4,r2,5
   80fc8:	008002b4 	movhi	r2,10
   80fcc:	108e6a04 	addi	r2,r2,14760
   80fd0:	1080030b 	ldhu	r2,12(r2)
   80fd4:	117fffcc 	andi	r5,r2,65535
   80fd8:	00877140 	call	87714 <__divsi3>
   80fdc:	8087883a 	add	r3,r16,r2
   80fe0:	008002b4 	movhi	r2,10
   80fe4:	108e6a04 	addi	r2,r2,14760
   80fe8:	10c01415 	stw	r3,80(r2)
		// printf("haha: %d\n", boot_sector_data.first_fat_sector_offset);
		// printf("haha: %d\n", boot_sector_data.second_fat_sector_offset);
		// printf("haha: %d\n", boot_sector_data.root_directory_sector_offset);
		// printf("haha: %d\n", boot_sector_data.data_sector_offset);
		
		if (boot_sector_data.number_of_sectors_in_partition != 0) {
   80fec:	008002b4 	movhi	r2,10
   80ff0:	108e6a04 	addi	r2,r2,14760
   80ff4:	1080058b 	ldhu	r2,22(r2)
   80ff8:	10bfffcc 	andi	r2,r2,65535
   80ffc:	1005003a 	cmpeq	r2,r2,zero
   81000:	10001b1e 	bne	r2,zero,81070 <Check_for_DOS_FAT+0x3b0>
			if ((boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster) < 4085)
   81004:	008002b4 	movhi	r2,10
   81008:	108e6a04 	addi	r2,r2,14760
   8100c:	1080058b 	ldhu	r2,22(r2)
   81010:	113fffcc 	andi	r4,r2,65535
   81014:	008002b4 	movhi	r2,10
   81018:	108e6a04 	addi	r2,r2,14760
   8101c:	10800383 	ldbu	r2,14(r2)
   81020:	11403fcc 	andi	r5,r2,255
   81024:	00877140 	call	87714 <__divsi3>
   81028:	1083fd48 	cmpgei	r2,r2,4085
   8102c:	1000081e 	bne	r2,zero,81050 <Check_for_DOS_FAT+0x390>
			{
				printf("FAT12 found\n");
   81030:	010002b4 	movhi	r4,10
   81034:	213d9204 	addi	r4,r4,-2488
   81038:	0087aa40 	call	87aa4 <puts>
				boot_sector_data.bits_for_cluster_index = 12;
   8103c:	00c002b4 	movhi	r3,10
   81040:	18ce6a04 	addi	r3,r3,14760
   81044:	00800304 	movi	r2,12
   81048:	18801085 	stb	r2,66(r3)
   8104c:	00002206 	br	810d8 <Check_for_DOS_FAT+0x418>
			} else {
				printf("FAT16 found\n");
   81050:	010002b4 	movhi	r4,10
   81054:	213d9504 	addi	r4,r4,-2476
   81058:	0087aa40 	call	87aa4 <puts>
				boot_sector_data.bits_for_cluster_index = 16;
   8105c:	00c002b4 	movhi	r3,10
   81060:	18ce6a04 	addi	r3,r3,14760
   81064:	00800404 	movi	r2,16
   81068:	18801085 	stb	r2,66(r3)
   8106c:	00001a06 	br	810d8 <Check_for_DOS_FAT+0x418>
			}
		} else {
			if ((boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster) >= 65525)
   81070:	008002b4 	movhi	r2,10
   81074:	108e6a04 	addi	r2,r2,14760
   81078:	11000917 	ldw	r4,36(r2)
   8107c:	008002b4 	movhi	r2,10
   81080:	108e6a04 	addi	r2,r2,14760
   81084:	10800383 	ldbu	r2,14(r2)
   81088:	11403fcc 	andi	r5,r2,255
   8108c:	00877d40 	call	877d4 <__udivsi3>
   81090:	1007883a 	mov	r3,r2
   81094:	00bffd14 	movui	r2,65524
   81098:	10c0082e 	bgeu	r2,r3,810bc <Check_for_DOS_FAT+0x3fc>
			{
				printf("FAT32 found\n");
   8109c:	010002b4 	movhi	r4,10
   810a0:	213d9804 	addi	r4,r4,-2464
   810a4:	0087aa40 	call	87aa4 <puts>
				boot_sector_data.bits_for_cluster_index = 32;
   810a8:	00c002b4 	movhi	r3,10
   810ac:	18ce6a04 	addi	r3,r3,14760
   810b0:	00800804 	movi	r2,32
   810b4:	18801085 	stb	r2,66(r3)
   810b8:	00000706 	br	810d8 <Check_for_DOS_FAT+0x418>
			} else {
				printf("FAT16 found\n");
   810bc:	010002b4 	movhi	r4,10
   810c0:	213d9504 	addi	r4,r4,-2476
   810c4:	0087aa40 	call	87aa4 <puts>
				boot_sector_data.bits_for_cluster_index = 16;
   810c8:	00c002b4 	movhi	r3,10
   810cc:	18ce6a04 	addi	r3,r3,14760
   810d0:	00800404 	movi	r2,16
   810d4:	18801085 	stb	r2,66(r3)
			}			
		}
	    
		for (counter = 0; counter < 4; counter++)
   810d8:	e03ffd15 	stw	zero,-12(fp)
   810dc:	00000d06 	br	81114 <Check_for_DOS_FAT+0x454>
		{
			boot_sector_data.volume_id[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 39+counter));
   810e0:	e13ffd17 	ldw	r4,-12(fp)
   810e4:	e0bffd17 	ldw	r2,-12(fp)
   810e8:	108009c4 	addi	r2,r2,39
   810ec:	10800003 	ldbu	r2,0(r2)
   810f0:	1007883a 	mov	r3,r2
   810f4:	008002b4 	movhi	r2,10
   810f8:	108e6a04 	addi	r2,r2,14760
   810fc:	2085883a 	add	r2,r4,r2
   81100:	10800a04 	addi	r2,r2,40
   81104:	10c000c5 	stb	r3,3(r2)
				printf("FAT16 found\n");
				boot_sector_data.bits_for_cluster_index = 16;
			}			
		}
	    
		for (counter = 0; counter < 4; counter++)
   81108:	e0bffd17 	ldw	r2,-12(fp)
   8110c:	10800044 	addi	r2,r2,1
   81110:	e0bffd15 	stw	r2,-12(fp)
   81114:	e0bffd17 	ldw	r2,-12(fp)
   81118:	10800110 	cmplti	r2,r2,4
   8111c:	103ff01e 	bne	r2,zero,810e0 <Check_for_DOS_FAT+0x420>
		{
			boot_sector_data.volume_id[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
   81120:	e03ffd15 	stw	zero,-12(fp)
   81124:	00000c06 	br	81158 <Check_for_DOS_FAT+0x498>
		{
			boot_sector_data.volume_label[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 43+counter));
   81128:	e13ffd17 	ldw	r4,-12(fp)
   8112c:	e0bffd17 	ldw	r2,-12(fp)
   81130:	10800ac4 	addi	r2,r2,43
   81134:	10c00003 	ldbu	r3,0(r2)
   81138:	008002b4 	movhi	r2,10
   8113c:	108e6a04 	addi	r2,r2,14760
   81140:	2085883a 	add	r2,r4,r2
   81144:	10800b04 	addi	r2,r2,44
   81148:	10c000c5 	stb	r3,3(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
   8114c:	e0bffd17 	ldw	r2,-12(fp)
   81150:	10800044 	addi	r2,r2,1
   81154:	e0bffd15 	stw	r2,-12(fp)
   81158:	e0bffd17 	ldw	r2,-12(fp)
   8115c:	108002d0 	cmplti	r2,r2,11
   81160:	103ff11e 	bne	r2,zero,81128 <Check_for_DOS_FAT+0x468>
		{
			boot_sector_data.volume_label[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
   81164:	e03ffd15 	stw	zero,-12(fp)
   81168:	00000d06 	br	811a0 <Check_for_DOS_FAT+0x4e0>
		{
			boot_sector_data.file_system_type[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 54+counter));
   8116c:	e13ffd17 	ldw	r4,-12(fp)
   81170:	e0bffd17 	ldw	r2,-12(fp)
   81174:	10800d84 	addi	r2,r2,54
   81178:	10800003 	ldbu	r2,0(r2)
   8117c:	1007883a 	mov	r3,r2
   81180:	008002b4 	movhi	r2,10
   81184:	108e6a04 	addi	r2,r2,14760
   81188:	2085883a 	add	r2,r4,r2
   8118c:	10800e04 	addi	r2,r2,56
   81190:	10c00085 	stb	r3,2(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
   81194:	e0bffd17 	ldw	r2,-12(fp)
   81198:	10800044 	addi	r2,r2,1
   8119c:	e0bffd15 	stw	r2,-12(fp)
   811a0:	e0bffd17 	ldw	r2,-12(fp)
   811a4:	10800210 	cmplti	r2,r2,8
   811a8:	103ff01e 	bne	r2,zero,8116c <Check_for_DOS_FAT+0x4ac>
		{
			boot_sector_data.file_system_type[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
   811ac:	e03ffd15 	stw	zero,-12(fp)
   811b0:	00000a06 	br	811dc <Check_for_DOS_FAT+0x51c>
		{
			active_files[counter].in_use = false;
   811b4:	e0bffd17 	ldw	r2,-12(fp)
   811b8:	00c002b4 	movhi	r3,10
   811bc:	18ce7f04 	addi	r3,r3,14844
   811c0:	100491ba 	slli	r2,r2,6
   811c4:	10c5883a 	add	r2,r2,r3
   811c8:	10800f04 	addi	r2,r2,60
   811cc:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
   811d0:	e0bffd17 	ldw	r2,-12(fp)
   811d4:	10800044 	addi	r2,r2,1
   811d8:	e0bffd15 	stw	r2,-12(fp)
   811dc:	e0bffd17 	ldw	r2,-12(fp)
   811e0:	10800510 	cmplti	r2,r2,20
   811e4:	103ff31e 	bne	r2,zero,811b4 <Check_for_DOS_FAT+0x4f4>
		{
			active_files[counter].in_use = false;
		}
		result = true;
   811e8:	00800044 	movi	r2,1
   811ec:	e0bffe15 	stw	r2,-8(fp)
	int counter = 0;
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (*((volatile short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, 0x1fe)));
	if (((end & 0xffff) == 0xaa55) && (result))
   811f0:	00000106 	br	811f8 <Check_for_DOS_FAT+0x538>
		}
		result = true;
	}
    else
    {
        result = false;
   811f4:	e03ffe15 	stw	zero,-8(fp)
    }
	return result;
   811f8:	e0bffe17 	ldw	r2,-8(fp)
}
   811fc:	e037883a 	mov	sp,fp
   81200:	dfc00217 	ldw	ra,8(sp)
   81204:	df000117 	ldw	fp,4(sp)
   81208:	dc000017 	ldw	r16,0(sp)
   8120c:	dec00304 	addi	sp,sp,12
   81210:	f800283a 	ret

00081214 <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
   81214:	defffc04 	addi	sp,sp,-16
   81218:	dfc00315 	stw	ra,12(sp)
   8121c:	df000215 	stw	fp,8(sp)
   81220:	df000204 	addi	fp,sp,8
	bool result = false;
   81224:	e03fff15 	stw	zero,-4(fp)

	if (sd_card_is_Present())
   81228:	0082ef80 	call	82ef8 <sd_card_is_Present>
   8122c:	1005003a 	cmpeq	r2,r2,zero
   81230:	10003b1e 	bne	r2,zero,81320 <Look_for_FAT16+0x10c>
	{
		short int csd_file_format = *CSD_register_w0;
   81234:	d0a70417 	ldw	r2,-25584(gp)
   81238:	1080000b 	ldhu	r2,0(r2)
   8123c:	e0bffe0d 	sth	r2,-8(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
   81240:	d0270715 	stw	zero,-25572(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
   81244:	d0270815 	stw	zero,-25568(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
   81248:	e0bffe0f 	ldh	r2,-8(fp)
   8124c:	1004803a 	cmplt	r2,r2,zero
   81250:	1000331e 	bne	r2,zero,81320 <Look_for_FAT16+0x10c>
   81254:	e0bffe0b 	ldhu	r2,-8(fp)
   81258:	10bfffcc 	andi	r2,r2,65535
   8125c:	1083000c 	andi	r2,r2,3072
   81260:	10830020 	cmpeqi	r2,r2,3072
   81264:	10002e1e 	bne	r2,zero,81320 <Look_for_FAT16+0x10c>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
   81268:	e0bffe0b 	ldhu	r2,-8(fp)
   8126c:	10bfffcc 	andi	r2,r2,65535
   81270:	1083000c 	andi	r2,r2,3072
   81274:	10810018 	cmpnei	r2,r2,1024
   81278:	1000031e 	bne	r2,zero,81288 <Look_for_FAT16+0x74>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
   8127c:	0009883a 	mov	r4,zero
   81280:	0080cc00 	call	80cc0 <Check_for_DOS_FAT>
   81284:	e0bfff15 	stw	r2,-4(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
   81288:	e0bffe0b 	ldhu	r2,-8(fp)
   8128c:	10bfffcc 	andi	r2,r2,65535
   81290:	1083000c 	andi	r2,r2,3072
   81294:	1004c03a 	cmpne	r2,r2,zero
   81298:	1000061e 	bne	r2,zero,812b4 <Look_for_FAT16+0xa0>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
   8129c:	00807a80 	call	807a8 <Check_for_Master_Boot_Record>
   812a0:	1005003a 	cmpeq	r2,r2,zero
   812a4:	1000031e 	bne	r2,zero,812b4 <Look_for_FAT16+0xa0>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
   812a8:	d1270717 	ldw	r4,-25572(gp)
   812ac:	0080cc00 	call	80cc0 <Check_for_DOS_FAT>
   812b0:	e0bfff15 	stw	r2,-4(fp)
				}                        
			}
			if (result == true)
   812b4:	e0bfff17 	ldw	r2,-4(fp)
   812b8:	10800058 	cmpnei	r2,r2,1
   812bc:	1000181e 	bne	r2,zero,81320 <Look_for_FAT16+0x10c>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index == 12)
   812c0:	008002b4 	movhi	r2,10
   812c4:	108e6a04 	addi	r2,r2,14760
   812c8:	10801083 	ldbu	r2,66(r2)
   812cc:	10803fcc 	andi	r2,r2,255
   812d0:	10800318 	cmpnei	r2,r2,12
   812d4:	1000021e 	bne	r2,zero,812e0 <Look_for_FAT16+0xcc>
				{
					result = false;
   812d8:	e03fff15 	stw	zero,-4(fp)
   812dc:	00001006 	br	81320 <Look_for_FAT16+0x10c>
				}
				else
				{
					if (boot_sector_data.number_of_sectors_in_partition != 0)
   812e0:	008002b4 	movhi	r2,10
   812e4:	108e6a04 	addi	r2,r2,14760
   812e8:	1080058b 	ldhu	r2,22(r2)
   812ec:	10bfffcc 	andi	r2,r2,65535
   812f0:	1005003a 	cmpeq	r2,r2,zero
   812f4:	1000061e 	bne	r2,zero,81310 <Look_for_FAT16+0xfc>
						fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
   812f8:	008002b4 	movhi	r2,10
   812fc:	108e6a04 	addi	r2,r2,14760
   81300:	1080058b 	ldhu	r2,22(r2)
   81304:	10bfffcc 	andi	r2,r2,65535
   81308:	d0a70815 	stw	r2,-25568(gp)
   8130c:	00000406 	br	81320 <Look_for_FAT16+0x10c>
					else
						fat_partition_size_in_512_byte_sectors = boot_sector_data.total_sector_count_if_above_32MB;
   81310:	008002b4 	movhi	r2,10
   81314:	108e6a04 	addi	r2,r2,14760
   81318:	10800917 	ldw	r2,36(r2)
   8131c:	d0a70815 	stw	r2,-25568(gp)
				}
			}
		}
	}
	return result;
   81320:	e0bfff17 	ldw	r2,-4(fp)
}
   81324:	e037883a 	mov	sp,fp
   81328:	dfc00117 	ldw	ra,4(sp)
   8132c:	df000017 	ldw	fp,0(sp)
   81330:	dec00204 	addi	sp,sp,8
   81334:	f800283a 	ret

00081338 <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
   81338:	defffb04 	addi	sp,sp,-20
   8133c:	dfc00415 	stw	ra,16(sp)
   81340:	df000315 	stw	fp,12(sp)
   81344:	df000304 	addi	fp,sp,12
   81348:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
   8134c:	e13fff17 	ldw	r4,-4(fp)
   81350:	0087b8c0 	call	87b8c <strlen>
   81354:	e0bffd15 	stw	r2,-12(fp)
    
    for (index = 0; index < length; index++)
   81358:	e03ffe15 	stw	zero,-8(fp)
   8135c:	00002206 	br	813e8 <filename_to_upper_case+0xb0>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
   81360:	e0bffe17 	ldw	r2,-8(fp)
   81364:	1007883a 	mov	r3,r2
   81368:	e0bfff17 	ldw	r2,-4(fp)
   8136c:	1885883a 	add	r2,r3,r2
   81370:	10800003 	ldbu	r2,0(r2)
   81374:	10803fcc 	andi	r2,r2,255
   81378:	1080201c 	xori	r2,r2,128
   8137c:	10bfe004 	addi	r2,r2,-128
   81380:	10801850 	cmplti	r2,r2,97
   81384:	1000151e 	bne	r2,zero,813dc <filename_to_upper_case+0xa4>
   81388:	e0bffe17 	ldw	r2,-8(fp)
   8138c:	1007883a 	mov	r3,r2
   81390:	e0bfff17 	ldw	r2,-4(fp)
   81394:	1885883a 	add	r2,r3,r2
   81398:	10800003 	ldbu	r2,0(r2)
   8139c:	10803fcc 	andi	r2,r2,255
   813a0:	1080201c 	xori	r2,r2,128
   813a4:	10bfe004 	addi	r2,r2,-128
   813a8:	10801ec8 	cmpgei	r2,r2,123
   813ac:	10000b1e 	bne	r2,zero,813dc <filename_to_upper_case+0xa4>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
   813b0:	e0bffe17 	ldw	r2,-8(fp)
   813b4:	1007883a 	mov	r3,r2
   813b8:	e0bfff17 	ldw	r2,-4(fp)
   813bc:	1889883a 	add	r4,r3,r2
   813c0:	e0bffe17 	ldw	r2,-8(fp)
   813c4:	1007883a 	mov	r3,r2
   813c8:	e0bfff17 	ldw	r2,-4(fp)
   813cc:	1885883a 	add	r2,r3,r2
   813d0:	10800003 	ldbu	r2,0(r2)
   813d4:	10bff804 	addi	r2,r2,-32
   813d8:	20800005 	stb	r2,0(r4)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
   813dc:	e0bffe17 	ldw	r2,-8(fp)
   813e0:	10800044 	addi	r2,r2,1
   813e4:	e0bffe15 	stw	r2,-8(fp)
   813e8:	e0fffe17 	ldw	r3,-8(fp)
   813ec:	e0bffd17 	ldw	r2,-12(fp)
   813f0:	18bfdb16 	blt	r3,r2,81360 <filename_to_upper_case+0x28>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
   813f4:	e037883a 	mov	sp,fp
   813f8:	dfc00117 	ldw	ra,4(sp)
   813fc:	df000017 	ldw	fp,0(sp)
   81400:	dec00204 	addi	sp,sp,8
   81404:	f800283a 	ret

00081408 <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
   81408:	defff804 	addi	sp,sp,-32
   8140c:	dfc00715 	stw	ra,28(sp)
   81410:	df000615 	stw	fp,24(sp)
   81414:	df000604 	addi	fp,sp,24
   81418:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
   8141c:	e13fff17 	ldw	r4,-4(fp)
   81420:	0087b8c0 	call	87b8c <strlen>
   81424:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
   81428:	00bfffc4 	movi	r2,-1
   8142c:	e0bffc15 	stw	r2,-16(fp)
    int last_period = -1;
   81430:	00bfffc4 	movi	r2,-1
   81434:	e0bffb15 	stw	r2,-20(fp)
    bool result = true;
   81438:	00800044 	movi	r2,1
   8143c:	e0bffa15 	stw	r2,-24(fp)
    
    for(index = 0; index < length; index++)
   81440:	e03ffd15 	stw	zero,-12(fp)
   81444:	00007606 	br	81620 <check_file_name_for_FAT16_compliance+0x218>
    {
        if ((file_name[index] == ' ') ||
   81448:	e0bffd17 	ldw	r2,-12(fp)
   8144c:	1007883a 	mov	r3,r2
   81450:	e0bfff17 	ldw	r2,-4(fp)
   81454:	1885883a 	add	r2,r3,r2
   81458:	10800003 	ldbu	r2,0(r2)
   8145c:	10803fcc 	andi	r2,r2,255
   81460:	1080201c 	xori	r2,r2,128
   81464:	10bfe004 	addi	r2,r2,-128
   81468:	10800820 	cmpeqi	r2,r2,32
   8146c:	1000431e 	bne	r2,zero,8157c <check_file_name_for_FAT16_compliance+0x174>
   81470:	e0bffd17 	ldw	r2,-12(fp)
   81474:	10ffffc4 	addi	r3,r2,-1
   81478:	e0bffc17 	ldw	r2,-16(fp)
   8147c:	1880141e 	bne	r3,r2,814d0 <check_file_name_for_FAT16_compliance+0xc8>
   81480:	e0bffd17 	ldw	r2,-12(fp)
   81484:	1007883a 	mov	r3,r2
   81488:	e0bfff17 	ldw	r2,-4(fp)
   8148c:	1885883a 	add	r2,r3,r2
   81490:	10800003 	ldbu	r2,0(r2)
   81494:	10803fcc 	andi	r2,r2,255
   81498:	1080201c 	xori	r2,r2,128
   8149c:	10bfe004 	addi	r2,r2,-128
   814a0:	10801720 	cmpeqi	r2,r2,92
   814a4:	1000351e 	bne	r2,zero,8157c <check_file_name_for_FAT16_compliance+0x174>
   814a8:	e0bffd17 	ldw	r2,-12(fp)
   814ac:	1007883a 	mov	r3,r2
   814b0:	e0bfff17 	ldw	r2,-4(fp)
   814b4:	1885883a 	add	r2,r3,r2
   814b8:	10800003 	ldbu	r2,0(r2)
   814bc:	10803fcc 	andi	r2,r2,255
   814c0:	1080201c 	xori	r2,r2,128
   814c4:	10bfe004 	addi	r2,r2,-128
   814c8:	10800be0 	cmpeqi	r2,r2,47
   814cc:	10002b1e 	bne	r2,zero,8157c <check_file_name_for_FAT16_compliance+0x174>
   814d0:	e0fffd17 	ldw	r3,-12(fp)
   814d4:	e0bffb17 	ldw	r2,-20(fp)
   814d8:	1885c83a 	sub	r2,r3,r2
   814dc:	10800258 	cmpnei	r2,r2,9
   814e0:	10000a1e 	bne	r2,zero,8150c <check_file_name_for_FAT16_compliance+0x104>
   814e4:	e0bffd17 	ldw	r2,-12(fp)
   814e8:	1007883a 	mov	r3,r2
   814ec:	e0bfff17 	ldw	r2,-4(fp)
   814f0:	1885883a 	add	r2,r3,r2
   814f4:	10800003 	ldbu	r2,0(r2)
   814f8:	10803fcc 	andi	r2,r2,255
   814fc:	1080201c 	xori	r2,r2,128
   81500:	10bfe004 	addi	r2,r2,-128
   81504:	10800b98 	cmpnei	r2,r2,46
   81508:	10001c1e 	bne	r2,zero,8157c <check_file_name_for_FAT16_compliance+0x174>
   8150c:	e0fffc17 	ldw	r3,-16(fp)
   81510:	e0bffb17 	ldw	r2,-20(fp)
   81514:	18801b26 	beq	r3,r2,81584 <check_file_name_for_FAT16_compliance+0x17c>
   81518:	e0fffd17 	ldw	r3,-12(fp)
   8151c:	e0bffb17 	ldw	r2,-20(fp)
   81520:	1885c83a 	sub	r2,r3,r2
   81524:	10800110 	cmplti	r2,r2,4
   81528:	1000161e 	bne	r2,zero,81584 <check_file_name_for_FAT16_compliance+0x17c>
   8152c:	e0bffd17 	ldw	r2,-12(fp)
   81530:	1007883a 	mov	r3,r2
   81534:	e0bfff17 	ldw	r2,-4(fp)
   81538:	1885883a 	add	r2,r3,r2
   8153c:	10800003 	ldbu	r2,0(r2)
   81540:	10803fcc 	andi	r2,r2,255
   81544:	1080201c 	xori	r2,r2,128
   81548:	10bfe004 	addi	r2,r2,-128
   8154c:	10801720 	cmpeqi	r2,r2,92
   81550:	10000c1e 	bne	r2,zero,81584 <check_file_name_for_FAT16_compliance+0x17c>
   81554:	e0bffd17 	ldw	r2,-12(fp)
   81558:	1007883a 	mov	r3,r2
   8155c:	e0bfff17 	ldw	r2,-4(fp)
   81560:	1885883a 	add	r2,r3,r2
   81564:	10800003 	ldbu	r2,0(r2)
   81568:	10803fcc 	andi	r2,r2,255
   8156c:	1080201c 	xori	r2,r2,128
   81570:	10bfe004 	addi	r2,r2,-128
   81574:	10800be0 	cmpeqi	r2,r2,47
   81578:	1000021e 	bne	r2,zero,81584 <check_file_name_for_FAT16_compliance+0x17c>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
             (file_name[index] != '\\') && (file_name[index] != '/'))
           )
        {
            result = false;
   8157c:	e03ffa15 	stw	zero,-24(fp)
            break;
   81580:	00002a06 	br	8162c <check_file_name_for_FAT16_compliance+0x224>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
   81584:	e0bffd17 	ldw	r2,-12(fp)
   81588:	1007883a 	mov	r3,r2
   8158c:	e0bfff17 	ldw	r2,-4(fp)
   81590:	1885883a 	add	r2,r3,r2
   81594:	10800003 	ldbu	r2,0(r2)
   81598:	10803fcc 	andi	r2,r2,255
   8159c:	1080201c 	xori	r2,r2,128
   815a0:	10bfe004 	addi	r2,r2,-128
   815a4:	10801720 	cmpeqi	r2,r2,92
   815a8:	10000a1e 	bne	r2,zero,815d4 <check_file_name_for_FAT16_compliance+0x1cc>
   815ac:	e0bffd17 	ldw	r2,-12(fp)
   815b0:	1007883a 	mov	r3,r2
   815b4:	e0bfff17 	ldw	r2,-4(fp)
   815b8:	1885883a 	add	r2,r3,r2
   815bc:	10800003 	ldbu	r2,0(r2)
   815c0:	10803fcc 	andi	r2,r2,255
   815c4:	1080201c 	xori	r2,r2,128
   815c8:	10bfe004 	addi	r2,r2,-128
   815cc:	10800bd8 	cmpnei	r2,r2,47
   815d0:	1000041e 	bne	r2,zero,815e4 <check_file_name_for_FAT16_compliance+0x1dc>
        {
            last_period = index;
   815d4:	e0bffd17 	ldw	r2,-12(fp)
   815d8:	e0bffb15 	stw	r2,-20(fp)
            last_dir_break_position = index;
   815dc:	e0bffd17 	ldw	r2,-12(fp)
   815e0:	e0bffc15 	stw	r2,-16(fp)
        }
        if (file_name[index] == '.')
   815e4:	e0bffd17 	ldw	r2,-12(fp)
   815e8:	1007883a 	mov	r3,r2
   815ec:	e0bfff17 	ldw	r2,-4(fp)
   815f0:	1885883a 	add	r2,r3,r2
   815f4:	10800003 	ldbu	r2,0(r2)
   815f8:	10803fcc 	andi	r2,r2,255
   815fc:	1080201c 	xori	r2,r2,128
   81600:	10bfe004 	addi	r2,r2,-128
   81604:	10800b98 	cmpnei	r2,r2,46
   81608:	1000021e 	bne	r2,zero,81614 <check_file_name_for_FAT16_compliance+0x20c>
        {
            last_period = index;
   8160c:	e0bffd17 	ldw	r2,-12(fp)
   81610:	e0bffb15 	stw	r2,-20(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
   81614:	e0bffd17 	ldw	r2,-12(fp)
   81618:	10800044 	addi	r2,r2,1
   8161c:	e0bffd15 	stw	r2,-12(fp)
   81620:	e0fffd17 	ldw	r3,-12(fp)
   81624:	e0bffe17 	ldw	r2,-8(fp)
   81628:	18bf8716 	blt	r3,r2,81448 <check_file_name_for_FAT16_compliance+0x40>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
   8162c:	e0fffe17 	ldw	r3,-8(fp)
   81630:	e0bfff17 	ldw	r2,-4(fp)
   81634:	1885883a 	add	r2,r3,r2
   81638:	10bfffc4 	addi	r2,r2,-1
   8163c:	10800003 	ldbu	r2,0(r2)
   81640:	10803fcc 	andi	r2,r2,255
   81644:	1080201c 	xori	r2,r2,128
   81648:	10bfe004 	addi	r2,r2,-128
   8164c:	10801720 	cmpeqi	r2,r2,92
   81650:	10000a1e 	bne	r2,zero,8167c <check_file_name_for_FAT16_compliance+0x274>
   81654:	e0fffe17 	ldw	r3,-8(fp)
   81658:	e0bfff17 	ldw	r2,-4(fp)
   8165c:	1885883a 	add	r2,r3,r2
   81660:	10bfffc4 	addi	r2,r2,-1
   81664:	10800003 	ldbu	r2,0(r2)
   81668:	10803fcc 	andi	r2,r2,255
   8166c:	1080201c 	xori	r2,r2,128
   81670:	10bfe004 	addi	r2,r2,-128
   81674:	10800bd8 	cmpnei	r2,r2,47
   81678:	1000011e 	bne	r2,zero,81680 <check_file_name_for_FAT16_compliance+0x278>
    {
        result = false;
   8167c:	e03ffa15 	stw	zero,-24(fp)
    }
    return result;
   81680:	e0bffa17 	ldw	r2,-24(fp)
}
   81684:	e037883a 	mov	sp,fp
   81688:	dfc00117 	ldw	ra,4(sp)
   8168c:	df000017 	ldw	fp,0(sp)
   81690:	dec00204 	addi	sp,sp,8
   81694:	f800283a 	ret

00081698 <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
   81698:	defffb04 	addi	sp,sp,-20
   8169c:	dfc00415 	stw	ra,16(sp)
   816a0:	df000315 	stw	fp,12(sp)
   816a4:	df000304 	addi	fp,sp,12
   816a8:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
   816ac:	e03ffe15 	stw	zero,-8(fp)
    int length = strlen(name);
   816b0:	e13fff17 	ldw	r4,-4(fp)
   816b4:	0087b8c0 	call	87b8c <strlen>
   816b8:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
   816bc:	e03ffe15 	stw	zero,-8(fp)
   816c0:	00001706 	br	81720 <get_dir_divider_location+0x88>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
   816c4:	e0bffe17 	ldw	r2,-8(fp)
   816c8:	1007883a 	mov	r3,r2
   816cc:	e0bfff17 	ldw	r2,-4(fp)
   816d0:	1885883a 	add	r2,r3,r2
   816d4:	10800003 	ldbu	r2,0(r2)
   816d8:	10803fcc 	andi	r2,r2,255
   816dc:	1080201c 	xori	r2,r2,128
   816e0:	10bfe004 	addi	r2,r2,-128
   816e4:	10801720 	cmpeqi	r2,r2,92
   816e8:	1000101e 	bne	r2,zero,8172c <get_dir_divider_location+0x94>
   816ec:	e0bffe17 	ldw	r2,-8(fp)
   816f0:	1007883a 	mov	r3,r2
   816f4:	e0bfff17 	ldw	r2,-4(fp)
   816f8:	1885883a 	add	r2,r3,r2
   816fc:	10800003 	ldbu	r2,0(r2)
   81700:	10803fcc 	andi	r2,r2,255
   81704:	1080201c 	xori	r2,r2,128
   81708:	10bfe004 	addi	r2,r2,-128
   8170c:	10800be0 	cmpeqi	r2,r2,47
   81710:	1000061e 	bne	r2,zero,8172c <get_dir_divider_location+0x94>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
   81714:	e0bffe17 	ldw	r2,-8(fp)
   81718:	10800044 	addi	r2,r2,1
   8171c:	e0bffe15 	stw	r2,-8(fp)
   81720:	e0fffe17 	ldw	r3,-8(fp)
   81724:	e0bffd17 	ldw	r2,-12(fp)
   81728:	18bfe616 	blt	r3,r2,816c4 <get_dir_divider_location+0x2c>
        {
            break;
        }
    }
    
    if (index == length)
   8172c:	e0fffe17 	ldw	r3,-8(fp)
   81730:	e0bffd17 	ldw	r2,-12(fp)
   81734:	1880021e 	bne	r3,r2,81740 <get_dir_divider_location+0xa8>
    {
        index = -1;
   81738:	00bfffc4 	movi	r2,-1
   8173c:	e0bffe15 	stw	r2,-8(fp)
    }
    
    return index;
   81740:	e0bffe17 	ldw	r2,-8(fp)
}
   81744:	e037883a 	mov	sp,fp
   81748:	dfc00117 	ldw	ra,4(sp)
   8174c:	df000017 	ldw	fp,0(sp)
   81750:	dec00204 	addi	sp,sp,8
   81754:	f800283a 	ret

00081758 <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
   81758:	defff604 	addi	sp,sp,-40
   8175c:	df000915 	stw	fp,36(sp)
   81760:	df000904 	addi	fp,sp,36
   81764:	e13ff915 	stw	r4,-28(fp)
   81768:	e17ffa15 	stw	r5,-24(fp)
   8176c:	e1bffb15 	stw	r6,-20(fp)
    bool match = true;
   81770:	00800044 	movi	r2,1
   81774:	e0bff815 	stw	r2,-32(fp)
	int index;

    for (index = 0; index < 8; index++)
   81778:	e03ff715 	stw	zero,-36(fp)
   8177c:	00005006 	br	818c0 <match_file_record_to_name_ext+0x168>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
   81780:	e0fff717 	ldw	r3,-36(fp)
   81784:	e0bff917 	ldw	r2,-28(fp)
   81788:	10c5883a 	add	r2,r2,r3
   8178c:	10800003 	ldbu	r2,0(r2)
   81790:	10803fcc 	andi	r2,r2,255
   81794:	10801870 	cmpltui	r2,r2,97
   81798:	1000111e 	bne	r2,zero,817e0 <match_file_record_to_name_ext+0x88>
   8179c:	e0fff717 	ldw	r3,-36(fp)
   817a0:	e0bff917 	ldw	r2,-28(fp)
   817a4:	10c5883a 	add	r2,r2,r3
   817a8:	10800003 	ldbu	r2,0(r2)
   817ac:	10803fcc 	andi	r2,r2,255
   817b0:	10801ee8 	cmpgeui	r2,r2,123
   817b4:	10000a1e 	bne	r2,zero,817e0 <match_file_record_to_name_ext+0x88>
   817b8:	e0fff717 	ldw	r3,-36(fp)
   817bc:	e0bff917 	ldw	r2,-28(fp)
   817c0:	10c5883a 	add	r2,r2,r3
   817c4:	10800003 	ldbu	r2,0(r2)
   817c8:	10bff804 	addi	r2,r2,-32
   817cc:	10803fcc 	andi	r2,r2,255
   817d0:	1080201c 	xori	r2,r2,128
   817d4:	10bfe004 	addi	r2,r2,-128
   817d8:	e0bfff15 	stw	r2,-4(fp)
   817dc:	00000806 	br	81800 <match_file_record_to_name_ext+0xa8>
   817e0:	e0fff717 	ldw	r3,-36(fp)
   817e4:	e0bff917 	ldw	r2,-28(fp)
   817e8:	10c5883a 	add	r2,r2,r3
   817ec:	10800003 	ldbu	r2,0(r2)
   817f0:	10803fcc 	andi	r2,r2,255
   817f4:	1080201c 	xori	r2,r2,128
   817f8:	10bfe004 	addi	r2,r2,-128
   817fc:	e0bfff15 	stw	r2,-4(fp)
   81800:	e0bff717 	ldw	r2,-36(fp)
   81804:	1007883a 	mov	r3,r2
   81808:	e0bffa17 	ldw	r2,-24(fp)
   8180c:	1885883a 	add	r2,r3,r2
   81810:	10800003 	ldbu	r2,0(r2)
   81814:	10803fcc 	andi	r2,r2,255
   81818:	1080201c 	xori	r2,r2,128
   8181c:	10bfe004 	addi	r2,r2,-128
   81820:	10801850 	cmplti	r2,r2,97
   81824:	1000151e 	bne	r2,zero,8187c <match_file_record_to_name_ext+0x124>
   81828:	e0bff717 	ldw	r2,-36(fp)
   8182c:	1007883a 	mov	r3,r2
   81830:	e0bffa17 	ldw	r2,-24(fp)
   81834:	1885883a 	add	r2,r3,r2
   81838:	10800003 	ldbu	r2,0(r2)
   8183c:	10803fcc 	andi	r2,r2,255
   81840:	1080201c 	xori	r2,r2,128
   81844:	10bfe004 	addi	r2,r2,-128
   81848:	10801ec8 	cmpgei	r2,r2,123
   8184c:	10000b1e 	bne	r2,zero,8187c <match_file_record_to_name_ext+0x124>
   81850:	e0bff717 	ldw	r2,-36(fp)
   81854:	1007883a 	mov	r3,r2
   81858:	e0bffa17 	ldw	r2,-24(fp)
   8185c:	1885883a 	add	r2,r3,r2
   81860:	10800003 	ldbu	r2,0(r2)
   81864:	10bff804 	addi	r2,r2,-32
   81868:	10803fcc 	andi	r2,r2,255
   8186c:	1080201c 	xori	r2,r2,128
   81870:	10bfe004 	addi	r2,r2,-128
   81874:	e0bffe15 	stw	r2,-8(fp)
   81878:	00000906 	br	818a0 <match_file_record_to_name_ext+0x148>
   8187c:	e0bff717 	ldw	r2,-36(fp)
   81880:	1007883a 	mov	r3,r2
   81884:	e0bffa17 	ldw	r2,-24(fp)
   81888:	1885883a 	add	r2,r3,r2
   8188c:	10800003 	ldbu	r2,0(r2)
   81890:	10803fcc 	andi	r2,r2,255
   81894:	1080201c 	xori	r2,r2,128
   81898:	10bfe004 	addi	r2,r2,-128
   8189c:	e0bffe15 	stw	r2,-8(fp)
   818a0:	e0bfff17 	ldw	r2,-4(fp)
   818a4:	e0fffe17 	ldw	r3,-8(fp)
   818a8:	10c00226 	beq	r2,r3,818b4 <match_file_record_to_name_ext+0x15c>
        {
            match = false;
   818ac:	e03ff815 	stw	zero,-32(fp)
			break;
   818b0:	00000606 	br	818cc <match_file_record_to_name_ext+0x174>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
   818b4:	e0bff717 	ldw	r2,-36(fp)
   818b8:	10800044 	addi	r2,r2,1
   818bc:	e0bff715 	stw	r2,-36(fp)
   818c0:	e0bff717 	ldw	r2,-36(fp)
   818c4:	10800210 	cmplti	r2,r2,8
   818c8:	103fad1e 	bne	r2,zero,81780 <match_file_record_to_name_ext+0x28>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
   818cc:	e03ff715 	stw	zero,-36(fp)
   818d0:	00005406 	br	81a24 <match_file_record_to_name_ext+0x2cc>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
   818d4:	e0fff717 	ldw	r3,-36(fp)
   818d8:	e0bff917 	ldw	r2,-28(fp)
   818dc:	1885883a 	add	r2,r3,r2
   818e0:	10800204 	addi	r2,r2,8
   818e4:	10800003 	ldbu	r2,0(r2)
   818e8:	10803fcc 	andi	r2,r2,255
   818ec:	10801870 	cmpltui	r2,r2,97
   818f0:	1000131e 	bne	r2,zero,81940 <match_file_record_to_name_ext+0x1e8>
   818f4:	e0fff717 	ldw	r3,-36(fp)
   818f8:	e0bff917 	ldw	r2,-28(fp)
   818fc:	1885883a 	add	r2,r3,r2
   81900:	10800204 	addi	r2,r2,8
   81904:	10800003 	ldbu	r2,0(r2)
   81908:	10803fcc 	andi	r2,r2,255
   8190c:	10801ee8 	cmpgeui	r2,r2,123
   81910:	10000b1e 	bne	r2,zero,81940 <match_file_record_to_name_ext+0x1e8>
   81914:	e0fff717 	ldw	r3,-36(fp)
   81918:	e0bff917 	ldw	r2,-28(fp)
   8191c:	1885883a 	add	r2,r3,r2
   81920:	10800204 	addi	r2,r2,8
   81924:	10800003 	ldbu	r2,0(r2)
   81928:	10bff804 	addi	r2,r2,-32
   8192c:	10803fcc 	andi	r2,r2,255
   81930:	1080201c 	xori	r2,r2,128
   81934:	10bfe004 	addi	r2,r2,-128
   81938:	e0bffd15 	stw	r2,-12(fp)
   8193c:	00000906 	br	81964 <match_file_record_to_name_ext+0x20c>
   81940:	e0fff717 	ldw	r3,-36(fp)
   81944:	e0bff917 	ldw	r2,-28(fp)
   81948:	1885883a 	add	r2,r3,r2
   8194c:	10800204 	addi	r2,r2,8
   81950:	10800003 	ldbu	r2,0(r2)
   81954:	10803fcc 	andi	r2,r2,255
   81958:	1080201c 	xori	r2,r2,128
   8195c:	10bfe004 	addi	r2,r2,-128
   81960:	e0bffd15 	stw	r2,-12(fp)
   81964:	e0bff717 	ldw	r2,-36(fp)
   81968:	1007883a 	mov	r3,r2
   8196c:	e0bffb17 	ldw	r2,-20(fp)
   81970:	1885883a 	add	r2,r3,r2
   81974:	10800003 	ldbu	r2,0(r2)
   81978:	10803fcc 	andi	r2,r2,255
   8197c:	1080201c 	xori	r2,r2,128
   81980:	10bfe004 	addi	r2,r2,-128
   81984:	10801850 	cmplti	r2,r2,97
   81988:	1000151e 	bne	r2,zero,819e0 <match_file_record_to_name_ext+0x288>
   8198c:	e0bff717 	ldw	r2,-36(fp)
   81990:	1007883a 	mov	r3,r2
   81994:	e0bffb17 	ldw	r2,-20(fp)
   81998:	1885883a 	add	r2,r3,r2
   8199c:	10800003 	ldbu	r2,0(r2)
   819a0:	10803fcc 	andi	r2,r2,255
   819a4:	1080201c 	xori	r2,r2,128
   819a8:	10bfe004 	addi	r2,r2,-128
   819ac:	10801ec8 	cmpgei	r2,r2,123
   819b0:	10000b1e 	bne	r2,zero,819e0 <match_file_record_to_name_ext+0x288>
   819b4:	e0bff717 	ldw	r2,-36(fp)
   819b8:	1007883a 	mov	r3,r2
   819bc:	e0bffb17 	ldw	r2,-20(fp)
   819c0:	1885883a 	add	r2,r3,r2
   819c4:	10800003 	ldbu	r2,0(r2)
   819c8:	10bff804 	addi	r2,r2,-32
   819cc:	10803fcc 	andi	r2,r2,255
   819d0:	1080201c 	xori	r2,r2,128
   819d4:	10bfe004 	addi	r2,r2,-128
   819d8:	e0bffc15 	stw	r2,-16(fp)
   819dc:	00000906 	br	81a04 <match_file_record_to_name_ext+0x2ac>
   819e0:	e0bff717 	ldw	r2,-36(fp)
   819e4:	1007883a 	mov	r3,r2
   819e8:	e0bffb17 	ldw	r2,-20(fp)
   819ec:	1885883a 	add	r2,r3,r2
   819f0:	10800003 	ldbu	r2,0(r2)
   819f4:	10803fcc 	andi	r2,r2,255
   819f8:	1080201c 	xori	r2,r2,128
   819fc:	10bfe004 	addi	r2,r2,-128
   81a00:	e0bffc15 	stw	r2,-16(fp)
   81a04:	e0bffd17 	ldw	r2,-12(fp)
   81a08:	e0fffc17 	ldw	r3,-16(fp)
   81a0c:	10c00226 	beq	r2,r3,81a18 <match_file_record_to_name_ext+0x2c0>
        {
            match = false;
   81a10:	e03ff815 	stw	zero,-32(fp)
			break;
   81a14:	00000606 	br	81a30 <match_file_record_to_name_ext+0x2d8>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
   81a18:	e0bff717 	ldw	r2,-36(fp)
   81a1c:	10800044 	addi	r2,r2,1
   81a20:	e0bff715 	stw	r2,-36(fp)
   81a24:	e0bff717 	ldw	r2,-36(fp)
   81a28:	108000d0 	cmplti	r2,r2,3
   81a2c:	103fa91e 	bne	r2,zero,818d4 <match_file_record_to_name_ext+0x17c>
        {
            match = false;
			break;
        }
    }
	return match;
   81a30:	e0bff817 	ldw	r2,-32(fp)
}
   81a34:	e037883a 	mov	sp,fp
   81a38:	df000017 	ldw	fp,0(sp)
   81a3c:	dec00104 	addi	sp,sp,4
   81a40:	f800283a 	ret

00081a44 <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
   81a44:	deffe604 	addi	sp,sp,-104
   81a48:	dfc01915 	stw	ra,100(sp)
   81a4c:	df001815 	stw	fp,96(sp)
   81a50:	df001804 	addi	fp,sp,96
   81a54:	e13ffc15 	stw	r4,-16(fp)
   81a58:	e17ffd15 	stw	r5,-12(fp)
   81a5c:	e1bffe15 	stw	r6,-8(fp)
    bool result = false;
   81a60:	e03ff715 	stw	zero,-36(fp)
    int home_dir_cluster = 0;
   81a64:	e03ff615 	stw	zero,-40(fp)
    int location, index;
    int start_location = 0;
   81a68:	e03ff315 	stw	zero,-52(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
   81a6c:	e13ffc17 	ldw	r4,-16(fp)
   81a70:	00816980 	call	81698 <get_dir_divider_location>
   81a74:	e0bff515 	stw	r2,-44(fp)
    while (location > 0)
   81a78:	00012206 	br	81f04 <get_home_directory_cluster_for_file+0x4c0>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
   81a7c:	00800804 	movi	r2,32
   81a80:	e0bff805 	stb	r2,-32(fp)
   81a84:	00800804 	movi	r2,32
   81a88:	e0bff845 	stb	r2,-31(fp)
   81a8c:	00800804 	movi	r2,32
   81a90:	e0bff885 	stb	r2,-30(fp)
   81a94:	00800804 	movi	r2,32
   81a98:	e0bff8c5 	stb	r2,-29(fp)
   81a9c:	00800804 	movi	r2,32
   81aa0:	e0bff905 	stb	r2,-28(fp)
   81aa4:	00800804 	movi	r2,32
   81aa8:	e0bff945 	stb	r2,-27(fp)
   81aac:	00800804 	movi	r2,32
   81ab0:	e0bff985 	stb	r2,-26(fp)
   81ab4:	00800804 	movi	r2,32
   81ab8:	e0bff9c5 	stb	r2,-25(fp)
        char extension[3] = { ' ', ' ', ' ' };
   81abc:	00800804 	movi	r2,32
   81ac0:	e0bffa05 	stb	r2,-24(fp)
   81ac4:	00800804 	movi	r2,32
   81ac8:	e0bffa45 	stb	r2,-23(fp)
   81acc:	00800804 	movi	r2,32
   81ad0:	e0bffa85 	stb	r2,-22(fp)
        int ext_index = -1;
   81ad4:	00bfffc4 	movi	r2,-1
   81ad8:	e0bff215 	stw	r2,-56(fp)
        int new_cluster = home_dir_cluster;
   81adc:	e0bff617 	ldw	r2,-40(fp)
   81ae0:	e0bff115 	stw	r2,-60(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
   81ae4:	e03ff415 	stw	zero,-48(fp)
   81ae8:	00002e06 	br	81ba4 <get_home_directory_cluster_for_file+0x160>
        {
            if (file_name[index+start_location] == '.')
   81aec:	e0fff417 	ldw	r3,-48(fp)
   81af0:	e0bff317 	ldw	r2,-52(fp)
   81af4:	1885883a 	add	r2,r3,r2
   81af8:	1007883a 	mov	r3,r2
   81afc:	e0bffc17 	ldw	r2,-16(fp)
   81b00:	1885883a 	add	r2,r3,r2
   81b04:	10800003 	ldbu	r2,0(r2)
   81b08:	10803fcc 	andi	r2,r2,255
   81b0c:	1080201c 	xori	r2,r2,128
   81b10:	10bfe004 	addi	r2,r2,-128
   81b14:	10800b98 	cmpnei	r2,r2,46
   81b18:	1000031e 	bne	r2,zero,81b28 <get_home_directory_cluster_for_file+0xe4>
            {
                ext_index = index;
   81b1c:	e0bff417 	ldw	r2,-48(fp)
   81b20:	e0bff215 	stw	r2,-56(fp)
   81b24:	00001c06 	br	81b98 <get_home_directory_cluster_for_file+0x154>
            }
            else if (ext_index < 0)
   81b28:	e0bff217 	ldw	r2,-56(fp)
   81b2c:	1004403a 	cmpge	r2,r2,zero
   81b30:	10000c1e 	bne	r2,zero,81b64 <get_home_directory_cluster_for_file+0x120>
            {
                name[index] = file_name[index+start_location];
   81b34:	e13ff417 	ldw	r4,-48(fp)
   81b38:	e0fff417 	ldw	r3,-48(fp)
   81b3c:	e0bff317 	ldw	r2,-52(fp)
   81b40:	1885883a 	add	r2,r3,r2
   81b44:	1007883a 	mov	r3,r2
   81b48:	e0bffc17 	ldw	r2,-16(fp)
   81b4c:	1885883a 	add	r2,r3,r2
   81b50:	10c00003 	ldbu	r3,0(r2)
   81b54:	e0bff804 	addi	r2,fp,-32
   81b58:	1105883a 	add	r2,r2,r4
   81b5c:	10c00005 	stb	r3,0(r2)
   81b60:	00000d06 	br	81b98 <get_home_directory_cluster_for_file+0x154>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
   81b64:	e0fff417 	ldw	r3,-48(fp)
   81b68:	e0bff217 	ldw	r2,-56(fp)
   81b6c:	1889c83a 	sub	r4,r3,r2
   81b70:	e0fff417 	ldw	r3,-48(fp)
   81b74:	e0bff317 	ldw	r2,-52(fp)
   81b78:	1885883a 	add	r2,r3,r2
   81b7c:	1007883a 	mov	r3,r2
   81b80:	e0bffc17 	ldw	r2,-16(fp)
   81b84:	1885883a 	add	r2,r3,r2
   81b88:	10c00003 	ldbu	r3,0(r2)
   81b8c:	e0bffa04 	addi	r2,fp,-24
   81b90:	1105883a 	add	r2,r2,r4
   81b94:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
   81b98:	e0bff417 	ldw	r2,-48(fp)
   81b9c:	10800044 	addi	r2,r2,1
   81ba0:	e0bff415 	stw	r2,-48(fp)
   81ba4:	e0fff417 	ldw	r3,-48(fp)
   81ba8:	e0bff517 	ldw	r2,-44(fp)
   81bac:	18bfcf16 	blt	r3,r2,81aec <get_home_directory_cluster_for_file+0xa8>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
   81bb0:	e0bff617 	ldw	r2,-40(fp)
   81bb4:	1004c03a 	cmpne	r2,r2,zero
   81bb8:	1000551e 	bne	r2,zero,81d10 <get_home_directory_cluster_for_file+0x2cc>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   81bbc:	008002b4 	movhi	r2,10
   81bc0:	108e6a04 	addi	r2,r2,14760
   81bc4:	1080050b 	ldhu	r2,20(r2)
   81bc8:	10bfffcc 	andi	r2,r2,65535
   81bcc:	1008917a 	slli	r4,r2,5
   81bd0:	008002b4 	movhi	r2,10
   81bd4:	108e6a04 	addi	r2,r2,14760
   81bd8:	1080030b 	ldhu	r2,12(r2)
   81bdc:	117fffcc 	andi	r5,r2,65535
   81be0:	00877140 	call	87714 <__divsi3>
   81be4:	e0bff015 	stw	r2,-64(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   81be8:	e03fef15 	stw	zero,-68(fp)
   81bec:	00003806 	br	81cd0 <get_home_directory_cluster_for_file+0x28c>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
   81bf0:	008002b4 	movhi	r2,10
   81bf4:	108e6a04 	addi	r2,r2,14760
   81bf8:	10c01317 	ldw	r3,76(r2)
   81bfc:	e0bfef17 	ldw	r2,-68(fp)
   81c00:	1885883a 	add	r2,r3,r2
   81c04:	1009883a 	mov	r4,r2
   81c08:	d1670717 	ldw	r5,-25572(gp)
   81c0c:	008053c0 	call	8053c <Read_Sector_Data>
   81c10:	1005003a 	cmpeq	r2,r2,zero
   81c14:	1000311e 	bne	r2,zero,81cdc <get_home_directory_cluster_for_file+0x298>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   81c18:	e03fee15 	stw	zero,-72(fp)
   81c1c:	00002306 	br	81cac <get_home_directory_cluster_for_file+0x268>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
   81c20:	e0bfee17 	ldw	r2,-72(fp)
   81c24:	1008917a 	slli	r4,r2,5
   81c28:	e1ffef17 	ldw	r7,-68(fp)
   81c2c:	e17ffe17 	ldw	r5,-8(fp)
   81c30:	000d883a 	mov	r6,zero
   81c34:	00809000 	call	80900 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   81c38:	e0bffe17 	ldw	r2,-8(fp)
   81c3c:	10800003 	ldbu	r2,0(r2)
   81c40:	10803fcc 	andi	r2,r2,255
   81c44:	10803960 	cmpeqi	r2,r2,229
   81c48:	1000151e 	bne	r2,zero,81ca0 <get_home_directory_cluster_for_file+0x25c>
   81c4c:	e0bffe17 	ldw	r2,-8(fp)
   81c50:	10800003 	ldbu	r2,0(r2)
   81c54:	10803fcc 	andi	r2,r2,255
   81c58:	1005003a 	cmpeq	r2,r2,zero
   81c5c:	1000101e 	bne	r2,zero,81ca0 <get_home_directory_cluster_for_file+0x25c>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
   81c60:	e17ff804 	addi	r5,fp,-32
   81c64:	e1bffa04 	addi	r6,fp,-24
   81c68:	e13ffe17 	ldw	r4,-8(fp)
   81c6c:	00817580 	call	81758 <match_file_record_to_name_ext>
   81c70:	e0bfed15 	stw	r2,-76(fp)
                            if (match)
   81c74:	e0bfed17 	ldw	r2,-76(fp)
   81c78:	1005003a 	cmpeq	r2,r2,zero
   81c7c:	1000081e 	bne	r2,zero,81ca0 <get_home_directory_cluster_for_file+0x25c>
                            {
                                new_cluster = file_record->start_cluster_index;
   81c80:	e0bffe17 	ldw	r2,-8(fp)
   81c84:	1080058b 	ldhu	r2,22(r2)
   81c88:	10bfffcc 	andi	r2,r2,65535
   81c8c:	e0bff115 	stw	r2,-60(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
   81c90:	e0fffe17 	ldw	r3,-8(fp)
   81c94:	00800044 	movi	r2,1
   81c98:	18800a15 	stw	r2,40(r3)
                                break;
   81c9c:	00000606 	br	81cb8 <get_home_directory_cluster_for_file+0x274>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   81ca0:	e0bfee17 	ldw	r2,-72(fp)
   81ca4:	10800044 	addi	r2,r2,1
   81ca8:	e0bfee15 	stw	r2,-72(fp)
   81cac:	e0bfee17 	ldw	r2,-72(fp)
   81cb0:	10800410 	cmplti	r2,r2,16
   81cb4:	103fda1e 	bne	r2,zero,81c20 <get_home_directory_cluster_for_file+0x1dc>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
   81cb8:	e0fff117 	ldw	r3,-60(fp)
   81cbc:	e0bff617 	ldw	r2,-40(fp)
   81cc0:	1880061e 	bne	r3,r2,81cdc <get_home_directory_cluster_for_file+0x298>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   81cc4:	e0bfef17 	ldw	r2,-68(fp)
   81cc8:	10800044 	addi	r2,r2,1
   81ccc:	e0bfef15 	stw	r2,-68(fp)
   81cd0:	e0ffef17 	ldw	r3,-68(fp)
   81cd4:	e0bff017 	ldw	r2,-64(fp)
   81cd8:	18bfc516 	blt	r3,r2,81bf0 <get_home_directory_cluster_for_file+0x1ac>
                if (new_cluster != home_dir_cluster)
                {
                    break;
                }
            }
            if (new_cluster != home_dir_cluster)
   81cdc:	e0fff117 	ldw	r3,-60(fp)
   81ce0:	e0bff617 	ldw	r2,-40(fp)
   81ce4:	18800826 	beq	r3,r2,81d08 <get_home_directory_cluster_for_file+0x2c4>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
   81ce8:	e0bff117 	ldw	r2,-60(fp)
   81cec:	e0bff615 	stw	r2,-40(fp)
                start_location = start_location+location+1;
   81cf0:	e0fff317 	ldw	r3,-52(fp)
   81cf4:	e0bff517 	ldw	r2,-44(fp)
   81cf8:	1885883a 	add	r2,r3,r2
   81cfc:	10800044 	addi	r2,r2,1
   81d00:	e0bff315 	stw	r2,-52(fp)
   81d04:	00007406 	br	81ed8 <get_home_directory_cluster_for_file+0x494>
            }
            else
            {
                // Directory path is invalid. 
                return false;
   81d08:	e03fff15 	stw	zero,-4(fp)
   81d0c:	00008c06 	br	81f40 <get_home_directory_cluster_for_file+0x4fc>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
   81d10:	e0bff617 	ldw	r2,-40(fp)
   81d14:	e0bfec15 	stw	r2,-80(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   81d18:	e0bfec17 	ldw	r2,-80(fp)
   81d1c:	113fff84 	addi	r4,r2,-2
   81d20:	008002b4 	movhi	r2,10
   81d24:	108e6a04 	addi	r2,r2,14760
   81d28:	10800383 	ldbu	r2,14(r2)
   81d2c:	11403fcc 	andi	r5,r2,255
   81d30:	00877e40 	call	877e4 <__mulsi3>
   81d34:	1007883a 	mov	r3,r2
   81d38:	008002b4 	movhi	r2,10
   81d3c:	108e6a04 	addi	r2,r2,14760
   81d40:	10801417 	ldw	r2,80(r2)
   81d44:	1885883a 	add	r2,r3,r2
   81d48:	e0bfeb15 	stw	r2,-84(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   81d4c:	e03fea15 	stw	zero,-88(fp)
   81d50:	00003206 	br	81e1c <get_home_directory_cluster_for_file+0x3d8>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   81d54:	e0ffea17 	ldw	r3,-88(fp)
   81d58:	e0bfeb17 	ldw	r2,-84(fp)
   81d5c:	1889883a 	add	r4,r3,r2
   81d60:	d1670717 	ldw	r5,-25572(gp)
   81d64:	008053c0 	call	8053c <Read_Sector_Data>
   81d68:	1005003a 	cmpeq	r2,r2,zero
   81d6c:	1000311e 	bne	r2,zero,81e34 <get_home_directory_cluster_for_file+0x3f0>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
   81d70:	e03fe915 	stw	zero,-92(fp)
   81d74:	00002006 	br	81df8 <get_home_directory_cluster_for_file+0x3b4>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
   81d78:	e0bfe917 	ldw	r2,-92(fp)
   81d7c:	1008917a 	slli	r4,r2,5
   81d80:	e1bfec17 	ldw	r6,-80(fp)
   81d84:	e1ffea17 	ldw	r7,-88(fp)
   81d88:	e17ffe17 	ldw	r5,-8(fp)
   81d8c:	00809000 	call	80900 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   81d90:	e0bffe17 	ldw	r2,-8(fp)
   81d94:	10800003 	ldbu	r2,0(r2)
   81d98:	10803fcc 	andi	r2,r2,255
   81d9c:	10803960 	cmpeqi	r2,r2,229
   81da0:	1000121e 	bne	r2,zero,81dec <get_home_directory_cluster_for_file+0x3a8>
   81da4:	e0bffe17 	ldw	r2,-8(fp)
   81da8:	10800003 	ldbu	r2,0(r2)
   81dac:	10803fcc 	andi	r2,r2,255
   81db0:	1005003a 	cmpeq	r2,r2,zero
   81db4:	10000d1e 	bne	r2,zero,81dec <get_home_directory_cluster_for_file+0x3a8>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
   81db8:	e17ff804 	addi	r5,fp,-32
   81dbc:	e1bffa04 	addi	r6,fp,-24
   81dc0:	e13ffe17 	ldw	r4,-8(fp)
   81dc4:	00817580 	call	81758 <match_file_record_to_name_ext>
   81dc8:	e0bfe815 	stw	r2,-96(fp)
                                if (match)
   81dcc:	e0bfe817 	ldw	r2,-96(fp)
   81dd0:	1005003a 	cmpeq	r2,r2,zero
   81dd4:	1000051e 	bne	r2,zero,81dec <get_home_directory_cluster_for_file+0x3a8>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
   81dd8:	e0bffe17 	ldw	r2,-8(fp)
   81ddc:	1080058b 	ldhu	r2,22(r2)
   81de0:	10bfffcc 	andi	r2,r2,65535
   81de4:	e0bff115 	stw	r2,-60(fp)
                                    break;
   81de8:	00000606 	br	81e04 <get_home_directory_cluster_for_file+0x3c0>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
   81dec:	e0bfe917 	ldw	r2,-92(fp)
   81df0:	10800044 	addi	r2,r2,1
   81df4:	e0bfe915 	stw	r2,-92(fp)
   81df8:	e0bfe917 	ldw	r2,-92(fp)
   81dfc:	10800410 	cmplti	r2,r2,16
   81e00:	103fdd1e 	bne	r2,zero,81d78 <get_home_directory_cluster_for_file+0x334>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
   81e04:	e0fff117 	ldw	r3,-60(fp)
   81e08:	e0bff617 	ldw	r2,-40(fp)
   81e0c:	1880091e 	bne	r3,r2,81e34 <get_home_directory_cluster_for_file+0x3f0>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   81e10:	e0bfea17 	ldw	r2,-88(fp)
   81e14:	10800044 	addi	r2,r2,1
   81e18:	e0bfea15 	stw	r2,-88(fp)
   81e1c:	008002b4 	movhi	r2,10
   81e20:	108e6a04 	addi	r2,r2,14760
   81e24:	10800383 	ldbu	r2,14(r2)
   81e28:	10c03fcc 	andi	r3,r2,255
   81e2c:	e0bfea17 	ldw	r2,-88(fp)
   81e30:	10ffc816 	blt	r2,r3,81d54 <get_home_directory_cluster_for_file+0x310>
                        break;
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
   81e34:	e0fff117 	ldw	r3,-60(fp)
   81e38:	e0bff617 	ldw	r2,-40(fp)
   81e3c:	1880131e 	bne	r3,r2,81e8c <get_home_directory_cluster_for_file+0x448>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
   81e40:	e13ff117 	ldw	r4,-60(fp)
   81e44:	e17ffb04 	addi	r5,fp,-20
   81e48:	008062c0 	call	8062c <get_cluster_flag>
   81e4c:	1005003a 	cmpeq	r2,r2,zero
   81e50:	10000c1e 	bne	r2,zero,81e84 <get_home_directory_cluster_for_file+0x440>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
   81e54:	e0bffb0b 	ldhu	r2,-20(fp)
   81e58:	10bfffcc 	andi	r2,r2,65535
   81e5c:	10fffe0c 	andi	r3,r2,65528
   81e60:	00bffe14 	movui	r2,65528
   81e64:	1880021e 	bne	r3,r2,81e70 <get_home_directory_cluster_for_file+0x42c>
						{
							return false;
   81e68:	e03fff15 	stw	zero,-4(fp)
   81e6c:	00003406 	br	81f40 <get_home_directory_cluster_for_file+0x4fc>
						}
						new_cluster = (next_cluster & 0x0000fff8);
   81e70:	e0bffb0b 	ldhu	r2,-20(fp)
   81e74:	10bfffcc 	andi	r2,r2,65535
   81e78:	10bffe0c 	andi	r2,r2,65528
   81e7c:	e0bff115 	stw	r2,-60(fp)
   81e80:	00000206 	br	81e8c <get_home_directory_cluster_for_file+0x448>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
   81e84:	e03fff15 	stw	zero,-4(fp)
   81e88:	00002d06 	br	81f40 <get_home_directory_cluster_for_file+0x4fc>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
   81e8c:	e0ffec17 	ldw	r3,-80(fp)
   81e90:	00bffdd4 	movui	r2,65527
   81e94:	10c00316 	blt	r2,r3,81ea4 <get_home_directory_cluster_for_file+0x460>
   81e98:	e0fff117 	ldw	r3,-60(fp)
   81e9c:	e0bff617 	ldw	r2,-40(fp)
   81ea0:	18bf9d26 	beq	r3,r2,81d18 <get_home_directory_cluster_for_file+0x2d4>
            if (new_cluster != home_dir_cluster)
   81ea4:	e0fff117 	ldw	r3,-60(fp)
   81ea8:	e0bff617 	ldw	r2,-40(fp)
   81eac:	18800826 	beq	r3,r2,81ed0 <get_home_directory_cluster_for_file+0x48c>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
   81eb0:	e0bff117 	ldw	r2,-60(fp)
   81eb4:	e0bff615 	stw	r2,-40(fp)
                start_location = start_location+location+1;
   81eb8:	e0fff317 	ldw	r3,-52(fp)
   81ebc:	e0bff517 	ldw	r2,-44(fp)
   81ec0:	1885883a 	add	r2,r3,r2
   81ec4:	10800044 	addi	r2,r2,1
   81ec8:	e0bff315 	stw	r2,-52(fp)
   81ecc:	00000206 	br	81ed8 <get_home_directory_cluster_for_file+0x494>
            }
            else
            {
                // Directory path is invalid. 
                return false;
   81ed0:	e03fff15 	stw	zero,-4(fp)
   81ed4:	00001a06 	br	81f40 <get_home_directory_cluster_for_file+0x4fc>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
   81ed8:	e0bff317 	ldw	r2,-52(fp)
   81edc:	1007883a 	mov	r3,r2
   81ee0:	e0bffc17 	ldw	r2,-16(fp)
   81ee4:	1889883a 	add	r4,r3,r2
   81ee8:	00816980 	call	81698 <get_dir_divider_location>
   81eec:	e0bff515 	stw	r2,-44(fp)
        if (location < 0)
   81ef0:	e0bff517 	ldw	r2,-44(fp)
   81ef4:	1004403a 	cmpge	r2,r2,zero
   81ef8:	1000021e 	bne	r2,zero,81f04 <get_home_directory_cluster_for_file+0x4c0>
        {
            // Directory has been located.
            result = true;
   81efc:	00800044 	movi	r2,1
   81f00:	e0bff715 	stw	r2,-36(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
   81f04:	e0bff517 	ldw	r2,-44(fp)
   81f08:	10800048 	cmpgei	r2,r2,1
   81f0c:	103edb1e 	bne	r2,zero,81a7c <get_home_directory_cluster_for_file+0x38>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
   81f10:	e0fffd17 	ldw	r3,-12(fp)
   81f14:	e0bff617 	ldw	r2,-40(fp)
   81f18:	18800015 	stw	r2,0(r3)
    if (home_dir_cluster == 0)
   81f1c:	e0bff617 	ldw	r2,-40(fp)
   81f20:	1004c03a 	cmpne	r2,r2,zero
   81f24:	1000041e 	bne	r2,zero,81f38 <get_home_directory_cluster_for_file+0x4f4>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
   81f28:	e0bffe17 	ldw	r2,-8(fp)
   81f2c:	10000a15 	stw	zero,40(r2)
		result = true;
   81f30:	00800044 	movi	r2,1
   81f34:	e0bff715 	stw	r2,-36(fp)
    }
    return result;
   81f38:	e0bff717 	ldw	r2,-36(fp)
   81f3c:	e0bfff15 	stw	r2,-4(fp)
   81f40:	e0bfff17 	ldw	r2,-4(fp)
}
   81f44:	e037883a 	mov	sp,fp
   81f48:	dfc00117 	ldw	ra,4(sp)
   81f4c:	df000017 	ldw	fp,0(sp)
   81f50:	dec00204 	addi	sp,sp,8
   81f54:	f800283a 	ret

00081f58 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
   81f58:	deffe704 	addi	sp,sp,-100
   81f5c:	dfc01815 	stw	ra,96(sp)
   81f60:	df001715 	stw	fp,92(sp)
   81f64:	df001704 	addi	fp,sp,92
   81f68:	e13ffc15 	stw	r4,-16(fp)
   81f6c:	e17ffd15 	stw	r5,-12(fp)
   81f70:	e1bffe15 	stw	r6,-8(fp)
    int location = get_dir_divider_location( file_name );
   81f74:	e13ffd17 	ldw	r4,-12(fp)
   81f78:	00816980 	call	81698 <get_dir_divider_location>
   81f7c:	e0bff715 	stw	r2,-36(fp)
    int last_dir_separator = 0;
   81f80:	e03ff615 	stw	zero,-40(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
   81f84:	00800804 	movi	r2,32
   81f88:	e0bff805 	stb	r2,-32(fp)
   81f8c:	00800804 	movi	r2,32
   81f90:	e0bff845 	stb	r2,-31(fp)
   81f94:	00800804 	movi	r2,32
   81f98:	e0bff885 	stb	r2,-30(fp)
   81f9c:	00800804 	movi	r2,32
   81fa0:	e0bff8c5 	stb	r2,-29(fp)
   81fa4:	00800804 	movi	r2,32
   81fa8:	e0bff905 	stb	r2,-28(fp)
   81fac:	00800804 	movi	r2,32
   81fb0:	e0bff945 	stb	r2,-27(fp)
   81fb4:	00800804 	movi	r2,32
   81fb8:	e0bff985 	stb	r2,-26(fp)
   81fbc:	00800804 	movi	r2,32
   81fc0:	e0bff9c5 	stb	r2,-25(fp)
    char extension[3] = { ' ', ' ', ' ' };
   81fc4:	00800804 	movi	r2,32
   81fc8:	e0bffa05 	stb	r2,-24(fp)
   81fcc:	00800804 	movi	r2,32
   81fd0:	e0bffa45 	stb	r2,-23(fp)
   81fd4:	00800804 	movi	r2,32
   81fd8:	e0bffa85 	stb	r2,-22(fp)
    int ext_index = -1;
   81fdc:	00bfffc4 	movi	r2,-1
   81fe0:	e0bff515 	stw	r2,-44(fp)
    int cluster = directory_start_cluster;
   81fe4:	e0bffc17 	ldw	r2,-16(fp)
   81fe8:	e0bff415 	stw	r2,-48(fp)
    int index;
	int length = strlen(file_name);
   81fec:	e13ffd17 	ldw	r4,-12(fp)
   81ff0:	0087b8c0 	call	87b8c <strlen>
   81ff4:	e0bff215 	stw	r2,-56(fp)
    bool result = false;
   81ff8:	e03ff115 	stw	zero,-60(fp)
    
    // Skip through all directory separators.
    while (location > 0)
   81ffc:	00000b06 	br	8202c <find_file_in_directory+0xd4>
    {
        last_dir_separator = last_dir_separator+location+1;
   82000:	e0fff617 	ldw	r3,-40(fp)
   82004:	e0bff717 	ldw	r2,-36(fp)
   82008:	1885883a 	add	r2,r3,r2
   8200c:	10800044 	addi	r2,r2,1
   82010:	e0bff615 	stw	r2,-40(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
   82014:	e0bff617 	ldw	r2,-40(fp)
   82018:	1007883a 	mov	r3,r2
   8201c:	e0bffd17 	ldw	r2,-12(fp)
   82020:	1889883a 	add	r4,r3,r2
   82024:	00816980 	call	81698 <get_dir_divider_location>
   82028:	e0bff715 	stw	r2,-36(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
   8202c:	e0bff717 	ldw	r2,-36(fp)
   82030:	10800048 	cmpgei	r2,r2,1
   82034:	103ff21e 	bne	r2,zero,82000 <find_file_in_directory+0xa8>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
   82038:	e0bff617 	ldw	r2,-40(fp)
   8203c:	e0bff315 	stw	r2,-52(fp)
   82040:	00002b06 	br	820f0 <find_file_in_directory+0x198>
    {
        if (file_name[index] == '.')
   82044:	e0bff317 	ldw	r2,-52(fp)
   82048:	1007883a 	mov	r3,r2
   8204c:	e0bffd17 	ldw	r2,-12(fp)
   82050:	1885883a 	add	r2,r3,r2
   82054:	10800003 	ldbu	r2,0(r2)
   82058:	10803fcc 	andi	r2,r2,255
   8205c:	1080201c 	xori	r2,r2,128
   82060:	10bfe004 	addi	r2,r2,-128
   82064:	10800b98 	cmpnei	r2,r2,46
   82068:	1000031e 	bne	r2,zero,82078 <find_file_in_directory+0x120>
        {
            ext_index = index;
   8206c:	e0bff317 	ldw	r2,-52(fp)
   82070:	e0bff515 	stw	r2,-44(fp)
   82074:	00001b06 	br	820e4 <find_file_in_directory+0x18c>
        }
        else if (ext_index < 0)
   82078:	e0bff517 	ldw	r2,-44(fp)
   8207c:	1004403a 	cmpge	r2,r2,zero
   82080:	10000c1e 	bne	r2,zero,820b4 <find_file_in_directory+0x15c>
        {
            name[index-last_dir_separator] = file_name[index];
   82084:	e0fff317 	ldw	r3,-52(fp)
   82088:	e0bff617 	ldw	r2,-40(fp)
   8208c:	1889c83a 	sub	r4,r3,r2
   82090:	e0bff317 	ldw	r2,-52(fp)
   82094:	1007883a 	mov	r3,r2
   82098:	e0bffd17 	ldw	r2,-12(fp)
   8209c:	1885883a 	add	r2,r3,r2
   820a0:	10c00003 	ldbu	r3,0(r2)
   820a4:	e0bff804 	addi	r2,fp,-32
   820a8:	1105883a 	add	r2,r2,r4
   820ac:	10c00005 	stb	r3,0(r2)
   820b0:	00000c06 	br	820e4 <find_file_in_directory+0x18c>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
   820b4:	e0fff317 	ldw	r3,-52(fp)
   820b8:	e0bff517 	ldw	r2,-44(fp)
   820bc:	1885c83a 	sub	r2,r3,r2
   820c0:	113fffc4 	addi	r4,r2,-1
   820c4:	e0bff317 	ldw	r2,-52(fp)
   820c8:	1007883a 	mov	r3,r2
   820cc:	e0bffd17 	ldw	r2,-12(fp)
   820d0:	1885883a 	add	r2,r3,r2
   820d4:	10c00003 	ldbu	r3,0(r2)
   820d8:	e0bffa04 	addi	r2,fp,-24
   820dc:	1105883a 	add	r2,r2,r4
   820e0:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
   820e4:	e0bff317 	ldw	r2,-52(fp)
   820e8:	10800044 	addi	r2,r2,1
   820ec:	e0bff315 	stw	r2,-52(fp)
   820f0:	e0fff317 	ldw	r3,-52(fp)
   820f4:	e0bff217 	ldw	r2,-56(fp)
   820f8:	18bfd216 	blt	r3,r2,82044 <find_file_in_directory+0xec>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
   820fc:	e0bffc17 	ldw	r2,-16(fp)
   82100:	1004c03a 	cmpne	r2,r2,zero
   82104:	1000441e 	bne	r2,zero,82218 <find_file_in_directory+0x2c0>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   82108:	008002b4 	movhi	r2,10
   8210c:	108e6a04 	addi	r2,r2,14760
   82110:	1080050b 	ldhu	r2,20(r2)
   82114:	10bfffcc 	andi	r2,r2,65535
   82118:	1008917a 	slli	r4,r2,5
   8211c:	008002b4 	movhi	r2,10
   82120:	108e6a04 	addi	r2,r2,14760
   82124:	1080030b 	ldhu	r2,12(r2)
   82128:	117fffcc 	andi	r5,r2,65535
   8212c:	00877140 	call	87714 <__divsi3>
   82130:	e0bff015 	stw	r2,-64(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   82134:	e03fef15 	stw	zero,-68(fp)
   82138:	00003306 	br	82208 <find_file_in_directory+0x2b0>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   8213c:	008002b4 	movhi	r2,10
   82140:	108e6a04 	addi	r2,r2,14760
   82144:	10c01317 	ldw	r3,76(r2)
   82148:	e0bfef17 	ldw	r2,-68(fp)
   8214c:	1885883a 	add	r2,r3,r2
   82150:	1009883a 	mov	r4,r2
   82154:	d1670717 	ldw	r5,-25572(gp)
   82158:	008053c0 	call	8053c <Read_Sector_Data>
   8215c:	1005003a 	cmpeq	r2,r2,zero
   82160:	10008e1e 	bne	r2,zero,8239c <find_file_in_directory+0x444>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   82164:	e03fee15 	stw	zero,-72(fp)
   82168:	00001e06 	br	821e4 <find_file_in_directory+0x28c>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
   8216c:	e0bfee17 	ldw	r2,-72(fp)
   82170:	1008917a 	slli	r4,r2,5
   82174:	e1ffef17 	ldw	r7,-68(fp)
   82178:	e17ffe17 	ldw	r5,-8(fp)
   8217c:	000d883a 	mov	r6,zero
   82180:	00809000 	call	80900 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   82184:	e0bffe17 	ldw	r2,-8(fp)
   82188:	10800003 	ldbu	r2,0(r2)
   8218c:	10803fcc 	andi	r2,r2,255
   82190:	10803960 	cmpeqi	r2,r2,229
   82194:	1000101e 	bne	r2,zero,821d8 <find_file_in_directory+0x280>
   82198:	e0bffe17 	ldw	r2,-8(fp)
   8219c:	10800003 	ldbu	r2,0(r2)
   821a0:	10803fcc 	andi	r2,r2,255
   821a4:	1005003a 	cmpeq	r2,r2,zero
   821a8:	10000b1e 	bne	r2,zero,821d8 <find_file_in_directory+0x280>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
   821ac:	e17ff804 	addi	r5,fp,-32
   821b0:	e1bffa04 	addi	r6,fp,-24
   821b4:	e13ffe17 	ldw	r4,-8(fp)
   821b8:	00817580 	call	81758 <match_file_record_to_name_ext>
   821bc:	e0bfed15 	stw	r2,-76(fp)

                        if (match)
   821c0:	e0bfed17 	ldw	r2,-76(fp)
   821c4:	1005003a 	cmpeq	r2,r2,zero
   821c8:	1000031e 	bne	r2,zero,821d8 <find_file_in_directory+0x280>
                        {
                            result = true;
   821cc:	00800044 	movi	r2,1
   821d0:	e0bff115 	stw	r2,-60(fp)
                            break;
   821d4:	00000606 	br	821f0 <find_file_in_directory+0x298>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   821d8:	e0bfee17 	ldw	r2,-72(fp)
   821dc:	10800044 	addi	r2,r2,1
   821e0:	e0bfee15 	stw	r2,-72(fp)
   821e4:	e0bfee17 	ldw	r2,-72(fp)
   821e8:	10800410 	cmplti	r2,r2,16
   821ec:	103fdf1e 	bne	r2,zero,8216c <find_file_in_directory+0x214>
            }
            else
            {
                break;
            }
            if (result)
   821f0:	e0bff117 	ldw	r2,-60(fp)
   821f4:	1004c03a 	cmpne	r2,r2,zero
   821f8:	1000681e 	bne	r2,zero,8239c <find_file_in_directory+0x444>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   821fc:	e0bfef17 	ldw	r2,-68(fp)
   82200:	10800044 	addi	r2,r2,1
   82204:	e0bfef15 	stw	r2,-68(fp)
   82208:	e0ffef17 	ldw	r3,-68(fp)
   8220c:	e0bff017 	ldw	r2,-64(fp)
   82210:	18bfca16 	blt	r3,r2,8213c <find_file_in_directory+0x1e4>
   82214:	00006106 	br	8239c <find_file_in_directory+0x444>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   82218:	e0bff417 	ldw	r2,-48(fp)
   8221c:	113fff84 	addi	r4,r2,-2
   82220:	008002b4 	movhi	r2,10
   82224:	108e6a04 	addi	r2,r2,14760
   82228:	10800383 	ldbu	r2,14(r2)
   8222c:	11403fcc 	andi	r5,r2,255
   82230:	00877e40 	call	877e4 <__mulsi3>
   82234:	1007883a 	mov	r3,r2
   82238:	008002b4 	movhi	r2,10
   8223c:	108e6a04 	addi	r2,r2,14760
   82240:	10801417 	ldw	r2,80(r2)
   82244:	1885883a 	add	r2,r3,r2
   82248:	e0bfec15 	stw	r2,-80(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   8224c:	e03feb15 	stw	zero,-84(fp)
   82250:	00003006 	br	82314 <find_file_in_directory+0x3bc>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   82254:	e0ffeb17 	ldw	r3,-84(fp)
   82258:	e0bfec17 	ldw	r2,-80(fp)
   8225c:	1889883a 	add	r4,r3,r2
   82260:	d1670717 	ldw	r5,-25572(gp)
   82264:	008053c0 	call	8053c <Read_Sector_Data>
   82268:	1005003a 	cmpeq	r2,r2,zero
   8226c:	10002f1e 	bne	r2,zero,8232c <find_file_in_directory+0x3d4>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   82270:	e03fea15 	stw	zero,-88(fp)
   82274:	00001e06 	br	822f0 <find_file_in_directory+0x398>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
   82278:	e0bfea17 	ldw	r2,-88(fp)
   8227c:	1008917a 	slli	r4,r2,5
   82280:	e1bff417 	ldw	r6,-48(fp)
   82284:	e1ffeb17 	ldw	r7,-84(fp)
   82288:	e17ffe17 	ldw	r5,-8(fp)
   8228c:	00809000 	call	80900 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
   82290:	e0bffe17 	ldw	r2,-8(fp)
   82294:	10800003 	ldbu	r2,0(r2)
   82298:	10803fcc 	andi	r2,r2,255
   8229c:	10803960 	cmpeqi	r2,r2,229
   822a0:	1000101e 	bne	r2,zero,822e4 <find_file_in_directory+0x38c>
   822a4:	e0bffe17 	ldw	r2,-8(fp)
   822a8:	10800003 	ldbu	r2,0(r2)
   822ac:	10803fcc 	andi	r2,r2,255
   822b0:	1005003a 	cmpeq	r2,r2,zero
   822b4:	10000b1e 	bne	r2,zero,822e4 <find_file_in_directory+0x38c>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
   822b8:	e17ff804 	addi	r5,fp,-32
   822bc:	e1bffa04 	addi	r6,fp,-24
   822c0:	e13ffe17 	ldw	r4,-8(fp)
   822c4:	00817580 	call	81758 <match_file_record_to_name_ext>
   822c8:	e0bfe915 	stw	r2,-92(fp)

                            if (match)
   822cc:	e0bfe917 	ldw	r2,-92(fp)
   822d0:	1005003a 	cmpeq	r2,r2,zero
   822d4:	1000031e 	bne	r2,zero,822e4 <find_file_in_directory+0x38c>
                            {                               
                                result = true;
   822d8:	00800044 	movi	r2,1
   822dc:	e0bff115 	stw	r2,-60(fp)
                                break;
   822e0:	00000606 	br	822fc <find_file_in_directory+0x3a4>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
   822e4:	e0bfea17 	ldw	r2,-88(fp)
   822e8:	10800044 	addi	r2,r2,1
   822ec:	e0bfea15 	stw	r2,-88(fp)
   822f0:	e0bfea17 	ldw	r2,-88(fp)
   822f4:	10800410 	cmplti	r2,r2,16
   822f8:	103fdf1e 	bne	r2,zero,82278 <find_file_in_directory+0x320>
                }
                else
                {
                    break;
                }
                if (result)
   822fc:	e0bff117 	ldw	r2,-60(fp)
   82300:	1004c03a 	cmpne	r2,r2,zero
   82304:	1000091e 	bne	r2,zero,8232c <find_file_in_directory+0x3d4>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   82308:	e0bfeb17 	ldw	r2,-84(fp)
   8230c:	10800044 	addi	r2,r2,1
   82310:	e0bfeb15 	stw	r2,-84(fp)
   82314:	008002b4 	movhi	r2,10
   82318:	108e6a04 	addi	r2,r2,14760
   8231c:	10800383 	ldbu	r2,14(r2)
   82320:	10c03fcc 	andi	r3,r2,255
   82324:	e0bfeb17 	ldw	r2,-84(fp)
   82328:	10ffca16 	blt	r2,r3,82254 <find_file_in_directory+0x2fc>
                    break;
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
   8232c:	e0bff117 	ldw	r2,-60(fp)
   82330:	1004c03a 	cmpne	r2,r2,zero
   82334:	1000131e 	bne	r2,zero,82384 <find_file_in_directory+0x42c>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
   82338:	e13ff417 	ldw	r4,-48(fp)
   8233c:	e17ffb04 	addi	r5,fp,-20
   82340:	008062c0 	call	8062c <get_cluster_flag>
   82344:	1005003a 	cmpeq	r2,r2,zero
   82348:	10000c1e 	bne	r2,zero,8237c <find_file_in_directory+0x424>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   8234c:	e0bffb0b 	ldhu	r2,-20(fp)
   82350:	10bfffcc 	andi	r2,r2,65535
   82354:	10fffe0c 	andi	r3,r2,65528
   82358:	00bffe14 	movui	r2,65528
   8235c:	1880021e 	bne	r3,r2,82368 <find_file_in_directory+0x410>
					{
						return false;
   82360:	e03fff15 	stw	zero,-4(fp)
   82364:	00000f06 	br	823a4 <find_file_in_directory+0x44c>
					}
					cluster = (new_cluster & 0x0000fff8);
   82368:	e0bffb0b 	ldhu	r2,-20(fp)
   8236c:	10bfffcc 	andi	r2,r2,65535
   82370:	10bffe0c 	andi	r2,r2,65528
   82374:	e0bff415 	stw	r2,-48(fp)
   82378:	00000206 	br	82384 <find_file_in_directory+0x42c>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
   8237c:	e03fff15 	stw	zero,-4(fp)
   82380:	00000806 	br	823a4 <find_file_in_directory+0x44c>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
   82384:	e0fff417 	ldw	r3,-48(fp)
   82388:	00bffdd4 	movui	r2,65527
   8238c:	10c00316 	blt	r2,r3,8239c <find_file_in_directory+0x444>
   82390:	e0bff117 	ldw	r2,-60(fp)
   82394:	1005003a 	cmpeq	r2,r2,zero
   82398:	103f9f1e 	bne	r2,zero,82218 <find_file_in_directory+0x2c0>
    }
    
    return result;   
   8239c:	e0bff117 	ldw	r2,-60(fp)
   823a0:	e0bfff15 	stw	r2,-4(fp)
   823a4:	e0bfff17 	ldw	r2,-4(fp)
}
   823a8:	e037883a 	mov	sp,fp
   823ac:	dfc00117 	ldw	ra,4(sp)
   823b0:	df000017 	ldw	fp,0(sp)
   823b4:	dec00204 	addi	sp,sp,8
   823b8:	f800283a 	ret

000823bc <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
   823bc:	defff504 	addi	sp,sp,-44
   823c0:	dfc00a15 	stw	ra,40(sp)
   823c4:	df000915 	stw	fp,36(sp)
   823c8:	df000904 	addi	fp,sp,36
   823cc:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
   823d0:	008002b4 	movhi	r2,10
   823d4:	108e6a04 	addi	r2,r2,14760
   823d8:	10801117 	ldw	r2,68(r2)
   823dc:	e0bffe15 	stw	r2,-8(fp)
    unsigned int cluster_index = 2;
   823e0:	00800084 	movi	r2,2
   823e4:	e0bffd15 	stw	r2,-12(fp)
    short int cluster = -1;
   823e8:	00bfffc4 	movi	r2,-1
   823ec:	e0bffc0d 	sth	r2,-16(fp)
    bool result = false;
   823f0:	e03ffb15 	stw	zero,-20(fp)
	unsigned max_cluster_index = 0;
   823f4:	e03ffa15 	stw	zero,-24(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
   823f8:	008002b4 	movhi	r2,10
   823fc:	108e6a04 	addi	r2,r2,14760
   82400:	10801417 	ldw	r2,80(r2)
   82404:	e0bff915 	stw	r2,-28(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
   82408:	008002b4 	movhi	r2,10
   8240c:	108e6a04 	addi	r2,r2,14760
   82410:	1080058b 	ldhu	r2,22(r2)
   82414:	10bfffcc 	andi	r2,r2,65535
   82418:	e0bff815 	stw	r2,-32(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
   8241c:	008002b4 	movhi	r2,10
   82420:	108e6a04 	addi	r2,r2,14760
   82424:	10800917 	ldw	r2,36(r2)
   82428:	e0bff715 	stw	r2,-36(fp)

	if (less_than_32 > greater_than_32)
   8242c:	e0fff817 	ldw	r3,-32(fp)
   82430:	e0bff717 	ldw	r2,-36(fp)
   82434:	10c00b2e 	bgeu	r2,r3,82464 <find_first_empty_cluster+0xa8>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
   82438:	e0fff817 	ldw	r3,-32(fp)
   8243c:	e0bff917 	ldw	r2,-28(fp)
   82440:	1889c83a 	sub	r4,r3,r2
   82444:	008002b4 	movhi	r2,10
   82448:	108e6a04 	addi	r2,r2,14760
   8244c:	10800383 	ldbu	r2,14(r2)
   82450:	11403fcc 	andi	r5,r2,255
   82454:	00877d40 	call	877d4 <__udivsi3>
   82458:	10800044 	addi	r2,r2,1
   8245c:	e0bffa15 	stw	r2,-24(fp)
   82460:	00002506 	br	824f8 <find_first_empty_cluster+0x13c>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
   82464:	e0fff717 	ldw	r3,-36(fp)
   82468:	e0bff917 	ldw	r2,-28(fp)
   8246c:	1889c83a 	sub	r4,r3,r2
   82470:	008002b4 	movhi	r2,10
   82474:	108e6a04 	addi	r2,r2,14760
   82478:	10800383 	ldbu	r2,14(r2)
   8247c:	11403fcc 	andi	r5,r2,255
   82480:	00877d40 	call	877d4 <__udivsi3>
   82484:	10800044 	addi	r2,r2,1
   82488:	e0bffa15 	stw	r2,-24(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
   8248c:	00001a06 	br	824f8 <find_first_empty_cluster+0x13c>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
   82490:	e13ffe17 	ldw	r4,-8(fp)
   82494:	d1670717 	ldw	r5,-25572(gp)
   82498:	008053c0 	call	8053c <Read_Sector_Data>
   8249c:	1005003a 	cmpeq	r2,r2,zero
   824a0:	10000f1e 	bne	r2,zero,824e0 <find_first_empty_cluster+0x124>
        {
            do {
                cluster = (*((volatile unsigned short int *)SD_CARD_BUFFER(SD_CARD_0_BASE, 2*(cluster_index % 256))));
   824a4:	e0bffd17 	ldw	r2,-12(fp)
   824a8:	10803fcc 	andi	r2,r2,255
   824ac:	1085883a 	add	r2,r2,r2
   824b0:	1080000b 	ldhu	r2,0(r2)
   824b4:	e0bffc0d 	sth	r2,-16(fp)
                if (cluster == 0)
   824b8:	e0bffc0f 	ldh	r2,-16(fp)
   824bc:	1005003a 	cmpeq	r2,r2,zero
   824c0:	1000071e 	bne	r2,zero,824e0 <find_first_empty_cluster+0x124>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
   824c4:	e0bffd17 	ldw	r2,-12(fp)
   824c8:	10800044 	addi	r2,r2,1
   824cc:	e0bffd15 	stw	r2,-12(fp)
                } 
            } while ((cluster_index % 256) != 0);
   824d0:	e0bffd17 	ldw	r2,-12(fp)
   824d4:	10803fcc 	andi	r2,r2,255
   824d8:	1004c03a 	cmpne	r2,r2,zero
   824dc:	103ff11e 	bne	r2,zero,824a4 <find_first_empty_cluster+0xe8>
        }
        if (cluster == 0)
   824e0:	e0bffc0f 	ldh	r2,-16(fp)
   824e4:	1005003a 	cmpeq	r2,r2,zero
   824e8:	1000081e 	bne	r2,zero,8250c <find_first_empty_cluster+0x150>
        {
            break;
        }
        sector++;
   824ec:	e0bffe17 	ldw	r2,-8(fp)
   824f0:	10800044 	addi	r2,r2,1
   824f4:	e0bffe15 	stw	r2,-8(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
   824f8:	008002b4 	movhi	r2,10
   824fc:	108e6a04 	addi	r2,r2,14760
   82500:	10c01217 	ldw	r3,72(r2)
   82504:	e0bffe17 	ldw	r2,-8(fp)
   82508:	18bfe11e 	bne	r3,r2,82490 <find_first_empty_cluster+0xd4>
        {
            break;
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
   8250c:	e0bffc0f 	ldh	r2,-16(fp)
   82510:	1004c03a 	cmpne	r2,r2,zero
   82514:	1000081e 	bne	r2,zero,82538 <find_first_empty_cluster+0x17c>
   82518:	e0fffc0f 	ldh	r3,-16(fp)
   8251c:	e0bffa17 	ldw	r2,-24(fp)
   82520:	10c00536 	bltu	r2,r3,82538 <find_first_empty_cluster+0x17c>
    {
        *cluster_number = cluster_index;
   82524:	e0bfff17 	ldw	r2,-4(fp)
   82528:	e0fffd17 	ldw	r3,-12(fp)
   8252c:	10c00015 	stw	r3,0(r2)
		result = true;
   82530:	00800044 	movi	r2,1
   82534:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
   82538:	e0bffb17 	ldw	r2,-20(fp)
}
   8253c:	e037883a 	mov	sp,fp
   82540:	dfc00117 	ldw	ra,4(sp)
   82544:	df000017 	ldw	fp,0(sp)
   82548:	dec00204 	addi	sp,sp,8
   8254c:	f800283a 	ret

00082550 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
   82550:	defff404 	addi	sp,sp,-48
   82554:	dfc00b15 	stw	ra,44(sp)
   82558:	df000a15 	stw	fp,40(sp)
   8255c:	df000a04 	addi	fp,sp,40
   82560:	e13ffe15 	stw	r4,-8(fp)
    int result = -1;
   82564:	00bfffc4 	movi	r2,-1
   82568:	e0bffb15 	stw	r2,-20(fp)
    int cluster = start_cluster_index;
   8256c:	e0bffe17 	ldw	r2,-8(fp)
   82570:	e0bffa15 	stw	r2,-24(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   82574:	e0bffa17 	ldw	r2,-24(fp)
   82578:	113fff84 	addi	r4,r2,-2
   8257c:	008002b4 	movhi	r2,10
   82580:	108e6a04 	addi	r2,r2,14760
   82584:	10800383 	ldbu	r2,14(r2)
   82588:	11403fcc 	andi	r5,r2,255
   8258c:	00877e40 	call	877e4 <__mulsi3>
   82590:	1007883a 	mov	r3,r2
   82594:	008002b4 	movhi	r2,10
   82598:	108e6a04 	addi	r2,r2,14760
   8259c:	10801417 	ldw	r2,80(r2)
   825a0:	1885883a 	add	r2,r3,r2
   825a4:	e0bff915 	stw	r2,-28(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   825a8:	e03ff815 	stw	zero,-32(fp)
   825ac:	00002806 	br	82650 <find_first_empty_record_in_a_subdirectory+0x100>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   825b0:	e0fff817 	ldw	r3,-32(fp)
   825b4:	e0bff917 	ldw	r2,-28(fp)
   825b8:	1889883a 	add	r4,r3,r2
   825bc:	d1670717 	ldw	r5,-25572(gp)
   825c0:	008053c0 	call	8053c <Read_Sector_Data>
   825c4:	1005003a 	cmpeq	r2,r2,zero
   825c8:	1000271e 	bne	r2,zero,82668 <find_first_empty_record_in_a_subdirectory+0x118>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   825cc:	e03ff715 	stw	zero,-36(fp)
   825d0:	00001906 	br	82638 <find_first_empty_record_in_a_subdirectory+0xe8>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = (*((volatile unsigned char *)SD_CARD_BUFFER(SD_CARD_0_BASE, file_counter*32)));
   825d4:	e0bff717 	ldw	r2,-36(fp)
   825d8:	1004917a 	slli	r2,r2,5
   825dc:	10800003 	ldbu	r2,0(r2)
   825e0:	10803fcc 	andi	r2,r2,255
   825e4:	e0bff60d 	sth	r2,-40(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
   825e8:	e0bff60b 	ldhu	r2,-40(fp)
   825ec:	10803960 	cmpeqi	r2,r2,229
   825f0:	1000031e 	bne	r2,zero,82600 <find_first_empty_record_in_a_subdirectory+0xb0>
   825f4:	e0bff60b 	ldhu	r2,-40(fp)
   825f8:	1004c03a 	cmpne	r2,r2,zero
   825fc:	10000b1e 	bne	r2,zero,8262c <find_first_empty_record_in_a_subdirectory+0xdc>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
   82600:	e0bff817 	ldw	r2,-32(fp)
   82604:	1006913a 	slli	r3,r2,4
   82608:	e0bff717 	ldw	r2,-36(fp)
   8260c:	1885883a 	add	r2,r3,r2
   82610:	1006943a 	slli	r3,r2,16
   82614:	e0bffa17 	ldw	r2,-24(fp)
   82618:	1884b03a 	or	r2,r3,r2
   8261c:	e0bffb15 	stw	r2,-20(fp)
                        return result;
   82620:	e0bffb17 	ldw	r2,-20(fp)
   82624:	e0bfff15 	stw	r2,-4(fp)
   82628:	00005206 	br	82774 <find_first_empty_record_in_a_subdirectory+0x224>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
   8262c:	e0bff717 	ldw	r2,-36(fp)
   82630:	10800044 	addi	r2,r2,1
   82634:	e0bff715 	stw	r2,-36(fp)
   82638:	e0bff717 	ldw	r2,-36(fp)
   8263c:	10800410 	cmplti	r2,r2,16
   82640:	103fe41e 	bne	r2,zero,825d4 <find_first_empty_record_in_a_subdirectory+0x84>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   82644:	e0bff817 	ldw	r2,-32(fp)
   82648:	10800044 	addi	r2,r2,1
   8264c:	e0bff815 	stw	r2,-32(fp)
   82650:	008002b4 	movhi	r2,10
   82654:	108e6a04 	addi	r2,r2,14760
   82658:	10800383 	ldbu	r2,14(r2)
   8265c:	10c03fcc 	andi	r3,r2,255
   82660:	e0bff817 	ldw	r2,-32(fp)
   82664:	10ffd216 	blt	r2,r3,825b0 <find_first_empty_record_in_a_subdirectory+0x60>
                break;
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
   82668:	e0bffb17 	ldw	r2,-20(fp)
   8266c:	1004403a 	cmpge	r2,r2,zero
   82670:	1000381e 	bne	r2,zero,82754 <find_first_empty_record_in_a_subdirectory+0x204>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
   82674:	e13ffa17 	ldw	r4,-24(fp)
   82678:	e17ffc04 	addi	r5,fp,-16
   8267c:	008062c0 	call	8062c <get_cluster_flag>
   82680:	1005003a 	cmpeq	r2,r2,zero
   82684:	1000311e 	bne	r2,zero,8274c <find_first_empty_record_in_a_subdirectory+0x1fc>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   82688:	e0bffc0b 	ldhu	r2,-16(fp)
   8268c:	10bfffcc 	andi	r2,r2,65535
   82690:	10fffe0c 	andi	r3,r2,65528
   82694:	00bffe14 	movui	r2,65528
   82698:	18802e1e 	bne	r3,r2,82754 <find_first_empty_record_in_a_subdirectory+0x204>
				{
					int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
   8269c:	e13ffd04 	addi	r4,fp,-12
   826a0:	00823bc0 	call	823bc <find_first_empty_cluster>
   826a4:	1005003a 	cmpeq	r2,r2,zero
   826a8:	1000231e 	bne	r2,zero,82738 <find_first_empty_record_in_a_subdirectory+0x1e8>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
   826ac:	e13ffa17 	ldw	r4,-24(fp)
   826b0:	e0bffd17 	ldw	r2,-12(fp)
   826b4:	117fffcc 	andi	r5,r2,65535
   826b8:	2960001c 	xori	r5,r5,32768
   826bc:	29600004 	addi	r5,r5,-32768
   826c0:	01800044 	movi	r6,1
   826c4:	00806d00 	call	806d0 <mark_cluster>
   826c8:	1005003a 	cmpeq	r2,r2,zero
   826cc:	10001a1e 	bne	r2,zero,82738 <find_first_empty_record_in_a_subdirectory+0x1e8>
   826d0:	e0bffd17 	ldw	r2,-12(fp)
   826d4:	1009883a 	mov	r4,r2
   826d8:	017fffc4 	movi	r5,-1
   826dc:	01800044 	movi	r6,1
   826e0:	00806d00 	call	806d0 <mark_cluster>
   826e4:	1005003a 	cmpeq	r2,r2,zero
   826e8:	1000131e 	bne	r2,zero,82738 <find_first_empty_record_in_a_subdirectory+0x1e8>
   826ec:	e13ffa17 	ldw	r4,-24(fp)
   826f0:	e0bffd17 	ldw	r2,-12(fp)
   826f4:	117fffcc 	andi	r5,r2,65535
   826f8:	2960001c 	xori	r5,r5,32768
   826fc:	29600004 	addi	r5,r5,-32768
   82700:	000d883a 	mov	r6,zero
   82704:	00806d00 	call	806d0 <mark_cluster>
   82708:	1005003a 	cmpeq	r2,r2,zero
   8270c:	10000a1e 	bne	r2,zero,82738 <find_first_empty_record_in_a_subdirectory+0x1e8>
   82710:	e0bffd17 	ldw	r2,-12(fp)
   82714:	1009883a 	mov	r4,r2
   82718:	017fffc4 	movi	r5,-1
   8271c:	000d883a 	mov	r6,zero
   82720:	00806d00 	call	806d0 <mark_cluster>
   82724:	1005003a 	cmpeq	r2,r2,zero
   82728:	1000031e 	bne	r2,zero,82738 <find_first_empty_record_in_a_subdirectory+0x1e8>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
   8272c:	00804ec0 	call	804ec <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
   82730:	e0bffd17 	ldw	r2,-12(fp)
   82734:	e0bffb15 	stw	r2,-20(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
   82738:	e0bffc0b 	ldhu	r2,-16(fp)
   8273c:	10bfffcc 	andi	r2,r2,65535
   82740:	10bffe0c 	andi	r2,r2,65528
   82744:	e0bffa15 	stw	r2,-24(fp)
   82748:	00000206 	br	82754 <find_first_empty_record_in_a_subdirectory+0x204>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
   8274c:	00bfffc4 	movi	r2,-1
   82750:	e0bffb15 	stw	r2,-20(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
   82754:	e0fffa17 	ldw	r3,-24(fp)
   82758:	00bffdd4 	movui	r2,65527
   8275c:	10c00316 	blt	r2,r3,8276c <find_first_empty_record_in_a_subdirectory+0x21c>
   82760:	e0bffb17 	ldw	r2,-20(fp)
   82764:	10bfffe0 	cmpeqi	r2,r2,-1
   82768:	103f821e 	bne	r2,zero,82574 <find_first_empty_record_in_a_subdirectory+0x24>
    return result; 
   8276c:	e0bffb17 	ldw	r2,-20(fp)
   82770:	e0bfff15 	stw	r2,-4(fp)
   82774:	e0bfff17 	ldw	r2,-4(fp)
}
   82778:	e037883a 	mov	sp,fp
   8277c:	dfc00117 	ldw	ra,4(sp)
   82780:	df000017 	ldw	fp,0(sp)
   82784:	dec00204 	addi	sp,sp,8
   82788:	f800283a 	ret

0008278c <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
   8278c:	defff804 	addi	sp,sp,-32
   82790:	dfc00715 	stw	ra,28(sp)
   82794:	df000615 	stw	fp,24(sp)
   82798:	df000604 	addi	fp,sp,24
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   8279c:	008002b4 	movhi	r2,10
   827a0:	108e6a04 	addi	r2,r2,14760
   827a4:	1080050b 	ldhu	r2,20(r2)
   827a8:	10bfffcc 	andi	r2,r2,65535
   827ac:	1008917a 	slli	r4,r2,5
   827b0:	008002b4 	movhi	r2,10
   827b4:	108e6a04 	addi	r2,r2,14760
   827b8:	1080030b 	ldhu	r2,12(r2)
   827bc:	117fffcc 	andi	r5,r2,65535
   827c0:	00877140 	call	87714 <__divsi3>
   827c4:	e0bffe15 	stw	r2,-8(fp)
    int sector_index;
    int result = -1;
   827c8:	00bfffc4 	movi	r2,-1
   827cc:	e0bffc15 	stw	r2,-16(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   827d0:	e03ffd15 	stw	zero,-12(fp)
   827d4:	00002906 	br	8287c <find_first_empty_record_in_root_directory+0xf0>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   827d8:	008002b4 	movhi	r2,10
   827dc:	108e6a04 	addi	r2,r2,14760
   827e0:	10c01317 	ldw	r3,76(r2)
   827e4:	e0bffd17 	ldw	r2,-12(fp)
   827e8:	1885883a 	add	r2,r3,r2
   827ec:	1009883a 	mov	r4,r2
   827f0:	d1670717 	ldw	r5,-25572(gp)
   827f4:	008053c0 	call	8053c <Read_Sector_Data>
   827f8:	1005003a 	cmpeq	r2,r2,zero
   827fc:	1000221e 	bne	r2,zero,82888 <find_first_empty_record_in_root_directory+0xfc>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
   82800:	e03ffb15 	stw	zero,-20(fp)
   82804:	00001706 	br	82864 <find_first_empty_record_in_root_directory+0xd8>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = (*((volatile unsigned char *)SD_CARD_BUFFER(SD_CARD_0_BASE, file_counter*32)));
   82808:	e0bffb17 	ldw	r2,-20(fp)
   8280c:	1004917a 	slli	r2,r2,5
   82810:	10800003 	ldbu	r2,0(r2)
   82814:	10803fcc 	andi	r2,r2,255
   82818:	e0bffa0d 	sth	r2,-24(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
   8281c:	e0bffa0b 	ldhu	r2,-24(fp)
   82820:	10803960 	cmpeqi	r2,r2,229
   82824:	1000031e 	bne	r2,zero,82834 <find_first_empty_record_in_root_directory+0xa8>
   82828:	e0bffa0b 	ldhu	r2,-24(fp)
   8282c:	1004c03a 	cmpne	r2,r2,zero
   82830:	1000091e 	bne	r2,zero,82858 <find_first_empty_record_in_root_directory+0xcc>
                {
                    result = (sector_index*16 + file_counter) << 16;
   82834:	e0bffd17 	ldw	r2,-12(fp)
   82838:	1006913a 	slli	r3,r2,4
   8283c:	e0bffb17 	ldw	r2,-20(fp)
   82840:	1885883a 	add	r2,r3,r2
   82844:	1004943a 	slli	r2,r2,16
   82848:	e0bffc15 	stw	r2,-16(fp)
                    return result;
   8284c:	e0bffc17 	ldw	r2,-16(fp)
   82850:	e0bfff15 	stw	r2,-4(fp)
   82854:	00000e06 	br	82890 <find_first_empty_record_in_root_directory+0x104>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
   82858:	e0bffb17 	ldw	r2,-20(fp)
   8285c:	10800044 	addi	r2,r2,1
   82860:	e0bffb15 	stw	r2,-20(fp)
   82864:	e0bffb17 	ldw	r2,-20(fp)
   82868:	10800410 	cmplti	r2,r2,16
   8286c:	103fe61e 	bne	r2,zero,82808 <find_first_empty_record_in_root_directory+0x7c>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   82870:	e0bffd17 	ldw	r2,-12(fp)
   82874:	10800044 	addi	r2,r2,1
   82878:	e0bffd15 	stw	r2,-12(fp)
   8287c:	e0fffd17 	ldw	r3,-12(fp)
   82880:	e0bffe17 	ldw	r2,-8(fp)
   82884:	18bfd416 	blt	r3,r2,827d8 <find_first_empty_record_in_root_directory+0x4c>
        else
        {
            break;
        }
    }
    return result;
   82888:	e0bffc17 	ldw	r2,-16(fp)
   8288c:	e0bfff15 	stw	r2,-4(fp)
   82890:	e0bfff17 	ldw	r2,-4(fp)
}
   82894:	e037883a 	mov	sp,fp
   82898:	dfc00117 	ldw	ra,4(sp)
   8289c:	df000017 	ldw	fp,0(sp)
   828a0:	dec00204 	addi	sp,sp,8
   828a4:	f800283a 	ret

000828a8 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
   828a8:	defffa04 	addi	sp,sp,-24
   828ac:	df000515 	stw	fp,20(sp)
   828b0:	df000504 	addi	fp,sp,20
   828b4:	e13ffd15 	stw	r4,-12(fp)
   828b8:	e17ffe15 	stw	r5,-8(fp)
   828bc:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
   828c0:	e03ffb15 	stw	zero,-20(fp)
    
    for(counter = 0; counter < 8; counter++)
   828c4:	e03ffc15 	stw	zero,-16(fp)
   828c8:	00002b06 	br	82978 <convert_filename_to_name_extension+0xd0>
    {
        if (filename[local] != '.')
   828cc:	e0bffb17 	ldw	r2,-20(fp)
   828d0:	1007883a 	mov	r3,r2
   828d4:	e0bffd17 	ldw	r2,-12(fp)
   828d8:	1885883a 	add	r2,r3,r2
   828dc:	10800003 	ldbu	r2,0(r2)
   828e0:	10803fcc 	andi	r2,r2,255
   828e4:	1080201c 	xori	r2,r2,128
   828e8:	10bfe004 	addi	r2,r2,-128
   828ec:	10800ba0 	cmpeqi	r2,r2,46
   828f0:	1000181e 	bne	r2,zero,82954 <convert_filename_to_name_extension+0xac>
        {
            name[counter] = filename[local];
   828f4:	e0bffc17 	ldw	r2,-16(fp)
   828f8:	1007883a 	mov	r3,r2
   828fc:	e0bffe17 	ldw	r2,-8(fp)
   82900:	1889883a 	add	r4,r3,r2
   82904:	e0bffb17 	ldw	r2,-20(fp)
   82908:	1007883a 	mov	r3,r2
   8290c:	e0bffd17 	ldw	r2,-12(fp)
   82910:	1885883a 	add	r2,r3,r2
   82914:	10800003 	ldbu	r2,0(r2)
   82918:	20800005 	stb	r2,0(r4)
            if (filename[local] != 0) local++;
   8291c:	e0bffb17 	ldw	r2,-20(fp)
   82920:	1007883a 	mov	r3,r2
   82924:	e0bffd17 	ldw	r2,-12(fp)
   82928:	1885883a 	add	r2,r3,r2
   8292c:	10800003 	ldbu	r2,0(r2)
   82930:	10803fcc 	andi	r2,r2,255
   82934:	1080201c 	xori	r2,r2,128
   82938:	10bfe004 	addi	r2,r2,-128
   8293c:	1005003a 	cmpeq	r2,r2,zero
   82940:	10000a1e 	bne	r2,zero,8296c <convert_filename_to_name_extension+0xc4>
   82944:	e0bffb17 	ldw	r2,-20(fp)
   82948:	10800044 	addi	r2,r2,1
   8294c:	e0bffb15 	stw	r2,-20(fp)
   82950:	00000606 	br	8296c <convert_filename_to_name_extension+0xc4>
        }
        else
        {
            name[counter] = ' ';
   82954:	e0bffc17 	ldw	r2,-16(fp)
   82958:	1007883a 	mov	r3,r2
   8295c:	e0bffe17 	ldw	r2,-8(fp)
   82960:	1887883a 	add	r3,r3,r2
   82964:	00800804 	movi	r2,32
   82968:	18800005 	stb	r2,0(r3)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
   8296c:	e0bffc17 	ldw	r2,-16(fp)
   82970:	10800044 	addi	r2,r2,1
   82974:	e0bffc15 	stw	r2,-16(fp)
   82978:	e0bffc17 	ldw	r2,-16(fp)
   8297c:	10800210 	cmplti	r2,r2,8
   82980:	103fd21e 	bne	r2,zero,828cc <convert_filename_to_name_extension+0x24>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
   82984:	e0bffb17 	ldw	r2,-20(fp)
   82988:	1007883a 	mov	r3,r2
   8298c:	e0bffd17 	ldw	r2,-12(fp)
   82990:	1885883a 	add	r2,r3,r2
   82994:	10800003 	ldbu	r2,0(r2)
   82998:	10803fcc 	andi	r2,r2,255
   8299c:	1080201c 	xori	r2,r2,128
   829a0:	10bfe004 	addi	r2,r2,-128
   829a4:	10800b98 	cmpnei	r2,r2,46
   829a8:	1000031e 	bne	r2,zero,829b8 <convert_filename_to_name_extension+0x110>
   829ac:	e0bffb17 	ldw	r2,-20(fp)
   829b0:	10800044 	addi	r2,r2,1
   829b4:	e0bffb15 	stw	r2,-20(fp)
    for(counter = 0; counter < 3; counter++)
   829b8:	e03ffc15 	stw	zero,-16(fp)
   829bc:	00002106 	br	82a44 <convert_filename_to_name_extension+0x19c>
    {
        if (filename[local] != 0)
   829c0:	e0bffb17 	ldw	r2,-20(fp)
   829c4:	1007883a 	mov	r3,r2
   829c8:	e0bffd17 	ldw	r2,-12(fp)
   829cc:	1885883a 	add	r2,r3,r2
   829d0:	10800003 	ldbu	r2,0(r2)
   829d4:	10803fcc 	andi	r2,r2,255
   829d8:	1080201c 	xori	r2,r2,128
   829dc:	10bfe004 	addi	r2,r2,-128
   829e0:	1005003a 	cmpeq	r2,r2,zero
   829e4:	10000e1e 	bne	r2,zero,82a20 <convert_filename_to_name_extension+0x178>
        {
            extension[counter] = filename[local];
   829e8:	e0bffc17 	ldw	r2,-16(fp)
   829ec:	1007883a 	mov	r3,r2
   829f0:	e0bfff17 	ldw	r2,-4(fp)
   829f4:	1889883a 	add	r4,r3,r2
   829f8:	e0bffb17 	ldw	r2,-20(fp)
   829fc:	1007883a 	mov	r3,r2
   82a00:	e0bffd17 	ldw	r2,-12(fp)
   82a04:	1885883a 	add	r2,r3,r2
   82a08:	10800003 	ldbu	r2,0(r2)
   82a0c:	20800005 	stb	r2,0(r4)
            local++;
   82a10:	e0bffb17 	ldw	r2,-20(fp)
   82a14:	10800044 	addi	r2,r2,1
   82a18:	e0bffb15 	stw	r2,-20(fp)
   82a1c:	00000606 	br	82a38 <convert_filename_to_name_extension+0x190>
        }
        else
        {
            extension[counter] = ' ';
   82a20:	e0bffc17 	ldw	r2,-16(fp)
   82a24:	1007883a 	mov	r3,r2
   82a28:	e0bfff17 	ldw	r2,-4(fp)
   82a2c:	1887883a 	add	r3,r3,r2
   82a30:	00800804 	movi	r2,32
   82a34:	18800005 	stb	r2,0(r3)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
   82a38:	e0bffc17 	ldw	r2,-16(fp)
   82a3c:	10800044 	addi	r2,r2,1
   82a40:	e0bffc15 	stw	r2,-16(fp)
   82a44:	e0bffc17 	ldw	r2,-16(fp)
   82a48:	108000d0 	cmplti	r2,r2,3
   82a4c:	103fdc1e 	bne	r2,zero,829c0 <convert_filename_to_name_extension+0x118>
        {
            extension[counter] = ' ';
        }
    }

}
   82a50:	e037883a 	mov	sp,fp
   82a54:	df000017 	ldw	fp,0(sp)
   82a58:	dec00104 	addi	sp,sp,4
   82a5c:	f800283a 	ret

00082a60 <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
   82a60:	defff204 	addi	sp,sp,-56
   82a64:	dfc00d15 	stw	ra,52(sp)
   82a68:	df000c15 	stw	fp,48(sp)
   82a6c:	dc000b15 	stw	r16,44(sp)
   82a70:	df000b04 	addi	fp,sp,44
   82a74:	e13ffb15 	stw	r4,-20(fp)
   82a78:	e17ffc15 	stw	r5,-16(fp)
   82a7c:	e1bffd15 	stw	r6,-12(fp)
    unsigned int cluster_number;
    bool result = false;
   82a80:	e03ff915 	stw	zero,-28(fp)
    
    if (find_first_empty_cluster(&cluster_number))
   82a84:	e13ffa04 	addi	r4,fp,-24
   82a88:	00823bc0 	call	823bc <find_first_empty_cluster>
   82a8c:	1005003a 	cmpeq	r2,r2,zero
   82a90:	1000a71e 	bne	r2,zero,82d30 <create_file+0x2d0>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
   82a94:	e0bffd17 	ldw	r2,-12(fp)
   82a98:	10800a17 	ldw	r2,40(r2)
   82a9c:	1004c03a 	cmpne	r2,r2,zero
   82aa0:	1000031e 	bne	r2,zero,82ab0 <create_file+0x50>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
   82aa4:	008278c0 	call	8278c <find_first_empty_record_in_root_directory>
   82aa8:	e0bff815 	stw	r2,-32(fp)
   82aac:	00000506 	br	82ac4 <create_file+0x64>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
   82ab0:	e0bffd17 	ldw	r2,-12(fp)
   82ab4:	1080058b 	ldhu	r2,22(r2)
   82ab8:	113fffcc 	andi	r4,r2,65535
   82abc:	00825500 	call	82550 <find_first_empty_record_in_a_subdirectory>
   82ac0:	e0bff815 	stw	r2,-32(fp)
        }
        if (record_index >= 0)
   82ac4:	e0bff817 	ldw	r2,-32(fp)
   82ac8:	1004803a 	cmplt	r2,r2,zero
   82acc:	1000981e 	bne	r2,zero,82d30 <create_file+0x2d0>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
   82ad0:	e13ffb17 	ldw	r4,-20(fp)
   82ad4:	00816980 	call	81698 <get_dir_divider_location>
   82ad8:	e0bff615 	stw	r2,-40(fp)
            int last_dir_separator = 0;
   82adc:	e03ff515 	stw	zero,-44(fp)

            // Skip through all directory separators.
            while (location > 0)
   82ae0:	00000b06 	br	82b10 <create_file+0xb0>
            {
                last_dir_separator = last_dir_separator+location+1;
   82ae4:	e0fff517 	ldw	r3,-44(fp)
   82ae8:	e0bff617 	ldw	r2,-40(fp)
   82aec:	1885883a 	add	r2,r3,r2
   82af0:	10800044 	addi	r2,r2,1
   82af4:	e0bff515 	stw	r2,-44(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
   82af8:	e0bff517 	ldw	r2,-44(fp)
   82afc:	1007883a 	mov	r3,r2
   82b00:	e0bffb17 	ldw	r2,-20(fp)
   82b04:	1889883a 	add	r4,r3,r2
   82b08:	00816980 	call	81698 <get_dir_divider_location>
   82b0c:	e0bff615 	stw	r2,-40(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
   82b10:	e0bff617 	ldw	r2,-40(fp)
   82b14:	10800048 	cmpgei	r2,r2,1
   82b18:	103ff21e 	bne	r2,zero,82ae4 <create_file+0x84>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), file_record->name, file_record->extension);
   82b1c:	e0bff517 	ldw	r2,-44(fp)
   82b20:	1007883a 	mov	r3,r2
   82b24:	e0bffb17 	ldw	r2,-20(fp)
   82b28:	1889883a 	add	r4,r3,r2
   82b2c:	e0bffc17 	ldw	r2,-16(fp)
   82b30:	100b883a 	mov	r5,r2
   82b34:	e0bffc17 	ldw	r2,-16(fp)
   82b38:	10800204 	addi	r2,r2,8
   82b3c:	100d883a 	mov	r6,r2
   82b40:	00828a80 	call	828a8 <convert_filename_to_name_extension>
                         
            file_record->attributes = 0x20;
   82b44:	e0fffc17 	ldw	r3,-16(fp)
   82b48:	00800804 	movi	r2,32
   82b4c:	188002c5 	stb	r2,11(r3)
            file_record->create_time = 0;
   82b50:	e0bffc17 	ldw	r2,-16(fp)
   82b54:	1000030d 	sth	zero,12(r2)
            file_record->create_date = (30 << 9) + (1 << 5) + 1;
   82b58:	e0fffc17 	ldw	r3,-16(fp)
   82b5c:	008f0844 	movi	r2,15393
   82b60:	1880038d 	sth	r2,14(r3)
            file_record->last_access_date = (30 << 9) + (1 << 5) + 1;
   82b64:	e0fffc17 	ldw	r3,-16(fp)
   82b68:	008f0844 	movi	r2,15393
   82b6c:	1880040d 	sth	r2,16(r3)
            file_record->last_modified_time = 0;
   82b70:	e0bffc17 	ldw	r2,-16(fp)
   82b74:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = (30 << 9) + (1 << 5) + 1;
   82b78:	e0fffc17 	ldw	r3,-16(fp)
   82b7c:	008f0844 	movi	r2,15393
   82b80:	1880050d 	sth	r2,20(r3)
            file_record->start_cluster_index = cluster_number;
   82b84:	e0bffa17 	ldw	r2,-24(fp)
   82b88:	1007883a 	mov	r3,r2
   82b8c:	e0bffc17 	ldw	r2,-16(fp)
   82b90:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
   82b94:	e0bffc17 	ldw	r2,-16(fp)
   82b98:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
   82b9c:	e0fffa17 	ldw	r3,-24(fp)
   82ba0:	e0bffc17 	ldw	r2,-16(fp)
   82ba4:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
   82ba8:	e0bffc17 	ldw	r2,-16(fp)
   82bac:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
   82bb0:	e0bffc17 	ldw	r2,-16(fp)
   82bb4:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
   82bb8:	e0bff817 	ldw	r2,-32(fp)
   82bbc:	10ffffcc 	andi	r3,r2,65535
   82bc0:	e0bffc17 	ldw	r2,-16(fp)
   82bc4:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
   82bc8:	e0bff817 	ldw	r2,-32(fp)
   82bcc:	1005d43a 	srai	r2,r2,16
   82bd0:	10bfffcc 	andi	r2,r2,65535
   82bd4:	e0bfff15 	stw	r2,-4(fp)
   82bd8:	e0ffff17 	ldw	r3,-4(fp)
   82bdc:	1804403a 	cmpge	r2,r3,zero
   82be0:	1000031e 	bne	r2,zero,82bf0 <create_file+0x190>
   82be4:	e0bfff17 	ldw	r2,-4(fp)
   82be8:	108003c4 	addi	r2,r2,15
   82bec:	e0bfff15 	stw	r2,-4(fp)
   82bf0:	e0ffff17 	ldw	r3,-4(fp)
   82bf4:	1805d13a 	srai	r2,r3,4
   82bf8:	1007883a 	mov	r3,r2
   82bfc:	e0bffc17 	ldw	r2,-16(fp)
   82c00:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
   82c04:	e0bff817 	ldw	r2,-32(fp)
   82c08:	1005d43a 	srai	r2,r2,16
   82c0c:	108003cc 	andi	r2,r2,15
   82c10:	1004917a 	slli	r2,r2,5
   82c14:	1007883a 	mov	r3,r2
   82c18:	e0bffc17 	ldw	r2,-16(fp)
   82c1c:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
   82c20:	e0bffd17 	ldw	r2,-12(fp)
   82c24:	1080058b 	ldhu	r2,22(r2)
   82c28:	10ffffcc 	andi	r3,r2,65535
   82c2c:	e0bffc17 	ldw	r2,-16(fp)
   82c30:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
   82c34:	e0fffc17 	ldw	r3,-16(fp)
   82c38:	00800044 	movi	r2,1
   82c3c:	18800f15 	stw	r2,60(r3)
            file_record->modified = true;
   82c40:	e0fffc17 	ldw	r3,-16(fp)
   82c44:	00800044 	movi	r2,1
   82c48:	18800e15 	stw	r2,56(r3)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
   82c4c:	e0bffc17 	ldw	r2,-16(fp)
   82c50:	10800a17 	ldw	r2,40(r2)
   82c54:	1004c03a 	cmpne	r2,r2,zero
   82c58:	1000081e 	bne	r2,zero,82c7c <create_file+0x21c>
   82c5c:	008002b4 	movhi	r2,10
   82c60:	108e6a04 	addi	r2,r2,14760
   82c64:	10c01317 	ldw	r3,76(r2)
   82c68:	e0bffc17 	ldw	r2,-16(fp)
   82c6c:	10800b17 	ldw	r2,44(r2)
   82c70:	1887883a 	add	r3,r3,r2
   82c74:	e0fffe15 	stw	r3,-8(fp)
   82c78:	00001006 	br	82cbc <create_file+0x25c>
   82c7c:	008002b4 	movhi	r2,10
   82c80:	108e6a04 	addi	r2,r2,14760
   82c84:	14001417 	ldw	r16,80(r2)
   82c88:	e0bffc17 	ldw	r2,-16(fp)
   82c8c:	10800a17 	ldw	r2,40(r2)
   82c90:	113fff84 	addi	r4,r2,-2
   82c94:	008002b4 	movhi	r2,10
   82c98:	108e6a04 	addi	r2,r2,14760
   82c9c:	10800383 	ldbu	r2,14(r2)
   82ca0:	11403fcc 	andi	r5,r2,255
   82ca4:	00877e40 	call	877e4 <__mulsi3>
   82ca8:	8087883a 	add	r3,r16,r2
   82cac:	e0bffc17 	ldw	r2,-16(fp)
   82cb0:	10800b17 	ldw	r2,44(r2)
   82cb4:	1887883a 	add	r3,r3,r2
   82cb8:	e0fffe15 	stw	r3,-8(fp)
   82cbc:	e0bffe17 	ldw	r2,-8(fp)
   82cc0:	e0bff715 	stw	r2,-36(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
   82cc4:	e13ff717 	ldw	r4,-36(fp)
   82cc8:	d1670717 	ldw	r5,-25572(gp)
   82ccc:	008053c0 	call	8053c <Read_Sector_Data>
   82cd0:	1005003a 	cmpeq	r2,r2,zero
   82cd4:	1000161e 	bne	r2,zero,82d30 <create_file+0x2d0>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
   82cd8:	e0bffc17 	ldw	r2,-16(fp)
   82cdc:	10800c0b 	ldhu	r2,48(r2)
   82ce0:	113fffcc 	andi	r4,r2,65535
   82ce4:	2120001c 	xori	r4,r4,32768
   82ce8:	21200004 	addi	r4,r4,-32768
   82cec:	e17ffc17 	ldw	r5,-16(fp)
   82cf0:	0080ac80 	call	80ac8 <Write_File_Record_At_Offset>
   82cf4:	1005003a 	cmpeq	r2,r2,zero
   82cf8:	10000d1e 	bne	r2,zero,82d30 <create_file+0x2d0>
                {
                    Save_Modified_Sector();
   82cfc:	00804ec0 	call	804ec <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
   82d00:	e13ffa17 	ldw	r4,-24(fp)
   82d04:	017fffc4 	movi	r5,-1
   82d08:	01800044 	movi	r6,1
   82d0c:	00806d00 	call	806d0 <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
   82d10:	e13ffa17 	ldw	r4,-24(fp)
   82d14:	017fffc4 	movi	r5,-1
   82d18:	000d883a 	mov	r6,zero
   82d1c:	00806d00 	call	806d0 <mark_cluster>
   82d20:	1005003a 	cmpeq	r2,r2,zero
   82d24:	1000021e 	bne	r2,zero,82d30 <create_file+0x2d0>
                    {
                        result = true;
   82d28:	00800044 	movi	r2,1
   82d2c:	e0bff915 	stw	r2,-28(fp)
                }
            }
        }

    }
    return result;           
   82d30:	e0bff917 	ldw	r2,-28(fp)
}
   82d34:	e037883a 	mov	sp,fp
   82d38:	dfc00217 	ldw	ra,8(sp)
   82d3c:	df000117 	ldw	fp,4(sp)
   82d40:	dc000017 	ldw	r16,0(sp)
   82d44:	dec00304 	addi	sp,sp,12
   82d48:	f800283a 	ret

00082d4c <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
   82d4c:	defffb04 	addi	sp,sp,-20
   82d50:	df000415 	stw	fp,16(sp)
   82d54:	df000404 	addi	fp,sp,16
   82d58:	e13ffe15 	stw	r4,-8(fp)
   82d5c:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
   82d60:	e03ffc15 	stw	zero,-16(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
   82d64:	e03ffd15 	stw	zero,-12(fp)
   82d68:	00001606 	br	82dc4 <copy_file_record_name_to_string+0x78>
	{
		if (file_record->name[index] != ' ')
   82d6c:	e0fffd17 	ldw	r3,-12(fp)
   82d70:	e0bffe17 	ldw	r2,-8(fp)
   82d74:	10c5883a 	add	r2,r2,r3
   82d78:	10800003 	ldbu	r2,0(r2)
   82d7c:	10803fcc 	andi	r2,r2,255
   82d80:	10800820 	cmpeqi	r2,r2,32
   82d84:	10000c1e 	bne	r2,zero,82db8 <copy_file_record_name_to_string+0x6c>
		{
			file_name[flength] = file_record->name[index];
   82d88:	e0bffc17 	ldw	r2,-16(fp)
   82d8c:	1007883a 	mov	r3,r2
   82d90:	e0bfff17 	ldw	r2,-4(fp)
   82d94:	1889883a 	add	r4,r3,r2
   82d98:	e0fffd17 	ldw	r3,-12(fp)
   82d9c:	e0bffe17 	ldw	r2,-8(fp)
   82da0:	10c5883a 	add	r2,r2,r3
   82da4:	10800003 	ldbu	r2,0(r2)
   82da8:	20800005 	stb	r2,0(r4)
			flength = flength + 1;
   82dac:	e0bffc17 	ldw	r2,-16(fp)
   82db0:	10800044 	addi	r2,r2,1
   82db4:	e0bffc15 	stw	r2,-16(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
   82db8:	e0bffd17 	ldw	r2,-12(fp)
   82dbc:	10800044 	addi	r2,r2,1
   82dc0:	e0bffd15 	stw	r2,-12(fp)
   82dc4:	e0bffd17 	ldw	r2,-12(fp)
   82dc8:	10800210 	cmplti	r2,r2,8
   82dcc:	103fe71e 	bne	r2,zero,82d6c <copy_file_record_name_to_string+0x20>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
   82dd0:	e0bffe17 	ldw	r2,-8(fp)
   82dd4:	10800203 	ldbu	r2,8(r2)
   82dd8:	10803fcc 	andi	r2,r2,255
   82ddc:	10800820 	cmpeqi	r2,r2,32
   82de0:	1000261e 	bne	r2,zero,82e7c <copy_file_record_name_to_string+0x130>
	{
		file_name[flength] = '.';
   82de4:	e0bffc17 	ldw	r2,-16(fp)
   82de8:	1007883a 	mov	r3,r2
   82dec:	e0bfff17 	ldw	r2,-4(fp)
   82df0:	1887883a 	add	r3,r3,r2
   82df4:	00800b84 	movi	r2,46
   82df8:	18800005 	stb	r2,0(r3)
		flength = flength + 1;
   82dfc:	e0bffc17 	ldw	r2,-16(fp)
   82e00:	10800044 	addi	r2,r2,1
   82e04:	e0bffc15 	stw	r2,-16(fp)
		for (index = 0; index < 3; index++)
   82e08:	e03ffd15 	stw	zero,-12(fp)
   82e0c:	00001806 	br	82e70 <copy_file_record_name_to_string+0x124>
		{
			if (file_record->extension[index] != ' ')
   82e10:	e0fffd17 	ldw	r3,-12(fp)
   82e14:	e0bffe17 	ldw	r2,-8(fp)
   82e18:	1885883a 	add	r2,r3,r2
   82e1c:	10800204 	addi	r2,r2,8
   82e20:	10800003 	ldbu	r2,0(r2)
   82e24:	10803fcc 	andi	r2,r2,255
   82e28:	10800820 	cmpeqi	r2,r2,32
   82e2c:	10000d1e 	bne	r2,zero,82e64 <copy_file_record_name_to_string+0x118>
			{
				file_name[flength] = file_record->extension[index];
   82e30:	e0bffc17 	ldw	r2,-16(fp)
   82e34:	1007883a 	mov	r3,r2
   82e38:	e0bfff17 	ldw	r2,-4(fp)
   82e3c:	1889883a 	add	r4,r3,r2
   82e40:	e0fffd17 	ldw	r3,-12(fp)
   82e44:	e0bffe17 	ldw	r2,-8(fp)
   82e48:	1885883a 	add	r2,r3,r2
   82e4c:	10800204 	addi	r2,r2,8
   82e50:	10800003 	ldbu	r2,0(r2)
   82e54:	20800005 	stb	r2,0(r4)
				flength = flength + 1;
   82e58:	e0bffc17 	ldw	r2,-16(fp)
   82e5c:	10800044 	addi	r2,r2,1
   82e60:	e0bffc15 	stw	r2,-16(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
   82e64:	e0bffd17 	ldw	r2,-12(fp)
   82e68:	10800044 	addi	r2,r2,1
   82e6c:	e0bffd15 	stw	r2,-12(fp)
   82e70:	e0bffd17 	ldw	r2,-12(fp)
   82e74:	108000d0 	cmplti	r2,r2,3
   82e78:	103fe51e 	bne	r2,zero,82e10 <copy_file_record_name_to_string+0xc4>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
   82e7c:	e0bffc17 	ldw	r2,-16(fp)
   82e80:	1007883a 	mov	r3,r2
   82e84:	e0bfff17 	ldw	r2,-4(fp)
   82e88:	1885883a 	add	r2,r3,r2
   82e8c:	10000005 	stb	zero,0(r2)
}
   82e90:	e037883a 	mov	sp,fp
   82e94:	df000017 	ldw	fp,0(sp)
   82e98:	dec00104 	addi	sp,sp,4
   82e9c:	f800283a 	ret

00082ea0 <sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


void sd_card_open_dev()
{
   82ea0:	deffff04 	addi	sp,sp,-4
   82ea4:	df000015 	stw	fp,0(sp)
   82ea8:	d839883a 	mov	fp,sp
	// for details)
	// alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);

	// if (dev != NULL)
	// {
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(SD_CARD_0_BASE));
   82eac:	00808d04 	movi	r2,564
   82eb0:	d0a70215 	stw	r2,-25592(gp)
		status_register = ((int *) SD_CARD_STATUS(SD_CARD_0_BASE));
   82eb4:	00808904 	movi	r2,548
   82eb8:	d0a70315 	stw	r2,-25588(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(SD_CARD_0_BASE, 0));
   82ebc:	00808404 	movi	r2,528
   82ec0:	d0a70415 	stw	r2,-25584(gp)
		command_register = ((short int *) SD_CARD_COMMAND(SD_CARD_0_BASE));
   82ec4:	00808c04 	movi	r2,560
   82ec8:	d0a70515 	stw	r2,-25580(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(SD_CARD_0_BASE));
   82ecc:	00808b04 	movi	r2,556
   82ed0:	d0a70615 	stw	r2,-25576(gp)
		// device_pointer = dev;
		initialized = false;
   82ed4:	d0270015 	stw	zero,-25600(gp)
		is_sd_card_formated_as_FAT16 = false;
   82ed8:	d0270115 	stw	zero,-25596(gp)
		search_data.valid = false;
   82edc:	008002b4 	movhi	r2,10
   82ee0:	108e6504 	addi	r2,r2,14740
   82ee4:	10000415 	stw	zero,16(r2)
	// }
	// return dev;
}
   82ee8:	e037883a 	mov	sp,fp
   82eec:	df000017 	ldw	fp,0(sp)
   82ef0:	dec00104 	addi	sp,sp,4
   82ef4:	f800283a 	ret

00082ef8 <sd_card_is_Present>:


bool sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
   82ef8:	defffe04 	addi	sp,sp,-8
   82efc:	df000115 	stw	fp,4(sp)
   82f00:	df000104 	addi	fp,sp,4
    bool result = false;
   82f04:	e03fff15 	stw	zero,-4(fp)

    if ((*aux_status_register & 0x02) != 0)
   82f08:	d0a70217 	ldw	r2,-25592(gp)
   82f0c:	1080000b 	ldhu	r2,0(r2)
   82f10:	10bfffcc 	andi	r2,r2,65535
   82f14:	1080008c 	andi	r2,r2,2
   82f18:	1005003a 	cmpeq	r2,r2,zero
   82f1c:	1000031e 	bne	r2,zero,82f2c <sd_card_is_Present+0x34>
    {
        result = true;
   82f20:	00800044 	movi	r2,1
   82f24:	e0bfff15 	stw	r2,-4(fp)
   82f28:	00000106 	br	82f30 <sd_card_is_Present+0x38>
    } else {
		initialized = false;
   82f2c:	d0270015 	stw	zero,-25600(gp)
	}
    return result;
   82f30:	e0bfff17 	ldw	r2,-4(fp)
}
   82f34:	e037883a 	mov	sp,fp
   82f38:	df000017 	ldw	fp,0(sp)
   82f3c:	dec00104 	addi	sp,sp,4
   82f40:	f800283a 	ret

00082f44 <sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
   82f44:	defffd04 	addi	sp,sp,-12
   82f48:	dfc00215 	stw	ra,8(sp)
   82f4c:	df000115 	stw	fp,4(sp)
   82f50:	df000104 	addi	fp,sp,4
	bool result = false;
   82f54:	e03fff15 	stw	zero,-4(fp)

	if (sd_card_is_Present())
   82f58:	0082ef80 	call	82ef8 <sd_card_is_Present>
   82f5c:	1005003a 	cmpeq	r2,r2,zero
   82f60:	1000151e 	bne	r2,zero,82fb8 <sd_card_is_FAT16+0x74>
	{
		// Check if an SD Card is in the SD Card slot.
		if ((*aux_status_register & 0x02) != 0)
   82f64:	d0a70217 	ldw	r2,-25592(gp)
   82f68:	1080000b 	ldhu	r2,0(r2)
   82f6c:	10bfffcc 	andi	r2,r2,65535
   82f70:	1080008c 	andi	r2,r2,2
   82f74:	1005003a 	cmpeq	r2,r2,zero
   82f78:	10000b1e 	bne	r2,zero,82fa8 <sd_card_is_FAT16+0x64>
		{
			if (initialized == false)
   82f7c:	d0a70017 	ldw	r2,-25600(gp)
   82f80:	1004c03a 	cmpne	r2,r2,zero
   82f84:	10000a1e 	bne	r2,zero,82fb0 <sd_card_is_FAT16+0x6c>
			{
				// Now determine if the card is formatted as FAT 16.
				is_sd_card_formated_as_FAT16 = Look_for_FAT16();
   82f88:	00812140 	call	81214 <Look_for_FAT16>
   82f8c:	d0a70115 	stw	r2,-25596(gp)
				initialized = is_sd_card_formated_as_FAT16;
   82f90:	d0a70117 	ldw	r2,-25596(gp)
   82f94:	d0a70015 	stw	r2,-25600(gp)
				search_data.valid = false;
   82f98:	008002b4 	movhi	r2,10
   82f9c:	108e6504 	addi	r2,r2,14740
   82fa0:	10000415 	stw	zero,16(r2)
   82fa4:	00000206 	br	82fb0 <sd_card_is_FAT16+0x6c>
			}
		}
		else
		{
			// If not then you may as well not open the device.
			initialized = false;
   82fa8:	d0270015 	stw	zero,-25600(gp)
			is_sd_card_formated_as_FAT16 = false;
   82fac:	d0270115 	stw	zero,-25596(gp)
		}
		result = is_sd_card_formated_as_FAT16;
   82fb0:	d0a70117 	ldw	r2,-25596(gp)
   82fb4:	e0bfff15 	stw	r2,-4(fp)
	}

	return result;
   82fb8:	e0bfff17 	ldw	r2,-4(fp)
}
   82fbc:	e037883a 	mov	sp,fp
   82fc0:	dfc00117 	ldw	ra,4(sp)
   82fc4:	df000017 	ldw	fp,0(sp)
   82fc8:	dec00204 	addi	sp,sp,8
   82fcc:	f800283a 	ret

00082fd0 <sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
   82fd0:	deffea04 	addi	sp,sp,-88
   82fd4:	dfc01515 	stw	ra,84(sp)
   82fd8:	df001415 	stw	fp,80(sp)
   82fdc:	df001404 	addi	fp,sp,80
   82fe0:	e13ffe15 	stw	r4,-8(fp)
   82fe4:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
   82fe8:	00800084 	movi	r2,2
   82fec:	e0bfec0d 	sth	r2,-80(fp)
	if ((sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   82ff0:	0082ef80 	call	82ef8 <sd_card_is_Present>
   82ff4:	1005003a 	cmpeq	r2,r2,zero
   82ff8:	1000241e 	bne	r2,zero,8308c <sd_card_find_first+0xbc>
   82ffc:	d0a70117 	ldw	r2,-25596(gp)
   83000:	1005003a 	cmpeq	r2,r2,zero
   83004:	1000211e 	bne	r2,zero,8308c <sd_card_find_first+0xbc>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
   83008:	e17fed04 	addi	r5,fp,-76
   8300c:	e1bfee04 	addi	r6,fp,-72
   83010:	e13ffe17 	ldw	r4,-8(fp)
   83014:	0081a440 	call	81a44 <get_home_directory_cluster_for_file>
   83018:	1005003a 	cmpeq	r2,r2,zero
   8301c:	1000191e 	bne	r2,zero,83084 <sd_card_find_first+0xb4>
		{
			search_data.directory_root_cluster = home_directory_cluster;
   83020:	e0bfed17 	ldw	r2,-76(fp)
   83024:	1007883a 	mov	r3,r2
   83028:	008002b4 	movhi	r2,10
   8302c:	108e6504 	addi	r2,r2,14740
   83030:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
   83034:	e0bfed17 	ldw	r2,-76(fp)
   83038:	1007883a 	mov	r3,r2
   8303c:	008002b4 	movhi	r2,10
   83040:	108e6504 	addi	r2,r2,14740
   83044:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
   83048:	008002b4 	movhi	r2,10
   8304c:	108e6504 	addi	r2,r2,14740
   83050:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
   83054:	00c002b4 	movhi	r3,10
   83058:	18ce6504 	addi	r3,r3,14740
   8305c:	00bfffc4 	movi	r2,-1
   83060:	1880030d 	sth	r2,12(r3)
			search_data.valid = true;
   83064:	00c002b4 	movhi	r3,10
   83068:	18ce6504 	addi	r3,r3,14740
   8306c:	00800044 	movi	r2,1
   83070:	18800415 	stw	r2,16(r3)
			result = sd_card_find_next(file_name);
   83074:	e13fff17 	ldw	r4,-4(fp)
   83078:	00830a40 	call	830a4 <sd_card_find_next>
   8307c:	e0bfec0d 	sth	r2,-80(fp)
   83080:	00000206 	br	8308c <sd_card_find_first+0xbc>
		}
		else
		{
			result = 1;
   83084:	00800044 	movi	r2,1
   83088:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
   8308c:	e0bfec0f 	ldh	r2,-80(fp)
}
   83090:	e037883a 	mov	sp,fp
   83094:	dfc00117 	ldw	ra,4(sp)
   83098:	df000017 	ldw	fp,0(sp)
   8309c:	dec00204 	addi	sp,sp,8
   830a0:	f800283a 	ret

000830a4 <sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
   830a4:	deffe404 	addi	sp,sp,-112
   830a8:	dfc01b15 	stw	ra,108(sp)
   830ac:	df001a15 	stw	fp,104(sp)
   830b0:	df001a04 	addi	fp,sp,104
   830b4:	e13ffe15 	stw	r4,-8(fp)
	short int result = 2;
   830b8:	00800084 	movi	r2,2
   830bc:	e0bfed0d 	sth	r2,-76(fp)
	if ((sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   830c0:	0082ef80 	call	82ef8 <sd_card_is_Present>
   830c4:	1005003a 	cmpeq	r2,r2,zero
   830c8:	1000d81e 	bne	r2,zero,8342c <sd_card_find_next+0x388>
   830cc:	d0a70117 	ldw	r2,-25596(gp)
   830d0:	1005003a 	cmpeq	r2,r2,zero
   830d4:	1000d51e 	bne	r2,zero,8342c <sd_card_find_next+0x388>
	{
		if (search_data.valid)
   830d8:	008002b4 	movhi	r2,10
   830dc:	108e6504 	addi	r2,r2,14740
   830e0:	10800417 	ldw	r2,16(r2)
   830e4:	1005003a 	cmpeq	r2,r2,zero
   830e8:	1000ce1e 	bne	r2,zero,83424 <sd_card_find_next+0x380>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
   830ec:	008002b4 	movhi	r2,10
   830f0:	108e6504 	addi	r2,r2,14740
   830f4:	10800117 	ldw	r2,4(r2)
   830f8:	e0bfec15 	stw	r2,-80(fp)

			if (cluster == 0)
   830fc:	e0bfec17 	ldw	r2,-80(fp)
   83100:	1004c03a 	cmpne	r2,r2,zero
   83104:	1000521e 	bne	r2,zero,83250 <sd_card_find_next+0x1ac>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   83108:	008002b4 	movhi	r2,10
   8310c:	108e6a04 	addi	r2,r2,14760
   83110:	1080050b 	ldhu	r2,20(r2)
   83114:	10bfffcc 	andi	r2,r2,65535
   83118:	1008917a 	slli	r4,r2,5
   8311c:	008002b4 	movhi	r2,10
   83120:	108e6a04 	addi	r2,r2,14760
   83124:	1080030b 	ldhu	r2,12(r2)
   83128:	117fffcc 	andi	r5,r2,65535
   8312c:	00877140 	call	87714 <__divsi3>
   83130:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index = search_data.current_sector_in_cluster;
   83134:	008002b4 	movhi	r2,10
   83138:	108e6504 	addi	r2,r2,14740
   8313c:	10800217 	ldw	r2,8(r2)
   83140:	e0bfea15 	stw	r2,-88(fp)
				int file_counter = search_data.file_index_in_sector+1;
   83144:	008002b4 	movhi	r2,10
   83148:	108e6504 	addi	r2,r2,14740
   8314c:	1080030b 	ldhu	r2,12(r2)
   83150:	10bfffcc 	andi	r2,r2,65535
   83154:	10a0001c 	xori	r2,r2,32768
   83158:	10a00004 	addi	r2,r2,-32768
   8315c:	10800044 	addi	r2,r2,1
   83160:	e0bfe915 	stw	r2,-92(fp)
    
				for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   83164:	e03fea15 	stw	zero,-88(fp)
   83168:	00003306 	br	83238 <sd_card_find_next+0x194>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   8316c:	008002b4 	movhi	r2,10
   83170:	108e6a04 	addi	r2,r2,14760
   83174:	10c01317 	ldw	r3,76(r2)
   83178:	e0bfea17 	ldw	r2,-88(fp)
   8317c:	1885883a 	add	r2,r3,r2
   83180:	1009883a 	mov	r4,r2
   83184:	d1670717 	ldw	r5,-25572(gp)
   83188:	008053c0 	call	8053c <Read_Sector_Data>
   8318c:	1005003a 	cmpeq	r2,r2,zero
   83190:	10002c1e 	bne	r2,zero,83244 <sd_card_find_next+0x1a0>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
   83194:	00002106 	br	8321c <sd_card_find_next+0x178>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
   83198:	e0bfe917 	ldw	r2,-92(fp)
   8319c:	1008917a 	slli	r4,r2,5
   831a0:	e1ffea17 	ldw	r7,-88(fp)
   831a4:	e17fee04 	addi	r5,fp,-72
   831a8:	000d883a 	mov	r6,zero
   831ac:	00809000 	call	80900 <Read_File_Record_At_Offset>
   831b0:	1005003a 	cmpeq	r2,r2,zero
   831b4:	1000161e 	bne	r2,zero,83210 <sd_card_find_next+0x16c>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
   831b8:	e0bfee03 	ldbu	r2,-72(fp)
   831bc:	10803fcc 	andi	r2,r2,255
   831c0:	1005003a 	cmpeq	r2,r2,zero
   831c4:	1000121e 	bne	r2,zero,83210 <sd_card_find_next+0x16c>
   831c8:	e0bfee03 	ldbu	r2,-72(fp)
   831cc:	10803fcc 	andi	r2,r2,255
   831d0:	10803960 	cmpeqi	r2,r2,229
   831d4:	10000e1e 	bne	r2,zero,83210 <sd_card_find_next+0x16c>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
   831d8:	e0bfe917 	ldw	r2,-92(fp)
   831dc:	1007883a 	mov	r3,r2
   831e0:	008002b4 	movhi	r2,10
   831e4:	108e6504 	addi	r2,r2,14740
   831e8:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
   831ec:	e0ffea17 	ldw	r3,-88(fp)
   831f0:	008002b4 	movhi	r2,10
   831f4:	108e6504 	addi	r2,r2,14740
   831f8:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
   831fc:	e13fee04 	addi	r4,fp,-72
   83200:	e17ffe17 	ldw	r5,-8(fp)
   83204:	0082d4c0 	call	82d4c <copy_file_record_name_to_string>
									return 0;
   83208:	e03fff15 	stw	zero,-4(fp)
   8320c:	00008906 	br	83434 <sd_card_find_next+0x390>
				for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
   83210:	e0bfe917 	ldw	r2,-92(fp)
   83214:	10800044 	addi	r2,r2,1
   83218:	e0bfe915 	stw	r2,-92(fp)
   8321c:	e0bfe917 	ldw	r2,-92(fp)
   83220:	10800410 	cmplti	r2,r2,16
   83224:	103fdc1e 	bne	r2,zero,83198 <sd_card_find_next+0xf4>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
   83228:	e03fe915 	stw	zero,-92(fp)
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   8322c:	e0bfea17 	ldw	r2,-88(fp)
   83230:	10800044 	addi	r2,r2,1
   83234:	e0bfea15 	stw	r2,-88(fp)
   83238:	e0ffea17 	ldw	r3,-88(fp)
   8323c:	e0bfeb17 	ldw	r2,-84(fp)
   83240:	18bfca16 	blt	r3,r2,8316c <sd_card_find_next+0xc8>
					else
					{
						break;
					}
				}
				result = -1;
   83244:	00bfffc4 	movi	r2,-1
   83248:	e0bfed0d 	sth	r2,-76(fp)
   8324c:	00007706 	br	8342c <sd_card_find_next+0x388>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
   83250:	008002b4 	movhi	r2,10
   83254:	108e6504 	addi	r2,r2,14740
   83258:	1080030b 	ldhu	r2,12(r2)
   8325c:	10bfffcc 	andi	r2,r2,65535
   83260:	10a0001c 	xori	r2,r2,32768
   83264:	10a00004 	addi	r2,r2,-32768
   83268:	10800044 	addi	r2,r2,1
   8326c:	e0bfe815 	stw	r2,-96(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   83270:	e0bfec17 	ldw	r2,-80(fp)
   83274:	113fff84 	addi	r4,r2,-2
   83278:	008002b4 	movhi	r2,10
   8327c:	108e6a04 	addi	r2,r2,14760
   83280:	10800383 	ldbu	r2,14(r2)
   83284:	11403fcc 	andi	r5,r2,255
   83288:	00877e40 	call	877e4 <__mulsi3>
   8328c:	1007883a 	mov	r3,r2
   83290:	008002b4 	movhi	r2,10
   83294:	108e6a04 	addi	r2,r2,14760
   83298:	10801417 	ldw	r2,80(r2)
   8329c:	1885883a 	add	r2,r3,r2
   832a0:	e0bfe715 	stw	r2,-100(fp)
					int sector_index;
			        
					for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   832a4:	e03fe615 	stw	zero,-104(fp)
   832a8:	00003406 	br	8337c <sd_card_find_next+0x2d8>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   832ac:	e0ffe617 	ldw	r3,-104(fp)
   832b0:	e0bfe717 	ldw	r2,-100(fp)
   832b4:	1889883a 	add	r4,r3,r2
   832b8:	d1670717 	ldw	r5,-25572(gp)
   832bc:	008053c0 	call	8053c <Read_Sector_Data>
   832c0:	1005003a 	cmpeq	r2,r2,zero
   832c4:	1000331e 	bne	r2,zero,83394 <sd_card_find_next+0x2f0>
						{        
							for (; file_counter < 16; file_counter++)
   832c8:	00002506 	br	83360 <sd_card_find_next+0x2bc>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
   832cc:	e0bfe817 	ldw	r2,-96(fp)
   832d0:	1008917a 	slli	r4,r2,5
   832d4:	e1bfec17 	ldw	r6,-80(fp)
   832d8:	e1ffe617 	ldw	r7,-104(fp)
   832dc:	e17fee04 	addi	r5,fp,-72
   832e0:	00809000 	call	80900 <Read_File_Record_At_Offset>
   832e4:	1005003a 	cmpeq	r2,r2,zero
   832e8:	10001a1e 	bne	r2,zero,83354 <sd_card_find_next+0x2b0>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
   832ec:	e0bfee03 	ldbu	r2,-72(fp)
   832f0:	10803fcc 	andi	r2,r2,255
   832f4:	1005003a 	cmpeq	r2,r2,zero
   832f8:	1000161e 	bne	r2,zero,83354 <sd_card_find_next+0x2b0>
   832fc:	e0bfee03 	ldbu	r2,-72(fp)
   83300:	10803fcc 	andi	r2,r2,255
   83304:	10803960 	cmpeqi	r2,r2,229
   83308:	1000121e 	bne	r2,zero,83354 <sd_card_find_next+0x2b0>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
   8330c:	e0ffec17 	ldw	r3,-80(fp)
   83310:	008002b4 	movhi	r2,10
   83314:	108e6504 	addi	r2,r2,14740
   83318:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
   8331c:	e0bfe817 	ldw	r2,-96(fp)
   83320:	1007883a 	mov	r3,r2
   83324:	008002b4 	movhi	r2,10
   83328:	108e6504 	addi	r2,r2,14740
   8332c:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
   83330:	e0ffe617 	ldw	r3,-104(fp)
   83334:	008002b4 	movhi	r2,10
   83338:	108e6504 	addi	r2,r2,14740
   8333c:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
   83340:	e13fee04 	addi	r4,fp,-72
   83344:	e17ffe17 	ldw	r5,-8(fp)
   83348:	0082d4c0 	call	82d4c <copy_file_record_name_to_string>
										return 0;
   8334c:	e03fff15 	stw	zero,-4(fp)
   83350:	00003806 	br	83434 <sd_card_find_next+0x390>
			        
					for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
   83354:	e0bfe817 	ldw	r2,-96(fp)
   83358:	10800044 	addi	r2,r2,1
   8335c:	e0bfe815 	stw	r2,-96(fp)
   83360:	e0bfe817 	ldw	r2,-96(fp)
   83364:	10800410 	cmplti	r2,r2,16
   83368:	103fd81e 	bne	r2,zero,832cc <sd_card_find_next+0x228>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
   8336c:	e03fe815 	stw	zero,-96(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index;
			        
					for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   83370:	e0bfe617 	ldw	r2,-104(fp)
   83374:	10800044 	addi	r2,r2,1
   83378:	e0bfe615 	stw	r2,-104(fp)
   8337c:	008002b4 	movhi	r2,10
   83380:	108e6a04 	addi	r2,r2,14760
   83384:	10800383 	ldbu	r2,14(r2)
   83388:	10c03fcc 	andi	r3,r2,255
   8338c:	e0bfe617 	ldw	r2,-104(fp)
   83390:	10ffc616 	blt	r2,r3,832ac <sd_card_find_next+0x208>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
   83394:	008002b4 	movhi	r2,10
   83398:	108e6a04 	addi	r2,r2,14760
   8339c:	10800383 	ldbu	r2,14(r2)
   833a0:	10c03fcc 	andi	r3,r2,255
   833a4:	e0bfe617 	ldw	r2,-104(fp)
   833a8:	10c01a16 	blt	r2,r3,83414 <sd_card_find_next+0x370>
					{
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
   833ac:	e13fec17 	ldw	r4,-80(fp)
   833b0:	e17fed84 	addi	r5,fp,-74
   833b4:	008062c0 	call	8062c <get_cluster_flag>
   833b8:	1005003a 	cmpeq	r2,r2,zero
   833bc:	1000131e 	bne	r2,zero,8340c <sd_card_find_next+0x368>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   833c0:	e0bfed8b 	ldhu	r2,-74(fp)
   833c4:	10bfffcc 	andi	r2,r2,65535
   833c8:	10a0001c 	xori	r2,r2,32768
   833cc:	10a00004 	addi	r2,r2,-32768
   833d0:	10fffe0c 	andi	r3,r2,65528
   833d4:	00bffe14 	movui	r2,65528
   833d8:	1880051e 	bne	r3,r2,833f0 <sd_card_find_next+0x34c>
							{
								result = -1;
   833dc:	00bfffc4 	movi	r2,-1
   833e0:	e0bfed0d 	sth	r2,-76(fp)
								search_data.valid = false;
   833e4:	008002b4 	movhi	r2,10
   833e8:	108e6504 	addi	r2,r2,14740
   833ec:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
   833f0:	e0bfed8b 	ldhu	r2,-74(fp)
   833f4:	10bfffcc 	andi	r2,r2,65535
   833f8:	10a0001c 	xori	r2,r2,32768
   833fc:	10a00004 	addi	r2,r2,-32768
   83400:	10bffe0c 	andi	r2,r2,65528
   83404:	e0bfec15 	stw	r2,-80(fp)
   83408:	00000206 	br	83414 <sd_card_find_next+0x370>
						}
						else
						{
							// Error encountered.                 
							result = -1;
   8340c:	00bfffc4 	movi	r2,-1
   83410:	e0bfed0d 	sth	r2,-76(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
   83414:	e0ffec17 	ldw	r3,-80(fp)
   83418:	00bffdd4 	movui	r2,65527
   8341c:	10ff940e 	bge	r2,r3,83270 <sd_card_find_next+0x1cc>
   83420:	00000206 	br	8342c <sd_card_find_next+0x388>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
   83424:	008000c4 	movi	r2,3
   83428:	e0bfed0d 	sth	r2,-76(fp)
		}
	}
	return result;
   8342c:	e0bfed0f 	ldh	r2,-76(fp)
   83430:	e0bfff15 	stw	r2,-4(fp)
   83434:	e0bfff17 	ldw	r2,-4(fp)
}
   83438:	e037883a 	mov	sp,fp
   8343c:	dfc00117 	ldw	ra,4(sp)
   83440:	df000017 	ldw	fp,0(sp)
   83444:	dec00204 	addi	sp,sp,8
   83448:	f800283a 	ret

0008344c <sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
   8344c:	deffe804 	addi	sp,sp,-96
   83450:	dfc01715 	stw	ra,92(sp)
   83454:	df001615 	stw	fp,88(sp)
   83458:	df001604 	addi	fp,sp,88
   8345c:	e13ffd15 	stw	r4,-12(fp)
   83460:	e17ffe15 	stw	r5,-8(fp)
	short int file_record_index = -1;
   83464:	00bfffc4 	movi	r2,-1
   83468:	e0bfeb0d 	sth	r2,-84(fp)

	if ((sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   8346c:	0082ef80 	call	82ef8 <sd_card_is_Present>
   83470:	1005003a 	cmpeq	r2,r2,zero
   83474:	1000d71e 	bne	r2,zero,837d4 <sd_card_fopen+0x388>
   83478:	d0a70117 	ldw	r2,-25596(gp)
   8347c:	1005003a 	cmpeq	r2,r2,zero
   83480:	1000d41e 	bne	r2,zero,837d4 <sd_card_fopen+0x388>
	{
        unsigned int home_directory_cluster = 0;
   83484:	e03fec15 	stw	zero,-80(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
   83488:	e13ffd17 	ldw	r4,-12(fp)
   8348c:	00813380 	call	81338 <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
   83490:	e13ffd17 	ldw	r4,-12(fp)
   83494:	00814080 	call	81408 <check_file_name_for_FAT16_compliance>
   83498:	1005003a 	cmpeq	r2,r2,zero
   8349c:	1000cd1e 	bne	r2,zero,837d4 <sd_card_fopen+0x388>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, &home_directory_cluster, &home_dir))
   834a0:	e17fec04 	addi	r5,fp,-80
   834a4:	e1bfed04 	addi	r6,fp,-76
   834a8:	e13ffd17 	ldw	r4,-12(fp)
   834ac:	0081a440 	call	81a44 <get_home_directory_cluster_for_file>
   834b0:	1004c03a 	cmpne	r2,r2,zero
   834b4:	1000031e 	bne	r2,zero,834c4 <sd_card_fopen+0x78>
            {
                return file_record_index;
   834b8:	e0bfeb0f 	ldh	r2,-84(fp)
   834bc:	e0bfff15 	stw	r2,-4(fp)
   834c0:	0000c606 	br	837dc <sd_card_fopen+0x390>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
   834c4:	e03fea15 	stw	zero,-88(fp)
   834c8:	00000f06 	br	83508 <sd_card_fopen+0xbc>
    		{
    			if (active_files[index].in_use == false)
   834cc:	e0bfea17 	ldw	r2,-88(fp)
   834d0:	00c002b4 	movhi	r3,10
   834d4:	18ce7f04 	addi	r3,r3,14844
   834d8:	100491ba 	slli	r2,r2,6
   834dc:	10c5883a 	add	r2,r2,r3
   834e0:	10800f04 	addi	r2,r2,60
   834e4:	10800017 	ldw	r2,0(r2)
   834e8:	1004c03a 	cmpne	r2,r2,zero
   834ec:	1000031e 	bne	r2,zero,834fc <sd_card_fopen+0xb0>
    			{
    				file_record_index = index;
   834f0:	e0bfea17 	ldw	r2,-88(fp)
   834f4:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
   834f8:	00000606 	br	83514 <sd_card_fopen+0xc8>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
   834fc:	e0bfea17 	ldw	r2,-88(fp)
   83500:	10800044 	addi	r2,r2,1
   83504:	e0bfea15 	stw	r2,-88(fp)
   83508:	e0bfea17 	ldw	r2,-88(fp)
   8350c:	10800510 	cmplti	r2,r2,20
   83510:	103fee1e 	bne	r2,zero,834cc <sd_card_fopen+0x80>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
   83514:	e0bfeb0f 	ldh	r2,-84(fp)
   83518:	1004803a 	cmplt	r2,r2,zero
   8351c:	1000ad1e 	bne	r2,zero,837d4 <sd_card_fopen+0x388>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
   83520:	e0bfec17 	ldw	r2,-80(fp)
   83524:	1009883a 	mov	r4,r2
   83528:	e0bfeb0f 	ldh	r2,-84(fp)
   8352c:	100491ba 	slli	r2,r2,6
   83530:	1007883a 	mov	r3,r2
   83534:	008002b4 	movhi	r2,10
   83538:	108e7f04 	addi	r2,r2,14844
   8353c:	188d883a 	add	r6,r3,r2
   83540:	e17ffd17 	ldw	r5,-12(fp)
   83544:	0081f580 	call	81f58 <find_file_in_directory>
   83548:	1005003a 	cmpeq	r2,r2,zero
   8354c:	10007d1e 	bne	r2,zero,83744 <sd_card_fopen+0x2f8>
                {
                    if (create)
   83550:	e0bffe17 	ldw	r2,-8(fp)
   83554:	1005003a 	cmpeq	r2,r2,zero
   83558:	1000031e 	bne	r2,zero,83568 <sd_card_fopen+0x11c>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
   8355c:	00bfffc4 	movi	r2,-1
   83560:	e0bfff15 	stw	r2,-4(fp)
   83564:	00009d06 	br	837dc <sd_card_fopen+0x390>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
   83568:	e17feb0f 	ldh	r5,-84(fp)
   8356c:	e0bfeb0f 	ldh	r2,-84(fp)
   83570:	00c002b4 	movhi	r3,10
   83574:	18ce7f04 	addi	r3,r3,14844
   83578:	100491ba 	slli	r2,r2,6
   8357c:	10c5883a 	add	r2,r2,r3
   83580:	10800504 	addi	r2,r2,20
   83584:	1080008b 	ldhu	r2,2(r2)
   83588:	113fffcc 	andi	r4,r2,65535
   8358c:	00c002b4 	movhi	r3,10
   83590:	18ce7f04 	addi	r3,r3,14844
   83594:	280491ba 	slli	r2,r5,6
   83598:	10c5883a 	add	r2,r2,r3
   8359c:	10800704 	addi	r2,r2,28
   835a0:	11000015 	stw	r4,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
   835a4:	e0bfeb0f 	ldh	r2,-84(fp)
   835a8:	00c002b4 	movhi	r3,10
   835ac:	18ce7f04 	addi	r3,r3,14844
   835b0:	100491ba 	slli	r2,r2,6
   835b4:	10c5883a 	add	r2,r2,r3
   835b8:	10800804 	addi	r2,r2,32
   835bc:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
   835c0:	e0bfeb0f 	ldh	r2,-84(fp)
   835c4:	00c002b4 	movhi	r3,10
   835c8:	18ce7f04 	addi	r3,r3,14844
   835cc:	100491ba 	slli	r2,r2,6
   835d0:	10c5883a 	add	r2,r2,r3
   835d4:	10800904 	addi	r2,r2,36
   835d8:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
   835dc:	e0bfeb0f 	ldh	r2,-84(fp)
   835e0:	00c002b4 	movhi	r3,10
   835e4:	18ce7f04 	addi	r3,r3,14844
   835e8:	100491ba 	slli	r2,r2,6
   835ec:	10c5883a 	add	r2,r2,r3
   835f0:	10c00f04 	addi	r3,r2,60
   835f4:	00800044 	movi	r2,1
   835f8:	18800015 	stw	r2,0(r3)
    				active_files[file_record_index].modified = false;
   835fc:	e0bfeb0f 	ldh	r2,-84(fp)
   83600:	00c002b4 	movhi	r3,10
   83604:	18ce7f04 	addi	r3,r3,14844
   83608:	100491ba 	slli	r2,r2,6
   8360c:	10c5883a 	add	r2,r2,r3
   83610:	10800e04 	addi	r2,r2,56
   83614:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
   83618:	e03fea15 	stw	zero,-88(fp)
   8361c:	00004506 	br	83734 <sd_card_fopen+0x2e8>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
   83620:	e0ffeb0f 	ldh	r3,-84(fp)
   83624:	e0bfea17 	ldw	r2,-88(fp)
   83628:	18803f26 	beq	r3,r2,83728 <sd_card_fopen+0x2dc>
   8362c:	e0bfea17 	ldw	r2,-88(fp)
   83630:	00c002b4 	movhi	r3,10
   83634:	18ce7f04 	addi	r3,r3,14844
   83638:	100491ba 	slli	r2,r2,6
   8363c:	10c5883a 	add	r2,r2,r3
   83640:	10800f04 	addi	r2,r2,60
   83644:	10800017 	ldw	r2,0(r2)
   83648:	10800058 	cmpnei	r2,r2,1
   8364c:	1000361e 	bne	r2,zero,83728 <sd_card_fopen+0x2dc>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
   83650:	e0bfeb0f 	ldh	r2,-84(fp)
   83654:	00c002b4 	movhi	r3,10
   83658:	18ce7f04 	addi	r3,r3,14844
   8365c:	100491ba 	slli	r2,r2,6
   83660:	10c5883a 	add	r2,r2,r3
   83664:	10800a04 	addi	r2,r2,40
   83668:	11000017 	ldw	r4,0(r2)
   8366c:	e0bfea17 	ldw	r2,-88(fp)
   83670:	00c002b4 	movhi	r3,10
   83674:	18ce7f04 	addi	r3,r3,14844
   83678:	100491ba 	slli	r2,r2,6
   8367c:	10c5883a 	add	r2,r2,r3
   83680:	10800a04 	addi	r2,r2,40
   83684:	10800017 	ldw	r2,0(r2)
   83688:	2080271e 	bne	r4,r2,83728 <sd_card_fopen+0x2dc>
   8368c:	e0bfeb0f 	ldh	r2,-84(fp)
   83690:	00c002b4 	movhi	r3,10
   83694:	18ce7f04 	addi	r3,r3,14844
   83698:	100491ba 	slli	r2,r2,6
   8369c:	10c5883a 	add	r2,r2,r3
   836a0:	10800b04 	addi	r2,r2,44
   836a4:	11000017 	ldw	r4,0(r2)
   836a8:	e0bfea17 	ldw	r2,-88(fp)
   836ac:	00c002b4 	movhi	r3,10
   836b0:	18ce7f04 	addi	r3,r3,14844
   836b4:	100491ba 	slli	r2,r2,6
   836b8:	10c5883a 	add	r2,r2,r3
   836bc:	10800b04 	addi	r2,r2,44
   836c0:	10800017 	ldw	r2,0(r2)
   836c4:	2080181e 	bne	r4,r2,83728 <sd_card_fopen+0x2dc>
   836c8:	e0bfeb0f 	ldh	r2,-84(fp)
   836cc:	00c002b4 	movhi	r3,10
   836d0:	18ce7f04 	addi	r3,r3,14844
   836d4:	100491ba 	slli	r2,r2,6
   836d8:	10c5883a 	add	r2,r2,r3
   836dc:	10800c04 	addi	r2,r2,48
   836e0:	1100000b 	ldhu	r4,0(r2)
   836e4:	e0bfea17 	ldw	r2,-88(fp)
   836e8:	00c002b4 	movhi	r3,10
   836ec:	18ce7f04 	addi	r3,r3,14844
   836f0:	100491ba 	slli	r2,r2,6
   836f4:	10c5883a 	add	r2,r2,r3
   836f8:	10800c04 	addi	r2,r2,48
   836fc:	1080000b 	ldhu	r2,0(r2)
   83700:	20ffffcc 	andi	r3,r4,65535
   83704:	18e0001c 	xori	r3,r3,32768
   83708:	18e00004 	addi	r3,r3,-32768
   8370c:	10bfffcc 	andi	r2,r2,65535
   83710:	10a0001c 	xori	r2,r2,32768
   83714:	10a00004 	addi	r2,r2,-32768
   83718:	1880031e 	bne	r3,r2,83728 <sd_card_fopen+0x2dc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
   8371c:	00bfff84 	movi	r2,-2
   83720:	e0bfeb0d 	sth	r2,-84(fp)
								break;
   83724:	00002b06 	br	837d4 <sd_card_fopen+0x388>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
   83728:	e0bfea17 	ldw	r2,-88(fp)
   8372c:	10800044 	addi	r2,r2,1
   83730:	e0bfea15 	stw	r2,-88(fp)
   83734:	e0bfea17 	ldw	r2,-88(fp)
   83738:	10800510 	cmplti	r2,r2,20
   8373c:	103fb81e 	bne	r2,zero,83620 <sd_card_fopen+0x1d4>
   83740:	00002406 	br	837d4 <sd_card_fopen+0x388>
							}
						}
					}

                }
                else if (create)
   83744:	e0bffe17 	ldw	r2,-8(fp)
   83748:	1005003a 	cmpeq	r2,r2,zero
   8374c:	10001f1e 	bne	r2,zero,837cc <sd_card_fopen+0x380>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
   83750:	e0bfeb0f 	ldh	r2,-84(fp)
   83754:	100491ba 	slli	r2,r2,6
   83758:	1007883a 	mov	r3,r2
   8375c:	008002b4 	movhi	r2,10
   83760:	108e7f04 	addi	r2,r2,14844
   83764:	188b883a 	add	r5,r3,r2
   83768:	e1bfed04 	addi	r6,fp,-76
   8376c:	e13ffd17 	ldw	r4,-12(fp)
   83770:	0082a600 	call	82a60 <create_file>
   83774:	1005003a 	cmpeq	r2,r2,zero
   83778:	1000111e 	bne	r2,zero,837c0 <sd_card_fopen+0x374>
                    {
                        active_files[file_record_index].in_use = true;
   8377c:	e0bfeb0f 	ldh	r2,-84(fp)
   83780:	00c002b4 	movhi	r3,10
   83784:	18ce7f04 	addi	r3,r3,14844
   83788:	100491ba 	slli	r2,r2,6
   8378c:	10c5883a 	add	r2,r2,r3
   83790:	10c00f04 	addi	r3,r2,60
   83794:	00800044 	movi	r2,1
   83798:	18800015 	stw	r2,0(r3)
    					active_files[file_record_index].modified = true;
   8379c:	e0bfeb0f 	ldh	r2,-84(fp)
   837a0:	00c002b4 	movhi	r3,10
   837a4:	18ce7f04 	addi	r3,r3,14844
   837a8:	100491ba 	slli	r2,r2,6
   837ac:	10c5883a 	add	r2,r2,r3
   837b0:	10c00e04 	addi	r3,r2,56
   837b4:	00800044 	movi	r2,1
   837b8:	18800015 	stw	r2,0(r3)
   837bc:	00000506 	br	837d4 <sd_card_fopen+0x388>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
   837c0:	00bfffc4 	movi	r2,-1
   837c4:	e0bfeb0d 	sth	r2,-84(fp)
   837c8:	00000206 	br	837d4 <sd_card_fopen+0x388>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
   837cc:	00bfffc4 	movi	r2,-1
   837d0:	e0bfeb0d 	sth	r2,-84(fp)
                }
    		}
        }
	}

	return file_record_index;
   837d4:	e0bfeb0f 	ldh	r2,-84(fp)
   837d8:	e0bfff15 	stw	r2,-4(fp)
   837dc:	e0bfff17 	ldw	r2,-4(fp)
}
   837e0:	e037883a 	mov	sp,fp
   837e4:	dfc00117 	ldw	ra,4(sp)
   837e8:	df000017 	ldw	fp,0(sp)
   837ec:	dec00204 	addi	sp,sp,8
   837f0:	f800283a 	ret

000837f4 <sd_card_set_attributes>:


void sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
   837f4:	defffd04 	addi	sp,sp,-12
   837f8:	df000215 	stw	fp,8(sp)
   837fc:	df000204 	addi	fp,sp,8
   83800:	e13ffe0d 	sth	r4,-8(fp)
   83804:	e17fff0d 	sth	r5,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   83808:	e0bffe0f 	ldh	r2,-8(fp)
   8380c:	1004803a 	cmplt	r2,r2,zero
   83810:	1000181e 	bne	r2,zero,83874 <sd_card_set_attributes+0x80>
   83814:	e0bffe0f 	ldh	r2,-8(fp)
   83818:	10800508 	cmpgei	r2,r2,20
   8381c:	1000151e 	bne	r2,zero,83874 <sd_card_set_attributes+0x80>
    {
        if (active_files[file_handle].in_use)
   83820:	e0bffe0f 	ldh	r2,-8(fp)
   83824:	00c002b4 	movhi	r3,10
   83828:	18ce7f04 	addi	r3,r3,14844
   8382c:	100491ba 	slli	r2,r2,6
   83830:	10c5883a 	add	r2,r2,r3
   83834:	10800f04 	addi	r2,r2,60
   83838:	10800017 	ldw	r2,0(r2)
   8383c:	1005003a 	cmpeq	r2,r2,zero
   83840:	10000c1e 	bne	r2,zero,83874 <sd_card_set_attributes+0x80>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
   83844:	e17ffe0f 	ldh	r5,-8(fp)
   83848:	e0bfff0b 	ldhu	r2,-4(fp)
   8384c:	1007883a 	mov	r3,r2
   83850:	00bfffc4 	movi	r2,-1
   83854:	1884703a 	and	r2,r3,r2
   83858:	1009883a 	mov	r4,r2
   8385c:	00c002b4 	movhi	r3,10
   83860:	18ce7f04 	addi	r3,r3,14844
   83864:	280491ba 	slli	r2,r5,6
   83868:	10c5883a 	add	r2,r2,r3
   8386c:	10800204 	addi	r2,r2,8
   83870:	110000c5 	stb	r4,3(r2)
        }
    }
}
   83874:	e037883a 	mov	sp,fp
   83878:	df000017 	ldw	fp,0(sp)
   8387c:	dec00104 	addi	sp,sp,4
   83880:	f800283a 	ret

00083884 <sd_card_get_attributes>:


short int sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
   83884:	defffd04 	addi	sp,sp,-12
   83888:	df000215 	stw	fp,8(sp)
   8388c:	df000204 	addi	fp,sp,8
   83890:	e13fff0d 	sth	r4,-4(fp)
	short int result = -1;
   83894:	00bfffc4 	movi	r2,-1
   83898:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   8389c:	e0bfff0f 	ldh	r2,-4(fp)
   838a0:	1004803a 	cmplt	r2,r2,zero
   838a4:	1000151e 	bne	r2,zero,838fc <sd_card_get_attributes+0x78>
   838a8:	e0bfff0f 	ldh	r2,-4(fp)
   838ac:	10800508 	cmpgei	r2,r2,20
   838b0:	1000121e 	bne	r2,zero,838fc <sd_card_get_attributes+0x78>
    {
        if (active_files[file_handle].in_use)
   838b4:	e0bfff0f 	ldh	r2,-4(fp)
   838b8:	00c002b4 	movhi	r3,10
   838bc:	18ce7f04 	addi	r3,r3,14844
   838c0:	100491ba 	slli	r2,r2,6
   838c4:	10c5883a 	add	r2,r2,r3
   838c8:	10800f04 	addi	r2,r2,60
   838cc:	10800017 	ldw	r2,0(r2)
   838d0:	1005003a 	cmpeq	r2,r2,zero
   838d4:	1000091e 	bne	r2,zero,838fc <sd_card_get_attributes+0x78>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
   838d8:	e0bfff0f 	ldh	r2,-4(fp)
   838dc:	00c002b4 	movhi	r3,10
   838e0:	18ce7f04 	addi	r3,r3,14844
   838e4:	100491ba 	slli	r2,r2,6
   838e8:	10c5883a 	add	r2,r2,r3
   838ec:	10800204 	addi	r2,r2,8
   838f0:	108000c3 	ldbu	r2,3(r2)
   838f4:	10803fcc 	andi	r2,r2,255
   838f8:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
   838fc:	e0bffe0f 	ldh	r2,-8(fp)
}
   83900:	e037883a 	mov	sp,fp
   83904:	df000017 	ldw	fp,0(sp)
   83908:	dec00104 	addi	sp,sp,4
   8390c:	f800283a 	ret

00083910 <sd_card_read>:

short int sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
   83910:	defff904 	addi	sp,sp,-28
   83914:	dfc00615 	stw	ra,24(sp)
   83918:	df000515 	stw	fp,20(sp)
   8391c:	dc000415 	stw	r16,16(sp)
   83920:	df000404 	addi	fp,sp,16
   83924:	e13ffe0d 	sth	r4,-8(fp)
    short int ch = -1;
   83928:	00bfffc4 	movi	r2,-1
   8392c:	e0bffd0d 	sth	r2,-12(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   83930:	e0bffe0f 	ldh	r2,-8(fp)
   83934:	1004803a 	cmplt	r2,r2,zero
   83938:	1000cb1e 	bne	r2,zero,83c68 <sd_card_read+0x358>
   8393c:	e0bffe0f 	ldh	r2,-8(fp)
   83940:	10800508 	cmpgei	r2,r2,20
   83944:	1000c81e 	bne	r2,zero,83c68 <sd_card_read+0x358>
    {
        if (active_files[file_handle].in_use)
   83948:	e0bffe0f 	ldh	r2,-8(fp)
   8394c:	00c002b4 	movhi	r3,10
   83950:	18ce7f04 	addi	r3,r3,14844
   83954:	100491ba 	slli	r2,r2,6
   83958:	10c5883a 	add	r2,r2,r3
   8395c:	10800f04 	addi	r2,r2,60
   83960:	10800017 	ldw	r2,0(r2)
   83964:	1005003a 	cmpeq	r2,r2,zero
   83968:	1000bf1e 	bne	r2,zero,83c68 <sd_card_read+0x358>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
   8396c:	e0bffe0f 	ldh	r2,-8(fp)
   83970:	00c002b4 	movhi	r3,10
   83974:	18ce7f04 	addi	r3,r3,14844
   83978:	100491ba 	slli	r2,r2,6
   8397c:	10c5883a 	add	r2,r2,r3
   83980:	10800904 	addi	r2,r2,36
   83984:	11000017 	ldw	r4,0(r2)
   83988:	e0bffe0f 	ldh	r2,-8(fp)
   8398c:	00c002b4 	movhi	r3,10
   83990:	18ce7f04 	addi	r3,r3,14844
   83994:	100491ba 	slli	r2,r2,6
   83998:	10c5883a 	add	r2,r2,r3
   8399c:	10800604 	addi	r2,r2,24
   839a0:	10800017 	ldw	r2,0(r2)
   839a4:	2080b02e 	bgeu	r4,r2,83c68 <sd_card_read+0x358>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                                  active_files[file_handle].current_sector_in_cluster;
   839a8:	008002b4 	movhi	r2,10
   839ac:	108e6a04 	addi	r2,r2,14760
   839b0:	14001417 	ldw	r16,80(r2)
   839b4:	e0bffe0f 	ldh	r2,-8(fp)
   839b8:	00c002b4 	movhi	r3,10
   839bc:	18ce7f04 	addi	r3,r3,14844
   839c0:	100491ba 	slli	r2,r2,6
   839c4:	10c5883a 	add	r2,r2,r3
   839c8:	10800704 	addi	r2,r2,28
   839cc:	10800017 	ldw	r2,0(r2)
   839d0:	113fff84 	addi	r4,r2,-2
   839d4:	008002b4 	movhi	r2,10
   839d8:	108e6a04 	addi	r2,r2,14760
   839dc:	10800383 	ldbu	r2,14(r2)
   839e0:	11403fcc 	andi	r5,r2,255
   839e4:	00877e40 	call	877e4 <__mulsi3>
   839e8:	8089883a 	add	r4,r16,r2
   839ec:	e0bffe0f 	ldh	r2,-8(fp)
   839f0:	00c002b4 	movhi	r3,10
   839f4:	18ce7f04 	addi	r3,r3,14844
   839f8:	100491ba 	slli	r2,r2,6
   839fc:	10c5883a 	add	r2,r2,r3
   83a00:	10800804 	addi	r2,r2,32
   83a04:	10800017 	ldw	r2,0(r2)
   83a08:	2085883a 	add	r2,r4,r2
   83a0c:	e0bffc15 	stw	r2,-16(fp)
                
				// printf("hahaha: %d %X, %d\n", active_files[file_handle].current_sector_in_cluster, active_files[file_handle].current_cluster_index, active_files[file_handle].current_byte_position);
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
   83a10:	e0bffe0f 	ldh	r2,-8(fp)
   83a14:	00c002b4 	movhi	r3,10
   83a18:	18ce7f04 	addi	r3,r3,14844
   83a1c:	100491ba 	slli	r2,r2,6
   83a20:	10c5883a 	add	r2,r2,r3
   83a24:	10800904 	addi	r2,r2,36
   83a28:	10800017 	ldw	r2,0(r2)
   83a2c:	1005003a 	cmpeq	r2,r2,zero
   83a30:	1000651e 	bne	r2,zero,83bc8 <sd_card_read+0x2b8>
   83a34:	e0bffe0f 	ldh	r2,-8(fp)
   83a38:	00c002b4 	movhi	r3,10
   83a3c:	18ce7f04 	addi	r3,r3,14844
   83a40:	100491ba 	slli	r2,r2,6
   83a44:	10c5883a 	add	r2,r2,r3
   83a48:	10800904 	addi	r2,r2,36
   83a4c:	10800017 	ldw	r2,0(r2)
   83a50:	10807fcc 	andi	r2,r2,511
   83a54:	1004c03a 	cmpne	r2,r2,zero
   83a58:	10005b1e 	bne	r2,zero,83bc8 <sd_card_read+0x2b8>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   83a5c:	e0bffe0f 	ldh	r2,-8(fp)
   83a60:	00c002b4 	movhi	r3,10
   83a64:	18ce7f04 	addi	r3,r3,14844
   83a68:	100491ba 	slli	r2,r2,6
   83a6c:	10c5883a 	add	r2,r2,r3
   83a70:	10800804 	addi	r2,r2,32
   83a74:	10c00017 	ldw	r3,0(r2)
   83a78:	008002b4 	movhi	r2,10
   83a7c:	108e6a04 	addi	r2,r2,14760
   83a80:	10800383 	ldbu	r2,14(r2)
   83a84:	10803fcc 	andi	r2,r2,255
   83a88:	10bfffc4 	addi	r2,r2,-1
   83a8c:	18803c1e 	bne	r3,r2,83b80 <sd_card_read+0x270>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
   83a90:	e0bffe0f 	ldh	r2,-8(fp)
   83a94:	00c002b4 	movhi	r3,10
   83a98:	18ce7f04 	addi	r3,r3,14844
   83a9c:	100491ba 	slli	r2,r2,6
   83aa0:	10c5883a 	add	r2,r2,r3
   83aa4:	10800704 	addi	r2,r2,28
   83aa8:	11000017 	ldw	r4,0(r2)
   83aac:	e17ffd84 	addi	r5,fp,-10
   83ab0:	008062c0 	call	8062c <get_cluster_flag>
   83ab4:	1005003a 	cmpeq	r2,r2,zero
   83ab8:	10002b1e 	bne	r2,zero,83b68 <sd_card_read+0x258>
                        {
							// printf("hahaha: %X, %X, %d\n", active_files[file_handle].current_cluster_index, next_cluster, active_files[file_handle].current_byte_position);
                            if ((next_cluster & 0xfff8) == 0xfff8)
   83abc:	e0bffd8b 	ldhu	r2,-10(fp)
   83ac0:	10bfffcc 	andi	r2,r2,65535
   83ac4:	10fffe0c 	andi	r3,r2,65528
   83ac8:	00bffe14 	movui	r2,65528
   83acc:	1880031e 	bne	r3,r2,83adc <sd_card_read+0x1cc>
                            {
                                /* End of file */
								// printf("hahaha1: %X %d %d\n", next_cluster, active_files[file_handle].current_byte_position, active_files[file_handle].file_size_in_bytes);
                                return -1;
   83ad0:	00bfffc4 	movi	r2,-1
   83ad4:	e0bfff15 	stw	r2,-4(fp)
   83ad8:	00006506 	br	83c70 <sd_card_read+0x360>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
   83adc:	e13ffe0f 	ldh	r4,-8(fp)
   83ae0:	e0bffd8b 	ldhu	r2,-10(fp)
   83ae4:	117fffcc 	andi	r5,r2,65535
   83ae8:	00c002b4 	movhi	r3,10
   83aec:	18ce7f04 	addi	r3,r3,14844
   83af0:	200491ba 	slli	r2,r4,6
   83af4:	10c5883a 	add	r2,r2,r3
   83af8:	10800704 	addi	r2,r2,28
   83afc:	11400015 	stw	r5,0(r2)
								data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster;
   83b00:	008002b4 	movhi	r2,10
   83b04:	108e6a04 	addi	r2,r2,14760
   83b08:	14001417 	ldw	r16,80(r2)
   83b0c:	e0bffe0f 	ldh	r2,-8(fp)
   83b10:	00c002b4 	movhi	r3,10
   83b14:	18ce7f04 	addi	r3,r3,14844
   83b18:	100491ba 	slli	r2,r2,6
   83b1c:	10c5883a 	add	r2,r2,r3
   83b20:	10800704 	addi	r2,r2,28
   83b24:	10800017 	ldw	r2,0(r2)
   83b28:	113fff84 	addi	r4,r2,-2
   83b2c:	008002b4 	movhi	r2,10
   83b30:	108e6a04 	addi	r2,r2,14760
   83b34:	10800383 	ldbu	r2,14(r2)
   83b38:	11403fcc 	andi	r5,r2,255
   83b3c:	00877e40 	call	877e4 <__mulsi3>
   83b40:	8085883a 	add	r2,r16,r2
   83b44:	e0bffc15 	stw	r2,-16(fp)
                                active_files[file_handle].current_sector_in_cluster = 0; 
   83b48:	e0bffe0f 	ldh	r2,-8(fp)
   83b4c:	00c002b4 	movhi	r3,10
   83b50:	18ce7f04 	addi	r3,r3,14844
   83b54:	100491ba 	slli	r2,r2,6
   83b58:	10c5883a 	add	r2,r2,r3
   83b5c:	10800804 	addi	r2,r2,32
   83b60:	10000015 	stw	zero,0(r2)
   83b64:	00001806 	br	83bc8 <sd_card_read+0x2b8>
                            }
                        }
                        else
                        {
							printf("hahaha2\n");
   83b68:	010002b4 	movhi	r4,10
   83b6c:	213d9b04 	addi	r4,r4,-2452
   83b70:	0087aa40 	call	87aa4 <puts>
                            return -2;
   83b74:	00bfff84 	movi	r2,-2
   83b78:	e0bfff15 	stw	r2,-4(fp)
   83b7c:	00003c06 	br	83c70 <sd_card_read+0x360>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
   83b80:	e17ffe0f 	ldh	r5,-8(fp)
   83b84:	e0bffe0f 	ldh	r2,-8(fp)
   83b88:	00c002b4 	movhi	r3,10
   83b8c:	18ce7f04 	addi	r3,r3,14844
   83b90:	100491ba 	slli	r2,r2,6
   83b94:	10c5883a 	add	r2,r2,r3
   83b98:	10800804 	addi	r2,r2,32
   83b9c:	10800017 	ldw	r2,0(r2)
   83ba0:	11000044 	addi	r4,r2,1
   83ba4:	00c002b4 	movhi	r3,10
   83ba8:	18ce7f04 	addi	r3,r3,14844
   83bac:	280491ba 	slli	r2,r5,6
   83bb0:	10c5883a 	add	r2,r2,r3
   83bb4:	10800804 	addi	r2,r2,32
   83bb8:	11000015 	stw	r4,0(r2)
                        data_sector = data_sector + 1;
   83bbc:	e0bffc17 	ldw	r2,-16(fp)
   83bc0:	10800044 	addi	r2,r2,1
   83bc4:	e0bffc15 	stw	r2,-16(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
   83bc8:	d0e70717 	ldw	r3,-25572(gp)
   83bcc:	e0bffc17 	ldw	r2,-16(fp)
   83bd0:	1885883a 	add	r2,r3,r2
   83bd4:	1007883a 	mov	r3,r2
   83bd8:	d0a70a17 	ldw	r2,-25560(gp)
   83bdc:	18800826 	beq	r3,r2,83c00 <sd_card_read+0x2f0>
                {
					// printf("hau: %d, %d, %d\n", current_sector_index, data_sector, active_files[file_handle].current_byte_position);
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
   83be0:	d1670717 	ldw	r5,-25572(gp)
   83be4:	e13ffc17 	ldw	r4,-16(fp)
   83be8:	008053c0 	call	8053c <Read_Sector_Data>
   83bec:	1004c03a 	cmpne	r2,r2,zero
   83bf0:	1000031e 	bne	r2,zero,83c00 <sd_card_read+0x2f0>
                    {
						// printf("hahaha3\n");
						return -2;
   83bf4:	00bfff84 	movi	r2,-2
   83bf8:	e0bfff15 	stw	r2,-4(fp)
   83bfc:	00001c06 	br	83c70 <sd_card_read+0x360>
                    }
                }
                ch = ((*((unsigned char *)SD_CARD_BUFFER(SD_CARD_0_BASE, active_files[file_handle].current_byte_position % 512))) & 0x00ff);
   83c00:	e0bffe0f 	ldh	r2,-8(fp)
   83c04:	00c002b4 	movhi	r3,10
   83c08:	18ce7f04 	addi	r3,r3,14844
   83c0c:	100491ba 	slli	r2,r2,6
   83c10:	10c5883a 	add	r2,r2,r3
   83c14:	10800904 	addi	r2,r2,36
   83c18:	10800017 	ldw	r2,0(r2)
   83c1c:	10807fcc 	andi	r2,r2,511
   83c20:	10800003 	ldbu	r2,0(r2)
   83c24:	10803fcc 	andi	r2,r2,255
   83c28:	e0bffd0d 	sth	r2,-12(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
   83c2c:	e17ffe0f 	ldh	r5,-8(fp)
   83c30:	e0bffe0f 	ldh	r2,-8(fp)
   83c34:	00c002b4 	movhi	r3,10
   83c38:	18ce7f04 	addi	r3,r3,14844
   83c3c:	100491ba 	slli	r2,r2,6
   83c40:	10c5883a 	add	r2,r2,r3
   83c44:	10800904 	addi	r2,r2,36
   83c48:	10800017 	ldw	r2,0(r2)
   83c4c:	11000044 	addi	r4,r2,1
   83c50:	00c002b4 	movhi	r3,10
   83c54:	18ce7f04 	addi	r3,r3,14844
   83c58:	280491ba 	slli	r2,r5,6
   83c5c:	10c5883a 	add	r2,r2,r3
   83c60:	10800904 	addi	r2,r2,36
   83c64:	11000015 	stw	r4,0(r2)
            }
        }
    }
    
    return ch;
   83c68:	e0bffd0f 	ldh	r2,-12(fp)
   83c6c:	e0bfff15 	stw	r2,-4(fp)
   83c70:	e0bfff17 	ldw	r2,-4(fp)
}
   83c74:	e037883a 	mov	sp,fp
   83c78:	dfc00217 	ldw	ra,8(sp)
   83c7c:	df000117 	ldw	fp,4(sp)
   83c80:	dc000017 	ldw	r16,0(sp)
   83c84:	dec00304 	addi	sp,sp,12
   83c88:	f800283a 	ret

00083c8c <sd_card_write>:


bool sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
   83c8c:	defff504 	addi	sp,sp,-44
   83c90:	dfc00a15 	stw	ra,40(sp)
   83c94:	df000915 	stw	fp,36(sp)
   83c98:	dc000815 	stw	r16,32(sp)
   83c9c:	df000804 	addi	fp,sp,32
   83ca0:	e13ffd0d 	sth	r4,-12(fp)
   83ca4:	e17ffe05 	stb	r5,-8(fp)
    bool result = false;
   83ca8:	e03ffa15 	stw	zero,-24(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   83cac:	e0bffd0f 	ldh	r2,-12(fp)
   83cb0:	1004803a 	cmplt	r2,r2,zero
   83cb4:	1001681e 	bne	r2,zero,84258 <sd_card_write+0x5cc>
   83cb8:	e0bffd0f 	ldh	r2,-12(fp)
   83cbc:	10800508 	cmpgei	r2,r2,20
   83cc0:	1001651e 	bne	r2,zero,84258 <sd_card_write+0x5cc>
    {
        if (active_files[file_handle].in_use)
   83cc4:	e0bffd0f 	ldh	r2,-12(fp)
   83cc8:	00c002b4 	movhi	r3,10
   83ccc:	18ce7f04 	addi	r3,r3,14844
   83cd0:	100491ba 	slli	r2,r2,6
   83cd4:	10c5883a 	add	r2,r2,r3
   83cd8:	10800f04 	addi	r2,r2,60
   83cdc:	10800017 	ldw	r2,0(r2)
   83ce0:	1005003a 	cmpeq	r2,r2,zero
   83ce4:	10015c1e 	bne	r2,zero,84258 <sd_card_write+0x5cc>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                              active_files[file_handle].current_sector_in_cluster;
   83ce8:	008002b4 	movhi	r2,10
   83cec:	108e6a04 	addi	r2,r2,14760
   83cf0:	14001417 	ldw	r16,80(r2)
   83cf4:	e0bffd0f 	ldh	r2,-12(fp)
   83cf8:	00c002b4 	movhi	r3,10
   83cfc:	18ce7f04 	addi	r3,r3,14844
   83d00:	100491ba 	slli	r2,r2,6
   83d04:	10c5883a 	add	r2,r2,r3
   83d08:	10800704 	addi	r2,r2,28
   83d0c:	10800017 	ldw	r2,0(r2)
   83d10:	113fff84 	addi	r4,r2,-2
   83d14:	008002b4 	movhi	r2,10
   83d18:	108e6a04 	addi	r2,r2,14760
   83d1c:	10800383 	ldbu	r2,14(r2)
   83d20:	11403fcc 	andi	r5,r2,255
   83d24:	00877e40 	call	877e4 <__mulsi3>
   83d28:	8089883a 	add	r4,r16,r2
   83d2c:	e0bffd0f 	ldh	r2,-12(fp)
   83d30:	00c002b4 	movhi	r3,10
   83d34:	18ce7f04 	addi	r3,r3,14844
   83d38:	100491ba 	slli	r2,r2,6
   83d3c:	10c5883a 	add	r2,r2,r3
   83d40:	10800804 	addi	r2,r2,32
   83d44:	10800017 	ldw	r2,0(r2)
   83d48:	2085883a 	add	r2,r4,r2
   83d4c:	e0bff915 	stw	r2,-28(fp)
			short int buffer_address = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
   83d50:	e0bffd0f 	ldh	r2,-12(fp)
   83d54:	00c002b4 	movhi	r3,10
   83d58:	18ce7f04 	addi	r3,r3,14844
   83d5c:	100491ba 	slli	r2,r2,6
   83d60:	10c5883a 	add	r2,r2,r3
   83d64:	10800904 	addi	r2,r2,36
   83d68:	11000017 	ldw	r4,0(r2)
   83d6c:	008002b4 	movhi	r2,10
   83d70:	108e6a04 	addi	r2,r2,14760
   83d74:	1080030b 	ldhu	r2,12(r2)
   83d78:	117fffcc 	andi	r5,r2,65535
   83d7c:	00877dc0 	call	877dc <__umodsi3>
   83d80:	e0bff80d 	sth	r2,-32(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
   83d84:	e0bffd0f 	ldh	r2,-12(fp)
   83d88:	00c002b4 	movhi	r3,10
   83d8c:	18ce7f04 	addi	r3,r3,14844
   83d90:	100491ba 	slli	r2,r2,6
   83d94:	10c5883a 	add	r2,r2,r3
   83d98:	10800904 	addi	r2,r2,36
   83d9c:	11000017 	ldw	r4,0(r2)
   83da0:	e0bffd0f 	ldh	r2,-12(fp)
   83da4:	00c002b4 	movhi	r3,10
   83da8:	18ce7f04 	addi	r3,r3,14844
   83dac:	100491ba 	slli	r2,r2,6
   83db0:	10c5883a 	add	r2,r2,r3
   83db4:	10800604 	addi	r2,r2,24
   83db8:	10800017 	ldw	r2,0(r2)
   83dbc:	2080602e 	bgeu	r4,r2,83f40 <sd_card_write+0x2b4>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_address == 0))
   83dc0:	e0bffd0f 	ldh	r2,-12(fp)
   83dc4:	00c002b4 	movhi	r3,10
   83dc8:	18ce7f04 	addi	r3,r3,14844
   83dcc:	100491ba 	slli	r2,r2,6
   83dd0:	10c5883a 	add	r2,r2,r3
   83dd4:	10800904 	addi	r2,r2,36
   83dd8:	10800017 	ldw	r2,0(r2)
   83ddc:	1005003a 	cmpeq	r2,r2,zero
   83de0:	1000d11e 	bne	r2,zero,84128 <sd_card_write+0x49c>
   83de4:	e0bff80f 	ldh	r2,-32(fp)
   83de8:	1004c03a 	cmpne	r2,r2,zero
   83dec:	1000ce1e 	bne	r2,zero,84128 <sd_card_write+0x49c>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   83df0:	e0bffd0f 	ldh	r2,-12(fp)
   83df4:	00c002b4 	movhi	r3,10
   83df8:	18ce7f04 	addi	r3,r3,14844
   83dfc:	100491ba 	slli	r2,r2,6
   83e00:	10c5883a 	add	r2,r2,r3
   83e04:	10800804 	addi	r2,r2,32
   83e08:	10c00017 	ldw	r3,0(r2)
   83e0c:	008002b4 	movhi	r2,10
   83e10:	108e6a04 	addi	r2,r2,14760
   83e14:	10800383 	ldbu	r2,14(r2)
   83e18:	10803fcc 	andi	r2,r2,255
   83e1c:	10bfffc4 	addi	r2,r2,-1
   83e20:	1880341e 	bne	r3,r2,83ef4 <sd_card_write+0x268>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
   83e24:	e0bffd0f 	ldh	r2,-12(fp)
   83e28:	00c002b4 	movhi	r3,10
   83e2c:	18ce7f04 	addi	r3,r3,14844
   83e30:	100491ba 	slli	r2,r2,6
   83e34:	10c5883a 	add	r2,r2,r3
   83e38:	10800704 	addi	r2,r2,28
   83e3c:	11000017 	ldw	r4,0(r2)
   83e40:	e17ffb04 	addi	r5,fp,-20
   83e44:	008062c0 	call	8062c <get_cluster_flag>
   83e48:	1005003a 	cmpeq	r2,r2,zero
   83e4c:	1000271e 	bne	r2,zero,83eec <sd_card_write+0x260>
                        {
                            if (next_cluster < 0xfff8)
   83e50:	e0bffb0b 	ldhu	r2,-20(fp)
   83e54:	10ffffcc 	andi	r3,r2,65535
   83e58:	00bffdd4 	movui	r2,65527
   83e5c:	10c0b236 	bltu	r2,r3,84128 <sd_card_write+0x49c>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
   83e60:	e13ffd0f 	ldh	r4,-12(fp)
   83e64:	e0bffb0b 	ldhu	r2,-20(fp)
   83e68:	117fffcc 	andi	r5,r2,65535
   83e6c:	00c002b4 	movhi	r3,10
   83e70:	18ce7f04 	addi	r3,r3,14844
   83e74:	200491ba 	slli	r2,r4,6
   83e78:	10c5883a 	add	r2,r2,r3
   83e7c:	10800704 	addi	r2,r2,28
   83e80:	11400015 	stw	r5,0(r2)
								data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster;
   83e84:	008002b4 	movhi	r2,10
   83e88:	108e6a04 	addi	r2,r2,14760
   83e8c:	14001417 	ldw	r16,80(r2)
   83e90:	e0bffd0f 	ldh	r2,-12(fp)
   83e94:	00c002b4 	movhi	r3,10
   83e98:	18ce7f04 	addi	r3,r3,14844
   83e9c:	100491ba 	slli	r2,r2,6
   83ea0:	10c5883a 	add	r2,r2,r3
   83ea4:	10800704 	addi	r2,r2,28
   83ea8:	10800017 	ldw	r2,0(r2)
   83eac:	113fff84 	addi	r4,r2,-2
   83eb0:	008002b4 	movhi	r2,10
   83eb4:	108e6a04 	addi	r2,r2,14760
   83eb8:	10800383 	ldbu	r2,14(r2)
   83ebc:	11403fcc 	andi	r5,r2,255
   83ec0:	00877e40 	call	877e4 <__mulsi3>
   83ec4:	8085883a 	add	r2,r16,r2
   83ec8:	e0bff915 	stw	r2,-28(fp)
								active_files[file_handle].current_sector_in_cluster = 0;
   83ecc:	e0bffd0f 	ldh	r2,-12(fp)
   83ed0:	00c002b4 	movhi	r3,10
   83ed4:	18ce7f04 	addi	r3,r3,14844
   83ed8:	100491ba 	slli	r2,r2,6
   83edc:	10c5883a 	add	r2,r2,r3
   83ee0:	10800804 	addi	r2,r2,32
   83ee4:	10000015 	stw	zero,0(r2)
   83ee8:	00008f06 	br	84128 <sd_card_write+0x49c>
                            }
                        }
                        else
                        {
                            return false;
   83eec:	e03fff15 	stw	zero,-4(fp)
   83ef0:	0000db06 	br	84260 <sd_card_write+0x5d4>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
   83ef4:	e17ffd0f 	ldh	r5,-12(fp)
   83ef8:	e0bffd0f 	ldh	r2,-12(fp)
   83efc:	00c002b4 	movhi	r3,10
   83f00:	18ce7f04 	addi	r3,r3,14844
   83f04:	100491ba 	slli	r2,r2,6
   83f08:	10c5883a 	add	r2,r2,r3
   83f0c:	10800804 	addi	r2,r2,32
   83f10:	10800017 	ldw	r2,0(r2)
   83f14:	11000044 	addi	r4,r2,1
   83f18:	00c002b4 	movhi	r3,10
   83f1c:	18ce7f04 	addi	r3,r3,14844
   83f20:	280491ba 	slli	r2,r5,6
   83f24:	10c5883a 	add	r2,r2,r3
   83f28:	10800804 	addi	r2,r2,32
   83f2c:	11000015 	stw	r4,0(r2)
                        data_sector = data_sector + 1;
   83f30:	e0bff917 	ldw	r2,-28(fp)
   83f34:	10800044 	addi	r2,r2,1
   83f38:	e0bff915 	stw	r2,-28(fp)
   83f3c:	00007a06 	br	84128 <sd_card_write+0x49c>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_address == 0))
   83f40:	e0bffd0f 	ldh	r2,-12(fp)
   83f44:	00c002b4 	movhi	r3,10
   83f48:	18ce7f04 	addi	r3,r3,14844
   83f4c:	100491ba 	slli	r2,r2,6
   83f50:	10c5883a 	add	r2,r2,r3
   83f54:	10800904 	addi	r2,r2,36
   83f58:	10800017 	ldw	r2,0(r2)
   83f5c:	1005003a 	cmpeq	r2,r2,zero
   83f60:	1000711e 	bne	r2,zero,84128 <sd_card_write+0x49c>
   83f64:	e0bff80f 	ldh	r2,-32(fp)
   83f68:	1004c03a 	cmpne	r2,r2,zero
   83f6c:	10006e1e 	bne	r2,zero,84128 <sd_card_write+0x49c>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   83f70:	e0bffd0f 	ldh	r2,-12(fp)
   83f74:	00c002b4 	movhi	r3,10
   83f78:	18ce7f04 	addi	r3,r3,14844
   83f7c:	100491ba 	slli	r2,r2,6
   83f80:	10c5883a 	add	r2,r2,r3
   83f84:	10800804 	addi	r2,r2,32
   83f88:	10c00017 	ldw	r3,0(r2)
   83f8c:	008002b4 	movhi	r2,10
   83f90:	108e6a04 	addi	r2,r2,14760
   83f94:	10800383 	ldbu	r2,14(r2)
   83f98:	10803fcc 	andi	r2,r2,255
   83f9c:	10bfffc4 	addi	r2,r2,-1
   83fa0:	1880381e 	bne	r3,r2,84084 <sd_card_write+0x3f8>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
   83fa4:	e13ffc04 	addi	r4,fp,-16
   83fa8:	00823bc0 	call	823bc <find_first_empty_cluster>
   83fac:	1005003a 	cmpeq	r2,r2,zero
   83fb0:	1000321e 	bne	r2,zero,8407c <sd_card_write+0x3f0>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
   83fb4:	e0bffd0f 	ldh	r2,-12(fp)
   83fb8:	00c002b4 	movhi	r3,10
   83fbc:	18ce7f04 	addi	r3,r3,14844
   83fc0:	100491ba 	slli	r2,r2,6
   83fc4:	10c5883a 	add	r2,r2,r3
   83fc8:	10800704 	addi	r2,r2,28
   83fcc:	11000017 	ldw	r4,0(r2)
   83fd0:	e0bffc17 	ldw	r2,-16(fp)
   83fd4:	117fffcc 	andi	r5,r2,65535
   83fd8:	2960001c 	xori	r5,r5,32768
   83fdc:	29600004 	addi	r5,r5,-32768
   83fe0:	01800044 	movi	r6,1
   83fe4:	00806d00 	call	806d0 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
   83fe8:	e13ffc17 	ldw	r4,-16(fp)
   83fec:	017fffc4 	movi	r5,-1
   83ff0:	01800044 	movi	r6,1
   83ff4:	00806d00 	call	806d0 <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
   83ff8:	e0bffd0f 	ldh	r2,-12(fp)
   83ffc:	00c002b4 	movhi	r3,10
   84000:	18ce7f04 	addi	r3,r3,14844
   84004:	100491ba 	slli	r2,r2,6
   84008:	10c5883a 	add	r2,r2,r3
   8400c:	10800704 	addi	r2,r2,28
   84010:	11000017 	ldw	r4,0(r2)
   84014:	e0bffc17 	ldw	r2,-16(fp)
   84018:	117fffcc 	andi	r5,r2,65535
   8401c:	2960001c 	xori	r5,r5,32768
   84020:	29600004 	addi	r5,r5,-32768
   84024:	000d883a 	mov	r6,zero
   84028:	00806d00 	call	806d0 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
   8402c:	e13ffc17 	ldw	r4,-16(fp)
   84030:	017fffc4 	movi	r5,-1
   84034:	000d883a 	mov	r6,zero
   84038:	00806d00 	call	806d0 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
   8403c:	e0bffd0f 	ldh	r2,-12(fp)
   84040:	e13ffc17 	ldw	r4,-16(fp)
   84044:	00c002b4 	movhi	r3,10
   84048:	18ce7f04 	addi	r3,r3,14844
   8404c:	100491ba 	slli	r2,r2,6
   84050:	10c5883a 	add	r2,r2,r3
   84054:	10800704 	addi	r2,r2,28
   84058:	11000015 	stw	r4,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
   8405c:	e0bffd0f 	ldh	r2,-12(fp)
   84060:	00c002b4 	movhi	r3,10
   84064:	18ce7f04 	addi	r3,r3,14844
   84068:	100491ba 	slli	r2,r2,6
   8406c:	10c5883a 	add	r2,r2,r3
   84070:	10800804 	addi	r2,r2,32
   84074:	10000015 	stw	zero,0(r2)
   84078:	00001106 	br	840c0 <sd_card_write+0x434>
						}
						else
						{
							return false;
   8407c:	e03fff15 	stw	zero,-4(fp)
   84080:	00007706 	br	84260 <sd_card_write+0x5d4>
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						// active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
						active_files[file_handle].current_sector_in_cluster += 1;
   84084:	e17ffd0f 	ldh	r5,-12(fp)
   84088:	e0bffd0f 	ldh	r2,-12(fp)
   8408c:	00c002b4 	movhi	r3,10
   84090:	18ce7f04 	addi	r3,r3,14844
   84094:	100491ba 	slli	r2,r2,6
   84098:	10c5883a 	add	r2,r2,r3
   8409c:	10800804 	addi	r2,r2,32
   840a0:	10800017 	ldw	r2,0(r2)
   840a4:	11000044 	addi	r4,r2,1
   840a8:	00c002b4 	movhi	r3,10
   840ac:	18ce7f04 	addi	r3,r3,14844
   840b0:	280491ba 	slli	r2,r5,6
   840b4:	10c5883a 	add	r2,r2,r3
   840b8:	10800804 	addi	r2,r2,32
   840bc:	11000015 	stw	r4,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   840c0:	008002b4 	movhi	r2,10
   840c4:	108e6a04 	addi	r2,r2,14760
   840c8:	14001417 	ldw	r16,80(r2)
   840cc:	e0bffd0f 	ldh	r2,-12(fp)
   840d0:	00c002b4 	movhi	r3,10
   840d4:	18ce7f04 	addi	r3,r3,14844
   840d8:	100491ba 	slli	r2,r2,6
   840dc:	10c5883a 	add	r2,r2,r3
   840e0:	10800704 	addi	r2,r2,28
   840e4:	10800017 	ldw	r2,0(r2)
   840e8:	113fff84 	addi	r4,r2,-2
   840ec:	008002b4 	movhi	r2,10
   840f0:	108e6a04 	addi	r2,r2,14760
   840f4:	10800383 	ldbu	r2,14(r2)
   840f8:	11403fcc 	andi	r5,r2,255
   840fc:	00877e40 	call	877e4 <__mulsi3>
   84100:	8089883a 	add	r4,r16,r2
   84104:	e0bffd0f 	ldh	r2,-12(fp)
   84108:	00c002b4 	movhi	r3,10
   8410c:	18ce7f04 	addi	r3,r3,14844
   84110:	100491ba 	slli	r2,r2,6
   84114:	10c5883a 	add	r2,r2,r3
   84118:	10800804 	addi	r2,r2,32
   8411c:	10800017 	ldw	r2,0(r2)
   84120:	2085883a 	add	r2,r4,r2
   84124:	e0bff915 	stw	r2,-28(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
   84128:	d0e70717 	ldw	r3,-25572(gp)
   8412c:	e0bff917 	ldw	r2,-28(fp)
   84130:	1885883a 	add	r2,r3,r2
   84134:	1007883a 	mov	r3,r2
   84138:	d0a70a17 	ldw	r2,-25560(gp)
   8413c:	18800926 	beq	r3,r2,84164 <sd_card_write+0x4d8>
            {
				result = Save_Modified_Sector();
   84140:	00804ec0 	call	804ec <Save_Modified_Sector>
   84144:	e0bffa15 	stw	r2,-24(fp)
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
   84148:	d1670717 	ldw	r5,-25572(gp)
   8414c:	e13ff917 	ldw	r4,-28(fp)
   84150:	008053c0 	call	8053c <Read_Sector_Data>
   84154:	1004c03a 	cmpne	r2,r2,zero
   84158:	1000021e 	bne	r2,zero,84164 <sd_card_write+0x4d8>
                {
					return false;
   8415c:	e03fff15 	stw	zero,-4(fp)
   84160:	00003f06 	br	84260 <sd_card_write+0x5d4>
                }
            }
            // Write a byte of data to the buffer.
            *((volatile char *)SD_CARD_BUFFER(SD_CARD_0_BASE, buffer_address)) = byte_of_data;
   84164:	e0bff80f 	ldh	r2,-32(fp)
   84168:	1007883a 	mov	r3,r2
   8416c:	e0bffe03 	ldbu	r2,-8(fp)
   84170:	18800005 	stb	r2,0(r3)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
   84174:	e17ffd0f 	ldh	r5,-12(fp)
   84178:	e0bffd0f 	ldh	r2,-12(fp)
   8417c:	00c002b4 	movhi	r3,10
   84180:	18ce7f04 	addi	r3,r3,14844
   84184:	100491ba 	slli	r2,r2,6
   84188:	10c5883a 	add	r2,r2,r3
   8418c:	10800904 	addi	r2,r2,36
   84190:	10800017 	ldw	r2,0(r2)
   84194:	11000044 	addi	r4,r2,1
   84198:	00c002b4 	movhi	r3,10
   8419c:	18ce7f04 	addi	r3,r3,14844
   841a0:	280491ba 	slli	r2,r5,6
   841a4:	10c5883a 	add	r2,r2,r3
   841a8:	10800904 	addi	r2,r2,36
   841ac:	11000015 	stw	r4,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
   841b0:	e0bffd0f 	ldh	r2,-12(fp)
   841b4:	00c002b4 	movhi	r3,10
   841b8:	18ce7f04 	addi	r3,r3,14844
   841bc:	100491ba 	slli	r2,r2,6
   841c0:	10c5883a 	add	r2,r2,r3
   841c4:	10800904 	addi	r2,r2,36
   841c8:	11000017 	ldw	r4,0(r2)
   841cc:	e0bffd0f 	ldh	r2,-12(fp)
   841d0:	00c002b4 	movhi	r3,10
   841d4:	18ce7f04 	addi	r3,r3,14844
   841d8:	100491ba 	slli	r2,r2,6
   841dc:	10c5883a 	add	r2,r2,r3
   841e0:	10800604 	addi	r2,r2,24
   841e4:	10800017 	ldw	r2,0(r2)
   841e8:	20801736 	bltu	r4,r2,84248 <sd_card_write+0x5bc>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
   841ec:	e17ffd0f 	ldh	r5,-12(fp)
   841f0:	e0bffd0f 	ldh	r2,-12(fp)
   841f4:	00c002b4 	movhi	r3,10
   841f8:	18ce7f04 	addi	r3,r3,14844
   841fc:	100491ba 	slli	r2,r2,6
   84200:	10c5883a 	add	r2,r2,r3
   84204:	10800604 	addi	r2,r2,24
   84208:	10800017 	ldw	r2,0(r2)
   8420c:	11000044 	addi	r4,r2,1
   84210:	00c002b4 	movhi	r3,10
   84214:	18ce7f04 	addi	r3,r3,14844
   84218:	280491ba 	slli	r2,r5,6
   8421c:	10c5883a 	add	r2,r2,r3
   84220:	10800604 	addi	r2,r2,24
   84224:	11000015 	stw	r4,0(r2)
				active_files[file_handle].modified = true;
   84228:	e0bffd0f 	ldh	r2,-12(fp)
   8422c:	00c002b4 	movhi	r3,10
   84230:	18ce7f04 	addi	r3,r3,14844
   84234:	100491ba 	slli	r2,r2,6
   84238:	10c5883a 	add	r2,r2,r3
   8423c:	10c00e04 	addi	r3,r2,56
   84240:	00800044 	movi	r2,1
   84244:	18800015 	stw	r2,0(r3)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
   84248:	00800044 	movi	r2,1
   8424c:	d0a70915 	stw	r2,-25564(gp)
			result = true;
   84250:	00800044 	movi	r2,1
   84254:	e0bffa15 	stw	r2,-24(fp)
		}
    }
    
    return result;
   84258:	e0bffa17 	ldw	r2,-24(fp)
   8425c:	e0bfff15 	stw	r2,-4(fp)
   84260:	e0bfff17 	ldw	r2,-4(fp)
}
   84264:	e037883a 	mov	sp,fp
   84268:	dfc00217 	ldw	ra,8(sp)
   8426c:	df000117 	ldw	fp,4(sp)
   84270:	dc000017 	ldw	r16,0(sp)
   84274:	dec00304 	addi	sp,sp,12
   84278:	f800283a 	ret

0008427c <sd_card_fclose>:


bool sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
   8427c:	defffa04 	addi	sp,sp,-24
   84280:	dfc00515 	stw	ra,20(sp)
   84284:	df000415 	stw	fp,16(sp)
   84288:	dc000315 	stw	r16,12(sp)
   8428c:	df000304 	addi	fp,sp,12
   84290:	e13fff0d 	sth	r4,-4(fp)
    bool result = false;
   84294:	e03ffe15 	stw	zero,-8(fp)
    if ((sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   84298:	0082ef80 	call	82ef8 <sd_card_is_Present>
   8429c:	1005003a 	cmpeq	r2,r2,zero
   842a0:	1000641e 	bne	r2,zero,84434 <sd_card_fclose+0x1b8>
   842a4:	d0a70117 	ldw	r2,-25596(gp)
   842a8:	1005003a 	cmpeq	r2,r2,zero
   842ac:	1000611e 	bne	r2,zero,84434 <sd_card_fclose+0x1b8>
    {
        if (active_files[file_handle].in_use) 
   842b0:	e0bfff0f 	ldh	r2,-4(fp)
   842b4:	00c002b4 	movhi	r3,10
   842b8:	18ce7f04 	addi	r3,r3,14844
   842bc:	100491ba 	slli	r2,r2,6
   842c0:	10c5883a 	add	r2,r2,r3
   842c4:	10800f04 	addi	r2,r2,60
   842c8:	10800017 	ldw	r2,0(r2)
   842cc:	1005003a 	cmpeq	r2,r2,zero
   842d0:	1000581e 	bne	r2,zero,84434 <sd_card_fclose+0x1b8>
        {
			if (active_files[file_handle].modified)
   842d4:	e0bfff0f 	ldh	r2,-4(fp)
   842d8:	00c002b4 	movhi	r3,10
   842dc:	18ce7f04 	addi	r3,r3,14844
   842e0:	100491ba 	slli	r2,r2,6
   842e4:	10c5883a 	add	r2,r2,r3
   842e8:	10800e04 	addi	r2,r2,56
   842ec:	10800017 	ldw	r2,0(r2)
   842f0:	1005003a 	cmpeq	r2,r2,zero
   842f4:	1000461e 	bne	r2,zero,84410 <sd_card_fclose+0x194>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
   842f8:	e0bfff0f 	ldh	r2,-4(fp)
   842fc:	00c002b4 	movhi	r3,10
   84300:	18ce7f04 	addi	r3,r3,14844
   84304:	100491ba 	slli	r2,r2,6
   84308:	10c5883a 	add	r2,r2,r3
   8430c:	10800b04 	addi	r2,r2,44
   84310:	10800017 	ldw	r2,0(r2)
   84314:	e0bffd15 	stw	r2,-12(fp)
				if (active_files[file_handle].file_record_cluster == 0)
   84318:	e0bfff0f 	ldh	r2,-4(fp)
   8431c:	00c002b4 	movhi	r3,10
   84320:	18ce7f04 	addi	r3,r3,14844
   84324:	100491ba 	slli	r2,r2,6
   84328:	10c5883a 	add	r2,r2,r3
   8432c:	10800a04 	addi	r2,r2,40
   84330:	10800017 	ldw	r2,0(r2)
   84334:	1004c03a 	cmpne	r2,r2,zero
   84338:	1000071e 	bne	r2,zero,84358 <sd_card_fclose+0xdc>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
   8433c:	008002b4 	movhi	r2,10
   84340:	108e6a04 	addi	r2,r2,14760
   84344:	10c01317 	ldw	r3,76(r2)
   84348:	e0bffd17 	ldw	r2,-12(fp)
   8434c:	10c5883a 	add	r2,r2,r3
   84350:	e0bffd15 	stw	r2,-12(fp)
   84354:	00001406 	br	843a8 <sd_card_fclose+0x12c>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
   84358:	008002b4 	movhi	r2,10
   8435c:	108e6a04 	addi	r2,r2,14760
   84360:	10c01417 	ldw	r3,80(r2)
   84364:	e0bffd17 	ldw	r2,-12(fp)
   84368:	18a1883a 	add	r16,r3,r2
   8436c:	e0bfff0f 	ldh	r2,-4(fp)
   84370:	00c002b4 	movhi	r3,10
   84374:	18ce7f04 	addi	r3,r3,14844
   84378:	100491ba 	slli	r2,r2,6
   8437c:	10c5883a 	add	r2,r2,r3
   84380:	10800a04 	addi	r2,r2,40
   84384:	10800017 	ldw	r2,0(r2)
   84388:	113fff84 	addi	r4,r2,-2
   8438c:	008002b4 	movhi	r2,10
   84390:	108e6a04 	addi	r2,r2,14760
   84394:	10800383 	ldbu	r2,14(r2)
   84398:	11403fcc 	andi	r5,r2,255
   8439c:	00877e40 	call	877e4 <__mulsi3>
   843a0:	8085883a 	add	r2,r16,r2
   843a4:	e0bffd15 	stw	r2,-12(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
   843a8:	e13ffd17 	ldw	r4,-12(fp)
   843ac:	d1670717 	ldw	r5,-25572(gp)
   843b0:	008053c0 	call	8053c <Read_Sector_Data>
   843b4:	1005003a 	cmpeq	r2,r2,zero
   843b8:	1000151e 	bne	r2,zero,84410 <sd_card_fclose+0x194>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
   843bc:	e0bfff0f 	ldh	r2,-4(fp)
   843c0:	00c002b4 	movhi	r3,10
   843c4:	18ce7f04 	addi	r3,r3,14844
   843c8:	100491ba 	slli	r2,r2,6
   843cc:	10c5883a 	add	r2,r2,r3
   843d0:	10800c04 	addi	r2,r2,48
   843d4:	1080000b 	ldhu	r2,0(r2)
   843d8:	113fffcc 	andi	r4,r2,65535
   843dc:	2120001c 	xori	r4,r4,32768
   843e0:	21200004 	addi	r4,r4,-32768
   843e4:	e0bfff0f 	ldh	r2,-4(fp)
   843e8:	100491ba 	slli	r2,r2,6
   843ec:	1007883a 	mov	r3,r2
   843f0:	008002b4 	movhi	r2,10
   843f4:	108e7f04 	addi	r2,r2,14844
   843f8:	188b883a 	add	r5,r3,r2
   843fc:	0080ac80 	call	80ac8 <Write_File_Record_At_Offset>
   84400:	1005003a 	cmpeq	r2,r2,zero
   84404:	1000021e 	bne	r2,zero,84410 <sd_card_fclose+0x194>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
   84408:	00804ec0 	call	804ec <Save_Modified_Sector>
   8440c:	e0bffe15 	stw	r2,-8(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
   84410:	e0bfff0f 	ldh	r2,-4(fp)
   84414:	00c002b4 	movhi	r3,10
   84418:	18ce7f04 	addi	r3,r3,14844
   8441c:	100491ba 	slli	r2,r2,6
   84420:	10c5883a 	add	r2,r2,r3
   84424:	10800f04 	addi	r2,r2,60
   84428:	10000015 	stw	zero,0(r2)
			result = true;
   8442c:	00800044 	movi	r2,1
   84430:	e0bffe15 	stw	r2,-8(fp)
        }
    }
    
    return result;
   84434:	e0bffe17 	ldw	r2,-8(fp)
}
   84438:	e037883a 	mov	sp,fp
   8443c:	dfc00217 	ldw	ra,8(sp)
   84440:	df000117 	ldw	fp,4(sp)
   84444:	dc000017 	ldw	r16,0(sp)
   84448:	dec00304 	addi	sp,sp,12
   8444c:	f800283a 	ret

00084450 <alt_ucosii_check_return_code>:
 */
 

 
void alt_ucosii_check_return_code(INT8U return_code)
{
   84450:	defffd04 	addi	sp,sp,-12
   84454:	dfc00215 	stw	ra,8(sp)
   84458:	df000115 	stw	fp,4(sp)
   8445c:	df000104 	addi	fp,sp,4
   84460:	e13fff05 	stb	r4,-4(fp)
  if(return_code != OS_NO_ERR)
   84464:	e0bfff03 	ldbu	r2,-4(fp)
   84468:	1005003a 	cmpeq	r2,r2,zero
   8446c:	1000041e 	bne	r2,zero,84480 <alt_ucosii_check_return_code+0x30>
  {
    OSSchedLock();  /* Disable Task Switching but still service other IRQs */
   84470:	00931440 	call	93144 <OSSchedLock>
    alt_ucosii_simple_error_handler(return_code);
   84474:	e13fff03 	ldbu	r4,-4(fp)
   84478:	00844940 	call	84494 <alt_ucosii_simple_error_handler>
    OSSchedUnlock(); /* Enable Task Switching */
   8447c:	00931d00 	call	931d0 <OSSchedUnlock>
  }
}
   84480:	e037883a 	mov	sp,fp
   84484:	dfc00117 	ldw	ra,4(sp)
   84488:	df000017 	ldw	fp,0(sp)
   8448c:	dec00204 	addi	sp,sp,8
   84490:	f800283a 	ret

00084494 <alt_ucosii_simple_error_handler>:
 * controls the flow that is taken from different errors occurring at different 
 * locations in the application code.
 */

void alt_ucosii_simple_error_handler(INT8U return_code)
{
   84494:	defffc04 	addi	sp,sp,-16
   84498:	dfc00315 	stw	ra,12(sp)
   8449c:	df000215 	stw	fp,8(sp)
   844a0:	df000204 	addi	fp,sp,8
   844a4:	e13ffe05 	stb	r4,-8(fp)
  printf("[Program Error]: See STDERR\n");
   844a8:	010002b4 	movhi	r4,10
   844ac:	213d9d04 	addi	r4,r4,-2444
   844b0:	0087aa40 	call	87aa4 <puts>
  switch (return_code) {
   844b4:	e0bffe03 	ldbu	r2,-8(fp)
   844b8:	e0bfff15 	stw	r2,-4(fp)
   844bc:	e0ffff17 	ldw	r3,-4(fp)
   844c0:	18801968 	cmpgeui	r2,r3,101
   844c4:	10011e1e 	bne	r2,zero,84940 <alt_ucosii_simple_error_handler+0x4ac>
   844c8:	e13fff17 	ldw	r4,-4(fp)
   844cc:	e13fff17 	ldw	r4,-4(fp)
   844d0:	2105883a 	add	r2,r4,r4
   844d4:	1087883a 	add	r3,r2,r2
   844d8:	00800234 	movhi	r2,8
   844dc:	10913b04 	addi	r2,r2,17644
   844e0:	1885883a 	add	r2,r3,r2
   844e4:	10800017 	ldw	r2,0(r2)
   844e8:	1000683a 	jmp	r2
   844ec:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   844f0:	00084760 	cmpeqi	zero,zero,8477
   844f4:	00084800 	call	8480 <OSCtxSw_SWITCH_PC+0x8440>
   844f8:	000847b0 	cmpltui	zero,zero,8478
   844fc:	00084788 	cmpgei	zero,zero,8478
   84500:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84504:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84508:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   8450c:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84510:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84514:	000847d8 	cmpnei	zero,zero,8479
   84518:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   8451c:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84520:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84524:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84528:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   8452c:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84530:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84534:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84538:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   8453c:	00084738 	rdprs	zero,zero,8476
   84540:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84544:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84548:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   8454c:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84550:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84554:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84558:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   8455c:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84560:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84564:	000848a0 	cmpeqi	zero,zero,8482
   84568:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   8456c:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84570:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84574:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84578:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   8457c:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84580:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84584:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84588:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   8458c:	00084680 	call	8468 <OSCtxSw_SWITCH_PC+0x8428>
   84590:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84594:	000846a8 	cmpgeui	zero,zero,8474
   84598:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   8459c:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   845a0:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   845a4:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   845a8:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   845ac:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   845b0:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   845b4:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   845b8:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   845bc:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   845c0:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   845c4:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   845c8:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   845cc:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   845d0:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   845d4:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   845d8:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   845dc:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   845e0:	00084850 	cmplti	zero,zero,8481
   845e4:	00084828 	cmpgeui	zero,zero,8480
   845e8:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   845ec:	00084878 	rdprs	zero,zero,8481
   845f0:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   845f4:	000846f0 	cmpltui	zero,zero,8475
   845f8:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   845fc:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84600:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84604:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84608:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   8460c:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84610:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84614:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84618:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   8461c:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84620:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84624:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84628:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   8462c:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84630:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84634:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84638:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   8463c:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84640:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84644:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84648:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   8464c:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84650:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84654:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84658:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   8465c:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84660:	000848f0 	cmpltui	zero,zero,8483
   84664:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84668:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   8466c:	00084918 	cmpnei	zero,zero,8484
   84670:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84674:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   84678:	00084940 	call	8494 <OSCtxSw_SWITCH_PC+0x8454>
   8467c:	000848c8 	cmpgei	zero,zero,8483
    case OS_PRIO_EXIST:
      fprintf(stderr, "Attempted to assign a task priority that is aready in use.\n");
   84680:	008002b4 	movhi	r2,10
   84684:	10871e04 	addi	r2,r2,7288
   84688:	10800017 	ldw	r2,0(r2)
   8468c:	11c00317 	ldw	r7,12(r2)
   84690:	010002b4 	movhi	r4,10
   84694:	213da404 	addi	r4,r4,-2416
   84698:	01400044 	movi	r5,1
   8469c:	01800ec4 	movi	r6,59
   846a0:	00879280 	call	87928 <fwrite>
      break;
   846a4:	0000af06 	br	84964 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_PRIO_INVALID:
      fprintf(stderr, "Specified a task priority higher than the allowed maximum.\n");
   846a8:	008002b4 	movhi	r2,10
   846ac:	10871e04 	addi	r2,r2,7288
   846b0:	10800017 	ldw	r2,0(r2)
   846b4:	11c00317 	ldw	r7,12(r2)
   846b8:	010002b4 	movhi	r4,10
   846bc:	213db304 	addi	r4,r4,-2356
   846c0:	01400044 	movi	r5,1
   846c4:	01800ec4 	movi	r6,59
   846c8:	00879280 	call	87928 <fwrite>
      fprintf(stderr, "Task can not be assigned a priority higher than %d\n",OS_LOWEST_PRIO);
   846cc:	008002b4 	movhi	r2,10
   846d0:	10871e04 	addi	r2,r2,7288
   846d4:	10800017 	ldw	r2,0(r2)
   846d8:	11000317 	ldw	r4,12(r2)
   846dc:	014002b4 	movhi	r5,10
   846e0:	297dc204 	addi	r5,r5,-2296
   846e4:	01800504 	movi	r6,20
   846e8:	008781c0 	call	8781c <fprintf>
      break;
   846ec:	00009d06 	br	84964 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_NO_MORE_TCB:
      fprintf(stderr, "Task Control Blocks have been exhausted\n");
   846f0:	008002b4 	movhi	r2,10
   846f4:	10871e04 	addi	r2,r2,7288
   846f8:	10800017 	ldw	r2,0(r2)
   846fc:	11c00317 	ldw	r7,12(r2)
   84700:	010002b4 	movhi	r4,10
   84704:	213dcf04 	addi	r4,r4,-2244
   84708:	01400044 	movi	r5,1
   8470c:	01800a04 	movi	r6,40
   84710:	00879280 	call	87928 <fwrite>
      fprintf(stderr, "The current max number of task is %d\n",OS_MAX_TASKS);
   84714:	008002b4 	movhi	r2,10
   84718:	10871e04 	addi	r2,r2,7288
   8471c:	10800017 	ldw	r2,0(r2)
   84720:	11000317 	ldw	r4,12(r2)
   84724:	014002b4 	movhi	r5,10
   84728:	297dda04 	addi	r5,r5,-2200
   8472c:	01800284 	movi	r6,10
   84730:	008781c0 	call	8781c <fprintf>
      break;
   84734:	00008b06 	br	84964 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_MBOX_FULL:
      fprintf(stderr, "Attempted a Post to a Mailbox that already contains a message\n");
   84738:	008002b4 	movhi	r2,10
   8473c:	10871e04 	addi	r2,r2,7288
   84740:	10800017 	ldw	r2,0(r2)
   84744:	11c00317 	ldw	r7,12(r2)
   84748:	010002b4 	movhi	r4,10
   8474c:	213de404 	addi	r4,r4,-2160
   84750:	01400044 	movi	r5,1
   84754:	01800f84 	movi	r6,62
   84758:	00879280 	call	87928 <fwrite>
      break;
   8475c:	00008106 	br	84964 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_ERR_EVENT_TYPE:
      fprintf(stderr, "Attempted to access a resource that doesn't match the required data type\n");
   84760:	008002b4 	movhi	r2,10
   84764:	10871e04 	addi	r2,r2,7288
   84768:	10800017 	ldw	r2,0(r2)
   8476c:	11c00317 	ldw	r7,12(r2)
   84770:	010002b4 	movhi	r4,10
   84774:	213df404 	addi	r4,r4,-2096
   84778:	01400044 	movi	r5,1
   8477c:	01801244 	movi	r6,73
   84780:	00879280 	call	87928 <fwrite>
      break;
   84784:	00007706 	br	84964 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_ERR_PEVENT_NULL:
      fprintf(stderr, "Attempting access a resource that is pointing to NULL\n");
   84788:	008002b4 	movhi	r2,10
   8478c:	10871e04 	addi	r2,r2,7288
   84790:	10800017 	ldw	r2,0(r2)
   84794:	11c00317 	ldw	r7,12(r2)
   84798:	010002b4 	movhi	r4,10
   8479c:	213e0704 	addi	r4,r4,-2020
   847a0:	01400044 	movi	r5,1
   847a4:	01800d84 	movi	r6,54
   847a8:	00879280 	call	87928 <fwrite>
      break;
   847ac:	00006d06 	br	84964 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_ERR_POST_NULL_PTR:
      fprintf(stderr, "Attempted to Post a NULL to a resource. \n");
   847b0:	008002b4 	movhi	r2,10
   847b4:	10871e04 	addi	r2,r2,7288
   847b8:	10800017 	ldw	r2,0(r2)
   847bc:	11c00317 	ldw	r7,12(r2)
   847c0:	010002b4 	movhi	r4,10
   847c4:	213e1504 	addi	r4,r4,-1964
   847c8:	01400044 	movi	r5,1
   847cc:	01800a44 	movi	r6,41
   847d0:	00879280 	call	87928 <fwrite>
      break;
   847d4:	00006306 	br	84964 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_TIMEOUT:
      fprintf(stderr, "Resource not received in specified time\n");
   847d8:	008002b4 	movhi	r2,10
   847dc:	10871e04 	addi	r2,r2,7288
   847e0:	10800017 	ldw	r2,0(r2)
   847e4:	11c00317 	ldw	r7,12(r2)
   847e8:	010002b4 	movhi	r4,10
   847ec:	213e2004 	addi	r4,r4,-1920
   847f0:	01400044 	movi	r5,1
   847f4:	01800a04 	movi	r6,40
   847f8:	00879280 	call	87928 <fwrite>
      break;
   847fc:	00005906 	br	84964 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_ERR_PEND_ISR:
      fprintf(stderr, "Attempting to pending for a resource in an ISR\n");
   84800:	008002b4 	movhi	r2,10
   84804:	10871e04 	addi	r2,r2,7288
   84808:	10800017 	ldw	r2,0(r2)
   8480c:	11c00317 	ldw	r7,12(r2)
   84810:	010002b4 	movhi	r4,10
   84814:	213e2b04 	addi	r4,r4,-1876
   84818:	01400044 	movi	r5,1
   8481c:	01800bc4 	movi	r6,47
   84820:	00879280 	call	87928 <fwrite>
      break;
   84824:	00004f06 	br	84964 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_TASK_DEL_IDLE:
      fprintf(stderr, "Attempted to delete the IDLE task\n");
   84828:	008002b4 	movhi	r2,10
   8482c:	10871e04 	addi	r2,r2,7288
   84830:	10800017 	ldw	r2,0(r2)
   84834:	11c00317 	ldw	r7,12(r2)
   84838:	010002b4 	movhi	r4,10
   8483c:	213e3704 	addi	r4,r4,-1828
   84840:	01400044 	movi	r5,1
   84844:	01800884 	movi	r6,34
   84848:	00879280 	call	87928 <fwrite>
      break;
   8484c:	00004506 	br	84964 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_TASK_DEL_ERR:
      fprintf(stderr, "Attempted to delete a task that does not exist\n");
   84850:	008002b4 	movhi	r2,10
   84854:	10871e04 	addi	r2,r2,7288
   84858:	10800017 	ldw	r2,0(r2)
   8485c:	11c00317 	ldw	r7,12(r2)
   84860:	010002b4 	movhi	r4,10
   84864:	213e4004 	addi	r4,r4,-1792
   84868:	01400044 	movi	r5,1
   8486c:	01800bc4 	movi	r6,47
   84870:	00879280 	call	87928 <fwrite>
      break;
   84874:	00003b06 	br	84964 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_TASK_DEL_ISR:
      fprintf(stderr, "Attempted to delete a task from an ISR\n");
   84878:	008002b4 	movhi	r2,10
   8487c:	10871e04 	addi	r2,r2,7288
   84880:	10800017 	ldw	r2,0(r2)
   84884:	11c00317 	ldw	r7,12(r2)
   84888:	010002b4 	movhi	r4,10
   8488c:	213e4c04 	addi	r4,r4,-1744
   84890:	01400044 	movi	r5,1
   84894:	018009c4 	movi	r6,39
   84898:	00879280 	call	87928 <fwrite>
      break;
   8489c:	00003106 	br	84964 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_Q_FULL:
      fprintf(stderr, "Attempted to post to a full message queue\n");
   848a0:	008002b4 	movhi	r2,10
   848a4:	10871e04 	addi	r2,r2,7288
   848a8:	10800017 	ldw	r2,0(r2)
   848ac:	11c00317 	ldw	r7,12(r2)
   848b0:	010002b4 	movhi	r4,10
   848b4:	213e5604 	addi	r4,r4,-1704
   848b8:	01400044 	movi	r5,1
   848bc:	01800a84 	movi	r6,42
   848c0:	00879280 	call	87928 <fwrite>
      break;
   848c4:	00002706 	br	84964 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_ERR_NOT_MUTEX_OWNER:
      fprintf(stderr, "Attempted to post a mutex that is not owned by the task\n");
   848c8:	008002b4 	movhi	r2,10
   848cc:	10871e04 	addi	r2,r2,7288
   848d0:	10800017 	ldw	r2,0(r2)
   848d4:	11c00317 	ldw	r7,12(r2)
   848d8:	010002b4 	movhi	r4,10
   848dc:	213e6104 	addi	r4,r4,-1660
   848e0:	01400044 	movi	r5,1
   848e4:	01800e04 	movi	r6,56
   848e8:	00879280 	call	87928 <fwrite>
      break;
   848ec:	00001d06 	br	84964 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_MEM_NO_FREE_BLKS:
      fprintf(stderr, "the memory partition doesnt contain any more memory blocks to allocate\n");
   848f0:	008002b4 	movhi	r2,10
   848f4:	10871e04 	addi	r2,r2,7288
   848f8:	10800017 	ldw	r2,0(r2)
   848fc:	11c00317 	ldw	r7,12(r2)
   84900:	010002b4 	movhi	r4,10
   84904:	213e7004 	addi	r4,r4,-1600
   84908:	01400044 	movi	r5,1
   8490c:	018011c4 	movi	r6,71
   84910:	00879280 	call	87928 <fwrite>
      break;
   84914:	00001306 	br	84964 <alt_ucosii_simple_error_handler+0x4d0>
    case OS_MEM_INVALID_PMEM:
      fprintf(stderr, "pmem is a NULL pointer\n");
   84918:	008002b4 	movhi	r2,10
   8491c:	10871e04 	addi	r2,r2,7288
   84920:	10800017 	ldw	r2,0(r2)
   84924:	11c00317 	ldw	r7,12(r2)
   84928:	010002b4 	movhi	r4,10
   8492c:	213e8204 	addi	r4,r4,-1528
   84930:	01400044 	movi	r5,1
   84934:	018005c4 	movi	r6,23
   84938:	00879280 	call	87928 <fwrite>
      break;
   8493c:	00000906 	br	84964 <alt_ucosii_simple_error_handler+0x4d0>
    default:
      fprintf(stderr, "Unknown Error\n");
   84940:	008002b4 	movhi	r2,10
   84944:	10871e04 	addi	r2,r2,7288
   84948:	10800017 	ldw	r2,0(r2)
   8494c:	11c00317 	ldw	r7,12(r2)
   84950:	010002b4 	movhi	r4,10
   84954:	213e8804 	addi	r4,r4,-1504
   84958:	01400044 	movi	r5,1
   8495c:	01800384 	movi	r6,14
   84960:	00879280 	call	87928 <fwrite>
      break;
  }
//  fprintf(stderr, "Program is terminating.\n");
//  exit(0);
}
   84964:	e037883a 	mov	sp,fp
   84968:	dfc00117 	ldw	ra,4(sp)
   8496c:	df000017 	ldw	fp,0(sp)
   84970:	dec00204 	addi	sp,sp,8
   84974:	f800283a 	ret

00084978 <initialize_task>:
void *ReadQueue2[QUEUE_LEN];

void *WriteQueue[QUEUE_LEN]; 

// Initialization task for uCOS
void initialize_task(void* pdata) {
   84978:	defffc04 	addi	sp,sp,-16
   8497c:	dfc00315 	stw	ra,12(sp)
   84980:	df000215 	stw	fp,8(sp)
   84984:	df000204 	addi	fp,sp,8
   84988:	e13fff15 	stw	r4,-4(fp)
	INT8U return_code = OS_NO_ERR;
   8498c:	e03ffe05 	stb	zero,-8(fp)

	// Initialize statistic counters in OS
	OSStatInit();
   84990:	00933240 	call	93324 <OSStatInit>

	// create os data structures
	init_OS_data_structs();
   84994:	0084aac0 	call	84aac <init_OS_data_structs>

	// create the tasks
	init_create_tasks();
   84998:	0084c9c0 	call	84c9c <init_create_tasks>

	// This task is deleted because there is no need for it to run again
	return_code = OSTaskDel(OS_PRIO_SELF);
   8499c:	01003fc4 	movi	r4,255
   849a0:	009b2c00 	call	9b2c0 <OSTaskDel>
   849a4:	e0bffe05 	stb	r2,-8(fp)
	alt_ucosii_check_return_code(return_code);
   849a8:	e13ffe03 	ldbu	r4,-8(fp)
   849ac:	00844500 	call	84450 <alt_ucosii_check_return_code>

	while (1);
   849b0:	003fff06 	br	849b0 <initialize_task+0x38>

000849b4 <main>:
}

// The main function, it initializes the hardware, and create the initialization task,
// then it starts uCOS, and never returns
int main(void) {
   849b4:	defff804 	addi	sp,sp,-32
   849b8:	dfc00715 	stw	ra,28(sp)
   849bc:	df000615 	stw	fp,24(sp)
   849c0:	df000604 	addi	fp,sp,24
	INT8U return_code = OS_NO_ERR;
   849c4:	e03fff05 	stb	zero,-4(fp)
	
	printf("Start main...\n");
   849c8:	010002b4 	movhi	r4,10
   849cc:	213e8c04 	addi	r4,r4,-1488
   849d0:	0087aa40 	call	87aa4 <puts>

	init_button_irq();
   849d4:	00803dc0 	call	803dc <init_button_irq>
	printf("PB initialized...\n");
   849d8:	010002b4 	movhi	r4,10
   849dc:	213e9004 	addi	r4,r4,-1472
   849e0:	0087aa40 	call	87aa4 <puts>

	seg7_show(SEG7_DISPLAY_0_BASE,SEG7_VALUE);
   849e4:	00c00434 	movhi	r3,16
   849e8:	18c52a04 	addi	r3,r3,5288
   849ec:	00844474 	movhi	r2,4369
   849f0:	10844444 	addi	r2,r2,4369
   849f4:	18800035 	stwio	r2,0(r3)
	printf("SEG7 initialized...\n");
   849f8:	010002b4 	movhi	r4,10
   849fc:	213e9504 	addi	r4,r4,-1452
   84a00:	0087aa40 	call	87aa4 <puts>

    sd_card_open_dev();
   84a04:	0082ea00 	call	82ea0 <sd_card_open_dev>
	printf("Opened SD card device...\n");
   84a08:	010002b4 	movhi	r4,10
   84a0c:	213e9a04 	addi	r4,r4,-1432
   84a10:	0087aa40 	call	87aa4 <puts>

	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
   84a14:	00c00434 	movhi	r3,16
   84a18:	18c50004 	addi	r3,r3,5120
   84a1c:	00800044 	movi	r2,1
   84a20:	18800035 	stwio	r2,0(r3)
	printf("Reset performance counter...\n");
   84a24:	010002b4 	movhi	r4,10
   84a28:	213ea104 	addi	r4,r4,-1404
   84a2c:	0087aa40 	call	87aa4 <puts>

	OSInit();
   84a30:	0092f740 	call	92f74 <OSInit>

	return_code = OSTaskCreateExt(initialize_task,
   84a34:	018002f4 	movhi	r6,11
   84a38:	318e2a04 	addi	r6,r6,14504
   84a3c:	00800184 	movi	r2,6
   84a40:	d8800015 	stw	r2,0(sp)
   84a44:	008002f4 	movhi	r2,11
   84a48:	10862a04 	addi	r2,r2,6312
   84a4c:	d8800115 	stw	r2,4(sp)
   84a50:	00820004 	movi	r2,2048
   84a54:	d8800215 	stw	r2,8(sp)
   84a58:	d8000315 	stw	zero,12(sp)
   84a5c:	008000c4 	movi	r2,3
   84a60:	d8800415 	stw	r2,16(sp)
   84a64:	01000234 	movhi	r4,8
   84a68:	21125e04 	addi	r4,r4,18808
   84a6c:	000b883a 	mov	r5,zero
   84a70:	01c00184 	movi	r7,6
   84a74:	009b0c00 	call	9b0c0 <OSTaskCreateExt>
   84a78:	e0bfff05 	stb	r2,-4(fp)
					INITIALIZE_TASK_PRIORITY,
					initialize_task_stk,
					TASK_STACKSIZE,
					NULL,
					OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);
	alt_ucosii_check_return_code(return_code);
   84a7c:	e13fff03 	ldbu	r4,-4(fp)
   84a80:	00844500 	call	84450 <alt_ucosii_check_return_code>
	printf("Starting uCOS...\n");
   84a84:	010002b4 	movhi	r4,10
   84a88:	213ea904 	addi	r4,r4,-1372
   84a8c:	0087aa40 	call	87aa4 <puts>

	OSStart();
   84a90:	00932b40 	call	932b4 <OSStart>
	return 0;
   84a94:	0005883a 	mov	r2,zero
}
   84a98:	e037883a 	mov	sp,fp
   84a9c:	dfc00117 	ldw	ra,4(sp)
   84aa0:	df000017 	ldw	fp,0(sp)
   84aa4:	dec00204 	addi	sp,sp,8
   84aa8:	f800283a 	ret

00084aac <init_OS_data_structs>:

/* This function simply creates a message queue and a semaphore
 */

int init_OS_data_structs(void)
{
   84aac:	defffb04 	addi	sp,sp,-20
   84ab0:	dfc00415 	stw	ra,16(sp)
   84ab4:	df000315 	stw	fp,12(sp)
   84ab8:	dc000215 	stw	r16,8(sp)
   84abc:	df000204 	addi	fp,sp,8
	int i;
	INT8U return_code = OS_NO_ERR;
   84ac0:	e03fff05 	stb	zero,-4(fp)

	printf("Init data structs...\n");
   84ac4:	010002b4 	movhi	r4,10
   84ac8:	213eae04 	addi	r4,r4,-1352
   84acc:	0087aa40 	call	87aa4 <puts>

	for (i = 0; i < NUM_PB_BUTTON; i++)
   84ad0:	e03ffe15 	stw	zero,-8(fp)
   84ad4:	00000d06 	br	84b0c <init_OS_data_structs+0x60>
		PBSemaphore[i] = OSSemCreate(0);
   84ad8:	e43ffe17 	ldw	r16,-8(fp)
   84adc:	0009883a 	mov	r4,zero
   84ae0:	0099e700 	call	99e70 <OSSemCreate>
   84ae4:	1009883a 	mov	r4,r2
   84ae8:	00c002b4 	movhi	r3,10
   84aec:	18ddd504 	addi	r3,r3,30548
   84af0:	8405883a 	add	r2,r16,r16
   84af4:	1085883a 	add	r2,r2,r2
   84af8:	10c5883a 	add	r2,r2,r3
   84afc:	11000015 	stw	r4,0(r2)
	int i;
	INT8U return_code = OS_NO_ERR;

	printf("Init data structs...\n");

	for (i = 0; i < NUM_PB_BUTTON; i++)
   84b00:	e0bffe17 	ldw	r2,-8(fp)
   84b04:	10800044 	addi	r2,r2,1
   84b08:	e0bffe15 	stw	r2,-8(fp)
   84b0c:	e0bffe17 	ldw	r2,-8(fp)
   84b10:	10800110 	cmplti	r2,r2,4
   84b14:	103ff01e 	bne	r2,zero,84ad8 <init_OS_data_structs+0x2c>
		PBSemaphore[i] = OSSemCreate(0);
	
	YMailbox = OSMboxCreate((void *)0);
   84b18:	0009883a 	mov	r4,zero
   84b1c:	00962e00 	call	962e0 <OSMboxCreate>
   84b20:	1007883a 	mov	r3,r2
   84b24:	008002b4 	movhi	r2,10
   84b28:	108e3304 	addi	r2,r2,14540
   84b2c:	10c00015 	stw	r3,0(r2)
	YImageWidthMailbox = OSMboxCreate((void *)0);
   84b30:	0009883a 	mov	r4,zero
   84b34:	00962e00 	call	962e0 <OSMboxCreate>
   84b38:	1007883a 	mov	r3,r2
   84b3c:	008002b4 	movhi	r2,10
   84b40:	108e2b04 	addi	r2,r2,14508
   84b44:	10c00015 	stw	r3,0(r2)
	YImageHeightMailbox = OSMboxCreate((void *)0);
   84b48:	0009883a 	mov	r4,zero
   84b4c:	00962e00 	call	962e0 <OSMboxCreate>
   84b50:	1007883a 	mov	r3,r2
   84b54:	008002b4 	movhi	r2,10
   84b58:	108e2c04 	addi	r2,r2,14512
   84b5c:	10c00015 	stw	r3,0(r2)
	ReadImageWidthMailbox = OSMboxCreate((void *)0);
   84b60:	0009883a 	mov	r4,zero
   84b64:	00962e00 	call	962e0 <OSMboxCreate>
   84b68:	1007883a 	mov	r3,r2
   84b6c:	008002b4 	movhi	r2,10
   84b70:	108e3404 	addi	r2,r2,14544
   84b74:	10c00015 	stw	r3,0(r2)
	ReadImageHeightMailbox = OSMboxCreate((void *)0);
   84b78:	0009883a 	mov	r4,zero
   84b7c:	00962e00 	call	962e0 <OSMboxCreate>
   84b80:	1007883a 	mov	r3,r2
   84b84:	008002b4 	movhi	r2,10
   84b88:	108e2e04 	addi	r2,r2,14520
   84b8c:	10c00015 	stw	r3,0(r2)
	WriteImageWidthMailbox = OSMboxCreate((void *)0);
   84b90:	0009883a 	mov	r4,zero
   84b94:	00962e00 	call	962e0 <OSMboxCreate>
   84b98:	1007883a 	mov	r3,r2
   84b9c:	008002b4 	movhi	r2,10
   84ba0:	108e3204 	addi	r2,r2,14536
   84ba4:	10c00015 	stw	r3,0(r2)
	WriteImageHeightMailbox = OSMboxCreate((void *)0);
   84ba8:	0009883a 	mov	r4,zero
   84bac:	00962e00 	call	962e0 <OSMboxCreate>
   84bb0:	1007883a 	mov	r3,r2
   84bb4:	008002b4 	movhi	r2,10
   84bb8:	108e2d04 	addi	r2,r2,14516
   84bbc:	10c00015 	stw	r3,0(r2)

	MemoryPartition = OSMemCreate(&line_buf[0][0], 7, LINE_LEN, &return_code);
   84bc0:	010002b4 	movhi	r4,10
   84bc4:	2110bf04 	addi	r4,r4,17148
   84bc8:	e1ffff04 	addi	r7,fp,-4
   84bcc:	014001c4 	movi	r5,7
   84bd0:	0180a004 	movi	r6,640
   84bd4:	0096ec80 	call	96ec8 <OSMemCreate>
   84bd8:	1007883a 	mov	r3,r2
   84bdc:	008002b4 	movhi	r2,10
   84be0:	108e2804 	addi	r2,r2,14496
   84be4:	10c00015 	stw	r3,0(r2)

	SDReadQueue[0] = OSQCreate(&ReadQueue[0], QUEUE_LEN);
   84be8:	010002b4 	movhi	r4,10
   84bec:	21103f04 	addi	r4,r4,16636
   84bf0:	01402004 	movi	r5,128
   84bf4:	0098bd00 	call	98bd0 <OSQCreate>
   84bf8:	1007883a 	mov	r3,r2
   84bfc:	008002b4 	movhi	r2,10
   84c00:	108e2f04 	addi	r2,r2,14524
   84c04:	10c00015 	stw	r3,0(r2)
	//SDReadQueue2 = OSQCreate(&ReadQueue[1], QUEUE_LEN);
	SDReadQueue[1] = OSQCreate(&ReadQueue2[0], QUEUE_LEN);
   84c08:	010002b4 	movhi	r4,10
   84c0c:	210fbf04 	addi	r4,r4,16124
   84c10:	01402004 	movi	r5,128
   84c14:	0098bd00 	call	98bd0 <OSQCreate>
   84c18:	1007883a 	mov	r3,r2
   84c1c:	008002b4 	movhi	r2,10
   84c20:	108e2f04 	addi	r2,r2,14524
   84c24:	10c00115 	stw	r3,4(r2)

	SDWriteQueue = OSQCreate(&WriteQueue[0], QUEUE_LEN);
   84c28:	010002b4 	movhi	r4,10
   84c2c:	21151f04 	addi	r4,r4,21628
   84c30:	01402004 	movi	r5,128
   84c34:	0098bd00 	call	98bd0 <OSQCreate>
   84c38:	1007883a 	mov	r3,r2
   84c3c:	008002b4 	movhi	r2,10
   84c40:	108e3104 	addi	r2,r2,14532
   84c44:	10c00015 	stw	r3,0(r2)
	
	SDCardFlag = OSFlagCreate(0, &return_code);
   84c48:	e17fff04 	addi	r5,fp,-4
   84c4c:	0009883a 	mov	r4,zero
   84c50:	0094c340 	call	94c34 <OSFlagCreate>
   84c54:	1007883a 	mov	r3,r2
   84c58:	008002b4 	movhi	r2,10
   84c5c:	108e2a04 	addi	r2,r2,14504
   84c60:	10c00015 	stw	r3,0(r2)
	//SDReadFlag = OSFlagCreate(0, &return_code);
	
	SDMutex = OSMutexCreate(SD_MUTEX_PRIORITY, &return_code);
   84c64:	e17fff04 	addi	r5,fp,-4
   84c68:	01000284 	movi	r4,10
   84c6c:	00978ac0 	call	978ac <OSMutexCreate>
   84c70:	1007883a 	mov	r3,r2
   84c74:	008002b4 	movhi	r2,10
   84c78:	108e2904 	addi	r2,r2,14500
   84c7c:	10c00015 	stw	r3,0(r2)

	return 0;
   84c80:	0005883a 	mov	r2,zero
}
   84c84:	e037883a 	mov	sp,fp
   84c88:	dfc00217 	ldw	ra,8(sp)
   84c8c:	df000117 	ldw	fp,4(sp)
   84c90:	dc000017 	ldw	r16,0(sp)
   84c94:	dec00304 	addi	sp,sp,12
   84c98:	f800283a 	ret

00084c9c <init_create_tasks>:

// This function creates the first task in uCOS
int init_create_tasks(void) {
   84c9c:	defff804 	addi	sp,sp,-32
   84ca0:	dfc00715 	stw	ra,28(sp)
   84ca4:	df000615 	stw	fp,24(sp)
   84ca8:	df000604 	addi	fp,sp,24
	INT8U return_code = OS_NO_ERR;
   84cac:	e03fff05 	stb	zero,-4(fp)

	printf("Creating task launcher...\n");
   84cb0:	010002b4 	movhi	r4,10
   84cb4:	213eb404 	addi	r4,r4,-1328
   84cb8:	0087aa40 	call	87aa4 <puts>
	return_code = OSTaskCreateExt(task_launcher,
   84cbc:	018002f4 	movhi	r6,11
   84cc0:	31964504 	addi	r6,r6,22804
   84cc4:	00800444 	movi	r2,17
   84cc8:	d8800015 	stw	r2,0(sp)
   84ccc:	008002f4 	movhi	r2,11
   84cd0:	108e4504 	addi	r2,r2,14612
   84cd4:	d8800115 	stw	r2,4(sp)
   84cd8:	00820004 	movi	r2,2048
   84cdc:	d8800215 	stw	r2,8(sp)
   84ce0:	d8000315 	stw	zero,12(sp)
   84ce4:	d8000415 	stw	zero,16(sp)
   84ce8:	01000234 	movhi	r4,8
   84cec:	211d0004 	addi	r4,r4,29696
   84cf0:	000b883a 	mov	r5,zero
   84cf4:	01c00444 	movi	r7,17
   84cf8:	009b0c00 	call	9b0c0 <OSTaskCreateExt>
   84cfc:	e0bfff05 	stb	r2,-4(fp)
					TASK_LAUNCHER_PRIORITY,
					task_launcher_stk,
					TASK_STACKSIZE,
					NULL,
					0);
	alt_ucosii_check_return_code(return_code);
   84d00:	e13fff03 	ldbu	r4,-4(fp)
   84d04:	00844500 	call	84450 <alt_ucosii_check_return_code>

	return 0;
   84d08:	0005883a 	mov	r2,zero
}
   84d0c:	e037883a 	mov	sp,fp
   84d10:	dfc00117 	ldw	ra,4(sp)
   84d14:	df000017 	ldw	fp,0(sp)
   84d18:	dec00204 	addi	sp,sp,8
   84d1c:	f800283a 	ret

00084d20 <SD_presence_detect_task>:
	int ver_resolution;
	int num_color_in_palette;
	int important_color;
} bmp_header_struct;

void SD_presence_detect_task(void* pdata) {
   84d20:	defff704 	addi	sp,sp,-36
   84d24:	dfc00815 	stw	ra,32(sp)
   84d28:	df000715 	stw	fp,28(sp)
   84d2c:	df000704 	addi	fp,sp,28
   84d30:	e13ffe15 	stw	r4,-8(fp)
	INT8U return_code = OS_NO_ERR;
   84d34:	e03ffa85 	stb	zero,-22(fp)
	OS_FLAGS SD_flag_value;
	char filename[13];
	int status;

	while (1) {
		SD_flag_value = OSFlagQuery(SDCardFlag, &return_code);
   84d38:	d1270d17 	ldw	r4,-25548(gp)
   84d3c:	e17ffa84 	addi	r5,fp,-22
   84d40:	0095d040 	call	95d04 <OSFlagQuery>
   84d44:	e0bffa0d 	sth	r2,-24(fp)
		if ((SD_flag_value & SD_PRESENCE_FLAG) == 0) {
   84d48:	e0bffa0b 	ldhu	r2,-24(fp)
   84d4c:	1080004c 	andi	r2,r2,1
   84d50:	1004c03a 	cmpne	r2,r2,zero
   84d54:	10003c1e 	bne	r2,zero,84e48 <SD_presence_detect_task+0x128>
			if (sd_card_is_Present()) {
   84d58:	0082ef80 	call	82ef8 <sd_card_is_Present>
   84d5c:	1005003a 	cmpeq	r2,r2,zero
   84d60:	1000471e 	bne	r2,zero,84e80 <SD_presence_detect_task+0x160>
				printf("SD card is inserted\n");
   84d64:	010002b4 	movhi	r4,10
   84d68:	213ebb04 	addi	r4,r4,-1300
   84d6c:	0087aa40 	call	87aa4 <puts>
				OSFlagPost(SDCardFlag, SD_PRESENCE_FLAG, OS_FLAG_SET, &return_code);
   84d70:	d1270d17 	ldw	r4,-25548(gp)
   84d74:	e1fffa84 	addi	r7,fp,-22
   84d78:	01400044 	movi	r5,1
   84d7c:	01800044 	movi	r6,1
   84d80:	009595c0 	call	9595c <OSFlagPost>
				alt_ucosii_check_return_code(return_code);
   84d84:	e0bffa83 	ldbu	r2,-22(fp)
   84d88:	11003fcc 	andi	r4,r2,255
   84d8c:	00844500 	call	84450 <alt_ucosii_check_return_code>
			
				if (sd_card_is_FAT16()) {
   84d90:	0082f440 	call	82f44 <sd_card_is_FAT16>
   84d94:	1005003a 	cmpeq	r2,r2,zero
   84d98:	1000391e 	bne	r2,zero,84e80 <SD_presence_detect_task+0x160>
					printf("Valid filesystem is detected on SD card\n");
   84d9c:	010002b4 	movhi	r4,10
   84da0:	213ec004 	addi	r4,r4,-1280
   84da4:	0087aa40 	call	87aa4 <puts>
					OSFlagPost(SDCardFlag, SD_FILESYSTEM_FLAG, OS_FLAG_SET, &return_code);
   84da8:	d1270d17 	ldw	r4,-25548(gp)
   84dac:	e1fffa84 	addi	r7,fp,-22
   84db0:	01400084 	movi	r5,2
   84db4:	01800044 	movi	r6,1
   84db8:	009595c0 	call	9595c <OSFlagPost>
					alt_ucosii_check_return_code(return_code);	
   84dbc:	e0bffa83 	ldbu	r2,-22(fp)
   84dc0:	11003fcc 	andi	r4,r2,255
   84dc4:	00844500 	call	84450 <alt_ucosii_check_return_code>
					
					status = sd_card_find_first(".", filename);
   84dc8:	e17ffac4 	addi	r5,fp,-21
   84dcc:	010002b4 	movhi	r4,10
   84dd0:	213eca04 	addi	r4,r4,-1240
   84dd4:	0082fd00 	call	82fd0 <sd_card_find_first>
   84dd8:	10bfffcc 	andi	r2,r2,65535
   84ddc:	10a0001c 	xori	r2,r2,32768
   84de0:	10a00004 	addi	r2,r2,-32768
   84de4:	e0bff915 	stw	r2,-28(fp)
					switch (status) {
   84de8:	e0bff917 	ldw	r2,-28(fp)
   84dec:	e0bfff15 	stw	r2,-4(fp)
   84df0:	e0ffff17 	ldw	r3,-4(fp)
   84df4:	18800060 	cmpeqi	r2,r3,1
   84df8:	10000b1e 	bne	r2,zero,84e28 <SD_presence_detect_task+0x108>
   84dfc:	e0ffff17 	ldw	r3,-4(fp)
   84e00:	188000a0 	cmpeqi	r2,r3,2
   84e04:	10000c1e 	bne	r2,zero,84e38 <SD_presence_detect_task+0x118>
   84e08:	e0ffff17 	ldw	r3,-4(fp)
   84e0c:	1805003a 	cmpeq	r2,r3,zero
   84e10:	1000011e 	bne	r2,zero,84e18 <SD_presence_detect_task+0xf8>
   84e14:	00001a06 	br	84e80 <SD_presence_detect_task+0x160>
	                    case 0: printf("Success\n"); break;
   84e18:	010002b4 	movhi	r4,10
   84e1c:	213ecb04 	addi	r4,r4,-1236
   84e20:	0087aa40 	call	87aa4 <puts>
   84e24:	00001606 	br	84e80 <SD_presence_detect_task+0x160>
	                    case 1: printf("Invalid directory\n"); break;
   84e28:	010002b4 	movhi	r4,10
   84e2c:	213ecd04 	addi	r4,r4,-1228
   84e30:	0087aa40 	call	87aa4 <puts>
   84e34:	00001206 	br	84e80 <SD_presence_detect_task+0x160>
	                    case 2: printf("No card or incorrect FS\n"); break;
   84e38:	010002b4 	movhi	r4,10
   84e3c:	213ed204 	addi	r4,r4,-1208
   84e40:	0087aa40 	call	87aa4 <puts>
   84e44:	00000e06 	br	84e80 <SD_presence_detect_task+0x160>
	                }
				}
			}
		} else {
			if (!sd_card_is_Present()) {
   84e48:	0082ef80 	call	82ef8 <sd_card_is_Present>
   84e4c:	1004c03a 	cmpne	r2,r2,zero
   84e50:	10000b1e 	bne	r2,zero,84e80 <SD_presence_detect_task+0x160>
				printf("SD card is removed\n");
   84e54:	010002b4 	movhi	r4,10
   84e58:	213ed804 	addi	r4,r4,-1184
   84e5c:	0087aa40 	call	87aa4 <puts>
				
				// clear all the flags
				OSFlagPost(SDCardFlag, 0xFF, OS_FLAG_CLR, &return_code);
   84e60:	d1270d17 	ldw	r4,-25548(gp)
   84e64:	e1fffa84 	addi	r7,fp,-22
   84e68:	01403fc4 	movi	r5,255
   84e6c:	000d883a 	mov	r6,zero
   84e70:	009595c0 	call	9595c <OSFlagPost>
				alt_ucosii_check_return_code(return_code);
   84e74:	e0bffa83 	ldbu	r2,-22(fp)
   84e78:	11003fcc 	andi	r4,r2,255
   84e7c:	00844500 	call	84450 <alt_ucosii_check_return_code>
			}
		}

		// Check if SD card is present every 500ms
		OSTimeDlyHMSM(0, 0, 0, 500);
   84e80:	0009883a 	mov	r4,zero
   84e84:	000b883a 	mov	r5,zero
   84e88:	000d883a 	mov	r6,zero
   84e8c:	01c07d04 	movi	r7,500
   84e90:	009c5040 	call	9c504 <OSTimeDlyHMSM>
	}
   84e94:	003fa806 	br	84d38 <SD_presence_detect_task+0x18>

00084e98 <SD_read_task>:
}



void SD_read_task(void *pdata) {
   84e98:	deffeb04 	addi	sp,sp,-84
   84e9c:	dfc01415 	stw	ra,80(sp)
   84ea0:	df001315 	stw	fp,76(sp)
   84ea4:	df001304 	addi	fp,sp,76
   84ea8:	e13fff15 	stw	r4,-4(fp)
	INT8U return_code = OS_NO_ERR;
   84eac:	e03ff105 	stb	zero,-60(fp)
	short int file_handle;
	unsigned short int data;
	int file_opened = 0;
   84eb0:	e03fef15 	stw	zero,-68(fp)
	int image_size;
	bmp_header_struct bmp_header;

	while (1) {
		OSFlagPend(SDCardFlag, SD_PRESENCE_FLAG | SD_FILESYSTEM_FLAG | SD_READ_NEED_FILL, OS_FLAG_WAIT_SET_ALL, 0, &return_code);
   84eb4:	d1270d17 	ldw	r4,-25548(gp)
   84eb8:	e0bff104 	addi	r2,fp,-60
   84ebc:	d8800015 	stw	r2,0(sp)
   84ec0:	014001c4 	movi	r5,7
   84ec4:	01800084 	movi	r6,2
   84ec8:	000f883a 	mov	r7,zero
   84ecc:	00952b00 	call	952b0 <OSFlagPend>
		alt_ucosii_check_return_code(return_code);
   84ed0:	e0bff103 	ldbu	r2,-60(fp)
   84ed4:	11003fcc 	andi	r4,r2,255
   84ed8:	00844500 	call	84450 <alt_ucosii_check_return_code>

		// printf("R: waiting for SDMutex\n");
        // OSTimeDlyHMSM(0, 0, 0, 100);
		OSMutexPend(SDMutex, 0, &return_code);
   84edc:	d1270c17 	ldw	r4,-25552(gp)
   84ee0:	e1bff104 	addi	r6,fp,-60
   84ee4:	000b883a 	mov	r5,zero
   84ee8:	0097e180 	call	97e18 <OSMutexPend>
		alt_ucosii_check_return_code(return_code);
   84eec:	e0bff103 	ldbu	r2,-60(fp)
   84ef0:	11003fcc 	andi	r4,r2,255
   84ef4:	00844500 	call	84450 <alt_ucosii_check_return_code>

		if (file_opened == 0) {
   84ef8:	e0bfef17 	ldw	r2,-68(fp)
   84efc:	1004c03a 	cmpne	r2,r2,zero
   84f00:	1001af1e 	bne	r2,zero,855c0 <SD_read_task+0x728>
			file_handle = sd_card_fopen("INPIC.BMP", false);
   84f04:	010002b4 	movhi	r4,10
   84f08:	213edd04 	addi	r4,r4,-1164
   84f0c:	000b883a 	mov	r5,zero
   84f10:	008344c0 	call	8344c <sd_card_fopen>
   84f14:	e0bff08d 	sth	r2,-62(fp)

			if (file_handle < 0) {
   84f18:	e0bff08f 	ldh	r2,-62(fp)
   84f1c:	1004403a 	cmpge	r2,r2,zero
   84f20:	1000091e 	bne	r2,zero,84f48 <SD_read_task+0xb0>
				printf("Error opening INPIC.BMP\n");
   84f24:	010002b4 	movhi	r4,10
   84f28:	213ee004 	addi	r4,r4,-1152
   84f2c:	0087aa40 	call	87aa4 <puts>
		        OSTimeDlyHMSM(0, 0, 1, 0);
   84f30:	0009883a 	mov	r4,zero
   84f34:	000b883a 	mov	r5,zero
   84f38:	01800044 	movi	r6,1
   84f3c:	000f883a 	mov	r7,zero
   84f40:	009c5040 	call	9c504 <OSTimeDlyHMSM>
		OSFlagPost(SDCardFlag, SD_READ_NEED_FILL, OS_FLAG_CLR, &return_code);
		alt_ucosii_check_return_code(return_code);
		OSFlagPost(SDCardFlag, SD_READ_DATA_READY, OS_FLAG_SET, &return_code);
		alt_ucosii_check_return_code(return_code);
	}
}
   84f44:	0001cc06 	br	85678 <SD_read_task+0x7e0>
			if (file_handle < 0) {
				printf("Error opening INPIC.BMP\n");
		        OSTimeDlyHMSM(0, 0, 1, 0);
				break;
			}
			printf("Image opened: INPIC.BMP\n");
   84f48:	010002b4 	movhi	r4,10
   84f4c:	213ee604 	addi	r4,r4,-1128
   84f50:	0087aa40 	call	87aa4 <puts>
			// BMP header
			data = sd_card_read(file_handle);
   84f54:	e13ff08f 	ldh	r4,-62(fp)
   84f58:	00839100 	call	83910 <sd_card_read>
   84f5c:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.magic_number = data << 8;
   84f60:	e0bff00b 	ldhu	r2,-64(fp)
   84f64:	1004923a 	slli	r2,r2,8
   84f68:	e0bff20d 	sth	r2,-56(fp)
			data = sd_card_read(file_handle);
   84f6c:	e13ff08f 	ldh	r4,-62(fp)
   84f70:	00839100 	call	83910 <sd_card_read>
   84f74:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.magic_number = bmp_header.magic_number | data;
   84f78:	e0fff20b 	ldhu	r3,-56(fp)
   84f7c:	e0bff00b 	ldhu	r2,-64(fp)
   84f80:	1884b03a 	or	r2,r3,r2
   84f84:	e0bff20d 	sth	r2,-56(fp)

			data = sd_card_read(file_handle);
   84f88:	e13ff08f 	ldh	r4,-62(fp)
   84f8c:	00839100 	call	83910 <sd_card_read>
   84f90:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.file_size = data;
   84f94:	e0bff00b 	ldhu	r2,-64(fp)
   84f98:	e0bff315 	stw	r2,-52(fp)
			data = sd_card_read(file_handle);
   84f9c:	e13ff08f 	ldh	r4,-62(fp)
   84fa0:	00839100 	call	83910 <sd_card_read>
   84fa4:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.file_size = bmp_header.file_size | data << 8;
   84fa8:	e0fff317 	ldw	r3,-52(fp)
   84fac:	e0bff00b 	ldhu	r2,-64(fp)
   84fb0:	1004923a 	slli	r2,r2,8
   84fb4:	1884b03a 	or	r2,r3,r2
   84fb8:	e0bff315 	stw	r2,-52(fp)
			data = sd_card_read(file_handle);
   84fbc:	e13ff08f 	ldh	r4,-62(fp)
   84fc0:	00839100 	call	83910 <sd_card_read>
   84fc4:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.file_size = bmp_header.file_size | data << 16;
   84fc8:	e0fff317 	ldw	r3,-52(fp)
   84fcc:	e0bff00b 	ldhu	r2,-64(fp)
   84fd0:	1004943a 	slli	r2,r2,16
   84fd4:	1884b03a 	or	r2,r3,r2
   84fd8:	e0bff315 	stw	r2,-52(fp)
			data = sd_card_read(file_handle);
   84fdc:	e13ff08f 	ldh	r4,-62(fp)
   84fe0:	00839100 	call	83910 <sd_card_read>
   84fe4:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.file_size = bmp_header.file_size | data << 24;
   84fe8:	e0fff317 	ldw	r3,-52(fp)
   84fec:	e0bff00b 	ldhu	r2,-64(fp)
   84ff0:	1004963a 	slli	r2,r2,24
   84ff4:	1884b03a 	or	r2,r3,r2
   84ff8:	e0bff315 	stw	r2,-52(fp)

			// unused
			data = sd_card_read(file_handle);
   84ffc:	e13ff08f 	ldh	r4,-62(fp)
   85000:	00839100 	call	83910 <sd_card_read>
   85004:	e0bff00d 	sth	r2,-64(fp)
			data = sd_card_read(file_handle);
   85008:	e13ff08f 	ldh	r4,-62(fp)
   8500c:	00839100 	call	83910 <sd_card_read>
   85010:	e0bff00d 	sth	r2,-64(fp)
			data = sd_card_read(file_handle);
   85014:	e13ff08f 	ldh	r4,-62(fp)
   85018:	00839100 	call	83910 <sd_card_read>
   8501c:	e0bff00d 	sth	r2,-64(fp)
			data = sd_card_read(file_handle);
   85020:	e13ff08f 	ldh	r4,-62(fp)
   85024:	00839100 	call	83910 <sd_card_read>
   85028:	e0bff00d 	sth	r2,-64(fp)

			data = sd_card_read(file_handle);
   8502c:	e13ff08f 	ldh	r4,-62(fp)
   85030:	00839100 	call	83910 <sd_card_read>
   85034:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.data_offset = data;
   85038:	e0bff00b 	ldhu	r2,-64(fp)
   8503c:	e0bff415 	stw	r2,-48(fp)
			data = sd_card_read(file_handle);
   85040:	e13ff08f 	ldh	r4,-62(fp)
   85044:	00839100 	call	83910 <sd_card_read>
   85048:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.data_offset = bmp_header.data_offset | data << 8;
   8504c:	e0fff417 	ldw	r3,-48(fp)
   85050:	e0bff00b 	ldhu	r2,-64(fp)
   85054:	1004923a 	slli	r2,r2,8
   85058:	1884b03a 	or	r2,r3,r2
   8505c:	e0bff415 	stw	r2,-48(fp)
			data = sd_card_read(file_handle);
   85060:	e13ff08f 	ldh	r4,-62(fp)
   85064:	00839100 	call	83910 <sd_card_read>
   85068:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.data_offset = bmp_header.data_offset | data << 16;
   8506c:	e0fff417 	ldw	r3,-48(fp)
   85070:	e0bff00b 	ldhu	r2,-64(fp)
   85074:	1004943a 	slli	r2,r2,16
   85078:	1884b03a 	or	r2,r3,r2
   8507c:	e0bff415 	stw	r2,-48(fp)
			data = sd_card_read(file_handle);
   85080:	e13ff08f 	ldh	r4,-62(fp)
   85084:	00839100 	call	83910 <sd_card_read>
   85088:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.data_offset = bmp_header.data_offset | data << 24;
   8508c:	e0fff417 	ldw	r3,-48(fp)
   85090:	e0bff00b 	ldhu	r2,-64(fp)
   85094:	1004963a 	slli	r2,r2,24
   85098:	1884b03a 	or	r2,r3,r2
   8509c:	e0bff415 	stw	r2,-48(fp)

			data = sd_card_read(file_handle);
   850a0:	e13ff08f 	ldh	r4,-62(fp)
   850a4:	00839100 	call	83910 <sd_card_read>
   850a8:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.header_size = data;
   850ac:	e0bff00b 	ldhu	r2,-64(fp)
   850b0:	e0bff515 	stw	r2,-44(fp)
			data = sd_card_read(file_handle);
   850b4:	e13ff08f 	ldh	r4,-62(fp)
   850b8:	00839100 	call	83910 <sd_card_read>
   850bc:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.header_size = bmp_header.header_size | data << 8;
   850c0:	e0fff517 	ldw	r3,-44(fp)
   850c4:	e0bff00b 	ldhu	r2,-64(fp)
   850c8:	1004923a 	slli	r2,r2,8
   850cc:	1884b03a 	or	r2,r3,r2
   850d0:	e0bff515 	stw	r2,-44(fp)
			data = sd_card_read(file_handle);
   850d4:	e13ff08f 	ldh	r4,-62(fp)
   850d8:	00839100 	call	83910 <sd_card_read>
   850dc:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.header_size = bmp_header.header_size | data << 16;
   850e0:	e0fff517 	ldw	r3,-44(fp)
   850e4:	e0bff00b 	ldhu	r2,-64(fp)
   850e8:	1004943a 	slli	r2,r2,16
   850ec:	1884b03a 	or	r2,r3,r2
   850f0:	e0bff515 	stw	r2,-44(fp)
			data = sd_card_read(file_handle);
   850f4:	e13ff08f 	ldh	r4,-62(fp)
   850f8:	00839100 	call	83910 <sd_card_read>
   850fc:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.header_size = bmp_header.header_size | data << 24;
   85100:	e0fff517 	ldw	r3,-44(fp)
   85104:	e0bff00b 	ldhu	r2,-64(fp)
   85108:	1004963a 	slli	r2,r2,24
   8510c:	1884b03a 	or	r2,r3,r2
   85110:	e0bff515 	stw	r2,-44(fp)

			data = sd_card_read(file_handle);
   85114:	e13ff08f 	ldh	r4,-62(fp)
   85118:	00839100 	call	83910 <sd_card_read>
   8511c:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.width = data;
   85120:	e0bff00b 	ldhu	r2,-64(fp)
   85124:	e0bff615 	stw	r2,-40(fp)
			data = sd_card_read(file_handle);
   85128:	e13ff08f 	ldh	r4,-62(fp)
   8512c:	00839100 	call	83910 <sd_card_read>
   85130:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.width = bmp_header.width | data << 8;
   85134:	e0fff617 	ldw	r3,-40(fp)
   85138:	e0bff00b 	ldhu	r2,-64(fp)
   8513c:	1004923a 	slli	r2,r2,8
   85140:	1884b03a 	or	r2,r3,r2
   85144:	e0bff615 	stw	r2,-40(fp)
			data = sd_card_read(file_handle);
   85148:	e13ff08f 	ldh	r4,-62(fp)
   8514c:	00839100 	call	83910 <sd_card_read>
   85150:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.width = bmp_header.width | data << 16;
   85154:	e0fff617 	ldw	r3,-40(fp)
   85158:	e0bff00b 	ldhu	r2,-64(fp)
   8515c:	1004943a 	slli	r2,r2,16
   85160:	1884b03a 	or	r2,r3,r2
   85164:	e0bff615 	stw	r2,-40(fp)
			data = sd_card_read(file_handle);
   85168:	e13ff08f 	ldh	r4,-62(fp)
   8516c:	00839100 	call	83910 <sd_card_read>
   85170:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.width = bmp_header.width | data << 24;
   85174:	e0fff617 	ldw	r3,-40(fp)
   85178:	e0bff00b 	ldhu	r2,-64(fp)
   8517c:	1004963a 	slli	r2,r2,24
   85180:	1884b03a 	or	r2,r3,r2
   85184:	e0bff615 	stw	r2,-40(fp)

			data = sd_card_read(file_handle);
   85188:	e13ff08f 	ldh	r4,-62(fp)
   8518c:	00839100 	call	83910 <sd_card_read>
   85190:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.height = data;
   85194:	e0bff00b 	ldhu	r2,-64(fp)
   85198:	e0bff715 	stw	r2,-36(fp)
			data = sd_card_read(file_handle);
   8519c:	e13ff08f 	ldh	r4,-62(fp)
   851a0:	00839100 	call	83910 <sd_card_read>
   851a4:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.height = bmp_header.height | data << 8;
   851a8:	e0fff717 	ldw	r3,-36(fp)
   851ac:	e0bff00b 	ldhu	r2,-64(fp)
   851b0:	1004923a 	slli	r2,r2,8
   851b4:	1884b03a 	or	r2,r3,r2
   851b8:	e0bff715 	stw	r2,-36(fp)
			data = sd_card_read(file_handle);
   851bc:	e13ff08f 	ldh	r4,-62(fp)
   851c0:	00839100 	call	83910 <sd_card_read>
   851c4:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.height = bmp_header.height | data << 16;
   851c8:	e0fff717 	ldw	r3,-36(fp)
   851cc:	e0bff00b 	ldhu	r2,-64(fp)
   851d0:	1004943a 	slli	r2,r2,16
   851d4:	1884b03a 	or	r2,r3,r2
   851d8:	e0bff715 	stw	r2,-36(fp)
			data = sd_card_read(file_handle);
   851dc:	e13ff08f 	ldh	r4,-62(fp)
   851e0:	00839100 	call	83910 <sd_card_read>
   851e4:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.height = bmp_header.height | data << 24;
   851e8:	e0fff717 	ldw	r3,-36(fp)
   851ec:	e0bff00b 	ldhu	r2,-64(fp)
   851f0:	1004963a 	slli	r2,r2,24
   851f4:	1884b03a 	or	r2,r3,r2
   851f8:	e0bff715 	stw	r2,-36(fp)

			data = sd_card_read(file_handle);
   851fc:	e13ff08f 	ldh	r4,-62(fp)
   85200:	00839100 	call	83910 <sd_card_read>
   85204:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.num_plane = data;
   85208:	e0bff00b 	ldhu	r2,-64(fp)
   8520c:	e0bff80d 	sth	r2,-32(fp)
			data = sd_card_read(file_handle);
   85210:	e13ff08f 	ldh	r4,-62(fp)
   85214:	00839100 	call	83910 <sd_card_read>
   85218:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.num_plane = bmp_header.num_plane | data << 8;
   8521c:	e0fff80b 	ldhu	r3,-32(fp)
   85220:	e0bff00b 	ldhu	r2,-64(fp)
   85224:	1004923a 	slli	r2,r2,8
   85228:	1884b03a 	or	r2,r3,r2
   8522c:	e0bff80d 	sth	r2,-32(fp)

			data = sd_card_read(file_handle);
   85230:	e13ff08f 	ldh	r4,-62(fp)
   85234:	00839100 	call	83910 <sd_card_read>
   85238:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.num_bits_per_pixel = data;
   8523c:	e0bff00b 	ldhu	r2,-64(fp)
   85240:	e0bff88d 	sth	r2,-30(fp)
			data = sd_card_read(file_handle);
   85244:	e13ff08f 	ldh	r4,-62(fp)
   85248:	00839100 	call	83910 <sd_card_read>
   8524c:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.num_bits_per_pixel = bmp_header.num_bits_per_pixel | data << 8;
   85250:	e0fff88b 	ldhu	r3,-30(fp)
   85254:	e0bff00b 	ldhu	r2,-64(fp)
   85258:	1004923a 	slli	r2,r2,8
   8525c:	1884b03a 	or	r2,r3,r2
   85260:	e0bff88d 	sth	r2,-30(fp)

			data = sd_card_read(file_handle);
   85264:	e13ff08f 	ldh	r4,-62(fp)
   85268:	00839100 	call	83910 <sd_card_read>
   8526c:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.compress_mode = data;
   85270:	e0bff00b 	ldhu	r2,-64(fp)
   85274:	e0bff915 	stw	r2,-28(fp)
			data = sd_card_read(file_handle);
   85278:	e13ff08f 	ldh	r4,-62(fp)
   8527c:	00839100 	call	83910 <sd_card_read>
   85280:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.compress_mode = bmp_header.compress_mode | data << 8;
   85284:	e0fff917 	ldw	r3,-28(fp)
   85288:	e0bff00b 	ldhu	r2,-64(fp)
   8528c:	1004923a 	slli	r2,r2,8
   85290:	1884b03a 	or	r2,r3,r2
   85294:	e0bff915 	stw	r2,-28(fp)
			data = sd_card_read(file_handle);
   85298:	e13ff08f 	ldh	r4,-62(fp)
   8529c:	00839100 	call	83910 <sd_card_read>
   852a0:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.compress_mode = bmp_header.compress_mode | data << 16;
   852a4:	e0fff917 	ldw	r3,-28(fp)
   852a8:	e0bff00b 	ldhu	r2,-64(fp)
   852ac:	1004943a 	slli	r2,r2,16
   852b0:	1884b03a 	or	r2,r3,r2
   852b4:	e0bff915 	stw	r2,-28(fp)
			data = sd_card_read(file_handle);
   852b8:	e13ff08f 	ldh	r4,-62(fp)
   852bc:	00839100 	call	83910 <sd_card_read>
   852c0:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.compress_mode = bmp_header.compress_mode | data << 24;
   852c4:	e0fff917 	ldw	r3,-28(fp)
   852c8:	e0bff00b 	ldhu	r2,-64(fp)
   852cc:	1004963a 	slli	r2,r2,24
   852d0:	1884b03a 	or	r2,r3,r2
   852d4:	e0bff915 	stw	r2,-28(fp)

			data = sd_card_read(file_handle);
   852d8:	e13ff08f 	ldh	r4,-62(fp)
   852dc:	00839100 	call	83910 <sd_card_read>
   852e0:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.data_size = data;
   852e4:	e0bff00b 	ldhu	r2,-64(fp)
   852e8:	e0bffa15 	stw	r2,-24(fp)
			data = sd_card_read(file_handle);
   852ec:	e13ff08f 	ldh	r4,-62(fp)
   852f0:	00839100 	call	83910 <sd_card_read>
   852f4:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.data_size = bmp_header.data_size | data << 8;
   852f8:	e0fffa17 	ldw	r3,-24(fp)
   852fc:	e0bff00b 	ldhu	r2,-64(fp)
   85300:	1004923a 	slli	r2,r2,8
   85304:	1884b03a 	or	r2,r3,r2
   85308:	e0bffa15 	stw	r2,-24(fp)
			data = sd_card_read(file_handle);
   8530c:	e13ff08f 	ldh	r4,-62(fp)
   85310:	00839100 	call	83910 <sd_card_read>
   85314:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.data_size = bmp_header.data_size | data << 16;
   85318:	e0fffa17 	ldw	r3,-24(fp)
   8531c:	e0bff00b 	ldhu	r2,-64(fp)
   85320:	1004943a 	slli	r2,r2,16
   85324:	1884b03a 	or	r2,r3,r2
   85328:	e0bffa15 	stw	r2,-24(fp)
			data = sd_card_read(file_handle);
   8532c:	e13ff08f 	ldh	r4,-62(fp)
   85330:	00839100 	call	83910 <sd_card_read>
   85334:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.data_size = bmp_header.data_size | data << 24;
   85338:	e0fffa17 	ldw	r3,-24(fp)
   8533c:	e0bff00b 	ldhu	r2,-64(fp)
   85340:	1004963a 	slli	r2,r2,24
   85344:	1884b03a 	or	r2,r3,r2
   85348:	e0bffa15 	stw	r2,-24(fp)

			data = sd_card_read(file_handle);
   8534c:	e13ff08f 	ldh	r4,-62(fp)
   85350:	00839100 	call	83910 <sd_card_read>
   85354:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.hor_resolution = data;
   85358:	e0bff00b 	ldhu	r2,-64(fp)
   8535c:	e0bffb15 	stw	r2,-20(fp)
			data = sd_card_read(file_handle);
   85360:	e13ff08f 	ldh	r4,-62(fp)
   85364:	00839100 	call	83910 <sd_card_read>
   85368:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.hor_resolution = bmp_header.hor_resolution | data << 8;
   8536c:	e0fffb17 	ldw	r3,-20(fp)
   85370:	e0bff00b 	ldhu	r2,-64(fp)
   85374:	1004923a 	slli	r2,r2,8
   85378:	1884b03a 	or	r2,r3,r2
   8537c:	e0bffb15 	stw	r2,-20(fp)
			data = sd_card_read(file_handle);
   85380:	e13ff08f 	ldh	r4,-62(fp)
   85384:	00839100 	call	83910 <sd_card_read>
   85388:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.hor_resolution = bmp_header.hor_resolution | data << 16;
   8538c:	e0fffb17 	ldw	r3,-20(fp)
   85390:	e0bff00b 	ldhu	r2,-64(fp)
   85394:	1004943a 	slli	r2,r2,16
   85398:	1884b03a 	or	r2,r3,r2
   8539c:	e0bffb15 	stw	r2,-20(fp)
			data = sd_card_read(file_handle);
   853a0:	e13ff08f 	ldh	r4,-62(fp)
   853a4:	00839100 	call	83910 <sd_card_read>
   853a8:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.hor_resolution = bmp_header.hor_resolution | data << 24;
   853ac:	e0fffb17 	ldw	r3,-20(fp)
   853b0:	e0bff00b 	ldhu	r2,-64(fp)
   853b4:	1004963a 	slli	r2,r2,24
   853b8:	1884b03a 	or	r2,r3,r2
   853bc:	e0bffb15 	stw	r2,-20(fp)

			data = sd_card_read(file_handle);
   853c0:	e13ff08f 	ldh	r4,-62(fp)
   853c4:	00839100 	call	83910 <sd_card_read>
   853c8:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.ver_resolution = data;
   853cc:	e0bff00b 	ldhu	r2,-64(fp)
   853d0:	e0bffc15 	stw	r2,-16(fp)
			data = sd_card_read(file_handle);
   853d4:	e13ff08f 	ldh	r4,-62(fp)
   853d8:	00839100 	call	83910 <sd_card_read>
   853dc:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.ver_resolution = bmp_header.ver_resolution | data << 8;
   853e0:	e0fffc17 	ldw	r3,-16(fp)
   853e4:	e0bff00b 	ldhu	r2,-64(fp)
   853e8:	1004923a 	slli	r2,r2,8
   853ec:	1884b03a 	or	r2,r3,r2
   853f0:	e0bffc15 	stw	r2,-16(fp)
			data = sd_card_read(file_handle);
   853f4:	e13ff08f 	ldh	r4,-62(fp)
   853f8:	00839100 	call	83910 <sd_card_read>
   853fc:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.ver_resolution = bmp_header.ver_resolution | data << 16;
   85400:	e0fffc17 	ldw	r3,-16(fp)
   85404:	e0bff00b 	ldhu	r2,-64(fp)
   85408:	1004943a 	slli	r2,r2,16
   8540c:	1884b03a 	or	r2,r3,r2
   85410:	e0bffc15 	stw	r2,-16(fp)
			data = sd_card_read(file_handle);
   85414:	e13ff08f 	ldh	r4,-62(fp)
   85418:	00839100 	call	83910 <sd_card_read>
   8541c:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.ver_resolution = bmp_header.ver_resolution | data << 24;
   85420:	e0fffc17 	ldw	r3,-16(fp)
   85424:	e0bff00b 	ldhu	r2,-64(fp)
   85428:	1004963a 	slli	r2,r2,24
   8542c:	1884b03a 	or	r2,r3,r2
   85430:	e0bffc15 	stw	r2,-16(fp)

			data = sd_card_read(file_handle);
   85434:	e13ff08f 	ldh	r4,-62(fp)
   85438:	00839100 	call	83910 <sd_card_read>
   8543c:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.num_color_in_palette = data;
   85440:	e0bff00b 	ldhu	r2,-64(fp)
   85444:	e0bffd15 	stw	r2,-12(fp)
			data = sd_card_read(file_handle);
   85448:	e13ff08f 	ldh	r4,-62(fp)
   8544c:	00839100 	call	83910 <sd_card_read>
   85450:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.num_color_in_palette = bmp_header.num_color_in_palette | data << 8;
   85454:	e0fffd17 	ldw	r3,-12(fp)
   85458:	e0bff00b 	ldhu	r2,-64(fp)
   8545c:	1004923a 	slli	r2,r2,8
   85460:	1884b03a 	or	r2,r3,r2
   85464:	e0bffd15 	stw	r2,-12(fp)
			data = sd_card_read(file_handle);
   85468:	e13ff08f 	ldh	r4,-62(fp)
   8546c:	00839100 	call	83910 <sd_card_read>
   85470:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.num_color_in_palette = bmp_header.num_color_in_palette | data << 16;
   85474:	e0fffd17 	ldw	r3,-12(fp)
   85478:	e0bff00b 	ldhu	r2,-64(fp)
   8547c:	1004943a 	slli	r2,r2,16
   85480:	1884b03a 	or	r2,r3,r2
   85484:	e0bffd15 	stw	r2,-12(fp)
			data = sd_card_read(file_handle);
   85488:	e13ff08f 	ldh	r4,-62(fp)
   8548c:	00839100 	call	83910 <sd_card_read>
   85490:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.num_color_in_palette = bmp_header.num_color_in_palette | data << 24;
   85494:	e0fffd17 	ldw	r3,-12(fp)
   85498:	e0bff00b 	ldhu	r2,-64(fp)
   8549c:	1004963a 	slli	r2,r2,24
   854a0:	1884b03a 	or	r2,r3,r2
   854a4:	e0bffd15 	stw	r2,-12(fp)

			data = sd_card_read(file_handle);
   854a8:	e13ff08f 	ldh	r4,-62(fp)
   854ac:	00839100 	call	83910 <sd_card_read>
   854b0:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.important_color = data;
   854b4:	e0bff00b 	ldhu	r2,-64(fp)
   854b8:	e0bffe15 	stw	r2,-8(fp)
			data = sd_card_read(file_handle);
   854bc:	e13ff08f 	ldh	r4,-62(fp)
   854c0:	00839100 	call	83910 <sd_card_read>
   854c4:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.important_color = bmp_header.important_color | data << 8;
   854c8:	e0fffe17 	ldw	r3,-8(fp)
   854cc:	e0bff00b 	ldhu	r2,-64(fp)
   854d0:	1004923a 	slli	r2,r2,8
   854d4:	1884b03a 	or	r2,r3,r2
   854d8:	e0bffe15 	stw	r2,-8(fp)
			data = sd_card_read(file_handle);
   854dc:	e13ff08f 	ldh	r4,-62(fp)
   854e0:	00839100 	call	83910 <sd_card_read>
   854e4:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.important_color = bmp_header.important_color | data << 16;
   854e8:	e0fffe17 	ldw	r3,-8(fp)
   854ec:	e0bff00b 	ldhu	r2,-64(fp)
   854f0:	1004943a 	slli	r2,r2,16
   854f4:	1884b03a 	or	r2,r3,r2
   854f8:	e0bffe15 	stw	r2,-8(fp)
			data = sd_card_read(file_handle);
   854fc:	e13ff08f 	ldh	r4,-62(fp)
   85500:	00839100 	call	83910 <sd_card_read>
   85504:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.important_color = bmp_header.important_color | data << 24;
   85508:	e0fffe17 	ldw	r3,-8(fp)
   8550c:	e0bff00b 	ldhu	r2,-64(fp)
   85510:	1004963a 	slli	r2,r2,24
   85514:	1884b03a 	or	r2,r3,r2
   85518:	e0bffe15 	stw	r2,-8(fp)

			printf("Reading image of dimension: %d x %d\n", bmp_header.width, bmp_header.height);
   8551c:	e17ff617 	ldw	r5,-40(fp)
   85520:	e1bff717 	ldw	r6,-36(fp)
   85524:	010002b4 	movhi	r4,10
   85528:	213eec04 	addi	r4,r4,-1104
   8552c:	00879680 	call	87968 <printf>
			if (bmp_header.height > 0) {
   85530:	e0bff717 	ldw	r2,-36(fp)
   85534:	10800050 	cmplti	r2,r2,1
   85538:	1000031e 	bne	r2,zero,85548 <SD_read_task+0x6b0>
				printf("Positive height detected, image will be loaded as upside-down\n");
   8553c:	010002b4 	movhi	r4,10
   85540:	213ef604 	addi	r4,r4,-1064
   85544:	0087aa40 	call	87aa4 <puts>
			}

			// This is for posting the width and height info to compute_Y_task
			return_code = OSMboxPost(ReadImageWidthMailbox, (void *)(bmp_header.width));
   85548:	d1271717 	ldw	r4,-25508(gp)
   8554c:	e0bff617 	ldw	r2,-40(fp)
   85550:	100b883a 	mov	r5,r2
   85554:	0096ad80 	call	96ad8 <OSMboxPost>
   85558:	e0bff105 	stb	r2,-60(fp)
			alt_ucosii_check_return_code(return_code);
   8555c:	e0bff103 	ldbu	r2,-60(fp)
   85560:	11003fcc 	andi	r4,r2,255
   85564:	00844500 	call	84450 <alt_ucosii_check_return_code>
			return_code = OSMboxPost(ReadImageHeightMailbox, (void *)(bmp_header.height));
   85568:	d1271117 	ldw	r4,-25532(gp)
   8556c:	e0bff717 	ldw	r2,-36(fp)
   85570:	100b883a 	mov	r5,r2
   85574:	0096ad80 	call	96ad8 <OSMboxPost>
   85578:	e0bff105 	stb	r2,-60(fp)
			alt_ucosii_check_return_code(return_code);
   8557c:	e0bff103 	ldbu	r2,-60(fp)
   85580:	11003fcc 	andi	r4,r2,255
   85584:	00844500 	call	84450 <alt_ucosii_check_return_code>

			// This is the first data for posting
			data = sd_card_read(file_handle);
   85588:	e13ff08f 	ldh	r4,-62(fp)
   8558c:	00839100 	call	83910 <sd_card_read>
   85590:	e0bff00d 	sth	r2,-64(fp)
			image_size = 1;
   85594:	00800044 	movi	r2,1
   85598:	e0bfee15 	stw	r2,-72(fp)

			file_opened = 1;
   8559c:	00800044 	movi	r2,1
   855a0:	e0bfef15 	stw	r2,-68(fp)
		}

		while (((return_code = OSQPost(SDReadQueue[0], (void *)(data & 0xFF))) == OS_NO_ERR) && (image_size < bmp_header.data_size)) {
   855a4:	00000606 	br	855c0 <SD_read_task+0x728>
			data = sd_card_read(file_handle);
   855a8:	e13ff08f 	ldh	r4,-62(fp)
   855ac:	00839100 	call	83910 <sd_card_read>
   855b0:	e0bff00d 	sth	r2,-64(fp)
			image_size++;
   855b4:	e0bfee17 	ldw	r2,-72(fp)
   855b8:	10800044 	addi	r2,r2,1
   855bc:	e0bfee15 	stw	r2,-72(fp)
			image_size = 1;

			file_opened = 1;
		}

		while (((return_code = OSQPost(SDReadQueue[0], (void *)(data & 0xFF))) == OS_NO_ERR) && (image_size < bmp_header.data_size)) {
   855c0:	d1271217 	ldw	r4,-25528(gp)
   855c4:	e0bff00b 	ldhu	r2,-64(fp)
   855c8:	10803fcc 	andi	r2,r2,255
   855cc:	100b883a 	mov	r5,r2
   855d0:	00996480 	call	99648 <OSQPost>
   855d4:	e0bff105 	stb	r2,-60(fp)
   855d8:	e0bff103 	ldbu	r2,-60(fp)
   855dc:	10803fcc 	andi	r2,r2,255
   855e0:	1004c03a 	cmpne	r2,r2,zero
   855e4:	1000031e 	bne	r2,zero,855f4 <SD_read_task+0x75c>
   855e8:	e0fffa17 	ldw	r3,-24(fp)
   855ec:	e0bfee17 	ldw	r2,-72(fp)
   855f0:	10ffed16 	blt	r2,r3,855a8 <SD_read_task+0x710>
			data = sd_card_read(file_handle);
			image_size++;
		}

		if (image_size == bmp_header.data_size) {
   855f4:	e0fffa17 	ldw	r3,-24(fp)
   855f8:	e0bfee17 	ldw	r2,-72(fp)
   855fc:	1880071e 	bne	r3,r2,8561c <SD_read_task+0x784>
			sd_card_fclose(file_handle);
   85600:	e13ff08f 	ldh	r4,-62(fp)
   85604:	008427c0 	call	8427c <sd_card_fclose>

			printf("Done reading image: (%d bytes)\n", image_size);
   85608:	010002b4 	movhi	r4,10
   8560c:	213f0604 	addi	r4,r4,-1000
   85610:	e17fee17 	ldw	r5,-72(fp)
   85614:	00879680 	call	87968 <printf>
			file_opened = 0;
   85618:	e03fef15 	stw	zero,-68(fp)
		}

		// printf("RQ filled (%d bytes)\n", image_size);
		return_code = OSMutexPost(SDMutex);
   8561c:	d1270c17 	ldw	r4,-25552(gp)
   85620:	00984a80 	call	984a8 <OSMutexPost>
   85624:	e0bff105 	stb	r2,-60(fp)
		alt_ucosii_check_return_code(return_code);
   85628:	e0bff103 	ldbu	r2,-60(fp)
   8562c:	11003fcc 	andi	r4,r2,255
   85630:	00844500 	call	84450 <alt_ucosii_check_return_code>

		OSFlagPost(SDCardFlag, SD_READ_NEED_FILL, OS_FLAG_CLR, &return_code);
   85634:	d1270d17 	ldw	r4,-25548(gp)
   85638:	e1fff104 	addi	r7,fp,-60
   8563c:	01400104 	movi	r5,4
   85640:	000d883a 	mov	r6,zero
   85644:	009595c0 	call	9595c <OSFlagPost>
		alt_ucosii_check_return_code(return_code);
   85648:	e0bff103 	ldbu	r2,-60(fp)
   8564c:	11003fcc 	andi	r4,r2,255
   85650:	00844500 	call	84450 <alt_ucosii_check_return_code>
		OSFlagPost(SDCardFlag, SD_READ_DATA_READY, OS_FLAG_SET, &return_code);
   85654:	d1270d17 	ldw	r4,-25548(gp)
   85658:	e1fff104 	addi	r7,fp,-60
   8565c:	01400204 	movi	r5,8
   85660:	01800044 	movi	r6,1
   85664:	009595c0 	call	9595c <OSFlagPost>
		alt_ucosii_check_return_code(return_code);
   85668:	e0bff103 	ldbu	r2,-60(fp)
   8566c:	11003fcc 	andi	r4,r2,255
   85670:	00844500 	call	84450 <alt_ucosii_check_return_code>
	}
   85674:	003e0f06 	br	84eb4 <SD_read_task+0x1c>
}
   85678:	e037883a 	mov	sp,fp
   8567c:	dfc00117 	ldw	ra,4(sp)
   85680:	df000017 	ldw	fp,0(sp)
   85684:	dec00204 	addi	sp,sp,8
   85688:	f800283a 	ret

0008568c <SD_ReadQ_2>:



void SD_ReadQ_2(void *pdata) {
   8568c:	deffeb04 	addi	sp,sp,-84
   85690:	dfc01415 	stw	ra,80(sp)
   85694:	df001315 	stw	fp,76(sp)
   85698:	df001304 	addi	fp,sp,76
   8569c:	e13fff15 	stw	r4,-4(fp)
	INT8U return_code = OS_NO_ERR;
   856a0:	e03ff105 	stb	zero,-60(fp)
	short int file_handle;
	unsigned short int data;
	int file_opened = 0;
   856a4:	e03fef15 	stw	zero,-68(fp)
	int image_size;
	bmp_header_struct bmp_header;

	while (1) {
		OSFlagPend(SDCardFlag, SD_PRESENCE_FLAG | SD_FILESYSTEM_FLAG | SD_READ_NEED_FILL, OS_FLAG_WAIT_SET_ALL, 0, &return_code);
   856a8:	d1270d17 	ldw	r4,-25548(gp)
   856ac:	e0bff104 	addi	r2,fp,-60
   856b0:	d8800015 	stw	r2,0(sp)
   856b4:	014001c4 	movi	r5,7
   856b8:	01800084 	movi	r6,2
   856bc:	000f883a 	mov	r7,zero
   856c0:	00952b00 	call	952b0 <OSFlagPend>
		alt_ucosii_check_return_code(return_code);
   856c4:	e0bff103 	ldbu	r2,-60(fp)
   856c8:	11003fcc 	andi	r4,r2,255
   856cc:	00844500 	call	84450 <alt_ucosii_check_return_code>

		// printf("R: waiting for SDMutex\n");
        // OSTimeDlyHMSM(0, 0, 0, 100);
		OSMutexPend(SDMutex, 0, &return_code);
   856d0:	d1270c17 	ldw	r4,-25552(gp)
   856d4:	e1bff104 	addi	r6,fp,-60
   856d8:	000b883a 	mov	r5,zero
   856dc:	0097e180 	call	97e18 <OSMutexPend>
		alt_ucosii_check_return_code(return_code);
   856e0:	e0bff103 	ldbu	r2,-60(fp)
   856e4:	11003fcc 	andi	r4,r2,255
   856e8:	00844500 	call	84450 <alt_ucosii_check_return_code>

		if (file_opened == 0) {
   856ec:	e0bfef17 	ldw	r2,-68(fp)
   856f0:	1004c03a 	cmpne	r2,r2,zero
   856f4:	10019f1e 	bne	r2,zero,85d74 <SD_ReadQ_2+0x6e8>
			file_handle = sd_card_fopen("INPIC2.BMP", false);
   856f8:	010002b4 	movhi	r4,10
   856fc:	213f0e04 	addi	r4,r4,-968
   85700:	000b883a 	mov	r5,zero
   85704:	008344c0 	call	8344c <sd_card_fopen>
   85708:	e0bff08d 	sth	r2,-62(fp)

			if (file_handle < 0) {
   8570c:	e0bff08f 	ldh	r2,-62(fp)
   85710:	1004403a 	cmpge	r2,r2,zero
   85714:	1000091e 	bne	r2,zero,8573c <SD_ReadQ_2+0xb0>
				printf("Error opening INPIC2.BMP\n");
   85718:	010002b4 	movhi	r4,10
   8571c:	213f1104 	addi	r4,r4,-956
   85720:	0087aa40 	call	87aa4 <puts>
		        OSTimeDlyHMSM(0, 0, 1, 0);
   85724:	0009883a 	mov	r4,zero
   85728:	000b883a 	mov	r5,zero
   8572c:	01800044 	movi	r6,1
   85730:	000f883a 	mov	r7,zero
   85734:	009c5040 	call	9c504 <OSTimeDlyHMSM>
		OSFlagPost(SDCardFlag, SD_READ_NEED_FILL, OS_FLAG_CLR, &return_code);
		alt_ucosii_check_return_code(return_code);
		OSFlagPost(SDCardFlag, SD_READ_DATA_READY, OS_FLAG_SET, &return_code);
		alt_ucosii_check_return_code(return_code);
	}
}
   85738:	0001be06 	br	85e34 <SD_ReadQ_2+0x7a8>
			if (file_handle < 0) {
				printf("Error opening INPIC2.BMP\n");
		        OSTimeDlyHMSM(0, 0, 1, 0);
				break;
			}
			printf("Image opened: INPIC2.BMP\n");
   8573c:	010002b4 	movhi	r4,10
   85740:	213f1804 	addi	r4,r4,-928
   85744:	0087aa40 	call	87aa4 <puts>
			// BMP header
			data = sd_card_read(file_handle);
   85748:	e13ff08f 	ldh	r4,-62(fp)
   8574c:	00839100 	call	83910 <sd_card_read>
   85750:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.magic_number = data << 8;
   85754:	e0bff00b 	ldhu	r2,-64(fp)
   85758:	1004923a 	slli	r2,r2,8
   8575c:	e0bff20d 	sth	r2,-56(fp)
			data = sd_card_read(file_handle);
   85760:	e13ff08f 	ldh	r4,-62(fp)
   85764:	00839100 	call	83910 <sd_card_read>
   85768:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.magic_number = bmp_header.magic_number | data;
   8576c:	e0fff20b 	ldhu	r3,-56(fp)
   85770:	e0bff00b 	ldhu	r2,-64(fp)
   85774:	1884b03a 	or	r2,r3,r2
   85778:	e0bff20d 	sth	r2,-56(fp)

			data = sd_card_read(file_handle);
   8577c:	e13ff08f 	ldh	r4,-62(fp)
   85780:	00839100 	call	83910 <sd_card_read>
   85784:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.file_size = data;
   85788:	e0bff00b 	ldhu	r2,-64(fp)
   8578c:	e0bff315 	stw	r2,-52(fp)
			data = sd_card_read(file_handle);
   85790:	e13ff08f 	ldh	r4,-62(fp)
   85794:	00839100 	call	83910 <sd_card_read>
   85798:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.file_size = bmp_header.file_size | data << 8;
   8579c:	e0fff317 	ldw	r3,-52(fp)
   857a0:	e0bff00b 	ldhu	r2,-64(fp)
   857a4:	1004923a 	slli	r2,r2,8
   857a8:	1884b03a 	or	r2,r3,r2
   857ac:	e0bff315 	stw	r2,-52(fp)
			data = sd_card_read(file_handle);
   857b0:	e13ff08f 	ldh	r4,-62(fp)
   857b4:	00839100 	call	83910 <sd_card_read>
   857b8:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.file_size = bmp_header.file_size | data << 16;
   857bc:	e0fff317 	ldw	r3,-52(fp)
   857c0:	e0bff00b 	ldhu	r2,-64(fp)
   857c4:	1004943a 	slli	r2,r2,16
   857c8:	1884b03a 	or	r2,r3,r2
   857cc:	e0bff315 	stw	r2,-52(fp)
			data = sd_card_read(file_handle);
   857d0:	e13ff08f 	ldh	r4,-62(fp)
   857d4:	00839100 	call	83910 <sd_card_read>
   857d8:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.file_size = bmp_header.file_size | data << 24;
   857dc:	e0fff317 	ldw	r3,-52(fp)
   857e0:	e0bff00b 	ldhu	r2,-64(fp)
   857e4:	1004963a 	slli	r2,r2,24
   857e8:	1884b03a 	or	r2,r3,r2
   857ec:	e0bff315 	stw	r2,-52(fp)

			// unused
			data = sd_card_read(file_handle);
   857f0:	e13ff08f 	ldh	r4,-62(fp)
   857f4:	00839100 	call	83910 <sd_card_read>
   857f8:	e0bff00d 	sth	r2,-64(fp)
			data = sd_card_read(file_handle);
   857fc:	e13ff08f 	ldh	r4,-62(fp)
   85800:	00839100 	call	83910 <sd_card_read>
   85804:	e0bff00d 	sth	r2,-64(fp)
			data = sd_card_read(file_handle);
   85808:	e13ff08f 	ldh	r4,-62(fp)
   8580c:	00839100 	call	83910 <sd_card_read>
   85810:	e0bff00d 	sth	r2,-64(fp)
			data = sd_card_read(file_handle);
   85814:	e13ff08f 	ldh	r4,-62(fp)
   85818:	00839100 	call	83910 <sd_card_read>
   8581c:	e0bff00d 	sth	r2,-64(fp)

			data = sd_card_read(file_handle);
   85820:	e13ff08f 	ldh	r4,-62(fp)
   85824:	00839100 	call	83910 <sd_card_read>
   85828:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.data_offset = data;
   8582c:	e0bff00b 	ldhu	r2,-64(fp)
   85830:	e0bff415 	stw	r2,-48(fp)
			data = sd_card_read(file_handle);
   85834:	e13ff08f 	ldh	r4,-62(fp)
   85838:	00839100 	call	83910 <sd_card_read>
   8583c:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.data_offset = bmp_header.data_offset | data << 8;
   85840:	e0fff417 	ldw	r3,-48(fp)
   85844:	e0bff00b 	ldhu	r2,-64(fp)
   85848:	1004923a 	slli	r2,r2,8
   8584c:	1884b03a 	or	r2,r3,r2
   85850:	e0bff415 	stw	r2,-48(fp)
			data = sd_card_read(file_handle);
   85854:	e13ff08f 	ldh	r4,-62(fp)
   85858:	00839100 	call	83910 <sd_card_read>
   8585c:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.data_offset = bmp_header.data_offset | data << 16;
   85860:	e0fff417 	ldw	r3,-48(fp)
   85864:	e0bff00b 	ldhu	r2,-64(fp)
   85868:	1004943a 	slli	r2,r2,16
   8586c:	1884b03a 	or	r2,r3,r2
   85870:	e0bff415 	stw	r2,-48(fp)
			data = sd_card_read(file_handle);
   85874:	e13ff08f 	ldh	r4,-62(fp)
   85878:	00839100 	call	83910 <sd_card_read>
   8587c:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.data_offset = bmp_header.data_offset | data << 24;
   85880:	e0fff417 	ldw	r3,-48(fp)
   85884:	e0bff00b 	ldhu	r2,-64(fp)
   85888:	1004963a 	slli	r2,r2,24
   8588c:	1884b03a 	or	r2,r3,r2
   85890:	e0bff415 	stw	r2,-48(fp)

			data = sd_card_read(file_handle);
   85894:	e13ff08f 	ldh	r4,-62(fp)
   85898:	00839100 	call	83910 <sd_card_read>
   8589c:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.header_size = data;
   858a0:	e0bff00b 	ldhu	r2,-64(fp)
   858a4:	e0bff515 	stw	r2,-44(fp)
			data = sd_card_read(file_handle);
   858a8:	e13ff08f 	ldh	r4,-62(fp)
   858ac:	00839100 	call	83910 <sd_card_read>
   858b0:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.header_size = bmp_header.header_size | data << 8;
   858b4:	e0fff517 	ldw	r3,-44(fp)
   858b8:	e0bff00b 	ldhu	r2,-64(fp)
   858bc:	1004923a 	slli	r2,r2,8
   858c0:	1884b03a 	or	r2,r3,r2
   858c4:	e0bff515 	stw	r2,-44(fp)
			data = sd_card_read(file_handle);
   858c8:	e13ff08f 	ldh	r4,-62(fp)
   858cc:	00839100 	call	83910 <sd_card_read>
   858d0:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.header_size = bmp_header.header_size | data << 16;
   858d4:	e0fff517 	ldw	r3,-44(fp)
   858d8:	e0bff00b 	ldhu	r2,-64(fp)
   858dc:	1004943a 	slli	r2,r2,16
   858e0:	1884b03a 	or	r2,r3,r2
   858e4:	e0bff515 	stw	r2,-44(fp)
			data = sd_card_read(file_handle);
   858e8:	e13ff08f 	ldh	r4,-62(fp)
   858ec:	00839100 	call	83910 <sd_card_read>
   858f0:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.header_size = bmp_header.header_size | data << 24;
   858f4:	e0fff517 	ldw	r3,-44(fp)
   858f8:	e0bff00b 	ldhu	r2,-64(fp)
   858fc:	1004963a 	slli	r2,r2,24
   85900:	1884b03a 	or	r2,r3,r2
   85904:	e0bff515 	stw	r2,-44(fp)

			data = sd_card_read(file_handle);
   85908:	e13ff08f 	ldh	r4,-62(fp)
   8590c:	00839100 	call	83910 <sd_card_read>
   85910:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.width = data;
   85914:	e0bff00b 	ldhu	r2,-64(fp)
   85918:	e0bff615 	stw	r2,-40(fp)
			data = sd_card_read(file_handle);
   8591c:	e13ff08f 	ldh	r4,-62(fp)
   85920:	00839100 	call	83910 <sd_card_read>
   85924:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.width = bmp_header.width | data << 8;
   85928:	e0fff617 	ldw	r3,-40(fp)
   8592c:	e0bff00b 	ldhu	r2,-64(fp)
   85930:	1004923a 	slli	r2,r2,8
   85934:	1884b03a 	or	r2,r3,r2
   85938:	e0bff615 	stw	r2,-40(fp)
			data = sd_card_read(file_handle);
   8593c:	e13ff08f 	ldh	r4,-62(fp)
   85940:	00839100 	call	83910 <sd_card_read>
   85944:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.width = bmp_header.width | data << 16;
   85948:	e0fff617 	ldw	r3,-40(fp)
   8594c:	e0bff00b 	ldhu	r2,-64(fp)
   85950:	1004943a 	slli	r2,r2,16
   85954:	1884b03a 	or	r2,r3,r2
   85958:	e0bff615 	stw	r2,-40(fp)
			data = sd_card_read(file_handle);
   8595c:	e13ff08f 	ldh	r4,-62(fp)
   85960:	00839100 	call	83910 <sd_card_read>
   85964:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.width = bmp_header.width | data << 24;
   85968:	e0fff617 	ldw	r3,-40(fp)
   8596c:	e0bff00b 	ldhu	r2,-64(fp)
   85970:	1004963a 	slli	r2,r2,24
   85974:	1884b03a 	or	r2,r3,r2
   85978:	e0bff615 	stw	r2,-40(fp)

			data = sd_card_read(file_handle);
   8597c:	e13ff08f 	ldh	r4,-62(fp)
   85980:	00839100 	call	83910 <sd_card_read>
   85984:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.height = data;
   85988:	e0bff00b 	ldhu	r2,-64(fp)
   8598c:	e0bff715 	stw	r2,-36(fp)
			data = sd_card_read(file_handle);
   85990:	e13ff08f 	ldh	r4,-62(fp)
   85994:	00839100 	call	83910 <sd_card_read>
   85998:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.height = bmp_header.height | data << 8;
   8599c:	e0fff717 	ldw	r3,-36(fp)
   859a0:	e0bff00b 	ldhu	r2,-64(fp)
   859a4:	1004923a 	slli	r2,r2,8
   859a8:	1884b03a 	or	r2,r3,r2
   859ac:	e0bff715 	stw	r2,-36(fp)
			data = sd_card_read(file_handle);
   859b0:	e13ff08f 	ldh	r4,-62(fp)
   859b4:	00839100 	call	83910 <sd_card_read>
   859b8:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.height = bmp_header.height | data << 16;
   859bc:	e0fff717 	ldw	r3,-36(fp)
   859c0:	e0bff00b 	ldhu	r2,-64(fp)
   859c4:	1004943a 	slli	r2,r2,16
   859c8:	1884b03a 	or	r2,r3,r2
   859cc:	e0bff715 	stw	r2,-36(fp)
			data = sd_card_read(file_handle);
   859d0:	e13ff08f 	ldh	r4,-62(fp)
   859d4:	00839100 	call	83910 <sd_card_read>
   859d8:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.height = bmp_header.height | data << 24;
   859dc:	e0fff717 	ldw	r3,-36(fp)
   859e0:	e0bff00b 	ldhu	r2,-64(fp)
   859e4:	1004963a 	slli	r2,r2,24
   859e8:	1884b03a 	or	r2,r3,r2
   859ec:	e0bff715 	stw	r2,-36(fp)

			data = sd_card_read(file_handle);
   859f0:	e13ff08f 	ldh	r4,-62(fp)
   859f4:	00839100 	call	83910 <sd_card_read>
   859f8:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.num_plane = data;
   859fc:	e0bff00b 	ldhu	r2,-64(fp)
   85a00:	e0bff80d 	sth	r2,-32(fp)
			data = sd_card_read(file_handle);
   85a04:	e13ff08f 	ldh	r4,-62(fp)
   85a08:	00839100 	call	83910 <sd_card_read>
   85a0c:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.num_plane = bmp_header.num_plane | data << 8;
   85a10:	e0fff80b 	ldhu	r3,-32(fp)
   85a14:	e0bff00b 	ldhu	r2,-64(fp)
   85a18:	1004923a 	slli	r2,r2,8
   85a1c:	1884b03a 	or	r2,r3,r2
   85a20:	e0bff80d 	sth	r2,-32(fp)

			data = sd_card_read(file_handle);
   85a24:	e13ff08f 	ldh	r4,-62(fp)
   85a28:	00839100 	call	83910 <sd_card_read>
   85a2c:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.num_bits_per_pixel = data;
   85a30:	e0bff00b 	ldhu	r2,-64(fp)
   85a34:	e0bff88d 	sth	r2,-30(fp)
			data = sd_card_read(file_handle);
   85a38:	e13ff08f 	ldh	r4,-62(fp)
   85a3c:	00839100 	call	83910 <sd_card_read>
   85a40:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.num_bits_per_pixel = bmp_header.num_bits_per_pixel | data << 8;
   85a44:	e0fff88b 	ldhu	r3,-30(fp)
   85a48:	e0bff00b 	ldhu	r2,-64(fp)
   85a4c:	1004923a 	slli	r2,r2,8
   85a50:	1884b03a 	or	r2,r3,r2
   85a54:	e0bff88d 	sth	r2,-30(fp)

			data = sd_card_read(file_handle);
   85a58:	e13ff08f 	ldh	r4,-62(fp)
   85a5c:	00839100 	call	83910 <sd_card_read>
   85a60:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.compress_mode = data;
   85a64:	e0bff00b 	ldhu	r2,-64(fp)
   85a68:	e0bff915 	stw	r2,-28(fp)
			data = sd_card_read(file_handle);
   85a6c:	e13ff08f 	ldh	r4,-62(fp)
   85a70:	00839100 	call	83910 <sd_card_read>
   85a74:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.compress_mode = bmp_header.compress_mode | data << 8;
   85a78:	e0fff917 	ldw	r3,-28(fp)
   85a7c:	e0bff00b 	ldhu	r2,-64(fp)
   85a80:	1004923a 	slli	r2,r2,8
   85a84:	1884b03a 	or	r2,r3,r2
   85a88:	e0bff915 	stw	r2,-28(fp)
			data = sd_card_read(file_handle);
   85a8c:	e13ff08f 	ldh	r4,-62(fp)
   85a90:	00839100 	call	83910 <sd_card_read>
   85a94:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.compress_mode = bmp_header.compress_mode | data << 16;
   85a98:	e0fff917 	ldw	r3,-28(fp)
   85a9c:	e0bff00b 	ldhu	r2,-64(fp)
   85aa0:	1004943a 	slli	r2,r2,16
   85aa4:	1884b03a 	or	r2,r3,r2
   85aa8:	e0bff915 	stw	r2,-28(fp)
			data = sd_card_read(file_handle);
   85aac:	e13ff08f 	ldh	r4,-62(fp)
   85ab0:	00839100 	call	83910 <sd_card_read>
   85ab4:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.compress_mode = bmp_header.compress_mode | data << 24;
   85ab8:	e0fff917 	ldw	r3,-28(fp)
   85abc:	e0bff00b 	ldhu	r2,-64(fp)
   85ac0:	1004963a 	slli	r2,r2,24
   85ac4:	1884b03a 	or	r2,r3,r2
   85ac8:	e0bff915 	stw	r2,-28(fp)

			data = sd_card_read(file_handle);
   85acc:	e13ff08f 	ldh	r4,-62(fp)
   85ad0:	00839100 	call	83910 <sd_card_read>
   85ad4:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.data_size = data;
   85ad8:	e0bff00b 	ldhu	r2,-64(fp)
   85adc:	e0bffa15 	stw	r2,-24(fp)
			data = sd_card_read(file_handle);
   85ae0:	e13ff08f 	ldh	r4,-62(fp)
   85ae4:	00839100 	call	83910 <sd_card_read>
   85ae8:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.data_size = bmp_header.data_size | data << 8;
   85aec:	e0fffa17 	ldw	r3,-24(fp)
   85af0:	e0bff00b 	ldhu	r2,-64(fp)
   85af4:	1004923a 	slli	r2,r2,8
   85af8:	1884b03a 	or	r2,r3,r2
   85afc:	e0bffa15 	stw	r2,-24(fp)
			data = sd_card_read(file_handle);
   85b00:	e13ff08f 	ldh	r4,-62(fp)
   85b04:	00839100 	call	83910 <sd_card_read>
   85b08:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.data_size = bmp_header.data_size | data << 16;
   85b0c:	e0fffa17 	ldw	r3,-24(fp)
   85b10:	e0bff00b 	ldhu	r2,-64(fp)
   85b14:	1004943a 	slli	r2,r2,16
   85b18:	1884b03a 	or	r2,r3,r2
   85b1c:	e0bffa15 	stw	r2,-24(fp)
			data = sd_card_read(file_handle);
   85b20:	e13ff08f 	ldh	r4,-62(fp)
   85b24:	00839100 	call	83910 <sd_card_read>
   85b28:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.data_size = bmp_header.data_size | data << 24;
   85b2c:	e0fffa17 	ldw	r3,-24(fp)
   85b30:	e0bff00b 	ldhu	r2,-64(fp)
   85b34:	1004963a 	slli	r2,r2,24
   85b38:	1884b03a 	or	r2,r3,r2
   85b3c:	e0bffa15 	stw	r2,-24(fp)

			data = sd_card_read(file_handle);
   85b40:	e13ff08f 	ldh	r4,-62(fp)
   85b44:	00839100 	call	83910 <sd_card_read>
   85b48:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.hor_resolution = data;
   85b4c:	e0bff00b 	ldhu	r2,-64(fp)
   85b50:	e0bffb15 	stw	r2,-20(fp)
			data = sd_card_read(file_handle);
   85b54:	e13ff08f 	ldh	r4,-62(fp)
   85b58:	00839100 	call	83910 <sd_card_read>
   85b5c:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.hor_resolution = bmp_header.hor_resolution | data << 8;
   85b60:	e0fffb17 	ldw	r3,-20(fp)
   85b64:	e0bff00b 	ldhu	r2,-64(fp)
   85b68:	1004923a 	slli	r2,r2,8
   85b6c:	1884b03a 	or	r2,r3,r2
   85b70:	e0bffb15 	stw	r2,-20(fp)
			data = sd_card_read(file_handle);
   85b74:	e13ff08f 	ldh	r4,-62(fp)
   85b78:	00839100 	call	83910 <sd_card_read>
   85b7c:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.hor_resolution = bmp_header.hor_resolution | data << 16;
   85b80:	e0fffb17 	ldw	r3,-20(fp)
   85b84:	e0bff00b 	ldhu	r2,-64(fp)
   85b88:	1004943a 	slli	r2,r2,16
   85b8c:	1884b03a 	or	r2,r3,r2
   85b90:	e0bffb15 	stw	r2,-20(fp)
			data = sd_card_read(file_handle);
   85b94:	e13ff08f 	ldh	r4,-62(fp)
   85b98:	00839100 	call	83910 <sd_card_read>
   85b9c:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.hor_resolution = bmp_header.hor_resolution | data << 24;
   85ba0:	e0fffb17 	ldw	r3,-20(fp)
   85ba4:	e0bff00b 	ldhu	r2,-64(fp)
   85ba8:	1004963a 	slli	r2,r2,24
   85bac:	1884b03a 	or	r2,r3,r2
   85bb0:	e0bffb15 	stw	r2,-20(fp)

			data = sd_card_read(file_handle);
   85bb4:	e13ff08f 	ldh	r4,-62(fp)
   85bb8:	00839100 	call	83910 <sd_card_read>
   85bbc:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.ver_resolution = data;
   85bc0:	e0bff00b 	ldhu	r2,-64(fp)
   85bc4:	e0bffc15 	stw	r2,-16(fp)
			data = sd_card_read(file_handle);
   85bc8:	e13ff08f 	ldh	r4,-62(fp)
   85bcc:	00839100 	call	83910 <sd_card_read>
   85bd0:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.ver_resolution = bmp_header.ver_resolution | data << 8;
   85bd4:	e0fffc17 	ldw	r3,-16(fp)
   85bd8:	e0bff00b 	ldhu	r2,-64(fp)
   85bdc:	1004923a 	slli	r2,r2,8
   85be0:	1884b03a 	or	r2,r3,r2
   85be4:	e0bffc15 	stw	r2,-16(fp)
			data = sd_card_read(file_handle);
   85be8:	e13ff08f 	ldh	r4,-62(fp)
   85bec:	00839100 	call	83910 <sd_card_read>
   85bf0:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.ver_resolution = bmp_header.ver_resolution | data << 16;
   85bf4:	e0fffc17 	ldw	r3,-16(fp)
   85bf8:	e0bff00b 	ldhu	r2,-64(fp)
   85bfc:	1004943a 	slli	r2,r2,16
   85c00:	1884b03a 	or	r2,r3,r2
   85c04:	e0bffc15 	stw	r2,-16(fp)
			data = sd_card_read(file_handle);
   85c08:	e13ff08f 	ldh	r4,-62(fp)
   85c0c:	00839100 	call	83910 <sd_card_read>
   85c10:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.ver_resolution = bmp_header.ver_resolution | data << 24;
   85c14:	e0fffc17 	ldw	r3,-16(fp)
   85c18:	e0bff00b 	ldhu	r2,-64(fp)
   85c1c:	1004963a 	slli	r2,r2,24
   85c20:	1884b03a 	or	r2,r3,r2
   85c24:	e0bffc15 	stw	r2,-16(fp)

			data = sd_card_read(file_handle);
   85c28:	e13ff08f 	ldh	r4,-62(fp)
   85c2c:	00839100 	call	83910 <sd_card_read>
   85c30:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.num_color_in_palette = data;
   85c34:	e0bff00b 	ldhu	r2,-64(fp)
   85c38:	e0bffd15 	stw	r2,-12(fp)
			data = sd_card_read(file_handle);
   85c3c:	e13ff08f 	ldh	r4,-62(fp)
   85c40:	00839100 	call	83910 <sd_card_read>
   85c44:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.num_color_in_palette = bmp_header.num_color_in_palette | data << 8;
   85c48:	e0fffd17 	ldw	r3,-12(fp)
   85c4c:	e0bff00b 	ldhu	r2,-64(fp)
   85c50:	1004923a 	slli	r2,r2,8
   85c54:	1884b03a 	or	r2,r3,r2
   85c58:	e0bffd15 	stw	r2,-12(fp)
			data = sd_card_read(file_handle);
   85c5c:	e13ff08f 	ldh	r4,-62(fp)
   85c60:	00839100 	call	83910 <sd_card_read>
   85c64:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.num_color_in_palette = bmp_header.num_color_in_palette | data << 16;
   85c68:	e0fffd17 	ldw	r3,-12(fp)
   85c6c:	e0bff00b 	ldhu	r2,-64(fp)
   85c70:	1004943a 	slli	r2,r2,16
   85c74:	1884b03a 	or	r2,r3,r2
   85c78:	e0bffd15 	stw	r2,-12(fp)
			data = sd_card_read(file_handle);
   85c7c:	e13ff08f 	ldh	r4,-62(fp)
   85c80:	00839100 	call	83910 <sd_card_read>
   85c84:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.num_color_in_palette = bmp_header.num_color_in_palette | data << 24;
   85c88:	e0fffd17 	ldw	r3,-12(fp)
   85c8c:	e0bff00b 	ldhu	r2,-64(fp)
   85c90:	1004963a 	slli	r2,r2,24
   85c94:	1884b03a 	or	r2,r3,r2
   85c98:	e0bffd15 	stw	r2,-12(fp)

			data = sd_card_read(file_handle);
   85c9c:	e13ff08f 	ldh	r4,-62(fp)
   85ca0:	00839100 	call	83910 <sd_card_read>
   85ca4:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.important_color = data;
   85ca8:	e0bff00b 	ldhu	r2,-64(fp)
   85cac:	e0bffe15 	stw	r2,-8(fp)
			data = sd_card_read(file_handle);
   85cb0:	e13ff08f 	ldh	r4,-62(fp)
   85cb4:	00839100 	call	83910 <sd_card_read>
   85cb8:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.important_color = bmp_header.important_color | data << 8;
   85cbc:	e0fffe17 	ldw	r3,-8(fp)
   85cc0:	e0bff00b 	ldhu	r2,-64(fp)
   85cc4:	1004923a 	slli	r2,r2,8
   85cc8:	1884b03a 	or	r2,r3,r2
   85ccc:	e0bffe15 	stw	r2,-8(fp)
			data = sd_card_read(file_handle);
   85cd0:	e13ff08f 	ldh	r4,-62(fp)
   85cd4:	00839100 	call	83910 <sd_card_read>
   85cd8:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.important_color = bmp_header.important_color | data << 16;
   85cdc:	e0fffe17 	ldw	r3,-8(fp)
   85ce0:	e0bff00b 	ldhu	r2,-64(fp)
   85ce4:	1004943a 	slli	r2,r2,16
   85ce8:	1884b03a 	or	r2,r3,r2
   85cec:	e0bffe15 	stw	r2,-8(fp)
			data = sd_card_read(file_handle);
   85cf0:	e13ff08f 	ldh	r4,-62(fp)
   85cf4:	00839100 	call	83910 <sd_card_read>
   85cf8:	e0bff00d 	sth	r2,-64(fp)
			bmp_header.important_color = bmp_header.important_color | data << 24;
   85cfc:	e0fffe17 	ldw	r3,-8(fp)
   85d00:	e0bff00b 	ldhu	r2,-64(fp)
   85d04:	1004963a 	slli	r2,r2,24
   85d08:	1884b03a 	or	r2,r3,r2
   85d0c:	e0bffe15 	stw	r2,-8(fp)

			printf("Reading image of dimension: %d x %d\n", bmp_header.width, bmp_header.height);
   85d10:	e17ff617 	ldw	r5,-40(fp)
   85d14:	e1bff717 	ldw	r6,-36(fp)
   85d18:	010002b4 	movhi	r4,10
   85d1c:	213eec04 	addi	r4,r4,-1104
   85d20:	00879680 	call	87968 <printf>
			if (bmp_header.height > 0) {
   85d24:	e0bff717 	ldw	r2,-36(fp)
   85d28:	10800050 	cmplti	r2,r2,1
   85d2c:	1000031e 	bne	r2,zero,85d3c <SD_ReadQ_2+0x6b0>
				printf("Positive height detected, image will be loaded as upside-down\n");
   85d30:	010002b4 	movhi	r4,10
   85d34:	213ef604 	addi	r4,r4,-1064
   85d38:	0087aa40 	call	87aa4 <puts>
			}



			// This is the first data for posting
			data = sd_card_read(file_handle);
   85d3c:	e13ff08f 	ldh	r4,-62(fp)
   85d40:	00839100 	call	83910 <sd_card_read>
   85d44:	e0bff00d 	sth	r2,-64(fp)
			image_size = 1;
   85d48:	00800044 	movi	r2,1
   85d4c:	e0bfee15 	stw	r2,-72(fp)

			file_opened = 1;
   85d50:	00800044 	movi	r2,1
   85d54:	e0bfef15 	stw	r2,-68(fp)
		}

		while (((return_code = OSQPost(SDReadQueue[1], (void *)(data & 0xFF))) == OS_NO_ERR) && (image_size < bmp_header.data_size)) {
   85d58:	00000606 	br	85d74 <SD_ReadQ_2+0x6e8>
			data = sd_card_read(file_handle);
   85d5c:	e13ff08f 	ldh	r4,-62(fp)
   85d60:	00839100 	call	83910 <sd_card_read>
   85d64:	e0bff00d 	sth	r2,-64(fp)
			image_size++;
   85d68:	e0bfee17 	ldw	r2,-72(fp)
   85d6c:	10800044 	addi	r2,r2,1
   85d70:	e0bfee15 	stw	r2,-72(fp)
			image_size = 1;

			file_opened = 1;
		}

		while (((return_code = OSQPost(SDReadQueue[1], (void *)(data & 0xFF))) == OS_NO_ERR) && (image_size < bmp_header.data_size)) {
   85d74:	008002b4 	movhi	r2,10
   85d78:	108e3004 	addi	r2,r2,14528
   85d7c:	11000017 	ldw	r4,0(r2)
   85d80:	e0bff00b 	ldhu	r2,-64(fp)
   85d84:	10803fcc 	andi	r2,r2,255
   85d88:	100b883a 	mov	r5,r2
   85d8c:	00996480 	call	99648 <OSQPost>
   85d90:	e0bff105 	stb	r2,-60(fp)
   85d94:	e0bff103 	ldbu	r2,-60(fp)
   85d98:	10803fcc 	andi	r2,r2,255
   85d9c:	1004c03a 	cmpne	r2,r2,zero
   85da0:	1000031e 	bne	r2,zero,85db0 <SD_ReadQ_2+0x724>
   85da4:	e0fffa17 	ldw	r3,-24(fp)
   85da8:	e0bfee17 	ldw	r2,-72(fp)
   85dac:	10ffeb16 	blt	r2,r3,85d5c <SD_ReadQ_2+0x6d0>
			data = sd_card_read(file_handle);
			image_size++;
		}

		if (image_size == bmp_header.data_size) {
   85db0:	e0fffa17 	ldw	r3,-24(fp)
   85db4:	e0bfee17 	ldw	r2,-72(fp)
   85db8:	1880071e 	bne	r3,r2,85dd8 <SD_ReadQ_2+0x74c>
			sd_card_fclose(file_handle);
   85dbc:	e13ff08f 	ldh	r4,-62(fp)
   85dc0:	008427c0 	call	8427c <sd_card_fclose>

			printf("Done reading image: (%d bytes)\n", image_size);
   85dc4:	010002b4 	movhi	r4,10
   85dc8:	213f0604 	addi	r4,r4,-1000
   85dcc:	e17fee17 	ldw	r5,-72(fp)
   85dd0:	00879680 	call	87968 <printf>
			file_opened = 0;
   85dd4:	e03fef15 	stw	zero,-68(fp)
		}

		// printf("RQ filled (%d bytes)\n", image_size);
		return_code = OSMutexPost(SDMutex);
   85dd8:	d1270c17 	ldw	r4,-25552(gp)
   85ddc:	00984a80 	call	984a8 <OSMutexPost>
   85de0:	e0bff105 	stb	r2,-60(fp)
		alt_ucosii_check_return_code(return_code);
   85de4:	e0bff103 	ldbu	r2,-60(fp)
   85de8:	11003fcc 	andi	r4,r2,255
   85dec:	00844500 	call	84450 <alt_ucosii_check_return_code>

		OSFlagPost(SDCardFlag, SD_READ_NEED_FILL, OS_FLAG_CLR, &return_code);
   85df0:	d1270d17 	ldw	r4,-25548(gp)
   85df4:	e1fff104 	addi	r7,fp,-60
   85df8:	01400104 	movi	r5,4
   85dfc:	000d883a 	mov	r6,zero
   85e00:	009595c0 	call	9595c <OSFlagPost>
		alt_ucosii_check_return_code(return_code);
   85e04:	e0bff103 	ldbu	r2,-60(fp)
   85e08:	11003fcc 	andi	r4,r2,255
   85e0c:	00844500 	call	84450 <alt_ucosii_check_return_code>
		OSFlagPost(SDCardFlag, SD_READ_DATA_READY, OS_FLAG_SET, &return_code);
   85e10:	d1270d17 	ldw	r4,-25548(gp)
   85e14:	e1fff104 	addi	r7,fp,-60
   85e18:	01400204 	movi	r5,8
   85e1c:	01800044 	movi	r6,1
   85e20:	009595c0 	call	9595c <OSFlagPost>
		alt_ucosii_check_return_code(return_code);
   85e24:	e0bff103 	ldbu	r2,-60(fp)
   85e28:	11003fcc 	andi	r4,r2,255
   85e2c:	00844500 	call	84450 <alt_ucosii_check_return_code>
	}
   85e30:	003e1d06 	br	856a8 <SD_ReadQ_2+0x1c>
}
   85e34:	e037883a 	mov	sp,fp
   85e38:	dfc00117 	ldw	ra,4(sp)
   85e3c:	df000017 	ldw	fp,0(sp)
   85e40:	dec00204 	addi	sp,sp,8
   85e44:	f800283a 	ret

00085e48 <SD_write_task>:


void SD_write_task(void *pdata) {
   85e48:	deffe404 	addi	sp,sp,-112
   85e4c:	dfc01b15 	stw	ra,108(sp)
   85e50:	df001a15 	stw	fp,104(sp)
   85e54:	df001a04 	addi	fp,sp,104
   85e58:	e13fff15 	stw	r4,-4(fp)
	INT8U return_code = OS_NO_ERR;
   85e5c:	e03fee05 	stb	zero,-72(fp)
	short int file_handle;
	unsigned short int data;
	int file_opened = 0;
   85e60:	e03fec15 	stw	zero,-80(fp)
	int file_number = 0;
   85e64:	e03feb15 	stw	zero,-84(fp)
	int status;
	int image_size;
	int image_width, image_height;
	
	while (1) {
		OSFlagPend(SDCardFlag, SD_PRESENCE_FLAG | SD_FILESYSTEM_FLAG | SD_WRITE_DATA_READY, OS_FLAG_WAIT_SET_ALL, 0, &return_code);
   85e68:	d1270d17 	ldw	r4,-25548(gp)
   85e6c:	e0bfee04 	addi	r2,fp,-72
   85e70:	d8800015 	stw	r2,0(sp)
   85e74:	014008c4 	movi	r5,35
   85e78:	01800084 	movi	r6,2
   85e7c:	000f883a 	mov	r7,zero
   85e80:	00952b00 	call	952b0 <OSFlagPend>
		alt_ucosii_check_return_code(return_code);
   85e84:	e0bfee03 	ldbu	r2,-72(fp)
   85e88:	11003fcc 	andi	r4,r2,255
   85e8c:	00844500 	call	84450 <alt_ucosii_check_return_code>
				
		// printf("W: getting SDMutex\n");
		OSMutexPend(SDMutex, 0, &return_code);
   85e90:	d1270c17 	ldw	r4,-25552(gp)
   85e94:	e1bfee04 	addi	r6,fp,-72
   85e98:	000b883a 	mov	r5,zero
   85e9c:	0097e180 	call	97e18 <OSMutexPend>
		alt_ucosii_check_return_code(return_code);
   85ea0:	e0bfee03 	ldbu	r2,-72(fp)
   85ea4:	11003fcc 	andi	r4,r2,255
   85ea8:	00844500 	call	84450 <alt_ucosii_check_return_code>
		
		if (file_opened == 0) {
   85eac:	e0bfec17 	ldw	r2,-80(fp)
   85eb0:	1004c03a 	cmpne	r2,r2,zero
   85eb4:	1002661e 	bne	r2,zero,86850 <SD_write_task+0xa08>
			sprintf(filename, "OUTPIC%d.bmp", file_number++);
   85eb8:	e1bfeb17 	ldw	r6,-84(fp)
   85ebc:	e0bfeb17 	ldw	r2,-84(fp)
   85ec0:	10800044 	addi	r2,r2,1
   85ec4:	e0bfeb15 	stw	r2,-84(fp)
   85ec8:	e13fee44 	addi	r4,fp,-71
   85ecc:	014002b4 	movhi	r5,10
   85ed0:	297f1f04 	addi	r5,r5,-900
   85ed4:	0087ab80 	call	87ab8 <sprintf>
            
		while ((file_handle = sd_card_fopen(filename, 1)) < 0) {
   85ed8:	00000806 	br	85efc <SD_write_task+0xb4>
			sprintf(filename, "OUTPIC%d.bmp", file_number++);                 
   85edc:	e1bfeb17 	ldw	r6,-84(fp)
   85ee0:	e0bfeb17 	ldw	r2,-84(fp)
   85ee4:	10800044 	addi	r2,r2,1
   85ee8:	e0bfeb15 	stw	r2,-84(fp)
   85eec:	e13fee44 	addi	r4,fp,-71
   85ef0:	014002b4 	movhi	r5,10
   85ef4:	297f1f04 	addi	r5,r5,-900
   85ef8:	0087ab80 	call	87ab8 <sprintf>
		alt_ucosii_check_return_code(return_code);
		
		if (file_opened == 0) {
			sprintf(filename, "OUTPIC%d.bmp", file_number++);
            
		while ((file_handle = sd_card_fopen(filename, 1)) < 0) {
   85efc:	e13fee44 	addi	r4,fp,-71
   85f00:	01400044 	movi	r5,1
   85f04:	008344c0 	call	8344c <sd_card_fopen>
   85f08:	e0bfed8d 	sth	r2,-74(fp)
   85f0c:	e0bfed8f 	ldh	r2,-74(fp)
   85f10:	1004803a 	cmplt	r2,r2,zero
   85f14:	103ff11e 	bne	r2,zero,85edc <SD_write_task+0x94>
			sprintf(filename, "OUTPIC%d.bmp", file_number++);                 
		}
        
		file_opened = 1;
   85f18:	00800044 	movi	r2,1
   85f1c:	e0bfec15 	stw	r2,-80(fp)
			
			printf("Saving image to file (%s)...\n", filename);
   85f20:	e17fee44 	addi	r5,fp,-71
   85f24:	010002b4 	movhi	r4,10
   85f28:	213f2304 	addi	r4,r4,-884
   85f2c:	00879680 	call	87968 <printf>
            
			bmp_header.width = (int)OSMboxPend(WriteImageWidthMailbox, 0, &return_code);
   85f30:	d1271517 	ldw	r4,-25516(gp)
   85f34:	e1bfee04 	addi	r6,fp,-72
   85f38:	000b883a 	mov	r5,zero
   85f3c:	00966940 	call	96694 <OSMboxPend>
   85f40:	e0bff615 	stw	r2,-40(fp)
			alt_ucosii_check_return_code(return_code);
   85f44:	e0bfee03 	ldbu	r2,-72(fp)
   85f48:	11003fcc 	andi	r4,r2,255
   85f4c:	00844500 	call	84450 <alt_ucosii_check_return_code>
			bmp_header.height = (int)OSMboxPend(WriteImageHeightMailbox, 0, &return_code);
   85f50:	d1271017 	ldw	r4,-25536(gp)
   85f54:	e1bfee04 	addi	r6,fp,-72
   85f58:	000b883a 	mov	r5,zero
   85f5c:	00966940 	call	96694 <OSMboxPend>
   85f60:	e0bff715 	stw	r2,-36(fp)
			alt_ucosii_check_return_code(return_code);
   85f64:	e0bfee03 	ldbu	r2,-72(fp)
   85f68:	11003fcc 	andi	r4,r2,255
   85f6c:	00844500 	call	84450 <alt_ucosii_check_return_code>
			
			image_width = bmp_header.width;
   85f70:	e0bff617 	ldw	r2,-40(fp)
   85f74:	e0bfe815 	stw	r2,-96(fp)
			if (bmp_header.height < 0) image_height = -bmp_header.height;
   85f78:	e0bff717 	ldw	r2,-36(fp)
   85f7c:	1004403a 	cmpge	r2,r2,zero
   85f80:	1000041e 	bne	r2,zero,85f94 <SD_write_task+0x14c>
   85f84:	e0bff717 	ldw	r2,-36(fp)
   85f88:	0085c83a 	sub	r2,zero,r2
   85f8c:	e0bfe715 	stw	r2,-100(fp)
   85f90:	00000206 	br	85f9c <SD_write_task+0x154>
			else image_height = bmp_header.height;
   85f94:	e0bff717 	ldw	r2,-36(fp)
   85f98:	e0bfe715 	stw	r2,-100(fp)
			
			// BMP header
			bmp_header.magic_number = 'B' << 8 | 'M';
   85f9c:	00909344 	movi	r2,16973
   85fa0:	e0bff20d 	sth	r2,-56(fp)
			bmp_header.file_size = image_height * image_width * 3 + 54;
   85fa4:	e13fe717 	ldw	r4,-100(fp)
   85fa8:	e17fe817 	ldw	r5,-96(fp)
   85fac:	00877e40 	call	877e4 <__mulsi3>
   85fb0:	1007883a 	mov	r3,r2
   85fb4:	1805883a 	mov	r2,r3
   85fb8:	1085883a 	add	r2,r2,r2
   85fbc:	10c5883a 	add	r2,r2,r3
   85fc0:	10800d84 	addi	r2,r2,54
   85fc4:	e0bff315 	stw	r2,-52(fp)
			bmp_header.data_offset = 54;
   85fc8:	00800d84 	movi	r2,54
   85fcc:	e0bff415 	stw	r2,-48(fp)
			bmp_header.header_size = 40;
   85fd0:	00800a04 	movi	r2,40
   85fd4:	e0bff515 	stw	r2,-44(fp)
			// bmp_header.width = 640;
			// bmp_header.height = -480;
			bmp_header.num_plane = 1;
   85fd8:	00800044 	movi	r2,1
   85fdc:	e0bff80d 	sth	r2,-32(fp)
			bmp_header.num_bits_per_pixel = 24;
   85fe0:	00800604 	movi	r2,24
   85fe4:	e0bff88d 	sth	r2,-30(fp)
			bmp_header.compress_mode = 0;
   85fe8:	e03ff915 	stw	zero,-28(fp)
			bmp_header.data_size = image_height * image_width * 3;
   85fec:	e13fe717 	ldw	r4,-100(fp)
   85ff0:	e17fe817 	ldw	r5,-96(fp)
   85ff4:	00877e40 	call	877e4 <__mulsi3>
   85ff8:	1007883a 	mov	r3,r2
   85ffc:	1805883a 	mov	r2,r3
   86000:	1085883a 	add	r2,r2,r2
   86004:	10c5883a 	add	r2,r2,r3
   86008:	e0bffa15 	stw	r2,-24(fp)
			bmp_header.hor_resolution = 0;
   8600c:	e03ffb15 	stw	zero,-20(fp)
			bmp_header.ver_resolution = 0;
   86010:	e03ffc15 	stw	zero,-16(fp)
			bmp_header.num_color_in_palette = 0;
   86014:	e03ffd15 	stw	zero,-12(fp)
			bmp_header.important_color = 0;
   86018:	e03ffe15 	stw	zero,-8(fp)

			status = sd_card_write(file_handle, (char)((bmp_header.magic_number >> 8) & 0xFF));
   8601c:	e13fed8f 	ldh	r4,-74(fp)
   86020:	e0bff20b 	ldhu	r2,-56(fp)
   86024:	10bfffcc 	andi	r2,r2,65535
   86028:	1004d23a 	srli	r2,r2,8
   8602c:	1007883a 	mov	r3,r2
   86030:	00bfffc4 	movi	r2,-1
   86034:	1884703a 	and	r2,r3,r2
   86038:	11403fcc 	andi	r5,r2,255
   8603c:	2940201c 	xori	r5,r5,128
   86040:	297fe004 	addi	r5,r5,-128
   86044:	0083c8c0 	call	83c8c <sd_card_write>
   86048:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.magic_number) & 0xFF));
   8604c:	e13fed8f 	ldh	r4,-74(fp)
   86050:	e0bff20b 	ldhu	r2,-56(fp)
   86054:	1007883a 	mov	r3,r2
   86058:	00bfffc4 	movi	r2,-1
   8605c:	1884703a 	and	r2,r3,r2
   86060:	11403fcc 	andi	r5,r2,255
   86064:	2940201c 	xori	r5,r5,128
   86068:	297fe004 	addi	r5,r5,-128
   8606c:	0083c8c0 	call	83c8c <sd_card_write>
   86070:	e0bfea15 	stw	r2,-88(fp)

			status = sd_card_write(file_handle, (char)((bmp_header.file_size) & 0xFF));
   86074:	e13fed8f 	ldh	r4,-74(fp)
   86078:	e0bff317 	ldw	r2,-52(fp)
   8607c:	11403fcc 	andi	r5,r2,255
   86080:	2940201c 	xori	r5,r5,128
   86084:	297fe004 	addi	r5,r5,-128
   86088:	0083c8c0 	call	83c8c <sd_card_write>
   8608c:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.file_size >> 8) & 0xFF));
   86090:	e13fed8f 	ldh	r4,-74(fp)
   86094:	e0bff317 	ldw	r2,-52(fp)
   86098:	1004d23a 	srli	r2,r2,8
   8609c:	11403fcc 	andi	r5,r2,255
   860a0:	2940201c 	xori	r5,r5,128
   860a4:	297fe004 	addi	r5,r5,-128
   860a8:	0083c8c0 	call	83c8c <sd_card_write>
   860ac:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.file_size >> 16) & 0xFF));
   860b0:	e13fed8f 	ldh	r4,-74(fp)
   860b4:	e0bff317 	ldw	r2,-52(fp)
   860b8:	1004d43a 	srli	r2,r2,16
   860bc:	11403fcc 	andi	r5,r2,255
   860c0:	2940201c 	xori	r5,r5,128
   860c4:	297fe004 	addi	r5,r5,-128
   860c8:	0083c8c0 	call	83c8c <sd_card_write>
   860cc:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.file_size >> 24) & 0xFF));
   860d0:	e13fed8f 	ldh	r4,-74(fp)
   860d4:	e0bff317 	ldw	r2,-52(fp)
   860d8:	1004d63a 	srli	r2,r2,24
   860dc:	11403fcc 	andi	r5,r2,255
   860e0:	2940201c 	xori	r5,r5,128
   860e4:	297fe004 	addi	r5,r5,-128
   860e8:	0083c8c0 	call	83c8c <sd_card_write>
   860ec:	e0bfea15 	stw	r2,-88(fp)

			// unused
			status = sd_card_write(file_handle, 0);
   860f0:	e13fed8f 	ldh	r4,-74(fp)
   860f4:	000b883a 	mov	r5,zero
   860f8:	0083c8c0 	call	83c8c <sd_card_write>
   860fc:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, 0);
   86100:	e13fed8f 	ldh	r4,-74(fp)
   86104:	000b883a 	mov	r5,zero
   86108:	0083c8c0 	call	83c8c <sd_card_write>
   8610c:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, 0);
   86110:	e13fed8f 	ldh	r4,-74(fp)
   86114:	000b883a 	mov	r5,zero
   86118:	0083c8c0 	call	83c8c <sd_card_write>
   8611c:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, 0);
   86120:	e13fed8f 	ldh	r4,-74(fp)
   86124:	000b883a 	mov	r5,zero
   86128:	0083c8c0 	call	83c8c <sd_card_write>
   8612c:	e0bfea15 	stw	r2,-88(fp)

			status = sd_card_write(file_handle, (char)((bmp_header.data_offset) & 0xFF));
   86130:	e13fed8f 	ldh	r4,-74(fp)
   86134:	e0bff417 	ldw	r2,-48(fp)
   86138:	11403fcc 	andi	r5,r2,255
   8613c:	2940201c 	xori	r5,r5,128
   86140:	297fe004 	addi	r5,r5,-128
   86144:	0083c8c0 	call	83c8c <sd_card_write>
   86148:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.data_offset >> 8) & 0xFF));
   8614c:	e13fed8f 	ldh	r4,-74(fp)
   86150:	e0bff417 	ldw	r2,-48(fp)
   86154:	1004d23a 	srli	r2,r2,8
   86158:	11403fcc 	andi	r5,r2,255
   8615c:	2940201c 	xori	r5,r5,128
   86160:	297fe004 	addi	r5,r5,-128
   86164:	0083c8c0 	call	83c8c <sd_card_write>
   86168:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.data_offset >> 16) & 0xFF));
   8616c:	e13fed8f 	ldh	r4,-74(fp)
   86170:	e0bff417 	ldw	r2,-48(fp)
   86174:	1004d43a 	srli	r2,r2,16
   86178:	11403fcc 	andi	r5,r2,255
   8617c:	2940201c 	xori	r5,r5,128
   86180:	297fe004 	addi	r5,r5,-128
   86184:	0083c8c0 	call	83c8c <sd_card_write>
   86188:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.data_offset >> 24) & 0xFF));
   8618c:	e13fed8f 	ldh	r4,-74(fp)
   86190:	e0bff417 	ldw	r2,-48(fp)
   86194:	1004d63a 	srli	r2,r2,24
   86198:	11403fcc 	andi	r5,r2,255
   8619c:	2940201c 	xori	r5,r5,128
   861a0:	297fe004 	addi	r5,r5,-128
   861a4:	0083c8c0 	call	83c8c <sd_card_write>
   861a8:	e0bfea15 	stw	r2,-88(fp)

			status = sd_card_write(file_handle, (char)((bmp_header.header_size) & 0xFF));
   861ac:	e13fed8f 	ldh	r4,-74(fp)
   861b0:	e0bff517 	ldw	r2,-44(fp)
   861b4:	11403fcc 	andi	r5,r2,255
   861b8:	2940201c 	xori	r5,r5,128
   861bc:	297fe004 	addi	r5,r5,-128
   861c0:	0083c8c0 	call	83c8c <sd_card_write>
   861c4:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.header_size >> 8) & 0xFF));
   861c8:	e13fed8f 	ldh	r4,-74(fp)
   861cc:	e0bff517 	ldw	r2,-44(fp)
   861d0:	1004d23a 	srli	r2,r2,8
   861d4:	11403fcc 	andi	r5,r2,255
   861d8:	2940201c 	xori	r5,r5,128
   861dc:	297fe004 	addi	r5,r5,-128
   861e0:	0083c8c0 	call	83c8c <sd_card_write>
   861e4:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.header_size >> 16) & 0xFF));
   861e8:	e13fed8f 	ldh	r4,-74(fp)
   861ec:	e0bff517 	ldw	r2,-44(fp)
   861f0:	1004d43a 	srli	r2,r2,16
   861f4:	11403fcc 	andi	r5,r2,255
   861f8:	2940201c 	xori	r5,r5,128
   861fc:	297fe004 	addi	r5,r5,-128
   86200:	0083c8c0 	call	83c8c <sd_card_write>
   86204:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.header_size >> 24) & 0xFF));
   86208:	e13fed8f 	ldh	r4,-74(fp)
   8620c:	e0bff517 	ldw	r2,-44(fp)
   86210:	1004d63a 	srli	r2,r2,24
   86214:	11403fcc 	andi	r5,r2,255
   86218:	2940201c 	xori	r5,r5,128
   8621c:	297fe004 	addi	r5,r5,-128
   86220:	0083c8c0 	call	83c8c <sd_card_write>
   86224:	e0bfea15 	stw	r2,-88(fp)

			status = sd_card_write(file_handle, (char)((bmp_header.width) & 0xFF));
   86228:	e13fed8f 	ldh	r4,-74(fp)
   8622c:	e0bff617 	ldw	r2,-40(fp)
   86230:	1007883a 	mov	r3,r2
   86234:	00bfffc4 	movi	r2,-1
   86238:	1884703a 	and	r2,r3,r2
   8623c:	11403fcc 	andi	r5,r2,255
   86240:	2940201c 	xori	r5,r5,128
   86244:	297fe004 	addi	r5,r5,-128
   86248:	0083c8c0 	call	83c8c <sd_card_write>
   8624c:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.width >> 8) & 0xFF));
   86250:	e13fed8f 	ldh	r4,-74(fp)
   86254:	e0bff617 	ldw	r2,-40(fp)
   86258:	1005d23a 	srai	r2,r2,8
   8625c:	1007883a 	mov	r3,r2
   86260:	00bfffc4 	movi	r2,-1
   86264:	1884703a 	and	r2,r3,r2
   86268:	11403fcc 	andi	r5,r2,255
   8626c:	2940201c 	xori	r5,r5,128
   86270:	297fe004 	addi	r5,r5,-128
   86274:	0083c8c0 	call	83c8c <sd_card_write>
   86278:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.width >> 16) & 0xFF));
   8627c:	e13fed8f 	ldh	r4,-74(fp)
   86280:	e0bff617 	ldw	r2,-40(fp)
   86284:	1005d43a 	srai	r2,r2,16
   86288:	1007883a 	mov	r3,r2
   8628c:	00bfffc4 	movi	r2,-1
   86290:	1884703a 	and	r2,r3,r2
   86294:	11403fcc 	andi	r5,r2,255
   86298:	2940201c 	xori	r5,r5,128
   8629c:	297fe004 	addi	r5,r5,-128
   862a0:	0083c8c0 	call	83c8c <sd_card_write>
   862a4:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.width >> 24) & 0xFF));
   862a8:	e13fed8f 	ldh	r4,-74(fp)
   862ac:	e0bff617 	ldw	r2,-40(fp)
   862b0:	1005d63a 	srai	r2,r2,24
   862b4:	1007883a 	mov	r3,r2
   862b8:	00bfffc4 	movi	r2,-1
   862bc:	1884703a 	and	r2,r3,r2
   862c0:	11403fcc 	andi	r5,r2,255
   862c4:	2940201c 	xori	r5,r5,128
   862c8:	297fe004 	addi	r5,r5,-128
   862cc:	0083c8c0 	call	83c8c <sd_card_write>
   862d0:	e0bfea15 	stw	r2,-88(fp)

			status = sd_card_write(file_handle, (char)((bmp_header.height) & 0xFF));
   862d4:	e13fed8f 	ldh	r4,-74(fp)
   862d8:	e0bff717 	ldw	r2,-36(fp)
   862dc:	1007883a 	mov	r3,r2
   862e0:	00bfffc4 	movi	r2,-1
   862e4:	1884703a 	and	r2,r3,r2
   862e8:	11403fcc 	andi	r5,r2,255
   862ec:	2940201c 	xori	r5,r5,128
   862f0:	297fe004 	addi	r5,r5,-128
   862f4:	0083c8c0 	call	83c8c <sd_card_write>
   862f8:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.height >> 8) & 0xFF));
   862fc:	e13fed8f 	ldh	r4,-74(fp)
   86300:	e0bff717 	ldw	r2,-36(fp)
   86304:	1005d23a 	srai	r2,r2,8
   86308:	1007883a 	mov	r3,r2
   8630c:	00bfffc4 	movi	r2,-1
   86310:	1884703a 	and	r2,r3,r2
   86314:	11403fcc 	andi	r5,r2,255
   86318:	2940201c 	xori	r5,r5,128
   8631c:	297fe004 	addi	r5,r5,-128
   86320:	0083c8c0 	call	83c8c <sd_card_write>
   86324:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.height >> 16) & 0xFF));
   86328:	e13fed8f 	ldh	r4,-74(fp)
   8632c:	e0bff717 	ldw	r2,-36(fp)
   86330:	1005d43a 	srai	r2,r2,16
   86334:	1007883a 	mov	r3,r2
   86338:	00bfffc4 	movi	r2,-1
   8633c:	1884703a 	and	r2,r3,r2
   86340:	11403fcc 	andi	r5,r2,255
   86344:	2940201c 	xori	r5,r5,128
   86348:	297fe004 	addi	r5,r5,-128
   8634c:	0083c8c0 	call	83c8c <sd_card_write>
   86350:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.height >> 24) & 0xFF));
   86354:	e13fed8f 	ldh	r4,-74(fp)
   86358:	e0bff717 	ldw	r2,-36(fp)
   8635c:	1005d63a 	srai	r2,r2,24
   86360:	1007883a 	mov	r3,r2
   86364:	00bfffc4 	movi	r2,-1
   86368:	1884703a 	and	r2,r3,r2
   8636c:	11403fcc 	andi	r5,r2,255
   86370:	2940201c 	xori	r5,r5,128
   86374:	297fe004 	addi	r5,r5,-128
   86378:	0083c8c0 	call	83c8c <sd_card_write>
   8637c:	e0bfea15 	stw	r2,-88(fp)

			status = sd_card_write(file_handle, (char)((bmp_header.num_plane) & 0xFF));
   86380:	e13fed8f 	ldh	r4,-74(fp)
   86384:	e0bff80b 	ldhu	r2,-32(fp)
   86388:	1007883a 	mov	r3,r2
   8638c:	00bfffc4 	movi	r2,-1
   86390:	1884703a 	and	r2,r3,r2
   86394:	11403fcc 	andi	r5,r2,255
   86398:	2940201c 	xori	r5,r5,128
   8639c:	297fe004 	addi	r5,r5,-128
   863a0:	0083c8c0 	call	83c8c <sd_card_write>
   863a4:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.num_plane >> 8) & 0xFF));
   863a8:	e13fed8f 	ldh	r4,-74(fp)
   863ac:	e0bff80b 	ldhu	r2,-32(fp)
   863b0:	10bfffcc 	andi	r2,r2,65535
   863b4:	10a0001c 	xori	r2,r2,32768
   863b8:	10a00004 	addi	r2,r2,-32768
   863bc:	1005d23a 	srai	r2,r2,8
   863c0:	1007883a 	mov	r3,r2
   863c4:	00bfffc4 	movi	r2,-1
   863c8:	1884703a 	and	r2,r3,r2
   863cc:	11403fcc 	andi	r5,r2,255
   863d0:	2940201c 	xori	r5,r5,128
   863d4:	297fe004 	addi	r5,r5,-128
   863d8:	0083c8c0 	call	83c8c <sd_card_write>
   863dc:	e0bfea15 	stw	r2,-88(fp)

			status = sd_card_write(file_handle, (char)((bmp_header.num_bits_per_pixel) & 0xFF));
   863e0:	e13fed8f 	ldh	r4,-74(fp)
   863e4:	e0bff88b 	ldhu	r2,-30(fp)
   863e8:	1007883a 	mov	r3,r2
   863ec:	00bfffc4 	movi	r2,-1
   863f0:	1884703a 	and	r2,r3,r2
   863f4:	11403fcc 	andi	r5,r2,255
   863f8:	2940201c 	xori	r5,r5,128
   863fc:	297fe004 	addi	r5,r5,-128
   86400:	0083c8c0 	call	83c8c <sd_card_write>
   86404:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.num_bits_per_pixel >> 8) & 0xFF));
   86408:	e13fed8f 	ldh	r4,-74(fp)
   8640c:	e0bff88b 	ldhu	r2,-30(fp)
   86410:	10bfffcc 	andi	r2,r2,65535
   86414:	10a0001c 	xori	r2,r2,32768
   86418:	10a00004 	addi	r2,r2,-32768
   8641c:	1005d23a 	srai	r2,r2,8
   86420:	1007883a 	mov	r3,r2
   86424:	00bfffc4 	movi	r2,-1
   86428:	1884703a 	and	r2,r3,r2
   8642c:	11403fcc 	andi	r5,r2,255
   86430:	2940201c 	xori	r5,r5,128
   86434:	297fe004 	addi	r5,r5,-128
   86438:	0083c8c0 	call	83c8c <sd_card_write>
   8643c:	e0bfea15 	stw	r2,-88(fp)

			status = sd_card_write(file_handle, (char)((bmp_header.compress_mode) & 0xFF));
   86440:	e13fed8f 	ldh	r4,-74(fp)
   86444:	e0bff917 	ldw	r2,-28(fp)
   86448:	1007883a 	mov	r3,r2
   8644c:	00bfffc4 	movi	r2,-1
   86450:	1884703a 	and	r2,r3,r2
   86454:	11403fcc 	andi	r5,r2,255
   86458:	2940201c 	xori	r5,r5,128
   8645c:	297fe004 	addi	r5,r5,-128
   86460:	0083c8c0 	call	83c8c <sd_card_write>
   86464:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.compress_mode >> 8) & 0xFF));
   86468:	e13fed8f 	ldh	r4,-74(fp)
   8646c:	e0bff917 	ldw	r2,-28(fp)
   86470:	1005d23a 	srai	r2,r2,8
   86474:	1007883a 	mov	r3,r2
   86478:	00bfffc4 	movi	r2,-1
   8647c:	1884703a 	and	r2,r3,r2
   86480:	11403fcc 	andi	r5,r2,255
   86484:	2940201c 	xori	r5,r5,128
   86488:	297fe004 	addi	r5,r5,-128
   8648c:	0083c8c0 	call	83c8c <sd_card_write>
   86490:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.compress_mode >> 16) & 0xFF));
   86494:	e13fed8f 	ldh	r4,-74(fp)
   86498:	e0bff917 	ldw	r2,-28(fp)
   8649c:	1005d43a 	srai	r2,r2,16
   864a0:	1007883a 	mov	r3,r2
   864a4:	00bfffc4 	movi	r2,-1
   864a8:	1884703a 	and	r2,r3,r2
   864ac:	11403fcc 	andi	r5,r2,255
   864b0:	2940201c 	xori	r5,r5,128
   864b4:	297fe004 	addi	r5,r5,-128
   864b8:	0083c8c0 	call	83c8c <sd_card_write>
   864bc:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.compress_mode >> 24) & 0xFF));
   864c0:	e13fed8f 	ldh	r4,-74(fp)
   864c4:	e0bff917 	ldw	r2,-28(fp)
   864c8:	1005d63a 	srai	r2,r2,24
   864cc:	1007883a 	mov	r3,r2
   864d0:	00bfffc4 	movi	r2,-1
   864d4:	1884703a 	and	r2,r3,r2
   864d8:	11403fcc 	andi	r5,r2,255
   864dc:	2940201c 	xori	r5,r5,128
   864e0:	297fe004 	addi	r5,r5,-128
   864e4:	0083c8c0 	call	83c8c <sd_card_write>
   864e8:	e0bfea15 	stw	r2,-88(fp)

			status = sd_card_write(file_handle, (char)((bmp_header.data_size) & 0xFF));
   864ec:	e13fed8f 	ldh	r4,-74(fp)
   864f0:	e0bffa17 	ldw	r2,-24(fp)
   864f4:	1007883a 	mov	r3,r2
   864f8:	00bfffc4 	movi	r2,-1
   864fc:	1884703a 	and	r2,r3,r2
   86500:	11403fcc 	andi	r5,r2,255
   86504:	2940201c 	xori	r5,r5,128
   86508:	297fe004 	addi	r5,r5,-128
   8650c:	0083c8c0 	call	83c8c <sd_card_write>
   86510:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.data_size >> 8) & 0xFF));
   86514:	e13fed8f 	ldh	r4,-74(fp)
   86518:	e0bffa17 	ldw	r2,-24(fp)
   8651c:	1005d23a 	srai	r2,r2,8
   86520:	1007883a 	mov	r3,r2
   86524:	00bfffc4 	movi	r2,-1
   86528:	1884703a 	and	r2,r3,r2
   8652c:	11403fcc 	andi	r5,r2,255
   86530:	2940201c 	xori	r5,r5,128
   86534:	297fe004 	addi	r5,r5,-128
   86538:	0083c8c0 	call	83c8c <sd_card_write>
   8653c:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.data_size >> 16) & 0xFF));
   86540:	e13fed8f 	ldh	r4,-74(fp)
   86544:	e0bffa17 	ldw	r2,-24(fp)
   86548:	1005d43a 	srai	r2,r2,16
   8654c:	1007883a 	mov	r3,r2
   86550:	00bfffc4 	movi	r2,-1
   86554:	1884703a 	and	r2,r3,r2
   86558:	11403fcc 	andi	r5,r2,255
   8655c:	2940201c 	xori	r5,r5,128
   86560:	297fe004 	addi	r5,r5,-128
   86564:	0083c8c0 	call	83c8c <sd_card_write>
   86568:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.data_size >> 24) & 0xFF));
   8656c:	e13fed8f 	ldh	r4,-74(fp)
   86570:	e0bffa17 	ldw	r2,-24(fp)
   86574:	1005d63a 	srai	r2,r2,24
   86578:	1007883a 	mov	r3,r2
   8657c:	00bfffc4 	movi	r2,-1
   86580:	1884703a 	and	r2,r3,r2
   86584:	11403fcc 	andi	r5,r2,255
   86588:	2940201c 	xori	r5,r5,128
   8658c:	297fe004 	addi	r5,r5,-128
   86590:	0083c8c0 	call	83c8c <sd_card_write>
   86594:	e0bfea15 	stw	r2,-88(fp)

			status = sd_card_write(file_handle, (char)((bmp_header.hor_resolution) & 0xFF));
   86598:	e13fed8f 	ldh	r4,-74(fp)
   8659c:	e0bffb17 	ldw	r2,-20(fp)
   865a0:	1007883a 	mov	r3,r2
   865a4:	00bfffc4 	movi	r2,-1
   865a8:	1884703a 	and	r2,r3,r2
   865ac:	11403fcc 	andi	r5,r2,255
   865b0:	2940201c 	xori	r5,r5,128
   865b4:	297fe004 	addi	r5,r5,-128
   865b8:	0083c8c0 	call	83c8c <sd_card_write>
   865bc:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.hor_resolution >> 8) & 0xFF));
   865c0:	e13fed8f 	ldh	r4,-74(fp)
   865c4:	e0bffb17 	ldw	r2,-20(fp)
   865c8:	1005d23a 	srai	r2,r2,8
   865cc:	1007883a 	mov	r3,r2
   865d0:	00bfffc4 	movi	r2,-1
   865d4:	1884703a 	and	r2,r3,r2
   865d8:	11403fcc 	andi	r5,r2,255
   865dc:	2940201c 	xori	r5,r5,128
   865e0:	297fe004 	addi	r5,r5,-128
   865e4:	0083c8c0 	call	83c8c <sd_card_write>
   865e8:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.hor_resolution >> 16) & 0xFF));
   865ec:	e13fed8f 	ldh	r4,-74(fp)
   865f0:	e0bffb17 	ldw	r2,-20(fp)
   865f4:	1005d43a 	srai	r2,r2,16
   865f8:	1007883a 	mov	r3,r2
   865fc:	00bfffc4 	movi	r2,-1
   86600:	1884703a 	and	r2,r3,r2
   86604:	11403fcc 	andi	r5,r2,255
   86608:	2940201c 	xori	r5,r5,128
   8660c:	297fe004 	addi	r5,r5,-128
   86610:	0083c8c0 	call	83c8c <sd_card_write>
   86614:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.hor_resolution >> 24) & 0xFF));
   86618:	e13fed8f 	ldh	r4,-74(fp)
   8661c:	e0bffb17 	ldw	r2,-20(fp)
   86620:	1005d63a 	srai	r2,r2,24
   86624:	1007883a 	mov	r3,r2
   86628:	00bfffc4 	movi	r2,-1
   8662c:	1884703a 	and	r2,r3,r2
   86630:	11403fcc 	andi	r5,r2,255
   86634:	2940201c 	xori	r5,r5,128
   86638:	297fe004 	addi	r5,r5,-128
   8663c:	0083c8c0 	call	83c8c <sd_card_write>
   86640:	e0bfea15 	stw	r2,-88(fp)

			status = sd_card_write(file_handle, (char)((bmp_header.ver_resolution) & 0xFF));
   86644:	e13fed8f 	ldh	r4,-74(fp)
   86648:	e0bffc17 	ldw	r2,-16(fp)
   8664c:	1007883a 	mov	r3,r2
   86650:	00bfffc4 	movi	r2,-1
   86654:	1884703a 	and	r2,r3,r2
   86658:	11403fcc 	andi	r5,r2,255
   8665c:	2940201c 	xori	r5,r5,128
   86660:	297fe004 	addi	r5,r5,-128
   86664:	0083c8c0 	call	83c8c <sd_card_write>
   86668:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.ver_resolution >> 8) & 0xFF));
   8666c:	e13fed8f 	ldh	r4,-74(fp)
   86670:	e0bffc17 	ldw	r2,-16(fp)
   86674:	1005d23a 	srai	r2,r2,8
   86678:	1007883a 	mov	r3,r2
   8667c:	00bfffc4 	movi	r2,-1
   86680:	1884703a 	and	r2,r3,r2
   86684:	11403fcc 	andi	r5,r2,255
   86688:	2940201c 	xori	r5,r5,128
   8668c:	297fe004 	addi	r5,r5,-128
   86690:	0083c8c0 	call	83c8c <sd_card_write>
   86694:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.ver_resolution >> 16) & 0xFF));
   86698:	e13fed8f 	ldh	r4,-74(fp)
   8669c:	e0bffc17 	ldw	r2,-16(fp)
   866a0:	1005d43a 	srai	r2,r2,16
   866a4:	1007883a 	mov	r3,r2
   866a8:	00bfffc4 	movi	r2,-1
   866ac:	1884703a 	and	r2,r3,r2
   866b0:	11403fcc 	andi	r5,r2,255
   866b4:	2940201c 	xori	r5,r5,128
   866b8:	297fe004 	addi	r5,r5,-128
   866bc:	0083c8c0 	call	83c8c <sd_card_write>
   866c0:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.ver_resolution >> 24) & 0xFF));
   866c4:	e13fed8f 	ldh	r4,-74(fp)
   866c8:	e0bffc17 	ldw	r2,-16(fp)
   866cc:	1005d63a 	srai	r2,r2,24
   866d0:	1007883a 	mov	r3,r2
   866d4:	00bfffc4 	movi	r2,-1
   866d8:	1884703a 	and	r2,r3,r2
   866dc:	11403fcc 	andi	r5,r2,255
   866e0:	2940201c 	xori	r5,r5,128
   866e4:	297fe004 	addi	r5,r5,-128
   866e8:	0083c8c0 	call	83c8c <sd_card_write>
   866ec:	e0bfea15 	stw	r2,-88(fp)

			status = sd_card_write(file_handle, (char)((bmp_header.num_color_in_palette) & 0xFF));
   866f0:	e13fed8f 	ldh	r4,-74(fp)
   866f4:	e0bffd17 	ldw	r2,-12(fp)
   866f8:	1007883a 	mov	r3,r2
   866fc:	00bfffc4 	movi	r2,-1
   86700:	1884703a 	and	r2,r3,r2
   86704:	11403fcc 	andi	r5,r2,255
   86708:	2940201c 	xori	r5,r5,128
   8670c:	297fe004 	addi	r5,r5,-128
   86710:	0083c8c0 	call	83c8c <sd_card_write>
   86714:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.num_color_in_palette >> 8) & 0xFF));
   86718:	e13fed8f 	ldh	r4,-74(fp)
   8671c:	e0bffd17 	ldw	r2,-12(fp)
   86720:	1005d23a 	srai	r2,r2,8
   86724:	1007883a 	mov	r3,r2
   86728:	00bfffc4 	movi	r2,-1
   8672c:	1884703a 	and	r2,r3,r2
   86730:	11403fcc 	andi	r5,r2,255
   86734:	2940201c 	xori	r5,r5,128
   86738:	297fe004 	addi	r5,r5,-128
   8673c:	0083c8c0 	call	83c8c <sd_card_write>
   86740:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.num_color_in_palette >> 16) & 0xFF));
   86744:	e13fed8f 	ldh	r4,-74(fp)
   86748:	e0bffd17 	ldw	r2,-12(fp)
   8674c:	1005d43a 	srai	r2,r2,16
   86750:	1007883a 	mov	r3,r2
   86754:	00bfffc4 	movi	r2,-1
   86758:	1884703a 	and	r2,r3,r2
   8675c:	11403fcc 	andi	r5,r2,255
   86760:	2940201c 	xori	r5,r5,128
   86764:	297fe004 	addi	r5,r5,-128
   86768:	0083c8c0 	call	83c8c <sd_card_write>
   8676c:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.num_color_in_palette >> 24) & 0xFF));
   86770:	e13fed8f 	ldh	r4,-74(fp)
   86774:	e0bffd17 	ldw	r2,-12(fp)
   86778:	1005d63a 	srai	r2,r2,24
   8677c:	1007883a 	mov	r3,r2
   86780:	00bfffc4 	movi	r2,-1
   86784:	1884703a 	and	r2,r3,r2
   86788:	11403fcc 	andi	r5,r2,255
   8678c:	2940201c 	xori	r5,r5,128
   86790:	297fe004 	addi	r5,r5,-128
   86794:	0083c8c0 	call	83c8c <sd_card_write>
   86798:	e0bfea15 	stw	r2,-88(fp)

			status = sd_card_write(file_handle, (char)((bmp_header.important_color) & 0xFF));
   8679c:	e13fed8f 	ldh	r4,-74(fp)
   867a0:	e0bffe17 	ldw	r2,-8(fp)
   867a4:	1007883a 	mov	r3,r2
   867a8:	00bfffc4 	movi	r2,-1
   867ac:	1884703a 	and	r2,r3,r2
   867b0:	11403fcc 	andi	r5,r2,255
   867b4:	2940201c 	xori	r5,r5,128
   867b8:	297fe004 	addi	r5,r5,-128
   867bc:	0083c8c0 	call	83c8c <sd_card_write>
   867c0:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.important_color >> 8) & 0xFF));
   867c4:	e13fed8f 	ldh	r4,-74(fp)
   867c8:	e0bffe17 	ldw	r2,-8(fp)
   867cc:	1005d23a 	srai	r2,r2,8
   867d0:	1007883a 	mov	r3,r2
   867d4:	00bfffc4 	movi	r2,-1
   867d8:	1884703a 	and	r2,r3,r2
   867dc:	11403fcc 	andi	r5,r2,255
   867e0:	2940201c 	xori	r5,r5,128
   867e4:	297fe004 	addi	r5,r5,-128
   867e8:	0083c8c0 	call	83c8c <sd_card_write>
   867ec:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.important_color >> 16) & 0xFF));
   867f0:	e13fed8f 	ldh	r4,-74(fp)
   867f4:	e0bffe17 	ldw	r2,-8(fp)
   867f8:	1005d43a 	srai	r2,r2,16
   867fc:	1007883a 	mov	r3,r2
   86800:	00bfffc4 	movi	r2,-1
   86804:	1884703a 	and	r2,r3,r2
   86808:	11403fcc 	andi	r5,r2,255
   8680c:	2940201c 	xori	r5,r5,128
   86810:	297fe004 	addi	r5,r5,-128
   86814:	0083c8c0 	call	83c8c <sd_card_write>
   86818:	e0bfea15 	stw	r2,-88(fp)
			status = sd_card_write(file_handle, (char)((bmp_header.important_color >> 24) & 0xFF));
   8681c:	e13fed8f 	ldh	r4,-74(fp)
   86820:	e0bffe17 	ldw	r2,-8(fp)
   86824:	1005d63a 	srai	r2,r2,24
   86828:	1007883a 	mov	r3,r2
   8682c:	00bfffc4 	movi	r2,-1
   86830:	1884703a 	and	r2,r3,r2
   86834:	11403fcc 	andi	r5,r2,255
   86838:	2940201c 	xori	r5,r5,128
   8683c:	297fe004 	addi	r5,r5,-128
   86840:	0083c8c0 	call	83c8c <sd_card_write>
   86844:	e0bfea15 	stw	r2,-88(fp)

			image_size = 0;
   86848:	e03fe915 	stw	zero,-92(fp)
   8684c:	00000606 	br	86868 <SD_write_task+0xa20>
		} else {
			image_width = (int)OSMboxAccept(WriteImageWidthMailbox);
   86850:	d1271517 	ldw	r4,-25516(gp)
   86854:	009623c0 	call	9623c <OSMboxAccept>
   86858:	e0bfe815 	stw	r2,-96(fp)
			image_height = (int)OSMboxAccept(WriteImageHeightMailbox);
   8685c:	d1271017 	ldw	r4,-25536(gp)
   86860:	009623c0 	call	9623c <OSMboxAccept>
   86864:	e0bfe715 	stw	r2,-100(fp)
		}

		do {
			data = (unsigned short int)OSQAccept(SDWriteQueue, &return_code);
   86868:	d1271417 	ldw	r4,-25520(gp)
   8686c:	e17fee04 	addi	r5,fp,-72
   86870:	0098a7c0 	call	98a7c <OSQAccept>
   86874:	e0bfed0d 	sth	r2,-76(fp)
			if (return_code == OS_NO_ERR) {
   86878:	e0bfee03 	ldbu	r2,-72(fp)
   8687c:	10803fcc 	andi	r2,r2,255
   86880:	1004c03a 	cmpne	r2,r2,zero
   86884:	1000211e 	bne	r2,zero,8690c <SD_write_task+0xac4>
				status = sd_card_write(file_handle, (char)(data & 0xFF));
   86888:	e13fed8f 	ldh	r4,-74(fp)
   8688c:	e0bfed0b 	ldhu	r2,-76(fp)
   86890:	1007883a 	mov	r3,r2
   86894:	00bfffc4 	movi	r2,-1
   86898:	1884703a 	and	r2,r3,r2
   8689c:	11403fcc 	andi	r5,r2,255
   868a0:	2940201c 	xori	r5,r5,128
   868a4:	297fe004 	addi	r5,r5,-128
   868a8:	0083c8c0 	call	83c8c <sd_card_write>
   868ac:	e0bfea15 	stw	r2,-88(fp)
				status = sd_card_write(file_handle, (char)(data & 0xFF));
   868b0:	e13fed8f 	ldh	r4,-74(fp)
   868b4:	e0bfed0b 	ldhu	r2,-76(fp)
   868b8:	1007883a 	mov	r3,r2
   868bc:	00bfffc4 	movi	r2,-1
   868c0:	1884703a 	and	r2,r3,r2
   868c4:	11403fcc 	andi	r5,r2,255
   868c8:	2940201c 	xori	r5,r5,128
   868cc:	297fe004 	addi	r5,r5,-128
   868d0:	0083c8c0 	call	83c8c <sd_card_write>
   868d4:	e0bfea15 	stw	r2,-88(fp)
				status = sd_card_write(file_handle, (char)(data & 0xFF));
   868d8:	e13fed8f 	ldh	r4,-74(fp)
   868dc:	e0bfed0b 	ldhu	r2,-76(fp)
   868e0:	1007883a 	mov	r3,r2
   868e4:	00bfffc4 	movi	r2,-1
   868e8:	1884703a 	and	r2,r3,r2
   868ec:	11403fcc 	andi	r5,r2,255
   868f0:	2940201c 	xori	r5,r5,128
   868f4:	297fe004 	addi	r5,r5,-128
   868f8:	0083c8c0 	call	83c8c <sd_card_write>
   868fc:	e0bfea15 	stw	r2,-88(fp)


				
				image_size+=3;
   86900:	e0bfe917 	ldw	r2,-92(fp)
   86904:	108000c4 	addi	r2,r2,3
   86908:	e0bfe915 	stw	r2,-92(fp)
			}
		} while ((return_code == OS_NO_ERR) && (image_size < bmp_header.data_size));
   8690c:	e0bfee03 	ldbu	r2,-72(fp)
   86910:	10803fcc 	andi	r2,r2,255
   86914:	1004c03a 	cmpne	r2,r2,zero
   86918:	1000031e 	bne	r2,zero,86928 <SD_write_task+0xae0>
   8691c:	e0fffa17 	ldw	r3,-24(fp)
   86920:	e0bfe917 	ldw	r2,-92(fp)
   86924:	10ffd016 	blt	r2,r3,86868 <SD_write_task+0xa20>
				
		if (image_size == bmp_header.data_size) {
   86928:	e0fffa17 	ldw	r3,-24(fp)
   8692c:	e0bfe917 	ldw	r2,-92(fp)
   86930:	1880071e 	bne	r3,r2,86950 <SD_write_task+0xb08>
			file_opened = 0;
   86934:	e03fec15 	stw	zero,-80(fp)
			sd_card_fclose(file_handle);
   86938:	e13fed8f 	ldh	r4,-74(fp)
   8693c:	008427c0 	call	8427c <sd_card_fclose>

			printf("Writing image done (%d bytes)\n", image_size);
   86940:	010002b4 	movhi	r4,10
   86944:	213f2b04 	addi	r4,r4,-852
   86948:	e17fe917 	ldw	r5,-92(fp)
   8694c:	00879680 	call	87968 <printf>
		}
		// printf("WQ emptied (%d bytes)\n", image_size);
		
		return_code = OSMutexPost(SDMutex);
   86950:	d1270c17 	ldw	r4,-25552(gp)
   86954:	00984a80 	call	984a8 <OSMutexPost>
   86958:	e0bfee05 	stb	r2,-72(fp)
		alt_ucosii_check_return_code(return_code);
   8695c:	e0bfee03 	ldbu	r2,-72(fp)
   86960:	11003fcc 	andi	r4,r2,255
   86964:	00844500 	call	84450 <alt_ucosii_check_return_code>
		
		OSFlagPost(SDCardFlag, SD_WRITE_DATA_READY, OS_FLAG_CLR, &return_code);
   86968:	d1270d17 	ldw	r4,-25548(gp)
   8696c:	e1ffee04 	addi	r7,fp,-72
   86970:	01400804 	movi	r5,32
   86974:	000d883a 	mov	r6,zero
   86978:	009595c0 	call	9595c <OSFlagPost>
		alt_ucosii_check_return_code(return_code);
   8697c:	e0bfee03 	ldbu	r2,-72(fp)
   86980:	11003fcc 	andi	r4,r2,255
   86984:	00844500 	call	84450 <alt_ucosii_check_return_code>
		
		OSFlagPost(SDCardFlag, SD_WRITE_NEED_FILL, OS_FLAG_SET, &return_code);
   86988:	d1270d17 	ldw	r4,-25548(gp)
   8698c:	e1ffee04 	addi	r7,fp,-72
   86990:	01400404 	movi	r5,16
   86994:	01800044 	movi	r6,1
   86998:	009595c0 	call	9595c <OSFlagPost>
		alt_ucosii_check_return_code(return_code);
   8699c:	e0bfee03 	ldbu	r2,-72(fp)
   869a0:	11003fcc 	andi	r4,r2,255
   869a4:	00844500 	call	84450 <alt_ucosii_check_return_code>
	}
   869a8:	003d2f06 	br	85e68 <SD_write_task+0x20>

000869ac <compute_Y_task>:
}

void compute_Y_task(void *pdata) {
   869ac:	deffe404 	addi	sp,sp,-112
   869b0:	dfc01b15 	stw	ra,108(sp)
   869b4:	df001a15 	stw	fp,104(sp)
   869b8:	dc401915 	stw	r17,100(sp)
   869bc:	dc001815 	stw	r16,96(sp)
   869c0:	df001804 	addi	fp,sp,96
   869c4:	e13ffb15 	stw	r4,-20(fp)
	INT8U return_code = OS_NO_ERR;
   869c8:	e03ffa05 	stb	zero,-24(fp)
	int i, j, RGB_count,RGB_count_two;
	int image_height, image_width;
//	int odd, even;
	
	while (1) {
		OSSemPend(PBSemaphore[0], 0, &return_code);
   869cc:	008002b4 	movhi	r2,10
   869d0:	109dd504 	addi	r2,r2,30548
   869d4:	11000017 	ldw	r4,0(r2)
   869d8:	e1bffa04 	addi	r6,fp,-24
   869dc:	000b883a 	mov	r5,zero
   869e0:	009a2240 	call	9a224 <OSSemPend>
		alt_ucosii_check_return_code(return_code);					
   869e4:	e0bffa03 	ldbu	r2,-24(fp)
   869e8:	11003fcc 	andi	r4,r2,255
   869ec:	00844500 	call	84450 <alt_ucosii_check_return_code>
		
		printf("Compute Y task start\n");
   869f0:	010002b4 	movhi	r4,10
   869f4:	213f3304 	addi	r4,r4,-820
   869f8:	0087aa40 	call	87aa4 <puts>
		
		OSFlagPend(SDCardFlag, SD_PRESENCE_FLAG | SD_FILESYSTEM_FLAG, OS_FLAG_WAIT_SET_ALL, 0, &return_code);
   869fc:	d1270d17 	ldw	r4,-25548(gp)
   86a00:	e0bffa04 	addi	r2,fp,-24
   86a04:	d8800015 	stw	r2,0(sp)
   86a08:	014000c4 	movi	r5,3
   86a0c:	01800084 	movi	r6,2
   86a10:	000f883a 	mov	r7,zero
   86a14:	00952b00 	call	952b0 <OSFlagPend>
		alt_ucosii_check_return_code(return_code);
   86a18:	e0bffa03 	ldbu	r2,-24(fp)
   86a1c:	11003fcc 	andi	r4,r2,255
   86a20:	00844500 	call	84450 <alt_ucosii_check_return_code>
		
		printf("SD card present and filesystem ok\n");
   86a24:	010002b4 	movhi	r4,10
   86a28:	213f3904 	addi	r4,r4,-796
   86a2c:	0087aa40 	call	87aa4 <puts>

		// get the first queue of data
		OSFlagPost(SDCardFlag, SD_READ_DATA_READY, OS_FLAG_CLR, &return_code);
   86a30:	d1270d17 	ldw	r4,-25548(gp)
   86a34:	e1fffa04 	addi	r7,fp,-24
   86a38:	01400204 	movi	r5,8
   86a3c:	000d883a 	mov	r6,zero
   86a40:	009595c0 	call	9595c <OSFlagPost>
		alt_ucosii_check_return_code(return_code);
   86a44:	e0bffa03 	ldbu	r2,-24(fp)
   86a48:	11003fcc 	andi	r4,r2,255
   86a4c:	00844500 	call	84450 <alt_ucosii_check_return_code>

		OSFlagPost(SDCardFlag, SD_READ_NEED_FILL, OS_FLAG_SET, &return_code);
   86a50:	d1270d17 	ldw	r4,-25548(gp)
   86a54:	e1fffa04 	addi	r7,fp,-24
   86a58:	01400104 	movi	r5,4
   86a5c:	01800044 	movi	r6,1
   86a60:	009595c0 	call	9595c <OSFlagPost>
		alt_ucosii_check_return_code(return_code);
   86a64:	e0bffa03 	ldbu	r2,-24(fp)
   86a68:	11003fcc 	andi	r4,r2,255
   86a6c:	00844500 	call	84450 <alt_ucosii_check_return_code>
		
		image_width = (int)OSMboxPend(ReadImageWidthMailbox, 0, &return_code);
   86a70:	d1271717 	ldw	r4,-25508(gp)
   86a74:	e1bffa04 	addi	r6,fp,-24
   86a78:	000b883a 	mov	r5,zero
   86a7c:	00966940 	call	96694 <OSMboxPend>
   86a80:	e0bfeb15 	stw	r2,-84(fp)
		alt_ucosii_check_return_code(return_code);
   86a84:	e0bffa03 	ldbu	r2,-24(fp)
   86a88:	11003fcc 	andi	r4,r2,255
   86a8c:	00844500 	call	84450 <alt_ucosii_check_return_code>
		image_height = (int)OSMboxPend(ReadImageHeightMailbox, 0, &return_code);
   86a90:	d1271117 	ldw	r4,-25532(gp)
   86a94:	e1bffa04 	addi	r6,fp,-24
   86a98:	000b883a 	mov	r5,zero
   86a9c:	00966940 	call	96694 <OSMboxPend>
   86aa0:	e0bfec15 	stw	r2,-80(fp)
		alt_ucosii_check_return_code(return_code);
   86aa4:	e0bffa03 	ldbu	r2,-24(fp)
   86aa8:	11003fcc 	andi	r4,r2,255
   86aac:	00844500 	call	84450 <alt_ucosii_check_return_code>
		
		// get memory block
		Y_val = OSMemGet(MemoryPartition, &return_code);
   86ab0:	d1270b17 	ldw	r4,-25556(gp)
   86ab4:	e17ffa04 	addi	r5,fp,-24
   86ab8:	00970e40 	call	970e4 <OSMemGet>
   86abc:	e0bff615 	stw	r2,-40(fp)
		alt_ucosii_check_return_code(return_code);
   86ac0:	e0bffa03 	ldbu	r2,-24(fp)
   86ac4:	11003fcc 	andi	r4,r2,255
   86ac8:	00844500 	call	84450 <alt_ucosii_check_return_code>
		
		for (i = 0; i < ((image_height < 0) ? -image_height : image_height); i++) {
   86acc:	e03ff015 	stw	zero,-64(fp)
   86ad0:	0001a506 	br	87168 <compute_Y_task+0x7bc>
			R_val = OSMemGet(MemoryPartition, &return_code);
   86ad4:	d1270b17 	ldw	r4,-25556(gp)
   86ad8:	e17ffa04 	addi	r5,fp,-24
   86adc:	00970e40 	call	970e4 <OSMemGet>
   86ae0:	e0bff915 	stw	r2,-28(fp)
			alt_ucosii_check_return_code(return_code);
   86ae4:	e0bffa03 	ldbu	r2,-24(fp)
   86ae8:	11003fcc 	andi	r4,r2,255
   86aec:	00844500 	call	84450 <alt_ucosii_check_return_code>
			G_val = OSMemGet(MemoryPartition, &return_code);
   86af0:	d1270b17 	ldw	r4,-25556(gp)
   86af4:	e17ffa04 	addi	r5,fp,-24
   86af8:	00970e40 	call	970e4 <OSMemGet>
   86afc:	e0bff815 	stw	r2,-32(fp)
			alt_ucosii_check_return_code(return_code);
   86b00:	e0bffa03 	ldbu	r2,-24(fp)
   86b04:	11003fcc 	andi	r4,r2,255
   86b08:	00844500 	call	84450 <alt_ucosii_check_return_code>
			B_val = OSMemGet(MemoryPartition, &return_code);
   86b0c:	d1270b17 	ldw	r4,-25556(gp)
   86b10:	e17ffa04 	addi	r5,fp,-24
   86b14:	00970e40 	call	970e4 <OSMemGet>
   86b18:	e0bff715 	stw	r2,-36(fp)
			alt_ucosii_check_return_code(return_code);
   86b1c:	e0bffa03 	ldbu	r2,-24(fp)
   86b20:	11003fcc 	andi	r4,r2,255
   86b24:	00844500 	call	84450 <alt_ucosii_check_return_code>

			R_two_val = OSMemGet(MemoryPartition, &return_code);
   86b28:	d1270b17 	ldw	r4,-25556(gp)
   86b2c:	e17ffa04 	addi	r5,fp,-24
   86b30:	00970e40 	call	970e4 <OSMemGet>
   86b34:	e0bff515 	stw	r2,-44(fp)
					alt_ucosii_check_return_code(return_code);
   86b38:	e0bffa03 	ldbu	r2,-24(fp)
   86b3c:	11003fcc 	andi	r4,r2,255
   86b40:	00844500 	call	84450 <alt_ucosii_check_return_code>
					G_two_val = OSMemGet(MemoryPartition, &return_code);
   86b44:	d1270b17 	ldw	r4,-25556(gp)
   86b48:	e17ffa04 	addi	r5,fp,-24
   86b4c:	00970e40 	call	970e4 <OSMemGet>
   86b50:	e0bff415 	stw	r2,-48(fp)
					alt_ucosii_check_return_code(return_code);
   86b54:	e0bffa03 	ldbu	r2,-24(fp)
   86b58:	11003fcc 	andi	r4,r2,255
   86b5c:	00844500 	call	84450 <alt_ucosii_check_return_code>
					B_two_val = OSMemGet(MemoryPartition, &return_code);
   86b60:	d1270b17 	ldw	r4,-25556(gp)
   86b64:	e17ffa04 	addi	r5,fp,-24
   86b68:	00970e40 	call	970e4 <OSMemGet>
   86b6c:	e0bff315 	stw	r2,-52(fp)
					alt_ucosii_check_return_code(return_code);
   86b70:	e0bffa03 	ldbu	r2,-24(fp)
   86b74:	11003fcc 	andi	r4,r2,255
   86b78:	00844500 	call	84450 <alt_ucosii_check_return_code>


			int odd = 0;
   86b7c:	e03fea15 	stw	zero,-88(fp)
			int even = 0;
   86b80:	e03fe915 	stw	zero,-92(fp)

			for (j = 0; j < image_width; j++) {
   86b84:	e03fef15 	stw	zero,-68(fp)
   86b88:	00009006 	br	86dcc <compute_Y_task+0x420>
				for (RGB_count = 0; RGB_count < 3; ) {
   86b8c:	e03fee15 	stw	zero,-72(fp)
   86b90:	00004f06 	br	86cd0 <compute_Y_task+0x324>
					data = (unsigned short int)OSQAccept(SDReadQueue[0], &return_code);
   86b94:	d1271217 	ldw	r4,-25528(gp)
   86b98:	e17ffa04 	addi	r5,fp,-24
   86b9c:	0098a7c0 	call	98a7c <OSQAccept>
   86ba0:	e0bff10d 	sth	r2,-60(fp)
					//data2 = (unsigned short int)OSQAccept(SDReadQueue, &return_code);
				
					if (return_code == OS_Q_EMPTY) {
   86ba4:	e0bffa03 	ldbu	r2,-24(fp)
   86ba8:	10803fcc 	andi	r2,r2,255
   86bac:	108007d8 	cmpnei	r2,r2,31
   86bb0:	10001b1e 	bne	r2,zero,86c20 <compute_Y_task+0x274>
						// printf("Need to fill ReadQueue\n");
						OSFlagPost(SDCardFlag, SD_READ_DATA_READY, OS_FLAG_CLR, &return_code);
   86bb4:	d1270d17 	ldw	r4,-25548(gp)
   86bb8:	e1fffa04 	addi	r7,fp,-24
   86bbc:	01400204 	movi	r5,8
   86bc0:	000d883a 	mov	r6,zero
   86bc4:	009595c0 	call	9595c <OSFlagPost>
						alt_ucosii_check_return_code(return_code);
   86bc8:	e0bffa03 	ldbu	r2,-24(fp)
   86bcc:	11003fcc 	andi	r4,r2,255
   86bd0:	00844500 	call	84450 <alt_ucosii_check_return_code>
						OSFlagPost(SDCardFlag, SD_READ_NEED_FILL, OS_FLAG_SET, &return_code);
   86bd4:	d1270d17 	ldw	r4,-25548(gp)
   86bd8:	e1fffa04 	addi	r7,fp,-24
   86bdc:	01400104 	movi	r5,4
   86be0:	01800044 	movi	r6,1
   86be4:	009595c0 	call	9595c <OSFlagPost>
						alt_ucosii_check_return_code(return_code);
   86be8:	e0bffa03 	ldbu	r2,-24(fp)
   86bec:	11003fcc 	andi	r4,r2,255
   86bf0:	00844500 	call	84450 <alt_ucosii_check_return_code>
						OSFlagPend(SDCardFlag, SD_PRESENCE_FLAG | SD_FILESYSTEM_FLAG | SD_READ_DATA_READY, OS_FLAG_WAIT_SET_ALL, 0, &return_code);
   86bf4:	d1270d17 	ldw	r4,-25548(gp)
   86bf8:	e0bffa04 	addi	r2,fp,-24
   86bfc:	d8800015 	stw	r2,0(sp)
   86c00:	014002c4 	movi	r5,11
   86c04:	01800084 	movi	r6,2
   86c08:	000f883a 	mov	r7,zero
   86c0c:	00952b00 	call	952b0 <OSFlagPend>
						alt_ucosii_check_return_code(return_code);	
   86c10:	e0bffa03 	ldbu	r2,-24(fp)
   86c14:	11003fcc 	andi	r4,r2,255
   86c18:	00844500 	call	84450 <alt_ucosii_check_return_code>
   86c1c:	00002c06 	br	86cd0 <compute_Y_task+0x324>
					} else {
						switch (RGB_count) {
   86c20:	e0bfee17 	ldw	r2,-72(fp)
   86c24:	e0bffd15 	stw	r2,-12(fp)
   86c28:	e0fffd17 	ldw	r3,-12(fp)
   86c2c:	18800060 	cmpeqi	r2,r3,1
   86c30:	1000111e 	bne	r2,zero,86c78 <compute_Y_task+0x2cc>
   86c34:	e0fffd17 	ldw	r3,-12(fp)
   86c38:	188000a0 	cmpeqi	r2,r3,2
   86c3c:	1000181e 	bne	r2,zero,86ca0 <compute_Y_task+0x2f4>
   86c40:	e0fffd17 	ldw	r3,-12(fp)
   86c44:	1805003a 	cmpeq	r2,r3,zero
   86c48:	1000011e 	bne	r2,zero,86c50 <compute_Y_task+0x2a4>
   86c4c:	00001d06 	br	86cc4 <compute_Y_task+0x318>
							case 0: B_val[j] = (char)(data & 0xFF); break;
   86c50:	e0bfef17 	ldw	r2,-68(fp)
   86c54:	1007883a 	mov	r3,r2
   86c58:	e0bff717 	ldw	r2,-36(fp)
   86c5c:	1889883a 	add	r4,r3,r2
   86c60:	e0bff10b 	ldhu	r2,-60(fp)
   86c64:	1007883a 	mov	r3,r2
   86c68:	00bfffc4 	movi	r2,-1
   86c6c:	1884703a 	and	r2,r3,r2
   86c70:	20800005 	stb	r2,0(r4)
   86c74:	00001306 	br	86cc4 <compute_Y_task+0x318>
							case 1: G_val[j] = (char)(data & 0xFF); break;
   86c78:	e0bfef17 	ldw	r2,-68(fp)
   86c7c:	1007883a 	mov	r3,r2
   86c80:	e0bff817 	ldw	r2,-32(fp)
   86c84:	1889883a 	add	r4,r3,r2
   86c88:	e0bff10b 	ldhu	r2,-60(fp)
   86c8c:	1007883a 	mov	r3,r2
   86c90:	00bfffc4 	movi	r2,-1
   86c94:	1884703a 	and	r2,r3,r2
   86c98:	20800005 	stb	r2,0(r4)
   86c9c:	00000906 	br	86cc4 <compute_Y_task+0x318>
							case 2: R_val[j] = (char)(data & 0xFF); break;							
   86ca0:	e0bfef17 	ldw	r2,-68(fp)
   86ca4:	1007883a 	mov	r3,r2
   86ca8:	e0bff917 	ldw	r2,-28(fp)
   86cac:	1889883a 	add	r4,r3,r2
   86cb0:	e0bff10b 	ldhu	r2,-60(fp)
   86cb4:	1007883a 	mov	r3,r2
   86cb8:	00bfffc4 	movi	r2,-1
   86cbc:	1884703a 	and	r2,r3,r2
   86cc0:	20800005 	stb	r2,0(r4)
						}
						RGB_count++;
   86cc4:	e0bfee17 	ldw	r2,-72(fp)
   86cc8:	10800044 	addi	r2,r2,1
   86ccc:	e0bfee15 	stw	r2,-72(fp)

			int odd = 0;
			int even = 0;

			for (j = 0; j < image_width; j++) {
				for (RGB_count = 0; RGB_count < 3; ) {
   86cd0:	e0bfee17 	ldw	r2,-72(fp)
   86cd4:	108000d0 	cmplti	r2,r2,3
   86cd8:	103fae1e 	bne	r2,zero,86b94 <compute_Y_task+0x1e8>
						}
						RGB_count++;
					}
				}

				if ((j % 2) ==1)
   86cdc:	e0bfef17 	ldw	r2,-68(fp)
   86ce0:	00e00034 	movhi	r3,32768
   86ce4:	18c00044 	addi	r3,r3,1
   86ce8:	10c4703a 	and	r2,r2,r3
   86cec:	e0bffe15 	stw	r2,-8(fp)
   86cf0:	e0fffe17 	ldw	r3,-8(fp)
   86cf4:	1804403a 	cmpge	r2,r3,zero
   86cf8:	10000a1e 	bne	r2,zero,86d24 <compute_Y_task+0x378>
   86cfc:	e0bffe17 	ldw	r2,-8(fp)
   86d00:	10bfffc4 	addi	r2,r2,-1
   86d04:	e0bffe15 	stw	r2,-8(fp)
   86d08:	00bfff84 	movi	r2,-2
   86d0c:	e0fffe17 	ldw	r3,-8(fp)
   86d10:	1886b03a 	or	r3,r3,r2
   86d14:	e0fffe15 	stw	r3,-8(fp)
   86d18:	e0bffe17 	ldw	r2,-8(fp)
   86d1c:	10800044 	addi	r2,r2,1
   86d20:	e0bffe15 	stw	r2,-8(fp)
   86d24:	e0bffe17 	ldw	r2,-8(fp)
   86d28:	10800058 	cmpnei	r2,r2,1
   86d2c:	1000241e 	bne	r2,zero,86dc0 <compute_Y_task+0x414>
						//	Y_val[odd++] = (INT8U)(((unsigned int)R_val[j] * 1052 + (unsigned int)G_val[j] * 2064 + (unsigned int)B_val[j] * 401) >> 12);
					Y_val[odd++] = (1052*R_val[j]+2064*G_val[j]+401*B_val[j])>>12;
   86d30:	e0bfea17 	ldw	r2,-88(fp)
   86d34:	1007883a 	mov	r3,r2
   86d38:	e0bff617 	ldw	r2,-40(fp)
   86d3c:	18a1883a 	add	r16,r3,r2
   86d40:	e0bfef17 	ldw	r2,-68(fp)
   86d44:	1007883a 	mov	r3,r2
   86d48:	e0bff917 	ldw	r2,-28(fp)
   86d4c:	1885883a 	add	r2,r3,r2
   86d50:	10800003 	ldbu	r2,0(r2)
   86d54:	11003fcc 	andi	r4,r2,255
   86d58:	01410704 	movi	r5,1052
   86d5c:	00877e40 	call	877e4 <__mulsi3>
   86d60:	1023883a 	mov	r17,r2
   86d64:	e0bfef17 	ldw	r2,-68(fp)
   86d68:	1007883a 	mov	r3,r2
   86d6c:	e0bff817 	ldw	r2,-32(fp)
   86d70:	1885883a 	add	r2,r3,r2
   86d74:	10800003 	ldbu	r2,0(r2)
   86d78:	11003fcc 	andi	r4,r2,255
   86d7c:	01420404 	movi	r5,2064
   86d80:	00877e40 	call	877e4 <__mulsi3>
   86d84:	88a3883a 	add	r17,r17,r2
   86d88:	e0bfef17 	ldw	r2,-68(fp)
   86d8c:	1007883a 	mov	r3,r2
   86d90:	e0bff717 	ldw	r2,-36(fp)
   86d94:	1885883a 	add	r2,r3,r2
   86d98:	10800003 	ldbu	r2,0(r2)
   86d9c:	11003fcc 	andi	r4,r2,255
   86da0:	01406444 	movi	r5,401
   86da4:	00877e40 	call	877e4 <__mulsi3>
   86da8:	8885883a 	add	r2,r17,r2
   86dac:	1005d33a 	srai	r2,r2,12
   86db0:	80800005 	stb	r2,0(r16)
   86db4:	e0bfea17 	ldw	r2,-88(fp)
   86db8:	10800044 	addi	r2,r2,1
   86dbc:	e0bfea15 	stw	r2,-88(fp)


			int odd = 0;
			int even = 0;

			for (j = 0; j < image_width; j++) {
   86dc0:	e0bfef17 	ldw	r2,-68(fp)
   86dc4:	10800044 	addi	r2,r2,1
   86dc8:	e0bfef15 	stw	r2,-68(fp)
   86dcc:	e0ffef17 	ldw	r3,-68(fp)
   86dd0:	e0bfeb17 	ldw	r2,-84(fp)
   86dd4:	18bf6d16 	blt	r3,r2,86b8c <compute_Y_task+0x1e0>
						Y_val[image_width/2+(even++)] = (1052*R_two_val[j]+2064*G_two_val[j]+401*B_two_val[j])>>12;*/

			}


					for (j = 0; j < image_width; j++) {
   86dd8:	e03fef15 	stw	zero,-68(fp)
   86ddc:	00008706 	br	86ffc <compute_Y_task+0x650>
				for (RGB_count = 0; RGB_count < 3; ) {
   86de0:	e03fee15 	stw	zero,-72(fp)
   86de4:	00005106 	br	86f2c <compute_Y_task+0x580>
									data = (unsigned short int)OSQAccept(SDReadQueue[1], &return_code);
   86de8:	008002b4 	movhi	r2,10
   86dec:	108e3004 	addi	r2,r2,14528
   86df0:	11000017 	ldw	r4,0(r2)
   86df4:	e17ffa04 	addi	r5,fp,-24
   86df8:	0098a7c0 	call	98a7c <OSQAccept>
   86dfc:	e0bff10d 	sth	r2,-60(fp)
									//data2 = (unsigned short int)OSQAccept(SDReadQueue, &return_code);

									if (return_code == OS_Q_EMPTY) {
   86e00:	e0bffa03 	ldbu	r2,-24(fp)
   86e04:	10803fcc 	andi	r2,r2,255
   86e08:	108007d8 	cmpnei	r2,r2,31
   86e0c:	10001b1e 	bne	r2,zero,86e7c <compute_Y_task+0x4d0>
										// printf("Need to fill ReadQueue\n");
										OSFlagPost(SDCardFlag, SD_READ_DATA_READY, OS_FLAG_CLR, &return_code);
   86e10:	d1270d17 	ldw	r4,-25548(gp)
   86e14:	e1fffa04 	addi	r7,fp,-24
   86e18:	01400204 	movi	r5,8
   86e1c:	000d883a 	mov	r6,zero
   86e20:	009595c0 	call	9595c <OSFlagPost>
										alt_ucosii_check_return_code(return_code);
   86e24:	e0bffa03 	ldbu	r2,-24(fp)
   86e28:	11003fcc 	andi	r4,r2,255
   86e2c:	00844500 	call	84450 <alt_ucosii_check_return_code>
										OSFlagPost(SDCardFlag, SD_READ_NEED_FILL, OS_FLAG_SET, &return_code);
   86e30:	d1270d17 	ldw	r4,-25548(gp)
   86e34:	e1fffa04 	addi	r7,fp,-24
   86e38:	01400104 	movi	r5,4
   86e3c:	01800044 	movi	r6,1
   86e40:	009595c0 	call	9595c <OSFlagPost>
										alt_ucosii_check_return_code(return_code);
   86e44:	e0bffa03 	ldbu	r2,-24(fp)
   86e48:	11003fcc 	andi	r4,r2,255
   86e4c:	00844500 	call	84450 <alt_ucosii_check_return_code>
										OSFlagPend(SDCardFlag, SD_PRESENCE_FLAG | SD_FILESYSTEM_FLAG | SD_READ_DATA_READY, OS_FLAG_WAIT_SET_ALL, 0, &return_code);
   86e50:	d1270d17 	ldw	r4,-25548(gp)
   86e54:	e0bffa04 	addi	r2,fp,-24
   86e58:	d8800015 	stw	r2,0(sp)
   86e5c:	014002c4 	movi	r5,11
   86e60:	01800084 	movi	r6,2
   86e64:	000f883a 	mov	r7,zero
   86e68:	00952b00 	call	952b0 <OSFlagPend>
										alt_ucosii_check_return_code(return_code);
   86e6c:	e0bffa03 	ldbu	r2,-24(fp)
   86e70:	11003fcc 	andi	r4,r2,255
   86e74:	00844500 	call	84450 <alt_ucosii_check_return_code>
   86e78:	00002c06 	br	86f2c <compute_Y_task+0x580>
									} else {
										switch (RGB_count) {
   86e7c:	e0ffee17 	ldw	r3,-72(fp)
   86e80:	e0ffff15 	stw	r3,-4(fp)
   86e84:	e0ffff17 	ldw	r3,-4(fp)
   86e88:	18800060 	cmpeqi	r2,r3,1
   86e8c:	1000111e 	bne	r2,zero,86ed4 <compute_Y_task+0x528>
   86e90:	e0ffff17 	ldw	r3,-4(fp)
   86e94:	188000a0 	cmpeqi	r2,r3,2
   86e98:	1000181e 	bne	r2,zero,86efc <compute_Y_task+0x550>
   86e9c:	e0ffff17 	ldw	r3,-4(fp)
   86ea0:	1805003a 	cmpeq	r2,r3,zero
   86ea4:	1000011e 	bne	r2,zero,86eac <compute_Y_task+0x500>
   86ea8:	00001d06 	br	86f20 <compute_Y_task+0x574>
											case 0: B_two_val[j] = (char)(data & 0xFF); break;
   86eac:	e0bfef17 	ldw	r2,-68(fp)
   86eb0:	1007883a 	mov	r3,r2
   86eb4:	e0bff317 	ldw	r2,-52(fp)
   86eb8:	1889883a 	add	r4,r3,r2
   86ebc:	e0bff10b 	ldhu	r2,-60(fp)
   86ec0:	1007883a 	mov	r3,r2
   86ec4:	00bfffc4 	movi	r2,-1
   86ec8:	1884703a 	and	r2,r3,r2
   86ecc:	20800005 	stb	r2,0(r4)
   86ed0:	00001306 	br	86f20 <compute_Y_task+0x574>
											case 1: G_two_val[j] = (char)(data & 0xFF); break;
   86ed4:	e0bfef17 	ldw	r2,-68(fp)
   86ed8:	1007883a 	mov	r3,r2
   86edc:	e0bff417 	ldw	r2,-48(fp)
   86ee0:	1889883a 	add	r4,r3,r2
   86ee4:	e0bff10b 	ldhu	r2,-60(fp)
   86ee8:	1007883a 	mov	r3,r2
   86eec:	00bfffc4 	movi	r2,-1
   86ef0:	1884703a 	and	r2,r3,r2
   86ef4:	20800005 	stb	r2,0(r4)
   86ef8:	00000906 	br	86f20 <compute_Y_task+0x574>
											case 2: R_two_val[j] = (char)(data & 0xFF); break;
   86efc:	e0bfef17 	ldw	r2,-68(fp)
   86f00:	1007883a 	mov	r3,r2
   86f04:	e0bff517 	ldw	r2,-44(fp)
   86f08:	1889883a 	add	r4,r3,r2
   86f0c:	e0bff10b 	ldhu	r2,-60(fp)
   86f10:	1007883a 	mov	r3,r2
   86f14:	00bfffc4 	movi	r2,-1
   86f18:	1884703a 	and	r2,r3,r2
   86f1c:	20800005 	stb	r2,0(r4)
										}
										RGB_count++;
   86f20:	e0bfee17 	ldw	r2,-72(fp)
   86f24:	10800044 	addi	r2,r2,1
   86f28:	e0bfee15 	stw	r2,-72(fp)

			}


					for (j = 0; j < image_width; j++) {
				for (RGB_count = 0; RGB_count < 3; ) {
   86f2c:	e0bfee17 	ldw	r2,-72(fp)
   86f30:	108000d0 	cmplti	r2,r2,3
   86f34:	103fac1e 	bne	r2,zero,86de8 <compute_Y_task+0x43c>
			//	Y_val[odd++] = (INT8U)(((unsigned int)R_val[j] * 1052 + (unsigned int)G_val[j] * 2064 + (unsigned int)B_val[j] * 401) >> 12);
					Y_val[odd++] = (1052*R_val[j]+2064*G_val[j]+401*B_val[j])>>12;

*/

				if ((j %2) == 0)
   86f38:	e0bfef17 	ldw	r2,-68(fp)
   86f3c:	1080004c 	andi	r2,r2,1
   86f40:	1004c03a 	cmpne	r2,r2,zero
   86f44:	10002a1e 	bne	r2,zero,86ff0 <compute_Y_task+0x644>
					//Y_val[image_width/2 + (even++)] = (INT8U)(((unsigned int)R_two_val[j] * 1052 + (unsigned int)G_two_val[j] * 2064 + (unsigned int)B_two_val[j] * 401) >> 12);
					Y_val[(image_width/2)+(even++)] = (1052*R_two_val[j]+2064*G_two_val[j]+401*B_two_val[j])>>12;
   86f48:	e0ffeb17 	ldw	r3,-84(fp)
   86f4c:	1804d7fa 	srli	r2,r3,31
   86f50:	10c5883a 	add	r2,r2,r3
   86f54:	1005d07a 	srai	r2,r2,1
   86f58:	1007883a 	mov	r3,r2
   86f5c:	e0bfe917 	ldw	r2,-92(fp)
   86f60:	1885883a 	add	r2,r3,r2
   86f64:	1007883a 	mov	r3,r2
   86f68:	e0bff617 	ldw	r2,-40(fp)
   86f6c:	18a1883a 	add	r16,r3,r2
   86f70:	e0bfef17 	ldw	r2,-68(fp)
   86f74:	1007883a 	mov	r3,r2
   86f78:	e0bff517 	ldw	r2,-44(fp)
   86f7c:	1885883a 	add	r2,r3,r2
   86f80:	10800003 	ldbu	r2,0(r2)
   86f84:	11003fcc 	andi	r4,r2,255
   86f88:	01410704 	movi	r5,1052
   86f8c:	00877e40 	call	877e4 <__mulsi3>
   86f90:	1023883a 	mov	r17,r2
   86f94:	e0bfef17 	ldw	r2,-68(fp)
   86f98:	1007883a 	mov	r3,r2
   86f9c:	e0bff417 	ldw	r2,-48(fp)
   86fa0:	1885883a 	add	r2,r3,r2
   86fa4:	10800003 	ldbu	r2,0(r2)
   86fa8:	11003fcc 	andi	r4,r2,255
   86fac:	01420404 	movi	r5,2064
   86fb0:	00877e40 	call	877e4 <__mulsi3>
   86fb4:	88a3883a 	add	r17,r17,r2
   86fb8:	e0bfef17 	ldw	r2,-68(fp)
   86fbc:	1007883a 	mov	r3,r2
   86fc0:	e0bff317 	ldw	r2,-52(fp)
   86fc4:	1885883a 	add	r2,r3,r2
   86fc8:	10800003 	ldbu	r2,0(r2)
   86fcc:	11003fcc 	andi	r4,r2,255
   86fd0:	01406444 	movi	r5,401
   86fd4:	00877e40 	call	877e4 <__mulsi3>
   86fd8:	8885883a 	add	r2,r17,r2
   86fdc:	1005d33a 	srai	r2,r2,12
   86fe0:	80800005 	stb	r2,0(r16)
   86fe4:	e0bfe917 	ldw	r2,-92(fp)
   86fe8:	10800044 	addi	r2,r2,1
   86fec:	e0bfe915 	stw	r2,-92(fp)
						Y_val[image_width/2+(even++)] = (1052*R_two_val[j]+2064*G_two_val[j]+401*B_two_val[j])>>12;*/

			}


					for (j = 0; j < image_width; j++) {
   86ff0:	e0bfef17 	ldw	r2,-68(fp)
   86ff4:	10800044 	addi	r2,r2,1
   86ff8:	e0bfef15 	stw	r2,-68(fp)
   86ffc:	e0ffef17 	ldw	r3,-68(fp)
   87000:	e0bfeb17 	ldw	r2,-84(fp)
   87004:	18bf7616 	blt	r3,r2,86de0 <compute_Y_task+0x434>


			}


			return_code = OSMemPut(MemoryPartition, (void *)R_val);
   87008:	d1270b17 	ldw	r4,-25556(gp)
   8700c:	e17ff917 	ldw	r5,-28(fp)
   87010:	00974140 	call	97414 <OSMemPut>
   87014:	e0bffa05 	stb	r2,-24(fp)
			alt_ucosii_check_return_code(return_code);
   87018:	e0bffa03 	ldbu	r2,-24(fp)
   8701c:	11003fcc 	andi	r4,r2,255
   87020:	00844500 	call	84450 <alt_ucosii_check_return_code>
			return_code = OSMemPut(MemoryPartition, (void *)G_val);
   87024:	d1270b17 	ldw	r4,-25556(gp)
   87028:	e17ff817 	ldw	r5,-32(fp)
   8702c:	00974140 	call	97414 <OSMemPut>
   87030:	e0bffa05 	stb	r2,-24(fp)
			alt_ucosii_check_return_code(return_code);
   87034:	e0bffa03 	ldbu	r2,-24(fp)
   87038:	11003fcc 	andi	r4,r2,255
   8703c:	00844500 	call	84450 <alt_ucosii_check_return_code>
			return_code = OSMemPut(MemoryPartition, (void *)B_val);
   87040:	d1270b17 	ldw	r4,-25556(gp)
   87044:	e17ff717 	ldw	r5,-36(fp)
   87048:	00974140 	call	97414 <OSMemPut>
   8704c:	e0bffa05 	stb	r2,-24(fp)
			alt_ucosii_check_return_code(return_code);		
   87050:	e0bffa03 	ldbu	r2,-24(fp)
   87054:	11003fcc 	andi	r4,r2,255
   87058:	00844500 	call	84450 <alt_ucosii_check_return_code>

			//for image 2 MemPart
			return_code = OSMemPut(MemoryPartition, (void *)R_two_val);
   8705c:	d1270b17 	ldw	r4,-25556(gp)
   87060:	e17ff517 	ldw	r5,-44(fp)
   87064:	00974140 	call	97414 <OSMemPut>
   87068:	e0bffa05 	stb	r2,-24(fp)
			alt_ucosii_check_return_code(return_code);
   8706c:	e0bffa03 	ldbu	r2,-24(fp)
   87070:	11003fcc 	andi	r4,r2,255
   87074:	00844500 	call	84450 <alt_ucosii_check_return_code>
			return_code = OSMemPut(MemoryPartition, (void *)G_two_val);
   87078:	d1270b17 	ldw	r4,-25556(gp)
   8707c:	e17ff417 	ldw	r5,-48(fp)
   87080:	00974140 	call	97414 <OSMemPut>
   87084:	e0bffa05 	stb	r2,-24(fp)
			alt_ucosii_check_return_code(return_code);
   87088:	e0bffa03 	ldbu	r2,-24(fp)
   8708c:	11003fcc 	andi	r4,r2,255
   87090:	00844500 	call	84450 <alt_ucosii_check_return_code>
			return_code = OSMemPut(MemoryPartition, (void *)B_two_val);
   87094:	d1270b17 	ldw	r4,-25556(gp)
   87098:	e17ff317 	ldw	r5,-52(fp)
   8709c:	00974140 	call	97414 <OSMemPut>
   870a0:	e0bffa05 	stb	r2,-24(fp)
			alt_ucosii_check_return_code(return_code);
   870a4:	e0bffa03 	ldbu	r2,-24(fp)
   870a8:	11003fcc 	andi	r4,r2,255
   870ac:	00844500 	call	84450 <alt_ucosii_check_return_code>

			// One line of Y is ready
			seg7_show(SEG7_DISPLAY_0_BASE, i);
   870b0:	00c00434 	movhi	r3,16
   870b4:	18c52a04 	addi	r3,r3,5288
   870b8:	e0bff017 	ldw	r2,-64(fp)
   870bc:	18800035 	stwio	r2,0(r3)
			// printf("line %d of Y computed\n", i);
			return_code = OSMboxPost(YImageWidthMailbox, (void *)(image_width));
   870c0:	d1270e17 	ldw	r4,-25544(gp)
   870c4:	e17feb17 	ldw	r5,-84(fp)
   870c8:	0096ad80 	call	96ad8 <OSMboxPost>
   870cc:	e0bffa05 	stb	r2,-24(fp)
			alt_ucosii_check_return_code(return_code);
   870d0:	e0bffa03 	ldbu	r2,-24(fp)
   870d4:	11003fcc 	andi	r4,r2,255
   870d8:	00844500 	call	84450 <alt_ucosii_check_return_code>
			return_code = OSMboxPost(YImageHeightMailbox, (void *)(image_height));
   870dc:	d1270f17 	ldw	r4,-25540(gp)
   870e0:	e17fec17 	ldw	r5,-80(fp)
   870e4:	0096ad80 	call	96ad8 <OSMboxPost>
   870e8:	e0bffa05 	stb	r2,-24(fp)
			alt_ucosii_check_return_code(return_code);
   870ec:	e0bffa03 	ldbu	r2,-24(fp)
   870f0:	11003fcc 	andi	r4,r2,255
   870f4:	00844500 	call	84450 <alt_ucosii_check_return_code>
			return_code = OSMboxPost(YMailbox, (void *)(Y_val));
   870f8:	d1271617 	ldw	r4,-25512(gp)
   870fc:	e17ff617 	ldw	r5,-40(fp)
   87100:	0096ad80 	call	96ad8 <OSMboxPost>
   87104:	e0bffa05 	stb	r2,-24(fp)
			alt_ucosii_check_return_code(return_code);
   87108:	e0bffa03 	ldbu	r2,-24(fp)
   8710c:	11003fcc 	andi	r4,r2,255
   87110:	00844500 	call	84450 <alt_ucosii_check_return_code>
			
			OSFlagPost(SDCardFlag, SD_PROCESS_Y_READY, OS_FLAG_CLR, &return_code);
   87114:	d1270d17 	ldw	r4,-25548(gp)
   87118:	e1fffa04 	addi	r7,fp,-24
   8711c:	01401004 	movi	r5,64
   87120:	000d883a 	mov	r6,zero
   87124:	009595c0 	call	9595c <OSFlagPost>
			alt_ucosii_check_return_code(return_code);
   87128:	e0bffa03 	ldbu	r2,-24(fp)
   8712c:	11003fcc 	andi	r4,r2,255
   87130:	00844500 	call	84450 <alt_ucosii_check_return_code>

			OSFlagPend(SDCardFlag, SD_PRESENCE_FLAG | SD_FILESYSTEM_FLAG | SD_PROCESS_Y_READY, OS_FLAG_WAIT_SET_ALL, 0, &return_code);
   87134:	d1270d17 	ldw	r4,-25548(gp)
   87138:	e0bffa04 	addi	r2,fp,-24
   8713c:	d8800015 	stw	r2,0(sp)
   87140:	014010c4 	movi	r5,67
   87144:	01800084 	movi	r6,2
   87148:	000f883a 	mov	r7,zero
   8714c:	00952b00 	call	952b0 <OSFlagPend>
			alt_ucosii_check_return_code(return_code);
   87150:	e0bffa03 	ldbu	r2,-24(fp)
   87154:	11003fcc 	andi	r4,r2,255
   87158:	00844500 	call	84450 <alt_ucosii_check_return_code>
		
		// get memory block
		Y_val = OSMemGet(MemoryPartition, &return_code);
		alt_ucosii_check_return_code(return_code);
		
		for (i = 0; i < ((image_height < 0) ? -image_height : image_height); i++) {
   8715c:	e0bff017 	ldw	r2,-64(fp)
   87160:	10800044 	addi	r2,r2,1
   87164:	e0bff015 	stw	r2,-64(fp)
   87168:	e0bfec17 	ldw	r2,-80(fp)
   8716c:	e0bffc15 	stw	r2,-16(fp)
   87170:	e0fffc17 	ldw	r3,-16(fp)
   87174:	1804403a 	cmpge	r2,r3,zero
   87178:	1000031e 	bne	r2,zero,87188 <compute_Y_task+0x7dc>
   8717c:	e0bffc17 	ldw	r2,-16(fp)
   87180:	0085c83a 	sub	r2,zero,r2
   87184:	e0bffc15 	stw	r2,-16(fp)
   87188:	e0bff017 	ldw	r2,-64(fp)
   8718c:	e0fffc17 	ldw	r3,-16(fp)
   87190:	10fe5016 	blt	r2,r3,86ad4 <compute_Y_task+0x128>

			OSFlagPend(SDCardFlag, SD_PRESENCE_FLAG | SD_FILESYSTEM_FLAG | SD_PROCESS_Y_READY, OS_FLAG_WAIT_SET_ALL, 0, &return_code);
			alt_ucosii_check_return_code(return_code);
		}
		
		printf("Compute Y done\n");
   87194:	010002b4 	movhi	r4,10
   87198:	213f4204 	addi	r4,r4,-760
   8719c:	0087aa40 	call	87aa4 <puts>
				
		return_code = OSMemPut(MemoryPartition, (void *)Y_val);
   871a0:	d1270b17 	ldw	r4,-25556(gp)
   871a4:	e17ff617 	ldw	r5,-40(fp)
   871a8:	00974140 	call	97414 <OSMemPut>
   871ac:	e0bffa05 	stb	r2,-24(fp)
		alt_ucosii_check_return_code(return_code);		
   871b0:	e0bffa03 	ldbu	r2,-24(fp)
   871b4:	11003fcc 	andi	r4,r2,255
   871b8:	00844500 	call	84450 <alt_ucosii_check_return_code>
	}
   871bc:	003e0306 	br	869cc <compute_Y_task+0x20>

000871c0 <process_Y_task>:
}

void process_Y_task(void *pdata) {
   871c0:	defff604 	addi	sp,sp,-40
   871c4:	dfc00915 	stw	ra,36(sp)
   871c8:	df000815 	stw	fp,32(sp)
   871cc:	df000804 	addi	fp,sp,32
   871d0:	e13fff15 	stw	r4,-4(fp)
	INT8U return_code = OS_NO_ERR;
   871d4:	e03ffe05 	stb	zero,-8(fp)
	int i;
	unsigned short int data;
	int image_width, image_height;
	
	while (1) {
		Y_val = (alt_u8 *)OSMboxPend(YMailbox, 0, &return_code);
   871d8:	d1271617 	ldw	r4,-25512(gp)
   871dc:	e1bffe04 	addi	r6,fp,-8
   871e0:	000b883a 	mov	r5,zero
   871e4:	00966940 	call	96694 <OSMboxPend>
   871e8:	e0bffd15 	stw	r2,-12(fp)
		alt_ucosii_check_return_code(return_code);
   871ec:	e0bffe03 	ldbu	r2,-8(fp)
   871f0:	11003fcc 	andi	r4,r2,255
   871f4:	00844500 	call	84450 <alt_ucosii_check_return_code>

		OSFlagPost(SDCardFlag, SD_WRITE_DATA_READY, OS_FLAG_CLR, &return_code);
   871f8:	d1270d17 	ldw	r4,-25548(gp)
   871fc:	e1fffe04 	addi	r7,fp,-8
   87200:	01400804 	movi	r5,32
   87204:	000d883a 	mov	r6,zero
   87208:	009595c0 	call	9595c <OSFlagPost>
		alt_ucosii_check_return_code(return_code);
   8720c:	e0bffe03 	ldbu	r2,-8(fp)
   87210:	11003fcc 	andi	r4,r2,255
   87214:	00844500 	call	84450 <alt_ucosii_check_return_code>

		image_width = (int)OSMboxPend(YImageWidthMailbox, 0, &return_code);
   87218:	d1270e17 	ldw	r4,-25544(gp)
   8721c:	e1bffe04 	addi	r6,fp,-8
   87220:	000b883a 	mov	r5,zero
   87224:	00966940 	call	96694 <OSMboxPend>
   87228:	e0bffa15 	stw	r2,-24(fp)
		alt_ucosii_check_return_code(return_code);
   8722c:	e0bffe03 	ldbu	r2,-8(fp)
   87230:	11003fcc 	andi	r4,r2,255
   87234:	00844500 	call	84450 <alt_ucosii_check_return_code>
		image_height = (int)OSMboxPend(YImageHeightMailbox, 0, &return_code);
   87238:	d1270f17 	ldw	r4,-25540(gp)
   8723c:	e1bffe04 	addi	r6,fp,-8
   87240:	000b883a 	mov	r5,zero
   87244:	00966940 	call	96694 <OSMboxPend>
   87248:	e0bff915 	stw	r2,-28(fp)
		alt_ucosii_check_return_code(return_code);
   8724c:	e0bffe03 	ldbu	r2,-8(fp)
   87250:	11003fcc 	andi	r4,r2,255
   87254:	00844500 	call	84450 <alt_ucosii_check_return_code>

		return_code = OSMboxPost(WriteImageWidthMailbox, (void *)(image_width));
   87258:	d1271517 	ldw	r4,-25516(gp)
   8725c:	e17ffa17 	ldw	r5,-24(fp)
   87260:	0096ad80 	call	96ad8 <OSMboxPost>
   87264:	e0bffe05 	stb	r2,-8(fp)
		alt_ucosii_check_return_code(return_code);
   87268:	e0bffe03 	ldbu	r2,-8(fp)
   8726c:	11003fcc 	andi	r4,r2,255
   87270:	00844500 	call	84450 <alt_ucosii_check_return_code>
		return_code = OSMboxPost(WriteImageHeightMailbox, (void *)(image_height));
   87274:	d1271017 	ldw	r4,-25536(gp)
   87278:	e17ff917 	ldw	r5,-28(fp)
   8727c:	0096ad80 	call	96ad8 <OSMboxPost>
   87280:	e0bffe05 	stb	r2,-8(fp)
		alt_ucosii_check_return_code(return_code);
   87284:	e0bffe03 	ldbu	r2,-8(fp)
   87288:	11003fcc 	andi	r4,r2,255
   8728c:	00844500 	call	84450 <alt_ucosii_check_return_code>
		
		OSFlagPend(SDCardFlag, SD_PRESENCE_FLAG | SD_FILESYSTEM_FLAG, OS_FLAG_WAIT_SET_ALL, 0, &return_code);
   87290:	d1270d17 	ldw	r4,-25548(gp)
   87294:	e0bffe04 	addi	r2,fp,-8
   87298:	d8800015 	stw	r2,0(sp)
   8729c:	014000c4 	movi	r5,3
   872a0:	01800084 	movi	r6,2
   872a4:	000f883a 	mov	r7,zero
   872a8:	00952b00 	call	952b0 <OSFlagPend>
		alt_ucosii_check_return_code(return_code);
   872ac:	e0bffe03 	ldbu	r2,-8(fp)
   872b0:	11003fcc 	andi	r4,r2,255
   872b4:	00844500 	call	84450 <alt_ucosii_check_return_code>
		
				
		for (i = 0; i < image_width; ) {
   872b8:	e03ffc15 	stw	zero,-16(fp)
   872bc:	00002a06 	br	87368 <process_Y_task+0x1a8>
			if (OSQPost(SDWriteQueue, (void *)(Y_val[i] & 0xFF)) == OS_Q_FULL) {
   872c0:	d1271417 	ldw	r4,-25520(gp)
   872c4:	e0bffc17 	ldw	r2,-16(fp)
   872c8:	1007883a 	mov	r3,r2
   872cc:	e0bffd17 	ldw	r2,-12(fp)
   872d0:	1885883a 	add	r2,r3,r2
   872d4:	10800003 	ldbu	r2,0(r2)
   872d8:	10803fcc 	andi	r2,r2,255
   872dc:	100b883a 	mov	r5,r2
   872e0:	00996480 	call	99648 <OSQPost>
   872e4:	10803fcc 	andi	r2,r2,255
   872e8:	10800798 	cmpnei	r2,r2,30
   872ec:	10001b1e 	bne	r2,zero,8735c <process_Y_task+0x19c>
				// printf("WriteQueue full\n");
				OSFlagPost(SDCardFlag, SD_WRITE_NEED_FILL, OS_FLAG_CLR, &return_code);
   872f0:	d1270d17 	ldw	r4,-25548(gp)
   872f4:	e1fffe04 	addi	r7,fp,-8
   872f8:	01400404 	movi	r5,16
   872fc:	000d883a 	mov	r6,zero
   87300:	009595c0 	call	9595c <OSFlagPost>
				alt_ucosii_check_return_code(return_code);
   87304:	e0bffe03 	ldbu	r2,-8(fp)
   87308:	11003fcc 	andi	r4,r2,255
   8730c:	00844500 	call	84450 <alt_ucosii_check_return_code>
				OSFlagPost(SDCardFlag, SD_WRITE_DATA_READY, OS_FLAG_SET, &return_code);
   87310:	d1270d17 	ldw	r4,-25548(gp)
   87314:	e1fffe04 	addi	r7,fp,-8
   87318:	01400804 	movi	r5,32
   8731c:	01800044 	movi	r6,1
   87320:	009595c0 	call	9595c <OSFlagPost>
				alt_ucosii_check_return_code(return_code);
   87324:	e0bffe03 	ldbu	r2,-8(fp)
   87328:	11003fcc 	andi	r4,r2,255
   8732c:	00844500 	call	84450 <alt_ucosii_check_return_code>
				OSFlagPend(SDCardFlag, SD_PRESENCE_FLAG | SD_FILESYSTEM_FLAG | SD_WRITE_NEED_FILL, OS_FLAG_WAIT_SET_ALL, 0, &return_code);
   87330:	d1270d17 	ldw	r4,-25548(gp)
   87334:	e0bffe04 	addi	r2,fp,-8
   87338:	d8800015 	stw	r2,0(sp)
   8733c:	014004c4 	movi	r5,19
   87340:	01800084 	movi	r6,2
   87344:	000f883a 	mov	r7,zero
   87348:	00952b00 	call	952b0 <OSFlagPend>
				alt_ucosii_check_return_code(return_code);
   8734c:	e0bffe03 	ldbu	r2,-8(fp)
   87350:	11003fcc 	andi	r4,r2,255
   87354:	00844500 	call	84450 <alt_ucosii_check_return_code>
   87358:	00000306 	br	87368 <process_Y_task+0x1a8>
			} else {
				i++;
   8735c:	e0bffc17 	ldw	r2,-16(fp)
   87360:	10800044 	addi	r2,r2,1
   87364:	e0bffc15 	stw	r2,-16(fp)
		
		OSFlagPend(SDCardFlag, SD_PRESENCE_FLAG | SD_FILESYSTEM_FLAG, OS_FLAG_WAIT_SET_ALL, 0, &return_code);
		alt_ucosii_check_return_code(return_code);
		
				
		for (i = 0; i < image_width; ) {
   87368:	e0fffc17 	ldw	r3,-16(fp)
   8736c:	e0bffa17 	ldw	r2,-24(fp)
   87370:	18bfd316 	blt	r3,r2,872c0 <process_Y_task+0x100>
				i++;
			}
		}

		// Let the SD write task to finish writing the remaining data in the queue
		OSFlagPost(SDCardFlag, SD_WRITE_NEED_FILL, OS_FLAG_CLR, &return_code);
   87374:	d1270d17 	ldw	r4,-25548(gp)
   87378:	e1fffe04 	addi	r7,fp,-8
   8737c:	01400404 	movi	r5,16
   87380:	000d883a 	mov	r6,zero
   87384:	009595c0 	call	9595c <OSFlagPost>
		alt_ucosii_check_return_code(return_code);
   87388:	e0bffe03 	ldbu	r2,-8(fp)
   8738c:	11003fcc 	andi	r4,r2,255
   87390:	00844500 	call	84450 <alt_ucosii_check_return_code>
		OSFlagPost(SDCardFlag, SD_WRITE_DATA_READY, OS_FLAG_SET, &return_code);
   87394:	d1270d17 	ldw	r4,-25548(gp)
   87398:	e1fffe04 	addi	r7,fp,-8
   8739c:	01400804 	movi	r5,32
   873a0:	01800044 	movi	r6,1
   873a4:	009595c0 	call	9595c <OSFlagPost>
		alt_ucosii_check_return_code(return_code);
   873a8:	e0bffe03 	ldbu	r2,-8(fp)
   873ac:	11003fcc 	andi	r4,r2,255
   873b0:	00844500 	call	84450 <alt_ucosii_check_return_code>
		OSFlagPend(SDCardFlag, SD_PRESENCE_FLAG | SD_FILESYSTEM_FLAG | SD_WRITE_NEED_FILL, OS_FLAG_WAIT_SET_ALL, 0, &return_code);
   873b4:	d1270d17 	ldw	r4,-25548(gp)
   873b8:	e0bffe04 	addi	r2,fp,-8
   873bc:	d8800015 	stw	r2,0(sp)
   873c0:	014004c4 	movi	r5,19
   873c4:	01800084 	movi	r6,2
   873c8:	000f883a 	mov	r7,zero
   873cc:	00952b00 	call	952b0 <OSFlagPend>
		alt_ucosii_check_return_code(return_code);
   873d0:	e0bffe03 	ldbu	r2,-8(fp)
   873d4:	11003fcc 	andi	r4,r2,255
   873d8:	00844500 	call	84450 <alt_ucosii_check_return_code>
		
		// printf("One line Y written\n");
		OSFlagPost(SDCardFlag, SD_PROCESS_Y_READY, OS_FLAG_SET, &return_code);
   873dc:	d1270d17 	ldw	r4,-25548(gp)
   873e0:	e1fffe04 	addi	r7,fp,-8
   873e4:	01401004 	movi	r5,64
   873e8:	01800044 	movi	r6,1
   873ec:	009595c0 	call	9595c <OSFlagPost>
		alt_ucosii_check_return_code(return_code);
   873f0:	e0bffe03 	ldbu	r2,-8(fp)
   873f4:	11003fcc 	andi	r4,r2,255
   873f8:	00844500 	call	84450 <alt_ucosii_check_return_code>
	}
   873fc:	003f7606 	br	871d8 <process_Y_task+0x18>

00087400 <task_launcher>:
}

// Task launcher
// It creates all the custom tasks
// And then it deletes itself
void task_launcher(void *pdata) {
   87400:	defff404 	addi	sp,sp,-48
   87404:	dfc00b15 	stw	ra,44(sp)
   87408:	df000a15 	stw	fp,40(sp)
   8740c:	df000a04 	addi	fp,sp,40
   87410:	e13fff15 	stw	r4,-4(fp)
	INT8U return_code = OS_NO_ERR;
   87414:	e03ffe05 	stb	zero,-8(fp)

	#if OS_CRITICAL_METHOD == 3
			OS_CPU_SR cpu_sr;
	#endif

	printf("Starting task launcher...\n");
   87418:	010002b4 	movhi	r4,10
   8741c:	213f4604 	addi	r4,r4,-744
   87420:	0087aa40 	call	87aa4 <puts>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   87424:	0005303a 	rdctl	r2,status
   87428:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8742c:	e0fffc17 	ldw	r3,-16(fp)
   87430:	00bfff84 	movi	r2,-2
   87434:	1884703a 	and	r2,r3,r2
   87438:	1001703a 	wrctl	status,r2
  
  return context;
   8743c:	e0bffc17 	ldw	r2,-16(fp)
	while (1) {
		OS_ENTER_CRITICAL();
   87440:	e0bffd15 	stw	r2,-12(fp)
		printf("Creating tasks...\n");
   87444:	010002b4 	movhi	r4,10
   87448:	213f4d04 	addi	r4,r4,-716
   8744c:	0087aa40 	call	87aa4 <puts>

		return_code = OSTaskCreateExt(SD_presence_detect_task,
   87450:	018002f4 	movhi	r6,11
   87454:	31a5d804 	addi	r6,r6,-26784
   87458:	008002c4 	movi	r2,11
   8745c:	d8800015 	stw	r2,0(sp)
   87460:	008002b4 	movhi	r2,10
   87464:	109dd904 	addi	r2,r2,30564
   87468:	d8800115 	stw	r2,4(sp)
   8746c:	00820004 	movi	r2,2048
   87470:	d8800215 	stw	r2,8(sp)
   87474:	008002f4 	movhi	r2,11
   87478:	10860f04 	addi	r2,r2,6204
   8747c:	d8800315 	stw	r2,12(sp)
   87480:	d8000415 	stw	zero,16(sp)
   87484:	01000234 	movhi	r4,8
   87488:	21134804 	addi	r4,r4,19744
   8748c:	000b883a 	mov	r5,zero
   87490:	01c002c4 	movi	r7,11
   87494:	009b0c00 	call	9b0c0 <OSTaskCreateExt>
   87498:	e0bffe05 	stb	r2,-8(fp)
			SD_PRESENCE_DETECT_PRIORITY,
			&SD_presence_detect_stk[0],
			TASK_STACKSIZE,
			&SD_presence_detect_tcb,
			0);
		alt_ucosii_check_return_code(return_code);
   8749c:	e13ffe03 	ldbu	r4,-8(fp)
   874a0:	00844500 	call	84450 <alt_ucosii_check_return_code>

		return_code = OSTaskCreateExt(SD_read_task,
   874a4:	018002f4 	movhi	r6,11
   874a8:	31b5d804 	addi	r6,r6,-10400
   874ac:	00800304 	movi	r2,12
   874b0:	d8800015 	stw	r2,0(sp)
   874b4:	008002f4 	movhi	r2,11
   874b8:	10add904 	addi	r2,r2,-18588
   874bc:	d8800115 	stw	r2,4(sp)
   874c0:	00820004 	movi	r2,2048
   874c4:	d8800215 	stw	r2,8(sp)
   874c8:	008002f4 	movhi	r2,11
   874cc:	10b5d904 	addi	r2,r2,-10396
   874d0:	d8800315 	stw	r2,12(sp)
   874d4:	d8000415 	stw	zero,16(sp)
   874d8:	01000234 	movhi	r4,8
   874dc:	2113a604 	addi	r4,r4,20120
   874e0:	000b883a 	mov	r5,zero
   874e4:	01c00304 	movi	r7,12
   874e8:	009b0c00 	call	9b0c0 <OSTaskCreateExt>
   874ec:	e0bffe05 	stb	r2,-8(fp)
			SD_READ_PRIORITY,
			&SD_read_stk[0],
			TASK_STACKSIZE,
			&SD_read_tcb,
			0);
		alt_ucosii_check_return_code(return_code);
   874f0:	e13ffe03 	ldbu	r4,-8(fp)
   874f4:	00844500 	call	84450 <alt_ucosii_check_return_code>

		return_code = OSTaskCreateExt(SD_ReadQ_2, //new task for readqueue2
   874f8:	018002f4 	movhi	r6,11
   874fc:	31bdf304 	addi	r6,r6,-2100
   87500:	00800344 	movi	r2,13
   87504:	d8800015 	stw	r2,0(sp)
   87508:	008002f4 	movhi	r2,11
   8750c:	10b5f404 	addi	r2,r2,-10288
   87510:	d8800115 	stw	r2,4(sp)
   87514:	00820004 	movi	r2,2048
   87518:	d8800215 	stw	r2,8(sp)
   8751c:	008002f4 	movhi	r2,11
   87520:	1085f404 	addi	r2,r2,6096
   87524:	d8800315 	stw	r2,12(sp)
   87528:	d8000415 	stw	zero,16(sp)
   8752c:	01000234 	movhi	r4,8
   87530:	2115a304 	addi	r4,r4,22156
   87534:	000b883a 	mov	r5,zero
   87538:	01c00344 	movi	r7,13
   8753c:	009b0c00 	call	9b0c0 <OSTaskCreateExt>
   87540:	e0bffe05 	stb	r2,-8(fp)
					SD_READTWO_PRIORITY,
					&SD_read2_stk[0],
					TASK_STACKSIZE,
					&SD_read2_tcb,
					0);
		alt_ucosii_check_return_code(return_code);
   87544:	e13ffe03 	ldbu	r4,-8(fp)
   87548:	00844500 	call	84450 <alt_ucosii_check_return_code>

		return_code = OSTaskCreateExt(SD_write_task,
   8754c:	018002f4 	movhi	r6,11
   87550:	3185f304 	addi	r6,r6,6092
   87554:	00800404 	movi	r2,16
   87558:	d8800015 	stw	r2,0(sp)
   8755c:	008002f4 	movhi	r2,11
   87560:	10bdf404 	addi	r2,r2,-2096
   87564:	d8800115 	stw	r2,4(sp)
   87568:	00820004 	movi	r2,2048
   8756c:	d8800215 	stw	r2,8(sp)
   87570:	008002f4 	movhi	r2,11
   87574:	108e2a04 	addi	r2,r2,14504
   87578:	d8800315 	stw	r2,12(sp)
   8757c:	d8000415 	stw	zero,16(sp)
   87580:	01000234 	movhi	r4,8
   87584:	21179204 	addi	r4,r4,24136
   87588:	000b883a 	mov	r5,zero
   8758c:	01c00404 	movi	r7,16
   87590:	009b0c00 	call	9b0c0 <OSTaskCreateExt>
   87594:	e0bffe05 	stb	r2,-8(fp)
			SD_WRITE_PRIORITY,
			&SD_write_stk[0],
			TASK_STACKSIZE,
			&SD_write_tcb,
			0);
		alt_ucosii_check_return_code(return_code);
   87598:	e13ffe03 	ldbu	r4,-8(fp)
   8759c:	00844500 	call	84450 <alt_ucosii_check_return_code>

		return_code = OSTaskCreateExt(compute_Y_task,
   875a0:	018002b4 	movhi	r6,10
   875a4:	319db904 	addi	r6,r6,30436
   875a8:	00800384 	movi	r2,14
   875ac:	d8800015 	stw	r2,0(sp)
   875b0:	008002b4 	movhi	r2,10
   875b4:	1095ba04 	addi	r2,r2,22248
   875b8:	d8800115 	stw	r2,4(sp)
   875bc:	00820004 	movi	r2,2048
   875c0:	d8800215 	stw	r2,8(sp)
   875c4:	008002b4 	movhi	r2,10
   875c8:	10959f04 	addi	r2,r2,22140
   875cc:	d8800315 	stw	r2,12(sp)
   875d0:	d8000415 	stw	zero,16(sp)
   875d4:	01000234 	movhi	r4,8
   875d8:	211a6b04 	addi	r4,r4,27052
   875dc:	000b883a 	mov	r5,zero
   875e0:	01c00384 	movi	r7,14
   875e4:	009b0c00 	call	9b0c0 <OSTaskCreateExt>
   875e8:	e0bffe05 	stb	r2,-8(fp)
			COMPUTE_Y_PRIORITY,
			&compute_Y_stk[0],
			TASK_STACKSIZE,
			&compute_Y_tcb,
			0);
		alt_ucosii_check_return_code(return_code);
   875ec:	e13ffe03 	ldbu	r4,-8(fp)
   875f0:	00844500 	call	84450 <alt_ucosii_check_return_code>

		return_code = OSTaskCreateExt(process_Y_task,
   875f4:	018002f4 	movhi	r6,11
   875f8:	31add804 	addi	r6,r6,-18592
   875fc:	008003c4 	movi	r2,15
   87600:	d8800015 	stw	r2,0(sp)
   87604:	008002f4 	movhi	r2,11
   87608:	10a5d904 	addi	r2,r2,-26780
   8760c:	d8800115 	stw	r2,4(sp)
   87610:	00820004 	movi	r2,2048
   87614:	d8800215 	stw	r2,8(sp)
   87618:	008002b4 	movhi	r2,10
   8761c:	109dba04 	addi	r2,r2,30440
   87620:	d8800315 	stw	r2,12(sp)
   87624:	d8000415 	stw	zero,16(sp)
   87628:	01000234 	movhi	r4,8
   8762c:	211c7004 	addi	r4,r4,29120
   87630:	000b883a 	mov	r5,zero
   87634:	01c003c4 	movi	r7,15
   87638:	009b0c00 	call	9b0c0 <OSTaskCreateExt>
   8763c:	e0bffe05 	stb	r2,-8(fp)
			PROCESS_Y_PRIORITY,
			&process_Y_stk[0],
			TASK_STACKSIZE,
			&process_Y_tcb,
			0);
		alt_ucosii_check_return_code(return_code);
   87640:	e13ffe03 	ldbu	r4,-8(fp)
   87644:	00844500 	call	84450 <alt_ucosii_check_return_code>



		printf("Finish creating tasks...\n");
   87648:	010002b4 	movhi	r4,10
   8764c:	213f5204 	addi	r4,r4,-696
   87650:	0087aa40 	call	87aa4 <puts>

		printf("\n");
   87654:	01000284 	movi	r4,10
   87658:	00879e00 	call	879e0 <putchar>
		OSTimeDlyHMSM(0, 0, 1, 0);
   8765c:	0009883a 	mov	r4,zero
   87660:	000b883a 	mov	r5,zero
   87664:	01800044 	movi	r6,1
   87668:	000f883a 	mov	r7,zero
   8766c:	009c5040 	call	9c504 <OSTimeDlyHMSM>

		return_code = OSTaskDel(OS_PRIO_SELF);
   87670:	01003fc4 	movi	r4,255
   87674:	009b2c00 	call	9b2c0 <OSTaskDel>
   87678:	e0bffe05 	stb	r2,-8(fp)
		alt_ucosii_check_return_code(return_code);
   8767c:	e13ffe03 	ldbu	r4,-8(fp)
   87680:	00844500 	call	84450 <alt_ucosii_check_return_code>
   87684:	e0bffd17 	ldw	r2,-12(fp)
   87688:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8768c:	e0bffb17 	ldw	r2,-20(fp)
   87690:	1001703a 	wrctl	status,r2

		OS_EXIT_CRITICAL();
	}
   87694:	003f6306 	br	87424 <task_launcher+0x24>

00087698 <udivmodsi4>:
   87698:	29001b2e 	bgeu	r5,r4,87708 <udivmodsi4+0x70>
   8769c:	28001a16 	blt	r5,zero,87708 <udivmodsi4+0x70>
   876a0:	00800044 	movi	r2,1
   876a4:	0007883a 	mov	r3,zero
   876a8:	01c007c4 	movi	r7,31
   876ac:	00000306 	br	876bc <udivmodsi4+0x24>
   876b0:	19c01326 	beq	r3,r7,87700 <udivmodsi4+0x68>
   876b4:	18c00044 	addi	r3,r3,1
   876b8:	28000416 	blt	r5,zero,876cc <udivmodsi4+0x34>
   876bc:	294b883a 	add	r5,r5,r5
   876c0:	1085883a 	add	r2,r2,r2
   876c4:	293ffa36 	bltu	r5,r4,876b0 <udivmodsi4+0x18>
   876c8:	10000d26 	beq	r2,zero,87700 <udivmodsi4+0x68>
   876cc:	0007883a 	mov	r3,zero
   876d0:	21400236 	bltu	r4,r5,876dc <udivmodsi4+0x44>
   876d4:	2149c83a 	sub	r4,r4,r5
   876d8:	1886b03a 	or	r3,r3,r2
   876dc:	1004d07a 	srli	r2,r2,1
   876e0:	280ad07a 	srli	r5,r5,1
   876e4:	103ffa1e 	bne	r2,zero,876d0 <udivmodsi4+0x38>
   876e8:	30000226 	beq	r6,zero,876f4 <udivmodsi4+0x5c>
   876ec:	2005883a 	mov	r2,r4
   876f0:	f800283a 	ret
   876f4:	1809883a 	mov	r4,r3
   876f8:	2005883a 	mov	r2,r4
   876fc:	f800283a 	ret
   87700:	0007883a 	mov	r3,zero
   87704:	003ff806 	br	876e8 <udivmodsi4+0x50>
   87708:	00800044 	movi	r2,1
   8770c:	0007883a 	mov	r3,zero
   87710:	003fef06 	br	876d0 <udivmodsi4+0x38>

00087714 <__divsi3>:
   87714:	defffe04 	addi	sp,sp,-8
   87718:	dc000015 	stw	r16,0(sp)
   8771c:	dfc00115 	stw	ra,4(sp)
   87720:	0021883a 	mov	r16,zero
   87724:	20000c16 	blt	r4,zero,87758 <__divsi3+0x44>
   87728:	000d883a 	mov	r6,zero
   8772c:	28000e16 	blt	r5,zero,87768 <__divsi3+0x54>
   87730:	00876980 	call	87698 <udivmodsi4>
   87734:	1007883a 	mov	r3,r2
   87738:	8005003a 	cmpeq	r2,r16,zero
   8773c:	1000011e 	bne	r2,zero,87744 <__divsi3+0x30>
   87740:	00c7c83a 	sub	r3,zero,r3
   87744:	1805883a 	mov	r2,r3
   87748:	dfc00117 	ldw	ra,4(sp)
   8774c:	dc000017 	ldw	r16,0(sp)
   87750:	dec00204 	addi	sp,sp,8
   87754:	f800283a 	ret
   87758:	0109c83a 	sub	r4,zero,r4
   8775c:	04000044 	movi	r16,1
   87760:	000d883a 	mov	r6,zero
   87764:	283ff20e 	bge	r5,zero,87730 <__divsi3+0x1c>
   87768:	014bc83a 	sub	r5,zero,r5
   8776c:	8021003a 	cmpeq	r16,r16,zero
   87770:	003fef06 	br	87730 <__divsi3+0x1c>

00087774 <__modsi3>:
   87774:	deffff04 	addi	sp,sp,-4
   87778:	dfc00015 	stw	ra,0(sp)
   8777c:	01800044 	movi	r6,1
   87780:	2807883a 	mov	r3,r5
   87784:	20000416 	blt	r4,zero,87798 <__modsi3+0x24>
   87788:	28000c16 	blt	r5,zero,877bc <__modsi3+0x48>
   8778c:	dfc00017 	ldw	ra,0(sp)
   87790:	dec00104 	addi	sp,sp,4
   87794:	00876981 	jmpi	87698 <udivmodsi4>
   87798:	0109c83a 	sub	r4,zero,r4
   8779c:	28000b16 	blt	r5,zero,877cc <__modsi3+0x58>
   877a0:	180b883a 	mov	r5,r3
   877a4:	01800044 	movi	r6,1
   877a8:	00876980 	call	87698 <udivmodsi4>
   877ac:	0085c83a 	sub	r2,zero,r2
   877b0:	dfc00017 	ldw	ra,0(sp)
   877b4:	dec00104 	addi	sp,sp,4
   877b8:	f800283a 	ret
   877bc:	014bc83a 	sub	r5,zero,r5
   877c0:	dfc00017 	ldw	ra,0(sp)
   877c4:	dec00104 	addi	sp,sp,4
   877c8:	00876981 	jmpi	87698 <udivmodsi4>
   877cc:	0147c83a 	sub	r3,zero,r5
   877d0:	003ff306 	br	877a0 <__modsi3+0x2c>

000877d4 <__udivsi3>:
   877d4:	000d883a 	mov	r6,zero
   877d8:	00876981 	jmpi	87698 <udivmodsi4>

000877dc <__umodsi3>:
   877dc:	01800044 	movi	r6,1
   877e0:	00876981 	jmpi	87698 <udivmodsi4>

000877e4 <__mulsi3>:
   877e4:	20000a26 	beq	r4,zero,87810 <__mulsi3+0x2c>
   877e8:	0007883a 	mov	r3,zero
   877ec:	2080004c 	andi	r2,r4,1
   877f0:	1005003a 	cmpeq	r2,r2,zero
   877f4:	2008d07a 	srli	r4,r4,1
   877f8:	1000011e 	bne	r2,zero,87800 <__mulsi3+0x1c>
   877fc:	1947883a 	add	r3,r3,r5
   87800:	294b883a 	add	r5,r5,r5
   87804:	203ff91e 	bne	r4,zero,877ec <__mulsi3+0x8>
   87808:	1805883a 	mov	r2,r3
   8780c:	f800283a 	ret
   87810:	0007883a 	mov	r3,zero
   87814:	1805883a 	mov	r2,r3
   87818:	f800283a 	ret

0008781c <fprintf>:
   8781c:	defffc04 	addi	sp,sp,-16
   87820:	dfc00115 	stw	ra,4(sp)
   87824:	d9800215 	stw	r6,8(sp)
   87828:	d9c00315 	stw	r7,12(sp)
   8782c:	d8800204 	addi	r2,sp,8
   87830:	100d883a 	mov	r6,r2
   87834:	d8800015 	stw	r2,0(sp)
   87838:	0089b1c0 	call	89b1c <__vfprintf_internal>
   8783c:	dfc00117 	ldw	ra,4(sp)
   87840:	dec00404 	addi	sp,sp,16
   87844:	f800283a 	ret

00087848 <_fprintf_r>:
   87848:	defffd04 	addi	sp,sp,-12
   8784c:	2807883a 	mov	r3,r5
   87850:	dfc00115 	stw	ra,4(sp)
   87854:	d9c00215 	stw	r7,8(sp)
   87858:	d8800204 	addi	r2,sp,8
   8785c:	300b883a 	mov	r5,r6
   87860:	1809883a 	mov	r4,r3
   87864:	100d883a 	mov	r6,r2
   87868:	d8800015 	stw	r2,0(sp)
   8786c:	0089b1c0 	call	89b1c <__vfprintf_internal>
   87870:	dfc00117 	ldw	ra,4(sp)
   87874:	dec00304 	addi	sp,sp,12
   87878:	f800283a 	ret

0008787c <_fwrite_r>:
   8787c:	defff604 	addi	sp,sp,-40
   87880:	dc000515 	stw	r16,20(sp)
   87884:	d9400015 	stw	r5,0(sp)
   87888:	2021883a 	mov	r16,r4
   8788c:	300b883a 	mov	r5,r6
   87890:	3809883a 	mov	r4,r7
   87894:	dcc00815 	stw	r19,32(sp)
   87898:	dc800715 	stw	r18,28(sp)
   8789c:	dc400615 	stw	r17,24(sp)
   878a0:	dfc00915 	stw	ra,36(sp)
   878a4:	3825883a 	mov	r18,r7
   878a8:	3027883a 	mov	r19,r6
   878ac:	00877e40 	call	877e4 <__mulsi3>
   878b0:	1023883a 	mov	r17,r2
   878b4:	00800044 	movi	r2,1
   878b8:	d8800315 	stw	r2,12(sp)
   878bc:	dc400115 	stw	r17,4(sp)
   878c0:	dc400415 	stw	r17,16(sp)
   878c4:	dec00215 	stw	sp,8(sp)
   878c8:	80000326 	beq	r16,zero,878d8 <_fwrite_r+0x5c>
   878cc:	80800e17 	ldw	r2,56(r16)
   878d0:	8009883a 	mov	r4,r16
   878d4:	10001226 	beq	r2,zero,87920 <_fwrite_r+0xa4>
   878d8:	d9400a17 	ldw	r5,40(sp)
   878dc:	8009883a 	mov	r4,r16
   878e0:	d9800204 	addi	r6,sp,8
   878e4:	008bdd80 	call	8bdd8 <__sfvwrite_r>
   878e8:	980b883a 	mov	r5,r19
   878ec:	10000426 	beq	r2,zero,87900 <_fwrite_r+0x84>
   878f0:	d9000417 	ldw	r4,16(sp)
   878f4:	8909c83a 	sub	r4,r17,r4
   878f8:	00877d40 	call	877d4 <__udivsi3>
   878fc:	1025883a 	mov	r18,r2
   87900:	9005883a 	mov	r2,r18
   87904:	dfc00917 	ldw	ra,36(sp)
   87908:	dcc00817 	ldw	r19,32(sp)
   8790c:	dc800717 	ldw	r18,28(sp)
   87910:	dc400617 	ldw	r17,24(sp)
   87914:	dc000517 	ldw	r16,20(sp)
   87918:	dec00a04 	addi	sp,sp,40
   8791c:	f800283a 	ret
   87920:	008b70c0 	call	8b70c <__sinit>
   87924:	003fec06 	br	878d8 <_fwrite_r+0x5c>

00087928 <fwrite>:
   87928:	008002b4 	movhi	r2,10
   8792c:	10871e04 	addi	r2,r2,7288
   87930:	2017883a 	mov	r11,r4
   87934:	11000017 	ldw	r4,0(r2)
   87938:	defffe04 	addi	sp,sp,-8
   8793c:	3013883a 	mov	r9,r6
   87940:	2805883a 	mov	r2,r5
   87944:	d9c00015 	stw	r7,0(sp)
   87948:	580b883a 	mov	r5,r11
   8794c:	100d883a 	mov	r6,r2
   87950:	480f883a 	mov	r7,r9
   87954:	dfc00115 	stw	ra,4(sp)
   87958:	008787c0 	call	8787c <_fwrite_r>
   8795c:	dfc00117 	ldw	ra,4(sp)
   87960:	dec00204 	addi	sp,sp,8
   87964:	f800283a 	ret

00087968 <printf>:
   87968:	defffb04 	addi	sp,sp,-20
   8796c:	dfc00115 	stw	ra,4(sp)
   87970:	d9400215 	stw	r5,8(sp)
   87974:	d9800315 	stw	r6,12(sp)
   87978:	d9c00415 	stw	r7,16(sp)
   8797c:	008002b4 	movhi	r2,10
   87980:	10871e04 	addi	r2,r2,7288
   87984:	10c00017 	ldw	r3,0(r2)
   87988:	200b883a 	mov	r5,r4
   8798c:	d8800204 	addi	r2,sp,8
   87990:	19000217 	ldw	r4,8(r3)
   87994:	100d883a 	mov	r6,r2
   87998:	d8800015 	stw	r2,0(sp)
   8799c:	0089b1c0 	call	89b1c <__vfprintf_internal>
   879a0:	dfc00117 	ldw	ra,4(sp)
   879a4:	dec00504 	addi	sp,sp,20
   879a8:	f800283a 	ret

000879ac <_printf_r>:
   879ac:	defffc04 	addi	sp,sp,-16
   879b0:	dfc00115 	stw	ra,4(sp)
   879b4:	d9800215 	stw	r6,8(sp)
   879b8:	d9c00315 	stw	r7,12(sp)
   879bc:	280d883a 	mov	r6,r5
   879c0:	21400217 	ldw	r5,8(r4)
   879c4:	d8c00204 	addi	r3,sp,8
   879c8:	180f883a 	mov	r7,r3
   879cc:	d8c00015 	stw	r3,0(sp)
   879d0:	0087c580 	call	87c58 <___vfprintf_internal_r>
   879d4:	dfc00117 	ldw	ra,4(sp)
   879d8:	dec00404 	addi	sp,sp,16
   879dc:	f800283a 	ret

000879e0 <putchar>:
   879e0:	008002b4 	movhi	r2,10
   879e4:	10871e04 	addi	r2,r2,7288
   879e8:	11800017 	ldw	r6,0(r2)
   879ec:	200b883a 	mov	r5,r4
   879f0:	3009883a 	mov	r4,r6
   879f4:	31800217 	ldw	r6,8(r6)
   879f8:	008e2181 	jmpi	8e218 <_putc_r>

000879fc <_putchar_r>:
   879fc:	21800217 	ldw	r6,8(r4)
   87a00:	008e2181 	jmpi	8e218 <_putc_r>

00087a04 <_puts_r>:
   87a04:	defff604 	addi	sp,sp,-40
   87a08:	dc400715 	stw	r17,28(sp)
   87a0c:	2023883a 	mov	r17,r4
   87a10:	2809883a 	mov	r4,r5
   87a14:	dfc00915 	stw	ra,36(sp)
   87a18:	dcc00815 	stw	r19,32(sp)
   87a1c:	2827883a 	mov	r19,r5
   87a20:	0087b8c0 	call	87b8c <strlen>
   87a24:	89400217 	ldw	r5,8(r17)
   87a28:	00c002b4 	movhi	r3,10
   87a2c:	18ff5a04 	addi	r3,r3,-664
   87a30:	01c00044 	movi	r7,1
   87a34:	12000044 	addi	r8,r2,1
   87a38:	d8c00515 	stw	r3,20(sp)
   87a3c:	d9c00615 	stw	r7,24(sp)
   87a40:	d8c00304 	addi	r3,sp,12
   87a44:	01c00084 	movi	r7,2
   87a48:	8809883a 	mov	r4,r17
   87a4c:	d80d883a 	mov	r6,sp
   87a50:	d8c00015 	stw	r3,0(sp)
   87a54:	dcc00315 	stw	r19,12(sp)
   87a58:	da000215 	stw	r8,8(sp)
   87a5c:	d9c00115 	stw	r7,4(sp)
   87a60:	d8800415 	stw	r2,16(sp)
   87a64:	008bdd80 	call	8bdd8 <__sfvwrite_r>
   87a68:	00ffffc4 	movi	r3,-1
   87a6c:	10000626 	beq	r2,zero,87a88 <_puts_r+0x84>
   87a70:	1805883a 	mov	r2,r3
   87a74:	dfc00917 	ldw	ra,36(sp)
   87a78:	dcc00817 	ldw	r19,32(sp)
   87a7c:	dc400717 	ldw	r17,28(sp)
   87a80:	dec00a04 	addi	sp,sp,40
   87a84:	f800283a 	ret
   87a88:	00c00284 	movi	r3,10
   87a8c:	1805883a 	mov	r2,r3
   87a90:	dfc00917 	ldw	ra,36(sp)
   87a94:	dcc00817 	ldw	r19,32(sp)
   87a98:	dc400717 	ldw	r17,28(sp)
   87a9c:	dec00a04 	addi	sp,sp,40
   87aa0:	f800283a 	ret

00087aa4 <puts>:
   87aa4:	008002b4 	movhi	r2,10
   87aa8:	10871e04 	addi	r2,r2,7288
   87aac:	200b883a 	mov	r5,r4
   87ab0:	11000017 	ldw	r4,0(r2)
   87ab4:	0087a041 	jmpi	87a04 <_puts_r>

00087ab8 <sprintf>:
   87ab8:	deffe504 	addi	sp,sp,-108
   87abc:	2013883a 	mov	r9,r4
   87ac0:	dfc01815 	stw	ra,96(sp)
   87ac4:	d9801915 	stw	r6,100(sp)
   87ac8:	d9c01a15 	stw	r7,104(sp)
   87acc:	d8801904 	addi	r2,sp,100
   87ad0:	d8800015 	stw	r2,0(sp)
   87ad4:	008002b4 	movhi	r2,10
   87ad8:	10871e04 	addi	r2,r2,7288
   87adc:	11000017 	ldw	r4,0(r2)
   87ae0:	d9c00017 	ldw	r7,0(sp)
   87ae4:	00808204 	movi	r2,520
   87ae8:	00e00034 	movhi	r3,32768
   87aec:	18ffffc4 	addi	r3,r3,-1
   87af0:	280d883a 	mov	r6,r5
   87af4:	d880040d 	sth	r2,16(sp)
   87af8:	d9400104 	addi	r5,sp,4
   87afc:	00bfffc4 	movi	r2,-1
   87b00:	d8c00615 	stw	r3,24(sp)
   87b04:	d8c00315 	stw	r3,12(sp)
   87b08:	da400515 	stw	r9,20(sp)
   87b0c:	d880048d 	sth	r2,18(sp)
   87b10:	da400115 	stw	r9,4(sp)
   87b14:	0087c580 	call	87c58 <___vfprintf_internal_r>
   87b18:	d8c00117 	ldw	r3,4(sp)
   87b1c:	18000005 	stb	zero,0(r3)
   87b20:	dfc01817 	ldw	ra,96(sp)
   87b24:	dec01b04 	addi	sp,sp,108
   87b28:	f800283a 	ret

00087b2c <_sprintf_r>:
   87b2c:	deffe604 	addi	sp,sp,-104
   87b30:	2813883a 	mov	r9,r5
   87b34:	dfc01815 	stw	ra,96(sp)
   87b38:	d9c01915 	stw	r7,100(sp)
   87b3c:	d8801904 	addi	r2,sp,100
   87b40:	d8800015 	stw	r2,0(sp)
   87b44:	100f883a 	mov	r7,r2
   87b48:	00808204 	movi	r2,520
   87b4c:	00e00034 	movhi	r3,32768
   87b50:	18ffffc4 	addi	r3,r3,-1
   87b54:	d880040d 	sth	r2,16(sp)
   87b58:	d9400104 	addi	r5,sp,4
   87b5c:	00bfffc4 	movi	r2,-1
   87b60:	d8c00615 	stw	r3,24(sp)
   87b64:	d8c00315 	stw	r3,12(sp)
   87b68:	da400515 	stw	r9,20(sp)
   87b6c:	d880048d 	sth	r2,18(sp)
   87b70:	da400115 	stw	r9,4(sp)
   87b74:	0087c580 	call	87c58 <___vfprintf_internal_r>
   87b78:	d8c00117 	ldw	r3,4(sp)
   87b7c:	18000005 	stb	zero,0(r3)
   87b80:	dfc01817 	ldw	ra,96(sp)
   87b84:	dec01a04 	addi	sp,sp,104
   87b88:	f800283a 	ret

00087b8c <strlen>:
   87b8c:	208000cc 	andi	r2,r4,3
   87b90:	2011883a 	mov	r8,r4
   87b94:	1000161e 	bne	r2,zero,87bf0 <strlen+0x64>
   87b98:	20c00017 	ldw	r3,0(r4)
   87b9c:	017fbff4 	movhi	r5,65279
   87ba0:	297fbfc4 	addi	r5,r5,-257
   87ba4:	01e02074 	movhi	r7,32897
   87ba8:	39e02004 	addi	r7,r7,-32640
   87bac:	1945883a 	add	r2,r3,r5
   87bb0:	11c4703a 	and	r2,r2,r7
   87bb4:	00c6303a 	nor	r3,zero,r3
   87bb8:	1886703a 	and	r3,r3,r2
   87bbc:	18000c1e 	bne	r3,zero,87bf0 <strlen+0x64>
   87bc0:	280d883a 	mov	r6,r5
   87bc4:	380b883a 	mov	r5,r7
   87bc8:	21000104 	addi	r4,r4,4
   87bcc:	20800017 	ldw	r2,0(r4)
   87bd0:	1187883a 	add	r3,r2,r6
   87bd4:	1946703a 	and	r3,r3,r5
   87bd8:	0084303a 	nor	r2,zero,r2
   87bdc:	10c4703a 	and	r2,r2,r3
   87be0:	103ff926 	beq	r2,zero,87bc8 <strlen+0x3c>
   87be4:	20800007 	ldb	r2,0(r4)
   87be8:	10000326 	beq	r2,zero,87bf8 <strlen+0x6c>
   87bec:	21000044 	addi	r4,r4,1
   87bf0:	20800007 	ldb	r2,0(r4)
   87bf4:	103ffd1e 	bne	r2,zero,87bec <strlen+0x60>
   87bf8:	2205c83a 	sub	r2,r4,r8
   87bfc:	f800283a 	ret

00087c00 <__sprint_r>:
   87c00:	30800217 	ldw	r2,8(r6)
   87c04:	defffe04 	addi	sp,sp,-8
   87c08:	dc000015 	stw	r16,0(sp)
   87c0c:	dfc00115 	stw	ra,4(sp)
   87c10:	3021883a 	mov	r16,r6
   87c14:	0007883a 	mov	r3,zero
   87c18:	1000061e 	bne	r2,zero,87c34 <__sprint_r+0x34>
   87c1c:	1805883a 	mov	r2,r3
   87c20:	30000115 	stw	zero,4(r6)
   87c24:	dfc00117 	ldw	ra,4(sp)
   87c28:	dc000017 	ldw	r16,0(sp)
   87c2c:	dec00204 	addi	sp,sp,8
   87c30:	f800283a 	ret
   87c34:	008bdd80 	call	8bdd8 <__sfvwrite_r>
   87c38:	1007883a 	mov	r3,r2
   87c3c:	1805883a 	mov	r2,r3
   87c40:	80000115 	stw	zero,4(r16)
   87c44:	80000215 	stw	zero,8(r16)
   87c48:	dfc00117 	ldw	ra,4(sp)
   87c4c:	dc000017 	ldw	r16,0(sp)
   87c50:	dec00204 	addi	sp,sp,8
   87c54:	f800283a 	ret

00087c58 <___vfprintf_internal_r>:
   87c58:	defea404 	addi	sp,sp,-1392
   87c5c:	dd815815 	stw	r22,1376(sp)
   87c60:	dc015215 	stw	r16,1352(sp)
   87c64:	d9c15115 	stw	r7,1348(sp)
   87c68:	dfc15b15 	stw	ra,1388(sp)
   87c6c:	df015a15 	stw	fp,1384(sp)
   87c70:	ddc15915 	stw	r23,1380(sp)
   87c74:	dd415715 	stw	r21,1372(sp)
   87c78:	dd015615 	stw	r20,1368(sp)
   87c7c:	dcc15515 	stw	r19,1364(sp)
   87c80:	dc815415 	stw	r18,1360(sp)
   87c84:	dc415315 	stw	r17,1356(sp)
   87c88:	282d883a 	mov	r22,r5
   87c8c:	3021883a 	mov	r16,r6
   87c90:	d9014f15 	stw	r4,1340(sp)
   87c94:	008c3fc0 	call	8c3fc <_localeconv_r>
   87c98:	10800017 	ldw	r2,0(r2)
   87c9c:	d9c15117 	ldw	r7,1348(sp)
   87ca0:	d8814915 	stw	r2,1316(sp)
   87ca4:	d8814f17 	ldw	r2,1340(sp)
   87ca8:	10000226 	beq	r2,zero,87cb4 <___vfprintf_internal_r+0x5c>
   87cac:	10800e17 	ldw	r2,56(r2)
   87cb0:	10020d26 	beq	r2,zero,884e8 <___vfprintf_internal_r+0x890>
   87cb4:	b080030b 	ldhu	r2,12(r22)
   87cb8:	1080020c 	andi	r2,r2,8
   87cbc:	10020e26 	beq	r2,zero,884f8 <___vfprintf_internal_r+0x8a0>
   87cc0:	b0800417 	ldw	r2,16(r22)
   87cc4:	10020c26 	beq	r2,zero,884f8 <___vfprintf_internal_r+0x8a0>
   87cc8:	b200030b 	ldhu	r8,12(r22)
   87ccc:	00800284 	movi	r2,10
   87cd0:	40c0068c 	andi	r3,r8,26
   87cd4:	18802f1e 	bne	r3,r2,87d94 <___vfprintf_internal_r+0x13c>
   87cd8:	b080038f 	ldh	r2,14(r22)
   87cdc:	10002d16 	blt	r2,zero,87d94 <___vfprintf_internal_r+0x13c>
   87ce0:	b240038b 	ldhu	r9,14(r22)
   87ce4:	b2800717 	ldw	r10,28(r22)
   87ce8:	b2c00917 	ldw	r11,36(r22)
   87cec:	d9014f17 	ldw	r4,1340(sp)
   87cf0:	dc402904 	addi	r17,sp,164
   87cf4:	d8804004 	addi	r2,sp,256
   87cf8:	00c10004 	movi	r3,1024
   87cfc:	423fff4c 	andi	r8,r8,65533
   87d00:	800d883a 	mov	r6,r16
   87d04:	880b883a 	mov	r5,r17
   87d08:	da002c0d 	sth	r8,176(sp)
   87d0c:	da402c8d 	sth	r9,178(sp)
   87d10:	da803015 	stw	r10,192(sp)
   87d14:	dac03215 	stw	r11,200(sp)
   87d18:	d8802d15 	stw	r2,180(sp)
   87d1c:	d8c02e15 	stw	r3,184(sp)
   87d20:	d8802915 	stw	r2,164(sp)
   87d24:	d8c02b15 	stw	r3,172(sp)
   87d28:	d8002f15 	stw	zero,188(sp)
   87d2c:	0087c580 	call	87c58 <___vfprintf_internal_r>
   87d30:	d8814b15 	stw	r2,1324(sp)
   87d34:	10000416 	blt	r2,zero,87d48 <___vfprintf_internal_r+0xf0>
   87d38:	d9014f17 	ldw	r4,1340(sp)
   87d3c:	880b883a 	mov	r5,r17
   87d40:	008b4740 	call	8b474 <_fflush_r>
   87d44:	1002321e 	bne	r2,zero,88610 <___vfprintf_internal_r+0x9b8>
   87d48:	d8802c0b 	ldhu	r2,176(sp)
   87d4c:	1080100c 	andi	r2,r2,64
   87d50:	10000326 	beq	r2,zero,87d60 <___vfprintf_internal_r+0x108>
   87d54:	b080030b 	ldhu	r2,12(r22)
   87d58:	10801014 	ori	r2,r2,64
   87d5c:	b080030d 	sth	r2,12(r22)
   87d60:	d8814b17 	ldw	r2,1324(sp)
   87d64:	dfc15b17 	ldw	ra,1388(sp)
   87d68:	df015a17 	ldw	fp,1384(sp)
   87d6c:	ddc15917 	ldw	r23,1380(sp)
   87d70:	dd815817 	ldw	r22,1376(sp)
   87d74:	dd415717 	ldw	r21,1372(sp)
   87d78:	dd015617 	ldw	r20,1368(sp)
   87d7c:	dcc15517 	ldw	r19,1364(sp)
   87d80:	dc815417 	ldw	r18,1360(sp)
   87d84:	dc415317 	ldw	r17,1356(sp)
   87d88:	dc015217 	ldw	r16,1352(sp)
   87d8c:	dec15c04 	addi	sp,sp,1392
   87d90:	f800283a 	ret
   87d94:	0005883a 	mov	r2,zero
   87d98:	0007883a 	mov	r3,zero
   87d9c:	dd401904 	addi	r21,sp,100
   87da0:	d8814215 	stw	r2,1288(sp)
   87da4:	802f883a 	mov	r23,r16
   87da8:	d8c14315 	stw	r3,1292(sp)
   87dac:	d8014b15 	stw	zero,1324(sp)
   87db0:	d8014815 	stw	zero,1312(sp)
   87db4:	d8014415 	stw	zero,1296(sp)
   87db8:	d8014715 	stw	zero,1308(sp)
   87dbc:	dd400c15 	stw	r21,48(sp)
   87dc0:	d8000e15 	stw	zero,56(sp)
   87dc4:	d8000d15 	stw	zero,52(sp)
   87dc8:	b8800007 	ldb	r2,0(r23)
   87dcc:	10001926 	beq	r2,zero,87e34 <___vfprintf_internal_r+0x1dc>
   87dd0:	00c00944 	movi	r3,37
   87dd4:	10c01726 	beq	r2,r3,87e34 <___vfprintf_internal_r+0x1dc>
   87dd8:	b821883a 	mov	r16,r23
   87ddc:	00000106 	br	87de4 <___vfprintf_internal_r+0x18c>
   87de0:	10c00326 	beq	r2,r3,87df0 <___vfprintf_internal_r+0x198>
   87de4:	84000044 	addi	r16,r16,1
   87de8:	80800007 	ldb	r2,0(r16)
   87dec:	103ffc1e 	bne	r2,zero,87de0 <___vfprintf_internal_r+0x188>
   87df0:	85e7c83a 	sub	r19,r16,r23
   87df4:	98000e26 	beq	r19,zero,87e30 <___vfprintf_internal_r+0x1d8>
   87df8:	dc800e17 	ldw	r18,56(sp)
   87dfc:	dc400d17 	ldw	r17,52(sp)
   87e00:	008001c4 	movi	r2,7
   87e04:	94e5883a 	add	r18,r18,r19
   87e08:	8c400044 	addi	r17,r17,1
   87e0c:	adc00015 	stw	r23,0(r21)
   87e10:	dc800e15 	stw	r18,56(sp)
   87e14:	acc00115 	stw	r19,4(r21)
   87e18:	dc400d15 	stw	r17,52(sp)
   87e1c:	14428b16 	blt	r2,r17,8884c <___vfprintf_internal_r+0xbf4>
   87e20:	ad400204 	addi	r21,r21,8
   87e24:	d9014b17 	ldw	r4,1324(sp)
   87e28:	24c9883a 	add	r4,r4,r19
   87e2c:	d9014b15 	stw	r4,1324(sp)
   87e30:	802f883a 	mov	r23,r16
   87e34:	b8800007 	ldb	r2,0(r23)
   87e38:	10013c26 	beq	r2,zero,8832c <___vfprintf_internal_r+0x6d4>
   87e3c:	bdc00044 	addi	r23,r23,1
   87e40:	d8000405 	stb	zero,16(sp)
   87e44:	b8c00007 	ldb	r3,0(r23)
   87e48:	04ffffc4 	movi	r19,-1
   87e4c:	d8014c15 	stw	zero,1328(sp)
   87e50:	d8014a15 	stw	zero,1320(sp)
   87e54:	d8c14d15 	stw	r3,1332(sp)
   87e58:	bdc00044 	addi	r23,r23,1
   87e5c:	d9414d17 	ldw	r5,1332(sp)
   87e60:	00801604 	movi	r2,88
   87e64:	28fff804 	addi	r3,r5,-32
   87e68:	10c06036 	bltu	r2,r3,87fec <___vfprintf_internal_r+0x394>
   87e6c:	18c5883a 	add	r2,r3,r3
   87e70:	1085883a 	add	r2,r2,r2
   87e74:	00c00234 	movhi	r3,8
   87e78:	18dfa204 	addi	r3,r3,32392
   87e7c:	10c5883a 	add	r2,r2,r3
   87e80:	11000017 	ldw	r4,0(r2)
   87e84:	2000683a 	jmp	r4
   87e88:	00088dfc 	xorhi	zero,zero,8759
   87e8c:	00087fec 	andhi	zero,zero,8703
   87e90:	00087fec 	andhi	zero,zero,8703
   87e94:	00088de8 	cmpgeui	zero,zero,8759
   87e98:	00087fec 	andhi	zero,zero,8703
   87e9c:	00087fec 	andhi	zero,zero,8703
   87ea0:	00087fec 	andhi	zero,zero,8703
   87ea4:	00087fec 	andhi	zero,zero,8703
   87ea8:	00087fec 	andhi	zero,zero,8703
   87eac:	00087fec 	andhi	zero,zero,8703
   87eb0:	00088bc8 	cmpgei	zero,zero,8751
   87eb4:	00088dd8 	cmpnei	zero,zero,8759
   87eb8:	00087fec 	andhi	zero,zero,8703
   87ebc:	00088be0 	cmpeqi	zero,zero,8751
   87ec0:	00088e80 	call	88e8 <OSCtxSw_SWITCH_PC+0x88a8>
   87ec4:	00087fec 	andhi	zero,zero,8703
   87ec8:	00088e6c 	andhi	zero,zero,8761
   87ecc:	00088e28 	cmpgeui	zero,zero,8760
   87ed0:	00088e28 	cmpgeui	zero,zero,8760
   87ed4:	00088e28 	cmpgeui	zero,zero,8760
   87ed8:	00088e28 	cmpgeui	zero,zero,8760
   87edc:	00088e28 	cmpgeui	zero,zero,8760
   87ee0:	00088e28 	cmpgeui	zero,zero,8760
   87ee4:	00088e28 	cmpgeui	zero,zero,8760
   87ee8:	00088e28 	cmpgeui	zero,zero,8760
   87eec:	00088e28 	cmpgeui	zero,zero,8760
   87ef0:	00087fec 	andhi	zero,zero,8703
   87ef4:	00087fec 	andhi	zero,zero,8703
   87ef8:	00087fec 	andhi	zero,zero,8703
   87efc:	00087fec 	andhi	zero,zero,8703
   87f00:	00087fec 	andhi	zero,zero,8703
   87f04:	00087fec 	andhi	zero,zero,8703
   87f08:	00087fec 	andhi	zero,zero,8703
   87f0c:	00087fec 	andhi	zero,zero,8703
   87f10:	00087fec 	andhi	zero,zero,8703
   87f14:	00087fec 	andhi	zero,zero,8703
   87f18:	00088644 	movi	zero,8729
   87f1c:	00088cb0 	cmpltui	zero,zero,8754
   87f20:	00087fec 	andhi	zero,zero,8703
   87f24:	00088cb0 	cmpltui	zero,zero,8754
   87f28:	00087fec 	andhi	zero,zero,8703
   87f2c:	00087fec 	andhi	zero,zero,8703
   87f30:	00087fec 	andhi	zero,zero,8703
   87f34:	00087fec 	andhi	zero,zero,8703
   87f38:	00088e14 	movui	zero,8760
   87f3c:	00087fec 	andhi	zero,zero,8703
   87f40:	00087fec 	andhi	zero,zero,8703
   87f44:	000886f8 	rdprs	zero,zero,8731
   87f48:	00087fec 	andhi	zero,zero,8703
   87f4c:	00087fec 	andhi	zero,zero,8703
   87f50:	00087fec 	andhi	zero,zero,8703
   87f54:	00087fec 	andhi	zero,zero,8703
   87f58:	00087fec 	andhi	zero,zero,8703
   87f5c:	00088744 	movi	zero,8733
   87f60:	00087fec 	andhi	zero,zero,8703
   87f64:	00087fec 	andhi	zero,zero,8703
   87f68:	00088d64 	muli	zero,zero,8757
   87f6c:	00087fec 	andhi	zero,zero,8703
   87f70:	00087fec 	andhi	zero,zero,8703
   87f74:	00087fec 	andhi	zero,zero,8703
   87f78:	00087fec 	andhi	zero,zero,8703
   87f7c:	00087fec 	andhi	zero,zero,8703
   87f80:	00087fec 	andhi	zero,zero,8703
   87f84:	00087fec 	andhi	zero,zero,8703
   87f88:	00087fec 	andhi	zero,zero,8703
   87f8c:	00087fec 	andhi	zero,zero,8703
   87f90:	00087fec 	andhi	zero,zero,8703
   87f94:	00088d38 	rdprs	zero,zero,8756
   87f98:	00088650 	cmplti	zero,zero,8729
   87f9c:	00088cb0 	cmpltui	zero,zero,8754
   87fa0:	00088cb0 	cmpltui	zero,zero,8754
   87fa4:	00088cb0 	cmpltui	zero,zero,8754
   87fa8:	00088c9c 	xori	zero,zero,8754
   87fac:	00088650 	cmplti	zero,zero,8729
   87fb0:	00087fec 	andhi	zero,zero,8703
   87fb4:	00087fec 	andhi	zero,zero,8703
   87fb8:	00088c24 	muli	zero,zero,8752
   87fbc:	00087fec 	andhi	zero,zero,8703
   87fc0:	00088bf4 	movhi	zero,8751
   87fc4:	00088704 	movi	zero,8732
   87fc8:	00088c54 	movui	zero,8753
   87fcc:	00088c40 	call	88c4 <OSCtxSw_SWITCH_PC+0x8884>
   87fd0:	00087fec 	andhi	zero,zero,8703
   87fd4:	00088ee8 	cmpgeui	zero,zero,8763
   87fd8:	00087fec 	andhi	zero,zero,8703
   87fdc:	00088750 	cmplti	zero,zero,8733
   87fe0:	00087fec 	andhi	zero,zero,8703
   87fe4:	00087fec 	andhi	zero,zero,8703
   87fe8:	00088dc8 	cmpgei	zero,zero,8759
   87fec:	d9014d17 	ldw	r4,1332(sp)
   87ff0:	2000ce26 	beq	r4,zero,8832c <___vfprintf_internal_r+0x6d4>
   87ff4:	01400044 	movi	r5,1
   87ff8:	d9800f04 	addi	r6,sp,60
   87ffc:	d9c14015 	stw	r7,1280(sp)
   88000:	d9414515 	stw	r5,1300(sp)
   88004:	d9814115 	stw	r6,1284(sp)
   88008:	280f883a 	mov	r7,r5
   8800c:	d9000f05 	stb	r4,60(sp)
   88010:	d8000405 	stb	zero,16(sp)
   88014:	d8014615 	stw	zero,1304(sp)
   88018:	d8c14c17 	ldw	r3,1328(sp)
   8801c:	1880008c 	andi	r2,r3,2
   88020:	1005003a 	cmpeq	r2,r2,zero
   88024:	d8815015 	stw	r2,1344(sp)
   88028:	1000031e 	bne	r2,zero,88038 <___vfprintf_internal_r+0x3e0>
   8802c:	d9014517 	ldw	r4,1300(sp)
   88030:	21000084 	addi	r4,r4,2
   88034:	d9014515 	stw	r4,1300(sp)
   88038:	d9414c17 	ldw	r5,1328(sp)
   8803c:	2940210c 	andi	r5,r5,132
   88040:	d9414e15 	stw	r5,1336(sp)
   88044:	28002d1e 	bne	r5,zero,880fc <___vfprintf_internal_r+0x4a4>
   88048:	d9814a17 	ldw	r6,1320(sp)
   8804c:	d8814517 	ldw	r2,1300(sp)
   88050:	30a1c83a 	sub	r16,r6,r2
   88054:	0400290e 	bge	zero,r16,880fc <___vfprintf_internal_r+0x4a4>
   88058:	00800404 	movi	r2,16
   8805c:	14045e0e 	bge	r2,r16,891d8 <___vfprintf_internal_r+0x1580>
   88060:	dc800e17 	ldw	r18,56(sp)
   88064:	dc400d17 	ldw	r17,52(sp)
   88068:	1027883a 	mov	r19,r2
   8806c:	070002b4 	movhi	fp,10
   88070:	e73f7684 	addi	fp,fp,-550
   88074:	050001c4 	movi	r20,7
   88078:	00000306 	br	88088 <___vfprintf_internal_r+0x430>
   8807c:	843ffc04 	addi	r16,r16,-16
   88080:	ad400204 	addi	r21,r21,8
   88084:	9c00130e 	bge	r19,r16,880d4 <___vfprintf_internal_r+0x47c>
   88088:	94800404 	addi	r18,r18,16
   8808c:	8c400044 	addi	r17,r17,1
   88090:	af000015 	stw	fp,0(r21)
   88094:	acc00115 	stw	r19,4(r21)
   88098:	dc800e15 	stw	r18,56(sp)
   8809c:	dc400d15 	stw	r17,52(sp)
   880a0:	a47ff60e 	bge	r20,r17,8807c <___vfprintf_internal_r+0x424>
   880a4:	d9014f17 	ldw	r4,1340(sp)
   880a8:	b00b883a 	mov	r5,r22
   880ac:	d9800c04 	addi	r6,sp,48
   880b0:	d9c15115 	stw	r7,1348(sp)
   880b4:	0087c000 	call	87c00 <__sprint_r>
   880b8:	d9c15117 	ldw	r7,1348(sp)
   880bc:	10009e1e 	bne	r2,zero,88338 <___vfprintf_internal_r+0x6e0>
   880c0:	843ffc04 	addi	r16,r16,-16
   880c4:	dc800e17 	ldw	r18,56(sp)
   880c8:	dc400d17 	ldw	r17,52(sp)
   880cc:	dd401904 	addi	r21,sp,100
   880d0:	9c3fed16 	blt	r19,r16,88088 <___vfprintf_internal_r+0x430>
   880d4:	9425883a 	add	r18,r18,r16
   880d8:	8c400044 	addi	r17,r17,1
   880dc:	008001c4 	movi	r2,7
   880e0:	af000015 	stw	fp,0(r21)
   880e4:	ac000115 	stw	r16,4(r21)
   880e8:	dc800e15 	stw	r18,56(sp)
   880ec:	dc400d15 	stw	r17,52(sp)
   880f0:	1441f516 	blt	r2,r17,888c8 <___vfprintf_internal_r+0xc70>
   880f4:	ad400204 	addi	r21,r21,8
   880f8:	00000206 	br	88104 <___vfprintf_internal_r+0x4ac>
   880fc:	dc800e17 	ldw	r18,56(sp)
   88100:	dc400d17 	ldw	r17,52(sp)
   88104:	d8800407 	ldb	r2,16(sp)
   88108:	10000b26 	beq	r2,zero,88138 <___vfprintf_internal_r+0x4e0>
   8810c:	00800044 	movi	r2,1
   88110:	94800044 	addi	r18,r18,1
   88114:	8c400044 	addi	r17,r17,1
   88118:	a8800115 	stw	r2,4(r21)
   8811c:	d8c00404 	addi	r3,sp,16
   88120:	008001c4 	movi	r2,7
   88124:	a8c00015 	stw	r3,0(r21)
   88128:	dc800e15 	stw	r18,56(sp)
   8812c:	dc400d15 	stw	r17,52(sp)
   88130:	1441da16 	blt	r2,r17,8889c <___vfprintf_internal_r+0xc44>
   88134:	ad400204 	addi	r21,r21,8
   88138:	d9015017 	ldw	r4,1344(sp)
   8813c:	20000b1e 	bne	r4,zero,8816c <___vfprintf_internal_r+0x514>
   88140:	d8800444 	addi	r2,sp,17
   88144:	94800084 	addi	r18,r18,2
   88148:	8c400044 	addi	r17,r17,1
   8814c:	a8800015 	stw	r2,0(r21)
   88150:	00c00084 	movi	r3,2
   88154:	008001c4 	movi	r2,7
   88158:	a8c00115 	stw	r3,4(r21)
   8815c:	dc800e15 	stw	r18,56(sp)
   88160:	dc400d15 	stw	r17,52(sp)
   88164:	1441c216 	blt	r2,r17,88870 <___vfprintf_internal_r+0xc18>
   88168:	ad400204 	addi	r21,r21,8
   8816c:	d9414e17 	ldw	r5,1336(sp)
   88170:	00802004 	movi	r2,128
   88174:	2880b126 	beq	r5,r2,8843c <___vfprintf_internal_r+0x7e4>
   88178:	d8c14617 	ldw	r3,1304(sp)
   8817c:	19e1c83a 	sub	r16,r3,r7
   88180:	0400260e 	bge	zero,r16,8821c <___vfprintf_internal_r+0x5c4>
   88184:	00800404 	movi	r2,16
   88188:	1403cf0e 	bge	r2,r16,890c8 <___vfprintf_internal_r+0x1470>
   8818c:	1027883a 	mov	r19,r2
   88190:	070002b4 	movhi	fp,10
   88194:	e73f7284 	addi	fp,fp,-566
   88198:	050001c4 	movi	r20,7
   8819c:	00000306 	br	881ac <___vfprintf_internal_r+0x554>
   881a0:	843ffc04 	addi	r16,r16,-16
   881a4:	ad400204 	addi	r21,r21,8
   881a8:	9c00130e 	bge	r19,r16,881f8 <___vfprintf_internal_r+0x5a0>
   881ac:	94800404 	addi	r18,r18,16
   881b0:	8c400044 	addi	r17,r17,1
   881b4:	af000015 	stw	fp,0(r21)
   881b8:	acc00115 	stw	r19,4(r21)
   881bc:	dc800e15 	stw	r18,56(sp)
   881c0:	dc400d15 	stw	r17,52(sp)
   881c4:	a47ff60e 	bge	r20,r17,881a0 <___vfprintf_internal_r+0x548>
   881c8:	d9014f17 	ldw	r4,1340(sp)
   881cc:	b00b883a 	mov	r5,r22
   881d0:	d9800c04 	addi	r6,sp,48
   881d4:	d9c15115 	stw	r7,1348(sp)
   881d8:	0087c000 	call	87c00 <__sprint_r>
   881dc:	d9c15117 	ldw	r7,1348(sp)
   881e0:	1000551e 	bne	r2,zero,88338 <___vfprintf_internal_r+0x6e0>
   881e4:	843ffc04 	addi	r16,r16,-16
   881e8:	dc800e17 	ldw	r18,56(sp)
   881ec:	dc400d17 	ldw	r17,52(sp)
   881f0:	dd401904 	addi	r21,sp,100
   881f4:	9c3fed16 	blt	r19,r16,881ac <___vfprintf_internal_r+0x554>
   881f8:	9425883a 	add	r18,r18,r16
   881fc:	8c400044 	addi	r17,r17,1
   88200:	008001c4 	movi	r2,7
   88204:	af000015 	stw	fp,0(r21)
   88208:	ac000115 	stw	r16,4(r21)
   8820c:	dc800e15 	stw	r18,56(sp)
   88210:	dc400d15 	stw	r17,52(sp)
   88214:	14418216 	blt	r2,r17,88820 <___vfprintf_internal_r+0xbc8>
   88218:	ad400204 	addi	r21,r21,8
   8821c:	d9014c17 	ldw	r4,1328(sp)
   88220:	2080400c 	andi	r2,r4,256
   88224:	10004a1e 	bne	r2,zero,88350 <___vfprintf_internal_r+0x6f8>
   88228:	d9414117 	ldw	r5,1284(sp)
   8822c:	91e5883a 	add	r18,r18,r7
   88230:	8c400044 	addi	r17,r17,1
   88234:	008001c4 	movi	r2,7
   88238:	a9400015 	stw	r5,0(r21)
   8823c:	a9c00115 	stw	r7,4(r21)
   88240:	dc800e15 	stw	r18,56(sp)
   88244:	dc400d15 	stw	r17,52(sp)
   88248:	14416716 	blt	r2,r17,887e8 <___vfprintf_internal_r+0xb90>
   8824c:	a8c00204 	addi	r3,r21,8
   88250:	d9814c17 	ldw	r6,1328(sp)
   88254:	3080010c 	andi	r2,r6,4
   88258:	10002826 	beq	r2,zero,882fc <___vfprintf_internal_r+0x6a4>
   8825c:	d8814a17 	ldw	r2,1320(sp)
   88260:	d9014517 	ldw	r4,1300(sp)
   88264:	1121c83a 	sub	r16,r2,r4
   88268:	0400240e 	bge	zero,r16,882fc <___vfprintf_internal_r+0x6a4>
   8826c:	00800404 	movi	r2,16
   88270:	1404550e 	bge	r2,r16,893c8 <___vfprintf_internal_r+0x1770>
   88274:	dc400d17 	ldw	r17,52(sp)
   88278:	1027883a 	mov	r19,r2
   8827c:	070002b4 	movhi	fp,10
   88280:	e73f7684 	addi	fp,fp,-550
   88284:	050001c4 	movi	r20,7
   88288:	00000306 	br	88298 <___vfprintf_internal_r+0x640>
   8828c:	843ffc04 	addi	r16,r16,-16
   88290:	18c00204 	addi	r3,r3,8
   88294:	9c00110e 	bge	r19,r16,882dc <___vfprintf_internal_r+0x684>
   88298:	94800404 	addi	r18,r18,16
   8829c:	8c400044 	addi	r17,r17,1
   882a0:	1f000015 	stw	fp,0(r3)
   882a4:	1cc00115 	stw	r19,4(r3)
   882a8:	dc800e15 	stw	r18,56(sp)
   882ac:	dc400d15 	stw	r17,52(sp)
   882b0:	a47ff60e 	bge	r20,r17,8828c <___vfprintf_internal_r+0x634>
   882b4:	d9014f17 	ldw	r4,1340(sp)
   882b8:	b00b883a 	mov	r5,r22
   882bc:	d9800c04 	addi	r6,sp,48
   882c0:	0087c000 	call	87c00 <__sprint_r>
   882c4:	10001c1e 	bne	r2,zero,88338 <___vfprintf_internal_r+0x6e0>
   882c8:	843ffc04 	addi	r16,r16,-16
   882cc:	dc800e17 	ldw	r18,56(sp)
   882d0:	dc400d17 	ldw	r17,52(sp)
   882d4:	d8c01904 	addi	r3,sp,100
   882d8:	9c3fef16 	blt	r19,r16,88298 <___vfprintf_internal_r+0x640>
   882dc:	9425883a 	add	r18,r18,r16
   882e0:	8c400044 	addi	r17,r17,1
   882e4:	008001c4 	movi	r2,7
   882e8:	1f000015 	stw	fp,0(r3)
   882ec:	1c000115 	stw	r16,4(r3)
   882f0:	dc800e15 	stw	r18,56(sp)
   882f4:	dc400d15 	stw	r17,52(sp)
   882f8:	1440cb16 	blt	r2,r17,88628 <___vfprintf_internal_r+0x9d0>
   882fc:	d8814a17 	ldw	r2,1320(sp)
   88300:	d9414517 	ldw	r5,1300(sp)
   88304:	1140010e 	bge	r2,r5,8830c <___vfprintf_internal_r+0x6b4>
   88308:	2805883a 	mov	r2,r5
   8830c:	d9814b17 	ldw	r6,1324(sp)
   88310:	308d883a 	add	r6,r6,r2
   88314:	d9814b15 	stw	r6,1324(sp)
   88318:	90013b1e 	bne	r18,zero,88808 <___vfprintf_internal_r+0xbb0>
   8831c:	d9c14017 	ldw	r7,1280(sp)
   88320:	dd401904 	addi	r21,sp,100
   88324:	d8000d15 	stw	zero,52(sp)
   88328:	003ea706 	br	87dc8 <___vfprintf_internal_r+0x170>
   8832c:	d8800e17 	ldw	r2,56(sp)
   88330:	1005451e 	bne	r2,zero,89848 <___vfprintf_internal_r+0x1bf0>
   88334:	d8000d15 	stw	zero,52(sp)
   88338:	b080030b 	ldhu	r2,12(r22)
   8833c:	1080100c 	andi	r2,r2,64
   88340:	103e8726 	beq	r2,zero,87d60 <___vfprintf_internal_r+0x108>
   88344:	00bfffc4 	movi	r2,-1
   88348:	d8814b15 	stw	r2,1324(sp)
   8834c:	003e8406 	br	87d60 <___vfprintf_internal_r+0x108>
   88350:	d9814d17 	ldw	r6,1332(sp)
   88354:	00801944 	movi	r2,101
   88358:	11806e16 	blt	r2,r6,88514 <___vfprintf_internal_r+0x8bc>
   8835c:	d9414717 	ldw	r5,1308(sp)
   88360:	00c00044 	movi	r3,1
   88364:	1943490e 	bge	r3,r5,8908c <___vfprintf_internal_r+0x1434>
   88368:	d8814117 	ldw	r2,1284(sp)
   8836c:	94800044 	addi	r18,r18,1
   88370:	8c400044 	addi	r17,r17,1
   88374:	a8800015 	stw	r2,0(r21)
   88378:	008001c4 	movi	r2,7
   8837c:	a8c00115 	stw	r3,4(r21)
   88380:	dc800e15 	stw	r18,56(sp)
   88384:	dc400d15 	stw	r17,52(sp)
   88388:	1441ca16 	blt	r2,r17,88ab4 <___vfprintf_internal_r+0xe5c>
   8838c:	a8c00204 	addi	r3,r21,8
   88390:	d9014917 	ldw	r4,1316(sp)
   88394:	00800044 	movi	r2,1
   88398:	94800044 	addi	r18,r18,1
   8839c:	8c400044 	addi	r17,r17,1
   883a0:	18800115 	stw	r2,4(r3)
   883a4:	008001c4 	movi	r2,7
   883a8:	19000015 	stw	r4,0(r3)
   883ac:	dc800e15 	stw	r18,56(sp)
   883b0:	dc400d15 	stw	r17,52(sp)
   883b4:	1441b616 	blt	r2,r17,88a90 <___vfprintf_internal_r+0xe38>
   883b8:	1cc00204 	addi	r19,r3,8
   883bc:	d9014217 	ldw	r4,1288(sp)
   883c0:	d9414317 	ldw	r5,1292(sp)
   883c4:	000d883a 	mov	r6,zero
   883c8:	000f883a 	mov	r7,zero
   883cc:	0090a440 	call	90a44 <__nedf2>
   883d0:	10017426 	beq	r2,zero,889a4 <___vfprintf_internal_r+0xd4c>
   883d4:	d9414717 	ldw	r5,1308(sp)
   883d8:	d9814117 	ldw	r6,1284(sp)
   883dc:	8c400044 	addi	r17,r17,1
   883e0:	2c85883a 	add	r2,r5,r18
   883e4:	14bfffc4 	addi	r18,r2,-1
   883e8:	28bfffc4 	addi	r2,r5,-1
   883ec:	30c00044 	addi	r3,r6,1
   883f0:	98800115 	stw	r2,4(r19)
   883f4:	008001c4 	movi	r2,7
   883f8:	98c00015 	stw	r3,0(r19)
   883fc:	dc800e15 	stw	r18,56(sp)
   88400:	dc400d15 	stw	r17,52(sp)
   88404:	14418e16 	blt	r2,r17,88a40 <___vfprintf_internal_r+0xde8>
   88408:	9cc00204 	addi	r19,r19,8
   8840c:	d9414817 	ldw	r5,1312(sp)
   88410:	d8800804 	addi	r2,sp,32
   88414:	8c400044 	addi	r17,r17,1
   88418:	9165883a 	add	r18,r18,r5
   8841c:	98800015 	stw	r2,0(r19)
   88420:	008001c4 	movi	r2,7
   88424:	99400115 	stw	r5,4(r19)
   88428:	dc800e15 	stw	r18,56(sp)
   8842c:	dc400d15 	stw	r17,52(sp)
   88430:	1440ed16 	blt	r2,r17,887e8 <___vfprintf_internal_r+0xb90>
   88434:	98c00204 	addi	r3,r19,8
   88438:	003f8506 	br	88250 <___vfprintf_internal_r+0x5f8>
   8843c:	d9814a17 	ldw	r6,1320(sp)
   88440:	d8814517 	ldw	r2,1300(sp)
   88444:	30a1c83a 	sub	r16,r6,r2
   88448:	043f4b0e 	bge	zero,r16,88178 <___vfprintf_internal_r+0x520>
   8844c:	00800404 	movi	r2,16
   88450:	14043a0e 	bge	r2,r16,8953c <___vfprintf_internal_r+0x18e4>
   88454:	1027883a 	mov	r19,r2
   88458:	070002b4 	movhi	fp,10
   8845c:	e73f7284 	addi	fp,fp,-566
   88460:	050001c4 	movi	r20,7
   88464:	00000306 	br	88474 <___vfprintf_internal_r+0x81c>
   88468:	843ffc04 	addi	r16,r16,-16
   8846c:	ad400204 	addi	r21,r21,8
   88470:	9c00130e 	bge	r19,r16,884c0 <___vfprintf_internal_r+0x868>
   88474:	94800404 	addi	r18,r18,16
   88478:	8c400044 	addi	r17,r17,1
   8847c:	af000015 	stw	fp,0(r21)
   88480:	acc00115 	stw	r19,4(r21)
   88484:	dc800e15 	stw	r18,56(sp)
   88488:	dc400d15 	stw	r17,52(sp)
   8848c:	a47ff60e 	bge	r20,r17,88468 <___vfprintf_internal_r+0x810>
   88490:	d9014f17 	ldw	r4,1340(sp)
   88494:	b00b883a 	mov	r5,r22
   88498:	d9800c04 	addi	r6,sp,48
   8849c:	d9c15115 	stw	r7,1348(sp)
   884a0:	0087c000 	call	87c00 <__sprint_r>
   884a4:	d9c15117 	ldw	r7,1348(sp)
   884a8:	103fa31e 	bne	r2,zero,88338 <___vfprintf_internal_r+0x6e0>
   884ac:	843ffc04 	addi	r16,r16,-16
   884b0:	dc800e17 	ldw	r18,56(sp)
   884b4:	dc400d17 	ldw	r17,52(sp)
   884b8:	dd401904 	addi	r21,sp,100
   884bc:	9c3fed16 	blt	r19,r16,88474 <___vfprintf_internal_r+0x81c>
   884c0:	9425883a 	add	r18,r18,r16
   884c4:	8c400044 	addi	r17,r17,1
   884c8:	008001c4 	movi	r2,7
   884cc:	af000015 	stw	fp,0(r21)
   884d0:	ac000115 	stw	r16,4(r21)
   884d4:	dc800e15 	stw	r18,56(sp)
   884d8:	dc400d15 	stw	r17,52(sp)
   884dc:	14416116 	blt	r2,r17,88a64 <___vfprintf_internal_r+0xe0c>
   884e0:	ad400204 	addi	r21,r21,8
   884e4:	003f2406 	br	88178 <___vfprintf_internal_r+0x520>
   884e8:	d9014f17 	ldw	r4,1340(sp)
   884ec:	008b70c0 	call	8b70c <__sinit>
   884f0:	d9c15117 	ldw	r7,1348(sp)
   884f4:	003def06 	br	87cb4 <___vfprintf_internal_r+0x5c>
   884f8:	d9014f17 	ldw	r4,1340(sp)
   884fc:	b00b883a 	mov	r5,r22
   88500:	d9c15115 	stw	r7,1348(sp)
   88504:	0089b400 	call	89b40 <__swsetup_r>
   88508:	d9c15117 	ldw	r7,1348(sp)
   8850c:	103dee26 	beq	r2,zero,87cc8 <___vfprintf_internal_r+0x70>
   88510:	003f8c06 	br	88344 <___vfprintf_internal_r+0x6ec>
   88514:	d9014217 	ldw	r4,1288(sp)
   88518:	d9414317 	ldw	r5,1292(sp)
   8851c:	000d883a 	mov	r6,zero
   88520:	000f883a 	mov	r7,zero
   88524:	00909bc0 	call	909bc <__eqdf2>
   88528:	1000f21e 	bne	r2,zero,888f4 <___vfprintf_internal_r+0xc9c>
   8852c:	008002b4 	movhi	r2,10
   88530:	10bf7204 	addi	r2,r2,-568
   88534:	94800044 	addi	r18,r18,1
   88538:	8c400044 	addi	r17,r17,1
   8853c:	a8800015 	stw	r2,0(r21)
   88540:	00c00044 	movi	r3,1
   88544:	008001c4 	movi	r2,7
   88548:	a8c00115 	stw	r3,4(r21)
   8854c:	dc800e15 	stw	r18,56(sp)
   88550:	dc400d15 	stw	r17,52(sp)
   88554:	14430016 	blt	r2,r17,89158 <___vfprintf_internal_r+0x1500>
   88558:	a8c00204 	addi	r3,r21,8
   8855c:	d8800517 	ldw	r2,20(sp)
   88560:	d9014717 	ldw	r4,1308(sp)
   88564:	11015c0e 	bge	r2,r4,88ad8 <___vfprintf_internal_r+0xe80>
   88568:	dc400d17 	ldw	r17,52(sp)
   8856c:	d9814917 	ldw	r6,1316(sp)
   88570:	00800044 	movi	r2,1
   88574:	94800044 	addi	r18,r18,1
   88578:	8c400044 	addi	r17,r17,1
   8857c:	18800115 	stw	r2,4(r3)
   88580:	008001c4 	movi	r2,7
   88584:	19800015 	stw	r6,0(r3)
   88588:	dc800e15 	stw	r18,56(sp)
   8858c:	dc400d15 	stw	r17,52(sp)
   88590:	14431616 	blt	r2,r17,891ec <___vfprintf_internal_r+0x1594>
   88594:	18c00204 	addi	r3,r3,8
   88598:	d8814717 	ldw	r2,1308(sp)
   8859c:	143fffc4 	addi	r16,r2,-1
   885a0:	043f2b0e 	bge	zero,r16,88250 <___vfprintf_internal_r+0x5f8>
   885a4:	00800404 	movi	r2,16
   885a8:	1402a80e 	bge	r2,r16,8904c <___vfprintf_internal_r+0x13f4>
   885ac:	dc400d17 	ldw	r17,52(sp)
   885b0:	1027883a 	mov	r19,r2
   885b4:	070002b4 	movhi	fp,10
   885b8:	e73f7284 	addi	fp,fp,-566
   885bc:	050001c4 	movi	r20,7
   885c0:	00000306 	br	885d0 <___vfprintf_internal_r+0x978>
   885c4:	18c00204 	addi	r3,r3,8
   885c8:	843ffc04 	addi	r16,r16,-16
   885cc:	9c02a20e 	bge	r19,r16,89058 <___vfprintf_internal_r+0x1400>
   885d0:	94800404 	addi	r18,r18,16
   885d4:	8c400044 	addi	r17,r17,1
   885d8:	1f000015 	stw	fp,0(r3)
   885dc:	1cc00115 	stw	r19,4(r3)
   885e0:	dc800e15 	stw	r18,56(sp)
   885e4:	dc400d15 	stw	r17,52(sp)
   885e8:	a47ff60e 	bge	r20,r17,885c4 <___vfprintf_internal_r+0x96c>
   885ec:	d9014f17 	ldw	r4,1340(sp)
   885f0:	b00b883a 	mov	r5,r22
   885f4:	d9800c04 	addi	r6,sp,48
   885f8:	0087c000 	call	87c00 <__sprint_r>
   885fc:	103f4e1e 	bne	r2,zero,88338 <___vfprintf_internal_r+0x6e0>
   88600:	dc800e17 	ldw	r18,56(sp)
   88604:	dc400d17 	ldw	r17,52(sp)
   88608:	d8c01904 	addi	r3,sp,100
   8860c:	003fee06 	br	885c8 <___vfprintf_internal_r+0x970>
   88610:	d8802c0b 	ldhu	r2,176(sp)
   88614:	00ffffc4 	movi	r3,-1
   88618:	d8c14b15 	stw	r3,1324(sp)
   8861c:	1080100c 	andi	r2,r2,64
   88620:	103dcc1e 	bne	r2,zero,87d54 <___vfprintf_internal_r+0xfc>
   88624:	003dce06 	br	87d60 <___vfprintf_internal_r+0x108>
   88628:	d9014f17 	ldw	r4,1340(sp)
   8862c:	b00b883a 	mov	r5,r22
   88630:	d9800c04 	addi	r6,sp,48
   88634:	0087c000 	call	87c00 <__sprint_r>
   88638:	103f3f1e 	bne	r2,zero,88338 <___vfprintf_internal_r+0x6e0>
   8863c:	dc800e17 	ldw	r18,56(sp)
   88640:	003f2e06 	br	882fc <___vfprintf_internal_r+0x6a4>
   88644:	d9414c17 	ldw	r5,1328(sp)
   88648:	29400414 	ori	r5,r5,16
   8864c:	d9414c15 	stw	r5,1328(sp)
   88650:	d9814c17 	ldw	r6,1328(sp)
   88654:	3080080c 	andi	r2,r6,32
   88658:	10014f1e 	bne	r2,zero,88b98 <___vfprintf_internal_r+0xf40>
   8865c:	d8c14c17 	ldw	r3,1328(sp)
   88660:	1880040c 	andi	r2,r3,16
   88664:	1002f01e 	bne	r2,zero,89228 <___vfprintf_internal_r+0x15d0>
   88668:	d9014c17 	ldw	r4,1328(sp)
   8866c:	2080100c 	andi	r2,r4,64
   88670:	1002ed26 	beq	r2,zero,89228 <___vfprintf_internal_r+0x15d0>
   88674:	3880000f 	ldh	r2,0(r7)
   88678:	39c00104 	addi	r7,r7,4
   8867c:	d9c14015 	stw	r7,1280(sp)
   88680:	1023d7fa 	srai	r17,r2,31
   88684:	1021883a 	mov	r16,r2
   88688:	88037816 	blt	r17,zero,8946c <___vfprintf_internal_r+0x1814>
   8868c:	01000044 	movi	r4,1
   88690:	98000416 	blt	r19,zero,886a4 <___vfprintf_internal_r+0xa4c>
   88694:	d8c14c17 	ldw	r3,1328(sp)
   88698:	00bfdfc4 	movi	r2,-129
   8869c:	1886703a 	and	r3,r3,r2
   886a0:	d8c14c15 	stw	r3,1328(sp)
   886a4:	8444b03a 	or	r2,r16,r17
   886a8:	10022c1e 	bne	r2,zero,88f5c <___vfprintf_internal_r+0x1304>
   886ac:	98022b1e 	bne	r19,zero,88f5c <___vfprintf_internal_r+0x1304>
   886b0:	20803fcc 	andi	r2,r4,255
   886b4:	1002a126 	beq	r2,zero,8913c <___vfprintf_internal_r+0x14e4>
   886b8:	d8c01904 	addi	r3,sp,100
   886bc:	dd000f04 	addi	r20,sp,60
   886c0:	d8c14115 	stw	r3,1284(sp)
   886c4:	d8c14117 	ldw	r3,1284(sp)
   886c8:	dcc14515 	stw	r19,1300(sp)
   886cc:	a0c5c83a 	sub	r2,r20,r3
   886d0:	11c00a04 	addi	r7,r2,40
   886d4:	99c0010e 	bge	r19,r7,886dc <___vfprintf_internal_r+0xa84>
   886d8:	d9c14515 	stw	r7,1300(sp)
   886dc:	dcc14615 	stw	r19,1304(sp)
   886e0:	d8800407 	ldb	r2,16(sp)
   886e4:	103e4c26 	beq	r2,zero,88018 <___vfprintf_internal_r+0x3c0>
   886e8:	d8814517 	ldw	r2,1300(sp)
   886ec:	10800044 	addi	r2,r2,1
   886f0:	d8814515 	stw	r2,1300(sp)
   886f4:	003e4806 	br	88018 <___vfprintf_internal_r+0x3c0>
   886f8:	d9814c17 	ldw	r6,1328(sp)
   886fc:	31800414 	ori	r6,r6,16
   88700:	d9814c15 	stw	r6,1328(sp)
   88704:	d8c14c17 	ldw	r3,1328(sp)
   88708:	1880080c 	andi	r2,r3,32
   8870c:	1001271e 	bne	r2,zero,88bac <___vfprintf_internal_r+0xf54>
   88710:	d9414c17 	ldw	r5,1328(sp)
   88714:	2880040c 	andi	r2,r5,16
   88718:	1002bc1e 	bne	r2,zero,8920c <___vfprintf_internal_r+0x15b4>
   8871c:	d9814c17 	ldw	r6,1328(sp)
   88720:	3080100c 	andi	r2,r6,64
   88724:	1002b926 	beq	r2,zero,8920c <___vfprintf_internal_r+0x15b4>
   88728:	3c00000b 	ldhu	r16,0(r7)
   8872c:	0009883a 	mov	r4,zero
   88730:	39c00104 	addi	r7,r7,4
   88734:	0023883a 	mov	r17,zero
   88738:	d9c14015 	stw	r7,1280(sp)
   8873c:	d8000405 	stb	zero,16(sp)
   88740:	003fd306 	br	88690 <___vfprintf_internal_r+0xa38>
   88744:	d9014c17 	ldw	r4,1328(sp)
   88748:	21000414 	ori	r4,r4,16
   8874c:	d9014c15 	stw	r4,1328(sp)
   88750:	d9414c17 	ldw	r5,1328(sp)
   88754:	2880080c 	andi	r2,r5,32
   88758:	1001081e 	bne	r2,zero,88b7c <___vfprintf_internal_r+0xf24>
   8875c:	d8c14c17 	ldw	r3,1328(sp)
   88760:	1880040c 	andi	r2,r3,16
   88764:	1002b61e 	bne	r2,zero,89240 <___vfprintf_internal_r+0x15e8>
   88768:	d9014c17 	ldw	r4,1328(sp)
   8876c:	2080100c 	andi	r2,r4,64
   88770:	1002b326 	beq	r2,zero,89240 <___vfprintf_internal_r+0x15e8>
   88774:	3c00000b 	ldhu	r16,0(r7)
   88778:	01000044 	movi	r4,1
   8877c:	39c00104 	addi	r7,r7,4
   88780:	0023883a 	mov	r17,zero
   88784:	d9c14015 	stw	r7,1280(sp)
   88788:	d8000405 	stb	zero,16(sp)
   8878c:	003fc006 	br	88690 <___vfprintf_internal_r+0xa38>
   88790:	d9014f17 	ldw	r4,1340(sp)
   88794:	b00b883a 	mov	r5,r22
   88798:	d9800c04 	addi	r6,sp,48
   8879c:	0087c000 	call	87c00 <__sprint_r>
   887a0:	103ee51e 	bne	r2,zero,88338 <___vfprintf_internal_r+0x6e0>
   887a4:	dc800e17 	ldw	r18,56(sp)
   887a8:	d8c01904 	addi	r3,sp,100
   887ac:	d9814c17 	ldw	r6,1328(sp)
   887b0:	3080004c 	andi	r2,r6,1
   887b4:	1005003a 	cmpeq	r2,r2,zero
   887b8:	103ea51e 	bne	r2,zero,88250 <___vfprintf_internal_r+0x5f8>
   887bc:	00800044 	movi	r2,1
   887c0:	dc400d17 	ldw	r17,52(sp)
   887c4:	18800115 	stw	r2,4(r3)
   887c8:	d8814917 	ldw	r2,1316(sp)
   887cc:	94800044 	addi	r18,r18,1
   887d0:	8c400044 	addi	r17,r17,1
   887d4:	18800015 	stw	r2,0(r3)
   887d8:	008001c4 	movi	r2,7
   887dc:	dc800e15 	stw	r18,56(sp)
   887e0:	dc400d15 	stw	r17,52(sp)
   887e4:	1442240e 	bge	r2,r17,89078 <___vfprintf_internal_r+0x1420>
   887e8:	d9014f17 	ldw	r4,1340(sp)
   887ec:	b00b883a 	mov	r5,r22
   887f0:	d9800c04 	addi	r6,sp,48
   887f4:	0087c000 	call	87c00 <__sprint_r>
   887f8:	103ecf1e 	bne	r2,zero,88338 <___vfprintf_internal_r+0x6e0>
   887fc:	dc800e17 	ldw	r18,56(sp)
   88800:	d8c01904 	addi	r3,sp,100
   88804:	003e9206 	br	88250 <___vfprintf_internal_r+0x5f8>
   88808:	d9014f17 	ldw	r4,1340(sp)
   8880c:	b00b883a 	mov	r5,r22
   88810:	d9800c04 	addi	r6,sp,48
   88814:	0087c000 	call	87c00 <__sprint_r>
   88818:	103ec026 	beq	r2,zero,8831c <___vfprintf_internal_r+0x6c4>
   8881c:	003ec606 	br	88338 <___vfprintf_internal_r+0x6e0>
   88820:	d9014f17 	ldw	r4,1340(sp)
   88824:	b00b883a 	mov	r5,r22
   88828:	d9800c04 	addi	r6,sp,48
   8882c:	d9c15115 	stw	r7,1348(sp)
   88830:	0087c000 	call	87c00 <__sprint_r>
   88834:	d9c15117 	ldw	r7,1348(sp)
   88838:	103ebf1e 	bne	r2,zero,88338 <___vfprintf_internal_r+0x6e0>
   8883c:	dc800e17 	ldw	r18,56(sp)
   88840:	dc400d17 	ldw	r17,52(sp)
   88844:	dd401904 	addi	r21,sp,100
   88848:	003e7406 	br	8821c <___vfprintf_internal_r+0x5c4>
   8884c:	d9014f17 	ldw	r4,1340(sp)
   88850:	b00b883a 	mov	r5,r22
   88854:	d9800c04 	addi	r6,sp,48
   88858:	d9c15115 	stw	r7,1348(sp)
   8885c:	0087c000 	call	87c00 <__sprint_r>
   88860:	d9c15117 	ldw	r7,1348(sp)
   88864:	103eb41e 	bne	r2,zero,88338 <___vfprintf_internal_r+0x6e0>
   88868:	dd401904 	addi	r21,sp,100
   8886c:	003d6d06 	br	87e24 <___vfprintf_internal_r+0x1cc>
   88870:	d9014f17 	ldw	r4,1340(sp)
   88874:	b00b883a 	mov	r5,r22
   88878:	d9800c04 	addi	r6,sp,48
   8887c:	d9c15115 	stw	r7,1348(sp)
   88880:	0087c000 	call	87c00 <__sprint_r>
   88884:	d9c15117 	ldw	r7,1348(sp)
   88888:	103eab1e 	bne	r2,zero,88338 <___vfprintf_internal_r+0x6e0>
   8888c:	dc800e17 	ldw	r18,56(sp)
   88890:	dc400d17 	ldw	r17,52(sp)
   88894:	dd401904 	addi	r21,sp,100
   88898:	003e3406 	br	8816c <___vfprintf_internal_r+0x514>
   8889c:	d9014f17 	ldw	r4,1340(sp)
   888a0:	b00b883a 	mov	r5,r22
   888a4:	d9800c04 	addi	r6,sp,48
   888a8:	d9c15115 	stw	r7,1348(sp)
   888ac:	0087c000 	call	87c00 <__sprint_r>
   888b0:	d9c15117 	ldw	r7,1348(sp)
   888b4:	103ea01e 	bne	r2,zero,88338 <___vfprintf_internal_r+0x6e0>
   888b8:	dc800e17 	ldw	r18,56(sp)
   888bc:	dc400d17 	ldw	r17,52(sp)
   888c0:	dd401904 	addi	r21,sp,100
   888c4:	003e1c06 	br	88138 <___vfprintf_internal_r+0x4e0>
   888c8:	d9014f17 	ldw	r4,1340(sp)
   888cc:	b00b883a 	mov	r5,r22
   888d0:	d9800c04 	addi	r6,sp,48
   888d4:	d9c15115 	stw	r7,1348(sp)
   888d8:	0087c000 	call	87c00 <__sprint_r>
   888dc:	d9c15117 	ldw	r7,1348(sp)
   888e0:	103e951e 	bne	r2,zero,88338 <___vfprintf_internal_r+0x6e0>
   888e4:	dc800e17 	ldw	r18,56(sp)
   888e8:	dc400d17 	ldw	r17,52(sp)
   888ec:	dd401904 	addi	r21,sp,100
   888f0:	003e0406 	br	88104 <___vfprintf_internal_r+0x4ac>
   888f4:	d9000517 	ldw	r4,20(sp)
   888f8:	0102580e 	bge	zero,r4,8925c <___vfprintf_internal_r+0x1604>
   888fc:	d9814717 	ldw	r6,1308(sp)
   88900:	21807a16 	blt	r4,r6,88aec <___vfprintf_internal_r+0xe94>
   88904:	d8814117 	ldw	r2,1284(sp)
   88908:	91a5883a 	add	r18,r18,r6
   8890c:	8c400044 	addi	r17,r17,1
   88910:	a8800015 	stw	r2,0(r21)
   88914:	008001c4 	movi	r2,7
   88918:	a9800115 	stw	r6,4(r21)
   8891c:	dc800e15 	stw	r18,56(sp)
   88920:	dc400d15 	stw	r17,52(sp)
   88924:	1442fc16 	blt	r2,r17,89518 <___vfprintf_internal_r+0x18c0>
   88928:	a8c00204 	addi	r3,r21,8
   8892c:	d9414717 	ldw	r5,1308(sp)
   88930:	2161c83a 	sub	r16,r4,r5
   88934:	043f9d0e 	bge	zero,r16,887ac <___vfprintf_internal_r+0xb54>
   88938:	00800404 	movi	r2,16
   8893c:	1402190e 	bge	r2,r16,891a4 <___vfprintf_internal_r+0x154c>
   88940:	dc400d17 	ldw	r17,52(sp)
   88944:	1027883a 	mov	r19,r2
   88948:	070002b4 	movhi	fp,10
   8894c:	e73f7284 	addi	fp,fp,-566
   88950:	050001c4 	movi	r20,7
   88954:	00000306 	br	88964 <___vfprintf_internal_r+0xd0c>
   88958:	18c00204 	addi	r3,r3,8
   8895c:	843ffc04 	addi	r16,r16,-16
   88960:	9c02130e 	bge	r19,r16,891b0 <___vfprintf_internal_r+0x1558>
   88964:	94800404 	addi	r18,r18,16
   88968:	8c400044 	addi	r17,r17,1
   8896c:	1f000015 	stw	fp,0(r3)
   88970:	1cc00115 	stw	r19,4(r3)
   88974:	dc800e15 	stw	r18,56(sp)
   88978:	dc400d15 	stw	r17,52(sp)
   8897c:	a47ff60e 	bge	r20,r17,88958 <___vfprintf_internal_r+0xd00>
   88980:	d9014f17 	ldw	r4,1340(sp)
   88984:	b00b883a 	mov	r5,r22
   88988:	d9800c04 	addi	r6,sp,48
   8898c:	0087c000 	call	87c00 <__sprint_r>
   88990:	103e691e 	bne	r2,zero,88338 <___vfprintf_internal_r+0x6e0>
   88994:	dc800e17 	ldw	r18,56(sp)
   88998:	dc400d17 	ldw	r17,52(sp)
   8899c:	d8c01904 	addi	r3,sp,100
   889a0:	003fee06 	br	8895c <___vfprintf_internal_r+0xd04>
   889a4:	d8814717 	ldw	r2,1308(sp)
   889a8:	143fffc4 	addi	r16,r2,-1
   889ac:	043e970e 	bge	zero,r16,8840c <___vfprintf_internal_r+0x7b4>
   889b0:	00800404 	movi	r2,16
   889b4:	1400180e 	bge	r2,r16,88a18 <___vfprintf_internal_r+0xdc0>
   889b8:	1029883a 	mov	r20,r2
   889bc:	070002b4 	movhi	fp,10
   889c0:	e73f7284 	addi	fp,fp,-566
   889c4:	054001c4 	movi	r21,7
   889c8:	00000306 	br	889d8 <___vfprintf_internal_r+0xd80>
   889cc:	9cc00204 	addi	r19,r19,8
   889d0:	843ffc04 	addi	r16,r16,-16
   889d4:	a400120e 	bge	r20,r16,88a20 <___vfprintf_internal_r+0xdc8>
   889d8:	94800404 	addi	r18,r18,16
   889dc:	8c400044 	addi	r17,r17,1
   889e0:	9f000015 	stw	fp,0(r19)
   889e4:	9d000115 	stw	r20,4(r19)
   889e8:	dc800e15 	stw	r18,56(sp)
   889ec:	dc400d15 	stw	r17,52(sp)
   889f0:	ac7ff60e 	bge	r21,r17,889cc <___vfprintf_internal_r+0xd74>
   889f4:	d9014f17 	ldw	r4,1340(sp)
   889f8:	b00b883a 	mov	r5,r22
   889fc:	d9800c04 	addi	r6,sp,48
   88a00:	0087c000 	call	87c00 <__sprint_r>
   88a04:	103e4c1e 	bne	r2,zero,88338 <___vfprintf_internal_r+0x6e0>
   88a08:	dc800e17 	ldw	r18,56(sp)
   88a0c:	dc400d17 	ldw	r17,52(sp)
   88a10:	dcc01904 	addi	r19,sp,100
   88a14:	003fee06 	br	889d0 <___vfprintf_internal_r+0xd78>
   88a18:	070002b4 	movhi	fp,10
   88a1c:	e73f7284 	addi	fp,fp,-566
   88a20:	9425883a 	add	r18,r18,r16
   88a24:	8c400044 	addi	r17,r17,1
   88a28:	008001c4 	movi	r2,7
   88a2c:	9f000015 	stw	fp,0(r19)
   88a30:	9c000115 	stw	r16,4(r19)
   88a34:	dc800e15 	stw	r18,56(sp)
   88a38:	dc400d15 	stw	r17,52(sp)
   88a3c:	147e720e 	bge	r2,r17,88408 <___vfprintf_internal_r+0x7b0>
   88a40:	d9014f17 	ldw	r4,1340(sp)
   88a44:	b00b883a 	mov	r5,r22
   88a48:	d9800c04 	addi	r6,sp,48
   88a4c:	0087c000 	call	87c00 <__sprint_r>
   88a50:	103e391e 	bne	r2,zero,88338 <___vfprintf_internal_r+0x6e0>
   88a54:	dc800e17 	ldw	r18,56(sp)
   88a58:	dc400d17 	ldw	r17,52(sp)
   88a5c:	dcc01904 	addi	r19,sp,100
   88a60:	003e6a06 	br	8840c <___vfprintf_internal_r+0x7b4>
   88a64:	d9014f17 	ldw	r4,1340(sp)
   88a68:	b00b883a 	mov	r5,r22
   88a6c:	d9800c04 	addi	r6,sp,48
   88a70:	d9c15115 	stw	r7,1348(sp)
   88a74:	0087c000 	call	87c00 <__sprint_r>
   88a78:	d9c15117 	ldw	r7,1348(sp)
   88a7c:	103e2e1e 	bne	r2,zero,88338 <___vfprintf_internal_r+0x6e0>
   88a80:	dc800e17 	ldw	r18,56(sp)
   88a84:	dc400d17 	ldw	r17,52(sp)
   88a88:	dd401904 	addi	r21,sp,100
   88a8c:	003dba06 	br	88178 <___vfprintf_internal_r+0x520>
   88a90:	d9014f17 	ldw	r4,1340(sp)
   88a94:	b00b883a 	mov	r5,r22
   88a98:	d9800c04 	addi	r6,sp,48
   88a9c:	0087c000 	call	87c00 <__sprint_r>
   88aa0:	103e251e 	bne	r2,zero,88338 <___vfprintf_internal_r+0x6e0>
   88aa4:	dc800e17 	ldw	r18,56(sp)
   88aa8:	dc400d17 	ldw	r17,52(sp)
   88aac:	dcc01904 	addi	r19,sp,100
   88ab0:	003e4206 	br	883bc <___vfprintf_internal_r+0x764>
   88ab4:	d9014f17 	ldw	r4,1340(sp)
   88ab8:	b00b883a 	mov	r5,r22
   88abc:	d9800c04 	addi	r6,sp,48
   88ac0:	0087c000 	call	87c00 <__sprint_r>
   88ac4:	103e1c1e 	bne	r2,zero,88338 <___vfprintf_internal_r+0x6e0>
   88ac8:	dc800e17 	ldw	r18,56(sp)
   88acc:	dc400d17 	ldw	r17,52(sp)
   88ad0:	d8c01904 	addi	r3,sp,100
   88ad4:	003e2e06 	br	88390 <___vfprintf_internal_r+0x738>
   88ad8:	d9414c17 	ldw	r5,1328(sp)
   88adc:	2880004c 	andi	r2,r5,1
   88ae0:	1005003a 	cmpeq	r2,r2,zero
   88ae4:	103dda1e 	bne	r2,zero,88250 <___vfprintf_internal_r+0x5f8>
   88ae8:	003e9f06 	br	88568 <___vfprintf_internal_r+0x910>
   88aec:	d8c14117 	ldw	r3,1284(sp)
   88af0:	9125883a 	add	r18,r18,r4
   88af4:	8c400044 	addi	r17,r17,1
   88af8:	008001c4 	movi	r2,7
   88afc:	a8c00015 	stw	r3,0(r21)
   88b00:	a9000115 	stw	r4,4(r21)
   88b04:	dc800e15 	stw	r18,56(sp)
   88b08:	dc400d15 	stw	r17,52(sp)
   88b0c:	14426c16 	blt	r2,r17,894c0 <___vfprintf_internal_r+0x1868>
   88b10:	a8c00204 	addi	r3,r21,8
   88b14:	d9414917 	ldw	r5,1316(sp)
   88b18:	00800044 	movi	r2,1
   88b1c:	94800044 	addi	r18,r18,1
   88b20:	8c400044 	addi	r17,r17,1
   88b24:	18800115 	stw	r2,4(r3)
   88b28:	008001c4 	movi	r2,7
   88b2c:	19400015 	stw	r5,0(r3)
   88b30:	dc800e15 	stw	r18,56(sp)
   88b34:	dc400d15 	stw	r17,52(sp)
   88b38:	2021883a 	mov	r16,r4
   88b3c:	14425616 	blt	r2,r17,89498 <___vfprintf_internal_r+0x1840>
   88b40:	19400204 	addi	r5,r3,8
   88b44:	d9814717 	ldw	r6,1308(sp)
   88b48:	8c400044 	addi	r17,r17,1
   88b4c:	dc400d15 	stw	r17,52(sp)
   88b50:	3107c83a 	sub	r3,r6,r4
   88b54:	d9014117 	ldw	r4,1284(sp)
   88b58:	90e5883a 	add	r18,r18,r3
   88b5c:	28c00115 	stw	r3,4(r5)
   88b60:	8105883a 	add	r2,r16,r4
   88b64:	28800015 	stw	r2,0(r5)
   88b68:	008001c4 	movi	r2,7
   88b6c:	dc800e15 	stw	r18,56(sp)
   88b70:	147f1d16 	blt	r2,r17,887e8 <___vfprintf_internal_r+0xb90>
   88b74:	28c00204 	addi	r3,r5,8
   88b78:	003db506 	br	88250 <___vfprintf_internal_r+0x5f8>
   88b7c:	3c000017 	ldw	r16,0(r7)
   88b80:	3c400117 	ldw	r17,4(r7)
   88b84:	39800204 	addi	r6,r7,8
   88b88:	01000044 	movi	r4,1
   88b8c:	d9814015 	stw	r6,1280(sp)
   88b90:	d8000405 	stb	zero,16(sp)
   88b94:	003ebe06 	br	88690 <___vfprintf_internal_r+0xa38>
   88b98:	3c000017 	ldw	r16,0(r7)
   88b9c:	3c400117 	ldw	r17,4(r7)
   88ba0:	38800204 	addi	r2,r7,8
   88ba4:	d8814015 	stw	r2,1280(sp)
   88ba8:	003eb706 	br	88688 <___vfprintf_internal_r+0xa30>
   88bac:	3c000017 	ldw	r16,0(r7)
   88bb0:	3c400117 	ldw	r17,4(r7)
   88bb4:	39000204 	addi	r4,r7,8
   88bb8:	d9014015 	stw	r4,1280(sp)
   88bbc:	0009883a 	mov	r4,zero
   88bc0:	d8000405 	stb	zero,16(sp)
   88bc4:	003eb206 	br	88690 <___vfprintf_internal_r+0xa38>
   88bc8:	38c00017 	ldw	r3,0(r7)
   88bcc:	39c00104 	addi	r7,r7,4
   88bd0:	d8c14a15 	stw	r3,1320(sp)
   88bd4:	1800d70e 	bge	r3,zero,88f34 <___vfprintf_internal_r+0x12dc>
   88bd8:	00c7c83a 	sub	r3,zero,r3
   88bdc:	d8c14a15 	stw	r3,1320(sp)
   88be0:	d9014c17 	ldw	r4,1328(sp)
   88be4:	b8c00007 	ldb	r3,0(r23)
   88be8:	21000114 	ori	r4,r4,4
   88bec:	d9014c15 	stw	r4,1328(sp)
   88bf0:	003c9806 	br	87e54 <___vfprintf_internal_r+0x1fc>
   88bf4:	d9814c17 	ldw	r6,1328(sp)
   88bf8:	3080080c 	andi	r2,r6,32
   88bfc:	1001f626 	beq	r2,zero,893d8 <___vfprintf_internal_r+0x1780>
   88c00:	d9014b17 	ldw	r4,1324(sp)
   88c04:	38800017 	ldw	r2,0(r7)
   88c08:	39c00104 	addi	r7,r7,4
   88c0c:	d9c14015 	stw	r7,1280(sp)
   88c10:	2007d7fa 	srai	r3,r4,31
   88c14:	d9c14017 	ldw	r7,1280(sp)
   88c18:	11000015 	stw	r4,0(r2)
   88c1c:	10c00115 	stw	r3,4(r2)
   88c20:	003c6906 	br	87dc8 <___vfprintf_internal_r+0x170>
   88c24:	b8c00007 	ldb	r3,0(r23)
   88c28:	00801b04 	movi	r2,108
   88c2c:	18825526 	beq	r3,r2,89584 <___vfprintf_internal_r+0x192c>
   88c30:	d9414c17 	ldw	r5,1328(sp)
   88c34:	29400414 	ori	r5,r5,16
   88c38:	d9414c15 	stw	r5,1328(sp)
   88c3c:	003c8506 	br	87e54 <___vfprintf_internal_r+0x1fc>
   88c40:	d9814c17 	ldw	r6,1328(sp)
   88c44:	b8c00007 	ldb	r3,0(r23)
   88c48:	31800814 	ori	r6,r6,32
   88c4c:	d9814c15 	stw	r6,1328(sp)
   88c50:	003c8006 	br	87e54 <___vfprintf_internal_r+0x1fc>
   88c54:	d8814c17 	ldw	r2,1328(sp)
   88c58:	3c000017 	ldw	r16,0(r7)
   88c5c:	00c01e04 	movi	r3,120
   88c60:	10800094 	ori	r2,r2,2
   88c64:	d8814c15 	stw	r2,1328(sp)
   88c68:	39c00104 	addi	r7,r7,4
   88c6c:	014002b4 	movhi	r5,10
   88c70:	297f5b04 	addi	r5,r5,-660
   88c74:	00800c04 	movi	r2,48
   88c78:	0023883a 	mov	r17,zero
   88c7c:	01000084 	movi	r4,2
   88c80:	d9c14015 	stw	r7,1280(sp)
   88c84:	d8c14d15 	stw	r3,1332(sp)
   88c88:	d9414415 	stw	r5,1296(sp)
   88c8c:	d8800445 	stb	r2,17(sp)
   88c90:	d8c00485 	stb	r3,18(sp)
   88c94:	d8000405 	stb	zero,16(sp)
   88c98:	003e7d06 	br	88690 <___vfprintf_internal_r+0xa38>
   88c9c:	d8814c17 	ldw	r2,1328(sp)
   88ca0:	b8c00007 	ldb	r3,0(r23)
   88ca4:	10801014 	ori	r2,r2,64
   88ca8:	d8814c15 	stw	r2,1328(sp)
   88cac:	003c6906 	br	87e54 <___vfprintf_internal_r+0x1fc>
   88cb0:	d9414c17 	ldw	r5,1328(sp)
   88cb4:	2880020c 	andi	r2,r5,8
   88cb8:	1001e526 	beq	r2,zero,89450 <___vfprintf_internal_r+0x17f8>
   88cbc:	39800017 	ldw	r6,0(r7)
   88cc0:	38800204 	addi	r2,r7,8
   88cc4:	d8814015 	stw	r2,1280(sp)
   88cc8:	d9814215 	stw	r6,1288(sp)
   88ccc:	39c00117 	ldw	r7,4(r7)
   88cd0:	d9c14315 	stw	r7,1292(sp)
   88cd4:	d9014217 	ldw	r4,1288(sp)
   88cd8:	d9414317 	ldw	r5,1292(sp)
   88cdc:	008e8f40 	call	8e8f4 <__isinfd>
   88ce0:	10021d26 	beq	r2,zero,89558 <___vfprintf_internal_r+0x1900>
   88ce4:	d9014217 	ldw	r4,1288(sp)
   88ce8:	d9414317 	ldw	r5,1292(sp)
   88cec:	000d883a 	mov	r6,zero
   88cf0:	000f883a 	mov	r7,zero
   88cf4:	0090bdc0 	call	90bdc <__ltdf2>
   88cf8:	1002d016 	blt	r2,zero,8983c <___vfprintf_internal_r+0x1be4>
   88cfc:	d9414d17 	ldw	r5,1332(sp)
   88d00:	008011c4 	movi	r2,71
   88d04:	11421016 	blt	r2,r5,89548 <___vfprintf_internal_r+0x18f0>
   88d08:	018002b4 	movhi	r6,10
   88d0c:	31bf6004 	addi	r6,r6,-640
   88d10:	d9814115 	stw	r6,1284(sp)
   88d14:	d9014c17 	ldw	r4,1328(sp)
   88d18:	00c000c4 	movi	r3,3
   88d1c:	00bfdfc4 	movi	r2,-129
   88d20:	2088703a 	and	r4,r4,r2
   88d24:	180f883a 	mov	r7,r3
   88d28:	d8c14515 	stw	r3,1300(sp)
   88d2c:	d9014c15 	stw	r4,1328(sp)
   88d30:	d8014615 	stw	zero,1304(sp)
   88d34:	003e6a06 	br	886e0 <___vfprintf_internal_r+0xa88>
   88d38:	38800017 	ldw	r2,0(r7)
   88d3c:	00c00044 	movi	r3,1
   88d40:	39c00104 	addi	r7,r7,4
   88d44:	d9c14015 	stw	r7,1280(sp)
   88d48:	d9000f04 	addi	r4,sp,60
   88d4c:	180f883a 	mov	r7,r3
   88d50:	d8c14515 	stw	r3,1300(sp)
   88d54:	d9014115 	stw	r4,1284(sp)
   88d58:	d8800f05 	stb	r2,60(sp)
   88d5c:	d8000405 	stb	zero,16(sp)
   88d60:	003cac06 	br	88014 <___vfprintf_internal_r+0x3bc>
   88d64:	014002b4 	movhi	r5,10
   88d68:	297f6604 	addi	r5,r5,-616
   88d6c:	d9414415 	stw	r5,1296(sp)
   88d70:	d9814c17 	ldw	r6,1328(sp)
   88d74:	3080080c 	andi	r2,r6,32
   88d78:	1000ff26 	beq	r2,zero,89178 <___vfprintf_internal_r+0x1520>
   88d7c:	3c000017 	ldw	r16,0(r7)
   88d80:	3c400117 	ldw	r17,4(r7)
   88d84:	38800204 	addi	r2,r7,8
   88d88:	d8814015 	stw	r2,1280(sp)
   88d8c:	d9414c17 	ldw	r5,1328(sp)
   88d90:	2880004c 	andi	r2,r5,1
   88d94:	1005003a 	cmpeq	r2,r2,zero
   88d98:	1000b91e 	bne	r2,zero,89080 <___vfprintf_internal_r+0x1428>
   88d9c:	8444b03a 	or	r2,r16,r17
   88da0:	1000b726 	beq	r2,zero,89080 <___vfprintf_internal_r+0x1428>
   88da4:	d9814d17 	ldw	r6,1332(sp)
   88da8:	29400094 	ori	r5,r5,2
   88dac:	00800c04 	movi	r2,48
   88db0:	01000084 	movi	r4,2
   88db4:	d9414c15 	stw	r5,1328(sp)
   88db8:	d8800445 	stb	r2,17(sp)
   88dbc:	d9800485 	stb	r6,18(sp)
   88dc0:	d8000405 	stb	zero,16(sp)
   88dc4:	003e3206 	br	88690 <___vfprintf_internal_r+0xa38>
   88dc8:	018002b4 	movhi	r6,10
   88dcc:	31bf5b04 	addi	r6,r6,-660
   88dd0:	d9814415 	stw	r6,1296(sp)
   88dd4:	003fe606 	br	88d70 <___vfprintf_internal_r+0x1118>
   88dd8:	00800ac4 	movi	r2,43
   88ddc:	d8800405 	stb	r2,16(sp)
   88de0:	b8c00007 	ldb	r3,0(r23)
   88de4:	003c1b06 	br	87e54 <___vfprintf_internal_r+0x1fc>
   88de8:	d8814c17 	ldw	r2,1328(sp)
   88dec:	b8c00007 	ldb	r3,0(r23)
   88df0:	10800054 	ori	r2,r2,1
   88df4:	d8814c15 	stw	r2,1328(sp)
   88df8:	003c1606 	br	87e54 <___vfprintf_internal_r+0x1fc>
   88dfc:	d8800407 	ldb	r2,16(sp)
   88e00:	10004c1e 	bne	r2,zero,88f34 <___vfprintf_internal_r+0x12dc>
   88e04:	00800804 	movi	r2,32
   88e08:	d8800405 	stb	r2,16(sp)
   88e0c:	b8c00007 	ldb	r3,0(r23)
   88e10:	003c1006 	br	87e54 <___vfprintf_internal_r+0x1fc>
   88e14:	d9814c17 	ldw	r6,1328(sp)
   88e18:	b8c00007 	ldb	r3,0(r23)
   88e1c:	31800214 	ori	r6,r6,8
   88e20:	d9814c15 	stw	r6,1328(sp)
   88e24:	003c0b06 	br	87e54 <___vfprintf_internal_r+0x1fc>
   88e28:	0009883a 	mov	r4,zero
   88e2c:	04000244 	movi	r16,9
   88e30:	01400284 	movi	r5,10
   88e34:	d9c15115 	stw	r7,1348(sp)
   88e38:	00877e40 	call	877e4 <__mulsi3>
   88e3c:	b9000007 	ldb	r4,0(r23)
   88e40:	d8c14d17 	ldw	r3,1332(sp)
   88e44:	bdc00044 	addi	r23,r23,1
   88e48:	d9014d15 	stw	r4,1332(sp)
   88e4c:	d9414d17 	ldw	r5,1332(sp)
   88e50:	1885883a 	add	r2,r3,r2
   88e54:	113ff404 	addi	r4,r2,-48
   88e58:	28bff404 	addi	r2,r5,-48
   88e5c:	d9c15117 	ldw	r7,1348(sp)
   88e60:	80bff32e 	bgeu	r16,r2,88e30 <___vfprintf_internal_r+0x11d8>
   88e64:	d9014a15 	stw	r4,1320(sp)
   88e68:	003bfc06 	br	87e5c <___vfprintf_internal_r+0x204>
   88e6c:	d8814c17 	ldw	r2,1328(sp)
   88e70:	b8c00007 	ldb	r3,0(r23)
   88e74:	10802014 	ori	r2,r2,128
   88e78:	d8814c15 	stw	r2,1328(sp)
   88e7c:	003bf506 	br	87e54 <___vfprintf_internal_r+0x1fc>
   88e80:	b8c00007 	ldb	r3,0(r23)
   88e84:	00800a84 	movi	r2,42
   88e88:	bdc00044 	addi	r23,r23,1
   88e8c:	18831826 	beq	r3,r2,89af0 <___vfprintf_internal_r+0x1e98>
   88e90:	d8c14d15 	stw	r3,1332(sp)
   88e94:	18bff404 	addi	r2,r3,-48
   88e98:	00c00244 	movi	r3,9
   88e9c:	18827b36 	bltu	r3,r2,8988c <___vfprintf_internal_r+0x1c34>
   88ea0:	1821883a 	mov	r16,r3
   88ea4:	0009883a 	mov	r4,zero
   88ea8:	01400284 	movi	r5,10
   88eac:	d9c15115 	stw	r7,1348(sp)
   88eb0:	00877e40 	call	877e4 <__mulsi3>
   88eb4:	d9414d17 	ldw	r5,1332(sp)
   88eb8:	b9800007 	ldb	r6,0(r23)
   88ebc:	d9c15117 	ldw	r7,1348(sp)
   88ec0:	1145883a 	add	r2,r2,r5
   88ec4:	113ff404 	addi	r4,r2,-48
   88ec8:	30bff404 	addi	r2,r6,-48
   88ecc:	d9814d15 	stw	r6,1332(sp)
   88ed0:	bdc00044 	addi	r23,r23,1
   88ed4:	80bff42e 	bgeu	r16,r2,88ea8 <___vfprintf_internal_r+0x1250>
   88ed8:	2027883a 	mov	r19,r4
   88edc:	203bdf0e 	bge	r4,zero,87e5c <___vfprintf_internal_r+0x204>
   88ee0:	04ffffc4 	movi	r19,-1
   88ee4:	003bdd06 	br	87e5c <___vfprintf_internal_r+0x204>
   88ee8:	d8000405 	stb	zero,16(sp)
   88eec:	39800017 	ldw	r6,0(r7)
   88ef0:	39c00104 	addi	r7,r7,4
   88ef4:	d9c14015 	stw	r7,1280(sp)
   88ef8:	d9814115 	stw	r6,1284(sp)
   88efc:	3001c926 	beq	r6,zero,89624 <___vfprintf_internal_r+0x19cc>
   88f00:	98000e16 	blt	r19,zero,88f3c <___vfprintf_internal_r+0x12e4>
   88f04:	d9014117 	ldw	r4,1284(sp)
   88f08:	000b883a 	mov	r5,zero
   88f0c:	980d883a 	mov	r6,r19
   88f10:	008cd8c0 	call	8cd8c <memchr>
   88f14:	10025926 	beq	r2,zero,8987c <___vfprintf_internal_r+0x1c24>
   88f18:	d8c14117 	ldw	r3,1284(sp)
   88f1c:	10cfc83a 	sub	r7,r2,r3
   88f20:	99c19e16 	blt	r19,r7,8959c <___vfprintf_internal_r+0x1944>
   88f24:	d9c14515 	stw	r7,1300(sp)
   88f28:	38000916 	blt	r7,zero,88f50 <___vfprintf_internal_r+0x12f8>
   88f2c:	d8014615 	stw	zero,1304(sp)
   88f30:	003deb06 	br	886e0 <___vfprintf_internal_r+0xa88>
   88f34:	b8c00007 	ldb	r3,0(r23)
   88f38:	003bc606 	br	87e54 <___vfprintf_internal_r+0x1fc>
   88f3c:	d9014117 	ldw	r4,1284(sp)
   88f40:	0087b8c0 	call	87b8c <strlen>
   88f44:	d8814515 	stw	r2,1300(sp)
   88f48:	100f883a 	mov	r7,r2
   88f4c:	103ff70e 	bge	r2,zero,88f2c <___vfprintf_internal_r+0x12d4>
   88f50:	d8014515 	stw	zero,1300(sp)
   88f54:	d8014615 	stw	zero,1304(sp)
   88f58:	003de106 	br	886e0 <___vfprintf_internal_r+0xa88>
   88f5c:	20c03fcc 	andi	r3,r4,255
   88f60:	00800044 	movi	r2,1
   88f64:	18802d26 	beq	r3,r2,8901c <___vfprintf_internal_r+0x13c4>
   88f68:	18800e36 	bltu	r3,r2,88fa4 <___vfprintf_internal_r+0x134c>
   88f6c:	00800084 	movi	r2,2
   88f70:	1880fa26 	beq	r3,r2,8935c <___vfprintf_internal_r+0x1704>
   88f74:	010002b4 	movhi	r4,10
   88f78:	213f6b04 	addi	r4,r4,-596
   88f7c:	0087b8c0 	call	87b8c <strlen>
   88f80:	100f883a 	mov	r7,r2
   88f84:	dcc14515 	stw	r19,1300(sp)
   88f88:	9880010e 	bge	r19,r2,88f90 <___vfprintf_internal_r+0x1338>
   88f8c:	d8814515 	stw	r2,1300(sp)
   88f90:	008002b4 	movhi	r2,10
   88f94:	10bf6b04 	addi	r2,r2,-596
   88f98:	dcc14615 	stw	r19,1304(sp)
   88f9c:	d8814115 	stw	r2,1284(sp)
   88fa0:	003dcf06 	br	886e0 <___vfprintf_internal_r+0xa88>
   88fa4:	d9401904 	addi	r5,sp,100
   88fa8:	dd000f04 	addi	r20,sp,60
   88fac:	d9414115 	stw	r5,1284(sp)
   88fb0:	880a977a 	slli	r5,r17,29
   88fb4:	d9814117 	ldw	r6,1284(sp)
   88fb8:	8004d0fa 	srli	r2,r16,3
   88fbc:	8806d0fa 	srli	r3,r17,3
   88fc0:	810001cc 	andi	r4,r16,7
   88fc4:	2884b03a 	or	r2,r5,r2
   88fc8:	31bfffc4 	addi	r6,r6,-1
   88fcc:	21000c04 	addi	r4,r4,48
   88fd0:	d9814115 	stw	r6,1284(sp)
   88fd4:	10cab03a 	or	r5,r2,r3
   88fd8:	31000005 	stb	r4,0(r6)
   88fdc:	1021883a 	mov	r16,r2
   88fe0:	1823883a 	mov	r17,r3
   88fe4:	283ff21e 	bne	r5,zero,88fb0 <___vfprintf_internal_r+0x1358>
   88fe8:	d8c14c17 	ldw	r3,1328(sp)
   88fec:	1880004c 	andi	r2,r3,1
   88ff0:	1005003a 	cmpeq	r2,r2,zero
   88ff4:	103db31e 	bne	r2,zero,886c4 <___vfprintf_internal_r+0xa6c>
   88ff8:	20803fcc 	andi	r2,r4,255
   88ffc:	1080201c 	xori	r2,r2,128
   89000:	10bfe004 	addi	r2,r2,-128
   89004:	00c00c04 	movi	r3,48
   89008:	10fdae26 	beq	r2,r3,886c4 <___vfprintf_internal_r+0xa6c>
   8900c:	31bfffc4 	addi	r6,r6,-1
   89010:	d9814115 	stw	r6,1284(sp)
   89014:	30c00005 	stb	r3,0(r6)
   89018:	003daa06 	br	886c4 <___vfprintf_internal_r+0xa6c>
   8901c:	88800068 	cmpgeui	r2,r17,1
   89020:	10002c1e 	bne	r2,zero,890d4 <___vfprintf_internal_r+0x147c>
   89024:	8800021e 	bne	r17,zero,89030 <___vfprintf_internal_r+0x13d8>
   89028:	00800244 	movi	r2,9
   8902c:	14002936 	bltu	r2,r16,890d4 <___vfprintf_internal_r+0x147c>
   89030:	d90018c4 	addi	r4,sp,99
   89034:	dd000f04 	addi	r20,sp,60
   89038:	d9014115 	stw	r4,1284(sp)
   8903c:	d9014117 	ldw	r4,1284(sp)
   89040:	80800c04 	addi	r2,r16,48
   89044:	20800005 	stb	r2,0(r4)
   89048:	003d9e06 	br	886c4 <___vfprintf_internal_r+0xa6c>
   8904c:	dc400d17 	ldw	r17,52(sp)
   89050:	070002b4 	movhi	fp,10
   89054:	e73f7284 	addi	fp,fp,-566
   89058:	9425883a 	add	r18,r18,r16
   8905c:	8c400044 	addi	r17,r17,1
   89060:	008001c4 	movi	r2,7
   89064:	1f000015 	stw	fp,0(r3)
   89068:	1c000115 	stw	r16,4(r3)
   8906c:	dc800e15 	stw	r18,56(sp)
   89070:	dc400d15 	stw	r17,52(sp)
   89074:	147ddc16 	blt	r2,r17,887e8 <___vfprintf_internal_r+0xb90>
   89078:	18c00204 	addi	r3,r3,8
   8907c:	003c7406 	br	88250 <___vfprintf_internal_r+0x5f8>
   89080:	01000084 	movi	r4,2
   89084:	d8000405 	stb	zero,16(sp)
   89088:	003d8106 	br	88690 <___vfprintf_internal_r+0xa38>
   8908c:	d9814c17 	ldw	r6,1328(sp)
   89090:	30c4703a 	and	r2,r6,r3
   89094:	1005003a 	cmpeq	r2,r2,zero
   89098:	103cb326 	beq	r2,zero,88368 <___vfprintf_internal_r+0x710>
   8909c:	d9014117 	ldw	r4,1284(sp)
   890a0:	94800044 	addi	r18,r18,1
   890a4:	8c400044 	addi	r17,r17,1
   890a8:	008001c4 	movi	r2,7
   890ac:	a9000015 	stw	r4,0(r21)
   890b0:	a8c00115 	stw	r3,4(r21)
   890b4:	dc800e15 	stw	r18,56(sp)
   890b8:	dc400d15 	stw	r17,52(sp)
   890bc:	147e6016 	blt	r2,r17,88a40 <___vfprintf_internal_r+0xde8>
   890c0:	acc00204 	addi	r19,r21,8
   890c4:	003cd106 	br	8840c <___vfprintf_internal_r+0x7b4>
   890c8:	070002b4 	movhi	fp,10
   890cc:	e73f7284 	addi	fp,fp,-566
   890d0:	003c4906 	br	881f8 <___vfprintf_internal_r+0x5a0>
   890d4:	dd000f04 	addi	r20,sp,60
   890d8:	dc801904 	addi	r18,sp,100
   890dc:	8009883a 	mov	r4,r16
   890e0:	880b883a 	mov	r5,r17
   890e4:	01800284 	movi	r6,10
   890e8:	000f883a 	mov	r7,zero
   890ec:	008f83c0 	call	8f83c <__umoddi3>
   890f0:	12000c04 	addi	r8,r2,48
   890f4:	94bfffc4 	addi	r18,r18,-1
   890f8:	8009883a 	mov	r4,r16
   890fc:	880b883a 	mov	r5,r17
   89100:	01800284 	movi	r6,10
   89104:	000f883a 	mov	r7,zero
   89108:	92000005 	stb	r8,0(r18)
   8910c:	008f1d00 	call	8f1d0 <__udivdi3>
   89110:	1009883a 	mov	r4,r2
   89114:	1021883a 	mov	r16,r2
   89118:	18800068 	cmpgeui	r2,r3,1
   8911c:	1823883a 	mov	r17,r3
   89120:	103fee1e 	bne	r2,zero,890dc <___vfprintf_internal_r+0x1484>
   89124:	1800021e 	bne	r3,zero,89130 <___vfprintf_internal_r+0x14d8>
   89128:	00800244 	movi	r2,9
   8912c:	113feb36 	bltu	r2,r4,890dc <___vfprintf_internal_r+0x1484>
   89130:	94bfffc4 	addi	r18,r18,-1
   89134:	dc814115 	stw	r18,1284(sp)
   89138:	003fc006 	br	8903c <___vfprintf_internal_r+0x13e4>
   8913c:	d9014c17 	ldw	r4,1328(sp)
   89140:	2080004c 	andi	r2,r4,1
   89144:	10009a1e 	bne	r2,zero,893b0 <___vfprintf_internal_r+0x1758>
   89148:	d9401904 	addi	r5,sp,100
   8914c:	dd000f04 	addi	r20,sp,60
   89150:	d9414115 	stw	r5,1284(sp)
   89154:	003d5b06 	br	886c4 <___vfprintf_internal_r+0xa6c>
   89158:	d9014f17 	ldw	r4,1340(sp)
   8915c:	b00b883a 	mov	r5,r22
   89160:	d9800c04 	addi	r6,sp,48
   89164:	0087c000 	call	87c00 <__sprint_r>
   89168:	103c731e 	bne	r2,zero,88338 <___vfprintf_internal_r+0x6e0>
   8916c:	dc800e17 	ldw	r18,56(sp)
   89170:	d8c01904 	addi	r3,sp,100
   89174:	003cf906 	br	8855c <___vfprintf_internal_r+0x904>
   89178:	d8c14c17 	ldw	r3,1328(sp)
   8917c:	1880040c 	andi	r2,r3,16
   89180:	1000711e 	bne	r2,zero,89348 <___vfprintf_internal_r+0x16f0>
   89184:	d9014c17 	ldw	r4,1328(sp)
   89188:	2080100c 	andi	r2,r4,64
   8918c:	10006e26 	beq	r2,zero,89348 <___vfprintf_internal_r+0x16f0>
   89190:	3c00000b 	ldhu	r16,0(r7)
   89194:	0023883a 	mov	r17,zero
   89198:	39c00104 	addi	r7,r7,4
   8919c:	d9c14015 	stw	r7,1280(sp)
   891a0:	003efa06 	br	88d8c <___vfprintf_internal_r+0x1134>
   891a4:	dc400d17 	ldw	r17,52(sp)
   891a8:	070002b4 	movhi	fp,10
   891ac:	e73f7284 	addi	fp,fp,-566
   891b0:	9425883a 	add	r18,r18,r16
   891b4:	8c400044 	addi	r17,r17,1
   891b8:	008001c4 	movi	r2,7
   891bc:	1f000015 	stw	fp,0(r3)
   891c0:	1c000115 	stw	r16,4(r3)
   891c4:	dc800e15 	stw	r18,56(sp)
   891c8:	dc400d15 	stw	r17,52(sp)
   891cc:	147d7016 	blt	r2,r17,88790 <___vfprintf_internal_r+0xb38>
   891d0:	18c00204 	addi	r3,r3,8
   891d4:	003d7506 	br	887ac <___vfprintf_internal_r+0xb54>
   891d8:	dc800e17 	ldw	r18,56(sp)
   891dc:	dc400d17 	ldw	r17,52(sp)
   891e0:	070002b4 	movhi	fp,10
   891e4:	e73f7684 	addi	fp,fp,-550
   891e8:	003bba06 	br	880d4 <___vfprintf_internal_r+0x47c>
   891ec:	d9014f17 	ldw	r4,1340(sp)
   891f0:	b00b883a 	mov	r5,r22
   891f4:	d9800c04 	addi	r6,sp,48
   891f8:	0087c000 	call	87c00 <__sprint_r>
   891fc:	103c4e1e 	bne	r2,zero,88338 <___vfprintf_internal_r+0x6e0>
   89200:	dc800e17 	ldw	r18,56(sp)
   89204:	d8c01904 	addi	r3,sp,100
   89208:	003ce306 	br	88598 <___vfprintf_internal_r+0x940>
   8920c:	3c000017 	ldw	r16,0(r7)
   89210:	0009883a 	mov	r4,zero
   89214:	39c00104 	addi	r7,r7,4
   89218:	0023883a 	mov	r17,zero
   8921c:	d9c14015 	stw	r7,1280(sp)
   89220:	d8000405 	stb	zero,16(sp)
   89224:	003d1a06 	br	88690 <___vfprintf_internal_r+0xa38>
   89228:	38800017 	ldw	r2,0(r7)
   8922c:	39c00104 	addi	r7,r7,4
   89230:	d9c14015 	stw	r7,1280(sp)
   89234:	1023d7fa 	srai	r17,r2,31
   89238:	1021883a 	mov	r16,r2
   8923c:	003d1206 	br	88688 <___vfprintf_internal_r+0xa30>
   89240:	3c000017 	ldw	r16,0(r7)
   89244:	01000044 	movi	r4,1
   89248:	39c00104 	addi	r7,r7,4
   8924c:	0023883a 	mov	r17,zero
   89250:	d9c14015 	stw	r7,1280(sp)
   89254:	d8000405 	stb	zero,16(sp)
   89258:	003d0d06 	br	88690 <___vfprintf_internal_r+0xa38>
   8925c:	008002b4 	movhi	r2,10
   89260:	10bf7204 	addi	r2,r2,-568
   89264:	94800044 	addi	r18,r18,1
   89268:	8c400044 	addi	r17,r17,1
   8926c:	a8800015 	stw	r2,0(r21)
   89270:	00c00044 	movi	r3,1
   89274:	008001c4 	movi	r2,7
   89278:	a8c00115 	stw	r3,4(r21)
   8927c:	dc800e15 	stw	r18,56(sp)
   89280:	dc400d15 	stw	r17,52(sp)
   89284:	1440ca16 	blt	r2,r17,895b0 <___vfprintf_internal_r+0x1958>
   89288:	a8c00204 	addi	r3,r21,8
   8928c:	2000061e 	bne	r4,zero,892a8 <___vfprintf_internal_r+0x1650>
   89290:	d9414717 	ldw	r5,1308(sp)
   89294:	2800041e 	bne	r5,zero,892a8 <___vfprintf_internal_r+0x1650>
   89298:	d9814c17 	ldw	r6,1328(sp)
   8929c:	3080004c 	andi	r2,r6,1
   892a0:	1005003a 	cmpeq	r2,r2,zero
   892a4:	103bea1e 	bne	r2,zero,88250 <___vfprintf_internal_r+0x5f8>
   892a8:	00800044 	movi	r2,1
   892ac:	dc400d17 	ldw	r17,52(sp)
   892b0:	18800115 	stw	r2,4(r3)
   892b4:	d8814917 	ldw	r2,1316(sp)
   892b8:	94800044 	addi	r18,r18,1
   892bc:	8c400044 	addi	r17,r17,1
   892c0:	18800015 	stw	r2,0(r3)
   892c4:	008001c4 	movi	r2,7
   892c8:	dc800e15 	stw	r18,56(sp)
   892cc:	dc400d15 	stw	r17,52(sp)
   892d0:	1440ca16 	blt	r2,r17,895fc <___vfprintf_internal_r+0x19a4>
   892d4:	18c00204 	addi	r3,r3,8
   892d8:	0121c83a 	sub	r16,zero,r4
   892dc:	0400500e 	bge	zero,r16,89420 <___vfprintf_internal_r+0x17c8>
   892e0:	00800404 	movi	r2,16
   892e4:	1400800e 	bge	r2,r16,894e8 <___vfprintf_internal_r+0x1890>
   892e8:	1027883a 	mov	r19,r2
   892ec:	070002b4 	movhi	fp,10
   892f0:	e73f7284 	addi	fp,fp,-566
   892f4:	050001c4 	movi	r20,7
   892f8:	00000306 	br	89308 <___vfprintf_internal_r+0x16b0>
   892fc:	18c00204 	addi	r3,r3,8
   89300:	843ffc04 	addi	r16,r16,-16
   89304:	9c007a0e 	bge	r19,r16,894f0 <___vfprintf_internal_r+0x1898>
   89308:	94800404 	addi	r18,r18,16
   8930c:	8c400044 	addi	r17,r17,1
   89310:	1f000015 	stw	fp,0(r3)
   89314:	1cc00115 	stw	r19,4(r3)
   89318:	dc800e15 	stw	r18,56(sp)
   8931c:	dc400d15 	stw	r17,52(sp)
   89320:	a47ff60e 	bge	r20,r17,892fc <___vfprintf_internal_r+0x16a4>
   89324:	d9014f17 	ldw	r4,1340(sp)
   89328:	b00b883a 	mov	r5,r22
   8932c:	d9800c04 	addi	r6,sp,48
   89330:	0087c000 	call	87c00 <__sprint_r>
   89334:	103c001e 	bne	r2,zero,88338 <___vfprintf_internal_r+0x6e0>
   89338:	dc800e17 	ldw	r18,56(sp)
   8933c:	dc400d17 	ldw	r17,52(sp)
   89340:	d8c01904 	addi	r3,sp,100
   89344:	003fee06 	br	89300 <___vfprintf_internal_r+0x16a8>
   89348:	3c000017 	ldw	r16,0(r7)
   8934c:	0023883a 	mov	r17,zero
   89350:	39c00104 	addi	r7,r7,4
   89354:	d9c14015 	stw	r7,1280(sp)
   89358:	003e8c06 	br	88d8c <___vfprintf_internal_r+0x1134>
   8935c:	d9401904 	addi	r5,sp,100
   89360:	dd000f04 	addi	r20,sp,60
   89364:	d9414115 	stw	r5,1284(sp)
   89368:	d9814417 	ldw	r6,1296(sp)
   8936c:	880a973a 	slli	r5,r17,28
   89370:	8004d13a 	srli	r2,r16,4
   89374:	810003cc 	andi	r4,r16,15
   89378:	3109883a 	add	r4,r6,r4
   8937c:	2884b03a 	or	r2,r5,r2
   89380:	21400003 	ldbu	r5,0(r4)
   89384:	d9014117 	ldw	r4,1284(sp)
   89388:	8806d13a 	srli	r3,r17,4
   8938c:	1021883a 	mov	r16,r2
   89390:	213fffc4 	addi	r4,r4,-1
   89394:	d9014115 	stw	r4,1284(sp)
   89398:	d9814117 	ldw	r6,1284(sp)
   8939c:	10c8b03a 	or	r4,r2,r3
   893a0:	1823883a 	mov	r17,r3
   893a4:	31400005 	stb	r5,0(r6)
   893a8:	203fef1e 	bne	r4,zero,89368 <___vfprintf_internal_r+0x1710>
   893ac:	003cc506 	br	886c4 <___vfprintf_internal_r+0xa6c>
   893b0:	00800c04 	movi	r2,48
   893b4:	d98018c4 	addi	r6,sp,99
   893b8:	dd000f04 	addi	r20,sp,60
   893bc:	d88018c5 	stb	r2,99(sp)
   893c0:	d9814115 	stw	r6,1284(sp)
   893c4:	003cbf06 	br	886c4 <___vfprintf_internal_r+0xa6c>
   893c8:	dc400d17 	ldw	r17,52(sp)
   893cc:	070002b4 	movhi	fp,10
   893d0:	e73f7684 	addi	fp,fp,-550
   893d4:	003bc106 	br	882dc <___vfprintf_internal_r+0x684>
   893d8:	d9414c17 	ldw	r5,1328(sp)
   893dc:	2880040c 	andi	r2,r5,16
   893e0:	10007c26 	beq	r2,zero,895d4 <___vfprintf_internal_r+0x197c>
   893e4:	38800017 	ldw	r2,0(r7)
   893e8:	39c00104 	addi	r7,r7,4
   893ec:	d9c14015 	stw	r7,1280(sp)
   893f0:	d9814b17 	ldw	r6,1324(sp)
   893f4:	d9c14017 	ldw	r7,1280(sp)
   893f8:	11800015 	stw	r6,0(r2)
   893fc:	003a7206 	br	87dc8 <___vfprintf_internal_r+0x170>
   89400:	d9014f17 	ldw	r4,1340(sp)
   89404:	b00b883a 	mov	r5,r22
   89408:	d9800c04 	addi	r6,sp,48
   8940c:	0087c000 	call	87c00 <__sprint_r>
   89410:	103bc91e 	bne	r2,zero,88338 <___vfprintf_internal_r+0x6e0>
   89414:	dc800e17 	ldw	r18,56(sp)
   89418:	dc400d17 	ldw	r17,52(sp)
   8941c:	d8c01904 	addi	r3,sp,100
   89420:	d9014717 	ldw	r4,1308(sp)
   89424:	d9414117 	ldw	r5,1284(sp)
   89428:	8c400044 	addi	r17,r17,1
   8942c:	9125883a 	add	r18,r18,r4
   89430:	008001c4 	movi	r2,7
   89434:	19400015 	stw	r5,0(r3)
   89438:	19000115 	stw	r4,4(r3)
   8943c:	dc800e15 	stw	r18,56(sp)
   89440:	dc400d15 	stw	r17,52(sp)
   89444:	147ce816 	blt	r2,r17,887e8 <___vfprintf_internal_r+0xb90>
   89448:	18c00204 	addi	r3,r3,8
   8944c:	003b8006 	br	88250 <___vfprintf_internal_r+0x5f8>
   89450:	38c00017 	ldw	r3,0(r7)
   89454:	39000204 	addi	r4,r7,8
   89458:	d9014015 	stw	r4,1280(sp)
   8945c:	d8c14215 	stw	r3,1288(sp)
   89460:	39c00117 	ldw	r7,4(r7)
   89464:	d9c14315 	stw	r7,1292(sp)
   89468:	003e1a06 	br	88cd4 <___vfprintf_internal_r+0x107c>
   8946c:	0005883a 	mov	r2,zero
   89470:	1409c83a 	sub	r4,r2,r16
   89474:	1105803a 	cmpltu	r2,r2,r4
   89478:	044bc83a 	sub	r5,zero,r17
   8947c:	2885c83a 	sub	r2,r5,r2
   89480:	2021883a 	mov	r16,r4
   89484:	1023883a 	mov	r17,r2
   89488:	01000044 	movi	r4,1
   8948c:	00800b44 	movi	r2,45
   89490:	d8800405 	stb	r2,16(sp)
   89494:	003c7e06 	br	88690 <___vfprintf_internal_r+0xa38>
   89498:	d9014f17 	ldw	r4,1340(sp)
   8949c:	b00b883a 	mov	r5,r22
   894a0:	d9800c04 	addi	r6,sp,48
   894a4:	0087c000 	call	87c00 <__sprint_r>
   894a8:	103ba31e 	bne	r2,zero,88338 <___vfprintf_internal_r+0x6e0>
   894ac:	dc800e17 	ldw	r18,56(sp)
   894b0:	dc400d17 	ldw	r17,52(sp)
   894b4:	d9000517 	ldw	r4,20(sp)
   894b8:	d9401904 	addi	r5,sp,100
   894bc:	003da106 	br	88b44 <___vfprintf_internal_r+0xeec>
   894c0:	d9014f17 	ldw	r4,1340(sp)
   894c4:	b00b883a 	mov	r5,r22
   894c8:	d9800c04 	addi	r6,sp,48
   894cc:	0087c000 	call	87c00 <__sprint_r>
   894d0:	103b991e 	bne	r2,zero,88338 <___vfprintf_internal_r+0x6e0>
   894d4:	dc800e17 	ldw	r18,56(sp)
   894d8:	dc400d17 	ldw	r17,52(sp)
   894dc:	d9000517 	ldw	r4,20(sp)
   894e0:	d8c01904 	addi	r3,sp,100
   894e4:	003d8b06 	br	88b14 <___vfprintf_internal_r+0xebc>
   894e8:	070002b4 	movhi	fp,10
   894ec:	e73f7284 	addi	fp,fp,-566
   894f0:	9425883a 	add	r18,r18,r16
   894f4:	8c400044 	addi	r17,r17,1
   894f8:	008001c4 	movi	r2,7
   894fc:	1f000015 	stw	fp,0(r3)
   89500:	1c000115 	stw	r16,4(r3)
   89504:	dc800e15 	stw	r18,56(sp)
   89508:	dc400d15 	stw	r17,52(sp)
   8950c:	147fbc16 	blt	r2,r17,89400 <___vfprintf_internal_r+0x17a8>
   89510:	18c00204 	addi	r3,r3,8
   89514:	003fc206 	br	89420 <___vfprintf_internal_r+0x17c8>
   89518:	d9014f17 	ldw	r4,1340(sp)
   8951c:	b00b883a 	mov	r5,r22
   89520:	d9800c04 	addi	r6,sp,48
   89524:	0087c000 	call	87c00 <__sprint_r>
   89528:	103b831e 	bne	r2,zero,88338 <___vfprintf_internal_r+0x6e0>
   8952c:	dc800e17 	ldw	r18,56(sp)
   89530:	d9000517 	ldw	r4,20(sp)
   89534:	d8c01904 	addi	r3,sp,100
   89538:	003cfc06 	br	8892c <___vfprintf_internal_r+0xcd4>
   8953c:	070002b4 	movhi	fp,10
   89540:	e73f7284 	addi	fp,fp,-566
   89544:	003bde06 	br	884c0 <___vfprintf_internal_r+0x868>
   89548:	008002b4 	movhi	r2,10
   8954c:	10bf6104 	addi	r2,r2,-636
   89550:	d8814115 	stw	r2,1284(sp)
   89554:	003def06 	br	88d14 <___vfprintf_internal_r+0x10bc>
   89558:	d9014217 	ldw	r4,1288(sp)
   8955c:	d9414317 	ldw	r5,1292(sp)
   89560:	008e9340 	call	8e934 <__isnand>
   89564:	10003926 	beq	r2,zero,8964c <___vfprintf_internal_r+0x19f4>
   89568:	d9414d17 	ldw	r5,1332(sp)
   8956c:	008011c4 	movi	r2,71
   89570:	1140ce16 	blt	r2,r5,898ac <___vfprintf_internal_r+0x1c54>
   89574:	018002b4 	movhi	r6,10
   89578:	31bf6204 	addi	r6,r6,-632
   8957c:	d9814115 	stw	r6,1284(sp)
   89580:	003de406 	br	88d14 <___vfprintf_internal_r+0x10bc>
   89584:	d9014c17 	ldw	r4,1328(sp)
   89588:	bdc00044 	addi	r23,r23,1
   8958c:	b8c00007 	ldb	r3,0(r23)
   89590:	21000814 	ori	r4,r4,32
   89594:	d9014c15 	stw	r4,1328(sp)
   89598:	003a2e06 	br	87e54 <___vfprintf_internal_r+0x1fc>
   8959c:	dcc14515 	stw	r19,1300(sp)
   895a0:	98011016 	blt	r19,zero,899e4 <___vfprintf_internal_r+0x1d8c>
   895a4:	980f883a 	mov	r7,r19
   895a8:	d8014615 	stw	zero,1304(sp)
   895ac:	003c4c06 	br	886e0 <___vfprintf_internal_r+0xa88>
   895b0:	d9014f17 	ldw	r4,1340(sp)
   895b4:	b00b883a 	mov	r5,r22
   895b8:	d9800c04 	addi	r6,sp,48
   895bc:	0087c000 	call	87c00 <__sprint_r>
   895c0:	103b5d1e 	bne	r2,zero,88338 <___vfprintf_internal_r+0x6e0>
   895c4:	dc800e17 	ldw	r18,56(sp)
   895c8:	d9000517 	ldw	r4,20(sp)
   895cc:	d8c01904 	addi	r3,sp,100
   895d0:	003f2e06 	br	8928c <___vfprintf_internal_r+0x1634>
   895d4:	d8c14c17 	ldw	r3,1328(sp)
   895d8:	1880100c 	andi	r2,r3,64
   895dc:	1000a026 	beq	r2,zero,89860 <___vfprintf_internal_r+0x1c08>
   895e0:	38800017 	ldw	r2,0(r7)
   895e4:	39c00104 	addi	r7,r7,4
   895e8:	d9c14015 	stw	r7,1280(sp)
   895ec:	d9014b17 	ldw	r4,1324(sp)
   895f0:	d9c14017 	ldw	r7,1280(sp)
   895f4:	1100000d 	sth	r4,0(r2)
   895f8:	0039f306 	br	87dc8 <___vfprintf_internal_r+0x170>
   895fc:	d9014f17 	ldw	r4,1340(sp)
   89600:	b00b883a 	mov	r5,r22
   89604:	d9800c04 	addi	r6,sp,48
   89608:	0087c000 	call	87c00 <__sprint_r>
   8960c:	103b4a1e 	bne	r2,zero,88338 <___vfprintf_internal_r+0x6e0>
   89610:	dc800e17 	ldw	r18,56(sp)
   89614:	dc400d17 	ldw	r17,52(sp)
   89618:	d9000517 	ldw	r4,20(sp)
   8961c:	d8c01904 	addi	r3,sp,100
   89620:	003f2d06 	br	892d8 <___vfprintf_internal_r+0x1680>
   89624:	00800184 	movi	r2,6
   89628:	14c09a36 	bltu	r2,r19,89894 <___vfprintf_internal_r+0x1c3c>
   8962c:	dcc14515 	stw	r19,1300(sp)
   89630:	9800010e 	bge	r19,zero,89638 <___vfprintf_internal_r+0x19e0>
   89634:	d8014515 	stw	zero,1300(sp)
   89638:	008002b4 	movhi	r2,10
   8963c:	10bf6404 	addi	r2,r2,-624
   89640:	980f883a 	mov	r7,r19
   89644:	d8814115 	stw	r2,1284(sp)
   89648:	003a7206 	br	88014 <___vfprintf_internal_r+0x3bc>
   8964c:	00bfffc4 	movi	r2,-1
   89650:	9880e226 	beq	r19,r2,899dc <___vfprintf_internal_r+0x1d84>
   89654:	d9414d17 	ldw	r5,1332(sp)
   89658:	008019c4 	movi	r2,103
   8965c:	2880dc26 	beq	r5,r2,899d0 <___vfprintf_internal_r+0x1d78>
   89660:	008011c4 	movi	r2,71
   89664:	2880da26 	beq	r5,r2,899d0 <___vfprintf_internal_r+0x1d78>
   89668:	d9414c17 	ldw	r5,1328(sp)
   8966c:	d9014317 	ldw	r4,1292(sp)
   89670:	d9814217 	ldw	r6,1288(sp)
   89674:	29404014 	ori	r5,r5,256
   89678:	d9414c15 	stw	r5,1328(sp)
   8967c:	2000cc16 	blt	r4,zero,899b0 <___vfprintf_internal_r+0x1d58>
   89680:	3021883a 	mov	r16,r6
   89684:	2023883a 	mov	r17,r4
   89688:	0039883a 	mov	fp,zero
   8968c:	d9414d17 	ldw	r5,1332(sp)
   89690:	00801984 	movi	r2,102
   89694:	2880b726 	beq	r5,r2,89974 <___vfprintf_internal_r+0x1d1c>
   89698:	00801184 	movi	r2,70
   8969c:	2880b526 	beq	r5,r2,89974 <___vfprintf_internal_r+0x1d1c>
   896a0:	00801944 	movi	r2,101
   896a4:	2880c826 	beq	r5,r2,899c8 <___vfprintf_internal_r+0x1d70>
   896a8:	00801144 	movi	r2,69
   896ac:	2880c626 	beq	r5,r2,899c8 <___vfprintf_internal_r+0x1d70>
   896b0:	9829883a 	mov	r20,r19
   896b4:	d9014f17 	ldw	r4,1340(sp)
   896b8:	d8800504 	addi	r2,sp,20
   896bc:	880d883a 	mov	r6,r17
   896c0:	d8800115 	stw	r2,4(sp)
   896c4:	d8c00604 	addi	r3,sp,24
   896c8:	d8800704 	addi	r2,sp,28
   896cc:	800b883a 	mov	r5,r16
   896d0:	01c00084 	movi	r7,2
   896d4:	d8c00215 	stw	r3,8(sp)
   896d8:	d8800315 	stw	r2,12(sp)
   896dc:	dd000015 	stw	r20,0(sp)
   896e0:	0089ec00 	call	89ec0 <_dtoa_r>
   896e4:	d9814d17 	ldw	r6,1332(sp)
   896e8:	d8814115 	stw	r2,1284(sp)
   896ec:	008019c4 	movi	r2,103
   896f0:	30809526 	beq	r6,r2,89948 <___vfprintf_internal_r+0x1cf0>
   896f4:	d8c14d17 	ldw	r3,1332(sp)
   896f8:	008011c4 	movi	r2,71
   896fc:	18809226 	beq	r3,r2,89948 <___vfprintf_internal_r+0x1cf0>
   89700:	d9414117 	ldw	r5,1284(sp)
   89704:	d9814d17 	ldw	r6,1332(sp)
   89708:	00801984 	movi	r2,102
   8970c:	2d25883a 	add	r18,r5,r20
   89710:	30808626 	beq	r6,r2,8992c <___vfprintf_internal_r+0x1cd4>
   89714:	00801184 	movi	r2,70
   89718:	30808426 	beq	r6,r2,8992c <___vfprintf_internal_r+0x1cd4>
   8971c:	000d883a 	mov	r6,zero
   89720:	000f883a 	mov	r7,zero
   89724:	880b883a 	mov	r5,r17
   89728:	8009883a 	mov	r4,r16
   8972c:	00909bc0 	call	909bc <__eqdf2>
   89730:	1000751e 	bne	r2,zero,89908 <___vfprintf_internal_r+0x1cb0>
   89734:	9005883a 	mov	r2,r18
   89738:	dc800715 	stw	r18,28(sp)
   8973c:	d9014117 	ldw	r4,1284(sp)
   89740:	d9414d17 	ldw	r5,1332(sp)
   89744:	00c019c4 	movi	r3,103
   89748:	1125c83a 	sub	r18,r2,r4
   8974c:	28c06826 	beq	r5,r3,898f0 <___vfprintf_internal_r+0x1c98>
   89750:	008011c4 	movi	r2,71
   89754:	28806626 	beq	r5,r2,898f0 <___vfprintf_internal_r+0x1c98>
   89758:	d9000517 	ldw	r4,20(sp)
   8975c:	d8c14d17 	ldw	r3,1332(sp)
   89760:	00801944 	movi	r2,101
   89764:	10c05516 	blt	r2,r3,898bc <___vfprintf_internal_r+0x1c64>
   89768:	213fffc4 	addi	r4,r4,-1
   8976c:	d9000515 	stw	r4,20(sp)
   89770:	d8c00805 	stb	r3,32(sp)
   89774:	2021883a 	mov	r16,r4
   89778:	2000c116 	blt	r4,zero,89a80 <___vfprintf_internal_r+0x1e28>
   8977c:	00800ac4 	movi	r2,43
   89780:	d8800845 	stb	r2,33(sp)
   89784:	00800244 	movi	r2,9
   89788:	1400af0e 	bge	r2,r16,89a48 <___vfprintf_internal_r+0x1df0>
   8978c:	1027883a 	mov	r19,r2
   89790:	dc400b84 	addi	r17,sp,46
   89794:	8009883a 	mov	r4,r16
   89798:	01400284 	movi	r5,10
   8979c:	00877740 	call	87774 <__modsi3>
   897a0:	10800c04 	addi	r2,r2,48
   897a4:	8c7fffc4 	addi	r17,r17,-1
   897a8:	8009883a 	mov	r4,r16
   897ac:	01400284 	movi	r5,10
   897b0:	88800005 	stb	r2,0(r17)
   897b4:	00877140 	call	87714 <__divsi3>
   897b8:	1021883a 	mov	r16,r2
   897bc:	98bff516 	blt	r19,r2,89794 <___vfprintf_internal_r+0x1b3c>
   897c0:	10c00c04 	addi	r3,r2,48
   897c4:	d88009c4 	addi	r2,sp,39
   897c8:	108001c4 	addi	r2,r2,7
   897cc:	897fffc4 	addi	r5,r17,-1
   897d0:	88ffffc5 	stb	r3,-1(r17)
   897d4:	2880a72e 	bgeu	r5,r2,89a74 <___vfprintf_internal_r+0x1e1c>
   897d8:	1009883a 	mov	r4,r2
   897dc:	d9800804 	addi	r6,sp,32
   897e0:	d8c00884 	addi	r3,sp,34
   897e4:	28800003 	ldbu	r2,0(r5)
   897e8:	29400044 	addi	r5,r5,1
   897ec:	18800005 	stb	r2,0(r3)
   897f0:	18c00044 	addi	r3,r3,1
   897f4:	293ffb36 	bltu	r5,r4,897e4 <___vfprintf_internal_r+0x1b8c>
   897f8:	1987c83a 	sub	r3,r3,r6
   897fc:	00800044 	movi	r2,1
   89800:	d8c14815 	stw	r3,1312(sp)
   89804:	90cf883a 	add	r7,r18,r3
   89808:	1480960e 	bge	r2,r18,89a64 <___vfprintf_internal_r+0x1e0c>
   8980c:	39c00044 	addi	r7,r7,1
   89810:	d9c14515 	stw	r7,1300(sp)
   89814:	38003416 	blt	r7,zero,898e8 <___vfprintf_internal_r+0x1c90>
   89818:	e0803fcc 	andi	r2,fp,255
   8981c:	1080201c 	xori	r2,r2,128
   89820:	10bfe004 	addi	r2,r2,-128
   89824:	10004e26 	beq	r2,zero,89960 <___vfprintf_internal_r+0x1d08>
   89828:	00800b44 	movi	r2,45
   8982c:	dc814715 	stw	r18,1308(sp)
   89830:	d8014615 	stw	zero,1304(sp)
   89834:	d8800405 	stb	r2,16(sp)
   89838:	003bab06 	br	886e8 <___vfprintf_internal_r+0xa90>
   8983c:	00800b44 	movi	r2,45
   89840:	d8800405 	stb	r2,16(sp)
   89844:	003d2d06 	br	88cfc <___vfprintf_internal_r+0x10a4>
   89848:	d9014f17 	ldw	r4,1340(sp)
   8984c:	b00b883a 	mov	r5,r22
   89850:	d9800c04 	addi	r6,sp,48
   89854:	0087c000 	call	87c00 <__sprint_r>
   89858:	103ab71e 	bne	r2,zero,88338 <___vfprintf_internal_r+0x6e0>
   8985c:	003ab506 	br	88334 <___vfprintf_internal_r+0x6dc>
   89860:	38800017 	ldw	r2,0(r7)
   89864:	39c00104 	addi	r7,r7,4
   89868:	d9c14015 	stw	r7,1280(sp)
   8986c:	d9414b17 	ldw	r5,1324(sp)
   89870:	d9c14017 	ldw	r7,1280(sp)
   89874:	11400015 	stw	r5,0(r2)
   89878:	00395306 	br	87dc8 <___vfprintf_internal_r+0x170>
   8987c:	980f883a 	mov	r7,r19
   89880:	dcc14515 	stw	r19,1300(sp)
   89884:	d8014615 	stw	zero,1304(sp)
   89888:	003b9506 	br	886e0 <___vfprintf_internal_r+0xa88>
   8988c:	0027883a 	mov	r19,zero
   89890:	00397206 	br	87e5c <___vfprintf_internal_r+0x204>
   89894:	00c002b4 	movhi	r3,10
   89898:	18ff6404 	addi	r3,r3,-624
   8989c:	100f883a 	mov	r7,r2
   898a0:	d8814515 	stw	r2,1300(sp)
   898a4:	d8c14115 	stw	r3,1284(sp)
   898a8:	0039da06 	br	88014 <___vfprintf_internal_r+0x3bc>
   898ac:	008002b4 	movhi	r2,10
   898b0:	10bf6304 	addi	r2,r2,-628
   898b4:	d8814115 	stw	r2,1284(sp)
   898b8:	003d1606 	br	88d14 <___vfprintf_internal_r+0x10bc>
   898bc:	d9414d17 	ldw	r5,1332(sp)
   898c0:	00801984 	movi	r2,102
   898c4:	28804926 	beq	r5,r2,899ec <___vfprintf_internal_r+0x1d94>
   898c8:	200f883a 	mov	r7,r4
   898cc:	24805716 	blt	r4,r18,89a2c <___vfprintf_internal_r+0x1dd4>
   898d0:	d9414c17 	ldw	r5,1328(sp)
   898d4:	2880004c 	andi	r2,r5,1
   898d8:	10000126 	beq	r2,zero,898e0 <___vfprintf_internal_r+0x1c88>
   898dc:	21c00044 	addi	r7,r4,1
   898e0:	d9c14515 	stw	r7,1300(sp)
   898e4:	383fcc0e 	bge	r7,zero,89818 <___vfprintf_internal_r+0x1bc0>
   898e8:	d8014515 	stw	zero,1300(sp)
   898ec:	003fca06 	br	89818 <___vfprintf_internal_r+0x1bc0>
   898f0:	d9000517 	ldw	r4,20(sp)
   898f4:	00bfff04 	movi	r2,-4
   898f8:	1100480e 	bge	r2,r4,89a1c <___vfprintf_internal_r+0x1dc4>
   898fc:	99004716 	blt	r19,r4,89a1c <___vfprintf_internal_r+0x1dc4>
   89900:	d8c14d15 	stw	r3,1332(sp)
   89904:	003ff006 	br	898c8 <___vfprintf_internal_r+0x1c70>
   89908:	d8800717 	ldw	r2,28(sp)
   8990c:	14bf8b2e 	bgeu	r2,r18,8973c <___vfprintf_internal_r+0x1ae4>
   89910:	9007883a 	mov	r3,r18
   89914:	01000c04 	movi	r4,48
   89918:	11000005 	stb	r4,0(r2)
   8991c:	10800044 	addi	r2,r2,1
   89920:	d8800715 	stw	r2,28(sp)
   89924:	18bffc1e 	bne	r3,r2,89918 <___vfprintf_internal_r+0x1cc0>
   89928:	003f8406 	br	8973c <___vfprintf_internal_r+0x1ae4>
   8992c:	d8814117 	ldw	r2,1284(sp)
   89930:	10c00007 	ldb	r3,0(r2)
   89934:	00800c04 	movi	r2,48
   89938:	18805b26 	beq	r3,r2,89aa8 <___vfprintf_internal_r+0x1e50>
   8993c:	d9000517 	ldw	r4,20(sp)
   89940:	9125883a 	add	r18,r18,r4
   89944:	003f7506 	br	8971c <___vfprintf_internal_r+0x1ac4>
   89948:	d9014c17 	ldw	r4,1328(sp)
   8994c:	2080004c 	andi	r2,r4,1
   89950:	1005003a 	cmpeq	r2,r2,zero
   89954:	103f6a26 	beq	r2,zero,89700 <___vfprintf_internal_r+0x1aa8>
   89958:	d8800717 	ldw	r2,28(sp)
   8995c:	003f7706 	br	8973c <___vfprintf_internal_r+0x1ae4>
   89960:	d9c14515 	stw	r7,1300(sp)
   89964:	38004d16 	blt	r7,zero,89a9c <___vfprintf_internal_r+0x1e44>
   89968:	dc814715 	stw	r18,1308(sp)
   8996c:	d8014615 	stw	zero,1304(sp)
   89970:	003b5b06 	br	886e0 <___vfprintf_internal_r+0xa88>
   89974:	d9014f17 	ldw	r4,1340(sp)
   89978:	d8800504 	addi	r2,sp,20
   8997c:	d8800115 	stw	r2,4(sp)
   89980:	d8c00604 	addi	r3,sp,24
   89984:	d8800704 	addi	r2,sp,28
   89988:	800b883a 	mov	r5,r16
   8998c:	880d883a 	mov	r6,r17
   89990:	01c000c4 	movi	r7,3
   89994:	d8c00215 	stw	r3,8(sp)
   89998:	d8800315 	stw	r2,12(sp)
   8999c:	dcc00015 	stw	r19,0(sp)
   899a0:	9829883a 	mov	r20,r19
   899a4:	0089ec00 	call	89ec0 <_dtoa_r>
   899a8:	d8814115 	stw	r2,1284(sp)
   899ac:	003f5106 	br	896f4 <___vfprintf_internal_r+0x1a9c>
   899b0:	d8c14217 	ldw	r3,1288(sp)
   899b4:	d9014317 	ldw	r4,1292(sp)
   899b8:	07000b44 	movi	fp,45
   899bc:	1821883a 	mov	r16,r3
   899c0:	2460003c 	xorhi	r17,r4,32768
   899c4:	003f3106 	br	8968c <___vfprintf_internal_r+0x1a34>
   899c8:	9d000044 	addi	r20,r19,1
   899cc:	003f3906 	br	896b4 <___vfprintf_internal_r+0x1a5c>
   899d0:	983f251e 	bne	r19,zero,89668 <___vfprintf_internal_r+0x1a10>
   899d4:	04c00044 	movi	r19,1
   899d8:	003f2306 	br	89668 <___vfprintf_internal_r+0x1a10>
   899dc:	04c00184 	movi	r19,6
   899e0:	003f2106 	br	89668 <___vfprintf_internal_r+0x1a10>
   899e4:	d8014515 	stw	zero,1300(sp)
   899e8:	003eee06 	br	895a4 <___vfprintf_internal_r+0x194c>
   899ec:	200f883a 	mov	r7,r4
   899f0:	0100370e 	bge	zero,r4,89ad0 <___vfprintf_internal_r+0x1e78>
   899f4:	9800031e 	bne	r19,zero,89a04 <___vfprintf_internal_r+0x1dac>
   899f8:	d9814c17 	ldw	r6,1328(sp)
   899fc:	3080004c 	andi	r2,r6,1
   89a00:	103fb726 	beq	r2,zero,898e0 <___vfprintf_internal_r+0x1c88>
   89a04:	20800044 	addi	r2,r4,1
   89a08:	98a7883a 	add	r19,r19,r2
   89a0c:	dcc14515 	stw	r19,1300(sp)
   89a10:	980f883a 	mov	r7,r19
   89a14:	983f800e 	bge	r19,zero,89818 <___vfprintf_internal_r+0x1bc0>
   89a18:	003fb306 	br	898e8 <___vfprintf_internal_r+0x1c90>
   89a1c:	d9814d17 	ldw	r6,1332(sp)
   89a20:	31bfff84 	addi	r6,r6,-2
   89a24:	d9814d15 	stw	r6,1332(sp)
   89a28:	003f4c06 	br	8975c <___vfprintf_internal_r+0x1b04>
   89a2c:	0100180e 	bge	zero,r4,89a90 <___vfprintf_internal_r+0x1e38>
   89a30:	00800044 	movi	r2,1
   89a34:	1485883a 	add	r2,r2,r18
   89a38:	d8814515 	stw	r2,1300(sp)
   89a3c:	100f883a 	mov	r7,r2
   89a40:	103f750e 	bge	r2,zero,89818 <___vfprintf_internal_r+0x1bc0>
   89a44:	003fa806 	br	898e8 <___vfprintf_internal_r+0x1c90>
   89a48:	80c00c04 	addi	r3,r16,48
   89a4c:	00800c04 	movi	r2,48
   89a50:	d8c008c5 	stb	r3,35(sp)
   89a54:	d9800804 	addi	r6,sp,32
   89a58:	d8c00904 	addi	r3,sp,36
   89a5c:	d8800885 	stb	r2,34(sp)
   89a60:	003f6506 	br	897f8 <___vfprintf_internal_r+0x1ba0>
   89a64:	d9014c17 	ldw	r4,1328(sp)
   89a68:	2084703a 	and	r2,r4,r2
   89a6c:	103f9c26 	beq	r2,zero,898e0 <___vfprintf_internal_r+0x1c88>
   89a70:	003f6606 	br	8980c <___vfprintf_internal_r+0x1bb4>
   89a74:	d9800804 	addi	r6,sp,32
   89a78:	d8c00884 	addi	r3,sp,34
   89a7c:	003f5e06 	br	897f8 <___vfprintf_internal_r+0x1ba0>
   89a80:	00800b44 	movi	r2,45
   89a84:	0121c83a 	sub	r16,zero,r4
   89a88:	d8800845 	stb	r2,33(sp)
   89a8c:	003f3d06 	br	89784 <___vfprintf_internal_r+0x1b2c>
   89a90:	00800084 	movi	r2,2
   89a94:	1105c83a 	sub	r2,r2,r4
   89a98:	003fe606 	br	89a34 <___vfprintf_internal_r+0x1ddc>
   89a9c:	d8014515 	stw	zero,1300(sp)
   89aa0:	dc814715 	stw	r18,1308(sp)
   89aa4:	003fb106 	br	8996c <___vfprintf_internal_r+0x1d14>
   89aa8:	000d883a 	mov	r6,zero
   89aac:	000f883a 	mov	r7,zero
   89ab0:	8009883a 	mov	r4,r16
   89ab4:	880b883a 	mov	r5,r17
   89ab8:	0090a440 	call	90a44 <__nedf2>
   89abc:	103f9f26 	beq	r2,zero,8993c <___vfprintf_internal_r+0x1ce4>
   89ac0:	00800044 	movi	r2,1
   89ac4:	1509c83a 	sub	r4,r2,r20
   89ac8:	d9000515 	stw	r4,20(sp)
   89acc:	003f9b06 	br	8993c <___vfprintf_internal_r+0x1ce4>
   89ad0:	98000d1e 	bne	r19,zero,89b08 <___vfprintf_internal_r+0x1eb0>
   89ad4:	d8c14c17 	ldw	r3,1328(sp)
   89ad8:	1880004c 	andi	r2,r3,1
   89adc:	10000a1e 	bne	r2,zero,89b08 <___vfprintf_internal_r+0x1eb0>
   89ae0:	01000044 	movi	r4,1
   89ae4:	200f883a 	mov	r7,r4
   89ae8:	d9014515 	stw	r4,1300(sp)
   89aec:	003f4a06 	br	89818 <___vfprintf_internal_r+0x1bc0>
   89af0:	3cc00017 	ldw	r19,0(r7)
   89af4:	39c00104 	addi	r7,r7,4
   89af8:	983d0e0e 	bge	r19,zero,88f34 <___vfprintf_internal_r+0x12dc>
   89afc:	b8c00007 	ldb	r3,0(r23)
   89b00:	04ffffc4 	movi	r19,-1
   89b04:	0038d306 	br	87e54 <___vfprintf_internal_r+0x1fc>
   89b08:	9cc00084 	addi	r19,r19,2
   89b0c:	dcc14515 	stw	r19,1300(sp)
   89b10:	980f883a 	mov	r7,r19
   89b14:	983f400e 	bge	r19,zero,89818 <___vfprintf_internal_r+0x1bc0>
   89b18:	003f7306 	br	898e8 <___vfprintf_internal_r+0x1c90>

00089b1c <__vfprintf_internal>:
   89b1c:	008002b4 	movhi	r2,10
   89b20:	10871e04 	addi	r2,r2,7288
   89b24:	2013883a 	mov	r9,r4
   89b28:	11000017 	ldw	r4,0(r2)
   89b2c:	2805883a 	mov	r2,r5
   89b30:	300f883a 	mov	r7,r6
   89b34:	480b883a 	mov	r5,r9
   89b38:	100d883a 	mov	r6,r2
   89b3c:	0087c581 	jmpi	87c58 <___vfprintf_internal_r>

00089b40 <__swsetup_r>:
   89b40:	008002b4 	movhi	r2,10
   89b44:	10871e04 	addi	r2,r2,7288
   89b48:	10c00017 	ldw	r3,0(r2)
   89b4c:	defffd04 	addi	sp,sp,-12
   89b50:	dc400115 	stw	r17,4(sp)
   89b54:	dc000015 	stw	r16,0(sp)
   89b58:	dfc00215 	stw	ra,8(sp)
   89b5c:	2023883a 	mov	r17,r4
   89b60:	2821883a 	mov	r16,r5
   89b64:	18000226 	beq	r3,zero,89b70 <__swsetup_r+0x30>
   89b68:	18800e17 	ldw	r2,56(r3)
   89b6c:	10001f26 	beq	r2,zero,89bec <__swsetup_r+0xac>
   89b70:	8100030b 	ldhu	r4,12(r16)
   89b74:	2080020c 	andi	r2,r4,8
   89b78:	10002826 	beq	r2,zero,89c1c <__swsetup_r+0xdc>
   89b7c:	81400417 	ldw	r5,16(r16)
   89b80:	28001d26 	beq	r5,zero,89bf8 <__swsetup_r+0xb8>
   89b84:	2080004c 	andi	r2,r4,1
   89b88:	1005003a 	cmpeq	r2,r2,zero
   89b8c:	10000b26 	beq	r2,zero,89bbc <__swsetup_r+0x7c>
   89b90:	2080008c 	andi	r2,r4,2
   89b94:	10001226 	beq	r2,zero,89be0 <__swsetup_r+0xa0>
   89b98:	0005883a 	mov	r2,zero
   89b9c:	80800215 	stw	r2,8(r16)
   89ba0:	28000b26 	beq	r5,zero,89bd0 <__swsetup_r+0x90>
   89ba4:	0005883a 	mov	r2,zero
   89ba8:	dfc00217 	ldw	ra,8(sp)
   89bac:	dc400117 	ldw	r17,4(sp)
   89bb0:	dc000017 	ldw	r16,0(sp)
   89bb4:	dec00304 	addi	sp,sp,12
   89bb8:	f800283a 	ret
   89bbc:	80800517 	ldw	r2,20(r16)
   89bc0:	80000215 	stw	zero,8(r16)
   89bc4:	0085c83a 	sub	r2,zero,r2
   89bc8:	80800615 	stw	r2,24(r16)
   89bcc:	283ff51e 	bne	r5,zero,89ba4 <__swsetup_r+0x64>
   89bd0:	2080200c 	andi	r2,r4,128
   89bd4:	103ff326 	beq	r2,zero,89ba4 <__swsetup_r+0x64>
   89bd8:	00bfffc4 	movi	r2,-1
   89bdc:	003ff206 	br	89ba8 <__swsetup_r+0x68>
   89be0:	80800517 	ldw	r2,20(r16)
   89be4:	80800215 	stw	r2,8(r16)
   89be8:	003fed06 	br	89ba0 <__swsetup_r+0x60>
   89bec:	1809883a 	mov	r4,r3
   89bf0:	008b70c0 	call	8b70c <__sinit>
   89bf4:	003fde06 	br	89b70 <__swsetup_r+0x30>
   89bf8:	20c0a00c 	andi	r3,r4,640
   89bfc:	00808004 	movi	r2,512
   89c00:	18bfe026 	beq	r3,r2,89b84 <__swsetup_r+0x44>
   89c04:	8809883a 	mov	r4,r17
   89c08:	800b883a 	mov	r5,r16
   89c0c:	008c4b80 	call	8c4b8 <__smakebuf_r>
   89c10:	8100030b 	ldhu	r4,12(r16)
   89c14:	81400417 	ldw	r5,16(r16)
   89c18:	003fda06 	br	89b84 <__swsetup_r+0x44>
   89c1c:	2080040c 	andi	r2,r4,16
   89c20:	103fed26 	beq	r2,zero,89bd8 <__swsetup_r+0x98>
   89c24:	2080010c 	andi	r2,r4,4
   89c28:	10001226 	beq	r2,zero,89c74 <__swsetup_r+0x134>
   89c2c:	81400c17 	ldw	r5,48(r16)
   89c30:	28000526 	beq	r5,zero,89c48 <__swsetup_r+0x108>
   89c34:	80801004 	addi	r2,r16,64
   89c38:	28800226 	beq	r5,r2,89c44 <__swsetup_r+0x104>
   89c3c:	8809883a 	mov	r4,r17
   89c40:	008bac40 	call	8bac4 <_free_r>
   89c44:	80000c15 	stw	zero,48(r16)
   89c48:	8080030b 	ldhu	r2,12(r16)
   89c4c:	81400417 	ldw	r5,16(r16)
   89c50:	80000115 	stw	zero,4(r16)
   89c54:	10bff6cc 	andi	r2,r2,65499
   89c58:	8080030d 	sth	r2,12(r16)
   89c5c:	81400015 	stw	r5,0(r16)
   89c60:	8080030b 	ldhu	r2,12(r16)
   89c64:	10800214 	ori	r2,r2,8
   89c68:	113fffcc 	andi	r4,r2,65535
   89c6c:	8080030d 	sth	r2,12(r16)
   89c70:	003fc306 	br	89b80 <__swsetup_r+0x40>
   89c74:	81400417 	ldw	r5,16(r16)
   89c78:	003ff906 	br	89c60 <__swsetup_r+0x120>

00089c7c <quorem>:
   89c7c:	28c00417 	ldw	r3,16(r5)
   89c80:	20800417 	ldw	r2,16(r4)
   89c84:	defff104 	addi	sp,sp,-60
   89c88:	dfc00e15 	stw	ra,56(sp)
   89c8c:	df000d15 	stw	fp,52(sp)
   89c90:	ddc00c15 	stw	r23,48(sp)
   89c94:	dd800b15 	stw	r22,44(sp)
   89c98:	dd400a15 	stw	r21,40(sp)
   89c9c:	dd000915 	stw	r20,36(sp)
   89ca0:	dcc00815 	stw	r19,32(sp)
   89ca4:	dc800715 	stw	r18,28(sp)
   89ca8:	dc400615 	stw	r17,24(sp)
   89cac:	dc000515 	stw	r16,20(sp)
   89cb0:	d9000315 	stw	r4,12(sp)
   89cb4:	d9400415 	stw	r5,16(sp)
   89cb8:	10c07f16 	blt	r2,r3,89eb8 <quorem+0x23c>
   89cbc:	1d3fffc4 	addi	r20,r3,-1
   89cc0:	d8c00417 	ldw	r3,16(sp)
   89cc4:	d9000317 	ldw	r4,12(sp)
   89cc8:	a505883a 	add	r2,r20,r20
   89ccc:	1085883a 	add	r2,r2,r2
   89cd0:	1cc00504 	addi	r19,r3,20
   89cd4:	25c00504 	addi	r23,r4,20
   89cd8:	98ad883a 	add	r22,r19,r2
   89cdc:	15c7883a 	add	r3,r2,r23
   89ce0:	b1400017 	ldw	r5,0(r22)
   89ce4:	19000017 	ldw	r4,0(r3)
   89ce8:	d8c00015 	stw	r3,0(sp)
   89cec:	29400044 	addi	r5,r5,1
   89cf0:	d9000215 	stw	r4,8(sp)
   89cf4:	00877d40 	call	877d4 <__udivsi3>
   89cf8:	1039883a 	mov	fp,r2
   89cfc:	10003d1e 	bne	r2,zero,89df4 <quorem+0x178>
   89d00:	d9400417 	ldw	r5,16(sp)
   89d04:	d9000317 	ldw	r4,12(sp)
   89d08:	008d1e40 	call	8d1e4 <__mcmp>
   89d0c:	10002c16 	blt	r2,zero,89dc0 <quorem+0x144>
   89d10:	e7000044 	addi	fp,fp,1
   89d14:	b80f883a 	mov	r7,r23
   89d18:	0011883a 	mov	r8,zero
   89d1c:	0009883a 	mov	r4,zero
   89d20:	99400017 	ldw	r5,0(r19)
   89d24:	38c00017 	ldw	r3,0(r7)
   89d28:	9cc00104 	addi	r19,r19,4
   89d2c:	28bfffcc 	andi	r2,r5,65535
   89d30:	2085883a 	add	r2,r4,r2
   89d34:	11bfffcc 	andi	r6,r2,65535
   89d38:	193fffcc 	andi	r4,r3,65535
   89d3c:	1004d43a 	srli	r2,r2,16
   89d40:	280ad43a 	srli	r5,r5,16
   89d44:	2189c83a 	sub	r4,r4,r6
   89d48:	2209883a 	add	r4,r4,r8
   89d4c:	1806d43a 	srli	r3,r3,16
   89d50:	288b883a 	add	r5,r5,r2
   89d54:	200dd43a 	srai	r6,r4,16
   89d58:	28bfffcc 	andi	r2,r5,65535
   89d5c:	1887c83a 	sub	r3,r3,r2
   89d60:	1987883a 	add	r3,r3,r6
   89d64:	3900000d 	sth	r4,0(r7)
   89d68:	38c0008d 	sth	r3,2(r7)
   89d6c:	2808d43a 	srli	r4,r5,16
   89d70:	39c00104 	addi	r7,r7,4
   89d74:	1811d43a 	srai	r8,r3,16
   89d78:	b4ffe92e 	bgeu	r22,r19,89d20 <quorem+0xa4>
   89d7c:	a505883a 	add	r2,r20,r20
   89d80:	1085883a 	add	r2,r2,r2
   89d84:	b885883a 	add	r2,r23,r2
   89d88:	10c00017 	ldw	r3,0(r2)
   89d8c:	18000c1e 	bne	r3,zero,89dc0 <quorem+0x144>
   89d90:	113fff04 	addi	r4,r2,-4
   89d94:	b900082e 	bgeu	r23,r4,89db8 <quorem+0x13c>
   89d98:	10bfff17 	ldw	r2,-4(r2)
   89d9c:	10000326 	beq	r2,zero,89dac <quorem+0x130>
   89da0:	00000506 	br	89db8 <quorem+0x13c>
   89da4:	20800017 	ldw	r2,0(r4)
   89da8:	1000031e 	bne	r2,zero,89db8 <quorem+0x13c>
   89dac:	213fff04 	addi	r4,r4,-4
   89db0:	a53fffc4 	addi	r20,r20,-1
   89db4:	b93ffb36 	bltu	r23,r4,89da4 <quorem+0x128>
   89db8:	d9000317 	ldw	r4,12(sp)
   89dbc:	25000415 	stw	r20,16(r4)
   89dc0:	e005883a 	mov	r2,fp
   89dc4:	dfc00e17 	ldw	ra,56(sp)
   89dc8:	df000d17 	ldw	fp,52(sp)
   89dcc:	ddc00c17 	ldw	r23,48(sp)
   89dd0:	dd800b17 	ldw	r22,44(sp)
   89dd4:	dd400a17 	ldw	r21,40(sp)
   89dd8:	dd000917 	ldw	r20,36(sp)
   89ddc:	dcc00817 	ldw	r19,32(sp)
   89de0:	dc800717 	ldw	r18,28(sp)
   89de4:	dc400617 	ldw	r17,24(sp)
   89de8:	dc000517 	ldw	r16,20(sp)
   89dec:	dec00f04 	addi	sp,sp,60
   89df0:	f800283a 	ret
   89df4:	b823883a 	mov	r17,r23
   89df8:	9825883a 	mov	r18,r19
   89dfc:	d8000115 	stw	zero,4(sp)
   89e00:	002b883a 	mov	r21,zero
   89e04:	94000017 	ldw	r16,0(r18)
   89e08:	e009883a 	mov	r4,fp
   89e0c:	94800104 	addi	r18,r18,4
   89e10:	817fffcc 	andi	r5,r16,65535
   89e14:	00877e40 	call	877e4 <__mulsi3>
   89e18:	800ad43a 	srli	r5,r16,16
   89e1c:	e009883a 	mov	r4,fp
   89e20:	a8a1883a 	add	r16,r21,r2
   89e24:	00877e40 	call	877e4 <__mulsi3>
   89e28:	89000017 	ldw	r4,0(r17)
   89e2c:	80ffffcc 	andi	r3,r16,65535
   89e30:	8020d43a 	srli	r16,r16,16
   89e34:	217fffcc 	andi	r5,r4,65535
   89e38:	28cbc83a 	sub	r5,r5,r3
   89e3c:	d8c00117 	ldw	r3,4(sp)
   89e40:	2008d43a 	srli	r4,r4,16
   89e44:	1405883a 	add	r2,r2,r16
   89e48:	28cb883a 	add	r5,r5,r3
   89e4c:	280dd43a 	srai	r6,r5,16
   89e50:	10ffffcc 	andi	r3,r2,65535
   89e54:	20c9c83a 	sub	r4,r4,r3
   89e58:	2189883a 	add	r4,r4,r6
   89e5c:	8900008d 	sth	r4,2(r17)
   89e60:	2009d43a 	srai	r4,r4,16
   89e64:	8940000d 	sth	r5,0(r17)
   89e68:	102ad43a 	srli	r21,r2,16
   89e6c:	8c400104 	addi	r17,r17,4
   89e70:	d9000115 	stw	r4,4(sp)
   89e74:	b4bfe32e 	bgeu	r22,r18,89e04 <quorem+0x188>
   89e78:	d9000217 	ldw	r4,8(sp)
   89e7c:	203fa01e 	bne	r4,zero,89d00 <quorem+0x84>
   89e80:	d8800017 	ldw	r2,0(sp)
   89e84:	10ffff04 	addi	r3,r2,-4
   89e88:	b8c0082e 	bgeu	r23,r3,89eac <quorem+0x230>
   89e8c:	10bfff17 	ldw	r2,-4(r2)
   89e90:	10000326 	beq	r2,zero,89ea0 <quorem+0x224>
   89e94:	00000506 	br	89eac <quorem+0x230>
   89e98:	18800017 	ldw	r2,0(r3)
   89e9c:	1000031e 	bne	r2,zero,89eac <quorem+0x230>
   89ea0:	18ffff04 	addi	r3,r3,-4
   89ea4:	a53fffc4 	addi	r20,r20,-1
   89ea8:	b8fffb36 	bltu	r23,r3,89e98 <quorem+0x21c>
   89eac:	d8c00317 	ldw	r3,12(sp)
   89eb0:	1d000415 	stw	r20,16(r3)
   89eb4:	003f9206 	br	89d00 <quorem+0x84>
   89eb8:	0005883a 	mov	r2,zero
   89ebc:	003fc106 	br	89dc4 <quorem+0x148>

00089ec0 <_dtoa_r>:
   89ec0:	22001017 	ldw	r8,64(r4)
   89ec4:	deffda04 	addi	sp,sp,-152
   89ec8:	dd402115 	stw	r21,132(sp)
   89ecc:	dd002015 	stw	r20,128(sp)
   89ed0:	dc801e15 	stw	r18,120(sp)
   89ed4:	dc401d15 	stw	r17,116(sp)
   89ed8:	dfc02515 	stw	ra,148(sp)
   89edc:	df002415 	stw	fp,144(sp)
   89ee0:	ddc02315 	stw	r23,140(sp)
   89ee4:	dd802215 	stw	r22,136(sp)
   89ee8:	dcc01f15 	stw	r19,124(sp)
   89eec:	dc001c15 	stw	r16,112(sp)
   89ef0:	d9001615 	stw	r4,88(sp)
   89ef4:	3023883a 	mov	r17,r6
   89ef8:	2829883a 	mov	r20,r5
   89efc:	d9c01715 	stw	r7,92(sp)
   89f00:	dc802817 	ldw	r18,160(sp)
   89f04:	302b883a 	mov	r21,r6
   89f08:	40000a26 	beq	r8,zero,89f34 <_dtoa_r+0x74>
   89f0c:	20801117 	ldw	r2,68(r4)
   89f10:	400b883a 	mov	r5,r8
   89f14:	40800115 	stw	r2,4(r8)
   89f18:	20c01117 	ldw	r3,68(r4)
   89f1c:	00800044 	movi	r2,1
   89f20:	10c4983a 	sll	r2,r2,r3
   89f24:	40800215 	stw	r2,8(r8)
   89f28:	008d0880 	call	8d088 <_Bfree>
   89f2c:	d8c01617 	ldw	r3,88(sp)
   89f30:	18001015 	stw	zero,64(r3)
   89f34:	8800a316 	blt	r17,zero,8a1c4 <_dtoa_r+0x304>
   89f38:	90000015 	stw	zero,0(r18)
   89f3c:	a8dffc2c 	andhi	r3,r21,32752
   89f40:	009ffc34 	movhi	r2,32752
   89f44:	18809126 	beq	r3,r2,8a18c <_dtoa_r+0x2cc>
   89f48:	000d883a 	mov	r6,zero
   89f4c:	000f883a 	mov	r7,zero
   89f50:	a009883a 	mov	r4,r20
   89f54:	a80b883a 	mov	r5,r21
   89f58:	dd001215 	stw	r20,72(sp)
   89f5c:	dd401315 	stw	r21,76(sp)
   89f60:	0090a440 	call	90a44 <__nedf2>
   89f64:	1000171e 	bne	r2,zero,89fc4 <_dtoa_r+0x104>
   89f68:	d9802717 	ldw	r6,156(sp)
   89f6c:	00800044 	movi	r2,1
   89f70:	30800015 	stw	r2,0(r6)
   89f74:	d8802917 	ldw	r2,164(sp)
   89f78:	10029b26 	beq	r2,zero,8a9e8 <_dtoa_r+0xb28>
   89f7c:	d9002917 	ldw	r4,164(sp)
   89f80:	008002b4 	movhi	r2,10
   89f84:	10bf7244 	addi	r2,r2,-567
   89f88:	10ffffc4 	addi	r3,r2,-1
   89f8c:	20800015 	stw	r2,0(r4)
   89f90:	1805883a 	mov	r2,r3
   89f94:	dfc02517 	ldw	ra,148(sp)
   89f98:	df002417 	ldw	fp,144(sp)
   89f9c:	ddc02317 	ldw	r23,140(sp)
   89fa0:	dd802217 	ldw	r22,136(sp)
   89fa4:	dd402117 	ldw	r21,132(sp)
   89fa8:	dd002017 	ldw	r20,128(sp)
   89fac:	dcc01f17 	ldw	r19,124(sp)
   89fb0:	dc801e17 	ldw	r18,120(sp)
   89fb4:	dc401d17 	ldw	r17,116(sp)
   89fb8:	dc001c17 	ldw	r16,112(sp)
   89fbc:	dec02604 	addi	sp,sp,152
   89fc0:	f800283a 	ret
   89fc4:	d9001617 	ldw	r4,88(sp)
   89fc8:	d9401217 	ldw	r5,72(sp)
   89fcc:	d8800104 	addi	r2,sp,4
   89fd0:	a80d883a 	mov	r6,r21
   89fd4:	d9c00204 	addi	r7,sp,8
   89fd8:	d8800015 	stw	r2,0(sp)
   89fdc:	008d6c40 	call	8d6c4 <__d2b>
   89fe0:	d8800715 	stw	r2,28(sp)
   89fe4:	a804d53a 	srli	r2,r21,20
   89fe8:	1101ffcc 	andi	r4,r2,2047
   89fec:	20008626 	beq	r4,zero,8a208 <_dtoa_r+0x348>
   89ff0:	d8c01217 	ldw	r3,72(sp)
   89ff4:	00800434 	movhi	r2,16
   89ff8:	10bfffc4 	addi	r2,r2,-1
   89ffc:	ddc00117 	ldw	r23,4(sp)
   8a000:	a884703a 	and	r2,r21,r2
   8a004:	1811883a 	mov	r8,r3
   8a008:	124ffc34 	orhi	r9,r2,16368
   8a00c:	25bf0044 	addi	r22,r4,-1023
   8a010:	d8000815 	stw	zero,32(sp)
   8a014:	0005883a 	mov	r2,zero
   8a018:	00cffe34 	movhi	r3,16376
   8a01c:	480b883a 	mov	r5,r9
   8a020:	4009883a 	mov	r4,r8
   8a024:	180f883a 	mov	r7,r3
   8a028:	100d883a 	mov	r6,r2
   8a02c:	00902ac0 	call	902ac <__subdf3>
   8a030:	0218dbf4 	movhi	r8,25455
   8a034:	4210d844 	addi	r8,r8,17249
   8a038:	024ff4f4 	movhi	r9,16339
   8a03c:	4a61e9c4 	addi	r9,r9,-30809
   8a040:	480f883a 	mov	r7,r9
   8a044:	400d883a 	mov	r6,r8
   8a048:	180b883a 	mov	r5,r3
   8a04c:	1009883a 	mov	r4,r2
   8a050:	00903a00 	call	903a0 <__muldf3>
   8a054:	0222d874 	movhi	r8,35681
   8a058:	42322cc4 	addi	r8,r8,-14157
   8a05c:	024ff1f4 	movhi	r9,16327
   8a060:	4a628a04 	addi	r9,r9,-30168
   8a064:	480f883a 	mov	r7,r9
   8a068:	400d883a 	mov	r6,r8
   8a06c:	180b883a 	mov	r5,r3
   8a070:	1009883a 	mov	r4,r2
   8a074:	009032c0 	call	9032c <__adddf3>
   8a078:	b009883a 	mov	r4,r22
   8a07c:	1021883a 	mov	r16,r2
   8a080:	1823883a 	mov	r17,r3
   8a084:	0090c640 	call	90c64 <__floatsidf>
   8a088:	021427f4 	movhi	r8,20639
   8a08c:	421e7ec4 	addi	r8,r8,31227
   8a090:	024ff4f4 	movhi	r9,16339
   8a094:	4a5104c4 	addi	r9,r9,17427
   8a098:	480f883a 	mov	r7,r9
   8a09c:	400d883a 	mov	r6,r8
   8a0a0:	180b883a 	mov	r5,r3
   8a0a4:	1009883a 	mov	r4,r2
   8a0a8:	00903a00 	call	903a0 <__muldf3>
   8a0ac:	180f883a 	mov	r7,r3
   8a0b0:	880b883a 	mov	r5,r17
   8a0b4:	100d883a 	mov	r6,r2
   8a0b8:	8009883a 	mov	r4,r16
   8a0bc:	009032c0 	call	9032c <__adddf3>
   8a0c0:	1009883a 	mov	r4,r2
   8a0c4:	180b883a 	mov	r5,r3
   8a0c8:	1021883a 	mov	r16,r2
   8a0cc:	1823883a 	mov	r17,r3
   8a0d0:	0090d5c0 	call	90d5c <__fixdfsi>
   8a0d4:	000d883a 	mov	r6,zero
   8a0d8:	000f883a 	mov	r7,zero
   8a0dc:	8009883a 	mov	r4,r16
   8a0e0:	880b883a 	mov	r5,r17
   8a0e4:	d8800d15 	stw	r2,52(sp)
   8a0e8:	0090bdc0 	call	90bdc <__ltdf2>
   8a0ec:	10031716 	blt	r2,zero,8ad4c <_dtoa_r+0xe8c>
   8a0f0:	d8c00d17 	ldw	r3,52(sp)
   8a0f4:	00800584 	movi	r2,22
   8a0f8:	10c1482e 	bgeu	r2,r3,8a61c <_dtoa_r+0x75c>
   8a0fc:	01000044 	movi	r4,1
   8a100:	d9000c15 	stw	r4,48(sp)
   8a104:	bd85c83a 	sub	r2,r23,r22
   8a108:	11bfffc4 	addi	r6,r2,-1
   8a10c:	30030b16 	blt	r6,zero,8ad3c <_dtoa_r+0xe7c>
   8a110:	d9800a15 	stw	r6,40(sp)
   8a114:	d8001115 	stw	zero,68(sp)
   8a118:	d8c00d17 	ldw	r3,52(sp)
   8a11c:	1802ff16 	blt	r3,zero,8ad1c <_dtoa_r+0xe5c>
   8a120:	d9000a17 	ldw	r4,40(sp)
   8a124:	d8c00915 	stw	r3,36(sp)
   8a128:	d8001015 	stw	zero,64(sp)
   8a12c:	20c9883a 	add	r4,r4,r3
   8a130:	d9000a15 	stw	r4,40(sp)
   8a134:	d9001717 	ldw	r4,92(sp)
   8a138:	00800244 	movi	r2,9
   8a13c:	11004636 	bltu	r2,r4,8a258 <_dtoa_r+0x398>
   8a140:	00800144 	movi	r2,5
   8a144:	11020416 	blt	r2,r4,8a958 <_dtoa_r+0xa98>
   8a148:	04400044 	movi	r17,1
   8a14c:	d8c01717 	ldw	r3,92(sp)
   8a150:	00800144 	movi	r2,5
   8a154:	10c1ed36 	bltu	r2,r3,8a90c <_dtoa_r+0xa4c>
   8a158:	18c5883a 	add	r2,r3,r3
   8a15c:	1085883a 	add	r2,r2,r2
   8a160:	00c00274 	movhi	r3,9
   8a164:	18e85d04 	addi	r3,r3,-24204
   8a168:	10c5883a 	add	r2,r2,r3
   8a16c:	11000017 	ldw	r4,0(r2)
   8a170:	2000683a 	jmp	r4
   8a174:	0008a260 	cmpeqi	zero,zero,8841
   8a178:	0008a260 	cmpeqi	zero,zero,8841
   8a17c:	0008ac60 	cmpeqi	zero,zero,8881
   8a180:	0008ac38 	rdprs	zero,zero,8880
   8a184:	0008ac7c 	xorhi	zero,zero,8881
   8a188:	0008ac88 	cmpgei	zero,zero,8882
   8a18c:	d9002717 	ldw	r4,156(sp)
   8a190:	0089c3c4 	movi	r2,9999
   8a194:	20800015 	stw	r2,0(r4)
   8a198:	a0001026 	beq	r20,zero,8a1dc <_dtoa_r+0x31c>
   8a19c:	00c002b4 	movhi	r3,10
   8a1a0:	18ff7e04 	addi	r3,r3,-520
   8a1a4:	d9802917 	ldw	r6,164(sp)
   8a1a8:	303f7926 	beq	r6,zero,89f90 <_dtoa_r+0xd0>
   8a1ac:	188000c7 	ldb	r2,3(r3)
   8a1b0:	190000c4 	addi	r4,r3,3
   8a1b4:	1000101e 	bne	r2,zero,8a1f8 <_dtoa_r+0x338>
   8a1b8:	d8802917 	ldw	r2,164(sp)
   8a1bc:	11000015 	stw	r4,0(r2)
   8a1c0:	003f7306 	br	89f90 <_dtoa_r+0xd0>
   8a1c4:	00a00034 	movhi	r2,32768
   8a1c8:	10bfffc4 	addi	r2,r2,-1
   8a1cc:	00c00044 	movi	r3,1
   8a1d0:	88aa703a 	and	r21,r17,r2
   8a1d4:	90c00015 	stw	r3,0(r18)
   8a1d8:	003f5806 	br	89f3c <_dtoa_r+0x7c>
   8a1dc:	00800434 	movhi	r2,16
   8a1e0:	10bfffc4 	addi	r2,r2,-1
   8a1e4:	a884703a 	and	r2,r21,r2
   8a1e8:	103fec1e 	bne	r2,zero,8a19c <_dtoa_r+0x2dc>
   8a1ec:	00c002b4 	movhi	r3,10
   8a1f0:	18ff7b04 	addi	r3,r3,-532
   8a1f4:	003feb06 	br	8a1a4 <_dtoa_r+0x2e4>
   8a1f8:	d8802917 	ldw	r2,164(sp)
   8a1fc:	19000204 	addi	r4,r3,8
   8a200:	11000015 	stw	r4,0(r2)
   8a204:	003f6206 	br	89f90 <_dtoa_r+0xd0>
   8a208:	ddc00117 	ldw	r23,4(sp)
   8a20c:	d8800217 	ldw	r2,8(sp)
   8a210:	01000804 	movi	r4,32
   8a214:	b8c10c84 	addi	r3,r23,1074
   8a218:	18a3883a 	add	r17,r3,r2
   8a21c:	2441b80e 	bge	r4,r17,8a900 <_dtoa_r+0xa40>
   8a220:	00c01004 	movi	r3,64
   8a224:	1c47c83a 	sub	r3,r3,r17
   8a228:	88bff804 	addi	r2,r17,-32
   8a22c:	a8c6983a 	sll	r3,r21,r3
   8a230:	a084d83a 	srl	r2,r20,r2
   8a234:	1888b03a 	or	r4,r3,r2
   8a238:	0090e340 	call	90e34 <__floatunsidf>
   8a23c:	1011883a 	mov	r8,r2
   8a240:	00bf8434 	movhi	r2,65040
   8a244:	01000044 	movi	r4,1
   8a248:	10d3883a 	add	r9,r2,r3
   8a24c:	8dbef344 	addi	r22,r17,-1075
   8a250:	d9000815 	stw	r4,32(sp)
   8a254:	003f6f06 	br	8a014 <_dtoa_r+0x154>
   8a258:	d8001715 	stw	zero,92(sp)
   8a25c:	04400044 	movi	r17,1
   8a260:	00bfffc4 	movi	r2,-1
   8a264:	00c00044 	movi	r3,1
   8a268:	d8800e15 	stw	r2,56(sp)
   8a26c:	d8002615 	stw	zero,152(sp)
   8a270:	d8800f15 	stw	r2,60(sp)
   8a274:	d8c00b15 	stw	r3,44(sp)
   8a278:	1021883a 	mov	r16,r2
   8a27c:	d8801617 	ldw	r2,88(sp)
   8a280:	10001115 	stw	zero,68(r2)
   8a284:	d8801617 	ldw	r2,88(sp)
   8a288:	11401117 	ldw	r5,68(r2)
   8a28c:	1009883a 	mov	r4,r2
   8a290:	008d6080 	call	8d608 <_Balloc>
   8a294:	d8c01617 	ldw	r3,88(sp)
   8a298:	d8800515 	stw	r2,20(sp)
   8a29c:	18801015 	stw	r2,64(r3)
   8a2a0:	00800384 	movi	r2,14
   8a2a4:	14006836 	bltu	r2,r16,8a448 <_dtoa_r+0x588>
   8a2a8:	8805003a 	cmpeq	r2,r17,zero
   8a2ac:	1000661e 	bne	r2,zero,8a448 <_dtoa_r+0x588>
   8a2b0:	d9000d17 	ldw	r4,52(sp)
   8a2b4:	0102300e 	bge	zero,r4,8ab78 <_dtoa_r+0xcb8>
   8a2b8:	208003cc 	andi	r2,r4,15
   8a2bc:	100490fa 	slli	r2,r2,3
   8a2c0:	2025d13a 	srai	r18,r4,4
   8a2c4:	00c002b4 	movhi	r3,10
   8a2c8:	18ff8f04 	addi	r3,r3,-452
   8a2cc:	10c5883a 	add	r2,r2,r3
   8a2d0:	90c0040c 	andi	r3,r18,16
   8a2d4:	14000017 	ldw	r16,0(r2)
   8a2d8:	14400117 	ldw	r17,4(r2)
   8a2dc:	18036a1e 	bne	r3,zero,8b088 <_dtoa_r+0x11c8>
   8a2e0:	05800084 	movi	r22,2
   8a2e4:	90001026 	beq	r18,zero,8a328 <_dtoa_r+0x468>
   8a2e8:	04c002b4 	movhi	r19,10
   8a2ec:	9cffc104 	addi	r19,r19,-252
   8a2f0:	9080004c 	andi	r2,r18,1
   8a2f4:	1005003a 	cmpeq	r2,r2,zero
   8a2f8:	1000081e 	bne	r2,zero,8a31c <_dtoa_r+0x45c>
   8a2fc:	99800017 	ldw	r6,0(r19)
   8a300:	99c00117 	ldw	r7,4(r19)
   8a304:	880b883a 	mov	r5,r17
   8a308:	8009883a 	mov	r4,r16
   8a30c:	00903a00 	call	903a0 <__muldf3>
   8a310:	1021883a 	mov	r16,r2
   8a314:	b5800044 	addi	r22,r22,1
   8a318:	1823883a 	mov	r17,r3
   8a31c:	9025d07a 	srai	r18,r18,1
   8a320:	9cc00204 	addi	r19,r19,8
   8a324:	903ff21e 	bne	r18,zero,8a2f0 <_dtoa_r+0x430>
   8a328:	a80b883a 	mov	r5,r21
   8a32c:	a009883a 	mov	r4,r20
   8a330:	880f883a 	mov	r7,r17
   8a334:	800d883a 	mov	r6,r16
   8a338:	00907640 	call	90764 <__divdf3>
   8a33c:	1029883a 	mov	r20,r2
   8a340:	182b883a 	mov	r21,r3
   8a344:	d8c00c17 	ldw	r3,48(sp)
   8a348:	1805003a 	cmpeq	r2,r3,zero
   8a34c:	1000081e 	bne	r2,zero,8a370 <_dtoa_r+0x4b0>
   8a350:	0005883a 	mov	r2,zero
   8a354:	00cffc34 	movhi	r3,16368
   8a358:	180f883a 	mov	r7,r3
   8a35c:	a009883a 	mov	r4,r20
   8a360:	a80b883a 	mov	r5,r21
   8a364:	100d883a 	mov	r6,r2
   8a368:	0090bdc0 	call	90bdc <__ltdf2>
   8a36c:	1003fe16 	blt	r2,zero,8b368 <_dtoa_r+0x14a8>
   8a370:	b009883a 	mov	r4,r22
   8a374:	0090c640 	call	90c64 <__floatsidf>
   8a378:	180b883a 	mov	r5,r3
   8a37c:	1009883a 	mov	r4,r2
   8a380:	a00d883a 	mov	r6,r20
   8a384:	a80f883a 	mov	r7,r21
   8a388:	00903a00 	call	903a0 <__muldf3>
   8a38c:	0011883a 	mov	r8,zero
   8a390:	02500734 	movhi	r9,16412
   8a394:	1009883a 	mov	r4,r2
   8a398:	180b883a 	mov	r5,r3
   8a39c:	480f883a 	mov	r7,r9
   8a3a0:	400d883a 	mov	r6,r8
   8a3a4:	009032c0 	call	9032c <__adddf3>
   8a3a8:	d9000f17 	ldw	r4,60(sp)
   8a3ac:	102d883a 	mov	r22,r2
   8a3b0:	00bf3034 	movhi	r2,64704
   8a3b4:	18b9883a 	add	fp,r3,r2
   8a3b8:	e02f883a 	mov	r23,fp
   8a3bc:	20028f1e 	bne	r4,zero,8adfc <_dtoa_r+0xf3c>
   8a3c0:	0005883a 	mov	r2,zero
   8a3c4:	00d00534 	movhi	r3,16404
   8a3c8:	a009883a 	mov	r4,r20
   8a3cc:	a80b883a 	mov	r5,r21
   8a3d0:	180f883a 	mov	r7,r3
   8a3d4:	100d883a 	mov	r6,r2
   8a3d8:	00902ac0 	call	902ac <__subdf3>
   8a3dc:	1009883a 	mov	r4,r2
   8a3e0:	e00f883a 	mov	r7,fp
   8a3e4:	180b883a 	mov	r5,r3
   8a3e8:	b00d883a 	mov	r6,r22
   8a3ec:	1025883a 	mov	r18,r2
   8a3f0:	1827883a 	mov	r19,r3
   8a3f4:	0090acc0 	call	90acc <__gtdf2>
   8a3f8:	00834f16 	blt	zero,r2,8b138 <_dtoa_r+0x1278>
   8a3fc:	e0e0003c 	xorhi	r3,fp,32768
   8a400:	9009883a 	mov	r4,r18
   8a404:	980b883a 	mov	r5,r19
   8a408:	180f883a 	mov	r7,r3
   8a40c:	b00d883a 	mov	r6,r22
   8a410:	0090bdc0 	call	90bdc <__ltdf2>
   8a414:	1000080e 	bge	r2,zero,8a438 <_dtoa_r+0x578>
   8a418:	0027883a 	mov	r19,zero
   8a41c:	0025883a 	mov	r18,zero
   8a420:	d8802617 	ldw	r2,152(sp)
   8a424:	df000517 	ldw	fp,20(sp)
   8a428:	d8000615 	stw	zero,24(sp)
   8a42c:	0084303a 	nor	r2,zero,r2
   8a430:	d8800d15 	stw	r2,52(sp)
   8a434:	00019b06 	br	8aaa4 <_dtoa_r+0xbe4>
   8a438:	d9801217 	ldw	r6,72(sp)
   8a43c:	d8801317 	ldw	r2,76(sp)
   8a440:	3029883a 	mov	r20,r6
   8a444:	102b883a 	mov	r21,r2
   8a448:	d8c00217 	ldw	r3,8(sp)
   8a44c:	18008516 	blt	r3,zero,8a664 <_dtoa_r+0x7a4>
   8a450:	d9000d17 	ldw	r4,52(sp)
   8a454:	00800384 	movi	r2,14
   8a458:	11008216 	blt	r2,r4,8a664 <_dtoa_r+0x7a4>
   8a45c:	200490fa 	slli	r2,r4,3
   8a460:	d9802617 	ldw	r6,152(sp)
   8a464:	00c002b4 	movhi	r3,10
   8a468:	18ff8f04 	addi	r3,r3,-452
   8a46c:	10c5883a 	add	r2,r2,r3
   8a470:	14800017 	ldw	r18,0(r2)
   8a474:	14c00117 	ldw	r19,4(r2)
   8a478:	30031e16 	blt	r6,zero,8b0f4 <_dtoa_r+0x1234>
   8a47c:	d9000517 	ldw	r4,20(sp)
   8a480:	d8c00f17 	ldw	r3,60(sp)
   8a484:	a823883a 	mov	r17,r21
   8a488:	a021883a 	mov	r16,r20
   8a48c:	192b883a 	add	r21,r3,r4
   8a490:	2039883a 	mov	fp,r4
   8a494:	00000f06 	br	8a4d4 <_dtoa_r+0x614>
   8a498:	0005883a 	mov	r2,zero
   8a49c:	00d00934 	movhi	r3,16420
   8a4a0:	5009883a 	mov	r4,r10
   8a4a4:	580b883a 	mov	r5,r11
   8a4a8:	180f883a 	mov	r7,r3
   8a4ac:	100d883a 	mov	r6,r2
   8a4b0:	00903a00 	call	903a0 <__muldf3>
   8a4b4:	180b883a 	mov	r5,r3
   8a4b8:	000d883a 	mov	r6,zero
   8a4bc:	000f883a 	mov	r7,zero
   8a4c0:	1009883a 	mov	r4,r2
   8a4c4:	1021883a 	mov	r16,r2
   8a4c8:	1823883a 	mov	r17,r3
   8a4cc:	0090a440 	call	90a44 <__nedf2>
   8a4d0:	10004526 	beq	r2,zero,8a5e8 <_dtoa_r+0x728>
   8a4d4:	900d883a 	mov	r6,r18
   8a4d8:	980f883a 	mov	r7,r19
   8a4dc:	8009883a 	mov	r4,r16
   8a4e0:	880b883a 	mov	r5,r17
   8a4e4:	00907640 	call	90764 <__divdf3>
   8a4e8:	180b883a 	mov	r5,r3
   8a4ec:	1009883a 	mov	r4,r2
   8a4f0:	0090d5c0 	call	90d5c <__fixdfsi>
   8a4f4:	1009883a 	mov	r4,r2
   8a4f8:	1029883a 	mov	r20,r2
   8a4fc:	0090c640 	call	90c64 <__floatsidf>
   8a500:	180f883a 	mov	r7,r3
   8a504:	9009883a 	mov	r4,r18
   8a508:	980b883a 	mov	r5,r19
   8a50c:	100d883a 	mov	r6,r2
   8a510:	00903a00 	call	903a0 <__muldf3>
   8a514:	180f883a 	mov	r7,r3
   8a518:	880b883a 	mov	r5,r17
   8a51c:	8009883a 	mov	r4,r16
   8a520:	100d883a 	mov	r6,r2
   8a524:	00902ac0 	call	902ac <__subdf3>
   8a528:	1015883a 	mov	r10,r2
   8a52c:	a0800c04 	addi	r2,r20,48
   8a530:	e0800005 	stb	r2,0(fp)
   8a534:	e7000044 	addi	fp,fp,1
   8a538:	1817883a 	mov	r11,r3
   8a53c:	e57fd61e 	bne	fp,r21,8a498 <_dtoa_r+0x5d8>
   8a540:	500d883a 	mov	r6,r10
   8a544:	180f883a 	mov	r7,r3
   8a548:	5009883a 	mov	r4,r10
   8a54c:	180b883a 	mov	r5,r3
   8a550:	009032c0 	call	9032c <__adddf3>
   8a554:	100d883a 	mov	r6,r2
   8a558:	9009883a 	mov	r4,r18
   8a55c:	980b883a 	mov	r5,r19
   8a560:	180f883a 	mov	r7,r3
   8a564:	1021883a 	mov	r16,r2
   8a568:	1823883a 	mov	r17,r3
   8a56c:	0090bdc0 	call	90bdc <__ltdf2>
   8a570:	10000816 	blt	r2,zero,8a594 <_dtoa_r+0x6d4>
   8a574:	980b883a 	mov	r5,r19
   8a578:	800d883a 	mov	r6,r16
   8a57c:	880f883a 	mov	r7,r17
   8a580:	9009883a 	mov	r4,r18
   8a584:	00909bc0 	call	909bc <__eqdf2>
   8a588:	1000171e 	bne	r2,zero,8a5e8 <_dtoa_r+0x728>
   8a58c:	a080004c 	andi	r2,r20,1
   8a590:	10001526 	beq	r2,zero,8a5e8 <_dtoa_r+0x728>
   8a594:	d8800d17 	ldw	r2,52(sp)
   8a598:	d8800415 	stw	r2,16(sp)
   8a59c:	e009883a 	mov	r4,fp
   8a5a0:	213fffc4 	addi	r4,r4,-1
   8a5a4:	20c00007 	ldb	r3,0(r4)
   8a5a8:	00800e44 	movi	r2,57
   8a5ac:	1880081e 	bne	r3,r2,8a5d0 <_dtoa_r+0x710>
   8a5b0:	d8800517 	ldw	r2,20(sp)
   8a5b4:	113ffa1e 	bne	r2,r4,8a5a0 <_dtoa_r+0x6e0>
   8a5b8:	d8c00417 	ldw	r3,16(sp)
   8a5bc:	d9800517 	ldw	r6,20(sp)
   8a5c0:	00800c04 	movi	r2,48
   8a5c4:	18c00044 	addi	r3,r3,1
   8a5c8:	d8c00415 	stw	r3,16(sp)
   8a5cc:	30800005 	stb	r2,0(r6)
   8a5d0:	20800003 	ldbu	r2,0(r4)
   8a5d4:	d8c00417 	ldw	r3,16(sp)
   8a5d8:	27000044 	addi	fp,r4,1
   8a5dc:	10800044 	addi	r2,r2,1
   8a5e0:	d8c00d15 	stw	r3,52(sp)
   8a5e4:	20800005 	stb	r2,0(r4)
   8a5e8:	d9001617 	ldw	r4,88(sp)
   8a5ec:	d9400717 	ldw	r5,28(sp)
   8a5f0:	008d0880 	call	8d088 <_Bfree>
   8a5f4:	e0000005 	stb	zero,0(fp)
   8a5f8:	d9800d17 	ldw	r6,52(sp)
   8a5fc:	d8c02717 	ldw	r3,156(sp)
   8a600:	d9002917 	ldw	r4,164(sp)
   8a604:	30800044 	addi	r2,r6,1
   8a608:	18800015 	stw	r2,0(r3)
   8a60c:	20029c26 	beq	r4,zero,8b080 <_dtoa_r+0x11c0>
   8a610:	d8c00517 	ldw	r3,20(sp)
   8a614:	27000015 	stw	fp,0(r4)
   8a618:	003e5d06 	br	89f90 <_dtoa_r+0xd0>
   8a61c:	d9800d17 	ldw	r6,52(sp)
   8a620:	00c002b4 	movhi	r3,10
   8a624:	18ff8f04 	addi	r3,r3,-452
   8a628:	d9001217 	ldw	r4,72(sp)
   8a62c:	300490fa 	slli	r2,r6,3
   8a630:	d9401317 	ldw	r5,76(sp)
   8a634:	10c5883a 	add	r2,r2,r3
   8a638:	12000017 	ldw	r8,0(r2)
   8a63c:	12400117 	ldw	r9,4(r2)
   8a640:	400d883a 	mov	r6,r8
   8a644:	480f883a 	mov	r7,r9
   8a648:	0090bdc0 	call	90bdc <__ltdf2>
   8a64c:	1000030e 	bge	r2,zero,8a65c <_dtoa_r+0x79c>
   8a650:	d8800d17 	ldw	r2,52(sp)
   8a654:	10bfffc4 	addi	r2,r2,-1
   8a658:	d8800d15 	stw	r2,52(sp)
   8a65c:	d8000c15 	stw	zero,48(sp)
   8a660:	003ea806 	br	8a104 <_dtoa_r+0x244>
   8a664:	d9000b17 	ldw	r4,44(sp)
   8a668:	202cc03a 	cmpne	r22,r4,zero
   8a66c:	b000c71e 	bne	r22,zero,8a98c <_dtoa_r+0xacc>
   8a670:	dc001117 	ldw	r16,68(sp)
   8a674:	dc801017 	ldw	r18,64(sp)
   8a678:	0027883a 	mov	r19,zero
   8a67c:	04000b0e 	bge	zero,r16,8a6ac <_dtoa_r+0x7ec>
   8a680:	d8c00a17 	ldw	r3,40(sp)
   8a684:	00c0090e 	bge	zero,r3,8a6ac <_dtoa_r+0x7ec>
   8a688:	8005883a 	mov	r2,r16
   8a68c:	1c011316 	blt	r3,r16,8aadc <_dtoa_r+0xc1c>
   8a690:	d9000a17 	ldw	r4,40(sp)
   8a694:	d9801117 	ldw	r6,68(sp)
   8a698:	80a1c83a 	sub	r16,r16,r2
   8a69c:	2089c83a 	sub	r4,r4,r2
   8a6a0:	308dc83a 	sub	r6,r6,r2
   8a6a4:	d9000a15 	stw	r4,40(sp)
   8a6a8:	d9801115 	stw	r6,68(sp)
   8a6ac:	d8801017 	ldw	r2,64(sp)
   8a6b0:	0080150e 	bge	zero,r2,8a708 <_dtoa_r+0x848>
   8a6b4:	d8c00b17 	ldw	r3,44(sp)
   8a6b8:	1805003a 	cmpeq	r2,r3,zero
   8a6bc:	1001c91e 	bne	r2,zero,8ade4 <_dtoa_r+0xf24>
   8a6c0:	04800e0e 	bge	zero,r18,8a6fc <_dtoa_r+0x83c>
   8a6c4:	d9001617 	ldw	r4,88(sp)
   8a6c8:	980b883a 	mov	r5,r19
   8a6cc:	900d883a 	mov	r6,r18
   8a6d0:	008ded40 	call	8ded4 <__pow5mult>
   8a6d4:	d9001617 	ldw	r4,88(sp)
   8a6d8:	d9800717 	ldw	r6,28(sp)
   8a6dc:	100b883a 	mov	r5,r2
   8a6e0:	1027883a 	mov	r19,r2
   8a6e4:	008db180 	call	8db18 <__multiply>
   8a6e8:	d9001617 	ldw	r4,88(sp)
   8a6ec:	d9400717 	ldw	r5,28(sp)
   8a6f0:	1023883a 	mov	r17,r2
   8a6f4:	008d0880 	call	8d088 <_Bfree>
   8a6f8:	dc400715 	stw	r17,28(sp)
   8a6fc:	d9001017 	ldw	r4,64(sp)
   8a700:	248dc83a 	sub	r6,r4,r18
   8a704:	30010e1e 	bne	r6,zero,8ab40 <_dtoa_r+0xc80>
   8a708:	d9001617 	ldw	r4,88(sp)
   8a70c:	04400044 	movi	r17,1
   8a710:	880b883a 	mov	r5,r17
   8a714:	008dd6c0 	call	8dd6c <__i2b>
   8a718:	d9800917 	ldw	r6,36(sp)
   8a71c:	1025883a 	mov	r18,r2
   8a720:	0180040e 	bge	zero,r6,8a734 <_dtoa_r+0x874>
   8a724:	d9001617 	ldw	r4,88(sp)
   8a728:	100b883a 	mov	r5,r2
   8a72c:	008ded40 	call	8ded4 <__pow5mult>
   8a730:	1025883a 	mov	r18,r2
   8a734:	d8801717 	ldw	r2,92(sp)
   8a738:	8880f30e 	bge	r17,r2,8ab08 <_dtoa_r+0xc48>
   8a73c:	0023883a 	mov	r17,zero
   8a740:	d9800917 	ldw	r6,36(sp)
   8a744:	30019e1e 	bne	r6,zero,8adc0 <_dtoa_r+0xf00>
   8a748:	00c00044 	movi	r3,1
   8a74c:	d9000a17 	ldw	r4,40(sp)
   8a750:	20c5883a 	add	r2,r4,r3
   8a754:	10c007cc 	andi	r3,r2,31
   8a758:	1800841e 	bne	r3,zero,8a96c <_dtoa_r+0xaac>
   8a75c:	00800704 	movi	r2,28
   8a760:	d9000a17 	ldw	r4,40(sp)
   8a764:	d9801117 	ldw	r6,68(sp)
   8a768:	80a1883a 	add	r16,r16,r2
   8a76c:	2089883a 	add	r4,r4,r2
   8a770:	308d883a 	add	r6,r6,r2
   8a774:	d9000a15 	stw	r4,40(sp)
   8a778:	d9801115 	stw	r6,68(sp)
   8a77c:	d8801117 	ldw	r2,68(sp)
   8a780:	0080050e 	bge	zero,r2,8a798 <_dtoa_r+0x8d8>
   8a784:	d9400717 	ldw	r5,28(sp)
   8a788:	d9001617 	ldw	r4,88(sp)
   8a78c:	100d883a 	mov	r6,r2
   8a790:	008d9cc0 	call	8d9cc <__lshift>
   8a794:	d8800715 	stw	r2,28(sp)
   8a798:	d8c00a17 	ldw	r3,40(sp)
   8a79c:	00c0050e 	bge	zero,r3,8a7b4 <_dtoa_r+0x8f4>
   8a7a0:	d9001617 	ldw	r4,88(sp)
   8a7a4:	900b883a 	mov	r5,r18
   8a7a8:	180d883a 	mov	r6,r3
   8a7ac:	008d9cc0 	call	8d9cc <__lshift>
   8a7b0:	1025883a 	mov	r18,r2
   8a7b4:	d9000c17 	ldw	r4,48(sp)
   8a7b8:	2005003a 	cmpeq	r2,r4,zero
   8a7bc:	10016f26 	beq	r2,zero,8ad7c <_dtoa_r+0xebc>
   8a7c0:	d9000f17 	ldw	r4,60(sp)
   8a7c4:	0102170e 	bge	zero,r4,8b024 <_dtoa_r+0x1164>
   8a7c8:	d9800b17 	ldw	r6,44(sp)
   8a7cc:	3005003a 	cmpeq	r2,r6,zero
   8a7d0:	1000881e 	bne	r2,zero,8a9f4 <_dtoa_r+0xb34>
   8a7d4:	0400050e 	bge	zero,r16,8a7ec <_dtoa_r+0x92c>
   8a7d8:	d9001617 	ldw	r4,88(sp)
   8a7dc:	980b883a 	mov	r5,r19
   8a7e0:	800d883a 	mov	r6,r16
   8a7e4:	008d9cc0 	call	8d9cc <__lshift>
   8a7e8:	1027883a 	mov	r19,r2
   8a7ec:	8804c03a 	cmpne	r2,r17,zero
   8a7f0:	1002541e 	bne	r2,zero,8b144 <_dtoa_r+0x1284>
   8a7f4:	980b883a 	mov	r5,r19
   8a7f8:	dd800517 	ldw	r22,20(sp)
   8a7fc:	dcc00615 	stw	r19,24(sp)
   8a800:	a700004c 	andi	fp,r20,1
   8a804:	2827883a 	mov	r19,r5
   8a808:	d9000717 	ldw	r4,28(sp)
   8a80c:	900b883a 	mov	r5,r18
   8a810:	0089c7c0 	call	89c7c <quorem>
   8a814:	d9000717 	ldw	r4,28(sp)
   8a818:	d9400617 	ldw	r5,24(sp)
   8a81c:	1023883a 	mov	r17,r2
   8a820:	8dc00c04 	addi	r23,r17,48
   8a824:	008d1e40 	call	8d1e4 <__mcmp>
   8a828:	d9001617 	ldw	r4,88(sp)
   8a82c:	900b883a 	mov	r5,r18
   8a830:	980d883a 	mov	r6,r19
   8a834:	1029883a 	mov	r20,r2
   8a838:	008d8400 	call	8d840 <__mdiff>
   8a83c:	102b883a 	mov	r21,r2
   8a840:	10800317 	ldw	r2,12(r2)
   8a844:	1001281e 	bne	r2,zero,8ace8 <_dtoa_r+0xe28>
   8a848:	d9000717 	ldw	r4,28(sp)
   8a84c:	a80b883a 	mov	r5,r21
   8a850:	008d1e40 	call	8d1e4 <__mcmp>
   8a854:	d9001617 	ldw	r4,88(sp)
   8a858:	1021883a 	mov	r16,r2
   8a85c:	a80b883a 	mov	r5,r21
   8a860:	008d0880 	call	8d088 <_Bfree>
   8a864:	8000041e 	bne	r16,zero,8a878 <_dtoa_r+0x9b8>
   8a868:	d8801717 	ldw	r2,92(sp)
   8a86c:	1000021e 	bne	r2,zero,8a878 <_dtoa_r+0x9b8>
   8a870:	e004c03a 	cmpne	r2,fp,zero
   8a874:	10011726 	beq	r2,zero,8acd4 <_dtoa_r+0xe14>
   8a878:	a0010616 	blt	r20,zero,8ac94 <_dtoa_r+0xdd4>
   8a87c:	a000041e 	bne	r20,zero,8a890 <_dtoa_r+0x9d0>
   8a880:	d8c01717 	ldw	r3,92(sp)
   8a884:	1800021e 	bne	r3,zero,8a890 <_dtoa_r+0x9d0>
   8a888:	e004c03a 	cmpne	r2,fp,zero
   8a88c:	10010126 	beq	r2,zero,8ac94 <_dtoa_r+0xdd4>
   8a890:	04023d16 	blt	zero,r16,8b188 <_dtoa_r+0x12c8>
   8a894:	b5c00005 	stb	r23,0(r22)
   8a898:	d9800517 	ldw	r6,20(sp)
   8a89c:	d9000f17 	ldw	r4,60(sp)
   8a8a0:	b5800044 	addi	r22,r22,1
   8a8a4:	3105883a 	add	r2,r6,r4
   8a8a8:	b0806526 	beq	r22,r2,8aa40 <_dtoa_r+0xb80>
   8a8ac:	d9400717 	ldw	r5,28(sp)
   8a8b0:	d9001617 	ldw	r4,88(sp)
   8a8b4:	01800284 	movi	r6,10
   8a8b8:	000f883a 	mov	r7,zero
   8a8bc:	008dda80 	call	8dda8 <__multadd>
   8a8c0:	d8800715 	stw	r2,28(sp)
   8a8c4:	d8800617 	ldw	r2,24(sp)
   8a8c8:	14c10c26 	beq	r2,r19,8acfc <_dtoa_r+0xe3c>
   8a8cc:	d9400617 	ldw	r5,24(sp)
   8a8d0:	d9001617 	ldw	r4,88(sp)
   8a8d4:	01800284 	movi	r6,10
   8a8d8:	000f883a 	mov	r7,zero
   8a8dc:	008dda80 	call	8dda8 <__multadd>
   8a8e0:	d9001617 	ldw	r4,88(sp)
   8a8e4:	980b883a 	mov	r5,r19
   8a8e8:	01800284 	movi	r6,10
   8a8ec:	000f883a 	mov	r7,zero
   8a8f0:	d8800615 	stw	r2,24(sp)
   8a8f4:	008dda80 	call	8dda8 <__multadd>
   8a8f8:	1027883a 	mov	r19,r2
   8a8fc:	003fc206 	br	8a808 <_dtoa_r+0x948>
   8a900:	2445c83a 	sub	r2,r4,r17
   8a904:	a088983a 	sll	r4,r20,r2
   8a908:	003e4b06 	br	8a238 <_dtoa_r+0x378>
   8a90c:	01bfffc4 	movi	r6,-1
   8a910:	00800044 	movi	r2,1
   8a914:	d9800e15 	stw	r6,56(sp)
   8a918:	d9800f15 	stw	r6,60(sp)
   8a91c:	d8800b15 	stw	r2,44(sp)
   8a920:	d8c01617 	ldw	r3,88(sp)
   8a924:	008005c4 	movi	r2,23
   8a928:	18001115 	stw	zero,68(r3)
   8a92c:	1580082e 	bgeu	r2,r22,8a950 <_dtoa_r+0xa90>
   8a930:	00c00104 	movi	r3,4
   8a934:	0009883a 	mov	r4,zero
   8a938:	18c7883a 	add	r3,r3,r3
   8a93c:	18800504 	addi	r2,r3,20
   8a940:	21000044 	addi	r4,r4,1
   8a944:	b0bffc2e 	bgeu	r22,r2,8a938 <_dtoa_r+0xa78>
   8a948:	d9801617 	ldw	r6,88(sp)
   8a94c:	31001115 	stw	r4,68(r6)
   8a950:	dc000f17 	ldw	r16,60(sp)
   8a954:	003e4b06 	br	8a284 <_dtoa_r+0x3c4>
   8a958:	d9801717 	ldw	r6,92(sp)
   8a95c:	0023883a 	mov	r17,zero
   8a960:	31bfff04 	addi	r6,r6,-4
   8a964:	d9801715 	stw	r6,92(sp)
   8a968:	003df806 	br	8a14c <_dtoa_r+0x28c>
   8a96c:	00800804 	movi	r2,32
   8a970:	10c9c83a 	sub	r4,r2,r3
   8a974:	00c00104 	movi	r3,4
   8a978:	19005a16 	blt	r3,r4,8aae4 <_dtoa_r+0xc24>
   8a97c:	008000c4 	movi	r2,3
   8a980:	113f7e16 	blt	r2,r4,8a77c <_dtoa_r+0x8bc>
   8a984:	20800704 	addi	r2,r4,28
   8a988:	003f7506 	br	8a760 <_dtoa_r+0x8a0>
   8a98c:	d9801717 	ldw	r6,92(sp)
   8a990:	00800044 	movi	r2,1
   8a994:	1180a10e 	bge	r2,r6,8ac1c <_dtoa_r+0xd5c>
   8a998:	d9800f17 	ldw	r6,60(sp)
   8a99c:	d8c01017 	ldw	r3,64(sp)
   8a9a0:	30bfffc4 	addi	r2,r6,-1
   8a9a4:	1881c616 	blt	r3,r2,8b0c0 <_dtoa_r+0x1200>
   8a9a8:	18a5c83a 	sub	r18,r3,r2
   8a9ac:	d8800f17 	ldw	r2,60(sp)
   8a9b0:	10026216 	blt	r2,zero,8b33c <_dtoa_r+0x147c>
   8a9b4:	dc001117 	ldw	r16,68(sp)
   8a9b8:	1007883a 	mov	r3,r2
   8a9bc:	d9800a17 	ldw	r6,40(sp)
   8a9c0:	d8801117 	ldw	r2,68(sp)
   8a9c4:	d9001617 	ldw	r4,88(sp)
   8a9c8:	30cd883a 	add	r6,r6,r3
   8a9cc:	10c5883a 	add	r2,r2,r3
   8a9d0:	01400044 	movi	r5,1
   8a9d4:	d9800a15 	stw	r6,40(sp)
   8a9d8:	d8801115 	stw	r2,68(sp)
   8a9dc:	008dd6c0 	call	8dd6c <__i2b>
   8a9e0:	1027883a 	mov	r19,r2
   8a9e4:	003f2506 	br	8a67c <_dtoa_r+0x7bc>
   8a9e8:	00c002b4 	movhi	r3,10
   8a9ec:	18ff7204 	addi	r3,r3,-568
   8a9f0:	003d6706 	br	89f90 <_dtoa_r+0xd0>
   8a9f4:	dd800517 	ldw	r22,20(sp)
   8a9f8:	04000044 	movi	r16,1
   8a9fc:	00000706 	br	8aa1c <_dtoa_r+0xb5c>
   8aa00:	d9400717 	ldw	r5,28(sp)
   8aa04:	d9001617 	ldw	r4,88(sp)
   8aa08:	01800284 	movi	r6,10
   8aa0c:	000f883a 	mov	r7,zero
   8aa10:	008dda80 	call	8dda8 <__multadd>
   8aa14:	d8800715 	stw	r2,28(sp)
   8aa18:	84000044 	addi	r16,r16,1
   8aa1c:	d9000717 	ldw	r4,28(sp)
   8aa20:	900b883a 	mov	r5,r18
   8aa24:	0089c7c0 	call	89c7c <quorem>
   8aa28:	15c00c04 	addi	r23,r2,48
   8aa2c:	b5c00005 	stb	r23,0(r22)
   8aa30:	d8c00f17 	ldw	r3,60(sp)
   8aa34:	b5800044 	addi	r22,r22,1
   8aa38:	80fff116 	blt	r16,r3,8aa00 <_dtoa_r+0xb40>
   8aa3c:	d8000615 	stw	zero,24(sp)
   8aa40:	d9400717 	ldw	r5,28(sp)
   8aa44:	d9001617 	ldw	r4,88(sp)
   8aa48:	01800044 	movi	r6,1
   8aa4c:	008d9cc0 	call	8d9cc <__lshift>
   8aa50:	1009883a 	mov	r4,r2
   8aa54:	900b883a 	mov	r5,r18
   8aa58:	d8800715 	stw	r2,28(sp)
   8aa5c:	008d1e40 	call	8d1e4 <__mcmp>
   8aa60:	00803c0e 	bge	zero,r2,8ab54 <_dtoa_r+0xc94>
   8aa64:	b009883a 	mov	r4,r22
   8aa68:	213fffc4 	addi	r4,r4,-1
   8aa6c:	21400003 	ldbu	r5,0(r4)
   8aa70:	00800e44 	movi	r2,57
   8aa74:	28c03fcc 	andi	r3,r5,255
   8aa78:	18c0201c 	xori	r3,r3,128
   8aa7c:	18ffe004 	addi	r3,r3,-128
   8aa80:	1881981e 	bne	r3,r2,8b0e4 <_dtoa_r+0x1224>
   8aa84:	d9800517 	ldw	r6,20(sp)
   8aa88:	21bff71e 	bne	r4,r6,8aa68 <_dtoa_r+0xba8>
   8aa8c:	d8800d17 	ldw	r2,52(sp)
   8aa90:	37000044 	addi	fp,r6,1
   8aa94:	10800044 	addi	r2,r2,1
   8aa98:	d8800d15 	stw	r2,52(sp)
   8aa9c:	00800c44 	movi	r2,49
   8aaa0:	30800005 	stb	r2,0(r6)
   8aaa4:	d9001617 	ldw	r4,88(sp)
   8aaa8:	900b883a 	mov	r5,r18
   8aaac:	008d0880 	call	8d088 <_Bfree>
   8aab0:	983ecd26 	beq	r19,zero,8a5e8 <_dtoa_r+0x728>
   8aab4:	d8c00617 	ldw	r3,24(sp)
   8aab8:	18000426 	beq	r3,zero,8aacc <_dtoa_r+0xc0c>
   8aabc:	1cc00326 	beq	r3,r19,8aacc <_dtoa_r+0xc0c>
   8aac0:	d9001617 	ldw	r4,88(sp)
   8aac4:	180b883a 	mov	r5,r3
   8aac8:	008d0880 	call	8d088 <_Bfree>
   8aacc:	d9001617 	ldw	r4,88(sp)
   8aad0:	980b883a 	mov	r5,r19
   8aad4:	008d0880 	call	8d088 <_Bfree>
   8aad8:	003ec306 	br	8a5e8 <_dtoa_r+0x728>
   8aadc:	1805883a 	mov	r2,r3
   8aae0:	003eeb06 	br	8a690 <_dtoa_r+0x7d0>
   8aae4:	d9800a17 	ldw	r6,40(sp)
   8aae8:	d8c01117 	ldw	r3,68(sp)
   8aaec:	20bfff04 	addi	r2,r4,-4
   8aaf0:	308d883a 	add	r6,r6,r2
   8aaf4:	1887883a 	add	r3,r3,r2
   8aaf8:	80a1883a 	add	r16,r16,r2
   8aafc:	d9800a15 	stw	r6,40(sp)
   8ab00:	d8c01115 	stw	r3,68(sp)
   8ab04:	003f1d06 	br	8a77c <_dtoa_r+0x8bc>
   8ab08:	a03f0c1e 	bne	r20,zero,8a73c <_dtoa_r+0x87c>
   8ab0c:	00800434 	movhi	r2,16
   8ab10:	10bfffc4 	addi	r2,r2,-1
   8ab14:	a884703a 	and	r2,r21,r2
   8ab18:	103f081e 	bne	r2,zero,8a73c <_dtoa_r+0x87c>
   8ab1c:	a89ffc2c 	andhi	r2,r21,32752
   8ab20:	103f0626 	beq	r2,zero,8a73c <_dtoa_r+0x87c>
   8ab24:	d8c01117 	ldw	r3,68(sp)
   8ab28:	d9000a17 	ldw	r4,40(sp)
   8ab2c:	18c00044 	addi	r3,r3,1
   8ab30:	21000044 	addi	r4,r4,1
   8ab34:	d8c01115 	stw	r3,68(sp)
   8ab38:	d9000a15 	stw	r4,40(sp)
   8ab3c:	003f0006 	br	8a740 <_dtoa_r+0x880>
   8ab40:	d9400717 	ldw	r5,28(sp)
   8ab44:	d9001617 	ldw	r4,88(sp)
   8ab48:	008ded40 	call	8ded4 <__pow5mult>
   8ab4c:	d8800715 	stw	r2,28(sp)
   8ab50:	003eed06 	br	8a708 <_dtoa_r+0x848>
   8ab54:	1000021e 	bne	r2,zero,8ab60 <_dtoa_r+0xca0>
   8ab58:	b880004c 	andi	r2,r23,1
   8ab5c:	103fc11e 	bne	r2,zero,8aa64 <_dtoa_r+0xba4>
   8ab60:	b5bfffc4 	addi	r22,r22,-1
   8ab64:	b0c00007 	ldb	r3,0(r22)
   8ab68:	00800c04 	movi	r2,48
   8ab6c:	18bffc26 	beq	r3,r2,8ab60 <_dtoa_r+0xca0>
   8ab70:	b7000044 	addi	fp,r22,1
   8ab74:	003fcb06 	br	8aaa4 <_dtoa_r+0xbe4>
   8ab78:	d9800d17 	ldw	r6,52(sp)
   8ab7c:	018fc83a 	sub	r7,zero,r6
   8ab80:	3801f726 	beq	r7,zero,8b360 <_dtoa_r+0x14a0>
   8ab84:	398003cc 	andi	r6,r7,15
   8ab88:	300c90fa 	slli	r6,r6,3
   8ab8c:	014002b4 	movhi	r5,10
   8ab90:	297f8f04 	addi	r5,r5,-452
   8ab94:	d9001217 	ldw	r4,72(sp)
   8ab98:	314d883a 	add	r6,r6,r5
   8ab9c:	30c00117 	ldw	r3,4(r6)
   8aba0:	30800017 	ldw	r2,0(r6)
   8aba4:	d9401317 	ldw	r5,76(sp)
   8aba8:	3821d13a 	srai	r16,r7,4
   8abac:	100d883a 	mov	r6,r2
   8abb0:	180f883a 	mov	r7,r3
   8abb4:	00903a00 	call	903a0 <__muldf3>
   8abb8:	1011883a 	mov	r8,r2
   8abbc:	1813883a 	mov	r9,r3
   8abc0:	1029883a 	mov	r20,r2
   8abc4:	182b883a 	mov	r21,r3
   8abc8:	8001e526 	beq	r16,zero,8b360 <_dtoa_r+0x14a0>
   8abcc:	05800084 	movi	r22,2
   8abd0:	044002b4 	movhi	r17,10
   8abd4:	8c7fc104 	addi	r17,r17,-252
   8abd8:	8080004c 	andi	r2,r16,1
   8abdc:	1005003a 	cmpeq	r2,r2,zero
   8abe0:	1000081e 	bne	r2,zero,8ac04 <_dtoa_r+0xd44>
   8abe4:	89800017 	ldw	r6,0(r17)
   8abe8:	89c00117 	ldw	r7,4(r17)
   8abec:	480b883a 	mov	r5,r9
   8abf0:	4009883a 	mov	r4,r8
   8abf4:	00903a00 	call	903a0 <__muldf3>
   8abf8:	1011883a 	mov	r8,r2
   8abfc:	b5800044 	addi	r22,r22,1
   8ac00:	1813883a 	mov	r9,r3
   8ac04:	8021d07a 	srai	r16,r16,1
   8ac08:	8c400204 	addi	r17,r17,8
   8ac0c:	803ff21e 	bne	r16,zero,8abd8 <_dtoa_r+0xd18>
   8ac10:	4029883a 	mov	r20,r8
   8ac14:	482b883a 	mov	r21,r9
   8ac18:	003dca06 	br	8a344 <_dtoa_r+0x484>
   8ac1c:	d9000817 	ldw	r4,32(sp)
   8ac20:	2005003a 	cmpeq	r2,r4,zero
   8ac24:	1001f61e 	bne	r2,zero,8b400 <_dtoa_r+0x1540>
   8ac28:	dc001117 	ldw	r16,68(sp)
   8ac2c:	dc801017 	ldw	r18,64(sp)
   8ac30:	18c10cc4 	addi	r3,r3,1075
   8ac34:	003f6106 	br	8a9bc <_dtoa_r+0xafc>
   8ac38:	d8000b15 	stw	zero,44(sp)
   8ac3c:	d9802617 	ldw	r6,152(sp)
   8ac40:	d8c00d17 	ldw	r3,52(sp)
   8ac44:	30800044 	addi	r2,r6,1
   8ac48:	18ad883a 	add	r22,r3,r2
   8ac4c:	b13fffc4 	addi	r4,r22,-1
   8ac50:	d9000e15 	stw	r4,56(sp)
   8ac54:	0581f60e 	bge	zero,r22,8b430 <_dtoa_r+0x1570>
   8ac58:	dd800f15 	stw	r22,60(sp)
   8ac5c:	003f3006 	br	8a920 <_dtoa_r+0xa60>
   8ac60:	d8000b15 	stw	zero,44(sp)
   8ac64:	d9002617 	ldw	r4,152(sp)
   8ac68:	0101eb0e 	bge	zero,r4,8b418 <_dtoa_r+0x1558>
   8ac6c:	202d883a 	mov	r22,r4
   8ac70:	d9000e15 	stw	r4,56(sp)
   8ac74:	d9000f15 	stw	r4,60(sp)
   8ac78:	003f2906 	br	8a920 <_dtoa_r+0xa60>
   8ac7c:	01800044 	movi	r6,1
   8ac80:	d9800b15 	stw	r6,44(sp)
   8ac84:	003ff706 	br	8ac64 <_dtoa_r+0xda4>
   8ac88:	01000044 	movi	r4,1
   8ac8c:	d9000b15 	stw	r4,44(sp)
   8ac90:	003fea06 	br	8ac3c <_dtoa_r+0xd7c>
   8ac94:	04000c0e 	bge	zero,r16,8acc8 <_dtoa_r+0xe08>
   8ac98:	d9400717 	ldw	r5,28(sp)
   8ac9c:	d9001617 	ldw	r4,88(sp)
   8aca0:	01800044 	movi	r6,1
   8aca4:	008d9cc0 	call	8d9cc <__lshift>
   8aca8:	1009883a 	mov	r4,r2
   8acac:	900b883a 	mov	r5,r18
   8acb0:	d8800715 	stw	r2,28(sp)
   8acb4:	008d1e40 	call	8d1e4 <__mcmp>
   8acb8:	0081e00e 	bge	zero,r2,8b43c <_dtoa_r+0x157c>
   8acbc:	bdc00044 	addi	r23,r23,1
   8acc0:	00800e84 	movi	r2,58
   8acc4:	b881a226 	beq	r23,r2,8b350 <_dtoa_r+0x1490>
   8acc8:	b7000044 	addi	fp,r22,1
   8accc:	b5c00005 	stb	r23,0(r22)
   8acd0:	003f7406 	br	8aaa4 <_dtoa_r+0xbe4>
   8acd4:	00800e44 	movi	r2,57
   8acd8:	b8819d26 	beq	r23,r2,8b350 <_dtoa_r+0x1490>
   8acdc:	053ffa0e 	bge	zero,r20,8acc8 <_dtoa_r+0xe08>
   8ace0:	8dc00c44 	addi	r23,r17,49
   8ace4:	003ff806 	br	8acc8 <_dtoa_r+0xe08>
   8ace8:	d9001617 	ldw	r4,88(sp)
   8acec:	a80b883a 	mov	r5,r21
   8acf0:	04000044 	movi	r16,1
   8acf4:	008d0880 	call	8d088 <_Bfree>
   8acf8:	003edf06 	br	8a878 <_dtoa_r+0x9b8>
   8acfc:	d9001617 	ldw	r4,88(sp)
   8ad00:	980b883a 	mov	r5,r19
   8ad04:	01800284 	movi	r6,10
   8ad08:	000f883a 	mov	r7,zero
   8ad0c:	008dda80 	call	8dda8 <__multadd>
   8ad10:	1027883a 	mov	r19,r2
   8ad14:	d8800615 	stw	r2,24(sp)
   8ad18:	003ebb06 	br	8a808 <_dtoa_r+0x948>
   8ad1c:	d9801117 	ldw	r6,68(sp)
   8ad20:	d8800d17 	ldw	r2,52(sp)
   8ad24:	d8000915 	stw	zero,36(sp)
   8ad28:	308dc83a 	sub	r6,r6,r2
   8ad2c:	0087c83a 	sub	r3,zero,r2
   8ad30:	d9801115 	stw	r6,68(sp)
   8ad34:	d8c01015 	stw	r3,64(sp)
   8ad38:	003cfe06 	br	8a134 <_dtoa_r+0x274>
   8ad3c:	018dc83a 	sub	r6,zero,r6
   8ad40:	d9801115 	stw	r6,68(sp)
   8ad44:	d8000a15 	stw	zero,40(sp)
   8ad48:	003cf306 	br	8a118 <_dtoa_r+0x258>
   8ad4c:	d9000d17 	ldw	r4,52(sp)
   8ad50:	0090c640 	call	90c64 <__floatsidf>
   8ad54:	880b883a 	mov	r5,r17
   8ad58:	8009883a 	mov	r4,r16
   8ad5c:	180f883a 	mov	r7,r3
   8ad60:	100d883a 	mov	r6,r2
   8ad64:	0090a440 	call	90a44 <__nedf2>
   8ad68:	103ce126 	beq	r2,zero,8a0f0 <_dtoa_r+0x230>
   8ad6c:	d9800d17 	ldw	r6,52(sp)
   8ad70:	31bfffc4 	addi	r6,r6,-1
   8ad74:	d9800d15 	stw	r6,52(sp)
   8ad78:	003cdd06 	br	8a0f0 <_dtoa_r+0x230>
   8ad7c:	d9000717 	ldw	r4,28(sp)
   8ad80:	900b883a 	mov	r5,r18
   8ad84:	008d1e40 	call	8d1e4 <__mcmp>
   8ad88:	103e8d0e 	bge	r2,zero,8a7c0 <_dtoa_r+0x900>
   8ad8c:	d9400717 	ldw	r5,28(sp)
   8ad90:	d9001617 	ldw	r4,88(sp)
   8ad94:	01800284 	movi	r6,10
   8ad98:	000f883a 	mov	r7,zero
   8ad9c:	008dda80 	call	8dda8 <__multadd>
   8ada0:	d9800d17 	ldw	r6,52(sp)
   8ada4:	d8800715 	stw	r2,28(sp)
   8ada8:	31bfffc4 	addi	r6,r6,-1
   8adac:	d9800d15 	stw	r6,52(sp)
   8adb0:	b001a71e 	bne	r22,zero,8b450 <_dtoa_r+0x1590>
   8adb4:	d8800e17 	ldw	r2,56(sp)
   8adb8:	d8800f15 	stw	r2,60(sp)
   8adbc:	003e8006 	br	8a7c0 <_dtoa_r+0x900>
   8adc0:	90800417 	ldw	r2,16(r18)
   8adc4:	1085883a 	add	r2,r2,r2
   8adc8:	1085883a 	add	r2,r2,r2
   8adcc:	1485883a 	add	r2,r2,r18
   8add0:	11000417 	ldw	r4,16(r2)
   8add4:	008d0b00 	call	8d0b0 <__hi0bits>
   8add8:	00c00804 	movi	r3,32
   8addc:	1887c83a 	sub	r3,r3,r2
   8ade0:	003e5a06 	br	8a74c <_dtoa_r+0x88c>
   8ade4:	d9400717 	ldw	r5,28(sp)
   8ade8:	d9801017 	ldw	r6,64(sp)
   8adec:	d9001617 	ldw	r4,88(sp)
   8adf0:	008ded40 	call	8ded4 <__pow5mult>
   8adf4:	d8800715 	stw	r2,28(sp)
   8adf8:	003e4306 	br	8a708 <_dtoa_r+0x848>
   8adfc:	d9800f17 	ldw	r6,60(sp)
   8ae00:	d8800d17 	ldw	r2,52(sp)
   8ae04:	d9800315 	stw	r6,12(sp)
   8ae08:	d8800415 	stw	r2,16(sp)
   8ae0c:	d8c00b17 	ldw	r3,44(sp)
   8ae10:	1805003a 	cmpeq	r2,r3,zero
   8ae14:	1000e21e 	bne	r2,zero,8b1a0 <_dtoa_r+0x12e0>
   8ae18:	d9000317 	ldw	r4,12(sp)
   8ae1c:	0005883a 	mov	r2,zero
   8ae20:	00cff834 	movhi	r3,16352
   8ae24:	200c90fa 	slli	r6,r4,3
   8ae28:	010002b4 	movhi	r4,10
   8ae2c:	213f8f04 	addi	r4,r4,-452
   8ae30:	180b883a 	mov	r5,r3
   8ae34:	310d883a 	add	r6,r6,r4
   8ae38:	327fff17 	ldw	r9,-4(r6)
   8ae3c:	323ffe17 	ldw	r8,-8(r6)
   8ae40:	1009883a 	mov	r4,r2
   8ae44:	480f883a 	mov	r7,r9
   8ae48:	400d883a 	mov	r6,r8
   8ae4c:	00907640 	call	90764 <__divdf3>
   8ae50:	180b883a 	mov	r5,r3
   8ae54:	b00d883a 	mov	r6,r22
   8ae58:	b80f883a 	mov	r7,r23
   8ae5c:	1009883a 	mov	r4,r2
   8ae60:	00902ac0 	call	902ac <__subdf3>
   8ae64:	a80b883a 	mov	r5,r21
   8ae68:	a009883a 	mov	r4,r20
   8ae6c:	d8c01915 	stw	r3,100(sp)
   8ae70:	d8801815 	stw	r2,96(sp)
   8ae74:	0090d5c0 	call	90d5c <__fixdfsi>
   8ae78:	1009883a 	mov	r4,r2
   8ae7c:	1027883a 	mov	r19,r2
   8ae80:	0090c640 	call	90c64 <__floatsidf>
   8ae84:	a80b883a 	mov	r5,r21
   8ae88:	a009883a 	mov	r4,r20
   8ae8c:	180f883a 	mov	r7,r3
   8ae90:	100d883a 	mov	r6,r2
   8ae94:	00902ac0 	call	902ac <__subdf3>
   8ae98:	d9801817 	ldw	r6,96(sp)
   8ae9c:	1823883a 	mov	r17,r3
   8aea0:	d8801415 	stw	r2,80(sp)
   8aea4:	302d883a 	mov	r22,r6
   8aea8:	d9800517 	ldw	r6,20(sp)
   8aeac:	9cc00c04 	addi	r19,r19,48
   8aeb0:	dc401515 	stw	r17,84(sp)
   8aeb4:	d8c01917 	ldw	r3,100(sp)
   8aeb8:	34c00005 	stb	r19,0(r6)
   8aebc:	d8800517 	ldw	r2,20(sp)
   8aec0:	d9401917 	ldw	r5,100(sp)
   8aec4:	d9801417 	ldw	r6,80(sp)
   8aec8:	b009883a 	mov	r4,r22
   8aecc:	880f883a 	mov	r7,r17
   8aed0:	182f883a 	mov	r23,r3
   8aed4:	17000044 	addi	fp,r2,1
   8aed8:	0090acc0 	call	90acc <__gtdf2>
   8aedc:	00804e16 	blt	zero,r2,8b018 <_dtoa_r+0x1158>
   8aee0:	d9801417 	ldw	r6,80(sp)
   8aee4:	0005883a 	mov	r2,zero
   8aee8:	00cffc34 	movhi	r3,16368
   8aeec:	180b883a 	mov	r5,r3
   8aef0:	880f883a 	mov	r7,r17
   8aef4:	1009883a 	mov	r4,r2
   8aef8:	00902ac0 	call	902ac <__subdf3>
   8aefc:	d9401917 	ldw	r5,100(sp)
   8af00:	180f883a 	mov	r7,r3
   8af04:	b009883a 	mov	r4,r22
   8af08:	100d883a 	mov	r6,r2
   8af0c:	0090acc0 	call	90acc <__gtdf2>
   8af10:	00bda216 	blt	zero,r2,8a59c <_dtoa_r+0x6dc>
   8af14:	d8c00317 	ldw	r3,12(sp)
   8af18:	00800044 	movi	r2,1
   8af1c:	10c01216 	blt	r2,r3,8af68 <_dtoa_r+0x10a8>
   8af20:	003d4506 	br	8a438 <_dtoa_r+0x578>
   8af24:	d9801417 	ldw	r6,80(sp)
   8af28:	0005883a 	mov	r2,zero
   8af2c:	00cffc34 	movhi	r3,16368
   8af30:	180b883a 	mov	r5,r3
   8af34:	880f883a 	mov	r7,r17
   8af38:	1009883a 	mov	r4,r2
   8af3c:	00902ac0 	call	902ac <__subdf3>
   8af40:	d9c01b17 	ldw	r7,108(sp)
   8af44:	180b883a 	mov	r5,r3
   8af48:	1009883a 	mov	r4,r2
   8af4c:	b00d883a 	mov	r6,r22
   8af50:	0090bdc0 	call	90bdc <__ltdf2>
   8af54:	103d9116 	blt	r2,zero,8a59c <_dtoa_r+0x6dc>
   8af58:	d9800517 	ldw	r6,20(sp)
   8af5c:	d9000317 	ldw	r4,12(sp)
   8af60:	3105883a 	add	r2,r6,r4
   8af64:	e0bd3426 	beq	fp,r2,8a438 <_dtoa_r+0x578>
   8af68:	04500934 	movhi	r17,16420
   8af6c:	0021883a 	mov	r16,zero
   8af70:	b80b883a 	mov	r5,r23
   8af74:	b009883a 	mov	r4,r22
   8af78:	800d883a 	mov	r6,r16
   8af7c:	880f883a 	mov	r7,r17
   8af80:	00903a00 	call	903a0 <__muldf3>
   8af84:	d9401517 	ldw	r5,84(sp)
   8af88:	d9001417 	ldw	r4,80(sp)
   8af8c:	880f883a 	mov	r7,r17
   8af90:	000d883a 	mov	r6,zero
   8af94:	d8801a15 	stw	r2,104(sp)
   8af98:	d8c01b15 	stw	r3,108(sp)
   8af9c:	00903a00 	call	903a0 <__muldf3>
   8afa0:	180b883a 	mov	r5,r3
   8afa4:	1009883a 	mov	r4,r2
   8afa8:	1823883a 	mov	r17,r3
   8afac:	1021883a 	mov	r16,r2
   8afb0:	0090d5c0 	call	90d5c <__fixdfsi>
   8afb4:	1009883a 	mov	r4,r2
   8afb8:	102b883a 	mov	r21,r2
   8afbc:	0090c640 	call	90c64 <__floatsidf>
   8afc0:	880b883a 	mov	r5,r17
   8afc4:	8009883a 	mov	r4,r16
   8afc8:	180f883a 	mov	r7,r3
   8afcc:	100d883a 	mov	r6,r2
   8afd0:	00902ac0 	call	902ac <__subdf3>
   8afd4:	1021883a 	mov	r16,r2
   8afd8:	d9001b17 	ldw	r4,108(sp)
   8afdc:	1823883a 	mov	r17,r3
   8afe0:	dc001415 	stw	r16,80(sp)
   8afe4:	ad400c04 	addi	r21,r21,48
   8afe8:	dc401515 	stw	r17,84(sp)
   8afec:	d8801a17 	ldw	r2,104(sp)
   8aff0:	e5400005 	stb	r21,0(fp)
   8aff4:	202f883a 	mov	r23,r4
   8aff8:	d9c01b17 	ldw	r7,108(sp)
   8affc:	d9001417 	ldw	r4,80(sp)
   8b000:	880b883a 	mov	r5,r17
   8b004:	100d883a 	mov	r6,r2
   8b008:	102d883a 	mov	r22,r2
   8b00c:	e7000044 	addi	fp,fp,1
   8b010:	0090bdc0 	call	90bdc <__ltdf2>
   8b014:	103fc30e 	bge	r2,zero,8af24 <_dtoa_r+0x1064>
   8b018:	d9000417 	ldw	r4,16(sp)
   8b01c:	d9000d15 	stw	r4,52(sp)
   8b020:	003d7106 	br	8a5e8 <_dtoa_r+0x728>
   8b024:	d9801717 	ldw	r6,92(sp)
   8b028:	00800084 	movi	r2,2
   8b02c:	11bde60e 	bge	r2,r6,8a7c8 <_dtoa_r+0x908>
   8b030:	203cfb1e 	bne	r4,zero,8a420 <_dtoa_r+0x560>
   8b034:	d9001617 	ldw	r4,88(sp)
   8b038:	900b883a 	mov	r5,r18
   8b03c:	01800144 	movi	r6,5
   8b040:	000f883a 	mov	r7,zero
   8b044:	008dda80 	call	8dda8 <__multadd>
   8b048:	d9000717 	ldw	r4,28(sp)
   8b04c:	100b883a 	mov	r5,r2
   8b050:	1025883a 	mov	r18,r2
   8b054:	008d1e40 	call	8d1e4 <__mcmp>
   8b058:	00bcf10e 	bge	zero,r2,8a420 <_dtoa_r+0x560>
   8b05c:	d8c00d17 	ldw	r3,52(sp)
   8b060:	d9000517 	ldw	r4,20(sp)
   8b064:	d8000615 	stw	zero,24(sp)
   8b068:	18c00044 	addi	r3,r3,1
   8b06c:	d8c00d15 	stw	r3,52(sp)
   8b070:	00800c44 	movi	r2,49
   8b074:	27000044 	addi	fp,r4,1
   8b078:	20800005 	stb	r2,0(r4)
   8b07c:	003e8906 	br	8aaa4 <_dtoa_r+0xbe4>
   8b080:	d8c00517 	ldw	r3,20(sp)
   8b084:	003bc206 	br	89f90 <_dtoa_r+0xd0>
   8b088:	018002b4 	movhi	r6,10
   8b08c:	31bfc104 	addi	r6,r6,-252
   8b090:	30c00917 	ldw	r3,36(r6)
   8b094:	30800817 	ldw	r2,32(r6)
   8b098:	d9001217 	ldw	r4,72(sp)
   8b09c:	d9401317 	ldw	r5,76(sp)
   8b0a0:	180f883a 	mov	r7,r3
   8b0a4:	100d883a 	mov	r6,r2
   8b0a8:	00907640 	call	90764 <__divdf3>
   8b0ac:	948003cc 	andi	r18,r18,15
   8b0b0:	058000c4 	movi	r22,3
   8b0b4:	1029883a 	mov	r20,r2
   8b0b8:	182b883a 	mov	r21,r3
   8b0bc:	003c8906 	br	8a2e4 <_dtoa_r+0x424>
   8b0c0:	d9001017 	ldw	r4,64(sp)
   8b0c4:	d9800917 	ldw	r6,36(sp)
   8b0c8:	0025883a 	mov	r18,zero
   8b0cc:	1105c83a 	sub	r2,r2,r4
   8b0d0:	2089883a 	add	r4,r4,r2
   8b0d4:	308d883a 	add	r6,r6,r2
   8b0d8:	d9001015 	stw	r4,64(sp)
   8b0dc:	d9800915 	stw	r6,36(sp)
   8b0e0:	003e3206 	br	8a9ac <_dtoa_r+0xaec>
   8b0e4:	28800044 	addi	r2,r5,1
   8b0e8:	27000044 	addi	fp,r4,1
   8b0ec:	20800005 	stb	r2,0(r4)
   8b0f0:	003e6c06 	br	8aaa4 <_dtoa_r+0xbe4>
   8b0f4:	d8800f17 	ldw	r2,60(sp)
   8b0f8:	00bce016 	blt	zero,r2,8a47c <_dtoa_r+0x5bc>
   8b0fc:	d9800f17 	ldw	r6,60(sp)
   8b100:	303cc51e 	bne	r6,zero,8a418 <_dtoa_r+0x558>
   8b104:	0005883a 	mov	r2,zero
   8b108:	00d00534 	movhi	r3,16404
   8b10c:	980b883a 	mov	r5,r19
   8b110:	180f883a 	mov	r7,r3
   8b114:	9009883a 	mov	r4,r18
   8b118:	100d883a 	mov	r6,r2
   8b11c:	00903a00 	call	903a0 <__muldf3>
   8b120:	180b883a 	mov	r5,r3
   8b124:	a80f883a 	mov	r7,r21
   8b128:	1009883a 	mov	r4,r2
   8b12c:	a00d883a 	mov	r6,r20
   8b130:	0090b540 	call	90b54 <__gedf2>
   8b134:	103cb80e 	bge	r2,zero,8a418 <_dtoa_r+0x558>
   8b138:	0027883a 	mov	r19,zero
   8b13c:	0025883a 	mov	r18,zero
   8b140:	003fc606 	br	8b05c <_dtoa_r+0x119c>
   8b144:	99400117 	ldw	r5,4(r19)
   8b148:	d9001617 	ldw	r4,88(sp)
   8b14c:	008d6080 	call	8d608 <_Balloc>
   8b150:	99800417 	ldw	r6,16(r19)
   8b154:	11000304 	addi	r4,r2,12
   8b158:	99400304 	addi	r5,r19,12
   8b15c:	318d883a 	add	r6,r6,r6
   8b160:	318d883a 	add	r6,r6,r6
   8b164:	31800204 	addi	r6,r6,8
   8b168:	1023883a 	mov	r17,r2
   8b16c:	008ce700 	call	8ce70 <memcpy>
   8b170:	d9001617 	ldw	r4,88(sp)
   8b174:	880b883a 	mov	r5,r17
   8b178:	01800044 	movi	r6,1
   8b17c:	008d9cc0 	call	8d9cc <__lshift>
   8b180:	100b883a 	mov	r5,r2
   8b184:	003d9c06 	br	8a7f8 <_dtoa_r+0x938>
   8b188:	00800e44 	movi	r2,57
   8b18c:	b8807026 	beq	r23,r2,8b350 <_dtoa_r+0x1490>
   8b190:	b8800044 	addi	r2,r23,1
   8b194:	b7000044 	addi	fp,r22,1
   8b198:	b0800005 	stb	r2,0(r22)
   8b19c:	003e4106 	br	8aaa4 <_dtoa_r+0xbe4>
   8b1a0:	d8800317 	ldw	r2,12(sp)
   8b1a4:	018002b4 	movhi	r6,10
   8b1a8:	31bf8f04 	addi	r6,r6,-452
   8b1ac:	b009883a 	mov	r4,r22
   8b1b0:	100e90fa 	slli	r7,r2,3
   8b1b4:	b80b883a 	mov	r5,r23
   8b1b8:	398f883a 	add	r7,r7,r6
   8b1bc:	38bffe17 	ldw	r2,-8(r7)
   8b1c0:	d9800517 	ldw	r6,20(sp)
   8b1c4:	38ffff17 	ldw	r3,-4(r7)
   8b1c8:	37000044 	addi	fp,r6,1
   8b1cc:	180f883a 	mov	r7,r3
   8b1d0:	100d883a 	mov	r6,r2
   8b1d4:	00903a00 	call	903a0 <__muldf3>
   8b1d8:	a80b883a 	mov	r5,r21
   8b1dc:	a009883a 	mov	r4,r20
   8b1e0:	182f883a 	mov	r23,r3
   8b1e4:	102d883a 	mov	r22,r2
   8b1e8:	0090d5c0 	call	90d5c <__fixdfsi>
   8b1ec:	1009883a 	mov	r4,r2
   8b1f0:	1027883a 	mov	r19,r2
   8b1f4:	0090c640 	call	90c64 <__floatsidf>
   8b1f8:	a80b883a 	mov	r5,r21
   8b1fc:	a009883a 	mov	r4,r20
   8b200:	180f883a 	mov	r7,r3
   8b204:	100d883a 	mov	r6,r2
   8b208:	00902ac0 	call	902ac <__subdf3>
   8b20c:	180b883a 	mov	r5,r3
   8b210:	d8c00517 	ldw	r3,20(sp)
   8b214:	9cc00c04 	addi	r19,r19,48
   8b218:	1009883a 	mov	r4,r2
   8b21c:	1cc00005 	stb	r19,0(r3)
   8b220:	2021883a 	mov	r16,r4
   8b224:	d9000317 	ldw	r4,12(sp)
   8b228:	00800044 	movi	r2,1
   8b22c:	2823883a 	mov	r17,r5
   8b230:	20802226 	beq	r4,r2,8b2bc <_dtoa_r+0x13fc>
   8b234:	1029883a 	mov	r20,r2
   8b238:	0005883a 	mov	r2,zero
   8b23c:	00d00934 	movhi	r3,16420
   8b240:	180f883a 	mov	r7,r3
   8b244:	100d883a 	mov	r6,r2
   8b248:	880b883a 	mov	r5,r17
   8b24c:	8009883a 	mov	r4,r16
   8b250:	00903a00 	call	903a0 <__muldf3>
   8b254:	180b883a 	mov	r5,r3
   8b258:	1009883a 	mov	r4,r2
   8b25c:	1823883a 	mov	r17,r3
   8b260:	1021883a 	mov	r16,r2
   8b264:	0090d5c0 	call	90d5c <__fixdfsi>
   8b268:	1009883a 	mov	r4,r2
   8b26c:	102b883a 	mov	r21,r2
   8b270:	0090c640 	call	90c64 <__floatsidf>
   8b274:	880b883a 	mov	r5,r17
   8b278:	8009883a 	mov	r4,r16
   8b27c:	180f883a 	mov	r7,r3
   8b280:	100d883a 	mov	r6,r2
   8b284:	00902ac0 	call	902ac <__subdf3>
   8b288:	180b883a 	mov	r5,r3
   8b28c:	d8c00517 	ldw	r3,20(sp)
   8b290:	1009883a 	mov	r4,r2
   8b294:	ad400c04 	addi	r21,r21,48
   8b298:	1d05883a 	add	r2,r3,r20
   8b29c:	15400005 	stb	r21,0(r2)
   8b2a0:	2021883a 	mov	r16,r4
   8b2a4:	d9000317 	ldw	r4,12(sp)
   8b2a8:	a5000044 	addi	r20,r20,1
   8b2ac:	2823883a 	mov	r17,r5
   8b2b0:	a13fe11e 	bne	r20,r4,8b238 <_dtoa_r+0x1378>
   8b2b4:	e505883a 	add	r2,fp,r20
   8b2b8:	173fffc4 	addi	fp,r2,-1
   8b2bc:	0025883a 	mov	r18,zero
   8b2c0:	04cff834 	movhi	r19,16352
   8b2c4:	b009883a 	mov	r4,r22
   8b2c8:	b80b883a 	mov	r5,r23
   8b2cc:	900d883a 	mov	r6,r18
   8b2d0:	980f883a 	mov	r7,r19
   8b2d4:	009032c0 	call	9032c <__adddf3>
   8b2d8:	180b883a 	mov	r5,r3
   8b2dc:	1009883a 	mov	r4,r2
   8b2e0:	800d883a 	mov	r6,r16
   8b2e4:	880f883a 	mov	r7,r17
   8b2e8:	0090bdc0 	call	90bdc <__ltdf2>
   8b2ec:	103cab16 	blt	r2,zero,8a59c <_dtoa_r+0x6dc>
   8b2f0:	0009883a 	mov	r4,zero
   8b2f4:	980b883a 	mov	r5,r19
   8b2f8:	b80f883a 	mov	r7,r23
   8b2fc:	b00d883a 	mov	r6,r22
   8b300:	00902ac0 	call	902ac <__subdf3>
   8b304:	180b883a 	mov	r5,r3
   8b308:	880f883a 	mov	r7,r17
   8b30c:	1009883a 	mov	r4,r2
   8b310:	800d883a 	mov	r6,r16
   8b314:	0090acc0 	call	90acc <__gtdf2>
   8b318:	00bc470e 	bge	zero,r2,8a438 <_dtoa_r+0x578>
   8b31c:	00c00c04 	movi	r3,48
   8b320:	e73fffc4 	addi	fp,fp,-1
   8b324:	e0800007 	ldb	r2,0(fp)
   8b328:	10fffd26 	beq	r2,r3,8b320 <_dtoa_r+0x1460>
   8b32c:	d9800417 	ldw	r6,16(sp)
   8b330:	e7000044 	addi	fp,fp,1
   8b334:	d9800d15 	stw	r6,52(sp)
   8b338:	003cab06 	br	8a5e8 <_dtoa_r+0x728>
   8b33c:	d8c00f17 	ldw	r3,60(sp)
   8b340:	d9001117 	ldw	r4,68(sp)
   8b344:	20e1c83a 	sub	r16,r4,r3
   8b348:	0007883a 	mov	r3,zero
   8b34c:	003d9b06 	br	8a9bc <_dtoa_r+0xafc>
   8b350:	00800e44 	movi	r2,57
   8b354:	b0800005 	stb	r2,0(r22)
   8b358:	b5800044 	addi	r22,r22,1
   8b35c:	003dc106 	br	8aa64 <_dtoa_r+0xba4>
   8b360:	05800084 	movi	r22,2
   8b364:	003bf706 	br	8a344 <_dtoa_r+0x484>
   8b368:	d9000f17 	ldw	r4,60(sp)
   8b36c:	013c000e 	bge	zero,r4,8a370 <_dtoa_r+0x4b0>
   8b370:	d9800e17 	ldw	r6,56(sp)
   8b374:	01bc300e 	bge	zero,r6,8a438 <_dtoa_r+0x578>
   8b378:	0005883a 	mov	r2,zero
   8b37c:	00d00934 	movhi	r3,16420
   8b380:	a80b883a 	mov	r5,r21
   8b384:	180f883a 	mov	r7,r3
   8b388:	a009883a 	mov	r4,r20
   8b38c:	100d883a 	mov	r6,r2
   8b390:	00903a00 	call	903a0 <__muldf3>
   8b394:	b1000044 	addi	r4,r22,1
   8b398:	1021883a 	mov	r16,r2
   8b39c:	1823883a 	mov	r17,r3
   8b3a0:	0090c640 	call	90c64 <__floatsidf>
   8b3a4:	880b883a 	mov	r5,r17
   8b3a8:	8009883a 	mov	r4,r16
   8b3ac:	180f883a 	mov	r7,r3
   8b3b0:	100d883a 	mov	r6,r2
   8b3b4:	00903a00 	call	903a0 <__muldf3>
   8b3b8:	0011883a 	mov	r8,zero
   8b3bc:	02500734 	movhi	r9,16412
   8b3c0:	180b883a 	mov	r5,r3
   8b3c4:	480f883a 	mov	r7,r9
   8b3c8:	1009883a 	mov	r4,r2
   8b3cc:	400d883a 	mov	r6,r8
   8b3d0:	009032c0 	call	9032c <__adddf3>
   8b3d4:	102d883a 	mov	r22,r2
   8b3d8:	00bf3034 	movhi	r2,64704
   8b3dc:	10ef883a 	add	r23,r2,r3
   8b3e0:	d8800d17 	ldw	r2,52(sp)
   8b3e4:	d8c00e17 	ldw	r3,56(sp)
   8b3e8:	8029883a 	mov	r20,r16
   8b3ec:	10bfffc4 	addi	r2,r2,-1
   8b3f0:	882b883a 	mov	r21,r17
   8b3f4:	d8800415 	stw	r2,16(sp)
   8b3f8:	d8c00315 	stw	r3,12(sp)
   8b3fc:	003e8306 	br	8ae0c <_dtoa_r+0xf4c>
   8b400:	d8800117 	ldw	r2,4(sp)
   8b404:	dc001117 	ldw	r16,68(sp)
   8b408:	dc801017 	ldw	r18,64(sp)
   8b40c:	00c00d84 	movi	r3,54
   8b410:	1887c83a 	sub	r3,r3,r2
   8b414:	003d6906 	br	8a9bc <_dtoa_r+0xafc>
   8b418:	01800044 	movi	r6,1
   8b41c:	3021883a 	mov	r16,r6
   8b420:	d9800f15 	stw	r6,60(sp)
   8b424:	d9802615 	stw	r6,152(sp)
   8b428:	d9800e15 	stw	r6,56(sp)
   8b42c:	003b9306 	br	8a27c <_dtoa_r+0x3bc>
   8b430:	b021883a 	mov	r16,r22
   8b434:	dd800f15 	stw	r22,60(sp)
   8b438:	003b9006 	br	8a27c <_dtoa_r+0x3bc>
   8b43c:	103e221e 	bne	r2,zero,8acc8 <_dtoa_r+0xe08>
   8b440:	b880004c 	andi	r2,r23,1
   8b444:	1005003a 	cmpeq	r2,r2,zero
   8b448:	103e1f1e 	bne	r2,zero,8acc8 <_dtoa_r+0xe08>
   8b44c:	003e1b06 	br	8acbc <_dtoa_r+0xdfc>
   8b450:	d9001617 	ldw	r4,88(sp)
   8b454:	980b883a 	mov	r5,r19
   8b458:	01800284 	movi	r6,10
   8b45c:	000f883a 	mov	r7,zero
   8b460:	008dda80 	call	8dda8 <__multadd>
   8b464:	d8c00e17 	ldw	r3,56(sp)
   8b468:	1027883a 	mov	r19,r2
   8b46c:	d8c00f15 	stw	r3,60(sp)
   8b470:	003cd306 	br	8a7c0 <_dtoa_r+0x900>

0008b474 <_fflush_r>:
   8b474:	defffb04 	addi	sp,sp,-20
   8b478:	dcc00315 	stw	r19,12(sp)
   8b47c:	dc800215 	stw	r18,8(sp)
   8b480:	dfc00415 	stw	ra,16(sp)
   8b484:	dc400115 	stw	r17,4(sp)
   8b488:	dc000015 	stw	r16,0(sp)
   8b48c:	2027883a 	mov	r19,r4
   8b490:	2825883a 	mov	r18,r5
   8b494:	20000226 	beq	r4,zero,8b4a0 <_fflush_r+0x2c>
   8b498:	20800e17 	ldw	r2,56(r4)
   8b49c:	10005626 	beq	r2,zero,8b5f8 <_fflush_r+0x184>
   8b4a0:	9100030b 	ldhu	r4,12(r18)
   8b4a4:	20ffffcc 	andi	r3,r4,65535
   8b4a8:	18e0001c 	xori	r3,r3,32768
   8b4ac:	18e00004 	addi	r3,r3,-32768
   8b4b0:	1880020c 	andi	r2,r3,8
   8b4b4:	1000261e 	bne	r2,zero,8b550 <_fflush_r+0xdc>
   8b4b8:	90c00117 	ldw	r3,4(r18)
   8b4bc:	20820014 	ori	r2,r4,2048
   8b4c0:	9080030d 	sth	r2,12(r18)
   8b4c4:	1009883a 	mov	r4,r2
   8b4c8:	00c0400e 	bge	zero,r3,8b5cc <_fflush_r+0x158>
   8b4cc:	92000a17 	ldw	r8,40(r18)
   8b4d0:	40004026 	beq	r8,zero,8b5d4 <_fflush_r+0x160>
   8b4d4:	2084000c 	andi	r2,r4,4096
   8b4d8:	10005326 	beq	r2,zero,8b628 <_fflush_r+0x1b4>
   8b4dc:	94001417 	ldw	r16,80(r18)
   8b4e0:	9080030b 	ldhu	r2,12(r18)
   8b4e4:	1080010c 	andi	r2,r2,4
   8b4e8:	1000481e 	bne	r2,zero,8b60c <_fflush_r+0x198>
   8b4ec:	91400717 	ldw	r5,28(r18)
   8b4f0:	9809883a 	mov	r4,r19
   8b4f4:	800d883a 	mov	r6,r16
   8b4f8:	000f883a 	mov	r7,zero
   8b4fc:	403ee83a 	callr	r8
   8b500:	8080261e 	bne	r16,r2,8b59c <_fflush_r+0x128>
   8b504:	9080030b 	ldhu	r2,12(r18)
   8b508:	91000417 	ldw	r4,16(r18)
   8b50c:	90000115 	stw	zero,4(r18)
   8b510:	10bdffcc 	andi	r2,r2,63487
   8b514:	10ffffcc 	andi	r3,r2,65535
   8b518:	18c4000c 	andi	r3,r3,4096
   8b51c:	9080030d 	sth	r2,12(r18)
   8b520:	91000015 	stw	r4,0(r18)
   8b524:	18002b26 	beq	r3,zero,8b5d4 <_fflush_r+0x160>
   8b528:	0007883a 	mov	r3,zero
   8b52c:	1805883a 	mov	r2,r3
   8b530:	94001415 	stw	r16,80(r18)
   8b534:	dfc00417 	ldw	ra,16(sp)
   8b538:	dcc00317 	ldw	r19,12(sp)
   8b53c:	dc800217 	ldw	r18,8(sp)
   8b540:	dc400117 	ldw	r17,4(sp)
   8b544:	dc000017 	ldw	r16,0(sp)
   8b548:	dec00504 	addi	sp,sp,20
   8b54c:	f800283a 	ret
   8b550:	94400417 	ldw	r17,16(r18)
   8b554:	88001f26 	beq	r17,zero,8b5d4 <_fflush_r+0x160>
   8b558:	90800017 	ldw	r2,0(r18)
   8b55c:	18c000cc 	andi	r3,r3,3
   8b560:	94400015 	stw	r17,0(r18)
   8b564:	1461c83a 	sub	r16,r2,r17
   8b568:	18002526 	beq	r3,zero,8b600 <_fflush_r+0x18c>
   8b56c:	0005883a 	mov	r2,zero
   8b570:	90800215 	stw	r2,8(r18)
   8b574:	0400170e 	bge	zero,r16,8b5d4 <_fflush_r+0x160>
   8b578:	90c00917 	ldw	r3,36(r18)
   8b57c:	91400717 	ldw	r5,28(r18)
   8b580:	880d883a 	mov	r6,r17
   8b584:	800f883a 	mov	r7,r16
   8b588:	9809883a 	mov	r4,r19
   8b58c:	183ee83a 	callr	r3
   8b590:	88a3883a 	add	r17,r17,r2
   8b594:	80a1c83a 	sub	r16,r16,r2
   8b598:	00bff616 	blt	zero,r2,8b574 <_fflush_r+0x100>
   8b59c:	9080030b 	ldhu	r2,12(r18)
   8b5a0:	00ffffc4 	movi	r3,-1
   8b5a4:	10801014 	ori	r2,r2,64
   8b5a8:	9080030d 	sth	r2,12(r18)
   8b5ac:	1805883a 	mov	r2,r3
   8b5b0:	dfc00417 	ldw	ra,16(sp)
   8b5b4:	dcc00317 	ldw	r19,12(sp)
   8b5b8:	dc800217 	ldw	r18,8(sp)
   8b5bc:	dc400117 	ldw	r17,4(sp)
   8b5c0:	dc000017 	ldw	r16,0(sp)
   8b5c4:	dec00504 	addi	sp,sp,20
   8b5c8:	f800283a 	ret
   8b5cc:	90800f17 	ldw	r2,60(r18)
   8b5d0:	00bfbe16 	blt	zero,r2,8b4cc <_fflush_r+0x58>
   8b5d4:	0007883a 	mov	r3,zero
   8b5d8:	1805883a 	mov	r2,r3
   8b5dc:	dfc00417 	ldw	ra,16(sp)
   8b5e0:	dcc00317 	ldw	r19,12(sp)
   8b5e4:	dc800217 	ldw	r18,8(sp)
   8b5e8:	dc400117 	ldw	r17,4(sp)
   8b5ec:	dc000017 	ldw	r16,0(sp)
   8b5f0:	dec00504 	addi	sp,sp,20
   8b5f4:	f800283a 	ret
   8b5f8:	008b70c0 	call	8b70c <__sinit>
   8b5fc:	003fa806 	br	8b4a0 <_fflush_r+0x2c>
   8b600:	90800517 	ldw	r2,20(r18)
   8b604:	90800215 	stw	r2,8(r18)
   8b608:	003fda06 	br	8b574 <_fflush_r+0x100>
   8b60c:	90800117 	ldw	r2,4(r18)
   8b610:	90c00c17 	ldw	r3,48(r18)
   8b614:	80a1c83a 	sub	r16,r16,r2
   8b618:	183fb426 	beq	r3,zero,8b4ec <_fflush_r+0x78>
   8b61c:	90800f17 	ldw	r2,60(r18)
   8b620:	80a1c83a 	sub	r16,r16,r2
   8b624:	003fb106 	br	8b4ec <_fflush_r+0x78>
   8b628:	91400717 	ldw	r5,28(r18)
   8b62c:	9809883a 	mov	r4,r19
   8b630:	000d883a 	mov	r6,zero
   8b634:	01c00044 	movi	r7,1
   8b638:	403ee83a 	callr	r8
   8b63c:	1021883a 	mov	r16,r2
   8b640:	00bfffc4 	movi	r2,-1
   8b644:	80800226 	beq	r16,r2,8b650 <_fflush_r+0x1dc>
   8b648:	92000a17 	ldw	r8,40(r18)
   8b64c:	003fa406 	br	8b4e0 <_fflush_r+0x6c>
   8b650:	98c00017 	ldw	r3,0(r19)
   8b654:	00800744 	movi	r2,29
   8b658:	18bfde26 	beq	r3,r2,8b5d4 <_fflush_r+0x160>
   8b65c:	9080030b 	ldhu	r2,12(r18)
   8b660:	8007883a 	mov	r3,r16
   8b664:	10801014 	ori	r2,r2,64
   8b668:	9080030d 	sth	r2,12(r18)
   8b66c:	003fcf06 	br	8b5ac <_fflush_r+0x138>

0008b670 <fflush>:
   8b670:	01400274 	movhi	r5,9
   8b674:	296d1d04 	addi	r5,r5,-19340
   8b678:	2007883a 	mov	r3,r4
   8b67c:	20000526 	beq	r4,zero,8b694 <fflush+0x24>
   8b680:	008002b4 	movhi	r2,10
   8b684:	10871e04 	addi	r2,r2,7288
   8b688:	11000017 	ldw	r4,0(r2)
   8b68c:	180b883a 	mov	r5,r3
   8b690:	008b4741 	jmpi	8b474 <_fflush_r>
   8b694:	008002b4 	movhi	r2,10
   8b698:	10871f04 	addi	r2,r2,7292
   8b69c:	11000017 	ldw	r4,0(r2)
   8b6a0:	008c2741 	jmpi	8c274 <_fwalk_reent>

0008b6a4 <std>:
   8b6a4:	00800274 	movhi	r2,9
   8b6a8:	10ba7504 	addi	r2,r2,-5676
   8b6ac:	20800b15 	stw	r2,44(r4)
   8b6b0:	00800274 	movhi	r2,9
   8b6b4:	10bab004 	addi	r2,r2,-5440
   8b6b8:	20800815 	stw	r2,32(r4)
   8b6bc:	00c00274 	movhi	r3,9
   8b6c0:	18fa9104 	addi	r3,r3,-5564
   8b6c4:	00800274 	movhi	r2,9
   8b6c8:	10ba7704 	addi	r2,r2,-5668
   8b6cc:	2140030d 	sth	r5,12(r4)
   8b6d0:	2180038d 	sth	r6,14(r4)
   8b6d4:	20c00915 	stw	r3,36(r4)
   8b6d8:	20800a15 	stw	r2,40(r4)
   8b6dc:	20000015 	stw	zero,0(r4)
   8b6e0:	20000115 	stw	zero,4(r4)
   8b6e4:	20000215 	stw	zero,8(r4)
   8b6e8:	20000415 	stw	zero,16(r4)
   8b6ec:	20000515 	stw	zero,20(r4)
   8b6f0:	20000615 	stw	zero,24(r4)
   8b6f4:	21000715 	stw	r4,28(r4)
   8b6f8:	f800283a 	ret

0008b6fc <__sfp_lock_acquire>:
   8b6fc:	f800283a 	ret

0008b700 <__sfp_lock_release>:
   8b700:	f800283a 	ret

0008b704 <__sinit_lock_acquire>:
   8b704:	f800283a 	ret

0008b708 <__sinit_lock_release>:
   8b708:	f800283a 	ret

0008b70c <__sinit>:
   8b70c:	20800e17 	ldw	r2,56(r4)
   8b710:	defffd04 	addi	sp,sp,-12
   8b714:	dc400115 	stw	r17,4(sp)
   8b718:	dc000015 	stw	r16,0(sp)
   8b71c:	dfc00215 	stw	ra,8(sp)
   8b720:	04400044 	movi	r17,1
   8b724:	01400104 	movi	r5,4
   8b728:	000d883a 	mov	r6,zero
   8b72c:	2021883a 	mov	r16,r4
   8b730:	2200bb04 	addi	r8,r4,748
   8b734:	200f883a 	mov	r7,r4
   8b738:	10000526 	beq	r2,zero,8b750 <__sinit+0x44>
   8b73c:	dfc00217 	ldw	ra,8(sp)
   8b740:	dc400117 	ldw	r17,4(sp)
   8b744:	dc000017 	ldw	r16,0(sp)
   8b748:	dec00304 	addi	sp,sp,12
   8b74c:	f800283a 	ret
   8b750:	21000117 	ldw	r4,4(r4)
   8b754:	00800274 	movhi	r2,9
   8b758:	10adfc04 	addi	r2,r2,-18448
   8b75c:	00c000c4 	movi	r3,3
   8b760:	80800f15 	stw	r2,60(r16)
   8b764:	80c0b915 	stw	r3,740(r16)
   8b768:	8200ba15 	stw	r8,744(r16)
   8b76c:	84400e15 	stw	r17,56(r16)
   8b770:	8000b815 	stw	zero,736(r16)
   8b774:	008b6a40 	call	8b6a4 <std>
   8b778:	81000217 	ldw	r4,8(r16)
   8b77c:	880d883a 	mov	r6,r17
   8b780:	800f883a 	mov	r7,r16
   8b784:	01400284 	movi	r5,10
   8b788:	008b6a40 	call	8b6a4 <std>
   8b78c:	81000317 	ldw	r4,12(r16)
   8b790:	800f883a 	mov	r7,r16
   8b794:	01400484 	movi	r5,18
   8b798:	01800084 	movi	r6,2
   8b79c:	dfc00217 	ldw	ra,8(sp)
   8b7a0:	dc400117 	ldw	r17,4(sp)
   8b7a4:	dc000017 	ldw	r16,0(sp)
   8b7a8:	dec00304 	addi	sp,sp,12
   8b7ac:	008b6a41 	jmpi	8b6a4 <std>

0008b7b0 <__fp_lock>:
   8b7b0:	0005883a 	mov	r2,zero
   8b7b4:	f800283a 	ret

0008b7b8 <__fp_unlock>:
   8b7b8:	0005883a 	mov	r2,zero
   8b7bc:	f800283a 	ret

0008b7c0 <__fp_unlock_all>:
   8b7c0:	008002b4 	movhi	r2,10
   8b7c4:	10871e04 	addi	r2,r2,7288
   8b7c8:	11000017 	ldw	r4,0(r2)
   8b7cc:	01400274 	movhi	r5,9
   8b7d0:	296dee04 	addi	r5,r5,-18504
   8b7d4:	008c33c1 	jmpi	8c33c <_fwalk>

0008b7d8 <__fp_lock_all>:
   8b7d8:	008002b4 	movhi	r2,10
   8b7dc:	10871e04 	addi	r2,r2,7288
   8b7e0:	11000017 	ldw	r4,0(r2)
   8b7e4:	01400274 	movhi	r5,9
   8b7e8:	296dec04 	addi	r5,r5,-18512
   8b7ec:	008c33c1 	jmpi	8c33c <_fwalk>

0008b7f0 <_cleanup_r>:
   8b7f0:	01400274 	movhi	r5,9
   8b7f4:	297bfa04 	addi	r5,r5,-4120
   8b7f8:	008c33c1 	jmpi	8c33c <_fwalk>

0008b7fc <_cleanup>:
   8b7fc:	008002b4 	movhi	r2,10
   8b800:	10871f04 	addi	r2,r2,7292
   8b804:	11000017 	ldw	r4,0(r2)
   8b808:	008b7f01 	jmpi	8b7f0 <_cleanup_r>

0008b80c <__sfmoreglue>:
   8b80c:	defffc04 	addi	sp,sp,-16
   8b810:	dc000015 	stw	r16,0(sp)
   8b814:	2821883a 	mov	r16,r5
   8b818:	dc400115 	stw	r17,4(sp)
   8b81c:	01401704 	movi	r5,92
   8b820:	2023883a 	mov	r17,r4
   8b824:	8009883a 	mov	r4,r16
   8b828:	dfc00315 	stw	ra,12(sp)
   8b82c:	dcc00215 	stw	r19,8(sp)
   8b830:	00877e40 	call	877e4 <__mulsi3>
   8b834:	11400304 	addi	r5,r2,12
   8b838:	8809883a 	mov	r4,r17
   8b83c:	1027883a 	mov	r19,r2
   8b840:	008c64c0 	call	8c64c <_malloc_r>
   8b844:	10c00304 	addi	r3,r2,12
   8b848:	1023883a 	mov	r17,r2
   8b84c:	1809883a 	mov	r4,r3
   8b850:	980d883a 	mov	r6,r19
   8b854:	000b883a 	mov	r5,zero
   8b858:	10000b26 	beq	r2,zero,8b888 <__sfmoreglue+0x7c>
   8b85c:	14000115 	stw	r16,4(r2)
   8b860:	10c00215 	stw	r3,8(r2)
   8b864:	10000015 	stw	zero,0(r2)
   8b868:	008cff00 	call	8cff0 <memset>
   8b86c:	8805883a 	mov	r2,r17
   8b870:	dfc00317 	ldw	ra,12(sp)
   8b874:	dcc00217 	ldw	r19,8(sp)
   8b878:	dc400117 	ldw	r17,4(sp)
   8b87c:	dc000017 	ldw	r16,0(sp)
   8b880:	dec00404 	addi	sp,sp,16
   8b884:	f800283a 	ret
   8b888:	0023883a 	mov	r17,zero
   8b88c:	8805883a 	mov	r2,r17
   8b890:	dfc00317 	ldw	ra,12(sp)
   8b894:	dcc00217 	ldw	r19,8(sp)
   8b898:	dc400117 	ldw	r17,4(sp)
   8b89c:	dc000017 	ldw	r16,0(sp)
   8b8a0:	dec00404 	addi	sp,sp,16
   8b8a4:	f800283a 	ret

0008b8a8 <__sfp>:
   8b8a8:	defffd04 	addi	sp,sp,-12
   8b8ac:	008002b4 	movhi	r2,10
   8b8b0:	10871f04 	addi	r2,r2,7292
   8b8b4:	dc000015 	stw	r16,0(sp)
   8b8b8:	14000017 	ldw	r16,0(r2)
   8b8bc:	dc400115 	stw	r17,4(sp)
   8b8c0:	dfc00215 	stw	ra,8(sp)
   8b8c4:	80800e17 	ldw	r2,56(r16)
   8b8c8:	2023883a 	mov	r17,r4
   8b8cc:	10002626 	beq	r2,zero,8b968 <__sfp+0xc0>
   8b8d0:	8400b804 	addi	r16,r16,736
   8b8d4:	80800117 	ldw	r2,4(r16)
   8b8d8:	81000217 	ldw	r4,8(r16)
   8b8dc:	10ffffc4 	addi	r3,r2,-1
   8b8e0:	18000916 	blt	r3,zero,8b908 <__sfp+0x60>
   8b8e4:	2080030f 	ldh	r2,12(r4)
   8b8e8:	10000b26 	beq	r2,zero,8b918 <__sfp+0x70>
   8b8ec:	017fffc4 	movi	r5,-1
   8b8f0:	00000206 	br	8b8fc <__sfp+0x54>
   8b8f4:	2080030f 	ldh	r2,12(r4)
   8b8f8:	10000726 	beq	r2,zero,8b918 <__sfp+0x70>
   8b8fc:	18ffffc4 	addi	r3,r3,-1
   8b900:	21001704 	addi	r4,r4,92
   8b904:	197ffb1e 	bne	r3,r5,8b8f4 <__sfp+0x4c>
   8b908:	80800017 	ldw	r2,0(r16)
   8b90c:	10001926 	beq	r2,zero,8b974 <__sfp+0xcc>
   8b910:	1021883a 	mov	r16,r2
   8b914:	003fef06 	br	8b8d4 <__sfp+0x2c>
   8b918:	00bfffc4 	movi	r2,-1
   8b91c:	00c00044 	movi	r3,1
   8b920:	2080038d 	sth	r2,14(r4)
   8b924:	20c0030d 	sth	r3,12(r4)
   8b928:	20000015 	stw	zero,0(r4)
   8b92c:	20000215 	stw	zero,8(r4)
   8b930:	20000115 	stw	zero,4(r4)
   8b934:	20000415 	stw	zero,16(r4)
   8b938:	20000515 	stw	zero,20(r4)
   8b93c:	20000615 	stw	zero,24(r4)
   8b940:	20000c15 	stw	zero,48(r4)
   8b944:	20000d15 	stw	zero,52(r4)
   8b948:	20001115 	stw	zero,68(r4)
   8b94c:	20001215 	stw	zero,72(r4)
   8b950:	2005883a 	mov	r2,r4
   8b954:	dfc00217 	ldw	ra,8(sp)
   8b958:	dc400117 	ldw	r17,4(sp)
   8b95c:	dc000017 	ldw	r16,0(sp)
   8b960:	dec00304 	addi	sp,sp,12
   8b964:	f800283a 	ret
   8b968:	8009883a 	mov	r4,r16
   8b96c:	008b70c0 	call	8b70c <__sinit>
   8b970:	003fd706 	br	8b8d0 <__sfp+0x28>
   8b974:	8809883a 	mov	r4,r17
   8b978:	01400104 	movi	r5,4
   8b97c:	008b80c0 	call	8b80c <__sfmoreglue>
   8b980:	80800015 	stw	r2,0(r16)
   8b984:	103fe21e 	bne	r2,zero,8b910 <__sfp+0x68>
   8b988:	00800304 	movi	r2,12
   8b98c:	0009883a 	mov	r4,zero
   8b990:	88800015 	stw	r2,0(r17)
   8b994:	003fee06 	br	8b950 <__sfp+0xa8>

0008b998 <_malloc_trim_r>:
   8b998:	defffb04 	addi	sp,sp,-20
   8b99c:	dcc00315 	stw	r19,12(sp)
   8b9a0:	04c002b4 	movhi	r19,10
   8b9a4:	9cc18004 	addi	r19,r19,1536
   8b9a8:	dc800215 	stw	r18,8(sp)
   8b9ac:	dc400115 	stw	r17,4(sp)
   8b9b0:	dc000015 	stw	r16,0(sp)
   8b9b4:	2823883a 	mov	r17,r5
   8b9b8:	2025883a 	mov	r18,r4
   8b9bc:	dfc00415 	stw	ra,16(sp)
   8b9c0:	00924740 	call	92474 <__malloc_lock>
   8b9c4:	98800217 	ldw	r2,8(r19)
   8b9c8:	9009883a 	mov	r4,r18
   8b9cc:	000b883a 	mov	r5,zero
   8b9d0:	10c00117 	ldw	r3,4(r2)
   8b9d4:	00bfff04 	movi	r2,-4
   8b9d8:	18a0703a 	and	r16,r3,r2
   8b9dc:	8463c83a 	sub	r17,r16,r17
   8b9e0:	8c43fbc4 	addi	r17,r17,4079
   8b9e4:	8822d33a 	srli	r17,r17,12
   8b9e8:	0083ffc4 	movi	r2,4095
   8b9ec:	8c7fffc4 	addi	r17,r17,-1
   8b9f0:	8822933a 	slli	r17,r17,12
   8b9f4:	1440060e 	bge	r2,r17,8ba10 <_malloc_trim_r+0x78>
   8b9f8:	008e9640 	call	8e964 <_sbrk_r>
   8b9fc:	98c00217 	ldw	r3,8(r19)
   8ba00:	9009883a 	mov	r4,r18
   8ba04:	044bc83a 	sub	r5,zero,r17
   8ba08:	80c7883a 	add	r3,r16,r3
   8ba0c:	10c00926 	beq	r2,r3,8ba34 <_malloc_trim_r+0x9c>
   8ba10:	009257c0 	call	9257c <__malloc_unlock>
   8ba14:	0005883a 	mov	r2,zero
   8ba18:	dfc00417 	ldw	ra,16(sp)
   8ba1c:	dcc00317 	ldw	r19,12(sp)
   8ba20:	dc800217 	ldw	r18,8(sp)
   8ba24:	dc400117 	ldw	r17,4(sp)
   8ba28:	dc000017 	ldw	r16,0(sp)
   8ba2c:	dec00504 	addi	sp,sp,20
   8ba30:	f800283a 	ret
   8ba34:	9009883a 	mov	r4,r18
   8ba38:	008e9640 	call	8e964 <_sbrk_r>
   8ba3c:	844dc83a 	sub	r6,r16,r17
   8ba40:	00ffffc4 	movi	r3,-1
   8ba44:	9009883a 	mov	r4,r18
   8ba48:	000b883a 	mov	r5,zero
   8ba4c:	01c002b4 	movhi	r7,10
   8ba50:	39ce5b04 	addi	r7,r7,14700
   8ba54:	31800054 	ori	r6,r6,1
   8ba58:	10c00926 	beq	r2,r3,8ba80 <_malloc_trim_r+0xe8>
   8ba5c:	38800017 	ldw	r2,0(r7)
   8ba60:	98c00217 	ldw	r3,8(r19)
   8ba64:	9009883a 	mov	r4,r18
   8ba68:	1445c83a 	sub	r2,r2,r17
   8ba6c:	38800015 	stw	r2,0(r7)
   8ba70:	19800115 	stw	r6,4(r3)
   8ba74:	009257c0 	call	9257c <__malloc_unlock>
   8ba78:	00800044 	movi	r2,1
   8ba7c:	003fe606 	br	8ba18 <_malloc_trim_r+0x80>
   8ba80:	008e9640 	call	8e964 <_sbrk_r>
   8ba84:	99800217 	ldw	r6,8(r19)
   8ba88:	100f883a 	mov	r7,r2
   8ba8c:	9009883a 	mov	r4,r18
   8ba90:	1187c83a 	sub	r3,r2,r6
   8ba94:	008003c4 	movi	r2,15
   8ba98:	19400054 	ori	r5,r3,1
   8ba9c:	10ffdc0e 	bge	r2,r3,8ba10 <_malloc_trim_r+0x78>
   8baa0:	008002b4 	movhi	r2,10
   8baa4:	10872304 	addi	r2,r2,7308
   8baa8:	10c00017 	ldw	r3,0(r2)
   8baac:	008002b4 	movhi	r2,10
   8bab0:	108e5b04 	addi	r2,r2,14700
   8bab4:	31400115 	stw	r5,4(r6)
   8bab8:	38c7c83a 	sub	r3,r7,r3
   8babc:	10c00015 	stw	r3,0(r2)
   8bac0:	003fd306 	br	8ba10 <_malloc_trim_r+0x78>

0008bac4 <_free_r>:
   8bac4:	defffd04 	addi	sp,sp,-12
   8bac8:	dc400115 	stw	r17,4(sp)
   8bacc:	dc000015 	stw	r16,0(sp)
   8bad0:	dfc00215 	stw	ra,8(sp)
   8bad4:	2821883a 	mov	r16,r5
   8bad8:	2023883a 	mov	r17,r4
   8badc:	28005a26 	beq	r5,zero,8bc48 <_free_r+0x184>
   8bae0:	00924740 	call	92474 <__malloc_lock>
   8bae4:	823ffe04 	addi	r8,r16,-8
   8bae8:	41400117 	ldw	r5,4(r8)
   8baec:	00bfff84 	movi	r2,-2
   8baf0:	028002b4 	movhi	r10,10
   8baf4:	52818004 	addi	r10,r10,1536
   8baf8:	288e703a 	and	r7,r5,r2
   8bafc:	41cd883a 	add	r6,r8,r7
   8bb00:	30c00117 	ldw	r3,4(r6)
   8bb04:	51000217 	ldw	r4,8(r10)
   8bb08:	00bfff04 	movi	r2,-4
   8bb0c:	1892703a 	and	r9,r3,r2
   8bb10:	5017883a 	mov	r11,r10
   8bb14:	31006726 	beq	r6,r4,8bcb4 <_free_r+0x1f0>
   8bb18:	2880004c 	andi	r2,r5,1
   8bb1c:	1005003a 	cmpeq	r2,r2,zero
   8bb20:	32400115 	stw	r9,4(r6)
   8bb24:	10001a1e 	bne	r2,zero,8bb90 <_free_r+0xcc>
   8bb28:	000b883a 	mov	r5,zero
   8bb2c:	3247883a 	add	r3,r6,r9
   8bb30:	18800117 	ldw	r2,4(r3)
   8bb34:	1080004c 	andi	r2,r2,1
   8bb38:	1000231e 	bne	r2,zero,8bbc8 <_free_r+0x104>
   8bb3c:	280ac03a 	cmpne	r5,r5,zero
   8bb40:	3a4f883a 	add	r7,r7,r9
   8bb44:	2800451e 	bne	r5,zero,8bc5c <_free_r+0x198>
   8bb48:	31000217 	ldw	r4,8(r6)
   8bb4c:	008002b4 	movhi	r2,10
   8bb50:	10818204 	addi	r2,r2,1544
   8bb54:	20807b26 	beq	r4,r2,8bd44 <_free_r+0x280>
   8bb58:	30800317 	ldw	r2,12(r6)
   8bb5c:	3a07883a 	add	r3,r7,r8
   8bb60:	19c00015 	stw	r7,0(r3)
   8bb64:	11000215 	stw	r4,8(r2)
   8bb68:	20800315 	stw	r2,12(r4)
   8bb6c:	38800054 	ori	r2,r7,1
   8bb70:	40800115 	stw	r2,4(r8)
   8bb74:	28001a26 	beq	r5,zero,8bbe0 <_free_r+0x11c>
   8bb78:	8809883a 	mov	r4,r17
   8bb7c:	dfc00217 	ldw	ra,8(sp)
   8bb80:	dc400117 	ldw	r17,4(sp)
   8bb84:	dc000017 	ldw	r16,0(sp)
   8bb88:	dec00304 	addi	sp,sp,12
   8bb8c:	009257c1 	jmpi	9257c <__malloc_unlock>
   8bb90:	80bffe17 	ldw	r2,-8(r16)
   8bb94:	50c00204 	addi	r3,r10,8
   8bb98:	4091c83a 	sub	r8,r8,r2
   8bb9c:	41000217 	ldw	r4,8(r8)
   8bba0:	388f883a 	add	r7,r7,r2
   8bba4:	20c06126 	beq	r4,r3,8bd2c <_free_r+0x268>
   8bba8:	40800317 	ldw	r2,12(r8)
   8bbac:	3247883a 	add	r3,r6,r9
   8bbb0:	000b883a 	mov	r5,zero
   8bbb4:	11000215 	stw	r4,8(r2)
   8bbb8:	20800315 	stw	r2,12(r4)
   8bbbc:	18800117 	ldw	r2,4(r3)
   8bbc0:	1080004c 	andi	r2,r2,1
   8bbc4:	103fdd26 	beq	r2,zero,8bb3c <_free_r+0x78>
   8bbc8:	38800054 	ori	r2,r7,1
   8bbcc:	3a07883a 	add	r3,r7,r8
   8bbd0:	280ac03a 	cmpne	r5,r5,zero
   8bbd4:	40800115 	stw	r2,4(r8)
   8bbd8:	19c00015 	stw	r7,0(r3)
   8bbdc:	283fe61e 	bne	r5,zero,8bb78 <_free_r+0xb4>
   8bbe0:	00807fc4 	movi	r2,511
   8bbe4:	11c01f2e 	bgeu	r2,r7,8bc64 <_free_r+0x1a0>
   8bbe8:	3806d27a 	srli	r3,r7,9
   8bbec:	1800481e 	bne	r3,zero,8bd10 <_free_r+0x24c>
   8bbf0:	3804d0fa 	srli	r2,r7,3
   8bbf4:	100690fa 	slli	r3,r2,3
   8bbf8:	1acd883a 	add	r6,r3,r11
   8bbfc:	31400217 	ldw	r5,8(r6)
   8bc00:	31405926 	beq	r6,r5,8bd68 <_free_r+0x2a4>
   8bc04:	28800117 	ldw	r2,4(r5)
   8bc08:	00ffff04 	movi	r3,-4
   8bc0c:	10c4703a 	and	r2,r2,r3
   8bc10:	3880022e 	bgeu	r7,r2,8bc1c <_free_r+0x158>
   8bc14:	29400217 	ldw	r5,8(r5)
   8bc18:	317ffa1e 	bne	r6,r5,8bc04 <_free_r+0x140>
   8bc1c:	29800317 	ldw	r6,12(r5)
   8bc20:	41800315 	stw	r6,12(r8)
   8bc24:	41400215 	stw	r5,8(r8)
   8bc28:	8809883a 	mov	r4,r17
   8bc2c:	2a000315 	stw	r8,12(r5)
   8bc30:	32000215 	stw	r8,8(r6)
   8bc34:	dfc00217 	ldw	ra,8(sp)
   8bc38:	dc400117 	ldw	r17,4(sp)
   8bc3c:	dc000017 	ldw	r16,0(sp)
   8bc40:	dec00304 	addi	sp,sp,12
   8bc44:	009257c1 	jmpi	9257c <__malloc_unlock>
   8bc48:	dfc00217 	ldw	ra,8(sp)
   8bc4c:	dc400117 	ldw	r17,4(sp)
   8bc50:	dc000017 	ldw	r16,0(sp)
   8bc54:	dec00304 	addi	sp,sp,12
   8bc58:	f800283a 	ret
   8bc5c:	31000217 	ldw	r4,8(r6)
   8bc60:	003fbd06 	br	8bb58 <_free_r+0x94>
   8bc64:	3806d0fa 	srli	r3,r7,3
   8bc68:	00800044 	movi	r2,1
   8bc6c:	51400117 	ldw	r5,4(r10)
   8bc70:	180890fa 	slli	r4,r3,3
   8bc74:	1807d0ba 	srai	r3,r3,2
   8bc78:	22c9883a 	add	r4,r4,r11
   8bc7c:	21800217 	ldw	r6,8(r4)
   8bc80:	10c4983a 	sll	r2,r2,r3
   8bc84:	41000315 	stw	r4,12(r8)
   8bc88:	41800215 	stw	r6,8(r8)
   8bc8c:	288ab03a 	or	r5,r5,r2
   8bc90:	22000215 	stw	r8,8(r4)
   8bc94:	8809883a 	mov	r4,r17
   8bc98:	51400115 	stw	r5,4(r10)
   8bc9c:	32000315 	stw	r8,12(r6)
   8bca0:	dfc00217 	ldw	ra,8(sp)
   8bca4:	dc400117 	ldw	r17,4(sp)
   8bca8:	dc000017 	ldw	r16,0(sp)
   8bcac:	dec00304 	addi	sp,sp,12
   8bcb0:	009257c1 	jmpi	9257c <__malloc_unlock>
   8bcb4:	2880004c 	andi	r2,r5,1
   8bcb8:	3a4d883a 	add	r6,r7,r9
   8bcbc:	1000071e 	bne	r2,zero,8bcdc <_free_r+0x218>
   8bcc0:	80bffe17 	ldw	r2,-8(r16)
   8bcc4:	4091c83a 	sub	r8,r8,r2
   8bcc8:	41000317 	ldw	r4,12(r8)
   8bccc:	40c00217 	ldw	r3,8(r8)
   8bcd0:	308d883a 	add	r6,r6,r2
   8bcd4:	20c00215 	stw	r3,8(r4)
   8bcd8:	19000315 	stw	r4,12(r3)
   8bcdc:	008002b4 	movhi	r2,10
   8bce0:	10872204 	addi	r2,r2,7304
   8bce4:	11000017 	ldw	r4,0(r2)
   8bce8:	30c00054 	ori	r3,r6,1
   8bcec:	52000215 	stw	r8,8(r10)
   8bcf0:	40c00115 	stw	r3,4(r8)
   8bcf4:	313fa036 	bltu	r6,r4,8bb78 <_free_r+0xb4>
   8bcf8:	008002b4 	movhi	r2,10
   8bcfc:	108e3804 	addi	r2,r2,14560
   8bd00:	11400017 	ldw	r5,0(r2)
   8bd04:	8809883a 	mov	r4,r17
   8bd08:	008b9980 	call	8b998 <_malloc_trim_r>
   8bd0c:	003f9a06 	br	8bb78 <_free_r+0xb4>
   8bd10:	00800104 	movi	r2,4
   8bd14:	10c0072e 	bgeu	r2,r3,8bd34 <_free_r+0x270>
   8bd18:	00800504 	movi	r2,20
   8bd1c:	10c01936 	bltu	r2,r3,8bd84 <_free_r+0x2c0>
   8bd20:	188016c4 	addi	r2,r3,91
   8bd24:	100690fa 	slli	r3,r2,3
   8bd28:	003fb306 	br	8bbf8 <_free_r+0x134>
   8bd2c:	01400044 	movi	r5,1
   8bd30:	003f7e06 	br	8bb2c <_free_r+0x68>
   8bd34:	3804d1ba 	srli	r2,r7,6
   8bd38:	10800e04 	addi	r2,r2,56
   8bd3c:	100690fa 	slli	r3,r2,3
   8bd40:	003fad06 	br	8bbf8 <_free_r+0x134>
   8bd44:	22000315 	stw	r8,12(r4)
   8bd48:	22000215 	stw	r8,8(r4)
   8bd4c:	3a05883a 	add	r2,r7,r8
   8bd50:	38c00054 	ori	r3,r7,1
   8bd54:	11c00015 	stw	r7,0(r2)
   8bd58:	41000215 	stw	r4,8(r8)
   8bd5c:	40c00115 	stw	r3,4(r8)
   8bd60:	41000315 	stw	r4,12(r8)
   8bd64:	003f8406 	br	8bb78 <_free_r+0xb4>
   8bd68:	1005d0ba 	srai	r2,r2,2
   8bd6c:	00c00044 	movi	r3,1
   8bd70:	51000117 	ldw	r4,4(r10)
   8bd74:	1886983a 	sll	r3,r3,r2
   8bd78:	20c8b03a 	or	r4,r4,r3
   8bd7c:	51000115 	stw	r4,4(r10)
   8bd80:	003fa706 	br	8bc20 <_free_r+0x15c>
   8bd84:	00801504 	movi	r2,84
   8bd88:	10c00436 	bltu	r2,r3,8bd9c <_free_r+0x2d8>
   8bd8c:	3804d33a 	srli	r2,r7,12
   8bd90:	10801b84 	addi	r2,r2,110
   8bd94:	100690fa 	slli	r3,r2,3
   8bd98:	003f9706 	br	8bbf8 <_free_r+0x134>
   8bd9c:	00805504 	movi	r2,340
   8bda0:	10c00436 	bltu	r2,r3,8bdb4 <_free_r+0x2f0>
   8bda4:	3804d3fa 	srli	r2,r7,15
   8bda8:	10801dc4 	addi	r2,r2,119
   8bdac:	100690fa 	slli	r3,r2,3
   8bdb0:	003f9106 	br	8bbf8 <_free_r+0x134>
   8bdb4:	00815504 	movi	r2,1364
   8bdb8:	10c0032e 	bgeu	r2,r3,8bdc8 <_free_r+0x304>
   8bdbc:	00801f84 	movi	r2,126
   8bdc0:	00c0fc04 	movi	r3,1008
   8bdc4:	003f8c06 	br	8bbf8 <_free_r+0x134>
   8bdc8:	3804d4ba 	srli	r2,r7,18
   8bdcc:	10801f04 	addi	r2,r2,124
   8bdd0:	100690fa 	slli	r3,r2,3
   8bdd4:	003f8806 	br	8bbf8 <_free_r+0x134>

0008bdd8 <__sfvwrite_r>:
   8bdd8:	30800217 	ldw	r2,8(r6)
   8bddc:	defff504 	addi	sp,sp,-44
   8bde0:	df000915 	stw	fp,36(sp)
   8bde4:	dd800715 	stw	r22,28(sp)
   8bde8:	dc800315 	stw	r18,12(sp)
   8bdec:	dfc00a15 	stw	ra,40(sp)
   8bdf0:	ddc00815 	stw	r23,32(sp)
   8bdf4:	dd400615 	stw	r21,24(sp)
   8bdf8:	dd000515 	stw	r20,20(sp)
   8bdfc:	dcc00415 	stw	r19,16(sp)
   8be00:	dc400215 	stw	r17,8(sp)
   8be04:	dc000115 	stw	r16,4(sp)
   8be08:	302d883a 	mov	r22,r6
   8be0c:	2039883a 	mov	fp,r4
   8be10:	2825883a 	mov	r18,r5
   8be14:	10001c26 	beq	r2,zero,8be88 <__sfvwrite_r+0xb0>
   8be18:	29c0030b 	ldhu	r7,12(r5)
   8be1c:	3880020c 	andi	r2,r7,8
   8be20:	10002726 	beq	r2,zero,8bec0 <__sfvwrite_r+0xe8>
   8be24:	28800417 	ldw	r2,16(r5)
   8be28:	10002526 	beq	r2,zero,8bec0 <__sfvwrite_r+0xe8>
   8be2c:	3880008c 	andi	r2,r7,2
   8be30:	b5400017 	ldw	r21,0(r22)
   8be34:	10002826 	beq	r2,zero,8bed8 <__sfvwrite_r+0x100>
   8be38:	0021883a 	mov	r16,zero
   8be3c:	0023883a 	mov	r17,zero
   8be40:	880d883a 	mov	r6,r17
   8be44:	e009883a 	mov	r4,fp
   8be48:	00810004 	movi	r2,1024
   8be4c:	80006e26 	beq	r16,zero,8c008 <__sfvwrite_r+0x230>
   8be50:	800f883a 	mov	r7,r16
   8be54:	91400717 	ldw	r5,28(r18)
   8be58:	1400012e 	bgeu	r2,r16,8be60 <__sfvwrite_r+0x88>
   8be5c:	100f883a 	mov	r7,r2
   8be60:	90c00917 	ldw	r3,36(r18)
   8be64:	183ee83a 	callr	r3
   8be68:	1007883a 	mov	r3,r2
   8be6c:	80a1c83a 	sub	r16,r16,r2
   8be70:	88a3883a 	add	r17,r17,r2
   8be74:	00806d0e 	bge	zero,r2,8c02c <__sfvwrite_r+0x254>
   8be78:	b0800217 	ldw	r2,8(r22)
   8be7c:	10c5c83a 	sub	r2,r2,r3
   8be80:	b0800215 	stw	r2,8(r22)
   8be84:	103fee1e 	bne	r2,zero,8be40 <__sfvwrite_r+0x68>
   8be88:	0009883a 	mov	r4,zero
   8be8c:	2005883a 	mov	r2,r4
   8be90:	dfc00a17 	ldw	ra,40(sp)
   8be94:	df000917 	ldw	fp,36(sp)
   8be98:	ddc00817 	ldw	r23,32(sp)
   8be9c:	dd800717 	ldw	r22,28(sp)
   8bea0:	dd400617 	ldw	r21,24(sp)
   8bea4:	dd000517 	ldw	r20,20(sp)
   8bea8:	dcc00417 	ldw	r19,16(sp)
   8beac:	dc800317 	ldw	r18,12(sp)
   8beb0:	dc400217 	ldw	r17,8(sp)
   8beb4:	dc000117 	ldw	r16,4(sp)
   8beb8:	dec00b04 	addi	sp,sp,44
   8bebc:	f800283a 	ret
   8bec0:	0089b400 	call	89b40 <__swsetup_r>
   8bec4:	1000e41e 	bne	r2,zero,8c258 <__sfvwrite_r+0x480>
   8bec8:	91c0030b 	ldhu	r7,12(r18)
   8becc:	b5400017 	ldw	r21,0(r22)
   8bed0:	3880008c 	andi	r2,r7,2
   8bed4:	103fd81e 	bne	r2,zero,8be38 <__sfvwrite_r+0x60>
   8bed8:	3880004c 	andi	r2,r7,1
   8bedc:	1005003a 	cmpeq	r2,r2,zero
   8bee0:	10005726 	beq	r2,zero,8c040 <__sfvwrite_r+0x268>
   8bee4:	0029883a 	mov	r20,zero
   8bee8:	002f883a 	mov	r23,zero
   8beec:	a0004226 	beq	r20,zero,8bff8 <__sfvwrite_r+0x220>
   8bef0:	3880800c 	andi	r2,r7,512
   8bef4:	94000217 	ldw	r16,8(r18)
   8bef8:	10008b26 	beq	r2,zero,8c128 <__sfvwrite_r+0x350>
   8befc:	800d883a 	mov	r6,r16
   8bf00:	a400a536 	bltu	r20,r16,8c198 <__sfvwrite_r+0x3c0>
   8bf04:	3881200c 	andi	r2,r7,1152
   8bf08:	10002726 	beq	r2,zero,8bfa8 <__sfvwrite_r+0x1d0>
   8bf0c:	90800517 	ldw	r2,20(r18)
   8bf10:	92000417 	ldw	r8,16(r18)
   8bf14:	91400017 	ldw	r5,0(r18)
   8bf18:	1087883a 	add	r3,r2,r2
   8bf1c:	1887883a 	add	r3,r3,r2
   8bf20:	1808d7fa 	srli	r4,r3,31
   8bf24:	2a21c83a 	sub	r16,r5,r8
   8bf28:	80800044 	addi	r2,r16,1
   8bf2c:	20c9883a 	add	r4,r4,r3
   8bf30:	2027d07a 	srai	r19,r4,1
   8bf34:	a085883a 	add	r2,r20,r2
   8bf38:	980d883a 	mov	r6,r19
   8bf3c:	9880022e 	bgeu	r19,r2,8bf48 <__sfvwrite_r+0x170>
   8bf40:	1027883a 	mov	r19,r2
   8bf44:	100d883a 	mov	r6,r2
   8bf48:	3881000c 	andi	r2,r7,1024
   8bf4c:	1000b826 	beq	r2,zero,8c230 <__sfvwrite_r+0x458>
   8bf50:	300b883a 	mov	r5,r6
   8bf54:	e009883a 	mov	r4,fp
   8bf58:	008c64c0 	call	8c64c <_malloc_r>
   8bf5c:	10003126 	beq	r2,zero,8c024 <__sfvwrite_r+0x24c>
   8bf60:	91400417 	ldw	r5,16(r18)
   8bf64:	1009883a 	mov	r4,r2
   8bf68:	800d883a 	mov	r6,r16
   8bf6c:	1023883a 	mov	r17,r2
   8bf70:	008ce700 	call	8ce70 <memcpy>
   8bf74:	90c0030b 	ldhu	r3,12(r18)
   8bf78:	00beffc4 	movi	r2,-1025
   8bf7c:	1886703a 	and	r3,r3,r2
   8bf80:	18c02014 	ori	r3,r3,128
   8bf84:	90c0030d 	sth	r3,12(r18)
   8bf88:	9c07c83a 	sub	r3,r19,r16
   8bf8c:	8c05883a 	add	r2,r17,r16
   8bf90:	a00d883a 	mov	r6,r20
   8bf94:	a021883a 	mov	r16,r20
   8bf98:	90800015 	stw	r2,0(r18)
   8bf9c:	90c00215 	stw	r3,8(r18)
   8bfa0:	94400415 	stw	r17,16(r18)
   8bfa4:	94c00515 	stw	r19,20(r18)
   8bfa8:	91000017 	ldw	r4,0(r18)
   8bfac:	b80b883a 	mov	r5,r23
   8bfb0:	a023883a 	mov	r17,r20
   8bfb4:	008cf100 	call	8cf10 <memmove>
   8bfb8:	90c00217 	ldw	r3,8(r18)
   8bfbc:	90800017 	ldw	r2,0(r18)
   8bfc0:	a027883a 	mov	r19,r20
   8bfc4:	1c07c83a 	sub	r3,r3,r16
   8bfc8:	1405883a 	add	r2,r2,r16
   8bfcc:	90c00215 	stw	r3,8(r18)
   8bfd0:	a021883a 	mov	r16,r20
   8bfd4:	90800015 	stw	r2,0(r18)
   8bfd8:	b0800217 	ldw	r2,8(r22)
   8bfdc:	1405c83a 	sub	r2,r2,r16
   8bfe0:	b0800215 	stw	r2,8(r22)
   8bfe4:	103fa826 	beq	r2,zero,8be88 <__sfvwrite_r+0xb0>
   8bfe8:	a469c83a 	sub	r20,r20,r17
   8bfec:	91c0030b 	ldhu	r7,12(r18)
   8bff0:	bcef883a 	add	r23,r23,r19
   8bff4:	a03fbe1e 	bne	r20,zero,8bef0 <__sfvwrite_r+0x118>
   8bff8:	adc00017 	ldw	r23,0(r21)
   8bffc:	ad000117 	ldw	r20,4(r21)
   8c000:	ad400204 	addi	r21,r21,8
   8c004:	003fb906 	br	8beec <__sfvwrite_r+0x114>
   8c008:	ac400017 	ldw	r17,0(r21)
   8c00c:	ac000117 	ldw	r16,4(r21)
   8c010:	ad400204 	addi	r21,r21,8
   8c014:	003f8a06 	br	8be40 <__sfvwrite_r+0x68>
   8c018:	91400417 	ldw	r5,16(r18)
   8c01c:	e009883a 	mov	r4,fp
   8c020:	008bac40 	call	8bac4 <_free_r>
   8c024:	00800304 	movi	r2,12
   8c028:	e0800015 	stw	r2,0(fp)
   8c02c:	9080030b 	ldhu	r2,12(r18)
   8c030:	013fffc4 	movi	r4,-1
   8c034:	10801014 	ori	r2,r2,64
   8c038:	9080030d 	sth	r2,12(r18)
   8c03c:	003f9306 	br	8be8c <__sfvwrite_r+0xb4>
   8c040:	0027883a 	mov	r19,zero
   8c044:	002f883a 	mov	r23,zero
   8c048:	d8000015 	stw	zero,0(sp)
   8c04c:	0029883a 	mov	r20,zero
   8c050:	98001e26 	beq	r19,zero,8c0cc <__sfvwrite_r+0x2f4>
   8c054:	d8c00017 	ldw	r3,0(sp)
   8c058:	1804c03a 	cmpne	r2,r3,zero
   8c05c:	10005e26 	beq	r2,zero,8c1d8 <__sfvwrite_r+0x400>
   8c060:	9821883a 	mov	r16,r19
   8c064:	a4c0012e 	bgeu	r20,r19,8c06c <__sfvwrite_r+0x294>
   8c068:	a021883a 	mov	r16,r20
   8c06c:	91000017 	ldw	r4,0(r18)
   8c070:	90800417 	ldw	r2,16(r18)
   8c074:	91800217 	ldw	r6,8(r18)
   8c078:	91c00517 	ldw	r7,20(r18)
   8c07c:	1100022e 	bgeu	r2,r4,8c088 <__sfvwrite_r+0x2b0>
   8c080:	31e3883a 	add	r17,r6,r7
   8c084:	8c001616 	blt	r17,r16,8c0e0 <__sfvwrite_r+0x308>
   8c088:	81c03816 	blt	r16,r7,8c16c <__sfvwrite_r+0x394>
   8c08c:	90c00917 	ldw	r3,36(r18)
   8c090:	91400717 	ldw	r5,28(r18)
   8c094:	e009883a 	mov	r4,fp
   8c098:	b80d883a 	mov	r6,r23
   8c09c:	183ee83a 	callr	r3
   8c0a0:	1023883a 	mov	r17,r2
   8c0a4:	00bfe10e 	bge	zero,r2,8c02c <__sfvwrite_r+0x254>
   8c0a8:	a469c83a 	sub	r20,r20,r17
   8c0ac:	a0001826 	beq	r20,zero,8c110 <__sfvwrite_r+0x338>
   8c0b0:	b0800217 	ldw	r2,8(r22)
   8c0b4:	1445c83a 	sub	r2,r2,r17
   8c0b8:	b0800215 	stw	r2,8(r22)
   8c0bc:	103f7226 	beq	r2,zero,8be88 <__sfvwrite_r+0xb0>
   8c0c0:	9c67c83a 	sub	r19,r19,r17
   8c0c4:	bc6f883a 	add	r23,r23,r17
   8c0c8:	983fe21e 	bne	r19,zero,8c054 <__sfvwrite_r+0x27c>
   8c0cc:	adc00017 	ldw	r23,0(r21)
   8c0d0:	acc00117 	ldw	r19,4(r21)
   8c0d4:	ad400204 	addi	r21,r21,8
   8c0d8:	d8000015 	stw	zero,0(sp)
   8c0dc:	003fdc06 	br	8c050 <__sfvwrite_r+0x278>
   8c0e0:	b80b883a 	mov	r5,r23
   8c0e4:	880d883a 	mov	r6,r17
   8c0e8:	008cf100 	call	8cf10 <memmove>
   8c0ec:	90c00017 	ldw	r3,0(r18)
   8c0f0:	e009883a 	mov	r4,fp
   8c0f4:	900b883a 	mov	r5,r18
   8c0f8:	1c47883a 	add	r3,r3,r17
   8c0fc:	90c00015 	stw	r3,0(r18)
   8c100:	008b4740 	call	8b474 <_fflush_r>
   8c104:	103fc91e 	bne	r2,zero,8c02c <__sfvwrite_r+0x254>
   8c108:	a469c83a 	sub	r20,r20,r17
   8c10c:	a03fe81e 	bne	r20,zero,8c0b0 <__sfvwrite_r+0x2d8>
   8c110:	e009883a 	mov	r4,fp
   8c114:	900b883a 	mov	r5,r18
   8c118:	008b4740 	call	8b474 <_fflush_r>
   8c11c:	103fc31e 	bne	r2,zero,8c02c <__sfvwrite_r+0x254>
   8c120:	d8000015 	stw	zero,0(sp)
   8c124:	003fe206 	br	8c0b0 <__sfvwrite_r+0x2d8>
   8c128:	91000017 	ldw	r4,0(r18)
   8c12c:	90800417 	ldw	r2,16(r18)
   8c130:	1100022e 	bgeu	r2,r4,8c13c <__sfvwrite_r+0x364>
   8c134:	8023883a 	mov	r17,r16
   8c138:	85003136 	bltu	r16,r20,8c200 <__sfvwrite_r+0x428>
   8c13c:	91c00517 	ldw	r7,20(r18)
   8c140:	a1c01836 	bltu	r20,r7,8c1a4 <__sfvwrite_r+0x3cc>
   8c144:	90c00917 	ldw	r3,36(r18)
   8c148:	91400717 	ldw	r5,28(r18)
   8c14c:	e009883a 	mov	r4,fp
   8c150:	b80d883a 	mov	r6,r23
   8c154:	183ee83a 	callr	r3
   8c158:	1021883a 	mov	r16,r2
   8c15c:	00bfb30e 	bge	zero,r2,8c02c <__sfvwrite_r+0x254>
   8c160:	1023883a 	mov	r17,r2
   8c164:	1027883a 	mov	r19,r2
   8c168:	003f9b06 	br	8bfd8 <__sfvwrite_r+0x200>
   8c16c:	b80b883a 	mov	r5,r23
   8c170:	800d883a 	mov	r6,r16
   8c174:	008cf100 	call	8cf10 <memmove>
   8c178:	90c00217 	ldw	r3,8(r18)
   8c17c:	90800017 	ldw	r2,0(r18)
   8c180:	8023883a 	mov	r17,r16
   8c184:	1c07c83a 	sub	r3,r3,r16
   8c188:	1405883a 	add	r2,r2,r16
   8c18c:	90c00215 	stw	r3,8(r18)
   8c190:	90800015 	stw	r2,0(r18)
   8c194:	003fc406 	br	8c0a8 <__sfvwrite_r+0x2d0>
   8c198:	a00d883a 	mov	r6,r20
   8c19c:	a021883a 	mov	r16,r20
   8c1a0:	003f8106 	br	8bfa8 <__sfvwrite_r+0x1d0>
   8c1a4:	b80b883a 	mov	r5,r23
   8c1a8:	a00d883a 	mov	r6,r20
   8c1ac:	008cf100 	call	8cf10 <memmove>
   8c1b0:	90c00217 	ldw	r3,8(r18)
   8c1b4:	90800017 	ldw	r2,0(r18)
   8c1b8:	a021883a 	mov	r16,r20
   8c1bc:	1d07c83a 	sub	r3,r3,r20
   8c1c0:	1505883a 	add	r2,r2,r20
   8c1c4:	a023883a 	mov	r17,r20
   8c1c8:	a027883a 	mov	r19,r20
   8c1cc:	90c00215 	stw	r3,8(r18)
   8c1d0:	90800015 	stw	r2,0(r18)
   8c1d4:	003f8006 	br	8bfd8 <__sfvwrite_r+0x200>
   8c1d8:	b809883a 	mov	r4,r23
   8c1dc:	01400284 	movi	r5,10
   8c1e0:	980d883a 	mov	r6,r19
   8c1e4:	008cd8c0 	call	8cd8c <memchr>
   8c1e8:	10001726 	beq	r2,zero,8c248 <__sfvwrite_r+0x470>
   8c1ec:	15c5c83a 	sub	r2,r2,r23
   8c1f0:	15000044 	addi	r20,r2,1
   8c1f4:	00800044 	movi	r2,1
   8c1f8:	d8800015 	stw	r2,0(sp)
   8c1fc:	003f9806 	br	8c060 <__sfvwrite_r+0x288>
   8c200:	b80b883a 	mov	r5,r23
   8c204:	800d883a 	mov	r6,r16
   8c208:	008cf100 	call	8cf10 <memmove>
   8c20c:	90c00017 	ldw	r3,0(r18)
   8c210:	e009883a 	mov	r4,fp
   8c214:	900b883a 	mov	r5,r18
   8c218:	1c07883a 	add	r3,r3,r16
   8c21c:	90c00015 	stw	r3,0(r18)
   8c220:	8027883a 	mov	r19,r16
   8c224:	008b4740 	call	8b474 <_fflush_r>
   8c228:	103f6b26 	beq	r2,zero,8bfd8 <__sfvwrite_r+0x200>
   8c22c:	003f7f06 	br	8c02c <__sfvwrite_r+0x254>
   8c230:	400b883a 	mov	r5,r8
   8c234:	e009883a 	mov	r4,fp
   8c238:	008e3000 	call	8e300 <_realloc_r>
   8c23c:	103f7626 	beq	r2,zero,8c018 <__sfvwrite_r+0x240>
   8c240:	1023883a 	mov	r17,r2
   8c244:	003f5006 	br	8bf88 <__sfvwrite_r+0x1b0>
   8c248:	00c00044 	movi	r3,1
   8c24c:	9d000044 	addi	r20,r19,1
   8c250:	d8c00015 	stw	r3,0(sp)
   8c254:	003f8206 	br	8c060 <__sfvwrite_r+0x288>
   8c258:	9080030b 	ldhu	r2,12(r18)
   8c25c:	00c00244 	movi	r3,9
   8c260:	013fffc4 	movi	r4,-1
   8c264:	10801014 	ori	r2,r2,64
   8c268:	9080030d 	sth	r2,12(r18)
   8c26c:	e0c00015 	stw	r3,0(fp)
   8c270:	003f0606 	br	8be8c <__sfvwrite_r+0xb4>

0008c274 <_fwalk_reent>:
   8c274:	defff704 	addi	sp,sp,-36
   8c278:	dcc00315 	stw	r19,12(sp)
   8c27c:	24c0b804 	addi	r19,r4,736
   8c280:	dd800615 	stw	r22,24(sp)
   8c284:	dd400515 	stw	r21,20(sp)
   8c288:	dfc00815 	stw	ra,32(sp)
   8c28c:	ddc00715 	stw	r23,28(sp)
   8c290:	dd000415 	stw	r20,16(sp)
   8c294:	dc800215 	stw	r18,8(sp)
   8c298:	dc400115 	stw	r17,4(sp)
   8c29c:	dc000015 	stw	r16,0(sp)
   8c2a0:	202b883a 	mov	r21,r4
   8c2a4:	282d883a 	mov	r22,r5
   8c2a8:	008b6fc0 	call	8b6fc <__sfp_lock_acquire>
   8c2ac:	98002126 	beq	r19,zero,8c334 <_fwalk_reent+0xc0>
   8c2b0:	002f883a 	mov	r23,zero
   8c2b4:	9c800117 	ldw	r18,4(r19)
   8c2b8:	9c000217 	ldw	r16,8(r19)
   8c2bc:	90bfffc4 	addi	r2,r18,-1
   8c2c0:	10000d16 	blt	r2,zero,8c2f8 <_fwalk_reent+0x84>
   8c2c4:	0023883a 	mov	r17,zero
   8c2c8:	053fffc4 	movi	r20,-1
   8c2cc:	8080030f 	ldh	r2,12(r16)
   8c2d0:	8c400044 	addi	r17,r17,1
   8c2d4:	10000626 	beq	r2,zero,8c2f0 <_fwalk_reent+0x7c>
   8c2d8:	8080038f 	ldh	r2,14(r16)
   8c2dc:	800b883a 	mov	r5,r16
   8c2e0:	a809883a 	mov	r4,r21
   8c2e4:	15000226 	beq	r2,r20,8c2f0 <_fwalk_reent+0x7c>
   8c2e8:	b03ee83a 	callr	r22
   8c2ec:	b8aeb03a 	or	r23,r23,r2
   8c2f0:	84001704 	addi	r16,r16,92
   8c2f4:	947ff51e 	bne	r18,r17,8c2cc <_fwalk_reent+0x58>
   8c2f8:	9cc00017 	ldw	r19,0(r19)
   8c2fc:	983fed1e 	bne	r19,zero,8c2b4 <_fwalk_reent+0x40>
   8c300:	008b7000 	call	8b700 <__sfp_lock_release>
   8c304:	b805883a 	mov	r2,r23
   8c308:	dfc00817 	ldw	ra,32(sp)
   8c30c:	ddc00717 	ldw	r23,28(sp)
   8c310:	dd800617 	ldw	r22,24(sp)
   8c314:	dd400517 	ldw	r21,20(sp)
   8c318:	dd000417 	ldw	r20,16(sp)
   8c31c:	dcc00317 	ldw	r19,12(sp)
   8c320:	dc800217 	ldw	r18,8(sp)
   8c324:	dc400117 	ldw	r17,4(sp)
   8c328:	dc000017 	ldw	r16,0(sp)
   8c32c:	dec00904 	addi	sp,sp,36
   8c330:	f800283a 	ret
   8c334:	002f883a 	mov	r23,zero
   8c338:	003ff106 	br	8c300 <_fwalk_reent+0x8c>

0008c33c <_fwalk>:
   8c33c:	defff804 	addi	sp,sp,-32
   8c340:	dcc00315 	stw	r19,12(sp)
   8c344:	24c0b804 	addi	r19,r4,736
   8c348:	dd400515 	stw	r21,20(sp)
   8c34c:	dfc00715 	stw	ra,28(sp)
   8c350:	dd800615 	stw	r22,24(sp)
   8c354:	dd000415 	stw	r20,16(sp)
   8c358:	dc800215 	stw	r18,8(sp)
   8c35c:	dc400115 	stw	r17,4(sp)
   8c360:	dc000015 	stw	r16,0(sp)
   8c364:	282b883a 	mov	r21,r5
   8c368:	008b6fc0 	call	8b6fc <__sfp_lock_acquire>
   8c36c:	98001f26 	beq	r19,zero,8c3ec <_fwalk+0xb0>
   8c370:	002d883a 	mov	r22,zero
   8c374:	9c800117 	ldw	r18,4(r19)
   8c378:	9c000217 	ldw	r16,8(r19)
   8c37c:	90bfffc4 	addi	r2,r18,-1
   8c380:	10000c16 	blt	r2,zero,8c3b4 <_fwalk+0x78>
   8c384:	0023883a 	mov	r17,zero
   8c388:	053fffc4 	movi	r20,-1
   8c38c:	8080030f 	ldh	r2,12(r16)
   8c390:	8c400044 	addi	r17,r17,1
   8c394:	10000526 	beq	r2,zero,8c3ac <_fwalk+0x70>
   8c398:	8080038f 	ldh	r2,14(r16)
   8c39c:	8009883a 	mov	r4,r16
   8c3a0:	15000226 	beq	r2,r20,8c3ac <_fwalk+0x70>
   8c3a4:	a83ee83a 	callr	r21
   8c3a8:	b0acb03a 	or	r22,r22,r2
   8c3ac:	84001704 	addi	r16,r16,92
   8c3b0:	947ff61e 	bne	r18,r17,8c38c <_fwalk+0x50>
   8c3b4:	9cc00017 	ldw	r19,0(r19)
   8c3b8:	983fee1e 	bne	r19,zero,8c374 <_fwalk+0x38>
   8c3bc:	008b7000 	call	8b700 <__sfp_lock_release>
   8c3c0:	b005883a 	mov	r2,r22
   8c3c4:	dfc00717 	ldw	ra,28(sp)
   8c3c8:	dd800617 	ldw	r22,24(sp)
   8c3cc:	dd400517 	ldw	r21,20(sp)
   8c3d0:	dd000417 	ldw	r20,16(sp)
   8c3d4:	dcc00317 	ldw	r19,12(sp)
   8c3d8:	dc800217 	ldw	r18,8(sp)
   8c3dc:	dc400117 	ldw	r17,4(sp)
   8c3e0:	dc000017 	ldw	r16,0(sp)
   8c3e4:	dec00804 	addi	sp,sp,32
   8c3e8:	f800283a 	ret
   8c3ec:	002d883a 	mov	r22,zero
   8c3f0:	003ff206 	br	8c3bc <_fwalk+0x80>

0008c3f4 <__locale_charset>:
   8c3f4:	d0a00417 	ldw	r2,-32752(gp)
   8c3f8:	f800283a 	ret

0008c3fc <_localeconv_r>:
   8c3fc:	008002b4 	movhi	r2,10
   8c400:	10bf8304 	addi	r2,r2,-500
   8c404:	f800283a 	ret

0008c408 <localeconv>:
   8c408:	008002b4 	movhi	r2,10
   8c40c:	10871e04 	addi	r2,r2,7288
   8c410:	11000017 	ldw	r4,0(r2)
   8c414:	008c3fc1 	jmpi	8c3fc <_localeconv_r>

0008c418 <_setlocale_r>:
   8c418:	defffc04 	addi	sp,sp,-16
   8c41c:	00c002b4 	movhi	r3,10
   8c420:	18ff5904 	addi	r3,r3,-668
   8c424:	dc800215 	stw	r18,8(sp)
   8c428:	dc400115 	stw	r17,4(sp)
   8c42c:	dc000015 	stw	r16,0(sp)
   8c430:	2023883a 	mov	r17,r4
   8c434:	2825883a 	mov	r18,r5
   8c438:	dfc00315 	stw	ra,12(sp)
   8c43c:	3021883a 	mov	r16,r6
   8c440:	3009883a 	mov	r4,r6
   8c444:	180b883a 	mov	r5,r3
   8c448:	30000926 	beq	r6,zero,8c470 <_setlocale_r+0x58>
   8c44c:	008eb200 	call	8eb20 <strcmp>
   8c450:	8009883a 	mov	r4,r16
   8c454:	014002b4 	movhi	r5,10
   8c458:	297f6a04 	addi	r5,r5,-600
   8c45c:	10000b1e 	bne	r2,zero,8c48c <_setlocale_r+0x74>
   8c460:	8c000d15 	stw	r16,52(r17)
   8c464:	8c800c15 	stw	r18,48(r17)
   8c468:	00c002b4 	movhi	r3,10
   8c46c:	18ff5904 	addi	r3,r3,-668
   8c470:	1805883a 	mov	r2,r3
   8c474:	dfc00317 	ldw	ra,12(sp)
   8c478:	dc800217 	ldw	r18,8(sp)
   8c47c:	dc400117 	ldw	r17,4(sp)
   8c480:	dc000017 	ldw	r16,0(sp)
   8c484:	dec00404 	addi	sp,sp,16
   8c488:	f800283a 	ret
   8c48c:	008eb200 	call	8eb20 <strcmp>
   8c490:	0007883a 	mov	r3,zero
   8c494:	103ff226 	beq	r2,zero,8c460 <_setlocale_r+0x48>
   8c498:	003ff506 	br	8c470 <_setlocale_r+0x58>

0008c49c <setlocale>:
   8c49c:	018002b4 	movhi	r6,10
   8c4a0:	31871e04 	addi	r6,r6,7288
   8c4a4:	2007883a 	mov	r3,r4
   8c4a8:	31000017 	ldw	r4,0(r6)
   8c4ac:	280d883a 	mov	r6,r5
   8c4b0:	180b883a 	mov	r5,r3
   8c4b4:	008c4181 	jmpi	8c418 <_setlocale_r>

0008c4b8 <__smakebuf_r>:
   8c4b8:	2880030b 	ldhu	r2,12(r5)
   8c4bc:	deffed04 	addi	sp,sp,-76
   8c4c0:	dc401015 	stw	r17,64(sp)
   8c4c4:	1080008c 	andi	r2,r2,2
   8c4c8:	dc000f15 	stw	r16,60(sp)
   8c4cc:	dfc01215 	stw	ra,72(sp)
   8c4d0:	dc801115 	stw	r18,68(sp)
   8c4d4:	2821883a 	mov	r16,r5
   8c4d8:	2023883a 	mov	r17,r4
   8c4dc:	10000b26 	beq	r2,zero,8c50c <__smakebuf_r+0x54>
   8c4e0:	28c010c4 	addi	r3,r5,67
   8c4e4:	00800044 	movi	r2,1
   8c4e8:	28800515 	stw	r2,20(r5)
   8c4ec:	28c00415 	stw	r3,16(r5)
   8c4f0:	28c00015 	stw	r3,0(r5)
   8c4f4:	dfc01217 	ldw	ra,72(sp)
   8c4f8:	dc801117 	ldw	r18,68(sp)
   8c4fc:	dc401017 	ldw	r17,64(sp)
   8c500:	dc000f17 	ldw	r16,60(sp)
   8c504:	dec01304 	addi	sp,sp,76
   8c508:	f800283a 	ret
   8c50c:	2940038f 	ldh	r5,14(r5)
   8c510:	28002116 	blt	r5,zero,8c598 <__smakebuf_r+0xe0>
   8c514:	d80d883a 	mov	r6,sp
   8c518:	008effc0 	call	8effc <_fstat_r>
   8c51c:	10001e16 	blt	r2,zero,8c598 <__smakebuf_r+0xe0>
   8c520:	d8800117 	ldw	r2,4(sp)
   8c524:	00e00014 	movui	r3,32768
   8c528:	113c000c 	andi	r4,r2,61440
   8c52c:	20c03126 	beq	r4,r3,8c5f4 <__smakebuf_r+0x13c>
   8c530:	8080030b 	ldhu	r2,12(r16)
   8c534:	00c80004 	movi	r3,8192
   8c538:	10820014 	ori	r2,r2,2048
   8c53c:	8080030d 	sth	r2,12(r16)
   8c540:	20c01e26 	beq	r4,r3,8c5bc <__smakebuf_r+0x104>
   8c544:	04810004 	movi	r18,1024
   8c548:	8809883a 	mov	r4,r17
   8c54c:	900b883a 	mov	r5,r18
   8c550:	008c64c0 	call	8c64c <_malloc_r>
   8c554:	1009883a 	mov	r4,r2
   8c558:	10003126 	beq	r2,zero,8c620 <__smakebuf_r+0x168>
   8c55c:	80c0030b 	ldhu	r3,12(r16)
   8c560:	00800274 	movhi	r2,9
   8c564:	10adfc04 	addi	r2,r2,-18448
   8c568:	88800f15 	stw	r2,60(r17)
   8c56c:	18c02014 	ori	r3,r3,128
   8c570:	84800515 	stw	r18,20(r16)
   8c574:	80c0030d 	sth	r3,12(r16)
   8c578:	81000415 	stw	r4,16(r16)
   8c57c:	81000015 	stw	r4,0(r16)
   8c580:	dfc01217 	ldw	ra,72(sp)
   8c584:	dc801117 	ldw	r18,68(sp)
   8c588:	dc401017 	ldw	r17,64(sp)
   8c58c:	dc000f17 	ldw	r16,60(sp)
   8c590:	dec01304 	addi	sp,sp,76
   8c594:	f800283a 	ret
   8c598:	80c0030b 	ldhu	r3,12(r16)
   8c59c:	1880200c 	andi	r2,r3,128
   8c5a0:	10000426 	beq	r2,zero,8c5b4 <__smakebuf_r+0xfc>
   8c5a4:	04801004 	movi	r18,64
   8c5a8:	18820014 	ori	r2,r3,2048
   8c5ac:	8080030d 	sth	r2,12(r16)
   8c5b0:	003fe506 	br	8c548 <__smakebuf_r+0x90>
   8c5b4:	04810004 	movi	r18,1024
   8c5b8:	003ffb06 	br	8c5a8 <__smakebuf_r+0xf0>
   8c5bc:	8140038f 	ldh	r5,14(r16)
   8c5c0:	8809883a 	mov	r4,r17
   8c5c4:	008f0700 	call	8f070 <_isatty_r>
   8c5c8:	103fde26 	beq	r2,zero,8c544 <__smakebuf_r+0x8c>
   8c5cc:	8080030b 	ldhu	r2,12(r16)
   8c5d0:	80c010c4 	addi	r3,r16,67
   8c5d4:	04810004 	movi	r18,1024
   8c5d8:	10800054 	ori	r2,r2,1
   8c5dc:	8080030d 	sth	r2,12(r16)
   8c5e0:	00800044 	movi	r2,1
   8c5e4:	80c00415 	stw	r3,16(r16)
   8c5e8:	80800515 	stw	r2,20(r16)
   8c5ec:	80c00015 	stw	r3,0(r16)
   8c5f0:	003fd506 	br	8c548 <__smakebuf_r+0x90>
   8c5f4:	80c00a17 	ldw	r3,40(r16)
   8c5f8:	00800274 	movhi	r2,9
   8c5fc:	10ba7704 	addi	r2,r2,-5668
   8c600:	18bfcb1e 	bne	r3,r2,8c530 <__smakebuf_r+0x78>
   8c604:	8080030b 	ldhu	r2,12(r16)
   8c608:	00c10004 	movi	r3,1024
   8c60c:	1825883a 	mov	r18,r3
   8c610:	10c4b03a 	or	r2,r2,r3
   8c614:	8080030d 	sth	r2,12(r16)
   8c618:	80c01315 	stw	r3,76(r16)
   8c61c:	003fca06 	br	8c548 <__smakebuf_r+0x90>
   8c620:	8100030b 	ldhu	r4,12(r16)
   8c624:	2080800c 	andi	r2,r4,512
   8c628:	103fb21e 	bne	r2,zero,8c4f4 <__smakebuf_r+0x3c>
   8c62c:	80c010c4 	addi	r3,r16,67
   8c630:	21000094 	ori	r4,r4,2
   8c634:	00800044 	movi	r2,1
   8c638:	80800515 	stw	r2,20(r16)
   8c63c:	8100030d 	sth	r4,12(r16)
   8c640:	80c00415 	stw	r3,16(r16)
   8c644:	80c00015 	stw	r3,0(r16)
   8c648:	003faa06 	br	8c4f4 <__smakebuf_r+0x3c>

0008c64c <_malloc_r>:
   8c64c:	defff604 	addi	sp,sp,-40
   8c650:	28c002c4 	addi	r3,r5,11
   8c654:	00800584 	movi	r2,22
   8c658:	dc800215 	stw	r18,8(sp)
   8c65c:	dfc00915 	stw	ra,36(sp)
   8c660:	df000815 	stw	fp,32(sp)
   8c664:	ddc00715 	stw	r23,28(sp)
   8c668:	dd800615 	stw	r22,24(sp)
   8c66c:	dd400515 	stw	r21,20(sp)
   8c670:	dd000415 	stw	r20,16(sp)
   8c674:	dcc00315 	stw	r19,12(sp)
   8c678:	dc400115 	stw	r17,4(sp)
   8c67c:	dc000015 	stw	r16,0(sp)
   8c680:	2025883a 	mov	r18,r4
   8c684:	10c01236 	bltu	r2,r3,8c6d0 <_malloc_r+0x84>
   8c688:	04400404 	movi	r17,16
   8c68c:	8940142e 	bgeu	r17,r5,8c6e0 <_malloc_r+0x94>
   8c690:	00800304 	movi	r2,12
   8c694:	0007883a 	mov	r3,zero
   8c698:	90800015 	stw	r2,0(r18)
   8c69c:	1805883a 	mov	r2,r3
   8c6a0:	dfc00917 	ldw	ra,36(sp)
   8c6a4:	df000817 	ldw	fp,32(sp)
   8c6a8:	ddc00717 	ldw	r23,28(sp)
   8c6ac:	dd800617 	ldw	r22,24(sp)
   8c6b0:	dd400517 	ldw	r21,20(sp)
   8c6b4:	dd000417 	ldw	r20,16(sp)
   8c6b8:	dcc00317 	ldw	r19,12(sp)
   8c6bc:	dc800217 	ldw	r18,8(sp)
   8c6c0:	dc400117 	ldw	r17,4(sp)
   8c6c4:	dc000017 	ldw	r16,0(sp)
   8c6c8:	dec00a04 	addi	sp,sp,40
   8c6cc:	f800283a 	ret
   8c6d0:	00bffe04 	movi	r2,-8
   8c6d4:	18a2703a 	and	r17,r3,r2
   8c6d8:	883fed16 	blt	r17,zero,8c690 <_malloc_r+0x44>
   8c6dc:	897fec36 	bltu	r17,r5,8c690 <_malloc_r+0x44>
   8c6e0:	9009883a 	mov	r4,r18
   8c6e4:	00924740 	call	92474 <__malloc_lock>
   8c6e8:	00807dc4 	movi	r2,503
   8c6ec:	14402b2e 	bgeu	r2,r17,8c79c <_malloc_r+0x150>
   8c6f0:	8806d27a 	srli	r3,r17,9
   8c6f4:	18003f1e 	bne	r3,zero,8c7f4 <_malloc_r+0x1a8>
   8c6f8:	880cd0fa 	srli	r6,r17,3
   8c6fc:	300490fa 	slli	r2,r6,3
   8c700:	02c002b4 	movhi	r11,10
   8c704:	5ac18004 	addi	r11,r11,1536
   8c708:	12cb883a 	add	r5,r2,r11
   8c70c:	2c000317 	ldw	r16,12(r5)
   8c710:	580f883a 	mov	r7,r11
   8c714:	2c00041e 	bne	r5,r16,8c728 <_malloc_r+0xdc>
   8c718:	00000a06 	br	8c744 <_malloc_r+0xf8>
   8c71c:	1800860e 	bge	r3,zero,8c938 <_malloc_r+0x2ec>
   8c720:	84000317 	ldw	r16,12(r16)
   8c724:	2c000726 	beq	r5,r16,8c744 <_malloc_r+0xf8>
   8c728:	80800117 	ldw	r2,4(r16)
   8c72c:	00ffff04 	movi	r3,-4
   8c730:	10c8703a 	and	r4,r2,r3
   8c734:	2447c83a 	sub	r3,r4,r17
   8c738:	008003c4 	movi	r2,15
   8c73c:	10fff70e 	bge	r2,r3,8c71c <_malloc_r+0xd0>
   8c740:	31bfffc4 	addi	r6,r6,-1
   8c744:	32400044 	addi	r9,r6,1
   8c748:	028002b4 	movhi	r10,10
   8c74c:	52818204 	addi	r10,r10,1544
   8c750:	54000217 	ldw	r16,8(r10)
   8c754:	8280a026 	beq	r16,r10,8c9d8 <_malloc_r+0x38c>
   8c758:	80800117 	ldw	r2,4(r16)
   8c75c:	00ffff04 	movi	r3,-4
   8c760:	10ca703a 	and	r5,r2,r3
   8c764:	2c4dc83a 	sub	r6,r5,r17
   8c768:	008003c4 	movi	r2,15
   8c76c:	11808316 	blt	r2,r6,8c97c <_malloc_r+0x330>
   8c770:	52800315 	stw	r10,12(r10)
   8c774:	52800215 	stw	r10,8(r10)
   8c778:	30002916 	blt	r6,zero,8c820 <_malloc_r+0x1d4>
   8c77c:	8147883a 	add	r3,r16,r5
   8c780:	18800117 	ldw	r2,4(r3)
   8c784:	9009883a 	mov	r4,r18
   8c788:	10800054 	ori	r2,r2,1
   8c78c:	18800115 	stw	r2,4(r3)
   8c790:	009257c0 	call	9257c <__malloc_unlock>
   8c794:	80c00204 	addi	r3,r16,8
   8c798:	003fc006 	br	8c69c <_malloc_r+0x50>
   8c79c:	02c002b4 	movhi	r11,10
   8c7a0:	5ac18004 	addi	r11,r11,1536
   8c7a4:	8ac5883a 	add	r2,r17,r11
   8c7a8:	14000317 	ldw	r16,12(r2)
   8c7ac:	580f883a 	mov	r7,r11
   8c7b0:	8806d0fa 	srli	r3,r17,3
   8c7b4:	14006c26 	beq	r2,r16,8c968 <_malloc_r+0x31c>
   8c7b8:	80c00117 	ldw	r3,4(r16)
   8c7bc:	00bfff04 	movi	r2,-4
   8c7c0:	81800317 	ldw	r6,12(r16)
   8c7c4:	1886703a 	and	r3,r3,r2
   8c7c8:	80c7883a 	add	r3,r16,r3
   8c7cc:	18800117 	ldw	r2,4(r3)
   8c7d0:	81400217 	ldw	r5,8(r16)
   8c7d4:	9009883a 	mov	r4,r18
   8c7d8:	10800054 	ori	r2,r2,1
   8c7dc:	18800115 	stw	r2,4(r3)
   8c7e0:	31400215 	stw	r5,8(r6)
   8c7e4:	29800315 	stw	r6,12(r5)
   8c7e8:	009257c0 	call	9257c <__malloc_unlock>
   8c7ec:	80c00204 	addi	r3,r16,8
   8c7f0:	003faa06 	br	8c69c <_malloc_r+0x50>
   8c7f4:	00800104 	movi	r2,4
   8c7f8:	10c0052e 	bgeu	r2,r3,8c810 <_malloc_r+0x1c4>
   8c7fc:	00800504 	movi	r2,20
   8c800:	10c07836 	bltu	r2,r3,8c9e4 <_malloc_r+0x398>
   8c804:	198016c4 	addi	r6,r3,91
   8c808:	300490fa 	slli	r2,r6,3
   8c80c:	003fbc06 	br	8c700 <_malloc_r+0xb4>
   8c810:	8804d1ba 	srli	r2,r17,6
   8c814:	11800e04 	addi	r6,r2,56
   8c818:	300490fa 	slli	r2,r6,3
   8c81c:	003fb806 	br	8c700 <_malloc_r+0xb4>
   8c820:	00807fc4 	movi	r2,511
   8c824:	1140bb36 	bltu	r2,r5,8cb14 <_malloc_r+0x4c8>
   8c828:	2806d0fa 	srli	r3,r5,3
   8c82c:	573ffe04 	addi	fp,r10,-8
   8c830:	00800044 	movi	r2,1
   8c834:	180890fa 	slli	r4,r3,3
   8c838:	1807d0ba 	srai	r3,r3,2
   8c83c:	e1c00117 	ldw	r7,4(fp)
   8c840:	5909883a 	add	r4,r11,r4
   8c844:	21400217 	ldw	r5,8(r4)
   8c848:	10c4983a 	sll	r2,r2,r3
   8c84c:	81000315 	stw	r4,12(r16)
   8c850:	81400215 	stw	r5,8(r16)
   8c854:	388eb03a 	or	r7,r7,r2
   8c858:	2c000315 	stw	r16,12(r5)
   8c85c:	24000215 	stw	r16,8(r4)
   8c860:	e1c00115 	stw	r7,4(fp)
   8c864:	4807883a 	mov	r3,r9
   8c868:	4800cd16 	blt	r9,zero,8cba0 <_malloc_r+0x554>
   8c86c:	1807d0ba 	srai	r3,r3,2
   8c870:	00800044 	movi	r2,1
   8c874:	10c8983a 	sll	r4,r2,r3
   8c878:	39004436 	bltu	r7,r4,8c98c <_malloc_r+0x340>
   8c87c:	21c4703a 	and	r2,r4,r7
   8c880:	10000a1e 	bne	r2,zero,8c8ac <_malloc_r+0x260>
   8c884:	2109883a 	add	r4,r4,r4
   8c888:	00bfff04 	movi	r2,-4
   8c88c:	4884703a 	and	r2,r9,r2
   8c890:	3906703a 	and	r3,r7,r4
   8c894:	12400104 	addi	r9,r2,4
   8c898:	1800041e 	bne	r3,zero,8c8ac <_malloc_r+0x260>
   8c89c:	2109883a 	add	r4,r4,r4
   8c8a0:	3904703a 	and	r2,r7,r4
   8c8a4:	4a400104 	addi	r9,r9,4
   8c8a8:	103ffc26 	beq	r2,zero,8c89c <_malloc_r+0x250>
   8c8ac:	480490fa 	slli	r2,r9,3
   8c8b0:	4819883a 	mov	r12,r9
   8c8b4:	023fff04 	movi	r8,-4
   8c8b8:	589b883a 	add	r13,r11,r2
   8c8bc:	6807883a 	mov	r3,r13
   8c8c0:	014003c4 	movi	r5,15
   8c8c4:	1c000317 	ldw	r16,12(r3)
   8c8c8:	1c00041e 	bne	r3,r16,8c8dc <_malloc_r+0x290>
   8c8cc:	0000a706 	br	8cb6c <_malloc_r+0x520>
   8c8d0:	3000ab0e 	bge	r6,zero,8cb80 <_malloc_r+0x534>
   8c8d4:	84000317 	ldw	r16,12(r16)
   8c8d8:	1c00a426 	beq	r3,r16,8cb6c <_malloc_r+0x520>
   8c8dc:	80800117 	ldw	r2,4(r16)
   8c8e0:	1204703a 	and	r2,r2,r8
   8c8e4:	144dc83a 	sub	r6,r2,r17
   8c8e8:	29bff90e 	bge	r5,r6,8c8d0 <_malloc_r+0x284>
   8c8ec:	81000317 	ldw	r4,12(r16)
   8c8f0:	80c00217 	ldw	r3,8(r16)
   8c8f4:	89400054 	ori	r5,r17,1
   8c8f8:	8445883a 	add	r2,r16,r17
   8c8fc:	20c00215 	stw	r3,8(r4)
   8c900:	19000315 	stw	r4,12(r3)
   8c904:	81400115 	stw	r5,4(r16)
   8c908:	1187883a 	add	r3,r2,r6
   8c90c:	31000054 	ori	r4,r6,1
   8c910:	50800315 	stw	r2,12(r10)
   8c914:	50800215 	stw	r2,8(r10)
   8c918:	19800015 	stw	r6,0(r3)
   8c91c:	11000115 	stw	r4,4(r2)
   8c920:	12800215 	stw	r10,8(r2)
   8c924:	12800315 	stw	r10,12(r2)
   8c928:	9009883a 	mov	r4,r18
   8c92c:	009257c0 	call	9257c <__malloc_unlock>
   8c930:	80c00204 	addi	r3,r16,8
   8c934:	003f5906 	br	8c69c <_malloc_r+0x50>
   8c938:	8109883a 	add	r4,r16,r4
   8c93c:	20800117 	ldw	r2,4(r4)
   8c940:	80c00217 	ldw	r3,8(r16)
   8c944:	81400317 	ldw	r5,12(r16)
   8c948:	10800054 	ori	r2,r2,1
   8c94c:	20800115 	stw	r2,4(r4)
   8c950:	28c00215 	stw	r3,8(r5)
   8c954:	19400315 	stw	r5,12(r3)
   8c958:	9009883a 	mov	r4,r18
   8c95c:	009257c0 	call	9257c <__malloc_unlock>
   8c960:	80c00204 	addi	r3,r16,8
   8c964:	003f4d06 	br	8c69c <_malloc_r+0x50>
   8c968:	80800204 	addi	r2,r16,8
   8c96c:	14000317 	ldw	r16,12(r2)
   8c970:	143f911e 	bne	r2,r16,8c7b8 <_malloc_r+0x16c>
   8c974:	1a400084 	addi	r9,r3,2
   8c978:	003f7306 	br	8c748 <_malloc_r+0xfc>
   8c97c:	88c00054 	ori	r3,r17,1
   8c980:	8445883a 	add	r2,r16,r17
   8c984:	80c00115 	stw	r3,4(r16)
   8c988:	003fdf06 	br	8c908 <_malloc_r+0x2bc>
   8c98c:	e4000217 	ldw	r16,8(fp)
   8c990:	00bfff04 	movi	r2,-4
   8c994:	80c00117 	ldw	r3,4(r16)
   8c998:	802d883a 	mov	r22,r16
   8c99c:	18aa703a 	and	r21,r3,r2
   8c9a0:	ac401636 	bltu	r21,r17,8c9fc <_malloc_r+0x3b0>
   8c9a4:	ac49c83a 	sub	r4,r21,r17
   8c9a8:	008003c4 	movi	r2,15
   8c9ac:	1100130e 	bge	r2,r4,8c9fc <_malloc_r+0x3b0>
   8c9b0:	88800054 	ori	r2,r17,1
   8c9b4:	8447883a 	add	r3,r16,r17
   8c9b8:	80800115 	stw	r2,4(r16)
   8c9bc:	20800054 	ori	r2,r4,1
   8c9c0:	18800115 	stw	r2,4(r3)
   8c9c4:	e0c00215 	stw	r3,8(fp)
   8c9c8:	9009883a 	mov	r4,r18
   8c9cc:	009257c0 	call	9257c <__malloc_unlock>
   8c9d0:	80c00204 	addi	r3,r16,8
   8c9d4:	003f3106 	br	8c69c <_malloc_r+0x50>
   8c9d8:	39c00117 	ldw	r7,4(r7)
   8c9dc:	573ffe04 	addi	fp,r10,-8
   8c9e0:	003fa006 	br	8c864 <_malloc_r+0x218>
   8c9e4:	00801504 	movi	r2,84
   8c9e8:	10c06736 	bltu	r2,r3,8cb88 <_malloc_r+0x53c>
   8c9ec:	8804d33a 	srli	r2,r17,12
   8c9f0:	11801b84 	addi	r6,r2,110
   8c9f4:	300490fa 	slli	r2,r6,3
   8c9f8:	003f4106 	br	8c700 <_malloc_r+0xb4>
   8c9fc:	d0a71b17 	ldw	r2,-25492(gp)
   8ca00:	d0e00617 	ldw	r3,-32744(gp)
   8ca04:	053fffc4 	movi	r20,-1
   8ca08:	10800404 	addi	r2,r2,16
   8ca0c:	88a7883a 	add	r19,r17,r2
   8ca10:	1d000326 	beq	r3,r20,8ca20 <_malloc_r+0x3d4>
   8ca14:	98c3ffc4 	addi	r3,r19,4095
   8ca18:	00bc0004 	movi	r2,-4096
   8ca1c:	18a6703a 	and	r19,r3,r2
   8ca20:	9009883a 	mov	r4,r18
   8ca24:	980b883a 	mov	r5,r19
   8ca28:	008e9640 	call	8e964 <_sbrk_r>
   8ca2c:	1009883a 	mov	r4,r2
   8ca30:	15000426 	beq	r2,r20,8ca44 <_malloc_r+0x3f8>
   8ca34:	854b883a 	add	r5,r16,r21
   8ca38:	1029883a 	mov	r20,r2
   8ca3c:	11405a2e 	bgeu	r2,r5,8cba8 <_malloc_r+0x55c>
   8ca40:	87000c26 	beq	r16,fp,8ca74 <_malloc_r+0x428>
   8ca44:	e4000217 	ldw	r16,8(fp)
   8ca48:	80c00117 	ldw	r3,4(r16)
   8ca4c:	00bfff04 	movi	r2,-4
   8ca50:	1884703a 	and	r2,r3,r2
   8ca54:	14400336 	bltu	r2,r17,8ca64 <_malloc_r+0x418>
   8ca58:	1449c83a 	sub	r4,r2,r17
   8ca5c:	008003c4 	movi	r2,15
   8ca60:	113fd316 	blt	r2,r4,8c9b0 <_malloc_r+0x364>
   8ca64:	9009883a 	mov	r4,r18
   8ca68:	009257c0 	call	9257c <__malloc_unlock>
   8ca6c:	0007883a 	mov	r3,zero
   8ca70:	003f0a06 	br	8c69c <_malloc_r+0x50>
   8ca74:	05c002b4 	movhi	r23,10
   8ca78:	bdce5b04 	addi	r23,r23,14700
   8ca7c:	b8800017 	ldw	r2,0(r23)
   8ca80:	988d883a 	add	r6,r19,r2
   8ca84:	b9800015 	stw	r6,0(r23)
   8ca88:	d0e00617 	ldw	r3,-32744(gp)
   8ca8c:	00bfffc4 	movi	r2,-1
   8ca90:	18808e26 	beq	r3,r2,8cccc <_malloc_r+0x680>
   8ca94:	2145c83a 	sub	r2,r4,r5
   8ca98:	3085883a 	add	r2,r6,r2
   8ca9c:	b8800015 	stw	r2,0(r23)
   8caa0:	20c001cc 	andi	r3,r4,7
   8caa4:	18005f1e 	bne	r3,zero,8cc24 <_malloc_r+0x5d8>
   8caa8:	000b883a 	mov	r5,zero
   8caac:	a4c5883a 	add	r2,r20,r19
   8cab0:	1083ffcc 	andi	r2,r2,4095
   8cab4:	00c40004 	movi	r3,4096
   8cab8:	1887c83a 	sub	r3,r3,r2
   8cabc:	28e7883a 	add	r19,r5,r3
   8cac0:	9009883a 	mov	r4,r18
   8cac4:	980b883a 	mov	r5,r19
   8cac8:	008e9640 	call	8e964 <_sbrk_r>
   8cacc:	1007883a 	mov	r3,r2
   8cad0:	00bfffc4 	movi	r2,-1
   8cad4:	18807a26 	beq	r3,r2,8ccc0 <_malloc_r+0x674>
   8cad8:	1d05c83a 	sub	r2,r3,r20
   8cadc:	9885883a 	add	r2,r19,r2
   8cae0:	10c00054 	ori	r3,r2,1
   8cae4:	b8800017 	ldw	r2,0(r23)
   8cae8:	a021883a 	mov	r16,r20
   8caec:	a0c00115 	stw	r3,4(r20)
   8caf0:	9885883a 	add	r2,r19,r2
   8caf4:	b8800015 	stw	r2,0(r23)
   8caf8:	e5000215 	stw	r20,8(fp)
   8cafc:	b7003626 	beq	r22,fp,8cbd8 <_malloc_r+0x58c>
   8cb00:	018003c4 	movi	r6,15
   8cb04:	35404b36 	bltu	r6,r21,8cc34 <_malloc_r+0x5e8>
   8cb08:	00800044 	movi	r2,1
   8cb0c:	a0800115 	stw	r2,4(r20)
   8cb10:	003fcd06 	br	8ca48 <_malloc_r+0x3fc>
   8cb14:	2808d27a 	srli	r4,r5,9
   8cb18:	2000371e 	bne	r4,zero,8cbf8 <_malloc_r+0x5ac>
   8cb1c:	2808d0fa 	srli	r4,r5,3
   8cb20:	200690fa 	slli	r3,r4,3
   8cb24:	1ad1883a 	add	r8,r3,r11
   8cb28:	41800217 	ldw	r6,8(r8)
   8cb2c:	41805b26 	beq	r8,r6,8cc9c <_malloc_r+0x650>
   8cb30:	30800117 	ldw	r2,4(r6)
   8cb34:	00ffff04 	movi	r3,-4
   8cb38:	10c4703a 	and	r2,r2,r3
   8cb3c:	2880022e 	bgeu	r5,r2,8cb48 <_malloc_r+0x4fc>
   8cb40:	31800217 	ldw	r6,8(r6)
   8cb44:	41bffa1e 	bne	r8,r6,8cb30 <_malloc_r+0x4e4>
   8cb48:	32000317 	ldw	r8,12(r6)
   8cb4c:	39c00117 	ldw	r7,4(r7)
   8cb50:	82000315 	stw	r8,12(r16)
   8cb54:	81800215 	stw	r6,8(r16)
   8cb58:	070002b4 	movhi	fp,10
   8cb5c:	e7018004 	addi	fp,fp,1536
   8cb60:	34000315 	stw	r16,12(r6)
   8cb64:	44000215 	stw	r16,8(r8)
   8cb68:	003f3e06 	br	8c864 <_malloc_r+0x218>
   8cb6c:	63000044 	addi	r12,r12,1
   8cb70:	608000cc 	andi	r2,r12,3
   8cb74:	10005d26 	beq	r2,zero,8ccec <_malloc_r+0x6a0>
   8cb78:	18c00204 	addi	r3,r3,8
   8cb7c:	003f5106 	br	8c8c4 <_malloc_r+0x278>
   8cb80:	8089883a 	add	r4,r16,r2
   8cb84:	003f6d06 	br	8c93c <_malloc_r+0x2f0>
   8cb88:	00805504 	movi	r2,340
   8cb8c:	10c02036 	bltu	r2,r3,8cc10 <_malloc_r+0x5c4>
   8cb90:	8804d3fa 	srli	r2,r17,15
   8cb94:	11801dc4 	addi	r6,r2,119
   8cb98:	300490fa 	slli	r2,r6,3
   8cb9c:	003ed806 	br	8c700 <_malloc_r+0xb4>
   8cba0:	48c000c4 	addi	r3,r9,3
   8cba4:	003f3106 	br	8c86c <_malloc_r+0x220>
   8cba8:	05c002b4 	movhi	r23,10
   8cbac:	bdce5b04 	addi	r23,r23,14700
   8cbb0:	b8800017 	ldw	r2,0(r23)
   8cbb4:	988d883a 	add	r6,r19,r2
   8cbb8:	b9800015 	stw	r6,0(r23)
   8cbbc:	293fb21e 	bne	r5,r4,8ca88 <_malloc_r+0x43c>
   8cbc0:	2083ffcc 	andi	r2,r4,4095
   8cbc4:	103fb01e 	bne	r2,zero,8ca88 <_malloc_r+0x43c>
   8cbc8:	e4000217 	ldw	r16,8(fp)
   8cbcc:	9d45883a 	add	r2,r19,r21
   8cbd0:	10800054 	ori	r2,r2,1
   8cbd4:	80800115 	stw	r2,4(r16)
   8cbd8:	b8c00017 	ldw	r3,0(r23)
   8cbdc:	d0a71c17 	ldw	r2,-25488(gp)
   8cbe0:	10c0012e 	bgeu	r2,r3,8cbe8 <_malloc_r+0x59c>
   8cbe4:	d0e71c15 	stw	r3,-25488(gp)
   8cbe8:	d0a71d17 	ldw	r2,-25484(gp)
   8cbec:	10ff962e 	bgeu	r2,r3,8ca48 <_malloc_r+0x3fc>
   8cbf0:	d0e71d15 	stw	r3,-25484(gp)
   8cbf4:	003f9406 	br	8ca48 <_malloc_r+0x3fc>
   8cbf8:	00800104 	movi	r2,4
   8cbfc:	11001e36 	bltu	r2,r4,8cc78 <_malloc_r+0x62c>
   8cc00:	2804d1ba 	srli	r2,r5,6
   8cc04:	11000e04 	addi	r4,r2,56
   8cc08:	200690fa 	slli	r3,r4,3
   8cc0c:	003fc506 	br	8cb24 <_malloc_r+0x4d8>
   8cc10:	00815504 	movi	r2,1364
   8cc14:	10c01d2e 	bgeu	r2,r3,8cc8c <_malloc_r+0x640>
   8cc18:	01801f84 	movi	r6,126
   8cc1c:	0080fc04 	movi	r2,1008
   8cc20:	003eb706 	br	8c700 <_malloc_r+0xb4>
   8cc24:	00800204 	movi	r2,8
   8cc28:	10cbc83a 	sub	r5,r2,r3
   8cc2c:	2169883a 	add	r20,r4,r5
   8cc30:	003f9e06 	br	8caac <_malloc_r+0x460>
   8cc34:	00bffe04 	movi	r2,-8
   8cc38:	a93ffd04 	addi	r4,r21,-12
   8cc3c:	2088703a 	and	r4,r4,r2
   8cc40:	b10b883a 	add	r5,r22,r4
   8cc44:	00c00144 	movi	r3,5
   8cc48:	28c00215 	stw	r3,8(r5)
   8cc4c:	28c00115 	stw	r3,4(r5)
   8cc50:	b0800117 	ldw	r2,4(r22)
   8cc54:	1080004c 	andi	r2,r2,1
   8cc58:	2084b03a 	or	r2,r4,r2
   8cc5c:	b0800115 	stw	r2,4(r22)
   8cc60:	313fdd2e 	bgeu	r6,r4,8cbd8 <_malloc_r+0x58c>
   8cc64:	b1400204 	addi	r5,r22,8
   8cc68:	9009883a 	mov	r4,r18
   8cc6c:	008bac40 	call	8bac4 <_free_r>
   8cc70:	e4000217 	ldw	r16,8(fp)
   8cc74:	003fd806 	br	8cbd8 <_malloc_r+0x58c>
   8cc78:	00800504 	movi	r2,20
   8cc7c:	11001536 	bltu	r2,r4,8ccd4 <_malloc_r+0x688>
   8cc80:	210016c4 	addi	r4,r4,91
   8cc84:	200690fa 	slli	r3,r4,3
   8cc88:	003fa606 	br	8cb24 <_malloc_r+0x4d8>
   8cc8c:	8804d4ba 	srli	r2,r17,18
   8cc90:	11801f04 	addi	r6,r2,124
   8cc94:	300490fa 	slli	r2,r6,3
   8cc98:	003e9906 	br	8c700 <_malloc_r+0xb4>
   8cc9c:	2009d0ba 	srai	r4,r4,2
   8cca0:	014002b4 	movhi	r5,10
   8cca4:	29418004 	addi	r5,r5,1536
   8cca8:	00c00044 	movi	r3,1
   8ccac:	28800117 	ldw	r2,4(r5)
   8ccb0:	1906983a 	sll	r3,r3,r4
   8ccb4:	10c4b03a 	or	r2,r2,r3
   8ccb8:	28800115 	stw	r2,4(r5)
   8ccbc:	003fa306 	br	8cb4c <_malloc_r+0x500>
   8ccc0:	0027883a 	mov	r19,zero
   8ccc4:	00c00044 	movi	r3,1
   8ccc8:	003f8606 	br	8cae4 <_malloc_r+0x498>
   8cccc:	d1200615 	stw	r4,-32744(gp)
   8ccd0:	003f7306 	br	8caa0 <_malloc_r+0x454>
   8ccd4:	00801504 	movi	r2,84
   8ccd8:	11001936 	bltu	r2,r4,8cd40 <_malloc_r+0x6f4>
   8ccdc:	2804d33a 	srli	r2,r5,12
   8cce0:	11001b84 	addi	r4,r2,110
   8cce4:	200690fa 	slli	r3,r4,3
   8cce8:	003f8e06 	br	8cb24 <_malloc_r+0x4d8>
   8ccec:	480b883a 	mov	r5,r9
   8ccf0:	6807883a 	mov	r3,r13
   8ccf4:	288000cc 	andi	r2,r5,3
   8ccf8:	18fffe04 	addi	r3,r3,-8
   8ccfc:	297fffc4 	addi	r5,r5,-1
   8cd00:	10001526 	beq	r2,zero,8cd58 <_malloc_r+0x70c>
   8cd04:	18800217 	ldw	r2,8(r3)
   8cd08:	10fffa26 	beq	r2,r3,8ccf4 <_malloc_r+0x6a8>
   8cd0c:	2109883a 	add	r4,r4,r4
   8cd10:	393f1e36 	bltu	r7,r4,8c98c <_malloc_r+0x340>
   8cd14:	203f1d26 	beq	r4,zero,8c98c <_malloc_r+0x340>
   8cd18:	21c4703a 	and	r2,r4,r7
   8cd1c:	10000226 	beq	r2,zero,8cd28 <_malloc_r+0x6dc>
   8cd20:	6013883a 	mov	r9,r12
   8cd24:	003ee106 	br	8c8ac <_malloc_r+0x260>
   8cd28:	2109883a 	add	r4,r4,r4
   8cd2c:	3904703a 	and	r2,r7,r4
   8cd30:	63000104 	addi	r12,r12,4
   8cd34:	103ffc26 	beq	r2,zero,8cd28 <_malloc_r+0x6dc>
   8cd38:	6013883a 	mov	r9,r12
   8cd3c:	003edb06 	br	8c8ac <_malloc_r+0x260>
   8cd40:	00805504 	movi	r2,340
   8cd44:	11000836 	bltu	r2,r4,8cd68 <_malloc_r+0x71c>
   8cd48:	2804d3fa 	srli	r2,r5,15
   8cd4c:	11001dc4 	addi	r4,r2,119
   8cd50:	200690fa 	slli	r3,r4,3
   8cd54:	003f7306 	br	8cb24 <_malloc_r+0x4d8>
   8cd58:	0104303a 	nor	r2,zero,r4
   8cd5c:	388e703a 	and	r7,r7,r2
   8cd60:	e1c00115 	stw	r7,4(fp)
   8cd64:	003fe906 	br	8cd0c <_malloc_r+0x6c0>
   8cd68:	00815504 	movi	r2,1364
   8cd6c:	1100032e 	bgeu	r2,r4,8cd7c <_malloc_r+0x730>
   8cd70:	01001f84 	movi	r4,126
   8cd74:	00c0fc04 	movi	r3,1008
   8cd78:	003f6a06 	br	8cb24 <_malloc_r+0x4d8>
   8cd7c:	2804d4ba 	srli	r2,r5,18
   8cd80:	11001f04 	addi	r4,r2,124
   8cd84:	200690fa 	slli	r3,r4,3
   8cd88:	003f6606 	br	8cb24 <_malloc_r+0x4d8>

0008cd8c <memchr>:
   8cd8c:	008000c4 	movi	r2,3
   8cd90:	29403fcc 	andi	r5,r5,255
   8cd94:	2007883a 	mov	r3,r4
   8cd98:	1180022e 	bgeu	r2,r6,8cda4 <memchr+0x18>
   8cd9c:	2084703a 	and	r2,r4,r2
   8cda0:	10000b26 	beq	r2,zero,8cdd0 <memchr+0x44>
   8cda4:	313fffc4 	addi	r4,r6,-1
   8cda8:	3000051e 	bne	r6,zero,8cdc0 <memchr+0x34>
   8cdac:	00002c06 	br	8ce60 <memchr+0xd4>
   8cdb0:	213fffc4 	addi	r4,r4,-1
   8cdb4:	00bfffc4 	movi	r2,-1
   8cdb8:	18c00044 	addi	r3,r3,1
   8cdbc:	20802826 	beq	r4,r2,8ce60 <memchr+0xd4>
   8cdc0:	18800003 	ldbu	r2,0(r3)
   8cdc4:	28bffa1e 	bne	r5,r2,8cdb0 <memchr+0x24>
   8cdc8:	1805883a 	mov	r2,r3
   8cdcc:	f800283a 	ret
   8cdd0:	0011883a 	mov	r8,zero
   8cdd4:	0007883a 	mov	r3,zero
   8cdd8:	01c00104 	movi	r7,4
   8cddc:	4004923a 	slli	r2,r8,8
   8cde0:	18c00044 	addi	r3,r3,1
   8cde4:	1151883a 	add	r8,r2,r5
   8cde8:	19fffc1e 	bne	r3,r7,8cddc <memchr+0x50>
   8cdec:	02bfbff4 	movhi	r10,65279
   8cdf0:	52bfbfc4 	addi	r10,r10,-257
   8cdf4:	02602074 	movhi	r9,32897
   8cdf8:	4a602004 	addi	r9,r9,-32640
   8cdfc:	02c000c4 	movi	r11,3
   8ce00:	20800017 	ldw	r2,0(r4)
   8ce04:	31bfff04 	addi	r6,r6,-4
   8ce08:	200f883a 	mov	r7,r4
   8ce0c:	1204f03a 	xor	r2,r2,r8
   8ce10:	1287883a 	add	r3,r2,r10
   8ce14:	1a46703a 	and	r3,r3,r9
   8ce18:	0084303a 	nor	r2,zero,r2
   8ce1c:	10c4703a 	and	r2,r2,r3
   8ce20:	10000b26 	beq	r2,zero,8ce50 <memchr+0xc4>
   8ce24:	20800003 	ldbu	r2,0(r4)
   8ce28:	28800f26 	beq	r5,r2,8ce68 <memchr+0xdc>
   8ce2c:	20800043 	ldbu	r2,1(r4)
   8ce30:	21c00044 	addi	r7,r4,1
   8ce34:	28800c26 	beq	r5,r2,8ce68 <memchr+0xdc>
   8ce38:	20800083 	ldbu	r2,2(r4)
   8ce3c:	21c00084 	addi	r7,r4,2
   8ce40:	28800926 	beq	r5,r2,8ce68 <memchr+0xdc>
   8ce44:	208000c3 	ldbu	r2,3(r4)
   8ce48:	21c000c4 	addi	r7,r4,3
   8ce4c:	28800626 	beq	r5,r2,8ce68 <memchr+0xdc>
   8ce50:	21000104 	addi	r4,r4,4
   8ce54:	59bfea36 	bltu	r11,r6,8ce00 <memchr+0x74>
   8ce58:	2007883a 	mov	r3,r4
   8ce5c:	003fd106 	br	8cda4 <memchr+0x18>
   8ce60:	0005883a 	mov	r2,zero
   8ce64:	f800283a 	ret
   8ce68:	3805883a 	mov	r2,r7
   8ce6c:	f800283a 	ret

0008ce70 <memcpy>:
   8ce70:	01c003c4 	movi	r7,15
   8ce74:	2007883a 	mov	r3,r4
   8ce78:	3980032e 	bgeu	r7,r6,8ce88 <memcpy+0x18>
   8ce7c:	2904b03a 	or	r2,r5,r4
   8ce80:	108000cc 	andi	r2,r2,3
   8ce84:	10000926 	beq	r2,zero,8ceac <memcpy+0x3c>
   8ce88:	30000626 	beq	r6,zero,8cea4 <memcpy+0x34>
   8ce8c:	30cd883a 	add	r6,r6,r3
   8ce90:	28800003 	ldbu	r2,0(r5)
   8ce94:	29400044 	addi	r5,r5,1
   8ce98:	18800005 	stb	r2,0(r3)
   8ce9c:	18c00044 	addi	r3,r3,1
   8cea0:	30fffb1e 	bne	r6,r3,8ce90 <memcpy+0x20>
   8cea4:	2005883a 	mov	r2,r4
   8cea8:	f800283a 	ret
   8ceac:	3811883a 	mov	r8,r7
   8ceb0:	200f883a 	mov	r7,r4
   8ceb4:	28c00017 	ldw	r3,0(r5)
   8ceb8:	31bffc04 	addi	r6,r6,-16
   8cebc:	38c00015 	stw	r3,0(r7)
   8cec0:	28800117 	ldw	r2,4(r5)
   8cec4:	38800115 	stw	r2,4(r7)
   8cec8:	28c00217 	ldw	r3,8(r5)
   8cecc:	38c00215 	stw	r3,8(r7)
   8ced0:	28800317 	ldw	r2,12(r5)
   8ced4:	29400404 	addi	r5,r5,16
   8ced8:	38800315 	stw	r2,12(r7)
   8cedc:	39c00404 	addi	r7,r7,16
   8cee0:	41bff436 	bltu	r8,r6,8ceb4 <memcpy+0x44>
   8cee4:	008000c4 	movi	r2,3
   8cee8:	1180072e 	bgeu	r2,r6,8cf08 <memcpy+0x98>
   8ceec:	1007883a 	mov	r3,r2
   8cef0:	28800017 	ldw	r2,0(r5)
   8cef4:	31bfff04 	addi	r6,r6,-4
   8cef8:	29400104 	addi	r5,r5,4
   8cefc:	38800015 	stw	r2,0(r7)
   8cf00:	39c00104 	addi	r7,r7,4
   8cf04:	19bffa36 	bltu	r3,r6,8cef0 <memcpy+0x80>
   8cf08:	3807883a 	mov	r3,r7
   8cf0c:	003fde06 	br	8ce88 <memcpy+0x18>

0008cf10 <memmove>:
   8cf10:	2807883a 	mov	r3,r5
   8cf14:	2011883a 	mov	r8,r4
   8cf18:	29000c2e 	bgeu	r5,r4,8cf4c <memmove+0x3c>
   8cf1c:	298f883a 	add	r7,r5,r6
   8cf20:	21c00a2e 	bgeu	r4,r7,8cf4c <memmove+0x3c>
   8cf24:	30000726 	beq	r6,zero,8cf44 <memmove+0x34>
   8cf28:	2187883a 	add	r3,r4,r6
   8cf2c:	198dc83a 	sub	r6,r3,r6
   8cf30:	39ffffc4 	addi	r7,r7,-1
   8cf34:	38800003 	ldbu	r2,0(r7)
   8cf38:	18ffffc4 	addi	r3,r3,-1
   8cf3c:	18800005 	stb	r2,0(r3)
   8cf40:	19bffb1e 	bne	r3,r6,8cf30 <memmove+0x20>
   8cf44:	2005883a 	mov	r2,r4
   8cf48:	f800283a 	ret
   8cf4c:	01c003c4 	movi	r7,15
   8cf50:	39800a36 	bltu	r7,r6,8cf7c <memmove+0x6c>
   8cf54:	303ffb26 	beq	r6,zero,8cf44 <memmove+0x34>
   8cf58:	400f883a 	mov	r7,r8
   8cf5c:	320d883a 	add	r6,r6,r8
   8cf60:	28800003 	ldbu	r2,0(r5)
   8cf64:	29400044 	addi	r5,r5,1
   8cf68:	38800005 	stb	r2,0(r7)
   8cf6c:	39c00044 	addi	r7,r7,1
   8cf70:	39bffb1e 	bne	r7,r6,8cf60 <memmove+0x50>
   8cf74:	2005883a 	mov	r2,r4
   8cf78:	f800283a 	ret
   8cf7c:	1904b03a 	or	r2,r3,r4
   8cf80:	108000cc 	andi	r2,r2,3
   8cf84:	103ff31e 	bne	r2,zero,8cf54 <memmove+0x44>
   8cf88:	3811883a 	mov	r8,r7
   8cf8c:	180b883a 	mov	r5,r3
   8cf90:	200f883a 	mov	r7,r4
   8cf94:	28c00017 	ldw	r3,0(r5)
   8cf98:	31bffc04 	addi	r6,r6,-16
   8cf9c:	38c00015 	stw	r3,0(r7)
   8cfa0:	28800117 	ldw	r2,4(r5)
   8cfa4:	38800115 	stw	r2,4(r7)
   8cfa8:	28c00217 	ldw	r3,8(r5)
   8cfac:	38c00215 	stw	r3,8(r7)
   8cfb0:	28800317 	ldw	r2,12(r5)
   8cfb4:	29400404 	addi	r5,r5,16
   8cfb8:	38800315 	stw	r2,12(r7)
   8cfbc:	39c00404 	addi	r7,r7,16
   8cfc0:	41bff436 	bltu	r8,r6,8cf94 <memmove+0x84>
   8cfc4:	008000c4 	movi	r2,3
   8cfc8:	1180072e 	bgeu	r2,r6,8cfe8 <memmove+0xd8>
   8cfcc:	1007883a 	mov	r3,r2
   8cfd0:	28800017 	ldw	r2,0(r5)
   8cfd4:	31bfff04 	addi	r6,r6,-4
   8cfd8:	29400104 	addi	r5,r5,4
   8cfdc:	38800015 	stw	r2,0(r7)
   8cfe0:	39c00104 	addi	r7,r7,4
   8cfe4:	19bffa36 	bltu	r3,r6,8cfd0 <memmove+0xc0>
   8cfe8:	3811883a 	mov	r8,r7
   8cfec:	003fd906 	br	8cf54 <memmove+0x44>

0008cff0 <memset>:
   8cff0:	008000c4 	movi	r2,3
   8cff4:	29403fcc 	andi	r5,r5,255
   8cff8:	2007883a 	mov	r3,r4
   8cffc:	1180022e 	bgeu	r2,r6,8d008 <memset+0x18>
   8d000:	2084703a 	and	r2,r4,r2
   8d004:	10000826 	beq	r2,zero,8d028 <memset+0x38>
   8d008:	30000526 	beq	r6,zero,8d020 <memset+0x30>
   8d00c:	2805883a 	mov	r2,r5
   8d010:	30cd883a 	add	r6,r6,r3
   8d014:	18800005 	stb	r2,0(r3)
   8d018:	18c00044 	addi	r3,r3,1
   8d01c:	19bffd1e 	bne	r3,r6,8d014 <memset+0x24>
   8d020:	2005883a 	mov	r2,r4
   8d024:	f800283a 	ret
   8d028:	2804923a 	slli	r2,r5,8
   8d02c:	020003c4 	movi	r8,15
   8d030:	200f883a 	mov	r7,r4
   8d034:	2884b03a 	or	r2,r5,r2
   8d038:	1006943a 	slli	r3,r2,16
   8d03c:	10c6b03a 	or	r3,r2,r3
   8d040:	41800a2e 	bgeu	r8,r6,8d06c <memset+0x7c>
   8d044:	4005883a 	mov	r2,r8
   8d048:	31bffc04 	addi	r6,r6,-16
   8d04c:	38c00015 	stw	r3,0(r7)
   8d050:	38c00115 	stw	r3,4(r7)
   8d054:	38c00215 	stw	r3,8(r7)
   8d058:	38c00315 	stw	r3,12(r7)
   8d05c:	39c00404 	addi	r7,r7,16
   8d060:	11bff936 	bltu	r2,r6,8d048 <memset+0x58>
   8d064:	008000c4 	movi	r2,3
   8d068:	1180052e 	bgeu	r2,r6,8d080 <memset+0x90>
   8d06c:	31bfff04 	addi	r6,r6,-4
   8d070:	008000c4 	movi	r2,3
   8d074:	38c00015 	stw	r3,0(r7)
   8d078:	39c00104 	addi	r7,r7,4
   8d07c:	11bffb36 	bltu	r2,r6,8d06c <memset+0x7c>
   8d080:	3807883a 	mov	r3,r7
   8d084:	003fe006 	br	8d008 <memset+0x18>

0008d088 <_Bfree>:
   8d088:	28000826 	beq	r5,zero,8d0ac <_Bfree+0x24>
   8d08c:	28800117 	ldw	r2,4(r5)
   8d090:	21001317 	ldw	r4,76(r4)
   8d094:	1085883a 	add	r2,r2,r2
   8d098:	1085883a 	add	r2,r2,r2
   8d09c:	1105883a 	add	r2,r2,r4
   8d0a0:	10c00017 	ldw	r3,0(r2)
   8d0a4:	28c00015 	stw	r3,0(r5)
   8d0a8:	11400015 	stw	r5,0(r2)
   8d0ac:	f800283a 	ret

0008d0b0 <__hi0bits>:
   8d0b0:	20bfffec 	andhi	r2,r4,65535
   8d0b4:	10001426 	beq	r2,zero,8d108 <__hi0bits+0x58>
   8d0b8:	0007883a 	mov	r3,zero
   8d0bc:	20bfc02c 	andhi	r2,r4,65280
   8d0c0:	1000021e 	bne	r2,zero,8d0cc <__hi0bits+0x1c>
   8d0c4:	2008923a 	slli	r4,r4,8
   8d0c8:	18c00204 	addi	r3,r3,8
   8d0cc:	20bc002c 	andhi	r2,r4,61440
   8d0d0:	1000021e 	bne	r2,zero,8d0dc <__hi0bits+0x2c>
   8d0d4:	2008913a 	slli	r4,r4,4
   8d0d8:	18c00104 	addi	r3,r3,4
   8d0dc:	20b0002c 	andhi	r2,r4,49152
   8d0e0:	1000031e 	bne	r2,zero,8d0f0 <__hi0bits+0x40>
   8d0e4:	2105883a 	add	r2,r4,r4
   8d0e8:	18c00084 	addi	r3,r3,2
   8d0ec:	1089883a 	add	r4,r2,r2
   8d0f0:	20000316 	blt	r4,zero,8d100 <__hi0bits+0x50>
   8d0f4:	2090002c 	andhi	r2,r4,16384
   8d0f8:	10000626 	beq	r2,zero,8d114 <__hi0bits+0x64>
   8d0fc:	18c00044 	addi	r3,r3,1
   8d100:	1805883a 	mov	r2,r3
   8d104:	f800283a 	ret
   8d108:	2008943a 	slli	r4,r4,16
   8d10c:	00c00404 	movi	r3,16
   8d110:	003fea06 	br	8d0bc <__hi0bits+0xc>
   8d114:	00c00804 	movi	r3,32
   8d118:	1805883a 	mov	r2,r3
   8d11c:	f800283a 	ret

0008d120 <__lo0bits>:
   8d120:	20c00017 	ldw	r3,0(r4)
   8d124:	188001cc 	andi	r2,r3,7
   8d128:	10000a26 	beq	r2,zero,8d154 <__lo0bits+0x34>
   8d12c:	1880004c 	andi	r2,r3,1
   8d130:	1005003a 	cmpeq	r2,r2,zero
   8d134:	10002126 	beq	r2,zero,8d1bc <__lo0bits+0x9c>
   8d138:	1880008c 	andi	r2,r3,2
   8d13c:	1000251e 	bne	r2,zero,8d1d4 <__lo0bits+0xb4>
   8d140:	1804d0ba 	srli	r2,r3,2
   8d144:	01400084 	movi	r5,2
   8d148:	20800015 	stw	r2,0(r4)
   8d14c:	2805883a 	mov	r2,r5
   8d150:	f800283a 	ret
   8d154:	18bfffcc 	andi	r2,r3,65535
   8d158:	10001526 	beq	r2,zero,8d1b0 <__lo0bits+0x90>
   8d15c:	000b883a 	mov	r5,zero
   8d160:	18803fcc 	andi	r2,r3,255
   8d164:	1000021e 	bne	r2,zero,8d170 <__lo0bits+0x50>
   8d168:	1806d23a 	srli	r3,r3,8
   8d16c:	29400204 	addi	r5,r5,8
   8d170:	188003cc 	andi	r2,r3,15
   8d174:	1000021e 	bne	r2,zero,8d180 <__lo0bits+0x60>
   8d178:	1806d13a 	srli	r3,r3,4
   8d17c:	29400104 	addi	r5,r5,4
   8d180:	188000cc 	andi	r2,r3,3
   8d184:	1000021e 	bne	r2,zero,8d190 <__lo0bits+0x70>
   8d188:	1806d0ba 	srli	r3,r3,2
   8d18c:	29400084 	addi	r5,r5,2
   8d190:	1880004c 	andi	r2,r3,1
   8d194:	1000031e 	bne	r2,zero,8d1a4 <__lo0bits+0x84>
   8d198:	1806d07a 	srli	r3,r3,1
   8d19c:	18000a26 	beq	r3,zero,8d1c8 <__lo0bits+0xa8>
   8d1a0:	29400044 	addi	r5,r5,1
   8d1a4:	2805883a 	mov	r2,r5
   8d1a8:	20c00015 	stw	r3,0(r4)
   8d1ac:	f800283a 	ret
   8d1b0:	1806d43a 	srli	r3,r3,16
   8d1b4:	01400404 	movi	r5,16
   8d1b8:	003fe906 	br	8d160 <__lo0bits+0x40>
   8d1bc:	000b883a 	mov	r5,zero
   8d1c0:	2805883a 	mov	r2,r5
   8d1c4:	f800283a 	ret
   8d1c8:	01400804 	movi	r5,32
   8d1cc:	2805883a 	mov	r2,r5
   8d1d0:	f800283a 	ret
   8d1d4:	1804d07a 	srli	r2,r3,1
   8d1d8:	01400044 	movi	r5,1
   8d1dc:	20800015 	stw	r2,0(r4)
   8d1e0:	003fda06 	br	8d14c <__lo0bits+0x2c>

0008d1e4 <__mcmp>:
   8d1e4:	20800417 	ldw	r2,16(r4)
   8d1e8:	28c00417 	ldw	r3,16(r5)
   8d1ec:	10cfc83a 	sub	r7,r2,r3
   8d1f0:	38000c1e 	bne	r7,zero,8d224 <__mcmp+0x40>
   8d1f4:	18c5883a 	add	r2,r3,r3
   8d1f8:	1085883a 	add	r2,r2,r2
   8d1fc:	10c00504 	addi	r3,r2,20
   8d200:	21000504 	addi	r4,r4,20
   8d204:	28cb883a 	add	r5,r5,r3
   8d208:	2085883a 	add	r2,r4,r2
   8d20c:	10bfff04 	addi	r2,r2,-4
   8d210:	297fff04 	addi	r5,r5,-4
   8d214:	11800017 	ldw	r6,0(r2)
   8d218:	28c00017 	ldw	r3,0(r5)
   8d21c:	30c0031e 	bne	r6,r3,8d22c <__mcmp+0x48>
   8d220:	20bffa36 	bltu	r4,r2,8d20c <__mcmp+0x28>
   8d224:	3805883a 	mov	r2,r7
   8d228:	f800283a 	ret
   8d22c:	30c00336 	bltu	r6,r3,8d23c <__mcmp+0x58>
   8d230:	01c00044 	movi	r7,1
   8d234:	3805883a 	mov	r2,r7
   8d238:	f800283a 	ret
   8d23c:	01ffffc4 	movi	r7,-1
   8d240:	003ff806 	br	8d224 <__mcmp+0x40>

0008d244 <__ulp>:
   8d244:	295ffc2c 	andhi	r5,r5,32752
   8d248:	013f3034 	movhi	r4,64704
   8d24c:	290b883a 	add	r5,r5,r4
   8d250:	0145c83a 	sub	r2,zero,r5
   8d254:	1007d53a 	srai	r3,r2,20
   8d258:	000d883a 	mov	r6,zero
   8d25c:	0140040e 	bge	zero,r5,8d270 <__ulp+0x2c>
   8d260:	280f883a 	mov	r7,r5
   8d264:	3807883a 	mov	r3,r7
   8d268:	3005883a 	mov	r2,r6
   8d26c:	f800283a 	ret
   8d270:	008004c4 	movi	r2,19
   8d274:	193ffb04 	addi	r4,r3,-20
   8d278:	10c00c0e 	bge	r2,r3,8d2ac <__ulp+0x68>
   8d27c:	008007c4 	movi	r2,31
   8d280:	1107c83a 	sub	r3,r2,r4
   8d284:	00800784 	movi	r2,30
   8d288:	01400044 	movi	r5,1
   8d28c:	11000216 	blt	r2,r4,8d298 <__ulp+0x54>
   8d290:	00800044 	movi	r2,1
   8d294:	10ca983a 	sll	r5,r2,r3
   8d298:	000f883a 	mov	r7,zero
   8d29c:	280d883a 	mov	r6,r5
   8d2a0:	3807883a 	mov	r3,r7
   8d2a4:	3005883a 	mov	r2,r6
   8d2a8:	f800283a 	ret
   8d2ac:	00800234 	movhi	r2,8
   8d2b0:	10cfd83a 	sra	r7,r2,r3
   8d2b4:	000d883a 	mov	r6,zero
   8d2b8:	3005883a 	mov	r2,r6
   8d2bc:	3807883a 	mov	r3,r7
   8d2c0:	f800283a 	ret

0008d2c4 <__b2d>:
   8d2c4:	20800417 	ldw	r2,16(r4)
   8d2c8:	defff904 	addi	sp,sp,-28
   8d2cc:	dd000415 	stw	r20,16(sp)
   8d2d0:	1085883a 	add	r2,r2,r2
   8d2d4:	25000504 	addi	r20,r4,20
   8d2d8:	1085883a 	add	r2,r2,r2
   8d2dc:	dc000015 	stw	r16,0(sp)
   8d2e0:	a0a1883a 	add	r16,r20,r2
   8d2e4:	dd400515 	stw	r21,20(sp)
   8d2e8:	857fff17 	ldw	r21,-4(r16)
   8d2ec:	dc400115 	stw	r17,4(sp)
   8d2f0:	dfc00615 	stw	ra,24(sp)
   8d2f4:	a809883a 	mov	r4,r21
   8d2f8:	2823883a 	mov	r17,r5
   8d2fc:	dcc00315 	stw	r19,12(sp)
   8d300:	dc800215 	stw	r18,8(sp)
   8d304:	008d0b00 	call	8d0b0 <__hi0bits>
   8d308:	100b883a 	mov	r5,r2
   8d30c:	00800804 	movi	r2,32
   8d310:	1145c83a 	sub	r2,r2,r5
   8d314:	88800015 	stw	r2,0(r17)
   8d318:	00800284 	movi	r2,10
   8d31c:	80ffff04 	addi	r3,r16,-4
   8d320:	11401416 	blt	r2,r5,8d374 <__b2d+0xb0>
   8d324:	008002c4 	movi	r2,11
   8d328:	1149c83a 	sub	r4,r2,r5
   8d32c:	a0c02736 	bltu	r20,r3,8d3cc <__b2d+0x108>
   8d330:	000d883a 	mov	r6,zero
   8d334:	28800544 	addi	r2,r5,21
   8d338:	a906d83a 	srl	r3,r21,r4
   8d33c:	a884983a 	sll	r2,r21,r2
   8d340:	1ccffc34 	orhi	r19,r3,16368
   8d344:	11a4b03a 	or	r18,r2,r6
   8d348:	9005883a 	mov	r2,r18
   8d34c:	9807883a 	mov	r3,r19
   8d350:	dfc00617 	ldw	ra,24(sp)
   8d354:	dd400517 	ldw	r21,20(sp)
   8d358:	dd000417 	ldw	r20,16(sp)
   8d35c:	dcc00317 	ldw	r19,12(sp)
   8d360:	dc800217 	ldw	r18,8(sp)
   8d364:	dc400117 	ldw	r17,4(sp)
   8d368:	dc000017 	ldw	r16,0(sp)
   8d36c:	dec00704 	addi	sp,sp,28
   8d370:	f800283a 	ret
   8d374:	a0c00e36 	bltu	r20,r3,8d3b0 <__b2d+0xec>
   8d378:	293ffd44 	addi	r4,r5,-11
   8d37c:	000d883a 	mov	r6,zero
   8d380:	20000f26 	beq	r4,zero,8d3c0 <__b2d+0xfc>
   8d384:	00800804 	movi	r2,32
   8d388:	110bc83a 	sub	r5,r2,r4
   8d38c:	a0c01236 	bltu	r20,r3,8d3d8 <__b2d+0x114>
   8d390:	000f883a 	mov	r7,zero
   8d394:	a904983a 	sll	r2,r21,r4
   8d398:	3146d83a 	srl	r3,r6,r5
   8d39c:	3108983a 	sll	r4,r6,r4
   8d3a0:	108ffc34 	orhi	r2,r2,16368
   8d3a4:	18a6b03a 	or	r19,r3,r2
   8d3a8:	3924b03a 	or	r18,r7,r4
   8d3ac:	003fe606 	br	8d348 <__b2d+0x84>
   8d3b0:	293ffd44 	addi	r4,r5,-11
   8d3b4:	81bffe17 	ldw	r6,-8(r16)
   8d3b8:	80fffe04 	addi	r3,r16,-8
   8d3bc:	203ff11e 	bne	r4,zero,8d384 <__b2d+0xc0>
   8d3c0:	accffc34 	orhi	r19,r21,16368
   8d3c4:	3025883a 	mov	r18,r6
   8d3c8:	003fdf06 	br	8d348 <__b2d+0x84>
   8d3cc:	18bfff17 	ldw	r2,-4(r3)
   8d3d0:	110cd83a 	srl	r6,r2,r4
   8d3d4:	003fd706 	br	8d334 <__b2d+0x70>
   8d3d8:	18bfff17 	ldw	r2,-4(r3)
   8d3dc:	114ed83a 	srl	r7,r2,r5
   8d3e0:	003fec06 	br	8d394 <__b2d+0xd0>

0008d3e4 <__ratio>:
   8d3e4:	defff904 	addi	sp,sp,-28
   8d3e8:	dc400215 	stw	r17,8(sp)
   8d3ec:	2823883a 	mov	r17,r5
   8d3f0:	d80b883a 	mov	r5,sp
   8d3f4:	dfc00615 	stw	ra,24(sp)
   8d3f8:	dd000515 	stw	r20,20(sp)
   8d3fc:	dcc00415 	stw	r19,16(sp)
   8d400:	dc800315 	stw	r18,12(sp)
   8d404:	2025883a 	mov	r18,r4
   8d408:	008d2c40 	call	8d2c4 <__b2d>
   8d40c:	8809883a 	mov	r4,r17
   8d410:	d9400104 	addi	r5,sp,4
   8d414:	1027883a 	mov	r19,r2
   8d418:	1829883a 	mov	r20,r3
   8d41c:	008d2c40 	call	8d2c4 <__b2d>
   8d420:	89000417 	ldw	r4,16(r17)
   8d424:	91c00417 	ldw	r7,16(r18)
   8d428:	d9800117 	ldw	r6,4(sp)
   8d42c:	180b883a 	mov	r5,r3
   8d430:	390fc83a 	sub	r7,r7,r4
   8d434:	1009883a 	mov	r4,r2
   8d438:	d8800017 	ldw	r2,0(sp)
   8d43c:	380e917a 	slli	r7,r7,5
   8d440:	2011883a 	mov	r8,r4
   8d444:	1185c83a 	sub	r2,r2,r6
   8d448:	11c5883a 	add	r2,r2,r7
   8d44c:	1006953a 	slli	r3,r2,20
   8d450:	2813883a 	mov	r9,r5
   8d454:	00800d0e 	bge	zero,r2,8d48c <__ratio+0xa8>
   8d458:	1d29883a 	add	r20,r3,r20
   8d45c:	a00b883a 	mov	r5,r20
   8d460:	480f883a 	mov	r7,r9
   8d464:	9809883a 	mov	r4,r19
   8d468:	400d883a 	mov	r6,r8
   8d46c:	00907640 	call	90764 <__divdf3>
   8d470:	dfc00617 	ldw	ra,24(sp)
   8d474:	dd000517 	ldw	r20,20(sp)
   8d478:	dcc00417 	ldw	r19,16(sp)
   8d47c:	dc800317 	ldw	r18,12(sp)
   8d480:	dc400217 	ldw	r17,8(sp)
   8d484:	dec00704 	addi	sp,sp,28
   8d488:	f800283a 	ret
   8d48c:	28d3c83a 	sub	r9,r5,r3
   8d490:	003ff206 	br	8d45c <__ratio+0x78>

0008d494 <_mprec_log10>:
   8d494:	defffe04 	addi	sp,sp,-8
   8d498:	008005c4 	movi	r2,23
   8d49c:	dc000015 	stw	r16,0(sp)
   8d4a0:	dfc00115 	stw	ra,4(sp)
   8d4a4:	2021883a 	mov	r16,r4
   8d4a8:	11000c16 	blt	r2,r4,8d4dc <_mprec_log10+0x48>
   8d4ac:	200490fa 	slli	r2,r4,3
   8d4b0:	00c002b4 	movhi	r3,10
   8d4b4:	18ff8f04 	addi	r3,r3,-452
   8d4b8:	10c5883a 	add	r2,r2,r3
   8d4bc:	12400117 	ldw	r9,4(r2)
   8d4c0:	12000017 	ldw	r8,0(r2)
   8d4c4:	4807883a 	mov	r3,r9
   8d4c8:	4005883a 	mov	r2,r8
   8d4cc:	dfc00117 	ldw	ra,4(sp)
   8d4d0:	dc000017 	ldw	r16,0(sp)
   8d4d4:	dec00204 	addi	sp,sp,8
   8d4d8:	f800283a 	ret
   8d4dc:	0011883a 	mov	r8,zero
   8d4e0:	024ffc34 	movhi	r9,16368
   8d4e4:	0005883a 	mov	r2,zero
   8d4e8:	00d00934 	movhi	r3,16420
   8d4ec:	480b883a 	mov	r5,r9
   8d4f0:	4009883a 	mov	r4,r8
   8d4f4:	180f883a 	mov	r7,r3
   8d4f8:	100d883a 	mov	r6,r2
   8d4fc:	00903a00 	call	903a0 <__muldf3>
   8d500:	843fffc4 	addi	r16,r16,-1
   8d504:	1011883a 	mov	r8,r2
   8d508:	1813883a 	mov	r9,r3
   8d50c:	803ff51e 	bne	r16,zero,8d4e4 <_mprec_log10+0x50>
   8d510:	4005883a 	mov	r2,r8
   8d514:	4807883a 	mov	r3,r9
   8d518:	dfc00117 	ldw	ra,4(sp)
   8d51c:	dc000017 	ldw	r16,0(sp)
   8d520:	dec00204 	addi	sp,sp,8
   8d524:	f800283a 	ret

0008d528 <__copybits>:
   8d528:	297fffc4 	addi	r5,r5,-1
   8d52c:	30800417 	ldw	r2,16(r6)
   8d530:	280bd17a 	srai	r5,r5,5
   8d534:	31800504 	addi	r6,r6,20
   8d538:	1085883a 	add	r2,r2,r2
   8d53c:	294b883a 	add	r5,r5,r5
   8d540:	294b883a 	add	r5,r5,r5
   8d544:	1085883a 	add	r2,r2,r2
   8d548:	290b883a 	add	r5,r5,r4
   8d54c:	3087883a 	add	r3,r6,r2
   8d550:	29400104 	addi	r5,r5,4
   8d554:	30c0052e 	bgeu	r6,r3,8d56c <__copybits+0x44>
   8d558:	30800017 	ldw	r2,0(r6)
   8d55c:	31800104 	addi	r6,r6,4
   8d560:	20800015 	stw	r2,0(r4)
   8d564:	21000104 	addi	r4,r4,4
   8d568:	30fffb36 	bltu	r6,r3,8d558 <__copybits+0x30>
   8d56c:	2140032e 	bgeu	r4,r5,8d57c <__copybits+0x54>
   8d570:	20000015 	stw	zero,0(r4)
   8d574:	21000104 	addi	r4,r4,4
   8d578:	217ffd36 	bltu	r4,r5,8d570 <__copybits+0x48>
   8d57c:	f800283a 	ret

0008d580 <__any_on>:
   8d580:	20800417 	ldw	r2,16(r4)
   8d584:	2807d17a 	srai	r3,r5,5
   8d588:	21000504 	addi	r4,r4,20
   8d58c:	10c00d0e 	bge	r2,r3,8d5c4 <__any_on+0x44>
   8d590:	1085883a 	add	r2,r2,r2
   8d594:	1085883a 	add	r2,r2,r2
   8d598:	208d883a 	add	r6,r4,r2
   8d59c:	2180182e 	bgeu	r4,r6,8d600 <__any_on+0x80>
   8d5a0:	30bfff17 	ldw	r2,-4(r6)
   8d5a4:	30ffff04 	addi	r3,r6,-4
   8d5a8:	1000041e 	bne	r2,zero,8d5bc <__any_on+0x3c>
   8d5ac:	20c0142e 	bgeu	r4,r3,8d600 <__any_on+0x80>
   8d5b0:	18ffff04 	addi	r3,r3,-4
   8d5b4:	18800017 	ldw	r2,0(r3)
   8d5b8:	103ffc26 	beq	r2,zero,8d5ac <__any_on+0x2c>
   8d5bc:	00800044 	movi	r2,1
   8d5c0:	f800283a 	ret
   8d5c4:	18800a0e 	bge	r3,r2,8d5f0 <__any_on+0x70>
   8d5c8:	294007cc 	andi	r5,r5,31
   8d5cc:	28000826 	beq	r5,zero,8d5f0 <__any_on+0x70>
   8d5d0:	18c5883a 	add	r2,r3,r3
   8d5d4:	1085883a 	add	r2,r2,r2
   8d5d8:	208d883a 	add	r6,r4,r2
   8d5dc:	30c00017 	ldw	r3,0(r6)
   8d5e0:	1944d83a 	srl	r2,r3,r5
   8d5e4:	1144983a 	sll	r2,r2,r5
   8d5e8:	18bff41e 	bne	r3,r2,8d5bc <__any_on+0x3c>
   8d5ec:	003feb06 	br	8d59c <__any_on+0x1c>
   8d5f0:	18c5883a 	add	r2,r3,r3
   8d5f4:	1085883a 	add	r2,r2,r2
   8d5f8:	208d883a 	add	r6,r4,r2
   8d5fc:	003fe706 	br	8d59c <__any_on+0x1c>
   8d600:	0005883a 	mov	r2,zero
   8d604:	f800283a 	ret

0008d608 <_Balloc>:
   8d608:	20c01317 	ldw	r3,76(r4)
   8d60c:	defffb04 	addi	sp,sp,-20
   8d610:	dcc00315 	stw	r19,12(sp)
   8d614:	dc800215 	stw	r18,8(sp)
   8d618:	dfc00415 	stw	ra,16(sp)
   8d61c:	2825883a 	mov	r18,r5
   8d620:	dc400115 	stw	r17,4(sp)
   8d624:	dc000015 	stw	r16,0(sp)
   8d628:	2027883a 	mov	r19,r4
   8d62c:	01800404 	movi	r6,16
   8d630:	01400104 	movi	r5,4
   8d634:	18001726 	beq	r3,zero,8d694 <_Balloc+0x8c>
   8d638:	01400044 	movi	r5,1
   8d63c:	9485883a 	add	r2,r18,r18
   8d640:	2ca2983a 	sll	r17,r5,r18
   8d644:	1085883a 	add	r2,r2,r2
   8d648:	10c7883a 	add	r3,r2,r3
   8d64c:	1c000017 	ldw	r16,0(r3)
   8d650:	8c4d883a 	add	r6,r17,r17
   8d654:	318d883a 	add	r6,r6,r6
   8d658:	9809883a 	mov	r4,r19
   8d65c:	31800504 	addi	r6,r6,20
   8d660:	80001226 	beq	r16,zero,8d6ac <_Balloc+0xa4>
   8d664:	80800017 	ldw	r2,0(r16)
   8d668:	18800015 	stw	r2,0(r3)
   8d66c:	80000415 	stw	zero,16(r16)
   8d670:	80000315 	stw	zero,12(r16)
   8d674:	8005883a 	mov	r2,r16
   8d678:	dfc00417 	ldw	ra,16(sp)
   8d67c:	dcc00317 	ldw	r19,12(sp)
   8d680:	dc800217 	ldw	r18,8(sp)
   8d684:	dc400117 	ldw	r17,4(sp)
   8d688:	dc000017 	ldw	r16,0(sp)
   8d68c:	dec00504 	addi	sp,sp,20
   8d690:	f800283a 	ret
   8d694:	008eda00 	call	8eda0 <_calloc_r>
   8d698:	1007883a 	mov	r3,r2
   8d69c:	0021883a 	mov	r16,zero
   8d6a0:	98801315 	stw	r2,76(r19)
   8d6a4:	103fe41e 	bne	r2,zero,8d638 <_Balloc+0x30>
   8d6a8:	003ff206 	br	8d674 <_Balloc+0x6c>
   8d6ac:	008eda00 	call	8eda0 <_calloc_r>
   8d6b0:	103ff026 	beq	r2,zero,8d674 <_Balloc+0x6c>
   8d6b4:	1021883a 	mov	r16,r2
   8d6b8:	14800115 	stw	r18,4(r2)
   8d6bc:	14400215 	stw	r17,8(r2)
   8d6c0:	003fea06 	br	8d66c <_Balloc+0x64>

0008d6c4 <__d2b>:
   8d6c4:	defff504 	addi	sp,sp,-44
   8d6c8:	dcc00515 	stw	r19,20(sp)
   8d6cc:	04c00044 	movi	r19,1
   8d6d0:	dc000215 	stw	r16,8(sp)
   8d6d4:	2821883a 	mov	r16,r5
   8d6d8:	980b883a 	mov	r5,r19
   8d6dc:	ddc00915 	stw	r23,36(sp)
   8d6e0:	dd800815 	stw	r22,32(sp)
   8d6e4:	dd400715 	stw	r21,28(sp)
   8d6e8:	dd000615 	stw	r20,24(sp)
   8d6ec:	dc800415 	stw	r18,16(sp)
   8d6f0:	dc400315 	stw	r17,12(sp)
   8d6f4:	dfc00a15 	stw	ra,40(sp)
   8d6f8:	3023883a 	mov	r17,r6
   8d6fc:	382d883a 	mov	r22,r7
   8d700:	ddc00b17 	ldw	r23,44(sp)
   8d704:	008d6080 	call	8d608 <_Balloc>
   8d708:	1025883a 	mov	r18,r2
   8d70c:	00a00034 	movhi	r2,32768
   8d710:	10bfffc4 	addi	r2,r2,-1
   8d714:	8888703a 	and	r4,r17,r2
   8d718:	202ad53a 	srli	r21,r4,20
   8d71c:	00800434 	movhi	r2,16
   8d720:	10bfffc4 	addi	r2,r2,-1
   8d724:	8886703a 	and	r3,r17,r2
   8d728:	a829003a 	cmpeq	r20,r21,zero
   8d72c:	800b883a 	mov	r5,r16
   8d730:	d8c00115 	stw	r3,4(sp)
   8d734:	94000504 	addi	r16,r18,20
   8d738:	a000021e 	bne	r20,zero,8d744 <__d2b+0x80>
   8d73c:	18c00434 	orhi	r3,r3,16
   8d740:	d8c00115 	stw	r3,4(sp)
   8d744:	28002726 	beq	r5,zero,8d7e4 <__d2b+0x120>
   8d748:	d809883a 	mov	r4,sp
   8d74c:	d9400015 	stw	r5,0(sp)
   8d750:	008d1200 	call	8d120 <__lo0bits>
   8d754:	100d883a 	mov	r6,r2
   8d758:	10003526 	beq	r2,zero,8d830 <__d2b+0x16c>
   8d75c:	d8c00117 	ldw	r3,4(sp)
   8d760:	00800804 	movi	r2,32
   8d764:	1185c83a 	sub	r2,r2,r6
   8d768:	d9000017 	ldw	r4,0(sp)
   8d76c:	1886983a 	sll	r3,r3,r2
   8d770:	1906b03a 	or	r3,r3,r4
   8d774:	90c00515 	stw	r3,20(r18)
   8d778:	d8c00117 	ldw	r3,4(sp)
   8d77c:	1986d83a 	srl	r3,r3,r6
   8d780:	d8c00115 	stw	r3,4(sp)
   8d784:	180b003a 	cmpeq	r5,r3,zero
   8d788:	00800084 	movi	r2,2
   8d78c:	114bc83a 	sub	r5,r2,r5
   8d790:	80c00115 	stw	r3,4(r16)
   8d794:	91400415 	stw	r5,16(r18)
   8d798:	a0001a1e 	bne	r20,zero,8d804 <__d2b+0x140>
   8d79c:	3545883a 	add	r2,r6,r21
   8d7a0:	10bef344 	addi	r2,r2,-1075
   8d7a4:	00c00d44 	movi	r3,53
   8d7a8:	b0800015 	stw	r2,0(r22)
   8d7ac:	1987c83a 	sub	r3,r3,r6
   8d7b0:	b8c00015 	stw	r3,0(r23)
   8d7b4:	9005883a 	mov	r2,r18
   8d7b8:	dfc00a17 	ldw	ra,40(sp)
   8d7bc:	ddc00917 	ldw	r23,36(sp)
   8d7c0:	dd800817 	ldw	r22,32(sp)
   8d7c4:	dd400717 	ldw	r21,28(sp)
   8d7c8:	dd000617 	ldw	r20,24(sp)
   8d7cc:	dcc00517 	ldw	r19,20(sp)
   8d7d0:	dc800417 	ldw	r18,16(sp)
   8d7d4:	dc400317 	ldw	r17,12(sp)
   8d7d8:	dc000217 	ldw	r16,8(sp)
   8d7dc:	dec00b04 	addi	sp,sp,44
   8d7e0:	f800283a 	ret
   8d7e4:	d9000104 	addi	r4,sp,4
   8d7e8:	008d1200 	call	8d120 <__lo0bits>
   8d7ec:	11800804 	addi	r6,r2,32
   8d7f0:	d8800117 	ldw	r2,4(sp)
   8d7f4:	94c00415 	stw	r19,16(r18)
   8d7f8:	980b883a 	mov	r5,r19
   8d7fc:	90800515 	stw	r2,20(r18)
   8d800:	a03fe626 	beq	r20,zero,8d79c <__d2b+0xd8>
   8d804:	2945883a 	add	r2,r5,r5
   8d808:	1085883a 	add	r2,r2,r2
   8d80c:	1405883a 	add	r2,r2,r16
   8d810:	113fff17 	ldw	r4,-4(r2)
   8d814:	30fef384 	addi	r3,r6,-1074
   8d818:	2820917a 	slli	r16,r5,5
   8d81c:	b0c00015 	stw	r3,0(r22)
   8d820:	008d0b00 	call	8d0b0 <__hi0bits>
   8d824:	80a1c83a 	sub	r16,r16,r2
   8d828:	bc000015 	stw	r16,0(r23)
   8d82c:	003fe106 	br	8d7b4 <__d2b+0xf0>
   8d830:	d8800017 	ldw	r2,0(sp)
   8d834:	90800515 	stw	r2,20(r18)
   8d838:	d8c00117 	ldw	r3,4(sp)
   8d83c:	003fd106 	br	8d784 <__d2b+0xc0>

0008d840 <__mdiff>:
   8d840:	defffb04 	addi	sp,sp,-20
   8d844:	dc000015 	stw	r16,0(sp)
   8d848:	2821883a 	mov	r16,r5
   8d84c:	dc800215 	stw	r18,8(sp)
   8d850:	300b883a 	mov	r5,r6
   8d854:	2025883a 	mov	r18,r4
   8d858:	8009883a 	mov	r4,r16
   8d85c:	dc400115 	stw	r17,4(sp)
   8d860:	dfc00415 	stw	ra,16(sp)
   8d864:	dcc00315 	stw	r19,12(sp)
   8d868:	3023883a 	mov	r17,r6
   8d86c:	008d1e40 	call	8d1e4 <__mcmp>
   8d870:	10004226 	beq	r2,zero,8d97c <__mdiff+0x13c>
   8d874:	10005016 	blt	r2,zero,8d9b8 <__mdiff+0x178>
   8d878:	0027883a 	mov	r19,zero
   8d87c:	81400117 	ldw	r5,4(r16)
   8d880:	9009883a 	mov	r4,r18
   8d884:	008d6080 	call	8d608 <_Balloc>
   8d888:	1019883a 	mov	r12,r2
   8d88c:	82800417 	ldw	r10,16(r16)
   8d890:	88800417 	ldw	r2,16(r17)
   8d894:	81800504 	addi	r6,r16,20
   8d898:	5287883a 	add	r3,r10,r10
   8d89c:	1085883a 	add	r2,r2,r2
   8d8a0:	18c7883a 	add	r3,r3,r3
   8d8a4:	1085883a 	add	r2,r2,r2
   8d8a8:	8a000504 	addi	r8,r17,20
   8d8ac:	64c00315 	stw	r19,12(r12)
   8d8b0:	30db883a 	add	r13,r6,r3
   8d8b4:	4097883a 	add	r11,r8,r2
   8d8b8:	61c00504 	addi	r7,r12,20
   8d8bc:	0013883a 	mov	r9,zero
   8d8c0:	31000017 	ldw	r4,0(r6)
   8d8c4:	41400017 	ldw	r5,0(r8)
   8d8c8:	42000104 	addi	r8,r8,4
   8d8cc:	20bfffcc 	andi	r2,r4,65535
   8d8d0:	28ffffcc 	andi	r3,r5,65535
   8d8d4:	10c5c83a 	sub	r2,r2,r3
   8d8d8:	1245883a 	add	r2,r2,r9
   8d8dc:	2008d43a 	srli	r4,r4,16
   8d8e0:	280ad43a 	srli	r5,r5,16
   8d8e4:	1007d43a 	srai	r3,r2,16
   8d8e8:	3880000d 	sth	r2,0(r7)
   8d8ec:	2149c83a 	sub	r4,r4,r5
   8d8f0:	20c9883a 	add	r4,r4,r3
   8d8f4:	3900008d 	sth	r4,2(r7)
   8d8f8:	31800104 	addi	r6,r6,4
   8d8fc:	39c00104 	addi	r7,r7,4
   8d900:	2013d43a 	srai	r9,r4,16
   8d904:	42ffee36 	bltu	r8,r11,8d8c0 <__mdiff+0x80>
   8d908:	33400c2e 	bgeu	r6,r13,8d93c <__mdiff+0xfc>
   8d90c:	30800017 	ldw	r2,0(r6)
   8d910:	31800104 	addi	r6,r6,4
   8d914:	10ffffcc 	andi	r3,r2,65535
   8d918:	1a47883a 	add	r3,r3,r9
   8d91c:	1004d43a 	srli	r2,r2,16
   8d920:	1809d43a 	srai	r4,r3,16
   8d924:	38c0000d 	sth	r3,0(r7)
   8d928:	1105883a 	add	r2,r2,r4
   8d92c:	3880008d 	sth	r2,2(r7)
   8d930:	1013d43a 	srai	r9,r2,16
   8d934:	39c00104 	addi	r7,r7,4
   8d938:	337ff436 	bltu	r6,r13,8d90c <__mdiff+0xcc>
   8d93c:	38bfff17 	ldw	r2,-4(r7)
   8d940:	38ffff04 	addi	r3,r7,-4
   8d944:	1000041e 	bne	r2,zero,8d958 <__mdiff+0x118>
   8d948:	18ffff04 	addi	r3,r3,-4
   8d94c:	18800017 	ldw	r2,0(r3)
   8d950:	52bfffc4 	addi	r10,r10,-1
   8d954:	103ffc26 	beq	r2,zero,8d948 <__mdiff+0x108>
   8d958:	6005883a 	mov	r2,r12
   8d95c:	62800415 	stw	r10,16(r12)
   8d960:	dfc00417 	ldw	ra,16(sp)
   8d964:	dcc00317 	ldw	r19,12(sp)
   8d968:	dc800217 	ldw	r18,8(sp)
   8d96c:	dc400117 	ldw	r17,4(sp)
   8d970:	dc000017 	ldw	r16,0(sp)
   8d974:	dec00504 	addi	sp,sp,20
   8d978:	f800283a 	ret
   8d97c:	9009883a 	mov	r4,r18
   8d980:	000b883a 	mov	r5,zero
   8d984:	008d6080 	call	8d608 <_Balloc>
   8d988:	1019883a 	mov	r12,r2
   8d98c:	00800044 	movi	r2,1
   8d990:	60800415 	stw	r2,16(r12)
   8d994:	6005883a 	mov	r2,r12
   8d998:	60000515 	stw	zero,20(r12)
   8d99c:	dfc00417 	ldw	ra,16(sp)
   8d9a0:	dcc00317 	ldw	r19,12(sp)
   8d9a4:	dc800217 	ldw	r18,8(sp)
   8d9a8:	dc400117 	ldw	r17,4(sp)
   8d9ac:	dc000017 	ldw	r16,0(sp)
   8d9b0:	dec00504 	addi	sp,sp,20
   8d9b4:	f800283a 	ret
   8d9b8:	880d883a 	mov	r6,r17
   8d9bc:	04c00044 	movi	r19,1
   8d9c0:	8023883a 	mov	r17,r16
   8d9c4:	3021883a 	mov	r16,r6
   8d9c8:	003fac06 	br	8d87c <__mdiff+0x3c>

0008d9cc <__lshift>:
   8d9cc:	defff904 	addi	sp,sp,-28
   8d9d0:	28800417 	ldw	r2,16(r5)
   8d9d4:	dc000015 	stw	r16,0(sp)
   8d9d8:	3021d17a 	srai	r16,r6,5
   8d9dc:	28c00217 	ldw	r3,8(r5)
   8d9e0:	10800044 	addi	r2,r2,1
   8d9e4:	dc400115 	stw	r17,4(sp)
   8d9e8:	80a3883a 	add	r17,r16,r2
   8d9ec:	dd400515 	stw	r21,20(sp)
   8d9f0:	dd000415 	stw	r20,16(sp)
   8d9f4:	dc800215 	stw	r18,8(sp)
   8d9f8:	dfc00615 	stw	ra,24(sp)
   8d9fc:	2825883a 	mov	r18,r5
   8da00:	dcc00315 	stw	r19,12(sp)
   8da04:	3029883a 	mov	r20,r6
   8da08:	202b883a 	mov	r21,r4
   8da0c:	29400117 	ldw	r5,4(r5)
   8da10:	1c40030e 	bge	r3,r17,8da20 <__lshift+0x54>
   8da14:	18c7883a 	add	r3,r3,r3
   8da18:	29400044 	addi	r5,r5,1
   8da1c:	1c7ffd16 	blt	r3,r17,8da14 <__lshift+0x48>
   8da20:	a809883a 	mov	r4,r21
   8da24:	008d6080 	call	8d608 <_Balloc>
   8da28:	1027883a 	mov	r19,r2
   8da2c:	11400504 	addi	r5,r2,20
   8da30:	0400090e 	bge	zero,r16,8da58 <__lshift+0x8c>
   8da34:	2805883a 	mov	r2,r5
   8da38:	0007883a 	mov	r3,zero
   8da3c:	18c00044 	addi	r3,r3,1
   8da40:	10000015 	stw	zero,0(r2)
   8da44:	10800104 	addi	r2,r2,4
   8da48:	80fffc1e 	bne	r16,r3,8da3c <__lshift+0x70>
   8da4c:	8405883a 	add	r2,r16,r16
   8da50:	1085883a 	add	r2,r2,r2
   8da54:	288b883a 	add	r5,r5,r2
   8da58:	90800417 	ldw	r2,16(r18)
   8da5c:	91000504 	addi	r4,r18,20
   8da60:	a18007cc 	andi	r6,r20,31
   8da64:	1085883a 	add	r2,r2,r2
   8da68:	1085883a 	add	r2,r2,r2
   8da6c:	208f883a 	add	r7,r4,r2
   8da70:	30001e26 	beq	r6,zero,8daec <__lshift+0x120>
   8da74:	00800804 	movi	r2,32
   8da78:	1191c83a 	sub	r8,r2,r6
   8da7c:	0007883a 	mov	r3,zero
   8da80:	20800017 	ldw	r2,0(r4)
   8da84:	1184983a 	sll	r2,r2,r6
   8da88:	1884b03a 	or	r2,r3,r2
   8da8c:	28800015 	stw	r2,0(r5)
   8da90:	20c00017 	ldw	r3,0(r4)
   8da94:	21000104 	addi	r4,r4,4
   8da98:	29400104 	addi	r5,r5,4
   8da9c:	1a06d83a 	srl	r3,r3,r8
   8daa0:	21fff736 	bltu	r4,r7,8da80 <__lshift+0xb4>
   8daa4:	28c00015 	stw	r3,0(r5)
   8daa8:	18000126 	beq	r3,zero,8dab0 <__lshift+0xe4>
   8daac:	8c400044 	addi	r17,r17,1
   8dab0:	88bfffc4 	addi	r2,r17,-1
   8dab4:	98800415 	stw	r2,16(r19)
   8dab8:	a809883a 	mov	r4,r21
   8dabc:	900b883a 	mov	r5,r18
   8dac0:	008d0880 	call	8d088 <_Bfree>
   8dac4:	9805883a 	mov	r2,r19
   8dac8:	dfc00617 	ldw	ra,24(sp)
   8dacc:	dd400517 	ldw	r21,20(sp)
   8dad0:	dd000417 	ldw	r20,16(sp)
   8dad4:	dcc00317 	ldw	r19,12(sp)
   8dad8:	dc800217 	ldw	r18,8(sp)
   8dadc:	dc400117 	ldw	r17,4(sp)
   8dae0:	dc000017 	ldw	r16,0(sp)
   8dae4:	dec00704 	addi	sp,sp,28
   8dae8:	f800283a 	ret
   8daec:	20800017 	ldw	r2,0(r4)
   8daf0:	21000104 	addi	r4,r4,4
   8daf4:	28800015 	stw	r2,0(r5)
   8daf8:	29400104 	addi	r5,r5,4
   8dafc:	21ffec2e 	bgeu	r4,r7,8dab0 <__lshift+0xe4>
   8db00:	20800017 	ldw	r2,0(r4)
   8db04:	21000104 	addi	r4,r4,4
   8db08:	28800015 	stw	r2,0(r5)
   8db0c:	29400104 	addi	r5,r5,4
   8db10:	21fff636 	bltu	r4,r7,8daec <__lshift+0x120>
   8db14:	003fe606 	br	8dab0 <__lshift+0xe4>

0008db18 <__multiply>:
   8db18:	defff004 	addi	sp,sp,-64
   8db1c:	dc800815 	stw	r18,32(sp)
   8db20:	dc400715 	stw	r17,28(sp)
   8db24:	2c800417 	ldw	r18,16(r5)
   8db28:	34400417 	ldw	r17,16(r6)
   8db2c:	dcc00915 	stw	r19,36(sp)
   8db30:	dc000615 	stw	r16,24(sp)
   8db34:	dfc00f15 	stw	ra,60(sp)
   8db38:	df000e15 	stw	fp,56(sp)
   8db3c:	ddc00d15 	stw	r23,52(sp)
   8db40:	dd800c15 	stw	r22,48(sp)
   8db44:	dd400b15 	stw	r21,44(sp)
   8db48:	dd000a15 	stw	r20,40(sp)
   8db4c:	2821883a 	mov	r16,r5
   8db50:	3027883a 	mov	r19,r6
   8db54:	9440040e 	bge	r18,r17,8db68 <__multiply+0x50>
   8db58:	8825883a 	mov	r18,r17
   8db5c:	2c400417 	ldw	r17,16(r5)
   8db60:	2827883a 	mov	r19,r5
   8db64:	3021883a 	mov	r16,r6
   8db68:	80800217 	ldw	r2,8(r16)
   8db6c:	9447883a 	add	r3,r18,r17
   8db70:	d8c00415 	stw	r3,16(sp)
   8db74:	81400117 	ldw	r5,4(r16)
   8db78:	10c0010e 	bge	r2,r3,8db80 <__multiply+0x68>
   8db7c:	29400044 	addi	r5,r5,1
   8db80:	008d6080 	call	8d608 <_Balloc>
   8db84:	d8800515 	stw	r2,20(sp)
   8db88:	d9000417 	ldw	r4,16(sp)
   8db8c:	d8c00517 	ldw	r3,20(sp)
   8db90:	2105883a 	add	r2,r4,r4
   8db94:	1085883a 	add	r2,r2,r2
   8db98:	19000504 	addi	r4,r3,20
   8db9c:	2085883a 	add	r2,r4,r2
   8dba0:	d8800315 	stw	r2,12(sp)
   8dba4:	2080052e 	bgeu	r4,r2,8dbbc <__multiply+0xa4>
   8dba8:	2005883a 	mov	r2,r4
   8dbac:	d8c00317 	ldw	r3,12(sp)
   8dbb0:	10000015 	stw	zero,0(r2)
   8dbb4:	10800104 	addi	r2,r2,4
   8dbb8:	10fffc36 	bltu	r2,r3,8dbac <__multiply+0x94>
   8dbbc:	8c45883a 	add	r2,r17,r17
   8dbc0:	9487883a 	add	r3,r18,r18
   8dbc4:	9dc00504 	addi	r23,r19,20
   8dbc8:	1085883a 	add	r2,r2,r2
   8dbcc:	84000504 	addi	r16,r16,20
   8dbd0:	18c7883a 	add	r3,r3,r3
   8dbd4:	b885883a 	add	r2,r23,r2
   8dbd8:	dc000015 	stw	r16,0(sp)
   8dbdc:	d8800215 	stw	r2,8(sp)
   8dbe0:	80f9883a 	add	fp,r16,r3
   8dbe4:	b880432e 	bgeu	r23,r2,8dcf4 <__multiply+0x1dc>
   8dbe8:	d9000115 	stw	r4,4(sp)
   8dbec:	b9000017 	ldw	r4,0(r23)
   8dbf0:	253fffcc 	andi	r20,r4,65535
   8dbf4:	a0001a26 	beq	r20,zero,8dc60 <__multiply+0x148>
   8dbf8:	dcc00017 	ldw	r19,0(sp)
   8dbfc:	dc800117 	ldw	r18,4(sp)
   8dc00:	002b883a 	mov	r21,zero
   8dc04:	9c400017 	ldw	r17,0(r19)
   8dc08:	94000017 	ldw	r16,0(r18)
   8dc0c:	a009883a 	mov	r4,r20
   8dc10:	897fffcc 	andi	r5,r17,65535
   8dc14:	00877e40 	call	877e4 <__mulsi3>
   8dc18:	880ad43a 	srli	r5,r17,16
   8dc1c:	80ffffcc 	andi	r3,r16,65535
   8dc20:	a8c7883a 	add	r3,r21,r3
   8dc24:	a009883a 	mov	r4,r20
   8dc28:	10e3883a 	add	r17,r2,r3
   8dc2c:	8020d43a 	srli	r16,r16,16
   8dc30:	00877e40 	call	877e4 <__mulsi3>
   8dc34:	8806d43a 	srli	r3,r17,16
   8dc38:	1405883a 	add	r2,r2,r16
   8dc3c:	9cc00104 	addi	r19,r19,4
   8dc40:	1887883a 	add	r3,r3,r2
   8dc44:	90c0008d 	sth	r3,2(r18)
   8dc48:	9440000d 	sth	r17,0(r18)
   8dc4c:	182ad43a 	srli	r21,r3,16
   8dc50:	94800104 	addi	r18,r18,4
   8dc54:	9f3feb36 	bltu	r19,fp,8dc04 <__multiply+0xec>
   8dc58:	95400015 	stw	r21,0(r18)
   8dc5c:	b9000017 	ldw	r4,0(r23)
   8dc60:	202ad43a 	srli	r21,r4,16
   8dc64:	a8001c26 	beq	r21,zero,8dcd8 <__multiply+0x1c0>
   8dc68:	d9000117 	ldw	r4,4(sp)
   8dc6c:	dd000017 	ldw	r20,0(sp)
   8dc70:	002d883a 	mov	r22,zero
   8dc74:	24c00017 	ldw	r19,0(r4)
   8dc78:	2025883a 	mov	r18,r4
   8dc7c:	9823883a 	mov	r17,r19
   8dc80:	a4000017 	ldw	r16,0(r20)
   8dc84:	a809883a 	mov	r4,r21
   8dc88:	a5000104 	addi	r20,r20,4
   8dc8c:	817fffcc 	andi	r5,r16,65535
   8dc90:	00877e40 	call	877e4 <__mulsi3>
   8dc94:	8806d43a 	srli	r3,r17,16
   8dc98:	800ad43a 	srli	r5,r16,16
   8dc9c:	94c0000d 	sth	r19,0(r18)
   8dca0:	b0c7883a 	add	r3,r22,r3
   8dca4:	10e1883a 	add	r16,r2,r3
   8dca8:	9400008d 	sth	r16,2(r18)
   8dcac:	a809883a 	mov	r4,r21
   8dcb0:	94800104 	addi	r18,r18,4
   8dcb4:	00877e40 	call	877e4 <__mulsi3>
   8dcb8:	94400017 	ldw	r17,0(r18)
   8dcbc:	8020d43a 	srli	r16,r16,16
   8dcc0:	88ffffcc 	andi	r3,r17,65535
   8dcc4:	10c5883a 	add	r2,r2,r3
   8dcc8:	80a7883a 	add	r19,r16,r2
   8dccc:	982cd43a 	srli	r22,r19,16
   8dcd0:	a73feb36 	bltu	r20,fp,8dc80 <__multiply+0x168>
   8dcd4:	94c00015 	stw	r19,0(r18)
   8dcd8:	d8800217 	ldw	r2,8(sp)
   8dcdc:	bdc00104 	addi	r23,r23,4
   8dce0:	b880042e 	bgeu	r23,r2,8dcf4 <__multiply+0x1dc>
   8dce4:	d8c00117 	ldw	r3,4(sp)
   8dce8:	18c00104 	addi	r3,r3,4
   8dcec:	d8c00115 	stw	r3,4(sp)
   8dcf0:	003fbe06 	br	8dbec <__multiply+0xd4>
   8dcf4:	d9000417 	ldw	r4,16(sp)
   8dcf8:	01000c0e 	bge	zero,r4,8dd2c <__multiply+0x214>
   8dcfc:	d8c00317 	ldw	r3,12(sp)
   8dd00:	18bfff17 	ldw	r2,-4(r3)
   8dd04:	18ffff04 	addi	r3,r3,-4
   8dd08:	10000326 	beq	r2,zero,8dd18 <__multiply+0x200>
   8dd0c:	00000706 	br	8dd2c <__multiply+0x214>
   8dd10:	18800017 	ldw	r2,0(r3)
   8dd14:	1000051e 	bne	r2,zero,8dd2c <__multiply+0x214>
   8dd18:	d9000417 	ldw	r4,16(sp)
   8dd1c:	18ffff04 	addi	r3,r3,-4
   8dd20:	213fffc4 	addi	r4,r4,-1
   8dd24:	d9000415 	stw	r4,16(sp)
   8dd28:	203ff91e 	bne	r4,zero,8dd10 <__multiply+0x1f8>
   8dd2c:	d8800417 	ldw	r2,16(sp)
   8dd30:	d8c00517 	ldw	r3,20(sp)
   8dd34:	18800415 	stw	r2,16(r3)
   8dd38:	1805883a 	mov	r2,r3
   8dd3c:	dfc00f17 	ldw	ra,60(sp)
   8dd40:	df000e17 	ldw	fp,56(sp)
   8dd44:	ddc00d17 	ldw	r23,52(sp)
   8dd48:	dd800c17 	ldw	r22,48(sp)
   8dd4c:	dd400b17 	ldw	r21,44(sp)
   8dd50:	dd000a17 	ldw	r20,40(sp)
   8dd54:	dcc00917 	ldw	r19,36(sp)
   8dd58:	dc800817 	ldw	r18,32(sp)
   8dd5c:	dc400717 	ldw	r17,28(sp)
   8dd60:	dc000617 	ldw	r16,24(sp)
   8dd64:	dec01004 	addi	sp,sp,64
   8dd68:	f800283a 	ret

0008dd6c <__i2b>:
   8dd6c:	defffd04 	addi	sp,sp,-12
   8dd70:	dc000015 	stw	r16,0(sp)
   8dd74:	04000044 	movi	r16,1
   8dd78:	dc800115 	stw	r18,4(sp)
   8dd7c:	2825883a 	mov	r18,r5
   8dd80:	800b883a 	mov	r5,r16
   8dd84:	dfc00215 	stw	ra,8(sp)
   8dd88:	008d6080 	call	8d608 <_Balloc>
   8dd8c:	14000415 	stw	r16,16(r2)
   8dd90:	14800515 	stw	r18,20(r2)
   8dd94:	dfc00217 	ldw	ra,8(sp)
   8dd98:	dc800117 	ldw	r18,4(sp)
   8dd9c:	dc000017 	ldw	r16,0(sp)
   8dda0:	dec00304 	addi	sp,sp,12
   8dda4:	f800283a 	ret

0008dda8 <__multadd>:
   8dda8:	defff604 	addi	sp,sp,-40
   8ddac:	dd800615 	stw	r22,24(sp)
   8ddb0:	2d800417 	ldw	r22,16(r5)
   8ddb4:	df000815 	stw	fp,32(sp)
   8ddb8:	ddc00715 	stw	r23,28(sp)
   8ddbc:	dd400515 	stw	r21,20(sp)
   8ddc0:	dd000415 	stw	r20,16(sp)
   8ddc4:	dcc00315 	stw	r19,12(sp)
   8ddc8:	dc800215 	stw	r18,8(sp)
   8ddcc:	dfc00915 	stw	ra,36(sp)
   8ddd0:	dc400115 	stw	r17,4(sp)
   8ddd4:	dc000015 	stw	r16,0(sp)
   8ddd8:	282f883a 	mov	r23,r5
   8dddc:	2039883a 	mov	fp,r4
   8dde0:	302b883a 	mov	r21,r6
   8dde4:	3829883a 	mov	r20,r7
   8dde8:	2c800504 	addi	r18,r5,20
   8ddec:	0027883a 	mov	r19,zero
   8ddf0:	94400017 	ldw	r17,0(r18)
   8ddf4:	a80b883a 	mov	r5,r21
   8ddf8:	9cc00044 	addi	r19,r19,1
   8ddfc:	893fffcc 	andi	r4,r17,65535
   8de00:	00877e40 	call	877e4 <__mulsi3>
   8de04:	8808d43a 	srli	r4,r17,16
   8de08:	1521883a 	add	r16,r2,r20
   8de0c:	a80b883a 	mov	r5,r21
   8de10:	00877e40 	call	877e4 <__mulsi3>
   8de14:	8008d43a 	srli	r4,r16,16
   8de18:	843fffcc 	andi	r16,r16,65535
   8de1c:	1105883a 	add	r2,r2,r4
   8de20:	1006943a 	slli	r3,r2,16
   8de24:	1028d43a 	srli	r20,r2,16
   8de28:	1c07883a 	add	r3,r3,r16
   8de2c:	90c00015 	stw	r3,0(r18)
   8de30:	94800104 	addi	r18,r18,4
   8de34:	9dbfee16 	blt	r19,r22,8ddf0 <__multadd+0x48>
   8de38:	a0000826 	beq	r20,zero,8de5c <__multadd+0xb4>
   8de3c:	b8800217 	ldw	r2,8(r23)
   8de40:	b080130e 	bge	r22,r2,8de90 <__multadd+0xe8>
   8de44:	b585883a 	add	r2,r22,r22
   8de48:	1085883a 	add	r2,r2,r2
   8de4c:	15c5883a 	add	r2,r2,r23
   8de50:	b0c00044 	addi	r3,r22,1
   8de54:	15000515 	stw	r20,20(r2)
   8de58:	b8c00415 	stw	r3,16(r23)
   8de5c:	b805883a 	mov	r2,r23
   8de60:	dfc00917 	ldw	ra,36(sp)
   8de64:	df000817 	ldw	fp,32(sp)
   8de68:	ddc00717 	ldw	r23,28(sp)
   8de6c:	dd800617 	ldw	r22,24(sp)
   8de70:	dd400517 	ldw	r21,20(sp)
   8de74:	dd000417 	ldw	r20,16(sp)
   8de78:	dcc00317 	ldw	r19,12(sp)
   8de7c:	dc800217 	ldw	r18,8(sp)
   8de80:	dc400117 	ldw	r17,4(sp)
   8de84:	dc000017 	ldw	r16,0(sp)
   8de88:	dec00a04 	addi	sp,sp,40
   8de8c:	f800283a 	ret
   8de90:	b9400117 	ldw	r5,4(r23)
   8de94:	e009883a 	mov	r4,fp
   8de98:	29400044 	addi	r5,r5,1
   8de9c:	008d6080 	call	8d608 <_Balloc>
   8dea0:	b9800417 	ldw	r6,16(r23)
   8dea4:	b9400304 	addi	r5,r23,12
   8dea8:	11000304 	addi	r4,r2,12
   8deac:	318d883a 	add	r6,r6,r6
   8deb0:	318d883a 	add	r6,r6,r6
   8deb4:	31800204 	addi	r6,r6,8
   8deb8:	1023883a 	mov	r17,r2
   8debc:	008ce700 	call	8ce70 <memcpy>
   8dec0:	b80b883a 	mov	r5,r23
   8dec4:	e009883a 	mov	r4,fp
   8dec8:	008d0880 	call	8d088 <_Bfree>
   8decc:	882f883a 	mov	r23,r17
   8ded0:	003fdc06 	br	8de44 <__multadd+0x9c>

0008ded4 <__pow5mult>:
   8ded4:	defffa04 	addi	sp,sp,-24
   8ded8:	308000cc 	andi	r2,r6,3
   8dedc:	dd000415 	stw	r20,16(sp)
   8dee0:	dcc00315 	stw	r19,12(sp)
   8dee4:	dc000015 	stw	r16,0(sp)
   8dee8:	dfc00515 	stw	ra,20(sp)
   8deec:	dc800215 	stw	r18,8(sp)
   8def0:	dc400115 	stw	r17,4(sp)
   8def4:	3021883a 	mov	r16,r6
   8def8:	2027883a 	mov	r19,r4
   8defc:	2829883a 	mov	r20,r5
   8df00:	10002b1e 	bne	r2,zero,8dfb0 <__pow5mult+0xdc>
   8df04:	8025d0ba 	srai	r18,r16,2
   8df08:	90001b26 	beq	r18,zero,8df78 <__pow5mult+0xa4>
   8df0c:	9c001217 	ldw	r16,72(r19)
   8df10:	8000081e 	bne	r16,zero,8df34 <__pow5mult+0x60>
   8df14:	00003006 	br	8dfd8 <__pow5mult+0x104>
   8df18:	800b883a 	mov	r5,r16
   8df1c:	800d883a 	mov	r6,r16
   8df20:	9809883a 	mov	r4,r19
   8df24:	90001426 	beq	r18,zero,8df78 <__pow5mult+0xa4>
   8df28:	80800017 	ldw	r2,0(r16)
   8df2c:	10001b26 	beq	r2,zero,8df9c <__pow5mult+0xc8>
   8df30:	1021883a 	mov	r16,r2
   8df34:	9080004c 	andi	r2,r18,1
   8df38:	1005003a 	cmpeq	r2,r2,zero
   8df3c:	9025d07a 	srai	r18,r18,1
   8df40:	800d883a 	mov	r6,r16
   8df44:	9809883a 	mov	r4,r19
   8df48:	a00b883a 	mov	r5,r20
   8df4c:	103ff21e 	bne	r2,zero,8df18 <__pow5mult+0x44>
   8df50:	008db180 	call	8db18 <__multiply>
   8df54:	a00b883a 	mov	r5,r20
   8df58:	9809883a 	mov	r4,r19
   8df5c:	1023883a 	mov	r17,r2
   8df60:	008d0880 	call	8d088 <_Bfree>
   8df64:	8829883a 	mov	r20,r17
   8df68:	800b883a 	mov	r5,r16
   8df6c:	800d883a 	mov	r6,r16
   8df70:	9809883a 	mov	r4,r19
   8df74:	903fec1e 	bne	r18,zero,8df28 <__pow5mult+0x54>
   8df78:	a005883a 	mov	r2,r20
   8df7c:	dfc00517 	ldw	ra,20(sp)
   8df80:	dd000417 	ldw	r20,16(sp)
   8df84:	dcc00317 	ldw	r19,12(sp)
   8df88:	dc800217 	ldw	r18,8(sp)
   8df8c:	dc400117 	ldw	r17,4(sp)
   8df90:	dc000017 	ldw	r16,0(sp)
   8df94:	dec00604 	addi	sp,sp,24
   8df98:	f800283a 	ret
   8df9c:	008db180 	call	8db18 <__multiply>
   8dfa0:	80800015 	stw	r2,0(r16)
   8dfa4:	1021883a 	mov	r16,r2
   8dfa8:	10000015 	stw	zero,0(r2)
   8dfac:	003fe106 	br	8df34 <__pow5mult+0x60>
   8dfb0:	1085883a 	add	r2,r2,r2
   8dfb4:	00c002b4 	movhi	r3,10
   8dfb8:	18ffd504 	addi	r3,r3,-172
   8dfbc:	1085883a 	add	r2,r2,r2
   8dfc0:	10c5883a 	add	r2,r2,r3
   8dfc4:	11bfff17 	ldw	r6,-4(r2)
   8dfc8:	000f883a 	mov	r7,zero
   8dfcc:	008dda80 	call	8dda8 <__multadd>
   8dfd0:	1029883a 	mov	r20,r2
   8dfd4:	003fcb06 	br	8df04 <__pow5mult+0x30>
   8dfd8:	9809883a 	mov	r4,r19
   8dfdc:	01409c44 	movi	r5,625
   8dfe0:	008dd6c0 	call	8dd6c <__i2b>
   8dfe4:	98801215 	stw	r2,72(r19)
   8dfe8:	1021883a 	mov	r16,r2
   8dfec:	10000015 	stw	zero,0(r2)
   8dff0:	003fd006 	br	8df34 <__pow5mult+0x60>

0008dff4 <__s2b>:
   8dff4:	defff904 	addi	sp,sp,-28
   8dff8:	dcc00315 	stw	r19,12(sp)
   8dffc:	dc800215 	stw	r18,8(sp)
   8e000:	2827883a 	mov	r19,r5
   8e004:	2025883a 	mov	r18,r4
   8e008:	01400244 	movi	r5,9
   8e00c:	39000204 	addi	r4,r7,8
   8e010:	dd000415 	stw	r20,16(sp)
   8e014:	dc400115 	stw	r17,4(sp)
   8e018:	dfc00615 	stw	ra,24(sp)
   8e01c:	dd400515 	stw	r21,20(sp)
   8e020:	dc000015 	stw	r16,0(sp)
   8e024:	3829883a 	mov	r20,r7
   8e028:	3023883a 	mov	r17,r6
   8e02c:	00877140 	call	87714 <__divsi3>
   8e030:	00c00044 	movi	r3,1
   8e034:	1880350e 	bge	r3,r2,8e10c <__s2b+0x118>
   8e038:	000b883a 	mov	r5,zero
   8e03c:	18c7883a 	add	r3,r3,r3
   8e040:	29400044 	addi	r5,r5,1
   8e044:	18bffd16 	blt	r3,r2,8e03c <__s2b+0x48>
   8e048:	9009883a 	mov	r4,r18
   8e04c:	008d6080 	call	8d608 <_Balloc>
   8e050:	1011883a 	mov	r8,r2
   8e054:	d8800717 	ldw	r2,28(sp)
   8e058:	00c00044 	movi	r3,1
   8e05c:	01800244 	movi	r6,9
   8e060:	40800515 	stw	r2,20(r8)
   8e064:	40c00415 	stw	r3,16(r8)
   8e068:	3440260e 	bge	r6,r17,8e104 <__s2b+0x110>
   8e06c:	3021883a 	mov	r16,r6
   8e070:	99ab883a 	add	r21,r19,r6
   8e074:	9c05883a 	add	r2,r19,r16
   8e078:	11c00007 	ldb	r7,0(r2)
   8e07c:	400b883a 	mov	r5,r8
   8e080:	9009883a 	mov	r4,r18
   8e084:	39fff404 	addi	r7,r7,-48
   8e088:	01800284 	movi	r6,10
   8e08c:	008dda80 	call	8dda8 <__multadd>
   8e090:	84000044 	addi	r16,r16,1
   8e094:	1011883a 	mov	r8,r2
   8e098:	8c3ff61e 	bne	r17,r16,8e074 <__s2b+0x80>
   8e09c:	ac45883a 	add	r2,r21,r17
   8e0a0:	117ffe04 	addi	r5,r2,-8
   8e0a4:	880d883a 	mov	r6,r17
   8e0a8:	35000c0e 	bge	r6,r20,8e0dc <__s2b+0xe8>
   8e0ac:	a185c83a 	sub	r2,r20,r6
   8e0b0:	2821883a 	mov	r16,r5
   8e0b4:	28a3883a 	add	r17,r5,r2
   8e0b8:	81c00007 	ldb	r7,0(r16)
   8e0bc:	400b883a 	mov	r5,r8
   8e0c0:	9009883a 	mov	r4,r18
   8e0c4:	39fff404 	addi	r7,r7,-48
   8e0c8:	01800284 	movi	r6,10
   8e0cc:	008dda80 	call	8dda8 <__multadd>
   8e0d0:	84000044 	addi	r16,r16,1
   8e0d4:	1011883a 	mov	r8,r2
   8e0d8:	847ff71e 	bne	r16,r17,8e0b8 <__s2b+0xc4>
   8e0dc:	4005883a 	mov	r2,r8
   8e0e0:	dfc00617 	ldw	ra,24(sp)
   8e0e4:	dd400517 	ldw	r21,20(sp)
   8e0e8:	dd000417 	ldw	r20,16(sp)
   8e0ec:	dcc00317 	ldw	r19,12(sp)
   8e0f0:	dc800217 	ldw	r18,8(sp)
   8e0f4:	dc400117 	ldw	r17,4(sp)
   8e0f8:	dc000017 	ldw	r16,0(sp)
   8e0fc:	dec00704 	addi	sp,sp,28
   8e100:	f800283a 	ret
   8e104:	99400284 	addi	r5,r19,10
   8e108:	003fe706 	br	8e0a8 <__s2b+0xb4>
   8e10c:	000b883a 	mov	r5,zero
   8e110:	003fcd06 	br	8e048 <__s2b+0x54>

0008e114 <putc>:
   8e114:	defffc04 	addi	sp,sp,-16
   8e118:	dc800215 	stw	r18,8(sp)
   8e11c:	048002b4 	movhi	r18,10
   8e120:	94871e04 	addi	r18,r18,7288
   8e124:	90c00017 	ldw	r3,0(r18)
   8e128:	dc400115 	stw	r17,4(sp)
   8e12c:	dc000015 	stw	r16,0(sp)
   8e130:	dfc00315 	stw	ra,12(sp)
   8e134:	2023883a 	mov	r17,r4
   8e138:	2821883a 	mov	r16,r5
   8e13c:	18000226 	beq	r3,zero,8e148 <putc+0x34>
   8e140:	18800e17 	ldw	r2,56(r3)
   8e144:	10001126 	beq	r2,zero,8e18c <putc+0x78>
   8e148:	80800217 	ldw	r2,8(r16)
   8e14c:	10ffffc4 	addi	r3,r2,-1
   8e150:	80c00215 	stw	r3,8(r16)
   8e154:	18001316 	blt	r3,zero,8e1a4 <putc+0x90>
   8e158:	80800017 	ldw	r2,0(r16)
   8e15c:	14400005 	stb	r17,0(r2)
   8e160:	80c00017 	ldw	r3,0(r16)
   8e164:	18800044 	addi	r2,r3,1
   8e168:	18c00003 	ldbu	r3,0(r3)
   8e16c:	80800015 	stw	r2,0(r16)
   8e170:	1805883a 	mov	r2,r3
   8e174:	dfc00317 	ldw	ra,12(sp)
   8e178:	dc800217 	ldw	r18,8(sp)
   8e17c:	dc400117 	ldw	r17,4(sp)
   8e180:	dc000017 	ldw	r16,0(sp)
   8e184:	dec00404 	addi	sp,sp,16
   8e188:	f800283a 	ret
   8e18c:	1809883a 	mov	r4,r3
   8e190:	008b70c0 	call	8b70c <__sinit>
   8e194:	80800217 	ldw	r2,8(r16)
   8e198:	10ffffc4 	addi	r3,r2,-1
   8e19c:	80c00215 	stw	r3,8(r16)
   8e1a0:	183fed0e 	bge	r3,zero,8e158 <putc+0x44>
   8e1a4:	80800617 	ldw	r2,24(r16)
   8e1a8:	18800f16 	blt	r3,r2,8e1e8 <putc+0xd4>
   8e1ac:	80800017 	ldw	r2,0(r16)
   8e1b0:	14400005 	stb	r17,0(r2)
   8e1b4:	81000017 	ldw	r4,0(r16)
   8e1b8:	00800284 	movi	r2,10
   8e1bc:	20c00003 	ldbu	r3,0(r4)
   8e1c0:	18801226 	beq	r3,r2,8e20c <putc+0xf8>
   8e1c4:	20800044 	addi	r2,r4,1
   8e1c8:	80800015 	stw	r2,0(r16)
   8e1cc:	1805883a 	mov	r2,r3
   8e1d0:	dfc00317 	ldw	ra,12(sp)
   8e1d4:	dc800217 	ldw	r18,8(sp)
   8e1d8:	dc400117 	ldw	r17,4(sp)
   8e1dc:	dc000017 	ldw	r16,0(sp)
   8e1e0:	dec00404 	addi	sp,sp,16
   8e1e4:	f800283a 	ret
   8e1e8:	91000017 	ldw	r4,0(r18)
   8e1ec:	880b883a 	mov	r5,r17
   8e1f0:	800d883a 	mov	r6,r16
   8e1f4:	dfc00317 	ldw	ra,12(sp)
   8e1f8:	dc800217 	ldw	r18,8(sp)
   8e1fc:	dc400117 	ldw	r17,4(sp)
   8e200:	dc000017 	ldw	r16,0(sp)
   8e204:	dec00404 	addi	sp,sp,16
   8e208:	008ebdc1 	jmpi	8ebdc <__swbuf_r>
   8e20c:	91000017 	ldw	r4,0(r18)
   8e210:	180b883a 	mov	r5,r3
   8e214:	003ff606 	br	8e1f0 <putc+0xdc>

0008e218 <_putc_r>:
   8e218:	defffc04 	addi	sp,sp,-16
   8e21c:	dc400215 	stw	r17,8(sp)
   8e220:	dc000115 	stw	r16,4(sp)
   8e224:	dfc00315 	stw	ra,12(sp)
   8e228:	2021883a 	mov	r16,r4
   8e22c:	2823883a 	mov	r17,r5
   8e230:	20000226 	beq	r4,zero,8e23c <_putc_r+0x24>
   8e234:	20800e17 	ldw	r2,56(r4)
   8e238:	10001026 	beq	r2,zero,8e27c <_putc_r+0x64>
   8e23c:	30800217 	ldw	r2,8(r6)
   8e240:	10ffffc4 	addi	r3,r2,-1
   8e244:	30c00215 	stw	r3,8(r6)
   8e248:	18001316 	blt	r3,zero,8e298 <_putc_r+0x80>
   8e24c:	30800017 	ldw	r2,0(r6)
   8e250:	14400005 	stb	r17,0(r2)
   8e254:	30c00017 	ldw	r3,0(r6)
   8e258:	18800044 	addi	r2,r3,1
   8e25c:	18c00003 	ldbu	r3,0(r3)
   8e260:	30800015 	stw	r2,0(r6)
   8e264:	1805883a 	mov	r2,r3
   8e268:	dfc00317 	ldw	ra,12(sp)
   8e26c:	dc400217 	ldw	r17,8(sp)
   8e270:	dc000117 	ldw	r16,4(sp)
   8e274:	dec00404 	addi	sp,sp,16
   8e278:	f800283a 	ret
   8e27c:	d9800015 	stw	r6,0(sp)
   8e280:	008b70c0 	call	8b70c <__sinit>
   8e284:	d9800017 	ldw	r6,0(sp)
   8e288:	30800217 	ldw	r2,8(r6)
   8e28c:	10ffffc4 	addi	r3,r2,-1
   8e290:	30c00215 	stw	r3,8(r6)
   8e294:	183fed0e 	bge	r3,zero,8e24c <_putc_r+0x34>
   8e298:	30800617 	ldw	r2,24(r6)
   8e29c:	18800e16 	blt	r3,r2,8e2d8 <_putc_r+0xc0>
   8e2a0:	30800017 	ldw	r2,0(r6)
   8e2a4:	14400005 	stb	r17,0(r2)
   8e2a8:	31000017 	ldw	r4,0(r6)
   8e2ac:	00800284 	movi	r2,10
   8e2b0:	20c00003 	ldbu	r3,0(r4)
   8e2b4:	18800f26 	beq	r3,r2,8e2f4 <_putc_r+0xdc>
   8e2b8:	20800044 	addi	r2,r4,1
   8e2bc:	30800015 	stw	r2,0(r6)
   8e2c0:	1805883a 	mov	r2,r3
   8e2c4:	dfc00317 	ldw	ra,12(sp)
   8e2c8:	dc400217 	ldw	r17,8(sp)
   8e2cc:	dc000117 	ldw	r16,4(sp)
   8e2d0:	dec00404 	addi	sp,sp,16
   8e2d4:	f800283a 	ret
   8e2d8:	8009883a 	mov	r4,r16
   8e2dc:	880b883a 	mov	r5,r17
   8e2e0:	dfc00317 	ldw	ra,12(sp)
   8e2e4:	dc400217 	ldw	r17,8(sp)
   8e2e8:	dc000117 	ldw	r16,4(sp)
   8e2ec:	dec00404 	addi	sp,sp,16
   8e2f0:	008ebdc1 	jmpi	8ebdc <__swbuf_r>
   8e2f4:	8009883a 	mov	r4,r16
   8e2f8:	180b883a 	mov	r5,r3
   8e2fc:	003ff806 	br	8e2e0 <_putc_r+0xc8>

0008e300 <_realloc_r>:
   8e300:	defff404 	addi	sp,sp,-48
   8e304:	dd800815 	stw	r22,32(sp)
   8e308:	dc800415 	stw	r18,16(sp)
   8e30c:	dc400315 	stw	r17,12(sp)
   8e310:	dfc00b15 	stw	ra,44(sp)
   8e314:	df000a15 	stw	fp,40(sp)
   8e318:	ddc00915 	stw	r23,36(sp)
   8e31c:	dd400715 	stw	r21,28(sp)
   8e320:	dd000615 	stw	r20,24(sp)
   8e324:	dcc00515 	stw	r19,20(sp)
   8e328:	dc000215 	stw	r16,8(sp)
   8e32c:	2825883a 	mov	r18,r5
   8e330:	3023883a 	mov	r17,r6
   8e334:	202d883a 	mov	r22,r4
   8e338:	2800c926 	beq	r5,zero,8e660 <_realloc_r+0x360>
   8e33c:	00924740 	call	92474 <__malloc_lock>
   8e340:	943ffe04 	addi	r16,r18,-8
   8e344:	88c002c4 	addi	r3,r17,11
   8e348:	00800584 	movi	r2,22
   8e34c:	82000117 	ldw	r8,4(r16)
   8e350:	10c01b2e 	bgeu	r2,r3,8e3c0 <_realloc_r+0xc0>
   8e354:	00bffe04 	movi	r2,-8
   8e358:	188e703a 	and	r7,r3,r2
   8e35c:	3839883a 	mov	fp,r7
   8e360:	38001a16 	blt	r7,zero,8e3cc <_realloc_r+0xcc>
   8e364:	e4401936 	bltu	fp,r17,8e3cc <_realloc_r+0xcc>
   8e368:	013fff04 	movi	r4,-4
   8e36c:	4126703a 	and	r19,r8,r4
   8e370:	99c02616 	blt	r19,r7,8e40c <_realloc_r+0x10c>
   8e374:	802b883a 	mov	r21,r16
   8e378:	9829883a 	mov	r20,r19
   8e37c:	84000204 	addi	r16,r16,8
   8e380:	a80f883a 	mov	r7,r21
   8e384:	a70dc83a 	sub	r6,r20,fp
   8e388:	008003c4 	movi	r2,15
   8e38c:	1180c136 	bltu	r2,r6,8e694 <_realloc_r+0x394>
   8e390:	38800117 	ldw	r2,4(r7)
   8e394:	a549883a 	add	r4,r20,r21
   8e398:	1080004c 	andi	r2,r2,1
   8e39c:	a084b03a 	or	r2,r20,r2
   8e3a0:	38800115 	stw	r2,4(r7)
   8e3a4:	20c00117 	ldw	r3,4(r4)
   8e3a8:	18c00054 	ori	r3,r3,1
   8e3ac:	20c00115 	stw	r3,4(r4)
   8e3b0:	b009883a 	mov	r4,r22
   8e3b4:	009257c0 	call	9257c <__malloc_unlock>
   8e3b8:	8023883a 	mov	r17,r16
   8e3bc:	00000606 	br	8e3d8 <_realloc_r+0xd8>
   8e3c0:	01c00404 	movi	r7,16
   8e3c4:	3839883a 	mov	fp,r7
   8e3c8:	e47fe72e 	bgeu	fp,r17,8e368 <_realloc_r+0x68>
   8e3cc:	00800304 	movi	r2,12
   8e3d0:	0023883a 	mov	r17,zero
   8e3d4:	b0800015 	stw	r2,0(r22)
   8e3d8:	8805883a 	mov	r2,r17
   8e3dc:	dfc00b17 	ldw	ra,44(sp)
   8e3e0:	df000a17 	ldw	fp,40(sp)
   8e3e4:	ddc00917 	ldw	r23,36(sp)
   8e3e8:	dd800817 	ldw	r22,32(sp)
   8e3ec:	dd400717 	ldw	r21,28(sp)
   8e3f0:	dd000617 	ldw	r20,24(sp)
   8e3f4:	dcc00517 	ldw	r19,20(sp)
   8e3f8:	dc800417 	ldw	r18,16(sp)
   8e3fc:	dc400317 	ldw	r17,12(sp)
   8e400:	dc000217 	ldw	r16,8(sp)
   8e404:	dec00c04 	addi	sp,sp,48
   8e408:	f800283a 	ret
   8e40c:	008002b4 	movhi	r2,10
   8e410:	10818004 	addi	r2,r2,1536
   8e414:	12400217 	ldw	r9,8(r2)
   8e418:	84cd883a 	add	r6,r16,r19
   8e41c:	802b883a 	mov	r21,r16
   8e420:	3240b926 	beq	r6,r9,8e708 <_realloc_r+0x408>
   8e424:	31400117 	ldw	r5,4(r6)
   8e428:	00bfff84 	movi	r2,-2
   8e42c:	2884703a 	and	r2,r5,r2
   8e430:	1185883a 	add	r2,r2,r6
   8e434:	10c00117 	ldw	r3,4(r2)
   8e438:	18c0004c 	andi	r3,r3,1
   8e43c:	1807003a 	cmpeq	r3,r3,zero
   8e440:	1800a326 	beq	r3,zero,8e6d0 <_realloc_r+0x3d0>
   8e444:	2908703a 	and	r4,r5,r4
   8e448:	9929883a 	add	r20,r19,r4
   8e44c:	a1c0a30e 	bge	r20,r7,8e6dc <_realloc_r+0x3dc>
   8e450:	4080004c 	andi	r2,r8,1
   8e454:	1000551e 	bne	r2,zero,8e5ac <_realloc_r+0x2ac>
   8e458:	80800017 	ldw	r2,0(r16)
   8e45c:	80afc83a 	sub	r23,r16,r2
   8e460:	b8c00117 	ldw	r3,4(r23)
   8e464:	00bfff04 	movi	r2,-4
   8e468:	1884703a 	and	r2,r3,r2
   8e46c:	30002e26 	beq	r6,zero,8e528 <_realloc_r+0x228>
   8e470:	3240b926 	beq	r6,r9,8e758 <_realloc_r+0x458>
   8e474:	98a9883a 	add	r20,r19,r2
   8e478:	2509883a 	add	r4,r4,r20
   8e47c:	d9000015 	stw	r4,0(sp)
   8e480:	21c02a16 	blt	r4,r7,8e52c <_realloc_r+0x22c>
   8e484:	30800317 	ldw	r2,12(r6)
   8e488:	30c00217 	ldw	r3,8(r6)
   8e48c:	01400904 	movi	r5,36
   8e490:	99bfff04 	addi	r6,r19,-4
   8e494:	18800315 	stw	r2,12(r3)
   8e498:	10c00215 	stw	r3,8(r2)
   8e49c:	b9000317 	ldw	r4,12(r23)
   8e4a0:	b8800217 	ldw	r2,8(r23)
   8e4a4:	b82b883a 	mov	r21,r23
   8e4a8:	bc000204 	addi	r16,r23,8
   8e4ac:	20800215 	stw	r2,8(r4)
   8e4b0:	11000315 	stw	r4,12(r2)
   8e4b4:	2980e436 	bltu	r5,r6,8e848 <_realloc_r+0x548>
   8e4b8:	008004c4 	movi	r2,19
   8e4bc:	9009883a 	mov	r4,r18
   8e4c0:	8011883a 	mov	r8,r16
   8e4c4:	11800f2e 	bgeu	r2,r6,8e504 <_realloc_r+0x204>
   8e4c8:	90800017 	ldw	r2,0(r18)
   8e4cc:	ba000404 	addi	r8,r23,16
   8e4d0:	91000204 	addi	r4,r18,8
   8e4d4:	b8800215 	stw	r2,8(r23)
   8e4d8:	90c00117 	ldw	r3,4(r18)
   8e4dc:	008006c4 	movi	r2,27
   8e4e0:	b8c00315 	stw	r3,12(r23)
   8e4e4:	1180072e 	bgeu	r2,r6,8e504 <_realloc_r+0x204>
   8e4e8:	90c00217 	ldw	r3,8(r18)
   8e4ec:	ba000604 	addi	r8,r23,24
   8e4f0:	91000404 	addi	r4,r18,16
   8e4f4:	b8c00415 	stw	r3,16(r23)
   8e4f8:	90800317 	ldw	r2,12(r18)
   8e4fc:	b8800515 	stw	r2,20(r23)
   8e500:	3140e726 	beq	r6,r5,8e8a0 <_realloc_r+0x5a0>
   8e504:	20800017 	ldw	r2,0(r4)
   8e508:	dd000017 	ldw	r20,0(sp)
   8e50c:	b80f883a 	mov	r7,r23
   8e510:	40800015 	stw	r2,0(r8)
   8e514:	20c00117 	ldw	r3,4(r4)
   8e518:	40c00115 	stw	r3,4(r8)
   8e51c:	20800217 	ldw	r2,8(r4)
   8e520:	40800215 	stw	r2,8(r8)
   8e524:	003f9706 	br	8e384 <_realloc_r+0x84>
   8e528:	98a9883a 	add	r20,r19,r2
   8e52c:	a1c01f16 	blt	r20,r7,8e5ac <_realloc_r+0x2ac>
   8e530:	b8c00317 	ldw	r3,12(r23)
   8e534:	b8800217 	ldw	r2,8(r23)
   8e538:	99bfff04 	addi	r6,r19,-4
   8e53c:	01400904 	movi	r5,36
   8e540:	b82b883a 	mov	r21,r23
   8e544:	18800215 	stw	r2,8(r3)
   8e548:	10c00315 	stw	r3,12(r2)
   8e54c:	bc000204 	addi	r16,r23,8
   8e550:	2980c336 	bltu	r5,r6,8e860 <_realloc_r+0x560>
   8e554:	008004c4 	movi	r2,19
   8e558:	9009883a 	mov	r4,r18
   8e55c:	8011883a 	mov	r8,r16
   8e560:	11800f2e 	bgeu	r2,r6,8e5a0 <_realloc_r+0x2a0>
   8e564:	90800017 	ldw	r2,0(r18)
   8e568:	ba000404 	addi	r8,r23,16
   8e56c:	91000204 	addi	r4,r18,8
   8e570:	b8800215 	stw	r2,8(r23)
   8e574:	90c00117 	ldw	r3,4(r18)
   8e578:	008006c4 	movi	r2,27
   8e57c:	b8c00315 	stw	r3,12(r23)
   8e580:	1180072e 	bgeu	r2,r6,8e5a0 <_realloc_r+0x2a0>
   8e584:	90c00217 	ldw	r3,8(r18)
   8e588:	ba000604 	addi	r8,r23,24
   8e58c:	91000404 	addi	r4,r18,16
   8e590:	b8c00415 	stw	r3,16(r23)
   8e594:	90800317 	ldw	r2,12(r18)
   8e598:	b8800515 	stw	r2,20(r23)
   8e59c:	3140c726 	beq	r6,r5,8e8bc <_realloc_r+0x5bc>
   8e5a0:	20800017 	ldw	r2,0(r4)
   8e5a4:	b80f883a 	mov	r7,r23
   8e5a8:	003fd906 	br	8e510 <_realloc_r+0x210>
   8e5ac:	880b883a 	mov	r5,r17
   8e5b0:	b009883a 	mov	r4,r22
   8e5b4:	008c64c0 	call	8c64c <_malloc_r>
   8e5b8:	1023883a 	mov	r17,r2
   8e5bc:	10002526 	beq	r2,zero,8e654 <_realloc_r+0x354>
   8e5c0:	80800117 	ldw	r2,4(r16)
   8e5c4:	00ffff84 	movi	r3,-2
   8e5c8:	893ffe04 	addi	r4,r17,-8
   8e5cc:	10c4703a 	and	r2,r2,r3
   8e5d0:	8085883a 	add	r2,r16,r2
   8e5d4:	20809526 	beq	r4,r2,8e82c <_realloc_r+0x52c>
   8e5d8:	99bfff04 	addi	r6,r19,-4
   8e5dc:	01c00904 	movi	r7,36
   8e5e0:	39804536 	bltu	r7,r6,8e6f8 <_realloc_r+0x3f8>
   8e5e4:	008004c4 	movi	r2,19
   8e5e8:	9009883a 	mov	r4,r18
   8e5ec:	880b883a 	mov	r5,r17
   8e5f0:	11800f2e 	bgeu	r2,r6,8e630 <_realloc_r+0x330>
   8e5f4:	90800017 	ldw	r2,0(r18)
   8e5f8:	89400204 	addi	r5,r17,8
   8e5fc:	91000204 	addi	r4,r18,8
   8e600:	88800015 	stw	r2,0(r17)
   8e604:	90c00117 	ldw	r3,4(r18)
   8e608:	008006c4 	movi	r2,27
   8e60c:	88c00115 	stw	r3,4(r17)
   8e610:	1180072e 	bgeu	r2,r6,8e630 <_realloc_r+0x330>
   8e614:	90c00217 	ldw	r3,8(r18)
   8e618:	89400404 	addi	r5,r17,16
   8e61c:	91000404 	addi	r4,r18,16
   8e620:	88c00215 	stw	r3,8(r17)
   8e624:	90800317 	ldw	r2,12(r18)
   8e628:	88800315 	stw	r2,12(r17)
   8e62c:	31c09126 	beq	r6,r7,8e874 <_realloc_r+0x574>
   8e630:	20800017 	ldw	r2,0(r4)
   8e634:	28800015 	stw	r2,0(r5)
   8e638:	20c00117 	ldw	r3,4(r4)
   8e63c:	28c00115 	stw	r3,4(r5)
   8e640:	20800217 	ldw	r2,8(r4)
   8e644:	28800215 	stw	r2,8(r5)
   8e648:	900b883a 	mov	r5,r18
   8e64c:	b009883a 	mov	r4,r22
   8e650:	008bac40 	call	8bac4 <_free_r>
   8e654:	b009883a 	mov	r4,r22
   8e658:	009257c0 	call	9257c <__malloc_unlock>
   8e65c:	003f5e06 	br	8e3d8 <_realloc_r+0xd8>
   8e660:	300b883a 	mov	r5,r6
   8e664:	dfc00b17 	ldw	ra,44(sp)
   8e668:	df000a17 	ldw	fp,40(sp)
   8e66c:	ddc00917 	ldw	r23,36(sp)
   8e670:	dd800817 	ldw	r22,32(sp)
   8e674:	dd400717 	ldw	r21,28(sp)
   8e678:	dd000617 	ldw	r20,24(sp)
   8e67c:	dcc00517 	ldw	r19,20(sp)
   8e680:	dc800417 	ldw	r18,16(sp)
   8e684:	dc400317 	ldw	r17,12(sp)
   8e688:	dc000217 	ldw	r16,8(sp)
   8e68c:	dec00c04 	addi	sp,sp,48
   8e690:	008c64c1 	jmpi	8c64c <_malloc_r>
   8e694:	38800117 	ldw	r2,4(r7)
   8e698:	e54b883a 	add	r5,fp,r21
   8e69c:	31000054 	ori	r4,r6,1
   8e6a0:	1080004c 	andi	r2,r2,1
   8e6a4:	1704b03a 	or	r2,r2,fp
   8e6a8:	38800115 	stw	r2,4(r7)
   8e6ac:	29000115 	stw	r4,4(r5)
   8e6b0:	2987883a 	add	r3,r5,r6
   8e6b4:	18800117 	ldw	r2,4(r3)
   8e6b8:	29400204 	addi	r5,r5,8
   8e6bc:	b009883a 	mov	r4,r22
   8e6c0:	10800054 	ori	r2,r2,1
   8e6c4:	18800115 	stw	r2,4(r3)
   8e6c8:	008bac40 	call	8bac4 <_free_r>
   8e6cc:	003f3806 	br	8e3b0 <_realloc_r+0xb0>
   8e6d0:	000d883a 	mov	r6,zero
   8e6d4:	0009883a 	mov	r4,zero
   8e6d8:	003f5d06 	br	8e450 <_realloc_r+0x150>
   8e6dc:	30c00217 	ldw	r3,8(r6)
   8e6e0:	30800317 	ldw	r2,12(r6)
   8e6e4:	800f883a 	mov	r7,r16
   8e6e8:	84000204 	addi	r16,r16,8
   8e6ec:	10c00215 	stw	r3,8(r2)
   8e6f0:	18800315 	stw	r2,12(r3)
   8e6f4:	003f2306 	br	8e384 <_realloc_r+0x84>
   8e6f8:	8809883a 	mov	r4,r17
   8e6fc:	900b883a 	mov	r5,r18
   8e700:	008cf100 	call	8cf10 <memmove>
   8e704:	003fd006 	br	8e648 <_realloc_r+0x348>
   8e708:	30800117 	ldw	r2,4(r6)
   8e70c:	e0c00404 	addi	r3,fp,16
   8e710:	1108703a 	and	r4,r2,r4
   8e714:	9905883a 	add	r2,r19,r4
   8e718:	10ff4d16 	blt	r2,r3,8e450 <_realloc_r+0x150>
   8e71c:	1705c83a 	sub	r2,r2,fp
   8e720:	870b883a 	add	r5,r16,fp
   8e724:	10800054 	ori	r2,r2,1
   8e728:	28800115 	stw	r2,4(r5)
   8e72c:	80c00117 	ldw	r3,4(r16)
   8e730:	008002b4 	movhi	r2,10
   8e734:	10818004 	addi	r2,r2,1536
   8e738:	b009883a 	mov	r4,r22
   8e73c:	18c0004c 	andi	r3,r3,1
   8e740:	e0c6b03a 	or	r3,fp,r3
   8e744:	11400215 	stw	r5,8(r2)
   8e748:	80c00115 	stw	r3,4(r16)
   8e74c:	009257c0 	call	9257c <__malloc_unlock>
   8e750:	84400204 	addi	r17,r16,8
   8e754:	003f2006 	br	8e3d8 <_realloc_r+0xd8>
   8e758:	98a9883a 	add	r20,r19,r2
   8e75c:	2509883a 	add	r4,r4,r20
   8e760:	e0800404 	addi	r2,fp,16
   8e764:	d9000115 	stw	r4,4(sp)
   8e768:	20bf7016 	blt	r4,r2,8e52c <_realloc_r+0x22c>
   8e76c:	b8c00317 	ldw	r3,12(r23)
   8e770:	b8800217 	ldw	r2,8(r23)
   8e774:	99bfff04 	addi	r6,r19,-4
   8e778:	01400904 	movi	r5,36
   8e77c:	18800215 	stw	r2,8(r3)
   8e780:	10c00315 	stw	r3,12(r2)
   8e784:	bc400204 	addi	r17,r23,8
   8e788:	29804136 	bltu	r5,r6,8e890 <_realloc_r+0x590>
   8e78c:	008004c4 	movi	r2,19
   8e790:	9009883a 	mov	r4,r18
   8e794:	880f883a 	mov	r7,r17
   8e798:	11800f2e 	bgeu	r2,r6,8e7d8 <_realloc_r+0x4d8>
   8e79c:	90800017 	ldw	r2,0(r18)
   8e7a0:	b9c00404 	addi	r7,r23,16
   8e7a4:	91000204 	addi	r4,r18,8
   8e7a8:	b8800215 	stw	r2,8(r23)
   8e7ac:	90c00117 	ldw	r3,4(r18)
   8e7b0:	008006c4 	movi	r2,27
   8e7b4:	b8c00315 	stw	r3,12(r23)
   8e7b8:	1180072e 	bgeu	r2,r6,8e7d8 <_realloc_r+0x4d8>
   8e7bc:	90c00217 	ldw	r3,8(r18)
   8e7c0:	b9c00604 	addi	r7,r23,24
   8e7c4:	91000404 	addi	r4,r18,16
   8e7c8:	b8c00415 	stw	r3,16(r23)
   8e7cc:	90800317 	ldw	r2,12(r18)
   8e7d0:	b8800515 	stw	r2,20(r23)
   8e7d4:	31404026 	beq	r6,r5,8e8d8 <_realloc_r+0x5d8>
   8e7d8:	20800017 	ldw	r2,0(r4)
   8e7dc:	38800015 	stw	r2,0(r7)
   8e7e0:	20c00117 	ldw	r3,4(r4)
   8e7e4:	38c00115 	stw	r3,4(r7)
   8e7e8:	20800217 	ldw	r2,8(r4)
   8e7ec:	38800215 	stw	r2,8(r7)
   8e7f0:	d8c00117 	ldw	r3,4(sp)
   8e7f4:	bf0b883a 	add	r5,r23,fp
   8e7f8:	b009883a 	mov	r4,r22
   8e7fc:	1f05c83a 	sub	r2,r3,fp
   8e800:	10800054 	ori	r2,r2,1
   8e804:	28800115 	stw	r2,4(r5)
   8e808:	b8c00117 	ldw	r3,4(r23)
   8e80c:	008002b4 	movhi	r2,10
   8e810:	10818004 	addi	r2,r2,1536
   8e814:	11400215 	stw	r5,8(r2)
   8e818:	18c0004c 	andi	r3,r3,1
   8e81c:	e0c6b03a 	or	r3,fp,r3
   8e820:	b8c00115 	stw	r3,4(r23)
   8e824:	009257c0 	call	9257c <__malloc_unlock>
   8e828:	003eeb06 	br	8e3d8 <_realloc_r+0xd8>
   8e82c:	20800117 	ldw	r2,4(r4)
   8e830:	00ffff04 	movi	r3,-4
   8e834:	800f883a 	mov	r7,r16
   8e838:	10c4703a 	and	r2,r2,r3
   8e83c:	98a9883a 	add	r20,r19,r2
   8e840:	84000204 	addi	r16,r16,8
   8e844:	003ecf06 	br	8e384 <_realloc_r+0x84>
   8e848:	900b883a 	mov	r5,r18
   8e84c:	8009883a 	mov	r4,r16
   8e850:	008cf100 	call	8cf10 <memmove>
   8e854:	dd000017 	ldw	r20,0(sp)
   8e858:	b80f883a 	mov	r7,r23
   8e85c:	003ec906 	br	8e384 <_realloc_r+0x84>
   8e860:	900b883a 	mov	r5,r18
   8e864:	8009883a 	mov	r4,r16
   8e868:	008cf100 	call	8cf10 <memmove>
   8e86c:	b80f883a 	mov	r7,r23
   8e870:	003ec406 	br	8e384 <_realloc_r+0x84>
   8e874:	90c00417 	ldw	r3,16(r18)
   8e878:	89400604 	addi	r5,r17,24
   8e87c:	91000604 	addi	r4,r18,24
   8e880:	88c00415 	stw	r3,16(r17)
   8e884:	90800517 	ldw	r2,20(r18)
   8e888:	88800515 	stw	r2,20(r17)
   8e88c:	003f6806 	br	8e630 <_realloc_r+0x330>
   8e890:	900b883a 	mov	r5,r18
   8e894:	8809883a 	mov	r4,r17
   8e898:	008cf100 	call	8cf10 <memmove>
   8e89c:	003fd406 	br	8e7f0 <_realloc_r+0x4f0>
   8e8a0:	90c00417 	ldw	r3,16(r18)
   8e8a4:	91000604 	addi	r4,r18,24
   8e8a8:	ba000804 	addi	r8,r23,32
   8e8ac:	b8c00615 	stw	r3,24(r23)
   8e8b0:	90800517 	ldw	r2,20(r18)
   8e8b4:	b8800715 	stw	r2,28(r23)
   8e8b8:	003f1206 	br	8e504 <_realloc_r+0x204>
   8e8bc:	90c00417 	ldw	r3,16(r18)
   8e8c0:	91000604 	addi	r4,r18,24
   8e8c4:	ba000804 	addi	r8,r23,32
   8e8c8:	b8c00615 	stw	r3,24(r23)
   8e8cc:	90800517 	ldw	r2,20(r18)
   8e8d0:	b8800715 	stw	r2,28(r23)
   8e8d4:	003f3206 	br	8e5a0 <_realloc_r+0x2a0>
   8e8d8:	90c00417 	ldw	r3,16(r18)
   8e8dc:	91000604 	addi	r4,r18,24
   8e8e0:	b9c00804 	addi	r7,r23,32
   8e8e4:	b8c00615 	stw	r3,24(r23)
   8e8e8:	90800517 	ldw	r2,20(r18)
   8e8ec:	b8800715 	stw	r2,28(r23)
   8e8f0:	003fb906 	br	8e7d8 <_realloc_r+0x4d8>

0008e8f4 <__isinfd>:
   8e8f4:	200d883a 	mov	r6,r4
   8e8f8:	0109c83a 	sub	r4,zero,r4
   8e8fc:	2188b03a 	or	r4,r4,r6
   8e900:	2008d7fa 	srli	r4,r4,31
   8e904:	00a00034 	movhi	r2,32768
   8e908:	10bfffc4 	addi	r2,r2,-1
   8e90c:	1144703a 	and	r2,r2,r5
   8e910:	2088b03a 	or	r4,r4,r2
   8e914:	009ffc34 	movhi	r2,32752
   8e918:	1105c83a 	sub	r2,r2,r4
   8e91c:	0087c83a 	sub	r3,zero,r2
   8e920:	10c4b03a 	or	r2,r2,r3
   8e924:	1004d7fa 	srli	r2,r2,31
   8e928:	00c00044 	movi	r3,1
   8e92c:	1885c83a 	sub	r2,r3,r2
   8e930:	f800283a 	ret

0008e934 <__isnand>:
   8e934:	200d883a 	mov	r6,r4
   8e938:	0109c83a 	sub	r4,zero,r4
   8e93c:	2188b03a 	or	r4,r4,r6
   8e940:	2008d7fa 	srli	r4,r4,31
   8e944:	00a00034 	movhi	r2,32768
   8e948:	10bfffc4 	addi	r2,r2,-1
   8e94c:	1144703a 	and	r2,r2,r5
   8e950:	2088b03a 	or	r4,r4,r2
   8e954:	009ffc34 	movhi	r2,32752
   8e958:	1105c83a 	sub	r2,r2,r4
   8e95c:	1004d7fa 	srli	r2,r2,31
   8e960:	f800283a 	ret

0008e964 <_sbrk_r>:
   8e964:	defffd04 	addi	sp,sp,-12
   8e968:	dc000015 	stw	r16,0(sp)
   8e96c:	040002b4 	movhi	r16,10
   8e970:	840e3b04 	addi	r16,r16,14572
   8e974:	dc400115 	stw	r17,4(sp)
   8e978:	80000015 	stw	zero,0(r16)
   8e97c:	2023883a 	mov	r17,r4
   8e980:	2809883a 	mov	r4,r5
   8e984:	dfc00215 	stw	ra,8(sp)
   8e988:	009212c0 	call	9212c <sbrk>
   8e98c:	1007883a 	mov	r3,r2
   8e990:	00bfffc4 	movi	r2,-1
   8e994:	18800626 	beq	r3,r2,8e9b0 <_sbrk_r+0x4c>
   8e998:	1805883a 	mov	r2,r3
   8e99c:	dfc00217 	ldw	ra,8(sp)
   8e9a0:	dc400117 	ldw	r17,4(sp)
   8e9a4:	dc000017 	ldw	r16,0(sp)
   8e9a8:	dec00304 	addi	sp,sp,12
   8e9ac:	f800283a 	ret
   8e9b0:	80800017 	ldw	r2,0(r16)
   8e9b4:	103ff826 	beq	r2,zero,8e998 <_sbrk_r+0x34>
   8e9b8:	88800015 	stw	r2,0(r17)
   8e9bc:	1805883a 	mov	r2,r3
   8e9c0:	dfc00217 	ldw	ra,8(sp)
   8e9c4:	dc400117 	ldw	r17,4(sp)
   8e9c8:	dc000017 	ldw	r16,0(sp)
   8e9cc:	dec00304 	addi	sp,sp,12
   8e9d0:	f800283a 	ret

0008e9d4 <__sclose>:
   8e9d4:	2940038f 	ldh	r5,14(r5)
   8e9d8:	008ee681 	jmpi	8ee68 <_close_r>

0008e9dc <__sseek>:
   8e9dc:	defffe04 	addi	sp,sp,-8
   8e9e0:	dc000015 	stw	r16,0(sp)
   8e9e4:	2821883a 	mov	r16,r5
   8e9e8:	2940038f 	ldh	r5,14(r5)
   8e9ec:	dfc00115 	stw	ra,4(sp)
   8e9f0:	008f0e00 	call	8f0e0 <_lseek_r>
   8e9f4:	1007883a 	mov	r3,r2
   8e9f8:	00bfffc4 	movi	r2,-1
   8e9fc:	18800926 	beq	r3,r2,8ea24 <__sseek+0x48>
   8ea00:	8080030b 	ldhu	r2,12(r16)
   8ea04:	80c01415 	stw	r3,80(r16)
   8ea08:	10840014 	ori	r2,r2,4096
   8ea0c:	8080030d 	sth	r2,12(r16)
   8ea10:	1805883a 	mov	r2,r3
   8ea14:	dfc00117 	ldw	ra,4(sp)
   8ea18:	dc000017 	ldw	r16,0(sp)
   8ea1c:	dec00204 	addi	sp,sp,8
   8ea20:	f800283a 	ret
   8ea24:	8080030b 	ldhu	r2,12(r16)
   8ea28:	10bbffcc 	andi	r2,r2,61439
   8ea2c:	8080030d 	sth	r2,12(r16)
   8ea30:	1805883a 	mov	r2,r3
   8ea34:	dfc00117 	ldw	ra,4(sp)
   8ea38:	dc000017 	ldw	r16,0(sp)
   8ea3c:	dec00204 	addi	sp,sp,8
   8ea40:	f800283a 	ret

0008ea44 <__swrite>:
   8ea44:	2880030b 	ldhu	r2,12(r5)
   8ea48:	defffb04 	addi	sp,sp,-20
   8ea4c:	dcc00315 	stw	r19,12(sp)
   8ea50:	1080400c 	andi	r2,r2,256
   8ea54:	dc800215 	stw	r18,8(sp)
   8ea58:	dc400115 	stw	r17,4(sp)
   8ea5c:	dc000015 	stw	r16,0(sp)
   8ea60:	3027883a 	mov	r19,r6
   8ea64:	3825883a 	mov	r18,r7
   8ea68:	dfc00415 	stw	ra,16(sp)
   8ea6c:	2821883a 	mov	r16,r5
   8ea70:	000d883a 	mov	r6,zero
   8ea74:	01c00084 	movi	r7,2
   8ea78:	2023883a 	mov	r17,r4
   8ea7c:	10000226 	beq	r2,zero,8ea88 <__swrite+0x44>
   8ea80:	2940038f 	ldh	r5,14(r5)
   8ea84:	008f0e00 	call	8f0e0 <_lseek_r>
   8ea88:	8080030b 	ldhu	r2,12(r16)
   8ea8c:	8140038f 	ldh	r5,14(r16)
   8ea90:	8809883a 	mov	r4,r17
   8ea94:	10bbffcc 	andi	r2,r2,61439
   8ea98:	980d883a 	mov	r6,r19
   8ea9c:	900f883a 	mov	r7,r18
   8eaa0:	8080030d 	sth	r2,12(r16)
   8eaa4:	dfc00417 	ldw	ra,16(sp)
   8eaa8:	dcc00317 	ldw	r19,12(sp)
   8eaac:	dc800217 	ldw	r18,8(sp)
   8eab0:	dc400117 	ldw	r17,4(sp)
   8eab4:	dc000017 	ldw	r16,0(sp)
   8eab8:	dec00504 	addi	sp,sp,20
   8eabc:	008ed281 	jmpi	8ed28 <_write_r>

0008eac0 <__sread>:
   8eac0:	defffe04 	addi	sp,sp,-8
   8eac4:	dc000015 	stw	r16,0(sp)
   8eac8:	2821883a 	mov	r16,r5
   8eacc:	2940038f 	ldh	r5,14(r5)
   8ead0:	dfc00115 	stw	ra,4(sp)
   8ead4:	008f1580 	call	8f158 <_read_r>
   8ead8:	1007883a 	mov	r3,r2
   8eadc:	10000816 	blt	r2,zero,8eb00 <__sread+0x40>
   8eae0:	80801417 	ldw	r2,80(r16)
   8eae4:	10c5883a 	add	r2,r2,r3
   8eae8:	80801415 	stw	r2,80(r16)
   8eaec:	1805883a 	mov	r2,r3
   8eaf0:	dfc00117 	ldw	ra,4(sp)
   8eaf4:	dc000017 	ldw	r16,0(sp)
   8eaf8:	dec00204 	addi	sp,sp,8
   8eafc:	f800283a 	ret
   8eb00:	8080030b 	ldhu	r2,12(r16)
   8eb04:	10bbffcc 	andi	r2,r2,61439
   8eb08:	8080030d 	sth	r2,12(r16)
   8eb0c:	1805883a 	mov	r2,r3
   8eb10:	dfc00117 	ldw	ra,4(sp)
   8eb14:	dc000017 	ldw	r16,0(sp)
   8eb18:	dec00204 	addi	sp,sp,8
   8eb1c:	f800283a 	ret

0008eb20 <strcmp>:
   8eb20:	2144b03a 	or	r2,r4,r5
   8eb24:	108000cc 	andi	r2,r2,3
   8eb28:	10001d1e 	bne	r2,zero,8eba0 <strcmp+0x80>
   8eb2c:	200f883a 	mov	r7,r4
   8eb30:	28800017 	ldw	r2,0(r5)
   8eb34:	21000017 	ldw	r4,0(r4)
   8eb38:	280d883a 	mov	r6,r5
   8eb3c:	2080161e 	bne	r4,r2,8eb98 <strcmp+0x78>
   8eb40:	023fbff4 	movhi	r8,65279
   8eb44:	423fbfc4 	addi	r8,r8,-257
   8eb48:	2207883a 	add	r3,r4,r8
   8eb4c:	01602074 	movhi	r5,32897
   8eb50:	29602004 	addi	r5,r5,-32640
   8eb54:	1946703a 	and	r3,r3,r5
   8eb58:	0104303a 	nor	r2,zero,r4
   8eb5c:	10c4703a 	and	r2,r2,r3
   8eb60:	10001c1e 	bne	r2,zero,8ebd4 <strcmp+0xb4>
   8eb64:	4013883a 	mov	r9,r8
   8eb68:	2811883a 	mov	r8,r5
   8eb6c:	00000106 	br	8eb74 <strcmp+0x54>
   8eb70:	1800181e 	bne	r3,zero,8ebd4 <strcmp+0xb4>
   8eb74:	39c00104 	addi	r7,r7,4
   8eb78:	39000017 	ldw	r4,0(r7)
   8eb7c:	31800104 	addi	r6,r6,4
   8eb80:	31400017 	ldw	r5,0(r6)
   8eb84:	2245883a 	add	r2,r4,r9
   8eb88:	1204703a 	and	r2,r2,r8
   8eb8c:	0106303a 	nor	r3,zero,r4
   8eb90:	1886703a 	and	r3,r3,r2
   8eb94:	217ff626 	beq	r4,r5,8eb70 <strcmp+0x50>
   8eb98:	3809883a 	mov	r4,r7
   8eb9c:	300b883a 	mov	r5,r6
   8eba0:	20c00007 	ldb	r3,0(r4)
   8eba4:	1800051e 	bne	r3,zero,8ebbc <strcmp+0x9c>
   8eba8:	00000606 	br	8ebc4 <strcmp+0xa4>
   8ebac:	21000044 	addi	r4,r4,1
   8ebb0:	20c00007 	ldb	r3,0(r4)
   8ebb4:	29400044 	addi	r5,r5,1
   8ebb8:	18000226 	beq	r3,zero,8ebc4 <strcmp+0xa4>
   8ebbc:	28800007 	ldb	r2,0(r5)
   8ebc0:	18bffa26 	beq	r3,r2,8ebac <strcmp+0x8c>
   8ebc4:	20c00003 	ldbu	r3,0(r4)
   8ebc8:	28800003 	ldbu	r2,0(r5)
   8ebcc:	1885c83a 	sub	r2,r3,r2
   8ebd0:	f800283a 	ret
   8ebd4:	0005883a 	mov	r2,zero
   8ebd8:	f800283a 	ret

0008ebdc <__swbuf_r>:
   8ebdc:	defffc04 	addi	sp,sp,-16
   8ebe0:	dc400215 	stw	r17,8(sp)
   8ebe4:	dc000115 	stw	r16,4(sp)
   8ebe8:	dfc00315 	stw	ra,12(sp)
   8ebec:	2023883a 	mov	r17,r4
   8ebf0:	2821883a 	mov	r16,r5
   8ebf4:	20000226 	beq	r4,zero,8ec00 <__swbuf_r+0x24>
   8ebf8:	20800e17 	ldw	r2,56(r4)
   8ebfc:	10002f26 	beq	r2,zero,8ecbc <__swbuf_r+0xe0>
   8ec00:	3080030b 	ldhu	r2,12(r6)
   8ec04:	30c00617 	ldw	r3,24(r6)
   8ec08:	1080020c 	andi	r2,r2,8
   8ec0c:	30c00215 	stw	r3,8(r6)
   8ec10:	10002226 	beq	r2,zero,8ec9c <__swbuf_r+0xc0>
   8ec14:	30c00417 	ldw	r3,16(r6)
   8ec18:	18002026 	beq	r3,zero,8ec9c <__swbuf_r+0xc0>
   8ec1c:	31000017 	ldw	r4,0(r6)
   8ec20:	30800517 	ldw	r2,20(r6)
   8ec24:	20c7c83a 	sub	r3,r4,r3
   8ec28:	18802f0e 	bge	r3,r2,8ece8 <__swbuf_r+0x10c>
   8ec2c:	19400044 	addi	r5,r3,1
   8ec30:	30800217 	ldw	r2,8(r6)
   8ec34:	84003fcc 	andi	r16,r16,255
   8ec38:	20c00044 	addi	r3,r4,1
   8ec3c:	10bfffc4 	addi	r2,r2,-1
   8ec40:	30800215 	stw	r2,8(r6)
   8ec44:	24000005 	stb	r16,0(r4)
   8ec48:	30800517 	ldw	r2,20(r6)
   8ec4c:	30c00015 	stw	r3,0(r6)
   8ec50:	11400c26 	beq	r2,r5,8ec84 <__swbuf_r+0xa8>
   8ec54:	3080030b 	ldhu	r2,12(r6)
   8ec58:	1080004c 	andi	r2,r2,1
   8ec5c:	1005003a 	cmpeq	r2,r2,zero
   8ec60:	10000626 	beq	r2,zero,8ec7c <__swbuf_r+0xa0>
   8ec64:	8005883a 	mov	r2,r16
   8ec68:	dfc00317 	ldw	ra,12(sp)
   8ec6c:	dc400217 	ldw	r17,8(sp)
   8ec70:	dc000117 	ldw	r16,4(sp)
   8ec74:	dec00404 	addi	sp,sp,16
   8ec78:	f800283a 	ret
   8ec7c:	00800284 	movi	r2,10
   8ec80:	80bff81e 	bne	r16,r2,8ec64 <__swbuf_r+0x88>
   8ec84:	8809883a 	mov	r4,r17
   8ec88:	300b883a 	mov	r5,r6
   8ec8c:	008b4740 	call	8b474 <_fflush_r>
   8ec90:	103ff426 	beq	r2,zero,8ec64 <__swbuf_r+0x88>
   8ec94:	043fffc4 	movi	r16,-1
   8ec98:	003ff206 	br	8ec64 <__swbuf_r+0x88>
   8ec9c:	300b883a 	mov	r5,r6
   8eca0:	8809883a 	mov	r4,r17
   8eca4:	d9800015 	stw	r6,0(sp)
   8eca8:	0089b400 	call	89b40 <__swsetup_r>
   8ecac:	d9800017 	ldw	r6,0(sp)
   8ecb0:	1000061e 	bne	r2,zero,8eccc <__swbuf_r+0xf0>
   8ecb4:	30c00417 	ldw	r3,16(r6)
   8ecb8:	003fd806 	br	8ec1c <__swbuf_r+0x40>
   8ecbc:	d9800015 	stw	r6,0(sp)
   8ecc0:	008b70c0 	call	8b70c <__sinit>
   8ecc4:	d9800017 	ldw	r6,0(sp)
   8ecc8:	003fcd06 	br	8ec00 <__swbuf_r+0x24>
   8eccc:	3080030b 	ldhu	r2,12(r6)
   8ecd0:	00c00244 	movi	r3,9
   8ecd4:	043fffc4 	movi	r16,-1
   8ecd8:	10801014 	ori	r2,r2,64
   8ecdc:	3080030d 	sth	r2,12(r6)
   8ece0:	88c00015 	stw	r3,0(r17)
   8ece4:	003fdf06 	br	8ec64 <__swbuf_r+0x88>
   8ece8:	300b883a 	mov	r5,r6
   8ecec:	8809883a 	mov	r4,r17
   8ecf0:	d9800015 	stw	r6,0(sp)
   8ecf4:	008b4740 	call	8b474 <_fflush_r>
   8ecf8:	d9800017 	ldw	r6,0(sp)
   8ecfc:	103fe51e 	bne	r2,zero,8ec94 <__swbuf_r+0xb8>
   8ed00:	31000017 	ldw	r4,0(r6)
   8ed04:	01400044 	movi	r5,1
   8ed08:	003fc906 	br	8ec30 <__swbuf_r+0x54>

0008ed0c <__swbuf>:
   8ed0c:	018002b4 	movhi	r6,10
   8ed10:	31871e04 	addi	r6,r6,7288
   8ed14:	2007883a 	mov	r3,r4
   8ed18:	31000017 	ldw	r4,0(r6)
   8ed1c:	280d883a 	mov	r6,r5
   8ed20:	180b883a 	mov	r5,r3
   8ed24:	008ebdc1 	jmpi	8ebdc <__swbuf_r>

0008ed28 <_write_r>:
   8ed28:	defffd04 	addi	sp,sp,-12
   8ed2c:	dc000015 	stw	r16,0(sp)
   8ed30:	040002b4 	movhi	r16,10
   8ed34:	840e3b04 	addi	r16,r16,14572
   8ed38:	dc400115 	stw	r17,4(sp)
   8ed3c:	80000015 	stw	zero,0(r16)
   8ed40:	2023883a 	mov	r17,r4
   8ed44:	2809883a 	mov	r4,r5
   8ed48:	300b883a 	mov	r5,r6
   8ed4c:	380d883a 	mov	r6,r7
   8ed50:	dfc00215 	stw	ra,8(sp)
   8ed54:	00921e80 	call	921e8 <write>
   8ed58:	1007883a 	mov	r3,r2
   8ed5c:	00bfffc4 	movi	r2,-1
   8ed60:	18800626 	beq	r3,r2,8ed7c <_write_r+0x54>
   8ed64:	1805883a 	mov	r2,r3
   8ed68:	dfc00217 	ldw	ra,8(sp)
   8ed6c:	dc400117 	ldw	r17,4(sp)
   8ed70:	dc000017 	ldw	r16,0(sp)
   8ed74:	dec00304 	addi	sp,sp,12
   8ed78:	f800283a 	ret
   8ed7c:	80800017 	ldw	r2,0(r16)
   8ed80:	103ff826 	beq	r2,zero,8ed64 <_write_r+0x3c>
   8ed84:	88800015 	stw	r2,0(r17)
   8ed88:	1805883a 	mov	r2,r3
   8ed8c:	dfc00217 	ldw	ra,8(sp)
   8ed90:	dc400117 	ldw	r17,4(sp)
   8ed94:	dc000017 	ldw	r16,0(sp)
   8ed98:	dec00304 	addi	sp,sp,12
   8ed9c:	f800283a 	ret

0008eda0 <_calloc_r>:
   8eda0:	defffe04 	addi	sp,sp,-8
   8eda4:	dc400015 	stw	r17,0(sp)
   8eda8:	2023883a 	mov	r17,r4
   8edac:	2809883a 	mov	r4,r5
   8edb0:	300b883a 	mov	r5,r6
   8edb4:	dfc00115 	stw	ra,4(sp)
   8edb8:	00877e40 	call	877e4 <__mulsi3>
   8edbc:	100b883a 	mov	r5,r2
   8edc0:	8809883a 	mov	r4,r17
   8edc4:	008c64c0 	call	8c64c <_malloc_r>
   8edc8:	1023883a 	mov	r17,r2
   8edcc:	01c00904 	movi	r7,36
   8edd0:	10000d26 	beq	r2,zero,8ee08 <_calloc_r+0x68>
   8edd4:	10ffff17 	ldw	r3,-4(r2)
   8edd8:	1009883a 	mov	r4,r2
   8eddc:	00bfff04 	movi	r2,-4
   8ede0:	1886703a 	and	r3,r3,r2
   8ede4:	1887883a 	add	r3,r3,r2
   8ede8:	180d883a 	mov	r6,r3
   8edec:	000b883a 	mov	r5,zero
   8edf0:	38c01736 	bltu	r7,r3,8ee50 <_calloc_r+0xb0>
   8edf4:	008004c4 	movi	r2,19
   8edf8:	10c00836 	bltu	r2,r3,8ee1c <_calloc_r+0x7c>
   8edfc:	20000215 	stw	zero,8(r4)
   8ee00:	20000015 	stw	zero,0(r4)
   8ee04:	20000115 	stw	zero,4(r4)
   8ee08:	8805883a 	mov	r2,r17
   8ee0c:	dfc00117 	ldw	ra,4(sp)
   8ee10:	dc400017 	ldw	r17,0(sp)
   8ee14:	dec00204 	addi	sp,sp,8
   8ee18:	f800283a 	ret
   8ee1c:	008006c4 	movi	r2,27
   8ee20:	88000015 	stw	zero,0(r17)
   8ee24:	88000115 	stw	zero,4(r17)
   8ee28:	89000204 	addi	r4,r17,8
   8ee2c:	10fff32e 	bgeu	r2,r3,8edfc <_calloc_r+0x5c>
   8ee30:	88000215 	stw	zero,8(r17)
   8ee34:	88000315 	stw	zero,12(r17)
   8ee38:	89000404 	addi	r4,r17,16
   8ee3c:	19ffef1e 	bne	r3,r7,8edfc <_calloc_r+0x5c>
   8ee40:	89000604 	addi	r4,r17,24
   8ee44:	88000415 	stw	zero,16(r17)
   8ee48:	88000515 	stw	zero,20(r17)
   8ee4c:	003feb06 	br	8edfc <_calloc_r+0x5c>
   8ee50:	008cff00 	call	8cff0 <memset>
   8ee54:	8805883a 	mov	r2,r17
   8ee58:	dfc00117 	ldw	ra,4(sp)
   8ee5c:	dc400017 	ldw	r17,0(sp)
   8ee60:	dec00204 	addi	sp,sp,8
   8ee64:	f800283a 	ret

0008ee68 <_close_r>:
   8ee68:	defffd04 	addi	sp,sp,-12
   8ee6c:	dc000015 	stw	r16,0(sp)
   8ee70:	040002b4 	movhi	r16,10
   8ee74:	840e3b04 	addi	r16,r16,14572
   8ee78:	dc400115 	stw	r17,4(sp)
   8ee7c:	80000015 	stw	zero,0(r16)
   8ee80:	2023883a 	mov	r17,r4
   8ee84:	2809883a 	mov	r4,r5
   8ee88:	dfc00215 	stw	ra,8(sp)
   8ee8c:	00916800 	call	91680 <close>
   8ee90:	1007883a 	mov	r3,r2
   8ee94:	00bfffc4 	movi	r2,-1
   8ee98:	18800626 	beq	r3,r2,8eeb4 <_close_r+0x4c>
   8ee9c:	1805883a 	mov	r2,r3
   8eea0:	dfc00217 	ldw	ra,8(sp)
   8eea4:	dc400117 	ldw	r17,4(sp)
   8eea8:	dc000017 	ldw	r16,0(sp)
   8eeac:	dec00304 	addi	sp,sp,12
   8eeb0:	f800283a 	ret
   8eeb4:	80800017 	ldw	r2,0(r16)
   8eeb8:	103ff826 	beq	r2,zero,8ee9c <_close_r+0x34>
   8eebc:	88800015 	stw	r2,0(r17)
   8eec0:	1805883a 	mov	r2,r3
   8eec4:	dfc00217 	ldw	ra,8(sp)
   8eec8:	dc400117 	ldw	r17,4(sp)
   8eecc:	dc000017 	ldw	r16,0(sp)
   8eed0:	dec00304 	addi	sp,sp,12
   8eed4:	f800283a 	ret

0008eed8 <_fclose_r>:
   8eed8:	defffc04 	addi	sp,sp,-16
   8eedc:	dc400115 	stw	r17,4(sp)
   8eee0:	dc000015 	stw	r16,0(sp)
   8eee4:	dfc00315 	stw	ra,12(sp)
   8eee8:	dc800215 	stw	r18,8(sp)
   8eeec:	2821883a 	mov	r16,r5
   8eef0:	2023883a 	mov	r17,r4
   8eef4:	28002926 	beq	r5,zero,8ef9c <_fclose_r+0xc4>
   8eef8:	008b6fc0 	call	8b6fc <__sfp_lock_acquire>
   8eefc:	88000226 	beq	r17,zero,8ef08 <_fclose_r+0x30>
   8ef00:	88800e17 	ldw	r2,56(r17)
   8ef04:	10002d26 	beq	r2,zero,8efbc <_fclose_r+0xe4>
   8ef08:	8080030f 	ldh	r2,12(r16)
   8ef0c:	10002226 	beq	r2,zero,8ef98 <_fclose_r+0xc0>
   8ef10:	8809883a 	mov	r4,r17
   8ef14:	800b883a 	mov	r5,r16
   8ef18:	008b4740 	call	8b474 <_fflush_r>
   8ef1c:	1025883a 	mov	r18,r2
   8ef20:	80800b17 	ldw	r2,44(r16)
   8ef24:	10000426 	beq	r2,zero,8ef38 <_fclose_r+0x60>
   8ef28:	81400717 	ldw	r5,28(r16)
   8ef2c:	8809883a 	mov	r4,r17
   8ef30:	103ee83a 	callr	r2
   8ef34:	10002a16 	blt	r2,zero,8efe0 <_fclose_r+0x108>
   8ef38:	8080030b 	ldhu	r2,12(r16)
   8ef3c:	1080200c 	andi	r2,r2,128
   8ef40:	1000231e 	bne	r2,zero,8efd0 <_fclose_r+0xf8>
   8ef44:	81400c17 	ldw	r5,48(r16)
   8ef48:	28000526 	beq	r5,zero,8ef60 <_fclose_r+0x88>
   8ef4c:	80801004 	addi	r2,r16,64
   8ef50:	28800226 	beq	r5,r2,8ef5c <_fclose_r+0x84>
   8ef54:	8809883a 	mov	r4,r17
   8ef58:	008bac40 	call	8bac4 <_free_r>
   8ef5c:	80000c15 	stw	zero,48(r16)
   8ef60:	81401117 	ldw	r5,68(r16)
   8ef64:	28000326 	beq	r5,zero,8ef74 <_fclose_r+0x9c>
   8ef68:	8809883a 	mov	r4,r17
   8ef6c:	008bac40 	call	8bac4 <_free_r>
   8ef70:	80001115 	stw	zero,68(r16)
   8ef74:	8000030d 	sth	zero,12(r16)
   8ef78:	008b7000 	call	8b700 <__sfp_lock_release>
   8ef7c:	9005883a 	mov	r2,r18
   8ef80:	dfc00317 	ldw	ra,12(sp)
   8ef84:	dc800217 	ldw	r18,8(sp)
   8ef88:	dc400117 	ldw	r17,4(sp)
   8ef8c:	dc000017 	ldw	r16,0(sp)
   8ef90:	dec00404 	addi	sp,sp,16
   8ef94:	f800283a 	ret
   8ef98:	008b7000 	call	8b700 <__sfp_lock_release>
   8ef9c:	0025883a 	mov	r18,zero
   8efa0:	9005883a 	mov	r2,r18
   8efa4:	dfc00317 	ldw	ra,12(sp)
   8efa8:	dc800217 	ldw	r18,8(sp)
   8efac:	dc400117 	ldw	r17,4(sp)
   8efb0:	dc000017 	ldw	r16,0(sp)
   8efb4:	dec00404 	addi	sp,sp,16
   8efb8:	f800283a 	ret
   8efbc:	8809883a 	mov	r4,r17
   8efc0:	008b70c0 	call	8b70c <__sinit>
   8efc4:	8080030f 	ldh	r2,12(r16)
   8efc8:	103fd11e 	bne	r2,zero,8ef10 <_fclose_r+0x38>
   8efcc:	003ff206 	br	8ef98 <_fclose_r+0xc0>
   8efd0:	81400417 	ldw	r5,16(r16)
   8efd4:	8809883a 	mov	r4,r17
   8efd8:	008bac40 	call	8bac4 <_free_r>
   8efdc:	003fd906 	br	8ef44 <_fclose_r+0x6c>
   8efe0:	04bfffc4 	movi	r18,-1
   8efe4:	003fd406 	br	8ef38 <_fclose_r+0x60>

0008efe8 <fclose>:
   8efe8:	008002b4 	movhi	r2,10
   8efec:	10871e04 	addi	r2,r2,7288
   8eff0:	200b883a 	mov	r5,r4
   8eff4:	11000017 	ldw	r4,0(r2)
   8eff8:	008eed81 	jmpi	8eed8 <_fclose_r>

0008effc <_fstat_r>:
   8effc:	defffd04 	addi	sp,sp,-12
   8f000:	dc000015 	stw	r16,0(sp)
   8f004:	040002b4 	movhi	r16,10
   8f008:	840e3b04 	addi	r16,r16,14572
   8f00c:	dc400115 	stw	r17,4(sp)
   8f010:	80000015 	stw	zero,0(r16)
   8f014:	2023883a 	mov	r17,r4
   8f018:	2809883a 	mov	r4,r5
   8f01c:	300b883a 	mov	r5,r6
   8f020:	dfc00215 	stw	ra,8(sp)
   8f024:	009180c0 	call	9180c <fstat>
   8f028:	1007883a 	mov	r3,r2
   8f02c:	00bfffc4 	movi	r2,-1
   8f030:	18800626 	beq	r3,r2,8f04c <_fstat_r+0x50>
   8f034:	1805883a 	mov	r2,r3
   8f038:	dfc00217 	ldw	ra,8(sp)
   8f03c:	dc400117 	ldw	r17,4(sp)
   8f040:	dc000017 	ldw	r16,0(sp)
   8f044:	dec00304 	addi	sp,sp,12
   8f048:	f800283a 	ret
   8f04c:	80800017 	ldw	r2,0(r16)
   8f050:	103ff826 	beq	r2,zero,8f034 <_fstat_r+0x38>
   8f054:	88800015 	stw	r2,0(r17)
   8f058:	1805883a 	mov	r2,r3
   8f05c:	dfc00217 	ldw	ra,8(sp)
   8f060:	dc400117 	ldw	r17,4(sp)
   8f064:	dc000017 	ldw	r16,0(sp)
   8f068:	dec00304 	addi	sp,sp,12
   8f06c:	f800283a 	ret

0008f070 <_isatty_r>:
   8f070:	defffd04 	addi	sp,sp,-12
   8f074:	dc000015 	stw	r16,0(sp)
   8f078:	040002b4 	movhi	r16,10
   8f07c:	840e3b04 	addi	r16,r16,14572
   8f080:	dc400115 	stw	r17,4(sp)
   8f084:	80000015 	stw	zero,0(r16)
   8f088:	2023883a 	mov	r17,r4
   8f08c:	2809883a 	mov	r4,r5
   8f090:	dfc00215 	stw	ra,8(sp)
   8f094:	0091b040 	call	91b04 <isatty>
   8f098:	1007883a 	mov	r3,r2
   8f09c:	00bfffc4 	movi	r2,-1
   8f0a0:	18800626 	beq	r3,r2,8f0bc <_isatty_r+0x4c>
   8f0a4:	1805883a 	mov	r2,r3
   8f0a8:	dfc00217 	ldw	ra,8(sp)
   8f0ac:	dc400117 	ldw	r17,4(sp)
   8f0b0:	dc000017 	ldw	r16,0(sp)
   8f0b4:	dec00304 	addi	sp,sp,12
   8f0b8:	f800283a 	ret
   8f0bc:	80800017 	ldw	r2,0(r16)
   8f0c0:	103ff826 	beq	r2,zero,8f0a4 <_isatty_r+0x34>
   8f0c4:	88800015 	stw	r2,0(r17)
   8f0c8:	1805883a 	mov	r2,r3
   8f0cc:	dfc00217 	ldw	ra,8(sp)
   8f0d0:	dc400117 	ldw	r17,4(sp)
   8f0d4:	dc000017 	ldw	r16,0(sp)
   8f0d8:	dec00304 	addi	sp,sp,12
   8f0dc:	f800283a 	ret

0008f0e0 <_lseek_r>:
   8f0e0:	defffd04 	addi	sp,sp,-12
   8f0e4:	dc000015 	stw	r16,0(sp)
   8f0e8:	040002b4 	movhi	r16,10
   8f0ec:	840e3b04 	addi	r16,r16,14572
   8f0f0:	dc400115 	stw	r17,4(sp)
   8f0f4:	80000015 	stw	zero,0(r16)
   8f0f8:	2023883a 	mov	r17,r4
   8f0fc:	2809883a 	mov	r4,r5
   8f100:	300b883a 	mov	r5,r6
   8f104:	380d883a 	mov	r6,r7
   8f108:	dfc00215 	stw	ra,8(sp)
   8f10c:	0091d140 	call	91d14 <lseek>
   8f110:	1007883a 	mov	r3,r2
   8f114:	00bfffc4 	movi	r2,-1
   8f118:	18800626 	beq	r3,r2,8f134 <_lseek_r+0x54>
   8f11c:	1805883a 	mov	r2,r3
   8f120:	dfc00217 	ldw	ra,8(sp)
   8f124:	dc400117 	ldw	r17,4(sp)
   8f128:	dc000017 	ldw	r16,0(sp)
   8f12c:	dec00304 	addi	sp,sp,12
   8f130:	f800283a 	ret
   8f134:	80800017 	ldw	r2,0(r16)
   8f138:	103ff826 	beq	r2,zero,8f11c <_lseek_r+0x3c>
   8f13c:	88800015 	stw	r2,0(r17)
   8f140:	1805883a 	mov	r2,r3
   8f144:	dfc00217 	ldw	ra,8(sp)
   8f148:	dc400117 	ldw	r17,4(sp)
   8f14c:	dc000017 	ldw	r16,0(sp)
   8f150:	dec00304 	addi	sp,sp,12
   8f154:	f800283a 	ret

0008f158 <_read_r>:
   8f158:	defffd04 	addi	sp,sp,-12
   8f15c:	dc000015 	stw	r16,0(sp)
   8f160:	040002b4 	movhi	r16,10
   8f164:	840e3b04 	addi	r16,r16,14572
   8f168:	dc400115 	stw	r17,4(sp)
   8f16c:	80000015 	stw	zero,0(r16)
   8f170:	2023883a 	mov	r17,r4
   8f174:	2809883a 	mov	r4,r5
   8f178:	300b883a 	mov	r5,r6
   8f17c:	380d883a 	mov	r6,r7
   8f180:	dfc00215 	stw	ra,8(sp)
   8f184:	0091f300 	call	91f30 <read>
   8f188:	1007883a 	mov	r3,r2
   8f18c:	00bfffc4 	movi	r2,-1
   8f190:	18800626 	beq	r3,r2,8f1ac <_read_r+0x54>
   8f194:	1805883a 	mov	r2,r3
   8f198:	dfc00217 	ldw	ra,8(sp)
   8f19c:	dc400117 	ldw	r17,4(sp)
   8f1a0:	dc000017 	ldw	r16,0(sp)
   8f1a4:	dec00304 	addi	sp,sp,12
   8f1a8:	f800283a 	ret
   8f1ac:	80800017 	ldw	r2,0(r16)
   8f1b0:	103ff826 	beq	r2,zero,8f194 <_read_r+0x3c>
   8f1b4:	88800015 	stw	r2,0(r17)
   8f1b8:	1805883a 	mov	r2,r3
   8f1bc:	dfc00217 	ldw	ra,8(sp)
   8f1c0:	dc400117 	ldw	r17,4(sp)
   8f1c4:	dc000017 	ldw	r16,0(sp)
   8f1c8:	dec00304 	addi	sp,sp,12
   8f1cc:	f800283a 	ret

0008f1d0 <__udivdi3>:
   8f1d0:	defff104 	addi	sp,sp,-60
   8f1d4:	0015883a 	mov	r10,zero
   8f1d8:	2005883a 	mov	r2,r4
   8f1dc:	3011883a 	mov	r8,r6
   8f1e0:	df000d15 	stw	fp,52(sp)
   8f1e4:	dd400a15 	stw	r21,40(sp)
   8f1e8:	dcc00815 	stw	r19,32(sp)
   8f1ec:	dfc00e15 	stw	ra,56(sp)
   8f1f0:	ddc00c15 	stw	r23,48(sp)
   8f1f4:	dd800b15 	stw	r22,44(sp)
   8f1f8:	dd000915 	stw	r20,36(sp)
   8f1fc:	dc800715 	stw	r18,28(sp)
   8f200:	dc400615 	stw	r17,24(sp)
   8f204:	dc000515 	stw	r16,20(sp)
   8f208:	da800315 	stw	r10,12(sp)
   8f20c:	4027883a 	mov	r19,r8
   8f210:	1039883a 	mov	fp,r2
   8f214:	282b883a 	mov	r21,r5
   8f218:	da800415 	stw	r10,16(sp)
   8f21c:	3800401e 	bne	r7,zero,8f320 <__udivdi3+0x150>
   8f220:	2a006536 	bltu	r5,r8,8f3b8 <__udivdi3+0x1e8>
   8f224:	4000b526 	beq	r8,zero,8f4fc <__udivdi3+0x32c>
   8f228:	00bfffd4 	movui	r2,65535
   8f22c:	14c0ad36 	bltu	r2,r19,8f4e4 <__udivdi3+0x314>
   8f230:	00803fc4 	movi	r2,255
   8f234:	14c15e36 	bltu	r2,r19,8f7b0 <__udivdi3+0x5e0>
   8f238:	000b883a 	mov	r5,zero
   8f23c:	0005883a 	mov	r2,zero
   8f240:	9884d83a 	srl	r2,r19,r2
   8f244:	010002b4 	movhi	r4,10
   8f248:	213fdd04 	addi	r4,r4,-140
   8f24c:	01800804 	movi	r6,32
   8f250:	1105883a 	add	r2,r2,r4
   8f254:	10c00003 	ldbu	r3,0(r2)
   8f258:	28c7883a 	add	r3,r5,r3
   8f25c:	30e9c83a 	sub	r20,r6,r3
   8f260:	a0010a1e 	bne	r20,zero,8f68c <__udivdi3+0x4bc>
   8f264:	982ed43a 	srli	r23,r19,16
   8f268:	acebc83a 	sub	r21,r21,r19
   8f26c:	9dbfffcc 	andi	r22,r19,65535
   8f270:	05000044 	movi	r20,1
   8f274:	a809883a 	mov	r4,r21
   8f278:	b80b883a 	mov	r5,r23
   8f27c:	00877d40 	call	877d4 <__udivsi3>
   8f280:	100b883a 	mov	r5,r2
   8f284:	b009883a 	mov	r4,r22
   8f288:	1021883a 	mov	r16,r2
   8f28c:	00877e40 	call	877e4 <__mulsi3>
   8f290:	a809883a 	mov	r4,r21
   8f294:	b80b883a 	mov	r5,r23
   8f298:	1023883a 	mov	r17,r2
   8f29c:	00877dc0 	call	877dc <__umodsi3>
   8f2a0:	1004943a 	slli	r2,r2,16
   8f2a4:	e006d43a 	srli	r3,fp,16
   8f2a8:	10c4b03a 	or	r2,r2,r3
   8f2ac:	1440042e 	bgeu	r2,r17,8f2c0 <__udivdi3+0xf0>
   8f2b0:	14c5883a 	add	r2,r2,r19
   8f2b4:	843fffc4 	addi	r16,r16,-1
   8f2b8:	14c00136 	bltu	r2,r19,8f2c0 <__udivdi3+0xf0>
   8f2bc:	14415c36 	bltu	r2,r17,8f830 <__udivdi3+0x660>
   8f2c0:	1463c83a 	sub	r17,r2,r17
   8f2c4:	8809883a 	mov	r4,r17
   8f2c8:	b80b883a 	mov	r5,r23
   8f2cc:	00877d40 	call	877d4 <__udivsi3>
   8f2d0:	100b883a 	mov	r5,r2
   8f2d4:	b009883a 	mov	r4,r22
   8f2d8:	102b883a 	mov	r21,r2
   8f2dc:	00877e40 	call	877e4 <__mulsi3>
   8f2e0:	8809883a 	mov	r4,r17
   8f2e4:	b80b883a 	mov	r5,r23
   8f2e8:	1025883a 	mov	r18,r2
   8f2ec:	00877dc0 	call	877dc <__umodsi3>
   8f2f0:	1004943a 	slli	r2,r2,16
   8f2f4:	e0ffffcc 	andi	r3,fp,65535
   8f2f8:	10c4b03a 	or	r2,r2,r3
   8f2fc:	1480042e 	bgeu	r2,r18,8f310 <__udivdi3+0x140>
   8f300:	9885883a 	add	r2,r19,r2
   8f304:	ad7fffc4 	addi	r21,r21,-1
   8f308:	14c00136 	bltu	r2,r19,8f310 <__udivdi3+0x140>
   8f30c:	14813c36 	bltu	r2,r18,8f800 <__udivdi3+0x630>
   8f310:	8004943a 	slli	r2,r16,16
   8f314:	a009883a 	mov	r4,r20
   8f318:	a884b03a 	or	r2,r21,r2
   8f31c:	00001506 	br	8f374 <__udivdi3+0x1a4>
   8f320:	380d883a 	mov	r6,r7
   8f324:	29c06c36 	bltu	r5,r7,8f4d8 <__udivdi3+0x308>
   8f328:	00bfffd4 	movui	r2,65535
   8f32c:	11c06436 	bltu	r2,r7,8f4c0 <__udivdi3+0x2f0>
   8f330:	00803fc4 	movi	r2,255
   8f334:	11c11836 	bltu	r2,r7,8f798 <__udivdi3+0x5c8>
   8f338:	000b883a 	mov	r5,zero
   8f33c:	0005883a 	mov	r2,zero
   8f340:	3084d83a 	srl	r2,r6,r2
   8f344:	010002b4 	movhi	r4,10
   8f348:	213fdd04 	addi	r4,r4,-140
   8f34c:	01c00804 	movi	r7,32
   8f350:	1105883a 	add	r2,r2,r4
   8f354:	10c00003 	ldbu	r3,0(r2)
   8f358:	28c7883a 	add	r3,r5,r3
   8f35c:	38edc83a 	sub	r22,r7,r3
   8f360:	b000731e 	bne	r22,zero,8f530 <__udivdi3+0x360>
   8f364:	35400136 	bltu	r6,r21,8f36c <__udivdi3+0x19c>
   8f368:	e4c05b36 	bltu	fp,r19,8f4d8 <__udivdi3+0x308>
   8f36c:	00800044 	movi	r2,1
   8f370:	0009883a 	mov	r4,zero
   8f374:	d8800315 	stw	r2,12(sp)
   8f378:	d9400317 	ldw	r5,12(sp)
   8f37c:	d9000415 	stw	r4,16(sp)
   8f380:	2007883a 	mov	r3,r4
   8f384:	2805883a 	mov	r2,r5
   8f388:	dfc00e17 	ldw	ra,56(sp)
   8f38c:	df000d17 	ldw	fp,52(sp)
   8f390:	ddc00c17 	ldw	r23,48(sp)
   8f394:	dd800b17 	ldw	r22,44(sp)
   8f398:	dd400a17 	ldw	r21,40(sp)
   8f39c:	dd000917 	ldw	r20,36(sp)
   8f3a0:	dcc00817 	ldw	r19,32(sp)
   8f3a4:	dc800717 	ldw	r18,28(sp)
   8f3a8:	dc400617 	ldw	r17,24(sp)
   8f3ac:	dc000517 	ldw	r16,20(sp)
   8f3b0:	dec00f04 	addi	sp,sp,60
   8f3b4:	f800283a 	ret
   8f3b8:	00bfffd4 	movui	r2,65535
   8f3bc:	12005636 	bltu	r2,r8,8f518 <__udivdi3+0x348>
   8f3c0:	00803fc4 	movi	r2,255
   8f3c4:	12010036 	bltu	r2,r8,8f7c8 <__udivdi3+0x5f8>
   8f3c8:	000b883a 	mov	r5,zero
   8f3cc:	0005883a 	mov	r2,zero
   8f3d0:	9884d83a 	srl	r2,r19,r2
   8f3d4:	010002b4 	movhi	r4,10
   8f3d8:	213fdd04 	addi	r4,r4,-140
   8f3dc:	01800804 	movi	r6,32
   8f3e0:	1105883a 	add	r2,r2,r4
   8f3e4:	10c00003 	ldbu	r3,0(r2)
   8f3e8:	28c7883a 	add	r3,r5,r3
   8f3ec:	30cbc83a 	sub	r5,r6,r3
   8f3f0:	28000626 	beq	r5,zero,8f40c <__udivdi3+0x23c>
   8f3f4:	3145c83a 	sub	r2,r6,r5
   8f3f8:	e084d83a 	srl	r2,fp,r2
   8f3fc:	a946983a 	sll	r3,r21,r5
   8f400:	e178983a 	sll	fp,fp,r5
   8f404:	9966983a 	sll	r19,r19,r5
   8f408:	18aab03a 	or	r21,r3,r2
   8f40c:	982ed43a 	srli	r23,r19,16
   8f410:	a809883a 	mov	r4,r21
   8f414:	9cbfffcc 	andi	r18,r19,65535
   8f418:	b80b883a 	mov	r5,r23
   8f41c:	00877d40 	call	877d4 <__udivsi3>
   8f420:	100b883a 	mov	r5,r2
   8f424:	9009883a 	mov	r4,r18
   8f428:	1021883a 	mov	r16,r2
   8f42c:	00877e40 	call	877e4 <__mulsi3>
   8f430:	a809883a 	mov	r4,r21
   8f434:	b80b883a 	mov	r5,r23
   8f438:	1023883a 	mov	r17,r2
   8f43c:	00877dc0 	call	877dc <__umodsi3>
   8f440:	1004943a 	slli	r2,r2,16
   8f444:	e006d43a 	srli	r3,fp,16
   8f448:	10c4b03a 	or	r2,r2,r3
   8f44c:	1440042e 	bgeu	r2,r17,8f460 <__udivdi3+0x290>
   8f450:	14c5883a 	add	r2,r2,r19
   8f454:	843fffc4 	addi	r16,r16,-1
   8f458:	14c00136 	bltu	r2,r19,8f460 <__udivdi3+0x290>
   8f45c:	1440ea36 	bltu	r2,r17,8f808 <__udivdi3+0x638>
   8f460:	1463c83a 	sub	r17,r2,r17
   8f464:	8809883a 	mov	r4,r17
   8f468:	b80b883a 	mov	r5,r23
   8f46c:	00877d40 	call	877d4 <__udivsi3>
   8f470:	100b883a 	mov	r5,r2
   8f474:	9009883a 	mov	r4,r18
   8f478:	102b883a 	mov	r21,r2
   8f47c:	00877e40 	call	877e4 <__mulsi3>
   8f480:	8809883a 	mov	r4,r17
   8f484:	b80b883a 	mov	r5,r23
   8f488:	1025883a 	mov	r18,r2
   8f48c:	00877dc0 	call	877dc <__umodsi3>
   8f490:	1004943a 	slli	r2,r2,16
   8f494:	e0ffffcc 	andi	r3,fp,65535
   8f498:	10c4b03a 	or	r2,r2,r3
   8f49c:	1480042e 	bgeu	r2,r18,8f4b0 <__udivdi3+0x2e0>
   8f4a0:	9885883a 	add	r2,r19,r2
   8f4a4:	ad7fffc4 	addi	r21,r21,-1
   8f4a8:	14c00136 	bltu	r2,r19,8f4b0 <__udivdi3+0x2e0>
   8f4ac:	1480d936 	bltu	r2,r18,8f814 <__udivdi3+0x644>
   8f4b0:	8004943a 	slli	r2,r16,16
   8f4b4:	0009883a 	mov	r4,zero
   8f4b8:	a884b03a 	or	r2,r21,r2
   8f4bc:	003fad06 	br	8f374 <__udivdi3+0x1a4>
   8f4c0:	00804034 	movhi	r2,256
   8f4c4:	10bfffc4 	addi	r2,r2,-1
   8f4c8:	11c0b636 	bltu	r2,r7,8f7a4 <__udivdi3+0x5d4>
   8f4cc:	01400404 	movi	r5,16
   8f4d0:	2805883a 	mov	r2,r5
   8f4d4:	003f9a06 	br	8f340 <__udivdi3+0x170>
   8f4d8:	0005883a 	mov	r2,zero
   8f4dc:	0009883a 	mov	r4,zero
   8f4e0:	003fa406 	br	8f374 <__udivdi3+0x1a4>
   8f4e4:	00804034 	movhi	r2,256
   8f4e8:	10bfffc4 	addi	r2,r2,-1
   8f4ec:	14c0b336 	bltu	r2,r19,8f7bc <__udivdi3+0x5ec>
   8f4f0:	01400404 	movi	r5,16
   8f4f4:	2805883a 	mov	r2,r5
   8f4f8:	003f5106 	br	8f240 <__udivdi3+0x70>
   8f4fc:	01000044 	movi	r4,1
   8f500:	000b883a 	mov	r5,zero
   8f504:	00877d40 	call	877d4 <__udivsi3>
   8f508:	1027883a 	mov	r19,r2
   8f50c:	00bfffd4 	movui	r2,65535
   8f510:	14fff436 	bltu	r2,r19,8f4e4 <__udivdi3+0x314>
   8f514:	003f4606 	br	8f230 <__udivdi3+0x60>
   8f518:	00804034 	movhi	r2,256
   8f51c:	10bfffc4 	addi	r2,r2,-1
   8f520:	1200ac36 	bltu	r2,r8,8f7d4 <__udivdi3+0x604>
   8f524:	01400404 	movi	r5,16
   8f528:	2805883a 	mov	r2,r5
   8f52c:	003fa806 	br	8f3d0 <__udivdi3+0x200>
   8f530:	3d85c83a 	sub	r2,r7,r22
   8f534:	3588983a 	sll	r4,r6,r22
   8f538:	9886d83a 	srl	r3,r19,r2
   8f53c:	a8a2d83a 	srl	r17,r21,r2
   8f540:	e084d83a 	srl	r2,fp,r2
   8f544:	20eeb03a 	or	r23,r4,r3
   8f548:	b824d43a 	srli	r18,r23,16
   8f54c:	ad86983a 	sll	r3,r21,r22
   8f550:	8809883a 	mov	r4,r17
   8f554:	900b883a 	mov	r5,r18
   8f558:	1886b03a 	or	r3,r3,r2
   8f55c:	d8c00115 	stw	r3,4(sp)
   8f560:	bc3fffcc 	andi	r16,r23,65535
   8f564:	00877d40 	call	877d4 <__udivsi3>
   8f568:	100b883a 	mov	r5,r2
   8f56c:	8009883a 	mov	r4,r16
   8f570:	1029883a 	mov	r20,r2
   8f574:	00877e40 	call	877e4 <__mulsi3>
   8f578:	900b883a 	mov	r5,r18
   8f57c:	8809883a 	mov	r4,r17
   8f580:	102b883a 	mov	r21,r2
   8f584:	00877dc0 	call	877dc <__umodsi3>
   8f588:	d9400117 	ldw	r5,4(sp)
   8f58c:	1004943a 	slli	r2,r2,16
   8f590:	9da6983a 	sll	r19,r19,r22
   8f594:	2806d43a 	srli	r3,r5,16
   8f598:	10c4b03a 	or	r2,r2,r3
   8f59c:	1540032e 	bgeu	r2,r21,8f5ac <__udivdi3+0x3dc>
   8f5a0:	15c5883a 	add	r2,r2,r23
   8f5a4:	a53fffc4 	addi	r20,r20,-1
   8f5a8:	15c0912e 	bgeu	r2,r23,8f7f0 <__udivdi3+0x620>
   8f5ac:	1563c83a 	sub	r17,r2,r21
   8f5b0:	8809883a 	mov	r4,r17
   8f5b4:	900b883a 	mov	r5,r18
   8f5b8:	00877d40 	call	877d4 <__udivsi3>
   8f5bc:	100b883a 	mov	r5,r2
   8f5c0:	8009883a 	mov	r4,r16
   8f5c4:	102b883a 	mov	r21,r2
   8f5c8:	00877e40 	call	877e4 <__mulsi3>
   8f5cc:	8809883a 	mov	r4,r17
   8f5d0:	900b883a 	mov	r5,r18
   8f5d4:	1021883a 	mov	r16,r2
   8f5d8:	00877dc0 	call	877dc <__umodsi3>
   8f5dc:	da800117 	ldw	r10,4(sp)
   8f5e0:	1004943a 	slli	r2,r2,16
   8f5e4:	50ffffcc 	andi	r3,r10,65535
   8f5e8:	10c6b03a 	or	r3,r2,r3
   8f5ec:	1c00032e 	bgeu	r3,r16,8f5fc <__udivdi3+0x42c>
   8f5f0:	1dc7883a 	add	r3,r3,r23
   8f5f4:	ad7fffc4 	addi	r21,r21,-1
   8f5f8:	1dc0792e 	bgeu	r3,r23,8f7e0 <__udivdi3+0x610>
   8f5fc:	a004943a 	slli	r2,r20,16
   8f600:	982ed43a 	srli	r23,r19,16
   8f604:	9cffffcc 	andi	r19,r19,65535
   8f608:	a8a4b03a 	or	r18,r21,r2
   8f60c:	947fffcc 	andi	r17,r18,65535
   8f610:	902ad43a 	srli	r21,r18,16
   8f614:	8809883a 	mov	r4,r17
   8f618:	980b883a 	mov	r5,r19
   8f61c:	1c21c83a 	sub	r16,r3,r16
   8f620:	00877e40 	call	877e4 <__mulsi3>
   8f624:	8809883a 	mov	r4,r17
   8f628:	b80b883a 	mov	r5,r23
   8f62c:	1029883a 	mov	r20,r2
   8f630:	00877e40 	call	877e4 <__mulsi3>
   8f634:	980b883a 	mov	r5,r19
   8f638:	a809883a 	mov	r4,r21
   8f63c:	1023883a 	mov	r17,r2
   8f640:	00877e40 	call	877e4 <__mulsi3>
   8f644:	a809883a 	mov	r4,r21
   8f648:	b80b883a 	mov	r5,r23
   8f64c:	1027883a 	mov	r19,r2
   8f650:	00877e40 	call	877e4 <__mulsi3>
   8f654:	1009883a 	mov	r4,r2
   8f658:	a004d43a 	srli	r2,r20,16
   8f65c:	8ce3883a 	add	r17,r17,r19
   8f660:	1447883a 	add	r3,r2,r17
   8f664:	1cc0022e 	bgeu	r3,r19,8f670 <__udivdi3+0x4a0>
   8f668:	00800074 	movhi	r2,1
   8f66c:	2089883a 	add	r4,r4,r2
   8f670:	1804d43a 	srli	r2,r3,16
   8f674:	2085883a 	add	r2,r4,r2
   8f678:	80804436 	bltu	r16,r2,8f78c <__udivdi3+0x5bc>
   8f67c:	80803e26 	beq	r16,r2,8f778 <__udivdi3+0x5a8>
   8f680:	9005883a 	mov	r2,r18
   8f684:	0009883a 	mov	r4,zero
   8f688:	003f3a06 	br	8f374 <__udivdi3+0x1a4>
   8f68c:	9d26983a 	sll	r19,r19,r20
   8f690:	3505c83a 	sub	r2,r6,r20
   8f694:	a8a2d83a 	srl	r17,r21,r2
   8f698:	982ed43a 	srli	r23,r19,16
   8f69c:	e084d83a 	srl	r2,fp,r2
   8f6a0:	ad06983a 	sll	r3,r21,r20
   8f6a4:	8809883a 	mov	r4,r17
   8f6a8:	b80b883a 	mov	r5,r23
   8f6ac:	1886b03a 	or	r3,r3,r2
   8f6b0:	d8c00015 	stw	r3,0(sp)
   8f6b4:	9dbfffcc 	andi	r22,r19,65535
   8f6b8:	00877d40 	call	877d4 <__udivsi3>
   8f6bc:	100b883a 	mov	r5,r2
   8f6c0:	b009883a 	mov	r4,r22
   8f6c4:	d8800215 	stw	r2,8(sp)
   8f6c8:	00877e40 	call	877e4 <__mulsi3>
   8f6cc:	8809883a 	mov	r4,r17
   8f6d0:	b80b883a 	mov	r5,r23
   8f6d4:	102b883a 	mov	r21,r2
   8f6d8:	00877dc0 	call	877dc <__umodsi3>
   8f6dc:	d9000017 	ldw	r4,0(sp)
   8f6e0:	1004943a 	slli	r2,r2,16
   8f6e4:	2006d43a 	srli	r3,r4,16
   8f6e8:	10c4b03a 	or	r2,r2,r3
   8f6ec:	1540052e 	bgeu	r2,r21,8f704 <__udivdi3+0x534>
   8f6f0:	d9400217 	ldw	r5,8(sp)
   8f6f4:	14c5883a 	add	r2,r2,r19
   8f6f8:	297fffc4 	addi	r5,r5,-1
   8f6fc:	d9400215 	stw	r5,8(sp)
   8f700:	14c0462e 	bgeu	r2,r19,8f81c <__udivdi3+0x64c>
   8f704:	1563c83a 	sub	r17,r2,r21
   8f708:	8809883a 	mov	r4,r17
   8f70c:	b80b883a 	mov	r5,r23
   8f710:	00877d40 	call	877d4 <__udivsi3>
   8f714:	100b883a 	mov	r5,r2
   8f718:	b009883a 	mov	r4,r22
   8f71c:	1025883a 	mov	r18,r2
   8f720:	00877e40 	call	877e4 <__mulsi3>
   8f724:	8809883a 	mov	r4,r17
   8f728:	b80b883a 	mov	r5,r23
   8f72c:	1021883a 	mov	r16,r2
   8f730:	00877dc0 	call	877dc <__umodsi3>
   8f734:	da800017 	ldw	r10,0(sp)
   8f738:	1004943a 	slli	r2,r2,16
   8f73c:	50ffffcc 	andi	r3,r10,65535
   8f740:	10c6b03a 	or	r3,r2,r3
   8f744:	1c00062e 	bgeu	r3,r16,8f760 <__udivdi3+0x590>
   8f748:	1cc7883a 	add	r3,r3,r19
   8f74c:	94bfffc4 	addi	r18,r18,-1
   8f750:	1cc00336 	bltu	r3,r19,8f760 <__udivdi3+0x590>
   8f754:	1c00022e 	bgeu	r3,r16,8f760 <__udivdi3+0x590>
   8f758:	94bfffc4 	addi	r18,r18,-1
   8f75c:	1cc7883a 	add	r3,r3,r19
   8f760:	d9000217 	ldw	r4,8(sp)
   8f764:	e538983a 	sll	fp,fp,r20
   8f768:	1c2bc83a 	sub	r21,r3,r16
   8f76c:	2004943a 	slli	r2,r4,16
   8f770:	90a8b03a 	or	r20,r18,r2
   8f774:	003ebf06 	br	8f274 <__udivdi3+0xa4>
   8f778:	1804943a 	slli	r2,r3,16
   8f77c:	e588983a 	sll	r4,fp,r22
   8f780:	a0ffffcc 	andi	r3,r20,65535
   8f784:	10c5883a 	add	r2,r2,r3
   8f788:	20bfbd2e 	bgeu	r4,r2,8f680 <__udivdi3+0x4b0>
   8f78c:	90bfffc4 	addi	r2,r18,-1
   8f790:	0009883a 	mov	r4,zero
   8f794:	003ef706 	br	8f374 <__udivdi3+0x1a4>
   8f798:	01400204 	movi	r5,8
   8f79c:	2805883a 	mov	r2,r5
   8f7a0:	003ee706 	br	8f340 <__udivdi3+0x170>
   8f7a4:	01400604 	movi	r5,24
   8f7a8:	2805883a 	mov	r2,r5
   8f7ac:	003ee406 	br	8f340 <__udivdi3+0x170>
   8f7b0:	01400204 	movi	r5,8
   8f7b4:	2805883a 	mov	r2,r5
   8f7b8:	003ea106 	br	8f240 <__udivdi3+0x70>
   8f7bc:	01400604 	movi	r5,24
   8f7c0:	2805883a 	mov	r2,r5
   8f7c4:	003e9e06 	br	8f240 <__udivdi3+0x70>
   8f7c8:	01400204 	movi	r5,8
   8f7cc:	2805883a 	mov	r2,r5
   8f7d0:	003eff06 	br	8f3d0 <__udivdi3+0x200>
   8f7d4:	01400604 	movi	r5,24
   8f7d8:	2805883a 	mov	r2,r5
   8f7dc:	003efc06 	br	8f3d0 <__udivdi3+0x200>
   8f7e0:	1c3f862e 	bgeu	r3,r16,8f5fc <__udivdi3+0x42c>
   8f7e4:	1dc7883a 	add	r3,r3,r23
   8f7e8:	ad7fffc4 	addi	r21,r21,-1
   8f7ec:	003f8306 	br	8f5fc <__udivdi3+0x42c>
   8f7f0:	157f6e2e 	bgeu	r2,r21,8f5ac <__udivdi3+0x3dc>
   8f7f4:	a53fffc4 	addi	r20,r20,-1
   8f7f8:	15c5883a 	add	r2,r2,r23
   8f7fc:	003f6b06 	br	8f5ac <__udivdi3+0x3dc>
   8f800:	ad7fffc4 	addi	r21,r21,-1
   8f804:	003ec206 	br	8f310 <__udivdi3+0x140>
   8f808:	843fffc4 	addi	r16,r16,-1
   8f80c:	14c5883a 	add	r2,r2,r19
   8f810:	003f1306 	br	8f460 <__udivdi3+0x290>
   8f814:	ad7fffc4 	addi	r21,r21,-1
   8f818:	003f2506 	br	8f4b0 <__udivdi3+0x2e0>
   8f81c:	157fb92e 	bgeu	r2,r21,8f704 <__udivdi3+0x534>
   8f820:	297fffc4 	addi	r5,r5,-1
   8f824:	14c5883a 	add	r2,r2,r19
   8f828:	d9400215 	stw	r5,8(sp)
   8f82c:	003fb506 	br	8f704 <__udivdi3+0x534>
   8f830:	843fffc4 	addi	r16,r16,-1
   8f834:	14c5883a 	add	r2,r2,r19
   8f838:	003ea106 	br	8f2c0 <__udivdi3+0xf0>

0008f83c <__umoddi3>:
   8f83c:	defff004 	addi	sp,sp,-64
   8f840:	3011883a 	mov	r8,r6
   8f844:	000d883a 	mov	r6,zero
   8f848:	dd400b15 	stw	r21,44(sp)
   8f84c:	dcc00915 	stw	r19,36(sp)
   8f850:	dc000615 	stw	r16,24(sp)
   8f854:	dfc00f15 	stw	ra,60(sp)
   8f858:	df000e15 	stw	fp,56(sp)
   8f85c:	ddc00d15 	stw	r23,52(sp)
   8f860:	dd800c15 	stw	r22,48(sp)
   8f864:	dd000a15 	stw	r20,40(sp)
   8f868:	dc800815 	stw	r18,32(sp)
   8f86c:	dc400715 	stw	r17,28(sp)
   8f870:	2817883a 	mov	r11,r5
   8f874:	d9800415 	stw	r6,16(sp)
   8f878:	4027883a 	mov	r19,r8
   8f87c:	d9800515 	stw	r6,20(sp)
   8f880:	2021883a 	mov	r16,r4
   8f884:	282b883a 	mov	r21,r5
   8f888:	38002c1e 	bne	r7,zero,8f93c <__umoddi3+0x100>
   8f88c:	2a005636 	bltu	r5,r8,8f9e8 <__umoddi3+0x1ac>
   8f890:	40009a26 	beq	r8,zero,8fafc <__umoddi3+0x2c0>
   8f894:	00bfffd4 	movui	r2,65535
   8f898:	14c09236 	bltu	r2,r19,8fae4 <__umoddi3+0x2a8>
   8f89c:	00803fc4 	movi	r2,255
   8f8a0:	14c15c36 	bltu	r2,r19,8fe14 <__umoddi3+0x5d8>
   8f8a4:	000b883a 	mov	r5,zero
   8f8a8:	0005883a 	mov	r2,zero
   8f8ac:	9884d83a 	srl	r2,r19,r2
   8f8b0:	010002b4 	movhi	r4,10
   8f8b4:	213fdd04 	addi	r4,r4,-140
   8f8b8:	01800804 	movi	r6,32
   8f8bc:	1105883a 	add	r2,r2,r4
   8f8c0:	10c00003 	ldbu	r3,0(r2)
   8f8c4:	28c7883a 	add	r3,r5,r3
   8f8c8:	30e5c83a 	sub	r18,r6,r3
   8f8cc:	9000a41e 	bne	r18,zero,8fb60 <__umoddi3+0x324>
   8f8d0:	982ed43a 	srli	r23,r19,16
   8f8d4:	acebc83a 	sub	r21,r21,r19
   8f8d8:	9d3fffcc 	andi	r20,r19,65535
   8f8dc:	002d883a 	mov	r22,zero
   8f8e0:	a809883a 	mov	r4,r21
   8f8e4:	b80b883a 	mov	r5,r23
   8f8e8:	00877d40 	call	877d4 <__udivsi3>
   8f8ec:	100b883a 	mov	r5,r2
   8f8f0:	a009883a 	mov	r4,r20
   8f8f4:	00877e40 	call	877e4 <__mulsi3>
   8f8f8:	a809883a 	mov	r4,r21
   8f8fc:	b80b883a 	mov	r5,r23
   8f900:	1023883a 	mov	r17,r2
   8f904:	00877dc0 	call	877dc <__umodsi3>
   8f908:	1004943a 	slli	r2,r2,16
   8f90c:	8006d43a 	srli	r3,r16,16
   8f910:	10c4b03a 	or	r2,r2,r3
   8f914:	1440032e 	bgeu	r2,r17,8f924 <__umoddi3+0xe8>
   8f918:	14c5883a 	add	r2,r2,r19
   8f91c:	14c00136 	bltu	r2,r19,8f924 <__umoddi3+0xe8>
   8f920:	14415836 	bltu	r2,r17,8fe84 <__umoddi3+0x648>
   8f924:	1463c83a 	sub	r17,r2,r17
   8f928:	8809883a 	mov	r4,r17
   8f92c:	b80b883a 	mov	r5,r23
   8f930:	00877d40 	call	877d4 <__udivsi3>
   8f934:	a009883a 	mov	r4,r20
   8f938:	00005306 	br	8fa88 <__umoddi3+0x24c>
   8f93c:	380d883a 	mov	r6,r7
   8f940:	29c0132e 	bgeu	r5,r7,8f990 <__umoddi3+0x154>
   8f944:	d9000415 	stw	r4,16(sp)
   8f948:	d9400515 	stw	r5,20(sp)
   8f94c:	d9400417 	ldw	r5,16(sp)
   8f950:	5813883a 	mov	r9,r11
   8f954:	2811883a 	mov	r8,r5
   8f958:	4005883a 	mov	r2,r8
   8f95c:	4807883a 	mov	r3,r9
   8f960:	dfc00f17 	ldw	ra,60(sp)
   8f964:	df000e17 	ldw	fp,56(sp)
   8f968:	ddc00d17 	ldw	r23,52(sp)
   8f96c:	dd800c17 	ldw	r22,48(sp)
   8f970:	dd400b17 	ldw	r21,44(sp)
   8f974:	dd000a17 	ldw	r20,40(sp)
   8f978:	dcc00917 	ldw	r19,36(sp)
   8f97c:	dc800817 	ldw	r18,32(sp)
   8f980:	dc400717 	ldw	r17,28(sp)
   8f984:	dc000617 	ldw	r16,24(sp)
   8f988:	dec01004 	addi	sp,sp,64
   8f98c:	f800283a 	ret
   8f990:	00bfffd4 	movui	r2,65535
   8f994:	11c06636 	bltu	r2,r7,8fb30 <__umoddi3+0x2f4>
   8f998:	00803fc4 	movi	r2,255
   8f99c:	11c12036 	bltu	r2,r7,8fe20 <__umoddi3+0x5e4>
   8f9a0:	000b883a 	mov	r5,zero
   8f9a4:	0005883a 	mov	r2,zero
   8f9a8:	3084d83a 	srl	r2,r6,r2
   8f9ac:	010002b4 	movhi	r4,10
   8f9b0:	213fdd04 	addi	r4,r4,-140
   8f9b4:	01c00804 	movi	r7,32
   8f9b8:	1105883a 	add	r2,r2,r4
   8f9bc:	10c00003 	ldbu	r3,0(r2)
   8f9c0:	28c7883a 	add	r3,r5,r3
   8f9c4:	38e5c83a 	sub	r18,r7,r3
   8f9c8:	9000941e 	bne	r18,zero,8fc1c <__umoddi3+0x3e0>
   8f9cc:	35405e36 	bltu	r6,r21,8fb48 <__umoddi3+0x30c>
   8f9d0:	84c05d2e 	bgeu	r16,r19,8fb48 <__umoddi3+0x30c>
   8f9d4:	8011883a 	mov	r8,r16
   8f9d8:	a813883a 	mov	r9,r21
   8f9dc:	dc000415 	stw	r16,16(sp)
   8f9e0:	dd400515 	stw	r21,20(sp)
   8f9e4:	003fdc06 	br	8f958 <__umoddi3+0x11c>
   8f9e8:	00bfffd4 	movui	r2,65535
   8f9ec:	12004a36 	bltu	r2,r8,8fb18 <__umoddi3+0x2dc>
   8f9f0:	00803fc4 	movi	r2,255
   8f9f4:	12010d36 	bltu	r2,r8,8fe2c <__umoddi3+0x5f0>
   8f9f8:	000b883a 	mov	r5,zero
   8f9fc:	0005883a 	mov	r2,zero
   8fa00:	9884d83a 	srl	r2,r19,r2
   8fa04:	010002b4 	movhi	r4,10
   8fa08:	213fdd04 	addi	r4,r4,-140
   8fa0c:	01800804 	movi	r6,32
   8fa10:	1105883a 	add	r2,r2,r4
   8fa14:	10c00003 	ldbu	r3,0(r2)
   8fa18:	28c7883a 	add	r3,r5,r3
   8fa1c:	30c7c83a 	sub	r3,r6,r3
   8fa20:	1800dc1e 	bne	r3,zero,8fd94 <__umoddi3+0x558>
   8fa24:	002d883a 	mov	r22,zero
   8fa28:	982ed43a 	srli	r23,r19,16
   8fa2c:	a809883a 	mov	r4,r21
   8fa30:	9cbfffcc 	andi	r18,r19,65535
   8fa34:	b80b883a 	mov	r5,r23
   8fa38:	00877d40 	call	877d4 <__udivsi3>
   8fa3c:	100b883a 	mov	r5,r2
   8fa40:	9009883a 	mov	r4,r18
   8fa44:	00877e40 	call	877e4 <__mulsi3>
   8fa48:	a809883a 	mov	r4,r21
   8fa4c:	b80b883a 	mov	r5,r23
   8fa50:	1023883a 	mov	r17,r2
   8fa54:	00877dc0 	call	877dc <__umodsi3>
   8fa58:	1004943a 	slli	r2,r2,16
   8fa5c:	8006d43a 	srli	r3,r16,16
   8fa60:	10c4b03a 	or	r2,r2,r3
   8fa64:	1440032e 	bgeu	r2,r17,8fa74 <__umoddi3+0x238>
   8fa68:	14c5883a 	add	r2,r2,r19
   8fa6c:	14c00136 	bltu	r2,r19,8fa74 <__umoddi3+0x238>
   8fa70:	14410236 	bltu	r2,r17,8fe7c <__umoddi3+0x640>
   8fa74:	1463c83a 	sub	r17,r2,r17
   8fa78:	8809883a 	mov	r4,r17
   8fa7c:	b80b883a 	mov	r5,r23
   8fa80:	00877d40 	call	877d4 <__udivsi3>
   8fa84:	9009883a 	mov	r4,r18
   8fa88:	100b883a 	mov	r5,r2
   8fa8c:	00877e40 	call	877e4 <__mulsi3>
   8fa90:	8809883a 	mov	r4,r17
   8fa94:	b80b883a 	mov	r5,r23
   8fa98:	102b883a 	mov	r21,r2
   8fa9c:	00877dc0 	call	877dc <__umodsi3>
   8faa0:	1004943a 	slli	r2,r2,16
   8faa4:	80ffffcc 	andi	r3,r16,65535
   8faa8:	10c4b03a 	or	r2,r2,r3
   8faac:	1540042e 	bgeu	r2,r21,8fac0 <__umoddi3+0x284>
   8fab0:	14c5883a 	add	r2,r2,r19
   8fab4:	14c00236 	bltu	r2,r19,8fac0 <__umoddi3+0x284>
   8fab8:	1540012e 	bgeu	r2,r21,8fac0 <__umoddi3+0x284>
   8fabc:	14c5883a 	add	r2,r2,r19
   8fac0:	1545c83a 	sub	r2,r2,r21
   8fac4:	1584d83a 	srl	r2,r2,r22
   8fac8:	0013883a 	mov	r9,zero
   8facc:	d8800415 	stw	r2,16(sp)
   8fad0:	d8c00417 	ldw	r3,16(sp)
   8fad4:	0005883a 	mov	r2,zero
   8fad8:	d8800515 	stw	r2,20(sp)
   8fadc:	1811883a 	mov	r8,r3
   8fae0:	003f9d06 	br	8f958 <__umoddi3+0x11c>
   8fae4:	00804034 	movhi	r2,256
   8fae8:	10bfffc4 	addi	r2,r2,-1
   8faec:	14c0c636 	bltu	r2,r19,8fe08 <__umoddi3+0x5cc>
   8faf0:	01400404 	movi	r5,16
   8faf4:	2805883a 	mov	r2,r5
   8faf8:	003f6c06 	br	8f8ac <__umoddi3+0x70>
   8fafc:	01000044 	movi	r4,1
   8fb00:	000b883a 	mov	r5,zero
   8fb04:	00877d40 	call	877d4 <__udivsi3>
   8fb08:	1027883a 	mov	r19,r2
   8fb0c:	00bfffd4 	movui	r2,65535
   8fb10:	14fff436 	bltu	r2,r19,8fae4 <__umoddi3+0x2a8>
   8fb14:	003f6106 	br	8f89c <__umoddi3+0x60>
   8fb18:	00804034 	movhi	r2,256
   8fb1c:	10bfffc4 	addi	r2,r2,-1
   8fb20:	1200c536 	bltu	r2,r8,8fe38 <__umoddi3+0x5fc>
   8fb24:	01400404 	movi	r5,16
   8fb28:	2805883a 	mov	r2,r5
   8fb2c:	003fb406 	br	8fa00 <__umoddi3+0x1c4>
   8fb30:	00804034 	movhi	r2,256
   8fb34:	10bfffc4 	addi	r2,r2,-1
   8fb38:	11c0c236 	bltu	r2,r7,8fe44 <__umoddi3+0x608>
   8fb3c:	01400404 	movi	r5,16
   8fb40:	2805883a 	mov	r2,r5
   8fb44:	003f9806 	br	8f9a8 <__umoddi3+0x16c>
   8fb48:	84c9c83a 	sub	r4,r16,r19
   8fb4c:	8105803a 	cmpltu	r2,r16,r4
   8fb50:	a987c83a 	sub	r3,r21,r6
   8fb54:	18abc83a 	sub	r21,r3,r2
   8fb58:	2021883a 	mov	r16,r4
   8fb5c:	003f9d06 	br	8f9d4 <__umoddi3+0x198>
   8fb60:	9ca6983a 	sll	r19,r19,r18
   8fb64:	3485c83a 	sub	r2,r6,r18
   8fb68:	a8a2d83a 	srl	r17,r21,r2
   8fb6c:	982ed43a 	srli	r23,r19,16
   8fb70:	ac86983a 	sll	r3,r21,r18
   8fb74:	8084d83a 	srl	r2,r16,r2
   8fb78:	8809883a 	mov	r4,r17
   8fb7c:	b80b883a 	mov	r5,r23
   8fb80:	18b8b03a 	or	fp,r3,r2
   8fb84:	9d3fffcc 	andi	r20,r19,65535
   8fb88:	00877d40 	call	877d4 <__udivsi3>
   8fb8c:	100b883a 	mov	r5,r2
   8fb90:	a009883a 	mov	r4,r20
   8fb94:	00877e40 	call	877e4 <__mulsi3>
   8fb98:	8809883a 	mov	r4,r17
   8fb9c:	b80b883a 	mov	r5,r23
   8fba0:	102b883a 	mov	r21,r2
   8fba4:	00877dc0 	call	877dc <__umodsi3>
   8fba8:	1004943a 	slli	r2,r2,16
   8fbac:	e006d43a 	srli	r3,fp,16
   8fbb0:	902d883a 	mov	r22,r18
   8fbb4:	10c4b03a 	or	r2,r2,r3
   8fbb8:	1540022e 	bgeu	r2,r21,8fbc4 <__umoddi3+0x388>
   8fbbc:	14c5883a 	add	r2,r2,r19
   8fbc0:	14c0ab2e 	bgeu	r2,r19,8fe70 <__umoddi3+0x634>
   8fbc4:	1563c83a 	sub	r17,r2,r21
   8fbc8:	8809883a 	mov	r4,r17
   8fbcc:	b80b883a 	mov	r5,r23
   8fbd0:	00877d40 	call	877d4 <__udivsi3>
   8fbd4:	100b883a 	mov	r5,r2
   8fbd8:	a009883a 	mov	r4,r20
   8fbdc:	00877e40 	call	877e4 <__mulsi3>
   8fbe0:	8809883a 	mov	r4,r17
   8fbe4:	b80b883a 	mov	r5,r23
   8fbe8:	102b883a 	mov	r21,r2
   8fbec:	00877dc0 	call	877dc <__umodsi3>
   8fbf0:	1004943a 	slli	r2,r2,16
   8fbf4:	e0ffffcc 	andi	r3,fp,65535
   8fbf8:	10c4b03a 	or	r2,r2,r3
   8fbfc:	1540042e 	bgeu	r2,r21,8fc10 <__umoddi3+0x3d4>
   8fc00:	14c5883a 	add	r2,r2,r19
   8fc04:	14c00236 	bltu	r2,r19,8fc10 <__umoddi3+0x3d4>
   8fc08:	1540012e 	bgeu	r2,r21,8fc10 <__umoddi3+0x3d4>
   8fc0c:	14c5883a 	add	r2,r2,r19
   8fc10:	84a0983a 	sll	r16,r16,r18
   8fc14:	156bc83a 	sub	r21,r2,r21
   8fc18:	003f3106 	br	8f8e0 <__umoddi3+0xa4>
   8fc1c:	3c8fc83a 	sub	r7,r7,r18
   8fc20:	3486983a 	sll	r3,r6,r18
   8fc24:	99c4d83a 	srl	r2,r19,r7
   8fc28:	a9e2d83a 	srl	r17,r21,r7
   8fc2c:	ac8c983a 	sll	r6,r21,r18
   8fc30:	18acb03a 	or	r22,r3,r2
   8fc34:	b02ed43a 	srli	r23,r22,16
   8fc38:	81c4d83a 	srl	r2,r16,r7
   8fc3c:	8809883a 	mov	r4,r17
   8fc40:	b80b883a 	mov	r5,r23
   8fc44:	308cb03a 	or	r6,r6,r2
   8fc48:	d9c00315 	stw	r7,12(sp)
   8fc4c:	d9800215 	stw	r6,8(sp)
   8fc50:	b53fffcc 	andi	r20,r22,65535
   8fc54:	00877d40 	call	877d4 <__udivsi3>
   8fc58:	100b883a 	mov	r5,r2
   8fc5c:	a009883a 	mov	r4,r20
   8fc60:	1039883a 	mov	fp,r2
   8fc64:	00877e40 	call	877e4 <__mulsi3>
   8fc68:	8809883a 	mov	r4,r17
   8fc6c:	b80b883a 	mov	r5,r23
   8fc70:	102b883a 	mov	r21,r2
   8fc74:	00877dc0 	call	877dc <__umodsi3>
   8fc78:	d9000217 	ldw	r4,8(sp)
   8fc7c:	1004943a 	slli	r2,r2,16
   8fc80:	9ca6983a 	sll	r19,r19,r18
   8fc84:	2006d43a 	srli	r3,r4,16
   8fc88:	84a0983a 	sll	r16,r16,r18
   8fc8c:	dcc00015 	stw	r19,0(sp)
   8fc90:	10c4b03a 	or	r2,r2,r3
   8fc94:	dc000115 	stw	r16,4(sp)
   8fc98:	1540032e 	bgeu	r2,r21,8fca8 <__umoddi3+0x46c>
   8fc9c:	1585883a 	add	r2,r2,r22
   8fca0:	e73fffc4 	addi	fp,fp,-1
   8fca4:	15806e2e 	bgeu	r2,r22,8fe60 <__umoddi3+0x624>
   8fca8:	1563c83a 	sub	r17,r2,r21
   8fcac:	8809883a 	mov	r4,r17
   8fcb0:	b80b883a 	mov	r5,r23
   8fcb4:	00877d40 	call	877d4 <__udivsi3>
   8fcb8:	100b883a 	mov	r5,r2
   8fcbc:	a009883a 	mov	r4,r20
   8fcc0:	1021883a 	mov	r16,r2
   8fcc4:	00877e40 	call	877e4 <__mulsi3>
   8fcc8:	b80b883a 	mov	r5,r23
   8fccc:	8809883a 	mov	r4,r17
   8fcd0:	1029883a 	mov	r20,r2
   8fcd4:	00877dc0 	call	877dc <__umodsi3>
   8fcd8:	d9400217 	ldw	r5,8(sp)
   8fcdc:	1004943a 	slli	r2,r2,16
   8fce0:	28ffffcc 	andi	r3,r5,65535
   8fce4:	10c4b03a 	or	r2,r2,r3
   8fce8:	1500032e 	bgeu	r2,r20,8fcf8 <__umoddi3+0x4bc>
   8fcec:	1585883a 	add	r2,r2,r22
   8fcf0:	843fffc4 	addi	r16,r16,-1
   8fcf4:	1580562e 	bgeu	r2,r22,8fe50 <__umoddi3+0x614>
   8fcf8:	d9800017 	ldw	r6,0(sp)
   8fcfc:	e022943a 	slli	r17,fp,16
   8fd00:	302ed43a 	srli	r23,r6,16
   8fd04:	8462b03a 	or	r17,r16,r17
   8fd08:	34ffffcc 	andi	r19,r6,65535
   8fd0c:	882ad43a 	srli	r21,r17,16
   8fd10:	8c7fffcc 	andi	r17,r17,65535
   8fd14:	8809883a 	mov	r4,r17
   8fd18:	980b883a 	mov	r5,r19
   8fd1c:	1521c83a 	sub	r16,r2,r20
   8fd20:	00877e40 	call	877e4 <__mulsi3>
   8fd24:	8809883a 	mov	r4,r17
   8fd28:	b80b883a 	mov	r5,r23
   8fd2c:	1029883a 	mov	r20,r2
   8fd30:	00877e40 	call	877e4 <__mulsi3>
   8fd34:	980b883a 	mov	r5,r19
   8fd38:	a809883a 	mov	r4,r21
   8fd3c:	1023883a 	mov	r17,r2
   8fd40:	00877e40 	call	877e4 <__mulsi3>
   8fd44:	a809883a 	mov	r4,r21
   8fd48:	b80b883a 	mov	r5,r23
   8fd4c:	1027883a 	mov	r19,r2
   8fd50:	00877e40 	call	877e4 <__mulsi3>
   8fd54:	100b883a 	mov	r5,r2
   8fd58:	a004d43a 	srli	r2,r20,16
   8fd5c:	8ce3883a 	add	r17,r17,r19
   8fd60:	1449883a 	add	r4,r2,r17
   8fd64:	24c0022e 	bgeu	r4,r19,8fd70 <__umoddi3+0x534>
   8fd68:	00800074 	movhi	r2,1
   8fd6c:	288b883a 	add	r5,r5,r2
   8fd70:	2004d43a 	srli	r2,r4,16
   8fd74:	2008943a 	slli	r4,r4,16
   8fd78:	a0ffffcc 	andi	r3,r20,65535
   8fd7c:	288d883a 	add	r6,r5,r2
   8fd80:	20c9883a 	add	r4,r4,r3
   8fd84:	81800b36 	bltu	r16,r6,8fdb4 <__umoddi3+0x578>
   8fd88:	81804026 	beq	r16,r6,8fe8c <__umoddi3+0x650>
   8fd8c:	818dc83a 	sub	r6,r16,r6
   8fd90:	00000f06 	br	8fdd0 <__umoddi3+0x594>
   8fd94:	30c5c83a 	sub	r2,r6,r3
   8fd98:	182d883a 	mov	r22,r3
   8fd9c:	8084d83a 	srl	r2,r16,r2
   8fda0:	a8c6983a 	sll	r3,r21,r3
   8fda4:	9da6983a 	sll	r19,r19,r22
   8fda8:	85a0983a 	sll	r16,r16,r22
   8fdac:	18aab03a 	or	r21,r3,r2
   8fdb0:	003f1d06 	br	8fa28 <__umoddi3+0x1ec>
   8fdb4:	d8c00017 	ldw	r3,0(sp)
   8fdb8:	20c5c83a 	sub	r2,r4,r3
   8fdbc:	2089803a 	cmpltu	r4,r4,r2
   8fdc0:	3587c83a 	sub	r3,r6,r22
   8fdc4:	1907c83a 	sub	r3,r3,r4
   8fdc8:	80cdc83a 	sub	r6,r16,r3
   8fdcc:	1009883a 	mov	r4,r2
   8fdd0:	d9400117 	ldw	r5,4(sp)
   8fdd4:	2905c83a 	sub	r2,r5,r4
   8fdd8:	2887803a 	cmpltu	r3,r5,r2
   8fddc:	30c7c83a 	sub	r3,r6,r3
   8fde0:	d9800317 	ldw	r6,12(sp)
   8fde4:	1484d83a 	srl	r2,r2,r18
   8fde8:	1988983a 	sll	r4,r3,r6
   8fdec:	1c86d83a 	srl	r3,r3,r18
   8fdf0:	2088b03a 	or	r4,r4,r2
   8fdf4:	2011883a 	mov	r8,r4
   8fdf8:	1813883a 	mov	r9,r3
   8fdfc:	d9000415 	stw	r4,16(sp)
   8fe00:	d8c00515 	stw	r3,20(sp)
   8fe04:	003ed406 	br	8f958 <__umoddi3+0x11c>
   8fe08:	01400604 	movi	r5,24
   8fe0c:	2805883a 	mov	r2,r5
   8fe10:	003ea606 	br	8f8ac <__umoddi3+0x70>
   8fe14:	01400204 	movi	r5,8
   8fe18:	2805883a 	mov	r2,r5
   8fe1c:	003ea306 	br	8f8ac <__umoddi3+0x70>
   8fe20:	01400204 	movi	r5,8
   8fe24:	2805883a 	mov	r2,r5
   8fe28:	003edf06 	br	8f9a8 <__umoddi3+0x16c>
   8fe2c:	01400204 	movi	r5,8
   8fe30:	2805883a 	mov	r2,r5
   8fe34:	003ef206 	br	8fa00 <__umoddi3+0x1c4>
   8fe38:	01400604 	movi	r5,24
   8fe3c:	2805883a 	mov	r2,r5
   8fe40:	003eef06 	br	8fa00 <__umoddi3+0x1c4>
   8fe44:	01400604 	movi	r5,24
   8fe48:	2805883a 	mov	r2,r5
   8fe4c:	003ed606 	br	8f9a8 <__umoddi3+0x16c>
   8fe50:	153fa92e 	bgeu	r2,r20,8fcf8 <__umoddi3+0x4bc>
   8fe54:	843fffc4 	addi	r16,r16,-1
   8fe58:	1585883a 	add	r2,r2,r22
   8fe5c:	003fa606 	br	8fcf8 <__umoddi3+0x4bc>
   8fe60:	157f912e 	bgeu	r2,r21,8fca8 <__umoddi3+0x46c>
   8fe64:	e73fffc4 	addi	fp,fp,-1
   8fe68:	1585883a 	add	r2,r2,r22
   8fe6c:	003f8e06 	br	8fca8 <__umoddi3+0x46c>
   8fe70:	157f542e 	bgeu	r2,r21,8fbc4 <__umoddi3+0x388>
   8fe74:	14c5883a 	add	r2,r2,r19
   8fe78:	003f5206 	br	8fbc4 <__umoddi3+0x388>
   8fe7c:	14c5883a 	add	r2,r2,r19
   8fe80:	003efc06 	br	8fa74 <__umoddi3+0x238>
   8fe84:	14c5883a 	add	r2,r2,r19
   8fe88:	003ea606 	br	8f924 <__umoddi3+0xe8>
   8fe8c:	d8800117 	ldw	r2,4(sp)
   8fe90:	113fc836 	bltu	r2,r4,8fdb4 <__umoddi3+0x578>
   8fe94:	000d883a 	mov	r6,zero
   8fe98:	003fcd06 	br	8fdd0 <__umoddi3+0x594>

0008fe9c <_fpadd_parts>:
   8fe9c:	defff804 	addi	sp,sp,-32
   8fea0:	dcc00315 	stw	r19,12(sp)
   8fea4:	2027883a 	mov	r19,r4
   8fea8:	21000017 	ldw	r4,0(r4)
   8feac:	00c00044 	movi	r3,1
   8feb0:	dd400515 	stw	r21,20(sp)
   8feb4:	dd000415 	stw	r20,16(sp)
   8feb8:	ddc00715 	stw	r23,28(sp)
   8febc:	dd800615 	stw	r22,24(sp)
   8fec0:	dc800215 	stw	r18,8(sp)
   8fec4:	dc400115 	stw	r17,4(sp)
   8fec8:	dc000015 	stw	r16,0(sp)
   8fecc:	282b883a 	mov	r21,r5
   8fed0:	3029883a 	mov	r20,r6
   8fed4:	1900632e 	bgeu	r3,r4,90064 <_fpadd_parts+0x1c8>
   8fed8:	28800017 	ldw	r2,0(r5)
   8fedc:	1880812e 	bgeu	r3,r2,900e4 <_fpadd_parts+0x248>
   8fee0:	00c00104 	movi	r3,4
   8fee4:	20c0dc26 	beq	r4,r3,90258 <_fpadd_parts+0x3bc>
   8fee8:	10c07e26 	beq	r2,r3,900e4 <_fpadd_parts+0x248>
   8feec:	00c00084 	movi	r3,2
   8fef0:	10c06726 	beq	r2,r3,90090 <_fpadd_parts+0x1f4>
   8fef4:	20c07b26 	beq	r4,r3,900e4 <_fpadd_parts+0x248>
   8fef8:	9dc00217 	ldw	r23,8(r19)
   8fefc:	28c00217 	ldw	r3,8(r5)
   8ff00:	9c400317 	ldw	r17,12(r19)
   8ff04:	2bc00317 	ldw	r15,12(r5)
   8ff08:	b8cdc83a 	sub	r6,r23,r3
   8ff0c:	9c800417 	ldw	r18,16(r19)
   8ff10:	2c000417 	ldw	r16,16(r5)
   8ff14:	3009883a 	mov	r4,r6
   8ff18:	30009716 	blt	r6,zero,90178 <_fpadd_parts+0x2dc>
   8ff1c:	00800fc4 	movi	r2,63
   8ff20:	11806b16 	blt	r2,r6,900d0 <_fpadd_parts+0x234>
   8ff24:	0100a40e 	bge	zero,r4,901b8 <_fpadd_parts+0x31c>
   8ff28:	35bff804 	addi	r22,r6,-32
   8ff2c:	b000bc16 	blt	r22,zero,90220 <_fpadd_parts+0x384>
   8ff30:	8596d83a 	srl	r11,r16,r22
   8ff34:	0019883a 	mov	r12,zero
   8ff38:	0013883a 	mov	r9,zero
   8ff3c:	01000044 	movi	r4,1
   8ff40:	0015883a 	mov	r10,zero
   8ff44:	b000be16 	blt	r22,zero,90240 <_fpadd_parts+0x3a4>
   8ff48:	2590983a 	sll	r8,r4,r22
   8ff4c:	000f883a 	mov	r7,zero
   8ff50:	00bfffc4 	movi	r2,-1
   8ff54:	3889883a 	add	r4,r7,r2
   8ff58:	408b883a 	add	r5,r8,r2
   8ff5c:	21cd803a 	cmpltu	r6,r4,r7
   8ff60:	314b883a 	add	r5,r6,r5
   8ff64:	7904703a 	and	r2,r15,r4
   8ff68:	8146703a 	and	r3,r16,r5
   8ff6c:	10c4b03a 	or	r2,r2,r3
   8ff70:	10000226 	beq	r2,zero,8ff7c <_fpadd_parts+0xe0>
   8ff74:	02400044 	movi	r9,1
   8ff78:	0015883a 	mov	r10,zero
   8ff7c:	5a5eb03a 	or	r15,r11,r9
   8ff80:	62a0b03a 	or	r16,r12,r10
   8ff84:	99400117 	ldw	r5,4(r19)
   8ff88:	a8800117 	ldw	r2,4(r21)
   8ff8c:	28806e26 	beq	r5,r2,90148 <_fpadd_parts+0x2ac>
   8ff90:	28006626 	beq	r5,zero,9012c <_fpadd_parts+0x290>
   8ff94:	7c45c83a 	sub	r2,r15,r17
   8ff98:	7889803a 	cmpltu	r4,r15,r2
   8ff9c:	8487c83a 	sub	r3,r16,r18
   8ffa0:	1909c83a 	sub	r4,r3,r4
   8ffa4:	100d883a 	mov	r6,r2
   8ffa8:	200f883a 	mov	r7,r4
   8ffac:	38007716 	blt	r7,zero,9018c <_fpadd_parts+0x2f0>
   8ffb0:	a5c00215 	stw	r23,8(r20)
   8ffb4:	a1c00415 	stw	r7,16(r20)
   8ffb8:	a0000115 	stw	zero,4(r20)
   8ffbc:	a1800315 	stw	r6,12(r20)
   8ffc0:	a2000317 	ldw	r8,12(r20)
   8ffc4:	a2400417 	ldw	r9,16(r20)
   8ffc8:	00bfffc4 	movi	r2,-1
   8ffcc:	408b883a 	add	r5,r8,r2
   8ffd0:	2a09803a 	cmpltu	r4,r5,r8
   8ffd4:	488d883a 	add	r6,r9,r2
   8ffd8:	01c40034 	movhi	r7,4096
   8ffdc:	39ffffc4 	addi	r7,r7,-1
   8ffe0:	218d883a 	add	r6,r4,r6
   8ffe4:	39801736 	bltu	r7,r6,90044 <_fpadd_parts+0x1a8>
   8ffe8:	31c06526 	beq	r6,r7,90180 <_fpadd_parts+0x2e4>
   8ffec:	a3000217 	ldw	r12,8(r20)
   8fff0:	4209883a 	add	r4,r8,r8
   8fff4:	00bfffc4 	movi	r2,-1
   8fff8:	220f803a 	cmpltu	r7,r4,r8
   8fffc:	4a4b883a 	add	r5,r9,r9
   90000:	394f883a 	add	r7,r7,r5
   90004:	2095883a 	add	r10,r4,r2
   90008:	3897883a 	add	r11,r7,r2
   9000c:	510d803a 	cmpltu	r6,r10,r4
   90010:	6099883a 	add	r12,r12,r2
   90014:	32d7883a 	add	r11,r6,r11
   90018:	00840034 	movhi	r2,4096
   9001c:	10bfffc4 	addi	r2,r2,-1
   90020:	2011883a 	mov	r8,r4
   90024:	3813883a 	mov	r9,r7
   90028:	a1000315 	stw	r4,12(r20)
   9002c:	a1c00415 	stw	r7,16(r20)
   90030:	a3000215 	stw	r12,8(r20)
   90034:	12c00336 	bltu	r2,r11,90044 <_fpadd_parts+0x1a8>
   90038:	58bfed1e 	bne	r11,r2,8fff0 <_fpadd_parts+0x154>
   9003c:	00bfff84 	movi	r2,-2
   90040:	12bfeb2e 	bgeu	r2,r10,8fff0 <_fpadd_parts+0x154>
   90044:	a2800417 	ldw	r10,16(r20)
   90048:	008000c4 	movi	r2,3
   9004c:	00c80034 	movhi	r3,8192
   90050:	18ffffc4 	addi	r3,r3,-1
   90054:	a2400317 	ldw	r9,12(r20)
   90058:	a0800015 	stw	r2,0(r20)
   9005c:	1a802336 	bltu	r3,r10,900ec <_fpadd_parts+0x250>
   90060:	a027883a 	mov	r19,r20
   90064:	9805883a 	mov	r2,r19
   90068:	ddc00717 	ldw	r23,28(sp)
   9006c:	dd800617 	ldw	r22,24(sp)
   90070:	dd400517 	ldw	r21,20(sp)
   90074:	dd000417 	ldw	r20,16(sp)
   90078:	dcc00317 	ldw	r19,12(sp)
   9007c:	dc800217 	ldw	r18,8(sp)
   90080:	dc400117 	ldw	r17,4(sp)
   90084:	dc000017 	ldw	r16,0(sp)
   90088:	dec00804 	addi	sp,sp,32
   9008c:	f800283a 	ret
   90090:	20fff41e 	bne	r4,r3,90064 <_fpadd_parts+0x1c8>
   90094:	31000015 	stw	r4,0(r6)
   90098:	98800117 	ldw	r2,4(r19)
   9009c:	30800115 	stw	r2,4(r6)
   900a0:	98c00217 	ldw	r3,8(r19)
   900a4:	30c00215 	stw	r3,8(r6)
   900a8:	98800317 	ldw	r2,12(r19)
   900ac:	30800315 	stw	r2,12(r6)
   900b0:	98c00417 	ldw	r3,16(r19)
   900b4:	30c00415 	stw	r3,16(r6)
   900b8:	98800117 	ldw	r2,4(r19)
   900bc:	28c00117 	ldw	r3,4(r5)
   900c0:	3027883a 	mov	r19,r6
   900c4:	10c4703a 	and	r2,r2,r3
   900c8:	30800115 	stw	r2,4(r6)
   900cc:	003fe506 	br	90064 <_fpadd_parts+0x1c8>
   900d0:	1dc02616 	blt	r3,r23,9016c <_fpadd_parts+0x2d0>
   900d4:	0023883a 	mov	r17,zero
   900d8:	182f883a 	mov	r23,r3
   900dc:	0025883a 	mov	r18,zero
   900e0:	003fa806 	br	8ff84 <_fpadd_parts+0xe8>
   900e4:	a827883a 	mov	r19,r21
   900e8:	003fde06 	br	90064 <_fpadd_parts+0x1c8>
   900ec:	01800044 	movi	r6,1
   900f0:	500497fa 	slli	r2,r10,31
   900f4:	4808d07a 	srli	r4,r9,1
   900f8:	518ad83a 	srl	r5,r10,r6
   900fc:	a2000217 	ldw	r8,8(r20)
   90100:	1108b03a 	or	r4,r2,r4
   90104:	0007883a 	mov	r3,zero
   90108:	4984703a 	and	r2,r9,r6
   9010c:	208cb03a 	or	r6,r4,r2
   90110:	28ceb03a 	or	r7,r5,r3
   90114:	42000044 	addi	r8,r8,1
   90118:	a027883a 	mov	r19,r20
   9011c:	a1c00415 	stw	r7,16(r20)
   90120:	a2000215 	stw	r8,8(r20)
   90124:	a1800315 	stw	r6,12(r20)
   90128:	003fce06 	br	90064 <_fpadd_parts+0x1c8>
   9012c:	8bc5c83a 	sub	r2,r17,r15
   90130:	8889803a 	cmpltu	r4,r17,r2
   90134:	9407c83a 	sub	r3,r18,r16
   90138:	1909c83a 	sub	r4,r3,r4
   9013c:	100d883a 	mov	r6,r2
   90140:	200f883a 	mov	r7,r4
   90144:	003f9906 	br	8ffac <_fpadd_parts+0x110>
   90148:	7c45883a 	add	r2,r15,r17
   9014c:	13c9803a 	cmpltu	r4,r2,r15
   90150:	8487883a 	add	r3,r16,r18
   90154:	20c9883a 	add	r4,r4,r3
   90158:	a1400115 	stw	r5,4(r20)
   9015c:	a5c00215 	stw	r23,8(r20)
   90160:	a0800315 	stw	r2,12(r20)
   90164:	a1000415 	stw	r4,16(r20)
   90168:	003fb606 	br	90044 <_fpadd_parts+0x1a8>
   9016c:	001f883a 	mov	r15,zero
   90170:	0021883a 	mov	r16,zero
   90174:	003f8306 	br	8ff84 <_fpadd_parts+0xe8>
   90178:	018dc83a 	sub	r6,zero,r6
   9017c:	003f6706 	br	8ff1c <_fpadd_parts+0x80>
   90180:	00bfff84 	movi	r2,-2
   90184:	117faf36 	bltu	r2,r5,90044 <_fpadd_parts+0x1a8>
   90188:	003f9806 	br	8ffec <_fpadd_parts+0x150>
   9018c:	0005883a 	mov	r2,zero
   90190:	1189c83a 	sub	r4,r2,r6
   90194:	1105803a 	cmpltu	r2,r2,r4
   90198:	01cbc83a 	sub	r5,zero,r7
   9019c:	2885c83a 	sub	r2,r5,r2
   901a0:	01800044 	movi	r6,1
   901a4:	a1800115 	stw	r6,4(r20)
   901a8:	a5c00215 	stw	r23,8(r20)
   901ac:	a1000315 	stw	r4,12(r20)
   901b0:	a0800415 	stw	r2,16(r20)
   901b4:	003f8206 	br	8ffc0 <_fpadd_parts+0x124>
   901b8:	203f7226 	beq	r4,zero,8ff84 <_fpadd_parts+0xe8>
   901bc:	35bff804 	addi	r22,r6,-32
   901c0:	b9af883a 	add	r23,r23,r6
   901c4:	b0003116 	blt	r22,zero,9028c <_fpadd_parts+0x3f0>
   901c8:	959ad83a 	srl	r13,r18,r22
   901cc:	001d883a 	mov	r14,zero
   901d0:	000f883a 	mov	r7,zero
   901d4:	01000044 	movi	r4,1
   901d8:	0011883a 	mov	r8,zero
   901dc:	b0002516 	blt	r22,zero,90274 <_fpadd_parts+0x3d8>
   901e0:	2594983a 	sll	r10,r4,r22
   901e4:	0013883a 	mov	r9,zero
   901e8:	00bfffc4 	movi	r2,-1
   901ec:	4889883a 	add	r4,r9,r2
   901f0:	508b883a 	add	r5,r10,r2
   901f4:	224d803a 	cmpltu	r6,r4,r9
   901f8:	314b883a 	add	r5,r6,r5
   901fc:	8904703a 	and	r2,r17,r4
   90200:	9146703a 	and	r3,r18,r5
   90204:	10c4b03a 	or	r2,r2,r3
   90208:	10000226 	beq	r2,zero,90214 <_fpadd_parts+0x378>
   9020c:	01c00044 	movi	r7,1
   90210:	0011883a 	mov	r8,zero
   90214:	69e2b03a 	or	r17,r13,r7
   90218:	7224b03a 	or	r18,r14,r8
   9021c:	003f5906 	br	8ff84 <_fpadd_parts+0xe8>
   90220:	8407883a 	add	r3,r16,r16
   90224:	008007c4 	movi	r2,31
   90228:	1185c83a 	sub	r2,r2,r6
   9022c:	1886983a 	sll	r3,r3,r2
   90230:	7996d83a 	srl	r11,r15,r6
   90234:	8198d83a 	srl	r12,r16,r6
   90238:	1ad6b03a 	or	r11,r3,r11
   9023c:	003f3e06 	br	8ff38 <_fpadd_parts+0x9c>
   90240:	2006d07a 	srli	r3,r4,1
   90244:	008007c4 	movi	r2,31
   90248:	1185c83a 	sub	r2,r2,r6
   9024c:	1890d83a 	srl	r8,r3,r2
   90250:	218e983a 	sll	r7,r4,r6
   90254:	003f3e06 	br	8ff50 <_fpadd_parts+0xb4>
   90258:	113f821e 	bne	r2,r4,90064 <_fpadd_parts+0x1c8>
   9025c:	28c00117 	ldw	r3,4(r5)
   90260:	98800117 	ldw	r2,4(r19)
   90264:	10ff7f26 	beq	r2,r3,90064 <_fpadd_parts+0x1c8>
   90268:	04c002b4 	movhi	r19,10
   9026c:	9cffd804 	addi	r19,r19,-160
   90270:	003f7c06 	br	90064 <_fpadd_parts+0x1c8>
   90274:	2006d07a 	srli	r3,r4,1
   90278:	008007c4 	movi	r2,31
   9027c:	1185c83a 	sub	r2,r2,r6
   90280:	1894d83a 	srl	r10,r3,r2
   90284:	2192983a 	sll	r9,r4,r6
   90288:	003fd706 	br	901e8 <_fpadd_parts+0x34c>
   9028c:	9487883a 	add	r3,r18,r18
   90290:	008007c4 	movi	r2,31
   90294:	1185c83a 	sub	r2,r2,r6
   90298:	1886983a 	sll	r3,r3,r2
   9029c:	899ad83a 	srl	r13,r17,r6
   902a0:	919cd83a 	srl	r14,r18,r6
   902a4:	1b5ab03a 	or	r13,r3,r13
   902a8:	003fc906 	br	901d0 <_fpadd_parts+0x334>

000902ac <__subdf3>:
   902ac:	deffea04 	addi	sp,sp,-88
   902b0:	dcc01415 	stw	r19,80(sp)
   902b4:	dcc00404 	addi	r19,sp,16
   902b8:	2011883a 	mov	r8,r4
   902bc:	2813883a 	mov	r9,r5
   902c0:	dc401315 	stw	r17,76(sp)
   902c4:	d809883a 	mov	r4,sp
   902c8:	980b883a 	mov	r5,r19
   902cc:	dc400904 	addi	r17,sp,36
   902d0:	dfc01515 	stw	ra,84(sp)
   902d4:	da400115 	stw	r9,4(sp)
   902d8:	d9c00315 	stw	r7,12(sp)
   902dc:	da000015 	stw	r8,0(sp)
   902e0:	d9800215 	stw	r6,8(sp)
   902e4:	00914800 	call	91480 <__unpack_d>
   902e8:	d9000204 	addi	r4,sp,8
   902ec:	880b883a 	mov	r5,r17
   902f0:	00914800 	call	91480 <__unpack_d>
   902f4:	d8800a17 	ldw	r2,40(sp)
   902f8:	880b883a 	mov	r5,r17
   902fc:	9809883a 	mov	r4,r19
   90300:	d9800e04 	addi	r6,sp,56
   90304:	1080005c 	xori	r2,r2,1
   90308:	d8800a15 	stw	r2,40(sp)
   9030c:	008fe9c0 	call	8fe9c <_fpadd_parts>
   90310:	1009883a 	mov	r4,r2
   90314:	009116c0 	call	9116c <__pack_d>
   90318:	dfc01517 	ldw	ra,84(sp)
   9031c:	dcc01417 	ldw	r19,80(sp)
   90320:	dc401317 	ldw	r17,76(sp)
   90324:	dec01604 	addi	sp,sp,88
   90328:	f800283a 	ret

0009032c <__adddf3>:
   9032c:	deffea04 	addi	sp,sp,-88
   90330:	dcc01415 	stw	r19,80(sp)
   90334:	dcc00404 	addi	r19,sp,16
   90338:	2011883a 	mov	r8,r4
   9033c:	2813883a 	mov	r9,r5
   90340:	dc401315 	stw	r17,76(sp)
   90344:	d809883a 	mov	r4,sp
   90348:	980b883a 	mov	r5,r19
   9034c:	dc400904 	addi	r17,sp,36
   90350:	dfc01515 	stw	ra,84(sp)
   90354:	da400115 	stw	r9,4(sp)
   90358:	d9c00315 	stw	r7,12(sp)
   9035c:	da000015 	stw	r8,0(sp)
   90360:	d9800215 	stw	r6,8(sp)
   90364:	00914800 	call	91480 <__unpack_d>
   90368:	d9000204 	addi	r4,sp,8
   9036c:	880b883a 	mov	r5,r17
   90370:	00914800 	call	91480 <__unpack_d>
   90374:	d9800e04 	addi	r6,sp,56
   90378:	9809883a 	mov	r4,r19
   9037c:	880b883a 	mov	r5,r17
   90380:	008fe9c0 	call	8fe9c <_fpadd_parts>
   90384:	1009883a 	mov	r4,r2
   90388:	009116c0 	call	9116c <__pack_d>
   9038c:	dfc01517 	ldw	ra,84(sp)
   90390:	dcc01417 	ldw	r19,80(sp)
   90394:	dc401317 	ldw	r17,76(sp)
   90398:	dec01604 	addi	sp,sp,88
   9039c:	f800283a 	ret

000903a0 <__muldf3>:
   903a0:	deffe004 	addi	sp,sp,-128
   903a4:	dc401815 	stw	r17,96(sp)
   903a8:	dc400404 	addi	r17,sp,16
   903ac:	2011883a 	mov	r8,r4
   903b0:	2813883a 	mov	r9,r5
   903b4:	dc001715 	stw	r16,92(sp)
   903b8:	d809883a 	mov	r4,sp
   903bc:	880b883a 	mov	r5,r17
   903c0:	dc000904 	addi	r16,sp,36
   903c4:	dfc01f15 	stw	ra,124(sp)
   903c8:	da400115 	stw	r9,4(sp)
   903cc:	d9c00315 	stw	r7,12(sp)
   903d0:	da000015 	stw	r8,0(sp)
   903d4:	d9800215 	stw	r6,8(sp)
   903d8:	ddc01e15 	stw	r23,120(sp)
   903dc:	dd801d15 	stw	r22,116(sp)
   903e0:	dd401c15 	stw	r21,112(sp)
   903e4:	dd001b15 	stw	r20,108(sp)
   903e8:	dcc01a15 	stw	r19,104(sp)
   903ec:	dc801915 	stw	r18,100(sp)
   903f0:	00914800 	call	91480 <__unpack_d>
   903f4:	d9000204 	addi	r4,sp,8
   903f8:	800b883a 	mov	r5,r16
   903fc:	00914800 	call	91480 <__unpack_d>
   90400:	d9000417 	ldw	r4,16(sp)
   90404:	00800044 	movi	r2,1
   90408:	1100102e 	bgeu	r2,r4,9044c <__muldf3+0xac>
   9040c:	d8c00917 	ldw	r3,36(sp)
   90410:	10c0062e 	bgeu	r2,r3,9042c <__muldf3+0x8c>
   90414:	00800104 	movi	r2,4
   90418:	20800a26 	beq	r4,r2,90444 <__muldf3+0xa4>
   9041c:	1880cc26 	beq	r3,r2,90750 <__muldf3+0x3b0>
   90420:	00800084 	movi	r2,2
   90424:	20800926 	beq	r4,r2,9044c <__muldf3+0xac>
   90428:	1880191e 	bne	r3,r2,90490 <__muldf3+0xf0>
   9042c:	d8c00a17 	ldw	r3,40(sp)
   90430:	d8800517 	ldw	r2,20(sp)
   90434:	8009883a 	mov	r4,r16
   90438:	10c4c03a 	cmpne	r2,r2,r3
   9043c:	d8800a15 	stw	r2,40(sp)
   90440:	00000706 	br	90460 <__muldf3+0xc0>
   90444:	00800084 	movi	r2,2
   90448:	1880c326 	beq	r3,r2,90758 <__muldf3+0x3b8>
   9044c:	d8800517 	ldw	r2,20(sp)
   90450:	d8c00a17 	ldw	r3,40(sp)
   90454:	8809883a 	mov	r4,r17
   90458:	10c4c03a 	cmpne	r2,r2,r3
   9045c:	d8800515 	stw	r2,20(sp)
   90460:	009116c0 	call	9116c <__pack_d>
   90464:	dfc01f17 	ldw	ra,124(sp)
   90468:	ddc01e17 	ldw	r23,120(sp)
   9046c:	dd801d17 	ldw	r22,116(sp)
   90470:	dd401c17 	ldw	r21,112(sp)
   90474:	dd001b17 	ldw	r20,108(sp)
   90478:	dcc01a17 	ldw	r19,104(sp)
   9047c:	dc801917 	ldw	r18,100(sp)
   90480:	dc401817 	ldw	r17,96(sp)
   90484:	dc001717 	ldw	r16,92(sp)
   90488:	dec02004 	addi	sp,sp,128
   9048c:	f800283a 	ret
   90490:	dd800717 	ldw	r22,28(sp)
   90494:	dc800c17 	ldw	r18,48(sp)
   90498:	002b883a 	mov	r21,zero
   9049c:	0023883a 	mov	r17,zero
   904a0:	a80b883a 	mov	r5,r21
   904a4:	b00d883a 	mov	r6,r22
   904a8:	880f883a 	mov	r7,r17
   904ac:	ddc00817 	ldw	r23,32(sp)
   904b0:	dcc00d17 	ldw	r19,52(sp)
   904b4:	9009883a 	mov	r4,r18
   904b8:	0090fc80 	call	90fc8 <__muldi3>
   904bc:	001b883a 	mov	r13,zero
   904c0:	680f883a 	mov	r7,r13
   904c4:	b009883a 	mov	r4,r22
   904c8:	000b883a 	mov	r5,zero
   904cc:	980d883a 	mov	r6,r19
   904d0:	b82d883a 	mov	r22,r23
   904d4:	002f883a 	mov	r23,zero
   904d8:	db401615 	stw	r13,88(sp)
   904dc:	d8801315 	stw	r2,76(sp)
   904e0:	d8c01415 	stw	r3,80(sp)
   904e4:	dcc01515 	stw	r19,84(sp)
   904e8:	0090fc80 	call	90fc8 <__muldi3>
   904ec:	b00d883a 	mov	r6,r22
   904f0:	000b883a 	mov	r5,zero
   904f4:	9009883a 	mov	r4,r18
   904f8:	b80f883a 	mov	r7,r23
   904fc:	1021883a 	mov	r16,r2
   90500:	1823883a 	mov	r17,r3
   90504:	0090fc80 	call	90fc8 <__muldi3>
   90508:	8085883a 	add	r2,r16,r2
   9050c:	140d803a 	cmpltu	r6,r2,r16
   90510:	88c7883a 	add	r3,r17,r3
   90514:	30cd883a 	add	r6,r6,r3
   90518:	1029883a 	mov	r20,r2
   9051c:	302b883a 	mov	r21,r6
   90520:	da801317 	ldw	r10,76(sp)
   90524:	dac01417 	ldw	r11,80(sp)
   90528:	db001517 	ldw	r12,84(sp)
   9052c:	db401617 	ldw	r13,88(sp)
   90530:	3440612e 	bgeu	r6,r17,906b8 <__muldf3+0x318>
   90534:	0009883a 	mov	r4,zero
   90538:	5105883a 	add	r2,r10,r4
   9053c:	128d803a 	cmpltu	r6,r2,r10
   90540:	5d07883a 	add	r3,r11,r20
   90544:	30cd883a 	add	r6,r6,r3
   90548:	0021883a 	mov	r16,zero
   9054c:	04400044 	movi	r17,1
   90550:	1025883a 	mov	r18,r2
   90554:	3027883a 	mov	r19,r6
   90558:	32c06236 	bltu	r6,r11,906e4 <__muldf3+0x344>
   9055c:	59807a26 	beq	r11,r6,90748 <__muldf3+0x3a8>
   90560:	680b883a 	mov	r5,r13
   90564:	b80f883a 	mov	r7,r23
   90568:	6009883a 	mov	r4,r12
   9056c:	b00d883a 	mov	r6,r22
   90570:	0090fc80 	call	90fc8 <__muldi3>
   90574:	1009883a 	mov	r4,r2
   90578:	000f883a 	mov	r7,zero
   9057c:	1545883a 	add	r2,r2,r21
   90580:	1111803a 	cmpltu	r8,r2,r4
   90584:	19c7883a 	add	r3,r3,r7
   90588:	40c7883a 	add	r3,r8,r3
   9058c:	88cb883a 	add	r5,r17,r3
   90590:	d8c00617 	ldw	r3,24(sp)
   90594:	8089883a 	add	r4,r16,r2
   90598:	d8800b17 	ldw	r2,44(sp)
   9059c:	18c00104 	addi	r3,r3,4
   905a0:	240d803a 	cmpltu	r6,r4,r16
   905a4:	10c7883a 	add	r3,r2,r3
   905a8:	2013883a 	mov	r9,r4
   905ac:	d8800a17 	ldw	r2,40(sp)
   905b0:	d9000517 	ldw	r4,20(sp)
   905b4:	314d883a 	add	r6,r6,r5
   905b8:	3015883a 	mov	r10,r6
   905bc:	2088c03a 	cmpne	r4,r4,r2
   905c0:	00880034 	movhi	r2,8192
   905c4:	10bfffc4 	addi	r2,r2,-1
   905c8:	d9000f15 	stw	r4,60(sp)
   905cc:	d8c01015 	stw	r3,64(sp)
   905d0:	1180162e 	bgeu	r2,r6,9062c <__muldf3+0x28c>
   905d4:	1811883a 	mov	r8,r3
   905d8:	101f883a 	mov	r15,r2
   905dc:	980497fa 	slli	r2,r19,31
   905e0:	9016d07a 	srli	r11,r18,1
   905e4:	500697fa 	slli	r3,r10,31
   905e8:	480cd07a 	srli	r6,r9,1
   905ec:	500ed07a 	srli	r7,r10,1
   905f0:	12d6b03a 	or	r11,r2,r11
   905f4:	00800044 	movi	r2,1
   905f8:	198cb03a 	or	r6,r3,r6
   905fc:	4888703a 	and	r4,r9,r2
   90600:	9818d07a 	srli	r12,r19,1
   90604:	001b883a 	mov	r13,zero
   90608:	03a00034 	movhi	r14,32768
   9060c:	3013883a 	mov	r9,r6
   90610:	3815883a 	mov	r10,r7
   90614:	4091883a 	add	r8,r8,r2
   90618:	20000226 	beq	r4,zero,90624 <__muldf3+0x284>
   9061c:	5b64b03a 	or	r18,r11,r13
   90620:	63a6b03a 	or	r19,r12,r14
   90624:	7abfed36 	bltu	r15,r10,905dc <__muldf3+0x23c>
   90628:	da001015 	stw	r8,64(sp)
   9062c:	00840034 	movhi	r2,4096
   90630:	10bfffc4 	addi	r2,r2,-1
   90634:	12801436 	bltu	r2,r10,90688 <__muldf3+0x2e8>
   90638:	da001017 	ldw	r8,64(sp)
   9063c:	101f883a 	mov	r15,r2
   90640:	4a45883a 	add	r2,r9,r9
   90644:	124d803a 	cmpltu	r6,r2,r9
   90648:	5287883a 	add	r3,r10,r10
   9064c:	9497883a 	add	r11,r18,r18
   90650:	5c8f803a 	cmpltu	r7,r11,r18
   90654:	9cd9883a 	add	r12,r19,r19
   90658:	01000044 	movi	r4,1
   9065c:	30cd883a 	add	r6,r6,r3
   90660:	3b0f883a 	add	r7,r7,r12
   90664:	423fffc4 	addi	r8,r8,-1
   90668:	1013883a 	mov	r9,r2
   9066c:	3015883a 	mov	r10,r6
   90670:	111ab03a 	or	r13,r2,r4
   90674:	98003016 	blt	r19,zero,90738 <__muldf3+0x398>
   90678:	5825883a 	mov	r18,r11
   9067c:	3827883a 	mov	r19,r7
   90680:	7abfef2e 	bgeu	r15,r10,90640 <__muldf3+0x2a0>
   90684:	da001015 	stw	r8,64(sp)
   90688:	00803fc4 	movi	r2,255
   9068c:	488e703a 	and	r7,r9,r2
   90690:	00802004 	movi	r2,128
   90694:	0007883a 	mov	r3,zero
   90698:	0011883a 	mov	r8,zero
   9069c:	38801826 	beq	r7,r2,90700 <__muldf3+0x360>
   906a0:	008000c4 	movi	r2,3
   906a4:	d9000e04 	addi	r4,sp,56
   906a8:	da801215 	stw	r10,72(sp)
   906ac:	d8800e15 	stw	r2,56(sp)
   906b0:	da401115 	stw	r9,68(sp)
   906b4:	003f6a06 	br	90460 <__muldf3+0xc0>
   906b8:	89802126 	beq	r17,r6,90740 <__muldf3+0x3a0>
   906bc:	0009883a 	mov	r4,zero
   906c0:	5105883a 	add	r2,r10,r4
   906c4:	128d803a 	cmpltu	r6,r2,r10
   906c8:	5d07883a 	add	r3,r11,r20
   906cc:	30cd883a 	add	r6,r6,r3
   906d0:	0021883a 	mov	r16,zero
   906d4:	0023883a 	mov	r17,zero
   906d8:	1025883a 	mov	r18,r2
   906dc:	3027883a 	mov	r19,r6
   906e0:	32ff9e2e 	bgeu	r6,r11,9055c <__muldf3+0x1bc>
   906e4:	00800044 	movi	r2,1
   906e8:	8089883a 	add	r4,r16,r2
   906ec:	240d803a 	cmpltu	r6,r4,r16
   906f0:	344d883a 	add	r6,r6,r17
   906f4:	2021883a 	mov	r16,r4
   906f8:	3023883a 	mov	r17,r6
   906fc:	003f9806 	br	90560 <__muldf3+0x1c0>
   90700:	403fe71e 	bne	r8,zero,906a0 <__muldf3+0x300>
   90704:	01004004 	movi	r4,256
   90708:	4904703a 	and	r2,r9,r4
   9070c:	10c4b03a 	or	r2,r2,r3
   90710:	103fe31e 	bne	r2,zero,906a0 <__muldf3+0x300>
   90714:	94c4b03a 	or	r2,r18,r19
   90718:	103fe126 	beq	r2,zero,906a0 <__muldf3+0x300>
   9071c:	49c5883a 	add	r2,r9,r7
   90720:	1251803a 	cmpltu	r8,r2,r9
   90724:	4291883a 	add	r8,r8,r10
   90728:	013fc004 	movi	r4,-256
   9072c:	1112703a 	and	r9,r2,r4
   90730:	4015883a 	mov	r10,r8
   90734:	003fda06 	br	906a0 <__muldf3+0x300>
   90738:	6813883a 	mov	r9,r13
   9073c:	003fce06 	br	90678 <__muldf3+0x2d8>
   90740:	143f7c36 	bltu	r2,r16,90534 <__muldf3+0x194>
   90744:	003fdd06 	br	906bc <__muldf3+0x31c>
   90748:	12bf852e 	bgeu	r2,r10,90560 <__muldf3+0x1c0>
   9074c:	003fe506 	br	906e4 <__muldf3+0x344>
   90750:	00800084 	movi	r2,2
   90754:	20bf351e 	bne	r4,r2,9042c <__muldf3+0x8c>
   90758:	010002b4 	movhi	r4,10
   9075c:	213fd804 	addi	r4,r4,-160
   90760:	003f3f06 	br	90460 <__muldf3+0xc0>

00090764 <__divdf3>:
   90764:	deffed04 	addi	sp,sp,-76
   90768:	dcc01115 	stw	r19,68(sp)
   9076c:	dcc00404 	addi	r19,sp,16
   90770:	2011883a 	mov	r8,r4
   90774:	2813883a 	mov	r9,r5
   90778:	dc000e15 	stw	r16,56(sp)
   9077c:	d809883a 	mov	r4,sp
   90780:	980b883a 	mov	r5,r19
   90784:	dc000904 	addi	r16,sp,36
   90788:	dfc01215 	stw	ra,72(sp)
   9078c:	da400115 	stw	r9,4(sp)
   90790:	d9c00315 	stw	r7,12(sp)
   90794:	da000015 	stw	r8,0(sp)
   90798:	d9800215 	stw	r6,8(sp)
   9079c:	dc801015 	stw	r18,64(sp)
   907a0:	dc400f15 	stw	r17,60(sp)
   907a4:	00914800 	call	91480 <__unpack_d>
   907a8:	d9000204 	addi	r4,sp,8
   907ac:	800b883a 	mov	r5,r16
   907b0:	00914800 	call	91480 <__unpack_d>
   907b4:	d9000417 	ldw	r4,16(sp)
   907b8:	00800044 	movi	r2,1
   907bc:	11000b2e 	bgeu	r2,r4,907ec <__divdf3+0x88>
   907c0:	d9400917 	ldw	r5,36(sp)
   907c4:	1140762e 	bgeu	r2,r5,909a0 <__divdf3+0x23c>
   907c8:	d8800517 	ldw	r2,20(sp)
   907cc:	d8c00a17 	ldw	r3,40(sp)
   907d0:	01800104 	movi	r6,4
   907d4:	10c4f03a 	xor	r2,r2,r3
   907d8:	d8800515 	stw	r2,20(sp)
   907dc:	21800226 	beq	r4,r6,907e8 <__divdf3+0x84>
   907e0:	00800084 	movi	r2,2
   907e4:	2080141e 	bne	r4,r2,90838 <__divdf3+0xd4>
   907e8:	29000926 	beq	r5,r4,90810 <__divdf3+0xac>
   907ec:	9809883a 	mov	r4,r19
   907f0:	009116c0 	call	9116c <__pack_d>
   907f4:	dfc01217 	ldw	ra,72(sp)
   907f8:	dcc01117 	ldw	r19,68(sp)
   907fc:	dc801017 	ldw	r18,64(sp)
   90800:	dc400f17 	ldw	r17,60(sp)
   90804:	dc000e17 	ldw	r16,56(sp)
   90808:	dec01304 	addi	sp,sp,76
   9080c:	f800283a 	ret
   90810:	010002b4 	movhi	r4,10
   90814:	213fd804 	addi	r4,r4,-160
   90818:	009116c0 	call	9116c <__pack_d>
   9081c:	dfc01217 	ldw	ra,72(sp)
   90820:	dcc01117 	ldw	r19,68(sp)
   90824:	dc801017 	ldw	r18,64(sp)
   90828:	dc400f17 	ldw	r17,60(sp)
   9082c:	dc000e17 	ldw	r16,56(sp)
   90830:	dec01304 	addi	sp,sp,76
   90834:	f800283a 	ret
   90838:	29805b26 	beq	r5,r6,909a8 <__divdf3+0x244>
   9083c:	28802d26 	beq	r5,r2,908f4 <__divdf3+0x190>
   90840:	d8c00617 	ldw	r3,24(sp)
   90844:	d8800b17 	ldw	r2,44(sp)
   90848:	d9c00817 	ldw	r7,32(sp)
   9084c:	dc400d17 	ldw	r17,52(sp)
   90850:	188bc83a 	sub	r5,r3,r2
   90854:	d9800717 	ldw	r6,28(sp)
   90858:	dc000c17 	ldw	r16,48(sp)
   9085c:	d9400615 	stw	r5,24(sp)
   90860:	3c403836 	bltu	r7,r17,90944 <__divdf3+0x1e0>
   90864:	89c03626 	beq	r17,r7,90940 <__divdf3+0x1dc>
   90868:	0015883a 	mov	r10,zero
   9086c:	001d883a 	mov	r14,zero
   90870:	02c40034 	movhi	r11,4096
   90874:	001f883a 	mov	r15,zero
   90878:	003f883a 	mov	ra,zero
   9087c:	04800f44 	movi	r18,61
   90880:	00000f06 	br	908c0 <__divdf3+0x15c>
   90884:	601d883a 	mov	r14,r12
   90888:	681f883a 	mov	r15,r13
   9088c:	400d883a 	mov	r6,r8
   90890:	100f883a 	mov	r7,r2
   90894:	3191883a 	add	r8,r6,r6
   90898:	5808d07a 	srli	r4,r11,1
   9089c:	4185803a 	cmpltu	r2,r8,r6
   908a0:	39d3883a 	add	r9,r7,r7
   908a4:	28c6b03a 	or	r3,r5,r3
   908a8:	1245883a 	add	r2,r2,r9
   908ac:	1815883a 	mov	r10,r3
   908b0:	2017883a 	mov	r11,r4
   908b4:	400d883a 	mov	r6,r8
   908b8:	100f883a 	mov	r7,r2
   908bc:	fc801726 	beq	ra,r18,9091c <__divdf3+0x1b8>
   908c0:	580a97fa 	slli	r5,r11,31
   908c4:	5006d07a 	srli	r3,r10,1
   908c8:	ffc00044 	addi	ra,ra,1
   908cc:	3c7ff136 	bltu	r7,r17,90894 <__divdf3+0x130>
   908d0:	3411c83a 	sub	r8,r6,r16
   908d4:	3205803a 	cmpltu	r2,r6,r8
   908d8:	3c53c83a 	sub	r9,r7,r17
   908dc:	7298b03a 	or	r12,r14,r10
   908e0:	7adab03a 	or	r13,r15,r11
   908e4:	4885c83a 	sub	r2,r9,r2
   908e8:	89ffe61e 	bne	r17,r7,90884 <__divdf3+0x120>
   908ec:	343fe936 	bltu	r6,r16,90894 <__divdf3+0x130>
   908f0:	003fe406 	br	90884 <__divdf3+0x120>
   908f4:	9809883a 	mov	r4,r19
   908f8:	d9800415 	stw	r6,16(sp)
   908fc:	009116c0 	call	9116c <__pack_d>
   90900:	dfc01217 	ldw	ra,72(sp)
   90904:	dcc01117 	ldw	r19,68(sp)
   90908:	dc801017 	ldw	r18,64(sp)
   9090c:	dc400f17 	ldw	r17,60(sp)
   90910:	dc000e17 	ldw	r16,56(sp)
   90914:	dec01304 	addi	sp,sp,76
   90918:	f800283a 	ret
   9091c:	00803fc4 	movi	r2,255
   90920:	7090703a 	and	r8,r14,r2
   90924:	00802004 	movi	r2,128
   90928:	0007883a 	mov	r3,zero
   9092c:	0013883a 	mov	r9,zero
   90930:	40800d26 	beq	r8,r2,90968 <__divdf3+0x204>
   90934:	dbc00815 	stw	r15,32(sp)
   90938:	db800715 	stw	r14,28(sp)
   9093c:	003fab06 	br	907ec <__divdf3+0x88>
   90940:	343fc92e 	bgeu	r6,r16,90868 <__divdf3+0x104>
   90944:	3185883a 	add	r2,r6,r6
   90948:	1189803a 	cmpltu	r4,r2,r6
   9094c:	39c7883a 	add	r3,r7,r7
   90950:	20c9883a 	add	r4,r4,r3
   90954:	297fffc4 	addi	r5,r5,-1
   90958:	100d883a 	mov	r6,r2
   9095c:	200f883a 	mov	r7,r4
   90960:	d9400615 	stw	r5,24(sp)
   90964:	003fc006 	br	90868 <__divdf3+0x104>
   90968:	483ff21e 	bne	r9,zero,90934 <__divdf3+0x1d0>
   9096c:	01004004 	movi	r4,256
   90970:	7104703a 	and	r2,r14,r4
   90974:	10c4b03a 	or	r2,r2,r3
   90978:	103fee1e 	bne	r2,zero,90934 <__divdf3+0x1d0>
   9097c:	31c4b03a 	or	r2,r6,r7
   90980:	103fec26 	beq	r2,zero,90934 <__divdf3+0x1d0>
   90984:	7205883a 	add	r2,r14,r8
   90988:	1391803a 	cmpltu	r8,r2,r14
   9098c:	43d1883a 	add	r8,r8,r15
   90990:	013fc004 	movi	r4,-256
   90994:	111c703a 	and	r14,r2,r4
   90998:	401f883a 	mov	r15,r8
   9099c:	003fe506 	br	90934 <__divdf3+0x1d0>
   909a0:	8009883a 	mov	r4,r16
   909a4:	003f9206 	br	907f0 <__divdf3+0x8c>
   909a8:	9809883a 	mov	r4,r19
   909ac:	d8000715 	stw	zero,28(sp)
   909b0:	d8000815 	stw	zero,32(sp)
   909b4:	d8000615 	stw	zero,24(sp)
   909b8:	003f8d06 	br	907f0 <__divdf3+0x8c>

000909bc <__eqdf2>:
   909bc:	deffef04 	addi	sp,sp,-68
   909c0:	dc400f15 	stw	r17,60(sp)
   909c4:	dc400404 	addi	r17,sp,16
   909c8:	2005883a 	mov	r2,r4
   909cc:	2807883a 	mov	r3,r5
   909d0:	dc000e15 	stw	r16,56(sp)
   909d4:	d809883a 	mov	r4,sp
   909d8:	880b883a 	mov	r5,r17
   909dc:	dc000904 	addi	r16,sp,36
   909e0:	d8c00115 	stw	r3,4(sp)
   909e4:	d8800015 	stw	r2,0(sp)
   909e8:	d9800215 	stw	r6,8(sp)
   909ec:	dfc01015 	stw	ra,64(sp)
   909f0:	d9c00315 	stw	r7,12(sp)
   909f4:	00914800 	call	91480 <__unpack_d>
   909f8:	d9000204 	addi	r4,sp,8
   909fc:	800b883a 	mov	r5,r16
   90a00:	00914800 	call	91480 <__unpack_d>
   90a04:	d8800417 	ldw	r2,16(sp)
   90a08:	00c00044 	movi	r3,1
   90a0c:	180d883a 	mov	r6,r3
   90a10:	1880062e 	bgeu	r3,r2,90a2c <__eqdf2+0x70>
   90a14:	d8800917 	ldw	r2,36(sp)
   90a18:	8809883a 	mov	r4,r17
   90a1c:	800b883a 	mov	r5,r16
   90a20:	1880022e 	bgeu	r3,r2,90a2c <__eqdf2+0x70>
   90a24:	00915b80 	call	915b8 <__fpcmp_parts_d>
   90a28:	100d883a 	mov	r6,r2
   90a2c:	3005883a 	mov	r2,r6
   90a30:	dfc01017 	ldw	ra,64(sp)
   90a34:	dc400f17 	ldw	r17,60(sp)
   90a38:	dc000e17 	ldw	r16,56(sp)
   90a3c:	dec01104 	addi	sp,sp,68
   90a40:	f800283a 	ret

00090a44 <__nedf2>:
   90a44:	deffef04 	addi	sp,sp,-68
   90a48:	dc400f15 	stw	r17,60(sp)
   90a4c:	dc400404 	addi	r17,sp,16
   90a50:	2005883a 	mov	r2,r4
   90a54:	2807883a 	mov	r3,r5
   90a58:	dc000e15 	stw	r16,56(sp)
   90a5c:	d809883a 	mov	r4,sp
   90a60:	880b883a 	mov	r5,r17
   90a64:	dc000904 	addi	r16,sp,36
   90a68:	d8c00115 	stw	r3,4(sp)
   90a6c:	d8800015 	stw	r2,0(sp)
   90a70:	d9800215 	stw	r6,8(sp)
   90a74:	dfc01015 	stw	ra,64(sp)
   90a78:	d9c00315 	stw	r7,12(sp)
   90a7c:	00914800 	call	91480 <__unpack_d>
   90a80:	d9000204 	addi	r4,sp,8
   90a84:	800b883a 	mov	r5,r16
   90a88:	00914800 	call	91480 <__unpack_d>
   90a8c:	d8800417 	ldw	r2,16(sp)
   90a90:	00c00044 	movi	r3,1
   90a94:	180d883a 	mov	r6,r3
   90a98:	1880062e 	bgeu	r3,r2,90ab4 <__nedf2+0x70>
   90a9c:	d8800917 	ldw	r2,36(sp)
   90aa0:	8809883a 	mov	r4,r17
   90aa4:	800b883a 	mov	r5,r16
   90aa8:	1880022e 	bgeu	r3,r2,90ab4 <__nedf2+0x70>
   90aac:	00915b80 	call	915b8 <__fpcmp_parts_d>
   90ab0:	100d883a 	mov	r6,r2
   90ab4:	3005883a 	mov	r2,r6
   90ab8:	dfc01017 	ldw	ra,64(sp)
   90abc:	dc400f17 	ldw	r17,60(sp)
   90ac0:	dc000e17 	ldw	r16,56(sp)
   90ac4:	dec01104 	addi	sp,sp,68
   90ac8:	f800283a 	ret

00090acc <__gtdf2>:
   90acc:	deffef04 	addi	sp,sp,-68
   90ad0:	dc400f15 	stw	r17,60(sp)
   90ad4:	dc400404 	addi	r17,sp,16
   90ad8:	2005883a 	mov	r2,r4
   90adc:	2807883a 	mov	r3,r5
   90ae0:	dc000e15 	stw	r16,56(sp)
   90ae4:	d809883a 	mov	r4,sp
   90ae8:	880b883a 	mov	r5,r17
   90aec:	dc000904 	addi	r16,sp,36
   90af0:	d8c00115 	stw	r3,4(sp)
   90af4:	d8800015 	stw	r2,0(sp)
   90af8:	d9800215 	stw	r6,8(sp)
   90afc:	dfc01015 	stw	ra,64(sp)
   90b00:	d9c00315 	stw	r7,12(sp)
   90b04:	00914800 	call	91480 <__unpack_d>
   90b08:	d9000204 	addi	r4,sp,8
   90b0c:	800b883a 	mov	r5,r16
   90b10:	00914800 	call	91480 <__unpack_d>
   90b14:	d8800417 	ldw	r2,16(sp)
   90b18:	00c00044 	movi	r3,1
   90b1c:	01bfffc4 	movi	r6,-1
   90b20:	1880062e 	bgeu	r3,r2,90b3c <__gtdf2+0x70>
   90b24:	d8800917 	ldw	r2,36(sp)
   90b28:	8809883a 	mov	r4,r17
   90b2c:	800b883a 	mov	r5,r16
   90b30:	1880022e 	bgeu	r3,r2,90b3c <__gtdf2+0x70>
   90b34:	00915b80 	call	915b8 <__fpcmp_parts_d>
   90b38:	100d883a 	mov	r6,r2
   90b3c:	3005883a 	mov	r2,r6
   90b40:	dfc01017 	ldw	ra,64(sp)
   90b44:	dc400f17 	ldw	r17,60(sp)
   90b48:	dc000e17 	ldw	r16,56(sp)
   90b4c:	dec01104 	addi	sp,sp,68
   90b50:	f800283a 	ret

00090b54 <__gedf2>:
   90b54:	deffef04 	addi	sp,sp,-68
   90b58:	dc400f15 	stw	r17,60(sp)
   90b5c:	dc400404 	addi	r17,sp,16
   90b60:	2005883a 	mov	r2,r4
   90b64:	2807883a 	mov	r3,r5
   90b68:	dc000e15 	stw	r16,56(sp)
   90b6c:	d809883a 	mov	r4,sp
   90b70:	880b883a 	mov	r5,r17
   90b74:	dc000904 	addi	r16,sp,36
   90b78:	d8c00115 	stw	r3,4(sp)
   90b7c:	d8800015 	stw	r2,0(sp)
   90b80:	d9800215 	stw	r6,8(sp)
   90b84:	dfc01015 	stw	ra,64(sp)
   90b88:	d9c00315 	stw	r7,12(sp)
   90b8c:	00914800 	call	91480 <__unpack_d>
   90b90:	d9000204 	addi	r4,sp,8
   90b94:	800b883a 	mov	r5,r16
   90b98:	00914800 	call	91480 <__unpack_d>
   90b9c:	d8800417 	ldw	r2,16(sp)
   90ba0:	00c00044 	movi	r3,1
   90ba4:	01bfffc4 	movi	r6,-1
   90ba8:	1880062e 	bgeu	r3,r2,90bc4 <__gedf2+0x70>
   90bac:	d8800917 	ldw	r2,36(sp)
   90bb0:	8809883a 	mov	r4,r17
   90bb4:	800b883a 	mov	r5,r16
   90bb8:	1880022e 	bgeu	r3,r2,90bc4 <__gedf2+0x70>
   90bbc:	00915b80 	call	915b8 <__fpcmp_parts_d>
   90bc0:	100d883a 	mov	r6,r2
   90bc4:	3005883a 	mov	r2,r6
   90bc8:	dfc01017 	ldw	ra,64(sp)
   90bcc:	dc400f17 	ldw	r17,60(sp)
   90bd0:	dc000e17 	ldw	r16,56(sp)
   90bd4:	dec01104 	addi	sp,sp,68
   90bd8:	f800283a 	ret

00090bdc <__ltdf2>:
   90bdc:	deffef04 	addi	sp,sp,-68
   90be0:	dc400f15 	stw	r17,60(sp)
   90be4:	dc400404 	addi	r17,sp,16
   90be8:	2005883a 	mov	r2,r4
   90bec:	2807883a 	mov	r3,r5
   90bf0:	dc000e15 	stw	r16,56(sp)
   90bf4:	d809883a 	mov	r4,sp
   90bf8:	880b883a 	mov	r5,r17
   90bfc:	dc000904 	addi	r16,sp,36
   90c00:	d8c00115 	stw	r3,4(sp)
   90c04:	d8800015 	stw	r2,0(sp)
   90c08:	d9800215 	stw	r6,8(sp)
   90c0c:	dfc01015 	stw	ra,64(sp)
   90c10:	d9c00315 	stw	r7,12(sp)
   90c14:	00914800 	call	91480 <__unpack_d>
   90c18:	d9000204 	addi	r4,sp,8
   90c1c:	800b883a 	mov	r5,r16
   90c20:	00914800 	call	91480 <__unpack_d>
   90c24:	d8800417 	ldw	r2,16(sp)
   90c28:	00c00044 	movi	r3,1
   90c2c:	180d883a 	mov	r6,r3
   90c30:	1880062e 	bgeu	r3,r2,90c4c <__ltdf2+0x70>
   90c34:	d8800917 	ldw	r2,36(sp)
   90c38:	8809883a 	mov	r4,r17
   90c3c:	800b883a 	mov	r5,r16
   90c40:	1880022e 	bgeu	r3,r2,90c4c <__ltdf2+0x70>
   90c44:	00915b80 	call	915b8 <__fpcmp_parts_d>
   90c48:	100d883a 	mov	r6,r2
   90c4c:	3005883a 	mov	r2,r6
   90c50:	dfc01017 	ldw	ra,64(sp)
   90c54:	dc400f17 	ldw	r17,60(sp)
   90c58:	dc000e17 	ldw	r16,56(sp)
   90c5c:	dec01104 	addi	sp,sp,68
   90c60:	f800283a 	ret

00090c64 <__floatsidf>:
   90c64:	2006d7fa 	srli	r3,r4,31
   90c68:	defff604 	addi	sp,sp,-40
   90c6c:	008000c4 	movi	r2,3
   90c70:	dfc00915 	stw	ra,36(sp)
   90c74:	dcc00815 	stw	r19,32(sp)
   90c78:	dc800715 	stw	r18,28(sp)
   90c7c:	dc400615 	stw	r17,24(sp)
   90c80:	dc000515 	stw	r16,20(sp)
   90c84:	d8800015 	stw	r2,0(sp)
   90c88:	d8c00115 	stw	r3,4(sp)
   90c8c:	20000f1e 	bne	r4,zero,90ccc <__floatsidf+0x68>
   90c90:	00800084 	movi	r2,2
   90c94:	d8800015 	stw	r2,0(sp)
   90c98:	d809883a 	mov	r4,sp
   90c9c:	009116c0 	call	9116c <__pack_d>
   90ca0:	1009883a 	mov	r4,r2
   90ca4:	180b883a 	mov	r5,r3
   90ca8:	2005883a 	mov	r2,r4
   90cac:	2807883a 	mov	r3,r5
   90cb0:	dfc00917 	ldw	ra,36(sp)
   90cb4:	dcc00817 	ldw	r19,32(sp)
   90cb8:	dc800717 	ldw	r18,28(sp)
   90cbc:	dc400617 	ldw	r17,24(sp)
   90cc0:	dc000517 	ldw	r16,20(sp)
   90cc4:	dec00a04 	addi	sp,sp,40
   90cc8:	f800283a 	ret
   90ccc:	00800f04 	movi	r2,60
   90cd0:	1807003a 	cmpeq	r3,r3,zero
   90cd4:	d8800215 	stw	r2,8(sp)
   90cd8:	18001126 	beq	r3,zero,90d20 <__floatsidf+0xbc>
   90cdc:	0027883a 	mov	r19,zero
   90ce0:	2025883a 	mov	r18,r4
   90ce4:	d9000315 	stw	r4,12(sp)
   90ce8:	dcc00415 	stw	r19,16(sp)
   90cec:	00910ec0 	call	910ec <__clzsi2>
   90cf0:	11000744 	addi	r4,r2,29
   90cf4:	013fe80e 	bge	zero,r4,90c98 <__floatsidf+0x34>
   90cf8:	10bfff44 	addi	r2,r2,-3
   90cfc:	10000c16 	blt	r2,zero,90d30 <__floatsidf+0xcc>
   90d00:	90a2983a 	sll	r17,r18,r2
   90d04:	0021883a 	mov	r16,zero
   90d08:	d8800217 	ldw	r2,8(sp)
   90d0c:	dc400415 	stw	r17,16(sp)
   90d10:	dc000315 	stw	r16,12(sp)
   90d14:	1105c83a 	sub	r2,r2,r4
   90d18:	d8800215 	stw	r2,8(sp)
   90d1c:	003fde06 	br	90c98 <__floatsidf+0x34>
   90d20:	00a00034 	movhi	r2,32768
   90d24:	20800a26 	beq	r4,r2,90d50 <__floatsidf+0xec>
   90d28:	0109c83a 	sub	r4,zero,r4
   90d2c:	003feb06 	br	90cdc <__floatsidf+0x78>
   90d30:	9006d07a 	srli	r3,r18,1
   90d34:	008007c4 	movi	r2,31
   90d38:	1105c83a 	sub	r2,r2,r4
   90d3c:	1886d83a 	srl	r3,r3,r2
   90d40:	9922983a 	sll	r17,r19,r4
   90d44:	9120983a 	sll	r16,r18,r4
   90d48:	1c62b03a 	or	r17,r3,r17
   90d4c:	003fee06 	br	90d08 <__floatsidf+0xa4>
   90d50:	0009883a 	mov	r4,zero
   90d54:	01707834 	movhi	r5,49632
   90d58:	003fd306 	br	90ca8 <__floatsidf+0x44>

00090d5c <__fixdfsi>:
   90d5c:	defff804 	addi	sp,sp,-32
   90d60:	2005883a 	mov	r2,r4
   90d64:	2807883a 	mov	r3,r5
   90d68:	d809883a 	mov	r4,sp
   90d6c:	d9400204 	addi	r5,sp,8
   90d70:	d8c00115 	stw	r3,4(sp)
   90d74:	d8800015 	stw	r2,0(sp)
   90d78:	dfc00715 	stw	ra,28(sp)
   90d7c:	00914800 	call	91480 <__unpack_d>
   90d80:	d8c00217 	ldw	r3,8(sp)
   90d84:	00800084 	movi	r2,2
   90d88:	1880051e 	bne	r3,r2,90da0 <__fixdfsi+0x44>
   90d8c:	0007883a 	mov	r3,zero
   90d90:	1805883a 	mov	r2,r3
   90d94:	dfc00717 	ldw	ra,28(sp)
   90d98:	dec00804 	addi	sp,sp,32
   90d9c:	f800283a 	ret
   90da0:	00800044 	movi	r2,1
   90da4:	10fff92e 	bgeu	r2,r3,90d8c <__fixdfsi+0x30>
   90da8:	00800104 	movi	r2,4
   90dac:	18800426 	beq	r3,r2,90dc0 <__fixdfsi+0x64>
   90db0:	d8c00417 	ldw	r3,16(sp)
   90db4:	183ff516 	blt	r3,zero,90d8c <__fixdfsi+0x30>
   90db8:	00800784 	movi	r2,30
   90dbc:	10c0080e 	bge	r2,r3,90de0 <__fixdfsi+0x84>
   90dc0:	d8800317 	ldw	r2,12(sp)
   90dc4:	1000121e 	bne	r2,zero,90e10 <__fixdfsi+0xb4>
   90dc8:	00e00034 	movhi	r3,32768
   90dcc:	18ffffc4 	addi	r3,r3,-1
   90dd0:	1805883a 	mov	r2,r3
   90dd4:	dfc00717 	ldw	ra,28(sp)
   90dd8:	dec00804 	addi	sp,sp,32
   90ddc:	f800283a 	ret
   90de0:	00800f04 	movi	r2,60
   90de4:	10d1c83a 	sub	r8,r2,r3
   90de8:	40bff804 	addi	r2,r8,-32
   90dec:	d9800517 	ldw	r6,20(sp)
   90df0:	d9c00617 	ldw	r7,24(sp)
   90df4:	10000816 	blt	r2,zero,90e18 <__fixdfsi+0xbc>
   90df8:	3888d83a 	srl	r4,r7,r2
   90dfc:	d8800317 	ldw	r2,12(sp)
   90e00:	2007883a 	mov	r3,r4
   90e04:	103fe226 	beq	r2,zero,90d90 <__fixdfsi+0x34>
   90e08:	0107c83a 	sub	r3,zero,r4
   90e0c:	003fe006 	br	90d90 <__fixdfsi+0x34>
   90e10:	00e00034 	movhi	r3,32768
   90e14:	003fde06 	br	90d90 <__fixdfsi+0x34>
   90e18:	39c7883a 	add	r3,r7,r7
   90e1c:	008007c4 	movi	r2,31
   90e20:	1205c83a 	sub	r2,r2,r8
   90e24:	1886983a 	sll	r3,r3,r2
   90e28:	3208d83a 	srl	r4,r6,r8
   90e2c:	1908b03a 	or	r4,r3,r4
   90e30:	003ff206 	br	90dfc <__fixdfsi+0xa0>

00090e34 <__floatunsidf>:
   90e34:	defff204 	addi	sp,sp,-56
   90e38:	dfc00d15 	stw	ra,52(sp)
   90e3c:	ddc00c15 	stw	r23,48(sp)
   90e40:	dd800b15 	stw	r22,44(sp)
   90e44:	dd400a15 	stw	r21,40(sp)
   90e48:	dd000915 	stw	r20,36(sp)
   90e4c:	dcc00815 	stw	r19,32(sp)
   90e50:	dc800715 	stw	r18,28(sp)
   90e54:	dc400615 	stw	r17,24(sp)
   90e58:	dc000515 	stw	r16,20(sp)
   90e5c:	d8000115 	stw	zero,4(sp)
   90e60:	20000f1e 	bne	r4,zero,90ea0 <__floatunsidf+0x6c>
   90e64:	00800084 	movi	r2,2
   90e68:	d8800015 	stw	r2,0(sp)
   90e6c:	d809883a 	mov	r4,sp
   90e70:	009116c0 	call	9116c <__pack_d>
   90e74:	dfc00d17 	ldw	ra,52(sp)
   90e78:	ddc00c17 	ldw	r23,48(sp)
   90e7c:	dd800b17 	ldw	r22,44(sp)
   90e80:	dd400a17 	ldw	r21,40(sp)
   90e84:	dd000917 	ldw	r20,36(sp)
   90e88:	dcc00817 	ldw	r19,32(sp)
   90e8c:	dc800717 	ldw	r18,28(sp)
   90e90:	dc400617 	ldw	r17,24(sp)
   90e94:	dc000517 	ldw	r16,20(sp)
   90e98:	dec00e04 	addi	sp,sp,56
   90e9c:	f800283a 	ret
   90ea0:	008000c4 	movi	r2,3
   90ea4:	00c00f04 	movi	r3,60
   90ea8:	002f883a 	mov	r23,zero
   90eac:	202d883a 	mov	r22,r4
   90eb0:	d8800015 	stw	r2,0(sp)
   90eb4:	d8c00215 	stw	r3,8(sp)
   90eb8:	d9000315 	stw	r4,12(sp)
   90ebc:	ddc00415 	stw	r23,16(sp)
   90ec0:	00910ec0 	call	910ec <__clzsi2>
   90ec4:	12400744 	addi	r9,r2,29
   90ec8:	48000b16 	blt	r9,zero,90ef8 <__floatunsidf+0xc4>
   90ecc:	483fe726 	beq	r9,zero,90e6c <__floatunsidf+0x38>
   90ed0:	10bfff44 	addi	r2,r2,-3
   90ed4:	10002e16 	blt	r2,zero,90f90 <__floatunsidf+0x15c>
   90ed8:	b0a2983a 	sll	r17,r22,r2
   90edc:	0021883a 	mov	r16,zero
   90ee0:	d8800217 	ldw	r2,8(sp)
   90ee4:	dc400415 	stw	r17,16(sp)
   90ee8:	dc000315 	stw	r16,12(sp)
   90eec:	1245c83a 	sub	r2,r2,r9
   90ef0:	d8800215 	stw	r2,8(sp)
   90ef4:	003fdd06 	br	90e6c <__floatunsidf+0x38>
   90ef8:	0255c83a 	sub	r10,zero,r9
   90efc:	51bff804 	addi	r6,r10,-32
   90f00:	30001b16 	blt	r6,zero,90f70 <__floatunsidf+0x13c>
   90f04:	b9a8d83a 	srl	r20,r23,r6
   90f08:	002b883a 	mov	r21,zero
   90f0c:	000f883a 	mov	r7,zero
   90f10:	01000044 	movi	r4,1
   90f14:	0011883a 	mov	r8,zero
   90f18:	30002516 	blt	r6,zero,90fb0 <__floatunsidf+0x17c>
   90f1c:	21a6983a 	sll	r19,r4,r6
   90f20:	0025883a 	mov	r18,zero
   90f24:	00bfffc4 	movi	r2,-1
   90f28:	9089883a 	add	r4,r18,r2
   90f2c:	988b883a 	add	r5,r19,r2
   90f30:	248d803a 	cmpltu	r6,r4,r18
   90f34:	314b883a 	add	r5,r6,r5
   90f38:	b104703a 	and	r2,r22,r4
   90f3c:	b946703a 	and	r3,r23,r5
   90f40:	10c4b03a 	or	r2,r2,r3
   90f44:	10000226 	beq	r2,zero,90f50 <__floatunsidf+0x11c>
   90f48:	01c00044 	movi	r7,1
   90f4c:	0011883a 	mov	r8,zero
   90f50:	d9000217 	ldw	r4,8(sp)
   90f54:	a1c4b03a 	or	r2,r20,r7
   90f58:	aa06b03a 	or	r3,r21,r8
   90f5c:	2249c83a 	sub	r4,r4,r9
   90f60:	d8c00415 	stw	r3,16(sp)
   90f64:	d9000215 	stw	r4,8(sp)
   90f68:	d8800315 	stw	r2,12(sp)
   90f6c:	003fbf06 	br	90e6c <__floatunsidf+0x38>
   90f70:	bdc7883a 	add	r3,r23,r23
   90f74:	008007c4 	movi	r2,31
   90f78:	1285c83a 	sub	r2,r2,r10
   90f7c:	1886983a 	sll	r3,r3,r2
   90f80:	b2a8d83a 	srl	r20,r22,r10
   90f84:	baaad83a 	srl	r21,r23,r10
   90f88:	1d28b03a 	or	r20,r3,r20
   90f8c:	003fdf06 	br	90f0c <__floatunsidf+0xd8>
   90f90:	b006d07a 	srli	r3,r22,1
   90f94:	008007c4 	movi	r2,31
   90f98:	1245c83a 	sub	r2,r2,r9
   90f9c:	1886d83a 	srl	r3,r3,r2
   90fa0:	ba62983a 	sll	r17,r23,r9
   90fa4:	b260983a 	sll	r16,r22,r9
   90fa8:	1c62b03a 	or	r17,r3,r17
   90fac:	003fcc06 	br	90ee0 <__floatunsidf+0xac>
   90fb0:	2006d07a 	srli	r3,r4,1
   90fb4:	008007c4 	movi	r2,31
   90fb8:	1285c83a 	sub	r2,r2,r10
   90fbc:	18a6d83a 	srl	r19,r3,r2
   90fc0:	22a4983a 	sll	r18,r4,r10
   90fc4:	003fd706 	br	90f24 <__floatunsidf+0xf0>

00090fc8 <__muldi3>:
   90fc8:	defff204 	addi	sp,sp,-56
   90fcc:	df000c15 	stw	fp,48(sp)
   90fd0:	3038d43a 	srli	fp,r6,16
   90fd4:	dd000815 	stw	r20,32(sp)
   90fd8:	dc400515 	stw	r17,20(sp)
   90fdc:	2028d43a 	srli	r20,r4,16
   90fe0:	247fffcc 	andi	r17,r4,65535
   90fe4:	dc000415 	stw	r16,16(sp)
   90fe8:	343fffcc 	andi	r16,r6,65535
   90fec:	dcc00715 	stw	r19,28(sp)
   90ff0:	d9000015 	stw	r4,0(sp)
   90ff4:	2827883a 	mov	r19,r5
   90ff8:	8809883a 	mov	r4,r17
   90ffc:	d9400115 	stw	r5,4(sp)
   91000:	800b883a 	mov	r5,r16
   91004:	d9800215 	stw	r6,8(sp)
   91008:	dfc00d15 	stw	ra,52(sp)
   9100c:	d9c00315 	stw	r7,12(sp)
   91010:	dd800a15 	stw	r22,40(sp)
   91014:	dd400915 	stw	r21,36(sp)
   91018:	302d883a 	mov	r22,r6
   9101c:	ddc00b15 	stw	r23,44(sp)
   91020:	dc800615 	stw	r18,24(sp)
   91024:	00877e40 	call	877e4 <__mulsi3>
   91028:	8809883a 	mov	r4,r17
   9102c:	e00b883a 	mov	r5,fp
   91030:	102b883a 	mov	r21,r2
   91034:	00877e40 	call	877e4 <__mulsi3>
   91038:	800b883a 	mov	r5,r16
   9103c:	a009883a 	mov	r4,r20
   91040:	1023883a 	mov	r17,r2
   91044:	00877e40 	call	877e4 <__mulsi3>
   91048:	a009883a 	mov	r4,r20
   9104c:	e00b883a 	mov	r5,fp
   91050:	1021883a 	mov	r16,r2
   91054:	00877e40 	call	877e4 <__mulsi3>
   91058:	a8ffffcc 	andi	r3,r21,65535
   9105c:	a82ad43a 	srli	r21,r21,16
   91060:	8c23883a 	add	r17,r17,r16
   91064:	1011883a 	mov	r8,r2
   91068:	ac6b883a 	add	r21,r21,r17
   9106c:	a804943a 	slli	r2,r21,16
   91070:	b009883a 	mov	r4,r22
   91074:	980b883a 	mov	r5,r19
   91078:	10c7883a 	add	r3,r2,r3
   9107c:	a812d43a 	srli	r9,r21,16
   91080:	180d883a 	mov	r6,r3
   91084:	ac00022e 	bgeu	r21,r16,91090 <__muldi3+0xc8>
   91088:	00800074 	movhi	r2,1
   9108c:	4091883a 	add	r8,r8,r2
   91090:	4267883a 	add	r19,r8,r9
   91094:	302d883a 	mov	r22,r6
   91098:	00877e40 	call	877e4 <__mulsi3>
   9109c:	d9400317 	ldw	r5,12(sp)
   910a0:	d9000017 	ldw	r4,0(sp)
   910a4:	1023883a 	mov	r17,r2
   910a8:	00877e40 	call	877e4 <__mulsi3>
   910ac:	14cb883a 	add	r5,r2,r19
   910b0:	894b883a 	add	r5,r17,r5
   910b4:	b005883a 	mov	r2,r22
   910b8:	2807883a 	mov	r3,r5
   910bc:	dfc00d17 	ldw	ra,52(sp)
   910c0:	df000c17 	ldw	fp,48(sp)
   910c4:	ddc00b17 	ldw	r23,44(sp)
   910c8:	dd800a17 	ldw	r22,40(sp)
   910cc:	dd400917 	ldw	r21,36(sp)
   910d0:	dd000817 	ldw	r20,32(sp)
   910d4:	dcc00717 	ldw	r19,28(sp)
   910d8:	dc800617 	ldw	r18,24(sp)
   910dc:	dc400517 	ldw	r17,20(sp)
   910e0:	dc000417 	ldw	r16,16(sp)
   910e4:	dec00e04 	addi	sp,sp,56
   910e8:	f800283a 	ret

000910ec <__clzsi2>:
   910ec:	00bfffd4 	movui	r2,65535
   910f0:	11000e36 	bltu	r2,r4,9112c <__clzsi2+0x40>
   910f4:	00803fc4 	movi	r2,255
   910f8:	01400204 	movi	r5,8
   910fc:	0007883a 	mov	r3,zero
   91100:	11001036 	bltu	r2,r4,91144 <__clzsi2+0x58>
   91104:	000b883a 	mov	r5,zero
   91108:	20c6d83a 	srl	r3,r4,r3
   9110c:	008002b4 	movhi	r2,10
   91110:	10bfdd04 	addi	r2,r2,-140
   91114:	1887883a 	add	r3,r3,r2
   91118:	18800003 	ldbu	r2,0(r3)
   9111c:	00c00804 	movi	r3,32
   91120:	2885883a 	add	r2,r5,r2
   91124:	1885c83a 	sub	r2,r3,r2
   91128:	f800283a 	ret
   9112c:	01400404 	movi	r5,16
   91130:	00804034 	movhi	r2,256
   91134:	10bfffc4 	addi	r2,r2,-1
   91138:	2807883a 	mov	r3,r5
   9113c:	113ff22e 	bgeu	r2,r4,91108 <__clzsi2+0x1c>
   91140:	01400604 	movi	r5,24
   91144:	2807883a 	mov	r3,r5
   91148:	20c6d83a 	srl	r3,r4,r3
   9114c:	008002b4 	movhi	r2,10
   91150:	10bfdd04 	addi	r2,r2,-140
   91154:	1887883a 	add	r3,r3,r2
   91158:	18800003 	ldbu	r2,0(r3)
   9115c:	00c00804 	movi	r3,32
   91160:	2885883a 	add	r2,r5,r2
   91164:	1885c83a 	sub	r2,r3,r2
   91168:	f800283a 	ret

0009116c <__pack_d>:
   9116c:	20c00017 	ldw	r3,0(r4)
   91170:	defffd04 	addi	sp,sp,-12
   91174:	dc000015 	stw	r16,0(sp)
   91178:	dc800215 	stw	r18,8(sp)
   9117c:	dc400115 	stw	r17,4(sp)
   91180:	00800044 	movi	r2,1
   91184:	22000317 	ldw	r8,12(r4)
   91188:	001f883a 	mov	r15,zero
   9118c:	22400417 	ldw	r9,16(r4)
   91190:	24000117 	ldw	r16,4(r4)
   91194:	10c0552e 	bgeu	r2,r3,912ec <__pack_d+0x180>
   91198:	00800104 	movi	r2,4
   9119c:	18804f26 	beq	r3,r2,912dc <__pack_d+0x170>
   911a0:	00800084 	movi	r2,2
   911a4:	18800226 	beq	r3,r2,911b0 <__pack_d+0x44>
   911a8:	4244b03a 	or	r2,r8,r9
   911ac:	10001a1e 	bne	r2,zero,91218 <__pack_d+0xac>
   911b0:	000d883a 	mov	r6,zero
   911b4:	000f883a 	mov	r7,zero
   911b8:	0011883a 	mov	r8,zero
   911bc:	00800434 	movhi	r2,16
   911c0:	10bfffc4 	addi	r2,r2,-1
   911c4:	301d883a 	mov	r14,r6
   911c8:	3884703a 	and	r2,r7,r2
   911cc:	400a953a 	slli	r5,r8,20
   911d0:	79bffc2c 	andhi	r6,r15,65520
   911d4:	308cb03a 	or	r6,r6,r2
   911d8:	00e00434 	movhi	r3,32784
   911dc:	18ffffc4 	addi	r3,r3,-1
   911e0:	800497fa 	slli	r2,r16,31
   911e4:	30c6703a 	and	r3,r6,r3
   911e8:	1946b03a 	or	r3,r3,r5
   911ec:	01600034 	movhi	r5,32768
   911f0:	297fffc4 	addi	r5,r5,-1
   911f4:	194a703a 	and	r5,r3,r5
   911f8:	288ab03a 	or	r5,r5,r2
   911fc:	2807883a 	mov	r3,r5
   91200:	7005883a 	mov	r2,r14
   91204:	dc800217 	ldw	r18,8(sp)
   91208:	dc400117 	ldw	r17,4(sp)
   9120c:	dc000017 	ldw	r16,0(sp)
   91210:	dec00304 	addi	sp,sp,12
   91214:	f800283a 	ret
   91218:	21000217 	ldw	r4,8(r4)
   9121c:	00bf0084 	movi	r2,-1022
   91220:	20803f16 	blt	r4,r2,91320 <__pack_d+0x1b4>
   91224:	0080ffc4 	movi	r2,1023
   91228:	11002c16 	blt	r2,r4,912dc <__pack_d+0x170>
   9122c:	00803fc4 	movi	r2,255
   91230:	408c703a 	and	r6,r8,r2
   91234:	00802004 	movi	r2,128
   91238:	0007883a 	mov	r3,zero
   9123c:	000f883a 	mov	r7,zero
   91240:	2280ffc4 	addi	r10,r4,1023
   91244:	30801e26 	beq	r6,r2,912c0 <__pack_d+0x154>
   91248:	00801fc4 	movi	r2,127
   9124c:	4089883a 	add	r4,r8,r2
   91250:	220d803a 	cmpltu	r6,r4,r8
   91254:	324d883a 	add	r6,r6,r9
   91258:	2011883a 	mov	r8,r4
   9125c:	3013883a 	mov	r9,r6
   91260:	00880034 	movhi	r2,8192
   91264:	10bfffc4 	addi	r2,r2,-1
   91268:	12400d36 	bltu	r2,r9,912a0 <__pack_d+0x134>
   9126c:	4804963a 	slli	r2,r9,24
   91270:	400cd23a 	srli	r6,r8,8
   91274:	480ed23a 	srli	r7,r9,8
   91278:	013fffc4 	movi	r4,-1
   9127c:	118cb03a 	or	r6,r2,r6
   91280:	01400434 	movhi	r5,16
   91284:	297fffc4 	addi	r5,r5,-1
   91288:	3104703a 	and	r2,r6,r4
   9128c:	3946703a 	and	r3,r7,r5
   91290:	5201ffcc 	andi	r8,r10,2047
   91294:	100d883a 	mov	r6,r2
   91298:	180f883a 	mov	r7,r3
   9129c:	003fc706 	br	911bc <__pack_d+0x50>
   912a0:	480897fa 	slli	r4,r9,31
   912a4:	4004d07a 	srli	r2,r8,1
   912a8:	4806d07a 	srli	r3,r9,1
   912ac:	52800044 	addi	r10,r10,1
   912b0:	2084b03a 	or	r2,r4,r2
   912b4:	1011883a 	mov	r8,r2
   912b8:	1813883a 	mov	r9,r3
   912bc:	003feb06 	br	9126c <__pack_d+0x100>
   912c0:	383fe11e 	bne	r7,zero,91248 <__pack_d+0xdc>
   912c4:	01004004 	movi	r4,256
   912c8:	4104703a 	and	r2,r8,r4
   912cc:	10c4b03a 	or	r2,r2,r3
   912d0:	103fe326 	beq	r2,zero,91260 <__pack_d+0xf4>
   912d4:	3005883a 	mov	r2,r6
   912d8:	003fdc06 	br	9124c <__pack_d+0xe0>
   912dc:	000d883a 	mov	r6,zero
   912e0:	000f883a 	mov	r7,zero
   912e4:	0201ffc4 	movi	r8,2047
   912e8:	003fb406 	br	911bc <__pack_d+0x50>
   912ec:	0005883a 	mov	r2,zero
   912f0:	00c00234 	movhi	r3,8
   912f4:	408cb03a 	or	r6,r8,r2
   912f8:	48ceb03a 	or	r7,r9,r3
   912fc:	013fffc4 	movi	r4,-1
   91300:	01400434 	movhi	r5,16
   91304:	297fffc4 	addi	r5,r5,-1
   91308:	3104703a 	and	r2,r6,r4
   9130c:	3946703a 	and	r3,r7,r5
   91310:	100d883a 	mov	r6,r2
   91314:	180f883a 	mov	r7,r3
   91318:	0201ffc4 	movi	r8,2047
   9131c:	003fa706 	br	911bc <__pack_d+0x50>
   91320:	1109c83a 	sub	r4,r2,r4
   91324:	00800e04 	movi	r2,56
   91328:	11004316 	blt	r2,r4,91438 <__pack_d+0x2cc>
   9132c:	21fff804 	addi	r7,r4,-32
   91330:	38004516 	blt	r7,zero,91448 <__pack_d+0x2dc>
   91334:	49d8d83a 	srl	r12,r9,r7
   91338:	001b883a 	mov	r13,zero
   9133c:	0023883a 	mov	r17,zero
   91340:	01400044 	movi	r5,1
   91344:	0025883a 	mov	r18,zero
   91348:	38004716 	blt	r7,zero,91468 <__pack_d+0x2fc>
   9134c:	29d6983a 	sll	r11,r5,r7
   91350:	0015883a 	mov	r10,zero
   91354:	00bfffc4 	movi	r2,-1
   91358:	5089883a 	add	r4,r10,r2
   9135c:	588b883a 	add	r5,r11,r2
   91360:	228d803a 	cmpltu	r6,r4,r10
   91364:	314b883a 	add	r5,r6,r5
   91368:	4104703a 	and	r2,r8,r4
   9136c:	4946703a 	and	r3,r9,r5
   91370:	10c4b03a 	or	r2,r2,r3
   91374:	10000226 	beq	r2,zero,91380 <__pack_d+0x214>
   91378:	04400044 	movi	r17,1
   9137c:	0025883a 	mov	r18,zero
   91380:	00803fc4 	movi	r2,255
   91384:	644eb03a 	or	r7,r12,r17
   91388:	3892703a 	and	r9,r7,r2
   9138c:	00802004 	movi	r2,128
   91390:	6c90b03a 	or	r8,r13,r18
   91394:	0015883a 	mov	r10,zero
   91398:	48801626 	beq	r9,r2,913f4 <__pack_d+0x288>
   9139c:	01001fc4 	movi	r4,127
   913a0:	3905883a 	add	r2,r7,r4
   913a4:	11cd803a 	cmpltu	r6,r2,r7
   913a8:	320d883a 	add	r6,r6,r8
   913ac:	100f883a 	mov	r7,r2
   913b0:	00840034 	movhi	r2,4096
   913b4:	10bfffc4 	addi	r2,r2,-1
   913b8:	3011883a 	mov	r8,r6
   913bc:	0007883a 	mov	r3,zero
   913c0:	11801b36 	bltu	r2,r6,91430 <__pack_d+0x2c4>
   913c4:	4004963a 	slli	r2,r8,24
   913c8:	3808d23a 	srli	r4,r7,8
   913cc:	400ad23a 	srli	r5,r8,8
   913d0:	1813883a 	mov	r9,r3
   913d4:	1108b03a 	or	r4,r2,r4
   913d8:	00bfffc4 	movi	r2,-1
   913dc:	00c00434 	movhi	r3,16
   913e0:	18ffffc4 	addi	r3,r3,-1
   913e4:	208c703a 	and	r6,r4,r2
   913e8:	28ce703a 	and	r7,r5,r3
   913ec:	4a01ffcc 	andi	r8,r9,2047
   913f0:	003f7206 	br	911bc <__pack_d+0x50>
   913f4:	503fe91e 	bne	r10,zero,9139c <__pack_d+0x230>
   913f8:	01004004 	movi	r4,256
   913fc:	3904703a 	and	r2,r7,r4
   91400:	0007883a 	mov	r3,zero
   91404:	10c4b03a 	or	r2,r2,r3
   91408:	10000626 	beq	r2,zero,91424 <__pack_d+0x2b8>
   9140c:	3a45883a 	add	r2,r7,r9
   91410:	11cd803a 	cmpltu	r6,r2,r7
   91414:	320d883a 	add	r6,r6,r8
   91418:	100f883a 	mov	r7,r2
   9141c:	3011883a 	mov	r8,r6
   91420:	0007883a 	mov	r3,zero
   91424:	00840034 	movhi	r2,4096
   91428:	10bfffc4 	addi	r2,r2,-1
   9142c:	123fe52e 	bgeu	r2,r8,913c4 <__pack_d+0x258>
   91430:	00c00044 	movi	r3,1
   91434:	003fe306 	br	913c4 <__pack_d+0x258>
   91438:	0009883a 	mov	r4,zero
   9143c:	0013883a 	mov	r9,zero
   91440:	000b883a 	mov	r5,zero
   91444:	003fe406 	br	913d8 <__pack_d+0x26c>
   91448:	4a47883a 	add	r3,r9,r9
   9144c:	008007c4 	movi	r2,31
   91450:	1105c83a 	sub	r2,r2,r4
   91454:	1886983a 	sll	r3,r3,r2
   91458:	4118d83a 	srl	r12,r8,r4
   9145c:	491ad83a 	srl	r13,r9,r4
   91460:	1b18b03a 	or	r12,r3,r12
   91464:	003fb506 	br	9133c <__pack_d+0x1d0>
   91468:	2806d07a 	srli	r3,r5,1
   9146c:	008007c4 	movi	r2,31
   91470:	1105c83a 	sub	r2,r2,r4
   91474:	1896d83a 	srl	r11,r3,r2
   91478:	2914983a 	sll	r10,r5,r4
   9147c:	003fb506 	br	91354 <__pack_d+0x1e8>

00091480 <__unpack_d>:
   91480:	20c00117 	ldw	r3,4(r4)
   91484:	22400017 	ldw	r9,0(r4)
   91488:	00800434 	movhi	r2,16
   9148c:	10bfffc4 	addi	r2,r2,-1
   91490:	1808d53a 	srli	r4,r3,20
   91494:	180cd7fa 	srli	r6,r3,31
   91498:	1894703a 	and	r10,r3,r2
   9149c:	2201ffcc 	andi	r8,r4,2047
   914a0:	281b883a 	mov	r13,r5
   914a4:	4817883a 	mov	r11,r9
   914a8:	29800115 	stw	r6,4(r5)
   914ac:	5019883a 	mov	r12,r10
   914b0:	40001e1e 	bne	r8,zero,9152c <__unpack_d+0xac>
   914b4:	4a84b03a 	or	r2,r9,r10
   914b8:	10001926 	beq	r2,zero,91520 <__unpack_d+0xa0>
   914bc:	4804d63a 	srli	r2,r9,24
   914c0:	500c923a 	slli	r6,r10,8
   914c4:	013f0084 	movi	r4,-1022
   914c8:	00c40034 	movhi	r3,4096
   914cc:	18ffffc4 	addi	r3,r3,-1
   914d0:	118cb03a 	or	r6,r2,r6
   914d4:	008000c4 	movi	r2,3
   914d8:	480a923a 	slli	r5,r9,8
   914dc:	68800015 	stw	r2,0(r13)
   914e0:	69000215 	stw	r4,8(r13)
   914e4:	19800b36 	bltu	r3,r6,91514 <__unpack_d+0x94>
   914e8:	200f883a 	mov	r7,r4
   914ec:	1811883a 	mov	r8,r3
   914f0:	2945883a 	add	r2,r5,r5
   914f4:	1149803a 	cmpltu	r4,r2,r5
   914f8:	3187883a 	add	r3,r6,r6
   914fc:	20c9883a 	add	r4,r4,r3
   91500:	100b883a 	mov	r5,r2
   91504:	200d883a 	mov	r6,r4
   91508:	39ffffc4 	addi	r7,r7,-1
   9150c:	413ff82e 	bgeu	r8,r4,914f0 <__unpack_d+0x70>
   91510:	69c00215 	stw	r7,8(r13)
   91514:	69800415 	stw	r6,16(r13)
   91518:	69400315 	stw	r5,12(r13)
   9151c:	f800283a 	ret
   91520:	00800084 	movi	r2,2
   91524:	28800015 	stw	r2,0(r5)
   91528:	f800283a 	ret
   9152c:	0081ffc4 	movi	r2,2047
   91530:	40800f26 	beq	r8,r2,91570 <__unpack_d+0xf0>
   91534:	480cd63a 	srli	r6,r9,24
   91538:	5006923a 	slli	r3,r10,8
   9153c:	4804923a 	slli	r2,r9,8
   91540:	0009883a 	mov	r4,zero
   91544:	30c6b03a 	or	r3,r6,r3
   91548:	01440034 	movhi	r5,4096
   9154c:	110cb03a 	or	r6,r2,r4
   91550:	423f0044 	addi	r8,r8,-1023
   91554:	194eb03a 	or	r7,r3,r5
   91558:	008000c4 	movi	r2,3
   9155c:	69c00415 	stw	r7,16(r13)
   91560:	6a000215 	stw	r8,8(r13)
   91564:	68800015 	stw	r2,0(r13)
   91568:	69800315 	stw	r6,12(r13)
   9156c:	f800283a 	ret
   91570:	4a84b03a 	or	r2,r9,r10
   91574:	1000031e 	bne	r2,zero,91584 <__unpack_d+0x104>
   91578:	00800104 	movi	r2,4
   9157c:	28800015 	stw	r2,0(r5)
   91580:	f800283a 	ret
   91584:	0009883a 	mov	r4,zero
   91588:	01400234 	movhi	r5,8
   9158c:	4904703a 	and	r2,r9,r4
   91590:	5146703a 	and	r3,r10,r5
   91594:	10c4b03a 	or	r2,r2,r3
   91598:	10000526 	beq	r2,zero,915b0 <__unpack_d+0x130>
   9159c:	00800044 	movi	r2,1
   915a0:	68800015 	stw	r2,0(r13)
   915a4:	6b000415 	stw	r12,16(r13)
   915a8:	6ac00315 	stw	r11,12(r13)
   915ac:	f800283a 	ret
   915b0:	68000015 	stw	zero,0(r13)
   915b4:	003ffb06 	br	915a4 <__unpack_d+0x124>

000915b8 <__fpcmp_parts_d>:
   915b8:	21800017 	ldw	r6,0(r4)
   915bc:	00c00044 	movi	r3,1
   915c0:	19800a2e 	bgeu	r3,r6,915ec <__fpcmp_parts_d+0x34>
   915c4:	28800017 	ldw	r2,0(r5)
   915c8:	1880082e 	bgeu	r3,r2,915ec <__fpcmp_parts_d+0x34>
   915cc:	00c00104 	movi	r3,4
   915d0:	30c02626 	beq	r6,r3,9166c <__fpcmp_parts_d+0xb4>
   915d4:	10c02226 	beq	r2,r3,91660 <__fpcmp_parts_d+0xa8>
   915d8:	00c00084 	movi	r3,2
   915dc:	30c00526 	beq	r6,r3,915f4 <__fpcmp_parts_d+0x3c>
   915e0:	10c0071e 	bne	r2,r3,91600 <__fpcmp_parts_d+0x48>
   915e4:	20800117 	ldw	r2,4(r4)
   915e8:	1000091e 	bne	r2,zero,91610 <__fpcmp_parts_d+0x58>
   915ec:	00800044 	movi	r2,1
   915f0:	f800283a 	ret
   915f4:	10c01a1e 	bne	r2,r3,91660 <__fpcmp_parts_d+0xa8>
   915f8:	0005883a 	mov	r2,zero
   915fc:	f800283a 	ret
   91600:	22000117 	ldw	r8,4(r4)
   91604:	28800117 	ldw	r2,4(r5)
   91608:	40800326 	beq	r8,r2,91618 <__fpcmp_parts_d+0x60>
   9160c:	403ff726 	beq	r8,zero,915ec <__fpcmp_parts_d+0x34>
   91610:	00bfffc4 	movi	r2,-1
   91614:	f800283a 	ret
   91618:	20c00217 	ldw	r3,8(r4)
   9161c:	28800217 	ldw	r2,8(r5)
   91620:	10fffa16 	blt	r2,r3,9160c <__fpcmp_parts_d+0x54>
   91624:	18800916 	blt	r3,r2,9164c <__fpcmp_parts_d+0x94>
   91628:	21c00417 	ldw	r7,16(r4)
   9162c:	28c00417 	ldw	r3,16(r5)
   91630:	21800317 	ldw	r6,12(r4)
   91634:	28800317 	ldw	r2,12(r5)
   91638:	19fff436 	bltu	r3,r7,9160c <__fpcmp_parts_d+0x54>
   9163c:	38c00526 	beq	r7,r3,91654 <__fpcmp_parts_d+0x9c>
   91640:	38c00236 	bltu	r7,r3,9164c <__fpcmp_parts_d+0x94>
   91644:	19ffec1e 	bne	r3,r7,915f8 <__fpcmp_parts_d+0x40>
   91648:	30bfeb2e 	bgeu	r6,r2,915f8 <__fpcmp_parts_d+0x40>
   9164c:	403fe71e 	bne	r8,zero,915ec <__fpcmp_parts_d+0x34>
   91650:	003fef06 	br	91610 <__fpcmp_parts_d+0x58>
   91654:	11bffa2e 	bgeu	r2,r6,91640 <__fpcmp_parts_d+0x88>
   91658:	403fe426 	beq	r8,zero,915ec <__fpcmp_parts_d+0x34>
   9165c:	003fec06 	br	91610 <__fpcmp_parts_d+0x58>
   91660:	28800117 	ldw	r2,4(r5)
   91664:	103fe11e 	bne	r2,zero,915ec <__fpcmp_parts_d+0x34>
   91668:	003fe906 	br	91610 <__fpcmp_parts_d+0x58>
   9166c:	11bfdd1e 	bne	r2,r6,915e4 <__fpcmp_parts_d+0x2c>
   91670:	28c00117 	ldw	r3,4(r5)
   91674:	20800117 	ldw	r2,4(r4)
   91678:	1885c83a 	sub	r2,r3,r2
   9167c:	f800283a 	ret

00091680 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   91680:	defff804 	addi	sp,sp,-32
   91684:	dfc00715 	stw	ra,28(sp)
   91688:	df000615 	stw	fp,24(sp)
   9168c:	df000604 	addi	fp,sp,24
   91690:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   91694:	e0bffc17 	ldw	r2,-16(fp)
   91698:	1004803a 	cmplt	r2,r2,zero
   9169c:	1000091e 	bne	r2,zero,916c4 <close+0x44>
   916a0:	e13ffc17 	ldw	r4,-16(fp)
   916a4:	01400304 	movi	r5,12
   916a8:	00877e40 	call	877e4 <__mulsi3>
   916ac:	1007883a 	mov	r3,r2
   916b0:	008002b4 	movhi	r2,10
   916b4:	10828c04 	addi	r2,r2,2608
   916b8:	1887883a 	add	r3,r3,r2
   916bc:	e0ffff15 	stw	r3,-4(fp)
   916c0:	00000106 	br	916c8 <close+0x48>
   916c4:	e03fff15 	stw	zero,-4(fp)
   916c8:	e0bfff17 	ldw	r2,-4(fp)
   916cc:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   916d0:	e0bffb17 	ldw	r2,-20(fp)
   916d4:	1005003a 	cmpeq	r2,r2,zero
   916d8:	10001d1e 	bne	r2,zero,91750 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   916dc:	e0bffb17 	ldw	r2,-20(fp)
   916e0:	10800017 	ldw	r2,0(r2)
   916e4:	10800417 	ldw	r2,16(r2)
   916e8:	1005003a 	cmpeq	r2,r2,zero
   916ec:	1000071e 	bne	r2,zero,9170c <close+0x8c>
   916f0:	e0bffb17 	ldw	r2,-20(fp)
   916f4:	10800017 	ldw	r2,0(r2)
   916f8:	10800417 	ldw	r2,16(r2)
   916fc:	e13ffb17 	ldw	r4,-20(fp)
   91700:	103ee83a 	callr	r2
   91704:	e0bffe15 	stw	r2,-8(fp)
   91708:	00000106 	br	91710 <close+0x90>
   9170c:	e03ffe15 	stw	zero,-8(fp)
   91710:	e0bffe17 	ldw	r2,-8(fp)
   91714:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   91718:	e13ffc17 	ldw	r4,-16(fp)
   9171c:	00920b40 	call	920b4 <alt_release_fd>
    if (rval < 0)
   91720:	e0bffa17 	ldw	r2,-24(fp)
   91724:	1004403a 	cmpge	r2,r2,zero
   91728:	1000071e 	bne	r2,zero,91748 <close+0xc8>
    {
      ALT_ERRNO = -rval;
   9172c:	00917800 	call	91780 <alt_get_errno>
   91730:	e0fffa17 	ldw	r3,-24(fp)
   91734:	00c7c83a 	sub	r3,zero,r3
   91738:	10c00015 	stw	r3,0(r2)
      return -1;
   9173c:	00bfffc4 	movi	r2,-1
   91740:	e0bffd15 	stw	r2,-12(fp)
   91744:	00000806 	br	91768 <close+0xe8>
    }
    return 0;
   91748:	e03ffd15 	stw	zero,-12(fp)
   9174c:	00000606 	br	91768 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   91750:	00917800 	call	91780 <alt_get_errno>
   91754:	1007883a 	mov	r3,r2
   91758:	00801444 	movi	r2,81
   9175c:	18800015 	stw	r2,0(r3)
    return -1;
   91760:	00bfffc4 	movi	r2,-1
   91764:	e0bffd15 	stw	r2,-12(fp)
   91768:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   9176c:	e037883a 	mov	sp,fp
   91770:	dfc00117 	ldw	ra,4(sp)
   91774:	df000017 	ldw	fp,0(sp)
   91778:	dec00204 	addi	sp,sp,8
   9177c:	f800283a 	ret

00091780 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   91780:	defffd04 	addi	sp,sp,-12
   91784:	dfc00215 	stw	ra,8(sp)
   91788:	df000115 	stw	fp,4(sp)
   9178c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   91790:	008002b4 	movhi	r2,10
   91794:	10872904 	addi	r2,r2,7332
   91798:	10800017 	ldw	r2,0(r2)
   9179c:	1005003a 	cmpeq	r2,r2,zero
   917a0:	1000061e 	bne	r2,zero,917bc <alt_get_errno+0x3c>
   917a4:	008002b4 	movhi	r2,10
   917a8:	10872904 	addi	r2,r2,7332
   917ac:	10800017 	ldw	r2,0(r2)
   917b0:	103ee83a 	callr	r2
   917b4:	e0bfff15 	stw	r2,-4(fp)
   917b8:	00000306 	br	917c8 <alt_get_errno+0x48>
   917bc:	008002b4 	movhi	r2,10
   917c0:	108e3b04 	addi	r2,r2,14572
   917c4:	e0bfff15 	stw	r2,-4(fp)
   917c8:	e0bfff17 	ldw	r2,-4(fp)
}
   917cc:	e037883a 	mov	sp,fp
   917d0:	dfc00117 	ldw	ra,4(sp)
   917d4:	df000017 	ldw	fp,0(sp)
   917d8:	dec00204 	addi	sp,sp,8
   917dc:	f800283a 	ret

000917e0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   917e0:	defffc04 	addi	sp,sp,-16
   917e4:	df000315 	stw	fp,12(sp)
   917e8:	df000304 	addi	fp,sp,12
   917ec:	e13ffd15 	stw	r4,-12(fp)
   917f0:	e17ffe15 	stw	r5,-8(fp)
   917f4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   917f8:	e0bfff17 	ldw	r2,-4(fp)
}
   917fc:	e037883a 	mov	sp,fp
   91800:	df000017 	ldw	fp,0(sp)
   91804:	dec00104 	addi	sp,sp,4
   91808:	f800283a 	ret

0009180c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   9180c:	defff904 	addi	sp,sp,-28
   91810:	dfc00615 	stw	ra,24(sp)
   91814:	df000515 	stw	fp,20(sp)
   91818:	df000504 	addi	fp,sp,20
   9181c:	e13ffc15 	stw	r4,-16(fp)
   91820:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   91824:	e0bffc17 	ldw	r2,-16(fp)
   91828:	1004803a 	cmplt	r2,r2,zero
   9182c:	1000091e 	bne	r2,zero,91854 <fstat+0x48>
   91830:	e13ffc17 	ldw	r4,-16(fp)
   91834:	01400304 	movi	r5,12
   91838:	00877e40 	call	877e4 <__mulsi3>
   9183c:	1007883a 	mov	r3,r2
   91840:	008002b4 	movhi	r2,10
   91844:	10828c04 	addi	r2,r2,2608
   91848:	1887883a 	add	r3,r3,r2
   9184c:	e0ffff15 	stw	r3,-4(fp)
   91850:	00000106 	br	91858 <fstat+0x4c>
   91854:	e03fff15 	stw	zero,-4(fp)
   91858:	e0bfff17 	ldw	r2,-4(fp)
   9185c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   91860:	e0bffb17 	ldw	r2,-20(fp)
   91864:	1005003a 	cmpeq	r2,r2,zero
   91868:	1000121e 	bne	r2,zero,918b4 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   9186c:	e0bffb17 	ldw	r2,-20(fp)
   91870:	10800017 	ldw	r2,0(r2)
   91874:	10800817 	ldw	r2,32(r2)
   91878:	1005003a 	cmpeq	r2,r2,zero
   9187c:	1000081e 	bne	r2,zero,918a0 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
   91880:	e0bffb17 	ldw	r2,-20(fp)
   91884:	10800017 	ldw	r2,0(r2)
   91888:	10800817 	ldw	r2,32(r2)
   9188c:	e13ffb17 	ldw	r4,-20(fp)
   91890:	e17ffd17 	ldw	r5,-12(fp)
   91894:	103ee83a 	callr	r2
   91898:	e0bffe15 	stw	r2,-8(fp)
   9189c:	00000b06 	br	918cc <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   918a0:	e0fffd17 	ldw	r3,-12(fp)
   918a4:	00880004 	movi	r2,8192
   918a8:	18800115 	stw	r2,4(r3)
      return 0;
   918ac:	e03ffe15 	stw	zero,-8(fp)
   918b0:	00000606 	br	918cc <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   918b4:	00918e40 	call	918e4 <alt_get_errno>
   918b8:	1007883a 	mov	r3,r2
   918bc:	00801444 	movi	r2,81
   918c0:	18800015 	stw	r2,0(r3)
    return -1;
   918c4:	00bfffc4 	movi	r2,-1
   918c8:	e0bffe15 	stw	r2,-8(fp)
   918cc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   918d0:	e037883a 	mov	sp,fp
   918d4:	dfc00117 	ldw	ra,4(sp)
   918d8:	df000017 	ldw	fp,0(sp)
   918dc:	dec00204 	addi	sp,sp,8
   918e0:	f800283a 	ret

000918e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   918e4:	defffd04 	addi	sp,sp,-12
   918e8:	dfc00215 	stw	ra,8(sp)
   918ec:	df000115 	stw	fp,4(sp)
   918f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   918f4:	008002b4 	movhi	r2,10
   918f8:	10872904 	addi	r2,r2,7332
   918fc:	10800017 	ldw	r2,0(r2)
   91900:	1005003a 	cmpeq	r2,r2,zero
   91904:	1000061e 	bne	r2,zero,91920 <alt_get_errno+0x3c>
   91908:	008002b4 	movhi	r2,10
   9190c:	10872904 	addi	r2,r2,7332
   91910:	10800017 	ldw	r2,0(r2)
   91914:	103ee83a 	callr	r2
   91918:	e0bfff15 	stw	r2,-4(fp)
   9191c:	00000306 	br	9192c <alt_get_errno+0x48>
   91920:	008002b4 	movhi	r2,10
   91924:	108e3b04 	addi	r2,r2,14572
   91928:	e0bfff15 	stw	r2,-4(fp)
   9192c:	e0bfff17 	ldw	r2,-4(fp)
}
   91930:	e037883a 	mov	sp,fp
   91934:	dfc00117 	ldw	ra,4(sp)
   91938:	df000017 	ldw	fp,0(sp)
   9193c:	dec00204 	addi	sp,sp,8
   91940:	f800283a 	ret

00091944 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   91944:	deffef04 	addi	sp,sp,-68
   91948:	df001015 	stw	fp,64(sp)
   9194c:	df001004 	addi	fp,sp,64
   91950:	e13ffc15 	stw	r4,-16(fp)
   91954:	e17ffd15 	stw	r5,-12(fp)
   91958:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
   9195c:	00bffa84 	movi	r2,-22
   91960:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   91964:	e0bffc17 	ldw	r2,-16(fp)
   91968:	10800828 	cmpgeui	r2,r2,32
   9196c:	1000601e 	bne	r2,zero,91af0 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91970:	0005303a 	rdctl	r2,status
   91974:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91978:	e0fff917 	ldw	r3,-28(fp)
   9197c:	00bfff84 	movi	r2,-2
   91980:	1884703a 	and	r2,r3,r2
   91984:	1001703a 	wrctl	status,r2
  
  return context;
   91988:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   9198c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
   91990:	e0bffc17 	ldw	r2,-16(fp)
   91994:	00c00334 	movhi	r3,12
   91998:	18e2ce04 	addi	r3,r3,-29896
   9199c:	100490fa 	slli	r2,r2,3
   919a0:	10c7883a 	add	r3,r2,r3
   919a4:	e0bffe17 	ldw	r2,-8(fp)
   919a8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
   919ac:	e0bffc17 	ldw	r2,-16(fp)
   919b0:	00c00334 	movhi	r3,12
   919b4:	18e2ce04 	addi	r3,r3,-29896
   919b8:	100490fa 	slli	r2,r2,3
   919bc:	10c5883a 	add	r2,r2,r3
   919c0:	10c00104 	addi	r3,r2,4
   919c4:	e0bffd17 	ldw	r2,-12(fp)
   919c8:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   919cc:	e0bffe17 	ldw	r2,-8(fp)
   919d0:	1005003a 	cmpeq	r2,r2,zero
   919d4:	1000201e 	bne	r2,zero,91a58 <alt_irq_register+0x114>
   919d8:	e0bffc17 	ldw	r2,-16(fp)
   919dc:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   919e0:	0005303a 	rdctl	r2,status
   919e4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   919e8:	e0fff617 	ldw	r3,-40(fp)
   919ec:	00bfff84 	movi	r2,-2
   919f0:	1884703a 	and	r2,r3,r2
   919f4:	1001703a 	wrctl	status,r2
  
  return context;
   919f8:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   919fc:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   91a00:	e0fff717 	ldw	r3,-36(fp)
   91a04:	00800044 	movi	r2,1
   91a08:	10c4983a 	sll	r2,r2,r3
   91a0c:	1007883a 	mov	r3,r2
   91a10:	008002b4 	movhi	r2,10
   91a14:	108e3d04 	addi	r2,r2,14580
   91a18:	10800017 	ldw	r2,0(r2)
   91a1c:	1886b03a 	or	r3,r3,r2
   91a20:	008002b4 	movhi	r2,10
   91a24:	108e3d04 	addi	r2,r2,14580
   91a28:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   91a2c:	008002b4 	movhi	r2,10
   91a30:	108e3d04 	addi	r2,r2,14580
   91a34:	10800017 	ldw	r2,0(r2)
   91a38:	100170fa 	wrctl	ienable,r2
   91a3c:	e0bff817 	ldw	r2,-32(fp)
   91a40:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91a44:	e0bff517 	ldw	r2,-44(fp)
   91a48:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   91a4c:	0005883a 	mov	r2,zero
   91a50:	e0bfff15 	stw	r2,-4(fp)
   91a54:	00002006 	br	91ad8 <alt_irq_register+0x194>
   91a58:	e0bffc17 	ldw	r2,-16(fp)
   91a5c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91a60:	0005303a 	rdctl	r2,status
   91a64:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91a68:	e0fff217 	ldw	r3,-56(fp)
   91a6c:	00bfff84 	movi	r2,-2
   91a70:	1884703a 	and	r2,r3,r2
   91a74:	1001703a 	wrctl	status,r2
  
  return context;
   91a78:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   91a7c:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
   91a80:	e0fff317 	ldw	r3,-52(fp)
   91a84:	00800044 	movi	r2,1
   91a88:	10c4983a 	sll	r2,r2,r3
   91a8c:	0084303a 	nor	r2,zero,r2
   91a90:	1007883a 	mov	r3,r2
   91a94:	008002b4 	movhi	r2,10
   91a98:	108e3d04 	addi	r2,r2,14580
   91a9c:	10800017 	ldw	r2,0(r2)
   91aa0:	1886703a 	and	r3,r3,r2
   91aa4:	008002b4 	movhi	r2,10
   91aa8:	108e3d04 	addi	r2,r2,14580
   91aac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   91ab0:	008002b4 	movhi	r2,10
   91ab4:	108e3d04 	addi	r2,r2,14580
   91ab8:	10800017 	ldw	r2,0(r2)
   91abc:	100170fa 	wrctl	ienable,r2
   91ac0:	e0bff417 	ldw	r2,-48(fp)
   91ac4:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91ac8:	e0bff117 	ldw	r2,-60(fp)
   91acc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   91ad0:	0005883a 	mov	r2,zero
   91ad4:	e0bfff15 	stw	r2,-4(fp)
   91ad8:	e0bfff17 	ldw	r2,-4(fp)
   91adc:	e0bffb15 	stw	r2,-20(fp)
   91ae0:	e0bffa17 	ldw	r2,-24(fp)
   91ae4:	e0bff015 	stw	r2,-64(fp)
   91ae8:	e0bff017 	ldw	r2,-64(fp)
   91aec:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   91af0:	e0bffb17 	ldw	r2,-20(fp)
}
   91af4:	e037883a 	mov	sp,fp
   91af8:	df000017 	ldw	fp,0(sp)
   91afc:	dec00104 	addi	sp,sp,4
   91b00:	f800283a 	ret

00091b04 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   91b04:	deffeb04 	addi	sp,sp,-84
   91b08:	dfc01415 	stw	ra,80(sp)
   91b0c:	df001315 	stw	fp,76(sp)
   91b10:	df001304 	addi	fp,sp,76
   91b14:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   91b18:	e0bffd17 	ldw	r2,-12(fp)
   91b1c:	1004803a 	cmplt	r2,r2,zero
   91b20:	1000091e 	bne	r2,zero,91b48 <isatty+0x44>
   91b24:	e13ffd17 	ldw	r4,-12(fp)
   91b28:	01400304 	movi	r5,12
   91b2c:	00877e40 	call	877e4 <__mulsi3>
   91b30:	1007883a 	mov	r3,r2
   91b34:	008002b4 	movhi	r2,10
   91b38:	10828c04 	addi	r2,r2,2608
   91b3c:	1887883a 	add	r3,r3,r2
   91b40:	e0ffff15 	stw	r3,-4(fp)
   91b44:	00000106 	br	91b4c <isatty+0x48>
   91b48:	e03fff15 	stw	zero,-4(fp)
   91b4c:	e0bfff17 	ldw	r2,-4(fp)
   91b50:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   91b54:	e0bfed17 	ldw	r2,-76(fp)
   91b58:	1005003a 	cmpeq	r2,r2,zero
   91b5c:	10000f1e 	bne	r2,zero,91b9c <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   91b60:	e0bfed17 	ldw	r2,-76(fp)
   91b64:	10800017 	ldw	r2,0(r2)
   91b68:	10800817 	ldw	r2,32(r2)
   91b6c:	1004c03a 	cmpne	r2,r2,zero
   91b70:	1000031e 	bne	r2,zero,91b80 <isatty+0x7c>
    {
      return 1;
   91b74:	00800044 	movi	r2,1
   91b78:	e0bffe15 	stw	r2,-8(fp)
   91b7c:	00000c06 	br	91bb0 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   91b80:	e17fee04 	addi	r5,fp,-72
   91b84:	e13ffd17 	ldw	r4,-12(fp)
   91b88:	009180c0 	call	9180c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   91b8c:	e0bfef17 	ldw	r2,-68(fp)
   91b90:	10880020 	cmpeqi	r2,r2,8192
   91b94:	e0bffe15 	stw	r2,-8(fp)
   91b98:	00000506 	br	91bb0 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   91b9c:	0091bc80 	call	91bc8 <alt_get_errno>
   91ba0:	1007883a 	mov	r3,r2
   91ba4:	00801444 	movi	r2,81
   91ba8:	18800015 	stw	r2,0(r3)
    return 0;
   91bac:	e03ffe15 	stw	zero,-8(fp)
   91bb0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   91bb4:	e037883a 	mov	sp,fp
   91bb8:	dfc00117 	ldw	ra,4(sp)
   91bbc:	df000017 	ldw	fp,0(sp)
   91bc0:	dec00204 	addi	sp,sp,8
   91bc4:	f800283a 	ret

00091bc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   91bc8:	defffd04 	addi	sp,sp,-12
   91bcc:	dfc00215 	stw	ra,8(sp)
   91bd0:	df000115 	stw	fp,4(sp)
   91bd4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   91bd8:	008002b4 	movhi	r2,10
   91bdc:	10872904 	addi	r2,r2,7332
   91be0:	10800017 	ldw	r2,0(r2)
   91be4:	1005003a 	cmpeq	r2,r2,zero
   91be8:	1000061e 	bne	r2,zero,91c04 <alt_get_errno+0x3c>
   91bec:	008002b4 	movhi	r2,10
   91bf0:	10872904 	addi	r2,r2,7332
   91bf4:	10800017 	ldw	r2,0(r2)
   91bf8:	103ee83a 	callr	r2
   91bfc:	e0bfff15 	stw	r2,-4(fp)
   91c00:	00000306 	br	91c10 <alt_get_errno+0x48>
   91c04:	008002b4 	movhi	r2,10
   91c08:	108e3b04 	addi	r2,r2,14572
   91c0c:	e0bfff15 	stw	r2,-4(fp)
   91c10:	e0bfff17 	ldw	r2,-4(fp)
}
   91c14:	e037883a 	mov	sp,fp
   91c18:	dfc00117 	ldw	ra,4(sp)
   91c1c:	df000017 	ldw	fp,0(sp)
   91c20:	dec00204 	addi	sp,sp,8
   91c24:	f800283a 	ret

00091c28 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   91c28:	defffe04 	addi	sp,sp,-8
   91c2c:	dfc00115 	stw	ra,4(sp)
   91c30:	df000015 	stw	fp,0(sp)
   91c34:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   91c38:	010002b4 	movhi	r4,10
   91c3c:	21074d04 	addi	r4,r4,7476
   91c40:	014002b4 	movhi	r5,10
   91c44:	29407d04 	addi	r5,r5,500
   91c48:	018002b4 	movhi	r6,10
   91c4c:	31874d04 	addi	r6,r6,7476
   91c50:	0091ca80 	call	91ca8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   91c54:	01000234 	movhi	r4,8
   91c58:	21000804 	addi	r4,r4,32
   91c5c:	01400234 	movhi	r5,8
   91c60:	29400804 	addi	r5,r5,32
   91c64:	01800234 	movhi	r6,8
   91c68:	31806f04 	addi	r6,r6,444
   91c6c:	0091ca80 	call	91ca8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   91c70:	010002b4 	movhi	r4,10
   91c74:	213d9204 	addi	r4,r4,-2488
   91c78:	014002b4 	movhi	r5,10
   91c7c:	297d9204 	addi	r5,r5,-2488
   91c80:	018002b4 	movhi	r6,10
   91c84:	31807d04 	addi	r6,r6,500
   91c88:	0091ca80 	call	91ca8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   91c8c:	009df480 	call	9df48 <alt_dcache_flush_all>
  alt_icache_flush_all();
   91c90:	009e1d40 	call	9e1d4 <alt_icache_flush_all>
}
   91c94:	e037883a 	mov	sp,fp
   91c98:	dfc00117 	ldw	ra,4(sp)
   91c9c:	df000017 	ldw	fp,0(sp)
   91ca0:	dec00204 	addi	sp,sp,8
   91ca4:	f800283a 	ret

00091ca8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   91ca8:	defffc04 	addi	sp,sp,-16
   91cac:	df000315 	stw	fp,12(sp)
   91cb0:	df000304 	addi	fp,sp,12
   91cb4:	e13ffd15 	stw	r4,-12(fp)
   91cb8:	e17ffe15 	stw	r5,-8(fp)
   91cbc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   91cc0:	e0fffe17 	ldw	r3,-8(fp)
   91cc4:	e0bffd17 	ldw	r2,-12(fp)
   91cc8:	18800e26 	beq	r3,r2,91d04 <alt_load_section+0x5c>
  {
    while( to != end )
   91ccc:	00000a06 	br	91cf8 <alt_load_section+0x50>
    {
      *to++ = *from++;
   91cd0:	e0bffd17 	ldw	r2,-12(fp)
   91cd4:	10c00017 	ldw	r3,0(r2)
   91cd8:	e0bffe17 	ldw	r2,-8(fp)
   91cdc:	10c00015 	stw	r3,0(r2)
   91ce0:	e0bffe17 	ldw	r2,-8(fp)
   91ce4:	10800104 	addi	r2,r2,4
   91ce8:	e0bffe15 	stw	r2,-8(fp)
   91cec:	e0bffd17 	ldw	r2,-12(fp)
   91cf0:	10800104 	addi	r2,r2,4
   91cf4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   91cf8:	e0fffe17 	ldw	r3,-8(fp)
   91cfc:	e0bfff17 	ldw	r2,-4(fp)
   91d00:	18bff31e 	bne	r3,r2,91cd0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   91d04:	e037883a 	mov	sp,fp
   91d08:	df000017 	ldw	fp,0(sp)
   91d0c:	dec00104 	addi	sp,sp,4
   91d10:	f800283a 	ret

00091d14 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   91d14:	defff804 	addi	sp,sp,-32
   91d18:	dfc00715 	stw	ra,28(sp)
   91d1c:	df000615 	stw	fp,24(sp)
   91d20:	df000604 	addi	fp,sp,24
   91d24:	e13ffc15 	stw	r4,-16(fp)
   91d28:	e17ffd15 	stw	r5,-12(fp)
   91d2c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   91d30:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   91d34:	e0bffc17 	ldw	r2,-16(fp)
   91d38:	1004803a 	cmplt	r2,r2,zero
   91d3c:	1000091e 	bne	r2,zero,91d64 <lseek+0x50>
   91d40:	e13ffc17 	ldw	r4,-16(fp)
   91d44:	01400304 	movi	r5,12
   91d48:	00877e40 	call	877e4 <__mulsi3>
   91d4c:	1007883a 	mov	r3,r2
   91d50:	008002b4 	movhi	r2,10
   91d54:	10828c04 	addi	r2,r2,2608
   91d58:	1887883a 	add	r3,r3,r2
   91d5c:	e0ffff15 	stw	r3,-4(fp)
   91d60:	00000106 	br	91d68 <lseek+0x54>
   91d64:	e03fff15 	stw	zero,-4(fp)
   91d68:	e0bfff17 	ldw	r2,-4(fp)
   91d6c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   91d70:	e0bffb17 	ldw	r2,-20(fp)
   91d74:	1005003a 	cmpeq	r2,r2,zero
   91d78:	1000111e 	bne	r2,zero,91dc0 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   91d7c:	e0bffb17 	ldw	r2,-20(fp)
   91d80:	10800017 	ldw	r2,0(r2)
   91d84:	10800717 	ldw	r2,28(r2)
   91d88:	1005003a 	cmpeq	r2,r2,zero
   91d8c:	1000091e 	bne	r2,zero,91db4 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   91d90:	e0bffb17 	ldw	r2,-20(fp)
   91d94:	10800017 	ldw	r2,0(r2)
   91d98:	10800717 	ldw	r2,28(r2)
   91d9c:	e13ffb17 	ldw	r4,-20(fp)
   91da0:	e17ffd17 	ldw	r5,-12(fp)
   91da4:	e1bffe17 	ldw	r6,-8(fp)
   91da8:	103ee83a 	callr	r2
   91dac:	e0bffa15 	stw	r2,-24(fp)
   91db0:	00000506 	br	91dc8 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   91db4:	00bfde84 	movi	r2,-134
   91db8:	e0bffa15 	stw	r2,-24(fp)
   91dbc:	00000206 	br	91dc8 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
   91dc0:	00bfebc4 	movi	r2,-81
   91dc4:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   91dc8:	e0bffa17 	ldw	r2,-24(fp)
   91dcc:	1004403a 	cmpge	r2,r2,zero
   91dd0:	1000071e 	bne	r2,zero,91df0 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
   91dd4:	0091e080 	call	91e08 <alt_get_errno>
   91dd8:	1007883a 	mov	r3,r2
   91ddc:	e0bffa17 	ldw	r2,-24(fp)
   91de0:	0085c83a 	sub	r2,zero,r2
   91de4:	18800015 	stw	r2,0(r3)
    rc = -1;
   91de8:	00bfffc4 	movi	r2,-1
   91dec:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   91df0:	e0bffa17 	ldw	r2,-24(fp)
}
   91df4:	e037883a 	mov	sp,fp
   91df8:	dfc00117 	ldw	ra,4(sp)
   91dfc:	df000017 	ldw	fp,0(sp)
   91e00:	dec00204 	addi	sp,sp,8
   91e04:	f800283a 	ret

00091e08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   91e08:	defffd04 	addi	sp,sp,-12
   91e0c:	dfc00215 	stw	ra,8(sp)
   91e10:	df000115 	stw	fp,4(sp)
   91e14:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   91e18:	008002b4 	movhi	r2,10
   91e1c:	10872904 	addi	r2,r2,7332
   91e20:	10800017 	ldw	r2,0(r2)
   91e24:	1005003a 	cmpeq	r2,r2,zero
   91e28:	1000061e 	bne	r2,zero,91e44 <alt_get_errno+0x3c>
   91e2c:	008002b4 	movhi	r2,10
   91e30:	10872904 	addi	r2,r2,7332
   91e34:	10800017 	ldw	r2,0(r2)
   91e38:	103ee83a 	callr	r2
   91e3c:	e0bfff15 	stw	r2,-4(fp)
   91e40:	00000306 	br	91e50 <alt_get_errno+0x48>
   91e44:	008002b4 	movhi	r2,10
   91e48:	108e3b04 	addi	r2,r2,14572
   91e4c:	e0bfff15 	stw	r2,-4(fp)
   91e50:	e0bfff17 	ldw	r2,-4(fp)
}
   91e54:	e037883a 	mov	sp,fp
   91e58:	dfc00117 	ldw	ra,4(sp)
   91e5c:	df000017 	ldw	fp,0(sp)
   91e60:	dec00204 	addi	sp,sp,8
   91e64:	f800283a 	ret

00091e68 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   91e68:	defffb04 	addi	sp,sp,-20
   91e6c:	dfc00415 	stw	ra,16(sp)
   91e70:	df000315 	stw	fp,12(sp)
   91e74:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   91e78:	0009883a 	mov	r4,zero
   91e7c:	009c96c0 	call	9c96c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   91e80:	0092f740 	call	92f74 <OSInit>
   91e84:	01000044 	movi	r4,1
   91e88:	0099e700 	call	99e70 <OSSemCreate>
   91e8c:	1007883a 	mov	r3,r2
   91e90:	008002b4 	movhi	r2,10
   91e94:	108e4204 	addi	r2,r2,14600
   91e98:	10c00015 	stw	r3,0(r2)
   91e9c:	01000044 	movi	r4,1
   91ea0:	0099e700 	call	99e70 <OSSemCreate>
   91ea4:	1007883a 	mov	r3,r2
   91ea8:	008002b4 	movhi	r2,10
   91eac:	108e4404 	addi	r2,r2,14608
   91eb0:	10c00015 	stw	r3,0(r2)
   91eb4:	008002b4 	movhi	r2,10
   91eb8:	108e3c04 	addi	r2,r2,14576
   91ebc:	e0bffd15 	stw	r2,-12(fp)
   91ec0:	00800044 	movi	r2,1
   91ec4:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   91ec8:	e13ffe0b 	ldhu	r4,-8(fp)
   91ecc:	0099e700 	call	99e70 <OSSemCreate>
   91ed0:	1007883a 	mov	r3,r2
   91ed4:	e0bffd17 	ldw	r2,-12(fp)
   91ed8:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   91edc:	009c9a00 	call	9c9a0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   91ee0:	010002b4 	movhi	r4,10
   91ee4:	21002004 	addi	r4,r4,128
   91ee8:	014002b4 	movhi	r5,10
   91eec:	29402004 	addi	r5,r5,128
   91ef0:	018002b4 	movhi	r6,10
   91ef4:	31802004 	addi	r6,r6,128
   91ef8:	009e5940 	call	9e594 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   91efc:	009e0780 	call	9e078 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   91f00:	010002b4 	movhi	r4,10
   91f04:	21383704 	addi	r4,r4,-7972
   91f08:	009f1c40 	call	9f1c4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   91f0c:	d1272117 	ldw	r4,-25468(gp)
   91f10:	d1672217 	ldw	r5,-25464(gp)
   91f14:	d1a72317 	ldw	r6,-25460(gp)
   91f18:	00849b40 	call	849b4 <main>
   91f1c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   91f20:	01000044 	movi	r4,1
   91f24:	00916800 	call	91680 <close>
  exit (result);
   91f28:	e13fff17 	ldw	r4,-4(fp)
   91f2c:	009f1d80 	call	9f1d8 <exit>

00091f30 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   91f30:	defff704 	addi	sp,sp,-36
   91f34:	dfc00815 	stw	ra,32(sp)
   91f38:	df000715 	stw	fp,28(sp)
   91f3c:	df000704 	addi	fp,sp,28
   91f40:	e13ffb15 	stw	r4,-20(fp)
   91f44:	e17ffc15 	stw	r5,-16(fp)
   91f48:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   91f4c:	e0bffb17 	ldw	r2,-20(fp)
   91f50:	1004803a 	cmplt	r2,r2,zero
   91f54:	1000091e 	bne	r2,zero,91f7c <read+0x4c>
   91f58:	e13ffb17 	ldw	r4,-20(fp)
   91f5c:	01400304 	movi	r5,12
   91f60:	00877e40 	call	877e4 <__mulsi3>
   91f64:	1007883a 	mov	r3,r2
   91f68:	008002b4 	movhi	r2,10
   91f6c:	10828c04 	addi	r2,r2,2608
   91f70:	1887883a 	add	r3,r3,r2
   91f74:	e0ffff15 	stw	r3,-4(fp)
   91f78:	00000106 	br	91f80 <read+0x50>
   91f7c:	e03fff15 	stw	zero,-4(fp)
   91f80:	e0bfff17 	ldw	r2,-4(fp)
   91f84:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   91f88:	e0bffa17 	ldw	r2,-24(fp)
   91f8c:	1005003a 	cmpeq	r2,r2,zero
   91f90:	1000241e 	bne	r2,zero,92024 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   91f94:	e0bffa17 	ldw	r2,-24(fp)
   91f98:	10800217 	ldw	r2,8(r2)
   91f9c:	108000cc 	andi	r2,r2,3
   91fa0:	10800060 	cmpeqi	r2,r2,1
   91fa4:	10001a1e 	bne	r2,zero,92010 <read+0xe0>
   91fa8:	e0bffa17 	ldw	r2,-24(fp)
   91fac:	10800017 	ldw	r2,0(r2)
   91fb0:	10800517 	ldw	r2,20(r2)
   91fb4:	1005003a 	cmpeq	r2,r2,zero
   91fb8:	1000151e 	bne	r2,zero,92010 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   91fbc:	e0bffa17 	ldw	r2,-24(fp)
   91fc0:	10800017 	ldw	r2,0(r2)
   91fc4:	10800517 	ldw	r2,20(r2)
   91fc8:	e17ffc17 	ldw	r5,-16(fp)
   91fcc:	e1bffd17 	ldw	r6,-12(fp)
   91fd0:	e13ffa17 	ldw	r4,-24(fp)
   91fd4:	103ee83a 	callr	r2
   91fd8:	e0bff915 	stw	r2,-28(fp)
   91fdc:	e0bff917 	ldw	r2,-28(fp)
   91fe0:	1004403a 	cmpge	r2,r2,zero
   91fe4:	1000071e 	bne	r2,zero,92004 <read+0xd4>
        {
          ALT_ERRNO = -rval;
   91fe8:	00920540 	call	92054 <alt_get_errno>
   91fec:	e0fff917 	ldw	r3,-28(fp)
   91ff0:	00c7c83a 	sub	r3,zero,r3
   91ff4:	10c00015 	stw	r3,0(r2)
          return -1;
   91ff8:	00bfffc4 	movi	r2,-1
   91ffc:	e0bffe15 	stw	r2,-8(fp)
   92000:	00000e06 	br	9203c <read+0x10c>
        }
        return rval;
   92004:	e0bff917 	ldw	r2,-28(fp)
   92008:	e0bffe15 	stw	r2,-8(fp)
   9200c:	00000b06 	br	9203c <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
   92010:	00920540 	call	92054 <alt_get_errno>
   92014:	1007883a 	mov	r3,r2
   92018:	00800344 	movi	r2,13
   9201c:	18800015 	stw	r2,0(r3)
   92020:	00000406 	br	92034 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   92024:	00920540 	call	92054 <alt_get_errno>
   92028:	1007883a 	mov	r3,r2
   9202c:	00801444 	movi	r2,81
   92030:	18800015 	stw	r2,0(r3)
  }
  return -1;
   92034:	00bfffc4 	movi	r2,-1
   92038:	e0bffe15 	stw	r2,-8(fp)
   9203c:	e0bffe17 	ldw	r2,-8(fp)
}
   92040:	e037883a 	mov	sp,fp
   92044:	dfc00117 	ldw	ra,4(sp)
   92048:	df000017 	ldw	fp,0(sp)
   9204c:	dec00204 	addi	sp,sp,8
   92050:	f800283a 	ret

00092054 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   92054:	defffd04 	addi	sp,sp,-12
   92058:	dfc00215 	stw	ra,8(sp)
   9205c:	df000115 	stw	fp,4(sp)
   92060:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   92064:	008002b4 	movhi	r2,10
   92068:	10872904 	addi	r2,r2,7332
   9206c:	10800017 	ldw	r2,0(r2)
   92070:	1005003a 	cmpeq	r2,r2,zero
   92074:	1000061e 	bne	r2,zero,92090 <alt_get_errno+0x3c>
   92078:	008002b4 	movhi	r2,10
   9207c:	10872904 	addi	r2,r2,7332
   92080:	10800017 	ldw	r2,0(r2)
   92084:	103ee83a 	callr	r2
   92088:	e0bfff15 	stw	r2,-4(fp)
   9208c:	00000306 	br	9209c <alt_get_errno+0x48>
   92090:	008002b4 	movhi	r2,10
   92094:	108e3b04 	addi	r2,r2,14572
   92098:	e0bfff15 	stw	r2,-4(fp)
   9209c:	e0bfff17 	ldw	r2,-4(fp)
}
   920a0:	e037883a 	mov	sp,fp
   920a4:	dfc00117 	ldw	ra,4(sp)
   920a8:	df000017 	ldw	fp,0(sp)
   920ac:	dec00204 	addi	sp,sp,8
   920b0:	f800283a 	ret

000920b4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   920b4:	defffc04 	addi	sp,sp,-16
   920b8:	dfc00315 	stw	ra,12(sp)
   920bc:	df000215 	stw	fp,8(sp)
   920c0:	dc000115 	stw	r16,4(sp)
   920c4:	df000104 	addi	fp,sp,4
   920c8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   920cc:	e0bfff17 	ldw	r2,-4(fp)
   920d0:	108000d0 	cmplti	r2,r2,3
   920d4:	10000f1e 	bne	r2,zero,92114 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   920d8:	e13fff17 	ldw	r4,-4(fp)
   920dc:	040002b4 	movhi	r16,10
   920e0:	84028c04 	addi	r16,r16,2608
   920e4:	01400304 	movi	r5,12
   920e8:	00877e40 	call	877e4 <__mulsi3>
   920ec:	1405883a 	add	r2,r2,r16
   920f0:	10800204 	addi	r2,r2,8
   920f4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   920f8:	e13fff17 	ldw	r4,-4(fp)
   920fc:	040002b4 	movhi	r16,10
   92100:	84028c04 	addi	r16,r16,2608
   92104:	01400304 	movi	r5,12
   92108:	00877e40 	call	877e4 <__mulsi3>
   9210c:	1405883a 	add	r2,r2,r16
   92110:	10000015 	stw	zero,0(r2)
  }
}
   92114:	e037883a 	mov	sp,fp
   92118:	dfc00217 	ldw	ra,8(sp)
   9211c:	df000117 	ldw	fp,4(sp)
   92120:	dc000017 	ldw	r16,0(sp)
   92124:	dec00304 	addi	sp,sp,12
   92128:	f800283a 	ret

0009212c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   9212c:	defff804 	addi	sp,sp,-32
   92130:	df000715 	stw	fp,28(sp)
   92134:	df000704 	addi	fp,sp,28
   92138:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9213c:	0005303a 	rdctl	r2,status
   92140:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92144:	e0fffb17 	ldw	r3,-20(fp)
   92148:	00bfff84 	movi	r2,-2
   9214c:	1884703a 	and	r2,r3,r2
   92150:	1001703a 	wrctl	status,r2
  
  return context;
   92154:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   92158:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   9215c:	d0a00e17 	ldw	r2,-32712(gp)
   92160:	10c000c4 	addi	r3,r2,3
   92164:	00bfff04 	movi	r2,-4
   92168:	1884703a 	and	r2,r3,r2
   9216c:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   92170:	d0e00e17 	ldw	r3,-32712(gp)
   92174:	e0bffe17 	ldw	r2,-8(fp)
   92178:	1887883a 	add	r3,r3,r2
   9217c:	00800434 	movhi	r2,16
   92180:	10800004 	addi	r2,r2,0
   92184:	10c0072e 	bgeu	r2,r3,921a4 <sbrk+0x78>
   92188:	e0bffd17 	ldw	r2,-12(fp)
   9218c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92190:	e0bffa17 	ldw	r2,-24(fp)
   92194:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   92198:	00bfffc4 	movi	r2,-1
   9219c:	e0bfff15 	stw	r2,-4(fp)
   921a0:	00000c06 	br	921d4 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   921a4:	d0a00e17 	ldw	r2,-32712(gp)
   921a8:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   921ac:	d0e00e17 	ldw	r3,-32712(gp)
   921b0:	e0bffe17 	ldw	r2,-8(fp)
   921b4:	1885883a 	add	r2,r3,r2
   921b8:	d0a00e15 	stw	r2,-32712(gp)
   921bc:	e0bffd17 	ldw	r2,-12(fp)
   921c0:	e0bff915 	stw	r2,-28(fp)
   921c4:	e0bff917 	ldw	r2,-28(fp)
   921c8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   921cc:	e0bffc17 	ldw	r2,-16(fp)
   921d0:	e0bfff15 	stw	r2,-4(fp)
   921d4:	e0bfff17 	ldw	r2,-4(fp)
} 
   921d8:	e037883a 	mov	sp,fp
   921dc:	df000017 	ldw	fp,0(sp)
   921e0:	dec00104 	addi	sp,sp,4
   921e4:	f800283a 	ret

000921e8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   921e8:	defff704 	addi	sp,sp,-36
   921ec:	dfc00815 	stw	ra,32(sp)
   921f0:	df000715 	stw	fp,28(sp)
   921f4:	df000704 	addi	fp,sp,28
   921f8:	e13ffb15 	stw	r4,-20(fp)
   921fc:	e17ffc15 	stw	r5,-16(fp)
   92200:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   92204:	e0bffb17 	ldw	r2,-20(fp)
   92208:	1004803a 	cmplt	r2,r2,zero
   9220c:	1000091e 	bne	r2,zero,92234 <write+0x4c>
   92210:	e13ffb17 	ldw	r4,-20(fp)
   92214:	01400304 	movi	r5,12
   92218:	00877e40 	call	877e4 <__mulsi3>
   9221c:	1007883a 	mov	r3,r2
   92220:	008002b4 	movhi	r2,10
   92224:	10828c04 	addi	r2,r2,2608
   92228:	1887883a 	add	r3,r3,r2
   9222c:	e0ffff15 	stw	r3,-4(fp)
   92230:	00000106 	br	92238 <write+0x50>
   92234:	e03fff15 	stw	zero,-4(fp)
   92238:	e0bfff17 	ldw	r2,-4(fp)
   9223c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   92240:	e0bffa17 	ldw	r2,-24(fp)
   92244:	1005003a 	cmpeq	r2,r2,zero
   92248:	1000241e 	bne	r2,zero,922dc <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   9224c:	e0bffa17 	ldw	r2,-24(fp)
   92250:	10800217 	ldw	r2,8(r2)
   92254:	108000cc 	andi	r2,r2,3
   92258:	1005003a 	cmpeq	r2,r2,zero
   9225c:	10001a1e 	bne	r2,zero,922c8 <write+0xe0>
   92260:	e0bffa17 	ldw	r2,-24(fp)
   92264:	10800017 	ldw	r2,0(r2)
   92268:	10800617 	ldw	r2,24(r2)
   9226c:	1005003a 	cmpeq	r2,r2,zero
   92270:	1000151e 	bne	r2,zero,922c8 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   92274:	e0bffa17 	ldw	r2,-24(fp)
   92278:	10800017 	ldw	r2,0(r2)
   9227c:	10800617 	ldw	r2,24(r2)
   92280:	e17ffc17 	ldw	r5,-16(fp)
   92284:	e1bffd17 	ldw	r6,-12(fp)
   92288:	e13ffa17 	ldw	r4,-24(fp)
   9228c:	103ee83a 	callr	r2
   92290:	e0bff915 	stw	r2,-28(fp)
   92294:	e0bff917 	ldw	r2,-28(fp)
   92298:	1004403a 	cmpge	r2,r2,zero
   9229c:	1000071e 	bne	r2,zero,922bc <write+0xd4>
      {
        ALT_ERRNO = -rval;
   922a0:	009230c0 	call	9230c <alt_get_errno>
   922a4:	e0fff917 	ldw	r3,-28(fp)
   922a8:	00c7c83a 	sub	r3,zero,r3
   922ac:	10c00015 	stw	r3,0(r2)
        return -1;
   922b0:	00bfffc4 	movi	r2,-1
   922b4:	e0bffe15 	stw	r2,-8(fp)
   922b8:	00000e06 	br	922f4 <write+0x10c>
      }
      return rval;
   922bc:	e0bff917 	ldw	r2,-28(fp)
   922c0:	e0bffe15 	stw	r2,-8(fp)
   922c4:	00000b06 	br	922f4 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
   922c8:	009230c0 	call	9230c <alt_get_errno>
   922cc:	1007883a 	mov	r3,r2
   922d0:	00800344 	movi	r2,13
   922d4:	18800015 	stw	r2,0(r3)
   922d8:	00000406 	br	922ec <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   922dc:	009230c0 	call	9230c <alt_get_errno>
   922e0:	1007883a 	mov	r3,r2
   922e4:	00801444 	movi	r2,81
   922e8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   922ec:	00bfffc4 	movi	r2,-1
   922f0:	e0bffe15 	stw	r2,-8(fp)
   922f4:	e0bffe17 	ldw	r2,-8(fp)
}
   922f8:	e037883a 	mov	sp,fp
   922fc:	dfc00117 	ldw	ra,4(sp)
   92300:	df000017 	ldw	fp,0(sp)
   92304:	dec00204 	addi	sp,sp,8
   92308:	f800283a 	ret

0009230c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   9230c:	defffd04 	addi	sp,sp,-12
   92310:	dfc00215 	stw	ra,8(sp)
   92314:	df000115 	stw	fp,4(sp)
   92318:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   9231c:	008002b4 	movhi	r2,10
   92320:	10872904 	addi	r2,r2,7332
   92324:	10800017 	ldw	r2,0(r2)
   92328:	1005003a 	cmpeq	r2,r2,zero
   9232c:	1000061e 	bne	r2,zero,92348 <alt_get_errno+0x3c>
   92330:	008002b4 	movhi	r2,10
   92334:	10872904 	addi	r2,r2,7332
   92338:	10800017 	ldw	r2,0(r2)
   9233c:	103ee83a 	callr	r2
   92340:	e0bfff15 	stw	r2,-4(fp)
   92344:	00000306 	br	92354 <alt_get_errno+0x48>
   92348:	008002b4 	movhi	r2,10
   9234c:	108e3b04 	addi	r2,r2,14572
   92350:	e0bfff15 	stw	r2,-4(fp)
   92354:	e0bfff17 	ldw	r2,-4(fp)
}
   92358:	e037883a 	mov	sp,fp
   9235c:	dfc00117 	ldw	ra,4(sp)
   92360:	df000017 	ldw	fp,0(sp)
   92364:	dec00204 	addi	sp,sp,8
   92368:	f800283a 	ret

0009236c <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   9236c:	deffdf04 	addi	sp,sp,-132
   92370:	dfc02015 	stw	ra,128(sp)
   92374:	df001f15 	stw	fp,124(sp)
   92378:	df001f04 	addi	fp,sp,124
   9237c:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   92380:	e17fe204 	addi	r5,fp,-120
   92384:	01003fc4 	movi	r4,255
   92388:	009c1f80 	call	9c1f8 <OSTaskQuery>
   9238c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   92390:	e0bffe83 	ldbu	r2,-6(fp)
   92394:	10803fcc 	andi	r2,r2,255
   92398:	1004c03a 	cmpne	r2,r2,zero
   9239c:	1000191e 	bne	r2,zero,92404 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
   923a0:	e0bfee83 	ldbu	r2,-70(fp)
   923a4:	10803fcc 	andi	r2,r2,255
   923a8:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   923ac:	d1272517 	ldw	r4,-25452(gp)
   923b0:	e17ffd04 	addi	r5,fp,-12
   923b4:	009a7440 	call	9a744 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   923b8:	e0bffe43 	ldbu	r2,-7(fp)
   923bc:	10803fcc 	andi	r2,r2,255
   923c0:	1005003a 	cmpeq	r2,r2,zero
   923c4:	1000071e 	bne	r2,zero,923e4 <__env_lock+0x78>
   923c8:	d0e00f17 	ldw	r3,-32708(gp)
   923cc:	e0bfe117 	ldw	r2,-124(fp)
   923d0:	10c0041e 	bne	r2,r3,923e4 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
   923d4:	d0a72417 	ldw	r2,-25456(gp)
   923d8:	10800044 	addi	r2,r2,1
   923dc:	d0a72415 	stw	r2,-25456(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
   923e0:	00000806 	br	92404 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   923e4:	d1272517 	ldw	r4,-25452(gp)
   923e8:	e1bffe84 	addi	r6,fp,-6
   923ec:	000b883a 	mov	r5,zero
   923f0:	009a2240 	call	9a224 <OSSemPend>
    locks  = 1;
   923f4:	00800044 	movi	r2,1
   923f8:	d0a72415 	stw	r2,-25456(gp)
    lockid = id;
   923fc:	e0bfe117 	ldw	r2,-124(fp)
   92400:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   92404:	e037883a 	mov	sp,fp
   92408:	dfc00117 	ldw	ra,4(sp)
   9240c:	df000017 	ldw	fp,0(sp)
   92410:	dec00204 	addi	sp,sp,8
   92414:	f800283a 	ret

00092418 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   92418:	defffd04 	addi	sp,sp,-12
   9241c:	dfc00215 	stw	ra,8(sp)
   92420:	df000115 	stw	fp,4(sp)
   92424:	df000104 	addi	fp,sp,4
   92428:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   9242c:	d0a72417 	ldw	r2,-25456(gp)
   92430:	1005003a 	cmpeq	r2,r2,zero
   92434:	10000a1e 	bne	r2,zero,92460 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   92438:	d0a72417 	ldw	r2,-25456(gp)
   9243c:	10bfffc4 	addi	r2,r2,-1
   92440:	d0a72415 	stw	r2,-25456(gp)
   92444:	d0a72417 	ldw	r2,-25456(gp)
   92448:	1004c03a 	cmpne	r2,r2,zero
   9244c:	1000041e 	bne	r2,zero,92460 <__env_unlock+0x48>
  {
    lockid = -1;
   92450:	00bfffc4 	movi	r2,-1
   92454:	d0a00f15 	stw	r2,-32708(gp)
    OSSemPost( alt_envsem );
   92458:	d1272517 	ldw	r4,-25452(gp)
   9245c:	009a61c0 	call	9a61c <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   92460:	e037883a 	mov	sp,fp
   92464:	dfc00117 	ldw	ra,4(sp)
   92468:	df000017 	ldw	fp,0(sp)
   9246c:	dec00204 	addi	sp,sp,8
   92470:	f800283a 	ret

00092474 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   92474:	deffdb04 	addi	sp,sp,-148
   92478:	dfc02415 	stw	ra,144(sp)
   9247c:	df002315 	stw	fp,140(sp)
   92480:	df002304 	addi	fp,sp,140
   92484:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   92488:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   9248c:	008002b4 	movhi	r2,10
   92490:	108e4544 	addi	r2,r2,14613
   92494:	10800003 	ldbu	r2,0(r2)
   92498:	10803fcc 	andi	r2,r2,255
   9249c:	10800058 	cmpnei	r2,r2,1
   924a0:	1000311e 	bne	r2,zero,92568 <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   924a4:	e17fe204 	addi	r5,fp,-120
   924a8:	01003fc4 	movi	r4,255
   924ac:	009c1f80 	call	9c1f8 <OSTaskQuery>
   924b0:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   924b4:	e0bffe83 	ldbu	r2,-6(fp)
   924b8:	10803fcc 	andi	r2,r2,255
   924bc:	1004c03a 	cmpne	r2,r2,zero
   924c0:	1000291e 	bne	r2,zero,92568 <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
   924c4:	e0bfee83 	ldbu	r2,-70(fp)
   924c8:	10803fcc 	andi	r2,r2,255
   924cc:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   924d0:	d1272717 	ldw	r4,-25444(gp)
   924d4:	e17ffd04 	addi	r5,fp,-12
   924d8:	009a7440 	call	9a744 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   924dc:	0005303a 	rdctl	r2,status
   924e0:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   924e4:	e0ffdf17 	ldw	r3,-132(fp)
   924e8:	00bfff84 	movi	r2,-2
   924ec:	1884703a 	and	r2,r3,r2
   924f0:	1001703a 	wrctl	status,r2
  
  return context;
   924f4:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
   924f8:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
   924fc:	e0bffd0b 	ldhu	r2,-12(fp)
   92500:	10bfffcc 	andi	r2,r2,65535
   92504:	1004c03a 	cmpne	r2,r2,zero
   92508:	10000b1e 	bne	r2,zero,92538 <__malloc_lock+0xc4>
   9250c:	d0e01017 	ldw	r3,-32704(gp)
   92510:	e0bfe117 	ldw	r2,-124(fp)
   92514:	10c0081e 	bne	r2,r3,92538 <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
   92518:	d0a72617 	ldw	r2,-25448(gp)
   9251c:	10800044 	addi	r2,r2,1
   92520:	d0a72615 	stw	r2,-25448(gp)
   92524:	e0bfe017 	ldw	r2,-128(fp)
   92528:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9252c:	e0bfde17 	ldw	r2,-136(fp)
   92530:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
   92534:	00000c06 	br	92568 <__malloc_lock+0xf4>
   92538:	e0bfe017 	ldw	r2,-128(fp)
   9253c:	e0bfdd15 	stw	r2,-140(fp)
   92540:	e0bfdd17 	ldw	r2,-140(fp)
   92544:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   92548:	d1272717 	ldw	r4,-25444(gp)
   9254c:	e1bffe84 	addi	r6,fp,-6
   92550:	000b883a 	mov	r5,zero
   92554:	009a2240 	call	9a224 <OSSemPend>
    locks  = 1;
   92558:	00800044 	movi	r2,1
   9255c:	d0a72615 	stw	r2,-25448(gp)
    lockid = id;
   92560:	e0bfe117 	ldw	r2,-124(fp)
   92564:	d0a01015 	stw	r2,-32704(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   92568:	e037883a 	mov	sp,fp
   9256c:	dfc00117 	ldw	ra,4(sp)
   92570:	df000017 	ldw	fp,0(sp)
   92574:	dec00204 	addi	sp,sp,8
   92578:	f800283a 	ret

0009257c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   9257c:	defff804 	addi	sp,sp,-32
   92580:	dfc00715 	stw	ra,28(sp)
   92584:	df000615 	stw	fp,24(sp)
   92588:	df000604 	addi	fp,sp,24
   9258c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   92590:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
   92594:	008002b4 	movhi	r2,10
   92598:	108e4544 	addi	r2,r2,14613
   9259c:	10800003 	ldbu	r2,0(r2)
   925a0:	10803fcc 	andi	r2,r2,255
   925a4:	10800058 	cmpnei	r2,r2,1
   925a8:	1000231e 	bne	r2,zero,92638 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   925ac:	0005303a 	rdctl	r2,status
   925b0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   925b4:	e0fffd17 	ldw	r3,-12(fp)
   925b8:	00bfff84 	movi	r2,-2
   925bc:	1884703a 	and	r2,r3,r2
   925c0:	1001703a 	wrctl	status,r2
  
  return context;
   925c4:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
   925c8:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
   925cc:	d0a72617 	ldw	r2,-25448(gp)
   925d0:	1004c03a 	cmpne	r2,r2,zero
   925d4:	1000051e 	bne	r2,zero,925ec <__malloc_unlock+0x70>
   925d8:	e0bffe17 	ldw	r2,-8(fp)
   925dc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   925e0:	e0bffc17 	ldw	r2,-16(fp)
   925e4:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   925e8:	00001306 	br	92638 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   925ec:	d0a72617 	ldw	r2,-25448(gp)
   925f0:	10bfffc4 	addi	r2,r2,-1
   925f4:	d0a72615 	stw	r2,-25448(gp)
   925f8:	d0a72617 	ldw	r2,-25448(gp)
   925fc:	1004c03a 	cmpne	r2,r2,zero
   92600:	1000091e 	bne	r2,zero,92628 <__malloc_unlock+0xac>
  {
    lockid = -1;
   92604:	00bfffc4 	movi	r2,-1
   92608:	d0a01015 	stw	r2,-32704(gp)
   9260c:	e0bffe17 	ldw	r2,-8(fp)
   92610:	e0bffb15 	stw	r2,-20(fp)
   92614:	e0bffb17 	ldw	r2,-20(fp)
   92618:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   9261c:	d1272717 	ldw	r4,-25444(gp)
   92620:	009a61c0 	call	9a61c <OSSemPost>
   92624:	00000406 	br	92638 <__malloc_unlock+0xbc>
   92628:	e0bffe17 	ldw	r2,-8(fp)
   9262c:	e0bffa15 	stw	r2,-24(fp)
   92630:	e0bffa17 	ldw	r2,-24(fp)
   92634:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   92638:	e037883a 	mov	sp,fp
   9263c:	dfc00117 	ldw	ra,4(sp)
   92640:	df000017 	ldw	fp,0(sp)
   92644:	dec00204 	addi	sp,sp,8
   92648:	f800283a 	ret

0009264c <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   9264c:	defff604 	addi	sp,sp,-40
   92650:	dfc00915 	stw	ra,36(sp)
   92654:	df000815 	stw	fp,32(sp)
   92658:	df000804 	addi	fp,sp,32
   9265c:	e13ffc15 	stw	r4,-16(fp)
   92660:	e17ffd15 	stw	r5,-12(fp)
   92664:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   92668:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   9266c:	e0bffe17 	ldw	r2,-8(fp)
   92670:	1004c03a 	cmpne	r2,r2,zero
   92674:	1000021e 	bne	r2,zero,92680 <OSEventNameGet+0x34>
        return (0);
   92678:	e03fff15 	stw	zero,-4(fp)
   9267c:	00003906 	br	92764 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   92680:	e0bffc17 	ldw	r2,-16(fp)
   92684:	1004c03a 	cmpne	r2,r2,zero
   92688:	1000051e 	bne	r2,zero,926a0 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
   9268c:	e0fffe17 	ldw	r3,-8(fp)
   92690:	00800104 	movi	r2,4
   92694:	18800005 	stb	r2,0(r3)
        return (0);
   92698:	e03fff15 	stw	zero,-4(fp)
   9269c:	00003106 	br	92764 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   926a0:	e0bffd17 	ldw	r2,-12(fp)
   926a4:	1004c03a 	cmpne	r2,r2,zero
   926a8:	1000051e 	bne	r2,zero,926c0 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
   926ac:	e0fffe17 	ldw	r3,-8(fp)
   926b0:	00800304 	movi	r2,12
   926b4:	18800005 	stb	r2,0(r3)
        return (0);
   926b8:	e03fff15 	stw	zero,-4(fp)
   926bc:	00002906 	br	92764 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   926c0:	d0a73603 	ldbu	r2,-25384(gp)
   926c4:	10803fcc 	andi	r2,r2,255
   926c8:	1005003a 	cmpeq	r2,r2,zero
   926cc:	1000051e 	bne	r2,zero,926e4 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
   926d0:	e0fffe17 	ldw	r3,-8(fp)
   926d4:	00800444 	movi	r2,17
   926d8:	18800005 	stb	r2,0(r3)
        return (0);
   926dc:	e03fff15 	stw	zero,-4(fp)
   926e0:	00002006 	br	92764 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
   926e4:	e0bffc17 	ldw	r2,-16(fp)
   926e8:	10800003 	ldbu	r2,0(r2)
   926ec:	10803fcc 	andi	r2,r2,255
   926f0:	10bfffc4 	addi	r2,r2,-1
   926f4:	10800128 	cmpgeui	r2,r2,4
   926f8:	1000161e 	bne	r2,zero,92754 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   926fc:	0005303a 	rdctl	r2,status
   92700:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92704:	e0fff917 	ldw	r3,-28(fp)
   92708:	00bfff84 	movi	r2,-2
   9270c:	1884703a 	and	r2,r3,r2
   92710:	1001703a 	wrctl	status,r2
  
  return context;
   92714:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   92718:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   9271c:	e0bffc17 	ldw	r2,-16(fp)
   92720:	11400384 	addi	r5,r2,14
   92724:	e13ffd17 	ldw	r4,-12(fp)
   92728:	00941d00 	call	941d0 <OS_StrCopy>
   9272c:	e0bffb05 	stb	r2,-20(fp)
   92730:	e0bffa17 	ldw	r2,-24(fp)
   92734:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92738:	e0bff817 	ldw	r2,-32(fp)
   9273c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   92740:	e0bffe17 	ldw	r2,-8(fp)
   92744:	10000005 	stb	zero,0(r2)
    return (len);
   92748:	e0bffb03 	ldbu	r2,-20(fp)
   9274c:	e0bfff15 	stw	r2,-4(fp)
   92750:	00000406 	br	92764 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   92754:	e0fffe17 	ldw	r3,-8(fp)
   92758:	00800044 	movi	r2,1
   9275c:	18800005 	stb	r2,0(r3)
             return (0);
   92760:	e03fff15 	stw	zero,-4(fp)
   92764:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
   92768:	e037883a 	mov	sp,fp
   9276c:	dfc00117 	ldw	ra,4(sp)
   92770:	df000017 	ldw	fp,0(sp)
   92774:	dec00204 	addi	sp,sp,8
   92778:	f800283a 	ret

0009277c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   9277c:	defff604 	addi	sp,sp,-40
   92780:	dfc00915 	stw	ra,36(sp)
   92784:	df000815 	stw	fp,32(sp)
   92788:	df000804 	addi	fp,sp,32
   9278c:	e13ffd15 	stw	r4,-12(fp)
   92790:	e17ffe15 	stw	r5,-8(fp)
   92794:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   92798:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   9279c:	e0bfff17 	ldw	r2,-4(fp)
   927a0:	1005003a 	cmpeq	r2,r2,zero
   927a4:	1000411e 	bne	r2,zero,928ac <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   927a8:	e0bffd17 	ldw	r2,-12(fp)
   927ac:	1004c03a 	cmpne	r2,r2,zero
   927b0:	1000041e 	bne	r2,zero,927c4 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   927b4:	e0ffff17 	ldw	r3,-4(fp)
   927b8:	00800104 	movi	r2,4
   927bc:	18800005 	stb	r2,0(r3)
        return;
   927c0:	00003a06 	br	928ac <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   927c4:	e0bffe17 	ldw	r2,-8(fp)
   927c8:	1004c03a 	cmpne	r2,r2,zero
   927cc:	1000041e 	bne	r2,zero,927e0 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
   927d0:	e0ffff17 	ldw	r3,-4(fp)
   927d4:	00800304 	movi	r2,12
   927d8:	18800005 	stb	r2,0(r3)
        return;
   927dc:	00003306 	br	928ac <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   927e0:	d0a73603 	ldbu	r2,-25384(gp)
   927e4:	10803fcc 	andi	r2,r2,255
   927e8:	1005003a 	cmpeq	r2,r2,zero
   927ec:	1000041e 	bne	r2,zero,92800 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
   927f0:	e0ffff17 	ldw	r3,-4(fp)
   927f4:	00800484 	movi	r2,18
   927f8:	18800005 	stb	r2,0(r3)
        return;
   927fc:	00002b06 	br	928ac <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
   92800:	e0bffd17 	ldw	r2,-12(fp)
   92804:	10800003 	ldbu	r2,0(r2)
   92808:	10803fcc 	andi	r2,r2,255
   9280c:	10bfffc4 	addi	r2,r2,-1
   92810:	10800128 	cmpgeui	r2,r2,4
   92814:	10000f1e 	bne	r2,zero,92854 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92818:	0005303a 	rdctl	r2,status
   9281c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92820:	e0fffa17 	ldw	r3,-24(fp)
   92824:	00bfff84 	movi	r2,-2
   92828:	1884703a 	and	r2,r3,r2
   9282c:	1001703a 	wrctl	status,r2
  
  return context;
   92830:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   92834:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   92838:	e13ffe17 	ldw	r4,-8(fp)
   9283c:	00942500 	call	94250 <OS_StrLen>
   92840:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   92844:	e0bffc03 	ldbu	r2,-16(fp)
   92848:	10800828 	cmpgeui	r2,r2,32
   9284c:	1000051e 	bne	r2,zero,92864 <OSEventNameSet+0xe8>
   92850:	00000c06 	br	92884 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   92854:	e0ffff17 	ldw	r3,-4(fp)
   92858:	00800044 	movi	r2,1
   9285c:	18800005 	stb	r2,0(r3)
             return;
   92860:	00001206 	br	928ac <OSEventNameSet+0x130>
   92864:	e0bffb17 	ldw	r2,-20(fp)
   92868:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9286c:	e0bff917 	ldw	r2,-28(fp)
   92870:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   92874:	e0ffff17 	ldw	r3,-4(fp)
   92878:	008002c4 	movi	r2,11
   9287c:	18800005 	stb	r2,0(r3)
        return;
   92880:	00000a06 	br	928ac <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   92884:	e0bffd17 	ldw	r2,-12(fp)
   92888:	11000384 	addi	r4,r2,14
   9288c:	e17ffe17 	ldw	r5,-8(fp)
   92890:	00941d00 	call	941d0 <OS_StrCopy>
   92894:	e0bffb17 	ldw	r2,-20(fp)
   92898:	e0bff815 	stw	r2,-32(fp)
   9289c:	e0bff817 	ldw	r2,-32(fp)
   928a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   928a4:	e0bfff17 	ldw	r2,-4(fp)
   928a8:	10000005 	stb	zero,0(r2)
}
   928ac:	e037883a 	mov	sp,fp
   928b0:	dfc00117 	ldw	ra,4(sp)
   928b4:	df000017 	ldw	fp,0(sp)
   928b8:	dec00204 	addi	sp,sp,8
   928bc:	f800283a 	ret

000928c0 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   928c0:	deffe704 	addi	sp,sp,-100
   928c4:	dfc01815 	stw	ra,96(sp)
   928c8:	df001715 	stw	fp,92(sp)
   928cc:	df001704 	addi	fp,sp,92
   928d0:	e13ff615 	stw	r4,-40(fp)
   928d4:	e17ff715 	stw	r5,-36(fp)
   928d8:	e1bff815 	stw	r6,-32(fp)
   928dc:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   928e0:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   928e4:	e0800217 	ldw	r2,8(fp)
   928e8:	1004c03a 	cmpne	r2,r2,zero
   928ec:	1000021e 	bne	r2,zero,928f8 <OSEventPendMulti+0x38>
        return (0);
   928f0:	e03fff15 	stw	zero,-4(fp)
   928f4:	00019906 	br	92f5c <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   928f8:	e0bff617 	ldw	r2,-40(fp)
   928fc:	1004c03a 	cmpne	r2,r2,zero
   92900:	1000051e 	bne	r2,zero,92918 <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
   92904:	e0c00217 	ldw	r3,8(fp)
   92908:	00800104 	movi	r2,4
   9290c:	18800005 	stb	r2,0(r3)
        return (0);
   92910:	e03fff15 	stw	zero,-4(fp)
   92914:	00019106 	br	92f5c <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   92918:	e0bff717 	ldw	r2,-36(fp)
   9291c:	1004c03a 	cmpne	r2,r2,zero
   92920:	1000051e 	bne	r2,zero,92938 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
   92924:	e0c00217 	ldw	r3,8(fp)
   92928:	00800104 	movi	r2,4
   9292c:	18800005 	stb	r2,0(r3)
        return (0);
   92930:	e03fff15 	stw	zero,-4(fp)
   92934:	00018906 	br	92f5c <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   92938:	e0bff817 	ldw	r2,-32(fp)
   9293c:	1004c03a 	cmpne	r2,r2,zero
   92940:	1000051e 	bne	r2,zero,92958 <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
   92944:	e0c00217 	ldw	r3,8(fp)
   92948:	00800104 	movi	r2,4
   9294c:	18800005 	stb	r2,0(r3)
        return (0);
   92950:	e03fff15 	stw	zero,-4(fp)
   92954:	00018106 	br	92f5c <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   92958:	e0bff717 	ldw	r2,-36(fp)
   9295c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   92960:	e0bff617 	ldw	r2,-40(fp)
   92964:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
   92968:	e0bff517 	ldw	r2,-44(fp)
   9296c:	10800017 	ldw	r2,0(r2)
   92970:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
   92974:	00001806 	br	929d8 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   92978:	e0bff417 	ldw	r2,-48(fp)
   9297c:	10800003 	ldbu	r2,0(r2)
   92980:	10803fcc 	andi	r2,r2,255
   92984:	e0bffe15 	stw	r2,-8(fp)
   92988:	e0fffe17 	ldw	r3,-8(fp)
   9298c:	188000a0 	cmpeqi	r2,r3,2
   92990:	10000b1e 	bne	r2,zero,929c0 <OSEventPendMulti+0x100>
   92994:	e0fffe17 	ldw	r3,-8(fp)
   92998:	188000e0 	cmpeqi	r2,r3,3
   9299c:	1000081e 	bne	r2,zero,929c0 <OSEventPendMulti+0x100>
   929a0:	e0fffe17 	ldw	r3,-8(fp)
   929a4:	18800060 	cmpeqi	r2,r3,1
   929a8:	1000051e 	bne	r2,zero,929c0 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   929ac:	e0c00217 	ldw	r3,8(fp)
   929b0:	00800044 	movi	r2,1
   929b4:	18800005 	stb	r2,0(r3)
                 return (0);
   929b8:	e03fff15 	stw	zero,-4(fp)
   929bc:	00016706 	br	92f5c <OSEventPendMulti+0x69c>
        }
        pevents++;
   929c0:	e0bff517 	ldw	r2,-44(fp)
   929c4:	10800104 	addi	r2,r2,4
   929c8:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
   929cc:	e0bff517 	ldw	r2,-44(fp)
   929d0:	10800017 	ldw	r2,0(r2)
   929d4:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   929d8:	e0bff417 	ldw	r2,-48(fp)
   929dc:	1004c03a 	cmpne	r2,r2,zero
   929e0:	103fe51e 	bne	r2,zero,92978 <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   929e4:	d0a73603 	ldbu	r2,-25384(gp)
   929e8:	10803fcc 	andi	r2,r2,255
   929ec:	1005003a 	cmpeq	r2,r2,zero
   929f0:	1000051e 	bne	r2,zero,92a08 <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   929f4:	e0c00217 	ldw	r3,8(fp)
   929f8:	00800084 	movi	r2,2
   929fc:	18800005 	stb	r2,0(r3)
        return (0);
   92a00:	e03fff15 	stw	zero,-4(fp)
   92a04:	00015506 	br	92f5c <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   92a08:	d0a72803 	ldbu	r2,-25440(gp)
   92a0c:	10803fcc 	andi	r2,r2,255
   92a10:	1005003a 	cmpeq	r2,r2,zero
   92a14:	1000051e 	bne	r2,zero,92a2c <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   92a18:	e0c00217 	ldw	r3,8(fp)
   92a1c:	00800344 	movi	r2,13
   92a20:	18800005 	stb	r2,0(r3)
        return (0);
   92a24:	e03fff15 	stw	zero,-4(fp)
   92a28:	00014c06 	br	92f5c <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92a2c:	0005303a 	rdctl	r2,status
   92a30:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92a34:	e0ffef17 	ldw	r3,-68(fp)
   92a38:	00bfff84 	movi	r2,-2
   92a3c:	1884703a 	and	r2,r3,r2
   92a40:	1001703a 	wrctl	status,r2
  
  return context;
   92a44:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   92a48:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
   92a4c:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
   92a50:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   92a54:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
   92a58:	e0bff617 	ldw	r2,-40(fp)
   92a5c:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
   92a60:	e0bff517 	ldw	r2,-44(fp)
   92a64:	10800017 	ldw	r2,0(r2)
   92a68:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   92a6c:	00008f06 	br	92cac <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
   92a70:	e0bff417 	ldw	r2,-48(fp)
   92a74:	10800003 	ldbu	r2,0(r2)
   92a78:	10803fcc 	andi	r2,r2,255
   92a7c:	e0bffd15 	stw	r2,-12(fp)
   92a80:	e0fffd17 	ldw	r3,-12(fp)
   92a84:	188000a0 	cmpeqi	r2,r3,2
   92a88:	1000441e 	bne	r2,zero,92b9c <OSEventPendMulti+0x2dc>
   92a8c:	e0fffd17 	ldw	r3,-12(fp)
   92a90:	188000e0 	cmpeqi	r2,r3,3
   92a94:	1000041e 	bne	r2,zero,92aa8 <OSEventPendMulti+0x1e8>
   92a98:	e0fffd17 	ldw	r3,-12(fp)
   92a9c:	18800060 	cmpeqi	r2,r3,1
   92aa0:	1000211e 	bne	r2,zero,92b28 <OSEventPendMulti+0x268>
   92aa4:	00006f06 	br	92c64 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   92aa8:	e0bff417 	ldw	r2,-48(fp)
   92aac:	1080020b 	ldhu	r2,8(r2)
   92ab0:	10bfffcc 	andi	r2,r2,65535
   92ab4:	1005003a 	cmpeq	r2,r2,zero
   92ab8:	1000171e 	bne	r2,zero,92b18 <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   92abc:	e0bff417 	ldw	r2,-48(fp)
   92ac0:	1080020b 	ldhu	r2,8(r2)
   92ac4:	10bfffc4 	addi	r2,r2,-1
   92ac8:	1007883a 	mov	r3,r2
   92acc:	e0bff417 	ldw	r2,-48(fp)
   92ad0:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   92ad4:	e0fff717 	ldw	r3,-36(fp)
   92ad8:	e0bff417 	ldw	r2,-48(fp)
   92adc:	18800015 	stw	r2,0(r3)
   92ae0:	e0bff717 	ldw	r2,-36(fp)
   92ae4:	10800104 	addi	r2,r2,4
   92ae8:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
   92aec:	00800044 	movi	r2,1
   92af0:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   92af4:	e0bff817 	ldw	r2,-32(fp)
   92af8:	10000015 	stw	zero,0(r2)
   92afc:	e0bff817 	ldw	r2,-32(fp)
   92b00:	10800104 	addi	r2,r2,4
   92b04:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
   92b08:	e0bff18b 	ldhu	r2,-58(fp)
   92b0c:	10800044 	addi	r2,r2,1
   92b10:	e0bff18d 	sth	r2,-58(fp)
   92b14:	00005f06 	br	92c94 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   92b18:	e0bff103 	ldbu	r2,-60(fp)
   92b1c:	10800054 	ori	r2,r2,1
   92b20:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
   92b24:	00005b06 	br	92c94 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   92b28:	e0bff417 	ldw	r2,-48(fp)
   92b2c:	10800117 	ldw	r2,4(r2)
   92b30:	1005003a 	cmpeq	r2,r2,zero
   92b34:	1000151e 	bne	r2,zero,92b8c <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   92b38:	e0bff417 	ldw	r2,-48(fp)
   92b3c:	10c00117 	ldw	r3,4(r2)
   92b40:	e0bff817 	ldw	r2,-32(fp)
   92b44:	10c00015 	stw	r3,0(r2)
   92b48:	e0bff817 	ldw	r2,-32(fp)
   92b4c:	10800104 	addi	r2,r2,4
   92b50:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
   92b54:	e0bff417 	ldw	r2,-48(fp)
   92b58:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   92b5c:	e0fff717 	ldw	r3,-36(fp)
   92b60:	e0bff417 	ldw	r2,-48(fp)
   92b64:	18800015 	stw	r2,0(r3)
   92b68:	e0bff717 	ldw	r2,-36(fp)
   92b6c:	10800104 	addi	r2,r2,4
   92b70:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
   92b74:	00800044 	movi	r2,1
   92b78:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
   92b7c:	e0bff18b 	ldhu	r2,-58(fp)
   92b80:	10800044 	addi	r2,r2,1
   92b84:	e0bff18d 	sth	r2,-58(fp)
   92b88:	00004206 	br	92c94 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   92b8c:	e0bff103 	ldbu	r2,-60(fp)
   92b90:	10800094 	ori	r2,r2,2
   92b94:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
   92b98:	00003e06 	br	92c94 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   92b9c:	e0bff417 	ldw	r2,-48(fp)
   92ba0:	10800117 	ldw	r2,4(r2)
   92ba4:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   92ba8:	e0bff317 	ldw	r2,-52(fp)
   92bac:	1080058b 	ldhu	r2,22(r2)
   92bb0:	10bfffcc 	andi	r2,r2,65535
   92bb4:	1005003a 	cmpeq	r2,r2,zero
   92bb8:	1000261e 	bne	r2,zero,92c54 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   92bbc:	e0bff317 	ldw	r2,-52(fp)
   92bc0:	11000417 	ldw	r4,16(r2)
   92bc4:	20c00017 	ldw	r3,0(r4)
   92bc8:	e0bff817 	ldw	r2,-32(fp)
   92bcc:	10c00015 	stw	r3,0(r2)
   92bd0:	e0bff817 	ldw	r2,-32(fp)
   92bd4:	10800104 	addi	r2,r2,4
   92bd8:	e0bff815 	stw	r2,-32(fp)
   92bdc:	20c00104 	addi	r3,r4,4
   92be0:	e0bff317 	ldw	r2,-52(fp)
   92be4:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   92be8:	e0bff317 	ldw	r2,-52(fp)
   92bec:	10c00417 	ldw	r3,16(r2)
   92bf0:	e0bff317 	ldw	r2,-52(fp)
   92bf4:	10800217 	ldw	r2,8(r2)
   92bf8:	1880041e 	bne	r3,r2,92c0c <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   92bfc:	e0bff317 	ldw	r2,-52(fp)
   92c00:	10c00117 	ldw	r3,4(r2)
   92c04:	e0bff317 	ldw	r2,-52(fp)
   92c08:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   92c0c:	e0bff317 	ldw	r2,-52(fp)
   92c10:	1080058b 	ldhu	r2,22(r2)
   92c14:	10bfffc4 	addi	r2,r2,-1
   92c18:	1007883a 	mov	r3,r2
   92c1c:	e0bff317 	ldw	r2,-52(fp)
   92c20:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   92c24:	e0fff717 	ldw	r3,-36(fp)
   92c28:	e0bff417 	ldw	r2,-48(fp)
   92c2c:	18800015 	stw	r2,0(r3)
   92c30:	e0bff717 	ldw	r2,-36(fp)
   92c34:	10800104 	addi	r2,r2,4
   92c38:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
   92c3c:	00800044 	movi	r2,1
   92c40:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
   92c44:	e0bff18b 	ldhu	r2,-58(fp)
   92c48:	10800044 	addi	r2,r2,1
   92c4c:	e0bff18d 	sth	r2,-58(fp)
   92c50:	00001006 	br	92c94 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   92c54:	e0bff103 	ldbu	r2,-60(fp)
   92c58:	10800114 	ori	r2,r2,4
   92c5c:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
   92c60:	00000c06 	br	92c94 <OSEventPendMulti+0x3d4>
   92c64:	e0bff017 	ldw	r2,-64(fp)
   92c68:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92c6c:	e0bfee17 	ldw	r2,-72(fp)
   92c70:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   92c74:	e0bff717 	ldw	r2,-36(fp)
   92c78:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   92c7c:	e0c00217 	ldw	r3,8(fp)
   92c80:	00800044 	movi	r2,1
   92c84:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
   92c88:	e0bff18b 	ldhu	r2,-58(fp)
   92c8c:	e0bfff15 	stw	r2,-4(fp)
   92c90:	0000b206 	br	92f5c <OSEventPendMulti+0x69c>
        }
        pevents++;
   92c94:	e0bff517 	ldw	r2,-44(fp)
   92c98:	10800104 	addi	r2,r2,4
   92c9c:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
   92ca0:	e0bff517 	ldw	r2,-44(fp)
   92ca4:	10800017 	ldw	r2,0(r2)
   92ca8:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   92cac:	e0bff417 	ldw	r2,-48(fp)
   92cb0:	1004c03a 	cmpne	r2,r2,zero
   92cb4:	103f6e1e 	bne	r2,zero,92a70 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   92cb8:	e0bff203 	ldbu	r2,-56(fp)
   92cbc:	10800058 	cmpnei	r2,r2,1
   92cc0:	10000b1e 	bne	r2,zero,92cf0 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   92cc4:	e0bff717 	ldw	r2,-36(fp)
   92cc8:	10000015 	stw	zero,0(r2)
   92ccc:	e0bff017 	ldw	r2,-64(fp)
   92cd0:	e0bfed15 	stw	r2,-76(fp)
   92cd4:	e0bfed17 	ldw	r2,-76(fp)
   92cd8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   92cdc:	e0800217 	ldw	r2,8(fp)
   92ce0:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   92ce4:	e0fff18b 	ldhu	r3,-58(fp)
   92ce8:	e0ffff15 	stw	r3,-4(fp)
   92cec:	00009b06 	br	92f5c <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   92cf0:	d1273717 	ldw	r4,-25380(gp)
   92cf4:	d0a73717 	ldw	r2,-25380(gp)
   92cf8:	10c00c03 	ldbu	r3,48(r2)
   92cfc:	e0bff103 	ldbu	r2,-60(fp)
   92d00:	1884b03a 	or	r2,r3,r2
   92d04:	1007883a 	mov	r3,r2
   92d08:	00bfe004 	movi	r2,-128
   92d0c:	1884b03a 	or	r2,r3,r2
   92d10:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   92d14:	d0a73717 	ldw	r2,-25380(gp)
   92d18:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   92d1c:	d0e73717 	ldw	r3,-25380(gp)
   92d20:	e0bff90b 	ldhu	r2,-28(fp)
   92d24:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   92d28:	e13ff617 	ldw	r4,-40(fp)
   92d2c:	00938f00 	call	938f0 <OS_EventTaskWaitMulti>
   92d30:	e0bff017 	ldw	r2,-64(fp)
   92d34:	e0bfec15 	stw	r2,-80(fp)
   92d38:	e0bfec17 	ldw	r2,-80(fp)
   92d3c:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   92d40:	009408c0 	call	9408c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92d44:	0005303a 	rdctl	r2,status
   92d48:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92d4c:	e0ffeb17 	ldw	r3,-84(fp)
   92d50:	00bfff84 	movi	r2,-2
   92d54:	1884703a 	and	r2,r3,r2
   92d58:	1001703a 	wrctl	status,r2
  
  return context;
   92d5c:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
   92d60:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   92d64:	d0a73717 	ldw	r2,-25380(gp)
   92d68:	10800c43 	ldbu	r2,49(r2)
   92d6c:	10803fcc 	andi	r2,r2,255
   92d70:	e0bffc15 	stw	r2,-16(fp)
   92d74:	e0fffc17 	ldw	r3,-16(fp)
   92d78:	1805003a 	cmpeq	r2,r3,zero
   92d7c:	1000041e 	bne	r2,zero,92d90 <OSEventPendMulti+0x4d0>
   92d80:	e0fffc17 	ldw	r3,-16(fp)
   92d84:	188000a0 	cmpeqi	r2,r3,2
   92d88:	1000011e 	bne	r2,zero,92d90 <OSEventPendMulti+0x4d0>
   92d8c:	00001906 	br	92df4 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   92d90:	d0a73717 	ldw	r2,-25380(gp)
   92d94:	10800717 	ldw	r2,28(r2)
   92d98:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   92d9c:	e0bff417 	ldw	r2,-48(fp)
   92da0:	1005003a 	cmpeq	r2,r2,zero
   92da4:	10000c1e 	bne	r2,zero,92dd8 <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   92da8:	e0fff717 	ldw	r3,-36(fp)
   92dac:	e0bff417 	ldw	r2,-48(fp)
   92db0:	18800015 	stw	r2,0(r3)
   92db4:	e0bff717 	ldw	r2,-36(fp)
   92db8:	10800104 	addi	r2,r2,4
   92dbc:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   92dc0:	e0bff717 	ldw	r2,-36(fp)
   92dc4:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   92dc8:	e0bff18b 	ldhu	r2,-58(fp)
   92dcc:	10800044 	addi	r2,r2,1
   92dd0:	e0bff18d 	sth	r2,-58(fp)
   92dd4:	00000a06 	br	92e00 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   92dd8:	d0a73717 	ldw	r2,-25380(gp)
   92ddc:	00c00044 	movi	r3,1
   92de0:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   92de4:	d1273717 	ldw	r4,-25380(gp)
   92de8:	e17ff617 	ldw	r5,-40(fp)
   92dec:	0093afc0 	call	93afc <OS_EventTaskRemoveMulti>
             }
			 break;
   92df0:	00000306 	br	92e00 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   92df4:	d1273717 	ldw	r4,-25380(gp)
   92df8:	e17ff617 	ldw	r5,-40(fp)
   92dfc:	0093afc0 	call	93afc <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
   92e00:	d0a73717 	ldw	r2,-25380(gp)
   92e04:	10800c43 	ldbu	r2,49(r2)
   92e08:	10803fcc 	andi	r2,r2,255
   92e0c:	e0bffb15 	stw	r2,-20(fp)
   92e10:	e0fffb17 	ldw	r3,-20(fp)
   92e14:	1805003a 	cmpeq	r2,r3,zero
   92e18:	1000041e 	bne	r2,zero,92e2c <OSEventPendMulti+0x56c>
   92e1c:	e0fffb17 	ldw	r3,-20(fp)
   92e20:	188000a0 	cmpeqi	r2,r3,2
   92e24:	10002c1e 	bne	r2,zero,92ed8 <OSEventPendMulti+0x618>
   92e28:	00003406 	br	92efc <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   92e2c:	e0bff417 	ldw	r2,-48(fp)
   92e30:	10800003 	ldbu	r2,0(r2)
   92e34:	10803fcc 	andi	r2,r2,255
   92e38:	e0bffa15 	stw	r2,-24(fp)
   92e3c:	e0fffa17 	ldw	r3,-24(fp)
   92e40:	18800050 	cmplti	r2,r3,1
   92e44:	1000151e 	bne	r2,zero,92e9c <OSEventPendMulti+0x5dc>
   92e48:	e0fffa17 	ldw	r3,-24(fp)
   92e4c:	188000d0 	cmplti	r2,r3,3
   92e50:	10000a1e 	bne	r2,zero,92e7c <OSEventPendMulti+0x5bc>
   92e54:	e0fffa17 	ldw	r3,-24(fp)
   92e58:	188000e0 	cmpeqi	r2,r3,3
   92e5c:	1000011e 	bne	r2,zero,92e64 <OSEventPendMulti+0x5a4>
   92e60:	00000e06 	br	92e9c <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   92e64:	e0bff817 	ldw	r2,-32(fp)
   92e68:	10000015 	stw	zero,0(r2)
   92e6c:	e0bff817 	ldw	r2,-32(fp)
   92e70:	10800104 	addi	r2,r2,4
   92e74:	e0bff815 	stw	r2,-32(fp)
                      break;
   92e78:	00001406 	br	92ecc <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   92e7c:	d0a73717 	ldw	r2,-25380(gp)
   92e80:	10c00917 	ldw	r3,36(r2)
   92e84:	e0bff817 	ldw	r2,-32(fp)
   92e88:	10c00015 	stw	r3,0(r2)
   92e8c:	e0bff817 	ldw	r2,-32(fp)
   92e90:	10800104 	addi	r2,r2,4
   92e94:	e0bff815 	stw	r2,-32(fp)
                      break;
   92e98:	00000c06 	br	92ecc <OSEventPendMulti+0x60c>
   92e9c:	e0bff017 	ldw	r2,-64(fp)
   92ea0:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92ea4:	e0bfea17 	ldw	r2,-88(fp)
   92ea8:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   92eac:	e0bff717 	ldw	r2,-36(fp)
   92eb0:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   92eb4:	e0c00217 	ldw	r3,8(fp)
   92eb8:	00800044 	movi	r2,1
   92ebc:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
   92ec0:	e0bff18b 	ldhu	r2,-58(fp)
   92ec4:	e0bfff15 	stw	r2,-4(fp)
   92ec8:	00002406 	br	92f5c <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
   92ecc:	e0800217 	ldw	r2,8(fp)
   92ed0:	10000005 	stb	zero,0(r2)
             break;
   92ed4:	00001106 	br	92f1c <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   92ed8:	e0bff817 	ldw	r2,-32(fp)
   92edc:	10000015 	stw	zero,0(r2)
   92ee0:	e0bff817 	ldw	r2,-32(fp)
   92ee4:	10800104 	addi	r2,r2,4
   92ee8:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   92eec:	e0c00217 	ldw	r3,8(fp)
   92ef0:	00800384 	movi	r2,14
   92ef4:	18800005 	stb	r2,0(r3)
             break;
   92ef8:	00000806 	br	92f1c <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   92efc:	e0bff817 	ldw	r2,-32(fp)
   92f00:	10000015 	stw	zero,0(r2)
   92f04:	e0bff817 	ldw	r2,-32(fp)
   92f08:	10800104 	addi	r2,r2,4
   92f0c:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   92f10:	e0c00217 	ldw	r3,8(fp)
   92f14:	00800284 	movi	r2,10
   92f18:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   92f1c:	d0a73717 	ldw	r2,-25380(gp)
   92f20:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   92f24:	d0a73717 	ldw	r2,-25380(gp)
   92f28:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   92f2c:	d0a73717 	ldw	r2,-25380(gp)
   92f30:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   92f34:	d0a73717 	ldw	r2,-25380(gp)
   92f38:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   92f3c:	d0a73717 	ldw	r2,-25380(gp)
   92f40:	10000915 	stw	zero,36(r2)
   92f44:	e0bff017 	ldw	r2,-64(fp)
   92f48:	e0bfe915 	stw	r2,-92(fp)
   92f4c:	e0bfe917 	ldw	r2,-92(fp)
   92f50:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   92f54:	e0fff18b 	ldhu	r3,-58(fp)
   92f58:	e0ffff15 	stw	r3,-4(fp)
   92f5c:	e0bfff17 	ldw	r2,-4(fp)
}
   92f60:	e037883a 	mov	sp,fp
   92f64:	dfc00117 	ldw	ra,4(sp)
   92f68:	df000017 	ldw	fp,0(sp)
   92f6c:	dec00204 	addi	sp,sp,8
   92f70:	f800283a 	ret

00092f74 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   92f74:	defffe04 	addi	sp,sp,-8
   92f78:	dfc00115 	stw	ra,4(sp)
   92f7c:	df000015 	stw	fp,0(sp)
   92f80:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   92f84:	009ef2c0 	call	9ef2c <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   92f88:	0093d440 	call	93d44 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   92f8c:	0093d880 	call	93d88 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   92f90:	0093eec0 	call	93eec <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   92f94:	0093c680 	call	93c68 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   92f98:	0095f9c0 	call	95f9c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   92f9c:	00976000 	call	97600 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   92fa0:	0099d040 	call	99d04 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   92fa4:	0093df40 	call	93df4 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   92fa8:	0093e700 	call	93e70 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   92fac:	009ef480 	call	9ef48 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   92fb0:	00947740 	call	94774 <OSDebugInit>
#endif
}
   92fb4:	e037883a 	mov	sp,fp
   92fb8:	dfc00117 	ldw	ra,4(sp)
   92fbc:	df000017 	ldw	fp,0(sp)
   92fc0:	dec00204 	addi	sp,sp,8
   92fc4:	f800283a 	ret

00092fc8 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   92fc8:	defffc04 	addi	sp,sp,-16
   92fcc:	df000315 	stw	fp,12(sp)
   92fd0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   92fd4:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
   92fd8:	d0a72843 	ldbu	r2,-25439(gp)
   92fdc:	10803fcc 	andi	r2,r2,255
   92fe0:	10800058 	cmpnei	r2,r2,1
   92fe4:	1000131e 	bne	r2,zero,93034 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92fe8:	0005303a 	rdctl	r2,status
   92fec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92ff0:	e0fffe17 	ldw	r3,-8(fp)
   92ff4:	00bfff84 	movi	r2,-2
   92ff8:	1884703a 	and	r2,r3,r2
   92ffc:	1001703a 	wrctl	status,r2
  
  return context;
   93000:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   93004:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
   93008:	d0a73603 	ldbu	r2,-25384(gp)
   9300c:	10803fcc 	andi	r2,r2,255
   93010:	10803fe0 	cmpeqi	r2,r2,255
   93014:	1000031e 	bne	r2,zero,93024 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   93018:	d0a73603 	ldbu	r2,-25384(gp)
   9301c:	10800044 	addi	r2,r2,1
   93020:	d0a73605 	stb	r2,-25384(gp)
   93024:	e0bfff17 	ldw	r2,-4(fp)
   93028:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9302c:	e0bffd17 	ldw	r2,-12(fp)
   93030:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
   93034:	e037883a 	mov	sp,fp
   93038:	df000017 	ldw	fp,0(sp)
   9303c:	dec00104 	addi	sp,sp,4
   93040:	f800283a 	ret

00093044 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   93044:	defffb04 	addi	sp,sp,-20
   93048:	dfc00415 	stw	ra,16(sp)
   9304c:	df000315 	stw	fp,12(sp)
   93050:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   93054:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
   93058:	d0a72843 	ldbu	r2,-25439(gp)
   9305c:	10803fcc 	andi	r2,r2,255
   93060:	10800058 	cmpnei	r2,r2,1
   93064:	1000321e 	bne	r2,zero,93130 <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93068:	0005303a 	rdctl	r2,status
   9306c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93070:	e0fffe17 	ldw	r3,-8(fp)
   93074:	00bfff84 	movi	r2,-2
   93078:	1884703a 	and	r2,r3,r2
   9307c:	1001703a 	wrctl	status,r2
  
  return context;
   93080:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   93084:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   93088:	d0a73603 	ldbu	r2,-25384(gp)
   9308c:	10803fcc 	andi	r2,r2,255
   93090:	1005003a 	cmpeq	r2,r2,zero
   93094:	1000031e 	bne	r2,zero,930a4 <OSIntExit+0x60>
            OSIntNesting--;
   93098:	d0a73603 	ldbu	r2,-25384(gp)
   9309c:	10bfffc4 	addi	r2,r2,-1
   930a0:	d0a73605 	stb	r2,-25384(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   930a4:	d0a73603 	ldbu	r2,-25384(gp)
   930a8:	10803fcc 	andi	r2,r2,255
   930ac:	1004c03a 	cmpne	r2,r2,zero
   930b0:	10001b1e 	bne	r2,zero,93120 <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   930b4:	d0a72803 	ldbu	r2,-25440(gp)
   930b8:	10803fcc 	andi	r2,r2,255
   930bc:	1004c03a 	cmpne	r2,r2,zero
   930c0:	1000171e 	bne	r2,zero,93120 <OSIntExit+0xdc>
                OS_SchedNew();
   930c4:	00941600 	call	94160 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   930c8:	d0a72a03 	ldbu	r2,-25432(gp)
   930cc:	d0e72a43 	ldbu	r3,-25431(gp)
   930d0:	11003fcc 	andi	r4,r2,255
   930d4:	18803fcc 	andi	r2,r3,255
   930d8:	20801126 	beq	r4,r2,93120 <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   930dc:	d0a72a03 	ldbu	r2,-25432(gp)
   930e0:	10803fcc 	andi	r2,r2,255
   930e4:	00c00334 	movhi	r3,12
   930e8:	18e2b904 	addi	r3,r3,-29980
   930ec:	1085883a 	add	r2,r2,r2
   930f0:	1085883a 	add	r2,r2,r2
   930f4:	10c5883a 	add	r2,r2,r3
   930f8:	10800017 	ldw	r2,0(r2)
   930fc:	d0a73215 	stw	r2,-25400(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   93100:	d0e73217 	ldw	r3,-25400(gp)
   93104:	18800e17 	ldw	r2,56(r3)
   93108:	10800044 	addi	r2,r2,1
   9310c:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   93110:	d0a72d17 	ldw	r2,-25420(gp)
   93114:	10800044 	addi	r2,r2,1
   93118:	d0a72d15 	stw	r2,-25420(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   9311c:	009eab80 	call	9eab8 <OSCtxSw>
   93120:	e0bfff17 	ldw	r2,-4(fp)
   93124:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93128:	e0bffd17 	ldw	r2,-12(fp)
   9312c:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   93130:	e037883a 	mov	sp,fp
   93134:	dfc00117 	ldw	ra,4(sp)
   93138:	df000017 	ldw	fp,0(sp)
   9313c:	dec00204 	addi	sp,sp,8
   93140:	f800283a 	ret

00093144 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   93144:	defffc04 	addi	sp,sp,-16
   93148:	df000315 	stw	fp,12(sp)
   9314c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   93150:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   93154:	d0a72843 	ldbu	r2,-25439(gp)
   93158:	10803fcc 	andi	r2,r2,255
   9315c:	10800058 	cmpnei	r2,r2,1
   93160:	1000171e 	bne	r2,zero,931c0 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93164:	0005303a 	rdctl	r2,status
   93168:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9316c:	e0fffe17 	ldw	r3,-8(fp)
   93170:	00bfff84 	movi	r2,-2
   93174:	1884703a 	and	r2,r3,r2
   93178:	1001703a 	wrctl	status,r2
  
  return context;
   9317c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   93180:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   93184:	d0a73603 	ldbu	r2,-25384(gp)
   93188:	10803fcc 	andi	r2,r2,255
   9318c:	1004c03a 	cmpne	r2,r2,zero
   93190:	1000071e 	bne	r2,zero,931b0 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   93194:	d0a72803 	ldbu	r2,-25440(gp)
   93198:	10803fcc 	andi	r2,r2,255
   9319c:	10803fe0 	cmpeqi	r2,r2,255
   931a0:	1000031e 	bne	r2,zero,931b0 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   931a4:	d0a72803 	ldbu	r2,-25440(gp)
   931a8:	10800044 	addi	r2,r2,1
   931ac:	d0a72805 	stb	r2,-25440(gp)
   931b0:	e0bfff17 	ldw	r2,-4(fp)
   931b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   931b8:	e0bffd17 	ldw	r2,-12(fp)
   931bc:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   931c0:	e037883a 	mov	sp,fp
   931c4:	df000017 	ldw	fp,0(sp)
   931c8:	dec00104 	addi	sp,sp,4
   931cc:	f800283a 	ret

000931d0 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   931d0:	defff804 	addi	sp,sp,-32
   931d4:	dfc00715 	stw	ra,28(sp)
   931d8:	df000615 	stw	fp,24(sp)
   931dc:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   931e0:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   931e4:	d0a72843 	ldbu	r2,-25439(gp)
   931e8:	10803fcc 	andi	r2,r2,255
   931ec:	10800058 	cmpnei	r2,r2,1
   931f0:	10002b1e 	bne	r2,zero,932a0 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   931f4:	0005303a 	rdctl	r2,status
   931f8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   931fc:	e0fffe17 	ldw	r3,-8(fp)
   93200:	00bfff84 	movi	r2,-2
   93204:	1884703a 	and	r2,r3,r2
   93208:	1001703a 	wrctl	status,r2
  
  return context;
   9320c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   93210:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   93214:	d0a72803 	ldbu	r2,-25440(gp)
   93218:	10803fcc 	andi	r2,r2,255
   9321c:	1005003a 	cmpeq	r2,r2,zero
   93220:	10001b1e 	bne	r2,zero,93290 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   93224:	d0a72803 	ldbu	r2,-25440(gp)
   93228:	10bfffc4 	addi	r2,r2,-1
   9322c:	d0a72805 	stb	r2,-25440(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   93230:	d0a72803 	ldbu	r2,-25440(gp)
   93234:	10803fcc 	andi	r2,r2,255
   93238:	1004c03a 	cmpne	r2,r2,zero
   9323c:	10000f1e 	bne	r2,zero,9327c <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   93240:	d0a73603 	ldbu	r2,-25384(gp)
   93244:	10803fcc 	andi	r2,r2,255
   93248:	1004c03a 	cmpne	r2,r2,zero
   9324c:	1000061e 	bne	r2,zero,93268 <OSSchedUnlock+0x98>
   93250:	e0bfff17 	ldw	r2,-4(fp)
   93254:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   93258:	e0bffd17 	ldw	r2,-12(fp)
   9325c:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   93260:	009408c0 	call	9408c <OS_Sched>
   93264:	00000e06 	br	932a0 <OSSchedUnlock+0xd0>
   93268:	e0bfff17 	ldw	r2,-4(fp)
   9326c:	e0bffc15 	stw	r2,-16(fp)
   93270:	e0bffc17 	ldw	r2,-16(fp)
   93274:	1001703a 	wrctl	status,r2
   93278:	00000906 	br	932a0 <OSSchedUnlock+0xd0>
   9327c:	e0bfff17 	ldw	r2,-4(fp)
   93280:	e0bffb15 	stw	r2,-20(fp)
   93284:	e0bffb17 	ldw	r2,-20(fp)
   93288:	1001703a 	wrctl	status,r2
   9328c:	00000406 	br	932a0 <OSSchedUnlock+0xd0>
   93290:	e0bfff17 	ldw	r2,-4(fp)
   93294:	e0bffa15 	stw	r2,-24(fp)
   93298:	e0bffa17 	ldw	r2,-24(fp)
   9329c:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   932a0:	e037883a 	mov	sp,fp
   932a4:	dfc00117 	ldw	ra,4(sp)
   932a8:	df000017 	ldw	fp,0(sp)
   932ac:	dec00204 	addi	sp,sp,8
   932b0:	f800283a 	ret

000932b4 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   932b4:	defffe04 	addi	sp,sp,-8
   932b8:	dfc00115 	stw	ra,4(sp)
   932bc:	df000015 	stw	fp,0(sp)
   932c0:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   932c4:	d0a72843 	ldbu	r2,-25439(gp)
   932c8:	10803fcc 	andi	r2,r2,255
   932cc:	1004c03a 	cmpne	r2,r2,zero
   932d0:	10000f1e 	bne	r2,zero,93310 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   932d4:	00941600 	call	94160 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   932d8:	d0a72a03 	ldbu	r2,-25432(gp)
   932dc:	d0a72a45 	stb	r2,-25431(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   932e0:	d0a72a03 	ldbu	r2,-25432(gp)
   932e4:	10803fcc 	andi	r2,r2,255
   932e8:	00c00334 	movhi	r3,12
   932ec:	18e2b904 	addi	r3,r3,-29980
   932f0:	1085883a 	add	r2,r2,r2
   932f4:	1085883a 	add	r2,r2,r2
   932f8:	10c5883a 	add	r2,r2,r3
   932fc:	10800017 	ldw	r2,0(r2)
   93300:	d0a73215 	stw	r2,-25400(gp)
        OSTCBCur      = OSTCBHighRdy;
   93304:	d0a73217 	ldw	r2,-25400(gp)
   93308:	d0a73715 	stw	r2,-25380(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   9330c:	009eb440 	call	9eb44 <OSStartHighRdy>
    }
}
   93310:	e037883a 	mov	sp,fp
   93314:	dfc00117 	ldw	ra,4(sp)
   93318:	df000017 	ldw	fp,0(sp)
   9331c:	dec00204 	addi	sp,sp,8
   93320:	f800283a 	ret

00093324 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   93324:	defff904 	addi	sp,sp,-28
   93328:	dfc00615 	stw	ra,24(sp)
   9332c:	df000515 	stw	fp,20(sp)
   93330:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   93334:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   93338:	01000084 	movi	r4,2
   9333c:	009c3b80 	call	9c3b8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   93340:	0005303a 	rdctl	r2,status
   93344:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93348:	e0fffe17 	ldw	r3,-8(fp)
   9334c:	00bfff84 	movi	r2,-2
   93350:	1884703a 	and	r2,r3,r2
   93354:	1001703a 	wrctl	status,r2
  
  return context;
   93358:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   9335c:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   93360:	d0272915 	stw	zero,-25436(gp)
   93364:	e0bfff17 	ldw	r2,-4(fp)
   93368:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9336c:	e0bffd17 	ldw	r2,-12(fp)
   93370:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   93374:	01001904 	movi	r4,100
   93378:	009c3b80 	call	9c3b8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9337c:	0005303a 	rdctl	r2,status
   93380:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   93384:	e0fffc17 	ldw	r3,-16(fp)
   93388:	00bfff84 	movi	r2,-2
   9338c:	1884703a 	and	r2,r3,r2
   93390:	1001703a 	wrctl	status,r2
  
  return context;
   93394:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   93398:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   9339c:	d0a72917 	ldw	r2,-25436(gp)
   933a0:	d0a72e15 	stw	r2,-25416(gp)
    OSStatRdy    = OS_TRUE;
   933a4:	00800044 	movi	r2,1
   933a8:	d0a73a05 	stb	r2,-25368(gp)
   933ac:	e0bfff17 	ldw	r2,-4(fp)
   933b0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   933b4:	e0bffb17 	ldw	r2,-20(fp)
   933b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   933bc:	e037883a 	mov	sp,fp
   933c0:	dfc00117 	ldw	ra,4(sp)
   933c4:	df000017 	ldw	fp,0(sp)
   933c8:	dec00204 	addi	sp,sp,8
   933cc:	f800283a 	ret

000933d0 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   933d0:	defff604 	addi	sp,sp,-40
   933d4:	dfc00915 	stw	ra,36(sp)
   933d8:	df000815 	stw	fp,32(sp)
   933dc:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   933e0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   933e4:	009ef100 	call	9ef10 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   933e8:	0005303a 	rdctl	r2,status
   933ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   933f0:	e0fffb17 	ldw	r3,-20(fp)
   933f4:	00bfff84 	movi	r2,-2
   933f8:	1884703a 	and	r2,r3,r2
   933fc:	1001703a 	wrctl	status,r2
  
  return context;
   93400:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   93404:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
   93408:	d0a73817 	ldw	r2,-25376(gp)
   9340c:	10800044 	addi	r2,r2,1
   93410:	d0a73815 	stw	r2,-25376(gp)
   93414:	e0bffc17 	ldw	r2,-16(fp)
   93418:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9341c:	e0bffa17 	ldw	r2,-24(fp)
   93420:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   93424:	d0a72843 	ldbu	r2,-25439(gp)
   93428:	10803fcc 	andi	r2,r2,255
   9342c:	10800058 	cmpnei	r2,r2,1
   93430:	1000721e 	bne	r2,zero,935fc <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   93434:	d0a72c03 	ldbu	r2,-25424(gp)
   93438:	10803fcc 	andi	r2,r2,255
   9343c:	e0bfff15 	stw	r2,-4(fp)
   93440:	e0ffff17 	ldw	r3,-4(fp)
   93444:	18800060 	cmpeqi	r2,r3,1
   93448:	10000a1e 	bne	r2,zero,93474 <OSTimeTick+0xa4>
   9344c:	e0ffff17 	ldw	r3,-4(fp)
   93450:	188000a0 	cmpeqi	r2,r3,2
   93454:	1000091e 	bne	r2,zero,9347c <OSTimeTick+0xac>
   93458:	e0ffff17 	ldw	r3,-4(fp)
   9345c:	1805003a 	cmpeq	r2,r3,zero
   93460:	1000011e 	bne	r2,zero,93468 <OSTimeTick+0x98>
   93464:	00000a06 	br	93490 <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   93468:	00800044 	movi	r2,1
   9346c:	e0bffd05 	stb	r2,-12(fp)
                 break;
   93470:	00000a06 	br	9349c <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   93474:	e03ffd05 	stb	zero,-12(fp)
                 break;
   93478:	00000806 	br	9349c <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   9347c:	00800044 	movi	r2,1
   93480:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   93484:	00800044 	movi	r2,1
   93488:	d0a72c05 	stb	r2,-25424(gp)
                 break;
   9348c:	00000306 	br	9349c <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   93490:	00800044 	movi	r2,1
   93494:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   93498:	d0272c05 	stb	zero,-25424(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   9349c:	e0bffd03 	ldbu	r2,-12(fp)
   934a0:	1005003a 	cmpeq	r2,r2,zero
   934a4:	1000551e 	bne	r2,zero,935fc <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   934a8:	d0a72b17 	ldw	r2,-25428(gp)
   934ac:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   934b0:	00004d06 	br	935e8 <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   934b4:	0005303a 	rdctl	r2,status
   934b8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   934bc:	e0fff917 	ldw	r3,-28(fp)
   934c0:	00bfff84 	movi	r2,-2
   934c4:	1884703a 	and	r2,r3,r2
   934c8:	1001703a 	wrctl	status,r2
  
  return context;
   934cc:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
   934d0:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   934d4:	e0bffe17 	ldw	r2,-8(fp)
   934d8:	10800b8b 	ldhu	r2,46(r2)
   934dc:	10bfffcc 	andi	r2,r2,65535
   934e0:	1005003a 	cmpeq	r2,r2,zero
   934e4:	1000391e 	bne	r2,zero,935cc <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   934e8:	e0bffe17 	ldw	r2,-8(fp)
   934ec:	10800b8b 	ldhu	r2,46(r2)
   934f0:	10bfffc4 	addi	r2,r2,-1
   934f4:	1007883a 	mov	r3,r2
   934f8:	e0bffe17 	ldw	r2,-8(fp)
   934fc:	10c00b8d 	sth	r3,46(r2)
   93500:	e0bffe17 	ldw	r2,-8(fp)
   93504:	10800b8b 	ldhu	r2,46(r2)
   93508:	10bfffcc 	andi	r2,r2,65535
   9350c:	1004c03a 	cmpne	r2,r2,zero
   93510:	10002e1e 	bne	r2,zero,935cc <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   93514:	e0bffe17 	ldw	r2,-8(fp)
   93518:	10800c03 	ldbu	r2,48(r2)
   9351c:	10803fcc 	andi	r2,r2,255
   93520:	10800dcc 	andi	r2,r2,55
   93524:	1005003a 	cmpeq	r2,r2,zero
   93528:	10000b1e 	bne	r2,zero,93558 <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   9352c:	e0bffe17 	ldw	r2,-8(fp)
   93530:	10c00c03 	ldbu	r3,48(r2)
   93534:	00bff204 	movi	r2,-56
   93538:	1884703a 	and	r2,r3,r2
   9353c:	1007883a 	mov	r3,r2
   93540:	e0bffe17 	ldw	r2,-8(fp)
   93544:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   93548:	e0fffe17 	ldw	r3,-8(fp)
   9354c:	00800044 	movi	r2,1
   93550:	18800c45 	stb	r2,49(r3)
   93554:	00000206 	br	93560 <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   93558:	e0bffe17 	ldw	r2,-8(fp)
   9355c:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   93560:	e0bffe17 	ldw	r2,-8(fp)
   93564:	10800c03 	ldbu	r2,48(r2)
   93568:	10803fcc 	andi	r2,r2,255
   9356c:	1080020c 	andi	r2,r2,8
   93570:	1004c03a 	cmpne	r2,r2,zero
   93574:	1000151e 	bne	r2,zero,935cc <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   93578:	e0bffe17 	ldw	r2,-8(fp)
   9357c:	10c00d83 	ldbu	r3,54(r2)
   93580:	d0a73403 	ldbu	r2,-25392(gp)
   93584:	1884b03a 	or	r2,r3,r2
   93588:	d0a73405 	stb	r2,-25392(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   9358c:	e0bffe17 	ldw	r2,-8(fp)
   93590:	10800d03 	ldbu	r2,52(r2)
   93594:	11003fcc 	andi	r4,r2,255
   93598:	e0bffe17 	ldw	r2,-8(fp)
   9359c:	10800d03 	ldbu	r2,52(r2)
   935a0:	10c03fcc 	andi	r3,r2,255
   935a4:	d0a73444 	addi	r2,gp,-25391
   935a8:	1885883a 	add	r2,r3,r2
   935ac:	10c00003 	ldbu	r3,0(r2)
   935b0:	e0bffe17 	ldw	r2,-8(fp)
   935b4:	10800d43 	ldbu	r2,53(r2)
   935b8:	1884b03a 	or	r2,r3,r2
   935bc:	1007883a 	mov	r3,r2
   935c0:	d0a73444 	addi	r2,gp,-25391
   935c4:	2085883a 	add	r2,r4,r2
   935c8:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   935cc:	e0bffe17 	ldw	r2,-8(fp)
   935d0:	10800517 	ldw	r2,20(r2)
   935d4:	e0bffe15 	stw	r2,-8(fp)
   935d8:	e0bffc17 	ldw	r2,-16(fp)
   935dc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   935e0:	e0bff817 	ldw	r2,-32(fp)
   935e4:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   935e8:	e0bffe17 	ldw	r2,-8(fp)
   935ec:	10800c83 	ldbu	r2,50(r2)
   935f0:	10803fcc 	andi	r2,r2,255
   935f4:	10800518 	cmpnei	r2,r2,20
   935f8:	103fae1e 	bne	r2,zero,934b4 <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   935fc:	e037883a 	mov	sp,fp
   93600:	dfc00117 	ldw	ra,4(sp)
   93604:	df000017 	ldw	fp,0(sp)
   93608:	dec00204 	addi	sp,sp,8
   9360c:	f800283a 	ret

00093610 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   93610:	deffff04 	addi	sp,sp,-4
   93614:	df000015 	stw	fp,0(sp)
   93618:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   9361c:	00804784 	movi	r2,286
}
   93620:	e037883a 	mov	sp,fp
   93624:	df000017 	ldw	fp,0(sp)
   93628:	dec00104 	addi	sp,sp,4
   9362c:	f800283a 	ret

00093630 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   93630:	deffff04 	addi	sp,sp,-4
   93634:	df000015 	stw	fp,0(sp)
   93638:	d839883a 	mov	fp,sp
}
   9363c:	e037883a 	mov	sp,fp
   93640:	df000017 	ldw	fp,0(sp)
   93644:	dec00104 	addi	sp,sp,4
   93648:	f800283a 	ret

0009364c <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   9364c:	defff804 	addi	sp,sp,-32
   93650:	dfc00715 	stw	ra,28(sp)
   93654:	df000615 	stw	fp,24(sp)
   93658:	df000604 	addi	fp,sp,24
   9365c:	e13ffc15 	stw	r4,-16(fp)
   93660:	e17ffd15 	stw	r5,-12(fp)
   93664:	e1bffe05 	stb	r6,-8(fp)
   93668:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   9366c:	e0bffc17 	ldw	r2,-16(fp)
   93670:	10800283 	ldbu	r2,10(r2)
   93674:	10c03fcc 	andi	r3,r2,255
   93678:	008002b4 	movhi	r2,10
   9367c:	10802504 	addi	r2,r2,148
   93680:	10c5883a 	add	r2,r2,r3
   93684:	10800003 	ldbu	r2,0(r2)
   93688:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   9368c:	e0fffa83 	ldbu	r3,-22(fp)
   93690:	e0bffc17 	ldw	r2,-16(fp)
   93694:	1885883a 	add	r2,r3,r2
   93698:	10800204 	addi	r2,r2,8
   9369c:	108000c3 	ldbu	r2,3(r2)
   936a0:	10c03fcc 	andi	r3,r2,255
   936a4:	008002b4 	movhi	r2,10
   936a8:	10802504 	addi	r2,r2,148
   936ac:	10c5883a 	add	r2,r2,r3
   936b0:	10800003 	ldbu	r2,0(r2)
   936b4:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   936b8:	e0bffa83 	ldbu	r2,-22(fp)
   936bc:	100490fa 	slli	r2,r2,3
   936c0:	1007883a 	mov	r3,r2
   936c4:	e0bffa43 	ldbu	r2,-23(fp)
   936c8:	1885883a 	add	r2,r3,r2
   936cc:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   936d0:	e0bffa03 	ldbu	r2,-24(fp)
   936d4:	00c00334 	movhi	r3,12
   936d8:	18e2b904 	addi	r3,r3,-29980
   936dc:	1085883a 	add	r2,r2,r2
   936e0:	1085883a 	add	r2,r2,r2
   936e4:	10c5883a 	add	r2,r2,r3
   936e8:	10800017 	ldw	r2,0(r2)
   936ec:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   936f0:	e0bffb17 	ldw	r2,-20(fp)
   936f4:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   936f8:	e0fffb17 	ldw	r3,-20(fp)
   936fc:	e0bffd17 	ldw	r2,-12(fp)
   93700:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   93704:	e0bffb17 	ldw	r2,-20(fp)
   93708:	10800c03 	ldbu	r2,48(r2)
   9370c:	1007883a 	mov	r3,r2
   93710:	e0bffe03 	ldbu	r2,-8(fp)
   93714:	0084303a 	nor	r2,zero,r2
   93718:	1884703a 	and	r2,r3,r2
   9371c:	1007883a 	mov	r3,r2
   93720:	e0bffb17 	ldw	r2,-20(fp)
   93724:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   93728:	e0fffb17 	ldw	r3,-20(fp)
   9372c:	e0bfff03 	ldbu	r2,-4(fp)
   93730:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   93734:	e0bffb17 	ldw	r2,-20(fp)
   93738:	10800c03 	ldbu	r2,48(r2)
   9373c:	10803fcc 	andi	r2,r2,255
   93740:	1080020c 	andi	r2,r2,8
   93744:	1004c03a 	cmpne	r2,r2,zero
   93748:	1000111e 	bne	r2,zero,93790 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   9374c:	e0bffb17 	ldw	r2,-20(fp)
   93750:	10c00d83 	ldbu	r3,54(r2)
   93754:	d0a73403 	ldbu	r2,-25392(gp)
   93758:	1884b03a 	or	r2,r3,r2
   9375c:	d0a73405 	stb	r2,-25392(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   93760:	e13ffa83 	ldbu	r4,-22(fp)
   93764:	e0fffa83 	ldbu	r3,-22(fp)
   93768:	d0a73444 	addi	r2,gp,-25391
   9376c:	1885883a 	add	r2,r3,r2
   93770:	10c00003 	ldbu	r3,0(r2)
   93774:	e0bffb17 	ldw	r2,-20(fp)
   93778:	10800d43 	ldbu	r2,53(r2)
   9377c:	1884b03a 	or	r2,r3,r2
   93780:	1007883a 	mov	r3,r2
   93784:	d0a73444 	addi	r2,gp,-25391
   93788:	2085883a 	add	r2,r4,r2
   9378c:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   93790:	e13ffb17 	ldw	r4,-20(fp)
   93794:	e17ffc17 	ldw	r5,-16(fp)
   93798:	0093a440 	call	93a44 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   9379c:	e0bffb17 	ldw	r2,-20(fp)
   937a0:	10800817 	ldw	r2,32(r2)
   937a4:	1005003a 	cmpeq	r2,r2,zero
   937a8:	1000071e 	bne	r2,zero,937c8 <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   937ac:	e0bffb17 	ldw	r2,-20(fp)
   937b0:	11400817 	ldw	r5,32(r2)
   937b4:	e13ffb17 	ldw	r4,-20(fp)
   937b8:	0093afc0 	call	93afc <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   937bc:	e0fffb17 	ldw	r3,-20(fp)
   937c0:	e0bffc17 	ldw	r2,-16(fp)
   937c4:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
   937c8:	e0bffa03 	ldbu	r2,-24(fp)
}
   937cc:	e037883a 	mov	sp,fp
   937d0:	dfc00117 	ldw	ra,4(sp)
   937d4:	df000017 	ldw	fp,0(sp)
   937d8:	dec00204 	addi	sp,sp,8
   937dc:	f800283a 	ret

000937e0 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   937e0:	defffd04 	addi	sp,sp,-12
   937e4:	df000215 	stw	fp,8(sp)
   937e8:	df000204 	addi	fp,sp,8
   937ec:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   937f0:	d0e73717 	ldw	r3,-25380(gp)
   937f4:	e0bfff17 	ldw	r2,-4(fp)
   937f8:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   937fc:	d0a73717 	ldw	r2,-25380(gp)
   93800:	10800d03 	ldbu	r2,52(r2)
   93804:	11003fcc 	andi	r4,r2,255
   93808:	d0a73717 	ldw	r2,-25380(gp)
   9380c:	10800d03 	ldbu	r2,52(r2)
   93810:	10c03fcc 	andi	r3,r2,255
   93814:	e0bfff17 	ldw	r2,-4(fp)
   93818:	1885883a 	add	r2,r3,r2
   9381c:	10800204 	addi	r2,r2,8
   93820:	10c000c3 	ldbu	r3,3(r2)
   93824:	d0a73717 	ldw	r2,-25380(gp)
   93828:	10800d43 	ldbu	r2,53(r2)
   9382c:	1884b03a 	or	r2,r3,r2
   93830:	1007883a 	mov	r3,r2
   93834:	e0bfff17 	ldw	r2,-4(fp)
   93838:	2085883a 	add	r2,r4,r2
   9383c:	10800204 	addi	r2,r2,8
   93840:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   93844:	e0bfff17 	ldw	r2,-4(fp)
   93848:	10c00283 	ldbu	r3,10(r2)
   9384c:	d0a73717 	ldw	r2,-25380(gp)
   93850:	10800d83 	ldbu	r2,54(r2)
   93854:	1884b03a 	or	r2,r3,r2
   93858:	1007883a 	mov	r3,r2
   9385c:	e0bfff17 	ldw	r2,-4(fp)
   93860:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   93864:	d0a73717 	ldw	r2,-25380(gp)
   93868:	10800d03 	ldbu	r2,52(r2)
   9386c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   93870:	e13ffe03 	ldbu	r4,-8(fp)
   93874:	e0fffe03 	ldbu	r3,-8(fp)
   93878:	d0a73444 	addi	r2,gp,-25391
   9387c:	1885883a 	add	r2,r3,r2
   93880:	10800003 	ldbu	r2,0(r2)
   93884:	1007883a 	mov	r3,r2
   93888:	d0a73717 	ldw	r2,-25380(gp)
   9388c:	10800d43 	ldbu	r2,53(r2)
   93890:	0084303a 	nor	r2,zero,r2
   93894:	1884703a 	and	r2,r3,r2
   93898:	1007883a 	mov	r3,r2
   9389c:	d0a73444 	addi	r2,gp,-25391
   938a0:	2085883a 	add	r2,r4,r2
   938a4:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
   938a8:	e0fffe03 	ldbu	r3,-8(fp)
   938ac:	d0a73444 	addi	r2,gp,-25391
   938b0:	1885883a 	add	r2,r3,r2
   938b4:	10800003 	ldbu	r2,0(r2)
   938b8:	10803fcc 	andi	r2,r2,255
   938bc:	1004c03a 	cmpne	r2,r2,zero
   938c0:	1000071e 	bne	r2,zero,938e0 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   938c4:	d0a73717 	ldw	r2,-25380(gp)
   938c8:	10800d83 	ldbu	r2,54(r2)
   938cc:	0084303a 	nor	r2,zero,r2
   938d0:	1007883a 	mov	r3,r2
   938d4:	d0a73403 	ldbu	r2,-25392(gp)
   938d8:	1884703a 	and	r2,r3,r2
   938dc:	d0a73405 	stb	r2,-25392(gp)
    }
}
   938e0:	e037883a 	mov	sp,fp
   938e4:	df000017 	ldw	fp,0(sp)
   938e8:	dec00104 	addi	sp,sp,4
   938ec:	f800283a 	ret

000938f0 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   938f0:	defffb04 	addi	sp,sp,-20
   938f4:	df000415 	stw	fp,16(sp)
   938f8:	df000404 	addi	fp,sp,16
   938fc:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   93900:	d0a73717 	ldw	r2,-25380(gp)
   93904:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   93908:	d0e73717 	ldw	r3,-25380(gp)
   9390c:	e0bfff17 	ldw	r2,-4(fp)
   93910:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
   93914:	e0bfff17 	ldw	r2,-4(fp)
   93918:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
   9391c:	e0bffe17 	ldw	r2,-8(fp)
   93920:	10800017 	ldw	r2,0(r2)
   93924:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   93928:	00002006 	br	939ac <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   9392c:	d0a73717 	ldw	r2,-25380(gp)
   93930:	10800d03 	ldbu	r2,52(r2)
   93934:	11003fcc 	andi	r4,r2,255
   93938:	d0a73717 	ldw	r2,-25380(gp)
   9393c:	10800d03 	ldbu	r2,52(r2)
   93940:	10c03fcc 	andi	r3,r2,255
   93944:	e0bffd17 	ldw	r2,-12(fp)
   93948:	1885883a 	add	r2,r3,r2
   9394c:	10800204 	addi	r2,r2,8
   93950:	10c000c3 	ldbu	r3,3(r2)
   93954:	d0a73717 	ldw	r2,-25380(gp)
   93958:	10800d43 	ldbu	r2,53(r2)
   9395c:	1884b03a 	or	r2,r3,r2
   93960:	1007883a 	mov	r3,r2
   93964:	e0bffd17 	ldw	r2,-12(fp)
   93968:	2085883a 	add	r2,r4,r2
   9396c:	10800204 	addi	r2,r2,8
   93970:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   93974:	e0bffd17 	ldw	r2,-12(fp)
   93978:	10c00283 	ldbu	r3,10(r2)
   9397c:	d0a73717 	ldw	r2,-25380(gp)
   93980:	10800d83 	ldbu	r2,54(r2)
   93984:	1884b03a 	or	r2,r3,r2
   93988:	1007883a 	mov	r3,r2
   9398c:	e0bffd17 	ldw	r2,-12(fp)
   93990:	10c00285 	stb	r3,10(r2)
        pevents++;
   93994:	e0bffe17 	ldw	r2,-8(fp)
   93998:	10800104 	addi	r2,r2,4
   9399c:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
   939a0:	e0bffe17 	ldw	r2,-8(fp)
   939a4:	10800017 	ldw	r2,0(r2)
   939a8:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   939ac:	e0bffd17 	ldw	r2,-12(fp)
   939b0:	1004c03a 	cmpne	r2,r2,zero
   939b4:	103fdd1e 	bne	r2,zero,9392c <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   939b8:	d0a73717 	ldw	r2,-25380(gp)
   939bc:	10800d03 	ldbu	r2,52(r2)
   939c0:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   939c4:	e13ffc03 	ldbu	r4,-16(fp)
   939c8:	e0fffc03 	ldbu	r3,-16(fp)
   939cc:	d0a73444 	addi	r2,gp,-25391
   939d0:	1885883a 	add	r2,r3,r2
   939d4:	10800003 	ldbu	r2,0(r2)
   939d8:	1007883a 	mov	r3,r2
   939dc:	d0a73717 	ldw	r2,-25380(gp)
   939e0:	10800d43 	ldbu	r2,53(r2)
   939e4:	0084303a 	nor	r2,zero,r2
   939e8:	1884703a 	and	r2,r3,r2
   939ec:	1007883a 	mov	r3,r2
   939f0:	d0a73444 	addi	r2,gp,-25391
   939f4:	2085883a 	add	r2,r4,r2
   939f8:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
   939fc:	e0fffc03 	ldbu	r3,-16(fp)
   93a00:	d0a73444 	addi	r2,gp,-25391
   93a04:	1885883a 	add	r2,r3,r2
   93a08:	10800003 	ldbu	r2,0(r2)
   93a0c:	10803fcc 	andi	r2,r2,255
   93a10:	1004c03a 	cmpne	r2,r2,zero
   93a14:	1000071e 	bne	r2,zero,93a34 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   93a18:	d0a73717 	ldw	r2,-25380(gp)
   93a1c:	10800d83 	ldbu	r2,54(r2)
   93a20:	0084303a 	nor	r2,zero,r2
   93a24:	1007883a 	mov	r3,r2
   93a28:	d0a73403 	ldbu	r2,-25392(gp)
   93a2c:	1884703a 	and	r2,r3,r2
   93a30:	d0a73405 	stb	r2,-25392(gp)
    }
}
   93a34:	e037883a 	mov	sp,fp
   93a38:	df000017 	ldw	fp,0(sp)
   93a3c:	dec00104 	addi	sp,sp,4
   93a40:	f800283a 	ret

00093a44 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   93a44:	defffc04 	addi	sp,sp,-16
   93a48:	df000315 	stw	fp,12(sp)
   93a4c:	df000304 	addi	fp,sp,12
   93a50:	e13ffe15 	stw	r4,-8(fp)
   93a54:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   93a58:	e0bffe17 	ldw	r2,-8(fp)
   93a5c:	10800d03 	ldbu	r2,52(r2)
   93a60:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   93a64:	e13ffd03 	ldbu	r4,-12(fp)
   93a68:	e0fffd03 	ldbu	r3,-12(fp)
   93a6c:	e0bfff17 	ldw	r2,-4(fp)
   93a70:	1885883a 	add	r2,r3,r2
   93a74:	10800204 	addi	r2,r2,8
   93a78:	108000c3 	ldbu	r2,3(r2)
   93a7c:	1007883a 	mov	r3,r2
   93a80:	e0bffe17 	ldw	r2,-8(fp)
   93a84:	10800d43 	ldbu	r2,53(r2)
   93a88:	0084303a 	nor	r2,zero,r2
   93a8c:	1884703a 	and	r2,r3,r2
   93a90:	1007883a 	mov	r3,r2
   93a94:	e0bfff17 	ldw	r2,-4(fp)
   93a98:	2085883a 	add	r2,r4,r2
   93a9c:	10800204 	addi	r2,r2,8
   93aa0:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
   93aa4:	e0fffd03 	ldbu	r3,-12(fp)
   93aa8:	e0bfff17 	ldw	r2,-4(fp)
   93aac:	1885883a 	add	r2,r3,r2
   93ab0:	10800204 	addi	r2,r2,8
   93ab4:	108000c3 	ldbu	r2,3(r2)
   93ab8:	10803fcc 	andi	r2,r2,255
   93abc:	1004c03a 	cmpne	r2,r2,zero
   93ac0:	10000a1e 	bne	r2,zero,93aec <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   93ac4:	e0bfff17 	ldw	r2,-4(fp)
   93ac8:	10800283 	ldbu	r2,10(r2)
   93acc:	1007883a 	mov	r3,r2
   93ad0:	e0bffe17 	ldw	r2,-8(fp)
   93ad4:	10800d83 	ldbu	r2,54(r2)
   93ad8:	0084303a 	nor	r2,zero,r2
   93adc:	1884703a 	and	r2,r3,r2
   93ae0:	1007883a 	mov	r3,r2
   93ae4:	e0bfff17 	ldw	r2,-4(fp)
   93ae8:	10c00285 	stb	r3,10(r2)
    }
}
   93aec:	e037883a 	mov	sp,fp
   93af0:	df000017 	ldw	fp,0(sp)
   93af4:	dec00104 	addi	sp,sp,4
   93af8:	f800283a 	ret

00093afc <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   93afc:	defffa04 	addi	sp,sp,-24
   93b00:	df000515 	stw	fp,20(sp)
   93b04:	df000504 	addi	fp,sp,20
   93b08:	e13ffe15 	stw	r4,-8(fp)
   93b0c:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   93b10:	e0bffe17 	ldw	r2,-8(fp)
   93b14:	10800d03 	ldbu	r2,52(r2)
   93b18:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
   93b1c:	e0bffe17 	ldw	r2,-8(fp)
   93b20:	10800d83 	ldbu	r2,54(r2)
   93b24:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
   93b28:	e0bffe17 	ldw	r2,-8(fp)
   93b2c:	10800d43 	ldbu	r2,53(r2)
   93b30:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
   93b34:	e0bfff17 	ldw	r2,-4(fp)
   93b38:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
   93b3c:	e0bffd17 	ldw	r2,-12(fp)
   93b40:	10800017 	ldw	r2,0(r2)
   93b44:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   93b48:	00002606 	br	93be4 <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
   93b4c:	e13ffb83 	ldbu	r4,-18(fp)
   93b50:	e0fffb83 	ldbu	r3,-18(fp)
   93b54:	e0bffc17 	ldw	r2,-16(fp)
   93b58:	1885883a 	add	r2,r3,r2
   93b5c:	10800204 	addi	r2,r2,8
   93b60:	108000c3 	ldbu	r2,3(r2)
   93b64:	1007883a 	mov	r3,r2
   93b68:	e0bffb03 	ldbu	r2,-20(fp)
   93b6c:	0084303a 	nor	r2,zero,r2
   93b70:	1884703a 	and	r2,r3,r2
   93b74:	1007883a 	mov	r3,r2
   93b78:	e0bffc17 	ldw	r2,-16(fp)
   93b7c:	2085883a 	add	r2,r4,r2
   93b80:	10800204 	addi	r2,r2,8
   93b84:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
   93b88:	e0fffb83 	ldbu	r3,-18(fp)
   93b8c:	e0bffc17 	ldw	r2,-16(fp)
   93b90:	1885883a 	add	r2,r3,r2
   93b94:	10800204 	addi	r2,r2,8
   93b98:	108000c3 	ldbu	r2,3(r2)
   93b9c:	10803fcc 	andi	r2,r2,255
   93ba0:	1004c03a 	cmpne	r2,r2,zero
   93ba4:	1000091e 	bne	r2,zero,93bcc <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
   93ba8:	e0bffc17 	ldw	r2,-16(fp)
   93bac:	10800283 	ldbu	r2,10(r2)
   93bb0:	1007883a 	mov	r3,r2
   93bb4:	e0bffb43 	ldbu	r2,-19(fp)
   93bb8:	0084303a 	nor	r2,zero,r2
   93bbc:	1884703a 	and	r2,r3,r2
   93bc0:	1007883a 	mov	r3,r2
   93bc4:	e0bffc17 	ldw	r2,-16(fp)
   93bc8:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   93bcc:	e0bffd17 	ldw	r2,-12(fp)
   93bd0:	10800104 	addi	r2,r2,4
   93bd4:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
   93bd8:	e0bffd17 	ldw	r2,-12(fp)
   93bdc:	10800017 	ldw	r2,0(r2)
   93be0:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   93be4:	e0bffc17 	ldw	r2,-16(fp)
   93be8:	1004c03a 	cmpne	r2,r2,zero
   93bec:	103fd71e 	bne	r2,zero,93b4c <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   93bf0:	e037883a 	mov	sp,fp
   93bf4:	df000017 	ldw	fp,0(sp)
   93bf8:	dec00104 	addi	sp,sp,4
   93bfc:	f800283a 	ret

00093c00 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   93c00:	defffc04 	addi	sp,sp,-16
   93c04:	df000315 	stw	fp,12(sp)
   93c08:	df000304 	addi	fp,sp,12
   93c0c:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   93c10:	e0bfff17 	ldw	r2,-4(fp)
   93c14:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   93c18:	e0bfff17 	ldw	r2,-4(fp)
   93c1c:	108002c4 	addi	r2,r2,11
   93c20:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   93c24:	e03ffd05 	stb	zero,-12(fp)
   93c28:	00000806 	br	93c4c <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
   93c2c:	e0bffe17 	ldw	r2,-8(fp)
   93c30:	10000005 	stb	zero,0(r2)
   93c34:	e0bffe17 	ldw	r2,-8(fp)
   93c38:	10800044 	addi	r2,r2,1
   93c3c:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   93c40:	e0bffd03 	ldbu	r2,-12(fp)
   93c44:	10800044 	addi	r2,r2,1
   93c48:	e0bffd05 	stb	r2,-12(fp)
   93c4c:	e0bffd03 	ldbu	r2,-12(fp)
   93c50:	108000f0 	cmpltui	r2,r2,3
   93c54:	103ff51e 	bne	r2,zero,93c2c <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
   93c58:	e037883a 	mov	sp,fp
   93c5c:	df000017 	ldw	fp,0(sp)
   93c60:	dec00104 	addi	sp,sp,4
   93c64:	f800283a 	ret

00093c68 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   93c68:	defffb04 	addi	sp,sp,-20
   93c6c:	dfc00415 	stw	ra,16(sp)
   93c70:	df000315 	stw	fp,12(sp)
   93c74:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   93c78:	010002f4 	movhi	r4,11
   93c7c:	211ea504 	addi	r4,r4,31380
   93c80:	0142d004 	movi	r5,2880
   93c84:	0093fcc0 	call	93fcc <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   93c88:	008002f4 	movhi	r2,11
   93c8c:	109ea504 	addi	r2,r2,31380
   93c90:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   93c94:	008002f4 	movhi	r2,11
   93c98:	109eb104 	addi	r2,r2,31428
   93c9c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   93ca0:	e03fff0d 	sth	zero,-4(fp)
   93ca4:	00001306 	br	93cf4 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   93ca8:	e0bffe17 	ldw	r2,-8(fp)
   93cac:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   93cb0:	e0fffe17 	ldw	r3,-8(fp)
   93cb4:	e0bffd17 	ldw	r2,-12(fp)
   93cb8:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   93cbc:	e0fffe17 	ldw	r3,-8(fp)
   93cc0:	00800fc4 	movi	r2,63
   93cc4:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   93cc8:	e0bffe17 	ldw	r2,-8(fp)
   93ccc:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   93cd0:	e0bffe17 	ldw	r2,-8(fp)
   93cd4:	10800c04 	addi	r2,r2,48
   93cd8:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   93cdc:	e0bffd17 	ldw	r2,-12(fp)
   93ce0:	10800c04 	addi	r2,r2,48
   93ce4:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   93ce8:	e0bfff0b 	ldhu	r2,-4(fp)
   93cec:	10800044 	addi	r2,r2,1
   93cf0:	e0bfff0d 	sth	r2,-4(fp)
   93cf4:	e0bfff0b 	ldhu	r2,-4(fp)
   93cf8:	10800ef0 	cmpltui	r2,r2,59
   93cfc:	103fea1e 	bne	r2,zero,93ca8 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   93d00:	e0bffe17 	ldw	r2,-8(fp)
   93d04:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   93d08:	e0bffe17 	ldw	r2,-8(fp)
   93d0c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   93d10:	e0fffe17 	ldw	r3,-8(fp)
   93d14:	00800fc4 	movi	r2,63
   93d18:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   93d1c:	e0bffe17 	ldw	r2,-8(fp)
   93d20:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   93d24:	008002f4 	movhi	r2,11
   93d28:	109ea504 	addi	r2,r2,31380
   93d2c:	d0a73515 	stw	r2,-25388(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   93d30:	e037883a 	mov	sp,fp
   93d34:	dfc00117 	ldw	ra,4(sp)
   93d38:	df000017 	ldw	fp,0(sp)
   93d3c:	dec00204 	addi	sp,sp,8
   93d40:	f800283a 	ret

00093d44 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   93d44:	deffff04 	addi	sp,sp,-4
   93d48:	df000015 	stw	fp,0(sp)
   93d4c:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   93d50:	d0273815 	stw	zero,-25376(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   93d54:	d0273605 	stb	zero,-25384(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   93d58:	d0272805 	stb	zero,-25440(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   93d5c:	d0273045 	stb	zero,-25407(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   93d60:	d0272845 	stb	zero,-25439(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   93d64:	d0272d15 	stw	zero,-25420(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   93d68:	d0272915 	stw	zero,-25436(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   93d6c:	d0273b15 	stw	zero,-25364(gp)
    OSIdleCtrMax  = 0L;
   93d70:	d0272e15 	stw	zero,-25416(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   93d74:	d0273a05 	stb	zero,-25368(gp)
#endif
}
   93d78:	e037883a 	mov	sp,fp
   93d7c:	df000017 	ldw	fp,0(sp)
   93d80:	dec00104 	addi	sp,sp,4
   93d84:	f800283a 	ret

00093d88 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   93d88:	defffd04 	addi	sp,sp,-12
   93d8c:	df000215 	stw	fp,8(sp)
   93d90:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   93d94:	d0273405 	stb	zero,-25392(gp)
    prdytbl       = &OSRdyTbl[0];
   93d98:	d0a73444 	addi	r2,gp,-25391
   93d9c:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   93da0:	e03fff05 	stb	zero,-4(fp)
   93da4:	00000806 	br	93dc8 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
   93da8:	e0bffe17 	ldw	r2,-8(fp)
   93dac:	10000005 	stb	zero,0(r2)
   93db0:	e0bffe17 	ldw	r2,-8(fp)
   93db4:	10800044 	addi	r2,r2,1
   93db8:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   93dbc:	e0bfff03 	ldbu	r2,-4(fp)
   93dc0:	10800044 	addi	r2,r2,1
   93dc4:	e0bfff05 	stb	r2,-4(fp)
   93dc8:	e0bfff03 	ldbu	r2,-4(fp)
   93dcc:	108000f0 	cmpltui	r2,r2,3
   93dd0:	103ff51e 	bne	r2,zero,93da8 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   93dd4:	d0272a45 	stb	zero,-25431(gp)
    OSPrioHighRdy = 0;
   93dd8:	d0272a05 	stb	zero,-25432(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   93ddc:	d0273215 	stw	zero,-25400(gp)
    OSTCBCur      = (OS_TCB *)0;
   93de0:	d0273715 	stw	zero,-25380(gp)
}
   93de4:	e037883a 	mov	sp,fp
   93de8:	df000017 	ldw	fp,0(sp)
   93dec:	dec00104 	addi	sp,sp,4
   93df0:	f800283a 	ret

00093df4 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   93df4:	defff804 	addi	sp,sp,-32
   93df8:	dfc00715 	stw	ra,28(sp)
   93dfc:	df000615 	stw	fp,24(sp)
   93e00:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   93e04:	018002f4 	movhi	r6,11
   93e08:	319ea404 	addi	r6,r6,31376
   93e0c:	00bfffd4 	movui	r2,65535
   93e10:	d8800015 	stw	r2,0(sp)
   93e14:	008002f4 	movhi	r2,11
   93e18:	109ca504 	addi	r2,r2,29332
   93e1c:	d8800115 	stw	r2,4(sp)
   93e20:	00808004 	movi	r2,512
   93e24:	d8800215 	stw	r2,8(sp)
   93e28:	d8000315 	stw	zero,12(sp)
   93e2c:	008000c4 	movi	r2,3
   93e30:	d8800415 	stw	r2,16(sp)
   93e34:	01000274 	movhi	r4,9
   93e38:	2110aa04 	addi	r4,r4,17064
   93e3c:	000b883a 	mov	r5,zero
   93e40:	01c00504 	movi	r7,20
   93e44:	009b0c00 	call	9b0c0 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   93e48:	014002b4 	movhi	r5,10
   93e4c:	29406504 	addi	r5,r5,404
   93e50:	01000504 	movi	r4,20
   93e54:	e1bfff04 	addi	r6,fp,-4
   93e58:	009b9f40 	call	9b9f4 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   93e5c:	e037883a 	mov	sp,fp
   93e60:	dfc00117 	ldw	ra,4(sp)
   93e64:	df000017 	ldw	fp,0(sp)
   93e68:	dec00204 	addi	sp,sp,8
   93e6c:	f800283a 	ret

00093e70 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   93e70:	defff804 	addi	sp,sp,-32
   93e74:	dfc00715 	stw	ra,28(sp)
   93e78:	df000615 	stw	fp,24(sp)
   93e7c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   93e80:	018002f4 	movhi	r6,11
   93e84:	319c2c04 	addi	r6,r6,28848
   93e88:	00bfff94 	movui	r2,65534
   93e8c:	d8800015 	stw	r2,0(sp)
   93e90:	008002f4 	movhi	r2,11
   93e94:	109a2d04 	addi	r2,r2,26804
   93e98:	d8800115 	stw	r2,4(sp)
   93e9c:	00808004 	movi	r2,512
   93ea0:	d8800215 	stw	r2,8(sp)
   93ea4:	d8000315 	stw	zero,12(sp)
   93ea8:	008000c4 	movi	r2,3
   93eac:	d8800415 	stw	r2,16(sp)
   93eb0:	01000274 	movhi	r4,9
   93eb4:	2110c104 	addi	r4,r4,17156
   93eb8:	000b883a 	mov	r5,zero
   93ebc:	01c004c4 	movi	r7,19
   93ec0:	009b0c00 	call	9b0c0 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   93ec4:	014002b4 	movhi	r5,10
   93ec8:	29406904 	addi	r5,r5,420
   93ecc:	010004c4 	movi	r4,19
   93ed0:	e1bfff04 	addi	r6,fp,-4
   93ed4:	009b9f40 	call	9b9f4 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   93ed8:	e037883a 	mov	sp,fp
   93edc:	dfc00117 	ldw	ra,4(sp)
   93ee0:	df000017 	ldw	fp,0(sp)
   93ee4:	dec00204 	addi	sp,sp,8
   93ee8:	f800283a 	ret

00093eec <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   93eec:	defffb04 	addi	sp,sp,-20
   93ef0:	dfc00415 	stw	ra,16(sp)
   93ef4:	df000315 	stw	fp,12(sp)
   93ef8:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   93efc:	01000334 	movhi	r4,12
   93f00:	21217504 	addi	r4,r4,-31276
   93f04:	01414404 	movi	r5,1296
   93f08:	0093fcc0 	call	93fcc <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   93f0c:	01000334 	movhi	r4,12
   93f10:	2122b904 	addi	r4,r4,-29980
   93f14:	01401504 	movi	r5,84
   93f18:	0093fcc0 	call	93fcc <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   93f1c:	00800334 	movhi	r2,12
   93f20:	10a17504 	addi	r2,r2,-31276
   93f24:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   93f28:	00800334 	movhi	r2,12
   93f2c:	10a19004 	addi	r2,r2,-31168
   93f30:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   93f34:	e03fff05 	stb	zero,-4(fp)
   93f38:	00001106 	br	93f80 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   93f3c:	e0fffe17 	ldw	r3,-8(fp)
   93f40:	e0bffd17 	ldw	r2,-12(fp)
   93f44:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   93f48:	e0fffe17 	ldw	r3,-8(fp)
   93f4c:	00800fc4 	movi	r2,63
   93f50:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   93f54:	e0bffe17 	ldw	r2,-8(fp)
   93f58:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   93f5c:	e0bffe17 	ldw	r2,-8(fp)
   93f60:	10801b04 	addi	r2,r2,108
   93f64:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   93f68:	e0bffd17 	ldw	r2,-12(fp)
   93f6c:	10801b04 	addi	r2,r2,108
   93f70:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   93f74:	e0bfff03 	ldbu	r2,-4(fp)
   93f78:	10800044 	addi	r2,r2,1
   93f7c:	e0bfff05 	stb	r2,-4(fp)
   93f80:	e0bfff03 	ldbu	r2,-4(fp)
   93f84:	108002f0 	cmpltui	r2,r2,11
   93f88:	103fec1e 	bne	r2,zero,93f3c <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   93f8c:	e0bffe17 	ldw	r2,-8(fp)
   93f90:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   93f94:	e0fffe17 	ldw	r3,-8(fp)
   93f98:	00800fc4 	movi	r2,63
   93f9c:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   93fa0:	e0bffe17 	ldw	r2,-8(fp)
   93fa4:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   93fa8:	d0272b15 	stw	zero,-25428(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   93fac:	00800334 	movhi	r2,12
   93fb0:	10a17504 	addi	r2,r2,-31276
   93fb4:	d0a72f15 	stw	r2,-25412(gp)
}
   93fb8:	e037883a 	mov	sp,fp
   93fbc:	dfc00117 	ldw	ra,4(sp)
   93fc0:	df000017 	ldw	fp,0(sp)
   93fc4:	dec00204 	addi	sp,sp,8
   93fc8:	f800283a 	ret

00093fcc <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   93fcc:	defffd04 	addi	sp,sp,-12
   93fd0:	df000215 	stw	fp,8(sp)
   93fd4:	df000204 	addi	fp,sp,8
   93fd8:	e13ffe15 	stw	r4,-8(fp)
   93fdc:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
   93fe0:	00000806 	br	94004 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   93fe4:	e0bffe17 	ldw	r2,-8(fp)
   93fe8:	10000005 	stb	zero,0(r2)
   93fec:	e0bffe17 	ldw	r2,-8(fp)
   93ff0:	10800044 	addi	r2,r2,1
   93ff4:	e0bffe15 	stw	r2,-8(fp)
        size--;
   93ff8:	e0bfff0b 	ldhu	r2,-4(fp)
   93ffc:	10bfffc4 	addi	r2,r2,-1
   94000:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   94004:	e0bfff0b 	ldhu	r2,-4(fp)
   94008:	1004c03a 	cmpne	r2,r2,zero
   9400c:	103ff51e 	bne	r2,zero,93fe4 <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   94010:	e037883a 	mov	sp,fp
   94014:	df000017 	ldw	fp,0(sp)
   94018:	dec00104 	addi	sp,sp,4
   9401c:	f800283a 	ret

00094020 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   94020:	defffc04 	addi	sp,sp,-16
   94024:	df000315 	stw	fp,12(sp)
   94028:	df000304 	addi	fp,sp,12
   9402c:	e13ffd15 	stw	r4,-12(fp)
   94030:	e17ffe15 	stw	r5,-8(fp)
   94034:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
   94038:	00000d06 	br	94070 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
   9403c:	e0bffe17 	ldw	r2,-8(fp)
   94040:	10c00003 	ldbu	r3,0(r2)
   94044:	e0bffd17 	ldw	r2,-12(fp)
   94048:	10c00005 	stb	r3,0(r2)
   9404c:	e0bffd17 	ldw	r2,-12(fp)
   94050:	10800044 	addi	r2,r2,1
   94054:	e0bffd15 	stw	r2,-12(fp)
   94058:	e0bffe17 	ldw	r2,-8(fp)
   9405c:	10800044 	addi	r2,r2,1
   94060:	e0bffe15 	stw	r2,-8(fp)
        size--;
   94064:	e0bfff0b 	ldhu	r2,-4(fp)
   94068:	10bfffc4 	addi	r2,r2,-1
   9406c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   94070:	e0bfff0b 	ldhu	r2,-4(fp)
   94074:	1004c03a 	cmpne	r2,r2,zero
   94078:	103ff01e 	bne	r2,zero,9403c <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
   9407c:	e037883a 	mov	sp,fp
   94080:	df000017 	ldw	fp,0(sp)
   94084:	dec00104 	addi	sp,sp,4
   94088:	f800283a 	ret

0009408c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   9408c:	defffb04 	addi	sp,sp,-20
   94090:	dfc00415 	stw	ra,16(sp)
   94094:	df000315 	stw	fp,12(sp)
   94098:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   9409c:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   940a0:	0005303a 	rdctl	r2,status
   940a4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   940a8:	e0fffe17 	ldw	r3,-8(fp)
   940ac:	00bfff84 	movi	r2,-2
   940b0:	1884703a 	and	r2,r3,r2
   940b4:	1001703a 	wrctl	status,r2
  
  return context;
   940b8:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   940bc:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   940c0:	d0a73603 	ldbu	r2,-25384(gp)
   940c4:	10803fcc 	andi	r2,r2,255
   940c8:	1004c03a 	cmpne	r2,r2,zero
   940cc:	10001b1e 	bne	r2,zero,9413c <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   940d0:	d0a72803 	ldbu	r2,-25440(gp)
   940d4:	10803fcc 	andi	r2,r2,255
   940d8:	1004c03a 	cmpne	r2,r2,zero
   940dc:	1000171e 	bne	r2,zero,9413c <OS_Sched+0xb0>
            OS_SchedNew();
   940e0:	00941600 	call	94160 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   940e4:	d0a72a03 	ldbu	r2,-25432(gp)
   940e8:	d0e72a43 	ldbu	r3,-25431(gp)
   940ec:	11003fcc 	andi	r4,r2,255
   940f0:	18803fcc 	andi	r2,r3,255
   940f4:	20801126 	beq	r4,r2,9413c <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   940f8:	d0a72a03 	ldbu	r2,-25432(gp)
   940fc:	10803fcc 	andi	r2,r2,255
   94100:	00c00334 	movhi	r3,12
   94104:	18e2b904 	addi	r3,r3,-29980
   94108:	1085883a 	add	r2,r2,r2
   9410c:	1085883a 	add	r2,r2,r2
   94110:	10c5883a 	add	r2,r2,r3
   94114:	10800017 	ldw	r2,0(r2)
   94118:	d0a73215 	stw	r2,-25400(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   9411c:	d0e73217 	ldw	r3,-25400(gp)
   94120:	18800e17 	ldw	r2,56(r3)
   94124:	10800044 	addi	r2,r2,1
   94128:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   9412c:	d0a72d17 	ldw	r2,-25420(gp)
   94130:	10800044 	addi	r2,r2,1
   94134:	d0a72d15 	stw	r2,-25420(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   94138:	009eab80 	call	9eab8 <OSCtxSw>
   9413c:	e0bfff17 	ldw	r2,-4(fp)
   94140:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94144:	e0bffd17 	ldw	r2,-12(fp)
   94148:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   9414c:	e037883a 	mov	sp,fp
   94150:	dfc00117 	ldw	ra,4(sp)
   94154:	df000017 	ldw	fp,0(sp)
   94158:	dec00204 	addi	sp,sp,8
   9415c:	f800283a 	ret

00094160 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   94160:	defffe04 	addi	sp,sp,-8
   94164:	df000115 	stw	fp,4(sp)
   94168:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   9416c:	d0a73403 	ldbu	r2,-25392(gp)
   94170:	10c03fcc 	andi	r3,r2,255
   94174:	008002b4 	movhi	r2,10
   94178:	10802504 	addi	r2,r2,148
   9417c:	10c5883a 	add	r2,r2,r3
   94180:	10800003 	ldbu	r2,0(r2)
   94184:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   94188:	e0bfff03 	ldbu	r2,-4(fp)
   9418c:	100490fa 	slli	r2,r2,3
   94190:	1009883a 	mov	r4,r2
   94194:	e0ffff03 	ldbu	r3,-4(fp)
   94198:	d0a73444 	addi	r2,gp,-25391
   9419c:	1885883a 	add	r2,r3,r2
   941a0:	10800003 	ldbu	r2,0(r2)
   941a4:	10c03fcc 	andi	r3,r2,255
   941a8:	008002b4 	movhi	r2,10
   941ac:	10802504 	addi	r2,r2,148
   941b0:	10c5883a 	add	r2,r2,r3
   941b4:	10800003 	ldbu	r2,0(r2)
   941b8:	2085883a 	add	r2,r4,r2
   941bc:	d0a72a05 	stb	r2,-25432(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   941c0:	e037883a 	mov	sp,fp
   941c4:	df000017 	ldw	fp,0(sp)
   941c8:	dec00104 	addi	sp,sp,4
   941cc:	f800283a 	ret

000941d0 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   941d0:	defffc04 	addi	sp,sp,-16
   941d4:	df000315 	stw	fp,12(sp)
   941d8:	df000304 	addi	fp,sp,12
   941dc:	e13ffe15 	stw	r4,-8(fp)
   941e0:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   941e4:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   941e8:	00000d06 	br	94220 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
   941ec:	e0bfff17 	ldw	r2,-4(fp)
   941f0:	10c00003 	ldbu	r3,0(r2)
   941f4:	e0bffe17 	ldw	r2,-8(fp)
   941f8:	10c00005 	stb	r3,0(r2)
   941fc:	e0bffe17 	ldw	r2,-8(fp)
   94200:	10800044 	addi	r2,r2,1
   94204:	e0bffe15 	stw	r2,-8(fp)
   94208:	e0bfff17 	ldw	r2,-4(fp)
   9420c:	10800044 	addi	r2,r2,1
   94210:	e0bfff15 	stw	r2,-4(fp)
        len++;
   94214:	e0bffd03 	ldbu	r2,-12(fp)
   94218:	10800044 	addi	r2,r2,1
   9421c:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   94220:	e0bfff17 	ldw	r2,-4(fp)
   94224:	10800003 	ldbu	r2,0(r2)
   94228:	10803fcc 	andi	r2,r2,255
   9422c:	1004c03a 	cmpne	r2,r2,zero
   94230:	103fee1e 	bne	r2,zero,941ec <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   94234:	e0bffe17 	ldw	r2,-8(fp)
   94238:	10000005 	stb	zero,0(r2)
    return (len);
   9423c:	e0bffd03 	ldbu	r2,-12(fp)
}
   94240:	e037883a 	mov	sp,fp
   94244:	df000017 	ldw	fp,0(sp)
   94248:	dec00104 	addi	sp,sp,4
   9424c:	f800283a 	ret

00094250 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   94250:	defffd04 	addi	sp,sp,-12
   94254:	df000215 	stw	fp,8(sp)
   94258:	df000204 	addi	fp,sp,8
   9425c:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   94260:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   94264:	00000606 	br	94280 <OS_StrLen+0x30>
        psrc++;
   94268:	e0bfff17 	ldw	r2,-4(fp)
   9426c:	10800044 	addi	r2,r2,1
   94270:	e0bfff15 	stw	r2,-4(fp)
        len++;
   94274:	e0bffe03 	ldbu	r2,-8(fp)
   94278:	10800044 	addi	r2,r2,1
   9427c:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   94280:	e0bfff17 	ldw	r2,-4(fp)
   94284:	10800003 	ldbu	r2,0(r2)
   94288:	10803fcc 	andi	r2,r2,255
   9428c:	1004c03a 	cmpne	r2,r2,zero
   94290:	103ff51e 	bne	r2,zero,94268 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
   94294:	e0bffe03 	ldbu	r2,-8(fp)
}
   94298:	e037883a 	mov	sp,fp
   9429c:	df000017 	ldw	fp,0(sp)
   942a0:	dec00104 	addi	sp,sp,4
   942a4:	f800283a 	ret

000942a8 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   942a8:	defffa04 	addi	sp,sp,-24
   942ac:	dfc00515 	stw	ra,20(sp)
   942b0:	df000415 	stw	fp,16(sp)
   942b4:	df000404 	addi	fp,sp,16
   942b8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   942bc:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   942c0:	0005303a 	rdctl	r2,status
   942c4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   942c8:	e0fffd17 	ldw	r3,-12(fp)
   942cc:	00bfff84 	movi	r2,-2
   942d0:	1884703a 	and	r2,r3,r2
   942d4:	1001703a 	wrctl	status,r2
  
  return context;
   942d8:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   942dc:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
   942e0:	d0a72917 	ldw	r2,-25436(gp)
   942e4:	10800044 	addi	r2,r2,1
   942e8:	d0a72915 	stw	r2,-25436(gp)
   942ec:	e0bffe17 	ldw	r2,-8(fp)
   942f0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   942f4:	e0bffc17 	ldw	r2,-16(fp)
   942f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   942fc:	009ef640 	call	9ef64 <OSTaskIdleHook>
    }
   94300:	003fef06 	br	942c0 <OS_TaskIdle+0x18>

00094304 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   94304:	defffa04 	addi	sp,sp,-24
   94308:	dfc00515 	stw	ra,20(sp)
   9430c:	df000415 	stw	fp,16(sp)
   94310:	df000404 	addi	fp,sp,16
   94314:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   94318:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   9431c:	00000206 	br	94328 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   94320:	01003204 	movi	r4,200
   94324:	009c3b80 	call	9c3b8 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   94328:	d0a73a03 	ldbu	r2,-25368(gp)
   9432c:	10803fcc 	andi	r2,r2,255
   94330:	1005003a 	cmpeq	r2,r2,zero
   94334:	103ffa1e 	bne	r2,zero,94320 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   94338:	d1272e17 	ldw	r4,-25416(gp)
   9433c:	01401904 	movi	r5,100
   94340:	00877d40 	call	877d4 <__udivsi3>
   94344:	d0a72e15 	stw	r2,-25416(gp)
    if (OSIdleCtrMax == 0L) {
   94348:	d0a72e17 	ldw	r2,-25416(gp)
   9434c:	1004c03a 	cmpne	r2,r2,zero
   94350:	1000031e 	bne	r2,zero,94360 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
   94354:	d0273005 	stb	zero,-25408(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   94358:	01003fc4 	movi	r4,255
   9435c:	009bfcc0 	call	9bfcc <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94360:	0005303a 	rdctl	r2,status
   94364:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94368:	e0fffd17 	ldw	r3,-12(fp)
   9436c:	00bfff84 	movi	r2,-2
   94370:	1884703a 	and	r2,r3,r2
   94374:	1001703a 	wrctl	status,r2
  
  return context;
   94378:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   9437c:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   94380:	d0a72917 	ldw	r2,-25436(gp)
   94384:	d0a73b15 	stw	r2,-25364(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   94388:	d0272915 	stw	zero,-25436(gp)
   9438c:	e0bffe17 	ldw	r2,-8(fp)
   94390:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94394:	e0bffc17 	ldw	r2,-16(fp)
   94398:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   9439c:	d1273b17 	ldw	r4,-25364(gp)
   943a0:	d1672e17 	ldw	r5,-25416(gp)
   943a4:	00877d40 	call	877d4 <__udivsi3>
   943a8:	1007883a 	mov	r3,r2
   943ac:	00801904 	movi	r2,100
   943b0:	10c5c83a 	sub	r2,r2,r3
   943b4:	d0a73005 	stb	r2,-25408(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   943b8:	009eef40 	call	9eef4 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   943bc:	00943cc0 	call	943cc <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   943c0:	01001904 	movi	r4,100
   943c4:	009c3b80 	call	9c3b8 <OSTimeDly>
    }
   943c8:	003fe506 	br	94360 <OS_TaskStat+0x5c>

000943cc <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   943cc:	defffa04 	addi	sp,sp,-24
   943d0:	dfc00515 	stw	ra,20(sp)
   943d4:	df000415 	stw	fp,16(sp)
   943d8:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   943dc:	e03ffc05 	stb	zero,-16(fp)
   943e0:	00002406 	br	94474 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   943e4:	e13ffc03 	ldbu	r4,-16(fp)
   943e8:	e17ffe04 	addi	r5,fp,-8
   943ec:	009bdd00 	call	9bdd0 <OSTaskStkChk>
   943f0:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   943f4:	e0bffc43 	ldbu	r2,-15(fp)
   943f8:	1004c03a 	cmpne	r2,r2,zero
   943fc:	10001a1e 	bne	r2,zero,94468 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   94400:	e0bffc03 	ldbu	r2,-16(fp)
   94404:	00c00334 	movhi	r3,12
   94408:	18e2b904 	addi	r3,r3,-29980
   9440c:	1085883a 	add	r2,r2,r2
   94410:	1085883a 	add	r2,r2,r2
   94414:	10c5883a 	add	r2,r2,r3
   94418:	10800017 	ldw	r2,0(r2)
   9441c:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   94420:	e0bffd17 	ldw	r2,-12(fp)
   94424:	1005003a 	cmpeq	r2,r2,zero
   94428:	10000f1e 	bne	r2,zero,94468 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   9442c:	e0bffd17 	ldw	r2,-12(fp)
   94430:	10800060 	cmpeqi	r2,r2,1
   94434:	10000c1e 	bne	r2,zero,94468 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   94438:	e0bffd17 	ldw	r2,-12(fp)
   9443c:	10c00217 	ldw	r3,8(r2)
   94440:	e0bffd17 	ldw	r2,-12(fp)
   94444:	10800317 	ldw	r2,12(r2)
   94448:	1085883a 	add	r2,r2,r2
   9444c:	1085883a 	add	r2,r2,r2
   94450:	1887883a 	add	r3,r3,r2
   94454:	e0bffd17 	ldw	r2,-12(fp)
   94458:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   9445c:	e0ffff17 	ldw	r3,-4(fp)
   94460:	e0bffd17 	ldw	r2,-12(fp)
   94464:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   94468:	e0bffc03 	ldbu	r2,-16(fp)
   9446c:	10800044 	addi	r2,r2,1
   94470:	e0bffc05 	stb	r2,-16(fp)
   94474:	e0bffc03 	ldbu	r2,-16(fp)
   94478:	10800570 	cmpltui	r2,r2,21
   9447c:	103fd91e 	bne	r2,zero,943e4 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
   94480:	e037883a 	mov	sp,fp
   94484:	dfc00117 	ldw	ra,4(sp)
   94488:	df000017 	ldw	fp,0(sp)
   9448c:	dec00204 	addi	sp,sp,8
   94490:	f800283a 	ret

00094494 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   94494:	defff104 	addi	sp,sp,-60
   94498:	dfc00e15 	stw	ra,56(sp)
   9449c:	df000d15 	stw	fp,52(sp)
   944a0:	df000d04 	addi	fp,sp,52
   944a4:	e17ffb15 	stw	r5,-20(fp)
   944a8:	e1bffc15 	stw	r6,-16(fp)
   944ac:	e0800417 	ldw	r2,16(fp)
   944b0:	e13ffa05 	stb	r4,-24(fp)
   944b4:	e1fffd0d 	sth	r7,-12(fp)
   944b8:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   944bc:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   944c0:	0005303a 	rdctl	r2,status
   944c4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   944c8:	e0fff717 	ldw	r3,-36(fp)
   944cc:	00bfff84 	movi	r2,-2
   944d0:	1884703a 	and	r2,r3,r2
   944d4:	1001703a 	wrctl	status,r2
  
  return context;
   944d8:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
   944dc:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   944e0:	d0a72f17 	ldw	r2,-25412(gp)
   944e4:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
   944e8:	e0bff917 	ldw	r2,-28(fp)
   944ec:	1005003a 	cmpeq	r2,r2,zero
   944f0:	1000941e 	bne	r2,zero,94744 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   944f4:	e0bff917 	ldw	r2,-28(fp)
   944f8:	10800517 	ldw	r2,20(r2)
   944fc:	d0a72f15 	stw	r2,-25412(gp)
   94500:	e0bff817 	ldw	r2,-32(fp)
   94504:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94508:	e0bff617 	ldw	r2,-40(fp)
   9450c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   94510:	e0fff917 	ldw	r3,-28(fp)
   94514:	e0bffb17 	ldw	r2,-20(fp)
   94518:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   9451c:	e0fff917 	ldw	r3,-28(fp)
   94520:	e0bffa03 	ldbu	r2,-24(fp)
   94524:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   94528:	e0bff917 	ldw	r2,-28(fp)
   9452c:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   94530:	e0bff917 	ldw	r2,-28(fp)
   94534:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   94538:	e0bff917 	ldw	r2,-28(fp)
   9453c:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   94540:	e0fff917 	ldw	r3,-28(fp)
   94544:	e0800317 	ldw	r2,12(fp)
   94548:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   9454c:	e0fff917 	ldw	r3,-28(fp)
   94550:	e0800217 	ldw	r2,8(fp)
   94554:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   94558:	e0fff917 	ldw	r3,-28(fp)
   9455c:	e0bffc17 	ldw	r2,-16(fp)
   94560:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   94564:	e0fff917 	ldw	r3,-28(fp)
   94568:	e0bffe0b 	ldhu	r2,-8(fp)
   9456c:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   94570:	e0fff917 	ldw	r3,-28(fp)
   94574:	e0bffd0b 	ldhu	r2,-12(fp)
   94578:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   9457c:	e0bff917 	ldw	r2,-28(fp)
   94580:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   94584:	e0bffa03 	ldbu	r2,-24(fp)
   94588:	1004d0fa 	srli	r2,r2,3
   9458c:	1007883a 	mov	r3,r2
   94590:	e0bff917 	ldw	r2,-28(fp)
   94594:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   94598:	e0bffa03 	ldbu	r2,-24(fp)
   9459c:	108001cc 	andi	r2,r2,7
   945a0:	1007883a 	mov	r3,r2
   945a4:	e0bff917 	ldw	r2,-28(fp)
   945a8:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   945ac:	e0bff917 	ldw	r2,-28(fp)
   945b0:	10800d03 	ldbu	r2,52(r2)
   945b4:	10c03fcc 	andi	r3,r2,255
   945b8:	00800044 	movi	r2,1
   945bc:	10c4983a 	sll	r2,r2,r3
   945c0:	1007883a 	mov	r3,r2
   945c4:	e0bff917 	ldw	r2,-28(fp)
   945c8:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   945cc:	e0bff917 	ldw	r2,-28(fp)
   945d0:	10800cc3 	ldbu	r2,51(r2)
   945d4:	10c03fcc 	andi	r3,r2,255
   945d8:	00800044 	movi	r2,1
   945dc:	10c4983a 	sll	r2,r2,r3
   945e0:	1007883a 	mov	r3,r2
   945e4:	e0bff917 	ldw	r2,-28(fp)
   945e8:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   945ec:	e0bff917 	ldw	r2,-28(fp)
   945f0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   945f4:	e0bff917 	ldw	r2,-28(fp)
   945f8:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   945fc:	e0bff917 	ldw	r2,-28(fp)
   94600:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   94604:	e0bff917 	ldw	r2,-28(fp)
   94608:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   9460c:	e0bff917 	ldw	r2,-28(fp)
   94610:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   94614:	e0bff917 	ldw	r2,-28(fp)
   94618:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   9461c:	e0bff917 	ldw	r2,-28(fp)
   94620:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   94624:	e0bff917 	ldw	r2,-28(fp)
   94628:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   9462c:	e0bff917 	ldw	r2,-28(fp)
   94630:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   94634:	e0fff917 	ldw	r3,-28(fp)
   94638:	00800fc4 	movi	r2,63
   9463c:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   94640:	e0bff917 	ldw	r2,-28(fp)
   94644:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   94648:	e13ff917 	ldw	r4,-28(fp)
   9464c:	009ef800 	call	9ef80 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   94650:	e13ff917 	ldw	r4,-28(fp)
   94654:	009ee980 	call	9ee98 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94658:	0005303a 	rdctl	r2,status
   9465c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94660:	e0fff517 	ldw	r3,-44(fp)
   94664:	00bfff84 	movi	r2,-2
   94668:	1884703a 	and	r2,r3,r2
   9466c:	1001703a 	wrctl	status,r2
  
  return context;
   94670:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   94674:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
   94678:	e0bffa03 	ldbu	r2,-24(fp)
   9467c:	00c00334 	movhi	r3,12
   94680:	18e2b904 	addi	r3,r3,-29980
   94684:	1085883a 	add	r2,r2,r2
   94688:	1085883a 	add	r2,r2,r2
   9468c:	10c7883a 	add	r3,r2,r3
   94690:	e0bff917 	ldw	r2,-28(fp)
   94694:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   94698:	d0e72b17 	ldw	r3,-25428(gp)
   9469c:	e0bff917 	ldw	r2,-28(fp)
   946a0:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   946a4:	e0bff917 	ldw	r2,-28(fp)
   946a8:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   946ac:	d0a72b17 	ldw	r2,-25428(gp)
   946b0:	1005003a 	cmpeq	r2,r2,zero
   946b4:	1000031e 	bne	r2,zero,946c4 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
   946b8:	d0e72b17 	ldw	r3,-25428(gp)
   946bc:	e0bff917 	ldw	r2,-28(fp)
   946c0:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
   946c4:	e0bff917 	ldw	r2,-28(fp)
   946c8:	d0a72b15 	stw	r2,-25428(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   946cc:	e0bff917 	ldw	r2,-28(fp)
   946d0:	10c00d83 	ldbu	r3,54(r2)
   946d4:	d0a73403 	ldbu	r2,-25392(gp)
   946d8:	1884b03a 	or	r2,r3,r2
   946dc:	d0a73405 	stb	r2,-25392(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   946e0:	e0bff917 	ldw	r2,-28(fp)
   946e4:	10800d03 	ldbu	r2,52(r2)
   946e8:	11003fcc 	andi	r4,r2,255
   946ec:	e0bff917 	ldw	r2,-28(fp)
   946f0:	10800d03 	ldbu	r2,52(r2)
   946f4:	10c03fcc 	andi	r3,r2,255
   946f8:	d0a73444 	addi	r2,gp,-25391
   946fc:	1885883a 	add	r2,r3,r2
   94700:	10c00003 	ldbu	r3,0(r2)
   94704:	e0bff917 	ldw	r2,-28(fp)
   94708:	10800d43 	ldbu	r2,53(r2)
   9470c:	1884b03a 	or	r2,r3,r2
   94710:	1007883a 	mov	r3,r2
   94714:	d0a73444 	addi	r2,gp,-25391
   94718:	2085883a 	add	r2,r4,r2
   9471c:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   94720:	d0a73043 	ldbu	r2,-25407(gp)
   94724:	10800044 	addi	r2,r2,1
   94728:	d0a73045 	stb	r2,-25407(gp)
   9472c:	e0bff817 	ldw	r2,-32(fp)
   94730:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94734:	e0bff417 	ldw	r2,-48(fp)
   94738:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   9473c:	e03fff15 	stw	zero,-4(fp)
   94740:	00000606 	br	9475c <OS_TCBInit+0x2c8>
   94744:	e0bff817 	ldw	r2,-32(fp)
   94748:	e0bff315 	stw	r2,-52(fp)
   9474c:	e0bff317 	ldw	r2,-52(fp)
   94750:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   94754:	00801084 	movi	r2,66
   94758:	e0bfff15 	stw	r2,-4(fp)
   9475c:	e0bfff17 	ldw	r2,-4(fp)
}
   94760:	e037883a 	mov	sp,fp
   94764:	dfc00117 	ldw	ra,4(sp)
   94768:	df000017 	ldw	fp,0(sp)
   9476c:	dec00204 	addi	sp,sp,8
   94770:	f800283a 	ret

00094774 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   94774:	defffe04 	addi	sp,sp,-8
   94778:	df000115 	stw	fp,4(sp)
   9477c:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   94780:	d0a01104 	addi	r2,gp,-32700
   94784:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   94788:	d0a01204 	addi	r2,gp,-32696
   9478c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   94790:	d0a01384 	addi	r2,gp,-32690
   94794:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   94798:	d0a01404 	addi	r2,gp,-32688
   9479c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   947a0:	d0a01304 	addi	r2,gp,-32692
   947a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   947a8:	d0a01484 	addi	r2,gp,-32686
   947ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   947b0:	d0a01504 	addi	r2,gp,-32684
   947b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   947b8:	d0a01584 	addi	r2,gp,-32682
   947bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   947c0:	d0a01604 	addi	r2,gp,-32680
   947c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   947c8:	d0a01684 	addi	r2,gp,-32678
   947cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   947d0:	d0a01704 	addi	r2,gp,-32676
   947d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   947d8:	d0a01784 	addi	r2,gp,-32674
   947dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   947e0:	d0a01804 	addi	r2,gp,-32672
   947e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   947e8:	d0a01884 	addi	r2,gp,-32670
   947ec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   947f0:	d0a01904 	addi	r2,gp,-32668
   947f4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   947f8:	d0a01984 	addi	r2,gp,-32666
   947fc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   94800:	d0a01a04 	addi	r2,gp,-32664
   94804:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   94808:	d0a01a84 	addi	r2,gp,-32662
   9480c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   94810:	d0a01b04 	addi	r2,gp,-32660
   94814:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   94818:	d0a01b84 	addi	r2,gp,-32658
   9481c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   94820:	d0a01c04 	addi	r2,gp,-32656
   94824:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   94828:	d0a01c84 	addi	r2,gp,-32654
   9482c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   94830:	d0a01d04 	addi	r2,gp,-32652
   94834:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   94838:	d0a01d84 	addi	r2,gp,-32650
   9483c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   94840:	d0a01e04 	addi	r2,gp,-32648
   94844:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   94848:	d0a01e84 	addi	r2,gp,-32646
   9484c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   94850:	d0a01f04 	addi	r2,gp,-32644
   94854:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   94858:	d0a01f84 	addi	r2,gp,-32642
   9485c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   94860:	d0a02004 	addi	r2,gp,-32640
   94864:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   94868:	d0a02084 	addi	r2,gp,-32638
   9486c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   94870:	d0a02104 	addi	r2,gp,-32636
   94874:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   94878:	d0a02184 	addi	r2,gp,-32634
   9487c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   94880:	d0a02204 	addi	r2,gp,-32632
   94884:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   94888:	d0a02284 	addi	r2,gp,-32630
   9488c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   94890:	d0a02304 	addi	r2,gp,-32628
   94894:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   94898:	d0a02384 	addi	r2,gp,-32626
   9489c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   948a0:	d0a02404 	addi	r2,gp,-32624
   948a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   948a8:	d0a02484 	addi	r2,gp,-32622
   948ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   948b0:	d0a02504 	addi	r2,gp,-32620
   948b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   948b8:	d0a02584 	addi	r2,gp,-32618
   948bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   948c0:	d0a02604 	addi	r2,gp,-32616
   948c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   948c8:	d0a02684 	addi	r2,gp,-32614
   948cc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   948d0:	d0a02704 	addi	r2,gp,-32612
   948d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   948d8:	d0a02784 	addi	r2,gp,-32610
   948dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   948e0:	d0a02804 	addi	r2,gp,-32608
   948e4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   948e8:	d0a02d04 	addi	r2,gp,-32588
   948ec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   948f0:	e037883a 	mov	sp,fp
   948f4:	df000017 	ldw	fp,0(sp)
   948f8:	dec00104 	addi	sp,sp,4
   948fc:	f800283a 	ret

00094900 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   94900:	defff104 	addi	sp,sp,-60
   94904:	df000e15 	stw	fp,56(sp)
   94908:	df000e04 	addi	fp,sp,56
   9490c:	e13ffa15 	stw	r4,-24(fp)
   94910:	e1fffd15 	stw	r7,-12(fp)
   94914:	e17ffb0d 	sth	r5,-20(fp)
   94918:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   9491c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   94920:	e0bffd17 	ldw	r2,-12(fp)
   94924:	1004c03a 	cmpne	r2,r2,zero
   94928:	1000021e 	bne	r2,zero,94934 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
   9492c:	e03fff15 	stw	zero,-4(fp)
   94930:	0000bb06 	br	94c20 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   94934:	e0bffa17 	ldw	r2,-24(fp)
   94938:	1004c03a 	cmpne	r2,r2,zero
   9493c:	1000051e 	bne	r2,zero,94954 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   94940:	e0fffd17 	ldw	r3,-12(fp)
   94944:	00801b84 	movi	r2,110
   94948:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   9494c:	e03fff15 	stw	zero,-4(fp)
   94950:	0000b306 	br	94c20 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   94954:	e0bffa17 	ldw	r2,-24(fp)
   94958:	10800003 	ldbu	r2,0(r2)
   9495c:	10803fcc 	andi	r2,r2,255
   94960:	10800160 	cmpeqi	r2,r2,5
   94964:	1000051e 	bne	r2,zero,9497c <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   94968:	e0fffd17 	ldw	r3,-12(fp)
   9496c:	00800044 	movi	r2,1
   94970:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   94974:	e03fff15 	stw	zero,-4(fp)
   94978:	0000a906 	br	94c20 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   9497c:	e0fffc03 	ldbu	r3,-16(fp)
   94980:	00bfe004 	movi	r2,-128
   94984:	1884703a 	and	r2,r3,r2
   94988:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   9498c:	e0bff943 	ldbu	r2,-27(fp)
   94990:	1005003a 	cmpeq	r2,r2,zero
   94994:	1000061e 	bne	r2,zero,949b0 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
   94998:	e0bffc03 	ldbu	r2,-16(fp)
   9499c:	10801fcc 	andi	r2,r2,127
   949a0:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
   949a4:	00800044 	movi	r2,1
   949a8:	e0bff905 	stb	r2,-28(fp)
   949ac:	00000106 	br	949b4 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
   949b0:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   949b4:	e0bffd17 	ldw	r2,-12(fp)
   949b8:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   949bc:	0005303a 	rdctl	r2,status
   949c0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   949c4:	e0fff717 	ldw	r3,-36(fp)
   949c8:	00bfff84 	movi	r2,-2
   949cc:	1884703a 	and	r2,r3,r2
   949d0:	1001703a 	wrctl	status,r2
  
  return context;
   949d4:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   949d8:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
   949dc:	e0bffc03 	ldbu	r2,-16(fp)
   949e0:	e0bffe15 	stw	r2,-8(fp)
   949e4:	e0fffe17 	ldw	r3,-8(fp)
   949e8:	18800060 	cmpeqi	r2,r3,1
   949ec:	1000651e 	bne	r2,zero,94b84 <OSFlagAccept+0x284>
   949f0:	e0fffe17 	ldw	r3,-8(fp)
   949f4:	18800088 	cmpgei	r2,r3,2
   949f8:	1000041e 	bne	r2,zero,94a0c <OSFlagAccept+0x10c>
   949fc:	e0fffe17 	ldw	r3,-8(fp)
   94a00:	1805003a 	cmpeq	r2,r3,zero
   94a04:	1000421e 	bne	r2,zero,94b10 <OSFlagAccept+0x210>
   94a08:	00007b06 	br	94bf8 <OSFlagAccept+0x2f8>
   94a0c:	e0fffe17 	ldw	r3,-8(fp)
   94a10:	188000a0 	cmpeqi	r2,r3,2
   94a14:	1000041e 	bne	r2,zero,94a28 <OSFlagAccept+0x128>
   94a18:	e0fffe17 	ldw	r3,-8(fp)
   94a1c:	188000e0 	cmpeqi	r2,r3,3
   94a20:	10001e1e 	bne	r2,zero,94a9c <OSFlagAccept+0x19c>
   94a24:	00007406 	br	94bf8 <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   94a28:	e0bffa17 	ldw	r2,-24(fp)
   94a2c:	10c0020b 	ldhu	r3,8(r2)
   94a30:	e0bffb0b 	ldhu	r2,-20(fp)
   94a34:	1884703a 	and	r2,r3,r2
   94a38:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   94a3c:	e0fff98b 	ldhu	r3,-26(fp)
   94a40:	e0bffb0b 	ldhu	r2,-20(fp)
   94a44:	18800d1e 	bne	r3,r2,94a7c <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   94a48:	e0bff903 	ldbu	r2,-28(fp)
   94a4c:	10800058 	cmpnei	r2,r2,1
   94a50:	10000d1e 	bne	r2,zero,94a88 <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   94a54:	e0bffa17 	ldw	r2,-24(fp)
   94a58:	1080020b 	ldhu	r2,8(r2)
   94a5c:	1007883a 	mov	r3,r2
   94a60:	e0bff98b 	ldhu	r2,-26(fp)
   94a64:	0084303a 	nor	r2,zero,r2
   94a68:	1884703a 	and	r2,r3,r2
   94a6c:	1007883a 	mov	r3,r2
   94a70:	e0bffa17 	ldw	r2,-24(fp)
   94a74:	10c0020d 	sth	r3,8(r2)
   94a78:	00000306 	br	94a88 <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   94a7c:	e0fffd17 	ldw	r3,-12(fp)
   94a80:	00801c04 	movi	r2,112
   94a84:	18800005 	stb	r2,0(r3)
   94a88:	e0bff817 	ldw	r2,-32(fp)
   94a8c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94a90:	e0bff617 	ldw	r2,-40(fp)
   94a94:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   94a98:	00005f06 	br	94c18 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   94a9c:	e0bffa17 	ldw	r2,-24(fp)
   94aa0:	10c0020b 	ldhu	r3,8(r2)
   94aa4:	e0bffb0b 	ldhu	r2,-20(fp)
   94aa8:	1884703a 	and	r2,r3,r2
   94aac:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   94ab0:	e0bff98b 	ldhu	r2,-26(fp)
   94ab4:	1005003a 	cmpeq	r2,r2,zero
   94ab8:	10000d1e 	bne	r2,zero,94af0 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   94abc:	e0bff903 	ldbu	r2,-28(fp)
   94ac0:	10800058 	cmpnei	r2,r2,1
   94ac4:	10000d1e 	bne	r2,zero,94afc <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   94ac8:	e0bffa17 	ldw	r2,-24(fp)
   94acc:	1080020b 	ldhu	r2,8(r2)
   94ad0:	1007883a 	mov	r3,r2
   94ad4:	e0bff98b 	ldhu	r2,-26(fp)
   94ad8:	0084303a 	nor	r2,zero,r2
   94adc:	1884703a 	and	r2,r3,r2
   94ae0:	1007883a 	mov	r3,r2
   94ae4:	e0bffa17 	ldw	r2,-24(fp)
   94ae8:	10c0020d 	sth	r3,8(r2)
   94aec:	00000306 	br	94afc <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   94af0:	e0fffd17 	ldw	r3,-12(fp)
   94af4:	00801c04 	movi	r2,112
   94af8:	18800005 	stb	r2,0(r3)
   94afc:	e0bff817 	ldw	r2,-32(fp)
   94b00:	e0bff515 	stw	r2,-44(fp)
   94b04:	e0bff517 	ldw	r2,-44(fp)
   94b08:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   94b0c:	00004206 	br	94c18 <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   94b10:	e0bffa17 	ldw	r2,-24(fp)
   94b14:	1080020b 	ldhu	r2,8(r2)
   94b18:	0084303a 	nor	r2,zero,r2
   94b1c:	1007883a 	mov	r3,r2
   94b20:	e0bffb0b 	ldhu	r2,-20(fp)
   94b24:	1884703a 	and	r2,r3,r2
   94b28:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   94b2c:	e0fff98b 	ldhu	r3,-26(fp)
   94b30:	e0bffb0b 	ldhu	r2,-20(fp)
   94b34:	18800b1e 	bne	r3,r2,94b64 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   94b38:	e0bff903 	ldbu	r2,-28(fp)
   94b3c:	10800058 	cmpnei	r2,r2,1
   94b40:	10000b1e 	bne	r2,zero,94b70 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   94b44:	e0bffa17 	ldw	r2,-24(fp)
   94b48:	10c0020b 	ldhu	r3,8(r2)
   94b4c:	e0bff98b 	ldhu	r2,-26(fp)
   94b50:	1884b03a 	or	r2,r3,r2
   94b54:	1007883a 	mov	r3,r2
   94b58:	e0bffa17 	ldw	r2,-24(fp)
   94b5c:	10c0020d 	sth	r3,8(r2)
   94b60:	00000306 	br	94b70 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   94b64:	e0fffd17 	ldw	r3,-12(fp)
   94b68:	00801c04 	movi	r2,112
   94b6c:	18800005 	stb	r2,0(r3)
   94b70:	e0bff817 	ldw	r2,-32(fp)
   94b74:	e0bff415 	stw	r2,-48(fp)
   94b78:	e0bff417 	ldw	r2,-48(fp)
   94b7c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   94b80:	00002506 	br	94c18 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   94b84:	e0bffa17 	ldw	r2,-24(fp)
   94b88:	1080020b 	ldhu	r2,8(r2)
   94b8c:	0084303a 	nor	r2,zero,r2
   94b90:	1007883a 	mov	r3,r2
   94b94:	e0bffb0b 	ldhu	r2,-20(fp)
   94b98:	1884703a 	and	r2,r3,r2
   94b9c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   94ba0:	e0bff98b 	ldhu	r2,-26(fp)
   94ba4:	1005003a 	cmpeq	r2,r2,zero
   94ba8:	10000b1e 	bne	r2,zero,94bd8 <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   94bac:	e0bff903 	ldbu	r2,-28(fp)
   94bb0:	10800058 	cmpnei	r2,r2,1
   94bb4:	10000b1e 	bne	r2,zero,94be4 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   94bb8:	e0bffa17 	ldw	r2,-24(fp)
   94bbc:	10c0020b 	ldhu	r3,8(r2)
   94bc0:	e0bff98b 	ldhu	r2,-26(fp)
   94bc4:	1884b03a 	or	r2,r3,r2
   94bc8:	1007883a 	mov	r3,r2
   94bcc:	e0bffa17 	ldw	r2,-24(fp)
   94bd0:	10c0020d 	sth	r3,8(r2)
   94bd4:	00000306 	br	94be4 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   94bd8:	e0fffd17 	ldw	r3,-12(fp)
   94bdc:	00801c04 	movi	r2,112
   94be0:	18800005 	stb	r2,0(r3)
   94be4:	e0bff817 	ldw	r2,-32(fp)
   94be8:	e0bff315 	stw	r2,-52(fp)
   94bec:	e0bff317 	ldw	r2,-52(fp)
   94bf0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   94bf4:	00000806 	br	94c18 <OSFlagAccept+0x318>
   94bf8:	e0bff817 	ldw	r2,-32(fp)
   94bfc:	e0bff215 	stw	r2,-56(fp)
   94c00:	e0bff217 	ldw	r2,-56(fp)
   94c04:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   94c08:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   94c0c:	e0fffd17 	ldw	r3,-12(fp)
   94c10:	00801bc4 	movi	r2,111
   94c14:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
   94c18:	e0bff98b 	ldhu	r2,-26(fp)
   94c1c:	e0bfff15 	stw	r2,-4(fp)
   94c20:	e0bfff17 	ldw	r2,-4(fp)
}
   94c24:	e037883a 	mov	sp,fp
   94c28:	df000017 	ldw	fp,0(sp)
   94c2c:	dec00104 	addi	sp,sp,4
   94c30:	f800283a 	ret

00094c34 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   94c34:	defff704 	addi	sp,sp,-36
   94c38:	df000815 	stw	fp,32(sp)
   94c3c:	df000804 	addi	fp,sp,32
   94c40:	e17ffe15 	stw	r5,-8(fp)
   94c44:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   94c48:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   94c4c:	e0bffe17 	ldw	r2,-8(fp)
   94c50:	1004c03a 	cmpne	r2,r2,zero
   94c54:	1000021e 	bne	r2,zero,94c60 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   94c58:	e03fff15 	stw	zero,-4(fp)
   94c5c:	00003f06 	br	94d5c <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   94c60:	008002b4 	movhi	r2,10
   94c64:	108e5304 	addi	r2,r2,14668
   94c68:	10800003 	ldbu	r2,0(r2)
   94c6c:	10803fcc 	andi	r2,r2,255
   94c70:	1005003a 	cmpeq	r2,r2,zero
   94c74:	1000051e 	bne	r2,zero,94c8c <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   94c78:	e0fffe17 	ldw	r3,-8(fp)
   94c7c:	00800404 	movi	r2,16
   94c80:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
   94c84:	e03fff15 	stw	zero,-4(fp)
   94c88:	00003406 	br	94d5c <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94c8c:	0005303a 	rdctl	r2,status
   94c90:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94c94:	e0fffa17 	ldw	r3,-24(fp)
   94c98:	00bfff84 	movi	r2,-2
   94c9c:	1884703a 	and	r2,r3,r2
   94ca0:	1001703a 	wrctl	status,r2
  
  return context;
   94ca4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   94ca8:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   94cac:	008002b4 	movhi	r2,10
   94cb0:	108e5604 	addi	r2,r2,14680
   94cb4:	10800017 	ldw	r2,0(r2)
   94cb8:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   94cbc:	e0bffc17 	ldw	r2,-16(fp)
   94cc0:	1005003a 	cmpeq	r2,r2,zero
   94cc4:	10001c1e 	bne	r2,zero,94d38 <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   94cc8:	008002b4 	movhi	r2,10
   94ccc:	108e5604 	addi	r2,r2,14680
   94cd0:	10800017 	ldw	r2,0(r2)
   94cd4:	10800117 	ldw	r2,4(r2)
   94cd8:	1007883a 	mov	r3,r2
   94cdc:	008002b4 	movhi	r2,10
   94ce0:	108e5604 	addi	r2,r2,14680
   94ce4:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   94ce8:	e0fffc17 	ldw	r3,-16(fp)
   94cec:	00800144 	movi	r2,5
   94cf0:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   94cf4:	e0fffc17 	ldw	r3,-16(fp)
   94cf8:	e0bffd0b 	ldhu	r2,-12(fp)
   94cfc:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   94d00:	e0bffc17 	ldw	r2,-16(fp)
   94d04:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   94d08:	e0fffc17 	ldw	r3,-16(fp)
   94d0c:	00800fc4 	movi	r2,63
   94d10:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   94d14:	e0bffc17 	ldw	r2,-16(fp)
   94d18:	100002c5 	stb	zero,11(r2)
   94d1c:	e0bffb17 	ldw	r2,-20(fp)
   94d20:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94d24:	e0bff917 	ldw	r2,-28(fp)
   94d28:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   94d2c:	e0bffe17 	ldw	r2,-8(fp)
   94d30:	10000005 	stb	zero,0(r2)
   94d34:	00000706 	br	94d54 <OSFlagCreate+0x120>
   94d38:	e0bffb17 	ldw	r2,-20(fp)
   94d3c:	e0bff815 	stw	r2,-32(fp)
   94d40:	e0bff817 	ldw	r2,-32(fp)
   94d44:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   94d48:	e0fffe17 	ldw	r3,-8(fp)
   94d4c:	00801c84 	movi	r2,114
   94d50:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   94d54:	e0bffc17 	ldw	r2,-16(fp)
   94d58:	e0bfff15 	stw	r2,-4(fp)
   94d5c:	e0bfff17 	ldw	r2,-4(fp)
}
   94d60:	e037883a 	mov	sp,fp
   94d64:	df000017 	ldw	fp,0(sp)
   94d68:	dec00104 	addi	sp,sp,4
   94d6c:	f800283a 	ret

00094d70 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   94d70:	defff004 	addi	sp,sp,-64
   94d74:	dfc00f15 	stw	ra,60(sp)
   94d78:	df000e15 	stw	fp,56(sp)
   94d7c:	df000e04 	addi	fp,sp,56
   94d80:	e13ffb15 	stw	r4,-20(fp)
   94d84:	e1bffd15 	stw	r6,-12(fp)
   94d88:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   94d8c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   94d90:	e0bffd17 	ldw	r2,-12(fp)
   94d94:	1004c03a 	cmpne	r2,r2,zero
   94d98:	1000031e 	bne	r2,zero,94da8 <OSFlagDel+0x38>
        return (pgrp);
   94d9c:	e0bffb17 	ldw	r2,-20(fp)
   94da0:	e0bfff15 	stw	r2,-4(fp)
   94da4:	00009606 	br	95000 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   94da8:	e0bffb17 	ldw	r2,-20(fp)
   94dac:	1004c03a 	cmpne	r2,r2,zero
   94db0:	1000061e 	bne	r2,zero,94dcc <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   94db4:	e0fffd17 	ldw	r3,-12(fp)
   94db8:	00801b84 	movi	r2,110
   94dbc:	18800005 	stb	r2,0(r3)
        return (pgrp);
   94dc0:	e0fffb17 	ldw	r3,-20(fp)
   94dc4:	e0ffff15 	stw	r3,-4(fp)
   94dc8:	00008d06 	br	95000 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   94dcc:	008002b4 	movhi	r2,10
   94dd0:	108e5304 	addi	r2,r2,14668
   94dd4:	10800003 	ldbu	r2,0(r2)
   94dd8:	10803fcc 	andi	r2,r2,255
   94ddc:	1005003a 	cmpeq	r2,r2,zero
   94de0:	1000061e 	bne	r2,zero,94dfc <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   94de4:	e0fffd17 	ldw	r3,-12(fp)
   94de8:	008003c4 	movi	r2,15
   94dec:	18800005 	stb	r2,0(r3)
        return (pgrp);
   94df0:	e0bffb17 	ldw	r2,-20(fp)
   94df4:	e0bfff15 	stw	r2,-4(fp)
   94df8:	00008106 	br	95000 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   94dfc:	e0bffb17 	ldw	r2,-20(fp)
   94e00:	10800003 	ldbu	r2,0(r2)
   94e04:	10803fcc 	andi	r2,r2,255
   94e08:	10800160 	cmpeqi	r2,r2,5
   94e0c:	1000061e 	bne	r2,zero,94e28 <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
   94e10:	e0fffd17 	ldw	r3,-12(fp)
   94e14:	00800044 	movi	r2,1
   94e18:	18800005 	stb	r2,0(r3)
        return (pgrp);
   94e1c:	e0fffb17 	ldw	r3,-20(fp)
   94e20:	e0ffff15 	stw	r3,-4(fp)
   94e24:	00007606 	br	95000 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   94e28:	0005303a 	rdctl	r2,status
   94e2c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   94e30:	e0fff617 	ldw	r3,-40(fp)
   94e34:	00bfff84 	movi	r2,-2
   94e38:	1884703a 	and	r2,r3,r2
   94e3c:	1001703a 	wrctl	status,r2
  
  return context;
   94e40:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
   94e44:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   94e48:	e0bffb17 	ldw	r2,-20(fp)
   94e4c:	10800117 	ldw	r2,4(r2)
   94e50:	1005003a 	cmpeq	r2,r2,zero
   94e54:	1000031e 	bne	r2,zero,94e64 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   94e58:	00800044 	movi	r2,1
   94e5c:	e0bffa05 	stb	r2,-24(fp)
   94e60:	00000106 	br	94e68 <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   94e64:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
   94e68:	e0bffc03 	ldbu	r2,-16(fp)
   94e6c:	e0bffe15 	stw	r2,-8(fp)
   94e70:	e0fffe17 	ldw	r3,-8(fp)
   94e74:	1805003a 	cmpeq	r2,r3,zero
   94e78:	1000041e 	bne	r2,zero,94e8c <OSFlagDel+0x11c>
   94e7c:	e0fffe17 	ldw	r3,-8(fp)
   94e80:	18800060 	cmpeqi	r2,r3,1
   94e84:	1000281e 	bne	r2,zero,94f28 <OSFlagDel+0x1b8>
   94e88:	00005206 	br	94fd4 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   94e8c:	e0bffa03 	ldbu	r2,-24(fp)
   94e90:	1004c03a 	cmpne	r2,r2,zero
   94e94:	10001a1e 	bne	r2,zero,94f00 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   94e98:	e0fffb17 	ldw	r3,-20(fp)
   94e9c:	00800fc4 	movi	r2,63
   94ea0:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   94ea4:	e0bffb17 	ldw	r2,-20(fp)
   94ea8:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   94eac:	e0bffb17 	ldw	r2,-20(fp)
   94eb0:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   94eb4:	008002b4 	movhi	r2,10
   94eb8:	108e5604 	addi	r2,r2,14680
   94ebc:	10c00017 	ldw	r3,0(r2)
   94ec0:	e0bffb17 	ldw	r2,-20(fp)
   94ec4:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   94ec8:	e0bffb17 	ldw	r2,-20(fp)
   94ecc:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   94ed0:	00c002b4 	movhi	r3,10
   94ed4:	18ce5604 	addi	r3,r3,14680
   94ed8:	e0bffb17 	ldw	r2,-20(fp)
   94edc:	18800015 	stw	r2,0(r3)
   94ee0:	e0bff717 	ldw	r2,-36(fp)
   94ee4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   94ee8:	e0bff517 	ldw	r2,-44(fp)
   94eec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   94ef0:	e0bffd17 	ldw	r2,-12(fp)
   94ef4:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   94ef8:	e03ff815 	stw	zero,-32(fp)
   94efc:	00003e06 	br	94ff8 <OSFlagDel+0x288>
   94f00:	e0bff717 	ldw	r2,-36(fp)
   94f04:	e0bff415 	stw	r2,-48(fp)
   94f08:	e0bff417 	ldw	r2,-48(fp)
   94f0c:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   94f10:	e0fffd17 	ldw	r3,-12(fp)
   94f14:	00801244 	movi	r2,73
   94f18:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
   94f1c:	e0bffb17 	ldw	r2,-20(fp)
   94f20:	e0bff815 	stw	r2,-32(fp)
             }
             break;
   94f24:	00003406 	br	94ff8 <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   94f28:	e0bffb17 	ldw	r2,-20(fp)
   94f2c:	10800117 	ldw	r2,4(r2)
   94f30:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   94f34:	00000606 	br	94f50 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   94f38:	e13ff917 	ldw	r4,-28(fp)
   94f3c:	000b883a 	mov	r5,zero
   94f40:	00960800 	call	96080 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   94f44:	e0bff917 	ldw	r2,-28(fp)
   94f48:	10800017 	ldw	r2,0(r2)
   94f4c:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   94f50:	e0bff917 	ldw	r2,-28(fp)
   94f54:	1004c03a 	cmpne	r2,r2,zero
   94f58:	103ff71e 	bne	r2,zero,94f38 <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   94f5c:	e0fffb17 	ldw	r3,-20(fp)
   94f60:	00800fc4 	movi	r2,63
   94f64:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   94f68:	e0bffb17 	ldw	r2,-20(fp)
   94f6c:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   94f70:	e0bffb17 	ldw	r2,-20(fp)
   94f74:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   94f78:	008002b4 	movhi	r2,10
   94f7c:	108e5604 	addi	r2,r2,14680
   94f80:	10c00017 	ldw	r3,0(r2)
   94f84:	e0bffb17 	ldw	r2,-20(fp)
   94f88:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   94f8c:	e0bffb17 	ldw	r2,-20(fp)
   94f90:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   94f94:	00c002b4 	movhi	r3,10
   94f98:	18ce5604 	addi	r3,r3,14680
   94f9c:	e0bffb17 	ldw	r2,-20(fp)
   94fa0:	18800015 	stw	r2,0(r3)
   94fa4:	e0bff717 	ldw	r2,-36(fp)
   94fa8:	e0bff315 	stw	r2,-52(fp)
   94fac:	e0bff317 	ldw	r2,-52(fp)
   94fb0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   94fb4:	e0bffa03 	ldbu	r2,-24(fp)
   94fb8:	10800058 	cmpnei	r2,r2,1
   94fbc:	1000011e 	bne	r2,zero,94fc4 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   94fc0:	009408c0 	call	9408c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   94fc4:	e0bffd17 	ldw	r2,-12(fp)
   94fc8:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   94fcc:	e03ff815 	stw	zero,-32(fp)
             break;
   94fd0:	00000906 	br	94ff8 <OSFlagDel+0x288>
   94fd4:	e0bff717 	ldw	r2,-36(fp)
   94fd8:	e0bff215 	stw	r2,-56(fp)
   94fdc:	e0bff217 	ldw	r2,-56(fp)
   94fe0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   94fe4:	e0fffd17 	ldw	r3,-12(fp)
   94fe8:	008001c4 	movi	r2,7
   94fec:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
   94ff0:	e0bffb17 	ldw	r2,-20(fp)
   94ff4:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
   94ff8:	e0bff817 	ldw	r2,-32(fp)
   94ffc:	e0bfff15 	stw	r2,-4(fp)
   95000:	e0bfff17 	ldw	r2,-4(fp)
}
   95004:	e037883a 	mov	sp,fp
   95008:	dfc00117 	ldw	ra,4(sp)
   9500c:	df000017 	ldw	fp,0(sp)
   95010:	dec00204 	addi	sp,sp,8
   95014:	f800283a 	ret

00095018 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   95018:	defff504 	addi	sp,sp,-44
   9501c:	dfc00a15 	stw	ra,40(sp)
   95020:	df000915 	stw	fp,36(sp)
   95024:	df000904 	addi	fp,sp,36
   95028:	e13ffc15 	stw	r4,-16(fp)
   9502c:	e17ffd15 	stw	r5,-12(fp)
   95030:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   95034:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   95038:	e0bffe17 	ldw	r2,-8(fp)
   9503c:	1004c03a 	cmpne	r2,r2,zero
   95040:	1000021e 	bne	r2,zero,9504c <OSFlagNameGet+0x34>
        return (0);
   95044:	e03fff15 	stw	zero,-4(fp)
   95048:	00003e06 	br	95144 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   9504c:	e0bffc17 	ldw	r2,-16(fp)
   95050:	1004c03a 	cmpne	r2,r2,zero
   95054:	1000051e 	bne	r2,zero,9506c <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   95058:	e0fffe17 	ldw	r3,-8(fp)
   9505c:	00801b84 	movi	r2,110
   95060:	18800005 	stb	r2,0(r3)
        return (0);
   95064:	e03fff15 	stw	zero,-4(fp)
   95068:	00003606 	br	95144 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   9506c:	e0bffd17 	ldw	r2,-12(fp)
   95070:	1004c03a 	cmpne	r2,r2,zero
   95074:	1000051e 	bne	r2,zero,9508c <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
   95078:	e0fffe17 	ldw	r3,-8(fp)
   9507c:	00800304 	movi	r2,12
   95080:	18800005 	stb	r2,0(r3)
        return (0);
   95084:	e03fff15 	stw	zero,-4(fp)
   95088:	00002e06 	br	95144 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   9508c:	008002b4 	movhi	r2,10
   95090:	108e5304 	addi	r2,r2,14668
   95094:	10800003 	ldbu	r2,0(r2)
   95098:	10803fcc 	andi	r2,r2,255
   9509c:	1005003a 	cmpeq	r2,r2,zero
   950a0:	1000051e 	bne	r2,zero,950b8 <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
   950a4:	e0fffe17 	ldw	r3,-8(fp)
   950a8:	00800444 	movi	r2,17
   950ac:	18800005 	stb	r2,0(r3)
        return (0);
   950b0:	e03fff15 	stw	zero,-4(fp)
   950b4:	00002306 	br	95144 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   950b8:	0005303a 	rdctl	r2,status
   950bc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   950c0:	e0fff917 	ldw	r3,-28(fp)
   950c4:	00bfff84 	movi	r2,-2
   950c8:	1884703a 	and	r2,r3,r2
   950cc:	1001703a 	wrctl	status,r2
  
  return context;
   950d0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   950d4:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   950d8:	e0bffc17 	ldw	r2,-16(fp)
   950dc:	10800003 	ldbu	r2,0(r2)
   950e0:	10803fcc 	andi	r2,r2,255
   950e4:	10800160 	cmpeqi	r2,r2,5
   950e8:	1000091e 	bne	r2,zero,95110 <OSFlagNameGet+0xf8>
   950ec:	e0bffa17 	ldw	r2,-24(fp)
   950f0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   950f4:	e0bff817 	ldw	r2,-32(fp)
   950f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   950fc:	e0fffe17 	ldw	r3,-8(fp)
   95100:	00800044 	movi	r2,1
   95104:	18800005 	stb	r2,0(r3)
        return (0);
   95108:	e03fff15 	stw	zero,-4(fp)
   9510c:	00000d06 	br	95144 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   95110:	e0bffc17 	ldw	r2,-16(fp)
   95114:	11400284 	addi	r5,r2,10
   95118:	e13ffd17 	ldw	r4,-12(fp)
   9511c:	00941d00 	call	941d0 <OS_StrCopy>
   95120:	e0bffb05 	stb	r2,-20(fp)
   95124:	e0bffa17 	ldw	r2,-24(fp)
   95128:	e0bff715 	stw	r2,-36(fp)
   9512c:	e0bff717 	ldw	r2,-36(fp)
   95130:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   95134:	e0bffe17 	ldw	r2,-8(fp)
   95138:	10000005 	stb	zero,0(r2)
    return (len);
   9513c:	e0bffb03 	ldbu	r2,-20(fp)
   95140:	e0bfff15 	stw	r2,-4(fp)
   95144:	e0bfff17 	ldw	r2,-4(fp)
}
   95148:	e037883a 	mov	sp,fp
   9514c:	dfc00117 	ldw	ra,4(sp)
   95150:	df000017 	ldw	fp,0(sp)
   95154:	dec00204 	addi	sp,sp,8
   95158:	f800283a 	ret

0009515c <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   9515c:	defff504 	addi	sp,sp,-44
   95160:	dfc00a15 	stw	ra,40(sp)
   95164:	df000915 	stw	fp,36(sp)
   95168:	df000904 	addi	fp,sp,36
   9516c:	e13ffd15 	stw	r4,-12(fp)
   95170:	e17ffe15 	stw	r5,-8(fp)
   95174:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   95178:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   9517c:	e0bfff17 	ldw	r2,-4(fp)
   95180:	1005003a 	cmpeq	r2,r2,zero
   95184:	1000451e 	bne	r2,zero,9529c <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   95188:	e0bffd17 	ldw	r2,-12(fp)
   9518c:	1004c03a 	cmpne	r2,r2,zero
   95190:	1000041e 	bne	r2,zero,951a4 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   95194:	e0ffff17 	ldw	r3,-4(fp)
   95198:	00801b84 	movi	r2,110
   9519c:	18800005 	stb	r2,0(r3)
        return;
   951a0:	00003e06 	br	9529c <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   951a4:	e0bffe17 	ldw	r2,-8(fp)
   951a8:	1004c03a 	cmpne	r2,r2,zero
   951ac:	1000041e 	bne	r2,zero,951c0 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
   951b0:	e0ffff17 	ldw	r3,-4(fp)
   951b4:	00800304 	movi	r2,12
   951b8:	18800005 	stb	r2,0(r3)
        return;
   951bc:	00003706 	br	9529c <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   951c0:	008002b4 	movhi	r2,10
   951c4:	108e5304 	addi	r2,r2,14668
   951c8:	10800003 	ldbu	r2,0(r2)
   951cc:	10803fcc 	andi	r2,r2,255
   951d0:	1005003a 	cmpeq	r2,r2,zero
   951d4:	1000041e 	bne	r2,zero,951e8 <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
   951d8:	e0ffff17 	ldw	r3,-4(fp)
   951dc:	00800484 	movi	r2,18
   951e0:	18800005 	stb	r2,0(r3)
        return;
   951e4:	00002d06 	br	9529c <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   951e8:	0005303a 	rdctl	r2,status
   951ec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   951f0:	e0fffa17 	ldw	r3,-24(fp)
   951f4:	00bfff84 	movi	r2,-2
   951f8:	1884703a 	and	r2,r3,r2
   951fc:	1001703a 	wrctl	status,r2
  
  return context;
   95200:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   95204:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   95208:	e0bffd17 	ldw	r2,-12(fp)
   9520c:	10800003 	ldbu	r2,0(r2)
   95210:	10803fcc 	andi	r2,r2,255
   95214:	10800160 	cmpeqi	r2,r2,5
   95218:	1000081e 	bne	r2,zero,9523c <OSFlagNameSet+0xe0>
   9521c:	e0bffb17 	ldw	r2,-20(fp)
   95220:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   95224:	e0bff917 	ldw	r2,-28(fp)
   95228:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   9522c:	e0ffff17 	ldw	r3,-4(fp)
   95230:	00800044 	movi	r2,1
   95234:	18800005 	stb	r2,0(r3)
        return;
   95238:	00001806 	br	9529c <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   9523c:	e13ffe17 	ldw	r4,-8(fp)
   95240:	00942500 	call	94250 <OS_StrLen>
   95244:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   95248:	e0bffc03 	ldbu	r2,-16(fp)
   9524c:	10800830 	cmpltui	r2,r2,32
   95250:	1000081e 	bne	r2,zero,95274 <OSFlagNameSet+0x118>
   95254:	e0bffb17 	ldw	r2,-20(fp)
   95258:	e0bff815 	stw	r2,-32(fp)
   9525c:	e0bff817 	ldw	r2,-32(fp)
   95260:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   95264:	e0ffff17 	ldw	r3,-4(fp)
   95268:	00801cc4 	movi	r2,115
   9526c:	18800005 	stb	r2,0(r3)
        return;
   95270:	00000a06 	br	9529c <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   95274:	e0bffd17 	ldw	r2,-12(fp)
   95278:	11000284 	addi	r4,r2,10
   9527c:	e17ffe17 	ldw	r5,-8(fp)
   95280:	00941d00 	call	941d0 <OS_StrCopy>
   95284:	e0bffb17 	ldw	r2,-20(fp)
   95288:	e0bff715 	stw	r2,-36(fp)
   9528c:	e0bff717 	ldw	r2,-36(fp)
   95290:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   95294:	e0bfff17 	ldw	r2,-4(fp)
   95298:	10000005 	stb	zero,0(r2)
    return;
}
   9529c:	e037883a 	mov	sp,fp
   952a0:	dfc00117 	ldw	ra,4(sp)
   952a4:	df000017 	ldw	fp,0(sp)
   952a8:	dec00204 	addi	sp,sp,8
   952ac:	f800283a 	ret

000952b0 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   952b0:	deffe004 	addi	sp,sp,-128
   952b4:	dfc01f15 	stw	ra,124(sp)
   952b8:	df001e15 	stw	fp,120(sp)
   952bc:	df001e04 	addi	fp,sp,120
   952c0:	e13ff915 	stw	r4,-28(fp)
   952c4:	e17ffa0d 	sth	r5,-24(fp)
   952c8:	e1bffb05 	stb	r6,-20(fp)
   952cc:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   952d0:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   952d4:	e0800217 	ldw	r2,8(fp)
   952d8:	1004c03a 	cmpne	r2,r2,zero
   952dc:	1000021e 	bne	r2,zero,952e8 <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
   952e0:	e03fff15 	stw	zero,-4(fp)
   952e4:	00017d06 	br	958dc <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   952e8:	e0bff917 	ldw	r2,-28(fp)
   952ec:	1004c03a 	cmpne	r2,r2,zero
   952f0:	1000051e 	bne	r2,zero,95308 <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   952f4:	e0c00217 	ldw	r3,8(fp)
   952f8:	00801b84 	movi	r2,110
   952fc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   95300:	e03fff15 	stw	zero,-4(fp)
   95304:	00017506 	br	958dc <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   95308:	008002b4 	movhi	r2,10
   9530c:	108e5304 	addi	r2,r2,14668
   95310:	10800003 	ldbu	r2,0(r2)
   95314:	10803fcc 	andi	r2,r2,255
   95318:	1005003a 	cmpeq	r2,r2,zero
   9531c:	1000051e 	bne	r2,zero,95334 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   95320:	e0c00217 	ldw	r3,8(fp)
   95324:	00800084 	movi	r2,2
   95328:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   9532c:	e03fff15 	stw	zero,-4(fp)
   95330:	00016a06 	br	958dc <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   95334:	008002b4 	movhi	r2,10
   95338:	108e4504 	addi	r2,r2,14612
   9533c:	10800003 	ldbu	r2,0(r2)
   95340:	10803fcc 	andi	r2,r2,255
   95344:	1005003a 	cmpeq	r2,r2,zero
   95348:	1000051e 	bne	r2,zero,95360 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   9534c:	e0c00217 	ldw	r3,8(fp)
   95350:	00800344 	movi	r2,13
   95354:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   95358:	e03fff15 	stw	zero,-4(fp)
   9535c:	00015f06 	br	958dc <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   95360:	e0bff917 	ldw	r2,-28(fp)
   95364:	10800003 	ldbu	r2,0(r2)
   95368:	10803fcc 	andi	r2,r2,255
   9536c:	10800160 	cmpeqi	r2,r2,5
   95370:	1000051e 	bne	r2,zero,95388 <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
   95374:	e0c00217 	ldw	r3,8(fp)
   95378:	00800044 	movi	r2,1
   9537c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   95380:	e03fff15 	stw	zero,-4(fp)
   95384:	00015506 	br	958dc <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   95388:	e0fffb03 	ldbu	r3,-20(fp)
   9538c:	00bfe004 	movi	r2,-128
   95390:	1884703a 	and	r2,r3,r2
   95394:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   95398:	e0bff283 	ldbu	r2,-54(fp)
   9539c:	1005003a 	cmpeq	r2,r2,zero
   953a0:	1000071e 	bne	r2,zero,953c0 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   953a4:	00c01fc4 	movi	r3,127
   953a8:	e0bffb03 	ldbu	r2,-20(fp)
   953ac:	10c4703a 	and	r2,r2,r3
   953b0:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
   953b4:	00800044 	movi	r2,1
   953b8:	e0bff205 	stb	r2,-56(fp)
   953bc:	00000106 	br	953c4 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
   953c0:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   953c4:	0005303a 	rdctl	r2,status
   953c8:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   953cc:	e0fff017 	ldw	r3,-64(fp)
   953d0:	00bfff84 	movi	r2,-2
   953d4:	1884703a 	and	r2,r3,r2
   953d8:	1001703a 	wrctl	status,r2
  
  return context;
   953dc:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   953e0:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
   953e4:	e0bffb03 	ldbu	r2,-20(fp)
   953e8:	e0bffe15 	stw	r2,-8(fp)
   953ec:	e0fffe17 	ldw	r3,-8(fp)
   953f0:	18800060 	cmpeqi	r2,r3,1
   953f4:	1000981e 	bne	r2,zero,95658 <OSFlagPend+0x3a8>
   953f8:	e0fffe17 	ldw	r3,-8(fp)
   953fc:	18800088 	cmpgei	r2,r3,2
   95400:	1000041e 	bne	r2,zero,95414 <OSFlagPend+0x164>
   95404:	e0fffe17 	ldw	r3,-8(fp)
   95408:	1805003a 	cmpeq	r2,r3,zero
   9540c:	1000641e 	bne	r2,zero,955a0 <OSFlagPend+0x2f0>
   95410:	0000bf06 	br	95710 <OSFlagPend+0x460>
   95414:	e0fffe17 	ldw	r3,-8(fp)
   95418:	188000a0 	cmpeqi	r2,r3,2
   9541c:	1000041e 	bne	r2,zero,95430 <OSFlagPend+0x180>
   95420:	e0fffe17 	ldw	r3,-8(fp)
   95424:	188000e0 	cmpeqi	r2,r3,3
   95428:	10002f1e 	bne	r2,zero,954e8 <OSFlagPend+0x238>
   9542c:	0000b806 	br	95710 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   95430:	e0bff917 	ldw	r2,-28(fp)
   95434:	10c0020b 	ldhu	r3,8(r2)
   95438:	e0bffa0b 	ldhu	r2,-24(fp)
   9543c:	1884703a 	and	r2,r3,r2
   95440:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   95444:	e0fff30b 	ldhu	r3,-52(fp)
   95448:	e0bffa0b 	ldhu	r2,-24(fp)
   9544c:	18801a1e 	bne	r3,r2,954b8 <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   95450:	e0bff203 	ldbu	r2,-56(fp)
   95454:	10800058 	cmpnei	r2,r2,1
   95458:	1000091e 	bne	r2,zero,95480 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   9545c:	e0bff917 	ldw	r2,-28(fp)
   95460:	1080020b 	ldhu	r2,8(r2)
   95464:	1007883a 	mov	r3,r2
   95468:	e0bff30b 	ldhu	r2,-52(fp)
   9546c:	0084303a 	nor	r2,zero,r2
   95470:	1884703a 	and	r2,r3,r2
   95474:	1007883a 	mov	r3,r2
   95478:	e0bff917 	ldw	r2,-28(fp)
   9547c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   95480:	008002b4 	movhi	r2,10
   95484:	108e5404 	addi	r2,r2,14672
   95488:	10c00017 	ldw	r3,0(r2)
   9548c:	e0bff30b 	ldhu	r2,-52(fp)
   95490:	18800b0d 	sth	r2,44(r3)
   95494:	e0bff117 	ldw	r2,-60(fp)
   95498:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9549c:	e0bfef17 	ldw	r2,-68(fp)
   954a0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   954a4:	e0800217 	ldw	r2,8(fp)
   954a8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   954ac:	e0bff30b 	ldhu	r2,-52(fp)
   954b0:	e0bfff15 	stw	r2,-4(fp)
   954b4:	00010906 	br	958dc <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   954b8:	e1bffa0b 	ldhu	r6,-24(fp)
   954bc:	e1fffb03 	ldbu	r7,-20(fp)
   954c0:	e0bffc0b 	ldhu	r2,-16(fp)
   954c4:	e17ff404 	addi	r5,fp,-48
   954c8:	d8800015 	stw	r2,0(sp)
   954cc:	e13ff917 	ldw	r4,-28(fp)
   954d0:	0095dd80 	call	95dd8 <OS_FlagBlock>
   954d4:	e0bff117 	ldw	r2,-60(fp)
   954d8:	e0bfee15 	stw	r2,-72(fp)
   954dc:	e0bfee17 	ldw	r2,-72(fp)
   954e0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   954e4:	00009506 	br	9573c <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   954e8:	e0bff917 	ldw	r2,-28(fp)
   954ec:	10c0020b 	ldhu	r3,8(r2)
   954f0:	e0bffa0b 	ldhu	r2,-24(fp)
   954f4:	1884703a 	and	r2,r3,r2
   954f8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   954fc:	e0bff30b 	ldhu	r2,-52(fp)
   95500:	1005003a 	cmpeq	r2,r2,zero
   95504:	10001a1e 	bne	r2,zero,95570 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   95508:	e0bff203 	ldbu	r2,-56(fp)
   9550c:	10800058 	cmpnei	r2,r2,1
   95510:	1000091e 	bne	r2,zero,95538 <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   95514:	e0bff917 	ldw	r2,-28(fp)
   95518:	1080020b 	ldhu	r2,8(r2)
   9551c:	1007883a 	mov	r3,r2
   95520:	e0bff30b 	ldhu	r2,-52(fp)
   95524:	0084303a 	nor	r2,zero,r2
   95528:	1884703a 	and	r2,r3,r2
   9552c:	1007883a 	mov	r3,r2
   95530:	e0bff917 	ldw	r2,-28(fp)
   95534:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   95538:	008002b4 	movhi	r2,10
   9553c:	108e5404 	addi	r2,r2,14672
   95540:	10c00017 	ldw	r3,0(r2)
   95544:	e0bff30b 	ldhu	r2,-52(fp)
   95548:	18800b0d 	sth	r2,44(r3)
   9554c:	e0bff117 	ldw	r2,-60(fp)
   95550:	e0bfed15 	stw	r2,-76(fp)
   95554:	e0bfed17 	ldw	r2,-76(fp)
   95558:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   9555c:	e0800217 	ldw	r2,8(fp)
   95560:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   95564:	e0fff30b 	ldhu	r3,-52(fp)
   95568:	e0ffff15 	stw	r3,-4(fp)
   9556c:	0000db06 	br	958dc <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   95570:	e1bffa0b 	ldhu	r6,-24(fp)
   95574:	e1fffb03 	ldbu	r7,-20(fp)
   95578:	e0bffc0b 	ldhu	r2,-16(fp)
   9557c:	e17ff404 	addi	r5,fp,-48
   95580:	d8800015 	stw	r2,0(sp)
   95584:	e13ff917 	ldw	r4,-28(fp)
   95588:	0095dd80 	call	95dd8 <OS_FlagBlock>
   9558c:	e0bff117 	ldw	r2,-60(fp)
   95590:	e0bfec15 	stw	r2,-80(fp)
   95594:	e0bfec17 	ldw	r2,-80(fp)
   95598:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   9559c:	00006706 	br	9573c <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   955a0:	e0bff917 	ldw	r2,-28(fp)
   955a4:	1080020b 	ldhu	r2,8(r2)
   955a8:	0084303a 	nor	r2,zero,r2
   955ac:	1007883a 	mov	r3,r2
   955b0:	e0bffa0b 	ldhu	r2,-24(fp)
   955b4:	1884703a 	and	r2,r3,r2
   955b8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   955bc:	e0fff30b 	ldhu	r3,-52(fp)
   955c0:	e0bffa0b 	ldhu	r2,-24(fp)
   955c4:	1880181e 	bne	r3,r2,95628 <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   955c8:	e0bff203 	ldbu	r2,-56(fp)
   955cc:	10800058 	cmpnei	r2,r2,1
   955d0:	1000071e 	bne	r2,zero,955f0 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   955d4:	e0bff917 	ldw	r2,-28(fp)
   955d8:	10c0020b 	ldhu	r3,8(r2)
   955dc:	e0bff30b 	ldhu	r2,-52(fp)
   955e0:	1884b03a 	or	r2,r3,r2
   955e4:	1007883a 	mov	r3,r2
   955e8:	e0bff917 	ldw	r2,-28(fp)
   955ec:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   955f0:	008002b4 	movhi	r2,10
   955f4:	108e5404 	addi	r2,r2,14672
   955f8:	10c00017 	ldw	r3,0(r2)
   955fc:	e0bff30b 	ldhu	r2,-52(fp)
   95600:	18800b0d 	sth	r2,44(r3)
   95604:	e0bff117 	ldw	r2,-60(fp)
   95608:	e0bfeb15 	stw	r2,-84(fp)
   9560c:	e0bfeb17 	ldw	r2,-84(fp)
   95610:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   95614:	e0800217 	ldw	r2,8(fp)
   95618:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   9561c:	e0bff30b 	ldhu	r2,-52(fp)
   95620:	e0bfff15 	stw	r2,-4(fp)
   95624:	0000ad06 	br	958dc <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   95628:	e1bffa0b 	ldhu	r6,-24(fp)
   9562c:	e1fffb03 	ldbu	r7,-20(fp)
   95630:	e0bffc0b 	ldhu	r2,-16(fp)
   95634:	e17ff404 	addi	r5,fp,-48
   95638:	d8800015 	stw	r2,0(sp)
   9563c:	e13ff917 	ldw	r4,-28(fp)
   95640:	0095dd80 	call	95dd8 <OS_FlagBlock>
   95644:	e0bff117 	ldw	r2,-60(fp)
   95648:	e0bfea15 	stw	r2,-88(fp)
   9564c:	e0bfea17 	ldw	r2,-88(fp)
   95650:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   95654:	00003906 	br	9573c <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   95658:	e0bff917 	ldw	r2,-28(fp)
   9565c:	1080020b 	ldhu	r2,8(r2)
   95660:	0084303a 	nor	r2,zero,r2
   95664:	1007883a 	mov	r3,r2
   95668:	e0bffa0b 	ldhu	r2,-24(fp)
   9566c:	1884703a 	and	r2,r3,r2
   95670:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   95674:	e0bff30b 	ldhu	r2,-52(fp)
   95678:	1005003a 	cmpeq	r2,r2,zero
   9567c:	1000181e 	bne	r2,zero,956e0 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   95680:	e0bff203 	ldbu	r2,-56(fp)
   95684:	10800058 	cmpnei	r2,r2,1
   95688:	1000071e 	bne	r2,zero,956a8 <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   9568c:	e0bff917 	ldw	r2,-28(fp)
   95690:	10c0020b 	ldhu	r3,8(r2)
   95694:	e0bff30b 	ldhu	r2,-52(fp)
   95698:	1884b03a 	or	r2,r3,r2
   9569c:	1007883a 	mov	r3,r2
   956a0:	e0bff917 	ldw	r2,-28(fp)
   956a4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   956a8:	008002b4 	movhi	r2,10
   956ac:	108e5404 	addi	r2,r2,14672
   956b0:	10c00017 	ldw	r3,0(r2)
   956b4:	e0bff30b 	ldhu	r2,-52(fp)
   956b8:	18800b0d 	sth	r2,44(r3)
   956bc:	e0bff117 	ldw	r2,-60(fp)
   956c0:	e0bfe915 	stw	r2,-92(fp)
   956c4:	e0bfe917 	ldw	r2,-92(fp)
   956c8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   956cc:	e0800217 	ldw	r2,8(fp)
   956d0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   956d4:	e0fff30b 	ldhu	r3,-52(fp)
   956d8:	e0ffff15 	stw	r3,-4(fp)
   956dc:	00007f06 	br	958dc <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   956e0:	e1bffa0b 	ldhu	r6,-24(fp)
   956e4:	e1fffb03 	ldbu	r7,-20(fp)
   956e8:	e0bffc0b 	ldhu	r2,-16(fp)
   956ec:	e17ff404 	addi	r5,fp,-48
   956f0:	d8800015 	stw	r2,0(sp)
   956f4:	e13ff917 	ldw	r4,-28(fp)
   956f8:	0095dd80 	call	95dd8 <OS_FlagBlock>
   956fc:	e0bff117 	ldw	r2,-60(fp)
   95700:	e0bfe815 	stw	r2,-96(fp)
   95704:	e0bfe817 	ldw	r2,-96(fp)
   95708:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   9570c:	00000b06 	br	9573c <OSFlagPend+0x48c>
   95710:	e0bff117 	ldw	r2,-60(fp)
   95714:	e0bfe715 	stw	r2,-100(fp)
   95718:	e0bfe717 	ldw	r2,-100(fp)
   9571c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   95720:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   95724:	e0c00217 	ldw	r3,8(fp)
   95728:	00801bc4 	movi	r2,111
   9572c:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
   95730:	e0bff30b 	ldhu	r2,-52(fp)
   95734:	e0bfff15 	stw	r2,-4(fp)
   95738:	00006806 	br	958dc <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   9573c:	009408c0 	call	9408c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   95740:	0005303a 	rdctl	r2,status
   95744:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   95748:	e0ffe617 	ldw	r3,-104(fp)
   9574c:	00bfff84 	movi	r2,-2
   95750:	1884703a 	and	r2,r3,r2
   95754:	1001703a 	wrctl	status,r2
  
  return context;
   95758:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
   9575c:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   95760:	008002b4 	movhi	r2,10
   95764:	108e5404 	addi	r2,r2,14672
   95768:	10800017 	ldw	r2,0(r2)
   9576c:	10800c43 	ldbu	r2,49(r2)
   95770:	10803fcc 	andi	r2,r2,255
   95774:	1005003a 	cmpeq	r2,r2,zero
   95778:	1000221e 	bne	r2,zero,95804 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   9577c:	008002b4 	movhi	r2,10
   95780:	108e5404 	addi	r2,r2,14672
   95784:	10800017 	ldw	r2,0(r2)
   95788:	10800c43 	ldbu	r2,49(r2)
   9578c:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   95790:	008002b4 	movhi	r2,10
   95794:	108e5404 	addi	r2,r2,14672
   95798:	10800017 	ldw	r2,0(r2)
   9579c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   957a0:	e13ff404 	addi	r4,fp,-48
   957a4:	00961900 	call	96190 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   957a8:	008002b4 	movhi	r2,10
   957ac:	108e5404 	addi	r2,r2,14672
   957b0:	10800017 	ldw	r2,0(r2)
   957b4:	10000c05 	stb	zero,48(r2)
   957b8:	e0bff117 	ldw	r2,-60(fp)
   957bc:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   957c0:	e0bfe517 	ldw	r2,-108(fp)
   957c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   957c8:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
   957cc:	e0bff243 	ldbu	r2,-55(fp)
   957d0:	108000a0 	cmpeqi	r2,r2,2
   957d4:	1000011e 	bne	r2,zero,957dc <OSFlagPend+0x52c>
   957d8:	00000406 	br	957ec <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   957dc:	e0c00217 	ldw	r3,8(fp)
   957e0:	00800384 	movi	r2,14
   957e4:	18800005 	stb	r2,0(r3)
                 break;
   957e8:	00000306 	br	957f8 <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   957ec:	e0c00217 	ldw	r3,8(fp)
   957f0:	00800284 	movi	r2,10
   957f4:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
   957f8:	e0fff30b 	ldhu	r3,-52(fp)
   957fc:	e0ffff15 	stw	r3,-4(fp)
   95800:	00003606 	br	958dc <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   95804:	008002b4 	movhi	r2,10
   95808:	108e5404 	addi	r2,r2,14672
   9580c:	10800017 	ldw	r2,0(r2)
   95810:	10800b0b 	ldhu	r2,44(r2)
   95814:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   95818:	e0bff203 	ldbu	r2,-56(fp)
   9581c:	10800058 	cmpnei	r2,r2,1
   95820:	1000261e 	bne	r2,zero,958bc <OSFlagPend+0x60c>
        switch (wait_type) {
   95824:	e0bffb03 	ldbu	r2,-20(fp)
   95828:	e0bffd15 	stw	r2,-12(fp)
   9582c:	e0fffd17 	ldw	r3,-12(fp)
   95830:	1804803a 	cmplt	r2,r3,zero
   95834:	1000181e 	bne	r2,zero,95898 <OSFlagPend+0x5e8>
   95838:	e0fffd17 	ldw	r3,-12(fp)
   9583c:	18800090 	cmplti	r2,r3,2
   95840:	10000d1e 	bne	r2,zero,95878 <OSFlagPend+0x5c8>
   95844:	e0fffd17 	ldw	r3,-12(fp)
   95848:	18800108 	cmpgei	r2,r3,4
   9584c:	1000121e 	bne	r2,zero,95898 <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   95850:	e0bff917 	ldw	r2,-28(fp)
   95854:	1080020b 	ldhu	r2,8(r2)
   95858:	1007883a 	mov	r3,r2
   9585c:	e0bff30b 	ldhu	r2,-52(fp)
   95860:	0084303a 	nor	r2,zero,r2
   95864:	1884703a 	and	r2,r3,r2
   95868:	1007883a 	mov	r3,r2
   9586c:	e0bff917 	ldw	r2,-28(fp)
   95870:	10c0020d 	sth	r3,8(r2)
                 break;
   95874:	00001106 	br	958bc <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   95878:	e0bff917 	ldw	r2,-28(fp)
   9587c:	10c0020b 	ldhu	r3,8(r2)
   95880:	e0bff30b 	ldhu	r2,-52(fp)
   95884:	1884b03a 	or	r2,r3,r2
   95888:	1007883a 	mov	r3,r2
   9588c:	e0bff917 	ldw	r2,-28(fp)
   95890:	10c0020d 	sth	r3,8(r2)
                 break;
   95894:	00000906 	br	958bc <OSFlagPend+0x60c>
   95898:	e0bff117 	ldw	r2,-60(fp)
   9589c:	e0bfe415 	stw	r2,-112(fp)
   958a0:	e0bfe417 	ldw	r2,-112(fp)
   958a4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   958a8:	e0c00217 	ldw	r3,8(fp)
   958ac:	00801bc4 	movi	r2,111
   958b0:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
   958b4:	e03fff15 	stw	zero,-4(fp)
   958b8:	00000806 	br	958dc <OSFlagPend+0x62c>
   958bc:	e0bff117 	ldw	r2,-60(fp)
   958c0:	e0bfe315 	stw	r2,-116(fp)
   958c4:	e0bfe317 	ldw	r2,-116(fp)
   958c8:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   958cc:	e0800217 	ldw	r2,8(fp)
   958d0:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   958d4:	e0bff30b 	ldhu	r2,-52(fp)
   958d8:	e0bfff15 	stw	r2,-4(fp)
   958dc:	e0bfff17 	ldw	r2,-4(fp)
}
   958e0:	e037883a 	mov	sp,fp
   958e4:	dfc00117 	ldw	ra,4(sp)
   958e8:	df000017 	ldw	fp,0(sp)
   958ec:	dec00204 	addi	sp,sp,8
   958f0:	f800283a 	ret

000958f4 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   958f4:	defffb04 	addi	sp,sp,-20
   958f8:	df000415 	stw	fp,16(sp)
   958fc:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   95900:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   95904:	0005303a 	rdctl	r2,status
   95908:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9590c:	e0fffd17 	ldw	r3,-12(fp)
   95910:	00bfff84 	movi	r2,-2
   95914:	1884703a 	and	r2,r3,r2
   95918:	1001703a 	wrctl	status,r2
  
  return context;
   9591c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   95920:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   95924:	008002b4 	movhi	r2,10
   95928:	108e5404 	addi	r2,r2,14672
   9592c:	10800017 	ldw	r2,0(r2)
   95930:	10800b0b 	ldhu	r2,44(r2)
   95934:	e0bfff0d 	sth	r2,-4(fp)
   95938:	e0bffe17 	ldw	r2,-8(fp)
   9593c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   95940:	e0bffc17 	ldw	r2,-16(fp)
   95944:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   95948:	e0bfff0b 	ldhu	r2,-4(fp)
}
   9594c:	e037883a 	mov	sp,fp
   95950:	df000017 	ldw	fp,0(sp)
   95954:	dec00104 	addi	sp,sp,4
   95958:	f800283a 	ret

0009595c <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   9595c:	deffed04 	addi	sp,sp,-76
   95960:	dfc01215 	stw	ra,72(sp)
   95964:	df001115 	stw	fp,68(sp)
   95968:	df001104 	addi	fp,sp,68
   9596c:	e13ff915 	stw	r4,-28(fp)
   95970:	e1fffc15 	stw	r7,-16(fp)
   95974:	e17ffa0d 	sth	r5,-24(fp)
   95978:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   9597c:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   95980:	e0bffc17 	ldw	r2,-16(fp)
   95984:	1004c03a 	cmpne	r2,r2,zero
   95988:	1000021e 	bne	r2,zero,95994 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
   9598c:	e03fff15 	stw	zero,-4(fp)
   95990:	0000d606 	br	95cec <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   95994:	e0bff917 	ldw	r2,-28(fp)
   95998:	1004c03a 	cmpne	r2,r2,zero
   9599c:	1000051e 	bne	r2,zero,959b4 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   959a0:	e0fffc17 	ldw	r3,-16(fp)
   959a4:	00801b84 	movi	r2,110
   959a8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   959ac:	e03fff15 	stw	zero,-4(fp)
   959b0:	0000ce06 	br	95cec <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   959b4:	e0bff917 	ldw	r2,-28(fp)
   959b8:	10800003 	ldbu	r2,0(r2)
   959bc:	10803fcc 	andi	r2,r2,255
   959c0:	10800160 	cmpeqi	r2,r2,5
   959c4:	1000051e 	bne	r2,zero,959dc <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   959c8:	e0fffc17 	ldw	r3,-16(fp)
   959cc:	00800044 	movi	r2,1
   959d0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   959d4:	e03fff15 	stw	zero,-4(fp)
   959d8:	0000c406 	br	95cec <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   959dc:	0005303a 	rdctl	r2,status
   959e0:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   959e4:	e0fff417 	ldw	r3,-48(fp)
   959e8:	00bfff84 	movi	r2,-2
   959ec:	1884703a 	and	r2,r3,r2
   959f0:	1001703a 	wrctl	status,r2
  
  return context;
   959f4:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   959f8:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
   959fc:	e0bffb03 	ldbu	r2,-20(fp)
   95a00:	e0bffe15 	stw	r2,-8(fp)
   95a04:	e0fffe17 	ldw	r3,-8(fp)
   95a08:	1805003a 	cmpeq	r2,r3,zero
   95a0c:	1000041e 	bne	r2,zero,95a20 <OSFlagPost+0xc4>
   95a10:	e0fffe17 	ldw	r3,-8(fp)
   95a14:	18800060 	cmpeqi	r2,r3,1
   95a18:	10000b1e 	bne	r2,zero,95a48 <OSFlagPost+0xec>
   95a1c:	00001206 	br	95a68 <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   95a20:	e0bff917 	ldw	r2,-28(fp)
   95a24:	1080020b 	ldhu	r2,8(r2)
   95a28:	1007883a 	mov	r3,r2
   95a2c:	e0bffa0b 	ldhu	r2,-24(fp)
   95a30:	0084303a 	nor	r2,zero,r2
   95a34:	1884703a 	and	r2,r3,r2
   95a38:	1007883a 	mov	r3,r2
   95a3c:	e0bff917 	ldw	r2,-28(fp)
   95a40:	10c0020d 	sth	r3,8(r2)
             break;
   95a44:	00001106 	br	95a8c <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   95a48:	e0bff917 	ldw	r2,-28(fp)
   95a4c:	10c0020b 	ldhu	r3,8(r2)
   95a50:	e0bffa0b 	ldhu	r2,-24(fp)
   95a54:	1884b03a 	or	r2,r3,r2
   95a58:	1007883a 	mov	r3,r2
   95a5c:	e0bff917 	ldw	r2,-28(fp)
   95a60:	10c0020d 	sth	r3,8(r2)
             break;
   95a64:	00000906 	br	95a8c <OSFlagPost+0x130>
   95a68:	e0bff517 	ldw	r2,-44(fp)
   95a6c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   95a70:	e0bff317 	ldw	r2,-52(fp)
   95a74:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   95a78:	e0fffc17 	ldw	r3,-16(fp)
   95a7c:	00801c44 	movi	r2,113
   95a80:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
   95a84:	e03fff15 	stw	zero,-4(fp)
   95a88:	00009806 	br	95cec <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   95a8c:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   95a90:	e0bff917 	ldw	r2,-28(fp)
   95a94:	10800117 	ldw	r2,4(r2)
   95a98:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   95a9c:	00007506 	br	95c74 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
   95aa0:	e0bff817 	ldw	r2,-32(fp)
   95aa4:	10800483 	ldbu	r2,18(r2)
   95aa8:	10803fcc 	andi	r2,r2,255
   95aac:	e0bffd15 	stw	r2,-12(fp)
   95ab0:	e0fffd17 	ldw	r3,-12(fp)
   95ab4:	18800060 	cmpeqi	r2,r3,1
   95ab8:	10004d1e 	bne	r2,zero,95bf0 <OSFlagPost+0x294>
   95abc:	e0fffd17 	ldw	r3,-12(fp)
   95ac0:	18800088 	cmpgei	r2,r3,2
   95ac4:	1000041e 	bne	r2,zero,95ad8 <OSFlagPost+0x17c>
   95ac8:	e0fffd17 	ldw	r3,-12(fp)
   95acc:	1805003a 	cmpeq	r2,r3,zero
   95ad0:	1000301e 	bne	r2,zero,95b94 <OSFlagPost+0x238>
   95ad4:	00005b06 	br	95c44 <OSFlagPost+0x2e8>
   95ad8:	e0fffd17 	ldw	r3,-12(fp)
   95adc:	188000a0 	cmpeqi	r2,r3,2
   95ae0:	1000041e 	bne	r2,zero,95af4 <OSFlagPost+0x198>
   95ae4:	e0fffd17 	ldw	r3,-12(fp)
   95ae8:	188000e0 	cmpeqi	r2,r3,3
   95aec:	1000161e 	bne	r2,zero,95b48 <OSFlagPost+0x1ec>
   95af0:	00005406 	br	95c44 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   95af4:	e0bff917 	ldw	r2,-28(fp)
   95af8:	10c0020b 	ldhu	r3,8(r2)
   95afc:	e0bff817 	ldw	r2,-32(fp)
   95b00:	1080040b 	ldhu	r2,16(r2)
   95b04:	1884703a 	and	r2,r3,r2
   95b08:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   95b0c:	e0bff817 	ldw	r2,-32(fp)
   95b10:	1080040b 	ldhu	r2,16(r2)
   95b14:	10ffffcc 	andi	r3,r2,65535
   95b18:	e0bff68b 	ldhu	r2,-38(fp)
   95b1c:	1880521e 	bne	r3,r2,95c68 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   95b20:	e17ff68b 	ldhu	r5,-38(fp)
   95b24:	e13ff817 	ldw	r4,-32(fp)
   95b28:	00960800 	call	96080 <OS_FlagTaskRdy>
   95b2c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
   95b30:	e0bff603 	ldbu	r2,-40(fp)
   95b34:	10800058 	cmpnei	r2,r2,1
   95b38:	10004b1e 	bne	r2,zero,95c68 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   95b3c:	00800044 	movi	r2,1
   95b40:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
   95b44:	00004806 	br	95c68 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   95b48:	e0bff917 	ldw	r2,-28(fp)
   95b4c:	10c0020b 	ldhu	r3,8(r2)
   95b50:	e0bff817 	ldw	r2,-32(fp)
   95b54:	1080040b 	ldhu	r2,16(r2)
   95b58:	1884703a 	and	r2,r3,r2
   95b5c:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   95b60:	e0bff68b 	ldhu	r2,-38(fp)
   95b64:	1005003a 	cmpeq	r2,r2,zero
   95b68:	10003f1e 	bne	r2,zero,95c68 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   95b6c:	e17ff68b 	ldhu	r5,-38(fp)
   95b70:	e13ff817 	ldw	r4,-32(fp)
   95b74:	00960800 	call	96080 <OS_FlagTaskRdy>
   95b78:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
   95b7c:	e0bff603 	ldbu	r2,-40(fp)
   95b80:	10800058 	cmpnei	r2,r2,1
   95b84:	1000381e 	bne	r2,zero,95c68 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   95b88:	00800044 	movi	r2,1
   95b8c:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
   95b90:	00003506 	br	95c68 <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   95b94:	e0bff917 	ldw	r2,-28(fp)
   95b98:	1080020b 	ldhu	r2,8(r2)
   95b9c:	0084303a 	nor	r2,zero,r2
   95ba0:	1007883a 	mov	r3,r2
   95ba4:	e0bff817 	ldw	r2,-32(fp)
   95ba8:	1080040b 	ldhu	r2,16(r2)
   95bac:	1884703a 	and	r2,r3,r2
   95bb0:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   95bb4:	e0bff817 	ldw	r2,-32(fp)
   95bb8:	1080040b 	ldhu	r2,16(r2)
   95bbc:	10ffffcc 	andi	r3,r2,65535
   95bc0:	e0bff68b 	ldhu	r2,-38(fp)
   95bc4:	1880281e 	bne	r3,r2,95c68 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   95bc8:	e17ff68b 	ldhu	r5,-38(fp)
   95bcc:	e13ff817 	ldw	r4,-32(fp)
   95bd0:	00960800 	call	96080 <OS_FlagTaskRdy>
   95bd4:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
   95bd8:	e0bff603 	ldbu	r2,-40(fp)
   95bdc:	10800058 	cmpnei	r2,r2,1
   95be0:	1000211e 	bne	r2,zero,95c68 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   95be4:	00800044 	movi	r2,1
   95be8:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
   95bec:	00001e06 	br	95c68 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   95bf0:	e0bff917 	ldw	r2,-28(fp)
   95bf4:	1080020b 	ldhu	r2,8(r2)
   95bf8:	0084303a 	nor	r2,zero,r2
   95bfc:	1007883a 	mov	r3,r2
   95c00:	e0bff817 	ldw	r2,-32(fp)
   95c04:	1080040b 	ldhu	r2,16(r2)
   95c08:	1884703a 	and	r2,r3,r2
   95c0c:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   95c10:	e0bff68b 	ldhu	r2,-38(fp)
   95c14:	1005003a 	cmpeq	r2,r2,zero
   95c18:	1000131e 	bne	r2,zero,95c68 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   95c1c:	e17ff68b 	ldhu	r5,-38(fp)
   95c20:	e13ff817 	ldw	r4,-32(fp)
   95c24:	00960800 	call	96080 <OS_FlagTaskRdy>
   95c28:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
   95c2c:	e0bff603 	ldbu	r2,-40(fp)
   95c30:	10800058 	cmpnei	r2,r2,1
   95c34:	10000c1e 	bne	r2,zero,95c68 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   95c38:	00800044 	movi	r2,1
   95c3c:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
   95c40:	00000906 	br	95c68 <OSFlagPost+0x30c>
   95c44:	e0bff517 	ldw	r2,-44(fp)
   95c48:	e0bff215 	stw	r2,-56(fp)
   95c4c:	e0bff217 	ldw	r2,-56(fp)
   95c50:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   95c54:	e0fffc17 	ldw	r3,-16(fp)
   95c58:	00801bc4 	movi	r2,111
   95c5c:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
   95c60:	e03fff15 	stw	zero,-4(fp)
   95c64:	00002106 	br	95cec <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   95c68:	e0bff817 	ldw	r2,-32(fp)
   95c6c:	10800017 	ldw	r2,0(r2)
   95c70:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   95c74:	e0bff817 	ldw	r2,-32(fp)
   95c78:	1004c03a 	cmpne	r2,r2,zero
   95c7c:	103f881e 	bne	r2,zero,95aa0 <OSFlagPost+0x144>
   95c80:	e0bff517 	ldw	r2,-44(fp)
   95c84:	e0bff115 	stw	r2,-60(fp)
   95c88:	e0bff117 	ldw	r2,-60(fp)
   95c8c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   95c90:	e0bff783 	ldbu	r2,-34(fp)
   95c94:	10800058 	cmpnei	r2,r2,1
   95c98:	1000011e 	bne	r2,zero,95ca0 <OSFlagPost+0x344>
        OS_Sched();
   95c9c:	009408c0 	call	9408c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   95ca0:	0005303a 	rdctl	r2,status
   95ca4:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   95ca8:	e0fff017 	ldw	r3,-64(fp)
   95cac:	00bfff84 	movi	r2,-2
   95cb0:	1884703a 	and	r2,r3,r2
   95cb4:	1001703a 	wrctl	status,r2
  
  return context;
   95cb8:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
   95cbc:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
   95cc0:	e0bff917 	ldw	r2,-28(fp)
   95cc4:	1080020b 	ldhu	r2,8(r2)
   95cc8:	e0bff70d 	sth	r2,-36(fp)
   95ccc:	e0bff517 	ldw	r2,-44(fp)
   95cd0:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   95cd4:	e0bfef17 	ldw	r2,-68(fp)
   95cd8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   95cdc:	e0bffc17 	ldw	r2,-16(fp)
   95ce0:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   95ce4:	e0bff70b 	ldhu	r2,-36(fp)
   95ce8:	e0bfff15 	stw	r2,-4(fp)
   95cec:	e0bfff17 	ldw	r2,-4(fp)
}
   95cf0:	e037883a 	mov	sp,fp
   95cf4:	dfc00117 	ldw	ra,4(sp)
   95cf8:	df000017 	ldw	fp,0(sp)
   95cfc:	dec00204 	addi	sp,sp,8
   95d00:	f800283a 	ret

00095d04 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   95d04:	defff804 	addi	sp,sp,-32
   95d08:	df000715 	stw	fp,28(sp)
   95d0c:	df000704 	addi	fp,sp,28
   95d10:	e13ffd15 	stw	r4,-12(fp)
   95d14:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   95d18:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   95d1c:	e0bffe17 	ldw	r2,-8(fp)
   95d20:	1004c03a 	cmpne	r2,r2,zero
   95d24:	1000021e 	bne	r2,zero,95d30 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
   95d28:	e03fff15 	stw	zero,-4(fp)
   95d2c:	00002506 	br	95dc4 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   95d30:	e0bffd17 	ldw	r2,-12(fp)
   95d34:	1004c03a 	cmpne	r2,r2,zero
   95d38:	1000051e 	bne	r2,zero,95d50 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   95d3c:	e0fffe17 	ldw	r3,-8(fp)
   95d40:	00801b84 	movi	r2,110
   95d44:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   95d48:	e03fff15 	stw	zero,-4(fp)
   95d4c:	00001d06 	br	95dc4 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   95d50:	e0bffd17 	ldw	r2,-12(fp)
   95d54:	10800003 	ldbu	r2,0(r2)
   95d58:	10803fcc 	andi	r2,r2,255
   95d5c:	10800160 	cmpeqi	r2,r2,5
   95d60:	1000051e 	bne	r2,zero,95d78 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
   95d64:	e0fffe17 	ldw	r3,-8(fp)
   95d68:	00800044 	movi	r2,1
   95d6c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
   95d70:	e03fff15 	stw	zero,-4(fp)
   95d74:	00001306 	br	95dc4 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   95d78:	0005303a 	rdctl	r2,status
   95d7c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   95d80:	e0fffa17 	ldw	r3,-24(fp)
   95d84:	00bfff84 	movi	r2,-2
   95d88:	1884703a 	and	r2,r3,r2
   95d8c:	1001703a 	wrctl	status,r2
  
  return context;
   95d90:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   95d94:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
   95d98:	e0bffd17 	ldw	r2,-12(fp)
   95d9c:	1080020b 	ldhu	r2,8(r2)
   95da0:	e0bffc0d 	sth	r2,-16(fp)
   95da4:	e0bffb17 	ldw	r2,-20(fp)
   95da8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   95dac:	e0bff917 	ldw	r2,-28(fp)
   95db0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   95db4:	e0bffe17 	ldw	r2,-8(fp)
   95db8:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   95dbc:	e0bffc0b 	ldhu	r2,-16(fp)
   95dc0:	e0bfff15 	stw	r2,-4(fp)
   95dc4:	e0bfff17 	ldw	r2,-4(fp)
}
   95dc8:	e037883a 	mov	sp,fp
   95dcc:	df000017 	ldw	fp,0(sp)
   95dd0:	dec00104 	addi	sp,sp,4
   95dd4:	f800283a 	ret

00095dd8 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   95dd8:	defff804 	addi	sp,sp,-32
   95ddc:	df000715 	stw	fp,28(sp)
   95de0:	df000704 	addi	fp,sp,28
   95de4:	e13ffb15 	stw	r4,-20(fp)
   95de8:	e17ffc15 	stw	r5,-16(fp)
   95dec:	e0800117 	ldw	r2,4(fp)
   95df0:	e1bffd0d 	sth	r6,-12(fp)
   95df4:	e1fffe05 	stb	r7,-8(fp)
   95df8:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   95dfc:	008002b4 	movhi	r2,10
   95e00:	108e5404 	addi	r2,r2,14672
   95e04:	10c00017 	ldw	r3,0(r2)
   95e08:	008002b4 	movhi	r2,10
   95e0c:	108e5404 	addi	r2,r2,14672
   95e10:	10800017 	ldw	r2,0(r2)
   95e14:	10800c03 	ldbu	r2,48(r2)
   95e18:	10800814 	ori	r2,r2,32
   95e1c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   95e20:	008002b4 	movhi	r2,10
   95e24:	108e5404 	addi	r2,r2,14672
   95e28:	10800017 	ldw	r2,0(r2)
   95e2c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   95e30:	008002b4 	movhi	r2,10
   95e34:	108e5404 	addi	r2,r2,14672
   95e38:	10c00017 	ldw	r3,0(r2)
   95e3c:	e0bfff0b 	ldhu	r2,-4(fp)
   95e40:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   95e44:	008002b4 	movhi	r2,10
   95e48:	108e5404 	addi	r2,r2,14672
   95e4c:	10c00017 	ldw	r3,0(r2)
   95e50:	e0bffc17 	ldw	r2,-16(fp)
   95e54:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   95e58:	e0fffc17 	ldw	r3,-16(fp)
   95e5c:	e0bffd0b 	ldhu	r2,-12(fp)
   95e60:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   95e64:	e0fffc17 	ldw	r3,-16(fp)
   95e68:	e0bffe03 	ldbu	r2,-8(fp)
   95e6c:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   95e70:	008002b4 	movhi	r2,10
   95e74:	108e5404 	addi	r2,r2,14672
   95e78:	10c00017 	ldw	r3,0(r2)
   95e7c:	e0bffc17 	ldw	r2,-16(fp)
   95e80:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   95e84:	e0bffb17 	ldw	r2,-20(fp)
   95e88:	10c00117 	ldw	r3,4(r2)
   95e8c:	e0bffc17 	ldw	r2,-16(fp)
   95e90:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   95e94:	e0bffc17 	ldw	r2,-16(fp)
   95e98:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   95e9c:	e0fffc17 	ldw	r3,-16(fp)
   95ea0:	e0bffb17 	ldw	r2,-20(fp)
   95ea4:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   95ea8:	e0bffb17 	ldw	r2,-20(fp)
   95eac:	10800117 	ldw	r2,4(r2)
   95eb0:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   95eb4:	e0bffa17 	ldw	r2,-24(fp)
   95eb8:	1005003a 	cmpeq	r2,r2,zero
   95ebc:	1000031e 	bne	r2,zero,95ecc <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   95ec0:	e0fffa17 	ldw	r3,-24(fp)
   95ec4:	e0bffc17 	ldw	r2,-16(fp)
   95ec8:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   95ecc:	e0fffb17 	ldw	r3,-20(fp)
   95ed0:	e0bffc17 	ldw	r2,-16(fp)
   95ed4:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   95ed8:	008002b4 	movhi	r2,10
   95edc:	108e5404 	addi	r2,r2,14672
   95ee0:	10800017 	ldw	r2,0(r2)
   95ee4:	10800d03 	ldbu	r2,52(r2)
   95ee8:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   95eec:	e13ff903 	ldbu	r4,-28(fp)
   95ef0:	e0fff903 	ldbu	r3,-28(fp)
   95ef4:	008002b4 	movhi	r2,10
   95ef8:	108e5144 	addi	r2,r2,14661
   95efc:	10c5883a 	add	r2,r2,r3
   95f00:	10800003 	ldbu	r2,0(r2)
   95f04:	1007883a 	mov	r3,r2
   95f08:	008002b4 	movhi	r2,10
   95f0c:	108e5404 	addi	r2,r2,14672
   95f10:	10800017 	ldw	r2,0(r2)
   95f14:	10800d43 	ldbu	r2,53(r2)
   95f18:	0084303a 	nor	r2,zero,r2
   95f1c:	1884703a 	and	r2,r3,r2
   95f20:	1007883a 	mov	r3,r2
   95f24:	008002b4 	movhi	r2,10
   95f28:	108e5144 	addi	r2,r2,14661
   95f2c:	1105883a 	add	r2,r2,r4
   95f30:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   95f34:	e0fff903 	ldbu	r3,-28(fp)
   95f38:	008002b4 	movhi	r2,10
   95f3c:	108e5144 	addi	r2,r2,14661
   95f40:	10c5883a 	add	r2,r2,r3
   95f44:	10800003 	ldbu	r2,0(r2)
   95f48:	10803fcc 	andi	r2,r2,255
   95f4c:	1004c03a 	cmpne	r2,r2,zero
   95f50:	10000e1e 	bne	r2,zero,95f8c <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   95f54:	008002b4 	movhi	r2,10
   95f58:	108e5404 	addi	r2,r2,14672
   95f5c:	10800017 	ldw	r2,0(r2)
   95f60:	10800d83 	ldbu	r2,54(r2)
   95f64:	0084303a 	nor	r2,zero,r2
   95f68:	1007883a 	mov	r3,r2
   95f6c:	008002b4 	movhi	r2,10
   95f70:	108e5104 	addi	r2,r2,14660
   95f74:	10800003 	ldbu	r2,0(r2)
   95f78:	1884703a 	and	r2,r3,r2
   95f7c:	1007883a 	mov	r3,r2
   95f80:	008002b4 	movhi	r2,10
   95f84:	108e5104 	addi	r2,r2,14660
   95f88:	10c00005 	stb	r3,0(r2)
    }
}
   95f8c:	e037883a 	mov	sp,fp
   95f90:	df000017 	ldw	fp,0(sp)
   95f94:	dec00104 	addi	sp,sp,4
   95f98:	f800283a 	ret

00095f9c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   95f9c:	defffb04 	addi	sp,sp,-20
   95fa0:	dfc00415 	stw	ra,16(sp)
   95fa4:	df000315 	stw	fp,12(sp)
   95fa8:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   95fac:	010002f4 	movhi	r4,11
   95fb0:	21164504 	addi	r4,r4,22804
   95fb4:	0140dc04 	movi	r5,880
   95fb8:	0093fcc0 	call	93fcc <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   95fbc:	008002f4 	movhi	r2,11
   95fc0:	10964504 	addi	r2,r2,22804
   95fc4:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   95fc8:	008002f4 	movhi	r2,11
   95fcc:	10965004 	addi	r2,r2,22848
   95fd0:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   95fd4:	e03fff0d 	sth	zero,-4(fp)
   95fd8:	00001306 	br	96028 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   95fdc:	e0bffe17 	ldw	r2,-8(fp)
   95fe0:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   95fe4:	e0fffe17 	ldw	r3,-8(fp)
   95fe8:	e0bffd17 	ldw	r2,-12(fp)
   95fec:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   95ff0:	e0fffe17 	ldw	r3,-8(fp)
   95ff4:	00800fc4 	movi	r2,63
   95ff8:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   95ffc:	e0bffe17 	ldw	r2,-8(fp)
   96000:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   96004:	e0bffe17 	ldw	r2,-8(fp)
   96008:	10800b04 	addi	r2,r2,44
   9600c:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   96010:	e0bffd17 	ldw	r2,-12(fp)
   96014:	10800b04 	addi	r2,r2,44
   96018:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   9601c:	e0bfff0b 	ldhu	r2,-4(fp)
   96020:	10800044 	addi	r2,r2,1
   96024:	e0bfff0d 	sth	r2,-4(fp)
   96028:	e0bfff0b 	ldhu	r2,-4(fp)
   9602c:	108004f0 	cmpltui	r2,r2,19
   96030:	103fea1e 	bne	r2,zero,95fdc <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   96034:	e0bffe17 	ldw	r2,-8(fp)
   96038:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   9603c:	e0bffe17 	ldw	r2,-8(fp)
   96040:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   96044:	e0fffe17 	ldw	r3,-8(fp)
   96048:	00800fc4 	movi	r2,63
   9604c:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   96050:	e0bffe17 	ldw	r2,-8(fp)
   96054:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   96058:	00c002b4 	movhi	r3,10
   9605c:	18ce5604 	addi	r3,r3,14680
   96060:	008002f4 	movhi	r2,11
   96064:	10964504 	addi	r2,r2,22804
   96068:	18800015 	stw	r2,0(r3)
#endif
}
   9606c:	e037883a 	mov	sp,fp
   96070:	dfc00117 	ldw	ra,4(sp)
   96074:	df000017 	ldw	fp,0(sp)
   96078:	dec00204 	addi	sp,sp,8
   9607c:	f800283a 	ret

00096080 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   96080:	defffa04 	addi	sp,sp,-24
   96084:	dfc00515 	stw	ra,20(sp)
   96088:	df000415 	stw	fp,16(sp)
   9608c:	df000404 	addi	fp,sp,16
   96090:	e13ffe15 	stw	r4,-8(fp)
   96094:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   96098:	e0bffe17 	ldw	r2,-8(fp)
   9609c:	10800217 	ldw	r2,8(r2)
   960a0:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   960a4:	e0bffd17 	ldw	r2,-12(fp)
   960a8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   960ac:	e0fffd17 	ldw	r3,-12(fp)
   960b0:	e0bfff0b 	ldhu	r2,-4(fp)
   960b4:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   960b8:	e0bffd17 	ldw	r2,-12(fp)
   960bc:	10c00c03 	ldbu	r3,48(r2)
   960c0:	00bff7c4 	movi	r2,-33
   960c4:	1884703a 	and	r2,r3,r2
   960c8:	1007883a 	mov	r3,r2
   960cc:	e0bffd17 	ldw	r2,-12(fp)
   960d0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   960d4:	e0bffd17 	ldw	r2,-12(fp)
   960d8:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   960dc:	e0bffd17 	ldw	r2,-12(fp)
   960e0:	10800c03 	ldbu	r2,48(r2)
   960e4:	10803fcc 	andi	r2,r2,255
   960e8:	1004c03a 	cmpne	r2,r2,zero
   960ec:	10001f1e 	bne	r2,zero,9616c <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   960f0:	e0bffd17 	ldw	r2,-12(fp)
   960f4:	10c00d83 	ldbu	r3,54(r2)
   960f8:	008002b4 	movhi	r2,10
   960fc:	108e5104 	addi	r2,r2,14660
   96100:	10800003 	ldbu	r2,0(r2)
   96104:	1884b03a 	or	r2,r3,r2
   96108:	1007883a 	mov	r3,r2
   9610c:	008002b4 	movhi	r2,10
   96110:	108e5104 	addi	r2,r2,14660
   96114:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   96118:	e0bffd17 	ldw	r2,-12(fp)
   9611c:	10800d03 	ldbu	r2,52(r2)
   96120:	11003fcc 	andi	r4,r2,255
   96124:	e0bffd17 	ldw	r2,-12(fp)
   96128:	10800d03 	ldbu	r2,52(r2)
   9612c:	10c03fcc 	andi	r3,r2,255
   96130:	008002b4 	movhi	r2,10
   96134:	108e5144 	addi	r2,r2,14661
   96138:	10c5883a 	add	r2,r2,r3
   9613c:	10c00003 	ldbu	r3,0(r2)
   96140:	e0bffd17 	ldw	r2,-12(fp)
   96144:	10800d43 	ldbu	r2,53(r2)
   96148:	1884b03a 	or	r2,r3,r2
   9614c:	1007883a 	mov	r3,r2
   96150:	008002b4 	movhi	r2,10
   96154:	108e5144 	addi	r2,r2,14661
   96158:	1105883a 	add	r2,r2,r4
   9615c:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
   96160:	00800044 	movi	r2,1
   96164:	e0bffc05 	stb	r2,-16(fp)
   96168:	00000106 	br	96170 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
   9616c:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   96170:	e13ffe17 	ldw	r4,-8(fp)
   96174:	00961900 	call	96190 <OS_FlagUnlink>
    return (sched);
   96178:	e0bffc03 	ldbu	r2,-16(fp)
}
   9617c:	e037883a 	mov	sp,fp
   96180:	dfc00117 	ldw	ra,4(sp)
   96184:	df000017 	ldw	fp,0(sp)
   96188:	dec00204 	addi	sp,sp,8
   9618c:	f800283a 	ret

00096190 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   96190:	defffa04 	addi	sp,sp,-24
   96194:	df000515 	stw	fp,20(sp)
   96198:	df000504 	addi	fp,sp,20
   9619c:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   961a0:	e0bfff17 	ldw	r2,-4(fp)
   961a4:	10800117 	ldw	r2,4(r2)
   961a8:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   961ac:	e0bfff17 	ldw	r2,-4(fp)
   961b0:	10800017 	ldw	r2,0(r2)
   961b4:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   961b8:	e0bffc17 	ldw	r2,-16(fp)
   961bc:	1004c03a 	cmpne	r2,r2,zero
   961c0:	10000c1e 	bne	r2,zero,961f4 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   961c4:	e0bfff17 	ldw	r2,-4(fp)
   961c8:	10800317 	ldw	r2,12(r2)
   961cc:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   961d0:	e0fffd17 	ldw	r3,-12(fp)
   961d4:	e0bffb17 	ldw	r2,-20(fp)
   961d8:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   961dc:	e0bffb17 	ldw	r2,-20(fp)
   961e0:	1005003a 	cmpeq	r2,r2,zero
   961e4:	10000c1e 	bne	r2,zero,96218 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   961e8:	e0bffb17 	ldw	r2,-20(fp)
   961ec:	10000115 	stw	zero,4(r2)
   961f0:	00000906 	br	96218 <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   961f4:	e0fffc17 	ldw	r3,-16(fp)
   961f8:	e0bffb17 	ldw	r2,-20(fp)
   961fc:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   96200:	e0bffb17 	ldw	r2,-20(fp)
   96204:	1005003a 	cmpeq	r2,r2,zero
   96208:	1000031e 	bne	r2,zero,96218 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   9620c:	e0fffb17 	ldw	r3,-20(fp)
   96210:	e0bffc17 	ldw	r2,-16(fp)
   96214:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   96218:	e0bfff17 	ldw	r2,-4(fp)
   9621c:	10800217 	ldw	r2,8(r2)
   96220:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   96224:	e0bffe17 	ldw	r2,-8(fp)
   96228:	10000a15 	stw	zero,40(r2)
#endif
}
   9622c:	e037883a 	mov	sp,fp
   96230:	df000017 	ldw	fp,0(sp)
   96234:	dec00104 	addi	sp,sp,4
   96238:	f800283a 	ret

0009623c <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
   9623c:	defff904 	addi	sp,sp,-28
   96240:	df000615 	stw	fp,24(sp)
   96244:	df000604 	addi	fp,sp,24
   96248:	e13ffe15 	stw	r4,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
   9624c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
   96250:	e0bffe17 	ldw	r2,-8(fp)
   96254:	1004c03a 	cmpne	r2,r2,zero
   96258:	1000021e 	bne	r2,zero,96264 <OSMboxAccept+0x28>
        return ((void *)0);
   9625c:	e03fff15 	stw	zero,-4(fp)
   96260:	00001a06 	br	962cc <OSMboxAccept+0x90>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
   96264:	e0bffe17 	ldw	r2,-8(fp)
   96268:	10800003 	ldbu	r2,0(r2)
   9626c:	10803fcc 	andi	r2,r2,255
   96270:	10800060 	cmpeqi	r2,r2,1
   96274:	1000021e 	bne	r2,zero,96280 <OSMboxAccept+0x44>
        return ((void *)0);
   96278:	e03fff15 	stw	zero,-4(fp)
   9627c:	00001306 	br	962cc <OSMboxAccept+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   96280:	0005303a 	rdctl	r2,status
   96284:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   96288:	e0fffb17 	ldw	r3,-20(fp)
   9628c:	00bfff84 	movi	r2,-2
   96290:	1884703a 	and	r2,r3,r2
   96294:	1001703a 	wrctl	status,r2
  
  return context;
   96298:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   9629c:	e0bffc15 	stw	r2,-16(fp)
    pmsg               = pevent->OSEventPtr;
   962a0:	e0bffe17 	ldw	r2,-8(fp)
   962a4:	10800117 	ldw	r2,4(r2)
   962a8:	e0bffd15 	stw	r2,-12(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
   962ac:	e0bffe17 	ldw	r2,-8(fp)
   962b0:	10000115 	stw	zero,4(r2)
   962b4:	e0bffc17 	ldw	r2,-16(fp)
   962b8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   962bc:	e0bffa17 	ldw	r2,-24(fp)
   962c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
   962c4:	e0bffd17 	ldw	r2,-12(fp)
   962c8:	e0bfff15 	stw	r2,-4(fp)
   962cc:	e0bfff17 	ldw	r2,-4(fp)
}
   962d0:	e037883a 	mov	sp,fp
   962d4:	df000017 	ldw	fp,0(sp)
   962d8:	dec00104 	addi	sp,sp,4
   962dc:	f800283a 	ret

000962e0 <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
   962e0:	defff804 	addi	sp,sp,-32
   962e4:	dfc00715 	stw	ra,28(sp)
   962e8:	df000615 	stw	fp,24(sp)
   962ec:	df000604 	addi	fp,sp,24
   962f0:	e13ffe15 	stw	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   962f4:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   962f8:	008002b4 	movhi	r2,10
   962fc:	108e5304 	addi	r2,r2,14668
   96300:	10800003 	ldbu	r2,0(r2)
   96304:	10803fcc 	andi	r2,r2,255
   96308:	1005003a 	cmpeq	r2,r2,zero
   9630c:	1000021e 	bne	r2,zero,96318 <OSMboxCreate+0x38>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   96310:	e03fff15 	stw	zero,-4(fp)
   96314:	00003106 	br	963dc <OSMboxCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   96318:	0005303a 	rdctl	r2,status
   9631c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   96320:	e0fffb17 	ldw	r3,-20(fp)
   96324:	00bfff84 	movi	r2,-2
   96328:	1884703a 	and	r2,r3,r2
   9632c:	1001703a 	wrctl	status,r2
  
  return context;
   96330:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   96334:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   96338:	008002b4 	movhi	r2,10
   9633c:	108e5204 	addi	r2,r2,14664
   96340:	10800017 	ldw	r2,0(r2)
   96344:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   96348:	008002b4 	movhi	r2,10
   9634c:	108e5204 	addi	r2,r2,14664
   96350:	10800017 	ldw	r2,0(r2)
   96354:	1005003a 	cmpeq	r2,r2,zero
   96358:	1000081e 	bne	r2,zero,9637c <OSMboxCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   9635c:	008002b4 	movhi	r2,10
   96360:	108e5204 	addi	r2,r2,14664
   96364:	10800017 	ldw	r2,0(r2)
   96368:	10800117 	ldw	r2,4(r2)
   9636c:	1007883a 	mov	r3,r2
   96370:	008002b4 	movhi	r2,10
   96374:	108e5204 	addi	r2,r2,14664
   96378:	10c00015 	stw	r3,0(r2)
   9637c:	e0bffc17 	ldw	r2,-16(fp)
   96380:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   96384:	e0bffa17 	ldw	r2,-24(fp)
   96388:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
   9638c:	e0bffd17 	ldw	r2,-12(fp)
   96390:	1005003a 	cmpeq	r2,r2,zero
   96394:	10000f1e 	bne	r2,zero,963d4 <OSMboxCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
   96398:	e0fffd17 	ldw	r3,-12(fp)
   9639c:	00800044 	movi	r2,1
   963a0:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = 0;
   963a4:	e0bffd17 	ldw	r2,-12(fp)
   963a8:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
   963ac:	e0fffd17 	ldw	r3,-12(fp)
   963b0:	e0bffe17 	ldw	r2,-8(fp)
   963b4:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
   963b8:	e0fffd17 	ldw	r3,-12(fp)
   963bc:	00800fc4 	movi	r2,63
   963c0:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   963c4:	e0bffd17 	ldw	r2,-12(fp)
   963c8:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
   963cc:	e13ffd17 	ldw	r4,-12(fp)
   963d0:	0093c000 	call	93c00 <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
   963d4:	e0bffd17 	ldw	r2,-12(fp)
   963d8:	e0bfff15 	stw	r2,-4(fp)
   963dc:	e0bfff17 	ldw	r2,-4(fp)
}
   963e0:	e037883a 	mov	sp,fp
   963e4:	dfc00117 	ldw	ra,4(sp)
   963e8:	df000017 	ldw	fp,0(sp)
   963ec:	dec00204 	addi	sp,sp,8
   963f0:	f800283a 	ret

000963f4 <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   963f4:	defff104 	addi	sp,sp,-60
   963f8:	dfc00e15 	stw	ra,56(sp)
   963fc:	df000d15 	stw	fp,52(sp)
   96400:	df000d04 	addi	fp,sp,52
   96404:	e13ffb15 	stw	r4,-20(fp)
   96408:	e1bffd15 	stw	r6,-12(fp)
   9640c:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   96410:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   96414:	e0bffd17 	ldw	r2,-12(fp)
   96418:	1004c03a 	cmpne	r2,r2,zero
   9641c:	1000031e 	bne	r2,zero,9642c <OSMboxDel+0x38>
        return (pevent);
   96420:	e0bffb17 	ldw	r2,-20(fp)
   96424:	e0bfff15 	stw	r2,-4(fp)
   96428:	00009406 	br	9667c <OSMboxDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   9642c:	e0bffb17 	ldw	r2,-20(fp)
   96430:	1004c03a 	cmpne	r2,r2,zero
   96434:	1000061e 	bne	r2,zero,96450 <OSMboxDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
   96438:	e0fffd17 	ldw	r3,-12(fp)
   9643c:	00800104 	movi	r2,4
   96440:	18800005 	stb	r2,0(r3)
        return (pevent);
   96444:	e0fffb17 	ldw	r3,-20(fp)
   96448:	e0ffff15 	stw	r3,-4(fp)
   9644c:	00008b06 	br	9667c <OSMboxDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   96450:	e0bffb17 	ldw	r2,-20(fp)
   96454:	10800003 	ldbu	r2,0(r2)
   96458:	10803fcc 	andi	r2,r2,255
   9645c:	10800060 	cmpeqi	r2,r2,1
   96460:	1000061e 	bne	r2,zero,9647c <OSMboxDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
   96464:	e0fffd17 	ldw	r3,-12(fp)
   96468:	00800044 	movi	r2,1
   9646c:	18800005 	stb	r2,0(r3)
        return (pevent);
   96470:	e0bffb17 	ldw	r2,-20(fp)
   96474:	e0bfff15 	stw	r2,-4(fp)
   96478:	00008006 	br	9667c <OSMboxDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   9647c:	008002b4 	movhi	r2,10
   96480:	108e5304 	addi	r2,r2,14668
   96484:	10800003 	ldbu	r2,0(r2)
   96488:	10803fcc 	andi	r2,r2,255
   9648c:	1005003a 	cmpeq	r2,r2,zero
   96490:	1000061e 	bne	r2,zero,964ac <OSMboxDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   96494:	e0fffd17 	ldw	r3,-12(fp)
   96498:	008003c4 	movi	r2,15
   9649c:	18800005 	stb	r2,0(r3)
        return (pevent);
   964a0:	e0fffb17 	ldw	r3,-20(fp)
   964a4:	e0ffff15 	stw	r3,-4(fp)
   964a8:	00007406 	br	9667c <OSMboxDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   964ac:	0005303a 	rdctl	r2,status
   964b0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   964b4:	e0fff717 	ldw	r3,-36(fp)
   964b8:	00bfff84 	movi	r2,-2
   964bc:	1884703a 	and	r2,r3,r2
   964c0:	1001703a 	wrctl	status,r2
  
  return context;
   964c4:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   964c8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
   964cc:	e0bffb17 	ldw	r2,-20(fp)
   964d0:	10800283 	ldbu	r2,10(r2)
   964d4:	10803fcc 	andi	r2,r2,255
   964d8:	1005003a 	cmpeq	r2,r2,zero
   964dc:	1000031e 	bne	r2,zero,964ec <OSMboxDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   964e0:	00800044 	movi	r2,1
   964e4:	e0bffa05 	stb	r2,-24(fp)
   964e8:	00000106 	br	964f0 <OSMboxDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   964ec:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
   964f0:	e0bffc03 	ldbu	r2,-16(fp)
   964f4:	e0bffe15 	stw	r2,-8(fp)
   964f8:	e0fffe17 	ldw	r3,-8(fp)
   964fc:	1805003a 	cmpeq	r2,r3,zero
   96500:	1000041e 	bne	r2,zero,96514 <OSMboxDel+0x120>
   96504:	e0fffe17 	ldw	r3,-8(fp)
   96508:	18800060 	cmpeqi	r2,r3,1
   9650c:	10002d1e 	bne	r2,zero,965c4 <OSMboxDel+0x1d0>
   96510:	00004f06 	br	96650 <OSMboxDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
   96514:	e0bffa03 	ldbu	r2,-24(fp)
   96518:	1004c03a 	cmpne	r2,r2,zero
   9651c:	10001a1e 	bne	r2,zero,96588 <OSMboxDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   96520:	e0fffb17 	ldw	r3,-20(fp)
   96524:	00800fc4 	movi	r2,63
   96528:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   9652c:	e0bffb17 	ldw	r2,-20(fp)
   96530:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
   96534:	e0bffb17 	ldw	r2,-20(fp)
   96538:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
   9653c:	008002b4 	movhi	r2,10
   96540:	108e5204 	addi	r2,r2,14664
   96544:	10c00017 	ldw	r3,0(r2)
   96548:	e0bffb17 	ldw	r2,-20(fp)
   9654c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
   96550:	e0bffb17 	ldw	r2,-20(fp)
   96554:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
   96558:	00c002b4 	movhi	r3,10
   9655c:	18ce5204 	addi	r3,r3,14664
   96560:	e0bffb17 	ldw	r2,-20(fp)
   96564:	18800015 	stw	r2,0(r3)
   96568:	e0bff817 	ldw	r2,-32(fp)
   9656c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   96570:	e0bff617 	ldw	r2,-40(fp)
   96574:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
   96578:	e0bffd17 	ldw	r2,-12(fp)
   9657c:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
   96580:	e03ff915 	stw	zero,-28(fp)
   96584:	00003b06 	br	96674 <OSMboxDel+0x280>
   96588:	e0bff817 	ldw	r2,-32(fp)
   9658c:	e0bff515 	stw	r2,-44(fp)
   96590:	e0bff517 	ldw	r2,-44(fp)
   96594:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
   96598:	e0fffd17 	ldw	r3,-12(fp)
   9659c:	00801244 	movi	r2,73
   965a0:	18800005 	stb	r2,0(r3)
                 pevent_return       = pevent;
   965a4:	e0bffb17 	ldw	r2,-20(fp)
   965a8:	e0bff915 	stw	r2,-28(fp)
             }
             break;
   965ac:	00003106 	br	96674 <OSMboxDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
   965b0:	e13ffb17 	ldw	r4,-20(fp)
   965b4:	000b883a 	mov	r5,zero
   965b8:	01800084 	movi	r6,2
   965bc:	000f883a 	mov	r7,zero
   965c0:	009364c0 	call	9364c <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
   965c4:	e0bffb17 	ldw	r2,-20(fp)
   965c8:	10800283 	ldbu	r2,10(r2)
   965cc:	10803fcc 	andi	r2,r2,255
   965d0:	1004c03a 	cmpne	r2,r2,zero
   965d4:	103ff61e 	bne	r2,zero,965b0 <OSMboxDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   965d8:	e0fffb17 	ldw	r3,-20(fp)
   965dc:	00800fc4 	movi	r2,63
   965e0:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   965e4:	e0bffb17 	ldw	r2,-20(fp)
   965e8:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   965ec:	e0bffb17 	ldw	r2,-20(fp)
   965f0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   965f4:	008002b4 	movhi	r2,10
   965f8:	108e5204 	addi	r2,r2,14664
   965fc:	10c00017 	ldw	r3,0(r2)
   96600:	e0bffb17 	ldw	r2,-20(fp)
   96604:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   96608:	e0bffb17 	ldw	r2,-20(fp)
   9660c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   96610:	00c002b4 	movhi	r3,10
   96614:	18ce5204 	addi	r3,r3,14664
   96618:	e0bffb17 	ldw	r2,-20(fp)
   9661c:	18800015 	stw	r2,0(r3)
   96620:	e0bff817 	ldw	r2,-32(fp)
   96624:	e0bff415 	stw	r2,-48(fp)
   96628:	e0bff417 	ldw	r2,-48(fp)
   9662c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   96630:	e0bffa03 	ldbu	r2,-24(fp)
   96634:	10800058 	cmpnei	r2,r2,1
   96638:	1000011e 	bne	r2,zero,96640 <OSMboxDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   9663c:	009408c0 	call	9408c <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
   96640:	e0bffd17 	ldw	r2,-12(fp)
   96644:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
   96648:	e03ff915 	stw	zero,-28(fp)
             break;
   9664c:	00000906 	br	96674 <OSMboxDel+0x280>
   96650:	e0bff817 	ldw	r2,-32(fp)
   96654:	e0bff315 	stw	r2,-52(fp)
   96658:	e0bff317 	ldw	r2,-52(fp)
   9665c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
   96660:	e0fffd17 	ldw	r3,-12(fp)
   96664:	008001c4 	movi	r2,7
   96668:	18800005 	stb	r2,0(r3)
             pevent_return = pevent;
   9666c:	e0bffb17 	ldw	r2,-20(fp)
   96670:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
   96674:	e0bff917 	ldw	r2,-28(fp)
   96678:	e0bfff15 	stw	r2,-4(fp)
   9667c:	e0bfff17 	ldw	r2,-4(fp)
}
   96680:	e037883a 	mov	sp,fp
   96684:	dfc00117 	ldw	ra,4(sp)
   96688:	df000017 	ldw	fp,0(sp)
   9668c:	dec00204 	addi	sp,sp,8
   96690:	f800283a 	ret

00096694 <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   96694:	defff204 	addi	sp,sp,-56
   96698:	dfc00d15 	stw	ra,52(sp)
   9669c:	df000c15 	stw	fp,48(sp)
   966a0:	df000c04 	addi	fp,sp,48
   966a4:	e13ffb15 	stw	r4,-20(fp)
   966a8:	e1bffd15 	stw	r6,-12(fp)
   966ac:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   966b0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   966b4:	e0bffd17 	ldw	r2,-12(fp)
   966b8:	1004c03a 	cmpne	r2,r2,zero
   966bc:	1000021e 	bne	r2,zero,966c8 <OSMboxPend+0x34>
        return ((void *)0);
   966c0:	e03fff15 	stw	zero,-4(fp)
   966c4:	00009f06 	br	96944 <OSMboxPend+0x2b0>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   966c8:	e0bffb17 	ldw	r2,-20(fp)
   966cc:	1004c03a 	cmpne	r2,r2,zero
   966d0:	1000051e 	bne	r2,zero,966e8 <OSMboxPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
   966d4:	e0fffd17 	ldw	r3,-12(fp)
   966d8:	00800104 	movi	r2,4
   966dc:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   966e0:	e03fff15 	stw	zero,-4(fp)
   966e4:	00009706 	br	96944 <OSMboxPend+0x2b0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   966e8:	e0bffb17 	ldw	r2,-20(fp)
   966ec:	10800003 	ldbu	r2,0(r2)
   966f0:	10803fcc 	andi	r2,r2,255
   966f4:	10800060 	cmpeqi	r2,r2,1
   966f8:	1000051e 	bne	r2,zero,96710 <OSMboxPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   966fc:	e0fffd17 	ldw	r3,-12(fp)
   96700:	00800044 	movi	r2,1
   96704:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   96708:	e03fff15 	stw	zero,-4(fp)
   9670c:	00008d06 	br	96944 <OSMboxPend+0x2b0>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   96710:	008002b4 	movhi	r2,10
   96714:	108e5304 	addi	r2,r2,14668
   96718:	10800003 	ldbu	r2,0(r2)
   9671c:	10803fcc 	andi	r2,r2,255
   96720:	1005003a 	cmpeq	r2,r2,zero
   96724:	1000051e 	bne	r2,zero,9673c <OSMboxPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   96728:	e0fffd17 	ldw	r3,-12(fp)
   9672c:	00800084 	movi	r2,2
   96730:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   96734:	e03fff15 	stw	zero,-4(fp)
   96738:	00008206 	br	96944 <OSMboxPend+0x2b0>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   9673c:	008002b4 	movhi	r2,10
   96740:	108e4504 	addi	r2,r2,14612
   96744:	10800003 	ldbu	r2,0(r2)
   96748:	10803fcc 	andi	r2,r2,255
   9674c:	1005003a 	cmpeq	r2,r2,zero
   96750:	1000051e 	bne	r2,zero,96768 <OSMboxPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   96754:	e0fffd17 	ldw	r3,-12(fp)
   96758:	00800344 	movi	r2,13
   9675c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   96760:	e03fff15 	stw	zero,-4(fp)
   96764:	00007706 	br	96944 <OSMboxPend+0x2b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   96768:	0005303a 	rdctl	r2,status
   9676c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   96770:	e0fff817 	ldw	r3,-32(fp)
   96774:	00bfff84 	movi	r2,-2
   96778:	1884703a 	and	r2,r3,r2
   9677c:	1001703a 	wrctl	status,r2
  
  return context;
   96780:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   96784:	e0bff915 	stw	r2,-28(fp)
    pmsg = pevent->OSEventPtr;
   96788:	e0bffb17 	ldw	r2,-20(fp)
   9678c:	10800117 	ldw	r2,4(r2)
   96790:	e0bffa15 	stw	r2,-24(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
   96794:	e0bffa17 	ldw	r2,-24(fp)
   96798:	1005003a 	cmpeq	r2,r2,zero
   9679c:	10000b1e 	bne	r2,zero,967cc <OSMboxPend+0x138>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
   967a0:	e0bffb17 	ldw	r2,-20(fp)
   967a4:	10000115 	stw	zero,4(r2)
   967a8:	e0bff917 	ldw	r2,-28(fp)
   967ac:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   967b0:	e0bff717 	ldw	r2,-36(fp)
   967b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   967b8:	e0bffd17 	ldw	r2,-12(fp)
   967bc:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
   967c0:	e0bffa17 	ldw	r2,-24(fp)
   967c4:	e0bfff15 	stw	r2,-4(fp)
   967c8:	00005e06 	br	96944 <OSMboxPend+0x2b0>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
   967cc:	008002b4 	movhi	r2,10
   967d0:	108e5404 	addi	r2,r2,14672
   967d4:	10c00017 	ldw	r3,0(r2)
   967d8:	008002b4 	movhi	r2,10
   967dc:	108e5404 	addi	r2,r2,14672
   967e0:	10800017 	ldw	r2,0(r2)
   967e4:	10800c03 	ldbu	r2,48(r2)
   967e8:	10800094 	ori	r2,r2,2
   967ec:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   967f0:	008002b4 	movhi	r2,10
   967f4:	108e5404 	addi	r2,r2,14672
   967f8:	10800017 	ldw	r2,0(r2)
   967fc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
   96800:	008002b4 	movhi	r2,10
   96804:	108e5404 	addi	r2,r2,14672
   96808:	10c00017 	ldw	r3,0(r2)
   9680c:	e0bffc0b 	ldhu	r2,-16(fp)
   96810:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   96814:	e13ffb17 	ldw	r4,-20(fp)
   96818:	00937e00 	call	937e0 <OS_EventTaskWait>
   9681c:	e0bff917 	ldw	r2,-28(fp)
   96820:	e0bff615 	stw	r2,-40(fp)
   96824:	e0bff617 	ldw	r2,-40(fp)
   96828:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
   9682c:	009408c0 	call	9408c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   96830:	0005303a 	rdctl	r2,status
   96834:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   96838:	e0fff517 	ldw	r3,-44(fp)
   9683c:	00bfff84 	movi	r2,-2
   96840:	1884703a 	and	r2,r3,r2
   96844:	1001703a 	wrctl	status,r2
  
  return context;
   96848:	e0bff517 	ldw	r2,-44(fp)
    OS_ENTER_CRITICAL();
   9684c:	e0bff915 	stw	r2,-28(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   96850:	008002b4 	movhi	r2,10
   96854:	108e5404 	addi	r2,r2,14672
   96858:	10800017 	ldw	r2,0(r2)
   9685c:	10800c43 	ldbu	r2,49(r2)
   96860:	10803fcc 	andi	r2,r2,255
   96864:	e0bffe15 	stw	r2,-8(fp)
   96868:	e0fffe17 	ldw	r3,-8(fp)
   9686c:	1805003a 	cmpeq	r2,r3,zero
   96870:	1000041e 	bne	r2,zero,96884 <OSMboxPend+0x1f0>
   96874:	e0fffe17 	ldw	r3,-8(fp)
   96878:	188000a0 	cmpeqi	r2,r3,2
   9687c:	1000091e 	bne	r2,zero,968a4 <OSMboxPend+0x210>
   96880:	00000d06 	br	968b8 <OSMboxPend+0x224>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
   96884:	008002b4 	movhi	r2,10
   96888:	108e5404 	addi	r2,r2,14672
   9688c:	10800017 	ldw	r2,0(r2)
   96890:	10800917 	ldw	r2,36(r2)
   96894:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
   96898:	e0bffd17 	ldw	r2,-12(fp)
   9689c:	10000005 	stb	zero,0(r2)
             break;
   968a0:	00000e06 	br	968dc <OSMboxPend+0x248>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   968a4:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   968a8:	e0fffd17 	ldw	r3,-12(fp)
   968ac:	00800384 	movi	r2,14
   968b0:	18800005 	stb	r2,0(r3)
             break;
   968b4:	00000906 	br	968dc <OSMboxPend+0x248>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   968b8:	008002b4 	movhi	r2,10
   968bc:	108e5404 	addi	r2,r2,14672
   968c0:	11000017 	ldw	r4,0(r2)
   968c4:	e17ffb17 	ldw	r5,-20(fp)
   968c8:	0093a440 	call	93a44 <OS_EventTaskRemove>
             pmsg = (void *)0;
   968cc:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   968d0:	e0fffd17 	ldw	r3,-12(fp)
   968d4:	00800284 	movi	r2,10
   968d8:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   968dc:	008002b4 	movhi	r2,10
   968e0:	108e5404 	addi	r2,r2,14672
   968e4:	10800017 	ldw	r2,0(r2)
   968e8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   968ec:	008002b4 	movhi	r2,10
   968f0:	108e5404 	addi	r2,r2,14672
   968f4:	10800017 	ldw	r2,0(r2)
   968f8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   968fc:	008002b4 	movhi	r2,10
   96900:	108e5404 	addi	r2,r2,14672
   96904:	10800017 	ldw	r2,0(r2)
   96908:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   9690c:	008002b4 	movhi	r2,10
   96910:	108e5404 	addi	r2,r2,14672
   96914:	10800017 	ldw	r2,0(r2)
   96918:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   9691c:	008002b4 	movhi	r2,10
   96920:	108e5404 	addi	r2,r2,14672
   96924:	10800017 	ldw	r2,0(r2)
   96928:	10000915 	stw	zero,36(r2)
   9692c:	e0bff917 	ldw	r2,-28(fp)
   96930:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   96934:	e0bff417 	ldw	r2,-48(fp)
   96938:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   9693c:	e0bffa17 	ldw	r2,-24(fp)
   96940:	e0bfff15 	stw	r2,-4(fp)
   96944:	e0bfff17 	ldw	r2,-4(fp)
}
   96948:	e037883a 	mov	sp,fp
   9694c:	dfc00117 	ldw	ra,4(sp)
   96950:	df000017 	ldw	fp,0(sp)
   96954:	dec00204 	addi	sp,sp,8
   96958:	f800283a 	ret

0009695c <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   9695c:	defff504 	addi	sp,sp,-44
   96960:	dfc00a15 	stw	ra,40(sp)
   96964:	df000915 	stw	fp,36(sp)
   96968:	df000904 	addi	fp,sp,36
   9696c:	e13ffc15 	stw	r4,-16(fp)
   96970:	e1bffe15 	stw	r6,-8(fp)
   96974:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   96978:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   9697c:	e0bffe17 	ldw	r2,-8(fp)
   96980:	1004c03a 	cmpne	r2,r2,zero
   96984:	1000021e 	bne	r2,zero,96990 <OSMboxPendAbort+0x34>
        return (0);
   96988:	e03fff15 	stw	zero,-4(fp)
   9698c:	00004c06 	br	96ac0 <OSMboxPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   96990:	e0bffc17 	ldw	r2,-16(fp)
   96994:	1004c03a 	cmpne	r2,r2,zero
   96998:	1000051e 	bne	r2,zero,969b0 <OSMboxPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
   9699c:	e0fffe17 	ldw	r3,-8(fp)
   969a0:	00800104 	movi	r2,4
   969a4:	18800005 	stb	r2,0(r3)
        return (0);
   969a8:	e03fff15 	stw	zero,-4(fp)
   969ac:	00004406 	br	96ac0 <OSMboxPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   969b0:	e0bffc17 	ldw	r2,-16(fp)
   969b4:	10800003 	ldbu	r2,0(r2)
   969b8:	10803fcc 	andi	r2,r2,255
   969bc:	10800060 	cmpeqi	r2,r2,1
   969c0:	1000051e 	bne	r2,zero,969d8 <OSMboxPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   969c4:	e0fffe17 	ldw	r3,-8(fp)
   969c8:	00800044 	movi	r2,1
   969cc:	18800005 	stb	r2,0(r3)
        return (0);
   969d0:	e03fff15 	stw	zero,-4(fp)
   969d4:	00003a06 	br	96ac0 <OSMboxPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   969d8:	0005303a 	rdctl	r2,status
   969dc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   969e0:	e0fff917 	ldw	r3,-28(fp)
   969e4:	00bfff84 	movi	r2,-2
   969e8:	1884703a 	and	r2,r3,r2
   969ec:	1001703a 	wrctl	status,r2
  
  return context;
   969f0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   969f4:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
   969f8:	e0bffc17 	ldw	r2,-16(fp)
   969fc:	10800283 	ldbu	r2,10(r2)
   96a00:	10803fcc 	andi	r2,r2,255
   96a04:	1005003a 	cmpeq	r2,r2,zero
   96a08:	1000261e 	bne	r2,zero,96aa4 <OSMboxPendAbort+0x148>
        nbr_tasks = 0;
   96a0c:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
   96a10:	e0bffd03 	ldbu	r2,-12(fp)
   96a14:	10800060 	cmpeqi	r2,r2,1
   96a18:	1000091e 	bne	r2,zero,96a40 <OSMboxPendAbort+0xe4>
   96a1c:	00000e06 	br	96a58 <OSMboxPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   96a20:	e13ffc17 	ldw	r4,-16(fp)
   96a24:	000b883a 	mov	r5,zero
   96a28:	01800084 	movi	r6,2
   96a2c:	01c00084 	movi	r7,2
   96a30:	009364c0 	call	9364c <OS_EventTaskRdy>
                     nbr_tasks++;
   96a34:	e0bffb03 	ldbu	r2,-20(fp)
   96a38:	10800044 	addi	r2,r2,1
   96a3c:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
   96a40:	e0bffc17 	ldw	r2,-16(fp)
   96a44:	10800283 	ldbu	r2,10(r2)
   96a48:	10803fcc 	andi	r2,r2,255
   96a4c:	1004c03a 	cmpne	r2,r2,zero
   96a50:	103ff31e 	bne	r2,zero,96a20 <OSMboxPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   96a54:	00000806 	br	96a78 <OSMboxPendAbort+0x11c>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   96a58:	e13ffc17 	ldw	r4,-16(fp)
   96a5c:	000b883a 	mov	r5,zero
   96a60:	01800084 	movi	r6,2
   96a64:	01c00084 	movi	r7,2
   96a68:	009364c0 	call	9364c <OS_EventTaskRdy>
                 nbr_tasks++;
   96a6c:	e0bffb03 	ldbu	r2,-20(fp)
   96a70:	10800044 	addi	r2,r2,1
   96a74:	e0bffb05 	stb	r2,-20(fp)
   96a78:	e0bffa17 	ldw	r2,-24(fp)
   96a7c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   96a80:	e0bff817 	ldw	r2,-32(fp)
   96a84:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   96a88:	009408c0 	call	9408c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   96a8c:	e0fffe17 	ldw	r3,-8(fp)
   96a90:	00800384 	movi	r2,14
   96a94:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
   96a98:	e0bffb03 	ldbu	r2,-20(fp)
   96a9c:	e0bfff15 	stw	r2,-4(fp)
   96aa0:	00000706 	br	96ac0 <OSMboxPendAbort+0x164>
   96aa4:	e0bffa17 	ldw	r2,-24(fp)
   96aa8:	e0bff715 	stw	r2,-36(fp)
   96aac:	e0bff717 	ldw	r2,-36(fp)
   96ab0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   96ab4:	e0bffe17 	ldw	r2,-8(fp)
   96ab8:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
   96abc:	e03fff15 	stw	zero,-4(fp)
   96ac0:	e0bfff17 	ldw	r2,-4(fp)
}
   96ac4:	e037883a 	mov	sp,fp
   96ac8:	dfc00117 	ldw	ra,4(sp)
   96acc:	df000017 	ldw	fp,0(sp)
   96ad0:	dec00204 	addi	sp,sp,8
   96ad4:	f800283a 	ret

00096ad8 <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
   96ad8:	defff604 	addi	sp,sp,-40
   96adc:	dfc00915 	stw	ra,36(sp)
   96ae0:	df000815 	stw	fp,32(sp)
   96ae4:	df000804 	addi	fp,sp,32
   96ae8:	e13ffd15 	stw	r4,-12(fp)
   96aec:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   96af0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   96af4:	e0bffd17 	ldw	r2,-12(fp)
   96af8:	1004c03a 	cmpne	r2,r2,zero
   96afc:	1000031e 	bne	r2,zero,96b0c <OSMboxPost+0x34>
        return (OS_ERR_PEVENT_NULL);
   96b00:	00800104 	movi	r2,4
   96b04:	e0bfff15 	stw	r2,-4(fp)
   96b08:	00003a06 	br	96bf4 <OSMboxPost+0x11c>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   96b0c:	e0bffe17 	ldw	r2,-8(fp)
   96b10:	1004c03a 	cmpne	r2,r2,zero
   96b14:	1000031e 	bne	r2,zero,96b24 <OSMboxPost+0x4c>
        return (OS_ERR_POST_NULL_PTR);
   96b18:	008000c4 	movi	r2,3
   96b1c:	e0bfff15 	stw	r2,-4(fp)
   96b20:	00003406 	br	96bf4 <OSMboxPost+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   96b24:	e0bffd17 	ldw	r2,-12(fp)
   96b28:	10800003 	ldbu	r2,0(r2)
   96b2c:	10803fcc 	andi	r2,r2,255
   96b30:	10800060 	cmpeqi	r2,r2,1
   96b34:	1000031e 	bne	r2,zero,96b44 <OSMboxPost+0x6c>
        return (OS_ERR_EVENT_TYPE);
   96b38:	00800044 	movi	r2,1
   96b3c:	e0bfff15 	stw	r2,-4(fp)
   96b40:	00002c06 	br	96bf4 <OSMboxPost+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   96b44:	0005303a 	rdctl	r2,status
   96b48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   96b4c:	e0fffb17 	ldw	r3,-20(fp)
   96b50:	00bfff84 	movi	r2,-2
   96b54:	1884703a 	and	r2,r3,r2
   96b58:	1001703a 	wrctl	status,r2
  
  return context;
   96b5c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   96b60:	e0bffc15 	stw	r2,-16(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   96b64:	e0bffd17 	ldw	r2,-12(fp)
   96b68:	10800283 	ldbu	r2,10(r2)
   96b6c:	10803fcc 	andi	r2,r2,255
   96b70:	1005003a 	cmpeq	r2,r2,zero
   96b74:	10000c1e 	bne	r2,zero,96ba8 <OSMboxPost+0xd0>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   96b78:	e13ffd17 	ldw	r4,-12(fp)
   96b7c:	e17ffe17 	ldw	r5,-8(fp)
   96b80:	01800084 	movi	r6,2
   96b84:	000f883a 	mov	r7,zero
   96b88:	009364c0 	call	9364c <OS_EventTaskRdy>
   96b8c:	e0bffc17 	ldw	r2,-16(fp)
   96b90:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   96b94:	e0bffa17 	ldw	r2,-24(fp)
   96b98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   96b9c:	009408c0 	call	9408c <OS_Sched>
        return (OS_ERR_NONE);
   96ba0:	e03fff15 	stw	zero,-4(fp)
   96ba4:	00001306 	br	96bf4 <OSMboxPost+0x11c>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   96ba8:	e0bffd17 	ldw	r2,-12(fp)
   96bac:	10800117 	ldw	r2,4(r2)
   96bb0:	1005003a 	cmpeq	r2,r2,zero
   96bb4:	1000071e 	bne	r2,zero,96bd4 <OSMboxPost+0xfc>
   96bb8:	e0bffc17 	ldw	r2,-16(fp)
   96bbc:	e0bff915 	stw	r2,-28(fp)
   96bc0:	e0bff917 	ldw	r2,-28(fp)
   96bc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   96bc8:	00800504 	movi	r2,20
   96bcc:	e0bfff15 	stw	r2,-4(fp)
   96bd0:	00000806 	br	96bf4 <OSMboxPost+0x11c>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   96bd4:	e0fffd17 	ldw	r3,-12(fp)
   96bd8:	e0bffe17 	ldw	r2,-8(fp)
   96bdc:	18800115 	stw	r2,4(r3)
   96be0:	e0bffc17 	ldw	r2,-16(fp)
   96be4:	e0bff815 	stw	r2,-32(fp)
   96be8:	e0bff817 	ldw	r2,-32(fp)
   96bec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   96bf0:	e03fff15 	stw	zero,-4(fp)
   96bf4:	e0bfff17 	ldw	r2,-4(fp)
}
   96bf8:	e037883a 	mov	sp,fp
   96bfc:	dfc00117 	ldw	ra,4(sp)
   96c00:	df000017 	ldw	fp,0(sp)
   96c04:	dec00204 	addi	sp,sp,8
   96c08:	f800283a 	ret

00096c0c <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   96c0c:	defff504 	addi	sp,sp,-44
   96c10:	dfc00a15 	stw	ra,40(sp)
   96c14:	df000915 	stw	fp,36(sp)
   96c18:	df000904 	addi	fp,sp,36
   96c1c:	e13ffc15 	stw	r4,-16(fp)
   96c20:	e17ffd15 	stw	r5,-12(fp)
   96c24:	e1bffe05 	stb	r6,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   96c28:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   96c2c:	e0bffc17 	ldw	r2,-16(fp)
   96c30:	1004c03a 	cmpne	r2,r2,zero
   96c34:	1000031e 	bne	r2,zero,96c44 <OSMboxPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
   96c38:	00800104 	movi	r2,4
   96c3c:	e0bfff15 	stw	r2,-4(fp)
   96c40:	00004f06 	br	96d80 <OSMboxPostOpt+0x174>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
   96c44:	e0bffd17 	ldw	r2,-12(fp)
   96c48:	1004c03a 	cmpne	r2,r2,zero
   96c4c:	1000031e 	bne	r2,zero,96c5c <OSMboxPostOpt+0x50>
        return (OS_ERR_POST_NULL_PTR);
   96c50:	008000c4 	movi	r2,3
   96c54:	e0bfff15 	stw	r2,-4(fp)
   96c58:	00004906 	br	96d80 <OSMboxPostOpt+0x174>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   96c5c:	e0bffc17 	ldw	r2,-16(fp)
   96c60:	10800003 	ldbu	r2,0(r2)
   96c64:	10803fcc 	andi	r2,r2,255
   96c68:	10800060 	cmpeqi	r2,r2,1
   96c6c:	1000031e 	bne	r2,zero,96c7c <OSMboxPostOpt+0x70>
        return (OS_ERR_EVENT_TYPE);
   96c70:	00800044 	movi	r2,1
   96c74:	e0bfff15 	stw	r2,-4(fp)
   96c78:	00004106 	br	96d80 <OSMboxPostOpt+0x174>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   96c7c:	0005303a 	rdctl	r2,status
   96c80:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   96c84:	e0fffa17 	ldw	r3,-24(fp)
   96c88:	00bfff84 	movi	r2,-2
   96c8c:	1884703a 	and	r2,r3,r2
   96c90:	1001703a 	wrctl	status,r2
  
  return context;
   96c94:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   96c98:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
   96c9c:	e0bffc17 	ldw	r2,-16(fp)
   96ca0:	10800283 	ldbu	r2,10(r2)
   96ca4:	10803fcc 	andi	r2,r2,255
   96ca8:	1005003a 	cmpeq	r2,r2,zero
   96cac:	1000211e 	bne	r2,zero,96d34 <OSMboxPostOpt+0x128>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   96cb0:	e0bffe03 	ldbu	r2,-8(fp)
   96cb4:	1080004c 	andi	r2,r2,1
   96cb8:	10803fcc 	andi	r2,r2,255
   96cbc:	1005003a 	cmpeq	r2,r2,zero
   96cc0:	10000c1e 	bne	r2,zero,96cf4 <OSMboxPostOpt+0xe8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   96cc4:	00000506 	br	96cdc <OSMboxPostOpt+0xd0>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   96cc8:	e13ffc17 	ldw	r4,-16(fp)
   96ccc:	e17ffd17 	ldw	r5,-12(fp)
   96cd0:	01800084 	movi	r6,2
   96cd4:	000f883a 	mov	r7,zero
   96cd8:	009364c0 	call	9364c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
   96cdc:	e0bffc17 	ldw	r2,-16(fp)
   96ce0:	10800283 	ldbu	r2,10(r2)
   96ce4:	10803fcc 	andi	r2,r2,255
   96ce8:	1004c03a 	cmpne	r2,r2,zero
   96cec:	103ff61e 	bne	r2,zero,96cc8 <OSMboxPostOpt+0xbc>
   96cf0:	00000506 	br	96d08 <OSMboxPostOpt+0xfc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   96cf4:	e13ffc17 	ldw	r4,-16(fp)
   96cf8:	e17ffd17 	ldw	r5,-12(fp)
   96cfc:	01800084 	movi	r6,2
   96d00:	000f883a 	mov	r7,zero
   96d04:	009364c0 	call	9364c <OS_EventTaskRdy>
   96d08:	e0bffb17 	ldw	r2,-20(fp)
   96d0c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   96d10:	e0bff917 	ldw	r2,-28(fp)
   96d14:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   96d18:	e0bffe03 	ldbu	r2,-8(fp)
   96d1c:	1080010c 	andi	r2,r2,4
   96d20:	1004c03a 	cmpne	r2,r2,zero
   96d24:	1000011e 	bne	r2,zero,96d2c <OSMboxPostOpt+0x120>
            OS_Sched();                               /* Find HPT ready to run                         */
   96d28:	009408c0 	call	9408c <OS_Sched>
        }
        return (OS_ERR_NONE);
   96d2c:	e03fff15 	stw	zero,-4(fp)
   96d30:	00001306 	br	96d80 <OSMboxPostOpt+0x174>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   96d34:	e0bffc17 	ldw	r2,-16(fp)
   96d38:	10800117 	ldw	r2,4(r2)
   96d3c:	1005003a 	cmpeq	r2,r2,zero
   96d40:	1000071e 	bne	r2,zero,96d60 <OSMboxPostOpt+0x154>
   96d44:	e0bffb17 	ldw	r2,-20(fp)
   96d48:	e0bff815 	stw	r2,-32(fp)
   96d4c:	e0bff817 	ldw	r2,-32(fp)
   96d50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
   96d54:	00800504 	movi	r2,20
   96d58:	e0bfff15 	stw	r2,-4(fp)
   96d5c:	00000806 	br	96d80 <OSMboxPostOpt+0x174>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   96d60:	e0fffc17 	ldw	r3,-16(fp)
   96d64:	e0bffd17 	ldw	r2,-12(fp)
   96d68:	18800115 	stw	r2,4(r3)
   96d6c:	e0bffb17 	ldw	r2,-20(fp)
   96d70:	e0bff715 	stw	r2,-36(fp)
   96d74:	e0bff717 	ldw	r2,-36(fp)
   96d78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   96d7c:	e03fff15 	stw	zero,-4(fp)
   96d80:	e0bfff17 	ldw	r2,-4(fp)
}
   96d84:	e037883a 	mov	sp,fp
   96d88:	dfc00117 	ldw	ra,4(sp)
   96d8c:	df000017 	ldw	fp,0(sp)
   96d90:	dec00204 	addi	sp,sp,8
   96d94:	f800283a 	ret

00096d98 <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
   96d98:	defff604 	addi	sp,sp,-40
   96d9c:	df000915 	stw	fp,36(sp)
   96da0:	df000904 	addi	fp,sp,36
   96da4:	e13ffd15 	stw	r4,-12(fp)
   96da8:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   96dac:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   96db0:	e0bffd17 	ldw	r2,-12(fp)
   96db4:	1004c03a 	cmpne	r2,r2,zero
   96db8:	1000031e 	bne	r2,zero,96dc8 <OSMboxQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
   96dbc:	00800104 	movi	r2,4
   96dc0:	e0bfff15 	stw	r2,-4(fp)
   96dc4:	00003b06 	br	96eb4 <OSMboxQuery+0x11c>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
   96dc8:	e0bffe17 	ldw	r2,-8(fp)
   96dcc:	1004c03a 	cmpne	r2,r2,zero
   96dd0:	1000031e 	bne	r2,zero,96de0 <OSMboxQuery+0x48>
        return (OS_ERR_PDATA_NULL);
   96dd4:	00800244 	movi	r2,9
   96dd8:	e0bfff15 	stw	r2,-4(fp)
   96ddc:	00003506 	br	96eb4 <OSMboxQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   96de0:	e0bffd17 	ldw	r2,-12(fp)
   96de4:	10800003 	ldbu	r2,0(r2)
   96de8:	10803fcc 	andi	r2,r2,255
   96dec:	10800060 	cmpeqi	r2,r2,1
   96df0:	1000031e 	bne	r2,zero,96e00 <OSMboxQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
   96df4:	00800044 	movi	r2,1
   96df8:	e0bfff15 	stw	r2,-4(fp)
   96dfc:	00002d06 	br	96eb4 <OSMboxQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   96e00:	0005303a 	rdctl	r2,status
   96e04:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   96e08:	e0fff817 	ldw	r3,-32(fp)
   96e0c:	00bfff84 	movi	r2,-2
   96e10:	1884703a 	and	r2,r3,r2
   96e14:	1001703a 	wrctl	status,r2
  
  return context;
   96e18:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   96e1c:	e0bff915 	stw	r2,-28(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
   96e20:	e0bffd17 	ldw	r2,-12(fp)
   96e24:	10c00283 	ldbu	r3,10(r2)
   96e28:	e0bffe17 	ldw	r2,-8(fp)
   96e2c:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
   96e30:	e0bffd17 	ldw	r2,-12(fp)
   96e34:	108002c4 	addi	r2,r2,11
   96e38:	e0bffb15 	stw	r2,-20(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
   96e3c:	e0bffe17 	ldw	r2,-8(fp)
   96e40:	10800104 	addi	r2,r2,4
   96e44:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   96e48:	e03ffc05 	stb	zero,-16(fp)
   96e4c:	00000d06 	br	96e84 <OSMboxQuery+0xec>
        *pdest++ = *psrc++;
   96e50:	e0bffb17 	ldw	r2,-20(fp)
   96e54:	10c00003 	ldbu	r3,0(r2)
   96e58:	e0bffa17 	ldw	r2,-24(fp)
   96e5c:	10c00005 	stb	r3,0(r2)
   96e60:	e0bffa17 	ldw	r2,-24(fp)
   96e64:	10800044 	addi	r2,r2,1
   96e68:	e0bffa15 	stw	r2,-24(fp)
   96e6c:	e0bffb17 	ldw	r2,-20(fp)
   96e70:	10800044 	addi	r2,r2,1
   96e74:	e0bffb15 	stw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   96e78:	e0bffc03 	ldbu	r2,-16(fp)
   96e7c:	10800044 	addi	r2,r2,1
   96e80:	e0bffc05 	stb	r2,-16(fp)
   96e84:	e0bffc03 	ldbu	r2,-16(fp)
   96e88:	108000f0 	cmpltui	r2,r2,3
   96e8c:	103ff01e 	bne	r2,zero,96e50 <OSMboxQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
   96e90:	e0bffd17 	ldw	r2,-12(fp)
   96e94:	10c00117 	ldw	r3,4(r2)
   96e98:	e0bffe17 	ldw	r2,-8(fp)
   96e9c:	10c00015 	stw	r3,0(r2)
   96ea0:	e0bff917 	ldw	r2,-28(fp)
   96ea4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   96ea8:	e0bff717 	ldw	r2,-36(fp)
   96eac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   96eb0:	e03fff15 	stw	zero,-4(fp)
   96eb4:	e0bfff17 	ldw	r2,-4(fp)
}
   96eb8:	e037883a 	mov	sp,fp
   96ebc:	df000017 	ldw	fp,0(sp)
   96ec0:	dec00104 	addi	sp,sp,4
   96ec4:	f800283a 	ret

00096ec8 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   96ec8:	defff304 	addi	sp,sp,-52
   96ecc:	df000c15 	stw	fp,48(sp)
   96ed0:	df000c04 	addi	fp,sp,48
   96ed4:	e13ffb15 	stw	r4,-20(fp)
   96ed8:	e17ffc15 	stw	r5,-16(fp)
   96edc:	e1bffd15 	stw	r6,-12(fp)
   96ee0:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   96ee4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   96ee8:	e0bffe17 	ldw	r2,-8(fp)
   96eec:	1004c03a 	cmpne	r2,r2,zero
   96ef0:	1000021e 	bne	r2,zero,96efc <OSMemCreate+0x34>
        return ((OS_MEM *)0);
   96ef4:	e03fff15 	stw	zero,-4(fp)
   96ef8:	00007506 	br	970d0 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   96efc:	e0bffb17 	ldw	r2,-20(fp)
   96f00:	1004c03a 	cmpne	r2,r2,zero
   96f04:	1000051e 	bne	r2,zero,96f1c <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   96f08:	e0fffe17 	ldw	r3,-8(fp)
   96f0c:	00801884 	movi	r2,98
   96f10:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
   96f14:	e03fff15 	stw	zero,-4(fp)
   96f18:	00006d06 	br	970d0 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   96f1c:	e0bffb17 	ldw	r2,-20(fp)
   96f20:	108000cc 	andi	r2,r2,3
   96f24:	1005003a 	cmpeq	r2,r2,zero
   96f28:	1000051e 	bne	r2,zero,96f40 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   96f2c:	e0fffe17 	ldw	r3,-8(fp)
   96f30:	00801884 	movi	r2,98
   96f34:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
   96f38:	e03fff15 	stw	zero,-4(fp)
   96f3c:	00006406 	br	970d0 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   96f40:	e0bffc17 	ldw	r2,-16(fp)
   96f44:	108000a8 	cmpgeui	r2,r2,2
   96f48:	1000051e 	bne	r2,zero,96f60 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   96f4c:	e0fffe17 	ldw	r3,-8(fp)
   96f50:	008016c4 	movi	r2,91
   96f54:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
   96f58:	e03fff15 	stw	zero,-4(fp)
   96f5c:	00005c06 	br	970d0 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   96f60:	e0bffd17 	ldw	r2,-12(fp)
   96f64:	10800128 	cmpgeui	r2,r2,4
   96f68:	1000051e 	bne	r2,zero,96f80 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   96f6c:	e0fffe17 	ldw	r3,-8(fp)
   96f70:	00801704 	movi	r2,92
   96f74:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
   96f78:	e03fff15 	stw	zero,-4(fp)
   96f7c:	00005406 	br	970d0 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   96f80:	0005303a 	rdctl	r2,status
   96f84:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   96f88:	e0fff517 	ldw	r3,-44(fp)
   96f8c:	00bfff84 	movi	r2,-2
   96f90:	1884703a 	and	r2,r3,r2
   96f94:	1001703a 	wrctl	status,r2
  
  return context;
   96f98:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   96f9c:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   96fa0:	008002b4 	movhi	r2,10
   96fa4:	108e4e04 	addi	r2,r2,14648
   96fa8:	10800017 	ldw	r2,0(r2)
   96fac:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   96fb0:	008002b4 	movhi	r2,10
   96fb4:	108e4e04 	addi	r2,r2,14648
   96fb8:	10800017 	ldw	r2,0(r2)
   96fbc:	1005003a 	cmpeq	r2,r2,zero
   96fc0:	1000081e 	bne	r2,zero,96fe4 <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   96fc4:	008002b4 	movhi	r2,10
   96fc8:	108e4e04 	addi	r2,r2,14648
   96fcc:	10800017 	ldw	r2,0(r2)
   96fd0:	10800117 	ldw	r2,4(r2)
   96fd4:	1007883a 	mov	r3,r2
   96fd8:	008002b4 	movhi	r2,10
   96fdc:	108e4e04 	addi	r2,r2,14648
   96fe0:	10c00015 	stw	r3,0(r2)
   96fe4:	e0bff617 	ldw	r2,-40(fp)
   96fe8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   96fec:	e0bff417 	ldw	r2,-48(fp)
   96ff0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   96ff4:	e0bffa17 	ldw	r2,-24(fp)
   96ff8:	1004c03a 	cmpne	r2,r2,zero
   96ffc:	1000051e 	bne	r2,zero,97014 <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
   97000:	e0fffe17 	ldw	r3,-8(fp)
   97004:	00801684 	movi	r2,90
   97008:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
   9700c:	e03fff15 	stw	zero,-4(fp)
   97010:	00002f06 	br	970d0 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   97014:	e0bffb17 	ldw	r2,-20(fp)
   97018:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   9701c:	e0bffb17 	ldw	r2,-20(fp)
   97020:	1007883a 	mov	r3,r2
   97024:	e0bffd17 	ldw	r2,-12(fp)
   97028:	1885883a 	add	r2,r3,r2
   9702c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
   97030:	e03ff715 	stw	zero,-36(fp)
   97034:	00000d06 	br	9706c <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   97038:	e0fff817 	ldw	r3,-32(fp)
   9703c:	e0bff917 	ldw	r2,-28(fp)
   97040:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   97044:	e0bff917 	ldw	r2,-28(fp)
   97048:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   9704c:	e0bff917 	ldw	r2,-28(fp)
   97050:	1007883a 	mov	r3,r2
   97054:	e0bffd17 	ldw	r2,-12(fp)
   97058:	1885883a 	add	r2,r3,r2
   9705c:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   97060:	e0bff717 	ldw	r2,-36(fp)
   97064:	10800044 	addi	r2,r2,1
   97068:	e0bff715 	stw	r2,-36(fp)
   9706c:	e0bffc17 	ldw	r2,-16(fp)
   97070:	10ffffc4 	addi	r3,r2,-1
   97074:	e0bff717 	ldw	r2,-36(fp)
   97078:	10ffef36 	bltu	r2,r3,97038 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   9707c:	e0bff817 	ldw	r2,-32(fp)
   97080:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   97084:	e0fffa17 	ldw	r3,-24(fp)
   97088:	e0bffb17 	ldw	r2,-20(fp)
   9708c:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   97090:	e0fffa17 	ldw	r3,-24(fp)
   97094:	e0bffb17 	ldw	r2,-20(fp)
   97098:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   9709c:	e0fffa17 	ldw	r3,-24(fp)
   970a0:	e0bffc17 	ldw	r2,-16(fp)
   970a4:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
   970a8:	e0fffa17 	ldw	r3,-24(fp)
   970ac:	e0bffc17 	ldw	r2,-16(fp)
   970b0:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   970b4:	e0fffa17 	ldw	r3,-24(fp)
   970b8:	e0bffd17 	ldw	r2,-12(fp)
   970bc:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
   970c0:	e0bffe17 	ldw	r2,-8(fp)
   970c4:	10000005 	stb	zero,0(r2)
    return (pmem);
   970c8:	e0bffa17 	ldw	r2,-24(fp)
   970cc:	e0bfff15 	stw	r2,-4(fp)
   970d0:	e0bfff17 	ldw	r2,-4(fp)
}
   970d4:	e037883a 	mov	sp,fp
   970d8:	df000017 	ldw	fp,0(sp)
   970dc:	dec00104 	addi	sp,sp,4
   970e0:	f800283a 	ret

000970e4 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   970e4:	defff704 	addi	sp,sp,-36
   970e8:	df000815 	stw	fp,32(sp)
   970ec:	df000804 	addi	fp,sp,32
   970f0:	e13ffd15 	stw	r4,-12(fp)
   970f4:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   970f8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   970fc:	e0bffe17 	ldw	r2,-8(fp)
   97100:	1004c03a 	cmpne	r2,r2,zero
   97104:	1000021e 	bne	r2,zero,97110 <OSMemGet+0x2c>
        return ((void *)0);
   97108:	e03fff15 	stw	zero,-4(fp)
   9710c:	00003106 	br	971d4 <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   97110:	e0bffd17 	ldw	r2,-12(fp)
   97114:	1004c03a 	cmpne	r2,r2,zero
   97118:	1000051e 	bne	r2,zero,97130 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   9711c:	e0fffe17 	ldw	r3,-8(fp)
   97120:	00801804 	movi	r2,96
   97124:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   97128:	e03fff15 	stw	zero,-4(fp)
   9712c:	00002906 	br	971d4 <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   97130:	0005303a 	rdctl	r2,status
   97134:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   97138:	e0fffa17 	ldw	r3,-24(fp)
   9713c:	00bfff84 	movi	r2,-2
   97140:	1884703a 	and	r2,r3,r2
   97144:	1001703a 	wrctl	status,r2
  
  return context;
   97148:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   9714c:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   97150:	e0bffd17 	ldw	r2,-12(fp)
   97154:	10800417 	ldw	r2,16(r2)
   97158:	1005003a 	cmpeq	r2,r2,zero
   9715c:	1000151e 	bne	r2,zero,971b4 <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   97160:	e0bffd17 	ldw	r2,-12(fp)
   97164:	10800117 	ldw	r2,4(r2)
   97168:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   9716c:	e0bffc17 	ldw	r2,-16(fp)
   97170:	10c00017 	ldw	r3,0(r2)
   97174:	e0bffd17 	ldw	r2,-12(fp)
   97178:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   9717c:	e0bffd17 	ldw	r2,-12(fp)
   97180:	10800417 	ldw	r2,16(r2)
   97184:	10ffffc4 	addi	r3,r2,-1
   97188:	e0bffd17 	ldw	r2,-12(fp)
   9718c:	10c00415 	stw	r3,16(r2)
   97190:	e0bffb17 	ldw	r2,-20(fp)
   97194:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   97198:	e0bff917 	ldw	r2,-28(fp)
   9719c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   971a0:	e0bffe17 	ldw	r2,-8(fp)
   971a4:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   971a8:	e0bffc17 	ldw	r2,-16(fp)
   971ac:	e0bfff15 	stw	r2,-4(fp)
   971b0:	00000806 	br	971d4 <OSMemGet+0xf0>
   971b4:	e0bffb17 	ldw	r2,-20(fp)
   971b8:	e0bff815 	stw	r2,-32(fp)
   971bc:	e0bff817 	ldw	r2,-32(fp)
   971c0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   971c4:	e0fffe17 	ldw	r3,-8(fp)
   971c8:	00801744 	movi	r2,93
   971cc:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   971d0:	e03fff15 	stw	zero,-4(fp)
   971d4:	e0bfff17 	ldw	r2,-4(fp)
}
   971d8:	e037883a 	mov	sp,fp
   971dc:	df000017 	ldw	fp,0(sp)
   971e0:	dec00104 	addi	sp,sp,4
   971e4:	f800283a 	ret

000971e8 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   971e8:	defff604 	addi	sp,sp,-40
   971ec:	dfc00915 	stw	ra,36(sp)
   971f0:	df000815 	stw	fp,32(sp)
   971f4:	df000804 	addi	fp,sp,32
   971f8:	e13ffc15 	stw	r4,-16(fp)
   971fc:	e17ffd15 	stw	r5,-12(fp)
   97200:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   97204:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   97208:	e0bffe17 	ldw	r2,-8(fp)
   9720c:	1004c03a 	cmpne	r2,r2,zero
   97210:	1000021e 	bne	r2,zero,9721c <OSMemNameGet+0x34>
        return (0);
   97214:	e03fff15 	stw	zero,-4(fp)
   97218:	00003006 	br	972dc <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   9721c:	e0bffc17 	ldw	r2,-16(fp)
   97220:	1004c03a 	cmpne	r2,r2,zero
   97224:	1000051e 	bne	r2,zero,9723c <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   97228:	e0fffe17 	ldw	r3,-8(fp)
   9722c:	00801804 	movi	r2,96
   97230:	18800005 	stb	r2,0(r3)
        return (0);
   97234:	e03fff15 	stw	zero,-4(fp)
   97238:	00002806 	br	972dc <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   9723c:	e0bffd17 	ldw	r2,-12(fp)
   97240:	1004c03a 	cmpne	r2,r2,zero
   97244:	1000051e 	bne	r2,zero,9725c <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
   97248:	e0fffe17 	ldw	r3,-8(fp)
   9724c:	00800304 	movi	r2,12
   97250:	18800005 	stb	r2,0(r3)
        return (0);
   97254:	e03fff15 	stw	zero,-4(fp)
   97258:	00002006 	br	972dc <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   9725c:	008002b4 	movhi	r2,10
   97260:	108e5304 	addi	r2,r2,14668
   97264:	10800003 	ldbu	r2,0(r2)
   97268:	10803fcc 	andi	r2,r2,255
   9726c:	1005003a 	cmpeq	r2,r2,zero
   97270:	1000051e 	bne	r2,zero,97288 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
   97274:	e0fffe17 	ldw	r3,-8(fp)
   97278:	00800444 	movi	r2,17
   9727c:	18800005 	stb	r2,0(r3)
        return (0);
   97280:	e03fff15 	stw	zero,-4(fp)
   97284:	00001506 	br	972dc <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   97288:	0005303a 	rdctl	r2,status
   9728c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   97290:	e0fff917 	ldw	r3,-28(fp)
   97294:	00bfff84 	movi	r2,-2
   97298:	1884703a 	and	r2,r3,r2
   9729c:	1001703a 	wrctl	status,r2
  
  return context;
   972a0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   972a4:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   972a8:	e0bffc17 	ldw	r2,-16(fp)
   972ac:	11400504 	addi	r5,r2,20
   972b0:	e13ffd17 	ldw	r4,-12(fp)
   972b4:	00941d00 	call	941d0 <OS_StrCopy>
   972b8:	e0bffb05 	stb	r2,-20(fp)
   972bc:	e0bffa17 	ldw	r2,-24(fp)
   972c0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   972c4:	e0bff817 	ldw	r2,-32(fp)
   972c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   972cc:	e0bffe17 	ldw	r2,-8(fp)
   972d0:	10000005 	stb	zero,0(r2)
    return (len);
   972d4:	e0bffb03 	ldbu	r2,-20(fp)
   972d8:	e0bfff15 	stw	r2,-4(fp)
   972dc:	e0bfff17 	ldw	r2,-4(fp)
}
   972e0:	e037883a 	mov	sp,fp
   972e4:	dfc00117 	ldw	ra,4(sp)
   972e8:	df000017 	ldw	fp,0(sp)
   972ec:	dec00204 	addi	sp,sp,8
   972f0:	f800283a 	ret

000972f4 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   972f4:	defff604 	addi	sp,sp,-40
   972f8:	dfc00915 	stw	ra,36(sp)
   972fc:	df000815 	stw	fp,32(sp)
   97300:	df000804 	addi	fp,sp,32
   97304:	e13ffd15 	stw	r4,-12(fp)
   97308:	e17ffe15 	stw	r5,-8(fp)
   9730c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   97310:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   97314:	e0bfff17 	ldw	r2,-4(fp)
   97318:	1005003a 	cmpeq	r2,r2,zero
   9731c:	1000381e 	bne	r2,zero,97400 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   97320:	e0bffd17 	ldw	r2,-12(fp)
   97324:	1004c03a 	cmpne	r2,r2,zero
   97328:	1000041e 	bne	r2,zero,9733c <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   9732c:	e0ffff17 	ldw	r3,-4(fp)
   97330:	00801804 	movi	r2,96
   97334:	18800005 	stb	r2,0(r3)
        return;
   97338:	00003106 	br	97400 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   9733c:	e0bffe17 	ldw	r2,-8(fp)
   97340:	1004c03a 	cmpne	r2,r2,zero
   97344:	1000041e 	bne	r2,zero,97358 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
   97348:	e0ffff17 	ldw	r3,-4(fp)
   9734c:	00800304 	movi	r2,12
   97350:	18800005 	stb	r2,0(r3)
        return;
   97354:	00002a06 	br	97400 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   97358:	008002b4 	movhi	r2,10
   9735c:	108e5304 	addi	r2,r2,14668
   97360:	10800003 	ldbu	r2,0(r2)
   97364:	10803fcc 	andi	r2,r2,255
   97368:	1005003a 	cmpeq	r2,r2,zero
   9736c:	1000041e 	bne	r2,zero,97380 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
   97370:	e0ffff17 	ldw	r3,-4(fp)
   97374:	00800484 	movi	r2,18
   97378:	18800005 	stb	r2,0(r3)
        return;
   9737c:	00002006 	br	97400 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   97380:	0005303a 	rdctl	r2,status
   97384:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   97388:	e0fffa17 	ldw	r3,-24(fp)
   9738c:	00bfff84 	movi	r2,-2
   97390:	1884703a 	and	r2,r3,r2
   97394:	1001703a 	wrctl	status,r2
  
  return context;
   97398:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   9739c:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   973a0:	e13ffe17 	ldw	r4,-8(fp)
   973a4:	00942500 	call	94250 <OS_StrLen>
   973a8:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   973ac:	e0bffc03 	ldbu	r2,-16(fp)
   973b0:	10800830 	cmpltui	r2,r2,32
   973b4:	1000081e 	bne	r2,zero,973d8 <OSMemNameSet+0xe4>
   973b8:	e0bffb17 	ldw	r2,-20(fp)
   973bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   973c0:	e0bff917 	ldw	r2,-28(fp)
   973c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   973c8:	e0ffff17 	ldw	r3,-4(fp)
   973cc:	008018c4 	movi	r2,99
   973d0:	18800005 	stb	r2,0(r3)
        return;
   973d4:	00000a06 	br	97400 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   973d8:	e0bffd17 	ldw	r2,-12(fp)
   973dc:	11000504 	addi	r4,r2,20
   973e0:	e17ffe17 	ldw	r5,-8(fp)
   973e4:	00941d00 	call	941d0 <OS_StrCopy>
   973e8:	e0bffb17 	ldw	r2,-20(fp)
   973ec:	e0bff815 	stw	r2,-32(fp)
   973f0:	e0bff817 	ldw	r2,-32(fp)
   973f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   973f8:	e0bfff17 	ldw	r2,-4(fp)
   973fc:	10000005 	stb	zero,0(r2)
}
   97400:	e037883a 	mov	sp,fp
   97404:	dfc00117 	ldw	ra,4(sp)
   97408:	df000017 	ldw	fp,0(sp)
   9740c:	dec00204 	addi	sp,sp,8
   97410:	f800283a 	ret

00097414 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   97414:	defff804 	addi	sp,sp,-32
   97418:	df000715 	stw	fp,28(sp)
   9741c:	df000704 	addi	fp,sp,28
   97420:	e13ffd15 	stw	r4,-12(fp)
   97424:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   97428:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   9742c:	e0bffd17 	ldw	r2,-12(fp)
   97430:	1004c03a 	cmpne	r2,r2,zero
   97434:	1000031e 	bne	r2,zero,97444 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
   97438:	00801804 	movi	r2,96
   9743c:	e0bfff15 	stw	r2,-4(fp)
   97440:	00002b06 	br	974f0 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   97444:	e0bffe17 	ldw	r2,-8(fp)
   97448:	1004c03a 	cmpne	r2,r2,zero
   9744c:	1000031e 	bne	r2,zero,9745c <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
   97450:	008017c4 	movi	r2,95
   97454:	e0bfff15 	stw	r2,-4(fp)
   97458:	00002506 	br	974f0 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9745c:	0005303a 	rdctl	r2,status
   97460:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   97464:	e0fffb17 	ldw	r3,-20(fp)
   97468:	00bfff84 	movi	r2,-2
   9746c:	1884703a 	and	r2,r3,r2
   97470:	1001703a 	wrctl	status,r2
  
  return context;
   97474:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   97478:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   9747c:	e0bffd17 	ldw	r2,-12(fp)
   97480:	10c00417 	ldw	r3,16(r2)
   97484:	e0bffd17 	ldw	r2,-12(fp)
   97488:	10800317 	ldw	r2,12(r2)
   9748c:	18800736 	bltu	r3,r2,974ac <OSMemPut+0x98>
   97490:	e0bffc17 	ldw	r2,-16(fp)
   97494:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   97498:	e0bffa17 	ldw	r2,-24(fp)
   9749c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   974a0:	00801784 	movi	r2,94
   974a4:	e0bfff15 	stw	r2,-4(fp)
   974a8:	00001106 	br	974f0 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   974ac:	e0fffe17 	ldw	r3,-8(fp)
   974b0:	e0bffd17 	ldw	r2,-12(fp)
   974b4:	10800117 	ldw	r2,4(r2)
   974b8:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
   974bc:	e0fffd17 	ldw	r3,-12(fp)
   974c0:	e0bffe17 	ldw	r2,-8(fp)
   974c4:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   974c8:	e0bffd17 	ldw	r2,-12(fp)
   974cc:	10800417 	ldw	r2,16(r2)
   974d0:	10c00044 	addi	r3,r2,1
   974d4:	e0bffd17 	ldw	r2,-12(fp)
   974d8:	10c00415 	stw	r3,16(r2)
   974dc:	e0bffc17 	ldw	r2,-16(fp)
   974e0:	e0bff915 	stw	r2,-28(fp)
   974e4:	e0bff917 	ldw	r2,-28(fp)
   974e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   974ec:	e03fff15 	stw	zero,-4(fp)
   974f0:	e0bfff17 	ldw	r2,-4(fp)
}
   974f4:	e037883a 	mov	sp,fp
   974f8:	df000017 	ldw	fp,0(sp)
   974fc:	dec00104 	addi	sp,sp,4
   97500:	f800283a 	ret

00097504 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   97504:	defff904 	addi	sp,sp,-28
   97508:	df000615 	stw	fp,24(sp)
   9750c:	df000604 	addi	fp,sp,24
   97510:	e13ffd15 	stw	r4,-12(fp)
   97514:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   97518:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   9751c:	e0bffd17 	ldw	r2,-12(fp)
   97520:	1004c03a 	cmpne	r2,r2,zero
   97524:	1000031e 	bne	r2,zero,97534 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
   97528:	00801804 	movi	r2,96
   9752c:	e0bfff15 	stw	r2,-4(fp)
   97530:	00002e06 	br	975ec <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   97534:	e0bffe17 	ldw	r2,-8(fp)
   97538:	1004c03a 	cmpne	r2,r2,zero
   9753c:	1000031e 	bne	r2,zero,9754c <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
   97540:	00801844 	movi	r2,97
   97544:	e0bfff15 	stw	r2,-4(fp)
   97548:	00002806 	br	975ec <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9754c:	0005303a 	rdctl	r2,status
   97550:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   97554:	e0fffb17 	ldw	r3,-20(fp)
   97558:	00bfff84 	movi	r2,-2
   9755c:	1884703a 	and	r2,r3,r2
   97560:	1001703a 	wrctl	status,r2
  
  return context;
   97564:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   97568:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   9756c:	e0bffd17 	ldw	r2,-12(fp)
   97570:	10c00017 	ldw	r3,0(r2)
   97574:	e0bffe17 	ldw	r2,-8(fp)
   97578:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   9757c:	e0bffd17 	ldw	r2,-12(fp)
   97580:	10c00117 	ldw	r3,4(r2)
   97584:	e0bffe17 	ldw	r2,-8(fp)
   97588:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   9758c:	e0bffd17 	ldw	r2,-12(fp)
   97590:	10c00217 	ldw	r3,8(r2)
   97594:	e0bffe17 	ldw	r2,-8(fp)
   97598:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   9759c:	e0bffd17 	ldw	r2,-12(fp)
   975a0:	10c00317 	ldw	r3,12(r2)
   975a4:	e0bffe17 	ldw	r2,-8(fp)
   975a8:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   975ac:	e0bffd17 	ldw	r2,-12(fp)
   975b0:	10c00417 	ldw	r3,16(r2)
   975b4:	e0bffe17 	ldw	r2,-8(fp)
   975b8:	10c00415 	stw	r3,16(r2)
   975bc:	e0bffc17 	ldw	r2,-16(fp)
   975c0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   975c4:	e0bffa17 	ldw	r2,-24(fp)
   975c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   975cc:	e0bffe17 	ldw	r2,-8(fp)
   975d0:	10c00317 	ldw	r3,12(r2)
   975d4:	e0bffe17 	ldw	r2,-8(fp)
   975d8:	10800417 	ldw	r2,16(r2)
   975dc:	1887c83a 	sub	r3,r3,r2
   975e0:	e0bffe17 	ldw	r2,-8(fp)
   975e4:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   975e8:	e03fff15 	stw	zero,-4(fp)
   975ec:	e0bfff17 	ldw	r2,-4(fp)
}
   975f0:	e037883a 	mov	sp,fp
   975f4:	df000017 	ldw	fp,0(sp)
   975f8:	dec00104 	addi	sp,sp,4
   975fc:	f800283a 	ret

00097600 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   97600:	defffc04 	addi	sp,sp,-16
   97604:	dfc00315 	stw	ra,12(sp)
   97608:	df000215 	stw	fp,8(sp)
   9760c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   97610:	010002f4 	movhi	r4,11
   97614:	21172104 	addi	r4,r4,23684
   97618:	01430c04 	movi	r5,3120
   9761c:	0093fcc0 	call	93fcc <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   97620:	008002f4 	movhi	r2,11
   97624:	10972104 	addi	r2,r2,23684
   97628:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   9762c:	e03ffe0d 	sth	zero,-8(fp)
   97630:	00001406 	br	97684 <OS_MemInit+0x84>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   97634:	e13ffe0b 	ldhu	r4,-8(fp)
   97638:	01400d04 	movi	r5,52
   9763c:	00877e40 	call	877e4 <__mulsi3>
   97640:	1007883a 	mov	r3,r2
   97644:	008002f4 	movhi	r2,11
   97648:	10972e04 	addi	r2,r2,23736
   9764c:	1887883a 	add	r3,r3,r2
   97650:	e0bfff17 	ldw	r2,-4(fp)
   97654:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   97658:	e0ffff17 	ldw	r3,-4(fp)
   9765c:	00800fc4 	movi	r2,63
   97660:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   97664:	e0bfff17 	ldw	r2,-4(fp)
   97668:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   9766c:	e0bfff17 	ldw	r2,-4(fp)
   97670:	10800d04 	addi	r2,r2,52
   97674:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   97678:	e0bffe0b 	ldhu	r2,-8(fp)
   9767c:	10800044 	addi	r2,r2,1
   97680:	e0bffe0d 	sth	r2,-8(fp)
   97684:	e0bffe0b 	ldhu	r2,-8(fp)
   97688:	10800ef0 	cmpltui	r2,r2,59
   9768c:	103fe91e 	bne	r2,zero,97634 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   97690:	e0bfff17 	ldw	r2,-4(fp)
   97694:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   97698:	e0ffff17 	ldw	r3,-4(fp)
   9769c:	00800fc4 	movi	r2,63
   976a0:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   976a4:	e0bfff17 	ldw	r2,-4(fp)
   976a8:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   976ac:	00c002b4 	movhi	r3,10
   976b0:	18ce4e04 	addi	r3,r3,14648
   976b4:	008002f4 	movhi	r2,11
   976b8:	10972104 	addi	r2,r2,23684
   976bc:	18800015 	stw	r2,0(r3)
#endif
}
   976c0:	e037883a 	mov	sp,fp
   976c4:	dfc00117 	ldw	ra,4(sp)
   976c8:	df000017 	ldw	fp,0(sp)
   976cc:	dec00204 	addi	sp,sp,8
   976d0:	f800283a 	ret

000976d4 <OSMutexAccept>:
*********************************************************************************************************
*/

#if OS_MUTEX_ACCEPT_EN > 0
BOOLEAN  OSMutexAccept (OS_EVENT *pevent, INT8U *perr)
{
   976d4:	defff604 	addi	sp,sp,-40
   976d8:	df000915 	stw	fp,36(sp)
   976dc:	df000904 	addi	fp,sp,36
   976e0:	e13ffd15 	stw	r4,-12(fp)
   976e4:	e17ffe15 	stw	r5,-8(fp)
    INT8U      pip;                                    /* Priority Inheritance Priority (PIP)          */
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   976e8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                          /* Validate 'perr'                              */
   976ec:	e0bffe17 	ldw	r2,-8(fp)
   976f0:	1004c03a 	cmpne	r2,r2,zero
   976f4:	1000021e 	bne	r2,zero,97700 <OSMutexAccept+0x2c>
        return (OS_FALSE);
   976f8:	e03fff15 	stw	zero,-4(fp)
   976fc:	00006606 	br	97898 <OSMutexAccept+0x1c4>
    }
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   97700:	e0bffd17 	ldw	r2,-12(fp)
   97704:	1004c03a 	cmpne	r2,r2,zero
   97708:	1000051e 	bne	r2,zero,97720 <OSMutexAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   9770c:	e0fffe17 	ldw	r3,-8(fp)
   97710:	00800104 	movi	r2,4
   97714:	18800005 	stb	r2,0(r3)
        return (OS_FALSE);
   97718:	e03fff15 	stw	zero,-4(fp)
   9771c:	00005e06 	br	97898 <OSMutexAccept+0x1c4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {  /* Validate event block type                    */
   97720:	e0bffd17 	ldw	r2,-12(fp)
   97724:	10800003 	ldbu	r2,0(r2)
   97728:	10803fcc 	andi	r2,r2,255
   9772c:	10800120 	cmpeqi	r2,r2,4
   97730:	1000051e 	bne	r2,zero,97748 <OSMutexAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
   97734:	e0fffe17 	ldw	r3,-8(fp)
   97738:	00800044 	movi	r2,1
   9773c:	18800005 	stb	r2,0(r3)
        return (OS_FALSE);
   97740:	e03fff15 	stw	zero,-4(fp)
   97744:	00005406 	br	97898 <OSMutexAccept+0x1c4>
    }
    if (OSIntNesting > 0) {                            /* Make sure it's not called from an ISR        */
   97748:	008002b4 	movhi	r2,10
   9774c:	108e5304 	addi	r2,r2,14668
   97750:	10800003 	ldbu	r2,0(r2)
   97754:	10803fcc 	andi	r2,r2,255
   97758:	1005003a 	cmpeq	r2,r2,zero
   9775c:	1000051e 	bne	r2,zero,97774 <OSMutexAccept+0xa0>
        *perr = OS_ERR_PEND_ISR;
   97760:	e0fffe17 	ldw	r3,-8(fp)
   97764:	00800084 	movi	r2,2
   97768:	18800005 	stb	r2,0(r3)
        return (OS_FALSE);
   9776c:	e03fff15 	stw	zero,-4(fp)
   97770:	00004906 	br	97898 <OSMutexAccept+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   97774:	0005303a 	rdctl	r2,status
   97778:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9777c:	e0fffa17 	ldw	r3,-24(fp)
   97780:	00bfff84 	movi	r2,-2
   97784:	1884703a 	and	r2,r3,r2
   97788:	1001703a 	wrctl	status,r2
  
  return context;
   9778c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();                               /* Get value (0 or 1) of Mutex                  */
   97790:	e0bffb15 	stw	r2,-20(fp)
    pip = (INT8U)(pevent->OSEventCnt >> 8);            /* Get PIP from mutex                           */
   97794:	e0bffd17 	ldw	r2,-12(fp)
   97798:	1080020b 	ldhu	r2,8(r2)
   9779c:	10bfffcc 	andi	r2,r2,65535
   977a0:	1004d23a 	srli	r2,r2,8
   977a4:	e0bffc05 	stb	r2,-16(fp)
    if ((pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
   977a8:	e0bffd17 	ldw	r2,-12(fp)
   977ac:	1080020b 	ldhu	r2,8(r2)
   977b0:	10bfffcc 	andi	r2,r2,65535
   977b4:	10803fcc 	andi	r2,r2,255
   977b8:	10803fd8 	cmpnei	r2,r2,255
   977bc:	10002f1e 	bne	r2,zero,9787c <OSMutexAccept+0x1a8>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;   /*      Mask off LSByte (Acquire Mutex)         */
   977c0:	e0bffd17 	ldw	r2,-12(fp)
   977c4:	10c0020b 	ldhu	r3,8(r2)
   977c8:	00bfc004 	movi	r2,-256
   977cc:	1884703a 	and	r2,r3,r2
   977d0:	1007883a 	mov	r3,r2
   977d4:	e0bffd17 	ldw	r2,-12(fp)
   977d8:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;     /*      Save current task priority in LSByte    */
   977dc:	e0bffd17 	ldw	r2,-12(fp)
   977e0:	10c0020b 	ldhu	r3,8(r2)
   977e4:	008002b4 	movhi	r2,10
   977e8:	108e5404 	addi	r2,r2,14672
   977ec:	10800017 	ldw	r2,0(r2)
   977f0:	10800c83 	ldbu	r2,50(r2)
   977f4:	10803fcc 	andi	r2,r2,255
   977f8:	1884b03a 	or	r2,r3,r2
   977fc:	1007883a 	mov	r3,r2
   97800:	e0bffd17 	ldw	r2,-12(fp)
   97804:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = (void *)OSTCBCur;        /*      Link TCB of task owning Mutex           */
   97808:	008002b4 	movhi	r2,10
   9780c:	108e5404 	addi	r2,r2,14672
   97810:	10c00017 	ldw	r3,0(r2)
   97814:	e0bffd17 	ldw	r2,-12(fp)
   97818:	10c00115 	stw	r3,4(r2)
        if (OSTCBCur->OSTCBPrio <= pip) {              /*      PIP 'must' have a SMALLER prio ...      */
   9781c:	008002b4 	movhi	r2,10
   97820:	108e5404 	addi	r2,r2,14672
   97824:	10800017 	ldw	r2,0(r2)
   97828:	10800c83 	ldbu	r2,50(r2)
   9782c:	10c03fcc 	andi	r3,r2,255
   97830:	e0bffc03 	ldbu	r2,-16(fp)
   97834:	10c00836 	bltu	r2,r3,97858 <OSMutexAccept+0x184>
   97838:	e0bffb17 	ldw	r2,-20(fp)
   9783c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   97840:	e0bff917 	ldw	r2,-28(fp)
   97844:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                        /*      ... than current task!                  */
            *perr = OS_ERR_PIP_LOWER;
   97848:	e0fffe17 	ldw	r3,-8(fp)
   9784c:	00801e04 	movi	r2,120
   97850:	18800005 	stb	r2,0(r3)
   97854:	00000606 	br	97870 <OSMutexAccept+0x19c>
   97858:	e0bffb17 	ldw	r2,-20(fp)
   9785c:	e0bff815 	stw	r2,-32(fp)
   97860:	e0bff817 	ldw	r2,-32(fp)
   97864:	1001703a 	wrctl	status,r2
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
   97868:	e0bffe17 	ldw	r2,-8(fp)
   9786c:	10000005 	stb	zero,0(r2)
        }
        return (OS_TRUE);
   97870:	00800044 	movi	r2,1
   97874:	e0bfff15 	stw	r2,-4(fp)
   97878:	00000706 	br	97898 <OSMutexAccept+0x1c4>
   9787c:	e0bffb17 	ldw	r2,-20(fp)
   97880:	e0bff715 	stw	r2,-36(fp)
   97884:	e0bff717 	ldw	r2,-36(fp)
   97888:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   9788c:	e0bffe17 	ldw	r2,-8(fp)
   97890:	10000005 	stb	zero,0(r2)
    return (OS_FALSE);
   97894:	e03fff15 	stw	zero,-4(fp)
   97898:	e0bfff17 	ldw	r2,-4(fp)
}
   9789c:	e037883a 	mov	sp,fp
   978a0:	df000017 	ldw	fp,0(sp)
   978a4:	dec00104 	addi	sp,sp,4
   978a8:	f800283a 	ret

000978ac <OSMutexCreate>:
*                 to use to reduce priority inversion.
*********************************************************************************************************
*/

OS_EVENT  *OSMutexCreate (INT8U prio, INT8U *perr)
{
   978ac:	defff504 	addi	sp,sp,-44
   978b0:	dfc00a15 	stw	ra,40(sp)
   978b4:	df000915 	stw	fp,36(sp)
   978b8:	df000904 	addi	fp,sp,36
   978bc:	e17ffe15 	stw	r5,-8(fp)
   978c0:	e13ffd05 	stb	r4,-12(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   978c4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   978c8:	e0bffe17 	ldw	r2,-8(fp)
   978cc:	1004c03a 	cmpne	r2,r2,zero
   978d0:	1000021e 	bne	r2,zero,978dc <OSMutexCreate+0x30>
        return ((OS_EVENT *)0);
   978d4:	e03fff15 	stw	zero,-4(fp)
   978d8:	00006f06 	br	97a98 <OSMutexCreate+0x1ec>
    }
    if (prio >= OS_LOWEST_PRIO) {                          /* Validate PIP                             */
   978dc:	e0bffd03 	ldbu	r2,-12(fp)
   978e0:	10800530 	cmpltui	r2,r2,20
   978e4:	1000051e 	bne	r2,zero,978fc <OSMutexCreate+0x50>
        *perr = OS_ERR_PRIO_INVALID;
   978e8:	e0fffe17 	ldw	r3,-8(fp)
   978ec:	00800a84 	movi	r2,42
   978f0:	18800005 	stb	r2,0(r3)
        return ((OS_EVENT *)0);
   978f4:	e03fff15 	stw	zero,-4(fp)
   978f8:	00006706 	br	97a98 <OSMutexCreate+0x1ec>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   978fc:	008002b4 	movhi	r2,10
   97900:	108e5304 	addi	r2,r2,14668
   97904:	10800003 	ldbu	r2,0(r2)
   97908:	10803fcc 	andi	r2,r2,255
   9790c:	1005003a 	cmpeq	r2,r2,zero
   97910:	1000051e 	bne	r2,zero,97928 <OSMutexCreate+0x7c>
        *perr = OS_ERR_CREATE_ISR;                         /* ... can't CREATE mutex from an ISR       */
   97914:	e0fffe17 	ldw	r3,-8(fp)
   97918:	00800404 	movi	r2,16
   9791c:	18800005 	stb	r2,0(r3)
        return ((OS_EVENT *)0);
   97920:	e03fff15 	stw	zero,-4(fp)
   97924:	00005c06 	br	97a98 <OSMutexCreate+0x1ec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   97928:	0005303a 	rdctl	r2,status
   9792c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   97930:	e0fffa17 	ldw	r3,-24(fp)
   97934:	00bfff84 	movi	r2,-2
   97938:	1884703a 	and	r2,r3,r2
   9793c:	1001703a 	wrctl	status,r2
  
  return context;
   97940:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   97944:	e0bffb15 	stw	r2,-20(fp)
    if (OSTCBPrioTbl[prio] != (OS_TCB *)0) {               /* Mutex priority must not already exist    */
   97948:	e0bffd03 	ldbu	r2,-12(fp)
   9794c:	00c00334 	movhi	r3,12
   97950:	18e2b904 	addi	r3,r3,-29980
   97954:	1085883a 	add	r2,r2,r2
   97958:	1085883a 	add	r2,r2,r2
   9795c:	10c5883a 	add	r2,r2,r3
   97960:	10800017 	ldw	r2,0(r2)
   97964:	1005003a 	cmpeq	r2,r2,zero
   97968:	1000091e 	bne	r2,zero,97990 <OSMutexCreate+0xe4>
   9796c:	e0bffb17 	ldw	r2,-20(fp)
   97970:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   97974:	e0bff917 	ldw	r2,-28(fp)
   97978:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                /* Task already exist at priority ...       */
        *perr = OS_ERR_PRIO_EXIST;                         /* ... inheritance priority                 */
   9797c:	e0fffe17 	ldw	r3,-8(fp)
   97980:	00800a04 	movi	r2,40
   97984:	18800005 	stb	r2,0(r3)
        return ((OS_EVENT *)0);
   97988:	e03fff15 	stw	zero,-4(fp)
   9798c:	00004206 	br	97a98 <OSMutexCreate+0x1ec>
    }
    OSTCBPrioTbl[prio] = OS_TCB_RESERVED;                  /* Reserve the table entry                  */
   97990:	e0bffd03 	ldbu	r2,-12(fp)
   97994:	00c00334 	movhi	r3,12
   97998:	18e2b904 	addi	r3,r3,-29980
   9799c:	1085883a 	add	r2,r2,r2
   979a0:	1085883a 	add	r2,r2,r2
   979a4:	10c7883a 	add	r3,r2,r3
   979a8:	00800044 	movi	r2,1
   979ac:	18800015 	stw	r2,0(r3)
    pevent             = OSEventFreeList;                  /* Get next free event control block        */
   979b0:	008002b4 	movhi	r2,10
   979b4:	108e5204 	addi	r2,r2,14664
   979b8:	10800017 	ldw	r2,0(r2)
   979bc:	e0bffc15 	stw	r2,-16(fp)
    if (pevent == (OS_EVENT *)0) {                         /* See if an ECB was available              */
   979c0:	e0bffc17 	ldw	r2,-16(fp)
   979c4:	1004c03a 	cmpne	r2,r2,zero
   979c8:	1000111e 	bne	r2,zero,97a10 <OSMutexCreate+0x164>
        OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* No, Release the table entry              */
   979cc:	e0bffd03 	ldbu	r2,-12(fp)
   979d0:	00c00334 	movhi	r3,12
   979d4:	18e2b904 	addi	r3,r3,-29980
   979d8:	1085883a 	add	r2,r2,r2
   979dc:	1085883a 	add	r2,r2,r2
   979e0:	10c5883a 	add	r2,r2,r3
   979e4:	10000015 	stw	zero,0(r2)
   979e8:	e0bffb17 	ldw	r2,-20(fp)
   979ec:	e0bff815 	stw	r2,-32(fp)
   979f0:	e0bff817 	ldw	r2,-32(fp)
   979f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr              = OS_ERR_PEVENT_NULL;           /* No more event control blocks             */
   979f8:	e0fffe17 	ldw	r3,-8(fp)
   979fc:	00800104 	movi	r2,4
   97a00:	18800005 	stb	r2,0(r3)
        return (pevent);
   97a04:	e0bffc17 	ldw	r2,-16(fp)
   97a08:	e0bfff15 	stw	r2,-4(fp)
   97a0c:	00002206 	br	97a98 <OSMutexCreate+0x1ec>
    }
    OSEventFreeList        = (OS_EVENT *)OSEventFreeList->OSEventPtr;   /* Adjust the free list        */
   97a10:	008002b4 	movhi	r2,10
   97a14:	108e5204 	addi	r2,r2,14664
   97a18:	10800017 	ldw	r2,0(r2)
   97a1c:	10800117 	ldw	r2,4(r2)
   97a20:	1007883a 	mov	r3,r2
   97a24:	008002b4 	movhi	r2,10
   97a28:	108e5204 	addi	r2,r2,14664
   97a2c:	10c00015 	stw	r3,0(r2)
   97a30:	e0bffb17 	ldw	r2,-20(fp)
   97a34:	e0bff715 	stw	r2,-36(fp)
   97a38:	e0bff717 	ldw	r2,-36(fp)
   97a3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    pevent->OSEventType    = OS_EVENT_TYPE_MUTEX;
   97a40:	e0fffc17 	ldw	r3,-16(fp)
   97a44:	00800104 	movi	r2,4
   97a48:	18800005 	stb	r2,0(r3)
    pevent->OSEventCnt     = (INT16U)((INT16U)prio << 8) | OS_MUTEX_AVAILABLE; /* Resource is avail.   */
   97a4c:	e0bffd03 	ldbu	r2,-12(fp)
   97a50:	1004923a 	slli	r2,r2,8
   97a54:	10803fd4 	ori	r2,r2,255
   97a58:	1007883a 	mov	r3,r2
   97a5c:	e0bffc17 	ldw	r2,-16(fp)
   97a60:	10c0020d 	sth	r3,8(r2)
    pevent->OSEventPtr     = (void *)0;                                 /* No task owning the mutex    */
   97a64:	e0bffc17 	ldw	r2,-16(fp)
   97a68:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent->OSEventName[0] = '?';
   97a6c:	e0fffc17 	ldw	r3,-16(fp)
   97a70:	00800fc4 	movi	r2,63
   97a74:	18800385 	stb	r2,14(r3)
    pevent->OSEventName[1] = OS_ASCII_NUL;
   97a78:	e0bffc17 	ldw	r2,-16(fp)
   97a7c:	100003c5 	stb	zero,15(r2)
#endif
    OS_EventWaitListInit(pevent);
   97a80:	e13ffc17 	ldw	r4,-16(fp)
   97a84:	0093c000 	call	93c00 <OS_EventWaitListInit>
    *perr                  = OS_ERR_NONE;
   97a88:	e0bffe17 	ldw	r2,-8(fp)
   97a8c:	10000005 	stb	zero,0(r2)
    return (pevent);
   97a90:	e0bffc17 	ldw	r2,-16(fp)
   97a94:	e0bfff15 	stw	r2,-4(fp)
   97a98:	e0bfff17 	ldw	r2,-4(fp)
}
   97a9c:	e037883a 	mov	sp,fp
   97aa0:	dfc00117 	ldw	ra,4(sp)
   97aa4:	df000017 	ldw	fp,0(sp)
   97aa8:	dec00204 	addi	sp,sp,8
   97aac:	f800283a 	ret

00097ab0 <OSMutexDel>:
*********************************************************************************************************
*/

#if OS_MUTEX_DEL_EN
OS_EVENT  *OSMutexDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   97ab0:	deffef04 	addi	sp,sp,-68
   97ab4:	dfc01015 	stw	ra,64(sp)
   97ab8:	df000f15 	stw	fp,60(sp)
   97abc:	df000f04 	addi	fp,sp,60
   97ac0:	e13ffb15 	stw	r4,-20(fp)
   97ac4:	e1bffd15 	stw	r6,-12(fp)
   97ac8:	e17ffc05 	stb	r5,-16(fp)
    OS_EVENT  *pevent_return;
    INT8U      pip;                                        /* Priority inheritance priority            */
    INT8U      prio;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   97acc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   97ad0:	e0bffd17 	ldw	r2,-12(fp)
   97ad4:	1004c03a 	cmpne	r2,r2,zero
   97ad8:	1000031e 	bne	r2,zero,97ae8 <OSMutexDel+0x38>
        return (pevent);
   97adc:	e0bffb17 	ldw	r2,-20(fp)
   97ae0:	e0bfff15 	stw	r2,-4(fp)
   97ae4:	0000c606 	br	97e00 <OSMutexDel+0x350>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   97ae8:	e0bffb17 	ldw	r2,-20(fp)
   97aec:	1004c03a 	cmpne	r2,r2,zero
   97af0:	1000061e 	bne	r2,zero,97b0c <OSMutexDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
   97af4:	e0fffd17 	ldw	r3,-12(fp)
   97af8:	00800104 	movi	r2,4
   97afc:	18800005 	stb	r2,0(r3)
        return (pevent);
   97b00:	e0fffb17 	ldw	r3,-20(fp)
   97b04:	e0ffff15 	stw	r3,-4(fp)
   97b08:	0000bd06 	br	97e00 <OSMutexDel+0x350>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
   97b0c:	e0bffb17 	ldw	r2,-20(fp)
   97b10:	10800003 	ldbu	r2,0(r2)
   97b14:	10803fcc 	andi	r2,r2,255
   97b18:	10800120 	cmpeqi	r2,r2,4
   97b1c:	1000061e 	bne	r2,zero,97b38 <OSMutexDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
   97b20:	e0fffd17 	ldw	r3,-12(fp)
   97b24:	00800044 	movi	r2,1
   97b28:	18800005 	stb	r2,0(r3)
        return (pevent);
   97b2c:	e0bffb17 	ldw	r2,-20(fp)
   97b30:	e0bfff15 	stw	r2,-4(fp)
   97b34:	0000b206 	br	97e00 <OSMutexDel+0x350>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   97b38:	008002b4 	movhi	r2,10
   97b3c:	108e5304 	addi	r2,r2,14668
   97b40:	10800003 	ldbu	r2,0(r2)
   97b44:	10803fcc 	andi	r2,r2,255
   97b48:	1005003a 	cmpeq	r2,r2,zero
   97b4c:	1000061e 	bne	r2,zero,97b68 <OSMutexDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   97b50:	e0fffd17 	ldw	r3,-12(fp)
   97b54:	008003c4 	movi	r2,15
   97b58:	18800005 	stb	r2,0(r3)
        return (pevent);
   97b5c:	e0fffb17 	ldw	r3,-20(fp)
   97b60:	e0ffff15 	stw	r3,-4(fp)
   97b64:	0000a606 	br	97e00 <OSMutexDel+0x350>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   97b68:	0005303a 	rdctl	r2,status
   97b6c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   97b70:	e0fff517 	ldw	r3,-44(fp)
   97b74:	00bfff84 	movi	r2,-2
   97b78:	1884703a 	and	r2,r3,r2
   97b7c:	1001703a 	wrctl	status,r2
  
  return context;
   97b80:	e0bff517 	ldw	r2,-44(fp)
    }
    OS_ENTER_CRITICAL();
   97b84:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mutex        */
   97b88:	e0bffb17 	ldw	r2,-20(fp)
   97b8c:	10800283 	ldbu	r2,10(r2)
   97b90:	10803fcc 	andi	r2,r2,255
   97b94:	1005003a 	cmpeq	r2,r2,zero
   97b98:	1000031e 	bne	r2,zero,97ba8 <OSMutexDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   97b9c:	00800044 	movi	r2,1
   97ba0:	e0bffa05 	stb	r2,-24(fp)
   97ba4:	00000106 	br	97bac <OSMutexDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   97ba8:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
   97bac:	e0bffc03 	ldbu	r2,-16(fp)
   97bb0:	e0bffe15 	stw	r2,-8(fp)
   97bb4:	e0fffe17 	ldw	r3,-8(fp)
   97bb8:	1805003a 	cmpeq	r2,r3,zero
   97bbc:	1000041e 	bne	r2,zero,97bd0 <OSMutexDel+0x120>
   97bc0:	e0fffe17 	ldw	r3,-8(fp)
   97bc4:	18800060 	cmpeqi	r2,r3,1
   97bc8:	1000341e 	bne	r2,zero,97c9c <OSMutexDel+0x1ec>
   97bcc:	00008106 	br	97dd4 <OSMutexDel+0x324>
        case OS_DEL_NO_PEND:                               /* DELETE MUTEX ONLY IF NO TASK WAITING --- */
             if (tasks_waiting == OS_FALSE) {
   97bd0:	e0bffa03 	ldbu	r2,-24(fp)
   97bd4:	1004c03a 	cmpne	r2,r2,zero
   97bd8:	1000261e 	bne	r2,zero,97c74 <OSMutexDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   97bdc:	e0fffb17 	ldw	r3,-20(fp)
   97be0:	00800fc4 	movi	r2,63
   97be4:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   97be8:	e0bffb17 	ldw	r2,-20(fp)
   97bec:	100003c5 	stb	zero,15(r2)
#endif
                 pip                 = (INT8U)(pevent->OSEventCnt >> 8);
   97bf0:	e0bffb17 	ldw	r2,-20(fp)
   97bf4:	1080020b 	ldhu	r2,8(r2)
   97bf8:	10bfffcc 	andi	r2,r2,65535
   97bfc:	1004d23a 	srli	r2,r2,8
   97c00:	e0bff845 	stb	r2,-31(fp)
                 OSTCBPrioTbl[pip]   = (OS_TCB *)0;        /* Free up the PIP                          */
   97c04:	e0bff843 	ldbu	r2,-31(fp)
   97c08:	00c00334 	movhi	r3,12
   97c0c:	18e2b904 	addi	r3,r3,-29980
   97c10:	1085883a 	add	r2,r2,r2
   97c14:	1085883a 	add	r2,r2,r2
   97c18:	10c5883a 	add	r2,r2,r3
   97c1c:	10000015 	stw	zero,0(r2)
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
   97c20:	e0bffb17 	ldw	r2,-20(fp)
   97c24:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
   97c28:	008002b4 	movhi	r2,10
   97c2c:	108e5204 	addi	r2,r2,14664
   97c30:	10c00017 	ldw	r3,0(r2)
   97c34:	e0bffb17 	ldw	r2,-20(fp)
   97c38:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
   97c3c:	e0bffb17 	ldw	r2,-20(fp)
   97c40:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;
   97c44:	00c002b4 	movhi	r3,10
   97c48:	18ce5204 	addi	r3,r3,14664
   97c4c:	e0bffb17 	ldw	r2,-20(fp)
   97c50:	18800015 	stw	r2,0(r3)
   97c54:	e0bff617 	ldw	r2,-40(fp)
   97c58:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   97c5c:	e0bff417 	ldw	r2,-48(fp)
   97c60:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
   97c64:	e0bffd17 	ldw	r2,-12(fp)
   97c68:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
   97c6c:	e03ff915 	stw	zero,-28(fp)
   97c70:	00006106 	br	97df8 <OSMutexDel+0x348>
   97c74:	e0bff617 	ldw	r2,-40(fp)
   97c78:	e0bff315 	stw	r2,-52(fp)
   97c7c:	e0bff317 	ldw	r2,-52(fp)
   97c80:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
   97c84:	e0fffd17 	ldw	r3,-12(fp)
   97c88:	00801244 	movi	r2,73
   97c8c:	18800005 	stb	r2,0(r3)
                 pevent_return       = pevent;
   97c90:	e0bffb17 	ldw	r2,-20(fp)
   97c94:	e0bff915 	stw	r2,-28(fp)
             }
             break;
   97c98:	00005706 	br	97df8 <OSMutexDel+0x348>

        case OS_DEL_ALWAYS:                                /* ALWAYS DELETE THE MUTEX ---------------- */
             pip  = (INT8U)(pevent->OSEventCnt >> 8);                     /* Get PIP of mutex          */
   97c9c:	e0bffb17 	ldw	r2,-20(fp)
   97ca0:	1080020b 	ldhu	r2,8(r2)
   97ca4:	10bfffcc 	andi	r2,r2,65535
   97ca8:	1004d23a 	srli	r2,r2,8
   97cac:	e0bff845 	stb	r2,-31(fp)
             prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original prio */
   97cb0:	e0bffb17 	ldw	r2,-20(fp)
   97cb4:	1080020b 	ldhu	r2,8(r2)
   97cb8:	1007883a 	mov	r3,r2
   97cbc:	00bfffc4 	movi	r2,-1
   97cc0:	1884703a 	and	r2,r3,r2
   97cc4:	e0bff805 	stb	r2,-32(fp)
             ptcb = (OS_TCB *)pevent->OSEventPtr;
   97cc8:	e0bffb17 	ldw	r2,-20(fp)
   97ccc:	10800117 	ldw	r2,4(r2)
   97cd0:	e0bff715 	stw	r2,-36(fp)
             if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
   97cd4:	e0bff717 	ldw	r2,-36(fp)
   97cd8:	1005003a 	cmpeq	r2,r2,zero
   97cdc:	10000e1e 	bne	r2,zero,97d18 <OSMutexDel+0x268>
                 if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
   97ce0:	e0bff717 	ldw	r2,-36(fp)
   97ce4:	10800c83 	ldbu	r2,50(r2)
   97ce8:	10c03fcc 	andi	r3,r2,255
   97cec:	e0bff843 	ldbu	r2,-31(fp)
   97cf0:	1880091e 	bne	r3,r2,97d18 <OSMutexDel+0x268>
                     OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
   97cf4:	e17ff803 	ldbu	r5,-32(fp)
   97cf8:	e13ff717 	ldw	r4,-36(fp)
   97cfc:	00988b40 	call	988b4 <OSMutex_RdyAtPrio>
                 }
             }
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mutex        */
   97d00:	00000506 	br	97d18 <OSMutexDel+0x268>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
   97d04:	e13ffb17 	ldw	r4,-20(fp)
   97d08:	000b883a 	mov	r5,zero
   97d0c:	01800404 	movi	r6,16
   97d10:	000f883a 	mov	r7,zero
   97d14:	009364c0 	call	9364c <OS_EventTaskRdy>
             if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
                 if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
                     OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
                 }
             }
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mutex        */
   97d18:	e0bffb17 	ldw	r2,-20(fp)
   97d1c:	10800283 	ldbu	r2,10(r2)
   97d20:	10803fcc 	andi	r2,r2,255
   97d24:	1004c03a 	cmpne	r2,r2,zero
   97d28:	103ff61e 	bne	r2,zero,97d04 <OSMutexDel+0x254>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   97d2c:	e0fffb17 	ldw	r3,-20(fp)
   97d30:	00800fc4 	movi	r2,63
   97d34:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   97d38:	e0bffb17 	ldw	r2,-20(fp)
   97d3c:	100003c5 	stb	zero,15(r2)
#endif
             pip                 = (INT8U)(pevent->OSEventCnt >> 8);
   97d40:	e0bffb17 	ldw	r2,-20(fp)
   97d44:	1080020b 	ldhu	r2,8(r2)
   97d48:	10bfffcc 	andi	r2,r2,65535
   97d4c:	1004d23a 	srli	r2,r2,8
   97d50:	e0bff845 	stb	r2,-31(fp)
             OSTCBPrioTbl[pip]   = (OS_TCB *)0;            /* Free up the PIP                          */
   97d54:	e0bff843 	ldbu	r2,-31(fp)
   97d58:	00c00334 	movhi	r3,12
   97d5c:	18e2b904 	addi	r3,r3,-29980
   97d60:	1085883a 	add	r2,r2,r2
   97d64:	1085883a 	add	r2,r2,r2
   97d68:	10c5883a 	add	r2,r2,r3
   97d6c:	10000015 	stw	zero,0(r2)
             pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
   97d70:	e0bffb17 	ldw	r2,-20(fp)
   97d74:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr  = OSEventFreeList;        /* Return Event Control Block to free list  */
   97d78:	008002b4 	movhi	r2,10
   97d7c:	108e5204 	addi	r2,r2,14664
   97d80:	10c00017 	ldw	r3,0(r2)
   97d84:	e0bffb17 	ldw	r2,-20(fp)
   97d88:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt  = 0;
   97d8c:	e0bffb17 	ldw	r2,-20(fp)
   97d90:	1000020d 	sth	zero,8(r2)
             OSEventFreeList     = pevent;                 /* Get next free event control block        */
   97d94:	00c002b4 	movhi	r3,10
   97d98:	18ce5204 	addi	r3,r3,14664
   97d9c:	e0bffb17 	ldw	r2,-20(fp)
   97da0:	18800015 	stw	r2,0(r3)
   97da4:	e0bff617 	ldw	r2,-40(fp)
   97da8:	e0bff215 	stw	r2,-56(fp)
   97dac:	e0bff217 	ldw	r2,-56(fp)
   97db0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   97db4:	e0bffa03 	ldbu	r2,-24(fp)
   97db8:	10800058 	cmpnei	r2,r2,1
   97dbc:	1000011e 	bne	r2,zero,97dc4 <OSMutexDel+0x314>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   97dc0:	009408c0 	call	9408c <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
   97dc4:	e0bffd17 	ldw	r2,-12(fp)
   97dc8:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mutex has been deleted                   */
   97dcc:	e03ff915 	stw	zero,-28(fp)
             break;
   97dd0:	00000906 	br	97df8 <OSMutexDel+0x348>
   97dd4:	e0bff617 	ldw	r2,-40(fp)
   97dd8:	e0bff115 	stw	r2,-60(fp)
   97ddc:	e0bff117 	ldw	r2,-60(fp)
   97de0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
   97de4:	e0fffd17 	ldw	r3,-12(fp)
   97de8:	008001c4 	movi	r2,7
   97dec:	18800005 	stb	r2,0(r3)
             pevent_return = pevent;
   97df0:	e0bffb17 	ldw	r2,-20(fp)
   97df4:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
   97df8:	e0bff917 	ldw	r2,-28(fp)
   97dfc:	e0bfff15 	stw	r2,-4(fp)
   97e00:	e0bfff17 	ldw	r2,-4(fp)
}
   97e04:	e037883a 	mov	sp,fp
   97e08:	dfc00117 	ldw	ra,4(sp)
   97e0c:	df000017 	ldw	fp,0(sp)
   97e10:	dec00204 	addi	sp,sp,8
   97e14:	f800283a 	ret

00097e18 <OSMutexPend>:
*              2) You MUST NOT change the priority of the task that owns the mutex
*********************************************************************************************************
*/

void  OSMutexPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   97e18:	deffef04 	addi	sp,sp,-68
   97e1c:	dfc01015 	stw	ra,64(sp)
   97e20:	df000f15 	stw	fp,60(sp)
   97e24:	df000f04 	addi	fp,sp,60
   97e28:	e13ffc15 	stw	r4,-16(fp)
   97e2c:	e1bffe15 	stw	r6,-8(fp)
   97e30:	e17ffd0d 	sth	r5,-12(fp)
    BOOLEAN    rdy;                                        /* Flag indicating task was ready           */
    OS_TCB    *ptcb;
    OS_EVENT  *pevent2;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   97e34:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   97e38:	e0bffe17 	ldw	r2,-8(fp)
   97e3c:	1005003a 	cmpeq	r2,r2,zero
   97e40:	1001941e 	bne	r2,zero,98494 <OSMutexPend+0x67c>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   97e44:	e0bffc17 	ldw	r2,-16(fp)
   97e48:	1004c03a 	cmpne	r2,r2,zero
   97e4c:	1000041e 	bne	r2,zero,97e60 <OSMutexPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   97e50:	e0fffe17 	ldw	r3,-8(fp)
   97e54:	00800104 	movi	r2,4
   97e58:	18800005 	stb	r2,0(r3)
        return;
   97e5c:	00018d06 	br	98494 <OSMutexPend+0x67c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
   97e60:	e0bffc17 	ldw	r2,-16(fp)
   97e64:	10800003 	ldbu	r2,0(r2)
   97e68:	10803fcc 	andi	r2,r2,255
   97e6c:	10800120 	cmpeqi	r2,r2,4
   97e70:	1000041e 	bne	r2,zero,97e84 <OSMutexPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   97e74:	e0fffe17 	ldw	r3,-8(fp)
   97e78:	00800044 	movi	r2,1
   97e7c:	18800005 	stb	r2,0(r3)
        return;
   97e80:	00018406 	br	98494 <OSMutexPend+0x67c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   97e84:	008002b4 	movhi	r2,10
   97e88:	108e5304 	addi	r2,r2,14668
   97e8c:	10800003 	ldbu	r2,0(r2)
   97e90:	10803fcc 	andi	r2,r2,255
   97e94:	1005003a 	cmpeq	r2,r2,zero
   97e98:	1000041e 	bne	r2,zero,97eac <OSMutexPend+0x94>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   97e9c:	e0fffe17 	ldw	r3,-8(fp)
   97ea0:	00800084 	movi	r2,2
   97ea4:	18800005 	stb	r2,0(r3)
        return;
   97ea8:	00017a06 	br	98494 <OSMutexPend+0x67c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   97eac:	008002b4 	movhi	r2,10
   97eb0:	108e4504 	addi	r2,r2,14612
   97eb4:	10800003 	ldbu	r2,0(r2)
   97eb8:	10803fcc 	andi	r2,r2,255
   97ebc:	1005003a 	cmpeq	r2,r2,zero
   97ec0:	1000041e 	bne	r2,zero,97ed4 <OSMutexPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   97ec4:	e0fffe17 	ldw	r3,-8(fp)
   97ec8:	00800344 	movi	r2,13
   97ecc:	18800005 	stb	r2,0(r3)
        return;
   97ed0:	00017006 	br	98494 <OSMutexPend+0x67c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   97ed4:	0005303a 	rdctl	r2,status
   97ed8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   97edc:	e0fff617 	ldw	r3,-40(fp)
   97ee0:	00bfff84 	movi	r2,-2
   97ee4:	1884703a 	and	r2,r3,r2
   97ee8:	1001703a 	wrctl	status,r2
  
  return context;
   97eec:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   97ef0:	e0bff715 	stw	r2,-36(fp)
    pip = (INT8U)(pevent->OSEventCnt >> 8);                /* Get PIP from mutex                       */
   97ef4:	e0bffc17 	ldw	r2,-16(fp)
   97ef8:	1080020b 	ldhu	r2,8(r2)
   97efc:	10bfffcc 	andi	r2,r2,65535
   97f00:	1004d23a 	srli	r2,r2,8
   97f04:	e0bffb85 	stb	r2,-18(fp)
                                                           /* Is Mutex available?                      */
    if ((INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
   97f08:	e0bffc17 	ldw	r2,-16(fp)
   97f0c:	1080020b 	ldhu	r2,8(r2)
   97f10:	10803fcc 	andi	r2,r2,255
   97f14:	1080201c 	xori	r2,r2,128
   97f18:	10bfe004 	addi	r2,r2,-128
   97f1c:	10bfffd8 	cmpnei	r2,r2,-1
   97f20:	10002d1e 	bne	r2,zero,97fd8 <OSMutexPend+0x1c0>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;       /* Yes, Acquire the resource                */
   97f24:	e0bffc17 	ldw	r2,-16(fp)
   97f28:	10c0020b 	ldhu	r3,8(r2)
   97f2c:	00bfc004 	movi	r2,-256
   97f30:	1884703a 	and	r2,r3,r2
   97f34:	1007883a 	mov	r3,r2
   97f38:	e0bffc17 	ldw	r2,-16(fp)
   97f3c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;         /*      Save priority of owning task        */
   97f40:	e0bffc17 	ldw	r2,-16(fp)
   97f44:	10c0020b 	ldhu	r3,8(r2)
   97f48:	008002b4 	movhi	r2,10
   97f4c:	108e5404 	addi	r2,r2,14672
   97f50:	10800017 	ldw	r2,0(r2)
   97f54:	10800c83 	ldbu	r2,50(r2)
   97f58:	10803fcc 	andi	r2,r2,255
   97f5c:	1884b03a 	or	r2,r3,r2
   97f60:	1007883a 	mov	r3,r2
   97f64:	e0bffc17 	ldw	r2,-16(fp)
   97f68:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = (void *)OSTCBCur;            /*      Point to owning task's OS_TCB       */
   97f6c:	008002b4 	movhi	r2,10
   97f70:	108e5404 	addi	r2,r2,14672
   97f74:	10c00017 	ldw	r3,0(r2)
   97f78:	e0bffc17 	ldw	r2,-16(fp)
   97f7c:	10c00115 	stw	r3,4(r2)
        if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
   97f80:	008002b4 	movhi	r2,10
   97f84:	108e5404 	addi	r2,r2,14672
   97f88:	10800017 	ldw	r2,0(r2)
   97f8c:	10800c83 	ldbu	r2,50(r2)
   97f90:	10c03fcc 	andi	r3,r2,255
   97f94:	e0bffb83 	ldbu	r2,-18(fp)
   97f98:	10c00836 	bltu	r2,r3,97fbc <OSMutexPend+0x1a4>
   97f9c:	e0bff717 	ldw	r2,-36(fp)
   97fa0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   97fa4:	e0bff517 	ldw	r2,-44(fp)
   97fa8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                            /*      ... than current task!              */
            *perr = OS_ERR_PIP_LOWER;
   97fac:	e0fffe17 	ldw	r3,-8(fp)
   97fb0:	00801e04 	movi	r2,120
   97fb4:	18800005 	stb	r2,0(r3)
   97fb8:	00013606 	br	98494 <OSMutexPend+0x67c>
   97fbc:	e0bff717 	ldw	r2,-36(fp)
   97fc0:	e0bff415 	stw	r2,-48(fp)
   97fc4:	e0bff417 	ldw	r2,-48(fp)
   97fc8:	1001703a 	wrctl	status,r2
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
   97fcc:	e0bffe17 	ldw	r2,-8(fp)
   97fd0:	10000005 	stb	zero,0(r2)
        }
        return;
   97fd4:	00012f06 	br	98494 <OSMutexPend+0x67c>
    }
    mprio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* No, Get priority of mutex owner   */
   97fd8:	e0bffc17 	ldw	r2,-16(fp)
   97fdc:	1080020b 	ldhu	r2,8(r2)
   97fe0:	1007883a 	mov	r3,r2
   97fe4:	00bfffc4 	movi	r2,-1
   97fe8:	1884703a 	and	r2,r3,r2
   97fec:	e0bffb45 	stb	r2,-19(fp)
    ptcb  = (OS_TCB *)(pevent->OSEventPtr);                       /*     Point to TCB of mutex owner   */
   97ff0:	e0bffc17 	ldw	r2,-16(fp)
   97ff4:	10800117 	ldw	r2,4(r2)
   97ff8:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb->OSTCBPrio > pip) {                                  /*     Need to promote prio of owner?*/
   97ffc:	e0bffa17 	ldw	r2,-24(fp)
   98000:	10800c83 	ldbu	r2,50(r2)
   98004:	10c03fcc 	andi	r3,r2,255
   98008:	e0bffb83 	ldbu	r2,-18(fp)
   9800c:	10c0d02e 	bgeu	r2,r3,98350 <OSMutexPend+0x538>
        if (mprio > OSTCBCur->OSTCBPrio) {
   98010:	008002b4 	movhi	r2,10
   98014:	108e5404 	addi	r2,r2,14672
   98018:	10800017 	ldw	r2,0(r2)
   9801c:	10800c83 	ldbu	r2,50(r2)
   98020:	10c03fcc 	andi	r3,r2,255
   98024:	e0bffb43 	ldbu	r2,-19(fp)
   98028:	1880c92e 	bgeu	r3,r2,98350 <OSMutexPend+0x538>
            y = ptcb->OSTCBY;
   9802c:	e0bffa17 	ldw	r2,-24(fp)
   98030:	10800d03 	ldbu	r2,52(r2)
   98034:	e0bff805 	stb	r2,-32(fp)
            if ((OSRdyTbl[y] & ptcb->OSTCBBitX) != 0) {           /*     See if mutex owner is ready   */
   98038:	e0fff803 	ldbu	r3,-32(fp)
   9803c:	008002b4 	movhi	r2,10
   98040:	108e5144 	addi	r2,r2,14661
   98044:	10c5883a 	add	r2,r2,r3
   98048:	10c00003 	ldbu	r3,0(r2)
   9804c:	e0bffa17 	ldw	r2,-24(fp)
   98050:	10800d43 	ldbu	r2,53(r2)
   98054:	1884703a 	and	r2,r3,r2
   98058:	10803fcc 	andi	r2,r2,255
   9805c:	1005003a 	cmpeq	r2,r2,zero
   98060:	1000271e 	bne	r2,zero,98100 <OSMutexPend+0x2e8>
                OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                  /*     Yes, Remove owner from Rdy ...*/
   98064:	e13ff803 	ldbu	r4,-32(fp)
   98068:	e0fff803 	ldbu	r3,-32(fp)
   9806c:	008002b4 	movhi	r2,10
   98070:	108e5144 	addi	r2,r2,14661
   98074:	10c5883a 	add	r2,r2,r3
   98078:	10800003 	ldbu	r2,0(r2)
   9807c:	1007883a 	mov	r3,r2
   98080:	e0bffa17 	ldw	r2,-24(fp)
   98084:	10800d43 	ldbu	r2,53(r2)
   98088:	0084303a 	nor	r2,zero,r2
   9808c:	1884703a 	and	r2,r3,r2
   98090:	1007883a 	mov	r3,r2
   98094:	008002b4 	movhi	r2,10
   98098:	108e5144 	addi	r2,r2,14661
   9809c:	1105883a 	add	r2,r2,r4
   980a0:	10c00005 	stb	r3,0(r2)
                if (OSRdyTbl[y] == 0) {                           /*          ... list at current prio */
   980a4:	e0fff803 	ldbu	r3,-32(fp)
   980a8:	008002b4 	movhi	r2,10
   980ac:	108e5144 	addi	r2,r2,14661
   980b0:	10c5883a 	add	r2,r2,r3
   980b4:	10800003 	ldbu	r2,0(r2)
   980b8:	10803fcc 	andi	r2,r2,255
   980bc:	1004c03a 	cmpne	r2,r2,zero
   980c0:	10000c1e 	bne	r2,zero,980f4 <OSMutexPend+0x2dc>
                    OSRdyGrp &= ~ptcb->OSTCBBitY;
   980c4:	e0bffa17 	ldw	r2,-24(fp)
   980c8:	10800d83 	ldbu	r2,54(r2)
   980cc:	0084303a 	nor	r2,zero,r2
   980d0:	1007883a 	mov	r3,r2
   980d4:	008002b4 	movhi	r2,10
   980d8:	108e5104 	addi	r2,r2,14660
   980dc:	10800003 	ldbu	r2,0(r2)
   980e0:	1884703a 	and	r2,r3,r2
   980e4:	1007883a 	mov	r3,r2
   980e8:	008002b4 	movhi	r2,10
   980ec:	108e5104 	addi	r2,r2,14660
   980f0:	10c00005 	stb	r3,0(r2)
                }
                rdy = OS_TRUE;
   980f4:	00800044 	movi	r2,1
   980f8:	e0bffb05 	stb	r2,-20(fp)
   980fc:	00002c06 	br	981b0 <OSMutexPend+0x398>
            } else {
                pevent2 = ptcb->OSTCBEventPtr;
   98100:	e0bffa17 	ldw	r2,-24(fp)
   98104:	10800717 	ldw	r2,28(r2)
   98108:	e0bff915 	stw	r2,-28(fp)
                if (pevent2 != (OS_EVENT *)0) {                   /* Remove from event wait list       */
   9810c:	e0bff917 	ldw	r2,-28(fp)
   98110:	1005003a 	cmpeq	r2,r2,zero
   98114:	1000251e 	bne	r2,zero,981ac <OSMutexPend+0x394>
                    if ((pevent2->OSEventTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX) == 0) {
   98118:	e0bffa17 	ldw	r2,-24(fp)
   9811c:	10800d03 	ldbu	r2,52(r2)
   98120:	11003fcc 	andi	r4,r2,255
   98124:	e0bffa17 	ldw	r2,-24(fp)
   98128:	10800d03 	ldbu	r2,52(r2)
   9812c:	10c03fcc 	andi	r3,r2,255
   98130:	e0bff917 	ldw	r2,-28(fp)
   98134:	1885883a 	add	r2,r3,r2
   98138:	10800204 	addi	r2,r2,8
   9813c:	108000c3 	ldbu	r2,3(r2)
   98140:	1007883a 	mov	r3,r2
   98144:	e0bffa17 	ldw	r2,-24(fp)
   98148:	10800d43 	ldbu	r2,53(r2)
   9814c:	0084303a 	nor	r2,zero,r2
   98150:	1884703a 	and	r2,r3,r2
   98154:	1007883a 	mov	r3,r2
   98158:	e0bff917 	ldw	r2,-28(fp)
   9815c:	2085883a 	add	r2,r4,r2
   98160:	10800204 	addi	r2,r2,8
   98164:	10c000c5 	stb	r3,3(r2)
   98168:	e0bff917 	ldw	r2,-28(fp)
   9816c:	2085883a 	add	r2,r4,r2
   98170:	10800204 	addi	r2,r2,8
   98174:	108000c3 	ldbu	r2,3(r2)
   98178:	10803fcc 	andi	r2,r2,255
   9817c:	1004c03a 	cmpne	r2,r2,zero
   98180:	10000a1e 	bne	r2,zero,981ac <OSMutexPend+0x394>
                        pevent2->OSEventGrp &= ~ptcb->OSTCBBitY;
   98184:	e0bff917 	ldw	r2,-28(fp)
   98188:	10800283 	ldbu	r2,10(r2)
   9818c:	1007883a 	mov	r3,r2
   98190:	e0bffa17 	ldw	r2,-24(fp)
   98194:	10800d83 	ldbu	r2,54(r2)
   98198:	0084303a 	nor	r2,zero,r2
   9819c:	1884703a 	and	r2,r3,r2
   981a0:	1007883a 	mov	r3,r2
   981a4:	e0bff917 	ldw	r2,-28(fp)
   981a8:	10c00285 	stb	r3,10(r2)
                    }
                }
                rdy = OS_FALSE;                            /* No                                       */
   981ac:	e03ffb05 	stb	zero,-20(fp)
            }
            ptcb->OSTCBPrio = pip;                         /* Change owner task prio to PIP            */
   981b0:	e0fffa17 	ldw	r3,-24(fp)
   981b4:	e0bffb83 	ldbu	r2,-18(fp)
   981b8:	18800c85 	stb	r2,50(r3)
#if OS_LOWEST_PRIO <= 63
            ptcb->OSTCBY    = (INT8U)( ptcb->OSTCBPrio >> 3);
   981bc:	e0bffa17 	ldw	r2,-24(fp)
   981c0:	10800c83 	ldbu	r2,50(r2)
   981c4:	10803fcc 	andi	r2,r2,255
   981c8:	1004d0fa 	srli	r2,r2,3
   981cc:	1007883a 	mov	r3,r2
   981d0:	e0bffa17 	ldw	r2,-24(fp)
   981d4:	10c00d05 	stb	r3,52(r2)
            ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x07);
   981d8:	e0bffa17 	ldw	r2,-24(fp)
   981dc:	10800c83 	ldbu	r2,50(r2)
   981e0:	108001cc 	andi	r2,r2,7
   981e4:	1007883a 	mov	r3,r2
   981e8:	e0bffa17 	ldw	r2,-24(fp)
   981ec:	10c00cc5 	stb	r3,51(r2)
            ptcb->OSTCBBitY = (INT8U)(1 << ptcb->OSTCBY);
   981f0:	e0bffa17 	ldw	r2,-24(fp)
   981f4:	10800d03 	ldbu	r2,52(r2)
   981f8:	10c03fcc 	andi	r3,r2,255
   981fc:	00800044 	movi	r2,1
   98200:	10c4983a 	sll	r2,r2,r3
   98204:	1007883a 	mov	r3,r2
   98208:	e0bffa17 	ldw	r2,-24(fp)
   9820c:	10c00d85 	stb	r3,54(r2)
            ptcb->OSTCBBitX = (INT8U)(1 << ptcb->OSTCBX);
   98210:	e0bffa17 	ldw	r2,-24(fp)
   98214:	10800cc3 	ldbu	r2,51(r2)
   98218:	10c03fcc 	andi	r3,r2,255
   9821c:	00800044 	movi	r2,1
   98220:	10c4983a 	sll	r2,r2,r3
   98224:	1007883a 	mov	r3,r2
   98228:	e0bffa17 	ldw	r2,-24(fp)
   9822c:	10c00d45 	stb	r3,53(r2)
            ptcb->OSTCBY    = (INT8U)((ptcb->OSTCBPrio >> 4) & 0xFF);
            ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x0F);
            ptcb->OSTCBBitY = (INT16U)(1 << ptcb->OSTCBY);
            ptcb->OSTCBBitX = (INT16U)(1 << ptcb->OSTCBX);
#endif
            if (rdy == OS_TRUE) {                          /* If task was ready at owner's priority ...*/
   98230:	e0bffb03 	ldbu	r2,-20(fp)
   98234:	10800058 	cmpnei	r2,r2,1
   98238:	10001d1e 	bne	r2,zero,982b0 <OSMutexPend+0x498>
                OSRdyGrp               |= ptcb->OSTCBBitY; /* ... make it ready at new priority.       */
   9823c:	e0bffa17 	ldw	r2,-24(fp)
   98240:	10c00d83 	ldbu	r3,54(r2)
   98244:	008002b4 	movhi	r2,10
   98248:	108e5104 	addi	r2,r2,14660
   9824c:	10800003 	ldbu	r2,0(r2)
   98250:	1884b03a 	or	r2,r3,r2
   98254:	1007883a 	mov	r3,r2
   98258:	008002b4 	movhi	r2,10
   9825c:	108e5104 	addi	r2,r2,14660
   98260:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   98264:	e0bffa17 	ldw	r2,-24(fp)
   98268:	10800d03 	ldbu	r2,52(r2)
   9826c:	11003fcc 	andi	r4,r2,255
   98270:	e0bffa17 	ldw	r2,-24(fp)
   98274:	10800d03 	ldbu	r2,52(r2)
   98278:	10c03fcc 	andi	r3,r2,255
   9827c:	008002b4 	movhi	r2,10
   98280:	108e5144 	addi	r2,r2,14661
   98284:	10c5883a 	add	r2,r2,r3
   98288:	10c00003 	ldbu	r3,0(r2)
   9828c:	e0bffa17 	ldw	r2,-24(fp)
   98290:	10800d43 	ldbu	r2,53(r2)
   98294:	1884b03a 	or	r2,r3,r2
   98298:	1007883a 	mov	r3,r2
   9829c:	008002b4 	movhi	r2,10
   982a0:	108e5144 	addi	r2,r2,14661
   982a4:	1105883a 	add	r2,r2,r4
   982a8:	10c00005 	stb	r3,0(r2)
   982ac:	00002006 	br	98330 <OSMutexPend+0x518>
            } else {
                pevent2 = ptcb->OSTCBEventPtr;
   982b0:	e0bffa17 	ldw	r2,-24(fp)
   982b4:	10800717 	ldw	r2,28(r2)
   982b8:	e0bff915 	stw	r2,-28(fp)
                if (pevent2 != (OS_EVENT *)0) {            /* Add to event wait list                   */
   982bc:	e0bff917 	ldw	r2,-28(fp)
   982c0:	1005003a 	cmpeq	r2,r2,zero
   982c4:	10001a1e 	bne	r2,zero,98330 <OSMutexPend+0x518>
                    pevent2->OSEventGrp               |= ptcb->OSTCBBitY;
   982c8:	e0bff917 	ldw	r2,-28(fp)
   982cc:	10c00283 	ldbu	r3,10(r2)
   982d0:	e0bffa17 	ldw	r2,-24(fp)
   982d4:	10800d83 	ldbu	r2,54(r2)
   982d8:	1884b03a 	or	r2,r3,r2
   982dc:	1007883a 	mov	r3,r2
   982e0:	e0bff917 	ldw	r2,-28(fp)
   982e4:	10c00285 	stb	r3,10(r2)
                    pevent2->OSEventTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   982e8:	e0bffa17 	ldw	r2,-24(fp)
   982ec:	10800d03 	ldbu	r2,52(r2)
   982f0:	11003fcc 	andi	r4,r2,255
   982f4:	e0bffa17 	ldw	r2,-24(fp)
   982f8:	10800d03 	ldbu	r2,52(r2)
   982fc:	10c03fcc 	andi	r3,r2,255
   98300:	e0bff917 	ldw	r2,-28(fp)
   98304:	1885883a 	add	r2,r3,r2
   98308:	10800204 	addi	r2,r2,8
   9830c:	10c000c3 	ldbu	r3,3(r2)
   98310:	e0bffa17 	ldw	r2,-24(fp)
   98314:	10800d43 	ldbu	r2,53(r2)
   98318:	1884b03a 	or	r2,r3,r2
   9831c:	1007883a 	mov	r3,r2
   98320:	e0bff917 	ldw	r2,-28(fp)
   98324:	2085883a 	add	r2,r4,r2
   98328:	10800204 	addi	r2,r2,8
   9832c:	10c000c5 	stb	r3,3(r2)
                }
            }
            OSTCBPrioTbl[pip] = ptcb;
   98330:	e0bffb83 	ldbu	r2,-18(fp)
   98334:	00c00334 	movhi	r3,12
   98338:	18e2b904 	addi	r3,r3,-29980
   9833c:	1085883a 	add	r2,r2,r2
   98340:	1085883a 	add	r2,r2,r2
   98344:	10c7883a 	add	r3,r2,r3
   98348:	e0bffa17 	ldw	r2,-24(fp)
   9834c:	18800015 	stw	r2,0(r3)
        }
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MUTEX;         /* Mutex not available, pend current task        */
   98350:	008002b4 	movhi	r2,10
   98354:	108e5404 	addi	r2,r2,14672
   98358:	10c00017 	ldw	r3,0(r2)
   9835c:	008002b4 	movhi	r2,10
   98360:	108e5404 	addi	r2,r2,14672
   98364:	10800017 	ldw	r2,0(r2)
   98368:	10800c03 	ldbu	r2,48(r2)
   9836c:	10800414 	ori	r2,r2,16
   98370:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   98374:	008002b4 	movhi	r2,10
   98378:	108e5404 	addi	r2,r2,14672
   9837c:	10800017 	ldw	r2,0(r2)
   98380:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store timeout in current task's TCB           */
   98384:	008002b4 	movhi	r2,10
   98388:	108e5404 	addi	r2,r2,14672
   9838c:	10c00017 	ldw	r3,0(r2)
   98390:	e0bffd0b 	ldhu	r2,-12(fp)
   98394:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   98398:	e13ffc17 	ldw	r4,-16(fp)
   9839c:	00937e00 	call	937e0 <OS_EventTaskWait>
   983a0:	e0bff717 	ldw	r2,-36(fp)
   983a4:	e0bff315 	stw	r2,-52(fp)
   983a8:	e0bff317 	ldw	r2,-52(fp)
   983ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   983b0:	009408c0 	call	9408c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   983b4:	0005303a 	rdctl	r2,status
   983b8:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   983bc:	e0fff217 	ldw	r3,-56(fp)
   983c0:	00bfff84 	movi	r2,-2
   983c4:	1884703a 	and	r2,r3,r2
   983c8:	1001703a 	wrctl	status,r2
  
  return context;
   983cc:	e0bff217 	ldw	r2,-56(fp)
    OS_ENTER_CRITICAL();
   983d0:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   983d4:	008002b4 	movhi	r2,10
   983d8:	108e5404 	addi	r2,r2,14672
   983dc:	10800017 	ldw	r2,0(r2)
   983e0:	10800c43 	ldbu	r2,49(r2)
   983e4:	10803fcc 	andi	r2,r2,255
   983e8:	e0bfff15 	stw	r2,-4(fp)
   983ec:	e0ffff17 	ldw	r3,-4(fp)
   983f0:	1805003a 	cmpeq	r2,r3,zero
   983f4:	1000041e 	bne	r2,zero,98408 <OSMutexPend+0x5f0>
   983f8:	e0ffff17 	ldw	r3,-4(fp)
   983fc:	188000a0 	cmpeqi	r2,r3,2
   98400:	1000041e 	bne	r2,zero,98414 <OSMutexPend+0x5fc>
   98404:	00000706 	br	98424 <OSMutexPend+0x60c>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   98408:	e0bffe17 	ldw	r2,-8(fp)
   9840c:	10000005 	stb	zero,0(r2)
             break;
   98410:	00000c06 	br	98444 <OSMutexPend+0x62c>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted getting mutex        */
   98414:	e0fffe17 	ldw	r3,-8(fp)
   98418:	00800384 	movi	r2,14
   9841c:	18800005 	stb	r2,0(r3)
             break;
   98420:	00000806 	br	98444 <OSMutexPend+0x62c>
             
        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   98424:	008002b4 	movhi	r2,10
   98428:	108e5404 	addi	r2,r2,14672
   9842c:	11000017 	ldw	r4,0(r2)
   98430:	e17ffc17 	ldw	r5,-16(fp)
   98434:	0093a440 	call	93a44 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get mutex within TO   */
   98438:	e0fffe17 	ldw	r3,-8(fp)
   9843c:	00800284 	movi	r2,10
   98440:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   98444:	008002b4 	movhi	r2,10
   98448:	108e5404 	addi	r2,r2,14672
   9844c:	10800017 	ldw	r2,0(r2)
   98450:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   98454:	008002b4 	movhi	r2,10
   98458:	108e5404 	addi	r2,r2,14672
   9845c:	10800017 	ldw	r2,0(r2)
   98460:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   98464:	008002b4 	movhi	r2,10
   98468:	108e5404 	addi	r2,r2,14672
   9846c:	10800017 	ldw	r2,0(r2)
   98470:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   98474:	008002b4 	movhi	r2,10
   98478:	108e5404 	addi	r2,r2,14672
   9847c:	10800017 	ldw	r2,0(r2)
   98480:	10000815 	stw	zero,32(r2)
   98484:	e0bff717 	ldw	r2,-36(fp)
   98488:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9848c:	e0bff117 	ldw	r2,-60(fp)
   98490:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   98494:	e037883a 	mov	sp,fp
   98498:	dfc00117 	ldw	ra,4(sp)
   9849c:	df000017 	ldw	fp,0(sp)
   984a0:	dec00204 	addi	sp,sp,8
   984a4:	f800283a 	ret

000984a8 <OSMutexPost>:
*                                      what tasks will be using the Mutex.
*********************************************************************************************************
*/

INT8U  OSMutexPost (OS_EVENT *pevent)
{
   984a8:	defff504 	addi	sp,sp,-44
   984ac:	dfc00a15 	stw	ra,40(sp)
   984b0:	df000915 	stw	fp,36(sp)
   984b4:	df000904 	addi	fp,sp,36
   984b8:	e13ffe15 	stw	r4,-8(fp)
    INT8U      pip;                                   /* Priority inheritance priority                 */
    INT8U      prio;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   984bc:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   984c0:	008002b4 	movhi	r2,10
   984c4:	108e5304 	addi	r2,r2,14668
   984c8:	10800003 	ldbu	r2,0(r2)
   984cc:	10803fcc 	andi	r2,r2,255
   984d0:	1005003a 	cmpeq	r2,r2,zero
   984d4:	1000031e 	bne	r2,zero,984e4 <OSMutexPost+0x3c>
        return (OS_ERR_POST_ISR);                     /* ... can't POST mutex from an ISR              */
   984d8:	00800144 	movi	r2,5
   984dc:	e0bfff15 	stw	r2,-4(fp)
   984e0:	00008406 	br	986f4 <OSMutexPost+0x24c>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   984e4:	e0bffe17 	ldw	r2,-8(fp)
   984e8:	1004c03a 	cmpne	r2,r2,zero
   984ec:	1000031e 	bne	r2,zero,984fc <OSMutexPost+0x54>
        return (OS_ERR_PEVENT_NULL);
   984f0:	00800104 	movi	r2,4
   984f4:	e0bfff15 	stw	r2,-4(fp)
   984f8:	00007e06 	br	986f4 <OSMutexPost+0x24c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) { /* Validate event block type                     */
   984fc:	e0bffe17 	ldw	r2,-8(fp)
   98500:	10800003 	ldbu	r2,0(r2)
   98504:	10803fcc 	andi	r2,r2,255
   98508:	10800120 	cmpeqi	r2,r2,4
   9850c:	1000031e 	bne	r2,zero,9851c <OSMutexPost+0x74>
        return (OS_ERR_EVENT_TYPE);
   98510:	00800044 	movi	r2,1
   98514:	e0bfff15 	stw	r2,-4(fp)
   98518:	00007606 	br	986f4 <OSMutexPost+0x24c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9851c:	0005303a 	rdctl	r2,status
   98520:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   98524:	e0fffb17 	ldw	r3,-20(fp)
   98528:	00bfff84 	movi	r2,-2
   9852c:	1884703a 	and	r2,r3,r2
   98530:	1001703a 	wrctl	status,r2
  
  return context;
   98534:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   98538:	e0bffc15 	stw	r2,-16(fp)
    pip  = (INT8U)(pevent->OSEventCnt >> 8);          /* Get priority inheritance priority of mutex    */
   9853c:	e0bffe17 	ldw	r2,-8(fp)
   98540:	1080020b 	ldhu	r2,8(r2)
   98544:	10bfffcc 	andi	r2,r2,65535
   98548:	1004d23a 	srli	r2,r2,8
   9854c:	e0bffd45 	stb	r2,-11(fp)
    prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original priority      */
   98550:	e0bffe17 	ldw	r2,-8(fp)
   98554:	1080020b 	ldhu	r2,8(r2)
   98558:	1007883a 	mov	r3,r2
   9855c:	00bfffc4 	movi	r2,-1
   98560:	1884703a 	and	r2,r3,r2
   98564:	e0bffd05 	stb	r2,-12(fp)
    if (OSTCBCur != (OS_TCB *)pevent->OSEventPtr) {   /* See if posting task owns the MUTEX            */
   98568:	e0bffe17 	ldw	r2,-8(fp)
   9856c:	10800117 	ldw	r2,4(r2)
   98570:	1007883a 	mov	r3,r2
   98574:	008002b4 	movhi	r2,10
   98578:	108e5404 	addi	r2,r2,14672
   9857c:	10800017 	ldw	r2,0(r2)
   98580:	18800726 	beq	r3,r2,985a0 <OSMutexPost+0xf8>
   98584:	e0bffc17 	ldw	r2,-16(fp)
   98588:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9858c:	e0bffa17 	ldw	r2,-24(fp)
   98590:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NOT_MUTEX_OWNER);
   98594:	00801904 	movi	r2,100
   98598:	e0bfff15 	stw	r2,-4(fp)
   9859c:	00005506 	br	986f4 <OSMutexPost+0x24c>
    }
    if (OSTCBCur->OSTCBPrio == pip) {                 /* Did we have to raise current task's priority? */
   985a0:	008002b4 	movhi	r2,10
   985a4:	108e5404 	addi	r2,r2,14672
   985a8:	10800017 	ldw	r2,0(r2)
   985ac:	10800c83 	ldbu	r2,50(r2)
   985b0:	10c03fcc 	andi	r3,r2,255
   985b4:	e0bffd43 	ldbu	r2,-11(fp)
   985b8:	1880051e 	bne	r3,r2,985d0 <OSMutexPost+0x128>
        OSMutex_RdyAtPrio(OSTCBCur, prio);            /* Restore the task's original priority          */
   985bc:	008002b4 	movhi	r2,10
   985c0:	108e5404 	addi	r2,r2,14672
   985c4:	11000017 	ldw	r4,0(r2)
   985c8:	e17ffd03 	ldbu	r5,-12(fp)
   985cc:	00988b40 	call	988b4 <OSMutex_RdyAtPrio>
    }
    OSTCBPrioTbl[pip] = OS_TCB_RESERVED;              /* Reserve table entry                           */
   985d0:	e0bffd43 	ldbu	r2,-11(fp)
   985d4:	00c00334 	movhi	r3,12
   985d8:	18e2b904 	addi	r3,r3,-29980
   985dc:	1085883a 	add	r2,r2,r2
   985e0:	1085883a 	add	r2,r2,r2
   985e4:	10c7883a 	add	r3,r2,r3
   985e8:	00800044 	movi	r2,1
   985ec:	18800015 	stw	r2,0(r3)
    if (pevent->OSEventGrp != 0) {                    /* Any task waiting for the mutex?               */
   985f0:	e0bffe17 	ldw	r2,-8(fp)
   985f4:	10800283 	ldbu	r2,10(r2)
   985f8:	10803fcc 	andi	r2,r2,255
   985fc:	1005003a 	cmpeq	r2,r2,zero
   98600:	10002f1e 	bne	r2,zero,986c0 <OSMutexPost+0x218>
                                                      /* Yes, Make HPT waiting for mutex ready         */
        prio                = OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
   98604:	e13ffe17 	ldw	r4,-8(fp)
   98608:	000b883a 	mov	r5,zero
   9860c:	01800404 	movi	r6,16
   98610:	000f883a 	mov	r7,zero
   98614:	009364c0 	call	9364c <OS_EventTaskRdy>
   98618:	e0bffd05 	stb	r2,-12(fp)
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;  /*      Save priority of mutex's new owner       */
   9861c:	e0bffe17 	ldw	r2,-8(fp)
   98620:	10c0020b 	ldhu	r3,8(r2)
   98624:	00bfc004 	movi	r2,-256
   98628:	1884703a 	and	r2,r3,r2
   9862c:	1007883a 	mov	r3,r2
   98630:	e0bffe17 	ldw	r2,-8(fp)
   98634:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= prio;
   98638:	e0bffe17 	ldw	r2,-8(fp)
   9863c:	10c0020b 	ldhu	r3,8(r2)
   98640:	e0bffd03 	ldbu	r2,-12(fp)
   98644:	1884b03a 	or	r2,r3,r2
   98648:	1007883a 	mov	r3,r2
   9864c:	e0bffe17 	ldw	r2,-8(fp)
   98650:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = OSTCBPrioTbl[prio];     /*      Link to new mutex owner's OS_TCB         */
   98654:	e0bffd03 	ldbu	r2,-12(fp)
   98658:	00c00334 	movhi	r3,12
   9865c:	18e2b904 	addi	r3,r3,-29980
   98660:	1085883a 	add	r2,r2,r2
   98664:	1085883a 	add	r2,r2,r2
   98668:	10c5883a 	add	r2,r2,r3
   9866c:	10c00017 	ldw	r3,0(r2)
   98670:	e0bffe17 	ldw	r2,-8(fp)
   98674:	10c00115 	stw	r3,4(r2)
        if (prio <= pip) {                            /*      PIP 'must' have a SMALLER prio ...       */
   98678:	e0fffd03 	ldbu	r3,-12(fp)
   9867c:	e0bffd43 	ldbu	r2,-11(fp)
   98680:	10c00836 	bltu	r2,r3,986a4 <OSMutexPost+0x1fc>
   98684:	e0bffc17 	ldw	r2,-16(fp)
   98688:	e0bff915 	stw	r2,-28(fp)
   9868c:	e0bff917 	ldw	r2,-28(fp)
   98690:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                       /*      ... than current task!                   */
            OS_Sched();                               /*      Find highest priority task ready to run  */
   98694:	009408c0 	call	9408c <OS_Sched>
            return (OS_ERR_PIP_LOWER);
   98698:	00801e04 	movi	r2,120
   9869c:	e0bfff15 	stw	r2,-4(fp)
   986a0:	00001406 	br	986f4 <OSMutexPost+0x24c>
   986a4:	e0bffc17 	ldw	r2,-16(fp)
   986a8:	e0bff815 	stw	r2,-32(fp)
   986ac:	e0bff817 	ldw	r2,-32(fp)
   986b0:	1001703a 	wrctl	status,r2
        } else {
            OS_EXIT_CRITICAL();
            OS_Sched();                               /*      Find highest priority task ready to run  */
   986b4:	009408c0 	call	9408c <OS_Sched>
            return (OS_ERR_NONE);
   986b8:	e03fff15 	stw	zero,-4(fp)
   986bc:	00000d06 	br	986f4 <OSMutexPost+0x24c>
        }
    }
    pevent->OSEventCnt |= OS_MUTEX_AVAILABLE;         /* No,  Mutex is now available                   */
   986c0:	e0bffe17 	ldw	r2,-8(fp)
   986c4:	1080020b 	ldhu	r2,8(r2)
   986c8:	10803fd4 	ori	r2,r2,255
   986cc:	1007883a 	mov	r3,r2
   986d0:	e0bffe17 	ldw	r2,-8(fp)
   986d4:	10c0020d 	sth	r3,8(r2)
    pevent->OSEventPtr  = (void *)0;
   986d8:	e0bffe17 	ldw	r2,-8(fp)
   986dc:	10000115 	stw	zero,4(r2)
   986e0:	e0bffc17 	ldw	r2,-16(fp)
   986e4:	e0bff715 	stw	r2,-36(fp)
   986e8:	e0bff717 	ldw	r2,-36(fp)
   986ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   986f0:	e03fff15 	stw	zero,-4(fp)
   986f4:	e0bfff17 	ldw	r2,-4(fp)
}
   986f8:	e037883a 	mov	sp,fp
   986fc:	dfc00117 	ldw	ra,4(sp)
   98700:	df000017 	ldw	fp,0(sp)
   98704:	dec00204 	addi	sp,sp,8
   98708:	f800283a 	ret

0009870c <OSMutexQuery>:
*********************************************************************************************************
*/

#if OS_MUTEX_QUERY_EN > 0
INT8U  OSMutexQuery (OS_EVENT *pevent, OS_MUTEX_DATA *p_mutex_data)
{
   9870c:	defff604 	addi	sp,sp,-40
   98710:	df000915 	stw	fp,36(sp)
   98714:	df000904 	addi	fp,sp,36
   98718:	e13ffd15 	stw	r4,-12(fp)
   9871c:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   98720:	e03ff915 	stw	zero,-28(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   98724:	008002b4 	movhi	r2,10
   98728:	108e5304 	addi	r2,r2,14668
   9872c:	10800003 	ldbu	r2,0(r2)
   98730:	10803fcc 	andi	r2,r2,255
   98734:	1005003a 	cmpeq	r2,r2,zero
   98738:	1000031e 	bne	r2,zero,98748 <OSMutexQuery+0x3c>
        return (OS_ERR_QUERY_ISR);                         /* ... can't QUERY mutex from an ISR        */
   9873c:	00800184 	movi	r2,6
   98740:	e0bfff15 	stw	r2,-4(fp)
   98744:	00005606 	br	988a0 <OSMutexQuery+0x194>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   98748:	e0bffd17 	ldw	r2,-12(fp)
   9874c:	1004c03a 	cmpne	r2,r2,zero
   98750:	1000031e 	bne	r2,zero,98760 <OSMutexQuery+0x54>
        return (OS_ERR_PEVENT_NULL);
   98754:	00800104 	movi	r2,4
   98758:	e0bfff15 	stw	r2,-4(fp)
   9875c:	00005006 	br	988a0 <OSMutexQuery+0x194>
    }
    if (p_mutex_data == (OS_MUTEX_DATA *)0) {              /* Validate 'p_mutex_data'                  */
   98760:	e0bffe17 	ldw	r2,-8(fp)
   98764:	1004c03a 	cmpne	r2,r2,zero
   98768:	1000031e 	bne	r2,zero,98778 <OSMutexQuery+0x6c>
        return (OS_ERR_PDATA_NULL);
   9876c:	00800244 	movi	r2,9
   98770:	e0bfff15 	stw	r2,-4(fp)
   98774:	00004a06 	br	988a0 <OSMutexQuery+0x194>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
   98778:	e0bffd17 	ldw	r2,-12(fp)
   9877c:	10800003 	ldbu	r2,0(r2)
   98780:	10803fcc 	andi	r2,r2,255
   98784:	10800120 	cmpeqi	r2,r2,4
   98788:	1000031e 	bne	r2,zero,98798 <OSMutexQuery+0x8c>
        return (OS_ERR_EVENT_TYPE);
   9878c:	00800044 	movi	r2,1
   98790:	e0bfff15 	stw	r2,-4(fp)
   98794:	00004206 	br	988a0 <OSMutexQuery+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   98798:	0005303a 	rdctl	r2,status
   9879c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   987a0:	e0fff817 	ldw	r3,-32(fp)
   987a4:	00bfff84 	movi	r2,-2
   987a8:	1884703a 	and	r2,r3,r2
   987ac:	1001703a 	wrctl	status,r2
  
  return context;
   987b0:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   987b4:	e0bff915 	stw	r2,-28(fp)
    p_mutex_data->OSMutexPIP  = (INT8U)(pevent->OSEventCnt >> 8);
   987b8:	e0bffd17 	ldw	r2,-12(fp)
   987bc:	1080020b 	ldhu	r2,8(r2)
   987c0:	10bfffcc 	andi	r2,r2,65535
   987c4:	1004d23a 	srli	r2,r2,8
   987c8:	1007883a 	mov	r3,r2
   987cc:	e0bffe17 	ldw	r2,-8(fp)
   987d0:	10c00185 	stb	r3,6(r2)
    p_mutex_data->OSOwnerPrio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);
   987d4:	e0bffd17 	ldw	r2,-12(fp)
   987d8:	1080020b 	ldhu	r2,8(r2)
   987dc:	1007883a 	mov	r3,r2
   987e0:	00bfffc4 	movi	r2,-1
   987e4:	1884703a 	and	r2,r3,r2
   987e8:	1007883a 	mov	r3,r2
   987ec:	e0bffe17 	ldw	r2,-8(fp)
   987f0:	10c00145 	stb	r3,5(r2)
    if (p_mutex_data->OSOwnerPrio == 0xFF) {
   987f4:	e0bffe17 	ldw	r2,-8(fp)
   987f8:	10800143 	ldbu	r2,5(r2)
   987fc:	10803fcc 	andi	r2,r2,255
   98800:	10803fd8 	cmpnei	r2,r2,255
   98804:	1000041e 	bne	r2,zero,98818 <OSMutexQuery+0x10c>
        p_mutex_data->OSValue = OS_TRUE;
   98808:	e0fffe17 	ldw	r3,-8(fp)
   9880c:	00800044 	movi	r2,1
   98810:	18800105 	stb	r2,4(r3)
   98814:	00000206 	br	98820 <OSMutexQuery+0x114>
    } else {
        p_mutex_data->OSValue = OS_FALSE;
   98818:	e0bffe17 	ldw	r2,-8(fp)
   9881c:	10000105 	stb	zero,4(r2)
    }
    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
   98820:	e0bffd17 	ldw	r2,-12(fp)
   98824:	10c00283 	ldbu	r3,10(r2)
   98828:	e0bffe17 	ldw	r2,-8(fp)
   9882c:	10c000c5 	stb	r3,3(r2)
    psrc                      = &pevent->OSEventTbl[0];
   98830:	e0bffd17 	ldw	r2,-12(fp)
   98834:	108002c4 	addi	r2,r2,11
   98838:	e0bffb15 	stw	r2,-20(fp)
    pdest                     = &p_mutex_data->OSEventTbl[0];
   9883c:	e0bffe17 	ldw	r2,-8(fp)
   98840:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   98844:	e03ffc05 	stb	zero,-16(fp)
   98848:	00000d06 	br	98880 <OSMutexQuery+0x174>
        *pdest++ = *psrc++;
   9884c:	e0bffb17 	ldw	r2,-20(fp)
   98850:	10c00003 	ldbu	r3,0(r2)
   98854:	e0bffa17 	ldw	r2,-24(fp)
   98858:	10c00005 	stb	r3,0(r2)
   9885c:	e0bffa17 	ldw	r2,-24(fp)
   98860:	10800044 	addi	r2,r2,1
   98864:	e0bffa15 	stw	r2,-24(fp)
   98868:	e0bffb17 	ldw	r2,-20(fp)
   9886c:	10800044 	addi	r2,r2,1
   98870:	e0bffb15 	stw	r2,-20(fp)
        p_mutex_data->OSValue = OS_FALSE;
    }
    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
    psrc                      = &pevent->OSEventTbl[0];
    pdest                     = &p_mutex_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   98874:	e0bffc03 	ldbu	r2,-16(fp)
   98878:	10800044 	addi	r2,r2,1
   9887c:	e0bffc05 	stb	r2,-16(fp)
   98880:	e0bffc03 	ldbu	r2,-16(fp)
   98884:	108000f0 	cmpltui	r2,r2,3
   98888:	103ff01e 	bne	r2,zero,9884c <OSMutexQuery+0x140>
   9888c:	e0bff917 	ldw	r2,-28(fp)
   98890:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   98894:	e0bff717 	ldw	r2,-36(fp)
   98898:	1001703a 	wrctl	status,r2
        *pdest++ = *psrc++;
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   9889c:	e03fff15 	stw	zero,-4(fp)
   988a0:	e0bfff17 	ldw	r2,-4(fp)
}
   988a4:	e037883a 	mov	sp,fp
   988a8:	df000017 	ldw	fp,0(sp)
   988ac:	dec00104 	addi	sp,sp,4
   988b0:	f800283a 	ret

000988b4 <OSMutex_RdyAtPrio>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OSMutex_RdyAtPrio (OS_TCB *ptcb, INT8U prio)
{
   988b4:	defffc04 	addi	sp,sp,-16
   988b8:	df000315 	stw	fp,12(sp)
   988bc:	df000304 	addi	fp,sp,12
   988c0:	e13ffe15 	stw	r4,-8(fp)
   988c4:	e17fff05 	stb	r5,-4(fp)
    INT8U   y;


    y            =  ptcb->OSTCBY;                          /* Remove owner from ready list at 'pip'    */
   988c8:	e0bffe17 	ldw	r2,-8(fp)
   988cc:	10800d03 	ldbu	r2,52(r2)
   988d0:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;
   988d4:	e13ffd03 	ldbu	r4,-12(fp)
   988d8:	e0fffd03 	ldbu	r3,-12(fp)
   988dc:	008002b4 	movhi	r2,10
   988e0:	108e5144 	addi	r2,r2,14661
   988e4:	10c5883a 	add	r2,r2,r3
   988e8:	10800003 	ldbu	r2,0(r2)
   988ec:	1007883a 	mov	r3,r2
   988f0:	e0bffe17 	ldw	r2,-8(fp)
   988f4:	10800d43 	ldbu	r2,53(r2)
   988f8:	0084303a 	nor	r2,zero,r2
   988fc:	1884703a 	and	r2,r3,r2
   98900:	1007883a 	mov	r3,r2
   98904:	008002b4 	movhi	r2,10
   98908:	108e5144 	addi	r2,r2,14661
   9890c:	1105883a 	add	r2,r2,r4
   98910:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
   98914:	e0fffd03 	ldbu	r3,-12(fp)
   98918:	008002b4 	movhi	r2,10
   9891c:	108e5144 	addi	r2,r2,14661
   98920:	10c5883a 	add	r2,r2,r3
   98924:	10800003 	ldbu	r2,0(r2)
   98928:	10803fcc 	andi	r2,r2,255
   9892c:	1004c03a 	cmpne	r2,r2,zero
   98930:	10000c1e 	bne	r2,zero,98964 <OSMutex_RdyAtPrio+0xb0>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   98934:	e0bffe17 	ldw	r2,-8(fp)
   98938:	10800d83 	ldbu	r2,54(r2)
   9893c:	0084303a 	nor	r2,zero,r2
   98940:	1007883a 	mov	r3,r2
   98944:	008002b4 	movhi	r2,10
   98948:	108e5104 	addi	r2,r2,14660
   9894c:	10800003 	ldbu	r2,0(r2)
   98950:	1884703a 	and	r2,r3,r2
   98954:	1007883a 	mov	r3,r2
   98958:	008002b4 	movhi	r2,10
   9895c:	108e5104 	addi	r2,r2,14660
   98960:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBPrio         = prio;
   98964:	e0fffe17 	ldw	r3,-8(fp)
   98968:	e0bfff03 	ldbu	r2,-4(fp)
   9896c:	18800c85 	stb	r2,50(r3)
#if OS_LOWEST_PRIO <= 63
    ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)3) & (INT8U)0x07);
   98970:	e0bfff03 	ldbu	r2,-4(fp)
   98974:	1004d0fa 	srli	r2,r2,3
   98978:	108001cc 	andi	r2,r2,7
   9897c:	1007883a 	mov	r3,r2
   98980:	e0bffe17 	ldw	r2,-8(fp)
   98984:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x07);
   98988:	e0bfff03 	ldbu	r2,-4(fp)
   9898c:	108001cc 	andi	r2,r2,7
   98990:	1007883a 	mov	r3,r2
   98994:	e0bffe17 	ldw	r2,-8(fp)
   98998:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY         = (INT8U)(1 << ptcb->OSTCBY);
   9899c:	e0bffe17 	ldw	r2,-8(fp)
   989a0:	10800d03 	ldbu	r2,52(r2)
   989a4:	10c03fcc 	andi	r3,r2,255
   989a8:	00800044 	movi	r2,1
   989ac:	10c4983a 	sll	r2,r2,r3
   989b0:	1007883a 	mov	r3,r2
   989b4:	e0bffe17 	ldw	r2,-8(fp)
   989b8:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX         = (INT8U)(1 << ptcb->OSTCBX);
   989bc:	e0bffe17 	ldw	r2,-8(fp)
   989c0:	10800cc3 	ldbu	r2,51(r2)
   989c4:	10c03fcc 	andi	r3,r2,255
   989c8:	00800044 	movi	r2,1
   989cc:	10c4983a 	sll	r2,r2,r3
   989d0:	1007883a 	mov	r3,r2
   989d4:	e0bffe17 	ldw	r2,-8(fp)
   989d8:	10c00d45 	stb	r3,53(r2)
    ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)4) & (INT8U)0x0F);
    ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x0F);
    ptcb->OSTCBBitY         = (INT16U)(1 << ptcb->OSTCBY);
    ptcb->OSTCBBitX         = (INT16U)(1 << ptcb->OSTCBX);
#endif
    OSRdyGrp               |= ptcb->OSTCBBitY;             /* Make task ready at original priority     */
   989dc:	e0bffe17 	ldw	r2,-8(fp)
   989e0:	10c00d83 	ldbu	r3,54(r2)
   989e4:	008002b4 	movhi	r2,10
   989e8:	108e5104 	addi	r2,r2,14660
   989ec:	10800003 	ldbu	r2,0(r2)
   989f0:	1884b03a 	or	r2,r3,r2
   989f4:	1007883a 	mov	r3,r2
   989f8:	008002b4 	movhi	r2,10
   989fc:	108e5104 	addi	r2,r2,14660
   98a00:	10c00005 	stb	r3,0(r2)
    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   98a04:	e0bffe17 	ldw	r2,-8(fp)
   98a08:	10800d03 	ldbu	r2,52(r2)
   98a0c:	11003fcc 	andi	r4,r2,255
   98a10:	e0bffe17 	ldw	r2,-8(fp)
   98a14:	10800d03 	ldbu	r2,52(r2)
   98a18:	10c03fcc 	andi	r3,r2,255
   98a1c:	008002b4 	movhi	r2,10
   98a20:	108e5144 	addi	r2,r2,14661
   98a24:	10c5883a 	add	r2,r2,r3
   98a28:	10c00003 	ldbu	r3,0(r2)
   98a2c:	e0bffe17 	ldw	r2,-8(fp)
   98a30:	10800d43 	ldbu	r2,53(r2)
   98a34:	1884b03a 	or	r2,r3,r2
   98a38:	1007883a 	mov	r3,r2
   98a3c:	008002b4 	movhi	r2,10
   98a40:	108e5144 	addi	r2,r2,14661
   98a44:	1105883a 	add	r2,r2,r4
   98a48:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio]      = ptcb;
   98a4c:	e0bfff03 	ldbu	r2,-4(fp)
   98a50:	00c00334 	movhi	r3,12
   98a54:	18e2b904 	addi	r3,r3,-29980
   98a58:	1085883a 	add	r2,r2,r2
   98a5c:	1085883a 	add	r2,r2,r2
   98a60:	10c7883a 	add	r3,r2,r3
   98a64:	e0bffe17 	ldw	r2,-8(fp)
   98a68:	18800015 	stw	r2,0(r3)
}
   98a6c:	e037883a 	mov	sp,fp
   98a70:	df000017 	ldw	fp,0(sp)
   98a74:	dec00104 	addi	sp,sp,4
   98a78:	f800283a 	ret

00098a7c <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   98a7c:	defff704 	addi	sp,sp,-36
   98a80:	df000815 	stw	fp,32(sp)
   98a84:	df000804 	addi	fp,sp,32
   98a88:	e13ffd15 	stw	r4,-12(fp)
   98a8c:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   98a90:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   98a94:	e0bffe17 	ldw	r2,-8(fp)
   98a98:	1004c03a 	cmpne	r2,r2,zero
   98a9c:	1000021e 	bne	r2,zero,98aa8 <OSQAccept+0x2c>
        return ((void *)0);
   98aa0:	e03fff15 	stw	zero,-4(fp)
   98aa4:	00004506 	br	98bbc <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   98aa8:	e0bffd17 	ldw	r2,-12(fp)
   98aac:	1004c03a 	cmpne	r2,r2,zero
   98ab0:	1000051e 	bne	r2,zero,98ac8 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   98ab4:	e0fffe17 	ldw	r3,-8(fp)
   98ab8:	00800104 	movi	r2,4
   98abc:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   98ac0:	e03fff15 	stw	zero,-4(fp)
   98ac4:	00003d06 	br	98bbc <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   98ac8:	e0bffd17 	ldw	r2,-12(fp)
   98acc:	10800003 	ldbu	r2,0(r2)
   98ad0:	10803fcc 	andi	r2,r2,255
   98ad4:	108000a0 	cmpeqi	r2,r2,2
   98ad8:	1000051e 	bne	r2,zero,98af0 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
   98adc:	e0fffe17 	ldw	r3,-8(fp)
   98ae0:	00800044 	movi	r2,1
   98ae4:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   98ae8:	e03fff15 	stw	zero,-4(fp)
   98aec:	00003306 	br	98bbc <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   98af0:	0005303a 	rdctl	r2,status
   98af4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   98af8:	e0fff917 	ldw	r3,-28(fp)
   98afc:	00bfff84 	movi	r2,-2
   98b00:	1884703a 	and	r2,r3,r2
   98b04:	1001703a 	wrctl	status,r2
  
  return context;
   98b08:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   98b0c:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   98b10:	e0bffd17 	ldw	r2,-12(fp)
   98b14:	10800117 	ldw	r2,4(r2)
   98b18:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   98b1c:	e0bffb17 	ldw	r2,-20(fp)
   98b20:	1080058b 	ldhu	r2,22(r2)
   98b24:	10bfffcc 	andi	r2,r2,65535
   98b28:	1005003a 	cmpeq	r2,r2,zero
   98b2c:	1000191e 	bne	r2,zero,98b94 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   98b30:	e0bffb17 	ldw	r2,-20(fp)
   98b34:	10c00417 	ldw	r3,16(r2)
   98b38:	18800017 	ldw	r2,0(r3)
   98b3c:	e0bffc15 	stw	r2,-16(fp)
   98b40:	18c00104 	addi	r3,r3,4
   98b44:	e0bffb17 	ldw	r2,-20(fp)
   98b48:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   98b4c:	e0bffb17 	ldw	r2,-20(fp)
   98b50:	1080058b 	ldhu	r2,22(r2)
   98b54:	10bfffc4 	addi	r2,r2,-1
   98b58:	1007883a 	mov	r3,r2
   98b5c:	e0bffb17 	ldw	r2,-20(fp)
   98b60:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   98b64:	e0bffb17 	ldw	r2,-20(fp)
   98b68:	10c00417 	ldw	r3,16(r2)
   98b6c:	e0bffb17 	ldw	r2,-20(fp)
   98b70:	10800217 	ldw	r2,8(r2)
   98b74:	1880041e 	bne	r3,r2,98b88 <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
   98b78:	e0bffb17 	ldw	r2,-20(fp)
   98b7c:	10c00117 	ldw	r3,4(r2)
   98b80:	e0bffb17 	ldw	r2,-20(fp)
   98b84:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   98b88:	e0bffe17 	ldw	r2,-8(fp)
   98b8c:	10000005 	stb	zero,0(r2)
   98b90:	00000406 	br	98ba4 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   98b94:	e0fffe17 	ldw	r3,-8(fp)
   98b98:	008007c4 	movi	r2,31
   98b9c:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   98ba0:	e03ffc15 	stw	zero,-16(fp)
   98ba4:	e0bffa17 	ldw	r2,-24(fp)
   98ba8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   98bac:	e0bff817 	ldw	r2,-32(fp)
   98bb0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   98bb4:	e0bffc17 	ldw	r2,-16(fp)
   98bb8:	e0bfff15 	stw	r2,-4(fp)
   98bbc:	e0bfff17 	ldw	r2,-4(fp)
}
   98bc0:	e037883a 	mov	sp,fp
   98bc4:	df000017 	ldw	fp,0(sp)
   98bc8:	dec00104 	addi	sp,sp,4
   98bcc:	f800283a 	ret

00098bd0 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   98bd0:	defff304 	addi	sp,sp,-52
   98bd4:	dfc00c15 	stw	ra,48(sp)
   98bd8:	df000b15 	stw	fp,44(sp)
   98bdc:	df000b04 	addi	fp,sp,44
   98be0:	e13ffd15 	stw	r4,-12(fp)
   98be4:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   98be8:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   98bec:	008002b4 	movhi	r2,10
   98bf0:	108e5304 	addi	r2,r2,14668
   98bf4:	10800003 	ldbu	r2,0(r2)
   98bf8:	10803fcc 	andi	r2,r2,255
   98bfc:	1005003a 	cmpeq	r2,r2,zero
   98c00:	1000021e 	bne	r2,zero,98c0c <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   98c04:	e03fff15 	stw	zero,-4(fp)
   98c08:	00007006 	br	98dcc <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   98c0c:	0005303a 	rdctl	r2,status
   98c10:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   98c14:	e0fff917 	ldw	r3,-28(fp)
   98c18:	00bfff84 	movi	r2,-2
   98c1c:	1884703a 	and	r2,r3,r2
   98c20:	1001703a 	wrctl	status,r2
  
  return context;
   98c24:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   98c28:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   98c2c:	008002b4 	movhi	r2,10
   98c30:	108e5204 	addi	r2,r2,14664
   98c34:	10800017 	ldw	r2,0(r2)
   98c38:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   98c3c:	008002b4 	movhi	r2,10
   98c40:	108e5204 	addi	r2,r2,14664
   98c44:	10800017 	ldw	r2,0(r2)
   98c48:	1005003a 	cmpeq	r2,r2,zero
   98c4c:	1000081e 	bne	r2,zero,98c70 <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   98c50:	008002b4 	movhi	r2,10
   98c54:	108e5204 	addi	r2,r2,14664
   98c58:	10800017 	ldw	r2,0(r2)
   98c5c:	10800117 	ldw	r2,4(r2)
   98c60:	1007883a 	mov	r3,r2
   98c64:	008002b4 	movhi	r2,10
   98c68:	108e5204 	addi	r2,r2,14664
   98c6c:	10c00015 	stw	r3,0(r2)
   98c70:	e0bffa17 	ldw	r2,-24(fp)
   98c74:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   98c78:	e0bff817 	ldw	r2,-32(fp)
   98c7c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   98c80:	e0bffc17 	ldw	r2,-16(fp)
   98c84:	1005003a 	cmpeq	r2,r2,zero
   98c88:	10004e1e 	bne	r2,zero,98dc4 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   98c8c:	0005303a 	rdctl	r2,status
   98c90:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   98c94:	e0fff717 	ldw	r3,-36(fp)
   98c98:	00bfff84 	movi	r2,-2
   98c9c:	1884703a 	and	r2,r3,r2
   98ca0:	1001703a 	wrctl	status,r2
  
  return context;
   98ca4:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
   98ca8:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   98cac:	008002b4 	movhi	r2,10
   98cb0:	108e5004 	addi	r2,r2,14656
   98cb4:	10800017 	ldw	r2,0(r2)
   98cb8:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   98cbc:	e0bffb17 	ldw	r2,-20(fp)
   98cc0:	1005003a 	cmpeq	r2,r2,zero
   98cc4:	1000311e 	bne	r2,zero,98d8c <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   98cc8:	008002b4 	movhi	r2,10
   98ccc:	108e5004 	addi	r2,r2,14656
   98cd0:	10800017 	ldw	r2,0(r2)
   98cd4:	10c00017 	ldw	r3,0(r2)
   98cd8:	008002b4 	movhi	r2,10
   98cdc:	108e5004 	addi	r2,r2,14656
   98ce0:	10c00015 	stw	r3,0(r2)
   98ce4:	e0bffa17 	ldw	r2,-24(fp)
   98ce8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   98cec:	e0bff617 	ldw	r2,-40(fp)
   98cf0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   98cf4:	e0fffb17 	ldw	r3,-20(fp)
   98cf8:	e0bffd17 	ldw	r2,-12(fp)
   98cfc:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
   98d00:	e0bffe0b 	ldhu	r2,-8(fp)
   98d04:	1085883a 	add	r2,r2,r2
   98d08:	1085883a 	add	r2,r2,r2
   98d0c:	1007883a 	mov	r3,r2
   98d10:	e0bffd17 	ldw	r2,-12(fp)
   98d14:	1887883a 	add	r3,r3,r2
   98d18:	e0bffb17 	ldw	r2,-20(fp)
   98d1c:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   98d20:	e0fffb17 	ldw	r3,-20(fp)
   98d24:	e0bffd17 	ldw	r2,-12(fp)
   98d28:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
   98d2c:	e0fffb17 	ldw	r3,-20(fp)
   98d30:	e0bffd17 	ldw	r2,-12(fp)
   98d34:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
   98d38:	e0fffb17 	ldw	r3,-20(fp)
   98d3c:	e0bffe0b 	ldhu	r2,-8(fp)
   98d40:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
   98d44:	e0bffb17 	ldw	r2,-20(fp)
   98d48:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   98d4c:	e0fffc17 	ldw	r3,-16(fp)
   98d50:	00800084 	movi	r2,2
   98d54:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
   98d58:	e0bffc17 	ldw	r2,-16(fp)
   98d5c:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   98d60:	e0fffc17 	ldw	r3,-16(fp)
   98d64:	e0bffb17 	ldw	r2,-20(fp)
   98d68:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   98d6c:	e0fffc17 	ldw	r3,-16(fp)
   98d70:	00800fc4 	movi	r2,63
   98d74:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   98d78:	e0bffc17 	ldw	r2,-16(fp)
   98d7c:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   98d80:	e13ffc17 	ldw	r4,-16(fp)
   98d84:	0093c000 	call	93c00 <OS_EventWaitListInit>
   98d88:	00000e06 	br	98dc4 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   98d8c:	008002b4 	movhi	r2,10
   98d90:	108e5204 	addi	r2,r2,14664
   98d94:	10c00017 	ldw	r3,0(r2)
   98d98:	e0bffc17 	ldw	r2,-16(fp)
   98d9c:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   98da0:	00c002b4 	movhi	r3,10
   98da4:	18ce5204 	addi	r3,r3,14664
   98da8:	e0bffc17 	ldw	r2,-16(fp)
   98dac:	18800015 	stw	r2,0(r3)
   98db0:	e0bffa17 	ldw	r2,-24(fp)
   98db4:	e0bff515 	stw	r2,-44(fp)
   98db8:	e0bff517 	ldw	r2,-44(fp)
   98dbc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   98dc0:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
   98dc4:	e0bffc17 	ldw	r2,-16(fp)
   98dc8:	e0bfff15 	stw	r2,-4(fp)
   98dcc:	e0bfff17 	ldw	r2,-4(fp)
}
   98dd0:	e037883a 	mov	sp,fp
   98dd4:	dfc00117 	ldw	ra,4(sp)
   98dd8:	df000017 	ldw	fp,0(sp)
   98ddc:	dec00204 	addi	sp,sp,8
   98de0:	f800283a 	ret

00098de4 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   98de4:	defff004 	addi	sp,sp,-64
   98de8:	dfc00f15 	stw	ra,60(sp)
   98dec:	df000e15 	stw	fp,56(sp)
   98df0:	df000e04 	addi	fp,sp,56
   98df4:	e13ffb15 	stw	r4,-20(fp)
   98df8:	e1bffd15 	stw	r6,-12(fp)
   98dfc:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   98e00:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   98e04:	e0bffd17 	ldw	r2,-12(fp)
   98e08:	1004c03a 	cmpne	r2,r2,zero
   98e0c:	1000031e 	bne	r2,zero,98e1c <OSQDel+0x38>
        return (pevent);
   98e10:	e0bffb17 	ldw	r2,-20(fp)
   98e14:	e0bfff15 	stw	r2,-4(fp)
   98e18:	0000ac06 	br	990cc <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   98e1c:	e0bffb17 	ldw	r2,-20(fp)
   98e20:	1004c03a 	cmpne	r2,r2,zero
   98e24:	1000061e 	bne	r2,zero,98e40 <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
   98e28:	e0fffd17 	ldw	r3,-12(fp)
   98e2c:	00800104 	movi	r2,4
   98e30:	18800005 	stb	r2,0(r3)
        return (pevent);
   98e34:	e0fffb17 	ldw	r3,-20(fp)
   98e38:	e0ffff15 	stw	r3,-4(fp)
   98e3c:	0000a306 	br	990cc <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   98e40:	e0bffb17 	ldw	r2,-20(fp)
   98e44:	10800003 	ldbu	r2,0(r2)
   98e48:	10803fcc 	andi	r2,r2,255
   98e4c:	108000a0 	cmpeqi	r2,r2,2
   98e50:	1000061e 	bne	r2,zero,98e6c <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
   98e54:	e0fffd17 	ldw	r3,-12(fp)
   98e58:	00800044 	movi	r2,1
   98e5c:	18800005 	stb	r2,0(r3)
        return (pevent);
   98e60:	e0bffb17 	ldw	r2,-20(fp)
   98e64:	e0bfff15 	stw	r2,-4(fp)
   98e68:	00009806 	br	990cc <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   98e6c:	008002b4 	movhi	r2,10
   98e70:	108e5304 	addi	r2,r2,14668
   98e74:	10800003 	ldbu	r2,0(r2)
   98e78:	10803fcc 	andi	r2,r2,255
   98e7c:	1005003a 	cmpeq	r2,r2,zero
   98e80:	1000061e 	bne	r2,zero,98e9c <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   98e84:	e0fffd17 	ldw	r3,-12(fp)
   98e88:	008003c4 	movi	r2,15
   98e8c:	18800005 	stb	r2,0(r3)
        return (pevent);
   98e90:	e0fffb17 	ldw	r3,-20(fp)
   98e94:	e0ffff15 	stw	r3,-4(fp)
   98e98:	00008c06 	br	990cc <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   98e9c:	0005303a 	rdctl	r2,status
   98ea0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   98ea4:	e0fff617 	ldw	r3,-40(fp)
   98ea8:	00bfff84 	movi	r2,-2
   98eac:	1884703a 	and	r2,r3,r2
   98eb0:	1001703a 	wrctl	status,r2
  
  return context;
   98eb4:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
   98eb8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   98ebc:	e0bffb17 	ldw	r2,-20(fp)
   98ec0:	10800283 	ldbu	r2,10(r2)
   98ec4:	10803fcc 	andi	r2,r2,255
   98ec8:	1005003a 	cmpeq	r2,r2,zero
   98ecc:	1000031e 	bne	r2,zero,98edc <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   98ed0:	00800044 	movi	r2,1
   98ed4:	e0bffa05 	stb	r2,-24(fp)
   98ed8:	00000106 	br	98ee0 <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   98edc:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
   98ee0:	e0bffc03 	ldbu	r2,-16(fp)
   98ee4:	e0bffe15 	stw	r2,-8(fp)
   98ee8:	e0fffe17 	ldw	r3,-8(fp)
   98eec:	1805003a 	cmpeq	r2,r3,zero
   98ef0:	1000041e 	bne	r2,zero,98f04 <OSQDel+0x120>
   98ef4:	e0fffe17 	ldw	r3,-8(fp)
   98ef8:	18800060 	cmpeqi	r2,r3,1
   98efc:	1000391e 	bne	r2,zero,98fe4 <OSQDel+0x200>
   98f00:	00006706 	br	990a0 <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   98f04:	e0bffa03 	ldbu	r2,-24(fp)
   98f08:	1004c03a 	cmpne	r2,r2,zero
   98f0c:	1000261e 	bne	r2,zero,98fa8 <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   98f10:	e0fffb17 	ldw	r3,-20(fp)
   98f14:	00800fc4 	movi	r2,63
   98f18:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   98f1c:	e0bffb17 	ldw	r2,-20(fp)
   98f20:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   98f24:	e0bffb17 	ldw	r2,-20(fp)
   98f28:	10800117 	ldw	r2,4(r2)
   98f2c:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   98f30:	008002b4 	movhi	r2,10
   98f34:	108e5004 	addi	r2,r2,14656
   98f38:	10c00017 	ldw	r3,0(r2)
   98f3c:	e0bff817 	ldw	r2,-32(fp)
   98f40:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   98f44:	00c002b4 	movhi	r3,10
   98f48:	18ce5004 	addi	r3,r3,14656
   98f4c:	e0bff817 	ldw	r2,-32(fp)
   98f50:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   98f54:	e0bffb17 	ldw	r2,-20(fp)
   98f58:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   98f5c:	008002b4 	movhi	r2,10
   98f60:	108e5204 	addi	r2,r2,14664
   98f64:	10c00017 	ldw	r3,0(r2)
   98f68:	e0bffb17 	ldw	r2,-20(fp)
   98f6c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   98f70:	e0bffb17 	ldw	r2,-20(fp)
   98f74:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   98f78:	00c002b4 	movhi	r3,10
   98f7c:	18ce5204 	addi	r3,r3,14664
   98f80:	e0bffb17 	ldw	r2,-20(fp)
   98f84:	18800015 	stw	r2,0(r3)
   98f88:	e0bff717 	ldw	r2,-36(fp)
   98f8c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   98f90:	e0bff517 	ldw	r2,-44(fp)
   98f94:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   98f98:	e0bffd17 	ldw	r2,-12(fp)
   98f9c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   98fa0:	e03ff915 	stw	zero,-28(fp)
   98fa4:	00004706 	br	990c4 <OSQDel+0x2e0>
   98fa8:	e0bff717 	ldw	r2,-36(fp)
   98fac:	e0bff415 	stw	r2,-48(fp)
   98fb0:	e0bff417 	ldw	r2,-48(fp)
   98fb4:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   98fb8:	e0fffd17 	ldw	r3,-12(fp)
   98fbc:	00801244 	movi	r2,73
   98fc0:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
   98fc4:	e0bffb17 	ldw	r2,-20(fp)
   98fc8:	e0bff915 	stw	r2,-28(fp)
             }
             break;
   98fcc:	00003d06 	br	990c4 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   98fd0:	e13ffb17 	ldw	r4,-20(fp)
   98fd4:	000b883a 	mov	r5,zero
   98fd8:	01800104 	movi	r6,4
   98fdc:	000f883a 	mov	r7,zero
   98fe0:	009364c0 	call	9364c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   98fe4:	e0bffb17 	ldw	r2,-20(fp)
   98fe8:	10800283 	ldbu	r2,10(r2)
   98fec:	10803fcc 	andi	r2,r2,255
   98ff0:	1004c03a 	cmpne	r2,r2,zero
   98ff4:	103ff61e 	bne	r2,zero,98fd0 <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   98ff8:	e0fffb17 	ldw	r3,-20(fp)
   98ffc:	00800fc4 	movi	r2,63
   99000:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   99004:	e0bffb17 	ldw	r2,-20(fp)
   99008:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   9900c:	e0bffb17 	ldw	r2,-20(fp)
   99010:	10800117 	ldw	r2,4(r2)
   99014:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   99018:	008002b4 	movhi	r2,10
   9901c:	108e5004 	addi	r2,r2,14656
   99020:	10c00017 	ldw	r3,0(r2)
   99024:	e0bff817 	ldw	r2,-32(fp)
   99028:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   9902c:	00c002b4 	movhi	r3,10
   99030:	18ce5004 	addi	r3,r3,14656
   99034:	e0bff817 	ldw	r2,-32(fp)
   99038:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   9903c:	e0bffb17 	ldw	r2,-20(fp)
   99040:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   99044:	008002b4 	movhi	r2,10
   99048:	108e5204 	addi	r2,r2,14664
   9904c:	10c00017 	ldw	r3,0(r2)
   99050:	e0bffb17 	ldw	r2,-20(fp)
   99054:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   99058:	e0bffb17 	ldw	r2,-20(fp)
   9905c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   99060:	00c002b4 	movhi	r3,10
   99064:	18ce5204 	addi	r3,r3,14664
   99068:	e0bffb17 	ldw	r2,-20(fp)
   9906c:	18800015 	stw	r2,0(r3)
   99070:	e0bff717 	ldw	r2,-36(fp)
   99074:	e0bff315 	stw	r2,-52(fp)
   99078:	e0bff317 	ldw	r2,-52(fp)
   9907c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   99080:	e0bffa03 	ldbu	r2,-24(fp)
   99084:	10800058 	cmpnei	r2,r2,1
   99088:	1000011e 	bne	r2,zero,99090 <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   9908c:	009408c0 	call	9408c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   99090:	e0bffd17 	ldw	r2,-12(fp)
   99094:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   99098:	e03ff915 	stw	zero,-28(fp)
             break;
   9909c:	00000906 	br	990c4 <OSQDel+0x2e0>
   990a0:	e0bff717 	ldw	r2,-36(fp)
   990a4:	e0bff215 	stw	r2,-56(fp)
   990a8:	e0bff217 	ldw	r2,-56(fp)
   990ac:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   990b0:	e0fffd17 	ldw	r3,-12(fp)
   990b4:	008001c4 	movi	r2,7
   990b8:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
   990bc:	e0bffb17 	ldw	r2,-20(fp)
   990c0:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
   990c4:	e0bff917 	ldw	r2,-28(fp)
   990c8:	e0bfff15 	stw	r2,-4(fp)
   990cc:	e0bfff17 	ldw	r2,-4(fp)
}
   990d0:	e037883a 	mov	sp,fp
   990d4:	dfc00117 	ldw	ra,4(sp)
   990d8:	df000017 	ldw	fp,0(sp)
   990dc:	dec00204 	addi	sp,sp,8
   990e0:	f800283a 	ret

000990e4 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   990e4:	defff904 	addi	sp,sp,-28
   990e8:	df000615 	stw	fp,24(sp)
   990ec:	df000604 	addi	fp,sp,24
   990f0:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   990f4:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   990f8:	e0bffe17 	ldw	r2,-8(fp)
   990fc:	1004c03a 	cmpne	r2,r2,zero
   99100:	1000031e 	bne	r2,zero,99110 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
   99104:	00800104 	movi	r2,4
   99108:	e0bfff15 	stw	r2,-4(fp)
   9910c:	00002206 	br	99198 <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   99110:	e0bffe17 	ldw	r2,-8(fp)
   99114:	10800003 	ldbu	r2,0(r2)
   99118:	10803fcc 	andi	r2,r2,255
   9911c:	108000a0 	cmpeqi	r2,r2,2
   99120:	1000031e 	bne	r2,zero,99130 <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
   99124:	00800044 	movi	r2,1
   99128:	e0bfff15 	stw	r2,-4(fp)
   9912c:	00001a06 	br	99198 <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   99130:	0005303a 	rdctl	r2,status
   99134:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   99138:	e0fffb17 	ldw	r3,-20(fp)
   9913c:	00bfff84 	movi	r2,-2
   99140:	1884703a 	and	r2,r3,r2
   99144:	1001703a 	wrctl	status,r2
  
  return context;
   99148:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   9914c:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   99150:	e0bffe17 	ldw	r2,-8(fp)
   99154:	10800117 	ldw	r2,4(r2)
   99158:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
   9915c:	e0bffd17 	ldw	r2,-12(fp)
   99160:	10c00117 	ldw	r3,4(r2)
   99164:	e0bffd17 	ldw	r2,-12(fp)
   99168:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   9916c:	e0bffd17 	ldw	r2,-12(fp)
   99170:	10c00117 	ldw	r3,4(r2)
   99174:	e0bffd17 	ldw	r2,-12(fp)
   99178:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   9917c:	e0bffd17 	ldw	r2,-12(fp)
   99180:	1000058d 	sth	zero,22(r2)
   99184:	e0bffc17 	ldw	r2,-16(fp)
   99188:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9918c:	e0bffa17 	ldw	r2,-24(fp)
   99190:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   99194:	e03fff15 	stw	zero,-4(fp)
   99198:	e0bfff17 	ldw	r2,-4(fp)
}
   9919c:	e037883a 	mov	sp,fp
   991a0:	df000017 	ldw	fp,0(sp)
   991a4:	dec00104 	addi	sp,sp,4
   991a8:	f800283a 	ret

000991ac <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   991ac:	defff104 	addi	sp,sp,-60
   991b0:	dfc00e15 	stw	ra,56(sp)
   991b4:	df000d15 	stw	fp,52(sp)
   991b8:	df000d04 	addi	fp,sp,52
   991bc:	e13ffb15 	stw	r4,-20(fp)
   991c0:	e1bffd15 	stw	r6,-12(fp)
   991c4:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   991c8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   991cc:	e0bffd17 	ldw	r2,-12(fp)
   991d0:	1004c03a 	cmpne	r2,r2,zero
   991d4:	1000021e 	bne	r2,zero,991e0 <OSQPend+0x34>
        return ((void *)0);
   991d8:	e03fff15 	stw	zero,-4(fp)
   991dc:	0000b506 	br	994b4 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   991e0:	e0bffb17 	ldw	r2,-20(fp)
   991e4:	1004c03a 	cmpne	r2,r2,zero
   991e8:	1000051e 	bne	r2,zero,99200 <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
   991ec:	e0fffd17 	ldw	r3,-12(fp)
   991f0:	00800104 	movi	r2,4
   991f4:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   991f8:	e03fff15 	stw	zero,-4(fp)
   991fc:	0000ad06 	br	994b4 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   99200:	e0bffb17 	ldw	r2,-20(fp)
   99204:	10800003 	ldbu	r2,0(r2)
   99208:	10803fcc 	andi	r2,r2,255
   9920c:	108000a0 	cmpeqi	r2,r2,2
   99210:	1000051e 	bne	r2,zero,99228 <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   99214:	e0fffd17 	ldw	r3,-12(fp)
   99218:	00800044 	movi	r2,1
   9921c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   99220:	e03fff15 	stw	zero,-4(fp)
   99224:	0000a306 	br	994b4 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   99228:	008002b4 	movhi	r2,10
   9922c:	108e5304 	addi	r2,r2,14668
   99230:	10800003 	ldbu	r2,0(r2)
   99234:	10803fcc 	andi	r2,r2,255
   99238:	1005003a 	cmpeq	r2,r2,zero
   9923c:	1000051e 	bne	r2,zero,99254 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   99240:	e0fffd17 	ldw	r3,-12(fp)
   99244:	00800084 	movi	r2,2
   99248:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   9924c:	e03fff15 	stw	zero,-4(fp)
   99250:	00009806 	br	994b4 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   99254:	008002b4 	movhi	r2,10
   99258:	108e4504 	addi	r2,r2,14612
   9925c:	10800003 	ldbu	r2,0(r2)
   99260:	10803fcc 	andi	r2,r2,255
   99264:	1005003a 	cmpeq	r2,r2,zero
   99268:	1000051e 	bne	r2,zero,99280 <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   9926c:	e0fffd17 	ldw	r3,-12(fp)
   99270:	00800344 	movi	r2,13
   99274:	18800005 	stb	r2,0(r3)
        return ((void *)0);
   99278:	e03fff15 	stw	zero,-4(fp)
   9927c:	00008d06 	br	994b4 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   99280:	0005303a 	rdctl	r2,status
   99284:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   99288:	e0fff717 	ldw	r3,-36(fp)
   9928c:	00bfff84 	movi	r2,-2
   99290:	1884703a 	and	r2,r3,r2
   99294:	1001703a 	wrctl	status,r2
  
  return context;
   99298:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   9929c:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   992a0:	e0bffb17 	ldw	r2,-20(fp)
   992a4:	10800117 	ldw	r2,4(r2)
   992a8:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   992ac:	e0bff917 	ldw	r2,-28(fp)
   992b0:	1080058b 	ldhu	r2,22(r2)
   992b4:	10bfffcc 	andi	r2,r2,65535
   992b8:	1005003a 	cmpeq	r2,r2,zero
   992bc:	10001f1e 	bne	r2,zero,9933c <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   992c0:	e0bff917 	ldw	r2,-28(fp)
   992c4:	10c00417 	ldw	r3,16(r2)
   992c8:	18800017 	ldw	r2,0(r3)
   992cc:	e0bffa15 	stw	r2,-24(fp)
   992d0:	18c00104 	addi	r3,r3,4
   992d4:	e0bff917 	ldw	r2,-28(fp)
   992d8:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   992dc:	e0bff917 	ldw	r2,-28(fp)
   992e0:	1080058b 	ldhu	r2,22(r2)
   992e4:	10bfffc4 	addi	r2,r2,-1
   992e8:	1007883a 	mov	r3,r2
   992ec:	e0bff917 	ldw	r2,-28(fp)
   992f0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   992f4:	e0bff917 	ldw	r2,-28(fp)
   992f8:	10c00417 	ldw	r3,16(r2)
   992fc:	e0bff917 	ldw	r2,-28(fp)
   99300:	10800217 	ldw	r2,8(r2)
   99304:	1880041e 	bne	r3,r2,99318 <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
   99308:	e0bff917 	ldw	r2,-28(fp)
   9930c:	10c00117 	ldw	r3,4(r2)
   99310:	e0bff917 	ldw	r2,-28(fp)
   99314:	10c00415 	stw	r3,16(r2)
   99318:	e0bff817 	ldw	r2,-32(fp)
   9931c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   99320:	e0bff617 	ldw	r2,-40(fp)
   99324:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   99328:	e0bffd17 	ldw	r2,-12(fp)
   9932c:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   99330:	e0bffa17 	ldw	r2,-24(fp)
   99334:	e0bfff15 	stw	r2,-4(fp)
   99338:	00005e06 	br	994b4 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   9933c:	008002b4 	movhi	r2,10
   99340:	108e5404 	addi	r2,r2,14672
   99344:	10c00017 	ldw	r3,0(r2)
   99348:	008002b4 	movhi	r2,10
   9934c:	108e5404 	addi	r2,r2,14672
   99350:	10800017 	ldw	r2,0(r2)
   99354:	10800c03 	ldbu	r2,48(r2)
   99358:	10800114 	ori	r2,r2,4
   9935c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   99360:	008002b4 	movhi	r2,10
   99364:	108e5404 	addi	r2,r2,14672
   99368:	10800017 	ldw	r2,0(r2)
   9936c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   99370:	008002b4 	movhi	r2,10
   99374:	108e5404 	addi	r2,r2,14672
   99378:	10c00017 	ldw	r3,0(r2)
   9937c:	e0bffc0b 	ldhu	r2,-16(fp)
   99380:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   99384:	e13ffb17 	ldw	r4,-20(fp)
   99388:	00937e00 	call	937e0 <OS_EventTaskWait>
   9938c:	e0bff817 	ldw	r2,-32(fp)
   99390:	e0bff515 	stw	r2,-44(fp)
   99394:	e0bff517 	ldw	r2,-44(fp)
   99398:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   9939c:	009408c0 	call	9408c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   993a0:	0005303a 	rdctl	r2,status
   993a4:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   993a8:	e0fff417 	ldw	r3,-48(fp)
   993ac:	00bfff84 	movi	r2,-2
   993b0:	1884703a 	and	r2,r3,r2
   993b4:	1001703a 	wrctl	status,r2
  
  return context;
   993b8:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
   993bc:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   993c0:	008002b4 	movhi	r2,10
   993c4:	108e5404 	addi	r2,r2,14672
   993c8:	10800017 	ldw	r2,0(r2)
   993cc:	10800c43 	ldbu	r2,49(r2)
   993d0:	10803fcc 	andi	r2,r2,255
   993d4:	e0bffe15 	stw	r2,-8(fp)
   993d8:	e0fffe17 	ldw	r3,-8(fp)
   993dc:	1805003a 	cmpeq	r2,r3,zero
   993e0:	1000041e 	bne	r2,zero,993f4 <OSQPend+0x248>
   993e4:	e0fffe17 	ldw	r3,-8(fp)
   993e8:	188000a0 	cmpeqi	r2,r3,2
   993ec:	1000091e 	bne	r2,zero,99414 <OSQPend+0x268>
   993f0:	00000d06 	br	99428 <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   993f4:	008002b4 	movhi	r2,10
   993f8:	108e5404 	addi	r2,r2,14672
   993fc:	10800017 	ldw	r2,0(r2)
   99400:	10800917 	ldw	r2,36(r2)
   99404:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
   99408:	e0bffd17 	ldw	r2,-12(fp)
   9940c:	10000005 	stb	zero,0(r2)
             break;
   99410:	00000e06 	br	9944c <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   99414:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   99418:	e0fffd17 	ldw	r3,-12(fp)
   9941c:	00800384 	movi	r2,14
   99420:	18800005 	stb	r2,0(r3)
             break;
   99424:	00000906 	br	9944c <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   99428:	008002b4 	movhi	r2,10
   9942c:	108e5404 	addi	r2,r2,14672
   99430:	11000017 	ldw	r4,0(r2)
   99434:	e17ffb17 	ldw	r5,-20(fp)
   99438:	0093a440 	call	93a44 <OS_EventTaskRemove>
             pmsg = (void *)0;
   9943c:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   99440:	e0fffd17 	ldw	r3,-12(fp)
   99444:	00800284 	movi	r2,10
   99448:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   9944c:	008002b4 	movhi	r2,10
   99450:	108e5404 	addi	r2,r2,14672
   99454:	10800017 	ldw	r2,0(r2)
   99458:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   9945c:	008002b4 	movhi	r2,10
   99460:	108e5404 	addi	r2,r2,14672
   99464:	10800017 	ldw	r2,0(r2)
   99468:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   9946c:	008002b4 	movhi	r2,10
   99470:	108e5404 	addi	r2,r2,14672
   99474:	10800017 	ldw	r2,0(r2)
   99478:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   9947c:	008002b4 	movhi	r2,10
   99480:	108e5404 	addi	r2,r2,14672
   99484:	10800017 	ldw	r2,0(r2)
   99488:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   9948c:	008002b4 	movhi	r2,10
   99490:	108e5404 	addi	r2,r2,14672
   99494:	10800017 	ldw	r2,0(r2)
   99498:	10000915 	stw	zero,36(r2)
   9949c:	e0bff817 	ldw	r2,-32(fp)
   994a0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   994a4:	e0bff317 	ldw	r2,-52(fp)
   994a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   994ac:	e0bffa17 	ldw	r2,-24(fp)
   994b0:	e0bfff15 	stw	r2,-4(fp)
   994b4:	e0bfff17 	ldw	r2,-4(fp)
}
   994b8:	e037883a 	mov	sp,fp
   994bc:	dfc00117 	ldw	ra,4(sp)
   994c0:	df000017 	ldw	fp,0(sp)
   994c4:	dec00204 	addi	sp,sp,8
   994c8:	f800283a 	ret

000994cc <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   994cc:	defff504 	addi	sp,sp,-44
   994d0:	dfc00a15 	stw	ra,40(sp)
   994d4:	df000915 	stw	fp,36(sp)
   994d8:	df000904 	addi	fp,sp,36
   994dc:	e13ffc15 	stw	r4,-16(fp)
   994e0:	e1bffe15 	stw	r6,-8(fp)
   994e4:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   994e8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   994ec:	e0bffe17 	ldw	r2,-8(fp)
   994f0:	1004c03a 	cmpne	r2,r2,zero
   994f4:	1000021e 	bne	r2,zero,99500 <OSQPendAbort+0x34>
        return (0);
   994f8:	e03fff15 	stw	zero,-4(fp)
   994fc:	00004c06 	br	99630 <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   99500:	e0bffc17 	ldw	r2,-16(fp)
   99504:	1004c03a 	cmpne	r2,r2,zero
   99508:	1000051e 	bne	r2,zero,99520 <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
   9950c:	e0fffe17 	ldw	r3,-8(fp)
   99510:	00800104 	movi	r2,4
   99514:	18800005 	stb	r2,0(r3)
        return (0);
   99518:	e03fff15 	stw	zero,-4(fp)
   9951c:	00004406 	br	99630 <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   99520:	e0bffc17 	ldw	r2,-16(fp)
   99524:	10800003 	ldbu	r2,0(r2)
   99528:	10803fcc 	andi	r2,r2,255
   9952c:	108000a0 	cmpeqi	r2,r2,2
   99530:	1000051e 	bne	r2,zero,99548 <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   99534:	e0fffe17 	ldw	r3,-8(fp)
   99538:	00800044 	movi	r2,1
   9953c:	18800005 	stb	r2,0(r3)
        return (0);
   99540:	e03fff15 	stw	zero,-4(fp)
   99544:	00003a06 	br	99630 <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   99548:	0005303a 	rdctl	r2,status
   9954c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   99550:	e0fff917 	ldw	r3,-28(fp)
   99554:	00bfff84 	movi	r2,-2
   99558:	1884703a 	and	r2,r3,r2
   9955c:	1001703a 	wrctl	status,r2
  
  return context;
   99560:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   99564:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   99568:	e0bffc17 	ldw	r2,-16(fp)
   9956c:	10800283 	ldbu	r2,10(r2)
   99570:	10803fcc 	andi	r2,r2,255
   99574:	1005003a 	cmpeq	r2,r2,zero
   99578:	1000261e 	bne	r2,zero,99614 <OSQPendAbort+0x148>
        nbr_tasks = 0;
   9957c:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
   99580:	e0bffd03 	ldbu	r2,-12(fp)
   99584:	10800060 	cmpeqi	r2,r2,1
   99588:	1000091e 	bne	r2,zero,995b0 <OSQPendAbort+0xe4>
   9958c:	00000e06 	br	995c8 <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   99590:	e13ffc17 	ldw	r4,-16(fp)
   99594:	000b883a 	mov	r5,zero
   99598:	01800104 	movi	r6,4
   9959c:	01c00084 	movi	r7,2
   995a0:	009364c0 	call	9364c <OS_EventTaskRdy>
                     nbr_tasks++;
   995a4:	e0bffb03 	ldbu	r2,-20(fp)
   995a8:	10800044 	addi	r2,r2,1
   995ac:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   995b0:	e0bffc17 	ldw	r2,-16(fp)
   995b4:	10800283 	ldbu	r2,10(r2)
   995b8:	10803fcc 	andi	r2,r2,255
   995bc:	1004c03a 	cmpne	r2,r2,zero
   995c0:	103ff31e 	bne	r2,zero,99590 <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   995c4:	00000806 	br	995e8 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   995c8:	e13ffc17 	ldw	r4,-16(fp)
   995cc:	000b883a 	mov	r5,zero
   995d0:	01800104 	movi	r6,4
   995d4:	01c00084 	movi	r7,2
   995d8:	009364c0 	call	9364c <OS_EventTaskRdy>
                 nbr_tasks++;
   995dc:	e0bffb03 	ldbu	r2,-20(fp)
   995e0:	10800044 	addi	r2,r2,1
   995e4:	e0bffb05 	stb	r2,-20(fp)
   995e8:	e0bffa17 	ldw	r2,-24(fp)
   995ec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   995f0:	e0bff817 	ldw	r2,-32(fp)
   995f4:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   995f8:	009408c0 	call	9408c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   995fc:	e0fffe17 	ldw	r3,-8(fp)
   99600:	00800384 	movi	r2,14
   99604:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
   99608:	e0bffb03 	ldbu	r2,-20(fp)
   9960c:	e0bfff15 	stw	r2,-4(fp)
   99610:	00000706 	br	99630 <OSQPendAbort+0x164>
   99614:	e0bffa17 	ldw	r2,-24(fp)
   99618:	e0bff715 	stw	r2,-36(fp)
   9961c:	e0bff717 	ldw	r2,-36(fp)
   99620:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   99624:	e0bffe17 	ldw	r2,-8(fp)
   99628:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   9962c:	e03fff15 	stw	zero,-4(fp)
   99630:	e0bfff17 	ldw	r2,-4(fp)
}
   99634:	e037883a 	mov	sp,fp
   99638:	dfc00117 	ldw	ra,4(sp)
   9963c:	df000017 	ldw	fp,0(sp)
   99640:	dec00204 	addi	sp,sp,8
   99644:	f800283a 	ret

00099648 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   99648:	defff504 	addi	sp,sp,-44
   9964c:	dfc00a15 	stw	ra,40(sp)
   99650:	df000915 	stw	fp,36(sp)
   99654:	df000904 	addi	fp,sp,36
   99658:	e13ffd15 	stw	r4,-12(fp)
   9965c:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   99660:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   99664:	e0bffd17 	ldw	r2,-12(fp)
   99668:	1004c03a 	cmpne	r2,r2,zero
   9966c:	1000031e 	bne	r2,zero,9967c <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
   99670:	00800104 	movi	r2,4
   99674:	e0bfff15 	stw	r2,-4(fp)
   99678:	00004d06 	br	997b0 <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   9967c:	e0bffd17 	ldw	r2,-12(fp)
   99680:	10800003 	ldbu	r2,0(r2)
   99684:	10803fcc 	andi	r2,r2,255
   99688:	108000a0 	cmpeqi	r2,r2,2
   9968c:	1000031e 	bne	r2,zero,9969c <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
   99690:	00800044 	movi	r2,1
   99694:	e0bfff15 	stw	r2,-4(fp)
   99698:	00004506 	br	997b0 <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9969c:	0005303a 	rdctl	r2,status
   996a0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   996a4:	e0fffa17 	ldw	r3,-24(fp)
   996a8:	00bfff84 	movi	r2,-2
   996ac:	1884703a 	and	r2,r3,r2
   996b0:	1001703a 	wrctl	status,r2
  
  return context;
   996b4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   996b8:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   996bc:	e0bffd17 	ldw	r2,-12(fp)
   996c0:	10800283 	ldbu	r2,10(r2)
   996c4:	10803fcc 	andi	r2,r2,255
   996c8:	1005003a 	cmpeq	r2,r2,zero
   996cc:	10000c1e 	bne	r2,zero,99700 <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   996d0:	e13ffd17 	ldw	r4,-12(fp)
   996d4:	e17ffe17 	ldw	r5,-8(fp)
   996d8:	01800104 	movi	r6,4
   996dc:	000f883a 	mov	r7,zero
   996e0:	009364c0 	call	9364c <OS_EventTaskRdy>
   996e4:	e0bffb17 	ldw	r2,-20(fp)
   996e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   996ec:	e0bff917 	ldw	r2,-28(fp)
   996f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   996f4:	009408c0 	call	9408c <OS_Sched>
        return (OS_ERR_NONE);
   996f8:	e03fff15 	stw	zero,-4(fp)
   996fc:	00002c06 	br	997b0 <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   99700:	e0bffd17 	ldw	r2,-12(fp)
   99704:	10800117 	ldw	r2,4(r2)
   99708:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   9970c:	e0bffc17 	ldw	r2,-16(fp)
   99710:	10c0058b 	ldhu	r3,22(r2)
   99714:	e0bffc17 	ldw	r2,-16(fp)
   99718:	1080050b 	ldhu	r2,20(r2)
   9971c:	18ffffcc 	andi	r3,r3,65535
   99720:	10bfffcc 	andi	r2,r2,65535
   99724:	18800736 	bltu	r3,r2,99744 <OSQPost+0xfc>
   99728:	e0bffb17 	ldw	r2,-20(fp)
   9972c:	e0bff815 	stw	r2,-32(fp)
   99730:	e0bff817 	ldw	r2,-32(fp)
   99734:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   99738:	00800784 	movi	r2,30
   9973c:	e0bfff15 	stw	r2,-4(fp)
   99740:	00001b06 	br	997b0 <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   99744:	e0bffc17 	ldw	r2,-16(fp)
   99748:	10c00317 	ldw	r3,12(r2)
   9974c:	e0bffe17 	ldw	r2,-8(fp)
   99750:	18800015 	stw	r2,0(r3)
   99754:	18c00104 	addi	r3,r3,4
   99758:	e0bffc17 	ldw	r2,-16(fp)
   9975c:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   99760:	e0bffc17 	ldw	r2,-16(fp)
   99764:	1080058b 	ldhu	r2,22(r2)
   99768:	10800044 	addi	r2,r2,1
   9976c:	1007883a 	mov	r3,r2
   99770:	e0bffc17 	ldw	r2,-16(fp)
   99774:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   99778:	e0bffc17 	ldw	r2,-16(fp)
   9977c:	10c00317 	ldw	r3,12(r2)
   99780:	e0bffc17 	ldw	r2,-16(fp)
   99784:	10800217 	ldw	r2,8(r2)
   99788:	1880041e 	bne	r3,r2,9979c <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
   9978c:	e0bffc17 	ldw	r2,-16(fp)
   99790:	10c00117 	ldw	r3,4(r2)
   99794:	e0bffc17 	ldw	r2,-16(fp)
   99798:	10c00315 	stw	r3,12(r2)
   9979c:	e0bffb17 	ldw	r2,-20(fp)
   997a0:	e0bff715 	stw	r2,-36(fp)
   997a4:	e0bff717 	ldw	r2,-36(fp)
   997a8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   997ac:	e03fff15 	stw	zero,-4(fp)
   997b0:	e0bfff17 	ldw	r2,-4(fp)
}
   997b4:	e037883a 	mov	sp,fp
   997b8:	dfc00117 	ldw	ra,4(sp)
   997bc:	df000017 	ldw	fp,0(sp)
   997c0:	dec00204 	addi	sp,sp,8
   997c4:	f800283a 	ret

000997c8 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   997c8:	defff504 	addi	sp,sp,-44
   997cc:	dfc00a15 	stw	ra,40(sp)
   997d0:	df000915 	stw	fp,36(sp)
   997d4:	df000904 	addi	fp,sp,36
   997d8:	e13ffd15 	stw	r4,-12(fp)
   997dc:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   997e0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   997e4:	e0bffd17 	ldw	r2,-12(fp)
   997e8:	1004c03a 	cmpne	r2,r2,zero
   997ec:	1000031e 	bne	r2,zero,997fc <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
   997f0:	00800104 	movi	r2,4
   997f4:	e0bfff15 	stw	r2,-4(fp)
   997f8:	00004f06 	br	99938 <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   997fc:	e0bffd17 	ldw	r2,-12(fp)
   99800:	10800003 	ldbu	r2,0(r2)
   99804:	10803fcc 	andi	r2,r2,255
   99808:	108000a0 	cmpeqi	r2,r2,2
   9980c:	1000031e 	bne	r2,zero,9981c <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
   99810:	00800044 	movi	r2,1
   99814:	e0bfff15 	stw	r2,-4(fp)
   99818:	00004706 	br	99938 <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9981c:	0005303a 	rdctl	r2,status
   99820:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   99824:	e0fffa17 	ldw	r3,-24(fp)
   99828:	00bfff84 	movi	r2,-2
   9982c:	1884703a 	and	r2,r3,r2
   99830:	1001703a 	wrctl	status,r2
  
  return context;
   99834:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   99838:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   9983c:	e0bffd17 	ldw	r2,-12(fp)
   99840:	10800283 	ldbu	r2,10(r2)
   99844:	10803fcc 	andi	r2,r2,255
   99848:	1005003a 	cmpeq	r2,r2,zero
   9984c:	10000c1e 	bne	r2,zero,99880 <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   99850:	e13ffd17 	ldw	r4,-12(fp)
   99854:	e17ffe17 	ldw	r5,-8(fp)
   99858:	01800104 	movi	r6,4
   9985c:	000f883a 	mov	r7,zero
   99860:	009364c0 	call	9364c <OS_EventTaskRdy>
   99864:	e0bffb17 	ldw	r2,-20(fp)
   99868:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9986c:	e0bff917 	ldw	r2,-28(fp)
   99870:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   99874:	009408c0 	call	9408c <OS_Sched>
        return (OS_ERR_NONE);
   99878:	e03fff15 	stw	zero,-4(fp)
   9987c:	00002e06 	br	99938 <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   99880:	e0bffd17 	ldw	r2,-12(fp)
   99884:	10800117 	ldw	r2,4(r2)
   99888:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   9988c:	e0bffc17 	ldw	r2,-16(fp)
   99890:	10c0058b 	ldhu	r3,22(r2)
   99894:	e0bffc17 	ldw	r2,-16(fp)
   99898:	1080050b 	ldhu	r2,20(r2)
   9989c:	18ffffcc 	andi	r3,r3,65535
   998a0:	10bfffcc 	andi	r2,r2,65535
   998a4:	18800736 	bltu	r3,r2,998c4 <OSQPostFront+0xfc>
   998a8:	e0bffb17 	ldw	r2,-20(fp)
   998ac:	e0bff815 	stw	r2,-32(fp)
   998b0:	e0bff817 	ldw	r2,-32(fp)
   998b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   998b8:	00800784 	movi	r2,30
   998bc:	e0bfff15 	stw	r2,-4(fp)
   998c0:	00001d06 	br	99938 <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   998c4:	e0bffc17 	ldw	r2,-16(fp)
   998c8:	10c00417 	ldw	r3,16(r2)
   998cc:	e0bffc17 	ldw	r2,-16(fp)
   998d0:	10800117 	ldw	r2,4(r2)
   998d4:	1880041e 	bne	r3,r2,998e8 <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
   998d8:	e0bffc17 	ldw	r2,-16(fp)
   998dc:	10c00217 	ldw	r3,8(r2)
   998e0:	e0bffc17 	ldw	r2,-16(fp)
   998e4:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   998e8:	e0bffc17 	ldw	r2,-16(fp)
   998ec:	10800417 	ldw	r2,16(r2)
   998f0:	10ffff04 	addi	r3,r2,-4
   998f4:	e0bffc17 	ldw	r2,-16(fp)
   998f8:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   998fc:	e0bffc17 	ldw	r2,-16(fp)
   99900:	10c00417 	ldw	r3,16(r2)
   99904:	e0bffe17 	ldw	r2,-8(fp)
   99908:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   9990c:	e0bffc17 	ldw	r2,-16(fp)
   99910:	1080058b 	ldhu	r2,22(r2)
   99914:	10800044 	addi	r2,r2,1
   99918:	1007883a 	mov	r3,r2
   9991c:	e0bffc17 	ldw	r2,-16(fp)
   99920:	10c0058d 	sth	r3,22(r2)
   99924:	e0bffb17 	ldw	r2,-20(fp)
   99928:	e0bff715 	stw	r2,-36(fp)
   9992c:	e0bff717 	ldw	r2,-36(fp)
   99930:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   99934:	e03fff15 	stw	zero,-4(fp)
   99938:	e0bfff17 	ldw	r2,-4(fp)
}
   9993c:	e037883a 	mov	sp,fp
   99940:	dfc00117 	ldw	ra,4(sp)
   99944:	df000017 	ldw	fp,0(sp)
   99948:	dec00204 	addi	sp,sp,8
   9994c:	f800283a 	ret

00099950 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   99950:	defff404 	addi	sp,sp,-48
   99954:	dfc00b15 	stw	ra,44(sp)
   99958:	df000a15 	stw	fp,40(sp)
   9995c:	df000a04 	addi	fp,sp,40
   99960:	e13ffc15 	stw	r4,-16(fp)
   99964:	e17ffd15 	stw	r5,-12(fp)
   99968:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   9996c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   99970:	e0bffc17 	ldw	r2,-16(fp)
   99974:	1004c03a 	cmpne	r2,r2,zero
   99978:	1000031e 	bne	r2,zero,99988 <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
   9997c:	00800104 	movi	r2,4
   99980:	e0bfff15 	stw	r2,-4(fp)
   99984:	00007906 	br	99b6c <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   99988:	e0bffc17 	ldw	r2,-16(fp)
   9998c:	10800003 	ldbu	r2,0(r2)
   99990:	10803fcc 	andi	r2,r2,255
   99994:	108000a0 	cmpeqi	r2,r2,2
   99998:	1000031e 	bne	r2,zero,999a8 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
   9999c:	00800044 	movi	r2,1
   999a0:	e0bfff15 	stw	r2,-4(fp)
   999a4:	00007106 	br	99b6c <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   999a8:	0005303a 	rdctl	r2,status
   999ac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   999b0:	e0fff917 	ldw	r3,-28(fp)
   999b4:	00bfff84 	movi	r2,-2
   999b8:	1884703a 	and	r2,r3,r2
   999bc:	1001703a 	wrctl	status,r2
  
  return context;
   999c0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   999c4:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   999c8:	e0bffc17 	ldw	r2,-16(fp)
   999cc:	10800283 	ldbu	r2,10(r2)
   999d0:	10803fcc 	andi	r2,r2,255
   999d4:	1005003a 	cmpeq	r2,r2,zero
   999d8:	1000211e 	bne	r2,zero,99a60 <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   999dc:	e0bffe03 	ldbu	r2,-8(fp)
   999e0:	1080004c 	andi	r2,r2,1
   999e4:	10803fcc 	andi	r2,r2,255
   999e8:	1005003a 	cmpeq	r2,r2,zero
   999ec:	10000c1e 	bne	r2,zero,99a20 <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   999f0:	00000506 	br	99a08 <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   999f4:	e13ffc17 	ldw	r4,-16(fp)
   999f8:	e17ffd17 	ldw	r5,-12(fp)
   999fc:	01800104 	movi	r6,4
   99a00:	000f883a 	mov	r7,zero
   99a04:	009364c0 	call	9364c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   99a08:	e0bffc17 	ldw	r2,-16(fp)
   99a0c:	10800283 	ldbu	r2,10(r2)
   99a10:	10803fcc 	andi	r2,r2,255
   99a14:	1004c03a 	cmpne	r2,r2,zero
   99a18:	103ff61e 	bne	r2,zero,999f4 <OSQPostOpt+0xa4>
   99a1c:	00000506 	br	99a34 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   99a20:	e13ffc17 	ldw	r4,-16(fp)
   99a24:	e17ffd17 	ldw	r5,-12(fp)
   99a28:	01800104 	movi	r6,4
   99a2c:	000f883a 	mov	r7,zero
   99a30:	009364c0 	call	9364c <OS_EventTaskRdy>
   99a34:	e0bffa17 	ldw	r2,-24(fp)
   99a38:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   99a3c:	e0bff817 	ldw	r2,-32(fp)
   99a40:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   99a44:	e0bffe03 	ldbu	r2,-8(fp)
   99a48:	1080010c 	andi	r2,r2,4
   99a4c:	1004c03a 	cmpne	r2,r2,zero
   99a50:	1000011e 	bne	r2,zero,99a58 <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
   99a54:	009408c0 	call	9408c <OS_Sched>
        }
        return (OS_ERR_NONE);
   99a58:	e03fff15 	stw	zero,-4(fp)
   99a5c:	00004306 	br	99b6c <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   99a60:	e0bffc17 	ldw	r2,-16(fp)
   99a64:	10800117 	ldw	r2,4(r2)
   99a68:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   99a6c:	e0bffb17 	ldw	r2,-20(fp)
   99a70:	10c0058b 	ldhu	r3,22(r2)
   99a74:	e0bffb17 	ldw	r2,-20(fp)
   99a78:	1080050b 	ldhu	r2,20(r2)
   99a7c:	18ffffcc 	andi	r3,r3,65535
   99a80:	10bfffcc 	andi	r2,r2,65535
   99a84:	18800736 	bltu	r3,r2,99aa4 <OSQPostOpt+0x154>
   99a88:	e0bffa17 	ldw	r2,-24(fp)
   99a8c:	e0bff715 	stw	r2,-36(fp)
   99a90:	e0bff717 	ldw	r2,-36(fp)
   99a94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   99a98:	00800784 	movi	r2,30
   99a9c:	e0bfff15 	stw	r2,-4(fp)
   99aa0:	00003206 	br	99b6c <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   99aa4:	e0bffe03 	ldbu	r2,-8(fp)
   99aa8:	1080008c 	andi	r2,r2,2
   99aac:	1005003a 	cmpeq	r2,r2,zero
   99ab0:	1000131e 	bne	r2,zero,99b00 <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   99ab4:	e0bffb17 	ldw	r2,-20(fp)
   99ab8:	10c00417 	ldw	r3,16(r2)
   99abc:	e0bffb17 	ldw	r2,-20(fp)
   99ac0:	10800117 	ldw	r2,4(r2)
   99ac4:	1880041e 	bne	r3,r2,99ad8 <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   99ac8:	e0bffb17 	ldw	r2,-20(fp)
   99acc:	10c00217 	ldw	r3,8(r2)
   99ad0:	e0bffb17 	ldw	r2,-20(fp)
   99ad4:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   99ad8:	e0bffb17 	ldw	r2,-20(fp)
   99adc:	10800417 	ldw	r2,16(r2)
   99ae0:	10ffff04 	addi	r3,r2,-4
   99ae4:	e0bffb17 	ldw	r2,-20(fp)
   99ae8:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   99aec:	e0bffb17 	ldw	r2,-20(fp)
   99af0:	10c00417 	ldw	r3,16(r2)
   99af4:	e0bffd17 	ldw	r2,-12(fp)
   99af8:	18800015 	stw	r2,0(r3)
   99afc:	00001006 	br	99b40 <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   99b00:	e0bffb17 	ldw	r2,-20(fp)
   99b04:	10c00317 	ldw	r3,12(r2)
   99b08:	e0bffd17 	ldw	r2,-12(fp)
   99b0c:	18800015 	stw	r2,0(r3)
   99b10:	18c00104 	addi	r3,r3,4
   99b14:	e0bffb17 	ldw	r2,-20(fp)
   99b18:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   99b1c:	e0bffb17 	ldw	r2,-20(fp)
   99b20:	10c00317 	ldw	r3,12(r2)
   99b24:	e0bffb17 	ldw	r2,-20(fp)
   99b28:	10800217 	ldw	r2,8(r2)
   99b2c:	1880041e 	bne	r3,r2,99b40 <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
   99b30:	e0bffb17 	ldw	r2,-20(fp)
   99b34:	10c00117 	ldw	r3,4(r2)
   99b38:	e0bffb17 	ldw	r2,-20(fp)
   99b3c:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   99b40:	e0bffb17 	ldw	r2,-20(fp)
   99b44:	1080058b 	ldhu	r2,22(r2)
   99b48:	10800044 	addi	r2,r2,1
   99b4c:	1007883a 	mov	r3,r2
   99b50:	e0bffb17 	ldw	r2,-20(fp)
   99b54:	10c0058d 	sth	r3,22(r2)
   99b58:	e0bffa17 	ldw	r2,-24(fp)
   99b5c:	e0bff615 	stw	r2,-40(fp)
   99b60:	e0bff617 	ldw	r2,-40(fp)
   99b64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   99b68:	e03fff15 	stw	zero,-4(fp)
   99b6c:	e0bfff17 	ldw	r2,-4(fp)
}
   99b70:	e037883a 	mov	sp,fp
   99b74:	dfc00117 	ldw	ra,4(sp)
   99b78:	df000017 	ldw	fp,0(sp)
   99b7c:	dec00204 	addi	sp,sp,8
   99b80:	f800283a 	ret

00099b84 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   99b84:	defff504 	addi	sp,sp,-44
   99b88:	df000a15 	stw	fp,40(sp)
   99b8c:	df000a04 	addi	fp,sp,40
   99b90:	e13ffd15 	stw	r4,-12(fp)
   99b94:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   99b98:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   99b9c:	e0bffd17 	ldw	r2,-12(fp)
   99ba0:	1004c03a 	cmpne	r2,r2,zero
   99ba4:	1000031e 	bne	r2,zero,99bb4 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
   99ba8:	00800104 	movi	r2,4
   99bac:	e0bfff15 	stw	r2,-4(fp)
   99bb0:	00004f06 	br	99cf0 <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   99bb4:	e0bffe17 	ldw	r2,-8(fp)
   99bb8:	1004c03a 	cmpne	r2,r2,zero
   99bbc:	1000031e 	bne	r2,zero,99bcc <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
   99bc0:	00800244 	movi	r2,9
   99bc4:	e0bfff15 	stw	r2,-4(fp)
   99bc8:	00004906 	br	99cf0 <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   99bcc:	e0bffd17 	ldw	r2,-12(fp)
   99bd0:	10800003 	ldbu	r2,0(r2)
   99bd4:	10803fcc 	andi	r2,r2,255
   99bd8:	108000a0 	cmpeqi	r2,r2,2
   99bdc:	1000031e 	bne	r2,zero,99bec <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
   99be0:	00800044 	movi	r2,1
   99be4:	e0bfff15 	stw	r2,-4(fp)
   99be8:	00004106 	br	99cf0 <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   99bec:	0005303a 	rdctl	r2,status
   99bf0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   99bf4:	e0fff717 	ldw	r3,-36(fp)
   99bf8:	00bfff84 	movi	r2,-2
   99bfc:	1884703a 	and	r2,r3,r2
   99c00:	1001703a 	wrctl	status,r2
  
  return context;
   99c04:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   99c08:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   99c0c:	e0bffd17 	ldw	r2,-12(fp)
   99c10:	10c00283 	ldbu	r3,10(r2)
   99c14:	e0bffe17 	ldw	r2,-8(fp)
   99c18:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   99c1c:	e0bffd17 	ldw	r2,-12(fp)
   99c20:	108002c4 	addi	r2,r2,11
   99c24:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   99c28:	e0bffe17 	ldw	r2,-8(fp)
   99c2c:	10800204 	addi	r2,r2,8
   99c30:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   99c34:	e03ffb05 	stb	zero,-20(fp)
   99c38:	00000d06 	br	99c70 <OSQQuery+0xec>
        *pdest++ = *psrc++;
   99c3c:	e0bffa17 	ldw	r2,-24(fp)
   99c40:	10c00003 	ldbu	r3,0(r2)
   99c44:	e0bff917 	ldw	r2,-28(fp)
   99c48:	10c00005 	stb	r3,0(r2)
   99c4c:	e0bff917 	ldw	r2,-28(fp)
   99c50:	10800044 	addi	r2,r2,1
   99c54:	e0bff915 	stw	r2,-28(fp)
   99c58:	e0bffa17 	ldw	r2,-24(fp)
   99c5c:	10800044 	addi	r2,r2,1
   99c60:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   99c64:	e0bffb03 	ldbu	r2,-20(fp)
   99c68:	10800044 	addi	r2,r2,1
   99c6c:	e0bffb05 	stb	r2,-20(fp)
   99c70:	e0bffb03 	ldbu	r2,-20(fp)
   99c74:	108000f0 	cmpltui	r2,r2,3
   99c78:	103ff01e 	bne	r2,zero,99c3c <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   99c7c:	e0bffd17 	ldw	r2,-12(fp)
   99c80:	10800117 	ldw	r2,4(r2)
   99c84:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   99c88:	e0bffc17 	ldw	r2,-16(fp)
   99c8c:	1080058b 	ldhu	r2,22(r2)
   99c90:	10bfffcc 	andi	r2,r2,65535
   99c94:	1005003a 	cmpeq	r2,r2,zero
   99c98:	1000061e 	bne	r2,zero,99cb4 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   99c9c:	e0bffc17 	ldw	r2,-16(fp)
   99ca0:	10800417 	ldw	r2,16(r2)
   99ca4:	10c00017 	ldw	r3,0(r2)
   99ca8:	e0bffe17 	ldw	r2,-8(fp)
   99cac:	10c00015 	stw	r3,0(r2)
   99cb0:	00000206 	br	99cbc <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
   99cb4:	e0bffe17 	ldw	r2,-8(fp)
   99cb8:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   99cbc:	e0bffc17 	ldw	r2,-16(fp)
   99cc0:	10c0058b 	ldhu	r3,22(r2)
   99cc4:	e0bffe17 	ldw	r2,-8(fp)
   99cc8:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   99ccc:	e0bffc17 	ldw	r2,-16(fp)
   99cd0:	10c0050b 	ldhu	r3,20(r2)
   99cd4:	e0bffe17 	ldw	r2,-8(fp)
   99cd8:	10c0018d 	sth	r3,6(r2)
   99cdc:	e0bff817 	ldw	r2,-32(fp)
   99ce0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   99ce4:	e0bff617 	ldw	r2,-40(fp)
   99ce8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   99cec:	e03fff15 	stw	zero,-4(fp)
   99cf0:	e0bfff17 	ldw	r2,-4(fp)
}
   99cf4:	e037883a 	mov	sp,fp
   99cf8:	df000017 	ldw	fp,0(sp)
   99cfc:	dec00104 	addi	sp,sp,4
   99d00:	f800283a 	ret

00099d04 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   99d04:	defffb04 	addi	sp,sp,-20
   99d08:	dfc00415 	stw	ra,16(sp)
   99d0c:	df000315 	stw	fp,12(sp)
   99d10:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   99d14:	010002f4 	movhi	r4,11
   99d18:	211c2d04 	addi	r4,r4,28852
   99d1c:	01407804 	movi	r5,480
   99d20:	0093fcc0 	call	93fcc <OS_MemClr>
    pq1 = &OSQTbl[0];
   99d24:	008002f4 	movhi	r2,11
   99d28:	109c2d04 	addi	r2,r2,28852
   99d2c:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   99d30:	008002f4 	movhi	r2,11
   99d34:	109c3304 	addi	r2,r2,28876
   99d38:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   99d3c:	e03fff0d 	sth	zero,-4(fp)
   99d40:	00000c06 	br	99d74 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   99d44:	e0fffe17 	ldw	r3,-8(fp)
   99d48:	e0bffd17 	ldw	r2,-12(fp)
   99d4c:	18800015 	stw	r2,0(r3)
        pq1++;
   99d50:	e0bffe17 	ldw	r2,-8(fp)
   99d54:	10800604 	addi	r2,r2,24
   99d58:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   99d5c:	e0bffd17 	ldw	r2,-12(fp)
   99d60:	10800604 	addi	r2,r2,24
   99d64:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   99d68:	e0bfff0b 	ldhu	r2,-4(fp)
   99d6c:	10800044 	addi	r2,r2,1
   99d70:	e0bfff0d 	sth	r2,-4(fp)
   99d74:	e0bfff0b 	ldhu	r2,-4(fp)
   99d78:	108004f0 	cmpltui	r2,r2,19
   99d7c:	103ff11e 	bne	r2,zero,99d44 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   99d80:	e0bffe17 	ldw	r2,-8(fp)
   99d84:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   99d88:	00c002b4 	movhi	r3,10
   99d8c:	18ce5004 	addi	r3,r3,14656
   99d90:	008002f4 	movhi	r2,11
   99d94:	109c2d04 	addi	r2,r2,28852
   99d98:	18800015 	stw	r2,0(r3)
#endif
}
   99d9c:	e037883a 	mov	sp,fp
   99da0:	dfc00117 	ldw	ra,4(sp)
   99da4:	df000017 	ldw	fp,0(sp)
   99da8:	dec00204 	addi	sp,sp,8
   99dac:	f800283a 	ret

00099db0 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   99db0:	defff904 	addi	sp,sp,-28
   99db4:	df000615 	stw	fp,24(sp)
   99db8:	df000604 	addi	fp,sp,24
   99dbc:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   99dc0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   99dc4:	e0bffe17 	ldw	r2,-8(fp)
   99dc8:	1004c03a 	cmpne	r2,r2,zero
   99dcc:	1000021e 	bne	r2,zero,99dd8 <OSSemAccept+0x28>
        return (0);
   99dd0:	e03fff15 	stw	zero,-4(fp)
   99dd4:	00002106 	br	99e5c <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   99dd8:	e0bffe17 	ldw	r2,-8(fp)
   99ddc:	10800003 	ldbu	r2,0(r2)
   99de0:	10803fcc 	andi	r2,r2,255
   99de4:	108000e0 	cmpeqi	r2,r2,3
   99de8:	1000021e 	bne	r2,zero,99df4 <OSSemAccept+0x44>
        return (0);
   99dec:	e03fff15 	stw	zero,-4(fp)
   99df0:	00001a06 	br	99e5c <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   99df4:	0005303a 	rdctl	r2,status
   99df8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   99dfc:	e0fffb17 	ldw	r3,-20(fp)
   99e00:	00bfff84 	movi	r2,-2
   99e04:	1884703a 	and	r2,r3,r2
   99e08:	1001703a 	wrctl	status,r2
  
  return context;
   99e0c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   99e10:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
   99e14:	e0bffe17 	ldw	r2,-8(fp)
   99e18:	1080020b 	ldhu	r2,8(r2)
   99e1c:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   99e20:	e0bffd0b 	ldhu	r2,-12(fp)
   99e24:	1005003a 	cmpeq	r2,r2,zero
   99e28:	1000061e 	bne	r2,zero,99e44 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   99e2c:	e0bffe17 	ldw	r2,-8(fp)
   99e30:	1080020b 	ldhu	r2,8(r2)
   99e34:	10bfffc4 	addi	r2,r2,-1
   99e38:	1007883a 	mov	r3,r2
   99e3c:	e0bffe17 	ldw	r2,-8(fp)
   99e40:	10c0020d 	sth	r3,8(r2)
   99e44:	e0bffc17 	ldw	r2,-16(fp)
   99e48:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   99e4c:	e0bffa17 	ldw	r2,-24(fp)
   99e50:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   99e54:	e0bffd0b 	ldhu	r2,-12(fp)
   99e58:	e0bfff15 	stw	r2,-4(fp)
   99e5c:	e0bfff17 	ldw	r2,-4(fp)
}
   99e60:	e037883a 	mov	sp,fp
   99e64:	df000017 	ldw	fp,0(sp)
   99e68:	dec00104 	addi	sp,sp,4
   99e6c:	f800283a 	ret

00099e70 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   99e70:	defff804 	addi	sp,sp,-32
   99e74:	dfc00715 	stw	ra,28(sp)
   99e78:	df000615 	stw	fp,24(sp)
   99e7c:	df000604 	addi	fp,sp,24
   99e80:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   99e84:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   99e88:	008002b4 	movhi	r2,10
   99e8c:	108e5304 	addi	r2,r2,14668
   99e90:	10800003 	ldbu	r2,0(r2)
   99e94:	10803fcc 	andi	r2,r2,255
   99e98:	1005003a 	cmpeq	r2,r2,zero
   99e9c:	1000021e 	bne	r2,zero,99ea8 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   99ea0:	e03fff15 	stw	zero,-4(fp)
   99ea4:	00003106 	br	99f6c <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   99ea8:	0005303a 	rdctl	r2,status
   99eac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   99eb0:	e0fffb17 	ldw	r3,-20(fp)
   99eb4:	00bfff84 	movi	r2,-2
   99eb8:	1884703a 	and	r2,r3,r2
   99ebc:	1001703a 	wrctl	status,r2
  
  return context;
   99ec0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   99ec4:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   99ec8:	008002b4 	movhi	r2,10
   99ecc:	108e5204 	addi	r2,r2,14664
   99ed0:	10800017 	ldw	r2,0(r2)
   99ed4:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   99ed8:	008002b4 	movhi	r2,10
   99edc:	108e5204 	addi	r2,r2,14664
   99ee0:	10800017 	ldw	r2,0(r2)
   99ee4:	1005003a 	cmpeq	r2,r2,zero
   99ee8:	1000081e 	bne	r2,zero,99f0c <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   99eec:	008002b4 	movhi	r2,10
   99ef0:	108e5204 	addi	r2,r2,14664
   99ef4:	10800017 	ldw	r2,0(r2)
   99ef8:	10800117 	ldw	r2,4(r2)
   99efc:	1007883a 	mov	r3,r2
   99f00:	008002b4 	movhi	r2,10
   99f04:	108e5204 	addi	r2,r2,14664
   99f08:	10c00015 	stw	r3,0(r2)
   99f0c:	e0bffc17 	ldw	r2,-16(fp)
   99f10:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   99f14:	e0bffa17 	ldw	r2,-24(fp)
   99f18:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   99f1c:	e0bffd17 	ldw	r2,-12(fp)
   99f20:	1005003a 	cmpeq	r2,r2,zero
   99f24:	10000f1e 	bne	r2,zero,99f64 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   99f28:	e0fffd17 	ldw	r3,-12(fp)
   99f2c:	008000c4 	movi	r2,3
   99f30:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   99f34:	e0fffd17 	ldw	r3,-12(fp)
   99f38:	e0bffe0b 	ldhu	r2,-8(fp)
   99f3c:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   99f40:	e0bffd17 	ldw	r2,-12(fp)
   99f44:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   99f48:	e0fffd17 	ldw	r3,-12(fp)
   99f4c:	00800fc4 	movi	r2,63
   99f50:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   99f54:	e0bffd17 	ldw	r2,-12(fp)
   99f58:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   99f5c:	e13ffd17 	ldw	r4,-12(fp)
   99f60:	0093c000 	call	93c00 <OS_EventWaitListInit>
    }
    return (pevent);
   99f64:	e0bffd17 	ldw	r2,-12(fp)
   99f68:	e0bfff15 	stw	r2,-4(fp)
   99f6c:	e0bfff17 	ldw	r2,-4(fp)
}
   99f70:	e037883a 	mov	sp,fp
   99f74:	dfc00117 	ldw	ra,4(sp)
   99f78:	df000017 	ldw	fp,0(sp)
   99f7c:	dec00204 	addi	sp,sp,8
   99f80:	f800283a 	ret

00099f84 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   99f84:	defff104 	addi	sp,sp,-60
   99f88:	dfc00e15 	stw	ra,56(sp)
   99f8c:	df000d15 	stw	fp,52(sp)
   99f90:	df000d04 	addi	fp,sp,52
   99f94:	e13ffb15 	stw	r4,-20(fp)
   99f98:	e1bffd15 	stw	r6,-12(fp)
   99f9c:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   99fa0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   99fa4:	e0bffd17 	ldw	r2,-12(fp)
   99fa8:	1004c03a 	cmpne	r2,r2,zero
   99fac:	1000031e 	bne	r2,zero,99fbc <OSSemDel+0x38>
        return (pevent);
   99fb0:	e0bffb17 	ldw	r2,-20(fp)
   99fb4:	e0bfff15 	stw	r2,-4(fp)
   99fb8:	00009406 	br	9a20c <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   99fbc:	e0bffb17 	ldw	r2,-20(fp)
   99fc0:	1004c03a 	cmpne	r2,r2,zero
   99fc4:	1000061e 	bne	r2,zero,99fe0 <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
   99fc8:	e0fffd17 	ldw	r3,-12(fp)
   99fcc:	00800104 	movi	r2,4
   99fd0:	18800005 	stb	r2,0(r3)
        return (pevent);
   99fd4:	e0fffb17 	ldw	r3,-20(fp)
   99fd8:	e0ffff15 	stw	r3,-4(fp)
   99fdc:	00008b06 	br	9a20c <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   99fe0:	e0bffb17 	ldw	r2,-20(fp)
   99fe4:	10800003 	ldbu	r2,0(r2)
   99fe8:	10803fcc 	andi	r2,r2,255
   99fec:	108000e0 	cmpeqi	r2,r2,3
   99ff0:	1000061e 	bne	r2,zero,9a00c <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
   99ff4:	e0fffd17 	ldw	r3,-12(fp)
   99ff8:	00800044 	movi	r2,1
   99ffc:	18800005 	stb	r2,0(r3)
        return (pevent);
   9a000:	e0bffb17 	ldw	r2,-20(fp)
   9a004:	e0bfff15 	stw	r2,-4(fp)
   9a008:	00008006 	br	9a20c <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   9a00c:	008002b4 	movhi	r2,10
   9a010:	108e5304 	addi	r2,r2,14668
   9a014:	10800003 	ldbu	r2,0(r2)
   9a018:	10803fcc 	andi	r2,r2,255
   9a01c:	1005003a 	cmpeq	r2,r2,zero
   9a020:	1000061e 	bne	r2,zero,9a03c <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   9a024:	e0fffd17 	ldw	r3,-12(fp)
   9a028:	008003c4 	movi	r2,15
   9a02c:	18800005 	stb	r2,0(r3)
        return (pevent);
   9a030:	e0fffb17 	ldw	r3,-20(fp)
   9a034:	e0ffff15 	stw	r3,-4(fp)
   9a038:	00007406 	br	9a20c <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9a03c:	0005303a 	rdctl	r2,status
   9a040:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9a044:	e0fff717 	ldw	r3,-36(fp)
   9a048:	00bfff84 	movi	r2,-2
   9a04c:	1884703a 	and	r2,r3,r2
   9a050:	1001703a 	wrctl	status,r2
  
  return context;
   9a054:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   9a058:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   9a05c:	e0bffb17 	ldw	r2,-20(fp)
   9a060:	10800283 	ldbu	r2,10(r2)
   9a064:	10803fcc 	andi	r2,r2,255
   9a068:	1005003a 	cmpeq	r2,r2,zero
   9a06c:	1000031e 	bne	r2,zero,9a07c <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   9a070:	00800044 	movi	r2,1
   9a074:	e0bffa05 	stb	r2,-24(fp)
   9a078:	00000106 	br	9a080 <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   9a07c:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
   9a080:	e0bffc03 	ldbu	r2,-16(fp)
   9a084:	e0bffe15 	stw	r2,-8(fp)
   9a088:	e0fffe17 	ldw	r3,-8(fp)
   9a08c:	1805003a 	cmpeq	r2,r3,zero
   9a090:	1000041e 	bne	r2,zero,9a0a4 <OSSemDel+0x120>
   9a094:	e0fffe17 	ldw	r3,-8(fp)
   9a098:	18800060 	cmpeqi	r2,r3,1
   9a09c:	10002d1e 	bne	r2,zero,9a154 <OSSemDel+0x1d0>
   9a0a0:	00004f06 	br	9a1e0 <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   9a0a4:	e0bffa03 	ldbu	r2,-24(fp)
   9a0a8:	1004c03a 	cmpne	r2,r2,zero
   9a0ac:	10001a1e 	bne	r2,zero,9a118 <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   9a0b0:	e0fffb17 	ldw	r3,-20(fp)
   9a0b4:	00800fc4 	movi	r2,63
   9a0b8:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   9a0bc:	e0bffb17 	ldw	r2,-20(fp)
   9a0c0:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   9a0c4:	e0bffb17 	ldw	r2,-20(fp)
   9a0c8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   9a0cc:	008002b4 	movhi	r2,10
   9a0d0:	108e5204 	addi	r2,r2,14664
   9a0d4:	10c00017 	ldw	r3,0(r2)
   9a0d8:	e0bffb17 	ldw	r2,-20(fp)
   9a0dc:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   9a0e0:	e0bffb17 	ldw	r2,-20(fp)
   9a0e4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   9a0e8:	00c002b4 	movhi	r3,10
   9a0ec:	18ce5204 	addi	r3,r3,14664
   9a0f0:	e0bffb17 	ldw	r2,-20(fp)
   9a0f4:	18800015 	stw	r2,0(r3)
   9a0f8:	e0bff817 	ldw	r2,-32(fp)
   9a0fc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9a100:	e0bff617 	ldw	r2,-40(fp)
   9a104:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   9a108:	e0bffd17 	ldw	r2,-12(fp)
   9a10c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   9a110:	e03ff915 	stw	zero,-28(fp)
   9a114:	00003b06 	br	9a204 <OSSemDel+0x280>
   9a118:	e0bff817 	ldw	r2,-32(fp)
   9a11c:	e0bff515 	stw	r2,-44(fp)
   9a120:	e0bff517 	ldw	r2,-44(fp)
   9a124:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   9a128:	e0fffd17 	ldw	r3,-12(fp)
   9a12c:	00801244 	movi	r2,73
   9a130:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
   9a134:	e0bffb17 	ldw	r2,-20(fp)
   9a138:	e0bff915 	stw	r2,-28(fp)
             }
             break;
   9a13c:	00003106 	br	9a204 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   9a140:	e13ffb17 	ldw	r4,-20(fp)
   9a144:	000b883a 	mov	r5,zero
   9a148:	01800044 	movi	r6,1
   9a14c:	000f883a 	mov	r7,zero
   9a150:	009364c0 	call	9364c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   9a154:	e0bffb17 	ldw	r2,-20(fp)
   9a158:	10800283 	ldbu	r2,10(r2)
   9a15c:	10803fcc 	andi	r2,r2,255
   9a160:	1004c03a 	cmpne	r2,r2,zero
   9a164:	103ff61e 	bne	r2,zero,9a140 <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   9a168:	e0fffb17 	ldw	r3,-20(fp)
   9a16c:	00800fc4 	movi	r2,63
   9a170:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   9a174:	e0bffb17 	ldw	r2,-20(fp)
   9a178:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   9a17c:	e0bffb17 	ldw	r2,-20(fp)
   9a180:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   9a184:	008002b4 	movhi	r2,10
   9a188:	108e5204 	addi	r2,r2,14664
   9a18c:	10c00017 	ldw	r3,0(r2)
   9a190:	e0bffb17 	ldw	r2,-20(fp)
   9a194:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   9a198:	e0bffb17 	ldw	r2,-20(fp)
   9a19c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   9a1a0:	00c002b4 	movhi	r3,10
   9a1a4:	18ce5204 	addi	r3,r3,14664
   9a1a8:	e0bffb17 	ldw	r2,-20(fp)
   9a1ac:	18800015 	stw	r2,0(r3)
   9a1b0:	e0bff817 	ldw	r2,-32(fp)
   9a1b4:	e0bff415 	stw	r2,-48(fp)
   9a1b8:	e0bff417 	ldw	r2,-48(fp)
   9a1bc:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   9a1c0:	e0bffa03 	ldbu	r2,-24(fp)
   9a1c4:	10800058 	cmpnei	r2,r2,1
   9a1c8:	1000011e 	bne	r2,zero,9a1d0 <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   9a1cc:	009408c0 	call	9408c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   9a1d0:	e0bffd17 	ldw	r2,-12(fp)
   9a1d4:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   9a1d8:	e03ff915 	stw	zero,-28(fp)
             break;
   9a1dc:	00000906 	br	9a204 <OSSemDel+0x280>
   9a1e0:	e0bff817 	ldw	r2,-32(fp)
   9a1e4:	e0bff315 	stw	r2,-52(fp)
   9a1e8:	e0bff317 	ldw	r2,-52(fp)
   9a1ec:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   9a1f0:	e0fffd17 	ldw	r3,-12(fp)
   9a1f4:	008001c4 	movi	r2,7
   9a1f8:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
   9a1fc:	e0bffb17 	ldw	r2,-20(fp)
   9a200:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
   9a204:	e0bff917 	ldw	r2,-28(fp)
   9a208:	e0bfff15 	stw	r2,-4(fp)
   9a20c:	e0bfff17 	ldw	r2,-4(fp)
}
   9a210:	e037883a 	mov	sp,fp
   9a214:	dfc00117 	ldw	ra,4(sp)
   9a218:	df000017 	ldw	fp,0(sp)
   9a21c:	dec00204 	addi	sp,sp,8
   9a220:	f800283a 	ret

0009a224 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   9a224:	defff404 	addi	sp,sp,-48
   9a228:	dfc00b15 	stw	ra,44(sp)
   9a22c:	df000a15 	stw	fp,40(sp)
   9a230:	df000a04 	addi	fp,sp,40
   9a234:	e13ffc15 	stw	r4,-16(fp)
   9a238:	e1bffe15 	stw	r6,-8(fp)
   9a23c:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   9a240:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   9a244:	e0bffe17 	ldw	r2,-8(fp)
   9a248:	1005003a 	cmpeq	r2,r2,zero
   9a24c:	10008f1e 	bne	r2,zero,9a48c <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   9a250:	e0bffc17 	ldw	r2,-16(fp)
   9a254:	1004c03a 	cmpne	r2,r2,zero
   9a258:	1000041e 	bne	r2,zero,9a26c <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
   9a25c:	e0fffe17 	ldw	r3,-8(fp)
   9a260:	00800104 	movi	r2,4
   9a264:	18800005 	stb	r2,0(r3)
        return;
   9a268:	00008806 	br	9a48c <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   9a26c:	e0bffc17 	ldw	r2,-16(fp)
   9a270:	10800003 	ldbu	r2,0(r2)
   9a274:	10803fcc 	andi	r2,r2,255
   9a278:	108000e0 	cmpeqi	r2,r2,3
   9a27c:	1000041e 	bne	r2,zero,9a290 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   9a280:	e0fffe17 	ldw	r3,-8(fp)
   9a284:	00800044 	movi	r2,1
   9a288:	18800005 	stb	r2,0(r3)
        return;
   9a28c:	00007f06 	br	9a48c <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   9a290:	008002b4 	movhi	r2,10
   9a294:	108e5304 	addi	r2,r2,14668
   9a298:	10800003 	ldbu	r2,0(r2)
   9a29c:	10803fcc 	andi	r2,r2,255
   9a2a0:	1005003a 	cmpeq	r2,r2,zero
   9a2a4:	1000041e 	bne	r2,zero,9a2b8 <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   9a2a8:	e0fffe17 	ldw	r3,-8(fp)
   9a2ac:	00800084 	movi	r2,2
   9a2b0:	18800005 	stb	r2,0(r3)
        return;
   9a2b4:	00007506 	br	9a48c <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   9a2b8:	008002b4 	movhi	r2,10
   9a2bc:	108e4504 	addi	r2,r2,14612
   9a2c0:	10800003 	ldbu	r2,0(r2)
   9a2c4:	10803fcc 	andi	r2,r2,255
   9a2c8:	1005003a 	cmpeq	r2,r2,zero
   9a2cc:	1000041e 	bne	r2,zero,9a2e0 <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   9a2d0:	e0fffe17 	ldw	r3,-8(fp)
   9a2d4:	00800344 	movi	r2,13
   9a2d8:	18800005 	stb	r2,0(r3)
        return;
   9a2dc:	00006b06 	br	9a48c <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9a2e0:	0005303a 	rdctl	r2,status
   9a2e4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9a2e8:	e0fffa17 	ldw	r3,-24(fp)
   9a2ec:	00bfff84 	movi	r2,-2
   9a2f0:	1884703a 	and	r2,r3,r2
   9a2f4:	1001703a 	wrctl	status,r2
  
  return context;
   9a2f8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   9a2fc:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   9a300:	e0bffc17 	ldw	r2,-16(fp)
   9a304:	1080020b 	ldhu	r2,8(r2)
   9a308:	10bfffcc 	andi	r2,r2,65535
   9a30c:	1005003a 	cmpeq	r2,r2,zero
   9a310:	10000d1e 	bne	r2,zero,9a348 <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   9a314:	e0bffc17 	ldw	r2,-16(fp)
   9a318:	1080020b 	ldhu	r2,8(r2)
   9a31c:	10bfffc4 	addi	r2,r2,-1
   9a320:	1007883a 	mov	r3,r2
   9a324:	e0bffc17 	ldw	r2,-16(fp)
   9a328:	10c0020d 	sth	r3,8(r2)
   9a32c:	e0bffb17 	ldw	r2,-20(fp)
   9a330:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9a334:	e0bff917 	ldw	r2,-28(fp)
   9a338:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   9a33c:	e0bffe17 	ldw	r2,-8(fp)
   9a340:	10000005 	stb	zero,0(r2)
        return;
   9a344:	00005106 	br	9a48c <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   9a348:	008002b4 	movhi	r2,10
   9a34c:	108e5404 	addi	r2,r2,14672
   9a350:	10c00017 	ldw	r3,0(r2)
   9a354:	008002b4 	movhi	r2,10
   9a358:	108e5404 	addi	r2,r2,14672
   9a35c:	10800017 	ldw	r2,0(r2)
   9a360:	10800c03 	ldbu	r2,48(r2)
   9a364:	10800054 	ori	r2,r2,1
   9a368:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   9a36c:	008002b4 	movhi	r2,10
   9a370:	108e5404 	addi	r2,r2,14672
   9a374:	10800017 	ldw	r2,0(r2)
   9a378:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   9a37c:	008002b4 	movhi	r2,10
   9a380:	108e5404 	addi	r2,r2,14672
   9a384:	10c00017 	ldw	r3,0(r2)
   9a388:	e0bffd0b 	ldhu	r2,-12(fp)
   9a38c:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   9a390:	e13ffc17 	ldw	r4,-16(fp)
   9a394:	00937e00 	call	937e0 <OS_EventTaskWait>
   9a398:	e0bffb17 	ldw	r2,-20(fp)
   9a39c:	e0bff815 	stw	r2,-32(fp)
   9a3a0:	e0bff817 	ldw	r2,-32(fp)
   9a3a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   9a3a8:	009408c0 	call	9408c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9a3ac:	0005303a 	rdctl	r2,status
   9a3b0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9a3b4:	e0fff717 	ldw	r3,-36(fp)
   9a3b8:	00bfff84 	movi	r2,-2
   9a3bc:	1884703a 	and	r2,r3,r2
   9a3c0:	1001703a 	wrctl	status,r2
  
  return context;
   9a3c4:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   9a3c8:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   9a3cc:	008002b4 	movhi	r2,10
   9a3d0:	108e5404 	addi	r2,r2,14672
   9a3d4:	10800017 	ldw	r2,0(r2)
   9a3d8:	10800c43 	ldbu	r2,49(r2)
   9a3dc:	10803fcc 	andi	r2,r2,255
   9a3e0:	e0bfff15 	stw	r2,-4(fp)
   9a3e4:	e0ffff17 	ldw	r3,-4(fp)
   9a3e8:	1805003a 	cmpeq	r2,r3,zero
   9a3ec:	1000041e 	bne	r2,zero,9a400 <OSSemPend+0x1dc>
   9a3f0:	e0ffff17 	ldw	r3,-4(fp)
   9a3f4:	188000a0 	cmpeqi	r2,r3,2
   9a3f8:	1000041e 	bne	r2,zero,9a40c <OSSemPend+0x1e8>
   9a3fc:	00000706 	br	9a41c <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   9a400:	e0bffe17 	ldw	r2,-8(fp)
   9a404:	10000005 	stb	zero,0(r2)
             break;
   9a408:	00000c06 	br	9a43c <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   9a40c:	e0fffe17 	ldw	r3,-8(fp)
   9a410:	00800384 	movi	r2,14
   9a414:	18800005 	stb	r2,0(r3)
             break;
   9a418:	00000806 	br	9a43c <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   9a41c:	008002b4 	movhi	r2,10
   9a420:	108e5404 	addi	r2,r2,14672
   9a424:	11000017 	ldw	r4,0(r2)
   9a428:	e17ffc17 	ldw	r5,-16(fp)
   9a42c:	0093a440 	call	93a44 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   9a430:	e0fffe17 	ldw	r3,-8(fp)
   9a434:	00800284 	movi	r2,10
   9a438:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   9a43c:	008002b4 	movhi	r2,10
   9a440:	108e5404 	addi	r2,r2,14672
   9a444:	10800017 	ldw	r2,0(r2)
   9a448:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   9a44c:	008002b4 	movhi	r2,10
   9a450:	108e5404 	addi	r2,r2,14672
   9a454:	10800017 	ldw	r2,0(r2)
   9a458:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   9a45c:	008002b4 	movhi	r2,10
   9a460:	108e5404 	addi	r2,r2,14672
   9a464:	10800017 	ldw	r2,0(r2)
   9a468:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   9a46c:	008002b4 	movhi	r2,10
   9a470:	108e5404 	addi	r2,r2,14672
   9a474:	10800017 	ldw	r2,0(r2)
   9a478:	10000815 	stw	zero,32(r2)
   9a47c:	e0bffb17 	ldw	r2,-20(fp)
   9a480:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9a484:	e0bff617 	ldw	r2,-40(fp)
   9a488:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
   9a48c:	e037883a 	mov	sp,fp
   9a490:	dfc00117 	ldw	ra,4(sp)
   9a494:	df000017 	ldw	fp,0(sp)
   9a498:	dec00204 	addi	sp,sp,8
   9a49c:	f800283a 	ret

0009a4a0 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   9a4a0:	defff504 	addi	sp,sp,-44
   9a4a4:	dfc00a15 	stw	ra,40(sp)
   9a4a8:	df000915 	stw	fp,36(sp)
   9a4ac:	df000904 	addi	fp,sp,36
   9a4b0:	e13ffc15 	stw	r4,-16(fp)
   9a4b4:	e1bffe15 	stw	r6,-8(fp)
   9a4b8:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   9a4bc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   9a4c0:	e0bffe17 	ldw	r2,-8(fp)
   9a4c4:	1004c03a 	cmpne	r2,r2,zero
   9a4c8:	1000021e 	bne	r2,zero,9a4d4 <OSSemPendAbort+0x34>
        return (0);
   9a4cc:	e03fff15 	stw	zero,-4(fp)
   9a4d0:	00004c06 	br	9a604 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   9a4d4:	e0bffc17 	ldw	r2,-16(fp)
   9a4d8:	1004c03a 	cmpne	r2,r2,zero
   9a4dc:	1000051e 	bne	r2,zero,9a4f4 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
   9a4e0:	e0fffe17 	ldw	r3,-8(fp)
   9a4e4:	00800104 	movi	r2,4
   9a4e8:	18800005 	stb	r2,0(r3)
        return (0);
   9a4ec:	e03fff15 	stw	zero,-4(fp)
   9a4f0:	00004406 	br	9a604 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   9a4f4:	e0bffc17 	ldw	r2,-16(fp)
   9a4f8:	10800003 	ldbu	r2,0(r2)
   9a4fc:	10803fcc 	andi	r2,r2,255
   9a500:	108000e0 	cmpeqi	r2,r2,3
   9a504:	1000051e 	bne	r2,zero,9a51c <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   9a508:	e0fffe17 	ldw	r3,-8(fp)
   9a50c:	00800044 	movi	r2,1
   9a510:	18800005 	stb	r2,0(r3)
        return (0);
   9a514:	e03fff15 	stw	zero,-4(fp)
   9a518:	00003a06 	br	9a604 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9a51c:	0005303a 	rdctl	r2,status
   9a520:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9a524:	e0fff917 	ldw	r3,-28(fp)
   9a528:	00bfff84 	movi	r2,-2
   9a52c:	1884703a 	and	r2,r3,r2
   9a530:	1001703a 	wrctl	status,r2
  
  return context;
   9a534:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   9a538:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   9a53c:	e0bffc17 	ldw	r2,-16(fp)
   9a540:	10800283 	ldbu	r2,10(r2)
   9a544:	10803fcc 	andi	r2,r2,255
   9a548:	1005003a 	cmpeq	r2,r2,zero
   9a54c:	1000261e 	bne	r2,zero,9a5e8 <OSSemPendAbort+0x148>
        nbr_tasks = 0;
   9a550:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
   9a554:	e0bffd03 	ldbu	r2,-12(fp)
   9a558:	10800060 	cmpeqi	r2,r2,1
   9a55c:	1000091e 	bne	r2,zero,9a584 <OSSemPendAbort+0xe4>
   9a560:	00000e06 	br	9a59c <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   9a564:	e13ffc17 	ldw	r4,-16(fp)
   9a568:	000b883a 	mov	r5,zero
   9a56c:	01800044 	movi	r6,1
   9a570:	01c00084 	movi	r7,2
   9a574:	009364c0 	call	9364c <OS_EventTaskRdy>
                     nbr_tasks++;
   9a578:	e0bffb03 	ldbu	r2,-20(fp)
   9a57c:	10800044 	addi	r2,r2,1
   9a580:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   9a584:	e0bffc17 	ldw	r2,-16(fp)
   9a588:	10800283 	ldbu	r2,10(r2)
   9a58c:	10803fcc 	andi	r2,r2,255
   9a590:	1004c03a 	cmpne	r2,r2,zero
   9a594:	103ff31e 	bne	r2,zero,9a564 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   9a598:	00000806 	br	9a5bc <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   9a59c:	e13ffc17 	ldw	r4,-16(fp)
   9a5a0:	000b883a 	mov	r5,zero
   9a5a4:	01800044 	movi	r6,1
   9a5a8:	01c00084 	movi	r7,2
   9a5ac:	009364c0 	call	9364c <OS_EventTaskRdy>
                 nbr_tasks++;
   9a5b0:	e0bffb03 	ldbu	r2,-20(fp)
   9a5b4:	10800044 	addi	r2,r2,1
   9a5b8:	e0bffb05 	stb	r2,-20(fp)
   9a5bc:	e0bffa17 	ldw	r2,-24(fp)
   9a5c0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9a5c4:	e0bff817 	ldw	r2,-32(fp)
   9a5c8:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   9a5cc:	009408c0 	call	9408c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   9a5d0:	e0fffe17 	ldw	r3,-8(fp)
   9a5d4:	00800384 	movi	r2,14
   9a5d8:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
   9a5dc:	e0bffb03 	ldbu	r2,-20(fp)
   9a5e0:	e0bfff15 	stw	r2,-4(fp)
   9a5e4:	00000706 	br	9a604 <OSSemPendAbort+0x164>
   9a5e8:	e0bffa17 	ldw	r2,-24(fp)
   9a5ec:	e0bff715 	stw	r2,-36(fp)
   9a5f0:	e0bff717 	ldw	r2,-36(fp)
   9a5f4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   9a5f8:	e0bffe17 	ldw	r2,-8(fp)
   9a5fc:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   9a600:	e03fff15 	stw	zero,-4(fp)
   9a604:	e0bfff17 	ldw	r2,-4(fp)
}
   9a608:	e037883a 	mov	sp,fp
   9a60c:	dfc00117 	ldw	ra,4(sp)
   9a610:	df000017 	ldw	fp,0(sp)
   9a614:	dec00204 	addi	sp,sp,8
   9a618:	f800283a 	ret

0009a61c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   9a61c:	defff704 	addi	sp,sp,-36
   9a620:	dfc00815 	stw	ra,32(sp)
   9a624:	df000715 	stw	fp,28(sp)
   9a628:	df000704 	addi	fp,sp,28
   9a62c:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   9a630:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   9a634:	e0bffe17 	ldw	r2,-8(fp)
   9a638:	1004c03a 	cmpne	r2,r2,zero
   9a63c:	1000031e 	bne	r2,zero,9a64c <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
   9a640:	00800104 	movi	r2,4
   9a644:	e0bfff15 	stw	r2,-4(fp)
   9a648:	00003806 	br	9a72c <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   9a64c:	e0bffe17 	ldw	r2,-8(fp)
   9a650:	10800003 	ldbu	r2,0(r2)
   9a654:	10803fcc 	andi	r2,r2,255
   9a658:	108000e0 	cmpeqi	r2,r2,3
   9a65c:	1000031e 	bne	r2,zero,9a66c <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
   9a660:	00800044 	movi	r2,1
   9a664:	e0bfff15 	stw	r2,-4(fp)
   9a668:	00003006 	br	9a72c <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9a66c:	0005303a 	rdctl	r2,status
   9a670:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9a674:	e0fffc17 	ldw	r3,-16(fp)
   9a678:	00bfff84 	movi	r2,-2
   9a67c:	1884703a 	and	r2,r3,r2
   9a680:	1001703a 	wrctl	status,r2
  
  return context;
   9a684:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   9a688:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   9a68c:	e0bffe17 	ldw	r2,-8(fp)
   9a690:	10800283 	ldbu	r2,10(r2)
   9a694:	10803fcc 	andi	r2,r2,255
   9a698:	1005003a 	cmpeq	r2,r2,zero
   9a69c:	10000c1e 	bne	r2,zero,9a6d0 <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   9a6a0:	e13ffe17 	ldw	r4,-8(fp)
   9a6a4:	000b883a 	mov	r5,zero
   9a6a8:	01800044 	movi	r6,1
   9a6ac:	000f883a 	mov	r7,zero
   9a6b0:	009364c0 	call	9364c <OS_EventTaskRdy>
   9a6b4:	e0bffd17 	ldw	r2,-12(fp)
   9a6b8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9a6bc:	e0bffb17 	ldw	r2,-20(fp)
   9a6c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   9a6c4:	009408c0 	call	9408c <OS_Sched>
        return (OS_ERR_NONE);
   9a6c8:	e03fff15 	stw	zero,-4(fp)
   9a6cc:	00001706 	br	9a72c <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   9a6d0:	e0bffe17 	ldw	r2,-8(fp)
   9a6d4:	1080020b 	ldhu	r2,8(r2)
   9a6d8:	10ffffcc 	andi	r3,r2,65535
   9a6dc:	00bfffd4 	movui	r2,65535
   9a6e0:	18800c26 	beq	r3,r2,9a714 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   9a6e4:	e0bffe17 	ldw	r2,-8(fp)
   9a6e8:	1080020b 	ldhu	r2,8(r2)
   9a6ec:	10800044 	addi	r2,r2,1
   9a6f0:	1007883a 	mov	r3,r2
   9a6f4:	e0bffe17 	ldw	r2,-8(fp)
   9a6f8:	10c0020d 	sth	r3,8(r2)
   9a6fc:	e0bffd17 	ldw	r2,-12(fp)
   9a700:	e0bffa15 	stw	r2,-24(fp)
   9a704:	e0bffa17 	ldw	r2,-24(fp)
   9a708:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   9a70c:	e03fff15 	stw	zero,-4(fp)
   9a710:	00000606 	br	9a72c <OSSemPost+0x110>
   9a714:	e0bffd17 	ldw	r2,-12(fp)
   9a718:	e0bff915 	stw	r2,-28(fp)
   9a71c:	e0bff917 	ldw	r2,-28(fp)
   9a720:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   9a724:	00800c84 	movi	r2,50
   9a728:	e0bfff15 	stw	r2,-4(fp)
   9a72c:	e0bfff17 	ldw	r2,-4(fp)
}
   9a730:	e037883a 	mov	sp,fp
   9a734:	dfc00117 	ldw	ra,4(sp)
   9a738:	df000017 	ldw	fp,0(sp)
   9a73c:	dec00204 	addi	sp,sp,8
   9a740:	f800283a 	ret

0009a744 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   9a744:	defff604 	addi	sp,sp,-40
   9a748:	df000915 	stw	fp,36(sp)
   9a74c:	df000904 	addi	fp,sp,36
   9a750:	e13ffd15 	stw	r4,-12(fp)
   9a754:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   9a758:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   9a75c:	e0bffd17 	ldw	r2,-12(fp)
   9a760:	1004c03a 	cmpne	r2,r2,zero
   9a764:	1000031e 	bne	r2,zero,9a774 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
   9a768:	00800104 	movi	r2,4
   9a76c:	e0bfff15 	stw	r2,-4(fp)
   9a770:	00003b06 	br	9a860 <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   9a774:	e0bffe17 	ldw	r2,-8(fp)
   9a778:	1004c03a 	cmpne	r2,r2,zero
   9a77c:	1000031e 	bne	r2,zero,9a78c <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
   9a780:	00800244 	movi	r2,9
   9a784:	e0bfff15 	stw	r2,-4(fp)
   9a788:	00003506 	br	9a860 <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   9a78c:	e0bffd17 	ldw	r2,-12(fp)
   9a790:	10800003 	ldbu	r2,0(r2)
   9a794:	10803fcc 	andi	r2,r2,255
   9a798:	108000e0 	cmpeqi	r2,r2,3
   9a79c:	1000031e 	bne	r2,zero,9a7ac <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
   9a7a0:	00800044 	movi	r2,1
   9a7a4:	e0bfff15 	stw	r2,-4(fp)
   9a7a8:	00002d06 	br	9a860 <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9a7ac:	0005303a 	rdctl	r2,status
   9a7b0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9a7b4:	e0fff817 	ldw	r3,-32(fp)
   9a7b8:	00bfff84 	movi	r2,-2
   9a7bc:	1884703a 	and	r2,r3,r2
   9a7c0:	1001703a 	wrctl	status,r2
  
  return context;
   9a7c4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   9a7c8:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   9a7cc:	e0bffd17 	ldw	r2,-12(fp)
   9a7d0:	10c00283 	ldbu	r3,10(r2)
   9a7d4:	e0bffe17 	ldw	r2,-8(fp)
   9a7d8:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   9a7dc:	e0bffd17 	ldw	r2,-12(fp)
   9a7e0:	108002c4 	addi	r2,r2,11
   9a7e4:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   9a7e8:	e0bffe17 	ldw	r2,-8(fp)
   9a7ec:	10800084 	addi	r2,r2,2
   9a7f0:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   9a7f4:	e03ffa05 	stb	zero,-24(fp)
   9a7f8:	00000d06 	br	9a830 <OSSemQuery+0xec>
        *pdest++ = *psrc++;
   9a7fc:	e0bffc17 	ldw	r2,-16(fp)
   9a800:	10c00003 	ldbu	r3,0(r2)
   9a804:	e0bffb17 	ldw	r2,-20(fp)
   9a808:	10c00005 	stb	r3,0(r2)
   9a80c:	e0bffb17 	ldw	r2,-20(fp)
   9a810:	10800044 	addi	r2,r2,1
   9a814:	e0bffb15 	stw	r2,-20(fp)
   9a818:	e0bffc17 	ldw	r2,-16(fp)
   9a81c:	10800044 	addi	r2,r2,1
   9a820:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   9a824:	e0bffa03 	ldbu	r2,-24(fp)
   9a828:	10800044 	addi	r2,r2,1
   9a82c:	e0bffa05 	stb	r2,-24(fp)
   9a830:	e0bffa03 	ldbu	r2,-24(fp)
   9a834:	108000f0 	cmpltui	r2,r2,3
   9a838:	103ff01e 	bne	r2,zero,9a7fc <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   9a83c:	e0bffd17 	ldw	r2,-12(fp)
   9a840:	10c0020b 	ldhu	r3,8(r2)
   9a844:	e0bffe17 	ldw	r2,-8(fp)
   9a848:	10c0000d 	sth	r3,0(r2)
   9a84c:	e0bff917 	ldw	r2,-28(fp)
   9a850:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9a854:	e0bff717 	ldw	r2,-36(fp)
   9a858:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   9a85c:	e03fff15 	stw	zero,-4(fp)
   9a860:	e0bfff17 	ldw	r2,-4(fp)
}
   9a864:	e037883a 	mov	sp,fp
   9a868:	df000017 	ldw	fp,0(sp)
   9a86c:	dec00104 	addi	sp,sp,4
   9a870:	f800283a 	ret

0009a874 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   9a874:	defff904 	addi	sp,sp,-28
   9a878:	df000615 	stw	fp,24(sp)
   9a87c:	df000604 	addi	fp,sp,24
   9a880:	e13ffd15 	stw	r4,-12(fp)
   9a884:	e1bfff15 	stw	r6,-4(fp)
   9a888:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   9a88c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   9a890:	e0bfff17 	ldw	r2,-4(fp)
   9a894:	1005003a 	cmpeq	r2,r2,zero
   9a898:	1000331e 	bne	r2,zero,9a968 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   9a89c:	e0bffd17 	ldw	r2,-12(fp)
   9a8a0:	1004c03a 	cmpne	r2,r2,zero
   9a8a4:	1000041e 	bne	r2,zero,9a8b8 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   9a8a8:	e0ffff17 	ldw	r3,-4(fp)
   9a8ac:	00800104 	movi	r2,4
   9a8b0:	18800005 	stb	r2,0(r3)
        return;
   9a8b4:	00002c06 	br	9a968 <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   9a8b8:	e0bffd17 	ldw	r2,-12(fp)
   9a8bc:	10800003 	ldbu	r2,0(r2)
   9a8c0:	10803fcc 	andi	r2,r2,255
   9a8c4:	108000e0 	cmpeqi	r2,r2,3
   9a8c8:	1000041e 	bne	r2,zero,9a8dc <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   9a8cc:	e0ffff17 	ldw	r3,-4(fp)
   9a8d0:	00800044 	movi	r2,1
   9a8d4:	18800005 	stb	r2,0(r3)
        return;
   9a8d8:	00002306 	br	9a968 <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9a8dc:	0005303a 	rdctl	r2,status
   9a8e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9a8e4:	e0fffb17 	ldw	r3,-20(fp)
   9a8e8:	00bfff84 	movi	r2,-2
   9a8ec:	1884703a 	and	r2,r3,r2
   9a8f0:	1001703a 	wrctl	status,r2
  
  return context;
   9a8f4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   9a8f8:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
   9a8fc:	e0bfff17 	ldw	r2,-4(fp)
   9a900:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   9a904:	e0bffd17 	ldw	r2,-12(fp)
   9a908:	1080020b 	ldhu	r2,8(r2)
   9a90c:	10bfffcc 	andi	r2,r2,65535
   9a910:	1005003a 	cmpeq	r2,r2,zero
   9a914:	1000041e 	bne	r2,zero,9a928 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   9a918:	e0fffd17 	ldw	r3,-12(fp)
   9a91c:	e0bffe0b 	ldhu	r2,-8(fp)
   9a920:	1880020d 	sth	r2,8(r3)
   9a924:	00000c06 	br	9a958 <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   9a928:	e0bffd17 	ldw	r2,-12(fp)
   9a92c:	10800283 	ldbu	r2,10(r2)
   9a930:	10803fcc 	andi	r2,r2,255
   9a934:	1004c03a 	cmpne	r2,r2,zero
   9a938:	1000041e 	bne	r2,zero,9a94c <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   9a93c:	e0fffd17 	ldw	r3,-12(fp)
   9a940:	e0bffe0b 	ldhu	r2,-8(fp)
   9a944:	1880020d 	sth	r2,8(r3)
   9a948:	00000306 	br	9a958 <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   9a94c:	e0ffff17 	ldw	r3,-4(fp)
   9a950:	00801244 	movi	r2,73
   9a954:	18800005 	stb	r2,0(r3)
   9a958:	e0bffc17 	ldw	r2,-16(fp)
   9a95c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9a960:	e0bffa17 	ldw	r2,-24(fp)
   9a964:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
   9a968:	e037883a 	mov	sp,fp
   9a96c:	df000017 	ldw	fp,0(sp)
   9a970:	dec00104 	addi	sp,sp,4
   9a974:	f800283a 	ret

0009a978 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   9a978:	defff004 	addi	sp,sp,-64
   9a97c:	dfc00f15 	stw	ra,60(sp)
   9a980:	df000e15 	stw	fp,56(sp)
   9a984:	df000e04 	addi	fp,sp,56
   9a988:	e13ffd05 	stb	r4,-12(fp)
   9a98c:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   9a990:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   9a994:	e0bffd03 	ldbu	r2,-12(fp)
   9a998:	10800530 	cmpltui	r2,r2,20
   9a99c:	1000061e 	bne	r2,zero,9a9b8 <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
   9a9a0:	e0bffd03 	ldbu	r2,-12(fp)
   9a9a4:	10803fe0 	cmpeqi	r2,r2,255
   9a9a8:	1000031e 	bne	r2,zero,9a9b8 <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
   9a9ac:	00800a84 	movi	r2,42
   9a9b0:	e0bfff15 	stw	r2,-4(fp)
   9a9b4:	00014706 	br	9aed4 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   9a9b8:	e0bffe03 	ldbu	r2,-8(fp)
   9a9bc:	10800530 	cmpltui	r2,r2,20
   9a9c0:	1000031e 	bne	r2,zero,9a9d0 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   9a9c4:	00800a84 	movi	r2,42
   9a9c8:	e0bfff15 	stw	r2,-4(fp)
   9a9cc:	00014106 	br	9aed4 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9a9d0:	0005303a 	rdctl	r2,status
   9a9d4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9a9d8:	e0fff617 	ldw	r3,-40(fp)
   9a9dc:	00bfff84 	movi	r2,-2
   9a9e0:	1884703a 	and	r2,r3,r2
   9a9e4:	1001703a 	wrctl	status,r2
  
  return context;
   9a9e8:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   9a9ec:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   9a9f0:	e0bffe03 	ldbu	r2,-8(fp)
   9a9f4:	00c00334 	movhi	r3,12
   9a9f8:	18e2b904 	addi	r3,r3,-29980
   9a9fc:	1085883a 	add	r2,r2,r2
   9aa00:	1085883a 	add	r2,r2,r2
   9aa04:	10c5883a 	add	r2,r2,r3
   9aa08:	10800017 	ldw	r2,0(r2)
   9aa0c:	1005003a 	cmpeq	r2,r2,zero
   9aa10:	1000071e 	bne	r2,zero,9aa30 <OSTaskChangePrio+0xb8>
   9aa14:	e0bff717 	ldw	r2,-36(fp)
   9aa18:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9aa1c:	e0bff517 	ldw	r2,-44(fp)
   9aa20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   9aa24:	00800a04 	movi	r2,40
   9aa28:	e0bfff15 	stw	r2,-4(fp)
   9aa2c:	00012906 	br	9aed4 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   9aa30:	e0bffd03 	ldbu	r2,-12(fp)
   9aa34:	10803fd8 	cmpnei	r2,r2,255
   9aa38:	1000051e 	bne	r2,zero,9aa50 <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   9aa3c:	008002b4 	movhi	r2,10
   9aa40:	108e5404 	addi	r2,r2,14672
   9aa44:	10800017 	ldw	r2,0(r2)
   9aa48:	10800c83 	ldbu	r2,50(r2)
   9aa4c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   9aa50:	e0bffd03 	ldbu	r2,-12(fp)
   9aa54:	00c00334 	movhi	r3,12
   9aa58:	18e2b904 	addi	r3,r3,-29980
   9aa5c:	1085883a 	add	r2,r2,r2
   9aa60:	1085883a 	add	r2,r2,r2
   9aa64:	10c5883a 	add	r2,r2,r3
   9aa68:	10800017 	ldw	r2,0(r2)
   9aa6c:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   9aa70:	e0bffa17 	ldw	r2,-24(fp)
   9aa74:	1004c03a 	cmpne	r2,r2,zero
   9aa78:	1000071e 	bne	r2,zero,9aa98 <OSTaskChangePrio+0x120>
   9aa7c:	e0bff717 	ldw	r2,-36(fp)
   9aa80:	e0bff415 	stw	r2,-48(fp)
   9aa84:	e0bff417 	ldw	r2,-48(fp)
   9aa88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   9aa8c:	00800a44 	movi	r2,41
   9aa90:	e0bfff15 	stw	r2,-4(fp)
   9aa94:	00010f06 	br	9aed4 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   9aa98:	e0bffa17 	ldw	r2,-24(fp)
   9aa9c:	10800058 	cmpnei	r2,r2,1
   9aaa0:	1000071e 	bne	r2,zero,9aac0 <OSTaskChangePrio+0x148>
   9aaa4:	e0bff717 	ldw	r2,-36(fp)
   9aaa8:	e0bff315 	stw	r2,-52(fp)
   9aaac:	e0bff317 	ldw	r2,-52(fp)
   9aab0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   9aab4:	008010c4 	movi	r2,67
   9aab8:	e0bfff15 	stw	r2,-4(fp)
   9aabc:	00010506 	br	9aed4 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   9aac0:	e0bffe03 	ldbu	r2,-8(fp)
   9aac4:	1004d0fa 	srli	r2,r2,3
   9aac8:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   9aacc:	e0bffe03 	ldbu	r2,-8(fp)
   9aad0:	108001cc 	andi	r2,r2,7
   9aad4:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
   9aad8:	e0fff983 	ldbu	r3,-26(fp)
   9aadc:	00800044 	movi	r2,1
   9aae0:	10c4983a 	sll	r2,r2,r3
   9aae4:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
   9aae8:	e0fff943 	ldbu	r3,-27(fp)
   9aaec:	00800044 	movi	r2,1
   9aaf0:	10c4983a 	sll	r2,r2,r3
   9aaf4:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   9aaf8:	e0bffd03 	ldbu	r2,-12(fp)
   9aafc:	00c00334 	movhi	r3,12
   9ab00:	18e2b904 	addi	r3,r3,-29980
   9ab04:	1085883a 	add	r2,r2,r2
   9ab08:	1085883a 	add	r2,r2,r2
   9ab0c:	10c5883a 	add	r2,r2,r3
   9ab10:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   9ab14:	e0bffe03 	ldbu	r2,-8(fp)
   9ab18:	00c00334 	movhi	r3,12
   9ab1c:	18e2b904 	addi	r3,r3,-29980
   9ab20:	1085883a 	add	r2,r2,r2
   9ab24:	1085883a 	add	r2,r2,r2
   9ab28:	10c7883a 	add	r3,r2,r3
   9ab2c:	e0bffa17 	ldw	r2,-24(fp)
   9ab30:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
   9ab34:	e0bffa17 	ldw	r2,-24(fp)
   9ab38:	10800d03 	ldbu	r2,52(r2)
   9ab3c:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
   9ab40:	e0bffa17 	ldw	r2,-24(fp)
   9ab44:	10800d83 	ldbu	r2,54(r2)
   9ab48:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   9ab4c:	e0bffa17 	ldw	r2,-24(fp)
   9ab50:	10800d43 	ldbu	r2,53(r2)
   9ab54:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   9ab58:	e0fff903 	ldbu	r3,-28(fp)
   9ab5c:	008002b4 	movhi	r2,10
   9ab60:	108e5144 	addi	r2,r2,14661
   9ab64:	10c5883a 	add	r2,r2,r3
   9ab68:	10c00003 	ldbu	r3,0(r2)
   9ab6c:	e0bff803 	ldbu	r2,-32(fp)
   9ab70:	1884703a 	and	r2,r3,r2
   9ab74:	10803fcc 	andi	r2,r2,255
   9ab78:	1005003a 	cmpeq	r2,r2,zero
   9ab7c:	1000381e 	bne	r2,zero,9ac60 <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
   9ab80:	e13ff903 	ldbu	r4,-28(fp)
   9ab84:	e0fff903 	ldbu	r3,-28(fp)
   9ab88:	008002b4 	movhi	r2,10
   9ab8c:	108e5144 	addi	r2,r2,14661
   9ab90:	10c5883a 	add	r2,r2,r3
   9ab94:	10800003 	ldbu	r2,0(r2)
   9ab98:	1007883a 	mov	r3,r2
   9ab9c:	e0bff803 	ldbu	r2,-32(fp)
   9aba0:	0084303a 	nor	r2,zero,r2
   9aba4:	1884703a 	and	r2,r3,r2
   9aba8:	1007883a 	mov	r3,r2
   9abac:	008002b4 	movhi	r2,10
   9abb0:	108e5144 	addi	r2,r2,14661
   9abb4:	1105883a 	add	r2,r2,r4
   9abb8:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   9abbc:	e0fff903 	ldbu	r3,-28(fp)
   9abc0:	008002b4 	movhi	r2,10
   9abc4:	108e5144 	addi	r2,r2,14661
   9abc8:	10c5883a 	add	r2,r2,r3
   9abcc:	10800003 	ldbu	r2,0(r2)
   9abd0:	10803fcc 	andi	r2,r2,255
   9abd4:	1004c03a 	cmpne	r2,r2,zero
   9abd8:	10000b1e 	bne	r2,zero,9ac08 <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
   9abdc:	e0bff843 	ldbu	r2,-31(fp)
   9abe0:	0084303a 	nor	r2,zero,r2
   9abe4:	1007883a 	mov	r3,r2
   9abe8:	008002b4 	movhi	r2,10
   9abec:	108e5104 	addi	r2,r2,14660
   9abf0:	10800003 	ldbu	r2,0(r2)
   9abf4:	1884703a 	and	r2,r3,r2
   9abf8:	1007883a 	mov	r3,r2
   9abfc:	008002b4 	movhi	r2,10
   9ac00:	108e5104 	addi	r2,r2,14660
   9ac04:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   9ac08:	008002b4 	movhi	r2,10
   9ac0c:	108e5104 	addi	r2,r2,14660
   9ac10:	10c00003 	ldbu	r3,0(r2)
   9ac14:	e0bff8c3 	ldbu	r2,-29(fp)
   9ac18:	1884b03a 	or	r2,r3,r2
   9ac1c:	1007883a 	mov	r3,r2
   9ac20:	008002b4 	movhi	r2,10
   9ac24:	108e5104 	addi	r2,r2,14660
   9ac28:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
   9ac2c:	e13ff983 	ldbu	r4,-26(fp)
   9ac30:	e0fff983 	ldbu	r3,-26(fp)
   9ac34:	008002b4 	movhi	r2,10
   9ac38:	108e5144 	addi	r2,r2,14661
   9ac3c:	10c5883a 	add	r2,r2,r3
   9ac40:	10c00003 	ldbu	r3,0(r2)
   9ac44:	e0bff883 	ldbu	r2,-30(fp)
   9ac48:	1884b03a 	or	r2,r3,r2
   9ac4c:	1007883a 	mov	r3,r2
   9ac50:	008002b4 	movhi	r2,10
   9ac54:	108e5144 	addi	r2,r2,14661
   9ac58:	1105883a 	add	r2,r2,r4
   9ac5c:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   9ac60:	e0bffa17 	ldw	r2,-24(fp)
   9ac64:	10800717 	ldw	r2,28(r2)
   9ac68:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
   9ac6c:	e0bffc17 	ldw	r2,-16(fp)
   9ac70:	1005003a 	cmpeq	r2,r2,zero
   9ac74:	1000341e 	bne	r2,zero,9ad48 <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   9ac78:	e13ff903 	ldbu	r4,-28(fp)
   9ac7c:	e0fff903 	ldbu	r3,-28(fp)
   9ac80:	e0bffc17 	ldw	r2,-16(fp)
   9ac84:	1885883a 	add	r2,r3,r2
   9ac88:	10800204 	addi	r2,r2,8
   9ac8c:	108000c3 	ldbu	r2,3(r2)
   9ac90:	1007883a 	mov	r3,r2
   9ac94:	e0bff803 	ldbu	r2,-32(fp)
   9ac98:	0084303a 	nor	r2,zero,r2
   9ac9c:	1884703a 	and	r2,r3,r2
   9aca0:	1007883a 	mov	r3,r2
   9aca4:	e0bffc17 	ldw	r2,-16(fp)
   9aca8:	2085883a 	add	r2,r4,r2
   9acac:	10800204 	addi	r2,r2,8
   9acb0:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   9acb4:	e0fff903 	ldbu	r3,-28(fp)
   9acb8:	e0bffc17 	ldw	r2,-16(fp)
   9acbc:	1885883a 	add	r2,r3,r2
   9acc0:	10800204 	addi	r2,r2,8
   9acc4:	108000c3 	ldbu	r2,3(r2)
   9acc8:	10803fcc 	andi	r2,r2,255
   9accc:	1004c03a 	cmpne	r2,r2,zero
   9acd0:	1000091e 	bne	r2,zero,9acf8 <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
   9acd4:	e0bffc17 	ldw	r2,-16(fp)
   9acd8:	10800283 	ldbu	r2,10(r2)
   9acdc:	1007883a 	mov	r3,r2
   9ace0:	e0bff843 	ldbu	r2,-31(fp)
   9ace4:	0084303a 	nor	r2,zero,r2
   9ace8:	1884703a 	and	r2,r3,r2
   9acec:	1007883a 	mov	r3,r2
   9acf0:	e0bffc17 	ldw	r2,-16(fp)
   9acf4:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   9acf8:	e0bffc17 	ldw	r2,-16(fp)
   9acfc:	10c00283 	ldbu	r3,10(r2)
   9ad00:	e0bff8c3 	ldbu	r2,-29(fp)
   9ad04:	1884b03a 	or	r2,r3,r2
   9ad08:	1007883a 	mov	r3,r2
   9ad0c:	e0bffc17 	ldw	r2,-16(fp)
   9ad10:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   9ad14:	e13ff983 	ldbu	r4,-26(fp)
   9ad18:	e0fff983 	ldbu	r3,-26(fp)
   9ad1c:	e0bffc17 	ldw	r2,-16(fp)
   9ad20:	1885883a 	add	r2,r3,r2
   9ad24:	10800204 	addi	r2,r2,8
   9ad28:	10c000c3 	ldbu	r3,3(r2)
   9ad2c:	e0bff883 	ldbu	r2,-30(fp)
   9ad30:	1884b03a 	or	r2,r3,r2
   9ad34:	1007883a 	mov	r3,r2
   9ad38:	e0bffc17 	ldw	r2,-16(fp)
   9ad3c:	2085883a 	add	r2,r4,r2
   9ad40:	10800204 	addi	r2,r2,8
   9ad44:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   9ad48:	e0bffa17 	ldw	r2,-24(fp)
   9ad4c:	10800817 	ldw	r2,32(r2)
   9ad50:	1005003a 	cmpeq	r2,r2,zero
   9ad54:	1000441e 	bne	r2,zero,9ae68 <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
   9ad58:	e0bffa17 	ldw	r2,-24(fp)
   9ad5c:	10800817 	ldw	r2,32(r2)
   9ad60:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
   9ad64:	e0bffb17 	ldw	r2,-20(fp)
   9ad68:	10800017 	ldw	r2,0(r2)
   9ad6c:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
   9ad70:	00003a06 	br	9ae5c <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   9ad74:	e13ff903 	ldbu	r4,-28(fp)
   9ad78:	e0fff903 	ldbu	r3,-28(fp)
   9ad7c:	e0bffc17 	ldw	r2,-16(fp)
   9ad80:	1885883a 	add	r2,r3,r2
   9ad84:	10800204 	addi	r2,r2,8
   9ad88:	108000c3 	ldbu	r2,3(r2)
   9ad8c:	1007883a 	mov	r3,r2
   9ad90:	e0bff803 	ldbu	r2,-32(fp)
   9ad94:	0084303a 	nor	r2,zero,r2
   9ad98:	1884703a 	and	r2,r3,r2
   9ad9c:	1007883a 	mov	r3,r2
   9ada0:	e0bffc17 	ldw	r2,-16(fp)
   9ada4:	2085883a 	add	r2,r4,r2
   9ada8:	10800204 	addi	r2,r2,8
   9adac:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   9adb0:	e0fff903 	ldbu	r3,-28(fp)
   9adb4:	e0bffc17 	ldw	r2,-16(fp)
   9adb8:	1885883a 	add	r2,r3,r2
   9adbc:	10800204 	addi	r2,r2,8
   9adc0:	108000c3 	ldbu	r2,3(r2)
   9adc4:	10803fcc 	andi	r2,r2,255
   9adc8:	1004c03a 	cmpne	r2,r2,zero
   9adcc:	1000091e 	bne	r2,zero,9adf4 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
   9add0:	e0bffc17 	ldw	r2,-16(fp)
   9add4:	10800283 	ldbu	r2,10(r2)
   9add8:	1007883a 	mov	r3,r2
   9addc:	e0bff843 	ldbu	r2,-31(fp)
   9ade0:	0084303a 	nor	r2,zero,r2
   9ade4:	1884703a 	and	r2,r3,r2
   9ade8:	1007883a 	mov	r3,r2
   9adec:	e0bffc17 	ldw	r2,-16(fp)
   9adf0:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   9adf4:	e0bffc17 	ldw	r2,-16(fp)
   9adf8:	10c00283 	ldbu	r3,10(r2)
   9adfc:	e0bff8c3 	ldbu	r2,-29(fp)
   9ae00:	1884b03a 	or	r2,r3,r2
   9ae04:	1007883a 	mov	r3,r2
   9ae08:	e0bffc17 	ldw	r2,-16(fp)
   9ae0c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   9ae10:	e13ff983 	ldbu	r4,-26(fp)
   9ae14:	e0fff983 	ldbu	r3,-26(fp)
   9ae18:	e0bffc17 	ldw	r2,-16(fp)
   9ae1c:	1885883a 	add	r2,r3,r2
   9ae20:	10800204 	addi	r2,r2,8
   9ae24:	10c000c3 	ldbu	r3,3(r2)
   9ae28:	e0bff883 	ldbu	r2,-30(fp)
   9ae2c:	1884b03a 	or	r2,r3,r2
   9ae30:	1007883a 	mov	r3,r2
   9ae34:	e0bffc17 	ldw	r2,-16(fp)
   9ae38:	2085883a 	add	r2,r4,r2
   9ae3c:	10800204 	addi	r2,r2,8
   9ae40:	10c000c5 	stb	r3,3(r2)
            pevents++;
   9ae44:	e0bffb17 	ldw	r2,-20(fp)
   9ae48:	10800104 	addi	r2,r2,4
   9ae4c:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
   9ae50:	e0bffb17 	ldw	r2,-20(fp)
   9ae54:	10800017 	ldw	r2,0(r2)
   9ae58:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   9ae5c:	e0bffc17 	ldw	r2,-16(fp)
   9ae60:	1004c03a 	cmpne	r2,r2,zero
   9ae64:	103fc31e 	bne	r2,zero,9ad74 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   9ae68:	e0fffa17 	ldw	r3,-24(fp)
   9ae6c:	e0bffe03 	ldbu	r2,-8(fp)
   9ae70:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
   9ae74:	e0fffa17 	ldw	r3,-24(fp)
   9ae78:	e0bff983 	ldbu	r2,-26(fp)
   9ae7c:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
   9ae80:	e0fffa17 	ldw	r3,-24(fp)
   9ae84:	e0bff943 	ldbu	r2,-27(fp)
   9ae88:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
   9ae8c:	e0fffa17 	ldw	r3,-24(fp)
   9ae90:	e0bff8c3 	ldbu	r2,-29(fp)
   9ae94:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
   9ae98:	e0fffa17 	ldw	r3,-24(fp)
   9ae9c:	e0bff883 	ldbu	r2,-30(fp)
   9aea0:	18800d45 	stb	r2,53(r3)
   9aea4:	e0bff717 	ldw	r2,-36(fp)
   9aea8:	e0bff215 	stw	r2,-56(fp)
   9aeac:	e0bff217 	ldw	r2,-56(fp)
   9aeb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   9aeb4:	008002b4 	movhi	r2,10
   9aeb8:	108e4544 	addi	r2,r2,14613
   9aebc:	10800003 	ldbu	r2,0(r2)
   9aec0:	10803fcc 	andi	r2,r2,255
   9aec4:	10800058 	cmpnei	r2,r2,1
   9aec8:	1000011e 	bne	r2,zero,9aed0 <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
   9aecc:	009408c0 	call	9408c <OS_Sched>
    }
    return (OS_ERR_NONE);
   9aed0:	e03fff15 	stw	zero,-4(fp)
   9aed4:	e0bfff17 	ldw	r2,-4(fp)
}
   9aed8:	e037883a 	mov	sp,fp
   9aedc:	dfc00117 	ldw	ra,4(sp)
   9aee0:	df000017 	ldw	fp,0(sp)
   9aee4:	dec00204 	addi	sp,sp,8
   9aee8:	f800283a 	ret

0009aeec <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   9aeec:	deffed04 	addi	sp,sp,-76
   9aef0:	dfc01215 	stw	ra,72(sp)
   9aef4:	df001115 	stw	fp,68(sp)
   9aef8:	df001104 	addi	fp,sp,68
   9aefc:	e13ffb15 	stw	r4,-20(fp)
   9af00:	e17ffc15 	stw	r5,-16(fp)
   9af04:	e1bffd15 	stw	r6,-12(fp)
   9af08:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   9af0c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   9af10:	e0bffe03 	ldbu	r2,-8(fp)
   9af14:	10800570 	cmpltui	r2,r2,21
   9af18:	1000031e 	bne	r2,zero,9af28 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   9af1c:	00800a84 	movi	r2,42
   9af20:	e0bfff15 	stw	r2,-4(fp)
   9af24:	00006006 	br	9b0a8 <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9af28:	0005303a 	rdctl	r2,status
   9af2c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9af30:	e0fff717 	ldw	r3,-36(fp)
   9af34:	00bfff84 	movi	r2,-2
   9af38:	1884703a 	and	r2,r3,r2
   9af3c:	1001703a 	wrctl	status,r2
  
  return context;
   9af40:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   9af44:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   9af48:	008002b4 	movhi	r2,10
   9af4c:	108e5304 	addi	r2,r2,14668
   9af50:	10800003 	ldbu	r2,0(r2)
   9af54:	10803fcc 	andi	r2,r2,255
   9af58:	1005003a 	cmpeq	r2,r2,zero
   9af5c:	1000071e 	bne	r2,zero,9af7c <OSTaskCreate+0x90>
   9af60:	e0bff817 	ldw	r2,-32(fp)
   9af64:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9af68:	e0bff617 	ldw	r2,-40(fp)
   9af6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   9af70:	00800f04 	movi	r2,60
   9af74:	e0bfff15 	stw	r2,-4(fp)
   9af78:	00004b06 	br	9b0a8 <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   9af7c:	e0bffe03 	ldbu	r2,-8(fp)
   9af80:	00c00334 	movhi	r3,12
   9af84:	18e2b904 	addi	r3,r3,-29980
   9af88:	1085883a 	add	r2,r2,r2
   9af8c:	1085883a 	add	r2,r2,r2
   9af90:	10c5883a 	add	r2,r2,r3
   9af94:	10800017 	ldw	r2,0(r2)
   9af98:	1004c03a 	cmpne	r2,r2,zero
   9af9c:	10003c1e 	bne	r2,zero,9b090 <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   9afa0:	e0bffe03 	ldbu	r2,-8(fp)
   9afa4:	00c00334 	movhi	r3,12
   9afa8:	18e2b904 	addi	r3,r3,-29980
   9afac:	1085883a 	add	r2,r2,r2
   9afb0:	1085883a 	add	r2,r2,r2
   9afb4:	10c7883a 	add	r3,r2,r3
   9afb8:	00800044 	movi	r2,1
   9afbc:	18800015 	stw	r2,0(r3)
   9afc0:	e0bff817 	ldw	r2,-32(fp)
   9afc4:	e0bff515 	stw	r2,-44(fp)
   9afc8:	e0bff517 	ldw	r2,-44(fp)
   9afcc:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   9afd0:	e13ffb17 	ldw	r4,-20(fp)
   9afd4:	e17ffc17 	ldw	r5,-16(fp)
   9afd8:	e1bffd17 	ldw	r6,-12(fp)
   9afdc:	000f883a 	mov	r7,zero
   9afe0:	009eb880 	call	9eb88 <OSTaskStkInit>
   9afe4:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   9afe8:	e13ffe03 	ldbu	r4,-8(fp)
   9afec:	d8000015 	stw	zero,0(sp)
   9aff0:	d8000115 	stw	zero,4(sp)
   9aff4:	d8000215 	stw	zero,8(sp)
   9aff8:	e17ffa17 	ldw	r5,-24(fp)
   9affc:	000d883a 	mov	r6,zero
   9b000:	000f883a 	mov	r7,zero
   9b004:	00944940 	call	94494 <OS_TCBInit>
   9b008:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
   9b00c:	e0bff903 	ldbu	r2,-28(fp)
   9b010:	1004c03a 	cmpne	r2,r2,zero
   9b014:	1000081e 	bne	r2,zero,9b038 <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   9b018:	008002b4 	movhi	r2,10
   9b01c:	108e4544 	addi	r2,r2,14613
   9b020:	10800003 	ldbu	r2,0(r2)
   9b024:	10803fcc 	andi	r2,r2,255
   9b028:	10800058 	cmpnei	r2,r2,1
   9b02c:	1000151e 	bne	r2,zero,9b084 <OSTaskCreate+0x198>
                OS_Sched();
   9b030:	009408c0 	call	9408c <OS_Sched>
   9b034:	00001306 	br	9b084 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9b038:	0005303a 	rdctl	r2,status
   9b03c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9b040:	e0fff417 	ldw	r3,-48(fp)
   9b044:	00bfff84 	movi	r2,-2
   9b048:	1884703a 	and	r2,r3,r2
   9b04c:	1001703a 	wrctl	status,r2
  
  return context;
   9b050:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   9b054:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   9b058:	e0bffe03 	ldbu	r2,-8(fp)
   9b05c:	00c00334 	movhi	r3,12
   9b060:	18e2b904 	addi	r3,r3,-29980
   9b064:	1085883a 	add	r2,r2,r2
   9b068:	1085883a 	add	r2,r2,r2
   9b06c:	10c5883a 	add	r2,r2,r3
   9b070:	10000015 	stw	zero,0(r2)
   9b074:	e0bff817 	ldw	r2,-32(fp)
   9b078:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9b07c:	e0bff317 	ldw	r2,-52(fp)
   9b080:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   9b084:	e0bff903 	ldbu	r2,-28(fp)
   9b088:	e0bfff15 	stw	r2,-4(fp)
   9b08c:	00000606 	br	9b0a8 <OSTaskCreate+0x1bc>
   9b090:	e0bff817 	ldw	r2,-32(fp)
   9b094:	e0bff215 	stw	r2,-56(fp)
   9b098:	e0bff217 	ldw	r2,-56(fp)
   9b09c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   9b0a0:	00800a04 	movi	r2,40
   9b0a4:	e0bfff15 	stw	r2,-4(fp)
   9b0a8:	e0bfff17 	ldw	r2,-4(fp)
}
   9b0ac:	e037883a 	mov	sp,fp
   9b0b0:	dfc00117 	ldw	ra,4(sp)
   9b0b4:	df000017 	ldw	fp,0(sp)
   9b0b8:	dec00204 	addi	sp,sp,8
   9b0bc:	f800283a 	ret

0009b0c0 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   9b0c0:	deffeb04 	addi	sp,sp,-84
   9b0c4:	dfc01415 	stw	ra,80(sp)
   9b0c8:	df001315 	stw	fp,76(sp)
   9b0cc:	df001304 	addi	fp,sp,76
   9b0d0:	e13ff915 	stw	r4,-28(fp)
   9b0d4:	e17ffa15 	stw	r5,-24(fp)
   9b0d8:	e1bffb15 	stw	r6,-20(fp)
   9b0dc:	e0800217 	ldw	r2,8(fp)
   9b0e0:	e0c00617 	ldw	r3,24(fp)
   9b0e4:	e1fffc05 	stb	r7,-16(fp)
   9b0e8:	e0bffd0d 	sth	r2,-12(fp)
   9b0ec:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   9b0f0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   9b0f4:	e0bffc03 	ldbu	r2,-16(fp)
   9b0f8:	10800570 	cmpltui	r2,r2,21
   9b0fc:	1000031e 	bne	r2,zero,9b10c <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   9b100:	00800a84 	movi	r2,42
   9b104:	e0bfff15 	stw	r2,-4(fp)
   9b108:	00006706 	br	9b2a8 <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9b10c:	0005303a 	rdctl	r2,status
   9b110:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9b114:	e0fff517 	ldw	r3,-44(fp)
   9b118:	00bfff84 	movi	r2,-2
   9b11c:	1884703a 	and	r2,r3,r2
   9b120:	1001703a 	wrctl	status,r2
  
  return context;
   9b124:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   9b128:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   9b12c:	008002b4 	movhi	r2,10
   9b130:	108e5304 	addi	r2,r2,14668
   9b134:	10800003 	ldbu	r2,0(r2)
   9b138:	10803fcc 	andi	r2,r2,255
   9b13c:	1005003a 	cmpeq	r2,r2,zero
   9b140:	1000071e 	bne	r2,zero,9b160 <OSTaskCreateExt+0xa0>
   9b144:	e0bff617 	ldw	r2,-40(fp)
   9b148:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9b14c:	e0bff417 	ldw	r2,-48(fp)
   9b150:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   9b154:	00800f04 	movi	r2,60
   9b158:	e0bfff15 	stw	r2,-4(fp)
   9b15c:	00005206 	br	9b2a8 <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   9b160:	e0bffc03 	ldbu	r2,-16(fp)
   9b164:	00c00334 	movhi	r3,12
   9b168:	18e2b904 	addi	r3,r3,-29980
   9b16c:	1085883a 	add	r2,r2,r2
   9b170:	1085883a 	add	r2,r2,r2
   9b174:	10c5883a 	add	r2,r2,r3
   9b178:	10800017 	ldw	r2,0(r2)
   9b17c:	1004c03a 	cmpne	r2,r2,zero
   9b180:	1000431e 	bne	r2,zero,9b290 <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   9b184:	e0bffc03 	ldbu	r2,-16(fp)
   9b188:	00c00334 	movhi	r3,12
   9b18c:	18e2b904 	addi	r3,r3,-29980
   9b190:	1085883a 	add	r2,r2,r2
   9b194:	1085883a 	add	r2,r2,r2
   9b198:	10c7883a 	add	r3,r2,r3
   9b19c:	00800044 	movi	r2,1
   9b1a0:	18800015 	stw	r2,0(r3)
   9b1a4:	e0bff617 	ldw	r2,-40(fp)
   9b1a8:	e0bff315 	stw	r2,-52(fp)
   9b1ac:	e0bff317 	ldw	r2,-52(fp)
   9b1b0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   9b1b4:	e1bffe0b 	ldhu	r6,-8(fp)
   9b1b8:	e1000317 	ldw	r4,12(fp)
   9b1bc:	e1400417 	ldw	r5,16(fp)
   9b1c0:	009c33c0 	call	9c33c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   9b1c4:	e1fffe0b 	ldhu	r7,-8(fp)
   9b1c8:	e13ff917 	ldw	r4,-28(fp)
   9b1cc:	e17ffa17 	ldw	r5,-24(fp)
   9b1d0:	e1bffb17 	ldw	r6,-20(fp)
   9b1d4:	009eb880 	call	9eb88 <OSTaskStkInit>
   9b1d8:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   9b1dc:	e13ffc03 	ldbu	r4,-16(fp)
   9b1e0:	e1fffd0b 	ldhu	r7,-12(fp)
   9b1e4:	e0fffe0b 	ldhu	r3,-8(fp)
   9b1e8:	e0800417 	ldw	r2,16(fp)
   9b1ec:	d8800015 	stw	r2,0(sp)
   9b1f0:	e0800517 	ldw	r2,20(fp)
   9b1f4:	d8800115 	stw	r2,4(sp)
   9b1f8:	d8c00215 	stw	r3,8(sp)
   9b1fc:	e17ff817 	ldw	r5,-32(fp)
   9b200:	e1800317 	ldw	r6,12(fp)
   9b204:	00944940 	call	94494 <OS_TCBInit>
   9b208:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
   9b20c:	e0bff703 	ldbu	r2,-36(fp)
   9b210:	1004c03a 	cmpne	r2,r2,zero
   9b214:	1000081e 	bne	r2,zero,9b238 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   9b218:	008002b4 	movhi	r2,10
   9b21c:	108e4544 	addi	r2,r2,14613
   9b220:	10800003 	ldbu	r2,0(r2)
   9b224:	10803fcc 	andi	r2,r2,255
   9b228:	10800058 	cmpnei	r2,r2,1
   9b22c:	1000151e 	bne	r2,zero,9b284 <OSTaskCreateExt+0x1c4>
                OS_Sched();
   9b230:	009408c0 	call	9408c <OS_Sched>
   9b234:	00001306 	br	9b284 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9b238:	0005303a 	rdctl	r2,status
   9b23c:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9b240:	e0fff217 	ldw	r3,-56(fp)
   9b244:	00bfff84 	movi	r2,-2
   9b248:	1884703a 	and	r2,r3,r2
   9b24c:	1001703a 	wrctl	status,r2
  
  return context;
   9b250:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   9b254:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   9b258:	e0bffc03 	ldbu	r2,-16(fp)
   9b25c:	00c00334 	movhi	r3,12
   9b260:	18e2b904 	addi	r3,r3,-29980
   9b264:	1085883a 	add	r2,r2,r2
   9b268:	1085883a 	add	r2,r2,r2
   9b26c:	10c5883a 	add	r2,r2,r3
   9b270:	10000015 	stw	zero,0(r2)
   9b274:	e0bff617 	ldw	r2,-40(fp)
   9b278:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9b27c:	e0bff117 	ldw	r2,-60(fp)
   9b280:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   9b284:	e0bff703 	ldbu	r2,-36(fp)
   9b288:	e0bfff15 	stw	r2,-4(fp)
   9b28c:	00000606 	br	9b2a8 <OSTaskCreateExt+0x1e8>
   9b290:	e0bff617 	ldw	r2,-40(fp)
   9b294:	e0bff015 	stw	r2,-64(fp)
   9b298:	e0bff017 	ldw	r2,-64(fp)
   9b29c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   9b2a0:	00800a04 	movi	r2,40
   9b2a4:	e0bfff15 	stw	r2,-4(fp)
   9b2a8:	e0bfff17 	ldw	r2,-4(fp)
}
   9b2ac:	e037883a 	mov	sp,fp
   9b2b0:	dfc00117 	ldw	ra,4(sp)
   9b2b4:	df000017 	ldw	fp,0(sp)
   9b2b8:	dec00204 	addi	sp,sp,8
   9b2bc:	f800283a 	ret

0009b2c0 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   9b2c0:	defff304 	addi	sp,sp,-52
   9b2c4:	dfc00c15 	stw	ra,48(sp)
   9b2c8:	df000b15 	stw	fp,44(sp)
   9b2cc:	df000b04 	addi	fp,sp,44
   9b2d0:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   9b2d4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   9b2d8:	008002b4 	movhi	r2,10
   9b2dc:	108e5304 	addi	r2,r2,14668
   9b2e0:	10800003 	ldbu	r2,0(r2)
   9b2e4:	10803fcc 	andi	r2,r2,255
   9b2e8:	1005003a 	cmpeq	r2,r2,zero
   9b2ec:	1000031e 	bne	r2,zero,9b2fc <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
   9b2f0:	00801004 	movi	r2,64
   9b2f4:	e0bfff15 	stw	r2,-4(fp)
   9b2f8:	0000ee06 	br	9b6b4 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   9b2fc:	e0bffe03 	ldbu	r2,-8(fp)
   9b300:	10800518 	cmpnei	r2,r2,20
   9b304:	1000031e 	bne	r2,zero,9b314 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
   9b308:	00800f84 	movi	r2,62
   9b30c:	e0bfff15 	stw	r2,-4(fp)
   9b310:	0000e806 	br	9b6b4 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   9b314:	e0bffe03 	ldbu	r2,-8(fp)
   9b318:	10800530 	cmpltui	r2,r2,20
   9b31c:	1000061e 	bne	r2,zero,9b338 <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
   9b320:	e0bffe03 	ldbu	r2,-8(fp)
   9b324:	10803fe0 	cmpeqi	r2,r2,255
   9b328:	1000031e 	bne	r2,zero,9b338 <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
   9b32c:	00800a84 	movi	r2,42
   9b330:	e0bfff15 	stw	r2,-4(fp)
   9b334:	0000df06 	br	9b6b4 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9b338:	0005303a 	rdctl	r2,status
   9b33c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9b340:	e0fffa17 	ldw	r3,-24(fp)
   9b344:	00bfff84 	movi	r2,-2
   9b348:	1884703a 	and	r2,r3,r2
   9b34c:	1001703a 	wrctl	status,r2
  
  return context;
   9b350:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   9b354:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   9b358:	e0bffe03 	ldbu	r2,-8(fp)
   9b35c:	10803fd8 	cmpnei	r2,r2,255
   9b360:	1000051e 	bne	r2,zero,9b378 <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   9b364:	008002b4 	movhi	r2,10
   9b368:	108e5404 	addi	r2,r2,14672
   9b36c:	10800017 	ldw	r2,0(r2)
   9b370:	10800c83 	ldbu	r2,50(r2)
   9b374:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   9b378:	e0bffe03 	ldbu	r2,-8(fp)
   9b37c:	00c00334 	movhi	r3,12
   9b380:	18e2b904 	addi	r3,r3,-29980
   9b384:	1085883a 	add	r2,r2,r2
   9b388:	1085883a 	add	r2,r2,r2
   9b38c:	10c5883a 	add	r2,r2,r3
   9b390:	10800017 	ldw	r2,0(r2)
   9b394:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   9b398:	e0bffc17 	ldw	r2,-16(fp)
   9b39c:	1004c03a 	cmpne	r2,r2,zero
   9b3a0:	1000071e 	bne	r2,zero,9b3c0 <OSTaskDel+0x100>
   9b3a4:	e0bffb17 	ldw	r2,-20(fp)
   9b3a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9b3ac:	e0bff917 	ldw	r2,-28(fp)
   9b3b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   9b3b4:	008010c4 	movi	r2,67
   9b3b8:	e0bfff15 	stw	r2,-4(fp)
   9b3bc:	0000bd06 	br	9b6b4 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   9b3c0:	e0bffc17 	ldw	r2,-16(fp)
   9b3c4:	10800058 	cmpnei	r2,r2,1
   9b3c8:	1000071e 	bne	r2,zero,9b3e8 <OSTaskDel+0x128>
   9b3cc:	e0bffb17 	ldw	r2,-20(fp)
   9b3d0:	e0bff815 	stw	r2,-32(fp)
   9b3d4:	e0bff817 	ldw	r2,-32(fp)
   9b3d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   9b3dc:	00800f44 	movi	r2,61
   9b3e0:	e0bfff15 	stw	r2,-4(fp)
   9b3e4:	0000b306 	br	9b6b4 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   9b3e8:	e0bffc17 	ldw	r2,-16(fp)
   9b3ec:	10800d03 	ldbu	r2,52(r2)
   9b3f0:	11003fcc 	andi	r4,r2,255
   9b3f4:	e0bffc17 	ldw	r2,-16(fp)
   9b3f8:	10800d03 	ldbu	r2,52(r2)
   9b3fc:	10c03fcc 	andi	r3,r2,255
   9b400:	008002b4 	movhi	r2,10
   9b404:	108e5144 	addi	r2,r2,14661
   9b408:	10c5883a 	add	r2,r2,r3
   9b40c:	10800003 	ldbu	r2,0(r2)
   9b410:	1007883a 	mov	r3,r2
   9b414:	e0bffc17 	ldw	r2,-16(fp)
   9b418:	10800d43 	ldbu	r2,53(r2)
   9b41c:	0084303a 	nor	r2,zero,r2
   9b420:	1884703a 	and	r2,r3,r2
   9b424:	1007883a 	mov	r3,r2
   9b428:	008002b4 	movhi	r2,10
   9b42c:	108e5144 	addi	r2,r2,14661
   9b430:	1105883a 	add	r2,r2,r4
   9b434:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   9b438:	e0bffc17 	ldw	r2,-16(fp)
   9b43c:	10800d03 	ldbu	r2,52(r2)
   9b440:	10c03fcc 	andi	r3,r2,255
   9b444:	008002b4 	movhi	r2,10
   9b448:	108e5144 	addi	r2,r2,14661
   9b44c:	10c5883a 	add	r2,r2,r3
   9b450:	10800003 	ldbu	r2,0(r2)
   9b454:	10803fcc 	andi	r2,r2,255
   9b458:	1004c03a 	cmpne	r2,r2,zero
   9b45c:	10000c1e 	bne	r2,zero,9b490 <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   9b460:	e0bffc17 	ldw	r2,-16(fp)
   9b464:	10800d83 	ldbu	r2,54(r2)
   9b468:	0084303a 	nor	r2,zero,r2
   9b46c:	1007883a 	mov	r3,r2
   9b470:	008002b4 	movhi	r2,10
   9b474:	108e5104 	addi	r2,r2,14660
   9b478:	10800003 	ldbu	r2,0(r2)
   9b47c:	1884703a 	and	r2,r3,r2
   9b480:	1007883a 	mov	r3,r2
   9b484:	008002b4 	movhi	r2,10
   9b488:	108e5104 	addi	r2,r2,14660
   9b48c:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   9b490:	e0bffc17 	ldw	r2,-16(fp)
   9b494:	10800717 	ldw	r2,28(r2)
   9b498:	1005003a 	cmpeq	r2,r2,zero
   9b49c:	1000041e 	bne	r2,zero,9b4b0 <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   9b4a0:	e0bffc17 	ldw	r2,-16(fp)
   9b4a4:	11400717 	ldw	r5,28(r2)
   9b4a8:	e13ffc17 	ldw	r4,-16(fp)
   9b4ac:	0093a440 	call	93a44 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   9b4b0:	e0bffc17 	ldw	r2,-16(fp)
   9b4b4:	10800817 	ldw	r2,32(r2)
   9b4b8:	1005003a 	cmpeq	r2,r2,zero
   9b4bc:	1000041e 	bne	r2,zero,9b4d0 <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   9b4c0:	e0bffc17 	ldw	r2,-16(fp)
   9b4c4:	11400817 	ldw	r5,32(r2)
   9b4c8:	e13ffc17 	ldw	r4,-16(fp)
   9b4cc:	0093afc0 	call	93afc <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   9b4d0:	e0bffc17 	ldw	r2,-16(fp)
   9b4d4:	10800a17 	ldw	r2,40(r2)
   9b4d8:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   9b4dc:	e0bffd17 	ldw	r2,-12(fp)
   9b4e0:	1005003a 	cmpeq	r2,r2,zero
   9b4e4:	1000021e 	bne	r2,zero,9b4f0 <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   9b4e8:	e13ffd17 	ldw	r4,-12(fp)
   9b4ec:	00961900 	call	96190 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   9b4f0:	e0bffc17 	ldw	r2,-16(fp)
   9b4f4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   9b4f8:	e0bffc17 	ldw	r2,-16(fp)
   9b4fc:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   9b500:	e0bffc17 	ldw	r2,-16(fp)
   9b504:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   9b508:	008002b4 	movhi	r2,10
   9b50c:	108e4504 	addi	r2,r2,14612
   9b510:	10800003 	ldbu	r2,0(r2)
   9b514:	10803fcc 	andi	r2,r2,255
   9b518:	10803fe0 	cmpeqi	r2,r2,255
   9b51c:	1000081e 	bne	r2,zero,9b540 <OSTaskDel+0x280>
        OSLockNesting++;
   9b520:	008002b4 	movhi	r2,10
   9b524:	108e4504 	addi	r2,r2,14612
   9b528:	10800003 	ldbu	r2,0(r2)
   9b52c:	10800044 	addi	r2,r2,1
   9b530:	1007883a 	mov	r3,r2
   9b534:	008002b4 	movhi	r2,10
   9b538:	108e4504 	addi	r2,r2,14612
   9b53c:	10c00005 	stb	r3,0(r2)
   9b540:	e0bffb17 	ldw	r2,-20(fp)
   9b544:	e0bff715 	stw	r2,-36(fp)
   9b548:	e0bff717 	ldw	r2,-36(fp)
   9b54c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   9b550:	00936300 	call	93630 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9b554:	0005303a 	rdctl	r2,status
   9b558:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9b55c:	e0fff617 	ldw	r3,-40(fp)
   9b560:	00bfff84 	movi	r2,-2
   9b564:	1884703a 	and	r2,r3,r2
   9b568:	1001703a 	wrctl	status,r2
  
  return context;
   9b56c:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   9b570:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   9b574:	008002b4 	movhi	r2,10
   9b578:	108e4504 	addi	r2,r2,14612
   9b57c:	10800003 	ldbu	r2,0(r2)
   9b580:	10803fcc 	andi	r2,r2,255
   9b584:	1005003a 	cmpeq	r2,r2,zero
   9b588:	1000081e 	bne	r2,zero,9b5ac <OSTaskDel+0x2ec>
        OSLockNesting--;
   9b58c:	008002b4 	movhi	r2,10
   9b590:	108e4504 	addi	r2,r2,14612
   9b594:	10800003 	ldbu	r2,0(r2)
   9b598:	10bfffc4 	addi	r2,r2,-1
   9b59c:	1007883a 	mov	r3,r2
   9b5a0:	008002b4 	movhi	r2,10
   9b5a4:	108e4504 	addi	r2,r2,14612
   9b5a8:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   9b5ac:	e13ffc17 	ldw	r4,-16(fp)
   9b5b0:	009eeb80 	call	9eeb8 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   9b5b4:	008002b4 	movhi	r2,10
   9b5b8:	108e4d44 	addi	r2,r2,14645
   9b5bc:	10800003 	ldbu	r2,0(r2)
   9b5c0:	10bfffc4 	addi	r2,r2,-1
   9b5c4:	1007883a 	mov	r3,r2
   9b5c8:	008002b4 	movhi	r2,10
   9b5cc:	108e4d44 	addi	r2,r2,14645
   9b5d0:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   9b5d4:	e0bffe03 	ldbu	r2,-8(fp)
   9b5d8:	00c00334 	movhi	r3,12
   9b5dc:	18e2b904 	addi	r3,r3,-29980
   9b5e0:	1085883a 	add	r2,r2,r2
   9b5e4:	1085883a 	add	r2,r2,r2
   9b5e8:	10c5883a 	add	r2,r2,r3
   9b5ec:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   9b5f0:	e0bffc17 	ldw	r2,-16(fp)
   9b5f4:	10800617 	ldw	r2,24(r2)
   9b5f8:	1004c03a 	cmpne	r2,r2,zero
   9b5fc:	1000091e 	bne	r2,zero,9b624 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   9b600:	e0bffc17 	ldw	r2,-16(fp)
   9b604:	10800517 	ldw	r2,20(r2)
   9b608:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   9b60c:	e0bffc17 	ldw	r2,-16(fp)
   9b610:	10c00517 	ldw	r3,20(r2)
   9b614:	008002b4 	movhi	r2,10
   9b618:	108e4804 	addi	r2,r2,14624
   9b61c:	10c00015 	stw	r3,0(r2)
   9b620:	00000a06 	br	9b64c <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   9b624:	e0bffc17 	ldw	r2,-16(fp)
   9b628:	10c00617 	ldw	r3,24(r2)
   9b62c:	e0bffc17 	ldw	r2,-16(fp)
   9b630:	10800517 	ldw	r2,20(r2)
   9b634:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   9b638:	e0bffc17 	ldw	r2,-16(fp)
   9b63c:	10c00517 	ldw	r3,20(r2)
   9b640:	e0bffc17 	ldw	r2,-16(fp)
   9b644:	10800617 	ldw	r2,24(r2)
   9b648:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   9b64c:	008002b4 	movhi	r2,10
   9b650:	108e4c04 	addi	r2,r2,14640
   9b654:	10c00017 	ldw	r3,0(r2)
   9b658:	e0bffc17 	ldw	r2,-16(fp)
   9b65c:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   9b660:	00c002b4 	movhi	r3,10
   9b664:	18ce4c04 	addi	r3,r3,14640
   9b668:	e0bffc17 	ldw	r2,-16(fp)
   9b66c:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   9b670:	e0fffc17 	ldw	r3,-16(fp)
   9b674:	00800fc4 	movi	r2,63
   9b678:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   9b67c:	e0bffc17 	ldw	r2,-16(fp)
   9b680:	10001345 	stb	zero,77(r2)
   9b684:	e0bffb17 	ldw	r2,-20(fp)
   9b688:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9b68c:	e0bff517 	ldw	r2,-44(fp)
   9b690:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   9b694:	008002b4 	movhi	r2,10
   9b698:	108e4544 	addi	r2,r2,14613
   9b69c:	10800003 	ldbu	r2,0(r2)
   9b6a0:	10803fcc 	andi	r2,r2,255
   9b6a4:	10800058 	cmpnei	r2,r2,1
   9b6a8:	1000011e 	bne	r2,zero,9b6b0 <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
   9b6ac:	009408c0 	call	9408c <OS_Sched>
    }
    return (OS_ERR_NONE);
   9b6b0:	e03fff15 	stw	zero,-4(fp)
   9b6b4:	e0bfff17 	ldw	r2,-4(fp)
}
   9b6b8:	e037883a 	mov	sp,fp
   9b6bc:	dfc00117 	ldw	ra,4(sp)
   9b6c0:	df000017 	ldw	fp,0(sp)
   9b6c4:	dec00204 	addi	sp,sp,8
   9b6c8:	f800283a 	ret

0009b6cc <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   9b6cc:	defff404 	addi	sp,sp,-48
   9b6d0:	df000b15 	stw	fp,44(sp)
   9b6d4:	df000b04 	addi	fp,sp,44
   9b6d8:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   9b6dc:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   9b6e0:	e0bffe03 	ldbu	r2,-8(fp)
   9b6e4:	10800518 	cmpnei	r2,r2,20
   9b6e8:	1000031e 	bne	r2,zero,9b6f8 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   9b6ec:	00800f84 	movi	r2,62
   9b6f0:	e0bfff15 	stw	r2,-4(fp)
   9b6f4:	00004c06 	br	9b828 <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   9b6f8:	e0bffe03 	ldbu	r2,-8(fp)
   9b6fc:	10800530 	cmpltui	r2,r2,20
   9b700:	1000061e 	bne	r2,zero,9b71c <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
   9b704:	e0bffe03 	ldbu	r2,-8(fp)
   9b708:	10803fe0 	cmpeqi	r2,r2,255
   9b70c:	1000031e 	bne	r2,zero,9b71c <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
   9b710:	00800a84 	movi	r2,42
   9b714:	e0bfff15 	stw	r2,-4(fp)
   9b718:	00004306 	br	9b828 <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   9b71c:	e0bffe03 	ldbu	r2,-8(fp)
   9b720:	10803fd8 	cmpnei	r2,r2,255
   9b724:	1000141e 	bne	r2,zero,9b778 <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9b728:	0005303a 	rdctl	r2,status
   9b72c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9b730:	e0fffa17 	ldw	r3,-24(fp)
   9b734:	00bfff84 	movi	r2,-2
   9b738:	1884703a 	and	r2,r3,r2
   9b73c:	1001703a 	wrctl	status,r2
  
  return context;
   9b740:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   9b744:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   9b748:	008002b4 	movhi	r2,10
   9b74c:	108e5404 	addi	r2,r2,14672
   9b750:	10800017 	ldw	r2,0(r2)
   9b754:	10800dc3 	ldbu	r2,55(r2)
   9b758:	e0bffd05 	stb	r2,-12(fp)
   9b75c:	e0bffb17 	ldw	r2,-20(fp)
   9b760:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9b764:	e0bff917 	ldw	r2,-28(fp)
   9b768:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   9b76c:	e0bffd03 	ldbu	r2,-12(fp)
   9b770:	e0bfff15 	stw	r2,-4(fp)
   9b774:	00002c06 	br	9b828 <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9b778:	0005303a 	rdctl	r2,status
   9b77c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9b780:	e0fff817 	ldw	r3,-32(fp)
   9b784:	00bfff84 	movi	r2,-2
   9b788:	1884703a 	and	r2,r3,r2
   9b78c:	1001703a 	wrctl	status,r2
  
  return context;
   9b790:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   9b794:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
   9b798:	e0bffe03 	ldbu	r2,-8(fp)
   9b79c:	00c00334 	movhi	r3,12
   9b7a0:	18e2b904 	addi	r3,r3,-29980
   9b7a4:	1085883a 	add	r2,r2,r2
   9b7a8:	1085883a 	add	r2,r2,r2
   9b7ac:	10c5883a 	add	r2,r2,r3
   9b7b0:	10800017 	ldw	r2,0(r2)
   9b7b4:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   9b7b8:	e0bffc17 	ldw	r2,-16(fp)
   9b7bc:	1004c03a 	cmpne	r2,r2,zero
   9b7c0:	1000071e 	bne	r2,zero,9b7e0 <OSTaskDelReq+0x114>
   9b7c4:	e0bffb17 	ldw	r2,-20(fp)
   9b7c8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9b7cc:	e0bff717 	ldw	r2,-36(fp)
   9b7d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   9b7d4:	008010c4 	movi	r2,67
   9b7d8:	e0bfff15 	stw	r2,-4(fp)
   9b7dc:	00001206 	br	9b828 <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   9b7e0:	e0bffc17 	ldw	r2,-16(fp)
   9b7e4:	10800058 	cmpnei	r2,r2,1
   9b7e8:	1000071e 	bne	r2,zero,9b808 <OSTaskDelReq+0x13c>
   9b7ec:	e0bffb17 	ldw	r2,-20(fp)
   9b7f0:	e0bff615 	stw	r2,-40(fp)
   9b7f4:	e0bff617 	ldw	r2,-40(fp)
   9b7f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   9b7fc:	00800f44 	movi	r2,61
   9b800:	e0bfff15 	stw	r2,-4(fp)
   9b804:	00000806 	br	9b828 <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   9b808:	e0fffc17 	ldw	r3,-16(fp)
   9b80c:	00800fc4 	movi	r2,63
   9b810:	18800dc5 	stb	r2,55(r3)
   9b814:	e0bffb17 	ldw	r2,-20(fp)
   9b818:	e0bff515 	stw	r2,-44(fp)
   9b81c:	e0bff517 	ldw	r2,-44(fp)
   9b820:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   9b824:	e03fff15 	stw	zero,-4(fp)
   9b828:	e0bfff17 	ldw	r2,-4(fp)
}
   9b82c:	e037883a 	mov	sp,fp
   9b830:	df000017 	ldw	fp,0(sp)
   9b834:	dec00104 	addi	sp,sp,4
   9b838:	f800283a 	ret

0009b83c <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   9b83c:	defff304 	addi	sp,sp,-52
   9b840:	dfc00c15 	stw	ra,48(sp)
   9b844:	df000b15 	stw	fp,44(sp)
   9b848:	df000b04 	addi	fp,sp,44
   9b84c:	e17ffd15 	stw	r5,-12(fp)
   9b850:	e1bffe15 	stw	r6,-8(fp)
   9b854:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   9b858:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   9b85c:	e0bffe17 	ldw	r2,-8(fp)
   9b860:	1004c03a 	cmpne	r2,r2,zero
   9b864:	1000021e 	bne	r2,zero,9b870 <OSTaskNameGet+0x34>
        return (0);
   9b868:	e03fff15 	stw	zero,-4(fp)
   9b86c:	00005b06 	br	9b9dc <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   9b870:	e0bffc03 	ldbu	r2,-16(fp)
   9b874:	10800570 	cmpltui	r2,r2,21
   9b878:	1000081e 	bne	r2,zero,9b89c <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   9b87c:	e0bffc03 	ldbu	r2,-16(fp)
   9b880:	10803fe0 	cmpeqi	r2,r2,255
   9b884:	1000051e 	bne	r2,zero,9b89c <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   9b888:	e0fffe17 	ldw	r3,-8(fp)
   9b88c:	00800a84 	movi	r2,42
   9b890:	18800005 	stb	r2,0(r3)
            return (0);
   9b894:	e03fff15 	stw	zero,-4(fp)
   9b898:	00005006 	br	9b9dc <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   9b89c:	e0bffd17 	ldw	r2,-12(fp)
   9b8a0:	1004c03a 	cmpne	r2,r2,zero
   9b8a4:	1000051e 	bne	r2,zero,9b8bc <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   9b8a8:	e0fffe17 	ldw	r3,-8(fp)
   9b8ac:	00800304 	movi	r2,12
   9b8b0:	18800005 	stb	r2,0(r3)
        return (0);
   9b8b4:	e03fff15 	stw	zero,-4(fp)
   9b8b8:	00004806 	br	9b9dc <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   9b8bc:	008002b4 	movhi	r2,10
   9b8c0:	108e5304 	addi	r2,r2,14668
   9b8c4:	10800003 	ldbu	r2,0(r2)
   9b8c8:	10803fcc 	andi	r2,r2,255
   9b8cc:	1005003a 	cmpeq	r2,r2,zero
   9b8d0:	1000051e 	bne	r2,zero,9b8e8 <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
   9b8d4:	e0fffe17 	ldw	r3,-8(fp)
   9b8d8:	00800444 	movi	r2,17
   9b8dc:	18800005 	stb	r2,0(r3)
        return (0);
   9b8e0:	e03fff15 	stw	zero,-4(fp)
   9b8e4:	00003d06 	br	9b9dc <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9b8e8:	0005303a 	rdctl	r2,status
   9b8ec:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9b8f0:	e0fff817 	ldw	r3,-32(fp)
   9b8f4:	00bfff84 	movi	r2,-2
   9b8f8:	1884703a 	and	r2,r3,r2
   9b8fc:	1001703a 	wrctl	status,r2
  
  return context;
   9b900:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
   9b904:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   9b908:	e0bffc03 	ldbu	r2,-16(fp)
   9b90c:	10803fd8 	cmpnei	r2,r2,255
   9b910:	1000051e 	bne	r2,zero,9b928 <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
   9b914:	008002b4 	movhi	r2,10
   9b918:	108e5404 	addi	r2,r2,14672
   9b91c:	10800017 	ldw	r2,0(r2)
   9b920:	10800c83 	ldbu	r2,50(r2)
   9b924:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   9b928:	e0bffc03 	ldbu	r2,-16(fp)
   9b92c:	00c00334 	movhi	r3,12
   9b930:	18e2b904 	addi	r3,r3,-29980
   9b934:	1085883a 	add	r2,r2,r2
   9b938:	1085883a 	add	r2,r2,r2
   9b93c:	10c5883a 	add	r2,r2,r3
   9b940:	10800017 	ldw	r2,0(r2)
   9b944:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   9b948:	e0bffb17 	ldw	r2,-20(fp)
   9b94c:	1004c03a 	cmpne	r2,r2,zero
   9b950:	1000091e 	bne	r2,zero,9b978 <OSTaskNameGet+0x13c>
   9b954:	e0bff917 	ldw	r2,-28(fp)
   9b958:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9b95c:	e0bff717 	ldw	r2,-36(fp)
   9b960:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   9b964:	e0fffe17 	ldw	r3,-8(fp)
   9b968:	008010c4 	movi	r2,67
   9b96c:	18800005 	stb	r2,0(r3)
        return (0);
   9b970:	e03fff15 	stw	zero,-4(fp)
   9b974:	00001906 	br	9b9dc <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   9b978:	e0bffb17 	ldw	r2,-20(fp)
   9b97c:	10800058 	cmpnei	r2,r2,1
   9b980:	1000091e 	bne	r2,zero,9b9a8 <OSTaskNameGet+0x16c>
   9b984:	e0bff917 	ldw	r2,-28(fp)
   9b988:	e0bff615 	stw	r2,-40(fp)
   9b98c:	e0bff617 	ldw	r2,-40(fp)
   9b990:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   9b994:	e0fffe17 	ldw	r3,-8(fp)
   9b998:	008010c4 	movi	r2,67
   9b99c:	18800005 	stb	r2,0(r3)
        return (0);
   9b9a0:	e03fff15 	stw	zero,-4(fp)
   9b9a4:	00000d06 	br	9b9dc <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   9b9a8:	e0bffb17 	ldw	r2,-20(fp)
   9b9ac:	11401304 	addi	r5,r2,76
   9b9b0:	e13ffd17 	ldw	r4,-12(fp)
   9b9b4:	00941d00 	call	941d0 <OS_StrCopy>
   9b9b8:	e0bffa05 	stb	r2,-24(fp)
   9b9bc:	e0bff917 	ldw	r2,-28(fp)
   9b9c0:	e0bff515 	stw	r2,-44(fp)
   9b9c4:	e0bff517 	ldw	r2,-44(fp)
   9b9c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   9b9cc:	e0bffe17 	ldw	r2,-8(fp)
   9b9d0:	10000005 	stb	zero,0(r2)
    return (len);
   9b9d4:	e0bffa03 	ldbu	r2,-24(fp)
   9b9d8:	e0bfff15 	stw	r2,-4(fp)
   9b9dc:	e0bfff17 	ldw	r2,-4(fp)
}
   9b9e0:	e037883a 	mov	sp,fp
   9b9e4:	dfc00117 	ldw	ra,4(sp)
   9b9e8:	df000017 	ldw	fp,0(sp)
   9b9ec:	dec00204 	addi	sp,sp,8
   9b9f0:	f800283a 	ret

0009b9f4 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   9b9f4:	defff304 	addi	sp,sp,-52
   9b9f8:	dfc00c15 	stw	ra,48(sp)
   9b9fc:	df000b15 	stw	fp,44(sp)
   9ba00:	df000b04 	addi	fp,sp,44
   9ba04:	e17ffe15 	stw	r5,-8(fp)
   9ba08:	e1bfff15 	stw	r6,-4(fp)
   9ba0c:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   9ba10:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   9ba14:	e0bfff17 	ldw	r2,-4(fp)
   9ba18:	1005003a 	cmpeq	r2,r2,zero
   9ba1c:	1000611e 	bne	r2,zero,9bba4 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   9ba20:	e0bffd03 	ldbu	r2,-12(fp)
   9ba24:	10800570 	cmpltui	r2,r2,21
   9ba28:	1000071e 	bne	r2,zero,9ba48 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   9ba2c:	e0bffd03 	ldbu	r2,-12(fp)
   9ba30:	10803fe0 	cmpeqi	r2,r2,255
   9ba34:	1000041e 	bne	r2,zero,9ba48 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   9ba38:	e0ffff17 	ldw	r3,-4(fp)
   9ba3c:	00800a84 	movi	r2,42
   9ba40:	18800005 	stb	r2,0(r3)
            return;
   9ba44:	00005706 	br	9bba4 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   9ba48:	e0bffe17 	ldw	r2,-8(fp)
   9ba4c:	1004c03a 	cmpne	r2,r2,zero
   9ba50:	1000041e 	bne	r2,zero,9ba64 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   9ba54:	e0ffff17 	ldw	r3,-4(fp)
   9ba58:	00800304 	movi	r2,12
   9ba5c:	18800005 	stb	r2,0(r3)
        return;
   9ba60:	00005006 	br	9bba4 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   9ba64:	008002b4 	movhi	r2,10
   9ba68:	108e5304 	addi	r2,r2,14668
   9ba6c:	10800003 	ldbu	r2,0(r2)
   9ba70:	10803fcc 	andi	r2,r2,255
   9ba74:	1005003a 	cmpeq	r2,r2,zero
   9ba78:	1000041e 	bne	r2,zero,9ba8c <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
   9ba7c:	e0ffff17 	ldw	r3,-4(fp)
   9ba80:	00800484 	movi	r2,18
   9ba84:	18800005 	stb	r2,0(r3)
        return;
   9ba88:	00004606 	br	9bba4 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9ba8c:	0005303a 	rdctl	r2,status
   9ba90:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9ba94:	e0fff917 	ldw	r3,-28(fp)
   9ba98:	00bfff84 	movi	r2,-2
   9ba9c:	1884703a 	and	r2,r3,r2
   9baa0:	1001703a 	wrctl	status,r2
  
  return context;
   9baa4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
   9baa8:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   9baac:	e0bffd03 	ldbu	r2,-12(fp)
   9bab0:	10803fd8 	cmpnei	r2,r2,255
   9bab4:	1000051e 	bne	r2,zero,9bacc <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
   9bab8:	008002b4 	movhi	r2,10
   9babc:	108e5404 	addi	r2,r2,14672
   9bac0:	10800017 	ldw	r2,0(r2)
   9bac4:	10800c83 	ldbu	r2,50(r2)
   9bac8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   9bacc:	e0bffd03 	ldbu	r2,-12(fp)
   9bad0:	00c00334 	movhi	r3,12
   9bad4:	18e2b904 	addi	r3,r3,-29980
   9bad8:	1085883a 	add	r2,r2,r2
   9badc:	1085883a 	add	r2,r2,r2
   9bae0:	10c5883a 	add	r2,r2,r3
   9bae4:	10800017 	ldw	r2,0(r2)
   9bae8:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   9baec:	e0bffb17 	ldw	r2,-20(fp)
   9baf0:	1004c03a 	cmpne	r2,r2,zero
   9baf4:	1000081e 	bne	r2,zero,9bb18 <OSTaskNameSet+0x124>
   9baf8:	e0bffa17 	ldw	r2,-24(fp)
   9bafc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9bb00:	e0bff817 	ldw	r2,-32(fp)
   9bb04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   9bb08:	e0ffff17 	ldw	r3,-4(fp)
   9bb0c:	008010c4 	movi	r2,67
   9bb10:	18800005 	stb	r2,0(r3)
        return;
   9bb14:	00002306 	br	9bba4 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   9bb18:	e0bffb17 	ldw	r2,-20(fp)
   9bb1c:	10800058 	cmpnei	r2,r2,1
   9bb20:	1000081e 	bne	r2,zero,9bb44 <OSTaskNameSet+0x150>
   9bb24:	e0bffa17 	ldw	r2,-24(fp)
   9bb28:	e0bff715 	stw	r2,-36(fp)
   9bb2c:	e0bff717 	ldw	r2,-36(fp)
   9bb30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   9bb34:	e0ffff17 	ldw	r3,-4(fp)
   9bb38:	008010c4 	movi	r2,67
   9bb3c:	18800005 	stb	r2,0(r3)
        return;
   9bb40:	00001806 	br	9bba4 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   9bb44:	e13ffe17 	ldw	r4,-8(fp)
   9bb48:	00942500 	call	94250 <OS_StrLen>
   9bb4c:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   9bb50:	e0bffc03 	ldbu	r2,-16(fp)
   9bb54:	10800830 	cmpltui	r2,r2,32
   9bb58:	1000081e 	bne	r2,zero,9bb7c <OSTaskNameSet+0x188>
   9bb5c:	e0bffa17 	ldw	r2,-24(fp)
   9bb60:	e0bff615 	stw	r2,-40(fp)
   9bb64:	e0bff617 	ldw	r2,-40(fp)
   9bb68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   9bb6c:	e0ffff17 	ldw	r3,-4(fp)
   9bb70:	00801044 	movi	r2,65
   9bb74:	18800005 	stb	r2,0(r3)
        return;
   9bb78:	00000a06 	br	9bba4 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   9bb7c:	e0bffb17 	ldw	r2,-20(fp)
   9bb80:	11001304 	addi	r4,r2,76
   9bb84:	e17ffe17 	ldw	r5,-8(fp)
   9bb88:	00941d00 	call	941d0 <OS_StrCopy>
   9bb8c:	e0bffa17 	ldw	r2,-24(fp)
   9bb90:	e0bff515 	stw	r2,-44(fp)
   9bb94:	e0bff517 	ldw	r2,-44(fp)
   9bb98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   9bb9c:	e0bfff17 	ldw	r2,-4(fp)
   9bba0:	10000005 	stb	zero,0(r2)
}
   9bba4:	e037883a 	mov	sp,fp
   9bba8:	dfc00117 	ldw	ra,4(sp)
   9bbac:	df000017 	ldw	fp,0(sp)
   9bbb0:	dec00204 	addi	sp,sp,8
   9bbb4:	f800283a 	ret

0009bbb8 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   9bbb8:	defff304 	addi	sp,sp,-52
   9bbbc:	dfc00c15 	stw	ra,48(sp)
   9bbc0:	df000b15 	stw	fp,44(sp)
   9bbc4:	df000b04 	addi	fp,sp,44
   9bbc8:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   9bbcc:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   9bbd0:	e0bffe03 	ldbu	r2,-8(fp)
   9bbd4:	10800530 	cmpltui	r2,r2,20
   9bbd8:	1000031e 	bne	r2,zero,9bbe8 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   9bbdc:	00800a84 	movi	r2,42
   9bbe0:	e0bfff15 	stw	r2,-4(fp)
   9bbe4:	00007406 	br	9bdb8 <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9bbe8:	0005303a 	rdctl	r2,status
   9bbec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9bbf0:	e0fffb17 	ldw	r3,-20(fp)
   9bbf4:	00bfff84 	movi	r2,-2
   9bbf8:	1884703a 	and	r2,r3,r2
   9bbfc:	1001703a 	wrctl	status,r2
  
  return context;
   9bc00:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   9bc04:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
   9bc08:	e0bffe03 	ldbu	r2,-8(fp)
   9bc0c:	00c00334 	movhi	r3,12
   9bc10:	18e2b904 	addi	r3,r3,-29980
   9bc14:	1085883a 	add	r2,r2,r2
   9bc18:	1085883a 	add	r2,r2,r2
   9bc1c:	10c5883a 	add	r2,r2,r3
   9bc20:	10800017 	ldw	r2,0(r2)
   9bc24:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   9bc28:	e0bffd17 	ldw	r2,-12(fp)
   9bc2c:	1004c03a 	cmpne	r2,r2,zero
   9bc30:	1000071e 	bne	r2,zero,9bc50 <OSTaskResume+0x98>
   9bc34:	e0bffc17 	ldw	r2,-16(fp)
   9bc38:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9bc3c:	e0bffa17 	ldw	r2,-24(fp)
   9bc40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   9bc44:	00801184 	movi	r2,70
   9bc48:	e0bfff15 	stw	r2,-4(fp)
   9bc4c:	00005a06 	br	9bdb8 <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   9bc50:	e0bffd17 	ldw	r2,-12(fp)
   9bc54:	10800058 	cmpnei	r2,r2,1
   9bc58:	1000071e 	bne	r2,zero,9bc78 <OSTaskResume+0xc0>
   9bc5c:	e0bffc17 	ldw	r2,-16(fp)
   9bc60:	e0bff915 	stw	r2,-28(fp)
   9bc64:	e0bff917 	ldw	r2,-28(fp)
   9bc68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   9bc6c:	008010c4 	movi	r2,67
   9bc70:	e0bfff15 	stw	r2,-4(fp)
   9bc74:	00005006 	br	9bdb8 <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   9bc78:	e0bffd17 	ldw	r2,-12(fp)
   9bc7c:	10800c03 	ldbu	r2,48(r2)
   9bc80:	10803fcc 	andi	r2,r2,255
   9bc84:	1080020c 	andi	r2,r2,8
   9bc88:	1005003a 	cmpeq	r2,r2,zero
   9bc8c:	1000441e 	bne	r2,zero,9bda0 <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   9bc90:	e0bffd17 	ldw	r2,-12(fp)
   9bc94:	10c00c03 	ldbu	r3,48(r2)
   9bc98:	00bffdc4 	movi	r2,-9
   9bc9c:	1884703a 	and	r2,r3,r2
   9bca0:	1007883a 	mov	r3,r2
   9bca4:	e0bffd17 	ldw	r2,-12(fp)
   9bca8:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   9bcac:	e0bffd17 	ldw	r2,-12(fp)
   9bcb0:	10800c03 	ldbu	r2,48(r2)
   9bcb4:	10803fcc 	andi	r2,r2,255
   9bcb8:	1004c03a 	cmpne	r2,r2,zero
   9bcbc:	1000321e 	bne	r2,zero,9bd88 <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
   9bcc0:	e0bffd17 	ldw	r2,-12(fp)
   9bcc4:	10800b8b 	ldhu	r2,46(r2)
   9bcc8:	10bfffcc 	andi	r2,r2,65535
   9bccc:	1004c03a 	cmpne	r2,r2,zero
   9bcd0:	1000281e 	bne	r2,zero,9bd74 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   9bcd4:	e0bffd17 	ldw	r2,-12(fp)
   9bcd8:	10c00d83 	ldbu	r3,54(r2)
   9bcdc:	008002b4 	movhi	r2,10
   9bce0:	108e5104 	addi	r2,r2,14660
   9bce4:	10800003 	ldbu	r2,0(r2)
   9bce8:	1884b03a 	or	r2,r3,r2
   9bcec:	1007883a 	mov	r3,r2
   9bcf0:	008002b4 	movhi	r2,10
   9bcf4:	108e5104 	addi	r2,r2,14660
   9bcf8:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   9bcfc:	e0bffd17 	ldw	r2,-12(fp)
   9bd00:	10800d03 	ldbu	r2,52(r2)
   9bd04:	11003fcc 	andi	r4,r2,255
   9bd08:	e0bffd17 	ldw	r2,-12(fp)
   9bd0c:	10800d03 	ldbu	r2,52(r2)
   9bd10:	10c03fcc 	andi	r3,r2,255
   9bd14:	008002b4 	movhi	r2,10
   9bd18:	108e5144 	addi	r2,r2,14661
   9bd1c:	10c5883a 	add	r2,r2,r3
   9bd20:	10c00003 	ldbu	r3,0(r2)
   9bd24:	e0bffd17 	ldw	r2,-12(fp)
   9bd28:	10800d43 	ldbu	r2,53(r2)
   9bd2c:	1884b03a 	or	r2,r3,r2
   9bd30:	1007883a 	mov	r3,r2
   9bd34:	008002b4 	movhi	r2,10
   9bd38:	108e5144 	addi	r2,r2,14661
   9bd3c:	1105883a 	add	r2,r2,r4
   9bd40:	10c00005 	stb	r3,0(r2)
   9bd44:	e0bffc17 	ldw	r2,-16(fp)
   9bd48:	e0bff815 	stw	r2,-32(fp)
   9bd4c:	e0bff817 	ldw	r2,-32(fp)
   9bd50:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   9bd54:	008002b4 	movhi	r2,10
   9bd58:	108e4544 	addi	r2,r2,14613
   9bd5c:	10800003 	ldbu	r2,0(r2)
   9bd60:	10803fcc 	andi	r2,r2,255
   9bd64:	10800058 	cmpnei	r2,r2,1
   9bd68:	10000b1e 	bne	r2,zero,9bd98 <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
   9bd6c:	009408c0 	call	9408c <OS_Sched>
   9bd70:	00000906 	br	9bd98 <OSTaskResume+0x1e0>
   9bd74:	e0bffc17 	ldw	r2,-16(fp)
   9bd78:	e0bff715 	stw	r2,-36(fp)
   9bd7c:	e0bff717 	ldw	r2,-36(fp)
   9bd80:	1001703a 	wrctl	status,r2
   9bd84:	00000406 	br	9bd98 <OSTaskResume+0x1e0>
   9bd88:	e0bffc17 	ldw	r2,-16(fp)
   9bd8c:	e0bff615 	stw	r2,-40(fp)
   9bd90:	e0bff617 	ldw	r2,-40(fp)
   9bd94:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   9bd98:	e03fff15 	stw	zero,-4(fp)
   9bd9c:	00000606 	br	9bdb8 <OSTaskResume+0x200>
   9bda0:	e0bffc17 	ldw	r2,-16(fp)
   9bda4:	e0bff515 	stw	r2,-44(fp)
   9bda8:	e0bff517 	ldw	r2,-44(fp)
   9bdac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   9bdb0:	00801104 	movi	r2,68
   9bdb4:	e0bfff15 	stw	r2,-4(fp)
   9bdb8:	e0bfff17 	ldw	r2,-4(fp)
}
   9bdbc:	e037883a 	mov	sp,fp
   9bdc0:	dfc00117 	ldw	ra,4(sp)
   9bdc4:	df000017 	ldw	fp,0(sp)
   9bdc8:	dec00204 	addi	sp,sp,8
   9bdcc:	f800283a 	ret

0009bdd0 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   9bdd0:	defff204 	addi	sp,sp,-56
   9bdd4:	df000d15 	stw	fp,52(sp)
   9bdd8:	df000d04 	addi	fp,sp,52
   9bddc:	e17ffe15 	stw	r5,-8(fp)
   9bde0:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   9bde4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   9bde8:	e0bffd03 	ldbu	r2,-12(fp)
   9bdec:	10800570 	cmpltui	r2,r2,21
   9bdf0:	1000061e 	bne	r2,zero,9be0c <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   9bdf4:	e0bffd03 	ldbu	r2,-12(fp)
   9bdf8:	10803fe0 	cmpeqi	r2,r2,255
   9bdfc:	1000031e 	bne	r2,zero,9be0c <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   9be00:	00800a84 	movi	r2,42
   9be04:	e0bfff15 	stw	r2,-4(fp)
   9be08:	00006b06 	br	9bfb8 <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   9be0c:	e0bffe17 	ldw	r2,-8(fp)
   9be10:	1004c03a 	cmpne	r2,r2,zero
   9be14:	1000031e 	bne	r2,zero,9be24 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
   9be18:	00800244 	movi	r2,9
   9be1c:	e0bfff15 	stw	r2,-4(fp)
   9be20:	00006506 	br	9bfb8 <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   9be24:	e0bffe17 	ldw	r2,-8(fp)
   9be28:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   9be2c:	e0bffe17 	ldw	r2,-8(fp)
   9be30:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9be34:	0005303a 	rdctl	r2,status
   9be38:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9be3c:	e0fff717 	ldw	r3,-36(fp)
   9be40:	00bfff84 	movi	r2,-2
   9be44:	1884703a 	and	r2,r3,r2
   9be48:	1001703a 	wrctl	status,r2
  
  return context;
   9be4c:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   9be50:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   9be54:	e0bffd03 	ldbu	r2,-12(fp)
   9be58:	10803fd8 	cmpnei	r2,r2,255
   9be5c:	1000051e 	bne	r2,zero,9be74 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
   9be60:	008002b4 	movhi	r2,10
   9be64:	108e5404 	addi	r2,r2,14672
   9be68:	10800017 	ldw	r2,0(r2)
   9be6c:	10800c83 	ldbu	r2,50(r2)
   9be70:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   9be74:	e0bffd03 	ldbu	r2,-12(fp)
   9be78:	00c00334 	movhi	r3,12
   9be7c:	18e2b904 	addi	r3,r3,-29980
   9be80:	1085883a 	add	r2,r2,r2
   9be84:	1085883a 	add	r2,r2,r2
   9be88:	10c5883a 	add	r2,r2,r3
   9be8c:	10800017 	ldw	r2,0(r2)
   9be90:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   9be94:	e0bffc17 	ldw	r2,-16(fp)
   9be98:	1004c03a 	cmpne	r2,r2,zero
   9be9c:	1000071e 	bne	r2,zero,9bebc <OSTaskStkChk+0xec>
   9bea0:	e0bff817 	ldw	r2,-32(fp)
   9bea4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9bea8:	e0bff617 	ldw	r2,-40(fp)
   9beac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   9beb0:	008010c4 	movi	r2,67
   9beb4:	e0bfff15 	stw	r2,-4(fp)
   9beb8:	00003f06 	br	9bfb8 <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   9bebc:	e0bffc17 	ldw	r2,-16(fp)
   9bec0:	10800058 	cmpnei	r2,r2,1
   9bec4:	1000071e 	bne	r2,zero,9bee4 <OSTaskStkChk+0x114>
   9bec8:	e0bff817 	ldw	r2,-32(fp)
   9becc:	e0bff515 	stw	r2,-44(fp)
   9bed0:	e0bff517 	ldw	r2,-44(fp)
   9bed4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   9bed8:	008010c4 	movi	r2,67
   9bedc:	e0bfff15 	stw	r2,-4(fp)
   9bee0:	00003506 	br	9bfb8 <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   9bee4:	e0bffc17 	ldw	r2,-16(fp)
   9bee8:	1080040b 	ldhu	r2,16(r2)
   9beec:	10bfffcc 	andi	r2,r2,65535
   9bef0:	1080004c 	andi	r2,r2,1
   9bef4:	1004c03a 	cmpne	r2,r2,zero
   9bef8:	1000071e 	bne	r2,zero,9bf18 <OSTaskStkChk+0x148>
   9befc:	e0bff817 	ldw	r2,-32(fp)
   9bf00:	e0bff415 	stw	r2,-48(fp)
   9bf04:	e0bff417 	ldw	r2,-48(fp)
   9bf08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   9bf0c:	00801144 	movi	r2,69
   9bf10:	e0bfff15 	stw	r2,-4(fp)
   9bf14:	00002806 	br	9bfb8 <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
   9bf18:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
   9bf1c:	e0bffc17 	ldw	r2,-16(fp)
   9bf20:	10800317 	ldw	r2,12(r2)
   9bf24:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
   9bf28:	e0bffc17 	ldw	r2,-16(fp)
   9bf2c:	10800217 	ldw	r2,8(r2)
   9bf30:	e0bffb15 	stw	r2,-20(fp)
   9bf34:	e0bff817 	ldw	r2,-32(fp)
   9bf38:	e0bff315 	stw	r2,-52(fp)
   9bf3c:	e0bff317 	ldw	r2,-52(fp)
   9bf40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   9bf44:	00000306 	br	9bf54 <OSTaskStkChk+0x184>
        nfree++;
   9bf48:	e0bffa17 	ldw	r2,-24(fp)
   9bf4c:	10800044 	addi	r2,r2,1
   9bf50:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   9bf54:	e0bffb17 	ldw	r2,-20(fp)
   9bf58:	10800017 	ldw	r2,0(r2)
   9bf5c:	1005003a 	cmpeq	r2,r2,zero
   9bf60:	1007883a 	mov	r3,r2
   9bf64:	e0bffb17 	ldw	r2,-20(fp)
   9bf68:	10800104 	addi	r2,r2,4
   9bf6c:	e0bffb15 	stw	r2,-20(fp)
   9bf70:	18803fcc 	andi	r2,r3,255
   9bf74:	1004c03a 	cmpne	r2,r2,zero
   9bf78:	103ff31e 	bne	r2,zero,9bf48 <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   9bf7c:	e0bffa17 	ldw	r2,-24(fp)
   9bf80:	1085883a 	add	r2,r2,r2
   9bf84:	1085883a 	add	r2,r2,r2
   9bf88:	1007883a 	mov	r3,r2
   9bf8c:	e0bffe17 	ldw	r2,-8(fp)
   9bf90:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   9bf94:	e0fff917 	ldw	r3,-28(fp)
   9bf98:	e0bffa17 	ldw	r2,-24(fp)
   9bf9c:	1885c83a 	sub	r2,r3,r2
   9bfa0:	1085883a 	add	r2,r2,r2
   9bfa4:	1085883a 	add	r2,r2,r2
   9bfa8:	1007883a 	mov	r3,r2
   9bfac:	e0bffe17 	ldw	r2,-8(fp)
   9bfb0:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   9bfb4:	e03fff15 	stw	zero,-4(fp)
   9bfb8:	e0bfff17 	ldw	r2,-4(fp)
}
   9bfbc:	e037883a 	mov	sp,fp
   9bfc0:	df000017 	ldw	fp,0(sp)
   9bfc4:	dec00104 	addi	sp,sp,4
   9bfc8:	f800283a 	ret

0009bfcc <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   9bfcc:	defff404 	addi	sp,sp,-48
   9bfd0:	dfc00b15 	stw	ra,44(sp)
   9bfd4:	df000a15 	stw	fp,40(sp)
   9bfd8:	df000a04 	addi	fp,sp,40
   9bfdc:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   9bfe0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   9bfe4:	e0bffe03 	ldbu	r2,-8(fp)
   9bfe8:	10800518 	cmpnei	r2,r2,20
   9bfec:	1000031e 	bne	r2,zero,9bffc <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   9bff0:	008011c4 	movi	r2,71
   9bff4:	e0bfff15 	stw	r2,-4(fp)
   9bff8:	00007906 	br	9c1e0 <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   9bffc:	e0bffe03 	ldbu	r2,-8(fp)
   9c000:	10800530 	cmpltui	r2,r2,20
   9c004:	1000061e 	bne	r2,zero,9c020 <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
   9c008:	e0bffe03 	ldbu	r2,-8(fp)
   9c00c:	10803fe0 	cmpeqi	r2,r2,255
   9c010:	1000031e 	bne	r2,zero,9c020 <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
   9c014:	00800a84 	movi	r2,42
   9c018:	e0bfff15 	stw	r2,-4(fp)
   9c01c:	00007006 	br	9c1e0 <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9c020:	0005303a 	rdctl	r2,status
   9c024:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9c028:	e0fff917 	ldw	r3,-28(fp)
   9c02c:	00bfff84 	movi	r2,-2
   9c030:	1884703a 	and	r2,r3,r2
   9c034:	1001703a 	wrctl	status,r2
  
  return context;
   9c038:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   9c03c:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   9c040:	e0bffe03 	ldbu	r2,-8(fp)
   9c044:	10803fd8 	cmpnei	r2,r2,255
   9c048:	1000081e 	bne	r2,zero,9c06c <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
   9c04c:	008002b4 	movhi	r2,10
   9c050:	108e5404 	addi	r2,r2,14672
   9c054:	10800017 	ldw	r2,0(r2)
   9c058:	10800c83 	ldbu	r2,50(r2)
   9c05c:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
   9c060:	00800044 	movi	r2,1
   9c064:	e0bffd05 	stb	r2,-12(fp)
   9c068:	00000b06 	br	9c098 <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   9c06c:	008002b4 	movhi	r2,10
   9c070:	108e5404 	addi	r2,r2,14672
   9c074:	10800017 	ldw	r2,0(r2)
   9c078:	10800c83 	ldbu	r2,50(r2)
   9c07c:	10c03fcc 	andi	r3,r2,255
   9c080:	e0bffe03 	ldbu	r2,-8(fp)
   9c084:	1880031e 	bne	r3,r2,9c094 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
   9c088:	00800044 	movi	r2,1
   9c08c:	e0bffd05 	stb	r2,-12(fp)
   9c090:	00000106 	br	9c098 <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   9c094:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   9c098:	e0bffe03 	ldbu	r2,-8(fp)
   9c09c:	00c00334 	movhi	r3,12
   9c0a0:	18e2b904 	addi	r3,r3,-29980
   9c0a4:	1085883a 	add	r2,r2,r2
   9c0a8:	1085883a 	add	r2,r2,r2
   9c0ac:	10c5883a 	add	r2,r2,r3
   9c0b0:	10800017 	ldw	r2,0(r2)
   9c0b4:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   9c0b8:	e0bffc17 	ldw	r2,-16(fp)
   9c0bc:	1004c03a 	cmpne	r2,r2,zero
   9c0c0:	1000071e 	bne	r2,zero,9c0e0 <OSTaskSuspend+0x114>
   9c0c4:	e0bffa17 	ldw	r2,-24(fp)
   9c0c8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9c0cc:	e0bff817 	ldw	r2,-32(fp)
   9c0d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   9c0d4:	00801204 	movi	r2,72
   9c0d8:	e0bfff15 	stw	r2,-4(fp)
   9c0dc:	00004006 	br	9c1e0 <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   9c0e0:	e0bffc17 	ldw	r2,-16(fp)
   9c0e4:	10800058 	cmpnei	r2,r2,1
   9c0e8:	1000071e 	bne	r2,zero,9c108 <OSTaskSuspend+0x13c>
   9c0ec:	e0bffa17 	ldw	r2,-24(fp)
   9c0f0:	e0bff715 	stw	r2,-36(fp)
   9c0f4:	e0bff717 	ldw	r2,-36(fp)
   9c0f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   9c0fc:	008010c4 	movi	r2,67
   9c100:	e0bfff15 	stw	r2,-4(fp)
   9c104:	00003606 	br	9c1e0 <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
   9c108:	e0bffc17 	ldw	r2,-16(fp)
   9c10c:	10800d03 	ldbu	r2,52(r2)
   9c110:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   9c114:	e13ffb03 	ldbu	r4,-20(fp)
   9c118:	e0fffb03 	ldbu	r3,-20(fp)
   9c11c:	008002b4 	movhi	r2,10
   9c120:	108e5144 	addi	r2,r2,14661
   9c124:	10c5883a 	add	r2,r2,r3
   9c128:	10800003 	ldbu	r2,0(r2)
   9c12c:	1007883a 	mov	r3,r2
   9c130:	e0bffc17 	ldw	r2,-16(fp)
   9c134:	10800d43 	ldbu	r2,53(r2)
   9c138:	0084303a 	nor	r2,zero,r2
   9c13c:	1884703a 	and	r2,r3,r2
   9c140:	1007883a 	mov	r3,r2
   9c144:	008002b4 	movhi	r2,10
   9c148:	108e5144 	addi	r2,r2,14661
   9c14c:	1105883a 	add	r2,r2,r4
   9c150:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
   9c154:	e0fffb03 	ldbu	r3,-20(fp)
   9c158:	008002b4 	movhi	r2,10
   9c15c:	108e5144 	addi	r2,r2,14661
   9c160:	10c5883a 	add	r2,r2,r3
   9c164:	10800003 	ldbu	r2,0(r2)
   9c168:	10803fcc 	andi	r2,r2,255
   9c16c:	1004c03a 	cmpne	r2,r2,zero
   9c170:	10000c1e 	bne	r2,zero,9c1a4 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   9c174:	e0bffc17 	ldw	r2,-16(fp)
   9c178:	10800d83 	ldbu	r2,54(r2)
   9c17c:	0084303a 	nor	r2,zero,r2
   9c180:	1007883a 	mov	r3,r2
   9c184:	008002b4 	movhi	r2,10
   9c188:	108e5104 	addi	r2,r2,14660
   9c18c:	10800003 	ldbu	r2,0(r2)
   9c190:	1884703a 	and	r2,r3,r2
   9c194:	1007883a 	mov	r3,r2
   9c198:	008002b4 	movhi	r2,10
   9c19c:	108e5104 	addi	r2,r2,14660
   9c1a0:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   9c1a4:	e0bffc17 	ldw	r2,-16(fp)
   9c1a8:	10800c03 	ldbu	r2,48(r2)
   9c1ac:	10800214 	ori	r2,r2,8
   9c1b0:	1007883a 	mov	r3,r2
   9c1b4:	e0bffc17 	ldw	r2,-16(fp)
   9c1b8:	10c00c05 	stb	r3,48(r2)
   9c1bc:	e0bffa17 	ldw	r2,-24(fp)
   9c1c0:	e0bff615 	stw	r2,-40(fp)
   9c1c4:	e0bff617 	ldw	r2,-40(fp)
   9c1c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   9c1cc:	e0bffd03 	ldbu	r2,-12(fp)
   9c1d0:	10800058 	cmpnei	r2,r2,1
   9c1d4:	1000011e 	bne	r2,zero,9c1dc <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
   9c1d8:	009408c0 	call	9408c <OS_Sched>
    }
    return (OS_ERR_NONE);
   9c1dc:	e03fff15 	stw	zero,-4(fp)
   9c1e0:	e0bfff17 	ldw	r2,-4(fp)
}
   9c1e4:	e037883a 	mov	sp,fp
   9c1e8:	dfc00117 	ldw	ra,4(sp)
   9c1ec:	df000017 	ldw	fp,0(sp)
   9c1f0:	dec00204 	addi	sp,sp,8
   9c1f4:	f800283a 	ret

0009c1f8 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   9c1f8:	defff504 	addi	sp,sp,-44
   9c1fc:	dfc00a15 	stw	ra,40(sp)
   9c200:	df000915 	stw	fp,36(sp)
   9c204:	df000904 	addi	fp,sp,36
   9c208:	e17ffe15 	stw	r5,-8(fp)
   9c20c:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   9c210:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   9c214:	e0bffd03 	ldbu	r2,-12(fp)
   9c218:	10800570 	cmpltui	r2,r2,21
   9c21c:	1000061e 	bne	r2,zero,9c238 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   9c220:	e0bffd03 	ldbu	r2,-12(fp)
   9c224:	10803fe0 	cmpeqi	r2,r2,255
   9c228:	1000031e 	bne	r2,zero,9c238 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   9c22c:	00800a84 	movi	r2,42
   9c230:	e0bfff15 	stw	r2,-4(fp)
   9c234:	00003b06 	br	9c324 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   9c238:	e0bffe17 	ldw	r2,-8(fp)
   9c23c:	1004c03a 	cmpne	r2,r2,zero
   9c240:	1000031e 	bne	r2,zero,9c250 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
   9c244:	00800244 	movi	r2,9
   9c248:	e0bfff15 	stw	r2,-4(fp)
   9c24c:	00003506 	br	9c324 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9c250:	0005303a 	rdctl	r2,status
   9c254:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9c258:	e0fffa17 	ldw	r3,-24(fp)
   9c25c:	00bfff84 	movi	r2,-2
   9c260:	1884703a 	and	r2,r3,r2
   9c264:	1001703a 	wrctl	status,r2
  
  return context;
   9c268:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   9c26c:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   9c270:	e0bffd03 	ldbu	r2,-12(fp)
   9c274:	10803fd8 	cmpnei	r2,r2,255
   9c278:	1000051e 	bne	r2,zero,9c290 <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
   9c27c:	008002b4 	movhi	r2,10
   9c280:	108e5404 	addi	r2,r2,14672
   9c284:	10800017 	ldw	r2,0(r2)
   9c288:	10800c83 	ldbu	r2,50(r2)
   9c28c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   9c290:	e0bffd03 	ldbu	r2,-12(fp)
   9c294:	00c00334 	movhi	r3,12
   9c298:	18e2b904 	addi	r3,r3,-29980
   9c29c:	1085883a 	add	r2,r2,r2
   9c2a0:	1085883a 	add	r2,r2,r2
   9c2a4:	10c5883a 	add	r2,r2,r3
   9c2a8:	10800017 	ldw	r2,0(r2)
   9c2ac:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   9c2b0:	e0bffc17 	ldw	r2,-16(fp)
   9c2b4:	1004c03a 	cmpne	r2,r2,zero
   9c2b8:	1000071e 	bne	r2,zero,9c2d8 <OSTaskQuery+0xe0>
   9c2bc:	e0bffb17 	ldw	r2,-20(fp)
   9c2c0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9c2c4:	e0bff917 	ldw	r2,-28(fp)
   9c2c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   9c2cc:	00800a44 	movi	r2,41
   9c2d0:	e0bfff15 	stw	r2,-4(fp)
   9c2d4:	00001306 	br	9c324 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   9c2d8:	e0bffc17 	ldw	r2,-16(fp)
   9c2dc:	10800058 	cmpnei	r2,r2,1
   9c2e0:	1000071e 	bne	r2,zero,9c300 <OSTaskQuery+0x108>
   9c2e4:	e0bffb17 	ldw	r2,-20(fp)
   9c2e8:	e0bff815 	stw	r2,-32(fp)
   9c2ec:	e0bff817 	ldw	r2,-32(fp)
   9c2f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   9c2f4:	008010c4 	movi	r2,67
   9c2f8:	e0bfff15 	stw	r2,-4(fp)
   9c2fc:	00000906 	br	9c324 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   9c300:	e13ffe17 	ldw	r4,-8(fp)
   9c304:	e17ffc17 	ldw	r5,-16(fp)
   9c308:	01801b04 	movi	r6,108
   9c30c:	00940200 	call	94020 <OS_MemCopy>
   9c310:	e0bffb17 	ldw	r2,-20(fp)
   9c314:	e0bff715 	stw	r2,-36(fp)
   9c318:	e0bff717 	ldw	r2,-36(fp)
   9c31c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   9c320:	e03fff15 	stw	zero,-4(fp)
   9c324:	e0bfff17 	ldw	r2,-4(fp)
}
   9c328:	e037883a 	mov	sp,fp
   9c32c:	dfc00117 	ldw	ra,4(sp)
   9c330:	df000017 	ldw	fp,0(sp)
   9c334:	dec00204 	addi	sp,sp,8
   9c338:	f800283a 	ret

0009c33c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   9c33c:	defffc04 	addi	sp,sp,-16
   9c340:	df000315 	stw	fp,12(sp)
   9c344:	df000304 	addi	fp,sp,12
   9c348:	e13ffd15 	stw	r4,-12(fp)
   9c34c:	e17ffe15 	stw	r5,-8(fp)
   9c350:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   9c354:	e0bfff0b 	ldhu	r2,-4(fp)
   9c358:	1080004c 	andi	r2,r2,1
   9c35c:	10803fcc 	andi	r2,r2,255
   9c360:	1005003a 	cmpeq	r2,r2,zero
   9c364:	1000101e 	bne	r2,zero,9c3a8 <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   9c368:	e0bfff0b 	ldhu	r2,-4(fp)
   9c36c:	1080008c 	andi	r2,r2,2
   9c370:	1005003a 	cmpeq	r2,r2,zero
   9c374:	10000c1e 	bne	r2,zero,9c3a8 <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   9c378:	00000806 	br	9c39c <OS_TaskStkClr+0x60>
                size--;
   9c37c:	e0bffe17 	ldw	r2,-8(fp)
   9c380:	10bfffc4 	addi	r2,r2,-1
   9c384:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   9c388:	e0bffd17 	ldw	r2,-12(fp)
   9c38c:	10000015 	stw	zero,0(r2)
   9c390:	e0bffd17 	ldw	r2,-12(fp)
   9c394:	10800104 	addi	r2,r2,4
   9c398:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   9c39c:	e0bffe17 	ldw	r2,-8(fp)
   9c3a0:	1004c03a 	cmpne	r2,r2,zero
   9c3a4:	103ff51e 	bne	r2,zero,9c37c <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   9c3a8:	e037883a 	mov	sp,fp
   9c3ac:	df000017 	ldw	fp,0(sp)
   9c3b0:	dec00104 	addi	sp,sp,4
   9c3b4:	f800283a 	ret

0009c3b8 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   9c3b8:	defff904 	addi	sp,sp,-28
   9c3bc:	dfc00615 	stw	ra,24(sp)
   9c3c0:	df000515 	stw	fp,20(sp)
   9c3c4:	df000504 	addi	fp,sp,20
   9c3c8:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   9c3cc:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   9c3d0:	008002b4 	movhi	r2,10
   9c3d4:	108e5304 	addi	r2,r2,14668
   9c3d8:	10800003 	ldbu	r2,0(r2)
   9c3dc:	10803fcc 	andi	r2,r2,255
   9c3e0:	1004c03a 	cmpne	r2,r2,zero
   9c3e4:	1000421e 	bne	r2,zero,9c4f0 <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   9c3e8:	e0bfff0b 	ldhu	r2,-4(fp)
   9c3ec:	1005003a 	cmpeq	r2,r2,zero
   9c3f0:	10003f1e 	bne	r2,zero,9c4f0 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9c3f4:	0005303a 	rdctl	r2,status
   9c3f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9c3fc:	e0fffc17 	ldw	r3,-16(fp)
   9c400:	00bfff84 	movi	r2,-2
   9c404:	1884703a 	and	r2,r3,r2
   9c408:	1001703a 	wrctl	status,r2
  
  return context;
   9c40c:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
   9c410:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   9c414:	008002b4 	movhi	r2,10
   9c418:	108e5404 	addi	r2,r2,14672
   9c41c:	10800017 	ldw	r2,0(r2)
   9c420:	10800d03 	ldbu	r2,52(r2)
   9c424:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   9c428:	e13ffe03 	ldbu	r4,-8(fp)
   9c42c:	e0fffe03 	ldbu	r3,-8(fp)
   9c430:	008002b4 	movhi	r2,10
   9c434:	108e5144 	addi	r2,r2,14661
   9c438:	10c5883a 	add	r2,r2,r3
   9c43c:	10800003 	ldbu	r2,0(r2)
   9c440:	1007883a 	mov	r3,r2
   9c444:	008002b4 	movhi	r2,10
   9c448:	108e5404 	addi	r2,r2,14672
   9c44c:	10800017 	ldw	r2,0(r2)
   9c450:	10800d43 	ldbu	r2,53(r2)
   9c454:	0084303a 	nor	r2,zero,r2
   9c458:	1884703a 	and	r2,r3,r2
   9c45c:	1007883a 	mov	r3,r2
   9c460:	008002b4 	movhi	r2,10
   9c464:	108e5144 	addi	r2,r2,14661
   9c468:	1105883a 	add	r2,r2,r4
   9c46c:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
   9c470:	e0fffe03 	ldbu	r3,-8(fp)
   9c474:	008002b4 	movhi	r2,10
   9c478:	108e5144 	addi	r2,r2,14661
   9c47c:	10c5883a 	add	r2,r2,r3
   9c480:	10800003 	ldbu	r2,0(r2)
   9c484:	10803fcc 	andi	r2,r2,255
   9c488:	1004c03a 	cmpne	r2,r2,zero
   9c48c:	10000e1e 	bne	r2,zero,9c4c8 <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   9c490:	008002b4 	movhi	r2,10
   9c494:	108e5404 	addi	r2,r2,14672
   9c498:	10800017 	ldw	r2,0(r2)
   9c49c:	10800d83 	ldbu	r2,54(r2)
   9c4a0:	0084303a 	nor	r2,zero,r2
   9c4a4:	1007883a 	mov	r3,r2
   9c4a8:	008002b4 	movhi	r2,10
   9c4ac:	108e5104 	addi	r2,r2,14660
   9c4b0:	10800003 	ldbu	r2,0(r2)
   9c4b4:	1884703a 	and	r2,r3,r2
   9c4b8:	1007883a 	mov	r3,r2
   9c4bc:	008002b4 	movhi	r2,10
   9c4c0:	108e5104 	addi	r2,r2,14660
   9c4c4:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   9c4c8:	008002b4 	movhi	r2,10
   9c4cc:	108e5404 	addi	r2,r2,14672
   9c4d0:	10c00017 	ldw	r3,0(r2)
   9c4d4:	e0bfff0b 	ldhu	r2,-4(fp)
   9c4d8:	18800b8d 	sth	r2,46(r3)
   9c4dc:	e0bffd17 	ldw	r2,-12(fp)
   9c4e0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9c4e4:	e0bffb17 	ldw	r2,-20(fp)
   9c4e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   9c4ec:	009408c0 	call	9408c <OS_Sched>
    }
}
   9c4f0:	e037883a 	mov	sp,fp
   9c4f4:	dfc00117 	ldw	ra,4(sp)
   9c4f8:	df000017 	ldw	fp,0(sp)
   9c4fc:	dec00204 	addi	sp,sp,8
   9c500:	f800283a 	ret

0009c504 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   9c504:	defff604 	addi	sp,sp,-40
   9c508:	dfc00915 	stw	ra,36(sp)
   9c50c:	df000815 	stw	fp,32(sp)
   9c510:	dc000715 	stw	r16,28(sp)
   9c514:	df000704 	addi	fp,sp,28
   9c518:	e13ffb05 	stb	r4,-20(fp)
   9c51c:	e17ffc05 	stb	r5,-16(fp)
   9c520:	e1bffd05 	stb	r6,-12(fp)
   9c524:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   9c528:	008002b4 	movhi	r2,10
   9c52c:	108e5304 	addi	r2,r2,14668
   9c530:	10800003 	ldbu	r2,0(r2)
   9c534:	10803fcc 	andi	r2,r2,255
   9c538:	1005003a 	cmpeq	r2,r2,zero
   9c53c:	1000031e 	bne	r2,zero,9c54c <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
   9c540:	00801544 	movi	r2,85
   9c544:	e0bfff15 	stw	r2,-4(fp)
   9c548:	00004b06 	br	9c678 <OSTimeDlyHMSM+0x174>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   9c54c:	e0bffb03 	ldbu	r2,-20(fp)
   9c550:	1004c03a 	cmpne	r2,r2,zero
   9c554:	10000c1e 	bne	r2,zero,9c588 <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
   9c558:	e0bffc03 	ldbu	r2,-16(fp)
   9c55c:	1004c03a 	cmpne	r2,r2,zero
   9c560:	1000091e 	bne	r2,zero,9c588 <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
   9c564:	e0bffd03 	ldbu	r2,-12(fp)
   9c568:	1004c03a 	cmpne	r2,r2,zero
   9c56c:	1000061e 	bne	r2,zero,9c588 <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
   9c570:	e0bffe0b 	ldhu	r2,-8(fp)
   9c574:	1004c03a 	cmpne	r2,r2,zero
   9c578:	1000031e 	bne	r2,zero,9c588 <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
   9c57c:	00801504 	movi	r2,84
   9c580:	e0bfff15 	stw	r2,-4(fp)
   9c584:	00003c06 	br	9c678 <OSTimeDlyHMSM+0x174>
                }
            }
        }
    }
    if (minutes > 59) {
   9c588:	e0bffc03 	ldbu	r2,-16(fp)
   9c58c:	10800f30 	cmpltui	r2,r2,60
   9c590:	1000031e 	bne	r2,zero,9c5a0 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   9c594:	00801444 	movi	r2,81
   9c598:	e0bfff15 	stw	r2,-4(fp)
   9c59c:	00003606 	br	9c678 <OSTimeDlyHMSM+0x174>
    }
    if (seconds > 59) {
   9c5a0:	e0bffd03 	ldbu	r2,-12(fp)
   9c5a4:	10800f30 	cmpltui	r2,r2,60
   9c5a8:	1000031e 	bne	r2,zero,9c5b8 <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
   9c5ac:	00801484 	movi	r2,82
   9c5b0:	e0bfff15 	stw	r2,-4(fp)
   9c5b4:	00003006 	br	9c678 <OSTimeDlyHMSM+0x174>
    }
    if (ms > 999) {
   9c5b8:	e0bffe0b 	ldhu	r2,-8(fp)
   9c5bc:	1080fa30 	cmpltui	r2,r2,1000
   9c5c0:	1000031e 	bne	r2,zero,9c5d0 <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
   9c5c4:	008014c4 	movi	r2,83
   9c5c8:	e0bfff15 	stw	r2,-4(fp)
   9c5cc:	00002a06 	br	9c678 <OSTimeDlyHMSM+0x174>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   9c5d0:	e13ffb03 	ldbu	r4,-20(fp)
   9c5d4:	01438404 	movi	r5,3600
   9c5d8:	00877e40 	call	877e4 <__mulsi3>
   9c5dc:	1021883a 	mov	r16,r2
   9c5e0:	e13ffc03 	ldbu	r4,-16(fp)
   9c5e4:	01400f04 	movi	r5,60
   9c5e8:	00877e40 	call	877e4 <__mulsi3>
   9c5ec:	8087883a 	add	r3,r16,r2
   9c5f0:	e0bffd03 	ldbu	r2,-12(fp)
   9c5f4:	1889883a 	add	r4,r3,r2
   9c5f8:	0140fa04 	movi	r5,1000
   9c5fc:	00877e40 	call	877e4 <__mulsi3>
   9c600:	1021883a 	mov	r16,r2
   9c604:	e13ffe0b 	ldhu	r4,-8(fp)
   9c608:	0140fa04 	movi	r5,1000
   9c60c:	00877e40 	call	877e4 <__mulsi3>
   9c610:	1009883a 	mov	r4,r2
   9c614:	0140fa04 	movi	r5,1000
   9c618:	00877d40 	call	877d4 <__udivsi3>
   9c61c:	8085883a 	add	r2,r16,r2
   9c620:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   9c624:	e0bffa17 	ldw	r2,-24(fp)
   9c628:	1004d43a 	srli	r2,r2,16
   9c62c:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   9c630:	e0bffa17 	ldw	r2,-24(fp)
   9c634:	10bfffcc 	andi	r2,r2,65535
   9c638:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
   9c63c:	e0bffa17 	ldw	r2,-24(fp)
   9c640:	113fffcc 	andi	r4,r2,65535
   9c644:	009c3b80 	call	9c3b8 <OSTimeDly>
    while (loops > 0) {
   9c648:	00000706 	br	9c668 <OSTimeDlyHMSM+0x164>
        OSTimeDly((INT16U)32768u);
   9c64c:	01200014 	movui	r4,32768
   9c650:	009c3b80 	call	9c3b8 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   9c654:	01200014 	movui	r4,32768
   9c658:	009c3b80 	call	9c3b8 <OSTimeDly>
        loops--;
   9c65c:	e0bff90b 	ldhu	r2,-28(fp)
   9c660:	10bfffc4 	addi	r2,r2,-1
   9c664:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   9c668:	e0bff90b 	ldhu	r2,-28(fp)
   9c66c:	1004c03a 	cmpne	r2,r2,zero
   9c670:	103ff61e 	bne	r2,zero,9c64c <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   9c674:	e03fff15 	stw	zero,-4(fp)
   9c678:	e0bfff17 	ldw	r2,-4(fp)
}
   9c67c:	e037883a 	mov	sp,fp
   9c680:	dfc00217 	ldw	ra,8(sp)
   9c684:	df000117 	ldw	fp,4(sp)
   9c688:	dc000017 	ldw	r16,0(sp)
   9c68c:	dec00304 	addi	sp,sp,12
   9c690:	f800283a 	ret

0009c694 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   9c694:	defff404 	addi	sp,sp,-48
   9c698:	dfc00b15 	stw	ra,44(sp)
   9c69c:	df000a15 	stw	fp,40(sp)
   9c6a0:	df000a04 	addi	fp,sp,40
   9c6a4:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   9c6a8:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   9c6ac:	e0bffe03 	ldbu	r2,-8(fp)
   9c6b0:	10800530 	cmpltui	r2,r2,20
   9c6b4:	1000031e 	bne	r2,zero,9c6c4 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   9c6b8:	00800a84 	movi	r2,42
   9c6bc:	e0bfff15 	stw	r2,-4(fp)
   9c6c0:	00007206 	br	9c88c <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9c6c4:	0005303a 	rdctl	r2,status
   9c6c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9c6cc:	e0fffb17 	ldw	r3,-20(fp)
   9c6d0:	00bfff84 	movi	r2,-2
   9c6d4:	1884703a 	and	r2,r3,r2
   9c6d8:	1001703a 	wrctl	status,r2
  
  return context;
   9c6dc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   9c6e0:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   9c6e4:	e0bffe03 	ldbu	r2,-8(fp)
   9c6e8:	00c00334 	movhi	r3,12
   9c6ec:	18e2b904 	addi	r3,r3,-29980
   9c6f0:	1085883a 	add	r2,r2,r2
   9c6f4:	1085883a 	add	r2,r2,r2
   9c6f8:	10c5883a 	add	r2,r2,r3
   9c6fc:	10800017 	ldw	r2,0(r2)
   9c700:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
   9c704:	e0bffd17 	ldw	r2,-12(fp)
   9c708:	1004c03a 	cmpne	r2,r2,zero
   9c70c:	1000071e 	bne	r2,zero,9c72c <OSTimeDlyResume+0x98>
   9c710:	e0bffc17 	ldw	r2,-16(fp)
   9c714:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9c718:	e0bffa17 	ldw	r2,-24(fp)
   9c71c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   9c720:	008010c4 	movi	r2,67
   9c724:	e0bfff15 	stw	r2,-4(fp)
   9c728:	00005806 	br	9c88c <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
   9c72c:	e0bffd17 	ldw	r2,-12(fp)
   9c730:	10800058 	cmpnei	r2,r2,1
   9c734:	1000071e 	bne	r2,zero,9c754 <OSTimeDlyResume+0xc0>
   9c738:	e0bffc17 	ldw	r2,-16(fp)
   9c73c:	e0bff915 	stw	r2,-28(fp)
   9c740:	e0bff917 	ldw	r2,-28(fp)
   9c744:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   9c748:	008010c4 	movi	r2,67
   9c74c:	e0bfff15 	stw	r2,-4(fp)
   9c750:	00004e06 	br	9c88c <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   9c754:	e0bffd17 	ldw	r2,-12(fp)
   9c758:	10800b8b 	ldhu	r2,46(r2)
   9c75c:	10bfffcc 	andi	r2,r2,65535
   9c760:	1004c03a 	cmpne	r2,r2,zero
   9c764:	1000071e 	bne	r2,zero,9c784 <OSTimeDlyResume+0xf0>
   9c768:	e0bffc17 	ldw	r2,-16(fp)
   9c76c:	e0bff815 	stw	r2,-32(fp)
   9c770:	e0bff817 	ldw	r2,-32(fp)
   9c774:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   9c778:	00801404 	movi	r2,80
   9c77c:	e0bfff15 	stw	r2,-4(fp)
   9c780:	00004206 	br	9c88c <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   9c784:	e0bffd17 	ldw	r2,-12(fp)
   9c788:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   9c78c:	e0bffd17 	ldw	r2,-12(fp)
   9c790:	10800c03 	ldbu	r2,48(r2)
   9c794:	10803fcc 	andi	r2,r2,255
   9c798:	10800dcc 	andi	r2,r2,55
   9c79c:	1005003a 	cmpeq	r2,r2,zero
   9c7a0:	10000b1e 	bne	r2,zero,9c7d0 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   9c7a4:	e0bffd17 	ldw	r2,-12(fp)
   9c7a8:	10c00c03 	ldbu	r3,48(r2)
   9c7ac:	00bff204 	movi	r2,-56
   9c7b0:	1884703a 	and	r2,r3,r2
   9c7b4:	1007883a 	mov	r3,r2
   9c7b8:	e0bffd17 	ldw	r2,-12(fp)
   9c7bc:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   9c7c0:	e0fffd17 	ldw	r3,-12(fp)
   9c7c4:	00800044 	movi	r2,1
   9c7c8:	18800c45 	stb	r2,49(r3)
   9c7cc:	00000206 	br	9c7d8 <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   9c7d0:	e0bffd17 	ldw	r2,-12(fp)
   9c7d4:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   9c7d8:	e0bffd17 	ldw	r2,-12(fp)
   9c7dc:	10800c03 	ldbu	r2,48(r2)
   9c7e0:	10803fcc 	andi	r2,r2,255
   9c7e4:	1080020c 	andi	r2,r2,8
   9c7e8:	1004c03a 	cmpne	r2,r2,zero
   9c7ec:	1000221e 	bne	r2,zero,9c878 <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   9c7f0:	e0bffd17 	ldw	r2,-12(fp)
   9c7f4:	10c00d83 	ldbu	r3,54(r2)
   9c7f8:	008002b4 	movhi	r2,10
   9c7fc:	108e5104 	addi	r2,r2,14660
   9c800:	10800003 	ldbu	r2,0(r2)
   9c804:	1884b03a 	or	r2,r3,r2
   9c808:	1007883a 	mov	r3,r2
   9c80c:	008002b4 	movhi	r2,10
   9c810:	108e5104 	addi	r2,r2,14660
   9c814:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   9c818:	e0bffd17 	ldw	r2,-12(fp)
   9c81c:	10800d03 	ldbu	r2,52(r2)
   9c820:	11003fcc 	andi	r4,r2,255
   9c824:	e0bffd17 	ldw	r2,-12(fp)
   9c828:	10800d03 	ldbu	r2,52(r2)
   9c82c:	10c03fcc 	andi	r3,r2,255
   9c830:	008002b4 	movhi	r2,10
   9c834:	108e5144 	addi	r2,r2,14661
   9c838:	10c5883a 	add	r2,r2,r3
   9c83c:	10c00003 	ldbu	r3,0(r2)
   9c840:	e0bffd17 	ldw	r2,-12(fp)
   9c844:	10800d43 	ldbu	r2,53(r2)
   9c848:	1884b03a 	or	r2,r3,r2
   9c84c:	1007883a 	mov	r3,r2
   9c850:	008002b4 	movhi	r2,10
   9c854:	108e5144 	addi	r2,r2,14661
   9c858:	1105883a 	add	r2,r2,r4
   9c85c:	10c00005 	stb	r3,0(r2)
   9c860:	e0bffc17 	ldw	r2,-16(fp)
   9c864:	e0bff715 	stw	r2,-36(fp)
   9c868:	e0bff717 	ldw	r2,-36(fp)
   9c86c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   9c870:	009408c0 	call	9408c <OS_Sched>
   9c874:	00000406 	br	9c888 <OSTimeDlyResume+0x1f4>
   9c878:	e0bffc17 	ldw	r2,-16(fp)
   9c87c:	e0bff615 	stw	r2,-40(fp)
   9c880:	e0bff617 	ldw	r2,-40(fp)
   9c884:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   9c888:	e03fff15 	stw	zero,-4(fp)
   9c88c:	e0bfff17 	ldw	r2,-4(fp)
}
   9c890:	e037883a 	mov	sp,fp
   9c894:	dfc00117 	ldw	ra,4(sp)
   9c898:	df000017 	ldw	fp,0(sp)
   9c89c:	dec00204 	addi	sp,sp,8
   9c8a0:	f800283a 	ret

0009c8a4 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   9c8a4:	defffb04 	addi	sp,sp,-20
   9c8a8:	df000415 	stw	fp,16(sp)
   9c8ac:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   9c8b0:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9c8b4:	0005303a 	rdctl	r2,status
   9c8b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9c8bc:	e0fffd17 	ldw	r3,-12(fp)
   9c8c0:	00bfff84 	movi	r2,-2
   9c8c4:	1884703a 	and	r2,r3,r2
   9c8c8:	1001703a 	wrctl	status,r2
  
  return context;
   9c8cc:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   9c8d0:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
   9c8d4:	008002b4 	movhi	r2,10
   9c8d8:	108e5504 	addi	r2,r2,14676
   9c8dc:	10800017 	ldw	r2,0(r2)
   9c8e0:	e0bfff15 	stw	r2,-4(fp)
   9c8e4:	e0bffe17 	ldw	r2,-8(fp)
   9c8e8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9c8ec:	e0bffc17 	ldw	r2,-16(fp)
   9c8f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   9c8f4:	e0bfff17 	ldw	r2,-4(fp)
}
   9c8f8:	e037883a 	mov	sp,fp
   9c8fc:	df000017 	ldw	fp,0(sp)
   9c900:	dec00104 	addi	sp,sp,4
   9c904:	f800283a 	ret

0009c908 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   9c908:	defffb04 	addi	sp,sp,-20
   9c90c:	df000415 	stw	fp,16(sp)
   9c910:	df000404 	addi	fp,sp,16
   9c914:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   9c918:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9c91c:	0005303a 	rdctl	r2,status
   9c920:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9c924:	e0fffd17 	ldw	r3,-12(fp)
   9c928:	00bfff84 	movi	r2,-2
   9c92c:	1884703a 	and	r2,r3,r2
   9c930:	1001703a 	wrctl	status,r2
  
  return context;
   9c934:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   9c938:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
   9c93c:	00c002b4 	movhi	r3,10
   9c940:	18ce5504 	addi	r3,r3,14676
   9c944:	e0bfff17 	ldw	r2,-4(fp)
   9c948:	18800015 	stw	r2,0(r3)
   9c94c:	e0bffe17 	ldw	r2,-8(fp)
   9c950:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9c954:	e0bffc17 	ldw	r2,-16(fp)
   9c958:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   9c95c:	e037883a 	mov	sp,fp
   9c960:	df000017 	ldw	fp,0(sp)
   9c964:	dec00104 	addi	sp,sp,4
   9c968:	f800283a 	ret

0009c96c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   9c96c:	defffd04 	addi	sp,sp,-12
   9c970:	dfc00215 	stw	ra,8(sp)
   9c974:	df000115 	stw	fp,4(sp)
   9c978:	df000104 	addi	fp,sp,4
   9c97c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_0, cpu_0);
   9c980:	009ea980 	call	9ea98 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   9c984:	00800044 	movi	r2,1
   9c988:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   9c98c:	e037883a 	mov	sp,fp
   9c990:	dfc00117 	ldw	ra,4(sp)
   9c994:	df000017 	ldw	fp,0(sp)
   9c998:	dec00204 	addi	sp,sp,8
   9c99c:	f800283a 	ret

0009c9a0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   9c9a0:	defffe04 	addi	sp,sp,-8
   9c9a4:	dfc00115 	stw	ra,4(sp)
   9c9a8:	df000015 	stw	fp,0(sp)
   9c9ac:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   9c9b0:	01000434 	movhi	r4,16
   9c9b4:	21051004 	addi	r4,r4,5184
   9c9b8:	000b883a 	mov	r5,zero
   9c9bc:	01800044 	movi	r6,1
   9c9c0:	01c0fa04 	movi	r7,1000
   9c9c4:	009d8340 	call	9d834 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   9c9c8:	010002b4 	movhi	r4,10
   9c9cc:	2102f604 	addi	r4,r4,3032
   9c9d0:	000b883a 	mov	r5,zero
   9c9d4:	000d883a 	mov	r6,zero
   9c9d8:	009cbb00 	call	9cbb0 <altera_avalon_jtag_uart_init>
   9c9dc:	010002b4 	movhi	r4,10
   9c9e0:	2102ec04 	addi	r4,r4,2992
   9c9e4:	009ca300 	call	9ca30 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
   9c9e8:	00c00434 	movhi	r3,16
   9c9ec:	18c50004 	addi	r3,r3,5120
   9c9f0:	00800044 	movi	r2,1
   9c9f4:	18800035 	stwio	r2,0(r3)
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
   9c9f8:	010002b4 	movhi	r4,10
   9c9fc:	21070704 	addi	r4,r4,7196
   9ca00:	009d9740 	call	9d974 <alt_up_character_lcd_init>
   9ca04:	010002b4 	movhi	r4,10
   9ca08:	21070704 	addi	r4,r4,7196
   9ca0c:	009ca300 	call	9ca30 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD_0, SD_CARD_0);
   9ca10:	010002b4 	movhi	r4,10
   9ca14:	21071204 	addi	r4,r4,7240
   9ca18:	009ca300 	call	9ca30 <alt_dev_reg>
}
   9ca1c:	e037883a 	mov	sp,fp
   9ca20:	dfc00117 	ldw	ra,4(sp)
   9ca24:	df000017 	ldw	fp,0(sp)
   9ca28:	dec00204 	addi	sp,sp,8
   9ca2c:	f800283a 	ret

0009ca30 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   9ca30:	defffd04 	addi	sp,sp,-12
   9ca34:	dfc00215 	stw	ra,8(sp)
   9ca38:	df000115 	stw	fp,4(sp)
   9ca3c:	df000104 	addi	fp,sp,4
   9ca40:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   9ca44:	e13fff17 	ldw	r4,-4(fp)
   9ca48:	014002b4 	movhi	r5,10
   9ca4c:	29472604 	addi	r5,r5,7320
   9ca50:	009df640 	call	9df64 <alt_dev_llist_insert>
}
   9ca54:	e037883a 	mov	sp,fp
   9ca58:	dfc00117 	ldw	ra,4(sp)
   9ca5c:	df000017 	ldw	fp,0(sp)
   9ca60:	dec00204 	addi	sp,sp,8
   9ca64:	f800283a 	ret

0009ca68 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   9ca68:	defffa04 	addi	sp,sp,-24
   9ca6c:	dfc00515 	stw	ra,20(sp)
   9ca70:	df000415 	stw	fp,16(sp)
   9ca74:	df000404 	addi	fp,sp,16
   9ca78:	e13ffd15 	stw	r4,-12(fp)
   9ca7c:	e17ffe15 	stw	r5,-8(fp)
   9ca80:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   9ca84:	e0bffd17 	ldw	r2,-12(fp)
   9ca88:	10800017 	ldw	r2,0(r2)
   9ca8c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   9ca90:	e0bffc17 	ldw	r2,-16(fp)
   9ca94:	11000a04 	addi	r4,r2,40
   9ca98:	e0bffd17 	ldw	r2,-12(fp)
   9ca9c:	11c00217 	ldw	r7,8(r2)
   9caa0:	e17ffe17 	ldw	r5,-8(fp)
   9caa4:	e1bfff17 	ldw	r6,-4(fp)
   9caa8:	009d2280 	call	9d228 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   9caac:	e037883a 	mov	sp,fp
   9cab0:	dfc00117 	ldw	ra,4(sp)
   9cab4:	df000017 	ldw	fp,0(sp)
   9cab8:	dec00204 	addi	sp,sp,8
   9cabc:	f800283a 	ret

0009cac0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   9cac0:	defffa04 	addi	sp,sp,-24
   9cac4:	dfc00515 	stw	ra,20(sp)
   9cac8:	df000415 	stw	fp,16(sp)
   9cacc:	df000404 	addi	fp,sp,16
   9cad0:	e13ffd15 	stw	r4,-12(fp)
   9cad4:	e17ffe15 	stw	r5,-8(fp)
   9cad8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   9cadc:	e0bffd17 	ldw	r2,-12(fp)
   9cae0:	10800017 	ldw	r2,0(r2)
   9cae4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   9cae8:	e0bffc17 	ldw	r2,-16(fp)
   9caec:	11000a04 	addi	r4,r2,40
   9caf0:	e0bffd17 	ldw	r2,-12(fp)
   9caf4:	11c00217 	ldw	r7,8(r2)
   9caf8:	e17ffe17 	ldw	r5,-8(fp)
   9cafc:	e1bfff17 	ldw	r6,-4(fp)
   9cb00:	009d4e80 	call	9d4e8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   9cb04:	e037883a 	mov	sp,fp
   9cb08:	dfc00117 	ldw	ra,4(sp)
   9cb0c:	df000017 	ldw	fp,0(sp)
   9cb10:	dec00204 	addi	sp,sp,8
   9cb14:	f800283a 	ret

0009cb18 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   9cb18:	defffc04 	addi	sp,sp,-16
   9cb1c:	dfc00315 	stw	ra,12(sp)
   9cb20:	df000215 	stw	fp,8(sp)
   9cb24:	df000204 	addi	fp,sp,8
   9cb28:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   9cb2c:	e0bfff17 	ldw	r2,-4(fp)
   9cb30:	10800017 	ldw	r2,0(r2)
   9cb34:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   9cb38:	e0bffe17 	ldw	r2,-8(fp)
   9cb3c:	11000a04 	addi	r4,r2,40
   9cb40:	e0bfff17 	ldw	r2,-4(fp)
   9cb44:	11400217 	ldw	r5,8(r2)
   9cb48:	009d0c00 	call	9d0c0 <altera_avalon_jtag_uart_close>
}
   9cb4c:	e037883a 	mov	sp,fp
   9cb50:	dfc00117 	ldw	ra,4(sp)
   9cb54:	df000017 	ldw	fp,0(sp)
   9cb58:	dec00204 	addi	sp,sp,8
   9cb5c:	f800283a 	ret

0009cb60 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   9cb60:	defffa04 	addi	sp,sp,-24
   9cb64:	dfc00515 	stw	ra,20(sp)
   9cb68:	df000415 	stw	fp,16(sp)
   9cb6c:	df000404 	addi	fp,sp,16
   9cb70:	e13ffd15 	stw	r4,-12(fp)
   9cb74:	e17ffe15 	stw	r5,-8(fp)
   9cb78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   9cb7c:	e0bffd17 	ldw	r2,-12(fp)
   9cb80:	10800017 	ldw	r2,0(r2)
   9cb84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   9cb88:	e0bffc17 	ldw	r2,-16(fp)
   9cb8c:	11000a04 	addi	r4,r2,40
   9cb90:	e17ffe17 	ldw	r5,-8(fp)
   9cb94:	e1bfff17 	ldw	r6,-4(fp)
   9cb98:	009d1340 	call	9d134 <altera_avalon_jtag_uart_ioctl>
}
   9cb9c:	e037883a 	mov	sp,fp
   9cba0:	dfc00117 	ldw	ra,4(sp)
   9cba4:	df000017 	ldw	fp,0(sp)
   9cba8:	dec00204 	addi	sp,sp,8
   9cbac:	f800283a 	ret

0009cbb0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   9cbb0:	defff404 	addi	sp,sp,-48
   9cbb4:	dfc00b15 	stw	ra,44(sp)
   9cbb8:	df000a15 	stw	fp,40(sp)
   9cbbc:	df000a04 	addi	fp,sp,40
   9cbc0:	e13ffd15 	stw	r4,-12(fp)
   9cbc4:	e17ffe15 	stw	r5,-8(fp)
   9cbc8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   9cbcc:	e0bffd17 	ldw	r2,-12(fp)
   9cbd0:	10800c04 	addi	r2,r2,48
   9cbd4:	e0bffb15 	stw	r2,-20(fp)
   9cbd8:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   9cbdc:	e13ffc0b 	ldhu	r4,-16(fp)
   9cbe0:	e17ffc84 	addi	r5,fp,-14
   9cbe4:	0094c340 	call	94c34 <OSFlagCreate>
   9cbe8:	1007883a 	mov	r3,r2
   9cbec:	e0bffb17 	ldw	r2,-20(fp)
   9cbf0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   9cbf4:	e0bffd17 	ldw	r2,-12(fp)
   9cbf8:	10800a04 	addi	r2,r2,40
   9cbfc:	e0bff915 	stw	r2,-28(fp)
   9cc00:	00800044 	movi	r2,1
   9cc04:	e0bffa0d 	sth	r2,-24(fp)
   9cc08:	e13ffa0b 	ldhu	r4,-24(fp)
   9cc0c:	0099e700 	call	99e70 <OSSemCreate>
   9cc10:	1007883a 	mov	r3,r2
   9cc14:	e0bff917 	ldw	r2,-28(fp)
   9cc18:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   9cc1c:	e0bffd17 	ldw	r2,-12(fp)
   9cc20:	10800b04 	addi	r2,r2,44
   9cc24:	e0bff715 	stw	r2,-36(fp)
   9cc28:	00800044 	movi	r2,1
   9cc2c:	e0bff80d 	sth	r2,-32(fp)
   9cc30:	e13ff80b 	ldhu	r4,-32(fp)
   9cc34:	0099e700 	call	99e70 <OSSemCreate>
   9cc38:	1007883a 	mov	r3,r2
   9cc3c:	e0bff717 	ldw	r2,-36(fp)
   9cc40:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   9cc44:	e0fffd17 	ldw	r3,-12(fp)
   9cc48:	00800044 	movi	r2,1
   9cc4c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   9cc50:	e0bffd17 	ldw	r2,-12(fp)
   9cc54:	10800017 	ldw	r2,0(r2)
   9cc58:	11000104 	addi	r4,r2,4
   9cc5c:	e0bffd17 	ldw	r2,-12(fp)
   9cc60:	10800817 	ldw	r2,32(r2)
   9cc64:	1007883a 	mov	r3,r2
   9cc68:	2005883a 	mov	r2,r4
   9cc6c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   9cc70:	e13ffe17 	ldw	r4,-8(fp)
   9cc74:	e17fff17 	ldw	r5,-4(fp)
   9cc78:	d8000015 	stw	zero,0(sp)
   9cc7c:	018002b4 	movhi	r6,10
   9cc80:	31b33a04 	addi	r6,r6,-13080
   9cc84:	e1fffd17 	ldw	r7,-12(fp)
   9cc88:	009e1f00 	call	9e1f0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   9cc8c:	e0bffd17 	ldw	r2,-12(fp)
   9cc90:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   9cc94:	e0bffd17 	ldw	r2,-12(fp)
   9cc98:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   9cc9c:	008002b4 	movhi	r2,10
   9cca0:	108e5904 	addi	r2,r2,14692
   9cca4:	10800017 	ldw	r2,0(r2)
   9cca8:	100b883a 	mov	r5,r2
   9ccac:	018002b4 	movhi	r6,10
   9ccb0:	31b3eb04 	addi	r6,r6,-12372
   9ccb4:	e1fffd17 	ldw	r7,-12(fp)
   9ccb8:	009ddf40 	call	9ddf4 <alt_alarm_start>
   9ccbc:	1004403a 	cmpge	r2,r2,zero
   9ccc0:	1000041e 	bne	r2,zero,9ccd4 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   9ccc4:	e0fffd17 	ldw	r3,-12(fp)
   9ccc8:	00a00034 	movhi	r2,32768
   9cccc:	10bfffc4 	addi	r2,r2,-1
   9ccd0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   9ccd4:	e037883a 	mov	sp,fp
   9ccd8:	dfc00117 	ldw	ra,4(sp)
   9ccdc:	df000017 	ldw	fp,0(sp)
   9cce0:	dec00204 	addi	sp,sp,8
   9cce4:	f800283a 	ret

0009cce8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   9cce8:	defff204 	addi	sp,sp,-56
   9ccec:	dfc00d15 	stw	ra,52(sp)
   9ccf0:	df000c15 	stw	fp,48(sp)
   9ccf4:	df000c04 	addi	fp,sp,48
   9ccf8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   9ccfc:	e0bfff17 	ldw	r2,-4(fp)
   9cd00:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
   9cd04:	e0bffd17 	ldw	r2,-12(fp)
   9cd08:	10800017 	ldw	r2,0(r2)
   9cd0c:	e0bffc15 	stw	r2,-16(fp)
   9cd10:	00000006 	br	9cd14 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   9cd14:	e0bffc17 	ldw	r2,-16(fp)
   9cd18:	10800104 	addi	r2,r2,4
   9cd1c:	10800037 	ldwio	r2,0(r2)
   9cd20:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   9cd24:	e0bffb17 	ldw	r2,-20(fp)
   9cd28:	1080c00c 	andi	r2,r2,768
   9cd2c:	1005003a 	cmpeq	r2,r2,zero
   9cd30:	1000991e 	bne	r2,zero,9cf98 <altera_avalon_jtag_uart_irq+0x2b0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   9cd34:	e0bffb17 	ldw	r2,-20(fp)
   9cd38:	1080400c 	andi	r2,r2,256
   9cd3c:	1005003a 	cmpeq	r2,r2,zero
   9cd40:	1000481e 	bne	r2,zero,9ce64 <altera_avalon_jtag_uart_irq+0x17c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   9cd44:	00800074 	movhi	r2,1
   9cd48:	e0bffa15 	stw	r2,-24(fp)
   9cd4c:	00000006 	br	9cd50 <altera_avalon_jtag_uart_irq+0x68>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   9cd50:	e0bffd17 	ldw	r2,-12(fp)
   9cd54:	10800d17 	ldw	r2,52(r2)
   9cd58:	10800044 	addi	r2,r2,1
   9cd5c:	1081ffcc 	andi	r2,r2,2047
   9cd60:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   9cd64:	e0bffd17 	ldw	r2,-12(fp)
   9cd68:	10c00e17 	ldw	r3,56(r2)
   9cd6c:	e0bff917 	ldw	r2,-28(fp)
   9cd70:	18802826 	beq	r3,r2,9ce14 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   9cd74:	e0bffc17 	ldw	r2,-16(fp)
   9cd78:	10800037 	ldwio	r2,0(r2)
   9cd7c:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   9cd80:	e0bffa17 	ldw	r2,-24(fp)
   9cd84:	10a0000c 	andi	r2,r2,32768
   9cd88:	1005003a 	cmpeq	r2,r2,zero
   9cd8c:	1000211e 	bne	r2,zero,9ce14 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   9cd90:	e0bffd17 	ldw	r2,-12(fp)
   9cd94:	10c00d17 	ldw	r3,52(r2)
   9cd98:	e0bffa17 	ldw	r2,-24(fp)
   9cd9c:	1009883a 	mov	r4,r2
   9cda0:	e0bffd17 	ldw	r2,-12(fp)
   9cda4:	1885883a 	add	r2,r3,r2
   9cda8:	10801104 	addi	r2,r2,68
   9cdac:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   9cdb0:	e0bffd17 	ldw	r2,-12(fp)
   9cdb4:	10800d17 	ldw	r2,52(r2)
   9cdb8:	10800044 	addi	r2,r2,1
   9cdbc:	10c1ffcc 	andi	r3,r2,2047
   9cdc0:	e0bffd17 	ldw	r2,-12(fp)
   9cdc4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   9cdc8:	e0bffd17 	ldw	r2,-12(fp)
   9cdcc:	10800c17 	ldw	r2,48(r2)
   9cdd0:	e0bff615 	stw	r2,-40(fp)
   9cdd4:	00800044 	movi	r2,1
   9cdd8:	e0bff70d 	sth	r2,-36(fp)
   9cddc:	00800044 	movi	r2,1
   9cde0:	e0bff785 	stb	r2,-34(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   9cde4:	008002b4 	movhi	r2,10
   9cde8:	108e4544 	addi	r2,r2,14613
   9cdec:	10800003 	ldbu	r2,0(r2)
   9cdf0:	10803fcc 	andi	r2,r2,255
   9cdf4:	1005003a 	cmpeq	r2,r2,zero
   9cdf8:	103fd51e 	bne	r2,zero,9cd50 <altera_avalon_jtag_uart_irq+0x68>
  {
    OSFlagPost (group, flags, opt, &err);
   9cdfc:	e17ff70b 	ldhu	r5,-36(fp)
   9ce00:	e1bff783 	ldbu	r6,-34(fp)
   9ce04:	e1fffe04 	addi	r7,fp,-8
   9ce08:	e13ff617 	ldw	r4,-40(fp)
   9ce0c:	009595c0 	call	9595c <OSFlagPost>
    return err;
   9ce10:	003fcf06 	br	9cd50 <altera_avalon_jtag_uart_irq+0x68>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   9ce14:	e0bffa17 	ldw	r2,-24(fp)
   9ce18:	10bfffec 	andhi	r2,r2,65535
   9ce1c:	1005003a 	cmpeq	r2,r2,zero
   9ce20:	1000101e 	bne	r2,zero,9ce64 <altera_avalon_jtag_uart_irq+0x17c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   9ce24:	e0bffd17 	ldw	r2,-12(fp)
   9ce28:	10c00817 	ldw	r3,32(r2)
   9ce2c:	00bfff84 	movi	r2,-2
   9ce30:	1886703a 	and	r3,r3,r2
   9ce34:	e0bffd17 	ldw	r2,-12(fp)
   9ce38:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   9ce3c:	e0bffc17 	ldw	r2,-16(fp)
   9ce40:	11000104 	addi	r4,r2,4
   9ce44:	e0bffd17 	ldw	r2,-12(fp)
   9ce48:	10800817 	ldw	r2,32(r2)
   9ce4c:	1007883a 	mov	r3,r2
   9ce50:	2005883a 	mov	r2,r4
   9ce54:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   9ce58:	e0bffc17 	ldw	r2,-16(fp)
   9ce5c:	10800104 	addi	r2,r2,4
   9ce60:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   9ce64:	e0bffb17 	ldw	r2,-20(fp)
   9ce68:	1080800c 	andi	r2,r2,512
   9ce6c:	1005003a 	cmpeq	r2,r2,zero
   9ce70:	103fa81e 	bne	r2,zero,9cd14 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   9ce74:	e0bffb17 	ldw	r2,-20(fp)
   9ce78:	10bfffec 	andhi	r2,r2,65535
   9ce7c:	1004d43a 	srli	r2,r2,16
   9ce80:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   9ce84:	00002706 	br	9cf24 <altera_avalon_jtag_uart_irq+0x23c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   9ce88:	e13ffc17 	ldw	r4,-16(fp)
   9ce8c:	e0bffd17 	ldw	r2,-12(fp)
   9ce90:	10c01017 	ldw	r3,64(r2)
   9ce94:	e0bffd17 	ldw	r2,-12(fp)
   9ce98:	1885883a 	add	r2,r3,r2
   9ce9c:	10821104 	addi	r2,r2,2116
   9cea0:	10800003 	ldbu	r2,0(r2)
   9cea4:	10c03fcc 	andi	r3,r2,255
   9cea8:	18c0201c 	xori	r3,r3,128
   9ceac:	18ffe004 	addi	r3,r3,-128
   9ceb0:	2005883a 	mov	r2,r4
   9ceb4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   9ceb8:	e0bffd17 	ldw	r2,-12(fp)
   9cebc:	10801017 	ldw	r2,64(r2)
   9cec0:	10800044 	addi	r2,r2,1
   9cec4:	10c1ffcc 	andi	r3,r2,2047
   9cec8:	e0bffd17 	ldw	r2,-12(fp)
   9cecc:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   9ced0:	e0bffd17 	ldw	r2,-12(fp)
   9ced4:	10800c17 	ldw	r2,48(r2)
   9ced8:	e0bff415 	stw	r2,-48(fp)
   9cedc:	00800084 	movi	r2,2
   9cee0:	e0bff50d 	sth	r2,-44(fp)
   9cee4:	00800044 	movi	r2,1
   9cee8:	e0bff585 	stb	r2,-42(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   9ceec:	008002b4 	movhi	r2,10
   9cef0:	108e4544 	addi	r2,r2,14613
   9cef4:	10800003 	ldbu	r2,0(r2)
   9cef8:	10803fcc 	andi	r2,r2,255
   9cefc:	1005003a 	cmpeq	r2,r2,zero
   9cf00:	1000051e 	bne	r2,zero,9cf18 <altera_avalon_jtag_uart_irq+0x230>
  {
    OSFlagPost (group, flags, opt, &err);
   9cf04:	e17ff50b 	ldhu	r5,-44(fp)
   9cf08:	e1bff583 	ldbu	r6,-42(fp)
   9cf0c:	e1fffe44 	addi	r7,fp,-7
   9cf10:	e13ff417 	ldw	r4,-48(fp)
   9cf14:	009595c0 	call	9595c <OSFlagPost>

        space--;
   9cf18:	e0bff817 	ldw	r2,-32(fp)
   9cf1c:	10bfffc4 	addi	r2,r2,-1
   9cf20:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   9cf24:	e0bff817 	ldw	r2,-32(fp)
   9cf28:	1005003a 	cmpeq	r2,r2,zero
   9cf2c:	1000051e 	bne	r2,zero,9cf44 <altera_avalon_jtag_uart_irq+0x25c>
   9cf30:	e0bffd17 	ldw	r2,-12(fp)
   9cf34:	10c01017 	ldw	r3,64(r2)
   9cf38:	e0bffd17 	ldw	r2,-12(fp)
   9cf3c:	10800f17 	ldw	r2,60(r2)
   9cf40:	18bfd11e 	bne	r3,r2,9ce88 <altera_avalon_jtag_uart_irq+0x1a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   9cf44:	e0bff817 	ldw	r2,-32(fp)
   9cf48:	1005003a 	cmpeq	r2,r2,zero
   9cf4c:	103f711e 	bne	r2,zero,9cd14 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   9cf50:	e0bffd17 	ldw	r2,-12(fp)
   9cf54:	10c00817 	ldw	r3,32(r2)
   9cf58:	00bfff44 	movi	r2,-3
   9cf5c:	1886703a 	and	r3,r3,r2
   9cf60:	e0bffd17 	ldw	r2,-12(fp)
   9cf64:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   9cf68:	e0bffd17 	ldw	r2,-12(fp)
   9cf6c:	10800017 	ldw	r2,0(r2)
   9cf70:	11000104 	addi	r4,r2,4
   9cf74:	e0bffd17 	ldw	r2,-12(fp)
   9cf78:	10800817 	ldw	r2,32(r2)
   9cf7c:	1007883a 	mov	r3,r2
   9cf80:	2005883a 	mov	r2,r4
   9cf84:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   9cf88:	e0bffc17 	ldw	r2,-16(fp)
   9cf8c:	10800104 	addi	r2,r2,4
   9cf90:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   9cf94:	003f5f06 	br	9cd14 <altera_avalon_jtag_uart_irq+0x2c>
}
   9cf98:	e037883a 	mov	sp,fp
   9cf9c:	dfc00117 	ldw	ra,4(sp)
   9cfa0:	df000017 	ldw	fp,0(sp)
   9cfa4:	dec00204 	addi	sp,sp,8
   9cfa8:	f800283a 	ret

0009cfac <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   9cfac:	defff804 	addi	sp,sp,-32
   9cfb0:	dfc00715 	stw	ra,28(sp)
   9cfb4:	df000615 	stw	fp,24(sp)
   9cfb8:	df000604 	addi	fp,sp,24
   9cfbc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   9cfc0:	e0bfff17 	ldw	r2,-4(fp)
   9cfc4:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   9cfc8:	e0bffd17 	ldw	r2,-12(fp)
   9cfcc:	10800017 	ldw	r2,0(r2)
   9cfd0:	10800104 	addi	r2,r2,4
   9cfd4:	10800037 	ldwio	r2,0(r2)
   9cfd8:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   9cfdc:	e0bffc17 	ldw	r2,-16(fp)
   9cfe0:	1081000c 	andi	r2,r2,1024
   9cfe4:	1005003a 	cmpeq	r2,r2,zero
   9cfe8:	10000c1e 	bne	r2,zero,9d01c <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   9cfec:	e0bffd17 	ldw	r2,-12(fp)
   9cff0:	10800017 	ldw	r2,0(r2)
   9cff4:	11000104 	addi	r4,r2,4
   9cff8:	e0bffd17 	ldw	r2,-12(fp)
   9cffc:	10800817 	ldw	r2,32(r2)
   9d000:	10810014 	ori	r2,r2,1024
   9d004:	1007883a 	mov	r3,r2
   9d008:	2005883a 	mov	r2,r4
   9d00c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   9d010:	e0bffd17 	ldw	r2,-12(fp)
   9d014:	10000915 	stw	zero,36(r2)
   9d018:	00002106 	br	9d0a0 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   9d01c:	e0bffd17 	ldw	r2,-12(fp)
   9d020:	10c00917 	ldw	r3,36(r2)
   9d024:	00a00034 	movhi	r2,32768
   9d028:	10bfff04 	addi	r2,r2,-4
   9d02c:	10c01c36 	bltu	r2,r3,9d0a0 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
   9d030:	e0bffd17 	ldw	r2,-12(fp)
   9d034:	10800917 	ldw	r2,36(r2)
   9d038:	10c00044 	addi	r3,r2,1
   9d03c:	e0bffd17 	ldw	r2,-12(fp)
   9d040:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   9d044:	e0bffd17 	ldw	r2,-12(fp)
   9d048:	10c00917 	ldw	r3,36(r2)
   9d04c:	e0bffd17 	ldw	r2,-12(fp)
   9d050:	10800117 	ldw	r2,4(r2)
   9d054:	18801236 	bltu	r3,r2,9d0a0 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   9d058:	e0bffd17 	ldw	r2,-12(fp)
   9d05c:	10800c17 	ldw	r2,48(r2)
   9d060:	e0bffa15 	stw	r2,-24(fp)
   9d064:	00800104 	movi	r2,4
   9d068:	e0bffb0d 	sth	r2,-20(fp)
   9d06c:	00800044 	movi	r2,1
   9d070:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   9d074:	008002b4 	movhi	r2,10
   9d078:	108e4544 	addi	r2,r2,14613
   9d07c:	10800003 	ldbu	r2,0(r2)
   9d080:	10803fcc 	andi	r2,r2,255
   9d084:	1005003a 	cmpeq	r2,r2,zero
   9d088:	1000051e 	bne	r2,zero,9d0a0 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
   9d08c:	e17ffb0b 	ldhu	r5,-20(fp)
   9d090:	e1bffb83 	ldbu	r6,-18(fp)
   9d094:	e1fffe04 	addi	r7,fp,-8
   9d098:	e13ffa17 	ldw	r4,-24(fp)
   9d09c:	009595c0 	call	9595c <OSFlagPost>
   9d0a0:	008002b4 	movhi	r2,10
   9d0a4:	108e5904 	addi	r2,r2,14692
   9d0a8:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
   9d0ac:	e037883a 	mov	sp,fp
   9d0b0:	dfc00117 	ldw	ra,4(sp)
   9d0b4:	df000017 	ldw	fp,0(sp)
   9d0b8:	dec00204 	addi	sp,sp,8
   9d0bc:	f800283a 	ret

0009d0c0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   9d0c0:	defffc04 	addi	sp,sp,-16
   9d0c4:	df000315 	stw	fp,12(sp)
   9d0c8:	df000304 	addi	fp,sp,12
   9d0cc:	e13ffd15 	stw	r4,-12(fp)
   9d0d0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   9d0d4:	00000706 	br	9d0f4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   9d0d8:	e0bffe17 	ldw	r2,-8(fp)
   9d0dc:	1090000c 	andi	r2,r2,16384
   9d0e0:	1005003a 	cmpeq	r2,r2,zero
   9d0e4:	1000031e 	bne	r2,zero,9d0f4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   9d0e8:	00bffd44 	movi	r2,-11
   9d0ec:	e0bfff15 	stw	r2,-4(fp)
   9d0f0:	00000b06 	br	9d120 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   9d0f4:	e0bffd17 	ldw	r2,-12(fp)
   9d0f8:	10c01017 	ldw	r3,64(r2)
   9d0fc:	e0bffd17 	ldw	r2,-12(fp)
   9d100:	10800f17 	ldw	r2,60(r2)
   9d104:	18800526 	beq	r3,r2,9d11c <altera_avalon_jtag_uart_close+0x5c>
   9d108:	e0bffd17 	ldw	r2,-12(fp)
   9d10c:	10c00917 	ldw	r3,36(r2)
   9d110:	e0bffd17 	ldw	r2,-12(fp)
   9d114:	10800117 	ldw	r2,4(r2)
   9d118:	18bfef36 	bltu	r3,r2,9d0d8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   9d11c:	e03fff15 	stw	zero,-4(fp)
   9d120:	e0bfff17 	ldw	r2,-4(fp)
}
   9d124:	e037883a 	mov	sp,fp
   9d128:	df000017 	ldw	fp,0(sp)
   9d12c:	dec00104 	addi	sp,sp,4
   9d130:	f800283a 	ret

0009d134 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   9d134:	defff804 	addi	sp,sp,-32
   9d138:	df000715 	stw	fp,28(sp)
   9d13c:	df000704 	addi	fp,sp,28
   9d140:	e13ffb15 	stw	r4,-20(fp)
   9d144:	e17ffc15 	stw	r5,-16(fp)
   9d148:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   9d14c:	00bff9c4 	movi	r2,-25
   9d150:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   9d154:	e0bffc17 	ldw	r2,-16(fp)
   9d158:	e0bfff15 	stw	r2,-4(fp)
   9d15c:	e0ffff17 	ldw	r3,-4(fp)
   9d160:	189a8060 	cmpeqi	r2,r3,27137
   9d164:	1000041e 	bne	r2,zero,9d178 <altera_avalon_jtag_uart_ioctl+0x44>
   9d168:	e0ffff17 	ldw	r3,-4(fp)
   9d16c:	189a80a0 	cmpeqi	r2,r3,27138
   9d170:	10001b1e 	bne	r2,zero,9d1e0 <altera_avalon_jtag_uart_ioctl+0xac>
   9d174:	00002706 	br	9d214 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   9d178:	e0bffb17 	ldw	r2,-20(fp)
   9d17c:	10c00117 	ldw	r3,4(r2)
   9d180:	00a00034 	movhi	r2,32768
   9d184:	10bfffc4 	addi	r2,r2,-1
   9d188:	18802226 	beq	r3,r2,9d214 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   9d18c:	e0bffd17 	ldw	r2,-12(fp)
   9d190:	10800017 	ldw	r2,0(r2)
   9d194:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   9d198:	e0bff917 	ldw	r2,-28(fp)
   9d19c:	10800090 	cmplti	r2,r2,2
   9d1a0:	1000071e 	bne	r2,zero,9d1c0 <altera_avalon_jtag_uart_ioctl+0x8c>
   9d1a4:	e0fff917 	ldw	r3,-28(fp)
   9d1a8:	00a00034 	movhi	r2,32768
   9d1ac:	10bfffc4 	addi	r2,r2,-1
   9d1b0:	18800326 	beq	r3,r2,9d1c0 <altera_avalon_jtag_uart_ioctl+0x8c>
   9d1b4:	e0bff917 	ldw	r2,-28(fp)
   9d1b8:	e0bffe15 	stw	r2,-8(fp)
   9d1bc:	00000306 	br	9d1cc <altera_avalon_jtag_uart_ioctl+0x98>
   9d1c0:	00e00034 	movhi	r3,32768
   9d1c4:	18ffff84 	addi	r3,r3,-2
   9d1c8:	e0fffe15 	stw	r3,-8(fp)
   9d1cc:	e0bffb17 	ldw	r2,-20(fp)
   9d1d0:	e0fffe17 	ldw	r3,-8(fp)
   9d1d4:	10c00115 	stw	r3,4(r2)
      rc = 0;
   9d1d8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   9d1dc:	00000d06 	br	9d214 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   9d1e0:	e0bffb17 	ldw	r2,-20(fp)
   9d1e4:	10c00117 	ldw	r3,4(r2)
   9d1e8:	00a00034 	movhi	r2,32768
   9d1ec:	10bfffc4 	addi	r2,r2,-1
   9d1f0:	18800826 	beq	r3,r2,9d214 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   9d1f4:	e13ffd17 	ldw	r4,-12(fp)
   9d1f8:	e0bffb17 	ldw	r2,-20(fp)
   9d1fc:	10c00917 	ldw	r3,36(r2)
   9d200:	e0bffb17 	ldw	r2,-20(fp)
   9d204:	10800117 	ldw	r2,4(r2)
   9d208:	1885803a 	cmpltu	r2,r3,r2
   9d20c:	20800015 	stw	r2,0(r4)
      rc = 0;
   9d210:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   9d214:	e0bffa17 	ldw	r2,-24(fp)
}
   9d218:	e037883a 	mov	sp,fp
   9d21c:	df000017 	ldw	fp,0(sp)
   9d220:	dec00104 	addi	sp,sp,4
   9d224:	f800283a 	ret

0009d228 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   9d228:	deffeb04 	addi	sp,sp,-84
   9d22c:	dfc01415 	stw	ra,80(sp)
   9d230:	df001315 	stw	fp,76(sp)
   9d234:	df001304 	addi	fp,sp,76
   9d238:	e13ffb15 	stw	r4,-20(fp)
   9d23c:	e17ffc15 	stw	r5,-16(fp)
   9d240:	e1bffd15 	stw	r6,-12(fp)
   9d244:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   9d248:	e0bffc17 	ldw	r2,-16(fp)
   9d24c:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   9d250:	e0bffb17 	ldw	r2,-20(fp)
   9d254:	10800a17 	ldw	r2,40(r2)
   9d258:	e0bff315 	stw	r2,-52(fp)
   9d25c:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   9d260:	e17ff40b 	ldhu	r5,-48(fp)
   9d264:	e1bffa44 	addi	r6,fp,-23
   9d268:	e13ff317 	ldw	r4,-52(fp)
   9d26c:	009a2240 	call	9a224 <OSSemPend>

  while (space > 0)
   9d270:	00006406 	br	9d404 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   9d274:	e0bffb17 	ldw	r2,-20(fp)
   9d278:	10800d17 	ldw	r2,52(r2)
   9d27c:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
   9d280:	e0bffb17 	ldw	r2,-20(fp)
   9d284:	10800e17 	ldw	r2,56(r2)
   9d288:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
   9d28c:	e0fff617 	ldw	r3,-40(fp)
   9d290:	e0bff517 	ldw	r2,-44(fp)
   9d294:	18800536 	bltu	r3,r2,9d2ac <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
   9d298:	e0bff617 	ldw	r2,-40(fp)
   9d29c:	e0fff517 	ldw	r3,-44(fp)
   9d2a0:	10c5c83a 	sub	r2,r2,r3
   9d2a4:	e0bff715 	stw	r2,-36(fp)
   9d2a8:	00000406 	br	9d2bc <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   9d2ac:	00820004 	movi	r2,2048
   9d2b0:	e0fff517 	ldw	r3,-44(fp)
   9d2b4:	10c5c83a 	sub	r2,r2,r3
   9d2b8:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
   9d2bc:	e0bff717 	ldw	r2,-36(fp)
   9d2c0:	1005003a 	cmpeq	r2,r2,zero
   9d2c4:	10001f1e 	bne	r2,zero,9d344 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   9d2c8:	e0fffd17 	ldw	r3,-12(fp)
   9d2cc:	e0bff717 	ldw	r2,-36(fp)
   9d2d0:	1880022e 	bgeu	r3,r2,9d2dc <altera_avalon_jtag_uart_read+0xb4>
        n = space;
   9d2d4:	e0bffd17 	ldw	r2,-12(fp)
   9d2d8:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   9d2dc:	e0bffb17 	ldw	r2,-20(fp)
   9d2e0:	10c01104 	addi	r3,r2,68
   9d2e4:	e0bff517 	ldw	r2,-44(fp)
   9d2e8:	1887883a 	add	r3,r3,r2
   9d2ec:	e0bff917 	ldw	r2,-28(fp)
   9d2f0:	1009883a 	mov	r4,r2
   9d2f4:	180b883a 	mov	r5,r3
   9d2f8:	e1bff717 	ldw	r6,-36(fp)
   9d2fc:	008ce700 	call	8ce70 <memcpy>
      ptr   += n;
   9d300:	e0fff717 	ldw	r3,-36(fp)
   9d304:	e0bff917 	ldw	r2,-28(fp)
   9d308:	10c5883a 	add	r2,r2,r3
   9d30c:	e0bff915 	stw	r2,-28(fp)
      space -= n;
   9d310:	e0fffd17 	ldw	r3,-12(fp)
   9d314:	e0bff717 	ldw	r2,-36(fp)
   9d318:	1885c83a 	sub	r2,r3,r2
   9d31c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   9d320:	e0fff517 	ldw	r3,-44(fp)
   9d324:	e0bff717 	ldw	r2,-36(fp)
   9d328:	1885883a 	add	r2,r3,r2
   9d32c:	10c1ffcc 	andi	r3,r2,2047
   9d330:	e0bffb17 	ldw	r2,-20(fp)
   9d334:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   9d338:	e0bffd17 	ldw	r2,-12(fp)
   9d33c:	10800048 	cmpgei	r2,r2,1
   9d340:	103fcc1e 	bne	r2,zero,9d274 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
   9d344:	e0fff917 	ldw	r3,-28(fp)
   9d348:	e0bffc17 	ldw	r2,-16(fp)
   9d34c:	1880301e 	bne	r3,r2,9d410 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   9d350:	e0bffe17 	ldw	r2,-8(fp)
   9d354:	1090000c 	andi	r2,r2,16384
   9d358:	1004c03a 	cmpne	r2,r2,zero
   9d35c:	10002c1e 	bne	r2,zero,9d410 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   9d360:	008002b4 	movhi	r2,10
   9d364:	108e4544 	addi	r2,r2,14613
   9d368:	10800003 	ldbu	r2,0(r2)
   9d36c:	10803fcc 	andi	r2,r2,255
   9d370:	10800058 	cmpnei	r2,r2,1
   9d374:	1000161e 	bne	r2,zero,9d3d0 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   9d378:	e0bffb17 	ldw	r2,-20(fp)
   9d37c:	10800c17 	ldw	r2,48(r2)
   9d380:	e0bff015 	stw	r2,-64(fp)
   9d384:	00800144 	movi	r2,5
   9d388:	e0bff10d 	sth	r2,-60(fp)
   9d38c:	00bfe0c4 	movi	r2,-125
   9d390:	e0bff185 	stb	r2,-58(fp)
   9d394:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   9d398:	008002b4 	movhi	r2,10
   9d39c:	108e4544 	addi	r2,r2,14613
   9d3a0:	10800003 	ldbu	r2,0(r2)
   9d3a4:	10803fcc 	andi	r2,r2,255
   9d3a8:	1005003a 	cmpeq	r2,r2,zero
   9d3ac:	1000111e 	bne	r2,zero,9d3f4 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   9d3b0:	e17ff10b 	ldhu	r5,-60(fp)
   9d3b4:	e1bff183 	ldbu	r6,-58(fp)
   9d3b8:	e1fff20b 	ldhu	r7,-56(fp)
   9d3bc:	e0bffa04 	addi	r2,fp,-24
   9d3c0:	d8800015 	stw	r2,0(sp)
   9d3c4:	e13ff017 	ldw	r4,-64(fp)
   9d3c8:	00952b00 	call	952b0 <OSFlagPend>
    return err;
   9d3cc:	00000906 	br	9d3f4 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   9d3d0:	e0bffb17 	ldw	r2,-20(fp)
   9d3d4:	10c00d17 	ldw	r3,52(r2)
   9d3d8:	e0bff617 	ldw	r2,-40(fp)
   9d3dc:	1880051e 	bne	r3,r2,9d3f4 <altera_avalon_jtag_uart_read+0x1cc>
   9d3e0:	e0bffb17 	ldw	r2,-20(fp)
   9d3e4:	10c00917 	ldw	r3,36(r2)
   9d3e8:	e0bffb17 	ldw	r2,-20(fp)
   9d3ec:	10800117 	ldw	r2,4(r2)
   9d3f0:	18bff736 	bltu	r3,r2,9d3d0 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   9d3f4:	e0bffb17 	ldw	r2,-20(fp)
   9d3f8:	10c00d17 	ldw	r3,52(r2)
   9d3fc:	e0bff617 	ldw	r2,-40(fp)
   9d400:	18800326 	beq	r3,r2,9d410 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   9d404:	e0bffd17 	ldw	r2,-12(fp)
   9d408:	10800048 	cmpgei	r2,r2,1
   9d40c:	103f991e 	bne	r2,zero,9d274 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   9d410:	e0bffb17 	ldw	r2,-20(fp)
   9d414:	11000a17 	ldw	r4,40(r2)
   9d418:	009a61c0 	call	9a61c <OSSemPost>

  if (ptr != buffer)
   9d41c:	e0fff917 	ldw	r3,-28(fp)
   9d420:	e0bffc17 	ldw	r2,-16(fp)
   9d424:	18801926 	beq	r3,r2,9d48c <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9d428:	0005303a 	rdctl	r2,status
   9d42c:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9d430:	e0ffef17 	ldw	r3,-68(fp)
   9d434:	00bfff84 	movi	r2,-2
   9d438:	1884703a 	and	r2,r3,r2
   9d43c:	1001703a 	wrctl	status,r2
  
  return context;
   9d440:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   9d444:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   9d448:	e0bffb17 	ldw	r2,-20(fp)
   9d44c:	10800817 	ldw	r2,32(r2)
   9d450:	10c00054 	ori	r3,r2,1
   9d454:	e0bffb17 	ldw	r2,-20(fp)
   9d458:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   9d45c:	e0bffb17 	ldw	r2,-20(fp)
   9d460:	10800017 	ldw	r2,0(r2)
   9d464:	11000104 	addi	r4,r2,4
   9d468:	e0bffb17 	ldw	r2,-20(fp)
   9d46c:	10800817 	ldw	r2,32(r2)
   9d470:	1007883a 	mov	r3,r2
   9d474:	2005883a 	mov	r2,r4
   9d478:	10c00035 	stwio	r3,0(r2)
   9d47c:	e0bff817 	ldw	r2,-32(fp)
   9d480:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9d484:	e0bfee17 	ldw	r2,-72(fp)
   9d488:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   9d48c:	e0fff917 	ldw	r3,-28(fp)
   9d490:	e0bffc17 	ldw	r2,-16(fp)
   9d494:	18800526 	beq	r3,r2,9d4ac <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
   9d498:	e0fff917 	ldw	r3,-28(fp)
   9d49c:	e0bffc17 	ldw	r2,-16(fp)
   9d4a0:	1887c83a 	sub	r3,r3,r2
   9d4a4:	e0ffff15 	stw	r3,-4(fp)
   9d4a8:	00000906 	br	9d4d0 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   9d4ac:	e0bffe17 	ldw	r2,-8(fp)
   9d4b0:	1090000c 	andi	r2,r2,16384
   9d4b4:	1005003a 	cmpeq	r2,r2,zero
   9d4b8:	1000031e 	bne	r2,zero,9d4c8 <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
   9d4bc:	00bffd44 	movi	r2,-11
   9d4c0:	e0bfff15 	stw	r2,-4(fp)
   9d4c4:	00000206 	br	9d4d0 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   9d4c8:	00bffec4 	movi	r2,-5
   9d4cc:	e0bfff15 	stw	r2,-4(fp)
   9d4d0:	e0bfff17 	ldw	r2,-4(fp)
}
   9d4d4:	e037883a 	mov	sp,fp
   9d4d8:	dfc00117 	ldw	ra,4(sp)
   9d4dc:	df000017 	ldw	fp,0(sp)
   9d4e0:	dec00204 	addi	sp,sp,8
   9d4e4:	f800283a 	ret

0009d4e8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   9d4e8:	deffeb04 	addi	sp,sp,-84
   9d4ec:	dfc01415 	stw	ra,80(sp)
   9d4f0:	df001315 	stw	fp,76(sp)
   9d4f4:	df001304 	addi	fp,sp,76
   9d4f8:	e13ffb15 	stw	r4,-20(fp)
   9d4fc:	e17ffc15 	stw	r5,-16(fp)
   9d500:	e1bffd15 	stw	r6,-12(fp)
   9d504:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   9d508:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   9d50c:	e0bffc17 	ldw	r2,-16(fp)
   9d510:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   9d514:	e0bffb17 	ldw	r2,-20(fp)
   9d518:	10800b17 	ldw	r2,44(r2)
   9d51c:	e0bff315 	stw	r2,-52(fp)
   9d520:	e03ff40d 	sth	zero,-48(fp)
   9d524:	e17ff40b 	ldhu	r5,-48(fp)
   9d528:	e1bffa04 	addi	r6,fp,-24
   9d52c:	e13ff317 	ldw	r4,-52(fp)
   9d530:	009a2240 	call	9a224 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   9d534:	00003a06 	br	9d620 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   9d538:	e0bffb17 	ldw	r2,-20(fp)
   9d53c:	10800f17 	ldw	r2,60(r2)
   9d540:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   9d544:	e0bffb17 	ldw	r2,-20(fp)
   9d548:	10801017 	ldw	r2,64(r2)
   9d54c:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
   9d550:	e0fff917 	ldw	r3,-28(fp)
   9d554:	e0bff817 	ldw	r2,-32(fp)
   9d558:	1880062e 	bgeu	r3,r2,9d574 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
   9d55c:	e0fff817 	ldw	r3,-32(fp)
   9d560:	e0bff917 	ldw	r2,-28(fp)
   9d564:	1885c83a 	sub	r2,r3,r2
   9d568:	10bfffc4 	addi	r2,r2,-1
   9d56c:	e0bff715 	stw	r2,-36(fp)
   9d570:	00000c06 	br	9d5a4 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
   9d574:	e0bff817 	ldw	r2,-32(fp)
   9d578:	1005003a 	cmpeq	r2,r2,zero
   9d57c:	1000051e 	bne	r2,zero,9d594 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   9d580:	00820004 	movi	r2,2048
   9d584:	e0fff917 	ldw	r3,-28(fp)
   9d588:	10c5c83a 	sub	r2,r2,r3
   9d58c:	e0bff715 	stw	r2,-36(fp)
   9d590:	00000406 	br	9d5a4 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   9d594:	0081ffc4 	movi	r2,2047
   9d598:	e0fff917 	ldw	r3,-28(fp)
   9d59c:	10c5c83a 	sub	r2,r2,r3
   9d5a0:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
   9d5a4:	e0bff717 	ldw	r2,-36(fp)
   9d5a8:	1005003a 	cmpeq	r2,r2,zero
   9d5ac:	10001f1e 	bne	r2,zero,9d62c <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
   9d5b0:	e0fffd17 	ldw	r3,-12(fp)
   9d5b4:	e0bff717 	ldw	r2,-36(fp)
   9d5b8:	1880022e 	bgeu	r3,r2,9d5c4 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   9d5bc:	e0bffd17 	ldw	r2,-12(fp)
   9d5c0:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   9d5c4:	e0bffb17 	ldw	r2,-20(fp)
   9d5c8:	10c21104 	addi	r3,r2,2116
   9d5cc:	e0bff917 	ldw	r2,-28(fp)
   9d5d0:	1885883a 	add	r2,r3,r2
   9d5d4:	e0fffc17 	ldw	r3,-16(fp)
   9d5d8:	1009883a 	mov	r4,r2
   9d5dc:	180b883a 	mov	r5,r3
   9d5e0:	e1bff717 	ldw	r6,-36(fp)
   9d5e4:	008ce700 	call	8ce70 <memcpy>
      ptr   += n;
   9d5e8:	e0fff717 	ldw	r3,-36(fp)
   9d5ec:	e0bffc17 	ldw	r2,-16(fp)
   9d5f0:	10c5883a 	add	r2,r2,r3
   9d5f4:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   9d5f8:	e0fffd17 	ldw	r3,-12(fp)
   9d5fc:	e0bff717 	ldw	r2,-36(fp)
   9d600:	1885c83a 	sub	r2,r3,r2
   9d604:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   9d608:	e0fff917 	ldw	r3,-28(fp)
   9d60c:	e0bff717 	ldw	r2,-36(fp)
   9d610:	1885883a 	add	r2,r3,r2
   9d614:	10c1ffcc 	andi	r3,r2,2047
   9d618:	e0bffb17 	ldw	r2,-20(fp)
   9d61c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   9d620:	e0bffd17 	ldw	r2,-12(fp)
   9d624:	10800048 	cmpgei	r2,r2,1
   9d628:	103fc31e 	bne	r2,zero,9d538 <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9d62c:	0005303a 	rdctl	r2,status
   9d630:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9d634:	e0fff217 	ldw	r3,-56(fp)
   9d638:	00bfff84 	movi	r2,-2
   9d63c:	1884703a 	and	r2,r3,r2
   9d640:	1001703a 	wrctl	status,r2
  
  return context;
   9d644:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   9d648:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   9d64c:	e0bffb17 	ldw	r2,-20(fp)
   9d650:	10800817 	ldw	r2,32(r2)
   9d654:	10c00094 	ori	r3,r2,2
   9d658:	e0bffb17 	ldw	r2,-20(fp)
   9d65c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   9d660:	e0bffb17 	ldw	r2,-20(fp)
   9d664:	10800017 	ldw	r2,0(r2)
   9d668:	11000104 	addi	r4,r2,4
   9d66c:	e0bffb17 	ldw	r2,-20(fp)
   9d670:	10800817 	ldw	r2,32(r2)
   9d674:	1007883a 	mov	r3,r2
   9d678:	2005883a 	mov	r2,r4
   9d67c:	10c00035 	stwio	r3,0(r2)
   9d680:	e0bff617 	ldw	r2,-40(fp)
   9d684:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9d688:	e0bff117 	ldw	r2,-60(fp)
   9d68c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   9d690:	e0bffd17 	ldw	r2,-12(fp)
   9d694:	10800050 	cmplti	r2,r2,1
   9d698:	10002d1e 	bne	r2,zero,9d750 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
   9d69c:	e0bffe17 	ldw	r2,-8(fp)
   9d6a0:	1090000c 	andi	r2,r2,16384
   9d6a4:	1004c03a 	cmpne	r2,r2,zero
   9d6a8:	10002c1e 	bne	r2,zero,9d75c <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   9d6ac:	008002b4 	movhi	r2,10
   9d6b0:	108e4544 	addi	r2,r2,14613
   9d6b4:	10800003 	ldbu	r2,0(r2)
   9d6b8:	10803fcc 	andi	r2,r2,255
   9d6bc:	10800058 	cmpnei	r2,r2,1
   9d6c0:	1000161e 	bne	r2,zero,9d71c <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
   9d6c4:	e0bffb17 	ldw	r2,-20(fp)
   9d6c8:	10800c17 	ldw	r2,48(r2)
   9d6cc:	e0bfee15 	stw	r2,-72(fp)
   9d6d0:	00800184 	movi	r2,6
   9d6d4:	e0bfef0d 	sth	r2,-68(fp)
   9d6d8:	00bfe0c4 	movi	r2,-125
   9d6dc:	e0bfef85 	stb	r2,-66(fp)
   9d6e0:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   9d6e4:	008002b4 	movhi	r2,10
   9d6e8:	108e4544 	addi	r2,r2,14613
   9d6ec:	10800003 	ldbu	r2,0(r2)
   9d6f0:	10803fcc 	andi	r2,r2,255
   9d6f4:	1005003a 	cmpeq	r2,r2,zero
   9d6f8:	1000111e 	bne	r2,zero,9d740 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   9d6fc:	e17fef0b 	ldhu	r5,-68(fp)
   9d700:	e1bfef83 	ldbu	r6,-66(fp)
   9d704:	e1fff00b 	ldhu	r7,-64(fp)
   9d708:	e0bffa44 	addi	r2,fp,-23
   9d70c:	d8800015 	stw	r2,0(sp)
   9d710:	e13fee17 	ldw	r4,-72(fp)
   9d714:	00952b00 	call	952b0 <OSFlagPend>
    return err;
   9d718:	00000906 	br	9d740 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   9d71c:	e0bffb17 	ldw	r2,-20(fp)
   9d720:	10c01017 	ldw	r3,64(r2)
   9d724:	e0bff817 	ldw	r2,-32(fp)
   9d728:	1880051e 	bne	r3,r2,9d740 <altera_avalon_jtag_uart_write+0x258>
   9d72c:	e0bffb17 	ldw	r2,-20(fp)
   9d730:	10c00917 	ldw	r3,36(r2)
   9d734:	e0bffb17 	ldw	r2,-20(fp)
   9d738:	10800117 	ldw	r2,4(r2)
   9d73c:	18bff736 	bltu	r3,r2,9d71c <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   9d740:	e0bffb17 	ldw	r2,-20(fp)
   9d744:	10c01017 	ldw	r3,64(r2)
   9d748:	e0bff817 	ldw	r2,-32(fp)
   9d74c:	18800326 	beq	r3,r2,9d75c <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
   9d750:	e0bffd17 	ldw	r2,-12(fp)
   9d754:	10800048 	cmpgei	r2,r2,1
   9d758:	103fb11e 	bne	r2,zero,9d620 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   9d75c:	e0bffb17 	ldw	r2,-20(fp)
   9d760:	11000b17 	ldw	r4,44(r2)
   9d764:	009a61c0 	call	9a61c <OSSemPost>

  if (ptr != start)
   9d768:	e0fffc17 	ldw	r3,-16(fp)
   9d76c:	e0bff517 	ldw	r2,-44(fp)
   9d770:	18800526 	beq	r3,r2,9d788 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
   9d774:	e0fffc17 	ldw	r3,-16(fp)
   9d778:	e0bff517 	ldw	r2,-44(fp)
   9d77c:	1887c83a 	sub	r3,r3,r2
   9d780:	e0ffff15 	stw	r3,-4(fp)
   9d784:	00000906 	br	9d7ac <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
   9d788:	e0bffe17 	ldw	r2,-8(fp)
   9d78c:	1090000c 	andi	r2,r2,16384
   9d790:	1005003a 	cmpeq	r2,r2,zero
   9d794:	1000031e 	bne	r2,zero,9d7a4 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
   9d798:	00bffd44 	movi	r2,-11
   9d79c:	e0bfff15 	stw	r2,-4(fp)
   9d7a0:	00000206 	br	9d7ac <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
   9d7a4:	00bffec4 	movi	r2,-5
   9d7a8:	e0bfff15 	stw	r2,-4(fp)
   9d7ac:	e0bfff17 	ldw	r2,-4(fp)
}
   9d7b0:	e037883a 	mov	sp,fp
   9d7b4:	dfc00117 	ldw	ra,4(sp)
   9d7b8:	df000017 	ldw	fp,0(sp)
   9d7bc:	dec00204 	addi	sp,sp,8
   9d7c0:	f800283a 	ret

0009d7c4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   9d7c4:	defffa04 	addi	sp,sp,-24
   9d7c8:	dfc00515 	stw	ra,20(sp)
   9d7cc:	df000415 	stw	fp,16(sp)
   9d7d0:	df000404 	addi	fp,sp,16
   9d7d4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   9d7d8:	e0bfff17 	ldw	r2,-4(fp)
   9d7dc:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   9d7e0:	e0bfff17 	ldw	r2,-4(fp)
   9d7e4:	10800104 	addi	r2,r2,4
   9d7e8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9d7ec:	0005303a 	rdctl	r2,status
   9d7f0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9d7f4:	e0fffd17 	ldw	r3,-12(fp)
   9d7f8:	00bfff84 	movi	r2,-2
   9d7fc:	1884703a 	and	r2,r3,r2
   9d800:	1001703a 	wrctl	status,r2
  
  return context;
   9d804:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   9d808:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   9d80c:	009e9880 	call	9e988 <alt_tick>
   9d810:	e0bffe17 	ldw	r2,-8(fp)
   9d814:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9d818:	e0bffc17 	ldw	r2,-16(fp)
   9d81c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   9d820:	e037883a 	mov	sp,fp
   9d824:	dfc00117 	ldw	ra,4(sp)
   9d828:	df000017 	ldw	fp,0(sp)
   9d82c:	dec00204 	addi	sp,sp,8
   9d830:	f800283a 	ret

0009d834 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   9d834:	defff804 	addi	sp,sp,-32
   9d838:	dfc00715 	stw	ra,28(sp)
   9d83c:	df000615 	stw	fp,24(sp)
   9d840:	df000604 	addi	fp,sp,24
   9d844:	e13ffc15 	stw	r4,-16(fp)
   9d848:	e17ffd15 	stw	r5,-12(fp)
   9d84c:	e1bffe15 	stw	r6,-8(fp)
   9d850:	e1ffff15 	stw	r7,-4(fp)
   9d854:	e0bfff17 	ldw	r2,-4(fp)
   9d858:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   9d85c:	008002b4 	movhi	r2,10
   9d860:	108e5904 	addi	r2,r2,14692
   9d864:	10800017 	ldw	r2,0(r2)
   9d868:	1004c03a 	cmpne	r2,r2,zero
   9d86c:	1000041e 	bne	r2,zero,9d880 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   9d870:	00c002b4 	movhi	r3,10
   9d874:	18ce5904 	addi	r3,r3,14692
   9d878:	e0bffb17 	ldw	r2,-20(fp)
   9d87c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   9d880:	e0bffc17 	ldw	r2,-16(fp)
   9d884:	10800104 	addi	r2,r2,4
   9d888:	1007883a 	mov	r3,r2
   9d88c:	008001c4 	movi	r2,7
   9d890:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   9d894:	d8000015 	stw	zero,0(sp)
   9d898:	e13ffd17 	ldw	r4,-12(fp)
   9d89c:	e17ffe17 	ldw	r5,-8(fp)
   9d8a0:	018002b4 	movhi	r6,10
   9d8a4:	31b5f104 	addi	r6,r6,-10300
   9d8a8:	e1fffc17 	ldw	r7,-16(fp)
   9d8ac:	009e1f00 	call	9e1f0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   9d8b0:	e037883a 	mov	sp,fp
   9d8b4:	dfc00117 	ldw	ra,4(sp)
   9d8b8:	df000017 	ldw	fp,0(sp)
   9d8bc:	dec00204 	addi	sp,sp,8
   9d8c0:	f800283a 	ret

0009d8c4 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   9d8c4:	defffc04 	addi	sp,sp,-16
   9d8c8:	df000315 	stw	fp,12(sp)
   9d8cc:	df000304 	addi	fp,sp,12
   9d8d0:	e13ffe15 	stw	r4,-8(fp)
   9d8d4:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   9d8d8:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   9d8dc:	e0bfff17 	ldw	r2,-4(fp)
   9d8e0:	1004c03a 	cmpne	r2,r2,zero
   9d8e4:	1000061e 	bne	r2,zero,9d900 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
   9d8e8:	e0bffe17 	ldw	r2,-8(fp)
   9d8ec:	1007883a 	mov	r3,r2
   9d8f0:	e0bffd03 	ldbu	r2,-12(fp)
   9d8f4:	10c4b03a 	or	r2,r2,r3
   9d8f8:	e0bffd05 	stb	r2,-12(fp)
   9d8fc:	00000806 	br	9d920 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
   9d900:	e0bffe17 	ldw	r2,-8(fp)
   9d904:	1007883a 	mov	r3,r2
   9d908:	e0bffd03 	ldbu	r2,-12(fp)
   9d90c:	10c4b03a 	or	r2,r2,r3
   9d910:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   9d914:	e0bffd03 	ldbu	r2,-12(fp)
   9d918:	10801014 	ori	r2,r2,64
   9d91c:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   9d920:	e0fffd03 	ldbu	r3,-12(fp)
   9d924:	00bfe004 	movi	r2,-128
   9d928:	1884b03a 	or	r2,r3,r2
   9d92c:	10803fcc 	andi	r2,r2,255
}
   9d930:	e037883a 	mov	sp,fp
   9d934:	df000017 	ldw	fp,0(sp)
   9d938:	dec00104 	addi	sp,sp,4
   9d93c:	f800283a 	ret

0009d940 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   9d940:	defffd04 	addi	sp,sp,-12
   9d944:	df000215 	stw	fp,8(sp)
   9d948:	df000204 	addi	fp,sp,8
   9d94c:	e13ffe15 	stw	r4,-8(fp)
   9d950:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   9d954:	e0bffe17 	ldw	r2,-8(fp)
   9d958:	10800a17 	ldw	r2,40(r2)
   9d95c:	e0ffff03 	ldbu	r3,-4(fp)
   9d960:	10c00025 	stbio	r3,0(r2)
}
   9d964:	e037883a 	mov	sp,fp
   9d968:	df000017 	ldw	fp,0(sp)
   9d96c:	dec00104 	addi	sp,sp,4
   9d970:	f800283a 	ret

0009d974 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   9d974:	defffe04 	addi	sp,sp,-8
   9d978:	df000115 	stw	fp,4(sp)
   9d97c:	df000104 	addi	fp,sp,4
   9d980:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   9d984:	e0bfff17 	ldw	r2,-4(fp)
   9d988:	10800a17 	ldw	r2,40(r2)
   9d98c:	1007883a 	mov	r3,r2
   9d990:	00800044 	movi	r2,1
   9d994:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   9d998:	e037883a 	mov	sp,fp
   9d99c:	df000017 	ldw	fp,0(sp)
   9d9a0:	dec00104 	addi	sp,sp,4
   9d9a4:	f800283a 	ret

0009d9a8 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   9d9a8:	defffc04 	addi	sp,sp,-16
   9d9ac:	dfc00315 	stw	ra,12(sp)
   9d9b0:	df000215 	stw	fp,8(sp)
   9d9b4:	df000204 	addi	fp,sp,8
   9d9b8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   9d9bc:	e13fff17 	ldw	r4,-4(fp)
   9d9c0:	014002b4 	movhi	r5,10
   9d9c4:	29472604 	addi	r5,r5,7320
   9d9c8:	009e1400 	call	9e140 <alt_find_dev>
   9d9cc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   9d9d0:	e0bffe17 	ldw	r2,-8(fp)
}
   9d9d4:	e037883a 	mov	sp,fp
   9d9d8:	dfc00117 	ldw	ra,4(sp)
   9d9dc:	df000017 	ldw	fp,0(sp)
   9d9e0:	dec00204 	addi	sp,sp,8
   9d9e4:	f800283a 	ret

0009d9e8 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   9d9e8:	defffb04 	addi	sp,sp,-20
   9d9ec:	df000415 	stw	fp,16(sp)
   9d9f0:	df000404 	addi	fp,sp,16
   9d9f4:	e13ffd15 	stw	r4,-12(fp)
   9d9f8:	e17ffe15 	stw	r5,-8(fp)
   9d9fc:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   9da00:	e03ffc15 	stw	zero,-16(fp)
   9da04:	00000f06 	br	9da44 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   9da08:	e0bffd17 	ldw	r2,-12(fp)
   9da0c:	10800a17 	ldw	r2,40(r2)
   9da10:	11000044 	addi	r4,r2,1
   9da14:	e0fffc17 	ldw	r3,-16(fp)
   9da18:	e0bffe17 	ldw	r2,-8(fp)
   9da1c:	1885883a 	add	r2,r3,r2
   9da20:	10800003 	ldbu	r2,0(r2)
   9da24:	10c03fcc 	andi	r3,r2,255
   9da28:	18c0201c 	xori	r3,r3,128
   9da2c:	18ffe004 	addi	r3,r3,-128
   9da30:	2005883a 	mov	r2,r4
   9da34:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   9da38:	e0bffc17 	ldw	r2,-16(fp)
   9da3c:	10800044 	addi	r2,r2,1
   9da40:	e0bffc15 	stw	r2,-16(fp)
   9da44:	e0fffc17 	ldw	r3,-16(fp)
   9da48:	e0bfff17 	ldw	r2,-4(fp)
   9da4c:	18bfee36 	bltu	r3,r2,9da08 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   9da50:	e037883a 	mov	sp,fp
   9da54:	df000017 	ldw	fp,0(sp)
   9da58:	dec00104 	addi	sp,sp,4
   9da5c:	f800283a 	ret

0009da60 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   9da60:	defffd04 	addi	sp,sp,-12
   9da64:	df000215 	stw	fp,8(sp)
   9da68:	df000204 	addi	fp,sp,8
   9da6c:	e13ffe15 	stw	r4,-8(fp)
   9da70:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   9da74:	00000d06 	br	9daac <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   9da78:	e0bffe17 	ldw	r2,-8(fp)
   9da7c:	10800a17 	ldw	r2,40(r2)
   9da80:	11000044 	addi	r4,r2,1
   9da84:	e0bfff17 	ldw	r2,-4(fp)
   9da88:	10800003 	ldbu	r2,0(r2)
   9da8c:	10c03fcc 	andi	r3,r2,255
   9da90:	18c0201c 	xori	r3,r3,128
   9da94:	18ffe004 	addi	r3,r3,-128
   9da98:	2005883a 	mov	r2,r4
   9da9c:	10c00025 	stbio	r3,0(r2)
		++ptr;
   9daa0:	e0bfff17 	ldw	r2,-4(fp)
   9daa4:	10800044 	addi	r2,r2,1
   9daa8:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   9daac:	e0bfff17 	ldw	r2,-4(fp)
   9dab0:	10800003 	ldbu	r2,0(r2)
   9dab4:	10803fcc 	andi	r2,r2,255
   9dab8:	1080201c 	xori	r2,r2,128
   9dabc:	10bfe004 	addi	r2,r2,-128
   9dac0:	1004c03a 	cmpne	r2,r2,zero
   9dac4:	103fec1e 	bne	r2,zero,9da78 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   9dac8:	e037883a 	mov	sp,fp
   9dacc:	df000017 	ldw	fp,0(sp)
   9dad0:	dec00104 	addi	sp,sp,4
   9dad4:	f800283a 	ret

0009dad8 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   9dad8:	defffb04 	addi	sp,sp,-20
   9dadc:	dfc00415 	stw	ra,16(sp)
   9dae0:	df000315 	stw	fp,12(sp)
   9dae4:	df000304 	addi	fp,sp,12
   9dae8:	e13ffd15 	stw	r4,-12(fp)
   9daec:	e17ffe15 	stw	r5,-8(fp)
   9daf0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   9daf4:	e0bffd17 	ldw	r2,-12(fp)
   9daf8:	10800017 	ldw	r2,0(r2)
   9dafc:	1009883a 	mov	r4,r2
   9db00:	e1bfff17 	ldw	r6,-4(fp)
   9db04:	e17ffe17 	ldw	r5,-8(fp)
   9db08:	009d9e80 	call	9d9e8 <alt_up_character_lcd_write>
	return 0;
   9db0c:	0005883a 	mov	r2,zero
}
   9db10:	e037883a 	mov	sp,fp
   9db14:	dfc00117 	ldw	ra,4(sp)
   9db18:	df000017 	ldw	fp,0(sp)
   9db1c:	dec00204 	addi	sp,sp,8
   9db20:	f800283a 	ret

0009db24 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   9db24:	defff904 	addi	sp,sp,-28
   9db28:	dfc00615 	stw	ra,24(sp)
   9db2c:	df000515 	stw	fp,20(sp)
   9db30:	df000504 	addi	fp,sp,20
   9db34:	e13ffc15 	stw	r4,-16(fp)
   9db38:	e17ffd15 	stw	r5,-12(fp)
   9db3c:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   9db40:	e0bffd17 	ldw	r2,-12(fp)
   9db44:	10800a28 	cmpgeui	r2,r2,40
   9db48:	1000031e 	bne	r2,zero,9db58 <alt_up_character_lcd_set_cursor_pos+0x34>
   9db4c:	e0bffe17 	ldw	r2,-8(fp)
   9db50:	108000b0 	cmpltui	r2,r2,2
   9db54:	1000031e 	bne	r2,zero,9db64 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
   9db58:	00bfffc4 	movi	r2,-1
   9db5c:	e0bfff15 	stw	r2,-4(fp)
   9db60:	00000806 	br	9db84 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   9db64:	e13ffd17 	ldw	r4,-12(fp)
   9db68:	e17ffe17 	ldw	r5,-8(fp)
   9db6c:	009d8c40 	call	9d8c4 <get_DDRAM_addr>
   9db70:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   9db74:	e17ffb03 	ldbu	r5,-20(fp)
   9db78:	e13ffc17 	ldw	r4,-16(fp)
   9db7c:	009d9400 	call	9d940 <alt_up_character_lcd_send_cmd>
	return 0;
   9db80:	e03fff15 	stw	zero,-4(fp)
   9db84:	e0bfff17 	ldw	r2,-4(fp)
}
   9db88:	e037883a 	mov	sp,fp
   9db8c:	dfc00117 	ldw	ra,4(sp)
   9db90:	df000017 	ldw	fp,0(sp)
   9db94:	dec00204 	addi	sp,sp,8
   9db98:	f800283a 	ret

0009db9c <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   9db9c:	defff904 	addi	sp,sp,-28
   9dba0:	dfc00615 	stw	ra,24(sp)
   9dba4:	df000515 	stw	fp,20(sp)
   9dba8:	df000504 	addi	fp,sp,20
   9dbac:	e13ffc15 	stw	r4,-16(fp)
   9dbb0:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
   9dbb4:	e0bffd17 	ldw	r2,-12(fp)
   9dbb8:	1005003a 	cmpeq	r2,r2,zero
   9dbbc:	10001e1e 	bne	r2,zero,9dc38 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
   9dbc0:	e0bffd17 	ldw	r2,-12(fp)
   9dbc4:	10800050 	cmplti	r2,r2,1
   9dbc8:	1000031e 	bne	r2,zero,9dbd8 <alt_up_character_lcd_shift_cursor+0x3c>
   9dbcc:	00800504 	movi	r2,20
   9dbd0:	e0bfff05 	stb	r2,-4(fp)
   9dbd4:	00000206 	br	9dbe0 <alt_up_character_lcd_shift_cursor+0x44>
   9dbd8:	00c00404 	movi	r3,16
   9dbdc:	e0ffff05 	stb	r3,-4(fp)
   9dbe0:	e0bfff03 	ldbu	r2,-4(fp)
   9dbe4:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
   9dbe8:	e0fffd17 	ldw	r3,-12(fp)
   9dbec:	e0fffe15 	stw	r3,-8(fp)
   9dbf0:	e0fffe17 	ldw	r3,-8(fp)
   9dbf4:	1804403a 	cmpge	r2,r3,zero
   9dbf8:	1000031e 	bne	r2,zero,9dc08 <alt_up_character_lcd_shift_cursor+0x6c>
   9dbfc:	e0bffe17 	ldw	r2,-8(fp)
   9dc00:	0085c83a 	sub	r2,zero,r2
   9dc04:	e0bffe15 	stw	r2,-8(fp)
   9dc08:	e0fffe17 	ldw	r3,-8(fp)
   9dc0c:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
   9dc10:	00000306 	br	9dc20 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   9dc14:	e17ffb43 	ldbu	r5,-19(fp)
   9dc18:	e13ffc17 	ldw	r4,-16(fp)
   9dc1c:	009d9400 	call	9d940 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   9dc20:	e0bffb03 	ldbu	r2,-20(fp)
   9dc24:	10bfffc4 	addi	r2,r2,-1
   9dc28:	e0bffb05 	stb	r2,-20(fp)
   9dc2c:	e0bffb03 	ldbu	r2,-20(fp)
   9dc30:	10803fd8 	cmpnei	r2,r2,255
   9dc34:	103ff71e 	bne	r2,zero,9dc14 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   9dc38:	e037883a 	mov	sp,fp
   9dc3c:	dfc00117 	ldw	ra,4(sp)
   9dc40:	df000017 	ldw	fp,0(sp)
   9dc44:	dec00204 	addi	sp,sp,8
   9dc48:	f800283a 	ret

0009dc4c <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   9dc4c:	defff904 	addi	sp,sp,-28
   9dc50:	dfc00615 	stw	ra,24(sp)
   9dc54:	df000515 	stw	fp,20(sp)
   9dc58:	df000504 	addi	fp,sp,20
   9dc5c:	e13ffc15 	stw	r4,-16(fp)
   9dc60:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
   9dc64:	e0bffd17 	ldw	r2,-12(fp)
   9dc68:	1005003a 	cmpeq	r2,r2,zero
   9dc6c:	10001e1e 	bne	r2,zero,9dce8 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
   9dc70:	e0bffd17 	ldw	r2,-12(fp)
   9dc74:	10800050 	cmplti	r2,r2,1
   9dc78:	1000031e 	bne	r2,zero,9dc88 <alt_up_character_lcd_shift_display+0x3c>
   9dc7c:	00800704 	movi	r2,28
   9dc80:	e0bfff05 	stb	r2,-4(fp)
   9dc84:	00000206 	br	9dc90 <alt_up_character_lcd_shift_display+0x44>
   9dc88:	00c00604 	movi	r3,24
   9dc8c:	e0ffff05 	stb	r3,-4(fp)
   9dc90:	e0bfff03 	ldbu	r2,-4(fp)
   9dc94:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
   9dc98:	e0fffd17 	ldw	r3,-12(fp)
   9dc9c:	e0fffe15 	stw	r3,-8(fp)
   9dca0:	e0fffe17 	ldw	r3,-8(fp)
   9dca4:	1804403a 	cmpge	r2,r3,zero
   9dca8:	1000031e 	bne	r2,zero,9dcb8 <alt_up_character_lcd_shift_display+0x6c>
   9dcac:	e0bffe17 	ldw	r2,-8(fp)
   9dcb0:	0085c83a 	sub	r2,zero,r2
   9dcb4:	e0bffe15 	stw	r2,-8(fp)
   9dcb8:	e0fffe17 	ldw	r3,-8(fp)
   9dcbc:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
   9dcc0:	00000306 	br	9dcd0 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   9dcc4:	e17ffb43 	ldbu	r5,-19(fp)
   9dcc8:	e13ffc17 	ldw	r4,-16(fp)
   9dccc:	009d9400 	call	9d940 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   9dcd0:	e0bffb03 	ldbu	r2,-20(fp)
   9dcd4:	10bfffc4 	addi	r2,r2,-1
   9dcd8:	e0bffb05 	stb	r2,-20(fp)
   9dcdc:	e0bffb03 	ldbu	r2,-20(fp)
   9dce0:	10803fd8 	cmpnei	r2,r2,255
   9dce4:	103ff71e 	bne	r2,zero,9dcc4 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   9dce8:	e037883a 	mov	sp,fp
   9dcec:	dfc00117 	ldw	ra,4(sp)
   9dcf0:	df000017 	ldw	fp,0(sp)
   9dcf4:	dec00204 	addi	sp,sp,8
   9dcf8:	f800283a 	ret

0009dcfc <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   9dcfc:	defff904 	addi	sp,sp,-28
   9dd00:	dfc00615 	stw	ra,24(sp)
   9dd04:	df000515 	stw	fp,20(sp)
   9dd08:	df000504 	addi	fp,sp,20
   9dd0c:	e13ffc15 	stw	r4,-16(fp)
   9dd10:	e17ffd15 	stw	r5,-12(fp)
   9dd14:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   9dd18:	e0bffd17 	ldw	r2,-12(fp)
   9dd1c:	10800a28 	cmpgeui	r2,r2,40
   9dd20:	1000031e 	bne	r2,zero,9dd30 <alt_up_character_lcd_erase_pos+0x34>
   9dd24:	e0bffe17 	ldw	r2,-8(fp)
   9dd28:	108000b0 	cmpltui	r2,r2,2
   9dd2c:	1000031e 	bne	r2,zero,9dd3c <alt_up_character_lcd_erase_pos+0x40>
		return -1;
   9dd30:	00bfffc4 	movi	r2,-1
   9dd34:	e0bfff15 	stw	r2,-4(fp)
   9dd38:	00000e06 	br	9dd74 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   9dd3c:	e13ffd17 	ldw	r4,-12(fp)
   9dd40:	e17ffe17 	ldw	r5,-8(fp)
   9dd44:	009d8c40 	call	9d8c4 <get_DDRAM_addr>
   9dd48:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   9dd4c:	e17ffb03 	ldbu	r5,-20(fp)
   9dd50:	e13ffc17 	ldw	r4,-16(fp)
   9dd54:	009d9400 	call	9d940 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   9dd58:	e0bffc17 	ldw	r2,-16(fp)
   9dd5c:	10800a17 	ldw	r2,40(r2)
   9dd60:	10800044 	addi	r2,r2,1
   9dd64:	1007883a 	mov	r3,r2
   9dd68:	00800084 	movi	r2,2
   9dd6c:	18800025 	stbio	r2,0(r3)
	return 0;
   9dd70:	e03fff15 	stw	zero,-4(fp)
   9dd74:	e0bfff17 	ldw	r2,-4(fp)
}
   9dd78:	e037883a 	mov	sp,fp
   9dd7c:	dfc00117 	ldw	ra,4(sp)
   9dd80:	df000017 	ldw	fp,0(sp)
   9dd84:	dec00204 	addi	sp,sp,8
   9dd88:	f800283a 	ret

0009dd8c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   9dd8c:	defffd04 	addi	sp,sp,-12
   9dd90:	dfc00215 	stw	ra,8(sp)
   9dd94:	df000115 	stw	fp,4(sp)
   9dd98:	df000104 	addi	fp,sp,4
   9dd9c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   9dda0:	e13fff17 	ldw	r4,-4(fp)
   9dda4:	01400304 	movi	r5,12
   9dda8:	009d9400 	call	9d940 <alt_up_character_lcd_send_cmd>
}
   9ddac:	e037883a 	mov	sp,fp
   9ddb0:	dfc00117 	ldw	ra,4(sp)
   9ddb4:	df000017 	ldw	fp,0(sp)
   9ddb8:	dec00204 	addi	sp,sp,8
   9ddbc:	f800283a 	ret

0009ddc0 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   9ddc0:	defffd04 	addi	sp,sp,-12
   9ddc4:	dfc00215 	stw	ra,8(sp)
   9ddc8:	df000115 	stw	fp,4(sp)
   9ddcc:	df000104 	addi	fp,sp,4
   9ddd0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   9ddd4:	e13fff17 	ldw	r4,-4(fp)
   9ddd8:	014003c4 	movi	r5,15
   9dddc:	009d9400 	call	9d940 <alt_up_character_lcd_send_cmd>
}
   9dde0:	e037883a 	mov	sp,fp
   9dde4:	dfc00117 	ldw	ra,4(sp)
   9dde8:	df000017 	ldw	fp,0(sp)
   9ddec:	dec00204 	addi	sp,sp,8
   9ddf0:	f800283a 	ret

0009ddf4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   9ddf4:	defff404 	addi	sp,sp,-48
   9ddf8:	df000b15 	stw	fp,44(sp)
   9ddfc:	df000b04 	addi	fp,sp,44
   9de00:	e13ffb15 	stw	r4,-20(fp)
   9de04:	e17ffc15 	stw	r5,-16(fp)
   9de08:	e1bffd15 	stw	r6,-12(fp)
   9de0c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   9de10:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   9de14:	008002b4 	movhi	r2,10
   9de18:	108e5904 	addi	r2,r2,14692
   9de1c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   9de20:	1005003a 	cmpeq	r2,r2,zero
   9de24:	1000411e 	bne	r2,zero,9df2c <alt_alarm_start+0x138>
  {
    if (alarm)
   9de28:	e0bffb17 	ldw	r2,-20(fp)
   9de2c:	1005003a 	cmpeq	r2,r2,zero
   9de30:	10003b1e 	bne	r2,zero,9df20 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   9de34:	e0fffb17 	ldw	r3,-20(fp)
   9de38:	e0bffd17 	ldw	r2,-12(fp)
   9de3c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   9de40:	e0fffb17 	ldw	r3,-20(fp)
   9de44:	e0bffe17 	ldw	r2,-8(fp)
   9de48:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9de4c:	0005303a 	rdctl	r2,status
   9de50:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9de54:	e0fff817 	ldw	r3,-32(fp)
   9de58:	00bfff84 	movi	r2,-2
   9de5c:	1884703a 	and	r2,r3,r2
   9de60:	1001703a 	wrctl	status,r2
  
  return context;
   9de64:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   9de68:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   9de6c:	008002b4 	movhi	r2,10
   9de70:	108e5a04 	addi	r2,r2,14696
   9de74:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   9de78:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   9de7c:	e0fffc17 	ldw	r3,-16(fp)
   9de80:	e0bff917 	ldw	r2,-28(fp)
   9de84:	1885883a 	add	r2,r3,r2
   9de88:	10c00044 	addi	r3,r2,1
   9de8c:	e0bffb17 	ldw	r2,-20(fp)
   9de90:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   9de94:	e0bffb17 	ldw	r2,-20(fp)
   9de98:	10c00217 	ldw	r3,8(r2)
   9de9c:	e0bff917 	ldw	r2,-28(fp)
   9dea0:	1880042e 	bgeu	r3,r2,9deb4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   9dea4:	e0fffb17 	ldw	r3,-20(fp)
   9dea8:	00800044 	movi	r2,1
   9deac:	18800405 	stb	r2,16(r3)
   9deb0:	00000206 	br	9debc <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   9deb4:	e0bffb17 	ldw	r2,-20(fp)
   9deb8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   9debc:	e0fffb17 	ldw	r3,-20(fp)
   9dec0:	008002b4 	movhi	r2,10
   9dec4:	10874b04 	addi	r2,r2,7468
   9dec8:	e0bff615 	stw	r2,-40(fp)
   9decc:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   9ded0:	e0fff717 	ldw	r3,-36(fp)
   9ded4:	e0bff617 	ldw	r2,-40(fp)
   9ded8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   9dedc:	e0bff617 	ldw	r2,-40(fp)
   9dee0:	10c00017 	ldw	r3,0(r2)
   9dee4:	e0bff717 	ldw	r2,-36(fp)
   9dee8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   9deec:	e0bff617 	ldw	r2,-40(fp)
   9def0:	10c00017 	ldw	r3,0(r2)
   9def4:	e0bff717 	ldw	r2,-36(fp)
   9def8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   9defc:	e0fff617 	ldw	r3,-40(fp)
   9df00:	e0bff717 	ldw	r2,-36(fp)
   9df04:	18800015 	stw	r2,0(r3)
   9df08:	e0bffa17 	ldw	r2,-24(fp)
   9df0c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9df10:	e0bff517 	ldw	r2,-44(fp)
   9df14:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   9df18:	e03fff15 	stw	zero,-4(fp)
   9df1c:	00000506 	br	9df34 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   9df20:	00bffa84 	movi	r2,-22
   9df24:	e0bfff15 	stw	r2,-4(fp)
   9df28:	00000206 	br	9df34 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   9df2c:	00bfde84 	movi	r2,-134
   9df30:	e0bfff15 	stw	r2,-4(fp)
   9df34:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   9df38:	e037883a 	mov	sp,fp
   9df3c:	df000017 	ldw	fp,0(sp)
   9df40:	dec00104 	addi	sp,sp,4
   9df44:	f800283a 	ret

0009df48 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   9df48:	deffff04 	addi	sp,sp,-4
   9df4c:	df000015 	stw	fp,0(sp)
   9df50:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   9df54:	e037883a 	mov	sp,fp
   9df58:	df000017 	ldw	fp,0(sp)
   9df5c:	dec00104 	addi	sp,sp,4
   9df60:	f800283a 	ret

0009df64 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   9df64:	defff904 	addi	sp,sp,-28
   9df68:	dfc00615 	stw	ra,24(sp)
   9df6c:	df000515 	stw	fp,20(sp)
   9df70:	df000504 	addi	fp,sp,20
   9df74:	e13ffd15 	stw	r4,-12(fp)
   9df78:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   9df7c:	e0bffd17 	ldw	r2,-12(fp)
   9df80:	1005003a 	cmpeq	r2,r2,zero
   9df84:	1000041e 	bne	r2,zero,9df98 <alt_dev_llist_insert+0x34>
   9df88:	e0bffd17 	ldw	r2,-12(fp)
   9df8c:	10800217 	ldw	r2,8(r2)
   9df90:	1004c03a 	cmpne	r2,r2,zero
   9df94:	1000071e 	bne	r2,zero,9dfb4 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   9df98:	009e0180 	call	9e018 <alt_get_errno>
   9df9c:	1007883a 	mov	r3,r2
   9dfa0:	00800584 	movi	r2,22
   9dfa4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   9dfa8:	00bffa84 	movi	r2,-22
   9dfac:	e0bfff15 	stw	r2,-4(fp)
   9dfb0:	00001306 	br	9e000 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   9dfb4:	e0fffd17 	ldw	r3,-12(fp)
   9dfb8:	e0bffe17 	ldw	r2,-8(fp)
   9dfbc:	e0bffb15 	stw	r2,-20(fp)
   9dfc0:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   9dfc4:	e0fffc17 	ldw	r3,-16(fp)
   9dfc8:	e0bffb17 	ldw	r2,-20(fp)
   9dfcc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   9dfd0:	e0bffb17 	ldw	r2,-20(fp)
   9dfd4:	10c00017 	ldw	r3,0(r2)
   9dfd8:	e0bffc17 	ldw	r2,-16(fp)
   9dfdc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   9dfe0:	e0bffb17 	ldw	r2,-20(fp)
   9dfe4:	10c00017 	ldw	r3,0(r2)
   9dfe8:	e0bffc17 	ldw	r2,-16(fp)
   9dfec:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   9dff0:	e0fffb17 	ldw	r3,-20(fp)
   9dff4:	e0bffc17 	ldw	r2,-16(fp)
   9dff8:	18800015 	stw	r2,0(r3)

  return 0;  
   9dffc:	e03fff15 	stw	zero,-4(fp)
   9e000:	e0bfff17 	ldw	r2,-4(fp)
}
   9e004:	e037883a 	mov	sp,fp
   9e008:	dfc00117 	ldw	ra,4(sp)
   9e00c:	df000017 	ldw	fp,0(sp)
   9e010:	dec00204 	addi	sp,sp,8
   9e014:	f800283a 	ret

0009e018 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   9e018:	defffd04 	addi	sp,sp,-12
   9e01c:	dfc00215 	stw	ra,8(sp)
   9e020:	df000115 	stw	fp,4(sp)
   9e024:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   9e028:	008002b4 	movhi	r2,10
   9e02c:	10872904 	addi	r2,r2,7332
   9e030:	10800017 	ldw	r2,0(r2)
   9e034:	1005003a 	cmpeq	r2,r2,zero
   9e038:	1000061e 	bne	r2,zero,9e054 <alt_get_errno+0x3c>
   9e03c:	008002b4 	movhi	r2,10
   9e040:	10872904 	addi	r2,r2,7332
   9e044:	10800017 	ldw	r2,0(r2)
   9e048:	103ee83a 	callr	r2
   9e04c:	e0bfff15 	stw	r2,-4(fp)
   9e050:	00000306 	br	9e060 <alt_get_errno+0x48>
   9e054:	008002b4 	movhi	r2,10
   9e058:	108e3b04 	addi	r2,r2,14572
   9e05c:	e0bfff15 	stw	r2,-4(fp)
   9e060:	e0bfff17 	ldw	r2,-4(fp)
}
   9e064:	e037883a 	mov	sp,fp
   9e068:	dfc00117 	ldw	ra,4(sp)
   9e06c:	df000017 	ldw	fp,0(sp)
   9e070:	dec00204 	addi	sp,sp,8
   9e074:	f800283a 	ret

0009e078 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   9e078:	defffd04 	addi	sp,sp,-12
   9e07c:	dfc00215 	stw	ra,8(sp)
   9e080:	df000115 	stw	fp,4(sp)
   9e084:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   9e088:	00bfff04 	movi	r2,-4
   9e08c:	00c002b4 	movhi	r3,10
   9e090:	18fd9204 	addi	r3,r3,-2488
   9e094:	1885883a 	add	r2,r3,r2
   9e098:	e0bfff15 	stw	r2,-4(fp)
   9e09c:	00000606 	br	9e0b8 <_do_ctors+0x40>
        (*ctor) (); 
   9e0a0:	e0bfff17 	ldw	r2,-4(fp)
   9e0a4:	10800017 	ldw	r2,0(r2)
   9e0a8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   9e0ac:	e0bfff17 	ldw	r2,-4(fp)
   9e0b0:	10bfff04 	addi	r2,r2,-4
   9e0b4:	e0bfff15 	stw	r2,-4(fp)
   9e0b8:	e0ffff17 	ldw	r3,-4(fp)
   9e0bc:	008002b4 	movhi	r2,10
   9e0c0:	10bd9104 	addi	r2,r2,-2492
   9e0c4:	18bff62e 	bgeu	r3,r2,9e0a0 <_do_ctors+0x28>
        (*ctor) (); 
}
   9e0c8:	e037883a 	mov	sp,fp
   9e0cc:	dfc00117 	ldw	ra,4(sp)
   9e0d0:	df000017 	ldw	fp,0(sp)
   9e0d4:	dec00204 	addi	sp,sp,8
   9e0d8:	f800283a 	ret

0009e0dc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   9e0dc:	defffd04 	addi	sp,sp,-12
   9e0e0:	dfc00215 	stw	ra,8(sp)
   9e0e4:	df000115 	stw	fp,4(sp)
   9e0e8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   9e0ec:	00bfff04 	movi	r2,-4
   9e0f0:	00c002b4 	movhi	r3,10
   9e0f4:	18fd9204 	addi	r3,r3,-2488
   9e0f8:	1885883a 	add	r2,r3,r2
   9e0fc:	e0bfff15 	stw	r2,-4(fp)
   9e100:	00000606 	br	9e11c <_do_dtors+0x40>
        (*dtor) (); 
   9e104:	e0bfff17 	ldw	r2,-4(fp)
   9e108:	10800017 	ldw	r2,0(r2)
   9e10c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   9e110:	e0bfff17 	ldw	r2,-4(fp)
   9e114:	10bfff04 	addi	r2,r2,-4
   9e118:	e0bfff15 	stw	r2,-4(fp)
   9e11c:	e0ffff17 	ldw	r3,-4(fp)
   9e120:	008002b4 	movhi	r2,10
   9e124:	10bd9204 	addi	r2,r2,-2488
   9e128:	18bff62e 	bgeu	r3,r2,9e104 <_do_dtors+0x28>
        (*dtor) (); 
}
   9e12c:	e037883a 	mov	sp,fp
   9e130:	dfc00117 	ldw	ra,4(sp)
   9e134:	df000017 	ldw	fp,0(sp)
   9e138:	dec00204 	addi	sp,sp,8
   9e13c:	f800283a 	ret

0009e140 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   9e140:	defff904 	addi	sp,sp,-28
   9e144:	dfc00615 	stw	ra,24(sp)
   9e148:	df000515 	stw	fp,20(sp)
   9e14c:	df000504 	addi	fp,sp,20
   9e150:	e13ffd15 	stw	r4,-12(fp)
   9e154:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   9e158:	e0bffe17 	ldw	r2,-8(fp)
   9e15c:	10800017 	ldw	r2,0(r2)
   9e160:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   9e164:	e13ffd17 	ldw	r4,-12(fp)
   9e168:	0087b8c0 	call	87b8c <strlen>
   9e16c:	10800044 	addi	r2,r2,1
   9e170:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   9e174:	00000d06 	br	9e1ac <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   9e178:	e0bffc17 	ldw	r2,-16(fp)
   9e17c:	11000217 	ldw	r4,8(r2)
   9e180:	e1bffb17 	ldw	r6,-20(fp)
   9e184:	e17ffd17 	ldw	r5,-12(fp)
   9e188:	009f2100 	call	9f210 <memcmp>
   9e18c:	1004c03a 	cmpne	r2,r2,zero
   9e190:	1000031e 	bne	r2,zero,9e1a0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   9e194:	e0bffc17 	ldw	r2,-16(fp)
   9e198:	e0bfff15 	stw	r2,-4(fp)
   9e19c:	00000706 	br	9e1bc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   9e1a0:	e0bffc17 	ldw	r2,-16(fp)
   9e1a4:	10800017 	ldw	r2,0(r2)
   9e1a8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   9e1ac:	e0fffe17 	ldw	r3,-8(fp)
   9e1b0:	e0bffc17 	ldw	r2,-16(fp)
   9e1b4:	10fff01e 	bne	r2,r3,9e178 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   9e1b8:	e03fff15 	stw	zero,-4(fp)
   9e1bc:	e0bfff17 	ldw	r2,-4(fp)
}
   9e1c0:	e037883a 	mov	sp,fp
   9e1c4:	dfc00117 	ldw	ra,4(sp)
   9e1c8:	df000017 	ldw	fp,0(sp)
   9e1cc:	dec00204 	addi	sp,sp,8
   9e1d0:	f800283a 	ret

0009e1d4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   9e1d4:	deffff04 	addi	sp,sp,-4
   9e1d8:	df000015 	stw	fp,0(sp)
   9e1dc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   9e1e0:	e037883a 	mov	sp,fp
   9e1e4:	df000017 	ldw	fp,0(sp)
   9e1e8:	dec00104 	addi	sp,sp,4
   9e1ec:	f800283a 	ret

0009e1f0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   9e1f0:	defff904 	addi	sp,sp,-28
   9e1f4:	dfc00615 	stw	ra,24(sp)
   9e1f8:	df000515 	stw	fp,20(sp)
   9e1fc:	df000504 	addi	fp,sp,20
   9e200:	e13ffc15 	stw	r4,-16(fp)
   9e204:	e17ffd15 	stw	r5,-12(fp)
   9e208:	e1bffe15 	stw	r6,-8(fp)
   9e20c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   9e210:	e0800217 	ldw	r2,8(fp)
   9e214:	d8800015 	stw	r2,0(sp)
   9e218:	e13ffc17 	ldw	r4,-16(fp)
   9e21c:	e17ffd17 	ldw	r5,-12(fp)
   9e220:	e1bffe17 	ldw	r6,-8(fp)
   9e224:	e1ffff17 	ldw	r7,-4(fp)
   9e228:	009e3c40 	call	9e3c4 <alt_iic_isr_register>
}  
   9e22c:	e037883a 	mov	sp,fp
   9e230:	dfc00117 	ldw	ra,4(sp)
   9e234:	df000017 	ldw	fp,0(sp)
   9e238:	dec00204 	addi	sp,sp,8
   9e23c:	f800283a 	ret

0009e240 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   9e240:	defff904 	addi	sp,sp,-28
   9e244:	df000615 	stw	fp,24(sp)
   9e248:	df000604 	addi	fp,sp,24
   9e24c:	e13ffe15 	stw	r4,-8(fp)
   9e250:	e17fff15 	stw	r5,-4(fp)
   9e254:	e0bfff17 	ldw	r2,-4(fp)
   9e258:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9e25c:	0005303a 	rdctl	r2,status
   9e260:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9e264:	e0fffb17 	ldw	r3,-20(fp)
   9e268:	00bfff84 	movi	r2,-2
   9e26c:	1884703a 	and	r2,r3,r2
   9e270:	1001703a 	wrctl	status,r2
  
  return context;
   9e274:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   9e278:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   9e27c:	e0fffc17 	ldw	r3,-16(fp)
   9e280:	00800044 	movi	r2,1
   9e284:	10c4983a 	sll	r2,r2,r3
   9e288:	1007883a 	mov	r3,r2
   9e28c:	008002b4 	movhi	r2,10
   9e290:	108e3d04 	addi	r2,r2,14580
   9e294:	10800017 	ldw	r2,0(r2)
   9e298:	1886b03a 	or	r3,r3,r2
   9e29c:	008002b4 	movhi	r2,10
   9e2a0:	108e3d04 	addi	r2,r2,14580
   9e2a4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   9e2a8:	008002b4 	movhi	r2,10
   9e2ac:	108e3d04 	addi	r2,r2,14580
   9e2b0:	10800017 	ldw	r2,0(r2)
   9e2b4:	100170fa 	wrctl	ienable,r2
   9e2b8:	e0bffd17 	ldw	r2,-12(fp)
   9e2bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9e2c0:	e0bffa17 	ldw	r2,-24(fp)
   9e2c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   9e2c8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   9e2cc:	e037883a 	mov	sp,fp
   9e2d0:	df000017 	ldw	fp,0(sp)
   9e2d4:	dec00104 	addi	sp,sp,4
   9e2d8:	f800283a 	ret

0009e2dc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   9e2dc:	defff904 	addi	sp,sp,-28
   9e2e0:	df000615 	stw	fp,24(sp)
   9e2e4:	df000604 	addi	fp,sp,24
   9e2e8:	e13ffe15 	stw	r4,-8(fp)
   9e2ec:	e17fff15 	stw	r5,-4(fp)
   9e2f0:	e0bfff17 	ldw	r2,-4(fp)
   9e2f4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9e2f8:	0005303a 	rdctl	r2,status
   9e2fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9e300:	e0fffb17 	ldw	r3,-20(fp)
   9e304:	00bfff84 	movi	r2,-2
   9e308:	1884703a 	and	r2,r3,r2
   9e30c:	1001703a 	wrctl	status,r2
  
  return context;
   9e310:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   9e314:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   9e318:	e0fffc17 	ldw	r3,-16(fp)
   9e31c:	00800044 	movi	r2,1
   9e320:	10c4983a 	sll	r2,r2,r3
   9e324:	0084303a 	nor	r2,zero,r2
   9e328:	1007883a 	mov	r3,r2
   9e32c:	008002b4 	movhi	r2,10
   9e330:	108e3d04 	addi	r2,r2,14580
   9e334:	10800017 	ldw	r2,0(r2)
   9e338:	1886703a 	and	r3,r3,r2
   9e33c:	008002b4 	movhi	r2,10
   9e340:	108e3d04 	addi	r2,r2,14580
   9e344:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   9e348:	008002b4 	movhi	r2,10
   9e34c:	108e3d04 	addi	r2,r2,14580
   9e350:	10800017 	ldw	r2,0(r2)
   9e354:	100170fa 	wrctl	ienable,r2
   9e358:	e0bffd17 	ldw	r2,-12(fp)
   9e35c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9e360:	e0bffa17 	ldw	r2,-24(fp)
   9e364:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   9e368:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   9e36c:	e037883a 	mov	sp,fp
   9e370:	df000017 	ldw	fp,0(sp)
   9e374:	dec00104 	addi	sp,sp,4
   9e378:	f800283a 	ret

0009e37c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   9e37c:	defffc04 	addi	sp,sp,-16
   9e380:	df000315 	stw	fp,12(sp)
   9e384:	df000304 	addi	fp,sp,12
   9e388:	e13ffe15 	stw	r4,-8(fp)
   9e38c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   9e390:	000530fa 	rdctl	r2,ienable
   9e394:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   9e398:	e0ffff17 	ldw	r3,-4(fp)
   9e39c:	00800044 	movi	r2,1
   9e3a0:	10c4983a 	sll	r2,r2,r3
   9e3a4:	1007883a 	mov	r3,r2
   9e3a8:	e0bffd17 	ldw	r2,-12(fp)
   9e3ac:	1884703a 	and	r2,r3,r2
   9e3b0:	1004c03a 	cmpne	r2,r2,zero
}
   9e3b4:	e037883a 	mov	sp,fp
   9e3b8:	df000017 	ldw	fp,0(sp)
   9e3bc:	dec00104 	addi	sp,sp,4
   9e3c0:	f800283a 	ret

0009e3c4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   9e3c4:	defff404 	addi	sp,sp,-48
   9e3c8:	dfc00b15 	stw	ra,44(sp)
   9e3cc:	df000a15 	stw	fp,40(sp)
   9e3d0:	df000a04 	addi	fp,sp,40
   9e3d4:	e13ffb15 	stw	r4,-20(fp)
   9e3d8:	e17ffc15 	stw	r5,-16(fp)
   9e3dc:	e1bffd15 	stw	r6,-12(fp)
   9e3e0:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   9e3e4:	00bffa84 	movi	r2,-22
   9e3e8:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   9e3ec:	e0bffc17 	ldw	r2,-16(fp)
   9e3f0:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   9e3f4:	e0bff917 	ldw	r2,-28(fp)
   9e3f8:	10800808 	cmpgei	r2,r2,32
   9e3fc:	1000291e 	bne	r2,zero,9e4a4 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9e400:	0005303a 	rdctl	r2,status
   9e404:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9e408:	e0fff717 	ldw	r3,-36(fp)
   9e40c:	00bfff84 	movi	r2,-2
   9e410:	1884703a 	and	r2,r3,r2
   9e414:	1001703a 	wrctl	status,r2
  
  return context;
   9e418:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   9e41c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   9e420:	e0bff917 	ldw	r2,-28(fp)
   9e424:	00c00334 	movhi	r3,12
   9e428:	18e2ce04 	addi	r3,r3,-29896
   9e42c:	100490fa 	slli	r2,r2,3
   9e430:	10c7883a 	add	r3,r2,r3
   9e434:	e0bffd17 	ldw	r2,-12(fp)
   9e438:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   9e43c:	e0bff917 	ldw	r2,-28(fp)
   9e440:	00c00334 	movhi	r3,12
   9e444:	18e2ce04 	addi	r3,r3,-29896
   9e448:	100490fa 	slli	r2,r2,3
   9e44c:	10c5883a 	add	r2,r2,r3
   9e450:	10c00104 	addi	r3,r2,4
   9e454:	e0bffe17 	ldw	r2,-8(fp)
   9e458:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   9e45c:	e0bffd17 	ldw	r2,-12(fp)
   9e460:	1005003a 	cmpeq	r2,r2,zero
   9e464:	1000051e 	bne	r2,zero,9e47c <alt_iic_isr_register+0xb8>
   9e468:	e17ff917 	ldw	r5,-28(fp)
   9e46c:	e13ffb17 	ldw	r4,-20(fp)
   9e470:	009e2400 	call	9e240 <alt_ic_irq_enable>
   9e474:	e0bfff15 	stw	r2,-4(fp)
   9e478:	00000406 	br	9e48c <alt_iic_isr_register+0xc8>
   9e47c:	e17ff917 	ldw	r5,-28(fp)
   9e480:	e13ffb17 	ldw	r4,-20(fp)
   9e484:	009e2dc0 	call	9e2dc <alt_ic_irq_disable>
   9e488:	e0bfff15 	stw	r2,-4(fp)
   9e48c:	e0bfff17 	ldw	r2,-4(fp)
   9e490:	e0bffa15 	stw	r2,-24(fp)
   9e494:	e0bff817 	ldw	r2,-32(fp)
   9e498:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9e49c:	e0bff617 	ldw	r2,-40(fp)
   9e4a0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   9e4a4:	e0bffa17 	ldw	r2,-24(fp)
}
   9e4a8:	e037883a 	mov	sp,fp
   9e4ac:	dfc00117 	ldw	ra,4(sp)
   9e4b0:	df000017 	ldw	fp,0(sp)
   9e4b4:	dec00204 	addi	sp,sp,8
   9e4b8:	f800283a 	ret

0009e4bc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   9e4bc:	defff804 	addi	sp,sp,-32
   9e4c0:	dfc00715 	stw	ra,28(sp)
   9e4c4:	df000615 	stw	fp,24(sp)
   9e4c8:	dc000515 	stw	r16,20(sp)
   9e4cc:	df000504 	addi	fp,sp,20
   9e4d0:	e13ffc15 	stw	r4,-16(fp)
   9e4d4:	e17ffd15 	stw	r5,-12(fp)
   9e4d8:	e1bffe15 	stw	r6,-8(fp)
   9e4dc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   9e4e0:	e13ffd17 	ldw	r4,-12(fp)
   9e4e4:	e17ffe17 	ldw	r5,-8(fp)
   9e4e8:	e1bfff17 	ldw	r6,-4(fp)
   9e4ec:	009e7040 	call	9e704 <open>
   9e4f0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   9e4f4:	e0bffb17 	ldw	r2,-20(fp)
   9e4f8:	1004803a 	cmplt	r2,r2,zero
   9e4fc:	10001f1e 	bne	r2,zero,9e57c <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   9e500:	e13ffb17 	ldw	r4,-20(fp)
   9e504:	040002b4 	movhi	r16,10
   9e508:	84028c04 	addi	r16,r16,2608
   9e50c:	01400304 	movi	r5,12
   9e510:	00877e40 	call	877e4 <__mulsi3>
   9e514:	1405883a 	add	r2,r2,r16
   9e518:	10c00017 	ldw	r3,0(r2)
   9e51c:	e0bffc17 	ldw	r2,-16(fp)
   9e520:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   9e524:	e13ffb17 	ldw	r4,-20(fp)
   9e528:	040002b4 	movhi	r16,10
   9e52c:	84028c04 	addi	r16,r16,2608
   9e530:	01400304 	movi	r5,12
   9e534:	00877e40 	call	877e4 <__mulsi3>
   9e538:	1405883a 	add	r2,r2,r16
   9e53c:	10800104 	addi	r2,r2,4
   9e540:	10c00017 	ldw	r3,0(r2)
   9e544:	e0bffc17 	ldw	r2,-16(fp)
   9e548:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   9e54c:	e13ffb17 	ldw	r4,-20(fp)
   9e550:	040002b4 	movhi	r16,10
   9e554:	84028c04 	addi	r16,r16,2608
   9e558:	01400304 	movi	r5,12
   9e55c:	00877e40 	call	877e4 <__mulsi3>
   9e560:	1405883a 	add	r2,r2,r16
   9e564:	10800204 	addi	r2,r2,8
   9e568:	10c00017 	ldw	r3,0(r2)
   9e56c:	e0bffc17 	ldw	r2,-16(fp)
   9e570:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   9e574:	e13ffb17 	ldw	r4,-20(fp)
   9e578:	00920b40 	call	920b4 <alt_release_fd>
  }
} 
   9e57c:	e037883a 	mov	sp,fp
   9e580:	dfc00217 	ldw	ra,8(sp)
   9e584:	df000117 	ldw	fp,4(sp)
   9e588:	dc000017 	ldw	r16,0(sp)
   9e58c:	dec00304 	addi	sp,sp,12
   9e590:	f800283a 	ret

0009e594 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   9e594:	defffb04 	addi	sp,sp,-20
   9e598:	dfc00415 	stw	ra,16(sp)
   9e59c:	df000315 	stw	fp,12(sp)
   9e5a0:	df000304 	addi	fp,sp,12
   9e5a4:	e13ffd15 	stw	r4,-12(fp)
   9e5a8:	e17ffe15 	stw	r5,-8(fp)
   9e5ac:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   9e5b0:	010002b4 	movhi	r4,10
   9e5b4:	21028f04 	addi	r4,r4,2620
   9e5b8:	e17ffd17 	ldw	r5,-12(fp)
   9e5bc:	01800044 	movi	r6,1
   9e5c0:	01c07fc4 	movi	r7,511
   9e5c4:	009e4bc0 	call	9e4bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   9e5c8:	010002b4 	movhi	r4,10
   9e5cc:	21028c04 	addi	r4,r4,2608
   9e5d0:	e17ffe17 	ldw	r5,-8(fp)
   9e5d4:	000d883a 	mov	r6,zero
   9e5d8:	01c07fc4 	movi	r7,511
   9e5dc:	009e4bc0 	call	9e4bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   9e5e0:	010002b4 	movhi	r4,10
   9e5e4:	21029204 	addi	r4,r4,2632
   9e5e8:	e17fff17 	ldw	r5,-4(fp)
   9e5ec:	01800044 	movi	r6,1
   9e5f0:	01c07fc4 	movi	r7,511
   9e5f4:	009e4bc0 	call	9e4bc <alt_open_fd>
}  
   9e5f8:	e037883a 	mov	sp,fp
   9e5fc:	dfc00117 	ldw	ra,4(sp)
   9e600:	df000017 	ldw	fp,0(sp)
   9e604:	dec00204 	addi	sp,sp,8
   9e608:	f800283a 	ret

0009e60c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   9e60c:	defffa04 	addi	sp,sp,-24
   9e610:	dfc00515 	stw	ra,20(sp)
   9e614:	df000415 	stw	fp,16(sp)
   9e618:	dc000315 	stw	r16,12(sp)
   9e61c:	df000304 	addi	fp,sp,12
   9e620:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   9e624:	e0bffe17 	ldw	r2,-8(fp)
   9e628:	10800217 	ldw	r2,8(r2)
   9e62c:	10d00034 	orhi	r3,r2,16384
   9e630:	e0bffe17 	ldw	r2,-8(fp)
   9e634:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   9e638:	e03ffd15 	stw	zero,-12(fp)
   9e63c:	00002306 	br	9e6cc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   9e640:	e13ffd17 	ldw	r4,-12(fp)
   9e644:	040002b4 	movhi	r16,10
   9e648:	84028c04 	addi	r16,r16,2608
   9e64c:	01400304 	movi	r5,12
   9e650:	00877e40 	call	877e4 <__mulsi3>
   9e654:	1405883a 	add	r2,r2,r16
   9e658:	10c00017 	ldw	r3,0(r2)
   9e65c:	e0bffe17 	ldw	r2,-8(fp)
   9e660:	10800017 	ldw	r2,0(r2)
   9e664:	1880161e 	bne	r3,r2,9e6c0 <alt_file_locked+0xb4>
   9e668:	e13ffd17 	ldw	r4,-12(fp)
   9e66c:	040002b4 	movhi	r16,10
   9e670:	84028c04 	addi	r16,r16,2608
   9e674:	01400304 	movi	r5,12
   9e678:	00877e40 	call	877e4 <__mulsi3>
   9e67c:	1405883a 	add	r2,r2,r16
   9e680:	10800204 	addi	r2,r2,8
   9e684:	10800017 	ldw	r2,0(r2)
   9e688:	1004403a 	cmpge	r2,r2,zero
   9e68c:	10000c1e 	bne	r2,zero,9e6c0 <alt_file_locked+0xb4>
   9e690:	e13ffd17 	ldw	r4,-12(fp)
   9e694:	01400304 	movi	r5,12
   9e698:	00877e40 	call	877e4 <__mulsi3>
   9e69c:	1007883a 	mov	r3,r2
   9e6a0:	008002b4 	movhi	r2,10
   9e6a4:	10828c04 	addi	r2,r2,2608
   9e6a8:	1887883a 	add	r3,r3,r2
   9e6ac:	e0bffe17 	ldw	r2,-8(fp)
   9e6b0:	18800326 	beq	r3,r2,9e6c0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   9e6b4:	00bffcc4 	movi	r2,-13
   9e6b8:	e0bfff15 	stw	r2,-4(fp)
   9e6bc:	00000a06 	br	9e6e8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   9e6c0:	e0bffd17 	ldw	r2,-12(fp)
   9e6c4:	10800044 	addi	r2,r2,1
   9e6c8:	e0bffd15 	stw	r2,-12(fp)
   9e6cc:	008002b4 	movhi	r2,10
   9e6d0:	10872804 	addi	r2,r2,7328
   9e6d4:	10800017 	ldw	r2,0(r2)
   9e6d8:	1007883a 	mov	r3,r2
   9e6dc:	e0bffd17 	ldw	r2,-12(fp)
   9e6e0:	18bfd72e 	bgeu	r3,r2,9e640 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   9e6e4:	e03fff15 	stw	zero,-4(fp)
   9e6e8:	e0bfff17 	ldw	r2,-4(fp)
}
   9e6ec:	e037883a 	mov	sp,fp
   9e6f0:	dfc00217 	ldw	ra,8(sp)
   9e6f4:	df000117 	ldw	fp,4(sp)
   9e6f8:	dc000017 	ldw	r16,0(sp)
   9e6fc:	dec00304 	addi	sp,sp,12
   9e700:	f800283a 	ret

0009e704 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   9e704:	defff404 	addi	sp,sp,-48
   9e708:	dfc00b15 	stw	ra,44(sp)
   9e70c:	df000a15 	stw	fp,40(sp)
   9e710:	df000a04 	addi	fp,sp,40
   9e714:	e13ffb15 	stw	r4,-20(fp)
   9e718:	e17ffc15 	stw	r5,-16(fp)
   9e71c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   9e720:	00bfffc4 	movi	r2,-1
   9e724:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   9e728:	00bffb44 	movi	r2,-19
   9e72c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   9e730:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   9e734:	e13ffb17 	ldw	r4,-20(fp)
   9e738:	014002b4 	movhi	r5,10
   9e73c:	29472604 	addi	r5,r5,7320
   9e740:	009e1400 	call	9e140 <alt_find_dev>
   9e744:	e0bffa15 	stw	r2,-24(fp)
   9e748:	e0bffa17 	ldw	r2,-24(fp)
   9e74c:	1004c03a 	cmpne	r2,r2,zero
   9e750:	1000051e 	bne	r2,zero,9e768 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   9e754:	e13ffb17 	ldw	r4,-20(fp)
   9e758:	009efa00 	call	9efa0 <alt_find_file>
   9e75c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   9e760:	00800044 	movi	r2,1
   9e764:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   9e768:	e0bffa17 	ldw	r2,-24(fp)
   9e76c:	1005003a 	cmpeq	r2,r2,zero
   9e770:	1000311e 	bne	r2,zero,9e838 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   9e774:	e13ffa17 	ldw	r4,-24(fp)
   9e778:	009f0c00 	call	9f0c0 <alt_get_fd>
   9e77c:	e0bff815 	stw	r2,-32(fp)
   9e780:	e0bff817 	ldw	r2,-32(fp)
   9e784:	1004403a 	cmpge	r2,r2,zero
   9e788:	1000031e 	bne	r2,zero,9e798 <open+0x94>
    {
      status = index;
   9e78c:	e0bff817 	ldw	r2,-32(fp)
   9e790:	e0bff715 	stw	r2,-36(fp)
   9e794:	00002a06 	br	9e840 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   9e798:	e13ff817 	ldw	r4,-32(fp)
   9e79c:	01400304 	movi	r5,12
   9e7a0:	00877e40 	call	877e4 <__mulsi3>
   9e7a4:	1007883a 	mov	r3,r2
   9e7a8:	008002b4 	movhi	r2,10
   9e7ac:	10828c04 	addi	r2,r2,2608
   9e7b0:	1885883a 	add	r2,r3,r2
   9e7b4:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   9e7b8:	e0fffc17 	ldw	r3,-16(fp)
   9e7bc:	00900034 	movhi	r2,16384
   9e7c0:	10bfffc4 	addi	r2,r2,-1
   9e7c4:	1886703a 	and	r3,r3,r2
   9e7c8:	e0bff917 	ldw	r2,-28(fp)
   9e7cc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   9e7d0:	e0bff617 	ldw	r2,-40(fp)
   9e7d4:	1004c03a 	cmpne	r2,r2,zero
   9e7d8:	1000061e 	bne	r2,zero,9e7f4 <open+0xf0>
   9e7dc:	e13ff917 	ldw	r4,-28(fp)
   9e7e0:	009e60c0 	call	9e60c <alt_file_locked>
   9e7e4:	e0bff715 	stw	r2,-36(fp)
   9e7e8:	e0bff717 	ldw	r2,-36(fp)
   9e7ec:	1004803a 	cmplt	r2,r2,zero
   9e7f0:	1000131e 	bne	r2,zero,9e840 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   9e7f4:	e0bffa17 	ldw	r2,-24(fp)
   9e7f8:	10800317 	ldw	r2,12(r2)
   9e7fc:	1005003a 	cmpeq	r2,r2,zero
   9e800:	1000091e 	bne	r2,zero,9e828 <open+0x124>
   9e804:	e0bffa17 	ldw	r2,-24(fp)
   9e808:	10800317 	ldw	r2,12(r2)
   9e80c:	e13ff917 	ldw	r4,-28(fp)
   9e810:	e17ffb17 	ldw	r5,-20(fp)
   9e814:	e1bffc17 	ldw	r6,-16(fp)
   9e818:	e1fffd17 	ldw	r7,-12(fp)
   9e81c:	103ee83a 	callr	r2
   9e820:	e0bfff15 	stw	r2,-4(fp)
   9e824:	00000106 	br	9e82c <open+0x128>
   9e828:	e03fff15 	stw	zero,-4(fp)
   9e82c:	e0bfff17 	ldw	r2,-4(fp)
   9e830:	e0bff715 	stw	r2,-36(fp)
   9e834:	00000206 	br	9e840 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   9e838:	00bffb44 	movi	r2,-19
   9e83c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   9e840:	e0bff717 	ldw	r2,-36(fp)
   9e844:	1004403a 	cmpge	r2,r2,zero
   9e848:	1000091e 	bne	r2,zero,9e870 <open+0x16c>
  {
    alt_release_fd (index);  
   9e84c:	e13ff817 	ldw	r4,-32(fp)
   9e850:	00920b40 	call	920b4 <alt_release_fd>
    ALT_ERRNO = -status;
   9e854:	009e8900 	call	9e890 <alt_get_errno>
   9e858:	e0fff717 	ldw	r3,-36(fp)
   9e85c:	00c7c83a 	sub	r3,zero,r3
   9e860:	10c00015 	stw	r3,0(r2)
    return -1;
   9e864:	00bfffc4 	movi	r2,-1
   9e868:	e0bffe15 	stw	r2,-8(fp)
   9e86c:	00000206 	br	9e878 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   9e870:	e0bff817 	ldw	r2,-32(fp)
   9e874:	e0bffe15 	stw	r2,-8(fp)
   9e878:	e0bffe17 	ldw	r2,-8(fp)
}
   9e87c:	e037883a 	mov	sp,fp
   9e880:	dfc00117 	ldw	ra,4(sp)
   9e884:	df000017 	ldw	fp,0(sp)
   9e888:	dec00204 	addi	sp,sp,8
   9e88c:	f800283a 	ret

0009e890 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   9e890:	defffd04 	addi	sp,sp,-12
   9e894:	dfc00215 	stw	ra,8(sp)
   9e898:	df000115 	stw	fp,4(sp)
   9e89c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   9e8a0:	008002b4 	movhi	r2,10
   9e8a4:	10872904 	addi	r2,r2,7332
   9e8a8:	10800017 	ldw	r2,0(r2)
   9e8ac:	1005003a 	cmpeq	r2,r2,zero
   9e8b0:	1000061e 	bne	r2,zero,9e8cc <alt_get_errno+0x3c>
   9e8b4:	008002b4 	movhi	r2,10
   9e8b8:	10872904 	addi	r2,r2,7332
   9e8bc:	10800017 	ldw	r2,0(r2)
   9e8c0:	103ee83a 	callr	r2
   9e8c4:	e0bfff15 	stw	r2,-4(fp)
   9e8c8:	00000306 	br	9e8d8 <alt_get_errno+0x48>
   9e8cc:	008002b4 	movhi	r2,10
   9e8d0:	108e3b04 	addi	r2,r2,14572
   9e8d4:	e0bfff15 	stw	r2,-4(fp)
   9e8d8:	e0bfff17 	ldw	r2,-4(fp)
}
   9e8dc:	e037883a 	mov	sp,fp
   9e8e0:	dfc00117 	ldw	ra,4(sp)
   9e8e4:	df000017 	ldw	fp,0(sp)
   9e8e8:	dec00204 	addi	sp,sp,8
   9e8ec:	f800283a 	ret

0009e8f0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   9e8f0:	defffa04 	addi	sp,sp,-24
   9e8f4:	df000515 	stw	fp,20(sp)
   9e8f8:	df000504 	addi	fp,sp,20
   9e8fc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9e900:	0005303a 	rdctl	r2,status
   9e904:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9e908:	e0fffd17 	ldw	r3,-12(fp)
   9e90c:	00bfff84 	movi	r2,-2
   9e910:	1884703a 	and	r2,r3,r2
   9e914:	1001703a 	wrctl	status,r2
  
  return context;
   9e918:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   9e91c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   9e920:	e0bfff17 	ldw	r2,-4(fp)
   9e924:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   9e928:	e0bffc17 	ldw	r2,-16(fp)
   9e92c:	10c00017 	ldw	r3,0(r2)
   9e930:	e0bffc17 	ldw	r2,-16(fp)
   9e934:	10800117 	ldw	r2,4(r2)
   9e938:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   9e93c:	e0bffc17 	ldw	r2,-16(fp)
   9e940:	10c00117 	ldw	r3,4(r2)
   9e944:	e0bffc17 	ldw	r2,-16(fp)
   9e948:	10800017 	ldw	r2,0(r2)
   9e94c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   9e950:	e0fffc17 	ldw	r3,-16(fp)
   9e954:	e0bffc17 	ldw	r2,-16(fp)
   9e958:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   9e95c:	e0fffc17 	ldw	r3,-16(fp)
   9e960:	e0bffc17 	ldw	r2,-16(fp)
   9e964:	18800015 	stw	r2,0(r3)
   9e968:	e0bffe17 	ldw	r2,-8(fp)
   9e96c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9e970:	e0bffb17 	ldw	r2,-20(fp)
   9e974:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   9e978:	e037883a 	mov	sp,fp
   9e97c:	df000017 	ldw	fp,0(sp)
   9e980:	dec00104 	addi	sp,sp,4
   9e984:	f800283a 	ret

0009e988 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   9e988:	defffb04 	addi	sp,sp,-20
   9e98c:	dfc00415 	stw	ra,16(sp)
   9e990:	df000315 	stw	fp,12(sp)
   9e994:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   9e998:	d0a02e17 	ldw	r2,-32584(gp)
   9e99c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   9e9a0:	d0a73d17 	ldw	r2,-25356(gp)
   9e9a4:	10800044 	addi	r2,r2,1
   9e9a8:	d0a73d15 	stw	r2,-25356(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   9e9ac:	00003106 	br	9ea74 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   9e9b0:	e0bffe17 	ldw	r2,-8(fp)
   9e9b4:	10800017 	ldw	r2,0(r2)
   9e9b8:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   9e9bc:	e0bffe17 	ldw	r2,-8(fp)
   9e9c0:	10800403 	ldbu	r2,16(r2)
   9e9c4:	10803fcc 	andi	r2,r2,255
   9e9c8:	1005003a 	cmpeq	r2,r2,zero
   9e9cc:	1000051e 	bne	r2,zero,9e9e4 <alt_tick+0x5c>
   9e9d0:	d0a73d17 	ldw	r2,-25356(gp)
   9e9d4:	1004c03a 	cmpne	r2,r2,zero
   9e9d8:	1000021e 	bne	r2,zero,9e9e4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   9e9dc:	e0bffe17 	ldw	r2,-8(fp)
   9e9e0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   9e9e4:	e0bffe17 	ldw	r2,-8(fp)
   9e9e8:	10c00217 	ldw	r3,8(r2)
   9e9ec:	d0a73d17 	ldw	r2,-25356(gp)
   9e9f0:	10c01e36 	bltu	r2,r3,9ea6c <alt_tick+0xe4>
   9e9f4:	e0bffe17 	ldw	r2,-8(fp)
   9e9f8:	10800403 	ldbu	r2,16(r2)
   9e9fc:	10803fcc 	andi	r2,r2,255
   9ea00:	1004c03a 	cmpne	r2,r2,zero
   9ea04:	1000191e 	bne	r2,zero,9ea6c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   9ea08:	e0bffe17 	ldw	r2,-8(fp)
   9ea0c:	10c00317 	ldw	r3,12(r2)
   9ea10:	e0bffe17 	ldw	r2,-8(fp)
   9ea14:	11000517 	ldw	r4,20(r2)
   9ea18:	183ee83a 	callr	r3
   9ea1c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   9ea20:	e0bffd17 	ldw	r2,-12(fp)
   9ea24:	1004c03a 	cmpne	r2,r2,zero
   9ea28:	1000031e 	bne	r2,zero,9ea38 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   9ea2c:	e13ffe17 	ldw	r4,-8(fp)
   9ea30:	009e8f00 	call	9e8f0 <alt_alarm_stop>
   9ea34:	00000d06 	br	9ea6c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   9ea38:	e0bffe17 	ldw	r2,-8(fp)
   9ea3c:	10c00217 	ldw	r3,8(r2)
   9ea40:	e0bffd17 	ldw	r2,-12(fp)
   9ea44:	1887883a 	add	r3,r3,r2
   9ea48:	e0bffe17 	ldw	r2,-8(fp)
   9ea4c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   9ea50:	e0bffe17 	ldw	r2,-8(fp)
   9ea54:	10c00217 	ldw	r3,8(r2)
   9ea58:	d0a73d17 	ldw	r2,-25356(gp)
   9ea5c:	1880032e 	bgeu	r3,r2,9ea6c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   9ea60:	e0fffe17 	ldw	r3,-8(fp)
   9ea64:	00800044 	movi	r2,1
   9ea68:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   9ea6c:	e0bfff17 	ldw	r2,-4(fp)
   9ea70:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   9ea74:	d0e02e04 	addi	r3,gp,-32584
   9ea78:	e0bffe17 	ldw	r2,-8(fp)
   9ea7c:	10ffcc1e 	bne	r2,r3,9e9b0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   9ea80:	00933d00 	call	933d0 <OSTimeTick>
}
   9ea84:	e037883a 	mov	sp,fp
   9ea88:	dfc00117 	ldw	ra,4(sp)
   9ea8c:	df000017 	ldw	fp,0(sp)
   9ea90:	dec00204 	addi	sp,sp,8
   9ea94:	f800283a 	ret

0009ea98 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   9ea98:	deffff04 	addi	sp,sp,-4
   9ea9c:	df000015 	stw	fp,0(sp)
   9eaa0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   9eaa4:	000170fa 	wrctl	ienable,zero
}
   9eaa8:	e037883a 	mov	sp,fp
   9eaac:	df000017 	ldw	fp,0(sp)
   9eab0:	dec00104 	addi	sp,sp,4
   9eab4:	f800283a 	ret

0009eab8 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   9eab8:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   9eabc:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   9eac0:	d1273717 	ldw	r4,-25380(gp)

      stw ra,  0(sp)
   9eac4:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   9eac8:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   9eacc:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   9ead0:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   9ead4:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   9ead8:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   9eadc:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   9eae0:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   9eae4:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   9eae8:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   9eaec:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   9eaf0:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   9eaf4:	009eed80 	call	9eed8 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   9eaf8:	d1273217 	ldw	r4,-25400(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   9eafc:	d1672a07 	ldb	r5,-25432(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   9eb00:	d1273715 	stw	r4,-25380(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   9eb04:	d1672a45 	stb	r5,-25431(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   9eb08:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   9eb0c:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   9eb10:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   9eb14:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   9eb18:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   9eb1c:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   9eb20:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   9eb24:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   9eb28:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   9eb2c:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   9eb30:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   9eb34:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   9eb38:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   9eb3c:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   9eb40:	f800283a 	ret

0009eb44 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   9eb44:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   9eb48:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   9eb4c:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   9eb50:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   9eb54:	009eed80 	call	9eed8 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   9eb58:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   9eb5c:	d4a72845 	stb	r18,-25439(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   9eb60:	003fe506 	br	9eaf8 <OSCtxSw+0x40>

0009eb64 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   9eb64:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   9eb68:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   9eb6c:	10800054 	ori	r2,r2,1
      wrctl status, r2
   9eb70:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   9eb74:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   9eb78:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   9eb7c:	dec00204 	addi	sp,sp,8

      callr r2
   9eb80:	103ee83a 	callr	r2

      nop
   9eb84:	0001883a 	nop

0009eb88 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   9eb88:	defff704 	addi	sp,sp,-36
   9eb8c:	dfc00815 	stw	ra,32(sp)
   9eb90:	df000715 	stw	fp,28(sp)
   9eb94:	df000704 	addi	fp,sp,28
   9eb98:	e13ffc15 	stw	r4,-16(fp)
   9eb9c:	e17ffd15 	stw	r5,-12(fp)
   9eba0:	e1bffe15 	stw	r6,-8(fp)
   9eba4:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   9eba8:	e0bffe17 	ldw	r2,-8(fp)
   9ebac:	1007883a 	mov	r3,r2
   9ebb0:	00bfff04 	movi	r2,-4
   9ebb4:	1884703a 	and	r2,r3,r2
   9ebb8:	10bf0004 	addi	r2,r2,-1024
   9ebbc:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   9ebc0:	e0bff917 	ldw	r2,-28(fp)
   9ebc4:	10000015 	stw	zero,0(r2)
   9ebc8:	e0bff917 	ldw	r2,-28(fp)
   9ebcc:	10c0bb04 	addi	r3,r2,748
   9ebd0:	e0bff917 	ldw	r2,-28(fp)
   9ebd4:	10c00115 	stw	r3,4(r2)
   9ebd8:	e0bff917 	ldw	r2,-28(fp)
   9ebdc:	1080bb04 	addi	r2,r2,748
   9ebe0:	10c01704 	addi	r3,r2,92
   9ebe4:	e0bff917 	ldw	r2,-28(fp)
   9ebe8:	10c00215 	stw	r3,8(r2)
   9ebec:	e0bff917 	ldw	r2,-28(fp)
   9ebf0:	1080bb04 	addi	r2,r2,748
   9ebf4:	10c02e04 	addi	r3,r2,184
   9ebf8:	e0bff917 	ldw	r2,-28(fp)
   9ebfc:	10c00315 	stw	r3,12(r2)
   9ec00:	e0bff917 	ldw	r2,-28(fp)
   9ec04:	10000415 	stw	zero,16(r2)
   9ec08:	e0bff917 	ldw	r2,-28(fp)
   9ec0c:	10800504 	addi	r2,r2,20
   9ec10:	1009883a 	mov	r4,r2
   9ec14:	01800644 	movi	r6,25
   9ec18:	000b883a 	mov	r5,zero
   9ec1c:	008cff00 	call	8cff0 <memset>
   9ec20:	e0bff917 	ldw	r2,-28(fp)
   9ec24:	10000c15 	stw	zero,48(r2)
   9ec28:	e0fff917 	ldw	r3,-28(fp)
   9ec2c:	008002b4 	movhi	r2,10
   9ec30:	10807c04 	addi	r2,r2,496
   9ec34:	18800d15 	stw	r2,52(r3)
   9ec38:	e0bff917 	ldw	r2,-28(fp)
   9ec3c:	10000e15 	stw	zero,56(r2)
   9ec40:	e0bff917 	ldw	r2,-28(fp)
   9ec44:	10000f15 	stw	zero,60(r2)
   9ec48:	e0bff917 	ldw	r2,-28(fp)
   9ec4c:	10001015 	stw	zero,64(r2)
   9ec50:	e0bff917 	ldw	r2,-28(fp)
   9ec54:	10001115 	stw	zero,68(r2)
   9ec58:	e0bff917 	ldw	r2,-28(fp)
   9ec5c:	10001215 	stw	zero,72(r2)
   9ec60:	e0bff917 	ldw	r2,-28(fp)
   9ec64:	10001315 	stw	zero,76(r2)
   9ec68:	e0bff917 	ldw	r2,-28(fp)
   9ec6c:	10001415 	stw	zero,80(r2)
   9ec70:	e0bff917 	ldw	r2,-28(fp)
   9ec74:	10001515 	stw	zero,84(r2)
   9ec78:	e0bff917 	ldw	r2,-28(fp)
   9ec7c:	10001615 	stw	zero,88(r2)
   9ec80:	e0bff917 	ldw	r2,-28(fp)
   9ec84:	10001715 	stw	zero,92(r2)
   9ec88:	e0bff917 	ldw	r2,-28(fp)
   9ec8c:	10001805 	stb	zero,96(r2)
   9ec90:	e0bff917 	ldw	r2,-28(fp)
   9ec94:	10801f04 	addi	r2,r2,124
   9ec98:	10000015 	stw	zero,0(r2)
   9ec9c:	10000115 	stw	zero,4(r2)
   9eca0:	10000215 	stw	zero,8(r2)
   9eca4:	10000315 	stw	zero,12(r2)
   9eca8:	10000415 	stw	zero,16(r2)
   9ecac:	10000515 	stw	zero,20(r2)
   9ecb0:	10000615 	stw	zero,24(r2)
   9ecb4:	10000715 	stw	zero,28(r2)
   9ecb8:	10000815 	stw	zero,32(r2)
   9ecbc:	e0bff917 	ldw	r2,-28(fp)
   9ecc0:	10002815 	stw	zero,160(r2)
   9ecc4:	e0fff917 	ldw	r3,-28(fp)
   9ecc8:	00800044 	movi	r2,1
   9eccc:	18802915 	stw	r2,164(r3)
   9ecd0:	18002a15 	stw	zero,168(r3)
   9ecd4:	e0fff917 	ldw	r3,-28(fp)
   9ecd8:	008cc384 	movi	r2,13070
   9ecdc:	18802b0d 	sth	r2,172(r3)
   9ece0:	e0fff917 	ldw	r3,-28(fp)
   9ece4:	00aaf344 	movi	r2,-21555
   9ece8:	18802b8d 	sth	r2,174(r3)
   9ecec:	e0fff917 	ldw	r3,-28(fp)
   9ecf0:	00848d04 	movi	r2,4660
   9ecf4:	18802c0d 	sth	r2,176(r3)
   9ecf8:	e0fff917 	ldw	r3,-28(fp)
   9ecfc:	00b99b44 	movi	r2,-6547
   9ed00:	18802c8d 	sth	r2,178(r3)
   9ed04:	e0fff917 	ldw	r3,-28(fp)
   9ed08:	00b7bb04 	movi	r2,-8468
   9ed0c:	18802d0d 	sth	r2,180(r3)
   9ed10:	e0fff917 	ldw	r3,-28(fp)
   9ed14:	00800144 	movi	r2,5
   9ed18:	18802d8d 	sth	r2,182(r3)
   9ed1c:	e0fff917 	ldw	r3,-28(fp)
   9ed20:	008002c4 	movi	r2,11
   9ed24:	18802e0d 	sth	r2,184(r3)
   9ed28:	e0bff917 	ldw	r2,-28(fp)
   9ed2c:	10002f15 	stw	zero,188(r2)
   9ed30:	e0bff917 	ldw	r2,-28(fp)
   9ed34:	10003015 	stw	zero,192(r2)
   9ed38:	e0bff917 	ldw	r2,-28(fp)
   9ed3c:	10003115 	stw	zero,196(r2)
   9ed40:	e0bff917 	ldw	r2,-28(fp)
   9ed44:	10003215 	stw	zero,200(r2)
   9ed48:	e0bff917 	ldw	r2,-28(fp)
   9ed4c:	10003315 	stw	zero,204(r2)
   9ed50:	e0bff917 	ldw	r2,-28(fp)
   9ed54:	10003415 	stw	zero,208(r2)
   9ed58:	e0bff917 	ldw	r2,-28(fp)
   9ed5c:	10003e15 	stw	zero,248(r2)
   9ed60:	e0bff917 	ldw	r2,-28(fp)
   9ed64:	10003f15 	stw	zero,252(r2)
   9ed68:	e0bff917 	ldw	r2,-28(fp)
   9ed6c:	10004015 	stw	zero,256(r2)
   9ed70:	e0bff917 	ldw	r2,-28(fp)
   9ed74:	10004115 	stw	zero,260(r2)
   9ed78:	e0bff917 	ldw	r2,-28(fp)
   9ed7c:	10004215 	stw	zero,264(r2)
   9ed80:	e0bff917 	ldw	r2,-28(fp)
   9ed84:	10004315 	stw	zero,268(r2)
   9ed88:	e0bff917 	ldw	r2,-28(fp)
   9ed8c:	10004415 	stw	zero,272(r2)
   9ed90:	e0bff917 	ldw	r2,-28(fp)
   9ed94:	10004515 	stw	zero,276(r2)
   9ed98:	e0bff917 	ldw	r2,-28(fp)
   9ed9c:	10004615 	stw	zero,280(r2)
   9eda0:	e0bff917 	ldw	r2,-28(fp)
   9eda4:	10004715 	stw	zero,284(r2)
   9eda8:	e0bff917 	ldw	r2,-28(fp)
   9edac:	10003505 	stb	zero,212(r2)
   9edb0:	e0bff917 	ldw	r2,-28(fp)
   9edb4:	10003705 	stb	zero,220(r2)
   9edb8:	e0bff917 	ldw	r2,-28(fp)
   9edbc:	10003d15 	stw	zero,244(r2)
   9edc0:	e0bff917 	ldw	r2,-28(fp)
   9edc4:	10005215 	stw	zero,328(r2)
   9edc8:	e0bff917 	ldw	r2,-28(fp)
   9edcc:	10005315 	stw	zero,332(r2)
   9edd0:	e0bff917 	ldw	r2,-28(fp)
   9edd4:	10005415 	stw	zero,336(r2)
   9edd8:	e0bff917 	ldw	r2,-28(fp)
   9eddc:	10005515 	stw	zero,340(r2)
   9ede0:	e0bff917 	ldw	r2,-28(fp)
   9ede4:	1000b515 	stw	zero,724(r2)
   9ede8:	e0bff917 	ldw	r2,-28(fp)
   9edec:	10007515 	stw	zero,468(r2)
   9edf0:	e0bff917 	ldw	r2,-28(fp)
   9edf4:	1000b715 	stw	zero,732(r2)
   9edf8:	e0bff917 	ldw	r2,-28(fp)
   9edfc:	1000b815 	stw	zero,736(r2)
   9ee00:	e0bff917 	ldw	r2,-28(fp)
   9ee04:	1000b915 	stw	zero,740(r2)
   9ee08:	e0bff917 	ldw	r2,-28(fp)
   9ee0c:	1000ba15 	stw	zero,744(r2)
   9ee10:	e0bff917 	ldw	r2,-28(fp)
   9ee14:	1080bb04 	addi	r2,r2,748
   9ee18:	1009883a 	mov	r4,r2
   9ee1c:	01804504 	movi	r6,276
   9ee20:	000b883a 	mov	r5,zero
   9ee24:	008cff00 	call	8cff0 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   9ee28:	e0bff917 	ldw	r2,-28(fp)
   9ee2c:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   9ee30:	e0bffb17 	ldw	r2,-20(fp)
   9ee34:	10bff304 	addi	r2,r2,-52
   9ee38:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   9ee3c:	e0bffa17 	ldw	r2,-24(fp)
   9ee40:	10c00c04 	addi	r3,r2,48
   9ee44:	e0bffc17 	ldw	r2,-16(fp)
   9ee48:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   9ee4c:	e0bffa17 	ldw	r2,-24(fp)
   9ee50:	10c00b04 	addi	r3,r2,44
   9ee54:	e0bffd17 	ldw	r2,-12(fp)
   9ee58:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   9ee5c:	e0bffa17 	ldw	r2,-24(fp)
   9ee60:	10c00a04 	addi	r3,r2,40
   9ee64:	e0bff917 	ldw	r2,-28(fp)
   9ee68:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   9ee6c:	008002b4 	movhi	r2,10
   9ee70:	10bad904 	addi	r2,r2,-5276
   9ee74:	10c00104 	addi	r3,r2,4
   9ee78:	e0bffa17 	ldw	r2,-24(fp)
   9ee7c:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   9ee80:	e0bffa17 	ldw	r2,-24(fp)
}
   9ee84:	e037883a 	mov	sp,fp
   9ee88:	dfc00117 	ldw	ra,4(sp)
   9ee8c:	df000017 	ldw	fp,0(sp)
   9ee90:	dec00204 	addi	sp,sp,8
   9ee94:	f800283a 	ret

0009ee98 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   9ee98:	defffe04 	addi	sp,sp,-8
   9ee9c:	df000115 	stw	fp,4(sp)
   9eea0:	df000104 	addi	fp,sp,4
   9eea4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   9eea8:	e037883a 	mov	sp,fp
   9eeac:	df000017 	ldw	fp,0(sp)
   9eeb0:	dec00104 	addi	sp,sp,4
   9eeb4:	f800283a 	ret

0009eeb8 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   9eeb8:	defffe04 	addi	sp,sp,-8
   9eebc:	df000115 	stw	fp,4(sp)
   9eec0:	df000104 	addi	fp,sp,4
   9eec4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   9eec8:	e037883a 	mov	sp,fp
   9eecc:	df000017 	ldw	fp,0(sp)
   9eed0:	dec00104 	addi	sp,sp,4
   9eed4:	f800283a 	ret

0009eed8 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   9eed8:	deffff04 	addi	sp,sp,-4
   9eedc:	df000015 	stw	fp,0(sp)
   9eee0:	d839883a 	mov	fp,sp
}
   9eee4:	e037883a 	mov	sp,fp
   9eee8:	df000017 	ldw	fp,0(sp)
   9eeec:	dec00104 	addi	sp,sp,4
   9eef0:	f800283a 	ret

0009eef4 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   9eef4:	deffff04 	addi	sp,sp,-4
   9eef8:	df000015 	stw	fp,0(sp)
   9eefc:	d839883a 	mov	fp,sp
}
   9ef00:	e037883a 	mov	sp,fp
   9ef04:	df000017 	ldw	fp,0(sp)
   9ef08:	dec00104 	addi	sp,sp,4
   9ef0c:	f800283a 	ret

0009ef10 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   9ef10:	deffff04 	addi	sp,sp,-4
   9ef14:	df000015 	stw	fp,0(sp)
   9ef18:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   9ef1c:	e037883a 	mov	sp,fp
   9ef20:	df000017 	ldw	fp,0(sp)
   9ef24:	dec00104 	addi	sp,sp,4
   9ef28:	f800283a 	ret

0009ef2c <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   9ef2c:	deffff04 	addi	sp,sp,-4
   9ef30:	df000015 	stw	fp,0(sp)
   9ef34:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   9ef38:	e037883a 	mov	sp,fp
   9ef3c:	df000017 	ldw	fp,0(sp)
   9ef40:	dec00104 	addi	sp,sp,4
   9ef44:	f800283a 	ret

0009ef48 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   9ef48:	deffff04 	addi	sp,sp,-4
   9ef4c:	df000015 	stw	fp,0(sp)
   9ef50:	d839883a 	mov	fp,sp
}
   9ef54:	e037883a 	mov	sp,fp
   9ef58:	df000017 	ldw	fp,0(sp)
   9ef5c:	dec00104 	addi	sp,sp,4
   9ef60:	f800283a 	ret

0009ef64 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   9ef64:	deffff04 	addi	sp,sp,-4
   9ef68:	df000015 	stw	fp,0(sp)
   9ef6c:	d839883a 	mov	fp,sp
}
   9ef70:	e037883a 	mov	sp,fp
   9ef74:	df000017 	ldw	fp,0(sp)
   9ef78:	dec00104 	addi	sp,sp,4
   9ef7c:	f800283a 	ret

0009ef80 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   9ef80:	defffe04 	addi	sp,sp,-8
   9ef84:	df000115 	stw	fp,4(sp)
   9ef88:	df000104 	addi	fp,sp,4
   9ef8c:	e13fff15 	stw	r4,-4(fp)
}
   9ef90:	e037883a 	mov	sp,fp
   9ef94:	df000017 	ldw	fp,0(sp)
   9ef98:	dec00104 	addi	sp,sp,4
   9ef9c:	f800283a 	ret

0009efa0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   9efa0:	defffa04 	addi	sp,sp,-24
   9efa4:	dfc00515 	stw	ra,20(sp)
   9efa8:	df000415 	stw	fp,16(sp)
   9efac:	df000404 	addi	fp,sp,16
   9efb0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   9efb4:	008002b4 	movhi	r2,10
   9efb8:	10872404 	addi	r2,r2,7312
   9efbc:	10800017 	ldw	r2,0(r2)
   9efc0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   9efc4:	00003306 	br	9f094 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   9efc8:	e0bffd17 	ldw	r2,-12(fp)
   9efcc:	11000217 	ldw	r4,8(r2)
   9efd0:	0087b8c0 	call	87b8c <strlen>
   9efd4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   9efd8:	e0bffd17 	ldw	r2,-12(fp)
   9efdc:	10c00217 	ldw	r3,8(r2)
   9efe0:	e0bffc17 	ldw	r2,-16(fp)
   9efe4:	1885883a 	add	r2,r3,r2
   9efe8:	10bfffc4 	addi	r2,r2,-1
   9efec:	10800003 	ldbu	r2,0(r2)
   9eff0:	10803fcc 	andi	r2,r2,255
   9eff4:	1080201c 	xori	r2,r2,128
   9eff8:	10bfe004 	addi	r2,r2,-128
   9effc:	10800bd8 	cmpnei	r2,r2,47
   9f000:	1000031e 	bne	r2,zero,9f010 <alt_find_file+0x70>
    {
      len -= 1;
   9f004:	e0bffc17 	ldw	r2,-16(fp)
   9f008:	10bfffc4 	addi	r2,r2,-1
   9f00c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   9f010:	e0bffc17 	ldw	r2,-16(fp)
   9f014:	1007883a 	mov	r3,r2
   9f018:	e0bffe17 	ldw	r2,-8(fp)
   9f01c:	1885883a 	add	r2,r3,r2
   9f020:	10800003 	ldbu	r2,0(r2)
   9f024:	10803fcc 	andi	r2,r2,255
   9f028:	1080201c 	xori	r2,r2,128
   9f02c:	10bfe004 	addi	r2,r2,-128
   9f030:	10800be0 	cmpeqi	r2,r2,47
   9f034:	10000a1e 	bne	r2,zero,9f060 <alt_find_file+0xc0>
   9f038:	e0bffc17 	ldw	r2,-16(fp)
   9f03c:	1007883a 	mov	r3,r2
   9f040:	e0bffe17 	ldw	r2,-8(fp)
   9f044:	1885883a 	add	r2,r3,r2
   9f048:	10800003 	ldbu	r2,0(r2)
   9f04c:	10803fcc 	andi	r2,r2,255
   9f050:	1080201c 	xori	r2,r2,128
   9f054:	10bfe004 	addi	r2,r2,-128
   9f058:	1004c03a 	cmpne	r2,r2,zero
   9f05c:	10000a1e 	bne	r2,zero,9f088 <alt_find_file+0xe8>
   9f060:	e0bffd17 	ldw	r2,-12(fp)
   9f064:	11000217 	ldw	r4,8(r2)
   9f068:	e1bffc17 	ldw	r6,-16(fp)
   9f06c:	e17ffe17 	ldw	r5,-8(fp)
   9f070:	009f2100 	call	9f210 <memcmp>
   9f074:	1004c03a 	cmpne	r2,r2,zero
   9f078:	1000031e 	bne	r2,zero,9f088 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   9f07c:	e0bffd17 	ldw	r2,-12(fp)
   9f080:	e0bfff15 	stw	r2,-4(fp)
   9f084:	00000806 	br	9f0a8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   9f088:	e0bffd17 	ldw	r2,-12(fp)
   9f08c:	10800017 	ldw	r2,0(r2)
   9f090:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   9f094:	00c002b4 	movhi	r3,10
   9f098:	18c72404 	addi	r3,r3,7312
   9f09c:	e0bffd17 	ldw	r2,-12(fp)
   9f0a0:	10ffc91e 	bne	r2,r3,9efc8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   9f0a4:	e03fff15 	stw	zero,-4(fp)
   9f0a8:	e0bfff17 	ldw	r2,-4(fp)
}
   9f0ac:	e037883a 	mov	sp,fp
   9f0b0:	dfc00117 	ldw	ra,4(sp)
   9f0b4:	df000017 	ldw	fp,0(sp)
   9f0b8:	dec00204 	addi	sp,sp,8
   9f0bc:	f800283a 	ret

0009f0c0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   9f0c0:	defff704 	addi	sp,sp,-36
   9f0c4:	dfc00815 	stw	ra,32(sp)
   9f0c8:	df000715 	stw	fp,28(sp)
   9f0cc:	dc000615 	stw	r16,24(sp)
   9f0d0:	df000604 	addi	fp,sp,24
   9f0d4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   9f0d8:	00bffa04 	movi	r2,-24
   9f0dc:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   9f0e0:	008002b4 	movhi	r2,10
   9f0e4:	108e3c04 	addi	r2,r2,14576
   9f0e8:	10800017 	ldw	r2,0(r2)
   9f0ec:	e0bffa15 	stw	r2,-24(fp)
   9f0f0:	e03ffb0d 	sth	zero,-20(fp)
   9f0f4:	e17ffb0b 	ldhu	r5,-20(fp)
   9f0f8:	e1bffe04 	addi	r6,fp,-8
   9f0fc:	e13ffa17 	ldw	r4,-24(fp)
   9f100:	009a2240 	call	9a224 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   9f104:	e03ffd15 	stw	zero,-12(fp)
   9f108:	00002006 	br	9f18c <alt_get_fd+0xcc>
  {
    if (!alt_fd_list[i].dev)
   9f10c:	e13ffd17 	ldw	r4,-12(fp)
   9f110:	040002b4 	movhi	r16,10
   9f114:	84028c04 	addi	r16,r16,2608
   9f118:	01400304 	movi	r5,12
   9f11c:	00877e40 	call	877e4 <__mulsi3>
   9f120:	1405883a 	add	r2,r2,r16
   9f124:	10800017 	ldw	r2,0(r2)
   9f128:	1004c03a 	cmpne	r2,r2,zero
   9f12c:	1000141e 	bne	r2,zero,9f180 <alt_get_fd+0xc0>
    {
      alt_fd_list[i].dev = dev;
   9f130:	e13ffd17 	ldw	r4,-12(fp)
   9f134:	040002b4 	movhi	r16,10
   9f138:	84028c04 	addi	r16,r16,2608
   9f13c:	01400304 	movi	r5,12
   9f140:	00877e40 	call	877e4 <__mulsi3>
   9f144:	1407883a 	add	r3,r2,r16
   9f148:	e0bfff17 	ldw	r2,-4(fp)
   9f14c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   9f150:	008002b4 	movhi	r2,10
   9f154:	10872804 	addi	r2,r2,7328
   9f158:	10c00017 	ldw	r3,0(r2)
   9f15c:	e0bffd17 	ldw	r2,-12(fp)
   9f160:	1880040e 	bge	r3,r2,9f174 <alt_get_fd+0xb4>
      {
        alt_max_fd = i;
   9f164:	00c002b4 	movhi	r3,10
   9f168:	18c72804 	addi	r3,r3,7328
   9f16c:	e0bffd17 	ldw	r2,-12(fp)
   9f170:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   9f174:	e0bffd17 	ldw	r2,-12(fp)
   9f178:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   9f17c:	00000606 	br	9f198 <alt_get_fd+0xd8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   9f180:	e0bffd17 	ldw	r2,-12(fp)
   9f184:	10800044 	addi	r2,r2,1
   9f188:	e0bffd15 	stw	r2,-12(fp)
   9f18c:	e0bffd17 	ldw	r2,-12(fp)
   9f190:	10800810 	cmplti	r2,r2,32
   9f194:	103fdd1e 	bne	r2,zero,9f10c <alt_get_fd+0x4c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   9f198:	008002b4 	movhi	r2,10
   9f19c:	108e3c04 	addi	r2,r2,14576
   9f1a0:	11000017 	ldw	r4,0(r2)
   9f1a4:	009a61c0 	call	9a61c <OSSemPost>

  return rc;
   9f1a8:	e0bffc17 	ldw	r2,-16(fp)
}
   9f1ac:	e037883a 	mov	sp,fp
   9f1b0:	dfc00217 	ldw	ra,8(sp)
   9f1b4:	df000117 	ldw	fp,4(sp)
   9f1b8:	dc000017 	ldw	r16,0(sp)
   9f1bc:	dec00304 	addi	sp,sp,12
   9f1c0:	f800283a 	ret

0009f1c4 <atexit>:
   9f1c4:	200b883a 	mov	r5,r4
   9f1c8:	000d883a 	mov	r6,zero
   9f1cc:	0009883a 	mov	r4,zero
   9f1d0:	000f883a 	mov	r7,zero
   9f1d4:	009f2841 	jmpi	9f284 <__register_exitproc>

0009f1d8 <exit>:
   9f1d8:	defffe04 	addi	sp,sp,-8
   9f1dc:	000b883a 	mov	r5,zero
   9f1e0:	dc000015 	stw	r16,0(sp)
   9f1e4:	dfc00115 	stw	ra,4(sp)
   9f1e8:	2021883a 	mov	r16,r4
   9f1ec:	009f3bc0 	call	9f3bc <__call_exitprocs>
   9f1f0:	008002b4 	movhi	r2,10
   9f1f4:	10871f04 	addi	r2,r2,7292
   9f1f8:	11000017 	ldw	r4,0(r2)
   9f1fc:	20800f17 	ldw	r2,60(r4)
   9f200:	10000126 	beq	r2,zero,9f208 <exit+0x30>
   9f204:	103ee83a 	callr	r2
   9f208:	8009883a 	mov	r4,r16
   9f20c:	009f5ac0 	call	9f5ac <_exit>

0009f210 <memcmp>:
   9f210:	00c000c4 	movi	r3,3
   9f214:	1980032e 	bgeu	r3,r6,9f224 <memcmp+0x14>
   9f218:	2144b03a 	or	r2,r4,r5
   9f21c:	10c4703a 	and	r2,r2,r3
   9f220:	10000f26 	beq	r2,zero,9f260 <memcmp+0x50>
   9f224:	31ffffc4 	addi	r7,r6,-1
   9f228:	3000061e 	bne	r6,zero,9f244 <memcmp+0x34>
   9f22c:	00000a06 	br	9f258 <memcmp+0x48>
   9f230:	39ffffc4 	addi	r7,r7,-1
   9f234:	00bfffc4 	movi	r2,-1
   9f238:	21000044 	addi	r4,r4,1
   9f23c:	29400044 	addi	r5,r5,1
   9f240:	38800526 	beq	r7,r2,9f258 <memcmp+0x48>
   9f244:	20c00003 	ldbu	r3,0(r4)
   9f248:	28800003 	ldbu	r2,0(r5)
   9f24c:	18bff826 	beq	r3,r2,9f230 <memcmp+0x20>
   9f250:	1885c83a 	sub	r2,r3,r2
   9f254:	f800283a 	ret
   9f258:	0005883a 	mov	r2,zero
   9f25c:	f800283a 	ret
   9f260:	180f883a 	mov	r7,r3
   9f264:	20c00017 	ldw	r3,0(r4)
   9f268:	28800017 	ldw	r2,0(r5)
   9f26c:	18bfed1e 	bne	r3,r2,9f224 <memcmp+0x14>
   9f270:	31bfff04 	addi	r6,r6,-4
   9f274:	21000104 	addi	r4,r4,4
   9f278:	29400104 	addi	r5,r5,4
   9f27c:	39bff936 	bltu	r7,r6,9f264 <memcmp+0x54>
   9f280:	003fe806 	br	9f224 <memcmp+0x14>

0009f284 <__register_exitproc>:
   9f284:	defffa04 	addi	sp,sp,-24
   9f288:	008002b4 	movhi	r2,10
   9f28c:	10871f04 	addi	r2,r2,7292
   9f290:	dc000015 	stw	r16,0(sp)
   9f294:	14000017 	ldw	r16,0(r2)
   9f298:	dd000415 	stw	r20,16(sp)
   9f29c:	2829883a 	mov	r20,r5
   9f2a0:	81405217 	ldw	r5,328(r16)
   9f2a4:	dcc00315 	stw	r19,12(sp)
   9f2a8:	dc800215 	stw	r18,8(sp)
   9f2ac:	dc400115 	stw	r17,4(sp)
   9f2b0:	dfc00515 	stw	ra,20(sp)
   9f2b4:	2023883a 	mov	r17,r4
   9f2b8:	3027883a 	mov	r19,r6
   9f2bc:	3825883a 	mov	r18,r7
   9f2c0:	28002526 	beq	r5,zero,9f358 <__register_exitproc+0xd4>
   9f2c4:	29000117 	ldw	r4,4(r5)
   9f2c8:	008007c4 	movi	r2,31
   9f2cc:	11002716 	blt	r2,r4,9f36c <__register_exitproc+0xe8>
   9f2d0:	8800101e 	bne	r17,zero,9f314 <__register_exitproc+0x90>
   9f2d4:	2105883a 	add	r2,r4,r4
   9f2d8:	1085883a 	add	r2,r2,r2
   9f2dc:	20c00044 	addi	r3,r4,1
   9f2e0:	1145883a 	add	r2,r2,r5
   9f2e4:	0009883a 	mov	r4,zero
   9f2e8:	15000215 	stw	r20,8(r2)
   9f2ec:	28c00115 	stw	r3,4(r5)
   9f2f0:	2005883a 	mov	r2,r4
   9f2f4:	dfc00517 	ldw	ra,20(sp)
   9f2f8:	dd000417 	ldw	r20,16(sp)
   9f2fc:	dcc00317 	ldw	r19,12(sp)
   9f300:	dc800217 	ldw	r18,8(sp)
   9f304:	dc400117 	ldw	r17,4(sp)
   9f308:	dc000017 	ldw	r16,0(sp)
   9f30c:	dec00604 	addi	sp,sp,24
   9f310:	f800283a 	ret
   9f314:	29802204 	addi	r6,r5,136
   9f318:	00800044 	movi	r2,1
   9f31c:	110e983a 	sll	r7,r2,r4
   9f320:	30c04017 	ldw	r3,256(r6)
   9f324:	2105883a 	add	r2,r4,r4
   9f328:	1085883a 	add	r2,r2,r2
   9f32c:	1185883a 	add	r2,r2,r6
   9f330:	19c6b03a 	or	r3,r3,r7
   9f334:	14802015 	stw	r18,128(r2)
   9f338:	14c00015 	stw	r19,0(r2)
   9f33c:	00800084 	movi	r2,2
   9f340:	30c04015 	stw	r3,256(r6)
   9f344:	88bfe31e 	bne	r17,r2,9f2d4 <__register_exitproc+0x50>
   9f348:	30804117 	ldw	r2,260(r6)
   9f34c:	11c4b03a 	or	r2,r2,r7
   9f350:	30804115 	stw	r2,260(r6)
   9f354:	003fdf06 	br	9f2d4 <__register_exitproc+0x50>
   9f358:	00800334 	movhi	r2,12
   9f35c:	10a30e04 	addi	r2,r2,-29640
   9f360:	100b883a 	mov	r5,r2
   9f364:	80805215 	stw	r2,328(r16)
   9f368:	003fd606 	br	9f2c4 <__register_exitproc+0x40>
   9f36c:	00800034 	movhi	r2,0
   9f370:	10800004 	addi	r2,r2,0
   9f374:	1000021e 	bne	r2,zero,9f380 <__register_exitproc+0xfc>
   9f378:	013fffc4 	movi	r4,-1
   9f37c:	003fdc06 	br	9f2f0 <__register_exitproc+0x6c>
   9f380:	01006404 	movi	r4,400
   9f384:	103ee83a 	callr	r2
   9f388:	1007883a 	mov	r3,r2
   9f38c:	103ffa26 	beq	r2,zero,9f378 <__register_exitproc+0xf4>
   9f390:	80805217 	ldw	r2,328(r16)
   9f394:	180b883a 	mov	r5,r3
   9f398:	18000115 	stw	zero,4(r3)
   9f39c:	18800015 	stw	r2,0(r3)
   9f3a0:	80c05215 	stw	r3,328(r16)
   9f3a4:	18006215 	stw	zero,392(r3)
   9f3a8:	18006315 	stw	zero,396(r3)
   9f3ac:	0009883a 	mov	r4,zero
   9f3b0:	883fc826 	beq	r17,zero,9f2d4 <__register_exitproc+0x50>
   9f3b4:	003fd706 	br	9f314 <__register_exitproc+0x90>

0009f3b8 <register_fini>:
   9f3b8:	f800283a 	ret

0009f3bc <__call_exitprocs>:
   9f3bc:	008002b4 	movhi	r2,10
   9f3c0:	10871f04 	addi	r2,r2,7292
   9f3c4:	10800017 	ldw	r2,0(r2)
   9f3c8:	defff304 	addi	sp,sp,-52
   9f3cc:	df000b15 	stw	fp,44(sp)
   9f3d0:	d8800115 	stw	r2,4(sp)
   9f3d4:	00800034 	movhi	r2,0
   9f3d8:	10800004 	addi	r2,r2,0
   9f3dc:	1005003a 	cmpeq	r2,r2,zero
   9f3e0:	d8800215 	stw	r2,8(sp)
   9f3e4:	d8800117 	ldw	r2,4(sp)
   9f3e8:	dd400815 	stw	r21,32(sp)
   9f3ec:	dd000715 	stw	r20,28(sp)
   9f3f0:	10805204 	addi	r2,r2,328
   9f3f4:	dfc00c15 	stw	ra,48(sp)
   9f3f8:	ddc00a15 	stw	r23,40(sp)
   9f3fc:	dd800915 	stw	r22,36(sp)
   9f400:	dcc00615 	stw	r19,24(sp)
   9f404:	dc800515 	stw	r18,20(sp)
   9f408:	dc400415 	stw	r17,16(sp)
   9f40c:	dc000315 	stw	r16,12(sp)
   9f410:	282b883a 	mov	r21,r5
   9f414:	2039883a 	mov	fp,r4
   9f418:	d8800015 	stw	r2,0(sp)
   9f41c:	2829003a 	cmpeq	r20,r5,zero
   9f420:	d8800117 	ldw	r2,4(sp)
   9f424:	14405217 	ldw	r17,328(r2)
   9f428:	88001026 	beq	r17,zero,9f46c <__call_exitprocs+0xb0>
   9f42c:	ddc00017 	ldw	r23,0(sp)
   9f430:	88800117 	ldw	r2,4(r17)
   9f434:	8c802204 	addi	r18,r17,136
   9f438:	143fffc4 	addi	r16,r2,-1
   9f43c:	80000916 	blt	r16,zero,9f464 <__call_exitprocs+0xa8>
   9f440:	05bfffc4 	movi	r22,-1
   9f444:	a000151e 	bne	r20,zero,9f49c <__call_exitprocs+0xe0>
   9f448:	8409883a 	add	r4,r16,r16
   9f44c:	2105883a 	add	r2,r4,r4
   9f450:	1485883a 	add	r2,r2,r18
   9f454:	10c02017 	ldw	r3,128(r2)
   9f458:	a8c01126 	beq	r21,r3,9f4a0 <__call_exitprocs+0xe4>
   9f45c:	843fffc4 	addi	r16,r16,-1
   9f460:	85bff81e 	bne	r16,r22,9f444 <__call_exitprocs+0x88>
   9f464:	d8800217 	ldw	r2,8(sp)
   9f468:	10003126 	beq	r2,zero,9f530 <__call_exitprocs+0x174>
   9f46c:	dfc00c17 	ldw	ra,48(sp)
   9f470:	df000b17 	ldw	fp,44(sp)
   9f474:	ddc00a17 	ldw	r23,40(sp)
   9f478:	dd800917 	ldw	r22,36(sp)
   9f47c:	dd400817 	ldw	r21,32(sp)
   9f480:	dd000717 	ldw	r20,28(sp)
   9f484:	dcc00617 	ldw	r19,24(sp)
   9f488:	dc800517 	ldw	r18,20(sp)
   9f48c:	dc400417 	ldw	r17,16(sp)
   9f490:	dc000317 	ldw	r16,12(sp)
   9f494:	dec00d04 	addi	sp,sp,52
   9f498:	f800283a 	ret
   9f49c:	8409883a 	add	r4,r16,r16
   9f4a0:	88c00117 	ldw	r3,4(r17)
   9f4a4:	2105883a 	add	r2,r4,r4
   9f4a8:	1445883a 	add	r2,r2,r17
   9f4ac:	18ffffc4 	addi	r3,r3,-1
   9f4b0:	11800217 	ldw	r6,8(r2)
   9f4b4:	1c001526 	beq	r3,r16,9f50c <__call_exitprocs+0x150>
   9f4b8:	10000215 	stw	zero,8(r2)
   9f4bc:	303fe726 	beq	r6,zero,9f45c <__call_exitprocs+0xa0>
   9f4c0:	00c00044 	movi	r3,1
   9f4c4:	1c06983a 	sll	r3,r3,r16
   9f4c8:	90804017 	ldw	r2,256(r18)
   9f4cc:	8cc00117 	ldw	r19,4(r17)
   9f4d0:	1884703a 	and	r2,r3,r2
   9f4d4:	10001426 	beq	r2,zero,9f528 <__call_exitprocs+0x16c>
   9f4d8:	90804117 	ldw	r2,260(r18)
   9f4dc:	1884703a 	and	r2,r3,r2
   9f4e0:	10000c1e 	bne	r2,zero,9f514 <__call_exitprocs+0x158>
   9f4e4:	2105883a 	add	r2,r4,r4
   9f4e8:	1485883a 	add	r2,r2,r18
   9f4ec:	11400017 	ldw	r5,0(r2)
   9f4f0:	e009883a 	mov	r4,fp
   9f4f4:	303ee83a 	callr	r6
   9f4f8:	88800117 	ldw	r2,4(r17)
   9f4fc:	98bfc81e 	bne	r19,r2,9f420 <__call_exitprocs+0x64>
   9f500:	b8800017 	ldw	r2,0(r23)
   9f504:	147fd526 	beq	r2,r17,9f45c <__call_exitprocs+0xa0>
   9f508:	003fc506 	br	9f420 <__call_exitprocs+0x64>
   9f50c:	8c000115 	stw	r16,4(r17)
   9f510:	003fea06 	br	9f4bc <__call_exitprocs+0x100>
   9f514:	2105883a 	add	r2,r4,r4
   9f518:	1485883a 	add	r2,r2,r18
   9f51c:	11000017 	ldw	r4,0(r2)
   9f520:	303ee83a 	callr	r6
   9f524:	003ff406 	br	9f4f8 <__call_exitprocs+0x13c>
   9f528:	303ee83a 	callr	r6
   9f52c:	003ff206 	br	9f4f8 <__call_exitprocs+0x13c>
   9f530:	88800117 	ldw	r2,4(r17)
   9f534:	1000081e 	bne	r2,zero,9f558 <__call_exitprocs+0x19c>
   9f538:	89000017 	ldw	r4,0(r17)
   9f53c:	20000726 	beq	r4,zero,9f55c <__call_exitprocs+0x1a0>
   9f540:	b9000015 	stw	r4,0(r23)
   9f544:	8809883a 	mov	r4,r17
   9f548:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
   9f54c:	bc400017 	ldw	r17,0(r23)
   9f550:	883fb71e 	bne	r17,zero,9f430 <__call_exitprocs+0x74>
   9f554:	003fc506 	br	9f46c <__call_exitprocs+0xb0>
   9f558:	89000017 	ldw	r4,0(r17)
   9f55c:	882f883a 	mov	r23,r17
   9f560:	2023883a 	mov	r17,r4
   9f564:	883fb21e 	bne	r17,zero,9f430 <__call_exitprocs+0x74>
   9f568:	003fc006 	br	9f46c <__call_exitprocs+0xb0>

0009f56c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   9f56c:	defffd04 	addi	sp,sp,-12
   9f570:	df000215 	stw	fp,8(sp)
   9f574:	df000204 	addi	fp,sp,8
   9f578:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   9f57c:	e0bfff17 	ldw	r2,-4(fp)
   9f580:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   9f584:	e0bffe17 	ldw	r2,-8(fp)
   9f588:	1005003a 	cmpeq	r2,r2,zero
   9f58c:	1000021e 	bne	r2,zero,9f598 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   9f590:	002af070 	cmpltui	zero,zero,43969
   9f594:	00000106 	br	9f59c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   9f598:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   9f59c:	e037883a 	mov	sp,fp
   9f5a0:	df000017 	ldw	fp,0(sp)
   9f5a4:	dec00104 	addi	sp,sp,4
   9f5a8:	f800283a 	ret

0009f5ac <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   9f5ac:	defffd04 	addi	sp,sp,-12
   9f5b0:	dfc00215 	stw	ra,8(sp)
   9f5b4:	df000115 	stw	fp,4(sp)
   9f5b8:	df000104 	addi	fp,sp,4
   9f5bc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   9f5c0:	008002b4 	movhi	r2,10
   9f5c4:	108e4544 	addi	r2,r2,14613
   9f5c8:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   9f5cc:	e13fff17 	ldw	r4,-4(fp)
   9f5d0:	009f56c0 	call	9f56c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   9f5d4:	003fff06 	br	9f5d4 <_exit+0x28>
   9f5d8:	00000010 	cmplti	zero,zero,0
   9f5dc:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
   9f5e0:	00527a01 	jmpi	527a0 <OSCtxSw_SWITCH_PC+0x52760>
   9f5e4:	011f7c01 	jmpi	11f7c0 <__alt_data_end+0x1f7c0>
   9f5e8:	001b0c0b 	ldhu	zero,27696(zero)
   9f5ec:	00000028 	cmpgeui	zero,zero,0
   9f5f0:	00000018 	cmpnei	zero,zero,0
   9f5f4:	0008f1d0 	cmplti	zero,zero,9159
   9f5f8:	0000066c 	andhi	zero,zero,25
   9f5fc:	3c0e4400 	call	3c0e440 <__alt_data_end+0x3b0e440>
   9f600:	910a9074 	orhi	r4,r18,10817
   9f604:	94089209 	0x94089209
   9f608:	97049606 	br	a0864 <__malloc_av_+0x264>
   9f60c:	93019f03 	ldbu	r12,1660(r18)
   9f610:	9c059507 	ldb	r16,5716(r19)
   9f614:	00000002 	0x2
   9f618:	00000028 	cmpgeui	zero,zero,0
   9f61c:	00000044 	movi	zero,1
   9f620:	0008f83c 	xorhi	zero,zero,9184
   9f624:	00000660 	cmpeqi	zero,zero,25
   9f628:	400e4400 	call	400e440 <__alt_data_end+0x3f0e440>
   9f62c:	92099170 	cmpltui	r8,r18,9797
   9f630:	96069408 	cmpgei	et,r18,6736
   9f634:	9c039704 	addi	r16,r19,3676
   9f638:	90019f02 	0x90019f02
   9f63c:	9507930a 	0x9507930a
   9f640:	00000005 	stb	zero,0(zero)
   9f644:	0009f3b8 	rdprs	zero,zero,10190
